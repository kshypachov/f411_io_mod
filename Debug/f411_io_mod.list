
f411_io_mod.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08010000  08010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000261d4  080101a0  080101a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006888  08036378  08036378  00027378  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803cc00  0803cc00  0002e870  2**0
                  CONTENTS
  4 .ARM          00000008  0803cc00  0803cc00  0002dc00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803cc08  0803cc08  0002e870  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0803cc08  0803cc08  0002dc08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0803cc10  0803cc10  0002dc10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000870  20000000  0803cc14  0002e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019a38  20000870  0803d484  0002e870  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  2001a2a8  0803d484  0002f2a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002e870  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005c618  00000000  00000000  0002e8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008333  00000000  00000000  0008aeb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003168  00000000  00000000  000931f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000313b  00000000  00000000  00096358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023bf5  00000000  00000000  00099493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004c109  00000000  00000000  000bd088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6d43  00000000  00000000  00109191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001bfed4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c190  00000000  00000000  001bff18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00028c40  00000000  00000000  001cc0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  001f4ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080101a0 <__do_global_dtors_aux>:
 80101a0:	b510      	push	{r4, lr}
 80101a2:	4c05      	ldr	r4, [pc, #20]	@ (80101b8 <__do_global_dtors_aux+0x18>)
 80101a4:	7823      	ldrb	r3, [r4, #0]
 80101a6:	b933      	cbnz	r3, 80101b6 <__do_global_dtors_aux+0x16>
 80101a8:	4b04      	ldr	r3, [pc, #16]	@ (80101bc <__do_global_dtors_aux+0x1c>)
 80101aa:	b113      	cbz	r3, 80101b2 <__do_global_dtors_aux+0x12>
 80101ac:	4804      	ldr	r0, [pc, #16]	@ (80101c0 <__do_global_dtors_aux+0x20>)
 80101ae:	f3af 8000 	nop.w
 80101b2:	2301      	movs	r3, #1
 80101b4:	7023      	strb	r3, [r4, #0]
 80101b6:	bd10      	pop	{r4, pc}
 80101b8:	20000870 	.word	0x20000870
 80101bc:	00000000 	.word	0x00000000
 80101c0:	0803635c 	.word	0x0803635c

080101c4 <frame_dummy>:
 80101c4:	b508      	push	{r3, lr}
 80101c6:	4b03      	ldr	r3, [pc, #12]	@ (80101d4 <frame_dummy+0x10>)
 80101c8:	b11b      	cbz	r3, 80101d2 <frame_dummy+0xe>
 80101ca:	4903      	ldr	r1, [pc, #12]	@ (80101d8 <frame_dummy+0x14>)
 80101cc:	4803      	ldr	r0, [pc, #12]	@ (80101dc <frame_dummy+0x18>)
 80101ce:	f3af 8000 	nop.w
 80101d2:	bd08      	pop	{r3, pc}
 80101d4:	00000000 	.word	0x00000000
 80101d8:	20000874 	.word	0x20000874
 80101dc:	0803635c 	.word	0x0803635c

080101e0 <strcmp>:
 80101e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101e8:	2a01      	cmp	r2, #1
 80101ea:	bf28      	it	cs
 80101ec:	429a      	cmpcs	r2, r3
 80101ee:	d0f7      	beq.n	80101e0 <strcmp>
 80101f0:	1ad0      	subs	r0, r2, r3
 80101f2:	4770      	bx	lr
	...

08010200 <memchr>:
 8010200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8010204:	2a10      	cmp	r2, #16
 8010206:	db2b      	blt.n	8010260 <memchr+0x60>
 8010208:	f010 0f07 	tst.w	r0, #7
 801020c:	d008      	beq.n	8010220 <memchr+0x20>
 801020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010212:	3a01      	subs	r2, #1
 8010214:	428b      	cmp	r3, r1
 8010216:	d02d      	beq.n	8010274 <memchr+0x74>
 8010218:	f010 0f07 	tst.w	r0, #7
 801021c:	b342      	cbz	r2, 8010270 <memchr+0x70>
 801021e:	d1f6      	bne.n	801020e <memchr+0xe>
 8010220:	b4f0      	push	{r4, r5, r6, r7}
 8010222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801022a:	f022 0407 	bic.w	r4, r2, #7
 801022e:	f07f 0700 	mvns.w	r7, #0
 8010232:	2300      	movs	r3, #0
 8010234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010238:	3c08      	subs	r4, #8
 801023a:	ea85 0501 	eor.w	r5, r5, r1
 801023e:	ea86 0601 	eor.w	r6, r6, r1
 8010242:	fa85 f547 	uadd8	r5, r5, r7
 8010246:	faa3 f587 	sel	r5, r3, r7
 801024a:	fa86 f647 	uadd8	r6, r6, r7
 801024e:	faa5 f687 	sel	r6, r5, r7
 8010252:	b98e      	cbnz	r6, 8010278 <memchr+0x78>
 8010254:	d1ee      	bne.n	8010234 <memchr+0x34>
 8010256:	bcf0      	pop	{r4, r5, r6, r7}
 8010258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801025c:	f002 0207 	and.w	r2, r2, #7
 8010260:	b132      	cbz	r2, 8010270 <memchr+0x70>
 8010262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010266:	3a01      	subs	r2, #1
 8010268:	ea83 0301 	eor.w	r3, r3, r1
 801026c:	b113      	cbz	r3, 8010274 <memchr+0x74>
 801026e:	d1f8      	bne.n	8010262 <memchr+0x62>
 8010270:	2000      	movs	r0, #0
 8010272:	4770      	bx	lr
 8010274:	3801      	subs	r0, #1
 8010276:	4770      	bx	lr
 8010278:	2d00      	cmp	r5, #0
 801027a:	bf06      	itte	eq
 801027c:	4635      	moveq	r5, r6
 801027e:	3803      	subeq	r0, #3
 8010280:	3807      	subne	r0, #7
 8010282:	f015 0f01 	tst.w	r5, #1
 8010286:	d107      	bne.n	8010298 <memchr+0x98>
 8010288:	3001      	adds	r0, #1
 801028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 801028e:	bf02      	ittt	eq
 8010290:	3001      	addeq	r0, #1
 8010292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8010296:	3001      	addeq	r0, #1
 8010298:	bcf0      	pop	{r4, r5, r6, r7}
 801029a:	3801      	subs	r0, #1
 801029c:	4770      	bx	lr
 801029e:	bf00      	nop

080102a0 <strlen>:
 80102a0:	4603      	mov	r3, r0
 80102a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102a6:	2a00      	cmp	r2, #0
 80102a8:	d1fb      	bne.n	80102a2 <strlen+0x2>
 80102aa:	1a18      	subs	r0, r3, r0
 80102ac:	3801      	subs	r0, #1
 80102ae:	4770      	bx	lr

080102b0 <__aeabi_drsub>:
 80102b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80102b4:	e002      	b.n	80102bc <__adddf3>
 80102b6:	bf00      	nop

080102b8 <__aeabi_dsub>:
 80102b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080102bc <__adddf3>:
 80102bc:	b530      	push	{r4, r5, lr}
 80102be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80102c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80102c6:	ea94 0f05 	teq	r4, r5
 80102ca:	bf08      	it	eq
 80102cc:	ea90 0f02 	teqeq	r0, r2
 80102d0:	bf1f      	itttt	ne
 80102d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80102d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80102da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80102de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80102e2:	f000 80e2 	beq.w	80104aa <__adddf3+0x1ee>
 80102e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80102ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80102ee:	bfb8      	it	lt
 80102f0:	426d      	neglt	r5, r5
 80102f2:	dd0c      	ble.n	801030e <__adddf3+0x52>
 80102f4:	442c      	add	r4, r5
 80102f6:	ea80 0202 	eor.w	r2, r0, r2
 80102fa:	ea81 0303 	eor.w	r3, r1, r3
 80102fe:	ea82 0000 	eor.w	r0, r2, r0
 8010302:	ea83 0101 	eor.w	r1, r3, r1
 8010306:	ea80 0202 	eor.w	r2, r0, r2
 801030a:	ea81 0303 	eor.w	r3, r1, r3
 801030e:	2d36      	cmp	r5, #54	@ 0x36
 8010310:	bf88      	it	hi
 8010312:	bd30      	pophi	{r4, r5, pc}
 8010314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8010318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8010320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8010324:	d002      	beq.n	801032c <__adddf3+0x70>
 8010326:	4240      	negs	r0, r0
 8010328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8010330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8010338:	d002      	beq.n	8010340 <__adddf3+0x84>
 801033a:	4252      	negs	r2, r2
 801033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010340:	ea94 0f05 	teq	r4, r5
 8010344:	f000 80a7 	beq.w	8010496 <__adddf3+0x1da>
 8010348:	f1a4 0401 	sub.w	r4, r4, #1
 801034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8010350:	db0d      	blt.n	801036e <__adddf3+0xb2>
 8010352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8010356:	fa22 f205 	lsr.w	r2, r2, r5
 801035a:	1880      	adds	r0, r0, r2
 801035c:	f141 0100 	adc.w	r1, r1, #0
 8010360:	fa03 f20e 	lsl.w	r2, r3, lr
 8010364:	1880      	adds	r0, r0, r2
 8010366:	fa43 f305 	asr.w	r3, r3, r5
 801036a:	4159      	adcs	r1, r3
 801036c:	e00e      	b.n	801038c <__adddf3+0xd0>
 801036e:	f1a5 0520 	sub.w	r5, r5, #32
 8010372:	f10e 0e20 	add.w	lr, lr, #32
 8010376:	2a01      	cmp	r2, #1
 8010378:	fa03 fc0e 	lsl.w	ip, r3, lr
 801037c:	bf28      	it	cs
 801037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8010382:	fa43 f305 	asr.w	r3, r3, r5
 8010386:	18c0      	adds	r0, r0, r3
 8010388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 801038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8010390:	d507      	bpl.n	80103a2 <__adddf3+0xe6>
 8010392:	f04f 0e00 	mov.w	lr, #0
 8010396:	f1dc 0c00 	rsbs	ip, ip, #0
 801039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 801039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80103a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80103a6:	d31b      	bcc.n	80103e0 <__adddf3+0x124>
 80103a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80103ac:	d30c      	bcc.n	80103c8 <__adddf3+0x10c>
 80103ae:	0849      	lsrs	r1, r1, #1
 80103b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80103b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80103b8:	f104 0401 	add.w	r4, r4, #1
 80103bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80103c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80103c4:	f080 809a 	bcs.w	80104fc <__adddf3+0x240>
 80103c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80103cc:	bf08      	it	eq
 80103ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80103d2:	f150 0000 	adcs.w	r0, r0, #0
 80103d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80103da:	ea41 0105 	orr.w	r1, r1, r5
 80103de:	bd30      	pop	{r4, r5, pc}
 80103e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80103e4:	4140      	adcs	r0, r0
 80103e6:	eb41 0101 	adc.w	r1, r1, r1
 80103ea:	3c01      	subs	r4, #1
 80103ec:	bf28      	it	cs
 80103ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80103f2:	d2e9      	bcs.n	80103c8 <__adddf3+0x10c>
 80103f4:	f091 0f00 	teq	r1, #0
 80103f8:	bf04      	itt	eq
 80103fa:	4601      	moveq	r1, r0
 80103fc:	2000      	moveq	r0, #0
 80103fe:	fab1 f381 	clz	r3, r1
 8010402:	bf08      	it	eq
 8010404:	3320      	addeq	r3, #32
 8010406:	f1a3 030b 	sub.w	r3, r3, #11
 801040a:	f1b3 0220 	subs.w	r2, r3, #32
 801040e:	da0c      	bge.n	801042a <__adddf3+0x16e>
 8010410:	320c      	adds	r2, #12
 8010412:	dd08      	ble.n	8010426 <__adddf3+0x16a>
 8010414:	f102 0c14 	add.w	ip, r2, #20
 8010418:	f1c2 020c 	rsb	r2, r2, #12
 801041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8010420:	fa21 f102 	lsr.w	r1, r1, r2
 8010424:	e00c      	b.n	8010440 <__adddf3+0x184>
 8010426:	f102 0214 	add.w	r2, r2, #20
 801042a:	bfd8      	it	le
 801042c:	f1c2 0c20 	rsble	ip, r2, #32
 8010430:	fa01 f102 	lsl.w	r1, r1, r2
 8010434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8010438:	bfdc      	itt	le
 801043a:	ea41 010c 	orrle.w	r1, r1, ip
 801043e:	4090      	lslle	r0, r2
 8010440:	1ae4      	subs	r4, r4, r3
 8010442:	bfa2      	ittt	ge
 8010444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8010448:	4329      	orrge	r1, r5
 801044a:	bd30      	popge	{r4, r5, pc}
 801044c:	ea6f 0404 	mvn.w	r4, r4
 8010450:	3c1f      	subs	r4, #31
 8010452:	da1c      	bge.n	801048e <__adddf3+0x1d2>
 8010454:	340c      	adds	r4, #12
 8010456:	dc0e      	bgt.n	8010476 <__adddf3+0x1ba>
 8010458:	f104 0414 	add.w	r4, r4, #20
 801045c:	f1c4 0220 	rsb	r2, r4, #32
 8010460:	fa20 f004 	lsr.w	r0, r0, r4
 8010464:	fa01 f302 	lsl.w	r3, r1, r2
 8010468:	ea40 0003 	orr.w	r0, r0, r3
 801046c:	fa21 f304 	lsr.w	r3, r1, r4
 8010470:	ea45 0103 	orr.w	r1, r5, r3
 8010474:	bd30      	pop	{r4, r5, pc}
 8010476:	f1c4 040c 	rsb	r4, r4, #12
 801047a:	f1c4 0220 	rsb	r2, r4, #32
 801047e:	fa20 f002 	lsr.w	r0, r0, r2
 8010482:	fa01 f304 	lsl.w	r3, r1, r4
 8010486:	ea40 0003 	orr.w	r0, r0, r3
 801048a:	4629      	mov	r1, r5
 801048c:	bd30      	pop	{r4, r5, pc}
 801048e:	fa21 f004 	lsr.w	r0, r1, r4
 8010492:	4629      	mov	r1, r5
 8010494:	bd30      	pop	{r4, r5, pc}
 8010496:	f094 0f00 	teq	r4, #0
 801049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 801049e:	bf06      	itte	eq
 80104a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80104a4:	3401      	addeq	r4, #1
 80104a6:	3d01      	subne	r5, #1
 80104a8:	e74e      	b.n	8010348 <__adddf3+0x8c>
 80104aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80104ae:	bf18      	it	ne
 80104b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80104b4:	d029      	beq.n	801050a <__adddf3+0x24e>
 80104b6:	ea94 0f05 	teq	r4, r5
 80104ba:	bf08      	it	eq
 80104bc:	ea90 0f02 	teqeq	r0, r2
 80104c0:	d005      	beq.n	80104ce <__adddf3+0x212>
 80104c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80104c6:	bf04      	itt	eq
 80104c8:	4619      	moveq	r1, r3
 80104ca:	4610      	moveq	r0, r2
 80104cc:	bd30      	pop	{r4, r5, pc}
 80104ce:	ea91 0f03 	teq	r1, r3
 80104d2:	bf1e      	ittt	ne
 80104d4:	2100      	movne	r1, #0
 80104d6:	2000      	movne	r0, #0
 80104d8:	bd30      	popne	{r4, r5, pc}
 80104da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80104de:	d105      	bne.n	80104ec <__adddf3+0x230>
 80104e0:	0040      	lsls	r0, r0, #1
 80104e2:	4149      	adcs	r1, r1
 80104e4:	bf28      	it	cs
 80104e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80104ea:	bd30      	pop	{r4, r5, pc}
 80104ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80104f0:	bf3c      	itt	cc
 80104f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80104f6:	bd30      	popcc	{r4, r5, pc}
 80104f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80104fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8010500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010504:	f04f 0000 	mov.w	r0, #0
 8010508:	bd30      	pop	{r4, r5, pc}
 801050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801050e:	bf1a      	itte	ne
 8010510:	4619      	movne	r1, r3
 8010512:	4610      	movne	r0, r2
 8010514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8010518:	bf1c      	itt	ne
 801051a:	460b      	movne	r3, r1
 801051c:	4602      	movne	r2, r0
 801051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010522:	bf06      	itte	eq
 8010524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8010528:	ea91 0f03 	teqeq	r1, r3
 801052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8010530:	bd30      	pop	{r4, r5, pc}
 8010532:	bf00      	nop

08010534 <__aeabi_ui2d>:
 8010534:	f090 0f00 	teq	r0, #0
 8010538:	bf04      	itt	eq
 801053a:	2100      	moveq	r1, #0
 801053c:	4770      	bxeq	lr
 801053e:	b530      	push	{r4, r5, lr}
 8010540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8010544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8010548:	f04f 0500 	mov.w	r5, #0
 801054c:	f04f 0100 	mov.w	r1, #0
 8010550:	e750      	b.n	80103f4 <__adddf3+0x138>
 8010552:	bf00      	nop

08010554 <__aeabi_i2d>:
 8010554:	f090 0f00 	teq	r0, #0
 8010558:	bf04      	itt	eq
 801055a:	2100      	moveq	r1, #0
 801055c:	4770      	bxeq	lr
 801055e:	b530      	push	{r4, r5, lr}
 8010560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8010564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8010568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 801056c:	bf48      	it	mi
 801056e:	4240      	negmi	r0, r0
 8010570:	f04f 0100 	mov.w	r1, #0
 8010574:	e73e      	b.n	80103f4 <__adddf3+0x138>
 8010576:	bf00      	nop

08010578 <__aeabi_f2d>:
 8010578:	0042      	lsls	r2, r0, #1
 801057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 801057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8010582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8010586:	bf1f      	itttt	ne
 8010588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 801058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8010590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8010594:	4770      	bxne	lr
 8010596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 801059a:	bf08      	it	eq
 801059c:	4770      	bxeq	lr
 801059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80105a2:	bf04      	itt	eq
 80105a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80105a8:	4770      	bxeq	lr
 80105aa:	b530      	push	{r4, r5, lr}
 80105ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80105b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80105b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80105b8:	e71c      	b.n	80103f4 <__adddf3+0x138>
 80105ba:	bf00      	nop

080105bc <__aeabi_ul2d>:
 80105bc:	ea50 0201 	orrs.w	r2, r0, r1
 80105c0:	bf08      	it	eq
 80105c2:	4770      	bxeq	lr
 80105c4:	b530      	push	{r4, r5, lr}
 80105c6:	f04f 0500 	mov.w	r5, #0
 80105ca:	e00a      	b.n	80105e2 <__aeabi_l2d+0x16>

080105cc <__aeabi_l2d>:
 80105cc:	ea50 0201 	orrs.w	r2, r0, r1
 80105d0:	bf08      	it	eq
 80105d2:	4770      	bxeq	lr
 80105d4:	b530      	push	{r4, r5, lr}
 80105d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80105da:	d502      	bpl.n	80105e2 <__aeabi_l2d+0x16>
 80105dc:	4240      	negs	r0, r0
 80105de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80105e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80105e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80105ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80105ee:	f43f aed8 	beq.w	80103a2 <__adddf3+0xe6>
 80105f2:	f04f 0203 	mov.w	r2, #3
 80105f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80105fa:	bf18      	it	ne
 80105fc:	3203      	addne	r2, #3
 80105fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010602:	bf18      	it	ne
 8010604:	3203      	addne	r2, #3
 8010606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 801060a:	f1c2 0320 	rsb	r3, r2, #32
 801060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8010612:	fa20 f002 	lsr.w	r0, r0, r2
 8010616:	fa01 fe03 	lsl.w	lr, r1, r3
 801061a:	ea40 000e 	orr.w	r0, r0, lr
 801061e:	fa21 f102 	lsr.w	r1, r1, r2
 8010622:	4414      	add	r4, r2
 8010624:	e6bd      	b.n	80103a2 <__adddf3+0xe6>
 8010626:	bf00      	nop

08010628 <__aeabi_dmul>:
 8010628:	b570      	push	{r4, r5, r6, lr}
 801062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 801062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8010632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8010636:	bf1d      	ittte	ne
 8010638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801063c:	ea94 0f0c 	teqne	r4, ip
 8010640:	ea95 0f0c 	teqne	r5, ip
 8010644:	f000 f8de 	bleq	8010804 <__aeabi_dmul+0x1dc>
 8010648:	442c      	add	r4, r5
 801064a:	ea81 0603 	eor.w	r6, r1, r3
 801064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8010652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8010656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801065a:	bf18      	it	ne
 801065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8010660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010668:	d038      	beq.n	80106dc <__aeabi_dmul+0xb4>
 801066a:	fba0 ce02 	umull	ip, lr, r0, r2
 801066e:	f04f 0500 	mov.w	r5, #0
 8010672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8010676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 801067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 801067e:	f04f 0600 	mov.w	r6, #0
 8010682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8010686:	f09c 0f00 	teq	ip, #0
 801068a:	bf18      	it	ne
 801068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8010690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8010694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8010698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 801069c:	d204      	bcs.n	80106a8 <__aeabi_dmul+0x80>
 801069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80106a2:	416d      	adcs	r5, r5
 80106a4:	eb46 0606 	adc.w	r6, r6, r6
 80106a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80106ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80106b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80106b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80106b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80106bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80106c0:	bf88      	it	hi
 80106c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80106c6:	d81e      	bhi.n	8010706 <__aeabi_dmul+0xde>
 80106c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80106cc:	bf08      	it	eq
 80106ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80106d2:	f150 0000 	adcs.w	r0, r0, #0
 80106d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80106da:	bd70      	pop	{r4, r5, r6, pc}
 80106dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80106e0:	ea46 0101 	orr.w	r1, r6, r1
 80106e4:	ea40 0002 	orr.w	r0, r0, r2
 80106e8:	ea81 0103 	eor.w	r1, r1, r3
 80106ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80106f0:	bfc2      	ittt	gt
 80106f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80106f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80106fa:	bd70      	popgt	{r4, r5, r6, pc}
 80106fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010700:	f04f 0e00 	mov.w	lr, #0
 8010704:	3c01      	subs	r4, #1
 8010706:	f300 80ab 	bgt.w	8010860 <__aeabi_dmul+0x238>
 801070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 801070e:	bfde      	ittt	le
 8010710:	2000      	movle	r0, #0
 8010712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8010716:	bd70      	pople	{r4, r5, r6, pc}
 8010718:	f1c4 0400 	rsb	r4, r4, #0
 801071c:	3c20      	subs	r4, #32
 801071e:	da35      	bge.n	801078c <__aeabi_dmul+0x164>
 8010720:	340c      	adds	r4, #12
 8010722:	dc1b      	bgt.n	801075c <__aeabi_dmul+0x134>
 8010724:	f104 0414 	add.w	r4, r4, #20
 8010728:	f1c4 0520 	rsb	r5, r4, #32
 801072c:	fa00 f305 	lsl.w	r3, r0, r5
 8010730:	fa20 f004 	lsr.w	r0, r0, r4
 8010734:	fa01 f205 	lsl.w	r2, r1, r5
 8010738:	ea40 0002 	orr.w	r0, r0, r2
 801073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8010740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8010744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8010748:	fa21 f604 	lsr.w	r6, r1, r4
 801074c:	eb42 0106 	adc.w	r1, r2, r6
 8010750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010754:	bf08      	it	eq
 8010756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801075a:	bd70      	pop	{r4, r5, r6, pc}
 801075c:	f1c4 040c 	rsb	r4, r4, #12
 8010760:	f1c4 0520 	rsb	r5, r4, #32
 8010764:	fa00 f304 	lsl.w	r3, r0, r4
 8010768:	fa20 f005 	lsr.w	r0, r0, r5
 801076c:	fa01 f204 	lsl.w	r2, r1, r4
 8010770:	ea40 0002 	orr.w	r0, r0, r2
 8010774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801077c:	f141 0100 	adc.w	r1, r1, #0
 8010780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010784:	bf08      	it	eq
 8010786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801078a:	bd70      	pop	{r4, r5, r6, pc}
 801078c:	f1c4 0520 	rsb	r5, r4, #32
 8010790:	fa00 f205 	lsl.w	r2, r0, r5
 8010794:	ea4e 0e02 	orr.w	lr, lr, r2
 8010798:	fa20 f304 	lsr.w	r3, r0, r4
 801079c:	fa01 f205 	lsl.w	r2, r1, r5
 80107a0:	ea43 0302 	orr.w	r3, r3, r2
 80107a4:	fa21 f004 	lsr.w	r0, r1, r4
 80107a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80107ac:	fa21 f204 	lsr.w	r2, r1, r4
 80107b0:	ea20 0002 	bic.w	r0, r0, r2
 80107b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80107b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80107bc:	bf08      	it	eq
 80107be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80107c2:	bd70      	pop	{r4, r5, r6, pc}
 80107c4:	f094 0f00 	teq	r4, #0
 80107c8:	d10f      	bne.n	80107ea <__aeabi_dmul+0x1c2>
 80107ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80107ce:	0040      	lsls	r0, r0, #1
 80107d0:	eb41 0101 	adc.w	r1, r1, r1
 80107d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80107d8:	bf08      	it	eq
 80107da:	3c01      	subeq	r4, #1
 80107dc:	d0f7      	beq.n	80107ce <__aeabi_dmul+0x1a6>
 80107de:	ea41 0106 	orr.w	r1, r1, r6
 80107e2:	f095 0f00 	teq	r5, #0
 80107e6:	bf18      	it	ne
 80107e8:	4770      	bxne	lr
 80107ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80107ee:	0052      	lsls	r2, r2, #1
 80107f0:	eb43 0303 	adc.w	r3, r3, r3
 80107f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80107f8:	bf08      	it	eq
 80107fa:	3d01      	subeq	r5, #1
 80107fc:	d0f7      	beq.n	80107ee <__aeabi_dmul+0x1c6>
 80107fe:	ea43 0306 	orr.w	r3, r3, r6
 8010802:	4770      	bx	lr
 8010804:	ea94 0f0c 	teq	r4, ip
 8010808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801080c:	bf18      	it	ne
 801080e:	ea95 0f0c 	teqne	r5, ip
 8010812:	d00c      	beq.n	801082e <__aeabi_dmul+0x206>
 8010814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010818:	bf18      	it	ne
 801081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801081e:	d1d1      	bne.n	80107c4 <__aeabi_dmul+0x19c>
 8010820:	ea81 0103 	eor.w	r1, r1, r3
 8010824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010828:	f04f 0000 	mov.w	r0, #0
 801082c:	bd70      	pop	{r4, r5, r6, pc}
 801082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010832:	bf06      	itte	eq
 8010834:	4610      	moveq	r0, r2
 8010836:	4619      	moveq	r1, r3
 8010838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801083c:	d019      	beq.n	8010872 <__aeabi_dmul+0x24a>
 801083e:	ea94 0f0c 	teq	r4, ip
 8010842:	d102      	bne.n	801084a <__aeabi_dmul+0x222>
 8010844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8010848:	d113      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801084a:	ea95 0f0c 	teq	r5, ip
 801084e:	d105      	bne.n	801085c <__aeabi_dmul+0x234>
 8010850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8010854:	bf1c      	itt	ne
 8010856:	4610      	movne	r0, r2
 8010858:	4619      	movne	r1, r3
 801085a:	d10a      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801085c:	ea81 0103 	eor.w	r1, r1, r3
 8010860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8010868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801086c:	f04f 0000 	mov.w	r0, #0
 8010870:	bd70      	pop	{r4, r5, r6, pc}
 8010872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8010876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 801087a:	bd70      	pop	{r4, r5, r6, pc}

0801087c <__aeabi_ddiv>:
 801087c:	b570      	push	{r4, r5, r6, lr}
 801087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8010882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8010886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801088a:	bf1d      	ittte	ne
 801088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010890:	ea94 0f0c 	teqne	r4, ip
 8010894:	ea95 0f0c 	teqne	r5, ip
 8010898:	f000 f8a7 	bleq	80109ea <__aeabi_ddiv+0x16e>
 801089c:	eba4 0405 	sub.w	r4, r4, r5
 80108a0:	ea81 0e03 	eor.w	lr, r1, r3
 80108a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80108a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80108ac:	f000 8088 	beq.w	80109c0 <__aeabi_ddiv+0x144>
 80108b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80108b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80108b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80108bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80108c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80108c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80108c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80108cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80108d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80108d4:	429d      	cmp	r5, r3
 80108d6:	bf08      	it	eq
 80108d8:	4296      	cmpeq	r6, r2
 80108da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80108de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80108e2:	d202      	bcs.n	80108ea <__aeabi_ddiv+0x6e>
 80108e4:	085b      	lsrs	r3, r3, #1
 80108e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80108ea:	1ab6      	subs	r6, r6, r2
 80108ec:	eb65 0503 	sbc.w	r5, r5, r3
 80108f0:	085b      	lsrs	r3, r3, #1
 80108f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80108f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80108fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80108fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8010902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010906:	bf22      	ittt	cs
 8010908:	1ab6      	subcs	r6, r6, r2
 801090a:	4675      	movcs	r5, lr
 801090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8010910:	085b      	lsrs	r3, r3, #1
 8010912:	ea4f 0232 	mov.w	r2, r2, rrx
 8010916:	ebb6 0e02 	subs.w	lr, r6, r2
 801091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801091e:	bf22      	ittt	cs
 8010920:	1ab6      	subcs	r6, r6, r2
 8010922:	4675      	movcs	r5, lr
 8010924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8010928:	085b      	lsrs	r3, r3, #1
 801092a:	ea4f 0232 	mov.w	r2, r2, rrx
 801092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8010932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010936:	bf22      	ittt	cs
 8010938:	1ab6      	subcs	r6, r6, r2
 801093a:	4675      	movcs	r5, lr
 801093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8010940:	085b      	lsrs	r3, r3, #1
 8010942:	ea4f 0232 	mov.w	r2, r2, rrx
 8010946:	ebb6 0e02 	subs.w	lr, r6, r2
 801094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801094e:	bf22      	ittt	cs
 8010950:	1ab6      	subcs	r6, r6, r2
 8010952:	4675      	movcs	r5, lr
 8010954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8010958:	ea55 0e06 	orrs.w	lr, r5, r6
 801095c:	d018      	beq.n	8010990 <__aeabi_ddiv+0x114>
 801095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8010962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8010966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8010972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8010976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 801097a:	d1c0      	bne.n	80108fe <__aeabi_ddiv+0x82>
 801097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8010980:	d10b      	bne.n	801099a <__aeabi_ddiv+0x11e>
 8010982:	ea41 0100 	orr.w	r1, r1, r0
 8010986:	f04f 0000 	mov.w	r0, #0
 801098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801098e:	e7b6      	b.n	80108fe <__aeabi_ddiv+0x82>
 8010990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8010994:	bf04      	itt	eq
 8010996:	4301      	orreq	r1, r0
 8010998:	2000      	moveq	r0, #0
 801099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 801099e:	bf88      	it	hi
 80109a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80109a4:	f63f aeaf 	bhi.w	8010706 <__aeabi_dmul+0xde>
 80109a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80109ac:	bf04      	itt	eq
 80109ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80109b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80109b6:	f150 0000 	adcs.w	r0, r0, #0
 80109ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80109be:	bd70      	pop	{r4, r5, r6, pc}
 80109c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80109c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80109c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80109cc:	bfc2      	ittt	gt
 80109ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80109d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80109d6:	bd70      	popgt	{r4, r5, r6, pc}
 80109d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80109dc:	f04f 0e00 	mov.w	lr, #0
 80109e0:	3c01      	subs	r4, #1
 80109e2:	e690      	b.n	8010706 <__aeabi_dmul+0xde>
 80109e4:	ea45 0e06 	orr.w	lr, r5, r6
 80109e8:	e68d      	b.n	8010706 <__aeabi_dmul+0xde>
 80109ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80109ee:	ea94 0f0c 	teq	r4, ip
 80109f2:	bf08      	it	eq
 80109f4:	ea95 0f0c 	teqeq	r5, ip
 80109f8:	f43f af3b 	beq.w	8010872 <__aeabi_dmul+0x24a>
 80109fc:	ea94 0f0c 	teq	r4, ip
 8010a00:	d10a      	bne.n	8010a18 <__aeabi_ddiv+0x19c>
 8010a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010a06:	f47f af34 	bne.w	8010872 <__aeabi_dmul+0x24a>
 8010a0a:	ea95 0f0c 	teq	r5, ip
 8010a0e:	f47f af25 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a12:	4610      	mov	r0, r2
 8010a14:	4619      	mov	r1, r3
 8010a16:	e72c      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a18:	ea95 0f0c 	teq	r5, ip
 8010a1c:	d106      	bne.n	8010a2c <__aeabi_ddiv+0x1b0>
 8010a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8010a22:	f43f aefd 	beq.w	8010820 <__aeabi_dmul+0x1f8>
 8010a26:	4610      	mov	r0, r2
 8010a28:	4619      	mov	r1, r3
 8010a2a:	e722      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010a30:	bf18      	it	ne
 8010a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010a36:	f47f aec5 	bne.w	80107c4 <__aeabi_dmul+0x19c>
 8010a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8010a3e:	f47f af0d 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8010a46:	f47f aeeb 	bne.w	8010820 <__aeabi_dmul+0x1f8>
 8010a4a:	e712      	b.n	8010872 <__aeabi_dmul+0x24a>

08010a4c <__gedf2>:
 8010a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8010a50:	e006      	b.n	8010a60 <__cmpdf2+0x4>
 8010a52:	bf00      	nop

08010a54 <__ledf2>:
 8010a54:	f04f 0c01 	mov.w	ip, #1
 8010a58:	e002      	b.n	8010a60 <__cmpdf2+0x4>
 8010a5a:	bf00      	nop

08010a5c <__cmpdf2>:
 8010a5c:	f04f 0c01 	mov.w	ip, #1
 8010a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8010a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010a70:	bf18      	it	ne
 8010a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8010a76:	d01b      	beq.n	8010ab0 <__cmpdf2+0x54>
 8010a78:	b001      	add	sp, #4
 8010a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8010a7e:	bf0c      	ite	eq
 8010a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8010a84:	ea91 0f03 	teqne	r1, r3
 8010a88:	bf02      	ittt	eq
 8010a8a:	ea90 0f02 	teqeq	r0, r2
 8010a8e:	2000      	moveq	r0, #0
 8010a90:	4770      	bxeq	lr
 8010a92:	f110 0f00 	cmn.w	r0, #0
 8010a96:	ea91 0f03 	teq	r1, r3
 8010a9a:	bf58      	it	pl
 8010a9c:	4299      	cmppl	r1, r3
 8010a9e:	bf08      	it	eq
 8010aa0:	4290      	cmpeq	r0, r2
 8010aa2:	bf2c      	ite	cs
 8010aa4:	17d8      	asrcs	r0, r3, #31
 8010aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8010aaa:	f040 0001 	orr.w	r0, r0, #1
 8010aae:	4770      	bx	lr
 8010ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ab8:	d102      	bne.n	8010ac0 <__cmpdf2+0x64>
 8010aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010abe:	d107      	bne.n	8010ad0 <__cmpdf2+0x74>
 8010ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ac8:	d1d6      	bne.n	8010a78 <__cmpdf2+0x1c>
 8010aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010ace:	d0d3      	beq.n	8010a78 <__cmpdf2+0x1c>
 8010ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8010ad4:	4770      	bx	lr
 8010ad6:	bf00      	nop

08010ad8 <__aeabi_cdrcmple>:
 8010ad8:	4684      	mov	ip, r0
 8010ada:	4610      	mov	r0, r2
 8010adc:	4662      	mov	r2, ip
 8010ade:	468c      	mov	ip, r1
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	4663      	mov	r3, ip
 8010ae4:	e000      	b.n	8010ae8 <__aeabi_cdcmpeq>
 8010ae6:	bf00      	nop

08010ae8 <__aeabi_cdcmpeq>:
 8010ae8:	b501      	push	{r0, lr}
 8010aea:	f7ff ffb7 	bl	8010a5c <__cmpdf2>
 8010aee:	2800      	cmp	r0, #0
 8010af0:	bf48      	it	mi
 8010af2:	f110 0f00 	cmnmi.w	r0, #0
 8010af6:	bd01      	pop	{r0, pc}

08010af8 <__aeabi_dcmpeq>:
 8010af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010afc:	f7ff fff4 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b00:	bf0c      	ite	eq
 8010b02:	2001      	moveq	r0, #1
 8010b04:	2000      	movne	r0, #0
 8010b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b0a:	bf00      	nop

08010b0c <__aeabi_dcmplt>:
 8010b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b10:	f7ff ffea 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b14:	bf34      	ite	cc
 8010b16:	2001      	movcc	r0, #1
 8010b18:	2000      	movcs	r0, #0
 8010b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b1e:	bf00      	nop

08010b20 <__aeabi_dcmple>:
 8010b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b24:	f7ff ffe0 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b28:	bf94      	ite	ls
 8010b2a:	2001      	movls	r0, #1
 8010b2c:	2000      	movhi	r0, #0
 8010b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b32:	bf00      	nop

08010b34 <__aeabi_dcmpge>:
 8010b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b38:	f7ff ffce 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b3c:	bf94      	ite	ls
 8010b3e:	2001      	movls	r0, #1
 8010b40:	2000      	movhi	r0, #0
 8010b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b46:	bf00      	nop

08010b48 <__aeabi_dcmpgt>:
 8010b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b4c:	f7ff ffc4 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b50:	bf34      	ite	cc
 8010b52:	2001      	movcc	r0, #1
 8010b54:	2000      	movcs	r0, #0
 8010b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b5a:	bf00      	nop

08010b5c <__aeabi_dcmpun>:
 8010b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b64:	d102      	bne.n	8010b6c <__aeabi_dcmpun+0x10>
 8010b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010b6a:	d10a      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b74:	d102      	bne.n	8010b7c <__aeabi_dcmpun+0x20>
 8010b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010b7a:	d102      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b7c:	f04f 0000 	mov.w	r0, #0
 8010b80:	4770      	bx	lr
 8010b82:	f04f 0001 	mov.w	r0, #1
 8010b86:	4770      	bx	lr

08010b88 <__aeabi_d2iz>:
 8010b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8010b90:	d215      	bcs.n	8010bbe <__aeabi_d2iz+0x36>
 8010b92:	d511      	bpl.n	8010bb8 <__aeabi_d2iz+0x30>
 8010b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8010b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010b9c:	d912      	bls.n	8010bc4 <__aeabi_d2iz+0x3c>
 8010b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8010bae:	fa23 f002 	lsr.w	r0, r3, r2
 8010bb2:	bf18      	it	ne
 8010bb4:	4240      	negne	r0, r0
 8010bb6:	4770      	bx	lr
 8010bb8:	f04f 0000 	mov.w	r0, #0
 8010bbc:	4770      	bx	lr
 8010bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010bc2:	d105      	bne.n	8010bd0 <__aeabi_d2iz+0x48>
 8010bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8010bc8:	bf08      	it	eq
 8010bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8010bce:	4770      	bx	lr
 8010bd0:	f04f 0000 	mov.w	r0, #0
 8010bd4:	4770      	bx	lr
 8010bd6:	bf00      	nop

08010bd8 <__aeabi_d2uiz>:
 8010bd8:	004a      	lsls	r2, r1, #1
 8010bda:	d211      	bcs.n	8010c00 <__aeabi_d2uiz+0x28>
 8010bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8010be0:	d211      	bcs.n	8010c06 <__aeabi_d2uiz+0x2e>
 8010be2:	d50d      	bpl.n	8010c00 <__aeabi_d2uiz+0x28>
 8010be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8010be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010bec:	d40e      	bmi.n	8010c0c <__aeabi_d2uiz+0x34>
 8010bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8010bfe:	4770      	bx	lr
 8010c00:	f04f 0000 	mov.w	r0, #0
 8010c04:	4770      	bx	lr
 8010c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010c0a:	d102      	bne.n	8010c12 <__aeabi_d2uiz+0x3a>
 8010c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010c10:	4770      	bx	lr
 8010c12:	f04f 0000 	mov.w	r0, #0
 8010c16:	4770      	bx	lr

08010c18 <__aeabi_d2f>:
 8010c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8010c20:	bf24      	itt	cs
 8010c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8010c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8010c2a:	d90d      	bls.n	8010c48 <__aeabi_d2f+0x30>
 8010c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8010c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8010c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8010c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8010c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8010c40:	bf08      	it	eq
 8010c42:	f020 0001 	biceq.w	r0, r0, #1
 8010c46:	4770      	bx	lr
 8010c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8010c4c:	d121      	bne.n	8010c92 <__aeabi_d2f+0x7a>
 8010c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8010c52:	bfbc      	itt	lt
 8010c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8010c58:	4770      	bxlt	lr
 8010c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8010c62:	f1c2 0218 	rsb	r2, r2, #24
 8010c66:	f1c2 0c20 	rsb	ip, r2, #32
 8010c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8010c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8010c72:	bf18      	it	ne
 8010c74:	f040 0001 	orrne.w	r0, r0, #1
 8010c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8010c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8010c84:	ea40 000c 	orr.w	r0, r0, ip
 8010c88:	fa23 f302 	lsr.w	r3, r3, r2
 8010c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010c90:	e7cc      	b.n	8010c2c <__aeabi_d2f+0x14>
 8010c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8010c96:	d107      	bne.n	8010ca8 <__aeabi_d2f+0x90>
 8010c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8010c9c:	bf1e      	ittt	ne
 8010c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8010ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8010ca6:	4770      	bxne	lr
 8010ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8010cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8010cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8010cb4:	4770      	bx	lr
 8010cb6:	bf00      	nop

08010cb8 <__aeabi_ldivmod>:
 8010cb8:	b97b      	cbnz	r3, 8010cda <__aeabi_ldivmod+0x22>
 8010cba:	b972      	cbnz	r2, 8010cda <__aeabi_ldivmod+0x22>
 8010cbc:	2900      	cmp	r1, #0
 8010cbe:	bfbe      	ittt	lt
 8010cc0:	2000      	movlt	r0, #0
 8010cc2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8010cc6:	e006      	blt.n	8010cd6 <__aeabi_ldivmod+0x1e>
 8010cc8:	bf08      	it	eq
 8010cca:	2800      	cmpeq	r0, #0
 8010ccc:	bf1c      	itt	ne
 8010cce:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8010cd2:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8010cd6:	f000 b9ff 	b.w	80110d8 <__aeabi_idiv0>
 8010cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8010cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010ce2:	2900      	cmp	r1, #0
 8010ce4:	db09      	blt.n	8010cfa <__aeabi_ldivmod+0x42>
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	db1a      	blt.n	8010d20 <__aeabi_ldivmod+0x68>
 8010cea:	f000 f897 	bl	8010e1c <__udivmoddi4>
 8010cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010cf6:	b004      	add	sp, #16
 8010cf8:	4770      	bx	lr
 8010cfa:	4240      	negs	r0, r0
 8010cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	db1b      	blt.n	8010d3c <__aeabi_ldivmod+0x84>
 8010d04:	f000 f88a 	bl	8010e1c <__udivmoddi4>
 8010d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d10:	b004      	add	sp, #16
 8010d12:	4240      	negs	r0, r0
 8010d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d18:	4252      	negs	r2, r2
 8010d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d1e:	4770      	bx	lr
 8010d20:	4252      	negs	r2, r2
 8010d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d26:	f000 f879 	bl	8010e1c <__udivmoddi4>
 8010d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d32:	b004      	add	sp, #16
 8010d34:	4240      	negs	r0, r0
 8010d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d3a:	4770      	bx	lr
 8010d3c:	4252      	negs	r2, r2
 8010d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d42:	f000 f86b 	bl	8010e1c <__udivmoddi4>
 8010d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d4e:	b004      	add	sp, #16
 8010d50:	4252      	negs	r2, r2
 8010d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d56:	4770      	bx	lr

08010d58 <__aeabi_uldivmod>:
 8010d58:	b953      	cbnz	r3, 8010d70 <__aeabi_uldivmod+0x18>
 8010d5a:	b94a      	cbnz	r2, 8010d70 <__aeabi_uldivmod+0x18>
 8010d5c:	2900      	cmp	r1, #0
 8010d5e:	bf08      	it	eq
 8010d60:	2800      	cmpeq	r0, #0
 8010d62:	bf1c      	itt	ne
 8010d64:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8010d68:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8010d6c:	f000 b9b4 	b.w	80110d8 <__aeabi_idiv0>
 8010d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8010d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010d78:	f000 f850 	bl	8010e1c <__udivmoddi4>
 8010d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d84:	b004      	add	sp, #16
 8010d86:	4770      	bx	lr

08010d88 <__popcountsi2>:
 8010d88:	0843      	lsrs	r3, r0, #1
 8010d8a:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8010d8e:	1ac0      	subs	r0, r0, r3
 8010d90:	0883      	lsrs	r3, r0, #2
 8010d92:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8010d96:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 8010d9a:	4418      	add	r0, r3
 8010d9c:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8010da0:	f000 300f 	and.w	r0, r0, #252645135	@ 0xf0f0f0f
 8010da4:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8010da8:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8010dac:	0e00      	lsrs	r0, r0, #24
 8010dae:	4770      	bx	lr

08010db0 <__aeabi_d2lz>:
 8010db0:	b538      	push	{r3, r4, r5, lr}
 8010db2:	2200      	movs	r2, #0
 8010db4:	2300      	movs	r3, #0
 8010db6:	4604      	mov	r4, r0
 8010db8:	460d      	mov	r5, r1
 8010dba:	f7ff fea7 	bl	8010b0c <__aeabi_dcmplt>
 8010dbe:	b928      	cbnz	r0, 8010dcc <__aeabi_d2lz+0x1c>
 8010dc0:	4620      	mov	r0, r4
 8010dc2:	4629      	mov	r1, r5
 8010dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010dc8:	f000 b80a 	b.w	8010de0 <__aeabi_d2ulz>
 8010dcc:	4620      	mov	r0, r4
 8010dce:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8010dd2:	f000 f805 	bl	8010de0 <__aeabi_d2ulz>
 8010dd6:	4240      	negs	r0, r0
 8010dd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010ddc:	bd38      	pop	{r3, r4, r5, pc}
 8010dde:	bf00      	nop

08010de0 <__aeabi_d2ulz>:
 8010de0:	b5d0      	push	{r4, r6, r7, lr}
 8010de2:	4b0c      	ldr	r3, [pc, #48]	@ (8010e14 <__aeabi_d2ulz+0x34>)
 8010de4:	2200      	movs	r2, #0
 8010de6:	4606      	mov	r6, r0
 8010de8:	460f      	mov	r7, r1
 8010dea:	f7ff fc1d 	bl	8010628 <__aeabi_dmul>
 8010dee:	f7ff fef3 	bl	8010bd8 <__aeabi_d2uiz>
 8010df2:	4604      	mov	r4, r0
 8010df4:	f7ff fb9e 	bl	8010534 <__aeabi_ui2d>
 8010df8:	4b07      	ldr	r3, [pc, #28]	@ (8010e18 <__aeabi_d2ulz+0x38>)
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	f7ff fc14 	bl	8010628 <__aeabi_dmul>
 8010e00:	4602      	mov	r2, r0
 8010e02:	460b      	mov	r3, r1
 8010e04:	4630      	mov	r0, r6
 8010e06:	4639      	mov	r1, r7
 8010e08:	f7ff fa56 	bl	80102b8 <__aeabi_dsub>
 8010e0c:	f7ff fee4 	bl	8010bd8 <__aeabi_d2uiz>
 8010e10:	4621      	mov	r1, r4
 8010e12:	bdd0      	pop	{r4, r6, r7, pc}
 8010e14:	3df00000 	.word	0x3df00000
 8010e18:	41f00000 	.word	0x41f00000

08010e1c <__udivmoddi4>:
 8010e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e20:	9d08      	ldr	r5, [sp, #32]
 8010e22:	460c      	mov	r4, r1
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d14e      	bne.n	8010ec6 <__udivmoddi4+0xaa>
 8010e28:	4694      	mov	ip, r2
 8010e2a:	458c      	cmp	ip, r1
 8010e2c:	4686      	mov	lr, r0
 8010e2e:	fab2 f282 	clz	r2, r2
 8010e32:	d962      	bls.n	8010efa <__udivmoddi4+0xde>
 8010e34:	b14a      	cbz	r2, 8010e4a <__udivmoddi4+0x2e>
 8010e36:	f1c2 0320 	rsb	r3, r2, #32
 8010e3a:	4091      	lsls	r1, r2
 8010e3c:	fa20 f303 	lsr.w	r3, r0, r3
 8010e40:	fa0c fc02 	lsl.w	ip, ip, r2
 8010e44:	4319      	orrs	r1, r3
 8010e46:	fa00 fe02 	lsl.w	lr, r0, r2
 8010e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8010e4e:	fa1f f68c 	uxth.w	r6, ip
 8010e52:	fbb1 f4f7 	udiv	r4, r1, r7
 8010e56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8010e5a:	fb07 1114 	mls	r1, r7, r4, r1
 8010e5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010e62:	fb04 f106 	mul.w	r1, r4, r6
 8010e66:	4299      	cmp	r1, r3
 8010e68:	d90a      	bls.n	8010e80 <__udivmoddi4+0x64>
 8010e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8010e6e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8010e72:	f080 8112 	bcs.w	801109a <__udivmoddi4+0x27e>
 8010e76:	4299      	cmp	r1, r3
 8010e78:	f240 810f 	bls.w	801109a <__udivmoddi4+0x27e>
 8010e7c:	3c02      	subs	r4, #2
 8010e7e:	4463      	add	r3, ip
 8010e80:	1a59      	subs	r1, r3, r1
 8010e82:	fa1f f38e 	uxth.w	r3, lr
 8010e86:	fbb1 f0f7 	udiv	r0, r1, r7
 8010e8a:	fb07 1110 	mls	r1, r7, r0, r1
 8010e8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010e92:	fb00 f606 	mul.w	r6, r0, r6
 8010e96:	429e      	cmp	r6, r3
 8010e98:	d90a      	bls.n	8010eb0 <__udivmoddi4+0x94>
 8010e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8010e9e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8010ea2:	f080 80fc 	bcs.w	801109e <__udivmoddi4+0x282>
 8010ea6:	429e      	cmp	r6, r3
 8010ea8:	f240 80f9 	bls.w	801109e <__udivmoddi4+0x282>
 8010eac:	4463      	add	r3, ip
 8010eae:	3802      	subs	r0, #2
 8010eb0:	1b9b      	subs	r3, r3, r6
 8010eb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8010eb6:	2100      	movs	r1, #0
 8010eb8:	b11d      	cbz	r5, 8010ec2 <__udivmoddi4+0xa6>
 8010eba:	40d3      	lsrs	r3, r2
 8010ebc:	2200      	movs	r2, #0
 8010ebe:	e9c5 3200 	strd	r3, r2, [r5]
 8010ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ec6:	428b      	cmp	r3, r1
 8010ec8:	d905      	bls.n	8010ed6 <__udivmoddi4+0xba>
 8010eca:	b10d      	cbz	r5, 8010ed0 <__udivmoddi4+0xb4>
 8010ecc:	e9c5 0100 	strd	r0, r1, [r5]
 8010ed0:	2100      	movs	r1, #0
 8010ed2:	4608      	mov	r0, r1
 8010ed4:	e7f5      	b.n	8010ec2 <__udivmoddi4+0xa6>
 8010ed6:	fab3 f183 	clz	r1, r3
 8010eda:	2900      	cmp	r1, #0
 8010edc:	d146      	bne.n	8010f6c <__udivmoddi4+0x150>
 8010ede:	42a3      	cmp	r3, r4
 8010ee0:	d302      	bcc.n	8010ee8 <__udivmoddi4+0xcc>
 8010ee2:	4290      	cmp	r0, r2
 8010ee4:	f0c0 80f0 	bcc.w	80110c8 <__udivmoddi4+0x2ac>
 8010ee8:	1a86      	subs	r6, r0, r2
 8010eea:	eb64 0303 	sbc.w	r3, r4, r3
 8010eee:	2001      	movs	r0, #1
 8010ef0:	2d00      	cmp	r5, #0
 8010ef2:	d0e6      	beq.n	8010ec2 <__udivmoddi4+0xa6>
 8010ef4:	e9c5 6300 	strd	r6, r3, [r5]
 8010ef8:	e7e3      	b.n	8010ec2 <__udivmoddi4+0xa6>
 8010efa:	2a00      	cmp	r2, #0
 8010efc:	f040 8090 	bne.w	8011020 <__udivmoddi4+0x204>
 8010f00:	eba1 040c 	sub.w	r4, r1, ip
 8010f04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8010f08:	fa1f f78c 	uxth.w	r7, ip
 8010f0c:	2101      	movs	r1, #1
 8010f0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8010f12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8010f16:	fb08 4416 	mls	r4, r8, r6, r4
 8010f1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010f1e:	fb07 f006 	mul.w	r0, r7, r6
 8010f22:	4298      	cmp	r0, r3
 8010f24:	d908      	bls.n	8010f38 <__udivmoddi4+0x11c>
 8010f26:	eb1c 0303 	adds.w	r3, ip, r3
 8010f2a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8010f2e:	d202      	bcs.n	8010f36 <__udivmoddi4+0x11a>
 8010f30:	4298      	cmp	r0, r3
 8010f32:	f200 80cd 	bhi.w	80110d0 <__udivmoddi4+0x2b4>
 8010f36:	4626      	mov	r6, r4
 8010f38:	1a1c      	subs	r4, r3, r0
 8010f3a:	fa1f f38e 	uxth.w	r3, lr
 8010f3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8010f42:	fb08 4410 	mls	r4, r8, r0, r4
 8010f46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010f4a:	fb00 f707 	mul.w	r7, r0, r7
 8010f4e:	429f      	cmp	r7, r3
 8010f50:	d908      	bls.n	8010f64 <__udivmoddi4+0x148>
 8010f52:	eb1c 0303 	adds.w	r3, ip, r3
 8010f56:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8010f5a:	d202      	bcs.n	8010f62 <__udivmoddi4+0x146>
 8010f5c:	429f      	cmp	r7, r3
 8010f5e:	f200 80b0 	bhi.w	80110c2 <__udivmoddi4+0x2a6>
 8010f62:	4620      	mov	r0, r4
 8010f64:	1bdb      	subs	r3, r3, r7
 8010f66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8010f6a:	e7a5      	b.n	8010eb8 <__udivmoddi4+0x9c>
 8010f6c:	f1c1 0620 	rsb	r6, r1, #32
 8010f70:	408b      	lsls	r3, r1
 8010f72:	fa22 f706 	lsr.w	r7, r2, r6
 8010f76:	431f      	orrs	r7, r3
 8010f78:	fa20 fc06 	lsr.w	ip, r0, r6
 8010f7c:	fa04 f301 	lsl.w	r3, r4, r1
 8010f80:	ea43 030c 	orr.w	r3, r3, ip
 8010f84:	40f4      	lsrs	r4, r6
 8010f86:	fa00 f801 	lsl.w	r8, r0, r1
 8010f8a:	0c38      	lsrs	r0, r7, #16
 8010f8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8010f90:	fbb4 fef0 	udiv	lr, r4, r0
 8010f94:	fa1f fc87 	uxth.w	ip, r7
 8010f98:	fb00 441e 	mls	r4, r0, lr, r4
 8010f9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8010fa0:	fb0e f90c 	mul.w	r9, lr, ip
 8010fa4:	45a1      	cmp	r9, r4
 8010fa6:	fa02 f201 	lsl.w	r2, r2, r1
 8010faa:	d90a      	bls.n	8010fc2 <__udivmoddi4+0x1a6>
 8010fac:	193c      	adds	r4, r7, r4
 8010fae:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8010fb2:	f080 8084 	bcs.w	80110be <__udivmoddi4+0x2a2>
 8010fb6:	45a1      	cmp	r9, r4
 8010fb8:	f240 8081 	bls.w	80110be <__udivmoddi4+0x2a2>
 8010fbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8010fc0:	443c      	add	r4, r7
 8010fc2:	eba4 0409 	sub.w	r4, r4, r9
 8010fc6:	fa1f f983 	uxth.w	r9, r3
 8010fca:	fbb4 f3f0 	udiv	r3, r4, r0
 8010fce:	fb00 4413 	mls	r4, r0, r3, r4
 8010fd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8010fd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8010fda:	45a4      	cmp	ip, r4
 8010fdc:	d907      	bls.n	8010fee <__udivmoddi4+0x1d2>
 8010fde:	193c      	adds	r4, r7, r4
 8010fe0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8010fe4:	d267      	bcs.n	80110b6 <__udivmoddi4+0x29a>
 8010fe6:	45a4      	cmp	ip, r4
 8010fe8:	d965      	bls.n	80110b6 <__udivmoddi4+0x29a>
 8010fea:	3b02      	subs	r3, #2
 8010fec:	443c      	add	r4, r7
 8010fee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8010ff2:	fba0 9302 	umull	r9, r3, r0, r2
 8010ff6:	eba4 040c 	sub.w	r4, r4, ip
 8010ffa:	429c      	cmp	r4, r3
 8010ffc:	46ce      	mov	lr, r9
 8010ffe:	469c      	mov	ip, r3
 8011000:	d351      	bcc.n	80110a6 <__udivmoddi4+0x28a>
 8011002:	d04e      	beq.n	80110a2 <__udivmoddi4+0x286>
 8011004:	b155      	cbz	r5, 801101c <__udivmoddi4+0x200>
 8011006:	ebb8 030e 	subs.w	r3, r8, lr
 801100a:	eb64 040c 	sbc.w	r4, r4, ip
 801100e:	fa04 f606 	lsl.w	r6, r4, r6
 8011012:	40cb      	lsrs	r3, r1
 8011014:	431e      	orrs	r6, r3
 8011016:	40cc      	lsrs	r4, r1
 8011018:	e9c5 6400 	strd	r6, r4, [r5]
 801101c:	2100      	movs	r1, #0
 801101e:	e750      	b.n	8010ec2 <__udivmoddi4+0xa6>
 8011020:	f1c2 0320 	rsb	r3, r2, #32
 8011024:	fa20 f103 	lsr.w	r1, r0, r3
 8011028:	fa0c fc02 	lsl.w	ip, ip, r2
 801102c:	fa24 f303 	lsr.w	r3, r4, r3
 8011030:	4094      	lsls	r4, r2
 8011032:	430c      	orrs	r4, r1
 8011034:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8011038:	fa00 fe02 	lsl.w	lr, r0, r2
 801103c:	fa1f f78c 	uxth.w	r7, ip
 8011040:	fbb3 f0f8 	udiv	r0, r3, r8
 8011044:	fb08 3110 	mls	r1, r8, r0, r3
 8011048:	0c23      	lsrs	r3, r4, #16
 801104a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801104e:	fb00 f107 	mul.w	r1, r0, r7
 8011052:	4299      	cmp	r1, r3
 8011054:	d908      	bls.n	8011068 <__udivmoddi4+0x24c>
 8011056:	eb1c 0303 	adds.w	r3, ip, r3
 801105a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 801105e:	d22c      	bcs.n	80110ba <__udivmoddi4+0x29e>
 8011060:	4299      	cmp	r1, r3
 8011062:	d92a      	bls.n	80110ba <__udivmoddi4+0x29e>
 8011064:	3802      	subs	r0, #2
 8011066:	4463      	add	r3, ip
 8011068:	1a5b      	subs	r3, r3, r1
 801106a:	b2a4      	uxth	r4, r4
 801106c:	fbb3 f1f8 	udiv	r1, r3, r8
 8011070:	fb08 3311 	mls	r3, r8, r1, r3
 8011074:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8011078:	fb01 f307 	mul.w	r3, r1, r7
 801107c:	42a3      	cmp	r3, r4
 801107e:	d908      	bls.n	8011092 <__udivmoddi4+0x276>
 8011080:	eb1c 0404 	adds.w	r4, ip, r4
 8011084:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8011088:	d213      	bcs.n	80110b2 <__udivmoddi4+0x296>
 801108a:	42a3      	cmp	r3, r4
 801108c:	d911      	bls.n	80110b2 <__udivmoddi4+0x296>
 801108e:	3902      	subs	r1, #2
 8011090:	4464      	add	r4, ip
 8011092:	1ae4      	subs	r4, r4, r3
 8011094:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011098:	e739      	b.n	8010f0e <__udivmoddi4+0xf2>
 801109a:	4604      	mov	r4, r0
 801109c:	e6f0      	b.n	8010e80 <__udivmoddi4+0x64>
 801109e:	4608      	mov	r0, r1
 80110a0:	e706      	b.n	8010eb0 <__udivmoddi4+0x94>
 80110a2:	45c8      	cmp	r8, r9
 80110a4:	d2ae      	bcs.n	8011004 <__udivmoddi4+0x1e8>
 80110a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80110aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80110ae:	3801      	subs	r0, #1
 80110b0:	e7a8      	b.n	8011004 <__udivmoddi4+0x1e8>
 80110b2:	4631      	mov	r1, r6
 80110b4:	e7ed      	b.n	8011092 <__udivmoddi4+0x276>
 80110b6:	4603      	mov	r3, r0
 80110b8:	e799      	b.n	8010fee <__udivmoddi4+0x1d2>
 80110ba:	4630      	mov	r0, r6
 80110bc:	e7d4      	b.n	8011068 <__udivmoddi4+0x24c>
 80110be:	46d6      	mov	lr, sl
 80110c0:	e77f      	b.n	8010fc2 <__udivmoddi4+0x1a6>
 80110c2:	4463      	add	r3, ip
 80110c4:	3802      	subs	r0, #2
 80110c6:	e74d      	b.n	8010f64 <__udivmoddi4+0x148>
 80110c8:	4606      	mov	r6, r0
 80110ca:	4623      	mov	r3, r4
 80110cc:	4608      	mov	r0, r1
 80110ce:	e70f      	b.n	8010ef0 <__udivmoddi4+0xd4>
 80110d0:	3e02      	subs	r6, #2
 80110d2:	4463      	add	r3, ip
 80110d4:	e730      	b.n	8010f38 <__udivmoddi4+0x11c>
 80110d6:	bf00      	nop

080110d8 <__aeabi_idiv0>:
 80110d8:	4770      	bx	lr
 80110da:	bf00      	nop

080110dc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80110dc:	b500      	push	{lr}
 80110de:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80110e0:	2300      	movs	r3, #0
 80110e2:	9300      	str	r3, [sp, #0]
 80110e4:	9301      	str	r3, [sp, #4]
 80110e6:	9302      	str	r3, [sp, #8]
 80110e8:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80110ea:	4815      	ldr	r0, [pc, #84]	@ (8011140 <MX_ADC1_Init+0x64>)
 80110ec:	4a15      	ldr	r2, [pc, #84]	@ (8011144 <MX_ADC1_Init+0x68>)
 80110ee:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80110f0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80110f4:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80110f6:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80110f8:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80110fa:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80110fc:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8011100:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8011102:	4a11      	ldr	r2, [pc, #68]	@ (8011148 <MX_ADC1_Init+0x6c>)
 8011104:	6282      	str	r2, [r0, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8011106:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8011108:	2201      	movs	r2, #1
 801110a:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 801110c:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8011110:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8011112:	f005 fae7 	bl	80166e4 <HAL_ADC_Init>
 8011116:	b968      	cbnz	r0, 8011134 <MX_ADC1_Init+0x58>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8011118:	2312      	movs	r3, #18
 801111a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 801111c:	2301      	movs	r3, #1
 801111e:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8011120:	2300      	movs	r3, #0
 8011122:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8011124:	4669      	mov	r1, sp
 8011126:	4806      	ldr	r0, [pc, #24]	@ (8011140 <MX_ADC1_Init+0x64>)
 8011128:	f005 fb08 	bl	801673c <HAL_ADC_ConfigChannel>
 801112c:	b928      	cbnz	r0, 801113a <MX_ADC1_Init+0x5e>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 801112e:	b005      	add	sp, #20
 8011130:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8011134:	f001 f8e2 	bl	80122fc <Error_Handler>
 8011138:	e7ee      	b.n	8011118 <MX_ADC1_Init+0x3c>
    Error_Handler();
 801113a:	f001 f8df 	bl	80122fc <Error_Handler>
}
 801113e:	e7f6      	b.n	801112e <MX_ADC1_Init+0x52>
 8011140:	2000088c 	.word	0x2000088c
 8011144:	40012000 	.word	0x40012000
 8011148:	0f000001 	.word	0x0f000001

0801114c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC1)
 801114c:	6802      	ldr	r2, [r0, #0]
 801114e:	4b09      	ldr	r3, [pc, #36]	@ (8011174 <HAL_ADC_MspInit+0x28>)
 8011150:	429a      	cmp	r2, r3
 8011152:	d000      	beq.n	8011156 <HAL_ADC_MspInit+0xa>
 8011154:	4770      	bx	lr
{
 8011156:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8011158:	2300      	movs	r3, #0
 801115a:	9301      	str	r3, [sp, #4]
 801115c:	4b06      	ldr	r3, [pc, #24]	@ (8011178 <HAL_ADC_MspInit+0x2c>)
 801115e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011160:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011164:	645a      	str	r2, [r3, #68]	@ 0x44
 8011166:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801116c:	9301      	str	r3, [sp, #4]
 801116e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8011170:	b002      	add	sp, #8
 8011172:	4770      	bx	lr
 8011174:	40012000 	.word	0x40012000
 8011178:	40023800 	.word	0x40023800

0801117c <EthBegin>:

void EthResetEnd(void){
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_SET);
}

void EthBegin(void * param){
 801117c:	b508      	push	{r3, lr}
	//osMutexAcquire(SPI2MutexHandle, osWaitForever);
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_RESET);
 801117e:	2200      	movs	r2, #0
 8011180:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8011184:	4801      	ldr	r0, [pc, #4]	@ (801118c <EthBegin+0x10>)
 8011186:	f005 fda0 	bl	8016cca <HAL_GPIO_WritePin>
}
 801118a:	bd08      	pop	{r3, pc}
 801118c:	40020400 	.word	0x40020400

08011190 <EthEnd>:

void EthEnd(void * param){
 8011190:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 8011192:	2201      	movs	r2, #1
 8011194:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8011198:	4801      	ldr	r0, [pc, #4]	@ (80111a0 <EthEnd+0x10>)
 801119a:	f005 fd96 	bl	8016cca <HAL_GPIO_WritePin>
	//osMutexRelease(SPI2MutexHandle);
}
 801119e:	bd08      	pop	{r3, pc}
 80111a0:	40020400 	.word	0x40020400

080111a4 <FlashBegin>:
  uint8_t rx_data;
  HAL_SPI_TransmitReceive(&hspi2, &data, &rx_data, 1, HAL_MAX_DELAY);
  return rx_data;
}

void FlashBegin(void){
 80111a4:	b508      	push	{r3, lr}
	//osMutexAcquire(SPI2MutexHandle, osWaitForever);
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 80111a6:	2200      	movs	r2, #0
 80111a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80111ac:	4801      	ldr	r0, [pc, #4]	@ (80111b4 <FlashBegin+0x10>)
 80111ae:	f005 fd8c 	bl	8016cca <HAL_GPIO_WritePin>
}
 80111b2:	bd08      	pop	{r3, pc}
 80111b4:	40020000 	.word	0x40020000

080111b8 <FlashEnd>:

void FlashEnd(void){
 80111b8:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 80111ba:	2201      	movs	r2, #1
 80111bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80111c0:	4801      	ldr	r0, [pc, #4]	@ (80111c8 <FlashEnd+0x10>)
 80111c2:	f005 fd82 	bl	8016cca <HAL_GPIO_WritePin>
	//osMutexRelease(SPI2MutexHandle);
}
 80111c6:	bd08      	pop	{r3, pc}
 80111c8:	40020000 	.word	0x40020000

080111cc <StartIOTask>:
{
 80111cc:	b510      	push	{r4, lr}
 80111ce:	b08e      	sub	sp, #56	@ 0x38
	uint16_t pinCoils[] = {coil3_Pin, coil2_Pin,coil1_Pin};
 80111d0:	4b4a      	ldr	r3, [pc, #296]	@ (80112fc <StartIOTask+0x130>)
 80111d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80111d6:	900c      	str	r0, [sp, #48]	@ 0x30
 80111d8:	f8ad 1034 	strh.w	r1, [sp, #52]	@ 0x34
	GPIO_TypeDef* portCoils[] = {coil3_GPIO_Port, coil2_GPIO_Port, coil1_GPIO_Port};
 80111dc:	f10d 0c24 	add.w	ip, sp, #36	@ 0x24
 80111e0:	f103 0408 	add.w	r4, r3, #8
 80111e4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80111e8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
	uint16_t pinInputs[] = {input3_Pin, input2_Pin, input1_Pin };
 80111ec:	3314      	adds	r3, #20
 80111ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80111f2:	9007      	str	r0, [sp, #28]
 80111f4:	f8ad 1020 	strh.w	r1, [sp, #32]
	GPIO_TypeDef* portInputs[] = {input3_GPIO_Port, input2_GPIO_Port, input1_GPIO_Port};
 80111f8:	ab04      	add	r3, sp, #16
 80111fa:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80111fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if ((sizeof(pinCoils) / sizeof(pinCoils[0])) != OUTPUTS_COUNT ||
 8011202:	e072      	b.n	80112ea <StartIOTask+0x11e>
		 osMessageQueueGet(outputWriteQHandle, &pinOutputs_w, 0, 0);
 8011204:	2300      	movs	r3, #0
 8011206:	461a      	mov	r2, r3
 8011208:	a901      	add	r1, sp, #4
 801120a:	483d      	ldr	r0, [pc, #244]	@ (8011300 <StartIOTask+0x134>)
 801120c:	6800      	ldr	r0, [r0, #0]
 801120e:	f007 fe12 	bl	8018e36 <osMessageQueueGet>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 8011212:	2400      	movs	r4, #0
 8011214:	e00e      	b.n	8011234 <StartIOTask+0x68>
		         HAL_GPIO_WritePin(portCoils[i], pinCoils[i], GPIO_PIN_RESET);
 8011216:	2200      	movs	r2, #0
 8011218:	ab0e      	add	r3, sp, #56	@ 0x38
 801121a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801121e:	f833 1c08 	ldrh.w	r1, [r3, #-8]
 8011222:	ab0e      	add	r3, sp, #56	@ 0x38
 8011224:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011228:	f853 0c14 	ldr.w	r0, [r3, #-20]
 801122c:	f005 fd4d 	bl	8016cca <HAL_GPIO_WritePin>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 8011230:	3401      	adds	r4, #1
 8011232:	b2e4      	uxtb	r4, r4
 8011234:	2c02      	cmp	r4, #2
 8011236:	d85e      	bhi.n	80112f6 <StartIOTask+0x12a>
		     if (pinOutputs_w[i]) {
 8011238:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801123c:	446b      	add	r3, sp
 801123e:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d0e7      	beq.n	8011216 <StartIOTask+0x4a>
		         HAL_GPIO_WritePin(portCoils[i], pinCoils[i], GPIO_PIN_SET);
 8011246:	2201      	movs	r2, #1
 8011248:	ab0e      	add	r3, sp, #56	@ 0x38
 801124a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801124e:	f833 1c08 	ldrh.w	r1, [r3, #-8]
 8011252:	ab0e      	add	r3, sp, #56	@ 0x38
 8011254:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011258:	f853 0c14 	ldr.w	r0, [r3, #-20]
 801125c:	f005 fd35 	bl	8016cca <HAL_GPIO_WritePin>
 8011260:	e7e6      	b.n	8011230 <StartIOTask+0x64>
		pinOutputs_r[i] = (uint8_t)HAL_GPIO_ReadPin(portCoils[i], pinCoils[i]);
 8011262:	ab0e      	add	r3, sp, #56	@ 0x38
 8011264:	eb03 0244 	add.w	r2, r3, r4, lsl #1
 8011268:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801126c:	f832 1c08 	ldrh.w	r1, [r2, #-8]
 8011270:	f853 0c14 	ldr.w	r0, [r3, #-20]
 8011274:	f005 fd22 	bl	8016cbc <HAL_GPIO_ReadPin>
 8011278:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801127c:	446b      	add	r3, sp
 801127e:	f803 0c30 	strb.w	r0, [r3, #-48]
	for (i = 0; i < OUTPUTS_COUNT; i++) {
 8011282:	3401      	adds	r4, #1
 8011284:	b2e4      	uxtb	r4, r4
 8011286:	2c02      	cmp	r4, #2
 8011288:	d9eb      	bls.n	8011262 <StartIOTask+0x96>
	osMessageQueueReset(outputReadQHandle);
 801128a:	4c1e      	ldr	r4, [pc, #120]	@ (8011304 <StartIOTask+0x138>)
 801128c:	6820      	ldr	r0, [r4, #0]
 801128e:	f007 fe20 	bl	8018ed2 <osMessageQueueReset>
	osMessageQueuePut(outputReadQHandle, &pinOutputs_r, 0, 0);
 8011292:	2300      	movs	r3, #0
 8011294:	461a      	mov	r2, r3
 8011296:	a902      	add	r1, sp, #8
 8011298:	6820      	ldr	r0, [r4, #0]
 801129a:	f007 fd8a 	bl	8018db2 <osMessageQueuePut>
	for (i = 0; i < INPUTS_COUNT; i++) {
 801129e:	2400      	movs	r4, #0
 80112a0:	e014      	b.n	80112cc <StartIOTask+0x100>
		pinInputs_r[i] = (uint8_t)(!HAL_GPIO_ReadPin(portInputs[i], pinInputs[i]));
 80112a2:	ab0e      	add	r3, sp, #56	@ 0x38
 80112a4:	eb03 0244 	add.w	r2, r3, r4, lsl #1
 80112a8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80112ac:	f832 1c1c 	ldrh.w	r1, [r2, #-28]
 80112b0:	f853 0c28 	ldr.w	r0, [r3, #-40]
 80112b4:	f005 fd02 	bl	8016cbc <HAL_GPIO_ReadPin>
 80112b8:	fab0 f080 	clz	r0, r0
 80112bc:	0940      	lsrs	r0, r0, #5
 80112be:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 80112c2:	446b      	add	r3, sp
 80112c4:	f803 0c2c 	strb.w	r0, [r3, #-44]
	for (i = 0; i < INPUTS_COUNT; i++) {
 80112c8:	3401      	adds	r4, #1
 80112ca:	b2e4      	uxtb	r4, r4
 80112cc:	2c02      	cmp	r4, #2
 80112ce:	d9e8      	bls.n	80112a2 <StartIOTask+0xd6>
	osMessageQueueReset(inputReadQHandle);
 80112d0:	4c0d      	ldr	r4, [pc, #52]	@ (8011308 <StartIOTask+0x13c>)
 80112d2:	6820      	ldr	r0, [r4, #0]
 80112d4:	f007 fdfd 	bl	8018ed2 <osMessageQueueReset>
	osMessageQueuePut(inputReadQHandle, &pinInputs_r, 0, 0);
 80112d8:	2300      	movs	r3, #0
 80112da:	461a      	mov	r2, r3
 80112dc:	a903      	add	r1, sp, #12
 80112de:	6820      	ldr	r0, [r4, #0]
 80112e0:	f007 fd67 	bl	8018db2 <osMessageQueuePut>
    osDelay(1);
 80112e4:	2001      	movs	r0, #1
 80112e6:	f007 fc6c 	bl	8018bc2 <osDelay>
	 if(osMessageQueueGetCount(outputWriteQHandle)){
 80112ea:	4b05      	ldr	r3, [pc, #20]	@ (8011300 <StartIOTask+0x134>)
 80112ec:	6818      	ldr	r0, [r3, #0]
 80112ee:	f007 fde3 	bl	8018eb8 <osMessageQueueGetCount>
 80112f2:	2800      	cmp	r0, #0
 80112f4:	d186      	bne.n	8011204 <StartIOTask+0x38>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 80112f6:	2400      	movs	r4, #0
 80112f8:	e7c5      	b.n	8011286 <StartIOTask+0xba>
 80112fa:	bf00      	nop
 80112fc:	08036378 	.word	0x08036378
 8011300:	200008ec 	.word	0x200008ec
 8011304:	200008f0 	.word	0x200008f0
 8011308:	200008f4 	.word	0x200008f4

0801130c <add_log_mess_to_q>:
				xQueueOverwrite(outputWriteQHandle, output);
			}
	}
}

void add_log_mess_to_q(struct log_message mess){
 801130c:	b084      	sub	sp, #16
 801130e:	b508      	push	{r3, lr}
 8011310:	f10d 0c08 	add.w	ip, sp, #8
 8011314:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	osMessageQueuePut(loggingQHandle,  &mess, 0, 0);
 8011318:	2300      	movs	r3, #0
 801131a:	461a      	mov	r2, r3
 801131c:	4661      	mov	r1, ip
 801131e:	4804      	ldr	r0, [pc, #16]	@ (8011330 <add_log_mess_to_q+0x24>)
 8011320:	6800      	ldr	r0, [r0, #0]
 8011322:	f007 fd46 	bl	8018db2 <osMessageQueuePut>

}
 8011326:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801132a:	b004      	add	sp, #16
 801132c:	4770      	bx	lr
 801132e:	bf00      	nop
 8011330:	200008e4 	.word	0x200008e4

08011334 <StartSettingsTask>:
{
 8011334:	b570      	push	{r4, r5, r6, lr}
 8011336:	b0ba      	sub	sp, #232	@ 0xe8
	size_t  f_size = 0;
 8011338:	2300      	movs	r3, #0
 801133a:	9339      	str	r3, [sp, #228]	@ 0xe4
  SPI_flash_reg_cb(FlashBegin, FlashEnd, FlashSPIrecvBuff, FlashSPIsendByte);
 801133c:	4b7d      	ldr	r3, [pc, #500]	@ (8011534 <StartSettingsTask+0x200>)
 801133e:	4a7e      	ldr	r2, [pc, #504]	@ (8011538 <StartSettingsTask+0x204>)
 8011340:	497e      	ldr	r1, [pc, #504]	@ (801153c <StartSettingsTask+0x208>)
 8011342:	487f      	ldr	r0, [pc, #508]	@ (8011540 <StartSettingsTask+0x20c>)
 8011344:	f004 feb0 	bl	80160a8 <SPI_flash_reg_cb>
  if (lfs_fs_ll_init(FS_Lock, FS_Unlock) < 0){
 8011348:	497e      	ldr	r1, [pc, #504]	@ (8011544 <StartSettingsTask+0x210>)
 801134a:	487f      	ldr	r0, [pc, #508]	@ (8011548 <StartSettingsTask+0x214>)
 801134c:	f00a f872 	bl	801b434 <lfs_fs_ll_init>
 8011350:	2800      	cmp	r0, #0
 8011352:	db3b      	blt.n	80113cc <StartSettingsTask+0x98>
  mg_fs_lfs_mkdir("/web");
 8011354:	487d      	ldr	r0, [pc, #500]	@ (801154c <StartSettingsTask+0x218>)
 8011356:	f00a f857 	bl	801b408 <mg_fs_lfs_mkdir>
  mg_fs_lfs_remove("/firmware");
 801135a:	4c7d      	ldr	r4, [pc, #500]	@ (8011550 <StartSettingsTask+0x21c>)
 801135c:	4620      	mov	r0, r4
 801135e:	f00a f847 	bl	801b3f0 <mg_fs_lfs_remove>
  mg_fs_lfs_remove("/firmware.bin");
 8011362:	487c      	ldr	r0, [pc, #496]	@ (8011554 <StartSettingsTask+0x220>)
 8011364:	f00a f844 	bl	801b3f0 <mg_fs_lfs_remove>
  mg_fs_lfs_mkdir("/firmware");
 8011368:	4620      	mov	r0, r4
 801136a:	f00a f84d 	bl	801b408 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/settings");
 801136e:	487a      	ldr	r0, [pc, #488]	@ (8011558 <StartSettingsTask+0x224>)
 8011370:	f00a f84a 	bl	801b408 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/certs");
 8011374:	4879      	ldr	r0, [pc, #484]	@ (801155c <StartSettingsTask+0x228>)
 8011376:	f00a f847 	bl	801b408 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/log");
 801137a:	4879      	ldr	r0, [pc, #484]	@ (8011560 <StartSettingsTask+0x22c>)
 801137c:	f00a f844 	bl	801b408 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/auth");
 8011380:	4878      	ldr	r0, [pc, #480]	@ (8011564 <StartSettingsTask+0x230>)
 8011382:	f00a f841 	bl	801b408 <mg_fs_lfs_mkdir>
  if (mg_fs_lfs_status("/settings/mqtt.conf", &f_size, NULL)){//file found
 8011386:	2200      	movs	r2, #0
 8011388:	a939      	add	r1, sp, #228	@ 0xe4
 801138a:	4877      	ldr	r0, [pc, #476]	@ (8011568 <StartSettingsTask+0x234>)
 801138c:	f009 ff84 	bl	801b298 <mg_fs_lfs_status>
 8011390:	b330      	cbz	r0, 80113e0 <StartSettingsTask+0xac>
	  f_pointer = mg_fs_lfs_open("/settings/mqtt.conf", MG_FS_READ);
 8011392:	2101      	movs	r1, #1
 8011394:	4874      	ldr	r0, [pc, #464]	@ (8011568 <StartSettingsTask+0x234>)
 8011396:	f009 ffbd 	bl	801b314 <mg_fs_lfs_open>
 801139a:	4604      	mov	r4, r0
	  mg_fs_lfs_read(f_pointer, &mqtt_config, sizeof(mqtt_config));
 801139c:	22c6      	movs	r2, #198	@ 0xc6
 801139e:	a907      	add	r1, sp, #28
 80113a0:	f009 ffe8 	bl	801b374 <mg_fs_lfs_read>
	  mg_fs_lfs_close(f_pointer);
 80113a4:	4620      	mov	r0, r4
 80113a6:	f009 ffd9 	bl	801b35c <mg_fs_lfs_close>
	  mqtt_config.save = 0;
 80113aa:	2200      	movs	r2, #0
 80113ac:	f88d 201c 	strb.w	r2, [sp, #28]
	  xQueueOverwrite(mqttQHandle, &mqtt_config);
 80113b0:	2302      	movs	r3, #2
 80113b2:	a907      	add	r1, sp, #28
 80113b4:	486d      	ldr	r0, [pc, #436]	@ (801156c <StartSettingsTask+0x238>)
 80113b6:	6800      	ldr	r0, [r0, #0]
 80113b8:	f007 ff62 	bl	8019280 <xQueueGenericSend>
  if (mg_fs_lfs_status(WEB_USERS_FILE, &f_size, NULL) == 0){//file not found
 80113bc:	2200      	movs	r2, #0
 80113be:	a939      	add	r1, sp, #228	@ 0xe4
 80113c0:	486b      	ldr	r0, [pc, #428]	@ (8011570 <StartSettingsTask+0x23c>)
 80113c2:	f009 ff69 	bl	801b298 <mg_fs_lfs_status>
 80113c6:	b1c0      	cbz	r0, 80113fa <StartSettingsTask+0xc6>
{
 80113c8:	2400      	movs	r4, #0
 80113ca:	e089      	b.n	80114e0 <StartSettingsTask+0x1ac>
	  flash_not_connect_flag = 1; //indicate that flash is not found
 80113cc:	4b69      	ldr	r3, [pc, #420]	@ (8011574 <StartSettingsTask+0x240>)
 80113ce:	2201      	movs	r2, #1
 80113d0:	701a      	strb	r2, [r3, #0]
	  osDelay(3000);
 80113d2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80113d6:	f007 fbf4 	bl	8018bc2 <osDelay>
	  HAL_NVIC_SystemReset();
 80113da:	f005 faff 	bl	80169dc <HAL_NVIC_SystemReset>
 80113de:	e7b9      	b.n	8011354 <StartSettingsTask+0x20>
	  memset(&mqtt_config, 0, sizeof(mqtt_config));
 80113e0:	22c6      	movs	r2, #198	@ 0xc6
 80113e2:	2100      	movs	r1, #0
 80113e4:	a807      	add	r0, sp, #28
 80113e6:	f01b fe3b 	bl	802d060 <memset>
	  xQueueOverwrite(mqttQHandle, &mqtt_config);
 80113ea:	2302      	movs	r3, #2
 80113ec:	2200      	movs	r2, #0
 80113ee:	a907      	add	r1, sp, #28
 80113f0:	485e      	ldr	r0, [pc, #376]	@ (801156c <StartSettingsTask+0x238>)
 80113f2:	6800      	ldr	r0, [r0, #0]
 80113f4:	f007 ff44 	bl	8019280 <xQueueGenericSend>
 80113f8:	e7e0      	b.n	80113bc <StartSettingsTask+0x88>
	  web_users = (users_list_t *)malloc(user_list_size * sizeof(users_list_t));
 80113fa:	f240 609a 	movw	r0, #1690	@ 0x69a
 80113fe:	f009 fde3 	bl	801afc8 <pvPortMalloc>
	  if (web_users == NULL) {
 8011402:	4604      	mov	r4, r0
 8011404:	b390      	cbz	r0, 801146c <StartSettingsTask+0x138>
		  logging(L_INFO, "Initialize default login pass for web (admin:admin)'");
 8011406:	495c      	ldr	r1, [pc, #368]	@ (8011578 <StartSettingsTask+0x244>)
 8011408:	2001      	movs	r0, #1
 801140a:	f000 fecd 	bl	80121a8 <logging>
		  strcpy(web_users[0].user, WEB_ADMIN_DEFAULT);
 801140e:	4b5b      	ldr	r3, [pc, #364]	@ (801157c <StartSettingsTask+0x248>)
 8011410:	6818      	ldr	r0, [r3, #0]
 8011412:	6020      	str	r0, [r4, #0]
 8011414:	889b      	ldrh	r3, [r3, #4]
 8011416:	80a3      	strh	r3, [r4, #4]
		  unsigned char pass_digest[] = WEB_ADMIN_PASS_DIGEST;
 8011418:	ad01      	add	r5, sp, #4
 801141a:	4e59      	ldr	r6, [pc, #356]	@ (8011580 <StartSettingsTask+0x24c>)
 801141c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801141e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011420:	e896 0003 	ldmia.w	r6, {r0, r1}
 8011424:	f845 0b04 	str.w	r0, [r5], #4
 8011428:	7029      	strb	r1, [r5, #0]
		  memcpy(web_users[0].pass_digest, pass_digest, sizeof(pass_digest));
 801142a:	ad01      	add	r5, sp, #4
 801142c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801142e:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
 8011432:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
 8011436:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
 801143a:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
 801143e:	6828      	ldr	r0, [r5, #0]
 8011440:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
 8011444:	792b      	ldrb	r3, [r5, #4]
 8011446:	f884 3094 	strb.w	r3, [r4, #148]	@ 0x94
		  f_pointer = mg_fs_lfs_open(WEB_USERS_FILE, MG_FS_WRITE);
 801144a:	2102      	movs	r1, #2
 801144c:	4848      	ldr	r0, [pc, #288]	@ (8011570 <StartSettingsTask+0x23c>)
 801144e:	f009 ff61 	bl	801b314 <mg_fs_lfs_open>
 8011452:	4605      	mov	r5, r0
		  mg_fs_lfs_write(f_pointer, web_users, user_list_size * sizeof(users_list_t));
 8011454:	f240 629a 	movw	r2, #1690	@ 0x69a
 8011458:	4621      	mov	r1, r4
 801145a:	f009 ff97 	bl	801b38c <mg_fs_lfs_write>
		  mg_fs_lfs_close(f_pointer);
 801145e:	4628      	mov	r0, r5
 8011460:	f009 ff7c 	bl	801b35c <mg_fs_lfs_close>
	  free(web_users);
 8011464:	4620      	mov	r0, r4
 8011466:	f009 fe31 	bl	801b0cc <vPortFree>
 801146a:	e7ad      	b.n	80113c8 <StartSettingsTask+0x94>
		  logging(L_ERR, "Failed to allocate memory for 'web_users' ");
 801146c:	4945      	ldr	r1, [pc, #276]	@ (8011584 <StartSettingsTask+0x250>)
 801146e:	2003      	movs	r0, #3
 8011470:	f000 fe9a 	bl	80121a8 <logging>
 8011474:	e7f6      	b.n	8011464 <StartSettingsTask+0x130>
		  mg_fs_lfs_remove("/settings/mqtt.conf");
 8011476:	4d3c      	ldr	r5, [pc, #240]	@ (8011568 <StartSettingsTask+0x234>)
 8011478:	4628      	mov	r0, r5
 801147a:	f009 ffb9 	bl	801b3f0 <mg_fs_lfs_remove>
		  if((f_pointer = mg_fs_lfs_open("/settings/mqtt.conf", MG_FS_WRITE))){
 801147e:	2102      	movs	r1, #2
 8011480:	4628      	mov	r0, r5
 8011482:	f009 ff47 	bl	801b314 <mg_fs_lfs_open>
 8011486:	4605      	mov	r5, r0
 8011488:	2800      	cmp	r0, #0
 801148a:	d033      	beq.n	80114f4 <StartSettingsTask+0x1c0>
			  mg_fs_lfs_write(f_pointer, &mqtt_config, sizeof(mqtt_config));
 801148c:	22c6      	movs	r2, #198	@ 0xc6
 801148e:	a907      	add	r1, sp, #28
 8011490:	f009 ff7c 	bl	801b38c <mg_fs_lfs_write>
			  mg_fs_lfs_close(f_pointer);
 8011494:	4628      	mov	r0, r5
 8011496:	f009 ff61 	bl	801b35c <mg_fs_lfs_close>
			  mqtt_config.save = 0;
 801149a:	2200      	movs	r2, #0
 801149c:	f88d 201c 	strb.w	r2, [sp, #28]
			  xQueueOverwrite(mqttQHandle, &mqtt_config);
 80114a0:	2302      	movs	r3, #2
 80114a2:	a907      	add	r1, sp, #28
 80114a4:	4831      	ldr	r0, [pc, #196]	@ (801156c <StartSettingsTask+0x238>)
 80114a6:	6800      	ldr	r0, [r0, #0]
 80114a8:	f007 feea 	bl	8019280 <xQueueGenericSend>
 80114ac:	e022      	b.n	80114f4 <StartSettingsTask+0x1c0>
				 osDelay(1);
 80114ae:	2001      	movs	r0, #1
 80114b0:	f007 fb87 	bl	8018bc2 <osDelay>
			 while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_RESET){
 80114b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80114b8:	4833      	ldr	r0, [pc, #204]	@ (8011588 <StartSettingsTask+0x254>)
 80114ba:	f005 fbff 	bl	8016cbc <HAL_GPIO_ReadPin>
 80114be:	2800      	cmp	r0, #0
 80114c0:	d0f5      	beq.n	80114ae <StartSettingsTask+0x17a>
			 osDelay(1000);
 80114c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80114c6:	f007 fb7c 	bl	8018bc2 <osDelay>
			 mg_fs_lfs_remove(WEB_USERS_FILE);
 80114ca:	4829      	ldr	r0, [pc, #164]	@ (8011570 <StartSettingsTask+0x23c>)
 80114cc:	f009 ff90 	bl	801b3f0 <mg_fs_lfs_remove>
			 HAL_NVIC_SystemReset();
 80114d0:	f005 fa84 	bl	80169dc <HAL_NVIC_SystemReset>
 80114d4:	e000      	b.n	80114d8 <StartSettingsTask+0x1a4>
		 press_time = 0;
 80114d6:	2400      	movs	r4, #0
	  osDelay(1000);
 80114d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80114dc:	f007 fb71 	bl	8018bc2 <osDelay>
	  xQueuePeek(mqttQHandle, &mqtt_config, 0);
 80114e0:	2200      	movs	r2, #0
 80114e2:	a907      	add	r1, sp, #28
 80114e4:	4b21      	ldr	r3, [pc, #132]	@ (801156c <StartSettingsTask+0x238>)
 80114e6:	6818      	ldr	r0, [r3, #0]
 80114e8:	f008 f9dd 	bl	80198a6 <xQueuePeek>
	  if(mqtt_config.save){
 80114ec:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d1c0      	bne.n	8011476 <StartSettingsTask+0x142>
	 if(HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_RESET){ // If key pressed, more than 8 secons - reset auth file and reset mcu
 80114f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80114f8:	4823      	ldr	r0, [pc, #140]	@ (8011588 <StartSettingsTask+0x254>)
 80114fa:	f005 fbdf 	bl	8016cbc <HAL_GPIO_ReadPin>
 80114fe:	2800      	cmp	r0, #0
 8011500:	d1e9      	bne.n	80114d6 <StartSettingsTask+0x1a2>
		 press_time++;
 8011502:	3401      	adds	r4, #1
 8011504:	b2e4      	uxtb	r4, r4
		 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8011506:	4d20      	ldr	r5, [pc, #128]	@ (8011588 <StartSettingsTask+0x254>)
 8011508:	2201      	movs	r2, #1
 801150a:	2102      	movs	r1, #2
 801150c:	4628      	mov	r0, r5
 801150e:	f005 fbdc 	bl	8016cca <HAL_GPIO_WritePin>
		 osDelay(100);
 8011512:	2064      	movs	r0, #100	@ 0x64
 8011514:	f007 fb55 	bl	8018bc2 <osDelay>
		 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8011518:	2200      	movs	r2, #0
 801151a:	2102      	movs	r1, #2
 801151c:	4628      	mov	r0, r5
 801151e:	f005 fbd4 	bl	8016cca <HAL_GPIO_WritePin>
		 if (press_time == 8){
 8011522:	2c08      	cmp	r4, #8
 8011524:	d1d8      	bne.n	80114d8 <StartSettingsTask+0x1a4>
			 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8011526:	2201      	movs	r2, #1
 8011528:	2102      	movs	r1, #2
 801152a:	4628      	mov	r0, r5
 801152c:	f005 fbcd 	bl	8016cca <HAL_GPIO_WritePin>
			 while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_RESET){
 8011530:	e7c0      	b.n	80114b4 <StartSettingsTask+0x180>
 8011532:	bf00      	nop
 8011534:	08011ad5 	.word	0x08011ad5
 8011538:	08011af9 	.word	0x08011af9
 801153c:	080111b9 	.word	0x080111b9
 8011540:	080111a5 	.word	0x080111a5
 8011544:	08011b25 	.word	0x08011b25
 8011548:	08011b11 	.word	0x08011b11
 801154c:	080365f4 	.word	0x080365f4
 8011550:	080365fc 	.word	0x080365fc
 8011554:	08036608 	.word	0x08036608
 8011558:	08036618 	.word	0x08036618
 801155c:	08036624 	.word	0x08036624
 8011560:	08038184 	.word	0x08038184
 8011564:	0803662c 	.word	0x0803662c
 8011568:	08036634 	.word	0x08036634
 801156c:	200008e8 	.word	0x200008e8
 8011570:	08036648 	.word	0x08036648
 8011574:	20000910 	.word	0x20000910
 8011578:	08036684 	.word	0x08036684
 801157c:	080366bc 	.word	0x080366bc
 8011580:	080366c4 	.word	0x080366c4
 8011584:	08036658 	.word	0x08036658
 8011588:	40020400 	.word	0x40020400

0801158c <RW_parameters_from_queue>:
void RW_parameters_from_queue(void * param, sett_type_t param_type,  sett_direction_t direction){
 801158c:	b508      	push	{r3, lr}
	switch (param_type) {
 801158e:	2901      	cmp	r1, #1
 8011590:	d014      	beq.n	80115bc <RW_parameters_from_queue+0x30>
 8011592:	2902      	cmp	r1, #2
 8011594:	d01a      	beq.n	80115cc <RW_parameters_from_queue+0x40>
 8011596:	b101      	cbz	r1, 801159a <RW_parameters_from_queue+0xe>
}
 8011598:	bd08      	pop	{r3, pc}
			if (direction == S_READ){
 801159a:	b14a      	cbz	r2, 80115b0 <RW_parameters_from_queue+0x24>
			}else if (direction == S_WRITE){
 801159c:	2a01      	cmp	r2, #1
 801159e:	d1fb      	bne.n	8011598 <RW_parameters_from_queue+0xc>
				xQueueOverwrite(mqttQHandle, pr);
 80115a0:	2302      	movs	r3, #2
 80115a2:	2200      	movs	r2, #0
 80115a4:	4601      	mov	r1, r0
 80115a6:	4812      	ldr	r0, [pc, #72]	@ (80115f0 <RW_parameters_from_queue+0x64>)
 80115a8:	6800      	ldr	r0, [r0, #0]
 80115aa:	f007 fe69 	bl	8019280 <xQueueGenericSend>
 80115ae:	e7f3      	b.n	8011598 <RW_parameters_from_queue+0xc>
				xQueuePeek(mqttQHandle, pr, 0);
 80115b0:	4601      	mov	r1, r0
 80115b2:	4b0f      	ldr	r3, [pc, #60]	@ (80115f0 <RW_parameters_from_queue+0x64>)
 80115b4:	6818      	ldr	r0, [r3, #0]
 80115b6:	f008 f976 	bl	80198a6 <xQueuePeek>
 80115ba:	e7ed      	b.n	8011598 <RW_parameters_from_queue+0xc>
			if (direction == S_READ){
 80115bc:	2a00      	cmp	r2, #0
 80115be:	d1eb      	bne.n	8011598 <RW_parameters_from_queue+0xc>
				xQueuePeek(inputReadQHandle, input, 0);
 80115c0:	4601      	mov	r1, r0
 80115c2:	4b0c      	ldr	r3, [pc, #48]	@ (80115f4 <RW_parameters_from_queue+0x68>)
 80115c4:	6818      	ldr	r0, [r3, #0]
 80115c6:	f008 f96e 	bl	80198a6 <xQueuePeek>
 80115ca:	e7e5      	b.n	8011598 <RW_parameters_from_queue+0xc>
			if (direction == S_READ){
 80115cc:	b14a      	cbz	r2, 80115e2 <RW_parameters_from_queue+0x56>
			}else if(direction == S_WRITE){
 80115ce:	2a01      	cmp	r2, #1
 80115d0:	d1e2      	bne.n	8011598 <RW_parameters_from_queue+0xc>
				xQueueOverwrite(outputWriteQHandle, output);
 80115d2:	2302      	movs	r3, #2
 80115d4:	2200      	movs	r2, #0
 80115d6:	4601      	mov	r1, r0
 80115d8:	4807      	ldr	r0, [pc, #28]	@ (80115f8 <RW_parameters_from_queue+0x6c>)
 80115da:	6800      	ldr	r0, [r0, #0]
 80115dc:	f007 fe50 	bl	8019280 <xQueueGenericSend>
}
 80115e0:	e7da      	b.n	8011598 <RW_parameters_from_queue+0xc>
				xQueuePeek(outputReadQHandle, output, 0);
 80115e2:	4601      	mov	r1, r0
 80115e4:	4b05      	ldr	r3, [pc, #20]	@ (80115fc <RW_parameters_from_queue+0x70>)
 80115e6:	6818      	ldr	r0, [r3, #0]
 80115e8:	f008 f95d 	bl	80198a6 <xQueuePeek>
 80115ec:	e7d4      	b.n	8011598 <RW_parameters_from_queue+0xc>
 80115ee:	bf00      	nop
 80115f0:	200008e8 	.word	0x200008e8
 80115f4:	200008f4 	.word	0x200008f4
 80115f8:	200008ec 	.word	0x200008ec
 80115fc:	200008f0 	.word	0x200008f0

08011600 <StartDisplayTask>:
{
 8011600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011602:	b08b      	sub	sp, #44	@ 0x2c
	osDelay(1000);//
 8011604:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011608:	f007 fadb 	bl	8018bc2 <osDelay>
	SSD1306_Init (); // initialise the display
 801160c:	f007 f972 	bl	80188f4 <SSD1306_Init>
	osDelay(100);//
 8011610:	2064      	movs	r0, #100	@ 0x64
 8011612:	f007 fad6 	bl	8018bc2 <osDelay>
	SSD1306_GotoXY(x=1,y=0);
 8011616:	2100      	movs	r1, #0
 8011618:	2001      	movs	r0, #1
 801161a:	f007 f8cf 	bl	80187bc <SSD1306_GotoXY>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 801161e:	2000      	movs	r0, #0
 8011620:	f007 f890 	bl	8018744 <SSD1306_Fill>
	if (flash_not_connect_flag){
 8011624:	4ba9      	ldr	r3, [pc, #676]	@ (80118cc <StartDisplayTask+0x2cc>)
 8011626:	781c      	ldrb	r4, [r3, #0]
 8011628:	2c00      	cmp	r4, #0
 801162a:	d148      	bne.n	80116be <StartDisplayTask+0xbe>
	SSD1306_Puts("Builded: ", &Font_7x10, SSD1306_COLOR_WHITE);
 801162c:	4da8      	ldr	r5, [pc, #672]	@ (80118d0 <StartDisplayTask+0x2d0>)
 801162e:	2201      	movs	r2, #1
 8011630:	4629      	mov	r1, r5
 8011632:	48a8      	ldr	r0, [pc, #672]	@ (80118d4 <StartDisplayTask+0x2d4>)
 8011634:	f007 f916 	bl	8018864 <SSD1306_Puts>
	SSD1306_Puts(__TIME__, &Font_7x10, SSD1306_COLOR_WHITE);
 8011638:	2201      	movs	r2, #1
 801163a:	4629      	mov	r1, r5
 801163c:	48a6      	ldr	r0, [pc, #664]	@ (80118d8 <StartDisplayTask+0x2d8>)
 801163e:	f007 f911 	bl	8018864 <SSD1306_Puts>
	SSD1306_GotoXY(x=1,y=y+11);
 8011642:	f104 010b 	add.w	r1, r4, #11
 8011646:	b2c9      	uxtb	r1, r1
 8011648:	2001      	movs	r0, #1
 801164a:	f007 f8b7 	bl	80187bc <SSD1306_GotoXY>
	SSD1306_Puts(__DATE__, &Font_7x10, SSD1306_COLOR_WHITE);
 801164e:	2201      	movs	r2, #1
 8011650:	4629      	mov	r1, r5
 8011652:	48a2      	ldr	r0, [pc, #648]	@ (80118dc <StartDisplayTask+0x2dc>)
 8011654:	f007 f906 	bl	8018864 <SSD1306_Puts>
	SSD1306_GotoXY(x=1,y=y+11);
 8011658:	f104 0116 	add.w	r1, r4, #22
 801165c:	b2c9      	uxtb	r1, r1
 801165e:	2001      	movs	r0, #1
 8011660:	f007 f8ac 	bl	80187bc <SSD1306_GotoXY>
			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 8011664:	4b9e      	ldr	r3, [pc, #632]	@ (80118e0 <StartDisplayTask+0x2e0>)
 8011666:	6859      	ldr	r1, [r3, #4]
 8011668:	780a      	ldrb	r2, [r1, #0]
 801166a:	784b      	ldrb	r3, [r1, #1]
			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 801166c:	7888      	ldrb	r0, [r1, #2]
 801166e:	78ce      	ldrb	r6, [r1, #3]
			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 8011670:	790f      	ldrb	r7, [r1, #4]
 8011672:	7949      	ldrb	r1, [r1, #5]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 8011674:	9103      	str	r1, [sp, #12]
 8011676:	9702      	str	r7, [sp, #8]
 8011678:	9601      	str	r6, [sp, #4]
 801167a:	9000      	str	r0, [sp, #0]
 801167c:	4999      	ldr	r1, [pc, #612]	@ (80118e4 <StartDisplayTask+0x2e4>)
 801167e:	a805      	add	r0, sp, #20
 8011680:	f01b f92c 	bl	802c8dc <sprintf>
	SSD1306_Puts((char *)buf, &Font_7x10, SSD1306_COLOR_WHITE);
 8011684:	2201      	movs	r2, #1
 8011686:	4629      	mov	r1, r5
 8011688:	a805      	add	r0, sp, #20
 801168a:	f007 f8eb 	bl	8018864 <SSD1306_Puts>
	SSD1306_GotoXY(x=1,y=y+11);
 801168e:	f104 0121 	add.w	r1, r4, #33	@ 0x21
 8011692:	b2c9      	uxtb	r1, r1
 8011694:	2001      	movs	r0, #1
 8011696:	f007 f891 	bl	80187bc <SSD1306_GotoXY>
	sprintf((char *)buf, "%s",get_flash_chip_model());
 801169a:	f009 fec7 	bl	801b42c <get_flash_chip_model>
 801169e:	4601      	mov	r1, r0
 80116a0:	a805      	add	r0, sp, #20
 80116a2:	f01c fee7 	bl	802e474 <strcpy>
	SSD1306_Puts((char *)buf, &Font_7x10, SSD1306_COLOR_WHITE);
 80116a6:	2201      	movs	r2, #1
 80116a8:	4629      	mov	r1, r5
 80116aa:	a805      	add	r0, sp, #20
 80116ac:	f007 f8da 	bl	8018864 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80116b0:	f007 f9ca 	bl	8018a48 <SSD1306_UpdateScreen>
	osDelay(3000);
 80116b4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80116b8:	f007 fa83 	bl	8018bc2 <osDelay>
	int i=0;
 80116bc:	e0ce      	b.n	801185c <StartDisplayTask+0x25c>
		SSD1306_GotoXY(x=1,y=0);
 80116be:	2100      	movs	r1, #0
 80116c0:	2001      	movs	r0, #1
 80116c2:	f007 f87b 	bl	80187bc <SSD1306_GotoXY>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 80116c6:	2000      	movs	r0, #0
 80116c8:	f007 f83c 	bl	8018744 <SSD1306_Fill>
		SSD1306_Puts("Error. Flash mem", &Font_7x10, SSD1306_COLOR_WHITE);
 80116cc:	4c80      	ldr	r4, [pc, #512]	@ (80118d0 <StartDisplayTask+0x2d0>)
 80116ce:	2201      	movs	r2, #1
 80116d0:	4621      	mov	r1, r4
 80116d2:	4885      	ldr	r0, [pc, #532]	@ (80118e8 <StartDisplayTask+0x2e8>)
 80116d4:	f007 f8c6 	bl	8018864 <SSD1306_Puts>
		SSD1306_GotoXY(x=1,y=10);
 80116d8:	210a      	movs	r1, #10
 80116da:	2001      	movs	r0, #1
 80116dc:	f007 f86e 	bl	80187bc <SSD1306_GotoXY>
		SSD1306_Puts("chip is not", &Font_7x10, SSD1306_COLOR_WHITE);
 80116e0:	2201      	movs	r2, #1
 80116e2:	4621      	mov	r1, r4
 80116e4:	4881      	ldr	r0, [pc, #516]	@ (80118ec <StartDisplayTask+0x2ec>)
 80116e6:	f007 f8bd 	bl	8018864 <SSD1306_Puts>
		SSD1306_GotoXY(x=1,y=20);
 80116ea:	2114      	movs	r1, #20
 80116ec:	2001      	movs	r0, #1
 80116ee:	f007 f865 	bl	80187bc <SSD1306_GotoXY>
		SSD1306_Puts("connected. Reboot", &Font_7x10, SSD1306_COLOR_WHITE);
 80116f2:	2201      	movs	r2, #1
 80116f4:	4621      	mov	r1, r4
 80116f6:	487e      	ldr	r0, [pc, #504]	@ (80118f0 <StartDisplayTask+0x2f0>)
 80116f8:	f007 f8b4 	bl	8018864 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80116fc:	f007 f9a4 	bl	8018a48 <SSD1306_UpdateScreen>
		vTaskDelay(3000);
 8011700:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8011704:	f008 fdc8 	bl	801a298 <vTaskDelay>
		SSD1306_GotoXY(x=1,y=20);
 8011708:	2414      	movs	r4, #20
 801170a:	e78f      	b.n	801162c <StartDisplayTask+0x2c>
		switch (flash_status_flag) {
 801170c:	f113 0f05 	cmn.w	r3, #5
 8011710:	d108      	bne.n	8011724 <StartDisplayTask+0x124>
			SSD1306_GotoXY(x=1,y=40);
 8011712:	2128      	movs	r1, #40	@ 0x28
 8011714:	2001      	movs	r0, #1
 8011716:	f007 f851 	bl	80187bc <SSD1306_GotoXY>
			SSD1306_Puts("LFS_ERR_IO", &Font_7x10, SSD1306_COLOR_WHITE);
 801171a:	2201      	movs	r2, #1
 801171c:	496c      	ldr	r1, [pc, #432]	@ (80118d0 <StartDisplayTask+0x2d0>)
 801171e:	4875      	ldr	r0, [pc, #468]	@ (80118f4 <StartDisplayTask+0x2f4>)
 8011720:	f007 f8a0 	bl	8018864 <SSD1306_Puts>
		SSD1306_GotoXY(x=1,y=0);
 8011724:	2100      	movs	r1, #0
 8011726:	2001      	movs	r0, #1
 8011728:	f007 f848 	bl	80187bc <SSD1306_GotoXY>
		SSD1306_Puts("IP:", &Font_7x10, SSD1306_COLOR_WHITE);
 801172c:	4c68      	ldr	r4, [pc, #416]	@ (80118d0 <StartDisplayTask+0x2d0>)
 801172e:	2201      	movs	r2, #1
 8011730:	4621      	mov	r1, r4
 8011732:	4871      	ldr	r0, [pc, #452]	@ (80118f8 <StartDisplayTask+0x2f8>)
 8011734:	f007 f896 	bl	8018864 <SSD1306_Puts>
				(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011738:	4b69      	ldr	r3, [pc, #420]	@ (80118e0 <StartDisplayTask+0x2e0>)
 801173a:	685b      	ldr	r3, [r3, #4]
 801173c:	689a      	ldr	r2, [r3, #8]
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 801173e:	0e13      	lsrs	r3, r2, #24
		sprintf(buf,"%lu.%lu.%lu.%lu",
 8011740:	9301      	str	r3, [sp, #4]
 8011742:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8011746:	9300      	str	r3, [sp, #0]
 8011748:	f3c2 2307 	ubfx	r3, r2, #8, #8
 801174c:	b2d2      	uxtb	r2, r2
 801174e:	496b      	ldr	r1, [pc, #428]	@ (80118fc <StartDisplayTask+0x2fc>)
 8011750:	a805      	add	r0, sp, #20
 8011752:	f01b f8c3 	bl	802c8dc <sprintf>
		SSD1306_Puts(buf, &Font_7x10, SSD1306_COLOR_WHITE);
 8011756:	2201      	movs	r2, #1
 8011758:	4621      	mov	r1, r4
 801175a:	a805      	add	r0, sp, #20
 801175c:	f007 f882 	bl	8018864 <SSD1306_Puts>
		SSD1306_GotoXY(x,y=y+11);
 8011760:	210b      	movs	r1, #11
 8011762:	2001      	movs	r0, #1
 8011764:	f007 f82a 	bl	80187bc <SSD1306_GotoXY>
		SSD1306_Puts("Inputs:", &Font_7x10, SSD1306_COLOR_WHITE);
 8011768:	2201      	movs	r2, #1
 801176a:	4621      	mov	r1, r4
 801176c:	4864      	ldr	r0, [pc, #400]	@ (8011900 <StartDisplayTask+0x300>)
 801176e:	f007 f879 	bl	8018864 <SSD1306_Puts>
		SSD1306_GotoXY(x=x+60,y);
 8011772:	210b      	movs	r1, #11
 8011774:	203d      	movs	r0, #61	@ 0x3d
 8011776:	f007 f821 	bl	80187bc <SSD1306_GotoXY>
		for (i=0 ; i<INPUTS_COUNT ; i++){
 801177a:	2500      	movs	r5, #0
		SSD1306_GotoXY(x=x+60,y);
 801177c:	243d      	movs	r4, #61	@ 0x3d
		for (i=0 ; i<INPUTS_COUNT ; i++){
 801177e:	e01f      	b.n	80117c0 <StartDisplayTask+0x1c0>
			SSD1306_GotoXY(x=1,y=40);
 8011780:	2128      	movs	r1, #40	@ 0x28
 8011782:	2001      	movs	r0, #1
 8011784:	f007 f81a 	bl	80187bc <SSD1306_GotoXY>
			SSD1306_Puts("LFS_ERR_CORRUPT", &Font_7x10, SSD1306_COLOR_WHITE);
 8011788:	2201      	movs	r2, #1
 801178a:	4951      	ldr	r1, [pc, #324]	@ (80118d0 <StartDisplayTask+0x2d0>)
 801178c:	485d      	ldr	r0, [pc, #372]	@ (8011904 <StartDisplayTask+0x304>)
 801178e:	f007 f869 	bl	8018864 <SSD1306_Puts>
			break;
 8011792:	e7c7      	b.n	8011724 <StartDisplayTask+0x124>
			SSD1306_GotoXY(x=1,y=40);
 8011794:	2128      	movs	r1, #40	@ 0x28
 8011796:	2001      	movs	r0, #1
 8011798:	f007 f810 	bl	80187bc <SSD1306_GotoXY>
			SSD1306_Puts("LFS_ERR_NOMEM", &Font_7x10, SSD1306_COLOR_WHITE);
 801179c:	2201      	movs	r2, #1
 801179e:	494c      	ldr	r1, [pc, #304]	@ (80118d0 <StartDisplayTask+0x2d0>)
 80117a0:	4859      	ldr	r0, [pc, #356]	@ (8011908 <StartDisplayTask+0x308>)
 80117a2:	f007 f85f 	bl	8018864 <SSD1306_Puts>
			break;
 80117a6:	e7bd      	b.n	8011724 <StartDisplayTask+0x124>
				SSD1306_Puts((char *)buf, &Font_7x10, SSD1306_COLOR_WHITE);
 80117a8:	2201      	movs	r2, #1
 80117aa:	4949      	ldr	r1, [pc, #292]	@ (80118d0 <StartDisplayTask+0x2d0>)
 80117ac:	a805      	add	r0, sp, #20
 80117ae:	f007 f859 	bl	8018864 <SSD1306_Puts>
			SSD1306_GotoXY(x=x+8,y);
 80117b2:	3408      	adds	r4, #8
 80117b4:	b2e4      	uxtb	r4, r4
 80117b6:	210b      	movs	r1, #11
 80117b8:	4620      	mov	r0, r4
 80117ba:	f006 ffff 	bl	80187bc <SSD1306_GotoXY>
		for (i=0 ; i<INPUTS_COUNT ; i++){
 80117be:	4635      	mov	r5, r6
 80117c0:	2d02      	cmp	r5, #2
 80117c2:	dc0f      	bgt.n	80117e4 <StartDisplayTask+0x1e4>
			sprintf((char *)buf,"%d",i+1);
 80117c4:	1c6e      	adds	r6, r5, #1
 80117c6:	4632      	mov	r2, r6
 80117c8:	4950      	ldr	r1, [pc, #320]	@ (801190c <StartDisplayTask+0x30c>)
 80117ca:	a805      	add	r0, sp, #20
 80117cc:	f01b f886 	bl	802c8dc <sprintf>
			if ( io_status.inputs[i] ){
 80117d0:	4b4f      	ldr	r3, [pc, #316]	@ (8011910 <StartDisplayTask+0x310>)
 80117d2:	5d5b      	ldrb	r3, [r3, r5]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d0e7      	beq.n	80117a8 <StartDisplayTask+0x1a8>
				SSD1306_Puts((char *)buf, &Font_7x10, SSD1306_COLOR_BLACK);
 80117d8:	2200      	movs	r2, #0
 80117da:	493d      	ldr	r1, [pc, #244]	@ (80118d0 <StartDisplayTask+0x2d0>)
 80117dc:	a805      	add	r0, sp, #20
 80117de:	f007 f841 	bl	8018864 <SSD1306_Puts>
 80117e2:	e7e6      	b.n	80117b2 <StartDisplayTask+0x1b2>
		SSD1306_GotoXY(x=1,y=y+11);
 80117e4:	2116      	movs	r1, #22
 80117e6:	2001      	movs	r0, #1
 80117e8:	f006 ffe8 	bl	80187bc <SSD1306_GotoXY>
		SSD1306_Puts("Outputs:", &Font_7x10, SSD1306_COLOR_WHITE);
 80117ec:	2201      	movs	r2, #1
 80117ee:	4938      	ldr	r1, [pc, #224]	@ (80118d0 <StartDisplayTask+0x2d0>)
 80117f0:	4848      	ldr	r0, [pc, #288]	@ (8011914 <StartDisplayTask+0x314>)
 80117f2:	f007 f837 	bl	8018864 <SSD1306_Puts>
		SSD1306_GotoXY(x=x+60,y);
 80117f6:	2116      	movs	r1, #22
 80117f8:	203d      	movs	r0, #61	@ 0x3d
 80117fa:	f006 ffdf 	bl	80187bc <SSD1306_GotoXY>
		for (i=0 ; i<OUTPUTS_COUNT ; i++){
 80117fe:	2500      	movs	r5, #0
		SSD1306_GotoXY(x=x+60,y);
 8011800:	243d      	movs	r4, #61	@ 0x3d
		for (i=0 ; i<OUTPUTS_COUNT ; i++){
 8011802:	e00b      	b.n	801181c <StartDisplayTask+0x21c>
				SSD1306_Puts((char *)buf, &Font_7x10, SSD1306_COLOR_WHITE);
 8011804:	2201      	movs	r2, #1
 8011806:	4932      	ldr	r1, [pc, #200]	@ (80118d0 <StartDisplayTask+0x2d0>)
 8011808:	a805      	add	r0, sp, #20
 801180a:	f007 f82b 	bl	8018864 <SSD1306_Puts>
			SSD1306_GotoXY(x=x+8,y);
 801180e:	3408      	adds	r4, #8
 8011810:	b2e4      	uxtb	r4, r4
 8011812:	2116      	movs	r1, #22
 8011814:	4620      	mov	r0, r4
 8011816:	f006 ffd1 	bl	80187bc <SSD1306_GotoXY>
		for (i=0 ; i<OUTPUTS_COUNT ; i++){
 801181a:	4635      	mov	r5, r6
 801181c:	2d02      	cmp	r5, #2
 801181e:	dc10      	bgt.n	8011842 <StartDisplayTask+0x242>
			sprintf((char *)buf,"%d",i+1);
 8011820:	1c6e      	adds	r6, r5, #1
 8011822:	4632      	mov	r2, r6
 8011824:	4939      	ldr	r1, [pc, #228]	@ (801190c <StartDisplayTask+0x30c>)
 8011826:	a805      	add	r0, sp, #20
 8011828:	f01b f858 	bl	802c8dc <sprintf>
			if ( io_status.outputs[i] ){
 801182c:	4b38      	ldr	r3, [pc, #224]	@ (8011910 <StartDisplayTask+0x310>)
 801182e:	442b      	add	r3, r5
 8011830:	78db      	ldrb	r3, [r3, #3]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d0e6      	beq.n	8011804 <StartDisplayTask+0x204>
				SSD1306_Puts((char *)buf, &Font_7x10, SSD1306_COLOR_BLACK);
 8011836:	2200      	movs	r2, #0
 8011838:	4925      	ldr	r1, [pc, #148]	@ (80118d0 <StartDisplayTask+0x2d0>)
 801183a:	a805      	add	r0, sp, #20
 801183c:	f007 f812 	bl	8018864 <SSD1306_Puts>
 8011840:	e7e5      	b.n	801180e <StartDisplayTask+0x20e>
		SSD1306_UpdateScreen();
 8011842:	f007 f901 	bl	8018a48 <SSD1306_UpdateScreen>
		while(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 1000) != HAL_OK){
 8011846:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801184a:	2201      	movs	r2, #1
 801184c:	2178      	movs	r1, #120	@ 0x78
 801184e:	4832      	ldr	r0, [pc, #200]	@ (8011918 <StartDisplayTask+0x318>)
 8011850:	f005 fd90 	bl	8017374 <HAL_I2C_IsDeviceReady>
 8011854:	bb50      	cbnz	r0, 80118ac <StartDisplayTask+0x2ac>
		osDelay(200);
 8011856:	20c8      	movs	r0, #200	@ 0xc8
 8011858:	f007 f9b3 	bl	8018bc2 <osDelay>
		RW_parameters_from_queue(io_status.inputs, S_INPUTS, S_READ);
 801185c:	4c2c      	ldr	r4, [pc, #176]	@ (8011910 <StartDisplayTask+0x310>)
 801185e:	2200      	movs	r2, #0
 8011860:	2101      	movs	r1, #1
 8011862:	4620      	mov	r0, r4
 8011864:	f7ff fe92 	bl	801158c <RW_parameters_from_queue>
		RW_parameters_from_queue(io_status.outputs, S_OUTPUTS, S_READ);
 8011868:	2200      	movs	r2, #0
 801186a:	2102      	movs	r1, #2
 801186c:	1ce0      	adds	r0, r4, #3
 801186e:	f7ff fe8d 	bl	801158c <RW_parameters_from_queue>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 8011872:	2000      	movs	r0, #0
 8011874:	f006 ff66 	bl	8018744 <SSD1306_Fill>
		switch (flash_status_flag) {
 8011878:	4b28      	ldr	r3, [pc, #160]	@ (801191c <StartDisplayTask+0x31c>)
 801187a:	f993 3000 	ldrsb.w	r3, [r3]
 801187e:	f113 0f0c 	cmn.w	r3, #12
 8011882:	d087      	beq.n	8011794 <StartDisplayTask+0x194>
 8011884:	f73f af42 	bgt.w	801170c <StartDisplayTask+0x10c>
 8011888:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 801188c:	f43f af78 	beq.w	8011780 <StartDisplayTask+0x180>
 8011890:	f113 0f18 	cmn.w	r3, #24
 8011894:	f47f af46 	bne.w	8011724 <StartDisplayTask+0x124>
			SSD1306_GotoXY(x=1,y=40);
 8011898:	2128      	movs	r1, #40	@ 0x28
 801189a:	2001      	movs	r0, #1
 801189c:	f006 ff8e 	bl	80187bc <SSD1306_GotoXY>
			SSD1306_Puts("LFS_ERR_NOSPC", &Font_7x10, SSD1306_COLOR_WHITE);
 80118a0:	2201      	movs	r2, #1
 80118a2:	490b      	ldr	r1, [pc, #44]	@ (80118d0 <StartDisplayTask+0x2d0>)
 80118a4:	481e      	ldr	r0, [pc, #120]	@ (8011920 <StartDisplayTask+0x320>)
 80118a6:	f006 ffdd 	bl	8018864 <SSD1306_Puts>
			break;
 80118aa:	e73b      	b.n	8011724 <StartDisplayTask+0x124>
			HAL_I2C_DeInit(&hi2c1);
 80118ac:	481a      	ldr	r0, [pc, #104]	@ (8011918 <StartDisplayTask+0x318>)
 80118ae:	f005 fc8b 	bl	80171c8 <HAL_I2C_DeInit>
			vTaskDelay(1000);
 80118b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80118b6:	f008 fcef 	bl	801a298 <vTaskDelay>
			MX_I2C1_Init();
 80118ba:	f000 fbcd 	bl	8012058 <MX_I2C1_Init>
			vTaskDelay(1000);
 80118be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80118c2:	f008 fce9 	bl	801a298 <vTaskDelay>
			SSD1306_Init ();
 80118c6:	f007 f815 	bl	80188f4 <SSD1306_Init>
 80118ca:	e7bc      	b.n	8011846 <StartDisplayTask+0x246>
 80118cc:	20000910 	.word	0x20000910
 80118d0:	2000010c 	.word	0x2000010c
 80118d4:	08036710 	.word	0x08036710
 80118d8:	0803671c 	.word	0x0803671c
 80118dc:	08036728 	.word	0x08036728
 80118e0:	20000914 	.word	0x20000914
 80118e4:	08036734 	.word	0x08036734
 80118e8:	080366dc 	.word	0x080366dc
 80118ec:	080366f0 	.word	0x080366f0
 80118f0:	080366fc 	.word	0x080366fc
 80118f4:	08036754 	.word	0x08036754
 80118f8:	08036790 	.word	0x08036790
 80118fc:	08036794 	.word	0x08036794
 8011900:	080367a4 	.word	0x080367a4
 8011904:	08036760 	.word	0x08036760
 8011908:	08036780 	.word	0x08036780
 801190c:	0803bc9c 	.word	0x0803bc9c
 8011910:	200008d4 	.word	0x200008d4
 8011914:	080367ac 	.word	0x080367ac
 8011918:	2000091c 	.word	0x2000091c
 801191c:	20000911 	.word	0x20000911
 8011920:	08036770 	.word	0x08036770

08011924 <StartLoggingTask>:
{
 8011924:	b530      	push	{r4, r5, lr}
 8011926:	b0d1      	sub	sp, #324	@ 0x144
	reg_logging_fn(add_log_mess_to_q);
 8011928:	4848      	ldr	r0, [pc, #288]	@ (8011a4c <StartLoggingTask+0x128>)
 801192a:	f000 fc31 	bl	8012190 <reg_logging_fn>
	logger_set_level(L_INFO);
 801192e:	2001      	movs	r0, #1
 8011930:	f000 fc34 	bl	801219c <logger_set_level>
	logging(L_INFO, "Device started...");
 8011934:	4946      	ldr	r1, [pc, #280]	@ (8011a50 <StartLoggingTask+0x12c>)
 8011936:	2001      	movs	r0, #1
 8011938:	f000 fc36 	bl	80121a8 <logging>
	  while (mg_fs_mounted() == 0){
 801193c:	e003      	b.n	8011946 <StartLoggingTask+0x22>
		  osDelay(500);
 801193e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011942:	f007 f93e 	bl	8018bc2 <osDelay>
	  while (mg_fs_mounted() == 0){
 8011946:	f009 fd6b 	bl	801b420 <mg_fs_mounted>
 801194a:	2800      	cmp	r0, #0
 801194c:	d0f7      	beq.n	801193e <StartLoggingTask+0x1a>
	uint32_t count = 19400;
 801194e:	f644 34c8 	movw	r4, #19400	@ 0x4bc8
 8011952:	e056      	b.n	8011a02 <StartLoggingTask+0xde>
		  osMessageQueueGet(loggingQHandle, &log, 0, 0);
 8011954:	2300      	movs	r3, #0
 8011956:	461a      	mov	r2, r3
 8011958:	a907      	add	r1, sp, #28
 801195a:	483e      	ldr	r0, [pc, #248]	@ (8011a54 <StartLoggingTask+0x130>)
 801195c:	6800      	ldr	r0, [r0, #0]
 801195e:	f007 fa6a 	bl	8018e36 <osMessageQueueGet>
		  f_pointer = mg_fs_lfs_open(LOG_FILE_LOCATION, MG_FS_WRITE);
 8011962:	2102      	movs	r1, #2
 8011964:	483c      	ldr	r0, [pc, #240]	@ (8011a58 <StartLoggingTask+0x134>)
 8011966:	f009 fcd5 	bl	801b314 <mg_fs_lfs_open>
 801196a:	4605      	mov	r5, r0
		  flash_status_flag = mg_fs_lfs_write(f_pointer, &log.log_text, log.log_len);
 801196c:	f89d 211d 	ldrb.w	r2, [sp, #285]	@ 0x11d
 8011970:	f10d 011d 	add.w	r1, sp, #29
 8011974:	f009 fd0a 	bl	801b38c <mg_fs_lfs_write>
 8011978:	4b38      	ldr	r3, [pc, #224]	@ (8011a5c <StartLoggingTask+0x138>)
 801197a:	7018      	strb	r0, [r3, #0]
		  mg_fs_lfs_close(f_pointer);
 801197c:	4628      	mov	r0, r5
 801197e:	f009 fced 	bl	801b35c <mg_fs_lfs_close>
 8011982:	e044      	b.n	8011a0e <StartLoggingTask+0xea>
    	vPortGetHeapStats(&heap_status);
 8011984:	a848      	add	r0, sp, #288	@ 0x120
 8011986:	f009 fbdf 	bl	801b148 <vPortGetHeapStats>
    	logging(L_INFO, "Free Heap: %u, LargestFreeBlock: %u, SmallestFeeBlock: %u, NumFreeBlock: %u,  MinEverFreeBytes: %u, NumOfSuccessAlloc: %u, NumOfSuccessFree: %u ",
 801198a:	9b4e      	ldr	r3, [sp, #312]	@ 0x138
 801198c:	9304      	str	r3, [sp, #16]
 801198e:	9b4d      	ldr	r3, [sp, #308]	@ 0x134
 8011990:	9303      	str	r3, [sp, #12]
 8011992:	9b4c      	ldr	r3, [sp, #304]	@ 0x130
 8011994:	9302      	str	r3, [sp, #8]
 8011996:	9b4b      	ldr	r3, [sp, #300]	@ 0x12c
 8011998:	9301      	str	r3, [sp, #4]
 801199a:	9b4a      	ldr	r3, [sp, #296]	@ 0x128
 801199c:	9300      	str	r3, [sp, #0]
 801199e:	9b49      	ldr	r3, [sp, #292]	@ 0x124
 80119a0:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 80119a2:	492f      	ldr	r1, [pc, #188]	@ (8011a60 <StartLoggingTask+0x13c>)
 80119a4:	2001      	movs	r0, #1
 80119a6:	f000 fbff 	bl	80121a8 <logging>
    			(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 80119aa:	4c2e      	ldr	r4, [pc, #184]	@ (8011a64 <StartLoggingTask+0x140>)
 80119ac:	6863      	ldr	r3, [r4, #4]
 80119ae:	689a      	ldr	r2, [r3, #8]
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 80119b0:	0e13      	lsrs	r3, r2, #24
    	logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu",
 80119b2:	9301      	str	r3, [sp, #4]
 80119b4:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80119b8:	9300      	str	r3, [sp, #0]
 80119ba:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80119be:	b2d2      	uxtb	r2, r2
 80119c0:	4929      	ldr	r1, [pc, #164]	@ (8011a68 <StartLoggingTask+0x144>)
 80119c2:	2001      	movs	r0, #1
 80119c4:	f000 fbf0 	bl	80121a8 <logging>
			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 80119c8:	6861      	ldr	r1, [r4, #4]
 80119ca:	780a      	ldrb	r2, [r1, #0]
 80119cc:	784b      	ldrb	r3, [r1, #1]
			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 80119ce:	7888      	ldrb	r0, [r1, #2]
 80119d0:	78cc      	ldrb	r4, [r1, #3]
			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 80119d2:	790d      	ldrb	r5, [r1, #4]
 80119d4:	7949      	ldrb	r1, [r1, #5]
    	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
 80119d6:	9103      	str	r1, [sp, #12]
 80119d8:	9502      	str	r5, [sp, #8]
 80119da:	9401      	str	r4, [sp, #4]
 80119dc:	9000      	str	r0, [sp, #0]
 80119de:	4923      	ldr	r1, [pc, #140]	@ (8011a6c <StartLoggingTask+0x148>)
 80119e0:	2001      	movs	r0, #1
 80119e2:	f000 fbe1 	bl	80121a8 <logging>
    	logging(L_INFO, "Flash chip model name: %s",  get_flash_chip_model());
 80119e6:	f009 fd21 	bl	801b42c <get_flash_chip_model>
 80119ea:	4602      	mov	r2, r0
 80119ec:	4920      	ldr	r1, [pc, #128]	@ (8011a70 <StartLoggingTask+0x14c>)
 80119ee:	2001      	movs	r0, #1
 80119f0:	f000 fbda 	bl	80121a8 <logging>
    	logging(L_INFO, "Firmware version: %s", dev_sw_ver);
 80119f4:	4a1f      	ldr	r2, [pc, #124]	@ (8011a74 <StartLoggingTask+0x150>)
 80119f6:	4920      	ldr	r1, [pc, #128]	@ (8011a78 <StartLoggingTask+0x154>)
 80119f8:	2001      	movs	r0, #1
 80119fa:	f000 fbd5 	bl	80121a8 <logging>
    	count = 0;
 80119fe:	2400      	movs	r4, #0
    count ++;
 8011a00:	3401      	adds	r4, #1
	  if (osMessageQueueGetCount(loggingQHandle)){
 8011a02:	4b14      	ldr	r3, [pc, #80]	@ (8011a54 <StartLoggingTask+0x130>)
 8011a04:	6818      	ldr	r0, [r3, #0]
 8011a06:	f007 fa57 	bl	8018eb8 <osMessageQueueGetCount>
 8011a0a:	2800      	cmp	r0, #0
 8011a0c:	d1a2      	bne.n	8011954 <StartLoggingTask+0x30>
    osDelay(500);
 8011a0e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011a12:	f007 f8d6 	bl	8018bc2 <osDelay>
    if (count == 20000){
 8011a16:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8011a1a:	429c      	cmp	r4, r3
 8011a1c:	d1f0      	bne.n	8011a00 <StartLoggingTask+0xdc>
    	mg_fs_lfs_status(LOG_FILE_LOCATION, &fs_size, NULL);
 8011a1e:	2200      	movs	r2, #0
 8011a20:	a94f      	add	r1, sp, #316	@ 0x13c
 8011a22:	480d      	ldr	r0, [pc, #52]	@ (8011a58 <StartLoggingTask+0x134>)
 8011a24:	f009 fc38 	bl	801b298 <mg_fs_lfs_status>
    	if (fs_size > LOG_FILE_MAX_SIZE){
 8011a28:	9a4f      	ldr	r2, [sp, #316]	@ 0x13c
 8011a2a:	f24c 3350 	movw	r3, #50000	@ 0xc350
 8011a2e:	429a      	cmp	r2, r3
 8011a30:	d9a8      	bls.n	8011984 <StartLoggingTask+0x60>
    		mg_fs_lfs_remove(LOG_FILE_LOCATION_OLD);
 8011a32:	4c12      	ldr	r4, [pc, #72]	@ (8011a7c <StartLoggingTask+0x158>)
 8011a34:	4620      	mov	r0, r4
 8011a36:	f009 fcdb 	bl	801b3f0 <mg_fs_lfs_remove>
    		mg_fs_lfs_rename(LOG_FILE_LOCATION, LOG_FILE_LOCATION_OLD);
 8011a3a:	4621      	mov	r1, r4
 8011a3c:	4806      	ldr	r0, [pc, #24]	@ (8011a58 <StartLoggingTask+0x134>)
 8011a3e:	f009 fccb 	bl	801b3d8 <mg_fs_lfs_rename>
    		logging(L_INFO, "Log file rotated");
 8011a42:	490f      	ldr	r1, [pc, #60]	@ (8011a80 <StartLoggingTask+0x15c>)
 8011a44:	2001      	movs	r0, #1
 8011a46:	f000 fbaf 	bl	80121a8 <logging>
 8011a4a:	e79b      	b.n	8011984 <StartLoggingTask+0x60>
 8011a4c:	0801130d 	.word	0x0801130d
 8011a50:	080367b8 	.word	0x080367b8
 8011a54:	200008e4 	.word	0x200008e4
 8011a58:	080367cc 	.word	0x080367cc
 8011a5c:	20000911 	.word	0x20000911
 8011a60:	08036800 	.word	0x08036800
 8011a64:	20000914 	.word	0x20000914
 8011a68:	08036894 	.word	0x08036894
 8011a6c:	080368b0 	.word	0x080368b0
 8011a70:	080368d8 	.word	0x080368d8
 8011a74:	080368f4 	.word	0x080368f4
 8011a78:	080368f8 	.word	0x080368f8
 8011a7c:	080367dc 	.word	0x080367dc
 8011a80:	080367ec 	.word	0x080367ec

08011a84 <StartWatchDogTask>:
{
 8011a84:	b508      	push	{r3, lr}
	HAL_IWDG_Refresh(&hiwdg);
 8011a86:	4806      	ldr	r0, [pc, #24]	@ (8011aa0 <StartWatchDogTask+0x1c>)
 8011a88:	f005 fd6a 	bl	8017560 <HAL_IWDG_Refresh>
    osDelay(500);
 8011a8c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011a90:	f007 f897 	bl	8018bc2 <osDelay>
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8011a94:	2101      	movs	r1, #1
 8011a96:	4803      	ldr	r0, [pc, #12]	@ (8011aa4 <StartWatchDogTask+0x20>)
 8011a98:	f005 f91d 	bl	8016cd6 <HAL_GPIO_TogglePin>
  for(;;)
 8011a9c:	e7f3      	b.n	8011a86 <StartWatchDogTask+0x2>
 8011a9e:	bf00      	nop
 8011aa0:	20000970 	.word	0x20000970
 8011aa4:	40020400 	.word	0x40020400

08011aa8 <EthTxn>:
uint8_t EthTxn(void *spi, uint8_t data) {
 8011aa8:	b500      	push	{lr}
 8011aaa:	b087      	sub	sp, #28
 8011aac:	f88d 100f 	strb.w	r1, [sp, #15]
  HAL_SPI_TransmitReceive(&hspi2, &data, &rx_data, 1, HAL_MAX_DELAY);
 8011ab0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011ab4:	9300      	str	r3, [sp, #0]
 8011ab6:	2301      	movs	r3, #1
 8011ab8:	f10d 0217 	add.w	r2, sp, #23
 8011abc:	f10d 010f 	add.w	r1, sp, #15
 8011ac0:	4803      	ldr	r0, [pc, #12]	@ (8011ad0 <EthTxn+0x28>)
 8011ac2:	f006 fadc 	bl	801807e <HAL_SPI_TransmitReceive>
}
 8011ac6:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8011aca:	b007      	add	sp, #28
 8011acc:	f85d fb04 	ldr.w	pc, [sp], #4
 8011ad0:	20000980 	.word	0x20000980

08011ad4 <FlashSPIsendByte>:
void FlashSPIsendByte(uint8_t byte){
 8011ad4:	b500      	push	{lr}
 8011ad6:	b083      	sub	sp, #12
 8011ad8:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_SPI_Transmit(&hspi1, &byte, 1, HAL_MAX_DELAY);
 8011adc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011ae0:	2201      	movs	r2, #1
 8011ae2:	f10d 0107 	add.w	r1, sp, #7
 8011ae6:	4803      	ldr	r0, [pc, #12]	@ (8011af4 <FlashSPIsendByte+0x20>)
 8011ae8:	f006 f9e7 	bl	8017eba <HAL_SPI_Transmit>
}
 8011aec:	b003      	add	sp, #12
 8011aee:	f85d fb04 	ldr.w	pc, [sp], #4
 8011af2:	bf00      	nop
 8011af4:	200009d8 	.word	0x200009d8

08011af8 <FlashSPIrecvBuff>:
int FlashSPIrecvBuff(uint8_t * buffer, uint16_t size){
 8011af8:	b508      	push	{r3, lr}
 8011afa:	460a      	mov	r2, r1
	return HAL_SPI_Receive(&hspi1, buffer, size, HAL_MAX_DELAY);
 8011afc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011b00:	4601      	mov	r1, r0
 8011b02:	4802      	ldr	r0, [pc, #8]	@ (8011b0c <FlashSPIrecvBuff+0x14>)
 8011b04:	f006 fbe5 	bl	80182d2 <HAL_SPI_Receive>
}
 8011b08:	bd08      	pop	{r3, pc}
 8011b0a:	bf00      	nop
 8011b0c:	200009d8 	.word	0x200009d8

08011b10 <FS_Lock>:
void FS_Lock(void * param){
 8011b10:	b508      	push	{r3, lr}
	osMutexAcquire(FSMutexHandle, HAL_MAX_DELAY);
 8011b12:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8011b16:	4b02      	ldr	r3, [pc, #8]	@ (8011b20 <FS_Lock+0x10>)
 8011b18:	6818      	ldr	r0, [r3, #0]
 8011b1a:	f007 f8a9 	bl	8018c70 <osMutexAcquire>
}
 8011b1e:	bd08      	pop	{r3, pc}
 8011b20:	200008dc 	.word	0x200008dc

08011b24 <FS_Unlock>:
void FS_Unlock(void * param){
 8011b24:	b508      	push	{r3, lr}
	osMutexRelease(FSMutexHandle);
 8011b26:	4b02      	ldr	r3, [pc, #8]	@ (8011b30 <FS_Unlock+0xc>)
 8011b28:	6818      	ldr	r0, [r3, #0]
 8011b2a:	f007 f8d0 	bl	8018cce <osMutexRelease>
}
 8011b2e:	bd08      	pop	{r3, pc}
 8011b30:	200008dc 	.word	0x200008dc

08011b34 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8011b34:	b508      	push	{r3, lr}
  SPI2MutexHandle = osMutexNew(&SPI2Mutex_attributes);
 8011b36:	482c      	ldr	r0, [pc, #176]	@ (8011be8 <MX_FREERTOS_Init+0xb4>)
 8011b38:	f007 f851 	bl	8018bde <osMutexNew>
 8011b3c:	4b2b      	ldr	r3, [pc, #172]	@ (8011bec <MX_FREERTOS_Init+0xb8>)
 8011b3e:	6018      	str	r0, [r3, #0]
  FSMutexHandle = osMutexNew(&FSMutex_attributes);
 8011b40:	482b      	ldr	r0, [pc, #172]	@ (8011bf0 <MX_FREERTOS_Init+0xbc>)
 8011b42:	f007 f84c 	bl	8018bde <osMutexNew>
 8011b46:	4b2b      	ldr	r3, [pc, #172]	@ (8011bf4 <MX_FREERTOS_Init+0xc0>)
 8011b48:	6018      	str	r0, [r3, #0]
  inputReadQHandle = osMessageQueueNew (1, sizeof(inputs_state_t), &inputReadQ_attributes);
 8011b4a:	4a2b      	ldr	r2, [pc, #172]	@ (8011bf8 <MX_FREERTOS_Init+0xc4>)
 8011b4c:	2103      	movs	r1, #3
 8011b4e:	2001      	movs	r0, #1
 8011b50:	f007 f8e4 	bl	8018d1c <osMessageQueueNew>
 8011b54:	4b29      	ldr	r3, [pc, #164]	@ (8011bfc <MX_FREERTOS_Init+0xc8>)
 8011b56:	6018      	str	r0, [r3, #0]
  outputReadQHandle = osMessageQueueNew (1, sizeof(outputs_state_t), &outputReadQ_attributes);
 8011b58:	4a29      	ldr	r2, [pc, #164]	@ (8011c00 <MX_FREERTOS_Init+0xcc>)
 8011b5a:	2103      	movs	r1, #3
 8011b5c:	2001      	movs	r0, #1
 8011b5e:	f007 f8dd 	bl	8018d1c <osMessageQueueNew>
 8011b62:	4b28      	ldr	r3, [pc, #160]	@ (8011c04 <MX_FREERTOS_Init+0xd0>)
 8011b64:	6018      	str	r0, [r3, #0]
  outputWriteQHandle = osMessageQueueNew (1, sizeof(outputs_state_t), &outputWriteQ_attributes);
 8011b66:	4a28      	ldr	r2, [pc, #160]	@ (8011c08 <MX_FREERTOS_Init+0xd4>)
 8011b68:	2103      	movs	r1, #3
 8011b6a:	2001      	movs	r0, #1
 8011b6c:	f007 f8d6 	bl	8018d1c <osMessageQueueNew>
 8011b70:	4b26      	ldr	r3, [pc, #152]	@ (8011c0c <MX_FREERTOS_Init+0xd8>)
 8011b72:	6018      	str	r0, [r3, #0]
  mqttQHandle = osMessageQueueNew (1, sizeof(MQTT_cred_struct), &mqttQ_attributes);
 8011b74:	4a26      	ldr	r2, [pc, #152]	@ (8011c10 <MX_FREERTOS_Init+0xdc>)
 8011b76:	21c6      	movs	r1, #198	@ 0xc6
 8011b78:	2001      	movs	r0, #1
 8011b7a:	f007 f8cf 	bl	8018d1c <osMessageQueueNew>
 8011b7e:	4b25      	ldr	r3, [pc, #148]	@ (8011c14 <MX_FREERTOS_Init+0xe0>)
 8011b80:	6018      	str	r0, [r3, #0]
  loggingQHandle = osMessageQueueNew (15, sizeof(log_message_t), &loggingQ_attributes);
 8011b82:	4a25      	ldr	r2, [pc, #148]	@ (8011c18 <MX_FREERTOS_Init+0xe4>)
 8011b84:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8011b88:	200f      	movs	r0, #15
 8011b8a:	f007 f8c7 	bl	8018d1c <osMessageQueueNew>
 8011b8e:	4b23      	ldr	r3, [pc, #140]	@ (8011c1c <MX_FREERTOS_Init+0xe8>)
 8011b90:	6018      	str	r0, [r3, #0]
  ethTaskHandle = osThreadNew(StartEthTask, NULL, &ethTask_attributes);
 8011b92:	4a23      	ldr	r2, [pc, #140]	@ (8011c20 <MX_FREERTOS_Init+0xec>)
 8011b94:	2100      	movs	r1, #0
 8011b96:	4823      	ldr	r0, [pc, #140]	@ (8011c24 <MX_FREERTOS_Init+0xf0>)
 8011b98:	f006 ffb4 	bl	8018b04 <osThreadNew>
 8011b9c:	4b22      	ldr	r3, [pc, #136]	@ (8011c28 <MX_FREERTOS_Init+0xf4>)
 8011b9e:	6018      	str	r0, [r3, #0]
  IOTaskHandle = osThreadNew(StartIOTask, NULL, &IOTask_attributes);
 8011ba0:	4a22      	ldr	r2, [pc, #136]	@ (8011c2c <MX_FREERTOS_Init+0xf8>)
 8011ba2:	2100      	movs	r1, #0
 8011ba4:	4822      	ldr	r0, [pc, #136]	@ (8011c30 <MX_FREERTOS_Init+0xfc>)
 8011ba6:	f006 ffad 	bl	8018b04 <osThreadNew>
 8011baa:	4b22      	ldr	r3, [pc, #136]	@ (8011c34 <MX_FREERTOS_Init+0x100>)
 8011bac:	6018      	str	r0, [r3, #0]
  displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
 8011bae:	4a22      	ldr	r2, [pc, #136]	@ (8011c38 <MX_FREERTOS_Init+0x104>)
 8011bb0:	2100      	movs	r1, #0
 8011bb2:	4822      	ldr	r0, [pc, #136]	@ (8011c3c <MX_FREERTOS_Init+0x108>)
 8011bb4:	f006 ffa6 	bl	8018b04 <osThreadNew>
 8011bb8:	4b21      	ldr	r3, [pc, #132]	@ (8011c40 <MX_FREERTOS_Init+0x10c>)
 8011bba:	6018      	str	r0, [r3, #0]
  settingsTaskHandle = osThreadNew(StartSettingsTask, NULL, &settingsTask_attributes);
 8011bbc:	4a21      	ldr	r2, [pc, #132]	@ (8011c44 <MX_FREERTOS_Init+0x110>)
 8011bbe:	2100      	movs	r1, #0
 8011bc0:	4821      	ldr	r0, [pc, #132]	@ (8011c48 <MX_FREERTOS_Init+0x114>)
 8011bc2:	f006 ff9f 	bl	8018b04 <osThreadNew>
 8011bc6:	4b21      	ldr	r3, [pc, #132]	@ (8011c4c <MX_FREERTOS_Init+0x118>)
 8011bc8:	6018      	str	r0, [r3, #0]
  loggingTaskHandle = osThreadNew(StartLoggingTask, NULL, &loggingTask_attributes);
 8011bca:	4a21      	ldr	r2, [pc, #132]	@ (8011c50 <MX_FREERTOS_Init+0x11c>)
 8011bcc:	2100      	movs	r1, #0
 8011bce:	4821      	ldr	r0, [pc, #132]	@ (8011c54 <MX_FREERTOS_Init+0x120>)
 8011bd0:	f006 ff98 	bl	8018b04 <osThreadNew>
 8011bd4:	4b20      	ldr	r3, [pc, #128]	@ (8011c58 <MX_FREERTOS_Init+0x124>)
 8011bd6:	6018      	str	r0, [r3, #0]
  WatchDogHandle = osThreadNew(StartWatchDogTask, NULL, &WatchDog_attributes);
 8011bd8:	4a20      	ldr	r2, [pc, #128]	@ (8011c5c <MX_FREERTOS_Init+0x128>)
 8011bda:	2100      	movs	r1, #0
 8011bdc:	4820      	ldr	r0, [pc, #128]	@ (8011c60 <MX_FREERTOS_Init+0x12c>)
 8011bde:	f006 ff91 	bl	8018b04 <osThreadNew>
 8011be2:	4b20      	ldr	r3, [pc, #128]	@ (8011c64 <MX_FREERTOS_Init+0x130>)
 8011be4:	6018      	str	r0, [r3, #0]
}
 8011be6:	bd08      	pop	{r3, pc}
 8011be8:	080369f8 	.word	0x080369f8
 8011bec:	200008e0 	.word	0x200008e0
 8011bf0:	080369e8 	.word	0x080369e8
 8011bf4:	200008dc 	.word	0x200008dc
 8011bf8:	08036a68 	.word	0x08036a68
 8011bfc:	200008f4 	.word	0x200008f4
 8011c00:	08036a50 	.word	0x08036a50
 8011c04:	200008f0 	.word	0x200008f0
 8011c08:	08036a38 	.word	0x08036a38
 8011c0c:	200008ec 	.word	0x200008ec
 8011c10:	08036a20 	.word	0x08036a20
 8011c14:	200008e8 	.word	0x200008e8
 8011c18:	08036a08 	.word	0x08036a08
 8011c1c:	200008e4 	.word	0x200008e4
 8011c20:	08036b34 	.word	0x08036b34
 8011c24:	08011c91 	.word	0x08011c91
 8011c28:	2000090c 	.word	0x2000090c
 8011c2c:	08036b10 	.word	0x08036b10
 8011c30:	080111cd 	.word	0x080111cd
 8011c34:	20000908 	.word	0x20000908
 8011c38:	08036aec 	.word	0x08036aec
 8011c3c:	08011601 	.word	0x08011601
 8011c40:	20000904 	.word	0x20000904
 8011c44:	08036ac8 	.word	0x08036ac8
 8011c48:	08011335 	.word	0x08011335
 8011c4c:	20000900 	.word	0x20000900
 8011c50:	08036aa4 	.word	0x08036aa4
 8011c54:	08011925 	.word	0x08011925
 8011c58:	200008fc 	.word	0x200008fc
 8011c5c:	08036a80 	.word	0x08036a80
 8011c60:	08011a85 	.word	0x08011a85
 8011c64:	200008f8 	.word	0x200008f8

08011c68 <EthResetBegin>:
void EthResetBegin(void){
 8011c68:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_RESET);
 8011c6a:	2200      	movs	r2, #0
 8011c6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011c70:	4801      	ldr	r0, [pc, #4]	@ (8011c78 <EthResetBegin+0x10>)
 8011c72:	f005 f82a 	bl	8016cca <HAL_GPIO_WritePin>
}
 8011c76:	bd08      	pop	{r3, pc}
 8011c78:	40020000 	.word	0x40020000

08011c7c <EthResetEnd>:
void EthResetEnd(void){
 8011c7c:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_SET);
 8011c7e:	2201      	movs	r2, #1
 8011c80:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011c84:	4801      	ldr	r0, [pc, #4]	@ (8011c8c <EthResetEnd+0x10>)
 8011c86:	f005 f820 	bl	8016cca <HAL_GPIO_WritePin>
}
 8011c8a:	bd08      	pop	{r3, pc}
 8011c8c:	40020000 	.word	0x40020000

08011c90 <StartEthTask>:
{
 8011c90:	b530      	push	{r4, r5, lr}
 8011c92:	b0eb      	sub	sp, #428	@ 0x1ac
  struct               mg_tcpip_spi spi = {
 8011c94:	ad22      	add	r5, sp, #136	@ 0x88
 8011c96:	4b64      	ldr	r3, [pc, #400]	@ (8011e28 <StartEthTask+0x198>)
 8011c98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011c9a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  struct              mg_tcpip_if   mif = {
 8011c9e:	ac02      	add	r4, sp, #8
 8011ca0:	2280      	movs	r2, #128	@ 0x80
 8011ca2:	2100      	movs	r1, #0
 8011ca4:	4620      	mov	r0, r4
 8011ca6:	f01b f9db 	bl	802d060 <memset>
 8011caa:	2340      	movs	r3, #64	@ 0x40
 8011cac:	f88d 3008 	strb.w	r3, [sp, #8]
 8011cb0:	2322      	movs	r3, #34	@ 0x22
 8011cb2:	f88d 3009 	strb.w	r3, [sp, #9]
													  *(uint8_t*)(UID_BASE),
 8011cb6:	4b5d      	ldr	r3, [pc, #372]	@ (8011e2c <StartEthTask+0x19c>)
 8011cb8:	7c1a      	ldrb	r2, [r3, #16]
  struct              mg_tcpip_if   mif = {
 8011cba:	f88d 200a 	strb.w	r2, [sp, #10]
													  *(uint8_t*)(UID_BASE + 0x02),
 8011cbe:	7c9a      	ldrb	r2, [r3, #18]
  struct              mg_tcpip_if   mif = {
 8011cc0:	f88d 200b 	strb.w	r2, [sp, #11]
													  *(uint8_t*)(UID_BASE + 0x04),
 8011cc4:	7d1a      	ldrb	r2, [r3, #20]
  struct              mg_tcpip_if   mif = {
 8011cc6:	f88d 200c 	strb.w	r2, [sp, #12]
													  *(uint8_t*)(UID_BASE + 0x08)
 8011cca:	7e1b      	ldrb	r3, [r3, #24]
  struct              mg_tcpip_if   mif = {
 8011ccc:	f88d 300d 	strb.w	r3, [sp, #13]
 8011cd0:	2301      	movs	r3, #1
 8011cd2:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
 8011cd6:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8011cda:	4b55      	ldr	r3, [pc, #340]	@ (8011e30 <StartEthTask+0x1a0>)
 8011cdc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011cde:	950c      	str	r5, [sp, #48]	@ 0x30
  mg_full_info.mgr =  &mgr;
 8011ce0:	4b54      	ldr	r3, [pc, #336]	@ (8011e34 <StartEthTask+0x1a4>)
 8011ce2:	aa58      	add	r2, sp, #352	@ 0x160
 8011ce4:	601a      	str	r2, [r3, #0]
  mg_full_info.mgr_if =  &mif;
 8011ce6:	605c      	str	r4, [r3, #4]
  while (mg_fs_mounted() == 0){
 8011ce8:	e003      	b.n	8011cf2 <StartEthTask+0x62>
	  osDelay(500);
 8011cea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011cee:	f006 ff68 	bl	8018bc2 <osDelay>
  while (mg_fs_mounted() == 0){
 8011cf2:	f009 fb95 	bl	801b420 <mg_fs_mounted>
 8011cf6:	2800      	cmp	r0, #0
 8011cf8:	d0f7      	beq.n	8011cea <StartEthTask+0x5a>
  mg_mgr_init(&mgr);        // Mongoose event manager
 8011cfa:	a858      	add	r0, sp, #352	@ 0x160
 8011cfc:	f011 ffa2 	bl	8023c44 <mg_mgr_init>
  mg_log_set(MG_LL_DEBUG);  // Set log level
 8011d00:	4b4d      	ldr	r3, [pc, #308]	@ (8011e38 <StartEthTask+0x1a8>)
 8011d02:	2203      	movs	r2, #3
 8011d04:	601a      	str	r2, [r3, #0]
  web_handler = dash_hdl(); // Get dashboard handler
 8011d06:	f002 ff71 	bl	8014bec <dash_hdl>
 8011d0a:	4604      	mov	r4, r0
  while(mif.mtu == 0){
 8011d0c:	e00f      	b.n	8011d2e <StartEthTask+0x9e>
	  EthResetBegin();
 8011d0e:	f7ff ffab 	bl	8011c68 <EthResetBegin>
	  osDelay(500);
 8011d12:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011d16:	f006 ff54 	bl	8018bc2 <osDelay>
	  EthResetEnd();
 8011d1a:	f7ff ffaf 	bl	8011c7c <EthResetEnd>
	  osDelay(2000);
 8011d1e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8011d22:	f006 ff4e 	bl	8018bc2 <osDelay>
	  mg_tcpip_init(&mgr, &mif);  // Initialize TCP/IP stack
 8011d26:	a902      	add	r1, sp, #8
 8011d28:	a858      	add	r0, sp, #352	@ 0x160
 8011d2a:	f017 fbbb 	bl	80294a4 <mg_tcpip_init>
  while(mif.mtu == 0){
 8011d2e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d0eb      	beq.n	8011d0e <StartEthTask+0x7e>
  set_device_id(mif.mac, sizeof(mif.mac));
 8011d36:	2106      	movs	r1, #6
 8011d38:	a802      	add	r0, sp, #8
 8011d3a:	f003 fbc1 	bl	80154c0 <set_device_id>
  reg_parameter_handler(RW_parameters_from_queue);
 8011d3e:	483f      	ldr	r0, [pc, #252]	@ (8011e3c <StartEthTask+0x1ac>)
 8011d40:	f002 ff62 	bl	8014c08 <reg_parameter_handler>
  mg_http_listen(&mgr, "http://0.0.0.0:80", web_handler, &mg_full_info);
 8011d44:	4b3b      	ldr	r3, [pc, #236]	@ (8011e34 <StartEthTask+0x1a4>)
 8011d46:	4622      	mov	r2, r4
 8011d48:	493d      	ldr	r1, [pc, #244]	@ (8011e40 <StartEthTask+0x1b0>)
 8011d4a:	a858      	add	r0, sp, #352	@ 0x160
 8011d4c:	f015 fdd8 	bl	8027900 <mg_http_listen>
  while (mif.state != MG_TCPIP_STATE_READY) {
 8011d50:	e006      	b.n	8011d60 <StartEthTask+0xd0>
    mg_mgr_poll(&mgr, 1);
 8011d52:	2101      	movs	r1, #1
 8011d54:	a858      	add	r0, sp, #352	@ 0x160
 8011d56:	f018 f93f 	bl	8029fd8 <mg_mgr_poll>
    osDelay(1);
 8011d5a:	2001      	movs	r0, #1
 8011d5c:	f006 ff31 	bl	8018bc2 <osDelay>
  while (mif.state != MG_TCPIP_STATE_READY) {
 8011d60:	f89d 3084 	ldrb.w	r3, [sp, #132]	@ 0x84
 8011d64:	2b03      	cmp	r3, #3
 8011d66:	d1f4      	bne.n	8011d52 <StartEthTask+0xc2>
  logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011d68:	4b32      	ldr	r3, [pc, #200]	@ (8011e34 <StartEthTask+0x1a4>)
 8011d6a:	685b      	ldr	r3, [r3, #4]
 8011d6c:	689a      	ldr	r2, [r3, #8]
			(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 8011d6e:	0e13      	lsrs	r3, r2, #24
  logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011d70:	9301      	str	r3, [sp, #4]
 8011d72:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8011d76:	9300      	str	r3, [sp, #0]
 8011d78:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8011d7c:	b2d2      	uxtb	r2, r2
 8011d7e:	4931      	ldr	r1, [pc, #196]	@ (8011e44 <StartEthTask+0x1b4>)
 8011d80:	2001      	movs	r0, #1
 8011d82:	f000 fa11 	bl	80121a8 <logging>
  RW_parameters_from_queue(&mqtt_conf, S_MQTT, S_READ);
 8011d86:	2200      	movs	r2, #0
 8011d88:	4611      	mov	r1, r2
 8011d8a:	a826      	add	r0, sp, #152	@ 0x98
 8011d8c:	f7ff fbfe 	bl	801158c <RW_parameters_from_queue>
  if (mqtt_conf.enable){
 8011d90:	f89d 3099 	ldrb.w	r3, [sp, #153]	@ 0x99
 8011d94:	b1eb      	cbz	r3, 8011dd2 <StartEthTask+0x142>
	  logging(L_INFO, "MQTT function enabled.");
 8011d96:	492c      	ldr	r1, [pc, #176]	@ (8011e48 <StartEthTask+0x1b8>)
 8011d98:	2001      	movs	r0, #1
 8011d9a:	f000 fa05 	bl	80121a8 <logging>
	  mqtt_init(&mgr, &mif, mqtt_conf.uri, mqtt_conf.login, mqtt_conf.pass, RW_parameters_from_queue);
 8011d9e:	4b27      	ldr	r3, [pc, #156]	@ (8011e3c <StartEthTask+0x1ac>)
 8011da0:	9301      	str	r3, [sp, #4]
 8011da2:	f20d 133d 	addw	r3, sp, #317	@ 0x13d
 8011da6:	9300      	str	r3, [sp, #0]
 8011da8:	ab47      	add	r3, sp, #284	@ 0x11c
 8011daa:	f10d 029a 	add.w	r2, sp, #154	@ 0x9a
 8011dae:	a902      	add	r1, sp, #8
 8011db0:	a858      	add	r0, sp, #352	@ 0x160
 8011db2:	f003 fac3 	bl	801533c <mqtt_init>
  start_sntp(&mgr);
 8011db6:	a858      	add	r0, sp, #352	@ 0x160
 8011db8:	f003 ff58 	bl	8015c6c <start_sntp>
  ssdp_start_server(&mgr, &mif);
 8011dbc:	a902      	add	r1, sp, #8
 8011dbe:	a858      	add	r0, sp, #352	@ 0x160
 8011dc0:	f004 f920 	bl	8016004 <ssdp_start_server>
  init_mb_tcp(&mgr);
 8011dc4:	a858      	add	r0, sp, #352	@ 0x160
 8011dc6:	f001 f855 	bl	8012e74 <init_mb_tcp>
  TickType_t last_tick = xTaskGetTickCount(); // начальное значение тиков
 8011dca:	f008 f957 	bl	801a07c <xTaskGetTickCount>
 8011dce:	4605      	mov	r5, r0
 8011dd0:	e008      	b.n	8011de4 <StartEthTask+0x154>
	  logging(L_INFO, "MQTT function disabled");
 8011dd2:	491e      	ldr	r1, [pc, #120]	@ (8011e4c <StartEthTask+0x1bc>)
 8011dd4:	2001      	movs	r0, #1
 8011dd6:	f000 f9e7 	bl	80121a8 <logging>
 8011dda:	e7ec      	b.n	8011db6 <StartEthTask+0x126>
      osDelay(1);
 8011ddc:	2001      	movs	r0, #1
 8011dde:	f006 fef0 	bl	8018bc2 <osDelay>
	  last_tick = current_tick; // обновляем значение тиков
 8011de2:	4625      	mov	r5, r4
	  TickType_t current_tick = xTaskGetTickCount();
 8011de4:	f008 f94a 	bl	801a07c <xTaskGetTickCount>
 8011de8:	4604      	mov	r4, r0
	  mg_mgr_poll(&mgr, elapsed_ms); // передаем фактическое время в миллисекундах
 8011dea:	1b41      	subs	r1, r0, r5
 8011dec:	a858      	add	r0, sp, #352	@ 0x160
 8011dee:	f018 f8f3 	bl	8029fd8 <mg_mgr_poll>
      while (mif.driver->up(&mif) == false){
 8011df2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011df4:	68db      	ldr	r3, [r3, #12]
 8011df6:	a802      	add	r0, sp, #8
 8011df8:	4798      	blx	r3
 8011dfa:	2800      	cmp	r0, #0
 8011dfc:	d1ee      	bne.n	8011ddc <StartEthTask+0x14c>
    	  EthResetBegin(); //enable reset state w5500
 8011dfe:	f7ff ff33 	bl	8011c68 <EthResetBegin>
    	  osDelay(100);
 8011e02:	2064      	movs	r0, #100	@ 0x64
 8011e04:	f006 fedd 	bl	8018bc2 <osDelay>
    	  EthResetEnd(); //disable reset state w5500
 8011e08:	f7ff ff38 	bl	8011c7c <EthResetEnd>
    	  osDelay(3000);
 8011e0c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8011e10:	f006 fed7 	bl	8018bc2 <osDelay>
    	  mif.driver->init(&mif);
 8011e14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	a802      	add	r0, sp, #8
 8011e1a:	4798      	blx	r3
    	  osDelay(7000);
 8011e1c:	f641 3058 	movw	r0, #7000	@ 0x1b58
 8011e20:	f006 fecf 	bl	8018bc2 <osDelay>
 8011e24:	e7e5      	b.n	8011df2 <StartEthTask+0x162>
 8011e26:	bf00      	nop
 8011e28:	08036394 	.word	0x08036394
 8011e2c:	1fff7a00 	.word	0x1fff7a00
 8011e30:	20000118 	.word	0x20000118
 8011e34:	20000914 	.word	0x20000914
 8011e38:	2000012c 	.word	0x2000012c
 8011e3c:	0801158d 	.word	0x0801158d
 8011e40:	08036910 	.word	0x08036910
 8011e44:	08036894 	.word	0x08036894
 8011e48:	08036924 	.word	0x08036924
 8011e4c:	0803693c 	.word	0x0803693c

08011e50 <eMBRegDiscreteCB>:
eMBErrorCode eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete){

	eMBErrorCode eStatus = MB_ENOERR;

	//usAddress --; /* to c-style address */
	if (((int16_t) usAddress >= INPUTS_FIRST_INDEX) && (usAddress + usNDiscrete <= INPUTS_FIRST_INDEX + INPUTS_COUNT)){
 8011e50:	b20b      	sxth	r3, r1
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	dd20      	ble.n	8011e98 <eMBRegDiscreteCB+0x48>
eMBErrorCode eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete){
 8011e56:	b570      	push	{r4, r5, r6, lr}
 8011e58:	b082      	sub	sp, #8
 8011e5a:	4606      	mov	r6, r0
 8011e5c:	4615      	mov	r5, r2
	if (((int16_t) usAddress >= INPUTS_FIRST_INDEX) && (usAddress + usNDiscrete <= INPUTS_FIRST_INDEX + INPUTS_COUNT)){
 8011e5e:	188b      	adds	r3, r1, r2
 8011e60:	2b04      	cmp	r3, #4
 8011e62:	dd02      	ble.n	8011e6a <eMBRegDiscreteCB+0x1a>

		for(int i = usAddress; i < usNDiscrete; i++){
			xMBUtilSetBits( pucRegBuffer, i, 1, input[i] );
		}
	}else{
		eStatus = MB_ENOREG;
 8011e64:	2001      	movs	r0, #1
	}
	return eStatus;
}
 8011e66:	b002      	add	sp, #8
 8011e68:	bd70      	pop	{r4, r5, r6, pc}
		usAddress --; /* to c-style address */
 8011e6a:	1e4c      	subs	r4, r1, #1
 8011e6c:	b2a4      	uxth	r4, r4
		RW_parameters_from_queue(input, S_INPUTS, S_READ);
 8011e6e:	2200      	movs	r2, #0
 8011e70:	2101      	movs	r1, #1
 8011e72:	a801      	add	r0, sp, #4
 8011e74:	f7ff fb8a 	bl	801158c <RW_parameters_from_queue>
		for(int i = usAddress; i < usNDiscrete; i++){
 8011e78:	e00a      	b.n	8011e90 <eMBRegDiscreteCB+0x40>
			xMBUtilSetBits( pucRegBuffer, i, 1, input[i] );
 8011e7a:	f104 0308 	add.w	r3, r4, #8
 8011e7e:	446b      	add	r3, sp
 8011e80:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8011e84:	2201      	movs	r2, #1
 8011e86:	b2a1      	uxth	r1, r4
 8011e88:	4630      	mov	r0, r6
 8011e8a:	f000 fe49 	bl	8012b20 <xMBUtilSetBits>
		for(int i = usAddress; i < usNDiscrete; i++){
 8011e8e:	3401      	adds	r4, #1
 8011e90:	42a5      	cmp	r5, r4
 8011e92:	dcf2      	bgt.n	8011e7a <eMBRegDiscreteCB+0x2a>
	eMBErrorCode eStatus = MB_ENOERR;
 8011e94:	2000      	movs	r0, #0
	if (((int16_t) usAddress >= INPUTS_FIRST_INDEX) && (usAddress + usNDiscrete <= INPUTS_FIRST_INDEX + INPUTS_COUNT)){
 8011e96:	e7e6      	b.n	8011e66 <eMBRegDiscreteCB+0x16>
		eStatus = MB_ENOREG;
 8011e98:	2001      	movs	r0, #1
}
 8011e9a:	4770      	bx	lr

08011e9c <eMBRegCoilsCB>:

eMBErrorCode eMBRegCoilsCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNCoils, eMBRegisterMode eMode)
{
 8011e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e9e:	b083      	sub	sp, #12
 8011ea0:	4616      	mov	r6, r2
	eMBErrorCode eStatus = MB_ENOERR;

	if (((int16_t) usAddress >= OUTPUTS_FIRST_INDEX) && (usAddress + usNCoils <= OUTPUTS_FIRST_INDEX + OUTPUTS_COUNT)){
 8011ea2:	b20a      	sxth	r2, r1
 8011ea4:	2a00      	cmp	r2, #0
 8011ea6:	dd43      	ble.n	8011f30 <eMBRegCoilsCB+0x94>
 8011ea8:	4605      	mov	r5, r0
 8011eaa:	461f      	mov	r7, r3
 8011eac:	198b      	adds	r3, r1, r6
 8011eae:	2b04      	cmp	r3, #4
 8011eb0:	dc41      	bgt.n	8011f36 <eMBRegCoilsCB+0x9a>
		outputs_state_t outputs;

		switch (eMode) {
 8011eb2:	b327      	cbz	r7, 8011efe <eMBRegCoilsCB+0x62>
 8011eb4:	2f01      	cmp	r7, #1
 8011eb6:	d139      	bne.n	8011f2c <eMBRegCoilsCB+0x90>

			case MB_REG_WRITE:
				usAddress --; /* to c-style address */
 8011eb8:	3901      	subs	r1, #1
 8011eba:	b28c      	uxth	r4, r1
				RW_parameters_from_queue(outputs, S_OUTPUTS, S_READ);
 8011ebc:	2200      	movs	r2, #0
 8011ebe:	2102      	movs	r1, #2
 8011ec0:	a801      	add	r0, sp, #4
 8011ec2:	f7ff fb63 	bl	801158c <RW_parameters_from_queue>
				for(int i = usAddress; i < usNCoils + usAddress; i++){
 8011ec6:	4627      	mov	r7, r4
 8011ec8:	e00f      	b.n	8011eea <eMBRegCoilsCB+0x4e>
					UCHAR wbit = xMBUtilGetBits(pucRegBuffer, i, 1 );
 8011eca:	2201      	movs	r2, #1
 8011ecc:	b2b9      	uxth	r1, r7
 8011ece:	4628      	mov	r0, r5
 8011ed0:	f000 fe5a 	bl	8012b88 <xMBUtilGetBits>
					outputs[i] = xMBUtilGetBits(pucRegBuffer, 0, 1 );
 8011ed4:	2201      	movs	r2, #1
 8011ed6:	2100      	movs	r1, #0
 8011ed8:	4628      	mov	r0, r5
 8011eda:	f000 fe55 	bl	8012b88 <xMBUtilGetBits>
 8011ede:	f107 0308 	add.w	r3, r7, #8
 8011ee2:	446b      	add	r3, sp
 8011ee4:	f803 0c04 	strb.w	r0, [r3, #-4]
				for(int i = usAddress; i < usNCoils + usAddress; i++){
 8011ee8:	3701      	adds	r7, #1
 8011eea:	1933      	adds	r3, r6, r4
 8011eec:	42bb      	cmp	r3, r7
 8011eee:	dcec      	bgt.n	8011eca <eMBRegCoilsCB+0x2e>
					//xMBUtilSetBits( pucRegBuffer, i, 1, outputs[i] );
				}
				RW_parameters_from_queue(outputs, S_OUTPUTS, S_WRITE);
 8011ef0:	2201      	movs	r2, #1
 8011ef2:	2102      	movs	r1, #2
 8011ef4:	a801      	add	r0, sp, #4
 8011ef6:	f7ff fb49 	bl	801158c <RW_parameters_from_queue>
				return MB_ENOERR;
 8011efa:	2000      	movs	r0, #0
 8011efc:	e019      	b.n	8011f32 <eMBRegCoilsCB+0x96>
				break;
			case MB_REG_READ:
				usAddress --; /* to c-style address */
 8011efe:	1e4c      	subs	r4, r1, #1
 8011f00:	b2a4      	uxth	r4, r4
				RW_parameters_from_queue(outputs, S_OUTPUTS, S_READ);
 8011f02:	2200      	movs	r2, #0
 8011f04:	2102      	movs	r1, #2
 8011f06:	a801      	add	r0, sp, #4
 8011f08:	f7ff fb40 	bl	801158c <RW_parameters_from_queue>
				for(int i = usAddress; i < usNCoils; i++){
 8011f0c:	e00a      	b.n	8011f24 <eMBRegCoilsCB+0x88>
					xMBUtilSetBits( pucRegBuffer, i, 1, outputs[i] );
 8011f0e:	f104 0308 	add.w	r3, r4, #8
 8011f12:	446b      	add	r3, sp
 8011f14:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8011f18:	2201      	movs	r2, #1
 8011f1a:	b2a1      	uxth	r1, r4
 8011f1c:	4628      	mov	r0, r5
 8011f1e:	f000 fdff 	bl	8012b20 <xMBUtilSetBits>
				for(int i = usAddress; i < usNCoils; i++){
 8011f22:	3401      	adds	r4, #1
 8011f24:	42a6      	cmp	r6, r4
 8011f26:	dcf2      	bgt.n	8011f0e <eMBRegCoilsCB+0x72>
				}
				return MB_ENOERR;
 8011f28:	4638      	mov	r0, r7
 8011f2a:	e002      	b.n	8011f32 <eMBRegCoilsCB+0x96>
		switch (eMode) {
 8011f2c:	2001      	movs	r0, #1
				break;
			default:
				return MB_ENOREG;
				break;
 8011f2e:	e000      	b.n	8011f32 <eMBRegCoilsCB+0x96>
		}
	}
	return MB_ENOREG;
 8011f30:	2001      	movs	r0, #1
}
 8011f32:	b003      	add	sp, #12
 8011f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return MB_ENOREG;
 8011f36:	2001      	movs	r0, #1
 8011f38:	e7fb      	b.n	8011f32 <eMBRegCoilsCB+0x96>

08011f3a <eMBRegInputCB>:

eMBErrorCode eMBRegInputCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
	return MB_ENOREG;
}
 8011f3a:	2001      	movs	r0, #1
 8011f3c:	4770      	bx	lr

08011f3e <eMBRegHoldingCB>:

eMBErrorCode eMBRegHoldingCB(UCHAR *pucRegBuffer, USHORT usAddress, USHORT usNRegs, eMBRegisterMode eMode)
{
	return MB_ENOREG;
}
 8011f3e:	2001      	movs	r0, #1
 8011f40:	4770      	bx	lr
	...

08011f44 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8011f44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011f48:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011f4a:	2400      	movs	r4, #0
 8011f4c:	9403      	str	r4, [sp, #12]
 8011f4e:	9404      	str	r4, [sp, #16]
 8011f50:	9405      	str	r4, [sp, #20]
 8011f52:	9406      	str	r4, [sp, #24]
 8011f54:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8011f56:	9400      	str	r4, [sp, #0]
 8011f58:	4b3c      	ldr	r3, [pc, #240]	@ (801204c <MX_GPIO_Init+0x108>)
 8011f5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011f5c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8011f60:	631a      	str	r2, [r3, #48]	@ 0x30
 8011f62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011f64:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8011f68:	9200      	str	r2, [sp, #0]
 8011f6a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8011f6c:	9401      	str	r4, [sp, #4]
 8011f6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011f70:	f042 0201 	orr.w	r2, r2, #1
 8011f74:	631a      	str	r2, [r3, #48]	@ 0x30
 8011f76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011f78:	f002 0201 	and.w	r2, r2, #1
 8011f7c:	9201      	str	r2, [sp, #4]
 8011f7e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8011f80:	9402      	str	r4, [sp, #8]
 8011f82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011f84:	f042 0202 	orr.w	r2, r2, #2
 8011f88:	631a      	str	r2, [r3, #48]	@ 0x30
 8011f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f8c:	f003 0302 	and.w	r3, r3, #2
 8011f90:	9302      	str	r3, [sp, #8]
 8011f92:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, coil1_Pin|coil2_Pin|coil3_Pin|ETH_RST_Pin, GPIO_PIN_RESET);
 8011f94:	4e2e      	ldr	r6, [pc, #184]	@ (8012050 <MX_GPIO_Init+0x10c>)
 8011f96:	4622      	mov	r2, r4
 8011f98:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8011f9c:	4630      	mov	r0, r6
 8011f9e:	f004 fe94 	bl	8016cca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8011fa2:	4d2c      	ldr	r5, [pc, #176]	@ (8012054 <MX_GPIO_Init+0x110>)
 8011fa4:	4622      	mov	r2, r4
 8011fa6:	2107      	movs	r1, #7
 8011fa8:	4628      	mov	r0, r5
 8011faa:	f004 fe8e 	bl	8016cca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 8011fae:	2201      	movs	r2, #1
 8011fb0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8011fb4:	4628      	mov	r0, r5
 8011fb6:	f004 fe88 	bl	8016cca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8011fba:	2201      	movs	r2, #1
 8011fbc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8011fc0:	4630      	mov	r0, r6
 8011fc2:	f004 fe82 	bl	8016cca <HAL_GPIO_WritePin>

  /*Configure GPIO pins : input1_Pin input2_Pin input3_Pin */
  GPIO_InitStruct.Pin = input1_Pin|input2_Pin|input3_Pin;
 8011fc6:	f04f 0907 	mov.w	r9, #7
 8011fca:	f8cd 900c 	str.w	r9, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011fce:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8011fd0:	f04f 0802 	mov.w	r8, #2
 8011fd4:	f8cd 8014 	str.w	r8, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011fd8:	a903      	add	r1, sp, #12
 8011fda:	4630      	mov	r0, r6
 8011fdc:	f004 fd02 	bl	80169e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : coil1_Pin coil2_Pin coil3_Pin */
  GPIO_InitStruct.Pin = coil1_Pin|coil2_Pin|coil3_Pin;
 8011fe0:	23e0      	movs	r3, #224	@ 0xe0
 8011fe2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011fe4:	2701      	movs	r7, #1
 8011fe6:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011fe8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011fea:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011fec:	a903      	add	r1, sp, #12
 8011fee:	4630      	mov	r0, r6
 8011ff0:	f004 fcf8 	bl	80169e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8011ff4:	f8cd 900c 	str.w	r9, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011ff8:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011ffa:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011ffc:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011ffe:	a903      	add	r1, sp, #12
 8012000:	4628      	mov	r0, r5
 8012002:	f004 fcef 	bl	80169e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ETH_CS_Pin */
  GPIO_InitStruct.Pin = ETH_CS_Pin;
 8012006:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801200a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801200c:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801200e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8012010:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(ETH_CS_GPIO_Port, &GPIO_InitStruct);
 8012014:	a903      	add	r1, sp, #12
 8012016:	4628      	mov	r0, r5
 8012018:	f004 fce4 	bl	80169e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ETH_RST_Pin FLASH_CS_Pin */
  GPIO_InitStruct.Pin = ETH_RST_Pin|FLASH_CS_Pin;
 801201c:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8012020:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012022:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012024:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8012026:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801202a:	a903      	add	r1, sp, #12
 801202c:	4630      	mov	r0, r6
 801202e:	f004 fcd9 	bl	80169e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8012032:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012036:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012038:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801203a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 801203c:	a903      	add	r1, sp, #12
 801203e:	4628      	mov	r0, r5
 8012040:	f004 fcd0 	bl	80169e4 <HAL_GPIO_Init>

}
 8012044:	b009      	add	sp, #36	@ 0x24
 8012046:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801204a:	bf00      	nop
 801204c:	40023800 	.word	0x40023800
 8012050:	40020000 	.word	0x40020000
 8012054:	40020400 	.word	0x40020400

08012058 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8012058:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 801205a:	480b      	ldr	r0, [pc, #44]	@ (8012088 <MX_I2C1_Init+0x30>)
 801205c:	4b0b      	ldr	r3, [pc, #44]	@ (801208c <MX_I2C1_Init+0x34>)
 801205e:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 200000;
 8012060:	4b0b      	ldr	r3, [pc, #44]	@ (8012090 <MX_I2C1_Init+0x38>)
 8012062:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8012064:	2300      	movs	r3, #0
 8012066:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8012068:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801206a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 801206e:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8012070:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8012072:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8012074:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8012076:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8012078:	f004 ffc8 	bl	801700c <HAL_I2C_Init>
 801207c:	b900      	cbnz	r0, 8012080 <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 801207e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8012080:	f000 f93c 	bl	80122fc <Error_Handler>
}
 8012084:	e7fb      	b.n	801207e <MX_I2C1_Init+0x26>
 8012086:	bf00      	nop
 8012088:	2000091c 	.word	0x2000091c
 801208c:	40005400 	.word	0x40005400
 8012090:	00030d40 	.word	0x00030d40

08012094 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8012094:	b530      	push	{r4, r5, lr}
 8012096:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012098:	2300      	movs	r3, #0
 801209a:	9303      	str	r3, [sp, #12]
 801209c:	9304      	str	r3, [sp, #16]
 801209e:	9305      	str	r3, [sp, #20]
 80120a0:	9306      	str	r3, [sp, #24]
 80120a2:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 80120a4:	6802      	ldr	r2, [r0, #0]
 80120a6:	4b15      	ldr	r3, [pc, #84]	@ (80120fc <HAL_I2C_MspInit+0x68>)
 80120a8:	429a      	cmp	r2, r3
 80120aa:	d001      	beq.n	80120b0 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80120ac:	b009      	add	sp, #36	@ 0x24
 80120ae:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80120b0:	2500      	movs	r5, #0
 80120b2:	9501      	str	r5, [sp, #4]
 80120b4:	4c12      	ldr	r4, [pc, #72]	@ (8012100 <HAL_I2C_MspInit+0x6c>)
 80120b6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80120b8:	f043 0302 	orr.w	r3, r3, #2
 80120bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80120be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80120c0:	f003 0302 	and.w	r3, r3, #2
 80120c4:	9301      	str	r3, [sp, #4]
 80120c6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80120c8:	23c0      	movs	r3, #192	@ 0xc0
 80120ca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80120cc:	2312      	movs	r3, #18
 80120ce:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80120d0:	2301      	movs	r3, #1
 80120d2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80120d4:	2303      	movs	r3, #3
 80120d6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80120d8:	2304      	movs	r3, #4
 80120da:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80120dc:	a903      	add	r1, sp, #12
 80120de:	4809      	ldr	r0, [pc, #36]	@ (8012104 <HAL_I2C_MspInit+0x70>)
 80120e0:	f004 fc80 	bl	80169e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80120e4:	9502      	str	r5, [sp, #8]
 80120e6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80120e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80120ec:	6423      	str	r3, [r4, #64]	@ 0x40
 80120ee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80120f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80120f4:	9302      	str	r3, [sp, #8]
 80120f6:	9b02      	ldr	r3, [sp, #8]
}
 80120f8:	e7d8      	b.n	80120ac <HAL_I2C_MspInit+0x18>
 80120fa:	bf00      	nop
 80120fc:	40005400 	.word	0x40005400
 8012100:	40023800 	.word	0x40023800
 8012104:	40020400 	.word	0x40020400

08012108 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{

  if(i2cHandle->Instance==I2C1)
 8012108:	6802      	ldr	r2, [r0, #0]
 801210a:	4b0a      	ldr	r3, [pc, #40]	@ (8012134 <HAL_I2C_MspDeInit+0x2c>)
 801210c:	429a      	cmp	r2, r3
 801210e:	d000      	beq.n	8012112 <HAL_I2C_MspDeInit+0xa>
 8012110:	4770      	bx	lr
{
 8012112:	b510      	push	{r4, lr}
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8012114:	4a08      	ldr	r2, [pc, #32]	@ (8012138 <HAL_I2C_MspDeInit+0x30>)
 8012116:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8012118:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801211c:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 801211e:	4c07      	ldr	r4, [pc, #28]	@ (801213c <HAL_I2C_MspDeInit+0x34>)
 8012120:	2140      	movs	r1, #64	@ 0x40
 8012122:	4620      	mov	r0, r4
 8012124:	f004 fd42 	bl	8016bac <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8012128:	2180      	movs	r1, #128	@ 0x80
 801212a:	4620      	mov	r0, r4
 801212c:	f004 fd3e 	bl	8016bac <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8012130:	bd10      	pop	{r4, pc}
 8012132:	bf00      	nop
 8012134:	40005400 	.word	0x40005400
 8012138:	40023800 	.word	0x40023800
 801213c:	40020400 	.word	0x40020400

08012140 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8012140:	b508      	push	{r3, lr}
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8012142:	4807      	ldr	r0, [pc, #28]	@ (8012160 <MX_IWDG_Init+0x20>)
 8012144:	4b07      	ldr	r3, [pc, #28]	@ (8012164 <MX_IWDG_Init+0x24>)
 8012146:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8012148:	2303      	movs	r3, #3
 801214a:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Reload = 4095;
 801214c:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8012150:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8012152:	f005 f9d9 	bl	8017508 <HAL_IWDG_Init>
 8012156:	b900      	cbnz	r0, 801215a <MX_IWDG_Init+0x1a>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8012158:	bd08      	pop	{r3, pc}
    Error_Handler();
 801215a:	f000 f8cf 	bl	80122fc <Error_Handler>
}
 801215e:	e7fb      	b.n	8012158 <MX_IWDG_Init+0x18>
 8012160:	20000970 	.word	0x20000970
 8012164:	40003000 	.word	0x40003000

08012168 <proto>:
#define time_ms_now() mg_now()

logging_level_t _level_ = L_DEBUG;
const char *level_strings[] = {"DEBUG", "INFO", "WARNING", "ERROR"};

static void proto(struct log_message mess ){};
 8012168:	b084      	sub	sp, #16
 801216a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801216e:	b004      	add	sp, #16
 8012170:	4770      	bx	lr

08012172 <mg_calloc>:
#define free(a) vPortFree(a)
#define malloc(a) pvPortMalloc(a)
#define strdup(s) ((char *) mg_strdup(mg_str(s)).buf)

// Re-route calloc/free to the FreeRTOS's functions, don't use stdlib
static inline void *mg_calloc(size_t cnt, size_t size) {
 8012172:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8012174:	fb01 f400 	mul.w	r4, r1, r0
 8012178:	4620      	mov	r0, r4
 801217a:	f008 ff25 	bl	801afc8 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 801217e:	4605      	mov	r5, r0
 8012180:	b118      	cbz	r0, 801218a <mg_calloc+0x18>
 8012182:	4622      	mov	r2, r4
 8012184:	2100      	movs	r1, #0
 8012186:	f01a ff6b 	bl	802d060 <memset>
  return p;
}
 801218a:	4628      	mov	r0, r5
 801218c:	bd38      	pop	{r3, r4, r5, pc}
	...

08012190 <reg_logging_fn>:

void (*_send_log_mess)(struct log_message mess) = proto;


void reg_logging_fn(void (* fn)(struct log_message)){
	if (fn != NULL){
 8012190:	b108      	cbz	r0, 8012196 <reg_logging_fn+0x6>
		_send_log_mess = fn;
 8012192:	4a01      	ldr	r2, [pc, #4]	@ (8012198 <reg_logging_fn+0x8>)
 8012194:	6010      	str	r0, [r2, #0]
	}
}
 8012196:	4770      	bx	lr
 8012198:	20000000 	.word	0x20000000

0801219c <logger_set_level>:

void logger_set_level(logging_level_t l){
	_level_ = l;
 801219c:	4b01      	ldr	r3, [pc, #4]	@ (80121a4 <logger_set_level+0x8>)
 801219e:	7018      	strb	r0, [r3, #0]
}
 80121a0:	4770      	bx	lr
 80121a2:	bf00      	nop
 80121a4:	2000097c 	.word	0x2000097c

080121a8 <logging>:

void logging(logging_level_t level, const char *format, ...){
 80121a8:	b40e      	push	{r1, r2, r3}
 80121aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80121ac:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
    int formatted_len;
    int time_len;

    char * tmp_buf = NULL;

    if (level < _level_) return;
 80121b0:	4b44      	ldr	r3, [pc, #272]	@ (80122c4 <logging+0x11c>)
 80121b2:	781b      	ldrb	r3, [r3, #0]
 80121b4:	4283      	cmp	r3, r0
 80121b6:	d905      	bls.n	80121c4 <logging+0x1c>
    if (_send_log_mess) {
        _send_log_mess(mess);
    }

    free(tmp_buf);
}
 80121b8:	f50d 7d1c 	add.w	sp, sp, #624	@ 0x270
 80121bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80121c0:	b003      	add	sp, #12
 80121c2:	4770      	bx	lr
 80121c4:	4604      	mov	r4, r0
    tmp_buf = calloc(LOG_MES_TEXT_LEN, sizeof(char));
 80121c6:	2101      	movs	r1, #1
 80121c8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80121cc:	f7ff ffd1 	bl	8012172 <mg_calloc>
    if (!tmp_buf){
 80121d0:	4605      	mov	r5, r0
 80121d2:	2800      	cmp	r0, #0
 80121d4:	d0f0      	beq.n	80121b8 <logging+0x10>
    memset(&mess, 0, sizeof(log_message_t));
 80121d6:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80121da:	2100      	movs	r1, #0
 80121dc:	a85b      	add	r0, sp, #364	@ 0x16c
 80121de:	f01a ff3f 	bl	802d060 <memset>
    mess.log_level = level;
 80121e2:	f88d 416c 	strb.w	r4, [sp, #364]	@ 0x16c
    double ms_now = time_ms_now();
 80121e6:	f017 ff8b 	bl	802a100 <mg_now>
 80121ea:	f7fe f9e7 	bl	80105bc <__aeabi_ul2d>
 80121ee:	4606      	mov	r6, r0
 80121f0:	460f      	mov	r7, r1
    time_t now = (time_t)(ms_now / 1000.0);
 80121f2:	2200      	movs	r2, #0
 80121f4:	4b34      	ldr	r3, [pc, #208]	@ (80122c8 <logging+0x120>)
 80121f6:	f7fe fb41 	bl	801087c <__aeabi_ddiv>
 80121fa:	f7fe fdd9 	bl	8010db0 <__aeabi_d2lz>
 80121fe:	e9cd 0158 	strd	r0, r1, [sp, #352]	@ 0x160
    localtime_r(&now, &tm_info);
 8012202:	a94f      	add	r1, sp, #316	@ 0x13c
 8012204:	a858      	add	r0, sp, #352	@ 0x160
 8012206:	f01a ffc1 	bl	802d18c <localtime_r>
    time_len = strftime(time_str, sizeof(time_str), "%Y-%m-%d %H:%M:%S", &tm_info);
 801220a:	ab4f      	add	r3, sp, #316	@ 0x13c
 801220c:	4a2f      	ldr	r2, [pc, #188]	@ (80122cc <logging+0x124>)
 801220e:	2140      	movs	r1, #64	@ 0x40
 8012210:	a83f      	add	r0, sp, #252	@ 0xfc
 8012212:	f01b fdcd 	bl	802ddb0 <strftime>
 8012216:	4604      	mov	r4, r0
    int millis = (int)(ms_now) % 1000;
 8012218:	4630      	mov	r0, r6
 801221a:	4639      	mov	r1, r7
 801221c:	f7fe fcb4 	bl	8010b88 <__aeabi_d2iz>
 8012220:	4a2b      	ldr	r2, [pc, #172]	@ (80122d0 <logging+0x128>)
 8012222:	fb82 3200 	smull	r3, r2, r2, r0
 8012226:	17c3      	asrs	r3, r0, #31
 8012228:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
    time_len += snprintf(time_str + time_len, sizeof(time_str) - time_len, ".%03d", millis);
 801222c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8012230:	fb02 0313 	mls	r3, r2, r3, r0
 8012234:	4a27      	ldr	r2, [pc, #156]	@ (80122d4 <logging+0x12c>)
 8012236:	f1c4 0140 	rsb	r1, r4, #64	@ 0x40
 801223a:	a83f      	add	r0, sp, #252	@ 0xfc
 801223c:	4420      	add	r0, r4
 801223e:	f01a f9e5 	bl	802c60c <snprintf>
 8012242:	4404      	add	r4, r0
    time_str[time_len++] = ' ';
 8012244:	1c63      	adds	r3, r4, #1
 8012246:	2220      	movs	r2, #32
 8012248:	a93f      	add	r1, sp, #252	@ 0xfc
 801224a:	550a      	strb	r2, [r1, r4]
    time_str[time_len++] = '\0';
 801224c:	2200      	movs	r2, #0
 801224e:	54ca      	strb	r2, [r1, r3]
    va_start(args, format);
 8012250:	aba2      	add	r3, sp, #648	@ 0x288
 8012252:	935a      	str	r3, [sp, #360]	@ 0x168
    formatted_len = vsnprintf(mess.log_text, LOG_MES_TEXT_LEN - 3, format, args);
 8012254:	f20d 166d 	addw	r6, sp, #365	@ 0x16d
 8012258:	9aa1      	ldr	r2, [sp, #644]	@ 0x284
 801225a:	21fd      	movs	r1, #253	@ 0xfd
 801225c:	4630      	mov	r0, r6
 801225e:	f01a fc9d 	bl	802cb9c <vsnprintf>
 8012262:	4604      	mov	r4, r0
    snprintf(tmp_buf ,LOG_MES_TEXT_LEN, "%s %s:%s\r\n", time_str, level_strings[mess.log_level], mess.log_text);
 8012264:	f89d 216c 	ldrb.w	r2, [sp, #364]	@ 0x16c
 8012268:	9601      	str	r6, [sp, #4]
 801226a:	4b1b      	ldr	r3, [pc, #108]	@ (80122d8 <logging+0x130>)
 801226c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012270:	9300      	str	r3, [sp, #0]
 8012272:	ab3f      	add	r3, sp, #252	@ 0xfc
 8012274:	4a19      	ldr	r2, [pc, #100]	@ (80122dc <logging+0x134>)
 8012276:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801227a:	4628      	mov	r0, r5
 801227c:	f01a f9c6 	bl	802c60c <snprintf>
     if (formatted_len >= 0 && formatted_len < LOG_MES_TEXT_LEN - 10) {
 8012280:	2cf5      	cmp	r4, #245	@ 0xf5
 8012282:	d81b      	bhi.n	80122bc <logging+0x114>
         mess.log_len = strlen(tmp_buf);
 8012284:	4628      	mov	r0, r5
 8012286:	f7fe f80b 	bl	80102a0 <strlen>
 801228a:	f88d 026d 	strb.w	r0, [sp, #621]	@ 0x26d
     strncpy(mess.log_text, tmp_buf, LOG_MES_TEXT_LEN);
 801228e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8012292:	4629      	mov	r1, r5
 8012294:	f20d 106d 	addw	r0, sp, #365	@ 0x16d
 8012298:	f01a ff29 	bl	802d0ee <strncpy>
    if (_send_log_mess) {
 801229c:	4b10      	ldr	r3, [pc, #64]	@ (80122e0 <logging+0x138>)
 801229e:	681e      	ldr	r6, [r3, #0]
 80122a0:	b146      	cbz	r6, 80122b4 <logging+0x10c>
        _send_log_mess(mess);
 80122a2:	ac5b      	add	r4, sp, #364	@ 0x16c
 80122a4:	22f2      	movs	r2, #242	@ 0xf2
 80122a6:	a95f      	add	r1, sp, #380	@ 0x17c
 80122a8:	4668      	mov	r0, sp
 80122aa:	f01c f915 	bl	802e4d8 <memcpy>
 80122ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80122b2:	47b0      	blx	r6
    free(tmp_buf);
 80122b4:	4628      	mov	r0, r5
 80122b6:	f008 ff09 	bl	801b0cc <vPortFree>
 80122ba:	e77d      	b.n	80121b8 <logging+0x10>
         mess.log_len = LOG_MES_TEXT_LEN - 10;
 80122bc:	23f6      	movs	r3, #246	@ 0xf6
 80122be:	f88d 326d 	strb.w	r3, [sp, #621]	@ 0x26d
 80122c2:	e7e4      	b.n	801228e <logging+0xe6>
 80122c4:	2000097c 	.word	0x2000097c
 80122c8:	408f4000 	.word	0x408f4000
 80122cc:	08036b58 	.word	0x08036b58
 80122d0:	10624dd3 	.word	0x10624dd3
 80122d4:	08036b6c 	.word	0x08036b6c
 80122d8:	20000004 	.word	0x20000004
 80122dc:	08036b74 	.word	0x08036b74
 80122e0:	20000000 	.word	0x20000000

080122e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80122e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 80122e6:	6802      	ldr	r2, [r0, #0]
 80122e8:	4b03      	ldr	r3, [pc, #12]	@ (80122f8 <HAL_TIM_PeriodElapsedCallback+0x14>)
 80122ea:	429a      	cmp	r2, r3
 80122ec:	d000      	beq.n	80122f0 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80122ee:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 80122f0:	f004 f938 	bl	8016564 <HAL_IncTick>
}
 80122f4:	e7fb      	b.n	80122ee <HAL_TIM_PeriodElapsedCallback+0xa>
 80122f6:	bf00      	nop
 80122f8:	40014000 	.word	0x40014000

080122fc <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80122fc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80122fe:	e7fe      	b.n	80122fe <Error_Handler+0x2>

08012300 <SystemClock_Config>:
{
 8012300:	b500      	push	{lr}
 8012302:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8012304:	2230      	movs	r2, #48	@ 0x30
 8012306:	2100      	movs	r1, #0
 8012308:	a808      	add	r0, sp, #32
 801230a:	f01a fea9 	bl	802d060 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801230e:	2300      	movs	r3, #0
 8012310:	9303      	str	r3, [sp, #12]
 8012312:	9304      	str	r3, [sp, #16]
 8012314:	9305      	str	r3, [sp, #20]
 8012316:	9306      	str	r3, [sp, #24]
 8012318:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 801231a:	9301      	str	r3, [sp, #4]
 801231c:	4a20      	ldr	r2, [pc, #128]	@ (80123a0 <SystemClock_Config+0xa0>)
 801231e:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8012320:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8012324:	6411      	str	r1, [r2, #64]	@ 0x40
 8012326:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8012328:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 801232c:	9201      	str	r2, [sp, #4]
 801232e:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8012330:	9302      	str	r3, [sp, #8]
 8012332:	4b1c      	ldr	r3, [pc, #112]	@ (80123a4 <SystemClock_Config+0xa4>)
 8012334:	681a      	ldr	r2, [r3, #0]
 8012336:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 801233a:	601a      	str	r2, [r3, #0]
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8012342:	9302      	str	r3, [sp, #8]
 8012344:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8012346:	2309      	movs	r3, #9
 8012348:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801234a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801234e:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8012350:	2301      	movs	r3, #1
 8012352:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8012354:	2202      	movs	r2, #2
 8012356:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8012358:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 801235c:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 801235e:	2304      	movs	r3, #4
 8012360:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8012362:	2164      	movs	r1, #100	@ 0x64
 8012364:	9111      	str	r1, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8012366:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8012368:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801236a:	a808      	add	r0, sp, #32
 801236c:	f005 f8fe 	bl	801756c <HAL_RCC_OscConfig>
 8012370:	b988      	cbnz	r0, 8012396 <SystemClock_Config+0x96>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8012372:	230f      	movs	r3, #15
 8012374:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8012376:	2302      	movs	r3, #2
 8012378:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801237a:	2300      	movs	r3, #0
 801237c:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 801237e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8012382:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8012384:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8012386:	2103      	movs	r1, #3
 8012388:	a803      	add	r0, sp, #12
 801238a:	f005 fb59 	bl	8017a40 <HAL_RCC_ClockConfig>
 801238e:	b920      	cbnz	r0, 801239a <SystemClock_Config+0x9a>
}
 8012390:	b015      	add	sp, #84	@ 0x54
 8012392:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8012396:	f7ff ffb1 	bl	80122fc <Error_Handler>
    Error_Handler();
 801239a:	f7ff ffaf 	bl	80122fc <Error_Handler>
 801239e:	bf00      	nop
 80123a0:	40023800 	.word	0x40023800
 80123a4:	40007000 	.word	0x40007000

080123a8 <main>:
{
 80123a8:	b500      	push	{lr}
 80123aa:	b083      	sub	sp, #12
 80123ac:	b672      	cpsid	i
	SCB->VTOR = (uint32_t)0x08000000 | (0x08010000 & (uint32_t)0x1FFFFF80);
 80123ae:	4b12      	ldr	r3, [pc, #72]	@ (80123f8 <main+0x50>)
 80123b0:	4a12      	ldr	r2, [pc, #72]	@ (80123fc <main+0x54>)
 80123b2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80123b4:	b662      	cpsie	i
	volatile int i = 1000000;
 80123b6:	4b12      	ldr	r3, [pc, #72]	@ (8012400 <main+0x58>)
 80123b8:	9301      	str	r3, [sp, #4]
	while (i > 0){ //delay for startup
 80123ba:	e002      	b.n	80123c2 <main+0x1a>
		i--;
 80123bc:	9b01      	ldr	r3, [sp, #4]
 80123be:	3b01      	subs	r3, #1
 80123c0:	9301      	str	r3, [sp, #4]
	while (i > 0){ //delay for startup
 80123c2:	9b01      	ldr	r3, [sp, #4]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	dcf9      	bgt.n	80123bc <main+0x14>
  HAL_Init();
 80123c8:	f004 f8b2 	bl	8016530 <HAL_Init>
  SystemClock_Config();
 80123cc:	f7ff ff98 	bl	8012300 <SystemClock_Config>
  MX_GPIO_Init();
 80123d0:	f7ff fdb8 	bl	8011f44 <MX_GPIO_Init>
  MX_SPI2_Init();
 80123d4:	f000 f838 	bl	8012448 <MX_SPI2_Init>
  MX_I2C1_Init();
 80123d8:	f7ff fe3e 	bl	8012058 <MX_I2C1_Init>
  MX_SPI1_Init();
 80123dc:	f000 f812 	bl	8012404 <MX_SPI1_Init>
  MX_IWDG_Init();
 80123e0:	f7ff feae 	bl	8012140 <MX_IWDG_Init>
  MX_ADC1_Init();
 80123e4:	f7fe fe7a 	bl	80110dc <MX_ADC1_Init>
  osKernelInitialize();
 80123e8:	f006 fb5e 	bl	8018aa8 <osKernelInitialize>
  MX_FREERTOS_Init();
 80123ec:	f7ff fba2 	bl	8011b34 <MX_FREERTOS_Init>
  osKernelStart();
 80123f0:	f006 fb6c 	bl	8018acc <osKernelStart>
  while (1)
 80123f4:	e7fe      	b.n	80123f4 <main+0x4c>
 80123f6:	bf00      	nop
 80123f8:	e000ed00 	.word	0xe000ed00
 80123fc:	08010000 	.word	0x08010000
 8012400:	000f4240 	.word	0x000f4240

08012404 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8012404:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8012406:	480e      	ldr	r0, [pc, #56]	@ (8012440 <MX_SPI1_Init+0x3c>)
 8012408:	4b0e      	ldr	r3, [pc, #56]	@ (8012444 <MX_SPI1_Init+0x40>)
 801240a:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801240c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8012410:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8012412:	2300      	movs	r3, #0
 8012414:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8012416:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8012418:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 801241a:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 801241c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012420:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8012422:	2208      	movs	r2, #8
 8012424:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8012426:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8012428:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801242a:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 801242c:	230a      	movs	r3, #10
 801242e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8012430:	f005 fce4 	bl	8017dfc <HAL_SPI_Init>
 8012434:	b900      	cbnz	r0, 8012438 <MX_SPI1_Init+0x34>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8012436:	bd08      	pop	{r3, pc}
    Error_Handler();
 8012438:	f7ff ff60 	bl	80122fc <Error_Handler>
}
 801243c:	e7fb      	b.n	8012436 <MX_SPI1_Init+0x32>
 801243e:	bf00      	nop
 8012440:	200009d8 	.word	0x200009d8
 8012444:	40013000 	.word	0x40013000

08012448 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8012448:	b508      	push	{r3, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 801244a:	480d      	ldr	r0, [pc, #52]	@ (8012480 <MX_SPI2_Init+0x38>)
 801244c:	4b0d      	ldr	r3, [pc, #52]	@ (8012484 <MX_SPI2_Init+0x3c>)
 801244e:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8012450:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8012454:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8012456:	2300      	movs	r3, #0
 8012458:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 801245a:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 801245c:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 801245e:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8012460:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012464:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8012466:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8012468:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 801246a:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801246c:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 801246e:	230a      	movs	r3, #10
 8012470:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8012472:	f005 fcc3 	bl	8017dfc <HAL_SPI_Init>
 8012476:	b900      	cbnz	r0, 801247a <MX_SPI2_Init+0x32>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8012478:	bd08      	pop	{r3, pc}
    Error_Handler();
 801247a:	f7ff ff3f 	bl	80122fc <Error_Handler>
}
 801247e:	e7fb      	b.n	8012478 <MX_SPI2_Init+0x30>
 8012480:	20000980 	.word	0x20000980
 8012484:	40003800 	.word	0x40003800

08012488 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8012488:	b500      	push	{lr}
 801248a:	b08b      	sub	sp, #44	@ 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801248c:	2300      	movs	r3, #0
 801248e:	9305      	str	r3, [sp, #20]
 8012490:	9306      	str	r3, [sp, #24]
 8012492:	9307      	str	r3, [sp, #28]
 8012494:	9308      	str	r3, [sp, #32]
 8012496:	9309      	str	r3, [sp, #36]	@ 0x24
  if(spiHandle->Instance==SPI1)
 8012498:	6803      	ldr	r3, [r0, #0]
 801249a:	4a28      	ldr	r2, [pc, #160]	@ (801253c <HAL_SPI_MspInit+0xb4>)
 801249c:	4293      	cmp	r3, r2
 801249e:	d005      	beq.n	80124ac <HAL_SPI_MspInit+0x24>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI2)
 80124a0:	4a27      	ldr	r2, [pc, #156]	@ (8012540 <HAL_SPI_MspInit+0xb8>)
 80124a2:	4293      	cmp	r3, r2
 80124a4:	d025      	beq.n	80124f2 <HAL_SPI_MspInit+0x6a>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80124a6:	b00b      	add	sp, #44	@ 0x2c
 80124a8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 80124ac:	2100      	movs	r1, #0
 80124ae:	9101      	str	r1, [sp, #4]
 80124b0:	4b24      	ldr	r3, [pc, #144]	@ (8012544 <HAL_SPI_MspInit+0xbc>)
 80124b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80124b4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80124b8:	645a      	str	r2, [r3, #68]	@ 0x44
 80124ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80124bc:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80124c0:	9201      	str	r2, [sp, #4]
 80124c2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80124c4:	9102      	str	r1, [sp, #8]
 80124c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80124c8:	f042 0202 	orr.w	r2, r2, #2
 80124cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80124ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80124d0:	f003 0302 	and.w	r3, r3, #2
 80124d4:	9302      	str	r3, [sp, #8]
 80124d6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80124d8:	2338      	movs	r3, #56	@ 0x38
 80124da:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80124dc:	2302      	movs	r3, #2
 80124de:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80124e0:	2303      	movs	r3, #3
 80124e2:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80124e4:	2305      	movs	r3, #5
 80124e6:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80124e8:	a905      	add	r1, sp, #20
 80124ea:	4817      	ldr	r0, [pc, #92]	@ (8012548 <HAL_SPI_MspInit+0xc0>)
 80124ec:	f004 fa7a 	bl	80169e4 <HAL_GPIO_Init>
 80124f0:	e7d9      	b.n	80124a6 <HAL_SPI_MspInit+0x1e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80124f2:	2100      	movs	r1, #0
 80124f4:	9103      	str	r1, [sp, #12]
 80124f6:	4b13      	ldr	r3, [pc, #76]	@ (8012544 <HAL_SPI_MspInit+0xbc>)
 80124f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80124fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80124fe:	641a      	str	r2, [r3, #64]	@ 0x40
 8012500:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012502:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8012506:	9203      	str	r2, [sp, #12]
 8012508:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801250a:	9104      	str	r1, [sp, #16]
 801250c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801250e:	f042 0202 	orr.w	r2, r2, #2
 8012512:	631a      	str	r2, [r3, #48]	@ 0x30
 8012514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012516:	f003 0302 	and.w	r3, r3, #2
 801251a:	9304      	str	r3, [sp, #16]
 801251c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 801251e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8012522:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012524:	2302      	movs	r3, #2
 8012526:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012528:	2303      	movs	r3, #3
 801252a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 801252c:	2305      	movs	r3, #5
 801252e:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012530:	a905      	add	r1, sp, #20
 8012532:	4805      	ldr	r0, [pc, #20]	@ (8012548 <HAL_SPI_MspInit+0xc0>)
 8012534:	f004 fa56 	bl	80169e4 <HAL_GPIO_Init>
}
 8012538:	e7b5      	b.n	80124a6 <HAL_SPI_MspInit+0x1e>
 801253a:	bf00      	nop
 801253c:	40013000 	.word	0x40013000
 8012540:	40003800 	.word	0x40003800
 8012544:	40023800 	.word	0x40023800
 8012548:	40020400 	.word	0x40020400

0801254c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801254c:	b500      	push	{lr}
 801254e:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012550:	2200      	movs	r2, #0
 8012552:	9200      	str	r2, [sp, #0]
 8012554:	4b0d      	ldr	r3, [pc, #52]	@ (801258c <HAL_MspInit+0x40>)
 8012556:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8012558:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 801255c:	6459      	str	r1, [r3, #68]	@ 0x44
 801255e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8012560:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 8012564:	9100      	str	r1, [sp, #0]
 8012566:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8012568:	9201      	str	r2, [sp, #4]
 801256a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 801256c:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8012570:	6419      	str	r1, [r3, #64]	@ 0x40
 8012572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012574:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8012578:	9301      	str	r3, [sp, #4]
 801257a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 801257c:	210f      	movs	r1, #15
 801257e:	f06f 0001 	mvn.w	r0, #1
 8012582:	f004 fa17 	bl	80169b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8012586:	b003      	add	sp, #12
 8012588:	f85d fb04 	ldr.w	pc, [sp], #4
 801258c:	40023800 	.word	0x40023800

08012590 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8012590:	b530      	push	{r4, r5, lr}
 8012592:	b089      	sub	sp, #36	@ 0x24
 8012594:	4605      	mov	r5, r0
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8012596:	2400      	movs	r4, #0
 8012598:	9401      	str	r4, [sp, #4]
 801259a:	4b1d      	ldr	r3, [pc, #116]	@ (8012610 <HAL_InitTick+0x80>)
 801259c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801259e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80125a2:	645a      	str	r2, [r3, #68]	@ 0x44
 80125a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80125a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80125aa:	9301      	str	r3, [sp, #4]
 80125ac:	9b01      	ldr	r3, [sp, #4]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80125ae:	a902      	add	r1, sp, #8
 80125b0:	a803      	add	r0, sp, #12
 80125b2:	f005 fb1b 	bl	8017bec <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80125b6:	f005 fb09 	bl	8017bcc <HAL_RCC_GetPCLK2Freq>

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80125ba:	4a16      	ldr	r2, [pc, #88]	@ (8012614 <HAL_InitTick+0x84>)
 80125bc:	fba2 2300 	umull	r2, r3, r2, r0
 80125c0:	0c9b      	lsrs	r3, r3, #18
 80125c2:	3b01      	subs	r3, #1

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 80125c4:	4814      	ldr	r0, [pc, #80]	@ (8012618 <HAL_InitTick+0x88>)
 80125c6:	4a15      	ldr	r2, [pc, #84]	@ (801261c <HAL_InitTick+0x8c>)
 80125c8:	6002      	str	r2, [r0, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 80125ca:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80125ce:	60c2      	str	r2, [r0, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 80125d0:	6043      	str	r3, [r0, #4]
  htim9.Init.ClockDivision = 0;
 80125d2:	6104      	str	r4, [r0, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80125d4:	6084      	str	r4, [r0, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80125d6:	6184      	str	r4, [r0, #24]

  status = HAL_TIM_Base_Init(&htim9);
 80125d8:	f006 f886 	bl	80186e8 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80125dc:	4604      	mov	r4, r0
 80125de:	b110      	cbz	r0, 80125e6 <HAL_InitTick+0x56>
    }
  }

 /* Return function status */
  return status;
}
 80125e0:	4620      	mov	r0, r4
 80125e2:	b009      	add	sp, #36	@ 0x24
 80125e4:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim9);
 80125e6:	480c      	ldr	r0, [pc, #48]	@ (8012618 <HAL_InitTick+0x88>)
 80125e8:	f005 ff38 	bl	801845c <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80125ec:	4604      	mov	r4, r0
 80125ee:	2800      	cmp	r0, #0
 80125f0:	d1f6      	bne.n	80125e0 <HAL_InitTick+0x50>
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80125f2:	2018      	movs	r0, #24
 80125f4:	f004 f9ee 	bl	80169d4 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80125f8:	2d0f      	cmp	r5, #15
 80125fa:	d901      	bls.n	8012600 <HAL_InitTick+0x70>
        status = HAL_ERROR;
 80125fc:	2401      	movs	r4, #1
 80125fe:	e7ef      	b.n	80125e0 <HAL_InitTick+0x50>
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8012600:	2200      	movs	r2, #0
 8012602:	4629      	mov	r1, r5
 8012604:	2018      	movs	r0, #24
 8012606:	f004 f9d5 	bl	80169b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 801260a:	4b05      	ldr	r3, [pc, #20]	@ (8012620 <HAL_InitTick+0x90>)
 801260c:	601d      	str	r5, [r3, #0]
 801260e:	e7e7      	b.n	80125e0 <HAL_InitTick+0x50>
 8012610:	40023800 	.word	0x40023800
 8012614:	431bde83 	.word	0x431bde83
 8012618:	20000a30 	.word	0x20000a30
 801261c:	40014000 	.word	0x40014000
 8012620:	20000108 	.word	0x20000108

08012624 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8012624:	e7fe      	b.n	8012624 <NMI_Handler>

08012626 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8012626:	e7fe      	b.n	8012626 <HardFault_Handler>

08012628 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8012628:	e7fe      	b.n	8012628 <MemManage_Handler>

0801262a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801262a:	e7fe      	b.n	801262a <BusFault_Handler>

0801262c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801262c:	e7fe      	b.n	801262c <UsageFault_Handler>

0801262e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801262e:	4770      	bx	lr

08012630 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8012630:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8012632:	4802      	ldr	r0, [pc, #8]	@ (801263c <TIM1_BRK_TIM9_IRQHandler+0xc>)
 8012634:	f005 ff52 	bl	80184dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8012638:	bd08      	pop	{r3, pc}
 801263a:	bf00      	nop
 801263c:	20000a30 	.word	0x20000a30

08012640 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8012640:	2001      	movs	r0, #1
 8012642:	4770      	bx	lr

08012644 <_kill>:

int _kill(int pid, int sig)
{
 8012644:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8012646:	f01b ff0f 	bl	802e468 <__errno>
 801264a:	2316      	movs	r3, #22
 801264c:	6003      	str	r3, [r0, #0]
  return -1;
}
 801264e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012652:	bd08      	pop	{r3, pc}

08012654 <_exit>:

void _exit (int status)
{
 8012654:	b508      	push	{r3, lr}
  _kill(status, -1);
 8012656:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801265a:	f7ff fff3 	bl	8012644 <_kill>
  while (1) {}    /* Make sure we hang here */
 801265e:	e7fe      	b.n	801265e <_exit+0xa>

08012660 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8012660:	b570      	push	{r4, r5, r6, lr}
 8012662:	460c      	mov	r4, r1
 8012664:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012666:	2500      	movs	r5, #0
 8012668:	e006      	b.n	8012678 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 801266a:	f3af 8000 	nop.w
 801266e:	4621      	mov	r1, r4
 8012670:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012674:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8012676:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012678:	42b5      	cmp	r5, r6
 801267a:	dbf6      	blt.n	801266a <_read+0xa>
  }

  return len;
}
 801267c:	4630      	mov	r0, r6
 801267e:	bd70      	pop	{r4, r5, r6, pc}

08012680 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8012680:	b570      	push	{r4, r5, r6, lr}
 8012682:	460c      	mov	r4, r1
 8012684:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012686:	2500      	movs	r5, #0
 8012688:	e004      	b.n	8012694 <_write+0x14>
  {
    __io_putchar(*ptr++);
 801268a:	f814 0b01 	ldrb.w	r0, [r4], #1
 801268e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012692:	3501      	adds	r5, #1
 8012694:	42b5      	cmp	r5, r6
 8012696:	dbf8      	blt.n	801268a <_write+0xa>
  }
  return len;
}
 8012698:	4630      	mov	r0, r6
 801269a:	bd70      	pop	{r4, r5, r6, pc}

0801269c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 801269c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80126a0:	4770      	bx	lr

080126a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80126a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80126a6:	604b      	str	r3, [r1, #4]
  return 0;
}
 80126a8:	2000      	movs	r0, #0
 80126aa:	4770      	bx	lr

080126ac <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80126ac:	2001      	movs	r0, #1
 80126ae:	4770      	bx	lr

080126b0 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80126b0:	2000      	movs	r0, #0
 80126b2:	4770      	bx	lr

080126b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80126b4:	b510      	push	{r4, lr}
 80126b6:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80126b8:	4a0c      	ldr	r2, [pc, #48]	@ (80126ec <_sbrk+0x38>)
 80126ba:	490d      	ldr	r1, [pc, #52]	@ (80126f0 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80126bc:	480d      	ldr	r0, [pc, #52]	@ (80126f4 <_sbrk+0x40>)
 80126be:	6800      	ldr	r0, [r0, #0]
 80126c0:	b140      	cbz	r0, 80126d4 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80126c2:	480c      	ldr	r0, [pc, #48]	@ (80126f4 <_sbrk+0x40>)
 80126c4:	6800      	ldr	r0, [r0, #0]
 80126c6:	4403      	add	r3, r0
 80126c8:	1a52      	subs	r2, r2, r1
 80126ca:	4293      	cmp	r3, r2
 80126cc:	d806      	bhi.n	80126dc <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80126ce:	4a09      	ldr	r2, [pc, #36]	@ (80126f4 <_sbrk+0x40>)
 80126d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80126d2:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80126d4:	4807      	ldr	r0, [pc, #28]	@ (80126f4 <_sbrk+0x40>)
 80126d6:	4c08      	ldr	r4, [pc, #32]	@ (80126f8 <_sbrk+0x44>)
 80126d8:	6004      	str	r4, [r0, #0]
 80126da:	e7f2      	b.n	80126c2 <_sbrk+0xe>
    errno = ENOMEM;
 80126dc:	f01b fec4 	bl	802e468 <__errno>
 80126e0:	230c      	movs	r3, #12
 80126e2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80126e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80126e8:	e7f3      	b.n	80126d2 <_sbrk+0x1e>
 80126ea:	bf00      	nop
 80126ec:	20020000 	.word	0x20020000
 80126f0:	00000800 	.word	0x00000800
 80126f4:	20000a7c 	.word	0x20000a7c
 80126f8:	2001a2a8 	.word	0x2001a2a8

080126fc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80126fc:	4a03      	ldr	r2, [pc, #12]	@ (801270c <SystemInit+0x10>)
 80126fe:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8012702:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8012706:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 801270a:	4770      	bx	lr
 801270c:	e000ed00 	.word	0xe000ed00

08012710 <Reset_Handler>:
 8012710:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8012748 <LoopFillZerobss+0xe>
 8012714:	f7ff fff2 	bl	80126fc <SystemInit>
 8012718:	480c      	ldr	r0, [pc, #48]	@ (801274c <LoopFillZerobss+0x12>)
 801271a:	490d      	ldr	r1, [pc, #52]	@ (8012750 <LoopFillZerobss+0x16>)
 801271c:	4a0d      	ldr	r2, [pc, #52]	@ (8012754 <LoopFillZerobss+0x1a>)
 801271e:	2300      	movs	r3, #0
 8012720:	e002      	b.n	8012728 <LoopCopyDataInit>

08012722 <CopyDataInit>:
 8012722:	58d4      	ldr	r4, [r2, r3]
 8012724:	50c4      	str	r4, [r0, r3]
 8012726:	3304      	adds	r3, #4

08012728 <LoopCopyDataInit>:
 8012728:	18c4      	adds	r4, r0, r3
 801272a:	428c      	cmp	r4, r1
 801272c:	d3f9      	bcc.n	8012722 <CopyDataInit>
 801272e:	4a0a      	ldr	r2, [pc, #40]	@ (8012758 <LoopFillZerobss+0x1e>)
 8012730:	4c0a      	ldr	r4, [pc, #40]	@ (801275c <LoopFillZerobss+0x22>)
 8012732:	2300      	movs	r3, #0
 8012734:	e001      	b.n	801273a <LoopFillZerobss>

08012736 <FillZerobss>:
 8012736:	6013      	str	r3, [r2, #0]
 8012738:	3204      	adds	r2, #4

0801273a <LoopFillZerobss>:
 801273a:	42a2      	cmp	r2, r4
 801273c:	d3fb      	bcc.n	8012736 <FillZerobss>
 801273e:	f01b fea1 	bl	802e484 <__libc_init_array>
 8012742:	f7ff fe31 	bl	80123a8 <main>
 8012746:	4770      	bx	lr
 8012748:	20020000 	.word	0x20020000
 801274c:	20000000 	.word	0x20000000
 8012750:	20000870 	.word	0x20000870
 8012754:	0803cc14 	.word	0x0803cc14
 8012758:	20000870 	.word	0x20000870
 801275c:	2001a2a8 	.word	0x2001a2a8

08012760 <ADC_IRQHandler>:
 8012760:	e7fe      	b.n	8012760 <ADC_IRQHandler>

08012762 <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8012762:	b538      	push	{r3, r4, r5, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8012764:	880b      	ldrh	r3, [r1, #0]
 8012766:	2b05      	cmp	r3, #5
 8012768:	d001      	beq.n	801276e <eMBFuncReadCoils+0xc>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801276a:	2003      	movs	r0, #3
    }
    return eStatus;
}
 801276c:	bd38      	pop	{r3, r4, r5, pc}
 801276e:	460c      	mov	r4, r1
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8012770:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8012772:	7881      	ldrb	r1, [r0, #2]
 8012774:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8012778:	3101      	adds	r1, #1
 801277a:	b289      	uxth	r1, r1
        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 801277c:	78c3      	ldrb	r3, [r0, #3]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 801277e:	7902      	ldrb	r2, [r0, #4]
 8012780:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
        if( ( usCoilCount >= 1 ) &&
 8012784:	1e53      	subs	r3, r2, #1
 8012786:	b29b      	uxth	r3, r3
 8012788:	f240 7cce 	movw	ip, #1998	@ 0x7ce
 801278c:	4563      	cmp	r3, ip
 801278e:	d820      	bhi.n	80127d2 <eMBFuncReadCoils+0x70>
            *usLen = MB_PDU_FUNC_OFF;
 8012790:	2300      	movs	r3, #0
 8012792:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 8012794:	2301      	movs	r3, #1
 8012796:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 8012798:	8823      	ldrh	r3, [r4, #0]
 801279a:	3301      	adds	r3, #1
 801279c:	8023      	strh	r3, [r4, #0]
            if( ( usCoilCount & 0x0007 ) != 0 )
 801279e:	f012 0f07 	tst.w	r2, #7
 80127a2:	d010      	beq.n	80127c6 <eMBFuncReadCoils+0x64>
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 80127a4:	f3c2 03c7 	ubfx	r3, r2, #3, #8
 80127a8:	3301      	adds	r3, #1
 80127aa:	b2dd      	uxtb	r5, r3
            *pucFrameCur++ = ucNBytes;
 80127ac:	7045      	strb	r5, [r0, #1]
            *usLen += 1;
 80127ae:	8823      	ldrh	r3, [r4, #0]
 80127b0:	3301      	adds	r3, #1
 80127b2:	8023      	strh	r3, [r4, #0]
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 80127b4:	2300      	movs	r3, #0
 80127b6:	3002      	adds	r0, #2
 80127b8:	f7ff fb70 	bl	8011e9c <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 80127bc:	b930      	cbnz	r0, 80127cc <eMBFuncReadCoils+0x6a>
                *usLen += ucNBytes;;
 80127be:	8823      	ldrh	r3, [r4, #0]
 80127c0:	442b      	add	r3, r5
 80127c2:	8023      	strh	r3, [r4, #0]
 80127c4:	e7d2      	b.n	801276c <eMBFuncReadCoils+0xa>
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 80127c6:	f3c2 05c7 	ubfx	r5, r2, #3, #8
 80127ca:	e7ef      	b.n	80127ac <eMBFuncReadCoils+0x4a>
                eStatus = prveMBError2Exception( eRegStatus );
 80127cc:	f000 f9f0 	bl	8012bb0 <prveMBError2Exception>
 80127d0:	e7cc      	b.n	801276c <eMBFuncReadCoils+0xa>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80127d2:	2003      	movs	r0, #3
 80127d4:	e7ca      	b.n	801276c <eMBFuncReadCoils+0xa>

080127d6 <eMBFuncWriteCoil>:
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80127d6:	880b      	ldrh	r3, [r1, #0]
 80127d8:	2b05      	cmp	r3, #5
 80127da:	d001      	beq.n	80127e0 <eMBFuncWriteCoil+0xa>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80127dc:	2003      	movs	r0, #3
 80127de:	4770      	bx	lr
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 80127e0:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 80127e2:	7881      	ldrb	r1, [r0, #2]
 80127e4:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 80127e8:	3101      	adds	r1, #1
 80127ea:	b289      	uxth	r1, r1
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 80127ec:	7903      	ldrb	r3, [r0, #4]
 80127ee:	b9f3      	cbnz	r3, 801282e <eMBFuncWriteCoil+0x58>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 80127f0:	78c2      	ldrb	r2, [r0, #3]
 80127f2:	1e53      	subs	r3, r2, #1
 80127f4:	b2db      	uxtb	r3, r3
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 80127f6:	2bfd      	cmp	r3, #253	@ 0xfd
 80127f8:	d91b      	bls.n	8012832 <eMBFuncWriteCoil+0x5c>
{
 80127fa:	b500      	push	{lr}
 80127fc:	b083      	sub	sp, #12
            ucBuf[1] = 0;
 80127fe:	2300      	movs	r3, #0
 8012800:	f88d 3005 	strb.w	r3, [sp, #5]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8012804:	2aff      	cmp	r2, #255	@ 0xff
 8012806:	d00b      	beq.n	8012820 <eMBFuncWriteCoil+0x4a>
                ucBuf[0] = 0;
 8012808:	2300      	movs	r3, #0
 801280a:	f88d 3004 	strb.w	r3, [sp, #4]
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 801280e:	2301      	movs	r3, #1
 8012810:	461a      	mov	r2, r3
 8012812:	a801      	add	r0, sp, #4
 8012814:	f7ff fb42 	bl	8011e9c <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 8012818:	b930      	cbnz	r0, 8012828 <eMBFuncWriteCoil+0x52>
    }
    return eStatus;
}
 801281a:	b003      	add	sp, #12
 801281c:	f85d fb04 	ldr.w	pc, [sp], #4
                ucBuf[0] = 1;
 8012820:	2301      	movs	r3, #1
 8012822:	f88d 3004 	strb.w	r3, [sp, #4]
 8012826:	e7f2      	b.n	801280e <eMBFuncWriteCoil+0x38>
                eStatus = prveMBError2Exception( eRegStatus );
 8012828:	f000 f9c2 	bl	8012bb0 <prveMBError2Exception>
 801282c:	e7f5      	b.n	801281a <eMBFuncWriteCoil+0x44>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801282e:	2003      	movs	r0, #3
 8012830:	4770      	bx	lr
 8012832:	2003      	movs	r0, #3
}
 8012834:	4770      	bx	lr

08012836 <eMBFuncWriteMultipleCoils>:
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8012836:	880b      	ldrh	r3, [r1, #0]
 8012838:	2b05      	cmp	r3, #5
 801283a:	d92d      	bls.n	8012898 <eMBFuncWriteMultipleCoils+0x62>
{
 801283c:	b510      	push	{r4, lr}
 801283e:	460c      	mov	r4, r1
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8012840:	7842      	ldrb	r2, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8012842:	7883      	ldrb	r3, [r0, #2]
 8012844:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        usRegAddress++;
 8012848:	3301      	adds	r3, #1
 801284a:	b299      	uxth	r1, r3

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 801284c:	78c2      	ldrb	r2, [r0, #3]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 801284e:	7903      	ldrb	r3, [r0, #4]
 8012850:	ea43 2202 	orr.w	r2, r3, r2, lsl #8

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8012854:	f890 e005 	ldrb.w	lr, [r0, #5]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8012858:	f013 0f07 	tst.w	r3, #7
 801285c:	d00e      	beq.n	801287c <eMBFuncWriteMultipleCoils+0x46>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 801285e:	f3c2 0cc7 	ubfx	ip, r2, #3, #8
 8012862:	f10c 0c01 	add.w	ip, ip, #1
 8012866:	fa5f fc8c 	uxtb.w	ip, ip
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
        }

        if( ( usCoilCnt >= 1 ) &&
 801286a:	1e53      	subs	r3, r2, #1
 801286c:	b29b      	uxth	r3, r3
 801286e:	f5b3 6ff6 	cmp.w	r3, #1968	@ 0x7b0
 8012872:	d213      	bcs.n	801289c <eMBFuncWriteMultipleCoils+0x66>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 8012874:	45f4      	cmp	ip, lr
 8012876:	d004      	beq.n	8012882 <eMBFuncWriteMultipleCoils+0x4c>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012878:	2003      	movs	r0, #3
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 801287a:	bd10      	pop	{r4, pc}
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 801287c:	f3c2 0cc7 	ubfx	ip, r2, #3, #8
 8012880:	e7f3      	b.n	801286a <eMBFuncWriteMultipleCoils+0x34>
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8012882:	2301      	movs	r3, #1
 8012884:	3006      	adds	r0, #6
 8012886:	f7ff fb09 	bl	8011e9c <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 801288a:	b910      	cbnz	r0, 8012892 <eMBFuncWriteMultipleCoils+0x5c>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 801288c:	2305      	movs	r3, #5
 801288e:	8023      	strh	r3, [r4, #0]
 8012890:	e7f3      	b.n	801287a <eMBFuncWriteMultipleCoils+0x44>
                eStatus = prveMBError2Exception( eRegStatus );
 8012892:	f000 f98d 	bl	8012bb0 <prveMBError2Exception>
 8012896:	e7f0      	b.n	801287a <eMBFuncWriteMultipleCoils+0x44>
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012898:	2003      	movs	r0, #3
}
 801289a:	4770      	bx	lr
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801289c:	2003      	movs	r0, #3
 801289e:	e7ec      	b.n	801287a <eMBFuncWriteMultipleCoils+0x44>

080128a0 <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 80128a0:	b538      	push	{r3, r4, r5, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80128a2:	880b      	ldrh	r3, [r1, #0]
 80128a4:	2b05      	cmp	r3, #5
 80128a6:	d001      	beq.n	80128ac <eMBFuncReadDiscreteInputs+0xc>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80128a8:	2003      	movs	r0, #3
    }
    return eStatus;
}
 80128aa:	bd38      	pop	{r3, r4, r5, pc}
 80128ac:	460c      	mov	r4, r1
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80128ae:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80128b0:	7881      	ldrb	r1, [r0, #2]
 80128b2:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 80128b6:	3101      	adds	r1, #1
 80128b8:	b289      	uxth	r1, r1
        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 80128ba:	78c3      	ldrb	r3, [r0, #3]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 80128bc:	7902      	ldrb	r2, [r0, #4]
 80128be:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
        if( ( usDiscreteCnt >= 1 ) &&
 80128c2:	1e53      	subs	r3, r2, #1
 80128c4:	b29b      	uxth	r3, r3
 80128c6:	f240 7cce 	movw	ip, #1998	@ 0x7ce
 80128ca:	4563      	cmp	r3, ip
 80128cc:	d81f      	bhi.n	801290e <eMBFuncReadDiscreteInputs+0x6e>
            *usLen = MB_PDU_FUNC_OFF;
 80128ce:	2300      	movs	r3, #0
 80128d0:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 80128d2:	2302      	movs	r3, #2
 80128d4:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 80128d6:	8823      	ldrh	r3, [r4, #0]
 80128d8:	3301      	adds	r3, #1
 80128da:	8023      	strh	r3, [r4, #0]
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 80128dc:	f012 0f07 	tst.w	r2, #7
 80128e0:	d00f      	beq.n	8012902 <eMBFuncReadDiscreteInputs+0x62>
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 80128e2:	f3c2 03c7 	ubfx	r3, r2, #3, #8
 80128e6:	3301      	adds	r3, #1
 80128e8:	b2dd      	uxtb	r5, r3
            *pucFrameCur++ = ucNBytes;
 80128ea:	7045      	strb	r5, [r0, #1]
            *usLen += 1;
 80128ec:	8823      	ldrh	r3, [r4, #0]
 80128ee:	3301      	adds	r3, #1
 80128f0:	8023      	strh	r3, [r4, #0]
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 80128f2:	3002      	adds	r0, #2
 80128f4:	f7ff faac 	bl	8011e50 <eMBRegDiscreteCB>
            if( eRegStatus != MB_ENOERR )
 80128f8:	b930      	cbnz	r0, 8012908 <eMBFuncReadDiscreteInputs+0x68>
                *usLen += ucNBytes;;
 80128fa:	8823      	ldrh	r3, [r4, #0]
 80128fc:	442b      	add	r3, r5
 80128fe:	8023      	strh	r3, [r4, #0]
 8012900:	e7d3      	b.n	80128aa <eMBFuncReadDiscreteInputs+0xa>
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 8012902:	f3c2 05c7 	ubfx	r5, r2, #3, #8
 8012906:	e7f0      	b.n	80128ea <eMBFuncReadDiscreteInputs+0x4a>
                eStatus = prveMBError2Exception( eRegStatus );
 8012908:	f000 f952 	bl	8012bb0 <prveMBError2Exception>
 801290c:	e7cd      	b.n	80128aa <eMBFuncReadDiscreteInputs+0xa>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801290e:	2003      	movs	r0, #3
 8012910:	e7cb      	b.n	80128aa <eMBFuncReadDiscreteInputs+0xa>

08012912 <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8012912:	b508      	push	{r3, lr}
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8012914:	880b      	ldrh	r3, [r1, #0]
 8012916:	2b05      	cmp	r3, #5
 8012918:	d001      	beq.n	801291e <eMBFuncWriteHoldingRegister+0xc>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801291a:	2003      	movs	r0, #3
    }
    return eStatus;
}
 801291c:	bd08      	pop	{r3, pc}
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 801291e:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8012920:	7881      	ldrb	r1, [r0, #2]
 8012922:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8012926:	3101      	adds	r1, #1
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8012928:	2301      	movs	r3, #1
 801292a:	461a      	mov	r2, r3
 801292c:	b289      	uxth	r1, r1
 801292e:	3003      	adds	r0, #3
 8012930:	f7ff fb05 	bl	8011f3e <eMBRegHoldingCB>
        if( eRegStatus != MB_ENOERR )
 8012934:	2800      	cmp	r0, #0
 8012936:	d0f1      	beq.n	801291c <eMBFuncWriteHoldingRegister+0xa>
            eStatus = prveMBError2Exception( eRegStatus );
 8012938:	f000 f93a 	bl	8012bb0 <prveMBError2Exception>
 801293c:	e7ee      	b.n	801291c <eMBFuncWriteHoldingRegister+0xa>

0801293e <eMBFuncWriteMultipleHoldingRegister>:
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 801293e:	880b      	ldrh	r3, [r1, #0]
 8012940:	2b05      	cmp	r3, #5
 8012942:	d922      	bls.n	801298a <eMBFuncWriteMultipleHoldingRegister+0x4c>
{
 8012944:	b510      	push	{r4, lr}
 8012946:	460c      	mov	r4, r1
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8012948:	7842      	ldrb	r2, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 801294a:	7883      	ldrb	r3, [r0, #2]
 801294c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        usRegAddress++;
 8012950:	3301      	adds	r3, #1
 8012952:	b299      	uxth	r1, r3

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 8012954:	78c3      	ldrb	r3, [r0, #3]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 8012956:	7902      	ldrb	r2, [r0, #4]
 8012958:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 801295c:	f890 c005 	ldrb.w	ip, [r0, #5]

        if( ( usRegCount >= 1 ) &&
 8012960:	1e53      	subs	r3, r2, #1
 8012962:	b29b      	uxth	r3, r3
 8012964:	2b77      	cmp	r3, #119	@ 0x77
 8012966:	d812      	bhi.n	801298e <eMBFuncWriteMultipleHoldingRegister+0x50>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 8012968:	0053      	lsls	r3, r2, #1
 801296a:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 801296c:	4563      	cmp	r3, ip
 801296e:	d001      	beq.n	8012974 <eMBFuncWriteMultipleHoldingRegister+0x36>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012970:	2003      	movs	r0, #3
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8012972:	bd10      	pop	{r4, pc}
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8012974:	2301      	movs	r3, #1
 8012976:	3006      	adds	r0, #6
 8012978:	f7ff fae1 	bl	8011f3e <eMBRegHoldingCB>
            if( eRegStatus != MB_ENOERR )
 801297c:	b910      	cbnz	r0, 8012984 <eMBFuncWriteMultipleHoldingRegister+0x46>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 801297e:	2305      	movs	r3, #5
 8012980:	8023      	strh	r3, [r4, #0]
 8012982:	e7f6      	b.n	8012972 <eMBFuncWriteMultipleHoldingRegister+0x34>
                eStatus = prveMBError2Exception( eRegStatus );
 8012984:	f000 f914 	bl	8012bb0 <prveMBError2Exception>
 8012988:	e7f3      	b.n	8012972 <eMBFuncWriteMultipleHoldingRegister+0x34>
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801298a:	2003      	movs	r0, #3
}
 801298c:	4770      	bx	lr
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801298e:	2003      	movs	r0, #3
 8012990:	e7ef      	b.n	8012972 <eMBFuncWriteMultipleHoldingRegister+0x34>

08012992 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8012992:	b538      	push	{r3, r4, r5, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8012994:	880b      	ldrh	r3, [r1, #0]
 8012996:	2b05      	cmp	r3, #5
 8012998:	d001      	beq.n	801299e <eMBFuncReadHoldingRegister+0xc>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801299a:	2003      	movs	r0, #3
    }
    return eStatus;
}
 801299c:	bd38      	pop	{r3, r4, r5, pc}
 801299e:	4602      	mov	r2, r0
 80129a0:	460c      	mov	r4, r1
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80129a2:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80129a4:	7881      	ldrb	r1, [r0, #2]
 80129a6:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 80129aa:	3101      	adds	r1, #1
 80129ac:	b289      	uxth	r1, r1
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 80129ae:	7905      	ldrb	r5, [r0, #4]
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 80129b0:	1e6b      	subs	r3, r5, #1
 80129b2:	b29b      	uxth	r3, r3
 80129b4:	2b7c      	cmp	r3, #124	@ 0x7c
 80129b6:	d901      	bls.n	80129bc <eMBFuncReadHoldingRegister+0x2a>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80129b8:	2003      	movs	r0, #3
 80129ba:	e7ef      	b.n	801299c <eMBFuncReadHoldingRegister+0xa>
            *usLen = MB_PDU_FUNC_OFF;
 80129bc:	2300      	movs	r3, #0
 80129be:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 80129c0:	f04f 0c03 	mov.w	ip, #3
 80129c4:	f800 cb02 	strb.w	ip, [r0], #2
            *usLen += 1;
 80129c8:	f8b4 c000 	ldrh.w	ip, [r4]
 80129cc:	f10c 0c01 	add.w	ip, ip, #1
 80129d0:	f8a4 c000 	strh.w	ip, [r4]
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 80129d4:	ea4f 0c45 	mov.w	ip, r5, lsl #1
 80129d8:	f882 c001 	strb.w	ip, [r2, #1]
            *usLen += 1;
 80129dc:	8822      	ldrh	r2, [r4, #0]
 80129de:	3201      	adds	r2, #1
 80129e0:	8022      	strh	r2, [r4, #0]
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 80129e2:	462a      	mov	r2, r5
 80129e4:	f7ff faab 	bl	8011f3e <eMBRegHoldingCB>
            if( eRegStatus != MB_ENOERR )
 80129e8:	b920      	cbnz	r0, 80129f4 <eMBFuncReadHoldingRegister+0x62>
                *usLen += usRegCount * 2;
 80129ea:	8823      	ldrh	r3, [r4, #0]
 80129ec:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80129f0:	8023      	strh	r3, [r4, #0]
 80129f2:	e7d3      	b.n	801299c <eMBFuncReadHoldingRegister+0xa>
                eStatus = prveMBError2Exception( eRegStatus );
 80129f4:	f000 f8dc 	bl	8012bb0 <prveMBError2Exception>
 80129f8:	e7d0      	b.n	801299c <eMBFuncReadHoldingRegister+0xa>

080129fa <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80129fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 80129fc:	880b      	ldrh	r3, [r1, #0]
 80129fe:	2b09      	cmp	r3, #9
 8012a00:	d943      	bls.n	8012a8a <eMBFuncReadWriteMultipleHoldingRegister+0x90>
 8012a02:	4604      	mov	r4, r0
 8012a04:	460d      	mov	r5, r1
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 8012a06:	7843      	ldrb	r3, [r0, #1]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8012a08:	7881      	ldrb	r1, [r0, #2]
 8012a0a:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegReadAddress++;
 8012a0e:	3101      	adds	r1, #1
 8012a10:	b28e      	uxth	r6, r1

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 8012a12:	78c3      	ldrb	r3, [r0, #3]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 8012a14:	7907      	ldrb	r7, [r0, #4]
 8012a16:	ea47 2703 	orr.w	r7, r7, r3, lsl #8

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 8012a1a:	7943      	ldrb	r3, [r0, #5]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 8012a1c:	7981      	ldrb	r1, [r0, #6]
 8012a1e:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegWriteAddress++;
 8012a22:	3101      	adds	r1, #1
 8012a24:	b289      	uxth	r1, r1

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8012a26:	79c3      	ldrb	r3, [r0, #7]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 8012a28:	7a02      	ldrb	r2, [r0, #8]
 8012a2a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 8012a2e:	7a40      	ldrb	r0, [r0, #9]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8012a30:	1e7b      	subs	r3, r7, #1
 8012a32:	b29b      	uxth	r3, r3
 8012a34:	2b7c      	cmp	r3, #124	@ 0x7c
 8012a36:	d82a      	bhi.n	8012a8e <eMBFuncReadWriteMultipleHoldingRegister+0x94>
 8012a38:	b35a      	cbz	r2, 8012a92 <eMBFuncReadWriteMultipleHoldingRegister+0x98>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8012a3a:	2a79      	cmp	r2, #121	@ 0x79
 8012a3c:	d82b      	bhi.n	8012a96 <eMBFuncReadWriteMultipleHoldingRegister+0x9c>
 8012a3e:	ebb0 0f42 	cmp.w	r0, r2, lsl #1
 8012a42:	d001      	beq.n	8012a48 <eMBFuncReadWriteMultipleHoldingRegister+0x4e>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012a44:	2003      	movs	r0, #3
 8012a46:	e021      	b.n	8012a8c <eMBFuncReadWriteMultipleHoldingRegister+0x92>
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 8012a48:	2301      	movs	r3, #1
 8012a4a:	f104 000a 	add.w	r0, r4, #10
 8012a4e:	f7ff fa76 	bl	8011f3e <eMBRegHoldingCB>
 8012a52:	4603      	mov	r3, r0
            if( eRegStatus == MB_ENOERR )
 8012a54:	b9b0      	cbnz	r0, 8012a84 <eMBFuncReadWriteMultipleHoldingRegister+0x8a>
                *usLen = MB_PDU_FUNC_OFF;
 8012a56:	8028      	strh	r0, [r5, #0]
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 8012a58:	4620      	mov	r0, r4
 8012a5a:	2217      	movs	r2, #23
 8012a5c:	f800 2b02 	strb.w	r2, [r0], #2
                *usLen += 1;
 8012a60:	882a      	ldrh	r2, [r5, #0]
 8012a62:	3201      	adds	r2, #1
 8012a64:	802a      	strh	r2, [r5, #0]
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8012a66:	007a      	lsls	r2, r7, #1
 8012a68:	7062      	strb	r2, [r4, #1]
                *usLen += 1;
 8012a6a:	882a      	ldrh	r2, [r5, #0]
 8012a6c:	3201      	adds	r2, #1
 8012a6e:	802a      	strh	r2, [r5, #0]
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 8012a70:	463a      	mov	r2, r7
 8012a72:	4631      	mov	r1, r6
 8012a74:	f7ff fa63 	bl	8011f3e <eMBRegHoldingCB>
                if( eRegStatus == MB_ENOERR )
 8012a78:	b920      	cbnz	r0, 8012a84 <eMBFuncReadWriteMultipleHoldingRegister+0x8a>
                    *usLen += 2 * usRegReadCount;
 8012a7a:	882b      	ldrh	r3, [r5, #0]
 8012a7c:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8012a80:	802b      	strh	r3, [r5, #0]
            if( eRegStatus != MB_ENOERR )
 8012a82:	e003      	b.n	8012a8c <eMBFuncReadWriteMultipleHoldingRegister+0x92>
                eStatus = prveMBError2Exception( eRegStatus );
 8012a84:	f000 f894 	bl	8012bb0 <prveMBError2Exception>
 8012a88:	e000      	b.n	8012a8c <eMBFuncReadWriteMultipleHoldingRegister+0x92>
    eMBException    eStatus = MB_EX_NONE;
 8012a8a:	2000      	movs	r0, #0
        }
    }
    return eStatus;
}
 8012a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012a8e:	2003      	movs	r0, #3
 8012a90:	e7fc      	b.n	8012a8c <eMBFuncReadWriteMultipleHoldingRegister+0x92>
 8012a92:	2003      	movs	r0, #3
 8012a94:	e7fa      	b.n	8012a8c <eMBFuncReadWriteMultipleHoldingRegister+0x92>
 8012a96:	2003      	movs	r0, #3
 8012a98:	e7f8      	b.n	8012a8c <eMBFuncReadWriteMultipleHoldingRegister+0x92>

08012a9a <eMBFuncReadInputRegister>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8012a9a:	880a      	ldrh	r2, [r1, #0]
 8012a9c:	2a05      	cmp	r2, #5
 8012a9e:	d001      	beq.n	8012aa4 <eMBFuncReadInputRegister+0xa>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012aa0:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8012aa2:	4770      	bx	lr
{
 8012aa4:	b538      	push	{r3, r4, r5, lr}
 8012aa6:	4603      	mov	r3, r0
 8012aa8:	460c      	mov	r4, r1
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8012aaa:	7842      	ldrb	r2, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8012aac:	7881      	ldrb	r1, [r0, #2]
 8012aae:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
        usRegAddress++;
 8012ab2:	3101      	adds	r1, #1
 8012ab4:	b289      	uxth	r1, r1
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8012ab6:	78c2      	ldrb	r2, [r0, #3]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8012ab8:	7905      	ldrb	r5, [r0, #4]
 8012aba:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8012abe:	1e6a      	subs	r2, r5, #1
 8012ac0:	b292      	uxth	r2, r2
        if( ( usRegCount >= 1 )
 8012ac2:	2a7b      	cmp	r2, #123	@ 0x7b
 8012ac4:	d901      	bls.n	8012aca <eMBFuncReadInputRegister+0x30>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012ac6:	2003      	movs	r0, #3
}
 8012ac8:	bd38      	pop	{r3, r4, r5, pc}
            *usLen = MB_PDU_FUNC_OFF;
 8012aca:	2200      	movs	r2, #0
 8012acc:	8022      	strh	r2, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 8012ace:	2204      	movs	r2, #4
 8012ad0:	f800 2b02 	strb.w	r2, [r0], #2
            *usLen += 1;
 8012ad4:	8822      	ldrh	r2, [r4, #0]
 8012ad6:	3201      	adds	r2, #1
 8012ad8:	8022      	strh	r2, [r4, #0]
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 8012ada:	006a      	lsls	r2, r5, #1
 8012adc:	705a      	strb	r2, [r3, #1]
            *usLen += 1;
 8012ade:	8823      	ldrh	r3, [r4, #0]
 8012ae0:	3301      	adds	r3, #1
 8012ae2:	8023      	strh	r3, [r4, #0]
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 8012ae4:	462a      	mov	r2, r5
 8012ae6:	f7ff fa28 	bl	8011f3a <eMBRegInputCB>
            if( eRegStatus != MB_ENOERR )
 8012aea:	b920      	cbnz	r0, 8012af6 <eMBFuncReadInputRegister+0x5c>
                *usLen += usRegCount * 2;
 8012aec:	8823      	ldrh	r3, [r4, #0]
 8012aee:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8012af2:	8023      	strh	r3, [r4, #0]
 8012af4:	e7e8      	b.n	8012ac8 <eMBFuncReadInputRegister+0x2e>
                eStatus = prveMBError2Exception( eRegStatus );
 8012af6:	f000 f85b 	bl	8012bb0 <prveMBError2Exception>
 8012afa:	e7e5      	b.n	8012ac8 <eMBFuncReadInputRegister+0x2e>

08012afc <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8012afc:	b538      	push	{r3, r4, r5, lr}
 8012afe:	460d      	mov	r5, r1
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8012b00:	4b05      	ldr	r3, [pc, #20]	@ (8012b18 <eMBFuncReportSlaveID+0x1c>)
 8012b02:	881c      	ldrh	r4, [r3, #0]
 8012b04:	4622      	mov	r2, r4
 8012b06:	4905      	ldr	r1, [pc, #20]	@ (8012b1c <eMBFuncReportSlaveID+0x20>)
 8012b08:	3001      	adds	r0, #1
 8012b0a:	f01b fce5 	bl	802e4d8 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 8012b0e:	3401      	adds	r4, #1
 8012b10:	802c      	strh	r4, [r5, #0]
    return MB_EX_NONE;
}
 8012b12:	2000      	movs	r0, #0
 8012b14:	bd38      	pop	{r3, r4, r5, pc}
 8012b16:	bf00      	nop
 8012b18:	20000a80 	.word	0x20000a80
 8012b1c:	20000a84 	.word	0x20000a84

08012b20 <xMBUtilSetBits>:

/* ----------------------- Start implementation -----------------------------*/
void
xMBUtilSetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits,
                UCHAR ucValue )
{
 8012b20:	b510      	push	{r4, lr}
    USHORT          usMask;
    USHORT          usByteOffset;
    USHORT          usNPreBits;
    USHORT          usValue = ucValue;

    assert( ucNBits <= 8 );
 8012b22:	2a08      	cmp	r2, #8
 8012b24:	d823      	bhi.n	8012b6e <xMBUtilSetBits+0x4e>
    assert( ( size_t )BITS_UCHAR == sizeof( UCHAR ) * 8 );

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 8012b26:	ea4f 0ed1 	mov.w	lr, r1, lsr #3

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;
 8012b2a:	f001 0407 	and.w	r4, r1, #7
 8012b2e:	fa03 f404 	lsl.w	r4, r3, r4

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8012b32:	f04f 0c01 	mov.w	ip, #1
 8012b36:	fa0c f202 	lsl.w	r2, ip, r2
 8012b3a:	b292      	uxth	r2, r2
 8012b3c:	3a01      	subs	r2, #1
 8012b3e:	b292      	uxth	r2, r2
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;
 8012b40:	f001 0107 	and.w	r1, r1, #7
 8012b44:	fa02 f101 	lsl.w	r1, r2, r1

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 8012b48:	f810 300e 	ldrb.w	r3, [r0, lr]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8012b4c:	eb0e 020c 	add.w	r2, lr, ip
 8012b50:	f810 c002 	ldrb.w	ip, [r0, r2]
 8012b54:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8012b58:	b21b      	sxth	r3, r3

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 8012b5a:	ea23 0301 	bic.w	r3, r3, r1
 8012b5e:	b21b      	sxth	r3, r3
 8012b60:	4323      	orrs	r3, r4

    /* move bits back into storage */
    ucByteBuf[usByteOffset] = ( UCHAR )( usWordBuf & 0xFF );
 8012b62:	f800 300e 	strb.w	r3, [r0, lr]
    ucByteBuf[usByteOffset + 1] = ( UCHAR )( usWordBuf >> BITS_UCHAR );
 8012b66:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8012b6a:	5483      	strb	r3, [r0, r2]
}
 8012b6c:	bd10      	pop	{r4, pc}
    assert( ucNBits <= 8 );
 8012b6e:	4b03      	ldr	r3, [pc, #12]	@ (8012b7c <xMBUtilSetBits+0x5c>)
 8012b70:	4a03      	ldr	r2, [pc, #12]	@ (8012b80 <xMBUtilSetBits+0x60>)
 8012b72:	2137      	movs	r1, #55	@ 0x37
 8012b74:	4803      	ldr	r0, [pc, #12]	@ (8012b84 <xMBUtilSetBits+0x64>)
 8012b76:	f017 fd21 	bl	802a5bc <__assert_func>
 8012b7a:	bf00      	nop
 8012b7c:	08036bb8 	.word	0x08036bb8
 8012b80:	08036c10 	.word	0x08036c10
 8012b84:	08036bc8 	.word	0x08036bc8

08012b88 <xMBUtilGetBits>:
    USHORT          usByteOffset;
    USHORT          usNPreBits;

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 8012b88:	ea4f 0cd1 	mov.w	ip, r1, lsr #3

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8012b8c:	2301      	movs	r3, #1
 8012b8e:	4093      	lsls	r3, r2
 8012b90:	b29b      	uxth	r3, r3
 8012b92:	3b01      	subs	r3, #1

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 8012b94:	f810 200c 	ldrb.w	r2, [r0, ip]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8012b98:	4460      	add	r0, ip
 8012b9a:	7840      	ldrb	r0, [r0, #1]
 8012b9c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8

    /* throw away unneeded bits. */
    usWordBuf >>= usNPreBits;
 8012ba0:	f001 0107 	and.w	r1, r1, #7
 8012ba4:	410a      	asrs	r2, r1
 8012ba6:	b292      	uxth	r2, r2

    /* mask away bits above the requested bitfield. */
    usWordBuf &= usMask;
 8012ba8:	ea03 0002 	and.w	r0, r3, r2

    return ( UCHAR ) usWordBuf;
}
 8012bac:	b2c0      	uxtb	r0, r0
 8012bae:	4770      	bx	lr

08012bb0 <prveMBError2Exception>:
eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
    eMBException    eStatus;

    switch ( eErrorCode )
 8012bb0:	2801      	cmp	r0, #1
 8012bb2:	d005      	beq.n	8012bc0 <prveMBError2Exception+0x10>
 8012bb4:	2807      	cmp	r0, #7
 8012bb6:	d005      	beq.n	8012bc4 <prveMBError2Exception+0x14>
 8012bb8:	b108      	cbz	r0, 8012bbe <prveMBError2Exception+0xe>
        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
            break;

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 8012bba:	2004      	movs	r0, #4
            break;
    }

    return eStatus;
}
 8012bbc:	4770      	bx	lr
 8012bbe:	4770      	bx	lr
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 8012bc0:	2002      	movs	r0, #2
 8012bc2:	4770      	bx	lr
            eStatus = MB_EX_SLAVE_BUSY;
 8012bc4:	2006      	movs	r0, #6
 8012bc6:	4770      	bx	lr

08012bc8 <eMBTCPInit>:
}

#if MB_TCP_ENABLED > 0
eMBErrorCode
eMBTCPInit( USHORT ucTCPPort )
{
 8012bc8:	b510      	push	{r4, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( ( eStatus = eMBTCPDoInit( ucTCPPort ) ) != MB_ENOERR )
 8012bca:	f000 f9ce 	bl	8012f6a <eMBTCPDoInit>
 8012bce:	4604      	mov	r4, r0
 8012bd0:	b120      	cbz	r0, 8012bdc <eMBTCPInit+0x14>
    {
        eMBState = STATE_DISABLED;
 8012bd2:	4b11      	ldr	r3, [pc, #68]	@ (8012c18 <eMBTCPInit+0x50>)
 8012bd4:	2201      	movs	r2, #1
 8012bd6:	701a      	strb	r2, [r3, #0]
        ucMBAddress = MB_TCP_PSEUDO_ADDRESS;
        eMBCurrentMode = MB_TCP;
        eMBState = STATE_DISABLED;
    }
    return eStatus;
}
 8012bd8:	4620      	mov	r0, r4
 8012bda:	bd10      	pop	{r4, pc}
    else if( !xMBPortEventInit(  ) )
 8012bdc:	f000 f8ca 	bl	8012d74 <xMBPortEventInit>
 8012be0:	b1c0      	cbz	r0, 8012c14 <eMBTCPInit+0x4c>
        pvMBFrameStartCur = eMBTCPStart;
 8012be2:	4b0e      	ldr	r3, [pc, #56]	@ (8012c1c <eMBTCPInit+0x54>)
 8012be4:	4a0e      	ldr	r2, [pc, #56]	@ (8012c20 <eMBTCPInit+0x58>)
 8012be6:	601a      	str	r2, [r3, #0]
        pvMBFrameStopCur = eMBTCPStop;
 8012be8:	4b0e      	ldr	r3, [pc, #56]	@ (8012c24 <eMBTCPInit+0x5c>)
 8012bea:	4a0f      	ldr	r2, [pc, #60]	@ (8012c28 <eMBTCPInit+0x60>)
 8012bec:	601a      	str	r2, [r3, #0]
        peMBFrameReceiveCur = eMBTCPReceive;
 8012bee:	4b0f      	ldr	r3, [pc, #60]	@ (8012c2c <eMBTCPInit+0x64>)
 8012bf0:	4a0f      	ldr	r2, [pc, #60]	@ (8012c30 <eMBTCPInit+0x68>)
 8012bf2:	601a      	str	r2, [r3, #0]
        peMBFrameSendCur = eMBTCPSend;
 8012bf4:	4b0f      	ldr	r3, [pc, #60]	@ (8012c34 <eMBTCPInit+0x6c>)
 8012bf6:	4a10      	ldr	r2, [pc, #64]	@ (8012c38 <eMBTCPInit+0x70>)
 8012bf8:	601a      	str	r2, [r3, #0]
        pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBTCPPortClose : NULL;
 8012bfa:	4b10      	ldr	r3, [pc, #64]	@ (8012c3c <eMBTCPInit+0x74>)
 8012bfc:	2200      	movs	r2, #0
 8012bfe:	601a      	str	r2, [r3, #0]
        ucMBAddress = MB_TCP_PSEUDO_ADDRESS;
 8012c00:	4b0f      	ldr	r3, [pc, #60]	@ (8012c40 <eMBTCPInit+0x78>)
 8012c02:	22ff      	movs	r2, #255	@ 0xff
 8012c04:	701a      	strb	r2, [r3, #0]
        eMBCurrentMode = MB_TCP;
 8012c06:	4b0f      	ldr	r3, [pc, #60]	@ (8012c44 <eMBTCPInit+0x7c>)
 8012c08:	2202      	movs	r2, #2
 8012c0a:	701a      	strb	r2, [r3, #0]
        eMBState = STATE_DISABLED;
 8012c0c:	4b02      	ldr	r3, [pc, #8]	@ (8012c18 <eMBTCPInit+0x50>)
 8012c0e:	2201      	movs	r2, #1
 8012c10:	701a      	strb	r2, [r3, #0]
 8012c12:	e7e1      	b.n	8012bd8 <eMBTCPInit+0x10>
        eStatus = MB_EPORTERR;
 8012c14:	2403      	movs	r4, #3
 8012c16:	e7df      	b.n	8012bd8 <eMBTCPInit+0x10>
 8012c18:	2000009c 	.word	0x2000009c
 8012c1c:	20000abc 	.word	0x20000abc
 8012c20:	08012f7b 	.word	0x08012f7b
 8012c24:	20000ab8 	.word	0x20000ab8
 8012c28:	08012f7d 	.word	0x08012f7d
 8012c2c:	20000ab4 	.word	0x20000ab4
 8012c30:	08012f85 	.word	0x08012f85
 8012c34:	20000ac0 	.word	0x20000ac0
 8012c38:	08012fc5 	.word	0x08012fc5
 8012c3c:	20000ab0 	.word	0x20000ab0
 8012c40:	20000ac5 	.word	0x20000ac5
 8012c44:	20000ac4 	.word	0x20000ac4

08012c48 <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 8012c48:	b508      	push	{r3, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( eMBState == STATE_DISABLED )
 8012c4a:	4b06      	ldr	r3, [pc, #24]	@ (8012c64 <eMBEnable+0x1c>)
 8012c4c:	781b      	ldrb	r3, [r3, #0]
 8012c4e:	2b01      	cmp	r3, #1
 8012c50:	d001      	beq.n	8012c56 <eMBEnable+0xe>
        pvMBFrameStartCur(  );
        eMBState = STATE_ENABLED;
    }
    else
    {
        eStatus = MB_EILLSTATE;
 8012c52:	2006      	movs	r0, #6
    }
    return eStatus;
}
 8012c54:	bd08      	pop	{r3, pc}
        pvMBFrameStartCur(  );
 8012c56:	4b04      	ldr	r3, [pc, #16]	@ (8012c68 <eMBEnable+0x20>)
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 8012c5c:	2000      	movs	r0, #0
 8012c5e:	4b01      	ldr	r3, [pc, #4]	@ (8012c64 <eMBEnable+0x1c>)
 8012c60:	7018      	strb	r0, [r3, #0]
 8012c62:	e7f7      	b.n	8012c54 <eMBEnable+0xc>
 8012c64:	2000009c 	.word	0x2000009c
 8012c68:	20000abc 	.word	0x20000abc

08012c6c <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 8012c6c:	b530      	push	{r4, r5, lr}
 8012c6e:	b083      	sub	sp, #12
    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 8012c70:	4b36      	ldr	r3, [pc, #216]	@ (8012d4c <eMBPoll+0xe0>)
 8012c72:	781c      	ldrb	r4, [r3, #0]
 8012c74:	2c00      	cmp	r4, #0
 8012c76:	d163      	bne.n	8012d40 <eMBPoll+0xd4>
        return MB_EILLSTATE;
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 8012c78:	f10d 0007 	add.w	r0, sp, #7
 8012c7c:	f000 f88e 	bl	8012d9c <xMBPortEventGet>
 8012c80:	2801      	cmp	r0, #1
 8012c82:	d002      	beq.n	8012c8a <eMBPoll+0x1e>
        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
}
 8012c84:	4620      	mov	r0, r4
 8012c86:	b003      	add	sp, #12
 8012c88:	bd30      	pop	{r4, r5, pc}
        switch ( eEvent )
 8012c8a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012c8e:	2b01      	cmp	r3, #1
 8012c90:	d014      	beq.n	8012cbc <eMBPoll+0x50>
 8012c92:	2b02      	cmp	r3, #2
 8012c94:	d1f6      	bne.n	8012c84 <eMBPoll+0x18>
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8012c96:	4b2e      	ldr	r3, [pc, #184]	@ (8012d50 <eMBPoll+0xe4>)
 8012c98:	6818      	ldr	r0, [r3, #0]
 8012c9a:	7801      	ldrb	r1, [r0, #0]
 8012c9c:	4b2d      	ldr	r3, [pc, #180]	@ (8012d54 <eMBPoll+0xe8>)
 8012c9e:	7019      	strb	r1, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 8012ca0:	4b2d      	ldr	r3, [pc, #180]	@ (8012d58 <eMBPoll+0xec>)
 8012ca2:	2201      	movs	r2, #1
 8012ca4:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	2b0f      	cmp	r3, #15
 8012caa:	dc25      	bgt.n	8012cf8 <eMBPoll+0x8c>
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 8012cac:	4a2b      	ldr	r2, [pc, #172]	@ (8012d5c <eMBPoll+0xf0>)
 8012cae:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8012cb2:	b30a      	cbz	r2, 8012cf8 <eMBPoll+0x8c>
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 8012cb4:	4291      	cmp	r1, r2
 8012cb6:	d017      	beq.n	8012ce8 <eMBPoll+0x7c>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8012cb8:	3301      	adds	r3, #1
 8012cba:	e7f5      	b.n	8012ca8 <eMBPoll+0x3c>
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8012cbc:	4b28      	ldr	r3, [pc, #160]	@ (8012d60 <eMBPoll+0xf4>)
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	4a28      	ldr	r2, [pc, #160]	@ (8012d64 <eMBPoll+0xf8>)
 8012cc2:	4923      	ldr	r1, [pc, #140]	@ (8012d50 <eMBPoll+0xe4>)
 8012cc4:	4828      	ldr	r0, [pc, #160]	@ (8012d68 <eMBPoll+0xfc>)
 8012cc6:	4798      	blx	r3
            if( eStatus == MB_ENOERR )
 8012cc8:	4605      	mov	r5, r0
 8012cca:	2800      	cmp	r0, #0
 8012ccc:	d1da      	bne.n	8012c84 <eMBPoll+0x18>
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 8012cce:	4b26      	ldr	r3, [pc, #152]	@ (8012d68 <eMBPoll+0xfc>)
 8012cd0:	781b      	ldrb	r3, [r3, #0]
 8012cd2:	4a26      	ldr	r2, [pc, #152]	@ (8012d6c <eMBPoll+0x100>)
 8012cd4:	7812      	ldrb	r2, [r2, #0]
 8012cd6:	4293      	cmp	r3, r2
 8012cd8:	d001      	beq.n	8012cde <eMBPoll+0x72>
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d132      	bne.n	8012d44 <eMBPoll+0xd8>
                    ( void )xMBPortEventPost( EV_EXECUTE );
 8012cde:	2002      	movs	r0, #2
 8012ce0:	f000 f850 	bl	8012d84 <xMBPortEventPost>
    return MB_ENOERR;
 8012ce4:	462c      	mov	r4, r5
 8012ce6:	e7cd      	b.n	8012c84 <eMBPoll+0x18>
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 8012ce8:	4a1c      	ldr	r2, [pc, #112]	@ (8012d5c <eMBPoll+0xf0>)
 8012cea:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012cee:	685b      	ldr	r3, [r3, #4]
 8012cf0:	491c      	ldr	r1, [pc, #112]	@ (8012d64 <eMBPoll+0xf8>)
 8012cf2:	4798      	blx	r3
 8012cf4:	4b18      	ldr	r3, [pc, #96]	@ (8012d58 <eMBPoll+0xec>)
 8012cf6:	7018      	strb	r0, [r3, #0]
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 8012cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8012d68 <eMBPoll+0xfc>)
 8012cfa:	781b      	ldrb	r3, [r3, #0]
 8012cfc:	b323      	cbz	r3, 8012d48 <eMBPoll+0xdc>
                if( eException != MB_EX_NONE )
 8012cfe:	4b16      	ldr	r3, [pc, #88]	@ (8012d58 <eMBPoll+0xec>)
 8012d00:	781b      	ldrb	r3, [r3, #0]
 8012d02:	b19b      	cbz	r3, 8012d2c <eMBPoll+0xc0>
                    usLength = 0;
 8012d04:	4a17      	ldr	r2, [pc, #92]	@ (8012d64 <eMBPoll+0xf8>)
 8012d06:	2100      	movs	r1, #0
 8012d08:	8011      	strh	r1, [r2, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 8012d0a:	4912      	ldr	r1, [pc, #72]	@ (8012d54 <eMBPoll+0xe8>)
 8012d0c:	7809      	ldrb	r1, [r1, #0]
 8012d0e:	4810      	ldr	r0, [pc, #64]	@ (8012d50 <eMBPoll+0xe4>)
 8012d10:	6805      	ldr	r5, [r0, #0]
 8012d12:	f04f 0c01 	mov.w	ip, #1
 8012d16:	f8a2 c000 	strh.w	ip, [r2]
 8012d1a:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8012d1e:	7029      	strb	r1, [r5, #0]
                    ucMBFrame[usLength++] = eException;
 8012d20:	6800      	ldr	r0, [r0, #0]
 8012d22:	8811      	ldrh	r1, [r2, #0]
 8012d24:	eb01 050c 	add.w	r5, r1, ip
 8012d28:	8015      	strh	r5, [r2, #0]
 8012d2a:	5443      	strb	r3, [r0, r1]
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 8012d2c:	4b10      	ldr	r3, [pc, #64]	@ (8012d70 <eMBPoll+0x104>)
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	4a0c      	ldr	r2, [pc, #48]	@ (8012d64 <eMBPoll+0xf8>)
 8012d32:	8812      	ldrh	r2, [r2, #0]
 8012d34:	4906      	ldr	r1, [pc, #24]	@ (8012d50 <eMBPoll+0xe4>)
 8012d36:	6809      	ldr	r1, [r1, #0]
 8012d38:	480c      	ldr	r0, [pc, #48]	@ (8012d6c <eMBPoll+0x100>)
 8012d3a:	7800      	ldrb	r0, [r0, #0]
 8012d3c:	4798      	blx	r3
 8012d3e:	e7a1      	b.n	8012c84 <eMBPoll+0x18>
        return MB_EILLSTATE;
 8012d40:	2406      	movs	r4, #6
 8012d42:	e79f      	b.n	8012c84 <eMBPoll+0x18>
    return MB_ENOERR;
 8012d44:	4604      	mov	r4, r0
 8012d46:	e79d      	b.n	8012c84 <eMBPoll+0x18>
 8012d48:	461c      	mov	r4, r3
 8012d4a:	e79b      	b.n	8012c84 <eMBPoll+0x18>
 8012d4c:	2000009c 	.word	0x2000009c
 8012d50:	20000aa8 	.word	0x20000aa8
 8012d54:	20000aa5 	.word	0x20000aa5
 8012d58:	20000aa4 	.word	0x20000aa4
 8012d5c:	2000001c 	.word	0x2000001c
 8012d60:	20000ab4 	.word	0x20000ab4
 8012d64:	20000aa6 	.word	0x20000aa6
 8012d68:	20000aac 	.word	0x20000aac
 8012d6c:	20000ac5 	.word	0x20000ac5
 8012d70:	20000ac0 	.word	0x20000ac0

08012d74 <xMBPortEventInit>:

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
    xEventInQueue = FALSE;
 8012d74:	4b02      	ldr	r3, [pc, #8]	@ (8012d80 <xMBPortEventInit+0xc>)
 8012d76:	2200      	movs	r2, #0
 8012d78:	701a      	strb	r2, [r3, #0]
    return TRUE;
}
 8012d7a:	2001      	movs	r0, #1
 8012d7c:	4770      	bx	lr
 8012d7e:	bf00      	nop
 8012d80:	20000ac6 	.word	0x20000ac6

08012d84 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
    xEventInQueue = TRUE;
 8012d84:	2301      	movs	r3, #1
 8012d86:	4a03      	ldr	r2, [pc, #12]	@ (8012d94 <xMBPortEventPost+0x10>)
 8012d88:	7013      	strb	r3, [r2, #0]
    eQueuedEvent = eEvent;
 8012d8a:	4a03      	ldr	r2, [pc, #12]	@ (8012d98 <xMBPortEventPost+0x14>)
 8012d8c:	7010      	strb	r0, [r2, #0]
    return TRUE;
}
 8012d8e:	4618      	mov	r0, r3
 8012d90:	4770      	bx	lr
 8012d92:	bf00      	nop
 8012d94:	20000ac6 	.word	0x20000ac6
 8012d98:	20000ac7 	.word	0x20000ac7

08012d9c <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 8012d9c:	4603      	mov	r3, r0
    BOOL            xEventHappened = FALSE;

    if( xEventInQueue )
 8012d9e:	4a05      	ldr	r2, [pc, #20]	@ (8012db4 <xMBPortEventGet+0x18>)
 8012da0:	7810      	ldrb	r0, [r2, #0]
 8012da2:	b130      	cbz	r0, 8012db2 <xMBPortEventGet+0x16>
    {
        *eEvent = eQueuedEvent;
 8012da4:	4a04      	ldr	r2, [pc, #16]	@ (8012db8 <xMBPortEventGet+0x1c>)
 8012da6:	7812      	ldrb	r2, [r2, #0]
 8012da8:	701a      	strb	r2, [r3, #0]
        xEventInQueue = FALSE;
 8012daa:	4b02      	ldr	r3, [pc, #8]	@ (8012db4 <xMBPortEventGet+0x18>)
 8012dac:	2200      	movs	r2, #0
 8012dae:	701a      	strb	r2, [r3, #0]
        xEventHappened = TRUE;
 8012db0:	2001      	movs	r0, #1
    }
    return xEventHappened;
}
 8012db2:	4770      	bx	lr
 8012db4:	20000ac6 	.word	0x20000ac6
 8012db8:	20000ac7 	.word	0x20000ac7

08012dbc <handler_mb_tcp>:


//mg_check_ip_acl(struct mg_str acl, struct mg_addr *remote_ip);
static void handler_mb_tcp(struct mg_connection *c, int ev, void *ev_data){

	if (ev == MG_EV_READ){
 8012dbc:	2907      	cmp	r1, #7
 8012dbe:	d000      	beq.n	8012dc2 <handler_mb_tcp+0x6>
 8012dc0:	4770      	bx	lr
static void handler_mb_tcp(struct mg_connection *c, int ev, void *ev_data){
 8012dc2:	b538      	push	{r3, r4, r5, lr}
 8012dc4:	4604      	mov	r4, r0
		if (mg_check_ip_acl(mg_acl, &c->rem) != 1){
 8012dc6:	4b1e      	ldr	r3, [pc, #120]	@ (8012e40 <handler_mb_tcp+0x84>)
 8012dc8:	f100 021c 	add.w	r2, r0, #28
 8012dcc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012dd0:	f013 fce4 	bl	802679c <mg_check_ip_acl>
 8012dd4:	2801      	cmp	r0, #1
 8012dd6:	d006      	beq.n	8012de6 <handler_mb_tcp+0x2a>
			c->is_closing = 1;
 8012dd8:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8012ddc:	f043 0320 	orr.w	r3, r3, #32
 8012de0:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
			}
		}else{
			c->is_closing = 1;
		}
	}
}
 8012de4:	bd38      	pop	{r3, r4, r5, pc}
		ucTCPRequestLen = r->len;
 8012de6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8012de8:	b293      	uxth	r3, r2
 8012dea:	4916      	ldr	r1, [pc, #88]	@ (8012e44 <handler_mb_tcp+0x88>)
 8012dec:	800b      	strh	r3, [r1, #0]
		if(ucTCPRequestLen>0){
 8012dee:	b933      	cbnz	r3, 8012dfe <handler_mb_tcp+0x42>
			c->is_closing = 1;
 8012df0:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8012df4:	f043 0320 	orr.w	r3, r3, #32
 8012df8:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
 8012dfc:	e7f2      	b.n	8012de4 <handler_mb_tcp+0x28>
			memcpy(ucTCPRequestFrame, r->buf, sizeof(uint8_t) * ucTCPRequestLen);
 8012dfe:	461a      	mov	r2, r3
 8012e00:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8012e02:	4811      	ldr	r0, [pc, #68]	@ (8012e48 <handler_mb_tcp+0x8c>)
 8012e04:	f01b fb68 	bl	802e4d8 <memcpy>
			xMBPortEventPost (EV_FRAME_RECEIVED);
 8012e08:	2001      	movs	r0, #1
 8012e0a:	f7ff ffbb 	bl	8012d84 <xMBPortEventPost>
			eMBPoll ();
 8012e0e:	f7ff ff2d 	bl	8012c6c <eMBPoll>
			eMBPoll ();
 8012e12:	f7ff ff2b 	bl	8012c6c <eMBPoll>
			if(bFrameSent){
 8012e16:	4b0d      	ldr	r3, [pc, #52]	@ (8012e4c <handler_mb_tcp+0x90>)
 8012e18:	781b      	ldrb	r3, [r3, #0]
 8012e1a:	b933      	cbnz	r3, 8012e2a <handler_mb_tcp+0x6e>
				c->is_closing = 1;
 8012e1c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8012e20:	f043 0320 	orr.w	r3, r3, #32
 8012e24:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
 8012e28:	e7dc      	b.n	8012de4 <handler_mb_tcp+0x28>
				bFrameSent = FALSE;
 8012e2a:	2500      	movs	r5, #0
 8012e2c:	4b07      	ldr	r3, [pc, #28]	@ (8012e4c <handler_mb_tcp+0x90>)
 8012e2e:	701d      	strb	r5, [r3, #0]
				mg_send(c, ucTCPResponseFrame, ucTCPResponseLen);
 8012e30:	4b07      	ldr	r3, [pc, #28]	@ (8012e50 <handler_mb_tcp+0x94>)
 8012e32:	881a      	ldrh	r2, [r3, #0]
 8012e34:	4907      	ldr	r1, [pc, #28]	@ (8012e54 <handler_mb_tcp+0x98>)
 8012e36:	4620      	mov	r0, r4
 8012e38:	f014 fdca 	bl	80279d0 <mg_send>
				r->len = 0;                  // Tell Mongoose we've consumed data
 8012e3c:	6425      	str	r5, [r4, #64]	@ 0x40
 8012e3e:	e7d1      	b.n	8012de4 <handler_mb_tcp+0x28>
 8012e40:	20000ac8 	.word	0x20000ac8
 8012e44:	200012d4 	.word	0x200012d4
 8012e48:	200012d8 	.word	0x200012d8
 8012e4c:	20000ad0 	.word	0x20000ad0
 8012e50:	20000ad2 	.word	0x20000ad2
 8012e54:	20000ad4 	.word	0x20000ad4

08012e58 <my_calloc>:
#define calloc(a, b) my_calloc(a, b)
#define free(a) vPortFree(a)
#define malloc(a) pvPortMalloc(a)

// Re-route calloc/free to the FreeRTOS's functions, don't use stdlib
static inline void *my_calloc(size_t cnt, size_t size) {
 8012e58:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8012e5a:	fb01 f400 	mul.w	r4, r1, r0
 8012e5e:	4620      	mov	r0, r4
 8012e60:	f008 f8b2 	bl	801afc8 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8012e64:	4605      	mov	r5, r0
 8012e66:	b118      	cbz	r0, 8012e70 <my_calloc+0x18>
 8012e68:	4622      	mov	r2, r4
 8012e6a:	2100      	movs	r1, #0
 8012e6c:	f01a f8f8 	bl	802d060 <memset>
  return p;
}
 8012e70:	4628      	mov	r0, r5
 8012e72:	bd38      	pop	{r3, r4, r5, pc}

08012e74 <init_mb_tcp>:



void init_mb_tcp(void * param){
 8012e74:	b530      	push	{r4, r5, lr}
 8012e76:	b083      	sub	sp, #12

	struct mg_mgr *mgr = (struct mg_mgr *)param;  // Event manager
	mg_listen(mgr, s_lsn, handler_mb_tcp, NULL);  // Create server connection
 8012e78:	2300      	movs	r3, #0
 8012e7a:	4a24      	ldr	r2, [pc, #144]	@ (8012f0c <init_mb_tcp+0x98>)
 8012e7c:	4924      	ldr	r1, [pc, #144]	@ (8012f10 <init_mb_tcp+0x9c>)
 8012e7e:	f014 fcbb 	bl	80277f8 <mg_listen>

	eMBTCPInit(0);
 8012e82:	2000      	movs	r0, #0
 8012e84:	f7ff fea0 	bl	8012bc8 <eMBTCPInit>
	eMBEnable();
 8012e88:	f7ff fede 	bl	8012c48 <eMBEnable>

	size_t acl_size = 0;
 8012e8c:	2200      	movs	r2, #0
 8012e8e:	9201      	str	r2, [sp, #4]
	mg_fs_lfs_status(ACL_FILE, &acl_size, NULL);
 8012e90:	a901      	add	r1, sp, #4
 8012e92:	4820      	ldr	r0, [pc, #128]	@ (8012f14 <init_mb_tcp+0xa0>)
 8012e94:	f008 fa00 	bl	801b298 <mg_fs_lfs_status>
	if(acl_size && (acl_size < ACL_FILE_MAX_SIZE)){
 8012e98:	9801      	ldr	r0, [sp, #4]
 8012e9a:	1e42      	subs	r2, r0, #1
 8012e9c:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 8012ea0:	429a      	cmp	r2, r3
 8012ea2:	d815      	bhi.n	8012ed0 <init_mb_tcp+0x5c>
		mg_acl.buf = calloc(acl_size + 1, sizeof(char));
 8012ea4:	2101      	movs	r1, #1
 8012ea6:	4408      	add	r0, r1
 8012ea8:	f7ff ffd6 	bl	8012e58 <my_calloc>
 8012eac:	4d1a      	ldr	r5, [pc, #104]	@ (8012f18 <init_mb_tcp+0xa4>)
 8012eae:	6028      	str	r0, [r5, #0]
		void *fd = mg_fs_lfs_open(ACL_FILE, MG_FS_READ);
 8012eb0:	2101      	movs	r1, #1
 8012eb2:	4818      	ldr	r0, [pc, #96]	@ (8012f14 <init_mb_tcp+0xa0>)
 8012eb4:	f008 fa2e 	bl	801b314 <mg_fs_lfs_open>
 8012eb8:	4604      	mov	r4, r0
		mg_fs_lfs_read(fd, mg_acl.buf, acl_size);
 8012eba:	9a01      	ldr	r2, [sp, #4]
 8012ebc:	6829      	ldr	r1, [r5, #0]
 8012ebe:	f008 fa59 	bl	801b374 <mg_fs_lfs_read>
		mg_acl.len = acl_size;
 8012ec2:	9b01      	ldr	r3, [sp, #4]
 8012ec4:	606b      	str	r3, [r5, #4]
		mg_fs_lfs_close(fd);
 8012ec6:	4620      	mov	r0, r4
 8012ec8:	f008 fa48 	bl	801b35c <mg_fs_lfs_close>
		strncpy(mg_acl.buf, DEFAULT_ACL, mg_acl.len);
		void *fd1 = mg_fs_lfs_open(ACL_FILE, MG_FS_WRITE);
		mg_fs_lfs_write(fd1, mg_acl.buf, mg_acl.len);
		mg_fs_lfs_close(fd1);
	}
}
 8012ecc:	b003      	add	sp, #12
 8012ece:	bd30      	pop	{r4, r5, pc}
		mg_acl.buf = calloc(strlen(DEFAULT_ACL) + 1, sizeof(char));
 8012ed0:	2101      	movs	r1, #1
 8012ed2:	200b      	movs	r0, #11
 8012ed4:	f7ff ffc0 	bl	8012e58 <my_calloc>
 8012ed8:	4603      	mov	r3, r0
 8012eda:	4c0f      	ldr	r4, [pc, #60]	@ (8012f18 <init_mb_tcp+0xa4>)
 8012edc:	6020      	str	r0, [r4, #0]
		mg_acl.len = strlen(DEFAULT_ACL) + 1;
 8012ede:	220b      	movs	r2, #11
 8012ee0:	6062      	str	r2, [r4, #4]
		strncpy(mg_acl.buf, DEFAULT_ACL, mg_acl.len);
 8012ee2:	4a0e      	ldr	r2, [pc, #56]	@ (8012f1c <init_mb_tcp+0xa8>)
 8012ee4:	ca03      	ldmia	r2!, {r0, r1}
 8012ee6:	6018      	str	r0, [r3, #0]
 8012ee8:	6059      	str	r1, [r3, #4]
 8012eea:	8811      	ldrh	r1, [r2, #0]
 8012eec:	7892      	ldrb	r2, [r2, #2]
 8012eee:	8119      	strh	r1, [r3, #8]
 8012ef0:	729a      	strb	r2, [r3, #10]
		void *fd1 = mg_fs_lfs_open(ACL_FILE, MG_FS_WRITE);
 8012ef2:	2102      	movs	r1, #2
 8012ef4:	4807      	ldr	r0, [pc, #28]	@ (8012f14 <init_mb_tcp+0xa0>)
 8012ef6:	f008 fa0d 	bl	801b314 <mg_fs_lfs_open>
 8012efa:	4605      	mov	r5, r0
		mg_fs_lfs_write(fd1, mg_acl.buf, mg_acl.len);
 8012efc:	6862      	ldr	r2, [r4, #4]
 8012efe:	6821      	ldr	r1, [r4, #0]
 8012f00:	f008 fa44 	bl	801b38c <mg_fs_lfs_write>
		mg_fs_lfs_close(fd1);
 8012f04:	4628      	mov	r0, r5
 8012f06:	f008 fa29 	bl	801b35c <mg_fs_lfs_close>
}
 8012f0a:	e7df      	b.n	8012ecc <init_mb_tcp+0x58>
 8012f0c:	08012dbd 	.word	0x08012dbd
 8012f10:	08036c20 	.word	0x08036c20
 8012f14:	08036c34 	.word	0x08036c34
 8012f18:	20000ac8 	.word	0x20000ac8
 8012f1c:	08036c48 	.word	0x08036c48

08012f20 <xMBTCPPortInit>:
BOOL  xMBTCPPortInit( USHORT usTCPPort )
{


    return TRUE;
}
 8012f20:	2001      	movs	r0, #1
 8012f22:	4770      	bx	lr

08012f24 <xMBTCPPortGetRequest>:

BOOL  xMBTCPPortGetRequest( UCHAR **ppucMBTCPFrame, USHORT * usTCPLength )
{
    *ppucMBTCPFrame = (uint8_t *) &ucTCPRequestFrame[0];
 8012f24:	4b04      	ldr	r3, [pc, #16]	@ (8012f38 <xMBTCPPortGetRequest+0x14>)
 8012f26:	6003      	str	r3, [r0, #0]
    *usTCPLength = ucTCPRequestLen;
 8012f28:	4b04      	ldr	r3, [pc, #16]	@ (8012f3c <xMBTCPPortGetRequest+0x18>)
 8012f2a:	881a      	ldrh	r2, [r3, #0]
 8012f2c:	800a      	strh	r2, [r1, #0]
    // Reset the buffer.
    ucTCPRequestLen = 0;
 8012f2e:	2200      	movs	r2, #0
 8012f30:	801a      	strh	r2, [r3, #0]
    return TRUE;
}
 8012f32:	2001      	movs	r0, #1
 8012f34:	4770      	bx	lr
 8012f36:	bf00      	nop
 8012f38:	200012d8 	.word	0x200012d8
 8012f3c:	200012d4 	.word	0x200012d4

08012f40 <xMBTCPPortSendResponse>:


BOOL xMBTCPPortSendResponse( const UCHAR *pucMBTCPFrame, USHORT usTCPLength )
{
 8012f40:	b510      	push	{r4, lr}
 8012f42:	460c      	mov	r4, r1
      memcpy(ucTCPResponseFrame,pucMBTCPFrame , usTCPLength);
 8012f44:	460a      	mov	r2, r1
 8012f46:	4601      	mov	r1, r0
 8012f48:	4804      	ldr	r0, [pc, #16]	@ (8012f5c <xMBTCPPortSendResponse+0x1c>)
 8012f4a:	f01b fac5 	bl	802e4d8 <memcpy>
      ucTCPResponseLen = usTCPLength;
 8012f4e:	4b04      	ldr	r3, [pc, #16]	@ (8012f60 <xMBTCPPortSendResponse+0x20>)
 8012f50:	801c      	strh	r4, [r3, #0]
      bFrameSent = TRUE;
 8012f52:	2001      	movs	r0, #1
 8012f54:	4b03      	ldr	r3, [pc, #12]	@ (8012f64 <xMBTCPPortSendResponse+0x24>)
 8012f56:	7018      	strb	r0, [r3, #0]
      return bFrameSent;
}
 8012f58:	bd10      	pop	{r4, pc}
 8012f5a:	bf00      	nop
 8012f5c:	20000ad4 	.word	0x20000ad4
 8012f60:	20000ad2 	.word	0x20000ad2
 8012f64:	20000ad0 	.word	0x20000ad0

08012f68 <vMBTCPPortDisable>:
{
};

void vMBTCPPortDisable( void )
{
};
 8012f68:	4770      	bx	lr

08012f6a <eMBTCPDoInit>:


/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBTCPDoInit( USHORT ucTCPPort )
{
 8012f6a:	b508      	push	{r3, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( xMBTCPPortInit( ucTCPPort ) == FALSE )
 8012f6c:	f7ff ffd8 	bl	8012f20 <xMBTCPPortInit>
 8012f70:	b108      	cbz	r0, 8012f76 <eMBTCPDoInit+0xc>
    eMBErrorCode    eStatus = MB_ENOERR;
 8012f72:	2000      	movs	r0, #0
    {
        eStatus = MB_EPORTERR;
    }
    return eStatus;
}
 8012f74:	bd08      	pop	{r3, pc}
        eStatus = MB_EPORTERR;
 8012f76:	2003      	movs	r0, #3
 8012f78:	e7fc      	b.n	8012f74 <eMBTCPDoInit+0xa>

08012f7a <eMBTCPStart>:

void
eMBTCPStart( void )
{
}
 8012f7a:	4770      	bx	lr

08012f7c <eMBTCPStop>:

void
eMBTCPStop( void )
{
 8012f7c:	b508      	push	{r3, lr}
    /* Make sure that no more clients are connected. */
    vMBTCPPortDisable( );
 8012f7e:	f7ff fff3 	bl	8012f68 <vMBTCPPortDisable>
}
 8012f82:	bd08      	pop	{r3, pc}

08012f84 <eMBTCPReceive>:

eMBErrorCode
eMBTCPReceive( UCHAR * pucRcvAddress, UCHAR ** ppucFrame, USHORT * pusLength )
{
 8012f84:	b570      	push	{r4, r5, r6, lr}
 8012f86:	b082      	sub	sp, #8
 8012f88:	4606      	mov	r6, r0
 8012f8a:	460d      	mov	r5, r1
 8012f8c:	4614      	mov	r4, r2
    eMBErrorCode    eStatus = MB_EIO;
    UCHAR          *pucMBTCPFrame;
    USHORT          usLength;
    USHORT          usPID;

    if( xMBTCPPortGetRequest( &pucMBTCPFrame, &usLength ) != FALSE )
 8012f8e:	f10d 0102 	add.w	r1, sp, #2
 8012f92:	a801      	add	r0, sp, #4
 8012f94:	f7ff ffc6 	bl	8012f24 <xMBTCPPortGetRequest>
 8012f98:	b180      	cbz	r0, 8012fbc <eMBTCPReceive+0x38>
    {
        usPID = pucMBTCPFrame[MB_TCP_PID] << 8U;
 8012f9a:	9b01      	ldr	r3, [sp, #4]
 8012f9c:	7899      	ldrb	r1, [r3, #2]
        usPID |= pucMBTCPFrame[MB_TCP_PID + 1];
 8012f9e:	78da      	ldrb	r2, [r3, #3]

        if( usPID == MB_TCP_PROTOCOL_ID )
 8012fa0:	ea52 2201 	orrs.w	r2, r2, r1, lsl #8
 8012fa4:	d10c      	bne.n	8012fc0 <eMBTCPReceive+0x3c>
        {
            *ppucFrame = &pucMBTCPFrame[MB_TCP_FUNC];
 8012fa6:	3307      	adds	r3, #7
 8012fa8:	602b      	str	r3, [r5, #0]
            *pusLength = usLength - MB_TCP_FUNC;
 8012faa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012fae:	3b07      	subs	r3, #7
 8012fb0:	8023      	strh	r3, [r4, #0]
            eStatus = MB_ENOERR;

            /* Modbus TCP does not use any addresses. Fake the source address such
             * that the processing part deals with this frame.
             */
            *pucRcvAddress = MB_TCP_PSEUDO_ADDRESS;
 8012fb2:	23ff      	movs	r3, #255	@ 0xff
 8012fb4:	7033      	strb	r3, [r6, #0]
            eStatus = MB_ENOERR;
 8012fb6:	2000      	movs	r0, #0
    else
    {
        eStatus = MB_EIO;
    }
    return eStatus;
}
 8012fb8:	b002      	add	sp, #8
 8012fba:	bd70      	pop	{r4, r5, r6, pc}
        eStatus = MB_EIO;
 8012fbc:	2005      	movs	r0, #5
 8012fbe:	e7fb      	b.n	8012fb8 <eMBTCPReceive+0x34>
    eMBErrorCode    eStatus = MB_EIO;
 8012fc0:	2005      	movs	r0, #5
 8012fc2:	e7f9      	b.n	8012fb8 <eMBTCPReceive+0x34>

08012fc4 <eMBTCPSend>:

eMBErrorCode
eMBTCPSend( UCHAR _unused, const UCHAR * pucFrame, USHORT usLength )
{
 8012fc4:	b508      	push	{r3, lr}
 8012fc6:	4608      	mov	r0, r1
    eMBErrorCode    eStatus = MB_ENOERR;
    UCHAR          *pucMBTCPFrame = ( UCHAR * ) pucFrame - MB_TCP_FUNC;
    USHORT          usTCPLength = usLength + MB_TCP_FUNC;
 8012fc8:	1dd1      	adds	r1, r2, #7
     * function with the buffer returned by the previous call. Therefore we 
     * only have to update the length in the header. Note that the length 
     * header includes the size of the Modbus PDU and the UID Byte. Therefore 
     * the length is usLength plus one.
     */
    pucMBTCPFrame[MB_TCP_LEN] = ( usLength + 1 ) >> 8U;
 8012fca:	1c53      	adds	r3, r2, #1
 8012fcc:	121b      	asrs	r3, r3, #8
 8012fce:	f800 3c03 	strb.w	r3, [r0, #-3]
    pucMBTCPFrame[MB_TCP_LEN + 1] = ( usLength + 1 ) & 0xFF;
 8012fd2:	3201      	adds	r2, #1
 8012fd4:	f800 2c02 	strb.w	r2, [r0, #-2]
    if( xMBTCPPortSendResponse( pucMBTCPFrame, usTCPLength ) == FALSE )
 8012fd8:	b289      	uxth	r1, r1
 8012fda:	3807      	subs	r0, #7
 8012fdc:	f7ff ffb0 	bl	8012f40 <xMBTCPPortSendResponse>
 8012fe0:	b108      	cbz	r0, 8012fe6 <eMBTCPSend+0x22>
    eMBErrorCode    eStatus = MB_ENOERR;
 8012fe2:	2000      	movs	r0, #0
    {
        eStatus = MB_EIO;
    }
    return eStatus;
}
 8012fe4:	bd08      	pop	{r3, pc}
        eStatus = MB_EIO;
 8012fe6:	2005      	movs	r0, #5
 8012fe8:	e7fc      	b.n	8012fe4 <eMBTCPSend+0x20>
	...

08012fec <handle_OPTIONS_method>:
	free(pub_topics_str);
	free(subscr_topics_str);
}


static void handle_OPTIONS_method(struct mg_connection *c){
 8012fec:	b508      	push	{r3, lr}

	mg_http_reply(c, 200,
 8012fee:	4b03      	ldr	r3, [pc, #12]	@ (8012ffc <handle_OPTIONS_method+0x10>)
 8012ff0:	4a03      	ldr	r2, [pc, #12]	@ (8013000 <handle_OPTIONS_method+0x14>)
 8012ff2:	21c8      	movs	r1, #200	@ 0xc8
 8012ff4:	f011 fb3a 	bl	802466c <mg_http_reply>
	    "Access-Control-Allow-Origin: *\r\n"  // Или конкретный домен
	    "Access-Control-Allow-Methods: GET, POST, OPTIONS\r\n"
	    "Access-Control-Allow-Headers: Content-Type\r\n"
	    "Access-Control-Max-Age: 86400\r\n","\r\n");  // Без тела ответа
}
 8012ff8:	bd08      	pop	{r3, pc}
 8012ffa:	bf00      	nop
 8012ffc:	0803b5fc 	.word	0x0803b5fc
 8013000:	08036c54 	.word	0x08036c54

08013004 <handler_dev_version>:
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET POST methods\"}\r\n");
		return;
	}
}

static void handler_dev_version(struct mg_connection *c, struct mg_http_message *hm){
 8013004:	b570      	push	{r4, r5, r6, lr}
 8013006:	b084      	sub	sp, #16
 8013008:	4605      	mov	r5, r0
 801300a:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 801300c:	ae02      	add	r6, sp, #8
 801300e:	4910      	ldr	r1, [pc, #64]	@ (8013050 <handler_dev_version+0x4c>)
 8013010:	4630      	mov	r0, r6
 8013012:	f011 fcb5 	bl	8024980 <mg_str_s>
 8013016:	2300      	movs	r3, #0
 8013018:	9300      	str	r3, [sp, #0]
 801301a:	e896 000c 	ldmia.w	r6, {r2, r3}
 801301e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013022:	f011 fecf 	bl	8024dc4 <mg_match>
 8013026:	b158      	cbz	r0, 8013040 <handler_dev_version+0x3c>
		mg_http_reply(c, 200, headers,
 8013028:	4b0a      	ldr	r3, [pc, #40]	@ (8013054 <handler_dev_version+0x50>)
 801302a:	9301      	str	r3, [sp, #4]
 801302c:	4b0a      	ldr	r3, [pc, #40]	@ (8013058 <handler_dev_version+0x54>)
 801302e:	9300      	str	r3, [sp, #0]
 8013030:	4b0a      	ldr	r3, [pc, #40]	@ (801305c <handler_dev_version+0x58>)
 8013032:	4a0b      	ldr	r2, [pc, #44]	@ (8013060 <handler_dev_version+0x5c>)
 8013034:	21c8      	movs	r1, #200	@ 0xc8
 8013036:	4628      	mov	r0, r5
 8013038:	f011 fb18 	bl	802466c <mg_http_reply>
	}else{
		mg_http_reply(c, 405, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET method\"}\r\n");
		return;
	}
}
 801303c:	b004      	add	sp, #16
 801303e:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8013040:	4b08      	ldr	r3, [pc, #32]	@ (8013064 <handler_dev_version+0x60>)
 8013042:	4a07      	ldr	r2, [pc, #28]	@ (8013060 <handler_dev_version+0x5c>)
 8013044:	f240 1195 	movw	r1, #405	@ 0x195
 8013048:	4628      	mov	r0, r5
 801304a:	f011 fb0f 	bl	802466c <mg_http_reply>
		return;
 801304e:	e7f5      	b.n	801303c <handler_dev_version+0x38>
 8013050:	08036cf4 	.word	0x08036cf4
 8013054:	08036da0 	.word	0x08036da0
 8013058:	080368f4 	.word	0x080368f4
 801305c:	08036cf8 	.word	0x08036cf8
 8013060:	08036d30 	.word	0x08036d30
 8013064:	08036da4 	.word	0x08036da4

08013068 <handler_dev_info>:

static void handler_dev_info(struct mg_connection *c, struct mg_http_message *hm){
 8013068:	b570      	push	{r4, r5, r6, lr}
 801306a:	b088      	sub	sp, #32
 801306c:	4605      	mov	r5, r0
 801306e:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8013070:	ae06      	add	r6, sp, #24
 8013072:	4913      	ldr	r1, [pc, #76]	@ (80130c0 <handler_dev_info+0x58>)
 8013074:	4630      	mov	r0, r6
 8013076:	f011 fc83 	bl	8024980 <mg_str_s>
 801307a:	2300      	movs	r3, #0
 801307c:	9300      	str	r3, [sp, #0]
 801307e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013082:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013086:	f011 fe9d 	bl	8024dc4 <mg_match>
 801308a:	b188      	cbz	r0, 80130b0 <handler_dev_info+0x48>
		mg_http_reply(c, 200, headers,
 801308c:	4b0d      	ldr	r3, [pc, #52]	@ (80130c4 <handler_dev_info+0x5c>)
 801308e:	9304      	str	r3, [sp, #16]
 8013090:	4b0d      	ldr	r3, [pc, #52]	@ (80130c8 <handler_dev_info+0x60>)
 8013092:	9303      	str	r3, [sp, #12]
 8013094:	4b0d      	ldr	r3, [pc, #52]	@ (80130cc <handler_dev_info+0x64>)
 8013096:	9302      	str	r3, [sp, #8]
 8013098:	4b0d      	ldr	r3, [pc, #52]	@ (80130d0 <handler_dev_info+0x68>)
 801309a:	9301      	str	r3, [sp, #4]
 801309c:	4b0d      	ldr	r3, [pc, #52]	@ (80130d4 <handler_dev_info+0x6c>)
 801309e:	9300      	str	r3, [sp, #0]
 80130a0:	4b0d      	ldr	r3, [pc, #52]	@ (80130d8 <handler_dev_info+0x70>)
 80130a2:	4a0e      	ldr	r2, [pc, #56]	@ (80130dc <handler_dev_info+0x74>)
 80130a4:	21c8      	movs	r1, #200	@ 0xc8
 80130a6:	4628      	mov	r0, r5
 80130a8:	f011 fae0 	bl	802466c <mg_http_reply>
	}else{
		mg_http_reply(c, 405, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET method\"}\r\n");
		return;
	}
}
 80130ac:	b008      	add	sp, #32
 80130ae:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 405, headers, //TODO delete for release,
 80130b0:	4b0b      	ldr	r3, [pc, #44]	@ (80130e0 <handler_dev_info+0x78>)
 80130b2:	4a0a      	ldr	r2, [pc, #40]	@ (80130dc <handler_dev_info+0x74>)
 80130b4:	f240 1195 	movw	r1, #405	@ 0x195
 80130b8:	4628      	mov	r0, r5
 80130ba:	f011 fad7 	bl	802466c <mg_http_reply>
		return;
 80130be:	e7f5      	b.n	80130ac <handler_dev_info+0x44>
 80130c0:	08036cf4 	.word	0x08036cf4
 80130c4:	08036e60 	.word	0x08036e60
 80130c8:	08036e74 	.word	0x08036e74
 80130cc:	08036e80 	.word	0x08036e80
 80130d0:	08036da0 	.word	0x08036da0
 80130d4:	080368f4 	.word	0x080368f4
 80130d8:	08036df4 	.word	0x08036df4
 80130dc:	08036d30 	.word	0x08036d30
 80130e0:	08036da4 	.word	0x08036da4

080130e4 <handle_firmware_deactivate>:
static void handle_firmware_deactivate(struct mg_connection *c, struct mg_http_message *hm){
 80130e4:	b570      	push	{r4, r5, r6, lr}
 80130e6:	b084      	sub	sp, #16
 80130e8:	4605      	mov	r5, r0
 80130ea:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 80130ec:	ae02      	add	r6, sp, #8
 80130ee:	4914      	ldr	r1, [pc, #80]	@ (8013140 <handle_firmware_deactivate+0x5c>)
 80130f0:	4630      	mov	r0, r6
 80130f2:	f011 fc45 	bl	8024980 <mg_str_s>
 80130f6:	2300      	movs	r3, #0
 80130f8:	9300      	str	r3, [sp, #0]
 80130fa:	e896 000c 	ldmia.w	r6, {r2, r3}
 80130fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013102:	f011 fe5f 	bl	8024dc4 <mg_match>
 8013106:	b198      	cbz	r0, 8013130 <handle_firmware_deactivate+0x4c>
		if (mg_fs_lfs.rm("/firmware.bin")){ //if firmware delete saccess
 8013108:	4b0e      	ldr	r3, [pc, #56]	@ (8013144 <handle_firmware_deactivate+0x60>)
 801310a:	6a1b      	ldr	r3, [r3, #32]
 801310c:	480e      	ldr	r0, [pc, #56]	@ (8013148 <handle_firmware_deactivate+0x64>)
 801310e:	4798      	blx	r3
 8013110:	b138      	cbz	r0, 8013122 <handle_firmware_deactivate+0x3e>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 8013112:	4b0e      	ldr	r3, [pc, #56]	@ (801314c <handle_firmware_deactivate+0x68>)
 8013114:	4a0e      	ldr	r2, [pc, #56]	@ (8013150 <handle_firmware_deactivate+0x6c>)
 8013116:	21c8      	movs	r1, #200	@ 0xc8
 8013118:	4628      	mov	r0, r5
 801311a:	f011 faa7 	bl	802466c <mg_http_reply>
}
 801311e:	b004      	add	sp, #16
 8013120:	bd70      	pop	{r4, r5, r6, pc}
					mg_http_reply(c, 200, headers, //TODO delete for release,
 8013122:	4b0c      	ldr	r3, [pc, #48]	@ (8013154 <handle_firmware_deactivate+0x70>)
 8013124:	4a0a      	ldr	r2, [pc, #40]	@ (8013150 <handle_firmware_deactivate+0x6c>)
 8013126:	21c8      	movs	r1, #200	@ 0xc8
 8013128:	4628      	mov	r0, r5
 801312a:	f011 fa9f 	bl	802466c <mg_http_reply>
 801312e:	e7f6      	b.n	801311e <handle_firmware_deactivate+0x3a>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8013130:	4b09      	ldr	r3, [pc, #36]	@ (8013158 <handle_firmware_deactivate+0x74>)
 8013132:	4a07      	ldr	r2, [pc, #28]	@ (8013150 <handle_firmware_deactivate+0x6c>)
 8013134:	f240 1195 	movw	r1, #405	@ 0x195
 8013138:	4628      	mov	r0, r5
 801313a:	f011 fa97 	bl	802466c <mg_http_reply>
}
 801313e:	e7ee      	b.n	801311e <handle_firmware_deactivate+0x3a>
 8013140:	08036e88 	.word	0x08036e88
 8013144:	200000a0 	.word	0x200000a0
 8013148:	08036608 	.word	0x08036608
 801314c:	08036e90 	.word	0x08036e90
 8013150:	08036d30 	.word	0x08036d30
 8013154:	08036ecc 	.word	0x08036ecc
 8013158:	08036f10 	.word	0x08036f10

0801315c <handle_web_files_remove>:
static void handle_web_files_remove(struct mg_connection *c, struct mg_http_message *hm){
 801315c:	b570      	push	{r4, r5, r6, lr}
 801315e:	b084      	sub	sp, #16
 8013160:	4605      	mov	r5, r0
 8013162:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 8013164:	ae02      	add	r6, sp, #8
 8013166:	4912      	ldr	r1, [pc, #72]	@ (80131b0 <handle_web_files_remove+0x54>)
 8013168:	4630      	mov	r0, r6
 801316a:	f011 fc09 	bl	8024980 <mg_str_s>
 801316e:	2300      	movs	r3, #0
 8013170:	9300      	str	r3, [sp, #0]
 8013172:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013176:	e894 0003 	ldmia.w	r4, {r0, r1}
 801317a:	f011 fe23 	bl	8024dc4 <mg_match>
 801317e:	b178      	cbz	r0, 80131a0 <handle_web_files_remove+0x44>
			mg_fs_lfs.rm("/web");
 8013180:	4e0c      	ldr	r6, [pc, #48]	@ (80131b4 <handle_web_files_remove+0x58>)
 8013182:	6a33      	ldr	r3, [r6, #32]
 8013184:	4c0c      	ldr	r4, [pc, #48]	@ (80131b8 <handle_web_files_remove+0x5c>)
 8013186:	4620      	mov	r0, r4
 8013188:	4798      	blx	r3
	        mg_fs_lfs.mkd("/web");
 801318a:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 801318c:	4620      	mov	r0, r4
 801318e:	4798      	blx	r3
	        mg_http_reply(c, 200, headers, //TODO delete for release,
 8013190:	4b0a      	ldr	r3, [pc, #40]	@ (80131bc <handle_web_files_remove+0x60>)
 8013192:	4a0b      	ldr	r2, [pc, #44]	@ (80131c0 <handle_web_files_remove+0x64>)
 8013194:	21c8      	movs	r1, #200	@ 0xc8
 8013196:	4628      	mov	r0, r5
 8013198:	f011 fa68 	bl	802466c <mg_http_reply>
}
 801319c:	b004      	add	sp, #16
 801319e:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 405, headers, //TODO delete for release,
 80131a0:	4b08      	ldr	r3, [pc, #32]	@ (80131c4 <handle_web_files_remove+0x68>)
 80131a2:	4a07      	ldr	r2, [pc, #28]	@ (80131c0 <handle_web_files_remove+0x64>)
 80131a4:	f240 1195 	movw	r1, #405	@ 0x195
 80131a8:	4628      	mov	r0, r5
 80131aa:	f011 fa5f 	bl	802466c <mg_http_reply>
}
 80131ae:	e7f5      	b.n	801319c <handle_web_files_remove+0x40>
 80131b0:	08036e88 	.word	0x08036e88
 80131b4:	200000a0 	.word	0x200000a0
 80131b8:	080365f4 	.word	0x080365f4
 80131bc:	08036f60 	.word	0x08036f60
 80131c0:	08036d30 	.word	0x08036d30
 80131c4:	08036f10 	.word	0x08036f10

080131c8 <handler_logout>:
static void handler_logout(struct mg_connection *c,struct mg_http_message *hm){
 80131c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131ca:	b0c3      	sub	sp, #268	@ 0x10c
 80131cc:	4606      	mov	r6, r0
 80131ce:	460d      	mov	r5, r1
	char username[128] = {0};
 80131d0:	2400      	movs	r4, #0
 80131d2:	9422      	str	r4, [sp, #136]	@ 0x88
 80131d4:	277c      	movs	r7, #124	@ 0x7c
 80131d6:	463a      	mov	r2, r7
 80131d8:	4621      	mov	r1, r4
 80131da:	a823      	add	r0, sp, #140	@ 0x8c
 80131dc:	f019 ff40 	bl	802d060 <memset>
	char pass[128] = {0};
 80131e0:	9402      	str	r4, [sp, #8]
 80131e2:	463a      	mov	r2, r7
 80131e4:	4621      	mov	r1, r4
 80131e6:	a803      	add	r0, sp, #12
 80131e8:	f019 ff3a 	bl	802d060 <memset>
	mg_http_creds(hm, username, sizeof(username), pass, sizeof(pass));
 80131ec:	2280      	movs	r2, #128	@ 0x80
 80131ee:	9200      	str	r2, [sp, #0]
 80131f0:	ab02      	add	r3, sp, #8
 80131f2:	a922      	add	r1, sp, #136	@ 0x88
 80131f4:	4628      	mov	r0, r5
 80131f6:	f012 faeb 	bl	80257d0 <mg_http_creds>
	if (username[0] != '\0' && pass[0] != '\0') {
 80131fa:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
 80131fe:	b113      	cbz	r3, 8013206 <handler_logout+0x3e>
 8013200:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8013204:	b962      	cbnz	r2, 8013220 <handler_logout+0x58>
	}else if (username[0] == '\0' && pass[0] != '\0') {
 8013206:	b913      	cbnz	r3, 801320e <handler_logout+0x46>
 8013208:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801320c:	bb4b      	cbnz	r3, 8013262 <handler_logout+0x9a>
        mg_http_reply(c, 404, headers, //TODO delete for release,
 801320e:	4b21      	ldr	r3, [pc, #132]	@ (8013294 <handler_logout+0xcc>)
 8013210:	4a21      	ldr	r2, [pc, #132]	@ (8013298 <handler_logout+0xd0>)
 8013212:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8013216:	4630      	mov	r0, r6
 8013218:	f011 fa28 	bl	802466c <mg_http_reply>
}
 801321c:	b043      	add	sp, #268	@ 0x10c
 801321e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mg_http_reply(c, 404, headers, //TODO delete for release,
 8013220:	4b1e      	ldr	r3, [pc, #120]	@ (801329c <handler_logout+0xd4>)
 8013222:	4a1d      	ldr	r2, [pc, #116]	@ (8013298 <handler_logout+0xd0>)
 8013224:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8013228:	4630      	mov	r0, r6
 801322a:	f011 fa1f 	bl	802466c <mg_http_reply>
        return;
 801322e:	e7f5      	b.n	801321c <handler_logout+0x54>
				logging(L_INFO, "User: %s is logout", web_tokens[i].user);
 8013230:	23b8      	movs	r3, #184	@ 0xb8
 8013232:	fb03 f404 	mul.w	r4, r3, r4
 8013236:	4f1a      	ldr	r7, [pc, #104]	@ (80132a0 <handler_logout+0xd8>)
 8013238:	19e5      	adds	r5, r4, r7
 801323a:	462a      	mov	r2, r5
 801323c:	4919      	ldr	r1, [pc, #100]	@ (80132a4 <handler_logout+0xdc>)
 801323e:	2001      	movs	r0, #1
 8013240:	f7fe ffb2 	bl	80121a8 <logging>
				web_tokens[i].token[0] = '\0';
 8013244:	2300      	movs	r3, #0
 8013246:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
				web_tokens[i].expare = 0;
 801324a:	2000      	movs	r0, #0
 801324c:	2100      	movs	r1, #0
 801324e:	e9c5 012c 	strd	r0, r1, [r5, #176]	@ 0xb0
				web_tokens[i].user[0] = '\0';
 8013252:	553b      	strb	r3, [r7, r4]
		        mg_http_reply(c, 200, headers, //TODO delete for release,
 8013254:	4b14      	ldr	r3, [pc, #80]	@ (80132a8 <handler_logout+0xe0>)
 8013256:	4a10      	ldr	r2, [pc, #64]	@ (8013298 <handler_logout+0xd0>)
 8013258:	21c8      	movs	r1, #200	@ 0xc8
 801325a:	4630      	mov	r0, r6
 801325c:	f011 fa06 	bl	802466c <mg_http_reply>
		        return;
 8013260:	e7dc      	b.n	801321c <handler_logout+0x54>
		for (i=0;i<user_list_size; i++){
 8013262:	2400      	movs	r4, #0
 8013264:	2c09      	cmp	r4, #9
 8013266:	dc0c      	bgt.n	8013282 <handler_logout+0xba>
			if((strcmp(web_tokens[i].token, pass) == 0)){
 8013268:	23b8      	movs	r3, #184	@ 0xb8
 801326a:	fb04 f303 	mul.w	r3, r4, r3
 801326e:	3380      	adds	r3, #128	@ 0x80
 8013270:	a902      	add	r1, sp, #8
 8013272:	480b      	ldr	r0, [pc, #44]	@ (80132a0 <handler_logout+0xd8>)
 8013274:	4418      	add	r0, r3
 8013276:	f7fc ffb3 	bl	80101e0 <strcmp>
 801327a:	2800      	cmp	r0, #0
 801327c:	d0d8      	beq.n	8013230 <handler_logout+0x68>
		for (i=0;i<user_list_size; i++){
 801327e:	3401      	adds	r4, #1
 8013280:	e7f0      	b.n	8013264 <handler_logout+0x9c>
        mg_http_reply(c, 404, headers,
 8013282:	4b0a      	ldr	r3, [pc, #40]	@ (80132ac <handler_logout+0xe4>)
 8013284:	4a04      	ldr	r2, [pc, #16]	@ (8013298 <handler_logout+0xd0>)
 8013286:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 801328a:	4630      	mov	r0, r6
 801328c:	f011 f9ee 	bl	802466c <mg_http_reply>
        return;
 8013290:	e7c4      	b.n	801321c <handler_logout+0x54>
 8013292:	bf00      	nop
 8013294:	080370ac 	.word	0x080370ac
 8013298:	08036d30 	.word	0x08036d30
 801329c:	08036fa8 	.word	0x08036fa8
 80132a0:	20001ad8 	.word	0x20001ad8
 80132a4:	08037028 	.word	0x08037028
 80132a8:	0803703c 	.word	0x0803703c
 80132ac:	08037078 	.word	0x08037078

080132b0 <handle_login>:
static void handle_login(struct mg_connection *c, tokens_list_t *u) {
 80132b0:	b530      	push	{r4, r5, lr}
 80132b2:	b0c7      	sub	sp, #284	@ 0x11c
 80132b4:	4605      	mov	r5, r0
 80132b6:	460c      	mov	r4, r1
  const char *cookie_name = c->is_tls ? "secure_access_token" : "access_token";
 80132b8:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 80132bc:	f013 0240 	ands.w	r2, r3, #64	@ 0x40
 80132c0:	d024      	beq.n	801330c <handle_login+0x5c>
 80132c2:	4b14      	ldr	r3, [pc, #80]	@ (8013314 <handle_login+0x64>)
              cookie_name, u->token,
 80132c4:	f104 0180 	add.w	r1, r4, #128	@ 0x80
  mg_snprintf(cookie, sizeof(cookie),
 80132c8:	b312      	cbz	r2, 8013310 <handle_login+0x60>
 80132ca:	4a13      	ldr	r2, [pc, #76]	@ (8013318 <handle_login+0x68>)
 80132cc:	4813      	ldr	r0, [pc, #76]	@ (801331c <handle_login+0x6c>)
 80132ce:	9002      	str	r0, [sp, #8]
 80132d0:	9201      	str	r2, [sp, #4]
 80132d2:	9100      	str	r1, [sp, #0]
 80132d4:	4a12      	ldr	r2, [pc, #72]	@ (8013320 <handle_login+0x70>)
 80132d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80132da:	a806      	add	r0, sp, #24
 80132dc:	f010 fcc8 	bl	8023c70 <mg_snprintf>
  mg_http_reply(c, 200, cookie, "{%m:%m}", MG_ESC("user"), MG_ESC(u->user));
 80132e0:	9405      	str	r4, [sp, #20]
 80132e2:	2200      	movs	r2, #0
 80132e4:	9204      	str	r2, [sp, #16]
 80132e6:	4b0f      	ldr	r3, [pc, #60]	@ (8013324 <handle_login+0x74>)
 80132e8:	9303      	str	r3, [sp, #12]
 80132ea:	490f      	ldr	r1, [pc, #60]	@ (8013328 <handle_login+0x78>)
 80132ec:	9102      	str	r1, [sp, #8]
 80132ee:	9201      	str	r2, [sp, #4]
 80132f0:	9300      	str	r3, [sp, #0]
 80132f2:	4b0e      	ldr	r3, [pc, #56]	@ (801332c <handle_login+0x7c>)
 80132f4:	aa06      	add	r2, sp, #24
 80132f6:	21c8      	movs	r1, #200	@ 0xc8
 80132f8:	4628      	mov	r0, r5
 80132fa:	f011 f9b7 	bl	802466c <mg_http_reply>
  logging(L_INFO, "Authenticated web user: %s ", u->user);
 80132fe:	4622      	mov	r2, r4
 8013300:	490b      	ldr	r1, [pc, #44]	@ (8013330 <handle_login+0x80>)
 8013302:	2001      	movs	r0, #1
 8013304:	f7fe ff50 	bl	80121a8 <logging>
}
 8013308:	b047      	add	sp, #284	@ 0x11c
 801330a:	bd30      	pop	{r4, r5, pc}
  const char *cookie_name = c->is_tls ? "secure_access_token" : "access_token";
 801330c:	4b09      	ldr	r3, [pc, #36]	@ (8013334 <handle_login+0x84>)
 801330e:	e7d9      	b.n	80132c4 <handle_login+0x14>
  mg_snprintf(cookie, sizeof(cookie),
 8013310:	4a09      	ldr	r2, [pc, #36]	@ (8013338 <handle_login+0x88>)
 8013312:	e7db      	b.n	80132cc <handle_login+0x1c>
 8013314:	08037124 	.word	0x08037124
 8013318:	08037148 	.word	0x08037148
 801331c:	0002a300 	.word	0x0002a300
 8013320:	08037154 	.word	0x08037154
 8013324:	08022e2d 	.word	0x08022e2d
 8013328:	080381cc 	.word	0x080381cc
 801332c:	08037198 	.word	0x08037198
 8013330:	080371a0 	.word	0x080371a0
 8013334:	08037138 	.word	0x08037138
 8013338:	080373ac 	.word	0x080373ac

0801333c <auth>:
static bool auth(struct mg_connection *c, struct mg_http_message *hm, bool set_cookie){
 801333c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013340:	b0e5      	sub	sp, #404	@ 0x194
 8013342:	4605      	mov	r5, r0
 8013344:	460c      	mov	r4, r1
 8013346:	4616      	mov	r6, r2
	char pass_digest[sha1_str_len] = {0};
 8013348:	2100      	movs	r1, #0
 801334a:	9159      	str	r1, [sp, #356]	@ 0x164
 801334c:	2225      	movs	r2, #37	@ 0x25
 801334e:	a85a      	add	r0, sp, #360	@ 0x168
 8013350:	f019 fe86 	bl	802d060 <memset>
	mg_http_creds(hm, username, sizeof(username), pass, sizeof(pass));
 8013354:	2280      	movs	r2, #128	@ 0x80
 8013356:	9200      	str	r2, [sp, #0]
 8013358:	ab02      	add	r3, sp, #8
 801335a:	a922      	add	r1, sp, #136	@ 0x88
 801335c:	4620      	mov	r0, r4
 801335e:	f012 fa37 	bl	80257d0 <mg_http_creds>
	if (username[0] != '\0' && pass[0] != '\0') {
 8013362:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
 8013366:	b113      	cbz	r3, 801336e <auth+0x32>
 8013368:	f89d 2008 	ldrb.w	r2, [sp, #8]
 801336c:	b94a      	cbnz	r2, 8013382 <auth+0x46>
	} else if (username[0] == '\0' && pass[0] != '\0') {
 801336e:	2b00      	cmp	r3, #0
 8013370:	f040 80bb 	bne.w	80134ea <auth+0x1ae>
 8013374:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8013378:	2b00      	cmp	r3, #0
 801337a:	f040 80b2 	bne.w	80134e2 <auth+0x1a6>
	return false;
 801337e:	2000      	movs	r0, #0
 8013380:	e0b4      	b.n	80134ec <auth+0x1b0>
		logging(L_INFO, "Try to authenticate user: %s", username);
 8013382:	aa22      	add	r2, sp, #136	@ 0x88
 8013384:	495b      	ldr	r1, [pc, #364]	@ (80134f4 <auth+0x1b8>)
 8013386:	2001      	movs	r0, #1
 8013388:	f7fe ff0e 	bl	80121a8 <logging>
		mg_sha1_init(&sha1_ctx);
 801338c:	a842      	add	r0, sp, #264	@ 0x108
 801338e:	f011 fa45 	bl	802481c <mg_sha1_init>
		mg_sha1_update(&sha1_ctx, (const unsigned char *)pass, strlen(pass) * sizeof(char));
 8013392:	a802      	add	r0, sp, #8
 8013394:	f7fc ff84 	bl	80102a0 <strlen>
 8013398:	4602      	mov	r2, r0
 801339a:	a902      	add	r1, sp, #8
 801339c:	a842      	add	r0, sp, #264	@ 0x108
 801339e:	f011 fa57 	bl	8024850 <mg_sha1_update>
		mg_sha1_final((unsigned char *)&pass_digest, &sha1_ctx); // calculate sha1 pass
 80133a2:	a942      	add	r1, sp, #264	@ 0x108
 80133a4:	a859      	add	r0, sp, #356	@ 0x164
 80133a6:	f011 fa8d 	bl	80248c4 <mg_sha1_final>
		for (i=0; i< user_list_size; i++ ){
 80133aa:	2400      	movs	r4, #0
 80133ac:	e02a      	b.n	8013404 <auth+0xc8>
						if (set_cookie)handle_login(c, &web_tokens[i]);
 80133ae:	4641      	mov	r1, r8
 80133b0:	4628      	mov	r0, r5
 80133b2:	f7ff ff7d 	bl	80132b0 <handle_login>
 80133b6:	e066      	b.n	8013486 <auth+0x14a>
					strncpy(web_tokens[1].user, username, sizeof(web_tokens[1].user));
 80133b8:	4f4f      	ldr	r7, [pc, #316]	@ (80134f8 <auth+0x1bc>)
 80133ba:	2280      	movs	r2, #128	@ 0x80
 80133bc:	a922      	add	r1, sp, #136	@ 0x88
 80133be:	4638      	mov	r0, r7
 80133c0:	f019 fe95 	bl	802d0ee <strncpy>
					web_tokens[1].expare = mg_now() + token_life_time;
 80133c4:	f016 fe9c 	bl	802a100 <mg_now>
 80133c8:	4b4c      	ldr	r3, [pc, #304]	@ (80134fc <auth+0x1c0>)
 80133ca:	18c3      	adds	r3, r0, r3
 80133cc:	f141 0100 	adc.w	r1, r1, #0
 80133d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80133d4:	f8c7 10b4 	str.w	r1, [r7, #180]	@ 0xb4
					mg_random_str(web_tokens[1].token, sha1_str_len -1);
 80133d8:	2128      	movs	r1, #40	@ 0x28
 80133da:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 80133de:	f012 fe3d 	bl	802605c <mg_random_str>
					if (set_cookie)handle_login(c, &web_tokens[1]);
 80133e2:	b94e      	cbnz	r6, 80133f8 <auth+0xbc>
					logging(L_INFO, "User: %s is authenticated", web_tokens[i].user);
 80133e4:	22b8      	movs	r2, #184	@ 0xb8
 80133e6:	4b46      	ldr	r3, [pc, #280]	@ (8013500 <auth+0x1c4>)
 80133e8:	fb02 3204 	mla	r2, r2, r4, r3
 80133ec:	4945      	ldr	r1, [pc, #276]	@ (8013504 <auth+0x1c8>)
 80133ee:	2001      	movs	r0, #1
 80133f0:	f7fe feda 	bl	80121a8 <logging>
					return true;
 80133f4:	2001      	movs	r0, #1
 80133f6:	e079      	b.n	80134ec <auth+0x1b0>
					if (set_cookie)handle_login(c, &web_tokens[1]);
 80133f8:	4639      	mov	r1, r7
 80133fa:	4628      	mov	r0, r5
 80133fc:	f7ff ff58 	bl	80132b0 <handle_login>
 8013400:	e7f0      	b.n	80133e4 <auth+0xa8>
		for (i=0; i< user_list_size; i++ ){
 8013402:	3401      	adds	r4, #1
 8013404:	2c09      	cmp	r4, #9
 8013406:	dc45      	bgt.n	8013494 <auth+0x158>
			if((strcmp(web_users[i].user, username) == 0) && (strcmp(web_users[i].pass_digest, pass_digest) == 0)){
 8013408:	a922      	add	r1, sp, #136	@ 0x88
 801340a:	20a9      	movs	r0, #169	@ 0xa9
 801340c:	4b3e      	ldr	r3, [pc, #248]	@ (8013508 <auth+0x1cc>)
 801340e:	fb00 3004 	mla	r0, r0, r4, r3
 8013412:	f7fc fee5 	bl	80101e0 <strcmp>
 8013416:	2800      	cmp	r0, #0
 8013418:	d1f3      	bne.n	8013402 <auth+0xc6>
 801341a:	23a9      	movs	r3, #169	@ 0xa9
 801341c:	fb04 f303 	mul.w	r3, r4, r3
 8013420:	3380      	adds	r3, #128	@ 0x80
 8013422:	a959      	add	r1, sp, #356	@ 0x164
 8013424:	4838      	ldr	r0, [pc, #224]	@ (8013508 <auth+0x1cc>)
 8013426:	4418      	add	r0, r3
 8013428:	f7fc feda 	bl	80101e0 <strcmp>
 801342c:	2800      	cmp	r0, #0
 801342e:	d1e8      	bne.n	8013402 <auth+0xc6>
					if(web_tokens[i].expare < mg_now()){
 8013430:	4b33      	ldr	r3, [pc, #204]	@ (8013500 <auth+0x1c4>)
 8013432:	22b8      	movs	r2, #184	@ 0xb8
 8013434:	fb02 3304 	mla	r3, r2, r4, r3
 8013438:	f8d3 80b0 	ldr.w	r8, [r3, #176]	@ 0xb0
 801343c:	f8d3 70b4 	ldr.w	r7, [r3, #180]	@ 0xb4
 8013440:	f016 fe5e 	bl	802a100 <mg_now>
 8013444:	4580      	cmp	r8, r0
 8013446:	418f      	sbcs	r7, r1
 8013448:	d2b6      	bcs.n	80133b8 <auth+0x7c>
						strncpy(web_tokens[i].user, username, sizeof(web_tokens[i].user));
 801344a:	27b8      	movs	r7, #184	@ 0xb8
 801344c:	fb04 f707 	mul.w	r7, r4, r7
 8013450:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 8013500 <auth+0x1c4>
 8013454:	eb07 0809 	add.w	r8, r7, r9
 8013458:	2280      	movs	r2, #128	@ 0x80
 801345a:	a922      	add	r1, sp, #136	@ 0x88
 801345c:	4640      	mov	r0, r8
 801345e:	f019 fe46 	bl	802d0ee <strncpy>
						web_tokens[i].expare = mg_now() + token_life_time;
 8013462:	f016 fe4d 	bl	802a100 <mg_now>
 8013466:	4b25      	ldr	r3, [pc, #148]	@ (80134fc <auth+0x1c0>)
 8013468:	18c0      	adds	r0, r0, r3
 801346a:	f141 0100 	adc.w	r1, r1, #0
 801346e:	f8c8 00b0 	str.w	r0, [r8, #176]	@ 0xb0
 8013472:	f8c8 10b4 	str.w	r1, [r8, #180]	@ 0xb4
						mg_random_str(web_tokens[i].token, sha1_str_len -1);
 8013476:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 801347a:	2128      	movs	r1, #40	@ 0x28
 801347c:	4448      	add	r0, r9
 801347e:	f012 fded 	bl	802605c <mg_random_str>
						if (set_cookie)handle_login(c, &web_tokens[i]);
 8013482:	2e00      	cmp	r6, #0
 8013484:	d193      	bne.n	80133ae <auth+0x72>
						logging(L_INFO, "User: %s is authenticated", web_tokens[i].user);
 8013486:	4642      	mov	r2, r8
 8013488:	491e      	ldr	r1, [pc, #120]	@ (8013504 <auth+0x1c8>)
 801348a:	2001      	movs	r0, #1
 801348c:	f7fe fe8c 	bl	80121a8 <logging>
						return true;
 8013490:	2001      	movs	r0, #1
 8013492:	e02b      	b.n	80134ec <auth+0x1b0>
	return false;
 8013494:	2000      	movs	r0, #0
 8013496:	e029      	b.n	80134ec <auth+0x1b0>
				        		"{\"status\":\"success\",\"message\":\"Token is valid\", \"user\": \"%s\"}\r\n", web_tokens[i].user);
 8013498:	22b8      	movs	r2, #184	@ 0xb8
 801349a:	4b19      	ldr	r3, [pc, #100]	@ (8013500 <auth+0x1c4>)
 801349c:	fb02 3304 	mla	r3, r2, r4, r3
				if (set_cookie) mg_http_reply(c, 200, headers,
 80134a0:	9300      	str	r3, [sp, #0]
 80134a2:	4b1a      	ldr	r3, [pc, #104]	@ (801350c <auth+0x1d0>)
 80134a4:	4a1a      	ldr	r2, [pc, #104]	@ (8013510 <auth+0x1d4>)
 80134a6:	21c8      	movs	r1, #200	@ 0xc8
 80134a8:	4628      	mov	r0, r5
 80134aa:	f011 f8df 	bl	802466c <mg_http_reply>
 80134ae:	e016      	b.n	80134de <auth+0x1a2>
		for (i=0;i<user_list_size; i++){
 80134b0:	3401      	adds	r4, #1
 80134b2:	2c09      	cmp	r4, #9
 80134b4:	dc17      	bgt.n	80134e6 <auth+0x1aa>
			if((strcmp(web_tokens[i].token, pass) == 0 && web_tokens[i].user[0] != 0)){// && (web_tokens[i].expare > mg_now())
 80134b6:	23b8      	movs	r3, #184	@ 0xb8
 80134b8:	fb04 f303 	mul.w	r3, r4, r3
 80134bc:	3380      	adds	r3, #128	@ 0x80
 80134be:	a902      	add	r1, sp, #8
 80134c0:	480f      	ldr	r0, [pc, #60]	@ (8013500 <auth+0x1c4>)
 80134c2:	4418      	add	r0, r3
 80134c4:	f7fc fe8c 	bl	80101e0 <strcmp>
 80134c8:	2800      	cmp	r0, #0
 80134ca:	d1f1      	bne.n	80134b0 <auth+0x174>
 80134cc:	23b8      	movs	r3, #184	@ 0xb8
 80134ce:	fb04 f303 	mul.w	r3, r4, r3
 80134d2:	4a0b      	ldr	r2, [pc, #44]	@ (8013500 <auth+0x1c4>)
 80134d4:	5cd3      	ldrb	r3, [r2, r3]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d0ea      	beq.n	80134b0 <auth+0x174>
				if (set_cookie) mg_http_reply(c, 200, headers,
 80134da:	2e00      	cmp	r6, #0
 80134dc:	d1dc      	bne.n	8013498 <auth+0x15c>
				return true;
 80134de:	2001      	movs	r0, #1
 80134e0:	e004      	b.n	80134ec <auth+0x1b0>
		for (i=0;i<user_list_size; i++){
 80134e2:	2400      	movs	r4, #0
 80134e4:	e7e5      	b.n	80134b2 <auth+0x176>
	return false;
 80134e6:	2000      	movs	r0, #0
 80134e8:	e000      	b.n	80134ec <auth+0x1b0>
 80134ea:	2000      	movs	r0, #0
}
 80134ec:	b065      	add	sp, #404	@ 0x194
 80134ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80134f2:	bf00      	nop
 80134f4:	080371bc 	.word	0x080371bc
 80134f8:	20001b90 	.word	0x20001b90
 80134fc:	0a4cb800 	.word	0x0a4cb800
 8013500:	20001ad8 	.word	0x20001ad8
 8013504:	080371dc 	.word	0x080371dc
 8013508:	20002208 	.word	0x20002208
 801350c:	080371f8 	.word	0x080371f8
 8013510:	08036d30 	.word	0x08036d30

08013514 <handler_authanticate>:
static void handler_authanticate(struct mg_connection *c,struct mg_http_message *hm){
 8013514:	b510      	push	{r4, lr}
 8013516:	4604      	mov	r4, r0
	if ( auth(c, hm, 1) ){
 8013518:	2201      	movs	r2, #1
 801351a:	f7ff ff0f 	bl	801333c <auth>
 801351e:	b100      	cbz	r0, 8013522 <handler_authanticate+0xe>
}
 8013520:	bd10      	pop	{r4, pc}
        mg_http_reply(c, 403, headers, //TODO delete for release,
 8013522:	4b04      	ldr	r3, [pc, #16]	@ (8013534 <handler_authanticate+0x20>)
 8013524:	4a04      	ldr	r2, [pc, #16]	@ (8013538 <handler_authanticate+0x24>)
 8013526:	f240 1193 	movw	r1, #403	@ 0x193
 801352a:	4620      	mov	r0, r4
 801352c:	f011 f89e 	bl	802466c <mg_http_reply>
}
 8013530:	e7f6      	b.n	8013520 <handler_authanticate+0xc>
 8013532:	bf00      	nop
 8013534:	08037238 	.word	0x08037238
 8013538:	08036d30 	.word	0x08036d30

0801353c <handle_ram_status_get>:
static void handle_ram_status_get(struct mg_connection *c){
 801353c:	b510      	push	{r4, lr}
 801353e:	b090      	sub	sp, #64	@ 0x40
 8013540:	4604      	mov	r4, r0
	vPortGetHeapStats(&heap_status);
 8013542:	a809      	add	r0, sp, #36	@ 0x24
 8013544:	f007 fe00 	bl	801b148 <vPortGetHeapStats>
    mg_http_reply(c, 200, "Content-Type: application/json\r\n"
 8013548:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801354a:	9306      	str	r3, [sp, #24]
 801354c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801354e:	9305      	str	r3, [sp, #20]
 8013550:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013552:	9304      	str	r3, [sp, #16]
 8013554:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013556:	9303      	str	r3, [sp, #12]
 8013558:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801355a:	9302      	str	r3, [sp, #8]
 801355c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801355e:	9301      	str	r3, [sp, #4]
 8013560:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013562:	9300      	str	r3, [sp, #0]
 8013564:	4b03      	ldr	r3, [pc, #12]	@ (8013574 <handle_ram_status_get+0x38>)
 8013566:	4a04      	ldr	r2, [pc, #16]	@ (8013578 <handle_ram_status_get+0x3c>)
 8013568:	21c8      	movs	r1, #200	@ 0xc8
 801356a:	4620      	mov	r0, r4
 801356c:	f011 f87e 	bl	802466c <mg_http_reply>
}
 8013570:	b010      	add	sp, #64	@ 0x40
 8013572:	bd10      	pop	{r4, pc}
 8013574:	08037268 	.word	0x08037268
 8013578:	0803736c 	.word	0x0803736c

0801357c <handle_io_status_get>:
static void handle_io_status_get(struct mg_connection *c, struct mg_http_message *hm){
 801357c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801357e:	b091      	sub	sp, #68	@ 0x44
 8013580:	4606      	mov	r6, r0
 8013582:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8013584:	ad0c      	add	r5, sp, #48	@ 0x30
 8013586:	494b      	ldr	r1, [pc, #300]	@ (80136b4 <handle_io_status_get+0x138>)
 8013588:	4628      	mov	r0, r5
 801358a:	f011 f9f9 	bl	8024980 <mg_str_s>
 801358e:	2300      	movs	r3, #0
 8013590:	9300      	str	r3, [sp, #0]
 8013592:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013596:	e894 0003 	ldmia.w	r4, {r0, r1}
 801359a:	f011 fc13 	bl	8024dc4 <mg_match>
 801359e:	b328      	cbz	r0, 80135ec <handle_io_status_get+0x70>
		r_w_parameter(status.inputs, S_INPUTS, S_READ);
 80135a0:	4c45      	ldr	r4, [pc, #276]	@ (80136b8 <handle_io_status_get+0x13c>)
 80135a2:	6823      	ldr	r3, [r4, #0]
 80135a4:	2200      	movs	r2, #0
 80135a6:	2101      	movs	r1, #1
 80135a8:	a80a      	add	r0, sp, #40	@ 0x28
 80135aa:	4798      	blx	r3
		r_w_parameter(status.outputs, S_OUTPUTS, S_READ);
 80135ac:	6823      	ldr	r3, [r4, #0]
 80135ae:	2200      	movs	r2, #0
 80135b0:	2102      	movs	r1, #2
 80135b2:	f10d 002b 	add.w	r0, sp, #43	@ 0x2b
 80135b6:	4798      	blx	r3
						status.inputs[0], status.inputs[1], status.inputs[2],
 80135b8:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 80135bc:	f89d 2029 	ldrb.w	r2, [sp, #41]	@ 0x29
 80135c0:	f89d 102a 	ldrb.w	r1, [sp, #42]	@ 0x2a
						status.outputs[0], status.outputs[1], status.outputs[2]
 80135c4:	f89d 002b 	ldrb.w	r0, [sp, #43]	@ 0x2b
 80135c8:	f89d 402c 	ldrb.w	r4, [sp, #44]	@ 0x2c
 80135cc:	f89d 502d 	ldrb.w	r5, [sp, #45]	@ 0x2d
		mg_http_reply(c, 200, headers, //TODO delete for release,
 80135d0:	9505      	str	r5, [sp, #20]
 80135d2:	9404      	str	r4, [sp, #16]
 80135d4:	9003      	str	r0, [sp, #12]
 80135d6:	9102      	str	r1, [sp, #8]
 80135d8:	9201      	str	r2, [sp, #4]
 80135da:	9300      	str	r3, [sp, #0]
 80135dc:	4b37      	ldr	r3, [pc, #220]	@ (80136bc <handle_io_status_get+0x140>)
 80135de:	4a38      	ldr	r2, [pc, #224]	@ (80136c0 <handle_io_status_get+0x144>)
 80135e0:	21c8      	movs	r1, #200	@ 0xc8
 80135e2:	4630      	mov	r0, r6
 80135e4:	f011 f842 	bl	802466c <mg_http_reply>
}
 80135e8:	b011      	add	sp, #68	@ 0x44
 80135ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	}else if(mg_match(hm->method, mg_str("POST"), NULL)){
 80135ec:	ad0e      	add	r5, sp, #56	@ 0x38
 80135ee:	4935      	ldr	r1, [pc, #212]	@ (80136c4 <handle_io_status_get+0x148>)
 80135f0:	4628      	mov	r0, r5
 80135f2:	f011 f9c5 	bl	8024980 <mg_str_s>
 80135f6:	2300      	movs	r3, #0
 80135f8:	9300      	str	r3, [sp, #0]
 80135fa:	e895 000c 	ldmia.w	r5, {r2, r3}
 80135fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013602:	f011 fbdf 	bl	8024dc4 <mg_match>
 8013606:	2800      	cmp	r0, #0
 8013608:	d04b      	beq.n	80136a2 <handle_io_status_get+0x126>
		if (mg_json_get_num(hm->body, "$.relay_id", &tmp1) > 0 &&
 801360a:	ab08      	add	r3, sp, #32
 801360c:	4a2e      	ldr	r2, [pc, #184]	@ (80136c8 <handle_io_status_get+0x14c>)
 801360e:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 8013612:	c903      	ldmia	r1, {r0, r1}
 8013614:	f010 f8f0 	bl	80237f8 <mg_json_get_num>
 8013618:	2800      	cmp	r0, #0
 801361a:	d03a      	beq.n	8013692 <handle_io_status_get+0x116>
			mg_json_get_num(hm->body, "$.state", &tmp2) > 0){
 801361c:	ab0a      	add	r3, sp, #40	@ 0x28
 801361e:	4a2b      	ldr	r2, [pc, #172]	@ (80136cc <handle_io_status_get+0x150>)
 8013620:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 8013624:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013628:	f010 f8e6 	bl	80237f8 <mg_json_get_num>
		if (mg_json_get_num(hm->body, "$.relay_id", &tmp1) > 0 &&
 801362c:	2800      	cmp	r0, #0
 801362e:	d030      	beq.n	8013692 <handle_io_status_get+0x116>
			relay_id = (uint8_t) tmp1;
 8013630:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013634:	f7fd fad0 	bl	8010bd8 <__aeabi_d2uiz>
 8013638:	b2c4      	uxtb	r4, r0
			state = (uint8_t) tmp2;
 801363a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801363e:	f7fd facb 	bl	8010bd8 <__aeabi_d2uiz>
 8013642:	b2c5      	uxtb	r5, r0
			if (relay_id > 0 && relay_id <= OUTPUTS_COUNT && (state == 0 || state == 1)) {
 8013644:	1e63      	subs	r3, r4, #1
 8013646:	b2db      	uxtb	r3, r3
 8013648:	2b02      	cmp	r3, #2
 801364a:	d801      	bhi.n	8013650 <handle_io_status_get+0xd4>
 801364c:	2d01      	cmp	r5, #1
 801364e:	d907      	bls.n	8013660 <handle_io_status_get+0xe4>
                mg_http_reply(c, 400, headers, //TODO delete for release,
 8013650:	4b1f      	ldr	r3, [pc, #124]	@ (80136d0 <handle_io_status_get+0x154>)
 8013652:	4a1b      	ldr	r2, [pc, #108]	@ (80136c0 <handle_io_status_get+0x144>)
 8013654:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013658:	4630      	mov	r0, r6
 801365a:	f011 f807 	bl	802466c <mg_http_reply>
 801365e:	e7c3      	b.n	80135e8 <handle_io_status_get+0x6c>
				r_w_parameter(output_status, S_OUTPUTS, S_READ);
 8013660:	4f15      	ldr	r7, [pc, #84]	@ (80136b8 <handle_io_status_get+0x13c>)
 8013662:	683b      	ldr	r3, [r7, #0]
 8013664:	2200      	movs	r2, #0
 8013666:	2102      	movs	r1, #2
 8013668:	a807      	add	r0, sp, #28
 801366a:	4798      	blx	r3
				output_status[relay_id-1] = state;  // make -1 for make human understandable
 801366c:	f104 033f 	add.w	r3, r4, #63	@ 0x3f
 8013670:	446b      	add	r3, sp
 8013672:	f803 5c24 	strb.w	r5, [r3, #-36]
				r_w_parameter(output_status, S_OUTPUTS, S_WRITE);
 8013676:	683b      	ldr	r3, [r7, #0]
 8013678:	2201      	movs	r2, #1
 801367a:	2102      	movs	r1, #2
 801367c:	a807      	add	r0, sp, #28
 801367e:	4798      	blx	r3
				mg_http_reply(c, 200, headers , //TODO delete for release,
 8013680:	9501      	str	r5, [sp, #4]
 8013682:	9400      	str	r4, [sp, #0]
 8013684:	4b13      	ldr	r3, [pc, #76]	@ (80136d4 <handle_io_status_get+0x158>)
 8013686:	4a0e      	ldr	r2, [pc, #56]	@ (80136c0 <handle_io_status_get+0x144>)
 8013688:	21c8      	movs	r1, #200	@ 0xc8
 801368a:	4630      	mov	r0, r6
 801368c:	f010 ffee 	bl	802466c <mg_http_reply>
 8013690:	e7aa      	b.n	80135e8 <handle_io_status_get+0x6c>
            mg_http_reply(c, 400, headers, //TODO delete for release,
 8013692:	4b11      	ldr	r3, [pc, #68]	@ (80136d8 <handle_io_status_get+0x15c>)
 8013694:	4a0a      	ldr	r2, [pc, #40]	@ (80136c0 <handle_io_status_get+0x144>)
 8013696:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801369a:	4630      	mov	r0, r6
 801369c:	f010 ffe6 	bl	802466c <mg_http_reply>
 80136a0:	e7a2      	b.n	80135e8 <handle_io_status_get+0x6c>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 80136a2:	4b0e      	ldr	r3, [pc, #56]	@ (80136dc <handle_io_status_get+0x160>)
 80136a4:	4a06      	ldr	r2, [pc, #24]	@ (80136c0 <handle_io_status_get+0x144>)
 80136a6:	f240 1195 	movw	r1, #405	@ 0x195
 80136aa:	4630      	mov	r0, r6
 80136ac:	f010 ffde 	bl	802466c <mg_http_reply>
}
 80136b0:	e79a      	b.n	80135e8 <handle_io_status_get+0x6c>
 80136b2:	bf00      	nop
 80136b4:	08036cf4 	.word	0x08036cf4
 80136b8:	200028a4 	.word	0x200028a4
 80136bc:	080373b0 	.word	0x080373b0
 80136c0:	08036d30 	.word	0x08036d30
 80136c4:	08036e88 	.word	0x08036e88
 80136c8:	080373e4 	.word	0x080373e4
 80136cc:	080373f0 	.word	0x080373f0
 80136d0:	08037430 	.word	0x08037430
 80136d4:	080373f8 	.word	0x080373f8
 80136d8:	0803746c 	.word	0x0803746c
 80136dc:	080374a8 	.word	0x080374a8

080136e0 <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 80136e0:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 80136e2:	fb01 f400 	mul.w	r4, r1, r0
 80136e6:	4620      	mov	r0, r4
 80136e8:	f007 fc6e 	bl	801afc8 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 80136ec:	4605      	mov	r5, r0
 80136ee:	b118      	cbz	r0, 80136f8 <mg_calloc+0x18>
 80136f0:	4622      	mov	r2, r4
 80136f2:	2100      	movs	r1, #0
 80136f4:	f019 fcb4 	bl	802d060 <memset>
}
 80136f8:	4628      	mov	r0, r5
 80136fa:	bd38      	pop	{r3, r4, r5, pc}

080136fc <handle_mqtt_conf>:
static void handle_mqtt_conf(struct mg_connection *c, struct mg_http_message *hm){
 80136fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80136fe:	b08b      	sub	sp, #44	@ 0x2c
 8013700:	4606      	mov	r6, r0
 8013702:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8013704:	ad06      	add	r5, sp, #24
 8013706:	4984      	ldr	r1, [pc, #528]	@ (8013918 <handle_mqtt_conf+0x21c>)
 8013708:	4628      	mov	r0, r5
 801370a:	f011 f939 	bl	8024980 <mg_str_s>
 801370e:	2300      	movs	r3, #0
 8013710:	9300      	str	r3, [sp, #0]
 8013712:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013716:	e894 0003 	ldmia.w	r4, {r0, r1}
 801371a:	f011 fb53 	bl	8024dc4 <mg_match>
 801371e:	2800      	cmp	r0, #0
 8013720:	d03b      	beq.n	801379a <handle_mqtt_conf+0x9e>
		MQTT_cred_struct * mqtt_config = (MQTT_cred_struct *) calloc(1, sizeof(MQTT_cred_struct));
 8013722:	21c6      	movs	r1, #198	@ 0xc6
 8013724:	2001      	movs	r0, #1
 8013726:	f7ff ffdb 	bl	80136e0 <mg_calloc>
		if (mqtt_config == NULL) {
 801372a:	4605      	mov	r5, r0
 801372c:	b340      	cbz	r0, 8013780 <handle_mqtt_conf+0x84>
		r_w_parameter(mqtt_config, S_MQTT, S_READ);
 801372e:	4b7b      	ldr	r3, [pc, #492]	@ (801391c <handle_mqtt_conf+0x220>)
 8013730:	681b      	ldr	r3, [r3, #0]
 8013732:	2200      	movs	r2, #0
 8013734:	4611      	mov	r1, r2
 8013736:	4798      	blx	r3
		pass_len = strlen(mqtt_config->pass);
 8013738:	f105 07a5 	add.w	r7, r5, #165	@ 0xa5
 801373c:	4638      	mov	r0, r7
 801373e:	f7fc fdaf 	bl	80102a0 <strlen>
		memset(mqtt_config->pass, 42,pass_len); // маскируем пароль
 8013742:	b2c4      	uxtb	r4, r0
 8013744:	4622      	mov	r2, r4
 8013746:	212a      	movs	r1, #42	@ 0x2a
 8013748:	4638      	mov	r0, r7
 801374a:	f019 fc89 	bl	802d060 <memset>
		mqtt_config->pass[pass_len] = '\0'; // добавляем null-terminator
 801374e:	442c      	add	r4, r5
 8013750:	2300      	movs	r3, #0
 8013752:	f884 30a5 	strb.w	r3, [r4, #165]	@ 0xa5
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 8013756:	786b      	ldrb	r3, [r5, #1]
 8013758:	b1eb      	cbz	r3, 8013796 <handle_mqtt_conf+0x9a>
 801375a:	4b71      	ldr	r3, [pc, #452]	@ (8013920 <handle_mqtt_conf+0x224>)
						mqtt_config->uri, mqtt_config->login, mqtt_config->pass);
 801375c:	1caa      	adds	r2, r5, #2
 801375e:	f105 0184 	add.w	r1, r5, #132	@ 0x84
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 8013762:	9703      	str	r7, [sp, #12]
 8013764:	9102      	str	r1, [sp, #8]
 8013766:	9201      	str	r2, [sp, #4]
 8013768:	9300      	str	r3, [sp, #0]
 801376a:	4b6e      	ldr	r3, [pc, #440]	@ (8013924 <handle_mqtt_conf+0x228>)
 801376c:	4a6e      	ldr	r2, [pc, #440]	@ (8013928 <handle_mqtt_conf+0x22c>)
 801376e:	21c8      	movs	r1, #200	@ 0xc8
 8013770:	4630      	mov	r0, r6
 8013772:	f010 ff7b 	bl	802466c <mg_http_reply>
		free(mqtt_config);
 8013776:	4628      	mov	r0, r5
 8013778:	f007 fca8 	bl	801b0cc <vPortFree>
}
 801377c:	b00b      	add	sp, #44	@ 0x2c
 801377e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			mg_http_reply(c, 500, headers, "{\"status\":\"error\",\"message\":\"Memory allocation failed\"}\r\n");
 8013780:	4b6a      	ldr	r3, [pc, #424]	@ (801392c <handle_mqtt_conf+0x230>)
 8013782:	4a69      	ldr	r2, [pc, #420]	@ (8013928 <handle_mqtt_conf+0x22c>)
 8013784:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013788:	4630      	mov	r0, r6
 801378a:	f010 ff6f 	bl	802466c <mg_http_reply>
			free(mqtt_config);
 801378e:	4628      	mov	r0, r5
 8013790:	f007 fc9c 	bl	801b0cc <vPortFree>
			return;
 8013794:	e7f2      	b.n	801377c <handle_mqtt_conf+0x80>
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 8013796:	4b66      	ldr	r3, [pc, #408]	@ (8013930 <handle_mqtt_conf+0x234>)
 8013798:	e7e0      	b.n	801375c <handle_mqtt_conf+0x60>
	}else if(mg_match(hm->method, mg_str("POST"), NULL)){
 801379a:	ad08      	add	r5, sp, #32
 801379c:	4965      	ldr	r1, [pc, #404]	@ (8013934 <handle_mqtt_conf+0x238>)
 801379e:	4628      	mov	r0, r5
 80137a0:	f011 f8ee 	bl	8024980 <mg_str_s>
 80137a4:	2300      	movs	r3, #0
 80137a6:	9300      	str	r3, [sp, #0]
 80137a8:	e895 000c 	ldmia.w	r5, {r2, r3}
 80137ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80137b0:	f011 fb08 	bl	8024dc4 <mg_match>
 80137b4:	2800      	cmp	r0, #0
 80137b6:	f000 80a7 	beq.w	8013908 <handle_mqtt_conf+0x20c>
		MQTT_cred_struct * mqtt_config = (MQTT_cred_struct *) calloc(1, sizeof(MQTT_cred_struct));
 80137ba:	21c6      	movs	r1, #198	@ 0xc6
 80137bc:	2001      	movs	r0, #1
 80137be:	f7ff ff8f 	bl	80136e0 <mg_calloc>
		if (mqtt_config == NULL) {
 80137c2:	4605      	mov	r5, r0
 80137c4:	b310      	cbz	r0, 801380c <handle_mqtt_conf+0x110>
		if(mg_json_get(hm->body, "$", &length) < 0){//JSON validation err
 80137c6:	ab05      	add	r3, sp, #20
 80137c8:	4a5b      	ldr	r2, [pc, #364]	@ (8013938 <handle_mqtt_conf+0x23c>)
 80137ca:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 80137ce:	c903      	ldmia	r1, {r0, r1}
 80137d0:	f00f fda8 	bl	8023324 <mg_json_get>
 80137d4:	2800      	cmp	r0, #0
 80137d6:	db24      	blt.n	8013822 <handle_mqtt_conf+0x126>
			mg_json_get_bool(hm->body, "$.enabled", &mqtt_config->enable);
 80137d8:	1c6b      	adds	r3, r5, #1
 80137da:	4a58      	ldr	r2, [pc, #352]	@ (801393c <handle_mqtt_conf+0x240>)
 80137dc:	f504 7700 	add.w	r7, r4, #512	@ 0x200
 80137e0:	e897 0003 	ldmia.w	r7, {r0, r1}
 80137e4:	f010 f82e 	bl	8023844 <mg_json_get_bool>
			if ((broker = mg_json_get_str(hm->body, "$.broker"))){
 80137e8:	4a55      	ldr	r2, [pc, #340]	@ (8013940 <handle_mqtt_conf+0x244>)
 80137ea:	e897 0003 	ldmia.w	r7, {r0, r1}
 80137ee:	f012 f9b7 	bl	8025b60 <mg_json_get_str>
 80137f2:	4607      	mov	r7, r0
 80137f4:	b328      	cbz	r0, 8013842 <handle_mqtt_conf+0x146>
				if((err=is_valid_mqtt_url(broker))==0){  //Validate MQTT URI
 80137f6:	f016 fe9f 	bl	802a538 <is_valid_mqtt_url>
 80137fa:	4603      	mov	r3, r0
 80137fc:	b1e0      	cbz	r0, 8013838 <handle_mqtt_conf+0x13c>
					switch (err) {
 80137fe:	3304      	adds	r3, #4
 8013800:	2b03      	cmp	r3, #3
 8013802:	d879      	bhi.n	80138f8 <handle_mqtt_conf+0x1fc>
 8013804:	e8df f003 	tbb	[pc, r3]
 8013808:	52606870 	.word	0x52606870
			mg_http_reply(c, 500, headers, "{\"status\":\"error\",\"message\":\"Memory allocation failed\"}\r\n");
 801380c:	4b47      	ldr	r3, [pc, #284]	@ (801392c <handle_mqtt_conf+0x230>)
 801380e:	4a46      	ldr	r2, [pc, #280]	@ (8013928 <handle_mqtt_conf+0x22c>)
 8013810:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013814:	4630      	mov	r0, r6
 8013816:	f010 ff29 	bl	802466c <mg_http_reply>
			free(mqtt_config);
 801381a:	4628      	mov	r0, r5
 801381c:	f007 fc56 	bl	801b0cc <vPortFree>
			return;
 8013820:	e7ac      	b.n	801377c <handle_mqtt_conf+0x80>
			mg_http_reply(c, 400, headers, //TODO delete for release,
 8013822:	4b48      	ldr	r3, [pc, #288]	@ (8013944 <handle_mqtt_conf+0x248>)
 8013824:	4a40      	ldr	r2, [pc, #256]	@ (8013928 <handle_mqtt_conf+0x22c>)
 8013826:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801382a:	4630      	mov	r0, r6
 801382c:	f010 ff1e 	bl	802466c <mg_http_reply>
		free(mqtt_config);
 8013830:	4628      	mov	r0, r5
 8013832:	f007 fc4b 	bl	801b0cc <vPortFree>
 8013836:	e7a1      	b.n	801377c <handle_mqtt_conf+0x80>
					strncpy(mqtt_config->uri, broker, MAX_MQTT_URL_LEN -1);
 8013838:	227f      	movs	r2, #127	@ 0x7f
 801383a:	4639      	mov	r1, r7
 801383c:	1ca8      	adds	r0, r5, #2
 801383e:	f019 fc56 	bl	802d0ee <strncpy>
			free(broker);
 8013842:	4638      	mov	r0, r7
 8013844:	f007 fc42 	bl	801b0cc <vPortFree>
			if((username = mg_json_get_str(hm->body, "$.username"))){
 8013848:	4a3f      	ldr	r2, [pc, #252]	@ (8013948 <handle_mqtt_conf+0x24c>)
 801384a:	f504 7300 	add.w	r3, r4, #512	@ 0x200
 801384e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013852:	f012 f985 	bl	8025b60 <mg_json_get_str>
 8013856:	4607      	mov	r7, r0
 8013858:	b128      	cbz	r0, 8013866 <handle_mqtt_conf+0x16a>
				strncpy(mqtt_config->login, username, MAX_MQTT_LOGIN_LEN -1);
 801385a:	2220      	movs	r2, #32
 801385c:	4601      	mov	r1, r0
 801385e:	f105 0084 	add.w	r0, r5, #132	@ 0x84
 8013862:	f019 fc44 	bl	802d0ee <strncpy>
			free(username);
 8013866:	4638      	mov	r0, r7
 8013868:	f007 fc30 	bl	801b0cc <vPortFree>
			if((password = mg_json_get_str(hm->body, "$.password"))){
 801386c:	4a37      	ldr	r2, [pc, #220]	@ (801394c <handle_mqtt_conf+0x250>)
 801386e:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 8013872:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013876:	f012 f973 	bl	8025b60 <mg_json_get_str>
 801387a:	4604      	mov	r4, r0
 801387c:	b128      	cbz	r0, 801388a <handle_mqtt_conf+0x18e>
				strncpy(mqtt_config->pass, password, MAX_MQTT_PASS_LEN -1);
 801387e:	2220      	movs	r2, #32
 8013880:	4601      	mov	r1, r0
 8013882:	f105 00a5 	add.w	r0, r5, #165	@ 0xa5
 8013886:	f019 fc32 	bl	802d0ee <strncpy>
			free(password);
 801388a:	4620      	mov	r0, r4
 801388c:	f007 fc1e 	bl	801b0cc <vPortFree>
			mqtt_config->save = 1;
 8013890:	2201      	movs	r2, #1
 8013892:	702a      	strb	r2, [r5, #0]
			r_w_parameter(mqtt_config, S_MQTT, S_WRITE);
 8013894:	4b21      	ldr	r3, [pc, #132]	@ (801391c <handle_mqtt_conf+0x220>)
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	2100      	movs	r1, #0
 801389a:	4628      	mov	r0, r5
 801389c:	4798      	blx	r3
			mg_http_reply(c, 200, headers, //TODO delete for release,
 801389e:	4b2c      	ldr	r3, [pc, #176]	@ (8013950 <handle_mqtt_conf+0x254>)
 80138a0:	4a21      	ldr	r2, [pc, #132]	@ (8013928 <handle_mqtt_conf+0x22c>)
 80138a2:	21c8      	movs	r1, #200	@ 0xc8
 80138a4:	4630      	mov	r0, r6
 80138a6:	f010 fee1 	bl	802466c <mg_http_reply>
 80138aa:	e7c1      	b.n	8013830 <handle_mqtt_conf+0x134>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 80138ac:	4b29      	ldr	r3, [pc, #164]	@ (8013954 <handle_mqtt_conf+0x258>)
 80138ae:	4a1e      	ldr	r2, [pc, #120]	@ (8013928 <handle_mqtt_conf+0x22c>)
 80138b0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80138b4:	4630      	mov	r0, r6
 80138b6:	f010 fed9 	bl	802466c <mg_http_reply>
					free(broker);
 80138ba:	4638      	mov	r0, r7
 80138bc:	f007 fc06 	bl	801b0cc <vPortFree>
					free(mqtt_config);
 80138c0:	4628      	mov	r0, r5
 80138c2:	f007 fc03 	bl	801b0cc <vPortFree>
					return;
 80138c6:	e759      	b.n	801377c <handle_mqtt_conf+0x80>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 80138c8:	4b23      	ldr	r3, [pc, #140]	@ (8013958 <handle_mqtt_conf+0x25c>)
 80138ca:	4a17      	ldr	r2, [pc, #92]	@ (8013928 <handle_mqtt_conf+0x22c>)
 80138cc:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80138d0:	4630      	mov	r0, r6
 80138d2:	f010 fecb 	bl	802466c <mg_http_reply>
							break;
 80138d6:	e7f0      	b.n	80138ba <handle_mqtt_conf+0x1be>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 80138d8:	4b20      	ldr	r3, [pc, #128]	@ (801395c <handle_mqtt_conf+0x260>)
 80138da:	4a13      	ldr	r2, [pc, #76]	@ (8013928 <handle_mqtt_conf+0x22c>)
 80138dc:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80138e0:	4630      	mov	r0, r6
 80138e2:	f010 fec3 	bl	802466c <mg_http_reply>
							break;
 80138e6:	e7e8      	b.n	80138ba <handle_mqtt_conf+0x1be>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 80138e8:	4b1d      	ldr	r3, [pc, #116]	@ (8013960 <handle_mqtt_conf+0x264>)
 80138ea:	4a0f      	ldr	r2, [pc, #60]	@ (8013928 <handle_mqtt_conf+0x22c>)
 80138ec:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80138f0:	4630      	mov	r0, r6
 80138f2:	f010 febb 	bl	802466c <mg_http_reply>
							break;
 80138f6:	e7e0      	b.n	80138ba <handle_mqtt_conf+0x1be>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 80138f8:	4b1a      	ldr	r3, [pc, #104]	@ (8013964 <handle_mqtt_conf+0x268>)
 80138fa:	4a0b      	ldr	r2, [pc, #44]	@ (8013928 <handle_mqtt_conf+0x22c>)
 80138fc:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013900:	4630      	mov	r0, r6
 8013902:	f010 feb3 	bl	802466c <mg_http_reply>
							break;
 8013906:	e7d8      	b.n	80138ba <handle_mqtt_conf+0x1be>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8013908:	4b17      	ldr	r3, [pc, #92]	@ (8013968 <handle_mqtt_conf+0x26c>)
 801390a:	4a07      	ldr	r2, [pc, #28]	@ (8013928 <handle_mqtt_conf+0x22c>)
 801390c:	f240 1195 	movw	r1, #405	@ 0x195
 8013910:	4630      	mov	r0, r6
 8013912:	f010 feab 	bl	802466c <mg_http_reply>
 8013916:	e731      	b.n	801377c <handle_mqtt_conf+0x80>
 8013918:	08036cf4 	.word	0x08036cf4
 801391c:	200028a4 	.word	0x200028a4
 8013920:	080374fc 	.word	0x080374fc
 8013924:	08037548 	.word	0x08037548
 8013928:	08036d30 	.word	0x08036d30
 801392c:	0803750c 	.word	0x0803750c
 8013930:	08037504 	.word	0x08037504
 8013934:	08036e88 	.word	0x08036e88
 8013938:	08037590 	.word	0x08037590
 801393c:	080375c4 	.word	0x080375c4
 8013940:	080375d0 	.word	0x080375d0
 8013944:	08037594 	.word	0x08037594
 8013948:	08037718 	.word	0x08037718
 801394c:	08037724 	.word	0x08037724
 8013950:	08037730 	.word	0x08037730
 8013954:	080375dc 	.word	0x080375dc
 8013958:	08037620 	.word	0x08037620
 801395c:	0803766c 	.word	0x0803766c
 8013960:	080376ac 	.word	0x080376ac
 8013964:	080376e4 	.word	0x080376e4
 8013968:	080374a8 	.word	0x080374a8

0801396c <handle_mb_tcp_access_list>:
static void handle_mb_tcp_access_list(struct mg_connection *c, struct mg_http_message *hm){
 801396c:	b570      	push	{r4, r5, r6, lr}
 801396e:	b08a      	sub	sp, #40	@ 0x28
 8013970:	4606      	mov	r6, r0
 8013972:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8013974:	ad04      	add	r5, sp, #16
 8013976:	495e      	ldr	r1, [pc, #376]	@ (8013af0 <handle_mb_tcp_access_list+0x184>)
 8013978:	4628      	mov	r0, r5
 801397a:	f011 f801 	bl	8024980 <mg_str_s>
 801397e:	2300      	movs	r3, #0
 8013980:	9300      	str	r3, [sp, #0]
 8013982:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013986:	e894 0003 	ldmia.w	r4, {r0, r1}
 801398a:	f011 fa1b 	bl	8024dc4 <mg_match>
 801398e:	2800      	cmp	r0, #0
 8013990:	d03d      	beq.n	8013a0e <handle_mb_tcp_access_list+0xa2>
		size_t acl_size = 0;
 8013992:	2200      	movs	r2, #0
 8013994:	9203      	str	r2, [sp, #12]
		mg_fs_lfs_status(ACL_FILE, &acl_size, NULL);
 8013996:	a903      	add	r1, sp, #12
 8013998:	4856      	ldr	r0, [pc, #344]	@ (8013af4 <handle_mb_tcp_access_list+0x188>)
 801399a:	f007 fc7d 	bl	801b298 <mg_fs_lfs_status>
		if (acl_size && (acl_size < ACL_FILE_MAX_SIZE)){
 801399e:	9803      	ldr	r0, [sp, #12]
 80139a0:	1e42      	subs	r2, r0, #1
 80139a2:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 80139a6:	429a      	cmp	r2, r3
 80139a8:	d829      	bhi.n	80139fe <handle_mb_tcp_access_list+0x92>
			acl = calloc(acl_size + 1, sizeof(char));
 80139aa:	2101      	movs	r1, #1
 80139ac:	4408      	add	r0, r1
 80139ae:	f7ff fe97 	bl	80136e0 <mg_calloc>
			if (acl == NULL){
 80139b2:	4604      	mov	r4, r0
 80139b4:	b1b8      	cbz	r0, 80139e6 <handle_mb_tcp_access_list+0x7a>
			void *fd = mg_fs_lfs_open(ACL_FILE, MG_FS_READ);
 80139b6:	2101      	movs	r1, #1
 80139b8:	484e      	ldr	r0, [pc, #312]	@ (8013af4 <handle_mb_tcp_access_list+0x188>)
 80139ba:	f007 fcab 	bl	801b314 <mg_fs_lfs_open>
 80139be:	4605      	mov	r5, r0
			mg_fs_lfs_read(fd, acl, acl_size);
 80139c0:	9a03      	ldr	r2, [sp, #12]
 80139c2:	4621      	mov	r1, r4
 80139c4:	f007 fcd6 	bl	801b374 <mg_fs_lfs_read>
			mg_fs_lfs_close(fd);
 80139c8:	4628      	mov	r0, r5
 80139ca:	f007 fcc7 	bl	801b35c <mg_fs_lfs_close>
	        mg_http_reply(c, 200, headers,
 80139ce:	9400      	str	r4, [sp, #0]
 80139d0:	4b49      	ldr	r3, [pc, #292]	@ (8013af8 <handle_mb_tcp_access_list+0x18c>)
 80139d2:	4a4a      	ldr	r2, [pc, #296]	@ (8013afc <handle_mb_tcp_access_list+0x190>)
 80139d4:	21c8      	movs	r1, #200	@ 0xc8
 80139d6:	4630      	mov	r0, r6
 80139d8:	f010 fe48 	bl	802466c <mg_http_reply>
	        free(acl);
 80139dc:	4620      	mov	r0, r4
 80139de:	f007 fb75 	bl	801b0cc <vPortFree>
}
 80139e2:	b00a      	add	sp, #40	@ 0x28
 80139e4:	bd70      	pop	{r4, r5, r6, pc}
		    	logging(L_ERR, "Memory allocation failed in handle_manage_user GET");
 80139e6:	4946      	ldr	r1, [pc, #280]	@ (8013b00 <handle_mb_tcp_access_list+0x194>)
 80139e8:	2003      	movs	r0, #3
 80139ea:	f7fe fbdd 	bl	80121a8 <logging>
		        mg_http_reply(c, 500, headers, "{\"error\": \"Memory allocation failed\"}");
 80139ee:	4b45      	ldr	r3, [pc, #276]	@ (8013b04 <handle_mb_tcp_access_list+0x198>)
 80139f0:	4a42      	ldr	r2, [pc, #264]	@ (8013afc <handle_mb_tcp_access_list+0x190>)
 80139f2:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80139f6:	4630      	mov	r0, r6
 80139f8:	f010 fe38 	bl	802466c <mg_http_reply>
		        return;
 80139fc:	e7f1      	b.n	80139e2 <handle_mb_tcp_access_list+0x76>
	        mg_http_reply(c, 500, headers,
 80139fe:	4b42      	ldr	r3, [pc, #264]	@ (8013b08 <handle_mb_tcp_access_list+0x19c>)
 8013a00:	4a3e      	ldr	r2, [pc, #248]	@ (8013afc <handle_mb_tcp_access_list+0x190>)
 8013a02:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013a06:	4630      	mov	r0, r6
 8013a08:	f010 fe30 	bl	802466c <mg_http_reply>
	        return;
 8013a0c:	e7e9      	b.n	80139e2 <handle_mb_tcp_access_list+0x76>
	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 8013a0e:	ad06      	add	r5, sp, #24
 8013a10:	493e      	ldr	r1, [pc, #248]	@ (8013b0c <handle_mb_tcp_access_list+0x1a0>)
 8013a12:	4628      	mov	r0, r5
 8013a14:	f010 ffb4 	bl	8024980 <mg_str_s>
 8013a18:	2300      	movs	r3, #0
 8013a1a:	9300      	str	r3, [sp, #0]
 8013a1c:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013a20:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013a24:	f011 f9ce 	bl	8024dc4 <mg_match>
 8013a28:	2800      	cmp	r0, #0
 8013a2a:	d058      	beq.n	8013ade <handle_mb_tcp_access_list+0x172>
		if (mg_json_get(hm->body, "$", &length) < 0) {
 8013a2c:	ab03      	add	r3, sp, #12
 8013a2e:	4a38      	ldr	r2, [pc, #224]	@ (8013b10 <handle_mb_tcp_access_list+0x1a4>)
 8013a30:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 8013a34:	c903      	ldmia	r1, {r0, r1}
 8013a36:	f00f fc75 	bl	8023324 <mg_json_get>
 8013a3a:	2800      	cmp	r0, #0
 8013a3c:	db34      	blt.n	8013aa8 <handle_mb_tcp_access_list+0x13c>
		acl = mg_json_get_str(hm->body, "$.access_list");
 8013a3e:	4a35      	ldr	r2, [pc, #212]	@ (8013b14 <handle_mb_tcp_access_list+0x1a8>)
 8013a40:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 8013a44:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013a48:	f012 f88a 	bl	8025b60 <mg_json_get_str>
		if (acl){
 8013a4c:	4604      	mov	r4, r0
 8013a4e:	2800      	cmp	r0, #0
 8013a50:	d03d      	beq.n	8013ace <handle_mb_tcp_access_list+0x162>
			if(mg_check_ip_acl(mg_str(acl),  &c->rem) < 0){
 8013a52:	ad08      	add	r5, sp, #32
 8013a54:	4601      	mov	r1, r0
 8013a56:	4628      	mov	r0, r5
 8013a58:	f010 ff92 	bl	8024980 <mg_str_s>
 8013a5c:	f106 021c 	add.w	r2, r6, #28
 8013a60:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013a64:	f012 fe9a 	bl	802679c <mg_check_ip_acl>
 8013a68:	2800      	cmp	r0, #0
 8013a6a:	db25      	blt.n	8013ab8 <handle_mb_tcp_access_list+0x14c>
				mg_fs_lfs_remove(ACL_FILE);
 8013a6c:	4d21      	ldr	r5, [pc, #132]	@ (8013af4 <handle_mb_tcp_access_list+0x188>)
 8013a6e:	4628      	mov	r0, r5
 8013a70:	f007 fcbe 	bl	801b3f0 <mg_fs_lfs_remove>
				void *fd1 = mg_fs_lfs_open(ACL_FILE, MG_FS_WRITE);
 8013a74:	2102      	movs	r1, #2
 8013a76:	4628      	mov	r0, r5
 8013a78:	f007 fc4c 	bl	801b314 <mg_fs_lfs_open>
 8013a7c:	4605      	mov	r5, r0
				mg_fs_lfs_write(fd1, acl, (strlen(acl) * sizeof(char)) + 1);
 8013a7e:	4620      	mov	r0, r4
 8013a80:	f7fc fc0e 	bl	80102a0 <strlen>
 8013a84:	1c42      	adds	r2, r0, #1
 8013a86:	4621      	mov	r1, r4
 8013a88:	4628      	mov	r0, r5
 8013a8a:	f007 fc7f 	bl	801b38c <mg_fs_lfs_write>
				mg_fs_lfs_close(fd1);
 8013a8e:	4628      	mov	r0, r5
 8013a90:	f007 fc64 	bl	801b35c <mg_fs_lfs_close>
				mg_http_reply(c, 200, headers,
 8013a94:	4b20      	ldr	r3, [pc, #128]	@ (8013b18 <handle_mb_tcp_access_list+0x1ac>)
 8013a96:	4a19      	ldr	r2, [pc, #100]	@ (8013afc <handle_mb_tcp_access_list+0x190>)
 8013a98:	21c8      	movs	r1, #200	@ 0xc8
 8013a9a:	4630      	mov	r0, r6
 8013a9c:	f010 fde6 	bl	802466c <mg_http_reply>
				free(acl);
 8013aa0:	4620      	mov	r0, r4
 8013aa2:	f007 fb13 	bl	801b0cc <vPortFree>
				return;
 8013aa6:	e79c      	b.n	80139e2 <handle_mb_tcp_access_list+0x76>
			mg_http_reply(c, 400, headers,
 8013aa8:	4b1c      	ldr	r3, [pc, #112]	@ (8013b1c <handle_mb_tcp_access_list+0x1b0>)
 8013aaa:	4a14      	ldr	r2, [pc, #80]	@ (8013afc <handle_mb_tcp_access_list+0x190>)
 8013aac:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013ab0:	4630      	mov	r0, r6
 8013ab2:	f010 fddb 	bl	802466c <mg_http_reply>
			return;
 8013ab6:	e794      	b.n	80139e2 <handle_mb_tcp_access_list+0x76>
				mg_http_reply(c, 400, headers,
 8013ab8:	4b19      	ldr	r3, [pc, #100]	@ (8013b20 <handle_mb_tcp_access_list+0x1b4>)
 8013aba:	4a10      	ldr	r2, [pc, #64]	@ (8013afc <handle_mb_tcp_access_list+0x190>)
 8013abc:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013ac0:	4630      	mov	r0, r6
 8013ac2:	f010 fdd3 	bl	802466c <mg_http_reply>
				free(acl);
 8013ac6:	4620      	mov	r0, r4
 8013ac8:	f007 fb00 	bl	801b0cc <vPortFree>
				return;
 8013acc:	e789      	b.n	80139e2 <handle_mb_tcp_access_list+0x76>
			mg_http_reply(c, 400, headers,
 8013ace:	4b15      	ldr	r3, [pc, #84]	@ (8013b24 <handle_mb_tcp_access_list+0x1b8>)
 8013ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8013afc <handle_mb_tcp_access_list+0x190>)
 8013ad2:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013ad6:	4630      	mov	r0, r6
 8013ad8:	f010 fdc8 	bl	802466c <mg_http_reply>
			return;
 8013adc:	e781      	b.n	80139e2 <handle_mb_tcp_access_list+0x76>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8013ade:	4b12      	ldr	r3, [pc, #72]	@ (8013b28 <handle_mb_tcp_access_list+0x1bc>)
 8013ae0:	4a06      	ldr	r2, [pc, #24]	@ (8013afc <handle_mb_tcp_access_list+0x190>)
 8013ae2:	f240 1195 	movw	r1, #405	@ 0x195
 8013ae6:	4630      	mov	r0, r6
 8013ae8:	f010 fdc0 	bl	802466c <mg_http_reply>
		return;
 8013aec:	e779      	b.n	80139e2 <handle_mb_tcp_access_list+0x76>
 8013aee:	bf00      	nop
 8013af0:	08036cf4 	.word	0x08036cf4
 8013af4:	08036c34 	.word	0x08036c34
 8013af8:	080377c8 	.word	0x080377c8
 8013afc:	08036d30 	.word	0x08036d30
 8013b00:	0803776c 	.word	0x0803776c
 8013b04:	080377a0 	.word	0x080377a0
 8013b08:	080377f4 	.word	0x080377f4
 8013b0c:	08036e88 	.word	0x08036e88
 8013b10:	08037590 	.word	0x08037590
 8013b14:	08037828 	.word	0x08037828
 8013b18:	08037870 	.word	0x08037870
 8013b1c:	08037594 	.word	0x08037594
 8013b20:	08037838 	.word	0x08037838
 8013b24:	080378c4 	.word	0x080378c4
 8013b28:	0803790c 	.word	0x0803790c

08013b2c <handle_dev_status>:
static void handle_dev_status(struct mg_connection *c, struct mg_http_message *hm){
 8013b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b30:	b0c7      	sub	sp, #284	@ 0x11c
 8013b32:	4681      	mov	r9, r0
 8013b34:	468a      	mov	sl, r1
	char   dev_status_template[] = "{\"mqtt_conn_status\": \"%s\", \"local_addr\": \"%s\", \"server_addr\": \"%s\" , \"pub_topics\": [%s], \"subscr_topics\": [%s]}\r\n";
 8013b36:	2272      	movs	r2, #114	@ 0x72
 8013b38:	498e      	ldr	r1, [pc, #568]	@ (8013d74 <handle_dev_status+0x248>)
 8013b3a:	a827      	add	r0, sp, #156	@ 0x9c
 8013b3c:	f01a fccc 	bl	802e4d8 <memcpy>
	char  *mqtt_status_str   = calloc(str_part_len, sizeof(char));
 8013b40:	2101      	movs	r1, #1
 8013b42:	201e      	movs	r0, #30
 8013b44:	f7ff fdcc 	bl	80136e0 <mg_calloc>
 8013b48:	4606      	mov	r6, r0
	char  *mqtt_server_addr  = calloc(IP_v6_STR_LEN + IP_PORT_STR_LEN, sizeof(char));
 8013b4a:	2101      	movs	r1, #1
 8013b4c:	202e      	movs	r0, #46	@ 0x2e
 8013b4e:	f7ff fdc7 	bl	80136e0 <mg_calloc>
 8013b52:	4607      	mov	r7, r0
	char  *mqtt_local_addr   = calloc(IP_v6_STR_LEN + IP_PORT_STR_LEN, sizeof(char));
 8013b54:	2101      	movs	r1, #1
 8013b56:	202e      	movs	r0, #46	@ 0x2e
 8013b58:	f7ff fdc2 	bl	80136e0 <mg_calloc>
 8013b5c:	4680      	mov	r8, r0
	char  *pub_topics_str    = calloc((OUTPUTS_COUNT+ INPUTS_COUNT) * MQTT_TOPIK_MAX_LEN, sizeof(char));
 8013b5e:	2101      	movs	r1, #1
 8013b60:	f44f 7040 	mov.w	r0, #768	@ 0x300
 8013b64:	f7ff fdbc 	bl	80136e0 <mg_calloc>
 8013b68:	4604      	mov	r4, r0
	char  *subscr_topics_str = calloc(OUTPUTS_COUNT * MQTT_TOPIK_MAX_LEN, sizeof(char));
 8013b6a:	2101      	movs	r1, #1
 8013b6c:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8013b70:	f7ff fdb6 	bl	80136e0 <mg_calloc>
 8013b74:	4605      	mov	r5, r0
	if (mqtt_status_str && mqtt_server_addr && mqtt_local_addr && pub_topics_str && subscr_topics_str){
 8013b76:	2e00      	cmp	r6, #0
 8013b78:	f000 80e3 	beq.w	8013d42 <handle_dev_status+0x216>
 8013b7c:	2f00      	cmp	r7, #0
 8013b7e:	f000 80e0 	beq.w	8013d42 <handle_dev_status+0x216>
 8013b82:	f1b8 0f00 	cmp.w	r8, #0
 8013b86:	f000 80dc 	beq.w	8013d42 <handle_dev_status+0x216>
 8013b8a:	2c00      	cmp	r4, #0
 8013b8c:	f000 80d9 	beq.w	8013d42 <handle_dev_status+0x216>
 8013b90:	2800      	cmp	r0, #0
 8013b92:	f000 80d6 	beq.w	8013d42 <handle_dev_status+0x216>
		if (mg_match(hm->method, mg_str("GET"), NULL)){
 8013b96:	f50d 7b88 	add.w	fp, sp, #272	@ 0x110
 8013b9a:	4977      	ldr	r1, [pc, #476]	@ (8013d78 <handle_dev_status+0x24c>)
 8013b9c:	4658      	mov	r0, fp
 8013b9e:	f010 feef 	bl	8024980 <mg_str_s>
 8013ba2:	2300      	movs	r3, #0
 8013ba4:	9300      	str	r3, [sp, #0]
 8013ba6:	e89b 000c 	ldmia.w	fp, {r2, r3}
 8013baa:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8013bae:	f011 f909 	bl	8024dc4 <mg_match>
 8013bb2:	2800      	cmp	r0, #0
 8013bb4:	f000 80bd 	beq.w	8013d32 <handle_dev_status+0x206>
			mqtt_connection =  get_mqtt_connection();
 8013bb8:	f001 fbba 	bl	8015330 <get_mqtt_connection>
			if(!mqtt_connection){
 8013bbc:	4682      	mov	sl, r0
 8013bbe:	b358      	cbz	r0, 8013c18 <handle_dev_status+0xec>
				if (mqtt_connection->is_connecting){
 8013bc0:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8013bc4:	f013 0f20 	tst.w	r3, #32
 8013bc8:	d12c      	bne.n	8013c24 <handle_dev_status+0xf8>
				}else if(mqtt_connection->is_closing){
 8013bca:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 8013bce:	f013 0f20 	tst.w	r3, #32
 8013bd2:	d02d      	beq.n	8013c30 <handle_dev_status+0x104>
					strncpy(mqtt_status_str, "closing",str_part_len);
 8013bd4:	221e      	movs	r2, #30
 8013bd6:	4969      	ldr	r1, [pc, #420]	@ (8013d7c <handle_dev_status+0x250>)
 8013bd8:	4630      	mov	r0, r6
 8013bda:	f019 fa88 	bl	802d0ee <strncpy>
				mg_snprintf(mqtt_local_addr, IP_v6_STR_LEN + IP_PORT_STR_LEN, "%M", mg_print_ip_port, &mqtt_connection->loc);
 8013bde:	f8df b1c4 	ldr.w	fp, [pc, #452]	@ 8013da4 <handle_dev_status+0x278>
 8013be2:	f10a 0308 	add.w	r3, sl, #8
 8013be6:	9300      	str	r3, [sp, #0]
 8013be8:	465b      	mov	r3, fp
 8013bea:	4a65      	ldr	r2, [pc, #404]	@ (8013d80 <handle_dev_status+0x254>)
 8013bec:	212e      	movs	r1, #46	@ 0x2e
 8013bee:	4640      	mov	r0, r8
 8013bf0:	f010 f83e 	bl	8023c70 <mg_snprintf>
				mg_snprintf(mqtt_server_addr, IP_v6_STR_LEN + IP_PORT_STR_LEN, "%M", mg_print_ip_port, &mqtt_connection->rem);
 8013bf4:	f10a 031c 	add.w	r3, sl, #28
 8013bf8:	9300      	str	r3, [sp, #0]
 8013bfa:	465b      	mov	r3, fp
 8013bfc:	4a60      	ldr	r2, [pc, #384]	@ (8013d80 <handle_dev_status+0x254>)
 8013bfe:	212e      	movs	r1, #46	@ 0x2e
 8013c00:	4638      	mov	r0, r7
 8013c02:	f010 f835 	bl	8023c70 <mg_snprintf>
			strcat(pub_topics_str, "\"");
 8013c06:	4620      	mov	r0, r4
 8013c08:	f7fc fb4a 	bl	80102a0 <strlen>
 8013c0c:	4b5d      	ldr	r3, [pc, #372]	@ (8013d84 <handle_dev_status+0x258>)
 8013c0e:	881b      	ldrh	r3, [r3, #0]
 8013c10:	5223      	strh	r3, [r4, r0]
			for (int i = 1; i <= INPUTS_COUNT; i++){
 8013c12:	f04f 0a01 	mov.w	sl, #1
 8013c16:	e028      	b.n	8013c6a <handle_dev_status+0x13e>
				strncpy(mqtt_status_str, "closed", str_part_len);
 8013c18:	221e      	movs	r2, #30
 8013c1a:	495b      	ldr	r1, [pc, #364]	@ (8013d88 <handle_dev_status+0x25c>)
 8013c1c:	4630      	mov	r0, r6
 8013c1e:	f019 fa66 	bl	802d0ee <strncpy>
 8013c22:	e7f0      	b.n	8013c06 <handle_dev_status+0xda>
					strncpy(mqtt_status_str, "connecting", str_part_len);
 8013c24:	221e      	movs	r2, #30
 8013c26:	4959      	ldr	r1, [pc, #356]	@ (8013d8c <handle_dev_status+0x260>)
 8013c28:	4630      	mov	r0, r6
 8013c2a:	f019 fa60 	bl	802d0ee <strncpy>
 8013c2e:	e7d6      	b.n	8013bde <handle_dev_status+0xb2>
					strncpy(mqtt_status_str, "established", str_part_len);
 8013c30:	221e      	movs	r2, #30
 8013c32:	4957      	ldr	r1, [pc, #348]	@ (8013d90 <handle_dev_status+0x264>)
 8013c34:	4630      	mov	r0, r6
 8013c36:	f019 fa5a 	bl	802d0ee <strncpy>
 8013c3a:	e7d0      	b.n	8013bde <handle_dev_status+0xb2>
				generate_status_topik(topic, MQTT_TOPIK_MAX_LEN, INPUT_SENSOR, i);
 8013c3c:	fa5f f38a 	uxtb.w	r3, sl
 8013c40:	2201      	movs	r2, #1
 8013c42:	2180      	movs	r1, #128	@ 0x80
 8013c44:	a807      	add	r0, sp, #28
 8013c46:	f001 ff63 	bl	8015b10 <generate_status_topik>
				strcat(pub_topics_str, topic);
 8013c4a:	a907      	add	r1, sp, #28
 8013c4c:	4620      	mov	r0, r4
 8013c4e:	f019 fa0f 	bl	802d070 <strcat>
				strcat(pub_topics_str, "\", \"");
 8013c52:	4620      	mov	r0, r4
 8013c54:	f7fc fb24 	bl	80102a0 <strlen>
 8013c58:	4603      	mov	r3, r0
 8013c5a:	1821      	adds	r1, r4, r0
 8013c5c:	4a4d      	ldr	r2, [pc, #308]	@ (8013d94 <handle_dev_status+0x268>)
 8013c5e:	6810      	ldr	r0, [r2, #0]
 8013c60:	50e0      	str	r0, [r4, r3]
 8013c62:	7913      	ldrb	r3, [r2, #4]
 8013c64:	710b      	strb	r3, [r1, #4]
			for (int i = 1; i <= INPUTS_COUNT; i++){
 8013c66:	f10a 0a01 	add.w	sl, sl, #1
 8013c6a:	f1ba 0f03 	cmp.w	sl, #3
 8013c6e:	dde5      	ble.n	8013c3c <handle_dev_status+0x110>
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8013c70:	f04f 0a01 	mov.w	sl, #1
 8013c74:	e007      	b.n	8013c86 <handle_dev_status+0x15a>
					strcat(pub_topics_str, "\"");
 8013c76:	4620      	mov	r0, r4
 8013c78:	f7fc fb12 	bl	80102a0 <strlen>
 8013c7c:	4b41      	ldr	r3, [pc, #260]	@ (8013d84 <handle_dev_status+0x258>)
 8013c7e:	881b      	ldrh	r3, [r3, #0]
 8013c80:	5223      	strh	r3, [r4, r0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8013c82:	f10a 0a01 	add.w	sl, sl, #1
 8013c86:	f1ba 0f03 	cmp.w	sl, #3
 8013c8a:	dc18      	bgt.n	8013cbe <handle_dev_status+0x192>
				generate_status_topik(topic, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i);
 8013c8c:	fa5f f38a 	uxtb.w	r3, sl
 8013c90:	2202      	movs	r2, #2
 8013c92:	2180      	movs	r1, #128	@ 0x80
 8013c94:	a807      	add	r0, sp, #28
 8013c96:	f001 ff3b 	bl	8015b10 <generate_status_topik>
				strcat(pub_topics_str, topic);
 8013c9a:	a907      	add	r1, sp, #28
 8013c9c:	4620      	mov	r0, r4
 8013c9e:	f019 f9e7 	bl	802d070 <strcat>
				if (i < OUTPUTS_COUNT) {
 8013ca2:	f1ba 0f02 	cmp.w	sl, #2
 8013ca6:	dce6      	bgt.n	8013c76 <handle_dev_status+0x14a>
					strcat(pub_topics_str, "\", \"");
 8013ca8:	4620      	mov	r0, r4
 8013caa:	f7fc faf9 	bl	80102a0 <strlen>
 8013cae:	4603      	mov	r3, r0
 8013cb0:	1821      	adds	r1, r4, r0
 8013cb2:	4a38      	ldr	r2, [pc, #224]	@ (8013d94 <handle_dev_status+0x268>)
 8013cb4:	6810      	ldr	r0, [r2, #0]
 8013cb6:	50e0      	str	r0, [r4, r3]
 8013cb8:	7913      	ldrb	r3, [r2, #4]
 8013cba:	710b      	strb	r3, [r1, #4]
 8013cbc:	e7e1      	b.n	8013c82 <handle_dev_status+0x156>
			strcat(subscr_topics_str, "\"");
 8013cbe:	4628      	mov	r0, r5
 8013cc0:	f7fc faee 	bl	80102a0 <strlen>
 8013cc4:	4b2f      	ldr	r3, [pc, #188]	@ (8013d84 <handle_dev_status+0x258>)
 8013cc6:	881b      	ldrh	r3, [r3, #0]
 8013cc8:	522b      	strh	r3, [r5, r0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8013cca:	f04f 0a01 	mov.w	sl, #1
 8013cce:	e007      	b.n	8013ce0 <handle_dev_status+0x1b4>
					strcat(subscr_topics_str, "\"");
 8013cd0:	4628      	mov	r0, r5
 8013cd2:	f7fc fae5 	bl	80102a0 <strlen>
 8013cd6:	4b2b      	ldr	r3, [pc, #172]	@ (8013d84 <handle_dev_status+0x258>)
 8013cd8:	881b      	ldrh	r3, [r3, #0]
 8013cda:	522b      	strh	r3, [r5, r0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8013cdc:	f10a 0a01 	add.w	sl, sl, #1
 8013ce0:	f1ba 0f03 	cmp.w	sl, #3
 8013ce4:	dc18      	bgt.n	8013d18 <handle_dev_status+0x1ec>
				generate_comand_topik_for_subscrabe(topic, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i);
 8013ce6:	fa5f f38a 	uxtb.w	r3, sl
 8013cea:	2202      	movs	r2, #2
 8013cec:	2180      	movs	r1, #128	@ 0x80
 8013cee:	a807      	add	r0, sp, #28
 8013cf0:	f001 fef6 	bl	8015ae0 <generate_comand_topik_for_subscrabe>
				strcat(subscr_topics_str, topic);
 8013cf4:	a907      	add	r1, sp, #28
 8013cf6:	4628      	mov	r0, r5
 8013cf8:	f019 f9ba 	bl	802d070 <strcat>
				if (i < OUTPUTS_COUNT) {
 8013cfc:	f1ba 0f02 	cmp.w	sl, #2
 8013d00:	dce6      	bgt.n	8013cd0 <handle_dev_status+0x1a4>
					strcat(subscr_topics_str, "\", \"");
 8013d02:	4628      	mov	r0, r5
 8013d04:	f7fc facc 	bl	80102a0 <strlen>
 8013d08:	4603      	mov	r3, r0
 8013d0a:	1829      	adds	r1, r5, r0
 8013d0c:	4a21      	ldr	r2, [pc, #132]	@ (8013d94 <handle_dev_status+0x268>)
 8013d0e:	6810      	ldr	r0, [r2, #0]
 8013d10:	50e8      	str	r0, [r5, r3]
 8013d12:	7913      	ldrb	r3, [r2, #4]
 8013d14:	710b      	strb	r3, [r1, #4]
 8013d16:	e7e1      	b.n	8013cdc <handle_dev_status+0x1b0>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 8013d18:	9504      	str	r5, [sp, #16]
 8013d1a:	9403      	str	r4, [sp, #12]
 8013d1c:	9702      	str	r7, [sp, #8]
 8013d1e:	f8cd 8004 	str.w	r8, [sp, #4]
 8013d22:	9600      	str	r6, [sp, #0]
 8013d24:	ab27      	add	r3, sp, #156	@ 0x9c
 8013d26:	4a1c      	ldr	r2, [pc, #112]	@ (8013d98 <handle_dev_status+0x26c>)
 8013d28:	21c8      	movs	r1, #200	@ 0xc8
 8013d2a:	4648      	mov	r0, r9
 8013d2c:	f010 fc9e 	bl	802466c <mg_http_reply>
 8013d30:	e00e      	b.n	8013d50 <handle_dev_status+0x224>
			mg_http_reply(c, 405, headers, //TODO delete for release,
 8013d32:	4b1a      	ldr	r3, [pc, #104]	@ (8013d9c <handle_dev_status+0x270>)
 8013d34:	4a18      	ldr	r2, [pc, #96]	@ (8013d98 <handle_dev_status+0x26c>)
 8013d36:	f240 1195 	movw	r1, #405	@ 0x195
 8013d3a:	4648      	mov	r0, r9
 8013d3c:	f010 fc96 	bl	802466c <mg_http_reply>
 8013d40:	e006      	b.n	8013d50 <handle_dev_status+0x224>
		mg_http_reply(c, 500, headers, //TODO delete for release,
 8013d42:	4b17      	ldr	r3, [pc, #92]	@ (8013da0 <handle_dev_status+0x274>)
 8013d44:	4a14      	ldr	r2, [pc, #80]	@ (8013d98 <handle_dev_status+0x26c>)
 8013d46:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013d4a:	4648      	mov	r0, r9
 8013d4c:	f010 fc8e 	bl	802466c <mg_http_reply>
	free(mqtt_status_str);
 8013d50:	4630      	mov	r0, r6
 8013d52:	f007 f9bb 	bl	801b0cc <vPortFree>
	free(mqtt_server_addr);
 8013d56:	4638      	mov	r0, r7
 8013d58:	f007 f9b8 	bl	801b0cc <vPortFree>
	free(mqtt_local_addr);
 8013d5c:	4640      	mov	r0, r8
 8013d5e:	f007 f9b5 	bl	801b0cc <vPortFree>
	free(pub_topics_str);
 8013d62:	4620      	mov	r0, r4
 8013d64:	f007 f9b2 	bl	801b0cc <vPortFree>
	free(subscr_topics_str);
 8013d68:	4628      	mov	r0, r5
 8013d6a:	f007 f9af 	bl	801b0cc <vPortFree>
}
 8013d6e:	b047      	add	sp, #284	@ 0x11c
 8013d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d74:	080379cc 	.word	0x080379cc
 8013d78:	08036cf4 	.word	0x08036cf4
 8013d7c:	0803796c 	.word	0x0803796c
 8013d80:	08037980 	.word	0x08037980
 8013d84:	08037984 	.word	0x08037984
 8013d88:	0803b78c 	.word	0x0803b78c
 8013d8c:	08037960 	.word	0x08037960
 8013d90:	08037974 	.word	0x08037974
 8013d94:	08037988 	.word	0x08037988
 8013d98:	08036d30 	.word	0x08036d30
 8013d9c:	080374a8 	.word	0x080374a8
 8013da0:	08037990 	.word	0x08037990
 8013da4:	0802671d 	.word	0x0802671d

08013da8 <handle_fs_get_log>:
static void handle_fs_get_log(struct mg_connection *c, struct mg_http_message *hm, int number){
 8013da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013daa:	b08d      	sub	sp, #52	@ 0x34
 8013dac:	4607      	mov	r7, r0
 8013dae:	460c      	mov	r4, r1
 8013db0:	4615      	mov	r5, r2
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8013db2:	ae08      	add	r6, sp, #32
 8013db4:	4923      	ldr	r1, [pc, #140]	@ (8013e44 <handle_fs_get_log+0x9c>)
 8013db6:	4630      	mov	r0, r6
 8013db8:	f010 fde2 	bl	8024980 <mg_str_s>
 8013dbc:	2300      	movs	r3, #0
 8013dbe:	9300      	str	r3, [sp, #0]
 8013dc0:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013dc4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013dc8:	f010 fffc 	bl	8024dc4 <mg_match>
 8013dcc:	b318      	cbz	r0, 8013e16 <handle_fs_get_log+0x6e>
		struct mg_http_serve_opts opts = {
 8013dce:	2300      	movs	r3, #0
 8013dd0:	9302      	str	r3, [sp, #8]
 8013dd2:	9303      	str	r3, [sp, #12]
 8013dd4:	9304      	str	r3, [sp, #16]
 8013dd6:	9305      	str	r3, [sp, #20]
 8013dd8:	9306      	str	r3, [sp, #24]
 8013dda:	9307      	str	r3, [sp, #28]
 8013ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8013e48 <handle_fs_get_log+0xa0>)
 8013dde:	9302      	str	r3, [sp, #8]
 8013de0:	4b1a      	ldr	r3, [pc, #104]	@ (8013e4c <handle_fs_get_log+0xa4>)
 8013de2:	9307      	str	r3, [sp, #28]
		switch (number) {
 8013de4:	b145      	cbz	r5, 8013df8 <handle_fs_get_log+0x50>
 8013de6:	2d01      	cmp	r5, #1
 8013de8:	d00e      	beq.n	8013e08 <handle_fs_get_log+0x60>
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION, &opts);
 8013dea:	ab02      	add	r3, sp, #8
 8013dec:	4a18      	ldr	r2, [pc, #96]	@ (8013e50 <handle_fs_get_log+0xa8>)
 8013dee:	4621      	mov	r1, r4
 8013df0:	4638      	mov	r0, r7
 8013df2:	f011 f9a3 	bl	802513c <mg_http_serve_file>
				break;
 8013df6:	e005      	b.n	8013e04 <handle_fs_get_log+0x5c>
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION, &opts);
 8013df8:	ab02      	add	r3, sp, #8
 8013dfa:	4a15      	ldr	r2, [pc, #84]	@ (8013e50 <handle_fs_get_log+0xa8>)
 8013dfc:	4621      	mov	r1, r4
 8013dfe:	4638      	mov	r0, r7
 8013e00:	f011 f99c 	bl	802513c <mg_http_serve_file>
}
 8013e04:	b00d      	add	sp, #52	@ 0x34
 8013e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION_OLD, &opts);
 8013e08:	ab02      	add	r3, sp, #8
 8013e0a:	4a12      	ldr	r2, [pc, #72]	@ (8013e54 <handle_fs_get_log+0xac>)
 8013e0c:	4621      	mov	r1, r4
 8013e0e:	4638      	mov	r0, r7
 8013e10:	f011 f994 	bl	802513c <mg_http_serve_file>
				break;
 8013e14:	e7f6      	b.n	8013e04 <handle_fs_get_log+0x5c>
	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 8013e16:	ad0a      	add	r5, sp, #40	@ 0x28
 8013e18:	490f      	ldr	r1, [pc, #60]	@ (8013e58 <handle_fs_get_log+0xb0>)
 8013e1a:	4628      	mov	r0, r5
 8013e1c:	f010 fdb0 	bl	8024980 <mg_str_s>
 8013e20:	2300      	movs	r3, #0
 8013e22:	9300      	str	r3, [sp, #0]
 8013e24:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013e28:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013e2c:	f010 ffca 	bl	8024dc4 <mg_match>
 8013e30:	2800      	cmp	r0, #0
 8013e32:	d1e7      	bne.n	8013e04 <handle_fs_get_log+0x5c>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8013e34:	4b09      	ldr	r3, [pc, #36]	@ (8013e5c <handle_fs_get_log+0xb4>)
 8013e36:	4a0a      	ldr	r2, [pc, #40]	@ (8013e60 <handle_fs_get_log+0xb8>)
 8013e38:	f240 1195 	movw	r1, #405	@ 0x195
 8013e3c:	4638      	mov	r0, r7
 8013e3e:	f010 fc15 	bl	802466c <mg_http_reply>
}
 8013e42:	e7df      	b.n	8013e04 <handle_fs_get_log+0x5c>
 8013e44:	08036cf4 	.word	0x08036cf4
 8013e48:	08038184 	.word	0x08038184
 8013e4c:	200000a0 	.word	0x200000a0
 8013e50:	080367cc 	.word	0x080367cc
 8013e54:	080367dc 	.word	0x080367dc
 8013e58:	08036e88 	.word	0x08036e88
 8013e5c:	08037a40 	.word	0x08037a40
 8013e60:	08036d30 	.word	0x08036d30

08013e64 <write_users>:
static void write_users(const char *file_path, users_list_t * users, size_t count){
 8013e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e66:	4604      	mov	r4, r0
 8013e68:	460d      	mov	r5, r1
 8013e6a:	4616      	mov	r6, r2
	mg_fs_lfs.rm(file_path);
 8013e6c:	4f0b      	ldr	r7, [pc, #44]	@ (8013e9c <write_users+0x38>)
 8013e6e:	6a3b      	ldr	r3, [r7, #32]
 8013e70:	4798      	blx	r3
	struct mg_fd *fd = mg_fs_open(&mg_fs_lfs, file_path, MG_FS_WRITE);
 8013e72:	2202      	movs	r2, #2
 8013e74:	4621      	mov	r1, r4
 8013e76:	4638      	mov	r0, r7
 8013e78:	f00f f96a 	bl	8023150 <mg_fs_open>
 8013e7c:	4604      	mov	r4, r0
	mg_fs_lfs.wr(fd->fd, users, sizeof(users_list_t) * count);
 8013e7e:	697b      	ldr	r3, [r7, #20]
 8013e80:	22a9      	movs	r2, #169	@ 0xa9
 8013e82:	fb06 f202 	mul.w	r2, r6, r2
 8013e86:	4629      	mov	r1, r5
 8013e88:	6800      	ldr	r0, [r0, #0]
 8013e8a:	4798      	blx	r3
	mg_fs_close(fd);
 8013e8c:	4620      	mov	r0, r4
 8013e8e:	f00f f978 	bl	8023182 <mg_fs_close>
	logging(L_INFO, "Saved web users to file");
 8013e92:	4903      	ldr	r1, [pc, #12]	@ (8013ea0 <write_users+0x3c>)
 8013e94:	2001      	movs	r0, #1
 8013e96:	f7fe f987 	bl	80121a8 <logging>
}
 8013e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e9c:	200000a0 	.word	0x200000a0
 8013ea0:	08037a98 	.word	0x08037a98

08013ea4 <handle_manage_user>:
static void handle_manage_user(struct mg_connection *c, struct mg_http_message *hm){
 8013ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ea8:	b0ae      	sub	sp, #184	@ 0xb8
 8013eaa:	4606      	mov	r6, r0
 8013eac:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8013eae:	ad26      	add	r5, sp, #152	@ 0x98
 8013eb0:	49a8      	ldr	r1, [pc, #672]	@ (8014154 <handle_manage_user+0x2b0>)
 8013eb2:	4628      	mov	r0, r5
 8013eb4:	f010 fd64 	bl	8024980 <mg_str_s>
 8013eb8:	2300      	movs	r3, #0
 8013eba:	9300      	str	r3, [sp, #0]
 8013ebc:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013ec0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013ec4:	f010 ff7e 	bl	8024dc4 <mg_match>
 8013ec8:	2800      	cmp	r0, #0
 8013eca:	d143      	bne.n	8013f54 <handle_manage_user+0xb0>
	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 8013ecc:	ad28      	add	r5, sp, #160	@ 0xa0
 8013ece:	49a2      	ldr	r1, [pc, #648]	@ (8014158 <handle_manage_user+0x2b4>)
 8013ed0:	4628      	mov	r0, r5
 8013ed2:	f010 fd55 	bl	8024980 <mg_str_s>
 8013ed6:	2300      	movs	r3, #0
 8013ed8:	9300      	str	r3, [sp, #0]
 8013eda:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013ede:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013ee2:	f010 ff6f 	bl	8024dc4 <mg_match>
 8013ee6:	2800      	cmp	r0, #0
 8013ee8:	f000 80fd 	beq.w	80140e6 <handle_manage_user+0x242>
	    if (mg_json_get(hm->body, "$", &length) < 0) {
 8013eec:	ab03      	add	r3, sp, #12
 8013eee:	4a9b      	ldr	r2, [pc, #620]	@ (801415c <handle_manage_user+0x2b8>)
 8013ef0:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 8013ef4:	c903      	ldmia	r1, {r0, r1}
 8013ef6:	f00f fa15 	bl	8023324 <mg_json_get>
 8013efa:	2800      	cmp	r0, #0
 8013efc:	f2c0 8089 	blt.w	8014012 <handle_manage_user+0x16e>
	    username_add = mg_json_get_str(hm->body, "$.user");
 8013f00:	4a97      	ldr	r2, [pc, #604]	@ (8014160 <handle_manage_user+0x2bc>)
 8013f02:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 8013f06:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013f0a:	f011 fe29 	bl	8025b60 <mg_json_get_str>
 8013f0e:	4605      	mov	r5, r0
	    password_add = mg_json_get_str(hm->body, "$.pass");
 8013f10:	4a94      	ldr	r2, [pc, #592]	@ (8014164 <handle_manage_user+0x2c0>)
 8013f12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013f16:	f011 fe23 	bl	8025b60 <mg_json_get_str>
 8013f1a:	4607      	mov	r7, r0
	    if (username_add && password_add && strlen(username_add) > 0 && strlen(password_add) > 0) {
 8013f1c:	2d00      	cmp	r5, #0
 8013f1e:	f000 80d4 	beq.w	80140ca <handle_manage_user+0x226>
 8013f22:	2800      	cmp	r0, #0
 8013f24:	f000 80d1 	beq.w	80140ca <handle_manage_user+0x226>
 8013f28:	782b      	ldrb	r3, [r5, #0]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	f000 80cd 	beq.w	80140ca <handle_manage_user+0x226>
 8013f30:	7803      	ldrb	r3, [r0, #0]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	f000 80c9 	beq.w	80140ca <handle_manage_user+0x226>
	        for (int i = 0; i < user_list_size; i++) {
 8013f38:	2400      	movs	r4, #0
 8013f3a:	2c09      	cmp	r4, #9
 8013f3c:	dc7f      	bgt.n	801403e <handle_manage_user+0x19a>
	            if (strcmp(web_users[i].user, username_add) == 0) {
 8013f3e:	4629      	mov	r1, r5
 8013f40:	20a9      	movs	r0, #169	@ 0xa9
 8013f42:	4b89      	ldr	r3, [pc, #548]	@ (8014168 <handle_manage_user+0x2c4>)
 8013f44:	fb00 3004 	mla	r0, r0, r4, r3
 8013f48:	f7fc f94a 	bl	80101e0 <strcmp>
 8013f4c:	2800      	cmp	r0, #0
 8013f4e:	d068      	beq.n	8014022 <handle_manage_user+0x17e>
	        for (int i = 0; i < user_list_size; i++) {
 8013f50:	3401      	adds	r4, #1
 8013f52:	e7f2      	b.n	8013f3a <handle_manage_user+0x96>
	    char *response = calloc(response_len, sizeof(char));
 8013f54:	2101      	movs	r1, #1
 8013f56:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8013f5a:	f7ff fbc1 	bl	80136e0 <mg_calloc>
 8013f5e:	4607      	mov	r7, r0
	    char *user_entry = calloc(user_entry_len, sizeof(char));
 8013f60:	2101      	movs	r1, #1
 8013f62:	20a0      	movs	r0, #160	@ 0xa0
 8013f64:	f7ff fbbc 	bl	80136e0 <mg_calloc>
 8013f68:	4680      	mov	r8, r0
	    if (response && user_entry) {
 8013f6a:	2f00      	cmp	r7, #0
 8013f6c:	d03d      	beq.n	8013fea <handle_manage_user+0x146>
 8013f6e:	2800      	cmp	r0, #0
 8013f70:	d03b      	beq.n	8013fea <handle_manage_user+0x146>
	        offset += snprintf(response + offset, response_len - offset, "{ \"users\": [");
 8013f72:	4b7e      	ldr	r3, [pc, #504]	@ (801416c <handle_manage_user+0x2c8>)
 8013f74:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013f76:	6038      	str	r0, [r7, #0]
 8013f78:	6079      	str	r1, [r7, #4]
 8013f7a:	60ba      	str	r2, [r7, #8]
 8013f7c:	781b      	ldrb	r3, [r3, #0]
 8013f7e:	733b      	strb	r3, [r7, #12]
 8013f80:	250c      	movs	r5, #12
	        for (int i = 0; i < user_list_size; i++) {
 8013f82:	2400      	movs	r4, #0
 8013f84:	e008      	b.n	8013f98 <handle_manage_user+0xf4>
	                offset += snprintf(response + offset, response_len - offset, "%s", user_entry);
 8013f86:	4643      	mov	r3, r8
 8013f88:	4a79      	ldr	r2, [pc, #484]	@ (8014170 <handle_manage_user+0x2cc>)
 8013f8a:	f5c5 6180 	rsb	r1, r5, #1024	@ 0x400
 8013f8e:	1978      	adds	r0, r7, r5
 8013f90:	f018 fb3c 	bl	802c60c <snprintf>
 8013f94:	4405      	add	r5, r0
	        for (int i = 0; i < user_list_size; i++) {
 8013f96:	3401      	adds	r4, #1
 8013f98:	2c09      	cmp	r4, #9
 8013f9a:	dc18      	bgt.n	8013fce <handle_manage_user+0x12a>
	            if (web_users[i].user[0] != '\0') {  // Проверяем, что имя пользователя не пустое
 8013f9c:	22a9      	movs	r2, #169	@ 0xa9
 8013f9e:	fb04 f202 	mul.w	r2, r4, r2
 8013fa2:	4b71      	ldr	r3, [pc, #452]	@ (8014168 <handle_manage_user+0x2c4>)
 8013fa4:	5c9a      	ldrb	r2, [r3, r2]
 8013fa6:	2a00      	cmp	r2, #0
 8013fa8:	d0f5      	beq.n	8013f96 <handle_manage_user+0xf2>
	                snprintf(user_entry, user_entry_len, "{\"user\": \"%s\"}", web_users[i].user);
 8013faa:	22a9      	movs	r2, #169	@ 0xa9
 8013fac:	fb02 3304 	mla	r3, r2, r4, r3
 8013fb0:	4a70      	ldr	r2, [pc, #448]	@ (8014174 <handle_manage_user+0x2d0>)
 8013fb2:	21a0      	movs	r1, #160	@ 0xa0
 8013fb4:	4640      	mov	r0, r8
 8013fb6:	f018 fb29 	bl	802c60c <snprintf>
	                if (offset > 12) { // 12 символов — это длина строки "{ \"users\": ["
 8013fba:	2d0c      	cmp	r5, #12
 8013fbc:	d9e3      	bls.n	8013f86 <handle_manage_user+0xe2>
	                    offset += snprintf(response + offset, response_len - offset, ",");
 8013fbe:	4a6e      	ldr	r2, [pc, #440]	@ (8014178 <handle_manage_user+0x2d4>)
 8013fc0:	f5c5 6180 	rsb	r1, r5, #1024	@ 0x400
 8013fc4:	1978      	adds	r0, r7, r5
 8013fc6:	f018 fb21 	bl	802c60c <snprintf>
 8013fca:	4405      	add	r5, r0
 8013fcc:	e7db      	b.n	8013f86 <handle_manage_user+0xe2>
	        offset += snprintf(response + offset, response_len - offset, "]}");
 8013fce:	4a6b      	ldr	r2, [pc, #428]	@ (801417c <handle_manage_user+0x2d8>)
 8013fd0:	f5c5 6180 	rsb	r1, r5, #1024	@ 0x400
 8013fd4:	1978      	adds	r0, r7, r5
 8013fd6:	f018 fb19 	bl	802c60c <snprintf>
	        mg_http_reply(c, 200, headers, "%s", response);
 8013fda:	9700      	str	r7, [sp, #0]
 8013fdc:	4b64      	ldr	r3, [pc, #400]	@ (8014170 <handle_manage_user+0x2cc>)
 8013fde:	4a68      	ldr	r2, [pc, #416]	@ (8014180 <handle_manage_user+0x2dc>)
 8013fe0:	21c8      	movs	r1, #200	@ 0xc8
 8013fe2:	4630      	mov	r0, r6
 8013fe4:	f010 fb42 	bl	802466c <mg_http_reply>
 8013fe8:	e00a      	b.n	8014000 <handle_manage_user+0x15c>
	    	logging(L_ERR, "Memory allocation failed in handle_manage_user GET");
 8013fea:	4966      	ldr	r1, [pc, #408]	@ (8014184 <handle_manage_user+0x2e0>)
 8013fec:	2003      	movs	r0, #3
 8013fee:	f7fe f8db 	bl	80121a8 <logging>
	        mg_http_reply(c, 500, headers, "{\"error\": \"Memory allocation failed\"}");
 8013ff2:	4b65      	ldr	r3, [pc, #404]	@ (8014188 <handle_manage_user+0x2e4>)
 8013ff4:	4a62      	ldr	r2, [pc, #392]	@ (8014180 <handle_manage_user+0x2dc>)
 8013ff6:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013ffa:	4630      	mov	r0, r6
 8013ffc:	f010 fb36 	bl	802466c <mg_http_reply>
	    free(response);
 8014000:	4638      	mov	r0, r7
 8014002:	f007 f863 	bl	801b0cc <vPortFree>
	    free(user_entry);
 8014006:	4640      	mov	r0, r8
 8014008:	f007 f860 	bl	801b0cc <vPortFree>
}
 801400c:	b02e      	add	sp, #184	@ 0xb8
 801400e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	        mg_http_reply(c, 400, headers,
 8014012:	4b5e      	ldr	r3, [pc, #376]	@ (801418c <handle_manage_user+0x2e8>)
 8014014:	4a5a      	ldr	r2, [pc, #360]	@ (8014180 <handle_manage_user+0x2dc>)
 8014016:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801401a:	4630      	mov	r0, r6
 801401c:	f010 fb26 	bl	802466c <mg_http_reply>
	        return;
 8014020:	e7f4      	b.n	801400c <handle_manage_user+0x168>
	                mg_http_reply(c, 400, headers,
 8014022:	4b5b      	ldr	r3, [pc, #364]	@ (8014190 <handle_manage_user+0x2ec>)
 8014024:	4a56      	ldr	r2, [pc, #344]	@ (8014180 <handle_manage_user+0x2dc>)
 8014026:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801402a:	4630      	mov	r0, r6
 801402c:	f010 fb1e 	bl	802466c <mg_http_reply>
	                free(username_add);
 8014030:	4628      	mov	r0, r5
 8014032:	f007 f84b 	bl	801b0cc <vPortFree>
	                free(password_add);
 8014036:	4638      	mov	r0, r7
 8014038:	f007 f848 	bl	801b0cc <vPortFree>
	                return;
 801403c:	e7e6      	b.n	801400c <handle_manage_user+0x168>
			char add_pass_digest[sha1_str_len] = {0};
 801403e:	2400      	movs	r4, #0
 8014040:	9404      	str	r4, [sp, #16]
 8014042:	2225      	movs	r2, #37	@ 0x25
 8014044:	4621      	mov	r1, r4
 8014046:	a805      	add	r0, sp, #20
 8014048:	f019 f80a 	bl	802d060 <memset>
			mg_sha1_init(&sha1_ctx);
 801404c:	a80f      	add	r0, sp, #60	@ 0x3c
 801404e:	f010 fbe5 	bl	802481c <mg_sha1_init>
			mg_sha1_update(&sha1_ctx, (const unsigned char *)password_add, strlen(password_add) * sizeof(char));
 8014052:	4638      	mov	r0, r7
 8014054:	f7fc f924 	bl	80102a0 <strlen>
 8014058:	4602      	mov	r2, r0
 801405a:	4639      	mov	r1, r7
 801405c:	a80f      	add	r0, sp, #60	@ 0x3c
 801405e:	f010 fbf7 	bl	8024850 <mg_sha1_update>
			mg_sha1_final((unsigned char *)add_pass_digest, &sha1_ctx);
 8014062:	a90f      	add	r1, sp, #60	@ 0x3c
 8014064:	a804      	add	r0, sp, #16
 8014066:	f010 fc2d 	bl	80248c4 <mg_sha1_final>
	        for (int i = 0; i < user_list_size; i++) {
 801406a:	4621      	mov	r1, r4
 801406c:	2909      	cmp	r1, #9
 801406e:	dc24      	bgt.n	80140ba <handle_manage_user+0x216>
	            if (web_users[i].user[0] == '\0') { // Пустая запись
 8014070:	23a9      	movs	r3, #169	@ 0xa9
 8014072:	fb01 f303 	mul.w	r3, r1, r3
 8014076:	4a3c      	ldr	r2, [pc, #240]	@ (8014168 <handle_manage_user+0x2c4>)
 8014078:	5cd3      	ldrb	r3, [r2, r3]
 801407a:	b10b      	cbz	r3, 8014080 <handle_manage_user+0x1dc>
	        for (int i = 0; i < user_list_size; i++) {
 801407c:	3101      	adds	r1, #1
 801407e:	e7f5      	b.n	801406c <handle_manage_user+0x1c8>
	                strncpy(web_users[i].user, username_add, sizeof(web_users[i].user) - 1);
 8014080:	23a9      	movs	r3, #169	@ 0xa9
 8014082:	fb03 f401 	mul.w	r4, r3, r1
 8014086:	4690      	mov	r8, r2
 8014088:	227f      	movs	r2, #127	@ 0x7f
 801408a:	4629      	mov	r1, r5
 801408c:	eb08 0004 	add.w	r0, r8, r4
 8014090:	f019 f82d 	bl	802d0ee <strncpy>
	                strncpy(web_users[i].pass_digest, add_pass_digest, sizeof(web_users[i].pass_digest) - 1);
 8014094:	3480      	adds	r4, #128	@ 0x80
 8014096:	2228      	movs	r2, #40	@ 0x28
 8014098:	a904      	add	r1, sp, #16
 801409a:	eb08 0004 	add.w	r0, r8, r4
 801409e:	f019 f826 	bl	802d0ee <strncpy>
	                write_users(user_cred_file, web_users, user_list_size);
 80140a2:	220a      	movs	r2, #10
 80140a4:	4641      	mov	r1, r8
 80140a6:	483b      	ldr	r0, [pc, #236]	@ (8014194 <handle_manage_user+0x2f0>)
 80140a8:	f7ff fedc 	bl	8013e64 <write_users>
	            mg_http_reply(c, 200, headers,
 80140ac:	4b3a      	ldr	r3, [pc, #232]	@ (8014198 <handle_manage_user+0x2f4>)
 80140ae:	4a34      	ldr	r2, [pc, #208]	@ (8014180 <handle_manage_user+0x2dc>)
 80140b0:	21c8      	movs	r1, #200	@ 0xc8
 80140b2:	4630      	mov	r0, r6
 80140b4:	f010 fada 	bl	802466c <mg_http_reply>
 80140b8:	e00e      	b.n	80140d8 <handle_manage_user+0x234>
	            mg_http_reply(c, 400, headers,
 80140ba:	4b38      	ldr	r3, [pc, #224]	@ (801419c <handle_manage_user+0x2f8>)
 80140bc:	4a30      	ldr	r2, [pc, #192]	@ (8014180 <handle_manage_user+0x2dc>)
 80140be:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80140c2:	4630      	mov	r0, r6
 80140c4:	f010 fad2 	bl	802466c <mg_http_reply>
	    if (username_add && password_add && strlen(username_add) > 0 && strlen(password_add) > 0) {
 80140c8:	e006      	b.n	80140d8 <handle_manage_user+0x234>
	        mg_http_reply(c, 400, headers,
 80140ca:	4b35      	ldr	r3, [pc, #212]	@ (80141a0 <handle_manage_user+0x2fc>)
 80140cc:	4a2c      	ldr	r2, [pc, #176]	@ (8014180 <handle_manage_user+0x2dc>)
 80140ce:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80140d2:	4630      	mov	r0, r6
 80140d4:	f010 faca 	bl	802466c <mg_http_reply>
		free(username_add);
 80140d8:	4628      	mov	r0, r5
 80140da:	f006 fff7 	bl	801b0cc <vPortFree>
		free(password_add);
 80140de:	4638      	mov	r0, r7
 80140e0:	f006 fff4 	bl	801b0cc <vPortFree>
		return;
 80140e4:	e792      	b.n	801400c <handle_manage_user+0x168>
	}else if (mg_match(hm->method, mg_str("PUT"), NULL)){
 80140e6:	ad2a      	add	r5, sp, #168	@ 0xa8
 80140e8:	492e      	ldr	r1, [pc, #184]	@ (80141a4 <handle_manage_user+0x300>)
 80140ea:	4628      	mov	r0, r5
 80140ec:	f010 fc48 	bl	8024980 <mg_str_s>
 80140f0:	2300      	movs	r3, #0
 80140f2:	9300      	str	r3, [sp, #0]
 80140f4:	e895 000c 	ldmia.w	r5, {r2, r3}
 80140f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80140fc:	f010 fe62 	bl	8024dc4 <mg_match>
 8014100:	2800      	cmp	r0, #0
 8014102:	d155      	bne.n	80141b0 <handle_manage_user+0x30c>
	}else if (mg_match(hm->method, mg_str("DELETE"), NULL)){
 8014104:	ad2c      	add	r5, sp, #176	@ 0xb0
 8014106:	4928      	ldr	r1, [pc, #160]	@ (80141a8 <handle_manage_user+0x304>)
 8014108:	4628      	mov	r0, r5
 801410a:	f010 fc39 	bl	8024980 <mg_str_s>
 801410e:	2300      	movs	r3, #0
 8014110:	9300      	str	r3, [sp, #0]
 8014112:	e895 000c 	ldmia.w	r5, {r2, r3}
 8014116:	e894 0003 	ldmia.w	r4, {r0, r1}
 801411a:	f010 fe53 	bl	8024dc4 <mg_match>
 801411e:	2800      	cmp	r0, #0
 8014120:	f000 80f3 	beq.w	801430a <handle_manage_user+0x466>
	    username_del = mg_json_get_str(hm->body, "$.user");
 8014124:	4a0e      	ldr	r2, [pc, #56]	@ (8014160 <handle_manage_user+0x2bc>)
 8014126:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 801412a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801412e:	f011 fd17 	bl	8025b60 <mg_json_get_str>
	    if (username_del && strlen(username_del) > 0) {
 8014132:	4607      	mov	r7, r0
 8014134:	b118      	cbz	r0, 801413e <handle_manage_user+0x29a>
 8014136:	7803      	ldrb	r3, [r0, #0]
 8014138:	2b00      	cmp	r3, #0
 801413a:	f040 80cf 	bne.w	80142dc <handle_manage_user+0x438>
	        mg_http_reply(c, 400, headers,
 801413e:	4b1b      	ldr	r3, [pc, #108]	@ (80141ac <handle_manage_user+0x308>)
 8014140:	4a0f      	ldr	r2, [pc, #60]	@ (8014180 <handle_manage_user+0x2dc>)
 8014142:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8014146:	4630      	mov	r0, r6
 8014148:	f010 fa90 	bl	802466c <mg_http_reply>
	    free(username_del);
 801414c:	4638      	mov	r0, r7
 801414e:	f006 ffbd 	bl	801b0cc <vPortFree>
 8014152:	e75b      	b.n	801400c <handle_manage_user+0x168>
 8014154:	08036cf4 	.word	0x08036cf4
 8014158:	08036e88 	.word	0x08036e88
 801415c:	08037590 	.word	0x08037590
 8014160:	08037ad8 	.word	0x08037ad8
 8014164:	08037ae0 	.word	0x08037ae0
 8014168:	20002208 	.word	0x20002208
 801416c:	08037ab0 	.word	0x08037ab0
 8014170:	0803b798 	.word	0x0803b798
 8014174:	08037ac0 	.word	0x08037ac0
 8014178:	08037ad0 	.word	0x08037ad0
 801417c:	08037ad4 	.word	0x08037ad4
 8014180:	08036d30 	.word	0x08036d30
 8014184:	0803776c 	.word	0x0803776c
 8014188:	080377a0 	.word	0x080377a0
 801418c:	08037594 	.word	0x08037594
 8014190:	08037ae8 	.word	0x08037ae8
 8014194:	08036648 	.word	0x08036648
 8014198:	08037b24 	.word	0x08037b24
 801419c:	08037b60 	.word	0x08037b60
 80141a0:	08037b94 	.word	0x08037b94
 80141a4:	08037bd4 	.word	0x08037bd4
 80141a8:	08037c90 	.word	0x08037c90
 80141ac:	08037d2c 	.word	0x08037d2c
	    if (mg_json_get(hm->body, "$", &length) < 0) {
 80141b0:	ab03      	add	r3, sp, #12
 80141b2:	4a5a      	ldr	r2, [pc, #360]	@ (801431c <handle_manage_user+0x478>)
 80141b4:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 80141b8:	c903      	ldmia	r1, {r0, r1}
 80141ba:	f00f f8b3 	bl	8023324 <mg_json_get>
 80141be:	2800      	cmp	r0, #0
 80141c0:	db21      	blt.n	8014206 <handle_manage_user+0x362>
	        username_edit = mg_json_get_str(hm->body, "$.user");
 80141c2:	4a57      	ldr	r2, [pc, #348]	@ (8014320 <handle_manage_user+0x47c>)
 80141c4:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 80141c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80141cc:	f011 fcc8 	bl	8025b60 <mg_json_get_str>
 80141d0:	4605      	mov	r5, r0
	        new_password = mg_json_get_str(hm->body, "$.pass");
 80141d2:	4a54      	ldr	r2, [pc, #336]	@ (8014324 <handle_manage_user+0x480>)
 80141d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80141d8:	f011 fcc2 	bl	8025b60 <mg_json_get_str>
 80141dc:	4604      	mov	r4, r0
	        if (username_edit && new_password && strlen(username_edit) > 0 && strlen(new_password) > 0) {
 80141de:	b125      	cbz	r5, 80141ea <handle_manage_user+0x346>
 80141e0:	b118      	cbz	r0, 80141ea <handle_manage_user+0x346>
 80141e2:	782b      	ldrb	r3, [r5, #0]
 80141e4:	b10b      	cbz	r3, 80141ea <handle_manage_user+0x346>
 80141e6:	7803      	ldrb	r3, [r0, #0]
 80141e8:	b9bb      	cbnz	r3, 801421a <handle_manage_user+0x376>
	            mg_http_reply(c, 400, headers,
 80141ea:	4b4f      	ldr	r3, [pc, #316]	@ (8014328 <handle_manage_user+0x484>)
 80141ec:	4a4f      	ldr	r2, [pc, #316]	@ (801432c <handle_manage_user+0x488>)
 80141ee:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80141f2:	4630      	mov	r0, r6
 80141f4:	f010 fa3a 	bl	802466c <mg_http_reply>
	    free(username_edit);
 80141f8:	4628      	mov	r0, r5
 80141fa:	f006 ff67 	bl	801b0cc <vPortFree>
	    free(new_password);
 80141fe:	4620      	mov	r0, r4
 8014200:	f006 ff64 	bl	801b0cc <vPortFree>
	    return;
 8014204:	e702      	b.n	801400c <handle_manage_user+0x168>
	        mg_http_reply(c, 400, headers,
 8014206:	4b4a      	ldr	r3, [pc, #296]	@ (8014330 <handle_manage_user+0x48c>)
 8014208:	4a48      	ldr	r2, [pc, #288]	@ (801432c <handle_manage_user+0x488>)
 801420a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801420e:	4630      	mov	r0, r6
 8014210:	f010 fa2c 	bl	802466c <mg_http_reply>
	    char *new_password = NULL;
 8014214:	2400      	movs	r4, #0
	    char *username_edit = NULL;
 8014216:	4625      	mov	r5, r4
 8014218:	e7ee      	b.n	80141f8 <handle_manage_user+0x354>
	            char new_pass_digest[sha1_str_len] = {0};
 801421a:	2700      	movs	r7, #0
 801421c:	9704      	str	r7, [sp, #16]
 801421e:	2225      	movs	r2, #37	@ 0x25
 8014220:	4639      	mov	r1, r7
 8014222:	a805      	add	r0, sp, #20
 8014224:	f018 ff1c 	bl	802d060 <memset>
	            mg_sha1_init(&sha1_ctx);
 8014228:	a80f      	add	r0, sp, #60	@ 0x3c
 801422a:	f010 faf7 	bl	802481c <mg_sha1_init>
	            mg_sha1_update(&sha1_ctx, (const unsigned char *)new_password, strlen(new_password));
 801422e:	4620      	mov	r0, r4
 8014230:	f7fc f836 	bl	80102a0 <strlen>
 8014234:	4602      	mov	r2, r0
 8014236:	4621      	mov	r1, r4
 8014238:	a80f      	add	r0, sp, #60	@ 0x3c
 801423a:	f010 fb09 	bl	8024850 <mg_sha1_update>
	            mg_sha1_final((unsigned char *)new_pass_digest, &sha1_ctx);
 801423e:	a90f      	add	r1, sp, #60	@ 0x3c
 8014240:	a804      	add	r0, sp, #16
 8014242:	f010 fb3f 	bl	80248c4 <mg_sha1_final>
	            for (int i = 0; i < user_list_size; i++) {
 8014246:	2f09      	cmp	r7, #9
 8014248:	dc25      	bgt.n	8014296 <handle_manage_user+0x3f2>
	                if (strcmp(web_users[i].user, username_edit) == 0) {
 801424a:	4629      	mov	r1, r5
 801424c:	20a9      	movs	r0, #169	@ 0xa9
 801424e:	4b39      	ldr	r3, [pc, #228]	@ (8014334 <handle_manage_user+0x490>)
 8014250:	fb00 3007 	mla	r0, r0, r7, r3
 8014254:	f7fb ffc4 	bl	80101e0 <strcmp>
 8014258:	b108      	cbz	r0, 801425e <handle_manage_user+0x3ba>
	            for (int i = 0; i < user_list_size; i++) {
 801425a:	3701      	adds	r7, #1
 801425c:	e7f3      	b.n	8014246 <handle_manage_user+0x3a2>
	                    strncpy(web_users[i].pass_digest, new_pass_digest, sizeof(web_users[i].pass_digest) - 1);
 801425e:	23a9      	movs	r3, #169	@ 0xa9
 8014260:	fb03 f707 	mul.w	r7, r3, r7
 8014264:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 8014268:	f8df 80c8 	ldr.w	r8, [pc, #200]	@ 8014334 <handle_manage_user+0x490>
 801426c:	2228      	movs	r2, #40	@ 0x28
 801426e:	a904      	add	r1, sp, #16
 8014270:	4440      	add	r0, r8
 8014272:	f018 ff3c 	bl	802d0ee <strncpy>
	                    web_users[i].pass_digest[sizeof(web_users[i].pass_digest) - 1] = '\0';
 8014276:	4447      	add	r7, r8
 8014278:	2300      	movs	r3, #0
 801427a:	f887 30a8 	strb.w	r3, [r7, #168]	@ 0xa8
	                    write_users(user_cred_file, web_users, user_list_size);
 801427e:	220a      	movs	r2, #10
 8014280:	4641      	mov	r1, r8
 8014282:	482d      	ldr	r0, [pc, #180]	@ (8014338 <handle_manage_user+0x494>)
 8014284:	f7ff fdee 	bl	8013e64 <write_users>
	                mg_http_reply(c, 200, headers,
 8014288:	4b2c      	ldr	r3, [pc, #176]	@ (801433c <handle_manage_user+0x498>)
 801428a:	4a28      	ldr	r2, [pc, #160]	@ (801432c <handle_manage_user+0x488>)
 801428c:	21c8      	movs	r1, #200	@ 0xc8
 801428e:	4630      	mov	r0, r6
 8014290:	f010 f9ec 	bl	802466c <mg_http_reply>
 8014294:	e7b0      	b.n	80141f8 <handle_manage_user+0x354>
	                mg_http_reply(c, 404, headers,
 8014296:	4b2a      	ldr	r3, [pc, #168]	@ (8014340 <handle_manage_user+0x49c>)
 8014298:	4a24      	ldr	r2, [pc, #144]	@ (801432c <handle_manage_user+0x488>)
 801429a:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 801429e:	4630      	mov	r0, r6
 80142a0:	f010 f9e4 	bl	802466c <mg_http_reply>
	        if (username_edit && new_password && strlen(username_edit) > 0 && strlen(new_password) > 0) {
 80142a4:	e7a8      	b.n	80141f8 <handle_manage_user+0x354>
	                memset(web_users[i].user, 0, sizeof(web_users[i].user));
 80142a6:	2280      	movs	r2, #128	@ 0x80
 80142a8:	2100      	movs	r1, #0
 80142aa:	4628      	mov	r0, r5
 80142ac:	f018 fed8 	bl	802d060 <memset>
	                memset(web_users[i].pass_digest, 0, sizeof(web_users[i].pass_digest));
 80142b0:	23a9      	movs	r3, #169	@ 0xa9
 80142b2:	fb03 f004 	mul.w	r0, r3, r4
 80142b6:	3080      	adds	r0, #128	@ 0x80
 80142b8:	4c1e      	ldr	r4, [pc, #120]	@ (8014334 <handle_manage_user+0x490>)
 80142ba:	2229      	movs	r2, #41	@ 0x29
 80142bc:	2100      	movs	r1, #0
 80142be:	4420      	add	r0, r4
 80142c0:	f018 fece 	bl	802d060 <memset>
	                write_users(user_cred_file, web_users, user_list_size);
 80142c4:	220a      	movs	r2, #10
 80142c6:	4621      	mov	r1, r4
 80142c8:	481b      	ldr	r0, [pc, #108]	@ (8014338 <handle_manage_user+0x494>)
 80142ca:	f7ff fdcb 	bl	8013e64 <write_users>
	            mg_http_reply(c, 200, headers,
 80142ce:	4b1d      	ldr	r3, [pc, #116]	@ (8014344 <handle_manage_user+0x4a0>)
 80142d0:	4a16      	ldr	r2, [pc, #88]	@ (801432c <handle_manage_user+0x488>)
 80142d2:	21c8      	movs	r1, #200	@ 0xc8
 80142d4:	4630      	mov	r0, r6
 80142d6:	f010 f9c9 	bl	802466c <mg_http_reply>
 80142da:	e737      	b.n	801414c <handle_manage_user+0x2a8>
	        for (int i = 1; i < user_list_size; i++) { // Нельзя удалять пользователя под индексом 0
 80142dc:	2401      	movs	r4, #1
 80142de:	2c09      	cmp	r4, #9
 80142e0:	dc0b      	bgt.n	80142fa <handle_manage_user+0x456>
	            if (strcmp(web_users[i].user, username_del) == 0) {
 80142e2:	23a9      	movs	r3, #169	@ 0xa9
 80142e4:	4d13      	ldr	r5, [pc, #76]	@ (8014334 <handle_manage_user+0x490>)
 80142e6:	fb03 5504 	mla	r5, r3, r4, r5
 80142ea:	4639      	mov	r1, r7
 80142ec:	4628      	mov	r0, r5
 80142ee:	f7fb ff77 	bl	80101e0 <strcmp>
 80142f2:	2800      	cmp	r0, #0
 80142f4:	d0d7      	beq.n	80142a6 <handle_manage_user+0x402>
	        for (int i = 1; i < user_list_size; i++) { // Нельзя удалять пользователя под индексом 0
 80142f6:	3401      	adds	r4, #1
 80142f8:	e7f1      	b.n	80142de <handle_manage_user+0x43a>
	            mg_http_reply(c, 400, headers,
 80142fa:	4b13      	ldr	r3, [pc, #76]	@ (8014348 <handle_manage_user+0x4a4>)
 80142fc:	4a0b      	ldr	r2, [pc, #44]	@ (801432c <handle_manage_user+0x488>)
 80142fe:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8014302:	4630      	mov	r0, r6
 8014304:	f010 f9b2 	bl	802466c <mg_http_reply>
 8014308:	e720      	b.n	801414c <handle_manage_user+0x2a8>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 801430a:	4b10      	ldr	r3, [pc, #64]	@ (801434c <handle_manage_user+0x4a8>)
 801430c:	4a07      	ldr	r2, [pc, #28]	@ (801432c <handle_manage_user+0x488>)
 801430e:	f240 1195 	movw	r1, #405	@ 0x195
 8014312:	4630      	mov	r0, r6
 8014314:	f010 f9aa 	bl	802466c <mg_http_reply>
 8014318:	e678      	b.n	801400c <handle_manage_user+0x168>
 801431a:	bf00      	nop
 801431c:	08037590 	.word	0x08037590
 8014320:	08037ad8 	.word	0x08037ad8
 8014324:	08037ae0 	.word	0x08037ae0
 8014328:	08037c4c 	.word	0x08037c4c
 801432c:	08036d30 	.word	0x08036d30
 8014330:	08037594 	.word	0x08037594
 8014334:	20002208 	.word	0x20002208
 8014338:	08036648 	.word	0x08036648
 801433c:	08037bd8 	.word	0x08037bd8
 8014340:	08037c1c 	.word	0x08037c1c
 8014344:	08037c98 	.word	0x08037c98
 8014348:	08037cd8 	.word	0x08037cd8
 801434c:	08037d6c 	.word	0x08037d6c

08014350 <load_users>:
static bool load_users(const char *file_path, users_list_t * users, size_t count){
 8014350:	b570      	push	{r4, r5, r6, lr}
 8014352:	460e      	mov	r6, r1
 8014354:	4614      	mov	r4, r2
	struct mg_fd *fd = mg_fs_open(&mg_fs_lfs, file_path, MG_FS_READ);
 8014356:	2201      	movs	r2, #1
 8014358:	4601      	mov	r1, r0
 801435a:	480e      	ldr	r0, [pc, #56]	@ (8014394 <load_users+0x44>)
 801435c:	f00e fef8 	bl	8023150 <mg_fs_open>
	if (!fd) {
 8014360:	b188      	cbz	r0, 8014386 <load_users+0x36>
 8014362:	4605      	mov	r5, r0
	mg_fs_lfs.rd(fd->fd, users, sizeof(users_list_t) * count);
 8014364:	4b0b      	ldr	r3, [pc, #44]	@ (8014394 <load_users+0x44>)
 8014366:	691b      	ldr	r3, [r3, #16]
 8014368:	22a9      	movs	r2, #169	@ 0xa9
 801436a:	fb04 f202 	mul.w	r2, r4, r2
 801436e:	4631      	mov	r1, r6
 8014370:	6800      	ldr	r0, [r0, #0]
 8014372:	4798      	blx	r3
	mg_fs_close(fd);
 8014374:	4628      	mov	r0, r5
 8014376:	f00e ff04 	bl	8023182 <mg_fs_close>
	logging(L_INFO, "Loaded web users from file");
 801437a:	4907      	ldr	r1, [pc, #28]	@ (8014398 <load_users+0x48>)
 801437c:	2001      	movs	r0, #1
 801437e:	f7fd ff13 	bl	80121a8 <logging>
	return true;
 8014382:	2001      	movs	r0, #1
}
 8014384:	bd70      	pop	{r4, r5, r6, pc}
		logging(L_ERR, "Can't open file with users");
 8014386:	4905      	ldr	r1, [pc, #20]	@ (801439c <load_users+0x4c>)
 8014388:	2003      	movs	r0, #3
 801438a:	f7fd ff0d 	bl	80121a8 <logging>
		return false;
 801438e:	2000      	movs	r0, #0
 8014390:	e7f8      	b.n	8014384 <load_users+0x34>
 8014392:	bf00      	nop
 8014394:	200000a0 	.word	0x200000a0
 8014398:	08037de8 	.word	0x08037de8
 801439c:	08037dcc 	.word	0x08037dcc

080143a0 <handle_restart_mcu>:
static void handle_restart_mcu(struct mg_connection *c, struct mg_http_message *hm){
 80143a0:	b570      	push	{r4, r5, r6, lr}
 80143a2:	b086      	sub	sp, #24
 80143a4:	4605      	mov	r5, r0
 80143a6:	460c      	mov	r4, r1
    if (mg_match(hm->method, mg_str("POST"), NULL)){
 80143a8:	ae04      	add	r6, sp, #16
 80143aa:	4915      	ldr	r1, [pc, #84]	@ (8014400 <handle_restart_mcu+0x60>)
 80143ac:	4630      	mov	r0, r6
 80143ae:	f010 fae7 	bl	8024980 <mg_str_s>
 80143b2:	2300      	movs	r3, #0
 80143b4:	9300      	str	r3, [sp, #0]
 80143b6:	e896 000c 	ldmia.w	r6, {r2, r3}
 80143ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80143be:	f010 fd01 	bl	8024dc4 <mg_match>
 80143c2:	b1a0      	cbz	r0, 80143ee <handle_restart_mcu+0x4e>
		struct mg_full_net_info * param = (struct mg_full_net_info *)c->fn_data;
 80143c4:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
		mg_timer_add(param->mgr, 2000 /* 2 seconds */, MG_TIMER_REPEAT, HAL_NVIC_SystemReset, NULL);
 80143c6:	6818      	ldr	r0, [r3, #0]
 80143c8:	2300      	movs	r3, #0
 80143ca:	9302      	str	r3, [sp, #8]
 80143cc:	4b0d      	ldr	r3, [pc, #52]	@ (8014404 <handle_restart_mcu+0x64>)
 80143ce:	9301      	str	r3, [sp, #4]
 80143d0:	2301      	movs	r3, #1
 80143d2:	9300      	str	r3, [sp, #0]
 80143d4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80143d8:	2300      	movs	r3, #0
 80143da:	f011 fcb3 	bl	8025d44 <mg_timer_add>
		mg_http_reply(c, 200, headers, //TODO delete for release,
 80143de:	4b0a      	ldr	r3, [pc, #40]	@ (8014408 <handle_restart_mcu+0x68>)
 80143e0:	4a0a      	ldr	r2, [pc, #40]	@ (801440c <handle_restart_mcu+0x6c>)
 80143e2:	21c8      	movs	r1, #200	@ 0xc8
 80143e4:	4628      	mov	r0, r5
 80143e6:	f010 f941 	bl	802466c <mg_http_reply>
}
 80143ea:	b006      	add	sp, #24
 80143ec:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 405, headers, //TODO delete for release,
 80143ee:	4b08      	ldr	r3, [pc, #32]	@ (8014410 <handle_restart_mcu+0x70>)
 80143f0:	4a06      	ldr	r2, [pc, #24]	@ (801440c <handle_restart_mcu+0x6c>)
 80143f2:	f240 1195 	movw	r1, #405	@ 0x195
 80143f6:	4628      	mov	r0, r5
 80143f8:	f010 f938 	bl	802466c <mg_http_reply>
}
 80143fc:	e7f5      	b.n	80143ea <handle_restart_mcu+0x4a>
 80143fe:	bf00      	nop
 8014400:	08036e88 	.word	0x08036e88
 8014404:	080169dd 	.word	0x080169dd
 8014408:	08037e04 	.word	0x08037e04
 801440c:	08036d30 	.word	0x08036d30
 8014410:	08036f10 	.word	0x08036f10

08014414 <handle_activete_and_reboot>:
static void handle_activete_and_reboot(struct mg_connection *c, struct mg_http_message *hm){
 8014414:	b570      	push	{r4, r5, r6, lr}
 8014416:	b084      	sub	sp, #16
 8014418:	4605      	mov	r5, r0
 801441a:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 801441c:	ae02      	add	r6, sp, #8
 801441e:	4914      	ldr	r1, [pc, #80]	@ (8014470 <handle_activete_and_reboot+0x5c>)
 8014420:	4630      	mov	r0, r6
 8014422:	f010 faad 	bl	8024980 <mg_str_s>
 8014426:	2300      	movs	r3, #0
 8014428:	9300      	str	r3, [sp, #0]
 801442a:	e896 000c 	ldmia.w	r6, {r2, r3}
 801442e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014432:	f010 fcc7 	bl	8024dc4 <mg_match>
 8014436:	b198      	cbz	r0, 8014460 <handle_activete_and_reboot+0x4c>
		if (mg_fs_lfs.mv("/firmware/firmware.bin", "/firmware.bin")){
 8014438:	4b0e      	ldr	r3, [pc, #56]	@ (8014474 <handle_activete_and_reboot+0x60>)
 801443a:	69db      	ldr	r3, [r3, #28]
 801443c:	490e      	ldr	r1, [pc, #56]	@ (8014478 <handle_activete_and_reboot+0x64>)
 801443e:	480f      	ldr	r0, [pc, #60]	@ (801447c <handle_activete_and_reboot+0x68>)
 8014440:	4798      	blx	r3
 8014442:	b128      	cbz	r0, 8014450 <handle_activete_and_reboot+0x3c>
			handle_restart_mcu(c, hm);
 8014444:	4621      	mov	r1, r4
 8014446:	4628      	mov	r0, r5
 8014448:	f7ff ffaa 	bl	80143a0 <handle_restart_mcu>
}
 801444c:	b004      	add	sp, #16
 801444e:	bd70      	pop	{r4, r5, r6, pc}
			mg_http_reply(c, 500, headers, //TODO delete for release,
 8014450:	4b0b      	ldr	r3, [pc, #44]	@ (8014480 <handle_activete_and_reboot+0x6c>)
 8014452:	4a0c      	ldr	r2, [pc, #48]	@ (8014484 <handle_activete_and_reboot+0x70>)
 8014454:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8014458:	4628      	mov	r0, r5
 801445a:	f010 f907 	bl	802466c <mg_http_reply>
 801445e:	e7f5      	b.n	801444c <handle_activete_and_reboot+0x38>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8014460:	4b09      	ldr	r3, [pc, #36]	@ (8014488 <handle_activete_and_reboot+0x74>)
 8014462:	4a08      	ldr	r2, [pc, #32]	@ (8014484 <handle_activete_and_reboot+0x70>)
 8014464:	f240 1195 	movw	r1, #405	@ 0x195
 8014468:	4628      	mov	r0, r5
 801446a:	f010 f8ff 	bl	802466c <mg_http_reply>
}
 801446e:	e7ed      	b.n	801444c <handle_activete_and_reboot+0x38>
 8014470:	08036e88 	.word	0x08036e88
 8014474:	200000a0 	.word	0x200000a0
 8014478:	08036608 	.word	0x08036608
 801447c:	08037e3c 	.word	0x08037e3c
 8014480:	08037e54 	.word	0x08037e54
 8014484:	08036d30 	.word	0x08036d30
 8014488:	08036f10 	.word	0x08036f10

0801448c <handle_fs_mkdir>:
static void handle_fs_mkdir(struct mg_connection *c, struct mg_http_message *hm) {
 801448c:	b570      	push	{r4, r5, r6, lr}
 801448e:	b0c4      	sub	sp, #272	@ 0x110
 8014490:	4606      	mov	r6, r0
 8014492:	460c      	mov	r4, r1
  if (mg_match(hm->method, mg_str("POST"), NULL)){
 8014494:	ad42      	add	r5, sp, #264	@ 0x108
 8014496:	4920      	ldr	r1, [pc, #128]	@ (8014518 <handle_fs_mkdir+0x8c>)
 8014498:	4628      	mov	r0, r5
 801449a:	f010 fa71 	bl	8024980 <mg_str_s>
 801449e:	2300      	movs	r3, #0
 80144a0:	9300      	str	r3, [sp, #0]
 80144a2:	e895 000c 	ldmia.w	r5, {r2, r3}
 80144a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80144aa:	f010 fc8b 	bl	8024dc4 <mg_match>
 80144ae:	b350      	cbz	r0, 8014506 <handle_fs_mkdir+0x7a>
	  if (mg_http_get_var(&hm->body, "name", name, sizeof(name)) > 0) {
 80144b0:	237b      	movs	r3, #123	@ 0x7b
 80144b2:	aa23      	add	r2, sp, #140	@ 0x8c
 80144b4:	4919      	ldr	r1, [pc, #100]	@ (801451c <handle_fs_mkdir+0x90>)
 80144b6:	f504 7000 	add.w	r0, r4, #512	@ 0x200
 80144ba:	f011 f94e 	bl	802575a <mg_http_get_var>
 80144be:	2800      	cmp	r0, #0
 80144c0:	dd19      	ble.n	80144f6 <handle_fs_mkdir+0x6a>
		snprintf(path, sizeof(path), "/web/%s", name);
 80144c2:	ab23      	add	r3, sp, #140	@ 0x8c
 80144c4:	4a16      	ldr	r2, [pc, #88]	@ (8014520 <handle_fs_mkdir+0x94>)
 80144c6:	2180      	movs	r1, #128	@ 0x80
 80144c8:	a803      	add	r0, sp, #12
 80144ca:	f018 f89f 	bl	802c60c <snprintf>
		if (mg_fs_lfs.mkd(path)) {
 80144ce:	4b15      	ldr	r3, [pc, #84]	@ (8014524 <handle_fs_mkdir+0x98>)
 80144d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80144d2:	a803      	add	r0, sp, #12
 80144d4:	4798      	blx	r3
 80144d6:	b130      	cbz	r0, 80144e6 <handle_fs_mkdir+0x5a>
		  mg_http_reply(c, 200, headers, //TODO delete for release,
 80144d8:	4b13      	ldr	r3, [pc, #76]	@ (8014528 <handle_fs_mkdir+0x9c>)
 80144da:	4a14      	ldr	r2, [pc, #80]	@ (801452c <handle_fs_mkdir+0xa0>)
 80144dc:	21c8      	movs	r1, #200	@ 0xc8
 80144de:	4630      	mov	r0, r6
 80144e0:	f010 f8c4 	bl	802466c <mg_http_reply>
 80144e4:	e016      	b.n	8014514 <handle_fs_mkdir+0x88>
		  mg_http_reply(c, 500, headers, //TODO delete for release,
 80144e6:	4b12      	ldr	r3, [pc, #72]	@ (8014530 <handle_fs_mkdir+0xa4>)
 80144e8:	4a10      	ldr	r2, [pc, #64]	@ (801452c <handle_fs_mkdir+0xa0>)
 80144ea:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80144ee:	4630      	mov	r0, r6
 80144f0:	f010 f8bc 	bl	802466c <mg_http_reply>
 80144f4:	e00e      	b.n	8014514 <handle_fs_mkdir+0x88>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 80144f6:	4b0f      	ldr	r3, [pc, #60]	@ (8014534 <handle_fs_mkdir+0xa8>)
 80144f8:	4a0c      	ldr	r2, [pc, #48]	@ (801452c <handle_fs_mkdir+0xa0>)
 80144fa:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80144fe:	4630      	mov	r0, r6
 8014500:	f010 f8b4 	bl	802466c <mg_http_reply>
 8014504:	e006      	b.n	8014514 <handle_fs_mkdir+0x88>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8014506:	4b0c      	ldr	r3, [pc, #48]	@ (8014538 <handle_fs_mkdir+0xac>)
 8014508:	4a08      	ldr	r2, [pc, #32]	@ (801452c <handle_fs_mkdir+0xa0>)
 801450a:	f240 1195 	movw	r1, #405	@ 0x195
 801450e:	4630      	mov	r0, r6
 8014510:	f010 f8ac 	bl	802466c <mg_http_reply>
}
 8014514:	b044      	add	sp, #272	@ 0x110
 8014516:	bd70      	pop	{r4, r5, r6, pc}
 8014518:	08036e88 	.word	0x08036e88
 801451c:	08037e98 	.word	0x08037e98
 8014520:	08037ea0 	.word	0x08037ea0
 8014524:	200000a0 	.word	0x200000a0
 8014528:	08037ea8 	.word	0x08037ea8
 801452c:	08036d30 	.word	0x08036d30
 8014530:	08037edc 	.word	0x08037edc
 8014534:	08037f18 	.word	0x08037f18
 8014538:	08036f10 	.word	0x08036f10

0801453c <handle_firmware_upload>:
static void handle_firmware_upload(struct mg_connection *c, struct mg_http_message *hm){
 801453c:	b570      	push	{r4, r5, r6, lr}
 801453e:	b0a4      	sub	sp, #144	@ 0x90
 8014540:	4605      	mov	r5, r0
 8014542:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 8014544:	ae22      	add	r6, sp, #136	@ 0x88
 8014546:	491c      	ldr	r1, [pc, #112]	@ (80145b8 <handle_firmware_upload+0x7c>)
 8014548:	4630      	mov	r0, r6
 801454a:	f010 fa19 	bl	8024980 <mg_str_s>
 801454e:	2300      	movs	r3, #0
 8014550:	9300      	str	r3, [sp, #0]
 8014552:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014556:	e894 0003 	ldmia.w	r4, {r0, r1}
 801455a:	f010 fc33 	bl	8024dc4 <mg_match>
 801455e:	b308      	cbz	r0, 80145a4 <handle_firmware_upload+0x68>
		mg_http_get_var(&hm->query, "file", file, sizeof(file));
 8014560:	2380      	movs	r3, #128	@ 0x80
 8014562:	aa02      	add	r2, sp, #8
 8014564:	4915      	ldr	r1, [pc, #84]	@ (80145bc <handle_firmware_upload+0x80>)
 8014566:	f104 0010 	add.w	r0, r4, #16
 801456a:	f011 f8f6 	bl	802575a <mg_http_get_var>
		if(strcmp(file, FIRMWARE_FILE_NAME) == 0){
 801456e:	4914      	ldr	r1, [pc, #80]	@ (80145c0 <handle_firmware_upload+0x84>)
 8014570:	a802      	add	r0, sp, #8
 8014572:	f7fb fe35 	bl	80101e0 <strcmp>
 8014576:	b958      	cbnz	r0, 8014590 <handle_firmware_upload+0x54>
			mg_http_upload(c, hm, &mg_fs_lfs, "/firmware", FIRMWARE_FILE_MAX_SIZE);
 8014578:	4b12      	ldr	r3, [pc, #72]	@ (80145c4 <handle_firmware_upload+0x88>)
 801457a:	9300      	str	r3, [sp, #0]
 801457c:	4b12      	ldr	r3, [pc, #72]	@ (80145c8 <handle_firmware_upload+0x8c>)
 801457e:	4a13      	ldr	r2, [pc, #76]	@ (80145cc <handle_firmware_upload+0x90>)
 8014580:	4621      	mov	r1, r4
 8014582:	4628      	mov	r0, r5
 8014584:	f012 feb0 	bl	80272e8 <mg_http_upload>
			vTaskDelay(1);
 8014588:	2001      	movs	r0, #1
 801458a:	f005 fe85 	bl	801a298 <vTaskDelay>
 801458e:	e010      	b.n	80145b2 <handle_firmware_upload+0x76>
			mg_http_reply(c, 400, headers, //TODO delete for release,
 8014590:	4b0b      	ldr	r3, [pc, #44]	@ (80145c0 <handle_firmware_upload+0x84>)
 8014592:	9300      	str	r3, [sp, #0]
 8014594:	4b0e      	ldr	r3, [pc, #56]	@ (80145d0 <handle_firmware_upload+0x94>)
 8014596:	4a0f      	ldr	r2, [pc, #60]	@ (80145d4 <handle_firmware_upload+0x98>)
 8014598:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801459c:	4628      	mov	r0, r5
 801459e:	f010 f865 	bl	802466c <mg_http_reply>
 80145a2:	e006      	b.n	80145b2 <handle_firmware_upload+0x76>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 80145a4:	4b0c      	ldr	r3, [pc, #48]	@ (80145d8 <handle_firmware_upload+0x9c>)
 80145a6:	4a0b      	ldr	r2, [pc, #44]	@ (80145d4 <handle_firmware_upload+0x98>)
 80145a8:	f240 1195 	movw	r1, #405	@ 0x195
 80145ac:	4628      	mov	r0, r5
 80145ae:	f010 f85d 	bl	802466c <mg_http_reply>
}
 80145b2:	b024      	add	sp, #144	@ 0x90
 80145b4:	bd70      	pop	{r4, r5, r6, pc}
 80145b6:	bf00      	nop
 80145b8:	08036e88 	.word	0x08036e88
 80145bc:	0803b6e8 	.word	0x0803b6e8
 80145c0:	08037f54 	.word	0x08037f54
 80145c4:	0003d090 	.word	0x0003d090
 80145c8:	080365fc 	.word	0x080365fc
 80145cc:	200000a0 	.word	0x200000a0
 80145d0:	08037f64 	.word	0x08037f64
 80145d4:	08036d30 	.word	0x08036d30
 80145d8:	08036f10 	.word	0x08036f10

080145dc <calc_file_md5sum>:
static int calc_file_md5sum(const char * path, char md5_str[static 33]){
 80145dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80145de:	b097      	sub	sp, #92	@ 0x5c
 80145e0:	4604      	mov	r4, r0
 80145e2:	460e      	mov	r6, r1
	char * buff = calloc(buff_len, 1);
 80145e4:	2101      	movs	r1, #1
 80145e6:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80145ea:	f7ff f879 	bl	80136e0 <mg_calloc>
	if (buff == NULL){
 80145ee:	4605      	mov	r5, r0
 80145f0:	b150      	cbz	r0, 8014608 <calc_file_md5sum+0x2c>
	struct mg_fd *fd = mg_fs_open(&mg_fs_lfs, path, MG_FS_READ); //Try to open file
 80145f2:	2201      	movs	r2, #1
 80145f4:	4621      	mov	r1, r4
 80145f6:	4828      	ldr	r0, [pc, #160]	@ (8014698 <calc_file_md5sum+0xbc>)
 80145f8:	f00e fdaa 	bl	8023150 <mg_fs_open>
	if (fd==NULL){
 80145fc:	4604      	mov	r4, r0
 80145fe:	b140      	cbz	r0, 8014612 <calc_file_md5sum+0x36>
	mg_md5_init(&md5_ctx);
 8014600:	4668      	mov	r0, sp
 8014602:	f00f f9b5 	bl	8023970 <mg_md5_init>
	while ((bytes_read = mg_fs_lfs.rd(fd->fd, buff, buff_len)) > 0) {
 8014606:	e010      	b.n	801462a <calc_file_md5sum+0x4e>
		free(buff);
 8014608:	f006 fd60 	bl	801b0cc <vPortFree>
		return -1;
 801460c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014610:	e040      	b.n	8014694 <calc_file_md5sum+0xb8>
		mg_fs_close(fd);
 8014612:	f00e fdb6 	bl	8023182 <mg_fs_close>
		free(buff);
 8014616:	4628      	mov	r0, r5
 8014618:	f006 fd58 	bl	801b0cc <vPortFree>
		return -2;
 801461c:	f06f 0001 	mvn.w	r0, #1
 8014620:	e038      	b.n	8014694 <calc_file_md5sum+0xb8>
		mg_md5_update(&md5_ctx, (const unsigned char *)buff, bytes_read);
 8014622:	4629      	mov	r1, r5
 8014624:	4668      	mov	r0, sp
 8014626:	f00f f9b9 	bl	802399c <mg_md5_update>
	while ((bytes_read = mg_fs_lfs.rd(fd->fd, buff, buff_len)) > 0) {
 801462a:	4b1b      	ldr	r3, [pc, #108]	@ (8014698 <calc_file_md5sum+0xbc>)
 801462c:	691b      	ldr	r3, [r3, #16]
 801462e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8014632:	4629      	mov	r1, r5
 8014634:	6820      	ldr	r0, [r4, #0]
 8014636:	4798      	blx	r3
 8014638:	4602      	mov	r2, r0
 801463a:	2800      	cmp	r0, #0
 801463c:	d1f1      	bne.n	8014622 <calc_file_md5sum+0x46>
	mg_fs_close(fd);
 801463e:	4620      	mov	r0, r4
 8014640:	f00e fd9f 	bl	8023182 <mg_fs_close>
	uint8_t * digest = calloc(digest_len, 1);
 8014644:	2101      	movs	r1, #1
 8014646:	2010      	movs	r0, #16
 8014648:	f7ff f84a 	bl	80136e0 <mg_calloc>
	if (digest == NULL){
 801464c:	4607      	mov	r7, r0
 801464e:	b128      	cbz	r0, 801465c <calc_file_md5sum+0x80>
	mg_md5_final(&md5_ctx, digest);
 8014650:	4601      	mov	r1, r0
 8014652:	4668      	mov	r0, sp
 8014654:	f00f f9f9 	bl	8023a4a <mg_md5_final>
	for (int i = 0; i < 16; ++i) {
 8014658:	2400      	movs	r4, #0
 801465a:	e012      	b.n	8014682 <calc_file_md5sum+0xa6>
		free(buff);
 801465c:	4628      	mov	r0, r5
 801465e:	f006 fd35 	bl	801b0cc <vPortFree>
		free(digest);
 8014662:	4638      	mov	r0, r7
 8014664:	f006 fd32 	bl	801b0cc <vPortFree>
		return -1;
 8014668:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801466c:	e012      	b.n	8014694 <calc_file_md5sum+0xb8>
		snprintf(md5_str + (i * 2), md5_str_size - (i * 2), "%02x", digest[i]);
 801466e:	0061      	lsls	r1, r4, #1
 8014670:	5d3b      	ldrb	r3, [r7, r4]
 8014672:	4a0a      	ldr	r2, [pc, #40]	@ (801469c <calc_file_md5sum+0xc0>)
 8014674:	f1c1 0121 	rsb	r1, r1, #33	@ 0x21
 8014678:	eb06 0044 	add.w	r0, r6, r4, lsl #1
 801467c:	f017 ffc6 	bl	802c60c <snprintf>
	for (int i = 0; i < 16; ++i) {
 8014680:	3401      	adds	r4, #1
 8014682:	2c0f      	cmp	r4, #15
 8014684:	ddf3      	ble.n	801466e <calc_file_md5sum+0x92>
	free(buff);
 8014686:	4628      	mov	r0, r5
 8014688:	f006 fd20 	bl	801b0cc <vPortFree>
	free(digest);
 801468c:	4638      	mov	r0, r7
 801468e:	f006 fd1d 	bl	801b0cc <vPortFree>
	return 0;
 8014692:	2000      	movs	r0, #0
}
 8014694:	b017      	add	sp, #92	@ 0x5c
 8014696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014698:	200000a0 	.word	0x200000a0
 801469c:	08037fb0 	.word	0x08037fb0

080146a0 <handle_firmware_md5>:
static void handle_firmware_md5(struct mg_connection *c, struct mg_http_message *hm){
 80146a0:	b570      	push	{r4, r5, r6, lr}
 80146a2:	b084      	sub	sp, #16
 80146a4:	4605      	mov	r5, r0
 80146a6:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 80146a8:	ae02      	add	r6, sp, #8
 80146aa:	4919      	ldr	r1, [pc, #100]	@ (8014710 <handle_firmware_md5+0x70>)
 80146ac:	4630      	mov	r0, r6
 80146ae:	f010 f967 	bl	8024980 <mg_str_s>
 80146b2:	2300      	movs	r3, #0
 80146b4:	9300      	str	r3, [sp, #0]
 80146b6:	e896 000c 	ldmia.w	r6, {r2, r3}
 80146ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80146be:	f010 fb81 	bl	8024dc4 <mg_match>
 80146c2:	b1e8      	cbz	r0, 8014700 <handle_firmware_md5+0x60>
		char * md5_str = calloc(MD5_STR_LEN, sizeof(char));
 80146c4:	2101      	movs	r1, #1
 80146c6:	2021      	movs	r0, #33	@ 0x21
 80146c8:	f7ff f80a 	bl	80136e0 <mg_calloc>
 80146cc:	4604      	mov	r4, r0
		if(calc_file_md5sum("/firmware/firmware.bin", md5_str) == 0){
 80146ce:	4601      	mov	r1, r0
 80146d0:	4810      	ldr	r0, [pc, #64]	@ (8014714 <handle_firmware_md5+0x74>)
 80146d2:	f7ff ff83 	bl	80145dc <calc_file_md5sum>
 80146d6:	b958      	cbnz	r0, 80146f0 <handle_firmware_md5+0x50>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 80146d8:	9400      	str	r4, [sp, #0]
 80146da:	4b0f      	ldr	r3, [pc, #60]	@ (8014718 <handle_firmware_md5+0x78>)
 80146dc:	4a0f      	ldr	r2, [pc, #60]	@ (801471c <handle_firmware_md5+0x7c>)
 80146de:	21c8      	movs	r1, #200	@ 0xc8
 80146e0:	4628      	mov	r0, r5
 80146e2:	f00f ffc3 	bl	802466c <mg_http_reply>
		free(md5_str);
 80146e6:	4620      	mov	r0, r4
 80146e8:	f006 fcf0 	bl	801b0cc <vPortFree>
}
 80146ec:	b004      	add	sp, #16
 80146ee:	bd70      	pop	{r4, r5, r6, pc}
			mg_http_reply(c, 404, headers, //TODO delete for release,
 80146f0:	4b0b      	ldr	r3, [pc, #44]	@ (8014720 <handle_firmware_md5+0x80>)
 80146f2:	4a0a      	ldr	r2, [pc, #40]	@ (801471c <handle_firmware_md5+0x7c>)
 80146f4:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 80146f8:	4628      	mov	r0, r5
 80146fa:	f00f ffb7 	bl	802466c <mg_http_reply>
 80146fe:	e7f2      	b.n	80146e6 <handle_firmware_md5+0x46>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8014700:	4b08      	ldr	r3, [pc, #32]	@ (8014724 <handle_firmware_md5+0x84>)
 8014702:	4a06      	ldr	r2, [pc, #24]	@ (801471c <handle_firmware_md5+0x7c>)
 8014704:	f240 1195 	movw	r1, #405	@ 0x195
 8014708:	4628      	mov	r0, r5
 801470a:	f00f ffaf 	bl	802466c <mg_http_reply>
}
 801470e:	e7ed      	b.n	80146ec <handle_firmware_md5+0x4c>
 8014710:	08036cf4 	.word	0x08036cf4
 8014714:	08037e3c 	.word	0x08037e3c
 8014718:	08037fb8 	.word	0x08037fb8
 801471c:	08036d30 	.word	0x08036d30
 8014720:	08037fdc 	.word	0x08037fdc
 8014724:	08036da4 	.word	0x08036da4

08014728 <dashboard>:

static void dashboard(struct mg_connection *c, int ev, void *ev_data) {

	if (ev == MG_EV_HTTP_MSG) {
 8014728:	290b      	cmp	r1, #11
 801472a:	d000      	beq.n	801472e <dashboard+0x6>
 801472c:	4770      	bx	lr
static void dashboard(struct mg_connection *c, int ev, void *ev_data) {
 801472e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014730:	b0b5      	sub	sp, #212	@ 0xd4
 8014732:	4605      	mov	r5, r0
 8014734:	4614      	mov	r4, r2
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;

    bool authenticate = auth(c, hm, 0); //Check authentication status
 8014736:	2200      	movs	r2, #0
 8014738:	4621      	mov	r1, r4
 801473a:	f7fe fdff 	bl	801333c <auth>
 801473e:	4607      	mov	r7, r0

        if (mg_match(hm->method, mg_str("OPTIONS"), NULL)) {
 8014740:	ae08      	add	r6, sp, #32
 8014742:	49af      	ldr	r1, [pc, #700]	@ (8014a00 <dashboard+0x2d8>)
 8014744:	4630      	mov	r0, r6
 8014746:	f010 f91b 	bl	8024980 <mg_str_s>
 801474a:	2300      	movs	r3, #0
 801474c:	9300      	str	r3, [sp, #0]
 801474e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014752:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014756:	f010 fb35 	bl	8024dc4 <mg_match>
 801475a:	b120      	cbz	r0, 8014766 <dashboard+0x3e>
            	handle_OPTIONS_method(c);
 801475c:	4628      	mov	r0, r5
 801475e:	f7fe fc45 	bl	8012fec <handle_OPTIONS_method>
				.fs = &mg_fs_lfs
			};
			mg_http_serve_dir(c, ev_data, &opts);
		}
	}
}
 8014762:	b035      	add	sp, #212	@ 0xd4
 8014764:	bdf0      	pop	{r4, r5, r6, r7, pc}
        }else if (mg_match(hm->uri, mg_str("/api/#"), NULL) && !authenticate ) { // All requests to /api should be authenticated
 8014766:	ae0a      	add	r6, sp, #40	@ 0x28
 8014768:	49a6      	ldr	r1, [pc, #664]	@ (8014a04 <dashboard+0x2dc>)
 801476a:	4630      	mov	r0, r6
 801476c:	f010 f908 	bl	8024980 <mg_str_s>
 8014770:	2300      	movs	r3, #0
 8014772:	9300      	str	r3, [sp, #0]
 8014774:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014778:	f104 0108 	add.w	r1, r4, #8
 801477c:	c903      	ldmia	r1, {r0, r1}
 801477e:	f010 fb21 	bl	8024dc4 <mg_match>
 8014782:	b100      	cbz	r0, 8014786 <dashboard+0x5e>
 8014784:	b1bf      	cbz	r7, 80147b6 <dashboard+0x8e>
		}else if (mg_match(hm->uri, mg_str("/api/login"), NULL)) {
 8014786:	ae0c      	add	r6, sp, #48	@ 0x30
 8014788:	499f      	ldr	r1, [pc, #636]	@ (8014a08 <dashboard+0x2e0>)
 801478a:	4630      	mov	r0, r6
 801478c:	f010 f8f8 	bl	8024980 <mg_str_s>
 8014790:	2300      	movs	r3, #0
 8014792:	9300      	str	r3, [sp, #0]
 8014794:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014798:	f104 0108 	add.w	r1, r4, #8
 801479c:	c903      	ldmia	r1, {r0, r1}
 801479e:	f010 fb11 	bl	8024dc4 <mg_match>
 80147a2:	b180      	cbz	r0, 80147c6 <dashboard+0x9e>
			logging(L_INFO, "Call API /api/login");
 80147a4:	4999      	ldr	r1, [pc, #612]	@ (8014a0c <dashboard+0x2e4>)
 80147a6:	2001      	movs	r0, #1
 80147a8:	f7fd fcfe 	bl	80121a8 <logging>
        	 handler_authanticate(c,hm);
 80147ac:	4621      	mov	r1, r4
 80147ae:	4628      	mov	r0, r5
 80147b0:	f7fe feb0 	bl	8013514 <handler_authanticate>
 80147b4:	e7d5      	b.n	8014762 <dashboard+0x3a>
        	mg_http_reply(c, 403, "", "Not Authorised\n");
 80147b6:	4b96      	ldr	r3, [pc, #600]	@ (8014a10 <dashboard+0x2e8>)
 80147b8:	4a96      	ldr	r2, [pc, #600]	@ (8014a14 <dashboard+0x2ec>)
 80147ba:	f240 1193 	movw	r1, #403	@ 0x193
 80147be:	4628      	mov	r0, r5
 80147c0:	f00f ff54 	bl	802466c <mg_http_reply>
 80147c4:	e7cd      	b.n	8014762 <dashboard+0x3a>
		}else if (mg_match(hm->uri, mg_str("/api/logout"), NULL)) {
 80147c6:	ae0e      	add	r6, sp, #56	@ 0x38
 80147c8:	4993      	ldr	r1, [pc, #588]	@ (8014a18 <dashboard+0x2f0>)
 80147ca:	4630      	mov	r0, r6
 80147cc:	f010 f8d8 	bl	8024980 <mg_str_s>
 80147d0:	2300      	movs	r3, #0
 80147d2:	9300      	str	r3, [sp, #0]
 80147d4:	e896 000c 	ldmia.w	r6, {r2, r3}
 80147d8:	f104 0108 	add.w	r1, r4, #8
 80147dc:	c903      	ldmia	r1, {r0, r1}
 80147de:	f010 faf1 	bl	8024dc4 <mg_match>
 80147e2:	b140      	cbz	r0, 80147f6 <dashboard+0xce>
			logging(L_INFO, "Call API /api/logout");
 80147e4:	498d      	ldr	r1, [pc, #564]	@ (8014a1c <dashboard+0x2f4>)
 80147e6:	2001      	movs	r0, #1
 80147e8:	f7fd fcde 	bl	80121a8 <logging>
			handler_logout(c,hm);
 80147ec:	4621      	mov	r1, r4
 80147ee:	4628      	mov	r0, r5
 80147f0:	f7fe fcea 	bl	80131c8 <handler_logout>
 80147f4:	e7b5      	b.n	8014762 <dashboard+0x3a>
		}else if (mg_match(hm->uri, mg_str("/api/ram/status"), NULL)) { // Get free and allocated RAM space
 80147f6:	ae10      	add	r6, sp, #64	@ 0x40
 80147f8:	4989      	ldr	r1, [pc, #548]	@ (8014a20 <dashboard+0x2f8>)
 80147fa:	4630      	mov	r0, r6
 80147fc:	f010 f8c0 	bl	8024980 <mg_str_s>
 8014800:	2300      	movs	r3, #0
 8014802:	9300      	str	r3, [sp, #0]
 8014804:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014808:	f104 0108 	add.w	r1, r4, #8
 801480c:	c903      	ldmia	r1, {r0, r1}
 801480e:	f010 fad9 	bl	8024dc4 <mg_match>
 8014812:	b138      	cbz	r0, 8014824 <dashboard+0xfc>
			logging(L_INFO, "Call API /api/ram/status");
 8014814:	4983      	ldr	r1, [pc, #524]	@ (8014a24 <dashboard+0x2fc>)
 8014816:	2001      	movs	r0, #1
 8014818:	f7fd fcc6 	bl	80121a8 <logging>
			handle_ram_status_get(c);
 801481c:	4628      	mov	r0, r5
 801481e:	f7fe fe8d 	bl	801353c <handle_ram_status_get>
 8014822:	e79e      	b.n	8014762 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/io/status"), NULL)){
 8014824:	ae12      	add	r6, sp, #72	@ 0x48
 8014826:	4980      	ldr	r1, [pc, #512]	@ (8014a28 <dashboard+0x300>)
 8014828:	4630      	mov	r0, r6
 801482a:	f010 f8a9 	bl	8024980 <mg_str_s>
 801482e:	2300      	movs	r3, #0
 8014830:	9300      	str	r3, [sp, #0]
 8014832:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014836:	f104 0108 	add.w	r1, r4, #8
 801483a:	c903      	ldmia	r1, {r0, r1}
 801483c:	f010 fac2 	bl	8024dc4 <mg_match>
 8014840:	b140      	cbz	r0, 8014854 <dashboard+0x12c>
			logging(L_INFO, "Call API /api/io/status");
 8014842:	497a      	ldr	r1, [pc, #488]	@ (8014a2c <dashboard+0x304>)
 8014844:	2001      	movs	r0, #1
 8014846:	f7fd fcaf 	bl	80121a8 <logging>
			handle_io_status_get(c, hm);
 801484a:	4621      	mov	r1, r4
 801484c:	4628      	mov	r0, r5
 801484e:	f7fe fe95 	bl	801357c <handle_io_status_get>
 8014852:	e786      	b.n	8014762 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/mqtt/settings"), NULL)){
 8014854:	ae14      	add	r6, sp, #80	@ 0x50
 8014856:	4976      	ldr	r1, [pc, #472]	@ (8014a30 <dashboard+0x308>)
 8014858:	4630      	mov	r0, r6
 801485a:	f010 f891 	bl	8024980 <mg_str_s>
 801485e:	2300      	movs	r3, #0
 8014860:	9300      	str	r3, [sp, #0]
 8014862:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014866:	f104 0108 	add.w	r1, r4, #8
 801486a:	c903      	ldmia	r1, {r0, r1}
 801486c:	f010 faaa 	bl	8024dc4 <mg_match>
 8014870:	b140      	cbz	r0, 8014884 <dashboard+0x15c>
			logging(L_INFO, "Call API /api/mqtt/settings");
 8014872:	4970      	ldr	r1, [pc, #448]	@ (8014a34 <dashboard+0x30c>)
 8014874:	2001      	movs	r0, #1
 8014876:	f7fd fc97 	bl	80121a8 <logging>
			handle_mqtt_conf(c, hm);
 801487a:	4621      	mov	r1, r4
 801487c:	4628      	mov	r0, r5
 801487e:	f7fe ff3d 	bl	80136fc <handle_mqtt_conf>
 8014882:	e76e      	b.n	8014762 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/modbus/acl"), NULL)){
 8014884:	ae16      	add	r6, sp, #88	@ 0x58
 8014886:	496c      	ldr	r1, [pc, #432]	@ (8014a38 <dashboard+0x310>)
 8014888:	4630      	mov	r0, r6
 801488a:	f010 f879 	bl	8024980 <mg_str_s>
 801488e:	2300      	movs	r3, #0
 8014890:	9300      	str	r3, [sp, #0]
 8014892:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014896:	f104 0108 	add.w	r1, r4, #8
 801489a:	c903      	ldmia	r1, {r0, r1}
 801489c:	f010 fa92 	bl	8024dc4 <mg_match>
 80148a0:	b140      	cbz	r0, 80148b4 <dashboard+0x18c>
			logging(L_INFO, "Call API /api/modbus/acl");
 80148a2:	4966      	ldr	r1, [pc, #408]	@ (8014a3c <dashboard+0x314>)
 80148a4:	2001      	movs	r0, #1
 80148a6:	f7fd fc7f 	bl	80121a8 <logging>
			handle_mb_tcp_access_list(c, hm);
 80148aa:	4621      	mov	r1, r4
 80148ac:	4628      	mov	r0, r5
 80148ae:	f7ff f85d 	bl	801396c <handle_mb_tcp_access_list>
 80148b2:	e756      	b.n	8014762 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/status"), NULL)){
 80148b4:	ae18      	add	r6, sp, #96	@ 0x60
 80148b6:	4962      	ldr	r1, [pc, #392]	@ (8014a40 <dashboard+0x318>)
 80148b8:	4630      	mov	r0, r6
 80148ba:	f010 f861 	bl	8024980 <mg_str_s>
 80148be:	2300      	movs	r3, #0
 80148c0:	9300      	str	r3, [sp, #0]
 80148c2:	e896 000c 	ldmia.w	r6, {r2, r3}
 80148c6:	f104 0108 	add.w	r1, r4, #8
 80148ca:	c903      	ldmia	r1, {r0, r1}
 80148cc:	f010 fa7a 	bl	8024dc4 <mg_match>
 80148d0:	b140      	cbz	r0, 80148e4 <dashboard+0x1bc>
			logging(L_INFO, "Call API /api/device/status");
 80148d2:	495c      	ldr	r1, [pc, #368]	@ (8014a44 <dashboard+0x31c>)
 80148d4:	2001      	movs	r0, #1
 80148d6:	f7fd fc67 	bl	80121a8 <logging>
			handle_dev_status(c, hm);
 80148da:	4621      	mov	r1, r4
 80148dc:	4628      	mov	r0, r5
 80148de:	f7ff f925 	bl	8013b2c <handle_dev_status>
 80148e2:	e73e      	b.n	8014762 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/log"), NULL)){
 80148e4:	ae1a      	add	r6, sp, #104	@ 0x68
 80148e6:	4958      	ldr	r1, [pc, #352]	@ (8014a48 <dashboard+0x320>)
 80148e8:	4630      	mov	r0, r6
 80148ea:	f010 f849 	bl	8024980 <mg_str_s>
 80148ee:	2300      	movs	r3, #0
 80148f0:	9300      	str	r3, [sp, #0]
 80148f2:	e896 000c 	ldmia.w	r6, {r2, r3}
 80148f6:	68e1      	ldr	r1, [r4, #12]
 80148f8:	68a0      	ldr	r0, [r4, #8]
 80148fa:	f010 fa63 	bl	8024dc4 <mg_match>
 80148fe:	b148      	cbz	r0, 8014914 <dashboard+0x1ec>
			logging(L_INFO, "Call API /api/device/log");
 8014900:	4952      	ldr	r1, [pc, #328]	@ (8014a4c <dashboard+0x324>)
 8014902:	2001      	movs	r0, #1
 8014904:	f7fd fc50 	bl	80121a8 <logging>
			handle_fs_get_log(c, hm, 0);
 8014908:	2200      	movs	r2, #0
 801490a:	4621      	mov	r1, r4
 801490c:	4628      	mov	r0, r5
 801490e:	f7ff fa4b 	bl	8013da8 <handle_fs_get_log>
 8014912:	e726      	b.n	8014762 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/log_old"), NULL)){
 8014914:	ae1c      	add	r6, sp, #112	@ 0x70
 8014916:	494e      	ldr	r1, [pc, #312]	@ (8014a50 <dashboard+0x328>)
 8014918:	4630      	mov	r0, r6
 801491a:	f010 f831 	bl	8024980 <mg_str_s>
 801491e:	2300      	movs	r3, #0
 8014920:	9300      	str	r3, [sp, #0]
 8014922:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014926:	68e1      	ldr	r1, [r4, #12]
 8014928:	68a0      	ldr	r0, [r4, #8]
 801492a:	f010 fa4b 	bl	8024dc4 <mg_match>
 801492e:	b148      	cbz	r0, 8014944 <dashboard+0x21c>
			logging(L_INFO, "Call API /api/device/log_old");
 8014930:	4948      	ldr	r1, [pc, #288]	@ (8014a54 <dashboard+0x32c>)
 8014932:	2001      	movs	r0, #1
 8014934:	f7fd fc38 	bl	80121a8 <logging>
			handle_fs_get_log(c, hm, 1);
 8014938:	2201      	movs	r2, #1
 801493a:	4621      	mov	r1, r4
 801493c:	4628      	mov	r0, r5
 801493e:	f7ff fa33 	bl	8013da8 <handle_fs_get_log>
 8014942:	e70e      	b.n	8014762 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/user"), NULL)){
 8014944:	ae1e      	add	r6, sp, #120	@ 0x78
 8014946:	4944      	ldr	r1, [pc, #272]	@ (8014a58 <dashboard+0x330>)
 8014948:	4630      	mov	r0, r6
 801494a:	f010 f819 	bl	8024980 <mg_str_s>
 801494e:	2300      	movs	r3, #0
 8014950:	9300      	str	r3, [sp, #0]
 8014952:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014956:	68e1      	ldr	r1, [r4, #12]
 8014958:	68a0      	ldr	r0, [r4, #8]
 801495a:	f010 fa33 	bl	8024dc4 <mg_match>
 801495e:	b140      	cbz	r0, 8014972 <dashboard+0x24a>
			logging(L_INFO, "Call API /api/device/user");
 8014960:	493e      	ldr	r1, [pc, #248]	@ (8014a5c <dashboard+0x334>)
 8014962:	2001      	movs	r0, #1
 8014964:	f7fd fc20 	bl	80121a8 <logging>
			handle_manage_user(c, hm);
 8014968:	4621      	mov	r1, r4
 801496a:	4628      	mov	r0, r5
 801496c:	f7ff fa9a 	bl	8013ea4 <handle_manage_user>
 8014970:	e6f7      	b.n	8014762 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/restart"), NULL)){
 8014972:	ae20      	add	r6, sp, #128	@ 0x80
 8014974:	493a      	ldr	r1, [pc, #232]	@ (8014a60 <dashboard+0x338>)
 8014976:	4630      	mov	r0, r6
 8014978:	f010 f802 	bl	8024980 <mg_str_s>
 801497c:	2300      	movs	r3, #0
 801497e:	9300      	str	r3, [sp, #0]
 8014980:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014984:	68e1      	ldr	r1, [r4, #12]
 8014986:	68a0      	ldr	r0, [r4, #8]
 8014988:	f010 fa1c 	bl	8024dc4 <mg_match>
 801498c:	b140      	cbz	r0, 80149a0 <dashboard+0x278>
			logging(L_INFO, "Call API /api/device/restart");
 801498e:	4935      	ldr	r1, [pc, #212]	@ (8014a64 <dashboard+0x33c>)
 8014990:	2001      	movs	r0, #1
 8014992:	f7fd fc09 	bl	80121a8 <logging>
			handle_restart_mcu(c, hm);
 8014996:	4621      	mov	r1, r4
 8014998:	4628      	mov	r0, r5
 801499a:	f7ff fd01 	bl	80143a0 <handle_restart_mcu>
 801499e:	e6e0      	b.n	8014762 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/version"), NULL)){
 80149a0:	ae22      	add	r6, sp, #136	@ 0x88
 80149a2:	4931      	ldr	r1, [pc, #196]	@ (8014a68 <dashboard+0x340>)
 80149a4:	4630      	mov	r0, r6
 80149a6:	f00f ffeb 	bl	8024980 <mg_str_s>
 80149aa:	2300      	movs	r3, #0
 80149ac:	9300      	str	r3, [sp, #0]
 80149ae:	e896 000c 	ldmia.w	r6, {r2, r3}
 80149b2:	68e1      	ldr	r1, [r4, #12]
 80149b4:	68a0      	ldr	r0, [r4, #8]
 80149b6:	f010 fa05 	bl	8024dc4 <mg_match>
 80149ba:	b140      	cbz	r0, 80149ce <dashboard+0x2a6>
			logging(L_INFO, "Call API /api/device/version");
 80149bc:	492b      	ldr	r1, [pc, #172]	@ (8014a6c <dashboard+0x344>)
 80149be:	2001      	movs	r0, #1
 80149c0:	f7fd fbf2 	bl	80121a8 <logging>
			handler_dev_version(c, hm);
 80149c4:	4621      	mov	r1, r4
 80149c6:	4628      	mov	r0, r5
 80149c8:	f7fe fb1c 	bl	8013004 <handler_dev_version>
 80149cc:	e6c9      	b.n	8014762 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/info"), NULL)){
 80149ce:	ae24      	add	r6, sp, #144	@ 0x90
 80149d0:	4927      	ldr	r1, [pc, #156]	@ (8014a70 <dashboard+0x348>)
 80149d2:	4630      	mov	r0, r6
 80149d4:	f00f ffd4 	bl	8024980 <mg_str_s>
 80149d8:	2300      	movs	r3, #0
 80149da:	9300      	str	r3, [sp, #0]
 80149dc:	e896 000c 	ldmia.w	r6, {r2, r3}
 80149e0:	68e1      	ldr	r1, [r4, #12]
 80149e2:	68a0      	ldr	r0, [r4, #8]
 80149e4:	f010 f9ee 	bl	8024dc4 <mg_match>
 80149e8:	2800      	cmp	r0, #0
 80149ea:	d045      	beq.n	8014a78 <dashboard+0x350>
			logging(L_INFO, "Call API /api/device/info");
 80149ec:	4921      	ldr	r1, [pc, #132]	@ (8014a74 <dashboard+0x34c>)
 80149ee:	2001      	movs	r0, #1
 80149f0:	f7fd fbda 	bl	80121a8 <logging>
			handler_dev_info(c, hm);
 80149f4:	4621      	mov	r1, r4
 80149f6:	4628      	mov	r0, r5
 80149f8:	f7fe fb36 	bl	8013068 <handler_dev_info>
 80149fc:	e6b1      	b.n	8014762 <dashboard+0x3a>
 80149fe:	bf00      	nop
 8014a00:	0803801c 	.word	0x0803801c
 8014a04:	08038024 	.word	0x08038024
 8014a08:	0803803c 	.word	0x0803803c
 8014a0c:	08038048 	.word	0x08038048
 8014a10:	0803802c 	.word	0x0803802c
 8014a14:	080373ac 	.word	0x080373ac
 8014a18:	0803805c 	.word	0x0803805c
 8014a1c:	08038068 	.word	0x08038068
 8014a20:	08038080 	.word	0x08038080
 8014a24:	08038090 	.word	0x08038090
 8014a28:	080380ac 	.word	0x080380ac
 8014a2c:	080380bc 	.word	0x080380bc
 8014a30:	080380d4 	.word	0x080380d4
 8014a34:	080380e8 	.word	0x080380e8
 8014a38:	08038104 	.word	0x08038104
 8014a3c:	08038114 	.word	0x08038114
 8014a40:	08038130 	.word	0x08038130
 8014a44:	08038144 	.word	0x08038144
 8014a48:	08038160 	.word	0x08038160
 8014a4c:	08038170 	.word	0x08038170
 8014a50:	0803818c 	.word	0x0803818c
 8014a54:	080381a0 	.word	0x080381a0
 8014a58:	080381c0 	.word	0x080381c0
 8014a5c:	080381d4 	.word	0x080381d4
 8014a60:	080381f0 	.word	0x080381f0
 8014a64:	08038204 	.word	0x08038204
 8014a68:	08038224 	.word	0x08038224
 8014a6c:	08038238 	.word	0x08038238
 8014a70:	08038258 	.word	0x08038258
 8014a74:	0803826c 	.word	0x0803826c
		}else if(mg_match(hm->uri, mg_str("/api/firmware/upload"), NULL)){
 8014a78:	ae26      	add	r6, sp, #152	@ 0x98
 8014a7a:	4950      	ldr	r1, [pc, #320]	@ (8014bbc <dashboard+0x494>)
 8014a7c:	4630      	mov	r0, r6
 8014a7e:	f00f ff7f 	bl	8024980 <mg_str_s>
 8014a82:	2300      	movs	r3, #0
 8014a84:	9300      	str	r3, [sp, #0]
 8014a86:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014a8a:	68e1      	ldr	r1, [r4, #12]
 8014a8c:	68a0      	ldr	r0, [r4, #8]
 8014a8e:	f010 f999 	bl	8024dc4 <mg_match>
 8014a92:	b120      	cbz	r0, 8014a9e <dashboard+0x376>
			handle_firmware_upload(c, hm);
 8014a94:	4621      	mov	r1, r4
 8014a96:	4628      	mov	r0, r5
 8014a98:	f7ff fd50 	bl	801453c <handle_firmware_upload>
 8014a9c:	e661      	b.n	8014762 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/md5"), NULL)){
 8014a9e:	ae28      	add	r6, sp, #160	@ 0xa0
 8014aa0:	4947      	ldr	r1, [pc, #284]	@ (8014bc0 <dashboard+0x498>)
 8014aa2:	4630      	mov	r0, r6
 8014aa4:	f00f ff6c 	bl	8024980 <mg_str_s>
 8014aa8:	2300      	movs	r3, #0
 8014aaa:	9300      	str	r3, [sp, #0]
 8014aac:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014ab0:	68e1      	ldr	r1, [r4, #12]
 8014ab2:	68a0      	ldr	r0, [r4, #8]
 8014ab4:	f010 f986 	bl	8024dc4 <mg_match>
 8014ab8:	b140      	cbz	r0, 8014acc <dashboard+0x3a4>
			logging(L_INFO, "Call API /api/firmware/md5");
 8014aba:	4942      	ldr	r1, [pc, #264]	@ (8014bc4 <dashboard+0x49c>)
 8014abc:	2001      	movs	r0, #1
 8014abe:	f7fd fb73 	bl	80121a8 <logging>
			handle_firmware_md5(c, hm);
 8014ac2:	4621      	mov	r1, r4
 8014ac4:	4628      	mov	r0, r5
 8014ac6:	f7ff fdeb 	bl	80146a0 <handle_firmware_md5>
 8014aca:	e64a      	b.n	8014762 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/apply"), NULL)){
 8014acc:	ae2a      	add	r6, sp, #168	@ 0xa8
 8014ace:	493e      	ldr	r1, [pc, #248]	@ (8014bc8 <dashboard+0x4a0>)
 8014ad0:	4630      	mov	r0, r6
 8014ad2:	f00f ff55 	bl	8024980 <mg_str_s>
 8014ad6:	2300      	movs	r3, #0
 8014ad8:	9300      	str	r3, [sp, #0]
 8014ada:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014ade:	68e1      	ldr	r1, [r4, #12]
 8014ae0:	68a0      	ldr	r0, [r4, #8]
 8014ae2:	f010 f96f 	bl	8024dc4 <mg_match>
 8014ae6:	b140      	cbz	r0, 8014afa <dashboard+0x3d2>
			logging(L_INFO, "Call API /api/firmware/apply");
 8014ae8:	4938      	ldr	r1, [pc, #224]	@ (8014bcc <dashboard+0x4a4>)
 8014aea:	2001      	movs	r0, #1
 8014aec:	f7fd fb5c 	bl	80121a8 <logging>
			handle_activete_and_reboot(c, hm);
 8014af0:	4621      	mov	r1, r4
 8014af2:	4628      	mov	r0, r5
 8014af4:	f7ff fc8e 	bl	8014414 <handle_activete_and_reboot>
 8014af8:	e633      	b.n	8014762 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/deactivate"), NULL)){
 8014afa:	ae2c      	add	r6, sp, #176	@ 0xb0
 8014afc:	4934      	ldr	r1, [pc, #208]	@ (8014bd0 <dashboard+0x4a8>)
 8014afe:	4630      	mov	r0, r6
 8014b00:	f00f ff3e 	bl	8024980 <mg_str_s>
 8014b04:	2300      	movs	r3, #0
 8014b06:	9300      	str	r3, [sp, #0]
 8014b08:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014b0c:	68e1      	ldr	r1, [r4, #12]
 8014b0e:	68a0      	ldr	r0, [r4, #8]
 8014b10:	f010 f958 	bl	8024dc4 <mg_match>
 8014b14:	b120      	cbz	r0, 8014b20 <dashboard+0x3f8>
			handle_firmware_deactivate(c, hm);
 8014b16:	4621      	mov	r1, r4
 8014b18:	4628      	mov	r0, r5
 8014b1a:	f7fe fae3 	bl	80130e4 <handle_firmware_deactivate>
 8014b1e:	e620      	b.n	8014762 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/remove"), NULL)){
 8014b20:	ae2e      	add	r6, sp, #184	@ 0xb8
 8014b22:	492c      	ldr	r1, [pc, #176]	@ (8014bd4 <dashboard+0x4ac>)
 8014b24:	4630      	mov	r0, r6
 8014b26:	f00f ff2b 	bl	8024980 <mg_str_s>
 8014b2a:	2300      	movs	r3, #0
 8014b2c:	9300      	str	r3, [sp, #0]
 8014b2e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014b32:	68e1      	ldr	r1, [r4, #12]
 8014b34:	68a0      	ldr	r0, [r4, #8]
 8014b36:	f010 f945 	bl	8024dc4 <mg_match>
 8014b3a:	b120      	cbz	r0, 8014b46 <dashboard+0x41e>
			 handle_web_files_remove(c, hm);
 8014b3c:	4621      	mov	r1, r4
 8014b3e:	4628      	mov	r0, r5
 8014b40:	f7fe fb0c 	bl	801315c <handle_web_files_remove>
 8014b44:	e60d      	b.n	8014762 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/upload"), NULL)){
 8014b46:	ae30      	add	r6, sp, #192	@ 0xc0
 8014b48:	4923      	ldr	r1, [pc, #140]	@ (8014bd8 <dashboard+0x4b0>)
 8014b4a:	4630      	mov	r0, r6
 8014b4c:	f00f ff18 	bl	8024980 <mg_str_s>
 8014b50:	2300      	movs	r3, #0
 8014b52:	9300      	str	r3, [sp, #0]
 8014b54:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014b58:	68e1      	ldr	r1, [r4, #12]
 8014b5a:	68a0      	ldr	r0, [r4, #8]
 8014b5c:	f010 f932 	bl	8024dc4 <mg_match>
 8014b60:	b140      	cbz	r0, 8014b74 <dashboard+0x44c>
			 mg_http_upload(c, hm, &mg_fs_lfs, "/web", 1500000);
 8014b62:	4b1e      	ldr	r3, [pc, #120]	@ (8014bdc <dashboard+0x4b4>)
 8014b64:	9300      	str	r3, [sp, #0]
 8014b66:	4b1e      	ldr	r3, [pc, #120]	@ (8014be0 <dashboard+0x4b8>)
 8014b68:	4a1e      	ldr	r2, [pc, #120]	@ (8014be4 <dashboard+0x4bc>)
 8014b6a:	4621      	mov	r1, r4
 8014b6c:	4628      	mov	r0, r5
 8014b6e:	f012 fbbb 	bl	80272e8 <mg_http_upload>
 8014b72:	e5f6      	b.n	8014762 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/mkdir"), NULL)){
 8014b74:	ae32      	add	r6, sp, #200	@ 0xc8
 8014b76:	491c      	ldr	r1, [pc, #112]	@ (8014be8 <dashboard+0x4c0>)
 8014b78:	4630      	mov	r0, r6
 8014b7a:	f00f ff01 	bl	8024980 <mg_str_s>
 8014b7e:	2300      	movs	r3, #0
 8014b80:	9300      	str	r3, [sp, #0]
 8014b82:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014b86:	68e1      	ldr	r1, [r4, #12]
 8014b88:	68a0      	ldr	r0, [r4, #8]
 8014b8a:	f010 f91b 	bl	8024dc4 <mg_match>
 8014b8e:	b120      	cbz	r0, 8014b9a <dashboard+0x472>
			 handle_fs_mkdir(c, hm);
 8014b90:	4621      	mov	r1, r4
 8014b92:	4628      	mov	r0, r5
 8014b94:	f7ff fc7a 	bl	801448c <handle_fs_mkdir>
 8014b98:	e5e3      	b.n	8014762 <dashboard+0x3a>
			struct mg_http_serve_opts opts = {
 8014b9a:	2300      	movs	r3, #0
 8014b9c:	9302      	str	r3, [sp, #8]
 8014b9e:	9303      	str	r3, [sp, #12]
 8014ba0:	9304      	str	r3, [sp, #16]
 8014ba2:	9305      	str	r3, [sp, #20]
 8014ba4:	9306      	str	r3, [sp, #24]
 8014ba6:	9307      	str	r3, [sp, #28]
 8014ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8014be0 <dashboard+0x4b8>)
 8014baa:	9302      	str	r3, [sp, #8]
 8014bac:	4b0d      	ldr	r3, [pc, #52]	@ (8014be4 <dashboard+0x4bc>)
 8014bae:	9307      	str	r3, [sp, #28]
			mg_http_serve_dir(c, ev_data, &opts);
 8014bb0:	aa02      	add	r2, sp, #8
 8014bb2:	4621      	mov	r1, r4
 8014bb4:	4628      	mov	r0, r5
 8014bb6:	f012 fab1 	bl	802711c <mg_http_serve_dir>
}
 8014bba:	e5d2      	b.n	8014762 <dashboard+0x3a>
 8014bbc:	08038288 	.word	0x08038288
 8014bc0:	080382a0 	.word	0x080382a0
 8014bc4:	080382b4 	.word	0x080382b4
 8014bc8:	080382d0 	.word	0x080382d0
 8014bcc:	080382e4 	.word	0x080382e4
 8014bd0:	08038304 	.word	0x08038304
 8014bd4:	08038320 	.word	0x08038320
 8014bd8:	0803833c 	.word	0x0803833c
 8014bdc:	0016e360 	.word	0x0016e360
 8014be0:	080365f4 	.word	0x080365f4
 8014be4:	200000a0 	.word	0x200000a0
 8014be8:	08038358 	.word	0x08038358

08014bec <dash_hdl>:

void * dash_hdl (void){
 8014bec:	b508      	push	{r3, lr}

	load_users(user_cred_file, web_users, user_list_size);
 8014bee:	220a      	movs	r2, #10
 8014bf0:	4902      	ldr	r1, [pc, #8]	@ (8014bfc <dash_hdl+0x10>)
 8014bf2:	4803      	ldr	r0, [pc, #12]	@ (8014c00 <dash_hdl+0x14>)
 8014bf4:	f7ff fbac 	bl	8014350 <load_users>

	return &dashboard;
}
 8014bf8:	4802      	ldr	r0, [pc, #8]	@ (8014c04 <dash_hdl+0x18>)
 8014bfa:	bd08      	pop	{r3, pc}
 8014bfc:	20002208 	.word	0x20002208
 8014c00:	08036648 	.word	0x08036648
 8014c04:	08014729 	.word	0x08014729

08014c08 <reg_parameter_handler>:

// Реализация функции, которая принимает указатель на функцию чтения и записи параметров
void reg_parameter_handler(void (*func)(void * parameter, sett_type_t parameter_type,  sett_direction_t direction)) {
    r_w_parameter = func;
 8014c08:	4b01      	ldr	r3, [pc, #4]	@ (8014c10 <reg_parameter_handler+0x8>)
 8014c0a:	6018      	str	r0, [r3, #0]
}
 8014c0c:	4770      	bx	lr
 8014c0e:	bf00      	nop
 8014c10:	200028a4 	.word	0x200028a4

08014c14 <_ZL18mqtt_timer_handlerPv>:
	}
}

// Таймер для установления и поддержания соединения.
static void mqtt_timer_handler(void *arg){
	if (!mqtt_conn){
 8014c14:	4b1a      	ldr	r3, [pc, #104]	@ (8014c80 <_ZL18mqtt_timer_handlerPv+0x6c>)
 8014c16:	681b      	ldr	r3, [r3, #0]
 8014c18:	b103      	cbz	r3, 8014c1c <_ZL18mqtt_timer_handlerPv+0x8>
 8014c1a:	4770      	bx	lr
static void mqtt_timer_handler(void *arg){
 8014c1c:	b530      	push	{r4, r5, lr}
 8014c1e:	b085      	sub	sp, #20
		logging(L_INFO, "Try to connect to MQTT server");
 8014c20:	4918      	ldr	r1, [pc, #96]	@ (8014c84 <_ZL18mqtt_timer_handlerPv+0x70>)
 8014c22:	2001      	movs	r0, #1
 8014c24:	f7fd fac0 	bl	80121a8 <logging>
		memset(&mqtt_opts, 0, sizeof(mqtt_opts));
 8014c28:	4c17      	ldr	r4, [pc, #92]	@ (8014c88 <_ZL18mqtt_timer_handlerPv+0x74>)
 8014c2a:	2240      	movs	r2, #64	@ 0x40
 8014c2c:	2100      	movs	r1, #0
 8014c2e:	4620      	mov	r0, r4
 8014c30:	f018 fa16 	bl	802d060 <memset>
		mqtt_opts.user 		    = mg_str(mqtt_username);
 8014c34:	ad02      	add	r5, sp, #8
 8014c36:	4b15      	ldr	r3, [pc, #84]	@ (8014c8c <_ZL18mqtt_timer_handlerPv+0x78>)
 8014c38:	6819      	ldr	r1, [r3, #0]
 8014c3a:	4628      	mov	r0, r5
 8014c3c:	f00f fea0 	bl	8024980 <mg_str_s>
 8014c40:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014c44:	e884 0003 	stmia.w	r4, {r0, r1}
		mqtt_opts.pass		    = mg_str(mqtt_password);
 8014c48:	4b11      	ldr	r3, [pc, #68]	@ (8014c90 <_ZL18mqtt_timer_handlerPv+0x7c>)
 8014c4a:	6819      	ldr	r1, [r3, #0]
 8014c4c:	4628      	mov	r0, r5
 8014c4e:	f00f fe97 	bl	8024980 <mg_str_s>
 8014c52:	f104 0308 	add.w	r3, r4, #8
 8014c56:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014c5a:	e883 0003 	stmia.w	r3, {r0, r1}
		mqtt_opts.keepalive 	= 60;
 8014c5e:	233c      	movs	r3, #60	@ 0x3c
 8014c60:	8563      	strh	r3, [r4, #42]	@ 0x2a
		mqtt_conn = mg_mqtt_connect(mgr, mqtt_broker_url, &mqtt_opts, mqtt_event_handler, NULL);
 8014c62:	2300      	movs	r3, #0
 8014c64:	9300      	str	r3, [sp, #0]
 8014c66:	4b0b      	ldr	r3, [pc, #44]	@ (8014c94 <_ZL18mqtt_timer_handlerPv+0x80>)
 8014c68:	4622      	mov	r2, r4
 8014c6a:	490b      	ldr	r1, [pc, #44]	@ (8014c98 <_ZL18mqtt_timer_handlerPv+0x84>)
 8014c6c:	6809      	ldr	r1, [r1, #0]
 8014c6e:	480b      	ldr	r0, [pc, #44]	@ (8014c9c <_ZL18mqtt_timer_handlerPv+0x88>)
 8014c70:	6800      	ldr	r0, [r0, #0]
 8014c72:	f014 fbf9 	bl	8029468 <mg_mqtt_connect>
 8014c76:	4b02      	ldr	r3, [pc, #8]	@ (8014c80 <_ZL18mqtt_timer_handlerPv+0x6c>)
 8014c78:	6018      	str	r0, [r3, #0]
		//is_registered = true;
		//SEND REG DATA
	    //mqtt_send_registration_data(mqtt_conn);
	}

}//void * param, sett_type_t param_type,  sett_direction_t direction
 8014c7a:	b005      	add	sp, #20
 8014c7c:	bd30      	pop	{r4, r5, pc}
 8014c7e:	bf00      	nop
 8014c80:	200028c8 	.word	0x200028c8
 8014c84:	08038374 	.word	0x08038374
 8014c88:	200028cc 	.word	0x200028cc
 8014c8c:	20002920 	.word	0x20002920
 8014c90:	2000291c 	.word	0x2000291c
 8014c94:	0801526d 	.word	0x0801526d
 8014c98:	20002924 	.word	0x20002924
 8014c9c:	20002910 	.word	0x20002910

08014ca0 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj>:
static void mqtt_send_registration_data(struct mg_connection * arg, const SensorInfo * sensors, const size_t sensor_count){
 8014ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ca4:	b085      	sub	sp, #20
 8014ca6:	4681      	mov	r9, r0
 8014ca8:	4688      	mov	r8, r1
 8014caa:	4692      	mov	sl, r2
	mg_snprintf(ip_addr_str, sizeof(char) * IP_v6_STR_LEN, "%M", mg_print_ip, &arg->loc);
 8014cac:	4c2a      	ldr	r4, [pc, #168]	@ (8014d58 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xb8>)
 8014cae:	f100 0308 	add.w	r3, r0, #8
 8014cb2:	9300      	str	r3, [sp, #0]
 8014cb4:	4b29      	ldr	r3, [pc, #164]	@ (8014d5c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xbc>)
 8014cb6:	4a2a      	ldr	r2, [pc, #168]	@ (8014d60 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xc0>)
 8014cb8:	2128      	movs	r1, #40	@ 0x28
 8014cba:	6820      	ldr	r0, [r4, #0]
 8014cbc:	f00e ffd8 	bl	8023c70 <mg_snprintf>
	set_device_conf_ip(ip_addr_str, strlen(ip_addr_str));
 8014cc0:	6824      	ldr	r4, [r4, #0]
 8014cc2:	4620      	mov	r0, r4
 8014cc4:	f7fb faec 	bl	80102a0 <strlen>
 8014cc8:	4601      	mov	r1, r0
 8014cca:	4620      	mov	r0, r4
 8014ccc:	f000 fc1e 	bl	801550c <set_device_conf_ip>
	for (size_t i = 0; i < sensor_count; i++) {
 8014cd0:	2600      	movs	r6, #0
 8014cd2:	e03b      	b.n	8014d4c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xac>
	        int sensor_type = sensors[i].sensor_type;
 8014cd4:	eb08 03c6 	add.w	r3, r8, r6, lsl #3
			get_config_topik_string(topik_buff, MQTT_TOPIK_MAX_LEN, sensor_type, sensor_number);
 8014cd8:	f818 4036 	ldrb.w	r4, [r8, r6, lsl #3]
 8014cdc:	791d      	ldrb	r5, [r3, #4]
 8014cde:	4f21      	ldr	r7, [pc, #132]	@ (8014d64 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xc4>)
 8014ce0:	462b      	mov	r3, r5
 8014ce2:	4622      	mov	r2, r4
 8014ce4:	2180      	movs	r1, #128	@ 0x80
 8014ce6:	6838      	ldr	r0, [r7, #0]
 8014ce8:	f000 fc2e 	bl	8015548 <get_config_topik_string>
			get_config_payload_string(payload_buff, MQTT_PAYLOAD_MAX_LEN, sensor_type, sensor_number);
 8014cec:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8014d70 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xd0>
 8014cf0:	462b      	mov	r3, r5
 8014cf2:	4622      	mov	r2, r4
 8014cf4:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8014cf8:	f8db 0000 	ldr.w	r0, [fp]
 8014cfc:	f000 fcd4 	bl	80156a8 <get_config_payload_string>
			mqtt_opts.topic = mg_str(topik_buff);
 8014d00:	4d19      	ldr	r5, [pc, #100]	@ (8014d68 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xc8>)
 8014d02:	ac02      	add	r4, sp, #8
 8014d04:	6839      	ldr	r1, [r7, #0]
 8014d06:	4620      	mov	r0, r4
 8014d08:	f00f fe3a 	bl	8024980 <mg_str_s>
 8014d0c:	f105 0318 	add.w	r3, r5, #24
 8014d10:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014d14:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload_buff);
 8014d18:	f8db 1000 	ldr.w	r1, [fp]
 8014d1c:	4620      	mov	r0, r4
 8014d1e:	f00f fe2f 	bl	8024980 <mg_str_s>
 8014d22:	f105 0320 	add.w	r3, r5, #32
 8014d26:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014d2a:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 1;
 8014d2e:	2401      	movs	r4, #1
 8014d30:	f885 4028 	strb.w	r4, [r5, #40]	@ 0x28
			mqtt_opts.retain = 1;
 8014d34:	f885 402e 	strb.w	r4, [r5, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8014d38:	4629      	mov	r1, r5
 8014d3a:	4648      	mov	r0, r9
 8014d3c:	f013 f8fa 	bl	8027f34 <mg_mqtt_pub>
			logging(L_INFO, "Sending registration data to: %s", topik_buff);
 8014d40:	683a      	ldr	r2, [r7, #0]
 8014d42:	490a      	ldr	r1, [pc, #40]	@ (8014d6c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xcc>)
 8014d44:	4620      	mov	r0, r4
 8014d46:	f7fd fa2f 	bl	80121a8 <logging>
	for (size_t i = 0; i < sensor_count; i++) {
 8014d4a:	4426      	add	r6, r4
 8014d4c:	4556      	cmp	r6, sl
 8014d4e:	d3c1      	bcc.n	8014cd4 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x34>
}
 8014d50:	b005      	add	sp, #20
 8014d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d56:	bf00      	nop
 8014d58:	200028c4 	.word	0x200028c4
 8014d5c:	08026701 	.word	0x08026701
 8014d60:	08037980 	.word	0x08037980
 8014d64:	20002918 	.word	0x20002918
 8014d68:	200028cc 	.word	0x200028cc
 8014d6c:	08038394 	.word	0x08038394
 8014d70:	20002914 	.word	0x20002914

08014d74 <_ZL9my_callocjj>:
static inline void *my_calloc(size_t cnt, size_t size) {
 8014d74:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8014d76:	fb01 f400 	mul.w	r4, r1, r0
 8014d7a:	4620      	mov	r0, r4
 8014d7c:	f006 f924 	bl	801afc8 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8014d80:	4605      	mov	r5, r0
 8014d82:	b118      	cbz	r0, 8014d8c <_ZL9my_callocjj+0x18>
 8014d84:	4622      	mov	r2, r4
 8014d86:	2100      	movs	r1, #0
 8014d88:	f018 f96a 	bl	802d060 <memset>
}
 8014d8c:	4628      	mov	r0, r5
 8014d8e:	bd38      	pop	{r3, r4, r5, pc}

08014d90 <_ZL19mqtt_send_io_statusP13mg_connectionb>:
static void mqtt_send_io_status(struct mg_connection * arg, bool force_update){
 8014d90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014d94:	b087      	sub	sp, #28
 8014d96:	4607      	mov	r7, r0
 8014d98:	460c      	mov	r4, r1
	r_w_parameter(status.inputs,  (sett_type_t)INPUT_SENSOR,  S_READ);
 8014d9a:	4d58      	ldr	r5, [pc, #352]	@ (8014efc <_ZL19mqtt_send_io_statusP13mg_connectionb+0x16c>)
 8014d9c:	682b      	ldr	r3, [r5, #0]
 8014d9e:	2200      	movs	r2, #0
 8014da0:	2101      	movs	r1, #1
 8014da2:	a804      	add	r0, sp, #16
 8014da4:	4798      	blx	r3
	r_w_parameter(status.outputs, (sett_type_t)OUTPUT_SENSOR, S_READ);
 8014da6:	682b      	ldr	r3, [r5, #0]
 8014da8:	2200      	movs	r2, #0
 8014daa:	2102      	movs	r1, #2
 8014dac:	f10d 0013 	add.w	r0, sp, #19
 8014db0:	4798      	blx	r3
	if (memcmp(status.inputs, prev_status.inputs, sizeof(inputs_state_t)) != 0 ||
 8014db2:	2203      	movs	r2, #3
 8014db4:	4952      	ldr	r1, [pc, #328]	@ (8014f00 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x170>)
 8014db6:	a804      	add	r0, sp, #16
 8014db8:	f018 f8be 	bl	802cf38 <memcmp>
 8014dbc:	b948      	cbnz	r0, 8014dd2 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x42>
	    memcmp(status.outputs, prev_status.outputs, sizeof(outputs_state_t)) != 0 || force_update) {
 8014dbe:	2203      	movs	r2, #3
 8014dc0:	4950      	ldr	r1, [pc, #320]	@ (8014f04 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x174>)
 8014dc2:	f10d 0013 	add.w	r0, sp, #19
 8014dc6:	f018 f8b7 	bl	802cf38 <memcmp>
	if (memcmp(status.inputs, prev_status.inputs, sizeof(inputs_state_t)) != 0 ||
 8014dca:	b910      	cbnz	r0, 8014dd2 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x42>
	    memcmp(status.outputs, prev_status.outputs, sizeof(outputs_state_t)) != 0 || force_update) {
 8014dcc:	2c00      	cmp	r4, #0
 8014dce:	f000 8091 	beq.w	8014ef4 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x164>
		memcpy(&prev_status, &status, sizeof(status));
 8014dd2:	4b4b      	ldr	r3, [pc, #300]	@ (8014f00 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x170>)
 8014dd4:	aa06      	add	r2, sp, #24
 8014dd6:	e912 0003 	ldmdb	r2, {r0, r1}
 8014dda:	6018      	str	r0, [r3, #0]
 8014ddc:	8099      	strh	r1, [r3, #4]
		payload = (char * )calloc(MQTT_PAYLOAD_MAX_LEN, sizeof(char));
 8014dde:	2101      	movs	r1, #1
 8014de0:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8014de4:	f7ff ffc6 	bl	8014d74 <_ZL9my_callocjj>
 8014de8:	4606      	mov	r6, r0
		topik   = (char * )calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 8014dea:	2101      	movs	r1, #1
 8014dec:	2080      	movs	r0, #128	@ 0x80
 8014dee:	f7ff ffc1 	bl	8014d74 <_ZL9my_callocjj>
 8014df2:	4605      	mov	r5, r0
		for (i = 0; i < INPUTS_COUNT; i++){
 8014df4:	2200      	movs	r2, #0
 8014df6:	e038      	b.n	8014e6a <_ZL19mqtt_send_io_statusP13mg_connectionb+0xda>
			gen_bin_sensor_status_payload_JSON(payload, MQTT_PAYLOAD_MAX_LEN, INPUT_SENSOR, i+1, status.inputs[i]);
 8014df8:	f102 0801 	add.w	r8, r2, #1
 8014dfc:	fa5f f888 	uxtb.w	r8, r8
 8014e00:	f102 0318 	add.w	r3, r2, #24
 8014e04:	eb0d 0203 	add.w	r2, sp, r3
 8014e08:	f812 3c08 	ldrb.w	r3, [r2, #-8]
 8014e0c:	9300      	str	r3, [sp, #0]
 8014e0e:	4643      	mov	r3, r8
 8014e10:	2201      	movs	r2, #1
 8014e12:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8014e16:	4630      	mov	r0, r6
 8014e18:	f000 fe3a 	bl	8015a90 <gen_bin_sensor_status_payload_JSON>
			generate_status_topik(topik,   MQTT_TOPIK_MAX_LEN, INPUT_SENSOR, i+1);
 8014e1c:	4643      	mov	r3, r8
 8014e1e:	2201      	movs	r2, #1
 8014e20:	2180      	movs	r1, #128	@ 0x80
 8014e22:	4628      	mov	r0, r5
 8014e24:	f000 fe74 	bl	8015b10 <generate_status_topik>
			mqtt_opts.topic = mg_str(topik);
 8014e28:	f8df 90dc 	ldr.w	r9, [pc, #220]	@ 8014f08 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x178>
 8014e2c:	ac02      	add	r4, sp, #8
 8014e2e:	4629      	mov	r1, r5
 8014e30:	4620      	mov	r0, r4
 8014e32:	f00f fda5 	bl	8024980 <mg_str_s>
 8014e36:	f109 0318 	add.w	r3, r9, #24
 8014e3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014e3e:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload);
 8014e42:	4631      	mov	r1, r6
 8014e44:	4620      	mov	r0, r4
 8014e46:	f00f fd9b 	bl	8024980 <mg_str_s>
 8014e4a:	f109 0320 	add.w	r3, r9, #32
 8014e4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014e52:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 0;
 8014e56:	2300      	movs	r3, #0
 8014e58:	f889 3028 	strb.w	r3, [r9, #40]	@ 0x28
			mqtt_opts.retain = 0;
 8014e5c:	f889 302e 	strb.w	r3, [r9, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8014e60:	4649      	mov	r1, r9
 8014e62:	4638      	mov	r0, r7
 8014e64:	f013 f866 	bl	8027f34 <mg_mqtt_pub>
		for (i = 0; i < INPUTS_COUNT; i++){
 8014e68:	4642      	mov	r2, r8
 8014e6a:	2a02      	cmp	r2, #2
 8014e6c:	d9c4      	bls.n	8014df8 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x68>
		for (i = 0; i < OUTPUTS_COUNT; i++){
 8014e6e:	2200      	movs	r2, #0
 8014e70:	e038      	b.n	8014ee4 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x154>
			gen_bin_sensor_status_payload_JSON(payload, MQTT_PAYLOAD_MAX_LEN, OUTPUT_SENSOR, i+1, status.outputs[i]);
 8014e72:	f102 0801 	add.w	r8, r2, #1
 8014e76:	fa5f f888 	uxtb.w	r8, r8
 8014e7a:	f102 0318 	add.w	r3, r2, #24
 8014e7e:	eb0d 0203 	add.w	r2, sp, r3
 8014e82:	f812 3c05 	ldrb.w	r3, [r2, #-5]
 8014e86:	9300      	str	r3, [sp, #0]
 8014e88:	4643      	mov	r3, r8
 8014e8a:	2202      	movs	r2, #2
 8014e8c:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8014e90:	4630      	mov	r0, r6
 8014e92:	f000 fdfd 	bl	8015a90 <gen_bin_sensor_status_payload_JSON>
			generate_status_topik(topik,   MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i+1);
 8014e96:	4643      	mov	r3, r8
 8014e98:	2202      	movs	r2, #2
 8014e9a:	2180      	movs	r1, #128	@ 0x80
 8014e9c:	4628      	mov	r0, r5
 8014e9e:	f000 fe37 	bl	8015b10 <generate_status_topik>
			mqtt_opts.topic = mg_str(topik);
 8014ea2:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 8014f08 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x178>
 8014ea6:	ac02      	add	r4, sp, #8
 8014ea8:	4629      	mov	r1, r5
 8014eaa:	4620      	mov	r0, r4
 8014eac:	f00f fd68 	bl	8024980 <mg_str_s>
 8014eb0:	f109 0318 	add.w	r3, r9, #24
 8014eb4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014eb8:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload);
 8014ebc:	4631      	mov	r1, r6
 8014ebe:	4620      	mov	r0, r4
 8014ec0:	f00f fd5e 	bl	8024980 <mg_str_s>
 8014ec4:	f109 0320 	add.w	r3, r9, #32
 8014ec8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014ecc:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 0;
 8014ed0:	2300      	movs	r3, #0
 8014ed2:	f889 3028 	strb.w	r3, [r9, #40]	@ 0x28
			mqtt_opts.retain = 0;
 8014ed6:	f889 302e 	strb.w	r3, [r9, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8014eda:	4649      	mov	r1, r9
 8014edc:	4638      	mov	r0, r7
 8014ede:	f013 f829 	bl	8027f34 <mg_mqtt_pub>
		for (i = 0; i < OUTPUTS_COUNT; i++){
 8014ee2:	4642      	mov	r2, r8
 8014ee4:	2a02      	cmp	r2, #2
 8014ee6:	d9c4      	bls.n	8014e72 <_ZL19mqtt_send_io_statusP13mg_connectionb+0xe2>
		free(payload);
 8014ee8:	4630      	mov	r0, r6
 8014eea:	f006 f8ef 	bl	801b0cc <vPortFree>
		free(topik);
 8014eee:	4628      	mov	r0, r5
 8014ef0:	f006 f8ec 	bl	801b0cc <vPortFree>
}
 8014ef4:	b007      	add	sp, #28
 8014ef6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014efa:	bf00      	nop
 8014efc:	200028b0 	.word	0x200028b0
 8014f00:	200028a8 	.word	0x200028a8
 8014f04:	200028ab 	.word	0x200028ab
 8014f08:	200028cc 	.word	0x200028cc

08014f0c <_ZL33mqtt_timer_handler_cher_io_statusPv>:

static void mqtt_timer_handler_cher_io_status(void *arg){
 8014f0c:	b508      	push	{r3, lr}
	if(mqtt_conn && is_registered){
 8014f0e:	4b05      	ldr	r3, [pc, #20]	@ (8014f24 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x18>)
 8014f10:	6818      	ldr	r0, [r3, #0]
 8014f12:	b110      	cbz	r0, 8014f1a <_ZL33mqtt_timer_handler_cher_io_statusPv+0xe>
 8014f14:	4b04      	ldr	r3, [pc, #16]	@ (8014f28 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x1c>)
 8014f16:	781b      	ldrb	r3, [r3, #0]
 8014f18:	b903      	cbnz	r3, 8014f1c <_ZL33mqtt_timer_handler_cher_io_statusPv+0x10>
		mqtt_send_io_status(mqtt_conn, 0);
	}
}
 8014f1a:	bd08      	pop	{r3, pc}
		mqtt_send_io_status(mqtt_conn, 0);
 8014f1c:	2100      	movs	r1, #0
 8014f1e:	f7ff ff37 	bl	8014d90 <_ZL19mqtt_send_io_statusP13mg_connectionb>
}
 8014f22:	e7fa      	b.n	8014f1a <_ZL33mqtt_timer_handler_cher_io_statusPv+0xe>
 8014f24:	200028c8 	.word	0x200028c8
 8014f28:	200028b4 	.word	0x200028b4

08014f2c <_ZL39mqtt_pereodic_status_send_timer_handlerPv>:
static void mqtt_pereodic_status_send_timer_handler(void *arg){
 8014f2c:	b508      	push	{r3, lr}
	if(is_registered){
 8014f2e:	4b05      	ldr	r3, [pc, #20]	@ (8014f44 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x18>)
 8014f30:	781b      	ldrb	r3, [r3, #0]
 8014f32:	b903      	cbnz	r3, 8014f36 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0xa>
}
 8014f34:	bd08      	pop	{r3, pc}
		mqtt_send_io_status(mqtt_conn, 1);
 8014f36:	2101      	movs	r1, #1
 8014f38:	4b03      	ldr	r3, [pc, #12]	@ (8014f48 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x1c>)
 8014f3a:	6818      	ldr	r0, [r3, #0]
 8014f3c:	f7ff ff28 	bl	8014d90 <_ZL19mqtt_send_io_statusP13mg_connectionb>
}
 8014f40:	e7f8      	b.n	8014f34 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x8>
 8014f42:	bf00      	nop
 8014f44:	200028b4 	.word	0x200028b4
 8014f48:	200028c8 	.word	0x200028c8

08014f4c <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj>:
static void mqtt_subscrabe_on_sw(struct mg_connection *conn, const SensorInfo * sensors, const size_t sensor_count){
 8014f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f50:	b083      	sub	sp, #12
 8014f52:	4681      	mov	r9, r0
 8014f54:	460d      	mov	r5, r1
 8014f56:	4616      	mov	r6, r2
	for (size_t i = 0; i < sensor_count; i++) {
 8014f58:	2400      	movs	r4, #0
 8014f5a:	e000      	b.n	8014f5e <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x12>
 8014f5c:	3401      	adds	r4, #1
 8014f5e:	42b4      	cmp	r4, r6
 8014f60:	d22e      	bcs.n	8014fc0 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x74>
		if(sensors[i].sensor_type == OUTPUT_SENSOR){
 8014f62:	eb05 08c4 	add.w	r8, r5, r4, lsl #3
 8014f66:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 8014f6a:	2b02      	cmp	r3, #2
 8014f6c:	d1f6      	bne.n	8014f5c <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x10>
			topik = (char * )calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 8014f6e:	2101      	movs	r1, #1
 8014f70:	2080      	movs	r0, #128	@ 0x80
 8014f72:	f7ff feff 	bl	8014d74 <_ZL9my_callocjj>
 8014f76:	4607      	mov	r7, r0
			generate_comand_topik_for_subscrabe(topik, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, sensors[i].sensor_number);
 8014f78:	f898 3004 	ldrb.w	r3, [r8, #4]
 8014f7c:	2202      	movs	r2, #2
 8014f7e:	2180      	movs	r1, #128	@ 0x80
 8014f80:	f000 fdae 	bl	8015ae0 <generate_comand_topik_for_subscrabe>
			mqtt_opts.qos = 1;
 8014f84:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 8014fcc <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x80>
 8014f88:	f04f 0b01 	mov.w	fp, #1
 8014f8c:	f888 b028 	strb.w	fp, [r8, #40]	@ 0x28
			mqtt_opts.topic = mg_str(topik);
 8014f90:	46ea      	mov	sl, sp
 8014f92:	4639      	mov	r1, r7
 8014f94:	4650      	mov	r0, sl
 8014f96:	f00f fcf3 	bl	8024980 <mg_str_s>
 8014f9a:	f108 0318 	add.w	r3, r8, #24
 8014f9e:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8014fa2:	e883 0003 	stmia.w	r3, {r0, r1}
			mg_mqtt_sub(conn, &mqtt_opts);
 8014fa6:	4641      	mov	r1, r8
 8014fa8:	4648      	mov	r0, r9
 8014faa:	f012 ff75 	bl	8027e98 <mg_mqtt_sub>
			logging(L_INFO, "Subscribe on MQTT topik: %s", topik);
 8014fae:	463a      	mov	r2, r7
 8014fb0:	4905      	ldr	r1, [pc, #20]	@ (8014fc8 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x7c>)
 8014fb2:	4658      	mov	r0, fp
 8014fb4:	f7fd f8f8 	bl	80121a8 <logging>
			free(topik);
 8014fb8:	4638      	mov	r0, r7
 8014fba:	f006 f887 	bl	801b0cc <vPortFree>
 8014fbe:	e7cd      	b.n	8014f5c <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x10>
}
 8014fc0:	b003      	add	sp, #12
 8014fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fc6:	bf00      	nop
 8014fc8:	080383b8 	.word	0x080383b8
 8014fcc:	200028cc 	.word	0x200028cc

08014fd0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message>:
static void mqtt_subscrabe_recv_cmd_parce(mg_mqtt_message * mess){
 8014fd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014fd4:	b087      	sub	sp, #28
	int relay_number = 0;  // Переменная для хранения номера реле
 8014fd6:	2300      	movs	r3, #0
 8014fd8:	9303      	str	r3, [sp, #12]
    const char *topic = mess->topic.buf;
 8014fda:	6807      	ldr	r7, [r0, #0]
    const size_t topic_len = mess->topic.len;
 8014fdc:	6845      	ldr	r5, [r0, #4]
    const char *message = mess->data.buf;
 8014fde:	6884      	ldr	r4, [r0, #8]
    const size_t message_len = mess->data.len;
 8014fe0:	68c6      	ldr	r6, [r0, #12]
    if(message == NULL || topic == NULL){
 8014fe2:	b1ac      	cbz	r4, 8015010 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x40>
 8014fe4:	b1a7      	cbz	r7, 8015010 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x40>
    if (topic_len < 1 || message_len < 1){
 8014fe6:	b105      	cbz	r5, 8014fea <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1a>
 8014fe8:	bb0e      	cbnz	r6, 801502e <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x5e>
    	logging(L_ERR, "Subscrabed topik len or message len < 1");
 8014fea:	498c      	ldr	r1, [pc, #560]	@ (801521c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x24c>)
 8014fec:	2003      	movs	r0, #3
 8014fee:	f7fd f8db 	bl	80121a8 <logging>
    	MG_ERROR(("Subscrabed topik len or message len < 1 \n"));
 8014ff2:	4b8b      	ldr	r3, [pc, #556]	@ (8015220 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 8014ff4:	681b      	ldr	r3, [r3, #0]
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	f340 8101 	ble.w	80151fe <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x22e>
 8014ffc:	4b89      	ldr	r3, [pc, #548]	@ (8015224 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 8014ffe:	229a      	movs	r2, #154	@ 0x9a
 8015000:	4989      	ldr	r1, [pc, #548]	@ (8015228 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 8015002:	2001      	movs	r0, #1
 8015004:	f011 fc30 	bl	8026868 <mg_log_prefix>
 8015008:	4888      	ldr	r0, [pc, #544]	@ (801522c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x25c>)
 801500a:	f00f fadb 	bl	80245c4 <mg_log>
    	return;
 801500e:	e0f6      	b.n	80151fe <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x22e>
    	MG_ERROR(("Error: topik or message id NULL.\n"));
 8015010:	4b83      	ldr	r3, [pc, #524]	@ (8015220 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 8015012:	681b      	ldr	r3, [r3, #0]
 8015014:	2b00      	cmp	r3, #0
 8015016:	f340 80f2 	ble.w	80151fe <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x22e>
 801501a:	4b82      	ldr	r3, [pc, #520]	@ (8015224 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 801501c:	2294      	movs	r2, #148	@ 0x94
 801501e:	4982      	ldr	r1, [pc, #520]	@ (8015228 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 8015020:	2001      	movs	r0, #1
 8015022:	f011 fc21 	bl	8026868 <mg_log_prefix>
 8015026:	4882      	ldr	r0, [pc, #520]	@ (8015230 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x260>)
 8015028:	f00f facc 	bl	80245c4 <mg_log>
    	return;
 801502c:	e0e7      	b.n	80151fe <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x22e>
    char * local_message = (char *)calloc (message_len + 1, sizeof (char));
 801502e:	2101      	movs	r1, #1
 8015030:	1870      	adds	r0, r6, r1
 8015032:	f7ff fe9f 	bl	8014d74 <_ZL9my_callocjj>
 8015036:	4681      	mov	r9, r0
    char * local_topic = (char *)calloc (topic_len + 1, sizeof(char));
 8015038:	2101      	movs	r1, #1
 801503a:	1868      	adds	r0, r5, r1
 801503c:	f7ff fe9a 	bl	8014d74 <_ZL9my_callocjj>
 8015040:	4680      	mov	r8, r0
    strncpy(local_message, message, message_len);
 8015042:	4632      	mov	r2, r6
 8015044:	4621      	mov	r1, r4
 8015046:	4648      	mov	r0, r9
 8015048:	f018 f851 	bl	802d0ee <strncpy>
    strncpy(local_topic, topic, topic_len);
 801504c:	462a      	mov	r2, r5
 801504e:	4639      	mov	r1, r7
 8015050:	4640      	mov	r0, r8
 8015052:	f018 f84c 	bl	802d0ee <strncpy>
    r_w_parameter(sw_r, (sett_type_t)OUTPUT_SENSOR, S_READ);
 8015056:	4b77      	ldr	r3, [pc, #476]	@ (8015234 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x264>)
 8015058:	681b      	ldr	r3, [r3, #0]
 801505a:	2200      	movs	r2, #0
 801505c:	2102      	movs	r1, #2
 801505e:	a805      	add	r0, sp, #20
 8015060:	4798      	blx	r3
    memcpy(sw_w, sw_r, sizeof(sw_r));
 8015062:	9b05      	ldr	r3, [sp, #20]
 8015064:	f8ad 3010 	strh.w	r3, [sp, #16]
 8015068:	0c1b      	lsrs	r3, r3, #16
 801506a:	f88d 3012 	strb.w	r3, [sp, #18]
    const char *switch_position = strstr(local_topic, "switch");
 801506e:	4972      	ldr	r1, [pc, #456]	@ (8015238 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x268>)
 8015070:	4640      	mov	r0, r8
 8015072:	f018 f875 	bl	802d160 <strstr>
    if (switch_position != NULL) {
 8015076:	2800      	cmp	r0, #0
 8015078:	f000 80b2 	beq.w	80151e0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x210>
    	if (sscanf(switch_position, "switch%d", &relay_number) == 1){
 801507c:	aa03      	add	r2, sp, #12
 801507e:	496f      	ldr	r1, [pc, #444]	@ (801523c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x26c>)
 8015080:	f017 fc4c 	bl	802c91c <sscanf>
 8015084:	2801      	cmp	r0, #1
 8015086:	d009      	beq.n	801509c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xcc>
    		MG_ERROR(("Error: relay number is not found, or incorrect format.\n"));
 8015088:	4b65      	ldr	r3, [pc, #404]	@ (8015220 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	2b00      	cmp	r3, #0
 801508e:	f300 809d 	bgt.w	80151cc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1fc>
			logging(L_ERR, "Error: relay number is not found, or incorrect format.");
 8015092:	496b      	ldr	r1, [pc, #428]	@ (8015240 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x270>)
 8015094:	2003      	movs	r0, #3
 8015096:	f7fd f887 	bl	80121a8 <logging>
 801509a:	e0aa      	b.n	80151f2 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x222>
    		MG_INFO(("Getting relay number %d, from topik %s.\n", relay_number, local_topic));
 801509c:	4b60      	ldr	r3, [pc, #384]	@ (8015220 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	2b01      	cmp	r3, #1
 80150a2:	dc19      	bgt.n	80150d8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x108>
    		logging(L_INFO, "Recv control message in topik %s, relay number %d, action %s", local_topic, relay_number, local_message);
 80150a4:	f8cd 9000 	str.w	r9, [sp]
 80150a8:	9b03      	ldr	r3, [sp, #12]
 80150aa:	4642      	mov	r2, r8
 80150ac:	4965      	ldr	r1, [pc, #404]	@ (8015244 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x274>)
 80150ae:	2001      	movs	r0, #1
 80150b0:	f7fd f87a 	bl	80121a8 <logging>
    		if(relay_number < 1 || relay_number > OUTPUTS_COUNT){
 80150b4:	9c03      	ldr	r4, [sp, #12]
 80150b6:	1e63      	subs	r3, r4, #1
 80150b8:	2b02      	cmp	r3, #2
 80150ba:	d819      	bhi.n	80150f0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x120>
			if (message_len == 2 && strncmp(local_message, "ON", 2) == 0) {
 80150bc:	2e02      	cmp	r6, #2
 80150be:	d034      	beq.n	801512a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x15a>
			} else if (message_len == 3 && strncmp(local_message, "OFF", 3) == 0) {
 80150c0:	2e03      	cmp	r6, #3
 80150c2:	d055      	beq.n	8015170 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1a0>
				MG_ERROR(("Error: expected message \"ON\" or \"OFF\" but got message: %s \n", local_message));
 80150c4:	4b56      	ldr	r3, [pc, #344]	@ (8015220 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	dc74      	bgt.n	80151b6 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e6>
				logging(L_ERR, "Error: expected message \"ON\" or \"OFF\" but got message: %s \n", local_message);
 80150cc:	464a      	mov	r2, r9
 80150ce:	495e      	ldr	r1, [pc, #376]	@ (8015248 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x278>)
 80150d0:	2003      	movs	r0, #3
 80150d2:	f7fd f869 	bl	80121a8 <logging>
 80150d6:	e08c      	b.n	80151f2 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x222>
    		MG_INFO(("Getting relay number %d, from topik %s.\n", relay_number, local_topic));
 80150d8:	4b52      	ldr	r3, [pc, #328]	@ (8015224 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 80150da:	22ad      	movs	r2, #173	@ 0xad
 80150dc:	4952      	ldr	r1, [pc, #328]	@ (8015228 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 80150de:	2002      	movs	r0, #2
 80150e0:	f011 fbc2 	bl	8026868 <mg_log_prefix>
 80150e4:	4642      	mov	r2, r8
 80150e6:	9903      	ldr	r1, [sp, #12]
 80150e8:	4858      	ldr	r0, [pc, #352]	@ (801524c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x27c>)
 80150ea:	f00f fa6b 	bl	80245c4 <mg_log>
 80150ee:	e7d9      	b.n	80150a4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xd4>
    			MG_ERROR(("Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number));
 80150f0:	4b4b      	ldr	r3, [pc, #300]	@ (8015220 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	dc0c      	bgt.n	8015112 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x142>
    			logging(L_ERR, "Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number);
 80150f8:	9b03      	ldr	r3, [sp, #12]
 80150fa:	2203      	movs	r2, #3
 80150fc:	4954      	ldr	r1, [pc, #336]	@ (8015250 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x280>)
 80150fe:	4610      	mov	r0, r2
 8015100:	f7fd f852 	bl	80121a8 <logging>
    		    free(local_message);
 8015104:	4648      	mov	r0, r9
 8015106:	f005 ffe1 	bl	801b0cc <vPortFree>
    		    free(local_topic);
 801510a:	4640      	mov	r0, r8
 801510c:	f005 ffde 	bl	801b0cc <vPortFree>
    			return;
 8015110:	e075      	b.n	80151fe <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x22e>
    			MG_ERROR(("Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number));
 8015112:	4b44      	ldr	r3, [pc, #272]	@ (8015224 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 8015114:	22b2      	movs	r2, #178	@ 0xb2
 8015116:	4944      	ldr	r1, [pc, #272]	@ (8015228 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 8015118:	2001      	movs	r0, #1
 801511a:	f011 fba5 	bl	8026868 <mg_log_prefix>
 801511e:	9a03      	ldr	r2, [sp, #12]
 8015120:	2103      	movs	r1, #3
 8015122:	484b      	ldr	r0, [pc, #300]	@ (8015250 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x280>)
 8015124:	f00f fa4e 	bl	80245c4 <mg_log>
 8015128:	e7e6      	b.n	80150f8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x128>
			if (message_len == 2 && strncmp(local_message, "ON", 2) == 0) {
 801512a:	2202      	movs	r2, #2
 801512c:	4949      	ldr	r1, [pc, #292]	@ (8015254 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x284>)
 801512e:	4648      	mov	r0, r9
 8015130:	f017 ffcb 	bl	802d0ca <strncmp>
 8015134:	2800      	cmp	r0, #0
 8015136:	d1c3      	bne.n	80150c0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xf0>
				sw_w[relay_number-1] = 1;
 8015138:	f104 0317 	add.w	r3, r4, #23
 801513c:	446b      	add	r3, sp
 801513e:	2201      	movs	r2, #1
 8015140:	f803 2c08 	strb.w	r2, [r3, #-8]
				MG_INFO(("Relay %d is ON.\n", relay_number));
 8015144:	4b36      	ldr	r3, [pc, #216]	@ (8015220 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 8015146:	681b      	ldr	r3, [r3, #0]
 8015148:	4293      	cmp	r3, r2
 801514a:	dc06      	bgt.n	801515a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x18a>
				r_w_parameter(sw_w, (sett_type_t)OUTPUT_SENSOR, S_WRITE);
 801514c:	4b39      	ldr	r3, [pc, #228]	@ (8015234 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x264>)
 801514e:	681b      	ldr	r3, [r3, #0]
 8015150:	2201      	movs	r2, #1
 8015152:	2102      	movs	r1, #2
 8015154:	a804      	add	r0, sp, #16
 8015156:	4798      	blx	r3
 8015158:	e04b      	b.n	80151f2 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x222>
				MG_INFO(("Relay %d is ON.\n", relay_number));
 801515a:	4b32      	ldr	r3, [pc, #200]	@ (8015224 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 801515c:	22bf      	movs	r2, #191	@ 0xbf
 801515e:	4932      	ldr	r1, [pc, #200]	@ (8015228 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 8015160:	2002      	movs	r0, #2
 8015162:	f011 fb81 	bl	8026868 <mg_log_prefix>
 8015166:	9903      	ldr	r1, [sp, #12]
 8015168:	483b      	ldr	r0, [pc, #236]	@ (8015258 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x288>)
 801516a:	f00f fa2b 	bl	80245c4 <mg_log>
 801516e:	e7ed      	b.n	801514c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x17c>
			} else if (message_len == 3 && strncmp(local_message, "OFF", 3) == 0) {
 8015170:	2203      	movs	r2, #3
 8015172:	493a      	ldr	r1, [pc, #232]	@ (801525c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x28c>)
 8015174:	4648      	mov	r0, r9
 8015176:	f017 ffa8 	bl	802d0ca <strncmp>
 801517a:	2800      	cmp	r0, #0
 801517c:	d1a2      	bne.n	80150c4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xf4>
				sw_w[relay_number-1] = 0;
 801517e:	f104 0317 	add.w	r3, r4, #23
 8015182:	446b      	add	r3, sp
 8015184:	2200      	movs	r2, #0
 8015186:	f803 2c08 	strb.w	r2, [r3, #-8]
				MG_INFO(("Relay %d is OFF.\n", relay_number));
 801518a:	4b25      	ldr	r3, [pc, #148]	@ (8015220 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 801518c:	681b      	ldr	r3, [r3, #0]
 801518e:	2b01      	cmp	r3, #1
 8015190:	dc06      	bgt.n	80151a0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1d0>
				r_w_parameter(sw_w, (sett_type_t)OUTPUT_SENSOR, S_WRITE);
 8015192:	4b28      	ldr	r3, [pc, #160]	@ (8015234 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x264>)
 8015194:	681b      	ldr	r3, [r3, #0]
 8015196:	2201      	movs	r2, #1
 8015198:	2102      	movs	r1, #2
 801519a:	a804      	add	r0, sp, #16
 801519c:	4798      	blx	r3
 801519e:	e028      	b.n	80151f2 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x222>
				MG_INFO(("Relay %d is OFF.\n", relay_number));
 80151a0:	4b20      	ldr	r3, [pc, #128]	@ (8015224 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 80151a2:	22c3      	movs	r2, #195	@ 0xc3
 80151a4:	4920      	ldr	r1, [pc, #128]	@ (8015228 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 80151a6:	2002      	movs	r0, #2
 80151a8:	f011 fb5e 	bl	8026868 <mg_log_prefix>
 80151ac:	9903      	ldr	r1, [sp, #12]
 80151ae:	482c      	ldr	r0, [pc, #176]	@ (8015260 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x290>)
 80151b0:	f00f fa08 	bl	80245c4 <mg_log>
 80151b4:	e7ed      	b.n	8015192 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1c2>
				MG_ERROR(("Error: expected message \"ON\" or \"OFF\" but got message: %s \n", local_message));
 80151b6:	4b1b      	ldr	r3, [pc, #108]	@ (8015224 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 80151b8:	22c7      	movs	r2, #199	@ 0xc7
 80151ba:	491b      	ldr	r1, [pc, #108]	@ (8015228 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 80151bc:	2001      	movs	r0, #1
 80151be:	f011 fb53 	bl	8026868 <mg_log_prefix>
 80151c2:	4649      	mov	r1, r9
 80151c4:	4820      	ldr	r0, [pc, #128]	@ (8015248 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x278>)
 80151c6:	f00f f9fd 	bl	80245c4 <mg_log>
 80151ca:	e77f      	b.n	80150cc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xfc>
    		MG_ERROR(("Error: relay number is not found, or incorrect format.\n"));
 80151cc:	4b15      	ldr	r3, [pc, #84]	@ (8015224 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 80151ce:	22cc      	movs	r2, #204	@ 0xcc
 80151d0:	4915      	ldr	r1, [pc, #84]	@ (8015228 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 80151d2:	2001      	movs	r0, #1
 80151d4:	f011 fb48 	bl	8026868 <mg_log_prefix>
 80151d8:	4822      	ldr	r0, [pc, #136]	@ (8015264 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x294>)
 80151da:	f00f f9f3 	bl	80245c4 <mg_log>
 80151de:	e758      	b.n	8015092 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xc2>
    	MG_ERROR(("Substring \"switch\" is not fount in topik %s. \n", local_topic));
 80151e0:	4b0f      	ldr	r3, [pc, #60]	@ (8015220 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	dc0d      	bgt.n	8015204 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x234>
    	logging(L_ERR, "Substring \"switch\" is not fount in topik %s. \n", local_topic);
 80151e8:	4642      	mov	r2, r8
 80151ea:	491f      	ldr	r1, [pc, #124]	@ (8015268 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x298>)
 80151ec:	2003      	movs	r0, #3
 80151ee:	f7fc ffdb 	bl	80121a8 <logging>
    free(local_message);
 80151f2:	4648      	mov	r0, r9
 80151f4:	f005 ff6a 	bl	801b0cc <vPortFree>
    free(local_topic);
 80151f8:	4640      	mov	r0, r8
 80151fa:	f005 ff67 	bl	801b0cc <vPortFree>
}
 80151fe:	b007      	add	sp, #28
 8015200:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    	MG_ERROR(("Substring \"switch\" is not fount in topik %s. \n", local_topic));
 8015204:	4b07      	ldr	r3, [pc, #28]	@ (8015224 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 8015206:	22d0      	movs	r2, #208	@ 0xd0
 8015208:	4907      	ldr	r1, [pc, #28]	@ (8015228 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 801520a:	2001      	movs	r0, #1
 801520c:	f011 fb2c 	bl	8026868 <mg_log_prefix>
 8015210:	4641      	mov	r1, r8
 8015212:	4815      	ldr	r0, [pc, #84]	@ (8015268 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x298>)
 8015214:	f00f f9d6 	bl	80245c4 <mg_log>
 8015218:	e7e6      	b.n	80151e8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x218>
 801521a:	bf00      	nop
 801521c:	08038444 	.word	0x08038444
 8015220:	2000012c 	.word	0x2000012c
 8015224:	080383d4 	.word	0x080383d4
 8015228:	080383f4 	.word	0x080383f4
 801522c:	0803846c 	.word	0x0803846c
 8015230:	08038420 	.word	0x08038420
 8015234:	200028b0 	.word	0x200028b0
 8015238:	08038498 	.word	0x08038498
 801523c:	080384a0 	.word	0x080384a0
 8015240:	0803860c 	.word	0x0803860c
 8015244:	080384d8 	.word	0x080384d8
 8015248:	08038598 	.word	0x08038598
 801524c:	080384ac 	.word	0x080384ac
 8015250:	08038518 	.word	0x08038518
 8015254:	08038568 	.word	0x08038568
 8015258:	0803856c 	.word	0x0803856c
 801525c:	08038580 	.word	0x08038580
 8015260:	08038584 	.word	0x08038584
 8015264:	080385d4 	.word	0x080385d4
 8015268:	08038644 	.word	0x08038644

0801526c <_ZL18mqtt_event_handlerP13mg_connectioniPv>:
static void mqtt_event_handler(struct mg_connection *conn, int ev, void *ev_data){
 801526c:	b570      	push	{r4, r5, r6, lr}
	if (ev == MG_EV_MQTT_OPEN) {// MQTT connect is successful
 801526e:	2910      	cmp	r1, #16
 8015270:	d031      	beq.n	80152d6 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x6a>
 8015272:	4605      	mov	r5, r0
 8015274:	2911      	cmp	r1, #17
 8015276:	d002      	beq.n	801527e <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x12>
 8015278:	2909      	cmp	r1, #9
 801527a:	d03a      	beq.n	80152f2 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x86>
}
 801527c:	bd70      	pop	{r4, r5, r6, pc}
		MG_DEBUG(("MQTT_open_connection"));
 801527e:	4b22      	ldr	r3, [pc, #136]	@ (8015308 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x9c>)
 8015280:	681b      	ldr	r3, [r3, #0]
 8015282:	2b02      	cmp	r3, #2
 8015284:	dc1d      	bgt.n	80152c2 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x56>
		logging(L_INFO, "MQTT Open connection");
 8015286:	4921      	ldr	r1, [pc, #132]	@ (801530c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa0>)
 8015288:	2001      	movs	r0, #1
 801528a:	f7fc ff8d 	bl	80121a8 <logging>
		mqtt_conn = conn;
 801528e:	4b20      	ldr	r3, [pc, #128]	@ (8015310 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 8015290:	601d      	str	r5, [r3, #0]
		if(!is_registered){
 8015292:	4b20      	ldr	r3, [pc, #128]	@ (8015314 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa8>)
 8015294:	781b      	ldrb	r3, [r3, #0]
 8015296:	2b00      	cmp	r3, #0
 8015298:	d1f0      	bne.n	801527c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
			mqtt_send_registration_data(mqtt_conn, sensors, sizeof(sensors)/sizeof(SensorInfo));
 801529a:	4e1f      	ldr	r6, [pc, #124]	@ (8015318 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xac>)
 801529c:	2206      	movs	r2, #6
 801529e:	4631      	mov	r1, r6
 80152a0:	4628      	mov	r0, r5
 80152a2:	f7ff fcfd 	bl	8014ca0 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj>
			mqtt_send_io_status(mqtt_conn, 1);
 80152a6:	4c1a      	ldr	r4, [pc, #104]	@ (8015310 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 80152a8:	2101      	movs	r1, #1
 80152aa:	6820      	ldr	r0, [r4, #0]
 80152ac:	f7ff fd70 	bl	8014d90 <_ZL19mqtt_send_io_statusP13mg_connectionb>
			mqtt_subscrabe_on_sw(mqtt_conn, sensors, sizeof(sensors)/sizeof(SensorInfo));
 80152b0:	2206      	movs	r2, #6
 80152b2:	4631      	mov	r1, r6
 80152b4:	6820      	ldr	r0, [r4, #0]
 80152b6:	f7ff fe49 	bl	8014f4c <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj>
			is_registered = true;
 80152ba:	4b16      	ldr	r3, [pc, #88]	@ (8015314 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa8>)
 80152bc:	2201      	movs	r2, #1
 80152be:	701a      	strb	r2, [r3, #0]
 80152c0:	e7dc      	b.n	801527c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
		MG_DEBUG(("MQTT_open_connection"));
 80152c2:	4b16      	ldr	r3, [pc, #88]	@ (801531c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xb0>)
 80152c4:	22e1      	movs	r2, #225	@ 0xe1
 80152c6:	4916      	ldr	r1, [pc, #88]	@ (8015320 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xb4>)
 80152c8:	2003      	movs	r0, #3
 80152ca:	f011 facd 	bl	8026868 <mg_log_prefix>
 80152ce:	4815      	ldr	r0, [pc, #84]	@ (8015324 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xb8>)
 80152d0:	f00f f978 	bl	80245c4 <mg_log>
 80152d4:	e7d7      	b.n	8015286 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x1a>
 80152d6:	4614      	mov	r4, r2
		logging(L_INFO, "Receive message from MQTT server");
 80152d8:	4913      	ldr	r1, [pc, #76]	@ (8015328 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xbc>)
 80152da:	2001      	movs	r0, #1
 80152dc:	f7fc ff64 	bl	80121a8 <logging>
		 mqtt_subscrabe_recv_cmd_parce(mm);
 80152e0:	4620      	mov	r0, r4
 80152e2:	f7ff fe75 	bl	8014fd0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message>
		 mqtt_send_io_status(mqtt_conn, 0);
 80152e6:	2100      	movs	r1, #0
 80152e8:	4b09      	ldr	r3, [pc, #36]	@ (8015310 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 80152ea:	6818      	ldr	r0, [r3, #0]
 80152ec:	f7ff fd50 	bl	8014d90 <_ZL19mqtt_send_io_statusP13mg_connectionb>
 80152f0:	e7c4      	b.n	801527c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
		logging(L_INFO, "MQTT Close connection");
 80152f2:	490e      	ldr	r1, [pc, #56]	@ (801532c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xc0>)
 80152f4:	2001      	movs	r0, #1
 80152f6:	f7fc ff57 	bl	80121a8 <logging>
		mqtt_conn     = NULL;
 80152fa:	2300      	movs	r3, #0
 80152fc:	4a04      	ldr	r2, [pc, #16]	@ (8015310 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 80152fe:	6013      	str	r3, [r2, #0]
		is_registered = false;
 8015300:	4a04      	ldr	r2, [pc, #16]	@ (8015314 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa8>)
 8015302:	7013      	strb	r3, [r2, #0]
}
 8015304:	e7ba      	b.n	801527c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
 8015306:	bf00      	nop
 8015308:	2000012c 	.word	0x2000012c
 801530c:	080386a0 	.word	0x080386a0
 8015310:	200028c8 	.word	0x200028c8
 8015314:	200028b4 	.word	0x200028b4
 8015318:	200000c8 	.word	0x200000c8
 801531c:	08038674 	.word	0x08038674
 8015320:	080383f4 	.word	0x080383f4
 8015324:	08038688 	.word	0x08038688
 8015328:	080386b8 	.word	0x080386b8
 801532c:	080386dc 	.word	0x080386dc

08015330 <get_mqtt_connection>:

// Getter для mqtt_conn
struct mg_connection* get_mqtt_connection(void){
    return mqtt_conn;
}
 8015330:	4b01      	ldr	r3, [pc, #4]	@ (8015338 <get_mqtt_connection+0x8>)
 8015332:	6818      	ldr	r0, [r3, #0]
 8015334:	4770      	bx	lr
 8015336:	bf00      	nop
 8015338:	200028c8 	.word	0x200028c8

0801533c <mqtt_init>:


void mqtt_init(void *mgr_parameter, void * mif_parameter, void * broker_url, void *username, void *password, void (*fn)(void*, sett_type_t, sett_direction_t)){
 801533c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015340:	b086      	sub	sp, #24
 8015342:	4606      	mov	r6, r0
 8015344:	460c      	mov	r4, r1
 8015346:	4691      	mov	r9, r2
 8015348:	461d      	mov	r5, r3

	mqtt_broker_url = (char *) calloc(MAX_MQTT_URL_LEN,     sizeof(char));
 801534a:	2101      	movs	r1, #1
 801534c:	2080      	movs	r0, #128	@ 0x80
 801534e:	f7ff fd11 	bl	8014d74 <_ZL9my_callocjj>
 8015352:	f8df a148 	ldr.w	sl, [pc, #328]	@ 801549c <mqtt_init+0x160>
 8015356:	f8ca 0000 	str.w	r0, [sl]
	mqtt_username   = (char *) calloc(MAX_MQTT_LOGIN_LEN,   sizeof(char));
 801535a:	2101      	movs	r1, #1
 801535c:	2021      	movs	r0, #33	@ 0x21
 801535e:	f7ff fd09 	bl	8014d74 <_ZL9my_callocjj>
 8015362:	f8df 813c 	ldr.w	r8, [pc, #316]	@ 80154a0 <mqtt_init+0x164>
 8015366:	f8c8 0000 	str.w	r0, [r8]
	mqtt_password   = (char *) calloc(MAX_MQTT_PASS_LEN,    sizeof(char));
 801536a:	2101      	movs	r1, #1
 801536c:	2021      	movs	r0, #33	@ 0x21
 801536e:	f7ff fd01 	bl	8014d74 <_ZL9my_callocjj>
 8015372:	4f3b      	ldr	r7, [pc, #236]	@ (8015460 <mqtt_init+0x124>)
 8015374:	6038      	str	r0, [r7, #0]
	topik_buff      = (char *) calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 8015376:	2101      	movs	r1, #1
 8015378:	2080      	movs	r0, #128	@ 0x80
 801537a:	f7ff fcfb 	bl	8014d74 <_ZL9my_callocjj>
 801537e:	4b39      	ldr	r3, [pc, #228]	@ (8015464 <mqtt_init+0x128>)
 8015380:	6018      	str	r0, [r3, #0]
	payload_buff    = (char *) calloc(MQTT_PAYLOAD_MAX_LEN, sizeof(char));
 8015382:	2101      	movs	r1, #1
 8015384:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8015388:	f7ff fcf4 	bl	8014d74 <_ZL9my_callocjj>
 801538c:	4b36      	ldr	r3, [pc, #216]	@ (8015468 <mqtt_init+0x12c>)
 801538e:	6018      	str	r0, [r3, #0]
	ip_addr_str     = (char *) calloc(IP_v6_STR_LEN,        sizeof(char));
 8015390:	2101      	movs	r1, #1
 8015392:	2028      	movs	r0, #40	@ 0x28
 8015394:	f7ff fcee 	bl	8014d74 <_ZL9my_callocjj>
 8015398:	4b34      	ldr	r3, [pc, #208]	@ (801546c <mqtt_init+0x130>)
 801539a:	6018      	str	r0, [r3, #0]
	r_w_parameter   = fn;
 801539c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801539e:	4b34      	ldr	r3, [pc, #208]	@ (8015470 <mqtt_init+0x134>)
 80153a0:	601a      	str	r2, [r3, #0]

	strcpy(mqtt_broker_url, (char *)broker_url);
 80153a2:	f8da a000 	ldr.w	sl, [sl]
 80153a6:	4649      	mov	r1, r9
 80153a8:	4650      	mov	r0, sl
 80153aa:	f019 f863 	bl	802e474 <strcpy>
	strcpy(mqtt_username,   (char *)username);
 80153ae:	f8d8 9000 	ldr.w	r9, [r8]
 80153b2:	4629      	mov	r1, r5
 80153b4:	4648      	mov	r0, r9
 80153b6:	f019 f85d 	bl	802e474 <strcpy>
	strcpy(mqtt_password,   (char *)password);
 80153ba:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80153bc:	6838      	ldr	r0, [r7, #0]
 80153be:	f019 f859 	bl	802e474 <strcpy>

	logging(L_INFO, "Start MQTT task, server: %s, username: %s", mqtt_broker_url, mqtt_username);
 80153c2:	464b      	mov	r3, r9
 80153c4:	4652      	mov	r2, sl
 80153c6:	492b      	ldr	r1, [pc, #172]	@ (8015474 <mqtt_init+0x138>)
 80153c8:	2001      	movs	r0, #1
 80153ca:	f7fc feed 	bl	80121a8 <logging>

	mgr = (struct mg_mgr *)     mgr_parameter;
 80153ce:	4d2a      	ldr	r5, [pc, #168]	@ (8015478 <mqtt_init+0x13c>)
 80153d0:	602e      	str	r6, [r5, #0]
	mif = (struct mg_tcpip_if*) mif_parameter;
 80153d2:	4b2a      	ldr	r3, [pc, #168]	@ (801547c <mqtt_init+0x140>)
 80153d4:	601c      	str	r4, [r3, #0]

	set_device_id(mif->mac, sizeof(mif->mac));
 80153d6:	2106      	movs	r1, #6
 80153d8:	4620      	mov	r0, r4
 80153da:	f000 f871 	bl	80154c0 <set_device_id>

	mqtt_opts.user 		    = mg_str(mqtt_username);
 80153de:	4e28      	ldr	r6, [pc, #160]	@ (8015480 <mqtt_init+0x144>)
 80153e0:	ac04      	add	r4, sp, #16
 80153e2:	f8d8 1000 	ldr.w	r1, [r8]
 80153e6:	4620      	mov	r0, r4
 80153e8:	f00f faca 	bl	8024980 <mg_str_s>
 80153ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80153f0:	e886 0003 	stmia.w	r6, {r0, r1}
	mqtt_opts.pass		    = mg_str(mqtt_password);
 80153f4:	6839      	ldr	r1, [r7, #0]
 80153f6:	4620      	mov	r0, r4
 80153f8:	f00f fac2 	bl	8024980 <mg_str_s>
 80153fc:	f106 0308 	add.w	r3, r6, #8
 8015400:	e894 0003 	ldmia.w	r4, {r0, r1}
 8015404:	e883 0003 	stmia.w	r3, {r0, r1}
	mqtt_opts.keepalive 	= 60;
 8015408:	233c      	movs	r3, #60	@ 0x3c
 801540a:	8573      	strh	r3, [r6, #42]	@ 0x2a

	mqtt_timer =                      mg_timer_add(mgr, 10000 /* 10 seconds */, MG_TIMER_REPEAT | MG_TIMER_RUN_NOW, mqtt_timer_handler,                      NULL); // Timer for following connection and reconnect every 10 seconds if needed
 801540c:	2400      	movs	r4, #0
 801540e:	9402      	str	r4, [sp, #8]
 8015410:	4b1c      	ldr	r3, [pc, #112]	@ (8015484 <mqtt_init+0x148>)
 8015412:	9301      	str	r3, [sp, #4]
 8015414:	2303      	movs	r3, #3
 8015416:	9300      	str	r3, [sp, #0]
 8015418:	f242 7210 	movw	r2, #10000	@ 0x2710
 801541c:	2300      	movs	r3, #0
 801541e:	6828      	ldr	r0, [r5, #0]
 8015420:	f010 fc90 	bl	8025d44 <mg_timer_add>
 8015424:	4b18      	ldr	r3, [pc, #96]	@ (8015488 <mqtt_init+0x14c>)
 8015426:	6018      	str	r0, [r3, #0]
	mqtt_timer_periodic_status_send = mg_timer_add(mgr, 15000 /* 15 seconds */, MG_TIMER_REPEAT,                mqtt_pereodic_status_send_timer_handler, NULL); // Timer for send io statuses every ~150 seconds
 8015428:	9402      	str	r4, [sp, #8]
 801542a:	4b18      	ldr	r3, [pc, #96]	@ (801548c <mqtt_init+0x150>)
 801542c:	9301      	str	r3, [sp, #4]
 801542e:	2601      	movs	r6, #1
 8015430:	9600      	str	r6, [sp, #0]
 8015432:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8015436:	2300      	movs	r3, #0
 8015438:	6828      	ldr	r0, [r5, #0]
 801543a:	f010 fc83 	bl	8025d44 <mg_timer_add>
 801543e:	4b14      	ldr	r3, [pc, #80]	@ (8015490 <mqtt_init+0x154>)
 8015440:	6018      	str	r0, [r3, #0]
	mqtt_timer_io_sheck	=             mg_timer_add(mgr,	500 /* 0.5 seconds */, MG_TIMER_REPEAT,                    mqtt_timer_handler_cher_io_status,       NULL); // timer for follow io status every 0.5 seconds
 8015442:	9402      	str	r4, [sp, #8]
 8015444:	4b13      	ldr	r3, [pc, #76]	@ (8015494 <mqtt_init+0x158>)
 8015446:	9301      	str	r3, [sp, #4]
 8015448:	9600      	str	r6, [sp, #0]
 801544a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 801544e:	2300      	movs	r3, #0
 8015450:	6828      	ldr	r0, [r5, #0]
 8015452:	f010 fc77 	bl	8025d44 <mg_timer_add>
 8015456:	4b10      	ldr	r3, [pc, #64]	@ (8015498 <mqtt_init+0x15c>)
 8015458:	6018      	str	r0, [r3, #0]

}
 801545a:	b006      	add	sp, #24
 801545c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015460:	2000291c 	.word	0x2000291c
 8015464:	20002918 	.word	0x20002918
 8015468:	20002914 	.word	0x20002914
 801546c:	200028c4 	.word	0x200028c4
 8015470:	200028b0 	.word	0x200028b0
 8015474:	080386f4 	.word	0x080386f4
 8015478:	20002910 	.word	0x20002910
 801547c:	2000290c 	.word	0x2000290c
 8015480:	200028cc 	.word	0x200028cc
 8015484:	08014c15 	.word	0x08014c15
 8015488:	200028c0 	.word	0x200028c0
 801548c:	08014f2d 	.word	0x08014f2d
 8015490:	200028bc 	.word	0x200028bc
 8015494:	08014f0d 	.word	0x08014f0d
 8015498:	200028b8 	.word	0x200028b8
 801549c:	20002924 	.word	0x20002924
 80154a0:	20002920 	.word	0x20002920

080154a4 <_ZL9my_callocjj>:
static inline void *my_calloc(size_t cnt, size_t size) {
 80154a4:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 80154a6:	fb01 f400 	mul.w	r4, r1, r0
 80154aa:	4620      	mov	r0, r4
 80154ac:	f005 fd8c 	bl	801afc8 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 80154b0:	4605      	mov	r5, r0
 80154b2:	b118      	cbz	r0, 80154bc <_ZL9my_callocjj+0x18>
 80154b4:	4622      	mov	r2, r4
 80154b6:	2100      	movs	r1, #0
 80154b8:	f017 fdd2 	bl	802d060 <memset>
}
 80154bc:	4628      	mov	r0, r5
 80154be:	bd38      	pop	{r3, r4, r5, pc}

080154c0 <set_device_id>:
//char subscr_topik_template[] 	= {"%s_%s/sw%u/set"	};
char input_status_topik_temp[] 	= {"%s_%s/inputs"	};
char switch_status_topik_temp[] = {"%s_%s/switches"	};
const char io_template[] = {"{\"%s%u\" : \"%s\"}"};

mqtt_config_error set_device_id(const uint8_t* id, unsigned const int id_len){
 80154c0:	b570      	push	{r4, r5, r6, lr}
 80154c2:	4606      	mov	r6, r0
 80154c4:	460d      	mov	r5, r1

	if ( unical_id){
 80154c6:	4b0f      	ldr	r3, [pc, #60]	@ (8015504 <set_device_id+0x44>)
 80154c8:	6818      	ldr	r0, [r3, #0]
 80154ca:	b108      	cbz	r0, 80154d0 <set_device_id+0x10>
		free(unical_id);
 80154cc:	f005 fdfe 	bl	801b0cc <vPortFree>
	}
    // Каждый байт будет преобразован в два символа + 1 символ для окончания строки
    unical_id = (char *) calloc(id_len * 2 + 1, sizeof(char));  // +1 для '\0'
 80154d0:	0068      	lsls	r0, r5, #1
 80154d2:	2101      	movs	r1, #1
 80154d4:	4408      	add	r0, r1
 80154d6:	f7ff ffe5 	bl	80154a4 <_ZL9my_callocjj>
 80154da:	4b0a      	ldr	r3, [pc, #40]	@ (8015504 <set_device_id+0x44>)
 80154dc:	6018      	str	r0, [r3, #0]


	if (unical_id){
 80154de:	b108      	cbz	r0, 80154e4 <set_device_id+0x24>
        // Проходим по каждому байту идентификатора
        for (unsigned int i = 0; i < id_len; i++) {
 80154e0:	2400      	movs	r4, #0
 80154e2:	e00b      	b.n	80154fc <set_device_id+0x3c>
            // Конвертируем каждый байт в два символа и добавляем в строку
            sprintf(&unical_id[i * 2], "%02X", id[i]);
        }
	}else{
        return MEM_ALLOC_ERR; // Ошибка выделения памяти
 80154e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80154e8:	e00b      	b.n	8015502 <set_device_id+0x42>
            sprintf(&unical_id[i * 2], "%02X", id[i]);
 80154ea:	4b06      	ldr	r3, [pc, #24]	@ (8015504 <set_device_id+0x44>)
 80154ec:	6818      	ldr	r0, [r3, #0]
 80154ee:	5d32      	ldrb	r2, [r6, r4]
 80154f0:	4905      	ldr	r1, [pc, #20]	@ (8015508 <set_device_id+0x48>)
 80154f2:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 80154f6:	f017 f9f1 	bl	802c8dc <sprintf>
        for (unsigned int i = 0; i < id_len; i++) {
 80154fa:	3401      	adds	r4, #1
 80154fc:	42ac      	cmp	r4, r5
 80154fe:	d3f4      	bcc.n	80154ea <set_device_id+0x2a>
	}

	return NO_ERR; // Успешно
 8015500:	2000      	movs	r0, #0
}
 8015502:	bd70      	pop	{r4, r5, r6, pc}
 8015504:	2000292c 	.word	0x2000292c
 8015508:	08038720 	.word	0x08038720

0801550c <set_device_conf_ip>:

mqtt_config_error set_device_conf_ip(char * chr_ip, unsigned int ip_len){
 801550c:	b538      	push	{r3, r4, r5, lr}
 801550e:	4605      	mov	r5, r0
 8015510:	460c      	mov	r4, r1

	if(dev_conf_ip){
 8015512:	4b0c      	ldr	r3, [pc, #48]	@ (8015544 <set_device_conf_ip+0x38>)
 8015514:	6818      	ldr	r0, [r3, #0]
 8015516:	b108      	cbz	r0, 801551c <set_device_conf_ip+0x10>
		free(dev_conf_ip);
 8015518:	f005 fdd8 	bl	801b0cc <vPortFree>
	}

	dev_conf_ip = (char *)calloc(ip_len+1, sizeof(char)); // +1 для нулевого символа
 801551c:	2101      	movs	r1, #1
 801551e:	1860      	adds	r0, r4, r1
 8015520:	f7ff ffc0 	bl	80154a4 <_ZL9my_callocjj>
 8015524:	4b07      	ldr	r3, [pc, #28]	@ (8015544 <set_device_conf_ip+0x38>)
 8015526:	6018      	str	r0, [r3, #0]

	if(dev_conf_ip){
 8015528:	b140      	cbz	r0, 801553c <set_device_conf_ip+0x30>
		strncpy(dev_conf_ip, chr_ip, ip_len);
 801552a:	4622      	mov	r2, r4
 801552c:	4629      	mov	r1, r5
 801552e:	f017 fdde 	bl	802d0ee <strncpy>
		dev_conf_ip[ip_len] = '\0'; // Явно добавляем нулевой символ
 8015532:	4b04      	ldr	r3, [pc, #16]	@ (8015544 <set_device_conf_ip+0x38>)
 8015534:	681b      	ldr	r3, [r3, #0]
 8015536:	2000      	movs	r0, #0
 8015538:	5518      	strb	r0, [r3, r4]
	}else{
		return MEM_ALLOC_ERR; // Ошибка выделения памяти
	}

	return NO_ERR; // Успешно
}
 801553a:	bd38      	pop	{r3, r4, r5, pc}
		return MEM_ALLOC_ERR; // Ошибка выделения памяти
 801553c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015540:	e7fb      	b.n	801553a <set_device_conf_ip+0x2e>
 8015542:	bf00      	nop
 8015544:	20002928 	.word	0x20002928

08015548 <get_config_topik_string>:
 	strncpy(home_assistant_prefix, prefix_string, prefix_len);

	return 0;
}

int get_config_topik_string (char * buff, uint32_t buff_len, uint8_t topik_type, uint8_t obj_number){
 8015548:	b500      	push	{lr}
 801554a:	b087      	sub	sp, #28

	strcpy(buff, "");
 801554c:	f04f 0c00 	mov.w	ip, #0
 8015550:	f880 c000 	strb.w	ip, [r0]
	switch (topik_type) {//%s/%s/%s_%s/%s%u/config
 8015554:	3a01      	subs	r2, #1
 8015556:	2a07      	cmp	r2, #7
 8015558:	f200 8087 	bhi.w	801566a <get_config_topik_string+0x122>
 801555c:	e8df f002 	tbb	[pc, r2]
 8015560:	45251604 	.word	0x45251604
 8015564:	55756535 	.word	0x55756535
		case INPUT_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_binary_sensor, dev_system, unical_id, component_input, obj_number);
 8015568:	9304      	str	r3, [sp, #16]
 801556a:	4b41      	ldr	r3, [pc, #260]	@ (8015670 <get_config_topik_string+0x128>)
 801556c:	9303      	str	r3, [sp, #12]
 801556e:	4b41      	ldr	r3, [pc, #260]	@ (8015674 <get_config_topik_string+0x12c>)
 8015570:	681b      	ldr	r3, [r3, #0]
 8015572:	9302      	str	r3, [sp, #8]
 8015574:	4b40      	ldr	r3, [pc, #256]	@ (8015678 <get_config_topik_string+0x130>)
 8015576:	9301      	str	r3, [sp, #4]
 8015578:	4b40      	ldr	r3, [pc, #256]	@ (801567c <get_config_topik_string+0x134>)
 801557a:	9300      	str	r3, [sp, #0]
 801557c:	4b40      	ldr	r3, [pc, #256]	@ (8015680 <get_config_topik_string+0x138>)
 801557e:	4a41      	ldr	r2, [pc, #260]	@ (8015684 <get_config_topik_string+0x13c>)
 8015580:	f017 f844 	bl	802c60c <snprintf>
			return -1;
			break;
	}


	return 0;
 8015584:	2000      	movs	r0, #0
}
 8015586:	b007      	add	sp, #28
 8015588:	f85d fb04 	ldr.w	pc, [sp], #4
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_switch, dev_system, unical_id, dev_class_switch, obj_number);
 801558c:	9304      	str	r3, [sp, #16]
 801558e:	4b3e      	ldr	r3, [pc, #248]	@ (8015688 <get_config_topik_string+0x140>)
 8015590:	9303      	str	r3, [sp, #12]
 8015592:	4a38      	ldr	r2, [pc, #224]	@ (8015674 <get_config_topik_string+0x12c>)
 8015594:	6812      	ldr	r2, [r2, #0]
 8015596:	9202      	str	r2, [sp, #8]
 8015598:	4a37      	ldr	r2, [pc, #220]	@ (8015678 <get_config_topik_string+0x130>)
 801559a:	9201      	str	r2, [sp, #4]
 801559c:	9300      	str	r3, [sp, #0]
 801559e:	4b38      	ldr	r3, [pc, #224]	@ (8015680 <get_config_topik_string+0x138>)
 80155a0:	4a38      	ldr	r2, [pc, #224]	@ (8015684 <get_config_topik_string+0x13c>)
 80155a2:	f017 f833 	bl	802c60c <snprintf>
	return 0;
 80155a6:	2000      	movs	r0, #0
			break;
 80155a8:	e7ed      	b.n	8015586 <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_energy, obj_number);
 80155aa:	9304      	str	r3, [sp, #16]
 80155ac:	4b37      	ldr	r3, [pc, #220]	@ (801568c <get_config_topik_string+0x144>)
 80155ae:	9303      	str	r3, [sp, #12]
 80155b0:	4b30      	ldr	r3, [pc, #192]	@ (8015674 <get_config_topik_string+0x12c>)
 80155b2:	681b      	ldr	r3, [r3, #0]
 80155b4:	9302      	str	r3, [sp, #8]
 80155b6:	4b30      	ldr	r3, [pc, #192]	@ (8015678 <get_config_topik_string+0x130>)
 80155b8:	9301      	str	r3, [sp, #4]
 80155ba:	4b35      	ldr	r3, [pc, #212]	@ (8015690 <get_config_topik_string+0x148>)
 80155bc:	9300      	str	r3, [sp, #0]
 80155be:	4b30      	ldr	r3, [pc, #192]	@ (8015680 <get_config_topik_string+0x138>)
 80155c0:	4a30      	ldr	r2, [pc, #192]	@ (8015684 <get_config_topik_string+0x13c>)
 80155c2:	f017 f823 	bl	802c60c <snprintf>
	return 0;
 80155c6:	2000      	movs	r0, #0
			break;
 80155c8:	e7dd      	b.n	8015586 <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_voltage, obj_number);
 80155ca:	9304      	str	r3, [sp, #16]
 80155cc:	4b31      	ldr	r3, [pc, #196]	@ (8015694 <get_config_topik_string+0x14c>)
 80155ce:	9303      	str	r3, [sp, #12]
 80155d0:	4b28      	ldr	r3, [pc, #160]	@ (8015674 <get_config_topik_string+0x12c>)
 80155d2:	681b      	ldr	r3, [r3, #0]
 80155d4:	9302      	str	r3, [sp, #8]
 80155d6:	4b28      	ldr	r3, [pc, #160]	@ (8015678 <get_config_topik_string+0x130>)
 80155d8:	9301      	str	r3, [sp, #4]
 80155da:	4b2d      	ldr	r3, [pc, #180]	@ (8015690 <get_config_topik_string+0x148>)
 80155dc:	9300      	str	r3, [sp, #0]
 80155de:	4b28      	ldr	r3, [pc, #160]	@ (8015680 <get_config_topik_string+0x138>)
 80155e0:	4a28      	ldr	r2, [pc, #160]	@ (8015684 <get_config_topik_string+0x13c>)
 80155e2:	f017 f813 	bl	802c60c <snprintf>
	return 0;
 80155e6:	2000      	movs	r0, #0
			break;
 80155e8:	e7cd      	b.n	8015586 <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power, obj_number);
 80155ea:	9304      	str	r3, [sp, #16]
 80155ec:	4b2a      	ldr	r3, [pc, #168]	@ (8015698 <get_config_topik_string+0x150>)
 80155ee:	9303      	str	r3, [sp, #12]
 80155f0:	4b20      	ldr	r3, [pc, #128]	@ (8015674 <get_config_topik_string+0x12c>)
 80155f2:	681b      	ldr	r3, [r3, #0]
 80155f4:	9302      	str	r3, [sp, #8]
 80155f6:	4b20      	ldr	r3, [pc, #128]	@ (8015678 <get_config_topik_string+0x130>)
 80155f8:	9301      	str	r3, [sp, #4]
 80155fa:	4b25      	ldr	r3, [pc, #148]	@ (8015690 <get_config_topik_string+0x148>)
 80155fc:	9300      	str	r3, [sp, #0]
 80155fe:	4b20      	ldr	r3, [pc, #128]	@ (8015680 <get_config_topik_string+0x138>)
 8015600:	4a20      	ldr	r2, [pc, #128]	@ (8015684 <get_config_topik_string+0x13c>)
 8015602:	f017 f803 	bl	802c60c <snprintf>
	return 0;
 8015606:	2000      	movs	r0, #0
			break;
 8015608:	e7bd      	b.n	8015586 <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_apparent_power, obj_number);
 801560a:	9304      	str	r3, [sp, #16]
 801560c:	4b23      	ldr	r3, [pc, #140]	@ (801569c <get_config_topik_string+0x154>)
 801560e:	9303      	str	r3, [sp, #12]
 8015610:	4b18      	ldr	r3, [pc, #96]	@ (8015674 <get_config_topik_string+0x12c>)
 8015612:	681b      	ldr	r3, [r3, #0]
 8015614:	9302      	str	r3, [sp, #8]
 8015616:	4b18      	ldr	r3, [pc, #96]	@ (8015678 <get_config_topik_string+0x130>)
 8015618:	9301      	str	r3, [sp, #4]
 801561a:	4b1d      	ldr	r3, [pc, #116]	@ (8015690 <get_config_topik_string+0x148>)
 801561c:	9300      	str	r3, [sp, #0]
 801561e:	4b18      	ldr	r3, [pc, #96]	@ (8015680 <get_config_topik_string+0x138>)
 8015620:	4a18      	ldr	r2, [pc, #96]	@ (8015684 <get_config_topik_string+0x13c>)
 8015622:	f016 fff3 	bl	802c60c <snprintf>
	return 0;
 8015626:	2000      	movs	r0, #0
			break;
 8015628:	e7ad      	b.n	8015586 <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power_factor, obj_number);
 801562a:	9304      	str	r3, [sp, #16]
 801562c:	4b1c      	ldr	r3, [pc, #112]	@ (80156a0 <get_config_topik_string+0x158>)
 801562e:	9303      	str	r3, [sp, #12]
 8015630:	4b10      	ldr	r3, [pc, #64]	@ (8015674 <get_config_topik_string+0x12c>)
 8015632:	681b      	ldr	r3, [r3, #0]
 8015634:	9302      	str	r3, [sp, #8]
 8015636:	4b10      	ldr	r3, [pc, #64]	@ (8015678 <get_config_topik_string+0x130>)
 8015638:	9301      	str	r3, [sp, #4]
 801563a:	4b15      	ldr	r3, [pc, #84]	@ (8015690 <get_config_topik_string+0x148>)
 801563c:	9300      	str	r3, [sp, #0]
 801563e:	4b10      	ldr	r3, [pc, #64]	@ (8015680 <get_config_topik_string+0x138>)
 8015640:	4a10      	ldr	r2, [pc, #64]	@ (8015684 <get_config_topik_string+0x13c>)
 8015642:	f016 ffe3 	bl	802c60c <snprintf>
	return 0;
 8015646:	2000      	movs	r0, #0
			break;
 8015648:	e79d      	b.n	8015586 <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_current, obj_number);
 801564a:	9304      	str	r3, [sp, #16]
 801564c:	4b15      	ldr	r3, [pc, #84]	@ (80156a4 <get_config_topik_string+0x15c>)
 801564e:	9303      	str	r3, [sp, #12]
 8015650:	4b08      	ldr	r3, [pc, #32]	@ (8015674 <get_config_topik_string+0x12c>)
 8015652:	681b      	ldr	r3, [r3, #0]
 8015654:	9302      	str	r3, [sp, #8]
 8015656:	4b08      	ldr	r3, [pc, #32]	@ (8015678 <get_config_topik_string+0x130>)
 8015658:	9301      	str	r3, [sp, #4]
 801565a:	4b0d      	ldr	r3, [pc, #52]	@ (8015690 <get_config_topik_string+0x148>)
 801565c:	9300      	str	r3, [sp, #0]
 801565e:	4b08      	ldr	r3, [pc, #32]	@ (8015680 <get_config_topik_string+0x138>)
 8015660:	4a08      	ldr	r2, [pc, #32]	@ (8015684 <get_config_topik_string+0x13c>)
 8015662:	f016 ffd3 	bl	802c60c <snprintf>
	return 0;
 8015666:	2000      	movs	r0, #0
			break;
 8015668:	e78d      	b.n	8015586 <get_config_topik_string+0x3e>
	switch (topik_type) {//%s/%s/%s_%s/%s%u/config
 801566a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801566e:	e78a      	b.n	8015586 <get_config_topik_string+0x3e>
 8015670:	08038740 	.word	0x08038740
 8015674:	2000292c 	.word	0x2000292c
 8015678:	08036e80 	.word	0x08036e80
 801567c:	08038748 	.word	0x08038748
 8015680:	200000f8 	.word	0x200000f8
 8015684:	08038728 	.word	0x08038728
 8015688:	08038498 	.word	0x08038498
 801568c:	08038758 	.word	0x08038758
 8015690:	08038760 	.word	0x08038760
 8015694:	08038768 	.word	0x08038768
 8015698:	08038770 	.word	0x08038770
 801569c:	08038778 	.word	0x08038778
 80156a0:	08038788 	.word	0x08038788
 80156a4:	08038798 	.word	0x08038798

080156a8 <get_config_payload_string>:

int get_config_payload_string( char * payload, uint32_t payload_len, uint8_t payload_type, uint8_t obj_number){
 80156a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156ac:	b099      	sub	sp, #100	@ 0x64
 80156ae:	9017      	str	r0, [sp, #92]	@ 0x5c
 80156b0:	460d      	mov	r5, r1
 80156b2:	4617      	mov	r7, r2
 80156b4:	461c      	mov	r4, r3

	uint8_t len = 0;
	char * name      = NULL;
	char * com_topik = NULL;
	memset(payload, 0, payload_len * sizeof(char));
 80156b6:	460a      	mov	r2, r1
 80156b8:	2100      	movs	r1, #0
 80156ba:	f017 fcd1 	bl	802d060 <memset>

	switch (payload_type) {
 80156be:	1e7a      	subs	r2, r7, #1
 80156c0:	2a07      	cmp	r2, #7
 80156c2:	f200 81ba 	bhi.w	8015a3a <get_config_payload_string+0x392>
 80156c6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80156ca:	0008      	.short	0x0008
 80156cc:	00a10043 	.word	0x00a10043
 80156d0:	00c500ea 	.word	0x00c500ea
 80156d4:	0193016e 	.word	0x0193016e
 80156d8:	0149      	.short	0x0149

		case INP_CONF_PAYLOAD:

			name = (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 80156da:	2101      	movs	r1, #1
 80156dc:	2080      	movs	r0, #128	@ 0x80
 80156de:	f7ff fee1 	bl	80154a4 <_ZL9my_callocjj>
 80156e2:	4607      	mov	r7, r0
			snprintf(name, MQTT_TOPIK_MAX_LEN, "%s %u", component_input_human, obj_number);
 80156e4:	9400      	str	r4, [sp, #0]
 80156e6:	4b80      	ldr	r3, [pc, #512]	@ (80158e8 <get_config_payload_string+0x240>)
 80156e8:	4a80      	ldr	r2, [pc, #512]	@ (80158ec <get_config_payload_string+0x244>)
 80156ea:	2180      	movs	r1, #128	@ 0x80
 80156ec:	f016 ff8e 	bl	802c60c <snprintf>

		    len = snprintf(payload, payload_len, universal_conf_template, dev_class_power, dev_system, \
 80156f0:	4b7f      	ldr	r3, [pc, #508]	@ (80158f0 <get_config_payload_string+0x248>)
 80156f2:	681a      	ldr	r2, [r3, #0]
 80156f4:	4b7f      	ldr	r3, [pc, #508]	@ (80158f4 <get_config_payload_string+0x24c>)
 80156f6:	681b      	ldr	r3, [r3, #0]
 80156f8:	9314      	str	r3, [sp, #80]	@ 0x50
 80156fa:	4b7f      	ldr	r3, [pc, #508]	@ (80158f8 <get_config_payload_string+0x250>)
 80156fc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80156fe:	4b7f      	ldr	r3, [pc, #508]	@ (80158fc <get_config_payload_string+0x254>)
 8015700:	9312      	str	r3, [sp, #72]	@ 0x48
 8015702:	4b7f      	ldr	r3, [pc, #508]	@ (8015900 <get_config_payload_string+0x258>)
 8015704:	9311      	str	r3, [sp, #68]	@ 0x44
 8015706:	4b7f      	ldr	r3, [pc, #508]	@ (8015904 <get_config_payload_string+0x25c>)
 8015708:	9310      	str	r3, [sp, #64]	@ 0x40
 801570a:	4b7f      	ldr	r3, [pc, #508]	@ (8015908 <get_config_payload_string+0x260>)
 801570c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801570e:	920e      	str	r2, [sp, #56]	@ 0x38
 8015710:	4b7e      	ldr	r3, [pc, #504]	@ (801590c <get_config_payload_string+0x264>)
 8015712:	930d      	str	r3, [sp, #52]	@ 0x34
 8015714:	497e      	ldr	r1, [pc, #504]	@ (8015910 <get_config_payload_string+0x268>)
 8015716:	910c      	str	r1, [sp, #48]	@ 0x30
 8015718:	940b      	str	r4, [sp, #44]	@ 0x2c
 801571a:	497e      	ldr	r1, [pc, #504]	@ (8015914 <get_config_payload_string+0x26c>)
 801571c:	910a      	str	r1, [sp, #40]	@ 0x28
 801571e:	9209      	str	r2, [sp, #36]	@ 0x24
 8015720:	9308      	str	r3, [sp, #32]
 8015722:	9707      	str	r7, [sp, #28]
 8015724:	487c      	ldr	r0, [pc, #496]	@ (8015918 <get_config_payload_string+0x270>)
 8015726:	9006      	str	r0, [sp, #24]
 8015728:	9405      	str	r4, [sp, #20]
 801572a:	9104      	str	r1, [sp, #16]
 801572c:	9403      	str	r4, [sp, #12]
 801572e:	9102      	str	r1, [sp, #8]
 8015730:	9201      	str	r2, [sp, #4]
 8015732:	9300      	str	r3, [sp, #0]
 8015734:	4b79      	ldr	r3, [pc, #484]	@ (801591c <get_config_payload_string+0x274>)
 8015736:	4a7a      	ldr	r2, [pc, #488]	@ (8015920 <get_config_payload_string+0x278>)
 8015738:	4629      	mov	r1, r5
 801573a:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801573c:	f016 ff66 	bl	802c60c <snprintf>
 8015740:	4604      	mov	r4, r0
							unical_id, component_input, obj_number, component_input, obj_number, "\n", \
							name, dev_system, unical_id, \
		                    component_input, obj_number,"",dev_system, unical_id, dev_common_name, dev_model_name, \
		                    dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
		    free(name);
 8015742:	4638      	mov	r0, r7
 8015744:	f005 fcc2 	bl	801b0cc <vPortFree>

			return len;
 8015748:	b2e0      	uxtb	r0, r4

		default:
			return -1;
			break;
	}
}
 801574a:	b019      	add	sp, #100	@ 0x64
 801574c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			name =      (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 8015750:	2101      	movs	r1, #1
 8015752:	2080      	movs	r0, #128	@ 0x80
 8015754:	f7ff fea6 	bl	80154a4 <_ZL9my_callocjj>
 8015758:	4607      	mov	r7, r0
			com_topik = (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 801575a:	2101      	movs	r1, #1
 801575c:	2080      	movs	r0, #128	@ 0x80
 801575e:	f7ff fea1 	bl	80154a4 <_ZL9my_callocjj>
 8015762:	4680      	mov	r8, r0
			snprintf(name,      MQTT_TOPIK_MAX_LEN, "%s%u", component_switch, obj_number);
 8015764:	f8df 91f0 	ldr.w	r9, [pc, #496]	@ 8015958 <get_config_payload_string+0x2b0>
 8015768:	9400      	str	r4, [sp, #0]
 801576a:	464b      	mov	r3, r9
 801576c:	4a6d      	ldr	r2, [pc, #436]	@ (8015924 <get_config_payload_string+0x27c>)
 801576e:	2180      	movs	r1, #128	@ 0x80
 8015770:	4638      	mov	r0, r7
 8015772:	f016 ff4b 	bl	802c60c <snprintf>
			snprintf(com_topik, MQTT_TOPIK_MAX_LEN, universal_conf_template_comand_topik_part, dev_system, unical_id, name, "");
 8015776:	f8df a194 	ldr.w	sl, [pc, #404]	@ 801590c <get_config_payload_string+0x264>
 801577a:	4e65      	ldr	r6, [pc, #404]	@ (8015910 <get_config_payload_string+0x268>)
 801577c:	9602      	str	r6, [sp, #8]
 801577e:	9701      	str	r7, [sp, #4]
 8015780:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 80158f0 <get_config_payload_string+0x248>
 8015784:	f8db 3000 	ldr.w	r3, [fp]
 8015788:	9300      	str	r3, [sp, #0]
 801578a:	4653      	mov	r3, sl
 801578c:	4a66      	ldr	r2, [pc, #408]	@ (8015928 <get_config_payload_string+0x280>)
 801578e:	2180      	movs	r1, #128	@ 0x80
 8015790:	4640      	mov	r0, r8
 8015792:	f016 ff3b 	bl	802c60c <snprintf>
			snprintf(name,      MQTT_TOPIK_MAX_LEN, "%s %u", dev_class_switch_human, obj_number);
 8015796:	9400      	str	r4, [sp, #0]
 8015798:	4b64      	ldr	r3, [pc, #400]	@ (801592c <get_config_payload_string+0x284>)
 801579a:	4a54      	ldr	r2, [pc, #336]	@ (80158ec <get_config_payload_string+0x244>)
 801579c:	2180      	movs	r1, #128	@ 0x80
 801579e:	4638      	mov	r0, r7
 80157a0:	f016 ff34 	bl	802c60c <snprintf>
			len = snprintf(payload, payload_len, universal_conf_template, dev_class_switch, dev_system, \
 80157a4:	f8db 3000 	ldr.w	r3, [fp]
 80157a8:	4a52      	ldr	r2, [pc, #328]	@ (80158f4 <get_config_payload_string+0x24c>)
 80157aa:	6812      	ldr	r2, [r2, #0]
 80157ac:	9214      	str	r2, [sp, #80]	@ 0x50
 80157ae:	4a52      	ldr	r2, [pc, #328]	@ (80158f8 <get_config_payload_string+0x250>)
 80157b0:	9213      	str	r2, [sp, #76]	@ 0x4c
 80157b2:	4a52      	ldr	r2, [pc, #328]	@ (80158fc <get_config_payload_string+0x254>)
 80157b4:	9212      	str	r2, [sp, #72]	@ 0x48
 80157b6:	4a52      	ldr	r2, [pc, #328]	@ (8015900 <get_config_payload_string+0x258>)
 80157b8:	9211      	str	r2, [sp, #68]	@ 0x44
 80157ba:	4a52      	ldr	r2, [pc, #328]	@ (8015904 <get_config_payload_string+0x25c>)
 80157bc:	9210      	str	r2, [sp, #64]	@ 0x40
 80157be:	4a52      	ldr	r2, [pc, #328]	@ (8015908 <get_config_payload_string+0x260>)
 80157c0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80157c2:	930e      	str	r3, [sp, #56]	@ 0x38
 80157c4:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 80157c8:	960c      	str	r6, [sp, #48]	@ 0x30
 80157ca:	940b      	str	r4, [sp, #44]	@ 0x2c
 80157cc:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 80157d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80157d2:	f8cd a020 	str.w	sl, [sp, #32]
 80157d6:	9707      	str	r7, [sp, #28]
 80157d8:	f8cd 8018 	str.w	r8, [sp, #24]
 80157dc:	9405      	str	r4, [sp, #20]
 80157de:	f8cd 9010 	str.w	r9, [sp, #16]
 80157e2:	9403      	str	r4, [sp, #12]
 80157e4:	f8cd 9008 	str.w	r9, [sp, #8]
 80157e8:	9301      	str	r3, [sp, #4]
 80157ea:	f8cd a000 	str.w	sl, [sp]
 80157ee:	464b      	mov	r3, r9
 80157f0:	4a4b      	ldr	r2, [pc, #300]	@ (8015920 <get_config_payload_string+0x278>)
 80157f2:	4629      	mov	r1, r5
 80157f4:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80157f6:	f016 ff09 	bl	802c60c <snprintf>
 80157fa:	4604      	mov	r4, r0
			free(name);
 80157fc:	4638      	mov	r0, r7
 80157fe:	f005 fc65 	bl	801b0cc <vPortFree>
			free(com_topik);
 8015802:	4640      	mov	r0, r8
 8015804:	f005 fc62 	bl	801b0cc <vPortFree>
			return len;
 8015808:	b2e0      	uxtb	r0, r4
 801580a:	e79e      	b.n	801574a <get_config_payload_string+0xa2>
			len = sprintf(payload, universal_conf_template, dev_class_energy, dev_system, \
 801580c:	4b38      	ldr	r3, [pc, #224]	@ (80158f0 <get_config_payload_string+0x248>)
 801580e:	6819      	ldr	r1, [r3, #0]
 8015810:	4b3e      	ldr	r3, [pc, #248]	@ (801590c <get_config_payload_string+0x264>)
 8015812:	4a47      	ldr	r2, [pc, #284]	@ (8015930 <get_config_payload_string+0x288>)
 8015814:	4837      	ldr	r0, [pc, #220]	@ (80158f4 <get_config_payload_string+0x24c>)
 8015816:	6800      	ldr	r0, [r0, #0]
 8015818:	9010      	str	r0, [sp, #64]	@ 0x40
 801581a:	4837      	ldr	r0, [pc, #220]	@ (80158f8 <get_config_payload_string+0x250>)
 801581c:	900f      	str	r0, [sp, #60]	@ 0x3c
 801581e:	4837      	ldr	r0, [pc, #220]	@ (80158fc <get_config_payload_string+0x254>)
 8015820:	900e      	str	r0, [sp, #56]	@ 0x38
 8015822:	4837      	ldr	r0, [pc, #220]	@ (8015900 <get_config_payload_string+0x258>)
 8015824:	900d      	str	r0, [sp, #52]	@ 0x34
 8015826:	4837      	ldr	r0, [pc, #220]	@ (8015904 <get_config_payload_string+0x25c>)
 8015828:	900c      	str	r0, [sp, #48]	@ 0x30
 801582a:	4837      	ldr	r0, [pc, #220]	@ (8015908 <get_config_payload_string+0x260>)
 801582c:	900b      	str	r0, [sp, #44]	@ 0x2c
 801582e:	910a      	str	r1, [sp, #40]	@ 0x28
 8015830:	9309      	str	r3, [sp, #36]	@ 0x24
 8015832:	4840      	ldr	r0, [pc, #256]	@ (8015934 <get_config_payload_string+0x28c>)
 8015834:	9008      	str	r0, [sp, #32]
 8015836:	9207      	str	r2, [sp, #28]
 8015838:	9106      	str	r1, [sp, #24]
 801583a:	9305      	str	r3, [sp, #20]
 801583c:	483e      	ldr	r0, [pc, #248]	@ (8015938 <get_config_payload_string+0x290>)
 801583e:	9004      	str	r0, [sp, #16]
 8015840:	483e      	ldr	r0, [pc, #248]	@ (801593c <get_config_payload_string+0x294>)
 8015842:	9003      	str	r0, [sp, #12]
 8015844:	9202      	str	r2, [sp, #8]
 8015846:	483e      	ldr	r0, [pc, #248]	@ (8015940 <get_config_payload_string+0x298>)
 8015848:	9001      	str	r0, [sp, #4]
 801584a:	9100      	str	r1, [sp, #0]
 801584c:	4934      	ldr	r1, [pc, #208]	@ (8015920 <get_config_payload_string+0x278>)
 801584e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8015850:	f017 f844 	bl	802c8dc <sprintf>
			len = sprintf(payload, universal_conf_template, dev_class_voltage, dev_system, \
 8015854:	4b26      	ldr	r3, [pc, #152]	@ (80158f0 <get_config_payload_string+0x248>)
 8015856:	6819      	ldr	r1, [r3, #0]
 8015858:	4b2c      	ldr	r3, [pc, #176]	@ (801590c <get_config_payload_string+0x264>)
 801585a:	4a3a      	ldr	r2, [pc, #232]	@ (8015944 <get_config_payload_string+0x29c>)
 801585c:	4825      	ldr	r0, [pc, #148]	@ (80158f4 <get_config_payload_string+0x24c>)
 801585e:	6800      	ldr	r0, [r0, #0]
 8015860:	9010      	str	r0, [sp, #64]	@ 0x40
 8015862:	4825      	ldr	r0, [pc, #148]	@ (80158f8 <get_config_payload_string+0x250>)
 8015864:	900f      	str	r0, [sp, #60]	@ 0x3c
 8015866:	4825      	ldr	r0, [pc, #148]	@ (80158fc <get_config_payload_string+0x254>)
 8015868:	900e      	str	r0, [sp, #56]	@ 0x38
 801586a:	4825      	ldr	r0, [pc, #148]	@ (8015900 <get_config_payload_string+0x258>)
 801586c:	900d      	str	r0, [sp, #52]	@ 0x34
 801586e:	4825      	ldr	r0, [pc, #148]	@ (8015904 <get_config_payload_string+0x25c>)
 8015870:	900c      	str	r0, [sp, #48]	@ 0x30
 8015872:	4825      	ldr	r0, [pc, #148]	@ (8015908 <get_config_payload_string+0x260>)
 8015874:	900b      	str	r0, [sp, #44]	@ 0x2c
 8015876:	910a      	str	r1, [sp, #40]	@ 0x28
 8015878:	9309      	str	r3, [sp, #36]	@ 0x24
 801587a:	4833      	ldr	r0, [pc, #204]	@ (8015948 <get_config_payload_string+0x2a0>)
 801587c:	9008      	str	r0, [sp, #32]
 801587e:	9207      	str	r2, [sp, #28]
 8015880:	9106      	str	r1, [sp, #24]
 8015882:	9305      	str	r3, [sp, #20]
 8015884:	4831      	ldr	r0, [pc, #196]	@ (801594c <get_config_payload_string+0x2a4>)
 8015886:	9004      	str	r0, [sp, #16]
 8015888:	4823      	ldr	r0, [pc, #140]	@ (8015918 <get_config_payload_string+0x270>)
 801588a:	9003      	str	r0, [sp, #12]
 801588c:	9202      	str	r2, [sp, #8]
 801588e:	482c      	ldr	r0, [pc, #176]	@ (8015940 <get_config_payload_string+0x298>)
 8015890:	9001      	str	r0, [sp, #4]
 8015892:	9100      	str	r1, [sp, #0]
 8015894:	4922      	ldr	r1, [pc, #136]	@ (8015920 <get_config_payload_string+0x278>)
 8015896:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8015898:	f017 f820 	bl	802c8dc <sprintf>
			break;
 801589c:	e7da      	b.n	8015854 <get_config_payload_string+0x1ac>
			len = sprintf(payload, universal_conf_template, dev_class_power, dev_system, \
 801589e:	4b14      	ldr	r3, [pc, #80]	@ (80158f0 <get_config_payload_string+0x248>)
 80158a0:	6819      	ldr	r1, [r3, #0]
 80158a2:	4b1a      	ldr	r3, [pc, #104]	@ (801590c <get_config_payload_string+0x264>)
 80158a4:	4a1d      	ldr	r2, [pc, #116]	@ (801591c <get_config_payload_string+0x274>)
 80158a6:	4813      	ldr	r0, [pc, #76]	@ (80158f4 <get_config_payload_string+0x24c>)
 80158a8:	6800      	ldr	r0, [r0, #0]
 80158aa:	9010      	str	r0, [sp, #64]	@ 0x40
 80158ac:	4812      	ldr	r0, [pc, #72]	@ (80158f8 <get_config_payload_string+0x250>)
 80158ae:	900f      	str	r0, [sp, #60]	@ 0x3c
 80158b0:	4812      	ldr	r0, [pc, #72]	@ (80158fc <get_config_payload_string+0x254>)
 80158b2:	900e      	str	r0, [sp, #56]	@ 0x38
 80158b4:	4812      	ldr	r0, [pc, #72]	@ (8015900 <get_config_payload_string+0x258>)
 80158b6:	900d      	str	r0, [sp, #52]	@ 0x34
 80158b8:	4812      	ldr	r0, [pc, #72]	@ (8015904 <get_config_payload_string+0x25c>)
 80158ba:	900c      	str	r0, [sp, #48]	@ 0x30
 80158bc:	4812      	ldr	r0, [pc, #72]	@ (8015908 <get_config_payload_string+0x260>)
 80158be:	900b      	str	r0, [sp, #44]	@ 0x2c
 80158c0:	910a      	str	r1, [sp, #40]	@ 0x28
 80158c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80158c4:	4822      	ldr	r0, [pc, #136]	@ (8015950 <get_config_payload_string+0x2a8>)
 80158c6:	9008      	str	r0, [sp, #32]
 80158c8:	9207      	str	r2, [sp, #28]
 80158ca:	9106      	str	r1, [sp, #24]
 80158cc:	9305      	str	r3, [sp, #20]
 80158ce:	4821      	ldr	r0, [pc, #132]	@ (8015954 <get_config_payload_string+0x2ac>)
 80158d0:	9004      	str	r0, [sp, #16]
 80158d2:	4811      	ldr	r0, [pc, #68]	@ (8015918 <get_config_payload_string+0x270>)
 80158d4:	9003      	str	r0, [sp, #12]
 80158d6:	9202      	str	r2, [sp, #8]
 80158d8:	4819      	ldr	r0, [pc, #100]	@ (8015940 <get_config_payload_string+0x298>)
 80158da:	9001      	str	r0, [sp, #4]
 80158dc:	9100      	str	r1, [sp, #0]
 80158de:	4910      	ldr	r1, [pc, #64]	@ (8015920 <get_config_payload_string+0x278>)
 80158e0:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80158e2:	f016 fffb 	bl	802c8dc <sprintf>
			break;
 80158e6:	e7b5      	b.n	8015854 <get_config_payload_string+0x1ac>
 80158e8:	080387a0 	.word	0x080387a0
 80158ec:	080387ac 	.word	0x080387ac
 80158f0:	2000292c 	.word	0x2000292c
 80158f4:	20002928 	.word	0x20002928
 80158f8:	080368f4 	.word	0x080368f4
 80158fc:	08036da0 	.word	0x08036da0
 8015900:	080387b4 	.word	0x080387b4
 8015904:	08036e60 	.word	0x08036e60
 8015908:	08036e74 	.word	0x08036e74
 801590c:	08036e80 	.word	0x08036e80
 8015910:	080373ac 	.word	0x080373ac
 8015914:	08038740 	.word	0x08038740
 8015918:	0803ac38 	.word	0x0803ac38
 801591c:	08038770 	.word	0x08038770
 8015920:	0803891c 	.word	0x0803891c
 8015924:	080387c4 	.word	0x080387c4
 8015928:	080388f4 	.word	0x080388f4
 801592c:	080387cc 	.word	0x080387cc
 8015930:	08038758 	.word	0x08038758
 8015934:	080387e0 	.word	0x080387e0
 8015938:	080387e4 	.word	0x080387e4
 801593c:	080387f4 	.word	0x080387f4
 8015940:	08038818 	.word	0x08038818
 8015944:	08038768 	.word	0x08038768
 8015948:	08038820 	.word	0x08038820
 801594c:	08038824 	.word	0x08038824
 8015950:	08038834 	.word	0x08038834
 8015954:	08038838 	.word	0x08038838
 8015958:	08038498 	.word	0x08038498
			len = sprintf(payload, universal_conf_template, dev_class_apparent_power, dev_system, \
 801595c:	4b38      	ldr	r3, [pc, #224]	@ (8015a40 <get_config_payload_string+0x398>)
 801595e:	6819      	ldr	r1, [r3, #0]
 8015960:	4b38      	ldr	r3, [pc, #224]	@ (8015a44 <get_config_payload_string+0x39c>)
 8015962:	4a39      	ldr	r2, [pc, #228]	@ (8015a48 <get_config_payload_string+0x3a0>)
 8015964:	4839      	ldr	r0, [pc, #228]	@ (8015a4c <get_config_payload_string+0x3a4>)
 8015966:	6800      	ldr	r0, [r0, #0]
 8015968:	9010      	str	r0, [sp, #64]	@ 0x40
 801596a:	4839      	ldr	r0, [pc, #228]	@ (8015a50 <get_config_payload_string+0x3a8>)
 801596c:	900f      	str	r0, [sp, #60]	@ 0x3c
 801596e:	4839      	ldr	r0, [pc, #228]	@ (8015a54 <get_config_payload_string+0x3ac>)
 8015970:	900e      	str	r0, [sp, #56]	@ 0x38
 8015972:	4839      	ldr	r0, [pc, #228]	@ (8015a58 <get_config_payload_string+0x3b0>)
 8015974:	900d      	str	r0, [sp, #52]	@ 0x34
 8015976:	4839      	ldr	r0, [pc, #228]	@ (8015a5c <get_config_payload_string+0x3b4>)
 8015978:	900c      	str	r0, [sp, #48]	@ 0x30
 801597a:	4839      	ldr	r0, [pc, #228]	@ (8015a60 <get_config_payload_string+0x3b8>)
 801597c:	900b      	str	r0, [sp, #44]	@ 0x2c
 801597e:	910a      	str	r1, [sp, #40]	@ 0x28
 8015980:	9309      	str	r3, [sp, #36]	@ 0x24
 8015982:	4838      	ldr	r0, [pc, #224]	@ (8015a64 <get_config_payload_string+0x3bc>)
 8015984:	9008      	str	r0, [sp, #32]
 8015986:	9207      	str	r2, [sp, #28]
 8015988:	9106      	str	r1, [sp, #24]
 801598a:	9305      	str	r3, [sp, #20]
 801598c:	4836      	ldr	r0, [pc, #216]	@ (8015a68 <get_config_payload_string+0x3c0>)
 801598e:	9004      	str	r0, [sp, #16]
 8015990:	4836      	ldr	r0, [pc, #216]	@ (8015a6c <get_config_payload_string+0x3c4>)
 8015992:	9003      	str	r0, [sp, #12]
 8015994:	9202      	str	r2, [sp, #8]
 8015996:	4836      	ldr	r0, [pc, #216]	@ (8015a70 <get_config_payload_string+0x3c8>)
 8015998:	9001      	str	r0, [sp, #4]
 801599a:	9100      	str	r1, [sp, #0]
 801599c:	4935      	ldr	r1, [pc, #212]	@ (8015a74 <get_config_payload_string+0x3cc>)
 801599e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80159a0:	f016 ff9c 	bl	802c8dc <sprintf>
			break;
 80159a4:	e756      	b.n	8015854 <get_config_payload_string+0x1ac>
			len = sprintf(payload, universal_conf_template, dev_class_power_factor, dev_system, \
 80159a6:	4b26      	ldr	r3, [pc, #152]	@ (8015a40 <get_config_payload_string+0x398>)
 80159a8:	6819      	ldr	r1, [r3, #0]
 80159aa:	4b26      	ldr	r3, [pc, #152]	@ (8015a44 <get_config_payload_string+0x39c>)
 80159ac:	4a32      	ldr	r2, [pc, #200]	@ (8015a78 <get_config_payload_string+0x3d0>)
 80159ae:	4827      	ldr	r0, [pc, #156]	@ (8015a4c <get_config_payload_string+0x3a4>)
 80159b0:	6800      	ldr	r0, [r0, #0]
 80159b2:	9010      	str	r0, [sp, #64]	@ 0x40
 80159b4:	4826      	ldr	r0, [pc, #152]	@ (8015a50 <get_config_payload_string+0x3a8>)
 80159b6:	900f      	str	r0, [sp, #60]	@ 0x3c
 80159b8:	4826      	ldr	r0, [pc, #152]	@ (8015a54 <get_config_payload_string+0x3ac>)
 80159ba:	900e      	str	r0, [sp, #56]	@ 0x38
 80159bc:	4826      	ldr	r0, [pc, #152]	@ (8015a58 <get_config_payload_string+0x3b0>)
 80159be:	900d      	str	r0, [sp, #52]	@ 0x34
 80159c0:	4826      	ldr	r0, [pc, #152]	@ (8015a5c <get_config_payload_string+0x3b4>)
 80159c2:	900c      	str	r0, [sp, #48]	@ 0x30
 80159c4:	4826      	ldr	r0, [pc, #152]	@ (8015a60 <get_config_payload_string+0x3b8>)
 80159c6:	900b      	str	r0, [sp, #44]	@ 0x2c
 80159c8:	910a      	str	r1, [sp, #40]	@ 0x28
 80159ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80159cc:	482b      	ldr	r0, [pc, #172]	@ (8015a7c <get_config_payload_string+0x3d4>)
 80159ce:	9008      	str	r0, [sp, #32]
 80159d0:	9207      	str	r2, [sp, #28]
 80159d2:	9106      	str	r1, [sp, #24]
 80159d4:	9305      	str	r3, [sp, #20]
 80159d6:	482a      	ldr	r0, [pc, #168]	@ (8015a80 <get_config_payload_string+0x3d8>)
 80159d8:	9004      	str	r0, [sp, #16]
 80159da:	4824      	ldr	r0, [pc, #144]	@ (8015a6c <get_config_payload_string+0x3c4>)
 80159dc:	9003      	str	r0, [sp, #12]
 80159de:	9202      	str	r2, [sp, #8]
 80159e0:	4823      	ldr	r0, [pc, #140]	@ (8015a70 <get_config_payload_string+0x3c8>)
 80159e2:	9001      	str	r0, [sp, #4]
 80159e4:	9100      	str	r1, [sp, #0]
 80159e6:	4923      	ldr	r1, [pc, #140]	@ (8015a74 <get_config_payload_string+0x3cc>)
 80159e8:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80159ea:	f016 ff77 	bl	802c8dc <sprintf>
			break;
 80159ee:	e731      	b.n	8015854 <get_config_payload_string+0x1ac>
			len = sprintf(payload, universal_conf_template, dev_class_current, dev_system, \
 80159f0:	4b13      	ldr	r3, [pc, #76]	@ (8015a40 <get_config_payload_string+0x398>)
 80159f2:	6819      	ldr	r1, [r3, #0]
 80159f4:	4b13      	ldr	r3, [pc, #76]	@ (8015a44 <get_config_payload_string+0x39c>)
 80159f6:	4a23      	ldr	r2, [pc, #140]	@ (8015a84 <get_config_payload_string+0x3dc>)
 80159f8:	4814      	ldr	r0, [pc, #80]	@ (8015a4c <get_config_payload_string+0x3a4>)
 80159fa:	6800      	ldr	r0, [r0, #0]
 80159fc:	9010      	str	r0, [sp, #64]	@ 0x40
 80159fe:	4814      	ldr	r0, [pc, #80]	@ (8015a50 <get_config_payload_string+0x3a8>)
 8015a00:	900f      	str	r0, [sp, #60]	@ 0x3c
 8015a02:	4814      	ldr	r0, [pc, #80]	@ (8015a54 <get_config_payload_string+0x3ac>)
 8015a04:	900e      	str	r0, [sp, #56]	@ 0x38
 8015a06:	4814      	ldr	r0, [pc, #80]	@ (8015a58 <get_config_payload_string+0x3b0>)
 8015a08:	900d      	str	r0, [sp, #52]	@ 0x34
 8015a0a:	4814      	ldr	r0, [pc, #80]	@ (8015a5c <get_config_payload_string+0x3b4>)
 8015a0c:	900c      	str	r0, [sp, #48]	@ 0x30
 8015a0e:	4814      	ldr	r0, [pc, #80]	@ (8015a60 <get_config_payload_string+0x3b8>)
 8015a10:	900b      	str	r0, [sp, #44]	@ 0x2c
 8015a12:	910a      	str	r1, [sp, #40]	@ 0x28
 8015a14:	9309      	str	r3, [sp, #36]	@ 0x24
 8015a16:	481c      	ldr	r0, [pc, #112]	@ (8015a88 <get_config_payload_string+0x3e0>)
 8015a18:	9008      	str	r0, [sp, #32]
 8015a1a:	9207      	str	r2, [sp, #28]
 8015a1c:	9106      	str	r1, [sp, #24]
 8015a1e:	9305      	str	r3, [sp, #20]
 8015a20:	481a      	ldr	r0, [pc, #104]	@ (8015a8c <get_config_payload_string+0x3e4>)
 8015a22:	9004      	str	r0, [sp, #16]
 8015a24:	4811      	ldr	r0, [pc, #68]	@ (8015a6c <get_config_payload_string+0x3c4>)
 8015a26:	9003      	str	r0, [sp, #12]
 8015a28:	9202      	str	r2, [sp, #8]
 8015a2a:	4811      	ldr	r0, [pc, #68]	@ (8015a70 <get_config_payload_string+0x3c8>)
 8015a2c:	9001      	str	r0, [sp, #4]
 8015a2e:	9100      	str	r1, [sp, #0]
 8015a30:	4910      	ldr	r1, [pc, #64]	@ (8015a74 <get_config_payload_string+0x3cc>)
 8015a32:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8015a34:	f016 ff52 	bl	802c8dc <sprintf>
			break;
 8015a38:	e70c      	b.n	8015854 <get_config_payload_string+0x1ac>
	switch (payload_type) {
 8015a3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015a3e:	e684      	b.n	801574a <get_config_payload_string+0xa2>
 8015a40:	2000292c 	.word	0x2000292c
 8015a44:	08036e80 	.word	0x08036e80
 8015a48:	08038778 	.word	0x08038778
 8015a4c:	20002928 	.word	0x20002928
 8015a50:	080368f4 	.word	0x080368f4
 8015a54:	08036da0 	.word	0x08036da0
 8015a58:	080387b4 	.word	0x080387b4
 8015a5c:	08036e60 	.word	0x08036e60
 8015a60:	08036e74 	.word	0x08036e74
 8015a64:	0803885c 	.word	0x0803885c
 8015a68:	08038860 	.word	0x08038860
 8015a6c:	0803ac38 	.word	0x0803ac38
 8015a70:	08038818 	.word	0x08038818
 8015a74:	0803891c 	.word	0x0803891c
 8015a78:	08038788 	.word	0x08038788
 8015a7c:	08038880 	.word	0x08038880
 8015a80:	08038884 	.word	0x08038884
 8015a84:	08038798 	.word	0x08038798
 8015a88:	080388b0 	.word	0x080388b0
 8015a8c:	080388b4 	.word	0x080388b4

08015a90 <gen_bin_sensor_status_payload_JSON>:


int gen_bin_sensor_status_payload_JSON(char * payload, uint32_t payload_len, uint8_t sensor_type, uint8_t sensor_number, uint8_t state){
 8015a90:	b530      	push	{r4, r5, lr}
 8015a92:	b083      	sub	sp, #12
 8015a94:	461c      	mov	r4, r3
 8015a96:	f89d 5018 	ldrb.w	r5, [sp, #24]

	char * sens_name = NULL;
	switch (sensor_type) {
 8015a9a:	2a01      	cmp	r2, #1
 8015a9c:	d00b      	beq.n	8015ab6 <gen_bin_sensor_status_payload_JSON+0x26>
 8015a9e:	2a02      	cmp	r2, #2
 8015aa0:	d10b      	bne.n	8015aba <gen_bin_sensor_status_payload_JSON+0x2a>
		case INPUT_SENSOR:
			sens_name = (char *)component_input;
			break;
		case OUTPUT_SENSOR:
			sens_name = (char *)dev_class_switch;
 8015aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8015acc <gen_bin_sensor_status_payload_JSON+0x3c>)
			break;
		default:
			break;
	}

	if (state){
 8015aa4:	b15d      	cbz	r5, 8015abe <gen_bin_sensor_status_payload_JSON+0x2e>
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_on);
 8015aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8015ad0 <gen_bin_sensor_status_payload_JSON+0x40>)
 8015aa8:	9201      	str	r2, [sp, #4]
 8015aaa:	9400      	str	r4, [sp, #0]
 8015aac:	4a09      	ldr	r2, [pc, #36]	@ (8015ad4 <gen_bin_sensor_status_payload_JSON+0x44>)
 8015aae:	f016 fdad 	bl	802c60c <snprintf>
	}else{
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_off);
	}
}
 8015ab2:	b003      	add	sp, #12
 8015ab4:	bd30      	pop	{r4, r5, pc}
			sens_name = (char *)component_input;
 8015ab6:	4b08      	ldr	r3, [pc, #32]	@ (8015ad8 <gen_bin_sensor_status_payload_JSON+0x48>)
 8015ab8:	e7f4      	b.n	8015aa4 <gen_bin_sensor_status_payload_JSON+0x14>
	switch (sensor_type) {
 8015aba:	2300      	movs	r3, #0
 8015abc:	e7f2      	b.n	8015aa4 <gen_bin_sensor_status_payload_JSON+0x14>
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_off);
 8015abe:	4a07      	ldr	r2, [pc, #28]	@ (8015adc <gen_bin_sensor_status_payload_JSON+0x4c>)
 8015ac0:	9201      	str	r2, [sp, #4]
 8015ac2:	9400      	str	r4, [sp, #0]
 8015ac4:	4a03      	ldr	r2, [pc, #12]	@ (8015ad4 <gen_bin_sensor_status_payload_JSON+0x44>)
 8015ac6:	f016 fda1 	bl	802c60c <snprintf>
 8015aca:	e7f2      	b.n	8015ab2 <gen_bin_sensor_status_payload_JSON+0x22>
 8015acc:	08038498 	.word	0x08038498
 8015ad0:	08038568 	.word	0x08038568
 8015ad4:	080388e4 	.word	0x080388e4
 8015ad8:	08038740 	.word	0x08038740
 8015adc:	08038580 	.word	0x08038580

08015ae0 <generate_comand_topik_for_subscrabe>:
//	strcat(buff, "\n}");
//
//	return 0;
//}

int generate_comand_topik_for_subscrabe(char * topik, uint32_t topik_len, uint8_t sensor_type, uint8_t sensor_number){
 8015ae0:	b500      	push	{lr}
 8015ae2:	b085      	sub	sp, #20

	switch(sensor_type){

		case OUTPUT_SENSOR:
			return snprintf(topik, topik_len, universal_control_topik_template, dev_system, unical_id, dev_class_switch, sensor_number );
 8015ae4:	9302      	str	r3, [sp, #8]
 8015ae6:	4b06      	ldr	r3, [pc, #24]	@ (8015b00 <generate_comand_topik_for_subscrabe+0x20>)
 8015ae8:	9301      	str	r3, [sp, #4]
 8015aea:	4b06      	ldr	r3, [pc, #24]	@ (8015b04 <generate_comand_topik_for_subscrabe+0x24>)
 8015aec:	681b      	ldr	r3, [r3, #0]
 8015aee:	9300      	str	r3, [sp, #0]
 8015af0:	4b05      	ldr	r3, [pc, #20]	@ (8015b08 <generate_comand_topik_for_subscrabe+0x28>)
 8015af2:	4a06      	ldr	r2, [pc, #24]	@ (8015b0c <generate_comand_topik_for_subscrabe+0x2c>)
 8015af4:	f016 fd8a 	bl	802c60c <snprintf>
			break;
	}
}
 8015af8:	b005      	add	sp, #20
 8015afa:	f85d fb04 	ldr.w	pc, [sp], #4
 8015afe:	bf00      	nop
 8015b00:	08038498 	.word	0x08038498
 8015b04:	2000292c 	.word	0x2000292c
 8015b08:	08036e80 	.word	0x08036e80
 8015b0c:	080388c0 	.word	0x080388c0

08015b10 <generate_status_topik>:

int generate_status_topik(char * topik, const uint32_t topik_len, const mqtt_sensor_type_t sensor_type, const uint8_t sensor_number){
 8015b10:	b500      	push	{lr}
 8015b12:	b085      	sub	sp, #20

	strcpy(topik, "\0");
 8015b14:	f04f 0c00 	mov.w	ip, #0
 8015b18:	f880 c000 	strb.w	ip, [r0]

	switch (sensor_type) {
 8015b1c:	2a01      	cmp	r2, #1
 8015b1e:	d006      	beq.n	8015b2e <generate_status_topik+0x1e>
 8015b20:	2a02      	cmp	r2, #2
 8015b22:	d00f      	beq.n	8015b44 <generate_status_topik+0x34>
 8015b24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
			return -1;
			break;
	}

	return 0;
}
 8015b28:	b005      	add	sp, #20
 8015b2a:	f85d fb04 	ldr.w	pc, [sp], #4
			return snprintf(topik, topik_len, universal_status_topik_template, dev_system, unical_id, component_input, sensor_number);
 8015b2e:	9302      	str	r3, [sp, #8]
 8015b30:	4b0a      	ldr	r3, [pc, #40]	@ (8015b5c <generate_status_topik+0x4c>)
 8015b32:	9301      	str	r3, [sp, #4]
 8015b34:	4b0a      	ldr	r3, [pc, #40]	@ (8015b60 <generate_status_topik+0x50>)
 8015b36:	681b      	ldr	r3, [r3, #0]
 8015b38:	9300      	str	r3, [sp, #0]
 8015b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8015b64 <generate_status_topik+0x54>)
 8015b3c:	4a0a      	ldr	r2, [pc, #40]	@ (8015b68 <generate_status_topik+0x58>)
 8015b3e:	f016 fd65 	bl	802c60c <snprintf>
 8015b42:	e7f1      	b.n	8015b28 <generate_status_topik+0x18>
			return snprintf(topik, topik_len, universal_status_topik_template, dev_system, unical_id, dev_class_switch, sensor_number);
 8015b44:	9302      	str	r3, [sp, #8]
 8015b46:	4b09      	ldr	r3, [pc, #36]	@ (8015b6c <generate_status_topik+0x5c>)
 8015b48:	9301      	str	r3, [sp, #4]
 8015b4a:	4b05      	ldr	r3, [pc, #20]	@ (8015b60 <generate_status_topik+0x50>)
 8015b4c:	681b      	ldr	r3, [r3, #0]
 8015b4e:	9300      	str	r3, [sp, #0]
 8015b50:	4b04      	ldr	r3, [pc, #16]	@ (8015b64 <generate_status_topik+0x54>)
 8015b52:	4a05      	ldr	r2, [pc, #20]	@ (8015b68 <generate_status_topik+0x58>)
 8015b54:	f016 fd5a 	bl	802c60c <snprintf>
 8015b58:	e7e6      	b.n	8015b28 <generate_status_topik+0x18>
 8015b5a:	bf00      	nop
 8015b5c:	08038740 	.word	0x08038740
 8015b60:	2000292c 	.word	0x2000292c
 8015b64:	08036e80 	.word	0x08036e80
 8015b68:	080388d0 	.word	0x080388d0
 8015b6c:	08038498 	.word	0x08038498

08015b70 <timer_fn>:
  }
  (void) c;
}


void timer_fn(void *arg) {
 8015b70:	b508      	push	{r3, lr}
  struct mg_mgr *mgr = (struct mg_mgr *) arg;
  if (s_sntp_conn == NULL) s_sntp_conn = mg_sntp_connect(mgr, NULL, sfn, NULL);
 8015b72:	4b08      	ldr	r3, [pc, #32]	@ (8015b94 <timer_fn+0x24>)
 8015b74:	681b      	ldr	r3, [r3, #0]
 8015b76:	b12b      	cbz	r3, 8015b84 <timer_fn+0x14>
  if (s_sntp_conn != NULL) mg_sntp_request(s_sntp_conn);
 8015b78:	4b06      	ldr	r3, [pc, #24]	@ (8015b94 <timer_fn+0x24>)
 8015b7a:	6818      	ldr	r0, [r3, #0]
 8015b7c:	b108      	cbz	r0, 8015b82 <timer_fn+0x12>
 8015b7e:	f014 fb83 	bl	802a288 <mg_sntp_request>
}
 8015b82:	bd08      	pop	{r3, pc}
  if (s_sntp_conn == NULL) s_sntp_conn = mg_sntp_connect(mgr, NULL, sfn, NULL);
 8015b84:	4a04      	ldr	r2, [pc, #16]	@ (8015b98 <timer_fn+0x28>)
 8015b86:	4619      	mov	r1, r3
 8015b88:	f014 fc50 	bl	802a42c <mg_sntp_connect>
 8015b8c:	4b01      	ldr	r3, [pc, #4]	@ (8015b94 <timer_fn+0x24>)
 8015b8e:	6018      	str	r0, [r3, #0]
 8015b90:	e7f2      	b.n	8015b78 <timer_fn+0x8>
 8015b92:	bf00      	nop
 8015b94:	20002930 	.word	0x20002930
 8015b98:	08015b9d 	.word	0x08015b9d

08015b9c <sfn>:
static void sfn(struct mg_connection *c, int ev, void *ev_data) {
 8015b9c:	b570      	push	{r4, r5, r6, lr}
  if (ev == MG_EV_SNTP_TIME) {
 8015b9e:	2912      	cmp	r1, #18
 8015ba0:	d002      	beq.n	8015ba8 <sfn+0xc>
  } else if (ev == MG_EV_CLOSE) {
 8015ba2:	2909      	cmp	r1, #9
 8015ba4:	d046      	beq.n	8015c34 <sfn+0x98>
}
 8015ba6:	bd70      	pop	{r4, r5, r6, pc}
 8015ba8:	4614      	mov	r4, r2
	  logging(L_INFO, "Response from NTP server received");
 8015baa:	4926      	ldr	r1, [pc, #152]	@ (8015c44 <sfn+0xa8>)
 8015bac:	2001      	movs	r0, #1
 8015bae:	f7fc fafb 	bl	80121a8 <logging>
    uint64_t curtime = mg_now();
 8015bb2:	f014 faa5 	bl	802a100 <mg_now>
 8015bb6:	4606      	mov	r6, r0
 8015bb8:	460d      	mov	r5, r1
    MG_INFO(("SNTP-updated current time is: %llu ms from epoch", curtime));
 8015bba:	4b23      	ldr	r3, [pc, #140]	@ (8015c48 <sfn+0xac>)
 8015bbc:	681b      	ldr	r3, [r3, #0]
 8015bbe:	2b01      	cmp	r3, #1
 8015bc0:	dc20      	bgt.n	8015c04 <sfn+0x68>
    logging(L_INFO,"SNTP-updated current time is: %" PRIu64 " ms from epoch", curtime);
 8015bc2:	4632      	mov	r2, r6
 8015bc4:	462b      	mov	r3, r5
 8015bc6:	4921      	ldr	r1, [pc, #132]	@ (8015c4c <sfn+0xb0>)
 8015bc8:	2001      	movs	r0, #1
 8015bca:	f7fc faed 	bl	80121a8 <logging>
      uint64_t t = *(uint64_t *) ev_data;
 8015bce:	6825      	ldr	r5, [r4, #0]
 8015bd0:	6864      	ldr	r4, [r4, #4]
      s_boot_timestamp = (time_t) ((t - mg_millis()) / 1000);
 8015bd2:	f010 fe43 	bl	802685c <mg_millis>
 8015bd6:	1a28      	subs	r0, r5, r0
 8015bd8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015bdc:	f04f 0300 	mov.w	r3, #0
 8015be0:	eb64 0101 	sbc.w	r1, r4, r1
 8015be4:	f7fb f8b8 	bl	8010d58 <__aeabi_uldivmod>
 8015be8:	4b19      	ldr	r3, [pc, #100]	@ (8015c50 <sfn+0xb4>)
 8015bea:	e9c3 0100 	strd	r0, r1, [r3]
      MG_INFO(("Got SNTP time: %llu ms from epoch, ", t));
 8015bee:	4b16      	ldr	r3, [pc, #88]	@ (8015c48 <sfn+0xac>)
 8015bf0:	681b      	ldr	r3, [r3, #0]
 8015bf2:	2b01      	cmp	r3, #1
 8015bf4:	dc12      	bgt.n	8015c1c <sfn+0x80>
      logging(L_INFO,"Got SNTP time: %" PRIu64 " ms from epoch", t);
 8015bf6:	462a      	mov	r2, r5
 8015bf8:	4623      	mov	r3, r4
 8015bfa:	4916      	ldr	r1, [pc, #88]	@ (8015c54 <sfn+0xb8>)
 8015bfc:	2001      	movs	r0, #1
 8015bfe:	f7fc fad3 	bl	80121a8 <logging>
 8015c02:	e7d0      	b.n	8015ba6 <sfn+0xa>
    MG_INFO(("SNTP-updated current time is: %llu ms from epoch", curtime));
 8015c04:	4b14      	ldr	r3, [pc, #80]	@ (8015c58 <sfn+0xbc>)
 8015c06:	221b      	movs	r2, #27
 8015c08:	4914      	ldr	r1, [pc, #80]	@ (8015c5c <sfn+0xc0>)
 8015c0a:	2002      	movs	r0, #2
 8015c0c:	f010 fe2c 	bl	8026868 <mg_log_prefix>
 8015c10:	4632      	mov	r2, r6
 8015c12:	462b      	mov	r3, r5
 8015c14:	480d      	ldr	r0, [pc, #52]	@ (8015c4c <sfn+0xb0>)
 8015c16:	f00e fcd5 	bl	80245c4 <mg_log>
 8015c1a:	e7d2      	b.n	8015bc2 <sfn+0x26>
      MG_INFO(("Got SNTP time: %llu ms from epoch, ", t));
 8015c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8015c58 <sfn+0xbc>)
 8015c1e:	2221      	movs	r2, #33	@ 0x21
 8015c20:	490e      	ldr	r1, [pc, #56]	@ (8015c5c <sfn+0xc0>)
 8015c22:	2002      	movs	r0, #2
 8015c24:	f010 fe20 	bl	8026868 <mg_log_prefix>
 8015c28:	462a      	mov	r2, r5
 8015c2a:	4623      	mov	r3, r4
 8015c2c:	480c      	ldr	r0, [pc, #48]	@ (8015c60 <sfn+0xc4>)
 8015c2e:	f00e fcc9 	bl	80245c4 <mg_log>
 8015c32:	e7e0      	b.n	8015bf6 <sfn+0x5a>
	  logging(L_INFO, "NTP connection is closed");
 8015c34:	490b      	ldr	r1, [pc, #44]	@ (8015c64 <sfn+0xc8>)
 8015c36:	2001      	movs	r0, #1
 8015c38:	f7fc fab6 	bl	80121a8 <logging>
    s_sntp_conn = NULL;
 8015c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8015c68 <sfn+0xcc>)
 8015c3e:	2200      	movs	r2, #0
 8015c40:	601a      	str	r2, [r3, #0]
}
 8015c42:	e7b0      	b.n	8015ba6 <sfn+0xa>
 8015c44:	08038a9c 	.word	0x08038a9c
 8015c48:	2000012c 	.word	0x2000012c
 8015c4c:	08038ae0 	.word	0x08038ae0
 8015c50:	20002938 	.word	0x20002938
 8015c54:	08038b38 	.word	0x08038b38
 8015c58:	08038b94 	.word	0x08038b94
 8015c5c:	08038ac0 	.word	0x08038ac0
 8015c60:	08038b14 	.word	0x08038b14
 8015c64:	08038b5c 	.word	0x08038b5c
 8015c68:	20002930 	.word	0x20002930

08015c6c <start_sntp>:

void start_sntp(void *arg){
 8015c6c:	b530      	push	{r4, r5, lr}
 8015c6e:	b085      	sub	sp, #20
 8015c70:	4604      	mov	r4, r0
	logging(L_INFO, "starting NTP client service");
 8015c72:	490d      	ldr	r1, [pc, #52]	@ (8015ca8 <start_sntp+0x3c>)
 8015c74:	2001      	movs	r0, #1
 8015c76:	f7fc fa97 	bl	80121a8 <logging>
	struct mg_mgr *mgr = (struct mg_mgr*)arg;

	mg_timer_add(mgr, 20000,  MG_TIMER_ONCE, timer_fn, mgr); //Run once with delay 20 seconds
 8015c7a:	9402      	str	r4, [sp, #8]
 8015c7c:	4d0b      	ldr	r5, [pc, #44]	@ (8015cac <start_sntp+0x40>)
 8015c7e:	9501      	str	r5, [sp, #4]
 8015c80:	2300      	movs	r3, #0
 8015c82:	9300      	str	r3, [sp, #0]
 8015c84:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8015c88:	2300      	movs	r3, #0
 8015c8a:	4620      	mov	r0, r4
 8015c8c:	f010 f85a 	bl	8025d44 <mg_timer_add>
	mg_timer_add(mgr, 1080000, MG_TIMER_REPEAT, timer_fn, mgr); //Repeat every 30 minutes 1080 seconds
 8015c90:	9402      	str	r4, [sp, #8]
 8015c92:	9501      	str	r5, [sp, #4]
 8015c94:	2301      	movs	r3, #1
 8015c96:	9300      	str	r3, [sp, #0]
 8015c98:	4a05      	ldr	r2, [pc, #20]	@ (8015cb0 <start_sntp+0x44>)
 8015c9a:	2300      	movs	r3, #0
 8015c9c:	4620      	mov	r0, r4
 8015c9e:	f010 f851 	bl	8025d44 <mg_timer_add>

}
 8015ca2:	b005      	add	sp, #20
 8015ca4:	bd30      	pop	{r4, r5, pc}
 8015ca6:	bf00      	nop
 8015ca8:	08038b78 	.word	0x08038b78
 8015cac:	08015b71 	.word	0x08015b71
 8015cb0:	00107ac0 	.word	0x00107ac0

08015cb4 <my_calloc>:
static inline void *my_calloc(size_t cnt, size_t size) {
 8015cb4:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8015cb6:	fb01 f400 	mul.w	r4, r1, r0
 8015cba:	4620      	mov	r0, r4
 8015cbc:	f005 f984 	bl	801afc8 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8015cc0:	4605      	mov	r5, r0
 8015cc2:	b118      	cbz	r0, 8015ccc <my_calloc+0x18>
 8015cc4:	4622      	mov	r2, r4
 8015cc6:	2100      	movs	r1, #0
 8015cc8:	f017 f9ca 	bl	802d060 <memset>
}
 8015ccc:	4628      	mov	r0, r5
 8015cce:	bd38      	pop	{r3, r4, r5, pc}

08015cd0 <dev_description_handler>:
		}
	}
}


static void dev_description_handler(struct mg_connection *c, struct mg_http_message *hm){
 8015cd0:	b570      	push	{r4, r5, r6, lr}
 8015cd2:	b088      	sub	sp, #32
 8015cd4:	4605      	mov	r5, r0
 8015cd6:	460c      	mov	r4, r1
	logging(L_DEBUG, "Call dev_description_handler");
 8015cd8:	4917      	ldr	r1, [pc, #92]	@ (8015d38 <dev_description_handler+0x68>)
 8015cda:	2000      	movs	r0, #0
 8015cdc:	f7fc fa64 	bl	80121a8 <logging>
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8015ce0:	ae06      	add	r6, sp, #24
 8015ce2:	4916      	ldr	r1, [pc, #88]	@ (8015d3c <dev_description_handler+0x6c>)
 8015ce4:	4630      	mov	r0, r6
 8015ce6:	f00e fe4b 	bl	8024980 <mg_str_s>
 8015cea:	2300      	movs	r3, #0
 8015cec:	9300      	str	r3, [sp, #0]
 8015cee:	e896 000c 	ldmia.w	r6, {r2, r3}
 8015cf2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8015cf6:	f00f f865 	bl	8024dc4 <mg_match>
 8015cfa:	b1a8      	cbz	r0, 8015d28 <dev_description_handler+0x58>
		mg_http_reply(c, 200, "", device_description, ssdp_dev_name, ssdp_dev_manufacturer_name, ssdp_dev_model_name, ssdp_dev_ver, dev_id, ip_addr_str);
 8015cfc:	4b10      	ldr	r3, [pc, #64]	@ (8015d40 <dev_description_handler+0x70>)
 8015cfe:	681b      	ldr	r3, [r3, #0]
 8015d00:	9305      	str	r3, [sp, #20]
 8015d02:	4b10      	ldr	r3, [pc, #64]	@ (8015d44 <dev_description_handler+0x74>)
 8015d04:	681b      	ldr	r3, [r3, #0]
 8015d06:	9304      	str	r3, [sp, #16]
 8015d08:	4b0f      	ldr	r3, [pc, #60]	@ (8015d48 <dev_description_handler+0x78>)
 8015d0a:	9303      	str	r3, [sp, #12]
 8015d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8015d4c <dev_description_handler+0x7c>)
 8015d0e:	9302      	str	r3, [sp, #8]
 8015d10:	4b0f      	ldr	r3, [pc, #60]	@ (8015d50 <dev_description_handler+0x80>)
 8015d12:	9301      	str	r3, [sp, #4]
 8015d14:	4b0f      	ldr	r3, [pc, #60]	@ (8015d54 <dev_description_handler+0x84>)
 8015d16:	9300      	str	r3, [sp, #0]
 8015d18:	4b0f      	ldr	r3, [pc, #60]	@ (8015d58 <dev_description_handler+0x88>)
 8015d1a:	4a10      	ldr	r2, [pc, #64]	@ (8015d5c <dev_description_handler+0x8c>)
 8015d1c:	21c8      	movs	r1, #200	@ 0xc8
 8015d1e:	4628      	mov	r0, r5
 8015d20:	f00e fca4 	bl	802466c <mg_http_reply>
	}else{
		mg_http_reply(c, 400, "", //TODO delete for release,
								"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET and POST methods\"}\r\n");
	}

}
 8015d24:	b008      	add	sp, #32
 8015d26:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 400, "", //TODO delete for release,
 8015d28:	4b0d      	ldr	r3, [pc, #52]	@ (8015d60 <dev_description_handler+0x90>)
 8015d2a:	4a0c      	ldr	r2, [pc, #48]	@ (8015d5c <dev_description_handler+0x8c>)
 8015d2c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8015d30:	4628      	mov	r0, r5
 8015d32:	f00e fc9b 	bl	802466c <mg_http_reply>
}
 8015d36:	e7f5      	b.n	8015d24 <dev_description_handler+0x54>
 8015d38:	08038b98 	.word	0x08038b98
 8015d3c:	08036cf4 	.word	0x08036cf4
 8015d40:	2000294c 	.word	0x2000294c
 8015d44:	20002954 	.word	0x20002954
 8015d48:	080368f4 	.word	0x080368f4
 8015d4c:	08036e60 	.word	0x08036e60
 8015d50:	080387b4 	.word	0x080387b4
 8015d54:	08036e74 	.word	0x08036e74
 8015d58:	08038ea0 	.word	0x08038ea0
 8015d5c:	080373ac 	.word	0x080373ac
 8015d60:	08037a40 	.word	0x08037a40

08015d64 <dev_404_handler>:


static void dev_404_handler(struct mg_connection *c, struct mg_http_message *hm){
 8015d64:	b510      	push	{r4, lr}
 8015d66:	4604      	mov	r4, r0
	logging(L_DEBUG, "Call  dev_404_handler");
 8015d68:	4905      	ldr	r1, [pc, #20]	@ (8015d80 <dev_404_handler+0x1c>)
 8015d6a:	2000      	movs	r0, #0
 8015d6c:	f7fc fa1c 	bl	80121a8 <logging>
	mg_http_reply(c, 404, "", //TODO delete for release,
 8015d70:	4b04      	ldr	r3, [pc, #16]	@ (8015d84 <dev_404_handler+0x20>)
 8015d72:	4a05      	ldr	r2, [pc, #20]	@ (8015d88 <dev_404_handler+0x24>)
 8015d74:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8015d78:	4620      	mov	r0, r4
 8015d7a:	f00e fc77 	bl	802466c <mg_http_reply>
							"{\"status\":\"error\",\"message\":\"Not found\"}\r\n");

}
 8015d7e:	bd10      	pop	{r4, pc}
 8015d80:	08038bb8 	.word	0x08038bb8
 8015d84:	08038bd0 	.word	0x08038bd0
 8015d88:	080373ac 	.word	0x080373ac

08015d8c <ssdp_web_handler>:

static void ssdp_web_handler(struct mg_connection *c, int ev, void *ev_data){

	if (ev == MG_EV_HTTP_MSG) {
 8015d8c:	290b      	cmp	r1, #11
 8015d8e:	d000      	beq.n	8015d92 <ssdp_web_handler+0x6>
 8015d90:	4770      	bx	lr
static void ssdp_web_handler(struct mg_connection *c, int ev, void *ev_data){
 8015d92:	b570      	push	{r4, r5, r6, lr}
 8015d94:	b086      	sub	sp, #24
 8015d96:	4605      	mov	r5, r0
 8015d98:	4614      	mov	r4, r2
		logging(L_DEBUG, "Call ssdp_web_handler MG_EV_HTTP_MSG");
 8015d9a:	4917      	ldr	r1, [pc, #92]	@ (8015df8 <ssdp_web_handler+0x6c>)
 8015d9c:	2000      	movs	r0, #0
 8015d9e:	f7fc fa03 	bl	80121a8 <logging>
		struct mg_http_message *hm = (struct mg_http_message *) ev_data;

		if (mg_match(hm->uri, mg_str("/device_description.xml"), NULL)) {
 8015da2:	ae02      	add	r6, sp, #8
 8015da4:	4915      	ldr	r1, [pc, #84]	@ (8015dfc <ssdp_web_handler+0x70>)
 8015da6:	4630      	mov	r0, r6
 8015da8:	f00e fdea 	bl	8024980 <mg_str_s>
 8015dac:	2300      	movs	r3, #0
 8015dae:	9300      	str	r3, [sp, #0]
 8015db0:	e896 000c 	ldmia.w	r6, {r2, r3}
 8015db4:	f104 0108 	add.w	r1, r4, #8
 8015db8:	c903      	ldmia	r1, {r0, r1}
 8015dba:	f00f f803 	bl	8024dc4 <mg_match>
 8015dbe:	b128      	cbz	r0, 8015dcc <ssdp_web_handler+0x40>
			dev_description_handler(c, hm);
 8015dc0:	4621      	mov	r1, r4
 8015dc2:	4628      	mov	r0, r5
 8015dc4:	f7ff ff84 	bl	8015cd0 <dev_description_handler>
		}else if (mg_match(hm->uri, mg_str("/*"), NULL)) {
			dev_404_handler(c, hm);
		}
	}
}
 8015dc8:	b006      	add	sp, #24
 8015dca:	bd70      	pop	{r4, r5, r6, pc}
		}else if (mg_match(hm->uri, mg_str("/*"), NULL)) {
 8015dcc:	ae04      	add	r6, sp, #16
 8015dce:	490c      	ldr	r1, [pc, #48]	@ (8015e00 <ssdp_web_handler+0x74>)
 8015dd0:	4630      	mov	r0, r6
 8015dd2:	f00e fdd5 	bl	8024980 <mg_str_s>
 8015dd6:	2300      	movs	r3, #0
 8015dd8:	9300      	str	r3, [sp, #0]
 8015dda:	e896 000c 	ldmia.w	r6, {r2, r3}
 8015dde:	f104 0108 	add.w	r1, r4, #8
 8015de2:	c903      	ldmia	r1, {r0, r1}
 8015de4:	f00e ffee 	bl	8024dc4 <mg_match>
 8015de8:	2800      	cmp	r0, #0
 8015dea:	d0ed      	beq.n	8015dc8 <ssdp_web_handler+0x3c>
			dev_404_handler(c, hm);
 8015dec:	4621      	mov	r1, r4
 8015dee:	4628      	mov	r0, r5
 8015df0:	f7ff ffb8 	bl	8015d64 <dev_404_handler>
}
 8015df4:	e7e8      	b.n	8015dc8 <ssdp_web_handler+0x3c>
 8015df6:	bf00      	nop
 8015df8:	08038bfc 	.word	0x08038bfc
 8015dfc:	08038c24 	.word	0x08038c24
 8015e00:	08038c3c 	.word	0x08038c3c

08015e04 <ip_to_string>:
void ip_to_string(uint32_t ip, char *buffer) {
 8015e04:	b510      	push	{r4, lr}
 8015e06:	b084      	sub	sp, #16
 8015e08:	4602      	mov	r2, r0
 8015e0a:	4608      	mov	r0, r1
    bytes[3] = (ip >> 24) & 0xFF; // Старший байт
 8015e0c:	0e14      	lsrs	r4, r2, #24
 8015e0e:	f88d 400f 	strb.w	r4, [sp, #15]
    bytes[2] = (ip >> 16) & 0xFF;
 8015e12:	0c11      	lsrs	r1, r2, #16
 8015e14:	f88d 100e 	strb.w	r1, [sp, #14]
    bytes[1] = (ip >> 8) & 0xFF;
 8015e18:	0a13      	lsrs	r3, r2, #8
 8015e1a:	f88d 300d 	strb.w	r3, [sp, #13]
    bytes[0] = ip & 0xFF;         // Младший байт
 8015e1e:	f88d 200c 	strb.w	r2, [sp, #12]
    sprintf(buffer, "%u.%u.%u.%u", bytes[0], bytes[1], bytes[2], bytes[3]);
 8015e22:	9401      	str	r4, [sp, #4]
 8015e24:	b2c9      	uxtb	r1, r1
 8015e26:	9100      	str	r1, [sp, #0]
 8015e28:	b2db      	uxtb	r3, r3
 8015e2a:	b2d2      	uxtb	r2, r2
 8015e2c:	4902      	ldr	r1, [pc, #8]	@ (8015e38 <ip_to_string+0x34>)
 8015e2e:	f016 fd55 	bl	802c8dc <sprintf>
}
 8015e32:	b004      	add	sp, #16
 8015e34:	bd10      	pop	{r4, pc}
 8015e36:	bf00      	nop
 8015e38:	08038c40 	.word	0x08038c40

08015e3c <send_ssdp_notify>:
static void send_ssdp_notify(void *param){
 8015e3c:	b570      	push	{r4, r5, r6, lr}
 8015e3e:	b084      	sub	sp, #16
 8015e40:	4606      	mov	r6, r0
	logging(L_DEBUG, "Call send_ssdp_notify");
 8015e42:	491e      	ldr	r1, [pc, #120]	@ (8015ebc <send_ssdp_notify+0x80>)
 8015e44:	2000      	movs	r0, #0
 8015e46:	f7fc f9af 	bl	80121a8 <logging>
	size_t buff_len = (strlen(ssdp_notify_template) + strlen(MG_VERSION) + IP_v6_STR_LEN  + strlen(ssdp_web_port) + strlen(dev_id)+ 20); //20 just for spirit healthy, in rel +1 for \0 is needed
 8015e4a:	4b1d      	ldr	r3, [pc, #116]	@ (8015ec0 <send_ssdp_notify+0x84>)
 8015e4c:	6818      	ldr	r0, [r3, #0]
 8015e4e:	f7fa fa27 	bl	80102a0 <strlen>
 8015e52:	4604      	mov	r4, r0
	buff = calloc(buff_len, sizeof(char));
 8015e54:	2101      	movs	r1, #1
 8015e56:	f200 1039 	addw	r0, r0, #313	@ 0x139
 8015e5a:	f7ff ff2b 	bl	8015cb4 <my_calloc>
 8015e5e:	4a19      	ldr	r2, [pc, #100]	@ (8015ec4 <send_ssdp_notify+0x88>)
 8015e60:	6010      	str	r0, [r2, #0]
	if (!buff) {
 8015e62:	b330      	cbz	r0, 8015eb2 <send_ssdp_notify+0x76>
	ip_to_string(mif->ip, ip_addr_str);
 8015e64:	4b18      	ldr	r3, [pc, #96]	@ (8015ec8 <send_ssdp_notify+0x8c>)
 8015e66:	681b      	ldr	r3, [r3, #0]
 8015e68:	4d18      	ldr	r5, [pc, #96]	@ (8015ecc <send_ssdp_notify+0x90>)
 8015e6a:	6829      	ldr	r1, [r5, #0]
 8015e6c:	6898      	ldr	r0, [r3, #8]
 8015e6e:	f7ff ffc9 	bl	8015e04 <ip_to_string>
	snprintf(buff, buff_len-1, ssdp_notify_template, MG_VERSION, ip_addr_str, ssdp_web_port, dev_id);
 8015e72:	4b13      	ldr	r3, [pc, #76]	@ (8015ec0 <send_ssdp_notify+0x84>)
 8015e74:	681b      	ldr	r3, [r3, #0]
 8015e76:	9302      	str	r3, [sp, #8]
 8015e78:	4b15      	ldr	r3, [pc, #84]	@ (8015ed0 <send_ssdp_notify+0x94>)
 8015e7a:	9301      	str	r3, [sp, #4]
 8015e7c:	682b      	ldr	r3, [r5, #0]
 8015e7e:	9300      	str	r3, [sp, #0]
 8015e80:	4b14      	ldr	r3, [pc, #80]	@ (8015ed4 <send_ssdp_notify+0x98>)
 8015e82:	4a15      	ldr	r2, [pc, #84]	@ (8015ed8 <send_ssdp_notify+0x9c>)
 8015e84:	f504 719c 	add.w	r1, r4, #312	@ 0x138
 8015e88:	480e      	ldr	r0, [pc, #56]	@ (8015ec4 <send_ssdp_notify+0x88>)
 8015e8a:	6800      	ldr	r0, [r0, #0]
 8015e8c:	f016 fbbe 	bl	802c60c <snprintf>
    if (udp_conn != NULL) {
 8015e90:	b14e      	cbz	r6, 8015ea6 <send_ssdp_notify+0x6a>
        mg_send(udp_conn, buff, strlen(buff));
 8015e92:	4b0c      	ldr	r3, [pc, #48]	@ (8015ec4 <send_ssdp_notify+0x88>)
 8015e94:	681c      	ldr	r4, [r3, #0]
 8015e96:	4620      	mov	r0, r4
 8015e98:	f7fa fa02 	bl	80102a0 <strlen>
 8015e9c:	4602      	mov	r2, r0
 8015e9e:	4621      	mov	r1, r4
 8015ea0:	4630      	mov	r0, r6
 8015ea2:	f011 fd95 	bl	80279d0 <mg_send>
    free(buff);
 8015ea6:	4b07      	ldr	r3, [pc, #28]	@ (8015ec4 <send_ssdp_notify+0x88>)
 8015ea8:	6818      	ldr	r0, [r3, #0]
 8015eaa:	f005 f90f 	bl	801b0cc <vPortFree>
}
 8015eae:	b004      	add	sp, #16
 8015eb0:	bd70      	pop	{r4, r5, r6, pc}
		logging(L_ERR, "Error allocating memory for send SSDP Message");
 8015eb2:	490a      	ldr	r1, [pc, #40]	@ (8015edc <send_ssdp_notify+0xa0>)
 8015eb4:	2003      	movs	r0, #3
 8015eb6:	f7fc f977 	bl	80121a8 <logging>
		return; //TODO add log
 8015eba:	e7f8      	b.n	8015eae <send_ssdp_notify+0x72>
 8015ebc:	08038c4c 	.word	0x08038c4c
 8015ec0:	20002954 	.word	0x20002954
 8015ec4:	20002950 	.word	0x20002950
 8015ec8:	20002944 	.word	0x20002944
 8015ecc:	2000294c 	.word	0x2000294c
 8015ed0:	08038c9c 	.word	0x08038c9c
 8015ed4:	08038c94 	.word	0x08038c94
 8015ed8:	08038da8 	.word	0x08038da8
 8015edc:	08038c64 	.word	0x08038c64

08015ee0 <ssdp_listener_handler>:
}

static void ssdp_listener_handler(struct mg_connection *c, int ev, void *ev_data){
	//char *buffer = NULL;

	if (ev == MG_EV_READ) {
 8015ee0:	2907      	cmp	r1, #7
 8015ee2:	d000      	beq.n	8015ee6 <ssdp_listener_handler+0x6>
 8015ee4:	4770      	bx	lr
static void ssdp_listener_handler(struct mg_connection *c, int ev, void *ev_data){
 8015ee6:	b570      	push	{r4, r5, r6, lr}
 8015ee8:	b088      	sub	sp, #32
 8015eea:	4604      	mov	r4, r0
		logging(L_DEBUG, "Call ssdp_listener_handler if (ev == MG_EV_READ)");
 8015eec:	491a      	ldr	r1, [pc, #104]	@ (8015f58 <ssdp_listener_handler+0x78>)
 8015eee:	2000      	movs	r0, #0
 8015ef0:	f7fc f95a 	bl	80121a8 <logging>
		struct mg_str msg = mg_str_n((char *) udp_listen_conn->recv.buf, udp_listen_conn->recv.len);
 8015ef4:	4b19      	ldr	r3, [pc, #100]	@ (8015f5c <ssdp_listener_handler+0x7c>)
 8015ef6:	681b      	ldr	r3, [r3, #0]
 8015ef8:	ad02      	add	r5, sp, #8
 8015efa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015efc:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8015efe:	4628      	mov	r0, r5
 8015f00:	f00e fd4a 	bl	8024998 <mg_str_n>
		if (mg_match(msg, mg_str("M-SEARCH#"), NULL) && mg_match(msg, mg_str("#ssdp:discover#"), NULL)) {
 8015f04:	ae04      	add	r6, sp, #16
 8015f06:	4916      	ldr	r1, [pc, #88]	@ (8015f60 <ssdp_listener_handler+0x80>)
 8015f08:	4630      	mov	r0, r6
 8015f0a:	f00e fd39 	bl	8024980 <mg_str_s>
 8015f0e:	2300      	movs	r3, #0
 8015f10:	9300      	str	r3, [sp, #0]
 8015f12:	e896 000c 	ldmia.w	r6, {r2, r3}
 8015f16:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015f1a:	f00e ff53 	bl	8024dc4 <mg_match>
 8015f1e:	b918      	cbnz	r0, 8015f28 <ssdp_listener_handler+0x48>
			logging(L_DEBUG, "SSDP response on M-SEARCH ssdp:discover request");
			send_ssdp_notify(udp_listen_conn);
		}
		c->recv.len = 0;
 8015f20:	2300      	movs	r3, #0
 8015f22:	6423      	str	r3, [r4, #64]	@ 0x40
	}
}
 8015f24:	b008      	add	sp, #32
 8015f26:	bd70      	pop	{r4, r5, r6, pc}
		if (mg_match(msg, mg_str("M-SEARCH#"), NULL) && mg_match(msg, mg_str("#ssdp:discover#"), NULL)) {
 8015f28:	ad06      	add	r5, sp, #24
 8015f2a:	490e      	ldr	r1, [pc, #56]	@ (8015f64 <ssdp_listener_handler+0x84>)
 8015f2c:	4628      	mov	r0, r5
 8015f2e:	f00e fd27 	bl	8024980 <mg_str_s>
 8015f32:	2300      	movs	r3, #0
 8015f34:	9300      	str	r3, [sp, #0]
 8015f36:	e895 000c 	ldmia.w	r5, {r2, r3}
 8015f3a:	a902      	add	r1, sp, #8
 8015f3c:	c903      	ldmia	r1, {r0, r1}
 8015f3e:	f00e ff41 	bl	8024dc4 <mg_match>
 8015f42:	2800      	cmp	r0, #0
 8015f44:	d0ec      	beq.n	8015f20 <ssdp_listener_handler+0x40>
			logging(L_DEBUG, "SSDP response on M-SEARCH ssdp:discover request");
 8015f46:	4908      	ldr	r1, [pc, #32]	@ (8015f68 <ssdp_listener_handler+0x88>)
 8015f48:	2000      	movs	r0, #0
 8015f4a:	f7fc f92d 	bl	80121a8 <logging>
			send_ssdp_notify(udp_listen_conn);
 8015f4e:	4b03      	ldr	r3, [pc, #12]	@ (8015f5c <ssdp_listener_handler+0x7c>)
 8015f50:	6818      	ldr	r0, [r3, #0]
 8015f52:	f7ff ff73 	bl	8015e3c <send_ssdp_notify>
 8015f56:	e7e3      	b.n	8015f20 <ssdp_listener_handler+0x40>
 8015f58:	08038ca4 	.word	0x08038ca4
 8015f5c:	20002940 	.word	0x20002940
 8015f60:	08038cd8 	.word	0x08038cd8
 8015f64:	08038ce4 	.word	0x08038ce4
 8015f68:	08038cf4 	.word	0x08038cf4

08015f6c <ssdp_timer_handler>:
static void ssdp_timer_handler(void *param){
 8015f6c:	b510      	push	{r4, lr}
	logging(L_DEBUG, "Call ssdp_timer_handler");
 8015f6e:	490c      	ldr	r1, [pc, #48]	@ (8015fa0 <ssdp_timer_handler+0x34>)
 8015f70:	2000      	movs	r0, #0
 8015f72:	f7fc f919 	bl	80121a8 <logging>
	struct mg_connection *conn = mg_connect(mgr, ssdp_addr, NULL, NULL);
 8015f76:	2300      	movs	r3, #0
 8015f78:	461a      	mov	r2, r3
 8015f7a:	490a      	ldr	r1, [pc, #40]	@ (8015fa4 <ssdp_timer_handler+0x38>)
 8015f7c:	480a      	ldr	r0, [pc, #40]	@ (8015fa8 <ssdp_timer_handler+0x3c>)
 8015f7e:	6800      	ldr	r0, [r0, #0]
 8015f80:	f013 f9fa 	bl	8029378 <mg_connect>
	if (conn == NULL){
 8015f84:	b130      	cbz	r0, 8015f94 <ssdp_timer_handler+0x28>
 8015f86:	4604      	mov	r4, r0
	send_ssdp_notify(conn);
 8015f88:	f7ff ff58 	bl	8015e3c <send_ssdp_notify>
	mg_close_conn(conn);
 8015f8c:	4620      	mov	r0, r4
 8015f8e:	f011 fbdd 	bl	802774c <mg_close_conn>
}
 8015f92:	bd10      	pop	{r4, pc}
		logging(L_ERR, "Call ssdp_timer_handler error open conn");
 8015f94:	4905      	ldr	r1, [pc, #20]	@ (8015fac <ssdp_timer_handler+0x40>)
 8015f96:	2003      	movs	r0, #3
 8015f98:	f7fc f906 	bl	80121a8 <logging>
		return ;
 8015f9c:	e7f9      	b.n	8015f92 <ssdp_timer_handler+0x26>
 8015f9e:	bf00      	nop
 8015fa0:	08038d24 	.word	0x08038d24
 8015fa4:	08039044 	.word	0x08039044
 8015fa8:	20002948 	.word	0x20002948
 8015fac:	08038d3c 	.word	0x08038d3c

08015fb0 <ssdp_set_id>:
void ssdp_set_id(const uint8_t* id, uint8_t id_len){
 8015fb0:	b570      	push	{r4, r5, r6, lr}
 8015fb2:	4606      	mov	r6, r0
 8015fb4:	460d      	mov	r5, r1
	logging(L_DEBUG, "Call ssdp_set_id");
 8015fb6:	4910      	ldr	r1, [pc, #64]	@ (8015ff8 <ssdp_set_id+0x48>)
 8015fb8:	2000      	movs	r0, #0
 8015fba:	f7fc f8f5 	bl	80121a8 <logging>
	if (id && (id_len > 0)){
 8015fbe:	b1d6      	cbz	r6, 8015ff6 <ssdp_set_id+0x46>
 8015fc0:	b1cd      	cbz	r5, 8015ff6 <ssdp_set_id+0x46>
		if(dev_id) free(dev_id);
 8015fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8015ffc <ssdp_set_id+0x4c>)
 8015fc4:	6818      	ldr	r0, [r3, #0]
 8015fc6:	b108      	cbz	r0, 8015fcc <ssdp_set_id+0x1c>
 8015fc8:	f005 f880 	bl	801b0cc <vPortFree>
		dev_id = (char *) calloc(id_len * 2 + 1, sizeof(char));  // +1 для '\0'
 8015fcc:	0068      	lsls	r0, r5, #1
 8015fce:	2101      	movs	r1, #1
 8015fd0:	4408      	add	r0, r1
 8015fd2:	f7ff fe6f 	bl	8015cb4 <my_calloc>
 8015fd6:	4b09      	ldr	r3, [pc, #36]	@ (8015ffc <ssdp_set_id+0x4c>)
 8015fd8:	6018      	str	r0, [r3, #0]
		if (dev_id ){
 8015fda:	b160      	cbz	r0, 8015ff6 <ssdp_set_id+0x46>
	        for (unsigned int i = 0; i < id_len; i++) {
 8015fdc:	2400      	movs	r4, #0
 8015fde:	e008      	b.n	8015ff2 <ssdp_set_id+0x42>
	            sprintf(&dev_id[i * 2], "%02X", id[i]);
 8015fe0:	4b06      	ldr	r3, [pc, #24]	@ (8015ffc <ssdp_set_id+0x4c>)
 8015fe2:	6818      	ldr	r0, [r3, #0]
 8015fe4:	5d32      	ldrb	r2, [r6, r4]
 8015fe6:	4906      	ldr	r1, [pc, #24]	@ (8016000 <ssdp_set_id+0x50>)
 8015fe8:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 8015fec:	f016 fc76 	bl	802c8dc <sprintf>
	        for (unsigned int i = 0; i < id_len; i++) {
 8015ff0:	3401      	adds	r4, #1
 8015ff2:	42a5      	cmp	r5, r4
 8015ff4:	d8f4      	bhi.n	8015fe0 <ssdp_set_id+0x30>
}
 8015ff6:	bd70      	pop	{r4, r5, r6, pc}
 8015ff8:	08038d64 	.word	0x08038d64
 8015ffc:	20002954 	.word	0x20002954
 8016000:	08038720 	.word	0x08038720

08016004 <ssdp_start_server>:

void ssdp_start_server(void * param_mgr, void * param_mif){
 8016004:	b530      	push	{r4, r5, lr}
 8016006:	b085      	sub	sp, #20
	mgr 		= (struct mg_mgr *)param_mgr;
 8016008:	4b18      	ldr	r3, [pc, #96]	@ (801606c <ssdp_start_server+0x68>)
 801600a:	6018      	str	r0, [r3, #0]
	mif			= (struct mg_tcpip_if *)param_mif;
 801600c:	4b18      	ldr	r3, [pc, #96]	@ (8016070 <ssdp_start_server+0x6c>)
 801600e:	6019      	str	r1, [r3, #0]
	ip_addr_str = (char *) calloc(IP_v6_STR_LEN, sizeof(char));
 8016010:	2101      	movs	r1, #1
 8016012:	2028      	movs	r0, #40	@ 0x28
 8016014:	f7ff fe4e 	bl	8015cb4 <my_calloc>
 8016018:	4b16      	ldr	r3, [pc, #88]	@ (8016074 <ssdp_start_server+0x70>)
 801601a:	6018      	str	r0, [r3, #0]
	if (!ip_addr_str) return; //TODO add logging
 801601c:	b318      	cbz	r0, 8016066 <ssdp_start_server+0x62>

	ssdp_set_id(mif->mac, mac_len);
 801601e:	4d14      	ldr	r5, [pc, #80]	@ (8016070 <ssdp_start_server+0x6c>)
 8016020:	2106      	movs	r1, #6
 8016022:	6828      	ldr	r0, [r5, #0]
 8016024:	f7ff ffc4 	bl	8015fb0 <ssdp_set_id>

	logging(L_INFO, "Starting SSDP service");
 8016028:	4913      	ldr	r1, [pc, #76]	@ (8016078 <ssdp_start_server+0x74>)
 801602a:	2001      	movs	r0, #1
 801602c:	f7fc f8bc 	bl	80121a8 <logging>
	mg_timer_add(mgr, 60000, MG_TIMER_REPEAT | MG_TIMER_RUN_NOW, ssdp_timer_handler, NULL);
 8016030:	4c0e      	ldr	r4, [pc, #56]	@ (801606c <ssdp_start_server+0x68>)
 8016032:	2300      	movs	r3, #0
 8016034:	9302      	str	r3, [sp, #8]
 8016036:	4b11      	ldr	r3, [pc, #68]	@ (801607c <ssdp_start_server+0x78>)
 8016038:	9301      	str	r3, [sp, #4]
 801603a:	2303      	movs	r3, #3
 801603c:	9300      	str	r3, [sp, #0]
 801603e:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8016042:	2300      	movs	r3, #0
 8016044:	6820      	ldr	r0, [r4, #0]
 8016046:	f00f fe7d 	bl	8025d44 <mg_timer_add>
	mg_http_listen(mgr, "http://0.0.0.0:40000", ssdp_web_handler, mif);
 801604a:	682b      	ldr	r3, [r5, #0]
 801604c:	4a0c      	ldr	r2, [pc, #48]	@ (8016080 <ssdp_start_server+0x7c>)
 801604e:	490d      	ldr	r1, [pc, #52]	@ (8016084 <ssdp_start_server+0x80>)
 8016050:	6820      	ldr	r0, [r4, #0]
 8016052:	f011 fc55 	bl	8027900 <mg_http_listen>
	udp_listen_conn = mg_listen(mgr, ssdp_addr, ssdp_listener_handler, mif);
 8016056:	682b      	ldr	r3, [r5, #0]
 8016058:	4a0b      	ldr	r2, [pc, #44]	@ (8016088 <ssdp_start_server+0x84>)
 801605a:	490c      	ldr	r1, [pc, #48]	@ (801608c <ssdp_start_server+0x88>)
 801605c:	6820      	ldr	r0, [r4, #0]
 801605e:	f011 fbcb 	bl	80277f8 <mg_listen>
 8016062:	4b0b      	ldr	r3, [pc, #44]	@ (8016090 <ssdp_start_server+0x8c>)
 8016064:	6018      	str	r0, [r3, #0]
}
 8016066:	b005      	add	sp, #20
 8016068:	bd30      	pop	{r4, r5, pc}
 801606a:	bf00      	nop
 801606c:	20002948 	.word	0x20002948
 8016070:	20002944 	.word	0x20002944
 8016074:	2000294c 	.word	0x2000294c
 8016078:	08038d78 	.word	0x08038d78
 801607c:	08015f6d 	.word	0x08015f6d
 8016080:	08015d8d 	.word	0x08015d8d
 8016084:	08038d90 	.word	0x08038d90
 8016088:	08015ee1 	.word	0x08015ee1
 801608c:	08039044 	.word	0x08039044
 8016090:	20002940 	.word	0x20002940

08016094 <function_prototype>:
static void sFLASH_SPI_ReadBuffer(uint8_t * buffer, uint16_t size);
void sFLASH_SendByte(uint8_t byte);
void sFLASH_CS_LOW(void);
void sFLASH_CS_HIGH(void);

void function_prototype(void){};
 8016094:	4770      	bx	lr
	...

08016098 <sFLASH_SPI_ReadBuffer>:
	flash_conf.receive_buffer(&byte, 1);
	return byte;
}


static void sFLASH_SPI_ReadBuffer(uint8_t * buffer, uint16_t size){
 8016098:	b508      	push	{r3, lr}
	flash_conf.receive_buffer(buffer, size);
 801609a:	4b02      	ldr	r3, [pc, #8]	@ (80160a4 <sFLASH_SPI_ReadBuffer+0xc>)
 801609c:	685b      	ldr	r3, [r3, #4]
 801609e:	4798      	blx	r3
}
 80160a0:	bd08      	pop	{r3, pc}
 80160a2:	bf00      	nop
 80160a4:	20002998 	.word	0x20002998

080160a8 <SPI_flash_reg_cb>:
void SPI_flash_reg_cb(void (*chip_select)(void), void (*chip_deselect)(void), int (*receive_buffer)(uint8_t * buffer, uint16_t size), void (*send_byte)(uint8_t)){
 80160a8:	b410      	push	{r4}
	if (chip_select){
 80160aa:	b158      	cbz	r0, 80160c4 <SPI_flash_reg_cb+0x1c>
 80160ac:	4604      	mov	r4, r0
		flash_conf.select_chip		= chip_select;
 80160ae:	4809      	ldr	r0, [pc, #36]	@ (80160d4 <SPI_flash_reg_cb+0x2c>)
 80160b0:	60c4      	str	r4, [r0, #12]
	if (chip_deselect){
 80160b2:	b159      	cbz	r1, 80160cc <SPI_flash_reg_cb+0x24>
		flash_conf.deselect_chip	= chip_deselect;
 80160b4:	4807      	ldr	r0, [pc, #28]	@ (80160d4 <SPI_flash_reg_cb+0x2c>)
 80160b6:	6101      	str	r1, [r0, #16]
	flash_conf.receive_buffer	= receive_buffer;
 80160b8:	4906      	ldr	r1, [pc, #24]	@ (80160d4 <SPI_flash_reg_cb+0x2c>)
 80160ba:	604a      	str	r2, [r1, #4]
	flash_conf.send_byte		= send_byte;
 80160bc:	608b      	str	r3, [r1, #8]
}
 80160be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80160c2:	4770      	bx	lr
		flash_conf.select_chip		= function_prototype;
 80160c4:	4803      	ldr	r0, [pc, #12]	@ (80160d4 <SPI_flash_reg_cb+0x2c>)
 80160c6:	4c04      	ldr	r4, [pc, #16]	@ (80160d8 <SPI_flash_reg_cb+0x30>)
 80160c8:	60c4      	str	r4, [r0, #12]
 80160ca:	e7f2      	b.n	80160b2 <SPI_flash_reg_cb+0xa>
		flash_conf.deselect_chip	= function_prototype;
 80160cc:	4901      	ldr	r1, [pc, #4]	@ (80160d4 <SPI_flash_reg_cb+0x2c>)
 80160ce:	4802      	ldr	r0, [pc, #8]	@ (80160d8 <SPI_flash_reg_cb+0x30>)
 80160d0:	6108      	str	r0, [r1, #16]
 80160d2:	e7f1      	b.n	80160b8 <SPI_flash_reg_cb+0x10>
 80160d4:	20002998 	.word	0x20002998
 80160d8:	08016095 	.word	0x08016095

080160dc <sFLASH_CS_LOW>:
void sFLASH_CS_LOW(void){ //select chip
 80160dc:	b508      	push	{r3, lr}
	flash_conf.select_chip();
 80160de:	4b02      	ldr	r3, [pc, #8]	@ (80160e8 <sFLASH_CS_LOW+0xc>)
 80160e0:	68db      	ldr	r3, [r3, #12]
 80160e2:	4798      	blx	r3
}
 80160e4:	bd08      	pop	{r3, pc}
 80160e6:	bf00      	nop
 80160e8:	20002998 	.word	0x20002998

080160ec <sFLASH_CS_HIGH>:
void sFLASH_CS_HIGH(void){ //deselect chip
 80160ec:	b508      	push	{r3, lr}
	flash_conf.deselect_chip();
 80160ee:	4b02      	ldr	r3, [pc, #8]	@ (80160f8 <sFLASH_CS_HIGH+0xc>)
 80160f0:	691b      	ldr	r3, [r3, #16]
 80160f2:	4798      	blx	r3
}
 80160f4:	bd08      	pop	{r3, pc}
 80160f6:	bf00      	nop
 80160f8:	20002998 	.word	0x20002998

080160fc <sFLASH_ReadByte>:
{
 80160fc:	b500      	push	{lr}
 80160fe:	b083      	sub	sp, #12
	flash_conf.receive_buffer(&byte, 1);
 8016100:	4b05      	ldr	r3, [pc, #20]	@ (8016118 <sFLASH_ReadByte+0x1c>)
 8016102:	685b      	ldr	r3, [r3, #4]
 8016104:	2101      	movs	r1, #1
 8016106:	f10d 0007 	add.w	r0, sp, #7
 801610a:	4798      	blx	r3
}
 801610c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8016110:	b003      	add	sp, #12
 8016112:	f85d fb04 	ldr.w	pc, [sp], #4
 8016116:	bf00      	nop
 8016118:	20002998 	.word	0x20002998

0801611c <sFLASH_SendByte>:
  *         from the SPI bus.
  * @param  byte: byte to send.
  * @retval The value of the received byte.
  */
void sFLASH_SendByte(uint8_t byte)
{
 801611c:	b508      	push	{r3, lr}
	flash_conf.send_byte(byte);
 801611e:	4b02      	ldr	r3, [pc, #8]	@ (8016128 <sFLASH_SendByte+0xc>)
 8016120:	689b      	ldr	r3, [r3, #8]
 8016122:	4798      	blx	r3
}
 8016124:	bd08      	pop	{r3, pc}
 8016126:	bf00      	nop
 8016128:	20002998 	.word	0x20002998

0801612c <sFLASH_Reset>:
void sFLASH_Reset(void){
 801612c:	b508      	push	{r3, lr}
    sFLASH_CS_LOW();
 801612e:	f7ff ffd5 	bl	80160dc <sFLASH_CS_LOW>
    sFLASH_SendByte(sFLASH_CMD_ENABLE_RESET);
 8016132:	2066      	movs	r0, #102	@ 0x66
 8016134:	f7ff fff2 	bl	801611c <sFLASH_SendByte>
    sFLASH_SendByte(sFLASH_CMD_RESET);
 8016138:	2099      	movs	r0, #153	@ 0x99
 801613a:	f7ff ffef 	bl	801611c <sFLASH_SendByte>
    sFLASH_CS_HIGH();
 801613e:	f7ff ffd5 	bl	80160ec <sFLASH_CS_HIGH>
}
 8016142:	bd08      	pop	{r3, pc}

08016144 <sFLASH_Init>:
void sFLASH_Init(void){
 8016144:	b508      	push	{r3, lr}
    HAL_Delay(100);
 8016146:	2064      	movs	r0, #100	@ 0x64
 8016148:	f000 fa1e 	bl	8016588 <HAL_Delay>
    sFLASH_Reset();
 801614c:	f7ff ffee 	bl	801612c <sFLASH_Reset>
    HAL_Delay(100);
 8016150:	2064      	movs	r0, #100	@ 0x64
 8016152:	f000 fa19 	bl	8016588 <HAL_Delay>
    HAL_Delay(100);
 8016156:	2064      	movs	r0, #100	@ 0x64
 8016158:	f000 fa16 	bl	8016588 <HAL_Delay>
}
 801615c:	bd08      	pop	{r3, pc}

0801615e <sFLASH_ReadBuffer>:
{
 801615e:	b570      	push	{r4, r5, r6, lr}
 8016160:	4606      	mov	r6, r0
 8016162:	460c      	mov	r4, r1
 8016164:	4615      	mov	r5, r2
  sFLASH_CS_LOW();
 8016166:	f7ff ffb9 	bl	80160dc <sFLASH_CS_LOW>
  if (NumByteToRead > 16){
 801616a:	2d10      	cmp	r5, #16
 801616c:	d917      	bls.n	801619e <sFLASH_ReadBuffer+0x40>
	  sFLASH_SendByte(sFLASH_CMD_FAST_READ);
 801616e:	200b      	movs	r0, #11
 8016170:	f7ff ffd4 	bl	801611c <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 8016174:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8016178:	f7ff ffd0 	bl	801611c <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr & 0xFF00) >> 8);
 801617c:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8016180:	f7ff ffcc 	bl	801611c <sFLASH_SendByte>
	  sFLASH_SendByte(ReadAddr & 0xFF);
 8016184:	b2e0      	uxtb	r0, r4
 8016186:	f7ff ffc9 	bl	801611c <sFLASH_SendByte>
	  sFLASH_SendByte(0x00);
 801618a:	2000      	movs	r0, #0
 801618c:	f7ff ffc6 	bl	801611c <sFLASH_SendByte>
	  sFLASH_SPI_ReadBuffer(pBuffer, NumByteToRead);
 8016190:	4629      	mov	r1, r5
 8016192:	4630      	mov	r0, r6
 8016194:	f7ff ff80 	bl	8016098 <sFLASH_SPI_ReadBuffer>
  sFLASH_CS_HIGH();
 8016198:	f7ff ffa8 	bl	80160ec <sFLASH_CS_HIGH>
}
 801619c:	bd70      	pop	{r4, r5, r6, pc}
	  sFLASH_SendByte(sFLASH_CMD_READ);
 801619e:	2003      	movs	r0, #3
 80161a0:	f7ff ffbc 	bl	801611c <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 80161a4:	f3c4 4007 	ubfx	r0, r4, #16, #8
 80161a8:	f7ff ffb8 	bl	801611c <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
 80161ac:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80161b0:	f7ff ffb4 	bl	801611c <sFLASH_SendByte>
	  sFLASH_SendByte(ReadAddr & 0xFF);
 80161b4:	b2e0      	uxtb	r0, r4
 80161b6:	f7ff ffb1 	bl	801611c <sFLASH_SendByte>
	  while (NumByteToRead--) /*!< while there is data to be read */
 80161ba:	e004      	b.n	80161c6 <sFLASH_ReadBuffer+0x68>
		  *pBuffer = sFLASH_ReadByte();
 80161bc:	f7ff ff9e 	bl	80160fc <sFLASH_ReadByte>
 80161c0:	f806 0b01 	strb.w	r0, [r6], #1
	  while (NumByteToRead--) /*!< while there is data to be read */
 80161c4:	4625      	mov	r5, r4
 80161c6:	1e6b      	subs	r3, r5, #1
 80161c8:	b29c      	uxth	r4, r3
 80161ca:	2d00      	cmp	r5, #0
 80161cc:	d1f6      	bne.n	80161bc <sFLASH_ReadBuffer+0x5e>
 80161ce:	e7e3      	b.n	8016198 <sFLASH_ReadBuffer+0x3a>

080161d0 <sFLASH_ReadID>:
{
 80161d0:	b570      	push	{r4, r5, r6, lr}
  sFLASH_CS_LOW();
 80161d2:	f7ff ff83 	bl	80160dc <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 80161d6:	f7ff ff89 	bl	80160ec <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 80161da:	f7ff ff7f 	bl	80160dc <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 80161de:	f7ff ff85 	bl	80160ec <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 80161e2:	f7ff ff7b 	bl	80160dc <sFLASH_CS_LOW>
  sFLASH_SendByte(sFLASH_CMD_RDID);
 80161e6:	209f      	movs	r0, #159	@ 0x9f
 80161e8:	f7ff ff98 	bl	801611c <sFLASH_SendByte>
  Temp0 = sFLASH_ReadByte();
 80161ec:	f7ff ff86 	bl	80160fc <sFLASH_ReadByte>
 80161f0:	4606      	mov	r6, r0
  Temp1 = sFLASH_ReadByte();
 80161f2:	f7ff ff83 	bl	80160fc <sFLASH_ReadByte>
 80161f6:	4604      	mov	r4, r0
  Temp2 = sFLASH_ReadByte();
 80161f8:	f7ff ff80 	bl	80160fc <sFLASH_ReadByte>
 80161fc:	4605      	mov	r5, r0
  sFLASH_CS_HIGH();
 80161fe:	f7ff ff75 	bl	80160ec <sFLASH_CS_HIGH>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8016202:	0224      	lsls	r4, r4, #8
 8016204:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
}
 8016208:	ea44 0005 	orr.w	r0, r4, r5
 801620c:	bd70      	pop	{r4, r5, r6, pc}
	...

08016210 <sFLASH_GetInfo>:
struct SPI_flash_info sFLASH_GetInfo(void){
 8016210:	b538      	push	{r3, r4, r5, lr}
 8016212:	4605      	mov	r5, r0
	sFLASH_Init();
 8016214:	f7ff ff96 	bl	8016144 <sFLASH_Init>
	flash_id = sFLASH_ReadID();
 8016218:	f7ff ffda 	bl	80161d0 <sFLASH_ReadID>
	switch (flash_id) {
 801621c:	4b55      	ldr	r3, [pc, #340]	@ (8016374 <sFLASH_GetInfo+0x164>)
 801621e:	4298      	cmp	r0, r3
 8016220:	f000 8085 	beq.w	801632e <sFLASH_GetInfo+0x11e>
 8016224:	f0c0 809c 	bcc.w	8016360 <sFLASH_GetInfo+0x150>
 8016228:	4b53      	ldr	r3, [pc, #332]	@ (8016378 <sFLASH_GetInfo+0x168>)
 801622a:	4298      	cmp	r0, r3
 801622c:	f200 8098 	bhi.w	8016360 <sFLASH_GetInfo+0x150>
 8016230:	3b03      	subs	r3, #3
 8016232:	4298      	cmp	r0, r3
 8016234:	f0c0 8094 	bcc.w	8016360 <sFLASH_GetInfo+0x150>
 8016238:	4b50      	ldr	r3, [pc, #320]	@ (801637c <sFLASH_GetInfo+0x16c>)
 801623a:	4403      	add	r3, r0
 801623c:	2b03      	cmp	r3, #3
 801623e:	f200 808f 	bhi.w	8016360 <sFLASH_GetInfo+0x150>
 8016242:	e8df f003 	tbb	[pc, r3]
 8016246:	2b02      	.short	0x2b02
 8016248:	5d44      	.short	0x5d44
			flash_info.flash_id = sFLASH_W25Q16BV_ID;
 801624a:	4c4d      	ldr	r4, [pc, #308]	@ (8016380 <sFLASH_GetInfo+0x170>)
 801624c:	4b4d      	ldr	r3, [pc, #308]	@ (8016384 <sFLASH_GetInfo+0x174>)
 801624e:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 8016250:	2301      	movs	r3, #1
 8016252:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 8016254:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 8016256:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801625a:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 801625c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016260:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 512;
 8016262:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016266:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "Winbond W25Q16", sizeof(flash_info.model_name) - 1);
 8016268:	2231      	movs	r2, #49	@ 0x31
 801626a:	4947      	ldr	r1, [pc, #284]	@ (8016388 <sFLASH_GetInfo+0x178>)
 801626c:	f104 000e 	add.w	r0, r4, #14
 8016270:	f016 ff3d 	bl	802d0ee <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 8016274:	2300      	movs	r3, #0
 8016276:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
	return flash_info;
 801627a:	46ac      	mov	ip, r5
 801627c:	4c40      	ldr	r4, [pc, #256]	@ (8016380 <sFLASH_GetInfo+0x170>)
 801627e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016280:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016284:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016286:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801628a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801628c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016290:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016294:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
 8016298:	4628      	mov	r0, r5
 801629a:	bd38      	pop	{r3, r4, r5, pc}
			flash_info.flash_id = sFLASH_W25Q32BV_ID;
 801629c:	4c38      	ldr	r4, [pc, #224]	@ (8016380 <sFLASH_GetInfo+0x170>)
 801629e:	4b3b      	ldr	r3, [pc, #236]	@ (801638c <sFLASH_GetInfo+0x17c>)
 80162a0:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 80162a2:	2301      	movs	r3, #1
 80162a4:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 80162a6:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 80162a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80162ac:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 80162ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80162b2:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 1024;
 80162b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80162b8:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "Winbond W25Q32", sizeof(flash_info.model_name) - 1);
 80162ba:	2231      	movs	r2, #49	@ 0x31
 80162bc:	4934      	ldr	r1, [pc, #208]	@ (8016390 <sFLASH_GetInfo+0x180>)
 80162be:	f104 000e 	add.w	r0, r4, #14
 80162c2:	f016 ff14 	bl	802d0ee <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 80162c6:	2300      	movs	r3, #0
 80162c8:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 80162cc:	e7d5      	b.n	801627a <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_W25Q64BV_ID;
 80162ce:	4c2c      	ldr	r4, [pc, #176]	@ (8016380 <sFLASH_GetInfo+0x170>)
 80162d0:	4b30      	ldr	r3, [pc, #192]	@ (8016394 <sFLASH_GetInfo+0x184>)
 80162d2:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 80162d4:	2301      	movs	r3, #1
 80162d6:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 80162d8:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 80162da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80162de:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 80162e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80162e4:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 2048;
 80162e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80162ea:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "Winbond W25Q64", sizeof(flash_info.model_name) - 1);
 80162ec:	2231      	movs	r2, #49	@ 0x31
 80162ee:	492a      	ldr	r1, [pc, #168]	@ (8016398 <sFLASH_GetInfo+0x188>)
 80162f0:	f104 000e 	add.w	r0, r4, #14
 80162f4:	f016 fefb 	bl	802d0ee <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 80162f8:	2300      	movs	r3, #0
 80162fa:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 80162fe:	e7bc      	b.n	801627a <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_W25Q128BV_ID;
 8016300:	4c1f      	ldr	r4, [pc, #124]	@ (8016380 <sFLASH_GetInfo+0x170>)
 8016302:	4b1d      	ldr	r3, [pc, #116]	@ (8016378 <sFLASH_GetInfo+0x168>)
 8016304:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 8016306:	2301      	movs	r3, #1
 8016308:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 801630a:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 801630c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016310:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 8016312:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016316:	8162      	strh	r2, [r4, #10]
			flash_info.block_count = 4096;
 8016318:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "Winbond W25Q128", sizeof(flash_info.model_name) - 1);
 801631a:	2231      	movs	r2, #49	@ 0x31
 801631c:	491f      	ldr	r1, [pc, #124]	@ (801639c <sFLASH_GetInfo+0x18c>)
 801631e:	f104 000e 	add.w	r0, r4, #14
 8016322:	f016 fee4 	bl	802d0ee <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 8016326:	2300      	movs	r3, #0
 8016328:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 801632c:	e7a5      	b.n	801627a <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_MX25L32xxx_ID;
 801632e:	4c14      	ldr	r4, [pc, #80]	@ (8016380 <sFLASH_GetInfo+0x170>)
 8016330:	4b10      	ldr	r3, [pc, #64]	@ (8016374 <sFLASH_GetInfo+0x164>)
 8016332:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 8016334:	2301      	movs	r3, #1
 8016336:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 8016338:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 801633a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801633e:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 8016340:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016344:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 1024;
 8016346:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801634a:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "MX25L32", sizeof(flash_info.model_name) - 1);
 801634c:	2231      	movs	r2, #49	@ 0x31
 801634e:	4914      	ldr	r1, [pc, #80]	@ (80163a0 <sFLASH_GetInfo+0x190>)
 8016350:	f104 000e 	add.w	r0, r4, #14
 8016354:	f016 fecb 	bl	802d0ee <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 8016358:	2300      	movs	r3, #0
 801635a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 801635e:	e78c      	b.n	801627a <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_UNNOUN_ID;
 8016360:	4807      	ldr	r0, [pc, #28]	@ (8016380 <sFLASH_GetInfo+0x170>)
 8016362:	2300      	movs	r3, #0
 8016364:	f840 3b0e 	str.w	r3, [r0], #14
			strncpy(flash_info.model_name, "Unknown", sizeof(flash_info.model_name) - 1);
 8016368:	2231      	movs	r2, #49	@ 0x31
 801636a:	490e      	ldr	r1, [pc, #56]	@ (80163a4 <sFLASH_GetInfo+0x194>)
 801636c:	f016 febf 	bl	802d0ee <strncpy>
			break;
 8016370:	e783      	b.n	801627a <sFLASH_GetInfo+0x6a>
 8016372:	bf00      	nop
 8016374:	00c22016 	.word	0x00c22016
 8016378:	00ef4018 	.word	0x00ef4018
 801637c:	ff10bfeb 	.word	0xff10bfeb
 8016380:	20002958 	.word	0x20002958
 8016384:	00ef4015 	.word	0x00ef4015
 8016388:	08039060 	.word	0x08039060
 801638c:	00ef4016 	.word	0x00ef4016
 8016390:	08039070 	.word	0x08039070
 8016394:	00ef4017 	.word	0x00ef4017
 8016398:	08039080 	.word	0x08039080
 801639c:	08039090 	.word	0x08039090
 80163a0:	080390a0 	.word	0x080390a0
 80163a4:	080390a8 	.word	0x080390a8

080163a8 <sFLASH_WriteEnable>:
  * @brief  Enables the write access to the FLASH.
  * @param  None
  * @retval None
  */
void sFLASH_WriteEnable(void)
{
 80163a8:	b508      	push	{r3, lr}
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 80163aa:	f7ff fe97 	bl	80160dc <sFLASH_CS_LOW>

  /*!< Send "Write Enable" instruction */
  sFLASH_SendByte(sFLASH_CMD_WREN);
 80163ae:	2006      	movs	r0, #6
 80163b0:	f7ff feb4 	bl	801611c <sFLASH_SendByte>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 80163b4:	f7ff fe9a 	bl	80160ec <sFLASH_CS_HIGH>
}
 80163b8:	bd08      	pop	{r3, pc}
	...

080163bc <sFLASH_WaitForWriteEnd>:
  *         status register and loop until write opertaion has completed.
  * @param  None
  * @retval None
  */
void sFLASH_WaitForWriteEnd(void)
{
 80163bc:	b538      	push	{r3, r4, r5, lr}
  uint8_t flashstatus = 0;

  int32_t timeout = 100000;
 80163be:	4d09      	ldr	r5, [pc, #36]	@ (80163e4 <sFLASH_WaitForWriteEnd+0x28>)
  //(sFLASH_CMD_RDSR);

  /*!< Loop as long as the memory is busy with a write cycle */
  do
  {
	  sFLASH_CS_LOW();
 80163c0:	f7ff fe8c 	bl	80160dc <sFLASH_CS_LOW>
	  /*!< Send "Read Status Register" instruction */
	  sFLASH_SendByte(sFLASH_CMD_RDSR);
 80163c4:	2005      	movs	r0, #5
 80163c6:	f7ff fea9 	bl	801611c <sFLASH_SendByte>

	  /*!< Send a dummy byte to generate the clock needed by the FLASH
	  and put the value of the status register in FLASH_Status variable */
	  flashstatus = sFLASH_ReadByte();
 80163ca:	f7ff fe97 	bl	80160fc <sFLASH_ReadByte>
 80163ce:	4604      	mov	r4, r0

	  sFLASH_CS_HIGH();
 80163d0:	f7ff fe8c 	bl	80160ec <sFLASH_CS_HIGH>

	  /*!< Decrement timeout to avoid infinite loop */
	  if (timeout-- == 0)
 80163d4:	462b      	mov	r3, r5
 80163d6:	3d01      	subs	r5, #1
 80163d8:	b113      	cbz	r3, 80163e0 <sFLASH_WaitForWriteEnd+0x24>
		  //printf("Timeout waiting for Write End\n"); Logging
		  return; //Exit if timeout
	  }

  }
  while ((flashstatus & sFLASH_WIP_FLAG) == SET); /* Write in progress */
 80163da:	f014 0f01 	tst.w	r4, #1
 80163de:	d1ef      	bne.n	80163c0 <sFLASH_WaitForWriteEnd+0x4>

  /*!< Deselect the FLASH: Chip Select high */
  //sFLASH_CS_HIGH();
}
 80163e0:	bd38      	pop	{r3, r4, r5, pc}
 80163e2:	bf00      	nop
 80163e4:	000186a0 	.word	0x000186a0

080163e8 <sFLASH_EraseSector>:
{
 80163e8:	b510      	push	{r4, lr}
 80163ea:	4604      	mov	r4, r0
  sFLASH_WriteEnable();
 80163ec:	f7ff ffdc 	bl	80163a8 <sFLASH_WriteEnable>
  sFLASH_CS_LOW();
 80163f0:	f7ff fe74 	bl	80160dc <sFLASH_CS_LOW>
  sFLASH_SendByte(sFLASH_CMD_SE);
 80163f4:	2020      	movs	r0, #32
 80163f6:	f7ff fe91 	bl	801611c <sFLASH_SendByte>
  sFLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
 80163fa:	f3c4 4007 	ubfx	r0, r4, #16, #8
 80163fe:	f7ff fe8d 	bl	801611c <sFLASH_SendByte>
  sFLASH_SendByte((SectorAddr & 0xFF00) >> 8);
 8016402:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8016406:	f7ff fe89 	bl	801611c <sFLASH_SendByte>
  sFLASH_SendByte(SectorAddr & 0xFF);
 801640a:	b2e0      	uxtb	r0, r4
 801640c:	f7ff fe86 	bl	801611c <sFLASH_SendByte>
  sFLASH_CS_HIGH();
 8016410:	f7ff fe6c 	bl	80160ec <sFLASH_CS_HIGH>
  sFLASH_WaitForWriteEnd();
 8016414:	f7ff ffd2 	bl	80163bc <sFLASH_WaitForWriteEnd>
}
 8016418:	bd10      	pop	{r4, pc}

0801641a <sFLASH_WritePage>:
{
 801641a:	b570      	push	{r4, r5, r6, lr}
 801641c:	4606      	mov	r6, r0
 801641e:	460c      	mov	r4, r1
 8016420:	4615      	mov	r5, r2
  sFLASH_WriteEnable();
 8016422:	f7ff ffc1 	bl	80163a8 <sFLASH_WriteEnable>
  sFLASH_CS_LOW();
 8016426:	f7ff fe59 	bl	80160dc <sFLASH_CS_LOW>
  sFLASH_SendByte(sFLASH_CMD_WRITE);
 801642a:	2002      	movs	r0, #2
 801642c:	f7ff fe76 	bl	801611c <sFLASH_SendByte>
  sFLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
 8016430:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8016434:	f7ff fe72 	bl	801611c <sFLASH_SendByte>
  sFLASH_SendByte((WriteAddr & 0xFF00) >> 8);
 8016438:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801643c:	f7ff fe6e 	bl	801611c <sFLASH_SendByte>
  sFLASH_SendByte(WriteAddr & 0xFF);
 8016440:	b2e0      	uxtb	r0, r4
 8016442:	f7ff fe6b 	bl	801611c <sFLASH_SendByte>
  while (NumByteToWrite--)
 8016446:	e004      	b.n	8016452 <sFLASH_WritePage+0x38>
    sFLASH_SendByte(*pBuffer);
 8016448:	f816 0b01 	ldrb.w	r0, [r6], #1
 801644c:	f7ff fe66 	bl	801611c <sFLASH_SendByte>
  while (NumByteToWrite--)
 8016450:	4625      	mov	r5, r4
 8016452:	1e6b      	subs	r3, r5, #1
 8016454:	b29c      	uxth	r4, r3
 8016456:	2d00      	cmp	r5, #0
 8016458:	d1f6      	bne.n	8016448 <sFLASH_WritePage+0x2e>
  sFLASH_CS_HIGH();
 801645a:	f7ff fe47 	bl	80160ec <sFLASH_CS_HIGH>
  sFLASH_WaitForWriteEnd();
 801645e:	f7ff ffad 	bl	80163bc <sFLASH_WaitForWriteEnd>
}
 8016462:	bd70      	pop	{r4, r5, r6, pc}

08016464 <sFLASH_WriteBuffer>:
{
 8016464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016468:	4605      	mov	r5, r0
 801646a:	460c      	mov	r4, r1
 801646c:	4617      	mov	r7, r2
  Addr = WriteAddr % sFLASH_SPI_PAGESIZE;
 801646e:	b2cb      	uxtb	r3, r1
  NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 8016470:	0a11      	lsrs	r1, r2, #8
  if (Addr == 0) /*!< WriteAddr is sFLASH_PAGESIZE aligned  */
 8016472:	b9d3      	cbnz	r3, 80164aa <sFLASH_WriteBuffer+0x46>
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 8016474:	b971      	cbnz	r1, 8016494 <sFLASH_WriteBuffer+0x30>
      sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 8016476:	4621      	mov	r1, r4
 8016478:	f7ff ffcf 	bl	801641a <sFLASH_WritePage>
 801647c:	e013      	b.n	80164a6 <sFLASH_WriteBuffer+0x42>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 801647e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016482:	4621      	mov	r1, r4
 8016484:	4628      	mov	r0, r5
 8016486:	f7ff ffc8 	bl	801641a <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 801648a:	f504 7480 	add.w	r4, r4, #256	@ 0x100
        pBuffer += sFLASH_SPI_PAGESIZE;
 801648e:	f505 7580 	add.w	r5, r5, #256	@ 0x100
      while (NumOfPage--)
 8016492:	4631      	mov	r1, r6
 8016494:	1e4b      	subs	r3, r1, #1
 8016496:	b2de      	uxtb	r6, r3
 8016498:	2900      	cmp	r1, #0
 801649a:	d1f0      	bne.n	801647e <sFLASH_WriteBuffer+0x1a>
      sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 801649c:	b2fa      	uxtb	r2, r7
 801649e:	4621      	mov	r1, r4
 80164a0:	4628      	mov	r0, r5
 80164a2:	f7ff ffba 	bl	801641a <sFLASH_WritePage>
}
 80164a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80164aa:	f1c3 0800 	rsb	r8, r3, #0
 80164ae:	fa5f f888 	uxtb.w	r8, r8
 80164b2:	b2d2      	uxtb	r2, r2
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 80164b4:	b9a1      	cbnz	r1, 80164e0 <sFLASH_WriteBuffer+0x7c>
      if (NumOfSingle > count) /*!< (NumByteToWrite + WriteAddr) > sFLASH_PAGESIZE */
 80164b6:	4590      	cmp	r8, r2
 80164b8:	d20d      	bcs.n	80164d6 <sFLASH_WriteBuffer+0x72>
        temp = NumOfSingle - count;
 80164ba:	4413      	add	r3, r2
 80164bc:	b2de      	uxtb	r6, r3
        sFLASH_WritePage(pBuffer, WriteAddr, count);
 80164be:	4642      	mov	r2, r8
 80164c0:	4621      	mov	r1, r4
 80164c2:	f7ff ffaa 	bl	801641a <sFLASH_WritePage>
        sFLASH_WritePage(pBuffer, WriteAddr, temp);
 80164c6:	4632      	mov	r2, r6
 80164c8:	eb08 0104 	add.w	r1, r8, r4
 80164cc:	eb05 0008 	add.w	r0, r5, r8
 80164d0:	f7ff ffa3 	bl	801641a <sFLASH_WritePage>
 80164d4:	e7e7      	b.n	80164a6 <sFLASH_WriteBuffer+0x42>
        sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 80164d6:	463a      	mov	r2, r7
 80164d8:	4621      	mov	r1, r4
 80164da:	f7ff ff9e 	bl	801641a <sFLASH_WritePage>
 80164de:	e7e2      	b.n	80164a6 <sFLASH_WriteBuffer+0x42>
      NumByteToWrite -= count;
 80164e0:	eba7 0708 	sub.w	r7, r7, r8
 80164e4:	fa1f f987 	uxth.w	r9, r7
      NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 80164e8:	f3c7 2607 	ubfx	r6, r7, #8, #8
      NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 80164ec:	b2ff      	uxtb	r7, r7
      sFLASH_WritePage(pBuffer, WriteAddr, count);
 80164ee:	4642      	mov	r2, r8
 80164f0:	4621      	mov	r1, r4
 80164f2:	f7ff ff92 	bl	801641a <sFLASH_WritePage>
      WriteAddr +=  count;
 80164f6:	4444      	add	r4, r8
      pBuffer += count;
 80164f8:	4445      	add	r5, r8
      while (NumOfPage--)
 80164fa:	e00a      	b.n	8016512 <sFLASH_WriteBuffer+0xae>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 80164fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016500:	4621      	mov	r1, r4
 8016502:	4628      	mov	r0, r5
 8016504:	f7ff ff89 	bl	801641a <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 8016508:	f504 7480 	add.w	r4, r4, #256	@ 0x100
        pBuffer += sFLASH_SPI_PAGESIZE;
 801650c:	f505 7580 	add.w	r5, r5, #256	@ 0x100
      while (NumOfPage--)
 8016510:	4646      	mov	r6, r8
 8016512:	1e73      	subs	r3, r6, #1
 8016514:	fa5f f883 	uxtb.w	r8, r3
 8016518:	2e00      	cmp	r6, #0
 801651a:	d1ef      	bne.n	80164fc <sFLASH_WriteBuffer+0x98>
      if (NumOfSingle != 0)
 801651c:	2f00      	cmp	r7, #0
 801651e:	d0c2      	beq.n	80164a6 <sFLASH_WriteBuffer+0x42>
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 8016520:	fa5f f289 	uxtb.w	r2, r9
 8016524:	4621      	mov	r1, r4
 8016526:	4628      	mov	r0, r5
 8016528:	f7ff ff77 	bl	801641a <sFLASH_WritePage>
}
 801652c:	e7bb      	b.n	80164a6 <sFLASH_WriteBuffer+0x42>
	...

08016530 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8016530:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8016532:	4b0b      	ldr	r3, [pc, #44]	@ (8016560 <HAL_Init+0x30>)
 8016534:	681a      	ldr	r2, [r3, #0]
 8016536:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801653a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 801653c:	681a      	ldr	r2, [r3, #0]
 801653e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8016542:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8016544:	681a      	ldr	r2, [r3, #0]
 8016546:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801654a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801654c:	2003      	movs	r0, #3
 801654e:	f000 fa1f 	bl	8016990 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8016552:	200f      	movs	r0, #15
 8016554:	f7fc f81c 	bl	8012590 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8016558:	f7fb fff8 	bl	801254c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 801655c:	2000      	movs	r0, #0
 801655e:	bd08      	pop	{r3, pc}
 8016560:	40023c00 	.word	0x40023c00

08016564 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8016564:	4a03      	ldr	r2, [pc, #12]	@ (8016574 <HAL_IncTick+0x10>)
 8016566:	6811      	ldr	r1, [r2, #0]
 8016568:	4b03      	ldr	r3, [pc, #12]	@ (8016578 <HAL_IncTick+0x14>)
 801656a:	781b      	ldrb	r3, [r3, #0]
 801656c:	440b      	add	r3, r1
 801656e:	6013      	str	r3, [r2, #0]
}
 8016570:	4770      	bx	lr
 8016572:	bf00      	nop
 8016574:	200029ac 	.word	0x200029ac
 8016578:	20000106 	.word	0x20000106

0801657c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 801657c:	4b01      	ldr	r3, [pc, #4]	@ (8016584 <HAL_GetTick+0x8>)
 801657e:	6818      	ldr	r0, [r3, #0]
}
 8016580:	4770      	bx	lr
 8016582:	bf00      	nop
 8016584:	200029ac 	.word	0x200029ac

08016588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8016588:	b538      	push	{r3, r4, r5, lr}
 801658a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 801658c:	f7ff fff6 	bl	801657c <HAL_GetTick>
 8016590:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8016592:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8016596:	d002      	beq.n	801659e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8016598:	4b04      	ldr	r3, [pc, #16]	@ (80165ac <HAL_Delay+0x24>)
 801659a:	781b      	ldrb	r3, [r3, #0]
 801659c:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 801659e:	f7ff ffed 	bl	801657c <HAL_GetTick>
 80165a2:	1b40      	subs	r0, r0, r5
 80165a4:	42a0      	cmp	r0, r4
 80165a6:	d3fa      	bcc.n	801659e <HAL_Delay+0x16>
  {
  }
}
 80165a8:	bd38      	pop	{r3, r4, r5, pc}
 80165aa:	bf00      	nop
 80165ac:	20000106 	.word	0x20000106

080165b0 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80165b0:	4b4a      	ldr	r3, [pc, #296]	@ (80166dc <ADC_Init+0x12c>)
 80165b2:	685a      	ldr	r2, [r3, #4]
 80165b4:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80165b8:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80165ba:	685a      	ldr	r2, [r3, #4]
 80165bc:	6841      	ldr	r1, [r0, #4]
 80165be:	430a      	orrs	r2, r1
 80165c0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80165c2:	6802      	ldr	r2, [r0, #0]
 80165c4:	6853      	ldr	r3, [r2, #4]
 80165c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80165ca:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80165cc:	6802      	ldr	r2, [r0, #0]
 80165ce:	6853      	ldr	r3, [r2, #4]
 80165d0:	6901      	ldr	r1, [r0, #16]
 80165d2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80165d6:	6053      	str	r3, [r2, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80165d8:	6802      	ldr	r2, [r0, #0]
 80165da:	6853      	ldr	r3, [r2, #4]
 80165dc:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 80165e0:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80165e2:	6802      	ldr	r2, [r0, #0]
 80165e4:	6853      	ldr	r3, [r2, #4]
 80165e6:	6881      	ldr	r1, [r0, #8]
 80165e8:	430b      	orrs	r3, r1
 80165ea:	6053      	str	r3, [r2, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80165ec:	6802      	ldr	r2, [r0, #0]
 80165ee:	6893      	ldr	r3, [r2, #8]
 80165f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80165f4:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80165f6:	6802      	ldr	r2, [r0, #0]
 80165f8:	6893      	ldr	r3, [r2, #8]
 80165fa:	68c1      	ldr	r1, [r0, #12]
 80165fc:	430b      	orrs	r3, r1
 80165fe:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8016600:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8016602:	4b37      	ldr	r3, [pc, #220]	@ (80166e0 <ADC_Init+0x130>)
 8016604:	429a      	cmp	r2, r3
 8016606:	d057      	beq.n	80166b8 <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8016608:	6802      	ldr	r2, [r0, #0]
 801660a:	6893      	ldr	r3, [r2, #8]
 801660c:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8016610:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8016612:	6802      	ldr	r2, [r0, #0]
 8016614:	6893      	ldr	r3, [r2, #8]
 8016616:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8016618:	430b      	orrs	r3, r1
 801661a:	6093      	str	r3, [r2, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 801661c:	6802      	ldr	r2, [r0, #0]
 801661e:	6893      	ldr	r3, [r2, #8]
 8016620:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8016624:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8016626:	6802      	ldr	r2, [r0, #0]
 8016628:	6893      	ldr	r3, [r2, #8]
 801662a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801662c:	430b      	orrs	r3, r1
 801662e:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8016630:	6802      	ldr	r2, [r0, #0]
 8016632:	6893      	ldr	r3, [r2, #8]
 8016634:	f023 0302 	bic.w	r3, r3, #2
 8016638:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 801663a:	6802      	ldr	r2, [r0, #0]
 801663c:	6893      	ldr	r3, [r2, #8]
 801663e:	7e01      	ldrb	r1, [r0, #24]
 8016640:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8016644:	6093      	str	r3, [r2, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8016646:	f890 3020 	ldrb.w	r3, [r0, #32]
 801664a:	2b00      	cmp	r3, #0
 801664c:	d03f      	beq.n	80166ce <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 801664e:	6802      	ldr	r2, [r0, #0]
 8016650:	6853      	ldr	r3, [r2, #4]
 8016652:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8016656:	6053      	str	r3, [r2, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8016658:	6802      	ldr	r2, [r0, #0]
 801665a:	6853      	ldr	r3, [r2, #4]
 801665c:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8016660:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8016662:	6801      	ldr	r1, [r0, #0]
 8016664:	684b      	ldr	r3, [r1, #4]
 8016666:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8016668:	3a01      	subs	r2, #1
 801666a:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 801666e:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8016670:	6802      	ldr	r2, [r0, #0]
 8016672:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8016674:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8016678:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 801667a:	6801      	ldr	r1, [r0, #0]
 801667c:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 801667e:	69c2      	ldr	r2, [r0, #28]
 8016680:	3a01      	subs	r2, #1
 8016682:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8016686:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8016688:	6802      	ldr	r2, [r0, #0]
 801668a:	6893      	ldr	r3, [r2, #8]
 801668c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8016690:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8016692:	6802      	ldr	r2, [r0, #0]
 8016694:	6893      	ldr	r3, [r2, #8]
 8016696:	f890 1030 	ldrb.w	r1, [r0, #48]	@ 0x30
 801669a:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 801669e:	6093      	str	r3, [r2, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80166a0:	6802      	ldr	r2, [r0, #0]
 80166a2:	6893      	ldr	r3, [r2, #8]
 80166a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80166a8:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80166aa:	6802      	ldr	r2, [r0, #0]
 80166ac:	6893      	ldr	r3, [r2, #8]
 80166ae:	6941      	ldr	r1, [r0, #20]
 80166b0:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80166b4:	6093      	str	r3, [r2, #8]
}
 80166b6:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80166b8:	6802      	ldr	r2, [r0, #0]
 80166ba:	6893      	ldr	r3, [r2, #8]
 80166bc:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80166c0:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80166c2:	6802      	ldr	r2, [r0, #0]
 80166c4:	6893      	ldr	r3, [r2, #8]
 80166c6:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80166ca:	6093      	str	r3, [r2, #8]
 80166cc:	e7b0      	b.n	8016630 <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80166ce:	6802      	ldr	r2, [r0, #0]
 80166d0:	6853      	ldr	r3, [r2, #4]
 80166d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80166d6:	6053      	str	r3, [r2, #4]
 80166d8:	e7ca      	b.n	8016670 <ADC_Init+0xc0>
 80166da:	bf00      	nop
 80166dc:	40012300 	.word	0x40012300
 80166e0:	0f000001 	.word	0x0f000001

080166e4 <HAL_ADC_Init>:
  if (hadc == NULL)
 80166e4:	b338      	cbz	r0, 8016736 <HAL_ADC_Init+0x52>
{
 80166e6:	b510      	push	{r4, lr}
 80166e8:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 80166ea:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80166ec:	b143      	cbz	r3, 8016700 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80166ee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80166f0:	f013 0f10 	tst.w	r3, #16
 80166f4:	d00b      	beq.n	801670e <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 80166f6:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80166f8:	2300      	movs	r3, #0
 80166fa:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80166fe:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8016700:	f7fa fd24 	bl	801114c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8016704:	2300      	movs	r3, #0
 8016706:	6463      	str	r3, [r4, #68]	@ 0x44
    hadc->Lock = HAL_UNLOCKED;
 8016708:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
 801670c:	e7ef      	b.n	80166ee <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 801670e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016710:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8016714:	f023 0302 	bic.w	r3, r3, #2
 8016718:	f043 0302 	orr.w	r3, r3, #2
 801671c:	6423      	str	r3, [r4, #64]	@ 0x40
    ADC_Init(hadc);
 801671e:	4620      	mov	r0, r4
 8016720:	f7ff ff46 	bl	80165b0 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8016724:	2000      	movs	r0, #0
 8016726:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8016728:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801672a:	f023 0303 	bic.w	r3, r3, #3
 801672e:	f043 0301 	orr.w	r3, r3, #1
 8016732:	6423      	str	r3, [r4, #64]	@ 0x40
 8016734:	e7e0      	b.n	80166f8 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8016736:	2001      	movs	r0, #1
}
 8016738:	4770      	bx	lr
	...

0801673c <HAL_ADC_ConfigChannel>:
{
 801673c:	b430      	push	{r4, r5}
 801673e:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8016740:	2200      	movs	r2, #0
 8016742:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8016744:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8016748:	2a01      	cmp	r2, #1
 801674a:	f000 80c0 	beq.w	80168ce <HAL_ADC_ConfigChannel+0x192>
 801674e:	4603      	mov	r3, r0
 8016750:	2201      	movs	r2, #1
 8016752:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8016756:	680a      	ldr	r2, [r1, #0]
 8016758:	2a09      	cmp	r2, #9
 801675a:	d940      	bls.n	80167de <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 801675c:	6804      	ldr	r4, [r0, #0]
 801675e:	68e0      	ldr	r0, [r4, #12]
 8016760:	b292      	uxth	r2, r2
 8016762:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016766:	3a1e      	subs	r2, #30
 8016768:	f04f 0c07 	mov.w	ip, #7
 801676c:	fa0c f202 	lsl.w	r2, ip, r2
 8016770:	ea20 0202 	bic.w	r2, r0, r2
 8016774:	60e2      	str	r2, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8016776:	681c      	ldr	r4, [r3, #0]
 8016778:	68e0      	ldr	r0, [r4, #12]
 801677a:	880a      	ldrh	r2, [r1, #0]
 801677c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016780:	3a1e      	subs	r2, #30
 8016782:	688d      	ldr	r5, [r1, #8]
 8016784:	fa05 f202 	lsl.w	r2, r5, r2
 8016788:	4302      	orrs	r2, r0
 801678a:	60e2      	str	r2, [r4, #12]
  if (sConfig->Rank < 7U)
 801678c:	684a      	ldr	r2, [r1, #4]
 801678e:	2a06      	cmp	r2, #6
 8016790:	d83c      	bhi.n	801680c <HAL_ADC_ConfigChannel+0xd0>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8016792:	681c      	ldr	r4, [r3, #0]
 8016794:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8016796:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801679a:	3a05      	subs	r2, #5
 801679c:	f04f 0c1f 	mov.w	ip, #31
 80167a0:	fa0c f202 	lsl.w	r2, ip, r2
 80167a4:	ea20 0202 	bic.w	r2, r0, r2
 80167a8:	6362      	str	r2, [r4, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80167aa:	681c      	ldr	r4, [r3, #0]
 80167ac:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80167ae:	684a      	ldr	r2, [r1, #4]
 80167b0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80167b4:	3a05      	subs	r2, #5
 80167b6:	f8b1 c000 	ldrh.w	ip, [r1]
 80167ba:	fa0c f202 	lsl.w	r2, ip, r2
 80167be:	4302      	orrs	r2, r0
 80167c0:	6362      	str	r2, [r4, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80167c2:	6818      	ldr	r0, [r3, #0]
 80167c4:	4a43      	ldr	r2, [pc, #268]	@ (80168d4 <HAL_ADC_ConfigChannel+0x198>)
 80167c6:	4290      	cmp	r0, r2
 80167c8:	d050      	beq.n	801686c <HAL_ADC_ConfigChannel+0x130>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80167ca:	6818      	ldr	r0, [r3, #0]
 80167cc:	4a41      	ldr	r2, [pc, #260]	@ (80168d4 <HAL_ADC_ConfigChannel+0x198>)
 80167ce:	4290      	cmp	r0, r2
 80167d0:	d059      	beq.n	8016886 <HAL_ADC_ConfigChannel+0x14a>
  __HAL_UNLOCK(hadc);
 80167d2:	2000      	movs	r0, #0
 80167d4:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
}
 80167d8:	b002      	add	sp, #8
 80167da:	bc30      	pop	{r4, r5}
 80167dc:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80167de:	6804      	ldr	r4, [r0, #0]
 80167e0:	6920      	ldr	r0, [r4, #16]
 80167e2:	b292      	uxth	r2, r2
 80167e4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80167e8:	f04f 0c07 	mov.w	ip, #7
 80167ec:	fa0c f202 	lsl.w	r2, ip, r2
 80167f0:	ea20 0202 	bic.w	r2, r0, r2
 80167f4:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80167f6:	681c      	ldr	r4, [r3, #0]
 80167f8:	6920      	ldr	r0, [r4, #16]
 80167fa:	880a      	ldrh	r2, [r1, #0]
 80167fc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016800:	688d      	ldr	r5, [r1, #8]
 8016802:	fa05 f202 	lsl.w	r2, r5, r2
 8016806:	4302      	orrs	r2, r0
 8016808:	6122      	str	r2, [r4, #16]
 801680a:	e7bf      	b.n	801678c <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 801680c:	2a0c      	cmp	r2, #12
 801680e:	d816      	bhi.n	801683e <HAL_ADC_ConfigChannel+0x102>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8016810:	681d      	ldr	r5, [r3, #0]
 8016812:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8016814:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8016818:	3a23      	subs	r2, #35	@ 0x23
 801681a:	241f      	movs	r4, #31
 801681c:	fa04 f202 	lsl.w	r2, r4, r2
 8016820:	ea20 0202 	bic.w	r2, r0, r2
 8016824:	632a      	str	r2, [r5, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8016826:	681d      	ldr	r5, [r3, #0]
 8016828:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801682a:	684a      	ldr	r2, [r1, #4]
 801682c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8016830:	3a23      	subs	r2, #35	@ 0x23
 8016832:	880c      	ldrh	r4, [r1, #0]
 8016834:	fa04 f202 	lsl.w	r2, r4, r2
 8016838:	4302      	orrs	r2, r0
 801683a:	632a      	str	r2, [r5, #48]	@ 0x30
 801683c:	e7c1      	b.n	80167c2 <HAL_ADC_ConfigChannel+0x86>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 801683e:	681d      	ldr	r5, [r3, #0]
 8016840:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8016842:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8016846:	3a41      	subs	r2, #65	@ 0x41
 8016848:	241f      	movs	r4, #31
 801684a:	fa04 f202 	lsl.w	r2, r4, r2
 801684e:	ea20 0202 	bic.w	r2, r0, r2
 8016852:	62ea      	str	r2, [r5, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8016854:	681d      	ldr	r5, [r3, #0]
 8016856:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8016858:	684a      	ldr	r2, [r1, #4]
 801685a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801685e:	3a41      	subs	r2, #65	@ 0x41
 8016860:	880c      	ldrh	r4, [r1, #0]
 8016862:	fa04 f202 	lsl.w	r2, r4, r2
 8016866:	4302      	orrs	r2, r0
 8016868:	62ea      	str	r2, [r5, #44]	@ 0x2c
 801686a:	e7aa      	b.n	80167c2 <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 801686c:	680a      	ldr	r2, [r1, #0]
 801686e:	2a12      	cmp	r2, #18
 8016870:	d1ab      	bne.n	80167ca <HAL_ADC_ConfigChannel+0x8e>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8016872:	4a19      	ldr	r2, [pc, #100]	@ (80168d8 <HAL_ADC_ConfigChannel+0x19c>)
 8016874:	6850      	ldr	r0, [r2, #4]
 8016876:	f420 0000 	bic.w	r0, r0, #8388608	@ 0x800000
 801687a:	6050      	str	r0, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 801687c:	6850      	ldr	r0, [r2, #4]
 801687e:	f440 0080 	orr.w	r0, r0, #4194304	@ 0x400000
 8016882:	6050      	str	r0, [r2, #4]
 8016884:	e7a1      	b.n	80167ca <HAL_ADC_ConfigChannel+0x8e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8016886:	680a      	ldr	r2, [r1, #0]
 8016888:	4814      	ldr	r0, [pc, #80]	@ (80168dc <HAL_ADC_ConfigChannel+0x1a0>)
 801688a:	4282      	cmp	r2, r0
 801688c:	d001      	beq.n	8016892 <HAL_ADC_ConfigChannel+0x156>
 801688e:	2a11      	cmp	r2, #17
 8016890:	d19f      	bne.n	80167d2 <HAL_ADC_ConfigChannel+0x96>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8016892:	4a11      	ldr	r2, [pc, #68]	@ (80168d8 <HAL_ADC_ConfigChannel+0x19c>)
 8016894:	6850      	ldr	r0, [r2, #4]
 8016896:	f420 0080 	bic.w	r0, r0, #4194304	@ 0x400000
 801689a:	6050      	str	r0, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 801689c:	6850      	ldr	r0, [r2, #4]
 801689e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80168a2:	6050      	str	r0, [r2, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80168a4:	6809      	ldr	r1, [r1, #0]
 80168a6:	4a0d      	ldr	r2, [pc, #52]	@ (80168dc <HAL_ADC_ConfigChannel+0x1a0>)
 80168a8:	4291      	cmp	r1, r2
 80168aa:	d192      	bne.n	80167d2 <HAL_ADC_ConfigChannel+0x96>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80168ac:	4a0c      	ldr	r2, [pc, #48]	@ (80168e0 <HAL_ADC_ConfigChannel+0x1a4>)
 80168ae:	6812      	ldr	r2, [r2, #0]
 80168b0:	490c      	ldr	r1, [pc, #48]	@ (80168e4 <HAL_ADC_ConfigChannel+0x1a8>)
 80168b2:	fba1 1202 	umull	r1, r2, r1, r2
 80168b6:	0c92      	lsrs	r2, r2, #18
 80168b8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80168bc:	0052      	lsls	r2, r2, #1
 80168be:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 80168c0:	9a01      	ldr	r2, [sp, #4]
 80168c2:	2a00      	cmp	r2, #0
 80168c4:	d085      	beq.n	80167d2 <HAL_ADC_ConfigChannel+0x96>
        counter--;
 80168c6:	9a01      	ldr	r2, [sp, #4]
 80168c8:	3a01      	subs	r2, #1
 80168ca:	9201      	str	r2, [sp, #4]
 80168cc:	e7f8      	b.n	80168c0 <HAL_ADC_ConfigChannel+0x184>
  __HAL_LOCK(hadc);
 80168ce:	2002      	movs	r0, #2
 80168d0:	e782      	b.n	80167d8 <HAL_ADC_ConfigChannel+0x9c>
 80168d2:	bf00      	nop
 80168d4:	40012000 	.word	0x40012000
 80168d8:	40012300 	.word	0x40012300
 80168dc:	10000012 	.word	0x10000012
 80168e0:	20000018 	.word	0x20000018
 80168e4:	431bde83 	.word	0x431bde83

080168e8 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 80168e8:	2800      	cmp	r0, #0
 80168ea:	db07      	blt.n	80168fc <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80168ec:	f000 021f 	and.w	r2, r0, #31
 80168f0:	0940      	lsrs	r0, r0, #5
 80168f2:	2301      	movs	r3, #1
 80168f4:	4093      	lsls	r3, r2
 80168f6:	4a02      	ldr	r2, [pc, #8]	@ (8016900 <__NVIC_EnableIRQ+0x18>)
 80168f8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80168fc:	4770      	bx	lr
 80168fe:	bf00      	nop
 8016900:	e000e100 	.word	0xe000e100

08016904 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8016904:	2800      	cmp	r0, #0
 8016906:	db08      	blt.n	801691a <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016908:	0109      	lsls	r1, r1, #4
 801690a:	b2c9      	uxtb	r1, r1
 801690c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8016910:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8016914:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8016918:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801691a:	f000 000f 	and.w	r0, r0, #15
 801691e:	0109      	lsls	r1, r1, #4
 8016920:	b2c9      	uxtb	r1, r1
 8016922:	4b01      	ldr	r3, [pc, #4]	@ (8016928 <__NVIC_SetPriority+0x24>)
 8016924:	5419      	strb	r1, [r3, r0]
  }
}
 8016926:	4770      	bx	lr
 8016928:	e000ed14 	.word	0xe000ed14

0801692c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801692c:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801692e:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8016932:	f1c0 0c07 	rsb	ip, r0, #7
 8016936:	f1bc 0f04 	cmp.w	ip, #4
 801693a:	bf28      	it	cs
 801693c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8016940:	1d03      	adds	r3, r0, #4
 8016942:	2b06      	cmp	r3, #6
 8016944:	d90f      	bls.n	8016966 <NVIC_EncodePriority+0x3a>
 8016946:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8016948:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 801694c:	fa0e f00c 	lsl.w	r0, lr, ip
 8016950:	ea21 0100 	bic.w	r1, r1, r0
 8016954:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8016956:	fa0e fe03 	lsl.w	lr, lr, r3
 801695a:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 801695e:	ea41 0002 	orr.w	r0, r1, r2
 8016962:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8016966:	2300      	movs	r3, #0
 8016968:	e7ee      	b.n	8016948 <NVIC_EncodePriority+0x1c>
	...

0801696c <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 801696c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8016970:	4905      	ldr	r1, [pc, #20]	@ (8016988 <__NVIC_SystemReset+0x1c>)
 8016972:	68ca      	ldr	r2, [r1, #12]
 8016974:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8016978:	4b04      	ldr	r3, [pc, #16]	@ (801698c <__NVIC_SystemReset+0x20>)
 801697a:	4313      	orrs	r3, r2
 801697c:	60cb      	str	r3, [r1, #12]
 801697e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8016982:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8016984:	e7fd      	b.n	8016982 <__NVIC_SystemReset+0x16>
 8016986:	bf00      	nop
 8016988:	e000ed00 	.word	0xe000ed00
 801698c:	05fa0004 	.word	0x05fa0004

08016990 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8016990:	4a07      	ldr	r2, [pc, #28]	@ (80169b0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8016992:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8016994:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8016998:	041b      	lsls	r3, r3, #16
 801699a:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801699c:	0200      	lsls	r0, r0, #8
 801699e:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80169a2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80169a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80169a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80169ac:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80169ae:	4770      	bx	lr
 80169b0:	e000ed00 	.word	0xe000ed00

080169b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80169b4:	b510      	push	{r4, lr}
 80169b6:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80169b8:	4b05      	ldr	r3, [pc, #20]	@ (80169d0 <HAL_NVIC_SetPriority+0x1c>)
 80169ba:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80169bc:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80169c0:	f7ff ffb4 	bl	801692c <NVIC_EncodePriority>
 80169c4:	4601      	mov	r1, r0
 80169c6:	4620      	mov	r0, r4
 80169c8:	f7ff ff9c 	bl	8016904 <__NVIC_SetPriority>
}
 80169cc:	bd10      	pop	{r4, pc}
 80169ce:	bf00      	nop
 80169d0:	e000ed00 	.word	0xe000ed00

080169d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80169d4:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80169d6:	f7ff ff87 	bl	80168e8 <__NVIC_EnableIRQ>
}
 80169da:	bd08      	pop	{r3, pc}

080169dc <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80169dc:	b508      	push	{r3, lr}
  /* System Reset */
  NVIC_SystemReset();
 80169de:	f7ff ffc5 	bl	801696c <__NVIC_SystemReset>
	...

080169e4 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80169e4:	2300      	movs	r3, #0
 80169e6:	2b0f      	cmp	r3, #15
 80169e8:	f200 80d7 	bhi.w	8016b9a <HAL_GPIO_Init+0x1b6>
{
 80169ec:	b570      	push	{r4, r5, r6, lr}
 80169ee:	b082      	sub	sp, #8
 80169f0:	e065      	b.n	8016abe <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80169f2:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80169f4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80169f8:	2403      	movs	r4, #3
 80169fa:	fa04 f40e 	lsl.w	r4, r4, lr
 80169fe:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8016a02:	68cc      	ldr	r4, [r1, #12]
 8016a04:	fa04 f40e 	lsl.w	r4, r4, lr
 8016a08:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8016a0a:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8016a0c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8016a0e:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8016a12:	684a      	ldr	r2, [r1, #4]
 8016a14:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8016a18:	409a      	lsls	r2, r3
 8016a1a:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8016a1c:	6042      	str	r2, [r0, #4]
 8016a1e:	e05c      	b.n	8016ada <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8016a20:	08dc      	lsrs	r4, r3, #3
 8016a22:	3408      	adds	r4, #8
 8016a24:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8016a28:	f003 0507 	and.w	r5, r3, #7
 8016a2c:	00ad      	lsls	r5, r5, #2
 8016a2e:	f04f 0e0f 	mov.w	lr, #15
 8016a32:	fa0e fe05 	lsl.w	lr, lr, r5
 8016a36:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8016a3a:	690a      	ldr	r2, [r1, #16]
 8016a3c:	40aa      	lsls	r2, r5
 8016a3e:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8016a42:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8016a46:	e05c      	b.n	8016b02 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8016a48:	2204      	movs	r2, #4
 8016a4a:	e000      	b.n	8016a4e <HAL_GPIO_Init+0x6a>
 8016a4c:	2200      	movs	r2, #0
 8016a4e:	fa02 f20e 	lsl.w	r2, r2, lr
 8016a52:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8016a54:	3402      	adds	r4, #2
 8016a56:	4d51      	ldr	r5, [pc, #324]	@ (8016b9c <HAL_GPIO_Init+0x1b8>)
 8016a58:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8016a5c:	4a50      	ldr	r2, [pc, #320]	@ (8016ba0 <HAL_GPIO_Init+0x1bc>)
 8016a5e:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8016a60:	ea6f 020c 	mvn.w	r2, ip
 8016a64:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8016a68:	684e      	ldr	r6, [r1, #4]
 8016a6a:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8016a6e:	d001      	beq.n	8016a74 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8016a70:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8016a74:	4c4a      	ldr	r4, [pc, #296]	@ (8016ba0 <HAL_GPIO_Init+0x1bc>)
 8016a76:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8016a78:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8016a7a:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8016a7e:	684e      	ldr	r6, [r1, #4]
 8016a80:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8016a84:	d001      	beq.n	8016a8a <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8016a86:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8016a8a:	4c45      	ldr	r4, [pc, #276]	@ (8016ba0 <HAL_GPIO_Init+0x1bc>)
 8016a8c:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8016a8e:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8016a90:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8016a94:	684e      	ldr	r6, [r1, #4]
 8016a96:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8016a9a:	d001      	beq.n	8016aa0 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8016a9c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8016aa0:	4c3f      	ldr	r4, [pc, #252]	@ (8016ba0 <HAL_GPIO_Init+0x1bc>)
 8016aa2:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8016aa4:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8016aa6:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8016aa8:	684d      	ldr	r5, [r1, #4]
 8016aaa:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8016aae:	d001      	beq.n	8016ab4 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8016ab0:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8016ab4:	4c3a      	ldr	r4, [pc, #232]	@ (8016ba0 <HAL_GPIO_Init+0x1bc>)
 8016ab6:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8016ab8:	3301      	adds	r3, #1
 8016aba:	2b0f      	cmp	r3, #15
 8016abc:	d86b      	bhi.n	8016b96 <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8016abe:	2201      	movs	r2, #1
 8016ac0:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8016ac2:	680c      	ldr	r4, [r1, #0]
 8016ac4:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8016ac8:	ea32 0404 	bics.w	r4, r2, r4
 8016acc:	d1f4      	bne.n	8016ab8 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8016ace:	684c      	ldr	r4, [r1, #4]
 8016ad0:	f004 0403 	and.w	r4, r4, #3
 8016ad4:	3c01      	subs	r4, #1
 8016ad6:	2c01      	cmp	r4, #1
 8016ad8:	d98b      	bls.n	80169f2 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8016ada:	684a      	ldr	r2, [r1, #4]
 8016adc:	f002 0203 	and.w	r2, r2, #3
 8016ae0:	2a03      	cmp	r2, #3
 8016ae2:	d009      	beq.n	8016af8 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8016ae4:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8016ae6:	005d      	lsls	r5, r3, #1
 8016ae8:	2203      	movs	r2, #3
 8016aea:	40aa      	lsls	r2, r5
 8016aec:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8016af0:	688a      	ldr	r2, [r1, #8]
 8016af2:	40aa      	lsls	r2, r5
 8016af4:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8016af6:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8016af8:	684a      	ldr	r2, [r1, #4]
 8016afa:	f002 0203 	and.w	r2, r2, #3
 8016afe:	2a02      	cmp	r2, #2
 8016b00:	d08e      	beq.n	8016a20 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8016b02:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8016b04:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8016b08:	2203      	movs	r2, #3
 8016b0a:	fa02 f20e 	lsl.w	r2, r2, lr
 8016b0e:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8016b12:	684a      	ldr	r2, [r1, #4]
 8016b14:	f002 0203 	and.w	r2, r2, #3
 8016b18:	fa02 f20e 	lsl.w	r2, r2, lr
 8016b1c:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8016b1e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8016b20:	684a      	ldr	r2, [r1, #4]
 8016b22:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8016b26:	d0c7      	beq.n	8016ab8 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8016b28:	2200      	movs	r2, #0
 8016b2a:	9201      	str	r2, [sp, #4]
 8016b2c:	4a1d      	ldr	r2, [pc, #116]	@ (8016ba4 <HAL_GPIO_Init+0x1c0>)
 8016b2e:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8016b30:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8016b34:	6454      	str	r4, [r2, #68]	@ 0x44
 8016b36:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8016b38:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8016b3c:	9201      	str	r2, [sp, #4]
 8016b3e:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8016b40:	089c      	lsrs	r4, r3, #2
 8016b42:	1ca5      	adds	r5, r4, #2
 8016b44:	4a15      	ldr	r2, [pc, #84]	@ (8016b9c <HAL_GPIO_Init+0x1b8>)
 8016b46:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8016b4a:	f003 0e03 	and.w	lr, r3, #3
 8016b4e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8016b52:	220f      	movs	r2, #15
 8016b54:	fa02 f20e 	lsl.w	r2, r2, lr
 8016b58:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8016b5c:	4a12      	ldr	r2, [pc, #72]	@ (8016ba8 <HAL_GPIO_Init+0x1c4>)
 8016b5e:	4290      	cmp	r0, r2
 8016b60:	f43f af74 	beq.w	8016a4c <HAL_GPIO_Init+0x68>
 8016b64:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8016b68:	4290      	cmp	r0, r2
 8016b6a:	d00e      	beq.n	8016b8a <HAL_GPIO_Init+0x1a6>
 8016b6c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8016b70:	4290      	cmp	r0, r2
 8016b72:	d00c      	beq.n	8016b8e <HAL_GPIO_Init+0x1aa>
 8016b74:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8016b78:	4290      	cmp	r0, r2
 8016b7a:	d00a      	beq.n	8016b92 <HAL_GPIO_Init+0x1ae>
 8016b7c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8016b80:	4290      	cmp	r0, r2
 8016b82:	f43f af61 	beq.w	8016a48 <HAL_GPIO_Init+0x64>
 8016b86:	2207      	movs	r2, #7
 8016b88:	e761      	b.n	8016a4e <HAL_GPIO_Init+0x6a>
 8016b8a:	2201      	movs	r2, #1
 8016b8c:	e75f      	b.n	8016a4e <HAL_GPIO_Init+0x6a>
 8016b8e:	2202      	movs	r2, #2
 8016b90:	e75d      	b.n	8016a4e <HAL_GPIO_Init+0x6a>
 8016b92:	2203      	movs	r2, #3
 8016b94:	e75b      	b.n	8016a4e <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8016b96:	b002      	add	sp, #8
 8016b98:	bd70      	pop	{r4, r5, r6, pc}
 8016b9a:	4770      	bx	lr
 8016b9c:	40013800 	.word	0x40013800
 8016ba0:	40013c00 	.word	0x40013c00
 8016ba4:	40023800 	.word	0x40023800
 8016ba8:	40020000 	.word	0x40020000

08016bac <HAL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8016bac:	2300      	movs	r3, #0
 8016bae:	2b0f      	cmp	r3, #15
 8016bb0:	d87c      	bhi.n	8016cac <HAL_GPIO_DeInit+0x100>
{
 8016bb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016bb4:	e02d      	b.n	8016c12 <HAL_GPIO_DeInit+0x66>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8016bb6:	2504      	movs	r5, #4
 8016bb8:	e000      	b.n	8016bbc <HAL_GPIO_DeInit+0x10>
 8016bba:	2500      	movs	r5, #0
 8016bbc:	fa05 f50c 	lsl.w	r5, r5, ip
 8016bc0:	42a5      	cmp	r5, r4
 8016bc2:	d057      	beq.n	8016c74 <HAL_GPIO_DeInit+0xc8>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8016bc4:	6804      	ldr	r4, [r0, #0]
 8016bc6:	005d      	lsls	r5, r3, #1
 8016bc8:	f04f 0c03 	mov.w	ip, #3
 8016bcc:	fa0c fc05 	lsl.w	ip, ip, r5
 8016bd0:	ea24 040c 	bic.w	r4, r4, ip
 8016bd4:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8016bd6:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8016bda:	f10e 0e08 	add.w	lr, lr, #8
 8016bde:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8016be2:	f003 0607 	and.w	r6, r3, #7
 8016be6:	00b6      	lsls	r6, r6, #2
 8016be8:	250f      	movs	r5, #15
 8016bea:	40b5      	lsls	r5, r6
 8016bec:	ea24 0405 	bic.w	r4, r4, r5
 8016bf0:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8016bf4:	68c4      	ldr	r4, [r0, #12]
 8016bf6:	ea24 040c 	bic.w	r4, r4, ip
 8016bfa:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8016bfc:	6844      	ldr	r4, [r0, #4]
 8016bfe:	ea24 0202 	bic.w	r2, r4, r2
 8016c02:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8016c04:	6882      	ldr	r2, [r0, #8]
 8016c06:	ea22 020c 	bic.w	r2, r2, ip
 8016c0a:	6082      	str	r2, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8016c0c:	3301      	adds	r3, #1
 8016c0e:	2b0f      	cmp	r3, #15
 8016c10:	d84b      	bhi.n	8016caa <HAL_GPIO_DeInit+0xfe>
    ioposition = 0x01U << position;
 8016c12:	2201      	movs	r2, #1
 8016c14:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
 8016c16:	ea02 0601 	and.w	r6, r2, r1
    if(iocurrent == ioposition)
 8016c1a:	ea32 0401 	bics.w	r4, r2, r1
 8016c1e:	d1f5      	bne.n	8016c0c <HAL_GPIO_DeInit+0x60>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8016c20:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 8016c24:	f10e 0502 	add.w	r5, lr, #2
 8016c28:	4c21      	ldr	r4, [pc, #132]	@ (8016cb0 <HAL_GPIO_DeInit+0x104>)
 8016c2a:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8016c2e:	f003 0c03 	and.w	ip, r3, #3
 8016c32:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8016c36:	250f      	movs	r5, #15
 8016c38:	fa05 f70c 	lsl.w	r7, r5, ip
 8016c3c:	403c      	ands	r4, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8016c3e:	4d1d      	ldr	r5, [pc, #116]	@ (8016cb4 <HAL_GPIO_DeInit+0x108>)
 8016c40:	42a8      	cmp	r0, r5
 8016c42:	d0ba      	beq.n	8016bba <HAL_GPIO_DeInit+0xe>
 8016c44:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8016c48:	42a8      	cmp	r0, r5
 8016c4a:	d00d      	beq.n	8016c68 <HAL_GPIO_DeInit+0xbc>
 8016c4c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8016c50:	42a8      	cmp	r0, r5
 8016c52:	d00b      	beq.n	8016c6c <HAL_GPIO_DeInit+0xc0>
 8016c54:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8016c58:	42a8      	cmp	r0, r5
 8016c5a:	d009      	beq.n	8016c70 <HAL_GPIO_DeInit+0xc4>
 8016c5c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8016c60:	42a8      	cmp	r0, r5
 8016c62:	d0a8      	beq.n	8016bb6 <HAL_GPIO_DeInit+0xa>
 8016c64:	2507      	movs	r5, #7
 8016c66:	e7a9      	b.n	8016bbc <HAL_GPIO_DeInit+0x10>
 8016c68:	2501      	movs	r5, #1
 8016c6a:	e7a7      	b.n	8016bbc <HAL_GPIO_DeInit+0x10>
 8016c6c:	2502      	movs	r5, #2
 8016c6e:	e7a5      	b.n	8016bbc <HAL_GPIO_DeInit+0x10>
 8016c70:	2503      	movs	r5, #3
 8016c72:	e7a3      	b.n	8016bbc <HAL_GPIO_DeInit+0x10>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8016c74:	4c10      	ldr	r4, [pc, #64]	@ (8016cb8 <HAL_GPIO_DeInit+0x10c>)
 8016c76:	6825      	ldr	r5, [r4, #0]
 8016c78:	ea25 0506 	bic.w	r5, r5, r6
 8016c7c:	6025      	str	r5, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8016c7e:	6865      	ldr	r5, [r4, #4]
 8016c80:	ea25 0506 	bic.w	r5, r5, r6
 8016c84:	6065      	str	r5, [r4, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8016c86:	68e5      	ldr	r5, [r4, #12]
 8016c88:	ea25 0506 	bic.w	r5, r5, r6
 8016c8c:	60e5      	str	r5, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8016c8e:	68a5      	ldr	r5, [r4, #8]
 8016c90:	ea25 0506 	bic.w	r5, r5, r6
 8016c94:	60a5      	str	r5, [r4, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8016c96:	4e06      	ldr	r6, [pc, #24]	@ (8016cb0 <HAL_GPIO_DeInit+0x104>)
 8016c98:	f10e 0402 	add.w	r4, lr, #2
 8016c9c:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 8016ca0:	ea25 0507 	bic.w	r5, r5, r7
 8016ca4:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
 8016ca8:	e78c      	b.n	8016bc4 <HAL_GPIO_DeInit+0x18>
    }
  }
}
 8016caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016cac:	4770      	bx	lr
 8016cae:	bf00      	nop
 8016cb0:	40013800 	.word	0x40013800
 8016cb4:	40020000 	.word	0x40020000
 8016cb8:	40013c00 	.word	0x40013c00

08016cbc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8016cbc:	6903      	ldr	r3, [r0, #16]
 8016cbe:	4219      	tst	r1, r3
 8016cc0:	d001      	beq.n	8016cc6 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8016cc2:	2001      	movs	r0, #1
 8016cc4:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8016cc6:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8016cc8:	4770      	bx	lr

08016cca <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8016cca:	b10a      	cbz	r2, 8016cd0 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8016ccc:	6181      	str	r1, [r0, #24]
 8016cce:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8016cd0:	0409      	lsls	r1, r1, #16
 8016cd2:	6181      	str	r1, [r0, #24]
  }
}
 8016cd4:	4770      	bx	lr

08016cd6 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8016cd6:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8016cd8:	ea01 0203 	and.w	r2, r1, r3
 8016cdc:	ea21 0103 	bic.w	r1, r1, r3
 8016ce0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016ce4:	6181      	str	r1, [r0, #24]
}
 8016ce6:	4770      	bx	lr

08016ce8 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8016ce8:	6803      	ldr	r3, [r0, #0]
 8016cea:	695a      	ldr	r2, [r3, #20]
 8016cec:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8016cf0:	d101      	bne.n	8016cf6 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8016cf2:	2000      	movs	r0, #0
}
 8016cf4:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016cf6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8016cfa:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8016cfc:	2300      	movs	r3, #0
 8016cfe:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8016d00:	2220      	movs	r2, #32
 8016d02:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8016d06:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8016d0a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8016d0c:	f042 0204 	orr.w	r2, r2, #4
 8016d10:	6402      	str	r2, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hi2c);
 8016d12:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 8016d16:	2001      	movs	r0, #1
 8016d18:	4770      	bx	lr

08016d1a <I2C_WaitOnFlagUntilTimeout>:
{
 8016d1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d1e:	4606      	mov	r6, r0
 8016d20:	460c      	mov	r4, r1
 8016d22:	4617      	mov	r7, r2
 8016d24:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8016d26:	e03b      	b.n	8016da0 <I2C_WaitOnFlagUntilTimeout+0x86>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016d28:	f7ff fc28 	bl	801657c <HAL_GetTick>
 8016d2c:	9b06      	ldr	r3, [sp, #24]
 8016d2e:	1ac0      	subs	r0, r0, r3
 8016d30:	4540      	cmp	r0, r8
 8016d32:	d802      	bhi.n	8016d3a <I2C_WaitOnFlagUntilTimeout+0x20>
 8016d34:	f1b8 0f00 	cmp.w	r8, #0
 8016d38:	d132      	bne.n	8016da0 <I2C_WaitOnFlagUntilTimeout+0x86>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8016d3a:	2d01      	cmp	r5, #1
 8016d3c:	d018      	beq.n	8016d70 <I2C_WaitOnFlagUntilTimeout+0x56>
 8016d3e:	6833      	ldr	r3, [r6, #0]
 8016d40:	699b      	ldr	r3, [r3, #24]
 8016d42:	ea24 0303 	bic.w	r3, r4, r3
 8016d46:	b29b      	uxth	r3, r3
 8016d48:	fab3 f383 	clz	r3, r3
 8016d4c:	095b      	lsrs	r3, r3, #5
 8016d4e:	429f      	cmp	r7, r3
 8016d50:	d126      	bne.n	8016da0 <I2C_WaitOnFlagUntilTimeout+0x86>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8016d52:	2300      	movs	r3, #0
 8016d54:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8016d56:	2220      	movs	r2, #32
 8016d58:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8016d5c:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8016d60:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8016d62:	f042 0220 	orr.w	r2, r2, #32
 8016d66:	6432      	str	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8016d68:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          return HAL_ERROR;
 8016d6c:	2001      	movs	r0, #1
 8016d6e:	e027      	b.n	8016dc0 <I2C_WaitOnFlagUntilTimeout+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8016d70:	6833      	ldr	r3, [r6, #0]
 8016d72:	695b      	ldr	r3, [r3, #20]
 8016d74:	ea24 0303 	bic.w	r3, r4, r3
 8016d78:	b29b      	uxth	r3, r3
 8016d7a:	fab3 f383 	clz	r3, r3
 8016d7e:	095b      	lsrs	r3, r3, #5
 8016d80:	e7e5      	b.n	8016d4e <I2C_WaitOnFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8016d82:	6833      	ldr	r3, [r6, #0]
 8016d84:	695b      	ldr	r3, [r3, #20]
 8016d86:	ea24 0c03 	bic.w	ip, r4, r3
 8016d8a:	fa1f fc8c 	uxth.w	ip, ip
 8016d8e:	fabc fc8c 	clz	ip, ip
 8016d92:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8016d96:	4567      	cmp	r7, ip
 8016d98:	d111      	bne.n	8016dbe <I2C_WaitOnFlagUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 8016d9a:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8016d9e:	d1c3      	bne.n	8016d28 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8016da0:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8016da4:	2d01      	cmp	r5, #1
 8016da6:	d0ec      	beq.n	8016d82 <I2C_WaitOnFlagUntilTimeout+0x68>
 8016da8:	6833      	ldr	r3, [r6, #0]
 8016daa:	699b      	ldr	r3, [r3, #24]
 8016dac:	ea24 0c03 	bic.w	ip, r4, r3
 8016db0:	fa1f fc8c 	uxth.w	ip, ip
 8016db4:	fabc fc8c 	clz	ip, ip
 8016db8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8016dbc:	e7eb      	b.n	8016d96 <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 8016dbe:	2000      	movs	r0, #0
}
 8016dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8016dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016dc8:	4605      	mov	r5, r0
 8016dca:	460e      	mov	r6, r1
 8016dcc:	4690      	mov	r8, r2
 8016dce:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8016dd0:	e053      	b.n	8016e7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016dd2:	681a      	ldr	r2, [r3, #0]
 8016dd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016dd8:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016dda:	682b      	ldr	r3, [r5, #0]
 8016ddc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8016de0:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8016de2:	2300      	movs	r3, #0
 8016de4:	632b      	str	r3, [r5, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8016de6:	2220      	movs	r2, #32
 8016de8:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8016dec:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8016df0:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8016df2:	f042 0204 	orr.w	r2, r2, #4
 8016df6:	642a      	str	r2, [r5, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8016df8:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 8016dfc:	2001      	movs	r0, #1
 8016dfe:	e04a      	b.n	8016e96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016e00:	f7ff fbbc 	bl	801657c <HAL_GetTick>
 8016e04:	eba0 0009 	sub.w	r0, r0, r9
 8016e08:	4540      	cmp	r0, r8
 8016e0a:	d802      	bhi.n	8016e12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
 8016e0c:	f1b8 0f00 	cmp.w	r8, #0
 8016e10:	d133      	bne.n	8016e7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8016e12:	2f01      	cmp	r7, #1
 8016e14:	d017      	beq.n	8016e46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x82>
 8016e16:	682b      	ldr	r3, [r5, #0]
 8016e18:	699b      	ldr	r3, [r3, #24]
 8016e1a:	ea26 0303 	bic.w	r3, r6, r3
 8016e1e:	b29b      	uxth	r3, r3
 8016e20:	3b00      	subs	r3, #0
 8016e22:	bf18      	it	ne
 8016e24:	2301      	movne	r3, #1
 8016e26:	b343      	cbz	r3, 8016e7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8016e28:	2300      	movs	r3, #0
 8016e2a:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8016e2c:	2220      	movs	r2, #32
 8016e2e:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8016e32:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8016e36:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8016e38:	f042 0220 	orr.w	r2, r2, #32
 8016e3c:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8016e3e:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 8016e42:	2001      	movs	r0, #1
 8016e44:	e027      	b.n	8016e96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8016e46:	682b      	ldr	r3, [r5, #0]
 8016e48:	695b      	ldr	r3, [r3, #20]
 8016e4a:	ea26 0303 	bic.w	r3, r6, r3
 8016e4e:	b29b      	uxth	r3, r3
 8016e50:	3b00      	subs	r3, #0
 8016e52:	bf18      	it	ne
 8016e54:	2301      	movne	r3, #1
 8016e56:	e7e6      	b.n	8016e26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8016e58:	682b      	ldr	r3, [r5, #0]
 8016e5a:	699c      	ldr	r4, [r3, #24]
 8016e5c:	ea26 0404 	bic.w	r4, r6, r4
 8016e60:	b2a4      	uxth	r4, r4
 8016e62:	3c00      	subs	r4, #0
 8016e64:	bf18      	it	ne
 8016e66:	2401      	movne	r4, #1
 8016e68:	b1a4      	cbz	r4, 8016e94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8016e6a:	682b      	ldr	r3, [r5, #0]
 8016e6c:	695a      	ldr	r2, [r3, #20]
 8016e6e:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8016e72:	d1ae      	bne.n	8016dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8016e74:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8016e78:	d1c2      	bne.n	8016e00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8016e7a:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8016e7e:	2f01      	cmp	r7, #1
 8016e80:	d1ea      	bne.n	8016e58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
 8016e82:	682b      	ldr	r3, [r5, #0]
 8016e84:	695c      	ldr	r4, [r3, #20]
 8016e86:	ea26 0404 	bic.w	r4, r6, r4
 8016e8a:	b2a4      	uxth	r4, r4
 8016e8c:	3c00      	subs	r4, #0
 8016e8e:	bf18      	it	ne
 8016e90:	2401      	movne	r4, #1
 8016e92:	e7e9      	b.n	8016e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
  return HAL_OK;
 8016e94:	2000      	movs	r0, #0
}
 8016e96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08016e9c <I2C_MasterRequestWrite>:
{
 8016e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e9e:	b083      	sub	sp, #12
 8016ea0:	4604      	mov	r4, r0
 8016ea2:	460d      	mov	r5, r1
 8016ea4:	4616      	mov	r6, r2
 8016ea6:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8016ea8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8016eaa:	2b08      	cmp	r3, #8
 8016eac:	d00d      	beq.n	8016eca <I2C_MasterRequestWrite+0x2e>
 8016eae:	2b01      	cmp	r3, #1
 8016eb0:	d00b      	beq.n	8016eca <I2C_MasterRequestWrite+0x2e>
 8016eb2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8016eb6:	d008      	beq.n	8016eca <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8016eb8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016eba:	2b12      	cmp	r3, #18
 8016ebc:	d10a      	bne.n	8016ed4 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8016ebe:	6802      	ldr	r2, [r0, #0]
 8016ec0:	6813      	ldr	r3, [r2, #0]
 8016ec2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8016ec6:	6013      	str	r3, [r2, #0]
 8016ec8:	e004      	b.n	8016ed4 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8016eca:	6822      	ldr	r2, [r4, #0]
 8016ecc:	6813      	ldr	r3, [r2, #0]
 8016ece:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8016ed2:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8016ed4:	9700      	str	r7, [sp, #0]
 8016ed6:	4633      	mov	r3, r6
 8016ed8:	2200      	movs	r2, #0
 8016eda:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8016ede:	4620      	mov	r0, r4
 8016ee0:	f7ff ff1b 	bl	8016d1a <I2C_WaitOnFlagUntilTimeout>
 8016ee4:	b980      	cbnz	r0, 8016f08 <I2C_MasterRequestWrite+0x6c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8016ee6:	6923      	ldr	r3, [r4, #16]
 8016ee8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8016eec:	d116      	bne.n	8016f1c <I2C_MasterRequestWrite+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8016eee:	6823      	ldr	r3, [r4, #0]
 8016ef0:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 8016ef4:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8016ef6:	463b      	mov	r3, r7
 8016ef8:	4632      	mov	r2, r6
 8016efa:	4913      	ldr	r1, [pc, #76]	@ (8016f48 <I2C_MasterRequestWrite+0xac>)
 8016efc:	4620      	mov	r0, r4
 8016efe:	f7ff ff61 	bl	8016dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8016f02:	b9f8      	cbnz	r0, 8016f44 <I2C_MasterRequestWrite+0xa8>
}
 8016f04:	b003      	add	sp, #12
 8016f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8016f08:	6823      	ldr	r3, [r4, #0]
 8016f0a:	681b      	ldr	r3, [r3, #0]
 8016f0c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8016f10:	d002      	beq.n	8016f18 <I2C_MasterRequestWrite+0x7c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8016f12:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016f16:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8016f18:	2003      	movs	r0, #3
 8016f1a:	e7f3      	b.n	8016f04 <I2C_MasterRequestWrite+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8016f1c:	11eb      	asrs	r3, r5, #7
 8016f1e:	6822      	ldr	r2, [r4, #0]
 8016f20:	f003 0306 	and.w	r3, r3, #6
 8016f24:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8016f28:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8016f2a:	463b      	mov	r3, r7
 8016f2c:	4632      	mov	r2, r6
 8016f2e:	4907      	ldr	r1, [pc, #28]	@ (8016f4c <I2C_MasterRequestWrite+0xb0>)
 8016f30:	4620      	mov	r0, r4
 8016f32:	f7ff ff47 	bl	8016dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8016f36:	b918      	cbnz	r0, 8016f40 <I2C_MasterRequestWrite+0xa4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8016f38:	6823      	ldr	r3, [r4, #0]
 8016f3a:	b2ed      	uxtb	r5, r5
 8016f3c:	611d      	str	r5, [r3, #16]
 8016f3e:	e7da      	b.n	8016ef6 <I2C_MasterRequestWrite+0x5a>
      return HAL_ERROR;
 8016f40:	2001      	movs	r0, #1
 8016f42:	e7df      	b.n	8016f04 <I2C_MasterRequestWrite+0x68>
    return HAL_ERROR;
 8016f44:	2001      	movs	r0, #1
 8016f46:	e7dd      	b.n	8016f04 <I2C_MasterRequestWrite+0x68>
 8016f48:	00010002 	.word	0x00010002
 8016f4c:	00010008 	.word	0x00010008

08016f50 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8016f50:	b570      	push	{r4, r5, r6, lr}
 8016f52:	4604      	mov	r4, r0
 8016f54:	460d      	mov	r5, r1
 8016f56:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8016f58:	6823      	ldr	r3, [r4, #0]
 8016f5a:	695b      	ldr	r3, [r3, #20]
 8016f5c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016f60:	d121      	bne.n	8016fa6 <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8016f62:	4620      	mov	r0, r4
 8016f64:	f7ff fec0 	bl	8016ce8 <I2C_IsAcknowledgeFailed>
 8016f68:	b9f8      	cbnz	r0, 8016faa <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8016f6a:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8016f6e:	d0f3      	beq.n	8016f58 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016f70:	f7ff fb04 	bl	801657c <HAL_GetTick>
 8016f74:	1b80      	subs	r0, r0, r6
 8016f76:	42a8      	cmp	r0, r5
 8016f78:	d801      	bhi.n	8016f7e <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8016f7a:	2d00      	cmp	r5, #0
 8016f7c:	d1ec      	bne.n	8016f58 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8016f7e:	6823      	ldr	r3, [r4, #0]
 8016f80:	695b      	ldr	r3, [r3, #20]
 8016f82:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016f86:	d1e7      	bne.n	8016f58 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8016f88:	2300      	movs	r3, #0
 8016f8a:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8016f8c:	2220      	movs	r2, #32
 8016f8e:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8016f92:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8016f96:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8016f98:	f042 0220 	orr.w	r2, r2, #32
 8016f9c:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8016f9e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8016fa2:	2001      	movs	r0, #1
 8016fa4:	e000      	b.n	8016fa8 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 8016fa6:	2000      	movs	r0, #0
}
 8016fa8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8016faa:	2001      	movs	r0, #1
 8016fac:	e7fc      	b.n	8016fa8 <I2C_WaitOnTXEFlagUntilTimeout+0x58>

08016fae <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8016fae:	b570      	push	{r4, r5, r6, lr}
 8016fb0:	4604      	mov	r4, r0
 8016fb2:	460d      	mov	r5, r1
 8016fb4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8016fb6:	6823      	ldr	r3, [r4, #0]
 8016fb8:	695b      	ldr	r3, [r3, #20]
 8016fba:	f013 0f04 	tst.w	r3, #4
 8016fbe:	d121      	bne.n	8017004 <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8016fc0:	4620      	mov	r0, r4
 8016fc2:	f7ff fe91 	bl	8016ce8 <I2C_IsAcknowledgeFailed>
 8016fc6:	b9f8      	cbnz	r0, 8017008 <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8016fc8:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8016fcc:	d0f3      	beq.n	8016fb6 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016fce:	f7ff fad5 	bl	801657c <HAL_GetTick>
 8016fd2:	1b80      	subs	r0, r0, r6
 8016fd4:	42a8      	cmp	r0, r5
 8016fd6:	d801      	bhi.n	8016fdc <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8016fd8:	2d00      	cmp	r5, #0
 8016fda:	d1ec      	bne.n	8016fb6 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8016fdc:	6823      	ldr	r3, [r4, #0]
 8016fde:	695b      	ldr	r3, [r3, #20]
 8016fe0:	f013 0f04 	tst.w	r3, #4
 8016fe4:	d1e7      	bne.n	8016fb6 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8016fe6:	2300      	movs	r3, #0
 8016fe8:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8016fea:	2220      	movs	r2, #32
 8016fec:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8016ff0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8016ff4:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8016ff6:	f042 0220 	orr.w	r2, r2, #32
 8016ffa:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8016ffc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8017000:	2001      	movs	r0, #1
 8017002:	e000      	b.n	8017006 <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 8017004:	2000      	movs	r0, #0
}
 8017006:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8017008:	2001      	movs	r0, #1
 801700a:	e7fc      	b.n	8017006 <I2C_WaitOnBTFFlagUntilTimeout+0x58>

0801700c <HAL_I2C_Init>:
  if (hi2c == NULL)
 801700c:	2800      	cmp	r0, #0
 801700e:	f000 80cc 	beq.w	80171aa <HAL_I2C_Init+0x19e>
{
 8017012:	b570      	push	{r4, r5, r6, lr}
 8017014:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8017016:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 801701a:	2b00      	cmp	r3, #0
 801701c:	d077      	beq.n	801710e <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 801701e:	2324      	movs	r3, #36	@ 0x24
 8017020:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8017024:	6822      	ldr	r2, [r4, #0]
 8017026:	6813      	ldr	r3, [r2, #0]
 8017028:	f023 0301 	bic.w	r3, r3, #1
 801702c:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 801702e:	6822      	ldr	r2, [r4, #0]
 8017030:	6813      	ldr	r3, [r2, #0]
 8017032:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8017036:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8017038:	6822      	ldr	r2, [r4, #0]
 801703a:	6813      	ldr	r3, [r2, #0]
 801703c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8017040:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8017042:	f000 fdb3 	bl	8017bac <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8017046:	6862      	ldr	r2, [r4, #4]
 8017048:	4b5a      	ldr	r3, [pc, #360]	@ (80171b4 <HAL_I2C_Init+0x1a8>)
 801704a:	429a      	cmp	r2, r3
 801704c:	d864      	bhi.n	8017118 <HAL_I2C_Init+0x10c>
 801704e:	4b5a      	ldr	r3, [pc, #360]	@ (80171b8 <HAL_I2C_Init+0x1ac>)
 8017050:	4298      	cmp	r0, r3
 8017052:	bf8c      	ite	hi
 8017054:	2300      	movhi	r3, #0
 8017056:	2301      	movls	r3, #1
 8017058:	2b00      	cmp	r3, #0
 801705a:	f040 80a8 	bne.w	80171ae <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 801705e:	4957      	ldr	r1, [pc, #348]	@ (80171bc <HAL_I2C_Init+0x1b0>)
 8017060:	fba1 3100 	umull	r3, r1, r1, r0
 8017064:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8017066:	6825      	ldr	r5, [r4, #0]
 8017068:	686a      	ldr	r2, [r5, #4]
 801706a:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 801706e:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8017072:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8017074:	6821      	ldr	r1, [r4, #0]
 8017076:	6a0a      	ldr	r2, [r1, #32]
 8017078:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 801707c:	6866      	ldr	r6, [r4, #4]
 801707e:	4d4d      	ldr	r5, [pc, #308]	@ (80171b4 <HAL_I2C_Init+0x1a8>)
 8017080:	42ae      	cmp	r6, r5
 8017082:	d84f      	bhi.n	8017124 <HAL_I2C_Init+0x118>
 8017084:	3301      	adds	r3, #1
 8017086:	4313      	orrs	r3, r2
 8017088:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 801708a:	6821      	ldr	r1, [r4, #0]
 801708c:	69ca      	ldr	r2, [r1, #28]
 801708e:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 8017092:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8017096:	6865      	ldr	r5, [r4, #4]
 8017098:	4b46      	ldr	r3, [pc, #280]	@ (80171b4 <HAL_I2C_Init+0x1a8>)
 801709a:	429d      	cmp	r5, r3
 801709c:	d84c      	bhi.n	8017138 <HAL_I2C_Init+0x12c>
 801709e:	1e43      	subs	r3, r0, #1
 80170a0:	006d      	lsls	r5, r5, #1
 80170a2:	fbb3 f3f5 	udiv	r3, r3, r5
 80170a6:	3301      	adds	r3, #1
 80170a8:	f640 70fc 	movw	r0, #4092	@ 0xffc
 80170ac:	4203      	tst	r3, r0
 80170ae:	d078      	beq.n	80171a2 <HAL_I2C_Init+0x196>
 80170b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80170b4:	431a      	orrs	r2, r3
 80170b6:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80170b8:	6821      	ldr	r1, [r4, #0]
 80170ba:	680b      	ldr	r3, [r1, #0]
 80170bc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80170c0:	69e2      	ldr	r2, [r4, #28]
 80170c2:	6a20      	ldr	r0, [r4, #32]
 80170c4:	4302      	orrs	r2, r0
 80170c6:	4313      	orrs	r3, r2
 80170c8:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80170ca:	6821      	ldr	r1, [r4, #0]
 80170cc:	688b      	ldr	r3, [r1, #8]
 80170ce:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80170d2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80170d6:	6922      	ldr	r2, [r4, #16]
 80170d8:	68e0      	ldr	r0, [r4, #12]
 80170da:	4302      	orrs	r2, r0
 80170dc:	4313      	orrs	r3, r2
 80170de:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80170e0:	6821      	ldr	r1, [r4, #0]
 80170e2:	68cb      	ldr	r3, [r1, #12]
 80170e4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80170e8:	6962      	ldr	r2, [r4, #20]
 80170ea:	69a0      	ldr	r0, [r4, #24]
 80170ec:	4302      	orrs	r2, r0
 80170ee:	4313      	orrs	r3, r2
 80170f0:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80170f2:	6822      	ldr	r2, [r4, #0]
 80170f4:	6813      	ldr	r3, [r2, #0]
 80170f6:	f043 0301 	orr.w	r3, r3, #1
 80170fa:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80170fc:	2000      	movs	r0, #0
 80170fe:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8017100:	2320      	movs	r3, #32
 8017102:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8017106:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8017108:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
}
 801710c:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 801710e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8017112:	f7fa ffbf 	bl	8012094 <HAL_I2C_MspInit>
 8017116:	e782      	b.n	801701e <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8017118:	4b29      	ldr	r3, [pc, #164]	@ (80171c0 <HAL_I2C_Init+0x1b4>)
 801711a:	4298      	cmp	r0, r3
 801711c:	bf8c      	ite	hi
 801711e:	2300      	movhi	r3, #0
 8017120:	2301      	movls	r3, #1
 8017122:	e799      	b.n	8017058 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8017124:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8017128:	fb05 f303 	mul.w	r3, r5, r3
 801712c:	4d25      	ldr	r5, [pc, #148]	@ (80171c4 <HAL_I2C_Init+0x1b8>)
 801712e:	fba5 5303 	umull	r5, r3, r5, r3
 8017132:	099b      	lsrs	r3, r3, #6
 8017134:	3301      	adds	r3, #1
 8017136:	e7a6      	b.n	8017086 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8017138:	68a6      	ldr	r6, [r4, #8]
 801713a:	b9be      	cbnz	r6, 801716c <HAL_I2C_Init+0x160>
 801713c:	1e43      	subs	r3, r0, #1
 801713e:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8017142:	fbb3 f3fc 	udiv	r3, r3, ip
 8017146:	3301      	adds	r3, #1
 8017148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801714c:	fab3 f383 	clz	r3, r3
 8017150:	095b      	lsrs	r3, r3, #5
 8017152:	bb43      	cbnz	r3, 80171a6 <HAL_I2C_Init+0x19a>
 8017154:	b9c6      	cbnz	r6, 8017188 <HAL_I2C_Init+0x17c>
 8017156:	1e43      	subs	r3, r0, #1
 8017158:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801715c:	fbb3 f3f5 	udiv	r3, r3, r5
 8017160:	3301      	adds	r3, #1
 8017162:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017166:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801716a:	e7a3      	b.n	80170b4 <HAL_I2C_Init+0xa8>
 801716c:	1e43      	subs	r3, r0, #1
 801716e:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 8017172:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8017176:	fbb3 f3fc 	udiv	r3, r3, ip
 801717a:	3301      	adds	r3, #1
 801717c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017180:	fab3 f383 	clz	r3, r3
 8017184:	095b      	lsrs	r3, r3, #5
 8017186:	e7e4      	b.n	8017152 <HAL_I2C_Init+0x146>
 8017188:	1e43      	subs	r3, r0, #1
 801718a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 801718e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8017192:	fbb3 f3f5 	udiv	r3, r3, r5
 8017196:	3301      	adds	r3, #1
 8017198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801719c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80171a0:	e788      	b.n	80170b4 <HAL_I2C_Init+0xa8>
 80171a2:	2304      	movs	r3, #4
 80171a4:	e786      	b.n	80170b4 <HAL_I2C_Init+0xa8>
 80171a6:	2301      	movs	r3, #1
 80171a8:	e784      	b.n	80170b4 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 80171aa:	2001      	movs	r0, #1
}
 80171ac:	4770      	bx	lr
    return HAL_ERROR;
 80171ae:	2001      	movs	r0, #1
 80171b0:	e7ac      	b.n	801710c <HAL_I2C_Init+0x100>
 80171b2:	bf00      	nop
 80171b4:	000186a0 	.word	0x000186a0
 80171b8:	001e847f 	.word	0x001e847f
 80171bc:	431bde83 	.word	0x431bde83
 80171c0:	003d08ff 	.word	0x003d08ff
 80171c4:	10624dd3 	.word	0x10624dd3

080171c8 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 80171c8:	b1a8      	cbz	r0, 80171f6 <HAL_I2C_DeInit+0x2e>
{
 80171ca:	b510      	push	{r4, lr}
 80171cc:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 80171ce:	2324      	movs	r3, #36	@ 0x24
 80171d0:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80171d4:	6802      	ldr	r2, [r0, #0]
 80171d6:	6813      	ldr	r3, [r2, #0]
 80171d8:	f023 0301 	bic.w	r3, r3, #1
 80171dc:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80171de:	f7fa ff93 	bl	8012108 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80171e2:	2000      	movs	r0, #0
 80171e4:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80171e6:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80171ea:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80171ec:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  __HAL_UNLOCK(hi2c);
 80171f0:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
}
 80171f4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80171f6:	2001      	movs	r0, #1
}
 80171f8:	4770      	bx	lr
	...

080171fc <HAL_I2C_Master_Transmit>:
{
 80171fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017200:	b085      	sub	sp, #20
 8017202:	4604      	mov	r4, r0
 8017204:	460f      	mov	r7, r1
 8017206:	4691      	mov	r9, r2
 8017208:	4698      	mov	r8, r3
 801720a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 801720c:	f7ff f9b6 	bl	801657c <HAL_GetTick>
 8017210:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8017212:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 8017216:	b2c0      	uxtb	r0, r0
 8017218:	2820      	cmp	r0, #32
 801721a:	d004      	beq.n	8017226 <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 801721c:	2702      	movs	r7, #2
}
 801721e:	4638      	mov	r0, r7
 8017220:	b005      	add	sp, #20
 8017222:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8017226:	9500      	str	r5, [sp, #0]
 8017228:	2319      	movs	r3, #25
 801722a:	2201      	movs	r2, #1
 801722c:	494f      	ldr	r1, [pc, #316]	@ (801736c <HAL_I2C_Master_Transmit+0x170>)
 801722e:	4620      	mov	r0, r4
 8017230:	f7ff fd73 	bl	8016d1a <I2C_WaitOnFlagUntilTimeout>
 8017234:	2800      	cmp	r0, #0
 8017236:	f040 8092 	bne.w	801735e <HAL_I2C_Master_Transmit+0x162>
    __HAL_LOCK(hi2c);
 801723a:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 801723e:	2b01      	cmp	r3, #1
 8017240:	f000 808f 	beq.w	8017362 <HAL_I2C_Master_Transmit+0x166>
 8017244:	2301      	movs	r3, #1
 8017246:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801724a:	6823      	ldr	r3, [r4, #0]
 801724c:	681a      	ldr	r2, [r3, #0]
 801724e:	f012 0f01 	tst.w	r2, #1
 8017252:	d103      	bne.n	801725c <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8017254:	681a      	ldr	r2, [r3, #0]
 8017256:	f042 0201 	orr.w	r2, r2, #1
 801725a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801725c:	6822      	ldr	r2, [r4, #0]
 801725e:	6813      	ldr	r3, [r2, #0]
 8017260:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8017264:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8017266:	2321      	movs	r3, #33	@ 0x21
 8017268:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 801726c:	2310      	movs	r3, #16
 801726e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8017272:	2300      	movs	r3, #0
 8017274:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8017276:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 801727a:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801727e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8017280:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8017282:	4b3b      	ldr	r3, [pc, #236]	@ (8017370 <HAL_I2C_Master_Transmit+0x174>)
 8017284:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8017286:	462b      	mov	r3, r5
 8017288:	4632      	mov	r2, r6
 801728a:	4639      	mov	r1, r7
 801728c:	4620      	mov	r0, r4
 801728e:	f7ff fe05 	bl	8016e9c <I2C_MasterRequestWrite>
 8017292:	4607      	mov	r7, r0
 8017294:	2800      	cmp	r0, #0
 8017296:	d166      	bne.n	8017366 <HAL_I2C_Master_Transmit+0x16a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017298:	2300      	movs	r3, #0
 801729a:	9303      	str	r3, [sp, #12]
 801729c:	6823      	ldr	r3, [r4, #0]
 801729e:	695a      	ldr	r2, [r3, #20]
 80172a0:	9203      	str	r2, [sp, #12]
 80172a2:	699b      	ldr	r3, [r3, #24]
 80172a4:	9303      	str	r3, [sp, #12]
 80172a6:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 80172a8:	e011      	b.n	80172ce <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80172aa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80172ac:	2b04      	cmp	r3, #4
 80172ae:	d001      	beq.n	80172b4 <HAL_I2C_Master_Transmit+0xb8>
        return HAL_ERROR;
 80172b0:	2701      	movs	r7, #1
 80172b2:	e7b4      	b.n	801721e <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80172b4:	6822      	ldr	r2, [r4, #0]
 80172b6:	6813      	ldr	r3, [r2, #0]
 80172b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80172bc:	6013      	str	r3, [r2, #0]
 80172be:	e7f7      	b.n	80172b0 <HAL_I2C_Master_Transmit+0xb4>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80172c0:	462a      	mov	r2, r5
 80172c2:	4631      	mov	r1, r6
 80172c4:	4620      	mov	r0, r4
 80172c6:	f7ff fe72 	bl	8016fae <I2C_WaitOnBTFFlagUntilTimeout>
 80172ca:	2800      	cmp	r0, #0
 80172cc:	d12e      	bne.n	801732c <HAL_I2C_Master_Transmit+0x130>
    while (hi2c->XferSize > 0U)
 80172ce:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	d036      	beq.n	8017342 <HAL_I2C_Master_Transmit+0x146>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80172d4:	462a      	mov	r2, r5
 80172d6:	4631      	mov	r1, r6
 80172d8:	4620      	mov	r0, r4
 80172da:	f7ff fe39 	bl	8016f50 <I2C_WaitOnTXEFlagUntilTimeout>
 80172de:	2800      	cmp	r0, #0
 80172e0:	d1e3      	bne.n	80172aa <HAL_I2C_Master_Transmit+0xae>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80172e2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80172e4:	6823      	ldr	r3, [r4, #0]
 80172e6:	7812      	ldrb	r2, [r2, #0]
 80172e8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80172ea:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80172ec:	1c43      	adds	r3, r0, #1
 80172ee:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80172f0:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 80172f2:	b289      	uxth	r1, r1
 80172f4:	3901      	subs	r1, #1
 80172f6:	b289      	uxth	r1, r1
 80172f8:	8561      	strh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80172fa:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80172fc:	3b01      	subs	r3, #1
 80172fe:	b29b      	uxth	r3, r3
 8017300:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8017302:	6822      	ldr	r2, [r4, #0]
 8017304:	6951      	ldr	r1, [r2, #20]
 8017306:	f011 0f04 	tst.w	r1, #4
 801730a:	d0d9      	beq.n	80172c0 <HAL_I2C_Master_Transmit+0xc4>
 801730c:	2b00      	cmp	r3, #0
 801730e:	d0d7      	beq.n	80172c0 <HAL_I2C_Master_Transmit+0xc4>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8017310:	7843      	ldrb	r3, [r0, #1]
 8017312:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8017314:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8017316:	3301      	adds	r3, #1
 8017318:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 801731a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 801731c:	b29b      	uxth	r3, r3
 801731e:	3b01      	subs	r3, #1
 8017320:	b29b      	uxth	r3, r3
 8017322:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8017324:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8017326:	3b01      	subs	r3, #1
 8017328:	8523      	strh	r3, [r4, #40]	@ 0x28
 801732a:	e7c9      	b.n	80172c0 <HAL_I2C_Master_Transmit+0xc4>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801732c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801732e:	2b04      	cmp	r3, #4
 8017330:	d001      	beq.n	8017336 <HAL_I2C_Master_Transmit+0x13a>
        return HAL_ERROR;
 8017332:	2701      	movs	r7, #1
 8017334:	e773      	b.n	801721e <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017336:	6822      	ldr	r2, [r4, #0]
 8017338:	6813      	ldr	r3, [r2, #0]
 801733a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801733e:	6013      	str	r3, [r2, #0]
 8017340:	e7f7      	b.n	8017332 <HAL_I2C_Master_Transmit+0x136>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017342:	6822      	ldr	r2, [r4, #0]
 8017344:	6813      	ldr	r3, [r2, #0]
 8017346:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801734a:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 801734c:	2320      	movs	r3, #32
 801734e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8017352:	2300      	movs	r3, #0
 8017354:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 8017358:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 801735c:	e75f      	b.n	801721e <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 801735e:	2702      	movs	r7, #2
 8017360:	e75d      	b.n	801721e <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 8017362:	2702      	movs	r7, #2
 8017364:	e75b      	b.n	801721e <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 8017366:	2701      	movs	r7, #1
 8017368:	e759      	b.n	801721e <HAL_I2C_Master_Transmit+0x22>
 801736a:	bf00      	nop
 801736c:	00100002 	.word	0x00100002
 8017370:	ffff0000 	.word	0xffff0000

08017374 <HAL_I2C_IsDeviceReady>:
{
 8017374:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017378:	b085      	sub	sp, #20
 801737a:	4604      	mov	r4, r0
 801737c:	4688      	mov	r8, r1
 801737e:	4691      	mov	r9, r2
 8017380:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8017382:	f7ff f8fb 	bl	801657c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8017386:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 801738a:	b2db      	uxtb	r3, r3
 801738c:	2b20      	cmp	r3, #32
 801738e:	d003      	beq.n	8017398 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8017390:	2002      	movs	r0, #2
}
 8017392:	b005      	add	sp, #20
 8017394:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017398:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801739a:	9000      	str	r0, [sp, #0]
 801739c:	2319      	movs	r3, #25
 801739e:	2201      	movs	r2, #1
 80173a0:	4957      	ldr	r1, [pc, #348]	@ (8017500 <HAL_I2C_IsDeviceReady+0x18c>)
 80173a2:	4620      	mov	r0, r4
 80173a4:	f7ff fcb9 	bl	8016d1a <I2C_WaitOnFlagUntilTimeout>
 80173a8:	2800      	cmp	r0, #0
 80173aa:	f040 80a0 	bne.w	80174ee <HAL_I2C_IsDeviceReady+0x17a>
    __HAL_LOCK(hi2c);
 80173ae:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80173b2:	2b01      	cmp	r3, #1
 80173b4:	f000 809d 	beq.w	80174f2 <HAL_I2C_IsDeviceReady+0x17e>
 80173b8:	2301      	movs	r3, #1
 80173ba:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80173be:	6823      	ldr	r3, [r4, #0]
 80173c0:	681a      	ldr	r2, [r3, #0]
 80173c2:	f012 0f01 	tst.w	r2, #1
 80173c6:	d103      	bne.n	80173d0 <HAL_I2C_IsDeviceReady+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 80173c8:	681a      	ldr	r2, [r3, #0]
 80173ca:	f042 0201 	orr.w	r2, r2, #1
 80173ce:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80173d0:	6822      	ldr	r2, [r4, #0]
 80173d2:	6813      	ldr	r3, [r2, #0]
 80173d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80173d8:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80173da:	2324      	movs	r3, #36	@ 0x24
 80173dc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80173e0:	2700      	movs	r7, #0
 80173e2:	6427      	str	r7, [r4, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80173e4:	4b47      	ldr	r3, [pc, #284]	@ (8017504 <HAL_I2C_IsDeviceReady+0x190>)
 80173e6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80173e8:	e040      	b.n	801746c <HAL_I2C_IsDeviceReady+0xf8>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80173ea:	6823      	ldr	r3, [r4, #0]
 80173ec:	681b      	ldr	r3, [r3, #0]
 80173ee:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80173f2:	d002      	beq.n	80173fa <HAL_I2C_IsDeviceReady+0x86>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80173f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80173f8:	6423      	str	r3, [r4, #64]	@ 0x40
        return HAL_TIMEOUT;
 80173fa:	2003      	movs	r0, #3
 80173fc:	e7c9      	b.n	8017392 <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80173fe:	23a0      	movs	r3, #160	@ 0xa0
 8017400:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8017404:	6822      	ldr	r2, [r4, #0]
 8017406:	6953      	ldr	r3, [r2, #20]
 8017408:	f3c3 0340 	ubfx	r3, r3, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 801740c:	6952      	ldr	r2, [r2, #20]
 801740e:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8017412:	f894 c03d 	ldrb.w	ip, [r4, #61]	@ 0x3d
 8017416:	fa5f fc8c 	uxtb.w	ip, ip
 801741a:	f1bc 0fa0 	cmp.w	ip, #160	@ 0xa0
 801741e:	d009      	beq.n	8017434 <HAL_I2C_IsDeviceReady+0xc0>
 8017420:	b943      	cbnz	r3, 8017434 <HAL_I2C_IsDeviceReady+0xc0>
 8017422:	b93a      	cbnz	r2, 8017434 <HAL_I2C_IsDeviceReady+0xc0>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8017424:	f7ff f8aa 	bl	801657c <HAL_GetTick>
 8017428:	1b80      	subs	r0, r0, r6
 801742a:	42a8      	cmp	r0, r5
 801742c:	d8e7      	bhi.n	80173fe <HAL_I2C_IsDeviceReady+0x8a>
 801742e:	2d00      	cmp	r5, #0
 8017430:	d1e8      	bne.n	8017404 <HAL_I2C_IsDeviceReady+0x90>
 8017432:	e7e4      	b.n	80173fe <HAL_I2C_IsDeviceReady+0x8a>
      hi2c->State = HAL_I2C_STATE_READY;
 8017434:	2320      	movs	r3, #32
 8017436:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 801743a:	6823      	ldr	r3, [r4, #0]
 801743c:	695a      	ldr	r2, [r3, #20]
 801743e:	f012 0f02 	tst.w	r2, #2
 8017442:	d131      	bne.n	80174a8 <HAL_I2C_IsDeviceReady+0x134>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017444:	681a      	ldr	r2, [r3, #0]
 8017446:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801744a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801744c:	6823      	ldr	r3, [r4, #0]
 801744e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8017452:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8017454:	9600      	str	r6, [sp, #0]
 8017456:	2319      	movs	r3, #25
 8017458:	2201      	movs	r2, #1
 801745a:	4929      	ldr	r1, [pc, #164]	@ (8017500 <HAL_I2C_IsDeviceReady+0x18c>)
 801745c:	4620      	mov	r0, r4
 801745e:	f7ff fc5c 	bl	8016d1a <I2C_WaitOnFlagUntilTimeout>
 8017462:	2800      	cmp	r0, #0
 8017464:	d149      	bne.n	80174fa <HAL_I2C_IsDeviceReady+0x186>
      I2C_Trials++;
 8017466:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 8017468:	454f      	cmp	r7, r9
 801746a:	d238      	bcs.n	80174de <HAL_I2C_IsDeviceReady+0x16a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801746c:	6822      	ldr	r2, [r4, #0]
 801746e:	6813      	ldr	r3, [r2, #0]
 8017470:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8017474:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8017476:	9600      	str	r6, [sp, #0]
 8017478:	462b      	mov	r3, r5
 801747a:	2200      	movs	r2, #0
 801747c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8017480:	4620      	mov	r0, r4
 8017482:	f7ff fc4a 	bl	8016d1a <I2C_WaitOnFlagUntilTimeout>
 8017486:	2800      	cmp	r0, #0
 8017488:	d1af      	bne.n	80173ea <HAL_I2C_IsDeviceReady+0x76>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801748a:	6823      	ldr	r3, [r4, #0]
 801748c:	f008 02fe 	and.w	r2, r8, #254	@ 0xfe
 8017490:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8017492:	f7ff f873 	bl	801657c <HAL_GetTick>
 8017496:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8017498:	6822      	ldr	r2, [r4, #0]
 801749a:	6953      	ldr	r3, [r2, #20]
 801749c:	f3c3 0340 	ubfx	r3, r3, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80174a0:	6952      	ldr	r2, [r2, #20]
 80174a2:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80174a6:	e7b4      	b.n	8017412 <HAL_I2C_IsDeviceReady+0x9e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80174a8:	681a      	ldr	r2, [r3, #0]
 80174aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80174ae:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80174b0:	2300      	movs	r3, #0
 80174b2:	9303      	str	r3, [sp, #12]
 80174b4:	6823      	ldr	r3, [r4, #0]
 80174b6:	695a      	ldr	r2, [r3, #20]
 80174b8:	9203      	str	r2, [sp, #12]
 80174ba:	699b      	ldr	r3, [r3, #24]
 80174bc:	9303      	str	r3, [sp, #12]
 80174be:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80174c0:	9600      	str	r6, [sp, #0]
 80174c2:	2319      	movs	r3, #25
 80174c4:	2201      	movs	r2, #1
 80174c6:	490e      	ldr	r1, [pc, #56]	@ (8017500 <HAL_I2C_IsDeviceReady+0x18c>)
 80174c8:	4620      	mov	r0, r4
 80174ca:	f7ff fc26 	bl	8016d1a <I2C_WaitOnFlagUntilTimeout>
 80174ce:	b990      	cbnz	r0, 80174f6 <HAL_I2C_IsDeviceReady+0x182>
        hi2c->State = HAL_I2C_STATE_READY;
 80174d0:	2320      	movs	r3, #32
 80174d2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        __HAL_UNLOCK(hi2c);
 80174d6:	2300      	movs	r3, #0
 80174d8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_OK;
 80174dc:	e759      	b.n	8017392 <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 80174de:	2320      	movs	r3, #32
 80174e0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 80174e4:	2300      	movs	r3, #0
 80174e6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 80174ea:	2001      	movs	r0, #1
 80174ec:	e751      	b.n	8017392 <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 80174ee:	2002      	movs	r0, #2
 80174f0:	e74f      	b.n	8017392 <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 80174f2:	2002      	movs	r0, #2
 80174f4:	e74d      	b.n	8017392 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 80174f6:	2001      	movs	r0, #1
 80174f8:	e74b      	b.n	8017392 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 80174fa:	2001      	movs	r0, #1
 80174fc:	e749      	b.n	8017392 <HAL_I2C_IsDeviceReady+0x1e>
 80174fe:	bf00      	nop
 8017500:	00100002 	.word	0x00100002
 8017504:	ffff0000 	.word	0xffff0000

08017508 <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8017508:	b340      	cbz	r0, 801755c <HAL_IWDG_Init+0x54>
{
 801750a:	b538      	push	{r3, r4, r5, lr}
 801750c:	4604      	mov	r4, r0
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 801750e:	6803      	ldr	r3, [r0, #0]
 8017510:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8017514:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8017516:	6803      	ldr	r3, [r0, #0]
 8017518:	f245 5255 	movw	r2, #21845	@ 0x5555
 801751c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 801751e:	6803      	ldr	r3, [r0, #0]
 8017520:	6842      	ldr	r2, [r0, #4]
 8017522:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8017524:	6803      	ldr	r3, [r0, #0]
 8017526:	6882      	ldr	r2, [r0, #8]
 8017528:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 801752a:	f7ff f827 	bl	801657c <HAL_GetTick>
 801752e:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8017530:	6823      	ldr	r3, [r4, #0]
 8017532:	68da      	ldr	r2, [r3, #12]
 8017534:	f012 0f03 	tst.w	r2, #3
 8017538:	d00b      	beq.n	8017552 <HAL_IWDG_Init+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 801753a:	f7ff f81f 	bl	801657c <HAL_GetTick>
 801753e:	1b40      	subs	r0, r0, r5
 8017540:	2831      	cmp	r0, #49	@ 0x31
 8017542:	d9f5      	bls.n	8017530 <HAL_IWDG_Init+0x28>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8017544:	6823      	ldr	r3, [r4, #0]
 8017546:	68db      	ldr	r3, [r3, #12]
 8017548:	f013 0f03 	tst.w	r3, #3
 801754c:	d0f0      	beq.n	8017530 <HAL_IWDG_Init+0x28>
      {
        return HAL_TIMEOUT;
 801754e:	2003      	movs	r0, #3
 8017550:	e003      	b.n	801755a <HAL_IWDG_Init+0x52>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8017552:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8017556:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8017558:	2000      	movs	r0, #0
}
 801755a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 801755c:	2001      	movs	r0, #1
}
 801755e:	4770      	bx	lr

08017560 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8017560:	6803      	ldr	r3, [r0, #0]
 8017562:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8017566:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8017568:	2000      	movs	r0, #0
 801756a:	4770      	bx	lr

0801756c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801756c:	2800      	cmp	r0, #0
 801756e:	f000 81e0 	beq.w	8017932 <HAL_RCC_OscConfig+0x3c6>
{
 8017572:	b570      	push	{r4, r5, r6, lr}
 8017574:	b082      	sub	sp, #8
 8017576:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8017578:	6803      	ldr	r3, [r0, #0]
 801757a:	f013 0f01 	tst.w	r3, #1
 801757e:	d03b      	beq.n	80175f8 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8017580:	4b9f      	ldr	r3, [pc, #636]	@ (8017800 <HAL_RCC_OscConfig+0x294>)
 8017582:	689b      	ldr	r3, [r3, #8]
 8017584:	f003 030c 	and.w	r3, r3, #12
 8017588:	2b04      	cmp	r3, #4
 801758a:	d02c      	beq.n	80175e6 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801758c:	4b9c      	ldr	r3, [pc, #624]	@ (8017800 <HAL_RCC_OscConfig+0x294>)
 801758e:	689b      	ldr	r3, [r3, #8]
 8017590:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8017594:	2b08      	cmp	r3, #8
 8017596:	d021      	beq.n	80175dc <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8017598:	6863      	ldr	r3, [r4, #4]
 801759a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801759e:	d04f      	beq.n	8017640 <HAL_RCC_OscConfig+0xd4>
 80175a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80175a4:	d052      	beq.n	801764c <HAL_RCC_OscConfig+0xe0>
 80175a6:	4b96      	ldr	r3, [pc, #600]	@ (8017800 <HAL_RCC_OscConfig+0x294>)
 80175a8:	681a      	ldr	r2, [r3, #0]
 80175aa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80175ae:	601a      	str	r2, [r3, #0]
 80175b0:	681a      	ldr	r2, [r3, #0]
 80175b2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80175b6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80175b8:	6863      	ldr	r3, [r4, #4]
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d050      	beq.n	8017660 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80175be:	f7fe ffdd 	bl	801657c <HAL_GetTick>
 80175c2:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80175c4:	4b8e      	ldr	r3, [pc, #568]	@ (8017800 <HAL_RCC_OscConfig+0x294>)
 80175c6:	681b      	ldr	r3, [r3, #0]
 80175c8:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80175cc:	d114      	bne.n	80175f8 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80175ce:	f7fe ffd5 	bl	801657c <HAL_GetTick>
 80175d2:	1b40      	subs	r0, r0, r5
 80175d4:	2864      	cmp	r0, #100	@ 0x64
 80175d6:	d9f5      	bls.n	80175c4 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80175d8:	2003      	movs	r0, #3
 80175da:	e1b1      	b.n	8017940 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80175dc:	4b88      	ldr	r3, [pc, #544]	@ (8017800 <HAL_RCC_OscConfig+0x294>)
 80175de:	685b      	ldr	r3, [r3, #4]
 80175e0:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80175e4:	d0d8      	beq.n	8017598 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80175e6:	4b86      	ldr	r3, [pc, #536]	@ (8017800 <HAL_RCC_OscConfig+0x294>)
 80175e8:	681b      	ldr	r3, [r3, #0]
 80175ea:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80175ee:	d003      	beq.n	80175f8 <HAL_RCC_OscConfig+0x8c>
 80175f0:	6863      	ldr	r3, [r4, #4]
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	f000 819f 	beq.w	8017936 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80175f8:	6823      	ldr	r3, [r4, #0]
 80175fa:	f013 0f02 	tst.w	r3, #2
 80175fe:	d054      	beq.n	80176aa <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8017600:	4b7f      	ldr	r3, [pc, #508]	@ (8017800 <HAL_RCC_OscConfig+0x294>)
 8017602:	689b      	ldr	r3, [r3, #8]
 8017604:	f013 0f0c 	tst.w	r3, #12
 8017608:	d03e      	beq.n	8017688 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801760a:	4b7d      	ldr	r3, [pc, #500]	@ (8017800 <HAL_RCC_OscConfig+0x294>)
 801760c:	689b      	ldr	r3, [r3, #8]
 801760e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8017612:	2b08      	cmp	r3, #8
 8017614:	d033      	beq.n	801767e <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8017616:	68e3      	ldr	r3, [r4, #12]
 8017618:	2b00      	cmp	r3, #0
 801761a:	d068      	beq.n	80176ee <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801761c:	4b79      	ldr	r3, [pc, #484]	@ (8017804 <HAL_RCC_OscConfig+0x298>)
 801761e:	2201      	movs	r2, #1
 8017620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017622:	f7fe ffab 	bl	801657c <HAL_GetTick>
 8017626:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8017628:	4b75      	ldr	r3, [pc, #468]	@ (8017800 <HAL_RCC_OscConfig+0x294>)
 801762a:	681b      	ldr	r3, [r3, #0]
 801762c:	f013 0f02 	tst.w	r3, #2
 8017630:	d154      	bne.n	80176dc <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8017632:	f7fe ffa3 	bl	801657c <HAL_GetTick>
 8017636:	1b40      	subs	r0, r0, r5
 8017638:	2802      	cmp	r0, #2
 801763a:	d9f5      	bls.n	8017628 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 801763c:	2003      	movs	r0, #3
 801763e:	e17f      	b.n	8017940 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8017640:	4a6f      	ldr	r2, [pc, #444]	@ (8017800 <HAL_RCC_OscConfig+0x294>)
 8017642:	6813      	ldr	r3, [r2, #0]
 8017644:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8017648:	6013      	str	r3, [r2, #0]
 801764a:	e7b5      	b.n	80175b8 <HAL_RCC_OscConfig+0x4c>
 801764c:	4b6c      	ldr	r3, [pc, #432]	@ (8017800 <HAL_RCC_OscConfig+0x294>)
 801764e:	681a      	ldr	r2, [r3, #0]
 8017650:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8017654:	601a      	str	r2, [r3, #0]
 8017656:	681a      	ldr	r2, [r3, #0]
 8017658:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 801765c:	601a      	str	r2, [r3, #0]
 801765e:	e7ab      	b.n	80175b8 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8017660:	f7fe ff8c 	bl	801657c <HAL_GetTick>
 8017664:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8017666:	4b66      	ldr	r3, [pc, #408]	@ (8017800 <HAL_RCC_OscConfig+0x294>)
 8017668:	681b      	ldr	r3, [r3, #0]
 801766a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801766e:	d0c3      	beq.n	80175f8 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8017670:	f7fe ff84 	bl	801657c <HAL_GetTick>
 8017674:	1b40      	subs	r0, r0, r5
 8017676:	2864      	cmp	r0, #100	@ 0x64
 8017678:	d9f5      	bls.n	8017666 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 801767a:	2003      	movs	r0, #3
 801767c:	e160      	b.n	8017940 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801767e:	4b60      	ldr	r3, [pc, #384]	@ (8017800 <HAL_RCC_OscConfig+0x294>)
 8017680:	685b      	ldr	r3, [r3, #4]
 8017682:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8017686:	d1c6      	bne.n	8017616 <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8017688:	4b5d      	ldr	r3, [pc, #372]	@ (8017800 <HAL_RCC_OscConfig+0x294>)
 801768a:	681b      	ldr	r3, [r3, #0]
 801768c:	f013 0f02 	tst.w	r3, #2
 8017690:	d003      	beq.n	801769a <HAL_RCC_OscConfig+0x12e>
 8017692:	68e3      	ldr	r3, [r4, #12]
 8017694:	2b01      	cmp	r3, #1
 8017696:	f040 8150 	bne.w	801793a <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801769a:	4a59      	ldr	r2, [pc, #356]	@ (8017800 <HAL_RCC_OscConfig+0x294>)
 801769c:	6813      	ldr	r3, [r2, #0]
 801769e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80176a2:	6921      	ldr	r1, [r4, #16]
 80176a4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80176a8:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80176aa:	6823      	ldr	r3, [r4, #0]
 80176ac:	f013 0f08 	tst.w	r3, #8
 80176b0:	d042      	beq.n	8017738 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80176b2:	6963      	ldr	r3, [r4, #20]
 80176b4:	b36b      	cbz	r3, 8017712 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80176b6:	4b53      	ldr	r3, [pc, #332]	@ (8017804 <HAL_RCC_OscConfig+0x298>)
 80176b8:	2201      	movs	r2, #1
 80176ba:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80176be:	f7fe ff5d 	bl	801657c <HAL_GetTick>
 80176c2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80176c4:	4b4e      	ldr	r3, [pc, #312]	@ (8017800 <HAL_RCC_OscConfig+0x294>)
 80176c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80176c8:	f013 0f02 	tst.w	r3, #2
 80176cc:	d134      	bne.n	8017738 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80176ce:	f7fe ff55 	bl	801657c <HAL_GetTick>
 80176d2:	1b40      	subs	r0, r0, r5
 80176d4:	2802      	cmp	r0, #2
 80176d6:	d9f5      	bls.n	80176c4 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 80176d8:	2003      	movs	r0, #3
 80176da:	e131      	b.n	8017940 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80176dc:	4a48      	ldr	r2, [pc, #288]	@ (8017800 <HAL_RCC_OscConfig+0x294>)
 80176de:	6813      	ldr	r3, [r2, #0]
 80176e0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80176e4:	6921      	ldr	r1, [r4, #16]
 80176e6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80176ea:	6013      	str	r3, [r2, #0]
 80176ec:	e7dd      	b.n	80176aa <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 80176ee:	4b45      	ldr	r3, [pc, #276]	@ (8017804 <HAL_RCC_OscConfig+0x298>)
 80176f0:	2200      	movs	r2, #0
 80176f2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80176f4:	f7fe ff42 	bl	801657c <HAL_GetTick>
 80176f8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80176fa:	4b41      	ldr	r3, [pc, #260]	@ (8017800 <HAL_RCC_OscConfig+0x294>)
 80176fc:	681b      	ldr	r3, [r3, #0]
 80176fe:	f013 0f02 	tst.w	r3, #2
 8017702:	d0d2      	beq.n	80176aa <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8017704:	f7fe ff3a 	bl	801657c <HAL_GetTick>
 8017708:	1b40      	subs	r0, r0, r5
 801770a:	2802      	cmp	r0, #2
 801770c:	d9f5      	bls.n	80176fa <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 801770e:	2003      	movs	r0, #3
 8017710:	e116      	b.n	8017940 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8017712:	4b3c      	ldr	r3, [pc, #240]	@ (8017804 <HAL_RCC_OscConfig+0x298>)
 8017714:	2200      	movs	r2, #0
 8017716:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801771a:	f7fe ff2f 	bl	801657c <HAL_GetTick>
 801771e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8017720:	4b37      	ldr	r3, [pc, #220]	@ (8017800 <HAL_RCC_OscConfig+0x294>)
 8017722:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017724:	f013 0f02 	tst.w	r3, #2
 8017728:	d006      	beq.n	8017738 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801772a:	f7fe ff27 	bl	801657c <HAL_GetTick>
 801772e:	1b40      	subs	r0, r0, r5
 8017730:	2802      	cmp	r0, #2
 8017732:	d9f5      	bls.n	8017720 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8017734:	2003      	movs	r0, #3
 8017736:	e103      	b.n	8017940 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8017738:	6823      	ldr	r3, [r4, #0]
 801773a:	f013 0f04 	tst.w	r3, #4
 801773e:	d077      	beq.n	8017830 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8017740:	4b2f      	ldr	r3, [pc, #188]	@ (8017800 <HAL_RCC_OscConfig+0x294>)
 8017742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017744:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8017748:	d133      	bne.n	80177b2 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801774a:	2300      	movs	r3, #0
 801774c:	9301      	str	r3, [sp, #4]
 801774e:	4b2c      	ldr	r3, [pc, #176]	@ (8017800 <HAL_RCC_OscConfig+0x294>)
 8017750:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8017752:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8017756:	641a      	str	r2, [r3, #64]	@ 0x40
 8017758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801775a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801775e:	9301      	str	r3, [sp, #4]
 8017760:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8017762:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8017764:	4b28      	ldr	r3, [pc, #160]	@ (8017808 <HAL_RCC_OscConfig+0x29c>)
 8017766:	681b      	ldr	r3, [r3, #0]
 8017768:	f413 7f80 	tst.w	r3, #256	@ 0x100
 801776c:	d023      	beq.n	80177b6 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801776e:	68a3      	ldr	r3, [r4, #8]
 8017770:	2b01      	cmp	r3, #1
 8017772:	d034      	beq.n	80177de <HAL_RCC_OscConfig+0x272>
 8017774:	2b05      	cmp	r3, #5
 8017776:	d038      	beq.n	80177ea <HAL_RCC_OscConfig+0x27e>
 8017778:	4b21      	ldr	r3, [pc, #132]	@ (8017800 <HAL_RCC_OscConfig+0x294>)
 801777a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801777c:	f022 0201 	bic.w	r2, r2, #1
 8017780:	671a      	str	r2, [r3, #112]	@ 0x70
 8017782:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8017784:	f022 0204 	bic.w	r2, r2, #4
 8017788:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801778a:	68a3      	ldr	r3, [r4, #8]
 801778c:	2b00      	cmp	r3, #0
 801778e:	d03d      	beq.n	801780c <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017790:	f7fe fef4 	bl	801657c <HAL_GetTick>
 8017794:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8017796:	4b1a      	ldr	r3, [pc, #104]	@ (8017800 <HAL_RCC_OscConfig+0x294>)
 8017798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801779a:	f013 0f02 	tst.w	r3, #2
 801779e:	d146      	bne.n	801782e <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80177a0:	f7fe feec 	bl	801657c <HAL_GetTick>
 80177a4:	1b80      	subs	r0, r0, r6
 80177a6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80177aa:	4298      	cmp	r0, r3
 80177ac:	d9f3      	bls.n	8017796 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 80177ae:	2003      	movs	r0, #3
 80177b0:	e0c6      	b.n	8017940 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 80177b2:	2500      	movs	r5, #0
 80177b4:	e7d6      	b.n	8017764 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80177b6:	4a14      	ldr	r2, [pc, #80]	@ (8017808 <HAL_RCC_OscConfig+0x29c>)
 80177b8:	6813      	ldr	r3, [r2, #0]
 80177ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80177be:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80177c0:	f7fe fedc 	bl	801657c <HAL_GetTick>
 80177c4:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80177c6:	4b10      	ldr	r3, [pc, #64]	@ (8017808 <HAL_RCC_OscConfig+0x29c>)
 80177c8:	681b      	ldr	r3, [r3, #0]
 80177ca:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80177ce:	d1ce      	bne.n	801776e <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80177d0:	f7fe fed4 	bl	801657c <HAL_GetTick>
 80177d4:	1b80      	subs	r0, r0, r6
 80177d6:	2802      	cmp	r0, #2
 80177d8:	d9f5      	bls.n	80177c6 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 80177da:	2003      	movs	r0, #3
 80177dc:	e0b0      	b.n	8017940 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80177de:	4a08      	ldr	r2, [pc, #32]	@ (8017800 <HAL_RCC_OscConfig+0x294>)
 80177e0:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80177e2:	f043 0301 	orr.w	r3, r3, #1
 80177e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80177e8:	e7cf      	b.n	801778a <HAL_RCC_OscConfig+0x21e>
 80177ea:	4b05      	ldr	r3, [pc, #20]	@ (8017800 <HAL_RCC_OscConfig+0x294>)
 80177ec:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80177ee:	f042 0204 	orr.w	r2, r2, #4
 80177f2:	671a      	str	r2, [r3, #112]	@ 0x70
 80177f4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80177f6:	f042 0201 	orr.w	r2, r2, #1
 80177fa:	671a      	str	r2, [r3, #112]	@ 0x70
 80177fc:	e7c5      	b.n	801778a <HAL_RCC_OscConfig+0x21e>
 80177fe:	bf00      	nop
 8017800:	40023800 	.word	0x40023800
 8017804:	42470000 	.word	0x42470000
 8017808:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801780c:	f7fe feb6 	bl	801657c <HAL_GetTick>
 8017810:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8017812:	4b52      	ldr	r3, [pc, #328]	@ (801795c <HAL_RCC_OscConfig+0x3f0>)
 8017814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017816:	f013 0f02 	tst.w	r3, #2
 801781a:	d008      	beq.n	801782e <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801781c:	f7fe feae 	bl	801657c <HAL_GetTick>
 8017820:	1b80      	subs	r0, r0, r6
 8017822:	f241 3388 	movw	r3, #5000	@ 0x1388
 8017826:	4298      	cmp	r0, r3
 8017828:	d9f3      	bls.n	8017812 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 801782a:	2003      	movs	r0, #3
 801782c:	e088      	b.n	8017940 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801782e:	b9ed      	cbnz	r5, 801786c <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8017830:	69a3      	ldr	r3, [r4, #24]
 8017832:	2b00      	cmp	r3, #0
 8017834:	f000 8083 	beq.w	801793e <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8017838:	4a48      	ldr	r2, [pc, #288]	@ (801795c <HAL_RCC_OscConfig+0x3f0>)
 801783a:	6892      	ldr	r2, [r2, #8]
 801783c:	f002 020c 	and.w	r2, r2, #12
 8017840:	2a08      	cmp	r2, #8
 8017842:	d051      	beq.n	80178e8 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8017844:	2b02      	cmp	r3, #2
 8017846:	d017      	beq.n	8017878 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8017848:	4b45      	ldr	r3, [pc, #276]	@ (8017960 <HAL_RCC_OscConfig+0x3f4>)
 801784a:	2200      	movs	r2, #0
 801784c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801784e:	f7fe fe95 	bl	801657c <HAL_GetTick>
 8017852:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8017854:	4b41      	ldr	r3, [pc, #260]	@ (801795c <HAL_RCC_OscConfig+0x3f0>)
 8017856:	681b      	ldr	r3, [r3, #0]
 8017858:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 801785c:	d042      	beq.n	80178e4 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801785e:	f7fe fe8d 	bl	801657c <HAL_GetTick>
 8017862:	1b00      	subs	r0, r0, r4
 8017864:	2802      	cmp	r0, #2
 8017866:	d9f5      	bls.n	8017854 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8017868:	2003      	movs	r0, #3
 801786a:	e069      	b.n	8017940 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 801786c:	4a3b      	ldr	r2, [pc, #236]	@ (801795c <HAL_RCC_OscConfig+0x3f0>)
 801786e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8017870:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8017874:	6413      	str	r3, [r2, #64]	@ 0x40
 8017876:	e7db      	b.n	8017830 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8017878:	4b39      	ldr	r3, [pc, #228]	@ (8017960 <HAL_RCC_OscConfig+0x3f4>)
 801787a:	2200      	movs	r2, #0
 801787c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 801787e:	f7fe fe7d 	bl	801657c <HAL_GetTick>
 8017882:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8017884:	4b35      	ldr	r3, [pc, #212]	@ (801795c <HAL_RCC_OscConfig+0x3f0>)
 8017886:	681b      	ldr	r3, [r3, #0]
 8017888:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 801788c:	d006      	beq.n	801789c <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801788e:	f7fe fe75 	bl	801657c <HAL_GetTick>
 8017892:	1b40      	subs	r0, r0, r5
 8017894:	2802      	cmp	r0, #2
 8017896:	d9f5      	bls.n	8017884 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8017898:	2003      	movs	r0, #3
 801789a:	e051      	b.n	8017940 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801789c:	69e3      	ldr	r3, [r4, #28]
 801789e:	6a22      	ldr	r2, [r4, #32]
 80178a0:	4313      	orrs	r3, r2
 80178a2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80178a4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80178a8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80178aa:	0852      	lsrs	r2, r2, #1
 80178ac:	3a01      	subs	r2, #1
 80178ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80178b2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80178b4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80178b8:	4a28      	ldr	r2, [pc, #160]	@ (801795c <HAL_RCC_OscConfig+0x3f0>)
 80178ba:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80178bc:	4b28      	ldr	r3, [pc, #160]	@ (8017960 <HAL_RCC_OscConfig+0x3f4>)
 80178be:	2201      	movs	r2, #1
 80178c0:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80178c2:	f7fe fe5b 	bl	801657c <HAL_GetTick>
 80178c6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80178c8:	4b24      	ldr	r3, [pc, #144]	@ (801795c <HAL_RCC_OscConfig+0x3f0>)
 80178ca:	681b      	ldr	r3, [r3, #0]
 80178cc:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80178d0:	d106      	bne.n	80178e0 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80178d2:	f7fe fe53 	bl	801657c <HAL_GetTick>
 80178d6:	1b00      	subs	r0, r0, r4
 80178d8:	2802      	cmp	r0, #2
 80178da:	d9f5      	bls.n	80178c8 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 80178dc:	2003      	movs	r0, #3
 80178de:	e02f      	b.n	8017940 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80178e0:	2000      	movs	r0, #0
 80178e2:	e02d      	b.n	8017940 <HAL_RCC_OscConfig+0x3d4>
 80178e4:	2000      	movs	r0, #0
 80178e6:	e02b      	b.n	8017940 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80178e8:	2b01      	cmp	r3, #1
 80178ea:	d02b      	beq.n	8017944 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 80178ec:	4b1b      	ldr	r3, [pc, #108]	@ (801795c <HAL_RCC_OscConfig+0x3f0>)
 80178ee:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80178f0:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 80178f4:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80178f6:	4291      	cmp	r1, r2
 80178f8:	d126      	bne.n	8017948 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80178fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80178fe:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8017900:	428a      	cmp	r2, r1
 8017902:	d123      	bne.n	801794c <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8017904:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8017906:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 801790a:	401a      	ands	r2, r3
 801790c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8017910:	d11e      	bne.n	8017950 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8017912:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8017916:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8017918:	0852      	lsrs	r2, r2, #1
 801791a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801791c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8017920:	d118      	bne.n	8017954 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8017922:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8017926:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8017928:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 801792c:	d114      	bne.n	8017958 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 801792e:	2000      	movs	r0, #0
 8017930:	e006      	b.n	8017940 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8017932:	2001      	movs	r0, #1
}
 8017934:	4770      	bx	lr
        return HAL_ERROR;
 8017936:	2001      	movs	r0, #1
 8017938:	e002      	b.n	8017940 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 801793a:	2001      	movs	r0, #1
 801793c:	e000      	b.n	8017940 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 801793e:	2000      	movs	r0, #0
}
 8017940:	b002      	add	sp, #8
 8017942:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8017944:	2001      	movs	r0, #1
 8017946:	e7fb      	b.n	8017940 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8017948:	2001      	movs	r0, #1
 801794a:	e7f9      	b.n	8017940 <HAL_RCC_OscConfig+0x3d4>
 801794c:	2001      	movs	r0, #1
 801794e:	e7f7      	b.n	8017940 <HAL_RCC_OscConfig+0x3d4>
 8017950:	2001      	movs	r0, #1
 8017952:	e7f5      	b.n	8017940 <HAL_RCC_OscConfig+0x3d4>
 8017954:	2001      	movs	r0, #1
 8017956:	e7f3      	b.n	8017940 <HAL_RCC_OscConfig+0x3d4>
 8017958:	2001      	movs	r0, #1
 801795a:	e7f1      	b.n	8017940 <HAL_RCC_OscConfig+0x3d4>
 801795c:	40023800 	.word	0x40023800
 8017960:	42470000 	.word	0x42470000

08017964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8017964:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8017966:	4b33      	ldr	r3, [pc, #204]	@ (8017a34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8017968:	689b      	ldr	r3, [r3, #8]
 801796a:	f003 030c 	and.w	r3, r3, #12
 801796e:	2b04      	cmp	r3, #4
 8017970:	d05b      	beq.n	8017a2a <HAL_RCC_GetSysClockFreq+0xc6>
 8017972:	2b08      	cmp	r3, #8
 8017974:	d15b      	bne.n	8017a2e <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8017976:	4b2f      	ldr	r3, [pc, #188]	@ (8017a34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8017978:	685a      	ldr	r2, [r3, #4]
 801797a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801797e:	685b      	ldr	r3, [r3, #4]
 8017980:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8017984:	d02c      	beq.n	80179e0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8017986:	4b2b      	ldr	r3, [pc, #172]	@ (8017a34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8017988:	6858      	ldr	r0, [r3, #4]
 801798a:	f3c0 1088 	ubfx	r0, r0, #6, #9
 801798e:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8017992:	ebbc 0c00 	subs.w	ip, ip, r0
 8017996:	eb6e 0e0e 	sbc.w	lr, lr, lr
 801799a:	ea4f 138e 	mov.w	r3, lr, lsl #6
 801799e:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80179a2:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80179a6:	ebb1 010c 	subs.w	r1, r1, ip
 80179aa:	eb63 030e 	sbc.w	r3, r3, lr
 80179ae:	00db      	lsls	r3, r3, #3
 80179b0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80179b4:	00c9      	lsls	r1, r1, #3
 80179b6:	eb11 0c00 	adds.w	ip, r1, r0
 80179ba:	f143 0300 	adc.w	r3, r3, #0
 80179be:	0259      	lsls	r1, r3, #9
 80179c0:	2300      	movs	r3, #0
 80179c2:	ea4f 204c 	mov.w	r0, ip, lsl #9
 80179c6:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 80179ca:	f7f9 f9c5 	bl	8010d58 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80179ce:	4b19      	ldr	r3, [pc, #100]	@ (8017a34 <HAL_RCC_GetSysClockFreq+0xd0>)
 80179d0:	685b      	ldr	r3, [r3, #4]
 80179d2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80179d6:	3301      	adds	r3, #1
 80179d8:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80179da:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80179de:	e027      	b.n	8017a30 <HAL_RCC_GetSysClockFreq+0xcc>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80179e0:	4b14      	ldr	r3, [pc, #80]	@ (8017a34 <HAL_RCC_GetSysClockFreq+0xd0>)
 80179e2:	6858      	ldr	r0, [r3, #4]
 80179e4:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80179e8:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80179ec:	ebbc 0c00 	subs.w	ip, ip, r0
 80179f0:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80179f4:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80179f8:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80179fc:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8017a00:	ebb1 010c 	subs.w	r1, r1, ip
 8017a04:	eb63 030e 	sbc.w	r3, r3, lr
 8017a08:	00db      	lsls	r3, r3, #3
 8017a0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8017a0e:	00c9      	lsls	r1, r1, #3
 8017a10:	eb11 0c00 	adds.w	ip, r1, r0
 8017a14:	f143 0300 	adc.w	r3, r3, #0
 8017a18:	0299      	lsls	r1, r3, #10
 8017a1a:	2300      	movs	r3, #0
 8017a1c:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8017a20:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8017a24:	f7f9 f998 	bl	8010d58 <__aeabi_uldivmod>
 8017a28:	e7d1      	b.n	80179ce <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 8017a2a:	4803      	ldr	r0, [pc, #12]	@ (8017a38 <HAL_RCC_GetSysClockFreq+0xd4>)
 8017a2c:	e000      	b.n	8017a30 <HAL_RCC_GetSysClockFreq+0xcc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8017a2e:	4803      	ldr	r0, [pc, #12]	@ (8017a3c <HAL_RCC_GetSysClockFreq+0xd8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8017a30:	bd08      	pop	{r3, pc}
 8017a32:	bf00      	nop
 8017a34:	40023800 	.word	0x40023800
 8017a38:	007a1200 	.word	0x007a1200
 8017a3c:	00f42400 	.word	0x00f42400

08017a40 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8017a40:	2800      	cmp	r0, #0
 8017a42:	f000 809b 	beq.w	8017b7c <HAL_RCC_ClockConfig+0x13c>
{
 8017a46:	b570      	push	{r4, r5, r6, lr}
 8017a48:	460d      	mov	r5, r1
 8017a4a:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8017a4c:	4b4f      	ldr	r3, [pc, #316]	@ (8017b8c <HAL_RCC_ClockConfig+0x14c>)
 8017a4e:	681b      	ldr	r3, [r3, #0]
 8017a50:	f003 0307 	and.w	r3, r3, #7
 8017a54:	428b      	cmp	r3, r1
 8017a56:	d208      	bcs.n	8017a6a <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8017a58:	b2cb      	uxtb	r3, r1
 8017a5a:	4a4c      	ldr	r2, [pc, #304]	@ (8017b8c <HAL_RCC_ClockConfig+0x14c>)
 8017a5c:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017a5e:	6813      	ldr	r3, [r2, #0]
 8017a60:	f003 0307 	and.w	r3, r3, #7
 8017a64:	428b      	cmp	r3, r1
 8017a66:	f040 808b 	bne.w	8017b80 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8017a6a:	6823      	ldr	r3, [r4, #0]
 8017a6c:	f013 0f02 	tst.w	r3, #2
 8017a70:	d017      	beq.n	8017aa2 <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8017a72:	f013 0f04 	tst.w	r3, #4
 8017a76:	d004      	beq.n	8017a82 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8017a78:	4a45      	ldr	r2, [pc, #276]	@ (8017b90 <HAL_RCC_ClockConfig+0x150>)
 8017a7a:	6893      	ldr	r3, [r2, #8]
 8017a7c:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8017a80:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8017a82:	6823      	ldr	r3, [r4, #0]
 8017a84:	f013 0f08 	tst.w	r3, #8
 8017a88:	d004      	beq.n	8017a94 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8017a8a:	4a41      	ldr	r2, [pc, #260]	@ (8017b90 <HAL_RCC_ClockConfig+0x150>)
 8017a8c:	6893      	ldr	r3, [r2, #8]
 8017a8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8017a92:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8017a94:	4a3e      	ldr	r2, [pc, #248]	@ (8017b90 <HAL_RCC_ClockConfig+0x150>)
 8017a96:	6893      	ldr	r3, [r2, #8]
 8017a98:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8017a9c:	68a1      	ldr	r1, [r4, #8]
 8017a9e:	430b      	orrs	r3, r1
 8017aa0:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8017aa2:	6823      	ldr	r3, [r4, #0]
 8017aa4:	f013 0f01 	tst.w	r3, #1
 8017aa8:	d032      	beq.n	8017b10 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8017aaa:	6863      	ldr	r3, [r4, #4]
 8017aac:	2b01      	cmp	r3, #1
 8017aae:	d021      	beq.n	8017af4 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8017ab0:	1e9a      	subs	r2, r3, #2
 8017ab2:	2a01      	cmp	r2, #1
 8017ab4:	d925      	bls.n	8017b02 <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8017ab6:	4a36      	ldr	r2, [pc, #216]	@ (8017b90 <HAL_RCC_ClockConfig+0x150>)
 8017ab8:	6812      	ldr	r2, [r2, #0]
 8017aba:	f012 0f02 	tst.w	r2, #2
 8017abe:	d061      	beq.n	8017b84 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8017ac0:	4933      	ldr	r1, [pc, #204]	@ (8017b90 <HAL_RCC_ClockConfig+0x150>)
 8017ac2:	688a      	ldr	r2, [r1, #8]
 8017ac4:	f022 0203 	bic.w	r2, r2, #3
 8017ac8:	4313      	orrs	r3, r2
 8017aca:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8017acc:	f7fe fd56 	bl	801657c <HAL_GetTick>
 8017ad0:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8017ad2:	4b2f      	ldr	r3, [pc, #188]	@ (8017b90 <HAL_RCC_ClockConfig+0x150>)
 8017ad4:	689b      	ldr	r3, [r3, #8]
 8017ad6:	f003 030c 	and.w	r3, r3, #12
 8017ada:	6862      	ldr	r2, [r4, #4]
 8017adc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8017ae0:	d016      	beq.n	8017b10 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8017ae2:	f7fe fd4b 	bl	801657c <HAL_GetTick>
 8017ae6:	1b80      	subs	r0, r0, r6
 8017ae8:	f241 3388 	movw	r3, #5000	@ 0x1388
 8017aec:	4298      	cmp	r0, r3
 8017aee:	d9f0      	bls.n	8017ad2 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8017af0:	2003      	movs	r0, #3
 8017af2:	e042      	b.n	8017b7a <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8017af4:	4a26      	ldr	r2, [pc, #152]	@ (8017b90 <HAL_RCC_ClockConfig+0x150>)
 8017af6:	6812      	ldr	r2, [r2, #0]
 8017af8:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8017afc:	d1e0      	bne.n	8017ac0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8017afe:	2001      	movs	r0, #1
 8017b00:	e03b      	b.n	8017b7a <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8017b02:	4a23      	ldr	r2, [pc, #140]	@ (8017b90 <HAL_RCC_ClockConfig+0x150>)
 8017b04:	6812      	ldr	r2, [r2, #0]
 8017b06:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8017b0a:	d1d9      	bne.n	8017ac0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8017b0c:	2001      	movs	r0, #1
 8017b0e:	e034      	b.n	8017b7a <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8017b10:	4b1e      	ldr	r3, [pc, #120]	@ (8017b8c <HAL_RCC_ClockConfig+0x14c>)
 8017b12:	681b      	ldr	r3, [r3, #0]
 8017b14:	f003 0307 	and.w	r3, r3, #7
 8017b18:	42ab      	cmp	r3, r5
 8017b1a:	d907      	bls.n	8017b2c <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8017b1c:	b2ea      	uxtb	r2, r5
 8017b1e:	4b1b      	ldr	r3, [pc, #108]	@ (8017b8c <HAL_RCC_ClockConfig+0x14c>)
 8017b20:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017b22:	681b      	ldr	r3, [r3, #0]
 8017b24:	f003 0307 	and.w	r3, r3, #7
 8017b28:	42ab      	cmp	r3, r5
 8017b2a:	d12d      	bne.n	8017b88 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8017b2c:	6823      	ldr	r3, [r4, #0]
 8017b2e:	f013 0f04 	tst.w	r3, #4
 8017b32:	d006      	beq.n	8017b42 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8017b34:	4a16      	ldr	r2, [pc, #88]	@ (8017b90 <HAL_RCC_ClockConfig+0x150>)
 8017b36:	6893      	ldr	r3, [r2, #8]
 8017b38:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8017b3c:	68e1      	ldr	r1, [r4, #12]
 8017b3e:	430b      	orrs	r3, r1
 8017b40:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8017b42:	6823      	ldr	r3, [r4, #0]
 8017b44:	f013 0f08 	tst.w	r3, #8
 8017b48:	d007      	beq.n	8017b5a <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8017b4a:	4a11      	ldr	r2, [pc, #68]	@ (8017b90 <HAL_RCC_ClockConfig+0x150>)
 8017b4c:	6893      	ldr	r3, [r2, #8]
 8017b4e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8017b52:	6921      	ldr	r1, [r4, #16]
 8017b54:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8017b58:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8017b5a:	f7ff ff03 	bl	8017964 <HAL_RCC_GetSysClockFreq>
 8017b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8017b90 <HAL_RCC_ClockConfig+0x150>)
 8017b60:	689b      	ldr	r3, [r3, #8]
 8017b62:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8017b66:	4a0b      	ldr	r2, [pc, #44]	@ (8017b94 <HAL_RCC_ClockConfig+0x154>)
 8017b68:	5cd3      	ldrb	r3, [r2, r3]
 8017b6a:	40d8      	lsrs	r0, r3
 8017b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8017b98 <HAL_RCC_ClockConfig+0x158>)
 8017b6e:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8017b70:	4b0a      	ldr	r3, [pc, #40]	@ (8017b9c <HAL_RCC_ClockConfig+0x15c>)
 8017b72:	6818      	ldr	r0, [r3, #0]
 8017b74:	f7fa fd0c 	bl	8012590 <HAL_InitTick>
  return HAL_OK;
 8017b78:	2000      	movs	r0, #0
}
 8017b7a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8017b7c:	2001      	movs	r0, #1
}
 8017b7e:	4770      	bx	lr
      return HAL_ERROR;
 8017b80:	2001      	movs	r0, #1
 8017b82:	e7fa      	b.n	8017b7a <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8017b84:	2001      	movs	r0, #1
 8017b86:	e7f8      	b.n	8017b7a <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8017b88:	2001      	movs	r0, #1
 8017b8a:	e7f6      	b.n	8017b7a <HAL_RCC_ClockConfig+0x13a>
 8017b8c:	40023c00 	.word	0x40023c00
 8017b90:	40023800 	.word	0x40023800
 8017b94:	08036ba8 	.word	0x08036ba8
 8017b98:	20000018 	.word	0x20000018
 8017b9c:	20000108 	.word	0x20000108

08017ba0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8017ba0:	4b01      	ldr	r3, [pc, #4]	@ (8017ba8 <HAL_RCC_GetHCLKFreq+0x8>)
 8017ba2:	6818      	ldr	r0, [r3, #0]
 8017ba4:	4770      	bx	lr
 8017ba6:	bf00      	nop
 8017ba8:	20000018 	.word	0x20000018

08017bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8017bac:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8017bae:	f7ff fff7 	bl	8017ba0 <HAL_RCC_GetHCLKFreq>
 8017bb2:	4b04      	ldr	r3, [pc, #16]	@ (8017bc4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8017bb4:	689b      	ldr	r3, [r3, #8]
 8017bb6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8017bba:	4a03      	ldr	r2, [pc, #12]	@ (8017bc8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8017bbc:	5cd3      	ldrb	r3, [r2, r3]
}
 8017bbe:	40d8      	lsrs	r0, r3
 8017bc0:	bd08      	pop	{r3, pc}
 8017bc2:	bf00      	nop
 8017bc4:	40023800 	.word	0x40023800
 8017bc8:	08036ba0 	.word	0x08036ba0

08017bcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8017bcc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8017bce:	f7ff ffe7 	bl	8017ba0 <HAL_RCC_GetHCLKFreq>
 8017bd2:	4b04      	ldr	r3, [pc, #16]	@ (8017be4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8017bd4:	689b      	ldr	r3, [r3, #8]
 8017bd6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8017bda:	4a03      	ldr	r2, [pc, #12]	@ (8017be8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8017bdc:	5cd3      	ldrb	r3, [r2, r3]
}
 8017bde:	40d8      	lsrs	r0, r3
 8017be0:	bd08      	pop	{r3, pc}
 8017be2:	bf00      	nop
 8017be4:	40023800 	.word	0x40023800
 8017be8:	08036ba0 	.word	0x08036ba0

08017bec <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8017bec:	230f      	movs	r3, #15
 8017bee:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8017bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8017c20 <HAL_RCC_GetClockConfig+0x34>)
 8017bf2:	689a      	ldr	r2, [r3, #8]
 8017bf4:	f002 0203 	and.w	r2, r2, #3
 8017bf8:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8017bfa:	689a      	ldr	r2, [r3, #8]
 8017bfc:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8017c00:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8017c02:	689a      	ldr	r2, [r3, #8]
 8017c04:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8017c08:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8017c0a:	689b      	ldr	r3, [r3, #8]
 8017c0c:	08db      	lsrs	r3, r3, #3
 8017c0e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8017c12:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8017c14:	4b03      	ldr	r3, [pc, #12]	@ (8017c24 <HAL_RCC_GetClockConfig+0x38>)
 8017c16:	681b      	ldr	r3, [r3, #0]
 8017c18:	f003 0307 	and.w	r3, r3, #7
 8017c1c:	600b      	str	r3, [r1, #0]
}
 8017c1e:	4770      	bx	lr
 8017c20:	40023800 	.word	0x40023800
 8017c24:	40023c00 	.word	0x40023c00

08017c28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8017c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017c2c:	b082      	sub	sp, #8
 8017c2e:	4605      	mov	r5, r0
 8017c30:	4688      	mov	r8, r1
 8017c32:	4617      	mov	r7, r2
 8017c34:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8017c36:	f7fe fca1 	bl	801657c <HAL_GetTick>
 8017c3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017c3c:	1a1b      	subs	r3, r3, r0
 8017c3e:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8017c42:	f7fe fc9b 	bl	801657c <HAL_GetTick>
 8017c46:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8017c48:	4b28      	ldr	r3, [pc, #160]	@ (8017cec <SPI_WaitFlagStateUntilTimeout+0xc4>)
 8017c4a:	681b      	ldr	r3, [r3, #0]
 8017c4c:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8017c50:	fb09 f303 	mul.w	r3, r9, r3
 8017c54:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8017c56:	682b      	ldr	r3, [r5, #0]
 8017c58:	689c      	ldr	r4, [r3, #8]
 8017c5a:	ea38 0404 	bics.w	r4, r8, r4
 8017c5e:	bf0c      	ite	eq
 8017c60:	2301      	moveq	r3, #1
 8017c62:	2300      	movne	r3, #0
 8017c64:	42bb      	cmp	r3, r7
 8017c66:	d03d      	beq.n	8017ce4 <SPI_WaitFlagStateUntilTimeout+0xbc>
  {
    if (Timeout != HAL_MAX_DELAY)
 8017c68:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8017c6c:	d0f3      	beq.n	8017c56 <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8017c6e:	f7fe fc85 	bl	801657c <HAL_GetTick>
 8017c72:	eba0 000a 	sub.w	r0, r0, sl
 8017c76:	4548      	cmp	r0, r9
 8017c78:	d207      	bcs.n	8017c8a <SPI_WaitFlagStateUntilTimeout+0x62>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8017c7a:	9a01      	ldr	r2, [sp, #4]
 8017c7c:	b102      	cbz	r2, 8017c80 <SPI_WaitFlagStateUntilTimeout+0x58>
 8017c7e:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8017c80:	9b01      	ldr	r3, [sp, #4]
 8017c82:	3b01      	subs	r3, #1
 8017c84:	9301      	str	r3, [sp, #4]
 8017c86:	4691      	mov	r9, r2
 8017c88:	e7e5      	b.n	8017c56 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8017c8a:	682a      	ldr	r2, [r5, #0]
 8017c8c:	6853      	ldr	r3, [r2, #4]
 8017c8e:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8017c92:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8017c94:	686b      	ldr	r3, [r5, #4]
 8017c96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8017c9a:	d00b      	beq.n	8017cb4 <SPI_WaitFlagStateUntilTimeout+0x8c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8017c9c:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8017c9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8017ca2:	d014      	beq.n	8017cce <SPI_WaitFlagStateUntilTimeout+0xa6>
        hspi->State = HAL_SPI_STATE_READY;
 8017ca4:	2301      	movs	r3, #1
 8017ca6:	f885 3051 	strb.w	r3, [r5, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8017caa:	2300      	movs	r3, #0
 8017cac:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
        return HAL_TIMEOUT;
 8017cb0:	2003      	movs	r0, #3
 8017cb2:	e018      	b.n	8017ce6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8017cb4:	68ab      	ldr	r3, [r5, #8]
 8017cb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8017cba:	d002      	beq.n	8017cc2 <SPI_WaitFlagStateUntilTimeout+0x9a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8017cbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017cc0:	d1ec      	bne.n	8017c9c <SPI_WaitFlagStateUntilTimeout+0x74>
          __HAL_SPI_DISABLE(hspi);
 8017cc2:	682a      	ldr	r2, [r5, #0]
 8017cc4:	6813      	ldr	r3, [r2, #0]
 8017cc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017cca:	6013      	str	r3, [r2, #0]
 8017ccc:	e7e6      	b.n	8017c9c <SPI_WaitFlagStateUntilTimeout+0x74>
          SPI_RESET_CRC(hspi);
 8017cce:	682a      	ldr	r2, [r5, #0]
 8017cd0:	6813      	ldr	r3, [r2, #0]
 8017cd2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8017cd6:	6013      	str	r3, [r2, #0]
 8017cd8:	682a      	ldr	r2, [r5, #0]
 8017cda:	6813      	ldr	r3, [r2, #0]
 8017cdc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8017ce0:	6013      	str	r3, [r2, #0]
 8017ce2:	e7df      	b.n	8017ca4 <SPI_WaitFlagStateUntilTimeout+0x7c>
    }
  }

  return HAL_OK;
 8017ce4:	2000      	movs	r0, #0
}
 8017ce6:	b002      	add	sp, #8
 8017ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017cec:	20000018 	.word	0x20000018

08017cf0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8017cf0:	b570      	push	{r4, r5, r6, lr}
 8017cf2:	b084      	sub	sp, #16
 8017cf4:	4604      	mov	r4, r0
 8017cf6:	460d      	mov	r5, r1
 8017cf8:	4616      	mov	r6, r2
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8017cfa:	9200      	str	r2, [sp, #0]
 8017cfc:	460b      	mov	r3, r1
 8017cfe:	2201      	movs	r2, #1
 8017d00:	2102      	movs	r1, #2
 8017d02:	f7ff ff91 	bl	8017c28 <SPI_WaitFlagStateUntilTimeout>
 8017d06:	b9d0      	cbnz	r0, 8017d3e <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8017d08:	4b17      	ldr	r3, [pc, #92]	@ (8017d68 <SPI_EndRxTxTransaction+0x78>)
 8017d0a:	681b      	ldr	r3, [r3, #0]
 8017d0c:	4a17      	ldr	r2, [pc, #92]	@ (8017d6c <SPI_EndRxTxTransaction+0x7c>)
 8017d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8017d12:	0d5b      	lsrs	r3, r3, #21
 8017d14:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017d18:	fb02 f303 	mul.w	r3, r2, r3
 8017d1c:	9303      	str	r3, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8017d1e:	6863      	ldr	r3, [r4, #4]
 8017d20:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8017d24:	d011      	beq.n	8017d4a <SPI_EndRxTxTransaction+0x5a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8017d26:	9b03      	ldr	r3, [sp, #12]
 8017d28:	b13b      	cbz	r3, 8017d3a <SPI_EndRxTxTransaction+0x4a>
      {
        break;
      }
      count--;
 8017d2a:	9b03      	ldr	r3, [sp, #12]
 8017d2c:	3b01      	subs	r3, #1
 8017d2e:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8017d30:	6823      	ldr	r3, [r4, #0]
 8017d32:	689b      	ldr	r3, [r3, #8]
 8017d34:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017d38:	d1f5      	bne.n	8017d26 <SPI_EndRxTxTransaction+0x36>
  }

  return HAL_OK;
}
 8017d3a:	b004      	add	sp, #16
 8017d3c:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8017d3e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8017d40:	f043 0320 	orr.w	r3, r3, #32
 8017d44:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 8017d46:	2003      	movs	r0, #3
 8017d48:	e7f7      	b.n	8017d3a <SPI_EndRxTxTransaction+0x4a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8017d4a:	9600      	str	r6, [sp, #0]
 8017d4c:	462b      	mov	r3, r5
 8017d4e:	2200      	movs	r2, #0
 8017d50:	2180      	movs	r1, #128	@ 0x80
 8017d52:	4620      	mov	r0, r4
 8017d54:	f7ff ff68 	bl	8017c28 <SPI_WaitFlagStateUntilTimeout>
 8017d58:	2800      	cmp	r0, #0
 8017d5a:	d0ee      	beq.n	8017d3a <SPI_EndRxTxTransaction+0x4a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8017d5c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8017d5e:	f043 0320 	orr.w	r3, r3, #32
 8017d62:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 8017d64:	2003      	movs	r0, #3
 8017d66:	e7e8      	b.n	8017d3a <SPI_EndRxTxTransaction+0x4a>
 8017d68:	20000018 	.word	0x20000018
 8017d6c:	165e9f81 	.word	0x165e9f81

08017d70 <SPI_EndRxTransaction>:
{
 8017d70:	b510      	push	{r4, lr}
 8017d72:	b082      	sub	sp, #8
 8017d74:	4604      	mov	r4, r0
 8017d76:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8017d78:	6841      	ldr	r1, [r0, #4]
 8017d7a:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 8017d7e:	d014      	beq.n	8017daa <SPI_EndRxTransaction+0x3a>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8017d80:	6861      	ldr	r1, [r4, #4]
 8017d82:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 8017d86:	d12a      	bne.n	8017dde <SPI_EndRxTransaction+0x6e>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8017d88:	68a1      	ldr	r1, [r4, #8]
 8017d8a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8017d8e:	d019      	beq.n	8017dc4 <SPI_EndRxTransaction+0x54>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8017d90:	9200      	str	r2, [sp, #0]
 8017d92:	2200      	movs	r2, #0
 8017d94:	2180      	movs	r1, #128	@ 0x80
 8017d96:	4620      	mov	r0, r4
 8017d98:	f7ff ff46 	bl	8017c28 <SPI_WaitFlagStateUntilTimeout>
 8017d9c:	b330      	cbz	r0, 8017dec <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8017d9e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8017da0:	f043 0320 	orr.w	r3, r3, #32
 8017da4:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8017da6:	2003      	movs	r0, #3
 8017da8:	e020      	b.n	8017dec <SPI_EndRxTransaction+0x7c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8017daa:	6881      	ldr	r1, [r0, #8]
 8017dac:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8017db0:	d002      	beq.n	8017db8 <SPI_EndRxTransaction+0x48>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8017db2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8017db6:	d1e3      	bne.n	8017d80 <SPI_EndRxTransaction+0x10>
    __HAL_SPI_DISABLE(hspi);
 8017db8:	6820      	ldr	r0, [r4, #0]
 8017dba:	6801      	ldr	r1, [r0, #0]
 8017dbc:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8017dc0:	6001      	str	r1, [r0, #0]
 8017dc2:	e7dd      	b.n	8017d80 <SPI_EndRxTransaction+0x10>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8017dc4:	9200      	str	r2, [sp, #0]
 8017dc6:	2200      	movs	r2, #0
 8017dc8:	2101      	movs	r1, #1
 8017dca:	4620      	mov	r0, r4
 8017dcc:	f7ff ff2c 	bl	8017c28 <SPI_WaitFlagStateUntilTimeout>
 8017dd0:	b160      	cbz	r0, 8017dec <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8017dd2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8017dd4:	f043 0320 	orr.w	r3, r3, #32
 8017dd8:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8017dda:	2003      	movs	r0, #3
 8017ddc:	e006      	b.n	8017dec <SPI_EndRxTransaction+0x7c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8017dde:	9200      	str	r2, [sp, #0]
 8017de0:	2200      	movs	r2, #0
 8017de2:	2101      	movs	r1, #1
 8017de4:	4620      	mov	r0, r4
 8017de6:	f7ff ff1f 	bl	8017c28 <SPI_WaitFlagStateUntilTimeout>
 8017dea:	b908      	cbnz	r0, 8017df0 <SPI_EndRxTransaction+0x80>
}
 8017dec:	b002      	add	sp, #8
 8017dee:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8017df0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8017df2:	f043 0320 	orr.w	r3, r3, #32
 8017df6:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 8017df8:	2003      	movs	r0, #3
 8017dfa:	e7f7      	b.n	8017dec <SPI_EndRxTransaction+0x7c>

08017dfc <HAL_SPI_Init>:
  if (hspi == NULL)
 8017dfc:	2800      	cmp	r0, #0
 8017dfe:	d05a      	beq.n	8017eb6 <HAL_SPI_Init+0xba>
{
 8017e00:	b510      	push	{r4, lr}
 8017e02:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8017e04:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8017e06:	b933      	cbnz	r3, 8017e16 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8017e08:	6843      	ldr	r3, [r0, #4]
 8017e0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8017e0e:	d005      	beq.n	8017e1c <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8017e10:	2300      	movs	r3, #0
 8017e12:	61c3      	str	r3, [r0, #28]
 8017e14:	e002      	b.n	8017e1c <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8017e16:	2300      	movs	r3, #0
 8017e18:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8017e1a:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8017e1c:	2300      	movs	r3, #0
 8017e1e:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8017e20:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8017e24:	2b00      	cmp	r3, #0
 8017e26:	d040      	beq.n	8017eaa <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 8017e28:	2302      	movs	r3, #2
 8017e2a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 8017e2e:	6822      	ldr	r2, [r4, #0]
 8017e30:	6813      	ldr	r3, [r2, #0]
 8017e32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017e36:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8017e38:	6863      	ldr	r3, [r4, #4]
 8017e3a:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8017e3e:	68a2      	ldr	r2, [r4, #8]
 8017e40:	f402 4204 	and.w	r2, r2, #33792	@ 0x8400
 8017e44:	4313      	orrs	r3, r2
 8017e46:	68e2      	ldr	r2, [r4, #12]
 8017e48:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8017e4c:	4313      	orrs	r3, r2
 8017e4e:	6922      	ldr	r2, [r4, #16]
 8017e50:	f002 0202 	and.w	r2, r2, #2
 8017e54:	4313      	orrs	r3, r2
 8017e56:	6962      	ldr	r2, [r4, #20]
 8017e58:	f002 0201 	and.w	r2, r2, #1
 8017e5c:	4313      	orrs	r3, r2
 8017e5e:	69a2      	ldr	r2, [r4, #24]
 8017e60:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8017e64:	4313      	orrs	r3, r2
 8017e66:	69e2      	ldr	r2, [r4, #28]
 8017e68:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8017e6c:	4313      	orrs	r3, r2
 8017e6e:	6a22      	ldr	r2, [r4, #32]
 8017e70:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8017e74:	4313      	orrs	r3, r2
 8017e76:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8017e78:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8017e7c:	6821      	ldr	r1, [r4, #0]
 8017e7e:	4313      	orrs	r3, r2
 8017e80:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8017e82:	8b63      	ldrh	r3, [r4, #26]
 8017e84:	f003 0304 	and.w	r3, r3, #4
 8017e88:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8017e8a:	f002 0210 	and.w	r2, r2, #16
 8017e8e:	6821      	ldr	r1, [r4, #0]
 8017e90:	4313      	orrs	r3, r2
 8017e92:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8017e94:	6822      	ldr	r2, [r4, #0]
 8017e96:	69d3      	ldr	r3, [r2, #28]
 8017e98:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8017e9c:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8017e9e:	2000      	movs	r0, #0
 8017ea0:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8017ea2:	2301      	movs	r3, #1
 8017ea4:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 8017ea8:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8017eaa:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8017eae:	4620      	mov	r0, r4
 8017eb0:	f7fa faea 	bl	8012488 <HAL_SPI_MspInit>
 8017eb4:	e7b8      	b.n	8017e28 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8017eb6:	2001      	movs	r0, #1
}
 8017eb8:	4770      	bx	lr

08017eba <HAL_SPI_Transmit>:
{
 8017eba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017ebe:	b083      	sub	sp, #12
 8017ec0:	4604      	mov	r4, r0
 8017ec2:	4689      	mov	r9, r1
 8017ec4:	4690      	mov	r8, r2
 8017ec6:	461d      	mov	r5, r3
  tickstart = HAL_GetTick();
 8017ec8:	f7fe fb58 	bl	801657c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8017ecc:	f894 6051 	ldrb.w	r6, [r4, #81]	@ 0x51
 8017ed0:	b2f6      	uxtb	r6, r6
 8017ed2:	2e01      	cmp	r6, #1
 8017ed4:	f040 80cc 	bne.w	8018070 <HAL_SPI_Transmit+0x1b6>
 8017ed8:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 8017eda:	f1b9 0f00 	cmp.w	r9, #0
 8017ede:	f000 80c8 	beq.w	8018072 <HAL_SPI_Transmit+0x1b8>
 8017ee2:	f1b8 0f00 	cmp.w	r8, #0
 8017ee6:	f000 80c4 	beq.w	8018072 <HAL_SPI_Transmit+0x1b8>
  __HAL_LOCK(hspi);
 8017eea:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8017eee:	2b01      	cmp	r3, #1
 8017ef0:	f000 80c3 	beq.w	801807a <HAL_SPI_Transmit+0x1c0>
 8017ef4:	2301      	movs	r3, #1
 8017ef6:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8017efa:	2303      	movs	r3, #3
 8017efc:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8017f00:	2300      	movs	r3, #0
 8017f02:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8017f04:	f8c4 9030 	str.w	r9, [r4, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8017f08:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8017f0c:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8017f10:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8017f12:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8017f14:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8017f16:	6463      	str	r3, [r4, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8017f18:	6423      	str	r3, [r4, #64]	@ 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8017f1a:	68a3      	ldr	r3, [r4, #8]
 8017f1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8017f20:	d01e      	beq.n	8017f60 <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8017f22:	6823      	ldr	r3, [r4, #0]
 8017f24:	681a      	ldr	r2, [r3, #0]
 8017f26:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8017f2a:	d103      	bne.n	8017f34 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8017f2c:	681a      	ldr	r2, [r3, #0]
 8017f2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8017f32:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8017f34:	68e3      	ldr	r3, [r4, #12]
 8017f36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017f3a:	d01c      	beq.n	8017f76 <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8017f3c:	6863      	ldr	r3, [r4, #4]
 8017f3e:	b113      	cbz	r3, 8017f46 <HAL_SPI_Transmit+0x8c>
 8017f40:	f1b8 0f01 	cmp.w	r8, #1
 8017f44:	d15f      	bne.n	8018006 <HAL_SPI_Transmit+0x14c>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8017f46:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017f48:	6823      	ldr	r3, [r4, #0]
 8017f4a:	7812      	ldrb	r2, [r2, #0]
 8017f4c:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8017f4e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017f50:	3301      	adds	r3, #1
 8017f52:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8017f54:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017f56:	b29b      	uxth	r3, r3
 8017f58:	3b01      	subs	r3, #1
 8017f5a:	b29b      	uxth	r3, r3
 8017f5c:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8017f5e:	e052      	b.n	8018006 <HAL_SPI_Transmit+0x14c>
    __HAL_SPI_DISABLE(hspi);
 8017f60:	6822      	ldr	r2, [r4, #0]
 8017f62:	6813      	ldr	r3, [r2, #0]
 8017f64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017f68:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8017f6a:	6822      	ldr	r2, [r4, #0]
 8017f6c:	6813      	ldr	r3, [r2, #0]
 8017f6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8017f72:	6013      	str	r3, [r2, #0]
 8017f74:	e7d5      	b.n	8017f22 <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8017f76:	6863      	ldr	r3, [r4, #4]
 8017f78:	b113      	cbz	r3, 8017f80 <HAL_SPI_Transmit+0xc6>
 8017f7a:	f1b8 0f01 	cmp.w	r8, #1
 8017f7e:	d115      	bne.n	8017fac <HAL_SPI_Transmit+0xf2>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8017f80:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017f82:	6823      	ldr	r3, [r4, #0]
 8017f84:	8812      	ldrh	r2, [r2, #0]
 8017f86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8017f88:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017f8a:	3302      	adds	r3, #2
 8017f8c:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8017f8e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017f90:	b29b      	uxth	r3, r3
 8017f92:	3b01      	subs	r3, #1
 8017f94:	b29b      	uxth	r3, r3
 8017f96:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8017f98:	e008      	b.n	8017fac <HAL_SPI_Transmit+0xf2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8017f9a:	f7fe faef 	bl	801657c <HAL_GetTick>
 8017f9e:	1bc0      	subs	r0, r0, r7
 8017fa0:	42a8      	cmp	r0, r5
 8017fa2:	d302      	bcc.n	8017faa <HAL_SPI_Transmit+0xf0>
 8017fa4:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8017fa8:	d115      	bne.n	8017fd6 <HAL_SPI_Transmit+0x11c>
 8017faa:	b1a5      	cbz	r5, 8017fd6 <HAL_SPI_Transmit+0x11c>
    while (hspi->TxXferCount > 0U)
 8017fac:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017fae:	b29b      	uxth	r3, r3
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	d042      	beq.n	801803a <HAL_SPI_Transmit+0x180>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8017fb4:	6823      	ldr	r3, [r4, #0]
 8017fb6:	689a      	ldr	r2, [r3, #8]
 8017fb8:	f012 0f02 	tst.w	r2, #2
 8017fbc:	d0ed      	beq.n	8017f9a <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8017fbe:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017fc0:	8812      	ldrh	r2, [r2, #0]
 8017fc2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8017fc4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017fc6:	3302      	adds	r3, #2
 8017fc8:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8017fca:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017fcc:	b29b      	uxth	r3, r3
 8017fce:	3b01      	subs	r3, #1
 8017fd0:	b29b      	uxth	r3, r3
 8017fd2:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8017fd4:	e7ea      	b.n	8017fac <HAL_SPI_Transmit+0xf2>
          hspi->State = HAL_SPI_STATE_READY;
 8017fd6:	2301      	movs	r3, #1
 8017fd8:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8017fdc:	2300      	movs	r3, #0
 8017fde:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 8017fe2:	2603      	movs	r6, #3
 8017fe4:	e045      	b.n	8018072 <HAL_SPI_Transmit+0x1b8>
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8017fe6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017fe8:	7812      	ldrb	r2, [r2, #0]
 8017fea:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8017fec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017fee:	3301      	adds	r3, #1
 8017ff0:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8017ff2:	f8b4 c036 	ldrh.w	ip, [r4, #54]	@ 0x36
 8017ff6:	fa1f fc8c 	uxth.w	ip, ip
 8017ffa:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8017ffe:	fa1f fc8c 	uxth.w	ip, ip
 8018002:	f8a4 c036 	strh.w	ip, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8018006:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8018008:	b29b      	uxth	r3, r3
 801800a:	b1b3      	cbz	r3, 801803a <HAL_SPI_Transmit+0x180>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801800c:	6823      	ldr	r3, [r4, #0]
 801800e:	689a      	ldr	r2, [r3, #8]
 8018010:	f012 0f02 	tst.w	r2, #2
 8018014:	d1e7      	bne.n	8017fe6 <HAL_SPI_Transmit+0x12c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8018016:	f7fe fab1 	bl	801657c <HAL_GetTick>
 801801a:	1bc0      	subs	r0, r0, r7
 801801c:	42a8      	cmp	r0, r5
 801801e:	d302      	bcc.n	8018026 <HAL_SPI_Transmit+0x16c>
 8018020:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8018024:	d101      	bne.n	801802a <HAL_SPI_Transmit+0x170>
 8018026:	2d00      	cmp	r5, #0
 8018028:	d1ed      	bne.n	8018006 <HAL_SPI_Transmit+0x14c>
          hspi->State = HAL_SPI_STATE_READY;
 801802a:	2301      	movs	r3, #1
 801802c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8018030:	2300      	movs	r3, #0
 8018032:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 8018036:	2603      	movs	r6, #3
 8018038:	e01b      	b.n	8018072 <HAL_SPI_Transmit+0x1b8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801803a:	463a      	mov	r2, r7
 801803c:	4629      	mov	r1, r5
 801803e:	4620      	mov	r0, r4
 8018040:	f7ff fe56 	bl	8017cf0 <SPI_EndRxTxTransaction>
 8018044:	b108      	cbz	r0, 801804a <HAL_SPI_Transmit+0x190>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8018046:	2320      	movs	r3, #32
 8018048:	6563      	str	r3, [r4, #84]	@ 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801804a:	68a3      	ldr	r3, [r4, #8]
 801804c:	b933      	cbnz	r3, 801805c <HAL_SPI_Transmit+0x1a2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801804e:	9301      	str	r3, [sp, #4]
 8018050:	6823      	ldr	r3, [r4, #0]
 8018052:	68da      	ldr	r2, [r3, #12]
 8018054:	9201      	str	r2, [sp, #4]
 8018056:	689b      	ldr	r3, [r3, #8]
 8018058:	9301      	str	r3, [sp, #4]
 801805a:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 801805c:	2301      	movs	r3, #1
 801805e:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8018062:	2300      	movs	r3, #0
 8018064:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8018068:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801806a:	b913      	cbnz	r3, 8018072 <HAL_SPI_Transmit+0x1b8>
    return HAL_OK;
 801806c:	2600      	movs	r6, #0
 801806e:	e000      	b.n	8018072 <HAL_SPI_Transmit+0x1b8>
    return HAL_BUSY;
 8018070:	2602      	movs	r6, #2
}
 8018072:	4630      	mov	r0, r6
 8018074:	b003      	add	sp, #12
 8018076:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 801807a:	2602      	movs	r6, #2
 801807c:	e7f9      	b.n	8018072 <HAL_SPI_Transmit+0x1b8>

0801807e <HAL_SPI_TransmitReceive>:
{
 801807e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018082:	b083      	sub	sp, #12
 8018084:	4604      	mov	r4, r0
 8018086:	4688      	mov	r8, r1
 8018088:	4691      	mov	r9, r2
 801808a:	461f      	mov	r7, r3
 801808c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  tickstart = HAL_GetTick();
 801808e:	f7fe fa75 	bl	801657c <HAL_GetTick>
 8018092:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8018094:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8018098:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 801809a:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801809c:	2b01      	cmp	r3, #1
 801809e:	d00a      	beq.n	80180b6 <HAL_SPI_TransmitReceive+0x38>
 80180a0:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80180a4:	f040 8105 	bne.w	80182b2 <HAL_SPI_TransmitReceive+0x234>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80180a8:	68a2      	ldr	r2, [r4, #8]
 80180aa:	2a00      	cmp	r2, #0
 80180ac:	f040 8105 	bne.w	80182ba <HAL_SPI_TransmitReceive+0x23c>
 80180b0:	2b04      	cmp	r3, #4
 80180b2:	f040 8104 	bne.w	80182be <HAL_SPI_TransmitReceive+0x240>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80180b6:	f1b8 0f00 	cmp.w	r8, #0
 80180ba:	f000 8102 	beq.w	80182c2 <HAL_SPI_TransmitReceive+0x244>
 80180be:	f1b9 0f00 	cmp.w	r9, #0
 80180c2:	f000 8100 	beq.w	80182c6 <HAL_SPI_TransmitReceive+0x248>
 80180c6:	2f00      	cmp	r7, #0
 80180c8:	f000 80ff 	beq.w	80182ca <HAL_SPI_TransmitReceive+0x24c>
  __HAL_LOCK(hspi);
 80180cc:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 80180d0:	2b01      	cmp	r3, #1
 80180d2:	f000 80fc 	beq.w	80182ce <HAL_SPI_TransmitReceive+0x250>
 80180d6:	2301      	movs	r3, #1
 80180d8:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80180dc:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 80180e0:	b2db      	uxtb	r3, r3
 80180e2:	2b04      	cmp	r3, #4
 80180e4:	d002      	beq.n	80180ec <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80180e6:	2305      	movs	r3, #5
 80180e8:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80180ec:	2300      	movs	r3, #0
 80180ee:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80180f0:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80180f4:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80180f6:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80180f8:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80180fc:	86e7      	strh	r7, [r4, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80180fe:	86a7      	strh	r7, [r4, #52]	@ 0x34
  hspi->RxISR       = NULL;
 8018100:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8018102:	6463      	str	r3, [r4, #68]	@ 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8018104:	6823      	ldr	r3, [r4, #0]
 8018106:	681a      	ldr	r2, [r3, #0]
 8018108:	f012 0f40 	tst.w	r2, #64	@ 0x40
 801810c:	d103      	bne.n	8018116 <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 801810e:	681a      	ldr	r2, [r3, #0]
 8018110:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8018114:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8018116:	68e3      	ldr	r3, [r4, #12]
 8018118:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801811c:	d011      	beq.n	8018142 <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801811e:	6863      	ldr	r3, [r4, #4]
 8018120:	b10b      	cbz	r3, 8018126 <HAL_SPI_TransmitReceive+0xa8>
 8018122:	2f01      	cmp	r7, #1
 8018124:	d10b      	bne.n	801813e <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8018126:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8018128:	6823      	ldr	r3, [r4, #0]
 801812a:	7812      	ldrb	r2, [r2, #0]
 801812c:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801812e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018130:	3301      	adds	r3, #1
 8018132:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8018134:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8018136:	b29b      	uxth	r3, r3
 8018138:	3b01      	subs	r3, #1
 801813a:	b29b      	uxth	r3, r3
 801813c:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 801813e:	2701      	movs	r7, #1
 8018140:	e071      	b.n	8018226 <HAL_SPI_TransmitReceive+0x1a8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8018142:	6863      	ldr	r3, [r4, #4]
 8018144:	b10b      	cbz	r3, 801814a <HAL_SPI_TransmitReceive+0xcc>
 8018146:	2f01      	cmp	r7, #1
 8018148:	d10b      	bne.n	8018162 <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801814a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801814c:	6823      	ldr	r3, [r4, #0]
 801814e:	8812      	ldrh	r2, [r2, #0]
 8018150:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8018152:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018154:	3302      	adds	r3, #2
 8018156:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8018158:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801815a:	b29b      	uxth	r3, r3
 801815c:	3b01      	subs	r3, #1
 801815e:	b29b      	uxth	r3, r3
 8018160:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8018162:	2701      	movs	r7, #1
 8018164:	e01b      	b.n	801819e <HAL_SPI_TransmitReceive+0x120>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8018166:	6823      	ldr	r3, [r4, #0]
 8018168:	689a      	ldr	r2, [r3, #8]
 801816a:	f012 0f01 	tst.w	r2, #1
 801816e:	d00e      	beq.n	801818e <HAL_SPI_TransmitReceive+0x110>
 8018170:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8018172:	b292      	uxth	r2, r2
 8018174:	b15a      	cbz	r2, 801818e <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8018176:	68da      	ldr	r2, [r3, #12]
 8018178:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801817a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801817c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801817e:	3302      	adds	r3, #2
 8018180:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8018182:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8018184:	b29b      	uxth	r3, r3
 8018186:	3b01      	subs	r3, #1
 8018188:	b29b      	uxth	r3, r3
 801818a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 801818c:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801818e:	f7fe f9f5 	bl	801657c <HAL_GetTick>
 8018192:	1b80      	subs	r0, r0, r6
 8018194:	42a8      	cmp	r0, r5
 8018196:	d302      	bcc.n	801819e <HAL_SPI_TransmitReceive+0x120>
 8018198:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 801819c:	d11e      	bne.n	80181dc <HAL_SPI_TransmitReceive+0x15e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801819e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80181a0:	b29b      	uxth	r3, r3
 80181a2:	b91b      	cbnz	r3, 80181ac <HAL_SPI_TransmitReceive+0x12e>
 80181a4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80181a6:	b29b      	uxth	r3, r3
 80181a8:	2b00      	cmp	r3, #0
 80181aa:	d062      	beq.n	8018272 <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80181ac:	6823      	ldr	r3, [r4, #0]
 80181ae:	689a      	ldr	r2, [r3, #8]
 80181b0:	f012 0f02 	tst.w	r2, #2
 80181b4:	d0d7      	beq.n	8018166 <HAL_SPI_TransmitReceive+0xe8>
 80181b6:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80181b8:	b292      	uxth	r2, r2
 80181ba:	2a00      	cmp	r2, #0
 80181bc:	d0d3      	beq.n	8018166 <HAL_SPI_TransmitReceive+0xe8>
 80181be:	2f00      	cmp	r7, #0
 80181c0:	d0d1      	beq.n	8018166 <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80181c2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80181c4:	8812      	ldrh	r2, [r2, #0]
 80181c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80181c8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80181ca:	3302      	adds	r3, #2
 80181cc:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80181ce:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80181d0:	b29b      	uxth	r3, r3
 80181d2:	3b01      	subs	r3, #1
 80181d4:	b29b      	uxth	r3, r3
 80181d6:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 80181d8:	2700      	movs	r7, #0
 80181da:	e7c4      	b.n	8018166 <HAL_SPI_TransmitReceive+0xe8>
        hspi->State = HAL_SPI_STATE_READY;
 80181dc:	2301      	movs	r3, #1
 80181de:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80181e2:	2300      	movs	r3, #0
 80181e4:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 80181e8:	2003      	movs	r0, #3
 80181ea:	e063      	b.n	80182b4 <HAL_SPI_TransmitReceive+0x236>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80181ec:	6823      	ldr	r3, [r4, #0]
 80181ee:	689a      	ldr	r2, [r3, #8]
 80181f0:	f012 0f01 	tst.w	r2, #1
 80181f4:	d00e      	beq.n	8018214 <HAL_SPI_TransmitReceive+0x196>
 80181f6:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 80181f8:	b292      	uxth	r2, r2
 80181fa:	b15a      	cbz	r2, 8018214 <HAL_SPI_TransmitReceive+0x196>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80181fc:	68da      	ldr	r2, [r3, #12]
 80181fe:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8018200:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8018202:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8018204:	3301      	adds	r3, #1
 8018206:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8018208:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 801820a:	b29b      	uxth	r3, r3
 801820c:	3b01      	subs	r3, #1
 801820e:	b29b      	uxth	r3, r3
 8018210:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8018212:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8018214:	f7fe f9b2 	bl	801657c <HAL_GetTick>
 8018218:	1b83      	subs	r3, r0, r6
 801821a:	42ab      	cmp	r3, r5
 801821c:	d302      	bcc.n	8018224 <HAL_SPI_TransmitReceive+0x1a6>
 801821e:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8018222:	d11e      	bne.n	8018262 <HAL_SPI_TransmitReceive+0x1e4>
 8018224:	b1ed      	cbz	r5, 8018262 <HAL_SPI_TransmitReceive+0x1e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8018226:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8018228:	b29b      	uxth	r3, r3
 801822a:	b913      	cbnz	r3, 8018232 <HAL_SPI_TransmitReceive+0x1b4>
 801822c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 801822e:	b29b      	uxth	r3, r3
 8018230:	b1fb      	cbz	r3, 8018272 <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8018232:	6823      	ldr	r3, [r4, #0]
 8018234:	689a      	ldr	r2, [r3, #8]
 8018236:	f012 0f02 	tst.w	r2, #2
 801823a:	d0d7      	beq.n	80181ec <HAL_SPI_TransmitReceive+0x16e>
 801823c:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801823e:	b292      	uxth	r2, r2
 8018240:	2a00      	cmp	r2, #0
 8018242:	d0d3      	beq.n	80181ec <HAL_SPI_TransmitReceive+0x16e>
 8018244:	2f00      	cmp	r7, #0
 8018246:	d0d1      	beq.n	80181ec <HAL_SPI_TransmitReceive+0x16e>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8018248:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801824a:	7812      	ldrb	r2, [r2, #0]
 801824c:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 801824e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018250:	3301      	adds	r3, #1
 8018252:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8018254:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8018256:	b29b      	uxth	r3, r3
 8018258:	3b01      	subs	r3, #1
 801825a:	b29b      	uxth	r3, r3
 801825c:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 801825e:	2700      	movs	r7, #0
 8018260:	e7c4      	b.n	80181ec <HAL_SPI_TransmitReceive+0x16e>
        hspi->State = HAL_SPI_STATE_READY;
 8018262:	2301      	movs	r3, #1
 8018264:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8018268:	2300      	movs	r3, #0
 801826a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 801826e:	2003      	movs	r0, #3
 8018270:	e020      	b.n	80182b4 <HAL_SPI_TransmitReceive+0x236>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8018272:	4632      	mov	r2, r6
 8018274:	4629      	mov	r1, r5
 8018276:	4620      	mov	r0, r4
 8018278:	f7ff fd3a 	bl	8017cf0 <SPI_EndRxTxTransaction>
 801827c:	b990      	cbnz	r0, 80182a4 <HAL_SPI_TransmitReceive+0x226>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801827e:	68a3      	ldr	r3, [r4, #8]
 8018280:	b933      	cbnz	r3, 8018290 <HAL_SPI_TransmitReceive+0x212>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8018282:	9301      	str	r3, [sp, #4]
 8018284:	6823      	ldr	r3, [r4, #0]
 8018286:	68da      	ldr	r2, [r3, #12]
 8018288:	9201      	str	r2, [sp, #4]
 801828a:	689b      	ldr	r3, [r3, #8]
 801828c:	9301      	str	r3, [sp, #4]
 801828e:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8018290:	2301      	movs	r3, #1
 8018292:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8018296:	2300      	movs	r3, #0
 8018298:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801829c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801829e:	b14b      	cbz	r3, 80182b4 <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 80182a0:	2001      	movs	r0, #1
 80182a2:	e007      	b.n	80182b4 <HAL_SPI_TransmitReceive+0x236>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80182a4:	2320      	movs	r3, #32
 80182a6:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80182a8:	2300      	movs	r3, #0
 80182aa:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 80182ae:	2001      	movs	r0, #1
 80182b0:	e000      	b.n	80182b4 <HAL_SPI_TransmitReceive+0x236>
    return HAL_BUSY;
 80182b2:	2002      	movs	r0, #2
}
 80182b4:	b003      	add	sp, #12
 80182b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 80182ba:	2002      	movs	r0, #2
 80182bc:	e7fa      	b.n	80182b4 <HAL_SPI_TransmitReceive+0x236>
 80182be:	2002      	movs	r0, #2
 80182c0:	e7f8      	b.n	80182b4 <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 80182c2:	2001      	movs	r0, #1
 80182c4:	e7f6      	b.n	80182b4 <HAL_SPI_TransmitReceive+0x236>
 80182c6:	2001      	movs	r0, #1
 80182c8:	e7f4      	b.n	80182b4 <HAL_SPI_TransmitReceive+0x236>
 80182ca:	2001      	movs	r0, #1
 80182cc:	e7f2      	b.n	80182b4 <HAL_SPI_TransmitReceive+0x236>
  __HAL_LOCK(hspi);
 80182ce:	2002      	movs	r0, #2
 80182d0:	e7f0      	b.n	80182b4 <HAL_SPI_TransmitReceive+0x236>

080182d2 <HAL_SPI_Receive>:
{
 80182d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80182d6:	b083      	sub	sp, #12
  if (hspi->State != HAL_SPI_STATE_READY)
 80182d8:	f890 6051 	ldrb.w	r6, [r0, #81]	@ 0x51
 80182dc:	b2f6      	uxtb	r6, r6
 80182de:	2e01      	cmp	r6, #1
 80182e0:	f040 80b4 	bne.w	801844c <HAL_SPI_Receive+0x17a>
 80182e4:	4604      	mov	r4, r0
 80182e6:	4689      	mov	r9, r1
 80182e8:	4690      	mov	r8, r2
 80182ea:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80182ec:	6843      	ldr	r3, [r0, #4]
 80182ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80182f2:	d101      	bne.n	80182f8 <HAL_SPI_Receive+0x26>
 80182f4:	6883      	ldr	r3, [r0, #8]
 80182f6:	b393      	cbz	r3, 801835e <HAL_SPI_Receive+0x8c>
  tickstart = HAL_GetTick();
 80182f8:	f7fe f940 	bl	801657c <HAL_GetTick>
 80182fc:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 80182fe:	f1b9 0f00 	cmp.w	r9, #0
 8018302:	f000 80a4 	beq.w	801844e <HAL_SPI_Receive+0x17c>
 8018306:	f1b8 0f00 	cmp.w	r8, #0
 801830a:	f000 80a0 	beq.w	801844e <HAL_SPI_Receive+0x17c>
  __HAL_LOCK(hspi);
 801830e:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8018312:	2b01      	cmp	r3, #1
 8018314:	f000 809f 	beq.w	8018456 <HAL_SPI_Receive+0x184>
 8018318:	2301      	movs	r3, #1
 801831a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801831e:	2304      	movs	r3, #4
 8018320:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8018324:	2300      	movs	r3, #0
 8018326:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8018328:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 801832c:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8018330:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8018334:	6323      	str	r3, [r4, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8018336:	86a3      	strh	r3, [r4, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8018338:	86e3      	strh	r3, [r4, #54]	@ 0x36
  hspi->RxISR       = NULL;
 801833a:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 801833c:	6463      	str	r3, [r4, #68]	@ 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801833e:	68a3      	ldr	r3, [r4, #8]
 8018340:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8018344:	d015      	beq.n	8018372 <HAL_SPI_Receive+0xa0>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8018346:	6823      	ldr	r3, [r4, #0]
 8018348:	681a      	ldr	r2, [r3, #0]
 801834a:	f012 0f40 	tst.w	r2, #64	@ 0x40
 801834e:	d103      	bne.n	8018358 <HAL_SPI_Receive+0x86>
    __HAL_SPI_ENABLE(hspi);
 8018350:	681a      	ldr	r2, [r3, #0]
 8018352:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8018356:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8018358:	68e3      	ldr	r3, [r4, #12]
 801835a:	b1f3      	cbz	r3, 801839a <HAL_SPI_Receive+0xc8>
 801835c:	e043      	b.n	80183e6 <HAL_SPI_Receive+0x114>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801835e:	2304      	movs	r3, #4
 8018360:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8018364:	9500      	str	r5, [sp, #0]
 8018366:	4613      	mov	r3, r2
 8018368:	460a      	mov	r2, r1
 801836a:	f7ff fe88 	bl	801807e <HAL_SPI_TransmitReceive>
 801836e:	4606      	mov	r6, r0
 8018370:	e06d      	b.n	801844e <HAL_SPI_Receive+0x17c>
    __HAL_SPI_DISABLE(hspi);
 8018372:	6822      	ldr	r2, [r4, #0]
 8018374:	6813      	ldr	r3, [r2, #0]
 8018376:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801837a:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 801837c:	6822      	ldr	r2, [r4, #0]
 801837e:	6813      	ldr	r3, [r2, #0]
 8018380:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8018384:	6013      	str	r3, [r2, #0]
 8018386:	e7de      	b.n	8018346 <HAL_SPI_Receive+0x74>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8018388:	f7fe f8f8 	bl	801657c <HAL_GetTick>
 801838c:	1bc0      	subs	r0, r0, r7
 801838e:	42a8      	cmp	r0, r5
 8018390:	d302      	bcc.n	8018398 <HAL_SPI_Receive+0xc6>
 8018392:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8018396:	d115      	bne.n	80183c4 <HAL_SPI_Receive+0xf2>
 8018398:	b1a5      	cbz	r5, 80183c4 <HAL_SPI_Receive+0xf2>
    while (hspi->RxXferCount > 0U)
 801839a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 801839c:	b29b      	uxth	r3, r3
 801839e:	2b00      	cmp	r3, #0
 80183a0:	d042      	beq.n	8018428 <HAL_SPI_Receive+0x156>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80183a2:	6823      	ldr	r3, [r4, #0]
 80183a4:	689a      	ldr	r2, [r3, #8]
 80183a6:	f012 0f01 	tst.w	r2, #1
 80183aa:	d0ed      	beq.n	8018388 <HAL_SPI_Receive+0xb6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80183ac:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80183ae:	7b1b      	ldrb	r3, [r3, #12]
 80183b0:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80183b2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80183b4:	3301      	adds	r3, #1
 80183b6:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80183b8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80183ba:	b29b      	uxth	r3, r3
 80183bc:	3b01      	subs	r3, #1
 80183be:	b29b      	uxth	r3, r3
 80183c0:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80183c2:	e7ea      	b.n	801839a <HAL_SPI_Receive+0xc8>
          hspi->State = HAL_SPI_STATE_READY;
 80183c4:	2301      	movs	r3, #1
 80183c6:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80183ca:	2300      	movs	r3, #0
 80183cc:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 80183d0:	2603      	movs	r6, #3
 80183d2:	e03c      	b.n	801844e <HAL_SPI_Receive+0x17c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80183d4:	f7fe f8d2 	bl	801657c <HAL_GetTick>
 80183d8:	1bc0      	subs	r0, r0, r7
 80183da:	42a8      	cmp	r0, r5
 80183dc:	d302      	bcc.n	80183e4 <HAL_SPI_Receive+0x112>
 80183de:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80183e2:	d119      	bne.n	8018418 <HAL_SPI_Receive+0x146>
 80183e4:	b1c5      	cbz	r5, 8018418 <HAL_SPI_Receive+0x146>
    while (hspi->RxXferCount > 0U)
 80183e6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80183e8:	b29b      	uxth	r3, r3
 80183ea:	b1eb      	cbz	r3, 8018428 <HAL_SPI_Receive+0x156>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80183ec:	6823      	ldr	r3, [r4, #0]
 80183ee:	689a      	ldr	r2, [r3, #8]
 80183f0:	f012 0f01 	tst.w	r2, #1
 80183f4:	d0ee      	beq.n	80183d4 <HAL_SPI_Receive+0x102>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80183f6:	68da      	ldr	r2, [r3, #12]
 80183f8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80183fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80183fc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80183fe:	3302      	adds	r3, #2
 8018400:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8018402:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
 8018406:	fa1f fc8c 	uxth.w	ip, ip
 801840a:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 801840e:	fa1f fc8c 	uxth.w	ip, ip
 8018412:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
 8018416:	e7e6      	b.n	80183e6 <HAL_SPI_Receive+0x114>
          hspi->State = HAL_SPI_STATE_READY;
 8018418:	2301      	movs	r3, #1
 801841a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 801841e:	2300      	movs	r3, #0
 8018420:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 8018424:	2603      	movs	r6, #3
 8018426:	e012      	b.n	801844e <HAL_SPI_Receive+0x17c>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8018428:	463a      	mov	r2, r7
 801842a:	4629      	mov	r1, r5
 801842c:	4620      	mov	r0, r4
 801842e:	f7ff fc9f 	bl	8017d70 <SPI_EndRxTransaction>
 8018432:	b108      	cbz	r0, 8018438 <HAL_SPI_Receive+0x166>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8018434:	2320      	movs	r3, #32
 8018436:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8018438:	2301      	movs	r3, #1
 801843a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 801843e:	2300      	movs	r3, #0
 8018440:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8018444:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8018446:	b913      	cbnz	r3, 801844e <HAL_SPI_Receive+0x17c>
    return HAL_OK;
 8018448:	2600      	movs	r6, #0
 801844a:	e000      	b.n	801844e <HAL_SPI_Receive+0x17c>
    return HAL_BUSY;
 801844c:	2602      	movs	r6, #2
}
 801844e:	4630      	mov	r0, r6
 8018450:	b003      	add	sp, #12
 8018452:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8018456:	2602      	movs	r6, #2
 8018458:	e7f9      	b.n	801844e <HAL_SPI_Receive+0x17c>

0801845a <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 801845a:	4770      	bx	lr

0801845c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801845c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8018460:	b2db      	uxtb	r3, r3
 8018462:	2b01      	cmp	r3, #1
 8018464:	d12f      	bne.n	80184c6 <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8018466:	2302      	movs	r3, #2
 8018468:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801846c:	6802      	ldr	r2, [r0, #0]
 801846e:	68d3      	ldr	r3, [r2, #12]
 8018470:	f043 0301 	orr.w	r3, r3, #1
 8018474:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8018476:	6803      	ldr	r3, [r0, #0]
 8018478:	4a15      	ldr	r2, [pc, #84]	@ (80184d0 <HAL_TIM_Base_Start_IT+0x74>)
 801847a:	4293      	cmp	r3, r2
 801847c:	d018      	beq.n	80184b0 <HAL_TIM_Base_Start_IT+0x54>
 801847e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8018482:	d015      	beq.n	80184b0 <HAL_TIM_Base_Start_IT+0x54>
 8018484:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8018488:	4293      	cmp	r3, r2
 801848a:	d011      	beq.n	80184b0 <HAL_TIM_Base_Start_IT+0x54>
 801848c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8018490:	4293      	cmp	r3, r2
 8018492:	d00d      	beq.n	80184b0 <HAL_TIM_Base_Start_IT+0x54>
 8018494:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8018498:	4293      	cmp	r3, r2
 801849a:	d009      	beq.n	80184b0 <HAL_TIM_Base_Start_IT+0x54>
 801849c:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 80184a0:	4293      	cmp	r3, r2
 80184a2:	d005      	beq.n	80184b0 <HAL_TIM_Base_Start_IT+0x54>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80184a4:	681a      	ldr	r2, [r3, #0]
 80184a6:	f042 0201 	orr.w	r2, r2, #1
 80184aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80184ac:	2000      	movs	r0, #0
 80184ae:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80184b0:	689a      	ldr	r2, [r3, #8]
 80184b2:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80184b6:	2a06      	cmp	r2, #6
 80184b8:	d007      	beq.n	80184ca <HAL_TIM_Base_Start_IT+0x6e>
      __HAL_TIM_ENABLE(htim);
 80184ba:	681a      	ldr	r2, [r3, #0]
 80184bc:	f042 0201 	orr.w	r2, r2, #1
 80184c0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80184c2:	2000      	movs	r0, #0
 80184c4:	4770      	bx	lr
    return HAL_ERROR;
 80184c6:	2001      	movs	r0, #1
 80184c8:	4770      	bx	lr
  return HAL_OK;
 80184ca:	2000      	movs	r0, #0
}
 80184cc:	4770      	bx	lr
 80184ce:	bf00      	nop
 80184d0:	40010000 	.word	0x40010000

080184d4 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80184d4:	4770      	bx	lr

080184d6 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80184d6:	4770      	bx	lr

080184d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80184d8:	4770      	bx	lr

080184da <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80184da:	4770      	bx	lr

080184dc <HAL_TIM_IRQHandler>:
{
 80184dc:	b570      	push	{r4, r5, r6, lr}
 80184de:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 80184e0:	6803      	ldr	r3, [r0, #0]
 80184e2:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80184e4:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80184e6:	f015 0f02 	tst.w	r5, #2
 80184ea:	d010      	beq.n	801850e <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80184ec:	f016 0f02 	tst.w	r6, #2
 80184f0:	d00d      	beq.n	801850e <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80184f2:	f06f 0202 	mvn.w	r2, #2
 80184f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80184f8:	2301      	movs	r3, #1
 80184fa:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80184fc:	6803      	ldr	r3, [r0, #0]
 80184fe:	699b      	ldr	r3, [r3, #24]
 8018500:	f013 0f03 	tst.w	r3, #3
 8018504:	d05e      	beq.n	80185c4 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8018506:	f7ff ffe6 	bl	80184d6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801850a:	2300      	movs	r3, #0
 801850c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 801850e:	f015 0f04 	tst.w	r5, #4
 8018512:	d012      	beq.n	801853a <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8018514:	f016 0f04 	tst.w	r6, #4
 8018518:	d00f      	beq.n	801853a <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 801851a:	6823      	ldr	r3, [r4, #0]
 801851c:	f06f 0204 	mvn.w	r2, #4
 8018520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8018522:	2302      	movs	r3, #2
 8018524:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8018526:	6823      	ldr	r3, [r4, #0]
 8018528:	699b      	ldr	r3, [r3, #24]
 801852a:	f413 7f40 	tst.w	r3, #768	@ 0x300
 801852e:	d04f      	beq.n	80185d0 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8018530:	4620      	mov	r0, r4
 8018532:	f7ff ffd0 	bl	80184d6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018536:	2300      	movs	r3, #0
 8018538:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 801853a:	f015 0f08 	tst.w	r5, #8
 801853e:	d012      	beq.n	8018566 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8018540:	f016 0f08 	tst.w	r6, #8
 8018544:	d00f      	beq.n	8018566 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8018546:	6823      	ldr	r3, [r4, #0]
 8018548:	f06f 0208 	mvn.w	r2, #8
 801854c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801854e:	2304      	movs	r3, #4
 8018550:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8018552:	6823      	ldr	r3, [r4, #0]
 8018554:	69db      	ldr	r3, [r3, #28]
 8018556:	f013 0f03 	tst.w	r3, #3
 801855a:	d040      	beq.n	80185de <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 801855c:	4620      	mov	r0, r4
 801855e:	f7ff ffba 	bl	80184d6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018562:	2300      	movs	r3, #0
 8018564:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8018566:	f015 0f10 	tst.w	r5, #16
 801856a:	d012      	beq.n	8018592 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801856c:	f016 0f10 	tst.w	r6, #16
 8018570:	d00f      	beq.n	8018592 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8018572:	6823      	ldr	r3, [r4, #0]
 8018574:	f06f 0210 	mvn.w	r2, #16
 8018578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801857a:	2308      	movs	r3, #8
 801857c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801857e:	6823      	ldr	r3, [r4, #0]
 8018580:	69db      	ldr	r3, [r3, #28]
 8018582:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8018586:	d031      	beq.n	80185ec <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8018588:	4620      	mov	r0, r4
 801858a:	f7ff ffa4 	bl	80184d6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801858e:	2300      	movs	r3, #0
 8018590:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8018592:	f015 0f01 	tst.w	r5, #1
 8018596:	d002      	beq.n	801859e <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8018598:	f016 0f01 	tst.w	r6, #1
 801859c:	d12d      	bne.n	80185fa <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 801859e:	f015 0f80 	tst.w	r5, #128	@ 0x80
 80185a2:	d002      	beq.n	80185aa <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80185a4:	f016 0f80 	tst.w	r6, #128	@ 0x80
 80185a8:	d12f      	bne.n	801860a <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80185aa:	f015 0f40 	tst.w	r5, #64	@ 0x40
 80185ae:	d002      	beq.n	80185b6 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80185b0:	f016 0f40 	tst.w	r6, #64	@ 0x40
 80185b4:	d131      	bne.n	801861a <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80185b6:	f015 0f20 	tst.w	r5, #32
 80185ba:	d002      	beq.n	80185c2 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80185bc:	f016 0f20 	tst.w	r6, #32
 80185c0:	d133      	bne.n	801862a <HAL_TIM_IRQHandler+0x14e>
}
 80185c2:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80185c4:	f7ff ff86 	bl	80184d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80185c8:	4620      	mov	r0, r4
 80185ca:	f7ff ff85 	bl	80184d8 <HAL_TIM_PWM_PulseFinishedCallback>
 80185ce:	e79c      	b.n	801850a <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80185d0:	4620      	mov	r0, r4
 80185d2:	f7ff ff7f 	bl	80184d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80185d6:	4620      	mov	r0, r4
 80185d8:	f7ff ff7e 	bl	80184d8 <HAL_TIM_PWM_PulseFinishedCallback>
 80185dc:	e7ab      	b.n	8018536 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80185de:	4620      	mov	r0, r4
 80185e0:	f7ff ff78 	bl	80184d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80185e4:	4620      	mov	r0, r4
 80185e6:	f7ff ff77 	bl	80184d8 <HAL_TIM_PWM_PulseFinishedCallback>
 80185ea:	e7ba      	b.n	8018562 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80185ec:	4620      	mov	r0, r4
 80185ee:	f7ff ff71 	bl	80184d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80185f2:	4620      	mov	r0, r4
 80185f4:	f7ff ff70 	bl	80184d8 <HAL_TIM_PWM_PulseFinishedCallback>
 80185f8:	e7c9      	b.n	801858e <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80185fa:	6823      	ldr	r3, [r4, #0]
 80185fc:	f06f 0201 	mvn.w	r2, #1
 8018600:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8018602:	4620      	mov	r0, r4
 8018604:	f7f9 fe6e 	bl	80122e4 <HAL_TIM_PeriodElapsedCallback>
 8018608:	e7c9      	b.n	801859e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 801860a:	6823      	ldr	r3, [r4, #0]
 801860c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8018610:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8018612:	4620      	mov	r0, r4
 8018614:	f000 f895 	bl	8018742 <HAL_TIMEx_BreakCallback>
 8018618:	e7c7      	b.n	80185aa <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 801861a:	6823      	ldr	r3, [r4, #0]
 801861c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8018620:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8018622:	4620      	mov	r0, r4
 8018624:	f7ff ff59 	bl	80184da <HAL_TIM_TriggerCallback>
 8018628:	e7c5      	b.n	80185b6 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 801862a:	6823      	ldr	r3, [r4, #0]
 801862c:	f06f 0220 	mvn.w	r2, #32
 8018630:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8018632:	4620      	mov	r0, r4
 8018634:	f000 f884 	bl	8018740 <HAL_TIMEx_CommutCallback>
}
 8018638:	e7c3      	b.n	80185c2 <HAL_TIM_IRQHandler+0xe6>
	...

0801863c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801863c:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801863e:	4a29      	ldr	r2, [pc, #164]	@ (80186e4 <TIM_Base_SetConfig+0xa8>)
 8018640:	4290      	cmp	r0, r2
 8018642:	d00e      	beq.n	8018662 <TIM_Base_SetConfig+0x26>
 8018644:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8018648:	d00b      	beq.n	8018662 <TIM_Base_SetConfig+0x26>
 801864a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 801864e:	4290      	cmp	r0, r2
 8018650:	d007      	beq.n	8018662 <TIM_Base_SetConfig+0x26>
 8018652:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8018656:	4290      	cmp	r0, r2
 8018658:	d003      	beq.n	8018662 <TIM_Base_SetConfig+0x26>
 801865a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801865e:	4290      	cmp	r0, r2
 8018660:	d103      	bne.n	801866a <TIM_Base_SetConfig+0x2e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8018662:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8018666:	684a      	ldr	r2, [r1, #4]
 8018668:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801866a:	4a1e      	ldr	r2, [pc, #120]	@ (80186e4 <TIM_Base_SetConfig+0xa8>)
 801866c:	4290      	cmp	r0, r2
 801866e:	d01a      	beq.n	80186a6 <TIM_Base_SetConfig+0x6a>
 8018670:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8018674:	d017      	beq.n	80186a6 <TIM_Base_SetConfig+0x6a>
 8018676:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 801867a:	4290      	cmp	r0, r2
 801867c:	d013      	beq.n	80186a6 <TIM_Base_SetConfig+0x6a>
 801867e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8018682:	4290      	cmp	r0, r2
 8018684:	d00f      	beq.n	80186a6 <TIM_Base_SetConfig+0x6a>
 8018686:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801868a:	4290      	cmp	r0, r2
 801868c:	d00b      	beq.n	80186a6 <TIM_Base_SetConfig+0x6a>
 801868e:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8018692:	4290      	cmp	r0, r2
 8018694:	d007      	beq.n	80186a6 <TIM_Base_SetConfig+0x6a>
 8018696:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801869a:	4290      	cmp	r0, r2
 801869c:	d003      	beq.n	80186a6 <TIM_Base_SetConfig+0x6a>
 801869e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80186a2:	4290      	cmp	r0, r2
 80186a4:	d103      	bne.n	80186ae <TIM_Base_SetConfig+0x72>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80186a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80186aa:	68ca      	ldr	r2, [r1, #12]
 80186ac:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80186ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80186b2:	694a      	ldr	r2, [r1, #20]
 80186b4:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80186b6:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80186b8:	688b      	ldr	r3, [r1, #8]
 80186ba:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80186bc:	680b      	ldr	r3, [r1, #0]
 80186be:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80186c0:	4b08      	ldr	r3, [pc, #32]	@ (80186e4 <TIM_Base_SetConfig+0xa8>)
 80186c2:	4298      	cmp	r0, r3
 80186c4:	d00a      	beq.n	80186dc <TIM_Base_SetConfig+0xa0>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80186c6:	2301      	movs	r3, #1
 80186c8:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80186ca:	6903      	ldr	r3, [r0, #16]
 80186cc:	f013 0f01 	tst.w	r3, #1
 80186d0:	d003      	beq.n	80186da <TIM_Base_SetConfig+0x9e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80186d2:	6903      	ldr	r3, [r0, #16]
 80186d4:	f023 0301 	bic.w	r3, r3, #1
 80186d8:	6103      	str	r3, [r0, #16]
  }
}
 80186da:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80186dc:	690b      	ldr	r3, [r1, #16]
 80186de:	6303      	str	r3, [r0, #48]	@ 0x30
 80186e0:	e7f1      	b.n	80186c6 <TIM_Base_SetConfig+0x8a>
 80186e2:	bf00      	nop
 80186e4:	40010000 	.word	0x40010000

080186e8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80186e8:	b340      	cbz	r0, 801873c <HAL_TIM_Base_Init+0x54>
{
 80186ea:	b510      	push	{r4, lr}
 80186ec:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80186ee:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80186f2:	b1f3      	cbz	r3, 8018732 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80186f4:	2302      	movs	r3, #2
 80186f6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80186fa:	4621      	mov	r1, r4
 80186fc:	f851 0b04 	ldr.w	r0, [r1], #4
 8018700:	f7ff ff9c 	bl	801863c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8018704:	2301      	movs	r3, #1
 8018706:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801870a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 801870e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8018712:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8018716:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801871a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801871e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018722:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8018726:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 801872a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 801872e:	2000      	movs	r0, #0
}
 8018730:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8018732:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8018736:	f7ff fe90 	bl	801845a <HAL_TIM_Base_MspInit>
 801873a:	e7db      	b.n	80186f4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 801873c:	2001      	movs	r0, #1
}
 801873e:	4770      	bx	lr

08018740 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8018740:	4770      	bx	lr

08018742 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8018742:	4770      	bx	lr

08018744 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8018744:	b508      	push	{r3, lr}
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8018746:	b930      	cbnz	r0, 8018756 <SSD1306_Fill+0x12>
 8018748:	2100      	movs	r1, #0
 801874a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801874e:	4803      	ldr	r0, [pc, #12]	@ (801875c <SSD1306_Fill+0x18>)
 8018750:	f014 fc86 	bl	802d060 <memset>
}
 8018754:	bd08      	pop	{r3, pc}
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8018756:	21ff      	movs	r1, #255	@ 0xff
 8018758:	e7f7      	b.n	801874a <SSD1306_Fill+0x6>
 801875a:	bf00      	nop
 801875c:	200029b8 	.word	0x200029b8

08018760 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
	if (
 8018760:	287f      	cmp	r0, #127	@ 0x7f
 8018762:	d825      	bhi.n	80187b0 <SSD1306_DrawPixel+0x50>
		x >= SSD1306_WIDTH ||
 8018764:	293f      	cmp	r1, #63	@ 0x3f
 8018766:	d823      	bhi.n	80187b0 <SSD1306_DrawPixel+0x50>
void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8018768:	b410      	push	{r4}
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 801876a:	4b12      	ldr	r3, [pc, #72]	@ (80187b4 <SSD1306_DrawPixel+0x54>)
 801876c:	791b      	ldrb	r3, [r3, #4]
 801876e:	b113      	cbz	r3, 8018776 <SSD1306_DrawPixel+0x16>
		color = (SSD1306_COLOR_t)!color;
 8018770:	fab2 f282 	clz	r2, r2
 8018774:	0952      	lsrs	r2, r2, #5
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8018776:	2a01      	cmp	r2, #1
 8018778:	d00f      	beq.n	801879a <SSD1306_DrawPixel+0x3a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 801877a:	08cb      	lsrs	r3, r1, #3
 801877c:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8018780:	4c0d      	ldr	r4, [pc, #52]	@ (80187b8 <SSD1306_DrawPixel+0x58>)
 8018782:	5c22      	ldrb	r2, [r4, r0]
 8018784:	f001 0107 	and.w	r1, r1, #7
 8018788:	2301      	movs	r3, #1
 801878a:	408b      	lsls	r3, r1
 801878c:	43db      	mvns	r3, r3
 801878e:	b25b      	sxtb	r3, r3
 8018790:	4013      	ands	r3, r2
 8018792:	5423      	strb	r3, [r4, r0]
	}
}
 8018794:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018798:	4770      	bx	lr
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 801879a:	08cb      	lsrs	r3, r1, #3
 801879c:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 80187a0:	4c05      	ldr	r4, [pc, #20]	@ (80187b8 <SSD1306_DrawPixel+0x58>)
 80187a2:	5c23      	ldrb	r3, [r4, r0]
 80187a4:	f001 0107 	and.w	r1, r1, #7
 80187a8:	408a      	lsls	r2, r1
 80187aa:	4313      	orrs	r3, r2
 80187ac:	5423      	strb	r3, [r4, r0]
 80187ae:	e7f1      	b.n	8018794 <SSD1306_DrawPixel+0x34>
 80187b0:	4770      	bx	lr
 80187b2:	bf00      	nop
 80187b4:	200029b0 	.word	0x200029b0
 80187b8:	200029b8 	.word	0x200029b8

080187bc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80187bc:	4b01      	ldr	r3, [pc, #4]	@ (80187c4 <SSD1306_GotoXY+0x8>)
 80187be:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 80187c0:	8059      	strh	r1, [r3, #2]
}
 80187c2:	4770      	bx	lr
 80187c4:	200029b0 	.word	0x200029b0

080187c8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80187c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80187cc:	4690      	mov	r8, r2
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80187ce:	4b24      	ldr	r3, [pc, #144]	@ (8018860 <SSD1306_Putc+0x98>)
 80187d0:	881b      	ldrh	r3, [r3, #0]
 80187d2:	780a      	ldrb	r2, [r1, #0]
 80187d4:	4413      	add	r3, r2
	if (
 80187d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80187d8:	dc3e      	bgt.n	8018858 <SSD1306_Putc+0x90>
 80187da:	4681      	mov	r9, r0
 80187dc:	460d      	mov	r5, r1
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80187de:	4b20      	ldr	r3, [pc, #128]	@ (8018860 <SSD1306_Putc+0x98>)
 80187e0:	885b      	ldrh	r3, [r3, #2]
 80187e2:	784a      	ldrb	r2, [r1, #1]
 80187e4:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80187e6:	2b3f      	cmp	r3, #63	@ 0x3f
 80187e8:	dc38      	bgt.n	801885c <SSD1306_Putc+0x94>
		/* Error */
		return 0;
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80187ea:	2600      	movs	r6, #0
 80187ec:	e020      	b.n	8018830 <SSD1306_Putc+0x68>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
		for (j = 0; j < Font->FontWidth; j++) {
			if ((b << j) & 0x8000) {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80187ee:	4b1c      	ldr	r3, [pc, #112]	@ (8018860 <SSD1306_Putc+0x98>)
 80187f0:	8818      	ldrh	r0, [r3, #0]
 80187f2:	8859      	ldrh	r1, [r3, #2]
 80187f4:	4431      	add	r1, r6
 80187f6:	4420      	add	r0, r4
 80187f8:	fab8 f288 	clz	r2, r8
 80187fc:	0952      	lsrs	r2, r2, #5
 80187fe:	b289      	uxth	r1, r1
 8018800:	b280      	uxth	r0, r0
 8018802:	f7ff ffad 	bl	8018760 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8018806:	3401      	adds	r4, #1
 8018808:	782b      	ldrb	r3, [r5, #0]
 801880a:	42a3      	cmp	r3, r4
 801880c:	d90f      	bls.n	801882e <SSD1306_Putc+0x66>
			if ((b << j) & 0x8000) {
 801880e:	fa07 f304 	lsl.w	r3, r7, r4
 8018812:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8018816:	d0ea      	beq.n	80187ee <SSD1306_Putc+0x26>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8018818:	4b11      	ldr	r3, [pc, #68]	@ (8018860 <SSD1306_Putc+0x98>)
 801881a:	8818      	ldrh	r0, [r3, #0]
 801881c:	8859      	ldrh	r1, [r3, #2]
 801881e:	4431      	add	r1, r6
 8018820:	4420      	add	r0, r4
 8018822:	4642      	mov	r2, r8
 8018824:	b289      	uxth	r1, r1
 8018826:	b280      	uxth	r0, r0
 8018828:	f7ff ff9a 	bl	8018760 <SSD1306_DrawPixel>
 801882c:	e7eb      	b.n	8018806 <SSD1306_Putc+0x3e>
	for (i = 0; i < Font->FontHeight; i++) {
 801882e:	3601      	adds	r6, #1
 8018830:	786a      	ldrb	r2, [r5, #1]
 8018832:	42b2      	cmp	r2, r6
 8018834:	d908      	bls.n	8018848 <SSD1306_Putc+0x80>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8018836:	6869      	ldr	r1, [r5, #4]
 8018838:	f1a9 0320 	sub.w	r3, r9, #32
 801883c:	fb02 6303 	mla	r3, r2, r3, r6
 8018840:	f831 7013 	ldrh.w	r7, [r1, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 8018844:	2400      	movs	r4, #0
 8018846:	e7df      	b.n	8018808 <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8018848:	4a05      	ldr	r2, [pc, #20]	@ (8018860 <SSD1306_Putc+0x98>)
 801884a:	8813      	ldrh	r3, [r2, #0]
 801884c:	7829      	ldrb	r1, [r5, #0]
 801884e:	440b      	add	r3, r1
 8018850:	8013      	strh	r3, [r2, #0]
	
	/* Return character written */
	return ch;
 8018852:	4648      	mov	r0, r9
}
 8018854:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 0;
 8018858:	2000      	movs	r0, #0
 801885a:	e7fb      	b.n	8018854 <SSD1306_Putc+0x8c>
 801885c:	2000      	movs	r0, #0
 801885e:	e7f9      	b.n	8018854 <SSD1306_Putc+0x8c>
 8018860:	200029b0 	.word	0x200029b0

08018864 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8018864:	b570      	push	{r4, r5, r6, lr}
 8018866:	4604      	mov	r4, r0
 8018868:	460e      	mov	r6, r1
 801886a:	4615      	mov	r5, r2
	/* Write characters */
	while (*str) {
 801886c:	e000      	b.n	8018870 <SSD1306_Puts+0xc>
			/* Return error */
			return *str;
		}
		
		/* Increase string pointer */
		str++;
 801886e:	3401      	adds	r4, #1
	while (*str) {
 8018870:	7820      	ldrb	r0, [r4, #0]
 8018872:	b138      	cbz	r0, 8018884 <SSD1306_Puts+0x20>
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8018874:	462a      	mov	r2, r5
 8018876:	4631      	mov	r1, r6
 8018878:	f7ff ffa6 	bl	80187c8 <SSD1306_Putc>
 801887c:	4603      	mov	r3, r0
 801887e:	7820      	ldrb	r0, [r4, #0]
 8018880:	4283      	cmp	r3, r0
 8018882:	d0f4      	beq.n	801886e <SSD1306_Puts+0xa>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
}
 8018884:	bd70      	pop	{r4, r5, r6, pc}
	...

08018888 <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8018888:	b500      	push	{lr}
 801888a:	b0c3      	sub	sp, #268	@ 0x10c
uint8_t dt[256];
dt[0] = reg;
 801888c:	f88d 1008 	strb.w	r1, [sp, #8]
uint8_t i;
for(i = 0; i < count; i++)
 8018890:	f04f 0c00 	mov.w	ip, #0
 8018894:	e009      	b.n	80188aa <ssd1306_I2C_WriteMulti+0x22>
dt[i+1] = data[i];
 8018896:	f10c 0e01 	add.w	lr, ip, #1
 801889a:	f812 100c 	ldrb.w	r1, [r2, ip]
 801889e:	f10d 0c08 	add.w	ip, sp, #8
 80188a2:	f80c 100e 	strb.w	r1, [ip, lr]
for(i = 0; i < count; i++)
 80188a6:	fa5f fc8e 	uxtb.w	ip, lr
 80188aa:	459c      	cmp	ip, r3
 80188ac:	d3f3      	bcc.n	8018896 <ssd1306_I2C_WriteMulti+0xe>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 80188ae:	3301      	adds	r3, #1
 80188b0:	220a      	movs	r2, #10
 80188b2:	9200      	str	r2, [sp, #0]
 80188b4:	b29b      	uxth	r3, r3
 80188b6:	aa02      	add	r2, sp, #8
 80188b8:	4601      	mov	r1, r0
 80188ba:	4803      	ldr	r0, [pc, #12]	@ (80188c8 <ssd1306_I2C_WriteMulti+0x40>)
 80188bc:	f7fe fc9e 	bl	80171fc <HAL_I2C_Master_Transmit>
}
 80188c0:	b043      	add	sp, #268	@ 0x10c
 80188c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80188c6:	bf00      	nop
 80188c8:	2000091c 	.word	0x2000091c

080188cc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80188cc:	b500      	push	{lr}
 80188ce:	b085      	sub	sp, #20
	uint8_t dt[2];
	dt[0] = reg;
 80188d0:	f88d 100c 	strb.w	r1, [sp, #12]
	dt[1] = data;
 80188d4:	f88d 200d 	strb.w	r2, [sp, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 80188d8:	230a      	movs	r3, #10
 80188da:	9300      	str	r3, [sp, #0]
 80188dc:	2302      	movs	r3, #2
 80188de:	aa03      	add	r2, sp, #12
 80188e0:	4601      	mov	r1, r0
 80188e2:	4803      	ldr	r0, [pc, #12]	@ (80188f0 <ssd1306_I2C_Write+0x24>)
 80188e4:	f7fe fc8a 	bl	80171fc <HAL_I2C_Master_Transmit>
}
 80188e8:	b005      	add	sp, #20
 80188ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80188ee:	bf00      	nop
 80188f0:	2000091c 	.word	0x2000091c

080188f4 <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 80188f4:	b508      	push	{r3, lr}
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80188f6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80188fa:	2201      	movs	r2, #1
 80188fc:	2178      	movs	r1, #120	@ 0x78
 80188fe:	4850      	ldr	r0, [pc, #320]	@ (8018a40 <SSD1306_Init+0x14c>)
 8018900:	f7fe fd38 	bl	8017374 <HAL_I2C_IsDeviceReady>
 8018904:	2800      	cmp	r0, #0
 8018906:	f040 8099 	bne.w	8018a3c <SSD1306_Init+0x148>
	uint32_t p = 2500;
 801890a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 801890e:	e000      	b.n	8018912 <SSD1306_Init+0x1e>
		p--;
 8018910:	3b01      	subs	r3, #1
	while(p>0)
 8018912:	2b00      	cmp	r3, #0
 8018914:	d1fc      	bne.n	8018910 <SSD1306_Init+0x1c>
	SSD1306_WRITECOMMAND(0xAE); //display off
 8018916:	22ae      	movs	r2, #174	@ 0xae
 8018918:	2100      	movs	r1, #0
 801891a:	2078      	movs	r0, #120	@ 0x78
 801891c:	f7ff ffd6 	bl	80188cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8018920:	2220      	movs	r2, #32
 8018922:	2100      	movs	r1, #0
 8018924:	2078      	movs	r0, #120	@ 0x78
 8018926:	f7ff ffd1 	bl	80188cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 801892a:	2210      	movs	r2, #16
 801892c:	2100      	movs	r1, #0
 801892e:	2078      	movs	r0, #120	@ 0x78
 8018930:	f7ff ffcc 	bl	80188cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8018934:	22b0      	movs	r2, #176	@ 0xb0
 8018936:	2100      	movs	r1, #0
 8018938:	2078      	movs	r0, #120	@ 0x78
 801893a:	f7ff ffc7 	bl	80188cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 801893e:	22c8      	movs	r2, #200	@ 0xc8
 8018940:	2100      	movs	r1, #0
 8018942:	2078      	movs	r0, #120	@ 0x78
 8018944:	f7ff ffc2 	bl	80188cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8018948:	2200      	movs	r2, #0
 801894a:	4611      	mov	r1, r2
 801894c:	2078      	movs	r0, #120	@ 0x78
 801894e:	f7ff ffbd 	bl	80188cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8018952:	2210      	movs	r2, #16
 8018954:	2100      	movs	r1, #0
 8018956:	2078      	movs	r0, #120	@ 0x78
 8018958:	f7ff ffb8 	bl	80188cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 801895c:	2240      	movs	r2, #64	@ 0x40
 801895e:	2100      	movs	r1, #0
 8018960:	2078      	movs	r0, #120	@ 0x78
 8018962:	f7ff ffb3 	bl	80188cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8018966:	2281      	movs	r2, #129	@ 0x81
 8018968:	2100      	movs	r1, #0
 801896a:	2078      	movs	r0, #120	@ 0x78
 801896c:	f7ff ffae 	bl	80188cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8018970:	22ff      	movs	r2, #255	@ 0xff
 8018972:	2100      	movs	r1, #0
 8018974:	2078      	movs	r0, #120	@ 0x78
 8018976:	f7ff ffa9 	bl	80188cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 801897a:	22a1      	movs	r2, #161	@ 0xa1
 801897c:	2100      	movs	r1, #0
 801897e:	2078      	movs	r0, #120	@ 0x78
 8018980:	f7ff ffa4 	bl	80188cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8018984:	22a6      	movs	r2, #166	@ 0xa6
 8018986:	2100      	movs	r1, #0
 8018988:	2078      	movs	r0, #120	@ 0x78
 801898a:	f7ff ff9f 	bl	80188cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 801898e:	22a8      	movs	r2, #168	@ 0xa8
 8018990:	2100      	movs	r1, #0
 8018992:	2078      	movs	r0, #120	@ 0x78
 8018994:	f7ff ff9a 	bl	80188cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8018998:	223f      	movs	r2, #63	@ 0x3f
 801899a:	2100      	movs	r1, #0
 801899c:	2078      	movs	r0, #120	@ 0x78
 801899e:	f7ff ff95 	bl	80188cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80189a2:	22a4      	movs	r2, #164	@ 0xa4
 80189a4:	2100      	movs	r1, #0
 80189a6:	2078      	movs	r0, #120	@ 0x78
 80189a8:	f7ff ff90 	bl	80188cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80189ac:	22d3      	movs	r2, #211	@ 0xd3
 80189ae:	2100      	movs	r1, #0
 80189b0:	2078      	movs	r0, #120	@ 0x78
 80189b2:	f7ff ff8b 	bl	80188cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80189b6:	2200      	movs	r2, #0
 80189b8:	4611      	mov	r1, r2
 80189ba:	2078      	movs	r0, #120	@ 0x78
 80189bc:	f7ff ff86 	bl	80188cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80189c0:	22d5      	movs	r2, #213	@ 0xd5
 80189c2:	2100      	movs	r1, #0
 80189c4:	2078      	movs	r0, #120	@ 0x78
 80189c6:	f7ff ff81 	bl	80188cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80189ca:	22f0      	movs	r2, #240	@ 0xf0
 80189cc:	2100      	movs	r1, #0
 80189ce:	2078      	movs	r0, #120	@ 0x78
 80189d0:	f7ff ff7c 	bl	80188cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80189d4:	22d9      	movs	r2, #217	@ 0xd9
 80189d6:	2100      	movs	r1, #0
 80189d8:	2078      	movs	r0, #120	@ 0x78
 80189da:	f7ff ff77 	bl	80188cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80189de:	2222      	movs	r2, #34	@ 0x22
 80189e0:	2100      	movs	r1, #0
 80189e2:	2078      	movs	r0, #120	@ 0x78
 80189e4:	f7ff ff72 	bl	80188cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80189e8:	22da      	movs	r2, #218	@ 0xda
 80189ea:	2100      	movs	r1, #0
 80189ec:	2078      	movs	r0, #120	@ 0x78
 80189ee:	f7ff ff6d 	bl	80188cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80189f2:	2212      	movs	r2, #18
 80189f4:	2100      	movs	r1, #0
 80189f6:	2078      	movs	r0, #120	@ 0x78
 80189f8:	f7ff ff68 	bl	80188cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80189fc:	22db      	movs	r2, #219	@ 0xdb
 80189fe:	2100      	movs	r1, #0
 8018a00:	2078      	movs	r0, #120	@ 0x78
 8018a02:	f7ff ff63 	bl	80188cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8018a06:	2220      	movs	r2, #32
 8018a08:	2100      	movs	r1, #0
 8018a0a:	2078      	movs	r0, #120	@ 0x78
 8018a0c:	f7ff ff5e 	bl	80188cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8018a10:	228d      	movs	r2, #141	@ 0x8d
 8018a12:	2100      	movs	r1, #0
 8018a14:	2078      	movs	r0, #120	@ 0x78
 8018a16:	f7ff ff59 	bl	80188cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8018a1a:	2214      	movs	r2, #20
 8018a1c:	2100      	movs	r1, #0
 8018a1e:	2078      	movs	r0, #120	@ 0x78
 8018a20:	f7ff ff54 	bl	80188cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8018a24:	22af      	movs	r2, #175	@ 0xaf
 8018a26:	2100      	movs	r1, #0
 8018a28:	2078      	movs	r0, #120	@ 0x78
 8018a2a:	f7ff ff4f 	bl	80188cc <ssd1306_I2C_Write>
	SSD1306.CurrentX = 0;
 8018a2e:	4b05      	ldr	r3, [pc, #20]	@ (8018a44 <SSD1306_Init+0x150>)
 8018a30:	2200      	movs	r2, #0
 8018a32:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8018a34:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 8018a36:	2001      	movs	r0, #1
 8018a38:	7158      	strb	r0, [r3, #5]
}
 8018a3a:	bd08      	pop	{r3, pc}
		return 0;
 8018a3c:	2000      	movs	r0, #0
 8018a3e:	e7fc      	b.n	8018a3a <SSD1306_Init+0x146>
 8018a40:	2000091c 	.word	0x2000091c
 8018a44:	200029b0 	.word	0x200029b0

08018a48 <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 8018a48:	b510      	push	{r4, lr}
	for (m = 0; m < 8; m++) {
 8018a4a:	2400      	movs	r4, #0
 8018a4c:	e01a      	b.n	8018a84 <SSD1306_UpdateScreen+0x3c>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8018a4e:	f1a4 0250 	sub.w	r2, r4, #80	@ 0x50
 8018a52:	b2d2      	uxtb	r2, r2
 8018a54:	2100      	movs	r1, #0
 8018a56:	2078      	movs	r0, #120	@ 0x78
 8018a58:	f7ff ff38 	bl	80188cc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8018a5c:	2200      	movs	r2, #0
 8018a5e:	4611      	mov	r1, r2
 8018a60:	2078      	movs	r0, #120	@ 0x78
 8018a62:	f7ff ff33 	bl	80188cc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8018a66:	2210      	movs	r2, #16
 8018a68:	2100      	movs	r1, #0
 8018a6a:	2078      	movs	r0, #120	@ 0x78
 8018a6c:	f7ff ff2e 	bl	80188cc <ssd1306_I2C_Write>
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8018a70:	2380      	movs	r3, #128	@ 0x80
 8018a72:	4a06      	ldr	r2, [pc, #24]	@ (8018a8c <SSD1306_UpdateScreen+0x44>)
 8018a74:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
 8018a78:	2140      	movs	r1, #64	@ 0x40
 8018a7a:	2078      	movs	r0, #120	@ 0x78
 8018a7c:	f7ff ff04 	bl	8018888 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8018a80:	3401      	adds	r4, #1
 8018a82:	b2e4      	uxtb	r4, r4
 8018a84:	2c07      	cmp	r4, #7
 8018a86:	d9e2      	bls.n	8018a4e <SSD1306_UpdateScreen+0x6>
}
 8018a88:	bd10      	pop	{r4, pc}
 8018a8a:	bf00      	nop
 8018a8c:	200029b8 	.word	0x200029b8

08018a90 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8018a90:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8018a92:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018a96:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8018a98:	f001 fd4a 	bl	801a530 <xTaskGetSchedulerState>
 8018a9c:	2801      	cmp	r0, #1
 8018a9e:	d100      	bne.n	8018aa2 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8018aa0:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 8018aa2:	f002 f947 	bl	801ad34 <xPortSysTickHandler>
}
 8018aa6:	e7fb      	b.n	8018aa0 <SysTick_Handler+0x10>

08018aa8 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018aa8:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8018aac:	b92b      	cbnz	r3, 8018aba <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8018aae:	4b06      	ldr	r3, [pc, #24]	@ (8018ac8 <osKernelInitialize+0x20>)
 8018ab0:	6818      	ldr	r0, [r3, #0]
 8018ab2:	b928      	cbnz	r0, 8018ac0 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8018ab4:	2201      	movs	r2, #1
 8018ab6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8018ab8:	4770      	bx	lr
    stat = osErrorISR;
 8018aba:	f06f 0005 	mvn.w	r0, #5
 8018abe:	4770      	bx	lr
    } else {
      stat = osError;
 8018ac0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
    }
  }

  return (stat);
}
 8018ac4:	4770      	bx	lr
 8018ac6:	bf00      	nop
 8018ac8:	200036b8 	.word	0x200036b8

08018acc <osKernelStart>:
 8018acc:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8018ad0:	b973      	cbnz	r3, 8018af0 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8018ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8018afc <osKernelStart+0x30>)
 8018ad4:	681b      	ldr	r3, [r3, #0]
 8018ad6:	2b01      	cmp	r3, #1
 8018ad8:	d10d      	bne.n	8018af6 <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 8018ada:	b510      	push	{r4, lr}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8018adc:	2400      	movs	r4, #0
 8018ade:	4b08      	ldr	r3, [pc, #32]	@ (8018b00 <osKernelStart+0x34>)
 8018ae0:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8018ae2:	4b06      	ldr	r3, [pc, #24]	@ (8018afc <osKernelStart+0x30>)
 8018ae4:	2202      	movs	r2, #2
 8018ae6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8018ae8:	f001 fa6a 	bl	8019fc0 <vTaskStartScheduler>
      stat = osOK;
 8018aec:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8018aee:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8018af0:	f06f 0005 	mvn.w	r0, #5
 8018af4:	4770      	bx	lr
      stat = osError;
 8018af6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8018afa:	4770      	bx	lr
 8018afc:	200036b8 	.word	0x200036b8
 8018b00:	e000ed00 	.word	0xe000ed00

08018b04 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8018b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b06:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8018b08:	2400      	movs	r4, #0
 8018b0a:	9405      	str	r4, [sp, #20]
 8018b0c:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8018b10:	bb7c      	cbnz	r4, 8018b72 <osThreadNew+0x6e>
 8018b12:	b370      	cbz	r0, 8018b72 <osThreadNew+0x6e>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8018b14:	b32a      	cbz	r2, 8018b62 <osThreadNew+0x5e>
      if (attr->name != NULL) {
 8018b16:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8018b18:	6993      	ldr	r3, [r2, #24]
 8018b1a:	b903      	cbnz	r3, 8018b1e <osThreadNew+0x1a>
    prio  = (UBaseType_t)osPriorityNormal;
 8018b1c:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8018b1e:	1e5c      	subs	r4, r3, #1
 8018b20:	2c37      	cmp	r4, #55	@ 0x37
 8018b22:	d84a      	bhi.n	8018bba <osThreadNew+0xb6>
 8018b24:	6854      	ldr	r4, [r2, #4]
 8018b26:	f014 0f01 	tst.w	r4, #1
 8018b2a:	d148      	bne.n	8018bbe <osThreadNew+0xba>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8018b2c:	6956      	ldr	r6, [r2, #20]
 8018b2e:	b176      	cbz	r6, 8018b4e <osThreadNew+0x4a>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8018b30:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8018b34:	6894      	ldr	r4, [r2, #8]
 8018b36:	b134      	cbz	r4, 8018b46 <osThreadNew+0x42>
 8018b38:	68d7      	ldr	r7, [r2, #12]
 8018b3a:	f5b7 7fc0 	cmp.w	r7, #384	@ 0x180
 8018b3e:	d302      	bcc.n	8018b46 <osThreadNew+0x42>
 8018b40:	6917      	ldr	r7, [r2, #16]
 8018b42:	b107      	cbz	r7, 8018b46 <osThreadNew+0x42>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8018b44:	b9c6      	cbnz	r6, 8018b78 <osThreadNew+0x74>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8018b46:	b12c      	cbz	r4, 8018b54 <osThreadNew+0x50>
    mem  = -1;
 8018b48:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8018b4c:	e00e      	b.n	8018b6c <osThreadNew+0x68>
    stack = configMINIMAL_STACK_SIZE;
 8018b4e:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 8018b52:	e7ef      	b.n	8018b34 <osThreadNew+0x30>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8018b54:	68d4      	ldr	r4, [r2, #12]
 8018b56:	b98c      	cbnz	r4, 8018b7c <osThreadNew+0x78>
 8018b58:	6914      	ldr	r4, [r2, #16]
 8018b5a:	b194      	cbz	r4, 8018b82 <osThreadNew+0x7e>
    mem  = -1;
 8018b5c:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8018b60:	e004      	b.n	8018b6c <osThreadNew+0x68>
    name = NULL;
 8018b62:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 8018b64:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 8018b66:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 8018b68:	f04f 0c80 	mov.w	ip, #128	@ 0x80
    }

    if (mem == 1) {
 8018b6c:	2c01      	cmp	r4, #1
 8018b6e:	d00a      	beq.n	8018b86 <osThreadNew+0x82>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8018b70:	b1ac      	cbz	r4, 8018b9e <osThreadNew+0x9a>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8018b72:	9805      	ldr	r0, [sp, #20]
}
 8018b74:	b007      	add	sp, #28
 8018b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 8018b78:	2401      	movs	r4, #1
 8018b7a:	e7f7      	b.n	8018b6c <osThreadNew+0x68>
    mem  = -1;
 8018b7c:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8018b80:	e7f4      	b.n	8018b6c <osThreadNew+0x68>
          mem = 0;
 8018b82:	2400      	movs	r4, #0
 8018b84:	e7f2      	b.n	8018b6c <osThreadNew+0x68>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8018b86:	6914      	ldr	r4, [r2, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8018b88:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8018b8a:	9202      	str	r2, [sp, #8]
 8018b8c:	9401      	str	r4, [sp, #4]
 8018b8e:	9300      	str	r3, [sp, #0]
 8018b90:	460b      	mov	r3, r1
 8018b92:	4662      	mov	r2, ip
 8018b94:	4629      	mov	r1, r5
 8018b96:	f001 f9a3 	bl	8019ee0 <xTaskCreateStatic>
 8018b9a:	9005      	str	r0, [sp, #20]
 8018b9c:	e7e9      	b.n	8018b72 <osThreadNew+0x6e>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8018b9e:	aa05      	add	r2, sp, #20
 8018ba0:	9201      	str	r2, [sp, #4]
 8018ba2:	9300      	str	r3, [sp, #0]
 8018ba4:	460b      	mov	r3, r1
 8018ba6:	fa1f f28c 	uxth.w	r2, ip
 8018baa:	4629      	mov	r1, r5
 8018bac:	f001 f9d5 	bl	8019f5a <xTaskCreate>
 8018bb0:	2801      	cmp	r0, #1
 8018bb2:	d0de      	beq.n	8018b72 <osThreadNew+0x6e>
            hTask = NULL;
 8018bb4:	2300      	movs	r3, #0
 8018bb6:	9305      	str	r3, [sp, #20]
 8018bb8:	e7db      	b.n	8018b72 <osThreadNew+0x6e>
        return (NULL);
 8018bba:	2000      	movs	r0, #0
 8018bbc:	e7da      	b.n	8018b74 <osThreadNew+0x70>
 8018bbe:	2000      	movs	r0, #0
 8018bc0:	e7d8      	b.n	8018b74 <osThreadNew+0x70>

08018bc2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8018bc2:	b508      	push	{r3, lr}
 8018bc4:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8018bc8:	b933      	cbnz	r3, 8018bd8 <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8018bca:	b908      	cbnz	r0, 8018bd0 <osDelay+0xe>
    stat = osOK;
 8018bcc:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8018bce:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 8018bd0:	f001 fb62 	bl	801a298 <vTaskDelay>
    stat = osOK;
 8018bd4:	2000      	movs	r0, #0
 8018bd6:	e7fa      	b.n	8018bce <osDelay+0xc>
    stat = osErrorISR;
 8018bd8:	f06f 0005 	mvn.w	r0, #5
 8018bdc:	e7f7      	b.n	8018bce <osDelay+0xc>

08018bde <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8018bde:	b570      	push	{r4, r5, r6, lr}
 8018be0:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8018be4:	2b00      	cmp	r3, #0
 8018be6:	d13c      	bne.n	8018c62 <osMutexNew+0x84>
 8018be8:	4604      	mov	r4, r0
    if (attr != NULL) {
 8018bea:	b100      	cbz	r0, 8018bee <osMutexNew+0x10>
      type = attr->attr_bits;
 8018bec:	6843      	ldr	r3, [r0, #4]
    } else {
      type = 0U;
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8018bee:	f013 0601 	ands.w	r6, r3, #1
 8018bf2:	d000      	beq.n	8018bf6 <osMutexNew+0x18>
      rmtx = 1U;
 8018bf4:	2601      	movs	r6, #1
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8018bf6:	f013 0f08 	tst.w	r3, #8
 8018bfa:	d135      	bne.n	8018c68 <osMutexNew+0x8a>
      mem = -1;

      if (attr != NULL) {
 8018bfc:	b344      	cbz	r4, 8018c50 <osMutexNew+0x72>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8018bfe:	68a1      	ldr	r1, [r4, #8]
 8018c00:	b111      	cbz	r1, 8018c08 <osMutexNew+0x2a>
 8018c02:	68e3      	ldr	r3, [r4, #12]
 8018c04:	2b4f      	cmp	r3, #79	@ 0x4f
 8018c06:	d818      	bhi.n	8018c3a <osMutexNew+0x5c>
          mem = 1;
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8018c08:	b191      	cbz	r1, 8018c30 <osMutexNew+0x52>
      mem = -1;
 8018c0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
          }
        #endif
      }
      else {
        if (mem == 0) {
 8018c0e:	bb6b      	cbnz	r3, 8018c6c <osMutexNew+0x8e>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8018c10:	b316      	cbz	r6, 8018c58 <osMutexNew+0x7a>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8018c12:	2004      	movs	r0, #4
 8018c14:	f000 fc04 	bl	8019420 <xQueueCreateMutex>
 8018c18:	4605      	mov	r5, r0
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8018c1a:	b31d      	cbz	r5, 8018c64 <osMutexNew+0x86>
        if (attr != NULL) {
 8018c1c:	b104      	cbz	r4, 8018c20 <osMutexNew+0x42>
          name = attr->name;
 8018c1e:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 8018c20:	4621      	mov	r1, r4
 8018c22:	4628      	mov	r0, r5
 8018c24:	f000 ff64 	bl	8019af0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8018c28:	b1e6      	cbz	r6, 8018c64 <osMutexNew+0x86>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8018c2a:	f045 0501 	orr.w	r5, r5, #1
 8018c2e:	e019      	b.n	8018c64 <osMutexNew+0x86>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8018c30:	68e3      	ldr	r3, [r4, #12]
 8018c32:	b17b      	cbz	r3, 8018c54 <osMutexNew+0x76>
      mem = -1;
 8018c34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018c38:	e7e9      	b.n	8018c0e <osMutexNew+0x30>
          if (rmtx != 0U) {
 8018c3a:	b126      	cbz	r6, 8018c46 <osMutexNew+0x68>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8018c3c:	2004      	movs	r0, #4
 8018c3e:	f000 fbfa 	bl	8019436 <xQueueCreateMutexStatic>
 8018c42:	4605      	mov	r5, r0
 8018c44:	e7e9      	b.n	8018c1a <osMutexNew+0x3c>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8018c46:	2001      	movs	r0, #1
 8018c48:	f000 fbf5 	bl	8019436 <xQueueCreateMutexStatic>
 8018c4c:	4605      	mov	r5, r0
 8018c4e:	e7e4      	b.n	8018c1a <osMutexNew+0x3c>
        mem = 0;
 8018c50:	2300      	movs	r3, #0
 8018c52:	e7dc      	b.n	8018c0e <osMutexNew+0x30>
            mem = 0;
 8018c54:	2300      	movs	r3, #0
 8018c56:	e7da      	b.n	8018c0e <osMutexNew+0x30>
              hMutex = xSemaphoreCreateMutex ();
 8018c58:	2001      	movs	r0, #1
 8018c5a:	f000 fbe1 	bl	8019420 <xQueueCreateMutex>
 8018c5e:	4605      	mov	r5, r0
 8018c60:	e7db      	b.n	8018c1a <osMutexNew+0x3c>
  hMutex = NULL;
 8018c62:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8018c64:	4628      	mov	r0, r5
 8018c66:	bd70      	pop	{r4, r5, r6, pc}
  hMutex = NULL;
 8018c68:	2500      	movs	r5, #0
 8018c6a:	e7fb      	b.n	8018c64 <osMutexNew+0x86>
 8018c6c:	2500      	movs	r5, #0
  return ((osMutexId_t)hMutex);
 8018c6e:	e7f9      	b.n	8018c64 <osMutexNew+0x86>

08018c70 <osMutexAcquire>:
 8018c70:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8018c74:	b9da      	cbnz	r2, 8018cae <osMutexAcquire+0x3e>
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8018c76:	b510      	push	{r4, lr}
 8018c78:	4603      	mov	r3, r0
 8018c7a:	460c      	mov	r4, r1
 8018c7c:	f020 0001 	bic.w	r0, r0, #1
 8018c80:	f003 0101 	and.w	r1, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8018c84:	2b01      	cmp	r3, #1
 8018c86:	d915      	bls.n	8018cb4 <osMutexAcquire+0x44>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8018c88:	b141      	cbz	r1, 8018c9c <osMutexAcquire+0x2c>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8018c8a:	4621      	mov	r1, r4
 8018c8c:	f000 fdeb 	bl	8019866 <xQueueTakeMutexRecursive>
 8018c90:	2801      	cmp	r0, #1
 8018c92:	d012      	beq.n	8018cba <osMutexAcquire+0x4a>
        if (timeout != 0U) {
 8018c94:	b19c      	cbz	r4, 8018cbe <osMutexAcquire+0x4e>
          stat = osErrorTimeout;
 8018c96:	f06f 0001 	mvn.w	r0, #1
 8018c9a:	e00f      	b.n	8018cbc <osMutexAcquire+0x4c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8018c9c:	4621      	mov	r1, r4
 8018c9e:	f000 fd0f 	bl	80196c0 <xQueueSemaphoreTake>
 8018ca2:	2801      	cmp	r0, #1
 8018ca4:	d00e      	beq.n	8018cc4 <osMutexAcquire+0x54>
        if (timeout != 0U) {
 8018ca6:	b17c      	cbz	r4, 8018cc8 <osMutexAcquire+0x58>
          stat = osErrorTimeout;
 8018ca8:	f06f 0001 	mvn.w	r0, #1
 8018cac:	e006      	b.n	8018cbc <osMutexAcquire+0x4c>
    stat = osErrorISR;
 8018cae:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8018cb2:	4770      	bx	lr
    stat = osErrorParameter;
 8018cb4:	f06f 0003 	mvn.w	r0, #3
 8018cb8:	e000      	b.n	8018cbc <osMutexAcquire+0x4c>
  stat = osOK;
 8018cba:	2000      	movs	r0, #0
}
 8018cbc:	bd10      	pop	{r4, pc}
          stat = osErrorResource;
 8018cbe:	f06f 0002 	mvn.w	r0, #2
 8018cc2:	e7fb      	b.n	8018cbc <osMutexAcquire+0x4c>
  stat = osOK;
 8018cc4:	2000      	movs	r0, #0
 8018cc6:	e7f9      	b.n	8018cbc <osMutexAcquire+0x4c>
          stat = osErrorResource;
 8018cc8:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8018ccc:	e7f6      	b.n	8018cbc <osMutexAcquire+0x4c>

08018cce <osMutexRelease>:
 8018cce:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8018cd2:	b9ba      	cbnz	r2, 8018d04 <osMutexRelease+0x36>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8018cd4:	b508      	push	{r3, lr}
 8018cd6:	4603      	mov	r3, r0
 8018cd8:	f020 0001 	bic.w	r0, r0, #1
 8018cdc:	f003 0101 	and.w	r1, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8018ce0:	2b01      	cmp	r3, #1
 8018ce2:	d912      	bls.n	8018d0a <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8018ce4:	b129      	cbz	r1, 8018cf2 <osMutexRelease+0x24>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8018ce6:	f000 fbb5 	bl	8019454 <xQueueGiveMutexRecursive>
 8018cea:	2801      	cmp	r0, #1
 8018cec:	d110      	bne.n	8018d10 <osMutexRelease+0x42>
  stat = osOK;
 8018cee:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8018cf0:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8018cf2:	2300      	movs	r3, #0
 8018cf4:	461a      	mov	r2, r3
 8018cf6:	4619      	mov	r1, r3
 8018cf8:	f000 fac2 	bl	8019280 <xQueueGenericSend>
 8018cfc:	2801      	cmp	r0, #1
 8018cfe:	d10a      	bne.n	8018d16 <osMutexRelease+0x48>
  stat = osOK;
 8018d00:	2000      	movs	r0, #0
 8018d02:	e7f5      	b.n	8018cf0 <osMutexRelease+0x22>
    stat = osErrorISR;
 8018d04:	f06f 0005 	mvn.w	r0, #5
}
 8018d08:	4770      	bx	lr
    stat = osErrorParameter;
 8018d0a:	f06f 0003 	mvn.w	r0, #3
 8018d0e:	e7ef      	b.n	8018cf0 <osMutexRelease+0x22>
        stat = osErrorResource;
 8018d10:	f06f 0002 	mvn.w	r0, #2
 8018d14:	e7ec      	b.n	8018cf0 <osMutexRelease+0x22>
        stat = osErrorResource;
 8018d16:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8018d1a:	e7e9      	b.n	8018cf0 <osMutexRelease+0x22>

08018d1c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8018d1c:	b570      	push	{r4, r5, r6, lr}
 8018d1e:	b082      	sub	sp, #8
 8018d20:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8018d24:	2b00      	cmp	r3, #0
 8018d26:	d13a      	bne.n	8018d9e <osMessageQueueNew+0x82>
 8018d28:	4614      	mov	r4, r2
 8018d2a:	2800      	cmp	r0, #0
 8018d2c:	d03b      	beq.n	8018da6 <osMessageQueueNew+0x8a>
 8018d2e:	2900      	cmp	r1, #0
 8018d30:	d03b      	beq.n	8018daa <osMessageQueueNew+0x8e>
    mem = -1;

    if (attr != NULL) {
 8018d32:	b36a      	cbz	r2, 8018d90 <osMessageQueueNew+0x74>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8018d34:	6893      	ldr	r3, [r2, #8]
 8018d36:	b14b      	cbz	r3, 8018d4c <osMessageQueueNew+0x30>
 8018d38:	68d2      	ldr	r2, [r2, #12]
 8018d3a:	2a4f      	cmp	r2, #79	@ 0x4f
 8018d3c:	d906      	bls.n	8018d4c <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8018d3e:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8018d40:	b122      	cbz	r2, 8018d4c <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8018d42:	fb01 f500 	mul.w	r5, r1, r0
 8018d46:	6966      	ldr	r6, [r4, #20]
 8018d48:	42ae      	cmp	r6, r5
 8018d4a:	d21b      	bcs.n	8018d84 <osMessageQueueNew+0x68>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8018d4c:	b173      	cbz	r3, 8018d6c <osMessageQueueNew+0x50>
    mem = -1;
 8018d4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8018d52:	bb63      	cbnz	r3, 8018dae <osMessageQueueNew+0x92>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8018d54:	2200      	movs	r2, #0
 8018d56:	f000 fa6f 	bl	8019238 <xQueueGenericCreate>
 8018d5a:	4605      	mov	r5, r0
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8018d5c:	b305      	cbz	r5, 8018da0 <osMessageQueueNew+0x84>
      if (attr != NULL) {
 8018d5e:	b104      	cbz	r4, 8018d62 <osMessageQueueNew+0x46>
        name = attr->name;
 8018d60:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 8018d62:	4621      	mov	r1, r4
 8018d64:	4628      	mov	r0, r5
 8018d66:	f000 fec3 	bl	8019af0 <vQueueAddToRegistry>
 8018d6a:	e019      	b.n	8018da0 <osMessageQueueNew+0x84>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8018d6c:	68e3      	ldr	r3, [r4, #12]
 8018d6e:	b98b      	cbnz	r3, 8018d94 <osMessageQueueNew+0x78>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8018d70:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8018d72:	b113      	cbz	r3, 8018d7a <osMessageQueueNew+0x5e>
    mem = -1;
 8018d74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018d78:	e7eb      	b.n	8018d52 <osMessageQueueNew+0x36>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8018d7a:	6963      	ldr	r3, [r4, #20]
 8018d7c:	b16b      	cbz	r3, 8018d9a <osMessageQueueNew+0x7e>
    mem = -1;
 8018d7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018d82:	e7e6      	b.n	8018d52 <osMessageQueueNew+0x36>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8018d84:	2500      	movs	r5, #0
 8018d86:	9500      	str	r5, [sp, #0]
 8018d88:	f000 fa0c 	bl	80191a4 <xQueueGenericCreateStatic>
 8018d8c:	4605      	mov	r5, r0
 8018d8e:	e7e5      	b.n	8018d5c <osMessageQueueNew+0x40>
      mem = 0;
 8018d90:	2300      	movs	r3, #0
 8018d92:	e7de      	b.n	8018d52 <osMessageQueueNew+0x36>
    mem = -1;
 8018d94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018d98:	e7db      	b.n	8018d52 <osMessageQueueNew+0x36>
          mem = 0;
 8018d9a:	2300      	movs	r3, #0
 8018d9c:	e7d9      	b.n	8018d52 <osMessageQueueNew+0x36>
  hQueue = NULL;
 8018d9e:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8018da0:	4628      	mov	r0, r5
 8018da2:	b002      	add	sp, #8
 8018da4:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 8018da6:	2500      	movs	r5, #0
 8018da8:	e7fa      	b.n	8018da0 <osMessageQueueNew+0x84>
 8018daa:	2500      	movs	r5, #0
 8018dac:	e7f8      	b.n	8018da0 <osMessageQueueNew+0x84>
 8018dae:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 8018db0:	e7f6      	b.n	8018da0 <osMessageQueueNew+0x84>

08018db2 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8018db2:	b510      	push	{r4, lr}
 8018db4:	b082      	sub	sp, #8
 8018db6:	461c      	mov	r4, r3
 8018db8:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8018dbc:	b1c3      	cbz	r3, 8018df0 <osMessageQueuePut+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8018dbe:	b318      	cbz	r0, 8018e08 <osMessageQueuePut+0x56>
 8018dc0:	b329      	cbz	r1, 8018e0e <osMessageQueuePut+0x5c>
 8018dc2:	bb3c      	cbnz	r4, 8018e14 <osMessageQueuePut+0x62>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8018dc4:	2300      	movs	r3, #0
 8018dc6:	9301      	str	r3, [sp, #4]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8018dc8:	aa01      	add	r2, sp, #4
 8018dca:	f000 fb63 	bl	8019494 <xQueueGenericSendFromISR>
 8018dce:	2801      	cmp	r0, #1
 8018dd0:	d123      	bne.n	8018e1a <osMessageQueuePut+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8018dd2:	9801      	ldr	r0, [sp, #4]
 8018dd4:	b150      	cbz	r0, 8018dec <osMessageQueuePut+0x3a>
 8018dd6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018dda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018dde:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018de2:	f3bf 8f4f 	dsb	sy
 8018de6:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8018dea:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8018dec:	b002      	add	sp, #8
 8018dee:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8018df0:	b1b0      	cbz	r0, 8018e20 <osMessageQueuePut+0x6e>
 8018df2:	b1c1      	cbz	r1, 8018e26 <osMessageQueuePut+0x74>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8018df4:	2300      	movs	r3, #0
 8018df6:	4622      	mov	r2, r4
 8018df8:	f000 fa42 	bl	8019280 <xQueueGenericSend>
 8018dfc:	2801      	cmp	r0, #1
 8018dfe:	d015      	beq.n	8018e2c <osMessageQueuePut+0x7a>
        if (timeout != 0U) {
 8018e00:	b1b4      	cbz	r4, 8018e30 <osMessageQueuePut+0x7e>
          stat = osErrorTimeout;
 8018e02:	f06f 0001 	mvn.w	r0, #1
 8018e06:	e7f1      	b.n	8018dec <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 8018e08:	f06f 0003 	mvn.w	r0, #3
 8018e0c:	e7ee      	b.n	8018dec <osMessageQueuePut+0x3a>
 8018e0e:	f06f 0003 	mvn.w	r0, #3
 8018e12:	e7eb      	b.n	8018dec <osMessageQueuePut+0x3a>
 8018e14:	f06f 0003 	mvn.w	r0, #3
 8018e18:	e7e8      	b.n	8018dec <osMessageQueuePut+0x3a>
        stat = osErrorResource;
 8018e1a:	f06f 0002 	mvn.w	r0, #2
 8018e1e:	e7e5      	b.n	8018dec <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 8018e20:	f06f 0003 	mvn.w	r0, #3
 8018e24:	e7e2      	b.n	8018dec <osMessageQueuePut+0x3a>
 8018e26:	f06f 0003 	mvn.w	r0, #3
 8018e2a:	e7df      	b.n	8018dec <osMessageQueuePut+0x3a>
  stat = osOK;
 8018e2c:	2000      	movs	r0, #0
 8018e2e:	e7dd      	b.n	8018dec <osMessageQueuePut+0x3a>
          stat = osErrorResource;
 8018e30:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8018e34:	e7da      	b.n	8018dec <osMessageQueuePut+0x3a>

08018e36 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8018e36:	b510      	push	{r4, lr}
 8018e38:	b082      	sub	sp, #8
 8018e3a:	461c      	mov	r4, r3
 8018e3c:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8018e40:	b1c3      	cbz	r3, 8018e74 <osMessageQueueGet+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8018e42:	b310      	cbz	r0, 8018e8a <osMessageQueueGet+0x54>
 8018e44:	b321      	cbz	r1, 8018e90 <osMessageQueueGet+0x5a>
 8018e46:	bb34      	cbnz	r4, 8018e96 <osMessageQueueGet+0x60>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8018e48:	2300      	movs	r3, #0
 8018e4a:	9301      	str	r3, [sp, #4]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8018e4c:	aa01      	add	r2, sp, #4
 8018e4e:	f000 fdd9 	bl	8019a04 <xQueueReceiveFromISR>
 8018e52:	2801      	cmp	r0, #1
 8018e54:	d122      	bne.n	8018e9c <osMessageQueueGet+0x66>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8018e56:	9801      	ldr	r0, [sp, #4]
 8018e58:	b150      	cbz	r0, 8018e70 <osMessageQueueGet+0x3a>
 8018e5a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018e5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018e62:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018e66:	f3bf 8f4f 	dsb	sy
 8018e6a:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8018e6e:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8018e70:	b002      	add	sp, #8
 8018e72:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8018e74:	b1a8      	cbz	r0, 8018ea2 <osMessageQueueGet+0x6c>
 8018e76:	b1b9      	cbz	r1, 8018ea8 <osMessageQueueGet+0x72>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8018e78:	4622      	mov	r2, r4
 8018e7a:	f000 fb72 	bl	8019562 <xQueueReceive>
 8018e7e:	2801      	cmp	r0, #1
 8018e80:	d015      	beq.n	8018eae <osMessageQueueGet+0x78>
        if (timeout != 0U) {
 8018e82:	b1b4      	cbz	r4, 8018eb2 <osMessageQueueGet+0x7c>
          stat = osErrorTimeout;
 8018e84:	f06f 0001 	mvn.w	r0, #1
 8018e88:	e7f2      	b.n	8018e70 <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 8018e8a:	f06f 0003 	mvn.w	r0, #3
 8018e8e:	e7ef      	b.n	8018e70 <osMessageQueueGet+0x3a>
 8018e90:	f06f 0003 	mvn.w	r0, #3
 8018e94:	e7ec      	b.n	8018e70 <osMessageQueueGet+0x3a>
 8018e96:	f06f 0003 	mvn.w	r0, #3
 8018e9a:	e7e9      	b.n	8018e70 <osMessageQueueGet+0x3a>
        stat = osErrorResource;
 8018e9c:	f06f 0002 	mvn.w	r0, #2
 8018ea0:	e7e6      	b.n	8018e70 <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 8018ea2:	f06f 0003 	mvn.w	r0, #3
 8018ea6:	e7e3      	b.n	8018e70 <osMessageQueueGet+0x3a>
 8018ea8:	f06f 0003 	mvn.w	r0, #3
 8018eac:	e7e0      	b.n	8018e70 <osMessageQueueGet+0x3a>
  stat = osOK;
 8018eae:	2000      	movs	r0, #0
 8018eb0:	e7de      	b.n	8018e70 <osMessageQueueGet+0x3a>
          stat = osErrorResource;
 8018eb2:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8018eb6:	e7db      	b.n	8018e70 <osMessageQueueGet+0x3a>

08018eb8 <osMessageQueueGetCount>:

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  UBaseType_t count;

  if (hQueue == NULL) {
 8018eb8:	b148      	cbz	r0, 8018ece <osMessageQueueGetCount+0x16>
uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8018eba:	b508      	push	{r3, lr}
 8018ebc:	f3ef 8205 	mrs	r2, IPSR
    count = 0U;
  }
  else if (IS_IRQ()) {
 8018ec0:	b112      	cbz	r2, 8018ec8 <osMessageQueueGetCount+0x10>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8018ec2:	f000 fe09 	bl	8019ad8 <uxQueueMessagesWaitingFromISR>
  else {
    count = uxQueueMessagesWaiting (hQueue);
  }

  return ((uint32_t)count);
}
 8018ec6:	bd08      	pop	{r3, pc}
    count = uxQueueMessagesWaiting (hQueue);
 8018ec8:	f000 fdf3 	bl	8019ab2 <uxQueueMessagesWaiting>
 8018ecc:	e7fb      	b.n	8018ec6 <osMessageQueueGetCount+0xe>
    count = 0U;
 8018ece:	2000      	movs	r0, #0
}
 8018ed0:	4770      	bx	lr

08018ed2 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 8018ed2:	b508      	push	{r3, lr}
 8018ed4:	f3ef 8305 	mrs	r3, IPSR
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  osStatus_t stat;

  if (IS_IRQ()) {
 8018ed8:	b92b      	cbnz	r3, 8018ee6 <osMessageQueueReset+0x14>
    stat = osErrorISR;
  }
  else if (hQueue == NULL) {
 8018eda:	b138      	cbz	r0, 8018eec <osMessageQueueReset+0x1a>
    stat = osErrorParameter;
  }
  else {
    stat = osOK;
    (void)xQueueReset (hQueue);
 8018edc:	2100      	movs	r1, #0
 8018ede:	f000 f90e 	bl	80190fe <xQueueGenericReset>
    stat = osOK;
 8018ee2:	2000      	movs	r0, #0
  }

  return (stat);
}
 8018ee4:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 8018ee6:	f06f 0005 	mvn.w	r0, #5
 8018eea:	e7fb      	b.n	8018ee4 <osMessageQueueReset+0x12>
    stat = osErrorParameter;
 8018eec:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8018ef0:	e7f8      	b.n	8018ee4 <osMessageQueueReset+0x12>
	...

08018ef4 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8018ef4:	4b03      	ldr	r3, [pc, #12]	@ (8018f04 <vApplicationGetIdleTaskMemory+0x10>)
 8018ef6:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8018ef8:	4b03      	ldr	r3, [pc, #12]	@ (8018f08 <vApplicationGetIdleTaskMemory+0x14>)
 8018efa:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8018efc:	2380      	movs	r3, #128	@ 0x80
 8018efe:	6013      	str	r3, [r2, #0]
}
 8018f00:	4770      	bx	lr
 8018f02:	bf00      	nop
 8018f04:	20003538 	.word	0x20003538
 8018f08:	20003338 	.word	0x20003338

08018f0c <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8018f0c:	4b03      	ldr	r3, [pc, #12]	@ (8018f1c <vApplicationGetTimerTaskMemory+0x10>)
 8018f0e:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8018f10:	4b03      	ldr	r3, [pc, #12]	@ (8018f20 <vApplicationGetTimerTaskMemory+0x14>)
 8018f12:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8018f14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8018f18:	6013      	str	r3, [r2, #0]
}
 8018f1a:	4770      	bx	lr
 8018f1c:	200031b8 	.word	0x200031b8
 8018f20:	20002db8 	.word	0x20002db8

08018f24 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018f24:	f100 0308 	add.w	r3, r0, #8
 8018f28:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8018f2a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018f2e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018f30:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018f32:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8018f34:	2300      	movs	r3, #0
 8018f36:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8018f38:	4770      	bx	lr

08018f3a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8018f3a:	2300      	movs	r3, #0
 8018f3c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8018f3e:	4770      	bx	lr

08018f40 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8018f40:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8018f42:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8018f44:	689a      	ldr	r2, [r3, #8]
 8018f46:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8018f48:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8018f4a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8018f4c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8018f4e:	6803      	ldr	r3, [r0, #0]
 8018f50:	3301      	adds	r3, #1
 8018f52:	6003      	str	r3, [r0, #0]
}
 8018f54:	4770      	bx	lr

08018f56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8018f56:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8018f58:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8018f5a:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8018f5e:	d011      	beq.n	8018f84 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8018f60:	f100 0308 	add.w	r3, r0, #8
 8018f64:	461c      	mov	r4, r3
 8018f66:	685b      	ldr	r3, [r3, #4]
 8018f68:	681a      	ldr	r2, [r3, #0]
 8018f6a:	42aa      	cmp	r2, r5
 8018f6c:	d9fa      	bls.n	8018f64 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8018f6e:	6863      	ldr	r3, [r4, #4]
 8018f70:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8018f72:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8018f74:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8018f76:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8018f78:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8018f7a:	6803      	ldr	r3, [r0, #0]
 8018f7c:	3301      	adds	r3, #1
 8018f7e:	6003      	str	r3, [r0, #0]
}
 8018f80:	bc30      	pop	{r4, r5}
 8018f82:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8018f84:	6904      	ldr	r4, [r0, #16]
 8018f86:	e7f2      	b.n	8018f6e <vListInsert+0x18>

08018f88 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8018f88:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8018f8a:	6841      	ldr	r1, [r0, #4]
 8018f8c:	6882      	ldr	r2, [r0, #8]
 8018f8e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8018f90:	6841      	ldr	r1, [r0, #4]
 8018f92:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8018f94:	685a      	ldr	r2, [r3, #4]
 8018f96:	4282      	cmp	r2, r0
 8018f98:	d006      	beq.n	8018fa8 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8018f9a:	2200      	movs	r2, #0
 8018f9c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8018f9e:	681a      	ldr	r2, [r3, #0]
 8018fa0:	3a01      	subs	r2, #1
 8018fa2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8018fa4:	6818      	ldr	r0, [r3, #0]
}
 8018fa6:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8018fa8:	6882      	ldr	r2, [r0, #8]
 8018faa:	605a      	str	r2, [r3, #4]
 8018fac:	e7f5      	b.n	8018f9a <uxListRemove+0x12>

08018fae <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8018fae:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8018fb0:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8018fb2:	b118      	cbz	r0, 8018fbc <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8018fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018fb6:	6818      	ldr	r0, [r3, #0]
 8018fb8:	f1c0 0038 	rsb	r0, r0, #56	@ 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 8018fbc:	4770      	bx	lr

08018fbe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8018fbe:	b510      	push	{r4, lr}
 8018fc0:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8018fc2:	f001 fe47 	bl	801ac54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8018fc6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8018fc8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8018fca:	429a      	cmp	r2, r3
 8018fcc:	d004      	beq.n	8018fd8 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8018fce:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8018fd0:	f001 fe62 	bl	801ac98 <vPortExitCritical>

	return xReturn;
}
 8018fd4:	4620      	mov	r0, r4
 8018fd6:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8018fd8:	2401      	movs	r4, #1
 8018fda:	e7f9      	b.n	8018fd0 <prvIsQueueFull+0x12>

08018fdc <prvIsQueueEmpty>:
{
 8018fdc:	b510      	push	{r4, lr}
 8018fde:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8018fe0:	f001 fe38 	bl	801ac54 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8018fe4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8018fe6:	b923      	cbnz	r3, 8018ff2 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8018fe8:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8018fea:	f001 fe55 	bl	801ac98 <vPortExitCritical>
}
 8018fee:	4620      	mov	r0, r4
 8018ff0:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8018ff2:	2400      	movs	r4, #0
 8018ff4:	e7f9      	b.n	8018fea <prvIsQueueEmpty+0xe>

08018ff6 <prvCopyDataToQueue>:
{
 8018ff6:	b570      	push	{r4, r5, r6, lr}
 8018ff8:	4604      	mov	r4, r0
 8018ffa:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018ffc:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8018ffe:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8019000:	b95a      	cbnz	r2, 801901a <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8019002:	6803      	ldr	r3, [r0, #0]
 8019004:	b11b      	cbz	r3, 801900e <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8019006:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8019008:	3601      	adds	r6, #1
 801900a:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 801900c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801900e:	6880      	ldr	r0, [r0, #8]
 8019010:	f001 faea 	bl	801a5e8 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8019014:	2300      	movs	r3, #0
 8019016:	60a3      	str	r3, [r4, #8]
 8019018:	e7f6      	b.n	8019008 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 801901a:	b96d      	cbnz	r5, 8019038 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801901c:	6840      	ldr	r0, [r0, #4]
 801901e:	f015 fa5b 	bl	802e4d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8019022:	6863      	ldr	r3, [r4, #4]
 8019024:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8019026:	4413      	add	r3, r2
 8019028:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801902a:	68a2      	ldr	r2, [r4, #8]
 801902c:	4293      	cmp	r3, r2
 801902e:	d319      	bcc.n	8019064 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8019030:	6823      	ldr	r3, [r4, #0]
 8019032:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8019034:	4628      	mov	r0, r5
 8019036:	e7e7      	b.n	8019008 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8019038:	68c0      	ldr	r0, [r0, #12]
 801903a:	f015 fa4d 	bl	802e4d8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801903e:	68e3      	ldr	r3, [r4, #12]
 8019040:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8019042:	4251      	negs	r1, r2
 8019044:	1a9b      	subs	r3, r3, r2
 8019046:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8019048:	6822      	ldr	r2, [r4, #0]
 801904a:	4293      	cmp	r3, r2
 801904c:	d202      	bcs.n	8019054 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801904e:	68a3      	ldr	r3, [r4, #8]
 8019050:	440b      	add	r3, r1
 8019052:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8019054:	2d02      	cmp	r5, #2
 8019056:	d001      	beq.n	801905c <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8019058:	2000      	movs	r0, #0
 801905a:	e7d5      	b.n	8019008 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801905c:	b126      	cbz	r6, 8019068 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 801905e:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8019060:	2000      	movs	r0, #0
 8019062:	e7d1      	b.n	8019008 <prvCopyDataToQueue+0x12>
 8019064:	4628      	mov	r0, r5
 8019066:	e7cf      	b.n	8019008 <prvCopyDataToQueue+0x12>
 8019068:	2000      	movs	r0, #0
 801906a:	e7cd      	b.n	8019008 <prvCopyDataToQueue+0x12>

0801906c <prvCopyDataFromQueue>:
{
 801906c:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801906e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8019070:	b16a      	cbz	r2, 801908e <prvCopyDataFromQueue+0x22>
{
 8019072:	b510      	push	{r4, lr}
 8019074:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8019076:	68d9      	ldr	r1, [r3, #12]
 8019078:	4411      	add	r1, r2
 801907a:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801907c:	689c      	ldr	r4, [r3, #8]
 801907e:	42a1      	cmp	r1, r4
 8019080:	d301      	bcc.n	8019086 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8019082:	6819      	ldr	r1, [r3, #0]
 8019084:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8019086:	68d9      	ldr	r1, [r3, #12]
 8019088:	f015 fa26 	bl	802e4d8 <memcpy>
}
 801908c:	bd10      	pop	{r4, pc}
 801908e:	4770      	bx	lr

08019090 <prvUnlockQueue>:
{
 8019090:	b538      	push	{r3, r4, r5, lr}
 8019092:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8019094:	f001 fdde 	bl	801ac54 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8019098:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 801909c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801909e:	e001      	b.n	80190a4 <prvUnlockQueue+0x14>
			--cTxLock;
 80190a0:	3c01      	subs	r4, #1
 80190a2:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80190a4:	2c00      	cmp	r4, #0
 80190a6:	dd0a      	ble.n	80190be <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80190a8:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80190aa:	b143      	cbz	r3, 80190be <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80190ac:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 80190b0:	f001 f99e 	bl	801a3f0 <xTaskRemoveFromEventList>
 80190b4:	2800      	cmp	r0, #0
 80190b6:	d0f3      	beq.n	80190a0 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 80190b8:	f001 fa2e 	bl	801a518 <vTaskMissedYield>
 80190bc:	e7f0      	b.n	80190a0 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 80190be:	23ff      	movs	r3, #255	@ 0xff
 80190c0:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 80190c4:	f001 fde8 	bl	801ac98 <vPortExitCritical>
	taskENTER_CRITICAL();
 80190c8:	f001 fdc4 	bl	801ac54 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80190cc:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 80190d0:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80190d2:	e001      	b.n	80190d8 <prvUnlockQueue+0x48>
				--cRxLock;
 80190d4:	3c01      	subs	r4, #1
 80190d6:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80190d8:	2c00      	cmp	r4, #0
 80190da:	dd0a      	ble.n	80190f2 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80190dc:	692b      	ldr	r3, [r5, #16]
 80190de:	b143      	cbz	r3, 80190f2 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80190e0:	f105 0010 	add.w	r0, r5, #16
 80190e4:	f001 f984 	bl	801a3f0 <xTaskRemoveFromEventList>
 80190e8:	2800      	cmp	r0, #0
 80190ea:	d0f3      	beq.n	80190d4 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 80190ec:	f001 fa14 	bl	801a518 <vTaskMissedYield>
 80190f0:	e7f0      	b.n	80190d4 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 80190f2:	23ff      	movs	r3, #255	@ 0xff
 80190f4:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 80190f8:	f001 fdce 	bl	801ac98 <vPortExitCritical>
}
 80190fc:	bd38      	pop	{r3, r4, r5, pc}

080190fe <xQueueGenericReset>:
{
 80190fe:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8019100:	b1e0      	cbz	r0, 801913c <xQueueGenericReset+0x3e>
 8019102:	460d      	mov	r5, r1
 8019104:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8019106:	f001 fda5 	bl	801ac54 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801910a:	6823      	ldr	r3, [r4, #0]
 801910c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 801910e:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8019110:	fb01 3002 	mla	r0, r1, r2, r3
 8019114:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8019116:	2000      	movs	r0, #0
 8019118:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801911a:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801911c:	3a01      	subs	r2, #1
 801911e:	fb02 3301 	mla	r3, r2, r1, r3
 8019122:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8019124:	23ff      	movs	r3, #255	@ 0xff
 8019126:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801912a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 801912e:	b9fd      	cbnz	r5, 8019170 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019130:	6923      	ldr	r3, [r4, #16]
 8019132:	b963      	cbnz	r3, 801914e <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8019134:	f001 fdb0 	bl	801ac98 <vPortExitCritical>
}
 8019138:	2001      	movs	r0, #1
 801913a:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801913c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019140:	f383 8811 	msr	BASEPRI, r3
 8019144:	f3bf 8f6f 	isb	sy
 8019148:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 801914c:	e7fe      	b.n	801914c <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801914e:	f104 0010 	add.w	r0, r4, #16
 8019152:	f001 f94d 	bl	801a3f0 <xTaskRemoveFromEventList>
 8019156:	2800      	cmp	r0, #0
 8019158:	d0ec      	beq.n	8019134 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 801915a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801915e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019162:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8019166:	f3bf 8f4f 	dsb	sy
 801916a:	f3bf 8f6f 	isb	sy
 801916e:	e7e1      	b.n	8019134 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8019170:	f104 0010 	add.w	r0, r4, #16
 8019174:	f7ff fed6 	bl	8018f24 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8019178:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 801917c:	f7ff fed2 	bl	8018f24 <vListInitialise>
 8019180:	e7d8      	b.n	8019134 <xQueueGenericReset+0x36>

08019182 <prvInitialiseNewQueue>:
{
 8019182:	b538      	push	{r3, r4, r5, lr}
 8019184:	461d      	mov	r5, r3
 8019186:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8019188:	460b      	mov	r3, r1
 801918a:	b949      	cbnz	r1, 80191a0 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801918c:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 801918e:	63e0      	str	r0, [r4, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8019190:	6423      	str	r3, [r4, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8019192:	2101      	movs	r1, #1
 8019194:	4620      	mov	r0, r4
 8019196:	f7ff ffb2 	bl	80190fe <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 801919a:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
}
 801919e:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80191a0:	6022      	str	r2, [r4, #0]
 80191a2:	e7f4      	b.n	801918e <prvInitialiseNewQueue+0xc>

080191a4 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80191a4:	b940      	cbnz	r0, 80191b8 <xQueueGenericCreateStatic+0x14>
 80191a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80191aa:	f383 8811 	msr	BASEPRI, r3
 80191ae:	f3bf 8f6f 	isb	sy
 80191b2:	f3bf 8f4f 	dsb	sy
 80191b6:	e7fe      	b.n	80191b6 <xQueueGenericCreateStatic+0x12>
	{
 80191b8:	b510      	push	{r4, lr}
 80191ba:	b084      	sub	sp, #16
 80191bc:	461c      	mov	r4, r3
 80191be:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 80191c0:	b153      	cbz	r3, 80191d8 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80191c2:	b192      	cbz	r2, 80191ea <xQueueGenericCreateStatic+0x46>
 80191c4:	b989      	cbnz	r1, 80191ea <xQueueGenericCreateStatic+0x46>
 80191c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80191ca:	f383 8811 	msr	BASEPRI, r3
 80191ce:	f3bf 8f6f 	isb	sy
 80191d2:	f3bf 8f4f 	dsb	sy
 80191d6:	e7fe      	b.n	80191d6 <xQueueGenericCreateStatic+0x32>
 80191d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80191dc:	f383 8811 	msr	BASEPRI, r3
 80191e0:	f3bf 8f6f 	isb	sy
 80191e4:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 80191e8:	e7fe      	b.n	80191e8 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80191ea:	b16a      	cbz	r2, 8019208 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80191ec:	2350      	movs	r3, #80	@ 0x50
 80191ee:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 80191f0:	9b03      	ldr	r3, [sp, #12]
 80191f2:	2b50      	cmp	r3, #80	@ 0x50
 80191f4:	d013      	beq.n	801921e <xQueueGenericCreateStatic+0x7a>
 80191f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80191fa:	f383 8811 	msr	BASEPRI, r3
 80191fe:	f3bf 8f6f 	isb	sy
 8019202:	f3bf 8f4f 	dsb	sy
 8019206:	e7fe      	b.n	8019206 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8019208:	2900      	cmp	r1, #0
 801920a:	d0ef      	beq.n	80191ec <xQueueGenericCreateStatic+0x48>
 801920c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019210:	f383 8811 	msr	BASEPRI, r3
 8019214:	f3bf 8f6f 	isb	sy
 8019218:	f3bf 8f4f 	dsb	sy
 801921c:	e7fe      	b.n	801921c <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801921e:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8019220:	2301      	movs	r3, #1
 8019222:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8019226:	9400      	str	r4, [sp, #0]
 8019228:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801922c:	4660      	mov	r0, ip
 801922e:	f7ff ffa8 	bl	8019182 <prvInitialiseNewQueue>
	}
 8019232:	4620      	mov	r0, r4
 8019234:	b004      	add	sp, #16
 8019236:	bd10      	pop	{r4, pc}

08019238 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8019238:	b940      	cbnz	r0, 801924c <xQueueGenericCreate+0x14>
 801923a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801923e:	f383 8811 	msr	BASEPRI, r3
 8019242:	f3bf 8f6f 	isb	sy
 8019246:	f3bf 8f4f 	dsb	sy
 801924a:	e7fe      	b.n	801924a <xQueueGenericCreate+0x12>
	{
 801924c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801924e:	b083      	sub	sp, #12
 8019250:	460d      	mov	r5, r1
 8019252:	4614      	mov	r4, r2
 8019254:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019256:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801925a:	3050      	adds	r0, #80	@ 0x50
 801925c:	f001 feb4 	bl	801afc8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8019260:	4607      	mov	r7, r0
 8019262:	b150      	cbz	r0, 801927a <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8019264:	2300      	movs	r3, #0
 8019266:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801926a:	9000      	str	r0, [sp, #0]
 801926c:	4623      	mov	r3, r4
 801926e:	f100 0250 	add.w	r2, r0, #80	@ 0x50
 8019272:	4629      	mov	r1, r5
 8019274:	4630      	mov	r0, r6
 8019276:	f7ff ff84 	bl	8019182 <prvInitialiseNewQueue>
	}
 801927a:	4638      	mov	r0, r7
 801927c:	b003      	add	sp, #12
 801927e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019280 <xQueueGenericSend>:
{
 8019280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019282:	b085      	sub	sp, #20
 8019284:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8019286:	b188      	cbz	r0, 80192ac <xQueueGenericSend+0x2c>
 8019288:	460f      	mov	r7, r1
 801928a:	461d      	mov	r5, r3
 801928c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801928e:	b1b1      	cbz	r1, 80192be <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8019290:	2d02      	cmp	r5, #2
 8019292:	d120      	bne.n	80192d6 <xQueueGenericSend+0x56>
 8019294:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8019296:	2b01      	cmp	r3, #1
 8019298:	d01d      	beq.n	80192d6 <xQueueGenericSend+0x56>
 801929a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801929e:	f383 8811 	msr	BASEPRI, r3
 80192a2:	f3bf 8f6f 	isb	sy
 80192a6:	f3bf 8f4f 	dsb	sy
 80192aa:	e7fe      	b.n	80192aa <xQueueGenericSend+0x2a>
 80192ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80192b0:	f383 8811 	msr	BASEPRI, r3
 80192b4:	f3bf 8f6f 	isb	sy
 80192b8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80192bc:	e7fe      	b.n	80192bc <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80192be:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80192c0:	2b00      	cmp	r3, #0
 80192c2:	d0e5      	beq.n	8019290 <xQueueGenericSend+0x10>
 80192c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80192c8:	f383 8811 	msr	BASEPRI, r3
 80192cc:	f3bf 8f6f 	isb	sy
 80192d0:	f3bf 8f4f 	dsb	sy
 80192d4:	e7fe      	b.n	80192d4 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80192d6:	f001 f92b 	bl	801a530 <xTaskGetSchedulerState>
 80192da:	4606      	mov	r6, r0
 80192dc:	b958      	cbnz	r0, 80192f6 <xQueueGenericSend+0x76>
 80192de:	9b01      	ldr	r3, [sp, #4]
 80192e0:	2b00      	cmp	r3, #0
 80192e2:	d048      	beq.n	8019376 <xQueueGenericSend+0xf6>
 80192e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80192e8:	f383 8811 	msr	BASEPRI, r3
 80192ec:	f3bf 8f6f 	isb	sy
 80192f0:	f3bf 8f4f 	dsb	sy
 80192f4:	e7fe      	b.n	80192f4 <xQueueGenericSend+0x74>
 80192f6:	2600      	movs	r6, #0
 80192f8:	e03d      	b.n	8019376 <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80192fa:	462a      	mov	r2, r5
 80192fc:	4639      	mov	r1, r7
 80192fe:	4620      	mov	r0, r4
 8019300:	f7ff fe79 	bl	8018ff6 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019304:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8019306:	b97b      	cbnz	r3, 8019328 <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 8019308:	b148      	cbz	r0, 801931e <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 801930a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801930e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019312:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8019316:	f3bf 8f4f 	dsb	sy
 801931a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 801931e:	f001 fcbb 	bl	801ac98 <vPortExitCritical>
				return pdPASS;
 8019322:	2001      	movs	r0, #1
}
 8019324:	b005      	add	sp, #20
 8019326:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019328:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 801932c:	f001 f860 	bl	801a3f0 <xTaskRemoveFromEventList>
 8019330:	2800      	cmp	r0, #0
 8019332:	d0f4      	beq.n	801931e <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 8019334:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019338:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801933c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8019340:	f3bf 8f4f 	dsb	sy
 8019344:	f3bf 8f6f 	isb	sy
 8019348:	e7e9      	b.n	801931e <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 801934a:	f001 fca5 	bl	801ac98 <vPortExitCritical>
					return errQUEUE_FULL;
 801934e:	2000      	movs	r0, #0
 8019350:	e7e8      	b.n	8019324 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8019352:	a802      	add	r0, sp, #8
 8019354:	f001 f892 	bl	801a47c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8019358:	2601      	movs	r6, #1
 801935a:	e019      	b.n	8019390 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 801935c:	2300      	movs	r3, #0
 801935e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8019362:	e021      	b.n	80193a8 <xQueueGenericSend+0x128>
 8019364:	2300      	movs	r3, #0
 8019366:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 801936a:	e023      	b.n	80193b4 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 801936c:	4620      	mov	r0, r4
 801936e:	f7ff fe8f 	bl	8019090 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019372:	f000 ff15 	bl	801a1a0 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8019376:	f001 fc6d 	bl	801ac54 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801937a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801937c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801937e:	429a      	cmp	r2, r3
 8019380:	d3bb      	bcc.n	80192fa <xQueueGenericSend+0x7a>
 8019382:	2d02      	cmp	r5, #2
 8019384:	d0b9      	beq.n	80192fa <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8019386:	9b01      	ldr	r3, [sp, #4]
 8019388:	2b00      	cmp	r3, #0
 801938a:	d0de      	beq.n	801934a <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 801938c:	2e00      	cmp	r6, #0
 801938e:	d0e0      	beq.n	8019352 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 8019390:	f001 fc82 	bl	801ac98 <vPortExitCritical>
		vTaskSuspendAll();
 8019394:	f000 fe6a 	bl	801a06c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8019398:	f001 fc5c 	bl	801ac54 <vPortEnterCritical>
 801939c:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 80193a0:	b252      	sxtb	r2, r2
 80193a2:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 80193a6:	d0d9      	beq.n	801935c <xQueueGenericSend+0xdc>
 80193a8:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 80193ac:	b252      	sxtb	r2, r2
 80193ae:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 80193b2:	d0d7      	beq.n	8019364 <xQueueGenericSend+0xe4>
 80193b4:	f001 fc70 	bl	801ac98 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80193b8:	a901      	add	r1, sp, #4
 80193ba:	a802      	add	r0, sp, #8
 80193bc:	f001 f86a 	bl	801a494 <xTaskCheckForTimeOut>
 80193c0:	b9d8      	cbnz	r0, 80193fa <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80193c2:	4620      	mov	r0, r4
 80193c4:	f7ff fdfb 	bl	8018fbe <prvIsQueueFull>
 80193c8:	2800      	cmp	r0, #0
 80193ca:	d0cf      	beq.n	801936c <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80193cc:	9901      	ldr	r1, [sp, #4]
 80193ce:	f104 0010 	add.w	r0, r4, #16
 80193d2:	f000 ffd9 	bl	801a388 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80193d6:	4620      	mov	r0, r4
 80193d8:	f7ff fe5a 	bl	8019090 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80193dc:	f000 fee0 	bl	801a1a0 <xTaskResumeAll>
 80193e0:	2800      	cmp	r0, #0
 80193e2:	d1c8      	bne.n	8019376 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 80193e4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80193e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80193ec:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80193f0:	f3bf 8f4f 	dsb	sy
 80193f4:	f3bf 8f6f 	isb	sy
 80193f8:	e7bd      	b.n	8019376 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 80193fa:	4620      	mov	r0, r4
 80193fc:	f7ff fe48 	bl	8019090 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8019400:	f000 fece 	bl	801a1a0 <xTaskResumeAll>
			return errQUEUE_FULL;
 8019404:	2000      	movs	r0, #0
 8019406:	e78d      	b.n	8019324 <xQueueGenericSend+0xa4>

08019408 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8019408:	b148      	cbz	r0, 801941e <prvInitialiseMutex+0x16>
	{
 801940a:	b508      	push	{r3, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801940c:	2100      	movs	r1, #0
 801940e:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8019410:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8019412:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8019414:	460b      	mov	r3, r1
 8019416:	460a      	mov	r2, r1
 8019418:	f7ff ff32 	bl	8019280 <xQueueGenericSend>
	}
 801941c:	bd08      	pop	{r3, pc}
 801941e:	4770      	bx	lr

08019420 <xQueueCreateMutex>:
	{
 8019420:	b510      	push	{r4, lr}
 8019422:	4602      	mov	r2, r0
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8019424:	2100      	movs	r1, #0
 8019426:	2001      	movs	r0, #1
 8019428:	f7ff ff06 	bl	8019238 <xQueueGenericCreate>
 801942c:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801942e:	f7ff ffeb 	bl	8019408 <prvInitialiseMutex>
	}
 8019432:	4620      	mov	r0, r4
 8019434:	bd10      	pop	{r4, pc}

08019436 <xQueueCreateMutexStatic>:
	{
 8019436:	b510      	push	{r4, lr}
 8019438:	b082      	sub	sp, #8
 801943a:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801943c:	9000      	str	r0, [sp, #0]
 801943e:	2200      	movs	r2, #0
 8019440:	4611      	mov	r1, r2
 8019442:	2001      	movs	r0, #1
 8019444:	f7ff feae 	bl	80191a4 <xQueueGenericCreateStatic>
 8019448:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801944a:	f7ff ffdd 	bl	8019408 <prvInitialiseMutex>
	}
 801944e:	4620      	mov	r0, r4
 8019450:	b002      	add	sp, #8
 8019452:	bd10      	pop	{r4, pc}

08019454 <xQueueGiveMutexRecursive>:
	{
 8019454:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8019456:	b138      	cbz	r0, 8019468 <xQueueGiveMutexRecursive+0x14>
 8019458:	4604      	mov	r4, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801945a:	6885      	ldr	r5, [r0, #8]
 801945c:	f001 f862 	bl	801a524 <xTaskGetCurrentTaskHandle>
 8019460:	4285      	cmp	r5, r0
 8019462:	d00a      	beq.n	801947a <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 8019464:	2000      	movs	r0, #0
	}
 8019466:	bd38      	pop	{r3, r4, r5, pc}
 8019468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801946c:	f383 8811 	msr	BASEPRI, r3
 8019470:	f3bf 8f6f 	isb	sy
 8019474:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8019478:	e7fe      	b.n	8019478 <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 801947a:	68e3      	ldr	r3, [r4, #12]
 801947c:	3b01      	subs	r3, #1
 801947e:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8019480:	b10b      	cbz	r3, 8019486 <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 8019482:	2001      	movs	r0, #1
		return xReturn;
 8019484:	e7ef      	b.n	8019466 <xQueueGiveMutexRecursive+0x12>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8019486:	461a      	mov	r2, r3
 8019488:	4619      	mov	r1, r3
 801948a:	4620      	mov	r0, r4
 801948c:	f7ff fef8 	bl	8019280 <xQueueGenericSend>
			xReturn = pdPASS;
 8019490:	2001      	movs	r0, #1
 8019492:	e7e8      	b.n	8019466 <xQueueGiveMutexRecursive+0x12>

08019494 <xQueueGenericSendFromISR>:
{
 8019494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8019498:	b190      	cbz	r0, 80194c0 <xQueueGenericSendFromISR+0x2c>
 801949a:	460f      	mov	r7, r1
 801949c:	4616      	mov	r6, r2
 801949e:	461c      	mov	r4, r3
 80194a0:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80194a2:	b1b1      	cbz	r1, 80194d2 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80194a4:	2c02      	cmp	r4, #2
 80194a6:	d120      	bne.n	80194ea <xQueueGenericSendFromISR+0x56>
 80194a8:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80194aa:	2b01      	cmp	r3, #1
 80194ac:	d01d      	beq.n	80194ea <xQueueGenericSendFromISR+0x56>
 80194ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80194b2:	f383 8811 	msr	BASEPRI, r3
 80194b6:	f3bf 8f6f 	isb	sy
 80194ba:	f3bf 8f4f 	dsb	sy
 80194be:	e7fe      	b.n	80194be <xQueueGenericSendFromISR+0x2a>
 80194c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80194c4:	f383 8811 	msr	BASEPRI, r3
 80194c8:	f3bf 8f6f 	isb	sy
 80194cc:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80194d0:	e7fe      	b.n	80194d0 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80194d2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80194d4:	2b00      	cmp	r3, #0
 80194d6:	d0e5      	beq.n	80194a4 <xQueueGenericSendFromISR+0x10>
 80194d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80194dc:	f383 8811 	msr	BASEPRI, r3
 80194e0:	f3bf 8f6f 	isb	sy
 80194e4:	f3bf 8f4f 	dsb	sy
 80194e8:	e7fe      	b.n	80194e8 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80194ea:	f001 fcd9 	bl	801aea0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80194ee:	f3ef 8811 	mrs	r8, BASEPRI
 80194f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80194f6:	f383 8811 	msr	BASEPRI, r3
 80194fa:	f3bf 8f6f 	isb	sy
 80194fe:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8019502:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8019504:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8019506:	429a      	cmp	r2, r3
 8019508:	d306      	bcc.n	8019518 <xQueueGenericSendFromISR+0x84>
 801950a:	2c02      	cmp	r4, #2
 801950c:	d004      	beq.n	8019518 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 801950e:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8019510:	f388 8811 	msr	BASEPRI, r8
}
 8019514:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8019518:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 801951c:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019520:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8019522:	4622      	mov	r2, r4
 8019524:	4639      	mov	r1, r7
 8019526:	4628      	mov	r0, r5
 8019528:	f7ff fd65 	bl	8018ff6 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 801952c:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8019530:	d006      	beq.n	8019540 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8019532:	f109 0301 	add.w	r3, r9, #1
 8019536:	b25b      	sxtb	r3, r3
 8019538:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 801953c:	2001      	movs	r0, #1
 801953e:	e7e7      	b.n	8019510 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019540:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8019542:	b90b      	cbnz	r3, 8019548 <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 8019544:	2001      	movs	r0, #1
 8019546:	e7e3      	b.n	8019510 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019548:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 801954c:	f000 ff50 	bl	801a3f0 <xTaskRemoveFromEventList>
 8019550:	b118      	cbz	r0, 801955a <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 8019552:	b126      	cbz	r6, 801955e <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8019554:	2001      	movs	r0, #1
 8019556:	6030      	str	r0, [r6, #0]
 8019558:	e7da      	b.n	8019510 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 801955a:	2001      	movs	r0, #1
 801955c:	e7d8      	b.n	8019510 <xQueueGenericSendFromISR+0x7c>
 801955e:	2001      	movs	r0, #1
 8019560:	e7d6      	b.n	8019510 <xQueueGenericSendFromISR+0x7c>

08019562 <xQueueReceive>:
{
 8019562:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019564:	b085      	sub	sp, #20
 8019566:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8019568:	b190      	cbz	r0, 8019590 <xQueueReceive+0x2e>
 801956a:	460f      	mov	r7, r1
 801956c:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801956e:	b1c1      	cbz	r1, 80195a2 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019570:	f000 ffde 	bl	801a530 <xTaskGetSchedulerState>
 8019574:	4606      	mov	r6, r0
 8019576:	bb00      	cbnz	r0, 80195ba <xQueueReceive+0x58>
 8019578:	9b01      	ldr	r3, [sp, #4]
 801957a:	2b00      	cmp	r3, #0
 801957c:	d05e      	beq.n	801963c <xQueueReceive+0xda>
	__asm volatile
 801957e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019582:	f383 8811 	msr	BASEPRI, r3
 8019586:	f3bf 8f6f 	isb	sy
 801958a:	f3bf 8f4f 	dsb	sy
 801958e:	e7fe      	b.n	801958e <xQueueReceive+0x2c>
 8019590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019594:	f383 8811 	msr	BASEPRI, r3
 8019598:	f3bf 8f6f 	isb	sy
 801959c:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80195a0:	e7fe      	b.n	80195a0 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80195a2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80195a4:	2b00      	cmp	r3, #0
 80195a6:	d0e3      	beq.n	8019570 <xQueueReceive+0xe>
 80195a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80195ac:	f383 8811 	msr	BASEPRI, r3
 80195b0:	f3bf 8f6f 	isb	sy
 80195b4:	f3bf 8f4f 	dsb	sy
 80195b8:	e7fe      	b.n	80195b8 <xQueueReceive+0x56>
 80195ba:	2600      	movs	r6, #0
 80195bc:	e03e      	b.n	801963c <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80195be:	4639      	mov	r1, r7
 80195c0:	4620      	mov	r0, r4
 80195c2:	f7ff fd53 	bl	801906c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80195c6:	3d01      	subs	r5, #1
 80195c8:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80195ca:	6923      	ldr	r3, [r4, #16]
 80195cc:	b923      	cbnz	r3, 80195d8 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 80195ce:	f001 fb63 	bl	801ac98 <vPortExitCritical>
				return pdPASS;
 80195d2:	2001      	movs	r0, #1
}
 80195d4:	b005      	add	sp, #20
 80195d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80195d8:	f104 0010 	add.w	r0, r4, #16
 80195dc:	f000 ff08 	bl	801a3f0 <xTaskRemoveFromEventList>
 80195e0:	2800      	cmp	r0, #0
 80195e2:	d0f4      	beq.n	80195ce <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 80195e4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80195e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80195ec:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80195f0:	f3bf 8f4f 	dsb	sy
 80195f4:	f3bf 8f6f 	isb	sy
 80195f8:	e7e9      	b.n	80195ce <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 80195fa:	f001 fb4d 	bl	801ac98 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80195fe:	2000      	movs	r0, #0
 8019600:	e7e8      	b.n	80195d4 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8019602:	a802      	add	r0, sp, #8
 8019604:	f000 ff3a 	bl	801a47c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8019608:	2601      	movs	r6, #1
 801960a:	e021      	b.n	8019650 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 801960c:	2300      	movs	r3, #0
 801960e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8019612:	e029      	b.n	8019668 <xQueueReceive+0x106>
 8019614:	2300      	movs	r3, #0
 8019616:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 801961a:	e02b      	b.n	8019674 <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 801961c:	4620      	mov	r0, r4
 801961e:	f7ff fd37 	bl	8019090 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019622:	f000 fdbd 	bl	801a1a0 <xTaskResumeAll>
 8019626:	e009      	b.n	801963c <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 8019628:	4620      	mov	r0, r4
 801962a:	f7ff fd31 	bl	8019090 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801962e:	f000 fdb7 	bl	801a1a0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019632:	4620      	mov	r0, r4
 8019634:	f7ff fcd2 	bl	8018fdc <prvIsQueueEmpty>
 8019638:	2800      	cmp	r0, #0
 801963a:	d13f      	bne.n	80196bc <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 801963c:	f001 fb0a 	bl	801ac54 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019640:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8019642:	2d00      	cmp	r5, #0
 8019644:	d1bb      	bne.n	80195be <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8019646:	9b01      	ldr	r3, [sp, #4]
 8019648:	2b00      	cmp	r3, #0
 801964a:	d0d6      	beq.n	80195fa <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 801964c:	2e00      	cmp	r6, #0
 801964e:	d0d8      	beq.n	8019602 <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 8019650:	f001 fb22 	bl	801ac98 <vPortExitCritical>
		vTaskSuspendAll();
 8019654:	f000 fd0a 	bl	801a06c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8019658:	f001 fafc 	bl	801ac54 <vPortEnterCritical>
 801965c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8019660:	b25b      	sxtb	r3, r3
 8019662:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019666:	d0d1      	beq.n	801960c <xQueueReceive+0xaa>
 8019668:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801966c:	b25b      	sxtb	r3, r3
 801966e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019672:	d0cf      	beq.n	8019614 <xQueueReceive+0xb2>
 8019674:	f001 fb10 	bl	801ac98 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019678:	a901      	add	r1, sp, #4
 801967a:	a802      	add	r0, sp, #8
 801967c:	f000 ff0a 	bl	801a494 <xTaskCheckForTimeOut>
 8019680:	2800      	cmp	r0, #0
 8019682:	d1d1      	bne.n	8019628 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019684:	4620      	mov	r0, r4
 8019686:	f7ff fca9 	bl	8018fdc <prvIsQueueEmpty>
 801968a:	2800      	cmp	r0, #0
 801968c:	d0c6      	beq.n	801961c <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801968e:	9901      	ldr	r1, [sp, #4]
 8019690:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8019694:	f000 fe78 	bl	801a388 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8019698:	4620      	mov	r0, r4
 801969a:	f7ff fcf9 	bl	8019090 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801969e:	f000 fd7f 	bl	801a1a0 <xTaskResumeAll>
 80196a2:	2800      	cmp	r0, #0
 80196a4:	d1ca      	bne.n	801963c <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 80196a6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80196aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80196ae:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80196b2:	f3bf 8f4f 	dsb	sy
 80196b6:	f3bf 8f6f 	isb	sy
 80196ba:	e7bf      	b.n	801963c <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 80196bc:	2000      	movs	r0, #0
 80196be:	e789      	b.n	80195d4 <xQueueReceive+0x72>

080196c0 <xQueueSemaphoreTake>:
{
 80196c0:	b570      	push	{r4, r5, r6, lr}
 80196c2:	b084      	sub	sp, #16
 80196c4:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80196c6:	b158      	cbz	r0, 80196e0 <xQueueSemaphoreTake+0x20>
 80196c8:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 80196ca:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80196cc:	b18b      	cbz	r3, 80196f2 <xQueueSemaphoreTake+0x32>
 80196ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80196d2:	f383 8811 	msr	BASEPRI, r3
 80196d6:	f3bf 8f6f 	isb	sy
 80196da:	f3bf 8f4f 	dsb	sy
 80196de:	e7fe      	b.n	80196de <xQueueSemaphoreTake+0x1e>
 80196e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80196e4:	f383 8811 	msr	BASEPRI, r3
 80196e8:	f3bf 8f6f 	isb	sy
 80196ec:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80196f0:	e7fe      	b.n	80196f0 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80196f2:	f000 ff1d 	bl	801a530 <xTaskGetSchedulerState>
 80196f6:	4605      	mov	r5, r0
 80196f8:	b950      	cbnz	r0, 8019710 <xQueueSemaphoreTake+0x50>
 80196fa:	9b01      	ldr	r3, [sp, #4]
 80196fc:	b15b      	cbz	r3, 8019716 <xQueueSemaphoreTake+0x56>
 80196fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019702:	f383 8811 	msr	BASEPRI, r3
 8019706:	f3bf 8f6f 	isb	sy
 801970a:	f3bf 8f4f 	dsb	sy
 801970e:	e7fe      	b.n	801970e <xQueueSemaphoreTake+0x4e>
 8019710:	2600      	movs	r6, #0
 8019712:	4635      	mov	r5, r6
 8019714:	e055      	b.n	80197c2 <xQueueSemaphoreTake+0x102>
 8019716:	4606      	mov	r6, r0
 8019718:	e053      	b.n	80197c2 <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801971a:	3b01      	subs	r3, #1
 801971c:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801971e:	6823      	ldr	r3, [r4, #0]
 8019720:	b13b      	cbz	r3, 8019732 <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019722:	6923      	ldr	r3, [r4, #16]
 8019724:	b94b      	cbnz	r3, 801973a <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 8019726:	f001 fab7 	bl	801ac98 <vPortExitCritical>
				return pdPASS;
 801972a:	2601      	movs	r6, #1
}
 801972c:	4630      	mov	r0, r6
 801972e:	b004      	add	sp, #16
 8019730:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8019732:	f000 fff1 	bl	801a718 <pvTaskIncrementMutexHeldCount>
 8019736:	60a0      	str	r0, [r4, #8]
 8019738:	e7f3      	b.n	8019722 <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801973a:	f104 0010 	add.w	r0, r4, #16
 801973e:	f000 fe57 	bl	801a3f0 <xTaskRemoveFromEventList>
 8019742:	2800      	cmp	r0, #0
 8019744:	d0ef      	beq.n	8019726 <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 8019746:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801974a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801974e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8019752:	f3bf 8f4f 	dsb	sy
 8019756:	f3bf 8f6f 	isb	sy
 801975a:	e7e4      	b.n	8019726 <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 801975c:	b146      	cbz	r6, 8019770 <xQueueSemaphoreTake+0xb0>
 801975e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019762:	f383 8811 	msr	BASEPRI, r3
 8019766:	f3bf 8f6f 	isb	sy
 801976a:	f3bf 8f4f 	dsb	sy
 801976e:	e7fe      	b.n	801976e <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 8019770:	f001 fa92 	bl	801ac98 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8019774:	e7da      	b.n	801972c <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8019776:	a802      	add	r0, sp, #8
 8019778:	f000 fe80 	bl	801a47c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801977c:	2501      	movs	r5, #1
 801977e:	e02a      	b.n	80197d6 <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 8019780:	2300      	movs	r3, #0
 8019782:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8019786:	e032      	b.n	80197ee <xQueueSemaphoreTake+0x12e>
 8019788:	2300      	movs	r3, #0
 801978a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 801978e:	e034      	b.n	80197fa <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 8019790:	f001 fa60 	bl	801ac54 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8019794:	68a0      	ldr	r0, [r4, #8]
 8019796:	f000 fedb 	bl	801a550 <xTaskPriorityInherit>
 801979a:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 801979c:	f001 fa7c 	bl	801ac98 <vPortExitCritical>
 80197a0:	e03b      	b.n	801981a <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 80197a2:	4620      	mov	r0, r4
 80197a4:	f7ff fc74 	bl	8019090 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80197a8:	f000 fcfa 	bl	801a1a0 <xTaskResumeAll>
 80197ac:	e009      	b.n	80197c2 <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 80197ae:	4620      	mov	r0, r4
 80197b0:	f7ff fc6e 	bl	8019090 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80197b4:	f000 fcf4 	bl	801a1a0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80197b8:	4620      	mov	r0, r4
 80197ba:	f7ff fc0f 	bl	8018fdc <prvIsQueueEmpty>
 80197be:	2800      	cmp	r0, #0
 80197c0:	d142      	bne.n	8019848 <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 80197c2:	f001 fa47 	bl	801ac54 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80197c6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80197c8:	2b00      	cmp	r3, #0
 80197ca:	d1a6      	bne.n	801971a <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80197cc:	9b01      	ldr	r3, [sp, #4]
 80197ce:	2b00      	cmp	r3, #0
 80197d0:	d0c4      	beq.n	801975c <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 80197d2:	2d00      	cmp	r5, #0
 80197d4:	d0cf      	beq.n	8019776 <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 80197d6:	f001 fa5f 	bl	801ac98 <vPortExitCritical>
		vTaskSuspendAll();
 80197da:	f000 fc47 	bl	801a06c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80197de:	f001 fa39 	bl	801ac54 <vPortEnterCritical>
 80197e2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80197e6:	b25b      	sxtb	r3, r3
 80197e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80197ec:	d0c8      	beq.n	8019780 <xQueueSemaphoreTake+0xc0>
 80197ee:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80197f2:	b25b      	sxtb	r3, r3
 80197f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80197f8:	d0c6      	beq.n	8019788 <xQueueSemaphoreTake+0xc8>
 80197fa:	f001 fa4d 	bl	801ac98 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80197fe:	a901      	add	r1, sp, #4
 8019800:	a802      	add	r0, sp, #8
 8019802:	f000 fe47 	bl	801a494 <xTaskCheckForTimeOut>
 8019806:	2800      	cmp	r0, #0
 8019808:	d1d1      	bne.n	80197ae <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801980a:	4620      	mov	r0, r4
 801980c:	f7ff fbe6 	bl	8018fdc <prvIsQueueEmpty>
 8019810:	2800      	cmp	r0, #0
 8019812:	d0c6      	beq.n	80197a2 <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8019814:	6823      	ldr	r3, [r4, #0]
 8019816:	2b00      	cmp	r3, #0
 8019818:	d0ba      	beq.n	8019790 <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801981a:	9901      	ldr	r1, [sp, #4]
 801981c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8019820:	f000 fdb2 	bl	801a388 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8019824:	4620      	mov	r0, r4
 8019826:	f7ff fc33 	bl	8019090 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801982a:	f000 fcb9 	bl	801a1a0 <xTaskResumeAll>
 801982e:	2800      	cmp	r0, #0
 8019830:	d1c7      	bne.n	80197c2 <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 8019832:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019836:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801983a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801983e:	f3bf 8f4f 	dsb	sy
 8019842:	f3bf 8f6f 	isb	sy
 8019846:	e7bc      	b.n	80197c2 <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 8019848:	b90e      	cbnz	r6, 801984e <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 801984a:	2600      	movs	r6, #0
 801984c:	e76e      	b.n	801972c <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 801984e:	f001 fa01 	bl	801ac54 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8019852:	4620      	mov	r0, r4
 8019854:	f7ff fbab 	bl	8018fae <prvGetDisinheritPriorityAfterTimeout>
 8019858:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801985a:	68a0      	ldr	r0, [r4, #8]
 801985c:	f000 ff0c 	bl	801a678 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8019860:	f001 fa1a 	bl	801ac98 <vPortExitCritical>
 8019864:	e7f1      	b.n	801984a <xQueueSemaphoreTake+0x18a>

08019866 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 8019866:	b180      	cbz	r0, 801988a <xQueueTakeMutexRecursive+0x24>
	{
 8019868:	b570      	push	{r4, r5, r6, lr}
 801986a:	460c      	mov	r4, r1
 801986c:	4605      	mov	r5, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801986e:	6886      	ldr	r6, [r0, #8]
 8019870:	f000 fe58 	bl	801a524 <xTaskGetCurrentTaskHandle>
 8019874:	4286      	cmp	r6, r0
 8019876:	d011      	beq.n	801989c <xQueueTakeMutexRecursive+0x36>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8019878:	4621      	mov	r1, r4
 801987a:	4628      	mov	r0, r5
 801987c:	f7ff ff20 	bl	80196c0 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8019880:	b180      	cbz	r0, 80198a4 <xQueueTakeMutexRecursive+0x3e>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8019882:	68eb      	ldr	r3, [r5, #12]
 8019884:	3301      	adds	r3, #1
 8019886:	60eb      	str	r3, [r5, #12]
		return xReturn;
 8019888:	e00c      	b.n	80198a4 <xQueueTakeMutexRecursive+0x3e>
 801988a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801988e:	f383 8811 	msr	BASEPRI, r3
 8019892:	f3bf 8f6f 	isb	sy
 8019896:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 801989a:	e7fe      	b.n	801989a <xQueueTakeMutexRecursive+0x34>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801989c:	68eb      	ldr	r3, [r5, #12]
 801989e:	3301      	adds	r3, #1
 80198a0:	60eb      	str	r3, [r5, #12]
			xReturn = pdPASS;
 80198a2:	2001      	movs	r0, #1
	}
 80198a4:	bd70      	pop	{r4, r5, r6, pc}

080198a6 <xQueuePeek>:
{
 80198a6:	b570      	push	{r4, r5, r6, lr}
 80198a8:	b084      	sub	sp, #16
 80198aa:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80198ac:	b190      	cbz	r0, 80198d4 <xQueuePeek+0x2e>
 80198ae:	460e      	mov	r6, r1
 80198b0:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80198b2:	b1c1      	cbz	r1, 80198e6 <xQueuePeek+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80198b4:	f000 fe3c 	bl	801a530 <xTaskGetSchedulerState>
 80198b8:	4605      	mov	r5, r0
 80198ba:	bb00      	cbnz	r0, 80198fe <xQueuePeek+0x58>
 80198bc:	9b01      	ldr	r3, [sp, #4]
 80198be:	2b00      	cmp	r3, #0
 80198c0:	d05e      	beq.n	8019980 <xQueuePeek+0xda>
 80198c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80198c6:	f383 8811 	msr	BASEPRI, r3
 80198ca:	f3bf 8f6f 	isb	sy
 80198ce:	f3bf 8f4f 	dsb	sy
 80198d2:	e7fe      	b.n	80198d2 <xQueuePeek+0x2c>
 80198d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80198d8:	f383 8811 	msr	BASEPRI, r3
 80198dc:	f3bf 8f6f 	isb	sy
 80198e0:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80198e4:	e7fe      	b.n	80198e4 <xQueuePeek+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80198e6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80198e8:	2b00      	cmp	r3, #0
 80198ea:	d0e3      	beq.n	80198b4 <xQueuePeek+0xe>
 80198ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80198f0:	f383 8811 	msr	BASEPRI, r3
 80198f4:	f3bf 8f6f 	isb	sy
 80198f8:	f3bf 8f4f 	dsb	sy
 80198fc:	e7fe      	b.n	80198fc <xQueuePeek+0x56>
 80198fe:	2500      	movs	r5, #0
 8019900:	e03e      	b.n	8019980 <xQueuePeek+0xda>
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8019902:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8019904:	4631      	mov	r1, r6
 8019906:	4620      	mov	r0, r4
 8019908:	f7ff fbb0 	bl	801906c <prvCopyDataFromQueue>
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 801990c:	60e5      	str	r5, [r4, #12]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801990e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8019910:	b923      	cbnz	r3, 801991c <xQueuePeek+0x76>
				taskEXIT_CRITICAL();
 8019912:	f001 f9c1 	bl	801ac98 <vPortExitCritical>
				return pdPASS;
 8019916:	2001      	movs	r0, #1
}
 8019918:	b004      	add	sp, #16
 801991a:	bd70      	pop	{r4, r5, r6, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801991c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8019920:	f000 fd66 	bl	801a3f0 <xTaskRemoveFromEventList>
 8019924:	2800      	cmp	r0, #0
 8019926:	d0f4      	beq.n	8019912 <xQueuePeek+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 8019928:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801992c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019930:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8019934:	f3bf 8f4f 	dsb	sy
 8019938:	f3bf 8f6f 	isb	sy
 801993c:	e7e9      	b.n	8019912 <xQueuePeek+0x6c>
					taskEXIT_CRITICAL();
 801993e:	f001 f9ab 	bl	801ac98 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8019942:	2000      	movs	r0, #0
 8019944:	e7e8      	b.n	8019918 <xQueuePeek+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8019946:	a802      	add	r0, sp, #8
 8019948:	f000 fd98 	bl	801a47c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801994c:	2501      	movs	r5, #1
 801994e:	e021      	b.n	8019994 <xQueuePeek+0xee>
		prvLockQueue( pxQueue );
 8019950:	2300      	movs	r3, #0
 8019952:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8019956:	e029      	b.n	80199ac <xQueuePeek+0x106>
 8019958:	2300      	movs	r3, #0
 801995a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 801995e:	e02b      	b.n	80199b8 <xQueuePeek+0x112>
				prvUnlockQueue( pxQueue );
 8019960:	4620      	mov	r0, r4
 8019962:	f7ff fb95 	bl	8019090 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019966:	f000 fc1b 	bl	801a1a0 <xTaskResumeAll>
 801996a:	e009      	b.n	8019980 <xQueuePeek+0xda>
			prvUnlockQueue( pxQueue );
 801996c:	4620      	mov	r0, r4
 801996e:	f7ff fb8f 	bl	8019090 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8019972:	f000 fc15 	bl	801a1a0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019976:	4620      	mov	r0, r4
 8019978:	f7ff fb30 	bl	8018fdc <prvIsQueueEmpty>
 801997c:	2800      	cmp	r0, #0
 801997e:	d13f      	bne.n	8019a00 <xQueuePeek+0x15a>
		taskENTER_CRITICAL();
 8019980:	f001 f968 	bl	801ac54 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019984:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8019986:	2b00      	cmp	r3, #0
 8019988:	d1bb      	bne.n	8019902 <xQueuePeek+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 801998a:	9b01      	ldr	r3, [sp, #4]
 801998c:	2b00      	cmp	r3, #0
 801998e:	d0d6      	beq.n	801993e <xQueuePeek+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8019990:	2d00      	cmp	r5, #0
 8019992:	d0d8      	beq.n	8019946 <xQueuePeek+0xa0>
		taskEXIT_CRITICAL();
 8019994:	f001 f980 	bl	801ac98 <vPortExitCritical>
		vTaskSuspendAll();
 8019998:	f000 fb68 	bl	801a06c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801999c:	f001 f95a 	bl	801ac54 <vPortEnterCritical>
 80199a0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80199a4:	b25b      	sxtb	r3, r3
 80199a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80199aa:	d0d1      	beq.n	8019950 <xQueuePeek+0xaa>
 80199ac:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80199b0:	b25b      	sxtb	r3, r3
 80199b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80199b6:	d0cf      	beq.n	8019958 <xQueuePeek+0xb2>
 80199b8:	f001 f96e 	bl	801ac98 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80199bc:	a901      	add	r1, sp, #4
 80199be:	a802      	add	r0, sp, #8
 80199c0:	f000 fd68 	bl	801a494 <xTaskCheckForTimeOut>
 80199c4:	2800      	cmp	r0, #0
 80199c6:	d1d1      	bne.n	801996c <xQueuePeek+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80199c8:	4620      	mov	r0, r4
 80199ca:	f7ff fb07 	bl	8018fdc <prvIsQueueEmpty>
 80199ce:	2800      	cmp	r0, #0
 80199d0:	d0c6      	beq.n	8019960 <xQueuePeek+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80199d2:	9901      	ldr	r1, [sp, #4]
 80199d4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80199d8:	f000 fcd6 	bl	801a388 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80199dc:	4620      	mov	r0, r4
 80199de:	f7ff fb57 	bl	8019090 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80199e2:	f000 fbdd 	bl	801a1a0 <xTaskResumeAll>
 80199e6:	2800      	cmp	r0, #0
 80199e8:	d1ca      	bne.n	8019980 <xQueuePeek+0xda>
					portYIELD_WITHIN_API();
 80199ea:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80199ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80199f2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80199f6:	f3bf 8f4f 	dsb	sy
 80199fa:	f3bf 8f6f 	isb	sy
 80199fe:	e7bf      	b.n	8019980 <xQueuePeek+0xda>
				return errQUEUE_EMPTY;
 8019a00:	2000      	movs	r0, #0
 8019a02:	e789      	b.n	8019918 <xQueuePeek+0x72>

08019a04 <xQueueReceiveFromISR>:
{
 8019a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8019a08:	b1b0      	cbz	r0, 8019a38 <xQueueReceiveFromISR+0x34>
 8019a0a:	460d      	mov	r5, r1
 8019a0c:	4690      	mov	r8, r2
 8019a0e:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019a10:	b1d9      	cbz	r1, 8019a4a <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8019a12:	f001 fa45 	bl	801aea0 <vPortValidateInterruptPriority>
	__asm volatile
 8019a16:	f3ef 8711 	mrs	r7, BASEPRI
 8019a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019a1e:	f383 8811 	msr	BASEPRI, r3
 8019a22:	f3bf 8f6f 	isb	sy
 8019a26:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019a2a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8019a2c:	b9ce      	cbnz	r6, 8019a62 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 8019a2e:	2000      	movs	r0, #0
	__asm volatile
 8019a30:	f387 8811 	msr	BASEPRI, r7
}
 8019a34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 8019a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019a3c:	f383 8811 	msr	BASEPRI, r3
 8019a40:	f3bf 8f6f 	isb	sy
 8019a44:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8019a48:	e7fe      	b.n	8019a48 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019a4a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8019a4c:	2b00      	cmp	r3, #0
 8019a4e:	d0e0      	beq.n	8019a12 <xQueueReceiveFromISR+0xe>
 8019a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019a54:	f383 8811 	msr	BASEPRI, r3
 8019a58:	f3bf 8f6f 	isb	sy
 8019a5c:	f3bf 8f4f 	dsb	sy
 8019a60:	e7fe      	b.n	8019a60 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8019a62:	f894 9044 	ldrb.w	r9, [r4, #68]	@ 0x44
 8019a66:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8019a6a:	4629      	mov	r1, r5
 8019a6c:	4620      	mov	r0, r4
 8019a6e:	f7ff fafd 	bl	801906c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8019a72:	1e73      	subs	r3, r6, #1
 8019a74:	63a3      	str	r3, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8019a76:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8019a7a:	d006      	beq.n	8019a8a <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8019a7c:	f109 0301 	add.w	r3, r9, #1
 8019a80:	b25b      	sxtb	r3, r3
 8019a82:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 8019a86:	2001      	movs	r0, #1
 8019a88:	e7d2      	b.n	8019a30 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019a8a:	6923      	ldr	r3, [r4, #16]
 8019a8c:	b90b      	cbnz	r3, 8019a92 <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 8019a8e:	2001      	movs	r0, #1
 8019a90:	e7ce      	b.n	8019a30 <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019a92:	f104 0010 	add.w	r0, r4, #16
 8019a96:	f000 fcab 	bl	801a3f0 <xTaskRemoveFromEventList>
 8019a9a:	b130      	cbz	r0, 8019aaa <xQueueReceiveFromISR+0xa6>
						if( pxHigherPriorityTaskWoken != NULL )
 8019a9c:	f1b8 0f00 	cmp.w	r8, #0
 8019aa0:	d005      	beq.n	8019aae <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8019aa2:	2001      	movs	r0, #1
 8019aa4:	f8c8 0000 	str.w	r0, [r8]
 8019aa8:	e7c2      	b.n	8019a30 <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 8019aaa:	2001      	movs	r0, #1
 8019aac:	e7c0      	b.n	8019a30 <xQueueReceiveFromISR+0x2c>
 8019aae:	2001      	movs	r0, #1
 8019ab0:	e7be      	b.n	8019a30 <xQueueReceiveFromISR+0x2c>

08019ab2 <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 8019ab2:	b140      	cbz	r0, 8019ac6 <uxQueueMessagesWaiting+0x14>
{
 8019ab4:	b510      	push	{r4, lr}
 8019ab6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8019ab8:	f001 f8cc 	bl	801ac54 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8019abc:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
	taskEXIT_CRITICAL();
 8019abe:	f001 f8eb 	bl	801ac98 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8019ac2:	4620      	mov	r0, r4
 8019ac4:	bd10      	pop	{r4, pc}
 8019ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019aca:	f383 8811 	msr	BASEPRI, r3
 8019ace:	f3bf 8f6f 	isb	sy
 8019ad2:	f3bf 8f4f 	dsb	sy
	configASSERT( xQueue );
 8019ad6:	e7fe      	b.n	8019ad6 <uxQueueMessagesWaiting+0x24>

08019ad8 <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 8019ad8:	b108      	cbz	r0, 8019ade <uxQueueMessagesWaitingFromISR+0x6>
	uxReturn = pxQueue->uxMessagesWaiting;
 8019ada:	6b80      	ldr	r0, [r0, #56]	@ 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8019adc:	4770      	bx	lr
 8019ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019ae2:	f383 8811 	msr	BASEPRI, r3
 8019ae6:	f3bf 8f6f 	isb	sy
 8019aea:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8019aee:	e7fe      	b.n	8019aee <uxQueueMessagesWaitingFromISR+0x16>

08019af0 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8019af0:	2300      	movs	r3, #0
 8019af2:	2b07      	cmp	r3, #7
 8019af4:	d80c      	bhi.n	8019b10 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8019af6:	4a07      	ldr	r2, [pc, #28]	@ (8019b14 <vQueueAddToRegistry+0x24>)
 8019af8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8019afc:	b10a      	cbz	r2, 8019b02 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8019afe:	3301      	adds	r3, #1
 8019b00:	e7f7      	b.n	8019af2 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8019b02:	4a04      	ldr	r2, [pc, #16]	@ (8019b14 <vQueueAddToRegistry+0x24>)
 8019b04:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8019b08:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8019b0c:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8019b0e:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8019b10:	4770      	bx	lr
 8019b12:	bf00      	nop
 8019b14:	200036bc 	.word	0x200036bc

08019b18 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8019b18:	b570      	push	{r4, r5, r6, lr}
 8019b1a:	4604      	mov	r4, r0
 8019b1c:	460d      	mov	r5, r1
 8019b1e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8019b20:	f001 f898 	bl	801ac54 <vPortEnterCritical>
 8019b24:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8019b28:	b25b      	sxtb	r3, r3
 8019b2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019b2e:	d00d      	beq.n	8019b4c <vQueueWaitForMessageRestricted+0x34>
 8019b30:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8019b34:	b25b      	sxtb	r3, r3
 8019b36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019b3a:	d00b      	beq.n	8019b54 <vQueueWaitForMessageRestricted+0x3c>
 8019b3c:	f001 f8ac 	bl	801ac98 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8019b40:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8019b42:	b15b      	cbz	r3, 8019b5c <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8019b44:	4620      	mov	r0, r4
 8019b46:	f7ff faa3 	bl	8019090 <prvUnlockQueue>
	}
 8019b4a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8019b4c:	2300      	movs	r3, #0
 8019b4e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8019b52:	e7ed      	b.n	8019b30 <vQueueWaitForMessageRestricted+0x18>
 8019b54:	2300      	movs	r3, #0
 8019b56:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8019b5a:	e7ef      	b.n	8019b3c <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8019b5c:	4632      	mov	r2, r6
 8019b5e:	4629      	mov	r1, r5
 8019b60:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8019b64:	f000 fc28 	bl	801a3b8 <vTaskPlaceOnEventListRestricted>
 8019b68:	e7ec      	b.n	8019b44 <vQueueWaitForMessageRestricted+0x2c>
	...

08019b6c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019b6c:	4b08      	ldr	r3, [pc, #32]	@ (8019b90 <prvResetNextTaskUnblockTime+0x24>)
 8019b6e:	681b      	ldr	r3, [r3, #0]
 8019b70:	681b      	ldr	r3, [r3, #0]
 8019b72:	b923      	cbnz	r3, 8019b7e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8019b74:	4b07      	ldr	r3, [pc, #28]	@ (8019b94 <prvResetNextTaskUnblockTime+0x28>)
 8019b76:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019b7a:	601a      	str	r2, [r3, #0]
 8019b7c:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019b7e:	4b04      	ldr	r3, [pc, #16]	@ (8019b90 <prvResetNextTaskUnblockTime+0x24>)
 8019b80:	681b      	ldr	r3, [r3, #0]
 8019b82:	68db      	ldr	r3, [r3, #12]
 8019b84:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8019b86:	685a      	ldr	r2, [r3, #4]
 8019b88:	4b02      	ldr	r3, [pc, #8]	@ (8019b94 <prvResetNextTaskUnblockTime+0x28>)
 8019b8a:	601a      	str	r2, [r3, #0]
	}
}
 8019b8c:	4770      	bx	lr
 8019b8e:	bf00      	nop
 8019b90:	2000376c 	.word	0x2000376c
 8019b94:	20003704 	.word	0x20003704

08019b98 <prvInitialiseNewTask>:
{
 8019b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019b9c:	4680      	mov	r8, r0
 8019b9e:	460d      	mov	r5, r1
 8019ba0:	4617      	mov	r7, r2
 8019ba2:	4699      	mov	r9, r3
 8019ba4:	9e08      	ldr	r6, [sp, #32]
 8019ba6:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 8019baa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8019bac:	0092      	lsls	r2, r2, #2
 8019bae:	21a5      	movs	r1, #165	@ 0xa5
 8019bb0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8019bb2:	f013 fa55 	bl	802d060 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8019bb6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019bb8:	f107 4280 	add.w	r2, r7, #1073741824	@ 0x40000000
 8019bbc:	3a01      	subs	r2, #1
 8019bbe:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8019bc2:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8019bc6:	2d00      	cmp	r5, #0
 8019bc8:	d061      	beq.n	8019c8e <prvInitialiseNewTask+0xf6>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8019bca:	f04f 0c00 	mov.w	ip, #0
 8019bce:	f1bc 0f0f 	cmp.w	ip, #15
 8019bd2:	d809      	bhi.n	8019be8 <prvInitialiseNewTask+0x50>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8019bd4:	f815 300c 	ldrb.w	r3, [r5, ip]
 8019bd8:	eb04 020c 	add.w	r2, r4, ip
 8019bdc:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8019be0:	b113      	cbz	r3, 8019be8 <prvInitialiseNewTask+0x50>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8019be2:	f10c 0c01 	add.w	ip, ip, #1
 8019be6:	e7f2      	b.n	8019bce <prvInitialiseNewTask+0x36>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8019be8:	2300      	movs	r3, #0
 8019bea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8019bee:	2e37      	cmp	r6, #55	@ 0x37
 8019bf0:	d900      	bls.n	8019bf4 <prvInitialiseNewTask+0x5c>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8019bf2:	2637      	movs	r6, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 8019bf4:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8019bf6:	64e6      	str	r6, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8019bf8:	2500      	movs	r5, #0
 8019bfa:	6525      	str	r5, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8019bfc:	1d20      	adds	r0, r4, #4
 8019bfe:	f7ff f99c 	bl	8018f3a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8019c02:	f104 0018 	add.w	r0, r4, #24
 8019c06:	f7ff f998 	bl	8018f3a <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8019c0a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019c0c:	f1c6 0638 	rsb	r6, r6, #56	@ 0x38
 8019c10:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8019c12:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8019c14:	f8c4 5178 	str.w	r5, [r4, #376]	@ 0x178
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8019c18:	f884 517c 	strb.w	r5, [r4, #380]	@ 0x17c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8019c1c:	f44f 7290 	mov.w	r2, #288	@ 0x120
 8019c20:	4629      	mov	r1, r5
 8019c22:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8019c26:	f013 fa1b 	bl	802d060 <memset>
 8019c2a:	4b1b      	ldr	r3, [pc, #108]	@ (8019c98 <prvInitialiseNewTask+0x100>)
 8019c2c:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8019c2e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8019c32:	6622      	str	r2, [r4, #96]	@ 0x60
 8019c34:	33d0      	adds	r3, #208	@ 0xd0
 8019c36:	6663      	str	r3, [r4, #100]	@ 0x64
 8019c38:	2201      	movs	r2, #1
 8019c3a:	2300      	movs	r3, #0
 8019c3c:	e9c4 233c 	strd	r2, r3, [r4, #240]	@ 0xf0
 8019c40:	f243 330e 	movw	r3, #13070	@ 0x330e
 8019c44:	f8a4 30f8 	strh.w	r3, [r4, #248]	@ 0xf8
 8019c48:	f64a 33cd 	movw	r3, #43981	@ 0xabcd
 8019c4c:	f8a4 30fa 	strh.w	r3, [r4, #250]	@ 0xfa
 8019c50:	f241 2334 	movw	r3, #4660	@ 0x1234
 8019c54:	f8a4 30fc 	strh.w	r3, [r4, #252]	@ 0xfc
 8019c58:	f24e 636d 	movw	r3, #58989	@ 0xe66d
 8019c5c:	f8a4 30fe 	strh.w	r3, [r4, #254]	@ 0xfe
 8019c60:	f64d 63ec 	movw	r3, #57068	@ 0xdeec
 8019c64:	f8a4 3100 	strh.w	r3, [r4, #256]	@ 0x100
 8019c68:	2305      	movs	r3, #5
 8019c6a:	f8a4 3102 	strh.w	r3, [r4, #258]	@ 0x102
 8019c6e:	230b      	movs	r3, #11
 8019c70:	f8a4 3104 	strh.w	r3, [r4, #260]	@ 0x104
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8019c74:	464a      	mov	r2, r9
 8019c76:	4641      	mov	r1, r8
 8019c78:	4638      	mov	r0, r7
 8019c7a:	f000 ffc3 	bl	801ac04 <pxPortInitialiseStack>
 8019c7e:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8019c80:	f1ba 0f00 	cmp.w	sl, #0
 8019c84:	d001      	beq.n	8019c8a <prvInitialiseNewTask+0xf2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8019c86:	f8ca 4000 	str.w	r4, [sl]
}
 8019c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8019c8e:	2300      	movs	r3, #0
 8019c90:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 8019c94:	e7ab      	b.n	8019bee <prvInitialiseNewTask+0x56>
 8019c96:	bf00      	nop
 8019c98:	20019f74 	.word	0x20019f74

08019c9c <prvInitialiseTaskLists>:
{
 8019c9c:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8019c9e:	2400      	movs	r4, #0
 8019ca0:	e007      	b.n	8019cb2 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8019ca2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8019ca6:	0093      	lsls	r3, r2, #2
 8019ca8:	480e      	ldr	r0, [pc, #56]	@ (8019ce4 <prvInitialiseTaskLists+0x48>)
 8019caa:	4418      	add	r0, r3
 8019cac:	f7ff f93a 	bl	8018f24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8019cb0:	3401      	adds	r4, #1
 8019cb2:	2c37      	cmp	r4, #55	@ 0x37
 8019cb4:	d9f5      	bls.n	8019ca2 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8019cb6:	4d0c      	ldr	r5, [pc, #48]	@ (8019ce8 <prvInitialiseTaskLists+0x4c>)
 8019cb8:	4628      	mov	r0, r5
 8019cba:	f7ff f933 	bl	8018f24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8019cbe:	4c0b      	ldr	r4, [pc, #44]	@ (8019cec <prvInitialiseTaskLists+0x50>)
 8019cc0:	4620      	mov	r0, r4
 8019cc2:	f7ff f92f 	bl	8018f24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8019cc6:	480a      	ldr	r0, [pc, #40]	@ (8019cf0 <prvInitialiseTaskLists+0x54>)
 8019cc8:	f7ff f92c 	bl	8018f24 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8019ccc:	4809      	ldr	r0, [pc, #36]	@ (8019cf4 <prvInitialiseTaskLists+0x58>)
 8019cce:	f7ff f929 	bl	8018f24 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8019cd2:	4809      	ldr	r0, [pc, #36]	@ (8019cf8 <prvInitialiseTaskLists+0x5c>)
 8019cd4:	f7ff f926 	bl	8018f24 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8019cd8:	4b08      	ldr	r3, [pc, #32]	@ (8019cfc <prvInitialiseTaskLists+0x60>)
 8019cda:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8019cdc:	4b08      	ldr	r3, [pc, #32]	@ (8019d00 <prvInitialiseTaskLists+0x64>)
 8019cde:	601c      	str	r4, [r3, #0]
}
 8019ce0:	bd38      	pop	{r3, r4, r5, pc}
 8019ce2:	bf00      	nop
 8019ce4:	20003798 	.word	0x20003798
 8019ce8:	20003784 	.word	0x20003784
 8019cec:	20003770 	.word	0x20003770
 8019cf0:	20003754 	.word	0x20003754
 8019cf4:	20003740 	.word	0x20003740
 8019cf8:	20003728 	.word	0x20003728
 8019cfc:	2000376c 	.word	0x2000376c
 8019d00:	20003768 	.word	0x20003768

08019d04 <prvAddNewTaskToReadyList>:
{
 8019d04:	b510      	push	{r4, lr}
 8019d06:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8019d08:	f000 ffa4 	bl	801ac54 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8019d0c:	4a22      	ldr	r2, [pc, #136]	@ (8019d98 <prvAddNewTaskToReadyList+0x94>)
 8019d0e:	6813      	ldr	r3, [r2, #0]
 8019d10:	3301      	adds	r3, #1
 8019d12:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8019d14:	4b21      	ldr	r3, [pc, #132]	@ (8019d9c <prvAddNewTaskToReadyList+0x98>)
 8019d16:	681b      	ldr	r3, [r3, #0]
 8019d18:	b15b      	cbz	r3, 8019d32 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8019d1a:	4b21      	ldr	r3, [pc, #132]	@ (8019da0 <prvAddNewTaskToReadyList+0x9c>)
 8019d1c:	681b      	ldr	r3, [r3, #0]
 8019d1e:	b96b      	cbnz	r3, 8019d3c <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8019d20:	4b1e      	ldr	r3, [pc, #120]	@ (8019d9c <prvAddNewTaskToReadyList+0x98>)
 8019d22:	681b      	ldr	r3, [r3, #0]
 8019d24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019d26:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8019d28:	429a      	cmp	r2, r3
 8019d2a:	d807      	bhi.n	8019d3c <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8019d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8019d9c <prvAddNewTaskToReadyList+0x98>)
 8019d2e:	601c      	str	r4, [r3, #0]
 8019d30:	e004      	b.n	8019d3c <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8019d32:	4b1a      	ldr	r3, [pc, #104]	@ (8019d9c <prvAddNewTaskToReadyList+0x98>)
 8019d34:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8019d36:	6813      	ldr	r3, [r2, #0]
 8019d38:	2b01      	cmp	r3, #1
 8019d3a:	d029      	beq.n	8019d90 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 8019d3c:	4a19      	ldr	r2, [pc, #100]	@ (8019da4 <prvAddNewTaskToReadyList+0xa0>)
 8019d3e:	6813      	ldr	r3, [r2, #0]
 8019d40:	3301      	adds	r3, #1
 8019d42:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8019d44:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8019d46:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8019d48:	4b17      	ldr	r3, [pc, #92]	@ (8019da8 <prvAddNewTaskToReadyList+0xa4>)
 8019d4a:	681b      	ldr	r3, [r3, #0]
 8019d4c:	4298      	cmp	r0, r3
 8019d4e:	d901      	bls.n	8019d54 <prvAddNewTaskToReadyList+0x50>
 8019d50:	4b15      	ldr	r3, [pc, #84]	@ (8019da8 <prvAddNewTaskToReadyList+0xa4>)
 8019d52:	6018      	str	r0, [r3, #0]
 8019d54:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019d58:	1d21      	adds	r1, r4, #4
 8019d5a:	4b14      	ldr	r3, [pc, #80]	@ (8019dac <prvAddNewTaskToReadyList+0xa8>)
 8019d5c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019d60:	f7ff f8ee 	bl	8018f40 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8019d64:	f000 ff98 	bl	801ac98 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8019d68:	4b0d      	ldr	r3, [pc, #52]	@ (8019da0 <prvAddNewTaskToReadyList+0x9c>)
 8019d6a:	681b      	ldr	r3, [r3, #0]
 8019d6c:	b17b      	cbz	r3, 8019d8e <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8019d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8019d9c <prvAddNewTaskToReadyList+0x98>)
 8019d70:	681b      	ldr	r3, [r3, #0]
 8019d72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019d74:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8019d76:	429a      	cmp	r2, r3
 8019d78:	d209      	bcs.n	8019d8e <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 8019d7a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019d7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019d82:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8019d86:	f3bf 8f4f 	dsb	sy
 8019d8a:	f3bf 8f6f 	isb	sy
}
 8019d8e:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8019d90:	f7ff ff84 	bl	8019c9c <prvInitialiseTaskLists>
 8019d94:	e7d2      	b.n	8019d3c <prvAddNewTaskToReadyList+0x38>
 8019d96:	bf00      	nop
 8019d98:	20003724 	.word	0x20003724
 8019d9c:	20003bf8 	.word	0x20003bf8
 8019da0:	20003718 	.word	0x20003718
 8019da4:	20003708 	.word	0x20003708
 8019da8:	2000371c 	.word	0x2000371c
 8019dac:	20003798 	.word	0x20003798

08019db0 <prvDeleteTCB>:
	{
 8019db0:	b510      	push	{r4, lr}
 8019db2:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8019db4:	3058      	adds	r0, #88	@ 0x58
 8019db6:	f014 faf5 	bl	802e3a4 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8019dba:	f894 317d 	ldrb.w	r3, [r4, #381]	@ 0x17d
 8019dbe:	b163      	cbz	r3, 8019dda <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8019dc0:	2b01      	cmp	r3, #1
 8019dc2:	d011      	beq.n	8019de8 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8019dc4:	2b02      	cmp	r3, #2
 8019dc6:	d00e      	beq.n	8019de6 <prvDeleteTCB+0x36>
 8019dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019dcc:	f383 8811 	msr	BASEPRI, r3
 8019dd0:	f3bf 8f6f 	isb	sy
 8019dd4:	f3bf 8f4f 	dsb	sy
 8019dd8:	e7fe      	b.n	8019dd8 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 8019dda:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8019ddc:	f001 f976 	bl	801b0cc <vPortFree>
				vPortFree( pxTCB );
 8019de0:	4620      	mov	r0, r4
 8019de2:	f001 f973 	bl	801b0cc <vPortFree>
	}
 8019de6:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8019de8:	4620      	mov	r0, r4
 8019dea:	f001 f96f 	bl	801b0cc <vPortFree>
 8019dee:	e7fa      	b.n	8019de6 <prvDeleteTCB+0x36>

08019df0 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8019df0:	4b0f      	ldr	r3, [pc, #60]	@ (8019e30 <prvCheckTasksWaitingTermination+0x40>)
 8019df2:	681b      	ldr	r3, [r3, #0]
 8019df4:	b1d3      	cbz	r3, 8019e2c <prvCheckTasksWaitingTermination+0x3c>
{
 8019df6:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8019df8:	f000 ff2c 	bl	801ac54 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8019e34 <prvCheckTasksWaitingTermination+0x44>)
 8019dfe:	68db      	ldr	r3, [r3, #12]
 8019e00:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019e02:	1d20      	adds	r0, r4, #4
 8019e04:	f7ff f8c0 	bl	8018f88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8019e08:	4a0b      	ldr	r2, [pc, #44]	@ (8019e38 <prvCheckTasksWaitingTermination+0x48>)
 8019e0a:	6813      	ldr	r3, [r2, #0]
 8019e0c:	3b01      	subs	r3, #1
 8019e0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8019e10:	4a07      	ldr	r2, [pc, #28]	@ (8019e30 <prvCheckTasksWaitingTermination+0x40>)
 8019e12:	6813      	ldr	r3, [r2, #0]
 8019e14:	3b01      	subs	r3, #1
 8019e16:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8019e18:	f000 ff3e 	bl	801ac98 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8019e1c:	4620      	mov	r0, r4
 8019e1e:	f7ff ffc7 	bl	8019db0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8019e22:	4b03      	ldr	r3, [pc, #12]	@ (8019e30 <prvCheckTasksWaitingTermination+0x40>)
 8019e24:	681b      	ldr	r3, [r3, #0]
 8019e26:	2b00      	cmp	r3, #0
 8019e28:	d1e6      	bne.n	8019df8 <prvCheckTasksWaitingTermination+0x8>
}
 8019e2a:	bd10      	pop	{r4, pc}
 8019e2c:	4770      	bx	lr
 8019e2e:	bf00      	nop
 8019e30:	2000373c 	.word	0x2000373c
 8019e34:	20003740 	.word	0x20003740
 8019e38:	20003724 	.word	0x20003724

08019e3c <prvIdleTask>:
{
 8019e3c:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8019e3e:	f7ff ffd7 	bl	8019df0 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8019e42:	4b07      	ldr	r3, [pc, #28]	@ (8019e60 <prvIdleTask+0x24>)
 8019e44:	681b      	ldr	r3, [r3, #0]
 8019e46:	2b01      	cmp	r3, #1
 8019e48:	d9f9      	bls.n	8019e3e <prvIdleTask+0x2>
				taskYIELD();
 8019e4a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019e4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019e52:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8019e56:	f3bf 8f4f 	dsb	sy
 8019e5a:	f3bf 8f6f 	isb	sy
 8019e5e:	e7ee      	b.n	8019e3e <prvIdleTask+0x2>
 8019e60:	20003798 	.word	0x20003798

08019e64 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8019e64:	b570      	push	{r4, r5, r6, lr}
 8019e66:	4604      	mov	r4, r0
 8019e68:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8019e6a:	4b17      	ldr	r3, [pc, #92]	@ (8019ec8 <prvAddCurrentTaskToDelayedList+0x64>)
 8019e6c:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019e6e:	4b17      	ldr	r3, [pc, #92]	@ (8019ecc <prvAddCurrentTaskToDelayedList+0x68>)
 8019e70:	6818      	ldr	r0, [r3, #0]
 8019e72:	3004      	adds	r0, #4
 8019e74:	f7ff f888 	bl	8018f88 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8019e78:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8019e7c:	d00d      	beq.n	8019e9a <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8019e7e:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8019e80:	4b12      	ldr	r3, [pc, #72]	@ (8019ecc <prvAddCurrentTaskToDelayedList+0x68>)
 8019e82:	681b      	ldr	r3, [r3, #0]
 8019e84:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8019e86:	42a6      	cmp	r6, r4
 8019e88:	d910      	bls.n	8019eac <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019e8a:	4b11      	ldr	r3, [pc, #68]	@ (8019ed0 <prvAddCurrentTaskToDelayedList+0x6c>)
 8019e8c:	6818      	ldr	r0, [r3, #0]
 8019e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8019ecc <prvAddCurrentTaskToDelayedList+0x68>)
 8019e90:	6819      	ldr	r1, [r3, #0]
 8019e92:	3104      	adds	r1, #4
 8019e94:	f7ff f85f 	bl	8018f56 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8019e98:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8019e9a:	2d00      	cmp	r5, #0
 8019e9c:	d0ef      	beq.n	8019e7e <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8019ecc <prvAddCurrentTaskToDelayedList+0x68>)
 8019ea0:	6819      	ldr	r1, [r3, #0]
 8019ea2:	3104      	adds	r1, #4
 8019ea4:	480b      	ldr	r0, [pc, #44]	@ (8019ed4 <prvAddCurrentTaskToDelayedList+0x70>)
 8019ea6:	f7ff f84b 	bl	8018f40 <vListInsertEnd>
 8019eaa:	e7f5      	b.n	8019e98 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019eac:	4b0a      	ldr	r3, [pc, #40]	@ (8019ed8 <prvAddCurrentTaskToDelayedList+0x74>)
 8019eae:	6818      	ldr	r0, [r3, #0]
 8019eb0:	4b06      	ldr	r3, [pc, #24]	@ (8019ecc <prvAddCurrentTaskToDelayedList+0x68>)
 8019eb2:	6819      	ldr	r1, [r3, #0]
 8019eb4:	3104      	adds	r1, #4
 8019eb6:	f7ff f84e 	bl	8018f56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8019eba:	4b08      	ldr	r3, [pc, #32]	@ (8019edc <prvAddCurrentTaskToDelayedList+0x78>)
 8019ebc:	681b      	ldr	r3, [r3, #0]
 8019ebe:	42a3      	cmp	r3, r4
 8019ec0:	d9ea      	bls.n	8019e98 <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 8019ec2:	4b06      	ldr	r3, [pc, #24]	@ (8019edc <prvAddCurrentTaskToDelayedList+0x78>)
 8019ec4:	601c      	str	r4, [r3, #0]
}
 8019ec6:	e7e7      	b.n	8019e98 <prvAddCurrentTaskToDelayedList+0x34>
 8019ec8:	20003720 	.word	0x20003720
 8019ecc:	20003bf8 	.word	0x20003bf8
 8019ed0:	20003768 	.word	0x20003768
 8019ed4:	20003728 	.word	0x20003728
 8019ed8:	2000376c 	.word	0x2000376c
 8019edc:	20003704 	.word	0x20003704

08019ee0 <xTaskCreateStatic>:
	{
 8019ee0:	b530      	push	{r4, r5, lr}
 8019ee2:	b087      	sub	sp, #28
 8019ee4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8019ee6:	b18c      	cbz	r4, 8019f0c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8019ee8:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8019eea:	b1c5      	cbz	r5, 8019f1e <xTaskCreateStatic+0x3e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8019eec:	f44f 75c0 	mov.w	r5, #384	@ 0x180
 8019ef0:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8019ef2:	9d04      	ldr	r5, [sp, #16]
 8019ef4:	f5b5 7fc0 	cmp.w	r5, #384	@ 0x180
 8019ef8:	d01a      	beq.n	8019f30 <xTaskCreateStatic+0x50>
 8019efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019efe:	f383 8811 	msr	BASEPRI, r3
 8019f02:	f3bf 8f6f 	isb	sy
 8019f06:	f3bf 8f4f 	dsb	sy
 8019f0a:	e7fe      	b.n	8019f0a <xTaskCreateStatic+0x2a>
 8019f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019f10:	f383 8811 	msr	BASEPRI, r3
 8019f14:	f3bf 8f6f 	isb	sy
 8019f18:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8019f1c:	e7fe      	b.n	8019f1c <xTaskCreateStatic+0x3c>
 8019f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019f22:	f383 8811 	msr	BASEPRI, r3
 8019f26:	f3bf 8f6f 	isb	sy
 8019f2a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8019f2e:	e7fe      	b.n	8019f2e <xTaskCreateStatic+0x4e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8019f30:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8019f32:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8019f34:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8019f36:	2402      	movs	r4, #2
 8019f38:	f885 417d 	strb.w	r4, [r5, #381]	@ 0x17d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8019f3c:	2400      	movs	r4, #0
 8019f3e:	9403      	str	r4, [sp, #12]
 8019f40:	9502      	str	r5, [sp, #8]
 8019f42:	ac05      	add	r4, sp, #20
 8019f44:	9401      	str	r4, [sp, #4]
 8019f46:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8019f48:	9400      	str	r4, [sp, #0]
 8019f4a:	f7ff fe25 	bl	8019b98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8019f4e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8019f50:	f7ff fed8 	bl	8019d04 <prvAddNewTaskToReadyList>
	}
 8019f54:	9805      	ldr	r0, [sp, #20]
 8019f56:	b007      	add	sp, #28
 8019f58:	bd30      	pop	{r4, r5, pc}

08019f5a <xTaskCreate>:
	{
 8019f5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019f5e:	b085      	sub	sp, #20
 8019f60:	4607      	mov	r7, r0
 8019f62:	4688      	mov	r8, r1
 8019f64:	4614      	mov	r4, r2
 8019f66:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8019f68:	0090      	lsls	r0, r2, #2
 8019f6a:	f001 f82d 	bl	801afc8 <pvPortMalloc>
			if( pxStack != NULL )
 8019f6e:	b310      	cbz	r0, 8019fb6 <xTaskCreate+0x5c>
 8019f70:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8019f72:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8019f76:	f001 f827 	bl	801afc8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8019f7a:	4605      	mov	r5, r0
 8019f7c:	b1a8      	cbz	r0, 8019faa <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 8019f7e:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8019f82:	2300      	movs	r3, #0
 8019f84:	f880 317d 	strb.w	r3, [r0, #381]	@ 0x17d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8019f88:	9303      	str	r3, [sp, #12]
 8019f8a:	9002      	str	r0, [sp, #8]
 8019f8c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019f8e:	9301      	str	r3, [sp, #4]
 8019f90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019f92:	9300      	str	r3, [sp, #0]
 8019f94:	4633      	mov	r3, r6
 8019f96:	4622      	mov	r2, r4
 8019f98:	4641      	mov	r1, r8
 8019f9a:	4638      	mov	r0, r7
 8019f9c:	f7ff fdfc 	bl	8019b98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8019fa0:	4628      	mov	r0, r5
 8019fa2:	f7ff feaf 	bl	8019d04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8019fa6:	2001      	movs	r0, #1
 8019fa8:	e007      	b.n	8019fba <xTaskCreate+0x60>
					vPortFree( pxStack );
 8019faa:	4648      	mov	r0, r9
 8019fac:	f001 f88e 	bl	801b0cc <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8019fb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019fb4:	e001      	b.n	8019fba <xTaskCreate+0x60>
 8019fb6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
	}
 8019fba:	b005      	add	sp, #20
 8019fbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08019fc0 <vTaskStartScheduler>:
{
 8019fc0:	b510      	push	{r4, lr}
 8019fc2:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8019fc4:	2400      	movs	r4, #0
 8019fc6:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8019fc8:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8019fca:	aa07      	add	r2, sp, #28
 8019fcc:	a906      	add	r1, sp, #24
 8019fce:	a805      	add	r0, sp, #20
 8019fd0:	f7fe ff90 	bl	8018ef4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8019fd4:	9b05      	ldr	r3, [sp, #20]
 8019fd6:	9302      	str	r3, [sp, #8]
 8019fd8:	9b06      	ldr	r3, [sp, #24]
 8019fda:	9301      	str	r3, [sp, #4]
 8019fdc:	9400      	str	r4, [sp, #0]
 8019fde:	4623      	mov	r3, r4
 8019fe0:	9a07      	ldr	r2, [sp, #28]
 8019fe2:	491a      	ldr	r1, [pc, #104]	@ (801a04c <vTaskStartScheduler+0x8c>)
 8019fe4:	481a      	ldr	r0, [pc, #104]	@ (801a050 <vTaskStartScheduler+0x90>)
 8019fe6:	f7ff ff7b 	bl	8019ee0 <xTaskCreateStatic>
 8019fea:	4b1a      	ldr	r3, [pc, #104]	@ (801a054 <vTaskStartScheduler+0x94>)
 8019fec:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 8019fee:	b1e8      	cbz	r0, 801a02c <vTaskStartScheduler+0x6c>
			xReturn = xTimerCreateTimerTask();
 8019ff0:	f000 fc0c 	bl	801a80c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8019ff4:	2801      	cmp	r0, #1
 8019ff6:	d11a      	bne.n	801a02e <vTaskStartScheduler+0x6e>
 8019ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019ffc:	f383 8811 	msr	BASEPRI, r3
 801a000:	f3bf 8f6f 	isb	sy
 801a004:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801a008:	4b13      	ldr	r3, [pc, #76]	@ (801a058 <vTaskStartScheduler+0x98>)
 801a00a:	681b      	ldr	r3, [r3, #0]
 801a00c:	3358      	adds	r3, #88	@ 0x58
 801a00e:	4a13      	ldr	r2, [pc, #76]	@ (801a05c <vTaskStartScheduler+0x9c>)
 801a010:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 801a012:	4b13      	ldr	r3, [pc, #76]	@ (801a060 <vTaskStartScheduler+0xa0>)
 801a014:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a018:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801a01a:	4b12      	ldr	r3, [pc, #72]	@ (801a064 <vTaskStartScheduler+0xa4>)
 801a01c:	2201      	movs	r2, #1
 801a01e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801a020:	4b11      	ldr	r3, [pc, #68]	@ (801a068 <vTaskStartScheduler+0xa8>)
 801a022:	2200      	movs	r2, #0
 801a024:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 801a026:	f000 feaf 	bl	801ad88 <xPortStartScheduler>
 801a02a:	e003      	b.n	801a034 <vTaskStartScheduler+0x74>
			xReturn = pdFAIL;
 801a02c:	2000      	movs	r0, #0
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801a02e:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 801a032:	d001      	beq.n	801a038 <vTaskStartScheduler+0x78>
}
 801a034:	b008      	add	sp, #32
 801a036:	bd10      	pop	{r4, pc}
 801a038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a03c:	f383 8811 	msr	BASEPRI, r3
 801a040:	f3bf 8f6f 	isb	sy
 801a044:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801a048:	e7fe      	b.n	801a048 <vTaskStartScheduler+0x88>
 801a04a:	bf00      	nop
 801a04c:	0803981c 	.word	0x0803981c
 801a050:	08019e3d 	.word	0x08019e3d
 801a054:	20003700 	.word	0x20003700
 801a058:	20003bf8 	.word	0x20003bf8
 801a05c:	200002d8 	.word	0x200002d8
 801a060:	20003704 	.word	0x20003704
 801a064:	20003718 	.word	0x20003718
 801a068:	20003720 	.word	0x20003720

0801a06c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 801a06c:	4a02      	ldr	r2, [pc, #8]	@ (801a078 <vTaskSuspendAll+0xc>)
 801a06e:	6813      	ldr	r3, [r2, #0]
 801a070:	3301      	adds	r3, #1
 801a072:	6013      	str	r3, [r2, #0]
}
 801a074:	4770      	bx	lr
 801a076:	bf00      	nop
 801a078:	200036fc 	.word	0x200036fc

0801a07c <xTaskGetTickCount>:
		xTicks = xTickCount;
 801a07c:	4b01      	ldr	r3, [pc, #4]	@ (801a084 <xTaskGetTickCount+0x8>)
 801a07e:	6818      	ldr	r0, [r3, #0]
}
 801a080:	4770      	bx	lr
 801a082:	bf00      	nop
 801a084:	20003720 	.word	0x20003720

0801a088 <xTaskIncrementTick>:
{
 801a088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a08a:	4b3a      	ldr	r3, [pc, #232]	@ (801a174 <xTaskIncrementTick+0xec>)
 801a08c:	681b      	ldr	r3, [r3, #0]
 801a08e:	2b00      	cmp	r3, #0
 801a090:	d169      	bne.n	801a166 <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801a092:	4b39      	ldr	r3, [pc, #228]	@ (801a178 <xTaskIncrementTick+0xf0>)
 801a094:	681d      	ldr	r5, [r3, #0]
 801a096:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 801a098:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801a09a:	b9c5      	cbnz	r5, 801a0ce <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 801a09c:	4b37      	ldr	r3, [pc, #220]	@ (801a17c <xTaskIncrementTick+0xf4>)
 801a09e:	681b      	ldr	r3, [r3, #0]
 801a0a0:	681b      	ldr	r3, [r3, #0]
 801a0a2:	b143      	cbz	r3, 801a0b6 <xTaskIncrementTick+0x2e>
 801a0a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a0a8:	f383 8811 	msr	BASEPRI, r3
 801a0ac:	f3bf 8f6f 	isb	sy
 801a0b0:	f3bf 8f4f 	dsb	sy
 801a0b4:	e7fe      	b.n	801a0b4 <xTaskIncrementTick+0x2c>
 801a0b6:	4a31      	ldr	r2, [pc, #196]	@ (801a17c <xTaskIncrementTick+0xf4>)
 801a0b8:	6811      	ldr	r1, [r2, #0]
 801a0ba:	4b31      	ldr	r3, [pc, #196]	@ (801a180 <xTaskIncrementTick+0xf8>)
 801a0bc:	6818      	ldr	r0, [r3, #0]
 801a0be:	6010      	str	r0, [r2, #0]
 801a0c0:	6019      	str	r1, [r3, #0]
 801a0c2:	4a30      	ldr	r2, [pc, #192]	@ (801a184 <xTaskIncrementTick+0xfc>)
 801a0c4:	6813      	ldr	r3, [r2, #0]
 801a0c6:	3301      	adds	r3, #1
 801a0c8:	6013      	str	r3, [r2, #0]
 801a0ca:	f7ff fd4f 	bl	8019b6c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 801a0ce:	4b2e      	ldr	r3, [pc, #184]	@ (801a188 <xTaskIncrementTick+0x100>)
 801a0d0:	681b      	ldr	r3, [r3, #0]
 801a0d2:	42ab      	cmp	r3, r5
 801a0d4:	d93d      	bls.n	801a152 <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 801a0d6:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801a0d8:	4b2c      	ldr	r3, [pc, #176]	@ (801a18c <xTaskIncrementTick+0x104>)
 801a0da:	681b      	ldr	r3, [r3, #0]
 801a0dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a0de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801a0e2:	009a      	lsls	r2, r3, #2
 801a0e4:	4b2a      	ldr	r3, [pc, #168]	@ (801a190 <xTaskIncrementTick+0x108>)
 801a0e6:	589b      	ldr	r3, [r3, r2]
 801a0e8:	2b01      	cmp	r3, #1
 801a0ea:	d900      	bls.n	801a0ee <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 801a0ec:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 801a0ee:	4b29      	ldr	r3, [pc, #164]	@ (801a194 <xTaskIncrementTick+0x10c>)
 801a0f0:	681b      	ldr	r3, [r3, #0]
 801a0f2:	2b00      	cmp	r3, #0
 801a0f4:	d03c      	beq.n	801a170 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 801a0f6:	2701      	movs	r7, #1
	return xSwitchRequired;
 801a0f8:	e03a      	b.n	801a170 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 801a0fa:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a0fc:	4b1f      	ldr	r3, [pc, #124]	@ (801a17c <xTaskIncrementTick+0xf4>)
 801a0fe:	681b      	ldr	r3, [r3, #0]
 801a100:	681b      	ldr	r3, [r3, #0]
 801a102:	b343      	cbz	r3, 801a156 <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a104:	4b1d      	ldr	r3, [pc, #116]	@ (801a17c <xTaskIncrementTick+0xf4>)
 801a106:	681b      	ldr	r3, [r3, #0]
 801a108:	68db      	ldr	r3, [r3, #12]
 801a10a:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801a10c:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 801a10e:	429d      	cmp	r5, r3
 801a110:	d326      	bcc.n	801a160 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a112:	1d26      	adds	r6, r4, #4
 801a114:	4630      	mov	r0, r6
 801a116:	f7fe ff37 	bl	8018f88 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801a11a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801a11c:	b11b      	cbz	r3, 801a126 <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801a11e:	f104 0018 	add.w	r0, r4, #24
 801a122:	f7fe ff31 	bl	8018f88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801a126:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801a128:	4a1b      	ldr	r2, [pc, #108]	@ (801a198 <xTaskIncrementTick+0x110>)
 801a12a:	6812      	ldr	r2, [r2, #0]
 801a12c:	4293      	cmp	r3, r2
 801a12e:	d901      	bls.n	801a134 <xTaskIncrementTick+0xac>
 801a130:	4a19      	ldr	r2, [pc, #100]	@ (801a198 <xTaskIncrementTick+0x110>)
 801a132:	6013      	str	r3, [r2, #0]
 801a134:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801a138:	009a      	lsls	r2, r3, #2
 801a13a:	4631      	mov	r1, r6
 801a13c:	4814      	ldr	r0, [pc, #80]	@ (801a190 <xTaskIncrementTick+0x108>)
 801a13e:	4410      	add	r0, r2
 801a140:	f7fe fefe 	bl	8018f40 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801a144:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801a146:	4b11      	ldr	r3, [pc, #68]	@ (801a18c <xTaskIncrementTick+0x104>)
 801a148:	681b      	ldr	r3, [r3, #0]
 801a14a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a14c:	429a      	cmp	r2, r3
 801a14e:	d2d4      	bcs.n	801a0fa <xTaskIncrementTick+0x72>
 801a150:	e7d4      	b.n	801a0fc <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 801a152:	2700      	movs	r7, #0
 801a154:	e7d2      	b.n	801a0fc <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a156:	4b0c      	ldr	r3, [pc, #48]	@ (801a188 <xTaskIncrementTick+0x100>)
 801a158:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a15c:	601a      	str	r2, [r3, #0]
					break;
 801a15e:	e7bb      	b.n	801a0d8 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 801a160:	4a09      	ldr	r2, [pc, #36]	@ (801a188 <xTaskIncrementTick+0x100>)
 801a162:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801a164:	e7b8      	b.n	801a0d8 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 801a166:	4a0d      	ldr	r2, [pc, #52]	@ (801a19c <xTaskIncrementTick+0x114>)
 801a168:	6813      	ldr	r3, [r2, #0]
 801a16a:	3301      	adds	r3, #1
 801a16c:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 801a16e:	2700      	movs	r7, #0
}
 801a170:	4638      	mov	r0, r7
 801a172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a174:	200036fc 	.word	0x200036fc
 801a178:	20003720 	.word	0x20003720
 801a17c:	2000376c 	.word	0x2000376c
 801a180:	20003768 	.word	0x20003768
 801a184:	2000370c 	.word	0x2000370c
 801a188:	20003704 	.word	0x20003704
 801a18c:	20003bf8 	.word	0x20003bf8
 801a190:	20003798 	.word	0x20003798
 801a194:	20003710 	.word	0x20003710
 801a198:	2000371c 	.word	0x2000371c
 801a19c:	20003714 	.word	0x20003714

0801a1a0 <xTaskResumeAll>:
{
 801a1a0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 801a1a2:	4b35      	ldr	r3, [pc, #212]	@ (801a278 <xTaskResumeAll+0xd8>)
 801a1a4:	681b      	ldr	r3, [r3, #0]
 801a1a6:	b943      	cbnz	r3, 801a1ba <xTaskResumeAll+0x1a>
 801a1a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a1ac:	f383 8811 	msr	BASEPRI, r3
 801a1b0:	f3bf 8f6f 	isb	sy
 801a1b4:	f3bf 8f4f 	dsb	sy
 801a1b8:	e7fe      	b.n	801a1b8 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 801a1ba:	f000 fd4b 	bl	801ac54 <vPortEnterCritical>
		--uxSchedulerSuspended;
 801a1be:	4b2e      	ldr	r3, [pc, #184]	@ (801a278 <xTaskResumeAll+0xd8>)
 801a1c0:	681a      	ldr	r2, [r3, #0]
 801a1c2:	3a01      	subs	r2, #1
 801a1c4:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a1c6:	681b      	ldr	r3, [r3, #0]
 801a1c8:	2b00      	cmp	r3, #0
 801a1ca:	d14f      	bne.n	801a26c <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801a1cc:	4b2b      	ldr	r3, [pc, #172]	@ (801a27c <xTaskResumeAll+0xdc>)
 801a1ce:	681b      	ldr	r3, [r3, #0]
 801a1d0:	b90b      	cbnz	r3, 801a1d6 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 801a1d2:	2400      	movs	r4, #0
 801a1d4:	e04b      	b.n	801a26e <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 801a1d6:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801a1d8:	4b29      	ldr	r3, [pc, #164]	@ (801a280 <xTaskResumeAll+0xe0>)
 801a1da:	681b      	ldr	r3, [r3, #0]
 801a1dc:	b31b      	cbz	r3, 801a226 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a1de:	4b28      	ldr	r3, [pc, #160]	@ (801a280 <xTaskResumeAll+0xe0>)
 801a1e0:	68db      	ldr	r3, [r3, #12]
 801a1e2:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801a1e4:	f104 0018 	add.w	r0, r4, #24
 801a1e8:	f7fe fece 	bl	8018f88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a1ec:	1d25      	adds	r5, r4, #4
 801a1ee:	4628      	mov	r0, r5
 801a1f0:	f7fe feca 	bl	8018f88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801a1f4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801a1f6:	4b23      	ldr	r3, [pc, #140]	@ (801a284 <xTaskResumeAll+0xe4>)
 801a1f8:	681b      	ldr	r3, [r3, #0]
 801a1fa:	4298      	cmp	r0, r3
 801a1fc:	d901      	bls.n	801a202 <xTaskResumeAll+0x62>
 801a1fe:	4b21      	ldr	r3, [pc, #132]	@ (801a284 <xTaskResumeAll+0xe4>)
 801a200:	6018      	str	r0, [r3, #0]
 801a202:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a206:	4629      	mov	r1, r5
 801a208:	4b1f      	ldr	r3, [pc, #124]	@ (801a288 <xTaskResumeAll+0xe8>)
 801a20a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801a20e:	f7fe fe97 	bl	8018f40 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801a212:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801a214:	4b1d      	ldr	r3, [pc, #116]	@ (801a28c <xTaskResumeAll+0xec>)
 801a216:	681b      	ldr	r3, [r3, #0]
 801a218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a21a:	429a      	cmp	r2, r3
 801a21c:	d3dc      	bcc.n	801a1d8 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 801a21e:	4b1c      	ldr	r3, [pc, #112]	@ (801a290 <xTaskResumeAll+0xf0>)
 801a220:	2201      	movs	r2, #1
 801a222:	601a      	str	r2, [r3, #0]
 801a224:	e7d8      	b.n	801a1d8 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 801a226:	b10c      	cbz	r4, 801a22c <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 801a228:	f7ff fca0 	bl	8019b6c <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801a22c:	4b19      	ldr	r3, [pc, #100]	@ (801a294 <xTaskResumeAll+0xf4>)
 801a22e:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 801a230:	b984      	cbnz	r4, 801a254 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 801a232:	4b17      	ldr	r3, [pc, #92]	@ (801a290 <xTaskResumeAll+0xf0>)
 801a234:	681c      	ldr	r4, [r3, #0]
 801a236:	b1d4      	cbz	r4, 801a26e <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 801a238:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a23c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a240:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801a244:	f3bf 8f4f 	dsb	sy
 801a248:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 801a24c:	2401      	movs	r4, #1
 801a24e:	e00e      	b.n	801a26e <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 801a250:	3c01      	subs	r4, #1
 801a252:	d007      	beq.n	801a264 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 801a254:	f7ff ff18 	bl	801a088 <xTaskIncrementTick>
 801a258:	2800      	cmp	r0, #0
 801a25a:	d0f9      	beq.n	801a250 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 801a25c:	4b0c      	ldr	r3, [pc, #48]	@ (801a290 <xTaskResumeAll+0xf0>)
 801a25e:	2201      	movs	r2, #1
 801a260:	601a      	str	r2, [r3, #0]
 801a262:	e7f5      	b.n	801a250 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 801a264:	4b0b      	ldr	r3, [pc, #44]	@ (801a294 <xTaskResumeAll+0xf4>)
 801a266:	2200      	movs	r2, #0
 801a268:	601a      	str	r2, [r3, #0]
 801a26a:	e7e2      	b.n	801a232 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 801a26c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 801a26e:	f000 fd13 	bl	801ac98 <vPortExitCritical>
}
 801a272:	4620      	mov	r0, r4
 801a274:	bd38      	pop	{r3, r4, r5, pc}
 801a276:	bf00      	nop
 801a278:	200036fc 	.word	0x200036fc
 801a27c:	20003724 	.word	0x20003724
 801a280:	20003754 	.word	0x20003754
 801a284:	2000371c 	.word	0x2000371c
 801a288:	20003798 	.word	0x20003798
 801a28c:	20003bf8 	.word	0x20003bf8
 801a290:	20003710 	.word	0x20003710
 801a294:	20003714 	.word	0x20003714

0801a298 <vTaskDelay>:
	{
 801a298:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 801a29a:	b1a8      	cbz	r0, 801a2c8 <vTaskDelay+0x30>
 801a29c:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 801a29e:	4b10      	ldr	r3, [pc, #64]	@ (801a2e0 <vTaskDelay+0x48>)
 801a2a0:	681b      	ldr	r3, [r3, #0]
 801a2a2:	b143      	cbz	r3, 801a2b6 <vTaskDelay+0x1e>
 801a2a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a2a8:	f383 8811 	msr	BASEPRI, r3
 801a2ac:	f3bf 8f6f 	isb	sy
 801a2b0:	f3bf 8f4f 	dsb	sy
 801a2b4:	e7fe      	b.n	801a2b4 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 801a2b6:	f7ff fed9 	bl	801a06c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801a2ba:	2100      	movs	r1, #0
 801a2bc:	4620      	mov	r0, r4
 801a2be:	f7ff fdd1 	bl	8019e64 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 801a2c2:	f7ff ff6d 	bl	801a1a0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 801a2c6:	b948      	cbnz	r0, 801a2dc <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 801a2c8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a2cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a2d0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801a2d4:	f3bf 8f4f 	dsb	sy
 801a2d8:	f3bf 8f6f 	isb	sy
	}
 801a2dc:	bd10      	pop	{r4, pc}
 801a2de:	bf00      	nop
 801a2e0:	200036fc 	.word	0x200036fc

0801a2e4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801a2e4:	4b22      	ldr	r3, [pc, #136]	@ (801a370 <vTaskSwitchContext+0x8c>)
 801a2e6:	681b      	ldr	r3, [r3, #0]
 801a2e8:	b11b      	cbz	r3, 801a2f2 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 801a2ea:	4b22      	ldr	r3, [pc, #136]	@ (801a374 <vTaskSwitchContext+0x90>)
 801a2ec:	2201      	movs	r2, #1
 801a2ee:	601a      	str	r2, [r3, #0]
 801a2f0:	4770      	bx	lr
		xYieldPending = pdFALSE;
 801a2f2:	4b20      	ldr	r3, [pc, #128]	@ (801a374 <vTaskSwitchContext+0x90>)
 801a2f4:	2200      	movs	r2, #0
 801a2f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a2f8:	4b1f      	ldr	r3, [pc, #124]	@ (801a378 <vTaskSwitchContext+0x94>)
 801a2fa:	681b      	ldr	r3, [r3, #0]
 801a2fc:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 801a300:	008a      	lsls	r2, r1, #2
 801a302:	491e      	ldr	r1, [pc, #120]	@ (801a37c <vTaskSwitchContext+0x98>)
 801a304:	588a      	ldr	r2, [r1, r2]
 801a306:	b95a      	cbnz	r2, 801a320 <vTaskSwitchContext+0x3c>
 801a308:	b10b      	cbz	r3, 801a30e <vTaskSwitchContext+0x2a>
 801a30a:	3b01      	subs	r3, #1
 801a30c:	e7f6      	b.n	801a2fc <vTaskSwitchContext+0x18>
 801a30e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a312:	f383 8811 	msr	BASEPRI, r3
 801a316:	f3bf 8f6f 	isb	sy
 801a31a:	f3bf 8f4f 	dsb	sy
 801a31e:	e7fe      	b.n	801a31e <vTaskSwitchContext+0x3a>
 801a320:	4608      	mov	r0, r1
 801a322:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 801a326:	008a      	lsls	r2, r1, #2
 801a328:	4402      	add	r2, r0
 801a32a:	6851      	ldr	r1, [r2, #4]
 801a32c:	6849      	ldr	r1, [r1, #4]
 801a32e:	6051      	str	r1, [r2, #4]
 801a330:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 801a334:	ea4f 028c 	mov.w	r2, ip, lsl #2
 801a338:	3208      	adds	r2, #8
 801a33a:	4402      	add	r2, r0
 801a33c:	4291      	cmp	r1, r2
 801a33e:	d00f      	beq.n	801a360 <vTaskSwitchContext+0x7c>
 801a340:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801a344:	0091      	lsls	r1, r2, #2
 801a346:	4a0d      	ldr	r2, [pc, #52]	@ (801a37c <vTaskSwitchContext+0x98>)
 801a348:	440a      	add	r2, r1
 801a34a:	6852      	ldr	r2, [r2, #4]
 801a34c:	68d1      	ldr	r1, [r2, #12]
 801a34e:	4a0c      	ldr	r2, [pc, #48]	@ (801a380 <vTaskSwitchContext+0x9c>)
 801a350:	6011      	str	r1, [r2, #0]
 801a352:	4909      	ldr	r1, [pc, #36]	@ (801a378 <vTaskSwitchContext+0x94>)
 801a354:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801a356:	6813      	ldr	r3, [r2, #0]
 801a358:	3358      	adds	r3, #88	@ 0x58
 801a35a:	4a0a      	ldr	r2, [pc, #40]	@ (801a384 <vTaskSwitchContext+0xa0>)
 801a35c:	6013      	str	r3, [r2, #0]
}
 801a35e:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a360:	6848      	ldr	r0, [r1, #4]
 801a362:	4662      	mov	r2, ip
 801a364:	0091      	lsls	r1, r2, #2
 801a366:	4a05      	ldr	r2, [pc, #20]	@ (801a37c <vTaskSwitchContext+0x98>)
 801a368:	440a      	add	r2, r1
 801a36a:	6050      	str	r0, [r2, #4]
 801a36c:	e7e8      	b.n	801a340 <vTaskSwitchContext+0x5c>
 801a36e:	bf00      	nop
 801a370:	200036fc 	.word	0x200036fc
 801a374:	20003710 	.word	0x20003710
 801a378:	2000371c 	.word	0x2000371c
 801a37c:	20003798 	.word	0x20003798
 801a380:	20003bf8 	.word	0x20003bf8
 801a384:	200002d8 	.word	0x200002d8

0801a388 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 801a388:	b158      	cbz	r0, 801a3a2 <vTaskPlaceOnEventList+0x1a>
{
 801a38a:	b510      	push	{r4, lr}
 801a38c:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801a38e:	4a09      	ldr	r2, [pc, #36]	@ (801a3b4 <vTaskPlaceOnEventList+0x2c>)
 801a390:	6811      	ldr	r1, [r2, #0]
 801a392:	3118      	adds	r1, #24
 801a394:	f7fe fddf 	bl	8018f56 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801a398:	2101      	movs	r1, #1
 801a39a:	4620      	mov	r0, r4
 801a39c:	f7ff fd62 	bl	8019e64 <prvAddCurrentTaskToDelayedList>
}
 801a3a0:	bd10      	pop	{r4, pc}
 801a3a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a3a6:	f383 8811 	msr	BASEPRI, r3
 801a3aa:	f3bf 8f6f 	isb	sy
 801a3ae:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 801a3b2:	e7fe      	b.n	801a3b2 <vTaskPlaceOnEventList+0x2a>
 801a3b4:	20003bf8 	.word	0x20003bf8

0801a3b8 <vTaskPlaceOnEventListRestricted>:
	{
 801a3b8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 801a3ba:	b170      	cbz	r0, 801a3da <vTaskPlaceOnEventListRestricted+0x22>
 801a3bc:	460d      	mov	r5, r1
 801a3be:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801a3c0:	4a0a      	ldr	r2, [pc, #40]	@ (801a3ec <vTaskPlaceOnEventListRestricted+0x34>)
 801a3c2:	6811      	ldr	r1, [r2, #0]
 801a3c4:	3118      	adds	r1, #24
 801a3c6:	f7fe fdbb 	bl	8018f40 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 801a3ca:	b10c      	cbz	r4, 801a3d0 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 801a3cc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801a3d0:	4621      	mov	r1, r4
 801a3d2:	4628      	mov	r0, r5
 801a3d4:	f7ff fd46 	bl	8019e64 <prvAddCurrentTaskToDelayedList>
	}
 801a3d8:	bd38      	pop	{r3, r4, r5, pc}
 801a3da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a3de:	f383 8811 	msr	BASEPRI, r3
 801a3e2:	f3bf 8f6f 	isb	sy
 801a3e6:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 801a3ea:	e7fe      	b.n	801a3ea <vTaskPlaceOnEventListRestricted+0x32>
 801a3ec:	20003bf8 	.word	0x20003bf8

0801a3f0 <xTaskRemoveFromEventList>:
{
 801a3f0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a3f2:	68c3      	ldr	r3, [r0, #12]
 801a3f4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 801a3f6:	b324      	cbz	r4, 801a442 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801a3f8:	f104 0518 	add.w	r5, r4, #24
 801a3fc:	4628      	mov	r0, r5
 801a3fe:	f7fe fdc3 	bl	8018f88 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a402:	4b18      	ldr	r3, [pc, #96]	@ (801a464 <xTaskRemoveFromEventList+0x74>)
 801a404:	681b      	ldr	r3, [r3, #0]
 801a406:	bb2b      	cbnz	r3, 801a454 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801a408:	1d25      	adds	r5, r4, #4
 801a40a:	4628      	mov	r0, r5
 801a40c:	f7fe fdbc 	bl	8018f88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801a410:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801a412:	4b15      	ldr	r3, [pc, #84]	@ (801a468 <xTaskRemoveFromEventList+0x78>)
 801a414:	681b      	ldr	r3, [r3, #0]
 801a416:	4298      	cmp	r0, r3
 801a418:	d901      	bls.n	801a41e <xTaskRemoveFromEventList+0x2e>
 801a41a:	4b13      	ldr	r3, [pc, #76]	@ (801a468 <xTaskRemoveFromEventList+0x78>)
 801a41c:	6018      	str	r0, [r3, #0]
 801a41e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a422:	4629      	mov	r1, r5
 801a424:	4b11      	ldr	r3, [pc, #68]	@ (801a46c <xTaskRemoveFromEventList+0x7c>)
 801a426:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801a42a:	f7fe fd89 	bl	8018f40 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801a42e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801a430:	4b0f      	ldr	r3, [pc, #60]	@ (801a470 <xTaskRemoveFromEventList+0x80>)
 801a432:	681b      	ldr	r3, [r3, #0]
 801a434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a436:	429a      	cmp	r2, r3
 801a438:	d911      	bls.n	801a45e <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 801a43a:	2001      	movs	r0, #1
 801a43c:	4b0d      	ldr	r3, [pc, #52]	@ (801a474 <xTaskRemoveFromEventList+0x84>)
 801a43e:	6018      	str	r0, [r3, #0]
}
 801a440:	bd38      	pop	{r3, r4, r5, pc}
 801a442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a446:	f383 8811 	msr	BASEPRI, r3
 801a44a:	f3bf 8f6f 	isb	sy
 801a44e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 801a452:	e7fe      	b.n	801a452 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801a454:	4629      	mov	r1, r5
 801a456:	4808      	ldr	r0, [pc, #32]	@ (801a478 <xTaskRemoveFromEventList+0x88>)
 801a458:	f7fe fd72 	bl	8018f40 <vListInsertEnd>
 801a45c:	e7e7      	b.n	801a42e <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 801a45e:	2000      	movs	r0, #0
	return xReturn;
 801a460:	e7ee      	b.n	801a440 <xTaskRemoveFromEventList+0x50>
 801a462:	bf00      	nop
 801a464:	200036fc 	.word	0x200036fc
 801a468:	2000371c 	.word	0x2000371c
 801a46c:	20003798 	.word	0x20003798
 801a470:	20003bf8 	.word	0x20003bf8
 801a474:	20003710 	.word	0x20003710
 801a478:	20003754 	.word	0x20003754

0801a47c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801a47c:	4b03      	ldr	r3, [pc, #12]	@ (801a48c <vTaskInternalSetTimeOutState+0x10>)
 801a47e:	681b      	ldr	r3, [r3, #0]
 801a480:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801a482:	4b03      	ldr	r3, [pc, #12]	@ (801a490 <vTaskInternalSetTimeOutState+0x14>)
 801a484:	681b      	ldr	r3, [r3, #0]
 801a486:	6043      	str	r3, [r0, #4]
}
 801a488:	4770      	bx	lr
 801a48a:	bf00      	nop
 801a48c:	2000370c 	.word	0x2000370c
 801a490:	20003720 	.word	0x20003720

0801a494 <xTaskCheckForTimeOut>:
{
 801a494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 801a496:	b1c8      	cbz	r0, 801a4cc <xTaskCheckForTimeOut+0x38>
 801a498:	460c      	mov	r4, r1
 801a49a:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 801a49c:	b1f9      	cbz	r1, 801a4de <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 801a49e:	f000 fbd9 	bl	801ac54 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 801a4a2:	4b1b      	ldr	r3, [pc, #108]	@ (801a510 <xTaskCheckForTimeOut+0x7c>)
 801a4a4:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801a4a6:	686b      	ldr	r3, [r5, #4]
 801a4a8:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 801a4aa:	6822      	ldr	r2, [r4, #0]
 801a4ac:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801a4b0:	d026      	beq.n	801a500 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801a4b2:	4e18      	ldr	r6, [pc, #96]	@ (801a514 <xTaskCheckForTimeOut+0x80>)
 801a4b4:	6836      	ldr	r6, [r6, #0]
 801a4b6:	682f      	ldr	r7, [r5, #0]
 801a4b8:	42b7      	cmp	r7, r6
 801a4ba:	d001      	beq.n	801a4c0 <xTaskCheckForTimeOut+0x2c>
 801a4bc:	428b      	cmp	r3, r1
 801a4be:	d924      	bls.n	801a50a <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801a4c0:	4282      	cmp	r2, r0
 801a4c2:	d815      	bhi.n	801a4f0 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 801a4c4:	2300      	movs	r3, #0
 801a4c6:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 801a4c8:	2401      	movs	r4, #1
 801a4ca:	e01a      	b.n	801a502 <xTaskCheckForTimeOut+0x6e>
 801a4cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a4d0:	f383 8811 	msr	BASEPRI, r3
 801a4d4:	f3bf 8f6f 	isb	sy
 801a4d8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 801a4dc:	e7fe      	b.n	801a4dc <xTaskCheckForTimeOut+0x48>
 801a4de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a4e2:	f383 8811 	msr	BASEPRI, r3
 801a4e6:	f3bf 8f6f 	isb	sy
 801a4ea:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 801a4ee:	e7fe      	b.n	801a4ee <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 801a4f0:	1a5b      	subs	r3, r3, r1
 801a4f2:	4413      	add	r3, r2
 801a4f4:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801a4f6:	4628      	mov	r0, r5
 801a4f8:	f7ff ffc0 	bl	801a47c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801a4fc:	2400      	movs	r4, #0
 801a4fe:	e000      	b.n	801a502 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 801a500:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 801a502:	f000 fbc9 	bl	801ac98 <vPortExitCritical>
}
 801a506:	4620      	mov	r0, r4
 801a508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 801a50a:	2401      	movs	r4, #1
 801a50c:	e7f9      	b.n	801a502 <xTaskCheckForTimeOut+0x6e>
 801a50e:	bf00      	nop
 801a510:	20003720 	.word	0x20003720
 801a514:	2000370c 	.word	0x2000370c

0801a518 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 801a518:	4b01      	ldr	r3, [pc, #4]	@ (801a520 <vTaskMissedYield+0x8>)
 801a51a:	2201      	movs	r2, #1
 801a51c:	601a      	str	r2, [r3, #0]
}
 801a51e:	4770      	bx	lr
 801a520:	20003710 	.word	0x20003710

0801a524 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 801a524:	4b01      	ldr	r3, [pc, #4]	@ (801a52c <xTaskGetCurrentTaskHandle+0x8>)
 801a526:	6818      	ldr	r0, [r3, #0]
	}
 801a528:	4770      	bx	lr
 801a52a:	bf00      	nop
 801a52c:	20003bf8 	.word	0x20003bf8

0801a530 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 801a530:	4b05      	ldr	r3, [pc, #20]	@ (801a548 <xTaskGetSchedulerState+0x18>)
 801a532:	681b      	ldr	r3, [r3, #0]
 801a534:	b133      	cbz	r3, 801a544 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a536:	4b05      	ldr	r3, [pc, #20]	@ (801a54c <xTaskGetSchedulerState+0x1c>)
 801a538:	681b      	ldr	r3, [r3, #0]
 801a53a:	b10b      	cbz	r3, 801a540 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 801a53c:	2000      	movs	r0, #0
	}
 801a53e:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 801a540:	2002      	movs	r0, #2
 801a542:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 801a544:	2001      	movs	r0, #1
 801a546:	4770      	bx	lr
 801a548:	20003718 	.word	0x20003718
 801a54c:	200036fc 	.word	0x200036fc

0801a550 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 801a550:	2800      	cmp	r0, #0
 801a552:	d03e      	beq.n	801a5d2 <xTaskPriorityInherit+0x82>
	{
 801a554:	b538      	push	{r3, r4, r5, lr}
 801a556:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801a558:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801a55a:	4a20      	ldr	r2, [pc, #128]	@ (801a5dc <xTaskPriorityInherit+0x8c>)
 801a55c:	6812      	ldr	r2, [r2, #0]
 801a55e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801a560:	4293      	cmp	r3, r2
 801a562:	d22e      	bcs.n	801a5c2 <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801a564:	6982      	ldr	r2, [r0, #24]
 801a566:	2a00      	cmp	r2, #0
 801a568:	db05      	blt.n	801a576 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a56a:	4a1c      	ldr	r2, [pc, #112]	@ (801a5dc <xTaskPriorityInherit+0x8c>)
 801a56c:	6812      	ldr	r2, [r2, #0]
 801a56e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801a570:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 801a574:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801a576:	6961      	ldr	r1, [r4, #20]
 801a578:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801a57c:	4a18      	ldr	r2, [pc, #96]	@ (801a5e0 <xTaskPriorityInherit+0x90>)
 801a57e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a582:	4299      	cmp	r1, r3
 801a584:	d005      	beq.n	801a592 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801a586:	4b15      	ldr	r3, [pc, #84]	@ (801a5dc <xTaskPriorityInherit+0x8c>)
 801a588:	681b      	ldr	r3, [r3, #0]
 801a58a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a58c:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
 801a58e:	2001      	movs	r0, #1
	}
 801a590:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a592:	1d25      	adds	r5, r4, #4
 801a594:	4628      	mov	r0, r5
 801a596:	f7fe fcf7 	bl	8018f88 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801a59a:	4b10      	ldr	r3, [pc, #64]	@ (801a5dc <xTaskPriorityInherit+0x8c>)
 801a59c:	681b      	ldr	r3, [r3, #0]
 801a59e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 801a5a0:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801a5a2:	4b10      	ldr	r3, [pc, #64]	@ (801a5e4 <xTaskPriorityInherit+0x94>)
 801a5a4:	681b      	ldr	r3, [r3, #0]
 801a5a6:	4298      	cmp	r0, r3
 801a5a8:	d901      	bls.n	801a5ae <xTaskPriorityInherit+0x5e>
 801a5aa:	4b0e      	ldr	r3, [pc, #56]	@ (801a5e4 <xTaskPriorityInherit+0x94>)
 801a5ac:	6018      	str	r0, [r3, #0]
 801a5ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a5b2:	4629      	mov	r1, r5
 801a5b4:	4b0a      	ldr	r3, [pc, #40]	@ (801a5e0 <xTaskPriorityInherit+0x90>)
 801a5b6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801a5ba:	f7fe fcc1 	bl	8018f40 <vListInsertEnd>
				xReturn = pdTRUE;
 801a5be:	2001      	movs	r0, #1
 801a5c0:	e7e6      	b.n	801a590 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801a5c2:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 801a5c4:	4b05      	ldr	r3, [pc, #20]	@ (801a5dc <xTaskPriorityInherit+0x8c>)
 801a5c6:	681b      	ldr	r3, [r3, #0]
 801a5c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a5ca:	429a      	cmp	r2, r3
 801a5cc:	d303      	bcc.n	801a5d6 <xTaskPriorityInherit+0x86>
	BaseType_t xReturn = pdFALSE;
 801a5ce:	2000      	movs	r0, #0
 801a5d0:	e7de      	b.n	801a590 <xTaskPriorityInherit+0x40>
 801a5d2:	2000      	movs	r0, #0
	}
 801a5d4:	4770      	bx	lr
					xReturn = pdTRUE;
 801a5d6:	2001      	movs	r0, #1
		return xReturn;
 801a5d8:	e7da      	b.n	801a590 <xTaskPriorityInherit+0x40>
 801a5da:	bf00      	nop
 801a5dc:	20003bf8 	.word	0x20003bf8
 801a5e0:	20003798 	.word	0x20003798
 801a5e4:	2000371c 	.word	0x2000371c

0801a5e8 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 801a5e8:	2800      	cmp	r0, #0
 801a5ea:	d03b      	beq.n	801a664 <xTaskPriorityDisinherit+0x7c>
	{
 801a5ec:	b538      	push	{r3, r4, r5, lr}
 801a5ee:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 801a5f0:	4b1e      	ldr	r3, [pc, #120]	@ (801a66c <xTaskPriorityDisinherit+0x84>)
 801a5f2:	681b      	ldr	r3, [r3, #0]
 801a5f4:	4283      	cmp	r3, r0
 801a5f6:	d008      	beq.n	801a60a <xTaskPriorityDisinherit+0x22>
 801a5f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a5fc:	f383 8811 	msr	BASEPRI, r3
 801a600:	f3bf 8f6f 	isb	sy
 801a604:	f3bf 8f4f 	dsb	sy
 801a608:	e7fe      	b.n	801a608 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 801a60a:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801a60c:	b943      	cbnz	r3, 801a620 <xTaskPriorityDisinherit+0x38>
 801a60e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a612:	f383 8811 	msr	BASEPRI, r3
 801a616:	f3bf 8f6f 	isb	sy
 801a61a:	f3bf 8f4f 	dsb	sy
 801a61e:	e7fe      	b.n	801a61e <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 801a620:	3b01      	subs	r3, #1
 801a622:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801a624:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801a626:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 801a628:	4291      	cmp	r1, r2
 801a62a:	d01d      	beq.n	801a668 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801a62c:	b10b      	cbz	r3, 801a632 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 801a62e:	2000      	movs	r0, #0
	}
 801a630:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a632:	1d05      	adds	r5, r0, #4
 801a634:	4628      	mov	r0, r5
 801a636:	f7fe fca7 	bl	8018f88 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801a63a:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 801a63c:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a63e:	f1c0 0338 	rsb	r3, r0, #56	@ 0x38
 801a642:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 801a644:	4b0a      	ldr	r3, [pc, #40]	@ (801a670 <xTaskPriorityDisinherit+0x88>)
 801a646:	681b      	ldr	r3, [r3, #0]
 801a648:	4298      	cmp	r0, r3
 801a64a:	d901      	bls.n	801a650 <xTaskPriorityDisinherit+0x68>
 801a64c:	4b08      	ldr	r3, [pc, #32]	@ (801a670 <xTaskPriorityDisinherit+0x88>)
 801a64e:	6018      	str	r0, [r3, #0]
 801a650:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a654:	4629      	mov	r1, r5
 801a656:	4b07      	ldr	r3, [pc, #28]	@ (801a674 <xTaskPriorityDisinherit+0x8c>)
 801a658:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801a65c:	f7fe fc70 	bl	8018f40 <vListInsertEnd>
					xReturn = pdTRUE;
 801a660:	2001      	movs	r0, #1
 801a662:	e7e5      	b.n	801a630 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 801a664:	2000      	movs	r0, #0
	}
 801a666:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 801a668:	2000      	movs	r0, #0
 801a66a:	e7e1      	b.n	801a630 <xTaskPriorityDisinherit+0x48>
 801a66c:	20003bf8 	.word	0x20003bf8
 801a670:	2000371c 	.word	0x2000371c
 801a674:	20003798 	.word	0x20003798

0801a678 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 801a678:	2800      	cmp	r0, #0
 801a67a:	d046      	beq.n	801a70a <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 801a67c:	b538      	push	{r3, r4, r5, lr}
 801a67e:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 801a680:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801a682:	b943      	cbnz	r3, 801a696 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 801a684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a688:	f383 8811 	msr	BASEPRI, r3
 801a68c:	f3bf 8f6f 	isb	sy
 801a690:	f3bf 8f4f 	dsb	sy
 801a694:	e7fe      	b.n	801a694 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801a696:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 801a698:	428a      	cmp	r2, r1
 801a69a:	d200      	bcs.n	801a69e <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801a69c:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 801a69e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801a6a0:	4291      	cmp	r1, r2
 801a6a2:	d001      	beq.n	801a6a8 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801a6a4:	2b01      	cmp	r3, #1
 801a6a6:	d000      	beq.n	801a6aa <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 801a6a8:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 801a6aa:	4b18      	ldr	r3, [pc, #96]	@ (801a70c <vTaskPriorityDisinheritAfterTimeout+0x94>)
 801a6ac:	681b      	ldr	r3, [r3, #0]
 801a6ae:	42a3      	cmp	r3, r4
 801a6b0:	d022      	beq.n	801a6f8 <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 801a6b2:	62e2      	str	r2, [r4, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801a6b4:	69a3      	ldr	r3, [r4, #24]
 801a6b6:	2b00      	cmp	r3, #0
 801a6b8:	db02      	blt.n	801a6c0 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a6ba:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 801a6be:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801a6c0:	6962      	ldr	r2, [r4, #20]
 801a6c2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801a6c6:	4b12      	ldr	r3, [pc, #72]	@ (801a710 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 801a6c8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801a6cc:	429a      	cmp	r2, r3
 801a6ce:	d1eb      	bne.n	801a6a8 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a6d0:	1d25      	adds	r5, r4, #4
 801a6d2:	4628      	mov	r0, r5
 801a6d4:	f7fe fc58 	bl	8018f88 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 801a6d8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801a6da:	4b0e      	ldr	r3, [pc, #56]	@ (801a714 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 801a6dc:	681b      	ldr	r3, [r3, #0]
 801a6de:	4298      	cmp	r0, r3
 801a6e0:	d901      	bls.n	801a6e6 <vTaskPriorityDisinheritAfterTimeout+0x6e>
 801a6e2:	4b0c      	ldr	r3, [pc, #48]	@ (801a714 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 801a6e4:	6018      	str	r0, [r3, #0]
 801a6e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a6ea:	4629      	mov	r1, r5
 801a6ec:	4b08      	ldr	r3, [pc, #32]	@ (801a710 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 801a6ee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801a6f2:	f7fe fc25 	bl	8018f40 <vListInsertEnd>
	}
 801a6f6:	e7d7      	b.n	801a6a8 <vTaskPriorityDisinheritAfterTimeout+0x30>
 801a6f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a6fc:	f383 8811 	msr	BASEPRI, r3
 801a700:	f3bf 8f6f 	isb	sy
 801a704:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 801a708:	e7fe      	b.n	801a708 <vTaskPriorityDisinheritAfterTimeout+0x90>
 801a70a:	4770      	bx	lr
 801a70c:	20003bf8 	.word	0x20003bf8
 801a710:	20003798 	.word	0x20003798
 801a714:	2000371c 	.word	0x2000371c

0801a718 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 801a718:	4b05      	ldr	r3, [pc, #20]	@ (801a730 <pvTaskIncrementMutexHeldCount+0x18>)
 801a71a:	681b      	ldr	r3, [r3, #0]
 801a71c:	b123      	cbz	r3, 801a728 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 801a71e:	4b04      	ldr	r3, [pc, #16]	@ (801a730 <pvTaskIncrementMutexHeldCount+0x18>)
 801a720:	681a      	ldr	r2, [r3, #0]
 801a722:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 801a724:	3301      	adds	r3, #1
 801a726:	6513      	str	r3, [r2, #80]	@ 0x50
		return pxCurrentTCB;
 801a728:	4b01      	ldr	r3, [pc, #4]	@ (801a730 <pvTaskIncrementMutexHeldCount+0x18>)
 801a72a:	6818      	ldr	r0, [r3, #0]
	}
 801a72c:	4770      	bx	lr
 801a72e:	bf00      	nop
 801a730:	20003bf8 	.word	0x20003bf8

0801a734 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801a734:	4b06      	ldr	r3, [pc, #24]	@ (801a750 <prvGetNextExpireTime+0x1c>)
 801a736:	681a      	ldr	r2, [r3, #0]
 801a738:	6813      	ldr	r3, [r2, #0]
 801a73a:	b92b      	cbnz	r3, 801a748 <prvGetNextExpireTime+0x14>
 801a73c:	2301      	movs	r3, #1
 801a73e:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 801a740:	b923      	cbnz	r3, 801a74c <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801a742:	68d3      	ldr	r3, [r2, #12]
 801a744:	6818      	ldr	r0, [r3, #0]
 801a746:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801a748:	2300      	movs	r3, #0
 801a74a:	e7f8      	b.n	801a73e <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801a74c:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 801a74e:	4770      	bx	lr
 801a750:	20003cfc 	.word	0x20003cfc

0801a754 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801a754:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801a756:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801a758:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 801a75a:	4291      	cmp	r1, r2
 801a75c:	d80c      	bhi.n	801a778 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a75e:	1ad2      	subs	r2, r2, r3
 801a760:	6983      	ldr	r3, [r0, #24]
 801a762:	429a      	cmp	r2, r3
 801a764:	d301      	bcc.n	801a76a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801a766:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 801a768:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801a76a:	1d01      	adds	r1, r0, #4
 801a76c:	4b09      	ldr	r3, [pc, #36]	@ (801a794 <prvInsertTimerInActiveList+0x40>)
 801a76e:	6818      	ldr	r0, [r3, #0]
 801a770:	f7fe fbf1 	bl	8018f56 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 801a774:	2000      	movs	r0, #0
 801a776:	e7f7      	b.n	801a768 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801a778:	429a      	cmp	r2, r3
 801a77a:	d201      	bcs.n	801a780 <prvInsertTimerInActiveList+0x2c>
 801a77c:	4299      	cmp	r1, r3
 801a77e:	d206      	bcs.n	801a78e <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801a780:	1d01      	adds	r1, r0, #4
 801a782:	4b05      	ldr	r3, [pc, #20]	@ (801a798 <prvInsertTimerInActiveList+0x44>)
 801a784:	6818      	ldr	r0, [r3, #0]
 801a786:	f7fe fbe6 	bl	8018f56 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 801a78a:	2000      	movs	r0, #0
 801a78c:	e7ec      	b.n	801a768 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 801a78e:	2001      	movs	r0, #1
	return xProcessTimerNow;
 801a790:	e7ea      	b.n	801a768 <prvInsertTimerInActiveList+0x14>
 801a792:	bf00      	nop
 801a794:	20003cf8 	.word	0x20003cf8
 801a798:	20003cfc 	.word	0x20003cfc

0801a79c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801a79c:	b530      	push	{r4, r5, lr}
 801a79e:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801a7a0:	f000 fa58 	bl	801ac54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801a7a4:	4b11      	ldr	r3, [pc, #68]	@ (801a7ec <prvCheckForValidListAndQueue+0x50>)
 801a7a6:	681b      	ldr	r3, [r3, #0]
 801a7a8:	b11b      	cbz	r3, 801a7b2 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801a7aa:	f000 fa75 	bl	801ac98 <vPortExitCritical>
}
 801a7ae:	b003      	add	sp, #12
 801a7b0:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 801a7b2:	4d0f      	ldr	r5, [pc, #60]	@ (801a7f0 <prvCheckForValidListAndQueue+0x54>)
 801a7b4:	4628      	mov	r0, r5
 801a7b6:	f7fe fbb5 	bl	8018f24 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801a7ba:	4c0e      	ldr	r4, [pc, #56]	@ (801a7f4 <prvCheckForValidListAndQueue+0x58>)
 801a7bc:	4620      	mov	r0, r4
 801a7be:	f7fe fbb1 	bl	8018f24 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801a7c2:	4b0d      	ldr	r3, [pc, #52]	@ (801a7f8 <prvCheckForValidListAndQueue+0x5c>)
 801a7c4:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801a7c6:	4b0d      	ldr	r3, [pc, #52]	@ (801a7fc <prvCheckForValidListAndQueue+0x60>)
 801a7c8:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801a7ca:	2300      	movs	r3, #0
 801a7cc:	9300      	str	r3, [sp, #0]
 801a7ce:	4b0c      	ldr	r3, [pc, #48]	@ (801a800 <prvCheckForValidListAndQueue+0x64>)
 801a7d0:	4a0c      	ldr	r2, [pc, #48]	@ (801a804 <prvCheckForValidListAndQueue+0x68>)
 801a7d2:	2110      	movs	r1, #16
 801a7d4:	200a      	movs	r0, #10
 801a7d6:	f7fe fce5 	bl	80191a4 <xQueueGenericCreateStatic>
 801a7da:	4b04      	ldr	r3, [pc, #16]	@ (801a7ec <prvCheckForValidListAndQueue+0x50>)
 801a7dc:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 801a7de:	2800      	cmp	r0, #0
 801a7e0:	d0e3      	beq.n	801a7aa <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801a7e2:	4909      	ldr	r1, [pc, #36]	@ (801a808 <prvCheckForValidListAndQueue+0x6c>)
 801a7e4:	f7ff f984 	bl	8019af0 <vQueueAddToRegistry>
 801a7e8:	e7df      	b.n	801a7aa <prvCheckForValidListAndQueue+0xe>
 801a7ea:	bf00      	nop
 801a7ec:	20003cf4 	.word	0x20003cf4
 801a7f0:	20003d14 	.word	0x20003d14
 801a7f4:	20003d00 	.word	0x20003d00
 801a7f8:	20003cfc 	.word	0x20003cfc
 801a7fc:	20003cf8 	.word	0x20003cf8
 801a800:	20003bfc 	.word	0x20003bfc
 801a804:	20003c4c 	.word	0x20003c4c
 801a808:	08039824 	.word	0x08039824

0801a80c <xTimerCreateTimerTask>:
{
 801a80c:	b510      	push	{r4, lr}
 801a80e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 801a810:	f7ff ffc4 	bl	801a79c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 801a814:	4b12      	ldr	r3, [pc, #72]	@ (801a860 <xTimerCreateTimerTask+0x54>)
 801a816:	681b      	ldr	r3, [r3, #0]
 801a818:	b1cb      	cbz	r3, 801a84e <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801a81a:	2400      	movs	r4, #0
 801a81c:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801a81e:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801a820:	aa07      	add	r2, sp, #28
 801a822:	a906      	add	r1, sp, #24
 801a824:	a805      	add	r0, sp, #20
 801a826:	f7fe fb71 	bl	8018f0c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801a82a:	9b05      	ldr	r3, [sp, #20]
 801a82c:	9302      	str	r3, [sp, #8]
 801a82e:	9b06      	ldr	r3, [sp, #24]
 801a830:	9301      	str	r3, [sp, #4]
 801a832:	2302      	movs	r3, #2
 801a834:	9300      	str	r3, [sp, #0]
 801a836:	4623      	mov	r3, r4
 801a838:	9a07      	ldr	r2, [sp, #28]
 801a83a:	490a      	ldr	r1, [pc, #40]	@ (801a864 <xTimerCreateTimerTask+0x58>)
 801a83c:	480a      	ldr	r0, [pc, #40]	@ (801a868 <xTimerCreateTimerTask+0x5c>)
 801a83e:	f7ff fb4f 	bl	8019ee0 <xTaskCreateStatic>
 801a842:	4b0a      	ldr	r3, [pc, #40]	@ (801a86c <xTimerCreateTimerTask+0x60>)
 801a844:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 801a846:	b110      	cbz	r0, 801a84e <xTimerCreateTimerTask+0x42>
}
 801a848:	2001      	movs	r0, #1
 801a84a:	b008      	add	sp, #32
 801a84c:	bd10      	pop	{r4, pc}
 801a84e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a852:	f383 8811 	msr	BASEPRI, r3
 801a856:	f3bf 8f6f 	isb	sy
 801a85a:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 801a85e:	e7fe      	b.n	801a85e <xTimerCreateTimerTask+0x52>
 801a860:	20003cf4 	.word	0x20003cf4
 801a864:	0803982c 	.word	0x0803982c
 801a868:	0801ab71 	.word	0x0801ab71
 801a86c:	20003cf0 	.word	0x20003cf0

0801a870 <xTimerGenericCommand>:
	configASSERT( xTimer );
 801a870:	b1b8      	cbz	r0, 801a8a2 <xTimerGenericCommand+0x32>
 801a872:	469c      	mov	ip, r3
 801a874:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 801a876:	4818      	ldr	r0, [pc, #96]	@ (801a8d8 <xTimerGenericCommand+0x68>)
 801a878:	6800      	ldr	r0, [r0, #0]
 801a87a:	b358      	cbz	r0, 801a8d4 <xTimerGenericCommand+0x64>
{
 801a87c:	b500      	push	{lr}
 801a87e:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 801a880:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801a882:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801a884:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801a886:	2905      	cmp	r1, #5
 801a888:	dc1c      	bgt.n	801a8c4 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801a88a:	f7ff fe51 	bl	801a530 <xTaskGetSchedulerState>
 801a88e:	2802      	cmp	r0, #2
 801a890:	d010      	beq.n	801a8b4 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801a892:	2300      	movs	r3, #0
 801a894:	461a      	mov	r2, r3
 801a896:	4669      	mov	r1, sp
 801a898:	480f      	ldr	r0, [pc, #60]	@ (801a8d8 <xTimerGenericCommand+0x68>)
 801a89a:	6800      	ldr	r0, [r0, #0]
 801a89c:	f7fe fcf0 	bl	8019280 <xQueueGenericSend>
 801a8a0:	e015      	b.n	801a8ce <xTimerGenericCommand+0x5e>
 801a8a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a8a6:	f383 8811 	msr	BASEPRI, r3
 801a8aa:	f3bf 8f6f 	isb	sy
 801a8ae:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 801a8b2:	e7fe      	b.n	801a8b2 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801a8b4:	2300      	movs	r3, #0
 801a8b6:	9a06      	ldr	r2, [sp, #24]
 801a8b8:	4669      	mov	r1, sp
 801a8ba:	4807      	ldr	r0, [pc, #28]	@ (801a8d8 <xTimerGenericCommand+0x68>)
 801a8bc:	6800      	ldr	r0, [r0, #0]
 801a8be:	f7fe fcdf 	bl	8019280 <xQueueGenericSend>
 801a8c2:	e004      	b.n	801a8ce <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801a8c4:	2300      	movs	r3, #0
 801a8c6:	4662      	mov	r2, ip
 801a8c8:	4669      	mov	r1, sp
 801a8ca:	f7fe fde3 	bl	8019494 <xQueueGenericSendFromISR>
}
 801a8ce:	b005      	add	sp, #20
 801a8d0:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 801a8d4:	2000      	movs	r0, #0
}
 801a8d6:	4770      	bx	lr
 801a8d8:	20003cf4 	.word	0x20003cf4

0801a8dc <prvSwitchTimerLists>:
{
 801a8dc:	b570      	push	{r4, r5, r6, lr}
 801a8de:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801a8e0:	4b1b      	ldr	r3, [pc, #108]	@ (801a950 <prvSwitchTimerLists+0x74>)
 801a8e2:	681b      	ldr	r3, [r3, #0]
 801a8e4:	681a      	ldr	r2, [r3, #0]
 801a8e6:	b362      	cbz	r2, 801a942 <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801a8e8:	68db      	ldr	r3, [r3, #12]
 801a8ea:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a8ec:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801a8ee:	1d25      	adds	r5, r4, #4
 801a8f0:	4628      	mov	r0, r5
 801a8f2:	f7fe fb49 	bl	8018f88 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801a8f6:	6a23      	ldr	r3, [r4, #32]
 801a8f8:	4620      	mov	r0, r4
 801a8fa:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801a8fc:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801a900:	f013 0f04 	tst.w	r3, #4
 801a904:	d0ec      	beq.n	801a8e0 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801a906:	69a3      	ldr	r3, [r4, #24]
 801a908:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 801a90a:	429e      	cmp	r6, r3
 801a90c:	d207      	bcs.n	801a91e <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801a90e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801a910:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801a912:	4629      	mov	r1, r5
 801a914:	4b0e      	ldr	r3, [pc, #56]	@ (801a950 <prvSwitchTimerLists+0x74>)
 801a916:	6818      	ldr	r0, [r3, #0]
 801a918:	f7fe fb1d 	bl	8018f56 <vListInsert>
 801a91c:	e7e0      	b.n	801a8e0 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801a91e:	2100      	movs	r1, #0
 801a920:	9100      	str	r1, [sp, #0]
 801a922:	460b      	mov	r3, r1
 801a924:	4632      	mov	r2, r6
 801a926:	4620      	mov	r0, r4
 801a928:	f7ff ffa2 	bl	801a870 <xTimerGenericCommand>
				configASSERT( xResult );
 801a92c:	2800      	cmp	r0, #0
 801a92e:	d1d7      	bne.n	801a8e0 <prvSwitchTimerLists+0x4>
 801a930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a934:	f383 8811 	msr	BASEPRI, r3
 801a938:	f3bf 8f6f 	isb	sy
 801a93c:	f3bf 8f4f 	dsb	sy
 801a940:	e7fe      	b.n	801a940 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 801a942:	4a04      	ldr	r2, [pc, #16]	@ (801a954 <prvSwitchTimerLists+0x78>)
 801a944:	6810      	ldr	r0, [r2, #0]
 801a946:	4902      	ldr	r1, [pc, #8]	@ (801a950 <prvSwitchTimerLists+0x74>)
 801a948:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 801a94a:	6013      	str	r3, [r2, #0]
}
 801a94c:	b002      	add	sp, #8
 801a94e:	bd70      	pop	{r4, r5, r6, pc}
 801a950:	20003cfc 	.word	0x20003cfc
 801a954:	20003cf8 	.word	0x20003cf8

0801a958 <prvSampleTimeNow>:
{
 801a958:	b538      	push	{r3, r4, r5, lr}
 801a95a:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 801a95c:	f7ff fb8e 	bl	801a07c <xTaskGetTickCount>
 801a960:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 801a962:	4b07      	ldr	r3, [pc, #28]	@ (801a980 <prvSampleTimeNow+0x28>)
 801a964:	681b      	ldr	r3, [r3, #0]
 801a966:	4283      	cmp	r3, r0
 801a968:	d805      	bhi.n	801a976 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 801a96a:	2300      	movs	r3, #0
 801a96c:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 801a96e:	4b04      	ldr	r3, [pc, #16]	@ (801a980 <prvSampleTimeNow+0x28>)
 801a970:	601c      	str	r4, [r3, #0]
}
 801a972:	4620      	mov	r0, r4
 801a974:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 801a976:	f7ff ffb1 	bl	801a8dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801a97a:	2301      	movs	r3, #1
 801a97c:	602b      	str	r3, [r5, #0]
 801a97e:	e7f6      	b.n	801a96e <prvSampleTimeNow+0x16>
 801a980:	20003cec 	.word	0x20003cec

0801a984 <prvProcessExpiredTimer>:
{
 801a984:	b570      	push	{r4, r5, r6, lr}
 801a986:	b082      	sub	sp, #8
 801a988:	4606      	mov	r6, r0
 801a98a:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a98c:	4917      	ldr	r1, [pc, #92]	@ (801a9ec <prvProcessExpiredTimer+0x68>)
 801a98e:	6809      	ldr	r1, [r1, #0]
 801a990:	68c9      	ldr	r1, [r1, #12]
 801a992:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801a994:	1d20      	adds	r0, r4, #4
 801a996:	f7fe faf7 	bl	8018f88 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801a99a:	f894 c028 	ldrb.w	ip, [r4, #40]	@ 0x28
 801a99e:	f01c 0f04 	tst.w	ip, #4
 801a9a2:	d108      	bne.n	801a9b6 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801a9a4:	f02c 0c01 	bic.w	ip, ip, #1
 801a9a8:	f884 c028 	strb.w	ip, [r4, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801a9ac:	6a23      	ldr	r3, [r4, #32]
 801a9ae:	4620      	mov	r0, r4
 801a9b0:	4798      	blx	r3
}
 801a9b2:	b002      	add	sp, #8
 801a9b4:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801a9b6:	69a1      	ldr	r1, [r4, #24]
 801a9b8:	4633      	mov	r3, r6
 801a9ba:	462a      	mov	r2, r5
 801a9bc:	4431      	add	r1, r6
 801a9be:	4620      	mov	r0, r4
 801a9c0:	f7ff fec8 	bl	801a754 <prvInsertTimerInActiveList>
 801a9c4:	2800      	cmp	r0, #0
 801a9c6:	d0f1      	beq.n	801a9ac <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801a9c8:	2100      	movs	r1, #0
 801a9ca:	9100      	str	r1, [sp, #0]
 801a9cc:	460b      	mov	r3, r1
 801a9ce:	4632      	mov	r2, r6
 801a9d0:	4620      	mov	r0, r4
 801a9d2:	f7ff ff4d 	bl	801a870 <xTimerGenericCommand>
			configASSERT( xResult );
 801a9d6:	2800      	cmp	r0, #0
 801a9d8:	d1e8      	bne.n	801a9ac <prvProcessExpiredTimer+0x28>
 801a9da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a9de:	f383 8811 	msr	BASEPRI, r3
 801a9e2:	f3bf 8f6f 	isb	sy
 801a9e6:	f3bf 8f4f 	dsb	sy
 801a9ea:	e7fe      	b.n	801a9ea <prvProcessExpiredTimer+0x66>
 801a9ec:	20003cfc 	.word	0x20003cfc

0801a9f0 <prvProcessTimerOrBlockTask>:
{
 801a9f0:	b570      	push	{r4, r5, r6, lr}
 801a9f2:	b082      	sub	sp, #8
 801a9f4:	4606      	mov	r6, r0
 801a9f6:	460c      	mov	r4, r1
	vTaskSuspendAll();
 801a9f8:	f7ff fb38 	bl	801a06c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801a9fc:	a801      	add	r0, sp, #4
 801a9fe:	f7ff ffab 	bl	801a958 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 801aa02:	9b01      	ldr	r3, [sp, #4]
 801aa04:	bb33      	cbnz	r3, 801aa54 <prvProcessTimerOrBlockTask+0x64>
 801aa06:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801aa08:	b9e4      	cbnz	r4, 801aa44 <prvProcessTimerOrBlockTask+0x54>
 801aa0a:	42b0      	cmp	r0, r6
 801aa0c:	d213      	bcs.n	801aa36 <prvProcessTimerOrBlockTask+0x46>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801aa0e:	4622      	mov	r2, r4
 801aa10:	1b71      	subs	r1, r6, r5
 801aa12:	4b12      	ldr	r3, [pc, #72]	@ (801aa5c <prvProcessTimerOrBlockTask+0x6c>)
 801aa14:	6818      	ldr	r0, [r3, #0]
 801aa16:	f7ff f87f 	bl	8019b18 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801aa1a:	f7ff fbc1 	bl	801a1a0 <xTaskResumeAll>
 801aa1e:	b9d8      	cbnz	r0, 801aa58 <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 801aa20:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801aa24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801aa28:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801aa2c:	f3bf 8f4f 	dsb	sy
 801aa30:	f3bf 8f6f 	isb	sy
 801aa34:	e010      	b.n	801aa58 <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 801aa36:	f7ff fbb3 	bl	801a1a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801aa3a:	4629      	mov	r1, r5
 801aa3c:	4630      	mov	r0, r6
 801aa3e:	f7ff ffa1 	bl	801a984 <prvProcessExpiredTimer>
 801aa42:	e009      	b.n	801aa58 <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801aa44:	4a06      	ldr	r2, [pc, #24]	@ (801aa60 <prvProcessTimerOrBlockTask+0x70>)
 801aa46:	6812      	ldr	r2, [r2, #0]
 801aa48:	6812      	ldr	r2, [r2, #0]
 801aa4a:	b90a      	cbnz	r2, 801aa50 <prvProcessTimerOrBlockTask+0x60>
 801aa4c:	2401      	movs	r4, #1
 801aa4e:	e7de      	b.n	801aa0e <prvProcessTimerOrBlockTask+0x1e>
 801aa50:	461c      	mov	r4, r3
 801aa52:	e7dc      	b.n	801aa0e <prvProcessTimerOrBlockTask+0x1e>
			( void ) xTaskResumeAll();
 801aa54:	f7ff fba4 	bl	801a1a0 <xTaskResumeAll>
}
 801aa58:	b002      	add	sp, #8
 801aa5a:	bd70      	pop	{r4, r5, r6, pc}
 801aa5c:	20003cf4 	.word	0x20003cf4
 801aa60:	20003cf8 	.word	0x20003cf8

0801aa64 <prvProcessReceivedCommands>:
{
 801aa64:	b510      	push	{r4, lr}
 801aa66:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801aa68:	e002      	b.n	801aa70 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801aa6a:	9b04      	ldr	r3, [sp, #16]
 801aa6c:	2b00      	cmp	r3, #0
 801aa6e:	da0f      	bge.n	801aa90 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801aa70:	2200      	movs	r2, #0
 801aa72:	a904      	add	r1, sp, #16
 801aa74:	4b3d      	ldr	r3, [pc, #244]	@ (801ab6c <prvProcessReceivedCommands+0x108>)
 801aa76:	6818      	ldr	r0, [r3, #0]
 801aa78:	f7fe fd73 	bl	8019562 <xQueueReceive>
 801aa7c:	2800      	cmp	r0, #0
 801aa7e:	d073      	beq.n	801ab68 <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801aa80:	9b04      	ldr	r3, [sp, #16]
 801aa82:	2b00      	cmp	r3, #0
 801aa84:	daf1      	bge.n	801aa6a <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801aa86:	9907      	ldr	r1, [sp, #28]
 801aa88:	9806      	ldr	r0, [sp, #24]
 801aa8a:	9b05      	ldr	r3, [sp, #20]
 801aa8c:	4798      	blx	r3
 801aa8e:	e7ec      	b.n	801aa6a <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801aa90:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801aa92:	6963      	ldr	r3, [r4, #20]
 801aa94:	b113      	cbz	r3, 801aa9c <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801aa96:	1d20      	adds	r0, r4, #4
 801aa98:	f7fe fa76 	bl	8018f88 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801aa9c:	a803      	add	r0, sp, #12
 801aa9e:	f7ff ff5b 	bl	801a958 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 801aaa2:	9b04      	ldr	r3, [sp, #16]
 801aaa4:	2b09      	cmp	r3, #9
 801aaa6:	d8e3      	bhi.n	801aa70 <prvProcessReceivedCommands+0xc>
 801aaa8:	e8df f003 	tbb	[pc, r3]
 801aaac:	30050505 	.word	0x30050505
 801aab0:	05055037 	.word	0x05055037
 801aab4:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801aab6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801aaba:	f043 0301 	orr.w	r3, r3, #1
 801aabe:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801aac2:	9b05      	ldr	r3, [sp, #20]
 801aac4:	69a1      	ldr	r1, [r4, #24]
 801aac6:	4602      	mov	r2, r0
 801aac8:	4419      	add	r1, r3
 801aaca:	4620      	mov	r0, r4
 801aacc:	f7ff fe42 	bl	801a754 <prvInsertTimerInActiveList>
 801aad0:	2800      	cmp	r0, #0
 801aad2:	d0cd      	beq.n	801aa70 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801aad4:	6a23      	ldr	r3, [r4, #32]
 801aad6:	4620      	mov	r0, r4
 801aad8:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801aada:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801aade:	f013 0f04 	tst.w	r3, #4
 801aae2:	d0c5      	beq.n	801aa70 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801aae4:	69a2      	ldr	r2, [r4, #24]
 801aae6:	2100      	movs	r1, #0
 801aae8:	9100      	str	r1, [sp, #0]
 801aaea:	460b      	mov	r3, r1
 801aaec:	9805      	ldr	r0, [sp, #20]
 801aaee:	4402      	add	r2, r0
 801aaf0:	4620      	mov	r0, r4
 801aaf2:	f7ff febd 	bl	801a870 <xTimerGenericCommand>
							configASSERT( xResult );
 801aaf6:	2800      	cmp	r0, #0
 801aaf8:	d1ba      	bne.n	801aa70 <prvProcessReceivedCommands+0xc>
 801aafa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801aafe:	f383 8811 	msr	BASEPRI, r3
 801ab02:	f3bf 8f6f 	isb	sy
 801ab06:	f3bf 8f4f 	dsb	sy
 801ab0a:	e7fe      	b.n	801ab0a <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801ab0c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801ab10:	f023 0301 	bic.w	r3, r3, #1
 801ab14:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					break;
 801ab18:	e7aa      	b.n	801aa70 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801ab1a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801ab1e:	f043 0301 	orr.w	r3, r3, #1
 801ab22:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801ab26:	9905      	ldr	r1, [sp, #20]
 801ab28:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801ab2a:	b131      	cbz	r1, 801ab3a <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801ab2c:	4603      	mov	r3, r0
 801ab2e:	4602      	mov	r2, r0
 801ab30:	4401      	add	r1, r0
 801ab32:	4620      	mov	r0, r4
 801ab34:	f7ff fe0e 	bl	801a754 <prvInsertTimerInActiveList>
					break;
 801ab38:	e79a      	b.n	801aa70 <prvProcessReceivedCommands+0xc>
 801ab3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ab3e:	f383 8811 	msr	BASEPRI, r3
 801ab42:	f3bf 8f6f 	isb	sy
 801ab46:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801ab4a:	e7fe      	b.n	801ab4a <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801ab4c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801ab50:	f013 0f02 	tst.w	r3, #2
 801ab54:	d004      	beq.n	801ab60 <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801ab56:	f023 0301 	bic.w	r3, r3, #1
 801ab5a:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 801ab5e:	e787      	b.n	801aa70 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 801ab60:	4620      	mov	r0, r4
 801ab62:	f000 fab3 	bl	801b0cc <vPortFree>
 801ab66:	e783      	b.n	801aa70 <prvProcessReceivedCommands+0xc>
}
 801ab68:	b008      	add	sp, #32
 801ab6a:	bd10      	pop	{r4, pc}
 801ab6c:	20003cf4 	.word	0x20003cf4

0801ab70 <prvTimerTask>:
{
 801ab70:	b500      	push	{lr}
 801ab72:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801ab74:	a801      	add	r0, sp, #4
 801ab76:	f7ff fddd 	bl	801a734 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801ab7a:	9901      	ldr	r1, [sp, #4]
 801ab7c:	f7ff ff38 	bl	801a9f0 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 801ab80:	f7ff ff70 	bl	801aa64 <prvProcessReceivedCommands>
	for( ;; )
 801ab84:	e7f6      	b.n	801ab74 <prvTimerTask+0x4>
	...

0801ab88 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801ab88:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 801ab8a:	2300      	movs	r3, #0
 801ab8c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801ab8e:	4b0d      	ldr	r3, [pc, #52]	@ (801abc4 <prvTaskExitError+0x3c>)
 801ab90:	681b      	ldr	r3, [r3, #0]
 801ab92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801ab96:	d008      	beq.n	801abaa <prvTaskExitError+0x22>
 801ab98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ab9c:	f383 8811 	msr	BASEPRI, r3
 801aba0:	f3bf 8f6f 	isb	sy
 801aba4:	f3bf 8f4f 	dsb	sy
 801aba8:	e7fe      	b.n	801aba8 <prvTaskExitError+0x20>
 801abaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801abae:	f383 8811 	msr	BASEPRI, r3
 801abb2:	f3bf 8f6f 	isb	sy
 801abb6:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801abba:	9b01      	ldr	r3, [sp, #4]
 801abbc:	2b00      	cmp	r3, #0
 801abbe:	d0fc      	beq.n	801abba <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801abc0:	b002      	add	sp, #8
 801abc2:	4770      	bx	lr
 801abc4:	20000114 	.word	0x20000114

0801abc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801abc8:	4808      	ldr	r0, [pc, #32]	@ (801abec <prvPortStartFirstTask+0x24>)
 801abca:	6800      	ldr	r0, [r0, #0]
 801abcc:	6800      	ldr	r0, [r0, #0]
 801abce:	f380 8808 	msr	MSP, r0
 801abd2:	f04f 0000 	mov.w	r0, #0
 801abd6:	f380 8814 	msr	CONTROL, r0
 801abda:	b662      	cpsie	i
 801abdc:	b661      	cpsie	f
 801abde:	f3bf 8f4f 	dsb	sy
 801abe2:	f3bf 8f6f 	isb	sy
 801abe6:	df00      	svc	0
 801abe8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801abea:	0000      	.short	0x0000
 801abec:	e000ed08 	.word	0xe000ed08

0801abf0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801abf0:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 801ac00 <vPortEnableVFP+0x10>
 801abf4:	6801      	ldr	r1, [r0, #0]
 801abf6:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801abfa:	6001      	str	r1, [r0, #0]
 801abfc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801abfe:	0000      	.short	0x0000
 801ac00:	e000ed88 	.word	0xe000ed88

0801ac04 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801ac04:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801ac08:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801ac0c:	f021 0101 	bic.w	r1, r1, #1
 801ac10:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801ac14:	4b05      	ldr	r3, [pc, #20]	@ (801ac2c <pxPortInitialiseStack+0x28>)
 801ac16:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801ac1a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801ac1e:	f06f 0302 	mvn.w	r3, #2
 801ac22:	f840 3c24 	str.w	r3, [r0, #-36]
}
 801ac26:	3844      	subs	r0, #68	@ 0x44
 801ac28:	4770      	bx	lr
 801ac2a:	bf00      	nop
 801ac2c:	0801ab89 	.word	0x0801ab89

0801ac30 <SVC_Handler>:
	__asm volatile (
 801ac30:	4b07      	ldr	r3, [pc, #28]	@ (801ac50 <pxCurrentTCBConst2>)
 801ac32:	6819      	ldr	r1, [r3, #0]
 801ac34:	6808      	ldr	r0, [r1, #0]
 801ac36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac3a:	f380 8809 	msr	PSP, r0
 801ac3e:	f3bf 8f6f 	isb	sy
 801ac42:	f04f 0000 	mov.w	r0, #0
 801ac46:	f380 8811 	msr	BASEPRI, r0
 801ac4a:	4770      	bx	lr
 801ac4c:	f3af 8000 	nop.w

0801ac50 <pxCurrentTCBConst2>:
 801ac50:	20003bf8 	.word	0x20003bf8

0801ac54 <vPortEnterCritical>:
 801ac54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ac58:	f383 8811 	msr	BASEPRI, r3
 801ac5c:	f3bf 8f6f 	isb	sy
 801ac60:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 801ac64:	4a0b      	ldr	r2, [pc, #44]	@ (801ac94 <vPortEnterCritical+0x40>)
 801ac66:	6813      	ldr	r3, [r2, #0]
 801ac68:	3301      	adds	r3, #1
 801ac6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 801ac6c:	2b01      	cmp	r3, #1
 801ac6e:	d000      	beq.n	801ac72 <vPortEnterCritical+0x1e>
}
 801ac70:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801ac72:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801ac76:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 801ac7a:	f013 0fff 	tst.w	r3, #255	@ 0xff
 801ac7e:	d0f7      	beq.n	801ac70 <vPortEnterCritical+0x1c>
 801ac80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ac84:	f383 8811 	msr	BASEPRI, r3
 801ac88:	f3bf 8f6f 	isb	sy
 801ac8c:	f3bf 8f4f 	dsb	sy
 801ac90:	e7fe      	b.n	801ac90 <vPortEnterCritical+0x3c>
 801ac92:	bf00      	nop
 801ac94:	20000114 	.word	0x20000114

0801ac98 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 801ac98:	4b09      	ldr	r3, [pc, #36]	@ (801acc0 <vPortExitCritical+0x28>)
 801ac9a:	681b      	ldr	r3, [r3, #0]
 801ac9c:	b943      	cbnz	r3, 801acb0 <vPortExitCritical+0x18>
 801ac9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801aca2:	f383 8811 	msr	BASEPRI, r3
 801aca6:	f3bf 8f6f 	isb	sy
 801acaa:	f3bf 8f4f 	dsb	sy
 801acae:	e7fe      	b.n	801acae <vPortExitCritical+0x16>
	uxCriticalNesting--;
 801acb0:	3b01      	subs	r3, #1
 801acb2:	4a03      	ldr	r2, [pc, #12]	@ (801acc0 <vPortExitCritical+0x28>)
 801acb4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801acb6:	b90b      	cbnz	r3, 801acbc <vPortExitCritical+0x24>
	__asm volatile
 801acb8:	f383 8811 	msr	BASEPRI, r3
}
 801acbc:	4770      	bx	lr
 801acbe:	bf00      	nop
 801acc0:	20000114 	.word	0x20000114
	...

0801acd0 <PendSV_Handler>:
	__asm volatile
 801acd0:	f3ef 8009 	mrs	r0, PSP
 801acd4:	f3bf 8f6f 	isb	sy
 801acd8:	4b15      	ldr	r3, [pc, #84]	@ (801ad30 <pxCurrentTCBConst>)
 801acda:	681a      	ldr	r2, [r3, #0]
 801acdc:	f01e 0f10 	tst.w	lr, #16
 801ace0:	bf08      	it	eq
 801ace2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801ace6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acea:	6010      	str	r0, [r2, #0]
 801acec:	e92d 0009 	stmdb	sp!, {r0, r3}
 801acf0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 801acf4:	f380 8811 	msr	BASEPRI, r0
 801acf8:	f3bf 8f4f 	dsb	sy
 801acfc:	f3bf 8f6f 	isb	sy
 801ad00:	f7ff faf0 	bl	801a2e4 <vTaskSwitchContext>
 801ad04:	f04f 0000 	mov.w	r0, #0
 801ad08:	f380 8811 	msr	BASEPRI, r0
 801ad0c:	bc09      	pop	{r0, r3}
 801ad0e:	6819      	ldr	r1, [r3, #0]
 801ad10:	6808      	ldr	r0, [r1, #0]
 801ad12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad16:	f01e 0f10 	tst.w	lr, #16
 801ad1a:	bf08      	it	eq
 801ad1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801ad20:	f380 8809 	msr	PSP, r0
 801ad24:	f3bf 8f6f 	isb	sy
 801ad28:	4770      	bx	lr
 801ad2a:	bf00      	nop
 801ad2c:	f3af 8000 	nop.w

0801ad30 <pxCurrentTCBConst>:
 801ad30:	20003bf8 	.word	0x20003bf8

0801ad34 <xPortSysTickHandler>:
{
 801ad34:	b508      	push	{r3, lr}
	__asm volatile
 801ad36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ad3a:	f383 8811 	msr	BASEPRI, r3
 801ad3e:	f3bf 8f6f 	isb	sy
 801ad42:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 801ad46:	f7ff f99f 	bl	801a088 <xTaskIncrementTick>
 801ad4a:	b128      	cbz	r0, 801ad58 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801ad4c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801ad50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801ad54:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 801ad58:	2300      	movs	r3, #0
 801ad5a:	f383 8811 	msr	BASEPRI, r3
}
 801ad5e:	bd08      	pop	{r3, pc}

0801ad60 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801ad60:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 801ad64:	2300      	movs	r3, #0
 801ad66:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801ad68:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801ad6a:	4b05      	ldr	r3, [pc, #20]	@ (801ad80 <vPortSetupTimerInterrupt+0x20>)
 801ad6c:	681b      	ldr	r3, [r3, #0]
 801ad6e:	4905      	ldr	r1, [pc, #20]	@ (801ad84 <vPortSetupTimerInterrupt+0x24>)
 801ad70:	fba1 1303 	umull	r1, r3, r1, r3
 801ad74:	099b      	lsrs	r3, r3, #6
 801ad76:	3b01      	subs	r3, #1
 801ad78:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801ad7a:	2307      	movs	r3, #7
 801ad7c:	6113      	str	r3, [r2, #16]
}
 801ad7e:	4770      	bx	lr
 801ad80:	20000018 	.word	0x20000018
 801ad84:	10624dd3 	.word	0x10624dd3

0801ad88 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801ad88:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801ad8c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 801ad90:	4b3d      	ldr	r3, [pc, #244]	@ (801ae88 <xPortStartScheduler+0x100>)
 801ad92:	429a      	cmp	r2, r3
 801ad94:	d01c      	beq.n	801add0 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801ad96:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801ad9a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 801ad9e:	4b3b      	ldr	r3, [pc, #236]	@ (801ae8c <xPortStartScheduler+0x104>)
 801ada0:	429a      	cmp	r2, r3
 801ada2:	d01e      	beq.n	801ade2 <xPortStartScheduler+0x5a>
{
 801ada4:	b530      	push	{r4, r5, lr}
 801ada6:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801ada8:	4b39      	ldr	r3, [pc, #228]	@ (801ae90 <xPortStartScheduler+0x108>)
 801adaa:	781a      	ldrb	r2, [r3, #0]
 801adac:	b2d2      	uxtb	r2, r2
 801adae:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801adb0:	22ff      	movs	r2, #255	@ 0xff
 801adb2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801adb4:	781b      	ldrb	r3, [r3, #0]
 801adb6:	b2db      	uxtb	r3, r3
 801adb8:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801adbc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801adc0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801adc4:	4a33      	ldr	r2, [pc, #204]	@ (801ae94 <xPortStartScheduler+0x10c>)
 801adc6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801adc8:	4b33      	ldr	r3, [pc, #204]	@ (801ae98 <xPortStartScheduler+0x110>)
 801adca:	2207      	movs	r2, #7
 801adcc:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801adce:	e01b      	b.n	801ae08 <xPortStartScheduler+0x80>
	__asm volatile
 801add0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801add4:	f383 8811 	msr	BASEPRI, r3
 801add8:	f3bf 8f6f 	isb	sy
 801addc:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801ade0:	e7fe      	b.n	801ade0 <xPortStartScheduler+0x58>
 801ade2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ade6:	f383 8811 	msr	BASEPRI, r3
 801adea:	f3bf 8f6f 	isb	sy
 801adee:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801adf2:	e7fe      	b.n	801adf2 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 801adf4:	4a28      	ldr	r2, [pc, #160]	@ (801ae98 <xPortStartScheduler+0x110>)
 801adf6:	6813      	ldr	r3, [r2, #0]
 801adf8:	3b01      	subs	r3, #1
 801adfa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801adfc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801ae00:	005b      	lsls	r3, r3, #1
 801ae02:	b2db      	uxtb	r3, r3
 801ae04:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801ae08:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801ae0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801ae10:	d1f0      	bne.n	801adf4 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801ae12:	4b21      	ldr	r3, [pc, #132]	@ (801ae98 <xPortStartScheduler+0x110>)
 801ae14:	681b      	ldr	r3, [r3, #0]
 801ae16:	2b03      	cmp	r3, #3
 801ae18:	d008      	beq.n	801ae2c <xPortStartScheduler+0xa4>
 801ae1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ae1e:	f383 8811 	msr	BASEPRI, r3
 801ae22:	f3bf 8f6f 	isb	sy
 801ae26:	f3bf 8f4f 	dsb	sy
 801ae2a:	e7fe      	b.n	801ae2a <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801ae2c:	021b      	lsls	r3, r3, #8
 801ae2e:	4a1a      	ldr	r2, [pc, #104]	@ (801ae98 <xPortStartScheduler+0x110>)
 801ae30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801ae32:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801ae36:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801ae38:	9b01      	ldr	r3, [sp, #4]
 801ae3a:	b2db      	uxtb	r3, r3
 801ae3c:	4a14      	ldr	r2, [pc, #80]	@ (801ae90 <xPortStartScheduler+0x108>)
 801ae3e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801ae40:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 801ae44:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 801ae48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801ae4c:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801ae50:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 801ae54:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 801ae58:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 801ae5c:	f7ff ff80 	bl	801ad60 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 801ae60:	2500      	movs	r5, #0
 801ae62:	4b0e      	ldr	r3, [pc, #56]	@ (801ae9c <xPortStartScheduler+0x114>)
 801ae64:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 801ae66:	f7ff fec3 	bl	801abf0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801ae6a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 801ae6e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801ae72:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 801ae76:	f7ff fea7 	bl	801abc8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 801ae7a:	f7ff fa33 	bl	801a2e4 <vTaskSwitchContext>
	prvTaskExitError();
 801ae7e:	f7ff fe83 	bl	801ab88 <prvTaskExitError>
}
 801ae82:	4628      	mov	r0, r5
 801ae84:	b003      	add	sp, #12
 801ae86:	bd30      	pop	{r4, r5, pc}
 801ae88:	410fc271 	.word	0x410fc271
 801ae8c:	410fc270 	.word	0x410fc270
 801ae90:	e000e400 	.word	0xe000e400
 801ae94:	20003d2c 	.word	0x20003d2c
 801ae98:	20003d28 	.word	0x20003d28
 801ae9c:	20000114 	.word	0x20000114

0801aea0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801aea0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801aea4:	2b0f      	cmp	r3, #15
 801aea6:	d90f      	bls.n	801aec8 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801aea8:	4a11      	ldr	r2, [pc, #68]	@ (801aef0 <vPortValidateInterruptPriority+0x50>)
 801aeaa:	5c9b      	ldrb	r3, [r3, r2]
 801aeac:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801aeae:	4a11      	ldr	r2, [pc, #68]	@ (801aef4 <vPortValidateInterruptPriority+0x54>)
 801aeb0:	7812      	ldrb	r2, [r2, #0]
 801aeb2:	429a      	cmp	r2, r3
 801aeb4:	d908      	bls.n	801aec8 <vPortValidateInterruptPriority+0x28>
 801aeb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801aeba:	f383 8811 	msr	BASEPRI, r3
 801aebe:	f3bf 8f6f 	isb	sy
 801aec2:	f3bf 8f4f 	dsb	sy
 801aec6:	e7fe      	b.n	801aec6 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801aec8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801aecc:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 801aed0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801aed4:	4a08      	ldr	r2, [pc, #32]	@ (801aef8 <vPortValidateInterruptPriority+0x58>)
 801aed6:	6812      	ldr	r2, [r2, #0]
 801aed8:	4293      	cmp	r3, r2
 801aeda:	d908      	bls.n	801aeee <vPortValidateInterruptPriority+0x4e>
 801aedc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801aee0:	f383 8811 	msr	BASEPRI, r3
 801aee4:	f3bf 8f6f 	isb	sy
 801aee8:	f3bf 8f4f 	dsb	sy
 801aeec:	e7fe      	b.n	801aeec <vPortValidateInterruptPriority+0x4c>
	}
 801aeee:	4770      	bx	lr
 801aef0:	e000e3f0 	.word	0xe000e3f0
 801aef4:	20003d2c 	.word	0x20003d2c
 801aef8:	20003d28 	.word	0x20003d28

0801aefc <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801aefc:	4a12      	ldr	r2, [pc, #72]	@ (801af48 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801aefe:	f012 0f07 	tst.w	r2, #7
 801af02:	d01f      	beq.n	801af44 <prvHeapInit+0x48>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801af04:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801af06:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801af0a:	f5c1 33b0 	rsb	r3, r1, #90112	@ 0x16000
 801af0e:	33f8      	adds	r3, #248	@ 0xf8
 801af10:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801af12:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801af14:	480d      	ldr	r0, [pc, #52]	@ (801af4c <prvHeapInit+0x50>)
 801af16:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801af18:	2100      	movs	r1, #0
 801af1a:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801af1c:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 801af1e:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801af20:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 801af24:	480a      	ldr	r0, [pc, #40]	@ (801af50 <prvHeapInit+0x54>)
 801af26:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 801af28:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801af2a:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801af2c:	1a99      	subs	r1, r3, r2
 801af2e:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801af30:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801af32:	4b08      	ldr	r3, [pc, #32]	@ (801af54 <prvHeapInit+0x58>)
 801af34:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801af36:	4b08      	ldr	r3, [pc, #32]	@ (801af58 <prvHeapInit+0x5c>)
 801af38:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801af3a:	4b08      	ldr	r3, [pc, #32]	@ (801af5c <prvHeapInit+0x60>)
 801af3c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801af40:	601a      	str	r2, [r3, #0]
}
 801af42:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801af44:	4b06      	ldr	r3, [pc, #24]	@ (801af60 <prvHeapInit+0x64>)
 801af46:	e7e5      	b.n	801af14 <prvHeapInit+0x18>
 801af48:	20003d50 	.word	0x20003d50
 801af4c:	20003d48 	.word	0x20003d48
 801af50:	20003d44 	.word	0x20003d44
 801af54:	20003d3c 	.word	0x20003d3c
 801af58:	20003d40 	.word	0x20003d40
 801af5c:	20003d30 	.word	0x20003d30
 801af60:	000160f8 	.word	0x000160f8

0801af64 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801af64:	4b16      	ldr	r3, [pc, #88]	@ (801afc0 <prvInsertBlockIntoFreeList+0x5c>)
 801af66:	461a      	mov	r2, r3
 801af68:	681b      	ldr	r3, [r3, #0]
 801af6a:	4283      	cmp	r3, r0
 801af6c:	d3fb      	bcc.n	801af66 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801af6e:	6851      	ldr	r1, [r2, #4]
 801af70:	eb02 0c01 	add.w	ip, r2, r1
 801af74:	4584      	cmp	ip, r0
 801af76:	d009      	beq.n	801af8c <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801af78:	6841      	ldr	r1, [r0, #4]
 801af7a:	eb00 0c01 	add.w	ip, r0, r1
 801af7e:	4563      	cmp	r3, ip
 801af80:	d009      	beq.n	801af96 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801af82:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801af84:	4290      	cmp	r0, r2
 801af86:	d019      	beq.n	801afbc <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801af88:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 801af8a:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801af8c:	6840      	ldr	r0, [r0, #4]
 801af8e:	4401      	add	r1, r0
 801af90:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 801af92:	4610      	mov	r0, r2
 801af94:	e7f0      	b.n	801af78 <prvInsertBlockIntoFreeList+0x14>
{
 801af96:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801af98:	4c0a      	ldr	r4, [pc, #40]	@ (801afc4 <prvInsertBlockIntoFreeList+0x60>)
 801af9a:	6824      	ldr	r4, [r4, #0]
 801af9c:	42a3      	cmp	r3, r4
 801af9e:	d00b      	beq.n	801afb8 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801afa0:	685b      	ldr	r3, [r3, #4]
 801afa2:	4419      	add	r1, r3
 801afa4:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801afa6:	6813      	ldr	r3, [r2, #0]
 801afa8:	681b      	ldr	r3, [r3, #0]
 801afaa:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 801afac:	4290      	cmp	r0, r2
 801afae:	d000      	beq.n	801afb2 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801afb0:	6010      	str	r0, [r2, #0]
	}
}
 801afb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801afb6:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801afb8:	6004      	str	r4, [r0, #0]
 801afba:	e7f7      	b.n	801afac <prvInsertBlockIntoFreeList+0x48>
 801afbc:	4770      	bx	lr
 801afbe:	bf00      	nop
 801afc0:	20003d48 	.word	0x20003d48
 801afc4:	20003d44 	.word	0x20003d44

0801afc8 <pvPortMalloc>:
{
 801afc8:	b538      	push	{r3, r4, r5, lr}
 801afca:	4604      	mov	r4, r0
	vTaskSuspendAll();
 801afcc:	f7ff f84e 	bl	801a06c <vTaskSuspendAll>
		if( pxEnd == NULL )
 801afd0:	4b38      	ldr	r3, [pc, #224]	@ (801b0b4 <pvPortMalloc+0xec>)
 801afd2:	681b      	ldr	r3, [r3, #0]
 801afd4:	b1b3      	cbz	r3, 801b004 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801afd6:	4b38      	ldr	r3, [pc, #224]	@ (801b0b8 <pvPortMalloc+0xf0>)
 801afd8:	681b      	ldr	r3, [r3, #0]
 801afda:	421c      	tst	r4, r3
 801afdc:	d150      	bne.n	801b080 <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 801afde:	2c00      	cmp	r4, #0
 801afe0:	d050      	beq.n	801b084 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 801afe2:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801afe6:	f014 0f07 	tst.w	r4, #7
 801afea:	d002      	beq.n	801aff2 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801afec:	f022 0207 	bic.w	r2, r2, #7
 801aff0:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801aff2:	2a00      	cmp	r2, #0
 801aff4:	d055      	beq.n	801b0a2 <pvPortMalloc+0xda>
 801aff6:	4b31      	ldr	r3, [pc, #196]	@ (801b0bc <pvPortMalloc+0xf4>)
 801aff8:	681b      	ldr	r3, [r3, #0]
 801affa:	4293      	cmp	r3, r2
 801affc:	d353      	bcc.n	801b0a6 <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 801affe:	4930      	ldr	r1, [pc, #192]	@ (801b0c0 <pvPortMalloc+0xf8>)
 801b000:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801b002:	e004      	b.n	801b00e <pvPortMalloc+0x46>
			prvHeapInit();
 801b004:	f7ff ff7a 	bl	801aefc <prvHeapInit>
 801b008:	e7e5      	b.n	801afd6 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 801b00a:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 801b00c:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801b00e:	6863      	ldr	r3, [r4, #4]
 801b010:	4293      	cmp	r3, r2
 801b012:	d202      	bcs.n	801b01a <pvPortMalloc+0x52>
 801b014:	6823      	ldr	r3, [r4, #0]
 801b016:	2b00      	cmp	r3, #0
 801b018:	d1f7      	bne.n	801b00a <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 801b01a:	4b26      	ldr	r3, [pc, #152]	@ (801b0b4 <pvPortMalloc+0xec>)
 801b01c:	681b      	ldr	r3, [r3, #0]
 801b01e:	42a3      	cmp	r3, r4
 801b020:	d043      	beq.n	801b0aa <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801b022:	680d      	ldr	r5, [r1, #0]
 801b024:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801b026:	6823      	ldr	r3, [r4, #0]
 801b028:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801b02a:	6863      	ldr	r3, [r4, #4]
 801b02c:	1a9b      	subs	r3, r3, r2
 801b02e:	2b10      	cmp	r3, #16
 801b030:	d910      	bls.n	801b054 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801b032:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801b034:	f010 0f07 	tst.w	r0, #7
 801b038:	d008      	beq.n	801b04c <pvPortMalloc+0x84>
 801b03a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b03e:	f383 8811 	msr	BASEPRI, r3
 801b042:	f3bf 8f6f 	isb	sy
 801b046:	f3bf 8f4f 	dsb	sy
 801b04a:	e7fe      	b.n	801b04a <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801b04c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 801b04e:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801b050:	f7ff ff88 	bl	801af64 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801b054:	6862      	ldr	r2, [r4, #4]
 801b056:	4919      	ldr	r1, [pc, #100]	@ (801b0bc <pvPortMalloc+0xf4>)
 801b058:	680b      	ldr	r3, [r1, #0]
 801b05a:	1a9b      	subs	r3, r3, r2
 801b05c:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801b05e:	4919      	ldr	r1, [pc, #100]	@ (801b0c4 <pvPortMalloc+0xfc>)
 801b060:	6809      	ldr	r1, [r1, #0]
 801b062:	428b      	cmp	r3, r1
 801b064:	d201      	bcs.n	801b06a <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801b066:	4917      	ldr	r1, [pc, #92]	@ (801b0c4 <pvPortMalloc+0xfc>)
 801b068:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801b06a:	4b13      	ldr	r3, [pc, #76]	@ (801b0b8 <pvPortMalloc+0xf0>)
 801b06c:	681b      	ldr	r3, [r3, #0]
 801b06e:	4313      	orrs	r3, r2
 801b070:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801b072:	2300      	movs	r3, #0
 801b074:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 801b076:	4a14      	ldr	r2, [pc, #80]	@ (801b0c8 <pvPortMalloc+0x100>)
 801b078:	6813      	ldr	r3, [r2, #0]
 801b07a:	3301      	adds	r3, #1
 801b07c:	6013      	str	r3, [r2, #0]
 801b07e:	e002      	b.n	801b086 <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 801b080:	2500      	movs	r5, #0
 801b082:	e000      	b.n	801b086 <pvPortMalloc+0xbe>
 801b084:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 801b086:	f7ff f88b 	bl	801a1a0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801b08a:	f015 0f07 	tst.w	r5, #7
 801b08e:	d00e      	beq.n	801b0ae <pvPortMalloc+0xe6>
 801b090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b094:	f383 8811 	msr	BASEPRI, r3
 801b098:	f3bf 8f6f 	isb	sy
 801b09c:	f3bf 8f4f 	dsb	sy
 801b0a0:	e7fe      	b.n	801b0a0 <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 801b0a2:	2500      	movs	r5, #0
 801b0a4:	e7ef      	b.n	801b086 <pvPortMalloc+0xbe>
 801b0a6:	2500      	movs	r5, #0
 801b0a8:	e7ed      	b.n	801b086 <pvPortMalloc+0xbe>
 801b0aa:	2500      	movs	r5, #0
 801b0ac:	e7eb      	b.n	801b086 <pvPortMalloc+0xbe>
}
 801b0ae:	4628      	mov	r0, r5
 801b0b0:	bd38      	pop	{r3, r4, r5, pc}
 801b0b2:	bf00      	nop
 801b0b4:	20003d44 	.word	0x20003d44
 801b0b8:	20003d30 	.word	0x20003d30
 801b0bc:	20003d40 	.word	0x20003d40
 801b0c0:	20003d48 	.word	0x20003d48
 801b0c4:	20003d3c 	.word	0x20003d3c
 801b0c8:	20003d38 	.word	0x20003d38

0801b0cc <vPortFree>:
	if( pv != NULL )
 801b0cc:	2800      	cmp	r0, #0
 801b0ce:	d034      	beq.n	801b13a <vPortFree+0x6e>
{
 801b0d0:	b538      	push	{r3, r4, r5, lr}
 801b0d2:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 801b0d4:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801b0d8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801b0dc:	4a17      	ldr	r2, [pc, #92]	@ (801b13c <vPortFree+0x70>)
 801b0de:	6812      	ldr	r2, [r2, #0]
 801b0e0:	4213      	tst	r3, r2
 801b0e2:	d108      	bne.n	801b0f6 <vPortFree+0x2a>
 801b0e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b0e8:	f383 8811 	msr	BASEPRI, r3
 801b0ec:	f3bf 8f6f 	isb	sy
 801b0f0:	f3bf 8f4f 	dsb	sy
 801b0f4:	e7fe      	b.n	801b0f4 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801b0f6:	f850 1c08 	ldr.w	r1, [r0, #-8]
 801b0fa:	b141      	cbz	r1, 801b10e <vPortFree+0x42>
 801b0fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b100:	f383 8811 	msr	BASEPRI, r3
 801b104:	f3bf 8f6f 	isb	sy
 801b108:	f3bf 8f4f 	dsb	sy
 801b10c:	e7fe      	b.n	801b10c <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801b10e:	ea23 0302 	bic.w	r3, r3, r2
 801b112:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 801b116:	f7fe ffa9 	bl	801a06c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 801b11a:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801b11e:	4a08      	ldr	r2, [pc, #32]	@ (801b140 <vPortFree+0x74>)
 801b120:	6813      	ldr	r3, [r2, #0]
 801b122:	440b      	add	r3, r1
 801b124:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801b126:	4628      	mov	r0, r5
 801b128:	f7ff ff1c 	bl	801af64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801b12c:	4a05      	ldr	r2, [pc, #20]	@ (801b144 <vPortFree+0x78>)
 801b12e:	6813      	ldr	r3, [r2, #0]
 801b130:	3301      	adds	r3, #1
 801b132:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 801b134:	f7ff f834 	bl	801a1a0 <xTaskResumeAll>
}
 801b138:	bd38      	pop	{r3, r4, r5, pc}
 801b13a:	4770      	bx	lr
 801b13c:	20003d30 	.word	0x20003d30
 801b140:	20003d40 	.word	0x20003d40
 801b144:	20003d34 	.word	0x20003d34

0801b148 <vPortGetHeapStats>:
/*-----------------------------------------------------------*/

void vPortGetHeapStats( HeapStats_t *pxHeapStats )
{
 801b148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b14a:	4607      	mov	r7, r0
BlockLink_t *pxBlock;
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */

	vTaskSuspendAll();
 801b14c:	f7fe ff8e 	bl	801a06c <vTaskSuspendAll>
	{
		pxBlock = xStart.pxNextFreeBlock;
 801b150:	4b17      	ldr	r3, [pc, #92]	@ (801b1b0 <vPortGetHeapStats+0x68>)
 801b152:	681b      	ldr	r3, [r3, #0]

		/* pxBlock will be NULL if the heap has not been initialised.  The heap
		is initialised automatically when the first allocation is made. */
		if( pxBlock != NULL )
 801b154:	b193      	cbz	r3, 801b17c <vPortGetHeapStats+0x34>
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */
 801b156:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801b15a:	2500      	movs	r5, #0
 801b15c:	462c      	mov	r4, r5
 801b15e:	e004      	b.n	801b16a <vPortGetHeapStats+0x22>
					xMinSize = pxBlock->xBlockSize;
				}

				/* Move to the next block in the chain until the last block is
				reached. */
				pxBlock = pxBlock->pxNextFreeBlock;
 801b160:	681b      	ldr	r3, [r3, #0]
			} while( pxBlock != pxEnd );
 801b162:	4a14      	ldr	r2, [pc, #80]	@ (801b1b4 <vPortGetHeapStats+0x6c>)
 801b164:	6812      	ldr	r2, [r2, #0]
 801b166:	429a      	cmp	r2, r3
 801b168:	d00c      	beq.n	801b184 <vPortGetHeapStats+0x3c>
				xBlocks++;
 801b16a:	3401      	adds	r4, #1
				if( pxBlock->xBlockSize > xMaxSize )
 801b16c:	685a      	ldr	r2, [r3, #4]
 801b16e:	42aa      	cmp	r2, r5
 801b170:	d900      	bls.n	801b174 <vPortGetHeapStats+0x2c>
					xMaxSize = pxBlock->xBlockSize;
 801b172:	4615      	mov	r5, r2
				if( pxBlock->xBlockSize < xMinSize )
 801b174:	42b2      	cmp	r2, r6
 801b176:	d2f3      	bcs.n	801b160 <vPortGetHeapStats+0x18>
					xMinSize = pxBlock->xBlockSize;
 801b178:	4616      	mov	r6, r2
 801b17a:	e7f1      	b.n	801b160 <vPortGetHeapStats+0x18>
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */
 801b17c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801b180:	2500      	movs	r5, #0
 801b182:	462c      	mov	r4, r5
		}
	}
	xTaskResumeAll();
 801b184:	f7ff f80c 	bl	801a1a0 <xTaskResumeAll>

	pxHeapStats->xSizeOfLargestFreeBlockInBytes = xMaxSize;
 801b188:	607d      	str	r5, [r7, #4]
	pxHeapStats->xSizeOfSmallestFreeBlockInBytes = xMinSize;
 801b18a:	60be      	str	r6, [r7, #8]
	pxHeapStats->xNumberOfFreeBlocks = xBlocks;
 801b18c:	60fc      	str	r4, [r7, #12]

	taskENTER_CRITICAL();
 801b18e:	f7ff fd61 	bl	801ac54 <vPortEnterCritical>
	{
		pxHeapStats->xAvailableHeapSpaceInBytes = xFreeBytesRemaining;
 801b192:	4b09      	ldr	r3, [pc, #36]	@ (801b1b8 <vPortGetHeapStats+0x70>)
 801b194:	681b      	ldr	r3, [r3, #0]
 801b196:	603b      	str	r3, [r7, #0]
		pxHeapStats->xNumberOfSuccessfulAllocations = xNumberOfSuccessfulAllocations;
 801b198:	4b08      	ldr	r3, [pc, #32]	@ (801b1bc <vPortGetHeapStats+0x74>)
 801b19a:	681b      	ldr	r3, [r3, #0]
 801b19c:	617b      	str	r3, [r7, #20]
		pxHeapStats->xNumberOfSuccessfulFrees = xNumberOfSuccessfulFrees;
 801b19e:	4b08      	ldr	r3, [pc, #32]	@ (801b1c0 <vPortGetHeapStats+0x78>)
 801b1a0:	681b      	ldr	r3, [r3, #0]
 801b1a2:	61bb      	str	r3, [r7, #24]
		pxHeapStats->xMinimumEverFreeBytesRemaining = xMinimumEverFreeBytesRemaining;
 801b1a4:	4b07      	ldr	r3, [pc, #28]	@ (801b1c4 <vPortGetHeapStats+0x7c>)
 801b1a6:	681b      	ldr	r3, [r3, #0]
 801b1a8:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 801b1aa:	f7ff fd75 	bl	801ac98 <vPortExitCritical>
}
 801b1ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b1b0:	20003d48 	.word	0x20003d48
 801b1b4:	20003d44 	.word	0x20003d44
 801b1b8:	20003d40 	.word	0x20003d40
 801b1bc:	20003d38 	.word	0x20003d38
 801b1c0:	20003d34 	.word	0x20003d34
 801b1c4:	20003d3c 	.word	0x20003d3c

0801b1c8 <block_device_sync>:
	return 0;
}

int block_device_sync(const struct lfs_config *c){
	return 0;
}
 801b1c8:	2000      	movs	r0, #0
 801b1ca:	4770      	bx	lr

0801b1cc <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 801b1cc:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 801b1ce:	fb01 f400 	mul.w	r4, r1, r0
 801b1d2:	4620      	mov	r0, r4
 801b1d4:	f7ff fef8 	bl	801afc8 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 801b1d8:	4605      	mov	r5, r0
 801b1da:	b118      	cbz	r0, 801b1e4 <mg_calloc+0x18>
 801b1dc:	4622      	mov	r2, r4
 801b1de:	2100      	movs	r1, #0
 801b1e0:	f011 ff3e 	bl	802d060 <memset>
}
 801b1e4:	4628      	mov	r0, r5
 801b1e6:	bd38      	pop	{r3, r4, r5, pc}

0801b1e8 <block_device_read>:
int block_device_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size){
 801b1e8:	b508      	push	{r3, lr}
 801b1ea:	4684      	mov	ip, r0
 801b1ec:	4618      	mov	r0, r3
	assert(block < c->block_count);
 801b1ee:	f8dc 3028 	ldr.w	r3, [ip, #40]	@ 0x28
 801b1f2:	428b      	cmp	r3, r1
 801b1f4:	d90a      	bls.n	801b20c <block_device_read+0x24>
 801b1f6:	4696      	mov	lr, r2
	sFLASH_ReadBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 801b1f8:	f8dc 3024 	ldr.w	r3, [ip, #36]	@ 0x24
 801b1fc:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801b200:	fb01 e103 	mla	r1, r1, r3, lr
 801b204:	f7fa ffab 	bl	801615e <sFLASH_ReadBuffer>
}
 801b208:	2000      	movs	r0, #0
 801b20a:	bd08      	pop	{r3, pc}
	assert(block < c->block_count);
 801b20c:	4b03      	ldr	r3, [pc, #12]	@ (801b21c <block_device_read+0x34>)
 801b20e:	4a04      	ldr	r2, [pc, #16]	@ (801b220 <block_device_read+0x38>)
 801b210:	f240 1123 	movw	r1, #291	@ 0x123
 801b214:	4803      	ldr	r0, [pc, #12]	@ (801b224 <block_device_read+0x3c>)
 801b216:	f00f f9d1 	bl	802a5bc <__assert_func>
 801b21a:	bf00      	nop
 801b21c:	08039834 	.word	0x08039834
 801b220:	080398b0 	.word	0x080398b0
 801b224:	0803984c 	.word	0x0803984c

0801b228 <block_device_erase>:
int block_device_erase(const struct lfs_config *c, lfs_block_t block){
 801b228:	b508      	push	{r3, lr}
	assert(block < c->block_count);
 801b22a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801b22c:	428b      	cmp	r3, r1
 801b22e:	d906      	bls.n	801b23e <block_device_erase+0x16>
	sFLASH_EraseSector(block * (c -> block_size));
 801b230:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801b232:	fb01 f000 	mul.w	r0, r1, r0
 801b236:	f7fb f8d7 	bl	80163e8 <sFLASH_EraseSector>
}
 801b23a:	2000      	movs	r0, #0
 801b23c:	bd08      	pop	{r3, pc}
	assert(block < c->block_count);
 801b23e:	4b03      	ldr	r3, [pc, #12]	@ (801b24c <block_device_erase+0x24>)
 801b240:	4a03      	ldr	r2, [pc, #12]	@ (801b250 <block_device_erase+0x28>)
 801b242:	f240 112b 	movw	r1, #299	@ 0x12b
 801b246:	4803      	ldr	r0, [pc, #12]	@ (801b254 <block_device_erase+0x2c>)
 801b248:	f00f f9b8 	bl	802a5bc <__assert_func>
 801b24c:	08039834 	.word	0x08039834
 801b250:	0803989c 	.word	0x0803989c
 801b254:	0803984c 	.word	0x0803984c

0801b258 <block_device_prog>:
int block_device_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size){
 801b258:	b508      	push	{r3, lr}
 801b25a:	4684      	mov	ip, r0
 801b25c:	4618      	mov	r0, r3
	assert(block < c->block_count);
 801b25e:	f8dc 3028 	ldr.w	r3, [ip, #40]	@ 0x28
 801b262:	428b      	cmp	r3, r1
 801b264:	d90a      	bls.n	801b27c <block_device_prog+0x24>
 801b266:	4696      	mov	lr, r2
	sFLASH_WriteBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 801b268:	f8dc 3024 	ldr.w	r3, [ip, #36]	@ 0x24
 801b26c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801b270:	fb01 e103 	mla	r1, r1, r3, lr
 801b274:	f7fb f8f6 	bl	8016464 <sFLASH_WriteBuffer>
}
 801b278:	2000      	movs	r0, #0
 801b27a:	bd08      	pop	{r3, pc}
	assert(block < c->block_count);
 801b27c:	4b03      	ldr	r3, [pc, #12]	@ (801b28c <block_device_prog+0x34>)
 801b27e:	4a04      	ldr	r2, [pc, #16]	@ (801b290 <block_device_prog+0x38>)
 801b280:	f240 1133 	movw	r1, #307	@ 0x133
 801b284:	4803      	ldr	r0, [pc, #12]	@ (801b294 <block_device_prog+0x3c>)
 801b286:	f00f f999 	bl	802a5bc <__assert_func>
 801b28a:	bf00      	nop
 801b28c:	08039834 	.word	0x08039834
 801b290:	08039888 	.word	0x08039888
 801b294:	0803984c 	.word	0x0803984c

0801b298 <mg_fs_lfs_status>:
int mg_fs_lfs_status(const char *path, size_t *size, time_t *mtime) {
 801b298:	b530      	push	{r4, r5, lr}
 801b29a:	b0c3      	sub	sp, #268	@ 0x10c
 801b29c:	460d      	mov	r5, r1
 801b29e:	4614      	mov	r4, r2
    if (lfs_stat(&lfs, path, &info) == 0) {
 801b2a0:	466a      	mov	r2, sp
 801b2a2:	4601      	mov	r1, r0
 801b2a4:	480b      	ldr	r0, [pc, #44]	@ (801b2d4 <mg_fs_lfs_status+0x3c>)
 801b2a6:	f004 fdad 	bl	801fe04 <lfs_stat>
 801b2aa:	b110      	cbz	r0, 801b2b2 <mg_fs_lfs_status+0x1a>
    return 0;
 801b2ac:	2000      	movs	r0, #0
}
 801b2ae:	b043      	add	sp, #268	@ 0x10c
 801b2b0:	bd30      	pop	{r4, r5, pc}
        if (size) *size = info.size;
 801b2b2:	b10d      	cbz	r5, 801b2b8 <mg_fs_lfs_status+0x20>
 801b2b4:	9b01      	ldr	r3, [sp, #4]
 801b2b6:	602b      	str	r3, [r5, #0]
        if (mtime) *mtime = 0;  // LittleFS не поддерживает время модификации
 801b2b8:	b11c      	cbz	r4, 801b2c2 <mg_fs_lfs_status+0x2a>
 801b2ba:	2200      	movs	r2, #0
 801b2bc:	2300      	movs	r3, #0
 801b2be:	e9c4 2300 	strd	r2, r3, [r4]
        return (info.type == LFS_TYPE_DIR) ? MG_FS_DIR : MG_FS_READ;
 801b2c2:	f89d 3000 	ldrb.w	r3, [sp]
 801b2c6:	2b02      	cmp	r3, #2
 801b2c8:	d001      	beq.n	801b2ce <mg_fs_lfs_status+0x36>
 801b2ca:	2001      	movs	r0, #1
 801b2cc:	e7ef      	b.n	801b2ae <mg_fs_lfs_status+0x16>
 801b2ce:	2004      	movs	r0, #4
 801b2d0:	e7ed      	b.n	801b2ae <mg_fs_lfs_status+0x16>
 801b2d2:	bf00      	nop
 801b2d4:	20019ee8 	.word	0x20019ee8

0801b2d8 <mg_fs_lfs_list>:
void mg_fs_lfs_list(const char *path, void (*fn)(const char *, void *), void *userdata) {
 801b2d8:	b530      	push	{r4, r5, lr}
 801b2da:	b0d1      	sub	sp, #324	@ 0x144
 801b2dc:	460d      	mov	r5, r1
 801b2de:	4614      	mov	r4, r2
    if (lfs_dir_open(&lfs, &dir, path) == 0) {
 801b2e0:	4602      	mov	r2, r0
 801b2e2:	a901      	add	r1, sp, #4
 801b2e4:	480a      	ldr	r0, [pc, #40]	@ (801b310 <mg_fs_lfs_list+0x38>)
 801b2e6:	f004 feb3 	bl	8020050 <lfs_dir_open>
 801b2ea:	b120      	cbz	r0, 801b2f6 <mg_fs_lfs_list+0x1e>
}
 801b2ec:	b051      	add	sp, #324	@ 0x144
 801b2ee:	bd30      	pop	{r4, r5, pc}
            fn(info.name, userdata);
 801b2f0:	4621      	mov	r1, r4
 801b2f2:	a810      	add	r0, sp, #64	@ 0x40
 801b2f4:	47a8      	blx	r5
        while (lfs_dir_read(&lfs, &dir, &info) > 0) {
 801b2f6:	aa0e      	add	r2, sp, #56	@ 0x38
 801b2f8:	a901      	add	r1, sp, #4
 801b2fa:	4805      	ldr	r0, [pc, #20]	@ (801b310 <mg_fs_lfs_list+0x38>)
 801b2fc:	f004 fee3 	bl	80200c6 <lfs_dir_read>
 801b300:	2800      	cmp	r0, #0
 801b302:	dcf5      	bgt.n	801b2f0 <mg_fs_lfs_list+0x18>
        lfs_dir_close(&lfs, &dir);
 801b304:	a901      	add	r1, sp, #4
 801b306:	4802      	ldr	r0, [pc, #8]	@ (801b310 <mg_fs_lfs_list+0x38>)
 801b308:	f004 feca 	bl	80200a0 <lfs_dir_close>
}
 801b30c:	e7ee      	b.n	801b2ec <mg_fs_lfs_list+0x14>
 801b30e:	bf00      	nop
 801b310:	20019ee8 	.word	0x20019ee8

0801b314 <mg_fs_lfs_open>:
void *mg_fs_lfs_open(const char *path, int flags) {
 801b314:	b570      	push	{r4, r5, r6, lr}
 801b316:	4605      	mov	r5, r0
 801b318:	460c      	mov	r4, r1
    struct lfs_file_data *fd = (struct lfs_file_data *) malloc(sizeof(struct lfs_file_data));
 801b31a:	2054      	movs	r0, #84	@ 0x54
 801b31c:	f7ff fe54 	bl	801afc8 <pvPortMalloc>
    if (fd == NULL) return NULL;
 801b320:	4606      	mov	r6, r0
 801b322:	b188      	cbz	r0, 801b348 <mg_fs_lfs_open+0x34>
    if (flags & MG_FS_READ) lfs_flags |= LFS_O_RDONLY;
 801b324:	f014 0301 	ands.w	r3, r4, #1
 801b328:	d000      	beq.n	801b32c <mg_fs_lfs_open+0x18>
 801b32a:	2301      	movs	r3, #1
    if (flags & MG_FS_WRITE) lfs_flags |= LFS_O_WRONLY | LFS_O_CREAT | LFS_O_APPEND;
 801b32c:	f014 0f02 	tst.w	r4, #2
 801b330:	d003      	beq.n	801b33a <mg_fs_lfs_open+0x26>
 801b332:	f443 6310 	orr.w	r3, r3, #2304	@ 0x900
 801b336:	f043 0302 	orr.w	r3, r3, #2
    if (lfs_file_open(&lfs, &fd->file, path, lfs_flags) < 0) {
 801b33a:	462a      	mov	r2, r5
 801b33c:	4631      	mov	r1, r6
 801b33e:	4806      	ldr	r0, [pc, #24]	@ (801b358 <mg_fs_lfs_open+0x44>)
 801b340:	f004 fd76 	bl	801fe30 <lfs_file_open>
 801b344:	2800      	cmp	r0, #0
 801b346:	db01      	blt.n	801b34c <mg_fs_lfs_open+0x38>
}
 801b348:	4630      	mov	r0, r6
 801b34a:	bd70      	pop	{r4, r5, r6, pc}
        free(fd);
 801b34c:	4630      	mov	r0, r6
 801b34e:	f7ff febd 	bl	801b0cc <vPortFree>
        return NULL;
 801b352:	2600      	movs	r6, #0
 801b354:	e7f8      	b.n	801b348 <mg_fs_lfs_open+0x34>
 801b356:	bf00      	nop
 801b358:	20019ee8 	.word	0x20019ee8

0801b35c <mg_fs_lfs_close>:
void mg_fs_lfs_close(void *fd) {
 801b35c:	b510      	push	{r4, lr}
 801b35e:	4604      	mov	r4, r0
    lfs_file_close(&lfs, &file->file);
 801b360:	4601      	mov	r1, r0
 801b362:	4803      	ldr	r0, [pc, #12]	@ (801b370 <mg_fs_lfs_close+0x14>)
 801b364:	f004 fd90 	bl	801fe88 <lfs_file_close>
    free(file);
 801b368:	4620      	mov	r0, r4
 801b36a:	f7ff feaf 	bl	801b0cc <vPortFree>
}
 801b36e:	bd10      	pop	{r4, pc}
 801b370:	20019ee8 	.word	0x20019ee8

0801b374 <mg_fs_lfs_read>:
size_t mg_fs_lfs_read(void *fd, void *buf, size_t len) {
 801b374:	b508      	push	{r3, lr}
 801b376:	4613      	mov	r3, r2
    int res = lfs_file_read(&lfs, &file->file, buf, len);
 801b378:	460a      	mov	r2, r1
 801b37a:	4601      	mov	r1, r0
 801b37c:	4802      	ldr	r0, [pc, #8]	@ (801b388 <mg_fs_lfs_read+0x14>)
 801b37e:	f004 fda9 	bl	801fed4 <lfs_file_read>
}
 801b382:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 801b386:	bd08      	pop	{r3, pc}
 801b388:	20019ee8 	.word	0x20019ee8

0801b38c <mg_fs_lfs_write>:
size_t mg_fs_lfs_write(void *fd, const void *buf, size_t len) {
 801b38c:	b508      	push	{r3, lr}
 801b38e:	4613      	mov	r3, r2
    int res = lfs_file_write(&lfs, &file->file, buf, len);
 801b390:	460a      	mov	r2, r1
 801b392:	4601      	mov	r1, r0
 801b394:	4802      	ldr	r0, [pc, #8]	@ (801b3a0 <mg_fs_lfs_write+0x14>)
 801b396:	f004 fdc9 	bl	801ff2c <lfs_file_write>
}
 801b39a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 801b39e:	bd08      	pop	{r3, pc}
 801b3a0:	20019ee8 	.word	0x20019ee8

0801b3a4 <mg_fs_lfs_seek>:
size_t mg_fs_lfs_seek(void *fd, size_t offset) {
 801b3a4:	b510      	push	{r4, lr}
 801b3a6:	4604      	mov	r4, r0
 801b3a8:	460a      	mov	r2, r1
    if (lfs_file_seek(&lfs, &file->file, offset, LFS_SEEK_SET) < 0) {
 801b3aa:	2300      	movs	r3, #0
 801b3ac:	4601      	mov	r1, r0
 801b3ae:	4809      	ldr	r0, [pc, #36]	@ (801b3d4 <mg_fs_lfs_seek+0x30>)
 801b3b0:	f004 fde8 	bl	801ff84 <lfs_file_seek>
 801b3b4:	2800      	cmp	r0, #0
 801b3b6:	db06      	blt.n	801b3c6 <mg_fs_lfs_seek+0x22>
    lfs_soff_t pos = lfs_file_tell(&lfs, &file->file);
 801b3b8:	4621      	mov	r1, r4
 801b3ba:	4806      	ldr	r0, [pc, #24]	@ (801b3d4 <mg_fs_lfs_seek+0x30>)
 801b3bc:	f004 fe0e 	bl	801ffdc <lfs_file_tell>
     if (pos < 0) {
 801b3c0:	2800      	cmp	r0, #0
 801b3c2:	db03      	blt.n	801b3cc <mg_fs_lfs_seek+0x28>
}
 801b3c4:	bd10      	pop	{r4, pc}
        return (size_t)-1;  // Ошибка при перемещении
 801b3c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b3ca:	e7fb      	b.n	801b3c4 <mg_fs_lfs_seek+0x20>
         return (size_t)-1;  // Ошибка при получении позиции
 801b3cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b3d0:	e7f8      	b.n	801b3c4 <mg_fs_lfs_seek+0x20>
 801b3d2:	bf00      	nop
 801b3d4:	20019ee8 	.word	0x20019ee8

0801b3d8 <mg_fs_lfs_rename>:
bool mg_fs_lfs_rename(const char *from, const char *to) {
 801b3d8:	b508      	push	{r3, lr}
 801b3da:	460a      	mov	r2, r1
    return lfs_rename(&lfs, from, to) == 0;
 801b3dc:	4601      	mov	r1, r0
 801b3de:	4803      	ldr	r0, [pc, #12]	@ (801b3ec <mg_fs_lfs_rename+0x14>)
 801b3e0:	f004 fcfb 	bl	801fdda <lfs_rename>
}
 801b3e4:	fab0 f080 	clz	r0, r0
 801b3e8:	0940      	lsrs	r0, r0, #5
 801b3ea:	bd08      	pop	{r3, pc}
 801b3ec:	20019ee8 	.word	0x20019ee8

0801b3f0 <mg_fs_lfs_remove>:
bool mg_fs_lfs_remove(const char *path) {
 801b3f0:	b508      	push	{r3, lr}
 801b3f2:	4601      	mov	r1, r0
    return lfs_remove(&lfs, path) == 0;
 801b3f4:	4803      	ldr	r0, [pc, #12]	@ (801b404 <mg_fs_lfs_remove+0x14>)
 801b3f6:	f004 fcdd 	bl	801fdb4 <lfs_remove>
}
 801b3fa:	fab0 f080 	clz	r0, r0
 801b3fe:	0940      	lsrs	r0, r0, #5
 801b400:	bd08      	pop	{r3, pc}
 801b402:	bf00      	nop
 801b404:	20019ee8 	.word	0x20019ee8

0801b408 <mg_fs_lfs_mkdir>:
bool mg_fs_lfs_mkdir(const char *path) {
 801b408:	b508      	push	{r3, lr}
 801b40a:	4601      	mov	r1, r0
    return lfs_mkdir(&lfs, path) == 0;
 801b40c:	4803      	ldr	r0, [pc, #12]	@ (801b41c <mg_fs_lfs_mkdir+0x14>)
 801b40e:	f004 fe0b 	bl	8020028 <lfs_mkdir>
}
 801b412:	fab0 f080 	clz	r0, r0
 801b416:	0940      	lsrs	r0, r0, #5
 801b418:	bd08      	pop	{r3, pc}
 801b41a:	bf00      	nop
 801b41c:	20019ee8 	.word	0x20019ee8

0801b420 <mg_fs_mounted>:
}
 801b420:	4b01      	ldr	r3, [pc, #4]	@ (801b428 <mg_fs_mounted+0x8>)
 801b422:	7818      	ldrb	r0, [r3, #0]
 801b424:	4770      	bx	lr
 801b426:	bf00      	nop
 801b428:	20019e88 	.word	0x20019e88

0801b42c <get_flash_chip_model>:
}
 801b42c:	4800      	ldr	r0, [pc, #0]	@ (801b430 <get_flash_chip_model+0x4>)
 801b42e:	4770      	bx	lr
 801b430:	20019e56 	.word	0x20019e56

0801b434 <lfs_fs_ll_init>:
int lfs_fs_ll_init(void (*lock)(void *), void (*unlock)(void *)){
 801b434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b438:	b090      	sub	sp, #64	@ 0x40
 801b43a:	4607      	mov	r7, r0
 801b43c:	460e      	mov	r6, r1
	flash_info = sFLASH_GetInfo();
 801b43e:	4c37      	ldr	r4, [pc, #220]	@ (801b51c <lfs_fs_ll_init+0xe8>)
 801b440:	4668      	mov	r0, sp
 801b442:	f7fa fee5 	bl	8016210 <sFLASH_GetInfo>
 801b446:	46a6      	mov	lr, r4
 801b448:	46ec      	mov	ip, sp
 801b44a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b44e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b452:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b456:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b45a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b45e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b462:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801b466:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	if (flash_info.flash_id == 0x0) return -1;
 801b46a:	6823      	ldr	r3, [r4, #0]
 801b46c:	2b00      	cmp	r3, #0
 801b46e:	d052      	beq.n	801b516 <lfs_fs_ll_init+0xe2>
	uint8_t *read_buff   = calloc(1, flash_info.page_size);
 801b470:	46a0      	mov	r8, r4
 801b472:	8961      	ldrh	r1, [r4, #10]
 801b474:	2001      	movs	r0, #1
 801b476:	f7ff fea9 	bl	801b1cc <mg_calloc>
 801b47a:	4604      	mov	r4, r0
	uint8_t *write_buff  = calloc(1, flash_info.page_size);
 801b47c:	f8b8 100a 	ldrh.w	r1, [r8, #10]
 801b480:	2001      	movs	r0, #1
 801b482:	f7ff fea3 	bl	801b1cc <mg_calloc>
 801b486:	4605      	mov	r5, r0
	void * lookahead_buff = calloc(1, flash_info.page_size);
 801b488:	f8b8 100a 	ldrh.w	r1, [r8, #10]
 801b48c:	2001      	movs	r0, #1
 801b48e:	f7ff fe9d 	bl	801b1cc <mg_calloc>
	if (!(read_buff || write_buff || lookahead_buff)){
 801b492:	2c00      	cmp	r4, #0
 801b494:	d028      	beq.n	801b4e8 <lfs_fs_ll_init+0xb4>
	cfg.read_size         = flash_info.read_size;
 801b496:	4b21      	ldr	r3, [pc, #132]	@ (801b51c <lfs_fs_ll_init+0xe8>)
 801b498:	889a      	ldrh	r2, [r3, #4]
 801b49a:	4921      	ldr	r1, [pc, #132]	@ (801b520 <lfs_fs_ll_init+0xec>)
 801b49c:	61ca      	str	r2, [r1, #28]
	cfg.prog_size         = flash_info.write_size;
 801b49e:	88da      	ldrh	r2, [r3, #6]
 801b4a0:	620a      	str	r2, [r1, #32]
    cfg.block_size        = flash_info.erase_size;
 801b4a2:	891a      	ldrh	r2, [r3, #8]
 801b4a4:	624a      	str	r2, [r1, #36]	@ 0x24
    cfg.block_count       = flash_info.block_count;
 801b4a6:	899a      	ldrh	r2, [r3, #12]
 801b4a8:	628a      	str	r2, [r1, #40]	@ 0x28
    cfg.lookahead_size    = flash_info.page_size;
 801b4aa:	895b      	ldrh	r3, [r3, #10]
 801b4ac:	634b      	str	r3, [r1, #52]	@ 0x34
    cfg.cache_size        = flash_info.page_size;
 801b4ae:	630b      	str	r3, [r1, #48]	@ 0x30
    cfg.read_buffer       = read_buff;
 801b4b0:	63cc      	str	r4, [r1, #60]	@ 0x3c
    cfg.prog_buffer       = write_buff;
 801b4b2:	640d      	str	r5, [r1, #64]	@ 0x40
    cfg.lookahead_buffer  = lookahead_buff;
 801b4b4:	6448      	str	r0, [r1, #68]	@ 0x44
    cfg.read   = block_device_read;
 801b4b6:	4b1b      	ldr	r3, [pc, #108]	@ (801b524 <lfs_fs_ll_init+0xf0>)
 801b4b8:	604b      	str	r3, [r1, #4]
    cfg.prog   = block_device_prog;
 801b4ba:	4b1b      	ldr	r3, [pc, #108]	@ (801b528 <lfs_fs_ll_init+0xf4>)
 801b4bc:	608b      	str	r3, [r1, #8]
    cfg.erase  = block_device_erase;
 801b4be:	4b1b      	ldr	r3, [pc, #108]	@ (801b52c <lfs_fs_ll_init+0xf8>)
 801b4c0:	60cb      	str	r3, [r1, #12]
    cfg.sync   = block_device_sync;
 801b4c2:	4b1b      	ldr	r3, [pc, #108]	@ (801b530 <lfs_fs_ll_init+0xfc>)
 801b4c4:	610b      	str	r3, [r1, #16]
    cfg.lock 	= lock;
 801b4c6:	614f      	str	r7, [r1, #20]
	cfg.unlock	= unlock;
 801b4c8:	618e      	str	r6, [r1, #24]
    cfg.block_cycles 	= FLASH_BLOCK_CYCLES;
 801b4ca:	f242 7310 	movw	r3, #10000	@ 0x2710
 801b4ce:	62cb      	str	r3, [r1, #44]	@ 0x2c
    if (lfs_mount(&lfs, &cfg)< 0){
 801b4d0:	4818      	ldr	r0, [pc, #96]	@ (801b534 <lfs_fs_ll_init+0x100>)
 801b4d2:	f004 fc5c 	bl	801fd8e <lfs_mount>
 801b4d6:	2800      	cmp	r0, #0
 801b4d8:	db0d      	blt.n	801b4f6 <lfs_fs_ll_init+0xc2>
    	fs_mounted = 1;
 801b4da:	4b17      	ldr	r3, [pc, #92]	@ (801b538 <lfs_fs_ll_init+0x104>)
 801b4dc:	2201      	movs	r2, #1
 801b4de:	701a      	strb	r2, [r3, #0]
    	return 0;
 801b4e0:	2000      	movs	r0, #0
}
 801b4e2:	b010      	add	sp, #64	@ 0x40
 801b4e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!(read_buff || write_buff || lookahead_buff)){
 801b4e8:	2d00      	cmp	r5, #0
 801b4ea:	d1d4      	bne.n	801b496 <lfs_fs_ll_init+0x62>
 801b4ec:	2800      	cmp	r0, #0
 801b4ee:	d1d2      	bne.n	801b496 <lfs_fs_ll_init+0x62>
		return -2;
 801b4f0:	f06f 0001 	mvn.w	r0, #1
 801b4f4:	e7f5      	b.n	801b4e2 <lfs_fs_ll_init+0xae>
    	lfs_format(&lfs, &cfg);
 801b4f6:	4d0a      	ldr	r5, [pc, #40]	@ (801b520 <lfs_fs_ll_init+0xec>)
 801b4f8:	4c0e      	ldr	r4, [pc, #56]	@ (801b534 <lfs_fs_ll_init+0x100>)
 801b4fa:	4629      	mov	r1, r5
 801b4fc:	4620      	mov	r0, r4
 801b4fe:	f004 fc33 	bl	801fd68 <lfs_format>
    	if((err = lfs_mount(&lfs, &cfg)) == 0) fs_mounted = 1;
 801b502:	4629      	mov	r1, r5
 801b504:	4620      	mov	r0, r4
 801b506:	f004 fc42 	bl	801fd8e <lfs_mount>
 801b50a:	2800      	cmp	r0, #0
 801b50c:	d1e9      	bne.n	801b4e2 <lfs_fs_ll_init+0xae>
 801b50e:	4b0a      	ldr	r3, [pc, #40]	@ (801b538 <lfs_fs_ll_init+0x104>)
 801b510:	2201      	movs	r2, #1
 801b512:	701a      	strb	r2, [r3, #0]
    	return err;
 801b514:	e7e5      	b.n	801b4e2 <lfs_fs_ll_init+0xae>
	if (flash_info.flash_id == 0x0) return -1;
 801b516:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b51a:	e7e2      	b.n	801b4e2 <lfs_fs_ll_init+0xae>
 801b51c:	20019e48 	.word	0x20019e48
 801b520:	20019e8c 	.word	0x20019e8c
 801b524:	0801b1e9 	.word	0x0801b1e9
 801b528:	0801b259 	.word	0x0801b259
 801b52c:	0801b229 	.word	0x0801b229
 801b530:	0801b1c9 	.word	0x0801b1c9
 801b534:	20019ee8 	.word	0x20019ee8
 801b538:	20019e88 	.word	0x20019e88

0801b53c <lfs_pair_issync>:
}

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801b53c:	6803      	ldr	r3, [r0, #0]
 801b53e:	680a      	ldr	r2, [r1, #0]
 801b540:	4293      	cmp	r3, r2
 801b542:	d004      	beq.n	801b54e <lfs_pair_issync+0x12>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801b544:	6849      	ldr	r1, [r1, #4]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801b546:	428b      	cmp	r3, r1
 801b548:	d015      	beq.n	801b576 <lfs_pair_issync+0x3a>
 801b54a:	2000      	movs	r0, #0
 801b54c:	4770      	bx	lr
        const lfs_block_t pairb[2]) {
 801b54e:	b430      	push	{r4, r5}
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801b550:	6844      	ldr	r4, [r0, #4]
 801b552:	684d      	ldr	r5, [r1, #4]
 801b554:	42ac      	cmp	r4, r5
 801b556:	d00a      	beq.n	801b56e <lfs_pair_issync+0x32>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801b558:	6849      	ldr	r1, [r1, #4]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801b55a:	428b      	cmp	r3, r1
 801b55c:	d002      	beq.n	801b564 <lfs_pair_issync+0x28>
 801b55e:	2000      	movs	r0, #0
}
 801b560:	bc30      	pop	{r4, r5}
 801b562:	4770      	bx	lr
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801b564:	6843      	ldr	r3, [r0, #4]
 801b566:	429a      	cmp	r2, r3
 801b568:	d003      	beq.n	801b572 <lfs_pair_issync+0x36>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801b56a:	2000      	movs	r0, #0
 801b56c:	e7f8      	b.n	801b560 <lfs_pair_issync+0x24>
 801b56e:	2001      	movs	r0, #1
 801b570:	e7f6      	b.n	801b560 <lfs_pair_issync+0x24>
 801b572:	2001      	movs	r0, #1
 801b574:	e7f4      	b.n	801b560 <lfs_pair_issync+0x24>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801b576:	6843      	ldr	r3, [r0, #4]
 801b578:	429a      	cmp	r2, r3
 801b57a:	d001      	beq.n	801b580 <lfs_pair_issync+0x44>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801b57c:	2000      	movs	r0, #0
 801b57e:	4770      	bx	lr
 801b580:	2001      	movs	r0, #1
}
 801b582:	4770      	bx	lr

0801b584 <lfs_gstate_xor>:
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
    for (int i = 0; i < 3; i++) {
 801b584:	2300      	movs	r3, #0
 801b586:	2b02      	cmp	r3, #2
 801b588:	dc0d      	bgt.n	801b5a6 <lfs_gstate_xor+0x22>
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 801b58a:	b410      	push	{r4}
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 801b58c:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 801b590:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 801b594:	4062      	eors	r2, r4
 801b596:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
 801b59a:	3301      	adds	r3, #1
 801b59c:	2b02      	cmp	r3, #2
 801b59e:	ddf5      	ble.n	801b58c <lfs_gstate_xor+0x8>
    }
}
 801b5a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b5a4:	4770      	bx	lr
 801b5a6:	4770      	bx	lr

0801b5a8 <lfs_gstate_hasmovehere>:
    return lfs_tag_size(a->tag) >> 9;
}

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801b5a8:	6803      	ldr	r3, [r0, #0]
    return (tag & 0x70000000) >> 20;
 801b5aa:	0d1b      	lsrs	r3, r3, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801b5ac:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
 801b5b0:	d00f      	beq.n	801b5d2 <lfs_gstate_hasmovehere+0x2a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801b5b2:	6843      	ldr	r3, [r0, #4]
 801b5b4:	680a      	ldr	r2, [r1, #0]
 801b5b6:	4293      	cmp	r3, r2
 801b5b8:	d00d      	beq.n	801b5d6 <lfs_gstate_hasmovehere+0x2e>
 801b5ba:	6880      	ldr	r0, [r0, #8]
 801b5bc:	6849      	ldr	r1, [r1, #4]
 801b5be:	4288      	cmp	r0, r1
 801b5c0:	d00b      	beq.n	801b5da <lfs_gstate_hasmovehere+0x32>
 801b5c2:	428b      	cmp	r3, r1
 801b5c4:	d00b      	beq.n	801b5de <lfs_gstate_hasmovehere+0x36>
 801b5c6:	4282      	cmp	r2, r0
 801b5c8:	d001      	beq.n	801b5ce <lfs_gstate_hasmovehere+0x26>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801b5ca:	2000      	movs	r0, #0
}
 801b5cc:	4770      	bx	lr
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801b5ce:	2001      	movs	r0, #1
 801b5d0:	4770      	bx	lr
 801b5d2:	2000      	movs	r0, #0
 801b5d4:	4770      	bx	lr
 801b5d6:	2001      	movs	r0, #1
 801b5d8:	4770      	bx	lr
 801b5da:	2001      	movs	r0, #1
 801b5dc:	4770      	bx	lr
 801b5de:	2001      	movs	r0, #1
 801b5e0:	4770      	bx	lr

0801b5e2 <lfs_mlist_isopen>:
}
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 801b5e2:	b082      	sub	sp, #8
 801b5e4:	9001      	str	r0, [sp, #4]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 801b5e6:	ab01      	add	r3, sp, #4
 801b5e8:	681b      	ldr	r3, [r3, #0]
 801b5ea:	b11b      	cbz	r3, 801b5f4 <lfs_mlist_isopen+0x12>
        if (*p == (struct lfs_mlist*)node) {
 801b5ec:	428b      	cmp	r3, r1
 801b5ee:	d1fb      	bne.n	801b5e8 <lfs_mlist_isopen+0x6>
            return true;
 801b5f0:	2001      	movs	r0, #1
 801b5f2:	e000      	b.n	801b5f6 <lfs_mlist_isopen+0x14>
        }
    }

    return false;
 801b5f4:	2000      	movs	r0, #0
}
 801b5f6:	b002      	add	sp, #8
 801b5f8:	4770      	bx	lr

0801b5fa <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 801b5fa:	3028      	adds	r0, #40	@ 0x28
 801b5fc:	e000      	b.n	801b600 <lfs_mlist_remove+0x6>
 801b5fe:	4618      	mov	r0, r3
 801b600:	6803      	ldr	r3, [r0, #0]
 801b602:	b123      	cbz	r3, 801b60e <lfs_mlist_remove+0x14>
        if (*p == mlist) {
 801b604:	428b      	cmp	r3, r1
 801b606:	d1fa      	bne.n	801b5fe <lfs_mlist_remove+0x4>
            *p = (*p)->next;
 801b608:	681b      	ldr	r3, [r3, #0]
 801b60a:	6003      	str	r3, [r0, #0]
            break;
 801b60c:	4770      	bx	lr
        }
    }
}
 801b60e:	4770      	bx	lr

0801b610 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
    mlist->next = lfs->mlist;
 801b610:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801b612:	600b      	str	r3, [r1, #0]
    lfs->mlist = mlist;
 801b614:	6281      	str	r1, [r0, #40]	@ 0x28
}
 801b616:	4770      	bx	lr

0801b618 <lfs_fs_disk_version>:
    } else
#endif
    {
        return LFS_DISK_VERSION;
    }
}
 801b618:	4800      	ldr	r0, [pc, #0]	@ (801b61c <lfs_fs_disk_version+0x4>)
 801b61a:	4770      	bx	lr
 801b61c:	00020001 	.word	0x00020001

0801b620 <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 801b620:	b508      	push	{r3, lr}
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 801b622:	f7ff fff9 	bl	801b618 <lfs_fs_disk_version>

}
 801b626:	0c00      	lsrs	r0, r0, #16
 801b628:	bd08      	pop	{r3, pc}

0801b62a <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 801b62a:	b508      	push	{r3, lr}
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 801b62c:	f7ff fff4 	bl	801b618 <lfs_fs_disk_version>
}
 801b630:	b280      	uxth	r0, r0
 801b632:	bd08      	pop	{r3, pc}

0801b634 <lfs_alloc_ckpoint>:
// allocations should call this when all allocated blocks are committed to
// the filesystem
//
// after a checkpoint, the block allocator may realloc any untracked blocks
static void lfs_alloc_ckpoint(lfs_t *lfs) {
    lfs->lookahead.ckpoint = lfs->block_count;
 801b634:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801b636:	6603      	str	r3, [r0, #96]	@ 0x60
}
 801b638:	4770      	bx	lr

0801b63a <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 801b63a:	b508      	push	{r3, lr}
    lfs->lookahead.size = 0;
 801b63c:	2200      	movs	r2, #0
 801b63e:	6582      	str	r2, [r0, #88]	@ 0x58
    lfs->lookahead.next = 0;
 801b640:	65c2      	str	r2, [r0, #92]	@ 0x5c
    lfs_alloc_ckpoint(lfs);
 801b642:	f7ff fff7 	bl	801b634 <lfs_alloc_ckpoint>
}
 801b646:	bd08      	pop	{r3, pc}

0801b648 <lfs_alloc_lookahead>:

#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
    lfs_t *lfs = (lfs_t*)p;
    lfs_block_t off = ((block - lfs->lookahead.start)
 801b648:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801b64a:	1ac9      	subs	r1, r1, r3
            + lfs->block_count) % lfs->block_count;
 801b64c:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801b64e:	4419      	add	r1, r3
    lfs_block_t off = ((block - lfs->lookahead.start)
 801b650:	fbb1 f2f3 	udiv	r2, r1, r3
 801b654:	fb03 1112 	mls	r1, r3, r2, r1

    if (off < lfs->lookahead.size) {
 801b658:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 801b65a:	428b      	cmp	r3, r1
 801b65c:	d90d      	bls.n	801b67a <lfs_alloc_lookahead+0x32>
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 801b65e:	b410      	push	{r4}
        lfs->lookahead.buffer[off / 8] |= 1U << (off % 8);
 801b660:	6e44      	ldr	r4, [r0, #100]	@ 0x64
 801b662:	08c8      	lsrs	r0, r1, #3
 801b664:	5c23      	ldrb	r3, [r4, r0]
 801b666:	f001 0107 	and.w	r1, r1, #7
 801b66a:	2201      	movs	r2, #1
 801b66c:	408a      	lsls	r2, r1
 801b66e:	4313      	orrs	r3, r2
 801b670:	5423      	strb	r3, [r4, r0]
    }

    return 0;
}
 801b672:	2000      	movs	r0, #0
 801b674:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b678:	4770      	bx	lr
 801b67a:	2000      	movs	r0, #0
 801b67c:	4770      	bx	lr
	...

0801b680 <lfs_dir_traverse_filter>:
    return 0;
}

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 801b680:	b410      	push	{r4}
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 801b682:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 801b686:	d01c      	beq.n	801b6c2 <lfs_dir_traverse_filter+0x42>
 801b688:	4a19      	ldr	r2, [pc, #100]	@ (801b6f0 <lfs_dir_traverse_filter+0x70>)

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 801b68a:	6803      	ldr	r3, [r0, #0]
 801b68c:	ea83 0401 	eor.w	r4, r3, r1
 801b690:	4214      	tst	r4, r2
 801b692:	d018      	beq.n	801b6c6 <lfs_dir_traverse_filter+0x46>
    return ((int32_t)(tag << 22) >> 22) == -1;
 801b694:	f343 0209 	sbfx	r2, r3, #0, #10
    if ((mask & tag) == (mask & *filtertag) ||
 801b698:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801b69c:	d013      	beq.n	801b6c6 <lfs_dir_traverse_filter+0x46>
            lfs_tag_isdelete(*filtertag) ||
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 801b69e:	4c14      	ldr	r4, [pc, #80]	@ (801b6f0 <lfs_dir_traverse_filter+0x70>)
 801b6a0:	400c      	ands	r4, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 801b6a2:	4a14      	ldr	r2, [pc, #80]	@ (801b6f4 <lfs_dir_traverse_filter+0x74>)
 801b6a4:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 801b6a6:	f042 429f 	orr.w	r2, r2, #1333788672	@ 0x4f800000
 801b6aa:	f442 02e0 	orr.w	r2, r2, #7340032	@ 0x700000
            lfs_tag_isdelete(*filtertag) ||
 801b6ae:	4294      	cmp	r4, r2
 801b6b0:	d009      	beq.n	801b6c6 <lfs_dir_traverse_filter+0x46>
    return (tag & 0x70000000) >> 20;
 801b6b2:	0d0a      	lsrs	r2, r1, #20
 801b6b4:	f402 64e0 	and.w	r4, r2, #1792	@ 0x700
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
        return true;
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 801b6b8:	f5b4 6f80 	cmp.w	r4, #1024	@ 0x400
 801b6bc:	d009      	beq.n	801b6d2 <lfs_dir_traverse_filter+0x52>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    }

    return false;
 801b6be:	2000      	movs	r0, #0
 801b6c0:	e004      	b.n	801b6cc <lfs_dir_traverse_filter+0x4c>
            : LFS_MKTAG(0x700, 0x3ff, 0);
 801b6c2:	4a0d      	ldr	r2, [pc, #52]	@ (801b6f8 <lfs_dir_traverse_filter+0x78>)
 801b6c4:	e7e1      	b.n	801b68a <lfs_dir_traverse_filter+0xa>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 801b6c6:	2300      	movs	r3, #0
 801b6c8:	6003      	str	r3, [r0, #0]
        return true;
 801b6ca:	2001      	movs	r0, #1
}
 801b6cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b6d0:	4770      	bx	lr
    return (tag & 0x000ffc00) >> 10;
 801b6d2:	f3c1 2189 	ubfx	r1, r1, #10, #10
 801b6d6:	f3c3 2489 	ubfx	r4, r3, #10, #10
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 801b6da:	428c      	cmp	r4, r1
 801b6dc:	d305      	bcc.n	801b6ea <lfs_dir_traverse_filter+0x6a>
    return (int8_t)lfs_tag_chunk(tag);
 801b6de:	b252      	sxtb	r2, r2
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 801b6e0:	eb03 2382 	add.w	r3, r3, r2, lsl #10
 801b6e4:	6003      	str	r3, [r0, #0]
    return false;
 801b6e6:	2000      	movs	r0, #0
 801b6e8:	e7f0      	b.n	801b6cc <lfs_dir_traverse_filter+0x4c>
 801b6ea:	2000      	movs	r0, #0
 801b6ec:	e7ee      	b.n	801b6cc <lfs_dir_traverse_filter+0x4c>
 801b6ee:	bf00      	nop
 801b6f0:	7ffffc00 	.word	0x7ffffc00
 801b6f4:	000ffc00 	.word	0x000ffc00
 801b6f8:	700ffc00 	.word	0x700ffc00

0801b6fc <lfs_dir_commit_size>:
    return ((int32_t)(tag << 22) >> 22) == -1;
 801b6fc:	f341 0309 	sbfx	r3, r1, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801b700:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801b704:	bf08      	it	eq
 801b706:	3101      	addeq	r1, #1
    return tag & 0x000003ff;
 801b708:	f3c1 0109 	ubfx	r1, r1, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801b70c:	3104      	adds	r1, #4
#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
    lfs_size_t *size = p;
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 801b70e:	6803      	ldr	r3, [r0, #0]
 801b710:	440b      	add	r3, r1
 801b712:	6003      	str	r3, [r0, #0]
    return 0;
}
 801b714:	2000      	movs	r0, #0
 801b716:	4770      	bx	lr

0801b718 <lfs_dir_needsrelocation>:
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 801b718:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801b71a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 801b71c:	2b00      	cmp	r3, #0
 801b71e:	dd0b      	ble.n	801b738 <lfs_dir_needsrelocation+0x20>
 801b720:	688a      	ldr	r2, [r1, #8]
 801b722:	3201      	adds	r2, #1
 801b724:	3301      	adds	r3, #1
 801b726:	f043 0301 	orr.w	r3, r3, #1
 801b72a:	fbb2 f1f3 	udiv	r1, r2, r3
 801b72e:	fb03 2211 	mls	r2, r3, r1, r2
 801b732:	b11a      	cbz	r2, 801b73c <lfs_dir_needsrelocation+0x24>
 801b734:	2000      	movs	r0, #0
 801b736:	4770      	bx	lr
 801b738:	2000      	movs	r0, #0
 801b73a:	4770      	bx	lr
 801b73c:	2001      	movs	r0, #1
}
 801b73e:	4770      	bx	lr

0801b740 <lfs_dir_close_>:
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);

    return 0;
}

static int lfs_dir_close_(lfs_t *lfs, lfs_dir_t *dir) {
 801b740:	b508      	push	{r3, lr}
    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist *)dir);
 801b742:	f7ff ff5a 	bl	801b5fa <lfs_mlist_remove>

    return 0;
}
 801b746:	2000      	movs	r0, #0
 801b748:	bd08      	pop	{r3, pc}

0801b74a <lfs_file_tell_>:
#endif

static lfs_soff_t lfs_file_tell_(lfs_t *lfs, lfs_file_t *file) {
    (void)lfs;
    return file->pos;
}
 801b74a:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 801b74c:	4770      	bx	lr

0801b74e <lfs_file_size_>:

static lfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file) {
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 801b74e:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801b750:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801b754:	d101      	bne.n	801b75a <lfs_file_size_+0xc>
        return lfs_max(file->pos, file->ctz.size);
    }
#endif

    return file->ctz.size;
 801b756:	6ac8      	ldr	r0, [r1, #44]	@ 0x2c
}
 801b758:	4770      	bx	lr
        return lfs_max(file->pos, file->ctz.size);
 801b75a:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 801b75c:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 801b75e:	4298      	cmp	r0, r3
 801b760:	bf38      	it	cc
 801b762:	4618      	movcc	r0, r3
 801b764:	4770      	bx	lr

0801b766 <lfs_fs_prepsuperblock>:
    return LFS_ERR_NOENT;
}
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 801b766:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801b768:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
            | (uint32_t)needssuperblock << 9;
 801b76c:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 801b770:	6303      	str	r3, [r0, #48]	@ 0x30
}
 801b772:	4770      	bx	lr

0801b774 <lfs_fs_prepmove>:
}
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 801b774:	b410      	push	{r4}
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 801b776:	4b13      	ldr	r3, [pc, #76]	@ (801b7c4 <lfs_fs_prepmove+0x50>)
 801b778:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 801b77a:	4023      	ands	r3, r4
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 801b77c:	f240 3cff 	movw	ip, #1023	@ 0x3ff
 801b780:	4561      	cmp	r1, ip
 801b782:	d017      	beq.n	801b7b4 <lfs_fs_prepmove+0x40>
 801b784:	ea4f 2c81 	mov.w	ip, r1, lsl #10
 801b788:	f04c 4c9f 	orr.w	ip, ip, #1333788672	@ 0x4f800000
 801b78c:	f44c 0ce0 	orr.w	ip, ip, #7340032	@ 0x700000
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 801b790:	ea43 030c 	orr.w	r3, r3, ip
 801b794:	6303      	str	r3, [r0, #48]	@ 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 801b796:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801b79a:	4299      	cmp	r1, r3
 801b79c:	d00d      	beq.n	801b7ba <lfs_fs_prepmove+0x46>
 801b79e:	6813      	ldr	r3, [r2, #0]
 801b7a0:	6343      	str	r3, [r0, #52]	@ 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 801b7a2:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801b7a6:	4299      	cmp	r1, r3
 801b7a8:	d009      	beq.n	801b7be <lfs_fs_prepmove+0x4a>
 801b7aa:	6853      	ldr	r3, [r2, #4]
 801b7ac:	6383      	str	r3, [r0, #56]	@ 0x38
}
 801b7ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b7b2:	4770      	bx	lr
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 801b7b4:	f04f 0c00 	mov.w	ip, #0
 801b7b8:	e7ea      	b.n	801b790 <lfs_fs_prepmove+0x1c>
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 801b7ba:	2300      	movs	r3, #0
 801b7bc:	e7f0      	b.n	801b7a0 <lfs_fs_prepmove+0x2c>
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 801b7be:	2300      	movs	r3, #0
 801b7c0:	e7f4      	b.n	801b7ac <lfs_fs_prepmove+0x38>
 801b7c2:	bf00      	nop
 801b7c4:	800003ff 	.word	0x800003ff

0801b7c8 <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
    (void)block;
    lfs_size_t *size = p;
    *size += 1;
 801b7c8:	6803      	ldr	r3, [r0, #0]
 801b7ca:	3301      	adds	r3, #1
 801b7cc:	6003      	str	r3, [r0, #0]
    return 0;
}
 801b7ce:	2000      	movs	r0, #0
 801b7d0:	4770      	bx	lr
	...

0801b7d4 <lfs_bd_erase>:
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 801b7d4:	b508      	push	{r3, lr}
    LFS_ASSERT(block < lfs->block_count);
 801b7d6:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801b7d8:	428b      	cmp	r3, r1
 801b7da:	d905      	bls.n	801b7e8 <lfs_bd_erase+0x14>
    int err = lfs->cfg->erase(lfs->cfg, block);
 801b7dc:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801b7de:	68c3      	ldr	r3, [r0, #12]
 801b7e0:	4798      	blx	r3
    LFS_ASSERT(err <= 0);
 801b7e2:	2800      	cmp	r0, #0
 801b7e4:	dc07      	bgt.n	801b7f6 <lfs_bd_erase+0x22>
}
 801b7e6:	bd08      	pop	{r3, pc}
    LFS_ASSERT(block < lfs->block_count);
 801b7e8:	4b06      	ldr	r3, [pc, #24]	@ (801b804 <lfs_bd_erase+0x30>)
 801b7ea:	4a07      	ldr	r2, [pc, #28]	@ (801b808 <lfs_bd_erase+0x34>)
 801b7ec:	f44f 718a 	mov.w	r1, #276	@ 0x114
 801b7f0:	4806      	ldr	r0, [pc, #24]	@ (801b80c <lfs_bd_erase+0x38>)
 801b7f2:	f00e fee3 	bl	802a5bc <__assert_func>
    LFS_ASSERT(err <= 0);
 801b7f6:	4b06      	ldr	r3, [pc, #24]	@ (801b810 <lfs_bd_erase+0x3c>)
 801b7f8:	4a03      	ldr	r2, [pc, #12]	@ (801b808 <lfs_bd_erase+0x34>)
 801b7fa:	f44f 718b 	mov.w	r1, #278	@ 0x116
 801b7fe:	4803      	ldr	r0, [pc, #12]	@ (801b80c <lfs_bd_erase+0x38>)
 801b800:	f00e fedc 	bl	802a5bc <__assert_func>
 801b804:	080399b0 	.word	0x080399b0
 801b808:	0803a610 	.word	0x0803a610
 801b80c:	080398c4 	.word	0x080398c4
 801b810:	080398f4 	.word	0x080398f4

0801b814 <lfs_fs_preporphans>:
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 801b814:	b508      	push	{r3, lr}
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 801b816:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    return tag & 0x000003ff;
 801b818:	f3c3 0209 	ubfx	r2, r3, #0, #10
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 801b81c:	b90a      	cbnz	r2, 801b822 <lfs_fs_preporphans+0xe>
 801b81e:	2900      	cmp	r1, #0
 801b820:	db12      	blt.n	801b848 <lfs_fs_preporphans+0x34>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 801b822:	f5b2 7fff 	cmp.w	r2, #510	@ 0x1fe
 801b826:	d901      	bls.n	801b82c <lfs_fs_preporphans+0x18>
 801b828:	2900      	cmp	r1, #0
 801b82a:	dc14      	bgt.n	801b856 <lfs_fs_preporphans+0x42>
    lfs->gstate.tag += orphans;
 801b82c:	4419      	add	r1, r3
 801b82e:	6301      	str	r1, [r0, #48]	@ 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 801b830:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
    return tag & 0x000003ff;
 801b834:	f3c1 0109 	ubfx	r1, r1, #0, #10
    return lfs_tag_size(a->tag);
 801b838:	3900      	subs	r1, #0
 801b83a:	bf18      	it	ne
 801b83c:	2101      	movne	r1, #1
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 801b83e:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
 801b842:	6303      	str	r3, [r0, #48]	@ 0x30
}
 801b844:	2000      	movs	r0, #0
 801b846:	bd08      	pop	{r3, pc}
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 801b848:	4b06      	ldr	r3, [pc, #24]	@ (801b864 <lfs_fs_preporphans+0x50>)
 801b84a:	4a07      	ldr	r2, [pc, #28]	@ (801b868 <lfs_fs_preporphans+0x54>)
 801b84c:	f241 21e2 	movw	r1, #4834	@ 0x12e2
 801b850:	4806      	ldr	r0, [pc, #24]	@ (801b86c <lfs_fs_preporphans+0x58>)
 801b852:	f00e feb3 	bl	802a5bc <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 801b856:	4b06      	ldr	r3, [pc, #24]	@ (801b870 <lfs_fs_preporphans+0x5c>)
 801b858:	4a03      	ldr	r2, [pc, #12]	@ (801b868 <lfs_fs_preporphans+0x54>)
 801b85a:	f241 21e3 	movw	r1, #4835	@ 0x12e3
 801b85e:	4803      	ldr	r0, [pc, #12]	@ (801b86c <lfs_fs_preporphans+0x58>)
 801b860:	f00e feac 	bl	802a5bc <__assert_func>
 801b864:	08039900 	.word	0x08039900
 801b868:	0803a5e0 	.word	0x0803a5e0
 801b86c:	080398c4 	.word	0x080398c4
 801b870:	08039938 	.word	0x08039938

0801b874 <lfs_cache_zero>:
static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 801b874:	b510      	push	{r4, lr}
 801b876:	460c      	mov	r4, r1
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 801b878:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801b87a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801b87c:	21ff      	movs	r1, #255	@ 0xff
 801b87e:	68e0      	ldr	r0, [r4, #12]
 801b880:	f011 fbee 	bl	802d060 <memset>
    pcache->block = LFS_BLOCK_NULL;
 801b884:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b888:	6023      	str	r3, [r4, #0]
}
 801b88a:	bd10      	pop	{r4, pc}

0801b88c <lfs_ctz_index>:
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 801b88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lfs_off_t size = *off;
 801b88e:	680d      	ldr	r5, [r1, #0]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 801b890:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801b892:	6a5f      	ldr	r7, [r3, #36]	@ 0x24
 801b894:	3f08      	subs	r7, #8
    lfs_off_t i = size / b;
 801b896:	fbb5 f0f7 	udiv	r0, r5, r7
    if (i == 0) {
 801b89a:	42bd      	cmp	r5, r7
 801b89c:	d312      	bcc.n	801b8c4 <lfs_ctz_index+0x38>
 801b89e:	460e      	mov	r6, r1
}

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 801b8a0:	3801      	subs	r0, #1
 801b8a2:	f7f5 fa71 	bl	8010d88 <__popcountsi2>
    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 801b8a6:	1c84      	adds	r4, r0, #2
 801b8a8:	eba5 0484 	sub.w	r4, r5, r4, lsl #2
 801b8ac:	fbb4 f4f7 	udiv	r4, r4, r7
    *off = size - b*i - 4*lfs_popc(i);
 801b8b0:	fb04 5517 	mls	r5, r4, r7, r5
 801b8b4:	4620      	mov	r0, r4
 801b8b6:	f7f5 fa67 	bl	8010d88 <__popcountsi2>
 801b8ba:	eba5 0580 	sub.w	r5, r5, r0, lsl #2
 801b8be:	6035      	str	r5, [r6, #0]
    return i;
 801b8c0:	4620      	mov	r0, r4
}
 801b8c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 801b8c4:	2000      	movs	r0, #0
 801b8c6:	e7fc      	b.n	801b8c2 <lfs_ctz_index+0x36>

0801b8c8 <lfs_bd_read>:
        void *buffer, lfs_size_t size) {
 801b8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8cc:	b087      	sub	sp, #28
 801b8ce:	4615      	mov	r5, r2
 801b8d0:	469b      	mov	fp, r3
 801b8d2:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801b8d4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801b8d6:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
    if (off+size > lfs->cfg->block_size
 801b8da:	eb04 020a 	add.w	r2, r4, sl
 801b8de:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801b8e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b8e2:	429a      	cmp	r2, r3
 801b8e4:	f200 80d0 	bhi.w	801ba88 <lfs_bd_read+0x1c0>
 801b8e8:	4689      	mov	r9, r1
            || (lfs->block_count && block >= lfs->block_count)) {
 801b8ea:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801b8ec:	2b00      	cmp	r3, #0
 801b8ee:	f000 80c7 	beq.w	801ba80 <lfs_bd_read+0x1b8>
 801b8f2:	42bb      	cmp	r3, r7
 801b8f4:	f240 80cb 	bls.w	801ba8e <lfs_bd_read+0x1c6>
 801b8f8:	9003      	str	r0, [sp, #12]
 801b8fa:	e084      	b.n	801ba06 <lfs_bd_read+0x13e>
                off < pcache->off + pcache->size) {
 801b8fc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801b900:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801b904:	1899      	adds	r1, r3, r2
        if (pcache && block == pcache->block &&
 801b906:	42a1      	cmp	r1, r4
 801b908:	d91e      	bls.n	801b948 <lfs_bd_read+0x80>
            if (off >= pcache->off) {
 801b90a:	42a3      	cmp	r3, r4
 801b90c:	d905      	bls.n	801b91a <lfs_bd_read+0x52>
            diff = lfs_min(diff, pcache->off-off);
 801b90e:	1b1b      	subs	r3, r3, r4
    return (a < b) ? a : b;
 801b910:	4553      	cmp	r3, sl
 801b912:	bf28      	it	cs
 801b914:	4653      	movcs	r3, sl
 801b916:	4698      	mov	r8, r3
 801b918:	e081      	b.n	801ba1e <lfs_bd_read+0x156>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 801b91a:	1b19      	subs	r1, r3, r4
 801b91c:	eb02 0801 	add.w	r8, r2, r1
 801b920:	45d0      	cmp	r8, sl
 801b922:	bf28      	it	cs
 801b924:	46d0      	movcs	r8, sl
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 801b926:	f8d9 100c 	ldr.w	r1, [r9, #12]
 801b92a:	1ae3      	subs	r3, r4, r3
 801b92c:	4642      	mov	r2, r8
 801b92e:	4419      	add	r1, r3
 801b930:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801b932:	f012 fdd1 	bl	802e4d8 <memcpy>
                data += diff;
 801b936:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b938:	4443      	add	r3, r8
 801b93a:	9312      	str	r3, [sp, #72]	@ 0x48
                off += diff;
 801b93c:	4444      	add	r4, r8
                size -= diff;
 801b93e:	ebaa 0a08 	sub.w	sl, sl, r8
                continue;
 801b942:	e060      	b.n	801ba06 <lfs_bd_read+0x13e>
        lfs_size_t diff = size;
 801b944:	46d0      	mov	r8, sl
 801b946:	e06a      	b.n	801ba1e <lfs_bd_read+0x156>
 801b948:	46d0      	mov	r8, sl
 801b94a:	e068      	b.n	801ba1e <lfs_bd_read+0x156>
                off < rcache->off + rcache->size) {
 801b94c:	686b      	ldr	r3, [r5, #4]
 801b94e:	68aa      	ldr	r2, [r5, #8]
 801b950:	1899      	adds	r1, r3, r2
        if (block == rcache->block &&
 801b952:	42a1      	cmp	r1, r4
 801b954:	d966      	bls.n	801ba24 <lfs_bd_read+0x15c>
            if (off >= rcache->off) {
 801b956:	42a3      	cmp	r3, r4
 801b958:	d904      	bls.n	801b964 <lfs_bd_read+0x9c>
            diff = lfs_min(diff, rcache->off-off);
 801b95a:	1b1b      	subs	r3, r3, r4
 801b95c:	4598      	cmp	r8, r3
 801b95e:	bf28      	it	cs
 801b960:	4698      	movcs	r8, r3
 801b962:	e05f      	b.n	801ba24 <lfs_bd_read+0x15c>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 801b964:	1b19      	subs	r1, r3, r4
 801b966:	440a      	add	r2, r1
 801b968:	4590      	cmp	r8, r2
 801b96a:	bf28      	it	cs
 801b96c:	4690      	movcs	r8, r2
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 801b96e:	68e9      	ldr	r1, [r5, #12]
 801b970:	1ae3      	subs	r3, r4, r3
 801b972:	4642      	mov	r2, r8
 801b974:	4419      	add	r1, r3
 801b976:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801b978:	f012 fdae 	bl	802e4d8 <memcpy>
                data += diff;
 801b97c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b97e:	4443      	add	r3, r8
 801b980:	9312      	str	r3, [sp, #72]	@ 0x48
                off += diff;
 801b982:	4444      	add	r4, r8
                size -= diff;
 801b984:	ebaa 0a08 	sub.w	sl, sl, r8
                continue;
 801b988:	e03d      	b.n	801ba06 <lfs_bd_read+0x13e>
            data += diff;
 801b98a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b98c:	9b04      	ldr	r3, [sp, #16]
 801b98e:	441a      	add	r2, r3
 801b990:	9212      	str	r2, [sp, #72]	@ 0x48
            off += diff;
 801b992:	441c      	add	r4, r3
            size -= diff;
 801b994:	9b05      	ldr	r3, [sp, #20]
 801b996:	eba3 0308 	sub.w	r3, r3, r8
 801b99a:	449a      	add	sl, r3
            continue;
 801b99c:	e033      	b.n	801ba06 <lfs_bd_read+0x13e>
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 801b99e:	9b03      	ldr	r3, [sp, #12]
 801b9a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b9a2:	b10b      	cbz	r3, 801b9a8 <lfs_bd_read+0xe0>
 801b9a4:	42bb      	cmp	r3, r7
 801b9a6:	d95f      	bls.n	801ba68 <lfs_bd_read+0x1a0>
        rcache->block = block;
 801b9a8:	602f      	str	r7, [r5, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 801b9aa:	9e03      	ldr	r6, [sp, #12]
 801b9ac:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 801b9ae:	69da      	ldr	r2, [r3, #28]
    return a - (a % alignment);
 801b9b0:	fbb4 f3f2 	udiv	r3, r4, r2
 801b9b4:	fb02 4313 	mls	r3, r2, r3, r4
 801b9b8:	1ae2      	subs	r2, r4, r3
 801b9ba:	606a      	str	r2, [r5, #4]
                lfs_min(
 801b9bc:	eb04 010b 	add.w	r1, r4, fp
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 801b9c0:	f8d6 c068 	ldr.w	ip, [r6, #104]	@ 0x68
 801b9c4:	f8dc 001c 	ldr.w	r0, [ip, #28]
    return lfs_aligndown(a + alignment-1, alignment);
 801b9c8:	4401      	add	r1, r0
 801b9ca:	3901      	subs	r1, #1
    return a - (a % alignment);
 801b9cc:	fbb1 fef0 	udiv	lr, r1, r0
 801b9d0:	fb00 101e 	mls	r0, r0, lr, r1
 801b9d4:	1a09      	subs	r1, r1, r0
                    lfs->cfg->block_size)
 801b9d6:	f8dc 0024 	ldr.w	r0, [ip, #36]	@ 0x24
        rcache->size = lfs_min(
 801b9da:	1b1b      	subs	r3, r3, r4
 801b9dc:	4288      	cmp	r0, r1
 801b9de:	bf94      	ite	ls
 801b9e0:	181b      	addls	r3, r3, r0
 801b9e2:	185b      	addhi	r3, r3, r1
                lfs->cfg->cache_size);
 801b9e4:	f8dc 1030 	ldr.w	r1, [ip, #48]	@ 0x30
    return (a < b) ? a : b;
 801b9e8:	428b      	cmp	r3, r1
 801b9ea:	bf28      	it	cs
 801b9ec:	460b      	movcs	r3, r1
        rcache->size = lfs_min(
 801b9ee:	60ab      	str	r3, [r5, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 801b9f0:	6eb0      	ldr	r0, [r6, #104]	@ 0x68
 801b9f2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801b9f6:	9300      	str	r3, [sp, #0]
 801b9f8:	68eb      	ldr	r3, [r5, #12]
 801b9fa:	4639      	mov	r1, r7
 801b9fc:	47c0      	blx	r8
        LFS_ASSERT(err <= 0);
 801b9fe:	1e03      	subs	r3, r0, #0
 801ba00:	dc38      	bgt.n	801ba74 <lfs_bd_read+0x1ac>
        if (err) {
 801ba02:	2b00      	cmp	r3, #0
 801ba04:	d146      	bne.n	801ba94 <lfs_bd_read+0x1cc>
    while (size > 0) {
 801ba06:	f1ba 0f00 	cmp.w	sl, #0
 801ba0a:	d03b      	beq.n	801ba84 <lfs_bd_read+0x1bc>
        if (pcache && block == pcache->block &&
 801ba0c:	f1b9 0f00 	cmp.w	r9, #0
 801ba10:	d098      	beq.n	801b944 <lfs_bd_read+0x7c>
 801ba12:	f8d9 3000 	ldr.w	r3, [r9]
 801ba16:	42bb      	cmp	r3, r7
 801ba18:	f43f af70 	beq.w	801b8fc <lfs_bd_read+0x34>
        lfs_size_t diff = size;
 801ba1c:	46d0      	mov	r8, sl
        if (block == rcache->block &&
 801ba1e:	682b      	ldr	r3, [r5, #0]
 801ba20:	42bb      	cmp	r3, r7
 801ba22:	d093      	beq.n	801b94c <lfs_bd_read+0x84>
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 801ba24:	45da      	cmp	sl, fp
 801ba26:	d3ba      	bcc.n	801b99e <lfs_bd_read+0xd6>
 801ba28:	9b03      	ldr	r3, [sp, #12]
 801ba2a:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801ba2c:	69c2      	ldr	r2, [r0, #28]
 801ba2e:	fbb4 f3f2 	udiv	r3, r4, r2
 801ba32:	fb02 4313 	mls	r3, r2, r3, r4
 801ba36:	2b00      	cmp	r3, #0
 801ba38:	d1b1      	bne.n	801b99e <lfs_bd_read+0xd6>
 801ba3a:	4552      	cmp	r2, sl
 801ba3c:	d8af      	bhi.n	801b99e <lfs_bd_read+0xd6>
    return a - (a % alignment);
 801ba3e:	fbb8 f3f2 	udiv	r3, r8, r2
 801ba42:	fb02 8313 	mls	r3, r2, r3, r8
 801ba46:	9305      	str	r3, [sp, #20]
 801ba48:	eba8 0203 	sub.w	r2, r8, r3
 801ba4c:	4613      	mov	r3, r2
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 801ba4e:	6842      	ldr	r2, [r0, #4]
 801ba50:	4616      	mov	r6, r2
 801ba52:	9304      	str	r3, [sp, #16]
 801ba54:	9300      	str	r3, [sp, #0]
 801ba56:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ba58:	4622      	mov	r2, r4
 801ba5a:	4639      	mov	r1, r7
 801ba5c:	47b0      	blx	r6
            if (err) {
 801ba5e:	2800      	cmp	r0, #0
 801ba60:	d093      	beq.n	801b98a <lfs_bd_read+0xc2>
}
 801ba62:	b007      	add	sp, #28
 801ba64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 801ba68:	4b0b      	ldr	r3, [pc, #44]	@ (801ba98 <lfs_bd_read+0x1d0>)
 801ba6a:	4a0c      	ldr	r2, [pc, #48]	@ (801ba9c <lfs_bd_read+0x1d4>)
 801ba6c:	216b      	movs	r1, #107	@ 0x6b
 801ba6e:	480c      	ldr	r0, [pc, #48]	@ (801baa0 <lfs_bd_read+0x1d8>)
 801ba70:	f00e fda4 	bl	802a5bc <__assert_func>
        LFS_ASSERT(err <= 0);
 801ba74:	4b0b      	ldr	r3, [pc, #44]	@ (801baa4 <lfs_bd_read+0x1dc>)
 801ba76:	4a09      	ldr	r2, [pc, #36]	@ (801ba9c <lfs_bd_read+0x1d4>)
 801ba78:	2176      	movs	r1, #118	@ 0x76
 801ba7a:	4809      	ldr	r0, [pc, #36]	@ (801baa0 <lfs_bd_read+0x1d8>)
 801ba7c:	f00e fd9e 	bl	802a5bc <__assert_func>
 801ba80:	9003      	str	r0, [sp, #12]
 801ba82:	e7c0      	b.n	801ba06 <lfs_bd_read+0x13e>
    return 0;
 801ba84:	2000      	movs	r0, #0
 801ba86:	e7ec      	b.n	801ba62 <lfs_bd_read+0x19a>
        return LFS_ERR_CORRUPT;
 801ba88:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801ba8c:	e7e9      	b.n	801ba62 <lfs_bd_read+0x19a>
 801ba8e:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801ba92:	e7e6      	b.n	801ba62 <lfs_bd_read+0x19a>
 801ba94:	4618      	mov	r0, r3
 801ba96:	e7e4      	b.n	801ba62 <lfs_bd_read+0x19a>
 801ba98:	08039970 	.word	0x08039970
 801ba9c:	0803a638 	.word	0x0803a638
 801baa0:	080398c4 	.word	0x080398c4
 801baa4:	080398f4 	.word	0x080398f4

0801baa8 <lfs_dir_getslice>:
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 801baa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801baac:	b089      	sub	sp, #36	@ 0x24
 801baae:	4607      	mov	r7, r0
 801bab0:	468a      	mov	sl, r1
 801bab2:	4690      	mov	r8, r2
 801bab4:	469b      	mov	fp, r3
    lfs_off_t off = dir->off;
 801bab6:	68cd      	ldr	r5, [r1, #12]
    lfs_tag_t ntag = dir->etag;
 801bab8:	690b      	ldr	r3, [r1, #16]
 801baba:	9307      	str	r3, [sp, #28]
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 801babc:	303c      	adds	r0, #60	@ 0x3c
 801babe:	f7ff fd73 	bl	801b5a8 <lfs_gstate_hasmovehere>
 801bac2:	2800      	cmp	r0, #0
 801bac4:	f000 808d 	beq.w	801bbe2 <lfs_dir_getslice+0x13a>
    return (tag & 0x000ffc00) >> 10;
 801bac8:	f3c8 2389 	ubfx	r3, r8, #10, #10
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 801bacc:	2b00      	cmp	r3, #0
 801bace:	f000 808a 	beq.w	801bbe6 <lfs_dir_getslice+0x13e>
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 801bad2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
    return (tag & 0x000ffc00) >> 10;
 801bad4:	f3c2 238f 	ubfx	r3, r2, #10, #16
 801bad8:	f3c2 2289 	ubfx	r2, r2, #10, #10
 801badc:	f3cb 218f 	ubfx	r1, fp, #10, #16
 801bae0:	f3cb 2089 	ubfx	r0, fp, #10, #10
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 801bae4:	404b      	eors	r3, r1
 801bae6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801baea:	2b00      	cmp	r3, #0
 801baec:	f000 8085 	beq.w	801bbfa <lfs_dir_getslice+0x152>
        } else if (lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(gtag)) {
 801baf0:	4282      	cmp	r2, r0
 801baf2:	d37a      	bcc.n	801bbea <lfs_dir_getslice+0x142>
    lfs_stag_t gdiff = 0;
 801baf4:	2600      	movs	r6, #0
 801baf6:	e006      	b.n	801bb06 <lfs_dir_getslice+0x5e>
        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 801baf8:	9605      	str	r6, [sp, #20]
 801bafa:	ebab 0306 	sub.w	r3, fp, r6
 801bafe:	4063      	eors	r3, r4
 801bb00:	ea13 0f08 	tst.w	r3, r8
 801bb04:	d048      	beq.n	801bb98 <lfs_dir_getslice+0xf0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 801bb06:	9c07      	ldr	r4, [sp, #28]
    return ((int32_t)(tag << 22) >> 22) == -1;
 801bb08:	f344 0909 	sbfx	r9, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801bb0c:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 801bb10:	bf14      	ite	ne
 801bb12:	4623      	movne	r3, r4
 801bb14:	1c63      	addeq	r3, r4, #1
    return tag & 0x000003ff;
 801bb16:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801bb1a:	1d1a      	adds	r2, r3, #4
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 801bb1c:	3308      	adds	r3, #8
 801bb1e:	42ab      	cmp	r3, r5
 801bb20:	d865      	bhi.n	801bbee <lfs_dir_getslice+0x146>
        off -= lfs_tag_dsize(ntag);
 801bb22:	1aad      	subs	r5, r5, r2
                dir->pair[0], off, &ntag, sizeof(ntag));
 801bb24:	f8da 2000 	ldr.w	r2, [sl]
        int err = lfs_bd_read(lfs,
 801bb28:	2304      	movs	r3, #4
 801bb2a:	9303      	str	r3, [sp, #12]
 801bb2c:	a907      	add	r1, sp, #28
 801bb2e:	9102      	str	r1, [sp, #8]
 801bb30:	9501      	str	r5, [sp, #4]
 801bb32:	9200      	str	r2, [sp, #0]
 801bb34:	463a      	mov	r2, r7
 801bb36:	2100      	movs	r1, #0
 801bb38:	4638      	mov	r0, r7
 801bb3a:	f7ff fec5 	bl	801b8c8 <lfs_bd_read>
        if (err) {
 801bb3e:	4603      	mov	r3, r0
 801bb40:	2800      	cmp	r0, #0
 801bb42:	d156      	bne.n	801bbf2 <lfs_dir_getslice+0x14a>
        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 801bb44:	9b07      	ldr	r3, [sp, #28]
static inline uint32_t lfs_frombe32(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 801bb46:	ba1b      	rev	r3, r3
 801bb48:	4063      	eors	r3, r4
 801bb4a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801bb4e:	9307      	str	r3, [sp, #28]
    return (tag & 0x000ffc00) >> 10;
 801bb50:	f3c8 2389 	ubfx	r3, r8, #10, #10
        if (lfs_tag_id(gmask) != 0 &&
 801bb54:	2b00      	cmp	r3, #0
 801bb56:	d0cf      	beq.n	801baf8 <lfs_dir_getslice+0x50>
    return (tag & 0x70000000) >> 20;
 801bb58:	0d23      	lsrs	r3, r4, #20
 801bb5a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
        if (lfs_tag_id(gmask) != 0 &&
 801bb5e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801bb62:	d1c9      	bne.n	801baf8 <lfs_dir_getslice+0x50>
    return (tag & 0x000ffc00) >> 10;
 801bb64:	f3c4 2089 	ubfx	r0, r4, #10, #10
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 801bb68:	ebab 0206 	sub.w	r2, fp, r6
    return (tag & 0x000ffc00) >> 10;
 801bb6c:	f3c2 2c89 	ubfx	ip, r2, #10, #10
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 801bb70:	4584      	cmp	ip, r0
 801bb72:	d3c1      	bcc.n	801baf8 <lfs_dir_getslice+0x50>
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 801bb74:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 801bb78:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 801bb7c:	f422 727f 	bic.w	r2, r2, #1020	@ 0x3fc
 801bb80:	f022 0203 	bic.w	r2, r2, #3
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 801bb84:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 801bb88:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801bb8c:	42a2      	cmp	r2, r4
 801bb8e:	d037      	beq.n	801bc00 <lfs_dir_getslice+0x158>
    return (int8_t)lfs_tag_chunk(tag);
 801bb90:	b25b      	sxtb	r3, r3
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 801bb92:	eb06 2683 	add.w	r6, r6, r3, lsl #10
 801bb96:	e7af      	b.n	801baf8 <lfs_dir_getslice+0x50>
            if (lfs_tag_isdelete(tag)) {
 801bb98:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 801bb9c:	d033      	beq.n	801bc06 <lfs_dir_getslice+0x15e>
    return tag & 0x000003ff;
 801bb9e:	f3c4 0609 	ubfx	r6, r4, #0, #10
    return (a < b) ? a : b;
 801bba2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801bba4:	429e      	cmp	r6, r3
 801bba6:	bf28      	it	cs
 801bba8:	461e      	movcs	r6, r3
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 801bbaa:	f8da 2000 	ldr.w	r2, [sl]
 801bbae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801bbb0:	442b      	add	r3, r5
            err = lfs_bd_read(lfs,
 801bbb2:	9603      	str	r6, [sp, #12]
 801bbb4:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801bbb6:	9102      	str	r1, [sp, #8]
 801bbb8:	3304      	adds	r3, #4
 801bbba:	9301      	str	r3, [sp, #4]
 801bbbc:	9200      	str	r2, [sp, #0]
 801bbbe:	4633      	mov	r3, r6
 801bbc0:	463a      	mov	r2, r7
 801bbc2:	2100      	movs	r1, #0
 801bbc4:	4638      	mov	r0, r7
 801bbc6:	f7ff fe7f 	bl	801b8c8 <lfs_bd_read>
            if (err) {
 801bbca:	4603      	mov	r3, r0
 801bbcc:	b988      	cbnz	r0, 801bbf2 <lfs_dir_getslice+0x14a>
            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 801bbce:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801bbd0:	1b9a      	subs	r2, r3, r6
 801bbd2:	2100      	movs	r1, #0
 801bbd4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801bbd6:	1998      	adds	r0, r3, r6
 801bbd8:	f011 fa42 	bl	802d060 <memset>
            return tag + gdiff;
 801bbdc:	9b05      	ldr	r3, [sp, #20]
 801bbde:	4423      	add	r3, r4
 801bbe0:	e007      	b.n	801bbf2 <lfs_dir_getslice+0x14a>
    lfs_stag_t gdiff = 0;
 801bbe2:	2600      	movs	r6, #0
 801bbe4:	e78f      	b.n	801bb06 <lfs_dir_getslice+0x5e>
 801bbe6:	2600      	movs	r6, #0
 801bbe8:	e78d      	b.n	801bb06 <lfs_dir_getslice+0x5e>
            gdiff -= LFS_MKTAG(0, 1, 0);
 801bbea:	4e08      	ldr	r6, [pc, #32]	@ (801bc0c <lfs_dir_getslice+0x164>)
 801bbec:	e78b      	b.n	801bb06 <lfs_dir_getslice+0x5e>
    return LFS_ERR_NOENT;
 801bbee:	f06f 0301 	mvn.w	r3, #1
}
 801bbf2:	4618      	mov	r0, r3
 801bbf4:	b009      	add	sp, #36	@ 0x24
 801bbf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LFS_ERR_NOENT;
 801bbfa:	f06f 0301 	mvn.w	r3, #1
 801bbfe:	e7f8      	b.n	801bbf2 <lfs_dir_getslice+0x14a>
                return LFS_ERR_NOENT;
 801bc00:	f06f 0301 	mvn.w	r3, #1
 801bc04:	e7f5      	b.n	801bbf2 <lfs_dir_getslice+0x14a>
                return LFS_ERR_NOENT;
 801bc06:	f06f 0301 	mvn.w	r3, #1
 801bc0a:	e7f2      	b.n	801bbf2 <lfs_dir_getslice+0x14a>
 801bc0c:	fffffc00 	.word	0xfffffc00

0801bc10 <lfs_dir_get>:
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 801bc10:	b510      	push	{r4, lr}
 801bc12:	b084      	sub	sp, #16
    return tag & 0x000003ff;
 801bc14:	f3c3 0409 	ubfx	r4, r3, #0, #10
    return lfs_dir_getslice(lfs, dir,
 801bc18:	9402      	str	r4, [sp, #8]
 801bc1a:	9c06      	ldr	r4, [sp, #24]
 801bc1c:	9401      	str	r4, [sp, #4]
 801bc1e:	2400      	movs	r4, #0
 801bc20:	9400      	str	r4, [sp, #0]
 801bc22:	f7ff ff41 	bl	801baa8 <lfs_dir_getslice>
}
 801bc26:	b004      	add	sp, #16
 801bc28:	bd10      	pop	{r4, pc}
	...

0801bc2c <lfs_dir_getgstate>:
        lfs_gstate_t *gstate) {
 801bc2c:	b510      	push	{r4, lr}
 801bc2e:	b086      	sub	sp, #24
 801bc30:	4614      	mov	r4, r2
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 801bc32:	ab03      	add	r3, sp, #12
 801bc34:	9300      	str	r3, [sp, #0]
 801bc36:	4b09      	ldr	r3, [pc, #36]	@ (801bc5c <lfs_dir_getgstate+0x30>)
 801bc38:	4a09      	ldr	r2, [pc, #36]	@ (801bc60 <lfs_dir_getgstate+0x34>)
 801bc3a:	f7ff ffe9 	bl	801bc10 <lfs_dir_get>
    if (res < 0 && res != LFS_ERR_NOENT) {
 801bc3e:	2800      	cmp	r0, #0
 801bc40:	da04      	bge.n	801bc4c <lfs_dir_getgstate+0x20>
 801bc42:	f110 0f02 	cmn.w	r0, #2
 801bc46:	d106      	bne.n	801bc56 <lfs_dir_getgstate+0x2a>
    return 0;
 801bc48:	2000      	movs	r0, #0
 801bc4a:	e004      	b.n	801bc56 <lfs_dir_getgstate+0x2a>
        lfs_gstate_xor(gstate, &temp);
 801bc4c:	a903      	add	r1, sp, #12
 801bc4e:	4620      	mov	r0, r4
 801bc50:	f7ff fc98 	bl	801b584 <lfs_gstate_xor>
    return 0;
 801bc54:	2000      	movs	r0, #0
}
 801bc56:	b006      	add	sp, #24
 801bc58:	bd10      	pop	{r4, pc}
 801bc5a:	bf00      	nop
 801bc5c:	7ff0000c 	.word	0x7ff0000c
 801bc60:	7ff00000 	.word	0x7ff00000

0801bc64 <lfs_ctz_traverse>:
        int (*cb)(void*, lfs_block_t), void *data) {
 801bc64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc68:	b089      	sub	sp, #36	@ 0x24
 801bc6a:	461c      	mov	r4, r3
 801bc6c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801bc6e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801bc70:	9f14      	ldr	r7, [sp, #80]	@ 0x50
    if (size == 0) {
 801bc72:	b923      	cbnz	r3, 801bc7e <lfs_ctz_traverse+0x1a>
        return 0;
 801bc74:	2300      	movs	r3, #0
}
 801bc76:	4618      	mov	r0, r3
 801bc78:	b009      	add	sp, #36	@ 0x24
 801bc7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc7e:	4680      	mov	r8, r0
 801bc80:	4689      	mov	r9, r1
 801bc82:	4692      	mov	sl, r2
    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 801bc84:	3b01      	subs	r3, #1
 801bc86:	9307      	str	r3, [sp, #28]
 801bc88:	a907      	add	r1, sp, #28
 801bc8a:	f7ff fdff 	bl	801b88c <lfs_ctz_index>
 801bc8e:	4605      	mov	r5, r0
        int err = cb(data, head);
 801bc90:	4621      	mov	r1, r4
 801bc92:	4638      	mov	r0, r7
 801bc94:	47b0      	blx	r6
        if (err) {
 801bc96:	4603      	mov	r3, r0
 801bc98:	2800      	cmp	r0, #0
 801bc9a:	d1ec      	bne.n	801bc76 <lfs_ctz_traverse+0x12>
        if (index == 0) {
 801bc9c:	2d00      	cmp	r5, #0
 801bc9e:	d0ea      	beq.n	801bc76 <lfs_ctz_traverse+0x12>
        int count = 2 - (index & 1);
 801bca0:	f005 0b01 	and.w	fp, r5, #1
 801bca4:	f1cb 0302 	rsb	r3, fp, #2
                pcache, rcache, count*sizeof(head),
 801bca8:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 801bcaa:	9303      	str	r3, [sp, #12]
 801bcac:	aa05      	add	r2, sp, #20
 801bcae:	9202      	str	r2, [sp, #8]
 801bcb0:	2200      	movs	r2, #0
 801bcb2:	9201      	str	r2, [sp, #4]
 801bcb4:	9400      	str	r4, [sp, #0]
 801bcb6:	4652      	mov	r2, sl
 801bcb8:	4649      	mov	r1, r9
 801bcba:	4640      	mov	r0, r8
 801bcbc:	f7ff fe04 	bl	801b8c8 <lfs_bd_read>
        if (err) {
 801bcc0:	4604      	mov	r4, r0
 801bcc2:	b9c8      	cbnz	r0, 801bcf8 <lfs_ctz_traverse+0x94>
        for (int i = 0; i < count-1; i++) {
 801bcc4:	43eb      	mvns	r3, r5
 801bcc6:	f003 0301 	and.w	r3, r3, #1
 801bcca:	42a3      	cmp	r3, r4
 801bccc:	dd0b      	ble.n	801bce6 <lfs_ctz_traverse+0x82>
            err = cb(data, heads[i]);
 801bcce:	ab08      	add	r3, sp, #32
 801bcd0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801bcd4:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 801bcd8:	4638      	mov	r0, r7
 801bcda:	47b0      	blx	r6
            if (err) {
 801bcdc:	4603      	mov	r3, r0
 801bcde:	2800      	cmp	r0, #0
 801bce0:	d1c9      	bne.n	801bc76 <lfs_ctz_traverse+0x12>
        for (int i = 0; i < count-1; i++) {
 801bce2:	3401      	adds	r4, #1
 801bce4:	e7ee      	b.n	801bcc4 <lfs_ctz_traverse+0x60>
        head = heads[count-1];
 801bce6:	aa08      	add	r2, sp, #32
 801bce8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801bcec:	f853 4c0c 	ldr.w	r4, [r3, #-12]
        index -= count;
 801bcf0:	f1ab 0b02 	sub.w	fp, fp, #2
 801bcf4:	445d      	add	r5, fp
    while (true) {
 801bcf6:	e7cb      	b.n	801bc90 <lfs_ctz_traverse+0x2c>
            return err;
 801bcf8:	4603      	mov	r3, r0
 801bcfa:	e7bc      	b.n	801bc76 <lfs_ctz_traverse+0x12>

0801bcfc <lfs_fs_parent_match>:
        lfs_tag_t tag, const void *buffer) {
 801bcfc:	b530      	push	{r4, r5, lr}
 801bcfe:	b087      	sub	sp, #28
 801bd00:	4604      	mov	r4, r0
    lfs_t *lfs = find->lfs;
 801bd02:	6800      	ldr	r0, [r0, #0]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 801bd04:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801bd06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            disk->block, disk->off, &child, sizeof(child));
 801bd08:	6811      	ldr	r1, [r2, #0]
 801bd0a:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 801bd0c:	2508      	movs	r5, #8
 801bd0e:	9503      	str	r5, [sp, #12]
 801bd10:	ad04      	add	r5, sp, #16
 801bd12:	9502      	str	r5, [sp, #8]
 801bd14:	9201      	str	r2, [sp, #4]
 801bd16:	9100      	str	r1, [sp, #0]
 801bd18:	4602      	mov	r2, r0
 801bd1a:	f100 0110 	add.w	r1, r0, #16
 801bd1e:	f7ff fdd3 	bl	801b8c8 <lfs_bd_read>
    if (err) {
 801bd22:	4603      	mov	r3, r0
 801bd24:	b978      	cbnz	r0, 801bd46 <lfs_fs_parent_match+0x4a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801bd26:	9a04      	ldr	r2, [sp, #16]
 801bd28:	6861      	ldr	r1, [r4, #4]
 801bd2a:	4291      	cmp	r1, r2
 801bd2c:	d008      	beq.n	801bd40 <lfs_fs_parent_match+0x44>
 801bd2e:	9d05      	ldr	r5, [sp, #20]
 801bd30:	68a0      	ldr	r0, [r4, #8]
 801bd32:	4285      	cmp	r5, r0
 801bd34:	d004      	beq.n	801bd40 <lfs_fs_parent_match+0x44>
 801bd36:	4282      	cmp	r2, r0
 801bd38:	d002      	beq.n	801bd40 <lfs_fs_parent_match+0x44>
 801bd3a:	42a9      	cmp	r1, r5
 801bd3c:	d000      	beq.n	801bd40 <lfs_fs_parent_match+0x44>
 801bd3e:	2301      	movs	r3, #1
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 801bd40:	3b00      	subs	r3, #0
 801bd42:	bf18      	it	ne
 801bd44:	2301      	movne	r3, #1
}
 801bd46:	4618      	mov	r0, r3
 801bd48:	b007      	add	sp, #28
 801bd4a:	bd30      	pop	{r4, r5, pc}

0801bd4c <lfs_dir_traverse>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 801bd4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd50:	b0af      	sub	sp, #188	@ 0xbc
 801bd52:	9007      	str	r0, [sp, #28]
 801bd54:	460e      	mov	r6, r1
 801bd56:	4617      	mov	r7, r2
 801bd58:	461c      	mov	r4, r3
 801bd5a:	f8dd 80e0 	ldr.w	r8, [sp, #224]	@ 0xe0
 801bd5e:	f8dd b0e4 	ldr.w	fp, [sp, #228]	@ 0xe4
 801bd62:	f8dd a0e8 	ldr.w	sl, [sp, #232]	@ 0xe8
 801bd66:	f8bd 30f0 	ldrh.w	r3, [sp, #240]	@ 0xf0
 801bd6a:	9304      	str	r3, [sp, #16]
 801bd6c:	f8bd 30f4 	ldrh.w	r3, [sp, #244]	@ 0xf4
 801bd70:	9305      	str	r3, [sp, #20]
 801bd72:	f9bd 30f8 	ldrsh.w	r3, [sp, #248]	@ 0xf8
 801bd76:	9306      	str	r3, [sp, #24]
    struct lfs_diskoff disk = {0};
 801bd78:	2500      	movs	r5, #0
 801bd7a:	950d      	str	r5, [sp, #52]	@ 0x34
 801bd7c:	950e      	str	r5, [sp, #56]	@ 0x38
    return ((int32_t)(tag << 22) >> 22) == -1;
 801bd7e:	f344 0309 	sbfx	r3, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801bd82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801bd86:	bf14      	ite	ne
 801bd88:	46a1      	movne	r9, r4
 801bd8a:	f104 0901 	addeq.w	r9, r4, #1
    return tag & 0x000003ff;
 801bd8e:	f3c9 0909 	ubfx	r9, r9, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801bd92:	f109 0904 	add.w	r9, r9, #4
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 801bd96:	44b9      	add	r9, r7
 801bd98:	68f3      	ldr	r3, [r6, #12]
 801bd9a:	4599      	cmp	r9, r3
 801bd9c:	d35e      	bcc.n	801be5c <lfs_dir_traverse+0x110>
            } else if (attrcount > 0) {
 801bd9e:	f1bb 0f00 	cmp.w	fp, #0
 801bda2:	f340 80fa 	ble.w	801bf9a <lfs_dir_traverse+0x24e>
                tag = attrs[0].tag;
 801bda6:	f8d8 3000 	ldr.w	r3, [r8]
 801bdaa:	930f      	str	r3, [sp, #60]	@ 0x3c
                buffer = attrs[0].buffer;
 801bdac:	f8d8 9004 	ldr.w	r9, [r8, #4]
                attrs += 1;
 801bdb0:	f108 0808 	add.w	r8, r8, #8
                attrcount -= 1;
 801bdb4:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 801bdb8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801bdba:	4ba9      	ldr	r3, [pc, #676]	@ (801c060 <lfs_dir_traverse+0x314>)
 801bdbc:	ea0a 0303 	and.w	r3, sl, r3
 801bdc0:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 801bdc2:	404a      	eors	r2, r1
 801bdc4:	401a      	ands	r2, r3
 801bdc6:	d1da      	bne.n	801bd7e <lfs_dir_traverse+0x32>
    return (tag & 0x000ffc00) >> 10;
 801bdc8:	f3ca 2389 	ubfx	r3, sl, #10, #10
            if (lfs_tag_id(tmask) != 0) {
 801bdcc:	2b00      	cmp	r3, #0
 801bdce:	f000 8116 	beq.w	801bffe <lfs_dir_traverse+0x2b2>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 801bdd2:	2d02      	cmp	r5, #2
 801bdd4:	d862      	bhi.n	801be9c <lfs_dir_traverse+0x150>
                stack[sp] = (struct lfs_dir_traverse){
 801bdd6:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801bdda:	a82e      	add	r0, sp, #184	@ 0xb8
 801bddc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801bde0:	f843 6c78 	str.w	r6, [r3, #-120]
 801bde4:	f843 7c74 	str.w	r7, [r3, #-116]
 801bde8:	f843 4c70 	str.w	r4, [r3, #-112]
 801bdec:	f843 8c6c 	str.w	r8, [r3, #-108]
 801bdf0:	f843 bc68 	str.w	fp, [r3, #-104]
 801bdf4:	f843 ac64 	str.w	sl, [r3, #-100]
 801bdf8:	983b      	ldr	r0, [sp, #236]	@ 0xec
 801bdfa:	f843 0c60 	str.w	r0, [r3, #-96]
 801bdfe:	9804      	ldr	r0, [sp, #16]
 801be00:	f823 0c5c 	strh.w	r0, [r3, #-92]
 801be04:	9805      	ldr	r0, [sp, #20]
 801be06:	f823 0c5a 	strh.w	r0, [r3, #-90]
 801be0a:	9806      	ldr	r0, [sp, #24]
 801be0c:	f823 0c58 	strh.w	r0, [r3, #-88]
 801be10:	983f      	ldr	r0, [sp, #252]	@ 0xfc
 801be12:	f843 0c54 	str.w	r0, [r3, #-84]
 801be16:	9840      	ldr	r0, [sp, #256]	@ 0x100
 801be18:	f843 0c50 	str.w	r0, [r3, #-80]
 801be1c:	f843 1c4c 	str.w	r1, [r3, #-76]
 801be20:	f843 9c48 	str.w	r9, [r3, #-72]
 801be24:	3b44      	subs	r3, #68	@ 0x44
 801be26:	a90d      	add	r1, sp, #52	@ 0x34
 801be28:	c903      	ldmia	r1, {r0, r1}
 801be2a:	e883 0003 	stmia.w	r3, {r0, r1}
                data = &stack[sp-1].tag;
 801be2e:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801be32:	009b      	lsls	r3, r3, #2
 801be34:	3328      	adds	r3, #40	@ 0x28
 801be36:	a910      	add	r1, sp, #64	@ 0x40
 801be38:	440b      	add	r3, r1
 801be3a:	3304      	adds	r3, #4
 801be3c:	9340      	str	r3, [sp, #256]	@ 0x100
                sp += 1;
 801be3e:	3501      	adds	r5, #1
                ttag = 0;
 801be40:	923b      	str	r2, [sp, #236]	@ 0xec
                tmask = 0;
 801be42:	4692      	mov	sl, r2
                cb = lfs_dir_traverse_filter;
 801be44:	4b87      	ldr	r3, [pc, #540]	@ (801c064 <lfs_dir_traverse+0x318>)
 801be46:	933f      	str	r3, [sp, #252]	@ 0xfc
                diff = 0;
 801be48:	2300      	movs	r3, #0
 801be4a:	9306      	str	r3, [sp, #24]
                end = 0;
 801be4c:	9305      	str	r3, [sp, #20]
                begin = 0;
 801be4e:	9304      	str	r3, [sp, #16]
 801be50:	e795      	b.n	801bd7e <lfs_dir_traverse+0x32>
 801be52:	9d08      	ldr	r5, [sp, #32]
 801be54:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801be56:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801be58:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801be5a:	e790      	b.n	801bd7e <lfs_dir_traverse+0x32>
                        dir->pair[0], off, &tag, sizeof(tag));
 801be5c:	6832      	ldr	r2, [r6, #0]
                int err = lfs_bd_read(lfs,
 801be5e:	2304      	movs	r3, #4
 801be60:	9303      	str	r3, [sp, #12]
 801be62:	a90f      	add	r1, sp, #60	@ 0x3c
 801be64:	9102      	str	r1, [sp, #8]
 801be66:	f8cd 9004 	str.w	r9, [sp, #4]
 801be6a:	9200      	str	r2, [sp, #0]
 801be6c:	9a07      	ldr	r2, [sp, #28]
 801be6e:	2100      	movs	r1, #0
 801be70:	4610      	mov	r0, r2
 801be72:	f7ff fd29 	bl	801b8c8 <lfs_bd_read>
                if (err) {
 801be76:	4603      	mov	r3, r0
 801be78:	2800      	cmp	r0, #0
 801be7a:	f040 80ec 	bne.w	801c056 <lfs_dir_traverse+0x30a>
                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 801be7e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
    return __builtin_bswap32(a);
 801be80:	ba1b      	rev	r3, r3
 801be82:	4063      	eors	r3, r4
 801be84:	f043 4400 	orr.w	r4, r3, #2147483648	@ 0x80000000
 801be88:	940f      	str	r4, [sp, #60]	@ 0x3c
                disk.block = dir->pair[0];
 801be8a:	6833      	ldr	r3, [r6, #0]
 801be8c:	930d      	str	r3, [sp, #52]	@ 0x34
                disk.off = off+sizeof(lfs_tag_t);
 801be8e:	f109 0304 	add.w	r3, r9, #4
 801be92:	930e      	str	r3, [sp, #56]	@ 0x38
                off += lfs_tag_dsize(ptag);
 801be94:	464f      	mov	r7, r9
                buffer = &disk;
 801be96:	f10d 0934 	add.w	r9, sp, #52	@ 0x34
 801be9a:	e78d      	b.n	801bdb8 <lfs_dir_traverse+0x6c>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 801be9c:	4b72      	ldr	r3, [pc, #456]	@ (801c068 <lfs_dir_traverse+0x31c>)
 801be9e:	4a73      	ldr	r2, [pc, #460]	@ (801c06c <lfs_dir_traverse+0x320>)
 801bea0:	f240 31b6 	movw	r1, #950	@ 0x3b6
 801bea4:	4872      	ldr	r0, [pc, #456]	@ (801c070 <lfs_dir_traverse+0x324>)
 801bea6:	f00e fb89 	bl	802a5bc <__assert_func>
            if (cb == lfs_dir_traverse_filter) {
 801beaa:	4b6e      	ldr	r3, [pc, #440]	@ (801c064 <lfs_dir_traverse+0x318>)
 801beac:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801beae:	429a      	cmp	r2, r3
 801beb0:	f43f af65 	beq.w	801bd7e <lfs_dir_traverse+0x32>
            stack[sp] = (struct lfs_dir_traverse){
 801beb4:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801beb8:	aa2e      	add	r2, sp, #184	@ 0xb8
 801beba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801bebe:	223c      	movs	r2, #60	@ 0x3c
 801bec0:	2100      	movs	r1, #0
 801bec2:	9309      	str	r3, [sp, #36]	@ 0x24
 801bec4:	f1a3 0078 	sub.w	r0, r3, #120	@ 0x78
 801bec8:	f011 f8ca 	bl	802d060 <memset>
 801becc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bece:	f843 6c78 	str.w	r6, [r3, #-120]
 801bed2:	f843 7c74 	str.w	r7, [r3, #-116]
 801bed6:	f843 4c70 	str.w	r4, [r3, #-112]
 801beda:	f843 8c6c 	str.w	r8, [r3, #-108]
 801bede:	f843 bc68 	str.w	fp, [r3, #-104]
 801bee2:	f843 ac64 	str.w	sl, [r3, #-100]
 801bee6:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 801bee8:	f843 2c60 	str.w	r2, [r3, #-96]
 801beec:	9a04      	ldr	r2, [sp, #16]
 801beee:	f823 2c5c 	strh.w	r2, [r3, #-92]
 801bef2:	9a05      	ldr	r2, [sp, #20]
 801bef4:	f823 2c5a 	strh.w	r2, [r3, #-90]
 801bef8:	9906      	ldr	r1, [sp, #24]
 801befa:	f823 1c58 	strh.w	r1, [r3, #-88]
 801befe:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801bf00:	f843 2c54 	str.w	r2, [r3, #-84]
 801bf04:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 801bf06:	f843 2c50 	str.w	r2, [r3, #-80]
            sp += 1;
 801bf0a:	3501      	adds	r5, #1
            uint16_t fromid = lfs_tag_size(tag);
 801bf0c:	9b08      	ldr	r3, [sp, #32]
 801bf0e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 801bf12:	9204      	str	r2, [sp, #16]
    return (tag & 0x000ffc00) >> 10;
 801bf14:	f3c3 2389 	ubfx	r3, r3, #10, #10
            end = fromid+1;
 801bf18:	1c50      	adds	r0, r2, #1
 801bf1a:	9005      	str	r0, [sp, #20]
            diff = toid-fromid+diff;
 801bf1c:	1a9b      	subs	r3, r3, r2
 801bf1e:	fa11 f383 	uxtah	r3, r1, r3
 801bf22:	b21b      	sxth	r3, r3
 801bf24:	9306      	str	r3, [sp, #24]
            dir = buffer;
 801bf26:	464e      	mov	r6, r9
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 801bf28:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 801bf2c:	933b      	str	r3, [sp, #236]	@ 0xec
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 801bf2e:	f8df a144 	ldr.w	sl, [pc, #324]	@ 801c074 <lfs_dir_traverse+0x328>
            attrcount = 0;
 801bf32:	f04f 0b00 	mov.w	fp, #0
            attrs = NULL;
 801bf36:	46d8      	mov	r8, fp
            ptag = 0xffffffff;
 801bf38:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
            off = 0;
 801bf3c:	465f      	mov	r7, fp
 801bf3e:	e71e      	b.n	801bd7e <lfs_dir_traverse+0x32>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 801bf40:	2300      	movs	r3, #0
 801bf42:	9508      	str	r5, [sp, #32]
 801bf44:	9609      	str	r6, [sp, #36]	@ 0x24
 801bf46:	970a      	str	r7, [sp, #40]	@ 0x28
 801bf48:	940b      	str	r4, [sp, #44]	@ 0x2c
 801bf4a:	461c      	mov	r4, r3
 801bf4c:	9d06      	ldr	r5, [sp, #24]
 801bf4e:	9e3f      	ldr	r6, [sp, #252]	@ 0xfc
 801bf50:	9f40      	ldr	r7, [sp, #256]	@ 0x100
 801bf52:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
    return tag & 0x000003ff;
 801bf54:	f3c3 0209 	ubfx	r2, r3, #0, #10
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 801bf58:	4294      	cmp	r4, r2
 801bf5a:	d219      	bcs.n	801bf90 <lfs_dir_traverse+0x244>
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 801bf5c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801bf60:	eb09 0281 	add.w	r2, r9, r1, lsl #2
 801bf64:	f819 1021 	ldrb.w	r1, [r9, r1, lsl #2]
 801bf68:	f501 7140 	add.w	r1, r1, #768	@ 0x300
    return (tag & 0x000ffc00) >> 10;
 801bf6c:	f3c3 2389 	ubfx	r3, r3, #10, #10
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 801bf70:	442b      	add	r3, r5
 801bf72:	029b      	lsls	r3, r3, #10
 801bf74:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 801bf78:	6891      	ldr	r1, [r2, #8]
 801bf7a:	6852      	ldr	r2, [r2, #4]
 801bf7c:	4319      	orrs	r1, r3
 801bf7e:	4638      	mov	r0, r7
 801bf80:	47b0      	blx	r6
                if (res < 0) {
 801bf82:	2800      	cmp	r0, #0
 801bf84:	db66      	blt.n	801c054 <lfs_dir_traverse+0x308>
                if (res) {
 801bf86:	2800      	cmp	r0, #0
 801bf88:	f47f af63 	bne.w	801be52 <lfs_dir_traverse+0x106>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 801bf8c:	3401      	adds	r4, #1
 801bf8e:	e7e0      	b.n	801bf52 <lfs_dir_traverse+0x206>
 801bf90:	9d08      	ldr	r5, [sp, #32]
 801bf92:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801bf94:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801bf96:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801bf98:	e6f1      	b.n	801bd7e <lfs_dir_traverse+0x32>
                res = 0;
 801bf9a:	2300      	movs	r3, #0
    if (sp > 0) {
 801bf9c:	2d00      	cmp	r5, #0
 801bf9e:	d05a      	beq.n	801c056 <lfs_dir_traverse+0x30a>
        dir         = stack[sp-1].dir;
 801bfa0:	3d01      	subs	r5, #1
 801bfa2:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801bfa6:	aa2e      	add	r2, sp, #184	@ 0xb8
 801bfa8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801bfac:	f853 6c78 	ldr.w	r6, [r3, #-120]
        off         = stack[sp-1].off;
 801bfb0:	f853 7c74 	ldr.w	r7, [r3, #-116]
        ptag        = stack[sp-1].ptag;
 801bfb4:	f853 4c70 	ldr.w	r4, [r3, #-112]
        attrs       = stack[sp-1].attrs;
 801bfb8:	f853 8c6c 	ldr.w	r8, [r3, #-108]
        attrcount   = stack[sp-1].attrcount;
 801bfbc:	f853 bc68 	ldr.w	fp, [r3, #-104]
        tmask       = stack[sp-1].tmask;
 801bfc0:	f853 ac64 	ldr.w	sl, [r3, #-100]
        ttag        = stack[sp-1].ttag;
 801bfc4:	f853 2c60 	ldr.w	r2, [r3, #-96]
 801bfc8:	923b      	str	r2, [sp, #236]	@ 0xec
        begin       = stack[sp-1].begin;
 801bfca:	f833 2c5c 	ldrh.w	r2, [r3, #-92]
 801bfce:	9204      	str	r2, [sp, #16]
        end         = stack[sp-1].end;
 801bfd0:	f833 2c5a 	ldrh.w	r2, [r3, #-90]
 801bfd4:	9205      	str	r2, [sp, #20]
        diff        = stack[sp-1].diff;
 801bfd6:	f933 2c58 	ldrsh.w	r2, [r3, #-88]
 801bfda:	9206      	str	r2, [sp, #24]
        cb          = stack[sp-1].cb;
 801bfdc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 801bfe0:	923f      	str	r2, [sp, #252]	@ 0xfc
        data        = stack[sp-1].data;
 801bfe2:	f853 2c50 	ldr.w	r2, [r3, #-80]
 801bfe6:	9240      	str	r2, [sp, #256]	@ 0x100
        tag         = stack[sp-1].tag;
 801bfe8:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 801bfec:	920f      	str	r2, [sp, #60]	@ 0x3c
        buffer      = stack[sp-1].buffer;
 801bfee:	f853 9c48 	ldr.w	r9, [r3, #-72]
        disk        = stack[sp-1].disk;
 801bff2:	aa0d      	add	r2, sp, #52	@ 0x34
 801bff4:	3b44      	subs	r3, #68	@ 0x44
 801bff6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801bffa:	e882 0003 	stmia.w	r2, {r0, r1}
    return (tag & 0x000ffc00) >> 10;
 801bffe:	f3ca 2389 	ubfx	r3, sl, #10, #10
        if (lfs_tag_id(tmask) != 0 &&
 801c002:	b153      	cbz	r3, 801c01a <lfs_dir_traverse+0x2ce>
    return (tag & 0x000ffc00) >> 10;
 801c004:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c006:	f3c3 2389 	ubfx	r3, r3, #10, #10
        if (lfs_tag_id(tmask) != 0 &&
 801c00a:	9a04      	ldr	r2, [sp, #16]
 801c00c:	429a      	cmp	r2, r3
 801c00e:	f63f aeb6 	bhi.w	801bd7e <lfs_dir_traverse+0x32>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 801c012:	9a05      	ldr	r2, [sp, #20]
 801c014:	429a      	cmp	r2, r3
 801c016:	f67f aeb2 	bls.w	801bd7e <lfs_dir_traverse+0x32>
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 801c01a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c01c:	9308      	str	r3, [sp, #32]
    return (tag & 0x7ff00000) >> 20;
 801c01e:	f3c3 530a 	ubfx	r3, r3, #20, #11
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 801c022:	2b00      	cmp	r3, #0
 801c024:	f43f aeab 	beq.w	801bd7e <lfs_dir_traverse+0x32>
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 801c028:	f240 1201 	movw	r2, #257	@ 0x101
 801c02c:	4293      	cmp	r3, r2
 801c02e:	f43f af3c 	beq.w	801beaa <lfs_dir_traverse+0x15e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 801c032:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 801c036:	d083      	beq.n	801bf40 <lfs_dir_traverse+0x1f4>
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 801c038:	464a      	mov	r2, r9
 801c03a:	9b08      	ldr	r3, [sp, #32]
 801c03c:	9906      	ldr	r1, [sp, #24]
 801c03e:	eb03 2181 	add.w	r1, r3, r1, lsl #10
 801c042:	9840      	ldr	r0, [sp, #256]	@ 0x100
 801c044:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
 801c046:	4798      	blx	r3
            if (res < 0) {
 801c048:	1e03      	subs	r3, r0, #0
 801c04a:	db04      	blt.n	801c056 <lfs_dir_traverse+0x30a>
            if (res) {
 801c04c:	2b00      	cmp	r3, #0
 801c04e:	f43f ae96 	beq.w	801bd7e <lfs_dir_traverse+0x32>
 801c052:	e7a3      	b.n	801bf9c <lfs_dir_traverse+0x250>
 801c054:	4603      	mov	r3, r0
}
 801c056:	4618      	mov	r0, r3
 801c058:	b02f      	add	sp, #188	@ 0xbc
 801c05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c05e:	bf00      	nop
 801c060:	7ff00000 	.word	0x7ff00000
 801c064:	0801b681 	.word	0x0801b681
 801c068:	080399a0 	.word	0x080399a0
 801c06c:	0803a5b0 	.word	0x0803a5b0
 801c070:	080398c4 	.word	0x080398c4
 801c074:	600ffc00 	.word	0x600ffc00

0801c078 <lfs_dir_getread>:
        lfs_off_t off, void *buffer, lfs_size_t size) {
 801c078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c07c:	b087      	sub	sp, #28
 801c07e:	4606      	mov	r6, r0
 801c080:	468a      	mov	sl, r1
 801c082:	4617      	mov	r7, r2
 801c084:	461c      	mov	r4, r3
 801c086:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 801c08a:	f8dd 9048 	ldr.w	r9, [sp, #72]	@ 0x48
 801c08e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801c090:	f8dd 8054 	ldr.w	r8, [sp, #84]	@ 0x54
    if (off+size > lfs->cfg->block_size) {
 801c094:	eb05 0208 	add.w	r2, r5, r8
 801c098:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801c09a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c09c:	429a      	cmp	r2, r3
 801c09e:	d94d      	bls.n	801c13c <lfs_dir_getread+0xc4>
        return LFS_ERR_CORRUPT;
 801c0a0:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801c0a4:	e076      	b.n	801c194 <lfs_dir_getread+0x11c>
                off < pcache->off + pcache->size) {
 801c0a6:	687b      	ldr	r3, [r7, #4]
 801c0a8:	68ba      	ldr	r2, [r7, #8]
 801c0aa:	1899      	adds	r1, r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 801c0ac:	42a9      	cmp	r1, r5
 801c0ae:	d91c      	bls.n	801c0ea <lfs_dir_getread+0x72>
            if (off >= pcache->off) {
 801c0b0:	42ab      	cmp	r3, r5
 801c0b2:	d904      	bls.n	801c0be <lfs_dir_getread+0x46>
            diff = lfs_min(diff, pcache->off-off);
 801c0b4:	1b5b      	subs	r3, r3, r5
    return (a < b) ? a : b;
 801c0b6:	4543      	cmp	r3, r8
 801c0b8:	bf28      	it	cs
 801c0ba:	4643      	movcs	r3, r8
 801c0bc:	e048      	b.n	801c150 <lfs_dir_getread+0xd8>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 801c0be:	1b59      	subs	r1, r3, r5
 801c0c0:	440a      	add	r2, r1
 801c0c2:	4542      	cmp	r2, r8
 801c0c4:	bf28      	it	cs
 801c0c6:	4642      	movcs	r2, r8
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 801c0c8:	68f9      	ldr	r1, [r7, #12]
 801c0ca:	1aeb      	subs	r3, r5, r3
 801c0cc:	9205      	str	r2, [sp, #20]
 801c0ce:	4419      	add	r1, r3
 801c0d0:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801c0d2:	f012 fa01 	bl	802e4d8 <memcpy>
                data += diff;
 801c0d6:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801c0d8:	9b05      	ldr	r3, [sp, #20]
 801c0da:	4419      	add	r1, r3
 801c0dc:	9114      	str	r1, [sp, #80]	@ 0x50
                off += diff;
 801c0de:	441d      	add	r5, r3
                size -= diff;
 801c0e0:	eba8 0803 	sub.w	r8, r8, r3
                continue;
 801c0e4:	e02a      	b.n	801c13c <lfs_dir_getread+0xc4>
        lfs_size_t diff = size;
 801c0e6:	4643      	mov	r3, r8
 801c0e8:	e032      	b.n	801c150 <lfs_dir_getread+0xd8>
 801c0ea:	4643      	mov	r3, r8
 801c0ec:	e030      	b.n	801c150 <lfs_dir_getread+0xd8>
        rcache->block = LFS_BLOCK_INLINE;
 801c0ee:	f06f 0301 	mvn.w	r3, #1
 801c0f2:	6023      	str	r3, [r4, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 801c0f4:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 801c0f6:	69db      	ldr	r3, [r3, #28]
    return a - (a % alignment);
 801c0f8:	fbb5 f2f3 	udiv	r2, r5, r3
 801c0fc:	fb03 5212 	mls	r2, r3, r2, r5
 801c100:	1aaa      	subs	r2, r5, r2
 801c102:	6062      	str	r2, [r4, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 801c104:	eb05 030b 	add.w	r3, r5, fp
 801c108:	6eb1      	ldr	r1, [r6, #104]	@ 0x68
 801c10a:	69c8      	ldr	r0, [r1, #28]
    return lfs_aligndown(a + alignment-1, alignment);
 801c10c:	4403      	add	r3, r0
 801c10e:	3b01      	subs	r3, #1
    return a - (a % alignment);
 801c110:	fbb3 fcf0 	udiv	ip, r3, r0
 801c114:	fb00 301c 	mls	r0, r0, ip, r3
 801c118:	1a1b      	subs	r3, r3, r0
                lfs->cfg->cache_size);
 801c11a:	6b09      	ldr	r1, [r1, #48]	@ 0x30
    return (a < b) ? a : b;
 801c11c:	428b      	cmp	r3, r1
 801c11e:	bf28      	it	cs
 801c120:	460b      	movcs	r3, r1
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 801c122:	60a3      	str	r3, [r4, #8]
                rcache->off, rcache->buffer, rcache->size);
 801c124:	68e1      	ldr	r1, [r4, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 801c126:	9302      	str	r3, [sp, #8]
 801c128:	9101      	str	r1, [sp, #4]
 801c12a:	9200      	str	r2, [sp, #0]
 801c12c:	464b      	mov	r3, r9
 801c12e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c130:	4651      	mov	r1, sl
 801c132:	4630      	mov	r0, r6
 801c134:	f7ff fcb8 	bl	801baa8 <lfs_dir_getslice>
        if (err < 0) {
 801c138:	2800      	cmp	r0, #0
 801c13a:	db2b      	blt.n	801c194 <lfs_dir_getread+0x11c>
    while (size > 0) {
 801c13c:	f1b8 0f00 	cmp.w	r8, #0
 801c140:	d027      	beq.n	801c192 <lfs_dir_getread+0x11a>
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 801c142:	2f00      	cmp	r7, #0
 801c144:	d0cf      	beq.n	801c0e6 <lfs_dir_getread+0x6e>
 801c146:	683b      	ldr	r3, [r7, #0]
 801c148:	f113 0f02 	cmn.w	r3, #2
 801c14c:	d0ab      	beq.n	801c0a6 <lfs_dir_getread+0x2e>
        lfs_size_t diff = size;
 801c14e:	4643      	mov	r3, r8
        if (rcache->block == LFS_BLOCK_INLINE &&
 801c150:	6822      	ldr	r2, [r4, #0]
 801c152:	f112 0f02 	cmn.w	r2, #2
 801c156:	d1ca      	bne.n	801c0ee <lfs_dir_getread+0x76>
                off < rcache->off + rcache->size) {
 801c158:	6862      	ldr	r2, [r4, #4]
 801c15a:	68a1      	ldr	r1, [r4, #8]
 801c15c:	1850      	adds	r0, r2, r1
        if (rcache->block == LFS_BLOCK_INLINE &&
 801c15e:	42a8      	cmp	r0, r5
 801c160:	d9c5      	bls.n	801c0ee <lfs_dir_getread+0x76>
            if (off >= rcache->off) {
 801c162:	42aa      	cmp	r2, r5
 801c164:	d8c3      	bhi.n	801c0ee <lfs_dir_getread+0x76>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 801c166:	1b50      	subs	r0, r2, r5
 801c168:	4401      	add	r1, r0
 801c16a:	4608      	mov	r0, r1
 801c16c:	4299      	cmp	r1, r3
 801c16e:	bf28      	it	cs
 801c170:	4618      	movcs	r0, r3
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 801c172:	68e3      	ldr	r3, [r4, #12]
 801c174:	1aa9      	subs	r1, r5, r2
 801c176:	9005      	str	r0, [sp, #20]
 801c178:	4602      	mov	r2, r0
 801c17a:	4419      	add	r1, r3
 801c17c:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801c17e:	f012 f9ab 	bl	802e4d8 <memcpy>
                data += diff;
 801c182:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801c184:	9b05      	ldr	r3, [sp, #20]
 801c186:	4419      	add	r1, r3
 801c188:	9114      	str	r1, [sp, #80]	@ 0x50
                off += diff;
 801c18a:	441d      	add	r5, r3
                size -= diff;
 801c18c:	eba8 0803 	sub.w	r8, r8, r3
                continue;
 801c190:	e7d4      	b.n	801c13c <lfs_dir_getread+0xc4>
    return 0;
 801c192:	2000      	movs	r0, #0
}
 801c194:	b007      	add	sp, #28
 801c196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c19a <lfs_bd_cmp>:
        const void *buffer, lfs_size_t size) {
 801c19a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c19e:	b089      	sub	sp, #36	@ 0x24
 801c1a0:	4682      	mov	sl, r0
 801c1a2:	4689      	mov	r9, r1
 801c1a4:	9205      	str	r2, [sp, #20]
 801c1a6:	461f      	mov	r7, r3
 801c1a8:	f8dd 804c 	ldr.w	r8, [sp, #76]	@ 0x4c
 801c1ac:	f8dd b050 	ldr.w	fp, [sp, #80]	@ 0x50
 801c1b0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
    for (lfs_off_t i = 0; i < size; i += diff) {
 801c1b2:	2400      	movs	r4, #0
 801c1b4:	e002      	b.n	801c1bc <lfs_bd_cmp+0x22>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 801c1b6:	2301      	movs	r3, #1
 801c1b8:	e023      	b.n	801c202 <lfs_bd_cmp+0x68>
    for (lfs_off_t i = 0; i < size; i += diff) {
 801c1ba:	442c      	add	r4, r5
 801c1bc:	42b4      	cmp	r4, r6
 801c1be:	d21f      	bcs.n	801c200 <lfs_bd_cmp+0x66>
        diff = lfs_min(size-i, sizeof(dat));
 801c1c0:	1b35      	subs	r5, r6, r4
 801c1c2:	2d08      	cmp	r5, #8
 801c1c4:	bf28      	it	cs
 801c1c6:	2508      	movcs	r5, #8
        int err = lfs_bd_read(lfs,
 801c1c8:	9503      	str	r5, [sp, #12]
 801c1ca:	ab06      	add	r3, sp, #24
 801c1cc:	9302      	str	r3, [sp, #8]
 801c1ce:	eb04 0308 	add.w	r3, r4, r8
 801c1d2:	9301      	str	r3, [sp, #4]
 801c1d4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801c1d6:	9300      	str	r3, [sp, #0]
 801c1d8:	1b3b      	subs	r3, r7, r4
 801c1da:	9a05      	ldr	r2, [sp, #20]
 801c1dc:	4649      	mov	r1, r9
 801c1de:	4650      	mov	r0, sl
 801c1e0:	f7ff fb72 	bl	801b8c8 <lfs_bd_read>
        if (err) {
 801c1e4:	4603      	mov	r3, r0
 801c1e6:	b960      	cbnz	r0, 801c202 <lfs_bd_cmp+0x68>
        int res = memcmp(dat, data + i, diff);
 801c1e8:	462a      	mov	r2, r5
 801c1ea:	eb0b 0104 	add.w	r1, fp, r4
 801c1ee:	a806      	add	r0, sp, #24
 801c1f0:	f010 fea2 	bl	802cf38 <memcmp>
        if (res) {
 801c1f4:	2800      	cmp	r0, #0
 801c1f6:	d0e0      	beq.n	801c1ba <lfs_bd_cmp+0x20>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 801c1f8:	2800      	cmp	r0, #0
 801c1fa:	dbdc      	blt.n	801c1b6 <lfs_bd_cmp+0x1c>
 801c1fc:	2302      	movs	r3, #2
 801c1fe:	e000      	b.n	801c202 <lfs_bd_cmp+0x68>
    return LFS_CMP_EQ;
 801c200:	2300      	movs	r3, #0
}
 801c202:	4618      	mov	r0, r3
 801c204:	b009      	add	sp, #36	@ 0x24
 801c206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801c20c <lfs_bd_flush>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 801c20c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c210:	b085      	sub	sp, #20
 801c212:	460c      	mov	r4, r1
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 801c214:	6809      	ldr	r1, [r1, #0]
 801c216:	f111 0f03 	cmn.w	r1, #3
 801c21a:	d83f      	bhi.n	801c29c <lfs_bd_flush+0x90>
 801c21c:	4607      	mov	r7, r0
 801c21e:	4691      	mov	r9, r2
 801c220:	4698      	mov	r8, r3
        LFS_ASSERT(pcache->block < lfs->block_count);
 801c222:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801c224:	4299      	cmp	r1, r3
 801c226:	d22d      	bcs.n	801c284 <lfs_bd_flush+0x78>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 801c228:	68a5      	ldr	r5, [r4, #8]
 801c22a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801c22c:	6a02      	ldr	r2, [r0, #32]
    return lfs_aligndown(a + alignment-1, alignment);
 801c22e:	4415      	add	r5, r2
 801c230:	3d01      	subs	r5, #1
    return a - (a % alignment);
 801c232:	fbb5 f3f2 	udiv	r3, r5, r2
 801c236:	fb02 5313 	mls	r3, r2, r3, r5
 801c23a:	1aee      	subs	r6, r5, r3
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 801c23c:	6885      	ldr	r5, [r0, #8]
 801c23e:	9600      	str	r6, [sp, #0]
 801c240:	68e3      	ldr	r3, [r4, #12]
 801c242:	6862      	ldr	r2, [r4, #4]
 801c244:	47a8      	blx	r5
        LFS_ASSERT(err <= 0);
 801c246:	1e05      	subs	r5, r0, #0
 801c248:	dc22      	bgt.n	801c290 <lfs_bd_flush+0x84>
        if (err) {
 801c24a:	bb45      	cbnz	r5, 801c29e <lfs_bd_flush+0x92>
        if (validate) {
 801c24c:	f1b8 0f00 	cmp.w	r8, #0
 801c250:	d013      	beq.n	801c27a <lfs_bd_flush+0x6e>
    rcache->block = LFS_BLOCK_NULL;
 801c252:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c256:	f8c9 3000 	str.w	r3, [r9]
                    pcache->block, pcache->off, pcache->buffer, diff);
 801c25a:	68e3      	ldr	r3, [r4, #12]
            int res = lfs_bd_cmp(lfs,
 801c25c:	9603      	str	r6, [sp, #12]
 801c25e:	9302      	str	r3, [sp, #8]
 801c260:	6863      	ldr	r3, [r4, #4]
 801c262:	9301      	str	r3, [sp, #4]
 801c264:	6823      	ldr	r3, [r4, #0]
 801c266:	9300      	str	r3, [sp, #0]
 801c268:	4633      	mov	r3, r6
 801c26a:	464a      	mov	r2, r9
 801c26c:	2100      	movs	r1, #0
 801c26e:	4638      	mov	r0, r7
 801c270:	f7ff ff93 	bl	801c19a <lfs_bd_cmp>
            if (res < 0) {
 801c274:	2800      	cmp	r0, #0
 801c276:	db16      	blt.n	801c2a6 <lfs_bd_flush+0x9a>
            if (res != LFS_CMP_EQ) {
 801c278:	b9b8      	cbnz	r0, 801c2aa <lfs_bd_flush+0x9e>
        lfs_cache_zero(lfs, pcache);
 801c27a:	4621      	mov	r1, r4
 801c27c:	4638      	mov	r0, r7
 801c27e:	f7ff faf9 	bl	801b874 <lfs_cache_zero>
 801c282:	e00c      	b.n	801c29e <lfs_bd_flush+0x92>
        LFS_ASSERT(pcache->block < lfs->block_count);
 801c284:	4b0a      	ldr	r3, [pc, #40]	@ (801c2b0 <lfs_bd_flush+0xa4>)
 801c286:	4a0b      	ldr	r2, [pc, #44]	@ (801c2b4 <lfs_bd_flush+0xa8>)
 801c288:	21b3      	movs	r1, #179	@ 0xb3
 801c28a:	480b      	ldr	r0, [pc, #44]	@ (801c2b8 <lfs_bd_flush+0xac>)
 801c28c:	f00e f996 	bl	802a5bc <__assert_func>
        LFS_ASSERT(err <= 0);
 801c290:	4b0a      	ldr	r3, [pc, #40]	@ (801c2bc <lfs_bd_flush+0xb0>)
 801c292:	4a08      	ldr	r2, [pc, #32]	@ (801c2b4 <lfs_bd_flush+0xa8>)
 801c294:	21b7      	movs	r1, #183	@ 0xb7
 801c296:	4808      	ldr	r0, [pc, #32]	@ (801c2b8 <lfs_bd_flush+0xac>)
 801c298:	f00e f990 	bl	802a5bc <__assert_func>
    return 0;
 801c29c:	2500      	movs	r5, #0
}
 801c29e:	4628      	mov	r0, r5
 801c2a0:	b005      	add	sp, #20
 801c2a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                return res;
 801c2a6:	4605      	mov	r5, r0
 801c2a8:	e7f9      	b.n	801c29e <lfs_bd_flush+0x92>
                return LFS_ERR_CORRUPT;
 801c2aa:	f06f 0553 	mvn.w	r5, #83	@ 0x53
 801c2ae:	e7f6      	b.n	801c29e <lfs_bd_flush+0x92>
 801c2b0:	080399a8 	.word	0x080399a8
 801c2b4:	0803a5f4 	.word	0x0803a5f4
 801c2b8:	080398c4 	.word	0x080398c4
 801c2bc:	080398f4 	.word	0x080398f4

0801c2c0 <lfs_bd_prog>:
        const void *buffer, lfs_size_t size) {
 801c2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2c4:	b083      	sub	sp, #12
 801c2c6:	4607      	mov	r7, r0
 801c2c8:	460c      	mov	r4, r1
 801c2ca:	9201      	str	r2, [sp, #4]
 801c2cc:	469b      	mov	fp, r3
 801c2ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801c2d0:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801c2d2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801c2d6:	f8dd 803c 	ldr.w	r8, [sp, #60]	@ 0x3c
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 801c2da:	f116 0f02 	cmn.w	r6, #2
 801c2de:	d002      	beq.n	801c2e6 <lfs_bd_prog+0x26>
 801c2e0:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801c2e2:	42b3      	cmp	r3, r6
 801c2e4:	d90b      	bls.n	801c2fe <lfs_bd_prog+0x3e>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 801c2e6:	eb05 0308 	add.w	r3, r5, r8
 801c2ea:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801c2ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801c2ee:	4293      	cmp	r3, r2
 801c2f0:	d919      	bls.n	801c326 <lfs_bd_prog+0x66>
 801c2f2:	4b2b      	ldr	r3, [pc, #172]	@ (801c3a0 <lfs_bd_prog+0xe0>)
 801c2f4:	4a2b      	ldr	r2, [pc, #172]	@ (801c3a4 <lfs_bd_prog+0xe4>)
 801c2f6:	21e9      	movs	r1, #233	@ 0xe9
 801c2f8:	482b      	ldr	r0, [pc, #172]	@ (801c3a8 <lfs_bd_prog+0xe8>)
 801c2fa:	f00e f95f 	bl	802a5bc <__assert_func>
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 801c2fe:	4b2b      	ldr	r3, [pc, #172]	@ (801c3ac <lfs_bd_prog+0xec>)
 801c300:	4a28      	ldr	r2, [pc, #160]	@ (801c3a4 <lfs_bd_prog+0xe4>)
 801c302:	21e8      	movs	r1, #232	@ 0xe8
 801c304:	4828      	ldr	r0, [pc, #160]	@ (801c3a8 <lfs_bd_prog+0xe8>)
 801c306:	f00e f959 	bl	802a5bc <__assert_func>
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 801c30a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c30e:	d13c      	bne.n	801c38a <lfs_bd_prog+0xca>
        pcache->block = block;
 801c310:	6026      	str	r6, [r4, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 801c312:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c314:	6a1a      	ldr	r2, [r3, #32]
 801c316:	fbb5 f3f2 	udiv	r3, r5, r2
 801c31a:	fb02 5313 	mls	r3, r2, r3, r5
 801c31e:	1aeb      	subs	r3, r5, r3
 801c320:	6063      	str	r3, [r4, #4]
        pcache->size = 0;
 801c322:	2300      	movs	r3, #0
 801c324:	60a3      	str	r3, [r4, #8]
    while (size > 0) {
 801c326:	f1b8 0f00 	cmp.w	r8, #0
 801c32a:	d035      	beq.n	801c398 <lfs_bd_prog+0xd8>
        if (block == pcache->block &&
 801c32c:	6823      	ldr	r3, [r4, #0]
 801c32e:	42b3      	cmp	r3, r6
 801c330:	d1eb      	bne.n	801c30a <lfs_bd_prog+0x4a>
                off >= pcache->off &&
 801c332:	6862      	ldr	r2, [r4, #4]
        if (block == pcache->block &&
 801c334:	42aa      	cmp	r2, r5
 801c336:	d8e8      	bhi.n	801c30a <lfs_bd_prog+0x4a>
                off < pcache->off + lfs->cfg->cache_size) {
 801c338:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801c33a:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 801c33c:	1850      	adds	r0, r2, r1
                off >= pcache->off &&
 801c33e:	42a8      	cmp	r0, r5
 801c340:	d9e3      	bls.n	801c30a <lfs_bd_prog+0x4a>
                    lfs->cfg->cache_size - (off-pcache->off));
 801c342:	1b53      	subs	r3, r2, r5
            lfs_size_t diff = lfs_min(size,
 801c344:	eb01 0903 	add.w	r9, r1, r3
    return (a < b) ? a : b;
 801c348:	45c1      	cmp	r9, r8
 801c34a:	bf28      	it	cs
 801c34c:	46c1      	movcs	r9, r8
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 801c34e:	68e3      	ldr	r3, [r4, #12]
 801c350:	1aa8      	subs	r0, r5, r2
 801c352:	464a      	mov	r2, r9
 801c354:	4651      	mov	r1, sl
 801c356:	4418      	add	r0, r3
 801c358:	f012 f8be 	bl	802e4d8 <memcpy>
            data += diff;
 801c35c:	44ca      	add	sl, r9
            off += diff;
 801c35e:	444d      	add	r5, r9
            size -= diff;
 801c360:	eba8 0809 	sub.w	r8, r8, r9
            pcache->size = lfs_max(pcache->size, off - pcache->off);
 801c364:	68a2      	ldr	r2, [r4, #8]
 801c366:	6863      	ldr	r3, [r4, #4]
 801c368:	1aeb      	subs	r3, r5, r3
    return (a > b) ? a : b;
 801c36a:	4293      	cmp	r3, r2
 801c36c:	bf38      	it	cc
 801c36e:	4613      	movcc	r3, r2
 801c370:	60a3      	str	r3, [r4, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 801c372:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801c374:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801c376:	429a      	cmp	r2, r3
 801c378:	d1d5      	bne.n	801c326 <lfs_bd_prog+0x66>
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 801c37a:	465b      	mov	r3, fp
 801c37c:	9a01      	ldr	r2, [sp, #4]
 801c37e:	4621      	mov	r1, r4
 801c380:	4638      	mov	r0, r7
 801c382:	f7ff ff43 	bl	801c20c <lfs_bd_flush>
                if (err) {
 801c386:	b940      	cbnz	r0, 801c39a <lfs_bd_prog+0xda>
 801c388:	e7cd      	b.n	801c326 <lfs_bd_prog+0x66>
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 801c38a:	4b09      	ldr	r3, [pc, #36]	@ (801c3b0 <lfs_bd_prog+0xf0>)
 801c38c:	4a05      	ldr	r2, [pc, #20]	@ (801c3a4 <lfs_bd_prog+0xe4>)
 801c38e:	f44f 7183 	mov.w	r1, #262	@ 0x106
 801c392:	4805      	ldr	r0, [pc, #20]	@ (801c3a8 <lfs_bd_prog+0xe8>)
 801c394:	f00e f912 	bl	802a5bc <__assert_func>
    return 0;
 801c398:	2000      	movs	r0, #0
}
 801c39a:	b003      	add	sp, #12
 801c39c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3a0:	08039a04 	.word	0x08039a04
 801c3a4:	0803a604 	.word	0x0803a604
 801c3a8:	080398c4 	.word	0x080398c4
 801c3ac:	080399cc 	.word	0x080399cc
 801c3b0:	08039a28 	.word	0x08039a28

0801c3b4 <lfs_bd_sync>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 801c3b4:	b538      	push	{r3, r4, r5, lr}
 801c3b6:	4604      	mov	r4, r0
    rcache->block = LFS_BLOCK_NULL;
 801c3b8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801c3bc:	6015      	str	r5, [r2, #0]
    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 801c3be:	f7ff ff25 	bl	801c20c <lfs_bd_flush>
    if (err) {
 801c3c2:	4603      	mov	r3, r0
 801c3c4:	b920      	cbnz	r0, 801c3d0 <lfs_bd_sync+0x1c>
    err = lfs->cfg->sync(lfs->cfg);
 801c3c6:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801c3c8:	6903      	ldr	r3, [r0, #16]
 801c3ca:	4798      	blx	r3
    LFS_ASSERT(err <= 0);
 801c3cc:	1e03      	subs	r3, r0, #0
 801c3ce:	dc01      	bgt.n	801c3d4 <lfs_bd_sync+0x20>
}
 801c3d0:	4618      	mov	r0, r3
 801c3d2:	bd38      	pop	{r3, r4, r5, pc}
    LFS_ASSERT(err <= 0);
 801c3d4:	4b02      	ldr	r3, [pc, #8]	@ (801c3e0 <lfs_bd_sync+0x2c>)
 801c3d6:	4a03      	ldr	r2, [pc, #12]	@ (801c3e4 <lfs_bd_sync+0x30>)
 801c3d8:	21dd      	movs	r1, #221	@ 0xdd
 801c3da:	4803      	ldr	r0, [pc, #12]	@ (801c3e8 <lfs_bd_sync+0x34>)
 801c3dc:	f00e f8ee 	bl	802a5bc <__assert_func>
 801c3e0:	080398f4 	.word	0x080398f4
 801c3e4:	0803a5a4 	.word	0x0803a5a4
 801c3e8:	080398c4 	.word	0x080398c4

0801c3ec <lfs_dir_find_match>:
        lfs_tag_t tag, const void *buffer) {
 801c3ec:	b570      	push	{r4, r5, r6, lr}
 801c3ee:	b084      	sub	sp, #16
 801c3f0:	4604      	mov	r4, r0
 801c3f2:	4694      	mov	ip, r2
    lfs_t *lfs = name->lfs;
 801c3f4:	6800      	ldr	r0, [r0, #0]
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 801c3f6:	68a3      	ldr	r3, [r4, #8]
    return tag & 0x000003ff;
 801c3f8:	f3c1 0509 	ubfx	r5, r1, #0, #10
    return (a < b) ? a : b;
 801c3fc:	42ab      	cmp	r3, r5
 801c3fe:	bf28      	it	cs
 801c400:	462b      	movcs	r3, r5
            disk->block, disk->off, name->name, diff);
 801c402:	6812      	ldr	r2, [r2, #0]
 801c404:	f8dc 1004 	ldr.w	r1, [ip, #4]
    int res = lfs_bd_cmp(lfs,
 801c408:	9303      	str	r3, [sp, #12]
 801c40a:	6866      	ldr	r6, [r4, #4]
 801c40c:	9602      	str	r6, [sp, #8]
 801c40e:	9101      	str	r1, [sp, #4]
 801c410:	9200      	str	r2, [sp, #0]
 801c412:	4602      	mov	r2, r0
 801c414:	2100      	movs	r1, #0
 801c416:	f7ff fec0 	bl	801c19a <lfs_bd_cmp>
    if (res != LFS_CMP_EQ) {
 801c41a:	b920      	cbnz	r0, 801c426 <lfs_dir_find_match+0x3a>
    if (name->size != lfs_tag_size(tag)) {
 801c41c:	68a3      	ldr	r3, [r4, #8]
 801c41e:	42ab      	cmp	r3, r5
 801c420:	d001      	beq.n	801c426 <lfs_dir_find_match+0x3a>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 801c422:	d202      	bcs.n	801c42a <lfs_dir_find_match+0x3e>
 801c424:	2001      	movs	r0, #1
}
 801c426:	b004      	add	sp, #16
 801c428:	bd70      	pop	{r4, r5, r6, pc}
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 801c42a:	2002      	movs	r0, #2
 801c42c:	e7fb      	b.n	801c426 <lfs_dir_find_match+0x3a>

0801c42e <lfs_ctz_find>:
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 801c42e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c432:	b089      	sub	sp, #36	@ 0x24
 801c434:	9305      	str	r3, [sp, #20]
 801c436:	9b10      	ldr	r3, [sp, #64]	@ 0x40
    if (size == 0) {
 801c438:	b953      	cbnz	r3, 801c450 <lfs_ctz_find+0x22>
        *block = LFS_BLOCK_NULL;
 801c43a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c43e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c440:	6013      	str	r3, [r2, #0]
        *off = 0;
 801c442:	2300      	movs	r3, #0
 801c444:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801c446:	6013      	str	r3, [r2, #0]
}
 801c448:	4618      	mov	r0, r3
 801c44a:	b009      	add	sp, #36	@ 0x24
 801c44c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c450:	4607      	mov	r7, r0
 801c452:	4688      	mov	r8, r1
 801c454:	4691      	mov	r9, r2
    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 801c456:	3b01      	subs	r3, #1
 801c458:	9307      	str	r3, [sp, #28]
 801c45a:	a907      	add	r1, sp, #28
 801c45c:	f7ff fa16 	bl	801b88c <lfs_ctz_index>
 801c460:	4605      	mov	r5, r0
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 801c462:	a911      	add	r1, sp, #68	@ 0x44
 801c464:	4638      	mov	r0, r7
 801c466:	f7ff fa11 	bl	801b88c <lfs_ctz_index>
 801c46a:	4606      	mov	r6, r0
    while (current > target) {
 801c46c:	42b5      	cmp	r5, r6
 801c46e:	d91f      	bls.n	801c4b0 <lfs_ctz_find+0x82>
                lfs_npw2(current-target+1) - 1,
 801c470:	1bac      	subs	r4, r5, r6
    return 32 - __builtin_clz(a-1);
 801c472:	fab4 f484 	clz	r4, r4
        lfs_size_t skip = lfs_min(
 801c476:	f1c4 041f 	rsb	r4, r4, #31
    return __builtin_ctz(a);
 801c47a:	fa95 f3a5 	rbit	r3, r5
 801c47e:	fab3 f383 	clz	r3, r3
    return (a < b) ? a : b;
 801c482:	429c      	cmp	r4, r3
 801c484:	bf28      	it	cs
 801c486:	461c      	movcs	r4, r3
        int err = lfs_bd_read(lfs,
 801c488:	2304      	movs	r3, #4
 801c48a:	9303      	str	r3, [sp, #12]
 801c48c:	aa05      	add	r2, sp, #20
 801c48e:	9202      	str	r2, [sp, #8]
 801c490:	00a2      	lsls	r2, r4, #2
 801c492:	9201      	str	r2, [sp, #4]
 801c494:	9a05      	ldr	r2, [sp, #20]
 801c496:	9200      	str	r2, [sp, #0]
 801c498:	464a      	mov	r2, r9
 801c49a:	4641      	mov	r1, r8
 801c49c:	4638      	mov	r0, r7
 801c49e:	f7ff fa13 	bl	801b8c8 <lfs_bd_read>
        if (err) {
 801c4a2:	4603      	mov	r3, r0
 801c4a4:	2800      	cmp	r0, #0
 801c4a6:	d1cf      	bne.n	801c448 <lfs_ctz_find+0x1a>
        current -= 1 << skip;
 801c4a8:	2301      	movs	r3, #1
 801c4aa:	40a3      	lsls	r3, r4
 801c4ac:	1aed      	subs	r5, r5, r3
 801c4ae:	e7dd      	b.n	801c46c <lfs_ctz_find+0x3e>
    *block = head;
 801c4b0:	9b05      	ldr	r3, [sp, #20]
 801c4b2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c4b4:	6013      	str	r3, [r2, #0]
    *off = pos;
 801c4b6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c4b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801c4ba:	6013      	str	r3, [r2, #0]
    return 0;
 801c4bc:	2300      	movs	r3, #0
 801c4be:	e7c3      	b.n	801c448 <lfs_ctz_find+0x1a>

0801c4c0 <lfs_file_flushedread>:
        void *buffer, lfs_size_t size) {
 801c4c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c4c4:	b087      	sub	sp, #28
 801c4c6:	460c      	mov	r4, r1
 801c4c8:	4617      	mov	r7, r2
    if (file->pos >= file->ctz.size) {
 801c4ca:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801c4cc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801c4ce:	4291      	cmp	r1, r2
 801c4d0:	d272      	bcs.n	801c5b8 <lfs_file_flushedread+0xf8>
 801c4d2:	4680      	mov	r8, r0
    size = lfs_min(size, file->ctz.size - file->pos);
 801c4d4:	eba2 0901 	sub.w	r9, r2, r1
 801c4d8:	4599      	cmp	r9, r3
 801c4da:	bf28      	it	cs
 801c4dc:	4699      	movcs	r9, r3
    nsize = size;
 801c4de:	464e      	mov	r6, r9
    while (nsize > 0) {
 801c4e0:	e037      	b.n	801c552 <lfs_file_flushedread+0x92>
            if (!(file->flags & LFS_F_INLINE)) {
 801c4e2:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801c4e6:	d041      	beq.n	801c56c <lfs_file_flushedread+0xac>
                file->block = LFS_BLOCK_INLINE;
 801c4e8:	f06f 0301 	mvn.w	r3, #1
 801c4ec:	63a3      	str	r3, [r4, #56]	@ 0x38
                file->off = file->pos;
 801c4ee:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c4f0:	63e3      	str	r3, [r4, #60]	@ 0x3c
            file->flags |= LFS_F_READING;
 801c4f2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c4f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801c4f8:	6323      	str	r3, [r4, #48]	@ 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 801c4fa:	f8d8 3068 	ldr.w	r3, [r8, #104]	@ 0x68
 801c4fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c500:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 801c502:	1a9d      	subs	r5, r3, r2
 801c504:	42b5      	cmp	r5, r6
 801c506:	bf28      	it	cs
 801c508:	4635      	movcs	r5, r6
        if (file->flags & LFS_F_INLINE) {
 801c50a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801c50c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 801c510:	d041      	beq.n	801c596 <lfs_file_flushedread+0xd6>
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 801c512:	88a1      	ldrh	r1, [r4, #4]
 801c514:	0289      	lsls	r1, r1, #10
            int err = lfs_dir_getread(lfs, &file->m,
 801c516:	9505      	str	r5, [sp, #20]
 801c518:	9704      	str	r7, [sp, #16]
 801c51a:	9203      	str	r2, [sp, #12]
 801c51c:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 801c520:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 801c524:	9102      	str	r1, [sp, #8]
 801c526:	4a27      	ldr	r2, [pc, #156]	@ (801c5c4 <lfs_file_flushedread+0x104>)
 801c528:	9201      	str	r2, [sp, #4]
 801c52a:	9300      	str	r3, [sp, #0]
 801c52c:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 801c530:	2200      	movs	r2, #0
 801c532:	f104 0108 	add.w	r1, r4, #8
 801c536:	4640      	mov	r0, r8
 801c538:	f7ff fd9e 	bl	801c078 <lfs_dir_getread>
            if (err) {
 801c53c:	4603      	mov	r3, r0
 801c53e:	2800      	cmp	r0, #0
 801c540:	d13b      	bne.n	801c5ba <lfs_file_flushedread+0xfa>
        file->pos += diff;
 801c542:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c544:	442b      	add	r3, r5
 801c546:	6363      	str	r3, [r4, #52]	@ 0x34
        file->off += diff;
 801c548:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801c54a:	442b      	add	r3, r5
 801c54c:	63e3      	str	r3, [r4, #60]	@ 0x3c
        data += diff;
 801c54e:	442f      	add	r7, r5
        nsize -= diff;
 801c550:	1b76      	subs	r6, r6, r5
    while (nsize > 0) {
 801c552:	2e00      	cmp	r6, #0
 801c554:	d02e      	beq.n	801c5b4 <lfs_file_flushedread+0xf4>
        if (!(file->flags & LFS_F_READING) ||
 801c556:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c558:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 801c55c:	d0c1      	beq.n	801c4e2 <lfs_file_flushedread+0x22>
                file->off == lfs->cfg->block_size) {
 801c55e:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801c560:	f8d8 2068 	ldr.w	r2, [r8, #104]	@ 0x68
 801c564:	6a52      	ldr	r2, [r2, #36]	@ 0x24
        if (!(file->flags & LFS_F_READING) ||
 801c566:	4291      	cmp	r1, r2
 801c568:	d1c7      	bne.n	801c4fa <lfs_file_flushedread+0x3a>
 801c56a:	e7ba      	b.n	801c4e2 <lfs_file_flushedread+0x22>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801c56c:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 801c570:	9303      	str	r3, [sp, #12]
 801c572:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801c576:	9302      	str	r3, [sp, #8]
 801c578:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c57a:	9301      	str	r3, [sp, #4]
 801c57c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801c57e:	9300      	str	r3, [sp, #0]
 801c580:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801c582:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 801c586:	2100      	movs	r1, #0
 801c588:	4640      	mov	r0, r8
 801c58a:	f7ff ff50 	bl	801c42e <lfs_ctz_find>
                if (err) {
 801c58e:	4603      	mov	r3, r0
 801c590:	2800      	cmp	r0, #0
 801c592:	d0ae      	beq.n	801c4f2 <lfs_file_flushedread+0x32>
 801c594:	e011      	b.n	801c5ba <lfs_file_flushedread+0xfa>
            int err = lfs_bd_read(lfs,
 801c596:	9503      	str	r5, [sp, #12]
 801c598:	9702      	str	r7, [sp, #8]
 801c59a:	9201      	str	r2, [sp, #4]
 801c59c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801c59e:	9200      	str	r2, [sp, #0]
 801c5a0:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 801c5a4:	2100      	movs	r1, #0
 801c5a6:	4640      	mov	r0, r8
 801c5a8:	f7ff f98e 	bl	801b8c8 <lfs_bd_read>
            if (err) {
 801c5ac:	4603      	mov	r3, r0
 801c5ae:	2800      	cmp	r0, #0
 801c5b0:	d0c7      	beq.n	801c542 <lfs_file_flushedread+0x82>
 801c5b2:	e002      	b.n	801c5ba <lfs_file_flushedread+0xfa>
    return size;
 801c5b4:	464b      	mov	r3, r9
 801c5b6:	e000      	b.n	801c5ba <lfs_file_flushedread+0xfa>
        return 0;
 801c5b8:	2300      	movs	r3, #0
}
 801c5ba:	4618      	mov	r0, r3
 801c5bc:	b007      	add	sp, #28
 801c5be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c5c2:	bf00      	nop
 801c5c4:	fff7fc00 	.word	0xfff7fc00

0801c5c8 <lfs_bd_crc>:
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 801c5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5cc:	b089      	sub	sp, #36	@ 0x24
 801c5ce:	4683      	mov	fp, r0
 801c5d0:	468a      	mov	sl, r1
 801c5d2:	9205      	str	r2, [sp, #20]
 801c5d4:	4698      	mov	r8, r3
 801c5d6:	f8dd 904c 	ldr.w	r9, [sp, #76]	@ 0x4c
 801c5da:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801c5dc:	9f15      	ldr	r7, [sp, #84]	@ 0x54
    for (lfs_off_t i = 0; i < size; i += diff) {
 801c5de:	2400      	movs	r4, #0
 801c5e0:	e006      	b.n	801c5f0 <lfs_bd_crc+0x28>
        *crc = lfs_crc(*crc, &dat, diff);
 801c5e2:	462a      	mov	r2, r5
 801c5e4:	a906      	add	r1, sp, #24
 801c5e6:	6838      	ldr	r0, [r7, #0]
 801c5e8:	f003 fd82 	bl	80200f0 <lfs_crc>
 801c5ec:	6038      	str	r0, [r7, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 801c5ee:	442c      	add	r4, r5
 801c5f0:	42b4      	cmp	r4, r6
 801c5f2:	d216      	bcs.n	801c622 <lfs_bd_crc+0x5a>
        diff = lfs_min(size-i, sizeof(dat));
 801c5f4:	1b35      	subs	r5, r6, r4
 801c5f6:	2d08      	cmp	r5, #8
 801c5f8:	bf28      	it	cs
 801c5fa:	2508      	movcs	r5, #8
        int err = lfs_bd_read(lfs,
 801c5fc:	9503      	str	r5, [sp, #12]
 801c5fe:	ab06      	add	r3, sp, #24
 801c600:	9302      	str	r3, [sp, #8]
 801c602:	eb04 0309 	add.w	r3, r4, r9
 801c606:	9301      	str	r3, [sp, #4]
 801c608:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801c60a:	9300      	str	r3, [sp, #0]
 801c60c:	eba8 0304 	sub.w	r3, r8, r4
 801c610:	9a05      	ldr	r2, [sp, #20]
 801c612:	4651      	mov	r1, sl
 801c614:	4658      	mov	r0, fp
 801c616:	f7ff f957 	bl	801b8c8 <lfs_bd_read>
        if (err) {
 801c61a:	4603      	mov	r3, r0
 801c61c:	2800      	cmp	r0, #0
 801c61e:	d0e0      	beq.n	801c5e2 <lfs_bd_crc+0x1a>
 801c620:	e000      	b.n	801c624 <lfs_bd_crc+0x5c>
    return 0;
 801c622:	2300      	movs	r3, #0
}
 801c624:	4618      	mov	r0, r3
 801c626:	b009      	add	sp, #36	@ 0x24
 801c628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c62c <lfs_dir_fetchmatch>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 801c62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c630:	b097      	sub	sp, #92	@ 0x5c
 801c632:	4605      	mov	r5, r0
 801c634:	460e      	mov	r6, r1
 801c636:	4617      	mov	r7, r2
 801c638:	9305      	str	r3, [sp, #20]
    if (lfs->block_count 
 801c63a:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801c63c:	b13b      	cbz	r3, 801c64e <lfs_dir_fetchmatch+0x22>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 801c63e:	6812      	ldr	r2, [r2, #0]
 801c640:	4293      	cmp	r3, r2
 801c642:	f240 825a 	bls.w	801cafa <lfs_dir_fetchmatch+0x4ce>
 801c646:	687a      	ldr	r2, [r7, #4]
 801c648:	4293      	cmp	r3, r2
 801c64a:	f240 8259 	bls.w	801cb00 <lfs_dir_fetchmatch+0x4d4>
    uint32_t revs[2] = {0, 0};
 801c64e:	2400      	movs	r4, #0
 801c650:	9412      	str	r4, [sp, #72]	@ 0x48
 801c652:	9413      	str	r4, [sp, #76]	@ 0x4c
    for (int i = 0; i < 2; i++) {
 801c654:	46a0      	mov	r8, r4
 801c656:	e010      	b.n	801c67a <lfs_dir_fetchmatch+0x4e>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 801c658:	f118 0301 	adds.w	r3, r8, #1
 801c65c:	f003 0301 	and.w	r3, r3, #1
 801c660:	bf48      	it	mi
 801c662:	425b      	negmi	r3, r3
 801c664:	a916      	add	r1, sp, #88	@ 0x58
 801c666:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801c66a:	f853 3c10 	ldr.w	r3, [r3, #-16]
    return (int)(unsigned)(a - b);
 801c66e:	1ad2      	subs	r2, r2, r3
        if (err != LFS_ERR_CORRUPT &&
 801c670:	2a00      	cmp	r2, #0
 801c672:	dd00      	ble.n	801c676 <lfs_dir_fetchmatch+0x4a>
            r = i;
 801c674:	4644      	mov	r4, r8
    for (int i = 0; i < 2; i++) {
 801c676:	f108 0801 	add.w	r8, r8, #1
 801c67a:	f1b8 0f01 	cmp.w	r8, #1
 801c67e:	dc1d      	bgt.n	801c6bc <lfs_dir_fetchmatch+0x90>
                pair[i], 0, &revs[i], sizeof(revs[i]));
 801c680:	ea4f 0988 	mov.w	r9, r8, lsl #2
 801c684:	ab12      	add	r3, sp, #72	@ 0x48
 801c686:	eb03 0288 	add.w	r2, r3, r8, lsl #2
        int err = lfs_bd_read(lfs,
 801c68a:	2304      	movs	r3, #4
 801c68c:	9303      	str	r3, [sp, #12]
 801c68e:	9202      	str	r2, [sp, #8]
 801c690:	2100      	movs	r1, #0
 801c692:	9101      	str	r1, [sp, #4]
 801c694:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 801c698:	9200      	str	r2, [sp, #0]
 801c69a:	462a      	mov	r2, r5
 801c69c:	4628      	mov	r0, r5
 801c69e:	f7ff f913 	bl	801b8c8 <lfs_bd_read>
        revs[i] = lfs_fromle32(revs[i]);
 801c6a2:	f109 0358 	add.w	r3, r9, #88	@ 0x58
 801c6a6:	eb0d 0903 	add.w	r9, sp, r3
 801c6aa:	f859 2c10 	ldr.w	r2, [r9, #-16]
        if (err && err != LFS_ERR_CORRUPT) {
 801c6ae:	4683      	mov	fp, r0
 801c6b0:	2800      	cmp	r0, #0
 801c6b2:	d0d1      	beq.n	801c658 <lfs_dir_fetchmatch+0x2c>
 801c6b4:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c6b8:	d0dd      	beq.n	801c676 <lfs_dir_fetchmatch+0x4a>
 801c6ba:	e21a      	b.n	801caf2 <lfs_dir_fetchmatch+0x4c6>
    dir->pair[0] = pair[(r+0)%2];
 801c6bc:	2c00      	cmp	r4, #0
 801c6be:	f004 0301 	and.w	r3, r4, #1
 801c6c2:	bfb8      	it	lt
 801c6c4:	425b      	neglt	r3, r3
 801c6c6:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 801c6ca:	6032      	str	r2, [r6, #0]
    dir->pair[1] = pair[(r+1)%2];
 801c6cc:	f114 0c01 	adds.w	ip, r4, #1
 801c6d0:	f00c 0c01 	and.w	ip, ip, #1
 801c6d4:	bf48      	it	mi
 801c6d6:	f1cc 0c00 	rsbmi	ip, ip, #0
 801c6da:	f857 202c 	ldr.w	r2, [r7, ip, lsl #2]
 801c6de:	6072      	str	r2, [r6, #4]
    dir->rev = revs[(r+0)%2];
 801c6e0:	aa16      	add	r2, sp, #88	@ 0x58
 801c6e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c6e6:	f853 3c10 	ldr.w	r3, [r3, #-16]
 801c6ea:	60b3      	str	r3, [r6, #8]
    dir->off = 0; // nonzero = found some commits
 801c6ec:	2400      	movs	r4, #0
 801c6ee:	60f4      	str	r4, [r6, #12]
    lfs_stag_t besttag = -1;
 801c6f0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 801c6f4:	f8cd c01c 	str.w	ip, [sp, #28]
 801c6f8:	46a1      	mov	r9, r4
    for (int i = 0; i < 2; i++) {
 801c6fa:	f1b9 0f01 	cmp.w	r9, #1
 801c6fe:	f300 81eb 	bgt.w	801cad8 <lfs_dir_fetchmatch+0x4ac>
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801c702:	4a90      	ldr	r2, [pc, #576]	@ (801c944 <lfs_dir_fetchmatch+0x318>)
 801c704:	ab0e      	add	r3, sp, #56	@ 0x38
 801c706:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c70a:	e883 0003 	stmia.w	r3, {r0, r1}
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 801c70e:	2204      	movs	r2, #4
 801c710:	f106 0108 	add.w	r1, r6, #8
 801c714:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c718:	f003 fcea 	bl	80200f0 <lfs_crc>
 801c71c:	900b      	str	r0, [sp, #44]	@ 0x2c
        lfs_stag_t tempbesttag = besttag;
 801c71e:	f8cd b018 	str.w	fp, [sp, #24]
        bool hasfcrc = false;
 801c722:	2300      	movs	r3, #0
 801c724:	461c      	mov	r4, r3
 801c726:	9308      	str	r3, [sp, #32]
        bool tempsplit = false;
 801c728:	9309      	str	r3, [sp, #36]	@ 0x24
        lfs_tag_t ptag = 0xffffffff;
 801c72a:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
        lfs_off_t off = 0;
 801c72e:	461f      	mov	r7, r3
 801c730:	e110      	b.n	801c954 <lfs_dir_fetchmatch+0x328>
                if (err == LFS_ERR_CORRUPT) {
 801c732:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c736:	d101      	bne.n	801c73c <lfs_dir_fetchmatch+0x110>
        bool maybeerased = false;
 801c738:	2300      	movs	r3, #0
 801c73a:	e01e      	b.n	801c77a <lfs_dir_fetchmatch+0x14e>
                return err;
 801c73c:	4683      	mov	fp, r0
 801c73e:	e1d8      	b.n	801caf2 <lfs_dir_fetchmatch+0x4c6>
    return (tag & 0x78000000) >> 20;
 801c740:	ea4f 5318 	mov.w	r3, r8, lsr #20
 801c744:	f403 63f0 	and.w	r3, r3, #1920	@ 0x780
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 801c748:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 801c74c:	bf14      	ite	ne
 801c74e:	2300      	movne	r3, #0
 801c750:	2301      	moveq	r3, #1
                break;
 801c752:	e012      	b.n	801c77a <lfs_dir_fetchmatch+0x14e>
                err = lfs_bd_read(lfs,
 801c754:	2204      	movs	r2, #4
 801c756:	9203      	str	r2, [sp, #12]
 801c758:	aa0d      	add	r2, sp, #52	@ 0x34
 801c75a:	9202      	str	r2, [sp, #8]
 801c75c:	1d22      	adds	r2, r4, #4
 801c75e:	9201      	str	r2, [sp, #4]
 801c760:	6832      	ldr	r2, [r6, #0]
 801c762:	9200      	str	r2, [sp, #0]
 801c764:	462a      	mov	r2, r5
 801c766:	2100      	movs	r1, #0
 801c768:	4628      	mov	r0, r5
 801c76a:	f7ff f8ad 	bl	801b8c8 <lfs_bd_read>
                if (err) {
 801c76e:	bb80      	cbnz	r0, 801c7d2 <lfs_dir_fetchmatch+0x1a6>
                if (crc != dcrc) {
 801c770:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c772:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c774:	429a      	cmp	r2, r3
 801c776:	d031      	beq.n	801c7dc <lfs_dir_fetchmatch+0x1b0>
        bool maybeerased = false;
 801c778:	2300      	movs	r3, #0
        if (dir->off == 0) {
 801c77a:	68f2      	ldr	r2, [r6, #12]
 801c77c:	2a00      	cmp	r2, #0
 801c77e:	f000 8165 	beq.w	801ca4c <lfs_dir_fetchmatch+0x420>
        dir->erased = false;
 801c782:	2100      	movs	r1, #0
 801c784:	75b1      	strb	r1, [r6, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 801c786:	b153      	cbz	r3, 801c79e <lfs_dir_fetchmatch+0x172>
 801c788:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 801c78a:	6a01      	ldr	r1, [r0, #32]
 801c78c:	fbb2 f3f1 	udiv	r3, r2, r1
 801c790:	fb01 2313 	mls	r3, r1, r3, r2
 801c794:	b91b      	cbnz	r3, 801c79e <lfs_dir_fetchmatch+0x172>
            if (hasfcrc) {
 801c796:	9b08      	ldr	r3, [sp, #32]
 801c798:	2b00      	cmp	r3, #0
 801c79a:	f040 8165 	bne.w	801ca68 <lfs_dir_fetchmatch+0x43c>
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 801c79e:	4631      	mov	r1, r6
 801c7a0:	f105 003c 	add.w	r0, r5, #60	@ 0x3c
 801c7a4:	f7fe ff00 	bl	801b5a8 <lfs_gstate_hasmovehere>
 801c7a8:	2800      	cmp	r0, #0
 801c7aa:	f000 817d 	beq.w	801caa8 <lfs_dir_fetchmatch+0x47c>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 801c7ae:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
    return (tag & 0x000ffc00) >> 10;
 801c7b0:	f3c3 2389 	ubfx	r3, r3, #10, #10
 801c7b4:	f3cb 2289 	ubfx	r2, fp, #10, #10
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 801c7b8:	429a      	cmp	r2, r3
 801c7ba:	f000 8173 	beq.w	801caa4 <lfs_dir_fetchmatch+0x478>
            } else if (besttag != -1 &&
 801c7be:	f1bb 3fff 	cmp.w	fp, #4294967295	@ 0xffffffff
 801c7c2:	f000 8171 	beq.w	801caa8 <lfs_dir_fetchmatch+0x47c>
 801c7c6:	429a      	cmp	r2, r3
 801c7c8:	f240 816e 	bls.w	801caa8 <lfs_dir_fetchmatch+0x47c>
                besttag -= LFS_MKTAG(0, 1, 0);
 801c7cc:	f5ab 6b80 	sub.w	fp, fp, #1024	@ 0x400
 801c7d0:	e16a      	b.n	801caa8 <lfs_dir_fetchmatch+0x47c>
                    if (err == LFS_ERR_CORRUPT) {
 801c7d2:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c7d6:	d0cf      	beq.n	801c778 <lfs_dir_fetchmatch+0x14c>
                    return err;
 801c7d8:	4683      	mov	fp, r0
 801c7da:	e18a      	b.n	801caf2 <lfs_dir_fetchmatch+0x4c6>
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 801c7dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c7de:	f3c3 5307 	ubfx	r3, r3, #20, #8
 801c7e2:	ea8a 78c3 	eor.w	r8, sl, r3, lsl #31
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 801c7e6:	2204      	movs	r2, #4
 801c7e8:	a90b      	add	r1, sp, #44	@ 0x2c
 801c7ea:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801c7ec:	f003 fc80 	bl	80200f0 <lfs_crc>
 801c7f0:	62e8      	str	r0, [r5, #44]	@ 0x2c
                dir->off = off + lfs_tag_dsize(tag);
 801c7f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    return ((int32_t)(tag << 22) >> 22) == -1;
 801c7f4:	f343 0209 	sbfx	r2, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801c7f8:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801c7fc:	bf08      	it	eq
 801c7fe:	3301      	addeq	r3, #1
    return tag & 0x000003ff;
 801c800:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801c804:	3304      	adds	r3, #4
                dir->off = off + lfs_tag_dsize(tag);
 801c806:	4423      	add	r3, r4
 801c808:	60f3      	str	r3, [r6, #12]
                dir->etag = ptag;
 801c80a:	f8c6 8010 	str.w	r8, [r6, #16]
                dir->count = tempcount;
 801c80e:	82b7      	strh	r7, [r6, #20]
                dir->tail[0] = temptail[0];
 801c810:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c812:	61b3      	str	r3, [r6, #24]
                dir->tail[1] = temptail[1];
 801c814:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c816:	61f3      	str	r3, [r6, #28]
                dir->split = tempsplit;
 801c818:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c81a:	75f3      	strb	r3, [r6, #23]
                crc = 0xffffffff;
 801c81c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c820:	930b      	str	r3, [sp, #44]	@ 0x2c
                besttag = tempbesttag;
 801c822:	f8dd b018 	ldr.w	fp, [sp, #24]
 801c826:	e095      	b.n	801c954 <lfs_dir_fetchmatch+0x328>
                if (err == LFS_ERR_CORRUPT) {
 801c828:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c82c:	d101      	bne.n	801c832 <lfs_dir_fetchmatch+0x206>
        bool maybeerased = false;
 801c82e:	2300      	movs	r3, #0
 801c830:	e7a3      	b.n	801c77a <lfs_dir_fetchmatch+0x14e>
                return err;
 801c832:	4683      	mov	fp, r0
 801c834:	e15d      	b.n	801caf2 <lfs_dir_fetchmatch+0x4c6>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 801c836:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801c83a:	d021      	beq.n	801c880 <lfs_dir_fetchmatch+0x254>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 801c83c:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 801c840:	d046      	beq.n	801c8d0 <lfs_dir_fetchmatch+0x2a4>
    return (tag & 0x7ff00000) >> 20;
 801c842:	f3c0 020a 	ubfx	r2, r0, #0, #11
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 801c846:	f240 53ff 	movw	r3, #1535	@ 0x5ff
 801c84a:	429a      	cmp	r2, r3
 801c84c:	f040 80e3 	bne.w	801ca16 <lfs_dir_fetchmatch+0x3ea>
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801c850:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801c852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 801c854:	2208      	movs	r2, #8
 801c856:	9203      	str	r2, [sp, #12]
 801c858:	aa10      	add	r2, sp, #64	@ 0x40
 801c85a:	9202      	str	r2, [sp, #8]
 801c85c:	f8cd 8004 	str.w	r8, [sp, #4]
 801c860:	6832      	ldr	r2, [r6, #0]
 801c862:	9200      	str	r2, [sp, #0]
 801c864:	462a      	mov	r2, r5
 801c866:	2100      	movs	r1, #0
 801c868:	4628      	mov	r0, r5
 801c86a:	f7ff f82d 	bl	801b8c8 <lfs_bd_read>
                if (err) {
 801c86e:	2800      	cmp	r0, #0
 801c870:	d04a      	beq.n	801c908 <lfs_dir_fetchmatch+0x2dc>
                    if (err == LFS_ERR_CORRUPT) {
 801c872:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c876:	f000 80e7 	beq.w	801ca48 <lfs_dir_fetchmatch+0x41c>
                hasfcrc = true;
 801c87a:	2301      	movs	r3, #1
 801c87c:	9308      	str	r3, [sp, #32]
 801c87e:	e0ca      	b.n	801ca16 <lfs_dir_fetchmatch+0x3ea>
    return (int8_t)lfs_tag_chunk(tag);
 801c880:	b240      	sxtb	r0, r0
                tempcount += lfs_tag_splice(tag);
 801c882:	fa17 f280 	uxtah	r2, r7, r0
 801c886:	b297      	uxth	r7, r2
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 801c888:	9a06      	ldr	r2, [sp, #24]
 801c88a:	4611      	mov	r1, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 801c88c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 801c890:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 801c894:	f422 727f 	bic.w	r2, r2, #1020	@ 0x3fc
 801c898:	f022 0203 	bic.w	r2, r2, #3
 801c89c:	f042 429f 	orr.w	r2, r2, #1333788672	@ 0x4f800000
 801c8a0:	f442 02e0 	orr.w	r2, r2, #7340032	@ 0x700000
 801c8a4:	4293      	cmp	r3, r2
 801c8a6:	d00f      	beq.n	801c8c8 <lfs_dir_fetchmatch+0x29c>
                } else if (tempbesttag != -1 &&
 801c8a8:	9a06      	ldr	r2, [sp, #24]
 801c8aa:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801c8ae:	f000 80b2 	beq.w	801ca16 <lfs_dir_fetchmatch+0x3ea>
    return (tag & 0x000ffc00) >> 10;
 801c8b2:	f3c3 2389 	ubfx	r3, r3, #10, #10
 801c8b6:	f3c1 2289 	ubfx	r2, r1, #10, #10
                } else if (tempbesttag != -1 &&
 801c8ba:	429a      	cmp	r2, r3
 801c8bc:	f0c0 80ab 	bcc.w	801ca16 <lfs_dir_fetchmatch+0x3ea>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 801c8c0:	eb01 2380 	add.w	r3, r1, r0, lsl #10
 801c8c4:	9306      	str	r3, [sp, #24]
 801c8c6:	e0a6      	b.n	801ca16 <lfs_dir_fetchmatch+0x3ea>
                    tempbesttag |= 0x80000000;
 801c8c8:	f041 4300 	orr.w	r3, r1, #2147483648	@ 0x80000000
 801c8cc:	9306      	str	r3, [sp, #24]
 801c8ce:	e0a2      	b.n	801ca16 <lfs_dir_fetchmatch+0x3ea>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 801c8d0:	f000 0301 	and.w	r3, r0, #1
 801c8d4:	9309      	str	r3, [sp, #36]	@ 0x24
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801c8d6:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801c8d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 801c8da:	2208      	movs	r2, #8
 801c8dc:	9203      	str	r2, [sp, #12]
 801c8de:	aa0e      	add	r2, sp, #56	@ 0x38
 801c8e0:	9202      	str	r2, [sp, #8]
 801c8e2:	f8cd 8004 	str.w	r8, [sp, #4]
 801c8e6:	6832      	ldr	r2, [r6, #0]
 801c8e8:	9200      	str	r2, [sp, #0]
 801c8ea:	462a      	mov	r2, r5
 801c8ec:	2100      	movs	r1, #0
 801c8ee:	4628      	mov	r0, r5
 801c8f0:	f7fe ffea 	bl	801b8c8 <lfs_bd_read>
                if (err) {
 801c8f4:	2800      	cmp	r0, #0
 801c8f6:	f000 808e 	beq.w	801ca16 <lfs_dir_fetchmatch+0x3ea>
                    if (err == LFS_ERR_CORRUPT) {
 801c8fa:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c8fe:	d101      	bne.n	801c904 <lfs_dir_fetchmatch+0x2d8>
        bool maybeerased = false;
 801c900:	2300      	movs	r3, #0
 801c902:	e73a      	b.n	801c77a <lfs_dir_fetchmatch+0x14e>
                    return err;
 801c904:	4683      	mov	fp, r0
 801c906:	e0f4      	b.n	801caf2 <lfs_dir_fetchmatch+0x4c6>
                hasfcrc = true;
 801c908:	2301      	movs	r3, #1
 801c90a:	9308      	str	r3, [sp, #32]
 801c90c:	e083      	b.n	801ca16 <lfs_dir_fetchmatch+0x3ea>
                    if (res == LFS_ERR_CORRUPT) {
 801c90e:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c912:	d101      	bne.n	801c918 <lfs_dir_fetchmatch+0x2ec>
        bool maybeerased = false;
 801c914:	2300      	movs	r3, #0
 801c916:	e730      	b.n	801c77a <lfs_dir_fetchmatch+0x14e>
                    return res;
 801c918:	4683      	mov	fp, r0
 801c91a:	e0ea      	b.n	801caf2 <lfs_dir_fetchmatch+0x4c6>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 801c91c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801c91e:	9b06      	ldr	r3, [sp, #24]
 801c920:	469c      	mov	ip, r3
 801c922:	ea82 0103 	eor.w	r1, r2, r3
 801c926:	4b08      	ldr	r3, [pc, #32]	@ (801c948 <lfs_dir_fetchmatch+0x31c>)
 801c928:	400b      	ands	r3, r1
 801c92a:	b17b      	cbz	r3, 801c94c <lfs_dir_fetchmatch+0x320>
                } else if (res == LFS_CMP_GT &&
 801c92c:	2802      	cmp	r0, #2
 801c92e:	d110      	bne.n	801c952 <lfs_dir_fetchmatch+0x326>
    return (tag & 0x000ffc00) >> 10;
 801c930:	f3c2 2389 	ubfx	r3, r2, #10, #10
 801c934:	f3cc 2c89 	ubfx	ip, ip, #10, #10
                } else if (res == LFS_CMP_GT &&
 801c938:	459c      	cmp	ip, r3
 801c93a:	d30a      	bcc.n	801c952 <lfs_dir_fetchmatch+0x326>
                    tempbesttag = tag | 0x80000000;
 801c93c:	f042 4300 	orr.w	r3, r2, #2147483648	@ 0x80000000
 801c940:	9306      	str	r3, [sp, #24]
 801c942:	e006      	b.n	801c952 <lfs_dir_fetchmatch+0x326>
 801c944:	080363a4 	.word	0x080363a4
 801c948:	7ffffc00 	.word	0x7ffffc00
                    tempbesttag = -1;
 801c94c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c950:	9306      	str	r3, [sp, #24]
            ptag = tag;
 801c952:	46d0      	mov	r8, sl
    return ((int32_t)(tag << 22) >> 22) == -1;
 801c954:	f348 0209 	sbfx	r2, r8, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801c958:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801c95c:	bf14      	ite	ne
 801c95e:	4643      	movne	r3, r8
 801c960:	f108 0301 	addeq.w	r3, r8, #1
    return tag & 0x000003ff;
 801c964:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801c968:	3304      	adds	r3, #4
            off += lfs_tag_dsize(ptag);
 801c96a:	441c      	add	r4, r3
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 801c96c:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801c96e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            int err = lfs_bd_read(lfs,
 801c970:	2204      	movs	r2, #4
 801c972:	9203      	str	r2, [sp, #12]
 801c974:	aa0c      	add	r2, sp, #48	@ 0x30
 801c976:	9202      	str	r2, [sp, #8]
 801c978:	9401      	str	r4, [sp, #4]
 801c97a:	6832      	ldr	r2, [r6, #0]
 801c97c:	9200      	str	r2, [sp, #0]
 801c97e:	462a      	mov	r2, r5
 801c980:	2100      	movs	r1, #0
 801c982:	4628      	mov	r0, r5
 801c984:	f7fe ffa0 	bl	801b8c8 <lfs_bd_read>
            if (err) {
 801c988:	2800      	cmp	r0, #0
 801c98a:	f47f aed2 	bne.w	801c732 <lfs_dir_fetchmatch+0x106>
            crc = lfs_crc(crc, &tag, sizeof(tag));
 801c98e:	2204      	movs	r2, #4
 801c990:	a90c      	add	r1, sp, #48	@ 0x30
 801c992:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801c994:	f003 fbac 	bl	80200f0 <lfs_crc>
 801c998:	900b      	str	r0, [sp, #44]	@ 0x2c
            tag = lfs_frombe32(tag) ^ ptag;
 801c99a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    return __builtin_bswap32(a);
 801c99c:	ba1b      	rev	r3, r3
 801c99e:	ea88 0a03 	eor.w	sl, r8, r3
 801c9a2:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
            if (!lfs_tag_isvalid(tag)) {
 801c9a6:	f1ba 0f00 	cmp.w	sl, #0
 801c9aa:	f6ff aec9 	blt.w	801c740 <lfs_dir_fetchmatch+0x114>
    return ((int32_t)(tag << 22) >> 22) == -1;
 801c9ae:	f34a 0309 	sbfx	r3, sl, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801c9b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c9b6:	bf14      	ite	ne
 801c9b8:	4652      	movne	r2, sl
 801c9ba:	f10a 0201 	addeq.w	r2, sl, #1
    return tag & 0x000003ff;
 801c9be:	f3c2 0209 	ubfx	r2, r2, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801c9c2:	1d11      	adds	r1, r2, #4
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 801c9c4:	4421      	add	r1, r4
 801c9c6:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801c9c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c9ca:	4299      	cmp	r1, r3
 801c9cc:	d83a      	bhi.n	801ca44 <lfs_dir_fetchmatch+0x418>
    return (tag & 0x78000000) >> 20;
 801c9ce:	ea4f 511a 	mov.w	r1, sl, lsr #20
 801c9d2:	f401 61f0 	and.w	r1, r1, #1920	@ 0x780
            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 801c9d6:	f5b1 6fa0 	cmp.w	r1, #1280	@ 0x500
 801c9da:	f43f aebb 	beq.w	801c754 <lfs_dir_fetchmatch+0x128>
            err = lfs_bd_crc(lfs,
 801c9de:	f104 0804 	add.w	r8, r4, #4
 801c9e2:	a90b      	add	r1, sp, #44	@ 0x2c
 801c9e4:	9103      	str	r1, [sp, #12]
 801c9e6:	9202      	str	r2, [sp, #8]
 801c9e8:	f8cd 8004 	str.w	r8, [sp, #4]
 801c9ec:	6832      	ldr	r2, [r6, #0]
 801c9ee:	9200      	str	r2, [sp, #0]
 801c9f0:	462a      	mov	r2, r5
 801c9f2:	2100      	movs	r1, #0
 801c9f4:	4628      	mov	r0, r5
 801c9f6:	f7ff fde7 	bl	801c5c8 <lfs_bd_crc>
            if (err) {
 801c9fa:	2800      	cmp	r0, #0
 801c9fc:	f47f af14 	bne.w	801c828 <lfs_dir_fetchmatch+0x1fc>
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 801ca00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    return (tag & 0x70000000) >> 20;
 801ca02:	0d18      	lsrs	r0, r3, #20
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 801ca04:	f410 61e0 	ands.w	r1, r0, #1792	@ 0x700
 801ca08:	f47f af15 	bne.w	801c836 <lfs_dir_fetchmatch+0x20a>
    return (tag & 0x000ffc00) >> 10;
 801ca0c:	f3c3 2389 	ubfx	r3, r3, #10, #10
                if (lfs_tag_id(tag) >= tempcount) {
 801ca10:	429f      	cmp	r7, r3
 801ca12:	d800      	bhi.n	801ca16 <lfs_dir_fetchmatch+0x3ea>
                    tempcount = lfs_tag_id(tag) + 1;
 801ca14:	1c5f      	adds	r7, r3, #1
            if ((fmask & tag) == (fmask & ftag)) {
 801ca16:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801ca18:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801ca1a:	404b      	eors	r3, r1
 801ca1c:	9a05      	ldr	r2, [sp, #20]
 801ca1e:	4213      	tst	r3, r2
 801ca20:	d197      	bne.n	801c952 <lfs_dir_fetchmatch+0x326>
                        dir->pair[0], off+sizeof(tag)});
 801ca22:	6833      	ldr	r3, [r6, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 801ca24:	9314      	str	r3, [sp, #80]	@ 0x50
 801ca26:	f8cd 8054 	str.w	r8, [sp, #84]	@ 0x54
 801ca2a:	aa14      	add	r2, sp, #80	@ 0x50
 801ca2c:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 801ca2e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801ca30:	4798      	blx	r3
                if (res < 0) {
 801ca32:	2800      	cmp	r0, #0
 801ca34:	f6ff af6b 	blt.w	801c90e <lfs_dir_fetchmatch+0x2e2>
                if (res == LFS_CMP_EQ) {
 801ca38:	2800      	cmp	r0, #0
 801ca3a:	f47f af6f 	bne.w	801c91c <lfs_dir_fetchmatch+0x2f0>
                    tempbesttag = tag;
 801ca3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ca40:	9306      	str	r3, [sp, #24]
 801ca42:	e786      	b.n	801c952 <lfs_dir_fetchmatch+0x326>
        bool maybeerased = false;
 801ca44:	2300      	movs	r3, #0
 801ca46:	e698      	b.n	801c77a <lfs_dir_fetchmatch+0x14e>
 801ca48:	2300      	movs	r3, #0
 801ca4a:	e696      	b.n	801c77a <lfs_dir_fetchmatch+0x14e>
    lfs_block_t t = pair[0];
 801ca4c:	6833      	ldr	r3, [r6, #0]
    pair[0] = pair[1];
 801ca4e:	6872      	ldr	r2, [r6, #4]
 801ca50:	6032      	str	r2, [r6, #0]
    pair[1] = t;
 801ca52:	6073      	str	r3, [r6, #4]
            dir->rev = revs[(r+1)%2];
 801ca54:	aa16      	add	r2, sp, #88	@ 0x58
 801ca56:	9b07      	ldr	r3, [sp, #28]
 801ca58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ca5c:	f853 3c10 	ldr.w	r3, [r3, #-16]
 801ca60:	60b3      	str	r3, [r6, #8]
    for (int i = 0; i < 2; i++) {
 801ca62:	f109 0901 	add.w	r9, r9, #1
 801ca66:	e648      	b.n	801c6fa <lfs_dir_fetchmatch+0xce>
                uint32_t fcrc_ = 0xffffffff;
 801ca68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ca6c:	930d      	str	r3, [sp, #52]	@ 0x34
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801ca6e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
                int err = lfs_bd_crc(lfs,
 801ca70:	a90d      	add	r1, sp, #52	@ 0x34
 801ca72:	9103      	str	r1, [sp, #12]
 801ca74:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801ca76:	9102      	str	r1, [sp, #8]
 801ca78:	9201      	str	r2, [sp, #4]
 801ca7a:	6832      	ldr	r2, [r6, #0]
 801ca7c:	9200      	str	r2, [sp, #0]
 801ca7e:	462a      	mov	r2, r5
 801ca80:	2100      	movs	r1, #0
 801ca82:	4628      	mov	r0, r5
 801ca84:	f7ff fda0 	bl	801c5c8 <lfs_bd_crc>
                if (err && err != LFS_ERR_CORRUPT) {
 801ca88:	b120      	cbz	r0, 801ca94 <lfs_dir_fetchmatch+0x468>
 801ca8a:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801ca8e:	d001      	beq.n	801ca94 <lfs_dir_fetchmatch+0x468>
                    return err;
 801ca90:	4683      	mov	fp, r0
 801ca92:	e02e      	b.n	801caf2 <lfs_dir_fetchmatch+0x4c6>
                dir->erased = (fcrc_ == fcrc.crc);
 801ca94:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801ca96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ca98:	4293      	cmp	r3, r2
 801ca9a:	bf14      	ite	ne
 801ca9c:	2300      	movne	r3, #0
 801ca9e:	2301      	moveq	r3, #1
 801caa0:	75b3      	strb	r3, [r6, #22]
 801caa2:	e67c      	b.n	801c79e <lfs_dir_fetchmatch+0x172>
                besttag |= 0x80000000;
 801caa4:	f04b 4b00 	orr.w	fp, fp, #2147483648	@ 0x80000000
        if (id) {
 801caa8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801caaa:	b13b      	cbz	r3, 801cabc <lfs_dir_fetchmatch+0x490>
    return (tag & 0x000ffc00) >> 10;
 801caac:	f3cb 2389 	ubfx	r3, fp, #10, #10
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 801cab0:	8ab2      	ldrh	r2, [r6, #20]
    return (a < b) ? a : b;
 801cab2:	4293      	cmp	r3, r2
 801cab4:	bf28      	it	cs
 801cab6:	4613      	movcs	r3, r2
 801cab8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801caba:	8013      	strh	r3, [r2, #0]
        if (lfs_tag_isvalid(besttag)) {
 801cabc:	f1bb 0f00 	cmp.w	fp, #0
 801cac0:	da17      	bge.n	801caf2 <lfs_dir_fetchmatch+0x4c6>
    return (tag & 0x000ffc00) >> 10;
 801cac2:	f3cb 2389 	ubfx	r3, fp, #10, #10
        } else if (lfs_tag_id(besttag) < dir->count) {
 801cac6:	8ab2      	ldrh	r2, [r6, #20]
 801cac8:	429a      	cmp	r2, r3
 801caca:	d902      	bls.n	801cad2 <lfs_dir_fetchmatch+0x4a6>
            return LFS_ERR_NOENT;
 801cacc:	f06f 0b01 	mvn.w	fp, #1
 801cad0:	e00f      	b.n	801caf2 <lfs_dir_fetchmatch+0x4c6>
            return 0;
 801cad2:	f04f 0b00 	mov.w	fp, #0
 801cad6:	e00c      	b.n	801caf2 <lfs_dir_fetchmatch+0x4c6>
    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 801cad8:	4b0b      	ldr	r3, [pc, #44]	@ (801cb08 <lfs_dir_fetchmatch+0x4dc>)
 801cada:	9301      	str	r3, [sp, #4]
 801cadc:	6873      	ldr	r3, [r6, #4]
 801cade:	9300      	str	r3, [sp, #0]
 801cae0:	6833      	ldr	r3, [r6, #0]
 801cae2:	f240 5259 	movw	r2, #1369	@ 0x559
 801cae6:	4909      	ldr	r1, [pc, #36]	@ (801cb0c <lfs_dir_fetchmatch+0x4e0>)
 801cae8:	4809      	ldr	r0, [pc, #36]	@ (801cb10 <lfs_dir_fetchmatch+0x4e4>)
 801caea:	f00d fd9b 	bl	802a624 <printf>
    return LFS_ERR_CORRUPT;
 801caee:	f06f 0b53 	mvn.w	fp, #83	@ 0x53
}
 801caf2:	4658      	mov	r0, fp
 801caf4:	b017      	add	sp, #92	@ 0x5c
 801caf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LFS_ERR_CORRUPT;
 801cafa:	f06f 0b53 	mvn.w	fp, #83	@ 0x53
 801cafe:	e7f8      	b.n	801caf2 <lfs_dir_fetchmatch+0x4c6>
 801cb00:	f06f 0b53 	mvn.w	fp, #83	@ 0x53
 801cb04:	e7f5      	b.n	801caf2 <lfs_dir_fetchmatch+0x4c6>
 801cb06:	bf00      	nop
 801cb08:	080373ac 	.word	0x080373ac
 801cb0c:	080398c4 	.word	0x080398c4
 801cb10:	08039a4c 	.word	0x08039a4c

0801cb14 <lfs_fs_parent>:
        lfs_mdir_t *parent) {
 801cb14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cb18:	b08a      	sub	sp, #40	@ 0x28
 801cb1a:	4681      	mov	r9, r0
 801cb1c:	4688      	mov	r8, r1
 801cb1e:	4614      	mov	r4, r2
    parent->tail[0] = 0;
 801cb20:	2300      	movs	r3, #0
 801cb22:	6193      	str	r3, [r2, #24]
    parent->tail[1] = 1;
 801cb24:	2501      	movs	r5, #1
 801cb26:	61d5      	str	r5, [r2, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801cb28:	4a29      	ldr	r2, [pc, #164]	@ (801cbd0 <lfs_fs_parent+0xbc>)
 801cb2a:	ab05      	add	r3, sp, #20
 801cb2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801cb30:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801cb34:	46aa      	mov	sl, r5
    while (!lfs_pair_isnull(parent->tail)) {
 801cb36:	e03a      	b.n	801cbae <lfs_fs_parent+0x9a>
            LFS_WARN("Cycle detected in tail list");
 801cb38:	4b26      	ldr	r3, [pc, #152]	@ (801cbd4 <lfs_fs_parent+0xc0>)
 801cb3a:	f241 22c1 	movw	r2, #4801	@ 0x12c1
 801cb3e:	4926      	ldr	r1, [pc, #152]	@ (801cbd8 <lfs_fs_parent+0xc4>)
 801cb40:	4826      	ldr	r0, [pc, #152]	@ (801cbdc <lfs_fs_parent+0xc8>)
 801cb42:	f00d fd6f 	bl	802a624 <printf>
            return LFS_ERR_CORRUPT;
 801cb46:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801cb4a:	e03c      	b.n	801cbc6 <lfs_fs_parent+0xb2>
            tortoise[0] = parent->tail[0];
 801cb4c:	9705      	str	r7, [sp, #20]
            tortoise[1] = parent->tail[1];
 801cb4e:	69e3      	ldr	r3, [r4, #28]
 801cb50:	9306      	str	r3, [sp, #24]
            tortoise_period *= 2;
 801cb52:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
            tortoise_i = 0;
 801cb56:	2500      	movs	r5, #0
 801cb58:	e00d      	b.n	801cb76 <lfs_fs_parent+0x62>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801cb5a:	2301      	movs	r3, #1
 801cb5c:	e000      	b.n	801cb60 <lfs_fs_parent+0x4c>
 801cb5e:	2301      	movs	r3, #1
    while (!lfs_pair_isnull(parent->tail)) {
 801cb60:	bb7b      	cbnz	r3, 801cbc2 <lfs_fs_parent+0xae>
        if (lfs_pair_issync(parent->tail, tortoise)) {
 801cb62:	f104 0618 	add.w	r6, r4, #24
 801cb66:	a905      	add	r1, sp, #20
 801cb68:	4630      	mov	r0, r6
 801cb6a:	f7fe fce7 	bl	801b53c <lfs_pair_issync>
 801cb6e:	2800      	cmp	r0, #0
 801cb70:	d1e2      	bne.n	801cb38 <lfs_fs_parent+0x24>
        if (tortoise_i == tortoise_period) {
 801cb72:	4555      	cmp	r5, sl
 801cb74:	d0ea      	beq.n	801cb4c <lfs_fs_parent+0x38>
        tortoise_i += 1;
 801cb76:	3501      	adds	r5, #1
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801cb78:	f8cd 901c 	str.w	r9, [sp, #28]
                    lfs, {pair[0], pair[1]}});
 801cb7c:	f8d8 3000 	ldr.w	r3, [r8]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801cb80:	9308      	str	r3, [sp, #32]
                    lfs, {pair[0], pair[1]}});
 801cb82:	f8d8 3004 	ldr.w	r3, [r8, #4]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801cb86:	9309      	str	r3, [sp, #36]	@ 0x24
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 801cb88:	ab07      	add	r3, sp, #28
 801cb8a:	9303      	str	r3, [sp, #12]
 801cb8c:	4b14      	ldr	r3, [pc, #80]	@ (801cbe0 <lfs_fs_parent+0xcc>)
 801cb8e:	9302      	str	r3, [sp, #8]
 801cb90:	2300      	movs	r3, #0
 801cb92:	9301      	str	r3, [sp, #4]
 801cb94:	4b13      	ldr	r3, [pc, #76]	@ (801cbe4 <lfs_fs_parent+0xd0>)
 801cb96:	9300      	str	r3, [sp, #0]
 801cb98:	4b13      	ldr	r3, [pc, #76]	@ (801cbe8 <lfs_fs_parent+0xd4>)
 801cb9a:	4632      	mov	r2, r6
 801cb9c:	4621      	mov	r1, r4
 801cb9e:	4648      	mov	r0, r9
 801cba0:	f7ff fd44 	bl	801c62c <lfs_dir_fetchmatch>
        if (tag && tag != LFS_ERR_NOENT) {
 801cba4:	4603      	mov	r3, r0
 801cba6:	b110      	cbz	r0, 801cbae <lfs_fs_parent+0x9a>
 801cba8:	f110 0f02 	cmn.w	r0, #2
 801cbac:	d10b      	bne.n	801cbc6 <lfs_fs_parent+0xb2>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801cbae:	69a7      	ldr	r7, [r4, #24]
 801cbb0:	f1b7 3fff 	cmp.w	r7, #4294967295	@ 0xffffffff
 801cbb4:	d0d3      	beq.n	801cb5e <lfs_fs_parent+0x4a>
 801cbb6:	69e3      	ldr	r3, [r4, #28]
 801cbb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801cbbc:	d0cd      	beq.n	801cb5a <lfs_fs_parent+0x46>
 801cbbe:	2300      	movs	r3, #0
 801cbc0:	e7ce      	b.n	801cb60 <lfs_fs_parent+0x4c>
    return LFS_ERR_NOENT;
 801cbc2:	f06f 0301 	mvn.w	r3, #1
}
 801cbc6:	4618      	mov	r0, r3
 801cbc8:	b00a      	add	sp, #40	@ 0x28
 801cbca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cbce:	bf00      	nop
 801cbd0:	080363a4 	.word	0x080363a4
 801cbd4:	080373ac 	.word	0x080373ac
 801cbd8:	080398c4 	.word	0x080398c4
 801cbdc:	08039a84 	.word	0x08039a84
 801cbe0:	0801bcfd 	.word	0x0801bcfd
 801cbe4:	20000008 	.word	0x20000008
 801cbe8:	7ff003ff 	.word	0x7ff003ff

0801cbec <lfs_dir_fetch>:
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 801cbec:	b500      	push	{lr}
 801cbee:	b085      	sub	sp, #20
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 801cbf0:	2300      	movs	r3, #0
 801cbf2:	9303      	str	r3, [sp, #12]
 801cbf4:	9302      	str	r3, [sp, #8]
 801cbf6:	9301      	str	r3, [sp, #4]
 801cbf8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cbfc:	9300      	str	r3, [sp, #0]
 801cbfe:	f7ff fd15 	bl	801c62c <lfs_dir_fetchmatch>
}
 801cc02:	b005      	add	sp, #20
 801cc04:	f85d fb04 	ldr.w	pc, [sp], #4

0801cc08 <lfs_fs_traverse_>:
        bool includeorphans) {
 801cc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc0c:	b093      	sub	sp, #76	@ 0x4c
 801cc0e:	4606      	mov	r6, r0
 801cc10:	460f      	mov	r7, r1
 801cc12:	4690      	mov	r8, r2
 801cc14:	4699      	mov	r9, r3
    lfs_mdir_t dir = {.tail = {0, 1}};
 801cc16:	2220      	movs	r2, #32
 801cc18:	2100      	movs	r1, #0
 801cc1a:	a80a      	add	r0, sp, #40	@ 0x28
 801cc1c:	f010 fa20 	bl	802d060 <memset>
 801cc20:	2501      	movs	r5, #1
 801cc22:	9511      	str	r5, [sp, #68]	@ 0x44
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801cc24:	4a62      	ldr	r2, [pc, #392]	@ (801cdb0 <lfs_fs_traverse_+0x1a8>)
 801cc26:	ab08      	add	r3, sp, #32
 801cc28:	e892 0003 	ldmia.w	r2, {r0, r1}
 801cc2c:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801cc30:	46aa      	mov	sl, r5
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801cc32:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801cc34:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 801cc38:	f000 8081 	beq.w	801cd3e <lfs_fs_traverse_+0x136>
 801cc3c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801cc3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801cc42:	d07a      	beq.n	801cd3a <lfs_fs_traverse_+0x132>
 801cc44:	2300      	movs	r3, #0
    while (!lfs_pair_isnull(dir.tail)) {
 801cc46:	2b00      	cmp	r3, #0
 801cc48:	d17b      	bne.n	801cd42 <lfs_fs_traverse_+0x13a>
        if (lfs_pair_issync(dir.tail, tortoise)) {
 801cc4a:	a908      	add	r1, sp, #32
 801cc4c:	a810      	add	r0, sp, #64	@ 0x40
 801cc4e:	f7fe fc75 	bl	801b53c <lfs_pair_issync>
 801cc52:	b988      	cbnz	r0, 801cc78 <lfs_fs_traverse_+0x70>
        if (tortoise_i == tortoise_period) {
 801cc54:	4555      	cmp	r5, sl
 801cc56:	d019      	beq.n	801cc8c <lfs_fs_traverse_+0x84>
        tortoise_i += 1;
 801cc58:	3501      	adds	r5, #1
        for (int i = 0; i < 2; i++) {
 801cc5a:	2400      	movs	r4, #0
 801cc5c:	2c01      	cmp	r4, #1
 801cc5e:	dc1c      	bgt.n	801cc9a <lfs_fs_traverse_+0x92>
            int err = cb(data, dir.tail[i]);
 801cc60:	1da3      	adds	r3, r4, #6
 801cc62:	aa12      	add	r2, sp, #72	@ 0x48
 801cc64:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801cc68:	f853 1c20 	ldr.w	r1, [r3, #-32]
 801cc6c:	4640      	mov	r0, r8
 801cc6e:	47b8      	blx	r7
            if (err) {
 801cc70:	4603      	mov	r3, r0
 801cc72:	b9f8      	cbnz	r0, 801ccb4 <lfs_fs_traverse_+0xac>
        for (int i = 0; i < 2; i++) {
 801cc74:	3401      	adds	r4, #1
 801cc76:	e7f1      	b.n	801cc5c <lfs_fs_traverse_+0x54>
            LFS_WARN("Cycle detected in tail list");
 801cc78:	4b4e      	ldr	r3, [pc, #312]	@ (801cdb4 <lfs_fs_traverse_+0x1ac>)
 801cc7a:	f241 2222 	movw	r2, #4642	@ 0x1222
 801cc7e:	494e      	ldr	r1, [pc, #312]	@ (801cdb8 <lfs_fs_traverse_+0x1b0>)
 801cc80:	484e      	ldr	r0, [pc, #312]	@ (801cdbc <lfs_fs_traverse_+0x1b4>)
 801cc82:	f00d fccf 	bl	802a624 <printf>
            return LFS_ERR_CORRUPT;
 801cc86:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801cc8a:	e013      	b.n	801ccb4 <lfs_fs_traverse_+0xac>
            tortoise[0] = dir.tail[0];
 801cc8c:	9408      	str	r4, [sp, #32]
            tortoise[1] = dir.tail[1];
 801cc8e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801cc90:	9309      	str	r3, [sp, #36]	@ 0x24
            tortoise_period *= 2;
 801cc92:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
            tortoise_i = 0;
 801cc96:	2500      	movs	r5, #0
 801cc98:	e7de      	b.n	801cc58 <lfs_fs_traverse_+0x50>
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 801cc9a:	aa10      	add	r2, sp, #64	@ 0x40
 801cc9c:	a90a      	add	r1, sp, #40	@ 0x28
 801cc9e:	4630      	mov	r0, r6
 801cca0:	f7ff ffa4 	bl	801cbec <lfs_dir_fetch>
        if (err) {
 801cca4:	9005      	str	r0, [sp, #20]
 801cca6:	2800      	cmp	r0, #0
 801cca8:	d17f      	bne.n	801cdaa <lfs_fs_traverse_+0x1a2>
        for (uint16_t id = 0; id < dir.count; id++) {
 801ccaa:	2400      	movs	r4, #0
 801ccac:	e016      	b.n	801ccdc <lfs_fs_traverse_+0xd4>
                if (tag == LFS_ERR_NOENT) {
 801ccae:	f113 0f02 	cmn.w	r3, #2
 801ccb2:	d011      	beq.n	801ccd8 <lfs_fs_traverse_+0xd0>
}
 801ccb4:	4618      	mov	r0, r3
 801ccb6:	b013      	add	sp, #76	@ 0x4c
 801ccb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 801ccbc:	f8cd 8008 	str.w	r8, [sp, #8]
 801ccc0:	9701      	str	r7, [sp, #4]
 801ccc2:	9b07      	ldr	r3, [sp, #28]
 801ccc4:	9300      	str	r3, [sp, #0]
 801ccc6:	9b06      	ldr	r3, [sp, #24]
 801ccc8:	4632      	mov	r2, r6
 801ccca:	2100      	movs	r1, #0
 801cccc:	4630      	mov	r0, r6
 801ccce:	f7fe ffc9 	bl	801bc64 <lfs_ctz_traverse>
                if (err) {
 801ccd2:	4603      	mov	r3, r0
 801ccd4:	2800      	cmp	r0, #0
 801ccd6:	d1ed      	bne.n	801ccb4 <lfs_fs_traverse_+0xac>
        for (uint16_t id = 0; id < dir.count; id++) {
 801ccd8:	3401      	adds	r4, #1
 801ccda:	b2a4      	uxth	r4, r4
 801ccdc:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 801cce0:	42a3      	cmp	r3, r4
 801cce2:	d9a6      	bls.n	801cc32 <lfs_fs_traverse_+0x2a>
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 801cce4:	02a3      	lsls	r3, r4, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801cce6:	aa06      	add	r2, sp, #24
 801cce8:	9200      	str	r2, [sp, #0]
 801ccea:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801ccee:	f043 0308 	orr.w	r3, r3, #8
 801ccf2:	4a33      	ldr	r2, [pc, #204]	@ (801cdc0 <lfs_fs_traverse_+0x1b8>)
 801ccf4:	a90a      	add	r1, sp, #40	@ 0x28
 801ccf6:	4630      	mov	r0, r6
 801ccf8:	f7fe ff8a 	bl	801bc10 <lfs_dir_get>
            if (tag < 0) {
 801ccfc:	1e03      	subs	r3, r0, #0
 801ccfe:	dbd6      	blt.n	801ccae <lfs_fs_traverse_+0xa6>
    return (tag & 0x7ff00000) >> 20;
 801cd00:	f3c3 530a 	ubfx	r3, r3, #20, #11
            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 801cd04:	f240 2202 	movw	r2, #514	@ 0x202
 801cd08:	4293      	cmp	r3, r2
 801cd0a:	d0d7      	beq.n	801ccbc <lfs_fs_traverse_+0xb4>
            } else if (includeorphans &&
 801cd0c:	f1b9 0f00 	cmp.w	r9, #0
 801cd10:	d0e2      	beq.n	801ccd8 <lfs_fs_traverse_+0xd0>
 801cd12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801cd16:	d1df      	bne.n	801ccd8 <lfs_fs_traverse_+0xd0>
                for (int i = 0; i < 2; i++) {
 801cd18:	f8dd b014 	ldr.w	fp, [sp, #20]
 801cd1c:	e001      	b.n	801cd22 <lfs_fs_traverse_+0x11a>
 801cd1e:	f10b 0b01 	add.w	fp, fp, #1
 801cd22:	f1bb 0f01 	cmp.w	fp, #1
 801cd26:	dcd7      	bgt.n	801ccd8 <lfs_fs_traverse_+0xd0>
                    err = cb(data, (&ctz.head)[i]);
 801cd28:	ab06      	add	r3, sp, #24
 801cd2a:	f853 102b 	ldr.w	r1, [r3, fp, lsl #2]
 801cd2e:	4640      	mov	r0, r8
 801cd30:	47b8      	blx	r7
                    if (err) {
 801cd32:	4603      	mov	r3, r0
 801cd34:	2800      	cmp	r0, #0
 801cd36:	d0f2      	beq.n	801cd1e <lfs_fs_traverse_+0x116>
 801cd38:	e7bc      	b.n	801ccb4 <lfs_fs_traverse_+0xac>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801cd3a:	2301      	movs	r3, #1
 801cd3c:	e783      	b.n	801cc46 <lfs_fs_traverse_+0x3e>
 801cd3e:	2301      	movs	r3, #1
 801cd40:	e781      	b.n	801cc46 <lfs_fs_traverse_+0x3e>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801cd42:	6ab4      	ldr	r4, [r6, #40]	@ 0x28
 801cd44:	e00f      	b.n	801cd66 <lfs_fs_traverse_+0x15e>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 801cd46:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801cd48:	f8cd 8008 	str.w	r8, [sp, #8]
 801cd4c:	9701      	str	r7, [sp, #4]
 801cd4e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801cd50:	9200      	str	r2, [sp, #0]
 801cd52:	4632      	mov	r2, r6
 801cd54:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801cd58:	4630      	mov	r0, r6
 801cd5a:	f7fe ff83 	bl	801bc64 <lfs_ctz_traverse>
            if (err) {
 801cd5e:	4603      	mov	r3, r0
 801cd60:	b158      	cbz	r0, 801cd7a <lfs_fs_traverse_+0x172>
 801cd62:	e7a7      	b.n	801ccb4 <lfs_fs_traverse_+0xac>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801cd64:	6824      	ldr	r4, [r4, #0]
 801cd66:	b1f4      	cbz	r4, 801cda6 <lfs_fs_traverse_+0x19e>
        if (f->type != LFS_TYPE_REG) {
 801cd68:	79a3      	ldrb	r3, [r4, #6]
 801cd6a:	2b01      	cmp	r3, #1
 801cd6c:	d1fa      	bne.n	801cd64 <lfs_fs_traverse_+0x15c>
        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 801cd6e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cd70:	f403 1388 	and.w	r3, r3, #1114112	@ 0x110000
 801cd74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801cd78:	d0e5      	beq.n	801cd46 <lfs_fs_traverse_+0x13e>
        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 801cd7a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cd7c:	f403 1390 	and.w	r3, r3, #1179648	@ 0x120000
 801cd80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801cd84:	d1ee      	bne.n	801cd64 <lfs_fs_traverse_+0x15c>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 801cd86:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801cd88:	f8cd 8008 	str.w	r8, [sp, #8]
 801cd8c:	9701      	str	r7, [sp, #4]
 801cd8e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801cd90:	9200      	str	r2, [sp, #0]
 801cd92:	4632      	mov	r2, r6
 801cd94:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801cd98:	4630      	mov	r0, r6
 801cd9a:	f7fe ff63 	bl	801bc64 <lfs_ctz_traverse>
            if (err) {
 801cd9e:	4603      	mov	r3, r0
 801cda0:	2800      	cmp	r0, #0
 801cda2:	d0df      	beq.n	801cd64 <lfs_fs_traverse_+0x15c>
 801cda4:	e786      	b.n	801ccb4 <lfs_fs_traverse_+0xac>
    return 0;
 801cda6:	2300      	movs	r3, #0
 801cda8:	e784      	b.n	801ccb4 <lfs_fs_traverse_+0xac>
            return err;
 801cdaa:	9b05      	ldr	r3, [sp, #20]
 801cdac:	e782      	b.n	801ccb4 <lfs_fs_traverse_+0xac>
 801cdae:	bf00      	nop
 801cdb0:	080363a4 	.word	0x080363a4
 801cdb4:	080373ac 	.word	0x080373ac
 801cdb8:	080398c4 	.word	0x080398c4
 801cdbc:	08039a84 	.word	0x08039a84
 801cdc0:	700ffc00 	.word	0x700ffc00

0801cdc4 <lfs_alloc_scan>:
static int lfs_alloc_scan(lfs_t *lfs) {
 801cdc4:	b538      	push	{r3, r4, r5, lr}
 801cdc6:	4604      	mov	r4, r0
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 801cdc8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801cdca:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 801cdcc:	4413      	add	r3, r2
            % lfs->block_count;
 801cdce:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 801cdd0:	fbb3 f1f2 	udiv	r1, r3, r2
 801cdd4:	fb02 3311 	mls	r3, r2, r1, r3
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 801cdd8:	6543      	str	r3, [r0, #84]	@ 0x54
    lfs->lookahead.next = 0;
 801cdda:	2100      	movs	r1, #0
 801cddc:	65c1      	str	r1, [r0, #92]	@ 0x5c
            8*lfs->cfg->lookahead_size,
 801cdde:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 801cde0:	6b53      	ldr	r3, [r2, #52]	@ 0x34
    lfs->lookahead.size = lfs_min(
 801cde2:	00db      	lsls	r3, r3, #3
 801cde4:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801cde6:	4283      	cmp	r3, r0
 801cde8:	bf28      	it	cs
 801cdea:	4603      	movcs	r3, r0
 801cdec:	65a3      	str	r3, [r4, #88]	@ 0x58
    memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 801cdee:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801cdf0:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801cdf2:	f010 f935 	bl	802d060 <memset>
    int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, true);
 801cdf6:	2301      	movs	r3, #1
 801cdf8:	4622      	mov	r2, r4
 801cdfa:	4906      	ldr	r1, [pc, #24]	@ (801ce14 <lfs_alloc_scan+0x50>)
 801cdfc:	4620      	mov	r0, r4
 801cdfe:	f7ff ff03 	bl	801cc08 <lfs_fs_traverse_>
    if (err) {
 801ce02:	4605      	mov	r5, r0
 801ce04:	b908      	cbnz	r0, 801ce0a <lfs_alloc_scan+0x46>
}
 801ce06:	4628      	mov	r0, r5
 801ce08:	bd38      	pop	{r3, r4, r5, pc}
        lfs_alloc_drop(lfs);
 801ce0a:	4620      	mov	r0, r4
 801ce0c:	f7fe fc15 	bl	801b63a <lfs_alloc_drop>
        return err;
 801ce10:	e7f9      	b.n	801ce06 <lfs_alloc_scan+0x42>
 801ce12:	bf00      	nop
 801ce14:	0801b649 	.word	0x0801b649

0801ce18 <lfs_alloc>:
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 801ce18:	b530      	push	{r4, r5, lr}
 801ce1a:	b083      	sub	sp, #12
 801ce1c:	4604      	mov	r4, r0
 801ce1e:	460d      	mov	r5, r1
        while (lfs->lookahead.next < lfs->lookahead.size) {
 801ce20:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 801ce22:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 801ce24:	4293      	cmp	r3, r2
 801ce26:	d22b      	bcs.n	801ce80 <lfs_alloc+0x68>
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801ce28:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 801ce2a:	08da      	lsrs	r2, r3, #3
 801ce2c:	5c8a      	ldrb	r2, [r1, r2]
                    & (1U << (lfs->lookahead.next % 8)))) {
 801ce2e:	f003 0107 	and.w	r1, r3, #7
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801ce32:	40ca      	lsrs	r2, r1
 801ce34:	f012 0f01 	tst.w	r2, #1
 801ce38:	d005      	beq.n	801ce46 <lfs_alloc+0x2e>
            lfs->lookahead.next += 1;
 801ce3a:	3301      	adds	r3, #1
 801ce3c:	65e3      	str	r3, [r4, #92]	@ 0x5c
            lfs->lookahead.ckpoint -= 1;
 801ce3e:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 801ce40:	3b01      	subs	r3, #1
 801ce42:	6623      	str	r3, [r4, #96]	@ 0x60
 801ce44:	e7ec      	b.n	801ce20 <lfs_alloc+0x8>
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 801ce46:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801ce48:	4413      	add	r3, r2
                        % lfs->block_count;
 801ce4a:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 801ce4c:	fbb3 f1f2 	udiv	r1, r3, r2
 801ce50:	fb02 3311 	mls	r3, r2, r1, r3
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 801ce54:	602b      	str	r3, [r5, #0]
                    lfs->lookahead.next += 1;
 801ce56:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 801ce58:	3301      	adds	r3, #1
 801ce5a:	65e3      	str	r3, [r4, #92]	@ 0x5c
                    lfs->lookahead.ckpoint -= 1;
 801ce5c:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 801ce5e:	3a01      	subs	r2, #1
 801ce60:	6622      	str	r2, [r4, #96]	@ 0x60
                    if (lfs->lookahead.next >= lfs->lookahead.size
 801ce62:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 801ce64:	4293      	cmp	r3, r2
 801ce66:	d225      	bcs.n	801ceb4 <lfs_alloc+0x9c>
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801ce68:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 801ce6a:	08da      	lsrs	r2, r3, #3
 801ce6c:	5c8a      	ldrb	r2, [r1, r2]
                                & (1U << (lfs->lookahead.next % 8)))) {
 801ce6e:	f003 0307 	and.w	r3, r3, #7
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801ce72:	fa22 f303 	lsr.w	r3, r2, r3
 801ce76:	f013 0f01 	tst.w	r3, #1
 801ce7a:	d1ec      	bne.n	801ce56 <lfs_alloc+0x3e>
                        return 0;
 801ce7c:	2000      	movs	r0, #0
 801ce7e:	e01a      	b.n	801ceb6 <lfs_alloc+0x9e>
        if (lfs->lookahead.ckpoint <= 0) {
 801ce80:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 801ce82:	b12a      	cbz	r2, 801ce90 <lfs_alloc+0x78>
        int err = lfs_alloc_scan(lfs);
 801ce84:	4620      	mov	r0, r4
 801ce86:	f7ff ff9d 	bl	801cdc4 <lfs_alloc_scan>
        if(err) {
 801ce8a:	2800      	cmp	r0, #0
 801ce8c:	d0c8      	beq.n	801ce20 <lfs_alloc+0x8>
 801ce8e:	e012      	b.n	801ceb6 <lfs_alloc+0x9e>
            LFS_ERROR("No more free space 0x%"PRIx32,
 801ce90:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801ce92:	4413      	add	r3, r2
 801ce94:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 801ce96:	fbb3 f1f2 	udiv	r1, r3, r2
 801ce9a:	4808      	ldr	r0, [pc, #32]	@ (801cebc <lfs_alloc+0xa4>)
 801ce9c:	9000      	str	r0, [sp, #0]
 801ce9e:	fb02 3311 	mls	r3, r2, r1, r3
 801cea2:	f240 22b1 	movw	r2, #689	@ 0x2b1
 801cea6:	4906      	ldr	r1, [pc, #24]	@ (801cec0 <lfs_alloc+0xa8>)
 801cea8:	4806      	ldr	r0, [pc, #24]	@ (801cec4 <lfs_alloc+0xac>)
 801ceaa:	f00d fbbb 	bl	802a624 <printf>
            return LFS_ERR_NOSPC;
 801ceae:	f06f 001b 	mvn.w	r0, #27
 801ceb2:	e000      	b.n	801ceb6 <lfs_alloc+0x9e>
                        return 0;
 801ceb4:	2000      	movs	r0, #0
}
 801ceb6:	b003      	add	sp, #12
 801ceb8:	bd30      	pop	{r4, r5, pc}
 801ceba:	bf00      	nop
 801cebc:	080373ac 	.word	0x080373ac
 801cec0:	080398c4 	.word	0x080398c4
 801cec4:	08039ab0 	.word	0x08039ab0

0801cec8 <lfs_dir_alloc>:
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 801cec8:	b570      	push	{r4, r5, r6, lr}
 801ceca:	b084      	sub	sp, #16
 801cecc:	4606      	mov	r6, r0
 801cece:	460c      	mov	r4, r1
    for (int i = 0; i < 2; i++) {
 801ced0:	2500      	movs	r5, #0
 801ced2:	2d01      	cmp	r5, #1
 801ced4:	dc0d      	bgt.n	801cef2 <lfs_dir_alloc+0x2a>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 801ced6:	3501      	adds	r5, #1
 801ced8:	f005 0101 	and.w	r1, r5, #1
 801cedc:	bf48      	it	mi
 801cede:	4249      	negmi	r1, r1
 801cee0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801cee4:	4630      	mov	r0, r6
 801cee6:	f7ff ff97 	bl	801ce18 <lfs_alloc>
        if (err) {
 801ceea:	4603      	mov	r3, r0
 801ceec:	2800      	cmp	r0, #0
 801ceee:	d0f0      	beq.n	801ced2 <lfs_dir_alloc+0xa>
 801cef0:	e02d      	b.n	801cf4e <lfs_dir_alloc+0x86>
    dir->rev = 0;
 801cef2:	2100      	movs	r1, #0
 801cef4:	4622      	mov	r2, r4
 801cef6:	f842 1f08 	str.w	r1, [r2, #8]!
    int err = lfs_bd_read(lfs,
 801cefa:	2304      	movs	r3, #4
 801cefc:	9303      	str	r3, [sp, #12]
 801cefe:	9202      	str	r2, [sp, #8]
 801cf00:	9101      	str	r1, [sp, #4]
 801cf02:	6822      	ldr	r2, [r4, #0]
 801cf04:	9200      	str	r2, [sp, #0]
 801cf06:	4632      	mov	r2, r6
 801cf08:	4630      	mov	r0, r6
 801cf0a:	f7fe fcdd 	bl	801b8c8 <lfs_bd_read>
    dir->rev = lfs_fromle32(dir->rev);
 801cf0e:	68a2      	ldr	r2, [r4, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 801cf10:	4603      	mov	r3, r0
 801cf12:	b110      	cbz	r0, 801cf1a <lfs_dir_alloc+0x52>
 801cf14:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801cf18:	d119      	bne.n	801cf4e <lfs_dir_alloc+0x86>
    if (lfs->cfg->block_cycles > 0) {
 801cf1a:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 801cf1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cf1e:	2b00      	cmp	r3, #0
 801cf20:	dd0a      	ble.n	801cf38 <lfs_dir_alloc+0x70>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 801cf22:	3301      	adds	r3, #1
 801cf24:	f043 0101 	orr.w	r1, r3, #1
    return lfs_aligndown(a + alignment-1, alignment);
 801cf28:	1853      	adds	r3, r2, r1
 801cf2a:	3b01      	subs	r3, #1
    return a - (a % alignment);
 801cf2c:	fbb3 f2f1 	udiv	r2, r3, r1
 801cf30:	fb01 3212 	mls	r2, r1, r2, r3
 801cf34:	1a9b      	subs	r3, r3, r2
 801cf36:	60a3      	str	r3, [r4, #8]
    dir->off = sizeof(dir->rev);
 801cf38:	2304      	movs	r3, #4
 801cf3a:	60e3      	str	r3, [r4, #12]
    dir->etag = 0xffffffff;
 801cf3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801cf40:	6122      	str	r2, [r4, #16]
    dir->count = 0;
 801cf42:	2300      	movs	r3, #0
 801cf44:	82a3      	strh	r3, [r4, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 801cf46:	61a2      	str	r2, [r4, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 801cf48:	61e2      	str	r2, [r4, #28]
    dir->erased = false;
 801cf4a:	75a3      	strb	r3, [r4, #22]
    dir->split = false;
 801cf4c:	75e3      	strb	r3, [r4, #23]
}
 801cf4e:	4618      	mov	r0, r3
 801cf50:	b004      	add	sp, #16
 801cf52:	bd70      	pop	{r4, r5, r6, pc}

0801cf54 <lfs_file_relocate>:
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 801cf54:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cf56:	b089      	sub	sp, #36	@ 0x24
 801cf58:	4605      	mov	r5, r0
 801cf5a:	460e      	mov	r6, r1
 801cf5c:	e053      	b.n	801d006 <lfs_file_relocate+0xb2>
                err = lfs_bd_read(lfs,
 801cf5e:	2201      	movs	r2, #1
 801cf60:	9203      	str	r2, [sp, #12]
 801cf62:	f10d 021b 	add.w	r2, sp, #27
 801cf66:	9202      	str	r2, [sp, #8]
 801cf68:	9401      	str	r4, [sp, #4]
 801cf6a:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 801cf6c:	9200      	str	r2, [sp, #0]
 801cf6e:	1b1b      	subs	r3, r3, r4
 801cf70:	462a      	mov	r2, r5
 801cf72:	f106 0140 	add.w	r1, r6, #64	@ 0x40
 801cf76:	4628      	mov	r0, r5
 801cf78:	f7fe fca6 	bl	801b8c8 <lfs_bd_read>
                if (err) {
 801cf7c:	2800      	cmp	r0, #0
 801cf7e:	d152      	bne.n	801d026 <lfs_file_relocate+0xd2>
            err = lfs_bd_prog(lfs,
 801cf80:	2301      	movs	r3, #1
 801cf82:	9303      	str	r3, [sp, #12]
 801cf84:	f10d 021b 	add.w	r2, sp, #27
 801cf88:	9202      	str	r2, [sp, #8]
 801cf8a:	9401      	str	r4, [sp, #4]
 801cf8c:	9a07      	ldr	r2, [sp, #28]
 801cf8e:	9200      	str	r2, [sp, #0]
 801cf90:	462a      	mov	r2, r5
 801cf92:	f105 0110 	add.w	r1, r5, #16
 801cf96:	4628      	mov	r0, r5
 801cf98:	f7ff f992 	bl	801c2c0 <lfs_bd_prog>
            if (err) {
 801cf9c:	bb20      	cbnz	r0, 801cfe8 <lfs_file_relocate+0x94>
        for (lfs_off_t i = 0; i < file->off; i++) {
 801cf9e:	3401      	adds	r4, #1
 801cfa0:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 801cfa2:	42a3      	cmp	r3, r4
 801cfa4:	d945      	bls.n	801d032 <lfs_file_relocate+0xde>
            if (file->flags & LFS_F_INLINE) {
 801cfa6:	6b32      	ldr	r2, [r6, #48]	@ 0x30
 801cfa8:	f412 1f80 	tst.w	r2, #1048576	@ 0x100000
 801cfac:	d0d7      	beq.n	801cf5e <lfs_file_relocate+0xa>
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 801cfae:	88b2      	ldrh	r2, [r6, #4]
 801cfb0:	0292      	lsls	r2, r2, #10
                err = lfs_dir_getread(lfs, &file->m,
 801cfb2:	2101      	movs	r1, #1
 801cfb4:	9105      	str	r1, [sp, #20]
 801cfb6:	f10d 011b 	add.w	r1, sp, #27
 801cfba:	9104      	str	r1, [sp, #16]
 801cfbc:	9403      	str	r4, [sp, #12]
 801cfbe:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 801cfc2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801cfc6:	9202      	str	r2, [sp, #8]
 801cfc8:	4a27      	ldr	r2, [pc, #156]	@ (801d068 <lfs_file_relocate+0x114>)
 801cfca:	9201      	str	r2, [sp, #4]
 801cfcc:	1b1b      	subs	r3, r3, r4
 801cfce:	9300      	str	r3, [sp, #0]
 801cfd0:	f106 0340 	add.w	r3, r6, #64	@ 0x40
 801cfd4:	2200      	movs	r2, #0
 801cfd6:	f106 0108 	add.w	r1, r6, #8
 801cfda:	4628      	mov	r0, r5
 801cfdc:	f7ff f84c 	bl	801c078 <lfs_dir_getread>
                if (err) {
 801cfe0:	2800      	cmp	r0, #0
 801cfe2:	d0cd      	beq.n	801cf80 <lfs_file_relocate+0x2c>
                    return err;
 801cfe4:	4607      	mov	r7, r0
 801cfe6:	e03b      	b.n	801d060 <lfs_file_relocate+0x10c>
                if (err == LFS_ERR_CORRUPT) {
 801cfe8:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801cfec:	d11d      	bne.n	801d02a <lfs_file_relocate+0xd6>
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 801cfee:	4b1f      	ldr	r3, [pc, #124]	@ (801d06c <lfs_file_relocate+0x118>)
 801cff0:	9300      	str	r3, [sp, #0]
 801cff2:	9b07      	ldr	r3, [sp, #28]
 801cff4:	f640 42dc 	movw	r2, #3292	@ 0xcdc
 801cff8:	491d      	ldr	r1, [pc, #116]	@ (801d070 <lfs_file_relocate+0x11c>)
 801cffa:	481e      	ldr	r0, [pc, #120]	@ (801d074 <lfs_file_relocate+0x120>)
 801cffc:	f00d fb12 	bl	802a624 <printf>
    rcache->block = LFS_BLOCK_NULL;
 801d000:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d004:	612b      	str	r3, [r5, #16]
        int err = lfs_alloc(lfs, &nblock);
 801d006:	a907      	add	r1, sp, #28
 801d008:	4628      	mov	r0, r5
 801d00a:	f7ff ff05 	bl	801ce18 <lfs_alloc>
        if (err) {
 801d00e:	4607      	mov	r7, r0
 801d010:	bb30      	cbnz	r0, 801d060 <lfs_file_relocate+0x10c>
        err = lfs_bd_erase(lfs, nblock);
 801d012:	9907      	ldr	r1, [sp, #28]
 801d014:	4628      	mov	r0, r5
 801d016:	f7fe fbdd 	bl	801b7d4 <lfs_bd_erase>
        if (err) {
 801d01a:	4607      	mov	r7, r0
 801d01c:	b138      	cbz	r0, 801d02e <lfs_file_relocate+0xda>
            if (err == LFS_ERR_CORRUPT) {
 801d01e:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d022:	d0e4      	beq.n	801cfee <lfs_file_relocate+0x9a>
 801d024:	e01c      	b.n	801d060 <lfs_file_relocate+0x10c>
                    return err;
 801d026:	4607      	mov	r7, r0
 801d028:	e01a      	b.n	801d060 <lfs_file_relocate+0x10c>
                return err;
 801d02a:	4607      	mov	r7, r0
 801d02c:	e018      	b.n	801d060 <lfs_file_relocate+0x10c>
        for (lfs_off_t i = 0; i < file->off; i++) {
 801d02e:	2400      	movs	r4, #0
 801d030:	e7b6      	b.n	801cfa0 <lfs_file_relocate+0x4c>
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 801d032:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801d034:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801d036:	69e9      	ldr	r1, [r5, #28]
 801d038:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 801d03a:	f011 fa4d 	bl	802e4d8 <memcpy>
        file->cache.block = lfs->pcache.block;
 801d03e:	692b      	ldr	r3, [r5, #16]
 801d040:	6433      	str	r3, [r6, #64]	@ 0x40
        file->cache.off = lfs->pcache.off;
 801d042:	696b      	ldr	r3, [r5, #20]
 801d044:	6473      	str	r3, [r6, #68]	@ 0x44
        file->cache.size = lfs->pcache.size;
 801d046:	69ab      	ldr	r3, [r5, #24]
 801d048:	64b3      	str	r3, [r6, #72]	@ 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 801d04a:	f105 0110 	add.w	r1, r5, #16
 801d04e:	4628      	mov	r0, r5
 801d050:	f7fe fc10 	bl	801b874 <lfs_cache_zero>
        file->block = nblock;
 801d054:	9b07      	ldr	r3, [sp, #28]
 801d056:	63b3      	str	r3, [r6, #56]	@ 0x38
        file->flags |= LFS_F_WRITING;
 801d058:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 801d05a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d05e:	6333      	str	r3, [r6, #48]	@ 0x30
}
 801d060:	4638      	mov	r0, r7
 801d062:	b009      	add	sp, #36	@ 0x24
 801d064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d066:	bf00      	nop
 801d068:	fff7fc00 	.word	0xfff7fc00
 801d06c:	080373ac 	.word	0x080373ac
 801d070:	080398c4 	.word	0x080398c4
 801d074:	08039adc 	.word	0x08039adc

0801d078 <lfs_file_outline>:
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 801d078:	b538      	push	{r3, r4, r5, lr}
 801d07a:	4605      	mov	r5, r0
 801d07c:	460c      	mov	r4, r1
    file->off = file->pos;
 801d07e:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801d080:	63cb      	str	r3, [r1, #60]	@ 0x3c
    lfs_alloc_ckpoint(lfs);
 801d082:	f7fe fad7 	bl	801b634 <lfs_alloc_ckpoint>
    int err = lfs_file_relocate(lfs, file);
 801d086:	4621      	mov	r1, r4
 801d088:	4628      	mov	r0, r5
 801d08a:	f7ff ff63 	bl	801cf54 <lfs_file_relocate>
    if (err) {
 801d08e:	b918      	cbnz	r0, 801d098 <lfs_file_outline+0x20>
    file->flags &= ~LFS_F_INLINE;
 801d090:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d092:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801d096:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801d098:	bd38      	pop	{r3, r4, r5, pc}
	...

0801d09c <lfs_ctz_extend>:
        lfs_block_t *block, lfs_off_t *off) {
 801d09c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0a0:	b08b      	sub	sp, #44	@ 0x2c
 801d0a2:	4605      	mov	r5, r0
 801d0a4:	460f      	mov	r7, r1
 801d0a6:	4616      	mov	r6, r2
 801d0a8:	9305      	str	r3, [sp, #20]
 801d0aa:	e04d      	b.n	801d148 <lfs_ctz_extend+0xac>
            if (size == 0) {
 801d0ac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d0ae:	2b00      	cmp	r3, #0
 801d0b0:	d032      	beq.n	801d118 <lfs_ctz_extend+0x7c>
            lfs_size_t noff = size - 1;
 801d0b2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d0b4:	3b01      	subs	r3, #1
 801d0b6:	9308      	str	r3, [sp, #32]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 801d0b8:	a908      	add	r1, sp, #32
 801d0ba:	4628      	mov	r0, r5
 801d0bc:	f7fe fbe6 	bl	801b88c <lfs_ctz_index>
            noff = noff + 1;
 801d0c0:	9b08      	ldr	r3, [sp, #32]
 801d0c2:	3301      	adds	r3, #1
 801d0c4:	9308      	str	r3, [sp, #32]
            if (noff != lfs->cfg->block_size) {
 801d0c6:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 801d0c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801d0ca:	4293      	cmp	r3, r2
 801d0cc:	d05b      	beq.n	801d186 <lfs_ctz_extend+0xea>
                for (lfs_off_t i = 0; i < noff; i++) {
 801d0ce:	2400      	movs	r4, #0
 801d0d0:	46b9      	mov	r9, r7
 801d0d2:	9f05      	ldr	r7, [sp, #20]
 801d0d4:	9b08      	ldr	r3, [sp, #32]
 801d0d6:	42a3      	cmp	r3, r4
 801d0d8:	d94a      	bls.n	801d170 <lfs_ctz_extend+0xd4>
                    err = lfs_bd_read(lfs,
 801d0da:	2201      	movs	r2, #1
 801d0dc:	9203      	str	r2, [sp, #12]
 801d0de:	aa09      	add	r2, sp, #36	@ 0x24
 801d0e0:	9202      	str	r2, [sp, #8]
 801d0e2:	9401      	str	r4, [sp, #4]
 801d0e4:	9700      	str	r7, [sp, #0]
 801d0e6:	1b1b      	subs	r3, r3, r4
 801d0e8:	4632      	mov	r2, r6
 801d0ea:	2100      	movs	r1, #0
 801d0ec:	4628      	mov	r0, r5
 801d0ee:	f7fe fbeb 	bl	801b8c8 <lfs_bd_read>
                    if (err) {
 801d0f2:	4603      	mov	r3, r0
 801d0f4:	2800      	cmp	r0, #0
 801d0f6:	d139      	bne.n	801d16c <lfs_ctz_extend+0xd0>
                    err = lfs_bd_prog(lfs,
 801d0f8:	2301      	movs	r3, #1
 801d0fa:	9303      	str	r3, [sp, #12]
 801d0fc:	aa09      	add	r2, sp, #36	@ 0x24
 801d0fe:	9202      	str	r2, [sp, #8]
 801d100:	9401      	str	r4, [sp, #4]
 801d102:	9a07      	ldr	r2, [sp, #28]
 801d104:	9200      	str	r2, [sp, #0]
 801d106:	4632      	mov	r2, r6
 801d108:	4649      	mov	r1, r9
 801d10a:	4628      	mov	r0, r5
 801d10c:	f7ff f8d8 	bl	801c2c0 <lfs_bd_prog>
                    if (err) {
 801d110:	4603      	mov	r3, r0
 801d112:	b948      	cbnz	r0, 801d128 <lfs_ctz_extend+0x8c>
                for (lfs_off_t i = 0; i < noff; i++) {
 801d114:	3401      	adds	r4, #1
 801d116:	e7dd      	b.n	801d0d4 <lfs_ctz_extend+0x38>
                *block = nblock;
 801d118:	4682      	mov	sl, r0
 801d11a:	9b07      	ldr	r3, [sp, #28]
 801d11c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801d11e:	6013      	str	r3, [r2, #0]
                *off = 0;
 801d120:	2300      	movs	r3, #0
 801d122:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801d124:	6013      	str	r3, [r2, #0]
                return 0;
 801d126:	e02a      	b.n	801d17e <lfs_ctz_extend+0xe2>
                        if (err == LFS_ERR_CORRUPT) {
 801d128:	464f      	mov	r7, r9
 801d12a:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d12e:	d11d      	bne.n	801d16c <lfs_ctz_extend+0xd0>
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 801d130:	4b36      	ldr	r3, [pc, #216]	@ (801d20c <lfs_ctz_extend+0x170>)
 801d132:	9300      	str	r3, [sp, #0]
 801d134:	9b07      	ldr	r3, [sp, #28]
 801d136:	f640 32a6 	movw	r2, #2982	@ 0xba6
 801d13a:	4935      	ldr	r1, [pc, #212]	@ (801d210 <lfs_ctz_extend+0x174>)
 801d13c:	4835      	ldr	r0, [pc, #212]	@ (801d214 <lfs_ctz_extend+0x178>)
 801d13e:	f00d fa71 	bl	802a624 <printf>
    rcache->block = LFS_BLOCK_NULL;
 801d142:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d146:	603b      	str	r3, [r7, #0]
        int err = lfs_alloc(lfs, &nblock);
 801d148:	a907      	add	r1, sp, #28
 801d14a:	4628      	mov	r0, r5
 801d14c:	f7ff fe64 	bl	801ce18 <lfs_alloc>
        if (err) {
 801d150:	2800      	cmp	r0, #0
 801d152:	d159      	bne.n	801d208 <lfs_ctz_extend+0x16c>
            err = lfs_bd_erase(lfs, nblock);
 801d154:	9907      	ldr	r1, [sp, #28]
 801d156:	4628      	mov	r0, r5
 801d158:	f7fe fb3c 	bl	801b7d4 <lfs_bd_erase>
            if (err) {
 801d15c:	4680      	mov	r8, r0
 801d15e:	2800      	cmp	r0, #0
 801d160:	d0a4      	beq.n	801d0ac <lfs_ctz_extend+0x10>
                if (err == LFS_ERR_CORRUPT) {
 801d162:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d166:	d0e3      	beq.n	801d130 <lfs_ctz_extend+0x94>
 801d168:	4682      	mov	sl, r0
 801d16a:	e008      	b.n	801d17e <lfs_ctz_extend+0xe2>
                        return err;
 801d16c:	469a      	mov	sl, r3
 801d16e:	e006      	b.n	801d17e <lfs_ctz_extend+0xe2>
                *block = nblock;
 801d170:	46c2      	mov	sl, r8
 801d172:	9b07      	ldr	r3, [sp, #28]
 801d174:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801d176:	6013      	str	r3, [r2, #0]
                *off = noff;
 801d178:	9b08      	ldr	r3, [sp, #32]
 801d17a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801d17c:	6013      	str	r3, [r2, #0]
}
 801d17e:	4650      	mov	r0, sl
 801d180:	b00b      	add	sp, #44	@ 0x2c
 801d182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            index += 1;
 801d186:	3001      	adds	r0, #1
    return __builtin_ctz(a);
 801d188:	fa90 f9a0 	rbit	r9, r0
 801d18c:	fab9 f989 	clz	r9, r9
            lfs_size_t skips = lfs_ctz(index) + 1;
 801d190:	f109 0a01 	add.w	sl, r9, #1
            lfs_block_t nhead = head;
 801d194:	9b05      	ldr	r3, [sp, #20]
 801d196:	9309      	str	r3, [sp, #36]	@ 0x24
            for (lfs_off_t i = 0; i < skips; i++) {
 801d198:	2400      	movs	r4, #0
 801d19a:	46ab      	mov	fp, r5
 801d19c:	e006      	b.n	801d1ac <lfs_ctz_extend+0x110>
                    if (err == LFS_ERR_CORRUPT) {
 801d19e:	465d      	mov	r5, fp
 801d1a0:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d1a4:	d0c4      	beq.n	801d130 <lfs_ctz_extend+0x94>
                    return err;
 801d1a6:	4682      	mov	sl, r0
 801d1a8:	e7e9      	b.n	801d17e <lfs_ctz_extend+0xe2>
            for (lfs_off_t i = 0; i < skips; i++) {
 801d1aa:	3401      	adds	r4, #1
 801d1ac:	4554      	cmp	r4, sl
 801d1ae:	d221      	bcs.n	801d1f4 <lfs_ctz_extend+0x158>
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 801d1b0:	00a5      	lsls	r5, r4, #2
 801d1b2:	2304      	movs	r3, #4
 801d1b4:	9303      	str	r3, [sp, #12]
 801d1b6:	ab09      	add	r3, sp, #36	@ 0x24
 801d1b8:	9302      	str	r3, [sp, #8]
 801d1ba:	9501      	str	r5, [sp, #4]
 801d1bc:	9b07      	ldr	r3, [sp, #28]
 801d1be:	9300      	str	r3, [sp, #0]
 801d1c0:	2301      	movs	r3, #1
 801d1c2:	4632      	mov	r2, r6
 801d1c4:	4639      	mov	r1, r7
 801d1c6:	4658      	mov	r0, fp
 801d1c8:	f7ff f87a 	bl	801c2c0 <lfs_bd_prog>
                nhead = lfs_fromle32(nhead);
 801d1cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
                if (err) {
 801d1ce:	2800      	cmp	r0, #0
 801d1d0:	d1e5      	bne.n	801d19e <lfs_ctz_extend+0x102>
                if (i != skips-1) {
 801d1d2:	454c      	cmp	r4, r9
 801d1d4:	d0e9      	beq.n	801d1aa <lfs_ctz_extend+0x10e>
                    err = lfs_bd_read(lfs,
 801d1d6:	2304      	movs	r3, #4
 801d1d8:	9303      	str	r3, [sp, #12]
 801d1da:	a909      	add	r1, sp, #36	@ 0x24
 801d1dc:	9102      	str	r1, [sp, #8]
 801d1de:	9501      	str	r5, [sp, #4]
 801d1e0:	9200      	str	r2, [sp, #0]
 801d1e2:	4632      	mov	r2, r6
 801d1e4:	2100      	movs	r1, #0
 801d1e6:	4658      	mov	r0, fp
 801d1e8:	f7fe fb6e 	bl	801b8c8 <lfs_bd_read>
                    if (err) {
 801d1ec:	2800      	cmp	r0, #0
 801d1ee:	d0dc      	beq.n	801d1aa <lfs_ctz_extend+0x10e>
                        return err;
 801d1f0:	4682      	mov	sl, r0
 801d1f2:	e7c4      	b.n	801d17e <lfs_ctz_extend+0xe2>
            *block = nblock;
 801d1f4:	46d1      	mov	r9, sl
 801d1f6:	46c2      	mov	sl, r8
 801d1f8:	9b07      	ldr	r3, [sp, #28]
 801d1fa:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801d1fc:	6013      	str	r3, [r2, #0]
            *off = 4*skips;
 801d1fe:	ea4f 0189 	mov.w	r1, r9, lsl #2
 801d202:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d204:	6019      	str	r1, [r3, #0]
            return 0;
 801d206:	e7ba      	b.n	801d17e <lfs_ctz_extend+0xe2>
 801d208:	4682      	mov	sl, r0
 801d20a:	e7b8      	b.n	801d17e <lfs_ctz_extend+0xe2>
 801d20c:	080373ac 	.word	0x080373ac
 801d210:	080398c4 	.word	0x080398c4
 801d214:	08039adc 	.word	0x08039adc

0801d218 <lfs_file_flushedwrite>:
        const void *buffer, lfs_size_t size) {
 801d218:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d21c:	b087      	sub	sp, #28
 801d21e:	4605      	mov	r5, r0
 801d220:	460c      	mov	r4, r1
 801d222:	4617      	mov	r7, r2
 801d224:	4699      	mov	r9, r3
    if ((file->flags & LFS_F_INLINE) &&
 801d226:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801d228:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801d22c:	d008      	beq.n	801d240 <lfs_file_flushedwrite+0x28>
            lfs_max(file->pos+nsize, file->ctz.size) > lfs->inline_max) {
 801d22e:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801d230:	444b      	add	r3, r9
 801d232:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
    return (a > b) ? a : b;
 801d234:	4293      	cmp	r3, r2
 801d236:	bf38      	it	cc
 801d238:	4613      	movcc	r3, r2
 801d23a:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
    if ((file->flags & LFS_F_INLINE) &&
 801d23c:	429a      	cmp	r2, r3
 801d23e:	d32d      	bcc.n	801d29c <lfs_file_flushedwrite+0x84>
        const void *buffer, lfs_size_t size) {
 801d240:	46c8      	mov	r8, r9
    while (nsize > 0) {
 801d242:	f1b8 0f00 	cmp.w	r8, #0
 801d246:	f000 8094 	beq.w	801d372 <lfs_file_flushedwrite+0x15a>
        if (!(file->flags & LFS_F_WRITING) ||
 801d24a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d24c:	f413 3200 	ands.w	r2, r3, #131072	@ 0x20000
 801d250:	d004      	beq.n	801d25c <lfs_file_flushedwrite+0x44>
                file->off == lfs->cfg->block_size) {
 801d252:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 801d254:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 801d256:	6a49      	ldr	r1, [r1, #36]	@ 0x24
        if (!(file->flags & LFS_F_WRITING) ||
 801d258:	4288      	cmp	r0, r1
 801d25a:	d150      	bne.n	801d2fe <lfs_file_flushedwrite+0xe6>
            if (!(file->flags & LFS_F_INLINE)) {
 801d25c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801d260:	d144      	bne.n	801d2ec <lfs_file_flushedwrite+0xd4>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 801d262:	b90a      	cbnz	r2, 801d268 <lfs_file_flushedwrite+0x50>
 801d264:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d266:	bb1b      	cbnz	r3, 801d2b0 <lfs_file_flushedwrite+0x98>
                lfs_alloc_ckpoint(lfs);
 801d268:	4628      	mov	r0, r5
 801d26a:	f7fe f9e3 	bl	801b634 <lfs_alloc_ckpoint>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 801d26e:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 801d272:	9302      	str	r3, [sp, #8]
 801d274:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801d278:	9301      	str	r3, [sp, #4]
 801d27a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d27c:	9300      	str	r3, [sp, #0]
 801d27e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801d280:	462a      	mov	r2, r5
 801d282:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801d286:	4628      	mov	r0, r5
 801d288:	f7ff ff08 	bl	801d09c <lfs_ctz_extend>
                if (err) {
 801d28c:	4601      	mov	r1, r0
 801d28e:	2800      	cmp	r0, #0
 801d290:	d031      	beq.n	801d2f6 <lfs_file_flushedwrite+0xde>
                    file->flags |= LFS_F_ERRED;
 801d292:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d294:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801d298:	6323      	str	r3, [r4, #48]	@ 0x30
                    return err;
 801d29a:	e059      	b.n	801d350 <lfs_file_flushedwrite+0x138>
        int err = lfs_file_outline(lfs, file);
 801d29c:	f7ff feec 	bl	801d078 <lfs_file_outline>
        if (err) {
 801d2a0:	4601      	mov	r1, r0
 801d2a2:	2800      	cmp	r0, #0
 801d2a4:	d0cc      	beq.n	801d240 <lfs_file_flushedwrite+0x28>
            file->flags |= LFS_F_ERRED;
 801d2a6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d2a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801d2ac:	6323      	str	r3, [r4, #48]	@ 0x30
            return err;
 801d2ae:	e04f      	b.n	801d350 <lfs_file_flushedwrite+0x138>
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801d2b0:	f104 0640 	add.w	r6, r4, #64	@ 0x40
 801d2b4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
                            file->pos-1, &file->block, &(lfs_off_t){0});
 801d2b6:	2100      	movs	r1, #0
 801d2b8:	9105      	str	r1, [sp, #20]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801d2ba:	a805      	add	r0, sp, #20
 801d2bc:	9003      	str	r0, [sp, #12]
 801d2be:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 801d2c2:	9002      	str	r0, [sp, #8]
 801d2c4:	3b01      	subs	r3, #1
 801d2c6:	9301      	str	r3, [sp, #4]
 801d2c8:	9200      	str	r2, [sp, #0]
 801d2ca:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801d2cc:	4632      	mov	r2, r6
 801d2ce:	4628      	mov	r0, r5
 801d2d0:	f7ff f8ad 	bl	801c42e <lfs_ctz_find>
                    if (err) {
 801d2d4:	4601      	mov	r1, r0
 801d2d6:	b920      	cbnz	r0, 801d2e2 <lfs_file_flushedwrite+0xca>
                    lfs_cache_zero(lfs, &file->cache);
 801d2d8:	4631      	mov	r1, r6
 801d2da:	4628      	mov	r0, r5
 801d2dc:	f7fe faca 	bl	801b874 <lfs_cache_zero>
 801d2e0:	e7c2      	b.n	801d268 <lfs_file_flushedwrite+0x50>
                        file->flags |= LFS_F_ERRED;
 801d2e2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d2e4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801d2e8:	6323      	str	r3, [r4, #48]	@ 0x30
                        return err;
 801d2ea:	e031      	b.n	801d350 <lfs_file_flushedwrite+0x138>
                file->block = LFS_BLOCK_INLINE;
 801d2ec:	f06f 0301 	mvn.w	r3, #1
 801d2f0:	63a3      	str	r3, [r4, #56]	@ 0x38
                file->off = file->pos;
 801d2f2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d2f4:	63e3      	str	r3, [r4, #60]	@ 0x3c
            file->flags |= LFS_F_WRITING;
 801d2f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d2f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d2fc:	6323      	str	r3, [r4, #48]	@ 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 801d2fe:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801d300:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 801d302:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801d304:	1af6      	subs	r6, r6, r3
    return (a < b) ? a : b;
 801d306:	4546      	cmp	r6, r8
 801d308:	bf28      	it	cs
 801d30a:	4646      	movcs	r6, r8
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 801d30c:	9603      	str	r6, [sp, #12]
 801d30e:	9702      	str	r7, [sp, #8]
 801d310:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801d312:	9301      	str	r3, [sp, #4]
 801d314:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801d316:	9300      	str	r3, [sp, #0]
 801d318:	2301      	movs	r3, #1
 801d31a:	462a      	mov	r2, r5
 801d31c:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801d320:	4628      	mov	r0, r5
 801d322:	f7fe ffcd 	bl	801c2c0 <lfs_bd_prog>
            if (err) {
 801d326:	4601      	mov	r1, r0
 801d328:	b1b0      	cbz	r0, 801d358 <lfs_file_flushedwrite+0x140>
                if (err == LFS_ERR_CORRUPT) {
 801d32a:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d32e:	d10b      	bne.n	801d348 <lfs_file_flushedwrite+0x130>
            err = lfs_file_relocate(lfs, file);
 801d330:	4621      	mov	r1, r4
 801d332:	4628      	mov	r0, r5
 801d334:	f7ff fe0e 	bl	801cf54 <lfs_file_relocate>
            if (err) {
 801d338:	4601      	mov	r1, r0
 801d33a:	2800      	cmp	r0, #0
 801d33c:	d0e6      	beq.n	801d30c <lfs_file_flushedwrite+0xf4>
                file->flags |= LFS_F_ERRED;
 801d33e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d340:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801d344:	6323      	str	r3, [r4, #48]	@ 0x30
                return err;
 801d346:	e003      	b.n	801d350 <lfs_file_flushedwrite+0x138>
                file->flags |= LFS_F_ERRED;
 801d348:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d34a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801d34e:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801d350:	4608      	mov	r0, r1
 801d352:	b007      	add	sp, #28
 801d354:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        file->pos += diff;
 801d358:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d35a:	4433      	add	r3, r6
 801d35c:	6363      	str	r3, [r4, #52]	@ 0x34
        file->off += diff;
 801d35e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801d360:	4433      	add	r3, r6
 801d362:	63e3      	str	r3, [r4, #60]	@ 0x3c
        data += diff;
 801d364:	4437      	add	r7, r6
        nsize -= diff;
 801d366:	eba8 0806 	sub.w	r8, r8, r6
        lfs_alloc_ckpoint(lfs);
 801d36a:	4628      	mov	r0, r5
 801d36c:	f7fe f962 	bl	801b634 <lfs_alloc_ckpoint>
 801d370:	e767      	b.n	801d242 <lfs_file_flushedwrite+0x2a>
    return size;
 801d372:	4649      	mov	r1, r9
 801d374:	e7ec      	b.n	801d350 <lfs_file_flushedwrite+0x138>
	...

0801d378 <lfs_file_flush>:
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 801d378:	b570      	push	{r4, r5, r6, lr}
 801d37a:	b098      	sub	sp, #96	@ 0x60
 801d37c:	4605      	mov	r5, r0
 801d37e:	460c      	mov	r4, r1
    if (file->flags & LFS_F_READING) {
 801d380:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801d382:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 801d386:	d008      	beq.n	801d39a <lfs_file_flush+0x22>
        if (!(file->flags & LFS_F_INLINE)) {
 801d388:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801d38c:	d102      	bne.n	801d394 <lfs_file_flush+0x1c>
    rcache->block = LFS_BLOCK_NULL;
 801d38e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d392:	640a      	str	r2, [r1, #64]	@ 0x40
        file->flags &= ~LFS_F_READING;
 801d394:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801d398:	6323      	str	r3, [r4, #48]	@ 0x30
    if (file->flags & LFS_F_WRITING) {
 801d39a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d39c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801d3a0:	d068      	beq.n	801d474 <lfs_file_flush+0xfc>
        lfs_off_t pos = file->pos;
 801d3a2:	6b66      	ldr	r6, [r4, #52]	@ 0x34
        if (!(file->flags & LFS_F_INLINE)) {
 801d3a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801d3a8:	d151      	bne.n	801d44e <lfs_file_flush+0xd6>
            lfs_file_t orig = {
 801d3aa:	2254      	movs	r2, #84	@ 0x54
 801d3ac:	2100      	movs	r1, #0
 801d3ae:	a803      	add	r0, sp, #12
 801d3b0:	f00f fe56 	bl	802d060 <memset>
                .ctz.head = file->ctz.head,
 801d3b4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
            lfs_file_t orig = {
 801d3b6:	930d      	str	r3, [sp, #52]	@ 0x34
                .ctz.size = file->ctz.size,
 801d3b8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
            lfs_file_t orig = {
 801d3ba:	930e      	str	r3, [sp, #56]	@ 0x38
 801d3bc:	2301      	movs	r3, #1
 801d3be:	930f      	str	r3, [sp, #60]	@ 0x3c
                .pos = file->pos,
 801d3c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
            lfs_file_t orig = {
 801d3c2:	9310      	str	r3, [sp, #64]	@ 0x40
 801d3c4:	f10d 0c4c 	add.w	ip, sp, #76	@ 0x4c
 801d3c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801d3cc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    rcache->block = LFS_BLOCK_NULL;
 801d3d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d3d4:	602b      	str	r3, [r5, #0]
            while (file->pos < file->ctz.size) {
 801d3d6:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801d3d8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801d3da:	429a      	cmp	r2, r3
 801d3dc:	d21a      	bcs.n	801d414 <lfs_file_flush+0x9c>
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 801d3de:	2301      	movs	r3, #1
 801d3e0:	f10d 020b 	add.w	r2, sp, #11
 801d3e4:	a903      	add	r1, sp, #12
 801d3e6:	4628      	mov	r0, r5
 801d3e8:	f7ff f86a 	bl	801c4c0 <lfs_file_flushedread>
                if (res < 0) {
 801d3ec:	1e03      	subs	r3, r0, #0
 801d3ee:	db42      	blt.n	801d476 <lfs_file_flush+0xfe>
                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 801d3f0:	2301      	movs	r3, #1
 801d3f2:	f10d 020b 	add.w	r2, sp, #11
 801d3f6:	4621      	mov	r1, r4
 801d3f8:	4628      	mov	r0, r5
 801d3fa:	f7ff ff0d 	bl	801d218 <lfs_file_flushedwrite>
                if (res < 0) {
 801d3fe:	1e03      	subs	r3, r0, #0
 801d400:	db39      	blt.n	801d476 <lfs_file_flush+0xfe>
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 801d402:	682b      	ldr	r3, [r5, #0]
 801d404:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801d408:	d0e5      	beq.n	801d3d6 <lfs_file_flush+0x5e>
    rcache->block = LFS_BLOCK_NULL;
 801d40a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d40e:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d410:	602b      	str	r3, [r5, #0]
}
 801d412:	e7e0      	b.n	801d3d6 <lfs_file_flush+0x5e>
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 801d414:	2301      	movs	r3, #1
 801d416:	462a      	mov	r2, r5
 801d418:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801d41c:	4628      	mov	r0, r5
 801d41e:	f7fe fef5 	bl	801c20c <lfs_bd_flush>
                if (err) {
 801d422:	4603      	mov	r3, r0
 801d424:	b1c0      	cbz	r0, 801d458 <lfs_file_flush+0xe0>
                    if (err == LFS_ERR_CORRUPT) {
 801d426:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d42a:	d124      	bne.n	801d476 <lfs_file_flush+0xfe>
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 801d42c:	4b13      	ldr	r3, [pc, #76]	@ (801d47c <lfs_file_flush+0x104>)
 801d42e:	9300      	str	r3, [sp, #0]
 801d430:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801d432:	f640 522b 	movw	r2, #3371	@ 0xd2b
 801d436:	4912      	ldr	r1, [pc, #72]	@ (801d480 <lfs_file_flush+0x108>)
 801d438:	4812      	ldr	r0, [pc, #72]	@ (801d484 <lfs_file_flush+0x10c>)
 801d43a:	f00d f8f3 	bl	802a624 <printf>
                err = lfs_file_relocate(lfs, file);
 801d43e:	4621      	mov	r1, r4
 801d440:	4628      	mov	r0, r5
 801d442:	f7ff fd87 	bl	801cf54 <lfs_file_relocate>
                if (err) {
 801d446:	4603      	mov	r3, r0
 801d448:	2800      	cmp	r0, #0
 801d44a:	d0e3      	beq.n	801d414 <lfs_file_flush+0x9c>
 801d44c:	e013      	b.n	801d476 <lfs_file_flush+0xfe>
            file->pos = lfs_max(file->pos, file->ctz.size);
 801d44e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    return (a > b) ? a : b;
 801d450:	42b3      	cmp	r3, r6
 801d452:	bf38      	it	cc
 801d454:	4633      	movcc	r3, r6
 801d456:	6363      	str	r3, [r4, #52]	@ 0x34
        file->ctz.head = file->block;
 801d458:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801d45a:	62a3      	str	r3, [r4, #40]	@ 0x28
        file->ctz.size = file->pos;
 801d45c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d45e:	62e3      	str	r3, [r4, #44]	@ 0x2c
        file->flags &= ~LFS_F_WRITING;
 801d460:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d462:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 801d466:	6323      	str	r3, [r4, #48]	@ 0x30
        file->flags |= LFS_F_DIRTY;
 801d468:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801d46c:	6323      	str	r3, [r4, #48]	@ 0x30
        file->pos = pos;
 801d46e:	6366      	str	r6, [r4, #52]	@ 0x34
    return 0;
 801d470:	2300      	movs	r3, #0
 801d472:	e000      	b.n	801d476 <lfs_file_flush+0xfe>
 801d474:	2300      	movs	r3, #0
}
 801d476:	4618      	mov	r0, r3
 801d478:	b018      	add	sp, #96	@ 0x60
 801d47a:	bd70      	pop	{r4, r5, r6, pc}
 801d47c:	080373ac 	.word	0x080373ac
 801d480:	080398c4 	.word	0x080398c4
 801d484:	08039adc 	.word	0x08039adc

0801d488 <lfs_file_read_>:
        void *buffer, lfs_size_t size) {
 801d488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d48a:	461f      	mov	r7, r3
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 801d48c:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801d48e:	f013 0f01 	tst.w	r3, #1
 801d492:	d00f      	beq.n	801d4b4 <lfs_file_read_+0x2c>
 801d494:	4605      	mov	r5, r0
 801d496:	460c      	mov	r4, r1
 801d498:	4616      	mov	r6, r2
    if (file->flags & LFS_F_WRITING) {
 801d49a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801d49e:	d002      	beq.n	801d4a6 <lfs_file_read_+0x1e>
        int err = lfs_file_flush(lfs, file);
 801d4a0:	f7ff ff6a 	bl	801d378 <lfs_file_flush>
        if (err) {
 801d4a4:	b928      	cbnz	r0, 801d4b2 <lfs_file_read_+0x2a>
    return lfs_file_flushedread(lfs, file, buffer, size);
 801d4a6:	463b      	mov	r3, r7
 801d4a8:	4632      	mov	r2, r6
 801d4aa:	4621      	mov	r1, r4
 801d4ac:	4628      	mov	r0, r5
 801d4ae:	f7ff f807 	bl	801c4c0 <lfs_file_flushedread>
}
 801d4b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 801d4b4:	4b03      	ldr	r3, [pc, #12]	@ (801d4c4 <lfs_file_read_+0x3c>)
 801d4b6:	4a04      	ldr	r2, [pc, #16]	@ (801d4c8 <lfs_file_read_+0x40>)
 801d4b8:	f640 51bf 	movw	r1, #3519	@ 0xdbf
 801d4bc:	4803      	ldr	r0, [pc, #12]	@ (801d4cc <lfs_file_read_+0x44>)
 801d4be:	f00d f87d 	bl	802a5bc <__assert_func>
 801d4c2:	bf00      	nop
 801d4c4:	08039b00 	.word	0x08039b00
 801d4c8:	0803a538 	.word	0x0803a538
 801d4cc:	080398c4 	.word	0x080398c4

0801d4d0 <lfs_file_seek_>:
        lfs_soff_t off, int whence) {
 801d4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d4d2:	b083      	sub	sp, #12
 801d4d4:	4606      	mov	r6, r0
 801d4d6:	460d      	mov	r5, r1
 801d4d8:	4614      	mov	r4, r2
    lfs_off_t npos = file->pos;
 801d4da:	6b4f      	ldr	r7, [r1, #52]	@ 0x34
    if (whence == LFS_SEEK_SET) {
 801d4dc:	b123      	cbz	r3, 801d4e8 <lfs_file_seek_+0x18>
    } else if (whence == LFS_SEEK_CUR) {
 801d4de:	2b01      	cmp	r3, #1
 801d4e0:	d021      	beq.n	801d526 <lfs_file_seek_+0x56>
    } else if (whence == LFS_SEEK_END) {
 801d4e2:	2b02      	cmp	r3, #2
 801d4e4:	d023      	beq.n	801d52e <lfs_file_seek_+0x5e>
    lfs_off_t npos = file->pos;
 801d4e6:	463c      	mov	r4, r7
    if (npos > lfs->file_max) {
 801d4e8:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 801d4ea:	42a3      	cmp	r3, r4
 801d4ec:	d339      	bcc.n	801d562 <lfs_file_seek_+0x92>
    if (file->pos == npos) {
 801d4ee:	42bc      	cmp	r4, r7
 801d4f0:	d023      	beq.n	801d53a <lfs_file_seek_+0x6a>
        !(file->flags & LFS_F_WRITING)
 801d4f2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    if (
 801d4f4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801d4f8:	d10c      	bne.n	801d514 <lfs_file_seek_+0x44>
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 801d4fa:	9701      	str	r7, [sp, #4]
 801d4fc:	a901      	add	r1, sp, #4
 801d4fe:	4630      	mov	r0, r6
 801d500:	f7fe f9c4 	bl	801b88c <lfs_ctz_index>
 801d504:	4607      	mov	r7, r0
        lfs_off_t noff = npos;
 801d506:	9400      	str	r4, [sp, #0]
        int nindex = lfs_ctz_index(lfs, &noff);
 801d508:	4669      	mov	r1, sp
 801d50a:	4630      	mov	r0, r6
 801d50c:	f7fe f9be 	bl	801b88c <lfs_ctz_index>
        if (oindex == nindex
 801d510:	4287      	cmp	r7, r0
 801d512:	d014      	beq.n	801d53e <lfs_file_seek_+0x6e>
    int err = lfs_file_flush(lfs, file);
 801d514:	4629      	mov	r1, r5
 801d516:	4630      	mov	r0, r6
 801d518:	f7ff ff2e 	bl	801d378 <lfs_file_flush>
    if (err) {
 801d51c:	b908      	cbnz	r0, 801d522 <lfs_file_seek_+0x52>
    file->pos = npos;
 801d51e:	636c      	str	r4, [r5, #52]	@ 0x34
    return npos;
 801d520:	4620      	mov	r0, r4
}
 801d522:	b003      	add	sp, #12
 801d524:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((lfs_soff_t)file->pos + off < 0) {
 801d526:	42e7      	cmn	r7, r4
 801d528:	d415      	bmi.n	801d556 <lfs_file_seek_+0x86>
            npos = file->pos + off;
 801d52a:	443c      	add	r4, r7
 801d52c:	e7dc      	b.n	801d4e8 <lfs_file_seek_+0x18>
        lfs_soff_t res = lfs_file_size_(lfs, file) + off;
 801d52e:	f7fe f90e 	bl	801b74e <lfs_file_size_>
        if (res < 0) {
 801d532:	1900      	adds	r0, r0, r4
 801d534:	d412      	bmi.n	801d55c <lfs_file_seek_+0x8c>
            npos = res;
 801d536:	4604      	mov	r4, r0
 801d538:	e7d6      	b.n	801d4e8 <lfs_file_seek_+0x18>
        return npos;
 801d53a:	4620      	mov	r0, r4
 801d53c:	e7f1      	b.n	801d522 <lfs_file_seek_+0x52>
                && noff >= file->cache.off
 801d53e:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 801d540:	9a00      	ldr	r2, [sp, #0]
 801d542:	4293      	cmp	r3, r2
 801d544:	d8e6      	bhi.n	801d514 <lfs_file_seek_+0x44>
                && noff < file->cache.off + file->cache.size) {
 801d546:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 801d548:	440b      	add	r3, r1
 801d54a:	429a      	cmp	r2, r3
 801d54c:	d2e2      	bcs.n	801d514 <lfs_file_seek_+0x44>
            file->pos = npos;
 801d54e:	636c      	str	r4, [r5, #52]	@ 0x34
            file->off = noff;
 801d550:	63ea      	str	r2, [r5, #60]	@ 0x3c
            return npos;
 801d552:	4620      	mov	r0, r4
 801d554:	e7e5      	b.n	801d522 <lfs_file_seek_+0x52>
            return LFS_ERR_INVAL;
 801d556:	f06f 0015 	mvn.w	r0, #21
 801d55a:	e7e2      	b.n	801d522 <lfs_file_seek_+0x52>
            return LFS_ERR_INVAL;
 801d55c:	f06f 0015 	mvn.w	r0, #21
 801d560:	e7df      	b.n	801d522 <lfs_file_seek_+0x52>
        return LFS_ERR_INVAL;
 801d562:	f06f 0015 	mvn.w	r0, #21
 801d566:	e7dc      	b.n	801d522 <lfs_file_seek_+0x52>

0801d568 <lfs_file_write_>:
        const void *buffer, lfs_size_t size) {
 801d568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d56c:	b082      	sub	sp, #8
 801d56e:	461f      	mov	r7, r3
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 801d570:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801d572:	f013 0f02 	tst.w	r3, #2
 801d576:	d02a      	beq.n	801d5ce <lfs_file_write_+0x66>
 801d578:	4605      	mov	r5, r0
 801d57a:	460c      	mov	r4, r1
 801d57c:	4690      	mov	r8, r2
    if (file->flags & LFS_F_READING) {
 801d57e:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 801d582:	d12b      	bne.n	801d5dc <lfs_file_write_+0x74>
    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 801d584:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d586:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 801d58a:	d004      	beq.n	801d596 <lfs_file_write_+0x2e>
 801d58c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d58e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801d590:	4291      	cmp	r1, r2
 801d592:	d200      	bcs.n	801d596 <lfs_file_write_+0x2e>
        file->pos = file->ctz.size;
 801d594:	6362      	str	r2, [r4, #52]	@ 0x34
    if (file->pos + size > lfs->file_max) {
 801d596:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 801d598:	19f1      	adds	r1, r6, r7
 801d59a:	6f6a      	ldr	r2, [r5, #116]	@ 0x74
 801d59c:	4291      	cmp	r1, r2
 801d59e:	d831      	bhi.n	801d604 <lfs_file_write_+0x9c>
    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 801d5a0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801d5a4:	d11f      	bne.n	801d5e6 <lfs_file_write_+0x7e>
 801d5a6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801d5a8:	429e      	cmp	r6, r3
 801d5aa:	d91c      	bls.n	801d5e6 <lfs_file_write_+0x7e>
        file->pos = file->ctz.size;
 801d5ac:	6363      	str	r3, [r4, #52]	@ 0x34
        while (file->pos < pos) {
 801d5ae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d5b0:	428e      	cmp	r6, r1
 801d5b2:	d918      	bls.n	801d5e6 <lfs_file_write_+0x7e>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 801d5b4:	2300      	movs	r3, #0
 801d5b6:	f88d 3007 	strb.w	r3, [sp, #7]
 801d5ba:	2301      	movs	r3, #1
 801d5bc:	f10d 0207 	add.w	r2, sp, #7
 801d5c0:	4621      	mov	r1, r4
 801d5c2:	4628      	mov	r0, r5
 801d5c4:	f7ff fe28 	bl	801d218 <lfs_file_flushedwrite>
            if (res < 0) {
 801d5c8:	2800      	cmp	r0, #0
 801d5ca:	daf0      	bge.n	801d5ae <lfs_file_write_+0x46>
 801d5cc:	e017      	b.n	801d5fe <lfs_file_write_+0x96>
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 801d5ce:	4b0f      	ldr	r3, [pc, #60]	@ (801d60c <lfs_file_write_+0xa4>)
 801d5d0:	4a0f      	ldr	r2, [pc, #60]	@ (801d610 <lfs_file_write_+0xa8>)
 801d5d2:	f640 6126 	movw	r1, #3622	@ 0xe26
 801d5d6:	480f      	ldr	r0, [pc, #60]	@ (801d614 <lfs_file_write_+0xac>)
 801d5d8:	f00c fff0 	bl	802a5bc <__assert_func>
        int err = lfs_file_flush(lfs, file);
 801d5dc:	f7ff fecc 	bl	801d378 <lfs_file_flush>
        if (err) {
 801d5e0:	2800      	cmp	r0, #0
 801d5e2:	d0cf      	beq.n	801d584 <lfs_file_write_+0x1c>
 801d5e4:	e00b      	b.n	801d5fe <lfs_file_write_+0x96>
    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 801d5e6:	463b      	mov	r3, r7
 801d5e8:	4642      	mov	r2, r8
 801d5ea:	4621      	mov	r1, r4
 801d5ec:	4628      	mov	r0, r5
 801d5ee:	f7ff fe13 	bl	801d218 <lfs_file_flushedwrite>
    if (nsize < 0) {
 801d5f2:	2800      	cmp	r0, #0
 801d5f4:	db03      	blt.n	801d5fe <lfs_file_write_+0x96>
    file->flags &= ~LFS_F_ERRED;
 801d5f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d5f8:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 801d5fc:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801d5fe:	b002      	add	sp, #8
 801d600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LFS_ERR_FBIG;
 801d604:	f06f 001a 	mvn.w	r0, #26
 801d608:	e7f9      	b.n	801d5fe <lfs_file_write_+0x96>
 801d60a:	bf00      	nop
 801d60c:	08039b30 	.word	0x08039b30
 801d610:	0803a518 	.word	0x0803a518
 801d614:	080398c4 	.word	0x080398c4

0801d618 <lfs_fs_size_>:

static lfs_ssize_t lfs_fs_size_(lfs_t *lfs) {
 801d618:	b500      	push	{lr}
 801d61a:	b083      	sub	sp, #12
    lfs_size_t size = 0;
 801d61c:	2300      	movs	r3, #0
 801d61e:	9301      	str	r3, [sp, #4]
    int err = lfs_fs_traverse_(lfs, lfs_fs_size_count, &size, false);
 801d620:	aa01      	add	r2, sp, #4
 801d622:	4904      	ldr	r1, [pc, #16]	@ (801d634 <lfs_fs_size_+0x1c>)
 801d624:	f7ff faf0 	bl	801cc08 <lfs_fs_traverse_>
    if (err) {
 801d628:	b900      	cbnz	r0, 801d62c <lfs_fs_size_+0x14>
        return err;
    }

    return size;
 801d62a:	9801      	ldr	r0, [sp, #4]
}
 801d62c:	b003      	add	sp, #12
 801d62e:	f85d fb04 	ldr.w	pc, [sp], #4
 801d632:	bf00      	nop
 801d634:	0801b7c9 	.word	0x0801b7c9

0801d638 <lfs_fs_pred>:
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 801d638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d63c:	b082      	sub	sp, #8
 801d63e:	4680      	mov	r8, r0
 801d640:	460e      	mov	r6, r1
 801d642:	4614      	mov	r4, r2
    pdir->tail[0] = 0;
 801d644:	2300      	movs	r3, #0
 801d646:	6193      	str	r3, [r2, #24]
    pdir->tail[1] = 1;
 801d648:	2501      	movs	r5, #1
 801d64a:	61d5      	str	r5, [r2, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801d64c:	4b27      	ldr	r3, [pc, #156]	@ (801d6ec <lfs_fs_pred+0xb4>)
 801d64e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d652:	ab02      	add	r3, sp, #8
 801d654:	e903 0003 	stmdb	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801d658:	46a9      	mov	r9, r5
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801d65a:	69a7      	ldr	r7, [r4, #24]
 801d65c:	f1b7 3fff 	cmp.w	r7, #4294967295	@ 0xffffffff
 801d660:	d035      	beq.n	801d6ce <lfs_fs_pred+0x96>
 801d662:	69e3      	ldr	r3, [r4, #28]
 801d664:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801d668:	d02f      	beq.n	801d6ca <lfs_fs_pred+0x92>
 801d66a:	2300      	movs	r3, #0
    while (!lfs_pair_isnull(pdir->tail)) {
 801d66c:	bb8b      	cbnz	r3, 801d6d2 <lfs_fs_pred+0x9a>
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 801d66e:	f104 0a18 	add.w	sl, r4, #24
 801d672:	4669      	mov	r1, sp
 801d674:	4650      	mov	r0, sl
 801d676:	f7fd ff61 	bl	801b53c <lfs_pair_issync>
 801d67a:	b9a8      	cbnz	r0, 801d6a8 <lfs_fs_pred+0x70>
        if (tortoise_i == tortoise_period) {
 801d67c:	454d      	cmp	r5, r9
 801d67e:	d01d      	beq.n	801d6bc <lfs_fs_pred+0x84>
        tortoise_i += 1;
 801d680:	3501      	adds	r5, #1
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801d682:	6833      	ldr	r3, [r6, #0]
 801d684:	42bb      	cmp	r3, r7
 801d686:	d027      	beq.n	801d6d8 <lfs_fs_pred+0xa0>
 801d688:	69e1      	ldr	r1, [r4, #28]
 801d68a:	6872      	ldr	r2, [r6, #4]
 801d68c:	4291      	cmp	r1, r2
 801d68e:	d027      	beq.n	801d6e0 <lfs_fs_pred+0xa8>
 801d690:	42ba      	cmp	r2, r7
 801d692:	d027      	beq.n	801d6e4 <lfs_fs_pred+0xac>
 801d694:	4299      	cmp	r1, r3
 801d696:	d027      	beq.n	801d6e8 <lfs_fs_pred+0xb0>
        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 801d698:	4652      	mov	r2, sl
 801d69a:	4621      	mov	r1, r4
 801d69c:	4640      	mov	r0, r8
 801d69e:	f7ff faa5 	bl	801cbec <lfs_dir_fetch>
        if (err) {
 801d6a2:	2800      	cmp	r0, #0
 801d6a4:	d0d9      	beq.n	801d65a <lfs_fs_pred+0x22>
 801d6a6:	e018      	b.n	801d6da <lfs_fs_pred+0xa2>
            LFS_WARN("Cycle detected in tail list");
 801d6a8:	4b11      	ldr	r3, [pc, #68]	@ (801d6f0 <lfs_fs_pred+0xb8>)
 801d6aa:	f44f 5294 	mov.w	r2, #4736	@ 0x1280
 801d6ae:	4911      	ldr	r1, [pc, #68]	@ (801d6f4 <lfs_fs_pred+0xbc>)
 801d6b0:	4811      	ldr	r0, [pc, #68]	@ (801d6f8 <lfs_fs_pred+0xc0>)
 801d6b2:	f00c ffb7 	bl	802a624 <printf>
            return LFS_ERR_CORRUPT;
 801d6b6:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801d6ba:	e00e      	b.n	801d6da <lfs_fs_pred+0xa2>
            tortoise[0] = pdir->tail[0];
 801d6bc:	9700      	str	r7, [sp, #0]
            tortoise[1] = pdir->tail[1];
 801d6be:	69e3      	ldr	r3, [r4, #28]
 801d6c0:	9301      	str	r3, [sp, #4]
            tortoise_period *= 2;
 801d6c2:	ea4f 0949 	mov.w	r9, r9, lsl #1
            tortoise_i = 0;
 801d6c6:	2500      	movs	r5, #0
 801d6c8:	e7da      	b.n	801d680 <lfs_fs_pred+0x48>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801d6ca:	2301      	movs	r3, #1
 801d6cc:	e7ce      	b.n	801d66c <lfs_fs_pred+0x34>
 801d6ce:	2301      	movs	r3, #1
 801d6d0:	e7cc      	b.n	801d66c <lfs_fs_pred+0x34>
    return LFS_ERR_NOENT;
 801d6d2:	f06f 0001 	mvn.w	r0, #1
 801d6d6:	e000      	b.n	801d6da <lfs_fs_pred+0xa2>
            return 0;
 801d6d8:	2000      	movs	r0, #0
}
 801d6da:	b002      	add	sp, #8
 801d6dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return 0;
 801d6e0:	2000      	movs	r0, #0
 801d6e2:	e7fa      	b.n	801d6da <lfs_fs_pred+0xa2>
 801d6e4:	2000      	movs	r0, #0
 801d6e6:	e7f8      	b.n	801d6da <lfs_fs_pred+0xa2>
 801d6e8:	2000      	movs	r0, #0
 801d6ea:	e7f6      	b.n	801d6da <lfs_fs_pred+0xa2>
 801d6ec:	080363a4 	.word	0x080363a4
 801d6f0:	080373ac 	.word	0x080373ac
 801d6f4:	080398c4 	.word	0x080398c4
 801d6f8:	08039a84 	.word	0x08039a84

0801d6fc <lfs_dir_commitprog>:
        const void *buffer, lfs_size_t size) {
 801d6fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d6fe:	b085      	sub	sp, #20
 801d700:	460c      	mov	r4, r1
 801d702:	4616      	mov	r6, r2
 801d704:	461d      	mov	r5, r3
    int err = lfs_bd_prog(lfs,
 801d706:	9303      	str	r3, [sp, #12]
 801d708:	9202      	str	r2, [sp, #8]
 801d70a:	684b      	ldr	r3, [r1, #4]
 801d70c:	9301      	str	r3, [sp, #4]
 801d70e:	680b      	ldr	r3, [r1, #0]
 801d710:	9300      	str	r3, [sp, #0]
 801d712:	2300      	movs	r3, #0
 801d714:	4602      	mov	r2, r0
 801d716:	f100 0110 	add.w	r1, r0, #16
 801d71a:	f7fe fdd1 	bl	801c2c0 <lfs_bd_prog>
    if (err) {
 801d71e:	4607      	mov	r7, r0
 801d720:	b110      	cbz	r0, 801d728 <lfs_dir_commitprog+0x2c>
}
 801d722:	4638      	mov	r0, r7
 801d724:	b005      	add	sp, #20
 801d726:	bdf0      	pop	{r4, r5, r6, r7, pc}
    commit->crc = lfs_crc(commit->crc, buffer, size);
 801d728:	462a      	mov	r2, r5
 801d72a:	4631      	mov	r1, r6
 801d72c:	68e0      	ldr	r0, [r4, #12]
 801d72e:	f002 fcdf 	bl	80200f0 <lfs_crc>
 801d732:	60e0      	str	r0, [r4, #12]
    commit->off += size;
 801d734:	6863      	ldr	r3, [r4, #4]
 801d736:	442b      	add	r3, r5
 801d738:	6063      	str	r3, [r4, #4]
    return 0;
 801d73a:	e7f2      	b.n	801d722 <lfs_dir_commitprog+0x26>

0801d73c <lfs_dir_commitattr>:
        lfs_tag_t tag, const void *buffer) {
 801d73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d740:	b087      	sub	sp, #28
 801d742:	4614      	mov	r4, r2
 801d744:	461f      	mov	r7, r3
    return ((int32_t)(tag << 22) >> 22) == -1;
 801d746:	f342 0309 	sbfx	r3, r2, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801d74a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801d74e:	bf14      	ite	ne
 801d750:	4690      	movne	r8, r2
 801d752:	f102 0801 	addeq.w	r8, r2, #1
    return tag & 0x000003ff;
 801d756:	f3c8 0809 	ubfx	r8, r8, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801d75a:	f108 0904 	add.w	r9, r8, #4
    if (commit->off + dsize > commit->end) {
 801d75e:	684b      	ldr	r3, [r1, #4]
 801d760:	444b      	add	r3, r9
 801d762:	694a      	ldr	r2, [r1, #20]
 801d764:	4293      	cmp	r3, r2
 801d766:	d841      	bhi.n	801d7ec <lfs_dir_commitattr+0xb0>
 801d768:	4605      	mov	r5, r0
 801d76a:	460e      	mov	r6, r1
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 801d76c:	f024 4b00 	bic.w	fp, r4, #2147483648	@ 0x80000000
 801d770:	688b      	ldr	r3, [r1, #8]
 801d772:	ea8b 0303 	eor.w	r3, fp, r3
    return __builtin_bswap32(a);
 801d776:	ba1b      	rev	r3, r3
 801d778:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 801d77a:	2304      	movs	r3, #4
 801d77c:	aa05      	add	r2, sp, #20
 801d77e:	f7ff ffbd 	bl	801d6fc <lfs_dir_commitprog>
    if (err) {
 801d782:	4682      	mov	sl, r0
 801d784:	bb60      	cbnz	r0, 801d7e0 <lfs_dir_commitattr+0xa4>
    if (!(tag & 0x80000000)) {
 801d786:	2c00      	cmp	r4, #0
 801d788:	da21      	bge.n	801d7ce <lfs_dir_commitattr+0x92>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 801d78a:	2400      	movs	r4, #0
 801d78c:	4544      	cmp	r4, r8
 801d78e:	d225      	bcs.n	801d7dc <lfs_dir_commitattr+0xa0>
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 801d790:	eba9 0304 	sub.w	r3, r9, r4
                    disk->block, disk->off+i, &dat, 1);
 801d794:	6839      	ldr	r1, [r7, #0]
 801d796:	687a      	ldr	r2, [r7, #4]
            err = lfs_bd_read(lfs,
 801d798:	2001      	movs	r0, #1
 801d79a:	9003      	str	r0, [sp, #12]
 801d79c:	f10d 0013 	add.w	r0, sp, #19
 801d7a0:	9002      	str	r0, [sp, #8]
 801d7a2:	4422      	add	r2, r4
 801d7a4:	9201      	str	r2, [sp, #4]
 801d7a6:	9100      	str	r1, [sp, #0]
 801d7a8:	3b04      	subs	r3, #4
 801d7aa:	462a      	mov	r2, r5
 801d7ac:	2100      	movs	r1, #0
 801d7ae:	4628      	mov	r0, r5
 801d7b0:	f7fe f88a 	bl	801b8c8 <lfs_bd_read>
            if (err) {
 801d7b4:	4603      	mov	r3, r0
 801d7b6:	b9b8      	cbnz	r0, 801d7e8 <lfs_dir_commitattr+0xac>
            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 801d7b8:	2301      	movs	r3, #1
 801d7ba:	f10d 0213 	add.w	r2, sp, #19
 801d7be:	4631      	mov	r1, r6
 801d7c0:	4628      	mov	r0, r5
 801d7c2:	f7ff ff9b 	bl	801d6fc <lfs_dir_commitprog>
            if (err) {
 801d7c6:	4603      	mov	r3, r0
 801d7c8:	b970      	cbnz	r0, 801d7e8 <lfs_dir_commitattr+0xac>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 801d7ca:	3401      	adds	r4, #1
 801d7cc:	e7de      	b.n	801d78c <lfs_dir_commitattr+0x50>
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 801d7ce:	4643      	mov	r3, r8
 801d7d0:	463a      	mov	r2, r7
 801d7d2:	4631      	mov	r1, r6
 801d7d4:	4628      	mov	r0, r5
 801d7d6:	f7ff ff91 	bl	801d6fc <lfs_dir_commitprog>
        if (err) {
 801d7da:	b950      	cbnz	r0, 801d7f2 <lfs_dir_commitattr+0xb6>
    commit->ptag = tag & 0x7fffffff;
 801d7dc:	f8c6 b008 	str.w	fp, [r6, #8]
}
 801d7e0:	4650      	mov	r0, sl
 801d7e2:	b007      	add	sp, #28
 801d7e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                return err;
 801d7e8:	469a      	mov	sl, r3
 801d7ea:	e7f9      	b.n	801d7e0 <lfs_dir_commitattr+0xa4>
        return LFS_ERR_NOSPC;
 801d7ec:	f06f 0a1b 	mvn.w	sl, #27
 801d7f0:	e7f6      	b.n	801d7e0 <lfs_dir_commitattr+0xa4>
            return err;
 801d7f2:	4682      	mov	sl, r0
 801d7f4:	e7f4      	b.n	801d7e0 <lfs_dir_commitattr+0xa4>

0801d7f6 <lfs_dir_commit_commit>:
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 801d7f6:	b508      	push	{r3, lr}
 801d7f8:	4613      	mov	r3, r2
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 801d7fa:	460a      	mov	r2, r1
 801d7fc:	6841      	ldr	r1, [r0, #4]
 801d7fe:	6800      	ldr	r0, [r0, #0]
 801d800:	f7ff ff9c 	bl	801d73c <lfs_dir_commitattr>
}
 801d804:	bd08      	pop	{r3, pc}
	...

0801d808 <lfs_dir_commitcrc>:
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 801d808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d80c:	b08b      	sub	sp, #44	@ 0x2c
 801d80e:	4607      	mov	r7, r0
 801d810:	460e      	mov	r6, r1
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 801d812:	684b      	ldr	r3, [r1, #4]
    const lfs_off_t end = lfs_alignup(
 801d814:	3314      	adds	r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 801d816:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 801d818:	6a51      	ldr	r1, [r2, #36]	@ 0x24
            lfs->cfg->prog_size);
 801d81a:	6a12      	ldr	r2, [r2, #32]
    return lfs_aligndown(a + alignment-1, alignment);
 801d81c:	428b      	cmp	r3, r1
 801d81e:	bf94      	ite	ls
 801d820:	eb02 0803 	addls.w	r8, r2, r3
 801d824:	eb02 0801 	addhi.w	r8, r2, r1
 801d828:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
    return a - (a % alignment);
 801d82c:	fbb8 f3f2 	udiv	r3, r8, r2
 801d830:	fb02 8313 	mls	r3, r2, r3, r8
 801d834:	eba8 0803 	sub.w	r8, r8, r3
    uint32_t crc1 = 0;
 801d838:	2300      	movs	r3, #0
 801d83a:	9305      	str	r3, [sp, #20]
    lfs_off_t off1 = 0;
 801d83c:	469b      	mov	fp, r3
    while (commit->off < end) {
 801d83e:	e03c      	b.n	801d8ba <lfs_dir_commitcrc+0xb2>
            int err = lfs_bd_read(lfs,
 801d840:	2201      	movs	r2, #1
 801d842:	9203      	str	r2, [sp, #12]
 801d844:	f10d 021b 	add.w	r2, sp, #27
 801d848:	9202      	str	r2, [sp, #8]
 801d84a:	9401      	str	r4, [sp, #4]
 801d84c:	6832      	ldr	r2, [r6, #0]
 801d84e:	9200      	str	r2, [sp, #0]
 801d850:	463a      	mov	r2, r7
 801d852:	2100      	movs	r1, #0
 801d854:	4638      	mov	r0, r7
 801d856:	f7fe f837 	bl	801b8c8 <lfs_bd_read>
            if (err && err != LFS_ERR_CORRUPT) {
 801d85a:	4603      	mov	r3, r0
 801d85c:	b118      	cbz	r0, 801d866 <lfs_dir_commitcrc+0x5e>
 801d85e:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d862:	f040 80c0 	bne.w	801d9e6 <lfs_dir_commitcrc+0x1de>
                    .size = lfs->cfg->prog_size,
 801d866:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801d868:	6a1b      	ldr	r3, [r3, #32]
                struct lfs_fcrc fcrc = {
 801d86a:	9307      	str	r3, [sp, #28]
 801d86c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d870:	9208      	str	r2, [sp, #32]
                err = lfs_bd_crc(lfs,
 801d872:	aa08      	add	r2, sp, #32
 801d874:	9203      	str	r2, [sp, #12]
 801d876:	9302      	str	r3, [sp, #8]
 801d878:	9401      	str	r4, [sp, #4]
 801d87a:	6832      	ldr	r2, [r6, #0]
 801d87c:	9200      	str	r2, [sp, #0]
 801d87e:	463a      	mov	r2, r7
 801d880:	2100      	movs	r1, #0
 801d882:	4638      	mov	r0, r7
 801d884:	f7fe fea0 	bl	801c5c8 <lfs_bd_crc>
                if (err && err != LFS_ERR_CORRUPT) {
 801d888:	4603      	mov	r3, r0
 801d88a:	b118      	cbz	r0, 801d894 <lfs_dir_commitcrc+0x8c>
 801d88c:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d890:	f040 80a9 	bne.w	801d9e6 <lfs_dir_commitcrc+0x1de>
                err = lfs_dir_commitattr(lfs, commit,
 801d894:	ab07      	add	r3, sp, #28
 801d896:	4a59      	ldr	r2, [pc, #356]	@ (801d9fc <lfs_dir_commitcrc+0x1f4>)
 801d898:	4631      	mov	r1, r6
 801d89a:	4638      	mov	r0, r7
 801d89c:	f7ff ff4e 	bl	801d73c <lfs_dir_commitattr>
                if (err) {
 801d8a0:	4603      	mov	r3, r0
 801d8a2:	b348      	cbz	r0, 801d8f8 <lfs_dir_commitcrc+0xf0>
 801d8a4:	e09f      	b.n	801d9e6 <lfs_dir_commitcrc+0x1de>
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 801d8a6:	2300      	movs	r3, #0
 801d8a8:	463a      	mov	r2, r7
 801d8aa:	4651      	mov	r1, sl
 801d8ac:	4638      	mov	r0, r7
 801d8ae:	f7fe fd81 	bl	801c3b4 <lfs_bd_sync>
            if (err) {
 801d8b2:	4603      	mov	r3, r0
 801d8b4:	2800      	cmp	r0, #0
 801d8b6:	f040 8096 	bne.w	801d9e6 <lfs_dir_commitcrc+0x1de>
    while (commit->off < end) {
 801d8ba:	6874      	ldr	r4, [r6, #4]
 801d8bc:	4544      	cmp	r4, r8
 801d8be:	d268      	bcs.n	801d992 <lfs_dir_commitcrc+0x18a>
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 801d8c0:	eba8 0304 	sub.w	r3, r8, r4
 801d8c4:	3b04      	subs	r3, #4
                + (commit->off+sizeof(lfs_tag_t)));
 801d8c6:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 801d8ca:	4293      	cmp	r3, r2
 801d8cc:	bf94      	ite	ls
 801d8ce:	18e4      	addls	r4, r4, r3
 801d8d0:	18a4      	addhi	r4, r4, r2
        lfs_off_t noff = (
 801d8d2:	3404      	adds	r4, #4
        if (noff < end) {
 801d8d4:	4544      	cmp	r4, r8
 801d8d6:	d204      	bcs.n	801d8e2 <lfs_dir_commitcrc+0xda>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 801d8d8:	f1a8 0314 	sub.w	r3, r8, #20
    return (a < b) ? a : b;
 801d8dc:	429c      	cmp	r4, r3
 801d8de:	bf28      	it	cs
 801d8e0:	461c      	movcs	r4, r3
        uint8_t eperturb = (uint8_t)-1;
 801d8e2:	23ff      	movs	r3, #255	@ 0xff
 801d8e4:	f88d 301b 	strb.w	r3, [sp, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 801d8e8:	4544      	cmp	r4, r8
 801d8ea:	d305      	bcc.n	801d8f8 <lfs_dir_commitcrc+0xf0>
 801d8ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801d8ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801d8f0:	6a1b      	ldr	r3, [r3, #32]
 801d8f2:	1ad2      	subs	r2, r2, r3
 801d8f4:	42a2      	cmp	r2, r4
 801d8f6:	d2a3      	bcs.n	801d840 <lfs_dir_commitcrc+0x38>
        lfs_tag_t ntag = LFS_MKTAG(
 801d8f8:	f89d 201b 	ldrb.w	r2, [sp, #27]
 801d8fc:	43d2      	mvns	r2, r2
 801d8fe:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 801d902:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801d906:	6873      	ldr	r3, [r6, #4]
 801d908:	1ae5      	subs	r5, r4, r3
 801d90a:	3d04      	subs	r5, #4
 801d90c:	ea45 5502 	orr.w	r5, r5, r2, lsl #20
 801d910:	f445 257f 	orr.w	r5, r5, #1044480	@ 0xff000
 801d914:	f445 6540 	orr.w	r5, r5, #3072	@ 0xc00
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 801d918:	68b3      	ldr	r3, [r6, #8]
 801d91a:	406b      	eors	r3, r5
    return __builtin_bswap32(a);
 801d91c:	ba1b      	rev	r3, r3
 801d91e:	9307      	str	r3, [sp, #28]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 801d920:	f10d 091c 	add.w	r9, sp, #28
 801d924:	2204      	movs	r2, #4
 801d926:	4649      	mov	r1, r9
 801d928:	68f0      	ldr	r0, [r6, #12]
 801d92a:	f002 fbe1 	bl	80200f0 <lfs_crc>
 801d92e:	60f0      	str	r0, [r6, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 801d930:	9008      	str	r0, [sp, #32]
        int err = lfs_bd_prog(lfs,
 801d932:	f107 0a10 	add.w	sl, r7, #16
 801d936:	2308      	movs	r3, #8
 801d938:	9303      	str	r3, [sp, #12]
 801d93a:	f8cd 9008 	str.w	r9, [sp, #8]
 801d93e:	6873      	ldr	r3, [r6, #4]
 801d940:	9301      	str	r3, [sp, #4]
 801d942:	6833      	ldr	r3, [r6, #0]
 801d944:	9300      	str	r3, [sp, #0]
 801d946:	2300      	movs	r3, #0
 801d948:	463a      	mov	r2, r7
 801d94a:	4651      	mov	r1, sl
 801d94c:	4638      	mov	r0, r7
 801d94e:	f7fe fcb7 	bl	801c2c0 <lfs_bd_prog>
        if (err) {
 801d952:	4603      	mov	r3, r0
 801d954:	2800      	cmp	r0, #0
 801d956:	d146      	bne.n	801d9e6 <lfs_dir_commitcrc+0x1de>
        if (off1 == 0) {
 801d958:	f1bb 0f00 	cmp.w	fp, #0
 801d95c:	d104      	bne.n	801d968 <lfs_dir_commitcrc+0x160>
            off1 = commit->off + sizeof(lfs_tag_t);
 801d95e:	6873      	ldr	r3, [r6, #4]
 801d960:	f103 0b04 	add.w	fp, r3, #4
            crc1 = commit->crc;
 801d964:	68f3      	ldr	r3, [r6, #12]
 801d966:	9305      	str	r3, [sp, #20]
        commit->off = noff;
 801d968:	6074      	str	r4, [r6, #4]
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 801d96a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801d96e:	43db      	mvns	r3, r3
 801d970:	061b      	lsls	r3, r3, #24
 801d972:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801d976:	406b      	eors	r3, r5
 801d978:	60b3      	str	r3, [r6, #8]
        commit->crc = 0xffffffff;
 801d97a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d97e:	60f3      	str	r3, [r6, #12]
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 801d980:	4544      	cmp	r4, r8
 801d982:	d290      	bcs.n	801d8a6 <lfs_dir_commitcrc+0x9e>
 801d984:	697b      	ldr	r3, [r7, #20]
 801d986:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801d988:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801d98a:	4413      	add	r3, r2
 801d98c:	42a3      	cmp	r3, r4
 801d98e:	d894      	bhi.n	801d8ba <lfs_dir_commitcrc+0xb2>
 801d990:	e789      	b.n	801d8a6 <lfs_dir_commitcrc+0x9e>
    lfs_off_t off = commit->begin;
 801d992:	6933      	ldr	r3, [r6, #16]
    uint32_t crc = 0xffffffff;
 801d994:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d998:	9209      	str	r2, [sp, #36]	@ 0x24
    int err = lfs_bd_crc(lfs,
 801d99a:	aa09      	add	r2, sp, #36	@ 0x24
 801d99c:	9203      	str	r2, [sp, #12]
 801d99e:	ebab 0203 	sub.w	r2, fp, r3
 801d9a2:	9202      	str	r2, [sp, #8]
 801d9a4:	9301      	str	r3, [sp, #4]
 801d9a6:	6833      	ldr	r3, [r6, #0]
 801d9a8:	9300      	str	r3, [sp, #0]
 801d9aa:	f10b 0304 	add.w	r3, fp, #4
 801d9ae:	463a      	mov	r2, r7
 801d9b0:	2100      	movs	r1, #0
 801d9b2:	4638      	mov	r0, r7
 801d9b4:	f7fe fe08 	bl	801c5c8 <lfs_bd_crc>
    if (err) {
 801d9b8:	4603      	mov	r3, r0
 801d9ba:	b9a0      	cbnz	r0, 801d9e6 <lfs_dir_commitcrc+0x1de>
    if (crc != crc1) {
 801d9bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d9be:	9a05      	ldr	r2, [sp, #20]
 801d9c0:	4293      	cmp	r3, r2
 801d9c2:	d114      	bne.n	801d9ee <lfs_dir_commitcrc+0x1e6>
    err = lfs_bd_crc(lfs,
 801d9c4:	ab09      	add	r3, sp, #36	@ 0x24
 801d9c6:	9303      	str	r3, [sp, #12]
 801d9c8:	2304      	movs	r3, #4
 801d9ca:	9302      	str	r3, [sp, #8]
 801d9cc:	f8cd b004 	str.w	fp, [sp, #4]
 801d9d0:	6832      	ldr	r2, [r6, #0]
 801d9d2:	9200      	str	r2, [sp, #0]
 801d9d4:	463a      	mov	r2, r7
 801d9d6:	2100      	movs	r1, #0
 801d9d8:	4638      	mov	r0, r7
 801d9da:	f7fe fdf5 	bl	801c5c8 <lfs_bd_crc>
    if (err) {
 801d9de:	4603      	mov	r3, r0
 801d9e0:	b908      	cbnz	r0, 801d9e6 <lfs_dir_commitcrc+0x1de>
    if (crc != 0) {
 801d9e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d9e4:	b932      	cbnz	r2, 801d9f4 <lfs_dir_commitcrc+0x1ec>
}
 801d9e6:	4618      	mov	r0, r3
 801d9e8:	b00b      	add	sp, #44	@ 0x2c
 801d9ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LFS_ERR_CORRUPT;
 801d9ee:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801d9f2:	e7f8      	b.n	801d9e6 <lfs_dir_commitcrc+0x1de>
        return LFS_ERR_CORRUPT;
 801d9f4:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801d9f8:	e7f5      	b.n	801d9e6 <lfs_dir_commitcrc+0x1de>
 801d9fa:	bf00      	nop
 801d9fc:	5ffffc08 	.word	0x5ffffc08

0801da00 <lfs_dir_compact>:
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 801da00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da04:	b09b      	sub	sp, #108	@ 0x6c
 801da06:	4605      	mov	r5, r0
 801da08:	460c      	mov	r4, r1
 801da0a:	4616      	mov	r6, r2
 801da0c:	461f      	mov	r7, r3
 801da0e:	f8bd 8094 	ldrh.w	r8, [sp, #148]	@ 0x94
 801da12:	f8bd a098 	ldrh.w	sl, [sp, #152]	@ 0x98
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 801da16:	f7fd fe7f 	bl	801b718 <lfs_dir_needsrelocation>
    dir->rev += 1;
 801da1a:	68a3      	ldr	r3, [r4, #8]
 801da1c:	3301      	adds	r3, #1
 801da1e:	60a3      	str	r3, [r4, #8]
    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 801da20:	4681      	mov	r9, r0
 801da22:	2800      	cmp	r0, #0
 801da24:	d034      	beq.n	801da90 <lfs_dir_compact+0x90>
 801da26:	2300      	movs	r3, #0
 801da28:	9314      	str	r3, [sp, #80]	@ 0x50
 801da2a:	2301      	movs	r3, #1
 801da2c:	9315      	str	r3, [sp, #84]	@ 0x54
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801da2e:	6823      	ldr	r3, [r4, #0]
 801da30:	b373      	cbz	r3, 801da90 <lfs_dir_compact+0x90>
 801da32:	6862      	ldr	r2, [r4, #4]
 801da34:	2a01      	cmp	r2, #1
 801da36:	d02b      	beq.n	801da90 <lfs_dir_compact+0x90>
 801da38:	2b01      	cmp	r3, #1
 801da3a:	d029      	beq.n	801da90 <lfs_dir_compact+0x90>
 801da3c:	b342      	cbz	r2, 801da90 <lfs_dir_compact+0x90>
    rcache->block = LFS_BLOCK_NULL;
 801da3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801da42:	612b      	str	r3, [r5, #16]
        if (!tired) {
 801da44:	f1b9 0f00 	cmp.w	r9, #0
 801da48:	f000 810d 	beq.w	801dc66 <lfs_dir_compact+0x266>
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 801da4c:	2300      	movs	r3, #0
 801da4e:	9318      	str	r3, [sp, #96]	@ 0x60
 801da50:	2301      	movs	r3, #1
 801da52:	9319      	str	r3, [sp, #100]	@ 0x64
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801da54:	6823      	ldr	r3, [r4, #0]
 801da56:	2b00      	cmp	r3, #0
 801da58:	f000 810f 	beq.w	801dc7a <lfs_dir_compact+0x27a>
 801da5c:	6862      	ldr	r2, [r4, #4]
 801da5e:	2a01      	cmp	r2, #1
 801da60:	f000 810b 	beq.w	801dc7a <lfs_dir_compact+0x27a>
 801da64:	2b01      	cmp	r3, #1
 801da66:	f000 8108 	beq.w	801dc7a <lfs_dir_compact+0x27a>
 801da6a:	2a00      	cmp	r2, #0
 801da6c:	f000 8105 	beq.w	801dc7a <lfs_dir_compact+0x27a>
        int err = lfs_alloc(lfs, &dir->pair[1]);
 801da70:	1d21      	adds	r1, r4, #4
 801da72:	4628      	mov	r0, r5
 801da74:	f7ff f9d0 	bl	801ce18 <lfs_alloc>
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 801da78:	4603      	mov	r3, r0
 801da7a:	b330      	cbz	r0, 801daca <lfs_dir_compact+0xca>
 801da7c:	f110 0f1c 	cmn.w	r0, #28
 801da80:	d11f      	bne.n	801dac2 <lfs_dir_compact+0xc2>
 801da82:	f1b9 0f00 	cmp.w	r9, #0
 801da86:	d01c      	beq.n	801dac2 <lfs_dir_compact+0xc2>
        relocated = true;
 801da88:	46cb      	mov	fp, r9
        tired = false;
 801da8a:	f04f 0900 	mov.w	r9, #0
 801da8e:	e001      	b.n	801da94 <lfs_dir_compact+0x94>
    bool relocated = false;
 801da90:	f04f 0b00 	mov.w	fp, #0
                .block = dir->pair[1],
 801da94:	6863      	ldr	r3, [r4, #4]
            struct lfs_commit commit = {
 801da96:	930e      	str	r3, [sp, #56]	@ 0x38
 801da98:	2300      	movs	r3, #0
 801da9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801da9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801daa0:	9210      	str	r2, [sp, #64]	@ 0x40
 801daa2:	9211      	str	r2, [sp, #68]	@ 0x44
 801daa4:	9312      	str	r3, [sp, #72]	@ 0x48
                .end = (lfs->cfg->metadata_max ?
 801daa6:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 801daa8:	6d53      	ldr	r3, [r2, #84]	@ 0x54
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801daaa:	b19b      	cbz	r3, 801dad4 <lfs_dir_compact+0xd4>
 801daac:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 801daae:	9313      	str	r3, [sp, #76]	@ 0x4c
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 801dab0:	6861      	ldr	r1, [r4, #4]
 801dab2:	4628      	mov	r0, r5
 801dab4:	f7fd fe8e 	bl	801b7d4 <lfs_bd_erase>
            if (err) {
 801dab8:	4603      	mov	r3, r0
 801daba:	b170      	cbz	r0, 801dada <lfs_dir_compact+0xda>
                if (err == LFS_ERR_CORRUPT) {
 801dabc:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801dac0:	d0bd      	beq.n	801da3e <lfs_dir_compact+0x3e>
}
 801dac2:	4618      	mov	r0, r3
 801dac4:	b01b      	add	sp, #108	@ 0x6c
 801dac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tired = false;
 801daca:	f04f 0900 	mov.w	r9, #0
        relocated = true;
 801dace:	f04f 0b01 	mov.w	fp, #1
 801dad2:	e7df      	b.n	801da94 <lfs_dir_compact+0x94>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801dad4:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 801dad6:	3b08      	subs	r3, #8
 801dad8:	e7e9      	b.n	801daae <lfs_dir_compact+0xae>
            err = lfs_dir_commitprog(lfs, &commit,
 801dada:	2304      	movs	r3, #4
 801dadc:	f104 0208 	add.w	r2, r4, #8
 801dae0:	a90e      	add	r1, sp, #56	@ 0x38
 801dae2:	4628      	mov	r0, r5
 801dae4:	f7ff fe0a 	bl	801d6fc <lfs_dir_commitprog>
            if (err) {
 801dae8:	4603      	mov	r3, r0
 801daea:	b118      	cbz	r0, 801daf4 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 801daec:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801daf0:	d1e7      	bne.n	801dac2 <lfs_dir_compact+0xc2>
 801daf2:	e7a4      	b.n	801da3e <lfs_dir_compact+0x3e>
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 801daf4:	9516      	str	r5, [sp, #88]	@ 0x58
 801daf6:	ab0e      	add	r3, sp, #56	@ 0x38
 801daf8:	9317      	str	r3, [sp, #92]	@ 0x5c
            err = lfs_dir_traverse(lfs,
 801dafa:	ab16      	add	r3, sp, #88	@ 0x58
 801dafc:	9308      	str	r3, [sp, #32]
 801dafe:	4b65      	ldr	r3, [pc, #404]	@ (801dc94 <lfs_dir_compact+0x294>)
 801db00:	9307      	str	r3, [sp, #28]
 801db02:	f1c8 0300 	rsb	r3, r8, #0
 801db06:	b21b      	sxth	r3, r3
 801db08:	9306      	str	r3, [sp, #24]
 801db0a:	f8cd a014 	str.w	sl, [sp, #20]
 801db0e:	f8cd 8010 	str.w	r8, [sp, #16]
 801db12:	2200      	movs	r2, #0
 801db14:	9203      	str	r2, [sp, #12]
 801db16:	4b60      	ldr	r3, [pc, #384]	@ (801dc98 <lfs_dir_compact+0x298>)
 801db18:	9302      	str	r3, [sp, #8]
 801db1a:	9701      	str	r7, [sp, #4]
 801db1c:	9600      	str	r6, [sp, #0]
 801db1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801db22:	9924      	ldr	r1, [sp, #144]	@ 0x90
 801db24:	4628      	mov	r0, r5
 801db26:	f7fe f911 	bl	801bd4c <lfs_dir_traverse>
            if (err) {
 801db2a:	4603      	mov	r3, r0
 801db2c:	b118      	cbz	r0, 801db36 <lfs_dir_compact+0x136>
                if (err == LFS_ERR_CORRUPT) {
 801db2e:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801db32:	d1c6      	bne.n	801dac2 <lfs_dir_compact+0xc2>
 801db34:	e783      	b.n	801da3e <lfs_dir_compact+0x3e>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801db36:	69a2      	ldr	r2, [r4, #24]
 801db38:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801db3c:	d02c      	beq.n	801db98 <lfs_dir_compact+0x198>
 801db3e:	69e2      	ldr	r2, [r4, #28]
 801db40:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801db44:	d026      	beq.n	801db94 <lfs_dir_compact+0x194>
            if (!lfs_pair_isnull(dir->tail)) {
 801db46:	f013 0f01 	tst.w	r3, #1
 801db4a:	d027      	beq.n	801db9c <lfs_dir_compact+0x19c>
            lfs_gstate_t delta = {0};
 801db4c:	2300      	movs	r3, #0
 801db4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801db50:	930c      	str	r3, [sp, #48]	@ 0x30
 801db52:	930d      	str	r3, [sp, #52]	@ 0x34
            if (!relocated) {
 801db54:	f1bb 0f00 	cmp.w	fp, #0
 801db58:	d033      	beq.n	801dbc2 <lfs_dir_compact+0x1c2>
            lfs_gstate_xor(&delta, &lfs->gdelta);
 801db5a:	f105 0148 	add.w	r1, r5, #72	@ 0x48
 801db5e:	a80b      	add	r0, sp, #44	@ 0x2c
 801db60:	f7fd fd10 	bl	801b584 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 801db64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801db66:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 801db6a:	f023 0303 	bic.w	r3, r3, #3
 801db6e:	930b      	str	r3, [sp, #44]	@ 0x2c
            err = lfs_dir_getgstate(lfs, dir, &delta);
 801db70:	aa0b      	add	r2, sp, #44	@ 0x2c
 801db72:	4621      	mov	r1, r4
 801db74:	4628      	mov	r0, r5
 801db76:	f7fe f859 	bl	801bc2c <lfs_dir_getgstate>
            if (err) {
 801db7a:	4603      	mov	r3, r0
 801db7c:	2800      	cmp	r0, #0
 801db7e:	d1a0      	bne.n	801dac2 <lfs_dir_compact+0xc2>
    for (int i = 0; i < 3; i++) {
 801db80:	2b02      	cmp	r3, #2
 801db82:	dc29      	bgt.n	801dbd8 <lfs_dir_compact+0x1d8>
        if (((uint32_t*)a)[i] != 0) {
 801db84:	aa1a      	add	r2, sp, #104	@ 0x68
 801db86:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801db8a:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 801db8e:	bb92      	cbnz	r2, 801dbf6 <lfs_dir_compact+0x1f6>
    for (int i = 0; i < 3; i++) {
 801db90:	3301      	adds	r3, #1
 801db92:	e7f5      	b.n	801db80 <lfs_dir_compact+0x180>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801db94:	2301      	movs	r3, #1
 801db96:	e7d6      	b.n	801db46 <lfs_dir_compact+0x146>
 801db98:	2301      	movs	r3, #1
 801db9a:	e7d4      	b.n	801db46 <lfs_dir_compact+0x146>
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 801db9c:	7de2      	ldrb	r2, [r4, #23]
 801db9e:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
                err = lfs_dir_commitattr(lfs, &commit,
 801dba2:	f104 0318 	add.w	r3, r4, #24
 801dba6:	493d      	ldr	r1, [pc, #244]	@ (801dc9c <lfs_dir_compact+0x29c>)
 801dba8:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
 801dbac:	a90e      	add	r1, sp, #56	@ 0x38
 801dbae:	4628      	mov	r0, r5
 801dbb0:	f7ff fdc4 	bl	801d73c <lfs_dir_commitattr>
                if (err) {
 801dbb4:	4603      	mov	r3, r0
 801dbb6:	2800      	cmp	r0, #0
 801dbb8:	d0c8      	beq.n	801db4c <lfs_dir_compact+0x14c>
                    if (err == LFS_ERR_CORRUPT) {
 801dbba:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801dbbe:	d180      	bne.n	801dac2 <lfs_dir_compact+0xc2>
 801dbc0:	e73d      	b.n	801da3e <lfs_dir_compact+0x3e>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 801dbc2:	f105 013c 	add.w	r1, r5, #60	@ 0x3c
 801dbc6:	a80b      	add	r0, sp, #44	@ 0x2c
 801dbc8:	f7fd fcdc 	bl	801b584 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 801dbcc:	f105 0130 	add.w	r1, r5, #48	@ 0x30
 801dbd0:	a80b      	add	r0, sp, #44	@ 0x2c
 801dbd2:	f7fd fcd7 	bl	801b584 <lfs_gstate_xor>
 801dbd6:	e7c0      	b.n	801db5a <lfs_dir_compact+0x15a>
    return true;
 801dbd8:	2301      	movs	r3, #1
            if (!lfs_gstate_iszero(&delta)) {
 801dbda:	b973      	cbnz	r3, 801dbfa <lfs_dir_compact+0x1fa>
                err = lfs_dir_commitattr(lfs, &commit,
 801dbdc:	ab0b      	add	r3, sp, #44	@ 0x2c
 801dbde:	4a30      	ldr	r2, [pc, #192]	@ (801dca0 <lfs_dir_compact+0x2a0>)
 801dbe0:	a90e      	add	r1, sp, #56	@ 0x38
 801dbe2:	4628      	mov	r0, r5
 801dbe4:	f7ff fdaa 	bl	801d73c <lfs_dir_commitattr>
                if (err) {
 801dbe8:	4603      	mov	r3, r0
 801dbea:	b130      	cbz	r0, 801dbfa <lfs_dir_compact+0x1fa>
                    if (err == LFS_ERR_CORRUPT) {
 801dbec:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801dbf0:	f47f af67 	bne.w	801dac2 <lfs_dir_compact+0xc2>
 801dbf4:	e723      	b.n	801da3e <lfs_dir_compact+0x3e>
            return false;
 801dbf6:	2300      	movs	r3, #0
 801dbf8:	e7ef      	b.n	801dbda <lfs_dir_compact+0x1da>
            err = lfs_dir_commitcrc(lfs, &commit);
 801dbfa:	a90e      	add	r1, sp, #56	@ 0x38
 801dbfc:	4628      	mov	r0, r5
 801dbfe:	f7ff fe03 	bl	801d808 <lfs_dir_commitcrc>
            if (err) {
 801dc02:	4603      	mov	r3, r0
 801dc04:	b120      	cbz	r0, 801dc10 <lfs_dir_compact+0x210>
                if (err == LFS_ERR_CORRUPT) {
 801dc06:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801dc0a:	f47f af5a 	bne.w	801dac2 <lfs_dir_compact+0xc2>
 801dc0e:	e716      	b.n	801da3e <lfs_dir_compact+0x3e>
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801dc10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dc12:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 801dc14:	6a12      	ldr	r2, [r2, #32]
 801dc16:	fbb3 f1f2 	udiv	r1, r3, r2
 801dc1a:	fb02 3311 	mls	r3, r2, r1, r3
 801dc1e:	b9db      	cbnz	r3, 801dc58 <lfs_dir_compact+0x258>
    lfs_block_t t = pair[0];
 801dc20:	6823      	ldr	r3, [r4, #0]
    pair[0] = pair[1];
 801dc22:	6862      	ldr	r2, [r4, #4]
 801dc24:	6022      	str	r2, [r4, #0]
    pair[1] = t;
 801dc26:	6063      	str	r3, [r4, #4]
            dir->count = end - begin;
 801dc28:	ebaa 0808 	sub.w	r8, sl, r8
 801dc2c:	f8a4 8014 	strh.w	r8, [r4, #20]
            dir->off = commit.off;
 801dc30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dc32:	60e3      	str	r3, [r4, #12]
            dir->etag = commit.ptag;
 801dc34:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801dc36:	6123      	str	r3, [r4, #16]
            lfs->gdelta = (lfs_gstate_t){0};
 801dc38:	2200      	movs	r2, #0
 801dc3a:	64aa      	str	r2, [r5, #72]	@ 0x48
 801dc3c:	64ea      	str	r2, [r5, #76]	@ 0x4c
 801dc3e:	652a      	str	r2, [r5, #80]	@ 0x50
            if (!relocated) {
 801dc40:	f1bb 0f00 	cmp.w	fp, #0
 801dc44:	d106      	bne.n	801dc54 <lfs_dir_compact+0x254>
                lfs->gdisk = lfs->gstate;
 801dc46:	f105 033c 	add.w	r3, r5, #60	@ 0x3c
 801dc4a:	3530      	adds	r5, #48	@ 0x30
 801dc4c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801dc50:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return relocated ? LFS_OK_RELOCATED : 0;
 801dc54:	465b      	mov	r3, fp
 801dc56:	e734      	b.n	801dac2 <lfs_dir_compact+0xc2>
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801dc58:	4b12      	ldr	r3, [pc, #72]	@ (801dca4 <lfs_dir_compact+0x2a4>)
 801dc5a:	4a13      	ldr	r2, [pc, #76]	@ (801dca8 <lfs_dir_compact+0x2a8>)
 801dc5c:	f640 0106 	movw	r1, #2054	@ 0x806
 801dc60:	4812      	ldr	r0, [pc, #72]	@ (801dcac <lfs_dir_compact+0x2ac>)
 801dc62:	f00c fcab 	bl	802a5bc <__assert_func>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 801dc66:	4b12      	ldr	r3, [pc, #72]	@ (801dcb0 <lfs_dir_compact+0x2b0>)
 801dc68:	9300      	str	r3, [sp, #0]
 801dc6a:	6863      	ldr	r3, [r4, #4]
 801dc6c:	f640 0218 	movw	r2, #2072	@ 0x818
 801dc70:	490e      	ldr	r1, [pc, #56]	@ (801dcac <lfs_dir_compact+0x2ac>)
 801dc72:	4810      	ldr	r0, [pc, #64]	@ (801dcb4 <lfs_dir_compact+0x2b4>)
 801dc74:	f00c fcd6 	bl	802a624 <printf>
 801dc78:	e6e8      	b.n	801da4c <lfs_dir_compact+0x4c>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 801dc7a:	4b0d      	ldr	r3, [pc, #52]	@ (801dcb0 <lfs_dir_compact+0x2b0>)
 801dc7c:	9300      	str	r3, [sp, #0]
 801dc7e:	6863      	ldr	r3, [r4, #4]
 801dc80:	f640 021d 	movw	r2, #2077	@ 0x81d
 801dc84:	4909      	ldr	r1, [pc, #36]	@ (801dcac <lfs_dir_compact+0x2ac>)
 801dc86:	480c      	ldr	r0, [pc, #48]	@ (801dcb8 <lfs_dir_compact+0x2b8>)
 801dc88:	f00c fccc 	bl	802a624 <printf>
            return LFS_ERR_NOSPC;
 801dc8c:	f06f 031b 	mvn.w	r3, #27
 801dc90:	e717      	b.n	801dac2 <lfs_dir_compact+0xc2>
 801dc92:	bf00      	nop
 801dc94:	0801d7f7 	.word	0x0801d7f7
 801dc98:	400ffc00 	.word	0x400ffc00
 801dc9c:	000ffc08 	.word	0x000ffc08
 801dca0:	7ffffc0c 	.word	0x7ffffc0c
 801dca4:	08039b60 	.word	0x08039b60
 801dca8:	0803a594 	.word	0x0803a594
 801dcac:	080398c4 	.word	0x080398c4
 801dcb0:	080373ac 	.word	0x080373ac
 801dcb4:	08039adc 	.word	0x08039adc
 801dcb8:	08039b88 	.word	0x08039b88

0801dcbc <lfs_dir_split>:
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 801dcbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801dcc0:	b08d      	sub	sp, #52	@ 0x34
 801dcc2:	4605      	mov	r5, r0
 801dcc4:	460c      	mov	r4, r1
 801dcc6:	4691      	mov	r9, r2
 801dcc8:	461e      	mov	r6, r3
 801dcca:	f8bd 8054 	ldrh.w	r8, [sp, #84]	@ 0x54
    int err = lfs_dir_alloc(lfs, &tail);
 801dcce:	a904      	add	r1, sp, #16
 801dcd0:	f7ff f8fa 	bl	801cec8 <lfs_dir_alloc>
    if (err) {
 801dcd4:	4607      	mov	r7, r0
 801dcd6:	b118      	cbz	r0, 801dce0 <lfs_dir_split+0x24>
}
 801dcd8:	4638      	mov	r0, r7
 801dcda:	b00d      	add	sp, #52	@ 0x34
 801dcdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tail.split = dir->split;
 801dce0:	7de3      	ldrb	r3, [r4, #23]
 801dce2:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
    tail.tail[0] = dir->tail[0];
 801dce6:	69a3      	ldr	r3, [r4, #24]
 801dce8:	930a      	str	r3, [sp, #40]	@ 0x28
    tail.tail[1] = dir->tail[1];
 801dcea:	69e3      	ldr	r3, [r4, #28]
 801dcec:	930b      	str	r3, [sp, #44]	@ 0x2c
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 801dcee:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 801dcf2:	9302      	str	r3, [sp, #8]
 801dcf4:	f8cd 8004 	str.w	r8, [sp, #4]
 801dcf8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801dcfa:	9300      	str	r3, [sp, #0]
 801dcfc:	4633      	mov	r3, r6
 801dcfe:	464a      	mov	r2, r9
 801dd00:	a904      	add	r1, sp, #16
 801dd02:	4628      	mov	r0, r5
 801dd04:	f7ff fe7c 	bl	801da00 <lfs_dir_compact>
    if (res < 0) {
 801dd08:	2800      	cmp	r0, #0
 801dd0a:	db17      	blt.n	801dd3c <lfs_dir_split+0x80>
    dir->tail[0] = tail.pair[0];
 801dd0c:	9904      	ldr	r1, [sp, #16]
 801dd0e:	61a1      	str	r1, [r4, #24]
    dir->tail[1] = tail.pair[1];
 801dd10:	9a05      	ldr	r2, [sp, #20]
 801dd12:	61e2      	str	r2, [r4, #28]
    dir->split = true;
 801dd14:	2301      	movs	r3, #1
 801dd16:	75e3      	strb	r3, [r4, #23]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801dd18:	6823      	ldr	r3, [r4, #0]
 801dd1a:	6a28      	ldr	r0, [r5, #32]
 801dd1c:	4283      	cmp	r3, r0
 801dd1e:	d007      	beq.n	801dd30 <lfs_dir_split+0x74>
 801dd20:	6866      	ldr	r6, [r4, #4]
 801dd22:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 801dd24:	42a6      	cmp	r6, r4
 801dd26:	d003      	beq.n	801dd30 <lfs_dir_split+0x74>
 801dd28:	42a3      	cmp	r3, r4
 801dd2a:	d001      	beq.n	801dd30 <lfs_dir_split+0x74>
 801dd2c:	42b0      	cmp	r0, r6
 801dd2e:	d1d3      	bne.n	801dcd8 <lfs_dir_split+0x1c>
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 801dd30:	f1b8 0f00 	cmp.w	r8, #0
 801dd34:	d1d0      	bne.n	801dcd8 <lfs_dir_split+0x1c>
        lfs->root[0] = tail.pair[0];
 801dd36:	6229      	str	r1, [r5, #32]
        lfs->root[1] = tail.pair[1];
 801dd38:	626a      	str	r2, [r5, #36]	@ 0x24
 801dd3a:	e7cd      	b.n	801dcd8 <lfs_dir_split+0x1c>
        return res;
 801dd3c:	4607      	mov	r7, r0
 801dd3e:	e7cb      	b.n	801dcd8 <lfs_dir_split+0x1c>

0801dd40 <lfs_dir_splittingcompact>:
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 801dd40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd44:	b091      	sub	sp, #68	@ 0x44
 801dd46:	4607      	mov	r7, r0
 801dd48:	4615      	mov	r5, r2
 801dd4a:	4699      	mov	r9, r3
 801dd4c:	f8dd a068 	ldr.w	sl, [sp, #104]	@ 0x68
 801dd50:	f8bd b06c 	ldrh.w	fp, [sp, #108]	@ 0x6c
 801dd54:	f8bd 6070 	ldrh.w	r6, [sp, #112]	@ 0x70
 801dd58:	910b      	str	r1, [sp, #44]	@ 0x2c
 801dd5a:	e04c      	b.n	801ddf6 <lfs_dir_splittingcompact+0xb6>
                    && size <= lfs_min(
 801dd5c:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 801dd5e:	6a08      	ldr	r0, [r1, #32]
    return lfs_aligndown(a + alignment-1, alignment);
 801dd60:	4403      	add	r3, r0
 801dd62:	3b01      	subs	r3, #1
    return a - (a % alignment);
 801dd64:	fbb3 f1f0 	udiv	r1, r3, r0
 801dd68:	fb00 3111 	mls	r1, r0, r1, r3
 801dd6c:	1a5b      	subs	r3, r3, r1
    return (a < b) ? a : b;
 801dd6e:	4293      	cmp	r3, r2
 801dd70:	bf28      	it	cs
 801dd72:	4613      	movcs	r3, r2
                    && size <= lfs_min(
 801dd74:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801dd76:	429a      	cmp	r2, r3
 801dd78:	d92d      	bls.n	801ddd6 <lfs_dir_splittingcompact+0x96>
            split = split + ((end - split) / 2);
 801dd7a:	eb04 0458 	add.w	r4, r4, r8, lsr #1
        while (end - split > 1) {
 801dd7e:	eba6 0804 	sub.w	r8, r6, r4
 801dd82:	f1b8 0f01 	cmp.w	r8, #1
 801dd86:	d926      	bls.n	801ddd6 <lfs_dir_splittingcompact+0x96>
            lfs_size_t size = 0;
 801dd88:	2200      	movs	r2, #0
 801dd8a:	920d      	str	r2, [sp, #52]	@ 0x34
            int err = lfs_dir_traverse(lfs,
 801dd8c:	b2a1      	uxth	r1, r4
 801dd8e:	ab0d      	add	r3, sp, #52	@ 0x34
 801dd90:	9308      	str	r3, [sp, #32]
 801dd92:	4b4d      	ldr	r3, [pc, #308]	@ (801dec8 <lfs_dir_splittingcompact+0x188>)
 801dd94:	9307      	str	r3, [sp, #28]
 801dd96:	424b      	negs	r3, r1
 801dd98:	b21b      	sxth	r3, r3
 801dd9a:	9306      	str	r3, [sp, #24]
 801dd9c:	9605      	str	r6, [sp, #20]
 801dd9e:	9104      	str	r1, [sp, #16]
 801dda0:	9203      	str	r2, [sp, #12]
 801dda2:	4b4a      	ldr	r3, [pc, #296]	@ (801decc <lfs_dir_splittingcompact+0x18c>)
 801dda4:	9302      	str	r3, [sp, #8]
 801dda6:	f8cd 9004 	str.w	r9, [sp, #4]
 801ddaa:	9500      	str	r5, [sp, #0]
 801ddac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ddb0:	4651      	mov	r1, sl
 801ddb2:	4638      	mov	r0, r7
 801ddb4:	f7fd ffca 	bl	801bd4c <lfs_dir_traverse>
            if (err) {
 801ddb8:	4603      	mov	r3, r0
 801ddba:	2800      	cmp	r0, #0
 801ddbc:	d15b      	bne.n	801de76 <lfs_dir_splittingcompact+0x136>
            if (end - split < 0xff
 801ddbe:	f1b8 0ffe 	cmp.w	r8, #254	@ 0xfe
 801ddc2:	d8da      	bhi.n	801dd7a <lfs_dir_splittingcompact+0x3a>
                        lfs->cfg->block_size - 40,
 801ddc4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801ddc6:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
                    && size <= lfs_min(
 801ddc8:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
                            (lfs->cfg->metadata_max
 801ddcc:	6d48      	ldr	r0, [r1, #84]	@ 0x54
                    && size <= lfs_min(
 801ddce:	2800      	cmp	r0, #0
 801ddd0:	d0c4      	beq.n	801dd5c <lfs_dir_splittingcompact+0x1c>
 801ddd2:	0843      	lsrs	r3, r0, #1
 801ddd4:	e7c3      	b.n	801dd5e <lfs_dir_splittingcompact+0x1e>
        if (split == begin) {
 801ddd6:	455c      	cmp	r4, fp
 801ddd8:	d022      	beq.n	801de20 <lfs_dir_splittingcompact+0xe0>
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 801ddda:	b2a4      	uxth	r4, r4
 801dddc:	9602      	str	r6, [sp, #8]
 801ddde:	9401      	str	r4, [sp, #4]
 801dde0:	f8cd a000 	str.w	sl, [sp]
 801dde4:	464b      	mov	r3, r9
 801dde6:	462a      	mov	r2, r5
 801dde8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ddea:	4638      	mov	r0, r7
 801ddec:	f7ff ff66 	bl	801dcbc <lfs_dir_split>
        if (err && err != LFS_ERR_NOSPC) {
 801ddf0:	4603      	mov	r3, r0
 801ddf2:	b910      	cbnz	r0, 801ddfa <lfs_dir_splittingcompact+0xba>
            end = split;
 801ddf4:	4626      	mov	r6, r4
        lfs_size_t split = begin;
 801ddf6:	465c      	mov	r4, fp
        while (end - split > 1) {
 801ddf8:	e7c1      	b.n	801dd7e <lfs_dir_splittingcompact+0x3e>
        if (err && err != LFS_ERR_NOSPC) {
 801ddfa:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
 801ddfe:	f110 0f1c 	cmn.w	r0, #28
 801de02:	d138      	bne.n	801de76 <lfs_dir_splittingcompact+0x136>
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 801de04:	4b32      	ldr	r3, [pc, #200]	@ (801ded0 <lfs_dir_splittingcompact+0x190>)
 801de06:	9301      	str	r3, [sp, #4]
 801de08:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801de0c:	9300      	str	r3, [sp, #0]
 801de0e:	f8d8 3000 	ldr.w	r3, [r8]
 801de12:	f44f 6207 	mov.w	r2, #2160	@ 0x870
 801de16:	492f      	ldr	r1, [pc, #188]	@ (801ded4 <lfs_dir_splittingcompact+0x194>)
 801de18:	482f      	ldr	r0, [pc, #188]	@ (801ded8 <lfs_dir_splittingcompact+0x198>)
 801de1a:	f00c fc03 	bl	802a624 <printf>
            break;
 801de1e:	e001      	b.n	801de24 <lfs_dir_splittingcompact+0xe4>
 801de20:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
    if (lfs_dir_needsrelocation(lfs, dir)
 801de24:	4641      	mov	r1, r8
 801de26:	4638      	mov	r0, r7
 801de28:	f7fd fc76 	bl	801b718 <lfs_dir_needsrelocation>
 801de2c:	b1b8      	cbz	r0, 801de5e <lfs_dir_splittingcompact+0x11e>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 801de2e:	2300      	movs	r3, #0
 801de30:	930e      	str	r3, [sp, #56]	@ 0x38
 801de32:	2301      	movs	r3, #1
 801de34:	930f      	str	r3, [sp, #60]	@ 0x3c
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801de36:	f8d8 2000 	ldr.w	r2, [r8]
 801de3a:	b132      	cbz	r2, 801de4a <lfs_dir_splittingcompact+0x10a>
 801de3c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801de40:	2b01      	cmp	r3, #1
 801de42:	d002      	beq.n	801de4a <lfs_dir_splittingcompact+0x10a>
 801de44:	2a01      	cmp	r2, #1
 801de46:	d000      	beq.n	801de4a <lfs_dir_splittingcompact+0x10a>
 801de48:	b94b      	cbnz	r3, 801de5e <lfs_dir_splittingcompact+0x11e>
        lfs_ssize_t size = lfs_fs_size_(lfs);
 801de4a:	4638      	mov	r0, r7
 801de4c:	f7ff fbe4 	bl	801d618 <lfs_fs_size_>
        if (size < 0) {
 801de50:	1e03      	subs	r3, r0, #0
 801de52:	db10      	blt.n	801de76 <lfs_dir_splittingcompact+0x136>
        if (lfs->block_count - size > lfs->block_count/8) {
 801de54:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801de56:	1ad3      	subs	r3, r2, r3
 801de58:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 801de5c:	d80f      	bhi.n	801de7e <lfs_dir_splittingcompact+0x13e>
    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 801de5e:	9602      	str	r6, [sp, #8]
 801de60:	f8cd b004 	str.w	fp, [sp, #4]
 801de64:	f8cd a000 	str.w	sl, [sp]
 801de68:	464b      	mov	r3, r9
 801de6a:	462a      	mov	r2, r5
 801de6c:	4641      	mov	r1, r8
 801de6e:	4638      	mov	r0, r7
 801de70:	f7ff fdc6 	bl	801da00 <lfs_dir_compact>
 801de74:	4603      	mov	r3, r0
}
 801de76:	4618      	mov	r0, r3
 801de78:	b011      	add	sp, #68	@ 0x44
 801de7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 801de7e:	4b14      	ldr	r3, [pc, #80]	@ (801ded0 <lfs_dir_splittingcompact+0x190>)
 801de80:	9300      	str	r3, [sp, #0]
 801de82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801de86:	f640 0286 	movw	r2, #2182	@ 0x886
 801de8a:	4912      	ldr	r1, [pc, #72]	@ (801ded4 <lfs_dir_splittingcompact+0x194>)
 801de8c:	4813      	ldr	r0, [pc, #76]	@ (801dedc <lfs_dir_splittingcompact+0x19c>)
 801de8e:	f00c fbc9 	bl	802a624 <printf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 801de92:	9602      	str	r6, [sp, #8]
 801de94:	f8cd b004 	str.w	fp, [sp, #4]
 801de98:	f8cd a000 	str.w	sl, [sp]
 801de9c:	464b      	mov	r3, r9
 801de9e:	462a      	mov	r2, r5
 801dea0:	4641      	mov	r1, r8
 801dea2:	4638      	mov	r0, r7
 801dea4:	f7ff ff0a 	bl	801dcbc <lfs_dir_split>
            if (err && err != LFS_ERR_NOSPC) {
 801dea8:	4603      	mov	r3, r0
 801deaa:	b150      	cbz	r0, 801dec2 <lfs_dir_splittingcompact+0x182>
 801deac:	f110 0f1c 	cmn.w	r0, #28
 801deb0:	d1e1      	bne.n	801de76 <lfs_dir_splittingcompact+0x136>
                LFS_WARN("Unable to expand superblock");
 801deb2:	4b07      	ldr	r3, [pc, #28]	@ (801ded0 <lfs_dir_splittingcompact+0x190>)
 801deb4:	f44f 6209 	mov.w	r2, #2192	@ 0x890
 801deb8:	4906      	ldr	r1, [pc, #24]	@ (801ded4 <lfs_dir_splittingcompact+0x194>)
 801deba:	4809      	ldr	r0, [pc, #36]	@ (801dee0 <lfs_dir_splittingcompact+0x1a0>)
 801debc:	f00c fbb2 	bl	802a624 <printf>
 801dec0:	e7cd      	b.n	801de5e <lfs_dir_splittingcompact+0x11e>
                end = 1;
 801dec2:	2601      	movs	r6, #1
 801dec4:	e7cb      	b.n	801de5e <lfs_dir_splittingcompact+0x11e>
 801dec6:	bf00      	nop
 801dec8:	0801b6fd 	.word	0x0801b6fd
 801decc:	400ffc00 	.word	0x400ffc00
 801ded0:	080373ac 	.word	0x080373ac
 801ded4:	080398c4 	.word	0x080398c4
 801ded8:	08039bc0 	.word	0x08039bc0
 801dedc:	08039bf0 	.word	0x08039bf0
 801dee0:	08039c20 	.word	0x08039c20

0801dee4 <lfs_dir_relocatingcommit>:
        lfs_mdir_t *pdir) {
 801dee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dee8:	b09b      	sub	sp, #108	@ 0x6c
 801deea:	4607      	mov	r7, r0
 801deec:	460e      	mov	r6, r1
 801deee:	4691      	mov	r9, r2
 801def0:	461d      	mov	r5, r3
 801def2:	f8dd 8090 	ldr.w	r8, [sp, #144]	@ 0x90
    for (int i = 0; i < attrcount; i++) {
 801def6:	2300      	movs	r3, #0
    bool hasdelete = false;
 801def8:	469c      	mov	ip, r3
    for (int i = 0; i < attrcount; i++) {
 801defa:	e003      	b.n	801df04 <lfs_dir_relocatingcommit+0x20>
            dir->count += 1;
 801defc:	8ab2      	ldrh	r2, [r6, #20]
 801defe:	3201      	adds	r2, #1
 801df00:	82b2      	strh	r2, [r6, #20]
    for (int i = 0; i < attrcount; i++) {
 801df02:	3301      	adds	r3, #1
 801df04:	4543      	cmp	r3, r8
 801df06:	da2d      	bge.n	801df64 <lfs_dir_relocatingcommit+0x80>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 801df08:	00d8      	lsls	r0, r3, #3
 801df0a:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 801df0e:	f855 2033 	ldr.w	r2, [r5, r3, lsl #3]
    return (tag & 0x7ff00000) >> 20;
 801df12:	0d11      	lsrs	r1, r2, #20
 801df14:	f3c2 520a 	ubfx	r2, r2, #20, #11
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 801df18:	f240 4e01 	movw	lr, #1025	@ 0x401
 801df1c:	4572      	cmp	r2, lr
 801df1e:	d0ed      	beq.n	801defc <lfs_dir_relocatingcommit+0x18>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 801df20:	f240 4eff 	movw	lr, #1279	@ 0x4ff
 801df24:	4572      	cmp	r2, lr
 801df26:	d00f      	beq.n	801df48 <lfs_dir_relocatingcommit+0x64>
    return (tag & 0x70000000) >> 20;
 801df28:	f401 61e0 	and.w	r1, r1, #1792	@ 0x700
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 801df2c:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 801df30:	d1e7      	bne.n	801df02 <lfs_dir_relocatingcommit+0x1e>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 801df32:	6862      	ldr	r2, [r4, #4]
 801df34:	6812      	ldr	r2, [r2, #0]
 801df36:	61b2      	str	r2, [r6, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 801df38:	6862      	ldr	r2, [r4, #4]
 801df3a:	6852      	ldr	r2, [r2, #4]
 801df3c:	61f2      	str	r2, [r6, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 801df3e:	582a      	ldr	r2, [r5, r0]
 801df40:	f3c2 5200 	ubfx	r2, r2, #20, #1
 801df44:	75f2      	strb	r2, [r6, #23]
            lfs_pair_fromle32(dir->tail);
 801df46:	e7dc      	b.n	801df02 <lfs_dir_relocatingcommit+0x1e>
            LFS_ASSERT(dir->count > 0);
 801df48:	8ab2      	ldrh	r2, [r6, #20]
 801df4a:	b122      	cbz	r2, 801df56 <lfs_dir_relocatingcommit+0x72>
            dir->count -= 1;
 801df4c:	3a01      	subs	r2, #1
 801df4e:	82b2      	strh	r2, [r6, #20]
            hasdelete = true;
 801df50:	f04f 0c01 	mov.w	ip, #1
 801df54:	e7d5      	b.n	801df02 <lfs_dir_relocatingcommit+0x1e>
            LFS_ASSERT(dir->count > 0);
 801df56:	4ba0      	ldr	r3, [pc, #640]	@ (801e1d8 <lfs_dir_relocatingcommit+0x2f4>)
 801df58:	4aa0      	ldr	r2, [pc, #640]	@ (801e1dc <lfs_dir_relocatingcommit+0x2f8>)
 801df5a:	f640 01a9 	movw	r1, #2217	@ 0x8a9
 801df5e:	48a0      	ldr	r0, [pc, #640]	@ (801e1e0 <lfs_dir_relocatingcommit+0x2fc>)
 801df60:	f00c fb2c 	bl	802a5bc <__assert_func>
    if (hasdelete && dir->count == 0) {
 801df64:	f1bc 0f00 	cmp.w	ip, #0
 801df68:	d01b      	beq.n	801dfa2 <lfs_dir_relocatingcommit+0xbe>
 801df6a:	8ab3      	ldrh	r3, [r6, #20]
 801df6c:	b9cb      	cbnz	r3, 801dfa2 <lfs_dir_relocatingcommit+0xbe>
        LFS_ASSERT(pdir);
 801df6e:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801df70:	b15b      	cbz	r3, 801df8a <lfs_dir_relocatingcommit+0xa6>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 801df72:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801df74:	4631      	mov	r1, r6
 801df76:	4638      	mov	r0, r7
 801df78:	f7ff fb5e 	bl	801d638 <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
 801df7c:	4682      	mov	sl, r0
 801df7e:	b158      	cbz	r0, 801df98 <lfs_dir_relocatingcommit+0xb4>
 801df80:	f110 0f02 	cmn.w	r0, #2
 801df84:	f040 8159 	bne.w	801e23a <lfs_dir_relocatingcommit+0x356>
 801df88:	e00b      	b.n	801dfa2 <lfs_dir_relocatingcommit+0xbe>
        LFS_ASSERT(pdir);
 801df8a:	4b96      	ldr	r3, [pc, #600]	@ (801e1e4 <lfs_dir_relocatingcommit+0x300>)
 801df8c:	4a93      	ldr	r2, [pc, #588]	@ (801e1dc <lfs_dir_relocatingcommit+0x2f8>)
 801df8e:	f640 01b6 	movw	r1, #2230	@ 0x8b6
 801df92:	4893      	ldr	r0, [pc, #588]	@ (801e1e0 <lfs_dir_relocatingcommit+0x2fc>)
 801df94:	f00c fb12 	bl	802a5bc <__assert_func>
        if (err != LFS_ERR_NOENT && pdir->split) {
 801df98:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801df9a:	7ddb      	ldrb	r3, [r3, #23]
 801df9c:	2b00      	cmp	r3, #0
 801df9e:	f040 80bf 	bne.w	801e120 <lfs_dir_relocatingcommit+0x23c>
    if (dir->erased) {
 801dfa2:	7db4      	ldrb	r4, [r6, #22]
 801dfa4:	2c00      	cmp	r4, #0
 801dfa6:	d02e      	beq.n	801e006 <lfs_dir_relocatingcommit+0x122>
            .block = dir->pair[0],
 801dfa8:	6833      	ldr	r3, [r6, #0]
        struct lfs_commit commit = {
 801dfaa:	9310      	str	r3, [sp, #64]	@ 0x40
            .off = dir->off,
 801dfac:	68f3      	ldr	r3, [r6, #12]
        struct lfs_commit commit = {
 801dfae:	9311      	str	r3, [sp, #68]	@ 0x44
            .ptag = dir->etag,
 801dfb0:	6932      	ldr	r2, [r6, #16]
        struct lfs_commit commit = {
 801dfb2:	9212      	str	r2, [sp, #72]	@ 0x48
 801dfb4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801dfb8:	9213      	str	r2, [sp, #76]	@ 0x4c
 801dfba:	9314      	str	r3, [sp, #80]	@ 0x50
            .end = (lfs->cfg->metadata_max ?
 801dfbc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801dfbe:	6d53      	ldr	r3, [r2, #84]	@ 0x54
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801dfc0:	2b00      	cmp	r3, #0
 801dfc2:	d03c      	beq.n	801e03e <lfs_dir_relocatingcommit+0x15a>
 801dfc4:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 801dfc6:	9315      	str	r3, [sp, #84]	@ 0x54
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 801dfc8:	9718      	str	r7, [sp, #96]	@ 0x60
 801dfca:	ab10      	add	r3, sp, #64	@ 0x40
 801dfcc:	9319      	str	r3, [sp, #100]	@ 0x64
        int err = lfs_dir_traverse(lfs,
 801dfce:	ab18      	add	r3, sp, #96	@ 0x60
 801dfd0:	9308      	str	r3, [sp, #32]
 801dfd2:	4b85      	ldr	r3, [pc, #532]	@ (801e1e8 <lfs_dir_relocatingcommit+0x304>)
 801dfd4:	9307      	str	r3, [sp, #28]
 801dfd6:	2300      	movs	r3, #0
 801dfd8:	9306      	str	r3, [sp, #24]
 801dfda:	9305      	str	r3, [sp, #20]
 801dfdc:	9304      	str	r3, [sp, #16]
 801dfde:	9303      	str	r3, [sp, #12]
 801dfe0:	9302      	str	r3, [sp, #8]
 801dfe2:	f8cd 8004 	str.w	r8, [sp, #4]
 801dfe6:	9500      	str	r5, [sp, #0]
 801dfe8:	6933      	ldr	r3, [r6, #16]
 801dfea:	68f2      	ldr	r2, [r6, #12]
 801dfec:	4631      	mov	r1, r6
 801dfee:	4638      	mov	r0, r7
 801dff0:	f7fd feac 	bl	801bd4c <lfs_dir_traverse>
        if (err) {
 801dff4:	4682      	mov	sl, r0
 801dff6:	b328      	cbz	r0, 801e044 <lfs_dir_relocatingcommit+0x160>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 801dff8:	f110 0f1c 	cmn.w	r0, #28
 801dffc:	d003      	beq.n	801e006 <lfs_dir_relocatingcommit+0x122>
 801dffe:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801e002:	f040 811a 	bne.w	801e23a <lfs_dir_relocatingcommit+0x356>
    rcache->block = LFS_BLOCK_NULL;
 801e006:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e00a:	613b      	str	r3, [r7, #16]
    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 801e00c:	8ab3      	ldrh	r3, [r6, #20]
 801e00e:	9302      	str	r3, [sp, #8]
 801e010:	2300      	movs	r3, #0
 801e012:	9301      	str	r3, [sp, #4]
 801e014:	9600      	str	r6, [sp, #0]
 801e016:	4643      	mov	r3, r8
 801e018:	462a      	mov	r2, r5
 801e01a:	4631      	mov	r1, r6
 801e01c:	4638      	mov	r0, r7
 801e01e:	f7ff fe8f 	bl	801dd40 <lfs_dir_splittingcompact>
    if (state < 0) {
 801e022:	1e01      	subs	r1, r0, #0
 801e024:	f2c0 8106 	blt.w	801e234 <lfs_dir_relocatingcommit+0x350>
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 801e028:	f8d9 b000 	ldr.w	fp, [r9]
 801e02c:	f8cd b058 	str.w	fp, [sp, #88]	@ 0x58
 801e030:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801e034:	9217      	str	r2, [sp, #92]	@ 0x5c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801e036:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 801e038:	4692      	mov	sl, r2
 801e03a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801e03c:	e0db      	b.n	801e1f6 <lfs_dir_relocatingcommit+0x312>
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801e03e:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 801e040:	3b08      	subs	r3, #8
 801e042:	e7c0      	b.n	801dfc6 <lfs_dir_relocatingcommit+0xe2>
        lfs_gstate_t delta = {0};
 801e044:	2300      	movs	r3, #0
 801e046:	930d      	str	r3, [sp, #52]	@ 0x34
 801e048:	930e      	str	r3, [sp, #56]	@ 0x38
 801e04a:	930f      	str	r3, [sp, #60]	@ 0x3c
        lfs_gstate_xor(&delta, &lfs->gstate);
 801e04c:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801e050:	a80d      	add	r0, sp, #52	@ 0x34
 801e052:	f7fd fa97 	bl	801b584 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 801e056:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 801e05a:	a80d      	add	r0, sp, #52	@ 0x34
 801e05c:	f7fd fa92 	bl	801b584 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 801e060:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 801e064:	a80d      	add	r0, sp, #52	@ 0x34
 801e066:	f7fd fa8d 	bl	801b584 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 801e06a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e06c:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 801e070:	f023 0303 	bic.w	r3, r3, #3
 801e074:	930d      	str	r3, [sp, #52]	@ 0x34
    for (int i = 0; i < 3; i++) {
 801e076:	e001      	b.n	801e07c <lfs_dir_relocatingcommit+0x198>
 801e078:	f10a 0a01 	add.w	sl, sl, #1
 801e07c:	f1ba 0f02 	cmp.w	sl, #2
 801e080:	dc07      	bgt.n	801e092 <lfs_dir_relocatingcommit+0x1ae>
        if (((uint32_t*)a)[i] != 0) {
 801e082:	ab1a      	add	r3, sp, #104	@ 0x68
 801e084:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801e088:	f853 3c34 	ldr.w	r3, [r3, #-52]
 801e08c:	2b00      	cmp	r3, #0
 801e08e:	d0f3      	beq.n	801e078 <lfs_dir_relocatingcommit+0x194>
            return false;
 801e090:	2400      	movs	r4, #0
        if (!lfs_gstate_iszero(&delta)) {
 801e092:	b9c4      	cbnz	r4, 801e0c6 <lfs_dir_relocatingcommit+0x1e2>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 801e094:	aa0d      	add	r2, sp, #52	@ 0x34
 801e096:	4631      	mov	r1, r6
 801e098:	4638      	mov	r0, r7
 801e09a:	f7fd fdc7 	bl	801bc2c <lfs_dir_getgstate>
            if (err) {
 801e09e:	4682      	mov	sl, r0
 801e0a0:	2800      	cmp	r0, #0
 801e0a2:	f040 80ca 	bne.w	801e23a <lfs_dir_relocatingcommit+0x356>
            err = lfs_dir_commitattr(lfs, &commit,
 801e0a6:	ab0d      	add	r3, sp, #52	@ 0x34
 801e0a8:	4a50      	ldr	r2, [pc, #320]	@ (801e1ec <lfs_dir_relocatingcommit+0x308>)
 801e0aa:	a910      	add	r1, sp, #64	@ 0x40
 801e0ac:	4638      	mov	r0, r7
 801e0ae:	f7ff fb45 	bl	801d73c <lfs_dir_commitattr>
            if (err) {
 801e0b2:	4682      	mov	sl, r0
 801e0b4:	b138      	cbz	r0, 801e0c6 <lfs_dir_relocatingcommit+0x1e2>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 801e0b6:	f110 0f1c 	cmn.w	r0, #28
 801e0ba:	d0a4      	beq.n	801e006 <lfs_dir_relocatingcommit+0x122>
 801e0bc:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801e0c0:	f040 80bb 	bne.w	801e23a <lfs_dir_relocatingcommit+0x356>
 801e0c4:	e79f      	b.n	801e006 <lfs_dir_relocatingcommit+0x122>
        err = lfs_dir_commitcrc(lfs, &commit);
 801e0c6:	a910      	add	r1, sp, #64	@ 0x40
 801e0c8:	4638      	mov	r0, r7
 801e0ca:	f7ff fb9d 	bl	801d808 <lfs_dir_commitcrc>
        if (err) {
 801e0ce:	4682      	mov	sl, r0
 801e0d0:	b138      	cbz	r0, 801e0e2 <lfs_dir_relocatingcommit+0x1fe>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 801e0d2:	f110 0f1c 	cmn.w	r0, #28
 801e0d6:	d096      	beq.n	801e006 <lfs_dir_relocatingcommit+0x122>
 801e0d8:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801e0dc:	f040 80ad 	bne.w	801e23a <lfs_dir_relocatingcommit+0x356>
 801e0e0:	e791      	b.n	801e006 <lfs_dir_relocatingcommit+0x122>
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801e0e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e0e4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801e0e6:	6a11      	ldr	r1, [r2, #32]
 801e0e8:	fbb3 f2f1 	udiv	r2, r3, r1
 801e0ec:	fb01 3212 	mls	r2, r1, r2, r3
 801e0f0:	b97a      	cbnz	r2, 801e112 <lfs_dir_relocatingcommit+0x22e>
        dir->off = commit.off;
 801e0f2:	60f3      	str	r3, [r6, #12]
        dir->etag = commit.ptag;
 801e0f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e0f6:	6133      	str	r3, [r6, #16]
        lfs->gdisk = lfs->gstate;
 801e0f8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801e0fc:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801e100:	ca07      	ldmia	r2, {r0, r1, r2}
 801e102:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 801e106:	2200      	movs	r2, #0
 801e108:	64ba      	str	r2, [r7, #72]	@ 0x48
 801e10a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 801e10c:	653a      	str	r2, [r7, #80]	@ 0x50
    int state = 0;
 801e10e:	4651      	mov	r1, sl
 801e110:	e78a      	b.n	801e028 <lfs_dir_relocatingcommit+0x144>
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801e112:	4b37      	ldr	r3, [pc, #220]	@ (801e1f0 <lfs_dir_relocatingcommit+0x30c>)
 801e114:	4a31      	ldr	r2, [pc, #196]	@ (801e1dc <lfs_dir_relocatingcommit+0x2f8>)
 801e116:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 801e11a:	4831      	ldr	r0, [pc, #196]	@ (801e1e0 <lfs_dir_relocatingcommit+0x2fc>)
 801e11c:	f00c fa4e 	bl	802a5bc <__assert_func>
            state = LFS_OK_DROPPED;
 801e120:	2102      	movs	r1, #2
 801e122:	e781      	b.n	801e028 <lfs_dir_relocatingcommit+0x144>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 801e124:	f8b4 c004 	ldrh.w	ip, [r4, #4]
    return (tag & 0x000ffc00) >> 10;
 801e128:	f3c1 2089 	ubfx	r0, r1, #10, #10
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801e12c:	4584      	cmp	ip, r0
 801e12e:	d10e      	bne.n	801e14e <lfs_dir_relocatingcommit+0x26a>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 801e130:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801e134:	60a2      	str	r2, [r4, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 801e136:	60e2      	str	r2, [r4, #12]
                for (int i = 0; i < attrcount; i++) {
 801e138:	3301      	adds	r3, #1
 801e13a:	4543      	cmp	r3, r8
 801e13c:	da34      	bge.n	801e1a8 <lfs_dir_relocatingcommit+0x2c4>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801e13e:	f855 1033 	ldr.w	r1, [r5, r3, lsl #3]
    return (tag & 0x7ff00000) >> 20;
 801e142:	f3c1 520a 	ubfx	r2, r1, #20, #11
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801e146:	f240 40ff 	movw	r0, #1279	@ 0x4ff
 801e14a:	4282      	cmp	r2, r0
 801e14c:	d0ea      	beq.n	801e124 <lfs_dir_relocatingcommit+0x240>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801e14e:	f240 40ff 	movw	r0, #1279	@ 0x4ff
 801e152:	4282      	cmp	r2, r0
 801e154:	d011      	beq.n	801e17a <lfs_dir_relocatingcommit+0x296>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 801e156:	f240 4001 	movw	r0, #1025	@ 0x401
 801e15a:	4282      	cmp	r2, r0
 801e15c:	d1ec      	bne.n	801e138 <lfs_dir_relocatingcommit+0x254>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 801e15e:	88a2      	ldrh	r2, [r4, #4]
    return (tag & 0x000ffc00) >> 10;
 801e160:	f3c1 2189 	ubfx	r1, r1, #10, #10
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 801e164:	428a      	cmp	r2, r1
 801e166:	d3e7      	bcc.n	801e138 <lfs_dir_relocatingcommit+0x254>
                        d->id += 1;
 801e168:	3201      	adds	r2, #1
 801e16a:	80a2      	strh	r2, [r4, #4]
                        if (d->type == LFS_TYPE_DIR) {
 801e16c:	79a2      	ldrb	r2, [r4, #6]
 801e16e:	2a02      	cmp	r2, #2
 801e170:	d1e2      	bne.n	801e138 <lfs_dir_relocatingcommit+0x254>
                            ((lfs_dir_t*)d)->pos += 1;
 801e172:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801e174:	3201      	adds	r2, #1
 801e176:	62a2      	str	r2, [r4, #40]	@ 0x28
 801e178:	e7de      	b.n	801e138 <lfs_dir_relocatingcommit+0x254>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 801e17a:	88a0      	ldrh	r0, [r4, #4]
    return (tag & 0x000ffc00) >> 10;
 801e17c:	f3c1 2c89 	ubfx	ip, r1, #10, #10
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801e180:	4560      	cmp	r0, ip
 801e182:	d9e8      	bls.n	801e156 <lfs_dir_relocatingcommit+0x272>
                        d->id -= 1;
 801e184:	3801      	subs	r0, #1
 801e186:	80a0      	strh	r0, [r4, #4]
                        if (d->type == LFS_TYPE_DIR) {
 801e188:	79a2      	ldrb	r2, [r4, #6]
 801e18a:	2a02      	cmp	r2, #2
 801e18c:	d1d4      	bne.n	801e138 <lfs_dir_relocatingcommit+0x254>
                            ((lfs_dir_t*)d)->pos -= 1;
 801e18e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801e190:	3a01      	subs	r2, #1
 801e192:	62a2      	str	r2, [r4, #40]	@ 0x28
 801e194:	e7d0      	b.n	801e138 <lfs_dir_relocatingcommit+0x254>
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 801e196:	f104 0220 	add.w	r2, r4, #32
 801e19a:	f104 0108 	add.w	r1, r4, #8
 801e19e:	4638      	mov	r0, r7
 801e1a0:	f7fe fd24 	bl	801cbec <lfs_dir_fetch>
                if (err) {
 801e1a4:	2800      	cmp	r0, #0
 801e1a6:	d147      	bne.n	801e238 <lfs_dir_relocatingcommit+0x354>
            while (d->id >= d->m.count && d->m.split) {
 801e1a8:	88a3      	ldrh	r3, [r4, #4]
 801e1aa:	8ba1      	ldrh	r1, [r4, #28]
 801e1ac:	428b      	cmp	r3, r1
 801e1ae:	d321      	bcc.n	801e1f4 <lfs_dir_relocatingcommit+0x310>
 801e1b0:	7fe2      	ldrb	r2, [r4, #31]
 801e1b2:	b1fa      	cbz	r2, 801e1f4 <lfs_dir_relocatingcommit+0x310>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801e1b4:	6a22      	ldr	r2, [r4, #32]
 801e1b6:	6a38      	ldr	r0, [r7, #32]
 801e1b8:	4282      	cmp	r2, r0
 801e1ba:	d0ec      	beq.n	801e196 <lfs_dir_relocatingcommit+0x2b2>
 801e1bc:	f8d4 e024 	ldr.w	lr, [r4, #36]	@ 0x24
 801e1c0:	f8d7 c024 	ldr.w	ip, [r7, #36]	@ 0x24
 801e1c4:	45e6      	cmp	lr, ip
 801e1c6:	d0e6      	beq.n	801e196 <lfs_dir_relocatingcommit+0x2b2>
 801e1c8:	4562      	cmp	r2, ip
 801e1ca:	d0e4      	beq.n	801e196 <lfs_dir_relocatingcommit+0x2b2>
 801e1cc:	4570      	cmp	r0, lr
 801e1ce:	d0e2      	beq.n	801e196 <lfs_dir_relocatingcommit+0x2b2>
                    d->id -= d->m.count;
 801e1d0:	1a5b      	subs	r3, r3, r1
 801e1d2:	80a3      	strh	r3, [r4, #4]
 801e1d4:	e7df      	b.n	801e196 <lfs_dir_relocatingcommit+0x2b2>
 801e1d6:	bf00      	nop
 801e1d8:	08039c4c 	.word	0x08039c4c
 801e1dc:	0803a5c4 	.word	0x0803a5c4
 801e1e0:	080398c4 	.word	0x080398c4
 801e1e4:	08039c5c 	.word	0x08039c5c
 801e1e8:	0801d7f7 	.word	0x0801d7f7
 801e1ec:	7ffffc0c 	.word	0x7ffffc0c
 801e1f0:	08039b60 	.word	0x08039b60
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801e1f4:	6824      	ldr	r4, [r4, #0]
 801e1f6:	b1d4      	cbz	r4, 801e22e <lfs_dir_relocatingcommit+0x34a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801e1f8:	68a3      	ldr	r3, [r4, #8]
 801e1fa:	459b      	cmp	fp, r3
 801e1fc:	d006      	beq.n	801e20c <lfs_dir_relocatingcommit+0x328>
 801e1fe:	68e2      	ldr	r2, [r4, #12]
 801e200:	4592      	cmp	sl, r2
 801e202:	d003      	beq.n	801e20c <lfs_dir_relocatingcommit+0x328>
 801e204:	459a      	cmp	sl, r3
 801e206:	d001      	beq.n	801e20c <lfs_dir_relocatingcommit+0x328>
 801e208:	4593      	cmp	fp, r2
 801e20a:	d1f3      	bne.n	801e1f4 <lfs_dir_relocatingcommit+0x310>
            d->m = *dir;
 801e20c:	f104 0c08 	add.w	ip, r4, #8
 801e210:	46b6      	mov	lr, r6
 801e212:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801e216:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e21a:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 801e21e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 801e222:	f104 0308 	add.w	r3, r4, #8
 801e226:	454b      	cmp	r3, r9
 801e228:	d0be      	beq.n	801e1a8 <lfs_dir_relocatingcommit+0x2c4>
                for (int i = 0; i < attrcount; i++) {
 801e22a:	2300      	movs	r3, #0
 801e22c:	e785      	b.n	801e13a <lfs_dir_relocatingcommit+0x256>
    return state;
 801e22e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e230:	468a      	mov	sl, r1
 801e232:	e002      	b.n	801e23a <lfs_dir_relocatingcommit+0x356>
        return state;
 801e234:	468a      	mov	sl, r1
 801e236:	e000      	b.n	801e23a <lfs_dir_relocatingcommit+0x356>
 801e238:	4682      	mov	sl, r0
}
 801e23a:	4650      	mov	r0, sl
 801e23c:	b01b      	add	sp, #108	@ 0x6c
 801e23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e242:	bf00      	nop

0801e244 <lfs_dir_orphaningcommit>:
        const struct lfs_mattr *attrs, int attrcount) {
 801e244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e248:	b0a3      	sub	sp, #140	@ 0x8c
 801e24a:	4605      	mov	r5, r0
 801e24c:	460e      	mov	r6, r1
 801e24e:	4690      	mov	r8, r2
 801e250:	4699      	mov	r9, r3
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801e252:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 801e254:	e003      	b.n	801e25e <lfs_dir_orphaningcommit+0x1a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801e256:	79a3      	ldrb	r3, [r4, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 801e258:	2b01      	cmp	r3, #1
 801e25a:	d012      	beq.n	801e282 <lfs_dir_orphaningcommit+0x3e>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801e25c:	6824      	ldr	r4, [r4, #0]
 801e25e:	b34c      	cbz	r4, 801e2b4 <lfs_dir_orphaningcommit+0x70>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 801e260:	f104 0108 	add.w	r1, r4, #8
 801e264:	42b1      	cmp	r1, r6
 801e266:	d0f9      	beq.n	801e25c <lfs_dir_orphaningcommit+0x18>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801e268:	68a1      	ldr	r1, [r4, #8]
 801e26a:	6833      	ldr	r3, [r6, #0]
 801e26c:	428b      	cmp	r3, r1
 801e26e:	d0f2      	beq.n	801e256 <lfs_dir_orphaningcommit+0x12>
 801e270:	68e0      	ldr	r0, [r4, #12]
 801e272:	6872      	ldr	r2, [r6, #4]
 801e274:	4282      	cmp	r2, r0
 801e276:	d0ee      	beq.n	801e256 <lfs_dir_orphaningcommit+0x12>
 801e278:	428a      	cmp	r2, r1
 801e27a:	d0ec      	beq.n	801e256 <lfs_dir_orphaningcommit+0x12>
 801e27c:	4298      	cmp	r0, r3
 801e27e:	d1ed      	bne.n	801e25c <lfs_dir_orphaningcommit+0x18>
 801e280:	e7e9      	b.n	801e256 <lfs_dir_orphaningcommit+0x12>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801e282:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e284:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801e288:	d0e8      	beq.n	801e25c <lfs_dir_orphaningcommit+0x18>
                f->ctz.size > lfs->cfg->cache_size) {
 801e28a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801e28c:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801e28e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801e290:	429a      	cmp	r2, r3
 801e292:	d9e3      	bls.n	801e25c <lfs_dir_orphaningcommit+0x18>
            int err = lfs_file_outline(lfs, f);
 801e294:	4621      	mov	r1, r4
 801e296:	4628      	mov	r0, r5
 801e298:	f7fe feee 	bl	801d078 <lfs_file_outline>
            if (err) {
 801e29c:	4607      	mov	r7, r0
 801e29e:	2800      	cmp	r0, #0
 801e2a0:	f040 81bc 	bne.w	801e61c <lfs_dir_orphaningcommit+0x3d8>
            err = lfs_file_flush(lfs, f);
 801e2a4:	4621      	mov	r1, r4
 801e2a6:	4628      	mov	r0, r5
 801e2a8:	f7ff f866 	bl	801d378 <lfs_file_flush>
            if (err) {
 801e2ac:	4607      	mov	r7, r0
 801e2ae:	2800      	cmp	r0, #0
 801e2b0:	d0d4      	beq.n	801e25c <lfs_dir_orphaningcommit+0x18>
 801e2b2:	e1b3      	b.n	801e61c <lfs_dir_orphaningcommit+0x3d8>
    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 801e2b4:	6833      	ldr	r3, [r6, #0]
 801e2b6:	9316      	str	r3, [sp, #88]	@ 0x58
 801e2b8:	6873      	ldr	r3, [r6, #4]
 801e2ba:	9317      	str	r3, [sp, #92]	@ 0x5c
    lfs_mdir_t ldir = *dir;
 801e2bc:	ac0e      	add	r4, sp, #56	@ 0x38
 801e2be:	4637      	mov	r7, r6
 801e2c0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801e2c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e2c4:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 801e2c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 801e2cc:	ab06      	add	r3, sp, #24
 801e2ce:	9301      	str	r3, [sp, #4]
 801e2d0:	f8cd 9000 	str.w	r9, [sp]
 801e2d4:	4643      	mov	r3, r8
 801e2d6:	4632      	mov	r2, r6
 801e2d8:	a90e      	add	r1, sp, #56	@ 0x38
 801e2da:	4628      	mov	r0, r5
 801e2dc:	f7ff fe02 	bl	801dee4 <lfs_dir_relocatingcommit>
    if (state < 0) {
 801e2e0:	1e07      	subs	r7, r0, #0
 801e2e2:	f2c0 819b 	blt.w	801e61c <lfs_dir_orphaningcommit+0x3d8>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801e2e6:	6833      	ldr	r3, [r6, #0]
 801e2e8:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e2ea:	429a      	cmp	r2, r3
 801e2ec:	d007      	beq.n	801e2fe <lfs_dir_orphaningcommit+0xba>
 801e2ee:	6870      	ldr	r0, [r6, #4]
 801e2f0:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801e2f2:	4281      	cmp	r1, r0
 801e2f4:	d003      	beq.n	801e2fe <lfs_dir_orphaningcommit+0xba>
 801e2f6:	4299      	cmp	r1, r3
 801e2f8:	d001      	beq.n	801e2fe <lfs_dir_orphaningcommit+0xba>
 801e2fa:	4290      	cmp	r0, r2
 801e2fc:	d109      	bne.n	801e312 <lfs_dir_orphaningcommit+0xce>
        *dir = ldir;
 801e2fe:	4634      	mov	r4, r6
 801e300:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 801e304:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801e308:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e30a:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801e30e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (state == LFS_OK_DROPPED) {
 801e312:	2f02      	cmp	r7, #2
 801e314:	d001      	beq.n	801e31a <lfs_dir_orphaningcommit+0xd6>
                orphans = true;
 801e316:	2600      	movs	r6, #0
 801e318:	e0b8      	b.n	801e48c <lfs_dir_orphaningcommit+0x248>
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 801e31a:	f105 0248 	add.w	r2, r5, #72	@ 0x48
 801e31e:	4631      	mov	r1, r6
 801e320:	4628      	mov	r0, r5
 801e322:	f7fd fc83 	bl	801bc2c <lfs_dir_getgstate>
        if (err) {
 801e326:	4607      	mov	r7, r0
 801e328:	2800      	cmp	r0, #0
 801e32a:	f040 8177 	bne.w	801e61c <lfs_dir_orphaningcommit+0x3d8>
        lpair[0] = pdir.pair[0];
 801e32e:	9b06      	ldr	r3, [sp, #24]
 801e330:	9316      	str	r3, [sp, #88]	@ 0x58
        lpair[1] = pdir.pair[1];
 801e332:	9b07      	ldr	r3, [sp, #28]
 801e334:	9317      	str	r3, [sp, #92]	@ 0x5c
        lfs_pair_tole32(dir->tail);
 801e336:	f106 0118 	add.w	r1, r6, #24
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 801e33a:	7df2      	ldrb	r2, [r6, #23]
 801e33c:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801e340:	4ba2      	ldr	r3, [pc, #648]	@ (801e5cc <lfs_dir_orphaningcommit+0x388>)
 801e342:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801e346:	9318      	str	r3, [sp, #96]	@ 0x60
 801e348:	9119      	str	r1, [sp, #100]	@ 0x64
 801e34a:	2300      	movs	r3, #0
 801e34c:	9301      	str	r3, [sp, #4]
 801e34e:	2301      	movs	r3, #1
 801e350:	9300      	str	r3, [sp, #0]
 801e352:	ab18      	add	r3, sp, #96	@ 0x60
 801e354:	aa16      	add	r2, sp, #88	@ 0x58
 801e356:	a906      	add	r1, sp, #24
 801e358:	4628      	mov	r0, r5
 801e35a:	f7ff fdc3 	bl	801dee4 <lfs_dir_relocatingcommit>
        if (state < 0) {
 801e35e:	1e07      	subs	r7, r0, #0
 801e360:	f2c0 815c 	blt.w	801e61c <lfs_dir_orphaningcommit+0x3d8>
        ldir = pdir;
 801e364:	ac0e      	add	r4, sp, #56	@ 0x38
 801e366:	ae06      	add	r6, sp, #24
 801e368:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801e36a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e36c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801e370:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801e374:	e7cf      	b.n	801e316 <lfs_dir_orphaningcommit+0xd2>
                d->m.pair[0] = ldir.pair[0];
 801e376:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e378:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 801e37a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e37c:	60da      	str	r2, [r3, #12]
            if (d->type == LFS_TYPE_DIR &&
 801e37e:	799a      	ldrb	r2, [r3, #6]
 801e380:	2a02      	cmp	r2, #2
 801e382:	d00d      	beq.n	801e3a0 <lfs_dir_orphaningcommit+0x15c>
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801e384:	681b      	ldr	r3, [r3, #0]
 801e386:	b1db      	cbz	r3, 801e3c0 <lfs_dir_orphaningcommit+0x17c>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801e388:	689a      	ldr	r2, [r3, #8]
 801e38a:	4291      	cmp	r1, r2
 801e38c:	d0f3      	beq.n	801e376 <lfs_dir_orphaningcommit+0x132>
 801e38e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801e390:	68dc      	ldr	r4, [r3, #12]
 801e392:	4284      	cmp	r4, r0
 801e394:	d0ef      	beq.n	801e376 <lfs_dir_orphaningcommit+0x132>
 801e396:	428c      	cmp	r4, r1
 801e398:	d0ed      	beq.n	801e376 <lfs_dir_orphaningcommit+0x132>
 801e39a:	4290      	cmp	r0, r2
 801e39c:	d1ef      	bne.n	801e37e <lfs_dir_orphaningcommit+0x13a>
 801e39e:	e7ea      	b.n	801e376 <lfs_dir_orphaningcommit+0x132>
 801e3a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801e3a2:	428a      	cmp	r2, r1
 801e3a4:	d007      	beq.n	801e3b6 <lfs_dir_orphaningcommit+0x172>
 801e3a6:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801e3a8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801e3aa:	42a0      	cmp	r0, r4
 801e3ac:	d003      	beq.n	801e3b6 <lfs_dir_orphaningcommit+0x172>
 801e3ae:	4288      	cmp	r0, r1
 801e3b0:	d001      	beq.n	801e3b6 <lfs_dir_orphaningcommit+0x172>
 801e3b2:	4294      	cmp	r4, r2
 801e3b4:	d1e6      	bne.n	801e384 <lfs_dir_orphaningcommit+0x140>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 801e3b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e3b8:	62da      	str	r2, [r3, #44]	@ 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 801e3ba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e3bc:	631a      	str	r2, [r3, #48]	@ 0x30
 801e3be:	e7e1      	b.n	801e384 <lfs_dir_orphaningcommit+0x140>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 801e3c0:	aa06      	add	r2, sp, #24
 801e3c2:	a916      	add	r1, sp, #88	@ 0x58
 801e3c4:	4628      	mov	r0, r5
 801e3c6:	f7fe fba5 	bl	801cb14 <lfs_fs_parent>
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 801e3ca:	1e04      	subs	r4, r0, #0
 801e3cc:	f280 8082 	bge.w	801e4d4 <lfs_dir_orphaningcommit+0x290>
 801e3d0:	f114 0f02 	cmn.w	r4, #2
 801e3d4:	f040 8128 	bne.w	801e628 <lfs_dir_orphaningcommit+0x3e4>
        bool hasparent = (tag != LFS_ERR_NOENT);
 801e3d8:	f114 0802 	adds.w	r8, r4, #2
 801e3dc:	bf18      	it	ne
 801e3de:	f04f 0801 	movne.w	r8, #1
        state = 0;
 801e3e2:	2700      	movs	r7, #0
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 801e3e4:	aa06      	add	r2, sp, #24
 801e3e6:	a916      	add	r1, sp, #88	@ 0x58
 801e3e8:	4628      	mov	r0, r5
 801e3ea:	f7ff f925 	bl	801d638 <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
 801e3ee:	4603      	mov	r3, r0
 801e3f0:	b118      	cbz	r0, 801e3fa <lfs_dir_orphaningcommit+0x1b6>
 801e3f2:	f110 0f02 	cmn.w	r0, #2
 801e3f6:	f040 8119 	bne.w	801e62c <lfs_dir_orphaningcommit+0x3e8>
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 801e3fa:	f114 0f02 	cmn.w	r4, #2
 801e3fe:	f000 80d6 	beq.w	801e5ae <lfs_dir_orphaningcommit+0x36a>
 801e402:	f113 0f02 	cmn.w	r3, #2
 801e406:	f000 80cb 	beq.w	801e5a0 <lfs_dir_orphaningcommit+0x35c>
    return lfs_tag_size(a->tag);
 801e40a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    return tag & 0x000003ff;
 801e40c:	f3c3 0309 	ubfx	r3, r3, #0, #10
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 801e410:	2b00      	cmp	r3, #0
 801e412:	f040 80d1 	bne.w	801e5b8 <lfs_dir_orphaningcommit+0x374>
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 801e416:	a906      	add	r1, sp, #24
 801e418:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 801e41c:	f7fd f8c4 	bl	801b5a8 <lfs_gstate_hasmovehere>
 801e420:	2800      	cmp	r0, #0
 801e422:	f040 80e1 	bne.w	801e5e8 <lfs_dir_orphaningcommit+0x3a4>
            uint16_t moveid = 0x3ff;
 801e426:	f240 34ff 	movw	r4, #1023	@ 0x3ff
            lpair[0] = pdir.pair[0];
 801e42a:	9b06      	ldr	r3, [sp, #24]
 801e42c:	9316      	str	r3, [sp, #88]	@ 0x58
            lpair[1] = pdir.pair[1];
 801e42e:	9b07      	ldr	r3, [sp, #28]
 801e430:	9317      	str	r3, [sp, #92]	@ 0x5c
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 801e432:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801e436:	429c      	cmp	r4, r3
 801e438:	f000 80ec 	beq.w	801e614 <lfs_dir_orphaningcommit+0x3d0>
 801e43c:	02a3      	lsls	r3, r4, #10
 801e43e:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801e442:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801e446:	931e      	str	r3, [sp, #120]	@ 0x78
 801e448:	2100      	movs	r1, #0
 801e44a:	911f      	str	r1, [sp, #124]	@ 0x7c
 801e44c:	f89d 202f 	ldrb.w	r2, [sp, #47]	@ 0x2f
 801e450:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801e454:	4b5d      	ldr	r3, [pc, #372]	@ (801e5cc <lfs_dir_orphaningcommit+0x388>)
 801e456:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801e45a:	9320      	str	r3, [sp, #128]	@ 0x80
 801e45c:	ab0e      	add	r3, sp, #56	@ 0x38
 801e45e:	9321      	str	r3, [sp, #132]	@ 0x84
 801e460:	9101      	str	r1, [sp, #4]
 801e462:	2302      	movs	r3, #2
 801e464:	9300      	str	r3, [sp, #0]
 801e466:	ab1e      	add	r3, sp, #120	@ 0x78
 801e468:	aa16      	add	r2, sp, #88	@ 0x58
 801e46a:	a906      	add	r1, sp, #24
 801e46c:	4628      	mov	r0, r5
 801e46e:	f7ff fd39 	bl	801dee4 <lfs_dir_relocatingcommit>
            if (state < 0) {
 801e472:	1e07      	subs	r7, r0, #0
 801e474:	f2c0 80d2 	blt.w	801e61c <lfs_dir_orphaningcommit+0x3d8>
            ldir = pdir;
 801e478:	ac0e      	add	r4, sp, #56	@ 0x38
 801e47a:	f10d 0c18 	add.w	ip, sp, #24
 801e47e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801e482:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e484:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801e488:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 801e48c:	2f01      	cmp	r7, #1
 801e48e:	f040 80c3 	bne.w	801e618 <lfs_dir_orphaningcommit+0x3d4>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 801e492:	4b4f      	ldr	r3, [pc, #316]	@ (801e5d0 <lfs_dir_orphaningcommit+0x38c>)
 801e494:	9303      	str	r3, [sp, #12]
 801e496:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e498:	9302      	str	r3, [sp, #8]
 801e49a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e49c:	9301      	str	r3, [sp, #4]
 801e49e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801e4a0:	9300      	str	r3, [sp, #0]
 801e4a2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e4a4:	f640 128c 	movw	r2, #2444	@ 0x98c
 801e4a8:	494a      	ldr	r1, [pc, #296]	@ (801e5d4 <lfs_dir_orphaningcommit+0x390>)
 801e4aa:	484b      	ldr	r0, [pc, #300]	@ (801e5d8 <lfs_dir_orphaningcommit+0x394>)
 801e4ac:	f00c f8ba 	bl	802a624 <printf>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801e4b0:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801e4b2:	6a2b      	ldr	r3, [r5, #32]
 801e4b4:	428b      	cmp	r3, r1
 801e4b6:	d007      	beq.n	801e4c8 <lfs_dir_orphaningcommit+0x284>
 801e4b8:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801e4ba:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 801e4bc:	4282      	cmp	r2, r0
 801e4be:	d003      	beq.n	801e4c8 <lfs_dir_orphaningcommit+0x284>
 801e4c0:	428a      	cmp	r2, r1
 801e4c2:	d001      	beq.n	801e4c8 <lfs_dir_orphaningcommit+0x284>
 801e4c4:	4298      	cmp	r0, r3
 801e4c6:	d103      	bne.n	801e4d0 <lfs_dir_orphaningcommit+0x28c>
            lfs->root[0] = ldir.pair[0];
 801e4c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e4ca:	622b      	str	r3, [r5, #32]
            lfs->root[1] = ldir.pair[1];
 801e4cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e4ce:	626b      	str	r3, [r5, #36]	@ 0x24
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801e4d0:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801e4d2:	e758      	b.n	801e386 <lfs_dir_orphaningcommit+0x142>
        bool hasparent = (tag != LFS_ERR_NOENT);
 801e4d4:	f114 0802 	adds.w	r8, r4, #2
 801e4d8:	bf18      	it	ne
 801e4da:	f04f 0801 	movne.w	r8, #1
            int err = lfs_fs_preporphans(lfs, +1);
 801e4de:	2101      	movs	r1, #1
 801e4e0:	4628      	mov	r0, r5
 801e4e2:	f7fd f997 	bl	801b814 <lfs_fs_preporphans>
            if (err) {
 801e4e6:	4607      	mov	r7, r0
 801e4e8:	2800      	cmp	r0, #0
 801e4ea:	f040 8097 	bne.w	801e61c <lfs_dir_orphaningcommit+0x3d8>
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 801e4ee:	a906      	add	r1, sp, #24
 801e4f0:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 801e4f4:	f7fd f858 	bl	801b5a8 <lfs_gstate_hasmovehere>
 801e4f8:	2800      	cmp	r0, #0
 801e4fa:	d131      	bne.n	801e560 <lfs_dir_orphaningcommit+0x31c>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 801e4fc:	4622      	mov	r2, r4
            uint16_t moveid = 0x3ff;
 801e4fe:	f240 37ff 	movw	r7, #1023	@ 0x3ff
            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 801e502:	9b06      	ldr	r3, [sp, #24]
 801e504:	9304      	str	r3, [sp, #16]
 801e506:	9b07      	ldr	r3, [sp, #28]
 801e508:	9305      	str	r3, [sp, #20]
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 801e50a:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801e50e:	429f      	cmp	r7, r3
 801e510:	d044      	beq.n	801e59c <lfs_dir_orphaningcommit+0x358>
 801e512:	02bb      	lsls	r3, r7, #10
 801e514:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801e518:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801e51c:	931a      	str	r3, [sp, #104]	@ 0x68
 801e51e:	2300      	movs	r3, #0
 801e520:	931b      	str	r3, [sp, #108]	@ 0x6c
 801e522:	921c      	str	r2, [sp, #112]	@ 0x70
 801e524:	aa0e      	add	r2, sp, #56	@ 0x38
 801e526:	921d      	str	r2, [sp, #116]	@ 0x74
 801e528:	9301      	str	r3, [sp, #4]
 801e52a:	2302      	movs	r3, #2
 801e52c:	9300      	str	r3, [sp, #0]
 801e52e:	ab1a      	add	r3, sp, #104	@ 0x68
 801e530:	aa04      	add	r2, sp, #16
 801e532:	a906      	add	r1, sp, #24
 801e534:	4628      	mov	r0, r5
 801e536:	f7ff fcd5 	bl	801dee4 <lfs_dir_relocatingcommit>
            if (state < 0) {
 801e53a:	1e07      	subs	r7, r0, #0
 801e53c:	db6e      	blt.n	801e61c <lfs_dir_orphaningcommit+0x3d8>
            if (state == LFS_OK_RELOCATED) {
 801e53e:	2f01      	cmp	r7, #1
 801e540:	f47f af50 	bne.w	801e3e4 <lfs_dir_orphaningcommit+0x1a0>
                lpair[0] = ppair[0];
 801e544:	9b04      	ldr	r3, [sp, #16]
 801e546:	9316      	str	r3, [sp, #88]	@ 0x58
                lpair[1] = ppair[1];
 801e548:	9b05      	ldr	r3, [sp, #20]
 801e54a:	9317      	str	r3, [sp, #92]	@ 0x5c
                ldir = pdir;
 801e54c:	ac0e      	add	r4, sp, #56	@ 0x38
 801e54e:	ae06      	add	r6, sp, #24
 801e550:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801e552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e554:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801e558:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 801e55c:	2601      	movs	r6, #1
 801e55e:	e795      	b.n	801e48c <lfs_dir_orphaningcommit+0x248>
                moveid = lfs_tag_id(lfs->gstate.tag);
 801e560:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
    return (tag & 0x000ffc00) >> 10;
 801e562:	f3c7 2789 	ubfx	r7, r7, #10, #10
                LFS_DEBUG("Fixing move while relocating "
 801e566:	4b1a      	ldr	r3, [pc, #104]	@ (801e5d0 <lfs_dir_orphaningcommit+0x38c>)
 801e568:	9302      	str	r3, [sp, #8]
 801e56a:	9701      	str	r7, [sp, #4]
 801e56c:	9b07      	ldr	r3, [sp, #28]
 801e56e:	9300      	str	r3, [sp, #0]
 801e570:	9b06      	ldr	r3, [sp, #24]
 801e572:	f640 12b9 	movw	r2, #2489	@ 0x9b9
 801e576:	4917      	ldr	r1, [pc, #92]	@ (801e5d4 <lfs_dir_orphaningcommit+0x390>)
 801e578:	4818      	ldr	r0, [pc, #96]	@ (801e5dc <lfs_dir_orphaningcommit+0x398>)
 801e57a:	f00c f853 	bl	802a624 <printf>
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801e57e:	2200      	movs	r2, #0
 801e580:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801e584:	4628      	mov	r0, r5
 801e586:	f7fd f8f5 	bl	801b774 <lfs_fs_prepmove>
    return (tag & 0x000ffc00) >> 10;
 801e58a:	f3c4 2389 	ubfx	r3, r4, #10, #10
                if (moveid < lfs_tag_id(tag)) {
 801e58e:	42bb      	cmp	r3, r7
 801e590:	d902      	bls.n	801e598 <lfs_dir_orphaningcommit+0x354>
                    tag -= LFS_MKTAG(0, 1, 0);
 801e592:	f5a4 6280 	sub.w	r2, r4, #1024	@ 0x400
 801e596:	e7b4      	b.n	801e502 <lfs_dir_orphaningcommit+0x2be>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 801e598:	4622      	mov	r2, r4
 801e59a:	e7b2      	b.n	801e502 <lfs_dir_orphaningcommit+0x2be>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 801e59c:	2300      	movs	r3, #0
 801e59e:	e7bd      	b.n	801e51c <lfs_dir_orphaningcommit+0x2d8>
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 801e5a0:	4b0f      	ldr	r3, [pc, #60]	@ (801e5e0 <lfs_dir_orphaningcommit+0x39c>)
 801e5a2:	4a10      	ldr	r2, [pc, #64]	@ (801e5e4 <lfs_dir_orphaningcommit+0x3a0>)
 801e5a4:	f640 11dc 	movw	r1, #2524	@ 0x9dc
 801e5a8:	480a      	ldr	r0, [pc, #40]	@ (801e5d4 <lfs_dir_orphaningcommit+0x390>)
 801e5aa:	f00c f807 	bl	802a5bc <__assert_func>
        if (err != LFS_ERR_NOENT) {
 801e5ae:	f113 0f02 	cmn.w	r3, #2
 801e5b2:	f47f af2a 	bne.w	801e40a <lfs_dir_orphaningcommit+0x1c6>
 801e5b6:	e769      	b.n	801e48c <lfs_dir_orphaningcommit+0x248>
                err = lfs_fs_preporphans(lfs, -hasparent);
 801e5b8:	f1c8 0100 	rsb	r1, r8, #0
 801e5bc:	4628      	mov	r0, r5
 801e5be:	f7fd f929 	bl	801b814 <lfs_fs_preporphans>
                if (err) {
 801e5c2:	4607      	mov	r7, r0
 801e5c4:	2800      	cmp	r0, #0
 801e5c6:	f43f af26 	beq.w	801e416 <lfs_dir_orphaningcommit+0x1d2>
 801e5ca:	e027      	b.n	801e61c <lfs_dir_orphaningcommit+0x3d8>
 801e5cc:	000ffc08 	.word	0x000ffc08
 801e5d0:	080373ac 	.word	0x080373ac
 801e5d4:	080398c4 	.word	0x080398c4
 801e5d8:	08039c64 	.word	0x08039c64
 801e5dc:	08039ca0 	.word	0x08039ca0
 801e5e0:	08039ce4 	.word	0x08039ce4
 801e5e4:	0803a620 	.word	0x0803a620
                moveid = lfs_tag_id(lfs->gstate.tag);
 801e5e8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
    return (tag & 0x000ffc00) >> 10;
 801e5ea:	f3c4 2489 	ubfx	r4, r4, #10, #10
                LFS_DEBUG("Fixing move while relocating "
 801e5ee:	4b10      	ldr	r3, [pc, #64]	@ (801e630 <lfs_dir_orphaningcommit+0x3ec>)
 801e5f0:	9302      	str	r3, [sp, #8]
 801e5f2:	9401      	str	r4, [sp, #4]
 801e5f4:	9b07      	ldr	r3, [sp, #28]
 801e5f6:	9300      	str	r3, [sp, #0]
 801e5f8:	9b06      	ldr	r3, [sp, #24]
 801e5fa:	f640 12ed 	movw	r2, #2541	@ 0x9ed
 801e5fe:	490d      	ldr	r1, [pc, #52]	@ (801e634 <lfs_dir_orphaningcommit+0x3f0>)
 801e600:	480d      	ldr	r0, [pc, #52]	@ (801e638 <lfs_dir_orphaningcommit+0x3f4>)
 801e602:	f00c f80f 	bl	802a624 <printf>
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801e606:	2200      	movs	r2, #0
 801e608:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801e60c:	4628      	mov	r0, r5
 801e60e:	f7fd f8b1 	bl	801b774 <lfs_fs_prepmove>
 801e612:	e70a      	b.n	801e42a <lfs_dir_orphaningcommit+0x1e6>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 801e614:	2300      	movs	r3, #0
 801e616:	e716      	b.n	801e446 <lfs_dir_orphaningcommit+0x202>
    return orphans ? LFS_OK_ORPHANED : 0;
 801e618:	b926      	cbnz	r6, 801e624 <lfs_dir_orphaningcommit+0x3e0>
 801e61a:	2700      	movs	r7, #0
}
 801e61c:	4638      	mov	r0, r7
 801e61e:	b023      	add	sp, #140	@ 0x8c
 801e620:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return orphans ? LFS_OK_ORPHANED : 0;
 801e624:	2703      	movs	r7, #3
 801e626:	e7f9      	b.n	801e61c <lfs_dir_orphaningcommit+0x3d8>
            return tag;
 801e628:	4627      	mov	r7, r4
 801e62a:	e7f7      	b.n	801e61c <lfs_dir_orphaningcommit+0x3d8>
            return err;
 801e62c:	4607      	mov	r7, r0
 801e62e:	e7f5      	b.n	801e61c <lfs_dir_orphaningcommit+0x3d8>
 801e630:	080373ac 	.word	0x080373ac
 801e634:	080398c4 	.word	0x080398c4
 801e638:	08039ca0 	.word	0x08039ca0

0801e63c <lfs_fs_deorphan>:
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 801e63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e640:	b0a4      	sub	sp, #144	@ 0x90
    return lfs_tag_size(a->tag);
 801e642:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    return tag & 0x000003ff;
 801e644:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 801e648:	2b00      	cmp	r3, #0
 801e64a:	f000 80ea 	beq.w	801e822 <lfs_fs_deorphan+0x1e6>
 801e64e:	4605      	mov	r5, r0
 801e650:	460f      	mov	r7, r1
    int pass = 0;
 801e652:	2600      	movs	r6, #0
    while (pass < 2) {
 801e654:	2e01      	cmp	r6, #1
 801e656:	f300 80db 	bgt.w	801e810 <lfs_fs_deorphan+0x1d4>
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 801e65a:	2220      	movs	r2, #32
 801e65c:	2100      	movs	r1, #0
 801e65e:	a806      	add	r0, sp, #24
 801e660:	f00e fcfe 	bl	802d060 <memset>
 801e664:	2301      	movs	r3, #1
 801e666:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
 801e66a:	930d      	str	r3, [sp, #52]	@ 0x34
        bool moreorphans = false;
 801e66c:	f04f 0800 	mov.w	r8, #0
        while (!lfs_pair_isnull(pdir.tail)) {
 801e670:	e0bd      	b.n	801e7ee <lfs_fs_deorphan+0x1b2>
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 801e672:	aa16      	add	r2, sp, #88	@ 0x58
 801e674:	a90c      	add	r1, sp, #48	@ 0x30
 801e676:	4628      	mov	r0, r5
 801e678:	f7fe fa4c 	bl	801cb14 <lfs_fs_parent>
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 801e67c:	1e04      	subs	r4, r0, #0
 801e67e:	db39      	blt.n	801e6f4 <lfs_fs_deorphan+0xb8>
                if (pass == 0 && tag != LFS_ERR_NOENT) {
 801e680:	b916      	cbnz	r6, 801e688 <lfs_fs_deorphan+0x4c>
 801e682:	f114 0f02 	cmn.w	r4, #2
 801e686:	d139      	bne.n	801e6fc <lfs_fs_deorphan+0xc0>
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 801e688:	2e01      	cmp	r6, #1
 801e68a:	f040 80a4 	bne.w	801e7d6 <lfs_fs_deorphan+0x19a>
 801e68e:	f114 0f02 	cmn.w	r4, #2
 801e692:	f040 80a0 	bne.w	801e7d6 <lfs_fs_deorphan+0x19a>
 801e696:	2f00      	cmp	r7, #0
 801e698:	f000 809d 	beq.w	801e7d6 <lfs_fs_deorphan+0x19a>
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 801e69c:	4b63      	ldr	r3, [pc, #396]	@ (801e82c <lfs_fs_deorphan+0x1f0>)
 801e69e:	9301      	str	r3, [sp, #4]
 801e6a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e6a2:	9300      	str	r3, [sp, #0]
 801e6a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e6a6:	f241 329c 	movw	r2, #5020	@ 0x139c
 801e6aa:	4961      	ldr	r1, [pc, #388]	@ (801e830 <lfs_fs_deorphan+0x1f4>)
 801e6ac:	4861      	ldr	r0, [pc, #388]	@ (801e834 <lfs_fs_deorphan+0x1f8>)
 801e6ae:	f00b ffb9 	bl	802a624 <printf>
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 801e6b2:	f105 0248 	add.w	r2, r5, #72	@ 0x48
 801e6b6:	a90e      	add	r1, sp, #56	@ 0x38
 801e6b8:	4628      	mov	r0, r5
 801e6ba:	f7fd fab7 	bl	801bc2c <lfs_dir_getgstate>
                    if (err) {
 801e6be:	4604      	mov	r4, r0
 801e6c0:	2800      	cmp	r0, #0
 801e6c2:	f040 80af 	bne.w	801e824 <lfs_fs_deorphan+0x1e8>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801e6c6:	f89d 204f 	ldrb.w	r2, [sp, #79]	@ 0x4f
 801e6ca:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801e6ce:	4b5a      	ldr	r3, [pc, #360]	@ (801e838 <lfs_fs_deorphan+0x1fc>)
 801e6d0:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801e6d4:	9322      	str	r3, [sp, #136]	@ 0x88
 801e6d6:	ab14      	add	r3, sp, #80	@ 0x50
 801e6d8:	9323      	str	r3, [sp, #140]	@ 0x8c
 801e6da:	2301      	movs	r3, #1
 801e6dc:	aa22      	add	r2, sp, #136	@ 0x88
 801e6de:	a906      	add	r1, sp, #24
 801e6e0:	4628      	mov	r0, r5
 801e6e2:	f7ff fdaf 	bl	801e244 <lfs_dir_orphaningcommit>
                    if (state < 0) {
 801e6e6:	1e04      	subs	r4, r0, #0
 801e6e8:	f2c0 809c 	blt.w	801e824 <lfs_fs_deorphan+0x1e8>
                    if (state == LFS_OK_ORPHANED) {
 801e6ec:	2c03      	cmp	r4, #3
 801e6ee:	d17e      	bne.n	801e7ee <lfs_fs_deorphan+0x1b2>
                        moreorphans = true;
 801e6f0:	46b8      	mov	r8, r7
                    continue;
 801e6f2:	e07c      	b.n	801e7ee <lfs_fs_deorphan+0x1b2>
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 801e6f4:	f114 0f02 	cmn.w	r4, #2
 801e6f8:	d0c2      	beq.n	801e680 <lfs_fs_deorphan+0x44>
 801e6fa:	e093      	b.n	801e824 <lfs_fs_deorphan+0x1e8>
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 801e6fc:	ab04      	add	r3, sp, #16
 801e6fe:	9300      	str	r3, [sp, #0]
 801e700:	4623      	mov	r3, r4
 801e702:	4a4e      	ldr	r2, [pc, #312]	@ (801e83c <lfs_fs_deorphan+0x200>)
 801e704:	a916      	add	r1, sp, #88	@ 0x58
 801e706:	4628      	mov	r0, r5
 801e708:	f7fd fa82 	bl	801bc10 <lfs_dir_get>
                    if (state < 0) {
 801e70c:	2800      	cmp	r0, #0
 801e70e:	db50      	blt.n	801e7b2 <lfs_fs_deorphan+0x176>
                    if (!lfs_pair_issync(pair, pdir.tail)) {
 801e710:	a90c      	add	r1, sp, #48	@ 0x30
 801e712:	a804      	add	r0, sp, #16
 801e714:	f7fc ff12 	bl	801b53c <lfs_pair_issync>
 801e718:	2800      	cmp	r0, #0
 801e71a:	d1b5      	bne.n	801e688 <lfs_fs_deorphan+0x4c>
                        LFS_DEBUG("Fixing half-orphan "
 801e71c:	4b43      	ldr	r3, [pc, #268]	@ (801e82c <lfs_fs_deorphan+0x1f0>)
 801e71e:	9303      	str	r3, [sp, #12]
 801e720:	9b05      	ldr	r3, [sp, #20]
 801e722:	9302      	str	r3, [sp, #8]
 801e724:	9b04      	ldr	r3, [sp, #16]
 801e726:	9301      	str	r3, [sp, #4]
 801e728:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e72a:	9300      	str	r3, [sp, #0]
 801e72c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e72e:	f241 3271 	movw	r2, #4977	@ 0x1371
 801e732:	493f      	ldr	r1, [pc, #252]	@ (801e830 <lfs_fs_deorphan+0x1f4>)
 801e734:	4842      	ldr	r0, [pc, #264]	@ (801e840 <lfs_fs_deorphan+0x204>)
 801e736:	f00b ff75 	bl	802a624 <printf>
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 801e73a:	a906      	add	r1, sp, #24
 801e73c:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 801e740:	f7fc ff32 	bl	801b5a8 <lfs_gstate_hasmovehere>
 801e744:	b9a0      	cbnz	r0, 801e770 <lfs_fs_deorphan+0x134>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801e746:	2300      	movs	r3, #0
 801e748:	931e      	str	r3, [sp, #120]	@ 0x78
 801e74a:	2300      	movs	r3, #0
 801e74c:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e74e:	4b3d      	ldr	r3, [pc, #244]	@ (801e844 <lfs_fs_deorphan+0x208>)
 801e750:	9320      	str	r3, [sp, #128]	@ 0x80
 801e752:	ab04      	add	r3, sp, #16
 801e754:	9321      	str	r3, [sp, #132]	@ 0x84
 801e756:	2302      	movs	r3, #2
 801e758:	aa1e      	add	r2, sp, #120	@ 0x78
 801e75a:	a906      	add	r1, sp, #24
 801e75c:	4628      	mov	r0, r5
 801e75e:	f7ff fd71 	bl	801e244 <lfs_dir_orphaningcommit>
                        if (state < 0) {
 801e762:	1e04      	subs	r4, r0, #0
 801e764:	db5e      	blt.n	801e824 <lfs_fs_deorphan+0x1e8>
                        if (state == LFS_OK_ORPHANED) {
 801e766:	2c03      	cmp	r4, #3
 801e768:	d141      	bne.n	801e7ee <lfs_fs_deorphan+0x1b2>
                            moreorphans = true;
 801e76a:	f04f 0801 	mov.w	r8, #1
                        continue;
 801e76e:	e03e      	b.n	801e7ee <lfs_fs_deorphan+0x1b2>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 801e770:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
    return (tag & 0x000ffc00) >> 10;
 801e772:	f3c4 2489 	ubfx	r4, r4, #10, #10
                            LFS_DEBUG("Fixing move while fixing orphans "
 801e776:	4b2d      	ldr	r3, [pc, #180]	@ (801e82c <lfs_fs_deorphan+0x1f0>)
 801e778:	9302      	str	r3, [sp, #8]
 801e77a:	9401      	str	r4, [sp, #4]
 801e77c:	9b07      	ldr	r3, [sp, #28]
 801e77e:	9300      	str	r3, [sp, #0]
 801e780:	9b06      	ldr	r3, [sp, #24]
 801e782:	f241 327c 	movw	r2, #4988	@ 0x137c
 801e786:	492a      	ldr	r1, [pc, #168]	@ (801e830 <lfs_fs_deorphan+0x1f4>)
 801e788:	482f      	ldr	r0, [pc, #188]	@ (801e848 <lfs_fs_deorphan+0x20c>)
 801e78a:	f00b ff4b 	bl	802a624 <printf>
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801e78e:	2200      	movs	r2, #0
 801e790:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801e794:	4628      	mov	r0, r5
 801e796:	f7fc ffed 	bl	801b774 <lfs_fs_prepmove>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801e79a:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801e79e:	429c      	cmp	r4, r3
 801e7a0:	d005      	beq.n	801e7ae <lfs_fs_deorphan+0x172>
 801e7a2:	02a3      	lsls	r3, r4, #10
 801e7a4:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801e7a8:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801e7ac:	e7cc      	b.n	801e748 <lfs_fs_deorphan+0x10c>
 801e7ae:	2300      	movs	r3, #0
 801e7b0:	e7ca      	b.n	801e748 <lfs_fs_deorphan+0x10c>
                        return state;
 801e7b2:	4604      	mov	r4, r0
 801e7b4:	e036      	b.n	801e824 <lfs_fs_deorphan+0x1e8>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801e7b6:	2301      	movs	r3, #1
 801e7b8:	e000      	b.n	801e7bc <lfs_fs_deorphan+0x180>
 801e7ba:	2301      	movs	r3, #1
        while (!lfs_pair_isnull(pdir.tail)) {
 801e7bc:	bb0b      	cbnz	r3, 801e802 <lfs_fs_deorphan+0x1c6>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 801e7be:	aa0c      	add	r2, sp, #48	@ 0x30
 801e7c0:	a90e      	add	r1, sp, #56	@ 0x38
 801e7c2:	4628      	mov	r0, r5
 801e7c4:	f7fe fa12 	bl	801cbec <lfs_dir_fetch>
            if (err) {
 801e7c8:	4604      	mov	r4, r0
 801e7ca:	bb58      	cbnz	r0, 801e824 <lfs_fs_deorphan+0x1e8>
            if (!pdir.split) {
 801e7cc:	f89d 302f 	ldrb.w	r3, [sp, #47]	@ 0x2f
 801e7d0:	2b00      	cmp	r3, #0
 801e7d2:	f43f af4e 	beq.w	801e672 <lfs_fs_deorphan+0x36>
            pdir = dir;
 801e7d6:	f10d 0c18 	add.w	ip, sp, #24
 801e7da:	f10d 0e38 	add.w	lr, sp, #56	@ 0x38
 801e7de:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801e7e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e7e6:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 801e7ea:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801e7ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e7f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e7f4:	d0e1      	beq.n	801e7ba <lfs_fs_deorphan+0x17e>
 801e7f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e7f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e7fc:	d0db      	beq.n	801e7b6 <lfs_fs_deorphan+0x17a>
 801e7fe:	2300      	movs	r3, #0
 801e800:	e7dc      	b.n	801e7bc <lfs_fs_deorphan+0x180>
        pass = moreorphans ? 0 : pass+1;
 801e802:	f1b8 0f00 	cmp.w	r8, #0
 801e806:	d101      	bne.n	801e80c <lfs_fs_deorphan+0x1d0>
 801e808:	3601      	adds	r6, #1
 801e80a:	e723      	b.n	801e654 <lfs_fs_deorphan+0x18>
 801e80c:	2600      	movs	r6, #0
 801e80e:	e721      	b.n	801e654 <lfs_fs_deorphan+0x18>
    return lfs_tag_size(a->tag) & 0x1ff;
 801e810:	f895 1030 	ldrb.w	r1, [r5, #48]	@ 0x30
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 801e814:	4249      	negs	r1, r1
 801e816:	b249      	sxtb	r1, r1
 801e818:	4628      	mov	r0, r5
 801e81a:	f7fc fffb 	bl	801b814 <lfs_fs_preporphans>
 801e81e:	4604      	mov	r4, r0
 801e820:	e000      	b.n	801e824 <lfs_fs_deorphan+0x1e8>
        return 0;
 801e822:	2400      	movs	r4, #0
}
 801e824:	4620      	mov	r0, r4
 801e826:	b024      	add	sp, #144	@ 0x90
 801e828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e82c:	080373ac 	.word	0x080373ac
 801e830:	080398c4 	.word	0x080398c4
 801e834:	08039d98 	.word	0x08039d98
 801e838:	000ffc08 	.word	0x000ffc08
 801e83c:	7ffffc00 	.word	0x7ffffc00
 801e840:	08039d0c 	.word	0x08039d0c
 801e844:	600ffc08 	.word	0x600ffc08
 801e848:	08039d50 	.word	0x08039d50

0801e84c <lfs_dir_commit>:
        const struct lfs_mattr *attrs, int attrcount) {
 801e84c:	b510      	push	{r4, lr}
 801e84e:	4604      	mov	r4, r0
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 801e850:	f7ff fcf8 	bl	801e244 <lfs_dir_orphaningcommit>
    if (orphans < 0) {
 801e854:	2800      	cmp	r0, #0
 801e856:	db00      	blt.n	801e85a <lfs_dir_commit+0xe>
    if (orphans) {
 801e858:	b900      	cbnz	r0, 801e85c <lfs_dir_commit+0x10>
}
 801e85a:	bd10      	pop	{r4, pc}
        int err = lfs_fs_deorphan(lfs, false);
 801e85c:	2100      	movs	r1, #0
 801e85e:	4620      	mov	r0, r4
 801e860:	f7ff feec 	bl	801e63c <lfs_fs_deorphan>
        if (err) {
 801e864:	e7f9      	b.n	801e85a <lfs_dir_commit+0xe>
	...

0801e868 <lfs_fs_desuperblock>:
static int lfs_fs_desuperblock(lfs_t *lfs) {
 801e868:	b530      	push	{r4, r5, lr}
 801e86a:	b093      	sub	sp, #76	@ 0x4c
    return lfs_tag_size(a->tag) >> 9;
 801e86c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 801e86e:	f413 7f00 	tst.w	r3, #512	@ 0x200
 801e872:	d103      	bne.n	801e87c <lfs_fs_desuperblock+0x14>
        return 0;
 801e874:	2500      	movs	r5, #0
}
 801e876:	4628      	mov	r0, r5
 801e878:	b013      	add	sp, #76	@ 0x4c
 801e87a:	bd30      	pop	{r4, r5, pc}
 801e87c:	4604      	mov	r4, r0
    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 801e87e:	4b1a      	ldr	r3, [pc, #104]	@ (801e8e8 <lfs_fs_desuperblock+0x80>)
 801e880:	9301      	str	r3, [sp, #4]
 801e882:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801e884:	9300      	str	r3, [sp, #0]
 801e886:	6a03      	ldr	r3, [r0, #32]
 801e888:	f241 22fc 	movw	r2, #4860	@ 0x12fc
 801e88c:	4917      	ldr	r1, [pc, #92]	@ (801e8ec <lfs_fs_desuperblock+0x84>)
 801e88e:	4818      	ldr	r0, [pc, #96]	@ (801e8f0 <lfs_fs_desuperblock+0x88>)
 801e890:	f00b fec8 	bl	802a624 <printf>
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 801e894:	f104 0220 	add.w	r2, r4, #32
 801e898:	a908      	add	r1, sp, #32
 801e89a:	4620      	mov	r0, r4
 801e89c:	f7fe f9a6 	bl	801cbec <lfs_dir_fetch>
    if (err) {
 801e8a0:	4605      	mov	r5, r0
 801e8a2:	2800      	cmp	r0, #0
 801e8a4:	d1e7      	bne.n	801e876 <lfs_fs_desuperblock+0xe>
        .version     = lfs_fs_disk_version(lfs),
 801e8a6:	4620      	mov	r0, r4
 801e8a8:	f7fc feb6 	bl	801b618 <lfs_fs_disk_version>
    lfs_superblock_t superblock = {
 801e8ac:	9002      	str	r0, [sp, #8]
        .block_size  = lfs->cfg->block_size,
 801e8ae:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801e8b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    lfs_superblock_t superblock = {
 801e8b2:	9303      	str	r3, [sp, #12]
        .block_count = lfs->block_count,
 801e8b4:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
    lfs_superblock_t superblock = {
 801e8b6:	9304      	str	r3, [sp, #16]
        .name_max    = lfs->name_max,
 801e8b8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
    lfs_superblock_t superblock = {
 801e8ba:	9305      	str	r3, [sp, #20]
        .file_max    = lfs->file_max,
 801e8bc:	6f63      	ldr	r3, [r4, #116]	@ 0x74
    lfs_superblock_t superblock = {
 801e8be:	9306      	str	r3, [sp, #24]
        .attr_max    = lfs->attr_max,
 801e8c0:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
    lfs_superblock_t superblock = {
 801e8c2:	9307      	str	r3, [sp, #28]
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 801e8c4:	4b0b      	ldr	r3, [pc, #44]	@ (801e8f4 <lfs_fs_desuperblock+0x8c>)
 801e8c6:	9310      	str	r3, [sp, #64]	@ 0x40
 801e8c8:	ab02      	add	r3, sp, #8
 801e8ca:	9311      	str	r3, [sp, #68]	@ 0x44
 801e8cc:	2301      	movs	r3, #1
 801e8ce:	aa10      	add	r2, sp, #64	@ 0x40
 801e8d0:	a908      	add	r1, sp, #32
 801e8d2:	4620      	mov	r0, r4
 801e8d4:	f7ff ffba 	bl	801e84c <lfs_dir_commit>
    if (err) {
 801e8d8:	4605      	mov	r5, r0
 801e8da:	2800      	cmp	r0, #0
 801e8dc:	d1cb      	bne.n	801e876 <lfs_fs_desuperblock+0xe>
    lfs_fs_prepsuperblock(lfs, false);
 801e8de:	2100      	movs	r1, #0
 801e8e0:	4620      	mov	r0, r4
 801e8e2:	f7fc ff40 	bl	801b766 <lfs_fs_prepsuperblock>
    return 0;
 801e8e6:	e7c6      	b.n	801e876 <lfs_fs_desuperblock+0xe>
 801e8e8:	080373ac 	.word	0x080373ac
 801e8ec:	080398c4 	.word	0x080398c4
 801e8f0:	08039dc8 	.word	0x08039dc8
 801e8f4:	20100018 	.word	0x20100018

0801e8f8 <lfs_fs_demove>:
    return lfs_tag_type1(a->tag);
 801e8f8:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
    return (tag & 0x70000000) >> 20;
 801e8fa:	0d1a      	lsrs	r2, r3, #20
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 801e8fc:	f412 6fe0 	tst.w	r2, #1792	@ 0x700
 801e900:	d101      	bne.n	801e906 <lfs_fs_demove+0xe>
        return 0;
 801e902:	2000      	movs	r0, #0
}
 801e904:	4770      	bx	lr
static int lfs_fs_demove(lfs_t *lfs) {
 801e906:	b530      	push	{r4, r5, lr}
 801e908:	b08f      	sub	sp, #60	@ 0x3c
 801e90a:	4604      	mov	r4, r0
    return (tag & 0x000ffc00) >> 10;
 801e90c:	f3c3 2389 	ubfx	r3, r3, #10, #10
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 801e910:	4a1d      	ldr	r2, [pc, #116]	@ (801e988 <lfs_fs_demove+0x90>)
 801e912:	9202      	str	r2, [sp, #8]
 801e914:	9301      	str	r3, [sp, #4]
 801e916:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801e918:	9300      	str	r3, [sp, #0]
 801e91a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801e91c:	f241 3224 	movw	r2, #4900	@ 0x1324
 801e920:	491a      	ldr	r1, [pc, #104]	@ (801e98c <lfs_fs_demove+0x94>)
 801e922:	481b      	ldr	r0, [pc, #108]	@ (801e990 <lfs_fs_demove+0x98>)
 801e924:	f00b fe7e 	bl	802a624 <printf>
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 801e928:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    return (tag & 0x7ff00000) >> 20;
 801e92a:	f3c3 530a 	ubfx	r3, r3, #20, #11
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 801e92e:	f240 42ff 	movw	r2, #1279	@ 0x4ff
 801e932:	4293      	cmp	r3, r2
 801e934:	d108      	bne.n	801e948 <lfs_fs_demove+0x50>
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 801e936:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 801e93a:	a904      	add	r1, sp, #16
 801e93c:	4620      	mov	r0, r4
 801e93e:	f7fe f955 	bl	801cbec <lfs_dir_fetch>
    if (err) {
 801e942:	b140      	cbz	r0, 801e956 <lfs_fs_demove+0x5e>
}
 801e944:	b00f      	add	sp, #60	@ 0x3c
 801e946:	bd30      	pop	{r4, r5, pc}
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 801e948:	4b12      	ldr	r3, [pc, #72]	@ (801e994 <lfs_fs_demove+0x9c>)
 801e94a:	4a13      	ldr	r2, [pc, #76]	@ (801e998 <lfs_fs_demove+0xa0>)
 801e94c:	f241 312b 	movw	r1, #4907	@ 0x132b
 801e950:	480e      	ldr	r0, [pc, #56]	@ (801e98c <lfs_fs_demove+0x94>)
 801e952:	f00b fe33 	bl	802a5bc <__assert_func>
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 801e956:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
    return (tag & 0x000ffc00) >> 10;
 801e958:	f3c5 2589 	ubfx	r5, r5, #10, #10
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801e95c:	2200      	movs	r2, #0
 801e95e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801e962:	4620      	mov	r0, r4
 801e964:	f7fc ff06 	bl	801b774 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 801e968:	02ab      	lsls	r3, r5, #10
 801e96a:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801e96e:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801e972:	930c      	str	r3, [sp, #48]	@ 0x30
 801e974:	2300      	movs	r3, #0
 801e976:	930d      	str	r3, [sp, #52]	@ 0x34
 801e978:	2301      	movs	r3, #1
 801e97a:	aa0c      	add	r2, sp, #48	@ 0x30
 801e97c:	a904      	add	r1, sp, #16
 801e97e:	4620      	mov	r0, r4
 801e980:	f7ff ff64 	bl	801e84c <lfs_dir_commit>
    if (err) {
 801e984:	e7de      	b.n	801e944 <lfs_fs_demove+0x4c>
 801e986:	bf00      	nop
 801e988:	080373ac 	.word	0x080373ac
 801e98c:	080398c4 	.word	0x080398c4
 801e990:	08039dfc 	.word	0x08039dfc
 801e994:	08039e30 	.word	0x08039e30
 801e998:	0803a584 	.word	0x0803a584

0801e99c <lfs_fs_forceconsistency>:
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 801e99c:	b510      	push	{r4, lr}
 801e99e:	4604      	mov	r4, r0
    int err = lfs_fs_desuperblock(lfs);
 801e9a0:	f7ff ff62 	bl	801e868 <lfs_fs_desuperblock>
    if (err) {
 801e9a4:	4603      	mov	r3, r0
 801e9a6:	b108      	cbz	r0, 801e9ac <lfs_fs_forceconsistency+0x10>
}
 801e9a8:	4618      	mov	r0, r3
 801e9aa:	bd10      	pop	{r4, pc}
    err = lfs_fs_demove(lfs);
 801e9ac:	4620      	mov	r0, r4
 801e9ae:	f7ff ffa3 	bl	801e8f8 <lfs_fs_demove>
    if (err) {
 801e9b2:	4603      	mov	r3, r0
 801e9b4:	2800      	cmp	r0, #0
 801e9b6:	d1f7      	bne.n	801e9a8 <lfs_fs_forceconsistency+0xc>
    err = lfs_fs_deorphan(lfs, true);
 801e9b8:	2101      	movs	r1, #1
 801e9ba:	4620      	mov	r0, r4
 801e9bc:	f7ff fe3e 	bl	801e63c <lfs_fs_deorphan>
 801e9c0:	4603      	mov	r3, r0
    if (err) {
 801e9c2:	e7f1      	b.n	801e9a8 <lfs_fs_forceconsistency+0xc>

0801e9c4 <lfs_dir_drop>:
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 801e9c4:	b570      	push	{r4, r5, r6, lr}
 801e9c6:	b082      	sub	sp, #8
 801e9c8:	4605      	mov	r5, r0
 801e9ca:	460e      	mov	r6, r1
 801e9cc:	4614      	mov	r4, r2
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 801e9ce:	f100 0248 	add.w	r2, r0, #72	@ 0x48
 801e9d2:	4621      	mov	r1, r4
 801e9d4:	f7fd f92a 	bl	801bc2c <lfs_dir_getgstate>
    if (err) {
 801e9d8:	b108      	cbz	r0, 801e9de <lfs_dir_drop+0x1a>
}
 801e9da:	b002      	add	sp, #8
 801e9dc:	bd70      	pop	{r4, r5, r6, pc}
    lfs_pair_tole32(tail->tail);
 801e9de:	f104 0118 	add.w	r1, r4, #24
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 801e9e2:	7de2      	ldrb	r2, [r4, #23]
 801e9e4:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801e9e8:	4b05      	ldr	r3, [pc, #20]	@ (801ea00 <lfs_dir_drop+0x3c>)
 801e9ea:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801e9ee:	9300      	str	r3, [sp, #0]
 801e9f0:	9101      	str	r1, [sp, #4]
 801e9f2:	2301      	movs	r3, #1
 801e9f4:	466a      	mov	r2, sp
 801e9f6:	4631      	mov	r1, r6
 801e9f8:	4628      	mov	r0, r5
 801e9fa:	f7ff ff27 	bl	801e84c <lfs_dir_commit>
    if (err) {
 801e9fe:	e7ec      	b.n	801e9da <lfs_dir_drop+0x16>
 801ea00:	000ffc08 	.word	0x000ffc08

0801ea04 <lfs_file_sync_>:
    if (file->flags & LFS_F_ERRED) {
 801ea04:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801ea06:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 801ea0a:	d001      	beq.n	801ea10 <lfs_file_sync_+0xc>
        return 0;
 801ea0c:	2000      	movs	r0, #0
}
 801ea0e:	4770      	bx	lr
static int lfs_file_sync_(lfs_t *lfs, lfs_file_t *file) {
 801ea10:	b530      	push	{r4, r5, lr}
 801ea12:	b087      	sub	sp, #28
 801ea14:	4605      	mov	r5, r0
 801ea16:	460c      	mov	r4, r1
    int err = lfs_file_flush(lfs, file);
 801ea18:	f7fe fcae 	bl	801d378 <lfs_file_flush>
    if (err) {
 801ea1c:	2800      	cmp	r0, #0
 801ea1e:	d136      	bne.n	801ea8e <lfs_file_sync_+0x8a>
    if ((file->flags & LFS_F_DIRTY) &&
 801ea20:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ea22:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 801ea26:	d036      	beq.n	801ea96 <lfs_file_sync_+0x92>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801ea28:	68a2      	ldr	r2, [r4, #8]
 801ea2a:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801ea2e:	d036      	beq.n	801ea9e <lfs_file_sync_+0x9a>
 801ea30:	68e2      	ldr	r2, [r4, #12]
 801ea32:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801ea36:	d030      	beq.n	801ea9a <lfs_file_sync_+0x96>
 801ea38:	4602      	mov	r2, r0
    if ((file->flags & LFS_F_DIRTY) &&
 801ea3a:	f012 0f01 	tst.w	r2, #1
 801ea3e:	d12a      	bne.n	801ea96 <lfs_file_sync_+0x92>
        if (!(file->flags & LFS_F_INLINE)) {
 801ea40:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801ea44:	d02d      	beq.n	801eaa2 <lfs_file_sync_+0x9e>
        if (file->flags & LFS_F_INLINE) {
 801ea46:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ea48:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801ea4c:	d033      	beq.n	801eab6 <lfs_file_sync_+0xb2>
            buffer = file->cache.buffer;
 801ea4e:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
            size = file->ctz.size;
 801ea50:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
            type = LFS_TYPE_INLINESTRUCT;
 801ea52:	f240 2201 	movw	r2, #513	@ 0x201
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 801ea56:	88a3      	ldrh	r3, [r4, #4]
 801ea58:	029b      	lsls	r3, r3, #10
 801ea5a:	ea43 5202 	orr.w	r2, r3, r2, lsl #20
 801ea5e:	4302      	orrs	r2, r0
 801ea60:	9202      	str	r2, [sp, #8]
 801ea62:	9103      	str	r1, [sp, #12]
 801ea64:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 801ea66:	6891      	ldr	r1, [r2, #8]
 801ea68:	430b      	orrs	r3, r1
 801ea6a:	f043 5381 	orr.w	r3, r3, #270532608	@ 0x10200000
 801ea6e:	9304      	str	r3, [sp, #16]
 801ea70:	6853      	ldr	r3, [r2, #4]
 801ea72:	9305      	str	r3, [sp, #20]
 801ea74:	2302      	movs	r3, #2
 801ea76:	aa02      	add	r2, sp, #8
 801ea78:	f104 0108 	add.w	r1, r4, #8
 801ea7c:	4628      	mov	r0, r5
 801ea7e:	f7ff fee5 	bl	801e84c <lfs_dir_commit>
        if (err) {
 801ea82:	bb20      	cbnz	r0, 801eace <lfs_file_sync_+0xca>
        file->flags &= ~LFS_F_DIRTY;
 801ea84:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ea86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801ea8a:	6323      	str	r3, [r4, #48]	@ 0x30
 801ea8c:	e003      	b.n	801ea96 <lfs_file_sync_+0x92>
        file->flags |= LFS_F_ERRED;
 801ea8e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ea90:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801ea94:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801ea96:	b007      	add	sp, #28
 801ea98:	bd30      	pop	{r4, r5, pc}
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801ea9a:	2201      	movs	r2, #1
 801ea9c:	e7cd      	b.n	801ea3a <lfs_file_sync_+0x36>
 801ea9e:	2201      	movs	r2, #1
 801eaa0:	e7cb      	b.n	801ea3a <lfs_file_sync_+0x36>
            err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 801eaa2:	2300      	movs	r3, #0
 801eaa4:	462a      	mov	r2, r5
 801eaa6:	f105 0110 	add.w	r1, r5, #16
 801eaaa:	4628      	mov	r0, r5
 801eaac:	f7fd fc82 	bl	801c3b4 <lfs_bd_sync>
            if (err) {
 801eab0:	2800      	cmp	r0, #0
 801eab2:	d0c8      	beq.n	801ea46 <lfs_file_sync_+0x42>
 801eab4:	e7ef      	b.n	801ea96 <lfs_file_sync_+0x92>
            ctz = file->ctz;
 801eab6:	466b      	mov	r3, sp
 801eab8:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 801eabc:	e892 0003 	ldmia.w	r2, {r0, r1}
 801eac0:	e883 0003 	stmia.w	r3, {r0, r1}
            size = sizeof(ctz);
 801eac4:	2008      	movs	r0, #8
            buffer = &ctz;
 801eac6:	4619      	mov	r1, r3
            type = LFS_TYPE_CTZSTRUCT;
 801eac8:	f240 2202 	movw	r2, #514	@ 0x202
 801eacc:	e7c3      	b.n	801ea56 <lfs_file_sync_+0x52>
            file->flags |= LFS_F_ERRED;
 801eace:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ead0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801ead4:	6323      	str	r3, [r4, #48]	@ 0x30
            return err;
 801ead6:	e7de      	b.n	801ea96 <lfs_file_sync_+0x92>

0801ead8 <lfs_deinit>:
static int lfs_deinit(lfs_t *lfs) {
 801ead8:	b510      	push	{r4, lr}
 801eada:	4604      	mov	r4, r0
    if (!lfs->cfg->read_buffer) {
 801eadc:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801eade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801eae0:	b13b      	cbz	r3, 801eaf2 <lfs_deinit+0x1a>
    if (!lfs->cfg->prog_buffer) {
 801eae2:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801eae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801eae6:	b143      	cbz	r3, 801eafa <lfs_deinit+0x22>
    if (!lfs->cfg->lookahead_buffer) {
 801eae8:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801eaea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801eaec:	b14b      	cbz	r3, 801eb02 <lfs_deinit+0x2a>
}
 801eaee:	2000      	movs	r0, #0
 801eaf0:	bd10      	pop	{r4, pc}
// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
#if defined(LFS_FREE)
    LFS_FREE(p);
#elif !defined(LFS_NO_MALLOC)
    free(p);
 801eaf2:	68c0      	ldr	r0, [r0, #12]
 801eaf4:	f7fc faea 	bl	801b0cc <vPortFree>
#else
    (void)p;
#endif
}
 801eaf8:	e7f3      	b.n	801eae2 <lfs_deinit+0xa>
    free(p);
 801eafa:	69e0      	ldr	r0, [r4, #28]
 801eafc:	f7fc fae6 	bl	801b0cc <vPortFree>
}
 801eb00:	e7f2      	b.n	801eae8 <lfs_deinit+0x10>
    free(p);
 801eb02:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801eb04:	f7fc fae2 	bl	801b0cc <vPortFree>
}
 801eb08:	e7f1      	b.n	801eaee <lfs_deinit+0x16>
	...

0801eb0c <lfs_init>:
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 801eb0c:	b538      	push	{r3, r4, r5, lr}
    lfs->cfg = cfg;
 801eb0e:	6681      	str	r1, [r0, #104]	@ 0x68
    lfs->block_count = cfg->block_count;  // May be 0
 801eb10:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 801eb12:	66c3      	str	r3, [r0, #108]	@ 0x6c
    LFS_ASSERT(lfs->cfg->read_size != 0);
 801eb14:	69cb      	ldr	r3, [r1, #28]
 801eb16:	2b00      	cmp	r3, #0
 801eb18:	f000 80b1 	beq.w	801ec7e <lfs_init+0x172>
 801eb1c:	4604      	mov	r4, r0
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 801eb1e:	6a0a      	ldr	r2, [r1, #32]
 801eb20:	2a00      	cmp	r2, #0
 801eb22:	f000 80b3 	beq.w	801ec8c <lfs_init+0x180>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 801eb26:	6b08      	ldr	r0, [r1, #48]	@ 0x30
 801eb28:	2800      	cmp	r0, #0
 801eb2a:	f000 80b6 	beq.w	801ec9a <lfs_init+0x18e>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 801eb2e:	fbb0 fcf3 	udiv	ip, r0, r3
 801eb32:	fb03 031c 	mls	r3, r3, ip, r0
 801eb36:	2b00      	cmp	r3, #0
 801eb38:	f040 80b6 	bne.w	801eca8 <lfs_init+0x19c>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 801eb3c:	fbb0 f3f2 	udiv	r3, r0, r2
 801eb40:	fb02 0313 	mls	r3, r2, r3, r0
 801eb44:	2b00      	cmp	r3, #0
 801eb46:	f040 80b6 	bne.w	801ecb6 <lfs_init+0x1aa>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 801eb4a:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801eb4c:	fbb2 f3f0 	udiv	r3, r2, r0
 801eb50:	fb00 2313 	mls	r3, r0, r3, r2
 801eb54:	2b00      	cmp	r3, #0
 801eb56:	f040 80b5 	bne.w	801ecc4 <lfs_init+0x1b8>
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 801eb5a:	2a7f      	cmp	r2, #127	@ 0x7f
 801eb5c:	f240 80b9 	bls.w	801ecd2 <lfs_init+0x1c6>
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 801eb60:	f1a2 0c08 	sub.w	ip, r2, #8
 801eb64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801eb68:	fbb3 f3fc 	udiv	r3, r3, ip
    return 32 - __builtin_clz(a-1);
 801eb6c:	3b01      	subs	r3, #1
 801eb6e:	fab3 f383 	clz	r3, r3
 801eb72:	f1c3 0320 	rsb	r3, r3, #32
 801eb76:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 801eb7a:	f0c0 80b1 	bcc.w	801ece0 <lfs_init+0x1d4>
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 801eb7e:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 801eb80:	2b00      	cmp	r3, #0
 801eb82:	f000 80b4 	beq.w	801ecee <lfs_init+0x1e2>
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 801eb86:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 801eb88:	b11b      	cbz	r3, 801eb92 <lfs_init+0x86>
 801eb8a:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 801eb8e:	f0c0 80b5 	bcc.w	801ecfc <lfs_init+0x1f0>
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 801eb92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801eb96:	d002      	beq.n	801eb9e <lfs_init+0x92>
 801eb98:	429a      	cmp	r2, r3
 801eb9a:	f0c0 80b6 	bcc.w	801ed0a <lfs_init+0x1fe>
    if (lfs->cfg->read_buffer) {
 801eb9e:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 801eba0:	2b00      	cmp	r3, #0
 801eba2:	f000 80b9 	beq.w	801ed18 <lfs_init+0x20c>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 801eba6:	60e3      	str	r3, [r4, #12]
    if (lfs->cfg->prog_buffer) {
 801eba8:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 801ebaa:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801ebac:	2b00      	cmp	r3, #0
 801ebae:	f000 80bf 	beq.w	801ed30 <lfs_init+0x224>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 801ebb2:	61e3      	str	r3, [r4, #28]
    lfs_cache_zero(lfs, &lfs->rcache);
 801ebb4:	4621      	mov	r1, r4
 801ebb6:	4620      	mov	r0, r4
 801ebb8:	f7fc fe5c 	bl	801b874 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 801ebbc:	f104 0110 	add.w	r1, r4, #16
 801ebc0:	4620      	mov	r0, r4
 801ebc2:	f7fc fe57 	bl	801b874 <lfs_cache_zero>
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 801ebc6:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801ebc8:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 801ebca:	2800      	cmp	r0, #0
 801ebcc:	f000 80b8 	beq.w	801ed40 <lfs_init+0x234>
    if (lfs->cfg->lookahead_buffer) {
 801ebd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ebd2:	2b00      	cmp	r3, #0
 801ebd4:	f000 80bb 	beq.w	801ed4e <lfs_init+0x242>
        lfs->lookahead.buffer = lfs->cfg->lookahead_buffer;
 801ebd8:	6663      	str	r3, [r4, #100]	@ 0x64
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 801ebda:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 801ebdc:	6c93      	ldr	r3, [r2, #72]	@ 0x48
 801ebde:	2bff      	cmp	r3, #255	@ 0xff
 801ebe0:	f200 80bc 	bhi.w	801ed5c <lfs_init+0x250>
    lfs->name_max = lfs->cfg->name_max;
 801ebe4:	6723      	str	r3, [r4, #112]	@ 0x70
    if (!lfs->name_max) {
 801ebe6:	b90b      	cbnz	r3, 801ebec <lfs_init+0xe0>
        lfs->name_max = LFS_NAME_MAX;
 801ebe8:	23ff      	movs	r3, #255	@ 0xff
 801ebea:	6723      	str	r3, [r4, #112]	@ 0x70
    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 801ebec:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 801ebee:	2b00      	cmp	r3, #0
 801ebf0:	f2c0 80bb 	blt.w	801ed6a <lfs_init+0x25e>
    lfs->file_max = lfs->cfg->file_max;
 801ebf4:	6763      	str	r3, [r4, #116]	@ 0x74
    if (!lfs->file_max) {
 801ebf6:	b913      	cbnz	r3, 801ebfe <lfs_init+0xf2>
        lfs->file_max = LFS_FILE_MAX;
 801ebf8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801ebfc:	6763      	str	r3, [r4, #116]	@ 0x74
    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 801ebfe:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 801ec00:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 801ec04:	428b      	cmp	r3, r1
 801ec06:	f200 80b7 	bhi.w	801ed78 <lfs_init+0x26c>
    lfs->attr_max = lfs->cfg->attr_max;
 801ec0a:	67a3      	str	r3, [r4, #120]	@ 0x78
    if (!lfs->attr_max) {
 801ec0c:	b913      	cbnz	r3, 801ec14 <lfs_init+0x108>
        lfs->attr_max = LFS_ATTR_MAX;
 801ec0e:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 801ec12:	67a3      	str	r3, [r4, #120]	@ 0x78
    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 801ec14:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 801ec16:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 801ec18:	4288      	cmp	r0, r1
 801ec1a:	f200 80b4 	bhi.w	801ed86 <lfs_init+0x27a>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801ec1e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 801ec20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801ec24:	d003      	beq.n	801ec2e <lfs_init+0x122>
 801ec26:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 801ec28:	42ab      	cmp	r3, r5
 801ec2a:	f200 80b3 	bhi.w	801ed94 <lfs_init+0x288>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801ec2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801ec32:	d003      	beq.n	801ec3c <lfs_init+0x130>
 801ec34:	6fa5      	ldr	r5, [r4, #120]	@ 0x78
 801ec36:	42ab      	cmp	r3, r5
 801ec38:	f200 80b3 	bhi.w	801eda2 <lfs_init+0x296>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801ec3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801ec40:	d006      	beq.n	801ec50 <lfs_init+0x144>
 801ec42:	2800      	cmp	r0, #0
 801ec44:	f000 80b4 	beq.w	801edb0 <lfs_init+0x2a4>
 801ec48:	08c1      	lsrs	r1, r0, #3
 801ec4a:	428b      	cmp	r3, r1
 801ec4c:	f200 80b2 	bhi.w	801edb4 <lfs_init+0x2a8>
    lfs->inline_max = lfs->cfg->inline_max;
 801ec50:	67e3      	str	r3, [r4, #124]	@ 0x7c
    if (lfs->inline_max == (lfs_size_t)-1) {
 801ec52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801ec56:	f000 80b4 	beq.w	801edc2 <lfs_init+0x2b6>
    } else if (lfs->inline_max == 0) {
 801ec5a:	2b00      	cmp	r3, #0
 801ec5c:	f040 80b3 	bne.w	801edc6 <lfs_init+0x2ba>
                lfs->cfg->cache_size,
 801ec60:	6b11      	ldr	r1, [r2, #48]	@ 0x30
        lfs->inline_max = lfs_min(
 801ec62:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
                    ((lfs->cfg->metadata_max)
 801ec64:	6d53      	ldr	r3, [r2, #84]	@ 0x54
        lfs->inline_max = lfs_min(
 801ec66:	2b00      	cmp	r3, #0
 801ec68:	f000 80be 	beq.w	801ede8 <lfs_init+0x2dc>
 801ec6c:	08db      	lsrs	r3, r3, #3
    return (a < b) ? a : b;
 801ec6e:	4283      	cmp	r3, r0
 801ec70:	bf28      	it	cs
 801ec72:	4603      	movcs	r3, r0
 801ec74:	428b      	cmp	r3, r1
 801ec76:	bf28      	it	cs
 801ec78:	460b      	movcs	r3, r1
 801ec7a:	67e3      	str	r3, [r4, #124]	@ 0x7c
 801ec7c:	e0a3      	b.n	801edc6 <lfs_init+0x2ba>
    LFS_ASSERT(lfs->cfg->read_size != 0);
 801ec7e:	4b5c      	ldr	r3, [pc, #368]	@ (801edf0 <lfs_init+0x2e4>)
 801ec80:	4a5c      	ldr	r2, [pc, #368]	@ (801edf4 <lfs_init+0x2e8>)
 801ec82:	f241 0152 	movw	r1, #4178	@ 0x1052
 801ec86:	485c      	ldr	r0, [pc, #368]	@ (801edf8 <lfs_init+0x2ec>)
 801ec88:	f00b fc98 	bl	802a5bc <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 801ec8c:	4b5b      	ldr	r3, [pc, #364]	@ (801edfc <lfs_init+0x2f0>)
 801ec8e:	4a59      	ldr	r2, [pc, #356]	@ (801edf4 <lfs_init+0x2e8>)
 801ec90:	f241 0153 	movw	r1, #4179	@ 0x1053
 801ec94:	4858      	ldr	r0, [pc, #352]	@ (801edf8 <lfs_init+0x2ec>)
 801ec96:	f00b fc91 	bl	802a5bc <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 801ec9a:	4b59      	ldr	r3, [pc, #356]	@ (801ee00 <lfs_init+0x2f4>)
 801ec9c:	4a55      	ldr	r2, [pc, #340]	@ (801edf4 <lfs_init+0x2e8>)
 801ec9e:	f241 0154 	movw	r1, #4180	@ 0x1054
 801eca2:	4855      	ldr	r0, [pc, #340]	@ (801edf8 <lfs_init+0x2ec>)
 801eca4:	f00b fc8a 	bl	802a5bc <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 801eca8:	4b56      	ldr	r3, [pc, #344]	@ (801ee04 <lfs_init+0x2f8>)
 801ecaa:	4a52      	ldr	r2, [pc, #328]	@ (801edf4 <lfs_init+0x2e8>)
 801ecac:	f241 0158 	movw	r1, #4184	@ 0x1058
 801ecb0:	4851      	ldr	r0, [pc, #324]	@ (801edf8 <lfs_init+0x2ec>)
 801ecb2:	f00b fc83 	bl	802a5bc <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 801ecb6:	4b54      	ldr	r3, [pc, #336]	@ (801ee08 <lfs_init+0x2fc>)
 801ecb8:	4a4e      	ldr	r2, [pc, #312]	@ (801edf4 <lfs_init+0x2e8>)
 801ecba:	f241 0159 	movw	r1, #4185	@ 0x1059
 801ecbe:	484e      	ldr	r0, [pc, #312]	@ (801edf8 <lfs_init+0x2ec>)
 801ecc0:	f00b fc7c 	bl	802a5bc <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 801ecc4:	4b51      	ldr	r3, [pc, #324]	@ (801ee0c <lfs_init+0x300>)
 801ecc6:	4a4b      	ldr	r2, [pc, #300]	@ (801edf4 <lfs_init+0x2e8>)
 801ecc8:	f241 015a 	movw	r1, #4186	@ 0x105a
 801eccc:	484a      	ldr	r0, [pc, #296]	@ (801edf8 <lfs_init+0x2ec>)
 801ecce:	f00b fc75 	bl	802a5bc <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 801ecd2:	4b4f      	ldr	r3, [pc, #316]	@ (801ee10 <lfs_init+0x304>)
 801ecd4:	4a47      	ldr	r2, [pc, #284]	@ (801edf4 <lfs_init+0x2e8>)
 801ecd6:	f241 015d 	movw	r1, #4189	@ 0x105d
 801ecda:	4847      	ldr	r0, [pc, #284]	@ (801edf8 <lfs_init+0x2ec>)
 801ecdc:	f00b fc6e 	bl	802a5bc <__assert_func>
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 801ece0:	4b4c      	ldr	r3, [pc, #304]	@ (801ee14 <lfs_init+0x308>)
 801ece2:	4a44      	ldr	r2, [pc, #272]	@ (801edf4 <lfs_init+0x2e8>)
 801ece4:	f44f 5183 	mov.w	r1, #4192	@ 0x1060
 801ece8:	4843      	ldr	r0, [pc, #268]	@ (801edf8 <lfs_init+0x2ec>)
 801ecea:	f00b fc67 	bl	802a5bc <__assert_func>
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 801ecee:	4b4a      	ldr	r3, [pc, #296]	@ (801ee18 <lfs_init+0x30c>)
 801ecf0:	4a40      	ldr	r2, [pc, #256]	@ (801edf4 <lfs_init+0x2e8>)
 801ecf2:	f241 0169 	movw	r1, #4201	@ 0x1069
 801ecf6:	4840      	ldr	r0, [pc, #256]	@ (801edf8 <lfs_init+0x2ec>)
 801ecf8:	f00b fc60 	bl	802a5bc <__assert_func>
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 801ecfc:	4b47      	ldr	r3, [pc, #284]	@ (801ee1c <lfs_init+0x310>)
 801ecfe:	4a3d      	ldr	r2, [pc, #244]	@ (801edf4 <lfs_init+0x2e8>)
 801ed00:	f241 016f 	movw	r1, #4207	@ 0x106f
 801ed04:	483c      	ldr	r0, [pc, #240]	@ (801edf8 <lfs_init+0x2ec>)
 801ed06:	f00b fc59 	bl	802a5bc <__assert_func>
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 801ed0a:	4b45      	ldr	r3, [pc, #276]	@ (801ee20 <lfs_init+0x314>)
 801ed0c:	4a39      	ldr	r2, [pc, #228]	@ (801edf4 <lfs_init+0x2e8>)
 801ed0e:	f241 0171 	movw	r1, #4209	@ 0x1071
 801ed12:	4839      	ldr	r0, [pc, #228]	@ (801edf8 <lfs_init+0x2ec>)
 801ed14:	f00b fc52 	bl	802a5bc <__assert_func>
    return malloc(size);
 801ed18:	f7fc f956 	bl	801afc8 <pvPortMalloc>
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 801ed1c:	60e0      	str	r0, [r4, #12]
        if (!lfs->rcache.buffer) {
 801ed1e:	2800      	cmp	r0, #0
 801ed20:	f47f af42 	bne.w	801eba8 <lfs_init+0x9c>
    lfs_deinit(lfs);
 801ed24:	4620      	mov	r0, r4
 801ed26:	f7ff fed7 	bl	801ead8 <lfs_deinit>
    return err;
 801ed2a:	f06f 000b 	mvn.w	r0, #11
 801ed2e:	e05a      	b.n	801ede6 <lfs_init+0x2da>
 801ed30:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 801ed32:	f7fc f949 	bl	801afc8 <pvPortMalloc>
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 801ed36:	61e0      	str	r0, [r4, #28]
        if (!lfs->pcache.buffer) {
 801ed38:	2800      	cmp	r0, #0
 801ed3a:	f47f af3b 	bne.w	801ebb4 <lfs_init+0xa8>
 801ed3e:	e7f1      	b.n	801ed24 <lfs_init+0x218>
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 801ed40:	4b38      	ldr	r3, [pc, #224]	@ (801ee24 <lfs_init+0x318>)
 801ed42:	4a2c      	ldr	r2, [pc, #176]	@ (801edf4 <lfs_init+0x2e8>)
 801ed44:	f241 0190 	movw	r1, #4240	@ 0x1090
 801ed48:	482b      	ldr	r0, [pc, #172]	@ (801edf8 <lfs_init+0x2ec>)
 801ed4a:	f00b fc37 	bl	802a5bc <__assert_func>
 801ed4e:	f7fc f93b 	bl	801afc8 <pvPortMalloc>
        lfs->lookahead.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 801ed52:	6660      	str	r0, [r4, #100]	@ 0x64
        if (!lfs->lookahead.buffer) {
 801ed54:	2800      	cmp	r0, #0
 801ed56:	f47f af40 	bne.w	801ebda <lfs_init+0xce>
 801ed5a:	e7e3      	b.n	801ed24 <lfs_init+0x218>
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 801ed5c:	4b32      	ldr	r3, [pc, #200]	@ (801ee28 <lfs_init+0x31c>)
 801ed5e:	4a25      	ldr	r2, [pc, #148]	@ (801edf4 <lfs_init+0x2e8>)
 801ed60:	f241 019c 	movw	r1, #4252	@ 0x109c
 801ed64:	4824      	ldr	r0, [pc, #144]	@ (801edf8 <lfs_init+0x2ec>)
 801ed66:	f00b fc29 	bl	802a5bc <__assert_func>
    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 801ed6a:	4b30      	ldr	r3, [pc, #192]	@ (801ee2c <lfs_init+0x320>)
 801ed6c:	4a21      	ldr	r2, [pc, #132]	@ (801edf4 <lfs_init+0x2e8>)
 801ed6e:	f241 01a2 	movw	r1, #4258	@ 0x10a2
 801ed72:	4821      	ldr	r0, [pc, #132]	@ (801edf8 <lfs_init+0x2ec>)
 801ed74:	f00b fc22 	bl	802a5bc <__assert_func>
    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 801ed78:	4b2d      	ldr	r3, [pc, #180]	@ (801ee30 <lfs_init+0x324>)
 801ed7a:	4a1e      	ldr	r2, [pc, #120]	@ (801edf4 <lfs_init+0x2e8>)
 801ed7c:	f241 01a8 	movw	r1, #4264	@ 0x10a8
 801ed80:	481d      	ldr	r0, [pc, #116]	@ (801edf8 <lfs_init+0x2ec>)
 801ed82:	f00b fc1b 	bl	802a5bc <__assert_func>
    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 801ed86:	4b2b      	ldr	r3, [pc, #172]	@ (801ee34 <lfs_init+0x328>)
 801ed88:	4a1a      	ldr	r2, [pc, #104]	@ (801edf4 <lfs_init+0x2e8>)
 801ed8a:	f241 01ae 	movw	r1, #4270	@ 0x10ae
 801ed8e:	481a      	ldr	r0, [pc, #104]	@ (801edf8 <lfs_init+0x2ec>)
 801ed90:	f00b fc14 	bl	802a5bc <__assert_func>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801ed94:	4b28      	ldr	r3, [pc, #160]	@ (801ee38 <lfs_init+0x32c>)
 801ed96:	4a17      	ldr	r2, [pc, #92]	@ (801edf4 <lfs_init+0x2e8>)
 801ed98:	f241 01b0 	movw	r1, #4272	@ 0x10b0
 801ed9c:	4816      	ldr	r0, [pc, #88]	@ (801edf8 <lfs_init+0x2ec>)
 801ed9e:	f00b fc0d 	bl	802a5bc <__assert_func>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801eda2:	4b26      	ldr	r3, [pc, #152]	@ (801ee3c <lfs_init+0x330>)
 801eda4:	4a13      	ldr	r2, [pc, #76]	@ (801edf4 <lfs_init+0x2e8>)
 801eda6:	f241 01b2 	movw	r1, #4274	@ 0x10b2
 801edaa:	4813      	ldr	r0, [pc, #76]	@ (801edf8 <lfs_init+0x2ec>)
 801edac:	f00b fc06 	bl	802a5bc <__assert_func>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801edb0:	08c9      	lsrs	r1, r1, #3
 801edb2:	e74a      	b.n	801ec4a <lfs_init+0x13e>
 801edb4:	4b22      	ldr	r3, [pc, #136]	@ (801ee40 <lfs_init+0x334>)
 801edb6:	4a0f      	ldr	r2, [pc, #60]	@ (801edf4 <lfs_init+0x2e8>)
 801edb8:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 801edbc:	480e      	ldr	r0, [pc, #56]	@ (801edf8 <lfs_init+0x2ec>)
 801edbe:	f00b fbfd 	bl	802a5bc <__assert_func>
        lfs->inline_max = 0;
 801edc2:	2300      	movs	r3, #0
 801edc4:	67e3      	str	r3, [r4, #124]	@ 0x7c
    lfs->root[0] = LFS_BLOCK_NULL;
 801edc6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801edca:	6223      	str	r3, [r4, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 801edcc:	6263      	str	r3, [r4, #36]	@ 0x24
    lfs->mlist = NULL;
 801edce:	2000      	movs	r0, #0
 801edd0:	62a0      	str	r0, [r4, #40]	@ 0x28
    lfs->seed = 0;
 801edd2:	62e0      	str	r0, [r4, #44]	@ 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 801edd4:	63e0      	str	r0, [r4, #60]	@ 0x3c
 801edd6:	6420      	str	r0, [r4, #64]	@ 0x40
 801edd8:	6460      	str	r0, [r4, #68]	@ 0x44
    lfs->gstate = (lfs_gstate_t){0};
 801edda:	6320      	str	r0, [r4, #48]	@ 0x30
 801eddc:	6360      	str	r0, [r4, #52]	@ 0x34
 801edde:	63a0      	str	r0, [r4, #56]	@ 0x38
    lfs->gdelta = (lfs_gstate_t){0};
 801ede0:	64a0      	str	r0, [r4, #72]	@ 0x48
 801ede2:	64e0      	str	r0, [r4, #76]	@ 0x4c
 801ede4:	6520      	str	r0, [r4, #80]	@ 0x50
}
 801ede6:	bd38      	pop	{r3, r4, r5, pc}
                        : lfs->cfg->block_size)/8));
 801ede8:	6a53      	ldr	r3, [r2, #36]	@ 0x24
        lfs->inline_max = lfs_min(
 801edea:	08db      	lsrs	r3, r3, #3
 801edec:	e73f      	b.n	801ec6e <lfs_init+0x162>
 801edee:	bf00      	nop
 801edf0:	08039e64 	.word	0x08039e64
 801edf4:	0803a644 	.word	0x0803a644
 801edf8:	080398c4 	.word	0x080398c4
 801edfc:	08039e80 	.word	0x08039e80
 801ee00:	08039e9c 	.word	0x08039e9c
 801ee04:	08039eb8 	.word	0x08039eb8
 801ee08:	08039ee8 	.word	0x08039ee8
 801ee0c:	08039f18 	.word	0x08039f18
 801ee10:	08039f4c 	.word	0x08039f4c
 801ee14:	08039f68 	.word	0x08039f68
 801ee18:	08039fb4 	.word	0x08039fb4
 801ee1c:	08039fd0 	.word	0x08039fd0
 801ee20:	0803a024 	.word	0x0803a024
 801ee24:	0803a084 	.word	0x0803a084
 801ee28:	0803a0a4 	.word	0x0803a0a4
 801ee2c:	0803a0c0 	.word	0x0803a0c0
 801ee30:	0803a0e4 	.word	0x0803a0e4
 801ee34:	0803a100 	.word	0x0803a100
 801ee38:	0803a130 	.word	0x0803a130
 801ee3c:	0803a188 	.word	0x0803a188
 801ee40:	0803a1d8 	.word	0x0803a1d8

0801ee44 <lfs_format_>:
static int lfs_format_(lfs_t *lfs, const struct lfs_config *cfg) {
 801ee44:	b570      	push	{r4, r5, r6, lr}
 801ee46:	b096      	sub	sp, #88	@ 0x58
 801ee48:	4604      	mov	r4, r0
 801ee4a:	460d      	mov	r5, r1
        err = lfs_init(lfs, cfg);
 801ee4c:	f7ff fe5e 	bl	801eb0c <lfs_init>
        if (err) {
 801ee50:	4606      	mov	r6, r0
 801ee52:	b9f0      	cbnz	r0, 801ee92 <lfs_format_+0x4e>
        LFS_ASSERT(cfg->block_count != 0);
 801ee54:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801ee56:	b1fb      	cbz	r3, 801ee98 <lfs_format_+0x54>
        memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 801ee58:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801ee5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801ee5c:	2100      	movs	r1, #0
 801ee5e:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801ee60:	f00e f8fe 	bl	802d060 <memset>
        lfs->lookahead.start = 0;
 801ee64:	2200      	movs	r2, #0
 801ee66:	6562      	str	r2, [r4, #84]	@ 0x54
        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,
 801ee68:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801ee6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ee6c:	00db      	lsls	r3, r3, #3
 801ee6e:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
    return (a < b) ? a : b;
 801ee70:	428b      	cmp	r3, r1
 801ee72:	bf28      	it	cs
 801ee74:	460b      	movcs	r3, r1
 801ee76:	65a3      	str	r3, [r4, #88]	@ 0x58
        lfs->lookahead.next = 0;
 801ee78:	65e2      	str	r2, [r4, #92]	@ 0x5c
        lfs_alloc_ckpoint(lfs);
 801ee7a:	4620      	mov	r0, r4
 801ee7c:	f7fc fbda 	bl	801b634 <lfs_alloc_ckpoint>
        err = lfs_dir_alloc(lfs, &root);
 801ee80:	a906      	add	r1, sp, #24
 801ee82:	4620      	mov	r0, r4
 801ee84:	f7fe f820 	bl	801cec8 <lfs_dir_alloc>
        if (err) {
 801ee88:	4606      	mov	r6, r0
 801ee8a:	b160      	cbz	r0, 801eea6 <lfs_format_+0x62>
    lfs_deinit(lfs);
 801ee8c:	4620      	mov	r0, r4
 801ee8e:	f7ff fe23 	bl	801ead8 <lfs_deinit>
}
 801ee92:	4630      	mov	r0, r6
 801ee94:	b016      	add	sp, #88	@ 0x58
 801ee96:	bd70      	pop	{r4, r5, r6, pc}
        LFS_ASSERT(cfg->block_count != 0);
 801ee98:	4b20      	ldr	r3, [pc, #128]	@ (801ef1c <lfs_format_+0xd8>)
 801ee9a:	4a21      	ldr	r2, [pc, #132]	@ (801ef20 <lfs_format_+0xdc>)
 801ee9c:	f241 01f4 	movw	r1, #4340	@ 0x10f4
 801eea0:	4820      	ldr	r0, [pc, #128]	@ (801ef24 <lfs_format_+0xe0>)
 801eea2:	f00b fb8b 	bl	802a5bc <__assert_func>
            .version     = lfs_fs_disk_version(lfs),
 801eea6:	4620      	mov	r0, r4
 801eea8:	f7fc fbb6 	bl	801b618 <lfs_fs_disk_version>
        lfs_superblock_t superblock = {
 801eeac:	9000      	str	r0, [sp, #0]
            .block_size  = lfs->cfg->block_size,
 801eeae:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801eeb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        lfs_superblock_t superblock = {
 801eeb2:	9301      	str	r3, [sp, #4]
            .block_count = lfs->block_count,
 801eeb4:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
        lfs_superblock_t superblock = {
 801eeb6:	9302      	str	r3, [sp, #8]
            .name_max    = lfs->name_max,
 801eeb8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
        lfs_superblock_t superblock = {
 801eeba:	9303      	str	r3, [sp, #12]
            .file_max    = lfs->file_max,
 801eebc:	6f63      	ldr	r3, [r4, #116]	@ 0x74
        lfs_superblock_t superblock = {
 801eebe:	9304      	str	r3, [sp, #16]
            .attr_max    = lfs->attr_max,
 801eec0:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
        lfs_superblock_t superblock = {
 801eec2:	9305      	str	r3, [sp, #20]
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 801eec4:	4b18      	ldr	r3, [pc, #96]	@ (801ef28 <lfs_format_+0xe4>)
 801eec6:	930e      	str	r3, [sp, #56]	@ 0x38
 801eec8:	2300      	movs	r3, #0
 801eeca:	930f      	str	r3, [sp, #60]	@ 0x3c
 801eecc:	4b17      	ldr	r3, [pc, #92]	@ (801ef2c <lfs_format_+0xe8>)
 801eece:	9310      	str	r3, [sp, #64]	@ 0x40
 801eed0:	4b17      	ldr	r3, [pc, #92]	@ (801ef30 <lfs_format_+0xec>)
 801eed2:	9311      	str	r3, [sp, #68]	@ 0x44
 801eed4:	4b17      	ldr	r3, [pc, #92]	@ (801ef34 <lfs_format_+0xf0>)
 801eed6:	9312      	str	r3, [sp, #72]	@ 0x48
 801eed8:	f8cd d04c 	str.w	sp, [sp, #76]	@ 0x4c
 801eedc:	2303      	movs	r3, #3
 801eede:	aa0e      	add	r2, sp, #56	@ 0x38
 801eee0:	a906      	add	r1, sp, #24
 801eee2:	4620      	mov	r0, r4
 801eee4:	f7ff fcb2 	bl	801e84c <lfs_dir_commit>
        if (err) {
 801eee8:	4606      	mov	r6, r0
 801eeea:	2800      	cmp	r0, #0
 801eeec:	d1ce      	bne.n	801ee8c <lfs_format_+0x48>
        root.erased = false;
 801eeee:	2200      	movs	r2, #0
 801eef0:	f88d 202e 	strb.w	r2, [sp, #46]	@ 0x2e
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 801eef4:	4613      	mov	r3, r2
 801eef6:	a906      	add	r1, sp, #24
 801eef8:	4620      	mov	r0, r4
 801eefa:	f7ff fca7 	bl	801e84c <lfs_dir_commit>
        if (err) {
 801eefe:	4606      	mov	r6, r0
 801ef00:	2800      	cmp	r0, #0
 801ef02:	d1c3      	bne.n	801ee8c <lfs_format_+0x48>
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 801ef04:	2300      	movs	r3, #0
 801ef06:	9314      	str	r3, [sp, #80]	@ 0x50
 801ef08:	2301      	movs	r3, #1
 801ef0a:	9315      	str	r3, [sp, #84]	@ 0x54
 801ef0c:	aa14      	add	r2, sp, #80	@ 0x50
 801ef0e:	a906      	add	r1, sp, #24
 801ef10:	4620      	mov	r0, r4
 801ef12:	f7fd fe6b 	bl	801cbec <lfs_dir_fetch>
 801ef16:	4606      	mov	r6, r0
        if (err) {
 801ef18:	e7b8      	b.n	801ee8c <lfs_format_+0x48>
 801ef1a:	bf00      	nop
 801ef1c:	0803a268 	.word	0x0803a268
 801ef20:	0803a650 	.word	0x0803a650
 801ef24:	080398c4 	.word	0x080398c4
 801ef28:	40100000 	.word	0x40100000
 801ef2c:	0ff00008 	.word	0x0ff00008
 801ef30:	0803a280 	.word	0x0803a280
 801ef34:	20100018 	.word	0x20100018

0801ef38 <lfs_unmount_>:
static int lfs_unmount_(lfs_t *lfs) {
 801ef38:	b508      	push	{r3, lr}
    return lfs_deinit(lfs);
 801ef3a:	f7ff fdcd 	bl	801ead8 <lfs_deinit>
}
 801ef3e:	bd08      	pop	{r3, pc}

0801ef40 <lfs_mount_>:
static int lfs_mount_(lfs_t *lfs, const struct lfs_config *cfg) {
 801ef40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef44:	b09b      	sub	sp, #108	@ 0x6c
 801ef46:	4604      	mov	r4, r0
    int err = lfs_init(lfs, cfg);
 801ef48:	f7ff fde0 	bl	801eb0c <lfs_init>
    if (err) {
 801ef4c:	9005      	str	r0, [sp, #20]
 801ef4e:	b9d8      	cbnz	r0, 801ef88 <lfs_mount_+0x48>
    lfs_mdir_t dir = {.tail = {0, 1}};
 801ef50:	2220      	movs	r2, #32
 801ef52:	2100      	movs	r1, #0
 801ef54:	a80f      	add	r0, sp, #60	@ 0x3c
 801ef56:	f00e f883 	bl	802d060 <memset>
 801ef5a:	2501      	movs	r5, #1
 801ef5c:	9516      	str	r5, [sp, #88]	@ 0x58
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801ef5e:	4aa1      	ldr	r2, [pc, #644]	@ (801f1e4 <lfs_mount_+0x2a4>)
 801ef60:	ab0d      	add	r3, sp, #52	@ 0x34
 801ef62:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ef66:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801ef6a:	462e      	mov	r6, r5
    while (!lfs_pair_isnull(dir.tail)) {
 801ef6c:	e073      	b.n	801f056 <lfs_mount_+0x116>
            LFS_WARN("Cycle detected in tail list");
 801ef6e:	4b9e      	ldr	r3, [pc, #632]	@ (801f1e8 <lfs_mount_+0x2a8>)
 801ef70:	f241 123d 	movw	r2, #4413	@ 0x113d
 801ef74:	499d      	ldr	r1, [pc, #628]	@ (801f1ec <lfs_mount_+0x2ac>)
 801ef76:	489e      	ldr	r0, [pc, #632]	@ (801f1f0 <lfs_mount_+0x2b0>)
 801ef78:	f00b fb54 	bl	802a624 <printf>
            err = LFS_ERR_CORRUPT;
 801ef7c:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801ef80:	9305      	str	r3, [sp, #20]
    lfs_unmount_(lfs);
 801ef82:	4620      	mov	r0, r4
 801ef84:	f7ff ffd8 	bl	801ef38 <lfs_unmount_>
}
 801ef88:	9805      	ldr	r0, [sp, #20]
 801ef8a:	b01b      	add	sp, #108	@ 0x6c
 801ef8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            tortoise[0] = dir.tail[0];
 801ef90:	970d      	str	r7, [sp, #52]	@ 0x34
            tortoise[1] = dir.tail[1];
 801ef92:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ef94:	930e      	str	r3, [sp, #56]	@ 0x38
            tortoise_period *= 2;
 801ef96:	0076      	lsls	r6, r6, #1
            tortoise_i = 0;
 801ef98:	2500      	movs	r5, #0
 801ef9a:	e075      	b.n	801f088 <lfs_mount_+0x148>
                LFS_ERROR("Invalid version "
 801ef9c:	4620      	mov	r0, r4
 801ef9e:	f7fc fb44 	bl	801b62a <lfs_fs_disk_version_minor>
 801efa2:	4b91      	ldr	r3, [pc, #580]	@ (801f1e8 <lfs_mount_+0x2a8>)
 801efa4:	9303      	str	r3, [sp, #12]
 801efa6:	9002      	str	r0, [sp, #8]
 801efa8:	f8cd 9004 	str.w	r9, [sp, #4]
 801efac:	b2bf      	uxth	r7, r7
 801efae:	9700      	str	r7, [sp, #0]
 801efb0:	4643      	mov	r3, r8
 801efb2:	f241 126b 	movw	r2, #4459	@ 0x116b
 801efb6:	498d      	ldr	r1, [pc, #564]	@ (801f1ec <lfs_mount_+0x2ac>)
 801efb8:	488e      	ldr	r0, [pc, #568]	@ (801f1f4 <lfs_mount_+0x2b4>)
 801efba:	f00b fb33 	bl	802a624 <printf>
                err = LFS_ERR_INVAL;
 801efbe:	f06f 0315 	mvn.w	r3, #21
 801efc2:	9305      	str	r3, [sp, #20]
                goto cleanup;
 801efc4:	e7dd      	b.n	801ef82 <lfs_mount_+0x42>
                LFS_DEBUG("Found older minor version "
 801efc6:	4b88      	ldr	r3, [pc, #544]	@ (801f1e8 <lfs_mount_+0x2a8>)
 801efc8:	9303      	str	r3, [sp, #12]
 801efca:	9002      	str	r0, [sp, #8]
 801efcc:	f8cd 9004 	str.w	r9, [sp, #4]
 801efd0:	b2bf      	uxth	r7, r7
 801efd2:	9700      	str	r7, [sp, #0]
 801efd4:	4643      	mov	r3, r8
 801efd6:	f241 127a 	movw	r2, #4474	@ 0x117a
 801efda:	4984      	ldr	r1, [pc, #528]	@ (801f1ec <lfs_mount_+0x2ac>)
 801efdc:	4886      	ldr	r0, [pc, #536]	@ (801f1f8 <lfs_mount_+0x2b8>)
 801efde:	f00b fb21 	bl	802a624 <printf>
                needssuperblock = true;
 801efe2:	2301      	movs	r3, #1
 801efe4:	9304      	str	r3, [sp, #16]
 801efe6:	e08f      	b.n	801f108 <lfs_mount_+0x1c8>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 801efe8:	497f      	ldr	r1, [pc, #508]	@ (801f1e8 <lfs_mount_+0x2a8>)
 801efea:	9101      	str	r1, [sp, #4]
 801efec:	9200      	str	r2, [sp, #0]
 801efee:	f241 1289 	movw	r2, #4489	@ 0x1189
 801eff2:	497e      	ldr	r1, [pc, #504]	@ (801f1ec <lfs_mount_+0x2ac>)
 801eff4:	4881      	ldr	r0, [pc, #516]	@ (801f1fc <lfs_mount_+0x2bc>)
 801eff6:	f00b fb15 	bl	802a624 <printf>
                    err = LFS_ERR_INVAL;
 801effa:	f06f 0315 	mvn.w	r3, #21
 801effe:	9305      	str	r3, [sp, #20]
                    goto cleanup;
 801f000:	e7bf      	b.n	801ef82 <lfs_mount_+0x42>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 801f002:	4979      	ldr	r1, [pc, #484]	@ (801f1e8 <lfs_mount_+0x2a8>)
 801f004:	9101      	str	r1, [sp, #4]
 801f006:	9200      	str	r2, [sp, #0]
 801f008:	f241 1294 	movw	r2, #4500	@ 0x1194
 801f00c:	4977      	ldr	r1, [pc, #476]	@ (801f1ec <lfs_mount_+0x2ac>)
 801f00e:	487c      	ldr	r0, [pc, #496]	@ (801f200 <lfs_mount_+0x2c0>)
 801f010:	f00b fb08 	bl	802a624 <printf>
                    err = LFS_ERR_INVAL;
 801f014:	f06f 0315 	mvn.w	r3, #21
 801f018:	9305      	str	r3, [sp, #20]
                    goto cleanup;
 801f01a:	e7b2      	b.n	801ef82 <lfs_mount_+0x42>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 801f01c:	4972      	ldr	r1, [pc, #456]	@ (801f1e8 <lfs_mount_+0x2a8>)
 801f01e:	9101      	str	r1, [sp, #4]
 801f020:	9200      	str	r2, [sp, #0]
 801f022:	f241 129f 	movw	r2, #4511	@ 0x119f
 801f026:	4971      	ldr	r1, [pc, #452]	@ (801f1ec <lfs_mount_+0x2ac>)
 801f028:	4876      	ldr	r0, [pc, #472]	@ (801f204 <lfs_mount_+0x2c4>)
 801f02a:	f00b fafb 	bl	802a624 <printf>
                    err = LFS_ERR_INVAL;
 801f02e:	f06f 0315 	mvn.w	r3, #21
 801f032:	9305      	str	r3, [sp, #20]
                    goto cleanup;
 801f034:	e7a5      	b.n	801ef82 <lfs_mount_+0x42>
            lfs->block_count = superblock.block_count;
 801f036:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f038:	66e3      	str	r3, [r4, #108]	@ 0x6c
            if (superblock.block_size != lfs->cfg->block_size) {
 801f03a:	9b08      	ldr	r3, [sp, #32]
 801f03c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801f03e:	4293      	cmp	r3, r2
 801f040:	f040 8096 	bne.w	801f170 <lfs_mount_+0x230>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 801f044:	f104 0230 	add.w	r2, r4, #48	@ 0x30
 801f048:	a90f      	add	r1, sp, #60	@ 0x3c
 801f04a:	4620      	mov	r0, r4
 801f04c:	f7fc fdee 	bl	801bc2c <lfs_dir_getgstate>
        if (err) {
 801f050:	2800      	cmp	r0, #0
 801f052:	f040 809e 	bne.w	801f192 <lfs_mount_+0x252>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801f056:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801f058:	f1b7 3fff 	cmp.w	r7, #4294967295	@ 0xffffffff
 801f05c:	f000 809d 	beq.w	801f19a <lfs_mount_+0x25a>
 801f060:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f062:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801f066:	f000 8096 	beq.w	801f196 <lfs_mount_+0x256>
 801f06a:	9b05      	ldr	r3, [sp, #20]
    while (!lfs_pair_isnull(dir.tail)) {
 801f06c:	f013 0301 	ands.w	r3, r3, #1
 801f070:	f040 8095 	bne.w	801f19e <lfs_mount_+0x25e>
        if (lfs_pair_issync(dir.tail, tortoise)) {
 801f074:	a90d      	add	r1, sp, #52	@ 0x34
 801f076:	a815      	add	r0, sp, #84	@ 0x54
 801f078:	f7fc fa60 	bl	801b53c <lfs_pair_issync>
 801f07c:	9004      	str	r0, [sp, #16]
 801f07e:	2800      	cmp	r0, #0
 801f080:	f47f af75 	bne.w	801ef6e <lfs_mount_+0x2e>
        if (tortoise_i == tortoise_period) {
 801f084:	42b5      	cmp	r5, r6
 801f086:	d083      	beq.n	801ef90 <lfs_mount_+0x50>
        tortoise_i += 1;
 801f088:	3501      	adds	r5, #1
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 801f08a:	9417      	str	r4, [sp, #92]	@ 0x5c
 801f08c:	4b5e      	ldr	r3, [pc, #376]	@ (801f208 <lfs_mount_+0x2c8>)
 801f08e:	9318      	str	r3, [sp, #96]	@ 0x60
 801f090:	2308      	movs	r3, #8
 801f092:	9319      	str	r3, [sp, #100]	@ 0x64
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 801f094:	ab17      	add	r3, sp, #92	@ 0x5c
 801f096:	9303      	str	r3, [sp, #12]
 801f098:	4b5c      	ldr	r3, [pc, #368]	@ (801f20c <lfs_mount_+0x2cc>)
 801f09a:	9302      	str	r3, [sp, #8]
 801f09c:	2300      	movs	r3, #0
 801f09e:	9301      	str	r3, [sp, #4]
 801f0a0:	4b5b      	ldr	r3, [pc, #364]	@ (801f210 <lfs_mount_+0x2d0>)
 801f0a2:	9300      	str	r3, [sp, #0]
 801f0a4:	4b5b      	ldr	r3, [pc, #364]	@ (801f214 <lfs_mount_+0x2d4>)
 801f0a6:	aa15      	add	r2, sp, #84	@ 0x54
 801f0a8:	a90f      	add	r1, sp, #60	@ 0x3c
 801f0aa:	4620      	mov	r0, r4
 801f0ac:	f7fd fabe 	bl	801c62c <lfs_dir_fetchmatch>
        if (tag < 0) {
 801f0b0:	2800      	cmp	r0, #0
 801f0b2:	db6c      	blt.n	801f18e <lfs_mount_+0x24e>
        if (tag && !lfs_tag_isdelete(tag)) {
 801f0b4:	2800      	cmp	r0, #0
 801f0b6:	d0c5      	beq.n	801f044 <lfs_mount_+0x104>
    return ((int32_t)(tag << 22) >> 22) == -1;
 801f0b8:	f340 0009 	sbfx	r0, r0, #0, #10
        if (tag && !lfs_tag_isdelete(tag)) {
 801f0bc:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 801f0c0:	d0c0      	beq.n	801f044 <lfs_mount_+0x104>
            lfs->root[0] = dir.pair[0];
 801f0c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f0c4:	6223      	str	r3, [r4, #32]
            lfs->root[1] = dir.pair[1];
 801f0c6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f0c8:	6263      	str	r3, [r4, #36]	@ 0x24
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 801f0ca:	ab07      	add	r3, sp, #28
 801f0cc:	9300      	str	r3, [sp, #0]
 801f0ce:	4b52      	ldr	r3, [pc, #328]	@ (801f218 <lfs_mount_+0x2d8>)
 801f0d0:	4a50      	ldr	r2, [pc, #320]	@ (801f214 <lfs_mount_+0x2d4>)
 801f0d2:	a90f      	add	r1, sp, #60	@ 0x3c
 801f0d4:	4620      	mov	r0, r4
 801f0d6:	f7fc fd9b 	bl	801bc10 <lfs_dir_get>
            if (tag < 0) {
 801f0da:	2800      	cmp	r0, #0
 801f0dc:	db55      	blt.n	801f18a <lfs_mount_+0x24a>
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 801f0de:	9f07      	ldr	r7, [sp, #28]
 801f0e0:	ea4f 4817 	mov.w	r8, r7, lsr #16
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 801f0e4:	fa1f fa87 	uxth.w	sl, r7
            if (major_version != lfs_fs_disk_version_major(lfs)
 801f0e8:	4620      	mov	r0, r4
 801f0ea:	f7fc fa99 	bl	801b620 <lfs_fs_disk_version_major>
 801f0ee:	4681      	mov	r9, r0
 801f0f0:	4540      	cmp	r0, r8
 801f0f2:	f47f af53 	bne.w	801ef9c <lfs_mount_+0x5c>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 801f0f6:	4620      	mov	r0, r4
 801f0f8:	f7fc fa97 	bl	801b62a <lfs_fs_disk_version_minor>
 801f0fc:	4550      	cmp	r0, sl
 801f0fe:	f4ff af4d 	bcc.w	801ef9c <lfs_mount_+0x5c>
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 801f102:	4550      	cmp	r0, sl
 801f104:	f63f af5f 	bhi.w	801efc6 <lfs_mount_+0x86>
            lfs_fs_prepsuperblock(lfs, needssuperblock);
 801f108:	9904      	ldr	r1, [sp, #16]
 801f10a:	4620      	mov	r0, r4
 801f10c:	f7fc fb2b 	bl	801b766 <lfs_fs_prepsuperblock>
            if (superblock.name_max) {
 801f110:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f112:	b123      	cbz	r3, 801f11e <lfs_mount_+0x1de>
                if (superblock.name_max > lfs->name_max) {
 801f114:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801f116:	4293      	cmp	r3, r2
 801f118:	f63f af66 	bhi.w	801efe8 <lfs_mount_+0xa8>
                lfs->name_max = superblock.name_max;
 801f11c:	6723      	str	r3, [r4, #112]	@ 0x70
            if (superblock.file_max) {
 801f11e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f120:	b123      	cbz	r3, 801f12c <lfs_mount_+0x1ec>
                if (superblock.file_max > lfs->file_max) {
 801f122:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 801f124:	4293      	cmp	r3, r2
 801f126:	f63f af6c 	bhi.w	801f002 <lfs_mount_+0xc2>
                lfs->file_max = superblock.file_max;
 801f12a:	6763      	str	r3, [r4, #116]	@ 0x74
            if (superblock.attr_max) {
 801f12c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f12e:	b14b      	cbz	r3, 801f144 <lfs_mount_+0x204>
                if (superblock.attr_max > lfs->attr_max) {
 801f130:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801f132:	4293      	cmp	r3, r2
 801f134:	f63f af72 	bhi.w	801f01c <lfs_mount_+0xdc>
                lfs->attr_max = superblock.attr_max;
 801f138:	67a3      	str	r3, [r4, #120]	@ 0x78
                lfs->inline_max = lfs_min(lfs->inline_max, lfs->attr_max);
 801f13a:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 801f13c:	4293      	cmp	r3, r2
 801f13e:	bf28      	it	cs
 801f140:	4613      	movcs	r3, r2
 801f142:	67e3      	str	r3, [r4, #124]	@ 0x7c
            if (lfs->cfg->block_count
 801f144:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 801f146:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801f148:	2900      	cmp	r1, #0
 801f14a:	f43f af74 	beq.w	801f036 <lfs_mount_+0xf6>
                    && superblock.block_count != lfs->cfg->block_count) {
 801f14e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f150:	4299      	cmp	r1, r3
 801f152:	f43f af70 	beq.w	801f036 <lfs_mount_+0xf6>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 801f156:	4a24      	ldr	r2, [pc, #144]	@ (801f1e8 <lfs_mount_+0x2a8>)
 801f158:	9201      	str	r2, [sp, #4]
 801f15a:	9100      	str	r1, [sp, #0]
 801f15c:	f241 12ae 	movw	r2, #4526	@ 0x11ae
 801f160:	4922      	ldr	r1, [pc, #136]	@ (801f1ec <lfs_mount_+0x2ac>)
 801f162:	482e      	ldr	r0, [pc, #184]	@ (801f21c <lfs_mount_+0x2dc>)
 801f164:	f00b fa5e 	bl	802a624 <printf>
                err = LFS_ERR_INVAL;
 801f168:	f06f 0315 	mvn.w	r3, #21
 801f16c:	9305      	str	r3, [sp, #20]
                goto cleanup;
 801f16e:	e708      	b.n	801ef82 <lfs_mount_+0x42>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 801f170:	491d      	ldr	r1, [pc, #116]	@ (801f1e8 <lfs_mount_+0x2a8>)
 801f172:	9101      	str	r1, [sp, #4]
 801f174:	9200      	str	r2, [sp, #0]
 801f176:	f241 12b7 	movw	r2, #4535	@ 0x11b7
 801f17a:	491c      	ldr	r1, [pc, #112]	@ (801f1ec <lfs_mount_+0x2ac>)
 801f17c:	4828      	ldr	r0, [pc, #160]	@ (801f220 <lfs_mount_+0x2e0>)
 801f17e:	f00b fa51 	bl	802a624 <printf>
                err = LFS_ERR_INVAL;
 801f182:	f06f 0315 	mvn.w	r3, #21
 801f186:	9305      	str	r3, [sp, #20]
                goto cleanup;
 801f188:	e6fb      	b.n	801ef82 <lfs_mount_+0x42>
                err = tag;
 801f18a:	9005      	str	r0, [sp, #20]
 801f18c:	e6f9      	b.n	801ef82 <lfs_mount_+0x42>
            err = tag;
 801f18e:	9005      	str	r0, [sp, #20]
 801f190:	e6f7      	b.n	801ef82 <lfs_mount_+0x42>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 801f192:	9005      	str	r0, [sp, #20]
 801f194:	e6f5      	b.n	801ef82 <lfs_mount_+0x42>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801f196:	2301      	movs	r3, #1
 801f198:	e768      	b.n	801f06c <lfs_mount_+0x12c>
 801f19a:	2301      	movs	r3, #1
 801f19c:	e766      	b.n	801f06c <lfs_mount_+0x12c>
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 801f19e:	f104 0030 	add.w	r0, r4, #48	@ 0x30
    for (int i = 0; i < 3; i++) {
 801f1a2:	9a05      	ldr	r2, [sp, #20]
 801f1a4:	2a02      	cmp	r2, #2
 801f1a6:	dc05      	bgt.n	801f1b4 <lfs_mount_+0x274>
        if (((uint32_t*)a)[i] != 0) {
 801f1a8:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 801f1ac:	b909      	cbnz	r1, 801f1b2 <lfs_mount_+0x272>
    for (int i = 0; i < 3; i++) {
 801f1ae:	3201      	adds	r2, #1
 801f1b0:	e7f8      	b.n	801f1a4 <lfs_mount_+0x264>
            return false;
 801f1b2:	2300      	movs	r3, #0
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 801f1b4:	b3b3      	cbz	r3, 801f224 <lfs_mount_+0x2e4>
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 801f1b6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801f1b8:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801f1bc:	6323      	str	r3, [r4, #48]	@ 0x30
    lfs->gdisk = lfs->gstate;
 801f1be:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 801f1c2:	f104 0230 	add.w	r2, r4, #48	@ 0x30
 801f1c6:	ca07      	ldmia	r2, {r0, r1, r2}
 801f1c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    lfs->lookahead.start = lfs->seed % lfs->block_count;
 801f1cc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801f1ce:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 801f1d0:	fbb3 f1f2 	udiv	r1, r3, r2
 801f1d4:	fb02 3311 	mls	r3, r2, r1, r3
 801f1d8:	6563      	str	r3, [r4, #84]	@ 0x54
    lfs_alloc_drop(lfs);
 801f1da:	4620      	mov	r0, r4
 801f1dc:	f7fc fa2d 	bl	801b63a <lfs_alloc_drop>
    return 0;
 801f1e0:	e6d2      	b.n	801ef88 <lfs_mount_+0x48>
 801f1e2:	bf00      	nop
 801f1e4:	080363a4 	.word	0x080363a4
 801f1e8:	080373ac 	.word	0x080373ac
 801f1ec:	080398c4 	.word	0x080398c4
 801f1f0:	08039a84 	.word	0x08039a84
 801f1f4:	0803a28c 	.word	0x0803a28c
 801f1f8:	0803a2c4 	.word	0x0803a2c4
 801f1fc:	0803a304 	.word	0x0803a304
 801f200:	0803a338 	.word	0x0803a338
 801f204:	0803a36c 	.word	0x0803a36c
 801f208:	0803a280 	.word	0x0803a280
 801f20c:	0801c3ed 	.word	0x0801c3ed
 801f210:	0ff00008 	.word	0x0ff00008
 801f214:	7ffffc00 	.word	0x7ffffc00
 801f218:	20100018 	.word	0x20100018
 801f21c:	0803a3a0 	.word	0x0803a3a0
 801f220:	0803a3d4 	.word	0x0803a3d4
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 801f224:	4b06      	ldr	r3, [pc, #24]	@ (801f240 <lfs_mount_+0x300>)
 801f226:	9302      	str	r3, [sp, #8]
 801f228:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801f22a:	9301      	str	r3, [sp, #4]
 801f22c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801f22e:	9300      	str	r3, [sp, #0]
 801f230:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801f232:	f241 12c7 	movw	r2, #4551	@ 0x11c7
 801f236:	4903      	ldr	r1, [pc, #12]	@ (801f244 <lfs_mount_+0x304>)
 801f238:	4803      	ldr	r0, [pc, #12]	@ (801f248 <lfs_mount_+0x308>)
 801f23a:	f00b f9f3 	bl	802a624 <printf>
 801f23e:	e7ba      	b.n	801f1b6 <lfs_mount_+0x276>
 801f240:	080373ac 	.word	0x080373ac
 801f244:	080398c4 	.word	0x080398c4
 801f248:	0803a404 	.word	0x0803a404

0801f24c <lfs_file_close_>:
static int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {
 801f24c:	b570      	push	{r4, r5, r6, lr}
 801f24e:	4606      	mov	r6, r0
 801f250:	460c      	mov	r4, r1
    int err = lfs_file_sync_(lfs, file);
 801f252:	f7ff fbd7 	bl	801ea04 <lfs_file_sync_>
 801f256:	4605      	mov	r5, r0
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 801f258:	4621      	mov	r1, r4
 801f25a:	4630      	mov	r0, r6
 801f25c:	f7fc f9cd 	bl	801b5fa <lfs_mlist_remove>
    if (!file->cfg->buffer) {
 801f260:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801f262:	681b      	ldr	r3, [r3, #0]
 801f264:	b10b      	cbz	r3, 801f26a <lfs_file_close_+0x1e>
}
 801f266:	4628      	mov	r0, r5
 801f268:	bd70      	pop	{r4, r5, r6, pc}
    free(p);
 801f26a:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 801f26c:	f7fb ff2e 	bl	801b0cc <vPortFree>
    return err;
 801f270:	e7f9      	b.n	801f266 <lfs_file_close_+0x1a>
	...

0801f274 <lfs_dir_find>:
        const char **path, uint16_t *id) {
 801f274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f278:	b08d      	sub	sp, #52	@ 0x34
 801f27a:	4682      	mov	sl, r0
 801f27c:	4688      	mov	r8, r1
 801f27e:	9207      	str	r2, [sp, #28]
    const char *name = *path;
 801f280:	6812      	ldr	r2, [r2, #0]
 801f282:	9205      	str	r2, [sp, #20]
    if (id) {
 801f284:	9306      	str	r3, [sp, #24]
 801f286:	b11b      	cbz	r3, 801f290 <lfs_dir_find+0x1c>
 801f288:	461a      	mov	r2, r3
        *id = 0x3ff;
 801f28a:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801f28e:	8013      	strh	r3, [r2, #0]
    dir->tail[0] = lfs->root[0];
 801f290:	f8da 3020 	ldr.w	r3, [sl, #32]
 801f294:	f8c8 3018 	str.w	r3, [r8, #24]
    dir->tail[1] = lfs->root[1];
 801f298:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 801f29c:	f8c8 301c 	str.w	r3, [r8, #28]
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 801f2a0:	4e4d      	ldr	r6, [pc, #308]	@ (801f3d8 <lfs_dir_find+0x164>)
        name += strspn(name, "/");
 801f2a2:	4d4e      	ldr	r5, [pc, #312]	@ (801f3dc <lfs_dir_find+0x168>)
 801f2a4:	4629      	mov	r1, r5
 801f2a6:	9f05      	ldr	r7, [sp, #20]
 801f2a8:	4638      	mov	r0, r7
 801f2aa:	f00d ff49 	bl	802d140 <strspn>
 801f2ae:	4604      	mov	r4, r0
 801f2b0:	eb07 0900 	add.w	r9, r7, r0
        lfs_size_t namelen = strcspn(name, "/");
 801f2b4:	4629      	mov	r1, r5
 801f2b6:	4648      	mov	r0, r9
 801f2b8:	f00d fef6 	bl	802d0a8 <strcspn>
 801f2bc:	4605      	mov	r5, r0
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 801f2be:	2801      	cmp	r0, #1
 801f2c0:	d00a      	beq.n	801f2d8 <lfs_dir_find+0x64>
 801f2c2:	2d02      	cmp	r5, #2
 801f2c4:	d00c      	beq.n	801f2e0 <lfs_dir_find+0x6c>
        const char *suffix = name + namelen;
 801f2c6:	eb09 0305 	add.w	r3, r9, r5
 801f2ca:	9305      	str	r3, [sp, #20]
 801f2cc:	469b      	mov	fp, r3
        int depth = 1;
 801f2ce:	2701      	movs	r7, #1
 801f2d0:	e013      	b.n	801f2fa <lfs_dir_find+0x86>
 801f2d2:	46b2      	mov	sl, r6
 801f2d4:	4606      	mov	r6, r0
 801f2d6:	e7e4      	b.n	801f2a2 <lfs_dir_find+0x2e>
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 801f2d8:	5d3b      	ldrb	r3, [r7, r4]
 801f2da:	2b2e      	cmp	r3, #46	@ 0x2e
 801f2dc:	d1f1      	bne.n	801f2c2 <lfs_dir_find+0x4e>
 801f2de:	e006      	b.n	801f2ee <lfs_dir_find+0x7a>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 801f2e0:	2202      	movs	r2, #2
 801f2e2:	493f      	ldr	r1, [pc, #252]	@ (801f3e0 <lfs_dir_find+0x16c>)
 801f2e4:	4648      	mov	r0, r9
 801f2e6:	f00d fe27 	bl	802cf38 <memcmp>
 801f2ea:	2800      	cmp	r0, #0
 801f2ec:	d1eb      	bne.n	801f2c6 <lfs_dir_find+0x52>
            name += namelen;
 801f2ee:	eb09 0305 	add.w	r3, r9, r5
 801f2f2:	9305      	str	r3, [sp, #20]
            goto nextname;
 801f2f4:	e7d5      	b.n	801f2a2 <lfs_dir_find+0x2e>
                depth += 1;
 801f2f6:	3701      	adds	r7, #1
            suffix += sufflen;
 801f2f8:	44a3      	add	fp, r4
            suffix += strspn(suffix, "/");
 801f2fa:	4c38      	ldr	r4, [pc, #224]	@ (801f3dc <lfs_dir_find+0x168>)
 801f2fc:	4621      	mov	r1, r4
 801f2fe:	4658      	mov	r0, fp
 801f300:	f00d ff1e 	bl	802d140 <strspn>
 801f304:	4483      	add	fp, r0
            sufflen = strcspn(suffix, "/");
 801f306:	4621      	mov	r1, r4
 801f308:	4658      	mov	r0, fp
 801f30a:	f00d fecd 	bl	802d0a8 <strcspn>
            if (sufflen == 0) {
 801f30e:	4604      	mov	r4, r0
 801f310:	b170      	cbz	r0, 801f330 <lfs_dir_find+0xbc>
            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 801f312:	2802      	cmp	r0, #2
 801f314:	d1ef      	bne.n	801f2f6 <lfs_dir_find+0x82>
 801f316:	2202      	movs	r2, #2
 801f318:	4931      	ldr	r1, [pc, #196]	@ (801f3e0 <lfs_dir_find+0x16c>)
 801f31a:	4658      	mov	r0, fp
 801f31c:	f00d fe0c 	bl	802cf38 <memcmp>
 801f320:	2800      	cmp	r0, #0
 801f322:	d1e8      	bne.n	801f2f6 <lfs_dir_find+0x82>
                if (depth == 0) {
 801f324:	3f01      	subs	r7, #1
 801f326:	d1e7      	bne.n	801f2f8 <lfs_dir_find+0x84>
                    name = suffix + sufflen;
 801f328:	eb0b 0304 	add.w	r3, fp, r4
 801f32c:	9305      	str	r3, [sp, #20]
                    goto nextname;
 801f32e:	e7b8      	b.n	801f2a2 <lfs_dir_find+0x2e>
        if (name[0] == '\0') {
 801f330:	f899 3000 	ldrb.w	r3, [r9]
 801f334:	2b00      	cmp	r3, #0
 801f336:	d04a      	beq.n	801f3ce <lfs_dir_find+0x15a>
        *path = name;
 801f338:	9b07      	ldr	r3, [sp, #28]
 801f33a:	f8c3 9000 	str.w	r9, [r3]
    return (tag & 0x7ff00000) >> 20;
 801f33e:	f3c6 530a 	ubfx	r3, r6, #20, #11
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 801f342:	2b02      	cmp	r3, #2
 801f344:	d13f      	bne.n	801f3c6 <lfs_dir_find+0x152>
    return (tag & 0x000ffc00) >> 10;
 801f346:	f3c6 2689 	ubfx	r6, r6, #10, #10
        if (lfs_tag_id(tag) != 0x3ff) {
 801f34a:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801f34e:	429e      	cmp	r6, r3
 801f350:	d102      	bne.n	801f358 <lfs_dir_find+0xe4>
 801f352:	464c      	mov	r4, r9
 801f354:	4656      	mov	r6, sl
 801f356:	e029      	b.n	801f3ac <lfs_dir_find+0x138>
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 801f358:	02b6      	lsls	r6, r6, #10
 801f35a:	f108 0318 	add.w	r3, r8, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801f35e:	9300      	str	r3, [sp, #0]
 801f360:	f046 5300 	orr.w	r3, r6, #536870912	@ 0x20000000
 801f364:	f043 0308 	orr.w	r3, r3, #8
 801f368:	4a1e      	ldr	r2, [pc, #120]	@ (801f3e4 <lfs_dir_find+0x170>)
 801f36a:	4641      	mov	r1, r8
 801f36c:	4650      	mov	r0, sl
 801f36e:	f7fc fc4f 	bl	801bc10 <lfs_dir_get>
            if (res < 0) {
 801f372:	1e06      	subs	r6, r0, #0
 801f374:	db2b      	blt.n	801f3ce <lfs_dir_find+0x15a>
 801f376:	464c      	mov	r4, r9
 801f378:	4656      	mov	r6, sl
 801f37a:	e017      	b.n	801f3ac <lfs_dir_find+0x138>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801f37c:	9b06      	ldr	r3, [sp, #24]
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 801f37e:	9609      	str	r6, [sp, #36]	@ 0x24
 801f380:	940a      	str	r4, [sp, #40]	@ 0x28
 801f382:	950b      	str	r5, [sp, #44]	@ 0x2c
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801f384:	aa09      	add	r2, sp, #36	@ 0x24
 801f386:	9203      	str	r2, [sp, #12]
 801f388:	4a17      	ldr	r2, [pc, #92]	@ (801f3e8 <lfs_dir_find+0x174>)
 801f38a:	9202      	str	r2, [sp, #8]
 801f38c:	9301      	str	r3, [sp, #4]
 801f38e:	9500      	str	r5, [sp, #0]
 801f390:	f04f 43f0 	mov.w	r3, #2013265920	@ 0x78000000
 801f394:	463a      	mov	r2, r7
 801f396:	4641      	mov	r1, r8
 801f398:	4630      	mov	r0, r6
 801f39a:	f7fd f947 	bl	801c62c <lfs_dir_fetchmatch>
            if (tag < 0) {
 801f39e:	2800      	cmp	r0, #0
 801f3a0:	db14      	blt.n	801f3cc <lfs_dir_find+0x158>
            if (tag) {
 801f3a2:	2800      	cmp	r0, #0
 801f3a4:	d195      	bne.n	801f2d2 <lfs_dir_find+0x5e>
            if (!dir->split) {
 801f3a6:	f898 3017 	ldrb.w	r3, [r8, #23]
 801f3aa:	b14b      	cbz	r3, 801f3c0 <lfs_dir_find+0x14c>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801f3ac:	f108 0718 	add.w	r7, r8, #24
                    (strchr(name, '/') == NULL) ? id : NULL,
 801f3b0:	212f      	movs	r1, #47	@ 0x2f
 801f3b2:	4620      	mov	r0, r4
 801f3b4:	f00d fe6b 	bl	802d08e <strchr>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801f3b8:	2800      	cmp	r0, #0
 801f3ba:	d0df      	beq.n	801f37c <lfs_dir_find+0x108>
 801f3bc:	2300      	movs	r3, #0
 801f3be:	e7de      	b.n	801f37e <lfs_dir_find+0x10a>
                return LFS_ERR_NOENT;
 801f3c0:	f06f 0601 	mvn.w	r6, #1
 801f3c4:	e003      	b.n	801f3ce <lfs_dir_find+0x15a>
            return LFS_ERR_NOTDIR;
 801f3c6:	f06f 0613 	mvn.w	r6, #19
 801f3ca:	e000      	b.n	801f3ce <lfs_dir_find+0x15a>
 801f3cc:	4606      	mov	r6, r0
}
 801f3ce:	4630      	mov	r0, r6
 801f3d0:	b00d      	add	sp, #52	@ 0x34
 801f3d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f3d6:	bf00      	nop
 801f3d8:	002ffc00 	.word	0x002ffc00
 801f3dc:	0803ac7c 	.word	0x0803ac7c
 801f3e0:	0803a43c 	.word	0x0803a43c
 801f3e4:	700ffc00 	.word	0x700ffc00
 801f3e8:	0801c3ed 	.word	0x0801c3ed

0801f3ec <lfs_remove_>:
static int lfs_remove_(lfs_t *lfs, const char *path) {
 801f3ec:	b570      	push	{r4, r5, r6, lr}
 801f3ee:	b09a      	sub	sp, #104	@ 0x68
 801f3f0:	4604      	mov	r4, r0
 801f3f2:	9103      	str	r1, [sp, #12]
    int err = lfs_fs_forceconsistency(lfs);
 801f3f4:	f7ff fad2 	bl	801e99c <lfs_fs_forceconsistency>
    if (err) {
 801f3f8:	4603      	mov	r3, r0
 801f3fa:	b110      	cbz	r0, 801f402 <lfs_remove_+0x16>
}
 801f3fc:	4618      	mov	r0, r3
 801f3fe:	b01a      	add	sp, #104	@ 0x68
 801f400:	bd70      	pop	{r4, r5, r6, pc}
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 801f402:	2300      	movs	r3, #0
 801f404:	aa03      	add	r2, sp, #12
 801f406:	a910      	add	r1, sp, #64	@ 0x40
 801f408:	4620      	mov	r0, r4
 801f40a:	f7ff ff33 	bl	801f274 <lfs_dir_find>
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 801f40e:	1e03      	subs	r3, r0, #0
 801f410:	dbf4      	blt.n	801f3fc <lfs_remove_+0x10>
    return (tag & 0x000ffc00) >> 10;
 801f412:	f3c3 2589 	ubfx	r5, r3, #10, #10
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 801f416:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 801f41a:	4295      	cmp	r5, r2
 801f41c:	d031      	beq.n	801f482 <lfs_remove_+0x96>
    dir.next = lfs->mlist;
 801f41e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801f420:	9206      	str	r2, [sp, #24]
    return (tag & 0x7ff00000) >> 20;
 801f422:	f3c3 560a 	ubfx	r6, r3, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 801f426:	2e02      	cmp	r6, #2
 801f428:	d02e      	beq.n	801f488 <lfs_remove_+0x9c>
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
 801f42a:	02ad      	lsls	r5, r5, #10
 801f42c:	f045 459f 	orr.w	r5, r5, #1333788672	@ 0x4f800000
 801f430:	f445 05e0 	orr.w	r5, r5, #7340032	@ 0x700000
 801f434:	9518      	str	r5, [sp, #96]	@ 0x60
 801f436:	2300      	movs	r3, #0
 801f438:	9319      	str	r3, [sp, #100]	@ 0x64
 801f43a:	2301      	movs	r3, #1
 801f43c:	aa18      	add	r2, sp, #96	@ 0x60
 801f43e:	a910      	add	r1, sp, #64	@ 0x40
 801f440:	4620      	mov	r0, r4
 801f442:	f7ff fa03 	bl	801e84c <lfs_dir_commit>
    if (err) {
 801f446:	4603      	mov	r3, r0
 801f448:	2800      	cmp	r0, #0
 801f44a:	d142      	bne.n	801f4d2 <lfs_remove_+0xe6>
    lfs->mlist = dir.next;
 801f44c:	9a06      	ldr	r2, [sp, #24]
 801f44e:	62a2      	str	r2, [r4, #40]	@ 0x28
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 801f450:	2e02      	cmp	r6, #2
 801f452:	d1d3      	bne.n	801f3fc <lfs_remove_+0x10>
        err = lfs_fs_preporphans(lfs, -1);
 801f454:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801f458:	4620      	mov	r0, r4
 801f45a:	f7fc f9db 	bl	801b814 <lfs_fs_preporphans>
        if (err) {
 801f45e:	4603      	mov	r3, r0
 801f460:	2800      	cmp	r0, #0
 801f462:	d1cb      	bne.n	801f3fc <lfs_remove_+0x10>
        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
 801f464:	aa10      	add	r2, sp, #64	@ 0x40
 801f466:	a908      	add	r1, sp, #32
 801f468:	4620      	mov	r0, r4
 801f46a:	f7fe f8e5 	bl	801d638 <lfs_fs_pred>
        if (err) {
 801f46e:	4603      	mov	r3, r0
 801f470:	2800      	cmp	r0, #0
 801f472:	d1c3      	bne.n	801f3fc <lfs_remove_+0x10>
        err = lfs_dir_drop(lfs, &cwd, &dir.m);
 801f474:	aa08      	add	r2, sp, #32
 801f476:	a910      	add	r1, sp, #64	@ 0x40
 801f478:	4620      	mov	r0, r4
 801f47a:	f7ff faa3 	bl	801e9c4 <lfs_dir_drop>
 801f47e:	4603      	mov	r3, r0
        if (err) {
 801f480:	e7bc      	b.n	801f3fc <lfs_remove_+0x10>
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
 801f482:	f06f 0315 	mvn.w	r3, #21
 801f486:	e7b9      	b.n	801f3fc <lfs_remove_+0x10>
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 801f488:	02ab      	lsls	r3, r5, #10
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
 801f48a:	aa04      	add	r2, sp, #16
 801f48c:	9200      	str	r2, [sp, #0]
 801f48e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801f492:	f043 0308 	orr.w	r3, r3, #8
 801f496:	4a10      	ldr	r2, [pc, #64]	@ (801f4d8 <lfs_remove_+0xec>)
 801f498:	a910      	add	r1, sp, #64	@ 0x40
 801f49a:	4620      	mov	r0, r4
 801f49c:	f7fc fbb8 	bl	801bc10 <lfs_dir_get>
        if (res < 0) {
 801f4a0:	1e03      	subs	r3, r0, #0
 801f4a2:	dbab      	blt.n	801f3fc <lfs_remove_+0x10>
        err = lfs_dir_fetch(lfs, &dir.m, pair);
 801f4a4:	aa04      	add	r2, sp, #16
 801f4a6:	a908      	add	r1, sp, #32
 801f4a8:	4620      	mov	r0, r4
 801f4aa:	f7fd fb9f 	bl	801cbec <lfs_dir_fetch>
        if (err) {
 801f4ae:	4603      	mov	r3, r0
 801f4b0:	2800      	cmp	r0, #0
 801f4b2:	d1a3      	bne.n	801f3fc <lfs_remove_+0x10>
        err = lfs_fs_preporphans(lfs, +1);
 801f4b4:	2101      	movs	r1, #1
 801f4b6:	4620      	mov	r0, r4
 801f4b8:	f7fc f9ac 	bl	801b814 <lfs_fs_preporphans>
        if (err) {
 801f4bc:	4603      	mov	r3, r0
 801f4be:	2800      	cmp	r0, #0
 801f4c0:	d19c      	bne.n	801f3fc <lfs_remove_+0x10>
        dir.type = 0;
 801f4c2:	2300      	movs	r3, #0
 801f4c4:	f88d 301e 	strb.w	r3, [sp, #30]
        dir.id = 0;
 801f4c8:	f8ad 301c 	strh.w	r3, [sp, #28]
        lfs->mlist = &dir;
 801f4cc:	ab06      	add	r3, sp, #24
 801f4ce:	62a3      	str	r3, [r4, #40]	@ 0x28
 801f4d0:	e7ab      	b.n	801f42a <lfs_remove_+0x3e>
        lfs->mlist = dir.next;
 801f4d2:	9a06      	ldr	r2, [sp, #24]
 801f4d4:	62a2      	str	r2, [r4, #40]	@ 0x28
        return err;
 801f4d6:	e791      	b.n	801f3fc <lfs_remove_+0x10>
 801f4d8:	700ffc00 	.word	0x700ffc00

0801f4dc <lfs_dir_open_>:
static int lfs_dir_open_(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 801f4dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f4de:	b087      	sub	sp, #28
 801f4e0:	4607      	mov	r7, r0
 801f4e2:	460d      	mov	r5, r1
 801f4e4:	9203      	str	r2, [sp, #12]
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
 801f4e6:	f101 0608 	add.w	r6, r1, #8
 801f4ea:	2300      	movs	r3, #0
 801f4ec:	aa03      	add	r2, sp, #12
 801f4ee:	4631      	mov	r1, r6
 801f4f0:	f7ff fec0 	bl	801f274 <lfs_dir_find>
    if (tag < 0) {
 801f4f4:	1e04      	subs	r4, r0, #0
 801f4f6:	db14      	blt.n	801f522 <lfs_dir_open_+0x46>
    return (tag & 0x7ff00000) >> 20;
 801f4f8:	f3c4 530a 	ubfx	r3, r4, #20, #11
    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 801f4fc:	2b02      	cmp	r3, #2
 801f4fe:	d130      	bne.n	801f562 <lfs_dir_open_+0x86>
    return (tag & 0x000ffc00) >> 10;
 801f500:	f3c4 2489 	ubfx	r4, r4, #10, #10
    if (lfs_tag_id(tag) == 0x3ff) {
 801f504:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801f508:	429c      	cmp	r4, r3
 801f50a:	d10d      	bne.n	801f528 <lfs_dir_open_+0x4c>
        pair[0] = lfs->root[0];
 801f50c:	6a3b      	ldr	r3, [r7, #32]
 801f50e:	9304      	str	r3, [sp, #16]
        pair[1] = lfs->root[1];
 801f510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f512:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
 801f514:	aa04      	add	r2, sp, #16
 801f516:	4631      	mov	r1, r6
 801f518:	4638      	mov	r0, r7
 801f51a:	f7fd fb67 	bl	801cbec <lfs_dir_fetch>
    if (err) {
 801f51e:	4604      	mov	r4, r0
 801f520:	b188      	cbz	r0, 801f546 <lfs_dir_open_+0x6a>
}
 801f522:	4620      	mov	r0, r4
 801f524:	b007      	add	sp, #28
 801f526:	bdf0      	pop	{r4, r5, r6, r7, pc}
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 801f528:	02a4      	lsls	r4, r4, #10
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 801f52a:	ab04      	add	r3, sp, #16
 801f52c:	9300      	str	r3, [sp, #0]
 801f52e:	f044 5300 	orr.w	r3, r4, #536870912	@ 0x20000000
 801f532:	f043 0308 	orr.w	r3, r3, #8
 801f536:	4a0c      	ldr	r2, [pc, #48]	@ (801f568 <lfs_dir_open_+0x8c>)
 801f538:	4631      	mov	r1, r6
 801f53a:	4638      	mov	r0, r7
 801f53c:	f7fc fb68 	bl	801bc10 <lfs_dir_get>
        if (res < 0) {
 801f540:	1e04      	subs	r4, r0, #0
 801f542:	dae7      	bge.n	801f514 <lfs_dir_open_+0x38>
 801f544:	e7ed      	b.n	801f522 <lfs_dir_open_+0x46>
    dir->head[0] = dir->m.pair[0];
 801f546:	68ab      	ldr	r3, [r5, #8]
 801f548:	62eb      	str	r3, [r5, #44]	@ 0x2c
    dir->head[1] = dir->m.pair[1];
 801f54a:	68eb      	ldr	r3, [r5, #12]
 801f54c:	632b      	str	r3, [r5, #48]	@ 0x30
    dir->id = 0;
 801f54e:	2300      	movs	r3, #0
 801f550:	80ab      	strh	r3, [r5, #4]
    dir->pos = 0;
 801f552:	62ab      	str	r3, [r5, #40]	@ 0x28
    dir->type = LFS_TYPE_DIR;
 801f554:	2302      	movs	r3, #2
 801f556:	71ab      	strb	r3, [r5, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);
 801f558:	4629      	mov	r1, r5
 801f55a:	4638      	mov	r0, r7
 801f55c:	f7fc f858 	bl	801b610 <lfs_mlist_append>
    return 0;
 801f560:	e7df      	b.n	801f522 <lfs_dir_open_+0x46>
        return LFS_ERR_NOTDIR;
 801f562:	f06f 0413 	mvn.w	r4, #19
 801f566:	e7dc      	b.n	801f522 <lfs_dir_open_+0x46>
 801f568:	700ffc00 	.word	0x700ffc00

0801f56c <lfs_rename_>:
static int lfs_rename_(lfs_t *lfs, const char *oldpath, const char *newpath) {
 801f56c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f570:	b0ad      	sub	sp, #180	@ 0xb4
 801f572:	4604      	mov	r4, r0
 801f574:	9103      	str	r1, [sp, #12]
 801f576:	9202      	str	r2, [sp, #8]
    int err = lfs_fs_forceconsistency(lfs);
 801f578:	f7ff fa10 	bl	801e99c <lfs_fs_forceconsistency>
    if (err) {
 801f57c:	4606      	mov	r6, r0
 801f57e:	b118      	cbz	r0, 801f588 <lfs_rename_+0x1c>
}
 801f580:	4630      	mov	r0, r6
 801f582:	b02d      	add	sp, #180	@ 0xb4
 801f584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);
 801f588:	2300      	movs	r3, #0
 801f58a:	aa03      	add	r2, sp, #12
 801f58c:	a922      	add	r1, sp, #136	@ 0x88
 801f58e:	4620      	mov	r0, r4
 801f590:	f7ff fe70 	bl	801f274 <lfs_dir_find>
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
 801f594:	2800      	cmp	r0, #0
 801f596:	f2c0 809e 	blt.w	801f6d6 <lfs_rename_+0x16a>
 801f59a:	4680      	mov	r8, r0
    return (tag & 0x000ffc00) >> 10;
 801f59c:	f3c0 2589 	ubfx	r5, r0, #10, #10
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
 801f5a0:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801f5a4:	429d      	cmp	r5, r3
 801f5a6:	f000 8094 	beq.w	801f6d2 <lfs_rename_+0x166>
    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);
 801f5aa:	f10d 0366 	add.w	r3, sp, #102	@ 0x66
 801f5ae:	aa02      	add	r2, sp, #8
 801f5b0:	a91a      	add	r1, sp, #104	@ 0x68
 801f5b2:	4620      	mov	r0, r4
 801f5b4:	f7ff fe5e 	bl	801f274 <lfs_dir_find>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 801f5b8:	f1b0 0900 	subs.w	r9, r0, #0
 801f5bc:	f2c0 808d 	blt.w	801f6da <lfs_rename_+0x16e>
    return (tag & 0x000ffc00) >> 10;
 801f5c0:	f3c9 2289 	ubfx	r2, r9, #10, #10
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 801f5c4:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801f5c8:	429a      	cmp	r2, r3
 801f5ca:	f000 8086 	beq.w	801f6da <lfs_rename_+0x16e>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801f5ce:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801f5d0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801f5d2:	429a      	cmp	r2, r3
 801f5d4:	d008      	beq.n	801f5e8 <lfs_rename_+0x7c>
 801f5d6:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 801f5d8:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801f5da:	4281      	cmp	r1, r0
 801f5dc:	d004      	beq.n	801f5e8 <lfs_rename_+0x7c>
 801f5de:	4299      	cmp	r1, r3
 801f5e0:	d002      	beq.n	801f5e8 <lfs_rename_+0x7c>
 801f5e2:	4290      	cmp	r0, r2
 801f5e4:	d000      	beq.n	801f5e8 <lfs_rename_+0x7c>
 801f5e6:	2601      	movs	r6, #1
    prevdir.next = lfs->mlist;
 801f5e8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801f5ea:	930f      	str	r3, [sp, #60]	@ 0x3c
    if (prevtag == LFS_ERR_NOENT) {
 801f5ec:	f119 0f02 	cmn.w	r9, #2
 801f5f0:	f000 8085 	beq.w	801f6fe <lfs_rename_+0x192>
    return (tag & 0x7ff00000) >> 20;
 801f5f4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801f5f8:	ea4f 5318 	mov.w	r3, r8, lsr #20
    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {
 801f5fc:	ea83 5319 	eor.w	r3, r3, r9, lsr #20
 801f600:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801f604:	2b00      	cmp	r3, #0
 801f606:	f040 808a 	bne.w	801f71e <lfs_rename_+0x1b2>
    } else if (samepair && newid == newoldid) {
 801f60a:	b91e      	cbnz	r6, 801f614 <lfs_rename_+0xa8>
 801f60c:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801f610:	42ab      	cmp	r3, r5
 801f612:	d0b5      	beq.n	801f580 <lfs_rename_+0x14>
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 801f614:	2a02      	cmp	r2, #2
 801f616:	f000 808a 	beq.w	801f72e <lfs_rename_+0x1c2>
    uint16_t newoldid = lfs_tag_id(oldtag);
 801f61a:	46aa      	mov	sl, r5
    if (!samepair) {
 801f61c:	b126      	cbz	r6, 801f628 <lfs_rename_+0xbc>
        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);
 801f61e:	aa22      	add	r2, sp, #136	@ 0x88
 801f620:	4651      	mov	r1, sl
 801f622:	4620      	mov	r0, r4
 801f624:	f7fc f8a6 	bl	801b774 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 801f628:	f119 0f02 	cmn.w	r9, #2
 801f62c:	f000 80b4 	beq.w	801f798 <lfs_rename_+0x22c>
 801f630:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801f634:	029b      	lsls	r3, r3, #10
 801f636:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801f63a:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801f63e:	9305      	str	r3, [sp, #20]
 801f640:	2200      	movs	r2, #0
 801f642:	9206      	str	r2, [sp, #24]
 801f644:	f8bd 7066 	ldrh.w	r7, [sp, #102]	@ 0x66
 801f648:	02bf      	lsls	r7, r7, #10
 801f64a:	f047 4380 	orr.w	r3, r7, #1073741824	@ 0x40000000
 801f64e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801f652:	9307      	str	r3, [sp, #28]
 801f654:	9208      	str	r2, [sp, #32]
    return (tag & 0x7ff00000) >> 20;
 801f656:	f3c8 580a 	ubfx	r8, r8, #20, #11
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 801f65a:	ea47 5808 	orr.w	r8, r7, r8, lsl #20
 801f65e:	f8dd b008 	ldr.w	fp, [sp, #8]
 801f662:	4658      	mov	r0, fp
 801f664:	f7f0 fe1c 	bl	80102a0 <strlen>
 801f668:	ea48 0000 	orr.w	r0, r8, r0
 801f66c:	9009      	str	r0, [sp, #36]	@ 0x24
 801f66e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 801f672:	432f      	orrs	r7, r5
 801f674:	f047 5780 	orr.w	r7, r7, #268435456	@ 0x10000000
 801f678:	f447 1780 	orr.w	r7, r7, #1048576	@ 0x100000
 801f67c:	970b      	str	r7, [sp, #44]	@ 0x2c
 801f67e:	ab22      	add	r3, sp, #136	@ 0x88
 801f680:	930c      	str	r3, [sp, #48]	@ 0x30
 801f682:	2e00      	cmp	r6, #0
 801f684:	f040 808a 	bne.w	801f79c <lfs_rename_+0x230>
 801f688:	ea4f 2a8a 	mov.w	sl, sl, lsl #10
 801f68c:	f04a 439f 	orr.w	r3, sl, #1333788672	@ 0x4f800000
 801f690:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801f694:	930d      	str	r3, [sp, #52]	@ 0x34
 801f696:	2300      	movs	r3, #0
 801f698:	930e      	str	r3, [sp, #56]	@ 0x38
 801f69a:	2305      	movs	r3, #5
 801f69c:	aa05      	add	r2, sp, #20
 801f69e:	a91a      	add	r1, sp, #104	@ 0x68
 801f6a0:	4620      	mov	r0, r4
 801f6a2:	f7ff f8d3 	bl	801e84c <lfs_dir_commit>
    if (err) {
 801f6a6:	4607      	mov	r7, r0
 801f6a8:	2800      	cmp	r0, #0
 801f6aa:	d179      	bne.n	801f7a0 <lfs_rename_+0x234>
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
 801f6ac:	b126      	cbz	r6, 801f6b8 <lfs_rename_+0x14c>
    return lfs_tag_type1(a->tag);
 801f6ae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    return (tag & 0x70000000) >> 20;
 801f6b0:	0d1b      	lsrs	r3, r3, #20
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
 801f6b2:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
 801f6b6:	d177      	bne.n	801f7a8 <lfs_rename_+0x23c>
    lfs->mlist = prevdir.next;
 801f6b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f6ba:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (prevtag != LFS_ERR_NOENT
 801f6bc:	f119 0f02 	cmn.w	r9, #2
 801f6c0:	f000 80a9 	beq.w	801f816 <lfs_rename_+0x2aa>
    return (tag & 0x7ff00000) >> 20;
 801f6c4:	f3c9 500a 	ubfx	r0, r9, #20, #11
            && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 801f6c8:	2802      	cmp	r0, #2
 801f6ca:	f000 8088 	beq.w	801f7de <lfs_rename_+0x272>
    return 0;
 801f6ce:	463e      	mov	r6, r7
 801f6d0:	e756      	b.n	801f580 <lfs_rename_+0x14>
        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;
 801f6d2:	f06f 0015 	mvn.w	r0, #21
 801f6d6:	4606      	mov	r6, r0
 801f6d8:	e752      	b.n	801f580 <lfs_rename_+0x14>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 801f6da:	f119 0f02 	cmn.w	r9, #2
 801f6de:	d106      	bne.n	801f6ee <lfs_rename_+0x182>
            !(prevtag == LFS_ERR_NOENT && newid != 0x3ff)) {
 801f6e0:	f8bd 2066 	ldrh.w	r2, [sp, #102]	@ 0x66
 801f6e4:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801f6e8:	429a      	cmp	r2, r3
 801f6ea:	f47f af70 	bne.w	801f5ce <lfs_rename_+0x62>
        return (prevtag < 0) ? (int)prevtag : LFS_ERR_INVAL;
 801f6ee:	f1b9 0f00 	cmp.w	r9, #0
 801f6f2:	db02      	blt.n	801f6fa <lfs_rename_+0x18e>
 801f6f4:	f06f 0615 	mvn.w	r6, #21
 801f6f8:	e742      	b.n	801f580 <lfs_rename_+0x14>
 801f6fa:	464e      	mov	r6, r9
 801f6fc:	e740      	b.n	801f580 <lfs_rename_+0x14>
        lfs_size_t nlen = strlen(newpath);
 801f6fe:	9802      	ldr	r0, [sp, #8]
 801f700:	f7f0 fdce 	bl	80102a0 <strlen>
        if (nlen > lfs->name_max) {
 801f704:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801f706:	4283      	cmp	r3, r0
 801f708:	f0c0 8082 	bcc.w	801f810 <lfs_rename_+0x2a4>
        if (samepair && newid <= newoldid) {
 801f70c:	2e00      	cmp	r6, #0
 801f70e:	d141      	bne.n	801f794 <lfs_rename_+0x228>
 801f710:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801f714:	42ab      	cmp	r3, r5
 801f716:	d83b      	bhi.n	801f790 <lfs_rename_+0x224>
            newoldid += 1;
 801f718:	f105 0a01 	add.w	sl, r5, #1
 801f71c:	e77e      	b.n	801f61c <lfs_rename_+0xb0>
                : LFS_ERR_NOTDIR;
 801f71e:	2a02      	cmp	r2, #2
 801f720:	d002      	beq.n	801f728 <lfs_rename_+0x1bc>
 801f722:	f06f 0613 	mvn.w	r6, #19
 801f726:	e72b      	b.n	801f580 <lfs_rename_+0x14>
 801f728:	f06f 0614 	mvn.w	r6, #20
 801f72c:	e728      	b.n	801f580 <lfs_rename_+0x14>
                LFS_MKTAG(LFS_TYPE_STRUCT, newid, 8), prevpair);
 801f72e:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801f732:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
 801f734:	aa05      	add	r2, sp, #20
 801f736:	9200      	str	r2, [sp, #0]
 801f738:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801f73c:	f043 0308 	orr.w	r3, r3, #8
 801f740:	4a36      	ldr	r2, [pc, #216]	@ (801f81c <lfs_rename_+0x2b0>)
 801f742:	a91a      	add	r1, sp, #104	@ 0x68
 801f744:	4620      	mov	r0, r4
 801f746:	f7fc fa63 	bl	801bc10 <lfs_dir_get>
        if (res < 0) {
 801f74a:	2800      	cmp	r0, #0
 801f74c:	db1a      	blt.n	801f784 <lfs_rename_+0x218>
        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);
 801f74e:	aa05      	add	r2, sp, #20
 801f750:	a911      	add	r1, sp, #68	@ 0x44
 801f752:	4620      	mov	r0, r4
 801f754:	f7fd fa4a 	bl	801cbec <lfs_dir_fetch>
        if (err) {
 801f758:	b9b0      	cbnz	r0, 801f788 <lfs_rename_+0x21c>
        if (prevdir.m.count > 0 || prevdir.m.split) {
 801f75a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f75c:	f433 037f 	bics.w	r3, r3, #16711680	@ 0xff0000
 801f760:	d002      	beq.n	801f768 <lfs_rename_+0x1fc>
            return LFS_ERR_NOTEMPTY;
 801f762:	f06f 0626 	mvn.w	r6, #38	@ 0x26
 801f766:	e70b      	b.n	801f580 <lfs_rename_+0x14>
        err = lfs_fs_preporphans(lfs, +1);
 801f768:	2101      	movs	r1, #1
 801f76a:	4620      	mov	r0, r4
 801f76c:	f7fc f852 	bl	801b814 <lfs_fs_preporphans>
        if (err) {
 801f770:	b960      	cbnz	r0, 801f78c <lfs_rename_+0x220>
        prevdir.type = 0;
 801f772:	2300      	movs	r3, #0
 801f774:	f88d 3042 	strb.w	r3, [sp, #66]	@ 0x42
        prevdir.id = 0;
 801f778:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
        lfs->mlist = &prevdir;
 801f77c:	ab0f      	add	r3, sp, #60	@ 0x3c
 801f77e:	62a3      	str	r3, [r4, #40]	@ 0x28
    uint16_t newoldid = lfs_tag_id(oldtag);
 801f780:	46aa      	mov	sl, r5
 801f782:	e74b      	b.n	801f61c <lfs_rename_+0xb0>
            return (int)res;
 801f784:	4606      	mov	r6, r0
 801f786:	e6fb      	b.n	801f580 <lfs_rename_+0x14>
            return err;
 801f788:	4606      	mov	r6, r0
 801f78a:	e6f9      	b.n	801f580 <lfs_rename_+0x14>
            return err;
 801f78c:	4606      	mov	r6, r0
 801f78e:	e6f7      	b.n	801f580 <lfs_rename_+0x14>
    uint16_t newoldid = lfs_tag_id(oldtag);
 801f790:	46aa      	mov	sl, r5
 801f792:	e743      	b.n	801f61c <lfs_rename_+0xb0>
 801f794:	46aa      	mov	sl, r5
 801f796:	e742      	b.n	801f61e <lfs_rename_+0xb2>
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 801f798:	2300      	movs	r3, #0
 801f79a:	e750      	b.n	801f63e <lfs_rename_+0xd2>
 801f79c:	2300      	movs	r3, #0
 801f79e:	e779      	b.n	801f694 <lfs_rename_+0x128>
        lfs->mlist = prevdir.next;
 801f7a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f7a2:	62a3      	str	r3, [r4, #40]	@ 0x28
        return err;
 801f7a4:	4606      	mov	r6, r0
 801f7a6:	e6eb      	b.n	801f580 <lfs_rename_+0x14>
        lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801f7a8:	2200      	movs	r2, #0
 801f7aa:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801f7ae:	4620      	mov	r0, r4
 801f7b0:	f7fb ffe0 	bl	801b774 <lfs_fs_prepmove>
        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(
 801f7b4:	02ab      	lsls	r3, r5, #10
 801f7b6:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801f7ba:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801f7be:	932a      	str	r3, [sp, #168]	@ 0xa8
 801f7c0:	2300      	movs	r3, #0
 801f7c2:	932b      	str	r3, [sp, #172]	@ 0xac
 801f7c4:	2301      	movs	r3, #1
 801f7c6:	aa2a      	add	r2, sp, #168	@ 0xa8
 801f7c8:	a922      	add	r1, sp, #136	@ 0x88
 801f7ca:	4620      	mov	r0, r4
 801f7cc:	f7ff f83e 	bl	801e84c <lfs_dir_commit>
        if (err) {
 801f7d0:	4606      	mov	r6, r0
 801f7d2:	2800      	cmp	r0, #0
 801f7d4:	f43f af70 	beq.w	801f6b8 <lfs_rename_+0x14c>
            lfs->mlist = prevdir.next;
 801f7d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f7da:	62a3      	str	r3, [r4, #40]	@ 0x28
            return err;
 801f7dc:	e6d0      	b.n	801f580 <lfs_rename_+0x14>
        err = lfs_fs_preporphans(lfs, -1);
 801f7de:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801f7e2:	4620      	mov	r0, r4
 801f7e4:	f7fc f816 	bl	801b814 <lfs_fs_preporphans>
        if (err) {
 801f7e8:	4606      	mov	r6, r0
 801f7ea:	2800      	cmp	r0, #0
 801f7ec:	f47f aec8 	bne.w	801f580 <lfs_rename_+0x14>
        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);
 801f7f0:	aa1a      	add	r2, sp, #104	@ 0x68
 801f7f2:	a911      	add	r1, sp, #68	@ 0x44
 801f7f4:	4620      	mov	r0, r4
 801f7f6:	f7fd ff1f 	bl	801d638 <lfs_fs_pred>
        if (err) {
 801f7fa:	4606      	mov	r6, r0
 801f7fc:	2800      	cmp	r0, #0
 801f7fe:	f47f aebf 	bne.w	801f580 <lfs_rename_+0x14>
        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);
 801f802:	aa11      	add	r2, sp, #68	@ 0x44
 801f804:	a91a      	add	r1, sp, #104	@ 0x68
 801f806:	4620      	mov	r0, r4
 801f808:	f7ff f8dc 	bl	801e9c4 <lfs_dir_drop>
 801f80c:	4606      	mov	r6, r0
        if (err) {
 801f80e:	e6b7      	b.n	801f580 <lfs_rename_+0x14>
            return LFS_ERR_NAMETOOLONG;
 801f810:	f06f 0623 	mvn.w	r6, #35	@ 0x23
 801f814:	e6b4      	b.n	801f580 <lfs_rename_+0x14>
    return 0;
 801f816:	463e      	mov	r6, r7
 801f818:	e6b2      	b.n	801f580 <lfs_rename_+0x14>
 801f81a:	bf00      	nop
 801f81c:	700ffc00 	.word	0x700ffc00

0801f820 <lfs_file_opencfg_>:
        const struct lfs_file_config *cfg) {
 801f820:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f824:	b08b      	sub	sp, #44	@ 0x2c
 801f826:	4607      	mov	r7, r0
 801f828:	460c      	mov	r4, r1
 801f82a:	9203      	str	r2, [sp, #12]
 801f82c:	461d      	mov	r5, r3
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 801f82e:	f013 0f02 	tst.w	r3, #2
 801f832:	d005      	beq.n	801f840 <lfs_file_opencfg_+0x20>
        int err = lfs_fs_forceconsistency(lfs);
 801f834:	f7ff f8b2 	bl	801e99c <lfs_fs_forceconsistency>
        if (err) {
 801f838:	4606      	mov	r6, r0
 801f83a:	2800      	cmp	r0, #0
 801f83c:	f040 8109 	bne.w	801fa52 <lfs_file_opencfg_+0x232>
    file->cfg = cfg;
 801f840:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f842:	6523      	str	r3, [r4, #80]	@ 0x50
    file->flags = flags;
 801f844:	6325      	str	r5, [r4, #48]	@ 0x30
    file->pos = 0;
 801f846:	2300      	movs	r3, #0
 801f848:	6363      	str	r3, [r4, #52]	@ 0x34
    file->off = 0;
 801f84a:	63e3      	str	r3, [r4, #60]	@ 0x3c
    file->cache.buffer = NULL;
 801f84c:	64e3      	str	r3, [r4, #76]	@ 0x4c
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 801f84e:	f104 0808 	add.w	r8, r4, #8
 801f852:	1d23      	adds	r3, r4, #4
 801f854:	aa03      	add	r2, sp, #12
 801f856:	4641      	mov	r1, r8
 801f858:	4638      	mov	r0, r7
 801f85a:	f7ff fd0b 	bl	801f274 <lfs_dir_find>
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 801f85e:	1e06      	subs	r6, r0, #0
 801f860:	da09      	bge.n	801f876 <lfs_file_opencfg_+0x56>
 801f862:	f116 0f02 	cmn.w	r6, #2
 801f866:	f040 80ec 	bne.w	801fa42 <lfs_file_opencfg_+0x222>
 801f86a:	88a2      	ldrh	r2, [r4, #4]
 801f86c:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801f870:	429a      	cmp	r2, r3
 801f872:	f000 80e6 	beq.w	801fa42 <lfs_file_opencfg_+0x222>
    file->type = LFS_TYPE_REG;
 801f876:	2301      	movs	r3, #1
 801f878:	71a3      	strb	r3, [r4, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 801f87a:	4621      	mov	r1, r4
 801f87c:	4638      	mov	r0, r7
 801f87e:	f7fb fec7 	bl	801b610 <lfs_mlist_append>
    if (tag == LFS_ERR_NOENT) {
 801f882:	f116 0f02 	cmn.w	r6, #2
 801f886:	d019      	beq.n	801f8bc <lfs_file_opencfg_+0x9c>
    } else if (flags & LFS_O_EXCL) {
 801f888:	f415 7f00 	tst.w	r5, #512	@ 0x200
 801f88c:	f040 80d7 	bne.w	801fa3e <lfs_file_opencfg_+0x21e>
    return (tag & 0x7ff00000) >> 20;
 801f890:	f3c6 560a 	ubfx	r6, r6, #20, #11
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 801f894:	2e01      	cmp	r6, #1
 801f896:	f040 80e0 	bne.w	801fa5a <lfs_file_opencfg_+0x23a>
    } else if (flags & LFS_O_TRUNC) {
 801f89a:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 801f89e:	d042      	beq.n	801f926 <lfs_file_opencfg_+0x106>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 801f8a0:	f8b4 9004 	ldrh.w	r9, [r4, #4]
 801f8a4:	ea4f 2989 	mov.w	r9, r9, lsl #10
 801f8a8:	f049 5900 	orr.w	r9, r9, #536870912	@ 0x20000000
 801f8ac:	f449 1980 	orr.w	r9, r9, #1048576	@ 0x100000
        file->flags |= LFS_F_DIRTY;
 801f8b0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801f8b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801f8b6:	6323      	str	r3, [r4, #48]	@ 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 801f8b8:	2500      	movs	r5, #0
 801f8ba:	e064      	b.n	801f986 <lfs_file_opencfg_+0x166>
        if (!(flags & LFS_O_CREAT)) {
 801f8bc:	f415 7f80 	tst.w	r5, #256	@ 0x100
 801f8c0:	f000 80bf 	beq.w	801fa42 <lfs_file_opencfg_+0x222>
        lfs_size_t nlen = strlen(path);
 801f8c4:	9d03      	ldr	r5, [sp, #12]
 801f8c6:	4628      	mov	r0, r5
 801f8c8:	f7f0 fcea 	bl	80102a0 <strlen>
        if (nlen > lfs->name_max) {
 801f8cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801f8ce:	4283      	cmp	r3, r0
 801f8d0:	d202      	bcs.n	801f8d8 <lfs_file_opencfg_+0xb8>
            err = LFS_ERR_NAMETOOLONG;
 801f8d2:	f06f 0623 	mvn.w	r6, #35	@ 0x23
 801f8d6:	e0b4      	b.n	801fa42 <lfs_file_opencfg_+0x222>
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 801f8d8:	88a3      	ldrh	r3, [r4, #4]
 801f8da:	029b      	lsls	r3, r3, #10
 801f8dc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801f8e0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801f8e4:	9204      	str	r2, [sp, #16]
 801f8e6:	2200      	movs	r2, #0
 801f8e8:	9205      	str	r2, [sp, #20]
 801f8ea:	4318      	orrs	r0, r3
 801f8ec:	f440 1080 	orr.w	r0, r0, #1048576	@ 0x100000
 801f8f0:	9006      	str	r0, [sp, #24]
 801f8f2:	9507      	str	r5, [sp, #28]
 801f8f4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801f8f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801f8fc:	9308      	str	r3, [sp, #32]
 801f8fe:	9209      	str	r2, [sp, #36]	@ 0x24
 801f900:	2303      	movs	r3, #3
 801f902:	aa04      	add	r2, sp, #16
 801f904:	4641      	mov	r1, r8
 801f906:	4638      	mov	r0, r7
 801f908:	f7fe ffa0 	bl	801e84c <lfs_dir_commit>
 801f90c:	4606      	mov	r6, r0
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 801f90e:	f110 0f1c 	cmn.w	r0, #28
 801f912:	d005      	beq.n	801f920 <lfs_file_opencfg_+0x100>
        if (err) {
 801f914:	2800      	cmp	r0, #0
 801f916:	f040 8094 	bne.w	801fa42 <lfs_file_opencfg_+0x222>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 801f91a:	f8df 9154 	ldr.w	r9, [pc, #340]	@ 801fa70 <lfs_file_opencfg_+0x250>
 801f91e:	e7cb      	b.n	801f8b8 <lfs_file_opencfg_+0x98>
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 801f920:	f06f 0623 	mvn.w	r6, #35	@ 0x23
            goto cleanup;
 801f924:	e08d      	b.n	801fa42 <lfs_file_opencfg_+0x222>
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 801f926:	88a3      	ldrh	r3, [r4, #4]
 801f928:	029b      	lsls	r3, r3, #10
 801f92a:	f104 0228 	add.w	r2, r4, #40	@ 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 801f92e:	9200      	str	r2, [sp, #0]
 801f930:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801f934:	f043 0308 	orr.w	r3, r3, #8
 801f938:	4a4b      	ldr	r2, [pc, #300]	@ (801fa68 <lfs_file_opencfg_+0x248>)
 801f93a:	4641      	mov	r1, r8
 801f93c:	4638      	mov	r0, r7
 801f93e:	f7fc f967 	bl	801bc10 <lfs_dir_get>
        if (tag < 0) {
 801f942:	f1b0 0900 	subs.w	r9, r0, #0
 801f946:	dab7      	bge.n	801f8b8 <lfs_file_opencfg_+0x98>
            err = tag;
 801f948:	464e      	mov	r6, r9
 801f94a:	e07a      	b.n	801fa42 <lfs_file_opencfg_+0x222>
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 801f94c:	685b      	ldr	r3, [r3, #4]
 801f94e:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801f952:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 801f956:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 801f95a:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 801f95e:	88a3      	ldrh	r3, [r4, #4]
 801f960:	029b      	lsls	r3, r3, #10
 801f962:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801f966:	688a      	ldr	r2, [r1, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 801f968:	6849      	ldr	r1, [r1, #4]
 801f96a:	9100      	str	r1, [sp, #0]
 801f96c:	4313      	orrs	r3, r2
 801f96e:	4a3f      	ldr	r2, [pc, #252]	@ (801fa6c <lfs_file_opencfg_+0x24c>)
 801f970:	4641      	mov	r1, r8
 801f972:	4638      	mov	r0, r7
 801f974:	f7fc f94c 	bl	801bc10 <lfs_dir_get>
            if (res < 0 && res != LFS_ERR_NOENT) {
 801f978:	1e06      	subs	r6, r0, #0
 801f97a:	da0c      	bge.n	801f996 <lfs_file_opencfg_+0x176>
 801f97c:	f116 0f02 	cmn.w	r6, #2
 801f980:	d009      	beq.n	801f996 <lfs_file_opencfg_+0x176>
 801f982:	e05e      	b.n	801fa42 <lfs_file_opencfg_+0x222>
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 801f984:	3501      	adds	r5, #1
 801f986:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801f988:	689a      	ldr	r2, [r3, #8]
 801f98a:	42aa      	cmp	r2, r5
 801f98c:	d915      	bls.n	801f9ba <lfs_file_opencfg_+0x19a>
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 801f98e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801f990:	f012 0f01 	tst.w	r2, #1
 801f994:	d1da      	bne.n	801f94c <lfs_file_opencfg_+0x12c>
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 801f996:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801f998:	f013 0f02 	tst.w	r3, #2
 801f99c:	d0f2      	beq.n	801f984 <lfs_file_opencfg_+0x164>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 801f99e:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 801f9a0:	6852      	ldr	r2, [r2, #4]
 801f9a2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801f9a6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801f9aa:	6891      	ldr	r1, [r2, #8]
 801f9ac:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801f9ae:	4291      	cmp	r1, r2
 801f9b0:	d856      	bhi.n	801fa60 <lfs_file_opencfg_+0x240>
            file->flags |= LFS_F_DIRTY;
 801f9b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801f9b6:	6323      	str	r3, [r4, #48]	@ 0x30
 801f9b8:	e7e4      	b.n	801f984 <lfs_file_opencfg_+0x164>
    if (file->cfg->buffer) {
 801f9ba:	681b      	ldr	r3, [r3, #0]
 801f9bc:	b16b      	cbz	r3, 801f9da <lfs_file_opencfg_+0x1ba>
        file->cache.buffer = file->cfg->buffer;
 801f9be:	64e3      	str	r3, [r4, #76]	@ 0x4c
    lfs_cache_zero(lfs, &file->cache);
 801f9c0:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801f9c4:	4638      	mov	r0, r7
 801f9c6:	f7fb ff55 	bl	801b874 <lfs_cache_zero>
    return (tag & 0x7ff00000) >> 20;
 801f9ca:	f3c9 520a 	ubfx	r2, r9, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 801f9ce:	f240 2301 	movw	r3, #513	@ 0x201
 801f9d2:	429a      	cmp	r2, r3
 801f9d4:	d00b      	beq.n	801f9ee <lfs_file_opencfg_+0x1ce>
    return 0;
 801f9d6:	2600      	movs	r6, #0
 801f9d8:	e03b      	b.n	801fa52 <lfs_file_opencfg_+0x232>
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 801f9da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
    return malloc(size);
 801f9dc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801f9de:	f7fb faf3 	bl	801afc8 <pvPortMalloc>
 801f9e2:	64e0      	str	r0, [r4, #76]	@ 0x4c
        if (!file->cache.buffer) {
 801f9e4:	2800      	cmp	r0, #0
 801f9e6:	d1eb      	bne.n	801f9c0 <lfs_file_opencfg_+0x1a0>
            err = LFS_ERR_NOMEM;
 801f9e8:	f06f 060b 	mvn.w	r6, #11
 801f9ec:	e029      	b.n	801fa42 <lfs_file_opencfg_+0x222>
        file->ctz.head = LFS_BLOCK_INLINE;
 801f9ee:	f06f 0101 	mvn.w	r1, #1
 801f9f2:	62a1      	str	r1, [r4, #40]	@ 0x28
    return tag & 0x000003ff;
 801f9f4:	f3c9 0209 	ubfx	r2, r9, #0, #10
        file->ctz.size = lfs_tag_size(tag);
 801f9f8:	62e2      	str	r2, [r4, #44]	@ 0x2c
        file->flags |= LFS_F_INLINE;
 801f9fa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801f9fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801fa00:	6323      	str	r3, [r4, #48]	@ 0x30
        file->cache.block = file->ctz.head;
 801fa02:	6421      	str	r1, [r4, #64]	@ 0x40
        file->cache.off = 0;
 801fa04:	2300      	movs	r3, #0
 801fa06:	6463      	str	r3, [r4, #68]	@ 0x44
        file->cache.size = lfs->cfg->cache_size;
 801fa08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801fa0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801fa0c:	64a3      	str	r3, [r4, #72]	@ 0x48
        if (file->ctz.size > 0) {
 801fa0e:	b90a      	cbnz	r2, 801fa14 <lfs_file_opencfg_+0x1f4>
    return 0;
 801fa10:	2600      	movs	r6, #0
 801fa12:	e01e      	b.n	801fa52 <lfs_file_opencfg_+0x232>
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 801fa14:	88a1      	ldrh	r1, [r4, #4]
    return (a < b) ? a : b;
 801fa16:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 801fa1a:	4293      	cmp	r3, r2
 801fa1c:	bf28      	it	cs
 801fa1e:	4613      	movcs	r3, r2
 801fa20:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
                    file->cache.buffer);
 801fa24:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 801fa26:	9200      	str	r2, [sp, #0]
 801fa28:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801fa2c:	4a0e      	ldr	r2, [pc, #56]	@ (801fa68 <lfs_file_opencfg_+0x248>)
 801fa2e:	4641      	mov	r1, r8
 801fa30:	4638      	mov	r0, r7
 801fa32:	f7fc f8ed 	bl	801bc10 <lfs_dir_get>
            if (res < 0) {
 801fa36:	1e06      	subs	r6, r0, #0
 801fa38:	db03      	blt.n	801fa42 <lfs_file_opencfg_+0x222>
    return 0;
 801fa3a:	2600      	movs	r6, #0
 801fa3c:	e009      	b.n	801fa52 <lfs_file_opencfg_+0x232>
        err = LFS_ERR_EXIST;
 801fa3e:	f06f 0610 	mvn.w	r6, #16
    file->flags |= LFS_F_ERRED;
 801fa42:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801fa44:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801fa48:	6323      	str	r3, [r4, #48]	@ 0x30
    lfs_file_close_(lfs, file);
 801fa4a:	4621      	mov	r1, r4
 801fa4c:	4638      	mov	r0, r7
 801fa4e:	f7ff fbfd 	bl	801f24c <lfs_file_close_>
}
 801fa52:	4630      	mov	r0, r6
 801fa54:	b00b      	add	sp, #44	@ 0x2c
 801fa56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        err = LFS_ERR_ISDIR;
 801fa5a:	f06f 0614 	mvn.w	r6, #20
 801fa5e:	e7f0      	b.n	801fa42 <lfs_file_opencfg_+0x222>
                err = LFS_ERR_NOSPC;
 801fa60:	f06f 061b 	mvn.w	r6, #27
 801fa64:	e7ed      	b.n	801fa42 <lfs_file_opencfg_+0x222>
 801fa66:	bf00      	nop
 801fa68:	700ffc00 	.word	0x700ffc00
 801fa6c:	7ffffc00 	.word	0x7ffffc00
 801fa70:	20100000 	.word	0x20100000

0801fa74 <lfs_file_open_>:
        const char *path, int flags) {
 801fa74:	b510      	push	{r4, lr}
 801fa76:	b082      	sub	sp, #8
    int err = lfs_file_opencfg_(lfs, file, path, flags, &defaults);
 801fa78:	4c02      	ldr	r4, [pc, #8]	@ (801fa84 <lfs_file_open_+0x10>)
 801fa7a:	9400      	str	r4, [sp, #0]
 801fa7c:	f7ff fed0 	bl	801f820 <lfs_file_opencfg_>
}
 801fa80:	b002      	add	sp, #8
 801fa82:	bd10      	pop	{r4, pc}
 801fa84:	0803a568 	.word	0x0803a568

0801fa88 <lfs_mkdir_>:
static int lfs_mkdir_(lfs_t *lfs, const char *path) {
 801fa88:	b530      	push	{r4, r5, lr}
 801fa8a:	b0ab      	sub	sp, #172	@ 0xac
 801fa8c:	4604      	mov	r4, r0
 801fa8e:	9101      	str	r1, [sp, #4]
    int err = lfs_fs_forceconsistency(lfs);
 801fa90:	f7fe ff84 	bl	801e99c <lfs_fs_forceconsistency>
    if (err) {
 801fa94:	4603      	mov	r3, r0
 801fa96:	b110      	cbz	r0, 801fa9e <lfs_mkdir_+0x16>
}
 801fa98:	4618      	mov	r0, r3
 801fa9a:	b02b      	add	sp, #172	@ 0xac
 801fa9c:	bd30      	pop	{r4, r5, pc}
    cwd.next = lfs->mlist;
 801fa9e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801faa0:	931c      	str	r3, [sp, #112]	@ 0x70
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
 801faa2:	f10d 036e 	add.w	r3, sp, #110	@ 0x6e
 801faa6:	aa01      	add	r2, sp, #4
 801faa8:	a91e      	add	r1, sp, #120	@ 0x78
 801faaa:	4620      	mov	r0, r4
 801faac:	f7ff fbe2 	bl	801f274 <lfs_dir_find>
 801fab0:	4603      	mov	r3, r0
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
 801fab2:	f110 0f02 	cmn.w	r0, #2
 801fab6:	d12f      	bne.n	801fb18 <lfs_mkdir_+0x90>
 801fab8:	f8bd 106e 	ldrh.w	r1, [sp, #110]	@ 0x6e
 801fabc:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 801fac0:	4291      	cmp	r1, r2
 801fac2:	d029      	beq.n	801fb18 <lfs_mkdir_+0x90>
    lfs_size_t nlen = strlen(path);
 801fac4:	9801      	ldr	r0, [sp, #4]
 801fac6:	f7f0 fbeb 	bl	80102a0 <strlen>
 801faca:	4605      	mov	r5, r0
    if (nlen > lfs->name_max) {
 801facc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801face:	4283      	cmp	r3, r0
 801fad0:	f0c0 8089 	bcc.w	801fbe6 <lfs_mkdir_+0x15e>
    lfs_alloc_ckpoint(lfs);
 801fad4:	4620      	mov	r0, r4
 801fad6:	f7fb fdad 	bl	801b634 <lfs_alloc_ckpoint>
    err = lfs_dir_alloc(lfs, &dir);
 801fada:	a913      	add	r1, sp, #76	@ 0x4c
 801fadc:	4620      	mov	r0, r4
 801fade:	f7fd f9f3 	bl	801cec8 <lfs_dir_alloc>
    if (err) {
 801fae2:	4603      	mov	r3, r0
 801fae4:	2800      	cmp	r0, #0
 801fae6:	d1d7      	bne.n	801fa98 <lfs_mkdir_+0x10>
    lfs_mdir_t pred = cwd.m;
 801fae8:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 801faec:	f10d 0e78 	add.w	lr, sp, #120	@ 0x78
 801faf0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801faf4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801faf8:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 801fafc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    while (pred.split) {
 801fb00:	f89d 3043 	ldrb.w	r3, [sp, #67]	@ 0x43
 801fb04:	b16b      	cbz	r3, 801fb22 <lfs_mkdir_+0x9a>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
 801fb06:	aa11      	add	r2, sp, #68	@ 0x44
 801fb08:	a90b      	add	r1, sp, #44	@ 0x2c
 801fb0a:	4620      	mov	r0, r4
 801fb0c:	f7fd f86e 	bl	801cbec <lfs_dir_fetch>
        if (err) {
 801fb10:	4603      	mov	r3, r0
 801fb12:	2800      	cmp	r0, #0
 801fb14:	d0f4      	beq.n	801fb00 <lfs_mkdir_+0x78>
 801fb16:	e7bf      	b.n	801fa98 <lfs_mkdir_+0x10>
        return (err < 0) ? err : LFS_ERR_EXIST;
 801fb18:	2b00      	cmp	r3, #0
 801fb1a:	dbbd      	blt.n	801fa98 <lfs_mkdir_+0x10>
 801fb1c:	f06f 0310 	mvn.w	r3, #16
 801fb20:	e7ba      	b.n	801fa98 <lfs_mkdir_+0x10>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
 801fb22:	4b32      	ldr	r3, [pc, #200]	@ (801fbec <lfs_mkdir_+0x164>)
 801fb24:	9326      	str	r3, [sp, #152]	@ 0x98
 801fb26:	ab11      	add	r3, sp, #68	@ 0x44
 801fb28:	9327      	str	r3, [sp, #156]	@ 0x9c
 801fb2a:	2301      	movs	r3, #1
 801fb2c:	aa26      	add	r2, sp, #152	@ 0x98
 801fb2e:	a913      	add	r1, sp, #76	@ 0x4c
 801fb30:	4620      	mov	r0, r4
 801fb32:	f7fe fe8b 	bl	801e84c <lfs_dir_commit>
    if (err) {
 801fb36:	4603      	mov	r3, r0
 801fb38:	2800      	cmp	r0, #0
 801fb3a:	d1ad      	bne.n	801fa98 <lfs_mkdir_+0x10>
    if (cwd.m.split) {
 801fb3c:	f89d 308f 	ldrb.w	r3, [sp, #143]	@ 0x8f
 801fb40:	bb33      	cbnz	r3, 801fb90 <lfs_mkdir_+0x108>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 801fb42:	f8bd 306e 	ldrh.w	r3, [sp, #110]	@ 0x6e
 801fb46:	029b      	lsls	r3, r3, #10
 801fb48:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801fb4c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801fb50:	9203      	str	r2, [sp, #12]
 801fb52:	2200      	movs	r2, #0
 801fb54:	9204      	str	r2, [sp, #16]
 801fb56:	431d      	orrs	r5, r3
 801fb58:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 801fb5c:	9505      	str	r5, [sp, #20]
 801fb5e:	9a01      	ldr	r2, [sp, #4]
 801fb60:	9206      	str	r2, [sp, #24]
 801fb62:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801fb66:	f043 0308 	orr.w	r3, r3, #8
 801fb6a:	9307      	str	r3, [sp, #28]
 801fb6c:	ab13      	add	r3, sp, #76	@ 0x4c
 801fb6e:	9308      	str	r3, [sp, #32]
 801fb70:	f89d 308f 	ldrb.w	r3, [sp, #143]	@ 0x8f
 801fb74:	2b00      	cmp	r3, #0
 801fb76:	d134      	bne.n	801fbe2 <lfs_mkdir_+0x15a>
 801fb78:	4b1c      	ldr	r3, [pc, #112]	@ (801fbec <lfs_mkdir_+0x164>)
 801fb7a:	9309      	str	r3, [sp, #36]	@ 0x24
 801fb7c:	ab13      	add	r3, sp, #76	@ 0x4c
 801fb7e:	930a      	str	r3, [sp, #40]	@ 0x28
 801fb80:	2304      	movs	r3, #4
 801fb82:	aa03      	add	r2, sp, #12
 801fb84:	a91e      	add	r1, sp, #120	@ 0x78
 801fb86:	4620      	mov	r0, r4
 801fb88:	f7fe fe60 	bl	801e84c <lfs_dir_commit>
 801fb8c:	4603      	mov	r3, r0
    if (err) {
 801fb8e:	e783      	b.n	801fa98 <lfs_mkdir_+0x10>
        err = lfs_fs_preporphans(lfs, +1);
 801fb90:	2101      	movs	r1, #1
 801fb92:	4620      	mov	r0, r4
 801fb94:	f7fb fe3e 	bl	801b814 <lfs_fs_preporphans>
        if (err) {
 801fb98:	4603      	mov	r3, r0
 801fb9a:	2800      	cmp	r0, #0
 801fb9c:	f47f af7c 	bne.w	801fa98 <lfs_mkdir_+0x10>
        cwd.type = 0;
 801fba0:	2300      	movs	r3, #0
 801fba2:	f88d 3076 	strb.w	r3, [sp, #118]	@ 0x76
        cwd.id = 0;
 801fba6:	f8ad 3074 	strh.w	r3, [sp, #116]	@ 0x74
        lfs->mlist = &cwd;
 801fbaa:	ab1c      	add	r3, sp, #112	@ 0x70
 801fbac:	62a3      	str	r3, [r4, #40]	@ 0x28
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
 801fbae:	4b0f      	ldr	r3, [pc, #60]	@ (801fbec <lfs_mkdir_+0x164>)
 801fbb0:	9328      	str	r3, [sp, #160]	@ 0xa0
 801fbb2:	ab13      	add	r3, sp, #76	@ 0x4c
 801fbb4:	9329      	str	r3, [sp, #164]	@ 0xa4
 801fbb6:	2301      	movs	r3, #1
 801fbb8:	aa28      	add	r2, sp, #160	@ 0xa0
 801fbba:	a90b      	add	r1, sp, #44	@ 0x2c
 801fbbc:	4620      	mov	r0, r4
 801fbbe:	f7fe fe45 	bl	801e84c <lfs_dir_commit>
        if (err) {
 801fbc2:	4603      	mov	r3, r0
 801fbc4:	b110      	cbz	r0, 801fbcc <lfs_mkdir_+0x144>
            lfs->mlist = cwd.next;
 801fbc6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801fbc8:	62a2      	str	r2, [r4, #40]	@ 0x28
            return err;
 801fbca:	e765      	b.n	801fa98 <lfs_mkdir_+0x10>
        lfs->mlist = cwd.next;
 801fbcc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801fbce:	62a3      	str	r3, [r4, #40]	@ 0x28
        err = lfs_fs_preporphans(lfs, -1);
 801fbd0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801fbd4:	4620      	mov	r0, r4
 801fbd6:	f7fb fe1d 	bl	801b814 <lfs_fs_preporphans>
        if (err) {
 801fbda:	4603      	mov	r3, r0
 801fbdc:	2800      	cmp	r0, #0
 801fbde:	d0b0      	beq.n	801fb42 <lfs_mkdir_+0xba>
 801fbe0:	e75a      	b.n	801fa98 <lfs_mkdir_+0x10>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 801fbe2:	2300      	movs	r3, #0
 801fbe4:	e7c9      	b.n	801fb7a <lfs_mkdir_+0xf2>
        return LFS_ERR_NAMETOOLONG;
 801fbe6:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 801fbea:	e755      	b.n	801fa98 <lfs_mkdir_+0x10>
 801fbec:	600ffc08 	.word	0x600ffc08

0801fbf0 <lfs_dir_getinfo>:
        uint16_t id, struct lfs_info *info) {
 801fbf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fbf2:	b085      	sub	sp, #20
 801fbf4:	461d      	mov	r5, r3
    if (id == 0x3ff) {
 801fbf6:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801fbfa:	429a      	cmp	r2, r3
 801fbfc:	d02b      	beq.n	801fc56 <lfs_dir_getinfo+0x66>
 801fbfe:	4604      	mov	r4, r0
 801fc00:	460e      	mov	r6, r1
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 801fc02:	0297      	lsls	r7, r2, #10
 801fc04:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 801fc06:	3301      	adds	r3, #1
 801fc08:	f105 0108 	add.w	r1, r5, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 801fc0c:	9100      	str	r1, [sp, #0]
 801fc0e:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 801fc12:	4a19      	ldr	r2, [pc, #100]	@ (801fc78 <lfs_dir_getinfo+0x88>)
 801fc14:	4631      	mov	r1, r6
 801fc16:	f7fb fffb 	bl	801bc10 <lfs_dir_get>
    if (tag < 0) {
 801fc1a:	2800      	cmp	r0, #0
 801fc1c:	db21      	blt.n	801fc62 <lfs_dir_getinfo+0x72>
    return (tag & 0x7ff00000) >> 20;
 801fc1e:	f3c0 520a 	ubfx	r2, r0, #20, #11
    info->type = lfs_tag_type3(tag);
 801fc22:	702a      	strb	r2, [r5, #0]
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801fc24:	ab02      	add	r3, sp, #8
 801fc26:	9300      	str	r3, [sp, #0]
 801fc28:	f047 5300 	orr.w	r3, r7, #536870912	@ 0x20000000
 801fc2c:	f043 0308 	orr.w	r3, r3, #8
 801fc30:	4a12      	ldr	r2, [pc, #72]	@ (801fc7c <lfs_dir_getinfo+0x8c>)
 801fc32:	4631      	mov	r1, r6
 801fc34:	4620      	mov	r0, r4
 801fc36:	f7fb ffeb 	bl	801bc10 <lfs_dir_get>
    if (tag < 0) {
 801fc3a:	2800      	cmp	r0, #0
 801fc3c:	db11      	blt.n	801fc62 <lfs_dir_getinfo+0x72>
    return (tag & 0x7ff00000) >> 20;
 801fc3e:	f3c0 530a 	ubfx	r3, r0, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 801fc42:	f240 2202 	movw	r2, #514	@ 0x202
 801fc46:	4293      	cmp	r3, r2
 801fc48:	d00d      	beq.n	801fc66 <lfs_dir_getinfo+0x76>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 801fc4a:	f240 2201 	movw	r2, #513	@ 0x201
 801fc4e:	4293      	cmp	r3, r2
 801fc50:	d00d      	beq.n	801fc6e <lfs_dir_getinfo+0x7e>
    return 0;
 801fc52:	2000      	movs	r0, #0
 801fc54:	e005      	b.n	801fc62 <lfs_dir_getinfo+0x72>
        strcpy(info->name, "/");
 801fc56:	4b0a      	ldr	r3, [pc, #40]	@ (801fc80 <lfs_dir_getinfo+0x90>)
 801fc58:	881b      	ldrh	r3, [r3, #0]
 801fc5a:	812b      	strh	r3, [r5, #8]
        info->type = LFS_TYPE_DIR;
 801fc5c:	2302      	movs	r3, #2
 801fc5e:	702b      	strb	r3, [r5, #0]
        return 0;
 801fc60:	2000      	movs	r0, #0
}
 801fc62:	b005      	add	sp, #20
 801fc64:	bdf0      	pop	{r4, r5, r6, r7, pc}
        info->size = ctz.size;
 801fc66:	9b03      	ldr	r3, [sp, #12]
 801fc68:	606b      	str	r3, [r5, #4]
    return 0;
 801fc6a:	2000      	movs	r0, #0
 801fc6c:	e7f9      	b.n	801fc62 <lfs_dir_getinfo+0x72>
    return tag & 0x000003ff;
 801fc6e:	f3c0 0009 	ubfx	r0, r0, #0, #10
        info->size = lfs_tag_size(tag);
 801fc72:	6068      	str	r0, [r5, #4]
    return 0;
 801fc74:	2000      	movs	r0, #0
 801fc76:	e7f4      	b.n	801fc62 <lfs_dir_getinfo+0x72>
 801fc78:	780ffc00 	.word	0x780ffc00
 801fc7c:	700ffc00 	.word	0x700ffc00
 801fc80:	0803ac7c 	.word	0x0803ac7c

0801fc84 <lfs_stat_>:
static int lfs_stat_(lfs_t *lfs, const char *path, struct lfs_info *info) {
 801fc84:	b530      	push	{r4, r5, lr}
 801fc86:	b08b      	sub	sp, #44	@ 0x2c
 801fc88:	4604      	mov	r4, r0
 801fc8a:	9101      	str	r1, [sp, #4]
 801fc8c:	4615      	mov	r5, r2
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 801fc8e:	2300      	movs	r3, #0
 801fc90:	aa01      	add	r2, sp, #4
 801fc92:	a902      	add	r1, sp, #8
 801fc94:	f7ff faee 	bl	801f274 <lfs_dir_find>
    if (tag < 0) {
 801fc98:	2800      	cmp	r0, #0
 801fc9a:	db06      	blt.n	801fcaa <lfs_stat_+0x26>
    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
 801fc9c:	462b      	mov	r3, r5
 801fc9e:	f3c0 2289 	ubfx	r2, r0, #10, #10
 801fca2:	a902      	add	r1, sp, #8
 801fca4:	4620      	mov	r0, r4
 801fca6:	f7ff ffa3 	bl	801fbf0 <lfs_dir_getinfo>
}
 801fcaa:	b00b      	add	sp, #44	@ 0x2c
 801fcac:	bd30      	pop	{r4, r5, pc}
	...

0801fcb0 <lfs_dir_read_>:
static int lfs_dir_read_(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 801fcb0:	b570      	push	{r4, r5, r6, lr}
 801fcb2:	4605      	mov	r5, r0
 801fcb4:	460c      	mov	r4, r1
 801fcb6:	4616      	mov	r6, r2
    memset(info, 0, sizeof(*info));
 801fcb8:	f44f 7284 	mov.w	r2, #264	@ 0x108
 801fcbc:	2100      	movs	r1, #0
 801fcbe:	4630      	mov	r0, r6
 801fcc0:	f00d f9ce 	bl	802d060 <memset>
    if (dir->pos == 0) {
 801fcc4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801fcc6:	b183      	cbz	r3, 801fcea <lfs_dir_read_+0x3a>
    } else if (dir->pos == 1) {
 801fcc8:	2b01      	cmp	r3, #1
 801fcca:	d11f      	bne.n	801fd0c <lfs_dir_read_+0x5c>
        info->type = LFS_TYPE_DIR;
 801fccc:	4633      	mov	r3, r6
 801fcce:	2202      	movs	r2, #2
 801fcd0:	f803 2b08 	strb.w	r2, [r3], #8
        strcpy(info->name, "..");
 801fcd4:	4a22      	ldr	r2, [pc, #136]	@ (801fd60 <lfs_dir_read_+0xb0>)
 801fcd6:	8811      	ldrh	r1, [r2, #0]
 801fcd8:	7892      	ldrb	r2, [r2, #2]
 801fcda:	8131      	strh	r1, [r6, #8]
 801fcdc:	709a      	strb	r2, [r3, #2]
        dir->pos += 1;
 801fcde:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801fce0:	3301      	adds	r3, #1
 801fce2:	62a3      	str	r3, [r4, #40]	@ 0x28
        return true;
 801fce4:	f04f 0c01 	mov.w	ip, #1
 801fce8:	e034      	b.n	801fd54 <lfs_dir_read_+0xa4>
        info->type = LFS_TYPE_DIR;
 801fcea:	2302      	movs	r3, #2
 801fcec:	7033      	strb	r3, [r6, #0]
        strcpy(info->name, ".");
 801fcee:	4b1d      	ldr	r3, [pc, #116]	@ (801fd64 <lfs_dir_read_+0xb4>)
 801fcf0:	881b      	ldrh	r3, [r3, #0]
 801fcf2:	8133      	strh	r3, [r6, #8]
        dir->pos += 1;
 801fcf4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801fcf6:	3301      	adds	r3, #1
 801fcf8:	62a3      	str	r3, [r4, #40]	@ 0x28
        return true;
 801fcfa:	f04f 0c01 	mov.w	ip, #1
 801fcfe:	e029      	b.n	801fd54 <lfs_dir_read_+0xa4>
        dir->id += 1;
 801fd00:	88a1      	ldrh	r1, [r4, #4]
 801fd02:	3101      	adds	r1, #1
 801fd04:	80a1      	strh	r1, [r4, #4]
        if (err != LFS_ERR_NOENT) {
 801fd06:	f11c 0f02 	cmn.w	ip, #2
 801fd0a:	d11e      	bne.n	801fd4a <lfs_dir_read_+0x9a>
        if (dir->id == dir->m.count) {
 801fd0c:	88a3      	ldrh	r3, [r4, #4]
 801fd0e:	8ba1      	ldrh	r1, [r4, #28]
 801fd10:	428b      	cmp	r3, r1
 801fd12:	d10c      	bne.n	801fd2e <lfs_dir_read_+0x7e>
            if (!dir->m.split) {
 801fd14:	7fe3      	ldrb	r3, [r4, #31]
 801fd16:	b1fb      	cbz	r3, 801fd58 <lfs_dir_read_+0xa8>
            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
 801fd18:	f104 0220 	add.w	r2, r4, #32
 801fd1c:	f104 0108 	add.w	r1, r4, #8
 801fd20:	4628      	mov	r0, r5
 801fd22:	f7fc ff63 	bl	801cbec <lfs_dir_fetch>
            if (err) {
 801fd26:	4684      	mov	ip, r0
 801fd28:	b9a0      	cbnz	r0, 801fd54 <lfs_dir_read_+0xa4>
            dir->id = 0;
 801fd2a:	2300      	movs	r3, #0
 801fd2c:	80a3      	strh	r3, [r4, #4]
        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
 801fd2e:	4633      	mov	r3, r6
 801fd30:	88a2      	ldrh	r2, [r4, #4]
 801fd32:	f104 0108 	add.w	r1, r4, #8
 801fd36:	4628      	mov	r0, r5
 801fd38:	f7ff ff5a 	bl	801fbf0 <lfs_dir_getinfo>
        if (err && err != LFS_ERR_NOENT) {
 801fd3c:	4684      	mov	ip, r0
 801fd3e:	2800      	cmp	r0, #0
 801fd40:	d0de      	beq.n	801fd00 <lfs_dir_read_+0x50>
 801fd42:	f110 0f02 	cmn.w	r0, #2
 801fd46:	d0db      	beq.n	801fd00 <lfs_dir_read_+0x50>
 801fd48:	e004      	b.n	801fd54 <lfs_dir_read_+0xa4>
    dir->pos += 1;
 801fd4a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801fd4c:	3301      	adds	r3, #1
 801fd4e:	62a3      	str	r3, [r4, #40]	@ 0x28
    return true;
 801fd50:	f04f 0c01 	mov.w	ip, #1
}
 801fd54:	4660      	mov	r0, ip
 801fd56:	bd70      	pop	{r4, r5, r6, pc}
                return false;
 801fd58:	f04f 0c00 	mov.w	ip, #0
 801fd5c:	e7fa      	b.n	801fd54 <lfs_dir_read_+0xa4>
 801fd5e:	bf00      	nop
 801fd60:	0803a43c 	.word	0x0803a43c
 801fd64:	080367c8 	.word	0x080367c8

0801fd68 <lfs_format>:
//#define LFS_UNLOCK(cfg) ((void)cfg)
//#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 801fd68:	b570      	push	{r4, r5, r6, lr}
 801fd6a:	4605      	mov	r5, r0
 801fd6c:	460c      	mov	r4, r1
    int err = LFS_LOCK(cfg);
 801fd6e:	694b      	ldr	r3, [r1, #20]
 801fd70:	4608      	mov	r0, r1
 801fd72:	4798      	blx	r3
    if (err) {
 801fd74:	4606      	mov	r6, r0
 801fd76:	b108      	cbz	r0, 801fd7c <lfs_format+0x14>
    err = lfs_format_(lfs, cfg);

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
}
 801fd78:	4630      	mov	r0, r6
 801fd7a:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_format_(lfs, cfg);
 801fd7c:	4621      	mov	r1, r4
 801fd7e:	4628      	mov	r0, r5
 801fd80:	f7ff f860 	bl	801ee44 <lfs_format_>
 801fd84:	4606      	mov	r6, r0
    LFS_UNLOCK(cfg);
 801fd86:	69a3      	ldr	r3, [r4, #24]
 801fd88:	4620      	mov	r0, r4
 801fd8a:	4798      	blx	r3
    return err;
 801fd8c:	e7f4      	b.n	801fd78 <lfs_format+0x10>

0801fd8e <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 801fd8e:	b570      	push	{r4, r5, r6, lr}
 801fd90:	4605      	mov	r5, r0
 801fd92:	460c      	mov	r4, r1
    int err = LFS_LOCK(cfg);
 801fd94:	694b      	ldr	r3, [r1, #20]
 801fd96:	4608      	mov	r0, r1
 801fd98:	4798      	blx	r3
    if (err) {
 801fd9a:	4606      	mov	r6, r0
 801fd9c:	b108      	cbz	r0, 801fda2 <lfs_mount+0x14>
    err = lfs_mount_(lfs, cfg);

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
}
 801fd9e:	4630      	mov	r0, r6
 801fda0:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_mount_(lfs, cfg);
 801fda2:	4621      	mov	r1, r4
 801fda4:	4628      	mov	r0, r5
 801fda6:	f7ff f8cb 	bl	801ef40 <lfs_mount_>
 801fdaa:	4606      	mov	r6, r0
    LFS_UNLOCK(cfg);
 801fdac:	69a3      	ldr	r3, [r4, #24]
 801fdae:	4620      	mov	r0, r4
 801fdb0:	4798      	blx	r3
    return err;
 801fdb2:	e7f4      	b.n	801fd9e <lfs_mount+0x10>

0801fdb4 <lfs_remove>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}

#ifndef LFS_READONLY
int lfs_remove(lfs_t *lfs, const char *path) {
 801fdb4:	b570      	push	{r4, r5, r6, lr}
 801fdb6:	4604      	mov	r4, r0
 801fdb8:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801fdba:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801fdbc:	6943      	ldr	r3, [r0, #20]
 801fdbe:	4798      	blx	r3
    if (err) {
 801fdc0:	4606      	mov	r6, r0
 801fdc2:	b108      	cbz	r0, 801fdc8 <lfs_remove+0x14>
    err = lfs_remove_(lfs, path);

    LFS_TRACE("lfs_remove -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801fdc4:	4630      	mov	r0, r6
 801fdc6:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_remove_(lfs, path);
 801fdc8:	4629      	mov	r1, r5
 801fdca:	4620      	mov	r0, r4
 801fdcc:	f7ff fb0e 	bl	801f3ec <lfs_remove_>
 801fdd0:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801fdd2:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801fdd4:	6983      	ldr	r3, [r0, #24]
 801fdd6:	4798      	blx	r3
    return err;
 801fdd8:	e7f4      	b.n	801fdc4 <lfs_remove+0x10>

0801fdda <lfs_rename>:
#endif

#ifndef LFS_READONLY
int lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {
 801fdda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fddc:	4604      	mov	r4, r0
 801fdde:	460d      	mov	r5, r1
 801fde0:	4616      	mov	r6, r2
    int err = LFS_LOCK(lfs->cfg);
 801fde2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801fde4:	6943      	ldr	r3, [r0, #20]
 801fde6:	4798      	blx	r3
    if (err) {
 801fde8:	4607      	mov	r7, r0
 801fdea:	b108      	cbz	r0, 801fdf0 <lfs_rename+0x16>
    err = lfs_rename_(lfs, oldpath, newpath);

    LFS_TRACE("lfs_rename -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801fdec:	4638      	mov	r0, r7
 801fdee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    err = lfs_rename_(lfs, oldpath, newpath);
 801fdf0:	4632      	mov	r2, r6
 801fdf2:	4629      	mov	r1, r5
 801fdf4:	4620      	mov	r0, r4
 801fdf6:	f7ff fbb9 	bl	801f56c <lfs_rename_>
 801fdfa:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801fdfc:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801fdfe:	6983      	ldr	r3, [r0, #24]
 801fe00:	4798      	blx	r3
    return err;
 801fe02:	e7f3      	b.n	801fdec <lfs_rename+0x12>

0801fe04 <lfs_stat>:
#endif

int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 801fe04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fe06:	4604      	mov	r4, r0
 801fe08:	460d      	mov	r5, r1
 801fe0a:	4616      	mov	r6, r2
    int err = LFS_LOCK(lfs->cfg);
 801fe0c:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801fe0e:	6943      	ldr	r3, [r0, #20]
 801fe10:	4798      	blx	r3
    if (err) {
 801fe12:	4607      	mov	r7, r0
 801fe14:	b108      	cbz	r0, 801fe1a <lfs_stat+0x16>
    err = lfs_stat_(lfs, path, info);

    LFS_TRACE("lfs_stat -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801fe16:	4638      	mov	r0, r7
 801fe18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    err = lfs_stat_(lfs, path, info);
 801fe1a:	4632      	mov	r2, r6
 801fe1c:	4629      	mov	r1, r5
 801fe1e:	4620      	mov	r0, r4
 801fe20:	f7ff ff30 	bl	801fc84 <lfs_stat_>
 801fe24:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801fe26:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801fe28:	6983      	ldr	r3, [r0, #24]
 801fe2a:	4798      	blx	r3
    return err;
 801fe2c:	e7f3      	b.n	801fe16 <lfs_stat+0x12>
	...

0801fe30 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 801fe30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fe34:	4604      	mov	r4, r0
 801fe36:	460d      	mov	r5, r1
 801fe38:	4616      	mov	r6, r2
 801fe3a:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 801fe3c:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801fe3e:	6942      	ldr	r2, [r0, #20]
 801fe40:	4790      	blx	r2
    if (err) {
 801fe42:	4607      	mov	r7, r0
 801fe44:	b110      	cbz	r0, 801fe4c <lfs_file_open+0x1c>
    err = lfs_file_open_(lfs, file, path, flags);

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801fe46:	4638      	mov	r0, r7
 801fe48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801fe4c:	4629      	mov	r1, r5
 801fe4e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801fe50:	f7fb fbc7 	bl	801b5e2 <lfs_mlist_isopen>
 801fe54:	b950      	cbnz	r0, 801fe6c <lfs_file_open+0x3c>
    err = lfs_file_open_(lfs, file, path, flags);
 801fe56:	4643      	mov	r3, r8
 801fe58:	4632      	mov	r2, r6
 801fe5a:	4629      	mov	r1, r5
 801fe5c:	4620      	mov	r0, r4
 801fe5e:	f7ff fe09 	bl	801fa74 <lfs_file_open_>
 801fe62:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801fe64:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801fe66:	6983      	ldr	r3, [r0, #24]
 801fe68:	4798      	blx	r3
    return err;
 801fe6a:	e7ec      	b.n	801fe46 <lfs_file_open+0x16>
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801fe6c:	4b03      	ldr	r3, [pc, #12]	@ (801fe7c <lfs_file_open+0x4c>)
 801fe6e:	4a04      	ldr	r2, [pc, #16]	@ (801fe80 <lfs_file_open+0x50>)
 801fe70:	f241 71ad 	movw	r1, #6061	@ 0x17ad
 801fe74:	4803      	ldr	r0, [pc, #12]	@ (801fe84 <lfs_file_open+0x54>)
 801fe76:	f00a fba1 	bl	802a5bc <__assert_func>
 801fe7a:	bf00      	nop
 801fe7c:	0803a440 	.word	0x0803a440
 801fe80:	0803a574 	.word	0x0803a574
 801fe84:	080398c4 	.word	0x080398c4

0801fe88 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 801fe88:	b570      	push	{r4, r5, r6, lr}
 801fe8a:	4604      	mov	r4, r0
 801fe8c:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801fe8e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801fe90:	6943      	ldr	r3, [r0, #20]
 801fe92:	4798      	blx	r3
    if (err) {
 801fe94:	4606      	mov	r6, r0
 801fe96:	b108      	cbz	r0, 801fe9c <lfs_file_close+0x14>
    err = lfs_file_close_(lfs, file);

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801fe98:	4630      	mov	r0, r6
 801fe9a:	bd70      	pop	{r4, r5, r6, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801fe9c:	4629      	mov	r1, r5
 801fe9e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801fea0:	f7fb fb9f 	bl	801b5e2 <lfs_mlist_isopen>
 801fea4:	b140      	cbz	r0, 801feb8 <lfs_file_close+0x30>
    err = lfs_file_close_(lfs, file);
 801fea6:	4629      	mov	r1, r5
 801fea8:	4620      	mov	r0, r4
 801feaa:	f7ff f9cf 	bl	801f24c <lfs_file_close_>
 801feae:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801feb0:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801feb2:	6983      	ldr	r3, [r0, #24]
 801feb4:	4798      	blx	r3
    return err;
 801feb6:	e7ef      	b.n	801fe98 <lfs_file_close+0x10>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801feb8:	4b03      	ldr	r3, [pc, #12]	@ (801fec8 <lfs_file_close+0x40>)
 801feba:	4a04      	ldr	r2, [pc, #16]	@ (801fecc <lfs_file_close+0x44>)
 801febc:	f241 71d1 	movw	r1, #6097	@ 0x17d1
 801fec0:	4803      	ldr	r0, [pc, #12]	@ (801fed0 <lfs_file_close+0x48>)
 801fec2:	f00a fb7b 	bl	802a5bc <__assert_func>
 801fec6:	bf00      	nop
 801fec8:	0803a478 	.word	0x0803a478
 801fecc:	0803a558 	.word	0x0803a558
 801fed0:	080398c4 	.word	0x080398c4

0801fed4 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 801fed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fed8:	4604      	mov	r4, r0
 801feda:	460d      	mov	r5, r1
 801fedc:	4616      	mov	r6, r2
 801fede:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 801fee0:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801fee2:	6942      	ldr	r2, [r0, #20]
 801fee4:	4790      	blx	r2
    if (err) {
 801fee6:	4607      	mov	r7, r0
 801fee8:	b110      	cbz	r0, 801fef0 <lfs_file_read+0x1c>
    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 801feea:	4638      	mov	r0, r7
 801feec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801fef0:	4629      	mov	r1, r5
 801fef2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801fef4:	f7fb fb75 	bl	801b5e2 <lfs_mlist_isopen>
 801fef8:	b150      	cbz	r0, 801ff10 <lfs_file_read+0x3c>
    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);
 801fefa:	4643      	mov	r3, r8
 801fefc:	4632      	mov	r2, r6
 801fefe:	4629      	mov	r1, r5
 801ff00:	4620      	mov	r0, r4
 801ff02:	f7fd fac1 	bl	801d488 <lfs_file_read_>
 801ff06:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801ff08:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801ff0a:	6983      	ldr	r3, [r0, #24]
 801ff0c:	4798      	blx	r3
    return res;
 801ff0e:	e7ec      	b.n	801feea <lfs_file_read+0x16>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801ff10:	4b03      	ldr	r3, [pc, #12]	@ (801ff20 <lfs_file_read+0x4c>)
 801ff12:	4a04      	ldr	r2, [pc, #16]	@ (801ff24 <lfs_file_read+0x50>)
 801ff14:	f241 71f3 	movw	r1, #6131	@ 0x17f3
 801ff18:	4803      	ldr	r0, [pc, #12]	@ (801ff28 <lfs_file_read+0x54>)
 801ff1a:	f00a fb4f 	bl	802a5bc <__assert_func>
 801ff1e:	bf00      	nop
 801ff20:	0803a478 	.word	0x0803a478
 801ff24:	0803a548 	.word	0x0803a548
 801ff28:	080398c4 	.word	0x080398c4

0801ff2c <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 801ff2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ff30:	4604      	mov	r4, r0
 801ff32:	460d      	mov	r5, r1
 801ff34:	4616      	mov	r6, r2
 801ff36:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 801ff38:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801ff3a:	6942      	ldr	r2, [r0, #20]
 801ff3c:	4790      	blx	r2
    if (err) {
 801ff3e:	4607      	mov	r7, r0
 801ff40:	b110      	cbz	r0, 801ff48 <lfs_file_write+0x1c>
    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 801ff42:	4638      	mov	r0, r7
 801ff44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801ff48:	4629      	mov	r1, r5
 801ff4a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801ff4c:	f7fb fb49 	bl	801b5e2 <lfs_mlist_isopen>
 801ff50:	b150      	cbz	r0, 801ff68 <lfs_file_write+0x3c>
    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);
 801ff52:	4643      	mov	r3, r8
 801ff54:	4632      	mov	r2, r6
 801ff56:	4629      	mov	r1, r5
 801ff58:	4620      	mov	r0, r4
 801ff5a:	f7fd fb05 	bl	801d568 <lfs_file_write_>
 801ff5e:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801ff60:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801ff62:	6983      	ldr	r3, [r0, #24]
 801ff64:	4798      	blx	r3
    return res;
 801ff66:	e7ec      	b.n	801ff42 <lfs_file_write+0x16>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801ff68:	4b03      	ldr	r3, [pc, #12]	@ (801ff78 <lfs_file_write+0x4c>)
 801ff6a:	4a04      	ldr	r2, [pc, #16]	@ (801ff7c <lfs_file_write+0x50>)
 801ff6c:	f641 0105 	movw	r1, #6149	@ 0x1805
 801ff70:	4803      	ldr	r0, [pc, #12]	@ (801ff80 <lfs_file_write+0x54>)
 801ff72:	f00a fb23 	bl	802a5bc <__assert_func>
 801ff76:	bf00      	nop
 801ff78:	0803a478 	.word	0x0803a478
 801ff7c:	0803a528 	.word	0x0803a528
 801ff80:	080398c4 	.word	0x080398c4

0801ff84 <lfs_file_seek>:
#endif

lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 801ff84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ff88:	4604      	mov	r4, r0
 801ff8a:	460d      	mov	r5, r1
 801ff8c:	4616      	mov	r6, r2
 801ff8e:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 801ff90:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801ff92:	6942      	ldr	r2, [r0, #20]
 801ff94:	4790      	blx	r2
    if (err) {
 801ff96:	4607      	mov	r7, r0
 801ff98:	b110      	cbz	r0, 801ffa0 <lfs_file_seek+0x1c>
    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);

    LFS_TRACE("lfs_file_seek -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 801ff9a:	4638      	mov	r0, r7
 801ff9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801ffa0:	4629      	mov	r1, r5
 801ffa2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801ffa4:	f7fb fb1d 	bl	801b5e2 <lfs_mlist_isopen>
 801ffa8:	b150      	cbz	r0, 801ffc0 <lfs_file_seek+0x3c>
    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);
 801ffaa:	4643      	mov	r3, r8
 801ffac:	4632      	mov	r2, r6
 801ffae:	4629      	mov	r1, r5
 801ffb0:	4620      	mov	r0, r4
 801ffb2:	f7fd fa8d 	bl	801d4d0 <lfs_file_seek_>
 801ffb6:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801ffb8:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801ffba:	6983      	ldr	r3, [r0, #24]
 801ffbc:	4798      	blx	r3
    return res;
 801ffbe:	e7ec      	b.n	801ff9a <lfs_file_seek+0x16>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801ffc0:	4b03      	ldr	r3, [pc, #12]	@ (801ffd0 <lfs_file_seek+0x4c>)
 801ffc2:	4a04      	ldr	r2, [pc, #16]	@ (801ffd4 <lfs_file_seek+0x50>)
 801ffc4:	f641 0117 	movw	r1, #6167	@ 0x1817
 801ffc8:	4803      	ldr	r0, [pc, #12]	@ (801ffd8 <lfs_file_seek+0x54>)
 801ffca:	f00a faf7 	bl	802a5bc <__assert_func>
 801ffce:	bf00      	nop
 801ffd0:	0803a478 	.word	0x0803a478
 801ffd4:	0803a508 	.word	0x0803a508
 801ffd8:	080398c4 	.word	0x080398c4

0801ffdc <lfs_file_tell>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}
#endif

lfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {
 801ffdc:	b570      	push	{r4, r5, r6, lr}
 801ffde:	4604      	mov	r4, r0
 801ffe0:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801ffe2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801ffe4:	6943      	ldr	r3, [r0, #20]
 801ffe6:	4798      	blx	r3
    if (err) {
 801ffe8:	4606      	mov	r6, r0
 801ffea:	b108      	cbz	r0, 801fff0 <lfs_file_tell+0x14>
    lfs_soff_t res = lfs_file_tell_(lfs, file);

    LFS_TRACE("lfs_file_tell -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 801ffec:	4630      	mov	r0, r6
 801ffee:	bd70      	pop	{r4, r5, r6, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801fff0:	4629      	mov	r1, r5
 801fff2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801fff4:	f7fb faf5 	bl	801b5e2 <lfs_mlist_isopen>
 801fff8:	b140      	cbz	r0, 802000c <lfs_file_tell+0x30>
    lfs_soff_t res = lfs_file_tell_(lfs, file);
 801fffa:	4629      	mov	r1, r5
 801fffc:	4620      	mov	r0, r4
 801fffe:	f7fb fba4 	bl	801b74a <lfs_file_tell_>
 8020002:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 8020004:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8020006:	6983      	ldr	r3, [r0, #24]
 8020008:	4798      	blx	r3
    return res;
 802000a:	e7ef      	b.n	801ffec <lfs_file_tell+0x10>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802000c:	4b03      	ldr	r3, [pc, #12]	@ (802001c <lfs_file_tell+0x40>)
 802000e:	4a04      	ldr	r2, [pc, #16]	@ (8020020 <lfs_file_tell+0x44>)
 8020010:	f641 0138 	movw	r1, #6200	@ 0x1838
 8020014:	4803      	ldr	r0, [pc, #12]	@ (8020024 <lfs_file_tell+0x48>)
 8020016:	f00a fad1 	bl	802a5bc <__assert_func>
 802001a:	bf00      	nop
 802001c:	0803a478 	.word	0x0803a478
 8020020:	0803a4f8 	.word	0x0803a4f8
 8020024:	080398c4 	.word	0x080398c4

08020028 <lfs_mkdir>:
    LFS_UNLOCK(lfs->cfg);
    return res;
}

#ifndef LFS_READONLY
int lfs_mkdir(lfs_t *lfs, const char *path) {
 8020028:	b570      	push	{r4, r5, r6, lr}
 802002a:	4604      	mov	r4, r0
 802002c:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 802002e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8020030:	6943      	ldr	r3, [r0, #20]
 8020032:	4798      	blx	r3
    if (err) {
 8020034:	4606      	mov	r6, r0
 8020036:	b108      	cbz	r0, 802003c <lfs_mkdir+0x14>
    err = lfs_mkdir_(lfs, path);

    LFS_TRACE("lfs_mkdir -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 8020038:	4630      	mov	r0, r6
 802003a:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_mkdir_(lfs, path);
 802003c:	4629      	mov	r1, r5
 802003e:	4620      	mov	r0, r4
 8020040:	f7ff fd22 	bl	801fa88 <lfs_mkdir_>
 8020044:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 8020046:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8020048:	6983      	ldr	r3, [r0, #24]
 802004a:	4798      	blx	r3
    return err;
 802004c:	e7f4      	b.n	8020038 <lfs_mkdir+0x10>
	...

08020050 <lfs_dir_open>:
#endif

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 8020050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020052:	4604      	mov	r4, r0
 8020054:	460f      	mov	r7, r1
 8020056:	4615      	mov	r5, r2
    int err = LFS_LOCK(lfs->cfg);
 8020058:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 802005a:	6943      	ldr	r3, [r0, #20]
 802005c:	4798      	blx	r3
    if (err) {
 802005e:	4606      	mov	r6, r0
 8020060:	b108      	cbz	r0, 8020066 <lfs_dir_open+0x16>
    err = lfs_dir_open_(lfs, dir, path);

    LFS_TRACE("lfs_dir_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 8020062:	4630      	mov	r0, r6
 8020064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 8020066:	4639      	mov	r1, r7
 8020068:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 802006a:	f7fb faba 	bl	801b5e2 <lfs_mlist_isopen>
 802006e:	b948      	cbnz	r0, 8020084 <lfs_dir_open+0x34>
    err = lfs_dir_open_(lfs, dir, path);
 8020070:	462a      	mov	r2, r5
 8020072:	4639      	mov	r1, r7
 8020074:	4620      	mov	r0, r4
 8020076:	f7ff fa31 	bl	801f4dc <lfs_dir_open_>
 802007a:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 802007c:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 802007e:	6983      	ldr	r3, [r0, #24]
 8020080:	4798      	blx	r3
    return err;
 8020082:	e7ee      	b.n	8020062 <lfs_dir_open+0x12>
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 8020084:	4b03      	ldr	r3, [pc, #12]	@ (8020094 <lfs_dir_open+0x44>)
 8020086:	4a04      	ldr	r2, [pc, #16]	@ (8020098 <lfs_dir_open+0x48>)
 8020088:	f641 0174 	movw	r1, #6260	@ 0x1874
 802008c:	4803      	ldr	r0, [pc, #12]	@ (802009c <lfs_dir_open+0x4c>)
 802008e:	f00a fa95 	bl	802a5bc <__assert_func>
 8020092:	bf00      	nop
 8020094:	0803a4b0 	.word	0x0803a4b0
 8020098:	0803a4e8 	.word	0x0803a4e8
 802009c:	080398c4 	.word	0x080398c4

080200a0 <lfs_dir_close>:

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
 80200a0:	b570      	push	{r4, r5, r6, lr}
 80200a2:	4604      	mov	r4, r0
 80200a4:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 80200a6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80200a8:	6943      	ldr	r3, [r0, #20]
 80200aa:	4798      	blx	r3
    if (err) {
 80200ac:	4606      	mov	r6, r0
 80200ae:	b108      	cbz	r0, 80200b4 <lfs_dir_close+0x14>
    err = lfs_dir_close_(lfs, dir);

    LFS_TRACE("lfs_dir_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 80200b0:	4630      	mov	r0, r6
 80200b2:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_dir_close_(lfs, dir);
 80200b4:	4629      	mov	r1, r5
 80200b6:	4620      	mov	r0, r4
 80200b8:	f7fb fb42 	bl	801b740 <lfs_dir_close_>
 80200bc:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 80200be:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 80200c0:	6983      	ldr	r3, [r0, #24]
 80200c2:	4798      	blx	r3
    return err;
 80200c4:	e7f4      	b.n	80200b0 <lfs_dir_close+0x10>

080200c6 <lfs_dir_read>:

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 80200c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80200c8:	4604      	mov	r4, r0
 80200ca:	460d      	mov	r5, r1
 80200cc:	4616      	mov	r6, r2
    int err = LFS_LOCK(lfs->cfg);
 80200ce:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80200d0:	6943      	ldr	r3, [r0, #20]
 80200d2:	4798      	blx	r3
    if (err) {
 80200d4:	4607      	mov	r7, r0
 80200d6:	b108      	cbz	r0, 80200dc <lfs_dir_read+0x16>
    err = lfs_dir_read_(lfs, dir, info);

    LFS_TRACE("lfs_dir_read -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 80200d8:	4638      	mov	r0, r7
 80200da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    err = lfs_dir_read_(lfs, dir, info);
 80200dc:	4632      	mov	r2, r6
 80200de:	4629      	mov	r1, r5
 80200e0:	4620      	mov	r0, r4
 80200e2:	f7ff fde5 	bl	801fcb0 <lfs_dir_read_>
 80200e6:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 80200e8:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 80200ea:	6983      	ldr	r3, [r0, #24]
 80200ec:	4798      	blx	r3
    return err;
 80200ee:	e7f3      	b.n	80200d8 <lfs_dir_read+0x12>

080200f0 <lfs_crc>:
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;

    for (size_t i = 0; i < size; i++) {
 80200f0:	f04f 0c00 	mov.w	ip, #0
 80200f4:	4594      	cmp	ip, r2
 80200f6:	d218      	bcs.n	802012a <lfs_crc+0x3a>
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 80200f8:	b530      	push	{r4, r5, lr}
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 80200fa:	f811 300c 	ldrb.w	r3, [r1, ip]
 80200fe:	ea83 0e00 	eor.w	lr, r3, r0
 8020102:	f00e 0e0f 	and.w	lr, lr, #15
 8020106:	4c09      	ldr	r4, [pc, #36]	@ (802012c <lfs_crc+0x3c>)
 8020108:	f854 502e 	ldr.w	r5, [r4, lr, lsl #2]
 802010c:	ea85 1010 	eor.w	r0, r5, r0, lsr #4
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 8020110:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
 8020114:	f003 030f 	and.w	r3, r3, #15
 8020118:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 802011c:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
    for (size_t i = 0; i < size; i++) {
 8020120:	f10c 0c01 	add.w	ip, ip, #1
 8020124:	4594      	cmp	ip, r2
 8020126:	d3e8      	bcc.n	80200fa <lfs_crc+0xa>
    }

    return crc;
}
 8020128:	bd30      	pop	{r4, r5, pc}
 802012a:	4770      	bx	lr
 802012c:	0803a65c 	.word	0x0803a65c

08020130 <mg_base64_decode_single>:
    return c == 62 ? '+' : '/';
  }
}

static int mg_base64_decode_single(int c) {
  if (c >= 'A' && c <= 'Z') {
 8020130:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8020134:	2b19      	cmp	r3, #25
 8020136:	d913      	bls.n	8020160 <mg_base64_decode_single+0x30>
    return c - 'A';
  } else if (c >= 'a' && c <= 'z') {
 8020138:	283d      	cmp	r0, #61	@ 0x3d
 802013a:	dc18      	bgt.n	802016e <mg_base64_decode_single+0x3e>
 802013c:	282b      	cmp	r0, #43	@ 0x2b
 802013e:	db20      	blt.n	8020182 <mg_base64_decode_single+0x52>
 8020140:	f1a0 032b 	sub.w	r3, r0, #43	@ 0x2b
 8020144:	2b12      	cmp	r3, #18
 8020146:	d80f      	bhi.n	8020168 <mg_base64_decode_single+0x38>
 8020148:	e8df f003 	tbb	[pc, r3]
 802014c:	0e0e0e0c 	.word	0x0e0e0e0c
 8020150:	1717171e 	.word	0x1717171e
 8020154:	17171717 	.word	0x17171717
 8020158:	0e171717 	.word	0x0e171717
 802015c:	0e0e      	.short	0x0e0e
 802015e:	19          	.byte	0x19
 802015f:	00          	.byte	0x00
    return c - 'A';
 8020160:	4618      	mov	r0, r3
 8020162:	4770      	bx	lr
  if (c >= 'A' && c <= 'Z') {
 8020164:	203e      	movs	r0, #62	@ 0x3e
 8020166:	4770      	bx	lr
  } else if (c == '/') {
    return 63;
  } else if (c == '=') {
    return 64;
  } else {
    return -1;
 8020168:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802016c:	4770      	bx	lr
 802016e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8020172:	2b19      	cmp	r3, #25
 8020174:	d80a      	bhi.n	802018c <mg_base64_decode_single+0x5c>
    return c + 26 - 'a';
 8020176:	3847      	subs	r0, #71	@ 0x47
 8020178:	4770      	bx	lr
    return c + 52 - '0';
 802017a:	3004      	adds	r0, #4
 802017c:	4770      	bx	lr
    return 64;
 802017e:	2040      	movs	r0, #64	@ 0x40
 8020180:	4770      	bx	lr
    return -1;
 8020182:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020186:	4770      	bx	lr
    return 63;
 8020188:	203f      	movs	r0, #63	@ 0x3f
 802018a:	4770      	bx	lr
    return -1;
 802018c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  }
}
 8020190:	4770      	bx	lr

08020192 <is_digit>:




static bool is_digit(int c) {
  return c >= '0' && c <= '9';
 8020192:	3830      	subs	r0, #48	@ 0x30
}
 8020194:	2809      	cmp	r0, #9
 8020196:	bf8c      	ite	hi
 8020198:	2000      	movhi	r0, #0
 802019a:	2001      	movls	r0, #1
 802019c:	4770      	bx	lr
	...

080201a0 <addexp>:

static int addexp(char *buf, int e, int sign) {
 80201a0:	4684      	mov	ip, r0
  int n = 0;
  buf[n++] = 'e';
 80201a2:	2365      	movs	r3, #101	@ 0x65
 80201a4:	7003      	strb	r3, [r0, #0]
  buf[n++] = (char) sign;
 80201a6:	7042      	strb	r2, [r0, #1]
  if (e > 400) return 0;
 80201a8:	f5b1 7fc8 	cmp.w	r1, #400	@ 0x190
 80201ac:	dc2c      	bgt.n	8020208 <addexp+0x68>
  if (e < 10) buf[n++] = '0';
 80201ae:	2909      	cmp	r1, #9
 80201b0:	dc03      	bgt.n	80201ba <addexp+0x1a>
 80201b2:	2330      	movs	r3, #48	@ 0x30
 80201b4:	7083      	strb	r3, [r0, #2]
 80201b6:	2303      	movs	r3, #3
 80201b8:	e000      	b.n	80201bc <addexp+0x1c>
  buf[n++] = (char) sign;
 80201ba:	2302      	movs	r3, #2
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
 80201bc:	2963      	cmp	r1, #99	@ 0x63
 80201be:	dd0d      	ble.n	80201dc <addexp+0x3c>
 80201c0:	4812      	ldr	r0, [pc, #72]	@ (802020c <addexp+0x6c>)
 80201c2:	fb80 2001 	smull	r2, r0, r0, r1
 80201c6:	17ca      	asrs	r2, r1, #31
 80201c8:	ebc2 1260 	rsb	r2, r2, r0, asr #5
 80201cc:	f102 0030 	add.w	r0, r2, #48	@ 0x30
 80201d0:	f80c 0003 	strb.w	r0, [ip, r3]
 80201d4:	2064      	movs	r0, #100	@ 0x64
 80201d6:	fb00 1112 	mls	r1, r0, r2, r1
 80201da:	3301      	adds	r3, #1
  if (e >= 10) buf[n++] = (char) (e / 10 + '0'), e -= 10 * (e / 10);
 80201dc:	2909      	cmp	r1, #9
 80201de:	dd0e      	ble.n	80201fe <addexp+0x5e>
 80201e0:	480b      	ldr	r0, [pc, #44]	@ (8020210 <addexp+0x70>)
 80201e2:	fb80 2001 	smull	r2, r0, r0, r1
 80201e6:	17ca      	asrs	r2, r1, #31
 80201e8:	ebc2 02a0 	rsb	r2, r2, r0, asr #2
 80201ec:	f102 0030 	add.w	r0, r2, #48	@ 0x30
 80201f0:	f80c 0003 	strb.w	r0, [ip, r3]
 80201f4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80201f8:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
 80201fc:	3301      	adds	r3, #1
  buf[n++] = (char) (e + '0');
 80201fe:	1c58      	adds	r0, r3, #1
 8020200:	3130      	adds	r1, #48	@ 0x30
 8020202:	f80c 1003 	strb.w	r1, [ip, r3]
  return n;
 8020206:	4770      	bx	lr
  if (e > 400) return 0;
 8020208:	2000      	movs	r0, #0
}
 802020a:	4770      	bx	lr
 802020c:	51eb851f 	.word	0x51eb851f
 8020210:	66666667 	.word	0x66666667

08020214 <xisinf>:

static int xisinf(double x) {
 8020214:	ec53 2b10 	vmov	r2, r3, d0
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 8020218:	4611      	mov	r1, r2
 802021a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802021e:	4a05      	ldr	r2, [pc, #20]	@ (8020234 <xisinf+0x20>)
 8020220:	4293      	cmp	r3, r2
 8020222:	d001      	beq.n	8020228 <xisinf+0x14>
 8020224:	2000      	movs	r0, #0
 8020226:	4770      	bx	lr
 8020228:	b109      	cbz	r1, 802022e <xisinf+0x1a>
 802022a:	2000      	movs	r0, #0
 802022c:	4770      	bx	lr
 802022e:	2001      	movs	r0, #1
         ((unsigned) ieee754.u == 0);
}
 8020230:	4770      	bx	lr
 8020232:	bf00      	nop
 8020234:	7ff00000 	.word	0x7ff00000

08020238 <xisnan>:

static int xisnan(double x) {
 8020238:	ec51 0b10 	vmov	r0, r1, d0
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 802023c:	4602      	mov	r2, r0
 802023e:	f021 4000 	bic.w	r0, r1, #2147483648	@ 0x80000000
 8020242:	2a00      	cmp	r2, #0
 8020244:	bf18      	it	ne
 8020246:	3001      	addne	r0, #1
             ((unsigned) ieee754.u != 0) >
         0x7ff00000;
}
 8020248:	4b02      	ldr	r3, [pc, #8]	@ (8020254 <xisnan+0x1c>)
 802024a:	4298      	cmp	r0, r3
 802024c:	bf94      	ite	ls
 802024e:	2000      	movls	r0, #0
 8020250:	2001      	movhi	r0, #1
 8020252:	4770      	bx	lr
 8020254:	7ff00000 	.word	0x7ff00000

08020258 <mg_lld>:
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
  buf[n] = '\0';
  return mg_snprintf(dst, dstlen, "%s", buf);
}

static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {
 8020258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802025c:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8020260:	f89d 101c 	ldrb.w	r1, [sp, #28]
  const char *letters = "0123456789abcdef";
  uint64_t v = (uint64_t) val;
 8020264:	4694      	mov	ip, r2
 8020266:	469e      	mov	lr, r3
  size_t s = 0, n, i;
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 8020268:	b15c      	cbz	r4, 8020282 <mg_lld+0x2a>
 802026a:	2b00      	cmp	r3, #0
 802026c:	db01      	blt.n	8020272 <mg_lld+0x1a>
  size_t s = 0, n, i;
 802026e:	2500      	movs	r5, #0
 8020270:	e008      	b.n	8020284 <mg_lld+0x2c>
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 8020272:	242d      	movs	r4, #45	@ 0x2d
 8020274:	7004      	strb	r4, [r0, #0]
 8020276:	f1d2 0c00 	rsbs	ip, r2, #0
 802027a:	eb63 0e43 	sbc.w	lr, r3, r3, lsl #1
 802027e:	2501      	movs	r5, #1
 8020280:	e000      	b.n	8020284 <mg_lld+0x2c>
  size_t s = 0, n, i;
 8020282:	2500      	movs	r5, #0
  // This loop prints a number in reverse order. I guess this is because we
  // write numbers from right to left: least significant digit comes last.
  // Maybe because we use Arabic numbers, and Arabs write RTL?
  if (is_hex) {
 8020284:	b909      	cbnz	r1, 802028a <mg_lld+0x32>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
  } else {
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 8020286:	2400      	movs	r4, #0
 8020288:	e02f      	b.n	80202ea <mg_lld+0x92>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
 802028a:	2400      	movs	r4, #0
 802028c:	ea5c 010e 	orrs.w	r1, ip, lr
 8020290:	d05a      	beq.n	8020348 <mg_lld+0xf0>
 8020292:	f00c 060f 	and.w	r6, ip, #15
 8020296:	1929      	adds	r1, r5, r4
 8020298:	4f38      	ldr	r7, [pc, #224]	@ (802037c <mg_lld+0x124>)
 802029a:	5dbe      	ldrb	r6, [r7, r6]
 802029c:	5446      	strb	r6, [r0, r1]
 802029e:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 80202a2:	ea4c 7c0e 	orr.w	ip, ip, lr, lsl #28
 80202a6:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 80202aa:	3401      	adds	r4, #1
 80202ac:	e7ee      	b.n	802028c <mg_lld+0x34>
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 80202ae:	2601      	movs	r6, #1
 80202b0:	e022      	b.n	80202f8 <mg_lld+0xa0>
 80202b2:	4421      	add	r1, r4
 80202b4:	4f32      	ldr	r7, [pc, #200]	@ (8020380 <mg_lld+0x128>)
 80202b6:	fba7 4801 	umull	r4, r8, r7, r1
 80202ba:	f028 0403 	bic.w	r4, r8, #3
 80202be:	eb04 0498 	add.w	r4, r4, r8, lsr #2
 80202c2:	1b09      	subs	r1, r1, r4
 80202c4:	ebbc 0101 	subs.w	r1, ip, r1
 80202c8:	f16e 0e00 	sbc.w	lr, lr, #0
 80202cc:	f04f 34cc 	mov.w	r4, #3435973836	@ 0xcccccccc
 80202d0:	fb01 f404 	mul.w	r4, r1, r4
 80202d4:	fb07 440e 	mla	r4, r7, lr, r4
 80202d8:	fba1 1707 	umull	r1, r7, r1, r7
 80202dc:	443c      	add	r4, r7
 80202de:	0849      	lsrs	r1, r1, #1
 80202e0:	ea41 7cc4 	orr.w	ip, r1, r4, lsl #31
 80202e4:	ea4f 0e54 	mov.w	lr, r4, lsr #1
 80202e8:	4634      	mov	r4, r6
 80202ea:	ea5c 010e 	orrs.w	r1, ip, lr
 80202ee:	d02b      	beq.n	8020348 <mg_lld+0xf0>
 80202f0:	2600      	movs	r6, #0
 80202f2:	eb1c 010e 	adds.w	r1, ip, lr
 80202f6:	d2da      	bcs.n	80202ae <mg_lld+0x56>
 80202f8:	4431      	add	r1, r6
 80202fa:	4f21      	ldr	r7, [pc, #132]	@ (8020380 <mg_lld+0x128>)
 80202fc:	fba7 6801 	umull	r6, r8, r7, r1
 8020300:	f028 0603 	bic.w	r6, r8, #3
 8020304:	eb06 0698 	add.w	r6, r6, r8, lsr #2
 8020308:	1b89      	subs	r1, r1, r6
 802030a:	ebbc 0101 	subs.w	r1, ip, r1
 802030e:	f16e 0800 	sbc.w	r8, lr, #0
 8020312:	f04f 36cc 	mov.w	r6, #3435973836	@ 0xcccccccc
 8020316:	fb01 f606 	mul.w	r6, r1, r6
 802031a:	fb07 6608 	mla	r6, r7, r8, r6
 802031e:	fba1 1707 	umull	r1, r7, r1, r7
 8020322:	443e      	add	r6, r7
 8020324:	0849      	lsrs	r1, r1, #1
 8020326:	ea41 71c6 	orr.w	r1, r1, r6, lsl #31
 802032a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 802032e:	ebac 0141 	sub.w	r1, ip, r1, lsl #1
 8020332:	1c66      	adds	r6, r4, #1
 8020334:	442c      	add	r4, r5
 8020336:	4f11      	ldr	r7, [pc, #68]	@ (802037c <mg_lld+0x124>)
 8020338:	5c79      	ldrb	r1, [r7, r1]
 802033a:	5501      	strb	r1, [r0, r4]
 802033c:	2400      	movs	r4, #0
 802033e:	eb1c 010e 	adds.w	r1, ip, lr
 8020342:	d3b6      	bcc.n	80202b2 <mg_lld+0x5a>
 8020344:	2401      	movs	r4, #1
 8020346:	e7b4      	b.n	80202b2 <mg_lld+0x5a>
  }
  // Reverse a string
  for (i = 0; i < n / 2; i++) {
 8020348:	2600      	movs	r6, #0
 802034a:	e00c      	b.n	8020366 <mg_lld+0x10e>
    char t = buf[s + i];
 802034c:	19af      	adds	r7, r5, r6
 802034e:	f810 c007 	ldrb.w	ip, [r0, r7]
    buf[s + i] = buf[s + n - i - 1], buf[s + n - i - 1] = t;
 8020352:	1929      	adds	r1, r5, r4
 8020354:	1b89      	subs	r1, r1, r6
 8020356:	3901      	subs	r1, #1
 8020358:	f810 e001 	ldrb.w	lr, [r0, r1]
 802035c:	f800 e007 	strb.w	lr, [r0, r7]
 8020360:	f800 c001 	strb.w	ip, [r0, r1]
  for (i = 0; i < n / 2; i++) {
 8020364:	3601      	adds	r6, #1
 8020366:	ebb6 0f54 	cmp.w	r6, r4, lsr #1
 802036a:	d3ef      	bcc.n	802034c <mg_lld+0xf4>
  }
  if (val == 0) buf[n++] = '0';  // Handle special case
 802036c:	4313      	orrs	r3, r2
 802036e:	d102      	bne.n	8020376 <mg_lld+0x11e>
 8020370:	2330      	movs	r3, #48	@ 0x30
 8020372:	5503      	strb	r3, [r0, r4]
 8020374:	3401      	adds	r4, #1
  return n + s;
}
 8020376:	1928      	adds	r0, r5, r4
 8020378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802037c:	0803a69c 	.word	0x0803a69c
 8020380:	cccccccd 	.word	0xcccccccd

08020384 <scpy>:

static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,
                          size_t len) {
 8020384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020388:	4680      	mov	r8, r0
 802038a:	460f      	mov	r7, r1
 802038c:	4616      	mov	r6, r2
 802038e:	461d      	mov	r5, r3
  size_t i = 0;
 8020390:	2400      	movs	r4, #0
  while (i < len && buf[i] != '\0') out(buf[i++], ptr);
 8020392:	e002      	b.n	802039a <scpy+0x16>
 8020394:	3401      	adds	r4, #1
 8020396:	4639      	mov	r1, r7
 8020398:	47c0      	blx	r8
 802039a:	42ac      	cmp	r4, r5
 802039c:	d202      	bcs.n	80203a4 <scpy+0x20>
 802039e:	5d30      	ldrb	r0, [r6, r4]
 80203a0:	2800      	cmp	r0, #0
 80203a2:	d1f7      	bne.n	8020394 <scpy+0x10>
  return i;
}
 80203a4:	4620      	mov	r0, r4
 80203a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080203aa <p_stat>:
#else

static int p_stat(const char *path, size_t *size, time_t *mtime) {
  (void) path, (void) size, (void) mtime;
  return 0;
}
 80203aa:	2000      	movs	r0, #0
 80203ac:	4770      	bx	lr

080203ae <p_list>:
static void p_list(const char *path, void (*fn)(const char *, void *),
                   void *userdata) {
  (void) path, (void) fn, (void) userdata;
}
 80203ae:	4770      	bx	lr

080203b0 <p_open>:
static void *p_open(const char *path, int flags) {
  (void) path, (void) flags;
  return NULL;
}
 80203b0:	2000      	movs	r0, #0
 80203b2:	4770      	bx	lr

080203b4 <p_close>:
static void p_close(void *fp) {
  (void) fp;
}
 80203b4:	4770      	bx	lr

080203b6 <p_read>:
static size_t p_read(void *fd, void *buf, size_t len) {
  (void) fd, (void) buf, (void) len;
  return 0;
}
 80203b6:	2000      	movs	r0, #0
 80203b8:	4770      	bx	lr

080203ba <p_write>:
static size_t p_write(void *fd, const void *buf, size_t len) {
  (void) fd, (void) buf, (void) len;
  return 0;
}
 80203ba:	2000      	movs	r0, #0
 80203bc:	4770      	bx	lr

080203be <p_seek>:
static size_t p_seek(void *fd, size_t offset) {
  (void) fd, (void) offset;
  return (size_t) ~0;
}
 80203be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80203c2:	4770      	bx	lr

080203c4 <p_rename>:
static bool p_rename(const char *from, const char *to) {
  (void) from, (void) to;
  return false;
}
 80203c4:	2000      	movs	r0, #0
 80203c6:	4770      	bx	lr

080203c8 <p_remove>:
static bool p_remove(const char *path) {
  (void) path;
  return false;
}
 80203c8:	2000      	movs	r0, #0
 80203ca:	4770      	bx	lr

080203cc <p_mkdir>:
static bool p_mkdir(const char *path) {
  (void) path;
  return false;
}
 80203cc:	2000      	movs	r0, #0
 80203ce:	4770      	bx	lr

080203d0 <mg_ncasecmp>:





static int mg_ncasecmp(const char *s1, const char *s2, size_t len) {
 80203d0:	b530      	push	{r4, r5, lr}
 80203d2:	4686      	mov	lr, r0
  int diff = 0;
  if (len > 0) do {
 80203d4:	4614      	mov	r4, r2
 80203d6:	b94a      	cbnz	r2, 80203ec <mg_ncasecmp+0x1c>
  int diff = 0;
 80203d8:	2000      	movs	r0, #0
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
      diff = c - d;
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
  return diff;
}
 80203da:	bd30      	pop	{r4, r5, pc}
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 80203dc:	f10c 0020 	add.w	r0, ip, #32
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
 80203e0:	1a18      	subs	r0, r3, r0
 80203e2:	d1fa      	bne.n	80203da <mg_ncasecmp+0xa>
 80203e4:	2a00      	cmp	r2, #0
 80203e6:	d0f8      	beq.n	80203da <mg_ncasecmp+0xa>
 80203e8:	3c01      	subs	r4, #1
 80203ea:	d0f6      	beq.n	80203da <mg_ncasecmp+0xa>
      int c = *s1++, d = *s2++;
 80203ec:	f89e 2000 	ldrb.w	r2, [lr]
 80203f0:	f10e 0e01 	add.w	lr, lr, #1
 80203f4:	4613      	mov	r3, r2
 80203f6:	f891 c000 	ldrb.w	ip, [r1]
 80203fa:	3101      	adds	r1, #1
 80203fc:	4660      	mov	r0, ip
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
 80203fe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8020402:	2d19      	cmp	r5, #25
 8020404:	d801      	bhi.n	802040a <mg_ncasecmp+0x3a>
 8020406:	f102 0320 	add.w	r3, r2, #32
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 802040a:	f1ac 0541 	sub.w	r5, ip, #65	@ 0x41
 802040e:	2d19      	cmp	r5, #25
 8020410:	d8e6      	bhi.n	80203e0 <mg_ncasecmp+0x10>
 8020412:	e7e3      	b.n	80203dc <mg_ncasecmp+0xc>

08020414 <isx>:
  }
  return len;
}

static bool isx(int c) {
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8020414:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8020418:	2b09      	cmp	r3, #9
 802041a:	d908      	bls.n	802042e <isx+0x1a>
 802041c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8020420:	2b05      	cmp	r3, #5
 8020422:	d906      	bls.n	8020432 <isx+0x1e>
         (c >= 'A' && c <= 'F');
 8020424:	3841      	subs	r0, #65	@ 0x41
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8020426:	2805      	cmp	r0, #5
 8020428:	d805      	bhi.n	8020436 <isx+0x22>
 802042a:	2001      	movs	r0, #1
 802042c:	4770      	bx	lr
 802042e:	2001      	movs	r0, #1
 8020430:	4770      	bx	lr
 8020432:	2001      	movs	r0, #1
 8020434:	4770      	bx	lr
 8020436:	2000      	movs	r0, #0
}
 8020438:	4770      	bx	lr

0802043a <isok>:
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
  return i >= src_len && j < dst_len ? (int) j : -1;
}

static bool isok(uint8_t c) {
  return c == '\n' || c == '\r' || c == '\t' || c >= ' ';
 802043a:	280a      	cmp	r0, #10
 802043c:	d007      	beq.n	802044e <isok+0x14>
 802043e:	280d      	cmp	r0, #13
 8020440:	d007      	beq.n	8020452 <isok+0x18>
 8020442:	2809      	cmp	r0, #9
 8020444:	d007      	beq.n	8020456 <isok+0x1c>
 8020446:	281f      	cmp	r0, #31
 8020448:	d907      	bls.n	802045a <isok+0x20>
 802044a:	2001      	movs	r0, #1
 802044c:	4770      	bx	lr
 802044e:	2001      	movs	r0, #1
 8020450:	4770      	bx	lr
 8020452:	2001      	movs	r0, #1
 8020454:	4770      	bx	lr
 8020456:	2001      	movs	r0, #1
 8020458:	4770      	bx	lr
 802045a:	2000      	movs	r0, #0
}
 802045c:	4770      	bx	lr

0802045e <vcb>:
  return NULL;
}

// Is it a valid utf-8 continuation byte
static bool vcb(uint8_t c) {
  return (c & 0xc0) == 0x80;
 802045e:	f000 00c0 	and.w	r0, r0, #192	@ 0xc0
}
 8020462:	2880      	cmp	r0, #128	@ 0x80
 8020464:	bf14      	ite	ne
 8020466:	2000      	movne	r0, #0
 8020468:	2001      	moveq	r0, #1
 802046a:	4770      	bx	lr

0802046c <clen>:

// Get character length (valid utf-8). Used to parse method, URI, headers
static size_t clen(const char *s, const char *end) {
 802046c:	b570      	push	{r4, r5, r6, lr}
  const unsigned char *u = (unsigned char *) s, c = *u;
 802046e:	7805      	ldrb	r5, [r0, #0]
  long n = (long) (end - s);
 8020470:	1a0e      	subs	r6, r1, r0
  if (c > ' ' && c < '~') return 1;  // Usual ascii printed char
 8020472:	f1a5 0321 	sub.w	r3, r5, #33	@ 0x21
 8020476:	b2db      	uxtb	r3, r3
 8020478:	2b5c      	cmp	r3, #92	@ 0x5c
 802047a:	d936      	bls.n	80204ea <clen+0x7e>
 802047c:	4604      	mov	r4, r0
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 802047e:	f005 03e0 	and.w	r3, r5, #224	@ 0xe0
 8020482:	2bc0      	cmp	r3, #192	@ 0xc0
 8020484:	d009      	beq.n	802049a <clen+0x2e>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 8020486:	f005 03f0 	and.w	r3, r5, #240	@ 0xf0
 802048a:	2be0      	cmp	r3, #224	@ 0xe0
 802048c:	d00e      	beq.n	80204ac <clen+0x40>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 802048e:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8020492:	2df0      	cmp	r5, #240	@ 0xf0
 8020494:	d018      	beq.n	80204c8 <clen+0x5c>
    return 4;
  return 0;
 8020496:	2000      	movs	r0, #0
}
 8020498:	bd70      	pop	{r4, r5, r6, pc}
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 802049a:	2e01      	cmp	r6, #1
 802049c:	ddf3      	ble.n	8020486 <clen+0x1a>
 802049e:	7840      	ldrb	r0, [r0, #1]
 80204a0:	f7ff ffdd 	bl	802045e <vcb>
 80204a4:	2800      	cmp	r0, #0
 80204a6:	d0ee      	beq.n	8020486 <clen+0x1a>
 80204a8:	2002      	movs	r0, #2
 80204aa:	e7f5      	b.n	8020498 <clen+0x2c>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 80204ac:	2e02      	cmp	r6, #2
 80204ae:	ddee      	ble.n	802048e <clen+0x22>
 80204b0:	7860      	ldrb	r0, [r4, #1]
 80204b2:	f7ff ffd4 	bl	802045e <vcb>
 80204b6:	2800      	cmp	r0, #0
 80204b8:	d0e9      	beq.n	802048e <clen+0x22>
 80204ba:	78a0      	ldrb	r0, [r4, #2]
 80204bc:	f7ff ffcf 	bl	802045e <vcb>
 80204c0:	2800      	cmp	r0, #0
 80204c2:	d0e4      	beq.n	802048e <clen+0x22>
 80204c4:	2003      	movs	r0, #3
 80204c6:	e7e7      	b.n	8020498 <clen+0x2c>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 80204c8:	2e03      	cmp	r6, #3
 80204ca:	dd10      	ble.n	80204ee <clen+0x82>
 80204cc:	7860      	ldrb	r0, [r4, #1]
 80204ce:	f7ff ffc6 	bl	802045e <vcb>
 80204d2:	b170      	cbz	r0, 80204f2 <clen+0x86>
 80204d4:	78a0      	ldrb	r0, [r4, #2]
 80204d6:	f7ff ffc2 	bl	802045e <vcb>
 80204da:	b160      	cbz	r0, 80204f6 <clen+0x8a>
 80204dc:	78e0      	ldrb	r0, [r4, #3]
 80204de:	f7ff ffbe 	bl	802045e <vcb>
 80204e2:	2800      	cmp	r0, #0
 80204e4:	d0d8      	beq.n	8020498 <clen+0x2c>
    return 4;
 80204e6:	2004      	movs	r0, #4
 80204e8:	e7d6      	b.n	8020498 <clen+0x2c>
  if (c > ' ' && c < '~') return 1;  // Usual ascii printed char
 80204ea:	2001      	movs	r0, #1
 80204ec:	e7d4      	b.n	8020498 <clen+0x2c>
  return 0;
 80204ee:	2000      	movs	r0, #0
 80204f0:	e7d2      	b.n	8020498 <clen+0x2c>
 80204f2:	2000      	movs	r0, #0
 80204f4:	e7d0      	b.n	8020498 <clen+0x2c>
 80204f6:	2000      	movs	r0, #0
 80204f8:	e7ce      	b.n	8020498 <clen+0x2c>

080204fa <skiptorn>:

// Skip until the newline. Return advanced `s`, or NULL on error
static const char *skiptorn(const char *s, const char *end, struct mg_str *v) {
  v->buf = (char *) s;
 80204fa:	6010      	str	r0, [r2, #0]
  while (s < end && s[0] != '\n' && s[0] != '\r') s++, v->len++;  // To newline
 80204fc:	e003      	b.n	8020506 <skiptorn+0xc>
 80204fe:	3001      	adds	r0, #1
 8020500:	6853      	ldr	r3, [r2, #4]
 8020502:	3301      	adds	r3, #1
 8020504:	6053      	str	r3, [r2, #4]
 8020506:	4288      	cmp	r0, r1
 8020508:	d204      	bcs.n	8020514 <skiptorn+0x1a>
 802050a:	7803      	ldrb	r3, [r0, #0]
 802050c:	2b0a      	cmp	r3, #10
 802050e:	d001      	beq.n	8020514 <skiptorn+0x1a>
 8020510:	2b0d      	cmp	r3, #13
 8020512:	d1f4      	bne.n	80204fe <skiptorn+0x4>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 8020514:	4288      	cmp	r0, r1
 8020516:	d212      	bcs.n	802053e <skiptorn+0x44>
 8020518:	7803      	ldrb	r3, [r0, #0]
 802051a:	2b0d      	cmp	r3, #13
 802051c:	d008      	beq.n	8020530 <skiptorn+0x36>
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 802051e:	2b0d      	cmp	r3, #13
 8020520:	d00b      	beq.n	802053a <skiptorn+0x40>
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 8020522:	4288      	cmp	r0, r1
 8020524:	d20d      	bcs.n	8020542 <skiptorn+0x48>
 8020526:	f810 3b01 	ldrb.w	r3, [r0], #1
 802052a:	2b0a      	cmp	r3, #10
 802052c:	d10b      	bne.n	8020546 <skiptorn+0x4c>
  return s;
}
 802052e:	4770      	bx	lr
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 8020530:	7842      	ldrb	r2, [r0, #1]
 8020532:	2a0a      	cmp	r2, #10
 8020534:	d0f3      	beq.n	802051e <skiptorn+0x24>
 8020536:	2000      	movs	r0, #0
 8020538:	4770      	bx	lr
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 802053a:	3001      	adds	r0, #1
 802053c:	e7f1      	b.n	8020522 <skiptorn+0x28>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 802053e:	2000      	movs	r0, #0
 8020540:	4770      	bx	lr
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 8020542:	2000      	movs	r0, #0
 8020544:	4770      	bx	lr
 8020546:	2000      	movs	r0, #0
 8020548:	e7f1      	b.n	802052e <skiptorn+0x34>

0802054a <mg_http_parse_headers>:

static bool mg_http_parse_headers(const char *s, const char *end,
                                  struct mg_http_header *h, size_t max_hdrs) {
 802054a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802054e:	b084      	sub	sp, #16
 8020550:	4604      	mov	r4, r0
 8020552:	460d      	mov	r5, r1
 8020554:	4690      	mov	r8, r2
 8020556:	461f      	mov	r7, r3
  size_t i, n;
  for (i = 0; i < max_hdrs; i++) {
 8020558:	2600      	movs	r6, #0
 802055a:	e04d      	b.n	80205f8 <mg_http_parse_headers+0xae>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
    if (s >= end) return false;
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 802055c:	7863      	ldrb	r3, [r4, #1]
 802055e:	2b0a      	cmp	r3, #10
 8020560:	d158      	bne.n	8020614 <mg_http_parse_headers+0xca>
      v.len--;  // Trim spaces
    }
    // MG_INFO(("--HH [%.*s] [%.*s]", (int) k.len, k.buf, (int) v.len, v.buf));
    h[i].name = k, h[i].value = v;  // Success. Assign values
  }
  return true;
 8020562:	2001      	movs	r0, #1
 8020564:	e01e      	b.n	80205a4 <mg_http_parse_headers+0x5a>
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 8020566:	4414      	add	r4, r2
 8020568:	9b01      	ldr	r3, [sp, #4]
 802056a:	4413      	add	r3, r2
 802056c:	9301      	str	r3, [sp, #4]
 802056e:	42ac      	cmp	r4, r5
 8020570:	d209      	bcs.n	8020586 <mg_http_parse_headers+0x3c>
 8020572:	7823      	ldrb	r3, [r4, #0]
 8020574:	2b3a      	cmp	r3, #58	@ 0x3a
 8020576:	d006      	beq.n	8020586 <mg_http_parse_headers+0x3c>
 8020578:	4629      	mov	r1, r5
 802057a:	4620      	mov	r0, r4
 802057c:	f7ff ff76 	bl	802046c <clen>
 8020580:	4602      	mov	r2, r0
 8020582:	2800      	cmp	r0, #0
 8020584:	d1ef      	bne.n	8020566 <mg_http_parse_headers+0x1c>
    if (k.len == 0) return false;                     // Empty name
 8020586:	9b01      	ldr	r3, [sp, #4]
 8020588:	b15b      	cbz	r3, 80205a2 <mg_http_parse_headers+0x58>
    if (s >= end || clen(s, end) == 0) return false;  // Invalid UTF-8
 802058a:	42ac      	cmp	r4, r5
 802058c:	d209      	bcs.n	80205a2 <mg_http_parse_headers+0x58>
 802058e:	4629      	mov	r1, r5
 8020590:	4620      	mov	r0, r4
 8020592:	f7ff ff6b 	bl	802046c <clen>
 8020596:	b120      	cbz	r0, 80205a2 <mg_http_parse_headers+0x58>
    if (*s++ != ':') return false;  // Invalid, not followed by :
 8020598:	4620      	mov	r0, r4
 802059a:	f810 3b01 	ldrb.w	r3, [r0], #1
 802059e:	2b3a      	cmp	r3, #58	@ 0x3a
 80205a0:	d004      	beq.n	80205ac <mg_http_parse_headers+0x62>
    if (s >= end) return false;
 80205a2:	2000      	movs	r0, #0
}
 80205a4:	b004      	add	sp, #16
 80205a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (s < end && (s[0] == ' ' || s[0] == '\t')) s++;  // Skip spaces
 80205aa:	3001      	adds	r0, #1
 80205ac:	42a8      	cmp	r0, r5
 80205ae:	d204      	bcs.n	80205ba <mg_http_parse_headers+0x70>
 80205b0:	7803      	ldrb	r3, [r0, #0]
 80205b2:	2b20      	cmp	r3, #32
 80205b4:	d0f9      	beq.n	80205aa <mg_http_parse_headers+0x60>
 80205b6:	2b09      	cmp	r3, #9
 80205b8:	d0f7      	beq.n	80205aa <mg_http_parse_headers+0x60>
    if ((s = skiptorn(s, end, &v)) == NULL) return false;
 80205ba:	aa02      	add	r2, sp, #8
 80205bc:	4629      	mov	r1, r5
 80205be:	f7ff ff9c 	bl	80204fa <skiptorn>
 80205c2:	4604      	mov	r4, r0
 80205c4:	b908      	cbnz	r0, 80205ca <mg_http_parse_headers+0x80>
 80205c6:	e7ec      	b.n	80205a2 <mg_http_parse_headers+0x58>
      v.len--;  // Trim spaces
 80205c8:	9003      	str	r0, [sp, #12]
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
 80205ca:	9803      	ldr	r0, [sp, #12]
 80205cc:	b130      	cbz	r0, 80205dc <mg_http_parse_headers+0x92>
 80205ce:	3801      	subs	r0, #1
 80205d0:	9b02      	ldr	r3, [sp, #8]
 80205d2:	5c1b      	ldrb	r3, [r3, r0]
 80205d4:	2b20      	cmp	r3, #32
 80205d6:	d0f7      	beq.n	80205c8 <mg_http_parse_headers+0x7e>
 80205d8:	2b09      	cmp	r3, #9
 80205da:	d0f5      	beq.n	80205c8 <mg_http_parse_headers+0x7e>
    h[i].name = k, h[i].value = v;  // Success. Assign values
 80205dc:	eb08 1306 	add.w	r3, r8, r6, lsl #4
 80205e0:	466a      	mov	r2, sp
 80205e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80205e6:	e883 0003 	stmia.w	r3, {r0, r1}
 80205ea:	3308      	adds	r3, #8
 80205ec:	aa04      	add	r2, sp, #16
 80205ee:	e912 0003 	ldmdb	r2, {r0, r1}
 80205f2:	e883 0003 	stmia.w	r3, {r0, r1}
  for (i = 0; i < max_hdrs; i++) {
 80205f6:	3601      	adds	r6, #1
 80205f8:	42be      	cmp	r6, r7
 80205fa:	d20d      	bcs.n	8020618 <mg_http_parse_headers+0xce>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
 80205fc:	2300      	movs	r3, #0
 80205fe:	9300      	str	r3, [sp, #0]
 8020600:	9301      	str	r3, [sp, #4]
 8020602:	9302      	str	r3, [sp, #8]
 8020604:	9303      	str	r3, [sp, #12]
    if (s >= end) return false;
 8020606:	42ac      	cmp	r4, r5
 8020608:	d2cb      	bcs.n	80205a2 <mg_http_parse_headers+0x58>
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 802060a:	7823      	ldrb	r3, [r4, #0]
 802060c:	2b0a      	cmp	r3, #10
 802060e:	d0a8      	beq.n	8020562 <mg_http_parse_headers+0x18>
 8020610:	2b0d      	cmp	r3, #13
 8020612:	d0a3      	beq.n	802055c <mg_http_parse_headers+0x12>
    k.buf = (char *) s;
 8020614:	9400      	str	r4, [sp, #0]
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 8020616:	e7aa      	b.n	802056e <mg_http_parse_headers+0x24>
  return true;
 8020618:	2001      	movs	r0, #1
 802061a:	e7c3      	b.n	80205a4 <mg_http_parse_headers+0x5a>

0802061c <mg_http_status_code_str>:
  if (len == 0) c->is_resp = 0;
}

// clang-format off
static const char *mg_http_status_code_str(int status_code) {
  switch (status_code) {
 802061c:	3864      	subs	r0, #100	@ 0x64
 802061e:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8020622:	4298      	cmp	r0, r3
 8020624:	f200 8272 	bhi.w	8020b0c <mg_http_status_code_str+0x4f0>
 8020628:	e8df f010 	tbh	[pc, r0, lsl #1]
 802062c:	027201f4 	.word	0x027201f4
 8020630:	027001f6 	.word	0x027001f6
 8020634:	02700270 	.word	0x02700270
 8020638:	02700270 	.word	0x02700270
 802063c:	02700270 	.word	0x02700270
 8020640:	02700270 	.word	0x02700270
 8020644:	02700270 	.word	0x02700270
 8020648:	02700270 	.word	0x02700270
 802064c:	02700270 	.word	0x02700270
 8020650:	02700270 	.word	0x02700270
 8020654:	02700270 	.word	0x02700270
 8020658:	02700270 	.word	0x02700270
 802065c:	02700270 	.word	0x02700270
 8020660:	02700270 	.word	0x02700270
 8020664:	02700270 	.word	0x02700270
 8020668:	02700270 	.word	0x02700270
 802066c:	02700270 	.word	0x02700270
 8020670:	02700270 	.word	0x02700270
 8020674:	02700270 	.word	0x02700270
 8020678:	02700270 	.word	0x02700270
 802067c:	02700270 	.word	0x02700270
 8020680:	02700270 	.word	0x02700270
 8020684:	02700270 	.word	0x02700270
 8020688:	02700270 	.word	0x02700270
 802068c:	02700270 	.word	0x02700270
 8020690:	02700270 	.word	0x02700270
 8020694:	02700270 	.word	0x02700270
 8020698:	02700270 	.word	0x02700270
 802069c:	02700270 	.word	0x02700270
 80206a0:	02700270 	.word	0x02700270
 80206a4:	02700270 	.word	0x02700270
 80206a8:	02700270 	.word	0x02700270
 80206ac:	02700270 	.word	0x02700270
 80206b0:	02700270 	.word	0x02700270
 80206b4:	02700270 	.word	0x02700270
 80206b8:	02700270 	.word	0x02700270
 80206bc:	02700270 	.word	0x02700270
 80206c0:	02700270 	.word	0x02700270
 80206c4:	02700270 	.word	0x02700270
 80206c8:	02700270 	.word	0x02700270
 80206cc:	02700270 	.word	0x02700270
 80206d0:	02700270 	.word	0x02700270
 80206d4:	02700270 	.word	0x02700270
 80206d8:	02700270 	.word	0x02700270
 80206dc:	02700270 	.word	0x02700270
 80206e0:	02700270 	.word	0x02700270
 80206e4:	02700270 	.word	0x02700270
 80206e8:	02700270 	.word	0x02700270
 80206ec:	02700270 	.word	0x02700270
 80206f0:	02700270 	.word	0x02700270
 80206f4:	01fa01f8 	.word	0x01fa01f8
 80206f8:	01fe01fc 	.word	0x01fe01fc
 80206fc:	02020200 	.word	0x02020200
 8020700:	02060204 	.word	0x02060204
 8020704:	02700208 	.word	0x02700208
 8020708:	02700270 	.word	0x02700270
 802070c:	02700270 	.word	0x02700270
 8020710:	02700270 	.word	0x02700270
 8020714:	02700270 	.word	0x02700270
 8020718:	02700270 	.word	0x02700270
 802071c:	02700270 	.word	0x02700270
 8020720:	02700270 	.word	0x02700270
 8020724:	02700270 	.word	0x02700270
 8020728:	0270020a 	.word	0x0270020a
 802072c:	02700270 	.word	0x02700270
 8020730:	02700270 	.word	0x02700270
 8020734:	02700270 	.word	0x02700270
 8020738:	02700270 	.word	0x02700270
 802073c:	02700270 	.word	0x02700270
 8020740:	02700270 	.word	0x02700270
 8020744:	02700270 	.word	0x02700270
 8020748:	02700270 	.word	0x02700270
 802074c:	02700270 	.word	0x02700270
 8020750:	02700270 	.word	0x02700270
 8020754:	02700270 	.word	0x02700270
 8020758:	02700270 	.word	0x02700270
 802075c:	02700270 	.word	0x02700270
 8020760:	02700270 	.word	0x02700270
 8020764:	02700270 	.word	0x02700270
 8020768:	02700270 	.word	0x02700270
 802076c:	02700270 	.word	0x02700270
 8020770:	02700270 	.word	0x02700270
 8020774:	02700270 	.word	0x02700270
 8020778:	02700270 	.word	0x02700270
 802077c:	02700270 	.word	0x02700270
 8020780:	02700270 	.word	0x02700270
 8020784:	02700270 	.word	0x02700270
 8020788:	02700270 	.word	0x02700270
 802078c:	02700270 	.word	0x02700270
 8020790:	02700270 	.word	0x02700270
 8020794:	02700270 	.word	0x02700270
 8020798:	02700270 	.word	0x02700270
 802079c:	02700270 	.word	0x02700270
 80207a0:	02700270 	.word	0x02700270
 80207a4:	02700270 	.word	0x02700270
 80207a8:	02700270 	.word	0x02700270
 80207ac:	02700270 	.word	0x02700270
 80207b0:	02700270 	.word	0x02700270
 80207b4:	02700270 	.word	0x02700270
 80207b8:	02700270 	.word	0x02700270
 80207bc:	020e020c 	.word	0x020e020c
 80207c0:	02120210 	.word	0x02120210
 80207c4:	02160214 	.word	0x02160214
 80207c8:	02180270 	.word	0x02180270
 80207cc:	0270021a 	.word	0x0270021a
 80207d0:	02700270 	.word	0x02700270
 80207d4:	02700270 	.word	0x02700270
 80207d8:	02700270 	.word	0x02700270
 80207dc:	02700270 	.word	0x02700270
 80207e0:	02700270 	.word	0x02700270
 80207e4:	02700270 	.word	0x02700270
 80207e8:	02700270 	.word	0x02700270
 80207ec:	02700270 	.word	0x02700270
 80207f0:	02700270 	.word	0x02700270
 80207f4:	02700270 	.word	0x02700270
 80207f8:	02700270 	.word	0x02700270
 80207fc:	02700270 	.word	0x02700270
 8020800:	02700270 	.word	0x02700270
 8020804:	02700270 	.word	0x02700270
 8020808:	02700270 	.word	0x02700270
 802080c:	02700270 	.word	0x02700270
 8020810:	02700270 	.word	0x02700270
 8020814:	02700270 	.word	0x02700270
 8020818:	02700270 	.word	0x02700270
 802081c:	02700270 	.word	0x02700270
 8020820:	02700270 	.word	0x02700270
 8020824:	02700270 	.word	0x02700270
 8020828:	02700270 	.word	0x02700270
 802082c:	02700270 	.word	0x02700270
 8020830:	02700270 	.word	0x02700270
 8020834:	02700270 	.word	0x02700270
 8020838:	02700270 	.word	0x02700270
 802083c:	02700270 	.word	0x02700270
 8020840:	02700270 	.word	0x02700270
 8020844:	02700270 	.word	0x02700270
 8020848:	02700270 	.word	0x02700270
 802084c:	02700270 	.word	0x02700270
 8020850:	02700270 	.word	0x02700270
 8020854:	02700270 	.word	0x02700270
 8020858:	02700270 	.word	0x02700270
 802085c:	02700270 	.word	0x02700270
 8020860:	02700270 	.word	0x02700270
 8020864:	02700270 	.word	0x02700270
 8020868:	02700270 	.word	0x02700270
 802086c:	02700270 	.word	0x02700270
 8020870:	02700270 	.word	0x02700270
 8020874:	02700270 	.word	0x02700270
 8020878:	02700270 	.word	0x02700270
 802087c:	02700270 	.word	0x02700270
 8020880:	02700270 	.word	0x02700270
 8020884:	021e021c 	.word	0x021e021c
 8020888:	02220220 	.word	0x02220220
 802088c:	02260224 	.word	0x02260224
 8020890:	022a0228 	.word	0x022a0228
 8020894:	022e022c 	.word	0x022e022c
 8020898:	02320230 	.word	0x02320230
 802089c:	02360234 	.word	0x02360234
 80208a0:	023a0238 	.word	0x023a0238
 80208a4:	023e023c 	.word	0x023e023c
 80208a8:	02700240 	.word	0x02700240
 80208ac:	02420270 	.word	0x02420270
 80208b0:	02460244 	.word	0x02460244
 80208b4:	02700248 	.word	0x02700248
 80208b8:	0270024a 	.word	0x0270024a
 80208bc:	024e024c 	.word	0x024e024c
 80208c0:	02500270 	.word	0x02500270
 80208c4:	02700270 	.word	0x02700270
 80208c8:	02700270 	.word	0x02700270
 80208cc:	02700270 	.word	0x02700270
 80208d0:	02700270 	.word	0x02700270
 80208d4:	02700270 	.word	0x02700270
 80208d8:	02700270 	.word	0x02700270
 80208dc:	02700252 	.word	0x02700252
 80208e0:	02700270 	.word	0x02700270
 80208e4:	02700270 	.word	0x02700270
 80208e8:	02540270 	.word	0x02540270
 80208ec:	02700270 	.word	0x02700270
 80208f0:	02700270 	.word	0x02700270
 80208f4:	02700270 	.word	0x02700270
 80208f8:	02700270 	.word	0x02700270
 80208fc:	02700270 	.word	0x02700270
 8020900:	02700270 	.word	0x02700270
 8020904:	02700270 	.word	0x02700270
 8020908:	02700270 	.word	0x02700270
 802090c:	02700270 	.word	0x02700270
 8020910:	02700270 	.word	0x02700270
 8020914:	02700270 	.word	0x02700270
 8020918:	02700270 	.word	0x02700270
 802091c:	02700270 	.word	0x02700270
 8020920:	02700270 	.word	0x02700270
 8020924:	02700270 	.word	0x02700270
 8020928:	02700270 	.word	0x02700270
 802092c:	02700270 	.word	0x02700270
 8020930:	02700270 	.word	0x02700270
 8020934:	02700270 	.word	0x02700270
 8020938:	02700270 	.word	0x02700270
 802093c:	02700270 	.word	0x02700270
 8020940:	02700270 	.word	0x02700270
 8020944:	02700270 	.word	0x02700270
 8020948:	02560270 	.word	0x02560270
 802094c:	025a0258 	.word	0x025a0258
 8020950:	025e025c 	.word	0x025e025c
 8020954:	02620260 	.word	0x02620260
 8020958:	02660264 	.word	0x02660264
 802095c:	02700268 	.word	0x02700268
 8020960:	026c026a 	.word	0x026c026a
 8020964:	02700270 	.word	0x02700270
 8020968:	02700270 	.word	0x02700270
 802096c:	02700270 	.word	0x02700270
 8020970:	02700270 	.word	0x02700270
 8020974:	02700270 	.word	0x02700270
 8020978:	02700270 	.word	0x02700270
 802097c:	02700270 	.word	0x02700270
 8020980:	02700270 	.word	0x02700270
 8020984:	02700270 	.word	0x02700270
 8020988:	02700270 	.word	0x02700270
 802098c:	02700270 	.word	0x02700270
 8020990:	02700270 	.word	0x02700270
 8020994:	02700270 	.word	0x02700270
 8020998:	02700270 	.word	0x02700270
 802099c:	02700270 	.word	0x02700270
 80209a0:	02700270 	.word	0x02700270
 80209a4:	02700270 	.word	0x02700270
 80209a8:	02700270 	.word	0x02700270
 80209ac:	02700270 	.word	0x02700270
 80209b0:	02700270 	.word	0x02700270
 80209b4:	02700270 	.word	0x02700270
 80209b8:	02700270 	.word	0x02700270
 80209bc:	02700270 	.word	0x02700270
 80209c0:	02700270 	.word	0x02700270
 80209c4:	02700270 	.word	0x02700270
 80209c8:	02700270 	.word	0x02700270
 80209cc:	02700270 	.word	0x02700270
 80209d0:	02700270 	.word	0x02700270
 80209d4:	02700270 	.word	0x02700270
 80209d8:	02700270 	.word	0x02700270
 80209dc:	02700270 	.word	0x02700270
 80209e0:	02700270 	.word	0x02700270
 80209e4:	02700270 	.word	0x02700270
 80209e8:	02700270 	.word	0x02700270
 80209ec:	02700270 	.word	0x02700270
 80209f0:	02700270 	.word	0x02700270
 80209f4:	02700270 	.word	0x02700270
 80209f8:	02700270 	.word	0x02700270
 80209fc:	02700270 	.word	0x02700270
 8020a00:	02700270 	.word	0x02700270
 8020a04:	02700270 	.word	0x02700270
 8020a08:	02700270 	.word	0x02700270
 8020a0c:	02700270 	.word	0x02700270
 8020a10:	026e0270 	.word	0x026e0270
 8020a14:	483f      	ldr	r0, [pc, #252]	@ (8020b14 <mg_http_status_code_str+0x4f8>)
 8020a16:	4770      	bx	lr
    case 100: return "Continue";
    case 101: return "Switching Protocols";
    case 102: return "Processing";
 8020a18:	483f      	ldr	r0, [pc, #252]	@ (8020b18 <mg_http_status_code_str+0x4fc>)
 8020a1a:	4770      	bx	lr
    case 200: return "OK";
 8020a1c:	483f      	ldr	r0, [pc, #252]	@ (8020b1c <mg_http_status_code_str+0x500>)
 8020a1e:	4770      	bx	lr
    case 201: return "Created";
 8020a20:	483f      	ldr	r0, [pc, #252]	@ (8020b20 <mg_http_status_code_str+0x504>)
 8020a22:	4770      	bx	lr
    case 202: return "Accepted";
 8020a24:	483f      	ldr	r0, [pc, #252]	@ (8020b24 <mg_http_status_code_str+0x508>)
 8020a26:	4770      	bx	lr
    case 203: return "Non-authoritative Information";
 8020a28:	483f      	ldr	r0, [pc, #252]	@ (8020b28 <mg_http_status_code_str+0x50c>)
 8020a2a:	4770      	bx	lr
    case 204: return "No Content";
 8020a2c:	483f      	ldr	r0, [pc, #252]	@ (8020b2c <mg_http_status_code_str+0x510>)
 8020a2e:	4770      	bx	lr
    case 205: return "Reset Content";
 8020a30:	483f      	ldr	r0, [pc, #252]	@ (8020b30 <mg_http_status_code_str+0x514>)
 8020a32:	4770      	bx	lr
    case 206: return "Partial Content";
 8020a34:	483f      	ldr	r0, [pc, #252]	@ (8020b34 <mg_http_status_code_str+0x518>)
 8020a36:	4770      	bx	lr
    case 207: return "Multi-Status";
 8020a38:	483f      	ldr	r0, [pc, #252]	@ (8020b38 <mg_http_status_code_str+0x51c>)
 8020a3a:	4770      	bx	lr
    case 208: return "Already Reported";
 8020a3c:	483f      	ldr	r0, [pc, #252]	@ (8020b3c <mg_http_status_code_str+0x520>)
 8020a3e:	4770      	bx	lr
    case 226: return "IM Used";
 8020a40:	483f      	ldr	r0, [pc, #252]	@ (8020b40 <mg_http_status_code_str+0x524>)
 8020a42:	4770      	bx	lr
    case 300: return "Multiple Choices";
 8020a44:	483f      	ldr	r0, [pc, #252]	@ (8020b44 <mg_http_status_code_str+0x528>)
 8020a46:	4770      	bx	lr
    case 301: return "Moved Permanently";
 8020a48:	483f      	ldr	r0, [pc, #252]	@ (8020b48 <mg_http_status_code_str+0x52c>)
 8020a4a:	4770      	bx	lr
    case 302: return "Found";
 8020a4c:	483f      	ldr	r0, [pc, #252]	@ (8020b4c <mg_http_status_code_str+0x530>)
 8020a4e:	4770      	bx	lr
    case 303: return "See Other";
 8020a50:	483f      	ldr	r0, [pc, #252]	@ (8020b50 <mg_http_status_code_str+0x534>)
 8020a52:	4770      	bx	lr
    case 304: return "Not Modified";
 8020a54:	483f      	ldr	r0, [pc, #252]	@ (8020b54 <mg_http_status_code_str+0x538>)
 8020a56:	4770      	bx	lr
    case 305: return "Use Proxy";
 8020a58:	483f      	ldr	r0, [pc, #252]	@ (8020b58 <mg_http_status_code_str+0x53c>)
 8020a5a:	4770      	bx	lr
    case 307: return "Temporary Redirect";
 8020a5c:	483f      	ldr	r0, [pc, #252]	@ (8020b5c <mg_http_status_code_str+0x540>)
 8020a5e:	4770      	bx	lr
    case 308: return "Permanent Redirect";
 8020a60:	483f      	ldr	r0, [pc, #252]	@ (8020b60 <mg_http_status_code_str+0x544>)
 8020a62:	4770      	bx	lr
    case 400: return "Bad Request";
 8020a64:	483f      	ldr	r0, [pc, #252]	@ (8020b64 <mg_http_status_code_str+0x548>)
 8020a66:	4770      	bx	lr
    case 401: return "Unauthorized";
 8020a68:	483f      	ldr	r0, [pc, #252]	@ (8020b68 <mg_http_status_code_str+0x54c>)
 8020a6a:	4770      	bx	lr
    case 402: return "Payment Required";
 8020a6c:	483f      	ldr	r0, [pc, #252]	@ (8020b6c <mg_http_status_code_str+0x550>)
 8020a6e:	4770      	bx	lr
    case 403: return "Forbidden";
 8020a70:	483f      	ldr	r0, [pc, #252]	@ (8020b70 <mg_http_status_code_str+0x554>)
 8020a72:	4770      	bx	lr
    case 404: return "Not Found";
 8020a74:	483f      	ldr	r0, [pc, #252]	@ (8020b74 <mg_http_status_code_str+0x558>)
 8020a76:	4770      	bx	lr
    case 405: return "Method Not Allowed";
 8020a78:	483f      	ldr	r0, [pc, #252]	@ (8020b78 <mg_http_status_code_str+0x55c>)
 8020a7a:	4770      	bx	lr
    case 406: return "Not Acceptable";
 8020a7c:	483f      	ldr	r0, [pc, #252]	@ (8020b7c <mg_http_status_code_str+0x560>)
 8020a7e:	4770      	bx	lr
    case 407: return "Proxy Authentication Required";
 8020a80:	483f      	ldr	r0, [pc, #252]	@ (8020b80 <mg_http_status_code_str+0x564>)
 8020a82:	4770      	bx	lr
    case 408: return "Request Timeout";
 8020a84:	483f      	ldr	r0, [pc, #252]	@ (8020b84 <mg_http_status_code_str+0x568>)
 8020a86:	4770      	bx	lr
    case 409: return "Conflict";
 8020a88:	483f      	ldr	r0, [pc, #252]	@ (8020b88 <mg_http_status_code_str+0x56c>)
 8020a8a:	4770      	bx	lr
    case 410: return "Gone";
 8020a8c:	483f      	ldr	r0, [pc, #252]	@ (8020b8c <mg_http_status_code_str+0x570>)
 8020a8e:	4770      	bx	lr
    case 411: return "Length Required";
 8020a90:	483f      	ldr	r0, [pc, #252]	@ (8020b90 <mg_http_status_code_str+0x574>)
 8020a92:	4770      	bx	lr
    case 412: return "Precondition Failed";
 8020a94:	483f      	ldr	r0, [pc, #252]	@ (8020b94 <mg_http_status_code_str+0x578>)
 8020a96:	4770      	bx	lr
    case 413: return "Payload Too Large";
 8020a98:	483f      	ldr	r0, [pc, #252]	@ (8020b98 <mg_http_status_code_str+0x57c>)
 8020a9a:	4770      	bx	lr
    case 414: return "Request-URI Too Long";
 8020a9c:	483f      	ldr	r0, [pc, #252]	@ (8020b9c <mg_http_status_code_str+0x580>)
 8020a9e:	4770      	bx	lr
    case 415: return "Unsupported Media Type";
 8020aa0:	483f      	ldr	r0, [pc, #252]	@ (8020ba0 <mg_http_status_code_str+0x584>)
 8020aa2:	4770      	bx	lr
    case 416: return "Requested Range Not Satisfiable";
 8020aa4:	483f      	ldr	r0, [pc, #252]	@ (8020ba4 <mg_http_status_code_str+0x588>)
 8020aa6:	4770      	bx	lr
    case 417: return "Expectation Failed";
 8020aa8:	483f      	ldr	r0, [pc, #252]	@ (8020ba8 <mg_http_status_code_str+0x58c>)
 8020aaa:	4770      	bx	lr
    case 418: return "I'm a teapot";
 8020aac:	483f      	ldr	r0, [pc, #252]	@ (8020bac <mg_http_status_code_str+0x590>)
 8020aae:	4770      	bx	lr
    case 421: return "Misdirected Request";
 8020ab0:	483f      	ldr	r0, [pc, #252]	@ (8020bb0 <mg_http_status_code_str+0x594>)
 8020ab2:	4770      	bx	lr
    case 422: return "Unprocessable Entity";
 8020ab4:	483f      	ldr	r0, [pc, #252]	@ (8020bb4 <mg_http_status_code_str+0x598>)
 8020ab6:	4770      	bx	lr
    case 423: return "Locked";
 8020ab8:	483f      	ldr	r0, [pc, #252]	@ (8020bb8 <mg_http_status_code_str+0x59c>)
 8020aba:	4770      	bx	lr
    case 424: return "Failed Dependency";
 8020abc:	483f      	ldr	r0, [pc, #252]	@ (8020bbc <mg_http_status_code_str+0x5a0>)
 8020abe:	4770      	bx	lr
    case 426: return "Upgrade Required";
 8020ac0:	483f      	ldr	r0, [pc, #252]	@ (8020bc0 <mg_http_status_code_str+0x5a4>)
 8020ac2:	4770      	bx	lr
    case 428: return "Precondition Required";
 8020ac4:	483f      	ldr	r0, [pc, #252]	@ (8020bc4 <mg_http_status_code_str+0x5a8>)
 8020ac6:	4770      	bx	lr
    case 429: return "Too Many Requests";
 8020ac8:	483f      	ldr	r0, [pc, #252]	@ (8020bc8 <mg_http_status_code_str+0x5ac>)
 8020aca:	4770      	bx	lr
    case 431: return "Request Header Fields Too Large";
 8020acc:	483f      	ldr	r0, [pc, #252]	@ (8020bcc <mg_http_status_code_str+0x5b0>)
 8020ace:	4770      	bx	lr
    case 444: return "Connection Closed Without Response";
 8020ad0:	483f      	ldr	r0, [pc, #252]	@ (8020bd0 <mg_http_status_code_str+0x5b4>)
 8020ad2:	4770      	bx	lr
    case 451: return "Unavailable For Legal Reasons";
 8020ad4:	483f      	ldr	r0, [pc, #252]	@ (8020bd4 <mg_http_status_code_str+0x5b8>)
 8020ad6:	4770      	bx	lr
    case 499: return "Client Closed Request";
 8020ad8:	483f      	ldr	r0, [pc, #252]	@ (8020bd8 <mg_http_status_code_str+0x5bc>)
 8020ada:	4770      	bx	lr
    case 500: return "Internal Server Error";
 8020adc:	483f      	ldr	r0, [pc, #252]	@ (8020bdc <mg_http_status_code_str+0x5c0>)
 8020ade:	4770      	bx	lr
    case 501: return "Not Implemented";
 8020ae0:	483f      	ldr	r0, [pc, #252]	@ (8020be0 <mg_http_status_code_str+0x5c4>)
 8020ae2:	4770      	bx	lr
    case 502: return "Bad Gateway";
 8020ae4:	483f      	ldr	r0, [pc, #252]	@ (8020be4 <mg_http_status_code_str+0x5c8>)
 8020ae6:	4770      	bx	lr
    case 503: return "Service Unavailable";
 8020ae8:	483f      	ldr	r0, [pc, #252]	@ (8020be8 <mg_http_status_code_str+0x5cc>)
 8020aea:	4770      	bx	lr
    case 504: return "Gateway Timeout";
 8020aec:	483f      	ldr	r0, [pc, #252]	@ (8020bec <mg_http_status_code_str+0x5d0>)
 8020aee:	4770      	bx	lr
    case 505: return "HTTP Version Not Supported";
 8020af0:	483f      	ldr	r0, [pc, #252]	@ (8020bf0 <mg_http_status_code_str+0x5d4>)
 8020af2:	4770      	bx	lr
    case 506: return "Variant Also Negotiates";
 8020af4:	483f      	ldr	r0, [pc, #252]	@ (8020bf4 <mg_http_status_code_str+0x5d8>)
 8020af6:	4770      	bx	lr
    case 507: return "Insufficient Storage";
 8020af8:	483f      	ldr	r0, [pc, #252]	@ (8020bf8 <mg_http_status_code_str+0x5dc>)
 8020afa:	4770      	bx	lr
    case 508: return "Loop Detected";
 8020afc:	483f      	ldr	r0, [pc, #252]	@ (8020bfc <mg_http_status_code_str+0x5e0>)
 8020afe:	4770      	bx	lr
    case 510: return "Not Extended";
 8020b00:	483f      	ldr	r0, [pc, #252]	@ (8020c00 <mg_http_status_code_str+0x5e4>)
 8020b02:	4770      	bx	lr
    case 511: return "Network Authentication Required";
 8020b04:	483f      	ldr	r0, [pc, #252]	@ (8020c04 <mg_http_status_code_str+0x5e8>)
 8020b06:	4770      	bx	lr
    case 599: return "Network Connect Timeout Error";
 8020b08:	483f      	ldr	r0, [pc, #252]	@ (8020c08 <mg_http_status_code_str+0x5ec>)
 8020b0a:	4770      	bx	lr
    default: return "";
 8020b0c:	483f      	ldr	r0, [pc, #252]	@ (8020c0c <mg_http_status_code_str+0x5f0>)
 8020b0e:	4770      	bx	lr
    case 101: return "Switching Protocols";
 8020b10:	483f      	ldr	r0, [pc, #252]	@ (8020c10 <mg_http_status_code_str+0x5f4>)
  }
}
 8020b12:	4770      	bx	lr
 8020b14:	0803a6b0 	.word	0x0803a6b0
 8020b18:	0803a6d0 	.word	0x0803a6d0
 8020b1c:	0803a6dc 	.word	0x0803a6dc
 8020b20:	0803a6e0 	.word	0x0803a6e0
 8020b24:	0803a6e8 	.word	0x0803a6e8
 8020b28:	0803a6f4 	.word	0x0803a6f4
 8020b2c:	0803a714 	.word	0x0803a714
 8020b30:	0803a720 	.word	0x0803a720
 8020b34:	0803a730 	.word	0x0803a730
 8020b38:	0803a740 	.word	0x0803a740
 8020b3c:	0803a750 	.word	0x0803a750
 8020b40:	0803a764 	.word	0x0803a764
 8020b44:	0803a76c 	.word	0x0803a76c
 8020b48:	0803a780 	.word	0x0803a780
 8020b4c:	0803a824 	.word	0x0803a824
 8020b50:	0803a794 	.word	0x0803a794
 8020b54:	0803a7a0 	.word	0x0803a7a0
 8020b58:	0803a7b0 	.word	0x0803a7b0
 8020b5c:	0803a7bc 	.word	0x0803a7bc
 8020b60:	0803a7d0 	.word	0x0803a7d0
 8020b64:	0803a7e4 	.word	0x0803a7e4
 8020b68:	0803a7f0 	.word	0x0803a7f0
 8020b6c:	0803a800 	.word	0x0803a800
 8020b70:	0803a814 	.word	0x0803a814
 8020b74:	0803a820 	.word	0x0803a820
 8020b78:	0803a82c 	.word	0x0803a82c
 8020b7c:	0803a840 	.word	0x0803a840
 8020b80:	0803a850 	.word	0x0803a850
 8020b84:	0803a870 	.word	0x0803a870
 8020b88:	0803a880 	.word	0x0803a880
 8020b8c:	0803a88c 	.word	0x0803a88c
 8020b90:	0803a894 	.word	0x0803a894
 8020b94:	0803a8a4 	.word	0x0803a8a4
 8020b98:	0803a8b8 	.word	0x0803a8b8
 8020b9c:	0803a8cc 	.word	0x0803a8cc
 8020ba0:	0803a8e4 	.word	0x0803a8e4
 8020ba4:	0803a8fc 	.word	0x0803a8fc
 8020ba8:	0803a91c 	.word	0x0803a91c
 8020bac:	0803a930 	.word	0x0803a930
 8020bb0:	0803a940 	.word	0x0803a940
 8020bb4:	0803a954 	.word	0x0803a954
 8020bb8:	0803a96c 	.word	0x0803a96c
 8020bbc:	0803a974 	.word	0x0803a974
 8020bc0:	0803a988 	.word	0x0803a988
 8020bc4:	0803a99c 	.word	0x0803a99c
 8020bc8:	0803a9b4 	.word	0x0803a9b4
 8020bcc:	0803a9c8 	.word	0x0803a9c8
 8020bd0:	0803a9e8 	.word	0x0803a9e8
 8020bd4:	0803aa0c 	.word	0x0803aa0c
 8020bd8:	0803aa2c 	.word	0x0803aa2c
 8020bdc:	0803aa44 	.word	0x0803aa44
 8020be0:	0803aa5c 	.word	0x0803aa5c
 8020be4:	0803aa6c 	.word	0x0803aa6c
 8020be8:	0803aa78 	.word	0x0803aa78
 8020bec:	0803aa8c 	.word	0x0803aa8c
 8020bf0:	0803aa9c 	.word	0x0803aa9c
 8020bf4:	0803aab8 	.word	0x0803aab8
 8020bf8:	0803aad0 	.word	0x0803aad0
 8020bfc:	0803aae8 	.word	0x0803aae8
 8020c00:	0803aaf8 	.word	0x0803aaf8
 8020c04:	0803ab08 	.word	0x0803ab08
 8020c08:	0803ab28 	.word	0x0803ab28
 8020c0c:	080373ac 	.word	0x080373ac
 8020c10:	0803a6bc 	.word	0x0803a6bc

08020c14 <mg_is_url_safe>:
    mg_http_serve_file(c, hm, path, opts);
  }
}

static bool mg_is_url_safe(int c) {
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') ||
 8020c14:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
         (c >= 'A' && c <= 'Z') || c == '.' || c == '_' || c == '-' || c == '~';
 8020c18:	2b09      	cmp	r3, #9
 8020c1a:	d91c      	bls.n	8020c56 <mg_is_url_safe+0x42>
 8020c1c:	285f      	cmp	r0, #95	@ 0x5f
 8020c1e:	d01c      	beq.n	8020c5a <mg_is_url_safe+0x46>
 8020c20:	dc0d      	bgt.n	8020c3e <mg_is_url_safe+0x2a>
 8020c22:	282e      	cmp	r0, #46	@ 0x2e
 8020c24:	d01b      	beq.n	8020c5e <mg_is_url_safe+0x4a>
 8020c26:	dd04      	ble.n	8020c32 <mg_is_url_safe+0x1e>
 8020c28:	3841      	subs	r0, #65	@ 0x41
 8020c2a:	2819      	cmp	r0, #25
 8020c2c:	d805      	bhi.n	8020c3a <mg_is_url_safe+0x26>
 8020c2e:	2001      	movs	r0, #1
 8020c30:	4770      	bx	lr
 8020c32:	282d      	cmp	r0, #45	@ 0x2d
 8020c34:	d115      	bne.n	8020c62 <mg_is_url_safe+0x4e>
 8020c36:	2001      	movs	r0, #1
 8020c38:	4770      	bx	lr
 8020c3a:	2000      	movs	r0, #0
 8020c3c:	4770      	bx	lr
 8020c3e:	287a      	cmp	r0, #122	@ 0x7a
 8020c40:	dd03      	ble.n	8020c4a <mg_is_url_safe+0x36>
 8020c42:	287e      	cmp	r0, #126	@ 0x7e
 8020c44:	d10f      	bne.n	8020c66 <mg_is_url_safe+0x52>
 8020c46:	2001      	movs	r0, #1
 8020c48:	4770      	bx	lr
 8020c4a:	2861      	cmp	r0, #97	@ 0x61
 8020c4c:	da01      	bge.n	8020c52 <mg_is_url_safe+0x3e>
 8020c4e:	2000      	movs	r0, #0
 8020c50:	4770      	bx	lr
 8020c52:	2001      	movs	r0, #1
 8020c54:	4770      	bx	lr
 8020c56:	2001      	movs	r0, #1
 8020c58:	4770      	bx	lr
 8020c5a:	2001      	movs	r0, #1
 8020c5c:	4770      	bx	lr
 8020c5e:	2001      	movs	r0, #1
 8020c60:	4770      	bx	lr
 8020c62:	2000      	movs	r0, #0
 8020c64:	4770      	bx	lr
 8020c66:	2000      	movs	r0, #0
}
 8020c68:	4770      	bx	lr

08020c6a <is_hex_digit>:
int mg_http_status(const struct mg_http_message *hm) {
  return atoi(hm->uri.buf);
}

static bool is_hex_digit(int c) {
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8020c6a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8020c6e:	2b09      	cmp	r3, #9
 8020c70:	d908      	bls.n	8020c84 <is_hex_digit+0x1a>
 8020c72:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8020c76:	2b05      	cmp	r3, #5
 8020c78:	d906      	bls.n	8020c88 <is_hex_digit+0x1e>
         (c >= 'A' && c <= 'F');
 8020c7a:	3841      	subs	r0, #65	@ 0x41
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8020c7c:	2805      	cmp	r0, #5
 8020c7e:	d805      	bhi.n	8020c8c <is_hex_digit+0x22>
 8020c80:	2001      	movs	r0, #1
 8020c82:	4770      	bx	lr
 8020c84:	2001      	movs	r0, #1
 8020c86:	4770      	bx	lr
 8020c88:	2001      	movs	r0, #1
 8020c8a:	4770      	bx	lr
 8020c8c:	2000      	movs	r0, #0
}
 8020c8e:	4770      	bx	lr

08020c90 <roundup>:




static size_t roundup(size_t size, size_t align) {
  return align == 0 ? size : (size + align - 1) / align * align;
 8020c90:	b129      	cbz	r1, 8020c9e <roundup+0xe>
 8020c92:	4408      	add	r0, r1
 8020c94:	3801      	subs	r0, #1
 8020c96:	fbb0 f0f1 	udiv	r0, r0, r1
 8020c9a:	fb01 f000 	mul.w	r0, r1, r0
}
 8020c9e:	4770      	bx	lr

08020ca0 <escapeseq>:




static const char *escapeseq(int esc) {
  return esc ? "\b\f\n\r\t\\\"" : "bfnrt\\\"";
 8020ca0:	b108      	cbz	r0, 8020ca6 <escapeseq+0x6>
 8020ca2:	4802      	ldr	r0, [pc, #8]	@ (8020cac <escapeseq+0xc>)
 8020ca4:	4770      	bx	lr
 8020ca6:	4802      	ldr	r0, [pc, #8]	@ (8020cb0 <escapeseq+0x10>)
}
 8020ca8:	4770      	bx	lr
 8020caa:	bf00      	nop
 8020cac:	0803ab48 	.word	0x0803ab48
 8020cb0:	0803ab50 	.word	0x0803ab50

08020cb4 <json_esc>:

static char json_esc(int c, int esc) {
 8020cb4:	b570      	push	{r4, r5, r6, lr}
 8020cb6:	4604      	mov	r4, r0
 8020cb8:	460d      	mov	r5, r1
  const char *p, *esc1 = escapeseq(esc), *esc2 = escapeseq(!esc);
 8020cba:	4608      	mov	r0, r1
 8020cbc:	f7ff fff0 	bl	8020ca0 <escapeseq>
 8020cc0:	4606      	mov	r6, r0
 8020cc2:	fab5 f085 	clz	r0, r5
 8020cc6:	0940      	lsrs	r0, r0, #5
 8020cc8:	f7ff ffea 	bl	8020ca0 <escapeseq>
 8020ccc:	4602      	mov	r2, r0
  for (p = esc1; *p != '\0'; p++) {
 8020cce:	4633      	mov	r3, r6
 8020cd0:	e000      	b.n	8020cd4 <json_esc+0x20>
 8020cd2:	3301      	adds	r3, #1
 8020cd4:	7818      	ldrb	r0, [r3, #0]
 8020cd6:	b118      	cbz	r0, 8020ce0 <json_esc+0x2c>
    if (*p == c) return esc2[p - esc1];
 8020cd8:	42a0      	cmp	r0, r4
 8020cda:	d1fa      	bne.n	8020cd2 <json_esc+0x1e>
 8020cdc:	1b9b      	subs	r3, r3, r6
 8020cde:	5cd0      	ldrb	r0, [r2, r3]
  }
  return 0;
}
 8020ce0:	bd70      	pop	{r4, r5, r6, pc}

08020ce2 <mg_pass_string>:

static int mg_pass_string(const char *s, int len) {
 8020ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020ce6:	4607      	mov	r7, r0
 8020ce8:	460e      	mov	r6, r1
  int i;
  for (i = 0; i < len; i++) {
 8020cea:	2400      	movs	r4, #0
 8020cec:	e003      	b.n	8020cf6 <mg_pass_string+0x14>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
      i++;
    } else if (s[i] == '\0') {
 8020cee:	b1d5      	cbz	r5, 8020d26 <mg_pass_string+0x44>
      return MG_JSON_INVALID;
    } else if (s[i] == '"') {
 8020cf0:	2d22      	cmp	r5, #34	@ 0x22
 8020cf2:	d015      	beq.n	8020d20 <mg_pass_string+0x3e>
  for (i = 0; i < len; i++) {
 8020cf4:	3401      	adds	r4, #1
 8020cf6:	42b4      	cmp	r4, r6
 8020cf8:	da10      	bge.n	8020d1c <mg_pass_string+0x3a>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
 8020cfa:	4623      	mov	r3, r4
 8020cfc:	5d3d      	ldrb	r5, [r7, r4]
 8020cfe:	2d5c      	cmp	r5, #92	@ 0x5c
 8020d00:	d1f5      	bne.n	8020cee <mg_pass_string+0xc>
 8020d02:	f104 0801 	add.w	r8, r4, #1
 8020d06:	45b0      	cmp	r8, r6
 8020d08:	daf1      	bge.n	8020cee <mg_pass_string+0xc>
 8020d0a:	443b      	add	r3, r7
 8020d0c:	2101      	movs	r1, #1
 8020d0e:	7858      	ldrb	r0, [r3, #1]
 8020d10:	f7ff ffd0 	bl	8020cb4 <json_esc>
 8020d14:	2800      	cmp	r0, #0
 8020d16:	d0ea      	beq.n	8020cee <mg_pass_string+0xc>
      i++;
 8020d18:	4644      	mov	r4, r8
 8020d1a:	e7eb      	b.n	8020cf4 <mg_pass_string+0x12>
      return i;
    }
  }
  return MG_JSON_INVALID;
 8020d1c:	f06f 0401 	mvn.w	r4, #1
}
 8020d20:	4620      	mov	r0, r4
 8020d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return MG_JSON_INVALID;
 8020d26:	f06f 0401 	mvn.w	r4, #1
 8020d2a:	e7f9      	b.n	8020d20 <mg_pass_string+0x3e>
 8020d2c:	0000      	movs	r0, r0
	...

08020d30 <mg_atod>:

static double mg_atod(const char *p, int len, int *numlen) {
 8020d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d34:	ed2d 8b02 	vpush	{d8}
 8020d38:	b085      	sub	sp, #20
 8020d3a:	4681      	mov	r9, r0
 8020d3c:	9201      	str	r2, [sp, #4]
  double d = 0.0;
  int i = 0, sign = 1;

  // Sign
  if (i < len && *p == '-') {
 8020d3e:	f1b1 0800 	subs.w	r8, r1, #0
 8020d42:	dd49      	ble.n	8020dd8 <mg_atod+0xa8>
 8020d44:	7803      	ldrb	r3, [r0, #0]
 8020d46:	2b2d      	cmp	r3, #45	@ 0x2d
 8020d48:	d04c      	beq.n	8020de4 <mg_atod+0xb4>
    sign = -1, i++;
  } else if (i < len && *p == '+') {
 8020d4a:	2b2b      	cmp	r3, #43	@ 0x2b
 8020d4c:	d04e      	beq.n	8020dec <mg_atod+0xbc>
  int i = 0, sign = 1;
 8020d4e:	f04f 0a01 	mov.w	sl, #1
 8020d52:	2400      	movs	r4, #0
 8020d54:	e043      	b.n	8020dde <mg_atod+0xae>
    i++;
  }

  // Decimal
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
    d *= 10.0;
 8020d56:	2200      	movs	r2, #0
 8020d58:	4b71      	ldr	r3, [pc, #452]	@ (8020f20 <mg_atod+0x1f0>)
 8020d5a:	4630      	mov	r0, r6
 8020d5c:	4639      	mov	r1, r7
 8020d5e:	f7ef fc63 	bl	8010628 <__aeabi_dmul>
 8020d62:	4606      	mov	r6, r0
 8020d64:	460f      	mov	r7, r1
    d += p[i] - '0';
 8020d66:	f1a5 0030 	sub.w	r0, r5, #48	@ 0x30
 8020d6a:	f7ef fbf3 	bl	8010554 <__aeabi_i2d>
 8020d6e:	4632      	mov	r2, r6
 8020d70:	463b      	mov	r3, r7
 8020d72:	f7ef faa3 	bl	80102bc <__adddf3>
 8020d76:	4606      	mov	r6, r0
 8020d78:	460f      	mov	r7, r1
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8020d7a:	3401      	adds	r4, #1
 8020d7c:	4544      	cmp	r4, r8
 8020d7e:	da05      	bge.n	8020d8c <mg_atod+0x5c>
 8020d80:	f819 5004 	ldrb.w	r5, [r9, r4]
 8020d84:	2d2f      	cmp	r5, #47	@ 0x2f
 8020d86:	d901      	bls.n	8020d8c <mg_atod+0x5c>
 8020d88:	2d39      	cmp	r5, #57	@ 0x39
 8020d8a:	d9e4      	bls.n	8020d56 <mg_atod+0x26>
  }
  d *= sign;
 8020d8c:	4650      	mov	r0, sl
 8020d8e:	f7ef fbe1 	bl	8010554 <__aeabi_i2d>
 8020d92:	4602      	mov	r2, r0
 8020d94:	460b      	mov	r3, r1
 8020d96:	ec43 2b18 	vmov	d8, r2, r3
 8020d9a:	4632      	mov	r2, r6
 8020d9c:	463b      	mov	r3, r7
 8020d9e:	f7ef fc43 	bl	8010628 <__aeabi_dmul>
 8020da2:	4606      	mov	r6, r0
 8020da4:	460f      	mov	r7, r1

  // Fractional
  if (i < len && p[i] == '.') {
 8020da6:	4544      	cmp	r4, r8
 8020da8:	da03      	bge.n	8020db2 <mg_atod+0x82>
 8020daa:	f819 3004 	ldrb.w	r3, [r9, r4]
 8020dae:	2b2e      	cmp	r3, #46	@ 0x2e
 8020db0:	d020      	beq.n	8020df4 <mg_atod+0xc4>
    }
    d += frac * sign;
  }

  // Exponential
  if (i < len && (p[i] == 'e' || p[i] == 'E')) {
 8020db2:	4544      	cmp	r4, r8
 8020db4:	f280 80a1 	bge.w	8020efa <mg_atod+0x1ca>
 8020db8:	f819 3004 	ldrb.w	r3, [r9, r4]
 8020dbc:	2b65      	cmp	r3, #101	@ 0x65
 8020dbe:	d002      	beq.n	8020dc6 <mg_atod+0x96>
 8020dc0:	2b45      	cmp	r3, #69	@ 0x45
 8020dc2:	f040 809a 	bne.w	8020efa <mg_atod+0x1ca>
    int j, exp = 0, minus = 0;
    i++;
 8020dc6:	1c63      	adds	r3, r4, #1
    if (i < len && p[i] == '-') minus = 1, i++;
 8020dc8:	4598      	cmp	r8, r3
 8020dca:	dd58      	ble.n	8020e7e <mg_atod+0x14e>
 8020dcc:	f819 2003 	ldrb.w	r2, [r9, r3]
 8020dd0:	2a2d      	cmp	r2, #45	@ 0x2d
 8020dd2:	d051      	beq.n	8020e78 <mg_atod+0x148>
    int j, exp = 0, minus = 0;
 8020dd4:	2200      	movs	r2, #0
 8020dd6:	e053      	b.n	8020e80 <mg_atod+0x150>
  int i = 0, sign = 1;
 8020dd8:	f04f 0a01 	mov.w	sl, #1
 8020ddc:	2400      	movs	r4, #0
    i++;
 8020dde:	2600      	movs	r6, #0
 8020de0:	2700      	movs	r7, #0
 8020de2:	e7cb      	b.n	8020d7c <mg_atod+0x4c>
    sign = -1, i++;
 8020de4:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8020de8:	2401      	movs	r4, #1
 8020dea:	e7f8      	b.n	8020dde <mg_atod+0xae>
  int i = 0, sign = 1;
 8020dec:	f04f 0a01 	mov.w	sl, #1
    i++;
 8020df0:	4654      	mov	r4, sl
 8020df2:	e7f4      	b.n	8020dde <mg_atod+0xae>
    i++;
 8020df4:	3401      	adds	r4, #1
    double frac = 0.0, base = 0.1;
 8020df6:	f20f 1b18 	addw	fp, pc, #280	@ 0x118
 8020dfa:	e9db ab00 	ldrd	sl, fp, [fp]
 8020dfe:	ed9f 7b46 	vldr	d7, [pc, #280]	@ 8020f18 <mg_atod+0x1e8>
 8020e02:	ec53 2b17 	vmov	r2, r3, d7
 8020e06:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8020e0a:	464f      	mov	r7, r9
 8020e0c:	4645      	mov	r5, r8
 8020e0e:	4690      	mov	r8, r2
 8020e10:	4699      	mov	r9, r3
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8020e12:	e017      	b.n	8020e44 <mg_atod+0x114>
      frac += base * (p[i] - '0');
 8020e14:	3830      	subs	r0, #48	@ 0x30
 8020e16:	f7ef fb9d 	bl	8010554 <__aeabi_i2d>
 8020e1a:	4652      	mov	r2, sl
 8020e1c:	465b      	mov	r3, fp
 8020e1e:	f7ef fc03 	bl	8010628 <__aeabi_dmul>
 8020e22:	4602      	mov	r2, r0
 8020e24:	460b      	mov	r3, r1
 8020e26:	4640      	mov	r0, r8
 8020e28:	4649      	mov	r1, r9
 8020e2a:	f7ef fa47 	bl	80102bc <__adddf3>
 8020e2e:	4680      	mov	r8, r0
 8020e30:	4689      	mov	r9, r1
      base /= 10.0;
 8020e32:	2200      	movs	r2, #0
 8020e34:	4b3a      	ldr	r3, [pc, #232]	@ (8020f20 <mg_atod+0x1f0>)
 8020e36:	4650      	mov	r0, sl
 8020e38:	4659      	mov	r1, fp
 8020e3a:	f7ef fd1f 	bl	801087c <__aeabi_ddiv>
 8020e3e:	4682      	mov	sl, r0
 8020e40:	468b      	mov	fp, r1
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8020e42:	3401      	adds	r4, #1
 8020e44:	42ac      	cmp	r4, r5
 8020e46:	da04      	bge.n	8020e52 <mg_atod+0x122>
 8020e48:	5d38      	ldrb	r0, [r7, r4]
 8020e4a:	282f      	cmp	r0, #47	@ 0x2f
 8020e4c:	d901      	bls.n	8020e52 <mg_atod+0x122>
 8020e4e:	2839      	cmp	r0, #57	@ 0x39
 8020e50:	d9e0      	bls.n	8020e14 <mg_atod+0xe4>
    d += frac * sign;
 8020e52:	4642      	mov	r2, r8
 8020e54:	464b      	mov	r3, r9
 8020e56:	46b9      	mov	r9, r7
 8020e58:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8020e5c:	46a8      	mov	r8, r5
 8020e5e:	ec51 0b18 	vmov	r0, r1, d8
 8020e62:	f7ef fbe1 	bl	8010628 <__aeabi_dmul>
 8020e66:	4602      	mov	r2, r0
 8020e68:	460b      	mov	r3, r1
 8020e6a:	4630      	mov	r0, r6
 8020e6c:	4639      	mov	r1, r7
 8020e6e:	f7ef fa25 	bl	80102bc <__adddf3>
 8020e72:	4606      	mov	r6, r0
 8020e74:	460f      	mov	r7, r1
 8020e76:	e79c      	b.n	8020db2 <mg_atod+0x82>
    if (i < len && p[i] == '-') minus = 1, i++;
 8020e78:	1ca3      	adds	r3, r4, #2
 8020e7a:	2201      	movs	r2, #1
 8020e7c:	e000      	b.n	8020e80 <mg_atod+0x150>
    int j, exp = 0, minus = 0;
 8020e7e:	2200      	movs	r2, #0
    if (i < len && p[i] == '+') i++;
 8020e80:	4543      	cmp	r3, r8
 8020e82:	da03      	bge.n	8020e8c <mg_atod+0x15c>
 8020e84:	f819 1003 	ldrb.w	r1, [r9, r3]
 8020e88:	292b      	cmp	r1, #43	@ 0x2b
 8020e8a:	d013      	beq.n	8020eb4 <mg_atod+0x184>
    if (i < len && p[i] == '-') minus = 1, i++;
 8020e8c:	461c      	mov	r4, r3
 8020e8e:	2500      	movs	r5, #0
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 8020e90:	4544      	cmp	r4, r8
 8020e92:	da11      	bge.n	8020eb8 <mg_atod+0x188>
 8020e94:	f819 3004 	ldrb.w	r3, [r9, r4]
 8020e98:	2b2f      	cmp	r3, #47	@ 0x2f
 8020e9a:	d90d      	bls.n	8020eb8 <mg_atod+0x188>
 8020e9c:	2b39      	cmp	r3, #57	@ 0x39
 8020e9e:	d80b      	bhi.n	8020eb8 <mg_atod+0x188>
 8020ea0:	f5b5 7f9a 	cmp.w	r5, #308	@ 0x134
 8020ea4:	da08      	bge.n	8020eb8 <mg_atod+0x188>
      exp = exp * 10 + (p[i++] - '0');
 8020ea6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8020eaa:	3401      	adds	r4, #1
 8020eac:	3b30      	subs	r3, #48	@ 0x30
 8020eae:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8020eb2:	e7ed      	b.n	8020e90 <mg_atod+0x160>
    if (i < len && p[i] == '+') i++;
 8020eb4:	3301      	adds	r3, #1
 8020eb6:	e7e9      	b.n	8020e8c <mg_atod+0x15c>
    if (minus) exp = -exp;
 8020eb8:	b102      	cbz	r2, 8020ebc <mg_atod+0x18c>
 8020eba:	426d      	negs	r5, r5
    for (j = 0; j < exp; j++) d *= 10.0;
 8020ebc:	f04f 0800 	mov.w	r8, #0
 8020ec0:	e009      	b.n	8020ed6 <mg_atod+0x1a6>
 8020ec2:	2200      	movs	r2, #0
 8020ec4:	4b16      	ldr	r3, [pc, #88]	@ (8020f20 <mg_atod+0x1f0>)
 8020ec6:	4630      	mov	r0, r6
 8020ec8:	4639      	mov	r1, r7
 8020eca:	f7ef fbad 	bl	8010628 <__aeabi_dmul>
 8020ece:	4606      	mov	r6, r0
 8020ed0:	460f      	mov	r7, r1
 8020ed2:	f108 0801 	add.w	r8, r8, #1
 8020ed6:	45a8      	cmp	r8, r5
 8020ed8:	dbf3      	blt.n	8020ec2 <mg_atod+0x192>
    for (j = 0; j < -exp; j++) d /= 10.0;
 8020eda:	f04f 0800 	mov.w	r8, #0
 8020ede:	e009      	b.n	8020ef4 <mg_atod+0x1c4>
 8020ee0:	2200      	movs	r2, #0
 8020ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8020f20 <mg_atod+0x1f0>)
 8020ee4:	4630      	mov	r0, r6
 8020ee6:	4639      	mov	r1, r7
 8020ee8:	f7ef fcc8 	bl	801087c <__aeabi_ddiv>
 8020eec:	4606      	mov	r6, r0
 8020eee:	460f      	mov	r7, r1
 8020ef0:	f108 0801 	add.w	r8, r8, #1
 8020ef4:	426b      	negs	r3, r5
 8020ef6:	4543      	cmp	r3, r8
 8020ef8:	dcf2      	bgt.n	8020ee0 <mg_atod+0x1b0>
  }

  if (numlen != NULL) *numlen = i;
 8020efa:	9b01      	ldr	r3, [sp, #4]
 8020efc:	b103      	cbz	r3, 8020f00 <mg_atod+0x1d0>
 8020efe:	601c      	str	r4, [r3, #0]
  return d;
}
 8020f00:	ec47 6b10 	vmov	d0, r6, r7
 8020f04:	b005      	add	sp, #20
 8020f06:	ecbd 8b02 	vpop	{d8}
 8020f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f0e:	bf00      	nop
 8020f10:	9999999a 	.word	0x9999999a
 8020f14:	3fb99999 	.word	0x3fb99999
	...
 8020f20:	40240000 	.word	0x40240000

08020f24 <logc>:
void mg_log_set_fn(mg_pfn_t fn, void *param) {
  s_log_func = fn;
  s_log_func_param = param;
}

static void logc(unsigned char c) {
 8020f24:	b508      	push	{r3, lr}
  s_log_func((char) c, s_log_func_param);
 8020f26:	4b03      	ldr	r3, [pc, #12]	@ (8020f34 <logc+0x10>)
 8020f28:	681b      	ldr	r3, [r3, #0]
 8020f2a:	4a03      	ldr	r2, [pc, #12]	@ (8020f38 <logc+0x14>)
 8020f2c:	6811      	ldr	r1, [r2, #0]
 8020f2e:	4798      	blx	r3
}
 8020f30:	bd08      	pop	{r3, pc}
 8020f32:	bf00      	nop
 8020f34:	20000128 	.word	0x20000128
 8020f38:	20019f70 	.word	0x20019f70

08020f3c <logs>:

static void logs(const char *buf, size_t len) {
 8020f3c:	b570      	push	{r4, r5, r6, lr}
 8020f3e:	4606      	mov	r6, r0
 8020f40:	460d      	mov	r5, r1
  size_t i;
  for (i = 0; i < len; i++) logc(((unsigned char *) buf)[i]);
 8020f42:	2400      	movs	r4, #0
 8020f44:	e003      	b.n	8020f4e <logs+0x12>
 8020f46:	5d30      	ldrb	r0, [r6, r4]
 8020f48:	f7ff ffec 	bl	8020f24 <logc>
 8020f4c:	3401      	adds	r4, #1
 8020f4e:	42ac      	cmp	r4, r5
 8020f50:	d3f9      	bcc.n	8020f46 <logs+0xa>
}
 8020f52:	bd70      	pop	{r4, r5, r6, pc}

08020f54 <nibble>:
  logs("\r\n", 2);
}
#endif

static unsigned char nibble(unsigned c) {
  return (unsigned char) (c < 10 ? c + '0' : c + 'W');
 8020f54:	2809      	cmp	r0, #9
 8020f56:	d803      	bhi.n	8020f60 <nibble+0xc>
 8020f58:	b2c0      	uxtb	r0, r0
 8020f5a:	3030      	adds	r0, #48	@ 0x30
 8020f5c:	b2c0      	uxtb	r0, r0
 8020f5e:	4770      	bx	lr
 8020f60:	b2c0      	uxtb	r0, r0
 8020f62:	3057      	adds	r0, #87	@ 0x57
 8020f64:	b2c0      	uxtb	r0, r0
}
 8020f66:	4770      	bx	lr

08020f68 <mg_md5_transform>:

  ctx->bits[0] = 0;
  ctx->bits[1] = 0;
}

static void mg_md5_transform(uint32_t buf[4], uint32_t const in[16]) {
 8020f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f6c:	b08d      	sub	sp, #52	@ 0x34
  uint32_t a, b, c, d;

  a = buf[0];
  b = buf[1];
 8020f6e:	6846      	ldr	r6, [r0, #4]
  c = buf[2];
  d = buf[3];

  MD5STEP(F1, a, b, c, d, in[0] + 0xd76aa478, 7);
 8020f70:	6883      	ldr	r3, [r0, #8]
 8020f72:	68c2      	ldr	r2, [r0, #12]
 8020f74:	4053      	eors	r3, r2
 8020f76:	4033      	ands	r3, r6
 8020f78:	4053      	eors	r3, r2
 8020f7a:	f8d1 a000 	ldr.w	sl, [r1]
 8020f7e:	4453      	add	r3, sl
 8020f80:	6802      	ldr	r2, [r0, #0]
 8020f82:	4413      	add	r3, r2
 8020f84:	4ae0      	ldr	r2, [pc, #896]	@ (8021308 <mg_md5_transform+0x3a0>)
 8020f86:	441a      	add	r2, r3
 8020f88:	eb06 6272 	add.w	r2, r6, r2, ror #25
  MD5STEP(F1, d, a, b, c, in[1] + 0xe8c7b756, 12);
 8020f8c:	6883      	ldr	r3, [r0, #8]
 8020f8e:	ea86 0503 	eor.w	r5, r6, r3
 8020f92:	4015      	ands	r5, r2
 8020f94:	405d      	eors	r5, r3
 8020f96:	684b      	ldr	r3, [r1, #4]
 8020f98:	9301      	str	r3, [sp, #4]
 8020f9a:	441d      	add	r5, r3
 8020f9c:	68c4      	ldr	r4, [r0, #12]
 8020f9e:	4425      	add	r5, r4
 8020fa0:	4bda      	ldr	r3, [pc, #872]	@ (802130c <mg_md5_transform+0x3a4>)
 8020fa2:	442b      	add	r3, r5
 8020fa4:	eb02 5333 	add.w	r3, r2, r3, ror #20
  MD5STEP(F1, c, d, a, b, in[2] + 0x242070db, 17);
 8020fa8:	ea86 0502 	eor.w	r5, r6, r2
 8020fac:	401d      	ands	r5, r3
 8020fae:	960b      	str	r6, [sp, #44]	@ 0x2c
 8020fb0:	4075      	eors	r5, r6
 8020fb2:	688c      	ldr	r4, [r1, #8]
 8020fb4:	4425      	add	r5, r4
 8020fb6:	6886      	ldr	r6, [r0, #8]
 8020fb8:	4435      	add	r5, r6
 8020fba:	4ed5      	ldr	r6, [pc, #852]	@ (8021310 <mg_md5_transform+0x3a8>)
 8020fbc:	442e      	add	r6, r5
 8020fbe:	eb03 3cf6 	add.w	ip, r3, r6, ror #15
  MD5STEP(F1, b, c, d, a, in[3] + 0xc1bdceee, 22);
 8020fc2:	ea82 0703 	eor.w	r7, r2, r3
 8020fc6:	ea07 070c 	and.w	r7, r7, ip
 8020fca:	4057      	eors	r7, r2
 8020fcc:	68cd      	ldr	r5, [r1, #12]
 8020fce:	950a      	str	r5, [sp, #40]	@ 0x28
 8020fd0:	442f      	add	r7, r5
 8020fd2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8020fd4:	4437      	add	r7, r6
 8020fd6:	4dcf      	ldr	r5, [pc, #828]	@ (8021314 <mg_md5_transform+0x3ac>)
 8020fd8:	443d      	add	r5, r7
 8020fda:	eb0c 25b5 	add.w	r5, ip, r5, ror #10
  MD5STEP(F1, a, b, c, d, in[4] + 0xf57c0faf, 7);
 8020fde:	ea83 070c 	eor.w	r7, r3, ip
 8020fe2:	402f      	ands	r7, r5
 8020fe4:	405f      	eors	r7, r3
 8020fe6:	690e      	ldr	r6, [r1, #16]
 8020fe8:	9602      	str	r6, [sp, #8]
 8020fea:	4437      	add	r7, r6
 8020fec:	4417      	add	r7, r2
 8020fee:	4aca      	ldr	r2, [pc, #808]	@ (8021318 <mg_md5_transform+0x3b0>)
 8020ff0:	443a      	add	r2, r7
 8020ff2:	eb05 6272 	add.w	r2, r5, r2, ror #25
  MD5STEP(F1, d, a, b, c, in[5] + 0x4787c62a, 12);
 8020ff6:	ea8c 0705 	eor.w	r7, ip, r5
 8020ffa:	4017      	ands	r7, r2
 8020ffc:	ea87 070c 	eor.w	r7, r7, ip
 8021000:	694e      	ldr	r6, [r1, #20]
 8021002:	9603      	str	r6, [sp, #12]
 8021004:	4437      	add	r7, r6
 8021006:	441f      	add	r7, r3
 8021008:	4bc4      	ldr	r3, [pc, #784]	@ (802131c <mg_md5_transform+0x3b4>)
 802100a:	443b      	add	r3, r7
 802100c:	eb02 5333 	add.w	r3, r2, r3, ror #20
  MD5STEP(F1, c, d, a, b, in[6] + 0xa8304613, 17);
 8021010:	ea85 0702 	eor.w	r7, r5, r2
 8021014:	401f      	ands	r7, r3
 8021016:	406f      	eors	r7, r5
 8021018:	698e      	ldr	r6, [r1, #24]
 802101a:	9604      	str	r6, [sp, #16]
 802101c:	4437      	add	r7, r6
 802101e:	eb0c 0607 	add.w	r6, ip, r7
 8021022:	4fbf      	ldr	r7, [pc, #764]	@ (8021320 <mg_md5_transform+0x3b8>)
 8021024:	4437      	add	r7, r6
 8021026:	eb03 3cf7 	add.w	ip, r3, r7, ror #15
  MD5STEP(F1, b, c, d, a, in[7] + 0xfd469501, 22);
 802102a:	ea82 0603 	eor.w	r6, r2, r3
 802102e:	ea06 060c 	and.w	r6, r6, ip
 8021032:	4056      	eors	r6, r2
 8021034:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8021038:	444e      	add	r6, r9
 802103a:	4435      	add	r5, r6
 802103c:	4fb9      	ldr	r7, [pc, #740]	@ (8021324 <mg_md5_transform+0x3bc>)
 802103e:	442f      	add	r7, r5
 8021040:	eb0c 27b7 	add.w	r7, ip, r7, ror #10
  MD5STEP(F1, a, b, c, d, in[8] + 0x698098d8, 7);
 8021044:	ea83 050c 	eor.w	r5, r3, ip
 8021048:	403d      	ands	r5, r7
 802104a:	405d      	eors	r5, r3
 802104c:	6a0e      	ldr	r6, [r1, #32]
 802104e:	9605      	str	r6, [sp, #20]
 8021050:	4435      	add	r5, r6
 8021052:	442a      	add	r2, r5
 8021054:	4eb4      	ldr	r6, [pc, #720]	@ (8021328 <mg_md5_transform+0x3c0>)
 8021056:	4416      	add	r6, r2
 8021058:	eb07 6676 	add.w	r6, r7, r6, ror #25
  MD5STEP(F1, d, a, b, c, in[9] + 0x8b44f7af, 12);
 802105c:	ea8c 0207 	eor.w	r2, ip, r7
 8021060:	4032      	ands	r2, r6
 8021062:	ea82 020c 	eor.w	r2, r2, ip
 8021066:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 8021068:	9506      	str	r5, [sp, #24]
 802106a:	442a      	add	r2, r5
 802106c:	4413      	add	r3, r2
 802106e:	4daf      	ldr	r5, [pc, #700]	@ (802132c <mg_md5_transform+0x3c4>)
 8021070:	441d      	add	r5, r3
 8021072:	eb06 5535 	add.w	r5, r6, r5, ror #20
  MD5STEP(F1, c, d, a, b, in[10] + 0xffff5bb1, 17);
 8021076:	ea87 0306 	eor.w	r3, r7, r6
 802107a:	402b      	ands	r3, r5
 802107c:	407b      	eors	r3, r7
 802107e:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8021080:	9207      	str	r2, [sp, #28]
 8021082:	4413      	add	r3, r2
 8021084:	4463      	add	r3, ip
 8021086:	f5a3 4324 	sub.w	r3, r3, #41984	@ 0xa400
 802108a:	3b4f      	subs	r3, #79	@ 0x4f
 802108c:	eb05 33f3 	add.w	r3, r5, r3, ror #15
  MD5STEP(F1, b, c, d, a, in[11] + 0x895cd7be, 22);
 8021090:	ea86 0c05 	eor.w	ip, r6, r5
 8021094:	ea0c 0c03 	and.w	ip, ip, r3
 8021098:	ea8c 0c06 	eor.w	ip, ip, r6
 802109c:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 802109e:	9208      	str	r2, [sp, #32]
 80210a0:	4494      	add	ip, r2
 80210a2:	4467      	add	r7, ip
 80210a4:	f8df e2a8 	ldr.w	lr, [pc, #680]	@ 8021350 <mg_md5_transform+0x3e8>
 80210a8:	44be      	add	lr, r7
 80210aa:	eb03 2ebe 	add.w	lr, r3, lr, ror #10
  MD5STEP(F1, a, b, c, d, in[12] + 0x6b901122, 7);
 80210ae:	ea85 0c03 	eor.w	ip, r5, r3
 80210b2:	ea0c 0c0e 	and.w	ip, ip, lr
 80210b6:	ea8c 0c05 	eor.w	ip, ip, r5
 80210ba:	6b0f      	ldr	r7, [r1, #48]	@ 0x30
 80210bc:	44bc      	add	ip, r7
 80210be:	4466      	add	r6, ip
 80210c0:	f8df c290 	ldr.w	ip, [pc, #656]	@ 8021354 <mg_md5_transform+0x3ec>
 80210c4:	44b4      	add	ip, r6
 80210c6:	eb0e 6c7c 	add.w	ip, lr, ip, ror #25
  MD5STEP(F1, d, a, b, c, in[13] + 0xfd987193, 12);
 80210ca:	ea83 080e 	eor.w	r8, r3, lr
 80210ce:	ea08 080c 	and.w	r8, r8, ip
 80210d2:	ea88 0803 	eor.w	r8, r8, r3
 80210d6:	6b4e      	ldr	r6, [r1, #52]	@ 0x34
 80210d8:	44b0      	add	r8, r6
 80210da:	44a8      	add	r8, r5
 80210dc:	4d94      	ldr	r5, [pc, #592]	@ (8021330 <mg_md5_transform+0x3c8>)
 80210de:	4445      	add	r5, r8
 80210e0:	eb0c 5535 	add.w	r5, ip, r5, ror #20
  MD5STEP(F1, c, d, a, b, in[14] + 0xa679438e, 17);
 80210e4:	ea8e 0b0c 	eor.w	fp, lr, ip
 80210e8:	ea0b 0b05 	and.w	fp, fp, r5
 80210ec:	ea8b 0b0e 	eor.w	fp, fp, lr
 80210f0:	f8d1 8038 	ldr.w	r8, [r1, #56]	@ 0x38
 80210f4:	44c3      	add	fp, r8
 80210f6:	449b      	add	fp, r3
 80210f8:	4b8e      	ldr	r3, [pc, #568]	@ (8021334 <mg_md5_transform+0x3cc>)
 80210fa:	445b      	add	r3, fp
 80210fc:	eb05 33f3 	add.w	r3, r5, r3, ror #15
  MD5STEP(F1, b, c, d, a, in[15] + 0x49b40821, 22);
 8021100:	ea8c 0b05 	eor.w	fp, ip, r5
 8021104:	ea0b 0b03 	and.w	fp, fp, r3
 8021108:	ea8b 0b0c 	eor.w	fp, fp, ip
 802110c:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 802110e:	9109      	str	r1, [sp, #36]	@ 0x24
 8021110:	448b      	add	fp, r1
 8021112:	44f3      	add	fp, lr
 8021114:	f8df e240 	ldr.w	lr, [pc, #576]	@ 8021358 <mg_md5_transform+0x3f0>
 8021118:	44de      	add	lr, fp
 802111a:	eb03 2ebe 	add.w	lr, r3, lr, ror #10

  MD5STEP(F2, a, b, c, d, in[1] + 0xf61e2562, 5);
 802111e:	ea83 0b0e 	eor.w	fp, r3, lr
 8021122:	ea0b 0b05 	and.w	fp, fp, r5
 8021126:	ea8b 0b03 	eor.w	fp, fp, r3
 802112a:	9a01      	ldr	r2, [sp, #4]
 802112c:	4493      	add	fp, r2
 802112e:	44e3      	add	fp, ip
 8021130:	f8df c228 	ldr.w	ip, [pc, #552]	@ 802135c <mg_md5_transform+0x3f4>
 8021134:	44dc      	add	ip, fp
 8021136:	eb0e 6cfc 	add.w	ip, lr, ip, ror #27
  MD5STEP(F2, d, a, b, c, in[6] + 0xc040b340, 9);
 802113a:	ea8e 0b0c 	eor.w	fp, lr, ip
 802113e:	ea0b 0b03 	and.w	fp, fp, r3
 8021142:	ea8b 0b0e 	eor.w	fp, fp, lr
 8021146:	9a04      	ldr	r2, [sp, #16]
 8021148:	4493      	add	fp, r2
 802114a:	44ab      	add	fp, r5
 802114c:	4d7a      	ldr	r5, [pc, #488]	@ (8021338 <mg_md5_transform+0x3d0>)
 802114e:	445d      	add	r5, fp
 8021150:	eb0c 55f5 	add.w	r5, ip, r5, ror #23
  MD5STEP(F2, c, d, a, b, in[11] + 0x265e5a51, 14);
 8021154:	ea8c 0b05 	eor.w	fp, ip, r5
 8021158:	ea0b 0b0e 	and.w	fp, fp, lr
 802115c:	ea8b 0b0c 	eor.w	fp, fp, ip
 8021160:	9908      	ldr	r1, [sp, #32]
 8021162:	448b      	add	fp, r1
 8021164:	445b      	add	r3, fp
 8021166:	f8df b1f8 	ldr.w	fp, [pc, #504]	@ 8021360 <mg_md5_transform+0x3f8>
 802116a:	449b      	add	fp, r3
 802116c:	eb05 4bbb 	add.w	fp, r5, fp, ror #18
  MD5STEP(F2, b, c, d, a, in[0] + 0xe9b6c7aa, 20);
 8021170:	ea85 030b 	eor.w	r3, r5, fp
 8021174:	ea03 030c 	and.w	r3, r3, ip
 8021178:	406b      	eors	r3, r5
 802117a:	4453      	add	r3, sl
 802117c:	4473      	add	r3, lr
 802117e:	f8df e1e4 	ldr.w	lr, [pc, #484]	@ 8021364 <mg_md5_transform+0x3fc>
 8021182:	449e      	add	lr, r3
 8021184:	eb0b 3e3e 	add.w	lr, fp, lr, ror #12
  MD5STEP(F2, a, b, c, d, in[5] + 0xd62f105d, 5);
 8021188:	ea8b 030e 	eor.w	r3, fp, lr
 802118c:	402b      	ands	r3, r5
 802118e:	ea83 030b 	eor.w	r3, r3, fp
 8021192:	9a03      	ldr	r2, [sp, #12]
 8021194:	4413      	add	r3, r2
 8021196:	449c      	add	ip, r3
 8021198:	4b68      	ldr	r3, [pc, #416]	@ (802133c <mg_md5_transform+0x3d4>)
 802119a:	4463      	add	r3, ip
 802119c:	eb0e 63f3 	add.w	r3, lr, r3, ror #27
  MD5STEP(F2, d, a, b, c, in[10] + 0x02441453, 9);
 80211a0:	ea8e 0c03 	eor.w	ip, lr, r3
 80211a4:	ea0c 0c0b 	and.w	ip, ip, fp
 80211a8:	ea8c 0c0e 	eor.w	ip, ip, lr
 80211ac:	9a07      	ldr	r2, [sp, #28]
 80211ae:	4494      	add	ip, r2
 80211b0:	4465      	add	r5, ip
 80211b2:	f8df c1b4 	ldr.w	ip, [pc, #436]	@ 8021368 <mg_md5_transform+0x400>
 80211b6:	44ac      	add	ip, r5
 80211b8:	eb03 5cfc 	add.w	ip, r3, ip, ror #23
  MD5STEP(F2, c, d, a, b, in[15] + 0xd8a1e681, 14);
 80211bc:	ea83 050c 	eor.w	r5, r3, ip
 80211c0:	ea05 050e 	and.w	r5, r5, lr
 80211c4:	405d      	eors	r5, r3
 80211c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80211c8:	440d      	add	r5, r1
 80211ca:	445d      	add	r5, fp
 80211cc:	f8df b19c 	ldr.w	fp, [pc, #412]	@ 802136c <mg_md5_transform+0x404>
 80211d0:	44ab      	add	fp, r5
 80211d2:	eb0c 4bbb 	add.w	fp, ip, fp, ror #18
  MD5STEP(F2, b, c, d, a, in[4] + 0xe7d3fbc8, 20);
 80211d6:	ea8c 050b 	eor.w	r5, ip, fp
 80211da:	401d      	ands	r5, r3
 80211dc:	ea85 050c 	eor.w	r5, r5, ip
 80211e0:	9a02      	ldr	r2, [sp, #8]
 80211e2:	4415      	add	r5, r2
 80211e4:	44ae      	add	lr, r5
 80211e6:	4d56      	ldr	r5, [pc, #344]	@ (8021340 <mg_md5_transform+0x3d8>)
 80211e8:	4475      	add	r5, lr
 80211ea:	eb0b 3535 	add.w	r5, fp, r5, ror #12
  MD5STEP(F2, a, b, c, d, in[9] + 0x21e1cde6, 5);
 80211ee:	ea8b 0e05 	eor.w	lr, fp, r5
 80211f2:	ea0e 0e0c 	and.w	lr, lr, ip
 80211f6:	ea8e 0e0b 	eor.w	lr, lr, fp
 80211fa:	9906      	ldr	r1, [sp, #24]
 80211fc:	448e      	add	lr, r1
 80211fe:	4473      	add	r3, lr
 8021200:	f8df e16c 	ldr.w	lr, [pc, #364]	@ 8021370 <mg_md5_transform+0x408>
 8021204:	449e      	add	lr, r3
 8021206:	eb05 6efe 	add.w	lr, r5, lr, ror #27
  MD5STEP(F2, d, a, b, c, in[14] + 0xc33707d6, 9);
 802120a:	ea85 030e 	eor.w	r3, r5, lr
 802120e:	ea03 030b 	and.w	r3, r3, fp
 8021212:	406b      	eors	r3, r5
 8021214:	4443      	add	r3, r8
 8021216:	4463      	add	r3, ip
 8021218:	f8df c158 	ldr.w	ip, [pc, #344]	@ 8021374 <mg_md5_transform+0x40c>
 802121c:	449c      	add	ip, r3
 802121e:	eb0e 5cfc 	add.w	ip, lr, ip, ror #23
  MD5STEP(F2, c, d, a, b, in[3] + 0xf4d50d87, 14);
 8021222:	ea8e 030c 	eor.w	r3, lr, ip
 8021226:	402b      	ands	r3, r5
 8021228:	ea83 030e 	eor.w	r3, r3, lr
 802122c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802122e:	4413      	add	r3, r2
 8021230:	449b      	add	fp, r3
 8021232:	4b44      	ldr	r3, [pc, #272]	@ (8021344 <mg_md5_transform+0x3dc>)
 8021234:	445b      	add	r3, fp
 8021236:	eb0c 43b3 	add.w	r3, ip, r3, ror #18
  MD5STEP(F2, b, c, d, a, in[8] + 0x455a14ed, 20);
 802123a:	ea8c 0b03 	eor.w	fp, ip, r3
 802123e:	ea0b 0b0e 	and.w	fp, fp, lr
 8021242:	ea8b 0b0c 	eor.w	fp, fp, ip
 8021246:	9905      	ldr	r1, [sp, #20]
 8021248:	448b      	add	fp, r1
 802124a:	445d      	add	r5, fp
 802124c:	f8df b128 	ldr.w	fp, [pc, #296]	@ 8021378 <mg_md5_transform+0x410>
 8021250:	44ab      	add	fp, r5
 8021252:	eb03 3b3b 	add.w	fp, r3, fp, ror #12
  MD5STEP(F2, a, b, c, d, in[13] + 0xa9e3e905, 5);
 8021256:	ea83 050b 	eor.w	r5, r3, fp
 802125a:	ea05 050c 	and.w	r5, r5, ip
 802125e:	405d      	eors	r5, r3
 8021260:	4435      	add	r5, r6
 8021262:	4475      	add	r5, lr
 8021264:	f8df e114 	ldr.w	lr, [pc, #276]	@ 802137c <mg_md5_transform+0x414>
 8021268:	44ae      	add	lr, r5
 802126a:	eb0b 6efe 	add.w	lr, fp, lr, ror #27
  MD5STEP(F2, d, a, b, c, in[2] + 0xfcefa3f8, 9);
 802126e:	ea8b 050e 	eor.w	r5, fp, lr
 8021272:	401d      	ands	r5, r3
 8021274:	ea85 050b 	eor.w	r5, r5, fp
 8021278:	4425      	add	r5, r4
 802127a:	44ac      	add	ip, r5
 802127c:	4d32      	ldr	r5, [pc, #200]	@ (8021348 <mg_md5_transform+0x3e0>)
 802127e:	4465      	add	r5, ip
 8021280:	eb0e 55f5 	add.w	r5, lr, r5, ror #23
  MD5STEP(F2, c, d, a, b, in[7] + 0x676f02d9, 14);
 8021284:	ea8e 0c05 	eor.w	ip, lr, r5
 8021288:	ea0c 0c0b 	and.w	ip, ip, fp
 802128c:	ea8c 0c0e 	eor.w	ip, ip, lr
 8021290:	44cc      	add	ip, r9
 8021292:	4463      	add	r3, ip
 8021294:	f8df c0e8 	ldr.w	ip, [pc, #232]	@ 8021380 <mg_md5_transform+0x418>
 8021298:	449c      	add	ip, r3
 802129a:	eb05 4cbc 	add.w	ip, r5, ip, ror #18
  MD5STEP(F2, b, c, d, a, in[12] + 0x8d2a4c8a, 20);
 802129e:	ea85 030c 	eor.w	r3, r5, ip
 80212a2:	ea03 030e 	and.w	r3, r3, lr
 80212a6:	406b      	eors	r3, r5
 80212a8:	443b      	add	r3, r7
 80212aa:	445b      	add	r3, fp
 80212ac:	f8df b0d4 	ldr.w	fp, [pc, #212]	@ 8021384 <mg_md5_transform+0x41c>
 80212b0:	449b      	add	fp, r3
 80212b2:	eb0c 3b3b 	add.w	fp, ip, fp, ror #12

  MD5STEP(F3, a, b, c, d, in[5] + 0xfffa3942, 4);
 80212b6:	ea8c 030b 	eor.w	r3, ip, fp
 80212ba:	406b      	eors	r3, r5
 80212bc:	9a03      	ldr	r2, [sp, #12]
 80212be:	4413      	add	r3, r2
 80212c0:	4473      	add	r3, lr
 80212c2:	f5a3 23b8 	sub.w	r3, r3, #376832	@ 0x5c000
 80212c6:	f2a3 63be 	subw	r3, r3, #1726	@ 0x6be
 80212ca:	eb0b 7333 	add.w	r3, fp, r3, ror #28
  MD5STEP(F3, d, a, b, c, in[8] + 0x8771f681, 11);
 80212ce:	ea8b 0e03 	eor.w	lr, fp, r3
 80212d2:	ea8e 0e0c 	eor.w	lr, lr, ip
 80212d6:	448e      	add	lr, r1
 80212d8:	44ae      	add	lr, r5
 80212da:	4d1c      	ldr	r5, [pc, #112]	@ (802134c <mg_md5_transform+0x3e4>)
 80212dc:	4475      	add	r5, lr
 80212de:	eb03 5575 	add.w	r5, r3, r5, ror #21
  MD5STEP(F3, c, d, a, b, in[11] + 0x6d9d6122, 16);
 80212e2:	ea83 0e05 	eor.w	lr, r3, r5
 80212e6:	ea8e 0e0b 	eor.w	lr, lr, fp
 80212ea:	9908      	ldr	r1, [sp, #32]
 80212ec:	448e      	add	lr, r1
 80212ee:	44f4      	add	ip, lr
 80212f0:	f8df e094 	ldr.w	lr, [pc, #148]	@ 8021388 <mg_md5_transform+0x420>
 80212f4:	44e6      	add	lr, ip
 80212f6:	eb05 4e3e 	add.w	lr, r5, lr, ror #16
  MD5STEP(F3, b, c, d, a, in[14] + 0xfde5380c, 23);
 80212fa:	ea85 0c0e 	eor.w	ip, r5, lr
 80212fe:	ea8c 0c03 	eor.w	ip, ip, r3
 8021302:	44c4      	add	ip, r8
 8021304:	44e3      	add	fp, ip
 8021306:	e041      	b.n	802138c <mg_md5_transform+0x424>
 8021308:	d76aa478 	.word	0xd76aa478
 802130c:	e8c7b756 	.word	0xe8c7b756
 8021310:	242070db 	.word	0x242070db
 8021314:	c1bdceee 	.word	0xc1bdceee
 8021318:	f57c0faf 	.word	0xf57c0faf
 802131c:	4787c62a 	.word	0x4787c62a
 8021320:	a8304613 	.word	0xa8304613
 8021324:	fd469501 	.word	0xfd469501
 8021328:	698098d8 	.word	0x698098d8
 802132c:	8b44f7af 	.word	0x8b44f7af
 8021330:	fd987193 	.word	0xfd987193
 8021334:	a679438e 	.word	0xa679438e
 8021338:	c040b340 	.word	0xc040b340
 802133c:	d62f105d 	.word	0xd62f105d
 8021340:	e7d3fbc8 	.word	0xe7d3fbc8
 8021344:	f4d50d87 	.word	0xf4d50d87
 8021348:	fcefa3f8 	.word	0xfcefa3f8
 802134c:	8771f681 	.word	0x8771f681
 8021350:	895cd7be 	.word	0x895cd7be
 8021354:	6b901122 	.word	0x6b901122
 8021358:	49b40821 	.word	0x49b40821
 802135c:	f61e2562 	.word	0xf61e2562
 8021360:	265e5a51 	.word	0x265e5a51
 8021364:	e9b6c7aa 	.word	0xe9b6c7aa
 8021368:	02441453 	.word	0x02441453
 802136c:	d8a1e681 	.word	0xd8a1e681
 8021370:	21e1cde6 	.word	0x21e1cde6
 8021374:	c33707d6 	.word	0xc33707d6
 8021378:	455a14ed 	.word	0x455a14ed
 802137c:	a9e3e905 	.word	0xa9e3e905
 8021380:	676f02d9 	.word	0x676f02d9
 8021384:	8d2a4c8a 	.word	0x8d2a4c8a
 8021388:	6d9d6122 	.word	0x6d9d6122
 802138c:	f8df c2c4 	ldr.w	ip, [pc, #708]	@ 8021654 <mg_md5_transform+0x6ec>
 8021390:	44dc      	add	ip, fp
 8021392:	eb0e 2c7c 	add.w	ip, lr, ip, ror #9
  MD5STEP(F3, a, b, c, d, in[1] + 0xa4beea44, 4);
 8021396:	ea8e 0b0c 	eor.w	fp, lr, ip
 802139a:	ea8b 0b05 	eor.w	fp, fp, r5
 802139e:	9a01      	ldr	r2, [sp, #4]
 80213a0:	4493      	add	fp, r2
 80213a2:	449b      	add	fp, r3
 80213a4:	4b99      	ldr	r3, [pc, #612]	@ (802160c <mg_md5_transform+0x6a4>)
 80213a6:	445b      	add	r3, fp
 80213a8:	eb0c 7333 	add.w	r3, ip, r3, ror #28
  MD5STEP(F3, d, a, b, c, in[4] + 0x4bdecfa9, 11);
 80213ac:	ea8c 0b03 	eor.w	fp, ip, r3
 80213b0:	ea8b 0b0e 	eor.w	fp, fp, lr
 80213b4:	9a02      	ldr	r2, [sp, #8]
 80213b6:	4493      	add	fp, r2
 80213b8:	445d      	add	r5, fp
 80213ba:	f8df b29c 	ldr.w	fp, [pc, #668]	@ 8021658 <mg_md5_transform+0x6f0>
 80213be:	44ab      	add	fp, r5
 80213c0:	eb03 5b7b 	add.w	fp, r3, fp, ror #21
  MD5STEP(F3, c, d, a, b, in[7] + 0xf6bb4b60, 16);
 80213c4:	ea83 050b 	eor.w	r5, r3, fp
 80213c8:	ea85 050c 	eor.w	r5, r5, ip
 80213cc:	444d      	add	r5, r9
 80213ce:	44ae      	add	lr, r5
 80213d0:	4d8f      	ldr	r5, [pc, #572]	@ (8021610 <mg_md5_transform+0x6a8>)
 80213d2:	4475      	add	r5, lr
 80213d4:	eb0b 4535 	add.w	r5, fp, r5, ror #16
  MD5STEP(F3, b, c, d, a, in[10] + 0xbebfbc70, 23);
 80213d8:	ea8b 0e05 	eor.w	lr, fp, r5
 80213dc:	ea8e 0e03 	eor.w	lr, lr, r3
 80213e0:	9a07      	ldr	r2, [sp, #28]
 80213e2:	4496      	add	lr, r2
 80213e4:	44e6      	add	lr, ip
 80213e6:	f8df c274 	ldr.w	ip, [pc, #628]	@ 802165c <mg_md5_transform+0x6f4>
 80213ea:	44f4      	add	ip, lr
 80213ec:	eb05 2c7c 	add.w	ip, r5, ip, ror #9
  MD5STEP(F3, a, b, c, d, in[13] + 0x289b7ec6, 4);
 80213f0:	ea85 0e0c 	eor.w	lr, r5, ip
 80213f4:	ea8e 0e0b 	eor.w	lr, lr, fp
 80213f8:	44b6      	add	lr, r6
 80213fa:	4473      	add	r3, lr
 80213fc:	f8df e260 	ldr.w	lr, [pc, #608]	@ 8021660 <mg_md5_transform+0x6f8>
 8021400:	449e      	add	lr, r3
 8021402:	eb0c 7e3e 	add.w	lr, ip, lr, ror #28
  MD5STEP(F3, d, a, b, c, in[0] + 0xeaa127fa, 11);
 8021406:	ea8c 030e 	eor.w	r3, ip, lr
 802140a:	406b      	eors	r3, r5
 802140c:	4453      	add	r3, sl
 802140e:	449b      	add	fp, r3
 8021410:	4b80      	ldr	r3, [pc, #512]	@ (8021614 <mg_md5_transform+0x6ac>)
 8021412:	445b      	add	r3, fp
 8021414:	eb0e 5373 	add.w	r3, lr, r3, ror #21
  MD5STEP(F3, c, d, a, b, in[3] + 0xd4ef3085, 16);
 8021418:	ea8e 0b03 	eor.w	fp, lr, r3
 802141c:	ea8b 0b0c 	eor.w	fp, fp, ip
 8021420:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021422:	4493      	add	fp, r2
 8021424:	445d      	add	r5, fp
 8021426:	f8df b23c 	ldr.w	fp, [pc, #572]	@ 8021664 <mg_md5_transform+0x6fc>
 802142a:	44ab      	add	fp, r5
 802142c:	eb03 4b3b 	add.w	fp, r3, fp, ror #16
  MD5STEP(F3, b, c, d, a, in[6] + 0x04881d05, 23);
 8021430:	ea83 050b 	eor.w	r5, r3, fp
 8021434:	ea85 050e 	eor.w	r5, r5, lr
 8021438:	9904      	ldr	r1, [sp, #16]
 802143a:	440d      	add	r5, r1
 802143c:	4465      	add	r5, ip
 802143e:	f8df c228 	ldr.w	ip, [pc, #552]	@ 8021668 <mg_md5_transform+0x700>
 8021442:	44ac      	add	ip, r5
 8021444:	eb0b 2c7c 	add.w	ip, fp, ip, ror #9
  MD5STEP(F3, a, b, c, d, in[9] + 0xd9d4d039, 4);
 8021448:	ea8b 050c 	eor.w	r5, fp, ip
 802144c:	405d      	eors	r5, r3
 802144e:	9906      	ldr	r1, [sp, #24]
 8021450:	440d      	add	r5, r1
 8021452:	44ae      	add	lr, r5
 8021454:	4d70      	ldr	r5, [pc, #448]	@ (8021618 <mg_md5_transform+0x6b0>)
 8021456:	4475      	add	r5, lr
 8021458:	eb0c 7535 	add.w	r5, ip, r5, ror #28
  MD5STEP(F3, d, a, b, c, in[12] + 0xe6db99e5, 11);
 802145c:	ea8c 0e05 	eor.w	lr, ip, r5
 8021460:	ea8e 0e0b 	eor.w	lr, lr, fp
 8021464:	44be      	add	lr, r7
 8021466:	4473      	add	r3, lr
 8021468:	f8df e200 	ldr.w	lr, [pc, #512]	@ 802166c <mg_md5_transform+0x704>
 802146c:	449e      	add	lr, r3
 802146e:	eb05 5e7e 	add.w	lr, r5, lr, ror #21
  MD5STEP(F3, c, d, a, b, in[15] + 0x1fa27cf8, 16);
 8021472:	ea85 030e 	eor.w	r3, r5, lr
 8021476:	ea83 030c 	eor.w	r3, r3, ip
 802147a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802147c:	440b      	add	r3, r1
 802147e:	445b      	add	r3, fp
 8021480:	f8df b1ec 	ldr.w	fp, [pc, #492]	@ 8021670 <mg_md5_transform+0x708>
 8021484:	449b      	add	fp, r3
 8021486:	eb0e 4b3b 	add.w	fp, lr, fp, ror #16
  MD5STEP(F3, b, c, d, a, in[2] + 0xc4ac5665, 23);
 802148a:	ea8e 030b 	eor.w	r3, lr, fp
 802148e:	406b      	eors	r3, r5
 8021490:	940a      	str	r4, [sp, #40]	@ 0x28
 8021492:	4423      	add	r3, r4
 8021494:	449c      	add	ip, r3
 8021496:	4b61      	ldr	r3, [pc, #388]	@ (802161c <mg_md5_transform+0x6b4>)
 8021498:	4463      	add	r3, ip
 802149a:	eb0b 2373 	add.w	r3, fp, r3, ror #9

  MD5STEP(F4, a, b, c, d, in[0] + 0xf4292244, 6);
 802149e:	ea63 0c0e 	orn	ip, r3, lr
 80214a2:	ea8c 0c0b 	eor.w	ip, ip, fp
 80214a6:	44e2      	add	sl, ip
 80214a8:	44aa      	add	sl, r5
 80214aa:	4d5d      	ldr	r5, [pc, #372]	@ (8021620 <mg_md5_transform+0x6b8>)
 80214ac:	4455      	add	r5, sl
 80214ae:	eb03 65b5 	add.w	r5, r3, r5, ror #26
  MD5STEP(F4, d, a, b, c, in[7] + 0x432aff97, 10);
 80214b2:	ea65 0c0b 	orn	ip, r5, fp
 80214b6:	ea8c 0c03 	eor.w	ip, ip, r3
 80214ba:	44e1      	add	r9, ip
 80214bc:	44f1      	add	r9, lr
 80214be:	f8df c1b4 	ldr.w	ip, [pc, #436]	@ 8021674 <mg_md5_transform+0x70c>
 80214c2:	44cc      	add	ip, r9
 80214c4:	eb05 5cbc 	add.w	ip, r5, ip, ror #22
  MD5STEP(F4, c, d, a, b, in[14] + 0xab9423a7, 15);
 80214c8:	ea6c 0e03 	orn	lr, ip, r3
 80214cc:	ea8e 0e05 	eor.w	lr, lr, r5
 80214d0:	44f0      	add	r8, lr
 80214d2:	44d8      	add	r8, fp
 80214d4:	f8df e1a0 	ldr.w	lr, [pc, #416]	@ 8021678 <mg_md5_transform+0x710>
 80214d8:	44c6      	add	lr, r8
 80214da:	eb0c 4e7e 	add.w	lr, ip, lr, ror #17
  MD5STEP(F4, b, c, d, a, in[5] + 0xfc93a039, 21);
 80214de:	ea6e 0805 	orn	r8, lr, r5
 80214e2:	ea88 080c 	eor.w	r8, r8, ip
 80214e6:	9c03      	ldr	r4, [sp, #12]
 80214e8:	44a0      	add	r8, r4
 80214ea:	4498      	add	r8, r3
 80214ec:	4b4d      	ldr	r3, [pc, #308]	@ (8021624 <mg_md5_transform+0x6bc>)
 80214ee:	4443      	add	r3, r8
 80214f0:	eb0e 23f3 	add.w	r3, lr, r3, ror #11
  MD5STEP(F4, a, b, c, d, in[12] + 0x655b59c3, 6);
 80214f4:	ea63 080c 	orn	r8, r3, ip
 80214f8:	ea88 080e 	eor.w	r8, r8, lr
 80214fc:	4447      	add	r7, r8
 80214fe:	442f      	add	r7, r5
 8021500:	4d49      	ldr	r5, [pc, #292]	@ (8021628 <mg_md5_transform+0x6c0>)
 8021502:	443d      	add	r5, r7
 8021504:	eb03 65b5 	add.w	r5, r3, r5, ror #26
  MD5STEP(F4, d, a, b, c, in[3] + 0x8f0ccc92, 10);
 8021508:	ea65 070e 	orn	r7, r5, lr
 802150c:	405f      	eors	r7, r3
 802150e:	4417      	add	r7, r2
 8021510:	44bc      	add	ip, r7
 8021512:	4f46      	ldr	r7, [pc, #280]	@ (802162c <mg_md5_transform+0x6c4>)
 8021514:	4467      	add	r7, ip
 8021516:	eb05 57b7 	add.w	r7, r5, r7, ror #22
  MD5STEP(F4, c, d, a, b, in[10] + 0xffeff47d, 15);
 802151a:	ea67 0c03 	orn	ip, r7, r3
 802151e:	ea8c 0c05 	eor.w	ip, ip, r5
 8021522:	9a07      	ldr	r2, [sp, #28]
 8021524:	4462      	add	r2, ip
 8021526:	4472      	add	r2, lr
 8021528:	f5a2 1280 	sub.w	r2, r2, #1048576	@ 0x100000
 802152c:	f6a2 3283 	subw	r2, r2, #2947	@ 0xb83
 8021530:	eb07 4272 	add.w	r2, r7, r2, ror #17
  MD5STEP(F4, b, c, d, a, in[1] + 0x85845dd1, 21);
 8021534:	ea62 0c05 	orn	ip, r2, r5
 8021538:	ea8c 0c07 	eor.w	ip, ip, r7
 802153c:	9c01      	ldr	r4, [sp, #4]
 802153e:	44a4      	add	ip, r4
 8021540:	449c      	add	ip, r3
 8021542:	4b3b      	ldr	r3, [pc, #236]	@ (8021630 <mg_md5_transform+0x6c8>)
 8021544:	4463      	add	r3, ip
 8021546:	eb02 23f3 	add.w	r3, r2, r3, ror #11
  MD5STEP(F4, a, b, c, d, in[8] + 0x6fa87e4f, 6);
 802154a:	ea63 0c07 	orn	ip, r3, r7
 802154e:	ea8c 0c02 	eor.w	ip, ip, r2
 8021552:	9905      	ldr	r1, [sp, #20]
 8021554:	448c      	add	ip, r1
 8021556:	44ac      	add	ip, r5
 8021558:	4d36      	ldr	r5, [pc, #216]	@ (8021634 <mg_md5_transform+0x6cc>)
 802155a:	4465      	add	r5, ip
 802155c:	eb03 65b5 	add.w	r5, r3, r5, ror #26
  MD5STEP(F4, d, a, b, c, in[15] + 0xfe2ce6e0, 10);
 8021560:	ea65 0c02 	orn	ip, r5, r2
 8021564:	ea8c 0c03 	eor.w	ip, ip, r3
 8021568:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802156a:	4461      	add	r1, ip
 802156c:	440f      	add	r7, r1
 802156e:	4932      	ldr	r1, [pc, #200]	@ (8021638 <mg_md5_transform+0x6d0>)
 8021570:	4439      	add	r1, r7
 8021572:	eb05 51b1 	add.w	r1, r5, r1, ror #22
  MD5STEP(F4, c, d, a, b, in[6] + 0xa3014314, 15);
 8021576:	ea61 0703 	orn	r7, r1, r3
 802157a:	406f      	eors	r7, r5
 802157c:	9c04      	ldr	r4, [sp, #16]
 802157e:	4427      	add	r7, r4
 8021580:	4417      	add	r7, r2
 8021582:	4a2e      	ldr	r2, [pc, #184]	@ (802163c <mg_md5_transform+0x6d4>)
 8021584:	443a      	add	r2, r7
 8021586:	eb01 4272 	add.w	r2, r1, r2, ror #17
  MD5STEP(F4, b, c, d, a, in[13] + 0x4e0811a1, 21);
 802158a:	ea62 0705 	orn	r7, r2, r5
 802158e:	404f      	eors	r7, r1
 8021590:	443e      	add	r6, r7
 8021592:	4433      	add	r3, r6
 8021594:	4e2a      	ldr	r6, [pc, #168]	@ (8021640 <mg_md5_transform+0x6d8>)
 8021596:	441e      	add	r6, r3
 8021598:	eb02 26f6 	add.w	r6, r2, r6, ror #11
  MD5STEP(F4, a, b, c, d, in[4] + 0xf7537e82, 6);
 802159c:	ea66 0301 	orn	r3, r6, r1
 80215a0:	4053      	eors	r3, r2
 80215a2:	9f02      	ldr	r7, [sp, #8]
 80215a4:	443b      	add	r3, r7
 80215a6:	441d      	add	r5, r3
 80215a8:	4b26      	ldr	r3, [pc, #152]	@ (8021644 <mg_md5_transform+0x6dc>)
 80215aa:	442b      	add	r3, r5
 80215ac:	eb06 63b3 	add.w	r3, r6, r3, ror #26
  MD5STEP(F4, d, a, b, c, in[11] + 0xbd3af235, 10);
 80215b0:	ea63 0502 	orn	r5, r3, r2
 80215b4:	4075      	eors	r5, r6
 80215b6:	9f08      	ldr	r7, [sp, #32]
 80215b8:	443d      	add	r5, r7
 80215ba:	440d      	add	r5, r1
 80215bc:	4922      	ldr	r1, [pc, #136]	@ (8021648 <mg_md5_transform+0x6e0>)
 80215be:	4429      	add	r1, r5
 80215c0:	eb03 51b1 	add.w	r1, r3, r1, ror #22
  MD5STEP(F4, c, d, a, b, in[2] + 0x2ad7d2bb, 15);
 80215c4:	ea61 0506 	orn	r5, r1, r6
 80215c8:	405d      	eors	r5, r3
 80215ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80215cc:	4425      	add	r5, r4
 80215ce:	442a      	add	r2, r5
 80215d0:	4d1e      	ldr	r5, [pc, #120]	@ (802164c <mg_md5_transform+0x6e4>)
 80215d2:	4415      	add	r5, r2
 80215d4:	eb01 4575 	add.w	r5, r1, r5, ror #17
  MD5STEP(F4, b, c, d, a, in[9] + 0xeb86d391, 21);
 80215d8:	ea65 0203 	orn	r2, r5, r3
 80215dc:	404a      	eors	r2, r1
 80215de:	9c06      	ldr	r4, [sp, #24]
 80215e0:	4422      	add	r2, r4
 80215e2:	4432      	add	r2, r6
 80215e4:	4e1a      	ldr	r6, [pc, #104]	@ (8021650 <mg_md5_transform+0x6e8>)
 80215e6:	4416      	add	r6, r2
 80215e8:	eb05 26f6 	add.w	r6, r5, r6, ror #11

  buf[0] += a;
 80215ec:	6802      	ldr	r2, [r0, #0]
 80215ee:	4413      	add	r3, r2
 80215f0:	6003      	str	r3, [r0, #0]
  buf[1] += b;
 80215f2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80215f4:	4434      	add	r4, r6
 80215f6:	6044      	str	r4, [r0, #4]
  buf[2] += c;
 80215f8:	6883      	ldr	r3, [r0, #8]
 80215fa:	441d      	add	r5, r3
 80215fc:	6085      	str	r5, [r0, #8]
  buf[3] += d;
 80215fe:	68c3      	ldr	r3, [r0, #12]
 8021600:	4419      	add	r1, r3
 8021602:	60c1      	str	r1, [r0, #12]
}
 8021604:	b00d      	add	sp, #52	@ 0x34
 8021606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802160a:	bf00      	nop
 802160c:	a4beea44 	.word	0xa4beea44
 8021610:	f6bb4b60 	.word	0xf6bb4b60
 8021614:	eaa127fa 	.word	0xeaa127fa
 8021618:	d9d4d039 	.word	0xd9d4d039
 802161c:	c4ac5665 	.word	0xc4ac5665
 8021620:	f4292244 	.word	0xf4292244
 8021624:	fc93a039 	.word	0xfc93a039
 8021628:	655b59c3 	.word	0x655b59c3
 802162c:	8f0ccc92 	.word	0x8f0ccc92
 8021630:	85845dd1 	.word	0x85845dd1
 8021634:	6fa87e4f 	.word	0x6fa87e4f
 8021638:	fe2ce6e0 	.word	0xfe2ce6e0
 802163c:	a3014314 	.word	0xa3014314
 8021640:	4e0811a1 	.word	0x4e0811a1
 8021644:	f7537e82 	.word	0xf7537e82
 8021648:	bd3af235 	.word	0xbd3af235
 802164c:	2ad7d2bb 	.word	0x2ad7d2bb
 8021650:	eb86d391 	.word	0xeb86d391
 8021654:	fde5380c 	.word	0xfde5380c
 8021658:	4bdecfa9 	.word	0x4bdecfa9
 802165c:	bebfbc70 	.word	0xbebfbc70
 8021660:	289b7ec6 	.word	0x289b7ec6
 8021664:	d4ef3085 	.word	0xd4ef3085
 8021668:	04881d05 	.word	0x04881d05
 802166c:	e6db99e5 	.word	0xe6db99e5
 8021670:	1fa27cf8 	.word	0x1fa27cf8
 8021674:	432aff97 	.word	0x432aff97
 8021678:	ab9423a7 	.word	0xab9423a7

0802167c <varint_size>:

static void mg_send_u32(struct mg_connection *c, uint32_t value) {
  mg_send(c, &value, sizeof(value));
}

static uint8_t varint_size(size_t length) {
 802167c:	4602      	mov	r2, r0
  uint8_t bytes_needed = 0;
 802167e:	2000      	movs	r0, #0
  do {
    bytes_needed++;
 8021680:	3001      	adds	r0, #1
 8021682:	b2c0      	uxtb	r0, r0
    length /= 0x80;
  } while (length > 0);
 8021684:	2a7f      	cmp	r2, #127	@ 0x7f
 8021686:	ea4f 12d2 	mov.w	r2, r2, lsr #7
 802168a:	d8f9      	bhi.n	8021680 <varint_size+0x4>
  return bytes_needed;
}
 802168c:	4770      	bx	lr

0802168e <encode_varint>:

static size_t encode_varint(uint8_t *buf, size_t value) {
 802168e:	b500      	push	{lr}
 8021690:	4686      	mov	lr, r0
  size_t len = 0;
 8021692:	2300      	movs	r3, #0
 8021694:	e007      	b.n	80216a6 <encode_varint+0x18>

  do {
    uint8_t b = (uint8_t) (value % 128);
    value /= 128;
    if (value > 0) b |= 0x80;
 8021696:	f04c 0c80 	orr.w	ip, ip, #128	@ 0x80
    buf[len++] = b;
 802169a:	1c58      	adds	r0, r3, #1
 802169c:	f80e c003 	strb.w	ip, [lr, r3]
  } while (value > 0);
 80216a0:	2a7f      	cmp	r2, #127	@ 0x7f
 80216a2:	d907      	bls.n	80216b4 <encode_varint+0x26>
    buf[len++] = b;
 80216a4:	4603      	mov	r3, r0
    uint8_t b = (uint8_t) (value % 128);
 80216a6:	f001 0c7f 	and.w	ip, r1, #127	@ 0x7f
    value /= 128;
 80216aa:	460a      	mov	r2, r1
 80216ac:	09c9      	lsrs	r1, r1, #7
    if (value > 0) b |= 0x80;
 80216ae:	2a7f      	cmp	r2, #127	@ 0x7f
 80216b0:	d9f3      	bls.n	802169a <encode_varint+0xc>
 80216b2:	e7f0      	b.n	8021696 <encode_varint+0x8>

  return len;
}
 80216b4:	f85d fb04 	ldr.w	pc, [sp], #4

080216b8 <decode_varint>:

static size_t decode_varint(const uint8_t *buf, size_t len, size_t *value) {
  size_t multiplier = 1, offset;
  *value = 0;
 80216b8:	2300      	movs	r3, #0
 80216ba:	6013      	str	r3, [r2, #0]
  size_t multiplier = 1, offset;
 80216bc:	f04f 0c01 	mov.w	ip, #1

  for (offset = 0; offset < 4 && offset < len; offset++) {
 80216c0:	2b03      	cmp	r3, #3
 80216c2:	d81d      	bhi.n	8021700 <decode_varint+0x48>
 80216c4:	428b      	cmp	r3, r1
 80216c6:	d219      	bcs.n	80216fc <decode_varint+0x44>
static size_t decode_varint(const uint8_t *buf, size_t len, size_t *value) {
 80216c8:	b530      	push	{r4, r5, lr}
 80216ca:	e003      	b.n	80216d4 <decode_varint+0x1c>
    uint8_t encoded_byte = buf[offset];
    *value += (encoded_byte & 0x7f) * multiplier;
    multiplier *= 128;

    if ((encoded_byte & 0x80) == 0) return offset + 1;
 80216cc:	1c58      	adds	r0, r3, #1
 80216ce:	e012      	b.n	80216f6 <decode_varint+0x3e>
  for (offset = 0; offset < 4 && offset < len; offset++) {
 80216d0:	428b      	cmp	r3, r1
 80216d2:	d211      	bcs.n	80216f8 <decode_varint+0x40>
    uint8_t encoded_byte = buf[offset];
 80216d4:	f810 e003 	ldrb.w	lr, [r0, r3]
    *value += (encoded_byte & 0x7f) * multiplier;
 80216d8:	f00e 047f 	and.w	r4, lr, #127	@ 0x7f
 80216dc:	6815      	ldr	r5, [r2, #0]
 80216de:	fb0c 5404 	mla	r4, ip, r4, r5
 80216e2:	6014      	str	r4, [r2, #0]
    multiplier *= 128;
 80216e4:	ea4f 1ccc 	mov.w	ip, ip, lsl #7
    if ((encoded_byte & 0x80) == 0) return offset + 1;
 80216e8:	f01e 0f80 	tst.w	lr, #128	@ 0x80
 80216ec:	d0ee      	beq.n	80216cc <decode_varint+0x14>
  for (offset = 0; offset < 4 && offset < len; offset++) {
 80216ee:	3301      	adds	r3, #1
 80216f0:	2b03      	cmp	r3, #3
 80216f2:	d9ed      	bls.n	80216d0 <decode_varint+0x18>
  }

  return 0;
 80216f4:	2000      	movs	r0, #0
}
 80216f6:	bd30      	pop	{r4, r5, pc}
  return 0;
 80216f8:	2000      	movs	r0, #0
 80216fa:	e7fc      	b.n	80216f6 <decode_varint+0x3e>
 80216fc:	2000      	movs	r0, #0
 80216fe:	4770      	bx	lr
 8021700:	2000      	movs	r0, #0
}
 8021702:	4770      	bx	lr

08021704 <mqtt_prop_type_by_id>:

static int mqtt_prop_type_by_id(uint8_t prop_id) {
  size_t i, num_properties = sizeof(s_prop_map) / sizeof(s_prop_map[0]);
  for (i = 0; i < num_properties; ++i) {
 8021704:	2300      	movs	r3, #0
 8021706:	2b1a      	cmp	r3, #26
 8021708:	d80b      	bhi.n	8021722 <mqtt_prop_type_by_id+0x1e>
    if (s_prop_map[i].id == prop_id) return s_prop_map[i].type;
 802170a:	4a07      	ldr	r2, [pc, #28]	@ (8021728 <mqtt_prop_type_by_id+0x24>)
 802170c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8021710:	4282      	cmp	r2, r0
 8021712:	d001      	beq.n	8021718 <mqtt_prop_type_by_id+0x14>
  for (i = 0; i < num_properties; ++i) {
 8021714:	3301      	adds	r3, #1
 8021716:	e7f6      	b.n	8021706 <mqtt_prop_type_by_id+0x2>
    if (s_prop_map[i].id == prop_id) return s_prop_map[i].type;
 8021718:	4a03      	ldr	r2, [pc, #12]	@ (8021728 <mqtt_prop_type_by_id+0x24>)
 802171a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802171e:	7858      	ldrb	r0, [r3, #1]
 8021720:	4770      	bx	lr
  }
  return -1;  // Property ID not found
 8021722:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8021726:	4770      	bx	lr
 8021728:	0803bf10 	.word	0x0803bf10

0802172c <get_properties_length>:

// Returns the size of the properties section, without the
// size of the content's length
static size_t get_properties_length(struct mg_mqtt_prop *props, size_t count) {
 802172c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021730:	4606      	mov	r6, r0
 8021732:	4688      	mov	r8, r1
  size_t i, size = 0;
 8021734:	2500      	movs	r5, #0
  for (i = 0; i < count; i++) {
 8021736:	462c      	mov	r4, r5
 8021738:	e005      	b.n	8021746 <get_properties_length+0x1a>
    size++;  // identifier
    switch (mqtt_prop_type_by_id(props[i].id)) {
      case MQTT_PROP_TYPE_STRING_PAIR:
        size += (uint32_t) (props[i].val.len + props[i].key.len +
 802173a:	697d      	ldr	r5, [r7, #20]
 802173c:	68fb      	ldr	r3, [r7, #12]
 802173e:	441d      	add	r5, r3
 8021740:	444d      	add	r5, r9
 8021742:	3504      	adds	r5, #4
  for (i = 0; i < count; i++) {
 8021744:	3401      	adds	r4, #1
 8021746:	4544      	cmp	r4, r8
 8021748:	d231      	bcs.n	80217ae <get_properties_length+0x82>
    size++;  // identifier
 802174a:	f105 0901 	add.w	r9, r5, #1
    switch (mqtt_prop_type_by_id(props[i].id)) {
 802174e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8021752:	eb06 07c3 	add.w	r7, r6, r3, lsl #3
 8021756:	f816 0033 	ldrb.w	r0, [r6, r3, lsl #3]
 802175a:	f7ff ffd3 	bl	8021704 <mqtt_prop_type_by_id>
 802175e:	2806      	cmp	r0, #6
 8021760:	d824      	bhi.n	80217ac <get_properties_length+0x80>
 8021762:	a301      	add	r3, pc, #4	@ (adr r3, 8021768 <get_properties_length+0x3c>)
 8021764:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8021768:	080217a9 	.word	0x080217a9
 802176c:	08021785 	.word	0x08021785
 8021770:	0802173b 	.word	0x0802173b
 8021774:	0802178d 	.word	0x0802178d
 8021778:	08021795 	.word	0x08021795
 802177c:	080217a1 	.word	0x080217a1
 8021780:	080217a5 	.word	0x080217a5
                            2 * sizeof(uint16_t));
        break;
      case MQTT_PROP_TYPE_STRING:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 8021784:	697d      	ldr	r5, [r7, #20]
 8021786:	444d      	add	r5, r9
 8021788:	3502      	adds	r5, #2
        break;
 802178a:	e7db      	b.n	8021744 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_BINARY_DATA:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 802178c:	697d      	ldr	r5, [r7, #20]
 802178e:	444d      	add	r5, r9
 8021790:	3502      	adds	r5, #2
        break;
 8021792:	e7d7      	b.n	8021744 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_VARIABLE_INT:
        size += varint_size((uint32_t) props[i].iv);
 8021794:	6878      	ldr	r0, [r7, #4]
 8021796:	f7ff ff71 	bl	802167c <varint_size>
 802179a:	eb00 0509 	add.w	r5, r0, r9
        break;
 802179e:	e7d1      	b.n	8021744 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_INT:
        size += (uint32_t) sizeof(uint32_t);
 80217a0:	3505      	adds	r5, #5
        break;
 80217a2:	e7cf      	b.n	8021744 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_SHORT:
        size += (uint32_t) sizeof(uint16_t);
 80217a4:	3503      	adds	r5, #3
        break;
 80217a6:	e7cd      	b.n	8021744 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_BYTE:
        size += (uint32_t) sizeof(uint8_t);
 80217a8:	3502      	adds	r5, #2
        break;
 80217aa:	e7cb      	b.n	8021744 <get_properties_length+0x18>
    switch (mqtt_prop_type_by_id(props[i].id)) {
 80217ac:	464d      	mov	r5, r9
        return size;  // cannot parse further down
    }
  }

  return size;
}
 80217ae:	4628      	mov	r0, r5
 80217b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080217b4 <get_props_size>:

// returns the entire size of the properties section, including the
// size of the variable length of the content
static size_t get_props_size(struct mg_mqtt_prop *props, size_t count) {
 80217b4:	b510      	push	{r4, lr}
  size_t size = get_properties_length(props, count);
 80217b6:	f7ff ffb9 	bl	802172c <get_properties_length>
 80217ba:	4604      	mov	r4, r0
  size += varint_size(size);
 80217bc:	f7ff ff5e 	bl	802167c <varint_size>
  return size;
}
 80217c0:	4420      	add	r0, r4
 80217c2:	bd10      	pop	{r4, pc}

080217c4 <mg_aton4>:
  memset(addr->ip, 0, sizeof(addr->ip));
  addr->is_ip6 = false;
  return true;
}

static bool mg_aton4(struct mg_str str, struct mg_addr *addr) {
 80217c4:	b410      	push	{r4}
 80217c6:	b085      	sub	sp, #20
 80217c8:	466b      	mov	r3, sp
 80217ca:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t data[4] = {0, 0, 0, 0};
 80217ce:	2300      	movs	r3, #0
 80217d0:	9303      	str	r3, [sp, #12]
  size_t i, num_dots = 0;
 80217d2:	469c      	mov	ip, r3
  for (i = 0; i < str.len; i++) {
 80217d4:	9901      	ldr	r1, [sp, #4]
 80217d6:	4299      	cmp	r1, r3
 80217d8:	d92c      	bls.n	8021834 <mg_aton4+0x70>
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 80217da:	9c00      	ldr	r4, [sp, #0]
 80217dc:	5ce1      	ldrb	r1, [r4, r3]
 80217de:	f1a1 0030 	sub.w	r0, r1, #48	@ 0x30
 80217e2:	b2c0      	uxtb	r0, r0
 80217e4:	2809      	cmp	r0, #9
 80217e6:	d812      	bhi.n	802180e <mg_aton4+0x4a>
      int octet = data[num_dots] * 10 + (str.buf[i] - '0');
 80217e8:	f10c 0010 	add.w	r0, ip, #16
 80217ec:	4468      	add	r0, sp
 80217ee:	f810 0c04 	ldrb.w	r0, [r0, #-4]
 80217f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80217f6:	3930      	subs	r1, #48	@ 0x30
 80217f8:	eb01 0140 	add.w	r1, r1, r0, lsl #1
      if (octet > 255) return false;
 80217fc:	29ff      	cmp	r1, #255	@ 0xff
 80217fe:	dc28      	bgt.n	8021852 <mg_aton4+0x8e>
      data[num_dots] = (uint8_t) octet;
 8021800:	f10c 0010 	add.w	r0, ip, #16
 8021804:	4468      	add	r0, sp
 8021806:	f800 1c04 	strb.w	r1, [r0, #-4]
  for (i = 0; i < str.len; i++) {
 802180a:	3301      	adds	r3, #1
 802180c:	e7e2      	b.n	80217d4 <mg_aton4+0x10>
    } else if (str.buf[i] == '.') {
 802180e:	292e      	cmp	r1, #46	@ 0x2e
 8021810:	d121      	bne.n	8021856 <mg_aton4+0x92>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 8021812:	f1bc 0f02 	cmp.w	ip, #2
 8021816:	d820      	bhi.n	802185a <mg_aton4+0x96>
 8021818:	b923      	cbnz	r3, 8021824 <mg_aton4+0x60>
 802181a:	2000      	movs	r0, #0
  }
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
  memcpy(&addr->ip, data, sizeof(data));
  addr->is_ip6 = false;
  return true;
}
 802181c:	b005      	add	sp, #20
 802181e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021822:	4770      	bx	lr
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 8021824:	441c      	add	r4, r3
 8021826:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 802182a:	292e      	cmp	r1, #46	@ 0x2e
 802182c:	d017      	beq.n	802185e <mg_aton4+0x9a>
      num_dots++;
 802182e:	f10c 0c01 	add.w	ip, ip, #1
 8021832:	e7ea      	b.n	802180a <mg_aton4+0x46>
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 8021834:	f1bc 0f03 	cmp.w	ip, #3
 8021838:	d113      	bne.n	8021862 <mg_aton4+0x9e>
 802183a:	9900      	ldr	r1, [sp, #0]
 802183c:	4419      	add	r1, r3
 802183e:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 8021842:	2b2e      	cmp	r3, #46	@ 0x2e
 8021844:	d00f      	beq.n	8021866 <mg_aton4+0xa2>
  memcpy(&addr->ip, data, sizeof(data));
 8021846:	9b03      	ldr	r3, [sp, #12]
 8021848:	6013      	str	r3, [r2, #0]
  addr->is_ip6 = false;
 802184a:	2300      	movs	r3, #0
 802184c:	74d3      	strb	r3, [r2, #19]
  return true;
 802184e:	2001      	movs	r0, #1
 8021850:	e7e4      	b.n	802181c <mg_aton4+0x58>
      if (octet > 255) return false;
 8021852:	2000      	movs	r0, #0
 8021854:	e7e2      	b.n	802181c <mg_aton4+0x58>
      return false;
 8021856:	2000      	movs	r0, #0
 8021858:	e7e0      	b.n	802181c <mg_aton4+0x58>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 802185a:	2000      	movs	r0, #0
 802185c:	e7de      	b.n	802181c <mg_aton4+0x58>
 802185e:	2000      	movs	r0, #0
 8021860:	e7dc      	b.n	802181c <mg_aton4+0x58>
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 8021862:	2000      	movs	r0, #0
 8021864:	e7da      	b.n	802181c <mg_aton4+0x58>
 8021866:	2000      	movs	r0, #0
 8021868:	e7d8      	b.n	802181c <mg_aton4+0x58>

0802186a <mg_tcpip_call>:
  struct tcp *tcp;
  struct udp *udp;
  struct dhcp *dhcp;
};

static void mg_tcpip_call(struct mg_tcpip_if *ifp, int ev, void *ev_data) {
 802186a:	b508      	push	{r3, lr}
  if (ifp->fn != NULL) ifp->fn(ifp, ev, ev_data);
 802186c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 802186e:	b103      	cbz	r3, 8021872 <mg_tcpip_call+0x8>
 8021870:	4798      	blx	r3
}
 8021872:	bd08      	pop	{r3, pc}

08021874 <csumup>:
}

static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {
  size_t i;
  const uint8_t *p = (const uint8_t *) buf;
  for (i = 0; i < len; i++) sum += i & 1 ? p[i] : (uint32_t) (p[i] << 8);
 8021874:	2300      	movs	r3, #0
 8021876:	e005      	b.n	8021884 <csumup+0x10>
 8021878:	f811 c003 	ldrb.w	ip, [r1, r3]
 802187c:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 8021880:	4460      	add	r0, ip
 8021882:	3301      	adds	r3, #1
 8021884:	4293      	cmp	r3, r2
 8021886:	d205      	bcs.n	8021894 <csumup+0x20>
 8021888:	f013 0f01 	tst.w	r3, #1
 802188c:	d0f4      	beq.n	8021878 <csumup+0x4>
 802188e:	f811 c003 	ldrb.w	ip, [r1, r3]
 8021892:	e7f5      	b.n	8021880 <csumup+0xc>
  return sum;
}
 8021894:	4770      	bx	lr

08021896 <ether_output>:
  s->timer = ifp->now + n;
  s->ttype = type;
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
}

static size_t ether_output(struct mg_tcpip_if *ifp, size_t len) {
 8021896:	b538      	push	{r3, r4, r5, lr}
 8021898:	4604      	mov	r4, r0
 802189a:	460d      	mov	r5, r1
  size_t n = ifp->driver->tx(ifp->tx.buf, len, ifp);
 802189c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 802189e:	685b      	ldr	r3, [r3, #4]
 80218a0:	4602      	mov	r2, r0
 80218a2:	6940      	ldr	r0, [r0, #20]
 80218a4:	4798      	blx	r3
  if (n == len) ifp->nsent++;
 80218a6:	4285      	cmp	r5, r0
 80218a8:	d000      	beq.n	80218ac <ether_output+0x16>
  return n;
}
 80218aa:	bd38      	pop	{r3, r4, r5, pc}
  if (n == len) ifp->nsent++;
 80218ac:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80218ae:	3301      	adds	r3, #1
 80218b0:	6763      	str	r3, [r4, #116]	@ 0x74
  return n;
 80218b2:	e7fa      	b.n	80218aa <ether_output+0x14>

080218b4 <can_write>:
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
  mg_close_conn(c);
}

static bool can_write(struct mg_connection *c) {
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 80218b4:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 80218b8:	f013 0f28 	tst.w	r3, #40	@ 0x28
 80218bc:	d106      	bne.n	80218cc <can_write+0x18>
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 80218be:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 80218c0:	b132      	cbz	r2, 80218d0 <can_write+0x1c>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 80218c2:	f013 0f90 	tst.w	r3, #144	@ 0x90
 80218c6:	d005      	beq.n	80218d4 <can_write+0x20>
 80218c8:	2000      	movs	r0, #0
 80218ca:	4770      	bx	lr
 80218cc:	2000      	movs	r0, #0
 80218ce:	4770      	bx	lr
 80218d0:	2000      	movs	r0, #0
 80218d2:	4770      	bx	lr
 80218d4:	2001      	movs	r0, #1
}
 80218d6:	4770      	bx	lr

080218d8 <mg_esc>:
  uint8_t *p = va_arg(*ap, uint8_t *);
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
                    p[3], p[4], p[5]);
}

static char mg_esc(int c, bool esc) {
 80218d8:	b410      	push	{r4}
 80218da:	4602      	mov	r2, r0
  const char *p, *esc1 = "\b\f\n\r\t\\\"", *esc2 = "bfnrt\\\"";
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 80218dc:	460c      	mov	r4, r1
 80218de:	b109      	cbz	r1, 80218e4 <mg_esc+0xc>
 80218e0:	4b0b      	ldr	r3, [pc, #44]	@ (8021910 <mg_esc+0x38>)
 80218e2:	e007      	b.n	80218f4 <mg_esc+0x1c>
 80218e4:	4b0b      	ldr	r3, [pc, #44]	@ (8021914 <mg_esc+0x3c>)
 80218e6:	e005      	b.n	80218f4 <mg_esc+0x1c>
    if (*p == c) return esc ? esc2[p - esc1] : esc1[p - esc2];
 80218e8:	4a0a      	ldr	r2, [pc, #40]	@ (8021914 <mg_esc+0x3c>)
 80218ea:	1a9b      	subs	r3, r3, r2
 80218ec:	4a08      	ldr	r2, [pc, #32]	@ (8021910 <mg_esc+0x38>)
 80218ee:	5cd0      	ldrb	r0, [r2, r3]
 80218f0:	e00a      	b.n	8021908 <mg_esc+0x30>
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 80218f2:	3301      	adds	r3, #1
 80218f4:	7818      	ldrb	r0, [r3, #0]
 80218f6:	b138      	cbz	r0, 8021908 <mg_esc+0x30>
    if (*p == c) return esc ? esc2[p - esc1] : esc1[p - esc2];
 80218f8:	4290      	cmp	r0, r2
 80218fa:	d1fa      	bne.n	80218f2 <mg_esc+0x1a>
 80218fc:	2c00      	cmp	r4, #0
 80218fe:	d0f3      	beq.n	80218e8 <mg_esc+0x10>
 8021900:	4a03      	ldr	r2, [pc, #12]	@ (8021910 <mg_esc+0x38>)
 8021902:	1a9b      	subs	r3, r3, r2
 8021904:	4a03      	ldr	r2, [pc, #12]	@ (8021914 <mg_esc+0x3c>)
 8021906:	5cd0      	ldrb	r0, [r2, r3]
  }
  return 0;
}
 8021908:	f85d 4b04 	ldr.w	r4, [sp], #4
 802190c:	4770      	bx	lr
 802190e:	bf00      	nop
 8021910:	0803ab48 	.word	0x0803ab48
 8021914:	0803ab50 	.word	0x0803ab50

08021918 <mg_escape>:

static char mg_escape(int c) {
 8021918:	b508      	push	{r3, lr}
  return mg_esc(c, true);
 802191a:	2101      	movs	r1, #1
 802191c:	f7ff ffdc 	bl	80218d8 <mg_esc>
}
 8021920:	bd08      	pop	{r3, pc}

08021922 <qcpy>:

static size_t qcpy(void (*out)(char, void *), void *ptr, char *buf,
                   size_t len) {
 8021922:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021926:	4607      	mov	r7, r0
 8021928:	460e      	mov	r6, r1
 802192a:	4692      	mov	sl, r2
 802192c:	4699      	mov	r9, r3
  size_t i = 0, extra = 0;
 802192e:	f04f 0b00 	mov.w	fp, #0
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 8021932:	465c      	mov	r4, fp
 8021934:	e003      	b.n	802193e <qcpy+0x1c>
    char c = mg_escape(buf[i]);
    if (c) {
      out('\\', ptr), out(c, ptr), extra++;
    } else {
      out(buf[i], ptr);
 8021936:	4631      	mov	r1, r6
 8021938:	4628      	mov	r0, r5
 802193a:	47b8      	blx	r7
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 802193c:	3401      	adds	r4, #1
 802193e:	454c      	cmp	r4, r9
 8021940:	d211      	bcs.n	8021966 <qcpy+0x44>
 8021942:	f81a 5004 	ldrb.w	r5, [sl, r4]
 8021946:	b175      	cbz	r5, 8021966 <qcpy+0x44>
    char c = mg_escape(buf[i]);
 8021948:	4628      	mov	r0, r5
 802194a:	f7ff ffe5 	bl	8021918 <mg_escape>
    if (c) {
 802194e:	4680      	mov	r8, r0
 8021950:	2800      	cmp	r0, #0
 8021952:	d0f0      	beq.n	8021936 <qcpy+0x14>
      out('\\', ptr), out(c, ptr), extra++;
 8021954:	4631      	mov	r1, r6
 8021956:	205c      	movs	r0, #92	@ 0x5c
 8021958:	47b8      	blx	r7
 802195a:	4631      	mov	r1, r6
 802195c:	4640      	mov	r0, r8
 802195e:	47b8      	blx	r7
 8021960:	f10b 0b01 	add.w	fp, fp, #1
 8021964:	e7ea      	b.n	802193c <qcpy+0x1a>
    }
  }
  return i + extra;
}
 8021966:	eb04 000b 	add.w	r0, r4, fp
 802196a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021970 <mg_print_hex>:
    n += j;
  }
  return n;
}

size_t mg_print_hex(void (*out)(char, void *), void *arg, va_list *ap) {
 8021970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021974:	4607      	mov	r7, r0
 8021976:	460e      	mov	r6, r1
  size_t bl = (size_t) va_arg(*ap, int);
 8021978:	6811      	ldr	r1, [r2, #0]
 802197a:	1d0b      	adds	r3, r1, #4
 802197c:	6013      	str	r3, [r2, #0]
 802197e:	f8d1 9000 	ldr.w	r9, [r1]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8021982:	f101 0308 	add.w	r3, r1, #8
 8021986:	6013      	str	r3, [r2, #0]
 8021988:	f8d1 8004 	ldr.w	r8, [r1, #4]
  const char *hex = "0123456789abcdef";
  size_t j;
  for (j = 0; j < bl; j++) {
 802198c:	2400      	movs	r4, #0
 802198e:	e00e      	b.n	80219ae <mg_print_hex+0x3e>
    out(hex[(p[j] >> 4) & 0x0F], arg);
 8021990:	f818 3004 	ldrb.w	r3, [r8, r4]
 8021994:	091b      	lsrs	r3, r3, #4
 8021996:	4d09      	ldr	r5, [pc, #36]	@ (80219bc <mg_print_hex+0x4c>)
 8021998:	4631      	mov	r1, r6
 802199a:	5ce8      	ldrb	r0, [r5, r3]
 802199c:	47b8      	blx	r7
    out(hex[p[j] & 0x0F], arg);
 802199e:	f818 3004 	ldrb.w	r3, [r8, r4]
 80219a2:	f003 030f 	and.w	r3, r3, #15
 80219a6:	4631      	mov	r1, r6
 80219a8:	5ce8      	ldrb	r0, [r5, r3]
 80219aa:	47b8      	blx	r7
  for (j = 0; j < bl; j++) {
 80219ac:	3401      	adds	r4, #1
 80219ae:	454c      	cmp	r4, r9
 80219b0:	d3ee      	bcc.n	8021990 <mg_print_hex+0x20>
  }
  return 2 * bl;
}
 80219b2:	ea4f 0049 	mov.w	r0, r9, lsl #1
 80219b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80219ba:	bf00      	nop
 80219bc:	0803a69c 	.word	0x0803a69c

080219c0 <blk0>:
  uint32_t l[16];
};

#define rol(value, bits) (((value) << (bits)) | ((value) >> (32 - (bits))))

static uint32_t blk0(union char64long16 *block, int i) {
 80219c0:	4684      	mov	ip, r0
  if (MG_BIG_ENDIAN) {
  } else {
    block->l[i] = (rol(block->l[i], 24) & 0xFF00FF00) |
 80219c2:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
 80219c6:	ea4f 2332 	mov.w	r3, r2, ror #8
 80219ca:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
                  (rol(block->l[i], 8) & 0x00FF00FF);
 80219ce:	ea4f 6232 	mov.w	r2, r2, ror #24
 80219d2:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
    block->l[i] = (rol(block->l[i], 24) & 0xFF00FF00) |
 80219d6:	ea43 0002 	orr.w	r0, r3, r2
 80219da:	f84c 0021 	str.w	r0, [ip, r1, lsl #2]
  }
  return block->l[i];
}
 80219de:	4770      	bx	lr

080219e0 <mg_tolc>:
  struct mg_str str = {(char *) s, n};
  return str;
}

static int mg_tolc(char c) {
  return (c >= 'A' && c <= 'Z') ? c + 'a' - 'A' : c;
 80219e0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80219e4:	b2db      	uxtb	r3, r3
 80219e6:	2b19      	cmp	r3, #25
 80219e8:	d800      	bhi.n	80219ec <mg_tolc+0xc>
 80219ea:	3020      	adds	r0, #32
}
 80219ec:	4770      	bx	lr

080219ee <isbyte>:
  return ~crc;
}

static int isbyte(int n) {
  return n >= 0 && n <= 255;
}
 80219ee:	28ff      	cmp	r0, #255	@ 0xff
 80219f0:	bf8c      	ite	hi
 80219f2:	2000      	movhi	r0, #0
 80219f4:	2001      	movls	r0, #1
 80219f6:	4770      	bx	lr

080219f8 <w5500_txn>:
#if MG_ENABLE_TCPIP && defined(MG_ENABLE_DRIVER_W5500) && MG_ENABLE_DRIVER_W5500

enum { W5500_CR = 0, W5500_S0 = 1, W5500_TX0 = 2, W5500_RX0 = 3 };

static void w5500_txn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr,
                      bool wr, void *buf, size_t len) {
 80219f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80219fc:	b082      	sub	sp, #8
 80219fe:	4605      	mov	r5, r0
 8021a00:	9e08      	ldr	r6, [sp, #32]
 8021a02:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  size_t i;
  uint8_t *p = (uint8_t *) buf;
  uint8_t cmd[] = {(uint8_t) (addr >> 8), (uint8_t) (addr & 255),
 8021a04:	0a10      	lsrs	r0, r2, #8
 8021a06:	f88d 0004 	strb.w	r0, [sp, #4]
 8021a0a:	f88d 2005 	strb.w	r2, [sp, #5]
                   (uint8_t) ((block << 3) | (wr ? 4 : 0))};
 8021a0e:	00c9      	lsls	r1, r1, #3
 8021a10:	b249      	sxtb	r1, r1
 8021a12:	4698      	mov	r8, r3
 8021a14:	b143      	cbz	r3, 8021a28 <w5500_txn+0x30>
 8021a16:	2304      	movs	r3, #4
 8021a18:	4319      	orrs	r1, r3
  uint8_t cmd[] = {(uint8_t) (addr >> 8), (uint8_t) (addr & 255),
 8021a1a:	f88d 1006 	strb.w	r1, [sp, #6]
  s->begin(s->spi);
 8021a1e:	686b      	ldr	r3, [r5, #4]
 8021a20:	6828      	ldr	r0, [r5, #0]
 8021a22:	4798      	blx	r3
  for (i = 0; i < sizeof(cmd); i++) s->txn(s->spi, cmd[i]);
 8021a24:	2400      	movs	r4, #0
 8021a26:	e00a      	b.n	8021a3e <w5500_txn+0x46>
                   (uint8_t) ((block << 3) | (wr ? 4 : 0))};
 8021a28:	2300      	movs	r3, #0
 8021a2a:	e7f5      	b.n	8021a18 <w5500_txn+0x20>
  for (i = 0; i < sizeof(cmd); i++) s->txn(s->spi, cmd[i]);
 8021a2c:	68eb      	ldr	r3, [r5, #12]
 8021a2e:	f104 0208 	add.w	r2, r4, #8
 8021a32:	446a      	add	r2, sp
 8021a34:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 8021a38:	6828      	ldr	r0, [r5, #0]
 8021a3a:	4798      	blx	r3
 8021a3c:	3401      	adds	r4, #1
 8021a3e:	2c02      	cmp	r4, #2
 8021a40:	d9f4      	bls.n	8021a2c <w5500_txn+0x34>
  for (i = 0; i < len; i++) {
 8021a42:	2400      	movs	r4, #0
 8021a44:	e000      	b.n	8021a48 <w5500_txn+0x50>
 8021a46:	3401      	adds	r4, #1
 8021a48:	42bc      	cmp	r4, r7
 8021a4a:	d208      	bcs.n	8021a5e <w5500_txn+0x66>
    uint8_t r = s->txn(s->spi, p[i]);
 8021a4c:	68eb      	ldr	r3, [r5, #12]
 8021a4e:	5d31      	ldrb	r1, [r6, r4]
 8021a50:	6828      	ldr	r0, [r5, #0]
 8021a52:	4798      	blx	r3
    if (!wr) p[i] = r;
 8021a54:	f1b8 0f00 	cmp.w	r8, #0
 8021a58:	d1f5      	bne.n	8021a46 <w5500_txn+0x4e>
 8021a5a:	5530      	strb	r0, [r6, r4]
 8021a5c:	e7f3      	b.n	8021a46 <w5500_txn+0x4e>
  }
  s->end(s->spi);
 8021a5e:	68ab      	ldr	r3, [r5, #8]
 8021a60:	6828      	ldr	r0, [r5, #0]
 8021a62:	4798      	blx	r3
}
 8021a64:	b002      	add	sp, #8
 8021a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08021a6a <w5500_wn>:

// clang-format off
static  void w5500_wn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, void *buf, size_t len) { w5500_txn(s, block, addr, true, buf, len); }
 8021a6a:	b510      	push	{r4, lr}
 8021a6c:	b082      	sub	sp, #8
 8021a6e:	9c04      	ldr	r4, [sp, #16]
 8021a70:	9401      	str	r4, [sp, #4]
 8021a72:	9300      	str	r3, [sp, #0]
 8021a74:	2301      	movs	r3, #1
 8021a76:	f7ff ffbf 	bl	80219f8 <w5500_txn>
 8021a7a:	b002      	add	sp, #8
 8021a7c:	bd10      	pop	{r4, pc}

08021a7e <w5500_w1>:
static  void w5500_w1(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, uint8_t val) { w5500_wn(s, block, addr, &val, 1); }
 8021a7e:	b500      	push	{lr}
 8021a80:	b085      	sub	sp, #20
 8021a82:	f88d 300f 	strb.w	r3, [sp, #15]
 8021a86:	2301      	movs	r3, #1
 8021a88:	9300      	str	r3, [sp, #0]
 8021a8a:	f10d 030f 	add.w	r3, sp, #15
 8021a8e:	f7ff ffec 	bl	8021a6a <w5500_wn>
 8021a92:	b005      	add	sp, #20
 8021a94:	f85d fb04 	ldr.w	pc, [sp], #4

08021a98 <w5500_w2>:
static  void w5500_w2(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, uint16_t val) { uint8_t buf[2] = {(uint8_t) (val >> 8), (uint8_t) (val & 255)}; w5500_wn(s, block, addr, buf, sizeof(buf)); }
 8021a98:	b500      	push	{lr}
 8021a9a:	b085      	sub	sp, #20
 8021a9c:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 8021aa0:	f88d c00c 	strb.w	ip, [sp, #12]
 8021aa4:	f88d 300d 	strb.w	r3, [sp, #13]
 8021aa8:	2302      	movs	r3, #2
 8021aaa:	9300      	str	r3, [sp, #0]
 8021aac:	ab03      	add	r3, sp, #12
 8021aae:	f7ff ffdc 	bl	8021a6a <w5500_wn>
 8021ab2:	b005      	add	sp, #20
 8021ab4:	f85d fb04 	ldr.w	pc, [sp], #4

08021ab8 <w5500_rn>:
static  void w5500_rn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, void *buf, size_t len) { w5500_txn(s, block, addr, false, buf, len); }
 8021ab8:	b510      	push	{r4, lr}
 8021aba:	b082      	sub	sp, #8
 8021abc:	9c04      	ldr	r4, [sp, #16]
 8021abe:	9401      	str	r4, [sp, #4]
 8021ac0:	9300      	str	r3, [sp, #0]
 8021ac2:	2300      	movs	r3, #0
 8021ac4:	f7ff ff98 	bl	80219f8 <w5500_txn>
 8021ac8:	b002      	add	sp, #8
 8021aca:	bd10      	pop	{r4, pc}

08021acc <w5500_r1>:
static  uint8_t w5500_r1(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr) { uint8_t r = 0; w5500_rn(s, block, addr, &r, 1); return r; }
 8021acc:	b500      	push	{lr}
 8021ace:	b085      	sub	sp, #20
 8021ad0:	2300      	movs	r3, #0
 8021ad2:	f88d 300f 	strb.w	r3, [sp, #15]
 8021ad6:	2301      	movs	r3, #1
 8021ad8:	9300      	str	r3, [sp, #0]
 8021ada:	f10d 030f 	add.w	r3, sp, #15
 8021ade:	f7ff ffeb 	bl	8021ab8 <w5500_rn>
 8021ae2:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8021ae6:	b005      	add	sp, #20
 8021ae8:	f85d fb04 	ldr.w	pc, [sp], #4

08021aec <w5500_r2>:
static  uint16_t w5500_r2(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr) { uint8_t buf[2] = {0, 0}; w5500_rn(s, block, addr, buf, sizeof(buf)); return (uint16_t) ((buf[0] << 8) | buf[1]); }
 8021aec:	b500      	push	{lr}
 8021aee:	b085      	sub	sp, #20
 8021af0:	2300      	movs	r3, #0
 8021af2:	f8ad 300c 	strh.w	r3, [sp, #12]
 8021af6:	2302      	movs	r3, #2
 8021af8:	9300      	str	r3, [sp, #0]
 8021afa:	ab03      	add	r3, sp, #12
 8021afc:	f7ff ffdc 	bl	8021ab8 <w5500_rn>
 8021b00:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8021b04:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8021b08:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8021b0c:	b005      	add	sp, #20
 8021b0e:	f85d fb04 	ldr.w	pc, [sp], #4

08021b12 <w5500_rx>:
// clang-format on

static size_t w5500_rx(void *buf, size_t buflen, struct mg_tcpip_if *ifp) {
 8021b12:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021b16:	b083      	sub	sp, #12
 8021b18:	4606      	mov	r6, r0
 8021b1a:	4688      	mov	r8, r1
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 8021b1c:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 8021b1e:	2000      	movs	r0, #0
  while ((n2 = w5500_r2(s, W5500_S0, 0x26)) > n) n = n2;  // Until it is stable
 8021b20:	4604      	mov	r4, r0
 8021b22:	2226      	movs	r2, #38	@ 0x26
 8021b24:	2101      	movs	r1, #1
 8021b26:	4628      	mov	r0, r5
 8021b28:	f7ff ffe0 	bl	8021aec <w5500_r2>
 8021b2c:	4284      	cmp	r4, r0
 8021b2e:	d3f7      	bcc.n	8021b20 <w5500_rx+0xe>
  // printf("RSR: %d\n", (int) n);
  if (n > 0) {
 8021b30:	b91c      	cbnz	r4, 8021b3a <w5500_rx+0x28>
    w5500_w2(s, W5500_S0, 0x28, (uint16_t) (ptr + n));  // Advance read pointer
    w5500_w1(s, W5500_S0, 1, 0x40);                     // Sock0 CR -> RECV
    // printf("  RX_RD: tot=%u n=%u r=%u\n", n2, n, r);
  }
  return r;
}
 8021b32:	4620      	mov	r0, r4
 8021b34:	b003      	add	sp, #12
 8021b36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint16_t ptr = w5500_r2(s, W5500_S0, 0x28);  // Get read pointer
 8021b3a:	2228      	movs	r2, #40	@ 0x28
 8021b3c:	2101      	movs	r1, #1
 8021b3e:	4628      	mov	r0, r5
 8021b40:	f7ff ffd4 	bl	8021aec <w5500_r2>
 8021b44:	4607      	mov	r7, r0
    n = w5500_r2(s, W5500_RX0, ptr);             // Read frame length
 8021b46:	4602      	mov	r2, r0
 8021b48:	2103      	movs	r1, #3
 8021b4a:	4628      	mov	r0, r5
 8021b4c:	f7ff ffce 	bl	8021aec <w5500_r2>
 8021b50:	4681      	mov	r9, r0
    if (n <= len + 2 && n > 1) {
 8021b52:	fa1f f188 	uxth.w	r1, r8
 8021b56:	3102      	adds	r1, #2
 8021b58:	4288      	cmp	r0, r1
 8021b5a:	dc0e      	bgt.n	8021b7a <w5500_rx+0x68>
 8021b5c:	2801      	cmp	r0, #1
 8021b5e:	d801      	bhi.n	8021b64 <w5500_rx+0x52>
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 8021b60:	2400      	movs	r4, #0
 8021b62:	e00b      	b.n	8021b7c <w5500_rx+0x6a>
      r = (uint16_t) (n - 2);
 8021b64:	1e84      	subs	r4, r0, #2
 8021b66:	b2a4      	uxth	r4, r4
      w5500_rn(s, W5500_RX0, (uint16_t) (ptr + 2), buf, r);
 8021b68:	1cba      	adds	r2, r7, #2
 8021b6a:	9400      	str	r4, [sp, #0]
 8021b6c:	4633      	mov	r3, r6
 8021b6e:	b292      	uxth	r2, r2
 8021b70:	2103      	movs	r1, #3
 8021b72:	4628      	mov	r0, r5
 8021b74:	f7ff ffa0 	bl	8021ab8 <w5500_rn>
 8021b78:	e000      	b.n	8021b7c <w5500_rx+0x6a>
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 8021b7a:	2400      	movs	r4, #0
    w5500_w2(s, W5500_S0, 0x28, (uint16_t) (ptr + n));  // Advance read pointer
 8021b7c:	eb07 0309 	add.w	r3, r7, r9
 8021b80:	b29b      	uxth	r3, r3
 8021b82:	2228      	movs	r2, #40	@ 0x28
 8021b84:	2101      	movs	r1, #1
 8021b86:	4628      	mov	r0, r5
 8021b88:	f7ff ff86 	bl	8021a98 <w5500_w2>
    w5500_w1(s, W5500_S0, 1, 0x40);                     // Sock0 CR -> RECV
 8021b8c:	2340      	movs	r3, #64	@ 0x40
 8021b8e:	2201      	movs	r2, #1
 8021b90:	4611      	mov	r1, r2
 8021b92:	4628      	mov	r0, r5
 8021b94:	f7ff ff73 	bl	8021a7e <w5500_w1>
 8021b98:	e7cb      	b.n	8021b32 <w5500_rx+0x20>

08021b9a <w5500_tx>:

static size_t w5500_tx(const void *buf, size_t buflen,
                       struct mg_tcpip_if *ifp) {
 8021b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021b9e:	b082      	sub	sp, #8
 8021ba0:	4680      	mov	r8, r0
 8021ba2:	460d      	mov	r5, r1
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 8021ba4:	6a96      	ldr	r6, [r2, #40]	@ 0x28
  uint16_t i, ptr, n = 0, len = (uint16_t) buflen;
 8021ba6:	b28f      	uxth	r7, r1
 8021ba8:	2000      	movs	r0, #0
  while (n < len) n = w5500_r2(s, W5500_S0, 0x20);      // Wait for space
 8021baa:	e004      	b.n	8021bb6 <w5500_tx+0x1c>
 8021bac:	2220      	movs	r2, #32
 8021bae:	2101      	movs	r1, #1
 8021bb0:	4630      	mov	r0, r6
 8021bb2:	f7ff ff9b 	bl	8021aec <w5500_r2>
 8021bb6:	42b8      	cmp	r0, r7
 8021bb8:	d3f8      	bcc.n	8021bac <w5500_tx+0x12>
  ptr = w5500_r2(s, W5500_S0, 0x24);                    // Get write pointer
 8021bba:	2224      	movs	r2, #36	@ 0x24
 8021bbc:	2101      	movs	r1, #1
 8021bbe:	4630      	mov	r0, r6
 8021bc0:	f7ff ff94 	bl	8021aec <w5500_r2>
 8021bc4:	4604      	mov	r4, r0
  w5500_wn(s, W5500_TX0, ptr, (void *) buf, len);       // Write data
 8021bc6:	b2ad      	uxth	r5, r5
 8021bc8:	9500      	str	r5, [sp, #0]
 8021bca:	4643      	mov	r3, r8
 8021bcc:	4602      	mov	r2, r0
 8021bce:	2102      	movs	r1, #2
 8021bd0:	4630      	mov	r0, r6
 8021bd2:	f7ff ff4a 	bl	8021a6a <w5500_wn>
  w5500_w2(s, W5500_S0, 0x24, (uint16_t) (ptr + len));  // Advance write pointer
 8021bd6:	193b      	adds	r3, r7, r4
 8021bd8:	b29b      	uxth	r3, r3
 8021bda:	2224      	movs	r2, #36	@ 0x24
 8021bdc:	2101      	movs	r1, #1
 8021bde:	4630      	mov	r0, r6
 8021be0:	f7ff ff5a 	bl	8021a98 <w5500_w2>
  w5500_w1(s, W5500_S0, 1, 0x20);                       // Sock0 CR -> SEND
 8021be4:	2320      	movs	r3, #32
 8021be6:	2201      	movs	r2, #1
 8021be8:	4611      	mov	r1, r2
 8021bea:	4630      	mov	r0, r6
 8021bec:	f7ff ff47 	bl	8021a7e <w5500_w1>
  for (i = 0; i < 40; i++) {
 8021bf0:	2400      	movs	r4, #0
 8021bf2:	e004      	b.n	8021bfe <w5500_tx+0x64>
    uint8_t ir = w5500_r1(s, W5500_S0, 2);  // Read S0 IR
    if (ir == 0) continue;
    // printf("IR %d, len=%d, free=%d, ptr %d\n", ir, (int) len, (int) n, ptr);
    w5500_w1(s, W5500_S0, 2, ir);  // Write S0 IR: clear it!
    if (ir & 8) len = 0;           // Timeout. Report error
    if (ir & (16 | 8)) break;      // Stop on SEND_OK or timeout
 8021bf4:	f015 0f18 	tst.w	r5, #24
 8021bf8:	d116      	bne.n	8021c28 <w5500_tx+0x8e>
  for (i = 0; i < 40; i++) {
 8021bfa:	3401      	adds	r4, #1
 8021bfc:	b2a4      	uxth	r4, r4
 8021bfe:	2c27      	cmp	r4, #39	@ 0x27
 8021c00:	d812      	bhi.n	8021c28 <w5500_tx+0x8e>
    uint8_t ir = w5500_r1(s, W5500_S0, 2);  // Read S0 IR
 8021c02:	2202      	movs	r2, #2
 8021c04:	2101      	movs	r1, #1
 8021c06:	4630      	mov	r0, r6
 8021c08:	f7ff ff60 	bl	8021acc <w5500_r1>
    if (ir == 0) continue;
 8021c0c:	4605      	mov	r5, r0
 8021c0e:	2800      	cmp	r0, #0
 8021c10:	d0f3      	beq.n	8021bfa <w5500_tx+0x60>
    w5500_w1(s, W5500_S0, 2, ir);  // Write S0 IR: clear it!
 8021c12:	4603      	mov	r3, r0
 8021c14:	2202      	movs	r2, #2
 8021c16:	2101      	movs	r1, #1
 8021c18:	4630      	mov	r0, r6
 8021c1a:	f7ff ff30 	bl	8021a7e <w5500_w1>
    if (ir & 8) len = 0;           // Timeout. Report error
 8021c1e:	f015 0f08 	tst.w	r5, #8
 8021c22:	d0e7      	beq.n	8021bf4 <w5500_tx+0x5a>
 8021c24:	2700      	movs	r7, #0
 8021c26:	e7e5      	b.n	8021bf4 <w5500_tx+0x5a>
  }
  return len;
}
 8021c28:	4638      	mov	r0, r7
 8021c2a:	b002      	add	sp, #8
 8021c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08021c30 <w5500_init>:

static bool w5500_init(struct mg_tcpip_if *ifp) {
 8021c30:	b510      	push	{r4, lr}
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 8021c32:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  s->end(s->spi);
 8021c34:	68a3      	ldr	r3, [r4, #8]
 8021c36:	6820      	ldr	r0, [r4, #0]
 8021c38:	4798      	blx	r3
  w5500_w1(s, W5500_CR, 0, 0x80);     // Reset chip: CR -> 0x80
 8021c3a:	2380      	movs	r3, #128	@ 0x80
 8021c3c:	2200      	movs	r2, #0
 8021c3e:	4611      	mov	r1, r2
 8021c40:	4620      	mov	r0, r4
 8021c42:	f7ff ff1c 	bl	8021a7e <w5500_w1>
  w5500_w1(s, W5500_CR, 0x2e, 0);     // CR PHYCFGR -> reset
 8021c46:	2300      	movs	r3, #0
 8021c48:	222e      	movs	r2, #46	@ 0x2e
 8021c4a:	4619      	mov	r1, r3
 8021c4c:	4620      	mov	r0, r4
 8021c4e:	f7ff ff16 	bl	8021a7e <w5500_w1>
  w5500_w1(s, W5500_CR, 0x2e, 0xf8);  // CR PHYCFGR -> set
 8021c52:	23f8      	movs	r3, #248	@ 0xf8
 8021c54:	222e      	movs	r2, #46	@ 0x2e
 8021c56:	2100      	movs	r1, #0
 8021c58:	4620      	mov	r0, r4
 8021c5a:	f7ff ff10 	bl	8021a7e <w5500_w1>
  // w5500_wn(s, W5500_CR, 9, s->mac, 6);      // Set source MAC
  w5500_w1(s, W5500_S0, 0x1e, 16);          // Sock0 RX buf size
 8021c5e:	2310      	movs	r3, #16
 8021c60:	221e      	movs	r2, #30
 8021c62:	2101      	movs	r1, #1
 8021c64:	4620      	mov	r0, r4
 8021c66:	f7ff ff0a 	bl	8021a7e <w5500_w1>
  w5500_w1(s, W5500_S0, 0x1f, 16);          // Sock0 TX buf size
 8021c6a:	2310      	movs	r3, #16
 8021c6c:	221f      	movs	r2, #31
 8021c6e:	2101      	movs	r1, #1
 8021c70:	4620      	mov	r0, r4
 8021c72:	f7ff ff04 	bl	8021a7e <w5500_w1>
  w5500_w1(s, W5500_S0, 0, 4);              // Sock0 MR -> MACRAW
 8021c76:	2304      	movs	r3, #4
 8021c78:	2200      	movs	r2, #0
 8021c7a:	2101      	movs	r1, #1
 8021c7c:	4620      	mov	r0, r4
 8021c7e:	f7ff fefe 	bl	8021a7e <w5500_w1>
  w5500_w1(s, W5500_S0, 1, 1);              // Sock0 CR -> OPEN
 8021c82:	2301      	movs	r3, #1
 8021c84:	461a      	mov	r2, r3
 8021c86:	4619      	mov	r1, r3
 8021c88:	4620      	mov	r0, r4
 8021c8a:	f7ff fef8 	bl	8021a7e <w5500_w1>
  return w5500_r1(s, W5500_S0, 3) == 0x42;  // Sock0 SR == MACRAW
 8021c8e:	2203      	movs	r2, #3
 8021c90:	2101      	movs	r1, #1
 8021c92:	4620      	mov	r0, r4
 8021c94:	f7ff ff1a 	bl	8021acc <w5500_r1>
}
 8021c98:	2842      	cmp	r0, #66	@ 0x42
 8021c9a:	bf14      	ite	ne
 8021c9c:	2000      	movne	r0, #0
 8021c9e:	2001      	moveq	r0, #1
 8021ca0:	bd10      	pop	{r4, pc}

08021ca2 <w5500_up>:

static bool w5500_up(struct mg_tcpip_if *ifp) {
 8021ca2:	b508      	push	{r3, lr}
  struct mg_tcpip_spi *spi = (struct mg_tcpip_spi *) ifp->driver_data;
  uint8_t phycfgr = w5500_r1(spi, W5500_CR, 0x2e);
 8021ca4:	222e      	movs	r2, #46	@ 0x2e
 8021ca6:	2100      	movs	r1, #0
 8021ca8:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8021caa:	f7ff ff0f 	bl	8021acc <w5500_r1>
  return phycfgr & 1;  // Bit 0 of PHYCFGR is LNK (0 - down, 1 - up)
}
 8021cae:	f000 0001 	and.w	r0, r0, #1
 8021cb2:	bd08      	pop	{r3, pc}

08021cb4 <mg_dns_free>:
static void mg_dns_free(struct dns_data **head, struct dns_data *d) {
 8021cb4:	b508      	push	{r3, lr}
 8021cb6:	4602      	mov	r2, r0
 8021cb8:	4608      	mov	r0, r1
  LIST_DELETE(struct dns_data, head, d);
 8021cba:	e000      	b.n	8021cbe <mg_dns_free+0xa>
 8021cbc:	461a      	mov	r2, r3
 8021cbe:	6813      	ldr	r3, [r2, #0]
 8021cc0:	4283      	cmp	r3, r0
 8021cc2:	d1fb      	bne.n	8021cbc <mg_dns_free+0x8>
 8021cc4:	6803      	ldr	r3, [r0, #0]
 8021cc6:	6013      	str	r3, [r2, #0]
  free(d);
 8021cc8:	f7f9 fa00 	bl	801b0cc <vPortFree>
}
 8021ccc:	bd08      	pop	{r3, pc}

08021cce <mg_atone>:
static bool mg_atone(struct mg_str str, struct mg_addr *addr) {
 8021cce:	b082      	sub	sp, #8
 8021cd0:	ab02      	add	r3, sp, #8
 8021cd2:	e903 0003 	stmdb	r3, {r0, r1}
  if (str.len > 0) return false;
 8021cd6:	b111      	cbz	r1, 8021cde <mg_atone+0x10>
 8021cd8:	2000      	movs	r0, #0
}
 8021cda:	b002      	add	sp, #8
 8021cdc:	4770      	bx	lr
  memset(addr->ip, 0, sizeof(addr->ip));
 8021cde:	6011      	str	r1, [r2, #0]
 8021ce0:	6051      	str	r1, [r2, #4]
 8021ce2:	6091      	str	r1, [r2, #8]
 8021ce4:	60d1      	str	r1, [r2, #12]
  addr->is_ip6 = false;
 8021ce6:	74d1      	strb	r1, [r2, #19]
  return true;
 8021ce8:	2001      	movs	r0, #1
 8021cea:	e7f6      	b.n	8021cda <mg_atone+0xc>

08021cec <urlparse>:
static struct url urlparse(const char *url) {
 8021cec:	b510      	push	{r4, lr}
 8021cee:	b088      	sub	sp, #32
 8021cf0:	4604      	mov	r4, r0
  memset(&u, 0, sizeof(u));
 8021cf2:	2200      	movs	r2, #0
 8021cf4:	9201      	str	r2, [sp, #4]
 8021cf6:	9202      	str	r2, [sp, #8]
 8021cf8:	9203      	str	r2, [sp, #12]
 8021cfa:	9204      	str	r2, [sp, #16]
 8021cfc:	9205      	str	r2, [sp, #20]
 8021cfe:	9206      	str	r2, [sp, #24]
 8021d00:	9207      	str	r2, [sp, #28]
  for (i = 0; url[i] != '\0'; i++) {
 8021d02:	e00f      	b.n	8021d24 <urlparse+0x38>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 8021d04:	b19a      	cbz	r2, 8021d2e <urlparse+0x42>
 8021d06:	9804      	ldr	r0, [sp, #16]
 8021d08:	b988      	cbnz	r0, 8021d2e <urlparse+0x42>
 8021d0a:	1888      	adds	r0, r1, r2
 8021d0c:	f810 0c01 	ldrb.w	r0, [r0, #-1]
 8021d10:	282f      	cmp	r0, #47	@ 0x2f
 8021d12:	d10c      	bne.n	8021d2e <urlparse+0x42>
      u.host = i + 1;
 8021d14:	1c53      	adds	r3, r2, #1
 8021d16:	9304      	str	r3, [sp, #16]
      u.port = 0;
 8021d18:	2300      	movs	r3, #0
 8021d1a:	9305      	str	r3, [sp, #20]
 8021d1c:	e001      	b.n	8021d22 <urlparse+0x36>
      u.port = 0;  // IPv6 URLs, like http://[::1]/bar
 8021d1e:	2300      	movs	r3, #0
 8021d20:	9305      	str	r3, [sp, #20]
  for (i = 0; url[i] != '\0'; i++) {
 8021d22:	3201      	adds	r2, #1
 8021d24:	5c8b      	ldrb	r3, [r1, r2]
 8021d26:	2b00      	cmp	r3, #0
 8021d28:	d02c      	beq.n	8021d84 <urlparse+0x98>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 8021d2a:	2b2f      	cmp	r3, #47	@ 0x2f
 8021d2c:	d0ea      	beq.n	8021d04 <urlparse+0x18>
    } else if (url[i] == ']') {
 8021d2e:	2b5d      	cmp	r3, #93	@ 0x5d
 8021d30:	d0f5      	beq.n	8021d1e <urlparse+0x32>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 8021d32:	2b3a      	cmp	r3, #58	@ 0x3a
 8021d34:	d00b      	beq.n	8021d4e <urlparse+0x62>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 8021d36:	2b40      	cmp	r3, #64	@ 0x40
 8021d38:	d012      	beq.n	8021d60 <urlparse+0x74>
    } else if (url[i] == '/' && u.host && u.uri == 0) {
 8021d3a:	2b2f      	cmp	r3, #47	@ 0x2f
 8021d3c:	d1f1      	bne.n	8021d22 <urlparse+0x36>
 8021d3e:	9b04      	ldr	r3, [sp, #16]
 8021d40:	2b00      	cmp	r3, #0
 8021d42:	d0ee      	beq.n	8021d22 <urlparse+0x36>
 8021d44:	9b06      	ldr	r3, [sp, #24]
 8021d46:	2b00      	cmp	r3, #0
 8021d48:	d1eb      	bne.n	8021d22 <urlparse+0x36>
      u.uri = i;
 8021d4a:	9206      	str	r2, [sp, #24]
 8021d4c:	e7e9      	b.n	8021d22 <urlparse+0x36>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 8021d4e:	9805      	ldr	r0, [sp, #20]
 8021d50:	2800      	cmp	r0, #0
 8021d52:	d1f0      	bne.n	8021d36 <urlparse+0x4a>
 8021d54:	9806      	ldr	r0, [sp, #24]
 8021d56:	2800      	cmp	r0, #0
 8021d58:	d1ed      	bne.n	8021d36 <urlparse+0x4a>
      u.port = i + 1;
 8021d5a:	1c53      	adds	r3, r2, #1
 8021d5c:	9305      	str	r3, [sp, #20]
 8021d5e:	e7e0      	b.n	8021d22 <urlparse+0x36>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 8021d60:	9802      	ldr	r0, [sp, #8]
 8021d62:	2800      	cmp	r0, #0
 8021d64:	d1e9      	bne.n	8021d3a <urlparse+0x4e>
 8021d66:	9803      	ldr	r0, [sp, #12]
 8021d68:	2800      	cmp	r0, #0
 8021d6a:	d1e6      	bne.n	8021d3a <urlparse+0x4e>
 8021d6c:	9806      	ldr	r0, [sp, #24]
 8021d6e:	2800      	cmp	r0, #0
 8021d70:	d1e3      	bne.n	8021d3a <urlparse+0x4e>
      u.user = u.host;
 8021d72:	9b04      	ldr	r3, [sp, #16]
 8021d74:	9302      	str	r3, [sp, #8]
      u.pass = u.port;
 8021d76:	9b05      	ldr	r3, [sp, #20]
 8021d78:	9303      	str	r3, [sp, #12]
      u.host = i + 1;
 8021d7a:	1c53      	adds	r3, r2, #1
 8021d7c:	9304      	str	r3, [sp, #16]
      u.port = 0;
 8021d7e:	2300      	movs	r3, #0
 8021d80:	9305      	str	r3, [sp, #20]
 8021d82:	e7ce      	b.n	8021d22 <urlparse+0x36>
  u.end = i;
 8021d84:	9207      	str	r2, [sp, #28]
  return u;
 8021d86:	46a4      	mov	ip, r4
 8021d88:	f10d 0e04 	add.w	lr, sp, #4
 8021d8c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8021d90:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8021d94:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8021d98:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
}
 8021d9c:	4620      	mov	r0, r4
 8021d9e:	b008      	add	sp, #32
 8021da0:	bd10      	pop	{r4, pc}

08021da2 <mg_dns_parse_name_depth>:
                                      int depth) {
 8021da2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021da6:	b085      	sub	sp, #20
 8021da8:	4681      	mov	r9, r0
 8021daa:	4688      	mov	r8, r1
 8021dac:	4693      	mov	fp, r2
 8021dae:	469a      	mov	sl, r3
 8021db0:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8021db2:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
  if (tolen > 0 && depth == 0) to[0] = '\0';
 8021db4:	b11f      	cbz	r7, 8021dbe <mg_dns_parse_name_depth+0x1c>
 8021db6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021db8:	b90b      	cbnz	r3, 8021dbe <mg_dns_parse_name_depth+0x1c>
 8021dba:	f88a 3000 	strb.w	r3, [sl]
  if (depth > 5) return 0;
 8021dbe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021dc0:	2b05      	cmp	r3, #5
 8021dc2:	dc4f      	bgt.n	8021e64 <mg_dns_parse_name_depth+0xc2>
  size_t i = 0;
 8021dc4:	2600      	movs	r6, #0
 8021dc6:	e02f      	b.n	8021e28 <mg_dns_parse_name_depth+0x86>
      i++;
 8021dc8:	3601      	adds	r6, #1
  if (tolen > 0) to[tolen - 1] = '\0';  // Make sure make sure it is nul-term
 8021dca:	2f00      	cmp	r7, #0
 8021dcc:	d04b      	beq.n	8021e66 <mg_dns_parse_name_depth+0xc4>
 8021dce:	3f01      	subs	r7, #1
 8021dd0:	2300      	movs	r3, #0
 8021dd2:	f80a 3007 	strb.w	r3, [sl, r7]
 8021dd6:	e046      	b.n	8021e66 <mg_dns_parse_name_depth+0xc4>
      size_t ptr = (((n & 0x3f) << 8) | s[ofs + i + 1]);  // 12 is hdr len
 8021dd8:	0222      	lsls	r2, r4, #8
 8021dda:	f402 527c 	and.w	r2, r2, #16128	@ 0x3f00
 8021dde:	f819 3001 	ldrb.w	r3, [r9, r1]
 8021de2:	431a      	orrs	r2, r3
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8021de4:	1c53      	adds	r3, r2, #1
 8021de6:	4543      	cmp	r3, r8
 8021de8:	d203      	bcs.n	8021df2 <mg_dns_parse_name_depth+0x50>
 8021dea:	f819 3002 	ldrb.w	r3, [r9, r2]
 8021dee:	2b3f      	cmp	r3, #63	@ 0x3f
 8021df0:	d901      	bls.n	8021df6 <mg_dns_parse_name_depth+0x54>
      i += 2;
 8021df2:	3602      	adds	r6, #2
      break;
 8021df4:	e7e9      	b.n	8021dca <mg_dns_parse_name_depth+0x28>
          mg_dns_parse_name_depth(s, len, ptr, to, tolen, j, depth + 1) == 0)
 8021df6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021df8:	3301      	adds	r3, #1
 8021dfa:	9302      	str	r3, [sp, #8]
 8021dfc:	9501      	str	r5, [sp, #4]
 8021dfe:	9700      	str	r7, [sp, #0]
 8021e00:	4653      	mov	r3, sl
 8021e02:	4641      	mov	r1, r8
 8021e04:	4648      	mov	r0, r9
 8021e06:	f7ff ffcc 	bl	8021da2 <mg_dns_parse_name_depth>
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8021e0a:	2800      	cmp	r0, #0
 8021e0c:	d1f1      	bne.n	8021df2 <mg_dns_parse_name_depth+0x50>
        return 0;
 8021e0e:	4606      	mov	r6, r0
 8021e10:	e029      	b.n	8021e66 <mg_dns_parse_name_depth+0xc4>
 8021e12:	4628      	mov	r0, r5
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 8021e14:	1905      	adds	r5, r0, r4
 8021e16:	42bd      	cmp	r5, r7
 8021e18:	d31e      	bcc.n	8021e58 <mg_dns_parse_name_depth+0xb6>
    i += n + 1;
 8021e1a:	4426      	add	r6, r4
 8021e1c:	3601      	adds	r6, #1
    if (j < tolen) to[j] = '\0';  // Zero-terminate this chunk
 8021e1e:	42bd      	cmp	r5, r7
 8021e20:	d202      	bcs.n	8021e28 <mg_dns_parse_name_depth+0x86>
 8021e22:	2300      	movs	r3, #0
 8021e24:	f80a 3005 	strb.w	r3, [sl, r5]
  while (ofs + i + 1 < len) {
 8021e28:	eb06 030b 	add.w	r3, r6, fp
 8021e2c:	1c59      	adds	r1, r3, #1
 8021e2e:	4541      	cmp	r1, r8
 8021e30:	d2cb      	bcs.n	8021dca <mg_dns_parse_name_depth+0x28>
    size_t n = s[ofs + i];
 8021e32:	f819 4003 	ldrb.w	r4, [r9, r3]
    if (n == 0) {
 8021e36:	2c00      	cmp	r4, #0
 8021e38:	d0c6      	beq.n	8021dc8 <mg_dns_parse_name_depth+0x26>
    if (n & 0xc0) {
 8021e3a:	2c3f      	cmp	r4, #63	@ 0x3f
 8021e3c:	d8cc      	bhi.n	8021dd8 <mg_dns_parse_name_depth+0x36>
    if (ofs + i + n + 1 >= len) return 0;
 8021e3e:	4423      	add	r3, r4
 8021e40:	3301      	adds	r3, #1
 8021e42:	4543      	cmp	r3, r8
 8021e44:	d213      	bcs.n	8021e6e <mg_dns_parse_name_depth+0xcc>
    if (j > 0) {
 8021e46:	2d00      	cmp	r5, #0
 8021e48:	d0e3      	beq.n	8021e12 <mg_dns_parse_name_depth+0x70>
      if (j < tolen) to[j] = '.';
 8021e4a:	42bd      	cmp	r5, r7
 8021e4c:	d202      	bcs.n	8021e54 <mg_dns_parse_name_depth+0xb2>
 8021e4e:	232e      	movs	r3, #46	@ 0x2e
 8021e50:	f80a 3005 	strb.w	r3, [sl, r5]
      j++;
 8021e54:	1c68      	adds	r0, r5, #1
 8021e56:	e7dd      	b.n	8021e14 <mg_dns_parse_name_depth+0x72>
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 8021e58:	4622      	mov	r2, r4
 8021e5a:	4449      	add	r1, r9
 8021e5c:	4450      	add	r0, sl
 8021e5e:	f00c fb3b 	bl	802e4d8 <memcpy>
 8021e62:	e7da      	b.n	8021e1a <mg_dns_parse_name_depth+0x78>
  if (depth > 5) return 0;
 8021e64:	2600      	movs	r6, #0
}
 8021e66:	4630      	mov	r0, r6
 8021e68:	b005      	add	sp, #20
 8021e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ofs + i + n + 1 >= len) return 0;
 8021e6e:	2600      	movs	r6, #0
 8021e70:	e7f9      	b.n	8021e66 <mg_dns_parse_name_depth+0xc4>

08021e72 <mg_dns_parse_name>:
                                char *dst, size_t dstlen) {
 8021e72:	b510      	push	{r4, lr}
 8021e74:	b084      	sub	sp, #16
  return mg_dns_parse_name_depth(s, n, ofs, dst, dstlen, 0, 0);
 8021e76:	2400      	movs	r4, #0
 8021e78:	9402      	str	r4, [sp, #8]
 8021e7a:	9401      	str	r4, [sp, #4]
 8021e7c:	9c06      	ldr	r4, [sp, #24]
 8021e7e:	9400      	str	r4, [sp, #0]
 8021e80:	f7ff ff8f 	bl	8021da2 <mg_dns_parse_name_depth>
}
 8021e84:	b004      	add	sp, #16
 8021e86:	bd10      	pop	{r4, pc}

08021e88 <mg_sha1_transform>:
                              const unsigned char *buffer) {
 8021e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e8c:	b09f      	sub	sp, #124	@ 0x7c
 8021e8e:	900d      	str	r0, [sp, #52]	@ 0x34
  memcpy(block, buffer, 64);
 8021e90:	460c      	mov	r4, r1
 8021e92:	af0e      	add	r7, sp, #56	@ 0x38
 8021e94:	f101 0540 	add.w	r5, r1, #64	@ 0x40
 8021e98:	463e      	mov	r6, r7
 8021e9a:	6820      	ldr	r0, [r4, #0]
 8021e9c:	6861      	ldr	r1, [r4, #4]
 8021e9e:	68a2      	ldr	r2, [r4, #8]
 8021ea0:	68e3      	ldr	r3, [r4, #12]
 8021ea2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8021ea4:	3410      	adds	r4, #16
 8021ea6:	4637      	mov	r7, r6
 8021ea8:	42ac      	cmp	r4, r5
 8021eaa:	d1f5      	bne.n	8021e98 <mg_sha1_transform+0x10>
  a = state[0];
 8021eac:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8021eae:	6805      	ldr	r5, [r0, #0]
  b = state[1];
 8021eb0:	6847      	ldr	r7, [r0, #4]
  c = state[2];
 8021eb2:	6884      	ldr	r4, [r0, #8]
  d = state[3];
 8021eb4:	f8d0 800c 	ldr.w	r8, [r0, #12]
  e = state[4];
 8021eb8:	f8d0 9010 	ldr.w	r9, [r0, #16]
  R0(a, b, c, d, e, 0);
 8021ebc:	ea84 0608 	eor.w	r6, r4, r8
 8021ec0:	403e      	ands	r6, r7
 8021ec2:	ea86 0608 	eor.w	r6, r6, r8
 8021ec6:	2100      	movs	r1, #0
 8021ec8:	a80e      	add	r0, sp, #56	@ 0x38
 8021eca:	f7ff fd79 	bl	80219c0 <blk0>
 8021ece:	1833      	adds	r3, r6, r0
 8021ed0:	eb03 63f5 	add.w	r3, r3, r5, ror #27
 8021ed4:	4ee4      	ldr	r6, [pc, #912]	@ (8022268 <mg_sha1_transform+0x3e0>)
 8021ed6:	4433      	add	r3, r6
 8021ed8:	4499      	add	r9, r3
 8021eda:	ea4f 0ab7 	mov.w	sl, r7, ror #2
  R0(e, a, b, c, d, 1);
 8021ede:	ea84 07b7 	eor.w	r7, r4, r7, ror #2
 8021ee2:	402f      	ands	r7, r5
 8021ee4:	4067      	eors	r7, r4
 8021ee6:	2101      	movs	r1, #1
 8021ee8:	a80e      	add	r0, sp, #56	@ 0x38
 8021eea:	f7ff fd69 	bl	80219c0 <blk0>
 8021eee:	4407      	add	r7, r0
 8021ef0:	eb07 67f9 	add.w	r7, r7, r9, ror #27
 8021ef4:	4437      	add	r7, r6
 8021ef6:	4447      	add	r7, r8
 8021ef8:	ea4f 08b5 	mov.w	r8, r5, ror #2
  R0(d, e, a, b, c, 2);
 8021efc:	ea8a 05b5 	eor.w	r5, sl, r5, ror #2
 8021f00:	ea05 0509 	and.w	r5, r5, r9
 8021f04:	ea85 050a 	eor.w	r5, r5, sl
 8021f08:	2102      	movs	r1, #2
 8021f0a:	a80e      	add	r0, sp, #56	@ 0x38
 8021f0c:	f7ff fd58 	bl	80219c0 <blk0>
 8021f10:	4405      	add	r5, r0
 8021f12:	eb05 65f7 	add.w	r5, r5, r7, ror #27
 8021f16:	4435      	add	r5, r6
 8021f18:	442c      	add	r4, r5
 8021f1a:	ea4f 05b9 	mov.w	r5, r9, ror #2
  R0(c, d, e, a, b, 3);
 8021f1e:	ea88 09b9 	eor.w	r9, r8, r9, ror #2
 8021f22:	ea09 0907 	and.w	r9, r9, r7
 8021f26:	ea89 0908 	eor.w	r9, r9, r8
 8021f2a:	2103      	movs	r1, #3
 8021f2c:	a80e      	add	r0, sp, #56	@ 0x38
 8021f2e:	f7ff fd47 	bl	80219c0 <blk0>
 8021f32:	4481      	add	r9, r0
 8021f34:	eb09 69f4 	add.w	r9, r9, r4, ror #27
 8021f38:	44b1      	add	r9, r6
 8021f3a:	44ca      	add	sl, r9
 8021f3c:	ea4f 09b7 	mov.w	r9, r7, ror #2
  R0(b, c, d, e, a, 4);
 8021f40:	ea85 07b7 	eor.w	r7, r5, r7, ror #2
 8021f44:	4027      	ands	r7, r4
 8021f46:	406f      	eors	r7, r5
 8021f48:	2104      	movs	r1, #4
 8021f4a:	a80e      	add	r0, sp, #56	@ 0x38
 8021f4c:	f7ff fd38 	bl	80219c0 <blk0>
 8021f50:	4407      	add	r7, r0
 8021f52:	eb07 67fa 	add.w	r7, r7, sl, ror #27
 8021f56:	4437      	add	r7, r6
 8021f58:	44b8      	add	r8, r7
 8021f5a:	ea4f 07b4 	mov.w	r7, r4, ror #2
  R0(a, b, c, d, e, 5);
 8021f5e:	ea89 04b4 	eor.w	r4, r9, r4, ror #2
 8021f62:	ea04 040a 	and.w	r4, r4, sl
 8021f66:	ea84 0409 	eor.w	r4, r4, r9
 8021f6a:	2105      	movs	r1, #5
 8021f6c:	a80e      	add	r0, sp, #56	@ 0x38
 8021f6e:	f7ff fd27 	bl	80219c0 <blk0>
 8021f72:	4404      	add	r4, r0
 8021f74:	eb04 64f8 	add.w	r4, r4, r8, ror #27
 8021f78:	4434      	add	r4, r6
 8021f7a:	4425      	add	r5, r4
 8021f7c:	ea4f 04ba 	mov.w	r4, sl, ror #2
  R0(e, a, b, c, d, 6);
 8021f80:	ea87 0aba 	eor.w	sl, r7, sl, ror #2
 8021f84:	ea0a 0a08 	and.w	sl, sl, r8
 8021f88:	ea8a 0a07 	eor.w	sl, sl, r7
 8021f8c:	2106      	movs	r1, #6
 8021f8e:	a80e      	add	r0, sp, #56	@ 0x38
 8021f90:	f7ff fd16 	bl	80219c0 <blk0>
 8021f94:	4482      	add	sl, r0
 8021f96:	eb0a 6af5 	add.w	sl, sl, r5, ror #27
 8021f9a:	44b2      	add	sl, r6
 8021f9c:	44d1      	add	r9, sl
 8021f9e:	ea4f 0ab8 	mov.w	sl, r8, ror #2
  R0(d, e, a, b, c, 7);
 8021fa2:	ea84 08b8 	eor.w	r8, r4, r8, ror #2
 8021fa6:	ea08 0805 	and.w	r8, r8, r5
 8021faa:	ea88 0804 	eor.w	r8, r8, r4
 8021fae:	2107      	movs	r1, #7
 8021fb0:	a80e      	add	r0, sp, #56	@ 0x38
 8021fb2:	f7ff fd05 	bl	80219c0 <blk0>
 8021fb6:	4480      	add	r8, r0
 8021fb8:	eb08 68f9 	add.w	r8, r8, r9, ror #27
 8021fbc:	44b0      	add	r8, r6
 8021fbe:	4447      	add	r7, r8
 8021fc0:	ea4f 08b5 	mov.w	r8, r5, ror #2
  R0(c, d, e, a, b, 8);
 8021fc4:	ea8a 05b5 	eor.w	r5, sl, r5, ror #2
 8021fc8:	ea05 0509 	and.w	r5, r5, r9
 8021fcc:	ea85 050a 	eor.w	r5, r5, sl
 8021fd0:	2108      	movs	r1, #8
 8021fd2:	a80e      	add	r0, sp, #56	@ 0x38
 8021fd4:	f7ff fcf4 	bl	80219c0 <blk0>
 8021fd8:	4405      	add	r5, r0
 8021fda:	eb05 65f7 	add.w	r5, r5, r7, ror #27
 8021fde:	4435      	add	r5, r6
 8021fe0:	442c      	add	r4, r5
 8021fe2:	ea4f 05b9 	mov.w	r5, r9, ror #2
  R0(b, c, d, e, a, 9);
 8021fe6:	ea88 09b9 	eor.w	r9, r8, r9, ror #2
 8021fea:	ea09 0907 	and.w	r9, r9, r7
 8021fee:	ea89 0908 	eor.w	r9, r9, r8
 8021ff2:	2109      	movs	r1, #9
 8021ff4:	a80e      	add	r0, sp, #56	@ 0x38
 8021ff6:	f7ff fce3 	bl	80219c0 <blk0>
 8021ffa:	4481      	add	r9, r0
 8021ffc:	eb09 69f4 	add.w	r9, r9, r4, ror #27
 8022000:	44b1      	add	r9, r6
 8022002:	44ca      	add	sl, r9
 8022004:	ea4f 09b7 	mov.w	r9, r7, ror #2
  R0(a, b, c, d, e, 10);
 8022008:	ea85 07b7 	eor.w	r7, r5, r7, ror #2
 802200c:	4027      	ands	r7, r4
 802200e:	406f      	eors	r7, r5
 8022010:	210a      	movs	r1, #10
 8022012:	a80e      	add	r0, sp, #56	@ 0x38
 8022014:	f7ff fcd4 	bl	80219c0 <blk0>
 8022018:	4407      	add	r7, r0
 802201a:	eb07 67fa 	add.w	r7, r7, sl, ror #27
 802201e:	4437      	add	r7, r6
 8022020:	44b8      	add	r8, r7
 8022022:	ea4f 07b4 	mov.w	r7, r4, ror #2
  R0(e, a, b, c, d, 11);
 8022026:	ea89 04b4 	eor.w	r4, r9, r4, ror #2
 802202a:	ea04 040a 	and.w	r4, r4, sl
 802202e:	ea84 0409 	eor.w	r4, r4, r9
 8022032:	210b      	movs	r1, #11
 8022034:	a80e      	add	r0, sp, #56	@ 0x38
 8022036:	f7ff fcc3 	bl	80219c0 <blk0>
 802203a:	4404      	add	r4, r0
 802203c:	eb04 64f8 	add.w	r4, r4, r8, ror #27
 8022040:	4434      	add	r4, r6
 8022042:	4425      	add	r5, r4
 8022044:	ea4f 04ba 	mov.w	r4, sl, ror #2
  R0(d, e, a, b, c, 12);
 8022048:	ea87 0aba 	eor.w	sl, r7, sl, ror #2
 802204c:	ea0a 0a08 	and.w	sl, sl, r8
 8022050:	ea8a 0a07 	eor.w	sl, sl, r7
 8022054:	210c      	movs	r1, #12
 8022056:	a80e      	add	r0, sp, #56	@ 0x38
 8022058:	f7ff fcb2 	bl	80219c0 <blk0>
 802205c:	4482      	add	sl, r0
 802205e:	eb0a 6af5 	add.w	sl, sl, r5, ror #27
 8022062:	44b2      	add	sl, r6
 8022064:	44d1      	add	r9, sl
 8022066:	ea4f 0ab8 	mov.w	sl, r8, ror #2
  R0(c, d, e, a, b, 13);
 802206a:	ea84 08b8 	eor.w	r8, r4, r8, ror #2
 802206e:	ea08 0805 	and.w	r8, r8, r5
 8022072:	ea88 0804 	eor.w	r8, r8, r4
 8022076:	210d      	movs	r1, #13
 8022078:	a80e      	add	r0, sp, #56	@ 0x38
 802207a:	f7ff fca1 	bl	80219c0 <blk0>
 802207e:	4480      	add	r8, r0
 8022080:	eb08 68f9 	add.w	r8, r8, r9, ror #27
 8022084:	44b0      	add	r8, r6
 8022086:	4447      	add	r7, r8
 8022088:	ea4f 08b5 	mov.w	r8, r5, ror #2
  R0(b, c, d, e, a, 14);
 802208c:	ea8a 05b5 	eor.w	r5, sl, r5, ror #2
 8022090:	ea05 0509 	and.w	r5, r5, r9
 8022094:	ea85 050a 	eor.w	r5, r5, sl
 8022098:	210e      	movs	r1, #14
 802209a:	a80e      	add	r0, sp, #56	@ 0x38
 802209c:	f7ff fc90 	bl	80219c0 <blk0>
 80220a0:	4405      	add	r5, r0
 80220a2:	eb05 65f7 	add.w	r5, r5, r7, ror #27
 80220a6:	4435      	add	r5, r6
 80220a8:	442c      	add	r4, r5
 80220aa:	ea4f 05b9 	mov.w	r5, r9, ror #2
  R0(a, b, c, d, e, 15);
 80220ae:	ea88 09b9 	eor.w	r9, r8, r9, ror #2
 80220b2:	ea09 0907 	and.w	r9, r9, r7
 80220b6:	ea89 0908 	eor.w	r9, r9, r8
 80220ba:	210f      	movs	r1, #15
 80220bc:	a80e      	add	r0, sp, #56	@ 0x38
 80220be:	f7ff fc7f 	bl	80219c0 <blk0>
 80220c2:	4481      	add	r9, r0
 80220c4:	eb09 69f4 	add.w	r9, r9, r4, ror #27
 80220c8:	44b1      	add	r9, r6
 80220ca:	eb0a 0109 	add.w	r1, sl, r9
  R1(e, a, b, c, d, 16);
 80220ce:	ea85 03b7 	eor.w	r3, r5, r7, ror #2
 80220d2:	4023      	ands	r3, r4
 80220d4:	ea83 0205 	eor.w	r2, r3, r5
 80220d8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80220da:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80220dc:	4043      	eors	r3, r0
 80220de:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80220e0:	ea83 0c00 	eor.w	ip, r3, r0
 80220e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80220e6:	ea8c 0303 	eor.w	r3, ip, r3
 80220ea:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80220ee:	930e      	str	r3, [sp, #56]	@ 0x38
 80220f0:	9300      	str	r3, [sp, #0]
 80220f2:	18d3      	adds	r3, r2, r3
 80220f4:	eb03 63f1 	add.w	r3, r3, r1, ror #27
 80220f8:	4433      	add	r3, r6
 80220fa:	eb08 0203 	add.w	r2, r8, r3
 80220fe:	ea4f 08b4 	mov.w	r8, r4, ror #2
  R1(d, e, a, b, c, 17);
 8022102:	ea88 0cb7 	eor.w	ip, r8, r7, ror #2
 8022106:	ea0c 0c01 	and.w	ip, ip, r1
 802210a:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
 802210e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8022110:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8022112:	ea83 0e04 	eor.w	lr, r3, r4
 8022116:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 802211a:	ea8e 0e09 	eor.w	lr, lr, r9
 802211e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022120:	ea8e 0e03 	eor.w	lr, lr, r3
 8022124:	ea4f 74fe 	mov.w	r4, lr, ror #31
 8022128:	940f      	str	r4, [sp, #60]	@ 0x3c
 802212a:	9401      	str	r4, [sp, #4]
 802212c:	44a4      	add	ip, r4
 802212e:	eb0c 6cf2 	add.w	ip, ip, r2, ror #27
 8022132:	44b4      	add	ip, r6
 8022134:	44ac      	add	ip, r5
  R1(c, d, e, a, b, 18);
 8022136:	ea88 05b1 	eor.w	r5, r8, r1, ror #2
 802213a:	4015      	ands	r5, r2
 802213c:	ea85 0508 	eor.w	r5, r5, r8
 8022140:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
 8022142:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8022144:	ea84 0e03 	eor.w	lr, r4, r3
 8022148:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802214a:	ea8e 0e03 	eor.w	lr, lr, r3
 802214e:	ea80 000e 	eor.w	r0, r0, lr
 8022152:	ea4f 70f0 	mov.w	r0, r0, ror #31
 8022156:	9010      	str	r0, [sp, #64]	@ 0x40
 8022158:	9002      	str	r0, [sp, #8]
 802215a:	4405      	add	r5, r0
 802215c:	eb05 65fc 	add.w	r5, r5, ip, ror #27
 8022160:	4435      	add	r5, r6
 8022162:	eb05 05b7 	add.w	r5, r5, r7, ror #2
 8022166:	ea4f 02b2 	mov.w	r2, r2, ror #2
  R1(b, c, d, e, a, 19);
 802216a:	ea82 00b1 	eor.w	r0, r2, r1, ror #2
 802216e:	ea00 000c 	and.w	r0, r0, ip
 8022172:	ea80 00b1 	eor.w	r0, r0, r1, ror #2
 8022176:	9f00      	ldr	r7, [sp, #0]
 8022178:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 802217a:	4067      	eors	r7, r4
 802217c:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 8022180:	ea87 070e 	eor.w	r7, r7, lr
 8022184:	ea89 0907 	eor.w	r9, r9, r7
 8022188:	ea4f 79f9 	mov.w	r9, r9, ror #31
 802218c:	f8cd 9044 	str.w	r9, [sp, #68]	@ 0x44
 8022190:	4448      	add	r0, r9
 8022192:	eb00 60f5 	add.w	r0, r0, r5, ror #27
 8022196:	4430      	add	r0, r6
 8022198:	eb08 0400 	add.w	r4, r8, r0
  R2(a, b, c, d, e, 20);
 802219c:	ea85 00bc 	eor.w	r0, r5, ip, ror #2
 80221a0:	4050      	eors	r0, r2
 80221a2:	9e01      	ldr	r6, [sp, #4]
 80221a4:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80221a6:	ea86 0807 	eor.w	r8, r6, r7
 80221aa:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 80221ae:	ea88 080a 	eor.w	r8, r8, sl
 80221b2:	ea83 0808 	eor.w	r8, r3, r8
 80221b6:	ea4f 78f8 	mov.w	r8, r8, ror #31
 80221ba:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80221be:	4440      	add	r0, r8
 80221c0:	eb00 60f4 	add.w	r0, r0, r4, ror #27
 80221c4:	4b29      	ldr	r3, [pc, #164]	@ (802226c <mg_sha1_transform+0x3e4>)
 80221c6:	4418      	add	r0, r3
 80221c8:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R2(e, a, b, c, d, 21);
 80221cc:	ea84 01b5 	eor.w	r1, r4, r5, ror #2
 80221d0:	ea81 01bc 	eor.w	r1, r1, ip, ror #2
 80221d4:	9e1b      	ldr	r6, [sp, #108]	@ 0x6c
 80221d6:	9f02      	ldr	r7, [sp, #8]
 80221d8:	4077      	eors	r7, r6
 80221da:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80221dc:	4077      	eors	r7, r6
 80221de:	ea8e 0707 	eor.w	r7, lr, r7
 80221e2:	ea4f 77f7 	mov.w	r7, r7, ror #31
 80221e6:	9713      	str	r7, [sp, #76]	@ 0x4c
 80221e8:	9703      	str	r7, [sp, #12]
 80221ea:	4439      	add	r1, r7
 80221ec:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 80221f0:	4419      	add	r1, r3
 80221f2:	440a      	add	r2, r1
  R2(d, e, a, b, c, 22);
 80221f4:	ea80 01b4 	eor.w	r1, r0, r4, ror #2
 80221f8:	ea81 01b5 	eor.w	r1, r1, r5, ror #2
 80221fc:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 80221fe:	ea87 0e09 	eor.w	lr, r7, r9
 8022202:	9f16      	ldr	r7, [sp, #88]	@ 0x58
 8022204:	ea87 0e0e 	eor.w	lr, r7, lr
 8022208:	ea8a 0e0e 	eor.w	lr, sl, lr
 802220c:	ea4f 7efe 	mov.w	lr, lr, ror #31
 8022210:	f8cd e050 	str.w	lr, [sp, #80]	@ 0x50
 8022214:	4471      	add	r1, lr
 8022216:	eb01 61f2 	add.w	r1, r1, r2, ror #27
 802221a:	4419      	add	r1, r3
 802221c:	eb01 01bc 	add.w	r1, r1, ip, ror #2
  R2(c, d, e, a, b, 23);
 8022220:	ea82 0bb0 	eor.w	fp, r2, r0, ror #2
 8022224:	ea8b 0bb4 	eor.w	fp, fp, r4, ror #2
 8022228:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 802222a:	ea87 0c08 	eor.w	ip, r7, r8
 802222e:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8022230:	ea87 0c0c 	eor.w	ip, r7, ip
 8022234:	ea86 0c0c 	eor.w	ip, r6, ip
 8022238:	ea4f 7cfc 	mov.w	ip, ip, ror #31
 802223c:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 8022240:	44e3      	add	fp, ip
 8022242:	eb0b 6bf1 	add.w	fp, fp, r1, ror #27
 8022246:	449b      	add	fp, r3
 8022248:	eb0b 0bb5 	add.w	fp, fp, r5, ror #2
  R2(b, c, d, e, a, 24);
 802224c:	ea81 0ab2 	eor.w	sl, r1, r2, ror #2
 8022250:	ea8a 0ab0 	eor.w	sl, sl, r0, ror #2
 8022254:	9d00      	ldr	r5, [sp, #0]
 8022256:	9e03      	ldr	r6, [sp, #12]
 8022258:	406e      	eors	r6, r5
 802225a:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 802225c:	406e      	eors	r6, r5
 802225e:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8022260:	406e      	eors	r6, r5
 8022262:	ea4f 77f6 	mov.w	r7, r6, ror #31
 8022266:	e003      	b.n	8022270 <mg_sha1_transform+0x3e8>
 8022268:	5a827999 	.word	0x5a827999
 802226c:	6ed9eba1 	.word	0x6ed9eba1
 8022270:	9716      	str	r7, [sp, #88]	@ 0x58
 8022272:	9704      	str	r7, [sp, #16]
 8022274:	44ba      	add	sl, r7
 8022276:	eb0a 6afb 	add.w	sl, sl, fp, ror #27
 802227a:	449a      	add	sl, r3
 802227c:	eb0a 0ab4 	add.w	sl, sl, r4, ror #2
  R2(a, b, c, d, e, 25);
 8022280:	ea8b 05b1 	eor.w	r5, fp, r1, ror #2
 8022284:	ea85 05b2 	eor.w	r5, r5, r2, ror #2
 8022288:	9e01      	ldr	r6, [sp, #4]
 802228a:	ea86 040e 	eor.w	r4, r6, lr
 802228e:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 8022290:	407c      	eors	r4, r7
 8022292:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8022294:	407c      	eors	r4, r7
 8022296:	ea4f 74f4 	mov.w	r4, r4, ror #31
 802229a:	9417      	str	r4, [sp, #92]	@ 0x5c
 802229c:	9405      	str	r4, [sp, #20]
 802229e:	4425      	add	r5, r4
 80222a0:	eb05 65fa 	add.w	r5, r5, sl, ror #27
 80222a4:	441d      	add	r5, r3
 80222a6:	eb05 05b0 	add.w	r5, r5, r0, ror #2
  R2(e, a, b, c, d, 26);
 80222aa:	ea8a 04bb 	eor.w	r4, sl, fp, ror #2
 80222ae:	ea84 04b1 	eor.w	r4, r4, r1, ror #2
 80222b2:	9e02      	ldr	r6, [sp, #8]
 80222b4:	ea86 000c 	eor.w	r0, r6, ip
 80222b8:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80222ba:	4078      	eors	r0, r7
 80222bc:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 80222be:	4078      	eors	r0, r7
 80222c0:	ea4f 70f0 	mov.w	r0, r0, ror #31
 80222c4:	4606      	mov	r6, r0
 80222c6:	9018      	str	r0, [sp, #96]	@ 0x60
 80222c8:	4404      	add	r4, r0
 80222ca:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 80222ce:	441c      	add	r4, r3
 80222d0:	eb04 04b2 	add.w	r4, r4, r2, ror #2
  R2(d, e, a, b, c, 27);
 80222d4:	ea85 00ba 	eor.w	r0, r5, sl, ror #2
 80222d8:	ea80 00bb 	eor.w	r0, r0, fp, ror #2
 80222dc:	9f04      	ldr	r7, [sp, #16]
 80222de:	ea89 0207 	eor.w	r2, r9, r7
 80222e2:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 80222e4:	407a      	eors	r2, r7
 80222e6:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 80222e8:	407a      	eors	r2, r7
 80222ea:	ea4f 72f2 	mov.w	r2, r2, ror #31
 80222ee:	9219      	str	r2, [sp, #100]	@ 0x64
 80222f0:	9206      	str	r2, [sp, #24]
 80222f2:	4410      	add	r0, r2
 80222f4:	eb00 60f4 	add.w	r0, r0, r4, ror #27
 80222f8:	4418      	add	r0, r3
 80222fa:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R2(c, d, e, a, b, 28);
 80222fe:	ea84 01b5 	eor.w	r1, r4, r5, ror #2
 8022302:	ea81 01ba 	eor.w	r1, r1, sl, ror #2
 8022306:	9a05      	ldr	r2, [sp, #20]
 8022308:	ea88 0202 	eor.w	r2, r8, r2
 802230c:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 802230e:	407a      	eors	r2, r7
 8022310:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8022312:	407a      	eors	r2, r7
 8022314:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8022318:	921a      	str	r2, [sp, #104]	@ 0x68
 802231a:	9207      	str	r2, [sp, #28]
 802231c:	4411      	add	r1, r2
 802231e:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 8022322:	4419      	add	r1, r3
 8022324:	eb01 01bb 	add.w	r1, r1, fp, ror #2
  R2(b, c, d, e, a, 29);
 8022328:	ea80 02b4 	eor.w	r2, r0, r4, ror #2
 802232c:	ea82 02b5 	eor.w	r2, r2, r5, ror #2
 8022330:	960b      	str	r6, [sp, #44]	@ 0x2c
 8022332:	9f03      	ldr	r7, [sp, #12]
 8022334:	ea87 0b06 	eor.w	fp, r7, r6
 8022338:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 802233a:	ea87 0b0b 	eor.w	fp, r7, fp
 802233e:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 8022340:	ea87 0b0b 	eor.w	fp, r7, fp
 8022344:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8022348:	f8cd b06c 	str.w	fp, [sp, #108]	@ 0x6c
 802234c:	f8cd b020 	str.w	fp, [sp, #32]
 8022350:	445a      	add	r2, fp
 8022352:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8022356:	441a      	add	r2, r3
 8022358:	eb02 02ba 	add.w	r2, r2, sl, ror #2
  R2(a, b, c, d, e, 30);
 802235c:	ea81 0ab0 	eor.w	sl, r1, r0, ror #2
 8022360:	ea8a 0ab4 	eor.w	sl, sl, r4, ror #2
 8022364:	9e06      	ldr	r6, [sp, #24]
 8022366:	ea8e 0b06 	eor.w	fp, lr, r6
 802236a:	9e00      	ldr	r6, [sp, #0]
 802236c:	ea86 0b0b 	eor.w	fp, r6, fp
 8022370:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 8022372:	ea87 0b0b 	eor.w	fp, r7, fp
 8022376:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 802237a:	f8cd b070 	str.w	fp, [sp, #112]	@ 0x70
 802237e:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8022382:	44da      	add	sl, fp
 8022384:	eb0a 6af2 	add.w	sl, sl, r2, ror #27
 8022388:	449a      	add	sl, r3
 802238a:	eb0a 0ab5 	add.w	sl, sl, r5, ror #2
  R2(e, a, b, c, d, 31);
 802238e:	ea82 05b1 	eor.w	r5, r2, r1, ror #2
 8022392:	ea85 05b0 	eor.w	r5, r5, r0, ror #2
 8022396:	9e07      	ldr	r6, [sp, #28]
 8022398:	ea8c 0b06 	eor.w	fp, ip, r6
 802239c:	9e01      	ldr	r6, [sp, #4]
 802239e:	ea86 0b0b 	eor.w	fp, r6, fp
 80223a2:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 80223a4:	ea87 0b0b 	eor.w	fp, r7, fp
 80223a8:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 80223ac:	f8cd b074 	str.w	fp, [sp, #116]	@ 0x74
 80223b0:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80223b4:	445d      	add	r5, fp
 80223b6:	eb05 65fa 	add.w	r5, r5, sl, ror #27
 80223ba:	441d      	add	r5, r3
 80223bc:	eb05 05b4 	add.w	r5, r5, r4, ror #2
  R2(d, e, a, b, c, 32);
 80223c0:	ea8a 04b2 	eor.w	r4, sl, r2, ror #2
 80223c4:	ea84 04b1 	eor.w	r4, r4, r1, ror #2
 80223c8:	9e08      	ldr	r6, [sp, #32]
 80223ca:	9f04      	ldr	r7, [sp, #16]
 80223cc:	ea87 0b06 	eor.w	fp, r7, r6
 80223d0:	9e02      	ldr	r6, [sp, #8]
 80223d2:	ea86 0b0b 	eor.w	fp, r6, fp
 80223d6:	9e00      	ldr	r6, [sp, #0]
 80223d8:	ea86 0b0b 	eor.w	fp, r6, fp
 80223dc:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 80223e0:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80223e4:	f8cd b000 	str.w	fp, [sp]
 80223e8:	445c      	add	r4, fp
 80223ea:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 80223ee:	441c      	add	r4, r3
 80223f0:	eb04 04b0 	add.w	r4, r4, r0, ror #2
  R2(c, d, e, a, b, 33);
 80223f4:	ea85 00ba 	eor.w	r0, r5, sl, ror #2
 80223f8:	ea80 00b2 	eor.w	r0, r0, r2, ror #2
 80223fc:	9e05      	ldr	r6, [sp, #20]
 80223fe:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8022400:	ea86 0b07 	eor.w	fp, r6, r7
 8022404:	ea89 0b0b 	eor.w	fp, r9, fp
 8022408:	9e01      	ldr	r6, [sp, #4]
 802240a:	ea86 0b0b 	eor.w	fp, r6, fp
 802240e:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8022412:	f8cd b03c 	str.w	fp, [sp, #60]	@ 0x3c
 8022416:	f8cd b004 	str.w	fp, [sp, #4]
 802241a:	4458      	add	r0, fp
 802241c:	eb00 60f4 	add.w	r0, r0, r4, ror #27
 8022420:	4418      	add	r0, r3
 8022422:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R2(b, c, d, e, a, 34);
 8022426:	ea84 01b5 	eor.w	r1, r4, r5, ror #2
 802242a:	ea81 01ba 	eor.w	r1, r1, sl, ror #2
 802242e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8022430:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8022432:	ea86 0b07 	eor.w	fp, r6, r7
 8022436:	ea88 0b0b 	eor.w	fp, r8, fp
 802243a:	9e02      	ldr	r6, [sp, #8]
 802243c:	ea86 0b0b 	eor.w	fp, r6, fp
 8022440:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8022444:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
 8022448:	f8cd b008 	str.w	fp, [sp, #8]
 802244c:	4459      	add	r1, fp
 802244e:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 8022452:	4419      	add	r1, r3
 8022454:	eb01 01b2 	add.w	r1, r1, r2, ror #2
  R2(a, b, c, d, e, 35);
 8022458:	ea80 02b4 	eor.w	r2, r0, r4, ror #2
 802245c:	ea82 02b5 	eor.w	r2, r2, r5, ror #2
 8022460:	9e06      	ldr	r6, [sp, #24]
 8022462:	9f00      	ldr	r7, [sp, #0]
 8022464:	ea86 0b07 	eor.w	fp, r6, r7
 8022468:	9e03      	ldr	r6, [sp, #12]
 802246a:	ea86 0b0b 	eor.w	fp, r6, fp
 802246e:	ea89 090b 	eor.w	r9, r9, fp
 8022472:	ea4f 7bf9 	mov.w	fp, r9, ror #31
 8022476:	f8cd b044 	str.w	fp, [sp, #68]	@ 0x44
 802247a:	445a      	add	r2, fp
 802247c:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8022480:	441a      	add	r2, r3
 8022482:	eb02 02ba 	add.w	r2, r2, sl, ror #2
  R2(e, a, b, c, d, 36);
 8022486:	ea81 09b0 	eor.w	r9, r1, r0, ror #2
 802248a:	ea89 09b4 	eor.w	r9, r9, r4, ror #2
 802248e:	9e07      	ldr	r6, [sp, #28]
 8022490:	9f01      	ldr	r7, [sp, #4]
 8022492:	ea86 0a07 	eor.w	sl, r6, r7
 8022496:	ea8e 0a0a 	eor.w	sl, lr, sl
 802249a:	ea88 080a 	eor.w	r8, r8, sl
 802249e:	ea4f 7af8 	mov.w	sl, r8, ror #31
 80224a2:	f8cd a048 	str.w	sl, [sp, #72]	@ 0x48
 80224a6:	44d1      	add	r9, sl
 80224a8:	eb09 69f2 	add.w	r9, r9, r2, ror #27
 80224ac:	4499      	add	r9, r3
 80224ae:	eb09 08b5 	add.w	r8, r9, r5, ror #2
  R2(d, e, a, b, c, 37);
 80224b2:	ea82 05b1 	eor.w	r5, r2, r1, ror #2
 80224b6:	ea85 05b0 	eor.w	r5, r5, r0, ror #2
 80224ba:	9e08      	ldr	r6, [sp, #32]
 80224bc:	9f02      	ldr	r7, [sp, #8]
 80224be:	ea86 0907 	eor.w	r9, r6, r7
 80224c2:	ea8c 0909 	eor.w	r9, ip, r9
 80224c6:	9e03      	ldr	r6, [sp, #12]
 80224c8:	ea86 0709 	eor.w	r7, r6, r9
 80224cc:	ea4f 79f7 	mov.w	r9, r7, ror #31
 80224d0:	f8cd 904c 	str.w	r9, [sp, #76]	@ 0x4c
 80224d4:	444d      	add	r5, r9
 80224d6:	eb05 65f8 	add.w	r5, r5, r8, ror #27
 80224da:	441d      	add	r5, r3
 80224dc:	eb05 05b4 	add.w	r5, r5, r4, ror #2
  R2(c, d, e, a, b, 38);
 80224e0:	ea88 04b2 	eor.w	r4, r8, r2, ror #2
 80224e4:	ea84 04b1 	eor.w	r4, r4, r1, ror #2
 80224e8:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80224ea:	ea87 070b 	eor.w	r7, r7, fp
 80224ee:	9e04      	ldr	r6, [sp, #16]
 80224f0:	4077      	eors	r7, r6
 80224f2:	ea8e 0e07 	eor.w	lr, lr, r7
 80224f6:	ea4f 7efe 	mov.w	lr, lr, ror #31
 80224fa:	f8cd e050 	str.w	lr, [sp, #80]	@ 0x50
 80224fe:	4474      	add	r4, lr
 8022500:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 8022504:	441c      	add	r4, r3
 8022506:	eb04 04b0 	add.w	r4, r4, r0, ror #2
  R2(b, c, d, e, a, 39);
 802250a:	ea85 00b8 	eor.w	r0, r5, r8, ror #2
 802250e:	ea80 00b2 	eor.w	r0, r0, r2, ror #2
 8022512:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8022514:	ea87 070a 	eor.w	r7, r7, sl
 8022518:	9e05      	ldr	r6, [sp, #20]
 802251a:	4077      	eors	r7, r6
 802251c:	ea8c 0c07 	eor.w	ip, ip, r7
 8022520:	ea4f 7cfc 	mov.w	ip, ip, ror #31
 8022524:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 8022528:	f8cd c00c 	str.w	ip, [sp, #12]
 802252c:	4460      	add	r0, ip
 802252e:	eb00 60f4 	add.w	r0, r0, r4, ror #27
 8022532:	4418      	add	r0, r3
 8022534:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R3(a, b, c, d, e, 40);
 8022538:	ea44 01b5 	orr.w	r1, r4, r5, ror #2
 802253c:	ea01 01b8 	and.w	r1, r1, r8, ror #2
 8022540:	ea04 03b5 	and.w	r3, r4, r5, ror #2
 8022544:	4319      	orrs	r1, r3
 8022546:	9b00      	ldr	r3, [sp, #0]
 8022548:	ea83 0309 	eor.w	r3, r3, r9
 802254c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 802254e:	4073      	eors	r3, r6
 8022550:	9e04      	ldr	r6, [sp, #16]
 8022552:	405e      	eors	r6, r3
 8022554:	ea4f 73f6 	mov.w	r3, r6, ror #31
 8022558:	9316      	str	r3, [sp, #88]	@ 0x58
 802255a:	9304      	str	r3, [sp, #16]
 802255c:	4419      	add	r1, r3
 802255e:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 8022562:	f101 410f 	add.w	r1, r1, #2399141888	@ 0x8f000000
 8022566:	f501 11dd 	add.w	r1, r1, #1810432	@ 0x1ba000
 802256a:	f501 51e6 	add.w	r1, r1, #7360	@ 0x1cc0
 802256e:	311c      	adds	r1, #28
 8022570:	eb01 01b2 	add.w	r1, r1, r2, ror #2
  R3(e, a, b, c, d, 41);
 8022574:	ea40 02b4 	orr.w	r2, r0, r4, ror #2
 8022578:	ea02 02b5 	and.w	r2, r2, r5, ror #2
 802257c:	ea00 06b4 	and.w	r6, r0, r4, ror #2
 8022580:	4332      	orrs	r2, r6
 8022582:	9b01      	ldr	r3, [sp, #4]
 8022584:	ea83 060e 	eor.w	r6, r3, lr
 8022588:	9b06      	ldr	r3, [sp, #24]
 802258a:	405e      	eors	r6, r3
 802258c:	9f05      	ldr	r7, [sp, #20]
 802258e:	407e      	eors	r6, r7
 8022590:	ea4f 77f6 	mov.w	r7, r6, ror #31
 8022594:	9717      	str	r7, [sp, #92]	@ 0x5c
 8022596:	9705      	str	r7, [sp, #20]
 8022598:	443a      	add	r2, r7
 802259a:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 802259e:	f102 420f 	add.w	r2, r2, #2399141888	@ 0x8f000000
 80225a2:	f502 12dd 	add.w	r2, r2, #1810432	@ 0x1ba000
 80225a6:	f502 52e6 	add.w	r2, r2, #7360	@ 0x1cc0
 80225aa:	321c      	adds	r2, #28
 80225ac:	eb02 02b8 	add.w	r2, r2, r8, ror #2
  R3(d, e, a, b, c, 42);
 80225b0:	ea41 06b0 	orr.w	r6, r1, r0, ror #2
 80225b4:	ea06 06b4 	and.w	r6, r6, r4, ror #2
 80225b8:	ea01 07b0 	and.w	r7, r1, r0, ror #2
 80225bc:	433e      	orrs	r6, r7
 80225be:	9f02      	ldr	r7, [sp, #8]
 80225c0:	4663      	mov	r3, ip
 80225c2:	405f      	eors	r7, r3
 80225c4:	9b07      	ldr	r3, [sp, #28]
 80225c6:	405f      	eors	r7, r3
 80225c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80225ca:	405f      	eors	r7, r3
 80225cc:	ea4f 77f7 	mov.w	r7, r7, ror #31
 80225d0:	9718      	str	r7, [sp, #96]	@ 0x60
 80225d2:	970b      	str	r7, [sp, #44]	@ 0x2c
 80225d4:	443e      	add	r6, r7
 80225d6:	eb06 66f2 	add.w	r6, r6, r2, ror #27
 80225da:	f106 460f 	add.w	r6, r6, #2399141888	@ 0x8f000000
 80225de:	f506 16dd 	add.w	r6, r6, #1810432	@ 0x1ba000
 80225e2:	f506 56e6 	add.w	r6, r6, #7360	@ 0x1cc0
 80225e6:	361c      	adds	r6, #28
 80225e8:	eb06 06b5 	add.w	r6, r6, r5, ror #2
  R3(c, d, e, a, b, 43);
 80225ec:	ea42 07b1 	orr.w	r7, r2, r1, ror #2
 80225f0:	ea07 07b0 	and.w	r7, r7, r0, ror #2
 80225f4:	ea02 05b1 	and.w	r5, r2, r1, ror #2
 80225f8:	432f      	orrs	r7, r5
 80225fa:	9d04      	ldr	r5, [sp, #16]
 80225fc:	ea8b 0505 	eor.w	r5, fp, r5
 8022600:	9b08      	ldr	r3, [sp, #32]
 8022602:	405d      	eors	r5, r3
 8022604:	9b06      	ldr	r3, [sp, #24]
 8022606:	405d      	eors	r5, r3
 8022608:	ea4f 75f5 	mov.w	r5, r5, ror #31
 802260c:	9519      	str	r5, [sp, #100]	@ 0x64
 802260e:	9506      	str	r5, [sp, #24]
 8022610:	442f      	add	r7, r5
 8022612:	eb07 67f6 	add.w	r7, r7, r6, ror #27
 8022616:	f107 470f 	add.w	r7, r7, #2399141888	@ 0x8f000000
 802261a:	f507 17dd 	add.w	r7, r7, #1810432	@ 0x1ba000
 802261e:	f507 57e6 	add.w	r7, r7, #7360	@ 0x1cc0
 8022622:	371c      	adds	r7, #28
 8022624:	eb07 07b4 	add.w	r7, r7, r4, ror #2
  R3(b, c, d, e, a, 44);
 8022628:	ea46 0cb2 	orr.w	ip, r6, r2, ror #2
 802262c:	ea0c 0cb1 	and.w	ip, ip, r1, ror #2
 8022630:	ea06 04b2 	and.w	r4, r6, r2, ror #2
 8022634:	ea4c 0c04 	orr.w	ip, ip, r4
 8022638:	9c05      	ldr	r4, [sp, #20]
 802263a:	ea8a 0404 	eor.w	r4, sl, r4
 802263e:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8022640:	406c      	eors	r4, r5
 8022642:	9b07      	ldr	r3, [sp, #28]
 8022644:	405c      	eors	r4, r3
 8022646:	ea4f 74f4 	mov.w	r4, r4, ror #31
 802264a:	941a      	str	r4, [sp, #104]	@ 0x68
 802264c:	9407      	str	r4, [sp, #28]
 802264e:	44a4      	add	ip, r4
 8022650:	eb0c 6cf7 	add.w	ip, ip, r7, ror #27
 8022654:	f10c 4c0f 	add.w	ip, ip, #2399141888	@ 0x8f000000
 8022658:	f50c 1cdd 	add.w	ip, ip, #1810432	@ 0x1ba000
 802265c:	f50c 5ce6 	add.w	ip, ip, #7360	@ 0x1cc0
 8022660:	f10c 0c1c 	add.w	ip, ip, #28
 8022664:	eb0c 0cb0 	add.w	ip, ip, r0, ror #2
  R3(a, b, c, d, e, 45);
 8022668:	ea47 00b6 	orr.w	r0, r7, r6, ror #2
 802266c:	ea00 00b2 	and.w	r0, r0, r2, ror #2
 8022670:	ea07 04b6 	and.w	r4, r7, r6, ror #2
 8022674:	4320      	orrs	r0, r4
 8022676:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8022678:	ea89 0404 	eor.w	r4, r9, r4
 802267c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802267e:	406c      	eors	r4, r5
 8022680:	9b08      	ldr	r3, [sp, #32]
 8022682:	405c      	eors	r4, r3
 8022684:	ea4f 74f4 	mov.w	r4, r4, ror #31
 8022688:	941b      	str	r4, [sp, #108]	@ 0x6c
 802268a:	9408      	str	r4, [sp, #32]
 802268c:	4420      	add	r0, r4
 802268e:	eb00 60fc 	add.w	r0, r0, ip, ror #27
 8022692:	f100 400f 	add.w	r0, r0, #2399141888	@ 0x8f000000
 8022696:	f500 10dd 	add.w	r0, r0, #1810432	@ 0x1ba000
 802269a:	f500 50e6 	add.w	r0, r0, #7360	@ 0x1cc0
 802269e:	301c      	adds	r0, #28
 80226a0:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R3(e, a, b, c, d, 46);
 80226a4:	ea4c 05b7 	orr.w	r5, ip, r7, ror #2
 80226a8:	ea05 05b6 	and.w	r5, r5, r6, ror #2
 80226ac:	ea0c 01b7 	and.w	r1, ip, r7, ror #2
 80226b0:	430d      	orrs	r5, r1
 80226b2:	9906      	ldr	r1, [sp, #24]
 80226b4:	ea8e 0101 	eor.w	r1, lr, r1
 80226b8:	9c00      	ldr	r4, [sp, #0]
 80226ba:	4061      	eors	r1, r4
 80226bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80226be:	4059      	eors	r1, r3
 80226c0:	ea4f 71f1 	mov.w	r1, r1, ror #31
 80226c4:	911c      	str	r1, [sp, #112]	@ 0x70
 80226c6:	9109      	str	r1, [sp, #36]	@ 0x24
 80226c8:	440d      	add	r5, r1
 80226ca:	eb05 65f0 	add.w	r5, r5, r0, ror #27
 80226ce:	f105 450f 	add.w	r5, r5, #2399141888	@ 0x8f000000
 80226d2:	f505 15dd 	add.w	r5, r5, #1810432	@ 0x1ba000
 80226d6:	f505 55e6 	add.w	r5, r5, #7360	@ 0x1cc0
 80226da:	351c      	adds	r5, #28
 80226dc:	eb05 05b2 	add.w	r5, r5, r2, ror #2
  R3(d, e, a, b, c, 47);
 80226e0:	ea40 04bc 	orr.w	r4, r0, ip, ror #2
 80226e4:	ea04 04b7 	and.w	r4, r4, r7, ror #2
 80226e8:	ea00 02bc 	and.w	r2, r0, ip, ror #2
 80226ec:	4314      	orrs	r4, r2
 80226ee:	9903      	ldr	r1, [sp, #12]
 80226f0:	9a07      	ldr	r2, [sp, #28]
 80226f2:	404a      	eors	r2, r1
 80226f4:	9901      	ldr	r1, [sp, #4]
 80226f6:	404a      	eors	r2, r1
 80226f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80226fa:	405a      	eors	r2, r3
 80226fc:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8022700:	921d      	str	r2, [sp, #116]	@ 0x74
 8022702:	920a      	str	r2, [sp, #40]	@ 0x28
 8022704:	4414      	add	r4, r2
 8022706:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 802270a:	f104 440f 	add.w	r4, r4, #2399141888	@ 0x8f000000
 802270e:	f504 14dd 	add.w	r4, r4, #1810432	@ 0x1ba000
 8022712:	f504 54e6 	add.w	r4, r4, #7360	@ 0x1cc0
 8022716:	341c      	adds	r4, #28
 8022718:	eb04 04b6 	add.w	r4, r4, r6, ror #2
  R3(c, d, e, a, b, 48);
 802271c:	ea45 01b0 	orr.w	r1, r5, r0, ror #2
 8022720:	ea01 01bc 	and.w	r1, r1, ip, ror #2
 8022724:	ea05 02b0 	and.w	r2, r5, r0, ror #2
 8022728:	4311      	orrs	r1, r2
 802272a:	9a04      	ldr	r2, [sp, #16]
 802272c:	9e08      	ldr	r6, [sp, #32]
 802272e:	4072      	eors	r2, r6
 8022730:	9e02      	ldr	r6, [sp, #8]
 8022732:	4072      	eors	r2, r6
 8022734:	9b00      	ldr	r3, [sp, #0]
 8022736:	405a      	eors	r2, r3
 8022738:	ea4f 76f2 	mov.w	r6, r2, ror #31
 802273c:	960e      	str	r6, [sp, #56]	@ 0x38
 802273e:	9600      	str	r6, [sp, #0]
 8022740:	4431      	add	r1, r6
 8022742:	eb01 61f4 	add.w	r1, r1, r4, ror #27
 8022746:	f101 410f 	add.w	r1, r1, #2399141888	@ 0x8f000000
 802274a:	f501 11dd 	add.w	r1, r1, #1810432	@ 0x1ba000
 802274e:	f501 51e6 	add.w	r1, r1, #7360	@ 0x1cc0
 8022752:	311c      	adds	r1, #28
 8022754:	eb01 01b7 	add.w	r1, r1, r7, ror #2
  R3(b, c, d, e, a, 49);
 8022758:	ea44 02b5 	orr.w	r2, r4, r5, ror #2
 802275c:	ea02 02b0 	and.w	r2, r2, r0, ror #2
 8022760:	ea04 06b5 	and.w	r6, r4, r5, ror #2
 8022764:	4332      	orrs	r2, r6
 8022766:	9f05      	ldr	r7, [sp, #20]
 8022768:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 802276a:	407e      	eors	r6, r7
 802276c:	ea8b 0606 	eor.w	r6, fp, r6
 8022770:	9b01      	ldr	r3, [sp, #4]
 8022772:	405e      	eors	r6, r3
 8022774:	ea4f 73f6 	mov.w	r3, r6, ror #31
 8022778:	930f      	str	r3, [sp, #60]	@ 0x3c
 802277a:	9301      	str	r3, [sp, #4]
 802277c:	441a      	add	r2, r3
 802277e:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8022782:	f102 420f 	add.w	r2, r2, #2399141888	@ 0x8f000000
 8022786:	f502 12dd 	add.w	r2, r2, #1810432	@ 0x1ba000
 802278a:	f502 52e6 	add.w	r2, r2, #7360	@ 0x1cc0
 802278e:	321c      	adds	r2, #28
 8022790:	eb02 02bc 	add.w	r2, r2, ip, ror #2
  R3(a, b, c, d, e, 50);
 8022794:	ea41 06b4 	orr.w	r6, r1, r4, ror #2
 8022798:	ea06 06b5 	and.w	r6, r6, r5, ror #2
 802279c:	ea01 07b4 	and.w	r7, r1, r4, ror #2
 80227a0:	433e      	orrs	r6, r7
 80227a2:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80227a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80227a6:	405f      	eors	r7, r3
 80227a8:	ea8a 0707 	eor.w	r7, sl, r7
 80227ac:	9b02      	ldr	r3, [sp, #8]
 80227ae:	405f      	eors	r7, r3
 80227b0:	ea4f 77f7 	mov.w	r7, r7, ror #31
 80227b4:	9710      	str	r7, [sp, #64]	@ 0x40
 80227b6:	9702      	str	r7, [sp, #8]
 80227b8:	443e      	add	r6, r7
 80227ba:	eb06 66f2 	add.w	r6, r6, r2, ror #27
 80227be:	f106 460f 	add.w	r6, r6, #2399141888	@ 0x8f000000
 80227c2:	f506 16dd 	add.w	r6, r6, #1810432	@ 0x1ba000
 80227c6:	f506 56e6 	add.w	r6, r6, #7360	@ 0x1cc0
 80227ca:	361c      	adds	r6, #28
 80227cc:	eb06 06b0 	add.w	r6, r6, r0, ror #2
  R3(e, a, b, c, d, 51);
 80227d0:	ea42 00b1 	orr.w	r0, r2, r1, ror #2
 80227d4:	ea00 00b4 	and.w	r0, r0, r4, ror #2
 80227d8:	ea02 07b1 	and.w	r7, r2, r1, ror #2
 80227dc:	4338      	orrs	r0, r7
 80227de:	9b06      	ldr	r3, [sp, #24]
 80227e0:	9f00      	ldr	r7, [sp, #0]
 80227e2:	405f      	eors	r7, r3
 80227e4:	ea89 0707 	eor.w	r7, r9, r7
 80227e8:	ea8b 0b07 	eor.w	fp, fp, r7
 80227ec:	ea4f 7cfb 	mov.w	ip, fp, ror #31
 80227f0:	f8cd c044 	str.w	ip, [sp, #68]	@ 0x44
 80227f4:	4460      	add	r0, ip
 80227f6:	eb00 60f6 	add.w	r0, r0, r6, ror #27
 80227fa:	f100 400f 	add.w	r0, r0, #2399141888	@ 0x8f000000
 80227fe:	f500 10dd 	add.w	r0, r0, #1810432	@ 0x1ba000
 8022802:	f500 50e6 	add.w	r0, r0, #7360	@ 0x1cc0
 8022806:	301c      	adds	r0, #28
 8022808:	eb00 00b5 	add.w	r0, r0, r5, ror #2
  R3(d, e, a, b, c, 52);
 802280c:	ea46 05b2 	orr.w	r5, r6, r2, ror #2
 8022810:	ea05 05b1 	and.w	r5, r5, r1, ror #2
 8022814:	ea06 07b2 	and.w	r7, r6, r2, ror #2
 8022818:	433d      	orrs	r5, r7
 802281a:	9f07      	ldr	r7, [sp, #28]
 802281c:	9b01      	ldr	r3, [sp, #4]
 802281e:	405f      	eors	r7, r3
 8022820:	ea8e 0707 	eor.w	r7, lr, r7
 8022824:	ea8a 0a07 	eor.w	sl, sl, r7
 8022828:	ea4f 78fa 	mov.w	r8, sl, ror #31
 802282c:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8022830:	4445      	add	r5, r8
 8022832:	eb05 65f0 	add.w	r5, r5, r0, ror #27
 8022836:	f105 450f 	add.w	r5, r5, #2399141888	@ 0x8f000000
 802283a:	f505 15dd 	add.w	r5, r5, #1810432	@ 0x1ba000
 802283e:	f505 55e6 	add.w	r5, r5, #7360	@ 0x1cc0
 8022842:	351c      	adds	r5, #28
 8022844:	eb05 05b4 	add.w	r5, r5, r4, ror #2
  R3(c, d, e, a, b, 53);
 8022848:	ea40 04b6 	orr.w	r4, r0, r6, ror #2
 802284c:	ea04 04b2 	and.w	r4, r4, r2, ror #2
 8022850:	ea00 07b6 	and.w	r7, r0, r6, ror #2
 8022854:	433c      	orrs	r4, r7
 8022856:	9b08      	ldr	r3, [sp, #32]
 8022858:	9f02      	ldr	r7, [sp, #8]
 802285a:	405f      	eors	r7, r3
 802285c:	9b03      	ldr	r3, [sp, #12]
 802285e:	405f      	eors	r7, r3
 8022860:	ea89 0707 	eor.w	r7, r9, r7
 8022864:	ea4f 79f7 	mov.w	r9, r7, ror #31
 8022868:	f8cd 904c 	str.w	r9, [sp, #76]	@ 0x4c
 802286c:	444c      	add	r4, r9
 802286e:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 8022872:	f104 440f 	add.w	r4, r4, #2399141888	@ 0x8f000000
 8022876:	f504 14dd 	add.w	r4, r4, #1810432	@ 0x1ba000
 802287a:	f504 54e6 	add.w	r4, r4, #7360	@ 0x1cc0
 802287e:	341c      	adds	r4, #28
 8022880:	eb04 04b1 	add.w	r4, r4, r1, ror #2
  R3(b, c, d, e, a, 54);
 8022884:	ea45 01b0 	orr.w	r1, r5, r0, ror #2
 8022888:	ea01 01b6 	and.w	r1, r1, r6, ror #2
 802288c:	ea05 07b0 	and.w	r7, r5, r0, ror #2
 8022890:	4339      	orrs	r1, r7
 8022892:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022894:	ea83 070c 	eor.w	r7, r3, ip
 8022898:	9b04      	ldr	r3, [sp, #16]
 802289a:	405f      	eors	r7, r3
 802289c:	ea8e 0707 	eor.w	r7, lr, r7
 80228a0:	ea4f 77f7 	mov.w	r7, r7, ror #31
 80228a4:	9714      	str	r7, [sp, #80]	@ 0x50
 80228a6:	970c      	str	r7, [sp, #48]	@ 0x30
 80228a8:	4439      	add	r1, r7
 80228aa:	eb01 61f4 	add.w	r1, r1, r4, ror #27
 80228ae:	f101 410f 	add.w	r1, r1, #2399141888	@ 0x8f000000
 80228b2:	f501 11dd 	add.w	r1, r1, #1810432	@ 0x1ba000
 80228b6:	f501 51e6 	add.w	r1, r1, #7360	@ 0x1cc0
 80228ba:	311c      	adds	r1, #28
 80228bc:	eb01 01b2 	add.w	r1, r1, r2, ror #2
  R3(a, b, c, d, e, 55);
 80228c0:	ea44 02b5 	orr.w	r2, r4, r5, ror #2
 80228c4:	ea02 02b0 	and.w	r2, r2, r0, ror #2
 80228c8:	ea04 07b5 	and.w	r7, r4, r5, ror #2
 80228cc:	433a      	orrs	r2, r7
 80228ce:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80228d0:	ea87 0708 	eor.w	r7, r7, r8
 80228d4:	9b05      	ldr	r3, [sp, #20]
 80228d6:	405f      	eors	r7, r3
 80228d8:	9b03      	ldr	r3, [sp, #12]
 80228da:	405f      	eors	r7, r3
 80228dc:	ea4f 7bf7 	mov.w	fp, r7, ror #31
 80228e0:	f8cd b054 	str.w	fp, [sp, #84]	@ 0x54
 80228e4:	445a      	add	r2, fp
 80228e6:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 80228ea:	f102 420f 	add.w	r2, r2, #2399141888	@ 0x8f000000
 80228ee:	f502 12dd 	add.w	r2, r2, #1810432	@ 0x1ba000
 80228f2:	f502 52e6 	add.w	r2, r2, #7360	@ 0x1cc0
 80228f6:	321c      	adds	r2, #28
 80228f8:	eb02 02b6 	add.w	r2, r2, r6, ror #2
  R3(e, a, b, c, d, 56);
 80228fc:	ea41 07b4 	orr.w	r7, r1, r4, ror #2
 8022900:	ea07 07b5 	and.w	r7, r7, r5, ror #2
 8022904:	ea01 06b4 	and.w	r6, r1, r4, ror #2
 8022908:	4337      	orrs	r7, r6
 802290a:	9e00      	ldr	r6, [sp, #0]
 802290c:	ea86 0609 	eor.w	r6, r6, r9
 8022910:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022912:	405e      	eors	r6, r3
 8022914:	9b04      	ldr	r3, [sp, #16]
 8022916:	405e      	eors	r6, r3
 8022918:	ea4f 7af6 	mov.w	sl, r6, ror #31
 802291c:	f8cd a058 	str.w	sl, [sp, #88]	@ 0x58
 8022920:	4457      	add	r7, sl
 8022922:	eb07 67f2 	add.w	r7, r7, r2, ror #27
 8022926:	f107 470f 	add.w	r7, r7, #2399141888	@ 0x8f000000
 802292a:	f507 17dd 	add.w	r7, r7, #1810432	@ 0x1ba000
 802292e:	f507 57e6 	add.w	r7, r7, #7360	@ 0x1cc0
 8022932:	371c      	adds	r7, #28
 8022934:	eb07 07b0 	add.w	r7, r7, r0, ror #2
  R3(d, e, a, b, c, 57);
 8022938:	ea42 00b1 	orr.w	r0, r2, r1, ror #2
 802293c:	ea00 00b4 	and.w	r0, r0, r4, ror #2
 8022940:	ea02 06b1 	and.w	r6, r2, r1, ror #2
 8022944:	4330      	orrs	r0, r6
 8022946:	9e01      	ldr	r6, [sp, #4]
 8022948:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802294a:	405e      	eors	r6, r3
 802294c:	9b06      	ldr	r3, [sp, #24]
 802294e:	405e      	eors	r6, r3
 8022950:	9b05      	ldr	r3, [sp, #20]
 8022952:	405e      	eors	r6, r3
 8022954:	ea4f 76f6 	mov.w	r6, r6, ror #31
 8022958:	9617      	str	r6, [sp, #92]	@ 0x5c
 802295a:	9603      	str	r6, [sp, #12]
 802295c:	4430      	add	r0, r6
 802295e:	eb00 60f7 	add.w	r0, r0, r7, ror #27
 8022962:	f100 400f 	add.w	r0, r0, #2399141888	@ 0x8f000000
 8022966:	f500 10dd 	add.w	r0, r0, #1810432	@ 0x1ba000
 802296a:	f500 50e6 	add.w	r0, r0, #7360	@ 0x1cc0
 802296e:	301c      	adds	r0, #28
 8022970:	eb00 00b5 	add.w	r0, r0, r5, ror #2
  R3(c, d, e, a, b, 58);
 8022974:	ea47 06b2 	orr.w	r6, r7, r2, ror #2
 8022978:	ea06 06b1 	and.w	r6, r6, r1, ror #2
 802297c:	ea07 05b2 	and.w	r5, r7, r2, ror #2
 8022980:	432e      	orrs	r6, r5
 8022982:	9d02      	ldr	r5, [sp, #8]
 8022984:	ea85 050b 	eor.w	r5, r5, fp
 8022988:	9b07      	ldr	r3, [sp, #28]
 802298a:	405d      	eors	r5, r3
 802298c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802298e:	405d      	eors	r5, r3
 8022990:	ea4f 75f5 	mov.w	r5, r5, ror #31
 8022994:	9518      	str	r5, [sp, #96]	@ 0x60
 8022996:	9504      	str	r5, [sp, #16]
 8022998:	442e      	add	r6, r5
 802299a:	eb06 66f0 	add.w	r6, r6, r0, ror #27
 802299e:	f106 460f 	add.w	r6, r6, #2399141888	@ 0x8f000000
 80229a2:	f506 16dd 	add.w	r6, r6, #1810432	@ 0x1ba000
 80229a6:	f506 56e6 	add.w	r6, r6, #7360	@ 0x1cc0
 80229aa:	361c      	adds	r6, #28
 80229ac:	eb06 06b4 	add.w	r6, r6, r4, ror #2
  R3(b, c, d, e, a, 59);
 80229b0:	ea40 04b7 	orr.w	r4, r0, r7, ror #2
 80229b4:	ea04 04b2 	and.w	r4, r4, r2, ror #2
 80229b8:	ea00 05b7 	and.w	r5, r0, r7, ror #2
 80229bc:	432c      	orrs	r4, r5
 80229be:	ea8c 050a 	eor.w	r5, ip, sl
 80229c2:	9b08      	ldr	r3, [sp, #32]
 80229c4:	405d      	eors	r5, r3
 80229c6:	9b06      	ldr	r3, [sp, #24]
 80229c8:	405d      	eors	r5, r3
 80229ca:	ea4f 75f5 	mov.w	r5, r5, ror #31
 80229ce:	9519      	str	r5, [sp, #100]	@ 0x64
 80229d0:	9505      	str	r5, [sp, #20]
 80229d2:	442c      	add	r4, r5
 80229d4:	eb04 64f6 	add.w	r4, r4, r6, ror #27
 80229d8:	f104 440f 	add.w	r4, r4, #2399141888	@ 0x8f000000
 80229dc:	f504 14dd 	add.w	r4, r4, #1810432	@ 0x1ba000
 80229e0:	f504 54e6 	add.w	r4, r4, #7360	@ 0x1cc0
 80229e4:	341c      	adds	r4, #28
 80229e6:	eb04 04b1 	add.w	r4, r4, r1, ror #2
  R4(a, b, c, d, e, 60);
 80229ea:	ea86 01b0 	eor.w	r1, r6, r0, ror #2
 80229ee:	ea81 01b7 	eor.w	r1, r1, r7, ror #2
 80229f2:	9d03      	ldr	r5, [sp, #12]
 80229f4:	ea88 0305 	eor.w	r3, r8, r5
 80229f8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80229fa:	406b      	eors	r3, r5
 80229fc:	9d07      	ldr	r5, [sp, #28]
 80229fe:	406b      	eors	r3, r5
 8022a00:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8022a04:	931a      	str	r3, [sp, #104]	@ 0x68
 8022a06:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022a08:	4419      	add	r1, r3
 8022a0a:	eb01 61f4 	add.w	r1, r1, r4, ror #27
 8022a0e:	f8df e3fc 	ldr.w	lr, [pc, #1020]	@ 8022e0c <mg_sha1_transform+0xf84>
 8022a12:	4471      	add	r1, lr
 8022a14:	eb01 01b2 	add.w	r1, r1, r2, ror #2
  R4(e, a, b, c, d, 61);
 8022a18:	ea84 02b6 	eor.w	r2, r4, r6, ror #2
 8022a1c:	ea82 02b0 	eor.w	r2, r2, r0, ror #2
 8022a20:	9b04      	ldr	r3, [sp, #16]
 8022a22:	ea89 0303 	eor.w	r3, r9, r3
 8022a26:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8022a28:	406b      	eors	r3, r5
 8022a2a:	9d08      	ldr	r5, [sp, #32]
 8022a2c:	406b      	eors	r3, r5
 8022a2e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8022a32:	931b      	str	r3, [sp, #108]	@ 0x6c
 8022a34:	9306      	str	r3, [sp, #24]
 8022a36:	441a      	add	r2, r3
 8022a38:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8022a3c:	4472      	add	r2, lr
 8022a3e:	eb02 02b7 	add.w	r2, r2, r7, ror #2
  R4(d, e, a, b, c, 62);
 8022a42:	ea81 03b4 	eor.w	r3, r1, r4, ror #2
 8022a46:	ea83 03b6 	eor.w	r3, r3, r6, ror #2
 8022a4a:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8022a4c:	9d05      	ldr	r5, [sp, #20]
 8022a4e:	406f      	eors	r7, r5
 8022a50:	9d00      	ldr	r5, [sp, #0]
 8022a52:	406f      	eors	r7, r5
 8022a54:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8022a56:	406f      	eors	r7, r5
 8022a58:	ea4f 77f7 	mov.w	r7, r7, ror #31
 8022a5c:	971c      	str	r7, [sp, #112]	@ 0x70
 8022a5e:	9707      	str	r7, [sp, #28]
 8022a60:	443b      	add	r3, r7
 8022a62:	eb03 63f2 	add.w	r3, r3, r2, ror #27
 8022a66:	4473      	add	r3, lr
 8022a68:	eb03 03b0 	add.w	r3, r3, r0, ror #2
  R4(c, d, e, a, b, 63);
 8022a6c:	ea82 00b1 	eor.w	r0, r2, r1, ror #2
 8022a70:	ea80 00b4 	eor.w	r0, r0, r4, ror #2
 8022a74:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8022a76:	ea8b 0707 	eor.w	r7, fp, r7
 8022a7a:	9d01      	ldr	r5, [sp, #4]
 8022a7c:	406f      	eors	r7, r5
 8022a7e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8022a80:	406f      	eors	r7, r5
 8022a82:	ea4f 77f7 	mov.w	r7, r7, ror #31
 8022a86:	971d      	str	r7, [sp, #116]	@ 0x74
 8022a88:	9708      	str	r7, [sp, #32]
 8022a8a:	4438      	add	r0, r7
 8022a8c:	eb00 60f3 	add.w	r0, r0, r3, ror #27
 8022a90:	4470      	add	r0, lr
 8022a92:	eb00 00b6 	add.w	r0, r0, r6, ror #2
  R4(b, c, d, e, a, 64);
 8022a96:	ea83 07b2 	eor.w	r7, r3, r2, ror #2
 8022a9a:	ea87 07b1 	eor.w	r7, r7, r1, ror #2
 8022a9e:	9e06      	ldr	r6, [sp, #24]
 8022aa0:	ea8a 0606 	eor.w	r6, sl, r6
 8022aa4:	9d02      	ldr	r5, [sp, #8]
 8022aa6:	406e      	eors	r6, r5
 8022aa8:	9d00      	ldr	r5, [sp, #0]
 8022aaa:	406e      	eors	r6, r5
 8022aac:	ea4f 76f6 	mov.w	r6, r6, ror #31
 8022ab0:	960e      	str	r6, [sp, #56]	@ 0x38
 8022ab2:	9600      	str	r6, [sp, #0]
 8022ab4:	4437      	add	r7, r6
 8022ab6:	eb07 67f0 	add.w	r7, r7, r0, ror #27
 8022aba:	4477      	add	r7, lr
 8022abc:	eb07 07b4 	add.w	r7, r7, r4, ror #2
  R4(a, b, c, d, e, 65);
 8022ac0:	ea80 06b3 	eor.w	r6, r0, r3, ror #2
 8022ac4:	ea86 06b2 	eor.w	r6, r6, r2, ror #2
 8022ac8:	9c03      	ldr	r4, [sp, #12]
 8022aca:	9d07      	ldr	r5, [sp, #28]
 8022acc:	406c      	eors	r4, r5
 8022ace:	ea8c 0404 	eor.w	r4, ip, r4
 8022ad2:	9d01      	ldr	r5, [sp, #4]
 8022ad4:	406c      	eors	r4, r5
 8022ad6:	ea4f 74f4 	mov.w	r4, r4, ror #31
 8022ada:	940f      	str	r4, [sp, #60]	@ 0x3c
 8022adc:	9401      	str	r4, [sp, #4]
 8022ade:	4426      	add	r6, r4
 8022ae0:	eb06 66f7 	add.w	r6, r6, r7, ror #27
 8022ae4:	4476      	add	r6, lr
 8022ae6:	eb06 06b1 	add.w	r6, r6, r1, ror #2
  R4(e, a, b, c, d, 66);
 8022aea:	ea87 05b0 	eor.w	r5, r7, r0, ror #2
 8022aee:	ea85 05b3 	eor.w	r5, r5, r3, ror #2
 8022af2:	9904      	ldr	r1, [sp, #16]
 8022af4:	9c08      	ldr	r4, [sp, #32]
 8022af6:	4061      	eors	r1, r4
 8022af8:	ea88 0101 	eor.w	r1, r8, r1
 8022afc:	9c02      	ldr	r4, [sp, #8]
 8022afe:	4061      	eors	r1, r4
 8022b00:	ea4f 71f1 	mov.w	r1, r1, ror #31
 8022b04:	9110      	str	r1, [sp, #64]	@ 0x40
 8022b06:	440d      	add	r5, r1
 8022b08:	eb05 65f6 	add.w	r5, r5, r6, ror #27
 8022b0c:	4475      	add	r5, lr
 8022b0e:	eb05 05b2 	add.w	r5, r5, r2, ror #2
  R4(d, e, a, b, c, 67);
 8022b12:	ea86 0eb7 	eor.w	lr, r6, r7, ror #2
 8022b16:	ea8e 0eb0 	eor.w	lr, lr, r0, ror #2
 8022b1a:	9a05      	ldr	r2, [sp, #20]
 8022b1c:	9c00      	ldr	r4, [sp, #0]
 8022b1e:	4062      	eors	r2, r4
 8022b20:	ea89 0202 	eor.w	r2, r9, r2
 8022b24:	ea8c 0202 	eor.w	r2, ip, r2
 8022b28:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8022b2c:	9211      	str	r2, [sp, #68]	@ 0x44
 8022b2e:	4496      	add	lr, r2
 8022b30:	eb0e 6ef5 	add.w	lr, lr, r5, ror #27
 8022b34:	f10e 4e4a 	add.w	lr, lr, #3388997632	@ 0xca000000
 8022b38:	f50e 0ec5 	add.w	lr, lr, #6455296	@ 0x628000
 8022b3c:	f50e 4e83 	add.w	lr, lr, #16768	@ 0x4180
 8022b40:	f10e 0e56 	add.w	lr, lr, #86	@ 0x56
 8022b44:	eb0e 0eb3 	add.w	lr, lr, r3, ror #2
  R4(c, d, e, a, b, 68);
 8022b48:	ea85 0cb6 	eor.w	ip, r5, r6, ror #2
 8022b4c:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
 8022b50:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022b52:	9c01      	ldr	r4, [sp, #4]
 8022b54:	4063      	eors	r3, r4
 8022b56:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8022b58:	4063      	eors	r3, r4
 8022b5a:	ea88 0303 	eor.w	r3, r8, r3
 8022b5e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8022b62:	9312      	str	r3, [sp, #72]	@ 0x48
 8022b64:	449c      	add	ip, r3
 8022b66:	eb0c 6cfe 	add.w	ip, ip, lr, ror #27
 8022b6a:	f10c 4c4a 	add.w	ip, ip, #3388997632	@ 0xca000000
 8022b6e:	f50c 0cc5 	add.w	ip, ip, #6455296	@ 0x628000
 8022b72:	f50c 4c83 	add.w	ip, ip, #16768	@ 0x4180
 8022b76:	f10c 0c56 	add.w	ip, ip, #86	@ 0x56
 8022b7a:	eb0c 0cb0 	add.w	ip, ip, r0, ror #2
  R4(b, c, d, e, a, 69);
 8022b7e:	ea8e 08b5 	eor.w	r8, lr, r5, ror #2
 8022b82:	ea88 08b6 	eor.w	r8, r8, r6, ror #2
 8022b86:	9806      	ldr	r0, [sp, #24]
 8022b88:	4048      	eors	r0, r1
 8022b8a:	ea8b 0000 	eor.w	r0, fp, r0
 8022b8e:	ea89 0000 	eor.w	r0, r9, r0
 8022b92:	ea4f 70f0 	mov.w	r0, r0, ror #31
 8022b96:	9013      	str	r0, [sp, #76]	@ 0x4c
 8022b98:	4480      	add	r8, r0
 8022b9a:	eb08 68fc 	add.w	r8, r8, ip, ror #27
 8022b9e:	f108 484a 	add.w	r8, r8, #3388997632	@ 0xca000000
 8022ba2:	f508 08c5 	add.w	r8, r8, #6455296	@ 0x628000
 8022ba6:	f508 4883 	add.w	r8, r8, #16768	@ 0x4180
 8022baa:	f108 0856 	add.w	r8, r8, #86	@ 0x56
 8022bae:	eb08 08b7 	add.w	r8, r8, r7, ror #2
  R4(a, b, c, d, e, 70);
 8022bb2:	ea8c 07be 	eor.w	r7, ip, lr, ror #2
 8022bb6:	ea87 07b5 	eor.w	r7, r7, r5, ror #2
 8022bba:	9702      	str	r7, [sp, #8]
 8022bbc:	9f07      	ldr	r7, [sp, #28]
 8022bbe:	ea87 0902 	eor.w	r9, r7, r2
 8022bc2:	ea8a 0909 	eor.w	r9, sl, r9
 8022bc6:	ea84 0909 	eor.w	r9, r4, r9
 8022bca:	ea4f 79f9 	mov.w	r9, r9, ror #31
 8022bce:	f8cd 9050 	str.w	r9, [sp, #80]	@ 0x50
 8022bd2:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 8022bd6:	9c02      	ldr	r4, [sp, #8]
 8022bd8:	444c      	add	r4, r9
 8022bda:	eb04 67f8 	add.w	r7, r4, r8, ror #27
 8022bde:	f107 474a 	add.w	r7, r7, #3388997632	@ 0xca000000
 8022be2:	f507 07c5 	add.w	r7, r7, #6455296	@ 0x628000
 8022be6:	f507 4783 	add.w	r7, r7, #16768	@ 0x4180
 8022bea:	3756      	adds	r7, #86	@ 0x56
 8022bec:	eb07 07b6 	add.w	r7, r7, r6, ror #2
  R4(e, a, b, c, d, 71);
 8022bf0:	ea88 06bc 	eor.w	r6, r8, ip, ror #2
 8022bf4:	ea86 06be 	eor.w	r6, r6, lr, ror #2
 8022bf8:	9c08      	ldr	r4, [sp, #32]
 8022bfa:	ea84 0903 	eor.w	r9, r4, r3
 8022bfe:	9c03      	ldr	r4, [sp, #12]
 8022c00:	ea84 0909 	eor.w	r9, r4, r9
 8022c04:	ea8b 0909 	eor.w	r9, fp, r9
 8022c08:	ea4f 79f9 	mov.w	r9, r9, ror #31
 8022c0c:	f8cd 9054 	str.w	r9, [sp, #84]	@ 0x54
 8022c10:	444e      	add	r6, r9
 8022c12:	eb06 66f7 	add.w	r6, r6, r7, ror #27
 8022c16:	f106 464a 	add.w	r6, r6, #3388997632	@ 0xca000000
 8022c1a:	f506 06c5 	add.w	r6, r6, #6455296	@ 0x628000
 8022c1e:	f506 4683 	add.w	r6, r6, #16768	@ 0x4180
 8022c22:	3656      	adds	r6, #86	@ 0x56
 8022c24:	eb06 06b5 	add.w	r6, r6, r5, ror #2
  R4(d, e, a, b, c, 72);
 8022c28:	ea87 05b8 	eor.w	r5, r7, r8, ror #2
 8022c2c:	ea85 05bc 	eor.w	r5, r5, ip, ror #2
 8022c30:	9c00      	ldr	r4, [sp, #0]
 8022c32:	ea84 0b00 	eor.w	fp, r4, r0
 8022c36:	9c04      	ldr	r4, [sp, #16]
 8022c38:	ea84 0b0b 	eor.w	fp, r4, fp
 8022c3c:	ea8a 0b0b 	eor.w	fp, sl, fp
 8022c40:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8022c44:	f8cd b058 	str.w	fp, [sp, #88]	@ 0x58
 8022c48:	445d      	add	r5, fp
 8022c4a:	eb05 65f6 	add.w	r5, r5, r6, ror #27
 8022c4e:	f105 454a 	add.w	r5, r5, #3388997632	@ 0xca000000
 8022c52:	f505 05c5 	add.w	r5, r5, #6455296	@ 0x628000
 8022c56:	f505 4583 	add.w	r5, r5, #16768	@ 0x4180
 8022c5a:	3556      	adds	r5, #86	@ 0x56
 8022c5c:	eb05 05be 	add.w	r5, r5, lr, ror #2
  R4(c, d, e, a, b, 73);
 8022c60:	9602      	str	r6, [sp, #8]
 8022c62:	ea86 0eb7 	eor.w	lr, r6, r7, ror #2
 8022c66:	ea8e 0eb8 	eor.w	lr, lr, r8, ror #2
 8022c6a:	9c01      	ldr	r4, [sp, #4]
 8022c6c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8022c6e:	ea84 0a06 	eor.w	sl, r4, r6
 8022c72:	9c05      	ldr	r4, [sp, #20]
 8022c74:	ea84 0a0a 	eor.w	sl, r4, sl
 8022c78:	9c03      	ldr	r4, [sp, #12]
 8022c7a:	ea84 0a0a 	eor.w	sl, r4, sl
 8022c7e:	ea4f 7afa 	mov.w	sl, sl, ror #31
 8022c82:	f8cd a05c 	str.w	sl, [sp, #92]	@ 0x5c
 8022c86:	44d6      	add	lr, sl
 8022c88:	eb0e 6ef5 	add.w	lr, lr, r5, ror #27
 8022c8c:	f10e 4e4a 	add.w	lr, lr, #3388997632	@ 0xca000000
 8022c90:	f50e 0ec5 	add.w	lr, lr, #6455296	@ 0x628000
 8022c94:	f50e 4e83 	add.w	lr, lr, #16768	@ 0x4180
 8022c98:	f10e 0e56 	add.w	lr, lr, #86	@ 0x56
 8022c9c:	eb0e 0ebc 	add.w	lr, lr, ip, ror #2
  R4(b, c, d, e, a, 74);
 8022ca0:	9e02      	ldr	r6, [sp, #8]
 8022ca2:	ea85 0cb6 	eor.w	ip, r5, r6, ror #2
 8022ca6:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
 8022caa:	ea81 0109 	eor.w	r1, r1, r9
 8022cae:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8022cb0:	4071      	eors	r1, r6
 8022cb2:	9c04      	ldr	r4, [sp, #16]
 8022cb4:	4061      	eors	r1, r4
 8022cb6:	ea4f 71f1 	mov.w	r1, r1, ror #31
 8022cba:	9118      	str	r1, [sp, #96]	@ 0x60
 8022cbc:	448c      	add	ip, r1
 8022cbe:	eb0c 6cfe 	add.w	ip, ip, lr, ror #27
 8022cc2:	f10c 4c4a 	add.w	ip, ip, #3388997632	@ 0xca000000
 8022cc6:	f50c 0cc5 	add.w	ip, ip, #6455296	@ 0x628000
 8022cca:	f50c 4c83 	add.w	ip, ip, #16768	@ 0x4180
 8022cce:	f10c 0c56 	add.w	ip, ip, #86	@ 0x56
 8022cd2:	eb0c 0cb8 	add.w	ip, ip, r8, ror #2
  R4(a, b, c, d, e, 75);
 8022cd6:	ea8e 08b5 	eor.w	r8, lr, r5, ror #2
 8022cda:	9c02      	ldr	r4, [sp, #8]
 8022cdc:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
 8022ce0:	ea82 020b 	eor.w	r2, r2, fp
 8022ce4:	9c06      	ldr	r4, [sp, #24]
 8022ce6:	4062      	eors	r2, r4
 8022ce8:	9c05      	ldr	r4, [sp, #20]
 8022cea:	4062      	eors	r2, r4
 8022cec:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8022cf0:	9219      	str	r2, [sp, #100]	@ 0x64
 8022cf2:	4490      	add	r8, r2
 8022cf4:	eb08 68fc 	add.w	r8, r8, ip, ror #27
 8022cf8:	f108 484a 	add.w	r8, r8, #3388997632	@ 0xca000000
 8022cfc:	f508 08c5 	add.w	r8, r8, #6455296	@ 0x628000
 8022d00:	f508 4883 	add.w	r8, r8, #16768	@ 0x4180
 8022d04:	f108 0856 	add.w	r8, r8, #86	@ 0x56
 8022d08:	eb08 08b7 	add.w	r8, r8, r7, ror #2
  R4(e, a, b, c, d, 76);
 8022d0c:	ea8c 07be 	eor.w	r7, ip, lr, ror #2
 8022d10:	ea87 07b5 	eor.w	r7, r7, r5, ror #2
 8022d14:	ea83 030a 	eor.w	r3, r3, sl
 8022d18:	9c07      	ldr	r4, [sp, #28]
 8022d1a:	4063      	eors	r3, r4
 8022d1c:	4073      	eors	r3, r6
 8022d1e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8022d22:	931a      	str	r3, [sp, #104]	@ 0x68
 8022d24:	441f      	add	r7, r3
 8022d26:	eb07 67f8 	add.w	r7, r7, r8, ror #27
 8022d2a:	f107 474a 	add.w	r7, r7, #3388997632	@ 0xca000000
 8022d2e:	f507 07c5 	add.w	r7, r7, #6455296	@ 0x628000
 8022d32:	f507 4783 	add.w	r7, r7, #16768	@ 0x4180
 8022d36:	3756      	adds	r7, #86	@ 0x56
 8022d38:	9e02      	ldr	r6, [sp, #8]
 8022d3a:	eb07 07b6 	add.w	r7, r7, r6, ror #2
  R4(d, e, a, b, c, 77);
 8022d3e:	ea88 06bc 	eor.w	r6, r8, ip, ror #2
 8022d42:	ea86 06be 	eor.w	r6, r6, lr, ror #2
 8022d46:	4048      	eors	r0, r1
 8022d48:	9908      	ldr	r1, [sp, #32]
 8022d4a:	4048      	eors	r0, r1
 8022d4c:	9c06      	ldr	r4, [sp, #24]
 8022d4e:	4060      	eors	r0, r4
 8022d50:	ea4f 70f0 	mov.w	r0, r0, ror #31
 8022d54:	901b      	str	r0, [sp, #108]	@ 0x6c
 8022d56:	4406      	add	r6, r0
 8022d58:	eb06 66f7 	add.w	r6, r6, r7, ror #27
 8022d5c:	f106 464a 	add.w	r6, r6, #3388997632	@ 0xca000000
 8022d60:	f506 06c5 	add.w	r6, r6, #6455296	@ 0x628000
 8022d64:	f506 4683 	add.w	r6, r6, #16768	@ 0x4180
 8022d68:	3656      	adds	r6, #86	@ 0x56
 8022d6a:	eb06 06b5 	add.w	r6, r6, r5, ror #2
  R4(c, d, e, a, b, 78);
 8022d6e:	ea87 01b8 	eor.w	r1, r7, r8, ror #2
 8022d72:	ea81 01bc 	eor.w	r1, r1, ip, ror #2
 8022d76:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8022d78:	406a      	eors	r2, r5
 8022d7a:	9d00      	ldr	r5, [sp, #0]
 8022d7c:	406a      	eors	r2, r5
 8022d7e:	9c07      	ldr	r4, [sp, #28]
 8022d80:	4062      	eors	r2, r4
 8022d82:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8022d86:	921c      	str	r2, [sp, #112]	@ 0x70
 8022d88:	4411      	add	r1, r2
 8022d8a:	eb01 61f6 	add.w	r1, r1, r6, ror #27
 8022d8e:	f101 414a 	add.w	r1, r1, #3388997632	@ 0xca000000
 8022d92:	f501 01c5 	add.w	r1, r1, #6455296	@ 0x628000
 8022d96:	f501 4183 	add.w	r1, r1, #16768	@ 0x4180
 8022d9a:	3156      	adds	r1, #86	@ 0x56
 8022d9c:	eb01 01be 	add.w	r1, r1, lr, ror #2
  R4(b, c, d, e, a, 79);
 8022da0:	ea86 02b7 	eor.w	r2, r6, r7, ror #2
 8022da4:	ea82 02b8 	eor.w	r2, r2, r8, ror #2
 8022da8:	ea89 0903 	eor.w	r9, r9, r3
 8022dac:	9b01      	ldr	r3, [sp, #4]
 8022dae:	ea83 0909 	eor.w	r9, r3, r9
 8022db2:	9c08      	ldr	r4, [sp, #32]
 8022db4:	ea84 0309 	eor.w	r3, r4, r9
 8022db8:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8022dbc:	931d      	str	r3, [sp, #116]	@ 0x74
 8022dbe:	4413      	add	r3, r2
 8022dc0:	eb03 63f1 	add.w	r3, r3, r1, ror #27
 8022dc4:	f103 434a 	add.w	r3, r3, #3388997632	@ 0xca000000
 8022dc8:	f503 03c5 	add.w	r3, r3, #6455296	@ 0x628000
 8022dcc:	f503 4383 	add.w	r3, r3, #16768	@ 0x4180
 8022dd0:	3356      	adds	r3, #86	@ 0x56
 8022dd2:	eb03 03bc 	add.w	r3, r3, ip, ror #2
  state[0] += a;
 8022dd6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8022dd8:	6802      	ldr	r2, [r0, #0]
 8022dda:	441a      	add	r2, r3
 8022ddc:	6002      	str	r2, [r0, #0]
  state[1] += b;
 8022dde:	6843      	ldr	r3, [r0, #4]
 8022de0:	440b      	add	r3, r1
 8022de2:	6043      	str	r3, [r0, #4]
  state[2] += c;
 8022de4:	6883      	ldr	r3, [r0, #8]
 8022de6:	eb03 03b6 	add.w	r3, r3, r6, ror #2
 8022dea:	6083      	str	r3, [r0, #8]
  state[3] += d;
 8022dec:	68c3      	ldr	r3, [r0, #12]
 8022dee:	eb03 03b7 	add.w	r3, r3, r7, ror #2
 8022df2:	60c3      	str	r3, [r0, #12]
  state[4] += e;
 8022df4:	6903      	ldr	r3, [r0, #16]
 8022df6:	eb03 03b8 	add.w	r3, r3, r8, ror #2
 8022dfa:	6103      	str	r3, [r0, #16]
  memset(block, 0, sizeof(block));
 8022dfc:	2240      	movs	r2, #64	@ 0x40
 8022dfe:	2100      	movs	r1, #0
 8022e00:	a80e      	add	r0, sp, #56	@ 0x38
 8022e02:	f00a f92d 	bl	802d060 <memset>
}
 8022e06:	b01f      	add	sp, #124	@ 0x7c
 8022e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022e0c:	ca62c1d6 	.word	0xca62c1d6

08022e10 <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 8022e10:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8022e12:	fb01 f400 	mul.w	r4, r1, r0
 8022e16:	4620      	mov	r0, r4
 8022e18:	f7f8 f8d6 	bl	801afc8 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8022e1c:	4605      	mov	r5, r0
 8022e1e:	b118      	cbz	r0, 8022e28 <mg_calloc+0x18>
 8022e20:	4622      	mov	r2, r4
 8022e22:	2100      	movs	r1, #0
 8022e24:	f00a f91c 	bl	802d060 <memset>
}
 8022e28:	4628      	mov	r0, r5
 8022e2a:	bd38      	pop	{r3, r4, r5, pc}

08022e2c <mg_print_esc>:
size_t mg_print_esc(void (*out)(char, void *), void *arg, va_list *ap) {
 8022e2c:	b570      	push	{r4, r5, r6, lr}
 8022e2e:	4605      	mov	r5, r0
 8022e30:	460e      	mov	r6, r1
  size_t len = (size_t) va_arg(*ap, int);
 8022e32:	6811      	ldr	r1, [r2, #0]
 8022e34:	1d0c      	adds	r4, r1, #4
 8022e36:	6014      	str	r4, [r2, #0]
 8022e38:	680b      	ldr	r3, [r1, #0]
  char *p = va_arg(*ap, char *);
 8022e3a:	f101 0408 	add.w	r4, r1, #8
 8022e3e:	6014      	str	r4, [r2, #0]
 8022e40:	684c      	ldr	r4, [r1, #4]
  if (len == 0) len = p == NULL ? 0 : strlen(p);
 8022e42:	b923      	cbnz	r3, 8022e4e <mg_print_esc+0x22>
 8022e44:	b11c      	cbz	r4, 8022e4e <mg_print_esc+0x22>
 8022e46:	4620      	mov	r0, r4
 8022e48:	f7ed fa2a 	bl	80102a0 <strlen>
 8022e4c:	4603      	mov	r3, r0
  return qcpy(out, arg, p, len);
 8022e4e:	4622      	mov	r2, r4
 8022e50:	4631      	mov	r1, r6
 8022e52:	4628      	mov	r0, r5
 8022e54:	f7fe fd65 	bl	8021922 <qcpy>
}
 8022e58:	bd70      	pop	{r4, r5, r6, pc}

08022e5a <getpeer>:
                                     bool lsn) {
 8022e5a:	b570      	push	{r4, r5, r6, lr}
 8022e5c:	460d      	mov	r5, r1
 8022e5e:	4616      	mov	r6, r2
  for (c = mgr->conns; c != NULL; c = c->next) {
 8022e60:	6804      	ldr	r4, [r0, #0]
 8022e62:	e000      	b.n	8022e66 <getpeer+0xc>
 8022e64:	6824      	ldr	r4, [r4, #0]
 8022e66:	b364      	cbz	r4, 8022ec2 <getpeer+0x68>
    if (c->is_arplooking && pkt->arp &&
 8022e68:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8022e6c:	f013 0f10 	tst.w	r3, #16
 8022e70:	d008      	beq.n	8022e84 <getpeer+0x2a>
 8022e72:	69a8      	ldr	r0, [r5, #24]
 8022e74:	b130      	cbz	r0, 8022e84 <getpeer+0x2a>
        memcmp(&pkt->arp->spa, c->rem.ip, sizeof(pkt->arp->spa)) == 0)
 8022e76:	2204      	movs	r2, #4
 8022e78:	f104 011c 	add.w	r1, r4, #28
 8022e7c:	300e      	adds	r0, #14
 8022e7e:	f00a f85b 	bl	802cf38 <memcmp>
    if (c->is_arplooking && pkt->arp &&
 8022e82:	b1f0      	cbz	r0, 8022ec2 <getpeer+0x68>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 8022e84:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8022e88:	f013 0301 	ands.w	r3, r3, #1
 8022e8c:	d005      	beq.n	8022e9a <getpeer+0x40>
 8022e8e:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8022e90:	b11a      	cbz	r2, 8022e9a <getpeer+0x40>
 8022e92:	8b21      	ldrh	r1, [r4, #24]
 8022e94:	8852      	ldrh	r2, [r2, #2]
 8022e96:	4291      	cmp	r1, r2
 8022e98:	d013      	beq.n	8022ec2 <getpeer+0x68>
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 8022e9a:	2b00      	cmp	r3, #0
 8022e9c:	d1e2      	bne.n	8022e64 <getpeer+0xa>
 8022e9e:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8022ea0:	2b00      	cmp	r3, #0
 8022ea2:	d0df      	beq.n	8022e64 <getpeer+0xa>
 8022ea4:	8b21      	ldrh	r1, [r4, #24]
 8022ea6:	885a      	ldrh	r2, [r3, #2]
 8022ea8:	4291      	cmp	r1, r2
 8022eaa:	d1db      	bne.n	8022e64 <getpeer+0xa>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 8022eac:	f894 20ac 	ldrb.w	r2, [r4, #172]	@ 0xac
 8022eb0:	f002 0201 	and.w	r2, r2, #1
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 8022eb4:	42b2      	cmp	r2, r6
 8022eb6:	d1d5      	bne.n	8022e64 <getpeer+0xa>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 8022eb8:	b91e      	cbnz	r6, 8022ec2 <getpeer+0x68>
 8022eba:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8022ebc:	881b      	ldrh	r3, [r3, #0]
 8022ebe:	429a      	cmp	r2, r3
 8022ec0:	d1d0      	bne.n	8022e64 <getpeer+0xa>
}
 8022ec2:	4620      	mov	r0, r4
 8022ec4:	bd70      	pop	{r4, r5, r6, pc}

08022ec6 <mg_pfn_stdout>:
void mg_pfn_stdout(char c, void *param) {
 8022ec6:	b508      	push	{r3, lr}
  putchar(c);
 8022ec8:	f009 fb24 	bl	802c514 <putchar>
}
 8022ecc:	bd08      	pop	{r3, pc}

08022ece <mg_queue_read_len>:
  MG_MEMORY_BARRIER();
 8022ece:	f3bf 8f5b 	dmb	ish
  memcpy(&n, q->buf + q->tail, sizeof(n));
 8022ed2:	6802      	ldr	r2, [r0, #0]
 8022ed4:	6883      	ldr	r3, [r0, #8]
}
 8022ed6:	58d0      	ldr	r0, [r2, r3]
 8022ed8:	4770      	bx	lr
	...

08022edc <parse_net>:
static int parse_net(const char *spec, uint32_t *net, uint32_t *mask) {
 8022edc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022ee0:	b08b      	sub	sp, #44	@ 0x2c
 8022ee2:	4604      	mov	r4, r0
 8022ee4:	460e      	mov	r6, r1
 8022ee6:	4615      	mov	r5, r2
  int n, a, b, c, d, slash = 32, len = 0;
 8022ee8:	2320      	movs	r3, #32
 8022eea:	9304      	str	r3, [sp, #16]
  if ((sscanf(spec, "%d.%d.%d.%d/%d%n", &a, &b, &c, &d, &slash, &n) == 5 ||
 8022eec:	ab09      	add	r3, sp, #36	@ 0x24
 8022eee:	9303      	str	r3, [sp, #12]
 8022ef0:	ab04      	add	r3, sp, #16
 8022ef2:	9302      	str	r3, [sp, #8]
 8022ef4:	ab05      	add	r3, sp, #20
 8022ef6:	9301      	str	r3, [sp, #4]
 8022ef8:	ab06      	add	r3, sp, #24
 8022efa:	9300      	str	r3, [sp, #0]
 8022efc:	ab07      	add	r3, sp, #28
 8022efe:	aa08      	add	r2, sp, #32
 8022f00:	4928      	ldr	r1, [pc, #160]	@ (8022fa4 <parse_net+0xc8>)
 8022f02:	f009 fd0b 	bl	802c91c <sscanf>
 8022f06:	2805      	cmp	r0, #5
 8022f08:	d133      	bne.n	8022f72 <parse_net+0x96>
      isbyte(a) && isbyte(b) && isbyte(c) && isbyte(d) && slash >= 0 &&
 8022f0a:	9c08      	ldr	r4, [sp, #32]
 8022f0c:	4620      	mov	r0, r4
 8022f0e:	f7fe fd6e 	bl	80219ee <isbyte>
       sscanf(spec, "%d.%d.%d.%d%n", &a, &b, &c, &d, &n) == 4) &&
 8022f12:	4603      	mov	r3, r0
 8022f14:	2800      	cmp	r0, #0
 8022f16:	d03b      	beq.n	8022f90 <parse_net+0xb4>
      isbyte(a) && isbyte(b) && isbyte(c) && isbyte(d) && slash >= 0 &&
 8022f18:	9f07      	ldr	r7, [sp, #28]
 8022f1a:	4638      	mov	r0, r7
 8022f1c:	f7fe fd67 	bl	80219ee <isbyte>
 8022f20:	4603      	mov	r3, r0
 8022f22:	2800      	cmp	r0, #0
 8022f24:	d034      	beq.n	8022f90 <parse_net+0xb4>
 8022f26:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8022f2a:	4648      	mov	r0, r9
 8022f2c:	f7fe fd5f 	bl	80219ee <isbyte>
 8022f30:	4603      	mov	r3, r0
 8022f32:	b368      	cbz	r0, 8022f90 <parse_net+0xb4>
 8022f34:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8022f38:	4640      	mov	r0, r8
 8022f3a:	f7fe fd58 	bl	80219ee <isbyte>
 8022f3e:	4603      	mov	r3, r0
 8022f40:	b330      	cbz	r0, 8022f90 <parse_net+0xb4>
 8022f42:	9b04      	ldr	r3, [sp, #16]
 8022f44:	2b00      	cmp	r3, #0
 8022f46:	db29      	blt.n	8022f9c <parse_net+0xc0>
 8022f48:	2b20      	cmp	r3, #32
 8022f4a:	dc29      	bgt.n	8022fa0 <parse_net+0xc4>
    len = n;
 8022f4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    *net = ((uint32_t) a << 24) | ((uint32_t) b << 16) | ((uint32_t) c << 8) |
 8022f4e:	043a      	lsls	r2, r7, #16
 8022f50:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8022f54:	ea42 2209 	orr.w	r2, r2, r9, lsl #8
 8022f58:	ea42 0208 	orr.w	r2, r2, r8
 8022f5c:	6032      	str	r2, [r6, #0]
    *mask = slash ? (uint32_t) (0xffffffffU << (32 - slash)) : (uint32_t) 0;
 8022f5e:	9a04      	ldr	r2, [sp, #16]
 8022f60:	b1d2      	cbz	r2, 8022f98 <parse_net+0xbc>
 8022f62:	f1c2 0220 	rsb	r2, r2, #32
 8022f66:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8022f6a:	fa01 f202 	lsl.w	r2, r1, r2
 8022f6e:	602a      	str	r2, [r5, #0]
 8022f70:	e00e      	b.n	8022f90 <parse_net+0xb4>
       sscanf(spec, "%d.%d.%d.%d%n", &a, &b, &c, &d, &n) == 4) &&
 8022f72:	ab09      	add	r3, sp, #36	@ 0x24
 8022f74:	9302      	str	r3, [sp, #8]
 8022f76:	ab05      	add	r3, sp, #20
 8022f78:	9301      	str	r3, [sp, #4]
 8022f7a:	ab06      	add	r3, sp, #24
 8022f7c:	9300      	str	r3, [sp, #0]
 8022f7e:	ab07      	add	r3, sp, #28
 8022f80:	aa08      	add	r2, sp, #32
 8022f82:	4909      	ldr	r1, [pc, #36]	@ (8022fa8 <parse_net+0xcc>)
 8022f84:	4620      	mov	r0, r4
 8022f86:	f009 fcc9 	bl	802c91c <sscanf>
  if ((sscanf(spec, "%d.%d.%d.%d/%d%n", &a, &b, &c, &d, &slash, &n) == 5 ||
 8022f8a:	2804      	cmp	r0, #4
 8022f8c:	d0bd      	beq.n	8022f0a <parse_net+0x2e>
  int n, a, b, c, d, slash = 32, len = 0;
 8022f8e:	2300      	movs	r3, #0
}
 8022f90:	4618      	mov	r0, r3
 8022f92:	b00b      	add	sp, #44	@ 0x2c
 8022f94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *mask = slash ? (uint32_t) (0xffffffffU << (32 - slash)) : (uint32_t) 0;
 8022f98:	2200      	movs	r2, #0
 8022f9a:	e7e8      	b.n	8022f6e <parse_net+0x92>
  int n, a, b, c, d, slash = 32, len = 0;
 8022f9c:	2300      	movs	r3, #0
 8022f9e:	e7f7      	b.n	8022f90 <parse_net+0xb4>
 8022fa0:	2300      	movs	r3, #0
  return len;
 8022fa2:	e7f5      	b.n	8022f90 <parse_net+0xb4>
 8022fa4:	0803ab58 	.word	0x0803ab58
 8022fa8:	0803ab6c 	.word	0x0803ab6c

08022fac <mg_base64_decode>:
size_t mg_base64_decode(const char *src, size_t n, char *dst, size_t dl) {
 8022fac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022fb0:	4691      	mov	r9, r2
 8022fb2:	469b      	mov	fp, r3
  const char *end = src == NULL ? NULL : src + n;  // Cannot add to NULL
 8022fb4:	4604      	mov	r4, r0
 8022fb6:	b150      	cbz	r0, 8022fce <mg_base64_decode+0x22>
 8022fb8:	eb00 0a01 	add.w	sl, r0, r1
  if (dl < n / 4 * 3 + 1) goto fail;
 8022fbc:	0889      	lsrs	r1, r1, #2
 8022fbe:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022fc2:	3101      	adds	r1, #1
 8022fc4:	4559      	cmp	r1, fp
 8022fc6:	d847      	bhi.n	8023058 <mg_base64_decode+0xac>
  size_t len = 0;
 8022fc8:	f04f 0800 	mov.w	r8, #0
 8022fcc:	e003      	b.n	8022fd6 <mg_base64_decode+0x2a>
  const char *end = src == NULL ? NULL : src + n;  // Cannot add to NULL
 8022fce:	4682      	mov	sl, r0
 8022fd0:	e7f4      	b.n	8022fbc <mg_base64_decode+0x10>
    dst[len++] = (char) ((a << 2) | (b >> 4));
 8022fd2:	4690      	mov	r8, r2
    src += 4;
 8022fd4:	3404      	adds	r4, #4
  while (src != NULL && src + 3 < end) {
 8022fd6:	2c00      	cmp	r4, #0
 8022fd8:	d03a      	beq.n	8023050 <mg_base64_decode+0xa4>
 8022fda:	1ce3      	adds	r3, r4, #3
 8022fdc:	4553      	cmp	r3, sl
 8022fde:	d237      	bcs.n	8023050 <mg_base64_decode+0xa4>
    int a = mg_base64_decode_single(src[0]),
 8022fe0:	7820      	ldrb	r0, [r4, #0]
 8022fe2:	f7fd f8a5 	bl	8020130 <mg_base64_decode_single>
 8022fe6:	4606      	mov	r6, r0
        b = mg_base64_decode_single(src[1]),
 8022fe8:	7860      	ldrb	r0, [r4, #1]
 8022fea:	f7fd f8a1 	bl	8020130 <mg_base64_decode_single>
 8022fee:	4605      	mov	r5, r0
        c = mg_base64_decode_single(src[2]),
 8022ff0:	78a0      	ldrb	r0, [r4, #2]
 8022ff2:	f7fd f89d 	bl	8020130 <mg_base64_decode_single>
 8022ff6:	4607      	mov	r7, r0
        d = mg_base64_decode_single(src[3]);
 8022ff8:	78e0      	ldrb	r0, [r4, #3]
 8022ffa:	f7fd f899 	bl	8020130 <mg_base64_decode_single>
    if (a == 64 || a < 0 || b == 64 || b < 0 || c < 0 || d < 0) {
 8022ffe:	2e40      	cmp	r6, #64	@ 0x40
 8023000:	d02a      	beq.n	8023058 <mg_base64_decode+0xac>
 8023002:	2e00      	cmp	r6, #0
 8023004:	db28      	blt.n	8023058 <mg_base64_decode+0xac>
 8023006:	2d40      	cmp	r5, #64	@ 0x40
 8023008:	d026      	beq.n	8023058 <mg_base64_decode+0xac>
 802300a:	2d00      	cmp	r5, #0
 802300c:	db24      	blt.n	8023058 <mg_base64_decode+0xac>
 802300e:	2f00      	cmp	r7, #0
 8023010:	db22      	blt.n	8023058 <mg_base64_decode+0xac>
 8023012:	2800      	cmp	r0, #0
 8023014:	db20      	blt.n	8023058 <mg_base64_decode+0xac>
    dst[len++] = (char) ((a << 2) | (b >> 4));
 8023016:	112b      	asrs	r3, r5, #4
 8023018:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
 802301c:	f108 0201 	add.w	r2, r8, #1
 8023020:	f809 3008 	strb.w	r3, [r9, r8]
    if (src[2] != '=') {
 8023024:	78a3      	ldrb	r3, [r4, #2]
 8023026:	2b3d      	cmp	r3, #61	@ 0x3d
 8023028:	d0d3      	beq.n	8022fd2 <mg_base64_decode+0x26>
      dst[len++] = (char) ((b << 4) | (c >> 2));
 802302a:	10bb      	asrs	r3, r7, #2
 802302c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8023030:	f108 0102 	add.w	r1, r8, #2
 8023034:	f809 3002 	strb.w	r3, [r9, r2]
      if (src[3] != '=') dst[len++] = (char) ((c << 6) | d);
 8023038:	78e3      	ldrb	r3, [r4, #3]
 802303a:	2b3d      	cmp	r3, #61	@ 0x3d
 802303c:	d006      	beq.n	802304c <mg_base64_decode+0xa0>
 802303e:	ea40 1087 	orr.w	r0, r0, r7, lsl #6
 8023042:	f108 0803 	add.w	r8, r8, #3
 8023046:	f809 0001 	strb.w	r0, [r9, r1]
 802304a:	e7c3      	b.n	8022fd4 <mg_base64_decode+0x28>
      dst[len++] = (char) ((b << 4) | (c >> 2));
 802304c:	4688      	mov	r8, r1
 802304e:	e7c1      	b.n	8022fd4 <mg_base64_decode+0x28>
  dst[len] = '\0';
 8023050:	2300      	movs	r3, #0
 8023052:	f809 3008 	strb.w	r3, [r9, r8]
  return len;
 8023056:	e006      	b.n	8023066 <mg_base64_decode+0xba>
  if (dl > 0) dst[0] = '\0';
 8023058:	f1bb 0f00 	cmp.w	fp, #0
 802305c:	d006      	beq.n	802306c <mg_base64_decode+0xc0>
 802305e:	f04f 0800 	mov.w	r8, #0
 8023062:	f889 8000 	strb.w	r8, [r9]
}
 8023066:	4640      	mov	r0, r8
 8023068:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return 0;
 802306c:	46d8      	mov	r8, fp
 802306e:	e7fa      	b.n	8023066 <mg_base64_decode+0xba>

08023070 <mg_resolve_cancel>:
void mg_resolve_cancel(struct mg_connection *c) {
 8023070:	b570      	push	{r4, r5, r6, lr}
 8023072:	4605      	mov	r5, r0
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 8023074:	6843      	ldr	r3, [r0, #4]
 8023076:	f103 0630 	add.w	r6, r3, #48	@ 0x30
  for (d = *head; d != NULL; d = tmp) {
 802307a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 802307c:	e000      	b.n	8023080 <mg_resolve_cancel+0x10>
void mg_resolve_cancel(struct mg_connection *c) {
 802307e:	4621      	mov	r1, r4
  for (d = *head; d != NULL; d = tmp) {
 8023080:	b139      	cbz	r1, 8023092 <mg_resolve_cancel+0x22>
    tmp = d->next;
 8023082:	680c      	ldr	r4, [r1, #0]
    if (d->c == c) mg_dns_free(head, d);
 8023084:	684b      	ldr	r3, [r1, #4]
 8023086:	42ab      	cmp	r3, r5
 8023088:	d1f9      	bne.n	802307e <mg_resolve_cancel+0xe>
 802308a:	4630      	mov	r0, r6
 802308c:	f7fe fe12 	bl	8021cb4 <mg_dns_free>
 8023090:	e7f5      	b.n	802307e <mg_resolve_cancel+0xe>
}
 8023092:	bd70      	pop	{r4, r5, r6, pc}

08023094 <mg_dns_parse_rr>:
                       bool is_question, struct mg_dns_rr *rr) {
 8023094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023096:	b083      	sub	sp, #12
 8023098:	9c08      	ldr	r4, [sp, #32]
  const uint8_t *s = buf + ofs, *e = &buf[len];
 802309a:	1886      	adds	r6, r0, r2
 802309c:	1847      	adds	r7, r0, r1
  memset(rr, 0, sizeof(*rr));
 802309e:	f04f 0c00 	mov.w	ip, #0
 80230a2:	f8c4 c000 	str.w	ip, [r4]
 80230a6:	f8c4 c004 	str.w	ip, [r4, #4]
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 80230aa:	290b      	cmp	r1, #11
 80230ac:	d934      	bls.n	8023118 <mg_dns_parse_rr+0x84>
 80230ae:	461d      	mov	r5, r3
  if (len > 512) return 0;  //  Too large, we don't expect that
 80230b0:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80230b4:	d833      	bhi.n	802311e <mg_dns_parse_rr+0x8a>
  if (s >= e) return 0;     //  Overflow
 80230b6:	42be      	cmp	r6, r7
 80230b8:	d301      	bcc.n	80230be <mg_dns_parse_rr+0x2a>
 80230ba:	2000      	movs	r0, #0
 80230bc:	e02d      	b.n	802311a <mg_dns_parse_rr+0x86>
  if ((rr->nlen = (uint16_t) mg_dns_parse_name(buf, len, ofs, NULL, 0)) == 0)
 80230be:	4663      	mov	r3, ip
 80230c0:	f8cd c000 	str.w	ip, [sp]
 80230c4:	f7fe fed5 	bl	8021e72 <mg_dns_parse_name>
 80230c8:	b283      	uxth	r3, r0
 80230ca:	8023      	strh	r3, [r4, #0]
 80230cc:	b34b      	cbz	r3, 8023122 <mg_dns_parse_rr+0x8e>
  s += rr->nlen + 4;
 80230ce:	3304      	adds	r3, #4
 80230d0:	441e      	add	r6, r3
  if (s > e) return 0;
 80230d2:	42b7      	cmp	r7, r6
 80230d4:	d327      	bcc.n	8023126 <mg_dns_parse_rr+0x92>
  rr->atype = (uint16_t) (((uint16_t) s[-4] << 8) | s[-3]);
 80230d6:	f816 2c04 	ldrb.w	r2, [r6, #-4]
 80230da:	f816 3c03 	ldrb.w	r3, [r6, #-3]
 80230de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80230e2:	8063      	strh	r3, [r4, #2]
  rr->aclass = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 80230e4:	f816 2c02 	ldrb.w	r2, [r6, #-2]
 80230e8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80230ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80230f0:	80a3      	strh	r3, [r4, #4]
  if (is_question) return (size_t) (rr->nlen + 4);
 80230f2:	b975      	cbnz	r5, 8023112 <mg_dns_parse_rr+0x7e>
  s += 6;
 80230f4:	1db3      	adds	r3, r6, #6
  if (s > e) return 0;
 80230f6:	429f      	cmp	r7, r3
 80230f8:	d317      	bcc.n	802312a <mg_dns_parse_rr+0x96>
  rr->alen = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 80230fa:	7931      	ldrb	r1, [r6, #4]
 80230fc:	7972      	ldrb	r2, [r6, #5]
 80230fe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8023102:	80e2      	strh	r2, [r4, #6]
  if (s + rr->alen > e) return 0;
 8023104:	4413      	add	r3, r2
 8023106:	42bb      	cmp	r3, r7
 8023108:	d811      	bhi.n	802312e <mg_dns_parse_rr+0x9a>
  return (size_t) (rr->nlen + rr->alen + 10);
 802310a:	fa12 f080 	uxtah	r0, r2, r0
 802310e:	300a      	adds	r0, #10
 8023110:	e003      	b.n	802311a <mg_dns_parse_rr+0x86>
  if (is_question) return (size_t) (rr->nlen + 4);
 8023112:	b280      	uxth	r0, r0
 8023114:	3004      	adds	r0, #4
 8023116:	e000      	b.n	802311a <mg_dns_parse_rr+0x86>
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 8023118:	2000      	movs	r0, #0
}
 802311a:	b003      	add	sp, #12
 802311c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (len > 512) return 0;  //  Too large, we don't expect that
 802311e:	2000      	movs	r0, #0
 8023120:	e7fb      	b.n	802311a <mg_dns_parse_rr+0x86>
    return 0;
 8023122:	2000      	movs	r0, #0
 8023124:	e7f9      	b.n	802311a <mg_dns_parse_rr+0x86>
  if (s > e) return 0;
 8023126:	2000      	movs	r0, #0
 8023128:	e7f7      	b.n	802311a <mg_dns_parse_rr+0x86>
  if (s > e) return 0;
 802312a:	2000      	movs	r0, #0
 802312c:	e7f5      	b.n	802311a <mg_dns_parse_rr+0x86>
  if (s + rr->alen > e) return 0;
 802312e:	2000      	movs	r0, #0
 8023130:	e7f3      	b.n	802311a <mg_dns_parse_rr+0x86>

08023132 <mg_call>:
void mg_call(struct mg_connection *c, int ev, void *ev_data) {
 8023132:	b570      	push	{r4, r5, r6, lr}
 8023134:	4604      	mov	r4, r0
 8023136:	460d      	mov	r5, r1
 8023138:	4616      	mov	r6, r2
  if (c->pfn != NULL) c->pfn(c, ev, ev_data);
 802313a:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 802313e:	b103      	cbz	r3, 8023142 <mg_call+0x10>
 8023140:	4798      	blx	r3
  if (c->fn != NULL) c->fn(c, ev, ev_data);
 8023142:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8023144:	b11b      	cbz	r3, 802314e <mg_call+0x1c>
 8023146:	4632      	mov	r2, r6
 8023148:	4629      	mov	r1, r5
 802314a:	4620      	mov	r0, r4
 802314c:	4798      	blx	r3
}
 802314e:	bd70      	pop	{r4, r5, r6, pc}

08023150 <mg_fs_open>:
struct mg_fd *mg_fs_open(struct mg_fs *fs, const char *path, int flags) {
 8023150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023152:	4604      	mov	r4, r0
 8023154:	460d      	mov	r5, r1
 8023156:	4616      	mov	r6, r2
  struct mg_fd *fd = (struct mg_fd *) calloc(1, sizeof(*fd));
 8023158:	2108      	movs	r1, #8
 802315a:	2001      	movs	r0, #1
 802315c:	f7ff fe58 	bl	8022e10 <mg_calloc>
  if (fd != NULL) {
 8023160:	4607      	mov	r7, r0
 8023162:	b138      	cbz	r0, 8023174 <mg_fs_open+0x24>
    fd->fd = fs->op(path, flags);
 8023164:	68a3      	ldr	r3, [r4, #8]
 8023166:	4631      	mov	r1, r6
 8023168:	4628      	mov	r0, r5
 802316a:	4798      	blx	r3
 802316c:	4605      	mov	r5, r0
 802316e:	6038      	str	r0, [r7, #0]
    fd->fs = fs;
 8023170:	607c      	str	r4, [r7, #4]
    if (fd->fd == NULL) {
 8023172:	b108      	cbz	r0, 8023178 <mg_fs_open+0x28>
}
 8023174:	4638      	mov	r0, r7
 8023176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      free(fd);
 8023178:	4638      	mov	r0, r7
 802317a:	f7f7 ffa7 	bl	801b0cc <vPortFree>
      fd = NULL;
 802317e:	462f      	mov	r7, r5
  return fd;
 8023180:	e7f8      	b.n	8023174 <mg_fs_open+0x24>

08023182 <mg_fs_close>:
  if (fd != NULL) {
 8023182:	b148      	cbz	r0, 8023198 <mg_fs_close+0x16>
void mg_fs_close(struct mg_fd *fd) {
 8023184:	b510      	push	{r4, lr}
 8023186:	4604      	mov	r4, r0
    fd->fs->cl(fd->fd);
 8023188:	6843      	ldr	r3, [r0, #4]
 802318a:	68db      	ldr	r3, [r3, #12]
 802318c:	6800      	ldr	r0, [r0, #0]
 802318e:	4798      	blx	r3
    free(fd);
 8023190:	4620      	mov	r0, r4
 8023192:	f7f7 ff9b 	bl	801b0cc <vPortFree>
}
 8023196:	bd10      	pop	{r4, pc}
 8023198:	4770      	bx	lr
	...

0802319c <restore_http_cb>:
static void restore_http_cb(struct mg_connection *c) {
 802319c:	b510      	push	{r4, lr}
 802319e:	4604      	mov	r4, r0
  mg_fs_close((struct mg_fd *) c->pfn_data);
 80231a0:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 80231a4:	f7ff ffed 	bl	8023182 <mg_fs_close>
  c->pfn_data = NULL;
 80231a8:	2200      	movs	r2, #0
 80231aa:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
  c->pfn = http_cb;
 80231ae:	4b05      	ldr	r3, [pc, #20]	@ (80231c4 <restore_http_cb+0x28>)
 80231b0:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  c->is_resp = 0;
 80231b4:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80231b8:	f362 13c7 	bfi	r3, r2, #7, #1
 80231bc:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 80231c0:	bd10      	pop	{r4, pc}
 80231c2:	bf00      	nop
 80231c4:	08026aed 	.word	0x08026aed

080231c8 <mg_to_size_t>:
bool mg_to_size_t(struct mg_str str, size_t *val) {
 80231c8:	b470      	push	{r4, r5, r6}
 80231ca:	b083      	sub	sp, #12
 80231cc:	ab02      	add	r3, sp, #8
 80231ce:	e903 0003 	stmdb	r3, {r0, r1}
  size_t i = 0, max = (size_t) -1, max2 = max / 10, result = 0, ndigits = 0;
 80231d2:	2300      	movs	r3, #0
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 80231d4:	e000      	b.n	80231d8 <mg_to_size_t+0x10>
 80231d6:	3301      	adds	r3, #1
 80231d8:	9c01      	ldr	r4, [sp, #4]
 80231da:	429c      	cmp	r4, r3
 80231dc:	d905      	bls.n	80231ea <mg_to_size_t+0x22>
 80231de:	9900      	ldr	r1, [sp, #0]
 80231e0:	5cc9      	ldrb	r1, [r1, r3]
 80231e2:	2920      	cmp	r1, #32
 80231e4:	d0f7      	beq.n	80231d6 <mg_to_size_t+0xe>
 80231e6:	2909      	cmp	r1, #9
 80231e8:	d0f5      	beq.n	80231d6 <mg_to_size_t+0xe>
  if (i < str.len && str.buf[i] == '-') return false;
 80231ea:	429c      	cmp	r4, r3
 80231ec:	d906      	bls.n	80231fc <mg_to_size_t+0x34>
 80231ee:	9900      	ldr	r1, [sp, #0]
 80231f0:	5cc9      	ldrb	r1, [r1, r3]
 80231f2:	292d      	cmp	r1, #45	@ 0x2d
 80231f4:	d02c      	beq.n	8023250 <mg_to_size_t+0x88>
 80231f6:	2500      	movs	r5, #0
 80231f8:	4628      	mov	r0, r5
 80231fa:	e001      	b.n	8023200 <mg_to_size_t+0x38>
 80231fc:	2500      	movs	r5, #0
 80231fe:	4628      	mov	r0, r5
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 8023200:	429c      	cmp	r4, r3
 8023202:	d917      	bls.n	8023234 <mg_to_size_t+0x6c>
 8023204:	9900      	ldr	r1, [sp, #0]
 8023206:	5cc9      	ldrb	r1, [r1, r3]
 8023208:	292f      	cmp	r1, #47	@ 0x2f
 802320a:	d913      	bls.n	8023234 <mg_to_size_t+0x6c>
 802320c:	2939      	cmp	r1, #57	@ 0x39
 802320e:	d811      	bhi.n	8023234 <mg_to_size_t+0x6c>
    size_t digit = (size_t) (str.buf[i] - '0');
 8023210:	3930      	subs	r1, #48	@ 0x30
    if (result > max2) return false;  // Overflow
 8023212:	4e15      	ldr	r6, [pc, #84]	@ (8023268 <mg_to_size_t+0xa0>)
 8023214:	42b0      	cmp	r0, r6
 8023216:	d81d      	bhi.n	8023254 <mg_to_size_t+0x8c>
    result *= 10;
 8023218:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 802321c:	ea4f 0c40 	mov.w	ip, r0, lsl #1
    if (result > max - digit) return false;  // Overflow
 8023220:	43ce      	mvns	r6, r1
 8023222:	ebb6 0f40 	cmp.w	r6, r0, lsl #1
 8023226:	d317      	bcc.n	8023258 <mg_to_size_t+0x90>
    result += digit;
 8023228:	eb01 000c 	add.w	r0, r1, ip
    i++, ndigits++;
 802322c:	3301      	adds	r3, #1
 802322e:	3501      	adds	r5, #1
 8023230:	e7e6      	b.n	8023200 <mg_to_size_t+0x38>
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 8023232:	3301      	adds	r3, #1
 8023234:	429c      	cmp	r4, r3
 8023236:	d905      	bls.n	8023244 <mg_to_size_t+0x7c>
 8023238:	9900      	ldr	r1, [sp, #0]
 802323a:	5cc9      	ldrb	r1, [r1, r3]
 802323c:	2920      	cmp	r1, #32
 802323e:	d0f8      	beq.n	8023232 <mg_to_size_t+0x6a>
 8023240:	2909      	cmp	r1, #9
 8023242:	d0f6      	beq.n	8023232 <mg_to_size_t+0x6a>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 8023244:	b155      	cbz	r5, 802325c <mg_to_size_t+0x94>
  if (i != str.len) return false;  // Ditto
 8023246:	429c      	cmp	r4, r3
 8023248:	d10c      	bne.n	8023264 <mg_to_size_t+0x9c>
  *val = (size_t) result;
 802324a:	6010      	str	r0, [r2, #0]
  return true;
 802324c:	2001      	movs	r0, #1
 802324e:	e006      	b.n	802325e <mg_to_size_t+0x96>
  if (i < str.len && str.buf[i] == '-') return false;
 8023250:	2000      	movs	r0, #0
 8023252:	e004      	b.n	802325e <mg_to_size_t+0x96>
    if (result > max2) return false;  // Overflow
 8023254:	2000      	movs	r0, #0
 8023256:	e002      	b.n	802325e <mg_to_size_t+0x96>
    if (result > max - digit) return false;  // Overflow
 8023258:	2000      	movs	r0, #0
 802325a:	e000      	b.n	802325e <mg_to_size_t+0x96>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 802325c:	2000      	movs	r0, #0
}
 802325e:	b003      	add	sp, #12
 8023260:	bc70      	pop	{r4, r5, r6}
 8023262:	4770      	bx	lr
  if (i != str.len) return false;  // Ditto
 8023264:	2000      	movs	r0, #0
 8023266:	e7fa      	b.n	802325e <mg_to_size_t+0x96>
 8023268:	19999999 	.word	0x19999999

0802326c <mg_http_get_request_len>:
int mg_http_get_request_len(const unsigned char *buf, size_t buf_len) {
 802326c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802326e:	4606      	mov	r6, r0
 8023270:	460f      	mov	r7, r1
  for (i = 0; i < buf_len; i++) {
 8023272:	2400      	movs	r4, #0
 8023274:	e007      	b.n	8023286 <mg_http_get_request_len+0x1a>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 8023276:	1933      	adds	r3, r6, r4
 8023278:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 802327c:	2b0a      	cmp	r3, #10
 802327e:	d10d      	bne.n	802329c <mg_http_get_request_len+0x30>
      return (int) i + 1;
 8023280:	1c60      	adds	r0, r4, #1
 8023282:	e01b      	b.n	80232bc <mg_http_get_request_len+0x50>
  for (i = 0; i < buf_len; i++) {
 8023284:	3401      	adds	r4, #1
 8023286:	42bc      	cmp	r4, r7
 8023288:	d217      	bcs.n	80232ba <mg_http_get_request_len+0x4e>
    if (!isok(buf[i])) return -1;
 802328a:	5d35      	ldrb	r5, [r6, r4]
 802328c:	4628      	mov	r0, r5
 802328e:	f7fd f8d4 	bl	802043a <isok>
 8023292:	b1a0      	cbz	r0, 80232be <mg_http_get_request_len+0x52>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 8023294:	2c00      	cmp	r4, #0
 8023296:	d0f5      	beq.n	8023284 <mg_http_get_request_len+0x18>
 8023298:	2d0a      	cmp	r5, #10
 802329a:	d0ec      	beq.n	8023276 <mg_http_get_request_len+0xa>
 802329c:	2c03      	cmp	r4, #3
 802329e:	d9f1      	bls.n	8023284 <mg_http_get_request_len+0x18>
        (i > 3 && buf[i] == '\n' && buf[i - 1] == '\r' && buf[i - 2] == '\n'))
 80232a0:	2d0a      	cmp	r5, #10
 80232a2:	d1ef      	bne.n	8023284 <mg_http_get_request_len+0x18>
 80232a4:	1933      	adds	r3, r6, r4
 80232a6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80232aa:	2b0d      	cmp	r3, #13
 80232ac:	d1ea      	bne.n	8023284 <mg_http_get_request_len+0x18>
 80232ae:	1933      	adds	r3, r6, r4
 80232b0:	f813 3c02 	ldrb.w	r3, [r3, #-2]
 80232b4:	2b0a      	cmp	r3, #10
 80232b6:	d1e5      	bne.n	8023284 <mg_http_get_request_len+0x18>
 80232b8:	e7e2      	b.n	8023280 <mg_http_get_request_len+0x14>
  return 0;
 80232ba:	2000      	movs	r0, #0
}
 80232bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!isok(buf[i])) return -1;
 80232be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80232c2:	e7fb      	b.n	80232bc <mg_http_get_request_len+0x50>

080232c4 <mg_http_get_header>:
struct mg_str *mg_http_get_header(struct mg_http_message *h, const char *name) {
 80232c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80232c8:	4605      	mov	r5, r0
 80232ca:	460f      	mov	r7, r1
  size_t i, n = strlen(name), max = sizeof(h->headers) / sizeof(h->headers[0]);
 80232cc:	4608      	mov	r0, r1
 80232ce:	f7ec ffe7 	bl	80102a0 <strlen>
 80232d2:	4606      	mov	r6, r0
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 80232d4:	2400      	movs	r4, #0
 80232d6:	e000      	b.n	80232da <mg_http_get_header+0x16>
 80232d8:	3401      	adds	r4, #1
 80232da:	2c1d      	cmp	r4, #29
 80232dc:	d819      	bhi.n	8023312 <mg_http_get_header+0x4e>
 80232de:	1ca3      	adds	r3, r4, #2
 80232e0:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 80232e4:	685a      	ldr	r2, [r3, #4]
 80232e6:	b17a      	cbz	r2, 8023308 <mg_http_get_header+0x44>
    struct mg_str *k = &h->headers[i].name, *v = &h->headers[i].value;
 80232e8:	0123      	lsls	r3, r4, #4
 80232ea:	3328      	adds	r3, #40	@ 0x28
 80232ec:	eb05 0803 	add.w	r8, r5, r3
    if (n == k->len && mg_ncasecmp(k->buf, name, n) == 0) return v;
 80232f0:	42b2      	cmp	r2, r6
 80232f2:	d1f1      	bne.n	80232d8 <mg_http_get_header+0x14>
 80232f4:	1ca3      	adds	r3, r4, #2
 80232f6:	011b      	lsls	r3, r3, #4
 80232f8:	4632      	mov	r2, r6
 80232fa:	4639      	mov	r1, r7
 80232fc:	58e8      	ldr	r0, [r5, r3]
 80232fe:	f7fd f867 	bl	80203d0 <mg_ncasecmp>
 8023302:	2800      	cmp	r0, #0
 8023304:	d1e8      	bne.n	80232d8 <mg_http_get_header+0x14>
 8023306:	e001      	b.n	802330c <mg_http_get_header+0x48>
  return NULL;
 8023308:	f04f 0800 	mov.w	r8, #0
}
 802330c:	4640      	mov	r0, r8
 802330e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return NULL;
 8023312:	f04f 0800 	mov.w	r8, #0
 8023316:	e7f9      	b.n	802330c <mg_http_get_header+0x48>

08023318 <mg_http_status>:
int mg_http_status(const struct mg_http_message *hm) {
 8023318:	b508      	push	{r3, lr}
  return atoi(hm->uri.buf);
 802331a:	6880      	ldr	r0, [r0, #8]
 802331c:	f007 f96c 	bl	802a5f8 <atoi>
}
 8023320:	bd08      	pop	{r3, pc}
	...

08023324 <mg_json_get>:
int mg_json_get(struct mg_str json, const char *path, int *toklen) {
 8023324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023328:	b095      	sub	sp, #84	@ 0x54
 802332a:	ac08      	add	r4, sp, #32
 802332c:	e884 0003 	stmia.w	r4, {r0, r1}
 8023330:	9202      	str	r2, [sp, #8]
  const char *s = json.buf;
 8023332:	4606      	mov	r6, r0
  int len = (int) json.len;
 8023334:	4688      	mov	r8, r1
  if (toklen) *toklen = 0;
 8023336:	469a      	mov	sl, r3
 8023338:	b113      	cbz	r3, 8023340 <mg_json_get+0x1c>
 802333a:	2300      	movs	r3, #0
 802333c:	f8ca 3000 	str.w	r3, [sl]
  if (path[0] != '$') return MG_JSON_INVALID;
 8023340:	9b02      	ldr	r3, [sp, #8]
 8023342:	781b      	ldrb	r3, [r3, #0]
 8023344:	2b24      	cmp	r3, #36	@ 0x24
 8023346:	f040 8232 	bne.w	80237ae <mg_json_get+0x48a>
  int ci = -1, ei = -1;  // Current and expected index in array
 802334a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802334e:	9303      	str	r3, [sp, #12]
 8023350:	9301      	str	r3, [sp, #4]
  int pos = 1;           // Current position in `path`
 8023352:	2301      	movs	r3, #1
 8023354:	9304      	str	r3, [sp, #16]
  int ed = 0;            // Expected depth
 8023356:	f04f 0b00 	mov.w	fp, #0
  int depth = 0;         // Current depth (nesting level)
 802335a:	465f      	mov	r7, fp
  int j = 0;             // Offset in `s` we're looking for (return value)
 802335c:	f8cd b014 	str.w	fp, [sp, #20]
  for (i = 0; i < len; i++) {
 8023360:	465c      	mov	r4, fp
  enum { S_VALUE, S_KEY, S_COLON, S_COMMA_OR_EOO } expecting = S_VALUE;
 8023362:	465b      	mov	r3, fp
 8023364:	f8cd a018 	str.w	sl, [sp, #24]
 8023368:	e190      	b.n	802368c <mg_json_get+0x368>
        if (depth == ed) j = i;
 802336a:	455f      	cmp	r7, fp
 802336c:	d029      	beq.n	80233c2 <mg_json_get+0x9e>
        if (c == '{') {
 802336e:	2d7b      	cmp	r5, #123	@ 0x7b
 8023370:	d029      	beq.n	80233c6 <mg_json_get+0xa2>
        } else if (c == '[') {
 8023372:	2d5b      	cmp	r5, #91	@ 0x5b
 8023374:	d047      	beq.n	8023406 <mg_json_get+0xe2>
        } else if (c == ']' && depth > 0) {  // Empty array
 8023376:	2d5d      	cmp	r5, #93	@ 0x5d
 8023378:	d07a      	beq.n	8023470 <mg_json_get+0x14c>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 802337a:	2d74      	cmp	r5, #116	@ 0x74
 802337c:	f000 80a4 	beq.w	80234c8 <mg_json_get+0x1a4>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 8023380:	2d6e      	cmp	r5, #110	@ 0x6e
 8023382:	f000 80b0 	beq.w	80234e6 <mg_json_get+0x1c2>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 8023386:	2d66      	cmp	r5, #102	@ 0x66
 8023388:	f000 80bc 	beq.w	8023504 <mg_json_get+0x1e0>
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 802338c:	2d2d      	cmp	r5, #45	@ 0x2d
 802338e:	d005      	beq.n	802339c <mg_json_get+0x78>
 8023390:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8023394:	b2db      	uxtb	r3, r3
 8023396:	2b09      	cmp	r3, #9
 8023398:	f200 80c3 	bhi.w	8023522 <mg_json_get+0x1fe>
          int numlen = 0;
 802339c:	2300      	movs	r3, #0
 802339e:	930b      	str	r3, [sp, #44]	@ 0x2c
          mg_atod(&s[i], len - i, &numlen);
 80233a0:	aa0b      	add	r2, sp, #44	@ 0x2c
 80233a2:	eba8 0104 	sub.w	r1, r8, r4
 80233a6:	4648      	mov	r0, r9
 80233a8:	f7fd fcc2 	bl	8020d30 <mg_atod>
          i += numlen - 1;
 80233ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80233ae:	3b01      	subs	r3, #1
 80233b0:	441c      	add	r4, r3
        MG_CHECKRET('V');
 80233b2:	455f      	cmp	r7, fp
 80233b4:	f000 80c6 	beq.w	8023544 <mg_json_get+0x220>
        if (depth == ed && ei >= 0) ci++;
 80233b8:	455f      	cmp	r7, fp
 80233ba:	f000 80da 	beq.w	8023572 <mg_json_get+0x24e>
        expecting = S_COMMA_OR_EOO;
 80233be:	2303      	movs	r3, #3
 80233c0:	e163      	b.n	802368a <mg_json_get+0x366>
        if (depth == ed) j = i;
 80233c2:	9405      	str	r4, [sp, #20]
 80233c4:	e7d3      	b.n	802336e <mg_json_get+0x4a>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 80233c6:	2f1d      	cmp	r7, #29
 80233c8:	f300 81f4 	bgt.w	80237b4 <mg_json_get+0x490>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 80233cc:	455f      	cmp	r7, fp
 80233ce:	d007      	beq.n	80233e0 <mg_json_get+0xbc>
          nesting[depth++] = c;
 80233d0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80233d4:	446b      	add	r3, sp
 80233d6:	f803 5c20 	strb.w	r5, [r3, #-32]
 80233da:	3701      	adds	r7, #1
          expecting = S_KEY;
 80233dc:	2301      	movs	r3, #1
          break;
 80233de:	e154      	b.n	802368a <mg_json_get+0x366>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 80233e0:	9b02      	ldr	r3, [sp, #8]
 80233e2:	9a04      	ldr	r2, [sp, #16]
 80233e4:	5c9b      	ldrb	r3, [r3, r2]
 80233e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80233e8:	d1f2      	bne.n	80233d0 <mg_json_get+0xac>
 80233ea:	9b01      	ldr	r3, [sp, #4]
 80233ec:	9a03      	ldr	r2, [sp, #12]
 80233ee:	4293      	cmp	r3, r2
 80233f0:	d1ee      	bne.n	80233d0 <mg_json_get+0xac>
            ed++, pos++, ci = ei = -1;
 80233f2:	f10b 0b01 	add.w	fp, fp, #1
 80233f6:	9b04      	ldr	r3, [sp, #16]
 80233f8:	3301      	adds	r3, #1
 80233fa:	9304      	str	r3, [sp, #16]
 80233fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8023400:	9303      	str	r3, [sp, #12]
 8023402:	9301      	str	r3, [sp, #4]
 8023404:	e7e4      	b.n	80233d0 <mg_json_get+0xac>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8023406:	2f1d      	cmp	r7, #29
 8023408:	f300 81d7 	bgt.w	80237ba <mg_json_get+0x496>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 802340c:	455f      	cmp	r7, fp
 802340e:	d006      	beq.n	802341e <mg_json_get+0xfa>
          nesting[depth++] = c;
 8023410:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8023414:	446a      	add	r2, sp
 8023416:	f802 5c20 	strb.w	r5, [r2, #-32]
 802341a:	3701      	adds	r7, #1
          break;
 802341c:	e135      	b.n	802368a <mg_json_get+0x366>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 802341e:	9a02      	ldr	r2, [sp, #8]
 8023420:	9904      	ldr	r1, [sp, #16]
 8023422:	5c52      	ldrb	r2, [r2, r1]
 8023424:	2a5b      	cmp	r2, #91	@ 0x5b
 8023426:	d1f3      	bne.n	8023410 <mg_json_get+0xec>
 8023428:	9a01      	ldr	r2, [sp, #4]
 802342a:	9903      	ldr	r1, [sp, #12]
 802342c:	428a      	cmp	r2, r1
 802342e:	d1ef      	bne.n	8023410 <mg_json_get+0xec>
            ed++, pos++, ci = 0;
 8023430:	f10b 0b01 	add.w	fp, fp, #1
 8023434:	9804      	ldr	r0, [sp, #16]
 8023436:	3001      	adds	r0, #1
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 8023438:	2100      	movs	r1, #0
 802343a:	f8dd c008 	ldr.w	ip, [sp, #8]
 802343e:	e005      	b.n	802344c <mg_json_get+0x128>
              ei *= 10;
 8023440:	eb01 0181 	add.w	r1, r1, r1, lsl #2
              ei += path[pos] - '0';
 8023444:	3a30      	subs	r2, #48	@ 0x30
 8023446:	eb02 0141 	add.w	r1, r2, r1, lsl #1
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 802344a:	3001      	adds	r0, #1
 802344c:	f81c 2000 	ldrb.w	r2, [ip, r0]
 8023450:	2a5d      	cmp	r2, #93	@ 0x5d
 8023452:	d001      	beq.n	8023458 <mg_json_get+0x134>
 8023454:	2a00      	cmp	r2, #0
 8023456:	d1f3      	bne.n	8023440 <mg_json_get+0x11c>
            if (path[pos] != 0) pos++;
 8023458:	9004      	str	r0, [sp, #16]
 802345a:	9103      	str	r1, [sp, #12]
 802345c:	b12a      	cbz	r2, 802346a <mg_json_get+0x146>
 802345e:	4602      	mov	r2, r0
 8023460:	3201      	adds	r2, #1
 8023462:	9204      	str	r2, [sp, #16]
            ed++, pos++, ci = 0;
 8023464:	2200      	movs	r2, #0
 8023466:	9201      	str	r2, [sp, #4]
 8023468:	e7d2      	b.n	8023410 <mg_json_get+0xec>
 802346a:	2200      	movs	r2, #0
 802346c:	9201      	str	r2, [sp, #4]
 802346e:	e7cf      	b.n	8023410 <mg_json_get+0xec>
        } else if (c == ']' && depth > 0) {  // Empty array
 8023470:	2f00      	cmp	r7, #0
 8023472:	dd82      	ble.n	802337a <mg_json_get+0x56>
          MG_EOO(']');
 8023474:	455f      	cmp	r7, fp
 8023476:	d020      	beq.n	80234ba <mg_json_get+0x196>
 8023478:	3f01      	subs	r7, #1
 802347a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 802347e:	446b      	add	r3, sp
 8023480:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8023484:	3302      	adds	r3, #2
 8023486:	429d      	cmp	r5, r3
 8023488:	f040 819a 	bne.w	80237c0 <mg_json_get+0x49c>
 802348c:	455f      	cmp	r7, fp
 802348e:	d190      	bne.n	80233b2 <mg_json_get+0x8e>
 8023490:	9b02      	ldr	r3, [sp, #8]
 8023492:	9a04      	ldr	r2, [sp, #16]
 8023494:	5c9b      	ldrb	r3, [r3, r2]
 8023496:	2b00      	cmp	r3, #0
 8023498:	d18b      	bne.n	80233b2 <mg_json_get+0x8e>
 802349a:	9b01      	ldr	r3, [sp, #4]
 802349c:	9a03      	ldr	r2, [sp, #12]
 802349e:	4293      	cmp	r3, r2
 80234a0:	d187      	bne.n	80233b2 <mg_json_get+0x8e>
 80234a2:	f8dd a018 	ldr.w	sl, [sp, #24]
 80234a6:	f1ba 0f00 	cmp.w	sl, #0
 80234aa:	d004      	beq.n	80234b6 <mg_json_get+0x192>
 80234ac:	9b05      	ldr	r3, [sp, #20]
 80234ae:	1ae3      	subs	r3, r4, r3
 80234b0:	3301      	adds	r3, #1
 80234b2:	f8ca 3000 	str.w	r3, [sl]
 80234b6:	9d05      	ldr	r5, [sp, #20]
 80234b8:	e175      	b.n	80237a6 <mg_json_get+0x482>
 80234ba:	9b01      	ldr	r3, [sp, #4]
 80234bc:	9a03      	ldr	r2, [sp, #12]
 80234be:	4293      	cmp	r3, r2
 80234c0:	d0da      	beq.n	8023478 <mg_json_get+0x154>
 80234c2:	f06f 0502 	mvn.w	r5, #2
 80234c6:	e16e      	b.n	80237a6 <mg_json_get+0x482>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 80234c8:	1ce3      	adds	r3, r4, #3
 80234ca:	9307      	str	r3, [sp, #28]
 80234cc:	4543      	cmp	r3, r8
 80234ce:	f6bf af57 	bge.w	8023380 <mg_json_get+0x5c>
 80234d2:	2204      	movs	r2, #4
 80234d4:	49a3      	ldr	r1, [pc, #652]	@ (8023764 <mg_json_get+0x440>)
 80234d6:	4648      	mov	r0, r9
 80234d8:	f009 fd2e 	bl	802cf38 <memcmp>
 80234dc:	2800      	cmp	r0, #0
 80234de:	f47f af4f 	bne.w	8023380 <mg_json_get+0x5c>
          i += 3;
 80234e2:	9c07      	ldr	r4, [sp, #28]
 80234e4:	e765      	b.n	80233b2 <mg_json_get+0x8e>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 80234e6:	1ce3      	adds	r3, r4, #3
 80234e8:	9307      	str	r3, [sp, #28]
 80234ea:	4543      	cmp	r3, r8
 80234ec:	f6bf af4b 	bge.w	8023386 <mg_json_get+0x62>
 80234f0:	2204      	movs	r2, #4
 80234f2:	499d      	ldr	r1, [pc, #628]	@ (8023768 <mg_json_get+0x444>)
 80234f4:	4648      	mov	r0, r9
 80234f6:	f009 fd1f 	bl	802cf38 <memcmp>
 80234fa:	2800      	cmp	r0, #0
 80234fc:	f47f af43 	bne.w	8023386 <mg_json_get+0x62>
          i += 3;
 8023500:	9c07      	ldr	r4, [sp, #28]
 8023502:	e756      	b.n	80233b2 <mg_json_get+0x8e>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 8023504:	1d23      	adds	r3, r4, #4
 8023506:	9307      	str	r3, [sp, #28]
 8023508:	4543      	cmp	r3, r8
 802350a:	f6bf af3f 	bge.w	802338c <mg_json_get+0x68>
 802350e:	2205      	movs	r2, #5
 8023510:	4996      	ldr	r1, [pc, #600]	@ (802376c <mg_json_get+0x448>)
 8023512:	4648      	mov	r0, r9
 8023514:	f009 fd10 	bl	802cf38 <memcmp>
 8023518:	2800      	cmp	r0, #0
 802351a:	f47f af37 	bne.w	802338c <mg_json_get+0x68>
          i += 4;
 802351e:	9c07      	ldr	r4, [sp, #28]
 8023520:	e747      	b.n	80233b2 <mg_json_get+0x8e>
        } else if (c == '"') {
 8023522:	2d22      	cmp	r5, #34	@ 0x22
 8023524:	f040 814f 	bne.w	80237c6 <mg_json_get+0x4a2>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 8023528:	f10a 0001 	add.w	r0, sl, #1
 802352c:	eba8 0104 	sub.w	r1, r8, r4
 8023530:	3901      	subs	r1, #1
 8023532:	4430      	add	r0, r6
 8023534:	f7fd fbd5 	bl	8020ce2 <mg_pass_string>
          if (n < 0) return n;
 8023538:	1e05      	subs	r5, r0, #0
 802353a:	f2c0 8134 	blt.w	80237a6 <mg_json_get+0x482>
          i += n + 1;
 802353e:	3501      	adds	r5, #1
 8023540:	442c      	add	r4, r5
 8023542:	e736      	b.n	80233b2 <mg_json_get+0x8e>
        MG_CHECKRET('V');
 8023544:	9b02      	ldr	r3, [sp, #8]
 8023546:	9a04      	ldr	r2, [sp, #16]
 8023548:	5c9b      	ldrb	r3, [r3, r2]
 802354a:	2b00      	cmp	r3, #0
 802354c:	f47f af34 	bne.w	80233b8 <mg_json_get+0x94>
 8023550:	9b01      	ldr	r3, [sp, #4]
 8023552:	9a03      	ldr	r2, [sp, #12]
 8023554:	4293      	cmp	r3, r2
 8023556:	f47f af2f 	bne.w	80233b8 <mg_json_get+0x94>
 802355a:	f8dd a018 	ldr.w	sl, [sp, #24]
 802355e:	f1ba 0f00 	cmp.w	sl, #0
 8023562:	d004      	beq.n	802356e <mg_json_get+0x24a>
 8023564:	9b05      	ldr	r3, [sp, #20]
 8023566:	1ae3      	subs	r3, r4, r3
 8023568:	3301      	adds	r3, #1
 802356a:	f8ca 3000 	str.w	r3, [sl]
 802356e:	9d05      	ldr	r5, [sp, #20]
 8023570:	e119      	b.n	80237a6 <mg_json_get+0x482>
        if (depth == ed && ei >= 0) ci++;
 8023572:	9b03      	ldr	r3, [sp, #12]
 8023574:	2b00      	cmp	r3, #0
 8023576:	f2c0 8110 	blt.w	802379a <mg_json_get+0x476>
 802357a:	9b01      	ldr	r3, [sp, #4]
 802357c:	3301      	adds	r3, #1
 802357e:	9301      	str	r3, [sp, #4]
        expecting = S_COMMA_OR_EOO;
 8023580:	2303      	movs	r3, #3
 8023582:	e082      	b.n	802368a <mg_json_get+0x366>
        if (c == '"') {
 8023584:	2d22      	cmp	r5, #34	@ 0x22
 8023586:	d014      	beq.n	80235b2 <mg_json_get+0x28e>
        } else if (c == '}') {  // Empty object
 8023588:	2d7d      	cmp	r5, #125	@ 0x7d
 802358a:	f040 8125 	bne.w	80237d8 <mg_json_get+0x4b4>
          MG_EOO('}');
 802358e:	455f      	cmp	r7, fp
 8023590:	d053      	beq.n	802363a <mg_json_get+0x316>
 8023592:	3f01      	subs	r7, #1
 8023594:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8023598:	446b      	add	r3, sp
 802359a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 802359e:	3302      	adds	r3, #2
 80235a0:	429d      	cmp	r5, r3
 80235a2:	f040 811c 	bne.w	80237de <mg_json_get+0x4ba>
 80235a6:	455f      	cmp	r7, fp
 80235a8:	d04e      	beq.n	8023648 <mg_json_get+0x324>
          if (depth == ed && ei >= 0) ci++;
 80235aa:	455f      	cmp	r7, fp
 80235ac:	d061      	beq.n	8023672 <mg_json_get+0x34e>
          expecting = S_COMMA_OR_EOO;
 80235ae:	2303      	movs	r3, #3
 80235b0:	e06b      	b.n	802368a <mg_json_get+0x366>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 80235b2:	f104 0901 	add.w	r9, r4, #1
 80235b6:	44b1      	add	r9, r6
 80235b8:	eba8 0104 	sub.w	r1, r8, r4
 80235bc:	3901      	subs	r1, #1
 80235be:	4648      	mov	r0, r9
 80235c0:	f7fd fb8f 	bl	8020ce2 <mg_pass_string>
          if (n < 0) return n;
 80235c4:	1e05      	subs	r5, r0, #0
 80235c6:	f2c0 80ee 	blt.w	80237a6 <mg_json_get+0x482>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 80235ca:	1c63      	adds	r3, r4, #1
 80235cc:	442b      	add	r3, r5
 80235ce:	4543      	cmp	r3, r8
 80235d0:	f280 80fc 	bge.w	80237cc <mg_json_get+0x4a8>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 80235d4:	455f      	cmp	r7, fp
 80235d6:	f2c0 80fc 	blt.w	80237d2 <mg_json_get+0x4ae>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 80235da:	d005      	beq.n	80235e8 <mg_json_get+0x2c4>
          if (depth == ed && path[pos - 1] == '.' &&
 80235dc:	455f      	cmp	r7, fp
 80235de:	d00d      	beq.n	80235fc <mg_json_get+0x2d8>
          i += n + 1;
 80235e0:	3501      	adds	r5, #1
 80235e2:	442c      	add	r4, r5
          expecting = S_COLON;
 80235e4:	2302      	movs	r3, #2
 80235e6:	e050      	b.n	802368a <mg_json_get+0x366>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 80235e8:	9b02      	ldr	r3, [sp, #8]
 80235ea:	9a04      	ldr	r2, [sp, #16]
 80235ec:	4413      	add	r3, r2
 80235ee:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80235f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80235f4:	d0f2      	beq.n	80235dc <mg_json_get+0x2b8>
 80235f6:	f06f 0502 	mvn.w	r5, #2
 80235fa:	e0d4      	b.n	80237a6 <mg_json_get+0x482>
          if (depth == ed && path[pos - 1] == '.' &&
 80235fc:	9b02      	ldr	r3, [sp, #8]
 80235fe:	9a04      	ldr	r2, [sp, #16]
 8023600:	4413      	add	r3, r2
 8023602:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8023606:	2b2e      	cmp	r3, #46	@ 0x2e
 8023608:	d1ea      	bne.n	80235e0 <mg_json_get+0x2bc>
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 802360a:	462a      	mov	r2, r5
 802360c:	9b02      	ldr	r3, [sp, #8]
 802360e:	9904      	ldr	r1, [sp, #16]
 8023610:	1859      	adds	r1, r3, r1
 8023612:	4648      	mov	r0, r9
 8023614:	f009 fd59 	bl	802d0ca <strncmp>
          if (depth == ed && path[pos - 1] == '.' &&
 8023618:	2800      	cmp	r0, #0
 802361a:	d1e1      	bne.n	80235e0 <mg_json_get+0x2bc>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 802361c:	9904      	ldr	r1, [sp, #16]
 802361e:	194b      	adds	r3, r1, r5
 8023620:	9a02      	ldr	r2, [sp, #8]
 8023622:	5cd2      	ldrb	r2, [r2, r3]
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 8023624:	b12a      	cbz	r2, 8023632 <mg_json_get+0x30e>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8023626:	2a2e      	cmp	r2, #46	@ 0x2e
 8023628:	d005      	beq.n	8023636 <mg_json_get+0x312>
 802362a:	2a5b      	cmp	r2, #91	@ 0x5b
 802362c:	d1d8      	bne.n	80235e0 <mg_json_get+0x2bc>
            pos += n;
 802362e:	9304      	str	r3, [sp, #16]
 8023630:	e7d6      	b.n	80235e0 <mg_json_get+0x2bc>
 8023632:	9304      	str	r3, [sp, #16]
 8023634:	e7d4      	b.n	80235e0 <mg_json_get+0x2bc>
 8023636:	9304      	str	r3, [sp, #16]
 8023638:	e7d2      	b.n	80235e0 <mg_json_get+0x2bc>
          MG_EOO('}');
 802363a:	9b01      	ldr	r3, [sp, #4]
 802363c:	9a03      	ldr	r2, [sp, #12]
 802363e:	4293      	cmp	r3, r2
 8023640:	d0a7      	beq.n	8023592 <mg_json_get+0x26e>
 8023642:	f06f 0502 	mvn.w	r5, #2
 8023646:	e0ae      	b.n	80237a6 <mg_json_get+0x482>
 8023648:	9b02      	ldr	r3, [sp, #8]
 802364a:	9a04      	ldr	r2, [sp, #16]
 802364c:	5c9b      	ldrb	r3, [r3, r2]
 802364e:	2b00      	cmp	r3, #0
 8023650:	d1ab      	bne.n	80235aa <mg_json_get+0x286>
 8023652:	9b01      	ldr	r3, [sp, #4]
 8023654:	9a03      	ldr	r2, [sp, #12]
 8023656:	4293      	cmp	r3, r2
 8023658:	d1a7      	bne.n	80235aa <mg_json_get+0x286>
 802365a:	f8dd a018 	ldr.w	sl, [sp, #24]
 802365e:	f1ba 0f00 	cmp.w	sl, #0
 8023662:	d004      	beq.n	802366e <mg_json_get+0x34a>
 8023664:	9b05      	ldr	r3, [sp, #20]
 8023666:	1ae3      	subs	r3, r4, r3
 8023668:	3301      	adds	r3, #1
 802366a:	f8ca 3000 	str.w	r3, [sl]
 802366e:	9d05      	ldr	r5, [sp, #20]
 8023670:	e099      	b.n	80237a6 <mg_json_get+0x482>
          if (depth == ed && ei >= 0) ci++;
 8023672:	9b03      	ldr	r3, [sp, #12]
 8023674:	2b00      	cmp	r3, #0
 8023676:	f2c0 8092 	blt.w	802379e <mg_json_get+0x47a>
 802367a:	9b01      	ldr	r3, [sp, #4]
 802367c:	3301      	adds	r3, #1
 802367e:	9301      	str	r3, [sp, #4]
          expecting = S_COMMA_OR_EOO;
 8023680:	2303      	movs	r3, #3
 8023682:	e002      	b.n	802368a <mg_json_get+0x366>
        if (c == ':') {
 8023684:	2d3a      	cmp	r5, #58	@ 0x3a
 8023686:	d11d      	bne.n	80236c4 <mg_json_get+0x3a0>
          expecting = S_VALUE;
 8023688:	2300      	movs	r3, #0
  for (i = 0; i < len; i++) {
 802368a:	3401      	adds	r4, #1
 802368c:	4544      	cmp	r4, r8
 802368e:	f280 8088 	bge.w	80237a2 <mg_json_get+0x47e>
    unsigned char c = ((unsigned char *) s)[i];
 8023692:	46a2      	mov	sl, r4
 8023694:	eb06 0904 	add.w	r9, r6, r4
 8023698:	5d35      	ldrb	r5, [r6, r4]
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 802369a:	2d20      	cmp	r5, #32
 802369c:	d0f5      	beq.n	802368a <mg_json_get+0x366>
 802369e:	2d09      	cmp	r5, #9
 80236a0:	d0f3      	beq.n	802368a <mg_json_get+0x366>
 80236a2:	2d0a      	cmp	r5, #10
 80236a4:	d0f1      	beq.n	802368a <mg_json_get+0x366>
 80236a6:	2d0d      	cmp	r5, #13
 80236a8:	d0ef      	beq.n	802368a <mg_json_get+0x366>
    switch (expecting) {
 80236aa:	2b03      	cmp	r3, #3
 80236ac:	d8ed      	bhi.n	802368a <mg_json_get+0x366>
 80236ae:	a201      	add	r2, pc, #4	@ (adr r2, 80236b4 <mg_json_get+0x390>)
 80236b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80236b4:	0802336b 	.word	0x0802336b
 80236b8:	08023585 	.word	0x08023585
 80236bc:	08023685 	.word	0x08023685
 80236c0:	080236cb 	.word	0x080236cb
          return MG_JSON_INVALID;
 80236c4:	f06f 0501 	mvn.w	r5, #1
 80236c8:	e06d      	b.n	80237a6 <mg_json_get+0x482>
        if (depth <= 0) {
 80236ca:	2f00      	cmp	r7, #0
 80236cc:	f340 808a 	ble.w	80237e4 <mg_json_get+0x4c0>
        } else if (c == ',') {
 80236d0:	2d2c      	cmp	r5, #44	@ 0x2c
 80236d2:	d01e      	beq.n	8023712 <mg_json_get+0x3ee>
        } else if (c == ']' || c == '}') {
 80236d4:	2d5d      	cmp	r5, #93	@ 0x5d
 80236d6:	d002      	beq.n	80236de <mg_json_get+0x3ba>
 80236d8:	2d7d      	cmp	r5, #125	@ 0x7d
 80236da:	f040 8086 	bne.w	80237ea <mg_json_get+0x4c6>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 80236de:	455f      	cmp	r7, fp
 80236e0:	d021      	beq.n	8023726 <mg_json_get+0x402>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 80236e2:	455f      	cmp	r7, fp
 80236e4:	d02b      	beq.n	802373e <mg_json_get+0x41a>
          MG_EOO('O');
 80236e6:	455f      	cmp	r7, fp
 80236e8:	d035      	beq.n	8023756 <mg_json_get+0x432>
 80236ea:	3f01      	subs	r7, #1
 80236ec:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80236f0:	446a      	add	r2, sp
 80236f2:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 80236f6:	3202      	adds	r2, #2
 80236f8:	4295      	cmp	r5, r2
 80236fa:	d179      	bne.n	80237f0 <mg_json_get+0x4cc>
 80236fc:	455f      	cmp	r7, fp
 80236fe:	d037      	beq.n	8023770 <mg_json_get+0x44c>
          if (depth == ed && ei >= 0) ci++;
 8023700:	455f      	cmp	r7, fp
 8023702:	d1c2      	bne.n	802368a <mg_json_get+0x366>
 8023704:	9a03      	ldr	r2, [sp, #12]
 8023706:	2a00      	cmp	r2, #0
 8023708:	dbbf      	blt.n	802368a <mg_json_get+0x366>
 802370a:	9a01      	ldr	r2, [sp, #4]
 802370c:	3201      	adds	r2, #1
 802370e:	9201      	str	r2, [sp, #4]
 8023710:	e7bb      	b.n	802368a <mg_json_get+0x366>
          expecting = (nesting[depth - 1] == '{') ? S_KEY : S_VALUE;
 8023712:	f107 034f 	add.w	r3, r7, #79	@ 0x4f
 8023716:	446b      	add	r3, sp
 8023718:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 802371c:	2b7b      	cmp	r3, #123	@ 0x7b
 802371e:	bf14      	ite	ne
 8023720:	2300      	movne	r3, #0
 8023722:	2301      	moveq	r3, #1
 8023724:	e7b1      	b.n	802368a <mg_json_get+0x366>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 8023726:	2d7d      	cmp	r5, #125	@ 0x7d
 8023728:	d1db      	bne.n	80236e2 <mg_json_get+0x3be>
 802372a:	9a02      	ldr	r2, [sp, #8]
 802372c:	9904      	ldr	r1, [sp, #16]
 802372e:	440a      	add	r2, r1
 8023730:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8023734:	2a2e      	cmp	r2, #46	@ 0x2e
 8023736:	d1d4      	bne.n	80236e2 <mg_json_get+0x3be>
            return MG_JSON_NOT_FOUND;
 8023738:	f06f 0502 	mvn.w	r5, #2
 802373c:	e033      	b.n	80237a6 <mg_json_get+0x482>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 802373e:	2d5d      	cmp	r5, #93	@ 0x5d
 8023740:	d1d1      	bne.n	80236e6 <mg_json_get+0x3c2>
 8023742:	9a02      	ldr	r2, [sp, #8]
 8023744:	9904      	ldr	r1, [sp, #16]
 8023746:	440a      	add	r2, r1
 8023748:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 802374c:	2a2c      	cmp	r2, #44	@ 0x2c
 802374e:	d1ca      	bne.n	80236e6 <mg_json_get+0x3c2>
            return MG_JSON_NOT_FOUND;
 8023750:	f06f 0502 	mvn.w	r5, #2
 8023754:	e027      	b.n	80237a6 <mg_json_get+0x482>
          MG_EOO('O');
 8023756:	9a01      	ldr	r2, [sp, #4]
 8023758:	9903      	ldr	r1, [sp, #12]
 802375a:	428a      	cmp	r2, r1
 802375c:	d0c5      	beq.n	80236ea <mg_json_get+0x3c6>
 802375e:	f06f 0502 	mvn.w	r5, #2
 8023762:	e020      	b.n	80237a6 <mg_json_get+0x482>
 8023764:	080374fc 	.word	0x080374fc
 8023768:	0803ab7c 	.word	0x0803ab7c
 802376c:	08037504 	.word	0x08037504
 8023770:	9a02      	ldr	r2, [sp, #8]
 8023772:	9904      	ldr	r1, [sp, #16]
 8023774:	5c52      	ldrb	r2, [r2, r1]
 8023776:	2a00      	cmp	r2, #0
 8023778:	d1c2      	bne.n	8023700 <mg_json_get+0x3dc>
 802377a:	9a01      	ldr	r2, [sp, #4]
 802377c:	9903      	ldr	r1, [sp, #12]
 802377e:	428a      	cmp	r2, r1
 8023780:	d1be      	bne.n	8023700 <mg_json_get+0x3dc>
 8023782:	f8dd a018 	ldr.w	sl, [sp, #24]
 8023786:	f1ba 0f00 	cmp.w	sl, #0
 802378a:	d004      	beq.n	8023796 <mg_json_get+0x472>
 802378c:	9b05      	ldr	r3, [sp, #20]
 802378e:	1ae3      	subs	r3, r4, r3
 8023790:	3301      	adds	r3, #1
 8023792:	f8ca 3000 	str.w	r3, [sl]
 8023796:	9d05      	ldr	r5, [sp, #20]
 8023798:	e005      	b.n	80237a6 <mg_json_get+0x482>
        expecting = S_COMMA_OR_EOO;
 802379a:	2303      	movs	r3, #3
 802379c:	e775      	b.n	802368a <mg_json_get+0x366>
          expecting = S_COMMA_OR_EOO;
 802379e:	2303      	movs	r3, #3
 80237a0:	e773      	b.n	802368a <mg_json_get+0x366>
  return MG_JSON_NOT_FOUND;
 80237a2:	f06f 0502 	mvn.w	r5, #2
}
 80237a6:	4628      	mov	r0, r5
 80237a8:	b015      	add	sp, #84	@ 0x54
 80237aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (path[0] != '$') return MG_JSON_INVALID;
 80237ae:	f06f 0501 	mvn.w	r5, #1
 80237b2:	e7f8      	b.n	80237a6 <mg_json_get+0x482>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 80237b4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80237b8:	e7f5      	b.n	80237a6 <mg_json_get+0x482>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 80237ba:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80237be:	e7f2      	b.n	80237a6 <mg_json_get+0x482>
          MG_EOO(']');
 80237c0:	f06f 0501 	mvn.w	r5, #1
 80237c4:	e7ef      	b.n	80237a6 <mg_json_get+0x482>
          return MG_JSON_INVALID;
 80237c6:	f06f 0501 	mvn.w	r5, #1
 80237ca:	e7ec      	b.n	80237a6 <mg_json_get+0x482>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 80237cc:	f06f 0502 	mvn.w	r5, #2
 80237d0:	e7e9      	b.n	80237a6 <mg_json_get+0x482>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 80237d2:	f06f 0502 	mvn.w	r5, #2
 80237d6:	e7e6      	b.n	80237a6 <mg_json_get+0x482>
          return MG_JSON_INVALID;
 80237d8:	f06f 0501 	mvn.w	r5, #1
 80237dc:	e7e3      	b.n	80237a6 <mg_json_get+0x482>
          MG_EOO('}');
 80237de:	f06f 0501 	mvn.w	r5, #1
 80237e2:	e7e0      	b.n	80237a6 <mg_json_get+0x482>
          return MG_JSON_INVALID;
 80237e4:	f06f 0501 	mvn.w	r5, #1
 80237e8:	e7dd      	b.n	80237a6 <mg_json_get+0x482>
          return MG_JSON_INVALID;
 80237ea:	f06f 0501 	mvn.w	r5, #1
 80237ee:	e7da      	b.n	80237a6 <mg_json_get+0x482>
          MG_EOO('O');
 80237f0:	f06f 0501 	mvn.w	r5, #1
 80237f4:	e7d7      	b.n	80237a6 <mg_json_get+0x482>
 80237f6:	bf00      	nop

080237f8 <mg_json_get_num>:
bool mg_json_get_num(struct mg_str json, const char *path, double *v) {
 80237f8:	b510      	push	{r4, lr}
 80237fa:	b084      	sub	sp, #16
 80237fc:	46ec      	mov	ip, sp
 80237fe:	e88c 0003 	stmia.w	ip, {r0, r1}
 8023802:	461c      	mov	r4, r3
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 8023804:	ab03      	add	r3, sp, #12
 8023806:	e89c 0003 	ldmia.w	ip, {r0, r1}
 802380a:	f7ff fd8b 	bl	8023324 <mg_json_get>
 802380e:	1e02      	subs	r2, r0, #0
 8023810:	db11      	blt.n	8023836 <mg_json_get_num+0x3e>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 8023812:	9b00      	ldr	r3, [sp, #0]
 8023814:	1898      	adds	r0, r3, r2
 8023816:	5c9a      	ldrb	r2, [r3, r2]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 8023818:	2a2d      	cmp	r2, #45	@ 0x2d
 802381a:	d003      	beq.n	8023824 <mg_json_get_num+0x2c>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 802381c:	3a30      	subs	r2, #48	@ 0x30
 802381e:	b2d2      	uxtb	r2, r2
 8023820:	2a09      	cmp	r2, #9
 8023822:	d80b      	bhi.n	802383c <mg_json_get_num+0x44>
    if (v != NULL) *v = mg_atod(json.buf + n, toklen, NULL);
 8023824:	b164      	cbz	r4, 8023840 <mg_json_get_num+0x48>
 8023826:	2200      	movs	r2, #0
 8023828:	9903      	ldr	r1, [sp, #12]
 802382a:	f7fd fa81 	bl	8020d30 <mg_atod>
 802382e:	ed84 0b00 	vstr	d0, [r4]
    found = 1;
 8023832:	2001      	movs	r0, #1
 8023834:	e000      	b.n	8023838 <mg_json_get_num+0x40>
  int n, toklen, found = 0;
 8023836:	2000      	movs	r0, #0
}
 8023838:	b004      	add	sp, #16
 802383a:	bd10      	pop	{r4, pc}
  int n, toklen, found = 0;
 802383c:	2000      	movs	r0, #0
 802383e:	e7fb      	b.n	8023838 <mg_json_get_num+0x40>
    found = 1;
 8023840:	2001      	movs	r0, #1
 8023842:	e7f9      	b.n	8023838 <mg_json_get_num+0x40>

08023844 <mg_json_get_bool>:
bool mg_json_get_bool(struct mg_str json, const char *path, bool *v) {
 8023844:	b510      	push	{r4, lr}
 8023846:	b082      	sub	sp, #8
 8023848:	46ec      	mov	ip, sp
 802384a:	e88c 0003 	stmia.w	ip, {r0, r1}
 802384e:	461c      	mov	r4, r3
  int found = 0, off = mg_json_get(json, path, NULL);
 8023850:	2300      	movs	r3, #0
 8023852:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8023856:	f7ff fd65 	bl	8023324 <mg_json_get>
  if (off >= 0 && (json.buf[off] == 't' || json.buf[off] == 'f')) {
 802385a:	2800      	cmp	r0, #0
 802385c:	db0f      	blt.n	802387e <mg_json_get_bool+0x3a>
 802385e:	9b00      	ldr	r3, [sp, #0]
 8023860:	5c1b      	ldrb	r3, [r3, r0]
 8023862:	2b74      	cmp	r3, #116	@ 0x74
 8023864:	d003      	beq.n	802386e <mg_json_get_bool+0x2a>
 8023866:	2b66      	cmp	r3, #102	@ 0x66
 8023868:	d001      	beq.n	802386e <mg_json_get_bool+0x2a>
  int found = 0, off = mg_json_get(json, path, NULL);
 802386a:	2000      	movs	r0, #0
 802386c:	e008      	b.n	8023880 <mg_json_get_bool+0x3c>
    if (v != NULL) *v = json.buf[off] == 't';
 802386e:	b14c      	cbz	r4, 8023884 <mg_json_get_bool+0x40>
 8023870:	2b74      	cmp	r3, #116	@ 0x74
 8023872:	bf14      	ite	ne
 8023874:	2300      	movne	r3, #0
 8023876:	2301      	moveq	r3, #1
 8023878:	7023      	strb	r3, [r4, #0]
    found = 1;
 802387a:	2001      	movs	r0, #1
 802387c:	e000      	b.n	8023880 <mg_json_get_bool+0x3c>
  int found = 0, off = mg_json_get(json, path, NULL);
 802387e:	2000      	movs	r0, #0
}
 8023880:	b002      	add	sp, #8
 8023882:	bd10      	pop	{r4, pc}
    found = 1;
 8023884:	2001      	movs	r0, #1
 8023886:	e7fb      	b.n	8023880 <mg_json_get_bool+0x3c>

08023888 <mg_hexdump>:
void mg_hexdump(const void *buf, size_t len) {
 8023888:	b5f0      	push	{r4, r5, r6, r7, lr}
 802388a:	b085      	sub	sp, #20
 802388c:	4606      	mov	r6, r0
 802388e:	460f      	mov	r7, r1
  for (i = 0; i < len; i++) {
 8023890:	2500      	movs	r5, #0
  unsigned char ascii[16], alen = 0;
 8023892:	462c      	mov	r4, r5
  for (i = 0; i < len; i++) {
 8023894:	e038      	b.n	8023908 <mg_hexdump+0x80>
      logc(nibble((i >> 12) & 15)), logc(nibble((i >> 8) & 15)),
 8023896:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802389a:	f7fd fb5b 	bl	8020f54 <nibble>
 802389e:	f7fd fb41 	bl	8020f24 <logc>
 80238a2:	f3c5 2003 	ubfx	r0, r5, #8, #4
 80238a6:	f7fd fb55 	bl	8020f54 <nibble>
 80238aa:	f7fd fb3b 	bl	8020f24 <logc>
          logc(nibble((i >> 4) & 15)), logc('0'), logs("   ", 3);
 80238ae:	f3c5 1003 	ubfx	r0, r5, #4, #4
 80238b2:	f7fd fb4f 	bl	8020f54 <nibble>
 80238b6:	f7fd fb35 	bl	8020f24 <logc>
 80238ba:	2030      	movs	r0, #48	@ 0x30
 80238bc:	f7fd fb32 	bl	8020f24 <logc>
 80238c0:	2103      	movs	r1, #3
 80238c2:	4829      	ldr	r0, [pc, #164]	@ (8023968 <mg_hexdump+0xe0>)
 80238c4:	f7fd fb3a 	bl	8020f3c <logs>
    logc(nibble(p[i] >> 4)), logc(nibble(p[i] & 15));  // Two nibbles, e.g. c5
 80238c8:	5d70      	ldrb	r0, [r6, r5]
 80238ca:	0900      	lsrs	r0, r0, #4
 80238cc:	f7fd fb42 	bl	8020f54 <nibble>
 80238d0:	f7fd fb28 	bl	8020f24 <logc>
 80238d4:	5d70      	ldrb	r0, [r6, r5]
 80238d6:	f000 000f 	and.w	r0, r0, #15
 80238da:	f7fd fb3b 	bl	8020f54 <nibble>
 80238de:	f7fd fb21 	bl	8020f24 <logc>
    logc(' ');                                         // Space after hex number
 80238e2:	2020      	movs	r0, #32
 80238e4:	f7fd fb1e 	bl	8020f24 <logc>
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 80238e8:	5d72      	ldrb	r2, [r6, r5]
 80238ea:	f1a2 0320 	sub.w	r3, r2, #32
 80238ee:	b2db      	uxtb	r3, r3
 80238f0:	2b5e      	cmp	r3, #94	@ 0x5e
 80238f2:	d900      	bls.n	80238f6 <mg_hexdump+0x6e>
 80238f4:	222e      	movs	r2, #46	@ 0x2e
 80238f6:	1c63      	adds	r3, r4, #1
 80238f8:	f104 0110 	add.w	r1, r4, #16
 80238fc:	eb0d 0401 	add.w	r4, sp, r1
 8023900:	f804 2c10 	strb.w	r2, [r4, #-16]
  for (i = 0; i < len; i++) {
 8023904:	3501      	adds	r5, #1
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 8023906:	b2dc      	uxtb	r4, r3
  for (i = 0; i < len; i++) {
 8023908:	42bd      	cmp	r5, r7
 802390a:	d21e      	bcs.n	802394a <mg_hexdump+0xc2>
    if ((i % 16) == 0) {
 802390c:	f015 0f0f 	tst.w	r5, #15
 8023910:	d1da      	bne.n	80238c8 <mg_hexdump+0x40>
      if (i > 0) logs("  ", 2), logs((char *) ascii, 16), logc('\n'), alen = 0;
 8023912:	2d00      	cmp	r5, #0
 8023914:	d0bf      	beq.n	8023896 <mg_hexdump+0xe>
 8023916:	2102      	movs	r1, #2
 8023918:	4814      	ldr	r0, [pc, #80]	@ (802396c <mg_hexdump+0xe4>)
 802391a:	f7fd fb0f 	bl	8020f3c <logs>
 802391e:	2110      	movs	r1, #16
 8023920:	4668      	mov	r0, sp
 8023922:	f7fd fb0b 	bl	8020f3c <logs>
 8023926:	200a      	movs	r0, #10
 8023928:	f7fd fafc 	bl	8020f24 <logc>
 802392c:	2400      	movs	r4, #0
 802392e:	e7b2      	b.n	8023896 <mg_hexdump+0xe>
  while (alen < 16) logs("   ", 3), ascii[alen++] = ' ';
 8023930:	2103      	movs	r1, #3
 8023932:	480d      	ldr	r0, [pc, #52]	@ (8023968 <mg_hexdump+0xe0>)
 8023934:	f7fd fb02 	bl	8020f3c <logs>
 8023938:	1c63      	adds	r3, r4, #1
 802393a:	f104 0210 	add.w	r2, r4, #16
 802393e:	eb0d 0402 	add.w	r4, sp, r2
 8023942:	2220      	movs	r2, #32
 8023944:	f804 2c10 	strb.w	r2, [r4, #-16]
 8023948:	b2dc      	uxtb	r4, r3
 802394a:	2c0f      	cmp	r4, #15
 802394c:	d9f0      	bls.n	8023930 <mg_hexdump+0xa8>
  logs("  ", 2), logs((char *) ascii, 16), logc('\n');
 802394e:	2102      	movs	r1, #2
 8023950:	4806      	ldr	r0, [pc, #24]	@ (802396c <mg_hexdump+0xe4>)
 8023952:	f7fd faf3 	bl	8020f3c <logs>
 8023956:	2110      	movs	r1, #16
 8023958:	4668      	mov	r0, sp
 802395a:	f7fd faef 	bl	8020f3c <logs>
 802395e:	200a      	movs	r0, #10
 8023960:	f7fd fae0 	bl	8020f24 <logc>
}
 8023964:	b005      	add	sp, #20
 8023966:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023968:	0803ab88 	.word	0x0803ab88
 802396c:	0803ab84 	.word	0x0803ab84

08023970 <mg_md5_init>:
  ctx->buf[0] = 0x67452301;
 8023970:	4b09      	ldr	r3, [pc, #36]	@ (8023998 <mg_md5_init+0x28>)
 8023972:	6003      	str	r3, [r0, #0]
  ctx->buf[1] = 0xefcdab89;
 8023974:	f103 3388 	add.w	r3, r3, #2290649224	@ 0x88888888
 8023978:	6043      	str	r3, [r0, #4]
  ctx->buf[2] = 0x98badcfe;
 802397a:	f103 4329 	add.w	r3, r3, #2835349504	@ 0xa9000000
 802397e:	f5a3 1396 	sub.w	r3, r3, #1228800	@ 0x12c000
 8023982:	f6a3 638b 	subw	r3, r3, #3723	@ 0xe8b
 8023986:	6083      	str	r3, [r0, #8]
  ctx->buf[3] = 0x10325476;
 8023988:	f1a3 3388 	sub.w	r3, r3, #2290649224	@ 0x88888888
 802398c:	60c3      	str	r3, [r0, #12]
  ctx->bits[0] = 0;
 802398e:	2300      	movs	r3, #0
 8023990:	6103      	str	r3, [r0, #16]
  ctx->bits[1] = 0;
 8023992:	6143      	str	r3, [r0, #20]
}
 8023994:	4770      	bx	lr
 8023996:	bf00      	nop
 8023998:	67452301 	.word	0x67452301

0802399c <mg_md5_update>:
void mg_md5_update(mg_md5_ctx *ctx, const unsigned char *buf, size_t len) {
 802399c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80239a0:	4606      	mov	r6, r0
 80239a2:	460c      	mov	r4, r1
 80239a4:	4615      	mov	r5, r2
  t = ctx->bits[0];
 80239a6:	6903      	ldr	r3, [r0, #16]
  if ((ctx->bits[0] = t + ((uint32_t) len << 3)) < t) ctx->bits[1]++;
 80239a8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80239ac:	6102      	str	r2, [r0, #16]
 80239ae:	429a      	cmp	r2, r3
 80239b0:	d202      	bcs.n	80239b8 <mg_md5_update+0x1c>
 80239b2:	6942      	ldr	r2, [r0, #20]
 80239b4:	3201      	adds	r2, #1
 80239b6:	6142      	str	r2, [r0, #20]
  ctx->bits[1] += (uint32_t) len >> 29;
 80239b8:	6972      	ldr	r2, [r6, #20]
 80239ba:	eb02 7255 	add.w	r2, r2, r5, lsr #29
 80239be:	6172      	str	r2, [r6, #20]
  t = (t >> 3) & 0x3f;
 80239c0:	f3c3 07c5 	ubfx	r7, r3, #3, #6
  if (t) {
 80239c4:	f413 7ffc 	tst.w	r3, #504	@ 0x1f8
 80239c8:	d035      	beq.n	8023a36 <mg_md5_update+0x9a>
    unsigned char *p = (unsigned char *) ctx->in + t;
 80239ca:	f106 0918 	add.w	r9, r6, #24
 80239ce:	eb09 0007 	add.w	r0, r9, r7
    t = 64 - t;
 80239d2:	f1c7 0840 	rsb	r8, r7, #64	@ 0x40
    if (len < t) {
 80239d6:	4545      	cmp	r5, r8
 80239d8:	d30b      	bcc.n	80239f2 <mg_md5_update+0x56>
    memcpy(p, buf, t);
 80239da:	4642      	mov	r2, r8
 80239dc:	4621      	mov	r1, r4
 80239de:	f00a fd7b 	bl	802e4d8 <memcpy>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 80239e2:	4649      	mov	r1, r9
 80239e4:	4630      	mov	r0, r6
 80239e6:	f7fd fabf 	bl	8020f68 <mg_md5_transform>
    buf += t;
 80239ea:	4444      	add	r4, r8
    len -= t;
 80239ec:	3f40      	subs	r7, #64	@ 0x40
 80239ee:	443d      	add	r5, r7
 80239f0:	e021      	b.n	8023a36 <mg_md5_update+0x9a>
      memcpy(p, buf, len);
 80239f2:	462a      	mov	r2, r5
 80239f4:	4621      	mov	r1, r4
 80239f6:	f00a fd6f 	bl	802e4d8 <memcpy>
      return;
 80239fa:	e024      	b.n	8023a46 <mg_md5_update+0xaa>
    memcpy(ctx->in, buf, 64);
 80239fc:	f106 0118 	add.w	r1, r6, #24
 8023a00:	4623      	mov	r3, r4
 8023a02:	468c      	mov	ip, r1
 8023a04:	f104 0840 	add.w	r8, r4, #64	@ 0x40
 8023a08:	681f      	ldr	r7, [r3, #0]
 8023a0a:	f8d3 e004 	ldr.w	lr, [r3, #4]
 8023a0e:	6898      	ldr	r0, [r3, #8]
 8023a10:	68da      	ldr	r2, [r3, #12]
 8023a12:	f8cc 7000 	str.w	r7, [ip]
 8023a16:	f8cc e004 	str.w	lr, [ip, #4]
 8023a1a:	f8cc 0008 	str.w	r0, [ip, #8]
 8023a1e:	f8cc 200c 	str.w	r2, [ip, #12]
 8023a22:	3310      	adds	r3, #16
 8023a24:	f10c 0c10 	add.w	ip, ip, #16
 8023a28:	4543      	cmp	r3, r8
 8023a2a:	d1ed      	bne.n	8023a08 <mg_md5_update+0x6c>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 8023a2c:	4630      	mov	r0, r6
 8023a2e:	f7fd fa9b 	bl	8020f68 <mg_md5_transform>
    buf += 64;
 8023a32:	3440      	adds	r4, #64	@ 0x40
    len -= 64;
 8023a34:	3d40      	subs	r5, #64	@ 0x40
  while (len >= 64) {
 8023a36:	2d3f      	cmp	r5, #63	@ 0x3f
 8023a38:	d8e0      	bhi.n	80239fc <mg_md5_update+0x60>
  memcpy(ctx->in, buf, len);
 8023a3a:	462a      	mov	r2, r5
 8023a3c:	4621      	mov	r1, r4
 8023a3e:	f106 0018 	add.w	r0, r6, #24
 8023a42:	f00a fd49 	bl	802e4d8 <memcpy>
}
 8023a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08023a4a <mg_md5_final>:
void mg_md5_final(mg_md5_ctx *ctx, unsigned char digest[16]) {
 8023a4a:	b570      	push	{r4, r5, r6, lr}
 8023a4c:	4604      	mov	r4, r0
 8023a4e:	460d      	mov	r5, r1
  count = (ctx->bits[0] >> 3) & 0x3F;
 8023a50:	6903      	ldr	r3, [r0, #16]
 8023a52:	f3c3 03c5 	ubfx	r3, r3, #3, #6
  p = ctx->in + count;
 8023a56:	f100 0618 	add.w	r6, r0, #24
 8023a5a:	18f0      	adds	r0, r6, r3
  *p++ = 0x80;
 8023a5c:	3001      	adds	r0, #1
 8023a5e:	2280      	movs	r2, #128	@ 0x80
 8023a60:	54f2      	strb	r2, [r6, r3]
  count = 64 - 1 - count;
 8023a62:	f1c3 023f 	rsb	r2, r3, #63	@ 0x3f
  if (count < 8) {
 8023a66:	2a07      	cmp	r2, #7
 8023a68:	d821      	bhi.n	8023aae <mg_md5_final+0x64>
    memset(p, 0, count);
 8023a6a:	2100      	movs	r1, #0
 8023a6c:	f009 faf8 	bl	802d060 <memset>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 8023a70:	4631      	mov	r1, r6
 8023a72:	4620      	mov	r0, r4
 8023a74:	f7fd fa78 	bl	8020f68 <mg_md5_transform>
    memset(ctx->in, 0, 56);
 8023a78:	2238      	movs	r2, #56	@ 0x38
 8023a7a:	2100      	movs	r1, #0
 8023a7c:	4630      	mov	r0, r6
 8023a7e:	f009 faef 	bl	802d060 <memset>
  a[14] = ctx->bits[0];
 8023a82:	6923      	ldr	r3, [r4, #16]
 8023a84:	6523      	str	r3, [r4, #80]	@ 0x50
  a[15] = ctx->bits[1];
 8023a86:	6963      	ldr	r3, [r4, #20]
 8023a88:	6563      	str	r3, [r4, #84]	@ 0x54
  mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 8023a8a:	4631      	mov	r1, r6
 8023a8c:	4620      	mov	r0, r4
 8023a8e:	f7fd fa6b 	bl	8020f68 <mg_md5_transform>
  memcpy(digest, ctx->buf, 16);
 8023a92:	6820      	ldr	r0, [r4, #0]
 8023a94:	6861      	ldr	r1, [r4, #4]
 8023a96:	68a2      	ldr	r2, [r4, #8]
 8023a98:	68e3      	ldr	r3, [r4, #12]
 8023a9a:	6028      	str	r0, [r5, #0]
 8023a9c:	6069      	str	r1, [r5, #4]
 8023a9e:	60aa      	str	r2, [r5, #8]
 8023aa0:	60eb      	str	r3, [r5, #12]
  memset((char *) ctx, 0, sizeof(*ctx));
 8023aa2:	2258      	movs	r2, #88	@ 0x58
 8023aa4:	2100      	movs	r1, #0
 8023aa6:	4620      	mov	r0, r4
 8023aa8:	f009 fada 	bl	802d060 <memset>
}
 8023aac:	bd70      	pop	{r4, r5, r6, pc}
    memset(p, 0, count - 8);
 8023aae:	f1c3 0237 	rsb	r2, r3, #55	@ 0x37
 8023ab2:	2100      	movs	r1, #0
 8023ab4:	f009 fad4 	bl	802d060 <memset>
 8023ab8:	e7e3      	b.n	8023a82 <mg_md5_final+0x38>

08023aba <mg_mqtt_parse>:
                  struct mg_mqtt_message *m) {
 8023aba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023abe:	4604      	mov	r4, r0
 8023ac0:	460d      	mov	r5, r1
 8023ac2:	4617      	mov	r7, r2
 8023ac4:	461e      	mov	r6, r3
  memset(m, 0, sizeof(*m));
 8023ac6:	2228      	movs	r2, #40	@ 0x28
 8023ac8:	2100      	movs	r1, #0
 8023aca:	4618      	mov	r0, r3
 8023acc:	f009 fac8 	bl	802d060 <memset>
  m->dgram.buf = (char *) buf;
 8023ad0:	6134      	str	r4, [r6, #16]
  if (len < 2) return MQTT_INCOMPLETE;
 8023ad2:	2d01      	cmp	r5, #1
 8023ad4:	f240 8088 	bls.w	8023be8 <mg_mqtt_parse+0x12e>
  m->cmd = (uint8_t) (buf[0] >> 4);
 8023ad8:	7820      	ldrb	r0, [r4, #0]
 8023ada:	0900      	lsrs	r0, r0, #4
 8023adc:	76b0      	strb	r0, [r6, #26]
  m->qos = (buf[0] >> 1) & 3;
 8023ade:	46a4      	mov	ip, r4
 8023ae0:	f81c 9b01 	ldrb.w	r9, [ip], #1
 8023ae4:	f3c9 0941 	ubfx	r9, r9, #1, #2
 8023ae8:	f886 901b 	strb.w	r9, [r6, #27]
  n = len_len = 0;
 8023aec:	2300      	movs	r3, #0
 8023aee:	4619      	mov	r1, r3
  uint8_t lc = 0, *p, *end;
 8023af0:	461a      	mov	r2, r3
  while ((size_t) (p - buf) < len) {
 8023af2:	ebac 0e04 	sub.w	lr, ip, r4
 8023af6:	45ae      	cmp	lr, r5
 8023af8:	d211      	bcs.n	8023b1e <mg_mqtt_parse+0x64>
    lc = *((uint8_t *) p++);
 8023afa:	f81c 2b01 	ldrb.w	r2, [ip], #1
    n += (uint32_t) ((lc & 0x7f) << 7 * len_len);
 8023afe:	f002 0e7f 	and.w	lr, r2, #127	@ 0x7f
 8023b02:	ebc3 08c3 	rsb	r8, r3, r3, lsl #3
 8023b06:	fa0e fe08 	lsl.w	lr, lr, r8
 8023b0a:	4471      	add	r1, lr
    len_len++;
 8023b0c:	3301      	adds	r3, #1
    if (!(lc & 0x80)) break;
 8023b0e:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8023b12:	d004      	beq.n	8023b1e <mg_mqtt_parse+0x64>
    if (len_len >= 4) return MQTT_MALFORMED;
 8023b14:	2b03      	cmp	r3, #3
 8023b16:	d9ec      	bls.n	8023af2 <mg_mqtt_parse+0x38>
 8023b18:	2002      	movs	r0, #2
}
 8023b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  end = p + n;
 8023b1e:	eb0c 0801 	add.w	r8, ip, r1
  if ((lc & 0x80) || (end > buf + len)) return MQTT_INCOMPLETE;
 8023b22:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8023b26:	d161      	bne.n	8023bec <mg_mqtt_parse+0x132>
 8023b28:	4425      	add	r5, r4
 8023b2a:	4545      	cmp	r5, r8
 8023b2c:	d360      	bcc.n	8023bf0 <mg_mqtt_parse+0x136>
  m->dgram.len = (size_t) (end - buf);
 8023b2e:	eba8 0304 	sub.w	r3, r8, r4
 8023b32:	6173      	str	r3, [r6, #20]
  switch (m->cmd) {
 8023b34:	2803      	cmp	r0, #3
 8023b36:	d01c      	beq.n	8023b72 <mg_mqtt_parse+0xb8>
 8023b38:	d80a      	bhi.n	8023b50 <mg_mqtt_parse+0x96>
 8023b3a:	2802      	cmp	r0, #2
 8023b3c:	d106      	bne.n	8023b4c <mg_mqtt_parse+0x92>
      if (end - p < 2) return MQTT_MALFORMED;
 8023b3e:	2901      	cmp	r1, #1
 8023b40:	dd5a      	ble.n	8023bf8 <mg_mqtt_parse+0x13e>
      m->ack = p[1];
 8023b42:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8023b46:	7733      	strb	r3, [r6, #28]
  return MQTT_OK;
 8023b48:	2000      	movs	r0, #0
      break;
 8023b4a:	e7e6      	b.n	8023b1a <mg_mqtt_parse+0x60>
  switch (m->cmd) {
 8023b4c:	2000      	movs	r0, #0
 8023b4e:	e7e4      	b.n	8023b1a <mg_mqtt_parse+0x60>
 8023b50:	3804      	subs	r0, #4
 8023b52:	b2c0      	uxtb	r0, r0
 8023b54:	2807      	cmp	r0, #7
 8023b56:	d84d      	bhi.n	8023bf4 <mg_mqtt_parse+0x13a>
      if (p + 2 > end) return MQTT_MALFORMED;
 8023b58:	f10c 0302 	add.w	r3, ip, #2
 8023b5c:	4543      	cmp	r3, r8
 8023b5e:	d84d      	bhi.n	8023bfc <mg_mqtt_parse+0x142>
      m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8023b60:	f89c 2000 	ldrb.w	r2, [ip]
 8023b64:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8023b68:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8023b6c:	8333      	strh	r3, [r6, #24]
  return MQTT_OK;
 8023b6e:	2000      	movs	r0, #0
      break;
 8023b70:	e7d3      	b.n	8023b1a <mg_mqtt_parse+0x60>
      if (p + 2 > end) return MQTT_MALFORMED;
 8023b72:	f10c 0202 	add.w	r2, ip, #2
 8023b76:	4542      	cmp	r2, r8
 8023b78:	d842      	bhi.n	8023c00 <mg_mqtt_parse+0x146>
      m->topic.len = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8023b7a:	f89c 1000 	ldrb.w	r1, [ip]
 8023b7e:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8023b82:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8023b86:	6073      	str	r3, [r6, #4]
      m->topic.buf = (char *) p + 2;
 8023b88:	6032      	str	r2, [r6, #0]
      p += 2 + m->topic.len;
 8023b8a:	3302      	adds	r3, #2
 8023b8c:	eb0c 0503 	add.w	r5, ip, r3
      if (p > end) return MQTT_MALFORMED;
 8023b90:	45a8      	cmp	r8, r5
 8023b92:	d337      	bcc.n	8023c04 <mg_mqtt_parse+0x14a>
      if (m->qos > 0) {
 8023b94:	f1b9 0f00 	cmp.w	r9, #0
 8023b98:	d008      	beq.n	8023bac <mg_mqtt_parse+0xf2>
        if (p + 2 > end) return MQTT_MALFORMED;
 8023b9a:	1caa      	adds	r2, r5, #2
 8023b9c:	4542      	cmp	r2, r8
 8023b9e:	d833      	bhi.n	8023c08 <mg_mqtt_parse+0x14e>
        m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8023ba0:	7829      	ldrb	r1, [r5, #0]
 8023ba2:	786b      	ldrb	r3, [r5, #1]
 8023ba4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8023ba8:	8333      	strh	r3, [r6, #24]
        p += 2;
 8023baa:	4615      	mov	r5, r2
      if (p > end) return MQTT_MALFORMED;
 8023bac:	4545      	cmp	r5, r8
 8023bae:	d82d      	bhi.n	8023c0c <mg_mqtt_parse+0x152>
      if (version == 5 && p + 2 < end) {
 8023bb0:	2f05      	cmp	r7, #5
 8023bb2:	d007      	beq.n	8023bc4 <mg_mqtt_parse+0x10a>
      if (p > end) return MQTT_MALFORMED;
 8023bb4:	4545      	cmp	r5, r8
 8023bb6:	d82d      	bhi.n	8023c14 <mg_mqtt_parse+0x15a>
      m->data.buf = (char *) p;
 8023bb8:	60b5      	str	r5, [r6, #8]
      m->data.len = (size_t) (end - p);
 8023bba:	eba8 0505 	sub.w	r5, r8, r5
 8023bbe:	60f5      	str	r5, [r6, #12]
  return MQTT_OK;
 8023bc0:	2000      	movs	r0, #0
      break;
 8023bc2:	e7aa      	b.n	8023b1a <mg_mqtt_parse+0x60>
      if (version == 5 && p + 2 < end) {
 8023bc4:	1cab      	adds	r3, r5, #2
 8023bc6:	4543      	cmp	r3, r8
 8023bc8:	d2f4      	bcs.n	8023bb4 <mg_mqtt_parse+0xfa>
            (uint32_t) decode_varint(p, (size_t) (end - p), &m->props_size);
 8023bca:	f106 0224 	add.w	r2, r6, #36	@ 0x24
 8023bce:	eba8 0105 	sub.w	r1, r8, r5
 8023bd2:	4628      	mov	r0, r5
 8023bd4:	f7fd fd70 	bl	80216b8 <decode_varint>
        if (!len_len) return MQTT_MALFORMED;
 8023bd8:	b1d0      	cbz	r0, 8023c10 <mg_mqtt_parse+0x156>
        m->props_start = (size_t) (p + len_len - buf);
 8023bda:	182b      	adds	r3, r5, r0
 8023bdc:	1b1b      	subs	r3, r3, r4
 8023bde:	6233      	str	r3, [r6, #32]
        p += len_len + m->props_size;
 8023be0:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8023be2:	4403      	add	r3, r0
 8023be4:	441d      	add	r5, r3
 8023be6:	e7e5      	b.n	8023bb4 <mg_mqtt_parse+0xfa>
  if (len < 2) return MQTT_INCOMPLETE;
 8023be8:	2001      	movs	r0, #1
 8023bea:	e796      	b.n	8023b1a <mg_mqtt_parse+0x60>
  if ((lc & 0x80) || (end > buf + len)) return MQTT_INCOMPLETE;
 8023bec:	2001      	movs	r0, #1
 8023bee:	e794      	b.n	8023b1a <mg_mqtt_parse+0x60>
 8023bf0:	2001      	movs	r0, #1
 8023bf2:	e792      	b.n	8023b1a <mg_mqtt_parse+0x60>
  switch (m->cmd) {
 8023bf4:	2000      	movs	r0, #0
 8023bf6:	e790      	b.n	8023b1a <mg_mqtt_parse+0x60>
      if (end - p < 2) return MQTT_MALFORMED;
 8023bf8:	2002      	movs	r0, #2
 8023bfa:	e78e      	b.n	8023b1a <mg_mqtt_parse+0x60>
      if (p + 2 > end) return MQTT_MALFORMED;
 8023bfc:	2002      	movs	r0, #2
 8023bfe:	e78c      	b.n	8023b1a <mg_mqtt_parse+0x60>
      if (p + 2 > end) return MQTT_MALFORMED;
 8023c00:	2002      	movs	r0, #2
 8023c02:	e78a      	b.n	8023b1a <mg_mqtt_parse+0x60>
      if (p > end) return MQTT_MALFORMED;
 8023c04:	2002      	movs	r0, #2
 8023c06:	e788      	b.n	8023b1a <mg_mqtt_parse+0x60>
        if (p + 2 > end) return MQTT_MALFORMED;
 8023c08:	2002      	movs	r0, #2
 8023c0a:	e786      	b.n	8023b1a <mg_mqtt_parse+0x60>
      if (p > end) return MQTT_MALFORMED;
 8023c0c:	2002      	movs	r0, #2
 8023c0e:	e784      	b.n	8023b1a <mg_mqtt_parse+0x60>
        if (!len_len) return MQTT_MALFORMED;
 8023c10:	2002      	movs	r0, #2
 8023c12:	e782      	b.n	8023b1a <mg_mqtt_parse+0x60>
      if (p > end) return MQTT_MALFORMED;
 8023c14:	2002      	movs	r0, #2
 8023c16:	e780      	b.n	8023b1a <mg_mqtt_parse+0x60>

08023c18 <mg_alloc_conn>:
struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {
 8023c18:	b510      	push	{r4, lr}
 8023c1a:	4604      	mov	r4, r0
      (struct mg_connection *) calloc(1, sizeof(*c) + mgr->extraconnsize);
 8023c1c:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8023c1e:	31b0      	adds	r1, #176	@ 0xb0
 8023c20:	2001      	movs	r0, #1
 8023c22:	f7ff f8f5 	bl	8022e10 <mg_calloc>
  if (c != NULL) {
 8023c26:	4603      	mov	r3, r0
 8023c28:	b148      	cbz	r0, 8023c3e <mg_alloc_conn+0x26>
    c->mgr = mgr;
 8023c2a:	6044      	str	r4, [r0, #4]
    c->send.align = c->recv.align = c->rtls.align = MG_IO_SIZE;
 8023c2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8023c30:	6742      	str	r2, [r0, #116]	@ 0x74
 8023c32:	6442      	str	r2, [r0, #68]	@ 0x44
 8023c34:	6542      	str	r2, [r0, #84]	@ 0x54
    c->id = ++mgr->nextid;
 8023c36:	69e2      	ldr	r2, [r4, #28]
 8023c38:	3201      	adds	r2, #1
 8023c3a:	61e2      	str	r2, [r4, #28]
 8023c3c:	6342      	str	r2, [r0, #52]	@ 0x34
}
 8023c3e:	4618      	mov	r0, r3
 8023c40:	bd10      	pop	{r4, pc}
	...

08023c44 <mg_mgr_init>:
void mg_mgr_init(struct mg_mgr *mgr) {
 8023c44:	b510      	push	{r4, lr}
 8023c46:	4604      	mov	r4, r0
  memset(mgr, 0, sizeof(*mgr));
 8023c48:	2248      	movs	r2, #72	@ 0x48
 8023c4a:	2100      	movs	r1, #0
 8023c4c:	f009 fa08 	bl	802d060 <memset>
  mgr->epoll_fd = -1;
 8023c50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8023c54:	63a3      	str	r3, [r4, #56]	@ 0x38
  mgr->pipe = MG_INVALID_SOCKET;
 8023c56:	6463      	str	r3, [r4, #68]	@ 0x44
  mgr->dnstimeout = 3000;
 8023c58:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8023c5c:	6163      	str	r3, [r4, #20]
  mgr->dns4.url = "udp://8.8.8.8:53";
 8023c5e:	4b02      	ldr	r3, [pc, #8]	@ (8023c68 <mg_mgr_init+0x24>)
 8023c60:	6063      	str	r3, [r4, #4]
  mgr->dns6.url = "udp://[2001:4860:4860::8888]:53";
 8023c62:	4b02      	ldr	r3, [pc, #8]	@ (8023c6c <mg_mgr_init+0x28>)
 8023c64:	60e3      	str	r3, [r4, #12]
}
 8023c66:	bd10      	pop	{r4, pc}
 8023c68:	0803ab8c 	.word	0x0803ab8c
 8023c6c:	0803aba0 	.word	0x0803aba0

08023c70 <mg_snprintf>:
size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {
 8023c70:	b40c      	push	{r2, r3}
 8023c72:	b500      	push	{lr}
 8023c74:	b083      	sub	sp, #12
 8023c76:	ab04      	add	r3, sp, #16
 8023c78:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 8023c7c:	9301      	str	r3, [sp, #4]
  n = mg_vsnprintf(buf, len, fmt, &ap);
 8023c7e:	ab01      	add	r3, sp, #4
 8023c80:	f000 fcde 	bl	8024640 <mg_vsnprintf>
}
 8023c84:	b003      	add	sp, #12
 8023c86:	f85d eb04 	ldr.w	lr, [sp], #4
 8023c8a:	b002      	add	sp, #8
 8023c8c:	4770      	bx	lr
	...

08023c90 <mg_dtoa>:
static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {
 8023c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c94:	b093      	sub	sp, #76	@ 0x4c
 8023c96:	9005      	str	r0, [sp, #20]
 8023c98:	9106      	str	r1, [sp, #24]
 8023c9a:	ec51 0b10 	vmov	r0, r1, d0
 8023c9e:	ed8d 0b02 	vstr	d0, [sp, #8]
 8023ca2:	4690      	mov	r8, r2
 8023ca4:	9307      	str	r3, [sp, #28]
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 8023ca6:	2200      	movs	r2, #0
 8023ca8:	2300      	movs	r3, #0
 8023caa:	f7ec ff25 	bl	8010af8 <__aeabi_dcmpeq>
 8023cae:	b9c8      	cbnz	r0, 8023ce4 <mg_dtoa+0x54>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 8023cb0:	ed9d 0b02 	vldr	d0, [sp, #8]
 8023cb4:	f7fc faae 	bl	8020214 <xisinf>
 8023cb8:	b9d8      	cbnz	r0, 8023cf2 <mg_dtoa+0x62>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 8023cba:	ed9d 0b02 	vldr	d0, [sp, #8]
 8023cbe:	f7fc fabb 	bl	8020238 <xisnan>
 8023cc2:	4606      	mov	r6, r0
 8023cc4:	bb28      	cbnz	r0, 8023d12 <mg_dtoa+0x82>
  if (d < 0.0) d = -d, buf[s++] = '-';
 8023cc6:	2200      	movs	r2, #0
 8023cc8:	2300      	movs	r3, #0
 8023cca:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8023cce:	4620      	mov	r0, r4
 8023cd0:	4629      	mov	r1, r5
 8023cd2:	f7ec ff1b 	bl	8010b0c <__aeabi_dcmplt>
 8023cd6:	bb18      	cbnz	r0, 8023d20 <mg_dtoa+0x90>
  int i, s = 0, n = 0, e = 0;
 8023cd8:	4637      	mov	r7, r6
  mul = 1.0;
 8023cda:	2400      	movs	r4, #0
 8023cdc:	4dba      	ldr	r5, [pc, #744]	@ (8023fc8 <mg_dtoa+0x338>)
 8023cde:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 8023ce2:	e02f      	b.n	8023d44 <mg_dtoa+0xb4>
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 8023ce4:	4bb9      	ldr	r3, [pc, #740]	@ (8023fcc <mg_dtoa+0x33c>)
 8023ce6:	4aba      	ldr	r2, [pc, #744]	@ (8023fd0 <mg_dtoa+0x340>)
 8023ce8:	9906      	ldr	r1, [sp, #24]
 8023cea:	9805      	ldr	r0, [sp, #20]
 8023cec:	f7ff ffc0 	bl	8023c70 <mg_snprintf>
 8023cf0:	e1d3      	b.n	802409a <mg_dtoa+0x40a>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 8023cf2:	2200      	movs	r2, #0
 8023cf4:	2300      	movs	r3, #0
 8023cf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023cfa:	f7ec ff25 	bl	8010b48 <__aeabi_dcmpgt>
 8023cfe:	b130      	cbz	r0, 8023d0e <mg_dtoa+0x7e>
 8023d00:	4bb4      	ldr	r3, [pc, #720]	@ (8023fd4 <mg_dtoa+0x344>)
 8023d02:	4ab3      	ldr	r2, [pc, #716]	@ (8023fd0 <mg_dtoa+0x340>)
 8023d04:	9906      	ldr	r1, [sp, #24]
 8023d06:	9805      	ldr	r0, [sp, #20]
 8023d08:	f7ff ffb2 	bl	8023c70 <mg_snprintf>
 8023d0c:	e1c5      	b.n	802409a <mg_dtoa+0x40a>
 8023d0e:	4bb2      	ldr	r3, [pc, #712]	@ (8023fd8 <mg_dtoa+0x348>)
 8023d10:	e7f7      	b.n	8023d02 <mg_dtoa+0x72>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 8023d12:	4bb2      	ldr	r3, [pc, #712]	@ (8023fdc <mg_dtoa+0x34c>)
 8023d14:	4aae      	ldr	r2, [pc, #696]	@ (8023fd0 <mg_dtoa+0x340>)
 8023d16:	9906      	ldr	r1, [sp, #24]
 8023d18:	9805      	ldr	r0, [sp, #20]
 8023d1a:	f7ff ffa9 	bl	8023c70 <mg_snprintf>
 8023d1e:	e1bc      	b.n	802409a <mg_dtoa+0x40a>
  if (d < 0.0) d = -d, buf[s++] = '-';
 8023d20:	4622      	mov	r2, r4
 8023d22:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 8023d26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8023d2a:	232d      	movs	r3, #45	@ 0x2d
 8023d2c:	f88d 3020 	strb.w	r3, [sp, #32]
 8023d30:	2701      	movs	r7, #1
 8023d32:	e7d2      	b.n	8023cda <mg_dtoa+0x4a>
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 8023d34:	2200      	movs	r2, #0
 8023d36:	4baa      	ldr	r3, [pc, #680]	@ (8023fe0 <mg_dtoa+0x350>)
 8023d38:	4620      	mov	r0, r4
 8023d3a:	4629      	mov	r1, r5
 8023d3c:	f7ec fc74 	bl	8010628 <__aeabi_dmul>
 8023d40:	4604      	mov	r4, r0
 8023d42:	460d      	mov	r5, r1
 8023d44:	2200      	movs	r2, #0
 8023d46:	4ba6      	ldr	r3, [pc, #664]	@ (8023fe0 <mg_dtoa+0x350>)
 8023d48:	4650      	mov	r0, sl
 8023d4a:	4659      	mov	r1, fp
 8023d4c:	f7ec fef2 	bl	8010b34 <__aeabi_dcmpge>
 8023d50:	b1b0      	cbz	r0, 8023d80 <mg_dtoa+0xf0>
 8023d52:	4622      	mov	r2, r4
 8023d54:	462b      	mov	r3, r5
 8023d56:	4650      	mov	r0, sl
 8023d58:	4659      	mov	r1, fp
 8023d5a:	f7ec fd8f 	bl	801087c <__aeabi_ddiv>
 8023d5e:	2200      	movs	r2, #0
 8023d60:	4b9f      	ldr	r3, [pc, #636]	@ (8023fe0 <mg_dtoa+0x350>)
 8023d62:	f7ec fee7 	bl	8010b34 <__aeabi_dcmpge>
 8023d66:	2800      	cmp	r0, #0
 8023d68:	d1e4      	bne.n	8023d34 <mg_dtoa+0xa4>
 8023d6a:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 8023d6e:	e007      	b.n	8023d80 <mg_dtoa+0xf0>
  while (d <= 1.0 && d / mul <= 1.0) mul /= 10.0;
 8023d70:	2200      	movs	r2, #0
 8023d72:	4b9b      	ldr	r3, [pc, #620]	@ (8023fe0 <mg_dtoa+0x350>)
 8023d74:	4620      	mov	r0, r4
 8023d76:	4629      	mov	r1, r5
 8023d78:	f7ec fd80 	bl	801087c <__aeabi_ddiv>
 8023d7c:	4604      	mov	r4, r0
 8023d7e:	460d      	mov	r5, r1
 8023d80:	2200      	movs	r2, #0
 8023d82:	4b91      	ldr	r3, [pc, #580]	@ (8023fc8 <mg_dtoa+0x338>)
 8023d84:	4650      	mov	r0, sl
 8023d86:	4659      	mov	r1, fp
 8023d88:	f7ec feca 	bl	8010b20 <__aeabi_dcmple>
 8023d8c:	b158      	cbz	r0, 8023da6 <mg_dtoa+0x116>
 8023d8e:	4622      	mov	r2, r4
 8023d90:	462b      	mov	r3, r5
 8023d92:	4650      	mov	r0, sl
 8023d94:	4659      	mov	r1, fp
 8023d96:	f7ec fd71 	bl	801087c <__aeabi_ddiv>
 8023d9a:	2200      	movs	r2, #0
 8023d9c:	4b8a      	ldr	r3, [pc, #552]	@ (8023fc8 <mg_dtoa+0x338>)
 8023d9e:	f7ec febf 	bl	8010b20 <__aeabi_dcmple>
 8023da2:	2800      	cmp	r0, #0
 8023da4:	d1e4      	bne.n	8023d70 <mg_dtoa+0xe0>
  for (i = 0, t = mul * 5; i < width; i++) t /= 10.0;
 8023da6:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8023daa:	2200      	movs	r2, #0
 8023dac:	4b8d      	ldr	r3, [pc, #564]	@ (8023fe4 <mg_dtoa+0x354>)
 8023dae:	4620      	mov	r0, r4
 8023db0:	4629      	mov	r1, r5
 8023db2:	f7ec fc39 	bl	8010628 <__aeabi_dmul>
 8023db6:	4634      	mov	r4, r6
 8023db8:	e004      	b.n	8023dc4 <mg_dtoa+0x134>
 8023dba:	2200      	movs	r2, #0
 8023dbc:	4b88      	ldr	r3, [pc, #544]	@ (8023fe0 <mg_dtoa+0x350>)
 8023dbe:	f7ec fd5d 	bl	801087c <__aeabi_ddiv>
 8023dc2:	3401      	adds	r4, #1
 8023dc4:	4544      	cmp	r4, r8
 8023dc6:	dbf8      	blt.n	8023dba <mg_dtoa+0x12a>
  d += t;
 8023dc8:	4602      	mov	r2, r0
 8023dca:	460b      	mov	r3, r1
 8023dcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023dd0:	f7ec fa74 	bl	80102bc <__adddf3>
 8023dd4:	4682      	mov	sl, r0
 8023dd6:	468b      	mov	fp, r1
  int i, s = 0, n = 0, e = 0;
 8023dd8:	46b1      	mov	r9, r6
  mul = 1.0;
 8023dda:	2400      	movs	r4, #0
 8023ddc:	4d7a      	ldr	r5, [pc, #488]	@ (8023fc8 <mg_dtoa+0x338>)
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0, e++;
 8023dde:	e009      	b.n	8023df4 <mg_dtoa+0x164>
 8023de0:	2200      	movs	r2, #0
 8023de2:	4b7f      	ldr	r3, [pc, #508]	@ (8023fe0 <mg_dtoa+0x350>)
 8023de4:	4620      	mov	r0, r4
 8023de6:	4629      	mov	r1, r5
 8023de8:	f7ec fc1e 	bl	8010628 <__aeabi_dmul>
 8023dec:	4604      	mov	r4, r0
 8023dee:	460d      	mov	r5, r1
 8023df0:	f109 0901 	add.w	r9, r9, #1
 8023df4:	2200      	movs	r2, #0
 8023df6:	4b7a      	ldr	r3, [pc, #488]	@ (8023fe0 <mg_dtoa+0x350>)
 8023df8:	4650      	mov	r0, sl
 8023dfa:	4659      	mov	r1, fp
 8023dfc:	f7ec fe9a 	bl	8010b34 <__aeabi_dcmpge>
 8023e00:	b1b0      	cbz	r0, 8023e30 <mg_dtoa+0x1a0>
 8023e02:	4622      	mov	r2, r4
 8023e04:	462b      	mov	r3, r5
 8023e06:	4650      	mov	r0, sl
 8023e08:	4659      	mov	r1, fp
 8023e0a:	f7ec fd37 	bl	801087c <__aeabi_ddiv>
 8023e0e:	2200      	movs	r2, #0
 8023e10:	4b73      	ldr	r3, [pc, #460]	@ (8023fe0 <mg_dtoa+0x350>)
 8023e12:	f7ec fe8f 	bl	8010b34 <__aeabi_dcmpge>
 8023e16:	2800      	cmp	r0, #0
 8023e18:	d1e2      	bne.n	8023de0 <mg_dtoa+0x150>
 8023e1a:	e009      	b.n	8023e30 <mg_dtoa+0x1a0>
  while (d < 1.0 && d / mul < 1.0) mul /= 10.0, e--;
 8023e1c:	2200      	movs	r2, #0
 8023e1e:	4b70      	ldr	r3, [pc, #448]	@ (8023fe0 <mg_dtoa+0x350>)
 8023e20:	4620      	mov	r0, r4
 8023e22:	4629      	mov	r1, r5
 8023e24:	f7ec fd2a 	bl	801087c <__aeabi_ddiv>
 8023e28:	4604      	mov	r4, r0
 8023e2a:	460d      	mov	r5, r1
 8023e2c:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8023e30:	2200      	movs	r2, #0
 8023e32:	4b65      	ldr	r3, [pc, #404]	@ (8023fc8 <mg_dtoa+0x338>)
 8023e34:	4650      	mov	r0, sl
 8023e36:	4659      	mov	r1, fp
 8023e38:	f7ec fe68 	bl	8010b0c <__aeabi_dcmplt>
 8023e3c:	b158      	cbz	r0, 8023e56 <mg_dtoa+0x1c6>
 8023e3e:	4622      	mov	r2, r4
 8023e40:	462b      	mov	r3, r5
 8023e42:	4650      	mov	r0, sl
 8023e44:	4659      	mov	r1, fp
 8023e46:	f7ec fd19 	bl	801087c <__aeabi_ddiv>
 8023e4a:	2200      	movs	r2, #0
 8023e4c:	4b5e      	ldr	r3, [pc, #376]	@ (8023fc8 <mg_dtoa+0x338>)
 8023e4e:	f7ec fe5d 	bl	8010b0c <__aeabi_dcmplt>
 8023e52:	2800      	cmp	r0, #0
 8023e54:	d1e2      	bne.n	8023e1c <mg_dtoa+0x18c>
  if (e >= width && width > 1) {
 8023e56:	45c1      	cmp	r9, r8
 8023e58:	db02      	blt.n	8023e60 <mg_dtoa+0x1d0>
 8023e5a:	f1b8 0f01 	cmp.w	r8, #1
 8023e5e:	dc25      	bgt.n	8023eac <mg_dtoa+0x21c>
  } else if (e <= -width && width > 1) {
 8023e60:	f1c8 0300 	rsb	r3, r8, #0
 8023e64:	454b      	cmp	r3, r9
 8023e66:	db5e      	blt.n	8023f26 <mg_dtoa+0x296>
 8023e68:	f1b8 0f01 	cmp.w	r8, #1
 8023e6c:	dd5b      	ble.n	8023f26 <mg_dtoa+0x296>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8023e6e:	4622      	mov	r2, r4
 8023e70:	462b      	mov	r3, r5
 8023e72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023e76:	f7ec fd01 	bl	801087c <__aeabi_ddiv>
 8023e7a:	ad08      	add	r5, sp, #32
 8023e7c:	9b07      	ldr	r3, [sp, #28]
 8023e7e:	4642      	mov	r2, r8
 8023e80:	ec41 0b10 	vmov	d0, r0, r1
 8023e84:	2128      	movs	r1, #40	@ 0x28
 8023e86:	4628      	mov	r0, r5
 8023e88:	f7ff ff02 	bl	8023c90 <mg_dtoa>
 8023e8c:	4604      	mov	r4, r0
    n += addexp(buf + s + n, -e, '-');
 8023e8e:	1838      	adds	r0, r7, r0
 8023e90:	222d      	movs	r2, #45	@ 0x2d
 8023e92:	f1c9 0100 	rsb	r1, r9, #0
 8023e96:	4428      	add	r0, r5
 8023e98:	f7fc f982 	bl	80201a0 <addexp>
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8023e9c:	9500      	str	r5, [sp, #0]
 8023e9e:	1823      	adds	r3, r4, r0
 8023ea0:	4a51      	ldr	r2, [pc, #324]	@ (8023fe8 <mg_dtoa+0x358>)
 8023ea2:	9906      	ldr	r1, [sp, #24]
 8023ea4:	9805      	ldr	r0, [sp, #20]
 8023ea6:	f7ff fee3 	bl	8023c70 <mg_snprintf>
 8023eaa:	e0f6      	b.n	802409a <mg_dtoa+0x40a>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8023eac:	4622      	mov	r2, r4
 8023eae:	462b      	mov	r3, r5
 8023eb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023eb4:	f7ec fce2 	bl	801087c <__aeabi_ddiv>
 8023eb8:	ad08      	add	r5, sp, #32
 8023eba:	9b07      	ldr	r3, [sp, #28]
 8023ebc:	4642      	mov	r2, r8
 8023ebe:	ec41 0b10 	vmov	d0, r0, r1
 8023ec2:	2128      	movs	r1, #40	@ 0x28
 8023ec4:	4628      	mov	r0, r5
 8023ec6:	f7ff fee3 	bl	8023c90 <mg_dtoa>
 8023eca:	4604      	mov	r4, r0
    n += addexp(buf + s + n, e, '+');
 8023ecc:	1838      	adds	r0, r7, r0
 8023ece:	222b      	movs	r2, #43	@ 0x2b
 8023ed0:	4649      	mov	r1, r9
 8023ed2:	4428      	add	r0, r5
 8023ed4:	f7fc f964 	bl	80201a0 <addexp>
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8023ed8:	9500      	str	r5, [sp, #0]
 8023eda:	1823      	adds	r3, r4, r0
 8023edc:	4a42      	ldr	r2, [pc, #264]	@ (8023fe8 <mg_dtoa+0x358>)
 8023ede:	9906      	ldr	r1, [sp, #24]
 8023ee0:	9805      	ldr	r0, [sp, #20]
 8023ee2:	f7ff fec5 	bl	8023c70 <mg_snprintf>
 8023ee6:	e0d8      	b.n	802409a <mg_dtoa+0x40a>
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 8023ee8:	3601      	adds	r6, #1
 8023eea:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8023eee:	f109 0248 	add.w	r2, r9, #72	@ 0x48
 8023ef2:	eb0d 0902 	add.w	r9, sp, r2
 8023ef6:	f809 3c28 	strb.w	r3, [r9, #-40]
      d -= ch * t;
 8023efa:	f7ec fb2b 	bl	8010554 <__aeabi_i2d>
 8023efe:	4622      	mov	r2, r4
 8023f00:	462b      	mov	r3, r5
 8023f02:	f7ec fb91 	bl	8010628 <__aeabi_dmul>
 8023f06:	4602      	mov	r2, r0
 8023f08:	460b      	mov	r3, r1
 8023f0a:	4650      	mov	r0, sl
 8023f0c:	4659      	mov	r1, fp
 8023f0e:	f7ec f9d3 	bl	80102b8 <__aeabi_dsub>
 8023f12:	4682      	mov	sl, r0
 8023f14:	468b      	mov	fp, r1
      t /= 10.0;
 8023f16:	2200      	movs	r2, #0
 8023f18:	4b31      	ldr	r3, [pc, #196]	@ (8023fe0 <mg_dtoa+0x350>)
 8023f1a:	4620      	mov	r0, r4
 8023f1c:	4629      	mov	r1, r5
 8023f1e:	f7ec fcad 	bl	801087c <__aeabi_ddiv>
 8023f22:	4604      	mov	r4, r0
 8023f24:	460d      	mov	r5, r1
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8023f26:	2200      	movs	r2, #0
 8023f28:	4b27      	ldr	r3, [pc, #156]	@ (8023fc8 <mg_dtoa+0x338>)
 8023f2a:	4620      	mov	r0, r4
 8023f2c:	4629      	mov	r1, r5
 8023f2e:	f7ec fe01 	bl	8010b34 <__aeabi_dcmpge>
 8023f32:	b188      	cbz	r0, 8023f58 <mg_dtoa+0x2c8>
 8023f34:	eb07 0906 	add.w	r9, r7, r6
 8023f38:	f1b9 0f27 	cmp.w	r9, #39	@ 0x27
 8023f3c:	dc0c      	bgt.n	8023f58 <mg_dtoa+0x2c8>
      int ch = (int) (d / t);
 8023f3e:	4622      	mov	r2, r4
 8023f40:	462b      	mov	r3, r5
 8023f42:	4650      	mov	r0, sl
 8023f44:	4659      	mov	r1, fp
 8023f46:	f7ec fc99 	bl	801087c <__aeabi_ddiv>
 8023f4a:	f7ec fe1d 	bl	8010b88 <__aeabi_d2iz>
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 8023f4e:	2e00      	cmp	r6, #0
 8023f50:	dcca      	bgt.n	8023ee8 <mg_dtoa+0x258>
 8023f52:	2800      	cmp	r0, #0
 8023f54:	dcc8      	bgt.n	8023ee8 <mg_dtoa+0x258>
 8023f56:	e7d0      	b.n	8023efa <mg_dtoa+0x26a>
    if (n == 0) buf[s++] = '0';
 8023f58:	b9ce      	cbnz	r6, 8023f8e <mg_dtoa+0x2fe>
 8023f5a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8023f5e:	446b      	add	r3, sp
 8023f60:	2230      	movs	r2, #48	@ 0x30
 8023f62:	f803 2c28 	strb.w	r2, [r3, #-40]
 8023f66:	3701      	adds	r7, #1
 8023f68:	e011      	b.n	8023f8e <mg_dtoa+0x2fe>
    while (t >= 1.0 && n + s < (int) sizeof(buf)) buf[n++] = '0', t /= 10.0;
 8023f6a:	f106 0901 	add.w	r9, r6, #1
 8023f6e:	f106 0348 	add.w	r3, r6, #72	@ 0x48
 8023f72:	eb0d 0603 	add.w	r6, sp, r3
 8023f76:	2330      	movs	r3, #48	@ 0x30
 8023f78:	f806 3c28 	strb.w	r3, [r6, #-40]
 8023f7c:	2200      	movs	r2, #0
 8023f7e:	4b18      	ldr	r3, [pc, #96]	@ (8023fe0 <mg_dtoa+0x350>)
 8023f80:	4620      	mov	r0, r4
 8023f82:	4629      	mov	r1, r5
 8023f84:	f7ec fc7a 	bl	801087c <__aeabi_ddiv>
 8023f88:	4604      	mov	r4, r0
 8023f8a:	460d      	mov	r5, r1
 8023f8c:	464e      	mov	r6, r9
 8023f8e:	2200      	movs	r2, #0
 8023f90:	4b0d      	ldr	r3, [pc, #52]	@ (8023fc8 <mg_dtoa+0x338>)
 8023f92:	4620      	mov	r0, r4
 8023f94:	4629      	mov	r1, r5
 8023f96:	f7ec fdcd 	bl	8010b34 <__aeabi_dcmpge>
 8023f9a:	b110      	cbz	r0, 8023fa2 <mg_dtoa+0x312>
 8023f9c:	19f3      	adds	r3, r6, r7
 8023f9e:	2b27      	cmp	r3, #39	@ 0x27
 8023fa0:	dde3      	ble.n	8023f6a <mg_dtoa+0x2da>
    if (s + n < (int) sizeof(buf)) buf[n + s++] = '.';
 8023fa2:	19f3      	adds	r3, r6, r7
 8023fa4:	2b27      	cmp	r3, #39	@ 0x27
 8023fa6:	dc05      	bgt.n	8023fb4 <mg_dtoa+0x324>
 8023fa8:	3701      	adds	r7, #1
 8023faa:	3348      	adds	r3, #72	@ 0x48
 8023fac:	446b      	add	r3, sp
 8023fae:	222e      	movs	r2, #46	@ 0x2e
 8023fb0:	f803 2c28 	strb.w	r2, [r3, #-40]
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 8023fb4:	a502      	add	r5, pc, #8	@ (adr r5, 8023fc0 <mg_dtoa+0x330>)
 8023fb6:	e9d5 4500 	ldrd	r4, r5, [r5]
 8023fba:	e03e      	b.n	802403a <mg_dtoa+0x3aa>
 8023fbc:	f3af 8000 	nop.w
 8023fc0:	9999999a 	.word	0x9999999a
 8023fc4:	3fb99999 	.word	0x3fb99999
 8023fc8:	3ff00000 	.word	0x3ff00000
 8023fcc:	08039eb4 	.word	0x08039eb4
 8023fd0:	0803b798 	.word	0x0803b798
 8023fd4:	0803abc0 	.word	0x0803abc0
 8023fd8:	0803abc4 	.word	0x0803abc4
 8023fdc:	0803abcc 	.word	0x0803abcc
 8023fe0:	40240000 	.word	0x40240000
 8023fe4:	40140000 	.word	0x40140000
 8023fe8:	0803abd0 	.word	0x0803abd0
      int ch = (int) (d / t);
 8023fec:	4622      	mov	r2, r4
 8023fee:	462b      	mov	r3, r5
 8023ff0:	4650      	mov	r0, sl
 8023ff2:	4659      	mov	r1, fp
 8023ff4:	f7ec fc42 	bl	801087c <__aeabi_ddiv>
 8023ff8:	f7ec fdc6 	bl	8010b88 <__aeabi_d2iz>
      buf[s + n++] = (char) (ch + '0');
 8023ffc:	3601      	adds	r6, #1
 8023ffe:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8024002:	f109 0248 	add.w	r2, r9, #72	@ 0x48
 8024006:	eb0d 0902 	add.w	r9, sp, r2
 802400a:	f809 3c28 	strb.w	r3, [r9, #-40]
      d -= ch * t;
 802400e:	f7ec faa1 	bl	8010554 <__aeabi_i2d>
 8024012:	4622      	mov	r2, r4
 8024014:	462b      	mov	r3, r5
 8024016:	f7ec fb07 	bl	8010628 <__aeabi_dmul>
 802401a:	4602      	mov	r2, r0
 802401c:	460b      	mov	r3, r1
 802401e:	4650      	mov	r0, sl
 8024020:	4659      	mov	r1, fp
 8024022:	f7ec f949 	bl	80102b8 <__aeabi_dsub>
 8024026:	4682      	mov	sl, r0
 8024028:	468b      	mov	fp, r1
      t /= 10.0;
 802402a:	2200      	movs	r2, #0
 802402c:	4b1d      	ldr	r3, [pc, #116]	@ (80240a4 <mg_dtoa+0x414>)
 802402e:	4620      	mov	r0, r4
 8024030:	4629      	mov	r1, r5
 8024032:	f7ec fc23 	bl	801087c <__aeabi_ddiv>
 8024036:	4604      	mov	r4, r0
 8024038:	460d      	mov	r5, r1
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 802403a:	eb07 0906 	add.w	r9, r7, r6
 802403e:	f1b9 0f27 	cmp.w	r9, #39	@ 0x27
 8024042:	dc03      	bgt.n	802404c <mg_dtoa+0x3bc>
 8024044:	4546      	cmp	r6, r8
 8024046:	dbd1      	blt.n	8023fec <mg_dtoa+0x35c>
 8024048:	9a07      	ldr	r2, [sp, #28]
 802404a:	e000      	b.n	802404e <mg_dtoa+0x3be>
 802404c:	9a07      	ldr	r2, [sp, #28]
  while (tz && n > 0 && buf[s + n - 1] == '0') n--;  // Trim trailing zeroes
 802404e:	b152      	cbz	r2, 8024066 <mg_dtoa+0x3d6>
 8024050:	2e00      	cmp	r6, #0
 8024052:	dd08      	ble.n	8024066 <mg_dtoa+0x3d6>
 8024054:	19bb      	adds	r3, r7, r6
 8024056:	3347      	adds	r3, #71	@ 0x47
 8024058:	446b      	add	r3, sp
 802405a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 802405e:	2b30      	cmp	r3, #48	@ 0x30
 8024060:	d101      	bne.n	8024066 <mg_dtoa+0x3d6>
 8024062:	3e01      	subs	r6, #1
 8024064:	e7f3      	b.n	802404e <mg_dtoa+0x3be>
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 8024066:	2e00      	cmp	r6, #0
 8024068:	dd06      	ble.n	8024078 <mg_dtoa+0x3e8>
 802406a:	19bb      	adds	r3, r7, r6
 802406c:	3347      	adds	r3, #71	@ 0x47
 802406e:	446b      	add	r3, sp
 8024070:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8024074:	2b2e      	cmp	r3, #46	@ 0x2e
 8024076:	d013      	beq.n	80240a0 <mg_dtoa+0x410>
  n += s;
 8024078:	4437      	add	r7, r6
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
 802407a:	2f27      	cmp	r7, #39	@ 0x27
 802407c:	dd00      	ble.n	8024080 <mg_dtoa+0x3f0>
 802407e:	2727      	movs	r7, #39	@ 0x27
  buf[n] = '\0';
 8024080:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8024084:	eb0d 0703 	add.w	r7, sp, r3
 8024088:	2300      	movs	r3, #0
 802408a:	f807 3c28 	strb.w	r3, [r7, #-40]
  return mg_snprintf(dst, dstlen, "%s", buf);
 802408e:	ab08      	add	r3, sp, #32
 8024090:	4a05      	ldr	r2, [pc, #20]	@ (80240a8 <mg_dtoa+0x418>)
 8024092:	9906      	ldr	r1, [sp, #24]
 8024094:	9805      	ldr	r0, [sp, #20]
 8024096:	f7ff fdeb 	bl	8023c70 <mg_snprintf>
}
 802409a:	b013      	add	sp, #76	@ 0x4c
 802409c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 80240a0:	3e01      	subs	r6, #1
 80240a2:	e7e9      	b.n	8024078 <mg_dtoa+0x3e8>
 80240a4:	40240000 	.word	0x40240000
 80240a8:	0803b798 	.word	0x0803b798

080240ac <mg_vxprintf>:
                   va_list *ap) {
 80240ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80240b0:	b093      	sub	sp, #76	@ 0x4c
 80240b2:	4681      	mov	r9, r0
 80240b4:	468a      	mov	sl, r1
 80240b6:	4693      	mov	fp, r2
 80240b8:	9303      	str	r3, [sp, #12]
  size_t i = 0, n = 0;
 80240ba:	2700      	movs	r7, #0
 80240bc:	463c      	mov	r4, r7
  while (fmt[i] != '\0') {
 80240be:	e1bc      	b.n	802443a <mg_vxprintf+0x38e>
      char pad = ' ', minus = 0, c = fmt[++i];
 80240c0:	2320      	movs	r3, #32
 80240c2:	f88d 301f 	strb.w	r3, [sp, #31]
 80240c6:	1c66      	adds	r6, r4, #1
 80240c8:	f81b 5006 	ldrb.w	r5, [fp, r6]
      if (c == '#') x++, c = fmt[++i];
 80240cc:	2d23      	cmp	r5, #35	@ 0x23
 80240ce:	d00c      	beq.n	80240ea <mg_vxprintf+0x3e>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 80240d0:	2300      	movs	r3, #0
 80240d2:	9302      	str	r3, [sp, #8]
      if (c == '-') minus++, c = fmt[++i];
 80240d4:	2d2d      	cmp	r5, #45	@ 0x2d
 80240d6:	d10e      	bne.n	80240f6 <mg_vxprintf+0x4a>
 80240d8:	3601      	adds	r6, #1
 80240da:	f81b 5006 	ldrb.w	r5, [fp, r6]
 80240de:	2301      	movs	r3, #1
 80240e0:	9304      	str	r3, [sp, #16]
      if (c == '0') pad = '0', c = fmt[++i];
 80240e2:	2d30      	cmp	r5, #48	@ 0x30
 80240e4:	d00a      	beq.n	80240fc <mg_vxprintf+0x50>
      if (c == '-') minus++, c = fmt[++i];
 80240e6:	2400      	movs	r4, #0
 80240e8:	e017      	b.n	802411a <mg_vxprintf+0x6e>
      if (c == '#') x++, c = fmt[++i];
 80240ea:	1ca6      	adds	r6, r4, #2
 80240ec:	f81b 5006 	ldrb.w	r5, [fp, r6]
 80240f0:	2301      	movs	r3, #1
 80240f2:	9302      	str	r3, [sp, #8]
 80240f4:	e7ee      	b.n	80240d4 <mg_vxprintf+0x28>
      char pad = ' ', minus = 0, c = fmt[++i];
 80240f6:	2300      	movs	r3, #0
 80240f8:	9304      	str	r3, [sp, #16]
 80240fa:	e7f2      	b.n	80240e2 <mg_vxprintf+0x36>
      if (c == '0') pad = '0', c = fmt[++i];
 80240fc:	2330      	movs	r3, #48	@ 0x30
 80240fe:	f88d 301f 	strb.w	r3, [sp, #31]
 8024102:	3601      	adds	r6, #1
 8024104:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8024108:	e7ed      	b.n	80240e6 <mg_vxprintf+0x3a>
      while (is_digit(c)) w *= 10, w += (size_t) (c - '0'), c = fmt[++i];
 802410a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 802410e:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 8024112:	3c30      	subs	r4, #48	@ 0x30
 8024114:	3601      	adds	r6, #1
 8024116:	f81b 5006 	ldrb.w	r5, [fp, r6]
 802411a:	4628      	mov	r0, r5
 802411c:	f7fc f839 	bl	8020192 <is_digit>
 8024120:	4601      	mov	r1, r0
 8024122:	2800      	cmp	r0, #0
 8024124:	d1f1      	bne.n	802410a <mg_vxprintf+0x5e>
      if (c == '.') {
 8024126:	2d2e      	cmp	r5, #46	@ 0x2e
 8024128:	d002      	beq.n	8024130 <mg_vxprintf+0x84>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 802412a:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 802412e:	e026      	b.n	802417e <mg_vxprintf+0xd2>
        c = fmt[++i];
 8024130:	1c73      	adds	r3, r6, #1
 8024132:	f81b 5003 	ldrb.w	r5, [fp, r3]
        if (c == '*') {
 8024136:	2d2a      	cmp	r5, #42	@ 0x2a
 8024138:	d119      	bne.n	802416e <mg_vxprintf+0xc2>
          pr = (size_t) va_arg(*ap, int);
 802413a:	9803      	ldr	r0, [sp, #12]
 802413c:	6803      	ldr	r3, [r0, #0]
 802413e:	1d1a      	adds	r2, r3, #4
 8024140:	6002      	str	r2, [r0, #0]
 8024142:	f8d3 8000 	ldr.w	r8, [r3]
          c = fmt[++i];
 8024146:	3602      	adds	r6, #2
 8024148:	f81b 5006 	ldrb.w	r5, [fp, r6]
 802414c:	e017      	b.n	802417e <mg_vxprintf+0xd2>
          while (is_digit(c)) pr *= 10, pr += (size_t) (c - '0'), c = fmt[++i];
 802414e:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 8024152:	eb05 0848 	add.w	r8, r5, r8, lsl #1
 8024156:	f1a8 0830 	sub.w	r8, r8, #48	@ 0x30
 802415a:	3601      	adds	r6, #1
 802415c:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8024160:	4628      	mov	r0, r5
 8024162:	f7fc f816 	bl	8020192 <is_digit>
 8024166:	2800      	cmp	r0, #0
 8024168:	d1f1      	bne.n	802414e <mg_vxprintf+0xa2>
 802416a:	9905      	ldr	r1, [sp, #20]
 802416c:	e007      	b.n	802417e <mg_vxprintf+0xd2>
          pr = 0;
 802416e:	f04f 0800 	mov.w	r8, #0
 8024172:	461e      	mov	r6, r3
 8024174:	9005      	str	r0, [sp, #20]
 8024176:	e7f3      	b.n	8024160 <mg_vxprintf+0xb4>
      while (c == 'h') c = fmt[++i];  // Treat h and hh as int
 8024178:	3601      	adds	r6, #1
 802417a:	f81b 5006 	ldrb.w	r5, [fp, r6]
 802417e:	2d68      	cmp	r5, #104	@ 0x68
 8024180:	d0fa      	beq.n	8024178 <mg_vxprintf+0xcc>
      if (c == 'l') {
 8024182:	2d6c      	cmp	r5, #108	@ 0x6c
 8024184:	d05f      	beq.n	8024246 <mg_vxprintf+0x19a>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8024186:	2200      	movs	r2, #0
      if (c == 'p') x = 1, is_long = 1;
 8024188:	2d70      	cmp	r5, #112	@ 0x70
 802418a:	d069      	beq.n	8024260 <mg_vxprintf+0x1b4>
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 802418c:	2d64      	cmp	r5, #100	@ 0x64
 802418e:	d06a      	beq.n	8024266 <mg_vxprintf+0x1ba>
 8024190:	f1a5 0325 	sub.w	r3, r5, #37	@ 0x25
 8024194:	2b53      	cmp	r3, #83	@ 0x53
 8024196:	f200 81bc 	bhi.w	8024512 <mg_vxprintf+0x466>
 802419a:	e8df f013 	tbh	[pc, r3, lsl #1]
 802419e:	01b5      	.short	0x01b5
 80241a0:	01ba01ba 	.word	0x01ba01ba
 80241a4:	01ba01ba 	.word	0x01ba01ba
 80241a8:	01ba01ba 	.word	0x01ba01ba
 80241ac:	01ba01ba 	.word	0x01ba01ba
 80241b0:	01ba01ba 	.word	0x01ba01ba
 80241b4:	01ba01ba 	.word	0x01ba01ba
 80241b8:	01ba01ba 	.word	0x01ba01ba
 80241bc:	01ba01ba 	.word	0x01ba01ba
 80241c0:	01ba01ba 	.word	0x01ba01ba
 80241c4:	01ba01ba 	.word	0x01ba01ba
 80241c8:	01ba01ba 	.word	0x01ba01ba
 80241cc:	01ba01ba 	.word	0x01ba01ba
 80241d0:	01ba01ba 	.word	0x01ba01ba
 80241d4:	01ba01ba 	.word	0x01ba01ba
 80241d8:	01ba01ba 	.word	0x01ba01ba
 80241dc:	01ba01ba 	.word	0x01ba01ba
 80241e0:	01ba01ba 	.word	0x01ba01ba
 80241e4:	01ba01ba 	.word	0x01ba01ba
 80241e8:	01ba01ba 	.word	0x01ba01ba
 80241ec:	014101ba 	.word	0x014101ba
 80241f0:	01ba01ba 	.word	0x01ba01ba
 80241f4:	01ba01ba 	.word	0x01ba01ba
 80241f8:	01ba01ba 	.word	0x01ba01ba
 80241fc:	01ba01ba 	.word	0x01ba01ba
 8024200:	01ba01ba 	.word	0x01ba01ba
 8024204:	01ba0065 	.word	0x01ba0065
 8024208:	01ba01ba 	.word	0x01ba01ba
 802420c:	01ba01ba 	.word	0x01ba01ba
 8024210:	01ba01ba 	.word	0x01ba01ba
 8024214:	01ba01ba 	.word	0x01ba01ba
 8024218:	016801ba 	.word	0x016801ba
 802421c:	01ba01ba 	.word	0x01ba01ba
 8024220:	00650065 	.word	0x00650065
 8024224:	01ba01ba 	.word	0x01ba01ba
 8024228:	01ba01ba 	.word	0x01ba01ba
 802422c:	015a01ba 	.word	0x015a01ba
 8024230:	01ba01ba 	.word	0x01ba01ba
 8024234:	01ba0065 	.word	0x01ba0065
 8024238:	017101ba 	.word	0x017101ba
 802423c:	006501ba 	.word	0x006501ba
 8024240:	01ba01ba 	.word	0x01ba01ba
 8024244:	008d      	.short	0x008d
        is_long++, c = fmt[++i];
 8024246:	1c73      	adds	r3, r6, #1
 8024248:	f81b 5003 	ldrb.w	r5, [fp, r3]
        if (c == 'l') is_long++, c = fmt[++i];
 802424c:	2d6c      	cmp	r5, #108	@ 0x6c
 802424e:	d002      	beq.n	8024256 <mg_vxprintf+0x1aa>
        is_long++, c = fmt[++i];
 8024250:	461e      	mov	r6, r3
 8024252:	2201      	movs	r2, #1
 8024254:	e798      	b.n	8024188 <mg_vxprintf+0xdc>
        if (c == 'l') is_long++, c = fmt[++i];
 8024256:	3602      	adds	r6, #2
 8024258:	f81b 5006 	ldrb.w	r5, [fp, r6]
 802425c:	2202      	movs	r2, #2
 802425e:	e793      	b.n	8024188 <mg_vxprintf+0xdc>
      if (c == 'p') x = 1, is_long = 1;
 8024260:	2201      	movs	r2, #1
 8024262:	9202      	str	r2, [sp, #8]
 8024264:	e792      	b.n	802418c <mg_vxprintf+0xe0>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 8024266:	2101      	movs	r1, #1
 8024268:	2d58      	cmp	r5, #88	@ 0x58
 802426a:	d027      	beq.n	80242bc <mg_vxprintf+0x210>
 802426c:	2d70      	cmp	r5, #112	@ 0x70
 802426e:	d021      	beq.n	80242b4 <mg_vxprintf+0x208>
 8024270:	2300      	movs	r3, #0
 8024272:	4618      	mov	r0, r3
        size_t xl = x ? 2 : 0;
 8024274:	9b02      	ldr	r3, [sp, #8]
 8024276:	b10b      	cbz	r3, 802427c <mg_vxprintf+0x1d0>
 8024278:	2302      	movs	r3, #2
 802427a:	9302      	str	r3, [sp, #8]
        if (c == 'g' || c == 'f') {
 802427c:	f1a5 0366 	sub.w	r3, r5, #102	@ 0x66
 8024280:	b2db      	uxtb	r3, r3
 8024282:	2b01      	cmp	r3, #1
 8024284:	d91c      	bls.n	80242c0 <mg_vxprintf+0x214>
        } else if (is_long == 2) {
 8024286:	2a02      	cmp	r2, #2
 8024288:	d037      	beq.n	80242fa <mg_vxprintf+0x24e>
        } else if (is_long == 1) {
 802428a:	2a01      	cmp	r2, #1
 802428c:	d046      	beq.n	802431c <mg_vxprintf+0x270>
          int v = va_arg(*ap, int);
 802428e:	9b03      	ldr	r3, [sp, #12]
 8024290:	f8d3 c000 	ldr.w	ip, [r3]
 8024294:	f10c 0204 	add.w	r2, ip, #4
 8024298:	601a      	str	r2, [r3, #0]
 802429a:	f8dc 3000 	ldr.w	r3, [ip]
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 802429e:	2d64      	cmp	r5, #100	@ 0x64
 80242a0:	d052      	beq.n	8024348 <mg_vxprintf+0x29c>
 80242a2:	461a      	mov	r2, r3
 80242a4:	2300      	movs	r3, #0
 80242a6:	9001      	str	r0, [sp, #4]
 80242a8:	9100      	str	r1, [sp, #0]
 80242aa:	a808      	add	r0, sp, #32
 80242ac:	f7fb ffd4 	bl	8020258 <mg_lld>
 80242b0:	4605      	mov	r5, r0
 80242b2:	e01c      	b.n	80242ee <mg_vxprintf+0x242>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 80242b4:	2301      	movs	r3, #1
 80242b6:	e7dc      	b.n	8024272 <mg_vxprintf+0x1c6>
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 80242b8:	2301      	movs	r3, #1
 80242ba:	e7da      	b.n	8024272 <mg_vxprintf+0x1c6>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 80242bc:	2301      	movs	r3, #1
 80242be:	e7d8      	b.n	8024272 <mg_vxprintf+0x1c6>
          double v = va_arg(*ap, double);
 80242c0:	9903      	ldr	r1, [sp, #12]
 80242c2:	680b      	ldr	r3, [r1, #0]
 80242c4:	3307      	adds	r3, #7
 80242c6:	f023 0307 	bic.w	r3, r3, #7
 80242ca:	f103 0208 	add.w	r2, r3, #8
 80242ce:	600a      	str	r2, [r1, #0]
 80242d0:	ed93 0b00 	vldr	d0, [r3]
          if (pr == ~0U) pr = 6;
 80242d4:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 80242d8:	d00c      	beq.n	80242f4 <mg_vxprintf+0x248>
          k = mg_dtoa(tmp, sizeof(tmp), v, (int) pr, c == 'g');
 80242da:	2d67      	cmp	r5, #103	@ 0x67
 80242dc:	bf14      	ite	ne
 80242de:	2300      	movne	r3, #0
 80242e0:	2301      	moveq	r3, #1
 80242e2:	4642      	mov	r2, r8
 80242e4:	2128      	movs	r1, #40	@ 0x28
 80242e6:	a808      	add	r0, sp, #32
 80242e8:	f7ff fcd2 	bl	8023c90 <mg_dtoa>
 80242ec:	4605      	mov	r5, r0
        for (j = 0; j < xl && w > 0; j++) w--;
 80242ee:	2300      	movs	r3, #0
 80242f0:	9a02      	ldr	r2, [sp, #8]
 80242f2:	e02e      	b.n	8024352 <mg_vxprintf+0x2a6>
          if (pr == ~0U) pr = 6;
 80242f4:	f04f 0806 	mov.w	r8, #6
 80242f8:	e7ef      	b.n	80242da <mg_vxprintf+0x22e>
          int64_t v = va_arg(*ap, int64_t);
 80242fa:	9d03      	ldr	r5, [sp, #12]
 80242fc:	682b      	ldr	r3, [r5, #0]
 80242fe:	3307      	adds	r3, #7
 8024300:	f023 0307 	bic.w	r3, r3, #7
 8024304:	f103 0208 	add.w	r2, r3, #8
 8024308:	602a      	str	r2, [r5, #0]
 802430a:	e9d3 2300 	ldrd	r2, r3, [r3]
          k = mg_lld(tmp, v, s, h);
 802430e:	9001      	str	r0, [sp, #4]
 8024310:	9100      	str	r1, [sp, #0]
 8024312:	a808      	add	r0, sp, #32
 8024314:	f7fb ffa0 	bl	8020258 <mg_lld>
 8024318:	4605      	mov	r5, r0
 802431a:	e7e8      	b.n	80242ee <mg_vxprintf+0x242>
          long v = va_arg(*ap, long);
 802431c:	9b03      	ldr	r3, [sp, #12]
 802431e:	f8d3 c000 	ldr.w	ip, [r3]
 8024322:	f10c 0204 	add.w	r2, ip, #4
 8024326:	601a      	str	r2, [r3, #0]
 8024328:	f8dc 3000 	ldr.w	r3, [ip]
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned long) v, s, h);
 802432c:	2d64      	cmp	r5, #100	@ 0x64
 802432e:	d008      	beq.n	8024342 <mg_vxprintf+0x296>
 8024330:	461a      	mov	r2, r3
 8024332:	2300      	movs	r3, #0
 8024334:	9001      	str	r0, [sp, #4]
 8024336:	9100      	str	r1, [sp, #0]
 8024338:	a808      	add	r0, sp, #32
 802433a:	f7fb ff8d 	bl	8020258 <mg_lld>
 802433e:	4605      	mov	r5, r0
 8024340:	e7d5      	b.n	80242ee <mg_vxprintf+0x242>
 8024342:	461a      	mov	r2, r3
 8024344:	17db      	asrs	r3, r3, #31
 8024346:	e7f5      	b.n	8024334 <mg_vxprintf+0x288>
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 8024348:	461a      	mov	r2, r3
 802434a:	17db      	asrs	r3, r3, #31
 802434c:	e7ab      	b.n	80242a6 <mg_vxprintf+0x1fa>
        for (j = 0; j < xl && w > 0; j++) w--;
 802434e:	3c01      	subs	r4, #1
 8024350:	3301      	adds	r3, #1
 8024352:	4293      	cmp	r3, r2
 8024354:	d225      	bcs.n	80243a2 <mg_vxprintf+0x2f6>
 8024356:	2c00      	cmp	r4, #0
 8024358:	d1f9      	bne.n	802434e <mg_vxprintf+0x2a2>
 802435a:	46a0      	mov	r8, r4
 802435c:	9605      	str	r6, [sp, #20]
 802435e:	9e04      	ldr	r6, [sp, #16]
 8024360:	e009      	b.n	8024376 <mg_vxprintf+0x2ca>
          n += scpy(out, param, &pad, 1);
 8024362:	2301      	movs	r3, #1
 8024364:	f10d 021f 	add.w	r2, sp, #31
 8024368:	4651      	mov	r1, sl
 802436a:	4648      	mov	r0, r9
 802436c:	f7fc f80a 	bl	8020384 <scpy>
 8024370:	4407      	add	r7, r0
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8024372:	f108 0801 	add.w	r8, r8, #1
 8024376:	f89d 301f 	ldrb.w	r3, [sp, #31]
 802437a:	2b20      	cmp	r3, #32
 802437c:	d106      	bne.n	802438c <mg_vxprintf+0x2e0>
 802437e:	b92e      	cbnz	r6, 802438c <mg_vxprintf+0x2e0>
 8024380:	42a5      	cmp	r5, r4
 8024382:	d203      	bcs.n	802438c <mg_vxprintf+0x2e0>
 8024384:	eb08 0305 	add.w	r3, r8, r5
 8024388:	42a3      	cmp	r3, r4
 802438a:	d3ea      	bcc.n	8024362 <mg_vxprintf+0x2b6>
        n += scpy(out, param, (char *) "0x", xl);
 802438c:	9e05      	ldr	r6, [sp, #20]
 802438e:	9b02      	ldr	r3, [sp, #8]
 8024390:	4a6b      	ldr	r2, [pc, #428]	@ (8024540 <mg_vxprintf+0x494>)
 8024392:	4651      	mov	r1, sl
 8024394:	4648      	mov	r0, r9
 8024396:	f7fb fff5 	bl	8020384 <scpy>
 802439a:	eb07 0800 	add.w	r8, r7, r0
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 802439e:	2700      	movs	r7, #0
 80243a0:	e00d      	b.n	80243be <mg_vxprintf+0x312>
 80243a2:	f04f 0800 	mov.w	r8, #0
 80243a6:	9605      	str	r6, [sp, #20]
 80243a8:	9e04      	ldr	r6, [sp, #16]
 80243aa:	e7e4      	b.n	8024376 <mg_vxprintf+0x2ca>
          n += scpy(out, param, &pad, 1);
 80243ac:	2301      	movs	r3, #1
 80243ae:	f10d 021f 	add.w	r2, sp, #31
 80243b2:	4651      	mov	r1, sl
 80243b4:	4648      	mov	r0, r9
 80243b6:	f7fb ffe5 	bl	8020384 <scpy>
 80243ba:	4480      	add	r8, r0
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 80243bc:	3701      	adds	r7, #1
 80243be:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80243c2:	2b30      	cmp	r3, #48	@ 0x30
 80243c4:	d104      	bne.n	80243d0 <mg_vxprintf+0x324>
 80243c6:	42a5      	cmp	r5, r4
 80243c8:	d202      	bcs.n	80243d0 <mg_vxprintf+0x324>
 80243ca:	197b      	adds	r3, r7, r5
 80243cc:	42a3      	cmp	r3, r4
 80243ce:	d3ed      	bcc.n	80243ac <mg_vxprintf+0x300>
        n += scpy(out, param, tmp, k);
 80243d0:	462b      	mov	r3, r5
 80243d2:	aa08      	add	r2, sp, #32
 80243d4:	4651      	mov	r1, sl
 80243d6:	4648      	mov	r0, r9
 80243d8:	f7fb ffd4 	bl	8020384 <scpy>
 80243dc:	eb08 0700 	add.w	r7, r8, r0
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 80243e0:	f04f 0800 	mov.w	r8, #0
 80243e4:	9602      	str	r6, [sp, #8]
 80243e6:	9e04      	ldr	r6, [sp, #16]
 80243e8:	e009      	b.n	80243fe <mg_vxprintf+0x352>
          n += scpy(out, param, &pad, 1);
 80243ea:	2301      	movs	r3, #1
 80243ec:	f10d 021f 	add.w	r2, sp, #31
 80243f0:	4651      	mov	r1, sl
 80243f2:	4648      	mov	r0, r9
 80243f4:	f7fb ffc6 	bl	8020384 <scpy>
 80243f8:	4407      	add	r7, r0
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 80243fa:	f108 0801 	add.w	r8, r8, #1
 80243fe:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8024402:	2b20      	cmp	r3, #32
 8024404:	f040 808d 	bne.w	8024522 <mg_vxprintf+0x476>
 8024408:	2e00      	cmp	r6, #0
 802440a:	f000 808c 	beq.w	8024526 <mg_vxprintf+0x47a>
 802440e:	42a5      	cmp	r5, r4
 8024410:	f080 808b 	bcs.w	802452a <mg_vxprintf+0x47e>
 8024414:	eb08 0305 	add.w	r3, r8, r5
 8024418:	42a3      	cmp	r3, r4
 802441a:	d3e6      	bcc.n	80243ea <mg_vxprintf+0x33e>
 802441c:	9e02      	ldr	r6, [sp, #8]
 802441e:	e00b      	b.n	8024438 <mg_vxprintf+0x38c>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 8024420:	9903      	ldr	r1, [sp, #12]
 8024422:	680b      	ldr	r3, [r1, #0]
 8024424:	1d1a      	adds	r2, r3, #4
 8024426:	600a      	str	r2, [r1, #0]
 8024428:	681c      	ldr	r4, [r3, #0]
        n += f(out, param, ap);
 802442a:	9a03      	ldr	r2, [sp, #12]
 802442c:	4651      	mov	r1, sl
 802442e:	4648      	mov	r0, r9
 8024430:	47a0      	blx	r4
 8024432:	4407      	add	r7, r0
        if (c == 'm') n += 2, out('"', param);
 8024434:	2d6d      	cmp	r5, #109	@ 0x6d
 8024436:	d015      	beq.n	8024464 <mg_vxprintf+0x3b8>
      i++;
 8024438:	1c74      	adds	r4, r6, #1
  while (fmt[i] != '\0') {
 802443a:	f81b 0004 	ldrb.w	r0, [fp, r4]
 802443e:	2800      	cmp	r0, #0
 8024440:	d079      	beq.n	8024536 <mg_vxprintf+0x48a>
    if (fmt[i] == '%') {
 8024442:	2825      	cmp	r0, #37	@ 0x25
 8024444:	f43f ae3c 	beq.w	80240c0 <mg_vxprintf+0x14>
      out(fmt[i], param), n++, i++;
 8024448:	4651      	mov	r1, sl
 802444a:	47c8      	blx	r9
 802444c:	3701      	adds	r7, #1
 802444e:	3401      	adds	r4, #1
 8024450:	e7f3      	b.n	802443a <mg_vxprintf+0x38e>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 8024452:	9903      	ldr	r1, [sp, #12]
 8024454:	680b      	ldr	r3, [r1, #0]
 8024456:	1d1a      	adds	r2, r3, #4
 8024458:	600a      	str	r2, [r1, #0]
 802445a:	681c      	ldr	r4, [r3, #0]
        if (c == 'm') out('"', param);
 802445c:	4651      	mov	r1, sl
 802445e:	2022      	movs	r0, #34	@ 0x22
 8024460:	47c8      	blx	r9
 8024462:	e7e2      	b.n	802442a <mg_vxprintf+0x37e>
        if (c == 'm') n += 2, out('"', param);
 8024464:	3702      	adds	r7, #2
 8024466:	4651      	mov	r1, sl
 8024468:	2022      	movs	r0, #34	@ 0x22
 802446a:	47c8      	blx	r9
 802446c:	e7e4      	b.n	8024438 <mg_vxprintf+0x38c>
        int ch = va_arg(*ap, int);
 802446e:	9903      	ldr	r1, [sp, #12]
 8024470:	680b      	ldr	r3, [r1, #0]
 8024472:	1d1a      	adds	r2, r3, #4
 8024474:	600a      	str	r2, [r1, #0]
        out((char) ch, param);
 8024476:	4651      	mov	r1, sl
 8024478:	7818      	ldrb	r0, [r3, #0]
 802447a:	47c8      	blx	r9
        n++;
 802447c:	3701      	adds	r7, #1
 802447e:	e7db      	b.n	8024438 <mg_vxprintf+0x38c>
        char *p = va_arg(*ap, char *);
 8024480:	9903      	ldr	r1, [sp, #12]
 8024482:	680b      	ldr	r3, [r1, #0]
 8024484:	1d1a      	adds	r2, r3, #4
 8024486:	600a      	str	r2, [r1, #0]
 8024488:	681b      	ldr	r3, [r3, #0]
 802448a:	9302      	str	r3, [sp, #8]
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 802448c:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8024490:	d003      	beq.n	802449a <mg_vxprintf+0x3ee>
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8024492:	2500      	movs	r5, #0
 8024494:	9605      	str	r6, [sp, #20]
 8024496:	9e04      	ldr	r6, [sp, #16]
 8024498:	e011      	b.n	80244be <mg_vxprintf+0x412>
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 802449a:	4618      	mov	r0, r3
 802449c:	b11b      	cbz	r3, 80244a6 <mg_vxprintf+0x3fa>
 802449e:	f7eb feff 	bl	80102a0 <strlen>
 80244a2:	4680      	mov	r8, r0
 80244a4:	e7f5      	b.n	8024492 <mg_vxprintf+0x3e6>
 80244a6:	f04f 0800 	mov.w	r8, #0
 80244aa:	e7f2      	b.n	8024492 <mg_vxprintf+0x3e6>
          n += scpy(out, param, &pad, 1);
 80244ac:	2301      	movs	r3, #1
 80244ae:	f10d 021f 	add.w	r2, sp, #31
 80244b2:	4651      	mov	r1, sl
 80244b4:	4648      	mov	r0, r9
 80244b6:	f7fb ff65 	bl	8020384 <scpy>
 80244ba:	4407      	add	r7, r0
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 80244bc:	3501      	adds	r5, #1
 80244be:	b92e      	cbnz	r6, 80244cc <mg_vxprintf+0x420>
 80244c0:	4544      	cmp	r4, r8
 80244c2:	d903      	bls.n	80244cc <mg_vxprintf+0x420>
 80244c4:	eb05 0308 	add.w	r3, r5, r8
 80244c8:	42a3      	cmp	r3, r4
 80244ca:	d3ef      	bcc.n	80244ac <mg_vxprintf+0x400>
        n += scpy(out, param, p, pr);
 80244cc:	9e05      	ldr	r6, [sp, #20]
 80244ce:	4643      	mov	r3, r8
 80244d0:	9a02      	ldr	r2, [sp, #8]
 80244d2:	4651      	mov	r1, sl
 80244d4:	4648      	mov	r0, r9
 80244d6:	f7fb ff55 	bl	8020384 <scpy>
 80244da:	4407      	add	r7, r0
        for (j = 0; minus && pr < w && j + pr < w; j++)
 80244dc:	2500      	movs	r5, #0
 80244de:	9602      	str	r6, [sp, #8]
 80244e0:	9e04      	ldr	r6, [sp, #16]
 80244e2:	e008      	b.n	80244f6 <mg_vxprintf+0x44a>
          n += scpy(out, param, &pad, 1);
 80244e4:	2301      	movs	r3, #1
 80244e6:	f10d 021f 	add.w	r2, sp, #31
 80244ea:	4651      	mov	r1, sl
 80244ec:	4648      	mov	r0, r9
 80244ee:	f7fb ff49 	bl	8020384 <scpy>
 80244f2:	4407      	add	r7, r0
        for (j = 0; minus && pr < w && j + pr < w; j++)
 80244f4:	3501      	adds	r5, #1
 80244f6:	b1d6      	cbz	r6, 802452e <mg_vxprintf+0x482>
 80244f8:	4544      	cmp	r4, r8
 80244fa:	d91a      	bls.n	8024532 <mg_vxprintf+0x486>
 80244fc:	eb05 0308 	add.w	r3, r5, r8
 8024500:	42a3      	cmp	r3, r4
 8024502:	d3ef      	bcc.n	80244e4 <mg_vxprintf+0x438>
 8024504:	9e02      	ldr	r6, [sp, #8]
 8024506:	e797      	b.n	8024438 <mg_vxprintf+0x38c>
        out('%', param);
 8024508:	4651      	mov	r1, sl
 802450a:	2025      	movs	r0, #37	@ 0x25
 802450c:	47c8      	blx	r9
        n++;
 802450e:	3701      	adds	r7, #1
 8024510:	e792      	b.n	8024438 <mg_vxprintf+0x38c>
        out('%', param);
 8024512:	4651      	mov	r1, sl
 8024514:	2025      	movs	r0, #37	@ 0x25
 8024516:	47c8      	blx	r9
        out(c, param);
 8024518:	4651      	mov	r1, sl
 802451a:	4628      	mov	r0, r5
 802451c:	47c8      	blx	r9
        n += 2;
 802451e:	3702      	adds	r7, #2
 8024520:	e78a      	b.n	8024438 <mg_vxprintf+0x38c>
 8024522:	9e02      	ldr	r6, [sp, #8]
 8024524:	e788      	b.n	8024438 <mg_vxprintf+0x38c>
 8024526:	9e02      	ldr	r6, [sp, #8]
 8024528:	e786      	b.n	8024438 <mg_vxprintf+0x38c>
 802452a:	9e02      	ldr	r6, [sp, #8]
 802452c:	e784      	b.n	8024438 <mg_vxprintf+0x38c>
 802452e:	9e02      	ldr	r6, [sp, #8]
 8024530:	e782      	b.n	8024438 <mg_vxprintf+0x38c>
 8024532:	9e02      	ldr	r6, [sp, #8]
 8024534:	e780      	b.n	8024438 <mg_vxprintf+0x38c>
}
 8024536:	4638      	mov	r0, r7
 8024538:	b013      	add	sp, #76	@ 0x4c
 802453a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802453e:	bf00      	nop
 8024540:	0803abd8 	.word	0x0803abd8

08024544 <mg_xprintf>:
size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {
 8024544:	b40c      	push	{r2, r3}
 8024546:	b500      	push	{lr}
 8024548:	b083      	sub	sp, #12
 802454a:	ab04      	add	r3, sp, #16
 802454c:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 8024550:	9301      	str	r3, [sp, #4]
  len = mg_vxprintf(out, ptr, fmt, &ap);
 8024552:	ab01      	add	r3, sp, #4
 8024554:	f7ff fdaa 	bl	80240ac <mg_vxprintf>
}
 8024558:	b003      	add	sp, #12
 802455a:	f85d eb04 	ldr.w	lr, [sp], #4
 802455e:	b002      	add	sp, #8
 8024560:	4770      	bx	lr
	...

08024564 <print_ip4>:
static size_t print_ip4(void (*out)(char, void *), void *arg, uint8_t *p) {
 8024564:	b530      	push	{r4, r5, lr}
 8024566:	b085      	sub	sp, #20
  return mg_xprintf(out, arg, "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
 8024568:	7853      	ldrb	r3, [r2, #1]
 802456a:	7894      	ldrb	r4, [r2, #2]
 802456c:	78d5      	ldrb	r5, [r2, #3]
 802456e:	9502      	str	r5, [sp, #8]
 8024570:	9401      	str	r4, [sp, #4]
 8024572:	9300      	str	r3, [sp, #0]
 8024574:	7813      	ldrb	r3, [r2, #0]
 8024576:	4a02      	ldr	r2, [pc, #8]	@ (8024580 <print_ip4+0x1c>)
 8024578:	f7ff ffe4 	bl	8024544 <mg_xprintf>
}
 802457c:	b005      	add	sp, #20
 802457e:	bd30      	pop	{r4, r5, pc}
 8024580:	0803abdc 	.word	0x0803abdc

08024584 <mg_print_ip4>:
size_t mg_print_ip4(void (*out)(char, void *), void *arg, va_list *ap) {
 8024584:	b510      	push	{r4, lr}
  uint8_t *p = va_arg(*ap, uint8_t *);
 8024586:	6813      	ldr	r3, [r2, #0]
 8024588:	1d1c      	adds	r4, r3, #4
 802458a:	6014      	str	r4, [r2, #0]
  return print_ip4(out, arg, p);
 802458c:	681a      	ldr	r2, [r3, #0]
 802458e:	f7ff ffe9 	bl	8024564 <print_ip4>
}
 8024592:	bd10      	pop	{r4, pc}

08024594 <mg_print_mac>:
size_t mg_print_mac(void (*out)(char, void *), void *arg, va_list *ap) {
 8024594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024596:	b087      	sub	sp, #28
  uint8_t *p = va_arg(*ap, uint8_t *);
 8024598:	6813      	ldr	r3, [r2, #0]
 802459a:	1d1c      	adds	r4, r3, #4
 802459c:	6014      	str	r4, [r2, #0]
 802459e:	681a      	ldr	r2, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 80245a0:	7813      	ldrb	r3, [r2, #0]
 80245a2:	7854      	ldrb	r4, [r2, #1]
 80245a4:	7895      	ldrb	r5, [r2, #2]
                    p[3], p[4], p[5]);
 80245a6:	78d6      	ldrb	r6, [r2, #3]
 80245a8:	7917      	ldrb	r7, [r2, #4]
 80245aa:	7952      	ldrb	r2, [r2, #5]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 80245ac:	9204      	str	r2, [sp, #16]
 80245ae:	9703      	str	r7, [sp, #12]
 80245b0:	9602      	str	r6, [sp, #8]
 80245b2:	9501      	str	r5, [sp, #4]
 80245b4:	9400      	str	r4, [sp, #0]
 80245b6:	4a02      	ldr	r2, [pc, #8]	@ (80245c0 <mg_print_mac+0x2c>)
 80245b8:	f7ff ffc4 	bl	8024544 <mg_xprintf>
}
 80245bc:	b007      	add	sp, #28
 80245be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80245c0:	0803abe8 	.word	0x0803abe8

080245c4 <mg_log>:
void mg_log(const char *fmt, ...) {
 80245c4:	b40f      	push	{r0, r1, r2, r3}
 80245c6:	b500      	push	{lr}
 80245c8:	b083      	sub	sp, #12
 80245ca:	ab04      	add	r3, sp, #16
 80245cc:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 80245d0:	9301      	str	r3, [sp, #4]
  mg_vxprintf(s_log_func, s_log_func_param, fmt, &ap);
 80245d2:	ab01      	add	r3, sp, #4
 80245d4:	4907      	ldr	r1, [pc, #28]	@ (80245f4 <mg_log+0x30>)
 80245d6:	6809      	ldr	r1, [r1, #0]
 80245d8:	4807      	ldr	r0, [pc, #28]	@ (80245f8 <mg_log+0x34>)
 80245da:	6800      	ldr	r0, [r0, #0]
 80245dc:	f7ff fd66 	bl	80240ac <mg_vxprintf>
  logs("\r\n", 2);
 80245e0:	2102      	movs	r1, #2
 80245e2:	4806      	ldr	r0, [pc, #24]	@ (80245fc <mg_log+0x38>)
 80245e4:	f7fc fcaa 	bl	8020f3c <logs>
}
 80245e8:	b003      	add	sp, #12
 80245ea:	f85d eb04 	ldr.w	lr, [sp], #4
 80245ee:	b004      	add	sp, #16
 80245f0:	4770      	bx	lr
 80245f2:	bf00      	nop
 80245f4:	20019f70 	.word	0x20019f70
 80245f8:	20000128 	.word	0x20000128
 80245fc:	0803b5fc 	.word	0x0803b5fc

08024600 <mg_vprintf>:
size_t mg_vprintf(struct mg_connection *c, const char *fmt, va_list *ap) {
 8024600:	b538      	push	{r3, r4, r5, lr}
 8024602:	4604      	mov	r4, r0
 8024604:	4613      	mov	r3, r2
  size_t old = c->send.len;
 8024606:	6d05      	ldr	r5, [r0, #80]	@ 0x50
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 8024608:	460a      	mov	r2, r1
 802460a:	f100 0148 	add.w	r1, r0, #72	@ 0x48
 802460e:	4803      	ldr	r0, [pc, #12]	@ (802461c <mg_vprintf+0x1c>)
 8024610:	f7ff fd4c 	bl	80240ac <mg_vxprintf>
  return c->send.len - old;
 8024614:	6d20      	ldr	r0, [r4, #80]	@ 0x50
}
 8024616:	1b40      	subs	r0, r0, r5
 8024618:	bd38      	pop	{r3, r4, r5, pc}
 802461a:	bf00      	nop
 802461c:	08027737 	.word	0x08027737

08024620 <mg_printf>:
size_t mg_printf(struct mg_connection *c, const char *fmt, ...) {
 8024620:	b40e      	push	{r1, r2, r3}
 8024622:	b500      	push	{lr}
 8024624:	b082      	sub	sp, #8
 8024626:	ab03      	add	r3, sp, #12
 8024628:	f853 1b04 	ldr.w	r1, [r3], #4
  va_start(ap, fmt);
 802462c:	9301      	str	r3, [sp, #4]
  len = mg_vprintf(c, fmt, &ap);
 802462e:	aa01      	add	r2, sp, #4
 8024630:	f7ff ffe6 	bl	8024600 <mg_vprintf>
}
 8024634:	b002      	add	sp, #8
 8024636:	f85d eb04 	ldr.w	lr, [sp], #4
 802463a:	b003      	add	sp, #12
 802463c:	4770      	bx	lr
	...

08024640 <mg_vsnprintf>:
size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {
 8024640:	b530      	push	{r4, r5, lr}
 8024642:	b085      	sub	sp, #20
 8024644:	4605      	mov	r5, r0
 8024646:	460c      	mov	r4, r1
  struct mg_iobuf io = {(uint8_t *) buf, len, 0, 0};
 8024648:	9000      	str	r0, [sp, #0]
 802464a:	9101      	str	r1, [sp, #4]
 802464c:	2100      	movs	r1, #0
 802464e:	9102      	str	r1, [sp, #8]
 8024650:	9103      	str	r1, [sp, #12]
  size_t n = mg_vxprintf(mg_putchar_iobuf_static, &io, fmt, ap);
 8024652:	4669      	mov	r1, sp
 8024654:	4804      	ldr	r0, [pc, #16]	@ (8024668 <mg_vsnprintf+0x28>)
 8024656:	f7ff fd29 	bl	80240ac <mg_vxprintf>
  if (n < len) buf[n] = '\0';
 802465a:	4284      	cmp	r4, r0
 802465c:	d901      	bls.n	8024662 <mg_vsnprintf+0x22>
 802465e:	2300      	movs	r3, #0
 8024660:	542b      	strb	r3, [r5, r0]
}
 8024662:	b005      	add	sp, #20
 8024664:	bd30      	pop	{r4, r5, pc}
 8024666:	bf00      	nop
 8024668:	08027741 	.word	0x08027741

0802466c <mg_http_reply>:
                   const char *fmt, ...) {
 802466c:	b408      	push	{r3}
 802466e:	b570      	push	{r4, r5, r6, lr}
 8024670:	b085      	sub	sp, #20
 8024672:	4604      	mov	r4, r0
 8024674:	460e      	mov	r6, r1
 8024676:	4615      	mov	r5, r2
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 8024678:	4608      	mov	r0, r1
 802467a:	f7fb ffcf 	bl	802061c <mg_http_status_code_str>
 802467e:	4603      	mov	r3, r0
 8024680:	b1ed      	cbz	r5, 80246be <mg_http_reply+0x52>
 8024682:	9500      	str	r5, [sp, #0]
 8024684:	4632      	mov	r2, r6
 8024686:	4916      	ldr	r1, [pc, #88]	@ (80246e0 <mg_http_reply+0x74>)
 8024688:	4620      	mov	r0, r4
 802468a:	f7ff ffc9 	bl	8024620 <mg_printf>
  len = c->send.len;
 802468e:	6d25      	ldr	r5, [r4, #80]	@ 0x50
  va_start(ap, fmt);
 8024690:	ab0a      	add	r3, sp, #40	@ 0x28
 8024692:	9303      	str	r3, [sp, #12]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, &ap);
 8024694:	ab03      	add	r3, sp, #12
 8024696:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024698:	f104 0148 	add.w	r1, r4, #72	@ 0x48
 802469c:	4811      	ldr	r0, [pc, #68]	@ (80246e4 <mg_http_reply+0x78>)
 802469e:	f7ff fd05 	bl	80240ac <mg_vxprintf>
  if (c->send.len > 16) {
 80246a2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80246a4:	2b10      	cmp	r3, #16
 80246a6:	d80c      	bhi.n	80246c2 <mg_http_reply+0x56>
  c->is_resp = 0;
 80246a8:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80246ac:	f36f 13c7 	bfc	r3, #7, #1
 80246b0:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 80246b4:	b005      	add	sp, #20
 80246b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80246ba:	b001      	add	sp, #4
 80246bc:	4770      	bx	lr
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 80246be:	4d0a      	ldr	r5, [pc, #40]	@ (80246e8 <mg_http_reply+0x7c>)
 80246c0:	e7df      	b.n	8024682 <mg_http_reply+0x16>
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 80246c2:	6ca6      	ldr	r6, [r4, #72]	@ 0x48
 80246c4:	f1a5 000f 	sub.w	r0, r5, #15
 80246c8:	1b5b      	subs	r3, r3, r5
 80246ca:	4a08      	ldr	r2, [pc, #32]	@ (80246ec <mg_http_reply+0x80>)
 80246cc:	210b      	movs	r1, #11
 80246ce:	4430      	add	r0, r6
 80246d0:	f7ff face 	bl	8023c70 <mg_snprintf>
    c->send.buf[len - 15 + n] = ' ';  // Change ending 0 to space
 80246d4:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80246d6:	4405      	add	r5, r0
 80246d8:	3d0f      	subs	r5, #15
 80246da:	2220      	movs	r2, #32
 80246dc:	555a      	strb	r2, [r3, r5]
 80246de:	e7e3      	b.n	80246a8 <mg_http_reply+0x3c>
 80246e0:	0803ac08 	.word	0x0803ac08
 80246e4:	08027737 	.word	0x08027737
 80246e8:	080373ac 	.word	0x080373ac
 80246ec:	0803ac3c 	.word	0x0803ac3c

080246f0 <mg_http_etag>:
char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {
 80246f0:	b510      	push	{r4, lr}
 80246f2:	b084      	sub	sp, #16
 80246f4:	4604      	mov	r4, r0
  mg_snprintf(buf, len, "\"%lld.%lld\"", (int64_t) mtime, (int64_t) size);
 80246f6:	9202      	str	r2, [sp, #8]
 80246f8:	2300      	movs	r3, #0
 80246fa:	9303      	str	r3, [sp, #12]
 80246fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8024700:	e9cd 2300 	strd	r2, r3, [sp]
 8024704:	4a02      	ldr	r2, [pc, #8]	@ (8024710 <mg_http_etag+0x20>)
 8024706:	f7ff fab3 	bl	8023c70 <mg_snprintf>
}
 802470a:	4620      	mov	r0, r4
 802470c:	b004      	add	sp, #16
 802470e:	bd10      	pop	{r4, pc}
 8024710:	0803ac44 	.word	0x0803ac44

08024714 <mg_url_encode>:
size_t mg_url_encode(const char *s, size_t sl, char *buf, size_t len) {
 8024714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024718:	b083      	sub	sp, #12
 802471a:	4607      	mov	r7, r0
 802471c:	4689      	mov	r9, r1
 802471e:	4692      	mov	sl, r2
 8024720:	4698      	mov	r8, r3
  size_t i, n = 0;
 8024722:	2500      	movs	r5, #0
  for (i = 0; i < sl; i++) {
 8024724:	462c      	mov	r4, r5
 8024726:	e00c      	b.n	8024742 <mg_url_encode+0x2e>
      mg_snprintf(&buf[n], 4, "%%%M", mg_print_hex, 1, &s[i]);
 8024728:	f8cd b004 	str.w	fp, [sp, #4]
 802472c:	2301      	movs	r3, #1
 802472e:	9300      	str	r3, [sp, #0]
 8024730:	4b16      	ldr	r3, [pc, #88]	@ (802478c <mg_url_encode+0x78>)
 8024732:	4a17      	ldr	r2, [pc, #92]	@ (8024790 <mg_url_encode+0x7c>)
 8024734:	2104      	movs	r1, #4
 8024736:	eb0a 0005 	add.w	r0, sl, r5
 802473a:	f7ff fa99 	bl	8023c70 <mg_snprintf>
      n += 3;
 802473e:	3503      	adds	r5, #3
  for (i = 0; i < sl; i++) {
 8024740:	3401      	adds	r4, #1
 8024742:	454c      	cmp	r4, r9
 8024744:	d20e      	bcs.n	8024764 <mg_url_encode+0x50>
    int c = *(unsigned char *) &s[i];
 8024746:	eb07 0b04 	add.w	fp, r7, r4
 802474a:	5d3e      	ldrb	r6, [r7, r4]
    if (n + 4 >= len) return 0;
 802474c:	1d2b      	adds	r3, r5, #4
 802474e:	4543      	cmp	r3, r8
 8024750:	d216      	bcs.n	8024780 <mg_url_encode+0x6c>
    if (mg_is_url_safe(c)) {
 8024752:	4630      	mov	r0, r6
 8024754:	f7fc fa5e 	bl	8020c14 <mg_is_url_safe>
 8024758:	2800      	cmp	r0, #0
 802475a:	d0e5      	beq.n	8024728 <mg_url_encode+0x14>
      buf[n++] = s[i];
 802475c:	f80a 6005 	strb.w	r6, [sl, r5]
 8024760:	3501      	adds	r5, #1
 8024762:	e7ed      	b.n	8024740 <mg_url_encode+0x2c>
  if (len > 0 && n < len - 1) buf[n] = '\0';  // Null-terminate the destination
 8024764:	f1b8 0f00 	cmp.w	r8, #0
 8024768:	d00b      	beq.n	8024782 <mg_url_encode+0x6e>
 802476a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 802476e:	45a8      	cmp	r8, r5
 8024770:	d902      	bls.n	8024778 <mg_url_encode+0x64>
 8024772:	2300      	movs	r3, #0
 8024774:	f80a 3005 	strb.w	r3, [sl, r5]
  if (len > 0) buf[len - 1] = '\0';           // Always.
 8024778:	2300      	movs	r3, #0
 802477a:	f80a 3008 	strb.w	r3, [sl, r8]
 802477e:	e000      	b.n	8024782 <mg_url_encode+0x6e>
    if (n + 4 >= len) return 0;
 8024780:	2500      	movs	r5, #0
}
 8024782:	4628      	mov	r0, r5
 8024784:	b003      	add	sp, #12
 8024786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802478a:	bf00      	nop
 802478c:	08021971 	.word	0x08021971
 8024790:	0803ac50 	.word	0x0803ac50

08024794 <mg_vmprintf>:
char *mg_vmprintf(const char *fmt, va_list *ap) {
 8024794:	b510      	push	{r4, lr}
 8024796:	b084      	sub	sp, #16
 8024798:	4602      	mov	r2, r0
 802479a:	460b      	mov	r3, r1
  struct mg_iobuf io = {0, 0, 0, 256};
 802479c:	2400      	movs	r4, #0
 802479e:	9400      	str	r4, [sp, #0]
 80247a0:	9401      	str	r4, [sp, #4]
 80247a2:	9402      	str	r4, [sp, #8]
 80247a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80247a8:	9103      	str	r1, [sp, #12]
  mg_vxprintf(mg_pfn_iobuf, &io, fmt, ap);
 80247aa:	4669      	mov	r1, sp
 80247ac:	4802      	ldr	r0, [pc, #8]	@ (80247b8 <mg_vmprintf+0x24>)
 80247ae:	f7ff fc7d 	bl	80240ac <mg_vxprintf>
}
 80247b2:	9800      	ldr	r0, [sp, #0]
 80247b4:	b004      	add	sp, #16
 80247b6:	bd10      	pop	{r4, pc}
 80247b8:	08027737 	.word	0x08027737

080247bc <mg_mprintf>:
char *mg_mprintf(const char *fmt, ...) {
 80247bc:	b40f      	push	{r0, r1, r2, r3}
 80247be:	b500      	push	{lr}
 80247c0:	b083      	sub	sp, #12
 80247c2:	ab04      	add	r3, sp, #16
 80247c4:	f853 0b04 	ldr.w	r0, [r3], #4
  va_start(ap, fmt);
 80247c8:	9301      	str	r3, [sp, #4]
  s = mg_vmprintf(fmt, &ap);
 80247ca:	a901      	add	r1, sp, #4
 80247cc:	f7ff ffe2 	bl	8024794 <mg_vmprintf>
}
 80247d0:	b003      	add	sp, #12
 80247d2:	f85d eb04 	ldr.w	lr, [sp], #4
 80247d6:	b004      	add	sp, #16
 80247d8:	4770      	bx	lr

080247da <mg_queue_next>:
size_t mg_queue_next(struct mg_queue *q, char **buf) {
 80247da:	b538      	push	{r3, r4, r5, lr}
 80247dc:	4604      	mov	r4, r0
 80247de:	460d      	mov	r5, r1
  if (q->tail != q->head) {
 80247e0:	6882      	ldr	r2, [r0, #8]
 80247e2:	68c3      	ldr	r3, [r0, #12]
 80247e4:	429a      	cmp	r2, r3
 80247e6:	d107      	bne.n	80247f8 <mg_queue_next+0x1e>
  size_t len = 0;
 80247e8:	2000      	movs	r0, #0
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
 80247ea:	b125      	cbz	r5, 80247f6 <mg_queue_next+0x1c>
 80247ec:	6823      	ldr	r3, [r4, #0]
 80247ee:	68a2      	ldr	r2, [r4, #8]
 80247f0:	3204      	adds	r2, #4
 80247f2:	4413      	add	r3, r2
 80247f4:	602b      	str	r3, [r5, #0]
}
 80247f6:	bd38      	pop	{r3, r4, r5, pc}
    len = mg_queue_read_len(q);
 80247f8:	f7fe fb69 	bl	8022ece <mg_queue_read_len>
    if (len == 0) {  // Zero (head wrapped) ?
 80247fc:	2800      	cmp	r0, #0
 80247fe:	d1f4      	bne.n	80247ea <mg_queue_next+0x10>
      q->tail = 0;   // Reset tail to the start
 8024800:	60a0      	str	r0, [r4, #8]
      if (q->head > q->tail) len = mg_queue_read_len(q);  // Read again
 8024802:	68e2      	ldr	r2, [r4, #12]
 8024804:	68a3      	ldr	r3, [r4, #8]
 8024806:	429a      	cmp	r2, r3
 8024808:	d9ef      	bls.n	80247ea <mg_queue_next+0x10>
 802480a:	4620      	mov	r0, r4
 802480c:	f7fe fb5f 	bl	8022ece <mg_queue_read_len>
 8024810:	e7eb      	b.n	80247ea <mg_queue_next+0x10>

08024812 <mg_queue_del>:
  q->tail += len + sizeof(uint32_t);
 8024812:	6883      	ldr	r3, [r0, #8]
 8024814:	440b      	add	r3, r1
 8024816:	3304      	adds	r3, #4
 8024818:	6083      	str	r3, [r0, #8]
}
 802481a:	4770      	bx	lr

0802481c <mg_sha1_init>:
  context->state[0] = 0x67452301;
 802481c:	4b0a      	ldr	r3, [pc, #40]	@ (8024848 <mg_sha1_init+0x2c>)
 802481e:	6003      	str	r3, [r0, #0]
  context->state[1] = 0xEFCDAB89;
 8024820:	f103 3388 	add.w	r3, r3, #2290649224	@ 0x88888888
 8024824:	6043      	str	r3, [r0, #4]
  context->state[2] = 0x98BADCFE;
 8024826:	f103 4329 	add.w	r3, r3, #2835349504	@ 0xa9000000
 802482a:	f5a3 1396 	sub.w	r3, r3, #1228800	@ 0x12c000
 802482e:	f6a3 638b 	subw	r3, r3, #3723	@ 0xe8b
 8024832:	6083      	str	r3, [r0, #8]
  context->state[3] = 0x10325476;
 8024834:	f1a3 3388 	sub.w	r3, r3, #2290649224	@ 0x88888888
 8024838:	60c3      	str	r3, [r0, #12]
  context->state[4] = 0xC3D2E1F0;
 802483a:	4b04      	ldr	r3, [pc, #16]	@ (802484c <mg_sha1_init+0x30>)
 802483c:	6103      	str	r3, [r0, #16]
  context->count[0] = context->count[1] = 0;
 802483e:	2300      	movs	r3, #0
 8024840:	6183      	str	r3, [r0, #24]
 8024842:	6143      	str	r3, [r0, #20]
}
 8024844:	4770      	bx	lr
 8024846:	bf00      	nop
 8024848:	67452301 	.word	0x67452301
 802484c:	c3d2e1f0 	.word	0xc3d2e1f0

08024850 <mg_sha1_update>:
                    size_t len) {
 8024850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024852:	4604      	mov	r4, r0
 8024854:	460f      	mov	r7, r1
 8024856:	4616      	mov	r6, r2
  j = context->count[0];
 8024858:	6943      	ldr	r3, [r0, #20]
  if ((context->count[0] += (uint32_t) len << 3) < j) context->count[1]++;
 802485a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802485e:	6142      	str	r2, [r0, #20]
 8024860:	429a      	cmp	r2, r3
 8024862:	d202      	bcs.n	802486a <mg_sha1_update+0x1a>
 8024864:	6982      	ldr	r2, [r0, #24]
 8024866:	3201      	adds	r2, #1
 8024868:	6182      	str	r2, [r0, #24]
  context->count[1] += (uint32_t) (len >> 29);
 802486a:	69a2      	ldr	r2, [r4, #24]
 802486c:	eb02 7256 	add.w	r2, r2, r6, lsr #29
 8024870:	61a2      	str	r2, [r4, #24]
  j = (j >> 3) & 63;
 8024872:	f3c3 03c5 	ubfx	r3, r3, #3, #6
  if ((j + len) > 63) {
 8024876:	18f2      	adds	r2, r6, r3
 8024878:	2a3f      	cmp	r2, #63	@ 0x3f
 802487a:	d808      	bhi.n	802488e <mg_sha1_update+0x3e>
    i = 0;
 802487c:	2500      	movs	r5, #0
  memcpy(&context->buffer[j], &data[i], len - i);
 802487e:	3318      	adds	r3, #24
 8024880:	18e0      	adds	r0, r4, r3
 8024882:	1b72      	subs	r2, r6, r5
 8024884:	1979      	adds	r1, r7, r5
 8024886:	3004      	adds	r0, #4
 8024888:	f009 fe26 	bl	802e4d8 <memcpy>
}
 802488c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    memcpy(&context->buffer[j], data, (i = 64 - j));
 802488e:	f103 0018 	add.w	r0, r3, #24
 8024892:	4420      	add	r0, r4
 8024894:	f1c3 0540 	rsb	r5, r3, #64	@ 0x40
 8024898:	462a      	mov	r2, r5
 802489a:	4639      	mov	r1, r7
 802489c:	3004      	adds	r0, #4
 802489e:	f009 fe1b 	bl	802e4d8 <memcpy>
    mg_sha1_transform(context->state, context->buffer);
 80248a2:	f104 011c 	add.w	r1, r4, #28
 80248a6:	4620      	mov	r0, r4
 80248a8:	f7fd faee 	bl	8021e88 <mg_sha1_transform>
    for (; i + 63 < len; i += 64) {
 80248ac:	e004      	b.n	80248b8 <mg_sha1_update+0x68>
      mg_sha1_transform(context->state, &data[i]);
 80248ae:	1979      	adds	r1, r7, r5
 80248b0:	4620      	mov	r0, r4
 80248b2:	f7fd fae9 	bl	8021e88 <mg_sha1_transform>
    for (; i + 63 < len; i += 64) {
 80248b6:	3540      	adds	r5, #64	@ 0x40
 80248b8:	f105 033f 	add.w	r3, r5, #63	@ 0x3f
 80248bc:	42b3      	cmp	r3, r6
 80248be:	d3f6      	bcc.n	80248ae <mg_sha1_update+0x5e>
    j = 0;
 80248c0:	2300      	movs	r3, #0
 80248c2:	e7dc      	b.n	802487e <mg_sha1_update+0x2e>

080248c4 <mg_sha1_final>:
void mg_sha1_final(unsigned char digest[20], mg_sha1_ctx *context) {
 80248c4:	b570      	push	{r4, r5, r6, lr}
 80248c6:	b084      	sub	sp, #16
 80248c8:	4606      	mov	r6, r0
 80248ca:	460d      	mov	r5, r1
  for (i = 0; i < 8; i++) {
 80248cc:	2300      	movs	r3, #0
 80248ce:	e013      	b.n	80248f8 <mg_sha1_final+0x34>
    finalcount[i] = (unsigned char) ((context->count[(i >= 4 ? 0 : 1)] >>
 80248d0:	2b03      	cmp	r3, #3
 80248d2:	bf8c      	ite	hi
 80248d4:	2200      	movhi	r2, #0
 80248d6:	2201      	movls	r2, #1
 80248d8:	3204      	adds	r2, #4
 80248da:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80248de:	6851      	ldr	r1, [r2, #4]
                                      ((3 - (i & 3)) * 8)) &
 80248e0:	43da      	mvns	r2, r3
 80248e2:	f002 0203 	and.w	r2, r2, #3
 80248e6:	00d2      	lsls	r2, r2, #3
    finalcount[i] = (unsigned char) ((context->count[(i >= 4 ? 0 : 1)] >>
 80248e8:	fa21 f202 	lsr.w	r2, r1, r2
 80248ec:	f103 0110 	add.w	r1, r3, #16
 80248f0:	4469      	add	r1, sp
 80248f2:	f801 2c08 	strb.w	r2, [r1, #-8]
  for (i = 0; i < 8; i++) {
 80248f6:	3301      	adds	r3, #1
 80248f8:	2b07      	cmp	r3, #7
 80248fa:	d9e9      	bls.n	80248d0 <mg_sha1_final+0xc>
  c = 0200;
 80248fc:	2380      	movs	r3, #128	@ 0x80
 80248fe:	f88d 3007 	strb.w	r3, [sp, #7]
  mg_sha1_update(context, &c, 1);
 8024902:	2201      	movs	r2, #1
 8024904:	f10d 0107 	add.w	r1, sp, #7
 8024908:	4628      	mov	r0, r5
 802490a:	f7ff ffa1 	bl	8024850 <mg_sha1_update>
  while ((context->count[0] & 504) != 448) {
 802490e:	e008      	b.n	8024922 <mg_sha1_final+0x5e>
    c = 0000;
 8024910:	2300      	movs	r3, #0
 8024912:	f88d 3007 	strb.w	r3, [sp, #7]
    mg_sha1_update(context, &c, 1);
 8024916:	2201      	movs	r2, #1
 8024918:	f10d 0107 	add.w	r1, sp, #7
 802491c:	4628      	mov	r0, r5
 802491e:	f7ff ff97 	bl	8024850 <mg_sha1_update>
  while ((context->count[0] & 504) != 448) {
 8024922:	696b      	ldr	r3, [r5, #20]
 8024924:	f403 73fc 	and.w	r3, r3, #504	@ 0x1f8
 8024928:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 802492c:	d1f0      	bne.n	8024910 <mg_sha1_final+0x4c>
  mg_sha1_update(context, finalcount, 8);
 802492e:	2208      	movs	r2, #8
 8024930:	eb0d 0102 	add.w	r1, sp, r2
 8024934:	4628      	mov	r0, r5
 8024936:	f7ff ff8b 	bl	8024850 <mg_sha1_update>
  for (i = 0; i < 20; i++) {
 802493a:	2300      	movs	r3, #0
 802493c:	e00a      	b.n	8024954 <mg_sha1_final+0x90>
        (unsigned char) ((context->state[i >> 2] >> ((3 - (i & 3)) * 8)) & 255);
 802493e:	089a      	lsrs	r2, r3, #2
 8024940:	f855 4022 	ldr.w	r4, [r5, r2, lsl #2]
 8024944:	43da      	mvns	r2, r3
 8024946:	f002 0203 	and.w	r2, r2, #3
 802494a:	00d2      	lsls	r2, r2, #3
 802494c:	fa24 f202 	lsr.w	r2, r4, r2
    digest[i] =
 8024950:	54f2      	strb	r2, [r6, r3]
  for (i = 0; i < 20; i++) {
 8024952:	3301      	adds	r3, #1
 8024954:	2b13      	cmp	r3, #19
 8024956:	d9f2      	bls.n	802493e <mg_sha1_final+0x7a>
  memset(context, '\0', sizeof(*context));
 8024958:	225c      	movs	r2, #92	@ 0x5c
 802495a:	2100      	movs	r1, #0
 802495c:	4628      	mov	r0, r5
 802495e:	f008 fb7f 	bl	802d060 <memset>
  memset(&finalcount, '\0', sizeof(finalcount));
 8024962:	2300      	movs	r3, #0
 8024964:	9302      	str	r3, [sp, #8]
 8024966:	9303      	str	r3, [sp, #12]
}
 8024968:	b004      	add	sp, #16
 802496a:	bd70      	pop	{r4, r5, r6, pc}

0802496c <mg_http_serve_ssi>:
                       const char *fullpath) {
 802496c:	b508      	push	{r3, lr}
  mg_http_reply(c, 501, NULL, "SSI not enabled");
 802496e:	4b03      	ldr	r3, [pc, #12]	@ (802497c <mg_http_serve_ssi+0x10>)
 8024970:	2200      	movs	r2, #0
 8024972:	f240 11f5 	movw	r1, #501	@ 0x1f5
 8024976:	f7ff fe79 	bl	802466c <mg_http_reply>
}
 802497a:	bd08      	pop	{r3, pc}
 802497c:	0803ac58 	.word	0x0803ac58

08024980 <mg_str_s>:
struct mg_str mg_str_s(const char *s) {
 8024980:	b510      	push	{r4, lr}
 8024982:	4604      	mov	r4, r0
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 8024984:	6001      	str	r1, [r0, #0]
 8024986:	b129      	cbz	r1, 8024994 <mg_str_s+0x14>
 8024988:	4608      	mov	r0, r1
 802498a:	f7eb fc89 	bl	80102a0 <strlen>
 802498e:	6060      	str	r0, [r4, #4]
}
 8024990:	4620      	mov	r0, r4
 8024992:	bd10      	pop	{r4, pc}
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 8024994:	2000      	movs	r0, #0
 8024996:	e7fa      	b.n	802498e <mg_str_s+0xe>

08024998 <mg_str_n>:
  struct mg_str str = {(char *) s, n};
 8024998:	6001      	str	r1, [r0, #0]
 802499a:	6042      	str	r2, [r0, #4]
}
 802499c:	4770      	bx	lr

0802499e <stripquotes>:
static struct mg_str stripquotes(struct mg_str s) {
 802499e:	b510      	push	{r4, lr}
 80249a0:	b082      	sub	sp, #8
 80249a2:	4604      	mov	r4, r0
 80249a4:	ab02      	add	r3, sp, #8
 80249a6:	e903 0006 	stmdb	r3, {r1, r2}
             : s;
 80249aa:	2a01      	cmp	r2, #1
 80249ac:	d902      	bls.n	80249b4 <stripquotes+0x16>
  return s.len > 1 && s.buf[0] == '"' && s.buf[s.len - 1] == '"'
 80249ae:	780b      	ldrb	r3, [r1, #0]
 80249b0:	2b22      	cmp	r3, #34	@ 0x22
 80249b2:	d007      	beq.n	80249c4 <stripquotes+0x26>
             : s;
 80249b4:	ab02      	add	r3, sp, #8
 80249b6:	e913 0003 	ldmdb	r3, {r0, r1}
 80249ba:	e884 0003 	stmia.w	r4, {r0, r1}
}
 80249be:	4620      	mov	r0, r4
 80249c0:	b002      	add	sp, #8
 80249c2:	bd10      	pop	{r4, pc}
  return s.len > 1 && s.buf[0] == '"' && s.buf[s.len - 1] == '"'
 80249c4:	188b      	adds	r3, r1, r2
 80249c6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80249ca:	2b22      	cmp	r3, #34	@ 0x22
 80249cc:	d1f2      	bne.n	80249b4 <stripquotes+0x16>
             ? mg_str_n(s.buf + 1, s.len - 2)
 80249ce:	3a02      	subs	r2, #2
 80249d0:	3101      	adds	r1, #1
 80249d2:	f7ff ffe1 	bl	8024998 <mg_str_n>
             : s;
 80249d6:	e7f2      	b.n	80249be <stripquotes+0x20>

080249d8 <mg_http_get_header_var>:
struct mg_str mg_http_get_header_var(struct mg_str s, struct mg_str v) {
 80249d8:	b082      	sub	sp, #8
 80249da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80249de:	b084      	sub	sp, #16
 80249e0:	4680      	mov	r8, r0
 80249e2:	4668      	mov	r0, sp
 80249e4:	e880 0006 	stmia.w	r0, {r1, r2}
 80249e8:	930b      	str	r3, [sp, #44]	@ 0x2c
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 80249ea:	2400      	movs	r4, #0
 80249ec:	e01f      	b.n	8024a2e <mg_http_get_header_var+0x56>
      int q = p < x && *p == '"' ? 1 : 0;
 80249ee:	2201      	movs	r2, #1
 80249f0:	e037      	b.n	8024a62 <mg_http_get_header_var+0x8a>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 80249f2:	7818      	ldrb	r0, [r3, #0]
 80249f4:	283b      	cmp	r0, #59	@ 0x3b
 80249f6:	d00d      	beq.n	8024a14 <mg_http_get_header_var+0x3c>
 80249f8:	2820      	cmp	r0, #32
 80249fa:	d00b      	beq.n	8024a14 <mg_http_get_header_var+0x3c>
 80249fc:	282c      	cmp	r0, #44	@ 0x2c
 80249fe:	d009      	beq.n	8024a14 <mg_http_get_header_var+0x3c>
        p++;
 8024a00:	3301      	adds	r3, #1
      while (p < x &&
 8024a02:	42bb      	cmp	r3, r7
 8024a04:	d206      	bcs.n	8024a14 <mg_http_get_header_var+0x3c>
 8024a06:	2a00      	cmp	r2, #0
 8024a08:	d0f3      	beq.n	80249f2 <mg_http_get_header_var+0x1a>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 8024a0a:	428b      	cmp	r3, r1
 8024a0c:	d0f8      	beq.n	8024a00 <mg_http_get_header_var+0x28>
 8024a0e:	7818      	ldrb	r0, [r3, #0]
 8024a10:	2822      	cmp	r0, #34	@ 0x22
 8024a12:	d1f5      	bne.n	8024a00 <mg_http_get_header_var+0x28>
      return stripquotes(mg_str_n(b, (size_t) (p - b + q)));
 8024a14:	1a5b      	subs	r3, r3, r1
 8024a16:	ac02      	add	r4, sp, #8
 8024a18:	441a      	add	r2, r3
 8024a1a:	4620      	mov	r0, r4
 8024a1c:	f7ff ffbc 	bl	8024998 <mg_str_n>
 8024a20:	e894 0006 	ldmia.w	r4, {r1, r2}
 8024a24:	4640      	mov	r0, r8
 8024a26:	f7ff ffba 	bl	802499e <stripquotes>
 8024a2a:	e021      	b.n	8024a70 <mg_http_get_header_var+0x98>
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 8024a2c:	3401      	adds	r4, #1
 8024a2e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024a30:	b1ca      	cbz	r2, 8024a66 <mg_http_get_header_var+0x8e>
 8024a32:	1915      	adds	r5, r2, r4
 8024a34:	1cab      	adds	r3, r5, #2
 8024a36:	9f01      	ldr	r7, [sp, #4]
 8024a38:	42bb      	cmp	r3, r7
 8024a3a:	d214      	bcs.n	8024a66 <mg_http_get_header_var+0x8e>
    if (s.buf[i + v.len] == '=' && memcmp(&s.buf[i], v.buf, v.len) == 0) {
 8024a3c:	9e00      	ldr	r6, [sp, #0]
 8024a3e:	5d73      	ldrb	r3, [r6, r5]
 8024a40:	2b3d      	cmp	r3, #61	@ 0x3d
 8024a42:	d1f3      	bne.n	8024a2c <mg_http_get_header_var+0x54>
 8024a44:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8024a46:	1930      	adds	r0, r6, r4
 8024a48:	f008 fa76 	bl	802cf38 <memcmp>
 8024a4c:	4602      	mov	r2, r0
 8024a4e:	2800      	cmp	r0, #0
 8024a50:	d1ec      	bne.n	8024a2c <mg_http_get_header_var+0x54>
      const char *p = &s.buf[i + v.len + 1], *b = p, *x = &s.buf[s.len];
 8024a52:	3501      	adds	r5, #1
 8024a54:	1971      	adds	r1, r6, r5
 8024a56:	4437      	add	r7, r6
      int q = p < x && *p == '"' ? 1 : 0;
 8024a58:	42b9      	cmp	r1, r7
 8024a5a:	d202      	bcs.n	8024a62 <mg_http_get_header_var+0x8a>
 8024a5c:	5d73      	ldrb	r3, [r6, r5]
 8024a5e:	2b22      	cmp	r3, #34	@ 0x22
 8024a60:	d0c5      	beq.n	80249ee <mg_http_get_header_var+0x16>
      const char *p = &s.buf[i + v.len + 1], *b = p, *x = &s.buf[s.len];
 8024a62:	460b      	mov	r3, r1
      while (p < x &&
 8024a64:	e7cd      	b.n	8024a02 <mg_http_get_header_var+0x2a>
  return mg_str_n(NULL, 0);
 8024a66:	2200      	movs	r2, #0
 8024a68:	4611      	mov	r1, r2
 8024a6a:	4640      	mov	r0, r8
 8024a6c:	f7ff ff94 	bl	8024998 <mg_str_n>
}
 8024a70:	4640      	mov	r0, r8
 8024a72:	b004      	add	sp, #16
 8024a74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024a78:	b002      	add	sp, #8
 8024a7a:	4770      	bx	lr

08024a7c <mg_v4mapped>:
static bool mg_v4mapped(struct mg_str str, struct mg_addr *addr) {
 8024a7c:	b530      	push	{r4, r5, lr}
 8024a7e:	b085      	sub	sp, #20
 8024a80:	466b      	mov	r3, sp
 8024a82:	e883 0003 	stmia.w	r3, {r0, r1}
  if (str.len < 14) return false;
 8024a86:	290d      	cmp	r1, #13
 8024a88:	d930      	bls.n	8024aec <mg_v4mapped+0x70>
 8024a8a:	4614      	mov	r4, r2
 8024a8c:	460b      	mov	r3, r1
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 8024a8e:	4601      	mov	r1, r0
 8024a90:	7802      	ldrb	r2, [r0, #0]
 8024a92:	2a3a      	cmp	r2, #58	@ 0x3a
 8024a94:	d12d      	bne.n	8024af2 <mg_v4mapped+0x76>
 8024a96:	7842      	ldrb	r2, [r0, #1]
 8024a98:	2a3a      	cmp	r2, #58	@ 0x3a
 8024a9a:	d12c      	bne.n	8024af6 <mg_v4mapped+0x7a>
 8024a9c:	7982      	ldrb	r2, [r0, #6]
 8024a9e:	2a3a      	cmp	r2, #58	@ 0x3a
 8024aa0:	d12b      	bne.n	8024afa <mg_v4mapped+0x7e>
  for (i = 2; i < 6; i++) {
 8024aa2:	2202      	movs	r2, #2
 8024aa4:	e000      	b.n	8024aa8 <mg_v4mapped+0x2c>
 8024aa6:	3201      	adds	r2, #1
 8024aa8:	2a05      	cmp	r2, #5
 8024aaa:	dc06      	bgt.n	8024aba <mg_v4mapped+0x3e>
    if (str.buf[i] != 'f' && str.buf[i] != 'F') return false;
 8024aac:	5c88      	ldrb	r0, [r1, r2]
 8024aae:	2866      	cmp	r0, #102	@ 0x66
 8024ab0:	d0f9      	beq.n	8024aa6 <mg_v4mapped+0x2a>
 8024ab2:	2846      	cmp	r0, #70	@ 0x46
 8024ab4:	d0f7      	beq.n	8024aa6 <mg_v4mapped+0x2a>
 8024ab6:	2000      	movs	r0, #0
 8024ab8:	e019      	b.n	8024aee <mg_v4mapped+0x72>
  if (!mg_aton4(mg_str_n(&str.buf[7], str.len - 7), addr)) return false;
 8024aba:	ad02      	add	r5, sp, #8
 8024abc:	1fda      	subs	r2, r3, #7
 8024abe:	3107      	adds	r1, #7
 8024ac0:	4628      	mov	r0, r5
 8024ac2:	f7ff ff69 	bl	8024998 <mg_str_n>
 8024ac6:	4622      	mov	r2, r4
 8024ac8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8024acc:	f7fc fe7a 	bl	80217c4 <mg_aton4>
 8024ad0:	b168      	cbz	r0, 8024aee <mg_v4mapped+0x72>
  memcpy(&ipv4, addr->ip, sizeof(ipv4));
 8024ad2:	6822      	ldr	r2, [r4, #0]
  memset(addr->ip, 0, sizeof(addr->ip));
 8024ad4:	2300      	movs	r3, #0
 8024ad6:	6023      	str	r3, [r4, #0]
 8024ad8:	6063      	str	r3, [r4, #4]
 8024ada:	60a3      	str	r3, [r4, #8]
 8024adc:	60e3      	str	r3, [r4, #12]
  addr->ip[10] = addr->ip[11] = 255;
 8024ade:	23ff      	movs	r3, #255	@ 0xff
 8024ae0:	72e3      	strb	r3, [r4, #11]
 8024ae2:	72a3      	strb	r3, [r4, #10]
  memcpy(&addr->ip[12], &ipv4, 4);
 8024ae4:	60e2      	str	r2, [r4, #12]
  addr->is_ip6 = true;
 8024ae6:	2301      	movs	r3, #1
 8024ae8:	74e3      	strb	r3, [r4, #19]
  return true;
 8024aea:	e000      	b.n	8024aee <mg_v4mapped+0x72>
  if (str.len < 14) return false;
 8024aec:	2000      	movs	r0, #0
}
 8024aee:	b005      	add	sp, #20
 8024af0:	bd30      	pop	{r4, r5, pc}
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 8024af2:	2000      	movs	r0, #0
 8024af4:	e7fb      	b.n	8024aee <mg_v4mapped+0x72>
 8024af6:	2000      	movs	r0, #0
 8024af8:	e7f9      	b.n	8024aee <mg_v4mapped+0x72>
 8024afa:	2000      	movs	r0, #0
 8024afc:	e7f7      	b.n	8024aee <mg_v4mapped+0x72>

08024afe <mkpay>:
static void mkpay(struct pkt *pkt, void *p) {
 8024afe:	b530      	push	{r4, r5, lr}
 8024b00:	b083      	sub	sp, #12
 8024b02:	4604      	mov	r4, r0
      mg_str_n((char *) p, (size_t) (&pkt->raw.buf[pkt->raw.len] - (char *) p));
 8024b04:	6803      	ldr	r3, [r0, #0]
 8024b06:	6842      	ldr	r2, [r0, #4]
 8024b08:	441a      	add	r2, r3
 8024b0a:	466d      	mov	r5, sp
 8024b0c:	1a52      	subs	r2, r2, r1
 8024b0e:	4628      	mov	r0, r5
 8024b10:	f7ff ff42 	bl	8024998 <mg_str_n>
 8024b14:	3408      	adds	r4, #8
 8024b16:	e895 0003 	ldmia.w	r5, {r0, r1}
 8024b1a:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8024b1e:	b003      	add	sp, #12
 8024b20:	bd30      	pop	{r4, r5, pc}

08024b22 <mg_strcmp>:
int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {
 8024b22:	b084      	sub	sp, #16
 8024b24:	f10d 0c10 	add.w	ip, sp, #16
 8024b28:	e90c 0003 	stmdb	ip, {r0, r1}
 8024b2c:	4669      	mov	r1, sp
 8024b2e:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 8024b32:	2300      	movs	r3, #0
  while (i < str1.len && i < str2.len) {
 8024b34:	9a03      	ldr	r2, [sp, #12]
 8024b36:	429a      	cmp	r2, r3
 8024b38:	d90b      	bls.n	8024b52 <mg_strcmp+0x30>
 8024b3a:	9901      	ldr	r1, [sp, #4]
 8024b3c:	4299      	cmp	r1, r3
 8024b3e:	d908      	bls.n	8024b52 <mg_strcmp+0x30>
    int c1 = str1.buf[i];
 8024b40:	9a02      	ldr	r2, [sp, #8]
 8024b42:	5cd1      	ldrb	r1, [r2, r3]
    int c2 = str2.buf[i];
 8024b44:	9a00      	ldr	r2, [sp, #0]
 8024b46:	5cd2      	ldrb	r2, [r2, r3]
    if (c1 < c2) return -1;
 8024b48:	4291      	cmp	r1, r2
 8024b4a:	db09      	blt.n	8024b60 <mg_strcmp+0x3e>
    if (c1 > c2) return 1;
 8024b4c:	dc0c      	bgt.n	8024b68 <mg_strcmp+0x46>
    i++;
 8024b4e:	3301      	adds	r3, #1
 8024b50:	e7f0      	b.n	8024b34 <mg_strcmp+0x12>
  if (i < str1.len) return 1;
 8024b52:	429a      	cmp	r2, r3
 8024b54:	d80a      	bhi.n	8024b6c <mg_strcmp+0x4a>
  if (i < str2.len) return -1;
 8024b56:	9a01      	ldr	r2, [sp, #4]
 8024b58:	429a      	cmp	r2, r3
 8024b5a:	d809      	bhi.n	8024b70 <mg_strcmp+0x4e>
  return 0;
 8024b5c:	2000      	movs	r0, #0
 8024b5e:	e001      	b.n	8024b64 <mg_strcmp+0x42>
    if (c1 < c2) return -1;
 8024b60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8024b64:	b004      	add	sp, #16
 8024b66:	4770      	bx	lr
    if (c1 > c2) return 1;
 8024b68:	2001      	movs	r0, #1
 8024b6a:	e7fb      	b.n	8024b64 <mg_strcmp+0x42>
  if (i < str1.len) return 1;
 8024b6c:	2001      	movs	r0, #1
 8024b6e:	e7f9      	b.n	8024b64 <mg_strcmp+0x42>
  if (i < str2.len) return -1;
 8024b70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024b74:	e7f6      	b.n	8024b64 <mg_strcmp+0x42>

08024b76 <mg_strcasecmp>:
int mg_strcasecmp(const struct mg_str str1, const struct mg_str str2) {
 8024b76:	b530      	push	{r4, r5, lr}
 8024b78:	b085      	sub	sp, #20
 8024b7a:	ac04      	add	r4, sp, #16
 8024b7c:	e904 0003 	stmdb	r4, {r0, r1}
 8024b80:	4669      	mov	r1, sp
 8024b82:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 8024b86:	2400      	movs	r4, #0
  while (i < str1.len && i < str2.len) {
 8024b88:	9b03      	ldr	r3, [sp, #12]
 8024b8a:	42a3      	cmp	r3, r4
 8024b8c:	d910      	bls.n	8024bb0 <mg_strcasecmp+0x3a>
 8024b8e:	9a01      	ldr	r2, [sp, #4]
 8024b90:	42a2      	cmp	r2, r4
 8024b92:	d90d      	bls.n	8024bb0 <mg_strcasecmp+0x3a>
    int c1 = mg_tolc(str1.buf[i]);
 8024b94:	9b02      	ldr	r3, [sp, #8]
 8024b96:	5d18      	ldrb	r0, [r3, r4]
 8024b98:	f7fc ff22 	bl	80219e0 <mg_tolc>
 8024b9c:	4605      	mov	r5, r0
    int c2 = mg_tolc(str2.buf[i]);
 8024b9e:	9b00      	ldr	r3, [sp, #0]
 8024ba0:	5d18      	ldrb	r0, [r3, r4]
 8024ba2:	f7fc ff1d 	bl	80219e0 <mg_tolc>
    if (c1 < c2) return -1;
 8024ba6:	4285      	cmp	r5, r0
 8024ba8:	db09      	blt.n	8024bbe <mg_strcasecmp+0x48>
    if (c1 > c2) return 1;
 8024baa:	dc0c      	bgt.n	8024bc6 <mg_strcasecmp+0x50>
    i++;
 8024bac:	3401      	adds	r4, #1
 8024bae:	e7eb      	b.n	8024b88 <mg_strcasecmp+0x12>
  if (i < str1.len) return 1;
 8024bb0:	42a3      	cmp	r3, r4
 8024bb2:	d80a      	bhi.n	8024bca <mg_strcasecmp+0x54>
  if (i < str2.len) return -1;
 8024bb4:	9b01      	ldr	r3, [sp, #4]
 8024bb6:	42a3      	cmp	r3, r4
 8024bb8:	d809      	bhi.n	8024bce <mg_strcasecmp+0x58>
  return 0;
 8024bba:	2000      	movs	r0, #0
 8024bbc:	e001      	b.n	8024bc2 <mg_strcasecmp+0x4c>
    if (c1 < c2) return -1;
 8024bbe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8024bc2:	b005      	add	sp, #20
 8024bc4:	bd30      	pop	{r4, r5, pc}
    if (c1 > c2) return 1;
 8024bc6:	2001      	movs	r0, #1
 8024bc8:	e7fb      	b.n	8024bc2 <mg_strcasecmp+0x4c>
  if (i < str1.len) return 1;
 8024bca:	2001      	movs	r0, #1
 8024bcc:	e7f9      	b.n	8024bc2 <mg_strcasecmp+0x4c>
  if (i < str2.len) return -1;
 8024bce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024bd2:	e7f6      	b.n	8024bc2 <mg_strcasecmp+0x4c>

08024bd4 <mg_http_parse>:
int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {
 8024bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024bd8:	b086      	sub	sp, #24
 8024bda:	4604      	mov	r4, r0
 8024bdc:	4616      	mov	r6, r2
  int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);
 8024bde:	f7fe fb45 	bl	802326c <mg_http_get_request_len>
 8024be2:	4607      	mov	r7, r0
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 8024be4:	b1d4      	cbz	r4, 8024c1c <mg_http_parse+0x48>
 8024be6:	1825      	adds	r5, r4, r0
  memset(hm, 0, sizeof(*hm));
 8024be8:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8024bec:	2100      	movs	r1, #0
 8024bee:	4630      	mov	r0, r6
 8024bf0:	f008 fa36 	bl	802d060 <memset>
  if (req_len <= 0) return req_len;
 8024bf4:	2f00      	cmp	r7, #0
 8024bf6:	f340 808d 	ble.w	8024d14 <mg_http_parse+0x140>
  hm->message.buf = hm->head.buf = (char *) s;
 8024bfa:	f8c6 4208 	str.w	r4, [r6, #520]	@ 0x208
 8024bfe:	f8c6 4210 	str.w	r4, [r6, #528]	@ 0x210
  hm->body.buf = (char *) end;
 8024c02:	f8c6 5200 	str.w	r5, [r6, #512]	@ 0x200
  hm->head.len = (size_t) req_len;
 8024c06:	46b8      	mov	r8, r7
 8024c08:	f8c6 720c 	str.w	r7, [r6, #524]	@ 0x20c
  hm->message.len = hm->body.len = (size_t) -1;  // Set body length to infinite
 8024c0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8024c10:	f8c6 3204 	str.w	r3, [r6, #516]	@ 0x204
 8024c14:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
  hm->method.buf = (char *) s;
 8024c18:	6034      	str	r4, [r6, #0]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 8024c1a:	e005      	b.n	8024c28 <mg_http_parse+0x54>
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 8024c1c:	4625      	mov	r5, r4
 8024c1e:	e7e3      	b.n	8024be8 <mg_http_parse+0x14>
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 8024c20:	4414      	add	r4, r2
 8024c22:	6873      	ldr	r3, [r6, #4]
 8024c24:	4413      	add	r3, r2
 8024c26:	6073      	str	r3, [r6, #4]
 8024c28:	42ac      	cmp	r4, r5
 8024c2a:	d208      	bcs.n	8024c3e <mg_http_parse+0x6a>
 8024c2c:	4629      	mov	r1, r5
 8024c2e:	4620      	mov	r0, r4
 8024c30:	f7fb fc1c 	bl	802046c <clen>
 8024c34:	4602      	mov	r2, r0
 8024c36:	2800      	cmp	r0, #0
 8024c38:	d1f2      	bne.n	8024c20 <mg_http_parse+0x4c>
 8024c3a:	e000      	b.n	8024c3e <mg_http_parse+0x6a>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 8024c3c:	3401      	adds	r4, #1
 8024c3e:	42ac      	cmp	r4, r5
 8024c40:	d202      	bcs.n	8024c48 <mg_http_parse+0x74>
 8024c42:	7823      	ldrb	r3, [r4, #0]
 8024c44:	2b20      	cmp	r3, #32
 8024c46:	d0f9      	beq.n	8024c3c <mg_http_parse+0x68>
  hm->uri.buf = (char *) s;
 8024c48:	60b4      	str	r4, [r6, #8]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->uri.len += n;
 8024c4a:	e003      	b.n	8024c54 <mg_http_parse+0x80>
 8024c4c:	4414      	add	r4, r2
 8024c4e:	68f3      	ldr	r3, [r6, #12]
 8024c50:	4413      	add	r3, r2
 8024c52:	60f3      	str	r3, [r6, #12]
 8024c54:	42ac      	cmp	r4, r5
 8024c56:	d208      	bcs.n	8024c6a <mg_http_parse+0x96>
 8024c58:	4629      	mov	r1, r5
 8024c5a:	4620      	mov	r0, r4
 8024c5c:	f7fb fc06 	bl	802046c <clen>
 8024c60:	4602      	mov	r2, r0
 8024c62:	2800      	cmp	r0, #0
 8024c64:	d1f2      	bne.n	8024c4c <mg_http_parse+0x78>
 8024c66:	e000      	b.n	8024c6a <mg_http_parse+0x96>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 8024c68:	3401      	adds	r4, #1
 8024c6a:	42ac      	cmp	r4, r5
 8024c6c:	d202      	bcs.n	8024c74 <mg_http_parse+0xa0>
 8024c6e:	7823      	ldrb	r3, [r4, #0]
 8024c70:	2b20      	cmp	r3, #32
 8024c72:	d0f9      	beq.n	8024c68 <mg_http_parse+0x94>
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 8024c74:	f106 0218 	add.w	r2, r6, #24
 8024c78:	4629      	mov	r1, r5
 8024c7a:	4620      	mov	r0, r4
 8024c7c:	f7fb fc3d 	bl	80204fa <skiptorn>
 8024c80:	4682      	mov	sl, r0
 8024c82:	2800      	cmp	r0, #0
 8024c84:	f000 8082 	beq.w	8024d8c <mg_http_parse+0x1b8>
  if ((qs = (const char *) memchr(hm->uri.buf, '?', hm->uri.len)) != NULL) {
 8024c88:	f8d6 9008 	ldr.w	r9, [r6, #8]
 8024c8c:	68f4      	ldr	r4, [r6, #12]
 8024c8e:	4622      	mov	r2, r4
 8024c90:	213f      	movs	r1, #63	@ 0x3f
 8024c92:	4648      	mov	r0, r9
 8024c94:	f7eb fab4 	bl	8010200 <memchr>
 8024c98:	b138      	cbz	r0, 8024caa <mg_http_parse+0xd6>
    hm->query.buf = (char *) qs + 1;
 8024c9a:	1c42      	adds	r2, r0, #1
 8024c9c:	6132      	str	r2, [r6, #16]
    hm->query.len = (size_t) (&hm->uri.buf[hm->uri.len] - (qs + 1));
 8024c9e:	444c      	add	r4, r9
 8024ca0:	1aa4      	subs	r4, r4, r2
 8024ca2:	6174      	str	r4, [r6, #20]
    hm->uri.len = (size_t) (qs - hm->uri.buf);
 8024ca4:	eba0 0309 	sub.w	r3, r0, r9
 8024ca8:	60f3      	str	r3, [r6, #12]
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 8024caa:	6873      	ldr	r3, [r6, #4]
 8024cac:	2b00      	cmp	r3, #0
 8024cae:	d06f      	beq.n	8024d90 <mg_http_parse+0x1bc>
 8024cb0:	68f3      	ldr	r3, [r6, #12]
 8024cb2:	2b00      	cmp	r3, #0
 8024cb4:	d06f      	beq.n	8024d96 <mg_http_parse+0x1c2>
  if (!mg_http_parse_headers(s, end, hm->headers,
 8024cb6:	231e      	movs	r3, #30
 8024cb8:	f106 0220 	add.w	r2, r6, #32
 8024cbc:	4629      	mov	r1, r5
 8024cbe:	4650      	mov	r0, sl
 8024cc0:	f7fb fc43 	bl	802054a <mg_http_parse_headers>
 8024cc4:	2800      	cmp	r0, #0
 8024cc6:	d069      	beq.n	8024d9c <mg_http_parse+0x1c8>
  if ((cl = mg_http_get_header(hm, "Content-Length")) != NULL) {
 8024cc8:	4939      	ldr	r1, [pc, #228]	@ (8024db0 <mg_http_parse+0x1dc>)
 8024cca:	4630      	mov	r0, r6
 8024ccc:	f7fe fafa 	bl	80232c4 <mg_http_get_header>
 8024cd0:	b160      	cbz	r0, 8024cec <mg_http_parse+0x118>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 8024cd2:	f506 7201 	add.w	r2, r6, #516	@ 0x204
 8024cd6:	e9d0 0100 	ldrd	r0, r1, [r0]
 8024cda:	f7fe fa75 	bl	80231c8 <mg_to_size_t>
 8024cde:	2800      	cmp	r0, #0
 8024ce0:	d05f      	beq.n	8024da2 <mg_http_parse+0x1ce>
    hm->message.len = (size_t) req_len + hm->body.len;
 8024ce2:	f8d6 3204 	ldr.w	r3, [r6, #516]	@ 0x204
 8024ce6:	4443      	add	r3, r8
 8024ce8:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
  is_response = mg_ncasecmp(hm->method.buf, "HTTP/", 5) == 0;
 8024cec:	2205      	movs	r2, #5
 8024cee:	4931      	ldr	r1, [pc, #196]	@ (8024db4 <mg_http_parse+0x1e0>)
 8024cf0:	6830      	ldr	r0, [r6, #0]
 8024cf2:	f7fb fb6d 	bl	80203d0 <mg_ncasecmp>
 8024cf6:	4604      	mov	r4, r0
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8024cf8:	f8d6 3204 	ldr.w	r3, [r6, #516]	@ 0x204
 8024cfc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8024d00:	d00c      	beq.n	8024d1c <mg_http_parse+0x148>
  if (hm->body.len == (size_t) ~0 && is_response &&
 8024d02:	f8d6 3204 	ldr.w	r3, [r6, #516]	@ 0x204
 8024d06:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8024d0a:	d029      	beq.n	8024d60 <mg_http_parse+0x18c>
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 8024d0c:	f8d6 3214 	ldr.w	r3, [r6, #532]	@ 0x214
 8024d10:	4598      	cmp	r8, r3
 8024d12:	d849      	bhi.n	8024da8 <mg_http_parse+0x1d4>
}
 8024d14:	4638      	mov	r0, r7
 8024d16:	b006      	add	sp, #24
 8024d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8024d1c:	2800      	cmp	r0, #0
 8024d1e:	d0f0      	beq.n	8024d02 <mg_http_parse+0x12e>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 8024d20:	466d      	mov	r5, sp
 8024d22:	4925      	ldr	r1, [pc, #148]	@ (8024db8 <mg_http_parse+0x1e4>)
 8024d24:	4628      	mov	r0, r5
 8024d26:	f7ff fe2b 	bl	8024980 <mg_str_s>
 8024d2a:	e895 000c 	ldmia.w	r5, {r2, r3}
 8024d2e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8024d32:	f7ff ff20 	bl	8024b76 <mg_strcasecmp>
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8024d36:	2800      	cmp	r0, #0
 8024d38:	d0e3      	beq.n	8024d02 <mg_http_parse+0x12e>
      mg_strcasecmp(hm->method, mg_str("POST")) != 0) {
 8024d3a:	ad02      	add	r5, sp, #8
 8024d3c:	491f      	ldr	r1, [pc, #124]	@ (8024dbc <mg_http_parse+0x1e8>)
 8024d3e:	4628      	mov	r0, r5
 8024d40:	f7ff fe1e 	bl	8024980 <mg_str_s>
 8024d44:	e895 000c 	ldmia.w	r5, {r2, r3}
 8024d48:	e896 0003 	ldmia.w	r6, {r0, r1}
 8024d4c:	f7ff ff13 	bl	8024b76 <mg_strcasecmp>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 8024d50:	2800      	cmp	r0, #0
 8024d52:	d0d6      	beq.n	8024d02 <mg_http_parse+0x12e>
    hm->body.len = 0;
 8024d54:	2300      	movs	r3, #0
 8024d56:	f8c6 3204 	str.w	r3, [r6, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 8024d5a:	f8c6 8214 	str.w	r8, [r6, #532]	@ 0x214
 8024d5e:	e7d0      	b.n	8024d02 <mg_http_parse+0x12e>
  if (hm->body.len == (size_t) ~0 && is_response &&
 8024d60:	2c00      	cmp	r4, #0
 8024d62:	d1d3      	bne.n	8024d0c <mg_http_parse+0x138>
      mg_strcasecmp(hm->uri, mg_str("204")) == 0) {
 8024d64:	ac04      	add	r4, sp, #16
 8024d66:	4916      	ldr	r1, [pc, #88]	@ (8024dc0 <mg_http_parse+0x1ec>)
 8024d68:	4620      	mov	r0, r4
 8024d6a:	f7ff fe09 	bl	8024980 <mg_str_s>
 8024d6e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8024d72:	f106 0108 	add.w	r1, r6, #8
 8024d76:	c903      	ldmia	r1, {r0, r1}
 8024d78:	f7ff fefd 	bl	8024b76 <mg_strcasecmp>
  if (hm->body.len == (size_t) ~0 && is_response &&
 8024d7c:	2800      	cmp	r0, #0
 8024d7e:	d1c5      	bne.n	8024d0c <mg_http_parse+0x138>
    hm->body.len = 0;
 8024d80:	2300      	movs	r3, #0
 8024d82:	f8c6 3204 	str.w	r3, [r6, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 8024d86:	f8c6 8214 	str.w	r8, [r6, #532]	@ 0x214
 8024d8a:	e7bf      	b.n	8024d0c <mg_http_parse+0x138>
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 8024d8c:	2700      	movs	r7, #0
 8024d8e:	e7c1      	b.n	8024d14 <mg_http_parse+0x140>
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 8024d90:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8024d94:	e7be      	b.n	8024d14 <mg_http_parse+0x140>
 8024d96:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8024d9a:	e7bb      	b.n	8024d14 <mg_http_parse+0x140>
    return -1;  // error when parsing
 8024d9c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8024da0:	e7b8      	b.n	8024d14 <mg_http_parse+0x140>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 8024da2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8024da6:	e7b5      	b.n	8024d14 <mg_http_parse+0x140>
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 8024da8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8024dac:	e7b2      	b.n	8024d14 <mg_http_parse+0x140>
 8024dae:	bf00      	nop
 8024db0:	0803ac68 	.word	0x0803ac68
 8024db4:	0803ac78 	.word	0x0803ac78
 8024db8:	08037bd4 	.word	0x08037bd4
 8024dbc:	08036e88 	.word	0x08036e88
 8024dc0:	0803ac80 	.word	0x0803ac80

08024dc4 <mg_match>:
bool mg_match(struct mg_str s, struct mg_str p, struct mg_str *caps) {
 8024dc4:	b530      	push	{r4, r5, lr}
 8024dc6:	b085      	sub	sp, #20
 8024dc8:	ac04      	add	r4, sp, #16
 8024dca:	e904 0003 	stmdb	r4, {r0, r1}
 8024dce:	4669      	mov	r1, sp
 8024dd0:	e881 000c 	stmia.w	r1, {r2, r3}
 8024dd4:	9808      	ldr	r0, [sp, #32]
  if (caps) caps->buf = NULL, caps->len = 0;
 8024dd6:	b110      	cbz	r0, 8024dde <mg_match+0x1a>
 8024dd8:	2300      	movs	r3, #0
 8024dda:	6003      	str	r3, [r0, #0]
 8024ddc:	6043      	str	r3, [r0, #4]
      ni = i++, nj = j + 1;
 8024dde:	2400      	movs	r4, #0
 8024de0:	46a4      	mov	ip, r4
 8024de2:	4621      	mov	r1, r4
 8024de4:	4623      	mov	r3, r4
 8024de6:	e028      	b.n	8024e3a <mg_match+0x76>
        caps->buf = &s.buf[j], caps->len = 1;     // Finalize `?` cap
 8024de8:	9a02      	ldr	r2, [sp, #8]
 8024dea:	440a      	add	r2, r1
 8024dec:	6002      	str	r2, [r0, #0]
 8024dee:	2201      	movs	r2, #1
 8024df0:	6042      	str	r2, [r0, #4]
        caps++, caps->buf = NULL, caps->len = 0;  // Init next cap
 8024df2:	2200      	movs	r2, #0
 8024df4:	6082      	str	r2, [r0, #8]
 8024df6:	60c2      	str	r2, [r0, #12]
 8024df8:	3008      	adds	r0, #8
      i++, j++;
 8024dfa:	3301      	adds	r3, #1
 8024dfc:	3101      	adds	r1, #1
 8024dfe:	e01c      	b.n	8024e3a <mg_match+0x76>
    } else if (i < p.len && (p.buf[i] == '*' || p.buf[i] == '#')) {
 8024e00:	429a      	cmp	r2, r3
 8024e02:	d905      	bls.n	8024e10 <mg_match+0x4c>
 8024e04:	9a00      	ldr	r2, [sp, #0]
 8024e06:	5cd2      	ldrb	r2, [r2, r3]
 8024e08:	2a2a      	cmp	r2, #42	@ 0x2a
 8024e0a:	d045      	beq.n	8024e98 <mg_match+0xd4>
 8024e0c:	2a23      	cmp	r2, #35	@ 0x23
 8024e0e:	d043      	beq.n	8024e98 <mg_match+0xd4>
    } else if (nj > 0 && nj <= s.len && (p.buf[ni] == '#' || s.buf[j] != '/')) {
 8024e10:	2c00      	cmp	r4, #0
 8024e12:	d065      	beq.n	8024ee0 <mg_match+0x11c>
 8024e14:	9b03      	ldr	r3, [sp, #12]
 8024e16:	42a3      	cmp	r3, r4
 8024e18:	d365      	bcc.n	8024ee6 <mg_match+0x122>
 8024e1a:	9b00      	ldr	r3, [sp, #0]
 8024e1c:	f813 300c 	ldrb.w	r3, [r3, ip]
 8024e20:	2b23      	cmp	r3, #35	@ 0x23
 8024e22:	d003      	beq.n	8024e2c <mg_match+0x68>
 8024e24:	9b02      	ldr	r3, [sp, #8]
 8024e26:	5c5b      	ldrb	r3, [r3, r1]
 8024e28:	2b2f      	cmp	r3, #47	@ 0x2f
 8024e2a:	d05e      	beq.n	8024eea <mg_match+0x126>
      if (caps && caps->buf == NULL && caps->len == 0) {
 8024e2c:	2800      	cmp	r0, #0
 8024e2e:	d046      	beq.n	8024ebe <mg_match+0xfa>
 8024e30:	6803      	ldr	r3, [r0, #0]
 8024e32:	2b00      	cmp	r3, #0
 8024e34:	d03c      	beq.n	8024eb0 <mg_match+0xec>
      i = ni, j = nj;
 8024e36:	4621      	mov	r1, r4
 8024e38:	4663      	mov	r3, ip
  while (i < p.len || j < s.len) {
 8024e3a:	9a01      	ldr	r2, [sp, #4]
 8024e3c:	429a      	cmp	r2, r3
 8024e3e:	d802      	bhi.n	8024e46 <mg_match+0x82>
 8024e40:	9d03      	ldr	r5, [sp, #12]
 8024e42:	428d      	cmp	r5, r1
 8024e44:	d941      	bls.n	8024eca <mg_match+0x106>
    if (i < p.len && j < s.len &&
 8024e46:	429a      	cmp	r2, r3
 8024e48:	d9da      	bls.n	8024e00 <mg_match+0x3c>
 8024e4a:	9d03      	ldr	r5, [sp, #12]
 8024e4c:	428d      	cmp	r5, r1
 8024e4e:	d9d7      	bls.n	8024e00 <mg_match+0x3c>
        (p.buf[i] == '?' ||
 8024e50:	9d00      	ldr	r5, [sp, #0]
 8024e52:	f815 e003 	ldrb.w	lr, [r5, r3]
    if (i < p.len && j < s.len &&
 8024e56:	f1be 0f3f 	cmp.w	lr, #63	@ 0x3f
 8024e5a:	d009      	beq.n	8024e70 <mg_match+0xac>
        (p.buf[i] == '?' ||
 8024e5c:	f1be 0f2a 	cmp.w	lr, #42	@ 0x2a
 8024e60:	d0ce      	beq.n	8024e00 <mg_match+0x3c>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 8024e62:	f1be 0f23 	cmp.w	lr, #35	@ 0x23
 8024e66:	d0cb      	beq.n	8024e00 <mg_match+0x3c>
 8024e68:	9d02      	ldr	r5, [sp, #8]
 8024e6a:	5c6d      	ldrb	r5, [r5, r1]
 8024e6c:	45ae      	cmp	lr, r5
 8024e6e:	d1c7      	bne.n	8024e00 <mg_match+0x3c>
      if (caps == NULL) {
 8024e70:	2800      	cmp	r0, #0
 8024e72:	d0c2      	beq.n	8024dfa <mg_match+0x36>
      } else if (p.buf[i] == '?') {
 8024e74:	f1be 0f3f 	cmp.w	lr, #63	@ 0x3f
 8024e78:	d0b6      	beq.n	8024de8 <mg_match+0x24>
      } else if (caps->buf != NULL && caps->len == 0) {
 8024e7a:	6802      	ldr	r2, [r0, #0]
 8024e7c:	2a00      	cmp	r2, #0
 8024e7e:	d0bc      	beq.n	8024dfa <mg_match+0x36>
 8024e80:	6845      	ldr	r5, [r0, #4]
 8024e82:	2d00      	cmp	r5, #0
 8024e84:	d1b9      	bne.n	8024dfa <mg_match+0x36>
        caps->len = (size_t) (&s.buf[j] - caps->buf);  // Finalize current cap
 8024e86:	9d02      	ldr	r5, [sp, #8]
 8024e88:	440d      	add	r5, r1
 8024e8a:	1aad      	subs	r5, r5, r2
 8024e8c:	6045      	str	r5, [r0, #4]
        caps++, caps->len = 0, caps->buf = NULL;       // Init next cap
 8024e8e:	2200      	movs	r2, #0
 8024e90:	60c2      	str	r2, [r0, #12]
 8024e92:	6082      	str	r2, [r0, #8]
 8024e94:	3008      	adds	r0, #8
 8024e96:	e7b0      	b.n	8024dfa <mg_match+0x36>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 8024e98:	b108      	cbz	r0, 8024e9e <mg_match+0xda>
 8024e9a:	6802      	ldr	r2, [r0, #0]
 8024e9c:	b11a      	cbz	r2, 8024ea6 <mg_match+0xe2>
      ni = i++, nj = j + 1;
 8024e9e:	1c4c      	adds	r4, r1, #1
 8024ea0:	469c      	mov	ip, r3
 8024ea2:	3301      	adds	r3, #1
 8024ea4:	e7c9      	b.n	8024e3a <mg_match+0x76>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 8024ea6:	6042      	str	r2, [r0, #4]
 8024ea8:	9a02      	ldr	r2, [sp, #8]
 8024eaa:	440a      	add	r2, r1
 8024eac:	6002      	str	r2, [r0, #0]
 8024eae:	e7f6      	b.n	8024e9e <mg_match+0xda>
      if (caps && caps->buf == NULL && caps->len == 0) {
 8024eb0:	6843      	ldr	r3, [r0, #4]
 8024eb2:	b93b      	cbnz	r3, 8024ec4 <mg_match+0x100>
        caps--, caps->len = 0;  // Restart previous cap
 8024eb4:	3808      	subs	r0, #8
 8024eb6:	6043      	str	r3, [r0, #4]
      i = ni, j = nj;
 8024eb8:	4621      	mov	r1, r4
 8024eba:	4663      	mov	r3, ip
 8024ebc:	e7bd      	b.n	8024e3a <mg_match+0x76>
 8024ebe:	4621      	mov	r1, r4
 8024ec0:	4663      	mov	r3, ip
 8024ec2:	e7ba      	b.n	8024e3a <mg_match+0x76>
 8024ec4:	4621      	mov	r1, r4
 8024ec6:	4663      	mov	r3, ip
 8024ec8:	e7b7      	b.n	8024e3a <mg_match+0x76>
  if (caps && caps->buf && caps->len == 0) {
 8024eca:	b180      	cbz	r0, 8024eee <mg_match+0x12a>
 8024ecc:	6803      	ldr	r3, [r0, #0]
 8024ece:	b183      	cbz	r3, 8024ef2 <mg_match+0x12e>
 8024ed0:	6842      	ldr	r2, [r0, #4]
 8024ed2:	b982      	cbnz	r2, 8024ef6 <mg_match+0x132>
    caps->len = (size_t) (&s.buf[j] - caps->buf);
 8024ed4:	9a02      	ldr	r2, [sp, #8]
 8024ed6:	440a      	add	r2, r1
 8024ed8:	1ad3      	subs	r3, r2, r3
 8024eda:	6043      	str	r3, [r0, #4]
  return true;
 8024edc:	2001      	movs	r0, #1
 8024ede:	e000      	b.n	8024ee2 <mg_match+0x11e>
      return false;
 8024ee0:	2000      	movs	r0, #0
}
 8024ee2:	b005      	add	sp, #20
 8024ee4:	bd30      	pop	{r4, r5, pc}
      return false;
 8024ee6:	2000      	movs	r0, #0
 8024ee8:	e7fb      	b.n	8024ee2 <mg_match+0x11e>
 8024eea:	2000      	movs	r0, #0
 8024eec:	e7f9      	b.n	8024ee2 <mg_match+0x11e>
  return true;
 8024eee:	2001      	movs	r0, #1
 8024ef0:	e7f7      	b.n	8024ee2 <mg_match+0x11e>
 8024ef2:	2001      	movs	r0, #1
 8024ef4:	e7f5      	b.n	8024ee2 <mg_match+0x11e>
 8024ef6:	2001      	movs	r0, #1
 8024ef8:	e7f3      	b.n	8024ee2 <mg_match+0x11e>

08024efa <mg_span>:
bool mg_span(struct mg_str s, struct mg_str *a, struct mg_str *b, char sep) {
 8024efa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024efe:	b085      	sub	sp, #20
 8024f00:	ac04      	add	r4, sp, #16
 8024f02:	e904 0003 	stmdb	r4, {r0, r1}
 8024f06:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
  if (s.len == 0 || s.buf == NULL) {
 8024f0a:	b379      	cbz	r1, 8024f6c <mg_span+0x72>
 8024f0c:	4690      	mov	r8, r2
 8024f0e:	461f      	mov	r7, r3
 8024f10:	460d      	mov	r5, r1
 8024f12:	9e02      	ldr	r6, [sp, #8]
 8024f14:	b366      	cbz	r6, 8024f70 <mg_span+0x76>
    size_t len = 0;
 8024f16:	2400      	movs	r4, #0
 8024f18:	e000      	b.n	8024f1c <mg_span+0x22>
    while (len < s.len && s.buf[len] != sep) len++;  // Find separator
 8024f1a:	3401      	adds	r4, #1
 8024f1c:	42a5      	cmp	r5, r4
 8024f1e:	d902      	bls.n	8024f26 <mg_span+0x2c>
 8024f20:	5d31      	ldrb	r1, [r6, r4]
 8024f22:	4281      	cmp	r1, r0
 8024f24:	d1f9      	bne.n	8024f1a <mg_span+0x20>
    if (a) *a = mg_str_n(s.buf, len);                // Init a
 8024f26:	f1b8 0f00 	cmp.w	r8, #0
 8024f2a:	d009      	beq.n	8024f40 <mg_span+0x46>
 8024f2c:	46e9      	mov	r9, sp
 8024f2e:	4622      	mov	r2, r4
 8024f30:	4631      	mov	r1, r6
 8024f32:	4648      	mov	r0, r9
 8024f34:	f7ff fd30 	bl	8024998 <mg_str_n>
 8024f38:	e899 0003 	ldmia.w	r9, {r0, r1}
 8024f3c:	e888 0003 	stmia.w	r8, {r0, r1}
    if (b) *b = mg_str_n(s.buf + len, s.len - len);  // Init b
 8024f40:	b187      	cbz	r7, 8024f64 <mg_span+0x6a>
 8024f42:	46e8      	mov	r8, sp
 8024f44:	1b2a      	subs	r2, r5, r4
 8024f46:	1931      	adds	r1, r6, r4
 8024f48:	4640      	mov	r0, r8
 8024f4a:	f7ff fd25 	bl	8024998 <mg_str_n>
 8024f4e:	e898 0003 	ldmia.w	r8, {r0, r1}
 8024f52:	e887 0003 	stmia.w	r7, {r0, r1}
    if (b && len < s.len) b->buf++, b->len--;        // Skip separator
 8024f56:	42a5      	cmp	r5, r4
 8024f58:	d904      	bls.n	8024f64 <mg_span+0x6a>
 8024f5a:	4603      	mov	r3, r0
 8024f5c:	3301      	adds	r3, #1
 8024f5e:	603b      	str	r3, [r7, #0]
 8024f60:	1e4b      	subs	r3, r1, #1
 8024f62:	607b      	str	r3, [r7, #4]
    return true;
 8024f64:	2001      	movs	r0, #1
}
 8024f66:	b005      	add	sp, #20
 8024f68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;  // Empty string, nothing to span - fail
 8024f6c:	2000      	movs	r0, #0
 8024f6e:	e7fa      	b.n	8024f66 <mg_span+0x6c>
 8024f70:	2000      	movs	r0, #0
 8024f72:	e7f8      	b.n	8024f66 <mg_span+0x6c>

08024f74 <mg_http_var>:
struct mg_str mg_http_var(struct mg_str buf, struct mg_str name) {
 8024f74:	b082      	sub	sp, #8
 8024f76:	b510      	push	{r4, lr}
 8024f78:	b08a      	sub	sp, #40	@ 0x28
 8024f7a:	4604      	mov	r4, r0
 8024f7c:	f10d 0c08 	add.w	ip, sp, #8
 8024f80:	e88c 0006 	stmia.w	ip, {r1, r2}
 8024f84:	930d      	str	r3, [sp, #52]	@ 0x34
  struct mg_str entry, k, v, result = mg_str_n(NULL, 0);
 8024f86:	2200      	movs	r2, #0
 8024f88:	4611      	mov	r1, r2
 8024f8a:	f7ff fd05 	bl	8024998 <mg_str_n>
  while (mg_span(buf, &entry, &buf, '&')) {
 8024f8e:	ab02      	add	r3, sp, #8
 8024f90:	2226      	movs	r2, #38	@ 0x26
 8024f92:	9200      	str	r2, [sp, #0]
 8024f94:	aa08      	add	r2, sp, #32
 8024f96:	e893 0003 	ldmia.w	r3, {r0, r1}
 8024f9a:	f7ff ffae 	bl	8024efa <mg_span>
 8024f9e:	b1c8      	cbz	r0, 8024fd4 <mg_http_var+0x60>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 8024fa0:	233d      	movs	r3, #61	@ 0x3d
 8024fa2:	9300      	str	r3, [sp, #0]
 8024fa4:	ab04      	add	r3, sp, #16
 8024fa6:	aa06      	add	r2, sp, #24
 8024fa8:	a90a      	add	r1, sp, #40	@ 0x28
 8024faa:	e911 0003 	ldmdb	r1, {r0, r1}
 8024fae:	f7ff ffa4 	bl	8024efa <mg_span>
 8024fb2:	2800      	cmp	r0, #0
 8024fb4:	d0eb      	beq.n	8024f8e <mg_http_var+0x1a>
 8024fb6:	9a07      	ldr	r2, [sp, #28]
 8024fb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024fba:	4293      	cmp	r3, r2
 8024fbc:	d1e7      	bne.n	8024f8e <mg_http_var+0x1a>
        mg_ncasecmp(name.buf, k.buf, k.len) == 0) {
 8024fbe:	9906      	ldr	r1, [sp, #24]
 8024fc0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8024fc2:	f7fb fa05 	bl	80203d0 <mg_ncasecmp>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 8024fc6:	2800      	cmp	r0, #0
 8024fc8:	d1e1      	bne.n	8024f8e <mg_http_var+0x1a>
      result = v;
 8024fca:	ab04      	add	r3, sp, #16
 8024fcc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8024fd0:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8024fd4:	4620      	mov	r0, r4
 8024fd6:	b00a      	add	sp, #40	@ 0x28
 8024fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024fdc:	b002      	add	sp, #8
 8024fde:	4770      	bx	lr

08024fe0 <guess_content_type>:
static struct mg_str guess_content_type(struct mg_str path, const char *extra) {
 8024fe0:	b530      	push	{r4, r5, lr}
 8024fe2:	b08d      	sub	sp, #52	@ 0x34
 8024fe4:	4604      	mov	r4, r0
 8024fe6:	a802      	add	r0, sp, #8
 8024fe8:	e880 0006 	stmia.w	r0, {r1, r2}
  struct mg_str entry, k, v, s = mg_str(extra);
 8024fec:	4619      	mov	r1, r3
 8024fee:	a804      	add	r0, sp, #16
 8024ff0:	f7ff fcc6 	bl	8024980 <mg_str_s>
  size_t i = 0;
 8024ff4:	2300      	movs	r3, #0
  while (i < path.len && path.buf[path.len - i - 1] != '.') i++;
 8024ff6:	e000      	b.n	8024ffa <guess_content_type+0x1a>
 8024ff8:	3301      	adds	r3, #1
 8024ffa:	9803      	ldr	r0, [sp, #12]
 8024ffc:	4298      	cmp	r0, r3
 8024ffe:	d906      	bls.n	802500e <guess_content_type+0x2e>
 8025000:	1ac1      	subs	r1, r0, r3
 8025002:	9a02      	ldr	r2, [sp, #8]
 8025004:	440a      	add	r2, r1
 8025006:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 802500a:	2a2e      	cmp	r2, #46	@ 0x2e
 802500c:	d1f4      	bne.n	8024ff8 <guess_content_type+0x18>
  path.buf += path.len - i;
 802500e:	1ac0      	subs	r0, r0, r3
 8025010:	9a02      	ldr	r2, [sp, #8]
 8025012:	4402      	add	r2, r0
 8025014:	9202      	str	r2, [sp, #8]
  path.len = i;
 8025016:	9303      	str	r3, [sp, #12]
  while (mg_span(s, &entry, &s, ',')) {
 8025018:	ab04      	add	r3, sp, #16
 802501a:	222c      	movs	r2, #44	@ 0x2c
 802501c:	9200      	str	r2, [sp, #0]
 802501e:	aa0a      	add	r2, sp, #40	@ 0x28
 8025020:	e893 0003 	ldmia.w	r3, {r0, r1}
 8025024:	f7ff ff69 	bl	8024efa <mg_span>
 8025028:	b1c0      	cbz	r0, 802505c <guess_content_type+0x7c>
    if (mg_span(entry, &k, &v, '=') && mg_strcmp(path, k) == 0) return v;
 802502a:	233d      	movs	r3, #61	@ 0x3d
 802502c:	9300      	str	r3, [sp, #0]
 802502e:	ab06      	add	r3, sp, #24
 8025030:	aa08      	add	r2, sp, #32
 8025032:	a90c      	add	r1, sp, #48	@ 0x30
 8025034:	e911 0003 	ldmdb	r1, {r0, r1}
 8025038:	f7ff ff5f 	bl	8024efa <mg_span>
 802503c:	2800      	cmp	r0, #0
 802503e:	d0eb      	beq.n	8025018 <guess_content_type+0x38>
 8025040:	ab08      	add	r3, sp, #32
 8025042:	cb0c      	ldmia	r3, {r2, r3}
 8025044:	a902      	add	r1, sp, #8
 8025046:	c903      	ldmia	r1, {r0, r1}
 8025048:	f7ff fd6b 	bl	8024b22 <mg_strcmp>
 802504c:	2800      	cmp	r0, #0
 802504e:	d1e3      	bne.n	8025018 <guess_content_type+0x38>
 8025050:	ab06      	add	r3, sp, #24
 8025052:	e893 0003 	ldmia.w	r3, {r0, r1}
 8025056:	e884 0003 	stmia.w	r4, {r0, r1}
 802505a:	e01c      	b.n	8025096 <guess_content_type+0xb6>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 802505c:	2500      	movs	r5, #0
 802505e:	4b0f      	ldr	r3, [pc, #60]	@ (802509c <guess_content_type+0xbc>)
 8025060:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
 8025064:	b19b      	cbz	r3, 802508e <guess_content_type+0xae>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 8025066:	4b0d      	ldr	r3, [pc, #52]	@ (802509c <guess_content_type+0xbc>)
 8025068:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 802506c:	cb0c      	ldmia	r3, {r2, r3}
 802506e:	a902      	add	r1, sp, #8
 8025070:	c903      	ldmia	r1, {r0, r1}
 8025072:	f7ff fd56 	bl	8024b22 <mg_strcmp>
 8025076:	b108      	cbz	r0, 802507c <guess_content_type+0x9c>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 8025078:	3502      	adds	r5, #2
 802507a:	e7f0      	b.n	802505e <guess_content_type+0x7e>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 802507c:	3501      	adds	r5, #1
 802507e:	4b07      	ldr	r3, [pc, #28]	@ (802509c <guess_content_type+0xbc>)
 8025080:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8025084:	e893 0003 	ldmia.w	r3, {r0, r1}
 8025088:	e884 0003 	stmia.w	r4, {r0, r1}
 802508c:	e003      	b.n	8025096 <guess_content_type+0xb6>
  return mg_str("text/plain; charset=utf-8");
 802508e:	4904      	ldr	r1, [pc, #16]	@ (80250a0 <guess_content_type+0xc0>)
 8025090:	4620      	mov	r0, r4
 8025092:	f7ff fc75 	bl	8024980 <mg_str_s>
}
 8025096:	4620      	mov	r0, r4
 8025098:	b00d      	add	sp, #52	@ 0x34
 802509a:	bd30      	pop	{r4, r5, pc}
 802509c:	0803c170 	.word	0x0803c170
 80250a0:	0803ac84 	.word	0x0803ac84

080250a4 <getrange>:
static int getrange(struct mg_str *s, size_t *a, size_t *b) {
 80250a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80250a6:	b087      	sub	sp, #28
 80250a8:	4604      	mov	r4, r0
 80250aa:	460e      	mov	r6, r1
 80250ac:	4617      	mov	r7, r2
  for (i = 0; i + 6 < s->len; i++) {
 80250ae:	2500      	movs	r5, #0
 80250b0:	1da8      	adds	r0, r5, #6
 80250b2:	6863      	ldr	r3, [r4, #4]
 80250b4:	4298      	cmp	r0, r3
 80250b6:	d23c      	bcs.n	8025132 <getrange+0x8e>
    struct mg_str k, v = mg_str_n(s->buf + i + 6, s->len - i - 6);
 80250b8:	6821      	ldr	r1, [r4, #0]
 80250ba:	1b5b      	subs	r3, r3, r5
 80250bc:	1f9a      	subs	r2, r3, #6
 80250be:	4401      	add	r1, r0
 80250c0:	a804      	add	r0, sp, #16
 80250c2:	f7ff fc69 	bl	8024998 <mg_str_n>
    if (memcmp(&s->buf[i], "bytes=", 6) != 0) continue;
 80250c6:	6820      	ldr	r0, [r4, #0]
 80250c8:	2206      	movs	r2, #6
 80250ca:	491b      	ldr	r1, [pc, #108]	@ (8025138 <getrange+0x94>)
 80250cc:	4428      	add	r0, r5
 80250ce:	f007 ff33 	bl	802cf38 <memcmp>
 80250d2:	b108      	cbz	r0, 80250d8 <getrange+0x34>
  for (i = 0; i + 6 < s->len; i++) {
 80250d4:	3501      	adds	r5, #1
 80250d6:	e7eb      	b.n	80250b0 <getrange+0xc>
    if (mg_span(v, &k, &v, '-')) {
 80250d8:	ab04      	add	r3, sp, #16
 80250da:	222d      	movs	r2, #45	@ 0x2d
 80250dc:	9200      	str	r2, [sp, #0]
 80250de:	aa02      	add	r2, sp, #8
 80250e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80250e4:	f7ff ff09 	bl	8024efa <mg_span>
 80250e8:	b1c0      	cbz	r0, 802511c <getrange+0x78>
      if (mg_to_size_t(k, a)) numparsed++;
 80250ea:	4632      	mov	r2, r6
 80250ec:	ab02      	add	r3, sp, #8
 80250ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80250f2:	f7fe f869 	bl	80231c8 <mg_to_size_t>
 80250f6:	b928      	cbnz	r0, 8025104 <getrange+0x60>
  size_t i, numparsed = 0;
 80250f8:	2400      	movs	r4, #0
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 80250fa:	9b05      	ldr	r3, [sp, #20]
 80250fc:	b923      	cbnz	r3, 8025108 <getrange+0x64>
}
 80250fe:	4620      	mov	r0, r4
 8025100:	b007      	add	sp, #28
 8025102:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (mg_to_size_t(k, a)) numparsed++;
 8025104:	2401      	movs	r4, #1
 8025106:	e7f8      	b.n	80250fa <getrange+0x56>
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 8025108:	463a      	mov	r2, r7
 802510a:	ab06      	add	r3, sp, #24
 802510c:	e913 0003 	ldmdb	r3, {r0, r1}
 8025110:	f7fe f85a 	bl	80231c8 <mg_to_size_t>
 8025114:	2800      	cmp	r0, #0
 8025116:	d0f2      	beq.n	80250fe <getrange+0x5a>
 8025118:	3401      	adds	r4, #1
 802511a:	e7f0      	b.n	80250fe <getrange+0x5a>
      if (mg_to_size_t(v, a)) numparsed++;
 802511c:	4632      	mov	r2, r6
 802511e:	ab06      	add	r3, sp, #24
 8025120:	e913 0003 	ldmdb	r3, {r0, r1}
 8025124:	f7fe f850 	bl	80231c8 <mg_to_size_t>
 8025128:	b908      	cbnz	r0, 802512e <getrange+0x8a>
  size_t i, numparsed = 0;
 802512a:	2400      	movs	r4, #0
 802512c:	e7e7      	b.n	80250fe <getrange+0x5a>
      if (mg_to_size_t(v, a)) numparsed++;
 802512e:	2401      	movs	r4, #1
    break;
 8025130:	e7e5      	b.n	80250fe <getrange+0x5a>
  size_t i, numparsed = 0;
 8025132:	2400      	movs	r4, #0
 8025134:	e7e3      	b.n	80250fe <getrange+0x5a>
 8025136:	bf00      	nop
 8025138:	0803aca0 	.word	0x0803aca0

0802513c <mg_http_serve_file>:
                        const struct mg_http_serve_opts *opts) {
 802513c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025140:	b0e7      	sub	sp, #412	@ 0x19c
 8025142:	4607      	mov	r7, r0
 8025144:	4688      	mov	r8, r1
 8025146:	4614      	mov	r4, r2
 8025148:	461d      	mov	r5, r3
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 802514a:	f8d3 9014 	ldr.w	r9, [r3, #20]
 802514e:	f1b9 0f00 	cmp.w	r9, #0
 8025152:	d036      	beq.n	80251c2 <mg_http_serve_file+0x86>
  size_t size = 0;
 8025154:	2300      	movs	r3, #0
 8025156:	932d      	str	r3, [sp, #180]	@ 0xb4
  time_t mtime = 0;
 8025158:	2200      	movs	r2, #0
 802515a:	2300      	movs	r3, #0
 802515c:	e9cd 232a 	strd	r2, r3, [sp, #168]	@ 0xa8
  struct mg_str mime = guess_content_type(mg_str(path), opts->mime_types);
 8025160:	ae5e      	add	r6, sp, #376	@ 0x178
 8025162:	4621      	mov	r1, r4
 8025164:	4630      	mov	r0, r6
 8025166:	f7ff fc0b 	bl	8024980 <mg_str_s>
 802516a:	68eb      	ldr	r3, [r5, #12]
 802516c:	e896 0006 	ldmia.w	r6, {r1, r2}
 8025170:	a828      	add	r0, sp, #160	@ 0xa0
 8025172:	f7ff ff35 	bl	8024fe0 <guess_content_type>
  if (path != NULL) {
 8025176:	2c00      	cmp	r4, #0
 8025178:	d053      	beq.n	8025222 <mg_http_serve_file+0xe6>
    struct mg_str *ae = mg_http_get_header(hm, "Accept-Encoding");
 802517a:	4995      	ldr	r1, [pc, #596]	@ (80253d0 <mg_http_serve_file+0x294>)
 802517c:	4640      	mov	r0, r8
 802517e:	f7fe f8a1 	bl	80232c4 <mg_http_get_header>
    if (ae != NULL) {
 8025182:	4606      	mov	r6, r0
 8025184:	2800      	cmp	r0, #0
 8025186:	d042      	beq.n	802520e <mg_http_serve_file+0xd2>
      char *ae_ = mg_mprintf("%.*s", ae->len, ae->buf);
 8025188:	6802      	ldr	r2, [r0, #0]
 802518a:	6841      	ldr	r1, [r0, #4]
 802518c:	4891      	ldr	r0, [pc, #580]	@ (80253d4 <mg_http_serve_file+0x298>)
 802518e:	f7ff fb15 	bl	80247bc <mg_mprintf>
      if (ae_ != NULL && strstr(ae_, "gzip") != NULL) {
 8025192:	4683      	mov	fp, r0
 8025194:	b1d8      	cbz	r0, 80251ce <mg_http_serve_file+0x92>
 8025196:	4990      	ldr	r1, [pc, #576]	@ (80253d8 <mg_http_serve_file+0x29c>)
 8025198:	f007 ffe2 	bl	802d160 <strstr>
 802519c:	4606      	mov	r6, r0
 802519e:	b1d0      	cbz	r0, 80251d6 <mg_http_serve_file+0x9a>
        mg_snprintf(tmp, sizeof(tmp), "%s.gz", path);
 80251a0:	4623      	mov	r3, r4
 80251a2:	4a8e      	ldr	r2, [pc, #568]	@ (80253dc <mg_http_serve_file+0x2a0>)
 80251a4:	2180      	movs	r1, #128	@ 0x80
 80251a6:	a82e      	add	r0, sp, #184	@ 0xb8
 80251a8:	f7fe fd62 	bl	8023c70 <mg_snprintf>
        fd = mg_fs_open(fs, tmp, MG_FS_READ);
 80251ac:	2201      	movs	r2, #1
 80251ae:	a92e      	add	r1, sp, #184	@ 0xb8
 80251b0:	4648      	mov	r0, r9
 80251b2:	f7fd ffcd 	bl	8023150 <mg_fs_open>
        if (fd != NULL) gzip = true, path = tmp;
 80251b6:	4606      	mov	r6, r0
 80251b8:	b130      	cbz	r0, 80251c8 <mg_http_serve_file+0x8c>
 80251ba:	f04f 0a01 	mov.w	sl, #1
 80251be:	ac2e      	add	r4, sp, #184	@ 0xb8
 80251c0:	e00b      	b.n	80251da <mg_http_serve_file+0x9e>
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 80251c2:	f8df 9240 	ldr.w	r9, [pc, #576]	@ 8025404 <mg_http_serve_file+0x2c8>
 80251c6:	e7c5      	b.n	8025154 <mg_http_serve_file+0x18>
  bool gzip = false;
 80251c8:	f04f 0a00 	mov.w	sl, #0
 80251cc:	e005      	b.n	80251da <mg_http_serve_file+0x9e>
  struct mg_fd *fd = NULL;
 80251ce:	4606      	mov	r6, r0
  bool gzip = false;
 80251d0:	f04f 0a00 	mov.w	sl, #0
 80251d4:	e001      	b.n	80251da <mg_http_serve_file+0x9e>
 80251d6:	f04f 0a00 	mov.w	sl, #0
      free(ae_);
 80251da:	4658      	mov	r0, fp
 80251dc:	f7f5 ff76 	bl	801b0cc <vPortFree>
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 80251e0:	b1c6      	cbz	r6, 8025214 <mg_http_serve_file+0xd8>
  if (fd == NULL && opts->page404 != NULL) {
 80251e2:	b316      	cbz	r6, 802522a <mg_http_serve_file+0xee>
  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 80251e4:	f8d9 3000 	ldr.w	r3, [r9]
 80251e8:	aa2a      	add	r2, sp, #168	@ 0xa8
 80251ea:	a92d      	add	r1, sp, #180	@ 0xb4
 80251ec:	4620      	mov	r0, r4
 80251ee:	4798      	blx	r3
 80251f0:	2800      	cmp	r0, #0
 80251f2:	d137      	bne.n	8025264 <mg_http_serve_file+0x128>
    mg_http_reply(c, 404, opts->extra_headers, "Not found\n");
 80251f4:	4b7a      	ldr	r3, [pc, #488]	@ (80253e0 <mg_http_serve_file+0x2a4>)
 80251f6:	68aa      	ldr	r2, [r5, #8]
 80251f8:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 80251fc:	4638      	mov	r0, r7
 80251fe:	f7ff fa35 	bl	802466c <mg_http_reply>
    mg_fs_close(fd);
 8025202:	4630      	mov	r0, r6
 8025204:	f7fd ffbd 	bl	8023182 <mg_fs_close>
}
 8025208:	b067      	add	sp, #412	@ 0x19c
 802520a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool gzip = false;
 802520e:	f04f 0a00 	mov.w	sl, #0
 8025212:	e7e5      	b.n	80251e0 <mg_http_serve_file+0xa4>
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 8025214:	2201      	movs	r2, #1
 8025216:	4621      	mov	r1, r4
 8025218:	4648      	mov	r0, r9
 802521a:	f7fd ff99 	bl	8023150 <mg_fs_open>
 802521e:	4606      	mov	r6, r0
 8025220:	e7df      	b.n	80251e2 <mg_http_serve_file+0xa6>
  struct mg_fd *fd = NULL;
 8025222:	4626      	mov	r6, r4
  bool gzip = false;
 8025224:	f04f 0a00 	mov.w	sl, #0
 8025228:	e7db      	b.n	80251e2 <mg_http_serve_file+0xa6>
  if (fd == NULL && opts->page404 != NULL) {
 802522a:	6929      	ldr	r1, [r5, #16]
 802522c:	b1b9      	cbz	r1, 802525e <mg_http_serve_file+0x122>
    fd = mg_fs_open(fs, opts->page404, MG_FS_READ);
 802522e:	2201      	movs	r2, #1
 8025230:	4648      	mov	r0, r9
 8025232:	f7fd ff8d 	bl	8023150 <mg_fs_open>
 8025236:	4606      	mov	r6, r0
    path = opts->page404;
 8025238:	692c      	ldr	r4, [r5, #16]
    mime = guess_content_type(mg_str(path), opts->mime_types);
 802523a:	f50d 7bc0 	add.w	fp, sp, #384	@ 0x180
 802523e:	4621      	mov	r1, r4
 8025240:	4658      	mov	r0, fp
 8025242:	f7ff fb9d 	bl	8024980 <mg_str_s>
 8025246:	68eb      	ldr	r3, [r5, #12]
 8025248:	e89b 0006 	ldmia.w	fp, {r1, r2}
 802524c:	a80a      	add	r0, sp, #40	@ 0x28
 802524e:	f7ff fec7 	bl	8024fe0 <guess_content_type>
 8025252:	ab28      	add	r3, sp, #160	@ 0xa0
 8025254:	aa0a      	add	r2, sp, #40	@ 0x28
 8025256:	e892 0003 	ldmia.w	r2, {r0, r1}
 802525a:	e883 0003 	stmia.w	r3, {r0, r1}
  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 802525e:	2e00      	cmp	r6, #0
 8025260:	d1c0      	bne.n	80251e4 <mg_http_serve_file+0xa8>
 8025262:	e7c7      	b.n	80251f4 <mg_http_serve_file+0xb8>
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8025264:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	@ 0xa8
 8025268:	e9cd 2300 	strd	r2, r3, [sp]
 802526c:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 802526e:	2140      	movs	r1, #64	@ 0x40
 8025270:	a84e      	add	r0, sp, #312	@ 0x138
 8025272:	f7ff fa3d 	bl	80246f0 <mg_http_etag>
 8025276:	b190      	cbz	r0, 802529e <mg_http_serve_file+0x162>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8025278:	495a      	ldr	r1, [pc, #360]	@ (80253e4 <mg_http_serve_file+0x2a8>)
 802527a:	4640      	mov	r0, r8
 802527c:	f7fe f822 	bl	80232c4 <mg_http_get_header>
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8025280:	4604      	mov	r4, r0
 8025282:	b160      	cbz	r0, 802529e <mg_http_serve_file+0x162>
             mg_strcasecmp(*inm, mg_str(etag)) == 0) {
 8025284:	f50d 7bc4 	add.w	fp, sp, #392	@ 0x188
 8025288:	a94e      	add	r1, sp, #312	@ 0x138
 802528a:	4658      	mov	r0, fp
 802528c:	f7ff fb78 	bl	8024980 <mg_str_s>
 8025290:	e89b 000c 	ldmia.w	fp, {r2, r3}
 8025294:	e894 0003 	ldmia.w	r4, {r0, r1}
 8025298:	f7ff fc6d 	bl	8024b76 <mg_strcasecmp>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 802529c:	b340      	cbz	r0, 80252f0 <mg_http_serve_file+0x1b4>
    size_t r1 = 0, r2 = 0, cl = size;
 802529e:	f04f 0b00 	mov.w	fp, #0
 80252a2:	f8cd b034 	str.w	fp, [sp, #52]	@ 0x34
 80252a6:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80252aa:	9c2d      	ldr	r4, [sp, #180]	@ 0xb4
    struct mg_str *rh = mg_http_get_header(hm, "Range");
 80252ac:	494e      	ldr	r1, [pc, #312]	@ (80253e8 <mg_http_serve_file+0x2ac>)
 80252ae:	4640      	mov	r0, r8
 80252b0:	f7fe f808 	bl	80232c4 <mg_http_get_header>
    range[0] = '\0';
 80252b4:	f88d b03c 	strb.w	fp, [sp, #60]	@ 0x3c
    if (rh != NULL && (n = getrange(rh, &r1, &r2)) > 0) {
 80252b8:	2800      	cmp	r0, #0
 80252ba:	d040      	beq.n	802533e <mg_http_serve_file+0x202>
 80252bc:	aa0e      	add	r2, sp, #56	@ 0x38
 80252be:	a90d      	add	r1, sp, #52	@ 0x34
 80252c0:	f7ff fef0 	bl	80250a4 <getrange>
 80252c4:	2800      	cmp	r0, #0
 80252c6:	dd70      	ble.n	80253aa <mg_http_serve_file+0x26e>
      if (n == 1) r2 = cl - 1;
 80252c8:	2801      	cmp	r0, #1
 80252ca:	d01c      	beq.n	8025306 <mg_http_serve_file+0x1ca>
      if (r1 > r2 || r2 >= cl) {
 80252cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80252ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80252d0:	429a      	cmp	r2, r3
 80252d2:	d801      	bhi.n	80252d8 <mg_http_serve_file+0x19c>
 80252d4:	42a3      	cmp	r3, r4
 80252d6:	d319      	bcc.n	802530c <mg_http_serve_file+0x1d0>
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 80252d8:	2400      	movs	r4, #0
 80252da:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 80252dc:	9300      	str	r3, [sp, #0]
 80252de:	9401      	str	r4, [sp, #4]
 80252e0:	4a42      	ldr	r2, [pc, #264]	@ (80253ec <mg_http_serve_file+0x2b0>)
 80252e2:	2164      	movs	r1, #100	@ 0x64
 80252e4:	a80f      	add	r0, sp, #60	@ 0x3c
 80252e6:	f7fe fcc3 	bl	8023c70 <mg_snprintf>
        status = 416;
 80252ea:	f44f 79d0 	mov.w	r9, #416	@ 0x1a0
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 80252ee:	e028      	b.n	8025342 <mg_http_serve_file+0x206>
    mg_fs_close(fd);
 80252f0:	4630      	mov	r0, r6
 80252f2:	f7fd ff46 	bl	8023182 <mg_fs_close>
    mg_http_reply(c, 304, opts->extra_headers, "");
 80252f6:	4b3e      	ldr	r3, [pc, #248]	@ (80253f0 <mg_http_serve_file+0x2b4>)
 80252f8:	68aa      	ldr	r2, [r5, #8]
 80252fa:	f44f 7198 	mov.w	r1, #304	@ 0x130
 80252fe:	4638      	mov	r0, r7
 8025300:	f7ff f9b4 	bl	802466c <mg_http_reply>
 8025304:	e780      	b.n	8025208 <mg_http_serve_file+0xcc>
      if (n == 1) r2 = cl - 1;
 8025306:	1e63      	subs	r3, r4, #1
 8025308:	930e      	str	r3, [sp, #56]	@ 0x38
 802530a:	e7df      	b.n	80252cc <mg_http_serve_file+0x190>
        cl = r2 - r1 + 1;
 802530c:	1a9b      	subs	r3, r3, r2
 802530e:	1c5c      	adds	r4, r3, #1
                    (uint64_t) (r1 + cl - 1), (uint64_t) size);
 8025310:	1911      	adds	r1, r2, r4
 8025312:	3901      	subs	r1, #1
        mg_snprintf(range, sizeof(range),
 8025314:	2300      	movs	r3, #0
 8025316:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 8025318:	9004      	str	r0, [sp, #16]
 802531a:	9305      	str	r3, [sp, #20]
 802531c:	9102      	str	r1, [sp, #8]
 802531e:	9303      	str	r3, [sp, #12]
 8025320:	9200      	str	r2, [sp, #0]
 8025322:	9301      	str	r3, [sp, #4]
 8025324:	4a33      	ldr	r2, [pc, #204]	@ (80253f4 <mg_http_serve_file+0x2b8>)
 8025326:	2164      	movs	r1, #100	@ 0x64
 8025328:	a80f      	add	r0, sp, #60	@ 0x3c
 802532a:	f7fe fca1 	bl	8023c70 <mg_snprintf>
        fs->sk(fd->fd, r1);
 802532e:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8025332:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8025334:	6830      	ldr	r0, [r6, #0]
 8025336:	4798      	blx	r3
        status = 206;
 8025338:	f04f 09ce 	mov.w	r9, #206	@ 0xce
 802533c:	e001      	b.n	8025342 <mg_http_serve_file+0x206>
    int n, status = 200;
 802533e:	f04f 09c8 	mov.w	r9, #200	@ 0xc8
    mg_printf(c,
 8025342:	4648      	mov	r0, r9
 8025344:	f7fb f96a 	bl	802061c <mg_http_status_code_str>
 8025348:	4603      	mov	r3, r0
              status, mg_http_status_code_str(status), (int) mime.len, mime.buf,
 802534a:	9929      	ldr	r1, [sp, #164]	@ 0xa4
    mg_printf(c,
 802534c:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 802534e:	46a4      	mov	ip, r4
 8025350:	f1ba 0f00 	cmp.w	sl, #0
 8025354:	d02c      	beq.n	80253b0 <mg_http_serve_file+0x274>
 8025356:	f8df e0b0 	ldr.w	lr, [pc, #176]	@ 8025408 <mg_http_serve_file+0x2cc>
              range, opts->extra_headers ? opts->extra_headers : "");
 802535a:	68aa      	ldr	r2, [r5, #8]
    mg_printf(c,
 802535c:	b35a      	cbz	r2, 80253b6 <mg_http_serve_file+0x27a>
 802535e:	9208      	str	r2, [sp, #32]
 8025360:	aa0f      	add	r2, sp, #60	@ 0x3c
 8025362:	9207      	str	r2, [sp, #28]
 8025364:	f8cd e018 	str.w	lr, [sp, #24]
 8025368:	f8cd c010 	str.w	ip, [sp, #16]
 802536c:	2200      	movs	r2, #0
 802536e:	9205      	str	r2, [sp, #20]
 8025370:	aa4e      	add	r2, sp, #312	@ 0x138
 8025372:	9202      	str	r2, [sp, #8]
 8025374:	9001      	str	r0, [sp, #4]
 8025376:	9100      	str	r1, [sp, #0]
 8025378:	464a      	mov	r2, r9
 802537a:	491f      	ldr	r1, [pc, #124]	@ (80253f8 <mg_http_serve_file+0x2bc>)
 802537c:	4638      	mov	r0, r7
 802537e:	f7ff f94f 	bl	8024620 <mg_printf>
    if (mg_strcasecmp(hm->method, mg_str("HEAD")) == 0) {
 8025382:	ad64      	add	r5, sp, #400	@ 0x190
 8025384:	491d      	ldr	r1, [pc, #116]	@ (80253fc <mg_http_serve_file+0x2c0>)
 8025386:	4628      	mov	r0, r5
 8025388:	f7ff fafa 	bl	8024980 <mg_str_s>
 802538c:	e895 000c 	ldmia.w	r5, {r2, r3}
 8025390:	e898 0003 	ldmia.w	r8, {r0, r1}
 8025394:	f7ff fbef 	bl	8024b76 <mg_strcasecmp>
 8025398:	b178      	cbz	r0, 80253ba <mg_http_serve_file+0x27e>
      c->pfn = static_cb;
 802539a:	4b19      	ldr	r3, [pc, #100]	@ (8025400 <mg_http_serve_file+0x2c4>)
 802539c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      c->pfn_data = fd;
 80253a0:	f8c7 6084 	str.w	r6, [r7, #132]	@ 0x84
      *clp = cl;
 80253a4:	f8c7 40a4 	str.w	r4, [r7, #164]	@ 0xa4
}
 80253a8:	e72e      	b.n	8025208 <mg_http_serve_file+0xcc>
    int n, status = 200;
 80253aa:	f04f 09c8 	mov.w	r9, #200	@ 0xc8
 80253ae:	e7c8      	b.n	8025342 <mg_http_serve_file+0x206>
    mg_printf(c,
 80253b0:	f8df e03c 	ldr.w	lr, [pc, #60]	@ 80253f0 <mg_http_serve_file+0x2b4>
 80253b4:	e7d1      	b.n	802535a <mg_http_serve_file+0x21e>
 80253b6:	4a0e      	ldr	r2, [pc, #56]	@ (80253f0 <mg_http_serve_file+0x2b4>)
 80253b8:	e7d1      	b.n	802535e <mg_http_serve_file+0x222>
      c->is_resp = 0;
 80253ba:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 80253be:	f36f 13c7 	bfc	r3, #7, #1
 80253c2:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
      mg_fs_close(fd);
 80253c6:	4630      	mov	r0, r6
 80253c8:	f7fd fedb 	bl	8023182 <mg_fs_close>
 80253cc:	e71c      	b.n	8025208 <mg_http_serve_file+0xcc>
 80253ce:	bf00      	nop
 80253d0:	0803acc4 	.word	0x0803acc4
 80253d4:	0803abd0 	.word	0x0803abd0
 80253d8:	0803c084 	.word	0x0803c084
 80253dc:	0803acd4 	.word	0x0803acd4
 80253e0:	0803acdc 	.word	0x0803acdc
 80253e4:	0803ace8 	.word	0x0803ace8
 80253e8:	0803acf8 	.word	0x0803acf8
 80253ec:	0803ad00 	.word	0x0803ad00
 80253f0:	080373ac 	.word	0x080373ac
 80253f4:	0803ad20 	.word	0x0803ad20
 80253f8:	0803ad48 	.word	0x0803ad48
 80253fc:	0803ad98 	.word	0x0803ad98
 8025400:	0802758d 	.word	0x0802758d
 8025404:	20000130 	.word	0x20000130
 8025408:	0803aca8 	.word	0x0803aca8

0802540c <mg_str_to_num>:
bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 802540c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025410:	b083      	sub	sp, #12
 8025412:	ac02      	add	r4, sp, #8
 8025414:	e904 0003 	stmdb	r4, {r0, r1}
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
 8025418:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802541a:	3901      	subs	r1, #1
 802541c:	2907      	cmp	r1, #7
 802541e:	f200 8128 	bhi.w	8025672 <mg_str_to_num+0x266>
 8025422:	e8df f011 	tbh	[pc, r1, lsl #1]
 8025426:	0008      	.short	0x0008
 8025428:	01260020 	.word	0x01260020
 802542c:	0126000c 	.word	0x0126000c
 8025430:	01260126 	.word	0x01260126
 8025434:	001c      	.short	0x001c
bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 8025436:	20ff      	movs	r0, #255	@ 0xff
 8025438:	f04f 0e00 	mov.w	lr, #0
 802543c:	e003      	b.n	8025446 <mg_str_to_num+0x3a>
 802543e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025442:	f04f 0e00 	mov.w	lr, #0
  if (base == 0 && str.len >= 2) {
 8025446:	b9e2      	cbnz	r2, 8025482 <mg_str_to_num+0x76>
 8025448:	9901      	ldr	r1, [sp, #4]
 802544a:	2901      	cmp	r1, #1
 802544c:	d926      	bls.n	802549c <mg_str_to_num+0x90>
    if (str.buf[i] == '0') {
 802544e:	9a00      	ldr	r2, [sp, #0]
 8025450:	7811      	ldrb	r1, [r2, #0]
 8025452:	2930      	cmp	r1, #48	@ 0x30
 8025454:	d00c      	beq.n	8025470 <mg_str_to_num+0x64>
  size_t i = 0, ndigits = 0;
 8025456:	f04f 0c00 	mov.w	ip, #0
      base = 10;
 802545a:	220a      	movs	r2, #10
 802545c:	e013      	b.n	8025486 <mg_str_to_num+0x7a>
bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 802545e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025462:	4686      	mov	lr, r0
 8025464:	e7ef      	b.n	8025446 <mg_str_to_num+0x3a>
 8025466:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 802546a:	f04f 0e00 	mov.w	lr, #0
 802546e:	e7ea      	b.n	8025446 <mg_str_to_num+0x3a>
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 8025470:	7852      	ldrb	r2, [r2, #1]
 8025472:	2a62      	cmp	r2, #98	@ 0x62
 8025474:	d015      	beq.n	80254a2 <mg_str_to_num+0x96>
 8025476:	2a78      	cmp	r2, #120	@ 0x78
 8025478:	d017      	beq.n	80254aa <mg_str_to_num+0x9e>
      i++;
 802547a:	f04f 0c01 	mov.w	ip, #1
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 802547e:	220a      	movs	r2, #10
 8025480:	e001      	b.n	8025486 <mg_str_to_num+0x7a>
  size_t i = 0, ndigits = 0;
 8025482:	f04f 0c00 	mov.w	ip, #0
  switch (base) {
 8025486:	2a0a      	cmp	r2, #10
 8025488:	d044      	beq.n	8025514 <mg_str_to_num+0x108>
 802548a:	2a10      	cmp	r2, #16
 802548c:	f000 80d4 	beq.w	8025638 <mg_str_to_num+0x22c>
 8025490:	2a02      	cmp	r2, #2
 8025492:	d00e      	beq.n	80254b2 <mg_str_to_num+0xa6>
 8025494:	2000      	movs	r0, #0
}
 8025496:	b003      	add	sp, #12
 8025498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size_t i = 0, ndigits = 0;
 802549c:	f04f 0c00 	mov.w	ip, #0
 80254a0:	e7f1      	b.n	8025486 <mg_str_to_num+0x7a>
      if (base != 10) ++i;
 80254a2:	f04f 0c02 	mov.w	ip, #2
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 80254a6:	4662      	mov	r2, ip
 80254a8:	e7ed      	b.n	8025486 <mg_str_to_num+0x7a>
      if (base != 10) ++i;
 80254aa:	f04f 0c02 	mov.w	ip, #2
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 80254ae:	2210      	movs	r2, #16
 80254b0:	e7e9      	b.n	8025486 <mg_str_to_num+0x7a>
  switch (base) {
 80254b2:	2200      	movs	r2, #0
 80254b4:	4611      	mov	r1, r2
 80254b6:	4614      	mov	r4, r2
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
 80254b8:	9d01      	ldr	r5, [sp, #4]
 80254ba:	4565      	cmp	r5, ip
 80254bc:	f240 80c0 	bls.w	8025640 <mg_str_to_num+0x234>
 80254c0:	9d00      	ldr	r5, [sp, #0]
 80254c2:	f815 600c 	ldrb.w	r6, [r5, ip]
 80254c6:	f1a6 0730 	sub.w	r7, r6, #48	@ 0x30
 80254ca:	b2ff      	uxtb	r7, r7
 80254cc:	2f01      	cmp	r7, #1
 80254ce:	f200 80b7 	bhi.w	8025640 <mg_str_to_num+0x234>
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 80254d2:	3e30      	subs	r6, #48	@ 0x30
 80254d4:	ea4f 78e6 	mov.w	r8, r6, asr #31
        if (result > max / 2) return false;  // Overflow
 80254d8:	ea4f 0950 	mov.w	r9, r0, lsr #1
 80254dc:	ea49 79ce 	orr.w	r9, r9, lr, lsl #31
 80254e0:	ea4f 075e 	mov.w	r7, lr, lsr #1
 80254e4:	4591      	cmp	r9, r2
 80254e6:	418f      	sbcs	r7, r1
 80254e8:	f0c0 80c5 	bcc.w	8025676 <mg_str_to_num+0x26a>
        result *= 2;
 80254ec:	1892      	adds	r2, r2, r2
 80254ee:	4149      	adcs	r1, r1
        if (result > max - digit) return false;  // Overflow
 80254f0:	ebb0 0a06 	subs.w	sl, r0, r6
 80254f4:	eb6e 0708 	sbc.w	r7, lr, r8
 80254f8:	4592      	cmp	sl, r2
 80254fa:	418f      	sbcs	r7, r1
 80254fc:	f0c0 80bd 	bcc.w	802567a <mg_str_to_num+0x26e>
        result += digit;
 8025500:	18b2      	adds	r2, r6, r2
 8025502:	eb48 0101 	adc.w	r1, r8, r1
        i++, ndigits++;
 8025506:	f10c 0c01 	add.w	ip, ip, #1
 802550a:	3401      	adds	r4, #1
 802550c:	e7d4      	b.n	80254b8 <mg_str_to_num+0xac>
        if (result > max / 10) return false;  // Overflow
 802550e:	f04f 0901 	mov.w	r9, #1
 8025512:	e017      	b.n	8025544 <mg_str_to_num+0x138>
  switch (base) {
 8025514:	2200      	movs	r2, #0
 8025516:	4611      	mov	r1, r2
 8025518:	4614      	mov	r4, r2
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 802551a:	9d01      	ldr	r5, [sp, #4]
 802551c:	4565      	cmp	r5, ip
 802551e:	f240 808f 	bls.w	8025640 <mg_str_to_num+0x234>
 8025522:	9d00      	ldr	r5, [sp, #0]
 8025524:	f815 700c 	ldrb.w	r7, [r5, ip]
 8025528:	2f2f      	cmp	r7, #47	@ 0x2f
 802552a:	f240 8089 	bls.w	8025640 <mg_str_to_num+0x234>
 802552e:	2f39      	cmp	r7, #57	@ 0x39
 8025530:	f200 8086 	bhi.w	8025640 <mg_str_to_num+0x234>
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 8025534:	3f30      	subs	r7, #48	@ 0x30
 8025536:	ea4f 78e7 	mov.w	r8, r7, asr #31
        if (result > max / 10) return false;  // Overflow
 802553a:	f04f 0900 	mov.w	r9, #0
 802553e:	eb10 060e 	adds.w	r6, r0, lr
 8025542:	d2e4      	bcs.n	802550e <mg_str_to_num+0x102>
 8025544:	444e      	add	r6, r9
 8025546:	4d54      	ldr	r5, [pc, #336]	@ (8025698 <mg_str_to_num+0x28c>)
 8025548:	fba5 9b06 	umull	r9, fp, r5, r6
 802554c:	f02b 0903 	bic.w	r9, fp, #3
 8025550:	eb09 099b 	add.w	r9, r9, fp, lsr #2
 8025554:	eba6 0609 	sub.w	r6, r6, r9
 8025558:	1b86      	subs	r6, r0, r6
 802555a:	f16e 0b00 	sbc.w	fp, lr, #0
 802555e:	f04f 39cc 	mov.w	r9, #3435973836	@ 0xcccccccc
 8025562:	fb09 f906 	mul.w	r9, r9, r6
 8025566:	fb05 990b 	mla	r9, r5, fp, r9
 802556a:	fba6 6a05 	umull	r6, sl, r6, r5
 802556e:	44d1      	add	r9, sl
 8025570:	0876      	lsrs	r6, r6, #1
 8025572:	ea46 76c9 	orr.w	r6, r6, r9, lsl #31
 8025576:	ea4f 0959 	mov.w	r9, r9, lsr #1
 802557a:	4296      	cmp	r6, r2
 802557c:	eb79 0901 	sbcs.w	r9, r9, r1
 8025580:	d37d      	bcc.n	802567e <mg_str_to_num+0x272>
        result *= 10;
 8025582:	ea4f 0981 	mov.w	r9, r1, lsl #2
 8025586:	ea49 7992 	orr.w	r9, r9, r2, lsr #30
 802558a:	0096      	lsls	r6, r2, #2
 802558c:	18b2      	adds	r2, r6, r2
 802558e:	eb41 0909 	adc.w	r9, r1, r9
 8025592:	1892      	adds	r2, r2, r2
 8025594:	eb49 0909 	adc.w	r9, r9, r9
        if (result > max - digit) return false;  // Overflow
 8025598:	ebb0 0a07 	subs.w	sl, r0, r7
 802559c:	eb6e 0108 	sbc.w	r1, lr, r8
 80255a0:	4592      	cmp	sl, r2
 80255a2:	eb71 0109 	sbcs.w	r1, r1, r9
 80255a6:	d36c      	bcc.n	8025682 <mg_str_to_num+0x276>
        result += digit;
 80255a8:	18ba      	adds	r2, r7, r2
 80255aa:	eb48 0109 	adc.w	r1, r8, r9
        i++, ndigits++;
 80255ae:	f10c 0c01 	add.w	ip, ip, #1
 80255b2:	3401      	adds	r4, #1
 80255b4:	e7b1      	b.n	802551a <mg_str_to_num+0x10e>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 80255b6:	f1a6 0741 	sub.w	r7, r6, #65	@ 0x41
 80255ba:	b2ff      	uxtb	r7, r7
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 80255bc:	2f05      	cmp	r7, #5
 80255be:	d832      	bhi.n	8025626 <mg_str_to_num+0x21a>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 80255c0:	3e37      	subs	r6, #55	@ 0x37
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 80255c2:	46b0      	mov	r8, r6
 80255c4:	17f6      	asrs	r6, r6, #31
        if (digit == (uint64_t) ~0) break;
 80255c6:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80255ca:	bf08      	it	eq
 80255cc:	f1b8 3fff 	cmpeq.w	r8, #4294967295	@ 0xffffffff
 80255d0:	d036      	beq.n	8025640 <mg_str_to_num+0x234>
        if (result > max / 16) return false;  // Overflow
 80255d2:	ea4f 1910 	mov.w	r9, r0, lsr #4
 80255d6:	ea49 790e 	orr.w	r9, r9, lr, lsl #28
 80255da:	ea4f 171e 	mov.w	r7, lr, lsr #4
 80255de:	4591      	cmp	r9, r2
 80255e0:	418f      	sbcs	r7, r1
 80255e2:	d350      	bcc.n	8025686 <mg_str_to_num+0x27a>
        result *= 16;
 80255e4:	0109      	lsls	r1, r1, #4
 80255e6:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 80255ea:	0112      	lsls	r2, r2, #4
        if (result > max - digit) return false;  // Overflow
 80255ec:	ebb0 0908 	subs.w	r9, r0, r8
 80255f0:	eb6e 0706 	sbc.w	r7, lr, r6
 80255f4:	4591      	cmp	r9, r2
 80255f6:	418f      	sbcs	r7, r1
 80255f8:	d347      	bcc.n	802568a <mg_str_to_num+0x27e>
        result += digit;
 80255fa:	eb18 0202 	adds.w	r2, r8, r2
 80255fe:	eb46 0101 	adc.w	r1, r6, r1
        i++, ndigits++;
 8025602:	f10c 0c01 	add.w	ip, ip, #1
 8025606:	3401      	adds	r4, #1
      while (i < str.len) {
 8025608:	9d01      	ldr	r5, [sp, #4]
 802560a:	4565      	cmp	r5, ip
 802560c:	d918      	bls.n	8025640 <mg_str_to_num+0x234>
        char c = str.buf[i];
 802560e:	9d00      	ldr	r5, [sp, #0]
 8025610:	f815 600c 	ldrb.w	r6, [r5, ip]
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 8025614:	f1a6 0730 	sub.w	r7, r6, #48	@ 0x30
 8025618:	b2ff      	uxtb	r7, r7
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 802561a:	2f09      	cmp	r7, #9
 802561c:	d8cb      	bhi.n	80255b6 <mg_str_to_num+0x1aa>
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 802561e:	3e30      	subs	r6, #48	@ 0x30
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8025620:	46b0      	mov	r8, r6
 8025622:	17f6      	asrs	r6, r6, #31
 8025624:	e7cf      	b.n	80255c6 <mg_str_to_num+0x1ba>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8025626:	f1a6 0761 	sub.w	r7, r6, #97	@ 0x61
 802562a:	b2ff      	uxtb	r7, r7
                                                  : (uint64_t) ~0;
 802562c:	2f05      	cmp	r7, #5
 802562e:	d807      	bhi.n	8025640 <mg_str_to_num+0x234>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8025630:	3e57      	subs	r6, #87	@ 0x57
                                                  : (uint64_t) ~0;
 8025632:	46b0      	mov	r8, r6
 8025634:	17f6      	asrs	r6, r6, #31
 8025636:	e7c6      	b.n	80255c6 <mg_str_to_num+0x1ba>
  switch (base) {
 8025638:	2200      	movs	r2, #0
 802563a:	4611      	mov	r1, r2
 802563c:	4614      	mov	r4, r2
 802563e:	e7e3      	b.n	8025608 <mg_str_to_num+0x1fc>
  if (ndigits == 0) return false;
 8025640:	b32c      	cbz	r4, 802568e <mg_str_to_num+0x282>
  if (i != str.len) return false;
 8025642:	9801      	ldr	r0, [sp, #4]
 8025644:	4560      	cmp	r0, ip
 8025646:	d124      	bne.n	8025692 <mg_str_to_num+0x286>
  if (val_len == 1) {
 8025648:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802564a:	2801      	cmp	r0, #1
 802564c:	d009      	beq.n	8025662 <mg_str_to_num+0x256>
  } else if (val_len == 2) {
 802564e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8025650:	2802      	cmp	r0, #2
 8025652:	d008      	beq.n	8025666 <mg_str_to_num+0x25a>
  } else if (val_len == 4) {
 8025654:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8025656:	2804      	cmp	r0, #4
 8025658:	d008      	beq.n	802566c <mg_str_to_num+0x260>
    *((uint64_t *) val) = (uint64_t) result;
 802565a:	601a      	str	r2, [r3, #0]
 802565c:	6059      	str	r1, [r3, #4]
  return true;
 802565e:	2001      	movs	r0, #1
 8025660:	e719      	b.n	8025496 <mg_str_to_num+0x8a>
    *((uint8_t *) val) = (uint8_t) result;
 8025662:	701a      	strb	r2, [r3, #0]
 8025664:	e717      	b.n	8025496 <mg_str_to_num+0x8a>
    *((uint16_t *) val) = (uint16_t) result;
 8025666:	801a      	strh	r2, [r3, #0]
  return true;
 8025668:	2001      	movs	r0, #1
 802566a:	e714      	b.n	8025496 <mg_str_to_num+0x8a>
    *((uint32_t *) val) = (uint32_t) result;
 802566c:	601a      	str	r2, [r3, #0]
  return true;
 802566e:	2001      	movs	r0, #1
 8025670:	e711      	b.n	8025496 <mg_str_to_num+0x8a>
  switch (base) {
 8025672:	2000      	movs	r0, #0
 8025674:	e70f      	b.n	8025496 <mg_str_to_num+0x8a>
        if (result > max / 2) return false;  // Overflow
 8025676:	2000      	movs	r0, #0
 8025678:	e70d      	b.n	8025496 <mg_str_to_num+0x8a>
        if (result > max - digit) return false;  // Overflow
 802567a:	2000      	movs	r0, #0
 802567c:	e70b      	b.n	8025496 <mg_str_to_num+0x8a>
        if (result > max / 10) return false;  // Overflow
 802567e:	2000      	movs	r0, #0
 8025680:	e709      	b.n	8025496 <mg_str_to_num+0x8a>
        if (result > max - digit) return false;  // Overflow
 8025682:	2000      	movs	r0, #0
 8025684:	e707      	b.n	8025496 <mg_str_to_num+0x8a>
        if (result > max / 16) return false;  // Overflow
 8025686:	2000      	movs	r0, #0
 8025688:	e705      	b.n	8025496 <mg_str_to_num+0x8a>
        if (result > max - digit) return false;  // Overflow
 802568a:	2000      	movs	r0, #0
 802568c:	e703      	b.n	8025496 <mg_str_to_num+0x8a>
  if (ndigits == 0) return false;
 802568e:	2000      	movs	r0, #0
 8025690:	e701      	b.n	8025496 <mg_str_to_num+0x8a>
  if (i != str.len) return false;
 8025692:	2000      	movs	r0, #0
 8025694:	e6ff      	b.n	8025496 <mg_str_to_num+0x8a>
 8025696:	bf00      	nop
 8025698:	cccccccd 	.word	0xcccccccd

0802569c <mg_url_decode>:
                  int is_form_url_encoded) {
 802569c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80256a0:	b087      	sub	sp, #28
 80256a2:	4606      	mov	r6, r0
 80256a4:	460f      	mov	r7, r1
 80256a6:	4693      	mov	fp, r2
 80256a8:	4699      	mov	r9, r3
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 80256aa:	2400      	movs	r4, #0
 80256ac:	4623      	mov	r3, r4
 80256ae:	e027      	b.n	8025700 <mg_url_decode+0x64>
      if (i + 2 < src_len && isx(src[i + 1]) && isx(src[i + 2])) {
 80256b0:	f103 0802 	add.w	r8, r3, #2
 80256b4:	45b8      	cmp	r8, r7
 80256b6:	d241      	bcs.n	802573c <mg_url_decode+0xa0>
 80256b8:	3301      	adds	r3, #1
 80256ba:	18f2      	adds	r2, r6, r3
 80256bc:	9203      	str	r2, [sp, #12]
 80256be:	5cf0      	ldrb	r0, [r6, r3]
 80256c0:	f7fa fea8 	bl	8020414 <isx>
 80256c4:	2800      	cmp	r0, #0
 80256c6:	d03c      	beq.n	8025742 <mg_url_decode+0xa6>
 80256c8:	f816 0008 	ldrb.w	r0, [r6, r8]
 80256cc:	f7fa fea2 	bl	8020414 <isx>
 80256d0:	2800      	cmp	r0, #0
 80256d2:	d039      	beq.n	8025748 <mg_url_decode+0xac>
        mg_str_to_num(mg_str_n(src + i + 1, 2), 16, &dst[j], sizeof(uint8_t));
 80256d4:	f10d 0a10 	add.w	sl, sp, #16
 80256d8:	2202      	movs	r2, #2
 80256da:	9903      	ldr	r1, [sp, #12]
 80256dc:	4650      	mov	r0, sl
 80256de:	f7ff f95b 	bl	8024998 <mg_str_n>
 80256e2:	2301      	movs	r3, #1
 80256e4:	9300      	str	r3, [sp, #0]
 80256e6:	eb0b 0304 	add.w	r3, fp, r4
 80256ea:	2210      	movs	r2, #16
 80256ec:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80256f0:	f7ff fe8c 	bl	802540c <mg_str_to_num>
        i += 2;
 80256f4:	4643      	mov	r3, r8
 80256f6:	e001      	b.n	80256fc <mg_url_decode+0x60>
      dst[j] = src[i];
 80256f8:	f80b 2004 	strb.w	r2, [fp, r4]
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 80256fc:	3301      	adds	r3, #1
 80256fe:	462c      	mov	r4, r5
 8025700:	42bb      	cmp	r3, r7
 8025702:	d20e      	bcs.n	8025722 <mg_url_decode+0x86>
 8025704:	1c65      	adds	r5, r4, #1
 8025706:	454d      	cmp	r5, r9
 8025708:	d20b      	bcs.n	8025722 <mg_url_decode+0x86>
    if (src[i] == '%') {
 802570a:	5cf2      	ldrb	r2, [r6, r3]
 802570c:	2a25      	cmp	r2, #37	@ 0x25
 802570e:	d0cf      	beq.n	80256b0 <mg_url_decode+0x14>
    } else if (is_form_url_encoded && src[i] == '+') {
 8025710:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8025712:	2900      	cmp	r1, #0
 8025714:	d0f0      	beq.n	80256f8 <mg_url_decode+0x5c>
 8025716:	2a2b      	cmp	r2, #43	@ 0x2b
 8025718:	d1ee      	bne.n	80256f8 <mg_url_decode+0x5c>
      dst[j] = ' ';
 802571a:	2220      	movs	r2, #32
 802571c:	f80b 2004 	strb.w	r2, [fp, r4]
 8025720:	e7ec      	b.n	80256fc <mg_url_decode+0x60>
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
 8025722:	454c      	cmp	r4, r9
 8025724:	d202      	bcs.n	802572c <mg_url_decode+0x90>
 8025726:	2200      	movs	r2, #0
 8025728:	f80b 2004 	strb.w	r2, [fp, r4]
  return i >= src_len && j < dst_len ? (int) j : -1;
 802572c:	42bb      	cmp	r3, r7
 802572e:	d30e      	bcc.n	802574e <mg_url_decode+0xb2>
 8025730:	454c      	cmp	r4, r9
 8025732:	d20f      	bcs.n	8025754 <mg_url_decode+0xb8>
 8025734:	4620      	mov	r0, r4
}
 8025736:	b007      	add	sp, #28
 8025738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return -1;
 802573c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025740:	e7f9      	b.n	8025736 <mg_url_decode+0x9a>
 8025742:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025746:	e7f6      	b.n	8025736 <mg_url_decode+0x9a>
 8025748:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802574c:	e7f3      	b.n	8025736 <mg_url_decode+0x9a>
  return i >= src_len && j < dst_len ? (int) j : -1;
 802574e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025752:	e7f0      	b.n	8025736 <mg_url_decode+0x9a>
 8025754:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025758:	e7ed      	b.n	8025736 <mg_url_decode+0x9a>

0802575a <mg_http_get_var>:
  if (dst != NULL && dst_len > 0) {
 802575a:	b352      	cbz	r2, 80257b2 <mg_http_get_var+0x58>
                    size_t dst_len) {
 802575c:	b570      	push	{r4, r5, r6, lr}
 802575e:	b086      	sub	sp, #24
 8025760:	4604      	mov	r4, r0
 8025762:	461d      	mov	r5, r3
 8025764:	4616      	mov	r6, r2
  if (dst != NULL && dst_len > 0) {
 8025766:	b10b      	cbz	r3, 802576c <mg_http_get_var+0x12>
    dst[0] = '\0';  // If destination buffer is valid, always nul-terminate it
 8025768:	2300      	movs	r3, #0
 802576a:	7013      	strb	r3, [r2, #0]
  if (dst == NULL || dst_len == 0) {
 802576c:	b325      	cbz	r5, 80257b8 <mg_http_get_var+0x5e>
  } else if (buf->buf == NULL || name == NULL || buf->len == 0) {
 802576e:	6823      	ldr	r3, [r4, #0]
 8025770:	b32b      	cbz	r3, 80257be <mg_http_get_var+0x64>
 8025772:	b339      	cbz	r1, 80257c4 <mg_http_get_var+0x6a>
 8025774:	6863      	ldr	r3, [r4, #4]
 8025776:	b343      	cbz	r3, 80257ca <mg_http_get_var+0x70>
    struct mg_str v = mg_http_var(*buf, mg_str(name));
 8025778:	a804      	add	r0, sp, #16
 802577a:	f7ff f901 	bl	8024980 <mg_str_s>
 802577e:	9b05      	ldr	r3, [sp, #20]
 8025780:	9300      	str	r3, [sp, #0]
 8025782:	9b04      	ldr	r3, [sp, #16]
 8025784:	e894 0006 	ldmia.w	r4, {r1, r2}
 8025788:	a802      	add	r0, sp, #8
 802578a:	f7ff fbf3 	bl	8024f74 <mg_http_var>
    if (v.buf == NULL) {
 802578e:	9802      	ldr	r0, [sp, #8]
 8025790:	b158      	cbz	r0, 80257aa <mg_http_get_var+0x50>
      len = mg_url_decode(v.buf, v.len, dst, dst_len, 1);
 8025792:	2301      	movs	r3, #1
 8025794:	9300      	str	r3, [sp, #0]
 8025796:	462b      	mov	r3, r5
 8025798:	4632      	mov	r2, r6
 802579a:	9903      	ldr	r1, [sp, #12]
 802579c:	f7ff ff7e 	bl	802569c <mg_url_decode>
      if (len < 0) len = -3;  // Failed to decode
 80257a0:	2800      	cmp	r0, #0
 80257a2:	da04      	bge.n	80257ae <mg_http_get_var+0x54>
 80257a4:	f06f 0002 	mvn.w	r0, #2
 80257a8:	e001      	b.n	80257ae <mg_http_get_var+0x54>
      len = -4;  // Name does not exist
 80257aa:	f06f 0003 	mvn.w	r0, #3
}
 80257ae:	b006      	add	sp, #24
 80257b0:	bd70      	pop	{r4, r5, r6, pc}
    len = -2;  // Bad destination
 80257b2:	f06f 0001 	mvn.w	r0, #1
}
 80257b6:	4770      	bx	lr
    len = -2;  // Bad destination
 80257b8:	f06f 0001 	mvn.w	r0, #1
 80257bc:	e7f7      	b.n	80257ae <mg_http_get_var+0x54>
    len = -1;  // Bad source
 80257be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80257c2:	e7f4      	b.n	80257ae <mg_http_get_var+0x54>
 80257c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80257c8:	e7f1      	b.n	80257ae <mg_http_get_var+0x54>
 80257ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  return len;
 80257ce:	e7ee      	b.n	80257ae <mg_http_get_var+0x54>

080257d0 <mg_http_creds>:
                   char *pass, size_t passlen) {
 80257d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80257d4:	b0c4      	sub	sp, #272	@ 0x110
 80257d6:	4606      	mov	r6, r0
 80257d8:	460d      	mov	r5, r1
 80257da:	4617      	mov	r7, r2
 80257dc:	461c      	mov	r4, r3
  struct mg_str *v = mg_http_get_header(hm, "Authorization");
 80257de:	493f      	ldr	r1, [pc, #252]	@ (80258dc <mg_http_creds+0x10c>)
 80257e0:	f7fd fd70 	bl	80232c4 <mg_http_get_header>
  user[0] = pass[0] = '\0';
 80257e4:	2300      	movs	r3, #0
 80257e6:	7023      	strb	r3, [r4, #0]
 80257e8:	702b      	strb	r3, [r5, #0]
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 80257ea:	b1c8      	cbz	r0, 8025820 <mg_http_creds+0x50>
 80257ec:	4680      	mov	r8, r0
 80257ee:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80257f2:	f1b9 0f06 	cmp.w	r9, #6
 80257f6:	d907      	bls.n	8025808 <mg_http_creds+0x38>
 80257f8:	f8d0 a000 	ldr.w	sl, [r0]
 80257fc:	2206      	movs	r2, #6
 80257fe:	4938      	ldr	r1, [pc, #224]	@ (80258e0 <mg_http_creds+0x110>)
 8025800:	4650      	mov	r0, sl
 8025802:	f007 fb99 	bl	802cf38 <memcmp>
 8025806:	b328      	cbz	r0, 8025854 <mg_http_creds+0x84>
  } else if (v != NULL && v->len > 7 && memcmp(v->buf, "Bearer ", 7) == 0) {
 8025808:	f1b9 0f07 	cmp.w	r9, #7
 802580c:	d908      	bls.n	8025820 <mg_http_creds+0x50>
 802580e:	f8d8 5000 	ldr.w	r5, [r8]
 8025812:	2207      	movs	r2, #7
 8025814:	4933      	ldr	r1, [pc, #204]	@ (80258e4 <mg_http_creds+0x114>)
 8025816:	4628      	mov	r0, r5
 8025818:	f007 fb8e 	bl	802cf38 <memcmp>
 802581c:	2800      	cmp	r0, #0
 802581e:	d043      	beq.n	80258a8 <mg_http_creds+0xd8>
  } else if ((v = mg_http_get_header(hm, "Cookie")) != NULL) {
 8025820:	4931      	ldr	r1, [pc, #196]	@ (80258e8 <mg_http_creds+0x118>)
 8025822:	4630      	mov	r0, r6
 8025824:	f7fd fd4e 	bl	80232c4 <mg_http_get_header>
 8025828:	4605      	mov	r5, r0
 802582a:	2800      	cmp	r0, #0
 802582c:	d04e      	beq.n	80258cc <mg_http_creds+0xfc>
    struct mg_str t = mg_http_get_header_var(*v, mg_str_n("access_token", 12));
 802582e:	220c      	movs	r2, #12
 8025830:	492e      	ldr	r1, [pc, #184]	@ (80258ec <mg_http_creds+0x11c>)
 8025832:	a842      	add	r0, sp, #264	@ 0x108
 8025834:	f7ff f8b0 	bl	8024998 <mg_str_n>
 8025838:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 802583a:	9300      	str	r3, [sp, #0]
 802583c:	9b42      	ldr	r3, [sp, #264]	@ 0x108
 802583e:	e895 0006 	ldmia.w	r5, {r1, r2}
 8025842:	a802      	add	r0, sp, #8
 8025844:	f7ff f8c8 	bl	80249d8 <mg_http_get_header_var>
    if (t.len > 0) mg_snprintf(pass, passlen, "%.*s", (int) t.len, t.buf);
 8025848:	9b03      	ldr	r3, [sp, #12]
 802584a:	2b00      	cmp	r3, #0
 802584c:	d136      	bne.n	80258bc <mg_http_creds+0xec>
}
 802584e:	b044      	add	sp, #272	@ 0x110
 8025850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    size_t n = mg_base64_decode(v->buf + 6, v->len - 6, buf, sizeof(buf));
 8025854:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8025858:	aa02      	add	r2, sp, #8
 802585a:	f1a9 0106 	sub.w	r1, r9, #6
 802585e:	f10a 0006 	add.w	r0, sl, #6
 8025862:	f7fd fba3 	bl	8022fac <mg_base64_decode>
 8025866:	4606      	mov	r6, r0
    const char *p = (const char *) memchr(buf, ':', n > 0 ? n : 0);
 8025868:	4602      	mov	r2, r0
 802586a:	213a      	movs	r1, #58	@ 0x3a
 802586c:	a802      	add	r0, sp, #8
 802586e:	f7ea fcc7 	bl	8010200 <memchr>
    if (p != NULL) {
 8025872:	4680      	mov	r8, r0
 8025874:	2800      	cmp	r0, #0
 8025876:	d0ea      	beq.n	802584e <mg_http_creds+0x7e>
      mg_snprintf(user, userlen, "%.*s", p - buf, buf);
 8025878:	ab02      	add	r3, sp, #8
 802587a:	eba0 0a03 	sub.w	sl, r0, r3
 802587e:	f8df 9070 	ldr.w	r9, [pc, #112]	@ 80258f0 <mg_http_creds+0x120>
 8025882:	9300      	str	r3, [sp, #0]
 8025884:	4653      	mov	r3, sl
 8025886:	464a      	mov	r2, r9
 8025888:	4639      	mov	r1, r7
 802588a:	4628      	mov	r0, r5
 802588c:	f7fe f9f0 	bl	8023c70 <mg_snprintf>
      mg_snprintf(pass, passlen, "%.*s", n - (size_t) (p - buf) - 1, p + 1);
 8025890:	eba6 030a 	sub.w	r3, r6, sl
 8025894:	f108 0201 	add.w	r2, r8, #1
 8025898:	9200      	str	r2, [sp, #0]
 802589a:	3b01      	subs	r3, #1
 802589c:	464a      	mov	r2, r9
 802589e:	994c      	ldr	r1, [sp, #304]	@ 0x130
 80258a0:	4620      	mov	r0, r4
 80258a2:	f7fe f9e5 	bl	8023c70 <mg_snprintf>
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 80258a6:	e7d2      	b.n	802584e <mg_http_creds+0x7e>
    mg_snprintf(pass, passlen, "%.*s", (int) v->len - 7, v->buf + 7);
 80258a8:	3507      	adds	r5, #7
 80258aa:	9500      	str	r5, [sp, #0]
 80258ac:	f1a9 0307 	sub.w	r3, r9, #7
 80258b0:	4a0f      	ldr	r2, [pc, #60]	@ (80258f0 <mg_http_creds+0x120>)
 80258b2:	994c      	ldr	r1, [sp, #304]	@ 0x130
 80258b4:	4620      	mov	r0, r4
 80258b6:	f7fe f9db 	bl	8023c70 <mg_snprintf>
 80258ba:	e7c8      	b.n	802584e <mg_http_creds+0x7e>
    if (t.len > 0) mg_snprintf(pass, passlen, "%.*s", (int) t.len, t.buf);
 80258bc:	9a02      	ldr	r2, [sp, #8]
 80258be:	9200      	str	r2, [sp, #0]
 80258c0:	4a0b      	ldr	r2, [pc, #44]	@ (80258f0 <mg_http_creds+0x120>)
 80258c2:	994c      	ldr	r1, [sp, #304]	@ 0x130
 80258c4:	4620      	mov	r0, r4
 80258c6:	f7fe f9d3 	bl	8023c70 <mg_snprintf>
 80258ca:	e7c0      	b.n	802584e <mg_http_creds+0x7e>
    mg_http_get_var(&hm->query, "access_token", pass, passlen);
 80258cc:	9b4c      	ldr	r3, [sp, #304]	@ 0x130
 80258ce:	4622      	mov	r2, r4
 80258d0:	4906      	ldr	r1, [pc, #24]	@ (80258ec <mg_http_creds+0x11c>)
 80258d2:	f106 0010 	add.w	r0, r6, #16
 80258d6:	f7ff ff40 	bl	802575a <mg_http_get_var>
}
 80258da:	e7b8      	b.n	802584e <mg_http_creds+0x7e>
 80258dc:	0803ada0 	.word	0x0803ada0
 80258e0:	0803adb0 	.word	0x0803adb0
 80258e4:	0803adb8 	.word	0x0803adb8
 80258e8:	0803adc0 	.word	0x0803adc0
 80258ec:	08037138 	.word	0x08037138
 80258f0:	0803abd0 	.word	0x0803abd0

080258f4 <listdir>:
                    const struct mg_http_serve_opts *opts, char *dir) {
 80258f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80258f8:	b0ae      	sub	sp, #184	@ 0xb8
 80258fa:	4604      	mov	r4, r0
 80258fc:	460d      	mov	r5, r1
 80258fe:	4616      	mov	r6, r2
 8025900:	461f      	mov	r7, r3
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8025902:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8025906:	f1b8 0f00 	cmp.w	r8, #0
 802590a:	d04f      	beq.n	80259ac <listdir+0xb8>
  struct printdirentrydata d = {c, hm, opts, dir};
 802590c:	942a      	str	r4, [sp, #168]	@ 0xa8
 802590e:	952b      	str	r5, [sp, #172]	@ 0xac
 8025910:	962c      	str	r6, [sp, #176]	@ 0xb0
 8025912:	972d      	str	r7, [sp, #180]	@ 0xb4
  int len = mg_url_decode(hm->uri.buf, hm->uri.len, buf, sizeof(buf), 0);
 8025914:	2300      	movs	r3, #0
 8025916:	9300      	str	r3, [sp, #0]
 8025918:	2380      	movs	r3, #128	@ 0x80
 802591a:	aa07      	add	r2, sp, #28
 802591c:	68e9      	ldr	r1, [r5, #12]
 802591e:	68a8      	ldr	r0, [r5, #8]
 8025920:	f7ff febc 	bl	802569c <mg_url_decode>
  struct mg_str uri = len > 0 ? mg_str_n(buf, (size_t) len) : hm->uri;
 8025924:	1e02      	subs	r2, r0, #0
 8025926:	dd44      	ble.n	80259b2 <listdir+0xbe>
 8025928:	a907      	add	r1, sp, #28
 802592a:	a805      	add	r0, sp, #20
 802592c:	f7ff f834 	bl	8024998 <mg_str_n>
            opts->extra_headers == NULL ? "" : opts->extra_headers);
 8025930:	68b2      	ldr	r2, [r6, #8]
  mg_printf(c,
 8025932:	2a00      	cmp	r2, #0
 8025934:	d044      	beq.n	80259c0 <listdir+0xcc>
 8025936:	4923      	ldr	r1, [pc, #140]	@ (80259c4 <listdir+0xd0>)
 8025938:	4620      	mov	r0, r4
 802593a:	f7fe fe71 	bl	8024620 <mg_printf>
  off = c->send.len;  // Start of body
 802593e:	6d25      	ldr	r5, [r4, #80]	@ 0x50
            (int) uri.len, uri.buf, sort_js_code, sort_js_code2, (int) uri.len,
 8025940:	9a06      	ldr	r2, [sp, #24]
  mg_printf(c,
 8025942:	9b05      	ldr	r3, [sp, #20]
 8025944:	9303      	str	r3, [sp, #12]
 8025946:	9202      	str	r2, [sp, #8]
 8025948:	491f      	ldr	r1, [pc, #124]	@ (80259c8 <listdir+0xd4>)
 802594a:	9101      	str	r1, [sp, #4]
 802594c:	491f      	ldr	r1, [pc, #124]	@ (80259cc <listdir+0xd8>)
 802594e:	9100      	str	r1, [sp, #0]
 8025950:	491f      	ldr	r1, [pc, #124]	@ (80259d0 <listdir+0xdc>)
 8025952:	4620      	mov	r0, r4
 8025954:	f7fe fe64 	bl	8024620 <mg_printf>
  mg_printf(c, "%s",
 8025958:	4a1e      	ldr	r2, [pc, #120]	@ (80259d4 <listdir+0xe0>)
 802595a:	491f      	ldr	r1, [pc, #124]	@ (80259d8 <listdir+0xe4>)
 802595c:	4620      	mov	r0, r4
 802595e:	f7fe fe5f 	bl	8024620 <mg_printf>
  fs->ls(dir, printdirentry, &d);
 8025962:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8025966:	aa2a      	add	r2, sp, #168	@ 0xa8
 8025968:	491c      	ldr	r1, [pc, #112]	@ (80259dc <listdir+0xe8>)
 802596a:	4638      	mov	r0, r7
 802596c:	4798      	blx	r3
  mg_printf(c,
 802596e:	4a1c      	ldr	r2, [pc, #112]	@ (80259e0 <listdir+0xec>)
 8025970:	491c      	ldr	r1, [pc, #112]	@ (80259e4 <listdir+0xf0>)
 8025972:	4620      	mov	r0, r4
 8025974:	f7fe fe54 	bl	8024620 <mg_printf>
  n = mg_snprintf(tmp, sizeof(tmp), "%lu", (unsigned long) (c->send.len - off));
 8025978:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802597a:	1b5b      	subs	r3, r3, r5
 802597c:	4a1a      	ldr	r2, [pc, #104]	@ (80259e8 <listdir+0xf4>)
 802597e:	210a      	movs	r1, #10
 8025980:	a827      	add	r0, sp, #156	@ 0x9c
 8025982:	f7fe f975 	bl	8023c70 <mg_snprintf>
 8025986:	4602      	mov	r2, r0
  if (n > sizeof(tmp)) n = 0;
 8025988:	280a      	cmp	r0, #10
 802598a:	d900      	bls.n	802598e <listdir+0x9a>
 802598c:	2200      	movs	r2, #0
  memcpy(c->send.buf + off - 12, tmp, n);  // Set content length
 802598e:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8025990:	3d0c      	subs	r5, #12
 8025992:	a927      	add	r1, sp, #156	@ 0x9c
 8025994:	4428      	add	r0, r5
 8025996:	f008 fd9f 	bl	802e4d8 <memcpy>
  c->is_resp = 0;                          // Mark response end
 802599a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802599e:	f36f 13c7 	bfc	r3, #7, #1
 80259a2:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 80259a6:	b02e      	add	sp, #184	@ 0xb8
 80259a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 80259ac:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 80259f0 <listdir+0xfc>
 80259b0:	e7ac      	b.n	802590c <listdir+0x18>
  struct mg_str uri = len > 0 ? mg_str_n(buf, (size_t) len) : hm->uri;
 80259b2:	ab05      	add	r3, sp, #20
 80259b4:	3508      	adds	r5, #8
 80259b6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80259ba:	e883 0003 	stmia.w	r3, {r0, r1}
 80259be:	e7b7      	b.n	8025930 <listdir+0x3c>
  mg_printf(c,
 80259c0:	4a0a      	ldr	r2, [pc, #40]	@ (80259ec <listdir+0xf8>)
 80259c2:	e7b8      	b.n	8025936 <listdir+0x42>
 80259c4:	0803adc8 	.word	0x0803adc8
 80259c8:	0803afa8 	.word	0x0803afa8
 80259cc:	0803b16c 	.word	0x0803b16c
 80259d0:	0803ae20 	.word	0x0803ae20
 80259d4:	0803b334 	.word	0x0803b334
 80259d8:	0803b798 	.word	0x0803b798
 80259dc:	0802719d 	.word	0x0802719d
 80259e0:	08038c94 	.word	0x08038c94
 80259e4:	0803b384 	.word	0x0803b384
 80259e8:	0803ba48 	.word	0x0803ba48
 80259ec:	080373ac 	.word	0x080373ac
 80259f0:	20000130 	.word	0x20000130

080259f4 <skip_chunk>:
static int skip_chunk(const char *buf, int len, int *pl, int *dl) {
 80259f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80259f8:	b087      	sub	sp, #28
 80259fa:	461f      	mov	r7, r3
  int i = 0, n = 0;
 80259fc:	2300      	movs	r3, #0
 80259fe:	9303      	str	r3, [sp, #12]
  if (len < 3) return 0;
 8025a00:	2902      	cmp	r1, #2
 8025a02:	dd42      	ble.n	8025a8a <skip_chunk+0x96>
 8025a04:	4606      	mov	r6, r0
 8025a06:	460d      	mov	r5, r1
 8025a08:	4690      	mov	r8, r2
  int i = 0, n = 0;
 8025a0a:	461c      	mov	r4, r3
  while (i < len && is_hex_digit(buf[i])) i++;
 8025a0c:	42ac      	cmp	r4, r5
 8025a0e:	da05      	bge.n	8025a1c <skip_chunk+0x28>
 8025a10:	5d30      	ldrb	r0, [r6, r4]
 8025a12:	f7fb f92a 	bl	8020c6a <is_hex_digit>
 8025a16:	b108      	cbz	r0, 8025a1c <skip_chunk+0x28>
 8025a18:	3401      	adds	r4, #1
 8025a1a:	e7f7      	b.n	8025a0c <skip_chunk+0x18>
  if (i == 0) return -1;                     // Error, no length specified
 8025a1c:	2c00      	cmp	r4, #0
 8025a1e:	d036      	beq.n	8025a8e <skip_chunk+0x9a>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 8025a20:	2c08      	cmp	r4, #8
 8025a22:	dc37      	bgt.n	8025a94 <skip_chunk+0xa0>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 8025a24:	42ac      	cmp	r4, r5
 8025a26:	da38      	bge.n	8025a9a <skip_chunk+0xa6>
 8025a28:	4622      	mov	r2, r4
 8025a2a:	5d33      	ldrb	r3, [r6, r4]
 8025a2c:	2b0d      	cmp	r3, #13
 8025a2e:	d137      	bne.n	8025aa0 <skip_chunk+0xac>
 8025a30:	1933      	adds	r3, r6, r4
 8025a32:	785b      	ldrb	r3, [r3, #1]
 8025a34:	2b0a      	cmp	r3, #10
 8025a36:	d136      	bne.n	8025aa6 <skip_chunk+0xb2>
  if (mg_str_to_num(mg_str_n(buf, (size_t) i), 16, &n, sizeof(int)) == false)
 8025a38:	f10d 0910 	add.w	r9, sp, #16
 8025a3c:	4631      	mov	r1, r6
 8025a3e:	4648      	mov	r0, r9
 8025a40:	f7fe ffaa 	bl	8024998 <mg_str_n>
 8025a44:	2304      	movs	r3, #4
 8025a46:	9300      	str	r3, [sp, #0]
 8025a48:	ab03      	add	r3, sp, #12
 8025a4a:	2210      	movs	r2, #16
 8025a4c:	e899 0003 	ldmia.w	r9, {r0, r1}
 8025a50:	f7ff fcdc 	bl	802540c <mg_str_to_num>
 8025a54:	b350      	cbz	r0, 8025aac <skip_chunk+0xb8>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 8025a56:	9b03      	ldr	r3, [sp, #12]
 8025a58:	2b00      	cmp	r3, #0
 8025a5a:	db2a      	blt.n	8025ab2 <skip_chunk+0xbe>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 8025a5c:	1b2d      	subs	r5, r5, r4
 8025a5e:	3d03      	subs	r5, #3
 8025a60:	42ab      	cmp	r3, r5
 8025a62:	da29      	bge.n	8025ab8 <skip_chunk+0xc4>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 8025a64:	4423      	add	r3, r4
 8025a66:	18f2      	adds	r2, r6, r3
 8025a68:	7892      	ldrb	r2, [r2, #2]
 8025a6a:	2a0d      	cmp	r2, #13
 8025a6c:	d126      	bne.n	8025abc <skip_chunk+0xc8>
 8025a6e:	441e      	add	r6, r3
 8025a70:	78f3      	ldrb	r3, [r6, #3]
 8025a72:	2b0a      	cmp	r3, #10
 8025a74:	d125      	bne.n	8025ac2 <skip_chunk+0xce>
  *pl = i + 2, *dl = n;
 8025a76:	3402      	adds	r4, #2
 8025a78:	f8c8 4000 	str.w	r4, [r8]
 8025a7c:	9b03      	ldr	r3, [sp, #12]
 8025a7e:	603b      	str	r3, [r7, #0]
  return i + 2 + n + 2;
 8025a80:	441c      	add	r4, r3
 8025a82:	1ca0      	adds	r0, r4, #2
}
 8025a84:	b007      	add	sp, #28
 8025a86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (len < 3) return 0;
 8025a8a:	2000      	movs	r0, #0
 8025a8c:	e7fa      	b.n	8025a84 <skip_chunk+0x90>
  if (i == 0) return -1;                     // Error, no length specified
 8025a8e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025a92:	e7f7      	b.n	8025a84 <skip_chunk+0x90>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 8025a94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025a98:	e7f4      	b.n	8025a84 <skip_chunk+0x90>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 8025a9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025a9e:	e7f1      	b.n	8025a84 <skip_chunk+0x90>
 8025aa0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025aa4:	e7ee      	b.n	8025a84 <skip_chunk+0x90>
 8025aa6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025aaa:	e7eb      	b.n	8025a84 <skip_chunk+0x90>
    return -1;                    // Decode chunk length, overflow
 8025aac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025ab0:	e7e8      	b.n	8025a84 <skip_chunk+0x90>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 8025ab2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025ab6:	e7e5      	b.n	8025a84 <skip_chunk+0x90>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 8025ab8:	2000      	movs	r0, #0
 8025aba:	e7e3      	b.n	8025a84 <skip_chunk+0x90>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 8025abc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025ac0:	e7e0      	b.n	8025a84 <skip_chunk+0x90>
 8025ac2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025ac6:	e7dd      	b.n	8025a84 <skip_chunk+0x90>

08025ac8 <mg_json_unescape>:
bool mg_json_unescape(struct mg_str s, char *to, size_t n) {
 8025ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025acc:	b086      	sub	sp, #24
 8025ace:	ac02      	add	r4, sp, #8
 8025ad0:	e884 0003 	stmia.w	r4, {r0, r1}
 8025ad4:	4617      	mov	r7, r2
 8025ad6:	461e      	mov	r6, r3
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 8025ad8:	2400      	movs	r4, #0
 8025ada:	4621      	mov	r1, r4
 8025adc:	e01c      	b.n	8025b18 <mg_json_unescape+0x50>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 8025ade:	f101 0805 	add.w	r8, r1, #5
 8025ae2:	45a8      	cmp	r8, r5
 8025ae4:	d221      	bcs.n	8025b2a <mg_json_unescape+0x62>
 8025ae6:	185a      	adds	r2, r3, r1
 8025ae8:	7852      	ldrb	r2, [r2, #1]
 8025aea:	2a75      	cmp	r2, #117	@ 0x75
 8025aec:	d11d      	bne.n	8025b2a <mg_json_unescape+0x62>
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 8025aee:	3102      	adds	r1, #2
 8025af0:	ad04      	add	r5, sp, #16
 8025af2:	2204      	movs	r2, #4
 8025af4:	4419      	add	r1, r3
 8025af6:	4628      	mov	r0, r5
 8025af8:	f7fe ff4e 	bl	8024998 <mg_str_n>
 8025afc:	2301      	movs	r3, #1
 8025afe:	9300      	str	r3, [sp, #0]
 8025b00:	193b      	adds	r3, r7, r4
 8025b02:	2210      	movs	r2, #16
 8025b04:	e895 0003 	ldmia.w	r5, {r0, r1}
 8025b08:	f7ff fc80 	bl	802540c <mg_str_to_num>
 8025b0c:	b308      	cbz	r0, 8025b52 <mg_json_unescape+0x8a>
      i += 5;
 8025b0e:	4641      	mov	r1, r8
 8025b10:	e000      	b.n	8025b14 <mg_json_unescape+0x4c>
      to[j] = s.buf[i];
 8025b12:	5538      	strb	r0, [r7, r4]
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 8025b14:	3101      	adds	r1, #1
 8025b16:	3401      	adds	r4, #1
 8025b18:	9d03      	ldr	r5, [sp, #12]
 8025b1a:	428d      	cmp	r5, r1
 8025b1c:	d914      	bls.n	8025b48 <mg_json_unescape+0x80>
 8025b1e:	42b4      	cmp	r4, r6
 8025b20:	d212      	bcs.n	8025b48 <mg_json_unescape+0x80>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 8025b22:	9b02      	ldr	r3, [sp, #8]
 8025b24:	5c58      	ldrb	r0, [r3, r1]
 8025b26:	285c      	cmp	r0, #92	@ 0x5c
 8025b28:	d0d9      	beq.n	8025ade <mg_json_unescape+0x16>
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 8025b2a:	285c      	cmp	r0, #92	@ 0x5c
 8025b2c:	d1f1      	bne.n	8025b12 <mg_json_unescape+0x4a>
 8025b2e:	f101 0801 	add.w	r8, r1, #1
 8025b32:	45a8      	cmp	r8, r5
 8025b34:	d2ed      	bcs.n	8025b12 <mg_json_unescape+0x4a>
      char c = json_esc(s.buf[i + 1], 0);
 8025b36:	2100      	movs	r1, #0
 8025b38:	f813 0008 	ldrb.w	r0, [r3, r8]
 8025b3c:	f7fb f8ba 	bl	8020cb4 <json_esc>
      if (c == 0) return false;
 8025b40:	b150      	cbz	r0, 8025b58 <mg_json_unescape+0x90>
      to[j] = c;
 8025b42:	5538      	strb	r0, [r7, r4]
      i++;
 8025b44:	4641      	mov	r1, r8
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 8025b46:	e7e5      	b.n	8025b14 <mg_json_unescape+0x4c>
  if (j >= n) return false;
 8025b48:	42b4      	cmp	r4, r6
 8025b4a:	d207      	bcs.n	8025b5c <mg_json_unescape+0x94>
  if (n > 0) to[j] = '\0';
 8025b4c:	2300      	movs	r3, #0
 8025b4e:	553b      	strb	r3, [r7, r4]
  return true;
 8025b50:	2001      	movs	r0, #1
}
 8025b52:	b006      	add	sp, #24
 8025b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (c == 0) return false;
 8025b58:	2000      	movs	r0, #0
 8025b5a:	e7fa      	b.n	8025b52 <mg_json_unescape+0x8a>
  if (j >= n) return false;
 8025b5c:	2000      	movs	r0, #0
 8025b5e:	e7f8      	b.n	8025b52 <mg_json_unescape+0x8a>

08025b60 <mg_json_get_str>:
char *mg_json_get_str(struct mg_str json, const char *path) {
 8025b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025b62:	b087      	sub	sp, #28
 8025b64:	46ec      	mov	ip, sp
 8025b66:	e88c 0003 	stmia.w	ip, {r0, r1}
  int len = 0, off = mg_json_get(json, path, &len);
 8025b6a:	2300      	movs	r3, #0
 8025b6c:	9303      	str	r3, [sp, #12]
 8025b6e:	ab03      	add	r3, sp, #12
 8025b70:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8025b74:	f7fd fbd6 	bl	8023324 <mg_json_get>
  if (off >= 0 && len > 1 && json.buf[off] == '"') {
 8025b78:	1e04      	subs	r4, r0, #0
 8025b7a:	db25      	blt.n	8025bc8 <mg_json_get_str+0x68>
 8025b7c:	9903      	ldr	r1, [sp, #12]
 8025b7e:	2901      	cmp	r1, #1
 8025b80:	dd24      	ble.n	8025bcc <mg_json_get_str+0x6c>
 8025b82:	9e00      	ldr	r6, [sp, #0]
 8025b84:	5d33      	ldrb	r3, [r6, r4]
 8025b86:	2b22      	cmp	r3, #34	@ 0x22
 8025b88:	d003      	beq.n	8025b92 <mg_json_get_str+0x32>
  char *result = NULL;
 8025b8a:	2500      	movs	r5, #0
}
 8025b8c:	4628      	mov	r0, r5
 8025b8e:	b007      	add	sp, #28
 8025b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 8025b92:	2001      	movs	r0, #1
 8025b94:	f7fd f93c 	bl	8022e10 <mg_calloc>
 8025b98:	4605      	mov	r5, r0
 8025b9a:	2800      	cmp	r0, #0
 8025b9c:	d0f6      	beq.n	8025b8c <mg_json_get_str+0x2c>
        !mg_json_unescape(mg_str_n(json.buf + off + 1, (size_t) (len - 2)),
 8025b9e:	1c61      	adds	r1, r4, #1
 8025ba0:	9f03      	ldr	r7, [sp, #12]
 8025ba2:	ac04      	add	r4, sp, #16
 8025ba4:	1eba      	subs	r2, r7, #2
 8025ba6:	4431      	add	r1, r6
 8025ba8:	4620      	mov	r0, r4
 8025baa:	f7fe fef5 	bl	8024998 <mg_str_n>
 8025bae:	463b      	mov	r3, r7
 8025bb0:	462a      	mov	r2, r5
 8025bb2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8025bb6:	f7ff ff87 	bl	8025ac8 <mg_json_unescape>
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 8025bba:	2800      	cmp	r0, #0
 8025bbc:	d1e6      	bne.n	8025b8c <mg_json_get_str+0x2c>
      free(result);
 8025bbe:	4628      	mov	r0, r5
 8025bc0:	f7f5 fa84 	bl	801b0cc <vPortFree>
      result = NULL;
 8025bc4:	2500      	movs	r5, #0
 8025bc6:	e7e1      	b.n	8025b8c <mg_json_get_str+0x2c>
  char *result = NULL;
 8025bc8:	2500      	movs	r5, #0
 8025bca:	e7df      	b.n	8025b8c <mg_json_get_str+0x2c>
 8025bcc:	2500      	movs	r5, #0
 8025bce:	e7dd      	b.n	8025b8c <mg_json_get_str+0x2c>

08025bd0 <mg_aton6>:
static bool mg_aton6(struct mg_str str, struct mg_addr *addr) {
 8025bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025bd4:	b08a      	sub	sp, #40	@ 0x28
 8025bd6:	ab02      	add	r3, sp, #8
 8025bd8:	e883 0003 	stmia.w	r3, {r0, r1}
 8025bdc:	4617      	mov	r7, r2
  addr->scope_id = 0;
 8025bde:	2300      	movs	r3, #0
 8025be0:	7493      	strb	r3, [r2, #18]
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 8025be2:	2902      	cmp	r1, #2
 8025be4:	d904      	bls.n	8025bf0 <mg_aton6+0x20>
 8025be6:	460b      	mov	r3, r1
 8025be8:	4602      	mov	r2, r0
 8025bea:	7801      	ldrb	r1, [r0, #0]
 8025bec:	295b      	cmp	r1, #91	@ 0x5b
 8025bee:	d00f      	beq.n	8025c10 <mg_aton6+0x40>
  if (mg_v4mapped(str, addr)) return true;
 8025bf0:	463a      	mov	r2, r7
 8025bf2:	ab02      	add	r3, sp, #8
 8025bf4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8025bf8:	f7fe ff40 	bl	8024a7c <mg_v4mapped>
 8025bfc:	4680      	mov	r8, r0
 8025bfe:	2800      	cmp	r0, #0
 8025c00:	f040 8087 	bne.w	8025d12 <mg_aton6+0x142>
  size_t i, j = 0, n = 0, dc = 42;
 8025c04:	f04f 092a 	mov.w	r9, #42	@ 0x2a
 8025c08:	2600      	movs	r6, #0
 8025c0a:	4635      	mov	r5, r6
  for (i = 0; i < str.len; i++) {
 8025c0c:	4634      	mov	r4, r6
 8025c0e:	e020      	b.n	8025c52 <mg_aton6+0x82>
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 8025c10:	3201      	adds	r2, #1
 8025c12:	9202      	str	r2, [sp, #8]
 8025c14:	3b02      	subs	r3, #2
 8025c16:	9303      	str	r3, [sp, #12]
 8025c18:	e7ea      	b.n	8025bf0 <mg_aton6+0x20>
      unsigned long val = 0;  // TODO(): This loops on chars, refactor
 8025c1a:	2300      	movs	r3, #0
 8025c1c:	9305      	str	r3, [sp, #20]
      if (i > j + 3) return false;
 8025c1e:	1ceb      	adds	r3, r5, #3
 8025c20:	42a3      	cmp	r3, r4
 8025c22:	d376      	bcc.n	8025d12 <mg_aton6+0x142>
      mg_str_to_num(mg_str_n(&str.buf[j], i - j + 1), 16, &val, sizeof(val));
 8025c24:	1b62      	subs	r2, r4, r5
 8025c26:	f10d 0a18 	add.w	sl, sp, #24
 8025c2a:	3201      	adds	r2, #1
 8025c2c:	4429      	add	r1, r5
 8025c2e:	4650      	mov	r0, sl
 8025c30:	f7fe feb2 	bl	8024998 <mg_str_n>
 8025c34:	2304      	movs	r3, #4
 8025c36:	9300      	str	r3, [sp, #0]
 8025c38:	ab05      	add	r3, sp, #20
 8025c3a:	2210      	movs	r2, #16
 8025c3c:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8025c40:	f7ff fbe4 	bl	802540c <mg_str_to_num>
      addr->ip[n] = (uint8_t) ((val >> 8) & 255);
 8025c44:	9b05      	ldr	r3, [sp, #20]
 8025c46:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8025c4a:	55ba      	strb	r2, [r7, r6]
      addr->ip[n + 1] = (uint8_t) (val & 255);
 8025c4c:	1c72      	adds	r2, r6, #1
 8025c4e:	54bb      	strb	r3, [r7, r2]
  for (i = 0; i < str.len; i++) {
 8025c50:	3401      	adds	r4, #1
 8025c52:	9803      	ldr	r0, [sp, #12]
 8025c54:	42a0      	cmp	r0, r4
 8025c56:	d941      	bls.n	8025cdc <mg_aton6+0x10c>
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 8025c58:	9902      	ldr	r1, [sp, #8]
 8025c5a:	5d0a      	ldrb	r2, [r1, r4]
 8025c5c:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8025c60:	b2db      	uxtb	r3, r3
 8025c62:	2b09      	cmp	r3, #9
 8025c64:	d9d9      	bls.n	8025c1a <mg_aton6+0x4a>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 8025c66:	f1a2 0361 	sub.w	r3, r2, #97	@ 0x61
 8025c6a:	b2db      	uxtb	r3, r3
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 8025c6c:	2b05      	cmp	r3, #5
 8025c6e:	d9d4      	bls.n	8025c1a <mg_aton6+0x4a>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 8025c70:	f1a2 0341 	sub.w	r3, r2, #65	@ 0x41
 8025c74:	b2db      	uxtb	r3, r3
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 8025c76:	2b05      	cmp	r3, #5
 8025c78:	d9cf      	bls.n	8025c1a <mg_aton6+0x4a>
    } else if (str.buf[i] == ':') {
 8025c7a:	2a3a      	cmp	r2, #58	@ 0x3a
 8025c7c:	d119      	bne.n	8025cb2 <mg_aton6+0xe2>
      j = i + 1;
 8025c7e:	1c65      	adds	r5, r4, #1
      if (i > 0 && str.buf[i - 1] == ':') {
 8025c80:	b12c      	cbz	r4, 8025c8e <mg_aton6+0xbe>
 8025c82:	190b      	adds	r3, r1, r4
 8025c84:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8025c88:	2b3a      	cmp	r3, #58	@ 0x3a
 8025c8a:	d007      	beq.n	8025c9c <mg_aton6+0xcc>
        n += 2;
 8025c8c:	3602      	adds	r6, #2
      if (n > 14) return false;
 8025c8e:	2e0e      	cmp	r6, #14
 8025c90:	d83f      	bhi.n	8025d12 <mg_aton6+0x142>
      addr->ip[n] = addr->ip[n + 1] = 0;  // For trailing ::
 8025c92:	1c73      	adds	r3, r6, #1
 8025c94:	2200      	movs	r2, #0
 8025c96:	54fa      	strb	r2, [r7, r3]
 8025c98:	55ba      	strb	r2, [r7, r6]
 8025c9a:	e7d9      	b.n	8025c50 <mg_aton6+0x80>
        if (i > 1 && str.buf[i - 2] == ':') return false;
 8025c9c:	2c01      	cmp	r4, #1
 8025c9e:	d906      	bls.n	8025cae <mg_aton6+0xde>
 8025ca0:	4421      	add	r1, r4
 8025ca2:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 8025ca6:	2b3a      	cmp	r3, #58	@ 0x3a
 8025ca8:	d033      	beq.n	8025d12 <mg_aton6+0x142>
        dc = n;  // Double colon
 8025caa:	46b1      	mov	r9, r6
 8025cac:	e7ef      	b.n	8025c8e <mg_aton6+0xbe>
 8025cae:	46b1      	mov	r9, r6
 8025cb0:	e7ed      	b.n	8025c8e <mg_aton6+0xbe>
    } else if (str.buf[i] == '%') {       // Scope ID, last in string
 8025cb2:	2a25      	cmp	r2, #37	@ 0x25
 8025cb4:	d12d      	bne.n	8025d12 <mg_aton6+0x142>
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 8025cb6:	1c63      	adds	r3, r4, #1
 8025cb8:	1b02      	subs	r2, r0, r4
 8025cba:	ac08      	add	r4, sp, #32
 8025cbc:	3a01      	subs	r2, #1
 8025cbe:	4419      	add	r1, r3
 8025cc0:	4620      	mov	r0, r4
 8025cc2:	f7fe fe69 	bl	8024998 <mg_str_n>
 8025cc6:	2301      	movs	r3, #1
 8025cc8:	9300      	str	r3, [sp, #0]
 8025cca:	f107 0312 	add.w	r3, r7, #18
 8025cce:	220a      	movs	r2, #10
 8025cd0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8025cd4:	f7ff fb9a 	bl	802540c <mg_str_to_num>
 8025cd8:	4680      	mov	r8, r0
 8025cda:	e01a      	b.n	8025d12 <mg_aton6+0x142>
  if (n < 14 && dc == 42) return false;
 8025cdc:	2e0d      	cmp	r6, #13
 8025cde:	d814      	bhi.n	8025d0a <mg_aton6+0x13a>
 8025ce0:	f1b9 0f2a 	cmp.w	r9, #42	@ 0x2a
 8025ce4:	d015      	beq.n	8025d12 <mg_aton6+0x142>
    memmove(&addr->ip[dc + (14 - n)], &addr->ip[dc], n - dc + 2);
 8025ce6:	eba9 0006 	sub.w	r0, r9, r6
 8025cea:	300e      	adds	r0, #14
 8025cec:	eb07 0409 	add.w	r4, r7, r9
 8025cf0:	eba6 0209 	sub.w	r2, r6, r9
 8025cf4:	3202      	adds	r2, #2
 8025cf6:	4621      	mov	r1, r4
 8025cf8:	4438      	add	r0, r7
 8025cfa:	f007 f997 	bl	802d02c <memmove>
    memset(&addr->ip[dc], 0, 14 - n);
 8025cfe:	f1c6 020e 	rsb	r2, r6, #14
 8025d02:	2100      	movs	r1, #0
 8025d04:	4620      	mov	r0, r4
 8025d06:	f007 f9ab 	bl	802d060 <memset>
  addr->is_ip6 = true;
 8025d0a:	f04f 0801 	mov.w	r8, #1
 8025d0e:	f887 8013 	strb.w	r8, [r7, #19]
}
 8025d12:	4640      	mov	r0, r8
 8025d14:	b00a      	add	sp, #40	@ 0x28
 8025d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08025d1a <mg_timer_init>:
                   unsigned flags, void (*fn)(void *), void *arg) {
 8025d1a:	b410      	push	{r4}
  t->id = 0, t->period_ms = ms, t->expire = 0;
 8025d1c:	2400      	movs	r4, #0
 8025d1e:	600c      	str	r4, [r1, #0]
 8025d20:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8025d24:	2200      	movs	r2, #0
 8025d26:	2300      	movs	r3, #0
 8025d28:	e9c1 2304 	strd	r2, r3, [r1, #16]
  t->flags = flags, t->fn = fn, t->arg = arg, t->next = *head;
 8025d2c:	9b01      	ldr	r3, [sp, #4]
 8025d2e:	618b      	str	r3, [r1, #24]
 8025d30:	9b02      	ldr	r3, [sp, #8]
 8025d32:	61cb      	str	r3, [r1, #28]
 8025d34:	9b03      	ldr	r3, [sp, #12]
 8025d36:	620b      	str	r3, [r1, #32]
 8025d38:	6803      	ldr	r3, [r0, #0]
 8025d3a:	624b      	str	r3, [r1, #36]	@ 0x24
  *head = t;
 8025d3c:	6001      	str	r1, [r0, #0]
}
 8025d3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025d42:	4770      	bx	lr

08025d44 <mg_timer_add>:
                              unsigned flags, void (*fn)(void *), void *arg) {
 8025d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025d46:	b085      	sub	sp, #20
 8025d48:	4604      	mov	r4, r0
 8025d4a:	4616      	mov	r6, r2
 8025d4c:	461d      	mov	r5, r3
  struct mg_timer *t = (struct mg_timer *) calloc(1, sizeof(*t));
 8025d4e:	2128      	movs	r1, #40	@ 0x28
 8025d50:	2001      	movs	r0, #1
 8025d52:	f7fd f85d 	bl	8022e10 <mg_calloc>
  if (t != NULL) {
 8025d56:	4607      	mov	r7, r0
 8025d58:	b180      	cbz	r0, 8025d7c <mg_timer_add+0x38>
    mg_timer_init(&mgr->timers, t, milliseconds, flags, fn, arg);
 8025d5a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025d5c:	9302      	str	r3, [sp, #8]
 8025d5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025d60:	9301      	str	r3, [sp, #4]
 8025d62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025d64:	9300      	str	r3, [sp, #0]
 8025d66:	4632      	mov	r2, r6
 8025d68:	462b      	mov	r3, r5
 8025d6a:	4601      	mov	r1, r0
 8025d6c:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8025d70:	f7ff ffd3 	bl	8025d1a <mg_timer_init>
    t->id = mgr->timerid++;
 8025d74:	6a23      	ldr	r3, [r4, #32]
 8025d76:	1c5a      	adds	r2, r3, #1
 8025d78:	6222      	str	r2, [r4, #32]
 8025d7a:	603b      	str	r3, [r7, #0]
}
 8025d7c:	4638      	mov	r0, r7
 8025d7e:	b005      	add	sp, #20
 8025d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025d82:	0000      	movs	r0, r0
 8025d84:	0000      	movs	r0, r0
	...

08025d88 <mg_timer_expired>:
bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 8025d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025d8c:	4698      	mov	r8, r3
 8025d8e:	9906      	ldr	r1, [sp, #24]
 8025d90:	9c07      	ldr	r4, [sp, #28]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 8025d92:	188e      	adds	r6, r1, r2
 8025d94:	eb43 0504 	adc.w	r5, r3, r4
 8025d98:	6847      	ldr	r7, [r0, #4]
 8025d9a:	6803      	ldr	r3, [r0, #0]
 8025d9c:	429e      	cmp	r6, r3
 8025d9e:	eb75 0707 	sbcs.w	r7, r5, r7
 8025da2:	d203      	bcs.n	8025dac <mg_timer_expired+0x24>
 8025da4:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8025de8 <mg_timer_expired+0x60>
 8025da8:	ed80 7b00 	vstr	d7, [r0]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 8025dac:	6847      	ldr	r7, [r0, #4]
 8025dae:	6803      	ldr	r3, [r0, #0]
 8025db0:	431f      	orrs	r7, r3
 8025db2:	d101      	bne.n	8025db8 <mg_timer_expired+0x30>
 8025db4:	6006      	str	r6, [r0, #0]
 8025db6:	6045      	str	r5, [r0, #4]
  if (*t > now) return false;                    // Not expired yet, return
 8025db8:	6807      	ldr	r7, [r0, #0]
 8025dba:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8025dbe:	42b9      	cmp	r1, r7
 8025dc0:	eb74 0e0c 	sbcs.w	lr, r4, ip
 8025dc4:	d30e      	bcc.n	8025de4 <mg_timer_expired+0x5c>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 8025dc6:	1bc9      	subs	r1, r1, r7
 8025dc8:	eb64 040c 	sbc.w	r4, r4, ip
 8025dcc:	428a      	cmp	r2, r1
 8025dce:	eb78 0404 	sbcs.w	r4, r8, r4
 8025dd2:	d302      	bcc.n	8025dda <mg_timer_expired+0x52>
 8025dd4:	18be      	adds	r6, r7, r2
 8025dd6:	eb4c 0508 	adc.w	r5, ip, r8
 8025dda:	6006      	str	r6, [r0, #0]
 8025ddc:	6045      	str	r5, [r0, #4]
  return true;                                   // Expired, return true
 8025dde:	2001      	movs	r0, #1
}
 8025de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (*t > now) return false;                    // Not expired yet, return
 8025de4:	2000      	movs	r0, #0
 8025de6:	e7fb      	b.n	8025de0 <mg_timer_expired+0x58>
	...

08025df0 <mg_timer_poll>:
void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {
 8025df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025df4:	b082      	sub	sp, #8
 8025df6:	4617      	mov	r7, r2
 8025df8:	461e      	mov	r6, r3
  for (t = *head; t != NULL; t = tmp) {
 8025dfa:	6804      	ldr	r4, [r0, #0]
 8025dfc:	e019      	b.n	8025e32 <mg_timer_poll+0x42>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8025dfe:	2500      	movs	r5, #0
    bool expired = mg_timer_expired(&t->expire, t->period_ms, now_ms);
 8025e00:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8025e04:	9700      	str	r7, [sp, #0]
 8025e06:	9601      	str	r6, [sp, #4]
 8025e08:	f104 0010 	add.w	r0, r4, #16
 8025e0c:	f7ff ffbc 	bl	8025d88 <mg_timer_expired>
    tmp = t->next;
 8025e10:	f8d4 8024 	ldr.w	r8, [r4, #36]	@ 0x24
    if (!once && !expired) continue;
 8025e14:	b905      	cbnz	r5, 8025e18 <mg_timer_poll+0x28>
 8025e16:	b158      	cbz	r0, 8025e30 <mg_timer_poll+0x40>
    if ((t->flags & MG_TIMER_REPEAT) || !(t->flags & MG_TIMER_CALLED)) {
 8025e18:	69a3      	ldr	r3, [r4, #24]
 8025e1a:	f003 0305 	and.w	r3, r3, #5
 8025e1e:	2b04      	cmp	r3, #4
 8025e20:	d002      	beq.n	8025e28 <mg_timer_poll+0x38>
      t->fn(t->arg);
 8025e22:	69e3      	ldr	r3, [r4, #28]
 8025e24:	6a20      	ldr	r0, [r4, #32]
 8025e26:	4798      	blx	r3
    t->flags |= MG_TIMER_CALLED;
 8025e28:	69a1      	ldr	r1, [r4, #24]
 8025e2a:	f041 0104 	orr.w	r1, r1, #4
 8025e2e:	61a1      	str	r1, [r4, #24]
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8025e30:	4644      	mov	r4, r8
  for (t = *head; t != NULL; t = tmp) {
 8025e32:	b164      	cbz	r4, 8025e4e <mg_timer_poll+0x5e>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8025e34:	6923      	ldr	r3, [r4, #16]
 8025e36:	6962      	ldr	r2, [r4, #20]
 8025e38:	4313      	orrs	r3, r2
 8025e3a:	d1e0      	bne.n	8025dfe <mg_timer_poll+0xe>
 8025e3c:	69a3      	ldr	r3, [r4, #24]
 8025e3e:	f003 0306 	and.w	r3, r3, #6
 8025e42:	2b02      	cmp	r3, #2
 8025e44:	d001      	beq.n	8025e4a <mg_timer_poll+0x5a>
 8025e46:	2500      	movs	r5, #0
 8025e48:	e7da      	b.n	8025e00 <mg_timer_poll+0x10>
 8025e4a:	2501      	movs	r5, #1
 8025e4c:	e7d8      	b.n	8025e00 <mg_timer_poll+0x10>
}
 8025e4e:	b002      	add	sp, #8
 8025e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08025e54 <mg_tls_recv>:
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 8025e54:	b118      	cbz	r0, 8025e5e <mg_tls_recv+0xa>
 8025e56:	b121      	cbz	r1, 8025e62 <mg_tls_recv+0xe>
 8025e58:	b92a      	cbnz	r2, 8025e66 <mg_tls_recv+0x12>
 8025e5a:	2000      	movs	r0, #0
 8025e5c:	4770      	bx	lr
 8025e5e:	2000      	movs	r0, #0
 8025e60:	4770      	bx	lr
 8025e62:	2000      	movs	r0, #0
 8025e64:	4770      	bx	lr
 8025e66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8025e6a:	4770      	bx	lr

08025e6c <mg_tls_send>:
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 8025e6c:	b118      	cbz	r0, 8025e76 <mg_tls_send+0xa>
 8025e6e:	b121      	cbz	r1, 8025e7a <mg_tls_send+0xe>
 8025e70:	b92a      	cbnz	r2, 8025e7e <mg_tls_send+0x12>
 8025e72:	2000      	movs	r0, #0
 8025e74:	4770      	bx	lr
 8025e76:	2000      	movs	r0, #0
 8025e78:	4770      	bx	lr
 8025e7a:	2000      	movs	r0, #0
 8025e7c:	4770      	bx	lr
 8025e7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8025e82:	4770      	bx	lr

08025e84 <mg_tls_pending>:
}
 8025e84:	2000      	movs	r0, #0
 8025e86:	4770      	bx	lr

08025e88 <mg_url_is_ssl>:
int mg_url_is_ssl(const char *url) {
 8025e88:	b510      	push	{r4, lr}
 8025e8a:	4604      	mov	r4, r0
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8025e8c:	2204      	movs	r2, #4
 8025e8e:	4918      	ldr	r1, [pc, #96]	@ (8025ef0 <mg_url_is_ssl+0x68>)
 8025e90:	f007 f91b 	bl	802d0ca <strncmp>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8025e94:	b1f8      	cbz	r0, 8025ed6 <mg_url_is_ssl+0x4e>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8025e96:	2206      	movs	r2, #6
 8025e98:	4916      	ldr	r1, [pc, #88]	@ (8025ef4 <mg_url_is_ssl+0x6c>)
 8025e9a:	4620      	mov	r0, r4
 8025e9c:	f007 f915 	bl	802d0ca <strncmp>
 8025ea0:	b1d8      	cbz	r0, 8025eda <mg_url_is_ssl+0x52>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8025ea2:	2206      	movs	r2, #6
 8025ea4:	4914      	ldr	r1, [pc, #80]	@ (8025ef8 <mg_url_is_ssl+0x70>)
 8025ea6:	4620      	mov	r0, r4
 8025ea8:	f007 f90f 	bl	802d0ca <strncmp>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8025eac:	b1b8      	cbz	r0, 8025ede <mg_url_is_ssl+0x56>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8025eae:	2204      	movs	r2, #4
 8025eb0:	4912      	ldr	r1, [pc, #72]	@ (8025efc <mg_url_is_ssl+0x74>)
 8025eb2:	4620      	mov	r0, r4
 8025eb4:	f007 f909 	bl	802d0ca <strncmp>
 8025eb8:	b198      	cbz	r0, 8025ee2 <mg_url_is_ssl+0x5a>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8025eba:	2204      	movs	r2, #4
 8025ebc:	4910      	ldr	r1, [pc, #64]	@ (8025f00 <mg_url_is_ssl+0x78>)
 8025ebe:	4620      	mov	r0, r4
 8025ec0:	f007 f903 	bl	802d0ca <strncmp>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8025ec4:	b178      	cbz	r0, 8025ee6 <mg_url_is_ssl+0x5e>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8025ec6:	2205      	movs	r2, #5
 8025ec8:	490e      	ldr	r1, [pc, #56]	@ (8025f04 <mg_url_is_ssl+0x7c>)
 8025eca:	4620      	mov	r0, r4
 8025ecc:	f007 f8fd 	bl	802d0ca <strncmp>
 8025ed0:	b958      	cbnz	r0, 8025eea <mg_url_is_ssl+0x62>
 8025ed2:	2001      	movs	r0, #1
 8025ed4:	e000      	b.n	8025ed8 <mg_url_is_ssl+0x50>
 8025ed6:	2001      	movs	r0, #1
}
 8025ed8:	bd10      	pop	{r4, pc}
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8025eda:	2001      	movs	r0, #1
 8025edc:	e7fc      	b.n	8025ed8 <mg_url_is_ssl+0x50>
 8025ede:	2001      	movs	r0, #1
 8025ee0:	e7fa      	b.n	8025ed8 <mg_url_is_ssl+0x50>
 8025ee2:	2001      	movs	r0, #1
 8025ee4:	e7f8      	b.n	8025ed8 <mg_url_is_ssl+0x50>
 8025ee6:	2001      	movs	r0, #1
 8025ee8:	e7f6      	b.n	8025ed8 <mg_url_is_ssl+0x50>
 8025eea:	2000      	movs	r0, #0
 8025eec:	e7f4      	b.n	8025ed8 <mg_url_is_ssl+0x50>
 8025eee:	bf00      	nop
 8025ef0:	0803b3f8 	.word	0x0803b3f8
 8025ef4:	0803b400 	.word	0x0803b400
 8025ef8:	0803b408 	.word	0x0803b408
 8025efc:	0803b410 	.word	0x0803b410
 8025f00:	0803b418 	.word	0x0803b418
 8025f04:	0803b420 	.word	0x0803b420

08025f08 <mg_url_host>:
struct mg_str mg_url_host(const char *url) {
 8025f08:	b530      	push	{r4, r5, lr}
 8025f0a:	b089      	sub	sp, #36	@ 0x24
 8025f0c:	4604      	mov	r4, r0
 8025f0e:	460d      	mov	r5, r1
  struct url u = urlparse(url);
 8025f10:	a801      	add	r0, sp, #4
 8025f12:	f7fb feeb 	bl	8021cec <urlparse>
  size_t n = u.port  ? u.port - u.host - 1
 8025f16:	9a05      	ldr	r2, [sp, #20]
             : u.uri ? u.uri - u.host
 8025f18:	b152      	cbz	r2, 8025f30 <mg_url_host+0x28>
  size_t n = u.port  ? u.port - u.host - 1
 8025f1a:	9b04      	ldr	r3, [sp, #16]
 8025f1c:	1ad2      	subs	r2, r2, r3
             : u.uri ? u.uri - u.host
 8025f1e:	3a01      	subs	r2, #1
  struct mg_str s = mg_str_n(url + u.host, n);
 8025f20:	9904      	ldr	r1, [sp, #16]
 8025f22:	4429      	add	r1, r5
 8025f24:	4620      	mov	r0, r4
 8025f26:	f7fe fd37 	bl	8024998 <mg_str_n>
}
 8025f2a:	4620      	mov	r0, r4
 8025f2c:	b009      	add	sp, #36	@ 0x24
 8025f2e:	bd30      	pop	{r4, r5, pc}
             : u.uri ? u.uri - u.host
 8025f30:	9a06      	ldr	r2, [sp, #24]
                     : u.end - u.host;
 8025f32:	b112      	cbz	r2, 8025f3a <mg_url_host+0x32>
             : u.uri ? u.uri - u.host
 8025f34:	9b04      	ldr	r3, [sp, #16]
                     : u.end - u.host;
 8025f36:	1ad2      	subs	r2, r2, r3
 8025f38:	e7f2      	b.n	8025f20 <mg_url_host+0x18>
 8025f3a:	9a07      	ldr	r2, [sp, #28]
 8025f3c:	9b04      	ldr	r3, [sp, #16]
 8025f3e:	1ad2      	subs	r2, r2, r3
 8025f40:	e7ee      	b.n	8025f20 <mg_url_host+0x18>
	...

08025f44 <mg_url_port>:
unsigned short mg_url_port(const char *url) {
 8025f44:	b530      	push	{r4, r5, lr}
 8025f46:	b089      	sub	sp, #36	@ 0x24
 8025f48:	4604      	mov	r4, r0
  struct url u = urlparse(url);
 8025f4a:	4601      	mov	r1, r0
 8025f4c:	a801      	add	r0, sp, #4
 8025f4e:	f7fb fecd 	bl	8021cec <urlparse>
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 8025f52:	2205      	movs	r2, #5
 8025f54:	491d      	ldr	r1, [pc, #116]	@ (8025fcc <mg_url_port+0x88>)
 8025f56:	4620      	mov	r0, r4
 8025f58:	f007 f8b7 	bl	802d0ca <strncmp>
 8025f5c:	b138      	cbz	r0, 8025f6e <mg_url_port+0x2a>
 8025f5e:	2203      	movs	r2, #3
 8025f60:	491b      	ldr	r1, [pc, #108]	@ (8025fd0 <mg_url_port+0x8c>)
 8025f62:	4620      	mov	r0, r4
 8025f64:	f007 f8b1 	bl	802d0ca <strncmp>
 8025f68:	b188      	cbz	r0, 8025f8e <mg_url_port+0x4a>
  unsigned short port = 0;
 8025f6a:	2500      	movs	r5, #0
 8025f6c:	e000      	b.n	8025f70 <mg_url_port+0x2c>
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 8025f6e:	2550      	movs	r5, #80	@ 0x50
  if (strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0)
 8025f70:	2204      	movs	r2, #4
 8025f72:	4918      	ldr	r1, [pc, #96]	@ (8025fd4 <mg_url_port+0x90>)
 8025f74:	4620      	mov	r0, r4
 8025f76:	f007 f8a8 	bl	802d0ca <strncmp>
 8025f7a:	b150      	cbz	r0, 8025f92 <mg_url_port+0x4e>
 8025f7c:	2206      	movs	r2, #6
 8025f7e:	4916      	ldr	r1, [pc, #88]	@ (8025fd8 <mg_url_port+0x94>)
 8025f80:	4620      	mov	r0, r4
 8025f82:	f007 f8a2 	bl	802d0ca <strncmp>
 8025f86:	b930      	cbnz	r0, 8025f96 <mg_url_port+0x52>
    port = 443;
 8025f88:	f240 15bb 	movw	r5, #443	@ 0x1bb
 8025f8c:	e003      	b.n	8025f96 <mg_url_port+0x52>
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 8025f8e:	2550      	movs	r5, #80	@ 0x50
 8025f90:	e7ee      	b.n	8025f70 <mg_url_port+0x2c>
    port = 443;
 8025f92:	f240 15bb 	movw	r5, #443	@ 0x1bb
  if (strncmp(url, "mqtt:", 5) == 0) port = 1883;
 8025f96:	2205      	movs	r2, #5
 8025f98:	4910      	ldr	r1, [pc, #64]	@ (8025fdc <mg_url_port+0x98>)
 8025f9a:	4620      	mov	r0, r4
 8025f9c:	f007 f895 	bl	802d0ca <strncmp>
 8025fa0:	b908      	cbnz	r0, 8025fa6 <mg_url_port+0x62>
 8025fa2:	f240 755b 	movw	r5, #1883	@ 0x75b
  if (strncmp(url, "mqtts:", 6) == 0) port = 8883;
 8025fa6:	2206      	movs	r2, #6
 8025fa8:	490d      	ldr	r1, [pc, #52]	@ (8025fe0 <mg_url_port+0x9c>)
 8025faa:	4620      	mov	r0, r4
 8025fac:	f007 f88d 	bl	802d0ca <strncmp>
 8025fb0:	b908      	cbnz	r0, 8025fb6 <mg_url_port+0x72>
 8025fb2:	f242 25b3 	movw	r5, #8883	@ 0x22b3
  if (u.port) port = (unsigned short) atoi(url + u.port);
 8025fb6:	9805      	ldr	r0, [sp, #20]
 8025fb8:	b910      	cbnz	r0, 8025fc0 <mg_url_port+0x7c>
}
 8025fba:	4628      	mov	r0, r5
 8025fbc:	b009      	add	sp, #36	@ 0x24
 8025fbe:	bd30      	pop	{r4, r5, pc}
  if (u.port) port = (unsigned short) atoi(url + u.port);
 8025fc0:	4420      	add	r0, r4
 8025fc2:	f004 fb19 	bl	802a5f8 <atoi>
 8025fc6:	b285      	uxth	r5, r0
 8025fc8:	e7f7      	b.n	8025fba <mg_url_port+0x76>
 8025fca:	bf00      	nop
 8025fcc:	0803b428 	.word	0x0803b428
 8025fd0:	0803b430 	.word	0x0803b430
 8025fd4:	0803b3f8 	.word	0x0803b3f8
 8025fd8:	0803b400 	.word	0x0803b400
 8025fdc:	0803b434 	.word	0x0803b434
 8025fe0:	0803b408 	.word	0x0803b408

08025fe4 <mg_bzero>:
  if (buf != NULL) {
 8025fe4:	4603      	mov	r3, r0
 8025fe6:	b920      	cbnz	r0, 8025ff2 <mg_bzero+0xe>
 8025fe8:	4770      	bx	lr
    while (len--) *buf++ = 0;
 8025fea:	2100      	movs	r1, #0
 8025fec:	f803 1b01 	strb.w	r1, [r3], #1
 8025ff0:	4611      	mov	r1, r2
 8025ff2:	1e4a      	subs	r2, r1, #1
 8025ff4:	2900      	cmp	r1, #0
 8025ff6:	d1f8      	bne.n	8025fea <mg_bzero+0x6>
}
 8025ff8:	4770      	bx	lr

08025ffa <mg_iobuf_del>:
size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {
 8025ffa:	b538      	push	{r3, r4, r5, lr}
 8025ffc:	4605      	mov	r5, r0
 8025ffe:	4608      	mov	r0, r1
 8026000:	4614      	mov	r4, r2
  if (ofs > io->len) ofs = io->len;
 8026002:	68aa      	ldr	r2, [r5, #8]
 8026004:	428a      	cmp	r2, r1
 8026006:	d200      	bcs.n	802600a <mg_iobuf_del+0x10>
 8026008:	4610      	mov	r0, r2
  if (ofs + len > io->len) len = io->len - ofs;
 802600a:	1903      	adds	r3, r0, r4
 802600c:	429a      	cmp	r2, r3
 802600e:	d200      	bcs.n	8026012 <mg_iobuf_del+0x18>
 8026010:	1a14      	subs	r4, r2, r0
  if (io->buf) memmove(io->buf + ofs, io->buf + ofs + len, io->len - ofs - len);
 8026012:	682b      	ldr	r3, [r5, #0]
 8026014:	b133      	cbz	r3, 8026024 <mg_iobuf_del+0x2a>
 8026016:	1901      	adds	r1, r0, r4
 8026018:	1a12      	subs	r2, r2, r0
 802601a:	1b12      	subs	r2, r2, r4
 802601c:	4419      	add	r1, r3
 802601e:	4418      	add	r0, r3
 8026020:	f007 f804 	bl	802d02c <memmove>
  if (io->buf) mg_bzero(io->buf + io->len - len, len);
 8026024:	682b      	ldr	r3, [r5, #0]
 8026026:	b12b      	cbz	r3, 8026034 <mg_iobuf_del+0x3a>
 8026028:	68a8      	ldr	r0, [r5, #8]
 802602a:	1b00      	subs	r0, r0, r4
 802602c:	4621      	mov	r1, r4
 802602e:	4418      	add	r0, r3
 8026030:	f7ff ffd8 	bl	8025fe4 <mg_bzero>
  io->len -= len;
 8026034:	68ab      	ldr	r3, [r5, #8]
 8026036:	1b1b      	subs	r3, r3, r4
 8026038:	60ab      	str	r3, [r5, #8]
}
 802603a:	4620      	mov	r0, r4
 802603c:	bd38      	pop	{r3, r4, r5, pc}

0802603e <mg_random>:
void mg_random(void *buf, size_t len) {
 802603e:	b538      	push	{r3, r4, r5, lr}
 8026040:	4604      	mov	r4, r0
  while (!done && len--) *p++ = (unsigned char) (rand() & 255);
 8026042:	e006      	b.n	8026052 <mg_random+0x14>
 8026044:	f006 fac6 	bl	802c5d4 <rand>
 8026048:	4623      	mov	r3, r4
 802604a:	f803 0b01 	strb.w	r0, [r3], #1
 802604e:	461c      	mov	r4, r3
 8026050:	4629      	mov	r1, r5
 8026052:	1e4d      	subs	r5, r1, #1
 8026054:	2900      	cmp	r1, #0
 8026056:	d1f5      	bne.n	8026044 <mg_random+0x6>
}
 8026058:	bd38      	pop	{r3, r4, r5, pc}
	...

0802605c <mg_random_str>:
char *mg_random_str(char *buf, size_t len) {
 802605c:	b570      	push	{r4, r5, r6, lr}
 802605e:	4604      	mov	r4, r0
 8026060:	460d      	mov	r5, r1
  mg_random(buf, len);
 8026062:	f7ff ffec 	bl	802603e <mg_random>
  for (i = 0; i < len; i++) {
 8026066:	2100      	movs	r1, #0
 8026068:	e00a      	b.n	8026080 <mg_random_str+0x24>
    buf[i] = i == len - 1 ? (char) '\0'            // 0-terminate last byte
 802606a:	2b33      	cmp	r3, #51	@ 0x33
 802606c:	d802      	bhi.n	8026074 <mg_random_str+0x18>
 802606e:	3327      	adds	r3, #39	@ 0x27
 8026070:	b2db      	uxtb	r3, r3
 8026072:	e003      	b.n	802607c <mg_random_str+0x20>
 8026074:	3b04      	subs	r3, #4
 8026076:	b2db      	uxtb	r3, r3
 8026078:	e000      	b.n	802607c <mg_random_str+0x20>
 802607a:	2300      	movs	r3, #0
 802607c:	7003      	strb	r3, [r0, #0]
  for (i = 0; i < len; i++) {
 802607e:	3101      	adds	r1, #1
 8026080:	42a9      	cmp	r1, r5
 8026082:	d213      	bcs.n	80260ac <mg_random_str+0x50>
    uint8_t c = ((uint8_t *) buf)[i] % 62U;
 8026084:	1860      	adds	r0, r4, r1
 8026086:	5c63      	ldrb	r3, [r4, r1]
 8026088:	085a      	lsrs	r2, r3, #1
 802608a:	4e09      	ldr	r6, [pc, #36]	@ (80260b0 <mg_random_str+0x54>)
 802608c:	fba6 6202 	umull	r6, r2, r6, r2
 8026090:	0912      	lsrs	r2, r2, #4
 8026092:	ebc2 1242 	rsb	r2, r2, r2, lsl #5
 8026096:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 802609a:	b2db      	uxtb	r3, r3
    buf[i] = i == len - 1 ? (char) '\0'            // 0-terminate last byte
 802609c:	1e6a      	subs	r2, r5, #1
 802609e:	428a      	cmp	r2, r1
 80260a0:	d0eb      	beq.n	802607a <mg_random_str+0x1e>
 80260a2:	2b19      	cmp	r3, #25
 80260a4:	d8e1      	bhi.n	802606a <mg_random_str+0xe>
 80260a6:	3361      	adds	r3, #97	@ 0x61
 80260a8:	b2db      	uxtb	r3, r3
 80260aa:	e7e7      	b.n	802607c <mg_random_str+0x20>
}
 80260ac:	4620      	mov	r0, r4
 80260ae:	bd70      	pop	{r4, r5, r6, pc}
 80260b0:	84210843 	.word	0x84210843

080260b4 <mg_ntohl>:
uint32_t mg_ntohl(uint32_t net) {
 80260b4:	b082      	sub	sp, #8
  uint8_t data[4] = {0, 0, 0, 0};
 80260b6:	2300      	movs	r3, #0
 80260b8:	9301      	str	r3, [sp, #4]
  memcpy(&data, &net, sizeof(data));
 80260ba:	9001      	str	r0, [sp, #4]
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 80260bc:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80260c0:	021b      	lsls	r3, r3, #8
 80260c2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 80260c6:	f3c0 2207 	ubfx	r2, r0, #8, #8
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 80260ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
}
 80260ce:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 80260d2:	b002      	add	sp, #8
 80260d4:	4770      	bx	lr
	...

080260d8 <mg_atonl>:
static bool mg_atonl(struct mg_str str, struct mg_addr *addr) {
 80260d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80260da:	b085      	sub	sp, #20
 80260dc:	466c      	mov	r4, sp
 80260de:	e884 0003 	stmia.w	r4, {r0, r1}
 80260e2:	4615      	mov	r5, r2
  uint32_t localhost = mg_htonl(0x7f000001);
 80260e4:	480b      	ldr	r0, [pc, #44]	@ (8026114 <mg_atonl+0x3c>)
 80260e6:	f7ff ffe5 	bl	80260b4 <mg_ntohl>
 80260ea:	4607      	mov	r7, r0
  if (mg_strcasecmp(str, mg_str("localhost")) != 0) return false;
 80260ec:	ae02      	add	r6, sp, #8
 80260ee:	490a      	ldr	r1, [pc, #40]	@ (8026118 <mg_atonl+0x40>)
 80260f0:	4630      	mov	r0, r6
 80260f2:	f7fe fc45 	bl	8024980 <mg_str_s>
 80260f6:	e896 000c 	ldmia.w	r6, {r2, r3}
 80260fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80260fe:	f7fe fd3a 	bl	8024b76 <mg_strcasecmp>
 8026102:	b928      	cbnz	r0, 8026110 <mg_atonl+0x38>
  memcpy(addr->ip, &localhost, sizeof(uint32_t));
 8026104:	602f      	str	r7, [r5, #0]
  addr->is_ip6 = false;
 8026106:	2300      	movs	r3, #0
 8026108:	74eb      	strb	r3, [r5, #19]
  return true;
 802610a:	2001      	movs	r0, #1
}
 802610c:	b005      	add	sp, #20
 802610e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (mg_strcasecmp(str, mg_str("localhost")) != 0) return false;
 8026110:	2000      	movs	r0, #0
 8026112:	e7fb      	b.n	802610c <mg_atonl+0x34>
 8026114:	7f000001 	.word	0x7f000001
 8026118:	0803b43c 	.word	0x0803b43c

0802611c <mg_aton>:
bool mg_aton(struct mg_str str, struct mg_addr *addr) {
 802611c:	b510      	push	{r4, lr}
 802611e:	b082      	sub	sp, #8
 8026120:	466b      	mov	r3, sp
 8026122:	e883 0003 	stmia.w	r3, {r0, r1}
 8026126:	4614      	mov	r4, r2
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 8026128:	e893 0003 	ldmia.w	r3, {r0, r1}
 802612c:	f7fb fdcf 	bl	8021cce <mg_atone>
 8026130:	b110      	cbz	r0, 8026138 <mg_aton+0x1c>
 8026132:	2001      	movs	r0, #1
}
 8026134:	b002      	add	sp, #8
 8026136:	bd10      	pop	{r4, pc}
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 8026138:	4622      	mov	r2, r4
 802613a:	ab02      	add	r3, sp, #8
 802613c:	e913 0003 	ldmdb	r3, {r0, r1}
 8026140:	f7ff ffca 	bl	80260d8 <mg_atonl>
 8026144:	b108      	cbz	r0, 802614a <mg_aton+0x2e>
 8026146:	2001      	movs	r0, #1
 8026148:	e7f4      	b.n	8026134 <mg_aton+0x18>
 802614a:	4622      	mov	r2, r4
 802614c:	ab02      	add	r3, sp, #8
 802614e:	e913 0003 	ldmdb	r3, {r0, r1}
 8026152:	f7fb fb37 	bl	80217c4 <mg_aton4>
 8026156:	b108      	cbz	r0, 802615c <mg_aton+0x40>
 8026158:	2001      	movs	r0, #1
 802615a:	e7eb      	b.n	8026134 <mg_aton+0x18>
         mg_aton6(str, addr);
 802615c:	4622      	mov	r2, r4
 802615e:	ab02      	add	r3, sp, #8
 8026160:	e913 0003 	ldmdb	r3, {r0, r1}
 8026164:	f7ff fd34 	bl	8025bd0 <mg_aton6>
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 8026168:	2800      	cmp	r0, #0
 802616a:	d0e3      	beq.n	8026134 <mg_aton+0x18>
 802616c:	2001      	movs	r0, #1
 802616e:	e7e1      	b.n	8026134 <mg_aton+0x18>

08026170 <gettimestamp>:
static int64_t gettimestamp(const uint32_t *data) {
 8026170:	b570      	push	{r4, r5, r6, lr}
 8026172:	4604      	mov	r4, r0
  uint32_t sec = mg_ntohl(data[0]), frac = mg_ntohl(data[1]);
 8026174:	6800      	ldr	r0, [r0, #0]
 8026176:	f7ff ff9d 	bl	80260b4 <mg_ntohl>
 802617a:	4606      	mov	r6, r0
 802617c:	6860      	ldr	r0, [r4, #4]
 802617e:	f7ff ff99 	bl	80260b4 <mg_ntohl>
  if (sec) sec -= SNTP_TIME_OFFSET;
 8026182:	b12e      	cbz	r6, 8026190 <gettimestamp+0x20>
 8026184:	f106 46f8 	add.w	r6, r6, #2080374784	@ 0x7c000000
 8026188:	f506 06ab 	add.w	r6, r6, #5603328	@ 0x558000
 802618c:	f506 76c0 	add.w	r6, r6, #384	@ 0x180
  return ((int64_t) sec) * 1000 + (int64_t) (frac / SNTP_MAX_FRAC * 1000.0);
 8026190:	0ef5      	lsrs	r5, r6, #27
 8026192:	0174      	lsls	r4, r6, #5
 8026194:	1ba4      	subs	r4, r4, r6
 8026196:	f165 0500 	sbc.w	r5, r5, #0
 802619a:	00ad      	lsls	r5, r5, #2
 802619c:	ea45 7594 	orr.w	r5, r5, r4, lsr #30
 80261a0:	00a4      	lsls	r4, r4, #2
 80261a2:	19a4      	adds	r4, r4, r6
 80261a4:	f145 0500 	adc.w	r5, r5, #0
 80261a8:	00ed      	lsls	r5, r5, #3
 80261aa:	ea45 7554 	orr.w	r5, r5, r4, lsr #29
 80261ae:	00e4      	lsls	r4, r4, #3
 80261b0:	f7ea f9c0 	bl	8010534 <__aeabi_ui2d>
 80261b4:	a309      	add	r3, pc, #36	@ (adr r3, 80261dc <gettimestamp+0x6c>)
 80261b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80261ba:	f7ea fb5f 	bl	801087c <__aeabi_ddiv>
 80261be:	2200      	movs	r2, #0
 80261c0:	4b05      	ldr	r3, [pc, #20]	@ (80261d8 <gettimestamp+0x68>)
 80261c2:	f7ea fa31 	bl	8010628 <__aeabi_dmul>
 80261c6:	f7ea fdf3 	bl	8010db0 <__aeabi_d2lz>
 80261ca:	1820      	adds	r0, r4, r0
}
 80261cc:	eb45 0101 	adc.w	r1, r5, r1
 80261d0:	bd70      	pop	{r4, r5, r6, pc}
 80261d2:	bf00      	nop
 80261d4:	f3af 8000 	nop.w
 80261d8:	408f4000 	.word	0x408f4000
 80261dc:	ffe00000 	.word	0xffe00000
 80261e0:	41efffff 	.word	0x41efffff

080261e4 <mg_ntohs>:
uint16_t mg_ntohs(uint16_t net) {
 80261e4:	b082      	sub	sp, #8
  uint8_t data[2] = {0, 0};
 80261e6:	2300      	movs	r3, #0
 80261e8:	f8ad 3004 	strh.w	r3, [sp, #4]
  memcpy(&data, &net, sizeof(data));
 80261ec:	f8ad 0004 	strh.w	r0, [sp, #4]
  return (uint16_t) ((uint16_t) data[1] | (((uint16_t) data[0]) << 8));
 80261f0:	b2c3      	uxtb	r3, r0
 80261f2:	021b      	lsls	r3, r3, #8
}
 80261f4:	ea43 2010 	orr.w	r0, r3, r0, lsr #8
 80261f8:	b002      	add	sp, #8
 80261fa:	4770      	bx	lr

080261fc <csumfin>:
static uint16_t csumfin(uint32_t sum) {
 80261fc:	b508      	push	{r3, lr}
  while (sum >> 16) sum = (sum & 0xffff) + (sum >> 16);
 80261fe:	e001      	b.n	8026204 <csumfin+0x8>
 8026200:	fa13 f080 	uxtah	r0, r3, r0
 8026204:	0c03      	lsrs	r3, r0, #16
 8026206:	d1fb      	bne.n	8026200 <csumfin+0x4>
  return mg_htons(~sum & 0xffff);
 8026208:	43c0      	mvns	r0, r0
 802620a:	b280      	uxth	r0, r0
 802620c:	f7ff ffea 	bl	80261e4 <mg_ntohs>
}
 8026210:	bd08      	pop	{r3, pc}

08026212 <ipcsum>:
static uint16_t ipcsum(const void *buf, size_t len) {
 8026212:	b508      	push	{r3, lr}
 8026214:	460a      	mov	r2, r1
  uint32_t sum = csumup(0, buf, len);
 8026216:	4601      	mov	r1, r0
 8026218:	2000      	movs	r0, #0
 802621a:	f7fb fb2b 	bl	8021874 <csumup>
  return csumfin(sum);
 802621e:	f7ff ffed 	bl	80261fc <csumfin>
}
 8026222:	bd08      	pop	{r3, pc}

08026224 <tx_ip>:
                        size_t plen) {
 8026224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026226:	4617      	mov	r7, r2
 8026228:	461e      	mov	r6, r3
  struct eth *eth = (struct eth *) ifp->tx.buf;
 802622a:	6944      	ldr	r4, [r0, #20]
  struct ip *ip = (struct ip *) (eth + 1);
 802622c:	4625      	mov	r5, r4
  memcpy(eth->dst, mac_dst, sizeof(eth->dst));
 802622e:	680b      	ldr	r3, [r1, #0]
 8026230:	f845 3b0e 	str.w	r3, [r5], #14
 8026234:	888b      	ldrh	r3, [r1, #4]
 8026236:	80a3      	strh	r3, [r4, #4]
  memcpy(eth->src, ifp->mac, sizeof(eth->src));  // Use our MAC
 8026238:	6803      	ldr	r3, [r0, #0]
 802623a:	f8c4 3006 	str.w	r3, [r4, #6]
 802623e:	8883      	ldrh	r3, [r0, #4]
 8026240:	8163      	strh	r3, [r4, #10]
  eth->type = mg_htons(0x800);
 8026242:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8026246:	f7ff ffcd 	bl	80261e4 <mg_ntohs>
 802624a:	81a0      	strh	r0, [r4, #12]
  memset(ip, 0, sizeof(*ip));
 802624c:	2100      	movs	r1, #0
 802624e:	f8c4 100e 	str.w	r1, [r4, #14]
 8026252:	6069      	str	r1, [r5, #4]
 8026254:	60a9      	str	r1, [r5, #8]
 8026256:	60e9      	str	r1, [r5, #12]
 8026258:	6129      	str	r1, [r5, #16]
  ip->ver = 0x45;   // Version 4, header length 5 words
 802625a:	2345      	movs	r3, #69	@ 0x45
 802625c:	73a3      	strb	r3, [r4, #14]
  ip->frag = 0x40;  // Don't fragment
 802625e:	2340      	movs	r3, #64	@ 0x40
 8026260:	7523      	strb	r3, [r4, #20]
 8026262:	7561      	strb	r1, [r4, #21]
  ip->len = mg_htons((uint16_t) (sizeof(*ip) + plen));
 8026264:	9807      	ldr	r0, [sp, #28]
 8026266:	3014      	adds	r0, #20
 8026268:	b280      	uxth	r0, r0
 802626a:	f7ff ffbb 	bl	80261e4 <mg_ntohs>
 802626e:	8220      	strh	r0, [r4, #16]
  ip->ttl = 64;
 8026270:	2340      	movs	r3, #64	@ 0x40
 8026272:	75a3      	strb	r3, [r4, #22]
  ip->proto = proto;
 8026274:	75e7      	strb	r7, [r4, #23]
  ip->src = ip_src;
 8026276:	f8c4 601a 	str.w	r6, [r4, #26]
  ip->dst = ip_dst;
 802627a:	9b06      	ldr	r3, [sp, #24]
 802627c:	f8c4 301e 	str.w	r3, [r4, #30]
  ip->csum = ipcsum(ip, sizeof(*ip));
 8026280:	2114      	movs	r1, #20
 8026282:	4628      	mov	r0, r5
 8026284:	f7ff ffc5 	bl	8026212 <ipcsum>
 8026288:	8320      	strh	r0, [r4, #24]
}
 802628a:	4628      	mov	r0, r5
 802628c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0802628e <rx_icmp>:
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 802628e:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8026290:	781b      	ldrb	r3, [r3, #0]
 8026292:	2b08      	cmp	r3, #8
 8026294:	d000      	beq.n	8026298 <rx_icmp+0xa>
 8026296:	4770      	bx	lr
static void rx_icmp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8026298:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802629c:	b083      	sub	sp, #12
 802629e:	4605      	mov	r5, r0
 80262a0:	460c      	mov	r4, r1
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 80262a2:	69ca      	ldr	r2, [r1, #28]
 80262a4:	b11a      	cbz	r2, 80262ae <rx_icmp+0x20>
 80262a6:	6911      	ldr	r1, [r2, #16]
 80262a8:	6883      	ldr	r3, [r0, #8]
 80262aa:	4299      	cmp	r1, r3
 80262ac:	d002      	beq.n	80262b4 <rx_icmp+0x26>
}
 80262ae:	b003      	add	sp, #12
 80262b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 80262b4:	6986      	ldr	r6, [r0, #24]
 80262b6:	3e26      	subs	r6, #38	@ 0x26
 80262b8:	68e1      	ldr	r1, [r4, #12]
    if (plen > space) plen = space;
 80262ba:	428e      	cmp	r6, r1
 80262bc:	d300      	bcc.n	80262c0 <rx_icmp+0x32>
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 80262be:	460e      	mov	r6, r1
    struct ip *ip = tx_ip(ifp, pkt->eth->src, 1, ifp->ip, pkt->ip->src,
 80262c0:	6921      	ldr	r1, [r4, #16]
 80262c2:	f106 0804 	add.w	r8, r6, #4
 80262c6:	f8cd 8004 	str.w	r8, [sp, #4]
 80262ca:	68d2      	ldr	r2, [r2, #12]
 80262cc:	9200      	str	r2, [sp, #0]
 80262ce:	2201      	movs	r2, #1
 80262d0:	3106      	adds	r1, #6
 80262d2:	4628      	mov	r0, r5
 80262d4:	f7ff ffa6 	bl	8026224 <tx_ip>
 80262d8:	4607      	mov	r7, r0
    struct icmp *icmp = (struct icmp *) (ip + 1);
 80262da:	f100 0914 	add.w	r9, r0, #20
    memset(icmp, 0, sizeof(*icmp));        // Set csum to 0
 80262de:	2300      	movs	r3, #0
 80262e0:	6143      	str	r3, [r0, #20]
    memcpy(icmp + 1, pkt->pay.buf, plen);  // Copy RX payload to TX
 80262e2:	4632      	mov	r2, r6
 80262e4:	68a1      	ldr	r1, [r4, #8]
 80262e6:	3018      	adds	r0, #24
 80262e8:	f008 f8f6 	bl	802e4d8 <memcpy>
    icmp->csum = ipcsum(icmp, sizeof(*icmp) + plen);
 80262ec:	4641      	mov	r1, r8
 80262ee:	4648      	mov	r0, r9
 80262f0:	f7ff ff8f 	bl	8026212 <ipcsum>
 80262f4:	82f8      	strh	r0, [r7, #22]
    ether_output(ifp, hlen + plen);
 80262f6:	f106 0126 	add.w	r1, r6, #38	@ 0x26
 80262fa:	4628      	mov	r0, r5
 80262fc:	f7fb facb 	bl	8021896 <ether_output>
}
 8026300:	e7d5      	b.n	80262ae <rx_icmp+0x20>

08026302 <rx_ip6>:
static void rx_ip6(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8026302:	b538      	push	{r3, r4, r5, lr}
 8026304:	4605      	mov	r5, r0
 8026306:	460c      	mov	r4, r1
  if (pkt->ip6->proto == 1 || pkt->ip6->proto == 58) {
 8026308:	6a09      	ldr	r1, [r1, #32]
 802630a:	798b      	ldrb	r3, [r1, #6]
 802630c:	2b01      	cmp	r3, #1
 802630e:	d00e      	beq.n	802632e <rx_ip6+0x2c>
 8026310:	2b3a      	cmp	r3, #58	@ 0x3a
 8026312:	d00c      	beq.n	802632e <rx_ip6+0x2c>
  } else if (pkt->ip6->proto == 17) {
 8026314:	2b11      	cmp	r3, #17
 8026316:	d110      	bne.n	802633a <rx_ip6+0x38>
    pkt->udp = (struct udp *) (pkt->ip6 + 1);
 8026318:	f101 0328 	add.w	r3, r1, #40	@ 0x28
 802631c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 802631e:	68e3      	ldr	r3, [r4, #12]
 8026320:	2b07      	cmp	r3, #7
 8026322:	d90a      	bls.n	802633a <rx_ip6+0x38>
    mkpay(pkt, pkt->udp + 1);
 8026324:	3130      	adds	r1, #48	@ 0x30
 8026326:	4620      	mov	r0, r4
 8026328:	f7fe fbe9 	bl	8024afe <mkpay>
 802632c:	e005      	b.n	802633a <rx_ip6+0x38>
    pkt->icmp = (struct icmp *) (pkt->ip6 + 1);
 802632e:	f101 0328 	add.w	r3, r1, #40	@ 0x28
 8026332:	6263      	str	r3, [r4, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8026334:	68e3      	ldr	r3, [r4, #12]
 8026336:	2b03      	cmp	r3, #3
 8026338:	d800      	bhi.n	802633c <rx_ip6+0x3a>
}
 802633a:	bd38      	pop	{r3, r4, r5, pc}
    mkpay(pkt, pkt->icmp + 1);
 802633c:	312c      	adds	r1, #44	@ 0x2c
 802633e:	4620      	mov	r0, r4
 8026340:	f7fe fbdd 	bl	8024afe <mkpay>
    rx_icmp(ifp, pkt);
 8026344:	4621      	mov	r1, r4
 8026346:	4628      	mov	r0, r5
 8026348:	f7ff ffa1 	bl	802628e <rx_icmp>
 802634c:	e7f5      	b.n	802633a <rx_ip6+0x38>

0802634e <tx_udp>:
                   const void *buf, size_t len) {
 802634e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8026352:	b083      	sub	sp, #12
 8026354:	4606      	mov	r6, r0
 8026356:	4698      	mov	r8, r3
 8026358:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 802635a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
      tx_ip(ifp, mac_dst, 17, ip_src, ip_dst, len + sizeof(struct udp));
 802635c:	f105 0308 	add.w	r3, r5, #8
 8026360:	9301      	str	r3, [sp, #4]
 8026362:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026364:	9300      	str	r3, [sp, #0]
 8026366:	4613      	mov	r3, r2
 8026368:	2211      	movs	r2, #17
 802636a:	f7ff ff5b 	bl	8026224 <tx_ip>
 802636e:	4604      	mov	r4, r0
  struct udp *udp = (struct udp *) (ip + 1);
 8026370:	f100 0914 	add.w	r9, r0, #20
  udp->sport = sport;
 8026374:	f8a0 8014 	strh.w	r8, [r0, #20]
  udp->dport = dport;
 8026378:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 802637c:	82c3      	strh	r3, [r0, #22]
  udp->len = mg_htons((uint16_t) (sizeof(*udp) + len));
 802637e:	f105 0008 	add.w	r0, r5, #8
 8026382:	b280      	uxth	r0, r0
 8026384:	f7ff ff2e 	bl	80261e4 <mg_ntohs>
 8026388:	8320      	strh	r0, [r4, #24]
  udp->csum = 0;
 802638a:	2000      	movs	r0, #0
 802638c:	76a0      	strb	r0, [r4, #26]
 802638e:	76e0      	strb	r0, [r4, #27]
  uint32_t cs = csumup(0, udp, sizeof(*udp));
 8026390:	2208      	movs	r2, #8
 8026392:	4649      	mov	r1, r9
 8026394:	f7fb fa6e 	bl	8021874 <csumup>
  cs = csumup(cs, buf, len);
 8026398:	462a      	mov	r2, r5
 802639a:	4639      	mov	r1, r7
 802639c:	f7fb fa6a 	bl	8021874 <csumup>
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 80263a0:	2204      	movs	r2, #4
 80263a2:	f104 010c 	add.w	r1, r4, #12
 80263a6:	f7fb fa65 	bl	8021874 <csumup>
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 80263aa:	2204      	movs	r2, #4
 80263ac:	f104 0110 	add.w	r1, r4, #16
 80263b0:	f7fb fa60 	bl	8021874 <csumup>
  cs += (uint32_t) (ip->proto + sizeof(*udp) + len);
 80263b4:	7a63      	ldrb	r3, [r4, #9]
 80263b6:	442b      	add	r3, r5
 80263b8:	4418      	add	r0, r3
  udp->csum = csumfin(cs);
 80263ba:	3008      	adds	r0, #8
 80263bc:	f7ff ff1e 	bl	80261fc <csumfin>
 80263c0:	8360      	strh	r0, [r4, #26]
  memmove(udp + 1, buf, len);
 80263c2:	462a      	mov	r2, r5
 80263c4:	4639      	mov	r1, r7
 80263c6:	f104 001c 	add.w	r0, r4, #28
 80263ca:	f006 fe2f 	bl	802d02c <memmove>
  ether_output(ifp, sizeof(struct eth) + sizeof(*ip) + sizeof(*udp) + len);
 80263ce:	f105 012a 	add.w	r1, r5, #42	@ 0x2a
 80263d2:	4630      	mov	r0, r6
 80263d4:	f7fb fa5f 	bl	8021896 <ether_output>
}
 80263d8:	b003      	add	sp, #12
 80263da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080263de <arp_ask>:
static void arp_ask(struct mg_tcpip_if *ifp, uint32_t ip) {
 80263de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80263e0:	4605      	mov	r5, r0
 80263e2:	460f      	mov	r7, r1
  struct eth *eth = (struct eth *) ifp->tx.buf;
 80263e4:	6944      	ldr	r4, [r0, #20]
  struct arp *arp = (struct arp *) (eth + 1);
 80263e6:	4626      	mov	r6, r4
  memset(eth->dst, 255, sizeof(eth->dst));
 80263e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80263ec:	f846 3b0e 	str.w	r3, [r6], #14
 80263f0:	80a3      	strh	r3, [r4, #4]
  memcpy(eth->src, ifp->mac, sizeof(eth->src));
 80263f2:	6803      	ldr	r3, [r0, #0]
 80263f4:	f8c4 3006 	str.w	r3, [r4, #6]
 80263f8:	8883      	ldrh	r3, [r0, #4]
 80263fa:	8163      	strh	r3, [r4, #10]
  eth->type = mg_htons(0x806);
 80263fc:	f640 0006 	movw	r0, #2054	@ 0x806
 8026400:	f7ff fef0 	bl	80261e4 <mg_ntohs>
 8026404:	81a0      	strh	r0, [r4, #12]
  memset(arp, 0, sizeof(*arp));
 8026406:	2300      	movs	r3, #0
 8026408:	f8c4 300e 	str.w	r3, [r4, #14]
 802640c:	6073      	str	r3, [r6, #4]
 802640e:	60b3      	str	r3, [r6, #8]
 8026410:	60f3      	str	r3, [r6, #12]
 8026412:	6133      	str	r3, [r6, #16]
 8026414:	6173      	str	r3, [r6, #20]
 8026416:	61b3      	str	r3, [r6, #24]
  arp->fmt = mg_htons(1), arp->pro = mg_htons(0x800), arp->hlen = 6,
 8026418:	2001      	movs	r0, #1
 802641a:	f7ff fee3 	bl	80261e4 <mg_ntohs>
 802641e:	4606      	mov	r6, r0
 8026420:	81e0      	strh	r0, [r4, #14]
 8026422:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8026426:	f7ff fedd 	bl	80261e4 <mg_ntohs>
 802642a:	8220      	strh	r0, [r4, #16]
 802642c:	2306      	movs	r3, #6
 802642e:	74a3      	strb	r3, [r4, #18]
  arp->plen = 4;
 8026430:	2304      	movs	r3, #4
 8026432:	74e3      	strb	r3, [r4, #19]
  arp->op = mg_htons(1), arp->tpa = ip, arp->spa = ifp->ip;
 8026434:	82a6      	strh	r6, [r4, #20]
 8026436:	f8c4 7026 	str.w	r7, [r4, #38]	@ 0x26
 802643a:	68ab      	ldr	r3, [r5, #8]
 802643c:	61e3      	str	r3, [r4, #28]
  memcpy(arp->sha, ifp->mac, sizeof(arp->sha));
 802643e:	682b      	ldr	r3, [r5, #0]
 8026440:	f8c4 3016 	str.w	r3, [r4, #22]
 8026444:	88ab      	ldrh	r3, [r5, #4]
 8026446:	8363      	strh	r3, [r4, #26]
  ether_output(ifp, PDIFF(eth, arp + 1));
 8026448:	212a      	movs	r1, #42	@ 0x2a
 802644a:	4628      	mov	r0, r5
 802644c:	f7fb fa23 	bl	8021896 <ether_output>
}
 8026450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08026452 <mg_open_listener>:
bool mg_open_listener(struct mg_connection *c, const char *url) {
 8026452:	b510      	push	{r4, lr}
 8026454:	4604      	mov	r4, r0
  c->loc.port = mg_htons(mg_url_port(url));
 8026456:	4608      	mov	r0, r1
 8026458:	f7ff fd74 	bl	8025f44 <mg_url_port>
 802645c:	f7ff fec2 	bl	80261e4 <mg_ntohs>
 8026460:	8320      	strh	r0, [r4, #24]
}
 8026462:	2001      	movs	r0, #1
 8026464:	bd10      	pop	{r4, pc}
	...

08026468 <tx_dhcp>:
                    bool ciaddr) {
 8026468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802646c:	b0c8      	sub	sp, #288	@ 0x120
 802646e:	4604      	mov	r4, r0
 8026470:	460e      	mov	r6, r1
 8026472:	4615      	mov	r5, r2
 8026474:	4698      	mov	r8, r3
 8026476:	f89d 7140 	ldrb.w	r7, [sp, #320]	@ 0x140
  struct dhcp dhcp = {1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 802647a:	f44f 7288 	mov.w	r2, #272	@ 0x110
 802647e:	4917      	ldr	r1, [pc, #92]	@ (80264dc <tx_dhcp+0x74>)
 8026480:	a804      	add	r0, sp, #16
 8026482:	f008 f829 	bl	802e4d8 <memcpy>
  dhcp.magic = mg_htonl(0x63825363);
 8026486:	4816      	ldr	r0, [pc, #88]	@ (80264e0 <tx_dhcp+0x78>)
 8026488:	f7ff fe14 	bl	80260b4 <mg_ntohl>
 802648c:	903f      	str	r0, [sp, #252]	@ 0xfc
  memcpy(&dhcp.hwaddr, ifp->mac, sizeof(ifp->mac));
 802648e:	6820      	ldr	r0, [r4, #0]
 8026490:	900b      	str	r0, [sp, #44]	@ 0x2c
 8026492:	88a3      	ldrh	r3, [r4, #4]
 8026494:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
  memcpy(&dhcp.xid, ifp->mac + 2, sizeof(dhcp.xid));
 8026498:	f8d4 3002 	ldr.w	r3, [r4, #2]
 802649c:	9305      	str	r3, [sp, #20]
  memcpy(&dhcp.options, opts, optslen);
 802649e:	9a4f      	ldr	r2, [sp, #316]	@ 0x13c
 80264a0:	994e      	ldr	r1, [sp, #312]	@ 0x138
 80264a2:	a840      	add	r0, sp, #256	@ 0x100
 80264a4:	f008 f818 	bl	802e4d8 <memcpy>
  if (ciaddr) dhcp.ciaddr = ip_src;
 80264a8:	b107      	cbz	r7, 80264ac <tx_dhcp+0x44>
 80264aa:	9507      	str	r5, [sp, #28]
  tx_udp(ifp, mac_dst, ip_src, mg_htons(68), ip_dst, mg_htons(67), &dhcp,
 80264ac:	2044      	movs	r0, #68	@ 0x44
 80264ae:	f7ff fe99 	bl	80261e4 <mg_ntohs>
 80264b2:	4607      	mov	r7, r0
 80264b4:	2043      	movs	r0, #67	@ 0x43
 80264b6:	f7ff fe95 	bl	80261e4 <mg_ntohs>
 80264ba:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80264be:	9303      	str	r3, [sp, #12]
 80264c0:	ab04      	add	r3, sp, #16
 80264c2:	9302      	str	r3, [sp, #8]
 80264c4:	9001      	str	r0, [sp, #4]
 80264c6:	f8cd 8000 	str.w	r8, [sp]
 80264ca:	463b      	mov	r3, r7
 80264cc:	462a      	mov	r2, r5
 80264ce:	4631      	mov	r1, r6
 80264d0:	4620      	mov	r0, r4
 80264d2:	f7ff ff3c 	bl	802634e <tx_udp>
}
 80264d6:	b048      	add	sp, #288	@ 0x120
 80264d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80264dc:	080363ac 	.word	0x080363ac
 80264e0:	63825363 	.word	0x63825363

080264e4 <rx_dhcp_server>:
static void rx_dhcp_server(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 80264e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80264e8:	b0d0      	sub	sp, #320	@ 0x140
 80264ea:	460d      	mov	r5, r1
  uint8_t op = 0, *p = pkt->dhcp->options,
 80264ec:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 80264ee:	f103 04f0 	add.w	r4, r3, #240	@ 0xf0
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 80264f2:	6809      	ldr	r1, [r1, #0]
 80264f4:	686a      	ldr	r2, [r5, #4]
 80264f6:	eb01 0802 	add.w	r8, r1, r2
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 80264fa:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80264fe:	4543      	cmp	r3, r8
 8026500:	d827      	bhi.n	8026552 <rx_dhcp_server+0x6e>
 8026502:	4606      	mov	r6, r0
  struct dhcp res = {2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 8026504:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8026508:	495e      	ldr	r1, [pc, #376]	@ (8026684 <rx_dhcp_server+0x1a0>)
 802650a:	a80c      	add	r0, sp, #48	@ 0x30
 802650c:	f007 ffe4 	bl	802e4d8 <memcpy>
  res.yiaddr = ifp->ip;
 8026510:	68b3      	ldr	r3, [r6, #8]
 8026512:	9310      	str	r3, [sp, #64]	@ 0x40
  ((uint8_t *) (&res.yiaddr))[3]++;                // Offer our IP + 1
 8026514:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8026518:	3301      	adds	r3, #1
 802651a:	f88d 3043 	strb.w	r3, [sp, #67]	@ 0x43
  uint8_t op = 0, *p = pkt->dhcp->options,
 802651e:	2700      	movs	r7, #0
  while (p + 1 < end && p[0] != 255) {             // Parse options
 8026520:	e002      	b.n	8026528 <rx_dhcp_server+0x44>
    p += p[1] + 2;
 8026522:	7863      	ldrb	r3, [r4, #1]
 8026524:	3302      	adds	r3, #2
 8026526:	441c      	add	r4, r3
  while (p + 1 < end && p[0] != 255) {             // Parse options
 8026528:	1c63      	adds	r3, r4, #1
 802652a:	4543      	cmp	r3, r8
 802652c:	d20c      	bcs.n	8026548 <rx_dhcp_server+0x64>
 802652e:	7823      	ldrb	r3, [r4, #0]
 8026530:	2bff      	cmp	r3, #255	@ 0xff
 8026532:	d009      	beq.n	8026548 <rx_dhcp_server+0x64>
    if (p[0] == 53 && p[1] == 1 && p + 2 < end) {  // Message type
 8026534:	2b35      	cmp	r3, #53	@ 0x35
 8026536:	d1f4      	bne.n	8026522 <rx_dhcp_server+0x3e>
 8026538:	7863      	ldrb	r3, [r4, #1]
 802653a:	2b01      	cmp	r3, #1
 802653c:	d1f1      	bne.n	8026522 <rx_dhcp_server+0x3e>
 802653e:	1ca3      	adds	r3, r4, #2
 8026540:	4543      	cmp	r3, r8
 8026542:	d2ee      	bcs.n	8026522 <rx_dhcp_server+0x3e>
      op = p[2];
 8026544:	78a7      	ldrb	r7, [r4, #2]
 8026546:	e7ec      	b.n	8026522 <rx_dhcp_server+0x3e>
  if (op == 1 || op == 3) {         // DHCP Discover or DHCP Request
 8026548:	2f01      	cmp	r7, #1
 802654a:	f000 808a 	beq.w	8026662 <rx_dhcp_server+0x17e>
 802654e:	2f03      	cmp	r7, #3
 8026550:	d002      	beq.n	8026558 <rx_dhcp_server+0x74>
}
 8026552:	b050      	add	sp, #320	@ 0x140
 8026554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 8026558:	2205      	movs	r2, #5
    uint8_t opts[] = {
 802655a:	2335      	movs	r3, #53	@ 0x35
 802655c:	f88d 3014 	strb.w	r3, [sp, #20]
 8026560:	2301      	movs	r3, #1
 8026562:	f88d 3015 	strb.w	r3, [sp, #21]
 8026566:	f88d 2016 	strb.w	r2, [sp, #22]
 802656a:	f88d 3017 	strb.w	r3, [sp, #23]
 802656e:	2204      	movs	r2, #4
 8026570:	f88d 2018 	strb.w	r2, [sp, #24]
 8026574:	2300      	movs	r3, #0
 8026576:	f88d 3019 	strb.w	r3, [sp, #25]
 802657a:	f88d 301a 	strb.w	r3, [sp, #26]
 802657e:	f88d 301b 	strb.w	r3, [sp, #27]
 8026582:	f88d 301c 	strb.w	r3, [sp, #28]
 8026586:	2136      	movs	r1, #54	@ 0x36
 8026588:	f88d 101d 	strb.w	r1, [sp, #29]
 802658c:	f88d 201e 	strb.w	r2, [sp, #30]
 8026590:	f88d 301f 	strb.w	r3, [sp, #31]
 8026594:	f88d 3020 	strb.w	r3, [sp, #32]
 8026598:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 802659c:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
 80265a0:	230c      	movs	r3, #12
 80265a2:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 80265a6:	2303      	movs	r3, #3
 80265a8:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80265ac:	236d      	movs	r3, #109	@ 0x6d
 80265ae:	f88d 3025 	strb.w	r3, [sp, #37]	@ 0x25
 80265b2:	2369      	movs	r3, #105	@ 0x69
 80265b4:	f88d 3026 	strb.w	r3, [sp, #38]	@ 0x26
 80265b8:	2370      	movs	r3, #112	@ 0x70
 80265ba:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
 80265be:	2333      	movs	r3, #51	@ 0x33
 80265c0:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 80265c4:	f88d 2029 	strb.w	r2, [sp, #41]	@ 0x29
 80265c8:	23ff      	movs	r3, #255	@ 0xff
 80265ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80265ce:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
 80265d2:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 80265d6:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
 80265da:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
    memcpy(&res.hwaddr, pkt->dhcp->hwaddr, 6);
 80265de:	f8d5 e030 	ldr.w	lr, [r5, #48]	@ 0x30
 80265e2:	f8de 001c 	ldr.w	r0, [lr, #28]
 80265e6:	9013      	str	r0, [sp, #76]	@ 0x4c
 80265e8:	f8be 3020 	ldrh.w	r3, [lr, #32]
 80265ec:	f8ad 3050 	strh.w	r3, [sp, #80]	@ 0x50
    memcpy(opts + 5, &ifp->mask, sizeof(ifp->mask));
 80265f0:	68f3      	ldr	r3, [r6, #12]
 80265f2:	f8cd 3019 	str.w	r3, [sp, #25]
    memcpy(opts + 11, &ifp->ip, sizeof(ifp->ip));
 80265f6:	68b3      	ldr	r3, [r6, #8]
 80265f8:	f8cd 301f 	str.w	r3, [sp, #31]
    memcpy(&res.options, opts, sizeof(opts));
 80265fc:	f50d 7c90 	add.w	ip, sp, #288	@ 0x120
 8026600:	ac05      	add	r4, sp, #20
 8026602:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8026604:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8026608:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 802660c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8026610:	f82c 2b02 	strh.w	r2, [ip], #2
 8026614:	0c12      	lsrs	r2, r2, #16
 8026616:	f88c 2000 	strb.w	r2, [ip]
    res.magic = pkt->dhcp->magic;
 802661a:	f8de 30ec 	ldr.w	r3, [lr, #236]	@ 0xec
 802661e:	9347      	str	r3, [sp, #284]	@ 0x11c
    res.xid = pkt->dhcp->xid;
 8026620:	f8de 3004 	ldr.w	r3, [lr, #4]
 8026624:	930d      	str	r3, [sp, #52]	@ 0x34
    if (ifp->enable_get_gateway) {
 8026626:	7fb3      	ldrb	r3, [r6, #30]
 8026628:	b9eb      	cbnz	r3, 8026666 <rx_dhcp_server+0x182>
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 802662a:	692c      	ldr	r4, [r5, #16]
 802662c:	3406      	adds	r4, #6
 802662e:	f8d6 8008 	ldr.w	r8, [r6, #8]
 8026632:	2043      	movs	r0, #67	@ 0x43
 8026634:	f7ff fdd6 	bl	80261e4 <mg_ntohs>
 8026638:	4605      	mov	r5, r0
 802663a:	2f01      	cmp	r7, #1
 802663c:	d01e      	beq.n	802667c <rx_dhcp_server+0x198>
 802663e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8026640:	2044      	movs	r0, #68	@ 0x44
 8026642:	f7ff fdcf 	bl	80261e4 <mg_ntohs>
 8026646:	f44f 7388 	mov.w	r3, #272	@ 0x110
 802664a:	9303      	str	r3, [sp, #12]
 802664c:	ab0c      	add	r3, sp, #48	@ 0x30
 802664e:	9302      	str	r3, [sp, #8]
 8026650:	9001      	str	r0, [sp, #4]
 8026652:	9700      	str	r7, [sp, #0]
 8026654:	462b      	mov	r3, r5
 8026656:	4642      	mov	r2, r8
 8026658:	4621      	mov	r1, r4
 802665a:	4630      	mov	r0, r6
 802665c:	f7ff fe77 	bl	802634e <tx_udp>
 8026660:	e777      	b.n	8026552 <rx_dhcp_server+0x6e>
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 8026662:	2202      	movs	r2, #2
 8026664:	e779      	b.n	802655a <rx_dhcp_server+0x76>
      ifp->gw = res.yiaddr;
 8026666:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8026668:	6133      	str	r3, [r6, #16]
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 802666a:	692b      	ldr	r3, [r5, #16]
 802666c:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8026670:	f8c6 2046 	str.w	r2, [r6, #70]	@ 0x46
 8026674:	895b      	ldrh	r3, [r3, #10]
 8026676:	f8a6 304a 	strh.w	r3, [r6, #74]	@ 0x4a
 802667a:	e7d6      	b.n	802662a <rx_dhcp_server+0x146>
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 802667c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8026680:	e7de      	b.n	8026640 <rx_dhcp_server+0x15c>
 8026682:	bf00      	nop
 8026684:	080364bc 	.word	0x080364bc

08026688 <print_ip6>:
static size_t print_ip6(void (*out)(char, void *), void *arg, uint16_t *p) {
 8026688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802668c:	b08b      	sub	sp, #44	@ 0x2c
 802668e:	4605      	mov	r5, r0
 8026690:	9108      	str	r1, [sp, #32]
 8026692:	4614      	mov	r4, r2
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8026694:	8810      	ldrh	r0, [r2, #0]
 8026696:	f7ff fda5 	bl	80261e4 <mg_ntohs>
 802669a:	9009      	str	r0, [sp, #36]	@ 0x24
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 802669c:	8860      	ldrh	r0, [r4, #2]
 802669e:	f7ff fda1 	bl	80261e4 <mg_ntohs>
 80266a2:	4606      	mov	r6, r0
 80266a4:	88a0      	ldrh	r0, [r4, #4]
 80266a6:	f7ff fd9d 	bl	80261e4 <mg_ntohs>
 80266aa:	4607      	mov	r7, r0
 80266ac:	88e0      	ldrh	r0, [r4, #6]
 80266ae:	f7ff fd99 	bl	80261e4 <mg_ntohs>
 80266b2:	4680      	mov	r8, r0
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 80266b4:	8920      	ldrh	r0, [r4, #8]
 80266b6:	f7ff fd95 	bl	80261e4 <mg_ntohs>
 80266ba:	4681      	mov	r9, r0
 80266bc:	8960      	ldrh	r0, [r4, #10]
 80266be:	f7ff fd91 	bl	80261e4 <mg_ntohs>
 80266c2:	4682      	mov	sl, r0
 80266c4:	89a0      	ldrh	r0, [r4, #12]
 80266c6:	f7ff fd8d 	bl	80261e4 <mg_ntohs>
 80266ca:	4683      	mov	fp, r0
                    mg_ntohs(p[7]));
 80266cc:	89e0      	ldrh	r0, [r4, #14]
 80266ce:	f7ff fd89 	bl	80261e4 <mg_ntohs>
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 80266d2:	9006      	str	r0, [sp, #24]
 80266d4:	f8cd b014 	str.w	fp, [sp, #20]
 80266d8:	f8cd a010 	str.w	sl, [sp, #16]
 80266dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80266e0:	f8cd 8008 	str.w	r8, [sp, #8]
 80266e4:	9701      	str	r7, [sp, #4]
 80266e6:	9600      	str	r6, [sp, #0]
 80266e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80266ea:	4a04      	ldr	r2, [pc, #16]	@ (80266fc <print_ip6+0x74>)
 80266ec:	9908      	ldr	r1, [sp, #32]
 80266ee:	4628      	mov	r0, r5
 80266f0:	f7fd ff28 	bl	8024544 <mg_xprintf>
}
 80266f4:	b00b      	add	sp, #44	@ 0x2c
 80266f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80266fa:	bf00      	nop
 80266fc:	0803b448 	.word	0x0803b448

08026700 <mg_print_ip>:
size_t mg_print_ip(void (*out)(char, void *), void *arg, va_list *ap) {
 8026700:	b510      	push	{r4, lr}
  struct mg_addr *addr = va_arg(*ap, struct mg_addr *);
 8026702:	6813      	ldr	r3, [r2, #0]
 8026704:	1d1c      	adds	r4, r3, #4
 8026706:	6014      	str	r4, [r2, #0]
 8026708:	681a      	ldr	r2, [r3, #0]
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 802670a:	7cd3      	ldrb	r3, [r2, #19]
 802670c:	b913      	cbnz	r3, 8026714 <mg_print_ip+0x14>
  return print_ip4(out, arg, (uint8_t *) &addr->ip);
 802670e:	f7fd ff29 	bl	8024564 <print_ip4>
}
 8026712:	bd10      	pop	{r4, pc}
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 8026714:	f7ff ffb8 	bl	8026688 <print_ip6>
 8026718:	e7fb      	b.n	8026712 <mg_print_ip+0x12>
	...

0802671c <mg_print_ip_port>:
size_t mg_print_ip_port(void (*out)(char, void *), void *arg, va_list *ap) {
 802671c:	b570      	push	{r4, r5, r6, lr}
 802671e:	b082      	sub	sp, #8
 8026720:	4604      	mov	r4, r0
 8026722:	460d      	mov	r5, r1
  struct mg_addr *a = va_arg(*ap, struct mg_addr *);
 8026724:	6813      	ldr	r3, [r2, #0]
 8026726:	1d19      	adds	r1, r3, #4
 8026728:	6011      	str	r1, [r2, #0]
 802672a:	681e      	ldr	r6, [r3, #0]
  return mg_xprintf(out, arg, "%M:%hu", mg_print_ip, a, mg_ntohs(a->port));
 802672c:	8a30      	ldrh	r0, [r6, #16]
 802672e:	f7ff fd59 	bl	80261e4 <mg_ntohs>
 8026732:	9001      	str	r0, [sp, #4]
 8026734:	9600      	str	r6, [sp, #0]
 8026736:	4b04      	ldr	r3, [pc, #16]	@ (8026748 <mg_print_ip_port+0x2c>)
 8026738:	4a04      	ldr	r2, [pc, #16]	@ (802674c <mg_print_ip_port+0x30>)
 802673a:	4629      	mov	r1, r5
 802673c:	4620      	mov	r0, r4
 802673e:	f7fd ff01 	bl	8024544 <mg_xprintf>
}
 8026742:	b002      	add	sp, #8
 8026744:	bd70      	pop	{r4, r5, r6, pc}
 8026746:	bf00      	nop
 8026748:	08026701 	.word	0x08026701
 802674c:	0803b464 	.word	0x0803b464

08026750 <mg_crc32>:
  crc = ~crc;
 8026750:	43c0      	mvns	r0, r0
  while (len--) {
 8026752:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
 8026756:	b1e2      	cbz	r2, 8026792 <mg_crc32+0x42>
uint32_t mg_crc32(uint32_t crc, const char *buf, size_t len) {
 8026758:	b410      	push	{r4}
    uint8_t b = *(uint8_t *) buf++;
 802675a:	f811 3b01 	ldrb.w	r3, [r1], #1
    crc = crclut[(crc ^ b) & 0x0F] ^ (crc >> 4);
 802675e:	ea83 0200 	eor.w	r2, r3, r0
 8026762:	f002 020f 	and.w	r2, r2, #15
 8026766:	4c0c      	ldr	r4, [pc, #48]	@ (8026798 <mg_crc32+0x48>)
 8026768:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802676c:	ea82 1010 	eor.w	r0, r2, r0, lsr #4
    crc = crclut[(crc ^ (b >> 4)) & 0x0F] ^ (crc >> 4);
 8026770:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
 8026774:	f003 030f 	and.w	r3, r3, #15
 8026778:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 802677c:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
  while (len--) {
 8026780:	4662      	mov	r2, ip
 8026782:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8026786:	2a00      	cmp	r2, #0
 8026788:	d1e7      	bne.n	802675a <mg_crc32+0xa>
}
 802678a:	43c0      	mvns	r0, r0
 802678c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026790:	4770      	bx	lr
 8026792:	43c0      	mvns	r0, r0
 8026794:	4770      	bx	lr
 8026796:	bf00      	nop
 8026798:	0803bcf8 	.word	0x0803bcf8

0802679c <mg_check_ip_acl>:
int mg_check_ip_acl(struct mg_str acl, struct mg_addr *remote_ip) {
 802679c:	b530      	push	{r4, r5, lr}
 802679e:	b089      	sub	sp, #36	@ 0x24
 80267a0:	ab02      	add	r3, sp, #8
 80267a2:	e883 0003 	stmia.w	r3, {r0, r1}
  int allowed = acl.len == 0 ? '+' : '-';  // If any ACL is set, deny by default
 80267a6:	bb19      	cbnz	r1, 80267f0 <mg_check_ip_acl+0x54>
 80267a8:	252b      	movs	r5, #43	@ 0x2b
  if (remote_ip->is_ip6) {
 80267aa:	7cd3      	ldrb	r3, [r2, #19]
 80267ac:	bb73      	cbnz	r3, 802680c <mg_check_ip_acl+0x70>
    memcpy((void *) &remote_ip4, remote_ip->ip, sizeof(remote_ip4));
 80267ae:	6814      	ldr	r4, [r2, #0]
    while (mg_span(acl, &entry, &acl, ',')) {
 80267b0:	ab02      	add	r3, sp, #8
 80267b2:	222c      	movs	r2, #44	@ 0x2c
 80267b4:	9200      	str	r2, [sp, #0]
 80267b6:	aa06      	add	r2, sp, #24
 80267b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80267bc:	f7fe fb9d 	bl	8024efa <mg_span>
 80267c0:	b1f0      	cbz	r0, 8026800 <mg_check_ip_acl+0x64>
      if (entry.buf[0] != '+' && entry.buf[0] != '-') return -1;
 80267c2:	9806      	ldr	r0, [sp, #24]
 80267c4:	7803      	ldrb	r3, [r0, #0]
 80267c6:	2b2b      	cmp	r3, #43	@ 0x2b
 80267c8:	d001      	beq.n	80267ce <mg_check_ip_acl+0x32>
 80267ca:	2b2d      	cmp	r3, #45	@ 0x2d
 80267cc:	d112      	bne.n	80267f4 <mg_check_ip_acl+0x58>
      if (parse_net(&entry.buf[1], &net, &mask) == 0) return -2;
 80267ce:	aa05      	add	r2, sp, #20
 80267d0:	a904      	add	r1, sp, #16
 80267d2:	3001      	adds	r0, #1
 80267d4:	f7fc fb82 	bl	8022edc <parse_net>
 80267d8:	b178      	cbz	r0, 80267fa <mg_check_ip_acl+0x5e>
      if ((mg_ntohl(remote_ip4) & mask) == net) allowed = entry.buf[0];
 80267da:	4620      	mov	r0, r4
 80267dc:	f7ff fc6a 	bl	80260b4 <mg_ntohl>
 80267e0:	9b05      	ldr	r3, [sp, #20]
 80267e2:	4018      	ands	r0, r3
 80267e4:	9b04      	ldr	r3, [sp, #16]
 80267e6:	4298      	cmp	r0, r3
 80267e8:	d1e2      	bne.n	80267b0 <mg_check_ip_acl+0x14>
 80267ea:	9b06      	ldr	r3, [sp, #24]
 80267ec:	781d      	ldrb	r5, [r3, #0]
 80267ee:	e7df      	b.n	80267b0 <mg_check_ip_acl+0x14>
  int allowed = acl.len == 0 ? '+' : '-';  // If any ACL is set, deny by default
 80267f0:	252d      	movs	r5, #45	@ 0x2d
 80267f2:	e7da      	b.n	80267aa <mg_check_ip_acl+0xe>
      if (entry.buf[0] != '+' && entry.buf[0] != '-') return -1;
 80267f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80267f8:	e006      	b.n	8026808 <mg_check_ip_acl+0x6c>
      if (parse_net(&entry.buf[1], &net, &mask) == 0) return -2;
 80267fa:	f06f 0001 	mvn.w	r0, #1
 80267fe:	e003      	b.n	8026808 <mg_check_ip_acl+0x6c>
  return allowed == '+';
 8026800:	2d2b      	cmp	r5, #43	@ 0x2b
 8026802:	bf14      	ite	ne
 8026804:	2000      	movne	r0, #0
 8026806:	2001      	moveq	r0, #1
}
 8026808:	b009      	add	sp, #36	@ 0x24
 802680a:	bd30      	pop	{r4, r5, pc}
    return -1;  // TODO(): handle IPv6 ACL and addresses
 802680c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026810:	e7fa      	b.n	8026808 <mg_check_ip_acl+0x6c>

08026812 <mg_path_is_sane>:
bool mg_path_is_sane(const struct mg_str path) {
 8026812:	b082      	sub	sp, #8
 8026814:	ab02      	add	r3, sp, #8
 8026816:	e903 0003 	stmdb	r3, {r0, r1}
  const char *s = path.buf;
 802681a:	4602      	mov	r2, r0
  if (path.buf[0] == '.' && path.buf[1] == '.') return false;  // Starts with ..
 802681c:	7803      	ldrb	r3, [r0, #0]
 802681e:	2b2e      	cmp	r3, #46	@ 0x2e
 8026820:	d106      	bne.n	8026830 <mg_path_is_sane+0x1e>
 8026822:	7843      	ldrb	r3, [r0, #1]
 8026824:	2b2e      	cmp	r3, #46	@ 0x2e
 8026826:	d103      	bne.n	8026830 <mg_path_is_sane+0x1e>
 8026828:	2000      	movs	r0, #0
 802682a:	e015      	b.n	8026858 <mg_path_is_sane+0x46>
  for (; s[0] != '\0' && n > 0; s++, n--) {
 802682c:	3201      	adds	r2, #1
 802682e:	3901      	subs	r1, #1
 8026830:	7813      	ldrb	r3, [r2, #0]
 8026832:	b183      	cbz	r3, 8026856 <mg_path_is_sane+0x44>
 8026834:	b169      	cbz	r1, 8026852 <mg_path_is_sane+0x40>
    if ((s[0] == '/' || s[0] == '\\') && n >= 2) {   // Subdir?
 8026836:	2b2f      	cmp	r3, #47	@ 0x2f
 8026838:	d001      	beq.n	802683e <mg_path_is_sane+0x2c>
 802683a:	2b5c      	cmp	r3, #92	@ 0x5c
 802683c:	d1f6      	bne.n	802682c <mg_path_is_sane+0x1a>
 802683e:	2901      	cmp	r1, #1
 8026840:	d9f4      	bls.n	802682c <mg_path_is_sane+0x1a>
      if (s[1] == '.' && s[2] == '.') return false;  // Starts with ..
 8026842:	7853      	ldrb	r3, [r2, #1]
 8026844:	2b2e      	cmp	r3, #46	@ 0x2e
 8026846:	d1f1      	bne.n	802682c <mg_path_is_sane+0x1a>
 8026848:	7893      	ldrb	r3, [r2, #2]
 802684a:	2b2e      	cmp	r3, #46	@ 0x2e
 802684c:	d1ee      	bne.n	802682c <mg_path_is_sane+0x1a>
 802684e:	2000      	movs	r0, #0
 8026850:	e002      	b.n	8026858 <mg_path_is_sane+0x46>
  return true;
 8026852:	2001      	movs	r0, #1
 8026854:	e000      	b.n	8026858 <mg_path_is_sane+0x46>
 8026856:	2001      	movs	r0, #1
}
 8026858:	b002      	add	sp, #8
 802685a:	4770      	bx	lr

0802685c <mg_millis>:
uint64_t mg_millis(void) {
 802685c:	b508      	push	{r3, lr}
  return xTaskGetTickCount() * portTICK_PERIOD_MS;
 802685e:	f7f3 fc0d 	bl	801a07c <xTaskGetTickCount>
}
 8026862:	2100      	movs	r1, #0
 8026864:	bd08      	pop	{r3, pc}
	...

08026868 <mg_log_prefix>:
void mg_log_prefix(int level, const char *file, int line, const char *fname) {
 8026868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802686c:	b092      	sub	sp, #72	@ 0x48
 802686e:	4605      	mov	r5, r0
 8026870:	460c      	mov	r4, r1
 8026872:	4616      	mov	r6, r2
 8026874:	461f      	mov	r7, r3
  const char *p = strrchr(file, '/');
 8026876:	212f      	movs	r1, #47	@ 0x2f
 8026878:	4620      	mov	r0, r4
 802687a:	f006 fc4b 	bl	802d114 <strrchr>
  if (p == NULL) p = strrchr(file, '\\');
 802687e:	4680      	mov	r8, r0
 8026880:	b1a8      	cbz	r0, 80268ae <mg_log_prefix+0x46>
  n = mg_snprintf(buf, sizeof(buf), "%-6llx %d %s:%d:%s", mg_millis(), level,
 8026882:	f7ff ffeb 	bl	802685c <mg_millis>
 8026886:	f1b8 0f00 	cmp.w	r8, #0
 802688a:	d001      	beq.n	8026890 <mg_log_prefix+0x28>
 802688c:	f108 0401 	add.w	r4, r8, #1
 8026890:	9705      	str	r7, [sp, #20]
 8026892:	9604      	str	r6, [sp, #16]
 8026894:	9403      	str	r4, [sp, #12]
 8026896:	9502      	str	r5, [sp, #8]
 8026898:	9000      	str	r0, [sp, #0]
 802689a:	9101      	str	r1, [sp, #4]
 802689c:	4a0f      	ldr	r2, [pc, #60]	@ (80268dc <mg_log_prefix+0x74>)
 802689e:	2129      	movs	r1, #41	@ 0x29
 80268a0:	a807      	add	r0, sp, #28
 80268a2:	f7fd f9e5 	bl	8023c70 <mg_snprintf>
  if (n > sizeof(buf) - 2) n = sizeof(buf) - 2;
 80268a6:	2827      	cmp	r0, #39	@ 0x27
 80268a8:	d90e      	bls.n	80268c8 <mg_log_prefix+0x60>
 80268aa:	2027      	movs	r0, #39	@ 0x27
 80268ac:	e00c      	b.n	80268c8 <mg_log_prefix+0x60>
  if (p == NULL) p = strrchr(file, '\\');
 80268ae:	215c      	movs	r1, #92	@ 0x5c
 80268b0:	4620      	mov	r0, r4
 80268b2:	f006 fc2f 	bl	802d114 <strrchr>
 80268b6:	4680      	mov	r8, r0
 80268b8:	e7e3      	b.n	8026882 <mg_log_prefix+0x1a>
  while (n < sizeof(buf)) buf[n++] = ' ';
 80268ba:	f100 0348 	add.w	r3, r0, #72	@ 0x48
 80268be:	446b      	add	r3, sp
 80268c0:	2220      	movs	r2, #32
 80268c2:	f803 2c2c 	strb.w	r2, [r3, #-44]
 80268c6:	3001      	adds	r0, #1
 80268c8:	2828      	cmp	r0, #40	@ 0x28
 80268ca:	d9f6      	bls.n	80268ba <mg_log_prefix+0x52>
  logs(buf, n - 1);
 80268cc:	1e41      	subs	r1, r0, #1
 80268ce:	a807      	add	r0, sp, #28
 80268d0:	f7fa fb34 	bl	8020f3c <logs>
}
 80268d4:	b012      	add	sp, #72	@ 0x48
 80268d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80268da:	bf00      	nop
 80268dc:	0803b46c 	.word	0x0803b46c

080268e0 <mg_dns_parse>:
bool mg_dns_parse(const uint8_t *buf, size_t len, struct mg_dns_message *dm) {
 80268e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80268e4:	b084      	sub	sp, #16
 80268e6:	4605      	mov	r5, r0
 80268e8:	460e      	mov	r6, r1
 80268ea:	4690      	mov	r8, r2
  memset(dm, 0, sizeof(*dm));
 80268ec:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80268f0:	2100      	movs	r1, #0
 80268f2:	4640      	mov	r0, r8
 80268f4:	f006 fbb4 	bl	802d060 <memset>
  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 80268f8:	2e0b      	cmp	r6, #11
 80268fa:	f240 808b 	bls.w	8026a14 <mg_dns_parse+0x134>
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 80268fe:	88a8      	ldrh	r0, [r5, #4]
 8026900:	f7ff fc70 	bl	80261e4 <mg_ntohs>
 8026904:	2801      	cmp	r0, #1
 8026906:	f200 8089 	bhi.w	8026a1c <mg_dns_parse+0x13c>
  num_answers = mg_ntohs(h->num_answers);
 802690a:	88e8      	ldrh	r0, [r5, #6]
 802690c:	f7ff fc6a 	bl	80261e4 <mg_ntohs>
 8026910:	4604      	mov	r4, r0
 8026912:	4681      	mov	r9, r0
  if (num_answers > 10) {
 8026914:	280a      	cmp	r0, #10
 8026916:	d905      	bls.n	8026924 <mg_dns_parse+0x44>
    MG_DEBUG(("Got %u answers, ignoring beyond 10th one", num_answers));
 8026918:	4b43      	ldr	r3, [pc, #268]	@ (8026a28 <mg_dns_parse+0x148>)
 802691a:	681b      	ldr	r3, [r3, #0]
 802691c:	2b02      	cmp	r3, #2
 802691e:	dc1a      	bgt.n	8026956 <mg_dns_parse+0x76>
    num_answers = 10;  // Sanity cap
 8026920:	f04f 090a 	mov.w	r9, #10
  dm->txnid = mg_ntohs(h->txnid);
 8026924:	8828      	ldrh	r0, [r5, #0]
 8026926:	f7ff fc5d 	bl	80261e4 <mg_ntohs>
 802692a:	f8a8 0000 	strh.w	r0, [r8]
  size_t i, n, num_answers, ofs = sizeof(*h);
 802692e:	240c      	movs	r4, #12
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 8026930:	2700      	movs	r7, #0
 8026932:	88a8      	ldrh	r0, [r5, #4]
 8026934:	f7ff fc56 	bl	80261e4 <mg_ntohs>
 8026938:	42b8      	cmp	r0, r7
 802693a:	d91a      	bls.n	8026972 <mg_dns_parse+0x92>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 802693c:	ab02      	add	r3, sp, #8
 802693e:	9300      	str	r3, [sp, #0]
 8026940:	2301      	movs	r3, #1
 8026942:	4622      	mov	r2, r4
 8026944:	4631      	mov	r1, r6
 8026946:	4628      	mov	r0, r5
 8026948:	f7fc fba4 	bl	8023094 <mg_dns_parse_rr>
 802694c:	2800      	cmp	r0, #0
 802694e:	d067      	beq.n	8026a20 <mg_dns_parse+0x140>
    ofs += n;
 8026950:	4404      	add	r4, r0
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 8026952:	3701      	adds	r7, #1
 8026954:	e7ed      	b.n	8026932 <mg_dns_parse+0x52>
    MG_DEBUG(("Got %u answers, ignoring beyond 10th one", num_answers));
 8026956:	4b35      	ldr	r3, [pc, #212]	@ (8026a2c <mg_dns_parse+0x14c>)
 8026958:	f240 4293 	movw	r2, #1171	@ 0x493
 802695c:	4934      	ldr	r1, [pc, #208]	@ (8026a30 <mg_dns_parse+0x150>)
 802695e:	2003      	movs	r0, #3
 8026960:	f7ff ff82 	bl	8026868 <mg_log_prefix>
 8026964:	4621      	mov	r1, r4
 8026966:	4833      	ldr	r0, [pc, #204]	@ (8026a34 <mg_dns_parse+0x154>)
 8026968:	f7fd fe2c 	bl	80245c4 <mg_log>
    num_answers = 10;  // Sanity cap
 802696c:	f04f 090a 	mov.w	r9, #10
 8026970:	e7d8      	b.n	8026924 <mg_dns_parse+0x44>
  for (i = 0; i < num_answers; i++) {
 8026972:	2700      	movs	r7, #0
 8026974:	e013      	b.n	802699e <mg_dns_parse+0xbe>
    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 8026976:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 802697a:	2a01      	cmp	r2, #1
 802697c:	d12a      	bne.n	80269d4 <mg_dns_parse+0xf4>
 802697e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8026982:	2a01      	cmp	r2, #1
 8026984:	d126      	bne.n	80269d4 <mg_dns_parse+0xf4>
      dm->addr.is_ip6 = false;
 8026986:	2300      	movs	r3, #0
 8026988:	f888 3017 	strb.w	r3, [r8, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 4], 4);
 802698c:	3c04      	subs	r4, #4
 802698e:	592b      	ldr	r3, [r5, r4]
 8026990:	f8c8 3004 	str.w	r3, [r8, #4]
      dm->resolved = true;
 8026994:	2001      	movs	r0, #1
 8026996:	f888 0002 	strb.w	r0, [r8, #2]
      break;  // Return success
 802699a:	e03c      	b.n	8026a16 <mg_dns_parse+0x136>
  for (i = 0; i < num_answers; i++) {
 802699c:	3701      	adds	r7, #1
 802699e:	454f      	cmp	r7, r9
 80269a0:	d236      	bcs.n	8026a10 <mg_dns_parse+0x130>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 80269a2:	ab02      	add	r3, sp, #8
 80269a4:	9300      	str	r3, [sp, #0]
 80269a6:	2300      	movs	r3, #0
 80269a8:	4622      	mov	r2, r4
 80269aa:	4631      	mov	r1, r6
 80269ac:	4628      	mov	r0, r5
 80269ae:	f7fc fb71 	bl	8023094 <mg_dns_parse_rr>
 80269b2:	4682      	mov	sl, r0
 80269b4:	b3b0      	cbz	r0, 8026a24 <mg_dns_parse+0x144>
    mg_dns_parse_name(buf, len, ofs, dm->name, sizeof(dm->name));
 80269b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80269ba:	9300      	str	r3, [sp, #0]
 80269bc:	f108 0318 	add.w	r3, r8, #24
 80269c0:	4622      	mov	r2, r4
 80269c2:	4631      	mov	r1, r6
 80269c4:	4628      	mov	r0, r5
 80269c6:	f7fb fa54 	bl	8021e72 <mg_dns_parse_name>
    ofs += n;
 80269ca:	4454      	add	r4, sl
    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 80269cc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80269d0:	2b04      	cmp	r3, #4
 80269d2:	d0d0      	beq.n	8026976 <mg_dns_parse+0x96>
    } else if (rr.alen == 16 && rr.atype == 28 && rr.aclass == 1) {
 80269d4:	2b10      	cmp	r3, #16
 80269d6:	d1e1      	bne.n	802699c <mg_dns_parse+0xbc>
 80269d8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80269dc:	2b1c      	cmp	r3, #28
 80269de:	d1dd      	bne.n	802699c <mg_dns_parse+0xbc>
 80269e0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80269e4:	2b01      	cmp	r3, #1
 80269e6:	d1d9      	bne.n	802699c <mg_dns_parse+0xbc>
      dm->addr.is_ip6 = true;
 80269e8:	2001      	movs	r0, #1
 80269ea:	f888 0017 	strb.w	r0, [r8, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 16], 16);
 80269ee:	3c10      	subs	r4, #16
 80269f0:	192b      	adds	r3, r5, r4
 80269f2:	592c      	ldr	r4, [r5, r4]
 80269f4:	6859      	ldr	r1, [r3, #4]
 80269f6:	689a      	ldr	r2, [r3, #8]
 80269f8:	68db      	ldr	r3, [r3, #12]
 80269fa:	f8c8 4004 	str.w	r4, [r8, #4]
 80269fe:	f8c8 1008 	str.w	r1, [r8, #8]
 8026a02:	f8c8 200c 	str.w	r2, [r8, #12]
 8026a06:	f8c8 3010 	str.w	r3, [r8, #16]
      dm->resolved = true;
 8026a0a:	f888 0002 	strb.w	r0, [r8, #2]
      break;  // Return success
 8026a0e:	e002      	b.n	8026a16 <mg_dns_parse+0x136>
  return true;
 8026a10:	2001      	movs	r0, #1
 8026a12:	e000      	b.n	8026a16 <mg_dns_parse+0x136>
  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 8026a14:	2000      	movs	r0, #0
}
 8026a16:	b004      	add	sp, #16
 8026a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 8026a1c:	2000      	movs	r0, #0
 8026a1e:	e7fa      	b.n	8026a16 <mg_dns_parse+0x136>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 8026a20:	2000      	movs	r0, #0
 8026a22:	e7f8      	b.n	8026a16 <mg_dns_parse+0x136>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 8026a24:	2000      	movs	r0, #0
 8026a26:	e7f6      	b.n	8026a16 <mg_dns_parse+0x136>
 8026a28:	2000012c 	.word	0x2000012c
 8026a2c:	0803bef8 	.word	0x0803bef8
 8026a30:	0803b480 	.word	0x0803b480
 8026a34:	0803b4b0 	.word	0x0803b4b0

08026a38 <mg_error>:
void mg_error(struct mg_connection *c, const char *fmt, ...) {
 8026a38:	b40e      	push	{r1, r2, r3}
 8026a3a:	b510      	push	{r4, lr}
 8026a3c:	b093      	sub	sp, #76	@ 0x4c
 8026a3e:	4604      	mov	r4, r0
 8026a40:	ab15      	add	r3, sp, #84	@ 0x54
 8026a42:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 8026a46:	9301      	str	r3, [sp, #4]
  mg_vsnprintf(buf, sizeof(buf), fmt, &ap);
 8026a48:	ab01      	add	r3, sp, #4
 8026a4a:	2140      	movs	r1, #64	@ 0x40
 8026a4c:	a802      	add	r0, sp, #8
 8026a4e:	f7fd fdf7 	bl	8024640 <mg_vsnprintf>
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 8026a52:	4b11      	ldr	r3, [pc, #68]	@ (8026a98 <mg_error+0x60>)
 8026a54:	681b      	ldr	r3, [r3, #0]
 8026a56:	2b00      	cmp	r3, #0
 8026a58:	dc0f      	bgt.n	8026a7a <mg_error+0x42>
  c->is_closing = 1;             // Set is_closing before sending MG_EV_CALL
 8026a5a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8026a5e:	f043 0320 	orr.w	r3, r3, #32
 8026a62:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
  mg_call(c, MG_EV_ERROR, buf);  // Let user handler override it
 8026a66:	aa02      	add	r2, sp, #8
 8026a68:	2100      	movs	r1, #0
 8026a6a:	4620      	mov	r0, r4
 8026a6c:	f7fc fb61 	bl	8023132 <mg_call>
}
 8026a70:	b013      	add	sp, #76	@ 0x4c
 8026a72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026a76:	b003      	add	sp, #12
 8026a78:	4770      	bx	lr
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 8026a7a:	4b08      	ldr	r3, [pc, #32]	@ (8026a9c <mg_error+0x64>)
 8026a7c:	f240 5253 	movw	r2, #1363	@ 0x553
 8026a80:	4907      	ldr	r1, [pc, #28]	@ (8026aa0 <mg_error+0x68>)
 8026a82:	2001      	movs	r0, #1
 8026a84:	f7ff fef0 	bl	8026868 <mg_log_prefix>
 8026a88:	ab02      	add	r3, sp, #8
 8026a8a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8026a8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8026a8e:	4805      	ldr	r0, [pc, #20]	@ (8026aa4 <mg_error+0x6c>)
 8026a90:	f7fd fd98 	bl	80245c4 <mg_log>
 8026a94:	e7e1      	b.n	8026a5a <mg_error+0x22>
 8026a96:	bf00      	nop
 8026a98:	2000012c 	.word	0x2000012c
 8026a9c:	0803bed4 	.word	0x0803bed4
 8026aa0:	0803b480 	.word	0x0803b480
 8026aa4:	0803b4dc 	.word	0x0803b4dc

08026aa8 <handle_tls_recv>:
static void handle_tls_recv(struct mg_connection *c, struct mg_iobuf *io) {
 8026aa8:	b570      	push	{r4, r5, r6, lr}
 8026aaa:	b082      	sub	sp, #8
 8026aac:	4606      	mov	r6, r0
 8026aae:	460c      	mov	r4, r1
  long n = mg_tls_recv(c, &io->buf[io->len], io->size - io->len);
 8026ab0:	6809      	ldr	r1, [r1, #0]
 8026ab2:	68a5      	ldr	r5, [r4, #8]
 8026ab4:	6862      	ldr	r2, [r4, #4]
 8026ab6:	1b52      	subs	r2, r2, r5
 8026ab8:	4429      	add	r1, r5
 8026aba:	f7ff f9cb 	bl	8025e54 <mg_tls_recv>
 8026abe:	9001      	str	r0, [sp, #4]
  if (n == MG_IO_ERR) {
 8026ac0:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8026ac4:	d003      	beq.n	8026ace <handle_tls_recv+0x26>
  } else if (n > 0) {
 8026ac6:	2800      	cmp	r0, #0
 8026ac8:	dc06      	bgt.n	8026ad8 <handle_tls_recv+0x30>
}
 8026aca:	b002      	add	sp, #8
 8026acc:	bd70      	pop	{r4, r5, r6, pc}
    mg_error(c, "TLS recv error");
 8026ace:	4906      	ldr	r1, [pc, #24]	@ (8026ae8 <handle_tls_recv+0x40>)
 8026ad0:	4630      	mov	r0, r6
 8026ad2:	f7ff ffb1 	bl	8026a38 <mg_error>
 8026ad6:	e7f8      	b.n	8026aca <handle_tls_recv+0x22>
    io->len += (size_t) n;
 8026ad8:	4405      	add	r5, r0
 8026ada:	60a5      	str	r5, [r4, #8]
    mg_call(c, MG_EV_READ, &n);
 8026adc:	aa01      	add	r2, sp, #4
 8026ade:	2107      	movs	r1, #7
 8026ae0:	4630      	mov	r0, r6
 8026ae2:	f7fc fb26 	bl	8023132 <mg_call>
}
 8026ae6:	e7f0      	b.n	8026aca <handle_tls_recv+0x22>
 8026ae8:	0803b4e8 	.word	0x0803b4e8

08026aec <http_cb>:
static void http_cb(struct mg_connection *c, int ev, void *ev_data) {
 8026aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026af0:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 8026af4:	4607      	mov	r7, r0
 8026af6:	468a      	mov	sl, r1
  if (ev == MG_EV_READ || ev == MG_EV_CLOSE ||
 8026af8:	2907      	cmp	r1, #7
 8026afa:	f000 80e3 	beq.w	8026cc4 <http_cb+0x1d8>
 8026afe:	2909      	cmp	r1, #9
 8026b00:	f000 814a 	beq.w	8026d98 <http_cb+0x2ac>
 8026b04:	2902      	cmp	r1, #2
 8026b06:	f040 80d9 	bne.w	8026cbc <http_cb+0x1d0>
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 8026b0a:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	@ 0xac
 8026b0e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8026b12:	f023 030b 	bic.w	r3, r3, #11
 8026b16:	04db      	lsls	r3, r3, #19
 8026b18:	0cdb      	lsrs	r3, r3, #19
 8026b1a:	2b04      	cmp	r3, #4
 8026b1c:	f040 80ce 	bne.w	8026cbc <http_cb+0x1d0>
       c->recv.len > 0)) {  // see #2796
 8026b20:	6c03      	ldr	r3, [r0, #64]	@ 0x40
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 8026b22:	2b00      	cmp	r3, #0
 8026b24:	f000 80ca 	beq.w	8026cbc <http_cb+0x1d0>
 8026b28:	f04f 0900 	mov.w	r9, #0
 8026b2c:	e0cc      	b.n	8026cc8 <http_cb+0x1dc>
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 8026b2e:	4b9f      	ldr	r3, [pc, #636]	@ (8026dac <http_cb+0x2c0>)
 8026b30:	681b      	ldr	r3, [r3, #0]
 8026b32:	2b00      	cmp	r3, #0
 8026b34:	dc11      	bgt.n	8026b5a <http_cb+0x6e>
        c->is_draining = 1;
 8026b36:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 8026b3a:	f043 0310 	orr.w	r3, r3, #16
 8026b3e:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
        mg_hexdump(buf, c->recv.len - ofs > 16 ? 16 : c->recv.len - ofs);
 8026b42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8026b44:	eba3 0109 	sub.w	r1, r3, r9
 8026b48:	2910      	cmp	r1, #16
 8026b4a:	bf28      	it	cs
 8026b4c:	2110      	movcs	r1, #16
 8026b4e:	4620      	mov	r0, r4
 8026b50:	f7fc fe9a 	bl	8023888 <mg_hexdump>
        c->recv.len = 0;
 8026b54:	2300      	movs	r3, #0
 8026b56:	643b      	str	r3, [r7, #64]	@ 0x40
        return;
 8026b58:	e0b0      	b.n	8026cbc <http_cb+0x1d0>
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 8026b5a:	4b95      	ldr	r3, [pc, #596]	@ (8026db0 <http_cb+0x2c4>)
 8026b5c:	f640 42a3 	movw	r2, #3235	@ 0xca3
 8026b60:	4994      	ldr	r1, [pc, #592]	@ (8026db4 <http_cb+0x2c8>)
 8026b62:	2001      	movs	r0, #1
 8026b64:	f7ff fe80 	bl	8026868 <mg_log_prefix>
 8026b68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8026b6a:	4893      	ldr	r0, [pc, #588]	@ (8026db8 <http_cb+0x2cc>)
 8026b6c:	f7fd fd2a 	bl	80245c4 <mg_log>
 8026b70:	e7e1      	b.n	8026b36 <http_cb+0x4a>
        hm.message.len = c->recv.len - ofs;  // and closes now, deliver MSG
 8026b72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8026b74:	eba3 0309 	sub.w	r3, r3, r9
 8026b78:	9387      	str	r3, [sp, #540]	@ 0x21c
        hm.body.len = hm.message.len - (size_t) (hm.body.buf - hm.message.buf);
 8026b7a:	9a82      	ldr	r2, [sp, #520]	@ 0x208
 8026b7c:	9986      	ldr	r1, [sp, #536]	@ 0x218
 8026b7e:	1a52      	subs	r2, r2, r1
 8026b80:	1a9b      	subs	r3, r3, r2
 8026b82:	9383      	str	r3, [sp, #524]	@ 0x20c
 8026b84:	e0bf      	b.n	8026d06 <http_cb+0x21a>
        if (mg_strcasecmp(*te, mg_str("chunked")) == 0) {
 8026b86:	ad88      	add	r5, sp, #544	@ 0x220
 8026b88:	498c      	ldr	r1, [pc, #560]	@ (8026dbc <http_cb+0x2d0>)
 8026b8a:	4628      	mov	r0, r5
 8026b8c:	f7fd fef8 	bl	8024980 <mg_str_s>
 8026b90:	e895 000c 	ldmia.w	r5, {r2, r3}
 8026b94:	e894 0003 	ldmia.w	r4, {r0, r1}
 8026b98:	f7fd ffed 	bl	8024b76 <mg_strcasecmp>
 8026b9c:	4604      	mov	r4, r0
 8026b9e:	b950      	cbnz	r0, 8026bb6 <http_cb+0xca>
        char *s = (char *) c->recv.buf + ofs + n;
 8026ba0:	6bbd      	ldr	r5, [r7, #56]	@ 0x38
 8026ba2:	eb08 0309 	add.w	r3, r8, r9
 8026ba6:	441d      	add	r5, r3
        int o = 0, pl, dl, cl, len = (int) (c->recv.len - ofs - (size_t) n);
 8026ba8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8026baa:	eba3 0309 	sub.w	r3, r3, r9
 8026bae:	eba3 0b08 	sub.w	fp, r3, r8
 8026bb2:	4606      	mov	r6, r0
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 8026bb4:	e04a      	b.n	8026c4c <http_cb+0x160>
          mg_error(c, "Invalid Transfer-Encoding");  // See #2460
 8026bb6:	4982      	ldr	r1, [pc, #520]	@ (8026dc0 <http_cb+0x2d4>)
 8026bb8:	4638      	mov	r0, r7
 8026bba:	f7ff ff3d 	bl	8026a38 <mg_error>
          return;
 8026bbe:	e07d      	b.n	8026cbc <http_cb+0x1d0>
        bool is_response = mg_ncasecmp(hm.method.buf, "HTTP/", 5) == 0;
 8026bc0:	2205      	movs	r2, #5
 8026bc2:	4980      	ldr	r1, [pc, #512]	@ (8026dc4 <http_cb+0x2d8>)
 8026bc4:	9802      	ldr	r0, [sp, #8]
 8026bc6:	f7f9 fc03 	bl	80203d0 <mg_ncasecmp>
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 8026bca:	2800      	cmp	r0, #0
 8026bcc:	d032      	beq.n	8026c34 <http_cb+0x148>
 8026bce:	ac8a      	add	r4, sp, #552	@ 0x228
 8026bd0:	497d      	ldr	r1, [pc, #500]	@ (8026dc8 <http_cb+0x2dc>)
 8026bd2:	4620      	mov	r0, r4
 8026bd4:	f7fd fed4 	bl	8024980 <mg_str_s>
 8026bd8:	a902      	add	r1, sp, #8
 8026bda:	e894 000c 	ldmia.w	r4, {r2, r3}
 8026bde:	c903      	ldmia	r1, {r0, r1}
 8026be0:	f7fd ffc9 	bl	8024b76 <mg_strcasecmp>
 8026be4:	b9c0      	cbnz	r0, 8026c18 <http_cb+0x12c>
          ofs += (size_t) n;  // this request has been processed
 8026be6:	44c1      	add	r9, r8
          mg_http_reply(c, 411, "", "");
 8026be8:	4a78      	ldr	r2, [pc, #480]	@ (8026dcc <http_cb+0x2e0>)
 8026bea:	4613      	mov	r3, r2
 8026bec:	f240 119b 	movw	r1, #411	@ 0x19b
 8026bf0:	4638      	mov	r0, r7
 8026bf2:	f7fd fd3b 	bl	802466c <mg_http_reply>
          MG_ERROR(("%s", "Content length missing from request"));
 8026bf6:	4b6d      	ldr	r3, [pc, #436]	@ (8026dac <http_cb+0x2c0>)
 8026bf8:	681b      	ldr	r3, [r3, #0]
 8026bfa:	2b00      	cmp	r3, #0
 8026bfc:	f340 8092 	ble.w	8026d24 <http_cb+0x238>
 8026c00:	4b6b      	ldr	r3, [pc, #428]	@ (8026db0 <http_cb+0x2c4>)
 8026c02:	f640 42ca 	movw	r2, #3274	@ 0xcca
 8026c06:	496b      	ldr	r1, [pc, #428]	@ (8026db4 <http_cb+0x2c8>)
 8026c08:	2001      	movs	r0, #1
 8026c0a:	f7ff fe2d 	bl	8026868 <mg_log_prefix>
 8026c0e:	4970      	ldr	r1, [pc, #448]	@ (8026dd0 <http_cb+0x2e4>)
 8026c10:	4870      	ldr	r0, [pc, #448]	@ (8026dd4 <http_cb+0x2e8>)
 8026c12:	f7fd fcd7 	bl	80245c4 <mg_log>
      if (is_chunked) {
 8026c16:	e085      	b.n	8026d24 <http_cb+0x238>
                             mg_strcasecmp(hm.method, mg_str("PUT")) == 0)) {
 8026c18:	ac8c      	add	r4, sp, #560	@ 0x230
 8026c1a:	496f      	ldr	r1, [pc, #444]	@ (8026dd8 <http_cb+0x2ec>)
 8026c1c:	4620      	mov	r0, r4
 8026c1e:	f7fd feaf 	bl	8024980 <mg_str_s>
 8026c22:	a902      	add	r1, sp, #8
 8026c24:	e894 000c 	ldmia.w	r4, {r2, r3}
 8026c28:	c903      	ldmia	r1, {r0, r1}
 8026c2a:	f7fd ffa4 	bl	8024b76 <mg_strcasecmp>
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 8026c2e:	2800      	cmp	r0, #0
 8026c30:	d178      	bne.n	8026d24 <http_cb+0x238>
 8026c32:	e7d8      	b.n	8026be6 <http_cb+0xfa>
          int status = mg_http_status(&hm);
 8026c34:	a802      	add	r0, sp, #8
 8026c36:	f7fc fb6f 	bl	8023318 <mg_http_status>
          require_content_len = status >= 200 && status != 204 && status != 304;
 8026c3a:	28c7      	cmp	r0, #199	@ 0xc7
 8026c3c:	dd72      	ble.n	8026d24 <http_cb+0x238>
 8026c3e:	28cc      	cmp	r0, #204	@ 0xcc
 8026c40:	d070      	beq.n	8026d24 <http_cb+0x238>
 8026c42:	f5b0 7f98 	cmp.w	r0, #304	@ 0x130
 8026c46:	d1cf      	bne.n	8026be8 <http_cb+0xfc>
 8026c48:	e06c      	b.n	8026d24 <http_cb+0x238>
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 8026c4a:	4406      	add	r6, r0
 8026c4c:	ab01      	add	r3, sp, #4
 8026c4e:	466a      	mov	r2, sp
 8026c50:	ebab 0106 	sub.w	r1, fp, r6
 8026c54:	19a8      	adds	r0, r5, r6
 8026c56:	f7fe fecd 	bl	80259f4 <skip_chunk>
 8026c5a:	2800      	cmp	r0, #0
 8026c5c:	dd02      	ble.n	8026c64 <http_cb+0x178>
 8026c5e:	9b01      	ldr	r3, [sp, #4]
 8026c60:	2b00      	cmp	r3, #0
 8026c62:	d1f2      	bne.n	8026c4a <http_cb+0x15e>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 8026c64:	b338      	cbz	r0, 8026cb6 <http_cb+0x1ca>
        if (cl < 0) {
 8026c66:	2800      	cmp	r0, #0
 8026c68:	db21      	blt.n	8026cae <http_cb+0x1c2>
        o = 0, hm.body.len = 0, hm.message.len = (size_t) n;
 8026c6a:	2300      	movs	r3, #0
 8026c6c:	9383      	str	r3, [sp, #524]	@ 0x20c
 8026c6e:	f8cd 821c 	str.w	r8, [sp, #540]	@ 0x21c
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 8026c72:	ab01      	add	r3, sp, #4
 8026c74:	466a      	mov	r2, sp
 8026c76:	ebab 0104 	sub.w	r1, fp, r4
 8026c7a:	1928      	adds	r0, r5, r4
 8026c7c:	f7fe feba 	bl	80259f4 <skip_chunk>
 8026c80:	1e06      	subs	r6, r0, #0
 8026c82:	dd11      	ble.n	8026ca8 <http_cb+0x1bc>
          memmove(s + hm.body.len, s + o + pl, (size_t) dl);
 8026c84:	9883      	ldr	r0, [sp, #524]	@ 0x20c
 8026c86:	9900      	ldr	r1, [sp, #0]
 8026c88:	4421      	add	r1, r4
 8026c8a:	9a01      	ldr	r2, [sp, #4]
 8026c8c:	4429      	add	r1, r5
 8026c8e:	4428      	add	r0, r5
 8026c90:	f006 f9cc 	bl	802d02c <memmove>
          o += cl, hm.body.len += (size_t) dl, hm.message.len += (size_t) dl;
 8026c94:	4434      	add	r4, r6
 8026c96:	9a83      	ldr	r2, [sp, #524]	@ 0x20c
 8026c98:	9b01      	ldr	r3, [sp, #4]
 8026c9a:	441a      	add	r2, r3
 8026c9c:	9283      	str	r2, [sp, #524]	@ 0x20c
 8026c9e:	9a87      	ldr	r2, [sp, #540]	@ 0x21c
 8026ca0:	441a      	add	r2, r3
 8026ca2:	9287      	str	r2, [sp, #540]	@ 0x21c
          if (dl == 0) break;
 8026ca4:	2b00      	cmp	r3, #0
 8026ca6:	d1e4      	bne.n	8026c72 <http_cb+0x186>
        ofs += (size_t) (n + o);
 8026ca8:	4444      	add	r4, r8
 8026caa:	44a1      	add	r9, r4
 8026cac:	e044      	b.n	8026d38 <http_cb+0x24c>
          mg_error(c, "Invalid chunk");
 8026cae:	494b      	ldr	r1, [pc, #300]	@ (8026ddc <http_cb+0x2f0>)
 8026cb0:	4638      	mov	r0, r7
 8026cb2:	f7ff fec1 	bl	8026a38 <mg_error>
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 8026cb6:	f1b9 0f00 	cmp.w	r9, #0
 8026cba:	d170      	bne.n	8026d9e <http_cb+0x2b2>
}
 8026cbc:	f50d 7d11 	add.w	sp, sp, #580	@ 0x244
 8026cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026cc4:	f04f 0900 	mov.w	r9, #0
    while (c->is_resp == 0 && ofs < c->recv.len) {
 8026cc8:	f997 30ad 	ldrsb.w	r3, [r7, #173]	@ 0xad
 8026ccc:	2b00      	cmp	r3, #0
 8026cce:	dbf2      	blt.n	8026cb6 <http_cb+0x1ca>
 8026cd0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8026cd2:	4549      	cmp	r1, r9
 8026cd4:	d9ef      	bls.n	8026cb6 <http_cb+0x1ca>
      const char *buf = (char *) c->recv.buf + ofs;
 8026cd6:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8026cd8:	444c      	add	r4, r9
      int n = mg_http_parse(buf, c->recv.len - ofs, &hm);
 8026cda:	aa02      	add	r2, sp, #8
 8026cdc:	eba1 0109 	sub.w	r1, r1, r9
 8026ce0:	4620      	mov	r0, r4
 8026ce2:	f7fd ff77 	bl	8024bd4 <mg_http_parse>
      if (n < 0) {
 8026ce6:	f1b0 0800 	subs.w	r8, r0, #0
 8026cea:	f6ff af20 	blt.w	8026b2e <http_cb+0x42>
      if (n == 0) break;                 // Request is not buffered yet
 8026cee:	f1b8 0f00 	cmp.w	r8, #0
 8026cf2:	d0e0      	beq.n	8026cb6 <http_cb+0x1ca>
      mg_call(c, MG_EV_HTTP_HDRS, &hm);  // Got all HTTP headers
 8026cf4:	aa02      	add	r2, sp, #8
 8026cf6:	210a      	movs	r1, #10
 8026cf8:	4638      	mov	r0, r7
 8026cfa:	f7fc fa1a 	bl	8023132 <mg_call>
      if (ev == MG_EV_CLOSE) {           // If client did not set Content-Length
 8026cfe:	f1ba 0f09 	cmp.w	sl, #9
 8026d02:	f43f af36 	beq.w	8026b72 <http_cb+0x86>
      if ((te = mg_http_get_header(&hm, "Transfer-Encoding")) != NULL) {
 8026d06:	4936      	ldr	r1, [pc, #216]	@ (8026de0 <http_cb+0x2f4>)
 8026d08:	a802      	add	r0, sp, #8
 8026d0a:	f7fc fadb 	bl	80232c4 <mg_http_get_header>
 8026d0e:	4604      	mov	r4, r0
 8026d10:	2800      	cmp	r0, #0
 8026d12:	f47f af38 	bne.w	8026b86 <http_cb+0x9a>
      } else if (mg_http_get_header(&hm, "Content-length") == NULL) {
 8026d16:	4933      	ldr	r1, [pc, #204]	@ (8026de4 <http_cb+0x2f8>)
 8026d18:	a802      	add	r0, sp, #8
 8026d1a:	f7fc fad3 	bl	80232c4 <mg_http_get_header>
 8026d1e:	2800      	cmp	r0, #0
 8026d20:	f43f af4e 	beq.w	8026bc0 <http_cb+0xd4>
        size_t len = c->recv.len - ofs - (size_t) n;
 8026d24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8026d26:	eba3 0309 	sub.w	r3, r3, r9
 8026d2a:	eba3 0308 	sub.w	r3, r3, r8
        if (hm.body.len > len) break;  // Buffer more data
 8026d2e:	9a83      	ldr	r2, [sp, #524]	@ 0x20c
 8026d30:	429a      	cmp	r2, r3
 8026d32:	d8c0      	bhi.n	8026cb6 <http_cb+0x1ca>
        ofs += (size_t) n + hm.body.len;
 8026d34:	4490      	add	r8, r2
 8026d36:	44c1      	add	r9, r8
      if (c->is_accepted) c->is_resp = 1;  // Start generating response
 8026d38:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 8026d3c:	f013 0f04 	tst.w	r3, #4
 8026d40:	d005      	beq.n	8026d4e <http_cb+0x262>
 8026d42:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 8026d46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8026d4a:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
 8026d4e:	aa02      	add	r2, sp, #8
 8026d50:	210b      	movs	r1, #11
 8026d52:	4638      	mov	r0, r7
 8026d54:	f7fc f9ed 	bl	8023132 <mg_call>
      if (c->is_accepted) {
 8026d58:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 8026d5c:	f013 0f04 	tst.w	r3, #4
 8026d60:	d0b2      	beq.n	8026cc8 <http_cb+0x1dc>
        struct mg_str *cc = mg_http_get_header(&hm, "Connection");
 8026d62:	4921      	ldr	r1, [pc, #132]	@ (8026de8 <http_cb+0x2fc>)
 8026d64:	a802      	add	r0, sp, #8
 8026d66:	f7fc faad 	bl	80232c4 <mg_http_get_header>
        if (cc != NULL && mg_strcasecmp(*cc, mg_str("close")) == 0) {
 8026d6a:	4605      	mov	r5, r0
 8026d6c:	2800      	cmp	r0, #0
 8026d6e:	d0ab      	beq.n	8026cc8 <http_cb+0x1dc>
 8026d70:	ac8e      	add	r4, sp, #568	@ 0x238
 8026d72:	491e      	ldr	r1, [pc, #120]	@ (8026dec <http_cb+0x300>)
 8026d74:	4620      	mov	r0, r4
 8026d76:	f7fd fe03 	bl	8024980 <mg_str_s>
 8026d7a:	e894 000c 	ldmia.w	r4, {r2, r3}
 8026d7e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8026d82:	f7fd fef8 	bl	8024b76 <mg_strcasecmp>
 8026d86:	2800      	cmp	r0, #0
 8026d88:	d19e      	bne.n	8026cc8 <http_cb+0x1dc>
          c->is_draining = 1;  // honor "Connection: close"
 8026d8a:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 8026d8e:	f043 0310 	orr.w	r3, r3, #16
 8026d92:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
          break;
 8026d96:	e78e      	b.n	8026cb6 <http_cb+0x1ca>
 8026d98:	f04f 0900 	mov.w	r9, #0
 8026d9c:	e794      	b.n	8026cc8 <http_cb+0x1dc>
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 8026d9e:	464a      	mov	r2, r9
 8026da0:	2100      	movs	r1, #0
 8026da2:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8026da6:	f7ff f928 	bl	8025ffa <mg_iobuf_del>
 8026daa:	e787      	b.n	8026cbc <http_cb+0x1d0>
 8026dac:	2000012c 	.word	0x2000012c
 8026db0:	0803becc 	.word	0x0803becc
 8026db4:	0803b480 	.word	0x0803b480
 8026db8:	0803b4f8 	.word	0x0803b4f8
 8026dbc:	0803b510 	.word	0x0803b510
 8026dc0:	0803b518 	.word	0x0803b518
 8026dc4:	0803ac78 	.word	0x0803ac78
 8026dc8:	08036e88 	.word	0x08036e88
 8026dcc:	080373ac 	.word	0x080373ac
 8026dd0:	0803b544 	.word	0x0803b544
 8026dd4:	0803b798 	.word	0x0803b798
 8026dd8:	08037bd4 	.word	0x08037bd4
 8026ddc:	0803b568 	.word	0x0803b568
 8026de0:	0803b520 	.word	0x0803b520
 8026de4:	0803b534 	.word	0x0803b534
 8026de8:	0803b578 	.word	0x0803b578
 8026dec:	0803b584 	.word	0x0803b584

08026df0 <uri_to_path2>:
                        char *path, size_t path_size) {
 8026df0:	b082      	sub	sp, #8
 8026df2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026df6:	b086      	sub	sp, #24
 8026df8:	4681      	mov	r9, r0
 8026dfa:	460e      	mov	r6, r1
 8026dfc:	4690      	mov	r8, r2
 8026dfe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026e00:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8026e02:	9f14      	ldr	r7, [sp, #80]	@ 0x50
  size_t n = mg_snprintf(path, path_size, "%.*s", (int) dir.len, dir.buf);
 8026e04:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026e06:	9300      	str	r3, [sp, #0]
 8026e08:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8026e0a:	4a6f      	ldr	r2, [pc, #444]	@ (8026fc8 <uri_to_path2+0x1d8>)
 8026e0c:	4639      	mov	r1, r7
 8026e0e:	4628      	mov	r0, r5
 8026e10:	f7fc ff2e 	bl	8023c70 <mg_snprintf>
  if (n + 2 >= path_size) {
 8026e14:	1c83      	adds	r3, r0, #2
 8026e16:	42bb      	cmp	r3, r7
 8026e18:	d227      	bcs.n	8026e6a <uri_to_path2+0x7a>
  path[path_size - 1] = '\0';
 8026e1a:	f107 3aff 	add.w	sl, r7, #4294967295	@ 0xffffffff
 8026e1e:	2300      	movs	r3, #0
 8026e20:	f805 300a 	strb.w	r3, [r5, sl]
  if (n > 0 && path[n - 1] != '/') path[n++] = '/', path[n] = '\0';
 8026e24:	b150      	cbz	r0, 8026e3c <uri_to_path2+0x4c>
 8026e26:	182b      	adds	r3, r5, r0
 8026e28:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8026e2c:	2b2f      	cmp	r3, #47	@ 0x2f
 8026e2e:	d005      	beq.n	8026e3c <uri_to_path2+0x4c>
 8026e30:	1c43      	adds	r3, r0, #1
 8026e32:	222f      	movs	r2, #47	@ 0x2f
 8026e34:	542a      	strb	r2, [r5, r0]
 8026e36:	2200      	movs	r2, #0
 8026e38:	54ea      	strb	r2, [r5, r3]
 8026e3a:	4618      	mov	r0, r3
  if (url.len < hm->uri.len) {
 8026e3c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8026e3e:	68f1      	ldr	r1, [r6, #12]
 8026e40:	428c      	cmp	r4, r1
 8026e42:	d31c      	bcc.n	8026e7e <uri_to_path2+0x8e>
  path[path_size - 1] = '\0';  // Double-check
 8026e44:	2300      	movs	r3, #0
 8026e46:	f805 300a 	strb.w	r3, [r5, sl]
  if (!mg_path_is_sane(mg_str_n(path, path_size))) {
 8026e4a:	ac02      	add	r4, sp, #8
 8026e4c:	463a      	mov	r2, r7
 8026e4e:	4629      	mov	r1, r5
 8026e50:	4620      	mov	r0, r4
 8026e52:	f7fd fda1 	bl	8024998 <mg_str_n>
 8026e56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8026e5a:	f7ff fcda 	bl	8026812 <mg_path_is_sane>
 8026e5e:	b1c0      	cbz	r0, 8026e92 <uri_to_path2+0xa2>
  n = strlen(path);
 8026e60:	4628      	mov	r0, r5
 8026e62:	f7e9 fa1d 	bl	80102a0 <strlen>
 8026e66:	4604      	mov	r4, r0
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 8026e68:	e020      	b.n	8026eac <uri_to_path2+0xbc>
    mg_http_reply(c, 400, "", "Exceeded path size");
 8026e6a:	4b58      	ldr	r3, [pc, #352]	@ (8026fcc <uri_to_path2+0x1dc>)
 8026e6c:	4a58      	ldr	r2, [pc, #352]	@ (8026fd0 <uri_to_path2+0x1e0>)
 8026e6e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8026e72:	4648      	mov	r0, r9
 8026e74:	f7fd fbfa 	bl	802466c <mg_http_reply>
    return -1;
 8026e78:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8026e7c:	e046      	b.n	8026f0c <uri_to_path2+0x11c>
    mg_url_decode(hm->uri.buf + url.len, hm->uri.len - url.len, path + n,
 8026e7e:	2300      	movs	r3, #0
 8026e80:	9300      	str	r3, [sp, #0]
 8026e82:	1a3b      	subs	r3, r7, r0
 8026e84:	182a      	adds	r2, r5, r0
 8026e86:	1b09      	subs	r1, r1, r4
 8026e88:	68b0      	ldr	r0, [r6, #8]
 8026e8a:	4420      	add	r0, r4
 8026e8c:	f7fe fc06 	bl	802569c <mg_url_decode>
 8026e90:	e7d8      	b.n	8026e44 <uri_to_path2+0x54>
    mg_http_reply(c, 400, "", "Invalid path");
 8026e92:	4b50      	ldr	r3, [pc, #320]	@ (8026fd4 <uri_to_path2+0x1e4>)
 8026e94:	4a4e      	ldr	r2, [pc, #312]	@ (8026fd0 <uri_to_path2+0x1e0>)
 8026e96:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8026e9a:	4648      	mov	r0, r9
 8026e9c:	f7fd fbe6 	bl	802466c <mg_http_reply>
    return -1;
 8026ea0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8026ea4:	e032      	b.n	8026f0c <uri_to_path2+0x11c>
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 8026ea6:	2200      	movs	r2, #0
 8026ea8:	54ea      	strb	r2, [r5, r3]
 8026eaa:	461c      	mov	r4, r3
 8026eac:	2c01      	cmp	r4, #1
 8026eae:	d905      	bls.n	8026ebc <uri_to_path2+0xcc>
 8026eb0:	1e63      	subs	r3, r4, #1
 8026eb2:	f815 c003 	ldrb.w	ip, [r5, r3]
 8026eb6:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 8026eba:	d0f4      	beq.n	8026ea6 <uri_to_path2+0xb6>
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 8026ebc:	f10d 0a10 	add.w	sl, sp, #16
 8026ec0:	4945      	ldr	r1, [pc, #276]	@ (8026fd8 <uri_to_path2+0x1e8>)
 8026ec2:	4650      	mov	r0, sl
 8026ec4:	f7fd fd5c 	bl	8024980 <mg_str_s>
 8026ec8:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8026ecc:	f106 0108 	add.w	r1, r6, #8
 8026ed0:	c903      	ldmia	r1, {r0, r1}
 8026ed2:	f7fd fe26 	bl	8024b22 <mg_strcmp>
                                               : fs->st(path, NULL, NULL);
 8026ed6:	b1f8      	cbz	r0, 8026f18 <uri_to_path2+0x128>
 8026ed8:	f8d8 3000 	ldr.w	r3, [r8]
 8026edc:	2200      	movs	r2, #0
 8026ede:	4611      	mov	r1, r2
 8026ee0:	4628      	mov	r0, r5
 8026ee2:	4798      	blx	r3
 8026ee4:	4682      	mov	sl, r0
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
 8026ee6:	4b3d      	ldr	r3, [pc, #244]	@ (8026fdc <uri_to_path2+0x1ec>)
 8026ee8:	681b      	ldr	r3, [r3, #0]
 8026eea:	2b03      	cmp	r3, #3
 8026eec:	dc17      	bgt.n	8026f1e <uri_to_path2+0x12e>
  if (flags == 0) {
 8026eee:	f1ba 0f00 	cmp.w	sl, #0
 8026ef2:	d00b      	beq.n	8026f0c <uri_to_path2+0x11c>
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8026ef4:	f01a 0104 	ands.w	r1, sl, #4
 8026ef8:	d007      	beq.n	8026f0a <uri_to_path2+0x11a>
 8026efa:	68f2      	ldr	r2, [r6, #12]
 8026efc:	b12a      	cbz	r2, 8026f0a <uri_to_path2+0x11a>
             hm->uri.buf[hm->uri.len - 1] != '/') {
 8026efe:	68b3      	ldr	r3, [r6, #8]
 8026f00:	1898      	adds	r0, r3, r2
 8026f02:	f810 0c01 	ldrb.w	r0, [r0, #-1]
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8026f06:	282f      	cmp	r0, #47	@ 0x2f
 8026f08:	d11b      	bne.n	8026f42 <uri_to_path2+0x152>
  } else if (flags & MG_FS_DIR) {
 8026f0a:	bb39      	cbnz	r1, 8026f5c <uri_to_path2+0x16c>
}
 8026f0c:	4650      	mov	r0, sl
 8026f0e:	b006      	add	sp, #24
 8026f10:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026f14:	b002      	add	sp, #8
 8026f16:	4770      	bx	lr
                                               : fs->st(path, NULL, NULL);
 8026f18:	f04f 0a04 	mov.w	sl, #4
 8026f1c:	e7e3      	b.n	8026ee6 <uri_to_path2+0xf6>
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
 8026f1e:	4b30      	ldr	r3, [pc, #192]	@ (8026fe0 <uri_to_path2+0x1f0>)
 8026f20:	f640 32c4 	movw	r2, #3012	@ 0xbc4
 8026f24:	492f      	ldr	r1, [pc, #188]	@ (8026fe4 <uri_to_path2+0x1f4>)
 8026f26:	2004      	movs	r0, #4
 8026f28:	f7ff fc9e 	bl	8026868 <mg_log_prefix>
 8026f2c:	f8cd a004 	str.w	sl, [sp, #4]
 8026f30:	9500      	str	r5, [sp, #0]
 8026f32:	68b3      	ldr	r3, [r6, #8]
 8026f34:	68f2      	ldr	r2, [r6, #12]
 8026f36:	f8d9 1034 	ldr.w	r1, [r9, #52]	@ 0x34
 8026f3a:	482b      	ldr	r0, [pc, #172]	@ (8026fe8 <uri_to_path2+0x1f8>)
 8026f3c:	f7fd fb42 	bl	80245c4 <mg_log>
 8026f40:	e7d5      	b.n	8026eee <uri_to_path2+0xfe>
    mg_printf(c,
 8026f42:	492a      	ldr	r1, [pc, #168]	@ (8026fec <uri_to_path2+0x1fc>)
 8026f44:	4648      	mov	r0, r9
 8026f46:	f7fd fb6b 	bl	8024620 <mg_printf>
    c->is_resp = 0;
 8026f4a:	f899 30ad 	ldrb.w	r3, [r9, #173]	@ 0xad
 8026f4e:	f36f 13c7 	bfc	r3, #7, #1
 8026f52:	f889 30ad 	strb.w	r3, [r9, #173]	@ 0xad
    flags = -1;
 8026f56:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8026f5a:	e7d7      	b.n	8026f0c <uri_to_path2+0x11c>
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 8026f5c:	192e      	adds	r6, r5, r4
 8026f5e:	1b3f      	subs	r7, r7, r4
 8026f60:	4a23      	ldr	r2, [pc, #140]	@ (8026ff0 <uri_to_path2+0x200>)
 8026f62:	4639      	mov	r1, r7
 8026f64:	4630      	mov	r0, r6
 8026f66:	f7fc fe83 	bl	8023c70 <mg_snprintf>
 8026f6a:	b130      	cbz	r0, 8026f7a <uri_to_path2+0x18a>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8026f6c:	f8d8 3000 	ldr.w	r3, [r8]
 8026f70:	2200      	movs	r2, #0
 8026f72:	4611      	mov	r1, r2
 8026f74:	4628      	mov	r0, r5
 8026f76:	4798      	blx	r3
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 8026f78:	bb08      	cbnz	r0, 8026fbe <uri_to_path2+0x1ce>
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 8026f7a:	4a1e      	ldr	r2, [pc, #120]	@ (8026ff4 <uri_to_path2+0x204>)
 8026f7c:	4639      	mov	r1, r7
 8026f7e:	4630      	mov	r0, r6
 8026f80:	f7fc fe76 	bl	8023c70 <mg_snprintf>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8026f84:	b130      	cbz	r0, 8026f94 <uri_to_path2+0x1a4>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 8026f86:	f8d8 3000 	ldr.w	r3, [r8]
 8026f8a:	2200      	movs	r2, #0
 8026f8c:	4611      	mov	r1, r2
 8026f8e:	4628      	mov	r0, r5
 8026f90:	4798      	blx	r3
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 8026f92:	b9b0      	cbnz	r0, 8026fc2 <uri_to_path2+0x1d2>
    } else if ((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX ".gz") >
 8026f94:	4a18      	ldr	r2, [pc, #96]	@ (8026ff8 <uri_to_path2+0x208>)
 8026f96:	4639      	mov	r1, r7
 8026f98:	4630      	mov	r0, r6
 8026f9a:	f7fc fe69 	bl	8023c70 <mg_snprintf>
 8026f9e:	b158      	cbz	r0, 8026fb8 <uri_to_path2+0x1c8>
                (tmp = fs->st(path, NULL, NULL)) !=
 8026fa0:	f8d8 3000 	ldr.w	r3, [r8]
 8026fa4:	2200      	movs	r2, #0
 8026fa6:	4611      	mov	r1, r2
 8026fa8:	4628      	mov	r0, r5
 8026faa:	4798      	blx	r3
                    0 &&
 8026fac:	b120      	cbz	r0, 8026fb8 <uri_to_path2+0x1c8>
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 8026fae:	340b      	adds	r4, #11
 8026fb0:	2200      	movs	r2, #0
 8026fb2:	552a      	strb	r2, [r5, r4]
      flags = tmp;
 8026fb4:	4682      	mov	sl, r0
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 8026fb6:	e7a9      	b.n	8026f0c <uri_to_path2+0x11c>
      path[n] = '\0';  // Remove appended index file name
 8026fb8:	2300      	movs	r3, #0
 8026fba:	7033      	strb	r3, [r6, #0]
 8026fbc:	e7a6      	b.n	8026f0c <uri_to_path2+0x11c>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8026fbe:	4682      	mov	sl, r0
 8026fc0:	e7a4      	b.n	8026f0c <uri_to_path2+0x11c>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 8026fc2:	4682      	mov	sl, r0
 8026fc4:	e7a2      	b.n	8026f0c <uri_to_path2+0x11c>
 8026fc6:	bf00      	nop
 8026fc8:	0803abd0 	.word	0x0803abd0
 8026fcc:	0803b58c 	.word	0x0803b58c
 8026fd0:	080373ac 	.word	0x080373ac
 8026fd4:	0803b5a0 	.word	0x0803b5a0
 8026fd8:	0803ac7c 	.word	0x0803ac7c
 8026fdc:	2000012c 	.word	0x2000012c
 8026fe0:	0803bebc 	.word	0x0803bebc
 8026fe4:	0803b480 	.word	0x0803b480
 8026fe8:	0803b5b0 	.word	0x0803b5b0
 8026fec:	0803b5c4 	.word	0x0803b5c4
 8026ff0:	0803b600 	.word	0x0803b600
 8026ff4:	0803b60c 	.word	0x0803b60c
 8026ff8:	0803b61c 	.word	0x0803b61c

08026ffc <uri_to_path>:
                       size_t path_size) {
 8026ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027000:	b096      	sub	sp, #88	@ 0x58
 8027002:	4606      	mov	r6, r0
 8027004:	460d      	mov	r5, r1
 8027006:	461f      	mov	r7, r3
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8027008:	f8d2 8014 	ldr.w	r8, [r2, #20]
 802700c:	f1b8 0f00 	cmp.w	r8, #0
 8027010:	d069      	beq.n	80270e6 <uri_to_path+0xea>
  struct mg_str k, v, part, s = mg_str(opts->root_dir), u = {NULL, 0}, p = u;
 8027012:	6811      	ldr	r1, [r2, #0]
 8027014:	a80c      	add	r0, sp, #48	@ 0x30
 8027016:	f7fd fcb3 	bl	8024980 <mg_str_s>
 802701a:	2300      	movs	r3, #0
 802701c:	930a      	str	r3, [sp, #40]	@ 0x28
 802701e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8027020:	ab08      	add	r3, sp, #32
 8027022:	aa0a      	add	r2, sp, #40	@ 0x28
 8027024:	e892 0003 	ldmia.w	r2, {r0, r1}
 8027028:	e883 0003 	stmia.w	r3, {r0, r1}
  while (mg_span(s, &part, &s, ',')) {
 802702c:	ab0c      	add	r3, sp, #48	@ 0x30
 802702e:	222c      	movs	r2, #44	@ 0x2c
 8027030:	9200      	str	r2, [sp, #0]
 8027032:	aa0e      	add	r2, sp, #56	@ 0x38
 8027034:	e893 0003 	ldmia.w	r3, {r0, r1}
 8027038:	f7fd ff5f 	bl	8024efa <mg_span>
 802703c:	2800      	cmp	r0, #0
 802703e:	d055      	beq.n	80270ec <uri_to_path+0xf0>
    if (!mg_span(part, &k, &v, '=')) k = part, v = mg_str_n(NULL, 0);
 8027040:	233d      	movs	r3, #61	@ 0x3d
 8027042:	9300      	str	r3, [sp, #0]
 8027044:	ab10      	add	r3, sp, #64	@ 0x40
 8027046:	aa12      	add	r2, sp, #72	@ 0x48
 8027048:	ac0e      	add	r4, sp, #56	@ 0x38
 802704a:	e894 0003 	ldmia.w	r4, {r0, r1}
 802704e:	f7fd ff54 	bl	8024efa <mg_span>
 8027052:	b978      	cbnz	r0, 8027074 <uri_to_path+0x78>
 8027054:	ab12      	add	r3, sp, #72	@ 0x48
 8027056:	e9d4 0100 	ldrd	r0, r1, [r4]
 802705a:	e883 0003 	stmia.w	r3, {r0, r1}
 802705e:	ac06      	add	r4, sp, #24
 8027060:	2200      	movs	r2, #0
 8027062:	4611      	mov	r1, r2
 8027064:	4620      	mov	r0, r4
 8027066:	f7fd fc97 	bl	8024998 <mg_str_n>
 802706a:	ab10      	add	r3, sp, #64	@ 0x40
 802706c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8027070:	e883 0003 	stmia.w	r3, {r0, r1}
    if (v.len == 0) v = k, k = mg_str("/"), u = k, p = v;
 8027074:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8027076:	b9c3      	cbnz	r3, 80270aa <uri_to_path+0xae>
 8027078:	f10d 0940 	add.w	r9, sp, #64	@ 0x40
 802707c:	ac12      	add	r4, sp, #72	@ 0x48
 802707e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8027082:	e889 0003 	stmia.w	r9, {r0, r1}
 8027086:	f10d 0a18 	add.w	sl, sp, #24
 802708a:	4922      	ldr	r1, [pc, #136]	@ (8027114 <uri_to_path+0x118>)
 802708c:	4650      	mov	r0, sl
 802708e:	f7fd fc77 	bl	8024980 <mg_str_s>
 8027092:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8027096:	e884 0003 	stmia.w	r4, {r0, r1}
 802709a:	ab0a      	add	r3, sp, #40	@ 0x28
 802709c:	e883 0003 	stmia.w	r3, {r0, r1}
 80270a0:	ab08      	add	r3, sp, #32
 80270a2:	e899 0003 	ldmia.w	r9, {r0, r1}
 80270a6:	e883 0003 	stmia.w	r3, {r0, r1}
    if (hm->uri.len < k.len) continue;
 80270aa:	68eb      	ldr	r3, [r5, #12]
 80270ac:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80270ae:	4293      	cmp	r3, r2
 80270b0:	d3bc      	bcc.n	802702c <uri_to_path+0x30>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 80270b2:	ac14      	add	r4, sp, #80	@ 0x50
 80270b4:	68a9      	ldr	r1, [r5, #8]
 80270b6:	4620      	mov	r0, r4
 80270b8:	f7fd fc6e 	bl	8024998 <mg_str_n>
 80270bc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80270c0:	a912      	add	r1, sp, #72	@ 0x48
 80270c2:	c903      	ldmia	r1, {r0, r1}
 80270c4:	f7fd fd2d 	bl	8024b22 <mg_strcmp>
 80270c8:	2800      	cmp	r0, #0
 80270ca:	d1af      	bne.n	802702c <uri_to_path+0x30>
    u = k, p = v;
 80270cc:	ab0a      	add	r3, sp, #40	@ 0x28
 80270ce:	aa12      	add	r2, sp, #72	@ 0x48
 80270d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80270d4:	e883 0003 	stmia.w	r3, {r0, r1}
 80270d8:	ab08      	add	r3, sp, #32
 80270da:	aa10      	add	r2, sp, #64	@ 0x40
 80270dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80270e0:	e883 0003 	stmia.w	r3, {r0, r1}
 80270e4:	e7a2      	b.n	802702c <uri_to_path+0x30>
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 80270e6:	f8df 8030 	ldr.w	r8, [pc, #48]	@ 8027118 <uri_to_path+0x11c>
 80270ea:	e792      	b.n	8027012 <uri_to_path+0x16>
  return uri_to_path2(c, hm, fs, u, p, path, path_size);
 80270ec:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80270ee:	9304      	str	r3, [sp, #16]
 80270f0:	9703      	str	r7, [sp, #12]
 80270f2:	ab01      	add	r3, sp, #4
 80270f4:	aa08      	add	r2, sp, #32
 80270f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80270fa:	e883 0003 	stmia.w	r3, {r0, r1}
 80270fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8027100:	9300      	str	r3, [sp, #0]
 8027102:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027104:	4642      	mov	r2, r8
 8027106:	4629      	mov	r1, r5
 8027108:	4630      	mov	r0, r6
 802710a:	f7ff fe71 	bl	8026df0 <uri_to_path2>
}
 802710e:	b016      	add	sp, #88	@ 0x58
 8027110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027114:	0803ac7c 	.word	0x0803ac7c
 8027118:	20000130 	.word	0x20000130

0802711c <mg_http_serve_dir>:
                       const struct mg_http_serve_opts *opts) {
 802711c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8027120:	b0a7      	sub	sp, #156	@ 0x9c
 8027122:	4607      	mov	r7, r0
 8027124:	460e      	mov	r6, r1
 8027126:	4615      	mov	r5, r2
  const char *sp = opts->ssi_pattern;
 8027128:	f8d2 8004 	ldr.w	r8, [r2, #4]
  int flags = uri_to_path(c, hm, opts, path, sizeof(path));
 802712c:	2380      	movs	r3, #128	@ 0x80
 802712e:	9300      	str	r3, [sp, #0]
 8027130:	ab02      	add	r3, sp, #8
 8027132:	f7ff ff63 	bl	8026ffc <uri_to_path>
  if (flags < 0) {
 8027136:	2800      	cmp	r0, #0
 8027138:	db20      	blt.n	802717c <mg_http_serve_dir+0x60>
  } else if (flags & MG_FS_DIR) {
 802713a:	f010 0f04 	tst.w	r0, #4
 802713e:	d120      	bne.n	8027182 <mg_http_serve_dir+0x66>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
 8027140:	b1b0      	cbz	r0, 8027170 <mg_http_serve_dir+0x54>
 8027142:	f1b8 0f00 	cmp.w	r8, #0
 8027146:	d013      	beq.n	8027170 <mg_http_serve_dir+0x54>
 8027148:	ac22      	add	r4, sp, #136	@ 0x88
 802714a:	a902      	add	r1, sp, #8
 802714c:	4620      	mov	r0, r4
 802714e:	f7fd fc17 	bl	8024980 <mg_str_s>
 8027152:	f10d 0990 	add.w	r9, sp, #144	@ 0x90
 8027156:	4641      	mov	r1, r8
 8027158:	4648      	mov	r0, r9
 802715a:	f7fd fc11 	bl	8024980 <mg_str_s>
 802715e:	2300      	movs	r3, #0
 8027160:	9300      	str	r3, [sp, #0]
 8027162:	e899 000c 	ldmia.w	r9, {r2, r3}
 8027166:	e894 0003 	ldmia.w	r4, {r0, r1}
 802716a:	f7fd fe2b 	bl	8024dc4 <mg_match>
 802716e:	b978      	cbnz	r0, 8027190 <mg_http_serve_dir+0x74>
    mg_http_serve_file(c, hm, path, opts);
 8027170:	462b      	mov	r3, r5
 8027172:	aa02      	add	r2, sp, #8
 8027174:	4631      	mov	r1, r6
 8027176:	4638      	mov	r0, r7
 8027178:	f7fd ffe0 	bl	802513c <mg_http_serve_file>
}
 802717c:	b027      	add	sp, #156	@ 0x9c
 802717e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    listdir(c, hm, opts, path);
 8027182:	ab02      	add	r3, sp, #8
 8027184:	462a      	mov	r2, r5
 8027186:	4631      	mov	r1, r6
 8027188:	4638      	mov	r0, r7
 802718a:	f7fe fbb3 	bl	80258f4 <listdir>
 802718e:	e7f5      	b.n	802717c <mg_http_serve_dir+0x60>
    mg_http_serve_ssi(c, opts->root_dir, path);
 8027190:	aa02      	add	r2, sp, #8
 8027192:	6829      	ldr	r1, [r5, #0]
 8027194:	4638      	mov	r0, r7
 8027196:	f7fd fbe9 	bl	802496c <mg_http_serve_ssi>
 802719a:	e7ef      	b.n	802717c <mg_http_serve_dir+0x60>

0802719c <printdirentry>:
static void printdirentry(const char *name, void *userdata) {
 802719c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802719e:	b0c3      	sub	sp, #268	@ 0x10c
 80271a0:	4605      	mov	r5, r0
 80271a2:	460c      	mov	r4, r1
  struct mg_fs *fs = d->opts->fs == NULL ? &mg_fs_posix : d->opts->fs;
 80271a4:	688b      	ldr	r3, [r1, #8]
 80271a6:	695e      	ldr	r6, [r3, #20]
 80271a8:	b1b6      	cbz	r6, 80271d8 <printdirentry+0x3c>
  size_t size = 0;
 80271aa:	2300      	movs	r3, #0
 80271ac:	9341      	str	r3, [sp, #260]	@ 0x104
  time_t t = 0;
 80271ae:	2200      	movs	r2, #0
 80271b0:	2300      	movs	r3, #0
 80271b2:	e9cd 233e 	strd	r2, r3, [sp, #248]	@ 0xf8
  if (mg_snprintf(path, sizeof(path), "%s%c%s", d->dir, '/', name) >
 80271b6:	9501      	str	r5, [sp, #4]
 80271b8:	232f      	movs	r3, #47	@ 0x2f
 80271ba:	9300      	str	r3, [sp, #0]
 80271bc:	68e3      	ldr	r3, [r4, #12]
 80271be:	4a3c      	ldr	r2, [pc, #240]	@ (80272b0 <printdirentry+0x114>)
 80271c0:	2180      	movs	r1, #128	@ 0x80
 80271c2:	a81e      	add	r0, sp, #120	@ 0x78
 80271c4:	f7fc fd54 	bl	8023c70 <mg_snprintf>
 80271c8:	2880      	cmp	r0, #128	@ 0x80
 80271ca:	d913      	bls.n	80271f4 <printdirentry+0x58>
    MG_ERROR(("%s truncated", name));
 80271cc:	4b39      	ldr	r3, [pc, #228]	@ (80272b4 <printdirentry+0x118>)
 80271ce:	681b      	ldr	r3, [r3, #0]
 80271d0:	2b00      	cmp	r3, #0
 80271d2:	dc03      	bgt.n	80271dc <printdirentry+0x40>
}
 80271d4:	b043      	add	sp, #268	@ 0x10c
 80271d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  struct mg_fs *fs = d->opts->fs == NULL ? &mg_fs_posix : d->opts->fs;
 80271d8:	4e37      	ldr	r6, [pc, #220]	@ (80272b8 <printdirentry+0x11c>)
 80271da:	e7e6      	b.n	80271aa <printdirentry+0xe>
    MG_ERROR(("%s truncated", name));
 80271dc:	4b37      	ldr	r3, [pc, #220]	@ (80272bc <printdirentry+0x120>)
 80271de:	f640 3248 	movw	r2, #2888	@ 0xb48
 80271e2:	4937      	ldr	r1, [pc, #220]	@ (80272c0 <printdirentry+0x124>)
 80271e4:	2001      	movs	r0, #1
 80271e6:	f7ff fb3f 	bl	8026868 <mg_log_prefix>
 80271ea:	4629      	mov	r1, r5
 80271ec:	4835      	ldr	r0, [pc, #212]	@ (80272c4 <printdirentry+0x128>)
 80271ee:	f7fd f9e9 	bl	80245c4 <mg_log>
 80271f2:	e7ef      	b.n	80271d4 <printdirentry+0x38>
  } else if ((flags = fs->st(path, &size, &t)) == 0) {
 80271f4:	6833      	ldr	r3, [r6, #0]
 80271f6:	aa3e      	add	r2, sp, #248	@ 0xf8
 80271f8:	a941      	add	r1, sp, #260	@ 0x104
 80271fa:	a81e      	add	r0, sp, #120	@ 0x78
 80271fc:	4798      	blx	r3
 80271fe:	b9a8      	cbnz	r0, 802722c <printdirentry+0x90>
    MG_ERROR(("%lu stat(%s): %d", d->c->id, path, errno));
 8027200:	4b2c      	ldr	r3, [pc, #176]	@ (80272b4 <printdirentry+0x118>)
 8027202:	681b      	ldr	r3, [r3, #0]
 8027204:	2b00      	cmp	r3, #0
 8027206:	dde5      	ble.n	80271d4 <printdirentry+0x38>
 8027208:	4b2c      	ldr	r3, [pc, #176]	@ (80272bc <printdirentry+0x120>)
 802720a:	f640 324a 	movw	r2, #2890	@ 0xb4a
 802720e:	492c      	ldr	r1, [pc, #176]	@ (80272c0 <printdirentry+0x124>)
 8027210:	2001      	movs	r0, #1
 8027212:	f7ff fb29 	bl	8026868 <mg_log_prefix>
 8027216:	6823      	ldr	r3, [r4, #0]
 8027218:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 802721a:	f007 f925 	bl	802e468 <__errno>
 802721e:	6803      	ldr	r3, [r0, #0]
 8027220:	aa1e      	add	r2, sp, #120	@ 0x78
 8027222:	4621      	mov	r1, r4
 8027224:	4828      	ldr	r0, [pc, #160]	@ (80272c8 <printdirentry+0x12c>)
 8027226:	f7fd f9cd 	bl	80245c4 <mg_log>
 802722a:	e7d3      	b.n	80271d4 <printdirentry+0x38>
    const char *slash = flags & MG_FS_DIR ? "/" : "";
 802722c:	f010 0604 	ands.w	r6, r0, #4
 8027230:	d02d      	beq.n	802728e <printdirentry+0xf2>
 8027232:	4f26      	ldr	r7, [pc, #152]	@ (80272cc <printdirentry+0x130>)
    if (flags & MG_FS_DIR) {
 8027234:	2e00      	cmp	r6, #0
 8027236:	d02c      	beq.n	8027292 <printdirentry+0xf6>
      mg_snprintf(sz, sizeof(sz), "%s", "[DIR]");
 8027238:	4b25      	ldr	r3, [pc, #148]	@ (80272d0 <printdirentry+0x134>)
 802723a:	4a26      	ldr	r2, [pc, #152]	@ (80272d4 <printdirentry+0x138>)
 802723c:	2128      	movs	r1, #40	@ 0x28
 802723e:	a814      	add	r0, sp, #80	@ 0x50
 8027240:	f7fc fd16 	bl	8023c70 <mg_snprintf>
    mg_snprintf(mod, sizeof(mod), "%lu", (unsigned long) t);
 8027244:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 8027246:	4a24      	ldr	r2, [pc, #144]	@ (80272d8 <printdirentry+0x13c>)
 8027248:	2128      	movs	r1, #40	@ 0x28
 802724a:	eb0d 0001 	add.w	r0, sp, r1
 802724e:	f7fc fd0f 	bl	8023c70 <mg_snprintf>
    n = (int) mg_url_encode(name, strlen(name), path, sizeof(path));
 8027252:	4628      	mov	r0, r5
 8027254:	f7e9 f824 	bl	80102a0 <strlen>
 8027258:	4601      	mov	r1, r0
 802725a:	2380      	movs	r3, #128	@ 0x80
 802725c:	aa1e      	add	r2, sp, #120	@ 0x78
 802725e:	4628      	mov	r0, r5
 8027260:	f7fd fa58 	bl	8024714 <mg_url_encode>
 8027264:	4602      	mov	r2, r0
    mg_printf(d->c,
 8027266:	6820      	ldr	r0, [r4, #0]
 8027268:	993e      	ldr	r1, [sp, #248]	@ 0xf8
 802726a:	b9e6      	cbnz	r6, 80272a6 <printdirentry+0x10a>
 802726c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 802726e:	2400      	movs	r4, #0
 8027270:	ae14      	add	r6, sp, #80	@ 0x50
 8027272:	9608      	str	r6, [sp, #32]
 8027274:	9306      	str	r3, [sp, #24]
 8027276:	9407      	str	r4, [sp, #28]
 8027278:	ab0a      	add	r3, sp, #40	@ 0x28
 802727a:	9304      	str	r3, [sp, #16]
 802727c:	9103      	str	r1, [sp, #12]
 802727e:	9702      	str	r7, [sp, #8]
 8027280:	9501      	str	r5, [sp, #4]
 8027282:	9700      	str	r7, [sp, #0]
 8027284:	ab1e      	add	r3, sp, #120	@ 0x78
 8027286:	4915      	ldr	r1, [pc, #84]	@ (80272dc <printdirentry+0x140>)
 8027288:	f7fd f9ca 	bl	8024620 <mg_printf>
}
 802728c:	e7a2      	b.n	80271d4 <printdirentry+0x38>
    const char *slash = flags & MG_FS_DIR ? "/" : "";
 802728e:	4f14      	ldr	r7, [pc, #80]	@ (80272e0 <printdirentry+0x144>)
 8027290:	e7d0      	b.n	8027234 <printdirentry+0x98>
      mg_snprintf(sz, sizeof(sz), "%lld", (uint64_t) size);
 8027292:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8027294:	9300      	str	r3, [sp, #0]
 8027296:	2300      	movs	r3, #0
 8027298:	9301      	str	r3, [sp, #4]
 802729a:	4a12      	ldr	r2, [pc, #72]	@ (80272e4 <printdirentry+0x148>)
 802729c:	2128      	movs	r1, #40	@ 0x28
 802729e:	a814      	add	r0, sp, #80	@ 0x50
 80272a0:	f7fc fce6 	bl	8023c70 <mg_snprintf>
 80272a4:	e7ce      	b.n	8027244 <printdirentry+0xa8>
    mg_printf(d->c,
 80272a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80272aa:	461c      	mov	r4, r3
 80272ac:	e7e0      	b.n	8027270 <printdirentry+0xd4>
 80272ae:	bf00      	nop
 80272b0:	0803b62c 	.word	0x0803b62c
 80272b4:	2000012c 	.word	0x2000012c
 80272b8:	20000130 	.word	0x20000130
 80272bc:	0803beac 	.word	0x0803beac
 80272c0:	0803b480 	.word	0x0803b480
 80272c4:	0803b634 	.word	0x0803b634
 80272c8:	0803b644 	.word	0x0803b644
 80272cc:	0803ac7c 	.word	0x0803ac7c
 80272d0:	0803b658 	.word	0x0803b658
 80272d4:	0803b798 	.word	0x0803b798
 80272d8:	0803ba48 	.word	0x0803ba48
 80272dc:	0803b668 	.word	0x0803b668
 80272e0:	080373ac 	.word	0x080373ac
 80272e4:	0803b660 	.word	0x0803b660

080272e8 <mg_http_upload>:
                    struct mg_fs *fs, const char *dir, size_t max_size) {
 80272e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80272ec:	b0ca      	sub	sp, #296	@ 0x128
 80272ee:	4607      	mov	r7, r0
 80272f0:	460d      	mov	r5, r1
 80272f2:	4616      	mov	r6, r2
 80272f4:	4698      	mov	r8, r3
  char buf[20] = "0", file[MG_PATH_MAX], path[MG_PATH_MAX];
 80272f6:	2330      	movs	r3, #48	@ 0x30
 80272f8:	9343      	str	r3, [sp, #268]	@ 0x10c
 80272fa:	2400      	movs	r4, #0
 80272fc:	9444      	str	r4, [sp, #272]	@ 0x110
 80272fe:	9445      	str	r4, [sp, #276]	@ 0x114
 8027300:	9446      	str	r4, [sp, #280]	@ 0x118
 8027302:	9447      	str	r4, [sp, #284]	@ 0x11c
  mg_http_get_var(&hm->query, "offset", buf, sizeof(buf));
 8027304:	f101 0a10 	add.w	sl, r1, #16
 8027308:	2314      	movs	r3, #20
 802730a:	aa43      	add	r2, sp, #268	@ 0x10c
 802730c:	4964      	ldr	r1, [pc, #400]	@ (80274a0 <mg_http_upload+0x1b8>)
 802730e:	4650      	mov	r0, sl
 8027310:	f7fe fa23 	bl	802575a <mg_http_get_var>
  mg_http_get_var(&hm->query, "file", file, sizeof(file));
 8027314:	f10d 098c 	add.w	r9, sp, #140	@ 0x8c
 8027318:	2380      	movs	r3, #128	@ 0x80
 802731a:	464a      	mov	r2, r9
 802731c:	4961      	ldr	r1, [pc, #388]	@ (80274a4 <mg_http_upload+0x1bc>)
 802731e:	4650      	mov	r0, sl
 8027320:	f7fe fa1b 	bl	802575a <mg_http_get_var>
  offset = strtol(buf, NULL, 0);
 8027324:	4622      	mov	r2, r4
 8027326:	4621      	mov	r1, r4
 8027328:	a843      	add	r0, sp, #268	@ 0x10c
 802732a:	f005 fa1f 	bl	802c76c <strtol>
 802732e:	4604      	mov	r4, r0
  mg_snprintf(path, sizeof(path), "%s%c%s", dir, MG_DIRSEP, file);
 8027330:	f8cd 9004 	str.w	r9, [sp, #4]
 8027334:	232f      	movs	r3, #47	@ 0x2f
 8027336:	9300      	str	r3, [sp, #0]
 8027338:	4643      	mov	r3, r8
 802733a:	4a5b      	ldr	r2, [pc, #364]	@ (80274a8 <mg_http_upload+0x1c0>)
 802733c:	2180      	movs	r1, #128	@ 0x80
 802733e:	a803      	add	r0, sp, #12
 8027340:	f7fc fc96 	bl	8023c70 <mg_snprintf>
  if (hm->body.len == 0) {
 8027344:	f8d5 8204 	ldr.w	r8, [r5, #516]	@ 0x204
 8027348:	f1b8 0f00 	cmp.w	r8, #0
 802734c:	d047      	beq.n	80273de <mg_http_upload+0xf6>
  } else if (file[0] == '\0') {
 802734e:	f89d 308c 	ldrb.w	r3, [sp, #140]	@ 0x8c
 8027352:	2b00      	cmp	r3, #0
 8027354:	d04c      	beq.n	80273f0 <mg_http_upload+0x108>
  } else if (mg_path_is_sane(mg_str(file)) == false) {
 8027356:	f50d 7990 	add.w	r9, sp, #288	@ 0x120
 802735a:	a923      	add	r1, sp, #140	@ 0x8c
 802735c:	4648      	mov	r0, r9
 802735e:	f7fd fb0f 	bl	8024980 <mg_str_s>
 8027362:	e899 0003 	ldmia.w	r9, {r0, r1}
 8027366:	f7ff fa54 	bl	8026812 <mg_path_is_sane>
 802736a:	2800      	cmp	r0, #0
 802736c:	d04a      	beq.n	8027404 <mg_http_upload+0x11c>
  } else if (offset < 0) {
 802736e:	2c00      	cmp	r4, #0
 8027370:	db54      	blt.n	802741c <mg_http_upload+0x134>
  } else if ((size_t) offset + hm->body.len > max_size) {
 8027372:	44a0      	add	r8, r4
 8027374:	9b52      	ldr	r3, [sp, #328]	@ 0x148
 8027376:	4598      	cmp	r8, r3
 8027378:	d85a      	bhi.n	8027430 <mg_http_upload+0x148>
    size_t current_size = 0;
 802737a:	2300      	movs	r3, #0
 802737c:	9302      	str	r3, [sp, #8]
    MG_DEBUG(("%s -> %lu bytes @ %ld", path, hm->body.len, offset));
 802737e:	4b4b      	ldr	r3, [pc, #300]	@ (80274ac <mg_http_upload+0x1c4>)
 8027380:	681b      	ldr	r3, [r3, #0]
 8027382:	2b02      	cmp	r3, #2
 8027384:	dc61      	bgt.n	802744a <mg_http_upload+0x162>
    if (offset == 0) fs->rm(path);  // If offset if 0, truncate file
 8027386:	b914      	cbnz	r4, 802738e <mg_http_upload+0xa6>
 8027388:	6a33      	ldr	r3, [r6, #32]
 802738a:	a803      	add	r0, sp, #12
 802738c:	4798      	blx	r3
    fs->st(path, &current_size, NULL);
 802738e:	6833      	ldr	r3, [r6, #0]
 8027390:	2200      	movs	r2, #0
 8027392:	a902      	add	r1, sp, #8
 8027394:	a803      	add	r0, sp, #12
 8027396:	4798      	blx	r3
    if (offset > 0 && current_size != (size_t) offset) {
 8027398:	2c00      	cmp	r4, #0
 802739a:	dd02      	ble.n	80273a2 <mg_http_upload+0xba>
 802739c:	9b02      	ldr	r3, [sp, #8]
 802739e:	429c      	cmp	r4, r3
 80273a0:	d162      	bne.n	8027468 <mg_http_upload+0x180>
    } else if ((fd = mg_fs_open(fs, path, MG_FS_WRITE)) == NULL) {
 80273a2:	2202      	movs	r2, #2
 80273a4:	a903      	add	r1, sp, #12
 80273a6:	4630      	mov	r0, r6
 80273a8:	f7fb fed2 	bl	8023150 <mg_fs_open>
 80273ac:	4680      	mov	r8, r0
 80273ae:	2800      	cmp	r0, #0
 80273b0:	d066      	beq.n	8027480 <mg_http_upload+0x198>
      res = offset + (long) fs->wr(fd->fd, hm->body.buf, hm->body.len);
 80273b2:	6973      	ldr	r3, [r6, #20]
 80273b4:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 80273b8:	f8d5 1200 	ldr.w	r1, [r5, #512]	@ 0x200
 80273bc:	6800      	ldr	r0, [r0, #0]
 80273be:	4798      	blx	r3
 80273c0:	4404      	add	r4, r0
      mg_fs_close(fd);
 80273c2:	4640      	mov	r0, r8
 80273c4:	f7fb fedd 	bl	8023182 <mg_fs_close>
      mg_http_reply(c, 200, headers_tmp, "%ld", res);  //TODO DELETE HEADERS!!!!!
 80273c8:	9400      	str	r4, [sp, #0]
 80273ca:	4b39      	ldr	r3, [pc, #228]	@ (80274b0 <mg_http_upload+0x1c8>)
 80273cc:	4a39      	ldr	r2, [pc, #228]	@ (80274b4 <mg_http_upload+0x1cc>)
 80273ce:	21c8      	movs	r1, #200	@ 0xc8
 80273d0:	4638      	mov	r0, r7
 80273d2:	f7fd f94b 	bl	802466c <mg_http_reply>
}
 80273d6:	4620      	mov	r0, r4
 80273d8:	b04a      	add	sp, #296	@ 0x128
 80273da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    mg_http_reply(c, 200, headers_tmp, "%ld", res);  // Nothing to write  //TODO DELETE HEADERS!!!!!
 80273de:	2400      	movs	r4, #0
 80273e0:	9400      	str	r4, [sp, #0]
 80273e2:	4b33      	ldr	r3, [pc, #204]	@ (80274b0 <mg_http_upload+0x1c8>)
 80273e4:	4a33      	ldr	r2, [pc, #204]	@ (80274b4 <mg_http_upload+0x1cc>)
 80273e6:	21c8      	movs	r1, #200	@ 0xc8
 80273e8:	4638      	mov	r0, r7
 80273ea:	f7fd f93f 	bl	802466c <mg_http_reply>
 80273ee:	e7f2      	b.n	80273d6 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "file required");
 80273f0:	4b31      	ldr	r3, [pc, #196]	@ (80274b8 <mg_http_upload+0x1d0>)
 80273f2:	4a32      	ldr	r2, [pc, #200]	@ (80274bc <mg_http_upload+0x1d4>)
 80273f4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80273f8:	4638      	mov	r0, r7
 80273fa:	f7fd f937 	bl	802466c <mg_http_reply>
    res = -1;
 80273fe:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8027402:	e7e8      	b.n	80273d6 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "%s: invalid file", file);
 8027404:	ab23      	add	r3, sp, #140	@ 0x8c
 8027406:	9300      	str	r3, [sp, #0]
 8027408:	4b2d      	ldr	r3, [pc, #180]	@ (80274c0 <mg_http_upload+0x1d8>)
 802740a:	4a2c      	ldr	r2, [pc, #176]	@ (80274bc <mg_http_upload+0x1d4>)
 802740c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8027410:	4638      	mov	r0, r7
 8027412:	f7fd f92b 	bl	802466c <mg_http_reply>
    res = -2;
 8027416:	f06f 0401 	mvn.w	r4, #1
 802741a:	e7dc      	b.n	80273d6 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "offset required");
 802741c:	4b29      	ldr	r3, [pc, #164]	@ (80274c4 <mg_http_upload+0x1dc>)
 802741e:	4a27      	ldr	r2, [pc, #156]	@ (80274bc <mg_http_upload+0x1d4>)
 8027420:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8027424:	4638      	mov	r0, r7
 8027426:	f7fd f921 	bl	802466c <mg_http_reply>
    res = -3;
 802742a:	f06f 0402 	mvn.w	r4, #2
 802742e:	e7d2      	b.n	80273d6 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "%s: over max size of %lu", path,
 8027430:	9301      	str	r3, [sp, #4]
 8027432:	ab03      	add	r3, sp, #12
 8027434:	9300      	str	r3, [sp, #0]
 8027436:	4b24      	ldr	r3, [pc, #144]	@ (80274c8 <mg_http_upload+0x1e0>)
 8027438:	4a20      	ldr	r2, [pc, #128]	@ (80274bc <mg_http_upload+0x1d4>)
 802743a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 802743e:	4638      	mov	r0, r7
 8027440:	f7fd f914 	bl	802466c <mg_http_reply>
    res = -4;
 8027444:	f06f 0403 	mvn.w	r4, #3
 8027448:	e7c5      	b.n	80273d6 <mg_http_upload+0xee>
    MG_DEBUG(("%s -> %lu bytes @ %ld", path, hm->body.len, offset));
 802744a:	4b20      	ldr	r3, [pc, #128]	@ (80274cc <mg_http_upload+0x1e4>)
 802744c:	f640 426a 	movw	r2, #3178	@ 0xc6a
 8027450:	491f      	ldr	r1, [pc, #124]	@ (80274d0 <mg_http_upload+0x1e8>)
 8027452:	2003      	movs	r0, #3
 8027454:	f7ff fa08 	bl	8026868 <mg_log_prefix>
 8027458:	4623      	mov	r3, r4
 802745a:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 802745e:	a903      	add	r1, sp, #12
 8027460:	481c      	ldr	r0, [pc, #112]	@ (80274d4 <mg_http_upload+0x1ec>)
 8027462:	f7fd f8af 	bl	80245c4 <mg_log>
 8027466:	e78e      	b.n	8027386 <mg_http_upload+0x9e>
      mg_http_reply(c, 400, "", "%s: offset mismatch", path);
 8027468:	ab03      	add	r3, sp, #12
 802746a:	9300      	str	r3, [sp, #0]
 802746c:	4b1a      	ldr	r3, [pc, #104]	@ (80274d8 <mg_http_upload+0x1f0>)
 802746e:	4a13      	ldr	r2, [pc, #76]	@ (80274bc <mg_http_upload+0x1d4>)
 8027470:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8027474:	4638      	mov	r0, r7
 8027476:	f7fd f8f9 	bl	802466c <mg_http_reply>
      res = -5;
 802747a:	f06f 0404 	mvn.w	r4, #4
 802747e:	e7aa      	b.n	80273d6 <mg_http_upload+0xee>
      mg_http_reply(c, 400, "", "open(%s): %d", path, errno);
 8027480:	f006 fff2 	bl	802e468 <__errno>
 8027484:	6803      	ldr	r3, [r0, #0]
 8027486:	9301      	str	r3, [sp, #4]
 8027488:	ab03      	add	r3, sp, #12
 802748a:	9300      	str	r3, [sp, #0]
 802748c:	4b13      	ldr	r3, [pc, #76]	@ (80274dc <mg_http_upload+0x1f4>)
 802748e:	4a0b      	ldr	r2, [pc, #44]	@ (80274bc <mg_http_upload+0x1d4>)
 8027490:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8027494:	4638      	mov	r0, r7
 8027496:	f7fd f8e9 	bl	802466c <mg_http_reply>
      res = -6;
 802749a:	f06f 0405 	mvn.w	r4, #5
 802749e:	e79a      	b.n	80273d6 <mg_http_upload+0xee>
 80274a0:	0803b6c0 	.word	0x0803b6c0
 80274a4:	0803b6e8 	.word	0x0803b6e8
 80274a8:	0803b62c 	.word	0x0803b62c
 80274ac:	2000012c 	.word	0x2000012c
 80274b0:	0803b6c8 	.word	0x0803b6c8
 80274b4:	08036d30 	.word	0x08036d30
 80274b8:	0803b6cc 	.word	0x0803b6cc
 80274bc:	080373ac 	.word	0x080373ac
 80274c0:	0803b6dc 	.word	0x0803b6dc
 80274c4:	0803b6f0 	.word	0x0803b6f0
 80274c8:	0803b700 	.word	0x0803b700
 80274cc:	0803be9c 	.word	0x0803be9c
 80274d0:	0803b480 	.word	0x0803b480
 80274d4:	0803b71c 	.word	0x0803b71c
 80274d8:	0803b734 	.word	0x0803b734
 80274dc:	0803b748 	.word	0x0803b748

080274e0 <mg_iobuf_resize>:
int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {
 80274e0:	b570      	push	{r4, r5, r6, lr}
 80274e2:	b082      	sub	sp, #8
 80274e4:	4604      	mov	r4, r0
 80274e6:	4608      	mov	r0, r1
  new_size = roundup(new_size, io->align);
 80274e8:	68e1      	ldr	r1, [r4, #12]
 80274ea:	f7f9 fbd1 	bl	8020c90 <roundup>
  if (new_size == 0) {
 80274ee:	b130      	cbz	r0, 80274fe <mg_iobuf_resize+0x1e>
 80274f0:	4605      	mov	r5, r0
  } else if (new_size != io->size) {
 80274f2:	6863      	ldr	r3, [r4, #4]
 80274f4:	4283      	cmp	r3, r0
 80274f6:	d10f      	bne.n	8027518 <mg_iobuf_resize+0x38>
  int ok = 1;
 80274f8:	2001      	movs	r0, #1
}
 80274fa:	b002      	add	sp, #8
 80274fc:	bd70      	pop	{r4, r5, r6, pc}
    mg_bzero(io->buf, io->size);
 80274fe:	6861      	ldr	r1, [r4, #4]
 8027500:	6820      	ldr	r0, [r4, #0]
 8027502:	f7fe fd6f 	bl	8025fe4 <mg_bzero>
    free(io->buf);
 8027506:	6820      	ldr	r0, [r4, #0]
 8027508:	f7f3 fde0 	bl	801b0cc <vPortFree>
    io->buf = NULL;
 802750c:	2300      	movs	r3, #0
 802750e:	6023      	str	r3, [r4, #0]
    io->len = io->size = 0;
 8027510:	6063      	str	r3, [r4, #4]
 8027512:	60a3      	str	r3, [r4, #8]
  int ok = 1;
 8027514:	2001      	movs	r0, #1
 8027516:	e7f0      	b.n	80274fa <mg_iobuf_resize+0x1a>
    void *p = calloc(1, new_size);
 8027518:	4601      	mov	r1, r0
 802751a:	2001      	movs	r0, #1
 802751c:	f7fb fc78 	bl	8022e10 <mg_calloc>
    if (p != NULL) {
 8027520:	4606      	mov	r6, r0
 8027522:	b198      	cbz	r0, 802754c <mg_iobuf_resize+0x6c>
      size_t len = new_size < io->len ? new_size : io->len;
 8027524:	68a2      	ldr	r2, [r4, #8]
 8027526:	42aa      	cmp	r2, r5
 8027528:	bf28      	it	cs
 802752a:	462a      	movcs	r2, r5
      if (len > 0 && io->buf != NULL) memmove(p, io->buf, len);
 802752c:	b11a      	cbz	r2, 8027536 <mg_iobuf_resize+0x56>
 802752e:	6821      	ldr	r1, [r4, #0]
 8027530:	b109      	cbz	r1, 8027536 <mg_iobuf_resize+0x56>
 8027532:	f005 fd7b 	bl	802d02c <memmove>
      mg_bzero(io->buf, io->size);
 8027536:	6861      	ldr	r1, [r4, #4]
 8027538:	6820      	ldr	r0, [r4, #0]
 802753a:	f7fe fd53 	bl	8025fe4 <mg_bzero>
      free(io->buf);
 802753e:	6820      	ldr	r0, [r4, #0]
 8027540:	f7f3 fdc4 	bl	801b0cc <vPortFree>
      io->buf = (unsigned char *) p;
 8027544:	6026      	str	r6, [r4, #0]
      io->size = new_size;
 8027546:	6065      	str	r5, [r4, #4]
  int ok = 1;
 8027548:	2001      	movs	r0, #1
 802754a:	e7d6      	b.n	80274fa <mg_iobuf_resize+0x1a>
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 802754c:	4b0b      	ldr	r3, [pc, #44]	@ (802757c <mg_iobuf_resize+0x9c>)
 802754e:	681b      	ldr	r3, [r3, #0]
 8027550:	2b00      	cmp	r3, #0
 8027552:	dc01      	bgt.n	8027558 <mg_iobuf_resize+0x78>
      ok = 0;
 8027554:	2000      	movs	r0, #0
  return ok;
 8027556:	e7d0      	b.n	80274fa <mg_iobuf_resize+0x1a>
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 8027558:	4b09      	ldr	r3, [pc, #36]	@ (8027580 <mg_iobuf_resize+0xa0>)
 802755a:	f640 5244 	movw	r2, #3396	@ 0xd44
 802755e:	4909      	ldr	r1, [pc, #36]	@ (8027584 <mg_iobuf_resize+0xa4>)
 8027560:	2001      	movs	r0, #1
 8027562:	f7ff f981 	bl	8026868 <mg_log_prefix>
 8027566:	2600      	movs	r6, #0
 8027568:	9500      	str	r5, [sp, #0]
 802756a:	9601      	str	r6, [sp, #4]
 802756c:	6862      	ldr	r2, [r4, #4]
 802756e:	4633      	mov	r3, r6
 8027570:	4805      	ldr	r0, [pc, #20]	@ (8027588 <mg_iobuf_resize+0xa8>)
 8027572:	f7fd f827 	bl	80245c4 <mg_log>
      ok = 0;
 8027576:	4630      	mov	r0, r6
 8027578:	e7bf      	b.n	80274fa <mg_iobuf_resize+0x1a>
 802757a:	bf00      	nop
 802757c:	2000012c 	.word	0x2000012c
 8027580:	0803be8c 	.word	0x0803be8c
 8027584:	0803b480 	.word	0x0803b480
 8027588:	0803b758 	.word	0x0803b758

0802758c <static_cb>:
static void static_cb(struct mg_connection *c, int ev, void *ev_data) {
 802758c:	b538      	push	{r3, r4, r5, lr}
 802758e:	4604      	mov	r4, r0
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8027590:	2908      	cmp	r1, #8
 8027592:	d004      	beq.n	802759e <static_cb+0x12>
 8027594:	2902      	cmp	r1, #2
 8027596:	d002      	beq.n	802759e <static_cb+0x12>
  } else if (ev == MG_EV_CLOSE) {
 8027598:	2909      	cmp	r1, #9
 802759a:	d02b      	beq.n	80275f4 <static_cb+0x68>
}
 802759c:	bd38      	pop	{r3, r4, r5, pc}
    struct mg_fd *fd = (struct mg_fd *) c->pfn_data;
 802759e:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 80275a2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80275a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80275a8:	d31d      	bcc.n	80275e6 <static_cb+0x5a>
    if (c->send.len >= c->send.size) return;  // Rate limit
 80275aa:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80275ac:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80275ae:	4299      	cmp	r1, r3
 80275b0:	d2f4      	bcs.n	802759c <static_cb+0x10>
    if ((space = c->send.size - c->send.len) > *cl) space = *cl;
 80275b2:	1a5b      	subs	r3, r3, r1
 80275b4:	f8d4 20a4 	ldr.w	r2, [r4, #164]	@ 0xa4
 80275b8:	429a      	cmp	r2, r3
 80275ba:	d300      	bcc.n	80275be <static_cb+0x32>
 80275bc:	461a      	mov	r2, r3
    n = fd->fs->rd(fd->fd, c->send.buf + c->send.len, space);
 80275be:	686b      	ldr	r3, [r5, #4]
 80275c0:	691b      	ldr	r3, [r3, #16]
 80275c2:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 80275c4:	4401      	add	r1, r0
 80275c6:	6828      	ldr	r0, [r5, #0]
 80275c8:	4798      	blx	r3
    c->send.len += n;
 80275ca:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80275cc:	4403      	add	r3, r0
 80275ce:	6523      	str	r3, [r4, #80]	@ 0x50
    *cl -= n;
 80275d0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 80275d4:	1a1b      	subs	r3, r3, r0
 80275d6:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    if (n == 0) restore_http_cb(c);
 80275da:	2800      	cmp	r0, #0
 80275dc:	d1de      	bne.n	802759c <static_cb+0x10>
 80275de:	4620      	mov	r0, r4
 80275e0:	f7fb fddc 	bl	802319c <restore_http_cb>
 80275e4:	e7da      	b.n	802759c <static_cb+0x10>
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 80275e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80275ea:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 80275ee:	f7ff ff77 	bl	80274e0 <mg_iobuf_resize>
 80275f2:	e7da      	b.n	80275aa <static_cb+0x1e>
    restore_http_cb(c);
 80275f4:	f7fb fdd2 	bl	802319c <restore_http_cb>
  (void) ev_data;
 80275f8:	e7d0      	b.n	802759c <static_cb+0x10>

080275fa <mg_iobuf_add>:
                    size_t len) {
 80275fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80275fe:	4604      	mov	r4, r0
 8027600:	460f      	mov	r7, r1
 8027602:	4690      	mov	r8, r2
 8027604:	461d      	mov	r5, r3
  size_t new_size = roundup(io->len + len, io->align);
 8027606:	6880      	ldr	r0, [r0, #8]
 8027608:	68e1      	ldr	r1, [r4, #12]
 802760a:	4418      	add	r0, r3
 802760c:	f7f9 fb40 	bl	8020c90 <roundup>
 8027610:	4606      	mov	r6, r0
  mg_iobuf_resize(io, new_size);      // Attempt to resize
 8027612:	4601      	mov	r1, r0
 8027614:	4620      	mov	r0, r4
 8027616:	f7ff ff63 	bl	80274e0 <mg_iobuf_resize>
  if (new_size != io->size) len = 0;  // Resize failure, append nothing
 802761a:	6863      	ldr	r3, [r4, #4]
 802761c:	42b3      	cmp	r3, r6
 802761e:	d000      	beq.n	8027622 <mg_iobuf_add+0x28>
 8027620:	2500      	movs	r5, #0
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 8027622:	68a2      	ldr	r2, [r4, #8]
 8027624:	42ba      	cmp	r2, r7
 8027626:	d812      	bhi.n	802764e <mg_iobuf_add+0x54>
  if (buf != NULL) memmove(io->buf + ofs, buf, len);
 8027628:	f1b8 0f00 	cmp.w	r8, #0
 802762c:	d005      	beq.n	802763a <mg_iobuf_add+0x40>
 802762e:	6820      	ldr	r0, [r4, #0]
 8027630:	462a      	mov	r2, r5
 8027632:	4641      	mov	r1, r8
 8027634:	4438      	add	r0, r7
 8027636:	f005 fcf9 	bl	802d02c <memmove>
  if (ofs > io->len) io->len += ofs - io->len;
 802763a:	68a3      	ldr	r3, [r4, #8]
 802763c:	42bb      	cmp	r3, r7
 802763e:	d200      	bcs.n	8027642 <mg_iobuf_add+0x48>
 8027640:	60a7      	str	r7, [r4, #8]
  io->len += len;
 8027642:	68a3      	ldr	r3, [r4, #8]
 8027644:	442b      	add	r3, r5
 8027646:	60a3      	str	r3, [r4, #8]
}
 8027648:	4628      	mov	r0, r5
 802764a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 802764e:	6823      	ldr	r3, [r4, #0]
 8027650:	19e8      	adds	r0, r5, r7
 8027652:	1bd2      	subs	r2, r2, r7
 8027654:	19d9      	adds	r1, r3, r7
 8027656:	4418      	add	r0, r3
 8027658:	f005 fce8 	bl	802d02c <memmove>
 802765c:	e7e4      	b.n	8027628 <mg_iobuf_add+0x2e>

0802765e <mg_iobuf_free>:
void mg_iobuf_free(struct mg_iobuf *io) {
 802765e:	b508      	push	{r3, lr}
  mg_iobuf_resize(io, 0);
 8027660:	2100      	movs	r1, #0
 8027662:	f7ff ff3d 	bl	80274e0 <mg_iobuf_resize>
}
 8027666:	bd08      	pop	{r3, pc}

08027668 <rx_udp>:
static void rx_udp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8027668:	b538      	push	{r3, r4, r5, lr}
 802766a:	460c      	mov	r4, r1
  struct mg_connection *c = getpeer(ifp->mgr, pkt, true);
 802766c:	2201      	movs	r2, #1
 802766e:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8027670:	f7fb fbf3 	bl	8022e5a <getpeer>
  if (c == NULL) {
 8027674:	b368      	cbz	r0, 80276d2 <rx_udp+0x6a>
 8027676:	4605      	mov	r5, r0
    c->rem.port = pkt->udp->sport;
 8027678:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 802767a:	881b      	ldrh	r3, [r3, #0]
 802767c:	8583      	strh	r3, [r0, #44]	@ 0x2c
    memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 802767e:	69e3      	ldr	r3, [r4, #28]
 8027680:	68db      	ldr	r3, [r3, #12]
 8027682:	61c3      	str	r3, [r0, #28]
    memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 8027684:	6923      	ldr	r3, [r4, #16]
 8027686:	f8d3 2006 	ldr.w	r2, [r3, #6]
 802768a:	f8c0 20c8 	str.w	r2, [r0, #200]	@ 0xc8
 802768e:	895b      	ldrh	r3, [r3, #10]
 8027690:	f8a0 30cc 	strh.w	r3, [r0, #204]	@ 0xcc
    if (c->recv.len >= MG_MAX_RECV_SIZE) {
 8027694:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8027696:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 802769a:	d21b      	bcs.n	80276d4 <rx_udp+0x6c>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 802769c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802769e:	1ad2      	subs	r2, r2, r3
 80276a0:	68e1      	ldr	r1, [r4, #12]
 80276a2:	428a      	cmp	r2, r1
 80276a4:	d204      	bcs.n	80276b0 <rx_udp+0x48>
               !mg_iobuf_resize(&c->recv, c->recv.len + pkt->pay.len)) {
 80276a6:	4419      	add	r1, r3
 80276a8:	3038      	adds	r0, #56	@ 0x38
 80276aa:	f7ff ff19 	bl	80274e0 <mg_iobuf_resize>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 80276ae:	b1a8      	cbz	r0, 80276dc <rx_udp+0x74>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
 80276b0:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80276b2:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80276b4:	68e2      	ldr	r2, [r4, #12]
 80276b6:	68a1      	ldr	r1, [r4, #8]
 80276b8:	4418      	add	r0, r3
 80276ba:	f006 ff0d 	bl	802e4d8 <memcpy>
      c->recv.len += pkt->pay.len;
 80276be:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80276c0:	4622      	mov	r2, r4
 80276c2:	f852 1f0c 	ldr.w	r1, [r2, #12]!
 80276c6:	440b      	add	r3, r1
 80276c8:	642b      	str	r3, [r5, #64]	@ 0x40
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 80276ca:	2107      	movs	r1, #7
 80276cc:	4628      	mov	r0, r5
 80276ce:	f7fb fd30 	bl	8023132 <mg_call>
}
 80276d2:	bd38      	pop	{r3, r4, r5, pc}
      mg_error(c, "max_recv_buf_size reached");
 80276d4:	4904      	ldr	r1, [pc, #16]	@ (80276e8 <rx_udp+0x80>)
 80276d6:	f7ff f9af 	bl	8026a38 <mg_error>
 80276da:	e7fa      	b.n	80276d2 <rx_udp+0x6a>
      mg_error(c, "oom");
 80276dc:	4903      	ldr	r1, [pc, #12]	@ (80276ec <rx_udp+0x84>)
 80276de:	4628      	mov	r0, r5
 80276e0:	f7ff f9aa 	bl	8026a38 <mg_error>
 80276e4:	e7f5      	b.n	80276d2 <rx_udp+0x6a>
 80276e6:	bf00      	nop
 80276e8:	0803b764 	.word	0x0803b764
 80276ec:	0803b780 	.word	0x0803b780

080276f0 <mg_pfn_iobuf_private>:
static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {
 80276f0:	b538      	push	{r3, r4, r5, lr}
 80276f2:	4605      	mov	r5, r0
 80276f4:	460c      	mov	r4, r1
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 80276f6:	b122      	cbz	r2, 8027702 <mg_pfn_iobuf_private+0x12>
 80276f8:	6889      	ldr	r1, [r1, #8]
 80276fa:	3102      	adds	r1, #2
 80276fc:	6863      	ldr	r3, [r4, #4]
 80276fe:	4299      	cmp	r1, r3
 8027700:	d80d      	bhi.n	802771e <mg_pfn_iobuf_private+0x2e>
  if (io->len + 2 <= io->size) {
 8027702:	68a3      	ldr	r3, [r4, #8]
 8027704:	1c99      	adds	r1, r3, #2
 8027706:	6862      	ldr	r2, [r4, #4]
 8027708:	4291      	cmp	r1, r2
 802770a:	d80c      	bhi.n	8027726 <mg_pfn_iobuf_private+0x36>
    io->buf[io->len++] = (uint8_t) ch;
 802770c:	6822      	ldr	r2, [r4, #0]
 802770e:	1c59      	adds	r1, r3, #1
 8027710:	60a1      	str	r1, [r4, #8]
 8027712:	54d5      	strb	r5, [r2, r3]
    io->buf[io->len] = 0;
 8027714:	6822      	ldr	r2, [r4, #0]
 8027716:	68a3      	ldr	r3, [r4, #8]
 8027718:	2100      	movs	r1, #0
 802771a:	54d1      	strb	r1, [r2, r3]
}
 802771c:	bd38      	pop	{r3, r4, r5, pc}
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 802771e:	4620      	mov	r0, r4
 8027720:	f7ff fede 	bl	80274e0 <mg_iobuf_resize>
 8027724:	e7ed      	b.n	8027702 <mg_pfn_iobuf_private+0x12>
  } else if (io->len < io->size) {
 8027726:	4293      	cmp	r3, r2
 8027728:	d2f8      	bcs.n	802771c <mg_pfn_iobuf_private+0x2c>
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
 802772a:	6822      	ldr	r2, [r4, #0]
 802772c:	1c59      	adds	r1, r3, #1
 802772e:	60a1      	str	r1, [r4, #8]
 8027730:	2100      	movs	r1, #0
 8027732:	54d1      	strb	r1, [r2, r3]
}
 8027734:	e7f2      	b.n	802771c <mg_pfn_iobuf_private+0x2c>

08027736 <mg_pfn_iobuf>:
void mg_pfn_iobuf(char ch, void *param) {
 8027736:	b508      	push	{r3, lr}
  mg_pfn_iobuf_private(ch, param, true);
 8027738:	2201      	movs	r2, #1
 802773a:	f7ff ffd9 	bl	80276f0 <mg_pfn_iobuf_private>
}
 802773e:	bd08      	pop	{r3, pc}

08027740 <mg_putchar_iobuf_static>:
static void mg_putchar_iobuf_static(char ch, void *param) {
 8027740:	b508      	push	{r3, lr}
  mg_pfn_iobuf_private(ch, param, false);
 8027742:	2200      	movs	r2, #0
 8027744:	f7ff ffd4 	bl	80276f0 <mg_pfn_iobuf_private>
}
 8027748:	bd08      	pop	{r3, pc}
	...

0802774c <mg_close_conn>:
void mg_close_conn(struct mg_connection *c) {
 802774c:	b510      	push	{r4, lr}
 802774e:	4604      	mov	r4, r0
  mg_resolve_cancel(c);  // Close any pending DNS query
 8027750:	f7fb fc8e 	bl	8023070 <mg_resolve_cancel>
  LIST_DELETE(struct mg_connection, &c->mgr->conns, c);
 8027754:	6862      	ldr	r2, [r4, #4]
 8027756:	e000      	b.n	802775a <mg_close_conn+0xe>
 8027758:	461a      	mov	r2, r3
 802775a:	6813      	ldr	r3, [r2, #0]
 802775c:	42a3      	cmp	r3, r4
 802775e:	d1fb      	bne.n	8027758 <mg_close_conn+0xc>
 8027760:	6823      	ldr	r3, [r4, #0]
 8027762:	6013      	str	r3, [r2, #0]
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 8027764:	6863      	ldr	r3, [r4, #4]
 8027766:	689a      	ldr	r2, [r3, #8]
 8027768:	42a2      	cmp	r2, r4
 802776a:	d020      	beq.n	80277ae <mg_close_conn+0x62>
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 802776c:	6863      	ldr	r3, [r4, #4]
 802776e:	691a      	ldr	r2, [r3, #16]
 8027770:	42a2      	cmp	r2, r4
 8027772:	d01f      	beq.n	80277b4 <mg_close_conn+0x68>
  mg_call(c, MG_EV_CLOSE, NULL);
 8027774:	2200      	movs	r2, #0
 8027776:	2109      	movs	r1, #9
 8027778:	4620      	mov	r0, r4
 802777a:	f7fb fcda 	bl	8023132 <mg_call>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 802777e:	4b15      	ldr	r3, [pc, #84]	@ (80277d4 <mg_close_conn+0x88>)
 8027780:	681b      	ldr	r3, [r3, #0]
 8027782:	2b02      	cmp	r3, #2
 8027784:	dc19      	bgt.n	80277ba <mg_close_conn+0x6e>
  mg_iobuf_free(&c->recv);
 8027786:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 802778a:	f7ff ff68 	bl	802765e <mg_iobuf_free>
  mg_iobuf_free(&c->send);
 802778e:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 8027792:	f7ff ff64 	bl	802765e <mg_iobuf_free>
  mg_iobuf_free(&c->rtls);
 8027796:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802779a:	f7ff ff60 	bl	802765e <mg_iobuf_free>
  mg_bzero((unsigned char *) c, sizeof(*c));
 802779e:	21b0      	movs	r1, #176	@ 0xb0
 80277a0:	4620      	mov	r0, r4
 80277a2:	f7fe fc1f 	bl	8025fe4 <mg_bzero>
  free(c);
 80277a6:	4620      	mov	r0, r4
 80277a8:	f7f3 fc90 	bl	801b0cc <vPortFree>
}
 80277ac:	bd10      	pop	{r4, pc}
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 80277ae:	2200      	movs	r2, #0
 80277b0:	609a      	str	r2, [r3, #8]
 80277b2:	e7db      	b.n	802776c <mg_close_conn+0x20>
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 80277b4:	2200      	movs	r2, #0
 80277b6:	611a      	str	r2, [r3, #16]
 80277b8:	e7dc      	b.n	8027774 <mg_close_conn+0x28>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 80277ba:	4b07      	ldr	r3, [pc, #28]	@ (80277d8 <mg_close_conn+0x8c>)
 80277bc:	f241 22ae 	movw	r2, #4782	@ 0x12ae
 80277c0:	4906      	ldr	r1, [pc, #24]	@ (80277dc <mg_close_conn+0x90>)
 80277c2:	2003      	movs	r0, #3
 80277c4:	f7ff f850 	bl	8026868 <mg_log_prefix>
 80277c8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80277ca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80277cc:	4804      	ldr	r0, [pc, #16]	@ (80277e0 <mg_close_conn+0x94>)
 80277ce:	f7fc fef9 	bl	80245c4 <mg_log>
 80277d2:	e7d8      	b.n	8027786 <mg_close_conn+0x3a>
 80277d4:	2000012c 	.word	0x2000012c
 80277d8:	0803be68 	.word	0x0803be68
 80277dc:	0803b480 	.word	0x0803b480
 80277e0:	0803b784 	.word	0x0803b784

080277e4 <close_conn>:
static void close_conn(struct mg_connection *c) {
 80277e4:	b510      	push	{r4, lr}
 80277e6:	4604      	mov	r4, r0
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
 80277e8:	30d0      	adds	r0, #208	@ 0xd0
 80277ea:	f7ff ff38 	bl	802765e <mg_iobuf_free>
  mg_close_conn(c);
 80277ee:	4620      	mov	r0, r4
 80277f0:	f7ff ffac 	bl	802774c <mg_close_conn>
}
 80277f4:	bd10      	pop	{r4, pc}
	...

080277f8 <mg_listen>:
                                mg_event_handler_t fn, void *fn_data) {
 80277f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80277fc:	4606      	mov	r6, r0
 80277fe:	460d      	mov	r5, r1
 8027800:	4690      	mov	r8, r2
 8027802:	461f      	mov	r7, r3
  if ((c = mg_alloc_conn(mgr)) == NULL) {
 8027804:	f7fc fa08 	bl	8023c18 <mg_alloc_conn>
 8027808:	4604      	mov	r4, r0
 802780a:	2800      	cmp	r0, #0
 802780c:	d03f      	beq.n	802788e <mg_listen+0x96>
  } else if (!mg_open_listener(c, url)) {
 802780e:	4629      	mov	r1, r5
 8027810:	f7fe fe1f 	bl	8026452 <mg_open_listener>
 8027814:	2800      	cmp	r0, #0
 8027816:	d04d      	beq.n	80278b4 <mg_listen+0xbc>
    c->is_listening = 1;
 8027818:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 802781c:	f043 0301 	orr.w	r3, r3, #1
 8027820:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    c->is_udp = strncmp(url, "udp:", 4) == 0;
 8027824:	2204      	movs	r2, #4
 8027826:	492f      	ldr	r1, [pc, #188]	@ (80278e4 <mg_listen+0xec>)
 8027828:	4628      	mov	r0, r5
 802782a:	f005 fc4e 	bl	802d0ca <strncmp>
 802782e:	fab0 f080 	clz	r0, r0
 8027832:	0940      	lsrs	r0, r0, #5
 8027834:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027838:	f360 0300 	bfi	r3, r0, #0, #1
 802783c:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 8027840:	6833      	ldr	r3, [r6, #0]
 8027842:	6023      	str	r3, [r4, #0]
 8027844:	6034      	str	r4, [r6, #0]
    c->fn = fn;
 8027846:	f8c4 8078 	str.w	r8, [r4, #120]	@ 0x78
    c->fn_data = fn_data;
 802784a:	67e7      	str	r7, [r4, #124]	@ 0x7c
    mg_call(c, MG_EV_OPEN, NULL);
 802784c:	2200      	movs	r2, #0
 802784e:	2101      	movs	r1, #1
 8027850:	4620      	mov	r0, r4
 8027852:	f7fb fc6e 	bl	8023132 <mg_call>
    if (mg_url_is_ssl(url)) c->is_tls = 1;  // Accepted connection must
 8027856:	4628      	mov	r0, r5
 8027858:	f7fe fb16 	bl	8025e88 <mg_url_is_ssl>
 802785c:	b128      	cbz	r0, 802786a <mg_listen+0x72>
 802785e:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8027862:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8027866:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 802786a:	4b1f      	ldr	r3, [pc, #124]	@ (80278e8 <mg_listen+0xf0>)
 802786c:	681b      	ldr	r3, [r3, #0]
 802786e:	2b02      	cmp	r3, #2
 8027870:	dd11      	ble.n	8027896 <mg_listen+0x9e>
 8027872:	4b1e      	ldr	r3, [pc, #120]	@ (80278ec <mg_listen+0xf4>)
 8027874:	f241 22e1 	movw	r2, #4833	@ 0x12e1
 8027878:	491d      	ldr	r1, [pc, #116]	@ (80278f0 <mg_listen+0xf8>)
 802787a:	2003      	movs	r0, #3
 802787c:	f7fe fff4 	bl	8026868 <mg_log_prefix>
 8027880:	462b      	mov	r3, r5
 8027882:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8027884:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027886:	481b      	ldr	r0, [pc, #108]	@ (80278f4 <mg_listen+0xfc>)
 8027888:	f7fc fe9c 	bl	80245c4 <mg_log>
  return c;
 802788c:	e003      	b.n	8027896 <mg_listen+0x9e>
    MG_ERROR(("OOM %s", url));
 802788e:	4b16      	ldr	r3, [pc, #88]	@ (80278e8 <mg_listen+0xf0>)
 8027890:	681b      	ldr	r3, [r3, #0]
 8027892:	2b00      	cmp	r3, #0
 8027894:	dc02      	bgt.n	802789c <mg_listen+0xa4>
}
 8027896:	4620      	mov	r0, r4
 8027898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MG_ERROR(("OOM %s", url));
 802789c:	4b13      	ldr	r3, [pc, #76]	@ (80278ec <mg_listen+0xf4>)
 802789e:	f241 22d3 	movw	r2, #4819	@ 0x12d3
 80278a2:	4913      	ldr	r1, [pc, #76]	@ (80278f0 <mg_listen+0xf8>)
 80278a4:	2001      	movs	r0, #1
 80278a6:	f7fe ffdf 	bl	8026868 <mg_log_prefix>
 80278aa:	4629      	mov	r1, r5
 80278ac:	4812      	ldr	r0, [pc, #72]	@ (80278f8 <mg_listen+0x100>)
 80278ae:	f7fc fe89 	bl	80245c4 <mg_log>
 80278b2:	e7f0      	b.n	8027896 <mg_listen+0x9e>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 80278b4:	4b0c      	ldr	r3, [pc, #48]	@ (80278e8 <mg_listen+0xf0>)
 80278b6:	681b      	ldr	r3, [r3, #0]
 80278b8:	2b00      	cmp	r3, #0
 80278ba:	dc04      	bgt.n	80278c6 <mg_listen+0xce>
    free(c);
 80278bc:	4620      	mov	r0, r4
 80278be:	f7f3 fc05 	bl	801b0cc <vPortFree>
    c = NULL;
 80278c2:	2400      	movs	r4, #0
 80278c4:	e7e7      	b.n	8027896 <mg_listen+0x9e>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 80278c6:	4b09      	ldr	r3, [pc, #36]	@ (80278ec <mg_listen+0xf4>)
 80278c8:	f241 22d5 	movw	r2, #4821	@ 0x12d5
 80278cc:	4908      	ldr	r1, [pc, #32]	@ (80278f0 <mg_listen+0xf8>)
 80278ce:	2001      	movs	r0, #1
 80278d0:	f7fe ffca 	bl	8026868 <mg_log_prefix>
 80278d4:	f006 fdc8 	bl	802e468 <__errno>
 80278d8:	6802      	ldr	r2, [r0, #0]
 80278da:	4629      	mov	r1, r5
 80278dc:	4807      	ldr	r0, [pc, #28]	@ (80278fc <mg_listen+0x104>)
 80278de:	f7fc fe71 	bl	80245c4 <mg_log>
 80278e2:	e7eb      	b.n	80278bc <mg_listen+0xc4>
 80278e4:	0803b7b4 	.word	0x0803b7b4
 80278e8:	2000012c 	.word	0x2000012c
 80278ec:	0803be50 	.word	0x0803be50
 80278f0:	0803b480 	.word	0x0803b480
 80278f4:	0803b4dc 	.word	0x0803b4dc
 80278f8:	0803b794 	.word	0x0803b794
 80278fc:	0803b79c 	.word	0x0803b79c

08027900 <mg_http_listen>:
                                     mg_event_handler_t fn, void *fn_data) {
 8027900:	b508      	push	{r3, lr}
  struct mg_connection *c = mg_listen(mgr, url, fn, fn_data);
 8027902:	f7ff ff79 	bl	80277f8 <mg_listen>
  if (c != NULL) c->pfn = http_cb;
 8027906:	b110      	cbz	r0, 802790e <mg_http_listen+0xe>
 8027908:	4b01      	ldr	r3, [pc, #4]	@ (8027910 <mg_http_listen+0x10>)
 802790a:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
}
 802790e:	bd08      	pop	{r3, pc}
 8027910:	08026aed 	.word	0x08026aed

08027914 <trim_len>:
static size_t trim_len(struct mg_connection *c, size_t len) {
 8027914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027918:	4605      	mov	r5, r0
 802791a:	460c      	mov	r4, r1
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 802791c:	6843      	ldr	r3, [r0, #4]
 802791e:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 8027920:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 8027924:	f013 0301 	ands.w	r3, r3, #1
 8027928:	d02c      	beq.n	8027984 <trim_len+0x70>
 802792a:	2608      	movs	r6, #8
  size_t max_headers_len =
 802792c:	f106 0826 	add.w	r8, r6, #38	@ 0x26
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 8027930:	bb53      	cbnz	r3, 8027988 <trim_len+0x74>
 8027932:	3618      	adds	r6, #24
  if (len + max_headers_len > ifp->tx.len) {
 8027934:	eb08 0304 	add.w	r3, r8, r4
 8027938:	69ba      	ldr	r2, [r7, #24]
 802793a:	4293      	cmp	r3, r2
 802793c:	d901      	bls.n	8027942 <trim_len+0x2e>
    len = ifp->tx.len - max_headers_len;
 802793e:	eba2 0408 	sub.w	r4, r2, r8
  if (ifp->mtu < min_mtu) {
 8027942:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8027946:	42b3      	cmp	r3, r6
 8027948:	d205      	bcs.n	8027956 <trim_len+0x42>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 802794a:	4b1c      	ldr	r3, [pc, #112]	@ (80279bc <trim_len+0xa8>)
 802794c:	681b      	ldr	r3, [r3, #0]
 802794e:	2b00      	cmp	r3, #0
 8027950:	dc1c      	bgt.n	802798c <trim_len+0x78>
    ifp->mtu = (uint16_t) min_mtu;
 8027952:	f8a7 6044 	strh.w	r6, [r7, #68]	@ 0x44
  if (len + max_headers_len - eth_h_len > ifp->mtu) {
 8027956:	eb04 0308 	add.w	r3, r4, r8
 802795a:	3b0e      	subs	r3, #14
 802795c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8027960:	4293      	cmp	r3, r2
 8027962:	d90c      	bls.n	802797e <trim_len+0x6a>
    len = ifp->mtu - max_headers_len + eth_h_len;
 8027964:	eba2 0208 	sub.w	r2, r2, r8
 8027968:	f102 040e 	add.w	r4, r2, #14
    if (c->is_udp) {
 802796c:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8027970:	f013 0f01 	tst.w	r3, #1
 8027974:	d003      	beq.n	802797e <trim_len+0x6a>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 8027976:	4b11      	ldr	r3, [pc, #68]	@ (80279bc <trim_len+0xa8>)
 8027978:	681b      	ldr	r3, [r3, #0]
 802797a:	2b00      	cmp	r3, #0
 802797c:	dc12      	bgt.n	80279a4 <trim_len+0x90>
}
 802797e:	4620      	mov	r0, r4
 8027980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 8027984:	263c      	movs	r6, #60	@ 0x3c
 8027986:	e7d1      	b.n	802792c <trim_len+0x18>
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 8027988:	2644      	movs	r6, #68	@ 0x44
 802798a:	e7d3      	b.n	8027934 <trim_len+0x20>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 802798c:	4b0c      	ldr	r3, [pc, #48]	@ (80279c0 <trim_len+0xac>)
 802798e:	f241 528c 	movw	r2, #5516	@ 0x158c
 8027992:	490c      	ldr	r1, [pc, #48]	@ (80279c4 <trim_len+0xb0>)
 8027994:	2001      	movs	r0, #1
 8027996:	f7fe ff67 	bl	8026868 <mg_log_prefix>
 802799a:	4631      	mov	r1, r6
 802799c:	480a      	ldr	r0, [pc, #40]	@ (80279c8 <trim_len+0xb4>)
 802799e:	f7fc fe11 	bl	80245c4 <mg_log>
 80279a2:	e7d6      	b.n	8027952 <trim_len+0x3e>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 80279a4:	4b06      	ldr	r3, [pc, #24]	@ (80279c0 <trim_len+0xac>)
 80279a6:	f241 5293 	movw	r2, #5523	@ 0x1593
 80279aa:	4906      	ldr	r1, [pc, #24]	@ (80279c4 <trim_len+0xb0>)
 80279ac:	2001      	movs	r0, #1
 80279ae:	f7fe ff5b 	bl	8026868 <mg_log_prefix>
 80279b2:	4806      	ldr	r0, [pc, #24]	@ (80279cc <trim_len+0xb8>)
 80279b4:	f7fc fe06 	bl	80245c4 <mg_log>
 80279b8:	e7e1      	b.n	802797e <trim_len+0x6a>
 80279ba:	bf00      	nop
 80279bc:	2000012c 	.word	0x2000012c
 80279c0:	0803be44 	.word	0x0803be44
 80279c4:	0803b480 	.word	0x0803b480
 80279c8:	0803b7bc 	.word	0x0803b7bc
 80279cc:	0803b7e8 	.word	0x0803b7e8

080279d0 <mg_send>:
bool mg_send(struct mg_connection *c, const void *buf, size_t len) {
 80279d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80279d2:	b085      	sub	sp, #20
 80279d4:	4604      	mov	r4, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 80279d6:	6843      	ldr	r3, [r0, #4]
 80279d8:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 80279da:	69c7      	ldr	r7, [r0, #28]
  if (ifp->ip == 0 || ifp->state != MG_TCPIP_STATE_READY) {
 80279dc:	68ab      	ldr	r3, [r5, #8]
 80279de:	b123      	cbz	r3, 80279ea <mg_send+0x1a>
 80279e0:	460e      	mov	r6, r1
 80279e2:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 80279e6:	2b03      	cmp	r3, #3
 80279e8:	d006      	beq.n	80279f8 <mg_send+0x28>
    mg_error(c, "net down");
 80279ea:	4913      	ldr	r1, [pc, #76]	@ (8027a38 <mg_send+0x68>)
 80279ec:	4620      	mov	r0, r4
 80279ee:	f7ff f823 	bl	8026a38 <mg_error>
  bool res = false;
 80279f2:	2000      	movs	r0, #0
}
 80279f4:	b005      	add	sp, #20
 80279f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if (c->is_udp) {
 80279f8:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 80279fc:	f013 0f01 	tst.w	r3, #1
 8027a00:	d010      	beq.n	8027a24 <mg_send+0x54>
    len = trim_len(c, len);  // Trimming length if necessary
 8027a02:	4611      	mov	r1, r2
 8027a04:	f7ff ff86 	bl	8027914 <trim_len>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, rem_ip, c->rem.port, buf, len);
 8027a08:	68aa      	ldr	r2, [r5, #8]
 8027a0a:	9003      	str	r0, [sp, #12]
 8027a0c:	9602      	str	r6, [sp, #8]
 8027a0e:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 8027a10:	9301      	str	r3, [sp, #4]
 8027a12:	9700      	str	r7, [sp, #0]
 8027a14:	8b23      	ldrh	r3, [r4, #24]
 8027a16:	f104 01c8 	add.w	r1, r4, #200	@ 0xc8
 8027a1a:	4628      	mov	r0, r5
 8027a1c:	f7fe fc97 	bl	802634e <tx_udp>
    res = true;
 8027a20:	2001      	movs	r0, #1
 8027a22:	e7e7      	b.n	80279f4 <mg_send+0x24>
    res = mg_iobuf_add(&c->send, c->send.len, buf, len);
 8027a24:	4613      	mov	r3, r2
 8027a26:	460a      	mov	r2, r1
 8027a28:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8027a2a:	3048      	adds	r0, #72	@ 0x48
 8027a2c:	f7ff fde5 	bl	80275fa <mg_iobuf_add>
 8027a30:	3800      	subs	r0, #0
 8027a32:	bf18      	it	ne
 8027a34:	2001      	movne	r0, #1
 8027a36:	e7dd      	b.n	80279f4 <mg_send+0x24>
 8027a38:	0803b814 	.word	0x0803b814

08027a3c <mg_dns_send>:
                        uint16_t txnid, bool ipv6) {
 8027a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027a3e:	b0c5      	sub	sp, #276	@ 0x114
 8027a40:	4606      	mov	r6, r0
 8027a42:	460d      	mov	r5, r1
 8027a44:	4614      	mov	r4, r2
 8027a46:	461f      	mov	r7, r3
  memset(&pkt, 0, sizeof(pkt));
 8027a48:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8027a4c:	2100      	movs	r1, #0
 8027a4e:	a801      	add	r0, sp, #4
 8027a50:	f005 fb06 	bl	802d060 <memset>
  pkt.header.txnid = mg_htons(txnid);
 8027a54:	4620      	mov	r0, r4
 8027a56:	f7fe fbc5 	bl	80261e4 <mg_ntohs>
 8027a5a:	f8ad 0004 	strh.w	r0, [sp, #4]
  pkt.header.flags = mg_htons(0x100);
 8027a5e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8027a62:	f7fe fbbf 	bl	80261e4 <mg_ntohs>
 8027a66:	f8ad 0006 	strh.w	r0, [sp, #6]
  pkt.header.num_questions = mg_htons(1);
 8027a6a:	2001      	movs	r0, #1
 8027a6c:	f7fe fbba 	bl	80261e4 <mg_ntohs>
 8027a70:	f8ad 0008 	strh.w	r0, [sp, #8]
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 8027a74:	f04f 0c00 	mov.w	ip, #0
 8027a78:	4664      	mov	r4, ip
 8027a7a:	e015      	b.n	8027aa8 <mg_dns_send+0x6c>
      pkt.data[n] = (uint8_t) (i - n);
 8027a7c:	eba4 020c 	sub.w	r2, r4, ip
 8027a80:	ab01      	add	r3, sp, #4
 8027a82:	4463      	add	r3, ip
 8027a84:	731a      	strb	r2, [r3, #12]
      memcpy(&pkt.data[n + 1], name->buf + n, i - n);
 8027a86:	f10c 0309 	add.w	r3, ip, #9
 8027a8a:	aa01      	add	r2, sp, #4
 8027a8c:	18d0      	adds	r0, r2, r3
 8027a8e:	6829      	ldr	r1, [r5, #0]
 8027a90:	eba4 020c 	sub.w	r2, r4, ip
 8027a94:	4461      	add	r1, ip
 8027a96:	3004      	adds	r0, #4
 8027a98:	f006 fd1e 	bl	802e4d8 <memcpy>
      n = i + 1;
 8027a9c:	f104 0c01 	add.w	ip, r4, #1
    if (i >= name->len) break;
 8027aa0:	686a      	ldr	r2, [r5, #4]
 8027aa2:	42a2      	cmp	r2, r4
 8027aa4:	d90a      	bls.n	8027abc <mg_dns_send+0x80>
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 8027aa6:	3401      	adds	r4, #1
 8027aa8:	2cfa      	cmp	r4, #250	@ 0xfa
 8027aaa:	d807      	bhi.n	8027abc <mg_dns_send+0x80>
    if (name->buf[i] == '.' || i >= name->len) {
 8027aac:	682b      	ldr	r3, [r5, #0]
 8027aae:	5d1a      	ldrb	r2, [r3, r4]
 8027ab0:	2a2e      	cmp	r2, #46	@ 0x2e
 8027ab2:	d0e3      	beq.n	8027a7c <mg_dns_send+0x40>
 8027ab4:	686b      	ldr	r3, [r5, #4]
 8027ab6:	42a3      	cmp	r3, r4
 8027ab8:	d8f2      	bhi.n	8027aa0 <mg_dns_send+0x64>
 8027aba:	e7df      	b.n	8027a7c <mg_dns_send+0x40>
  memcpy(&pkt.data[n], "\x00\x00\x01\x00\x01", 5);  // A query
 8027abc:	f10c 0308 	add.w	r3, ip, #8
 8027ac0:	aa01      	add	r2, sp, #4
 8027ac2:	4413      	add	r3, r2
 8027ac4:	4a0a      	ldr	r2, [pc, #40]	@ (8027af0 <mg_dns_send+0xb4>)
 8027ac6:	f8d2 0220 	ldr.w	r0, [r2, #544]	@ 0x220
 8027aca:	6058      	str	r0, [r3, #4]
 8027acc:	f892 2224 	ldrb.w	r2, [r2, #548]	@ 0x224
 8027ad0:	721a      	strb	r2, [r3, #8]
  if (ipv6) pkt.data[n - 3] = 0x1c;  // AAAA query
 8027ad2:	b12f      	cbz	r7, 8027ae0 <mg_dns_send+0xa4>
 8027ad4:	f10c 0302 	add.w	r3, ip, #2
 8027ad8:	aa01      	add	r2, sp, #4
 8027ada:	4413      	add	r3, r2
 8027adc:	221c      	movs	r2, #28
 8027ade:	731a      	strb	r2, [r3, #12]
  return mg_send(c, &pkt, sizeof(pkt.header) + n);
 8027ae0:	f10c 0211 	add.w	r2, ip, #17
 8027ae4:	a901      	add	r1, sp, #4
 8027ae6:	4630      	mov	r0, r6
 8027ae8:	f7ff ff72 	bl	80279d0 <mg_send>
}
 8027aec:	b045      	add	sp, #276	@ 0x114
 8027aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027af0:	080363ac 	.word	0x080363ac

08027af4 <mg_mqtt_send_header>:
                         uint32_t len) {
 8027af4:	b500      	push	{lr}
 8027af6:	b083      	sub	sp, #12
  buf[0] = (uint8_t) ((cmd << 4) | flags);
 8027af8:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8027afc:	f88d 2000 	strb.w	r2, [sp]
  uint8_t buf[1 + sizeof(len)], *vlen = &buf[1];
 8027b00:	f10d 0201 	add.w	r2, sp, #1
    *vlen = len % 0x80;
 8027b04:	f003 017f 	and.w	r1, r3, #127	@ 0x7f
 8027b08:	7011      	strb	r1, [r2, #0]
    if (len > 0) *vlen |= 0x80;
 8027b0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8027b0c:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 8027b10:	d90e      	bls.n	8027b30 <mg_mqtt_send_header+0x3c>
 8027b12:	f061 017f 	orn	r1, r1, #127	@ 0x7f
 8027b16:	f802 1b01 	strb.w	r1, [r2], #1
  } while (len > 0 && vlen < &buf[sizeof(buf)]);
 8027b1a:	f10d 0105 	add.w	r1, sp, #5
 8027b1e:	428a      	cmp	r2, r1
 8027b20:	d3f0      	bcc.n	8027b04 <mg_mqtt_send_header+0x10>
  mg_send(c, buf, (size_t) (vlen - buf));
 8027b22:	4669      	mov	r1, sp
 8027b24:	1a52      	subs	r2, r2, r1
 8027b26:	f7ff ff53 	bl	80279d0 <mg_send>
}
 8027b2a:	b003      	add	sp, #12
 8027b2c:	f85d fb04 	ldr.w	pc, [sp], #4
    vlen++;
 8027b30:	3201      	adds	r2, #1
  } while (len > 0 && vlen < &buf[sizeof(buf)]);
 8027b32:	e7f6      	b.n	8027b22 <mg_mqtt_send_header+0x2e>

08027b34 <mg_send_u32>:
static void mg_send_u32(struct mg_connection *c, uint32_t value) {
 8027b34:	b500      	push	{lr}
 8027b36:	b083      	sub	sp, #12
 8027b38:	9101      	str	r1, [sp, #4]
  mg_send(c, &value, sizeof(value));
 8027b3a:	2204      	movs	r2, #4
 8027b3c:	eb0d 0102 	add.w	r1, sp, r2
 8027b40:	f7ff ff46 	bl	80279d0 <mg_send>
}
 8027b44:	b003      	add	sp, #12
 8027b46:	f85d fb04 	ldr.w	pc, [sp], #4

08027b4a <mg_send_u16>:
static void mg_send_u16(struct mg_connection *c, uint16_t value) {
 8027b4a:	b500      	push	{lr}
 8027b4c:	b083      	sub	sp, #12
 8027b4e:	f8ad 1006 	strh.w	r1, [sp, #6]
  mg_send(c, &value, sizeof(value));
 8027b52:	2202      	movs	r2, #2
 8027b54:	f10d 0106 	add.w	r1, sp, #6
 8027b58:	f7ff ff3a 	bl	80279d0 <mg_send>
}
 8027b5c:	b003      	add	sp, #12
 8027b5e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08027b64 <mg_send_mqtt_properties>:
                                    struct mg_mqtt_prop *props, size_t nprops) {
 8027b64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8027b68:	b083      	sub	sp, #12
 8027b6a:	4606      	mov	r6, r0
 8027b6c:	460f      	mov	r7, r1
 8027b6e:	4691      	mov	r9, r2
  size_t total_size = get_properties_length(props, nprops);
 8027b70:	4611      	mov	r1, r2
 8027b72:	4638      	mov	r0, r7
 8027b74:	f7f9 fdda 	bl	802172c <get_properties_length>
 8027b78:	4601      	mov	r1, r0
  uint8_t buf_v[4] = {0, 0, 0, 0};
 8027b7a:	2500      	movs	r5, #0
 8027b7c:	9501      	str	r5, [sp, #4]
  uint8_t buf[4] = {0, 0, 0, 0};
 8027b7e:	9500      	str	r5, [sp, #0]
  size_t i, len = encode_varint(buf, total_size);
 8027b80:	4668      	mov	r0, sp
 8027b82:	f7f9 fd84 	bl	802168e <encode_varint>
 8027b86:	4602      	mov	r2, r0
  mg_send(c, buf, (size_t) len);
 8027b88:	4669      	mov	r1, sp
 8027b8a:	4630      	mov	r0, r6
 8027b8c:	f7ff ff20 	bl	80279d0 <mg_send>
  for (i = 0; i < nprops; i++) {
 8027b90:	e018      	b.n	8027bc4 <mg_send_mqtt_properties+0x60>
        mg_send_u16(c, mg_htons((uint16_t) props[i].key.len));
 8027b92:	89a0      	ldrh	r0, [r4, #12]
 8027b94:	f7fe fb26 	bl	80261e4 <mg_ntohs>
 8027b98:	4601      	mov	r1, r0
 8027b9a:	4630      	mov	r0, r6
 8027b9c:	f7ff ffd5 	bl	8027b4a <mg_send_u16>
        mg_send(c, props[i].key.buf, props[i].key.len);
 8027ba0:	68e2      	ldr	r2, [r4, #12]
 8027ba2:	68a1      	ldr	r1, [r4, #8]
 8027ba4:	4630      	mov	r0, r6
 8027ba6:	f7ff ff13 	bl	80279d0 <mg_send>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 8027baa:	8aa0      	ldrh	r0, [r4, #20]
 8027bac:	f7fe fb1a 	bl	80261e4 <mg_ntohs>
 8027bb0:	4601      	mov	r1, r0
 8027bb2:	4630      	mov	r0, r6
 8027bb4:	f7ff ffc9 	bl	8027b4a <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 8027bb8:	6962      	ldr	r2, [r4, #20]
 8027bba:	6921      	ldr	r1, [r4, #16]
 8027bbc:	4630      	mov	r0, r6
 8027bbe:	f7ff ff07 	bl	80279d0 <mg_send>
  for (i = 0; i < nprops; i++) {
 8027bc2:	3501      	adds	r5, #1
 8027bc4:	454d      	cmp	r5, r9
 8027bc6:	d25b      	bcs.n	8027c80 <mg_send_mqtt_properties+0x11c>
    mg_send(c, &props[i].id, sizeof(props[i].id));
 8027bc8:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8027bcc:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8027bd0:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 8027bd4:	2201      	movs	r2, #1
 8027bd6:	4621      	mov	r1, r4
 8027bd8:	4630      	mov	r0, r6
 8027bda:	f7ff fef9 	bl	80279d0 <mg_send>
    switch (mqtt_prop_type_by_id(props[i].id)) {
 8027bde:	f817 0008 	ldrb.w	r0, [r7, r8]
 8027be2:	f7f9 fd8f 	bl	8021704 <mqtt_prop_type_by_id>
 8027be6:	2806      	cmp	r0, #6
 8027be8:	d8eb      	bhi.n	8027bc2 <mg_send_mqtt_properties+0x5e>
 8027bea:	a301      	add	r3, pc, #4	@ (adr r3, 8027bf0 <mg_send_mqtt_properties+0x8c>)
 8027bec:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8027bf0:	08027c0d 	.word	0x08027c0d
 8027bf4:	08027c39 	.word	0x08027c39
 8027bf8:	08027b93 	.word	0x08027b93
 8027bfc:	08027c53 	.word	0x08027c53
 8027c00:	08027c6d 	.word	0x08027c6d
 8027c04:	08027c29 	.word	0x08027c29
 8027c08:	08027c19 	.word	0x08027c19
        mg_send(c, &props[i].iv, sizeof(uint8_t));
 8027c0c:	2201      	movs	r2, #1
 8027c0e:	1d21      	adds	r1, r4, #4
 8027c10:	4630      	mov	r0, r6
 8027c12:	f7ff fedd 	bl	80279d0 <mg_send>
        break;
 8027c16:	e7d4      	b.n	8027bc2 <mg_send_mqtt_properties+0x5e>
        mg_send_u16(c, mg_htons((uint16_t) props[i].iv));
 8027c18:	88a0      	ldrh	r0, [r4, #4]
 8027c1a:	f7fe fae3 	bl	80261e4 <mg_ntohs>
 8027c1e:	4601      	mov	r1, r0
 8027c20:	4630      	mov	r0, r6
 8027c22:	f7ff ff92 	bl	8027b4a <mg_send_u16>
        break;
 8027c26:	e7cc      	b.n	8027bc2 <mg_send_mqtt_properties+0x5e>
        mg_send_u32(c, mg_htonl((uint32_t) props[i].iv));
 8027c28:	6860      	ldr	r0, [r4, #4]
 8027c2a:	f7fe fa43 	bl	80260b4 <mg_ntohl>
 8027c2e:	4601      	mov	r1, r0
 8027c30:	4630      	mov	r0, r6
 8027c32:	f7ff ff7f 	bl	8027b34 <mg_send_u32>
        break;
 8027c36:	e7c4      	b.n	8027bc2 <mg_send_mqtt_properties+0x5e>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 8027c38:	8aa0      	ldrh	r0, [r4, #20]
 8027c3a:	f7fe fad3 	bl	80261e4 <mg_ntohs>
 8027c3e:	4601      	mov	r1, r0
 8027c40:	4630      	mov	r0, r6
 8027c42:	f7ff ff82 	bl	8027b4a <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 8027c46:	6962      	ldr	r2, [r4, #20]
 8027c48:	6921      	ldr	r1, [r4, #16]
 8027c4a:	4630      	mov	r0, r6
 8027c4c:	f7ff fec0 	bl	80279d0 <mg_send>
        break;
 8027c50:	e7b7      	b.n	8027bc2 <mg_send_mqtt_properties+0x5e>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 8027c52:	8aa0      	ldrh	r0, [r4, #20]
 8027c54:	f7fe fac6 	bl	80261e4 <mg_ntohs>
 8027c58:	4601      	mov	r1, r0
 8027c5a:	4630      	mov	r0, r6
 8027c5c:	f7ff ff75 	bl	8027b4a <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 8027c60:	6962      	ldr	r2, [r4, #20]
 8027c62:	6921      	ldr	r1, [r4, #16]
 8027c64:	4630      	mov	r0, r6
 8027c66:	f7ff feb3 	bl	80279d0 <mg_send>
        break;
 8027c6a:	e7aa      	b.n	8027bc2 <mg_send_mqtt_properties+0x5e>
        len = encode_varint(buf_v, props[i].iv);
 8027c6c:	6861      	ldr	r1, [r4, #4]
 8027c6e:	a801      	add	r0, sp, #4
 8027c70:	f7f9 fd0d 	bl	802168e <encode_varint>
 8027c74:	4602      	mov	r2, r0
        mg_send(c, buf_v, (size_t) len);
 8027c76:	a901      	add	r1, sp, #4
 8027c78:	4630      	mov	r0, r6
 8027c7a:	f7ff fea9 	bl	80279d0 <mg_send>
        break;
 8027c7e:	e7a0      	b.n	8027bc2 <mg_send_mqtt_properties+0x5e>
}
 8027c80:	b003      	add	sp, #12
 8027c82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8027c86:	bf00      	nop

08027c88 <mg_mqtt_login>:
void mg_mqtt_login(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 8027c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027c8a:	b08b      	sub	sp, #44	@ 0x2c
 8027c8c:	4605      	mov	r5, r0
 8027c8e:	460c      	mov	r4, r1
  struct mg_str cid = opts->client_id;
 8027c90:	ab02      	add	r3, sp, #8
 8027c92:	f101 0210 	add.w	r2, r1, #16
 8027c96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8027c9a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t hdr[8] = {0, 4, 'M', 'Q', 'T', 'T', opts->version, 0};
 8027c9e:	2300      	movs	r3, #0
 8027ca0:	f88d 3000 	strb.w	r3, [sp]
 8027ca4:	2204      	movs	r2, #4
 8027ca6:	f88d 2001 	strb.w	r2, [sp, #1]
 8027caa:	224d      	movs	r2, #77	@ 0x4d
 8027cac:	f88d 2002 	strb.w	r2, [sp, #2]
 8027cb0:	2251      	movs	r2, #81	@ 0x51
 8027cb2:	f88d 2003 	strb.w	r2, [sp, #3]
 8027cb6:	2254      	movs	r2, #84	@ 0x54
 8027cb8:	f88d 2004 	strb.w	r2, [sp, #4]
 8027cbc:	f88d 2005 	strb.w	r2, [sp, #5]
 8027cc0:	f894 2029 	ldrb.w	r2, [r4, #41]	@ 0x29
 8027cc4:	f88d 2006 	strb.w	r2, [sp, #6]
 8027cc8:	f88d 3007 	strb.w	r3, [sp, #7]
  if (cid.len == 0) {
 8027ccc:	2900      	cmp	r1, #0
 8027cce:	f000 809f 	beq.w	8027e10 <mg_mqtt_login+0x188>
  if (hdr[6] == 0) hdr[6] = 4;  // If version is not set, use 4 (3.1.1)
 8027cd2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8027cd6:	b913      	cbnz	r3, 8027cde <mg_mqtt_login+0x56>
 8027cd8:	2304      	movs	r3, #4
 8027cda:	f88d 3006 	strb.w	r3, [sp, #6]
  c->is_mqtt5 = hdr[6] == 5;    // Set version 5 flag
 8027cde:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8027ce2:	2b05      	cmp	r3, #5
 8027ce4:	bf14      	ite	ne
 8027ce6:	2300      	movne	r3, #0
 8027ce8:	2301      	moveq	r3, #1
 8027cea:	f895 20ad 	ldrb.w	r2, [r5, #173]	@ 0xad
 8027cee:	f363 0282 	bfi	r2, r3, #2, #1
 8027cf2:	f885 20ad 	strb.w	r2, [r5, #173]	@ 0xad
  hdr[7] = (uint8_t) ((opts->qos & 3) << 3);  // Connection flags
 8027cf6:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 8027cfa:	00d2      	lsls	r2, r2, #3
 8027cfc:	f002 0218 	and.w	r2, r2, #24
 8027d00:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->user.len > 0) {
 8027d04:	6863      	ldr	r3, [r4, #4]
 8027d06:	2b00      	cmp	r3, #0
 8027d08:	f000 808e 	beq.w	8027e28 <mg_mqtt_login+0x1a0>
    total_len += 2 + (uint32_t) opts->user.len;
 8027d0c:	330e      	adds	r3, #14
    hdr[7] |= MQTT_HAS_USER_NAME;
 8027d0e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8027d12:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->pass.len > 0) {
 8027d16:	68e2      	ldr	r2, [r4, #12]
 8027d18:	b13a      	cbz	r2, 8027d2a <mg_mqtt_login+0xa2>
    total_len += 2 + (uint32_t) opts->pass.len;
 8027d1a:	441a      	add	r2, r3
 8027d1c:	1c93      	adds	r3, r2, #2
    hdr[7] |= MQTT_HAS_PASSWORD;
 8027d1e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8027d22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8027d26:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->topic.len > 0) { // allow zero-length msgs, message.len is size_t
 8027d2a:	69e2      	ldr	r2, [r4, #28]
 8027d2c:	b14a      	cbz	r2, 8027d42 <mg_mqtt_login+0xba>
    total_len += 4 + (uint32_t) opts->topic.len + (uint32_t) opts->message.len;
 8027d2e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8027d30:	440a      	add	r2, r1
 8027d32:	441a      	add	r2, r3
 8027d34:	1d13      	adds	r3, r2, #4
    hdr[7] |= MQTT_HAS_WILL;
 8027d36:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8027d3a:	f042 0204 	orr.w	r2, r2, #4
 8027d3e:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->clean || cid.len == 0) hdr[7] |= MQTT_CLEAN_SESSION;
 8027d42:	f894 202f 	ldrb.w	r2, [r4, #47]	@ 0x2f
 8027d46:	b90a      	cbnz	r2, 8027d4c <mg_mqtt_login+0xc4>
 8027d48:	9a03      	ldr	r2, [sp, #12]
 8027d4a:	b92a      	cbnz	r2, 8027d58 <mg_mqtt_login+0xd0>
 8027d4c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8027d50:	f042 0202 	orr.w	r2, r2, #2
 8027d54:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->retain) hdr[7] |= MQTT_WILL_RETAIN;
 8027d58:	f894 202e 	ldrb.w	r2, [r4, #46]	@ 0x2e
 8027d5c:	b12a      	cbz	r2, 8027d6a <mg_mqtt_login+0xe2>
 8027d5e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8027d62:	f042 0220 	orr.w	r2, r2, #32
 8027d66:	f88d 2007 	strb.w	r2, [sp, #7]
  total_len += (uint32_t) cid.len;
 8027d6a:	9f03      	ldr	r7, [sp, #12]
 8027d6c:	18fe      	adds	r6, r7, r3
  if (c->is_mqtt5) {
 8027d6e:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8027d72:	f013 0f04 	tst.w	r3, #4
 8027d76:	d159      	bne.n	8027e2c <mg_mqtt_login+0x1a4>
  mg_mqtt_send_header(c, MQTT_CMD_CONNECT, 0, (uint32_t) total_len);
 8027d78:	4633      	mov	r3, r6
 8027d7a:	2200      	movs	r2, #0
 8027d7c:	2101      	movs	r1, #1
 8027d7e:	4628      	mov	r0, r5
 8027d80:	f7ff feb8 	bl	8027af4 <mg_mqtt_send_header>
  mg_send(c, hdr, sizeof(hdr));
 8027d84:	2208      	movs	r2, #8
 8027d86:	4669      	mov	r1, sp
 8027d88:	4628      	mov	r0, r5
 8027d8a:	f7ff fe21 	bl	80279d0 <mg_send>
  mg_send_u16(c, mg_htons((uint16_t) opts->keepalive));
 8027d8e:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 8027d90:	f7fe fa28 	bl	80261e4 <mg_ntohs>
 8027d94:	4601      	mov	r1, r0
 8027d96:	4628      	mov	r0, r5
 8027d98:	f7ff fed7 	bl	8027b4a <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8027d9c:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8027da0:	f013 0f04 	tst.w	r3, #4
 8027da4:	d152      	bne.n	8027e4c <mg_mqtt_login+0x1c4>
  mg_send_u16(c, mg_htons((uint16_t) cid.len));
 8027da6:	b2b8      	uxth	r0, r7
 8027da8:	f7fe fa1c 	bl	80261e4 <mg_ntohs>
 8027dac:	4601      	mov	r1, r0
 8027dae:	4628      	mov	r0, r5
 8027db0:	f7ff fecb 	bl	8027b4a <mg_send_u16>
  mg_send(c, cid.buf, cid.len);
 8027db4:	463a      	mov	r2, r7
 8027db6:	9902      	ldr	r1, [sp, #8]
 8027db8:	4628      	mov	r0, r5
 8027dba:	f7ff fe09 	bl	80279d0 <mg_send>
  if (hdr[7] & MQTT_HAS_WILL) {
 8027dbe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8027dc2:	f013 0f04 	tst.w	r3, #4
 8027dc6:	d01c      	beq.n	8027e02 <mg_mqtt_login+0x17a>
    if (c->is_mqtt5)
 8027dc8:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8027dcc:	f013 0f04 	tst.w	r3, #4
 8027dd0:	d142      	bne.n	8027e58 <mg_mqtt_login+0x1d0>
    mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 8027dd2:	8ba0      	ldrh	r0, [r4, #28]
 8027dd4:	f7fe fa06 	bl	80261e4 <mg_ntohs>
 8027dd8:	4601      	mov	r1, r0
 8027dda:	4628      	mov	r0, r5
 8027ddc:	f7ff feb5 	bl	8027b4a <mg_send_u16>
    mg_send(c, opts->topic.buf, opts->topic.len);
 8027de0:	69e2      	ldr	r2, [r4, #28]
 8027de2:	69a1      	ldr	r1, [r4, #24]
 8027de4:	4628      	mov	r0, r5
 8027de6:	f7ff fdf3 	bl	80279d0 <mg_send>
    mg_send_u16(c, mg_htons((uint16_t) opts->message.len));
 8027dea:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 8027dec:	f7fe f9fa 	bl	80261e4 <mg_ntohs>
 8027df0:	4601      	mov	r1, r0
 8027df2:	4628      	mov	r0, r5
 8027df4:	f7ff fea9 	bl	8027b4a <mg_send_u16>
    mg_send(c, opts->message.buf, opts->message.len);
 8027df8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8027dfa:	6a21      	ldr	r1, [r4, #32]
 8027dfc:	4628      	mov	r0, r5
 8027dfe:	f7ff fde7 	bl	80279d0 <mg_send>
  if (opts->user.len > 0) {
 8027e02:	6860      	ldr	r0, [r4, #4]
 8027e04:	bb70      	cbnz	r0, 8027e64 <mg_mqtt_login+0x1dc>
  if (opts->pass.len > 0) {
 8027e06:	68e0      	ldr	r0, [r4, #12]
 8027e08:	2800      	cmp	r0, #0
 8027e0a:	d138      	bne.n	8027e7e <mg_mqtt_login+0x1f6>
}
 8027e0c:	b00b      	add	sp, #44	@ 0x2c
 8027e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mg_random_str(client_id, sizeof(client_id) - 1);
 8027e10:	2114      	movs	r1, #20
 8027e12:	a804      	add	r0, sp, #16
 8027e14:	f7fe f922 	bl	802605c <mg_random_str>
    client_id[sizeof(client_id) - 1] = '\0';
 8027e18:	2300      	movs	r3, #0
 8027e1a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    cid = mg_str(client_id);
 8027e1e:	a904      	add	r1, sp, #16
 8027e20:	a802      	add	r0, sp, #8
 8027e22:	f7fc fdad 	bl	8024980 <mg_str_s>
 8027e26:	e754      	b.n	8027cd2 <mg_mqtt_login+0x4a>
  size_t total_len = 7 + 1 + 2 + 2;
 8027e28:	230c      	movs	r3, #12
 8027e2a:	e774      	b.n	8027d16 <mg_mqtt_login+0x8e>
    total_len += get_props_size(opts->props, opts->num_props);
 8027e2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027e2e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8027e30:	f7f9 fcc0 	bl	80217b4 <get_props_size>
 8027e34:	4406      	add	r6, r0
    if (hdr[7] & MQTT_HAS_WILL)
 8027e36:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8027e3a:	f013 0f04 	tst.w	r3, #4
 8027e3e:	d09b      	beq.n	8027d78 <mg_mqtt_login+0xf0>
      total_len += get_props_size(opts->will_props, opts->num_will_props);
 8027e40:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8027e42:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8027e44:	f7f9 fcb6 	bl	80217b4 <get_props_size>
 8027e48:	4406      	add	r6, r0
 8027e4a:	e795      	b.n	8027d78 <mg_mqtt_login+0xf0>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8027e4c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8027e4e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8027e50:	4628      	mov	r0, r5
 8027e52:	f7ff fe87 	bl	8027b64 <mg_send_mqtt_properties>
 8027e56:	e7a6      	b.n	8027da6 <mg_mqtt_login+0x11e>
      mg_send_mqtt_properties(c, opts->will_props, opts->num_will_props);
 8027e58:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8027e5a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8027e5c:	4628      	mov	r0, r5
 8027e5e:	f7ff fe81 	bl	8027b64 <mg_send_mqtt_properties>
 8027e62:	e7b6      	b.n	8027dd2 <mg_mqtt_login+0x14a>
    mg_send_u16(c, mg_htons((uint16_t) opts->user.len));
 8027e64:	b280      	uxth	r0, r0
 8027e66:	f7fe f9bd 	bl	80261e4 <mg_ntohs>
 8027e6a:	4601      	mov	r1, r0
 8027e6c:	4628      	mov	r0, r5
 8027e6e:	f7ff fe6c 	bl	8027b4a <mg_send_u16>
    mg_send(c, opts->user.buf, opts->user.len);
 8027e72:	6862      	ldr	r2, [r4, #4]
 8027e74:	6821      	ldr	r1, [r4, #0]
 8027e76:	4628      	mov	r0, r5
 8027e78:	f7ff fdaa 	bl	80279d0 <mg_send>
 8027e7c:	e7c3      	b.n	8027e06 <mg_mqtt_login+0x17e>
    mg_send_u16(c, mg_htons((uint16_t) opts->pass.len));
 8027e7e:	b280      	uxth	r0, r0
 8027e80:	f7fe f9b0 	bl	80261e4 <mg_ntohs>
 8027e84:	4601      	mov	r1, r0
 8027e86:	4628      	mov	r0, r5
 8027e88:	f7ff fe5f 	bl	8027b4a <mg_send_u16>
    mg_send(c, opts->pass.buf, opts->pass.len);
 8027e8c:	68e2      	ldr	r2, [r4, #12]
 8027e8e:	68a1      	ldr	r1, [r4, #8]
 8027e90:	4628      	mov	r0, r5
 8027e92:	f7ff fd9d 	bl	80279d0 <mg_send>
}
 8027e96:	e7b9      	b.n	8027e0c <mg_mqtt_login+0x184>

08027e98 <mg_mqtt_sub>:
void mg_mqtt_sub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 8027e98:	b530      	push	{r4, r5, lr}
 8027e9a:	b083      	sub	sp, #12
 8027e9c:	4604      	mov	r4, r0
 8027e9e:	460d      	mov	r5, r1
  uint8_t qos_ = opts->qos & 3;
 8027ea0:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8027ea4:	f003 0303 	and.w	r3, r3, #3
 8027ea8:	f88d 3007 	strb.w	r3, [sp, #7]
  size_t plen = c->is_mqtt5 ? get_props_size(opts->props, opts->num_props) : 0;
 8027eac:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 8027eb0:	f013 0f04 	tst.w	r3, #4
 8027eb4:	d133      	bne.n	8027f1e <mg_mqtt_sub+0x86>
 8027eb6:	2000      	movs	r0, #0
  size_t len = 2 + opts->topic.len + 2 + 1 + plen;
 8027eb8:	69eb      	ldr	r3, [r5, #28]
 8027eba:	4403      	add	r3, r0
  mg_mqtt_send_header(c, MQTT_CMD_SUBSCRIBE, 2, (uint32_t) len);
 8027ebc:	3305      	adds	r3, #5
 8027ebe:	2202      	movs	r2, #2
 8027ec0:	2108      	movs	r1, #8
 8027ec2:	4620      	mov	r0, r4
 8027ec4:	f7ff fe16 	bl	8027af4 <mg_mqtt_send_header>
  if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 8027ec8:	6862      	ldr	r2, [r4, #4]
 8027eca:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 8027ecc:	3301      	adds	r3, #1
 8027ece:	b29b      	uxth	r3, r3
 8027ed0:	8593      	strh	r3, [r2, #44]	@ 0x2c
 8027ed2:	b91b      	cbnz	r3, 8027edc <mg_mqtt_sub+0x44>
 8027ed4:	6862      	ldr	r2, [r4, #4]
 8027ed6:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 8027ed8:	3301      	adds	r3, #1
 8027eda:	8593      	strh	r3, [r2, #44]	@ 0x2c
  mg_send_u16(c, mg_htons(c->mgr->mqtt_id));
 8027edc:	6863      	ldr	r3, [r4, #4]
 8027ede:	8d98      	ldrh	r0, [r3, #44]	@ 0x2c
 8027ee0:	f7fe f980 	bl	80261e4 <mg_ntohs>
 8027ee4:	4601      	mov	r1, r0
 8027ee6:	4620      	mov	r0, r4
 8027ee8:	f7ff fe2f 	bl	8027b4a <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8027eec:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027ef0:	f013 0f04 	tst.w	r3, #4
 8027ef4:	d118      	bne.n	8027f28 <mg_mqtt_sub+0x90>
  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 8027ef6:	8ba8      	ldrh	r0, [r5, #28]
 8027ef8:	f7fe f974 	bl	80261e4 <mg_ntohs>
 8027efc:	4601      	mov	r1, r0
 8027efe:	4620      	mov	r0, r4
 8027f00:	f7ff fe23 	bl	8027b4a <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 8027f04:	69ea      	ldr	r2, [r5, #28]
 8027f06:	69a9      	ldr	r1, [r5, #24]
 8027f08:	4620      	mov	r0, r4
 8027f0a:	f7ff fd61 	bl	80279d0 <mg_send>
  mg_send(c, &qos_, sizeof(qos_));
 8027f0e:	2201      	movs	r2, #1
 8027f10:	f10d 0107 	add.w	r1, sp, #7
 8027f14:	4620      	mov	r0, r4
 8027f16:	f7ff fd5b 	bl	80279d0 <mg_send>
}
 8027f1a:	b003      	add	sp, #12
 8027f1c:	bd30      	pop	{r4, r5, pc}
  size_t plen = c->is_mqtt5 ? get_props_size(opts->props, opts->num_props) : 0;
 8027f1e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8027f20:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8027f22:	f7f9 fc47 	bl	80217b4 <get_props_size>
 8027f26:	e7c7      	b.n	8027eb8 <mg_mqtt_sub+0x20>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8027f28:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8027f2a:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 8027f2c:	4620      	mov	r0, r4
 8027f2e:	f7ff fe19 	bl	8027b64 <mg_send_mqtt_properties>
 8027f32:	e7e0      	b.n	8027ef6 <mg_mqtt_sub+0x5e>

08027f34 <mg_mqtt_pub>:
uint16_t mg_mqtt_pub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 8027f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027f38:	b083      	sub	sp, #12
 8027f3a:	4605      	mov	r5, r0
 8027f3c:	460c      	mov	r4, r1
  uint16_t id = opts->retransmit_id;
 8027f3e:	f8b1 802c 	ldrh.w	r8, [r1, #44]	@ 0x2c
  uint8_t flags = (uint8_t) (((opts->qos & 3) << 1) | (opts->retain ? 1 : 0));
 8027f42:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8027f46:	005b      	lsls	r3, r3, #1
 8027f48:	f003 0306 	and.w	r3, r3, #6
 8027f4c:	f891 202e 	ldrb.w	r2, [r1, #46]	@ 0x2e
 8027f50:	2a00      	cmp	r2, #0
 8027f52:	d057      	beq.n	8028004 <mg_mqtt_pub+0xd0>
 8027f54:	2201      	movs	r2, #1
 8027f56:	ea43 0a02 	orr.w	sl, r3, r2
 8027f5a:	4656      	mov	r6, sl
  size_t len = 2 + opts->topic.len + opts->message.len;
 8027f5c:	69e7      	ldr	r7, [r4, #28]
 8027f5e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8027f60:	441f      	add	r7, r3
 8027f62:	f107 0902 	add.w	r9, r7, #2
  MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) opts->topic.len,
 8027f66:	4b3a      	ldr	r3, [pc, #232]	@ (8028050 <mg_mqtt_pub+0x11c>)
 8027f68:	681b      	ldr	r3, [r3, #0]
 8027f6a:	2b02      	cmp	r3, #2
 8027f6c:	dc4c      	bgt.n	8028008 <mg_mqtt_pub+0xd4>
  if (opts->qos > 0) len += 2;
 8027f6e:	f894 b028 	ldrb.w	fp, [r4, #40]	@ 0x28
 8027f72:	f1bb 0f00 	cmp.w	fp, #0
 8027f76:	d001      	beq.n	8027f7c <mg_mqtt_pub+0x48>
 8027f78:	f107 0904 	add.w	r9, r7, #4
  if (c->is_mqtt5) len += get_props_size(opts->props, opts->num_props);
 8027f7c:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8027f80:	f013 0f04 	tst.w	r3, #4
 8027f84:	d152      	bne.n	802802c <mg_mqtt_pub+0xf8>
  if (opts->qos > 0 && id != 0) flags |= 1 << 3;
 8027f86:	f1bb 0f00 	cmp.w	fp, #0
 8027f8a:	d004      	beq.n	8027f96 <mg_mqtt_pub+0x62>
 8027f8c:	f1b8 0f00 	cmp.w	r8, #0
 8027f90:	d001      	beq.n	8027f96 <mg_mqtt_pub+0x62>
 8027f92:	f04a 0608 	orr.w	r6, sl, #8
  mg_mqtt_send_header(c, MQTT_CMD_PUBLISH, flags, (uint32_t) len);
 8027f96:	464b      	mov	r3, r9
 8027f98:	4632      	mov	r2, r6
 8027f9a:	2103      	movs	r1, #3
 8027f9c:	4628      	mov	r0, r5
 8027f9e:	f7ff fda9 	bl	8027af4 <mg_mqtt_send_header>
  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 8027fa2:	8ba0      	ldrh	r0, [r4, #28]
 8027fa4:	f7fe f91e 	bl	80261e4 <mg_ntohs>
 8027fa8:	4601      	mov	r1, r0
 8027faa:	4628      	mov	r0, r5
 8027fac:	f7ff fdcd 	bl	8027b4a <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 8027fb0:	69e2      	ldr	r2, [r4, #28]
 8027fb2:	69a1      	ldr	r1, [r4, #24]
 8027fb4:	4628      	mov	r0, r5
 8027fb6:	f7ff fd0b 	bl	80279d0 <mg_send>
  if (opts->qos > 0) {    // need to send 'id' field
 8027fba:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8027fbe:	b1b3      	cbz	r3, 8027fee <mg_mqtt_pub+0xba>
    if (id == 0) {  // generate new one if not resending
 8027fc0:	f1b8 0f00 	cmp.w	r8, #0
 8027fc4:	d10c      	bne.n	8027fe0 <mg_mqtt_pub+0xac>
      if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 8027fc6:	686a      	ldr	r2, [r5, #4]
 8027fc8:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 8027fca:	3301      	adds	r3, #1
 8027fcc:	b29b      	uxth	r3, r3
 8027fce:	8593      	strh	r3, [r2, #44]	@ 0x2c
 8027fd0:	b91b      	cbnz	r3, 8027fda <mg_mqtt_pub+0xa6>
 8027fd2:	686a      	ldr	r2, [r5, #4]
 8027fd4:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 8027fd6:	3301      	adds	r3, #1
 8027fd8:	8593      	strh	r3, [r2, #44]	@ 0x2c
      id = c->mgr->mqtt_id;
 8027fda:	686b      	ldr	r3, [r5, #4]
 8027fdc:	f8b3 802c 	ldrh.w	r8, [r3, #44]	@ 0x2c
    mg_send_u16(c, mg_htons(id));
 8027fe0:	4640      	mov	r0, r8
 8027fe2:	f7fe f8ff 	bl	80261e4 <mg_ntohs>
 8027fe6:	4601      	mov	r1, r0
 8027fe8:	4628      	mov	r0, r5
 8027fea:	f7ff fdae 	bl	8027b4a <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8027fee:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8027ff2:	f013 0f04 	tst.w	r3, #4
 8027ff6:	d11f      	bne.n	8028038 <mg_mqtt_pub+0x104>
  if (opts->message.len > 0) mg_send(c, opts->message.buf, opts->message.len);
 8027ff8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8027ffa:	bb1a      	cbnz	r2, 8028044 <mg_mqtt_pub+0x110>
}
 8027ffc:	4640      	mov	r0, r8
 8027ffe:	b003      	add	sp, #12
 8028000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t flags = (uint8_t) (((opts->qos & 3) << 1) | (opts->retain ? 1 : 0));
 8028004:	2200      	movs	r2, #0
 8028006:	e7a6      	b.n	8027f56 <mg_mqtt_pub+0x22>
  MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) opts->topic.len,
 8028008:	4b12      	ldr	r3, [pc, #72]	@ (8028054 <mg_mqtt_pub+0x120>)
 802800a:	f241 123c 	movw	r2, #4412	@ 0x113c
 802800e:	4912      	ldr	r1, [pc, #72]	@ (8028058 <mg_mqtt_pub+0x124>)
 8028010:	2003      	movs	r0, #3
 8028012:	f7fe fc29 	bl	8026868 <mg_log_prefix>
 8028016:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8028018:	6a22      	ldr	r2, [r4, #32]
 802801a:	9201      	str	r2, [sp, #4]
 802801c:	9300      	str	r3, [sp, #0]
 802801e:	69a3      	ldr	r3, [r4, #24]
 8028020:	69e2      	ldr	r2, [r4, #28]
 8028022:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8028024:	480d      	ldr	r0, [pc, #52]	@ (802805c <mg_mqtt_pub+0x128>)
 8028026:	f7fc facd 	bl	80245c4 <mg_log>
 802802a:	e7a0      	b.n	8027f6e <mg_mqtt_pub+0x3a>
  if (c->is_mqtt5) len += get_props_size(opts->props, opts->num_props);
 802802c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802802e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8028030:	f7f9 fbc0 	bl	80217b4 <get_props_size>
 8028034:	4481      	add	r9, r0
 8028036:	e7a6      	b.n	8027f86 <mg_mqtt_pub+0x52>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8028038:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 802803a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802803c:	4628      	mov	r0, r5
 802803e:	f7ff fd91 	bl	8027b64 <mg_send_mqtt_properties>
 8028042:	e7d9      	b.n	8027ff8 <mg_mqtt_pub+0xc4>
  if (opts->message.len > 0) mg_send(c, opts->message.buf, opts->message.len);
 8028044:	6a21      	ldr	r1, [r4, #32]
 8028046:	4628      	mov	r0, r5
 8028048:	f7ff fcc2 	bl	80279d0 <mg_send>
 802804c:	e7d6      	b.n	8027ffc <mg_mqtt_pub+0xc8>
 802804e:	bf00      	nop
 8028050:	2000012c 	.word	0x2000012c
 8028054:	0803be80 	.word	0x0803be80
 8028058:	0803b480 	.word	0x0803b480
 802805c:	0803b820 	.word	0x0803b820

08028060 <mqtt_cb>:
static void mqtt_cb(struct mg_connection *c, int ev, void *ev_data) {
 8028060:	b530      	push	{r4, r5, lr}
 8028062:	b08f      	sub	sp, #60	@ 0x3c
 8028064:	4604      	mov	r4, r0
  if (ev == MG_EV_READ) {
 8028066:	2907      	cmp	r1, #7
 8028068:	f000 808f 	beq.w	802818a <mqtt_cb+0x12a>
}
 802806c:	b00f      	add	sp, #60	@ 0x3c
 802806e:	bd30      	pop	{r4, r5, pc}
      uint8_t version = c->is_mqtt5 ? 5 : 4;
 8028070:	2204      	movs	r2, #4
 8028072:	e091      	b.n	8028198 <mqtt_cb+0x138>
        MG_ERROR(("%lu MQTT malformed message", c->id));
 8028074:	4b73      	ldr	r3, [pc, #460]	@ (8028244 <mqtt_cb+0x1e4>)
 8028076:	681b      	ldr	r3, [r3, #0]
 8028078:	2b00      	cmp	r3, #0
 802807a:	dc06      	bgt.n	802808a <mqtt_cb+0x2a>
        c->is_closing = 1;
 802807c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8028080:	f043 0320 	orr.w	r3, r3, #32
 8028084:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
        break;
 8028088:	e7f0      	b.n	802806c <mqtt_cb+0xc>
        MG_ERROR(("%lu MQTT malformed message", c->id));
 802808a:	4b6f      	ldr	r3, [pc, #444]	@ (8028248 <mqtt_cb+0x1e8>)
 802808c:	f241 12b1 	movw	r2, #4529	@ 0x11b1
 8028090:	496e      	ldr	r1, [pc, #440]	@ (802824c <mqtt_cb+0x1ec>)
 8028092:	2001      	movs	r0, #1
 8028094:	f7fe fbe8 	bl	8026868 <mg_log_prefix>
 8028098:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802809a:	486d      	ldr	r0, [pc, #436]	@ (8028250 <mqtt_cb+0x1f0>)
 802809c:	f7fc fa92 	bl	80245c4 <mg_log>
 80280a0:	e7ec      	b.n	802807c <mqtt_cb+0x1c>
        MG_VERBOSE(("%lu MQTT CMD %d len %d [%.*s]", c->id, mm.cmd,
 80280a2:	4b69      	ldr	r3, [pc, #420]	@ (8028248 <mqtt_cb+0x1e8>)
 80280a4:	f241 12b5 	movw	r2, #4533	@ 0x11b5
 80280a8:	4968      	ldr	r1, [pc, #416]	@ (802824c <mqtt_cb+0x1ec>)
 80280aa:	2004      	movs	r0, #4
 80280ac:	f7fe fbdc 	bl	8026868 <mg_log_prefix>
 80280b0:	9b06      	ldr	r3, [sp, #24]
 80280b2:	9301      	str	r3, [sp, #4]
 80280b4:	9b07      	ldr	r3, [sp, #28]
 80280b6:	9300      	str	r3, [sp, #0]
 80280b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80280ba:	f89d 202a 	ldrb.w	r2, [sp, #42]	@ 0x2a
 80280be:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80280c0:	4864      	ldr	r0, [pc, #400]	@ (8028254 <mqtt_cb+0x1f4>)
 80280c2:	f7fc fa7f 	bl	80245c4 <mg_log>
 80280c6:	e077      	b.n	80281b8 <mqtt_cb+0x158>
            mg_call(c, MG_EV_MQTT_OPEN, &mm.ack);
 80280c8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80280ca:	2111      	movs	r1, #17
 80280cc:	4620      	mov	r0, r4
 80280ce:	f7fb f830 	bl	8023132 <mg_call>
            if (mm.ack == 0) {
 80280d2:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 80280d6:	b97b      	cbnz	r3, 80280f8 <mqtt_cb+0x98>
              MG_DEBUG(("%lu Connected", c->id));
 80280d8:	4b5a      	ldr	r3, [pc, #360]	@ (8028244 <mqtt_cb+0x1e4>)
 80280da:	681b      	ldr	r3, [r3, #0]
 80280dc:	2b02      	cmp	r3, #2
 80280de:	dd49      	ble.n	8028174 <mqtt_cb+0x114>
 80280e0:	4b59      	ldr	r3, [pc, #356]	@ (8028248 <mqtt_cb+0x1e8>)
 80280e2:	f241 12bb 	movw	r2, #4539	@ 0x11bb
 80280e6:	4959      	ldr	r1, [pc, #356]	@ (802824c <mqtt_cb+0x1ec>)
 80280e8:	2003      	movs	r0, #3
 80280ea:	f7fe fbbd 	bl	8026868 <mg_log_prefix>
 80280ee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80280f0:	4859      	ldr	r0, [pc, #356]	@ (8028258 <mqtt_cb+0x1f8>)
 80280f2:	f7fc fa67 	bl	80245c4 <mg_log>
 80280f6:	e03d      	b.n	8028174 <mqtt_cb+0x114>
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
 80280f8:	4b52      	ldr	r3, [pc, #328]	@ (8028244 <mqtt_cb+0x1e4>)
 80280fa:	681b      	ldr	r3, [r3, #0]
 80280fc:	2b00      	cmp	r3, #0
 80280fe:	dc06      	bgt.n	802810e <mqtt_cb+0xae>
              c->is_closing = 1;
 8028100:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8028104:	f043 0320 	orr.w	r3, r3, #32
 8028108:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
 802810c:	e032      	b.n	8028174 <mqtt_cb+0x114>
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
 802810e:	4b4e      	ldr	r3, [pc, #312]	@ (8028248 <mqtt_cb+0x1e8>)
 8028110:	f241 12bd 	movw	r2, #4541	@ 0x11bd
 8028114:	494d      	ldr	r1, [pc, #308]	@ (802824c <mqtt_cb+0x1ec>)
 8028116:	2001      	movs	r0, #1
 8028118:	f7fe fba6 	bl	8026868 <mg_log_prefix>
 802811c:	f89d 202c 	ldrb.w	r2, [sp, #44]	@ 0x2c
 8028120:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028122:	484e      	ldr	r0, [pc, #312]	@ (802825c <mqtt_cb+0x1fc>)
 8028124:	f7fc fa4e 	bl	80245c4 <mg_log>
 8028128:	e7ea      	b.n	8028100 <mqtt_cb+0xa0>
            if (mm.qos > 0) {
 802812a:	f89d 502b 	ldrb.w	r5, [sp, #43]	@ 0x2b
 802812e:	b1e5      	cbz	r5, 802816a <mqtt_cb+0x10a>
              uint16_t id = mg_ntohs(mm.id);
 8028130:	f8bd 0028 	ldrh.w	r0, [sp, #40]	@ 0x28
 8028134:	f7fe f856 	bl	80261e4 <mg_ntohs>
 8028138:	f8ad 000c 	strh.w	r0, [sp, #12]
              if (c->is_mqtt5) remaining_len += 2;  // 3.4.2
 802813c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8028140:	f013 0f04 	tst.w	r3, #4
 8028144:	d14a      	bne.n	80281dc <mqtt_cb+0x17c>
              uint32_t remaining_len = sizeof(id);
 8028146:	2302      	movs	r3, #2
              mg_mqtt_send_header(
 8028148:	2d02      	cmp	r5, #2
 802814a:	d049      	beq.n	80281e0 <mqtt_cb+0x180>
 802814c:	2104      	movs	r1, #4
 802814e:	2200      	movs	r2, #0
 8028150:	4620      	mov	r0, r4
 8028152:	f7ff fccf 	bl	8027af4 <mg_mqtt_send_header>
              mg_send(c, &id, sizeof(id));
 8028156:	2202      	movs	r2, #2
 8028158:	a903      	add	r1, sp, #12
 802815a:	4620      	mov	r0, r4
 802815c:	f7ff fc38 	bl	80279d0 <mg_send>
              if (c->is_mqtt5) {
 8028160:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8028164:	f013 0f04 	tst.w	r3, #4
 8028168:	d13c      	bne.n	80281e4 <mqtt_cb+0x184>
            mg_call(c, MG_EV_MQTT_MSG, &mm);  // let the app handle qos stuff
 802816a:	aa04      	add	r2, sp, #16
 802816c:	2110      	movs	r1, #16
 802816e:	4620      	mov	r0, r4
 8028170:	f7fa ffdf 	bl	8023132 <mg_call>
        mg_call(c, MG_EV_MQTT_CMD, &mm);
 8028174:	aa04      	add	r2, sp, #16
 8028176:	210f      	movs	r1, #15
 8028178:	4620      	mov	r0, r4
 802817a:	f7fa ffda 	bl	8023132 <mg_call>
        mg_iobuf_del(&c->recv, 0, mm.dgram.len);
 802817e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8028180:	2100      	movs	r1, #0
 8028182:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8028186:	f7fd ff38 	bl	8025ffa <mg_iobuf_del>
      uint8_t version = c->is_mqtt5 ? 5 : 4;
 802818a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802818e:	f013 0f04 	tst.w	r3, #4
 8028192:	f43f af6d 	beq.w	8028070 <mqtt_cb+0x10>
 8028196:	2205      	movs	r2, #5
      int rc = mg_mqtt_parse(c->recv.buf, c->recv.len, version, &mm);
 8028198:	ab04      	add	r3, sp, #16
 802819a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 802819c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 802819e:	f7fb fc8c 	bl	8023aba <mg_mqtt_parse>
      if (rc == MQTT_MALFORMED) {
 80281a2:	2802      	cmp	r0, #2
 80281a4:	f43f af66 	beq.w	8028074 <mqtt_cb+0x14>
      } else if (rc == MQTT_OK) {
 80281a8:	2800      	cmp	r0, #0
 80281aa:	f47f af5f 	bne.w	802806c <mqtt_cb+0xc>
        MG_VERBOSE(("%lu MQTT CMD %d len %d [%.*s]", c->id, mm.cmd,
 80281ae:	4b25      	ldr	r3, [pc, #148]	@ (8028244 <mqtt_cb+0x1e4>)
 80281b0:	681b      	ldr	r3, [r3, #0]
 80281b2:	2b03      	cmp	r3, #3
 80281b4:	f73f af75 	bgt.w	80280a2 <mqtt_cb+0x42>
        switch (mm.cmd) {
 80281b8:	f89d 302a 	ldrb.w	r3, [sp, #42]	@ 0x2a
 80281bc:	3b02      	subs	r3, #2
 80281be:	2b04      	cmp	r3, #4
 80281c0:	d8d8      	bhi.n	8028174 <mqtt_cb+0x114>
 80281c2:	a201      	add	r2, pc, #4	@ (adr r2, 80281c8 <mqtt_cb+0x168>)
 80281c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80281c8:	080280c9 	.word	0x080280c9
 80281cc:	0802812b 	.word	0x0802812b
 80281d0:	08028175 	.word	0x08028175
 80281d4:	080281f9 	.word	0x080281f9
 80281d8:	0802821f 	.word	0x0802821f
              if (c->is_mqtt5) remaining_len += 2;  // 3.4.2
 80281dc:	2304      	movs	r3, #4
 80281de:	e7b3      	b.n	8028148 <mqtt_cb+0xe8>
              mg_mqtt_send_header(
 80281e0:	2105      	movs	r1, #5
 80281e2:	e7b4      	b.n	802814e <mqtt_cb+0xee>
                uint16_t zero = 0;
 80281e4:	2300      	movs	r3, #0
 80281e6:	f8ad 300e 	strh.w	r3, [sp, #14]
                mg_send(c, &zero, sizeof(zero));
 80281ea:	2202      	movs	r2, #2
 80281ec:	f10d 010e 	add.w	r1, sp, #14
 80281f0:	4620      	mov	r0, r4
 80281f2:	f7ff fbed 	bl	80279d0 <mg_send>
 80281f6:	e7b8      	b.n	802816a <mqtt_cb+0x10a>
            uint16_t id = mg_ntohs(mm.id);
 80281f8:	f8bd 0028 	ldrh.w	r0, [sp, #40]	@ 0x28
 80281fc:	f7fd fff2 	bl	80261e4 <mg_ntohs>
 8028200:	f8ad 000e 	strh.w	r0, [sp, #14]
            mg_mqtt_send_header(c, MQTT_CMD_PUBREL, 2, remaining_len);
 8028204:	2302      	movs	r3, #2
 8028206:	461a      	mov	r2, r3
 8028208:	2106      	movs	r1, #6
 802820a:	4620      	mov	r0, r4
 802820c:	f7ff fc72 	bl	8027af4 <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));  // MQTT5 3.6.1-1, flags = 2
 8028210:	2202      	movs	r2, #2
 8028212:	f10d 010e 	add.w	r1, sp, #14
 8028216:	4620      	mov	r0, r4
 8028218:	f7ff fbda 	bl	80279d0 <mg_send>
            break;
 802821c:	e7aa      	b.n	8028174 <mqtt_cb+0x114>
            uint16_t id = mg_ntohs(mm.id);
 802821e:	f8bd 0028 	ldrh.w	r0, [sp, #40]	@ 0x28
 8028222:	f7fd ffdf 	bl	80261e4 <mg_ntohs>
 8028226:	f8ad 000e 	strh.w	r0, [sp, #14]
            mg_mqtt_send_header(c, MQTT_CMD_PUBCOMP, 0, remaining_len);
 802822a:	2302      	movs	r3, #2
 802822c:	2200      	movs	r2, #0
 802822e:	2107      	movs	r1, #7
 8028230:	4620      	mov	r0, r4
 8028232:	f7ff fc5f 	bl	8027af4 <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));
 8028236:	2202      	movs	r2, #2
 8028238:	f10d 010e 	add.w	r1, sp, #14
 802823c:	4620      	mov	r0, r4
 802823e:	f7ff fbc7 	bl	80279d0 <mg_send>
            break;
 8028242:	e797      	b.n	8028174 <mqtt_cb+0x114>
 8028244:	2000012c 	.word	0x2000012c
 8028248:	0803be78 	.word	0x0803be78
 802824c:	0803b480 	.word	0x0803b480
 8028250:	0803b838 	.word	0x0803b838
 8028254:	0803b854 	.word	0x0803b854
 8028258:	0803b874 	.word	0x0803b874
 802825c:	0803b884 	.word	0x0803b884

08028260 <tx_tcp>:
                     uint32_t seq, uint32_t ack, const void *buf, size_t len) {
 8028260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028264:	b088      	sub	sp, #32
 8028266:	4605      	mov	r5, r0
 8028268:	469a      	mov	sl, r3
 802826a:	9f15      	ldr	r7, [sp, #84]	@ 0x54
      tx_ip(ifp, dst_mac, 6, ifp->ip, dst_ip, sizeof(struct tcp) + len);
 802826c:	f107 0614 	add.w	r6, r7, #20
 8028270:	9601      	str	r6, [sp, #4]
 8028272:	9200      	str	r2, [sp, #0]
 8028274:	6883      	ldr	r3, [r0, #8]
 8028276:	2206      	movs	r2, #6
 8028278:	f7fd ffd4 	bl	8026224 <tx_ip>
 802827c:	4604      	mov	r4, r0
  struct tcp *tcp = (struct tcp *) (ip + 1);
 802827e:	f100 0914 	add.w	r9, r0, #20
  memset(tcp, 0, sizeof(*tcp));
 8028282:	2200      	movs	r2, #0
 8028284:	6142      	str	r2, [r0, #20]
 8028286:	6182      	str	r2, [r0, #24]
 8028288:	61c2      	str	r2, [r0, #28]
 802828a:	6202      	str	r2, [r0, #32]
 802828c:	6242      	str	r2, [r0, #36]	@ 0x24
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 802828e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8028290:	b10b      	cbz	r3, 8028296 <tx_tcp+0x36>
 8028292:	2f00      	cmp	r7, #0
 8028294:	d147      	bne.n	8028326 <tx_tcp+0xc6>
  tcp->sport = sport;
 8028296:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 802829a:	82a3      	strh	r3, [r4, #20]
  tcp->dport = dport;
 802829c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80282a0:	82e3      	strh	r3, [r4, #22]
  tcp->seq = seq;
 80282a2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80282a4:	61a3      	str	r3, [r4, #24]
  tcp->ack = ack;
 80282a6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80282a8:	61e3      	str	r3, [r4, #28]
  tcp->flags = flags;
 80282aa:	f884 a021 	strb.w	sl, [r4, #33]	@ 0x21
  tcp->win = mg_htons(MIP_TCP_WIN);
 80282ae:	f241 7070 	movw	r0, #6000	@ 0x1770
 80282b2:	f7fd ff97 	bl	80261e4 <mg_ntohs>
 80282b6:	8460      	strh	r0, [r4, #34]	@ 0x22
  tcp->off = (uint8_t) (sizeof(*tcp) / 4 << 4);
 80282b8:	2350      	movs	r3, #80	@ 0x50
 80282ba:	f884 3020 	strb.w	r3, [r4, #32]
  uint16_t n = (uint16_t) (sizeof(*tcp) + len);
 80282be:	b2bb      	uxth	r3, r7
 80282c0:	3314      	adds	r3, #20
  uint8_t pseudo[] = {0, ip->proto, (uint8_t) (n >> 8), (uint8_t) (n & 255)};
 80282c2:	2000      	movs	r0, #0
 80282c4:	f88d 001c 	strb.w	r0, [sp, #28]
 80282c8:	7a62      	ldrb	r2, [r4, #9]
 80282ca:	f88d 201d 	strb.w	r2, [sp, #29]
 80282ce:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80282d2:	f88d 201e 	strb.w	r2, [sp, #30]
 80282d6:	f88d 301f 	strb.w	r3, [sp, #31]
  cs = csumup(cs, tcp, n);
 80282da:	b2b2      	uxth	r2, r6
 80282dc:	4649      	mov	r1, r9
 80282de:	f7f9 fac9 	bl	8021874 <csumup>
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 80282e2:	f104 060c 	add.w	r6, r4, #12
 80282e6:	2204      	movs	r2, #4
 80282e8:	4631      	mov	r1, r6
 80282ea:	f7f9 fac3 	bl	8021874 <csumup>
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 80282ee:	f104 0810 	add.w	r8, r4, #16
 80282f2:	2204      	movs	r2, #4
 80282f4:	4641      	mov	r1, r8
 80282f6:	f7f9 fabd 	bl	8021874 <csumup>
  cs = csumup(cs, pseudo, sizeof(pseudo));
 80282fa:	2204      	movs	r2, #4
 80282fc:	a907      	add	r1, sp, #28
 80282fe:	f7f9 fab9 	bl	8021874 <csumup>
  tcp->csum = csumfin(cs);
 8028302:	f7fd ff7b 	bl	80261fc <csumfin>
 8028306:	84a0      	strh	r0, [r4, #36]	@ 0x24
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 8028308:	4b18      	ldr	r3, [pc, #96]	@ (802836c <tx_tcp+0x10c>)
 802830a:	681b      	ldr	r3, [r3, #0]
 802830c:	2b03      	cmp	r3, #3
 802830e:	dc10      	bgt.n	8028332 <tx_tcp+0xd2>
  return ether_output(ifp, PDIFF(ifp->tx.buf, tcp + 1) + len);
 8028310:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8028314:	696b      	ldr	r3, [r5, #20]
 8028316:	1ac9      	subs	r1, r1, r3
 8028318:	4439      	add	r1, r7
 802831a:	4628      	mov	r0, r5
 802831c:	f7f9 fabb 	bl	8021896 <ether_output>
}
 8028320:	b008      	add	sp, #32
 8028322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 8028326:	463a      	mov	r2, r7
 8028328:	4619      	mov	r1, r3
 802832a:	3028      	adds	r0, #40	@ 0x28
 802832c:	f004 fe7e 	bl	802d02c <memmove>
 8028330:	e7b1      	b.n	8028296 <tx_tcp+0x36>
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 8028332:	4b0f      	ldr	r3, [pc, #60]	@ (8028370 <tx_tcp+0x110>)
 8028334:	f241 5254 	movw	r2, #5460	@ 0x1554
 8028338:	490e      	ldr	r1, [pc, #56]	@ (8028374 <tx_tcp+0x114>)
 802833a:	2004      	movs	r0, #4
 802833c:	f7fe fa94 	bl	8026868 <mg_log_prefix>
 8028340:	8aa0      	ldrh	r0, [r4, #20]
 8028342:	f7fd ff4f 	bl	80261e4 <mg_ntohs>
 8028346:	4681      	mov	r9, r0
 8028348:	8ae0      	ldrh	r0, [r4, #22]
 802834a:	f7fd ff4b 	bl	80261e4 <mg_ntohs>
 802834e:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 8028352:	4909      	ldr	r1, [pc, #36]	@ (8028378 <tx_tcp+0x118>)
 8028354:	9704      	str	r7, [sp, #16]
 8028356:	9303      	str	r3, [sp, #12]
 8028358:	9002      	str	r0, [sp, #8]
 802835a:	f8cd 8004 	str.w	r8, [sp, #4]
 802835e:	9100      	str	r1, [sp, #0]
 8028360:	464b      	mov	r3, r9
 8028362:	4632      	mov	r2, r6
 8028364:	4805      	ldr	r0, [pc, #20]	@ (802837c <tx_tcp+0x11c>)
 8028366:	f7fc f92d 	bl	80245c4 <mg_log>
 802836a:	e7d1      	b.n	8028310 <tx_tcp+0xb0>
 802836c:	2000012c 	.word	0x2000012c
 8028370:	0803be3c 	.word	0x0803be3c
 8028374:	0803b480 	.word	0x0803b480
 8028378:	08024585 	.word	0x08024585
 802837c:	0803b8a4 	.word	0x0803b8a4

08028380 <send_syn>:
static void send_syn(struct mg_connection *c) {
 8028380:	b530      	push	{r4, r5, lr}
 8028382:	b087      	sub	sp, #28
 8028384:	4604      	mov	r4, r0
  uint32_t isn = mg_htonl((uint32_t) mg_ntohs(c->loc.port));
 8028386:	8b05      	ldrh	r5, [r0, #24]
 8028388:	4628      	mov	r0, r5
 802838a:	f7fd ff2b 	bl	80261e4 <mg_ntohs>
 802838e:	f7fd fe91 	bl	80260b4 <mg_ntohl>
 8028392:	4602      	mov	r2, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8028394:	6863      	ldr	r3, [r4, #4]
 8028396:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
  tx_tcp(ifp, s->mac, rem_ip, TH_SYN, c->loc.port, c->rem.port, isn, 0, NULL,
 8028398:	2300      	movs	r3, #0
 802839a:	9305      	str	r3, [sp, #20]
 802839c:	9304      	str	r3, [sp, #16]
 802839e:	9303      	str	r3, [sp, #12]
 80283a0:	9202      	str	r2, [sp, #8]
 80283a2:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 80283a4:	9301      	str	r3, [sp, #4]
 80283a6:	9500      	str	r5, [sp, #0]
 80283a8:	2302      	movs	r3, #2
 80283aa:	69e2      	ldr	r2, [r4, #28]
 80283ac:	f104 01c8 	add.w	r1, r4, #200	@ 0xc8
 80283b0:	f7ff ff56 	bl	8028260 <tx_tcp>
}
 80283b4:	b007      	add	sp, #28
 80283b6:	bd30      	pop	{r4, r5, pc}

080283b8 <tx_tcp_pkt>:
                         size_t len) {
 80283b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80283bc:	b087      	sub	sp, #28
 80283be:	4605      	mov	r5, r0
 80283c0:	4617      	mov	r7, r2
 80283c2:	4698      	mov	r8, r3
  uint32_t delta = (pkt->tcp->flags & (TH_SYN | TH_FIN)) ? 1 : 0;
 80283c4:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80283c6:	7b5c      	ldrb	r4, [r3, #13]
 80283c8:	f014 0403 	ands.w	r4, r4, #3
 80283cc:	bf18      	it	ne
 80283ce:	2401      	movne	r4, #1
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 80283d0:	690e      	ldr	r6, [r1, #16]
 80283d2:	3606      	adds	r6, #6
 80283d4:	69ca      	ldr	r2, [r1, #28]
 80283d6:	f8d2 900c 	ldr.w	r9, [r2, #12]
 80283da:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80283de:	f8b3 b000 	ldrh.w	fp, [r3]
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 80283e2:	6858      	ldr	r0, [r3, #4]
 80283e4:	f7fd fe66 	bl	80260b4 <mg_ntohl>
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 80283e8:	4420      	add	r0, r4
 80283ea:	f7fd fe63 	bl	80260b4 <mg_ntohl>
 80283ee:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80283f0:	9305      	str	r3, [sp, #20]
 80283f2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80283f4:	9304      	str	r3, [sp, #16]
 80283f6:	9003      	str	r0, [sp, #12]
 80283f8:	f8cd 8008 	str.w	r8, [sp, #8]
 80283fc:	f8cd b004 	str.w	fp, [sp, #4]
 8028400:	f8cd a000 	str.w	sl, [sp]
 8028404:	463b      	mov	r3, r7
 8028406:	464a      	mov	r2, r9
 8028408:	4631      	mov	r1, r6
 802840a:	4628      	mov	r0, r5
 802840c:	f7ff ff28 	bl	8028260 <tx_tcp>
}
 8028410:	b007      	add	sp, #28
 8028412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08028418 <settmout>:
static void settmout(struct mg_connection *c, uint8_t type) {
 8028418:	b530      	push	{r4, r5, lr}
 802841a:	b083      	sub	sp, #12
 802841c:	4604      	mov	r4, r0
 802841e:	460d      	mov	r5, r1
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8028420:	6843      	ldr	r3, [r0, #4]
 8028422:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
               : type == MIP_TTYPE_ARP ? MIP_TCP_ARP_MS
 8028424:	2901      	cmp	r1, #1
 8028426:	d01a      	beq.n	802845e <settmout+0x46>
 8028428:	2903      	cmp	r1, #3
 802842a:	d01a      	beq.n	8028462 <settmout+0x4a>
 802842c:	2904      	cmp	r1, #4
 802842e:	d01b      	beq.n	8028468 <settmout+0x50>
 8028430:	2902      	cmp	r1, #2
 8028432:	d012      	beq.n	802845a <settmout+0x42>
 8028434:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
  s->timer = ifp->now + n;
 8028438:	6d11      	ldr	r1, [r2, #80]	@ 0x50
 802843a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 802843c:	185b      	adds	r3, r3, r1
 802843e:	f142 0200 	adc.w	r2, r2, #0
 8028442:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 8028446:	f8c4 20bc 	str.w	r2, [r4, #188]	@ 0xbc
  s->ttype = type;
 802844a:	f884 50ce 	strb.w	r5, [r4, #206]	@ 0xce
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 802844e:	4b10      	ldr	r3, [pc, #64]	@ (8028490 <settmout+0x78>)
 8028450:	681b      	ldr	r3, [r3, #0]
 8028452:	2b03      	cmp	r3, #3
 8028454:	dc0b      	bgt.n	802846e <settmout+0x56>
}
 8028456:	b003      	add	sp, #12
 8028458:	bd30      	pop	{r4, r5, pc}
               : type == MIP_TTYPE_ARP ? MIP_TCP_ARP_MS
 802845a:	2364      	movs	r3, #100	@ 0x64
 802845c:	e7ec      	b.n	8028438 <settmout+0x20>
 802845e:	2396      	movs	r3, #150	@ 0x96
 8028460:	e7ea      	b.n	8028438 <settmout+0x20>
 8028462:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8028466:	e7e7      	b.n	8028438 <settmout+0x20>
 8028468:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 802846c:	e7e4      	b.n	8028438 <settmout+0x20>
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 802846e:	4b09      	ldr	r3, [pc, #36]	@ (8028494 <settmout+0x7c>)
 8028470:	f241 32e8 	movw	r2, #5096	@ 0x13e8
 8028474:	4908      	ldr	r1, [pc, #32]	@ (8028498 <settmout+0x80>)
 8028476:	2004      	movs	r0, #4
 8028478:	f7fe f9f6 	bl	8026868 <mg_log_prefix>
 802847c:	e9d4 232e 	ldrd	r2, r3, [r4, #184]	@ 0xb8
 8028480:	e9cd 2300 	strd	r2, r3, [sp]
 8028484:	462a      	mov	r2, r5
 8028486:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028488:	4804      	ldr	r0, [pc, #16]	@ (802849c <settmout+0x84>)
 802848a:	f7fc f89b 	bl	80245c4 <mg_log>
}
 802848e:	e7e2      	b.n	8028456 <settmout+0x3e>
 8028490:	2000012c 	.word	0x2000012c
 8028494:	0803be30 	.word	0x0803be30
 8028498:	0803b480 	.word	0x0803b480
 802849c:	0803b8c8 	.word	0x0803b8c8

080284a0 <mg_io_send>:
long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {
 80284a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80284a4:	b089      	sub	sp, #36	@ 0x24
 80284a6:	4604      	mov	r4, r0
 80284a8:	460e      	mov	r6, r1
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 80284aa:	6843      	ldr	r3, [r0, #4]
 80284ac:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
  uint32_t dst_ip = *(uint32_t *) c->rem.ip;
 80284ae:	f8d0 801c 	ldr.w	r8, [r0, #28]
  len = trim_len(c, len);
 80284b2:	4611      	mov	r1, r2
 80284b4:	f7ff fa2e 	bl	8027914 <trim_len>
 80284b8:	4605      	mov	r5, r0
  if (c->is_udp) {
 80284ba:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80284be:	f013 0f01 	tst.w	r3, #1
 80284c2:	d010      	beq.n	80284e6 <mg_io_send+0x46>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, dst_ip, c->rem.port, buf, len);
 80284c4:	68ba      	ldr	r2, [r7, #8]
 80284c6:	9003      	str	r0, [sp, #12]
 80284c8:	9602      	str	r6, [sp, #8]
 80284ca:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 80284cc:	9301      	str	r3, [sp, #4]
 80284ce:	f8cd 8000 	str.w	r8, [sp]
 80284d2:	8b23      	ldrh	r3, [r4, #24]
 80284d4:	f104 01c8 	add.w	r1, r4, #200	@ 0xc8
 80284d8:	4638      	mov	r0, r7
 80284da:	f7fd ff38 	bl	802634e <tx_udp>
  return (long) len;
 80284de:	4628      	mov	r0, r5
}
 80284e0:	b009      	add	sp, #36	@ 0x24
 80284e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tx_tcp(ifp, s->mac, dst_ip, TH_PUSH | TH_ACK, c->loc.port, c->rem.port,
 80284e6:	f104 09c8 	add.w	r9, r4, #200	@ 0xc8
 80284ea:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 80284ee:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
 80284f2:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 80284f6:	f7fd fddd 	bl	80260b4 <mg_ntohl>
 80284fa:	9007      	str	r0, [sp, #28]
 80284fc:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8028500:	f7fd fdd8 	bl	80260b4 <mg_ntohl>
 8028504:	9505      	str	r5, [sp, #20]
 8028506:	9604      	str	r6, [sp, #16]
 8028508:	9003      	str	r0, [sp, #12]
 802850a:	9b07      	ldr	r3, [sp, #28]
 802850c:	9302      	str	r3, [sp, #8]
 802850e:	f8cd b004 	str.w	fp, [sp, #4]
 8028512:	f8cd a000 	str.w	sl, [sp]
 8028516:	2318      	movs	r3, #24
 8028518:	4642      	mov	r2, r8
 802851a:	4649      	mov	r1, r9
 802851c:	4638      	mov	r0, r7
 802851e:	f7ff fe9f 	bl	8028260 <tx_tcp>
    if (sent == 0) {
 8028522:	b180      	cbz	r0, 8028546 <mg_io_send+0xa6>
    } else if (sent == (size_t) -1) {
 8028524:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8028528:	d010      	beq.n	802854c <mg_io_send+0xac>
      s->seq += (uint32_t) len;
 802852a:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 802852e:	442b      	add	r3, r5
 8028530:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
      if (s->ttype == MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_KEEPALIVE);
 8028534:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 8028538:	2b01      	cmp	r3, #1
 802853a:	d1d0      	bne.n	80284de <mg_io_send+0x3e>
 802853c:	2100      	movs	r1, #0
 802853e:	4620      	mov	r0, r4
 8028540:	f7ff ff6a 	bl	8028418 <settmout>
 8028544:	e7cb      	b.n	80284de <mg_io_send+0x3e>
      return MG_IO_WAIT;
 8028546:	f06f 0001 	mvn.w	r0, #1
 802854a:	e7c9      	b.n	80284e0 <mg_io_send+0x40>
      return MG_IO_ERR;
 802854c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8028550:	e7c6      	b.n	80284e0 <mg_io_send+0x40>
	...

08028554 <write_conn>:
static void write_conn(struct mg_connection *c) {
 8028554:	b510      	push	{r4, lr}
 8028556:	b082      	sub	sp, #8
 8028558:	4604      	mov	r4, r0
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 802855a:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
                       : mg_io_send(c, c->send.buf, c->send.len);
 802855e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8028562:	d00b      	beq.n	802857c <write_conn+0x28>
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8028564:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8028566:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8028568:	f7fd fc80 	bl	8025e6c <mg_tls_send>
 802856c:	9001      	str	r0, [sp, #4]
  if (len == MG_IO_ERR) {
 802856e:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8028572:	d008      	beq.n	8028586 <write_conn+0x32>
  } else if (len > 0) {
 8028574:	2800      	cmp	r0, #0
 8028576:	dc0b      	bgt.n	8028590 <write_conn+0x3c>
}
 8028578:	b002      	add	sp, #8
 802857a:	bd10      	pop	{r4, pc}
                       : mg_io_send(c, c->send.buf, c->send.len);
 802857c:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 802857e:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8028580:	f7ff ff8e 	bl	80284a0 <mg_io_send>
 8028584:	e7f2      	b.n	802856c <write_conn+0x18>
    mg_error(c, "tx err");
 8028586:	4908      	ldr	r1, [pc, #32]	@ (80285a8 <write_conn+0x54>)
 8028588:	4620      	mov	r0, r4
 802858a:	f7fe fa55 	bl	8026a38 <mg_error>
 802858e:	e7f3      	b.n	8028578 <write_conn+0x24>
    mg_iobuf_del(&c->send, 0, (size_t) len);
 8028590:	4602      	mov	r2, r0
 8028592:	2100      	movs	r1, #0
 8028594:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 8028598:	f7fd fd2f 	bl	8025ffa <mg_iobuf_del>
    mg_call(c, MG_EV_WRITE, &len);
 802859c:	aa01      	add	r2, sp, #4
 802859e:	2108      	movs	r1, #8
 80285a0:	4620      	mov	r0, r4
 80285a2:	f7fa fdc6 	bl	8023132 <mg_call>
}
 80285a6:	e7e7      	b.n	8028578 <write_conn+0x24>
 80285a8:	0803b8d8 	.word	0x0803b8d8

080285ac <init_closure>:
  if (c->is_udp == false && c->is_listening == false &&
 80285ac:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	@ 0xac
 80285b0:	f240 1221 	movw	r2, #289	@ 0x121
 80285b4:	421a      	tst	r2, r3
 80285b6:	d000      	beq.n	80285ba <init_closure+0xe>
 80285b8:	4770      	bx	lr
static void init_closure(struct mg_connection *c) {
 80285ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80285be:	b086      	sub	sp, #24
 80285c0:	4604      	mov	r4, r0
        (struct mg_tcpip_if *) c->mgr->priv;  // send TCP FIN
 80285c2:	6843      	ldr	r3, [r0, #4]
    struct mg_tcpip_if *ifp =
 80285c4:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 80285c6:	f8d0 801c 	ldr.w	r8, [r0, #28]
    tx_tcp(ifp, s->mac, rem_ip, TH_FIN | TH_ACK, c->loc.port, c->rem.port,
 80285ca:	f100 07c8 	add.w	r7, r0, #200	@ 0xc8
 80285ce:	f8b0 9018 	ldrh.w	r9, [r0, #24]
 80285d2:	f8b0 a02c 	ldrh.w	sl, [r0, #44]	@ 0x2c
 80285d6:	f8d0 00b0 	ldr.w	r0, [r0, #176]	@ 0xb0
 80285da:	f7fd fd6b 	bl	80260b4 <mg_ntohl>
 80285de:	4605      	mov	r5, r0
 80285e0:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 80285e4:	f7fd fd66 	bl	80260b4 <mg_ntohl>
 80285e8:	2300      	movs	r3, #0
 80285ea:	9305      	str	r3, [sp, #20]
 80285ec:	9304      	str	r3, [sp, #16]
 80285ee:	9003      	str	r0, [sp, #12]
 80285f0:	9502      	str	r5, [sp, #8]
 80285f2:	f8cd a004 	str.w	sl, [sp, #4]
 80285f6:	f8cd 9000 	str.w	r9, [sp]
 80285fa:	2311      	movs	r3, #17
 80285fc:	4642      	mov	r2, r8
 80285fe:	4639      	mov	r1, r7
 8028600:	4630      	mov	r0, r6
 8028602:	f7ff fe2d 	bl	8028260 <tx_tcp>
    settmout(c, MIP_TTYPE_FIN);
 8028606:	2104      	movs	r1, #4
 8028608:	4620      	mov	r0, r4
 802860a:	f7ff ff05 	bl	8028418 <settmout>
}
 802860e:	b006      	add	sp, #24
 8028610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08028614 <mg_connect_resolved>:
void mg_connect_resolved(struct mg_connection *c) {
 8028614:	b530      	push	{r4, r5, lr}
 8028616:	b085      	sub	sp, #20
 8028618:	4604      	mov	r4, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 802861a:	6843      	ldr	r3, [r0, #4]
 802861c:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 802861e:	69c3      	ldr	r3, [r0, #28]
 8028620:	9303      	str	r3, [sp, #12]
  c->is_resolving = 0;
 8028622:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8028626:	f36f 03c3 	bfc	r3, #3, #1
 802862a:	f880 30ac 	strb.w	r3, [r0, #172]	@ 0xac
  if (ifp->eport < MG_EPHEMERAL_PORT_BASE) ifp->eport = MG_EPHEMERAL_PORT_BASE;
 802862e:	f9b5 3068 	ldrsh.w	r3, [r5, #104]	@ 0x68
 8028632:	2b00      	cmp	r3, #0
 8028634:	db03      	blt.n	802863e <mg_connect_resolved+0x2a>
 8028636:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 802863a:	f8a5 3068 	strh.w	r3, [r5, #104]	@ 0x68
  memcpy(c->loc.ip, &ifp->ip, sizeof(uint32_t));
 802863e:	68ab      	ldr	r3, [r5, #8]
 8028640:	60a3      	str	r3, [r4, #8]
  c->loc.port = mg_htons(ifp->eport++);
 8028642:	f8b5 0068 	ldrh.w	r0, [r5, #104]	@ 0x68
 8028646:	1c43      	adds	r3, r0, #1
 8028648:	f8a5 3068 	strh.w	r3, [r5, #104]	@ 0x68
 802864c:	f7fd fdca 	bl	80261e4 <mg_ntohs>
 8028650:	8320      	strh	r0, [r4, #24]
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 8028652:	4b51      	ldr	r3, [pc, #324]	@ (8028798 <mg_connect_resolved+0x184>)
 8028654:	681b      	ldr	r3, [r3, #0]
 8028656:	2b02      	cmp	r3, #2
 8028658:	dc36      	bgt.n	80286c8 <mg_connect_resolved+0xb4>
  mg_call(c, MG_EV_RESOLVE, NULL);
 802865a:	2200      	movs	r2, #0
 802865c:	2103      	movs	r1, #3
 802865e:	4620      	mov	r0, r4
 8028660:	f7fa fd67 	bl	8023132 <mg_call>
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 8028664:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8028668:	f013 0301 	ands.w	r3, r3, #1
 802866c:	d009      	beq.n	8028682 <mg_connect_resolved+0x6e>
 802866e:	9903      	ldr	r1, [sp, #12]
 8028670:	f1b1 3fff 	cmp.w	r1, #4294967295	@ 0xffffffff
 8028674:	d03b      	beq.n	80286ee <mg_connect_resolved+0xda>
 8028676:	68aa      	ldr	r2, [r5, #8]
 8028678:	68e8      	ldr	r0, [r5, #12]
 802867a:	ea62 0200 	orn	r2, r2, r0
 802867e:	4291      	cmp	r1, r2
 8028680:	d035      	beq.n	80286ee <mg_connect_resolved+0xda>
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 8028682:	68aa      	ldr	r2, [r5, #8]
 8028684:	2a00      	cmp	r2, #0
 8028686:	d046      	beq.n	8028716 <mg_connect_resolved+0x102>
 8028688:	9903      	ldr	r1, [sp, #12]
 802868a:	68e8      	ldr	r0, [r5, #12]
 802868c:	404a      	eors	r2, r1
 802868e:	4202      	tst	r2, r0
 8028690:	d141      	bne.n	8028716 <mg_connect_resolved+0x102>
             rem_ip != ifp->gw) {  // skip if gw (onstatechange -> READY -> ARP)
 8028692:	692a      	ldr	r2, [r5, #16]
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 8028694:	4291      	cmp	r1, r2
 8028696:	d03e      	beq.n	8028716 <mg_connect_resolved+0x102>
    MG_DEBUG(("%lu ARP lookup...", c->id));
 8028698:	4b3f      	ldr	r3, [pc, #252]	@ (8028798 <mg_connect_resolved+0x184>)
 802869a:	681b      	ldr	r3, [r3, #0]
 802869c:	2b02      	cmp	r3, #2
 802869e:	dc2e      	bgt.n	80286fe <mg_connect_resolved+0xea>
    arp_ask(ifp, rem_ip);
 80286a0:	9903      	ldr	r1, [sp, #12]
 80286a2:	4628      	mov	r0, r5
 80286a4:	f7fd fe9b 	bl	80263de <arp_ask>
    settmout(c, MIP_TTYPE_ARP);
 80286a8:	2102      	movs	r1, #2
 80286aa:	4620      	mov	r0, r4
 80286ac:	f7ff feb4 	bl	8028418 <settmout>
    c->is_arplooking = 1;
 80286b0:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 80286b4:	f043 0310 	orr.w	r3, r3, #16
 80286b8:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    c->is_connecting = 1;
 80286bc:	b2db      	uxtb	r3, r3
 80286be:	f043 0320 	orr.w	r3, r3, #32
 80286c2:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
 80286c6:	e018      	b.n	80286fa <mg_connect_resolved+0xe6>
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 80286c8:	4b34      	ldr	r3, [pc, #208]	@ (802879c <mg_connect_resolved+0x188>)
 80286ca:	f241 724f 	movw	r2, #5967	@ 0x174f
 80286ce:	4934      	ldr	r1, [pc, #208]	@ (80287a0 <mg_connect_resolved+0x18c>)
 80286d0:	2003      	movs	r0, #3
 80286d2:	f7fe f8c9 	bl	8026868 <mg_log_prefix>
 80286d6:	4a33      	ldr	r2, [pc, #204]	@ (80287a4 <mg_connect_resolved+0x190>)
 80286d8:	f104 031c 	add.w	r3, r4, #28
 80286dc:	9301      	str	r3, [sp, #4]
 80286de:	9200      	str	r2, [sp, #0]
 80286e0:	f104 0308 	add.w	r3, r4, #8
 80286e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80286e6:	4830      	ldr	r0, [pc, #192]	@ (80287a8 <mg_connect_resolved+0x194>)
 80286e8:	f7fb ff6c 	bl	80245c4 <mg_log>
 80286ec:	e7b5      	b.n	802865a <mg_connect_resolved+0x46>
    memset(s->mac, 0xFF, sizeof(s->mac));  // global or local broadcast
 80286ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80286f2:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
 80286f6:	f8a4 30cc 	strh.w	r3, [r4, #204]	@ 0xcc
}
 80286fa:	b005      	add	sp, #20
 80286fc:	bd30      	pop	{r4, r5, pc}
    MG_DEBUG(("%lu ARP lookup...", c->id));
 80286fe:	4b27      	ldr	r3, [pc, #156]	@ (802879c <mg_connect_resolved+0x188>)
 8028700:	f241 7258 	movw	r2, #5976	@ 0x1758
 8028704:	4926      	ldr	r1, [pc, #152]	@ (80287a0 <mg_connect_resolved+0x18c>)
 8028706:	2003      	movs	r0, #3
 8028708:	f7fe f8ae 	bl	8026868 <mg_log_prefix>
 802870c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802870e:	4827      	ldr	r0, [pc, #156]	@ (80287ac <mg_connect_resolved+0x198>)
 8028710:	f7fb ff58 	bl	80245c4 <mg_log>
 8028714:	e7c4      	b.n	80286a0 <mg_connect_resolved+0x8c>
  } else if ((*((uint8_t *) &rem_ip) & 0xE0) == 0xE0) {
 8028716:	f89d 200c 	ldrb.w	r2, [sp, #12]
 802871a:	f002 02e0 	and.w	r2, r2, #224	@ 0xe0
 802871e:	2ae0      	cmp	r2, #224	@ 0xe0
 8028720:	d00e      	beq.n	8028740 <mg_connect_resolved+0x12c>
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
 8028722:	f8d5 2046 	ldr.w	r2, [r5, #70]	@ 0x46
 8028726:	f8c4 20c8 	str.w	r2, [r4, #200]	@ 0xc8
 802872a:	f8b5 204a 	ldrh.w	r2, [r5, #74]	@ 0x4a
 802872e:	f8a4 20cc 	strh.w	r2, [r4, #204]	@ 0xcc
    if (c->is_udp) {
 8028732:	b31b      	cbz	r3, 802877c <mg_connect_resolved+0x168>
      mg_call(c, MG_EV_CONNECT, NULL);
 8028734:	2200      	movs	r2, #0
 8028736:	2104      	movs	r1, #4
 8028738:	4620      	mov	r0, r4
 802873a:	f7fa fcfa 	bl	8023132 <mg_call>
 802873e:	e7dc      	b.n	80286fa <mg_connect_resolved+0xe6>
    uint8_t mcastp[3] = {0x01, 0x00, 0x5E};              // multicast group
 8028740:	4b1b      	ldr	r3, [pc, #108]	@ (80287b0 <mg_connect_resolved+0x19c>)
 8028742:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8028746:	f8ad 3008 	strh.w	r3, [sp, #8]
 802874a:	0c1b      	lsrs	r3, r3, #16
 802874c:	f88d 300a 	strb.w	r3, [sp, #10]
    memcpy(s->mac, mcastp, 3);
 8028750:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8028754:	b2db      	uxtb	r3, r3
 8028756:	f8a4 20c8 	strh.w	r2, [r4, #200]	@ 0xc8
 802875a:	f884 30ca 	strb.w	r3, [r4, #202]	@ 0xca
    memcpy(s->mac + 3, ((uint8_t *) &rem_ip) + 1, 3);  // 23 LSb
 802875e:	f8bd 200d 	ldrh.w	r2, [sp, #13]
 8028762:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8028766:	f8a4 20cb 	strh.w	r2, [r4, #203]	@ 0xcb
 802876a:	f884 30cd 	strb.w	r3, [r4, #205]	@ 0xcd
    s->mac[3] &= 0x7F;
 802876e:	f894 30cb 	ldrb.w	r3, [r4, #203]	@ 0xcb
 8028772:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8028776:	f884 30cb 	strb.w	r3, [r4, #203]	@ 0xcb
 802877a:	e7be      	b.n	80286fa <mg_connect_resolved+0xe6>
      send_syn(c);
 802877c:	4620      	mov	r0, r4
 802877e:	f7ff fdff 	bl	8028380 <send_syn>
      settmout(c, MIP_TTYPE_SYN);
 8028782:	2103      	movs	r1, #3
 8028784:	4620      	mov	r0, r4
 8028786:	f7ff fe47 	bl	8028418 <settmout>
      c->is_connecting = 1;
 802878a:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 802878e:	f043 0320 	orr.w	r3, r3, #32
 8028792:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
}
 8028796:	e7b0      	b.n	80286fa <mg_connect_resolved+0xe6>
 8028798:	2000012c 	.word	0x2000012c
 802879c:	0803be0c 	.word	0x0803be0c
 80287a0:	0803b480 	.word	0x0803b480
 80287a4:	0802671d 	.word	0x0802671d
 80287a8:	0803b8e0 	.word	0x0803b8e0
 80287ac:	0803b8f0 	.word	0x0803b8f0
 80287b0:	080363ac 	.word	0x080363ac

080287b4 <dns_cb>:
static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {
 80287b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80287b6:	b0c9      	sub	sp, #292	@ 0x124
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 80287b8:	6847      	ldr	r7, [r0, #4]
  if (ev == MG_EV_POLL) {
 80287ba:	2902      	cmp	r1, #2
 80287bc:	d009      	beq.n	80287d2 <dns_cb+0x1e>
 80287be:	4604      	mov	r4, r0
 80287c0:	f107 0630 	add.w	r6, r7, #48	@ 0x30
  } else if (ev == MG_EV_READ) {
 80287c4:	2907      	cmp	r1, #7
 80287c6:	d016      	beq.n	80287f6 <dns_cb+0x42>
  } else if (ev == MG_EV_CLOSE) {
 80287c8:	2909      	cmp	r1, #9
 80287ca:	f000 809a 	beq.w	8028902 <dns_cb+0x14e>
}
 80287ce:	b049      	add	sp, #292	@ 0x124
 80287d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint64_t now = *(uint64_t *) ev_data;
 80287d2:	6816      	ldr	r6, [r2, #0]
 80287d4:	6855      	ldr	r5, [r2, #4]
    for (d = *head; d != NULL; d = tmp) {
 80287d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80287d8:	e000      	b.n	80287dc <dns_cb+0x28>
static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {
 80287da:	4623      	mov	r3, r4
    for (d = *head; d != NULL; d = tmp) {
 80287dc:	2b00      	cmp	r3, #0
 80287de:	d0f6      	beq.n	80287ce <dns_cb+0x1a>
      tmp = d->next;
 80287e0:	681c      	ldr	r4, [r3, #0]
      if (now > d->expire) mg_error(d->c, "DNS timeout");
 80287e2:	6899      	ldr	r1, [r3, #8]
 80287e4:	68da      	ldr	r2, [r3, #12]
 80287e6:	42b1      	cmp	r1, r6
 80287e8:	41aa      	sbcs	r2, r5
 80287ea:	d2f6      	bcs.n	80287da <dns_cb+0x26>
 80287ec:	494c      	ldr	r1, [pc, #304]	@ (8028920 <dns_cb+0x16c>)
 80287ee:	6858      	ldr	r0, [r3, #4]
 80287f0:	f7fe f922 	bl	8026a38 <mg_error>
 80287f4:	e7f1      	b.n	80287da <dns_cb+0x26>
    if (mg_dns_parse(c->recv.buf, c->recv.len, &dm) == false) {
 80287f6:	aa02      	add	r2, sp, #8
 80287f8:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80287fa:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 80287fc:	f7fe f870 	bl	80268e0 <mg_dns_parse>
 8028800:	b9c8      	cbnz	r0, 8028836 <dns_cb+0x82>
      MG_ERROR(("Unexpected DNS response:"));
 8028802:	4b48      	ldr	r3, [pc, #288]	@ (8028924 <dns_cb+0x170>)
 8028804:	681b      	ldr	r3, [r3, #0]
 8028806:	2b00      	cmp	r3, #0
 8028808:	dc0a      	bgt.n	8028820 <dns_cb+0x6c>
      mg_hexdump(c->recv.buf, c->recv.len);
 802880a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 802880c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 802880e:	f7fb f83b 	bl	8023888 <mg_hexdump>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 8028812:	4b44      	ldr	r3, [pc, #272]	@ (8028924 <dns_cb+0x170>)
 8028814:	681b      	ldr	r3, [r3, #0]
 8028816:	2b00      	cmp	r3, #0
 8028818:	dc68      	bgt.n	80288ec <dns_cb+0x138>
    c->recv.len = 0;
 802881a:	2300      	movs	r3, #0
 802881c:	6423      	str	r3, [r4, #64]	@ 0x40
 802881e:	e7d6      	b.n	80287ce <dns_cb+0x1a>
      MG_ERROR(("Unexpected DNS response:"));
 8028820:	4b41      	ldr	r3, [pc, #260]	@ (8028928 <dns_cb+0x174>)
 8028822:	f240 42c1 	movw	r2, #1217	@ 0x4c1
 8028826:	4941      	ldr	r1, [pc, #260]	@ (802892c <dns_cb+0x178>)
 8028828:	2001      	movs	r0, #1
 802882a:	f7fe f81d 	bl	8026868 <mg_log_prefix>
 802882e:	4840      	ldr	r0, [pc, #256]	@ (8028930 <dns_cb+0x17c>)
 8028830:	f7fb fec8 	bl	80245c4 <mg_log>
 8028834:	e7e9      	b.n	802880a <dns_cb+0x56>
      for (d = *head; d != NULL; d = tmp) {
 8028836:	6b3d      	ldr	r5, [r7, #48]	@ 0x30
    int resolved = 0;
 8028838:	2100      	movs	r1, #0
      for (d = *head; d != NULL; d = tmp) {
 802883a:	e008      	b.n	802884e <dns_cb+0x9a>
            mg_connect_resolved(d->c);
 802883c:	6868      	ldr	r0, [r5, #4]
 802883e:	f7ff fee9 	bl	8028614 <mg_connect_resolved>
        mg_dns_free(head, d);
 8028842:	4629      	mov	r1, r5
 8028844:	4630      	mov	r0, r6
 8028846:	f7f9 fa35 	bl	8021cb4 <mg_dns_free>
        resolved = 1;
 802884a:	2101      	movs	r1, #1
 802884c:	463d      	mov	r5, r7
      for (d = *head; d != NULL; d = tmp) {
 802884e:	2d00      	cmp	r5, #0
 8028850:	d049      	beq.n	80288e6 <dns_cb+0x132>
        tmp = d->next;
 8028852:	682f      	ldr	r7, [r5, #0]
        if (dm.txnid != d->txnid) continue;
 8028854:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8028858:	8a2b      	ldrh	r3, [r5, #16]
 802885a:	429a      	cmp	r2, r3
 802885c:	d1f6      	bne.n	802884c <dns_cb+0x98>
        if (d->c->is_resolving) {
 802885e:	6868      	ldr	r0, [r5, #4]
 8028860:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8028864:	f013 0f08 	tst.w	r3, #8
 8028868:	d02c      	beq.n	80288c4 <dns_cb+0x110>
          if (dm.resolved) {
 802886a:	f89d 300a 	ldrb.w	r3, [sp, #10]
 802886e:	b323      	cbz	r3, 80288ba <dns_cb+0x106>
            dm.addr.port = d->c->rem.port;  // Save port
 8028870:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 8028872:	f8ad 301c 	strh.w	r3, [sp, #28]
            d->c->rem = dm.addr;            // Copy resolved address
 8028876:	686b      	ldr	r3, [r5, #4]
 8028878:	f103 0c1c 	add.w	ip, r3, #28
 802887c:	f10d 0e0c 	add.w	lr, sp, #12
 8028880:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8028884:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8028888:	f8de 3000 	ldr.w	r3, [lr]
 802888c:	f8cc 3000 	str.w	r3, [ip]
            MG_DEBUG(
 8028890:	4b24      	ldr	r3, [pc, #144]	@ (8028924 <dns_cb+0x170>)
 8028892:	681b      	ldr	r3, [r3, #0]
 8028894:	2b02      	cmp	r3, #2
 8028896:	ddd1      	ble.n	802883c <dns_cb+0x88>
 8028898:	4b23      	ldr	r3, [pc, #140]	@ (8028928 <dns_cb+0x174>)
 802889a:	f240 42cd 	movw	r2, #1229	@ 0x4cd
 802889e:	4923      	ldr	r1, [pc, #140]	@ (802892c <dns_cb+0x178>)
 80288a0:	2003      	movs	r0, #3
 80288a2:	f7fd ffe1 	bl	8026868 <mg_log_prefix>
 80288a6:	686b      	ldr	r3, [r5, #4]
 80288a8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80288aa:	331c      	adds	r3, #28
 80288ac:	9300      	str	r3, [sp, #0]
 80288ae:	4b21      	ldr	r3, [pc, #132]	@ (8028934 <dns_cb+0x180>)
 80288b0:	aa08      	add	r2, sp, #32
 80288b2:	4821      	ldr	r0, [pc, #132]	@ (8028938 <dns_cb+0x184>)
 80288b4:	f7fb fe86 	bl	80245c4 <mg_log>
 80288b8:	e7c0      	b.n	802883c <dns_cb+0x88>
            mg_error(d->c, "%s DNS lookup failed", dm.name);
 80288ba:	aa08      	add	r2, sp, #32
 80288bc:	491f      	ldr	r1, [pc, #124]	@ (802893c <dns_cb+0x188>)
 80288be:	f7fe f8bb 	bl	8026a38 <mg_error>
 80288c2:	e7be      	b.n	8028842 <dns_cb+0x8e>
          MG_ERROR(("%lu already resolved", d->c->id));
 80288c4:	4b17      	ldr	r3, [pc, #92]	@ (8028924 <dns_cb+0x170>)
 80288c6:	681b      	ldr	r3, [r3, #0]
 80288c8:	2b00      	cmp	r3, #0
 80288ca:	ddba      	ble.n	8028842 <dns_cb+0x8e>
 80288cc:	4b16      	ldr	r3, [pc, #88]	@ (8028928 <dns_cb+0x174>)
 80288ce:	f240 42da 	movw	r2, #1242	@ 0x4da
 80288d2:	4916      	ldr	r1, [pc, #88]	@ (802892c <dns_cb+0x178>)
 80288d4:	2001      	movs	r0, #1
 80288d6:	f7fd ffc7 	bl	8026868 <mg_log_prefix>
 80288da:	686b      	ldr	r3, [r5, #4]
 80288dc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80288de:	4818      	ldr	r0, [pc, #96]	@ (8028940 <dns_cb+0x18c>)
 80288e0:	f7fb fe70 	bl	80245c4 <mg_log>
 80288e4:	e7ad      	b.n	8028842 <dns_cb+0x8e>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 80288e6:	2900      	cmp	r1, #0
 80288e8:	d197      	bne.n	802881a <dns_cb+0x66>
 80288ea:	e792      	b.n	8028812 <dns_cb+0x5e>
 80288ec:	4b0e      	ldr	r3, [pc, #56]	@ (8028928 <dns_cb+0x174>)
 80288ee:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 80288f2:	490e      	ldr	r1, [pc, #56]	@ (802892c <dns_cb+0x178>)
 80288f4:	2001      	movs	r0, #1
 80288f6:	f7fd ffb7 	bl	8026868 <mg_log_prefix>
 80288fa:	4812      	ldr	r0, [pc, #72]	@ (8028944 <dns_cb+0x190>)
 80288fc:	f7fb fe62 	bl	80245c4 <mg_log>
 8028900:	e78b      	b.n	802881a <dns_cb+0x66>
    for (d = *head; d != NULL; d = tmp) {
 8028902:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 8028904:	2c00      	cmp	r4, #0
 8028906:	f43f af62 	beq.w	80287ce <dns_cb+0x1a>
      tmp = d->next;
 802890a:	6825      	ldr	r5, [r4, #0]
      mg_error(d->c, "DNS error");
 802890c:	490e      	ldr	r1, [pc, #56]	@ (8028948 <dns_cb+0x194>)
 802890e:	6860      	ldr	r0, [r4, #4]
 8028910:	f7fe f892 	bl	8026a38 <mg_error>
      mg_dns_free(head, d);
 8028914:	4621      	mov	r1, r4
 8028916:	4630      	mov	r0, r6
 8028918:	f7f9 f9cc 	bl	8021cb4 <mg_dns_free>
    for (d = *head; d != NULL; d = tmp) {
 802891c:	462c      	mov	r4, r5
 802891e:	e7f1      	b.n	8028904 <dns_cb+0x150>
 8028920:	0803b904 	.word	0x0803b904
 8028924:	2000012c 	.word	0x2000012c
 8028928:	0803bee0 	.word	0x0803bee0
 802892c:	0803b480 	.word	0x0803b480
 8028930:	0803b910 	.word	0x0803b910
 8028934:	08026701 	.word	0x08026701
 8028938:	0803b92c 	.word	0x0803b92c
 802893c:	0803b93c 	.word	0x0803b93c
 8028940:	0803b954 	.word	0x0803b954
 8028944:	0803b96c 	.word	0x0803b96c
 8028948:	0803b97c 	.word	0x0803b97c

0802894c <tx_dhcp_discover>:
static void tx_dhcp_discover(struct mg_tcpip_if *ifp) {
 802894c:	b510      	push	{r4, lr}
 802894e:	b086      	sub	sp, #24
 8028950:	4604      	mov	r4, r0
  uint8_t opts[] = {
 8028952:	4a12      	ldr	r2, [pc, #72]	@ (802899c <tx_dhcp_discover+0x50>)
 8028954:	ab04      	add	r3, sp, #16
 8028956:	e892 0003 	ldmia.w	r2, {r0, r1}
 802895a:	e883 0003 	stmia.w	r3, {r0, r1}
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 802895e:	2200      	movs	r2, #0
 8028960:	9202      	str	r2, [sp, #8]
 8028962:	2108      	movs	r1, #8
 8028964:	9101      	str	r1, [sp, #4]
 8028966:	9300      	str	r3, [sp, #0]
 8028968:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802896c:	490c      	ldr	r1, [pc, #48]	@ (80289a0 <tx_dhcp_discover+0x54>)
 802896e:	4620      	mov	r0, r4
 8028970:	f7fd fd7a 	bl	8026468 <tx_dhcp>
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 8028974:	4b0b      	ldr	r3, [pc, #44]	@ (80289a4 <tx_dhcp_discover+0x58>)
 8028976:	681b      	ldr	r3, [r3, #0]
 8028978:	2b02      	cmp	r3, #2
 802897a:	dc01      	bgt.n	8028980 <tx_dhcp_discover+0x34>
}
 802897c:	b006      	add	sp, #24
 802897e:	bd10      	pop	{r4, pc}
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 8028980:	4b09      	ldr	r3, [pc, #36]	@ (80289a8 <tx_dhcp_discover+0x5c>)
 8028982:	f241 4270 	movw	r2, #5232	@ 0x1470
 8028986:	4909      	ldr	r1, [pc, #36]	@ (80289ac <tx_dhcp_discover+0x60>)
 8028988:	2003      	movs	r0, #3
 802898a:	f7fd ff6d 	bl	8026868 <mg_log_prefix>
 802898e:	4622      	mov	r2, r4
 8028990:	4907      	ldr	r1, [pc, #28]	@ (80289b0 <tx_dhcp_discover+0x64>)
 8028992:	4808      	ldr	r0, [pc, #32]	@ (80289b4 <tx_dhcp_discover+0x68>)
 8028994:	f7fb fe16 	bl	80245c4 <mg_log>
}
 8028998:	e7f0      	b.n	802897c <tx_dhcp_discover+0x30>
 802899a:	bf00      	nop
 802899c:	0803b9a8 	.word	0x0803b9a8
 80289a0:	0803bf08 	.word	0x0803bf08
 80289a4:	2000012c 	.word	0x2000012c
 80289a8:	0803bddc 	.word	0x0803bddc
 80289ac:	0803b480 	.word	0x0803b480
 80289b0:	08024595 	.word	0x08024595
 80289b4:	0803b988 	.word	0x0803b988

080289b8 <tx_dhcp_request_re>:
                               uint32_t ip_src, uint32_t ip_dst) {
 80289b8:	b510      	push	{r4, lr}
 80289ba:	b086      	sub	sp, #24
  uint8_t opts[] = {
 80289bc:	4c0d      	ldr	r4, [pc, #52]	@ (80289f4 <tx_dhcp_request_re+0x3c>)
 80289be:	9405      	str	r4, [sp, #20]
  tx_dhcp(ifp, mac_dst, ip_src, ip_dst, opts, sizeof(opts), true);
 80289c0:	2401      	movs	r4, #1
 80289c2:	9402      	str	r4, [sp, #8]
 80289c4:	2404      	movs	r4, #4
 80289c6:	9401      	str	r4, [sp, #4]
 80289c8:	ac05      	add	r4, sp, #20
 80289ca:	9400      	str	r4, [sp, #0]
 80289cc:	f7fd fd4c 	bl	8026468 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 80289d0:	4b09      	ldr	r3, [pc, #36]	@ (80289f8 <tx_dhcp_request_re+0x40>)
 80289d2:	681b      	ldr	r3, [r3, #0]
 80289d4:	2b02      	cmp	r3, #2
 80289d6:	dc01      	bgt.n	80289dc <tx_dhcp_request_re+0x24>
}
 80289d8:	b006      	add	sp, #24
 80289da:	bd10      	pop	{r4, pc}
  MG_DEBUG(("DHCP req sent"));
 80289dc:	4b07      	ldr	r3, [pc, #28]	@ (80289fc <tx_dhcp_request_re+0x44>)
 80289de:	f241 4266 	movw	r2, #5222	@ 0x1466
 80289e2:	4907      	ldr	r1, [pc, #28]	@ (8028a00 <tx_dhcp_request_re+0x48>)
 80289e4:	2003      	movs	r0, #3
 80289e6:	f7fd ff3f 	bl	8026868 <mg_log_prefix>
 80289ea:	4806      	ldr	r0, [pc, #24]	@ (8028a04 <tx_dhcp_request_re+0x4c>)
 80289ec:	f7fb fdea 	bl	80245c4 <mg_log>
}
 80289f0:	e7f2      	b.n	80289d8 <tx_dhcp_request_re+0x20>
 80289f2:	bf00      	nop
 80289f4:	ff030135 	.word	0xff030135
 80289f8:	2000012c 	.word	0x2000012c
 80289fc:	0803bdb8 	.word	0x0803bdb8
 8028a00:	0803b480 	.word	0x0803b480
 8028a04:	0803b9b4 	.word	0x0803b9b4

08028a08 <rx_arp>:
static void rx_arp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8028a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028a0a:	b083      	sub	sp, #12
 8028a0c:	4604      	mov	r4, r0
 8028a0e:	460d      	mov	r5, r1
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 8028a10:	698e      	ldr	r6, [r1, #24]
 8028a12:	88f7      	ldrh	r7, [r6, #6]
 8028a14:	2001      	movs	r0, #1
 8028a16:	f7fd fbe5 	bl	80261e4 <mg_ntohs>
 8028a1a:	4287      	cmp	r7, r0
 8028a1c:	d006      	beq.n	8028a2c <rx_arp+0x24>
  } else if (pkt->arp->op == mg_htons(2)) {
 8028a1e:	2002      	movs	r0, #2
 8028a20:	f7fd fbe0 	bl	80261e4 <mg_ntohs>
 8028a24:	4287      	cmp	r7, r0
 8028a26:	d05a      	beq.n	8028ade <rx_arp+0xd6>
}
 8028a28:	b003      	add	sp, #12
 8028a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 8028a2c:	69b2      	ldr	r2, [r6, #24]
 8028a2e:	68a3      	ldr	r3, [r4, #8]
 8028a30:	429a      	cmp	r2, r3
 8028a32:	d1f4      	bne.n	8028a1e <rx_arp+0x16>
    struct eth *eth = (struct eth *) ifp->tx.buf;
 8028a34:	6966      	ldr	r6, [r4, #20]
    memcpy(eth->dst, pkt->eth->src, sizeof(eth->dst));
 8028a36:	692b      	ldr	r3, [r5, #16]
 8028a38:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8028a3c:	6032      	str	r2, [r6, #0]
 8028a3e:	895b      	ldrh	r3, [r3, #10]
 8028a40:	80b3      	strh	r3, [r6, #4]
    memcpy(eth->src, ifp->mac, sizeof(eth->src));
 8028a42:	6823      	ldr	r3, [r4, #0]
 8028a44:	f8c6 3006 	str.w	r3, [r6, #6]
 8028a48:	88a3      	ldrh	r3, [r4, #4]
 8028a4a:	8173      	strh	r3, [r6, #10]
    eth->type = mg_htons(0x806);
 8028a4c:	f640 0006 	movw	r0, #2054	@ 0x806
 8028a50:	f7fd fbc8 	bl	80261e4 <mg_ntohs>
 8028a54:	81b0      	strh	r0, [r6, #12]
    *arp = *pkt->arp;
 8028a56:	69ab      	ldr	r3, [r5, #24]
 8028a58:	6818      	ldr	r0, [r3, #0]
 8028a5a:	6859      	ldr	r1, [r3, #4]
 8028a5c:	689a      	ldr	r2, [r3, #8]
 8028a5e:	68df      	ldr	r7, [r3, #12]
 8028a60:	f8c6 000e 	str.w	r0, [r6, #14]
 8028a64:	f8c6 1012 	str.w	r1, [r6, #18]
 8028a68:	f8c6 2016 	str.w	r2, [r6, #22]
 8028a6c:	f8c6 701a 	str.w	r7, [r6, #26]
 8028a70:	6918      	ldr	r0, [r3, #16]
 8028a72:	6959      	ldr	r1, [r3, #20]
 8028a74:	699a      	ldr	r2, [r3, #24]
 8028a76:	f8c6 001e 	str.w	r0, [r6, #30]
 8028a7a:	f8c6 1022 	str.w	r1, [r6, #34]	@ 0x22
 8028a7e:	f8c6 2026 	str.w	r2, [r6, #38]	@ 0x26
    arp->op = mg_htons(2);
 8028a82:	2002      	movs	r0, #2
 8028a84:	f7fd fbae 	bl	80261e4 <mg_ntohs>
 8028a88:	82b0      	strh	r0, [r6, #20]
    memcpy(arp->tha, pkt->arp->sha, sizeof(pkt->arp->tha));
 8028a8a:	69ab      	ldr	r3, [r5, #24]
 8028a8c:	689a      	ldr	r2, [r3, #8]
 8028a8e:	6232      	str	r2, [r6, #32]
 8028a90:	899b      	ldrh	r3, [r3, #12]
 8028a92:	84b3      	strh	r3, [r6, #36]	@ 0x24
    memcpy(arp->sha, ifp->mac, sizeof(pkt->arp->sha));
 8028a94:	6823      	ldr	r3, [r4, #0]
 8028a96:	f8c6 3016 	str.w	r3, [r6, #22]
 8028a9a:	88a3      	ldrh	r3, [r4, #4]
 8028a9c:	8373      	strh	r3, [r6, #26]
    arp->tpa = pkt->arp->spa;
 8028a9e:	69ab      	ldr	r3, [r5, #24]
 8028aa0:	f8d3 300e 	ldr.w	r3, [r3, #14]
 8028aa4:	f8c6 3026 	str.w	r3, [r6, #38]	@ 0x26
    arp->spa = ifp->ip;
 8028aa8:	68a3      	ldr	r3, [r4, #8]
 8028aaa:	61f3      	str	r3, [r6, #28]
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 8028aac:	4b32      	ldr	r3, [pc, #200]	@ (8028b78 <rx_arp+0x170>)
 8028aae:	681b      	ldr	r3, [r3, #0]
 8028ab0:	2b02      	cmp	r3, #2
 8028ab2:	dc04      	bgt.n	8028abe <rx_arp+0xb6>
    ether_output(ifp, PDIFF(eth, arp + 1));
 8028ab4:	212a      	movs	r1, #42	@ 0x2a
 8028ab6:	4620      	mov	r0, r4
 8028ab8:	f7f8 feed 	bl	8021896 <ether_output>
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 8028abc:	e7b4      	b.n	8028a28 <rx_arp+0x20>
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 8028abe:	4b2f      	ldr	r3, [pc, #188]	@ (8028b7c <rx_arp+0x174>)
 8028ac0:	f241 4292 	movw	r2, #5266	@ 0x1492
 8028ac4:	492e      	ldr	r1, [pc, #184]	@ (8028b80 <rx_arp+0x178>)
 8028ac6:	2003      	movs	r0, #3
 8028ac8:	f7fd fece 	bl	8026868 <mg_log_prefix>
 8028acc:	9400      	str	r4, [sp, #0]
 8028ace:	4b2d      	ldr	r3, [pc, #180]	@ (8028b84 <rx_arp+0x17c>)
 8028ad0:	f106 0226 	add.w	r2, r6, #38	@ 0x26
 8028ad4:	492c      	ldr	r1, [pc, #176]	@ (8028b88 <rx_arp+0x180>)
 8028ad6:	482d      	ldr	r0, [pc, #180]	@ (8028b8c <rx_arp+0x184>)
 8028ad8:	f7fb fd74 	bl	80245c4 <mg_log>
 8028adc:	e7ea      	b.n	8028ab4 <rx_arp+0xac>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 8028ade:	2206      	movs	r2, #6
 8028ae0:	4621      	mov	r1, r4
 8028ae2:	f106 0012 	add.w	r0, r6, #18
 8028ae6:	f004 fa27 	bl	802cf38 <memcmp>
 8028aea:	2800      	cmp	r0, #0
 8028aec:	d19c      	bne.n	8028a28 <rx_arp+0x20>
    if (pkt->arp->spa == ifp->gw) {
 8028aee:	f8d6 200e 	ldr.w	r2, [r6, #14]
 8028af2:	6923      	ldr	r3, [r4, #16]
 8028af4:	429a      	cmp	r2, r3
 8028af6:	d026      	beq.n	8028b46 <rx_arp+0x13e>
      struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 8028af8:	2200      	movs	r2, #0
 8028afa:	4629      	mov	r1, r5
 8028afc:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8028afe:	f7fa f9ac 	bl	8022e5a <getpeer>
      if (c != NULL && c->is_arplooking) {
 8028b02:	4604      	mov	r4, r0
 8028b04:	2800      	cmp	r0, #0
 8028b06:	d08f      	beq.n	8028a28 <rx_arp+0x20>
 8028b08:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8028b0c:	f013 0f10 	tst.w	r3, #16
 8028b10:	d08a      	beq.n	8028a28 <rx_arp+0x20>
        memcpy(s->mac, pkt->arp->sha, sizeof(s->mac));
 8028b12:	f100 05c8 	add.w	r5, r0, #200	@ 0xc8
 8028b16:	68b3      	ldr	r3, [r6, #8]
 8028b18:	f8c0 30c8 	str.w	r3, [r0, #200]	@ 0xc8
 8028b1c:	89b3      	ldrh	r3, [r6, #12]
 8028b1e:	f8a0 30cc 	strh.w	r3, [r0, #204]	@ 0xcc
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 8028b22:	4b15      	ldr	r3, [pc, #84]	@ (8028b78 <rx_arp+0x170>)
 8028b24:	681b      	ldr	r3, [r3, #0]
 8028b26:	2b02      	cmp	r3, #2
 8028b28:	dc14      	bgt.n	8028b54 <rx_arp+0x14c>
        c->is_arplooking = 0;
 8028b2a:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8028b2e:	f36f 1304 	bfc	r3, #4, #1
 8028b32:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
        send_syn(c);
 8028b36:	4620      	mov	r0, r4
 8028b38:	f7ff fc22 	bl	8028380 <send_syn>
        settmout(c, MIP_TTYPE_SYN);
 8028b3c:	2103      	movs	r1, #3
 8028b3e:	4620      	mov	r0, r4
 8028b40:	f7ff fc6a 	bl	8028418 <settmout>
 8028b44:	e770      	b.n	8028a28 <rx_arp+0x20>
      memcpy(ifp->gwmac, pkt->arp->sha, sizeof(ifp->gwmac));
 8028b46:	68b3      	ldr	r3, [r6, #8]
 8028b48:	f8c4 3046 	str.w	r3, [r4, #70]	@ 0x46
 8028b4c:	89b3      	ldrh	r3, [r6, #12]
 8028b4e:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 8028b52:	e769      	b.n	8028a28 <rx_arp+0x20>
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 8028b54:	4b09      	ldr	r3, [pc, #36]	@ (8028b7c <rx_arp+0x174>)
 8028b56:	f241 429f 	movw	r2, #5279	@ 0x149f
 8028b5a:	4909      	ldr	r1, [pc, #36]	@ (8028b80 <rx_arp+0x178>)
 8028b5c:	2003      	movs	r0, #3
 8028b5e:	f7fd fe83 	bl	8026868 <mg_log_prefix>
 8028b62:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028b64:	9501      	str	r5, [sp, #4]
 8028b66:	4b07      	ldr	r3, [pc, #28]	@ (8028b84 <rx_arp+0x17c>)
 8028b68:	9300      	str	r3, [sp, #0]
 8028b6a:	f104 031c 	add.w	r3, r4, #28
 8028b6e:	4a06      	ldr	r2, [pc, #24]	@ (8028b88 <rx_arp+0x180>)
 8028b70:	4807      	ldr	r0, [pc, #28]	@ (8028b90 <rx_arp+0x188>)
 8028b72:	f7fb fd27 	bl	80245c4 <mg_log>
 8028b76:	e7d8      	b.n	8028b2a <rx_arp+0x122>
 8028b78:	2000012c 	.word	0x2000012c
 8028b7c:	0803bda4 	.word	0x0803bda4
 8028b80:	0803b480 	.word	0x0803b480
 8028b84:	08024595 	.word	0x08024595
 8028b88:	08024585 	.word	0x08024585
 8028b8c:	0803b9c4 	.word	0x0803b9c4
 8028b90:	0803b9dc 	.word	0x0803b9dc

08028b94 <tx_dhcp_request_sel>:
                                uint32_t ip_srv) {
 8028b94:	b570      	push	{r4, r5, r6, lr}
 8028b96:	b08c      	sub	sp, #48	@ 0x30
 8028b98:	4686      	mov	lr, r0
 8028b9a:	460d      	mov	r5, r1
 8028b9c:	4616      	mov	r6, r2
  uint8_t opts[] = {
 8028b9e:	f10d 0c14 	add.w	ip, sp, #20
 8028ba2:	4c22      	ldr	r4, [pc, #136]	@ (8028c2c <tx_dhcp_request_sel+0x98>)
 8028ba4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8028ba6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8028baa:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8028bae:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8028bb2:	f82c 2b02 	strh.w	r2, [ip], #2
 8028bb6:	0c12      	lsrs	r2, r2, #16
 8028bb8:	f88c 2000 	strb.w	r2, [ip]
  memcpy(opts + 10, &ip_srv, sizeof(ip_srv));
 8028bbc:	f8cd 601e 	str.w	r6, [sp, #30]
  memcpy(opts + 16, &ip_req, sizeof(ip_req));
 8028bc0:	9509      	str	r5, [sp, #36]	@ 0x24
  if (ifp->enable_req_dns) opts[24 + addopts++] = 6;    // DNS
 8028bc2:	f89e 301f 	ldrb.w	r3, [lr, #31]
 8028bc6:	b323      	cbz	r3, 8028c12 <tx_dhcp_request_sel+0x7e>
 8028bc8:	2306      	movs	r3, #6
 8028bca:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8028bce:	2301      	movs	r3, #1
  if (ifp->enable_req_sntp) opts[24 + addopts++] = 42;  // SNTP
 8028bd0:	f89e 2020 	ldrb.w	r2, [lr, #32]
 8028bd4:	b132      	cbz	r2, 8028be4 <tx_dhcp_request_sel+0x50>
 8028bd6:	1c5a      	adds	r2, r3, #1
 8028bd8:	3348      	adds	r3, #72	@ 0x48
 8028bda:	446b      	add	r3, sp
 8028bdc:	212a      	movs	r1, #42	@ 0x2a
 8028bde:	f803 1c1c 	strb.w	r1, [r3, #-28]
 8028be2:	b2d3      	uxtb	r3, r2
  opts[21] += addopts;
 8028be4:	f89d 2029 	ldrb.w	r2, [sp, #41]	@ 0x29
 8028be8:	441a      	add	r2, r3
 8028bea:	f88d 2029 	strb.w	r2, [sp, #41]	@ 0x29
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts,
 8028bee:	2200      	movs	r2, #0
 8028bf0:	9202      	str	r2, [sp, #8]
 8028bf2:	3319      	adds	r3, #25
 8028bf4:	9301      	str	r3, [sp, #4]
 8028bf6:	ab05      	add	r3, sp, #20
 8028bf8:	9300      	str	r3, [sp, #0]
 8028bfa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8028bfe:	490c      	ldr	r1, [pc, #48]	@ (8028c30 <tx_dhcp_request_sel+0x9c>)
 8028c00:	4670      	mov	r0, lr
 8028c02:	f7fd fc31 	bl	8026468 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 8028c06:	4b0b      	ldr	r3, [pc, #44]	@ (8028c34 <tx_dhcp_request_sel+0xa0>)
 8028c08:	681b      	ldr	r3, [r3, #0]
 8028c0a:	2b02      	cmp	r3, #2
 8028c0c:	dc03      	bgt.n	8028c16 <tx_dhcp_request_sel+0x82>
}
 8028c0e:	b00c      	add	sp, #48	@ 0x30
 8028c10:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t addopts = 0;
 8028c12:	2300      	movs	r3, #0
 8028c14:	e7dc      	b.n	8028bd0 <tx_dhcp_request_sel+0x3c>
  MG_DEBUG(("DHCP req sent"));
 8028c16:	4b08      	ldr	r3, [pc, #32]	@ (8028c38 <tx_dhcp_request_sel+0xa4>)
 8028c18:	f241 425b 	movw	r2, #5211	@ 0x145b
 8028c1c:	4907      	ldr	r1, [pc, #28]	@ (8028c3c <tx_dhcp_request_sel+0xa8>)
 8028c1e:	2003      	movs	r0, #3
 8028c20:	f7fd fe22 	bl	8026868 <mg_log_prefix>
 8028c24:	4806      	ldr	r0, [pc, #24]	@ (8028c40 <tx_dhcp_request_sel+0xac>)
 8028c26:	f7fb fccd 	bl	80245c4 <mg_log>
}
 8028c2a:	e7f0      	b.n	8028c0e <tx_dhcp_request_sel+0x7a>
 8028c2c:	080365d8 	.word	0x080365d8
 8028c30:	0803bf08 	.word	0x0803bf08
 8028c34:	2000012c 	.word	0x2000012c
 8028c38:	0803bd78 	.word	0x0803bd78
 8028c3c:	0803b480 	.word	0x0803b480
 8028c40:	0803b9b4 	.word	0x0803b9b4

08028c44 <read_conn>:
static void read_conn(struct mg_connection *c, struct pkt *pkt) {
 8028c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028c48:	b089      	sub	sp, #36	@ 0x24
 8028c4a:	4604      	mov	r4, r0
 8028c4c:	460d      	mov	r5, r1
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 8028c4e:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8028c52:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8028c56:	d049      	beq.n	8028cec <read_conn+0xa8>
 8028c58:	f100 0968 	add.w	r9, r0, #104	@ 0x68
  uint32_t seq = mg_ntohl(pkt->tcp->seq);
 8028c5c:	6aaf      	ldr	r7, [r5, #40]	@ 0x28
 8028c5e:	6878      	ldr	r0, [r7, #4]
 8028c60:	f7fd fa28 	bl	80260b4 <mg_ntohl>
 8028c64:	4680      	mov	r8, r0
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8028c66:	69e6      	ldr	r6, [r4, #28]
  if (pkt->tcp->flags & TH_FIN) {
 8028c68:	7b7b      	ldrb	r3, [r7, #13]
 8028c6a:	f013 0f01 	tst.w	r3, #1
 8028c6e:	d053      	beq.n	8028d18 <read_conn+0xd4>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len + 1);
 8028c70:	68eb      	ldr	r3, [r5, #12]
 8028c72:	4403      	add	r3, r0
 8028c74:	3301      	adds	r3, #1
 8028c76:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
    if (c->is_draining && s->ttype == MIP_TTYPE_FIN) {
 8028c7a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8028c7e:	f013 0f10 	tst.w	r3, #16
 8028c82:	d003      	beq.n	8028c8c <read_conn+0x48>
 8028c84:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 8028c88:	2b04      	cmp	r3, #4
 8028c8a:	d032      	beq.n	8028cf2 <read_conn+0xae>
      c->is_draining = 1;
 8028c8c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8028c90:	f043 0310 	orr.w	r3, r3, #16
 8028c94:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
      settmout(c, MIP_TTYPE_FIN);
 8028c98:	2104      	movs	r1, #4
 8028c9a:	4620      	mov	r0, r4
 8028c9c:	f7ff fbbc 	bl	8028418 <settmout>
      flags |= TH_FIN;
 8028ca0:	f04f 0b11 	mov.w	fp, #17
    tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, flags,
 8028ca4:	6863      	ldr	r3, [r4, #4]
 8028ca6:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 8028ca8:	f104 08c8 	add.w	r8, r4, #200	@ 0xc8
 8028cac:	f8b4 9018 	ldrh.w	r9, [r4, #24]
 8028cb0:	f8b4 a02c 	ldrh.w	sl, [r4, #44]	@ 0x2c
 8028cb4:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8028cb8:	f7fd f9fc 	bl	80260b4 <mg_ntohl>
 8028cbc:	4605      	mov	r5, r0
 8028cbe:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8028cc2:	f7fd f9f7 	bl	80260b4 <mg_ntohl>
 8028cc6:	2300      	movs	r3, #0
 8028cc8:	9305      	str	r3, [sp, #20]
 8028cca:	4b9b      	ldr	r3, [pc, #620]	@ (8028f38 <read_conn+0x2f4>)
 8028ccc:	9304      	str	r3, [sp, #16]
 8028cce:	9003      	str	r0, [sp, #12]
 8028cd0:	9502      	str	r5, [sp, #8]
 8028cd2:	f8cd a004 	str.w	sl, [sp, #4]
 8028cd6:	f8cd 9000 	str.w	r9, [sp]
 8028cda:	465b      	mov	r3, fp
 8028cdc:	4632      	mov	r2, r6
 8028cde:	4641      	mov	r1, r8
 8028ce0:	4638      	mov	r0, r7
 8028ce2:	f7ff fabd 	bl	8028260 <tx_tcp>
}
 8028ce6:	b009      	add	sp, #36	@ 0x24
 8028ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 8028cec:	f100 0938 	add.w	r9, r0, #56	@ 0x38
 8028cf0:	e7b4      	b.n	8028c5c <read_conn+0x18>
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 8028cf2:	f8d4 70b0 	ldr.w	r7, [r4, #176]	@ 0xb0
 8028cf6:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8028cf8:	6898      	ldr	r0, [r3, #8]
 8028cfa:	f7fd f9db 	bl	80260b4 <mg_ntohl>
 8028cfe:	4287      	cmp	r7, r0
 8028d00:	d004      	beq.n	8028d0c <read_conn+0xc8>
        s->seq = mg_htonl(pkt->tcp->ack);       // Set to peer's ACK
 8028d02:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0
    uint8_t flags = TH_ACK;
 8028d06:	f04f 0b10 	mov.w	fp, #16
 8028d0a:	e7cb      	b.n	8028ca4 <read_conn+0x60>
        s->seq++;                               // Yes. Increment our SEQ
 8028d0c:	3701      	adds	r7, #1
 8028d0e:	f8c4 70b0 	str.w	r7, [r4, #176]	@ 0xb0
    uint8_t flags = TH_ACK;
 8028d12:	f04f 0b10 	mov.w	fp, #16
 8028d16:	e7c5      	b.n	8028ca4 <read_conn+0x60>
  } else if (pkt->pay.len == 0) {
 8028d18:	68eb      	ldr	r3, [r5, #12]
 8028d1a:	2b00      	cmp	r3, #0
 8028d1c:	d0e3      	beq.n	8028ce6 <read_conn+0xa2>
  } else if (seq != s->ack) {
 8028d1e:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 8028d22:	4282      	cmp	r2, r0
 8028d24:	d046      	beq.n	8028db4 <read_conn+0x170>
    uint32_t ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 8028d26:	181d      	adds	r5, r3, r0
    if (s->ack == ack) {
 8028d28:	42aa      	cmp	r2, r5
 8028d2a:	d025      	beq.n	8028d78 <read_conn+0x134>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 8028d2c:	4b83      	ldr	r3, [pc, #524]	@ (8028f3c <read_conn+0x2f8>)
 8028d2e:	681b      	ldr	r3, [r3, #0]
 8028d30:	2b03      	cmp	r3, #3
 8028d32:	dc30      	bgt.n	8028d96 <read_conn+0x152>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 8028d34:	6863      	ldr	r3, [r4, #4]
 8028d36:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 8028d38:	f104 08c8 	add.w	r8, r4, #200	@ 0xc8
 8028d3c:	f8b4 9018 	ldrh.w	r9, [r4, #24]
 8028d40:	f8b4 a02c 	ldrh.w	sl, [r4, #44]	@ 0x2c
 8028d44:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8028d48:	f7fd f9b4 	bl	80260b4 <mg_ntohl>
 8028d4c:	4605      	mov	r5, r0
 8028d4e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8028d52:	f7fd f9af 	bl	80260b4 <mg_ntohl>
 8028d56:	2300      	movs	r3, #0
 8028d58:	9305      	str	r3, [sp, #20]
 8028d5a:	4b77      	ldr	r3, [pc, #476]	@ (8028f38 <read_conn+0x2f4>)
 8028d5c:	9304      	str	r3, [sp, #16]
 8028d5e:	9003      	str	r0, [sp, #12]
 8028d60:	9502      	str	r5, [sp, #8]
 8028d62:	f8cd a004 	str.w	sl, [sp, #4]
 8028d66:	f8cd 9000 	str.w	r9, [sp]
 8028d6a:	2310      	movs	r3, #16
 8028d6c:	4632      	mov	r2, r6
 8028d6e:	4641      	mov	r1, r8
 8028d70:	4638      	mov	r0, r7
 8028d72:	f7ff fa75 	bl	8028260 <tx_tcp>
 8028d76:	e7b6      	b.n	8028ce6 <read_conn+0xa2>
      MG_VERBOSE(("ignoring duplicate pkt"));
 8028d78:	4b70      	ldr	r3, [pc, #448]	@ (8028f3c <read_conn+0x2f8>)
 8028d7a:	681b      	ldr	r3, [r3, #0]
 8028d7c:	2b03      	cmp	r3, #3
 8028d7e:	ddb2      	ble.n	8028ce6 <read_conn+0xa2>
 8028d80:	4b6f      	ldr	r3, [pc, #444]	@ (8028f40 <read_conn+0x2fc>)
 8028d82:	f241 52da 	movw	r2, #5594	@ 0x15da
 8028d86:	496f      	ldr	r1, [pc, #444]	@ (8028f44 <read_conn+0x300>)
 8028d88:	2004      	movs	r0, #4
 8028d8a:	f7fd fd6d 	bl	8026868 <mg_log_prefix>
 8028d8e:	486e      	ldr	r0, [pc, #440]	@ (8028f48 <read_conn+0x304>)
 8028d90:	f7fb fc18 	bl	80245c4 <mg_log>
 8028d94:	e7a7      	b.n	8028ce6 <read_conn+0xa2>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 8028d96:	4b6a      	ldr	r3, [pc, #424]	@ (8028f40 <read_conn+0x2fc>)
 8028d98:	f241 52dc 	movw	r2, #5596	@ 0x15dc
 8028d9c:	4969      	ldr	r1, [pc, #420]	@ (8028f44 <read_conn+0x300>)
 8028d9e:	2004      	movs	r0, #4
 8028da0:	f7fd fd62 	bl	8026868 <mg_log_prefix>
 8028da4:	462b      	mov	r3, r5
 8028da6:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 8028daa:	4641      	mov	r1, r8
 8028dac:	4867      	ldr	r0, [pc, #412]	@ (8028f4c <read_conn+0x308>)
 8028dae:	f7fb fc09 	bl	80245c4 <mg_log>
 8028db2:	e7bf      	b.n	8028d34 <read_conn+0xf0>
  } else if (io->size - io->len < pkt->pay.len &&
 8028db4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8028db8:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8028dbc:	1a52      	subs	r2, r2, r1
 8028dbe:	4293      	cmp	r3, r2
 8028dc0:	d905      	bls.n	8028dce <read_conn+0x18a>
             !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 8028dc2:	4419      	add	r1, r3
 8028dc4:	4648      	mov	r0, r9
 8028dc6:	f7fe fb8b 	bl	80274e0 <mg_iobuf_resize>
  } else if (io->size - io->len < pkt->pay.len &&
 8028dca:	2800      	cmp	r0, #0
 8028dcc:	d05c      	beq.n	8028e88 <read_conn+0x244>
    memcpy(&io->buf[io->len], pkt->pay.buf, pkt->pay.len);
 8028dce:	f8d9 0000 	ldr.w	r0, [r9]
 8028dd2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8028dd6:	68ea      	ldr	r2, [r5, #12]
 8028dd8:	68a9      	ldr	r1, [r5, #8]
 8028dda:	4418      	add	r0, r3
 8028ddc:	f005 fb7c 	bl	802e4d8 <memcpy>
    io->len += pkt->pay.len;
 8028de0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8028de4:	68ea      	ldr	r2, [r5, #12]
 8028de6:	4413      	add	r3, r2
 8028de8:	f8c9 3008 	str.w	r3, [r9, #8]
    MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 8028dec:	4b53      	ldr	r3, [pc, #332]	@ (8028f3c <read_conn+0x2f8>)
 8028dee:	681b      	ldr	r3, [r3, #0]
 8028df0:	2b03      	cmp	r3, #3
 8028df2:	dc4e      	bgt.n	8028e92 <read_conn+0x24e>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 8028df4:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8028df6:	6858      	ldr	r0, [r3, #4]
 8028df8:	f7fd f95c 	bl	80260b4 <mg_ntohl>
 8028dfc:	68eb      	ldr	r3, [r5, #12]
 8028dfe:	4418      	add	r0, r3
 8028e00:	f8c4 00b4 	str.w	r0, [r4, #180]	@ 0xb4
    s->unacked += pkt->pay.len;
 8028e04:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8028e08:	68ea      	ldr	r2, [r5, #12]
 8028e0a:	4413      	add	r3, r2
 8028e0c:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
    if (s->unacked > MIP_TCP_WIN / 2 && s->acked != s->ack) {
 8028e10:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8028e14:	4293      	cmp	r3, r2
 8028e16:	d95e      	bls.n	8028ed6 <read_conn+0x292>
 8028e18:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
 8028e1c:	4298      	cmp	r0, r3
 8028e1e:	d05a      	beq.n	8028ed6 <read_conn+0x292>
      MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 8028e20:	4b46      	ldr	r3, [pc, #280]	@ (8028f3c <read_conn+0x2f8>)
 8028e22:	681b      	ldr	r3, [r3, #0]
 8028e24:	2b03      	cmp	r3, #3
 8028e26:	dc48      	bgt.n	8028eba <read_conn+0x276>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 8028e28:	6863      	ldr	r3, [r4, #4]
 8028e2a:	f8d3 903c 	ldr.w	r9, [r3, #60]	@ 0x3c
 8028e2e:	f104 08c8 	add.w	r8, r4, #200	@ 0xc8
 8028e32:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 8028e36:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
 8028e3a:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8028e3e:	f7fd f939 	bl	80260b4 <mg_ntohl>
 8028e42:	9007      	str	r0, [sp, #28]
 8028e44:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8028e48:	f7fd f934 	bl	80260b4 <mg_ntohl>
 8028e4c:	2700      	movs	r7, #0
 8028e4e:	9705      	str	r7, [sp, #20]
 8028e50:	9704      	str	r7, [sp, #16]
 8028e52:	9003      	str	r0, [sp, #12]
 8028e54:	9b07      	ldr	r3, [sp, #28]
 8028e56:	9302      	str	r3, [sp, #8]
 8028e58:	f8cd b004 	str.w	fp, [sp, #4]
 8028e5c:	f8cd a000 	str.w	sl, [sp]
 8028e60:	2310      	movs	r3, #16
 8028e62:	4632      	mov	r2, r6
 8028e64:	4641      	mov	r1, r8
 8028e66:	4648      	mov	r0, r9
 8028e68:	f7ff f9fa 	bl	8028260 <tx_tcp>
      s->unacked = 0;
 8028e6c:	f8c4 70c4 	str.w	r7, [r4, #196]	@ 0xc4
      s->acked = s->ack;
 8028e70:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8028e74:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
      if (s->ttype != MIP_TTYPE_KEEPALIVE) settmout(c, MIP_TTYPE_KEEPALIVE);
 8028e78:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 8028e7c:	b37b      	cbz	r3, 8028ede <read_conn+0x29a>
 8028e7e:	4639      	mov	r1, r7
 8028e80:	4620      	mov	r0, r4
 8028e82:	f7ff fac9 	bl	8028418 <settmout>
 8028e86:	e02a      	b.n	8028ede <read_conn+0x29a>
    mg_error(c, "oom");
 8028e88:	4931      	ldr	r1, [pc, #196]	@ (8028f50 <read_conn+0x30c>)
 8028e8a:	4620      	mov	r0, r4
 8028e8c:	f7fd fdd4 	bl	8026a38 <mg_error>
 8028e90:	e729      	b.n	8028ce6 <read_conn+0xa2>
    MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 8028e92:	4b2b      	ldr	r3, [pc, #172]	@ (8028f40 <read_conn+0x2fc>)
 8028e94:	f241 52ed 	movw	r2, #5613	@ 0x15ed
 8028e98:	492a      	ldr	r1, [pc, #168]	@ (8028f44 <read_conn+0x300>)
 8028e9a:	2004      	movs	r0, #4
 8028e9c:	f7fd fce4 	bl	8026868 <mg_log_prefix>
 8028ea0:	6b67      	ldr	r7, [r4, #52]	@ 0x34
 8028ea2:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8028ea4:	6858      	ldr	r0, [r3, #4]
 8028ea6:	f7fd f905 	bl	80260b4 <mg_ntohl>
 8028eaa:	4602      	mov	r2, r0
 8028eac:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8028eb0:	4639      	mov	r1, r7
 8028eb2:	4828      	ldr	r0, [pc, #160]	@ (8028f54 <read_conn+0x310>)
 8028eb4:	f7fb fb86 	bl	80245c4 <mg_log>
 8028eb8:	e79c      	b.n	8028df4 <read_conn+0x1b0>
      MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 8028eba:	4b21      	ldr	r3, [pc, #132]	@ (8028f40 <read_conn+0x2fc>)
 8028ebc:	f241 52f4 	movw	r2, #5620	@ 0x15f4
 8028ec0:	4920      	ldr	r1, [pc, #128]	@ (8028f44 <read_conn+0x300>)
 8028ec2:	2004      	movs	r0, #4
 8028ec4:	f7fd fcd0 	bl	8026868 <mg_log_prefix>
 8028ec8:	f8d4 20c0 	ldr.w	r2, [r4, #192]	@ 0xc0
 8028ecc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028ece:	4822      	ldr	r0, [pc, #136]	@ (8028f58 <read_conn+0x314>)
 8028ed0:	f7fb fb78 	bl	80245c4 <mg_log>
 8028ed4:	e7a8      	b.n	8028e28 <read_conn+0x1e4>
      if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 8028ed6:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 8028eda:	2b01      	cmp	r3, #1
 8028edc:	d11b      	bne.n	8028f16 <read_conn+0x2d2>
    if (c->is_tls && c->is_tls_hs) {
 8028ede:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8028ee2:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 8028ee6:	2ac0      	cmp	r2, #192	@ 0xc0
 8028ee8:	f43f aefd 	beq.w	8028ce6 <read_conn+0xa2>
    } else if (c->is_tls) {
 8028eec:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8028ef0:	d01b      	beq.n	8028f2a <read_conn+0x2e6>
      io = &c->recv;
 8028ef2:	f104 0638 	add.w	r6, r4, #56	@ 0x38
      if (io->size - io->len < pkt->pay.len &&
 8028ef6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8028ef8:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8028efa:	1a5b      	subs	r3, r3, r1
 8028efc:	68ea      	ldr	r2, [r5, #12]
 8028efe:	4293      	cmp	r3, r2
 8028f00:	d204      	bcs.n	8028f0c <read_conn+0x2c8>
          !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 8028f02:	4411      	add	r1, r2
 8028f04:	4630      	mov	r0, r6
 8028f06:	f7fe faeb 	bl	80274e0 <mg_iobuf_resize>
      if (io->size - io->len < pkt->pay.len &&
 8028f0a:	b148      	cbz	r0, 8028f20 <read_conn+0x2dc>
        handle_tls_recv(c, io);
 8028f0c:	4631      	mov	r1, r6
 8028f0e:	4620      	mov	r0, r4
 8028f10:	f7fd fdca 	bl	8026aa8 <handle_tls_recv>
 8028f14:	e6e7      	b.n	8028ce6 <read_conn+0xa2>
      if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 8028f16:	2101      	movs	r1, #1
 8028f18:	4620      	mov	r0, r4
 8028f1a:	f7ff fa7d 	bl	8028418 <settmout>
 8028f1e:	e7de      	b.n	8028ede <read_conn+0x29a>
        mg_error(c, "oom");
 8028f20:	490b      	ldr	r1, [pc, #44]	@ (8028f50 <read_conn+0x30c>)
 8028f22:	4620      	mov	r0, r4
 8028f24:	f7fd fd88 	bl	8026a38 <mg_error>
 8028f28:	e6dd      	b.n	8028ce6 <read_conn+0xa2>
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 8028f2a:	f105 020c 	add.w	r2, r5, #12
 8028f2e:	2107      	movs	r1, #7
 8028f30:	4620      	mov	r0, r4
 8028f32:	f7fa f8fe 	bl	8023132 <mg_call>
}
 8028f36:	e6d6      	b.n	8028ce6 <read_conn+0xa2>
 8028f38:	080373ac 	.word	0x080373ac
 8028f3c:	2000012c 	.word	0x2000012c
 8028f40:	0803bd6c 	.word	0x0803bd6c
 8028f44:	0803b480 	.word	0x0803b480
 8028f48:	0803b9f8 	.word	0x0803b9f8
 8028f4c:	0803ba10 	.word	0x0803ba10
 8028f50:	0803b780 	.word	0x0803b780
 8028f54:	0803ba28 	.word	0x0803ba28
 8028f58:	0803ba3c 	.word	0x0803ba3c

08028f5c <accept_conn>:
                                         struct pkt *pkt) {
 8028f5c:	b570      	push	{r4, r5, r6, lr}
 8028f5e:	4605      	mov	r5, r0
 8028f60:	460e      	mov	r6, r1
  struct mg_connection *c = mg_alloc_conn(lsn->mgr);
 8028f62:	6840      	ldr	r0, [r0, #4]
 8028f64:	f7fa fe58 	bl	8023c18 <mg_alloc_conn>
  if (c == NULL) {
 8028f68:	4604      	mov	r4, r0
 8028f6a:	2800      	cmp	r0, #0
 8028f6c:	d058      	beq.n	8029020 <accept_conn+0xc4>
  s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq);
 8028f6e:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8028f70:	6898      	ldr	r0, [r3, #8]
 8028f72:	f7fd f89f 	bl	80260b4 <mg_ntohl>
 8028f76:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0
 8028f7a:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8028f7c:	6858      	ldr	r0, [r3, #4]
 8028f7e:	f7fd f899 	bl	80260b4 <mg_ntohl>
 8028f82:	f8c4 00b4 	str.w	r0, [r4, #180]	@ 0xb4
  memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 8028f86:	6933      	ldr	r3, [r6, #16]
 8028f88:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8028f8c:	f8c4 20c8 	str.w	r2, [r4, #200]	@ 0xc8
 8028f90:	895b      	ldrh	r3, [r3, #10]
 8028f92:	f8a4 30cc 	strh.w	r3, [r4, #204]	@ 0xcc
  settmout(c, MIP_TTYPE_KEEPALIVE);
 8028f96:	2100      	movs	r1, #0
 8028f98:	4620      	mov	r0, r4
 8028f9a:	f7ff fa3d 	bl	8028418 <settmout>
  memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 8028f9e:	69f3      	ldr	r3, [r6, #28]
 8028fa0:	68db      	ldr	r3, [r3, #12]
 8028fa2:	61e3      	str	r3, [r4, #28]
  c->rem.port = pkt->tcp->sport;
 8028fa4:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8028fa6:	881b      	ldrh	r3, [r3, #0]
 8028fa8:	85a3      	strh	r3, [r4, #44]	@ 0x2c
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 8028faa:	4b2c      	ldr	r3, [pc, #176]	@ (802905c <accept_conn+0x100>)
 8028fac:	681b      	ldr	r3, [r3, #0]
 8028fae:	2b02      	cmp	r3, #2
 8028fb0:	dc45      	bgt.n	802903e <accept_conn+0xe2>
  LIST_ADD_HEAD(struct mg_connection, &lsn->mgr->conns, c);
 8028fb2:	686b      	ldr	r3, [r5, #4]
 8028fb4:	681b      	ldr	r3, [r3, #0]
 8028fb6:	6023      	str	r3, [r4, #0]
 8028fb8:	686b      	ldr	r3, [r5, #4]
 8028fba:	601c      	str	r4, [r3, #0]
  c->is_accepted = 1;
 8028fbc:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8028fc0:	f043 0304 	orr.w	r3, r3, #4
 8028fc4:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
  c->is_hexdumping = lsn->is_hexdumping;
 8028fc8:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8028fcc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8028fd0:	f894 20ad 	ldrb.w	r2, [r4, #173]	@ 0xad
 8028fd4:	f363 02c3 	bfi	r2, r3, #3, #1
 8028fd8:	f884 20ad 	strb.w	r2, [r4, #173]	@ 0xad
  c->pfn = lsn->pfn;
 8028fdc:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 8028fe0:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  c->loc = lsn->loc;
 8028fe4:	f104 0608 	add.w	r6, r4, #8
 8028fe8:	f105 0c08 	add.w	ip, r5, #8
 8028fec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8028ff0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8028ff2:	f8dc 3000 	ldr.w	r3, [ip]
 8028ff6:	6033      	str	r3, [r6, #0]
  c->pfn_data = lsn->pfn_data;
 8028ff8:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
 8028ffc:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  c->fn = lsn->fn;
 8029000:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 8029002:	67a3      	str	r3, [r4, #120]	@ 0x78
  c->fn_data = lsn->fn_data;
 8029004:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 8029006:	67e3      	str	r3, [r4, #124]	@ 0x7c
  mg_call(c, MG_EV_OPEN, NULL);
 8029008:	2200      	movs	r2, #0
 802900a:	2101      	movs	r1, #1
 802900c:	4620      	mov	r0, r4
 802900e:	f7fa f890 	bl	8023132 <mg_call>
  mg_call(c, MG_EV_ACCEPT, NULL);
 8029012:	2200      	movs	r2, #0
 8029014:	2105      	movs	r1, #5
 8029016:	4620      	mov	r0, r4
 8029018:	f7fa f88b 	bl	8023132 <mg_call>
}
 802901c:	4620      	mov	r0, r4
 802901e:	bd70      	pop	{r4, r5, r6, pc}
    MG_ERROR(("OOM"));
 8029020:	4b0e      	ldr	r3, [pc, #56]	@ (802905c <accept_conn+0x100>)
 8029022:	681b      	ldr	r3, [r3, #0]
 8029024:	2b00      	cmp	r3, #0
 8029026:	ddf9      	ble.n	802901c <accept_conn+0xc0>
 8029028:	4b0d      	ldr	r3, [pc, #52]	@ (8029060 <accept_conn+0x104>)
 802902a:	f241 5268 	movw	r2, #5480	@ 0x1568
 802902e:	490d      	ldr	r1, [pc, #52]	@ (8029064 <accept_conn+0x108>)
 8029030:	2001      	movs	r0, #1
 8029032:	f7fd fc19 	bl	8026868 <mg_log_prefix>
 8029036:	480c      	ldr	r0, [pc, #48]	@ (8029068 <accept_conn+0x10c>)
 8029038:	f7fb fac4 	bl	80245c4 <mg_log>
    return NULL;
 802903c:	e7ee      	b.n	802901c <accept_conn+0xc0>
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 802903e:	4b08      	ldr	r3, [pc, #32]	@ (8029060 <accept_conn+0x104>)
 8029040:	f241 5271 	movw	r2, #5489	@ 0x1571
 8029044:	4907      	ldr	r1, [pc, #28]	@ (8029064 <accept_conn+0x108>)
 8029046:	2003      	movs	r0, #3
 8029048:	f7fd fc0e 	bl	8026868 <mg_log_prefix>
 802904c:	f104 031c 	add.w	r3, r4, #28
 8029050:	4a06      	ldr	r2, [pc, #24]	@ (802906c <accept_conn+0x110>)
 8029052:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8029054:	4806      	ldr	r0, [pc, #24]	@ (8029070 <accept_conn+0x114>)
 8029056:	f7fb fab5 	bl	80245c4 <mg_log>
 802905a:	e7aa      	b.n	8028fb2 <accept_conn+0x56>
 802905c:	2000012c 	.word	0x2000012c
 8029060:	0803bd60 	.word	0x0803bd60
 8029064:	0803b480 	.word	0x0803b480
 8029068:	0803baa8 	.word	0x0803baa8
 802906c:	0802671d 	.word	0x0802671d
 8029070:	0803ba4c 	.word	0x0803ba4c

08029074 <rx_tcp>:
static void rx_tcp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8029074:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8029078:	b083      	sub	sp, #12
 802907a:	4606      	mov	r6, r0
 802907c:	460c      	mov	r4, r1
  struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 802907e:	6b07      	ldr	r7, [r0, #48]	@ 0x30
 8029080:	2200      	movs	r2, #0
 8029082:	4638      	mov	r0, r7
 8029084:	f7f9 fee9 	bl	8022e5a <getpeer>
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 8029088:	4605      	mov	r5, r0
 802908a:	b380      	cbz	r0, 80290ee <rx_tcp+0x7a>
 802908c:	f100 08b0 	add.w	r8, r0, #176	@ 0xb0
  if (c != NULL && c->is_connecting && pkt->tcp->flags == (TH_SYN | TH_ACK)) {
 8029090:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8029094:	f013 0f20 	tst.w	r3, #32
 8029098:	d02b      	beq.n	80290f2 <rx_tcp+0x7e>
 802909a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 802909c:	7b5a      	ldrb	r2, [r3, #13]
 802909e:	2a12      	cmp	r2, #18
 80290a0:	d126      	bne.n	80290f0 <rx_tcp+0x7c>
    s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq) + 1;
 80290a2:	6898      	ldr	r0, [r3, #8]
 80290a4:	f7fd f806 	bl	80260b4 <mg_ntohl>
 80290a8:	f8c5 00b0 	str.w	r0, [r5, #176]	@ 0xb0
 80290ac:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80290ae:	6858      	ldr	r0, [r3, #4]
 80290b0:	f7fd f800 	bl	80260b4 <mg_ntohl>
 80290b4:	3001      	adds	r0, #1
 80290b6:	f8c8 0004 	str.w	r0, [r8, #4]
    tx_tcp_pkt(ifp, pkt, TH_ACK, pkt->tcp->ack, NULL, 0);
 80290ba:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80290bc:	689b      	ldr	r3, [r3, #8]
 80290be:	2700      	movs	r7, #0
 80290c0:	9701      	str	r7, [sp, #4]
 80290c2:	9700      	str	r7, [sp, #0]
 80290c4:	2210      	movs	r2, #16
 80290c6:	4621      	mov	r1, r4
 80290c8:	4630      	mov	r0, r6
 80290ca:	f7ff f975 	bl	80283b8 <tx_tcp_pkt>
    c->is_connecting = 0;  // Client connected
 80290ce:	f895 30ac 	ldrb.w	r3, [r5, #172]	@ 0xac
 80290d2:	f367 1345 	bfi	r3, r7, #5, #1
 80290d6:	f885 30ac 	strb.w	r3, [r5, #172]	@ 0xac
    settmout(c, MIP_TTYPE_KEEPALIVE);
 80290da:	4639      	mov	r1, r7
 80290dc:	4628      	mov	r0, r5
 80290de:	f7ff f99b 	bl	8028418 <settmout>
    mg_call(c, MG_EV_CONNECT, NULL);  // Let user know
 80290e2:	463a      	mov	r2, r7
 80290e4:	2104      	movs	r1, #4
 80290e6:	4628      	mov	r0, r5
 80290e8:	f7fa f823 	bl	8023132 <mg_call>
    if (c->is_tls_hs) mg_tls_handshake(c);
 80290ec:	e01b      	b.n	8029126 <rx_tcp+0xb2>
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 80290ee:	4680      	mov	r8, r0
  } else if (c != NULL && c->is_connecting && pkt->tcp->flags != TH_ACK) {
 80290f0:	b385      	cbz	r5, 8029154 <rx_tcp+0xe0>
 80290f2:	f895 30ac 	ldrb.w	r3, [r5, #172]	@ 0xac
 80290f6:	f013 0f20 	tst.w	r3, #32
 80290fa:	d004      	beq.n	8029106 <rx_tcp+0x92>
 80290fc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80290fe:	7b5a      	ldrb	r2, [r3, #13]
 8029100:	2a10      	cmp	r2, #16
 8029102:	d113      	bne.n	802912c <rx_tcp+0xb8>
  } else if (c != NULL && pkt->tcp->flags & TH_RST) {
 8029104:	b335      	cbz	r5, 8029154 <rx_tcp+0xe0>
 8029106:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8029108:	7b5b      	ldrb	r3, [r3, #13]
 802910a:	f013 0f04 	tst.w	r3, #4
 802910e:	d117      	bne.n	8029140 <rx_tcp+0xcc>
  } else if (c != NULL) {
 8029110:	b305      	cbz	r5, 8029154 <rx_tcp+0xe0>
    s->tmiss = 0;                         // Reset missed keep-alive counter
 8029112:	2300      	movs	r3, #0
 8029114:	f888 301f 	strb.w	r3, [r8, #31]
    if (s->ttype == MIP_TTYPE_KEEPALIVE)  // Advance keep-alive timer
 8029118:	f898 301e 	ldrb.w	r3, [r8, #30]
 802911c:	b1ab      	cbz	r3, 802914a <rx_tcp+0xd6>
    read_conn(c, pkt);  // Override timer with ACK timeout if needed
 802911e:	4621      	mov	r1, r4
 8029120:	4628      	mov	r0, r5
 8029122:	f7ff fd8f 	bl	8028c44 <read_conn>
}
 8029126:	b003      	add	sp, #12
 8029128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 802912c:	689b      	ldr	r3, [r3, #8]
 802912e:	2200      	movs	r2, #0
 8029130:	9201      	str	r2, [sp, #4]
 8029132:	9200      	str	r2, [sp, #0]
 8029134:	2214      	movs	r2, #20
 8029136:	4621      	mov	r1, r4
 8029138:	4630      	mov	r0, r6
 802913a:	f7ff f93d 	bl	80283b8 <tx_tcp_pkt>
 802913e:	e7f2      	b.n	8029126 <rx_tcp+0xb2>
    mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 8029140:	4934      	ldr	r1, [pc, #208]	@ (8029214 <rx_tcp+0x1a0>)
 8029142:	4628      	mov	r0, r5
 8029144:	f7fd fc78 	bl	8026a38 <mg_error>
 8029148:	e7ed      	b.n	8029126 <rx_tcp+0xb2>
      settmout(c,
 802914a:	2100      	movs	r1, #0
 802914c:	4628      	mov	r0, r5
 802914e:	f7ff f963 	bl	8028418 <settmout>
 8029152:	e7e4      	b.n	802911e <rx_tcp+0xaa>
  } else if ((c = getpeer(ifp->mgr, pkt, true)) == NULL) {
 8029154:	2201      	movs	r2, #1
 8029156:	4621      	mov	r1, r4
 8029158:	4638      	mov	r0, r7
 802915a:	f7f9 fe7e 	bl	8022e5a <getpeer>
 802915e:	4607      	mov	r7, r0
 8029160:	b168      	cbz	r0, 802917e <rx_tcp+0x10a>
  } else if (pkt->tcp->flags & TH_RST) {
 8029162:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8029164:	7b6b      	ldrb	r3, [r5, #13]
 8029166:	f013 0f04 	tst.w	r3, #4
 802916a:	d013      	beq.n	8029194 <rx_tcp+0x120>
    if (c->is_accepted) mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 802916c:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8029170:	f013 0f04 	tst.w	r3, #4
 8029174:	d0d7      	beq.n	8029126 <rx_tcp+0xb2>
 8029176:	4927      	ldr	r1, [pc, #156]	@ (8029214 <rx_tcp+0x1a0>)
 8029178:	f7fd fc5e 	bl	8026a38 <mg_error>
 802917c:	e7d3      	b.n	8029126 <rx_tcp+0xb2>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 802917e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8029180:	689b      	ldr	r3, [r3, #8]
 8029182:	2200      	movs	r2, #0
 8029184:	9201      	str	r2, [sp, #4]
 8029186:	9200      	str	r2, [sp, #0]
 8029188:	2214      	movs	r2, #20
 802918a:	4621      	mov	r1, r4
 802918c:	4630      	mov	r0, r6
 802918e:	f7ff f913 	bl	80283b8 <tx_tcp_pkt>
 8029192:	e7c8      	b.n	8029126 <rx_tcp+0xb2>
  } else if (pkt->tcp->flags & TH_SYN) {
 8029194:	f013 0f02 	tst.w	r3, #2
 8029198:	d11d      	bne.n	80291d6 <rx_tcp+0x162>
  } else if (pkt->tcp->flags & TH_FIN) {
 802919a:	f013 0f01 	tst.w	r3, #1
 802919e:	d129      	bne.n	80291f4 <rx_tcp+0x180>
  } else if (mg_htonl(pkt->tcp->ack) == mg_htons(pkt->tcp->sport) + 1U) {
 80291a0:	f8d5 9008 	ldr.w	r9, [r5, #8]
 80291a4:	4648      	mov	r0, r9
 80291a6:	f7fc ff85 	bl	80260b4 <mg_ntohl>
 80291aa:	4680      	mov	r8, r0
 80291ac:	8828      	ldrh	r0, [r5, #0]
 80291ae:	f7fd f819 	bl	80261e4 <mg_ntohs>
 80291b2:	1c43      	adds	r3, r0, #1
 80291b4:	4598      	cmp	r8, r3
 80291b6:	d027      	beq.n	8029208 <rx_tcp+0x194>
  } else if (!c->is_accepted) {  // no peer
 80291b8:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 80291bc:	f013 0f04 	tst.w	r3, #4
 80291c0:	d1b1      	bne.n	8029126 <rx_tcp+0xb2>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 80291c2:	2300      	movs	r3, #0
 80291c4:	9301      	str	r3, [sp, #4]
 80291c6:	9300      	str	r3, [sp, #0]
 80291c8:	464b      	mov	r3, r9
 80291ca:	2214      	movs	r2, #20
 80291cc:	4621      	mov	r1, r4
 80291ce:	4630      	mov	r0, r6
 80291d0:	f7ff f8f2 	bl	80283b8 <tx_tcp_pkt>
}
 80291d4:	e7a7      	b.n	8029126 <rx_tcp+0xb2>
    uint32_t isn = mg_htonl((uint32_t) mg_ntohs(pkt->tcp->sport));
 80291d6:	8828      	ldrh	r0, [r5, #0]
 80291d8:	f7fd f804 	bl	80261e4 <mg_ntohs>
 80291dc:	f7fc ff6a 	bl	80260b4 <mg_ntohl>
 80291e0:	4603      	mov	r3, r0
    tx_tcp_pkt(ifp, pkt, TH_SYN | TH_ACK, isn, NULL, 0);
 80291e2:	2200      	movs	r2, #0
 80291e4:	9201      	str	r2, [sp, #4]
 80291e6:	9200      	str	r2, [sp, #0]
 80291e8:	2212      	movs	r2, #18
 80291ea:	4621      	mov	r1, r4
 80291ec:	4630      	mov	r0, r6
 80291ee:	f7ff f8e3 	bl	80283b8 <tx_tcp_pkt>
 80291f2:	e798      	b.n	8029126 <rx_tcp+0xb2>
    tx_tcp_pkt(ifp, pkt, TH_FIN | TH_ACK, pkt->tcp->ack, NULL, 0);
 80291f4:	68ab      	ldr	r3, [r5, #8]
 80291f6:	2200      	movs	r2, #0
 80291f8:	9201      	str	r2, [sp, #4]
 80291fa:	9200      	str	r2, [sp, #0]
 80291fc:	2211      	movs	r2, #17
 80291fe:	4621      	mov	r1, r4
 8029200:	4630      	mov	r0, r6
 8029202:	f7ff f8d9 	bl	80283b8 <tx_tcp_pkt>
 8029206:	e78e      	b.n	8029126 <rx_tcp+0xb2>
    accept_conn(c, pkt);
 8029208:	4621      	mov	r1, r4
 802920a:	4638      	mov	r0, r7
 802920c:	f7ff fea6 	bl	8028f5c <accept_conn>
 8029210:	e789      	b.n	8029126 <rx_tcp+0xb2>
 8029212:	bf00      	nop
 8029214:	0803ba5c 	.word	0x0803ba5c

08029218 <mg_sendnsreq>:
                         struct mg_dns *dnsc, bool ipv6) {
 8029218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802921c:	b082      	sub	sp, #8
 802921e:	4604      	mov	r4, r0
 8029220:	4688      	mov	r8, r1
 8029222:	4617      	mov	r7, r2
 8029224:	461d      	mov	r5, r3
  if (dnsc->url == NULL) {
 8029226:	6819      	ldr	r1, [r3, #0]
 8029228:	2900      	cmp	r1, #0
 802922a:	d037      	beq.n	802929c <mg_sendnsreq+0x84>
  } else if (dnsc->c == NULL) {
 802922c:	685b      	ldr	r3, [r3, #4]
 802922e:	2b00      	cmp	r3, #0
 8029230:	d038      	beq.n	80292a4 <mg_sendnsreq+0x8c>
  if (dnsc->c == NULL) {
 8029232:	686b      	ldr	r3, [r5, #4]
 8029234:	2b00      	cmp	r3, #0
 8029236:	d040      	beq.n	80292ba <mg_sendnsreq+0xa2>
  } else if ((d = (struct dns_data *) calloc(1, sizeof(*d))) == NULL) {
 8029238:	2118      	movs	r1, #24
 802923a:	2001      	movs	r0, #1
 802923c:	f7f9 fde8 	bl	8022e10 <mg_calloc>
 8029240:	4606      	mov	r6, r0
 8029242:	2800      	cmp	r0, #0
 8029244:	d03e      	beq.n	80292c4 <mg_sendnsreq+0xac>
    struct dns_data *reqs = (struct dns_data *) c->mgr->active_dns_requests;
 8029246:	6863      	ldr	r3, [r4, #4]
 8029248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 802924a:	2b00      	cmp	r3, #0
 802924c:	d03f      	beq.n	80292ce <mg_sendnsreq+0xb6>
 802924e:	8a1b      	ldrh	r3, [r3, #16]
 8029250:	3301      	adds	r3, #1
 8029252:	b29b      	uxth	r3, r3
 8029254:	8233      	strh	r3, [r6, #16]
    d->next = (struct dns_data *) c->mgr->active_dns_requests;
 8029256:	6863      	ldr	r3, [r4, #4]
 8029258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802925a:	6033      	str	r3, [r6, #0]
    c->mgr->active_dns_requests = d;
 802925c:	6863      	ldr	r3, [r4, #4]
 802925e:	631e      	str	r6, [r3, #48]	@ 0x30
    d->expire = mg_millis() + (uint64_t) ms;
 8029260:	f7fd fafc 	bl	802685c <mg_millis>
 8029264:	19c0      	adds	r0, r0, r7
 8029266:	eb41 71e7 	adc.w	r1, r1, r7, asr #31
 802926a:	60b0      	str	r0, [r6, #8]
 802926c:	60f1      	str	r1, [r6, #12]
    d->c = c;
 802926e:	6074      	str	r4, [r6, #4]
    c->is_resolving = 1;
 8029270:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8029274:	f043 0308 	orr.w	r3, r3, #8
 8029278:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 802927c:	4b21      	ldr	r3, [pc, #132]	@ (8029304 <mg_sendnsreq+0xec>)
 802927e:	681b      	ldr	r3, [r3, #0]
 8029280:	2b03      	cmp	r3, #3
 8029282:	dc26      	bgt.n	80292d2 <mg_sendnsreq+0xba>
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
 8029284:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8029288:	8a32      	ldrh	r2, [r6, #16]
 802928a:	4641      	mov	r1, r8
 802928c:	6868      	ldr	r0, [r5, #4]
 802928e:	f7fe fbd5 	bl	8027a3c <mg_dns_send>
 8029292:	2800      	cmp	r0, #0
 8029294:	d031      	beq.n	80292fa <mg_sendnsreq+0xe2>
}
 8029296:	b002      	add	sp, #8
 8029298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    mg_error(c, "DNS server URL is NULL. Call mg_mgr_init()");
 802929c:	491a      	ldr	r1, [pc, #104]	@ (8029308 <mg_sendnsreq+0xf0>)
 802929e:	f7fd fbcb 	bl	8026a38 <mg_error>
 80292a2:	e7c6      	b.n	8029232 <mg_sendnsreq+0x1a>
    dnsc->c = mg_connect(c->mgr, dnsc->url, NULL, NULL);
 80292a4:	461a      	mov	r2, r3
 80292a6:	6840      	ldr	r0, [r0, #4]
 80292a8:	f000 f866 	bl	8029378 <mg_connect>
 80292ac:	6068      	str	r0, [r5, #4]
    if (dnsc->c != NULL) {
 80292ae:	2800      	cmp	r0, #0
 80292b0:	d0bf      	beq.n	8029232 <mg_sendnsreq+0x1a>
      dnsc->c->pfn = dns_cb;
 80292b2:	4b16      	ldr	r3, [pc, #88]	@ (802930c <mg_sendnsreq+0xf4>)
 80292b4:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
 80292b8:	e7bb      	b.n	8029232 <mg_sendnsreq+0x1a>
    mg_error(c, "resolver");
 80292ba:	4915      	ldr	r1, [pc, #84]	@ (8029310 <mg_sendnsreq+0xf8>)
 80292bc:	4620      	mov	r0, r4
 80292be:	f7fd fbbb 	bl	8026a38 <mg_error>
 80292c2:	e7e8      	b.n	8029296 <mg_sendnsreq+0x7e>
    mg_error(c, "resolve OOM");
 80292c4:	4913      	ldr	r1, [pc, #76]	@ (8029314 <mg_sendnsreq+0xfc>)
 80292c6:	4620      	mov	r0, r4
 80292c8:	f7fd fbb6 	bl	8026a38 <mg_error>
 80292cc:	e7e3      	b.n	8029296 <mg_sendnsreq+0x7e>
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 80292ce:	2301      	movs	r3, #1
 80292d0:	e7c0      	b.n	8029254 <mg_sendnsreq+0x3c>
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 80292d2:	4b11      	ldr	r3, [pc, #68]	@ (8029318 <mg_sendnsreq+0x100>)
 80292d4:	f240 521e 	movw	r2, #1310	@ 0x51e
 80292d8:	4910      	ldr	r1, [pc, #64]	@ (802931c <mg_sendnsreq+0x104>)
 80292da:	2004      	movs	r0, #4
 80292dc:	f7fd fac4 	bl	8026868 <mg_log_prefix>
 80292e0:	8a33      	ldrh	r3, [r6, #16]
 80292e2:	9301      	str	r3, [sp, #4]
 80292e4:	682b      	ldr	r3, [r5, #0]
 80292e6:	9300      	str	r3, [sp, #0]
 80292e8:	f8d8 3000 	ldr.w	r3, [r8]
 80292ec:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80292f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80292f2:	480b      	ldr	r0, [pc, #44]	@ (8029320 <mg_sendnsreq+0x108>)
 80292f4:	f7fb f966 	bl	80245c4 <mg_log>
 80292f8:	e7c4      	b.n	8029284 <mg_sendnsreq+0x6c>
      mg_error(dnsc->c, "DNS send");
 80292fa:	490a      	ldr	r1, [pc, #40]	@ (8029324 <mg_sendnsreq+0x10c>)
 80292fc:	6868      	ldr	r0, [r5, #4]
 80292fe:	f7fd fb9b 	bl	8026a38 <mg_error>
}
 8029302:	e7c8      	b.n	8029296 <mg_sendnsreq+0x7e>
 8029304:	2000012c 	.word	0x2000012c
 8029308:	0803ba68 	.word	0x0803ba68
 802930c:	080287b5 	.word	0x080287b5
 8029310:	0803ba94 	.word	0x0803ba94
 8029314:	0803baa0 	.word	0x0803baa0
 8029318:	0803bee8 	.word	0x0803bee8
 802931c:	0803b480 	.word	0x0803b480
 8029320:	0803baac 	.word	0x0803baac
 8029324:	0803bad0 	.word	0x0803bad0

08029328 <mg_resolve>:
void mg_resolve(struct mg_connection *c, const char *url) {
 8029328:	b570      	push	{r4, r5, r6, lr}
 802932a:	b084      	sub	sp, #16
 802932c:	4604      	mov	r4, r0
 802932e:	460e      	mov	r6, r1
  struct mg_str host = mg_url_host(url);
 8029330:	ad02      	add	r5, sp, #8
 8029332:	4628      	mov	r0, r5
 8029334:	f7fc fde8 	bl	8025f08 <mg_url_host>
  c->rem.port = mg_htons(mg_url_port(url));
 8029338:	4630      	mov	r0, r6
 802933a:	f7fc fe03 	bl	8025f44 <mg_url_port>
 802933e:	f7fc ff51 	bl	80261e4 <mg_ntohs>
 8029342:	85a0      	strh	r0, [r4, #44]	@ 0x2c
  if (mg_aton(host, &c->rem)) {
 8029344:	f104 021c 	add.w	r2, r4, #28
 8029348:	e895 0003 	ldmia.w	r5, {r0, r1}
 802934c:	f7fc fee6 	bl	802611c <mg_aton>
 8029350:	b960      	cbnz	r0, 802936c <mg_resolve+0x44>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 8029352:	6862      	ldr	r2, [r4, #4]
 8029354:	7e11      	ldrb	r1, [r2, #24]
 8029356:	b169      	cbz	r1, 8029374 <mg_resolve+0x4c>
 8029358:	f102 030c 	add.w	r3, r2, #12
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
 802935c:	6952      	ldr	r2, [r2, #20]
 802935e:	9100      	str	r1, [sp, #0]
 8029360:	a902      	add	r1, sp, #8
 8029362:	4620      	mov	r0, r4
 8029364:	f7ff ff58 	bl	8029218 <mg_sendnsreq>
}
 8029368:	b004      	add	sp, #16
 802936a:	bd70      	pop	{r4, r5, r6, pc}
    mg_connect_resolved(c);
 802936c:	4620      	mov	r0, r4
 802936e:	f7ff f951 	bl	8028614 <mg_connect_resolved>
 8029372:	e7f9      	b.n	8029368 <mg_resolve+0x40>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 8029374:	1d13      	adds	r3, r2, #4
 8029376:	e7f1      	b.n	802935c <mg_resolve+0x34>

08029378 <mg_connect>:
                                 mg_event_handler_t fn, void *fn_data) {
 8029378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (url == NULL || url[0] == '\0') {
 802937c:	b129      	cbz	r1, 802938a <mg_connect+0x12>
 802937e:	4680      	mov	r8, r0
 8029380:	4617      	mov	r7, r2
 8029382:	461e      	mov	r6, r3
 8029384:	460d      	mov	r5, r1
 8029386:	780b      	ldrb	r3, [r1, #0]
 8029388:	b99b      	cbnz	r3, 80293b2 <mg_connect+0x3a>
    MG_ERROR(("null url"));
 802938a:	4b30      	ldr	r3, [pc, #192]	@ (802944c <mg_connect+0xd4>)
 802938c:	681b      	ldr	r3, [r3, #0]
 802938e:	2b00      	cmp	r3, #0
 8029390:	dc03      	bgt.n	802939a <mg_connect+0x22>
  struct mg_connection *c = NULL;
 8029392:	2400      	movs	r4, #0
}
 8029394:	4620      	mov	r0, r4
 8029396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MG_ERROR(("null url"));
 802939a:	4b2d      	ldr	r3, [pc, #180]	@ (8029450 <mg_connect+0xd8>)
 802939c:	f241 22be 	movw	r2, #4798	@ 0x12be
 80293a0:	492c      	ldr	r1, [pc, #176]	@ (8029454 <mg_connect+0xdc>)
 80293a2:	2001      	movs	r0, #1
 80293a4:	f7fd fa60 	bl	8026868 <mg_log_prefix>
 80293a8:	482b      	ldr	r0, [pc, #172]	@ (8029458 <mg_connect+0xe0>)
 80293aa:	f7fb f90b 	bl	80245c4 <mg_log>
  struct mg_connection *c = NULL;
 80293ae:	2400      	movs	r4, #0
 80293b0:	e7f0      	b.n	8029394 <mg_connect+0x1c>
  } else if ((c = mg_alloc_conn(mgr)) == NULL) {
 80293b2:	f7fa fc31 	bl	8023c18 <mg_alloc_conn>
 80293b6:	4604      	mov	r4, r0
 80293b8:	b358      	cbz	r0, 8029412 <mg_connect+0x9a>
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 80293ba:	f8d8 3000 	ldr.w	r3, [r8]
 80293be:	6003      	str	r3, [r0, #0]
 80293c0:	f8c8 0000 	str.w	r0, [r8]
    c->is_udp = (strncmp(url, "udp:", 4) == 0);
 80293c4:	2204      	movs	r2, #4
 80293c6:	4925      	ldr	r1, [pc, #148]	@ (802945c <mg_connect+0xe4>)
 80293c8:	4628      	mov	r0, r5
 80293ca:	f003 fe7e 	bl	802d0ca <strncmp>
 80293ce:	fab0 f080 	clz	r0, r0
 80293d2:	0940      	lsrs	r0, r0, #5
 80293d4:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80293d8:	f360 0300 	bfi	r3, r0, #0, #1
 80293dc:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
    c->fd = (void *) (size_t) MG_INVALID_SOCKET;
 80293e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80293e4:	6323      	str	r3, [r4, #48]	@ 0x30
    c->fn = fn;
 80293e6:	67a7      	str	r7, [r4, #120]	@ 0x78
    c->is_client = true;
 80293e8:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 80293ec:	f043 0302 	orr.w	r3, r3, #2
 80293f0:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    c->fn_data = fn_data;
 80293f4:	67e6      	str	r6, [r4, #124]	@ 0x7c
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 80293f6:	4b15      	ldr	r3, [pc, #84]	@ (802944c <mg_connect+0xd4>)
 80293f8:	681b      	ldr	r3, [r3, #0]
 80293fa:	2b02      	cmp	r3, #2
 80293fc:	dc18      	bgt.n	8029430 <mg_connect+0xb8>
    mg_call(c, MG_EV_OPEN, (void *) url);
 80293fe:	462a      	mov	r2, r5
 8029400:	2101      	movs	r1, #1
 8029402:	4620      	mov	r0, r4
 8029404:	f7f9 fe95 	bl	8023132 <mg_call>
    mg_resolve(c, url);
 8029408:	4629      	mov	r1, r5
 802940a:	4620      	mov	r0, r4
 802940c:	f7ff ff8c 	bl	8029328 <mg_resolve>
 8029410:	e7c0      	b.n	8029394 <mg_connect+0x1c>
    MG_ERROR(("OOM"));
 8029412:	4b0e      	ldr	r3, [pc, #56]	@ (802944c <mg_connect+0xd4>)
 8029414:	681b      	ldr	r3, [r3, #0]
 8029416:	2b00      	cmp	r3, #0
 8029418:	ddbc      	ble.n	8029394 <mg_connect+0x1c>
 802941a:	4b0d      	ldr	r3, [pc, #52]	@ (8029450 <mg_connect+0xd8>)
 802941c:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8029420:	490c      	ldr	r1, [pc, #48]	@ (8029454 <mg_connect+0xdc>)
 8029422:	2001      	movs	r0, #1
 8029424:	f7fd fa20 	bl	8026868 <mg_log_prefix>
 8029428:	480d      	ldr	r0, [pc, #52]	@ (8029460 <mg_connect+0xe8>)
 802942a:	f7fb f8cb 	bl	80245c4 <mg_log>
 802942e:	e7b1      	b.n	8029394 <mg_connect+0x1c>
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 8029430:	4b07      	ldr	r3, [pc, #28]	@ (8029450 <mg_connect+0xd8>)
 8029432:	f241 22c8 	movw	r2, #4808	@ 0x12c8
 8029436:	4907      	ldr	r1, [pc, #28]	@ (8029454 <mg_connect+0xdc>)
 8029438:	2003      	movs	r0, #3
 802943a:	f7fd fa15 	bl	8026868 <mg_log_prefix>
 802943e:	462b      	mov	r3, r5
 8029440:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8029442:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8029444:	4807      	ldr	r0, [pc, #28]	@ (8029464 <mg_connect+0xec>)
 8029446:	f7fb f8bd 	bl	80245c4 <mg_log>
 802944a:	e7d8      	b.n	80293fe <mg_connect+0x86>
 802944c:	2000012c 	.word	0x2000012c
 8029450:	0803be5c 	.word	0x0803be5c
 8029454:	0803b480 	.word	0x0803b480
 8029458:	0803badc 	.word	0x0803badc
 802945c:	0803b7b4 	.word	0x0803b7b4
 8029460:	0803baa8 	.word	0x0803baa8
 8029464:	0803b4dc 	.word	0x0803b4dc

08029468 <mg_mqtt_connect>:
                                      mg_event_handler_t fn, void *fn_data) {
 8029468:	b530      	push	{r4, r5, lr}
 802946a:	b091      	sub	sp, #68	@ 0x44
 802946c:	4614      	mov	r4, r2
 802946e:	461a      	mov	r2, r3
  struct mg_connection *c = mg_connect(mgr, url, fn, fn_data);
 8029470:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8029472:	f7ff ff81 	bl	8029378 <mg_connect>
  if (c != NULL) {
 8029476:	4605      	mov	r5, r0
 8029478:	b160      	cbz	r0, 8029494 <mg_mqtt_connect+0x2c>
    memset(&empty, 0, sizeof(empty));
 802947a:	2240      	movs	r2, #64	@ 0x40
 802947c:	2100      	movs	r1, #0
 802947e:	4668      	mov	r0, sp
 8029480:	f003 fdee 	bl	802d060 <memset>
    mg_mqtt_login(c, opts == NULL ? &empty : opts);
 8029484:	b14c      	cbz	r4, 802949a <mg_mqtt_connect+0x32>
 8029486:	4621      	mov	r1, r4
 8029488:	4628      	mov	r0, r5
 802948a:	f7fe fbfd 	bl	8027c88 <mg_mqtt_login>
    c->pfn = mqtt_cb;
 802948e:	4b04      	ldr	r3, [pc, #16]	@ (80294a0 <mg_mqtt_connect+0x38>)
 8029490:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
}
 8029494:	4628      	mov	r0, r5
 8029496:	b011      	add	sp, #68	@ 0x44
 8029498:	bd30      	pop	{r4, r5, pc}
    mg_mqtt_login(c, opts == NULL ? &empty : opts);
 802949a:	466c      	mov	r4, sp
 802949c:	e7f3      	b.n	8029486 <mg_mqtt_connect+0x1e>
 802949e:	bf00      	nop
 80294a0:	08028061 	.word	0x08028061

080294a4 <mg_tcpip_init>:
void mg_tcpip_init(struct mg_mgr *mgr, struct mg_tcpip_if *ifp) {
 80294a4:	b538      	push	{r3, r4, r5, lr}
 80294a6:	4605      	mov	r5, r0
 80294a8:	460c      	mov	r4, r1
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 80294aa:	680b      	ldr	r3, [r1, #0]
 80294ac:	b90b      	cbnz	r3, 80294b2 <mg_tcpip_init+0xe>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 80294ae:	888b      	ldrh	r3, [r1, #4]
 80294b0:	b1a3      	cbz	r3, 80294dc <mg_tcpip_init+0x38>
  if (ifp->driver->init && !ifp->driver->init(ifp)) {
 80294b2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80294b4:	681b      	ldr	r3, [r3, #0]
 80294b6:	b34b      	cbz	r3, 802950c <mg_tcpip_init+0x68>
 80294b8:	4620      	mov	r0, r4
 80294ba:	4798      	blx	r3
 80294bc:	bb30      	cbnz	r0, 802950c <mg_tcpip_init+0x68>
    MG_ERROR(("driver init failed"));
 80294be:	4b3b      	ldr	r3, [pc, #236]	@ (80295ac <mg_tcpip_init+0x108>)
 80294c0:	681b      	ldr	r3, [r3, #0]
 80294c2:	2b00      	cmp	r3, #0
 80294c4:	dd5f      	ble.n	8029586 <mg_tcpip_init+0xe2>
 80294c6:	4b3a      	ldr	r3, [pc, #232]	@ (80295b0 <mg_tcpip_init+0x10c>)
 80294c8:	f241 7223 	movw	r2, #5923	@ 0x1723
 80294cc:	4939      	ldr	r1, [pc, #228]	@ (80295b4 <mg_tcpip_init+0x110>)
 80294ce:	2001      	movs	r0, #1
 80294d0:	f7fd f9ca 	bl	8026868 <mg_log_prefix>
 80294d4:	4838      	ldr	r0, [pc, #224]	@ (80295b8 <mg_tcpip_init+0x114>)
 80294d6:	f7fb f875 	bl	80245c4 <mg_log>
 80294da:	e054      	b.n	8029586 <mg_tcpip_init+0xe2>
    ifp->mac[0] = 0x02;  // Locally administered, unicast
 80294dc:	4608      	mov	r0, r1
 80294de:	2302      	movs	r3, #2
 80294e0:	f800 3b01 	strb.w	r3, [r0], #1
    mg_random(&ifp->mac[1], sizeof(ifp->mac) - 1);
 80294e4:	2105      	movs	r1, #5
 80294e6:	f7fc fdaa 	bl	802603e <mg_random>
    MG_INFO(("MAC not set. Generated random: %M", mg_print_mac, ifp->mac));
 80294ea:	4b30      	ldr	r3, [pc, #192]	@ (80295ac <mg_tcpip_init+0x108>)
 80294ec:	681b      	ldr	r3, [r3, #0]
 80294ee:	2b01      	cmp	r3, #1
 80294f0:	dddf      	ble.n	80294b2 <mg_tcpip_init+0xe>
 80294f2:	4b2f      	ldr	r3, [pc, #188]	@ (80295b0 <mg_tcpip_init+0x10c>)
 80294f4:	f241 721f 	movw	r2, #5919	@ 0x171f
 80294f8:	492e      	ldr	r1, [pc, #184]	@ (80295b4 <mg_tcpip_init+0x110>)
 80294fa:	2002      	movs	r0, #2
 80294fc:	f7fd f9b4 	bl	8026868 <mg_log_prefix>
 8029500:	4622      	mov	r2, r4
 8029502:	492e      	ldr	r1, [pc, #184]	@ (80295bc <mg_tcpip_init+0x118>)
 8029504:	482e      	ldr	r0, [pc, #184]	@ (80295c0 <mg_tcpip_init+0x11c>)
 8029506:	f7fb f85d 	bl	80245c4 <mg_log>
 802950a:	e7d2      	b.n	80294b2 <mg_tcpip_init+0xe>
    ifp->tx.buf = (char *) calloc(1, framesize), ifp->tx.len = framesize;
 802950c:	f240 6104 	movw	r1, #1540	@ 0x604
 8029510:	2001      	movs	r0, #1
 8029512:	f7f9 fc7d 	bl	8022e10 <mg_calloc>
 8029516:	6160      	str	r0, [r4, #20]
 8029518:	f240 6304 	movw	r3, #1540	@ 0x604
 802951c:	61a3      	str	r3, [r4, #24]
    if (ifp->recv_queue.size == 0)
 802951e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8029520:	b92b      	cbnz	r3, 802952e <mg_tcpip_init+0x8a>
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 8029522:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8029524:	689b      	ldr	r3, [r3, #8]
 8029526:	b37b      	cbz	r3, 8029588 <mg_tcpip_init+0xe4>
 8029528:	f240 6304 	movw	r3, #1540	@ 0x604
 802952c:	63a3      	str	r3, [r4, #56]	@ 0x38
    ifp->recv_queue.buf = (char *) calloc(1, ifp->recv_queue.size);
 802952e:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8029530:	2001      	movs	r0, #1
 8029532:	f7f9 fc6d 	bl	8022e10 <mg_calloc>
 8029536:	6360      	str	r0, [r4, #52]	@ 0x34
    ifp->timer_1000ms = mg_millis();
 8029538:	f7fd f990 	bl	802685c <mg_millis>
 802953c:	e9c4 0116 	strd	r0, r1, [r4, #88]	@ 0x58
    mgr->priv = ifp;
 8029540:	63ec      	str	r4, [r5, #60]	@ 0x3c
    ifp->mgr = mgr;
 8029542:	6325      	str	r5, [r4, #48]	@ 0x30
    ifp->mtu = MG_TCPIP_MTU_DEFAULT;
 8029544:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8029548:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
    mgr->extraconnsize = sizeof(struct connstate);
 802954c:	2330      	movs	r3, #48	@ 0x30
 802954e:	642b      	str	r3, [r5, #64]	@ 0x40
    if (ifp->ip == 0) ifp->enable_dhcp_client = true;
 8029550:	68a3      	ldr	r3, [r4, #8]
 8029552:	b90b      	cbnz	r3, 8029558 <mg_tcpip_init+0xb4>
 8029554:	2301      	movs	r3, #1
 8029556:	7723      	strb	r3, [r4, #28]
    memset(ifp->gwmac, 255, sizeof(ifp->gwmac));  // Set to broadcast
 8029558:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802955c:	f8c4 3046 	str.w	r3, [r4, #70]	@ 0x46
 8029560:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
    mg_random(&ifp->eport, sizeof(ifp->eport));   // Random from 0 to 65535
 8029564:	2102      	movs	r1, #2
 8029566:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802956a:	f7fc fd68 	bl	802603e <mg_random>
    ifp->eport |= MG_EPHEMERAL_PORT_BASE;         // Random from
 802956e:	f8b4 3068 	ldrh.w	r3, [r4, #104]	@ 0x68
 8029572:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8029576:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 802957a:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 802957e:	6963      	ldr	r3, [r4, #20]
 8029580:	b12b      	cbz	r3, 802958e <mg_tcpip_init+0xea>
 8029582:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8029584:	b11b      	cbz	r3, 802958e <mg_tcpip_init+0xea>
}
 8029586:	bd38      	pop	{r3, r4, r5, pc}
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 8029588:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 802958c:	e7ce      	b.n	802952c <mg_tcpip_init+0x88>
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 802958e:	4b07      	ldr	r3, [pc, #28]	@ (80295ac <mg_tcpip_init+0x108>)
 8029590:	681b      	ldr	r3, [r3, #0]
 8029592:	2b00      	cmp	r3, #0
 8029594:	ddf7      	ble.n	8029586 <mg_tcpip_init+0xe2>
 8029596:	4b06      	ldr	r3, [pc, #24]	@ (80295b0 <mg_tcpip_init+0x10c>)
 8029598:	f241 7234 	movw	r2, #5940	@ 0x1734
 802959c:	4905      	ldr	r1, [pc, #20]	@ (80295b4 <mg_tcpip_init+0x110>)
 802959e:	2001      	movs	r0, #1
 80295a0:	f7fd f962 	bl	8026868 <mg_log_prefix>
 80295a4:	4807      	ldr	r0, [pc, #28]	@ (80295c4 <mg_tcpip_init+0x120>)
 80295a6:	f7fb f80d 	bl	80245c4 <mg_log>
}
 80295aa:	e7ec      	b.n	8029586 <mg_tcpip_init+0xe2>
 80295ac:	2000012c 	.word	0x2000012c
 80295b0:	0803be20 	.word	0x0803be20
 80295b4:	0803b480 	.word	0x0803b480
 80295b8:	0803bb0c 	.word	0x0803bb0c
 80295bc:	08024595 	.word	0x08024595
 80295c0:	0803bae8 	.word	0x0803bae8
 80295c4:	0803baa8 	.word	0x0803baa8

080295c8 <onstatechange>:
static void onstatechange(struct mg_tcpip_if *ifp) {
 80295c8:	b510      	push	{r4, lr}
 80295ca:	4604      	mov	r4, r0
  if (ifp->state == MG_TCPIP_STATE_READY) {
 80295cc:	f890 307c 	ldrb.w	r3, [r0, #124]	@ 0x7c
 80295d0:	2b03      	cmp	r3, #3
 80295d2:	d011      	beq.n	80295f8 <onstatechange+0x30>
  } else if (ifp->state == MG_TCPIP_STATE_UP) {
 80295d4:	2b01      	cmp	r3, #1
 80295d6:	d04f      	beq.n	8029678 <onstatechange+0xb0>
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
 80295d8:	b9f3      	cbnz	r3, 8029618 <onstatechange+0x50>
    MG_ERROR(("Link down"));
 80295da:	4b31      	ldr	r3, [pc, #196]	@ (80296a0 <onstatechange+0xd8>)
 80295dc:	681b      	ldr	r3, [r3, #0]
 80295de:	2b00      	cmp	r3, #0
 80295e0:	dd1a      	ble.n	8029618 <onstatechange+0x50>
 80295e2:	4b30      	ldr	r3, [pc, #192]	@ (80296a4 <onstatechange+0xdc>)
 80295e4:	f241 4209 	movw	r2, #5129	@ 0x1409
 80295e8:	492f      	ldr	r1, [pc, #188]	@ (80296a8 <onstatechange+0xe0>)
 80295ea:	2001      	movs	r0, #1
 80295ec:	f7fd f93c 	bl	8026868 <mg_log_prefix>
 80295f0:	482e      	ldr	r0, [pc, #184]	@ (80296ac <onstatechange+0xe4>)
 80295f2:	f7fa ffe7 	bl	80245c4 <mg_log>
 80295f6:	e00f      	b.n	8029618 <onstatechange+0x50>
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 80295f8:	4b29      	ldr	r3, [pc, #164]	@ (80296a0 <onstatechange+0xd8>)
 80295fa:	681b      	ldr	r3, [r3, #0]
 80295fc:	2b01      	cmp	r3, #1
 80295fe:	dc12      	bgt.n	8029626 <onstatechange+0x5e>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 8029600:	4b27      	ldr	r3, [pc, #156]	@ (80296a0 <onstatechange+0xd8>)
 8029602:	681b      	ldr	r3, [r3, #0]
 8029604:	2b01      	cmp	r3, #1
 8029606:	dc1c      	bgt.n	8029642 <onstatechange+0x7a>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 8029608:	4b25      	ldr	r3, [pc, #148]	@ (80296a0 <onstatechange+0xd8>)
 802960a:	681b      	ldr	r3, [r3, #0]
 802960c:	2b01      	cmp	r3, #1
 802960e:	dc26      	bgt.n	802965e <onstatechange+0x96>
    arp_ask(ifp, ifp->gw);  // unsolicited GW ARP request
 8029610:	6921      	ldr	r1, [r4, #16]
 8029612:	4620      	mov	r0, r4
 8029614:	f7fc fee3 	bl	80263de <arp_ask>
  mg_tcpip_call(ifp, MG_TCPIP_EV_ST_CHG, &ifp->state);
 8029618:	f104 027c 	add.w	r2, r4, #124	@ 0x7c
 802961c:	2100      	movs	r1, #0
 802961e:	4620      	mov	r0, r4
 8029620:	f7f8 f923 	bl	802186a <mg_tcpip_call>
}
 8029624:	bd10      	pop	{r4, pc}
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 8029626:	4b1f      	ldr	r3, [pc, #124]	@ (80296a4 <onstatechange+0xdc>)
 8029628:	f241 4201 	movw	r2, #5121	@ 0x1401
 802962c:	491e      	ldr	r1, [pc, #120]	@ (80296a8 <onstatechange+0xe0>)
 802962e:	2002      	movs	r0, #2
 8029630:	f7fd f91a 	bl	8026868 <mg_log_prefix>
 8029634:	f104 0208 	add.w	r2, r4, #8
 8029638:	491d      	ldr	r1, [pc, #116]	@ (80296b0 <onstatechange+0xe8>)
 802963a:	481e      	ldr	r0, [pc, #120]	@ (80296b4 <onstatechange+0xec>)
 802963c:	f7fa ffc2 	bl	80245c4 <mg_log>
 8029640:	e7de      	b.n	8029600 <onstatechange+0x38>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 8029642:	4b18      	ldr	r3, [pc, #96]	@ (80296a4 <onstatechange+0xdc>)
 8029644:	f241 4202 	movw	r2, #5122	@ 0x1402
 8029648:	4917      	ldr	r1, [pc, #92]	@ (80296a8 <onstatechange+0xe0>)
 802964a:	2002      	movs	r0, #2
 802964c:	f7fd f90c 	bl	8026868 <mg_log_prefix>
 8029650:	f104 0210 	add.w	r2, r4, #16
 8029654:	4916      	ldr	r1, [pc, #88]	@ (80296b0 <onstatechange+0xe8>)
 8029656:	4818      	ldr	r0, [pc, #96]	@ (80296b8 <onstatechange+0xf0>)
 8029658:	f7fa ffb4 	bl	80245c4 <mg_log>
 802965c:	e7d4      	b.n	8029608 <onstatechange+0x40>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 802965e:	4b11      	ldr	r3, [pc, #68]	@ (80296a4 <onstatechange+0xdc>)
 8029660:	f241 4203 	movw	r2, #5123	@ 0x1403
 8029664:	4910      	ldr	r1, [pc, #64]	@ (80296a8 <onstatechange+0xe0>)
 8029666:	2002      	movs	r0, #2
 8029668:	f7fd f8fe 	bl	8026868 <mg_log_prefix>
 802966c:	4622      	mov	r2, r4
 802966e:	4913      	ldr	r1, [pc, #76]	@ (80296bc <onstatechange+0xf4>)
 8029670:	4813      	ldr	r0, [pc, #76]	@ (80296c0 <onstatechange+0xf8>)
 8029672:	f7fa ffa7 	bl	80245c4 <mg_log>
 8029676:	e7cb      	b.n	8029610 <onstatechange+0x48>
    MG_ERROR(("Link up"));
 8029678:	4b09      	ldr	r3, [pc, #36]	@ (80296a0 <onstatechange+0xd8>)
 802967a:	681b      	ldr	r3, [r3, #0]
 802967c:	2b00      	cmp	r3, #0
 802967e:	dc04      	bgt.n	802968a <onstatechange+0xc2>
    srand((unsigned int) mg_millis());
 8029680:	f7fd f8ec 	bl	802685c <mg_millis>
 8029684:	f002 ff9c 	bl	802c5c0 <srand>
 8029688:	e7c6      	b.n	8029618 <onstatechange+0x50>
    MG_ERROR(("Link up"));
 802968a:	4b06      	ldr	r3, [pc, #24]	@ (80296a4 <onstatechange+0xdc>)
 802968c:	f241 4206 	movw	r2, #5126	@ 0x1406
 8029690:	4905      	ldr	r1, [pc, #20]	@ (80296a8 <onstatechange+0xe0>)
 8029692:	2001      	movs	r0, #1
 8029694:	f7fd f8e8 	bl	8026868 <mg_log_prefix>
 8029698:	480a      	ldr	r0, [pc, #40]	@ (80296c4 <onstatechange+0xfc>)
 802969a:	f7fa ff93 	bl	80245c4 <mg_log>
 802969e:	e7ef      	b.n	8029680 <onstatechange+0xb8>
 80296a0:	2000012c 	.word	0x2000012c
 80296a4:	0803bdcc 	.word	0x0803bdcc
 80296a8:	0803b480 	.word	0x0803b480
 80296ac:	0803bb58 	.word	0x0803bb58
 80296b0:	08024585 	.word	0x08024585
 80296b4:	0803bb20 	.word	0x0803bb20
 80296b8:	0803bb30 	.word	0x0803bb30
 80296bc:	08024595 	.word	0x08024595
 80296c0:	0803bb40 	.word	0x0803bb40
 80296c4:	0803bb50 	.word	0x0803bb50

080296c8 <rx_dhcp_client>:
static void rx_dhcp_client(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 80296c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80296cc:	b087      	sub	sp, #28
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 80296ce:	2300      	movs	r3, #0
 80296d0:	9305      	str	r3, [sp, #20]
 80296d2:	9304      	str	r3, [sp, #16]
  uint8_t msgtype = 0, state = ifp->state;
 80296d4:	f890 a07c 	ldrb.w	sl, [r0, #124]	@ 0x7c
  uint8_t *p = pkt->dhcp->options,
 80296d8:	f8d1 8030 	ldr.w	r8, [r1, #48]	@ 0x30
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 80296dc:	680e      	ldr	r6, [r1, #0]
 80296de:	684b      	ldr	r3, [r1, #4]
 80296e0:	441e      	add	r6, r3
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 80296e2:	f508 7388 	add.w	r3, r8, #272	@ 0x110
 80296e6:	42b3      	cmp	r3, r6
 80296e8:	d87b      	bhi.n	80297e2 <rx_dhcp_client+0x11a>
 80296ea:	4605      	mov	r5, r0
 80296ec:	460f      	mov	r7, r1
 80296ee:	f108 04f0 	add.w	r4, r8, #240	@ 0xf0
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 80296f2:	2204      	movs	r2, #4
 80296f4:	1c81      	adds	r1, r0, #2
 80296f6:	eb08 0002 	add.w	r0, r8, r2
 80296fa:	f003 fc1d 	bl	802cf38 <memcmp>
 80296fe:	2800      	cmp	r0, #0
 8029700:	d16f      	bne.n	80297e2 <rx_dhcp_client+0x11a>
  uint8_t msgtype = 0, state = ifp->state;
 8029702:	f04f 0900 	mov.w	r9, #0
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 8029706:	4648      	mov	r0, r9
 8029708:	f8cd 9004 	str.w	r9, [sp, #4]
 802970c:	f8cd 9000 	str.w	r9, [sp]
 8029710:	46cb      	mov	fp, r9
 8029712:	e026      	b.n	8029762 <rx_dhcp_client+0x9a>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 8029714:	7862      	ldrb	r2, [r4, #1]
 8029716:	2a04      	cmp	r2, #4
 8029718:	d12b      	bne.n	8029772 <rx_dhcp_client+0xaa>
 802971a:	1da2      	adds	r2, r4, #6
 802971c:	42b2      	cmp	r2, r6
 802971e:	d228      	bcs.n	8029772 <rx_dhcp_client+0xaa>
      memcpy(&mask, p + 2, sizeof(mask));
 8029720:	f8d4 3002 	ldr.w	r3, [r4, #2]
 8029724:	9301      	str	r3, [sp, #4]
 8029726:	e019      	b.n	802975c <rx_dhcp_client+0x94>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 8029728:	7862      	ldrb	r2, [r4, #1]
 802972a:	2a04      	cmp	r2, #4
 802972c:	d123      	bne.n	8029776 <rx_dhcp_client+0xae>
 802972e:	1da2      	adds	r2, r4, #6
 8029730:	42b2      	cmp	r2, r6
 8029732:	d220      	bcs.n	8029776 <rx_dhcp_client+0xae>
      ip = pkt->dhcp->yiaddr;
 8029734:	f8d8 b010 	ldr.w	fp, [r8, #16]
      memcpy(&gw, p + 2, sizeof(gw));
 8029738:	f8d4 3002 	ldr.w	r3, [r4, #2]
 802973c:	9300      	str	r3, [sp, #0]
      ip = pkt->dhcp->yiaddr;
 802973e:	e00d      	b.n	802975c <rx_dhcp_client+0x94>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 8029740:	7862      	ldrb	r2, [r4, #1]
 8029742:	2a04      	cmp	r2, #4
 8029744:	d11b      	bne.n	802977e <rx_dhcp_client+0xb6>
               p + 6 < end) {  // DNS
 8029746:	1da2      	adds	r2, r4, #6
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 8029748:	42b2      	cmp	r2, r6
 802974a:	d218      	bcs.n	802977e <rx_dhcp_client+0xb6>
      memcpy(&dns, p + 2, sizeof(dns));
 802974c:	f8d4 3002 	ldr.w	r3, [r4, #2]
 8029750:	9305      	str	r3, [sp, #20]
 8029752:	e003      	b.n	802975c <rx_dhcp_client+0x94>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 8029754:	2b33      	cmp	r3, #51	@ 0x33
 8029756:	d022      	beq.n	802979e <rx_dhcp_client+0xd6>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 8029758:	2b35      	cmp	r3, #53	@ 0x35
 802975a:	d02b      	beq.n	80297b4 <rx_dhcp_client+0xec>
    p += p[1] + 2;
 802975c:	7863      	ldrb	r3, [r4, #1]
 802975e:	3302      	adds	r3, #2
 8029760:	441c      	add	r4, r3
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 8029762:	1c63      	adds	r3, r4, #1
 8029764:	42b3      	cmp	r3, r6
 8029766:	d22e      	bcs.n	80297c6 <rx_dhcp_client+0xfe>
 8029768:	7823      	ldrb	r3, [r4, #0]
 802976a:	2bff      	cmp	r3, #255	@ 0xff
 802976c:	d02b      	beq.n	80297c6 <rx_dhcp_client+0xfe>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 802976e:	2b01      	cmp	r3, #1
 8029770:	d0d0      	beq.n	8029714 <rx_dhcp_client+0x4c>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 8029772:	2b03      	cmp	r3, #3
 8029774:	d0d8      	beq.n	8029728 <rx_dhcp_client+0x60>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 8029776:	7fea      	ldrb	r2, [r5, #31]
 8029778:	b10a      	cbz	r2, 802977e <rx_dhcp_client+0xb6>
 802977a:	2b06      	cmp	r3, #6
 802977c:	d0e0      	beq.n	8029740 <rx_dhcp_client+0x78>
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 802977e:	f895 2020 	ldrb.w	r2, [r5, #32]
 8029782:	2a00      	cmp	r2, #0
 8029784:	d0e6      	beq.n	8029754 <rx_dhcp_client+0x8c>
 8029786:	2b2a      	cmp	r3, #42	@ 0x2a
 8029788:	d1e4      	bne.n	8029754 <rx_dhcp_client+0x8c>
 802978a:	7862      	ldrb	r2, [r4, #1]
 802978c:	2a04      	cmp	r2, #4
 802978e:	d1e1      	bne.n	8029754 <rx_dhcp_client+0x8c>
               p + 6 < end) {  // SNTP
 8029790:	1da2      	adds	r2, r4, #6
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 8029792:	42b2      	cmp	r2, r6
 8029794:	d2de      	bcs.n	8029754 <rx_dhcp_client+0x8c>
      memcpy(&sntp, p + 2, sizeof(sntp));
 8029796:	f8d4 3002 	ldr.w	r3, [r4, #2]
 802979a:	9304      	str	r3, [sp, #16]
 802979c:	e7de      	b.n	802975c <rx_dhcp_client+0x94>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 802979e:	7862      	ldrb	r2, [r4, #1]
 80297a0:	2a04      	cmp	r2, #4
 80297a2:	d1d9      	bne.n	8029758 <rx_dhcp_client+0x90>
 80297a4:	1da2      	adds	r2, r4, #6
 80297a6:	42b2      	cmp	r2, r6
 80297a8:	d2d6      	bcs.n	8029758 <rx_dhcp_client+0x90>
      lease = mg_ntohl(lease);
 80297aa:	f8d4 0002 	ldr.w	r0, [r4, #2]
 80297ae:	f7fc fc81 	bl	80260b4 <mg_ntohl>
 80297b2:	e7d3      	b.n	802975c <rx_dhcp_client+0x94>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 80297b4:	7863      	ldrb	r3, [r4, #1]
 80297b6:	2b01      	cmp	r3, #1
 80297b8:	d1d0      	bne.n	802975c <rx_dhcp_client+0x94>
 80297ba:	1da3      	adds	r3, r4, #6
 80297bc:	42b3      	cmp	r3, r6
 80297be:	d2cd      	bcs.n	802975c <rx_dhcp_client+0x94>
      msgtype = p[2];
 80297c0:	f894 9002 	ldrb.w	r9, [r4, #2]
 80297c4:	e7ca      	b.n	802975c <rx_dhcp_client+0x94>
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 80297c6:	f1b9 0f06 	cmp.w	r9, #6
 80297ca:	d00d      	beq.n	80297e8 <rx_dhcp_client+0x120>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 80297cc:	f1b9 0f02 	cmp.w	r9, #2
 80297d0:	d013      	beq.n	80297fa <rx_dhcp_client+0x132>
  } else if (msgtype == 5) {          // DHCPACK
 80297d2:	f1b9 0f05 	cmp.w	r9, #5
 80297d6:	d028      	beq.n	802982a <rx_dhcp_client+0x162>
  if (ifp->state != state) onstatechange(ifp);
 80297d8:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 80297dc:	4553      	cmp	r3, sl
 80297de:	f040 80b4 	bne.w	802994a <rx_dhcp_client+0x282>
}
 80297e2:	b007      	add	sp, #28
 80297e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 80297e8:	68ab      	ldr	r3, [r5, #8]
 80297ea:	455b      	cmp	r3, fp
 80297ec:	d1ee      	bne.n	80297cc <rx_dhcp_client+0x104>
    ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;
 80297ee:	2301      	movs	r3, #1
 80297f0:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
 80297f4:	2300      	movs	r3, #0
 80297f6:	60ab      	str	r3, [r5, #8]
 80297f8:	e7ee      	b.n	80297d8 <rx_dhcp_client+0x110>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 80297fa:	f1ba 0f01 	cmp.w	sl, #1
 80297fe:	d1e8      	bne.n	80297d2 <rx_dhcp_client+0x10a>
 8029800:	f1bb 0f00 	cmp.w	fp, #0
 8029804:	d0e5      	beq.n	80297d2 <rx_dhcp_client+0x10a>
 8029806:	9b00      	ldr	r3, [sp, #0]
 8029808:	2b00      	cmp	r3, #0
 802980a:	d0e2      	beq.n	80297d2 <rx_dhcp_client+0x10a>
 802980c:	2800      	cmp	r0, #0
 802980e:	d0e0      	beq.n	80297d2 <rx_dhcp_client+0x10a>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 8029810:	f8d8 2014 	ldr.w	r2, [r8, #20]
    tx_dhcp_request_sel(ifp, ip,
 8029814:	b90a      	cbnz	r2, 802981a <rx_dhcp_client+0x152>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 8029816:	69fb      	ldr	r3, [r7, #28]
    tx_dhcp_request_sel(ifp, ip,
 8029818:	68da      	ldr	r2, [r3, #12]
 802981a:	4659      	mov	r1, fp
 802981c:	4628      	mov	r0, r5
 802981e:	f7ff f9b9 	bl	8028b94 <tx_dhcp_request_sel>
    ifp->state = MG_TCPIP_STATE_REQ;  // REQUESTING state
 8029822:	2302      	movs	r3, #2
 8029824:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
 8029828:	e7d6      	b.n	80297d8 <rx_dhcp_client+0x110>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 802982a:	f1ba 0f02 	cmp.w	sl, #2
 802982e:	d02a      	beq.n	8029886 <rx_dhcp_client+0x1be>
    } else if (ifp->state == MG_TCPIP_STATE_READY && ifp->ip == ip) {  // renew
 8029830:	f1ba 0f03 	cmp.w	sl, #3
 8029834:	d1d0      	bne.n	80297d8 <rx_dhcp_client+0x110>
 8029836:	68ab      	ldr	r3, [r5, #8]
 8029838:	455b      	cmp	r3, fp
 802983a:	d1cd      	bne.n	80297d8 <rx_dhcp_client+0x110>
      ifp->lease_expire = ifp->now + lease * 1000;
 802983c:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 802983e:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 8029840:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8029844:	4604      	mov	r4, r0
 8029846:	fb00 f202 	mul.w	r2, r0, r2
 802984a:	189b      	adds	r3, r3, r2
 802984c:	f141 0100 	adc.w	r1, r1, #0
 8029850:	662b      	str	r3, [r5, #96]	@ 0x60
 8029852:	6669      	str	r1, [r5, #100]	@ 0x64
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 8029854:	4b3f      	ldr	r3, [pc, #252]	@ (8029954 <rx_dhcp_client+0x28c>)
 8029856:	681b      	ldr	r3, [r3, #0]
 8029858:	2b01      	cmp	r3, #1
 802985a:	ddbd      	ble.n	80297d8 <rx_dhcp_client+0x110>
 802985c:	4b3e      	ldr	r3, [pc, #248]	@ (8029958 <rx_dhcp_client+0x290>)
 802985e:	f241 42ef 	movw	r2, #5359	@ 0x14ef
 8029862:	493e      	ldr	r1, [pc, #248]	@ (802995c <rx_dhcp_client+0x294>)
 8029864:	2002      	movs	r0, #2
 8029866:	f7fc ffff 	bl	8026868 <mg_log_prefix>
 802986a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 802986e:	2300      	movs	r3, #0
 8029870:	e9d5 0118 	ldrd	r0, r1, [r5, #96]	@ 0x60
 8029874:	f7e7 fa70 	bl	8010d58 <__aeabi_uldivmod>
 8029878:	4602      	mov	r2, r0
 802987a:	460b      	mov	r3, r1
 802987c:	4621      	mov	r1, r4
 802987e:	4838      	ldr	r0, [pc, #224]	@ (8029960 <rx_dhcp_client+0x298>)
 8029880:	f7fa fea0 	bl	80245c4 <mg_log>
 8029884:	e7a8      	b.n	80297d8 <rx_dhcp_client+0x110>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 8029886:	f1bb 0f00 	cmp.w	fp, #0
 802988a:	d0d1      	beq.n	8029830 <rx_dhcp_client+0x168>
 802988c:	9b00      	ldr	r3, [sp, #0]
 802988e:	2b00      	cmp	r3, #0
 8029890:	d0ce      	beq.n	8029830 <rx_dhcp_client+0x168>
 8029892:	4604      	mov	r4, r0
 8029894:	2800      	cmp	r0, #0
 8029896:	d0cb      	beq.n	8029830 <rx_dhcp_client+0x168>
      ifp->lease_expire = ifp->now + lease * 1000;
 8029898:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 802989a:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 802989c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80298a0:	fb00 f202 	mul.w	r2, r0, r2
 80298a4:	189b      	adds	r3, r3, r2
 80298a6:	f141 0100 	adc.w	r1, r1, #0
 80298aa:	662b      	str	r3, [r5, #96]	@ 0x60
 80298ac:	6669      	str	r1, [r5, #100]	@ 0x64
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 80298ae:	4b29      	ldr	r3, [pc, #164]	@ (8029954 <rx_dhcp_client+0x28c>)
 80298b0:	681b      	ldr	r3, [r3, #0]
 80298b2:	2b01      	cmp	r3, #1
 80298b4:	dc2e      	bgt.n	8029914 <rx_dhcp_client+0x24c>
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 80298b6:	693b      	ldr	r3, [r7, #16]
 80298b8:	f8d3 2006 	ldr.w	r2, [r3, #6]
 80298bc:	f8c5 2046 	str.w	r2, [r5, #70]	@ 0x46
 80298c0:	895b      	ldrh	r3, [r3, #10]
 80298c2:	f8a5 304a 	strh.w	r3, [r5, #74]	@ 0x4a
      ifp->ip = ip, ifp->gw = gw, ifp->mask = mask;
 80298c6:	f8c5 b008 	str.w	fp, [r5, #8]
 80298ca:	9b00      	ldr	r3, [sp, #0]
 80298cc:	612b      	str	r3, [r5, #16]
 80298ce:	9b01      	ldr	r3, [sp, #4]
 80298d0:	60eb      	str	r3, [r5, #12]
      ifp->state = MG_TCPIP_STATE_READY;  // BOUND state
 80298d2:	2303      	movs	r3, #3
 80298d4:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
      mg_random(&rand, sizeof(rand));
 80298d8:	2108      	movs	r1, #8
 80298da:	eb0d 0001 	add.w	r0, sp, r1
 80298de:	f7fc fbae 	bl	802603e <mg_random>
      srand((unsigned int) (rand + mg_millis()));
 80298e2:	9c02      	ldr	r4, [sp, #8]
 80298e4:	f7fc ffba 	bl	802685c <mg_millis>
 80298e8:	4420      	add	r0, r4
 80298ea:	f002 fe69 	bl	802c5c0 <srand>
      if (ifp->enable_req_dns && dns != 0)
 80298ee:	7feb      	ldrb	r3, [r5, #31]
 80298f0:	b10b      	cbz	r3, 80298f6 <rx_dhcp_client+0x22e>
 80298f2:	9b05      	ldr	r3, [sp, #20]
 80298f4:	bb1b      	cbnz	r3, 802993e <rx_dhcp_client+0x276>
      if (ifp->enable_req_sntp && sntp != 0)
 80298f6:	f895 3020 	ldrb.w	r3, [r5, #32]
 80298fa:	2b00      	cmp	r3, #0
 80298fc:	f43f af6c 	beq.w	80297d8 <rx_dhcp_client+0x110>
 8029900:	9b04      	ldr	r3, [sp, #16]
 8029902:	2b00      	cmp	r3, #0
 8029904:	f43f af68 	beq.w	80297d8 <rx_dhcp_client+0x110>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_SNTP, &sntp);
 8029908:	aa04      	add	r2, sp, #16
 802990a:	2102      	movs	r1, #2
 802990c:	4628      	mov	r0, r5
 802990e:	f7f7 ffac 	bl	802186a <mg_tcpip_call>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 8029912:	e761      	b.n	80297d8 <rx_dhcp_client+0x110>
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 8029914:	4b10      	ldr	r3, [pc, #64]	@ (8029958 <rx_dhcp_client+0x290>)
 8029916:	f241 42e1 	movw	r2, #5345	@ 0x14e1
 802991a:	4910      	ldr	r1, [pc, #64]	@ (802995c <rx_dhcp_client+0x294>)
 802991c:	2002      	movs	r0, #2
 802991e:	f7fc ffa3 	bl	8026868 <mg_log_prefix>
 8029922:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8029926:	2300      	movs	r3, #0
 8029928:	e9d5 0118 	ldrd	r0, r1, [r5, #96]	@ 0x60
 802992c:	f7e7 fa14 	bl	8010d58 <__aeabi_uldivmod>
 8029930:	4602      	mov	r2, r0
 8029932:	460b      	mov	r3, r1
 8029934:	4621      	mov	r1, r4
 8029936:	480a      	ldr	r0, [pc, #40]	@ (8029960 <rx_dhcp_client+0x298>)
 8029938:	f7fa fe44 	bl	80245c4 <mg_log>
 802993c:	e7bb      	b.n	80298b6 <rx_dhcp_client+0x1ee>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_DNS, &dns);
 802993e:	aa05      	add	r2, sp, #20
 8029940:	2101      	movs	r1, #1
 8029942:	4628      	mov	r0, r5
 8029944:	f7f7 ff91 	bl	802186a <mg_tcpip_call>
 8029948:	e7d5      	b.n	80298f6 <rx_dhcp_client+0x22e>
  if (ifp->state != state) onstatechange(ifp);
 802994a:	4628      	mov	r0, r5
 802994c:	f7ff fe3c 	bl	80295c8 <onstatechange>
 8029950:	e747      	b.n	80297e2 <rx_dhcp_client+0x11a>
 8029952:	bf00      	nop
 8029954:	2000012c 	.word	0x2000012c
 8029958:	0803bd8c 	.word	0x0803bd8c
 802995c:	0803b480 	.word	0x0803b480
 8029960:	0803bb64 	.word	0x0803bb64

08029964 <rx_ip>:
static void rx_ip(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8029964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029968:	b084      	sub	sp, #16
 802996a:	4605      	mov	r5, r0
 802996c:	460c      	mov	r4, r1
  if (pkt->ip->frag & IP_MORE_FRAGS_MSK || pkt->ip->frag & IP_FRAG_OFFSET_MSK) {
 802996e:	69c9      	ldr	r1, [r1, #28]
 8029970:	88cb      	ldrh	r3, [r1, #6]
 8029972:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8029976:	b29b      	uxth	r3, r3
 8029978:	b1c3      	cbz	r3, 80299ac <rx_ip+0x48>
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 802997a:	7a4b      	ldrb	r3, [r1, #9]
 802997c:	2b11      	cmp	r3, #17
 802997e:	d00e      	beq.n	802999e <rx_ip+0x3a>
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 8029980:	7a4b      	ldrb	r3, [r1, #9]
 8029982:	2b06      	cmp	r3, #6
 8029984:	d00f      	beq.n	80299a6 <rx_ip+0x42>
    struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 8029986:	2200      	movs	r2, #0
 8029988:	4621      	mov	r1, r4
 802998a:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 802998c:	f7f9 fa65 	bl	8022e5a <getpeer>
    if (c) mg_error(c, "Received fragmented packet");
 8029990:	b110      	cbz	r0, 8029998 <rx_ip+0x34>
 8029992:	4963      	ldr	r1, [pc, #396]	@ (8029b20 <rx_ip+0x1bc>)
 8029994:	f7fd f850 	bl	8026a38 <mg_error>
}
 8029998:	b004      	add	sp, #16
 802999a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 802999e:	f101 0314 	add.w	r3, r1, #20
 80299a2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80299a4:	e7ec      	b.n	8029980 <rx_ip+0x1c>
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 80299a6:	3114      	adds	r1, #20
 80299a8:	62a1      	str	r1, [r4, #40]	@ 0x28
 80299aa:	e7ec      	b.n	8029986 <rx_ip+0x22>
  } else if (pkt->ip->proto == 1) {
 80299ac:	7a4b      	ldrb	r3, [r1, #9]
 80299ae:	2b01      	cmp	r3, #1
 80299b0:	d024      	beq.n	80299fc <rx_ip+0x98>
  } else if (pkt->ip->proto == 17) {
 80299b2:	2b11      	cmp	r3, #17
 80299b4:	d031      	beq.n	8029a1a <rx_ip+0xb6>
  } else if (pkt->ip->proto == 6) {
 80299b6:	2b06      	cmp	r3, #6
 80299b8:	d1ee      	bne.n	8029998 <rx_ip+0x34>
    pkt->tcp = (struct tcp *) (pkt->ip + 1);
 80299ba:	f101 0314 	add.w	r3, r1, #20
 80299be:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 80299c0:	68e3      	ldr	r3, [r4, #12]
 80299c2:	2b13      	cmp	r3, #19
 80299c4:	d9e8      	bls.n	8029998 <rx_ip+0x34>
    mkpay(pkt, pkt->tcp + 1);
 80299c6:	3128      	adds	r1, #40	@ 0x28
 80299c8:	4620      	mov	r0, r4
 80299ca:	f7fb f898 	bl	8024afe <mkpay>
    uint16_t iplen = mg_ntohs(pkt->ip->len);
 80299ce:	69e3      	ldr	r3, [r4, #28]
 80299d0:	8858      	ldrh	r0, [r3, #2]
 80299d2:	f7fc fc07 	bl	80261e4 <mg_ntohs>
    uint16_t off = (uint16_t) (sizeof(*pkt->ip) + ((pkt->tcp->off >> 4) * 4U));
 80299d6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80299d8:	7b1b      	ldrb	r3, [r3, #12]
 80299da:	091b      	lsrs	r3, r3, #4
 80299dc:	3305      	adds	r3, #5
 80299de:	009a      	lsls	r2, r3, #2
    if (iplen >= off) pkt->pay.len = (size_t) (iplen - off);
 80299e0:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 80299e4:	d301      	bcc.n	80299ea <rx_ip+0x86>
 80299e6:	1a80      	subs	r0, r0, r2
 80299e8:	60e0      	str	r0, [r4, #12]
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 80299ea:	4b4e      	ldr	r3, [pc, #312]	@ (8029b24 <rx_ip+0x1c0>)
 80299ec:	681b      	ldr	r3, [r3, #0]
 80299ee:	2b03      	cmp	r3, #3
 80299f0:	dc74      	bgt.n	8029adc <rx_ip+0x178>
    rx_tcp(ifp, pkt);
 80299f2:	4621      	mov	r1, r4
 80299f4:	4628      	mov	r0, r5
 80299f6:	f7ff fb3d 	bl	8029074 <rx_tcp>
 80299fa:	e7cd      	b.n	8029998 <rx_ip+0x34>
    pkt->icmp = (struct icmp *) (pkt->ip + 1);
 80299fc:	f101 0314 	add.w	r3, r1, #20
 8029a00:	6263      	str	r3, [r4, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8029a02:	68e3      	ldr	r3, [r4, #12]
 8029a04:	2b03      	cmp	r3, #3
 8029a06:	d9c7      	bls.n	8029998 <rx_ip+0x34>
    mkpay(pkt, pkt->icmp + 1);
 8029a08:	3118      	adds	r1, #24
 8029a0a:	4620      	mov	r0, r4
 8029a0c:	f7fb f877 	bl	8024afe <mkpay>
    rx_icmp(ifp, pkt);
 8029a10:	4621      	mov	r1, r4
 8029a12:	4628      	mov	r0, r5
 8029a14:	f7fc fc3b 	bl	802628e <rx_icmp>
 8029a18:	e7be      	b.n	8029998 <rx_ip+0x34>
    pkt->udp = (struct udp *) (pkt->ip + 1);
 8029a1a:	f101 0314 	add.w	r3, r1, #20
 8029a1e:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8029a20:	68e3      	ldr	r3, [r4, #12]
 8029a22:	2b07      	cmp	r3, #7
 8029a24:	d9b8      	bls.n	8029998 <rx_ip+0x34>
    mkpay(pkt, pkt->udp + 1);
 8029a26:	311c      	adds	r1, #28
 8029a28:	4620      	mov	r0, r4
 8029a2a:	f7fb f868 	bl	8024afe <mkpay>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 8029a2e:	4b3d      	ldr	r3, [pc, #244]	@ (8029b24 <rx_ip+0x1c0>)
 8029a30:	681b      	ldr	r3, [r3, #0]
 8029a32:	2b03      	cmp	r3, #3
 8029a34:	dc16      	bgt.n	8029a64 <rx_ip+0x100>
    if (ifp->enable_dhcp_client && pkt->udp->dport == mg_htons(68)) {
 8029a36:	7f2b      	ldrb	r3, [r5, #28]
 8029a38:	b133      	cbz	r3, 8029a48 <rx_ip+0xe4>
 8029a3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8029a3c:	8877      	ldrh	r7, [r6, #2]
 8029a3e:	2044      	movs	r0, #68	@ 0x44
 8029a40:	f7fc fbd0 	bl	80261e4 <mg_ntohs>
 8029a44:	4287      	cmp	r7, r0
 8029a46:	d02f      	beq.n	8029aa8 <rx_ip+0x144>
    } else if (ifp->enable_dhcp_server && pkt->udp->dport == mg_htons(67)) {
 8029a48:	7f6b      	ldrb	r3, [r5, #29]
 8029a4a:	b133      	cbz	r3, 8029a5a <rx_ip+0xf6>
 8029a4c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8029a4e:	8877      	ldrh	r7, [r6, #2]
 8029a50:	2043      	movs	r0, #67	@ 0x43
 8029a52:	f7fc fbc7 	bl	80261e4 <mg_ntohs>
 8029a56:	4287      	cmp	r7, r0
 8029a58:	d033      	beq.n	8029ac2 <rx_ip+0x15e>
      rx_udp(ifp, pkt);
 8029a5a:	4621      	mov	r1, r4
 8029a5c:	4628      	mov	r0, r5
 8029a5e:	f7fd fe03 	bl	8027668 <rx_udp>
 8029a62:	e799      	b.n	8029998 <rx_ip+0x34>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 8029a64:	4b30      	ldr	r3, [pc, #192]	@ (8029b28 <rx_ip+0x1c4>)
 8029a66:	f241 6255 	movw	r2, #5717	@ 0x1655
 8029a6a:	4930      	ldr	r1, [pc, #192]	@ (8029b2c <rx_ip+0x1c8>)
 8029a6c:	2004      	movs	r0, #4
 8029a6e:	f7fc fefb 	bl	8026868 <mg_log_prefix>
 8029a72:	69e7      	ldr	r7, [r4, #28]
 8029a74:	f8d4 802c 	ldr.w	r8, [r4, #44]	@ 0x2c
 8029a78:	f8b8 0000 	ldrh.w	r0, [r8]
 8029a7c:	f7fc fbb2 	bl	80261e4 <mg_ntohs>
 8029a80:	4606      	mov	r6, r0
 8029a82:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 8029a86:	f7fc fbad 	bl	80261e4 <mg_ntohs>
 8029a8a:	68e3      	ldr	r3, [r4, #12]
 8029a8c:	4928      	ldr	r1, [pc, #160]	@ (8029b30 <rx_ip+0x1cc>)
 8029a8e:	9303      	str	r3, [sp, #12]
 8029a90:	9002      	str	r0, [sp, #8]
 8029a92:	f107 0310 	add.w	r3, r7, #16
 8029a96:	9301      	str	r3, [sp, #4]
 8029a98:	9100      	str	r1, [sp, #0]
 8029a9a:	4633      	mov	r3, r6
 8029a9c:	f107 020c 	add.w	r2, r7, #12
 8029aa0:	4824      	ldr	r0, [pc, #144]	@ (8029b34 <rx_ip+0x1d0>)
 8029aa2:	f7fa fd8f 	bl	80245c4 <mg_log>
 8029aa6:	e7c6      	b.n	8029a36 <rx_ip+0xd2>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 8029aa8:	f106 0308 	add.w	r3, r6, #8
 8029aac:	6323      	str	r3, [r4, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 8029aae:	f506 718c 	add.w	r1, r6, #280	@ 0x118
 8029ab2:	4620      	mov	r0, r4
 8029ab4:	f7fb f823 	bl	8024afe <mkpay>
      rx_dhcp_client(ifp, pkt);
 8029ab8:	4621      	mov	r1, r4
 8029aba:	4628      	mov	r0, r5
 8029abc:	f7ff fe04 	bl	80296c8 <rx_dhcp_client>
 8029ac0:	e76a      	b.n	8029998 <rx_ip+0x34>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 8029ac2:	f106 0308 	add.w	r3, r6, #8
 8029ac6:	6323      	str	r3, [r4, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 8029ac8:	f506 718c 	add.w	r1, r6, #280	@ 0x118
 8029acc:	4620      	mov	r0, r4
 8029ace:	f7fb f816 	bl	8024afe <mkpay>
      rx_dhcp_server(ifp, pkt);
 8029ad2:	4621      	mov	r1, r4
 8029ad4:	4628      	mov	r0, r5
 8029ad6:	f7fc fd05 	bl	80264e4 <rx_dhcp_server>
 8029ada:	e75d      	b.n	8029998 <rx_ip+0x34>
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 8029adc:	4b12      	ldr	r3, [pc, #72]	@ (8029b28 <rx_ip+0x1c4>)
 8029ade:	f241 626a 	movw	r2, #5738	@ 0x166a
 8029ae2:	4912      	ldr	r1, [pc, #72]	@ (8029b2c <rx_ip+0x1c8>)
 8029ae4:	2004      	movs	r0, #4
 8029ae6:	f7fc febf 	bl	8026868 <mg_log_prefix>
 8029aea:	69e7      	ldr	r7, [r4, #28]
 8029aec:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
 8029af0:	f8b8 0000 	ldrh.w	r0, [r8]
 8029af4:	f7fc fb76 	bl	80261e4 <mg_ntohs>
 8029af8:	4606      	mov	r6, r0
 8029afa:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 8029afe:	f7fc fb71 	bl	80261e4 <mg_ntohs>
 8029b02:	68e3      	ldr	r3, [r4, #12]
 8029b04:	490a      	ldr	r1, [pc, #40]	@ (8029b30 <rx_ip+0x1cc>)
 8029b06:	9303      	str	r3, [sp, #12]
 8029b08:	9002      	str	r0, [sp, #8]
 8029b0a:	f107 0310 	add.w	r3, r7, #16
 8029b0e:	9301      	str	r3, [sp, #4]
 8029b10:	9100      	str	r1, [sp, #0]
 8029b12:	4633      	mov	r3, r6
 8029b14:	f107 020c 	add.w	r2, r7, #12
 8029b18:	4807      	ldr	r0, [pc, #28]	@ (8029b38 <rx_ip+0x1d4>)
 8029b1a:	f7fa fd53 	bl	80245c4 <mg_log>
 8029b1e:	e768      	b.n	80299f2 <rx_ip+0x8e>
 8029b20:	0803bb7c 	.word	0x0803bb7c
 8029b24:	2000012c 	.word	0x2000012c
 8029b28:	0803bd9c 	.word	0x0803bd9c
 8029b2c:	0803b480 	.word	0x0803b480
 8029b30:	08024585 	.word	0x08024585
 8029b34:	0803bb98 	.word	0x0803bb98
 8029b38:	0803bbb4 	.word	0x0803bbb4

08029b3c <mg_tcpip_rx>:
static void mg_tcpip_rx(struct mg_tcpip_if *ifp, void *buf, size_t len) {
 8029b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029b40:	b08e      	sub	sp, #56	@ 0x38
 8029b42:	4606      	mov	r6, r0
 8029b44:	460c      	mov	r4, r1
 8029b46:	4615      	mov	r5, r2
  memset(&pkt, 0, sizeof(pkt));
 8029b48:	2234      	movs	r2, #52	@ 0x34
 8029b4a:	2100      	movs	r1, #0
 8029b4c:	a801      	add	r0, sp, #4
 8029b4e:	f003 fa87 	bl	802d060 <memset>
  pkt.raw.buf = (char *) buf;
 8029b52:	9401      	str	r4, [sp, #4]
  pkt.raw.len = len;
 8029b54:	9502      	str	r5, [sp, #8]
  pkt.eth = (struct eth *) buf;
 8029b56:	9405      	str	r4, [sp, #20]
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 8029b58:	2d0d      	cmp	r5, #13
 8029b5a:	d93f      	bls.n	8029bdc <mg_tcpip_rx+0xa0>
  if (ifp->enable_mac_check &&
 8029b5c:	f896 3022 	ldrb.w	r3, [r6, #34]	@ 0x22
 8029b60:	b15b      	cbz	r3, 8029b7a <mg_tcpip_rx+0x3e>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 8029b62:	2206      	movs	r2, #6
 8029b64:	4631      	mov	r1, r6
 8029b66:	4620      	mov	r0, r4
 8029b68:	f003 f9e6 	bl	802cf38 <memcmp>
  if (ifp->enable_mac_check &&
 8029b6c:	b128      	cbz	r0, 8029b7a <mg_tcpip_rx+0x3e>
      memcmp(pkt.eth->dst, broadcast, sizeof(pkt.eth->dst)) != 0)
 8029b6e:	2206      	movs	r2, #6
 8029b70:	4945      	ldr	r1, [pc, #276]	@ (8029c88 <mg_tcpip_rx+0x14c>)
 8029b72:	4620      	mov	r0, r4
 8029b74:	f003 f9e0 	bl	802cf38 <memcmp>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 8029b78:	bb80      	cbnz	r0, 8029bdc <mg_tcpip_rx+0xa0>
  if (ifp->enable_crc32_check && len > 4) {
 8029b7a:	f896 3021 	ldrb.w	r3, [r6, #33]	@ 0x21
 8029b7e:	b18b      	cbz	r3, 8029ba4 <mg_tcpip_rx+0x68>
 8029b80:	2d04      	cmp	r5, #4
 8029b82:	d92e      	bls.n	8029be2 <mg_tcpip_rx+0xa6>
    len -= 4;  // TODO(scaprile): check on bigendian
 8029b84:	f1a5 0804 	sub.w	r8, r5, #4
    uint32_t crc = mg_crc32(0, (const char *) buf, len);
 8029b88:	4642      	mov	r2, r8
 8029b8a:	4621      	mov	r1, r4
 8029b8c:	2000      	movs	r0, #0
 8029b8e:	f7fc fddf 	bl	8026750 <mg_crc32>
 8029b92:	9000      	str	r0, [sp, #0]
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 8029b94:	2204      	movs	r2, #4
 8029b96:	4669      	mov	r1, sp
 8029b98:	eb04 0008 	add.w	r0, r4, r8
 8029b9c:	f003 f9cc 	bl	802cf38 <memcmp>
 8029ba0:	b108      	cbz	r0, 8029ba6 <mg_tcpip_rx+0x6a>
 8029ba2:	e01b      	b.n	8029bdc <mg_tcpip_rx+0xa0>
  if (ifp->enable_crc32_check && len > 4) {
 8029ba4:	46a8      	mov	r8, r5
  if (pkt.eth->type == mg_htons(0x806)) {
 8029ba6:	89a7      	ldrh	r7, [r4, #12]
 8029ba8:	f640 0006 	movw	r0, #2054	@ 0x806
 8029bac:	f7fc fb1a 	bl	80261e4 <mg_ntohs>
 8029bb0:	4287      	cmp	r7, r0
 8029bb2:	d018      	beq.n	8029be6 <mg_tcpip_rx+0xaa>
  } else if (pkt.eth->type == mg_htons(0x86dd)) {
 8029bb4:	f248 60dd 	movw	r0, #34525	@ 0x86dd
 8029bb8:	f7fc fb14 	bl	80261e4 <mg_ntohs>
 8029bbc:	4287      	cmp	r7, r0
 8029bbe:	d01b      	beq.n	8029bf8 <mg_tcpip_rx+0xbc>
  } else if (pkt.eth->type == mg_htons(0x800)) {
 8029bc0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8029bc4:	f7fc fb0e 	bl	80261e4 <mg_ntohs>
 8029bc8:	4287      	cmp	r7, r0
 8029bca:	d028      	beq.n	8029c1e <mg_tcpip_rx+0xe2>
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 8029bcc:	4b2f      	ldr	r3, [pc, #188]	@ (8029c8c <mg_tcpip_rx+0x150>)
 8029bce:	681b      	ldr	r3, [r3, #0]
 8029bd0:	2b02      	cmp	r3, #2
 8029bd2:	dc41      	bgt.n	8029c58 <mg_tcpip_rx+0x11c>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 8029bd4:	4b2d      	ldr	r3, [pc, #180]	@ (8029c8c <mg_tcpip_rx+0x150>)
 8029bd6:	681b      	ldr	r3, [r3, #0]
 8029bd8:	2b03      	cmp	r3, #3
 8029bda:	dc4d      	bgt.n	8029c78 <mg_tcpip_rx+0x13c>
}
 8029bdc:	b00e      	add	sp, #56	@ 0x38
 8029bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (ifp->enable_crc32_check && len > 4) {
 8029be2:	46a8      	mov	r8, r5
 8029be4:	e7df      	b.n	8029ba6 <mg_tcpip_rx+0x6a>
    pkt.arp = (struct arp *) (pkt.eth + 1);
 8029be6:	340e      	adds	r4, #14
 8029be8:	9407      	str	r4, [sp, #28]
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 8029bea:	2d29      	cmp	r5, #41	@ 0x29
 8029bec:	d9f6      	bls.n	8029bdc <mg_tcpip_rx+0xa0>
    rx_arp(ifp, &pkt);
 8029bee:	a901      	add	r1, sp, #4
 8029bf0:	4630      	mov	r0, r6
 8029bf2:	f7fe ff09 	bl	8028a08 <rx_arp>
 8029bf6:	e7f1      	b.n	8029bdc <mg_tcpip_rx+0xa0>
    pkt.ip6 = (struct ip6 *) (pkt.eth + 1);
 8029bf8:	f104 030e 	add.w	r3, r4, #14
 8029bfc:	9309      	str	r3, [sp, #36]	@ 0x24
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 8029bfe:	2d35      	cmp	r5, #53	@ 0x35
 8029c00:	d9ec      	bls.n	8029bdc <mg_tcpip_rx+0xa0>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 8029c02:	7ba3      	ldrb	r3, [r4, #14]
 8029c04:	091b      	lsrs	r3, r3, #4
 8029c06:	2b06      	cmp	r3, #6
 8029c08:	d1e8      	bne.n	8029bdc <mg_tcpip_rx+0xa0>
    mkpay(&pkt, pkt.ip6 + 1);
 8029c0a:	f104 0136 	add.w	r1, r4, #54	@ 0x36
 8029c0e:	a801      	add	r0, sp, #4
 8029c10:	f7fa ff75 	bl	8024afe <mkpay>
    rx_ip6(ifp, &pkt);
 8029c14:	a901      	add	r1, sp, #4
 8029c16:	4630      	mov	r0, r6
 8029c18:	f7fc fb73 	bl	8026302 <rx_ip6>
 8029c1c:	e7de      	b.n	8029bdc <mg_tcpip_rx+0xa0>
    pkt.ip = (struct ip *) (pkt.eth + 1);
 8029c1e:	f104 030e 	add.w	r3, r4, #14
 8029c22:	9308      	str	r3, [sp, #32]
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8029c24:	2d21      	cmp	r5, #33	@ 0x21
 8029c26:	d9d9      	bls.n	8029bdc <mg_tcpip_rx+0xa0>
    if ((size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth) < pkt.raw.len) {
 8029c28:	8a20      	ldrh	r0, [r4, #16]
 8029c2a:	f7fc fadb 	bl	80261e4 <mg_ntohs>
 8029c2e:	300e      	adds	r0, #14
 8029c30:	42a8      	cmp	r0, r5
 8029c32:	d200      	bcs.n	8029c36 <mg_tcpip_rx+0xfa>
      pkt.raw.len = (size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth);
 8029c34:	9002      	str	r0, [sp, #8]
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8029c36:	9b02      	ldr	r3, [sp, #8]
 8029c38:	2b21      	cmp	r3, #33	@ 0x21
 8029c3a:	d9cf      	bls.n	8029bdc <mg_tcpip_rx+0xa0>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 8029c3c:	7ba3      	ldrb	r3, [r4, #14]
 8029c3e:	091b      	lsrs	r3, r3, #4
 8029c40:	2b04      	cmp	r3, #4
 8029c42:	d1cb      	bne.n	8029bdc <mg_tcpip_rx+0xa0>
    mkpay(&pkt, pkt.ip + 1);
 8029c44:	f104 0122 	add.w	r1, r4, #34	@ 0x22
 8029c48:	a801      	add	r0, sp, #4
 8029c4a:	f7fa ff58 	bl	8024afe <mkpay>
    rx_ip(ifp, &pkt);
 8029c4e:	a901      	add	r1, sp, #4
 8029c50:	4630      	mov	r0, r6
 8029c52:	f7ff fe87 	bl	8029964 <rx_ip>
 8029c56:	e7c1      	b.n	8029bdc <mg_tcpip_rx+0xa0>
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 8029c58:	4b0d      	ldr	r3, [pc, #52]	@ (8029c90 <mg_tcpip_rx+0x154>)
 8029c5a:	f241 62a8 	movw	r2, #5800	@ 0x16a8
 8029c5e:	490d      	ldr	r1, [pc, #52]	@ (8029c94 <mg_tcpip_rx+0x158>)
 8029c60:	2003      	movs	r0, #3
 8029c62:	f7fc fe01 	bl	8026868 <mg_log_prefix>
 8029c66:	9b05      	ldr	r3, [sp, #20]
 8029c68:	8998      	ldrh	r0, [r3, #12]
 8029c6a:	f7fc fabb 	bl	80261e4 <mg_ntohs>
 8029c6e:	4601      	mov	r1, r0
 8029c70:	4809      	ldr	r0, [pc, #36]	@ (8029c98 <mg_tcpip_rx+0x15c>)
 8029c72:	f7fa fca7 	bl	80245c4 <mg_log>
 8029c76:	e7ad      	b.n	8029bd4 <mg_tcpip_rx+0x98>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 8029c78:	4641      	mov	r1, r8
 8029c7a:	2920      	cmp	r1, #32
 8029c7c:	bf28      	it	cs
 8029c7e:	2120      	movcs	r1, #32
 8029c80:	4620      	mov	r0, r4
 8029c82:	f7f9 fe01 	bl	8023888 <mg_hexdump>
 8029c86:	e7a9      	b.n	8029bdc <mg_tcpip_rx+0xa0>
 8029c88:	0803bf08 	.word	0x0803bf08
 8029c8c:	2000012c 	.word	0x2000012c
 8029c90:	0803bdac 	.word	0x0803bdac
 8029c94:	0803b480 	.word	0x0803b480
 8029c98:	0803bbd0 	.word	0x0803bbd0

08029c9c <mg_tcpip_poll>:
static void mg_tcpip_poll(struct mg_tcpip_if *ifp, uint64_t now) {
 8029c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029ca0:	b08b      	sub	sp, #44	@ 0x2c
 8029ca2:	4605      	mov	r5, r0
 8029ca4:	4616      	mov	r6, r2
 8029ca6:	461f      	mov	r7, r3
  bool expired_1000ms = mg_timer_expired(&ifp->timer_1000ms, 1000, now);
 8029ca8:	9200      	str	r2, [sp, #0]
 8029caa:	9301      	str	r3, [sp, #4]
 8029cac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8029cb0:	2300      	movs	r3, #0
 8029cb2:	3058      	adds	r0, #88	@ 0x58
 8029cb4:	f7fc f868 	bl	8025d88 <mg_timer_expired>
  ifp->now = now;
 8029cb8:	652e      	str	r6, [r5, #80]	@ 0x50
 8029cba:	656f      	str	r7, [r5, #84]	@ 0x54
  if (expired_1000ms && ifp->driver->up) {
 8029cbc:	4604      	mov	r4, r0
 8029cbe:	b318      	cbz	r0, 8029d08 <mg_tcpip_poll+0x6c>
 8029cc0:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8029cc2:	68db      	ldr	r3, [r3, #12]
 8029cc4:	b303      	cbz	r3, 8029d08 <mg_tcpip_poll+0x6c>
    bool up = ifp->driver->up(ifp);
 8029cc6:	4628      	mov	r0, r5
 8029cc8:	4798      	blx	r3
    bool current = ifp->state != MG_TCPIP_STATE_DOWN;
 8029cca:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 8029cce:	3b00      	subs	r3, #0
 8029cd0:	bf18      	it	ne
 8029cd2:	2301      	movne	r3, #1
    if (up != current) {
 8029cd4:	4298      	cmp	r0, r3
 8029cd6:	d010      	beq.n	8029cfa <mg_tcpip_poll+0x5e>
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 8029cd8:	b120      	cbz	r0, 8029ce4 <mg_tcpip_poll+0x48>
                   : ifp->enable_dhcp_client ? MG_TCPIP_STATE_UP
 8029cda:	7f2b      	ldrb	r3, [r5, #28]
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 8029cdc:	2b00      	cmp	r3, #0
 8029cde:	d06e      	beq.n	8029dbe <mg_tcpip_poll+0x122>
 8029ce0:	2301      	movs	r3, #1
 8029ce2:	e000      	b.n	8029ce6 <mg_tcpip_poll+0x4a>
 8029ce4:	2300      	movs	r3, #0
 8029ce6:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
      if (!up && ifp->enable_dhcp_client) ifp->ip = 0;
 8029cea:	b918      	cbnz	r0, 8029cf4 <mg_tcpip_poll+0x58>
 8029cec:	7f2b      	ldrb	r3, [r5, #28]
 8029cee:	b10b      	cbz	r3, 8029cf4 <mg_tcpip_poll+0x58>
 8029cf0:	2300      	movs	r3, #0
 8029cf2:	60ab      	str	r3, [r5, #8]
      onstatechange(ifp);
 8029cf4:	4628      	mov	r0, r5
 8029cf6:	f7ff fc67 	bl	80295c8 <onstatechange>
    if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 8029cfa:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 8029cfe:	b91b      	cbnz	r3, 8029d08 <mg_tcpip_poll+0x6c>
 8029d00:	4ba8      	ldr	r3, [pc, #672]	@ (8029fa4 <mg_tcpip_poll+0x308>)
 8029d02:	681b      	ldr	r3, [r3, #0]
 8029d04:	2b00      	cmp	r3, #0
 8029d06:	dc5c      	bgt.n	8029dc2 <mg_tcpip_poll+0x126>
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 8029d08:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 8029d0c:	2b00      	cmp	r3, #0
 8029d0e:	f000 8146 	beq.w	8029f9e <mg_tcpip_poll+0x302>
  if (ifp->state == MG_TCPIP_STATE_UP && expired_1000ms) {
 8029d12:	2b01      	cmp	r3, #1
 8029d14:	d060      	beq.n	8029dd8 <mg_tcpip_poll+0x13c>
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 8029d16:	2c00      	cmp	r4, #0
 8029d18:	d05f      	beq.n	8029dda <mg_tcpip_poll+0x13e>
 8029d1a:	2b03      	cmp	r3, #3
 8029d1c:	d15d      	bne.n	8029dda <mg_tcpip_poll+0x13e>
             ifp->lease_expire > 0) {  // BOUND / RENEWING / REBINDING
 8029d1e:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
 8029d20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 8029d22:	ea52 0103 	orrs.w	r1, r2, r3
 8029d26:	d058      	beq.n	8029dda <mg_tcpip_poll+0x13e>
    if (ifp->now >= ifp->lease_expire) {
 8029d28:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8029d2a:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 8029d2c:	4290      	cmp	r0, r2
 8029d2e:	eb71 0403 	sbcs.w	r4, r1, r3
 8029d32:	d262      	bcs.n	8029dfa <mg_tcpip_poll+0x15e>
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 8029d34:	4c9c      	ldr	r4, [pc, #624]	@ (8029fa8 <mg_tcpip_poll+0x30c>)
 8029d36:	1904      	adds	r4, r0, r4
 8029d38:	f141 0c00 	adc.w	ip, r1, #0
 8029d3c:	42a2      	cmp	r2, r4
 8029d3e:	eb73 030c 	sbcs.w	r3, r3, ip
 8029d42:	d24a      	bcs.n	8029dda <mg_tcpip_poll+0x13e>
               ((ifp->now / 1000) % 60) == 0) {
 8029d44:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8029d48:	2300      	movs	r3, #0
 8029d4a:	f7e7 f805 	bl	8010d58 <__aeabi_uldivmod>
 8029d4e:	4602      	mov	r2, r0
 8029d50:	2000      	movs	r0, #0
 8029d52:	1853      	adds	r3, r2, r1
 8029d54:	d25a      	bcs.n	8029e0c <mg_tcpip_poll+0x170>
 8029d56:	4403      	add	r3, r0
 8029d58:	4894      	ldr	r0, [pc, #592]	@ (8029fac <mg_tcpip_poll+0x310>)
 8029d5a:	fba0 4003 	umull	r4, r0, r0, r3
 8029d5e:	08c0      	lsrs	r0, r0, #3
 8029d60:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8029d64:	1a1b      	subs	r3, r3, r0
 8029d66:	1ad3      	subs	r3, r2, r3
 8029d68:	f161 0c00 	sbc.w	ip, r1, #0
 8029d6c:	4c90      	ldr	r4, [pc, #576]	@ (8029fb0 <mg_tcpip_poll+0x314>)
 8029d6e:	f04f 30ee 	mov.w	r0, #4008636142	@ 0xeeeeeeee
 8029d72:	fb03 f000 	mul.w	r0, r3, r0
 8029d76:	fb04 000c 	mla	r0, r4, ip, r0
 8029d7a:	fba3 3404 	umull	r3, r4, r3, r4
 8029d7e:	4420      	add	r0, r4
 8029d80:	089b      	lsrs	r3, r3, #2
 8029d82:	ea43 7380 	orr.w	r3, r3, r0, lsl #30
 8029d86:	0880      	lsrs	r0, r0, #2
 8029d88:	0104      	lsls	r4, r0, #4
 8029d8a:	ea44 7413 	orr.w	r4, r4, r3, lsr #28
 8029d8e:	ea4f 1c03 	mov.w	ip, r3, lsl #4
 8029d92:	ebbc 0c03 	subs.w	ip, ip, r3
 8029d96:	eb64 0300 	sbc.w	r3, r4, r0
 8029d9a:	009b      	lsls	r3, r3, #2
 8029d9c:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8029da0:	ea4f 008c 	mov.w	r0, ip, lsl #2
 8029da4:	1a12      	subs	r2, r2, r0
 8029da6:	eb61 0103 	sbc.w	r1, r1, r3
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 8029daa:	430a      	orrs	r2, r1
 8029dac:	d115      	bne.n	8029dda <mg_tcpip_poll+0x13e>
      tx_dhcp_request_re(ifp, (uint8_t *) broadcast, ifp->ip, 0xffffffff);
 8029dae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8029db2:	68aa      	ldr	r2, [r5, #8]
 8029db4:	497f      	ldr	r1, [pc, #508]	@ (8029fb4 <mg_tcpip_poll+0x318>)
 8029db6:	4628      	mov	r0, r5
 8029db8:	f7fe fdfe 	bl	80289b8 <tx_dhcp_request_re>
 8029dbc:	e00d      	b.n	8029dda <mg_tcpip_poll+0x13e>
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 8029dbe:	2303      	movs	r3, #3
 8029dc0:	e791      	b.n	8029ce6 <mg_tcpip_poll+0x4a>
    if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 8029dc2:	4b7d      	ldr	r3, [pc, #500]	@ (8029fb8 <mg_tcpip_poll+0x31c>)
 8029dc4:	f241 62c5 	movw	r2, #5829	@ 0x16c5
 8029dc8:	497c      	ldr	r1, [pc, #496]	@ (8029fbc <mg_tcpip_poll+0x320>)
 8029dca:	2001      	movs	r0, #1
 8029dcc:	f7fc fd4c 	bl	8026868 <mg_log_prefix>
 8029dd0:	487b      	ldr	r0, [pc, #492]	@ (8029fc0 <mg_tcpip_poll+0x324>)
 8029dd2:	f7fa fbf7 	bl	80245c4 <mg_log>
 8029dd6:	e797      	b.n	8029d08 <mg_tcpip_poll+0x6c>
  if (ifp->state == MG_TCPIP_STATE_UP && expired_1000ms) {
 8029dd8:	b95c      	cbnz	r4, 8029df2 <mg_tcpip_poll+0x156>
  if (ifp->driver->rx != NULL) {  // Polling driver. We must call it
 8029dda:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8029ddc:	689b      	ldr	r3, [r3, #8]
 8029dde:	b1fb      	cbz	r3, 8029e20 <mg_tcpip_poll+0x184>
        ifp->driver->rx(ifp->recv_queue.buf, ifp->recv_queue.size, ifp);
 8029de0:	462a      	mov	r2, r5
 8029de2:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 8029de4:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8029de6:	4798      	blx	r3
    if (len > 0) {
 8029de8:	4602      	mov	r2, r0
 8029dea:	b988      	cbnz	r0, 8029e10 <mg_tcpip_poll+0x174>
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 8029dec:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8029dee:	681c      	ldr	r4, [r3, #0]
 8029df0:	e0a3      	b.n	8029f3a <mg_tcpip_poll+0x29e>
    tx_dhcp_discover(ifp);  // INIT (4.4.1)
 8029df2:	4628      	mov	r0, r5
 8029df4:	f7fe fdaa 	bl	802894c <tx_dhcp_discover>
 8029df8:	e7ef      	b.n	8029dda <mg_tcpip_poll+0x13e>
      ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;  // expired, release IP
 8029dfa:	2301      	movs	r3, #1
 8029dfc:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
 8029e00:	2300      	movs	r3, #0
 8029e02:	60ab      	str	r3, [r5, #8]
      onstatechange(ifp);
 8029e04:	4628      	mov	r0, r5
 8029e06:	f7ff fbdf 	bl	80295c8 <onstatechange>
 8029e0a:	e7e6      	b.n	8029dda <mg_tcpip_poll+0x13e>
               ((ifp->now / 1000) % 60) == 0) {
 8029e0c:	2001      	movs	r0, #1
 8029e0e:	e7a2      	b.n	8029d56 <mg_tcpip_poll+0xba>
      ifp->nrecv++;
 8029e10:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8029e12:	3301      	adds	r3, #1
 8029e14:	672b      	str	r3, [r5, #112]	@ 0x70
      mg_tcpip_rx(ifp, ifp->recv_queue.buf, len);
 8029e16:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8029e18:	4628      	mov	r0, r5
 8029e1a:	f7ff fe8f 	bl	8029b3c <mg_tcpip_rx>
 8029e1e:	e7e5      	b.n	8029dec <mg_tcpip_poll+0x150>
    size_t len = mg_queue_next(&ifp->recv_queue, &buf);
 8029e20:	f105 0434 	add.w	r4, r5, #52	@ 0x34
 8029e24:	a909      	add	r1, sp, #36	@ 0x24
 8029e26:	4620      	mov	r0, r4
 8029e28:	f7fa fcd7 	bl	80247da <mg_queue_next>
    if (len > 0) {
 8029e2c:	4680      	mov	r8, r0
 8029e2e:	2800      	cmp	r0, #0
 8029e30:	d0dc      	beq.n	8029dec <mg_tcpip_poll+0x150>
      mg_tcpip_rx(ifp, buf, len);
 8029e32:	4602      	mov	r2, r0
 8029e34:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029e36:	4628      	mov	r0, r5
 8029e38:	f7ff fe80 	bl	8029b3c <mg_tcpip_rx>
      mg_queue_del(&ifp->recv_queue, len);
 8029e3c:	4641      	mov	r1, r8
 8029e3e:	4620      	mov	r0, r4
 8029e40:	f7fa fce7 	bl	8024812 <mg_queue_del>
 8029e44:	e7d2      	b.n	8029dec <mg_tcpip_poll+0x150>
      if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 8029e46:	f8d4 10c0 	ldr.w	r1, [r4, #192]	@ 0xc0
 8029e4a:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 8029e4e:	4291      	cmp	r1, r2
 8029e50:	f000 8088 	beq.w	8029f64 <mg_tcpip_poll+0x2c8>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 8029e54:	4b53      	ldr	r3, [pc, #332]	@ (8029fa4 <mg_tcpip_poll+0x308>)
 8029e56:	681b      	ldr	r3, [r3, #0]
 8029e58:	2b03      	cmp	r3, #3
 8029e5a:	dc23      	bgt.n	8029ea4 <mg_tcpip_poll+0x208>
        tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8029e5c:	f104 09c8 	add.w	r9, r4, #200	@ 0xc8
 8029e60:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 8029e64:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
 8029e68:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8029e6c:	f7fc f922 	bl	80260b4 <mg_ntohl>
 8029e70:	9007      	str	r0, [sp, #28]
 8029e72:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8029e76:	f7fc f91d 	bl	80260b4 <mg_ntohl>
 8029e7a:	2300      	movs	r3, #0
 8029e7c:	9305      	str	r3, [sp, #20]
 8029e7e:	9304      	str	r3, [sp, #16]
 8029e80:	9003      	str	r0, [sp, #12]
 8029e82:	9b07      	ldr	r3, [sp, #28]
 8029e84:	9302      	str	r3, [sp, #8]
 8029e86:	f8cd b004 	str.w	fp, [sp, #4]
 8029e8a:	f8cd a000 	str.w	sl, [sp]
 8029e8e:	2310      	movs	r3, #16
 8029e90:	4642      	mov	r2, r8
 8029e92:	4649      	mov	r1, r9
 8029e94:	4628      	mov	r0, r5
 8029e96:	f7fe f9e3 	bl	8028260 <tx_tcp>
        s->acked = s->ack;
 8029e9a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8029e9e:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
 8029ea2:	e045      	b.n	8029f30 <mg_tcpip_poll+0x294>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 8029ea4:	4b44      	ldr	r3, [pc, #272]	@ (8029fb8 <mg_tcpip_poll+0x31c>)
 8029ea6:	f241 62f1 	movw	r2, #5873	@ 0x16f1
 8029eaa:	4944      	ldr	r1, [pc, #272]	@ (8029fbc <mg_tcpip_poll+0x320>)
 8029eac:	2004      	movs	r0, #4
 8029eae:	f7fc fcdb 	bl	8026868 <mg_log_prefix>
 8029eb2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8029eb6:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
 8029eba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8029ebc:	4841      	ldr	r0, [pc, #260]	@ (8029fc4 <mg_tcpip_poll+0x328>)
 8029ebe:	f7fa fb81 	bl	80245c4 <mg_log>
 8029ec2:	e7cb      	b.n	8029e5c <mg_tcpip_poll+0x1c0>
        mg_error(c, "ARP timeout");
 8029ec4:	4940      	ldr	r1, [pc, #256]	@ (8029fc8 <mg_tcpip_poll+0x32c>)
 8029ec6:	4620      	mov	r0, r4
 8029ec8:	f7fc fdb6 	bl	8026a38 <mg_error>
 8029ecc:	e030      	b.n	8029f30 <mg_tcpip_poll+0x294>
        mg_error(c, "Connection timeout");
 8029ece:	493f      	ldr	r1, [pc, #252]	@ (8029fcc <mg_tcpip_poll+0x330>)
 8029ed0:	4620      	mov	r0, r4
 8029ed2:	f7fc fdb1 	bl	8026a38 <mg_error>
 8029ed6:	e02b      	b.n	8029f30 <mg_tcpip_poll+0x294>
        c->is_closing = 1;
 8029ed8:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8029edc:	f043 0320 	orr.w	r3, r3, #32
 8029ee0:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
        continue;
 8029ee4:	e028      	b.n	8029f38 <mg_tcpip_poll+0x29c>
          mg_error(c, "keepalive");
 8029ee6:	493a      	ldr	r1, [pc, #232]	@ (8029fd0 <mg_tcpip_poll+0x334>)
 8029ee8:	4620      	mov	r0, r4
 8029eea:	f7fc fda5 	bl	8026a38 <mg_error>
 8029eee:	e01f      	b.n	8029f30 <mg_tcpip_poll+0x294>
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8029ef0:	f104 09c8 	add.w	r9, r4, #200	@ 0xc8
 8029ef4:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 8029ef8:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
                 mg_htonl(s->seq - 1), mg_htonl(s->ack), NULL, 0);
 8029efc:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8029f00:	3801      	subs	r0, #1
 8029f02:	f7fc f8d7 	bl	80260b4 <mg_ntohl>
 8029f06:	9007      	str	r0, [sp, #28]
 8029f08:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8029f0c:	f7fc f8d2 	bl	80260b4 <mg_ntohl>
 8029f10:	2300      	movs	r3, #0
 8029f12:	9305      	str	r3, [sp, #20]
 8029f14:	9304      	str	r3, [sp, #16]
 8029f16:	9003      	str	r0, [sp, #12]
 8029f18:	9b07      	ldr	r3, [sp, #28]
 8029f1a:	9302      	str	r3, [sp, #8]
 8029f1c:	f8cd b004 	str.w	fp, [sp, #4]
 8029f20:	f8cd a000 	str.w	sl, [sp]
 8029f24:	2310      	movs	r3, #16
 8029f26:	4642      	mov	r2, r8
 8029f28:	4649      	mov	r1, r9
 8029f2a:	4628      	mov	r0, r5
 8029f2c:	f7fe f998 	bl	8028260 <tx_tcp>
      settmout(c, MIP_TTYPE_KEEPALIVE);
 8029f30:	2100      	movs	r1, #0
 8029f32:	4620      	mov	r0, r4
 8029f34:	f7fe fa70 	bl	8028418 <settmout>
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 8029f38:	6824      	ldr	r4, [r4, #0]
 8029f3a:	b384      	cbz	r4, 8029f9e <mg_tcpip_poll+0x302>
    if (c->is_udp || c->is_listening || c->is_resolving) continue;
 8029f3c:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	@ 0xac
 8029f40:	f240 1209 	movw	r2, #265	@ 0x109
 8029f44:	421a      	tst	r2, r3
 8029f46:	d1f7      	bne.n	8029f38 <mg_tcpip_poll+0x29c>
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8029f48:	f8d4 801c 	ldr.w	r8, [r4, #28]
    if (now > s->timer) {
 8029f4c:	f8d4 20b8 	ldr.w	r2, [r4, #184]	@ 0xb8
 8029f50:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
 8029f54:	42b2      	cmp	r2, r6
 8029f56:	41bb      	sbcs	r3, r7
 8029f58:	d2ee      	bcs.n	8029f38 <mg_tcpip_poll+0x29c>
      if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 8029f5a:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 8029f5e:	2b01      	cmp	r3, #1
 8029f60:	f43f af71 	beq.w	8029e46 <mg_tcpip_poll+0x1aa>
      } else if (s->ttype == MIP_TTYPE_ARP) {
 8029f64:	2b02      	cmp	r3, #2
 8029f66:	d0ad      	beq.n	8029ec4 <mg_tcpip_poll+0x228>
      } else if (s->ttype == MIP_TTYPE_SYN) {
 8029f68:	2b03      	cmp	r3, #3
 8029f6a:	d0b0      	beq.n	8029ece <mg_tcpip_poll+0x232>
      } else if (s->ttype == MIP_TTYPE_FIN) {
 8029f6c:	2b04      	cmp	r3, #4
 8029f6e:	d0b3      	beq.n	8029ed8 <mg_tcpip_poll+0x23c>
        if (s->tmiss++ > 2) {
 8029f70:	f894 30cf 	ldrb.w	r3, [r4, #207]	@ 0xcf
 8029f74:	1c5a      	adds	r2, r3, #1
 8029f76:	f884 20cf 	strb.w	r2, [r4, #207]	@ 0xcf
 8029f7a:	2b02      	cmp	r3, #2
 8029f7c:	d8b3      	bhi.n	8029ee6 <mg_tcpip_poll+0x24a>
          MG_VERBOSE(("%lu keepalive", c->id));
 8029f7e:	4b09      	ldr	r3, [pc, #36]	@ (8029fa4 <mg_tcpip_poll+0x308>)
 8029f80:	681b      	ldr	r3, [r3, #0]
 8029f82:	2b03      	cmp	r3, #3
 8029f84:	ddb4      	ble.n	8029ef0 <mg_tcpip_poll+0x254>
 8029f86:	4b0c      	ldr	r3, [pc, #48]	@ (8029fb8 <mg_tcpip_poll+0x31c>)
 8029f88:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8029f8c:	490b      	ldr	r1, [pc, #44]	@ (8029fbc <mg_tcpip_poll+0x320>)
 8029f8e:	2004      	movs	r0, #4
 8029f90:	f7fc fc6a 	bl	8026868 <mg_log_prefix>
 8029f94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8029f96:	480f      	ldr	r0, [pc, #60]	@ (8029fd4 <mg_tcpip_poll+0x338>)
 8029f98:	f7fa fb14 	bl	80245c4 <mg_log>
 8029f9c:	e7a8      	b.n	8029ef0 <mg_tcpip_poll+0x254>
}
 8029f9e:	b00b      	add	sp, #44	@ 0x2c
 8029fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029fa4:	2000012c 	.word	0x2000012c
 8029fa8:	001b7740 	.word	0x001b7740
 8029fac:	88888889 	.word	0x88888889
 8029fb0:	eeeeeeef 	.word	0xeeeeeeef
 8029fb4:	0803bf08 	.word	0x0803bf08
 8029fb8:	0803bdf0 	.word	0x0803bdf0
 8029fbc:	0803b480 	.word	0x0803b480
 8029fc0:	0803bbe4 	.word	0x0803bbe4
 8029fc4:	0803bbf4 	.word	0x0803bbf4
 8029fc8:	0803bc04 	.word	0x0803bc04
 8029fcc:	0803bc10 	.word	0x0803bc10
 8029fd0:	0803bc28 	.word	0x0803bc28
 8029fd4:	0803bc24 	.word	0x0803bc24

08029fd8 <mg_mgr_poll>:
void mg_mgr_poll(struct mg_mgr *mgr, int ms) {
 8029fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029fda:	b087      	sub	sp, #28
 8029fdc:	4604      	mov	r4, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) mgr->priv;
 8029fde:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
  uint64_t now = mg_millis();
 8029fe0:	f7fc fc3c 	bl	802685c <mg_millis>
 8029fe4:	4602      	mov	r2, r0
 8029fe6:	460b      	mov	r3, r1
 8029fe8:	9004      	str	r0, [sp, #16]
 8029fea:	9105      	str	r1, [sp, #20]
  mg_timer_poll(&mgr->timers, now);
 8029fec:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8029ff0:	f7fb fefe 	bl	8025df0 <mg_timer_poll>
  if (ifp == NULL || ifp->driver == NULL) return;
 8029ff4:	2d00      	cmp	r5, #0
 8029ff6:	d078      	beq.n	802a0ea <mg_mgr_poll+0x112>
 8029ff8:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8029ffa:	2b00      	cmp	r3, #0
 8029ffc:	d075      	beq.n	802a0ea <mg_mgr_poll+0x112>
  mg_tcpip_poll(ifp, now);
 8029ffe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802a002:	4628      	mov	r0, r5
 802a004:	f7ff fe4a 	bl	8029c9c <mg_tcpip_poll>
  for (c = mgr->conns; c != NULL; c = tmp) {
 802a008:	6824      	ldr	r4, [r4, #0]
 802a00a:	e040      	b.n	802a08e <mg_mgr_poll+0xb6>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 802a00c:	4b38      	ldr	r3, [pc, #224]	@ (802a0f0 <mg_mgr_poll+0x118>)
 802a00e:	f241 72a4 	movw	r2, #6052	@ 0x17a4
 802a012:	4938      	ldr	r1, [pc, #224]	@ (802a0f4 <mg_mgr_poll+0x11c>)
 802a014:	2004      	movs	r0, #4
 802a016:	f7fc fc27 	bl	8026868 <mg_log_prefix>
 802a01a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802a01c:	f894 00ac 	ldrb.w	r0, [r4, #172]	@ 0xac
 802a020:	f010 0f40 	tst.w	r0, #64	@ 0x40
 802a024:	d019      	beq.n	802a05a <mg_mgr_poll+0x82>
 802a026:	2254      	movs	r2, #84	@ 0x54
 802a028:	f010 0f20 	tst.w	r0, #32
 802a02c:	d017      	beq.n	802a05e <mg_mgr_poll+0x86>
 802a02e:	2343      	movs	r3, #67	@ 0x43
 802a030:	f010 0f80 	tst.w	r0, #128	@ 0x80
 802a034:	d115      	bne.n	802a062 <mg_mgr_poll+0x8a>
 802a036:	2668      	movs	r6, #104	@ 0x68
 802a038:	f010 0f08 	tst.w	r0, #8
 802a03c:	d013      	beq.n	802a066 <mg_mgr_poll+0x8e>
 802a03e:	2752      	movs	r7, #82	@ 0x52
 802a040:	f894 00ad 	ldrb.w	r0, [r4, #173]	@ 0xad
 802a044:	f010 0f20 	tst.w	r0, #32
 802a048:	d00f      	beq.n	802a06a <mg_mgr_poll+0x92>
 802a04a:	2043      	movs	r0, #67	@ 0x43
 802a04c:	9002      	str	r0, [sp, #8]
 802a04e:	9701      	str	r7, [sp, #4]
 802a050:	9600      	str	r6, [sp, #0]
 802a052:	4829      	ldr	r0, [pc, #164]	@ (802a0f8 <mg_mgr_poll+0x120>)
 802a054:	f7fa fab6 	bl	80245c4 <mg_log>
 802a058:	e024      	b.n	802a0a4 <mg_mgr_poll+0xcc>
 802a05a:	2274      	movs	r2, #116	@ 0x74
 802a05c:	e7e4      	b.n	802a028 <mg_mgr_poll+0x50>
 802a05e:	2363      	movs	r3, #99	@ 0x63
 802a060:	e7e6      	b.n	802a030 <mg_mgr_poll+0x58>
 802a062:	2648      	movs	r6, #72	@ 0x48
 802a064:	e7e8      	b.n	802a038 <mg_mgr_poll+0x60>
 802a066:	2772      	movs	r7, #114	@ 0x72
 802a068:	e7ea      	b.n	802a040 <mg_mgr_poll+0x68>
 802a06a:	2063      	movs	r0, #99	@ 0x63
 802a06c:	e7ee      	b.n	802a04c <mg_mgr_poll+0x74>
      handle_tls_recv(c, (struct mg_iobuf *) &c->rtls);
 802a06e:	f104 0168 	add.w	r1, r4, #104	@ 0x68
 802a072:	4620      	mov	r0, r4
 802a074:	f7fc fd18 	bl	8026aa8 <handle_tls_recv>
 802a078:	e01e      	b.n	802a0b8 <mg_mgr_poll+0xe0>
    if (can_write(c)) write_conn(c);
 802a07a:	4620      	mov	r0, r4
 802a07c:	f7fe fa6a 	bl	8028554 <write_conn>
 802a080:	e01f      	b.n	802a0c2 <mg_mgr_poll+0xea>
    if (c->is_closing) close_conn(c);
 802a082:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802a086:	f013 0f20 	tst.w	r3, #32
 802a08a:	d12a      	bne.n	802a0e2 <mg_mgr_poll+0x10a>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 802a08c:	462c      	mov	r4, r5
  for (c = mgr->conns; c != NULL; c = tmp) {
 802a08e:	b364      	cbz	r4, 802a0ea <mg_mgr_poll+0x112>
    tmp = c->next;
 802a090:	6825      	ldr	r5, [r4, #0]
    mg_call(c, MG_EV_POLL, &now);
 802a092:	aa04      	add	r2, sp, #16
 802a094:	2102      	movs	r1, #2
 802a096:	4620      	mov	r0, r4
 802a098:	f7f9 f84b 	bl	8023132 <mg_call>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 802a09c:	4b17      	ldr	r3, [pc, #92]	@ (802a0fc <mg_mgr_poll+0x124>)
 802a09e:	681b      	ldr	r3, [r3, #0]
 802a0a0:	2b03      	cmp	r3, #3
 802a0a2:	dcb3      	bgt.n	802a00c <mg_mgr_poll+0x34>
    if (c->is_tls && mg_tls_pending(c) > 0)
 802a0a4:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 802a0a8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 802a0ac:	d004      	beq.n	802a0b8 <mg_mgr_poll+0xe0>
 802a0ae:	4620      	mov	r0, r4
 802a0b0:	f7fb fee8 	bl	8025e84 <mg_tls_pending>
 802a0b4:	2800      	cmp	r0, #0
 802a0b6:	d1da      	bne.n	802a06e <mg_mgr_poll+0x96>
    if (can_write(c)) write_conn(c);
 802a0b8:	4620      	mov	r0, r4
 802a0ba:	f7f7 fbfb 	bl	80218b4 <can_write>
 802a0be:	2800      	cmp	r0, #0
 802a0c0:	d1db      	bne.n	802a07a <mg_mgr_poll+0xa2>
    if (c->is_draining && c->send.len == 0 && s->ttype != MIP_TTYPE_FIN)
 802a0c2:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802a0c6:	f013 0f10 	tst.w	r3, #16
 802a0ca:	d0da      	beq.n	802a082 <mg_mgr_poll+0xaa>
 802a0cc:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802a0ce:	2b00      	cmp	r3, #0
 802a0d0:	d1d7      	bne.n	802a082 <mg_mgr_poll+0xaa>
 802a0d2:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 802a0d6:	2b04      	cmp	r3, #4
 802a0d8:	d0d3      	beq.n	802a082 <mg_mgr_poll+0xaa>
      init_closure(c);
 802a0da:	4620      	mov	r0, r4
 802a0dc:	f7fe fa66 	bl	80285ac <init_closure>
 802a0e0:	e7cf      	b.n	802a082 <mg_mgr_poll+0xaa>
    if (c->is_closing) close_conn(c);
 802a0e2:	4620      	mov	r0, r4
 802a0e4:	f7fd fb7e 	bl	80277e4 <close_conn>
 802a0e8:	e7d0      	b.n	802a08c <mg_mgr_poll+0xb4>
}
 802a0ea:	b007      	add	sp, #28
 802a0ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a0ee:	bf00      	nop
 802a0f0:	0803be00 	.word	0x0803be00
 802a0f4:	0803b480 	.word	0x0803b480
 802a0f8:	0803bc34 	.word	0x0803bc34
 802a0fc:	2000012c 	.word	0x2000012c

0802a100 <mg_now>:
uint64_t mg_now(void) {
 802a100:	b508      	push	{r3, lr}
  return mg_millis() + s_boot_timestamp;
 802a102:	f7fc fbab 	bl	802685c <mg_millis>
 802a106:	4a03      	ldr	r2, [pc, #12]	@ (802a114 <mg_now+0x14>)
 802a108:	6813      	ldr	r3, [r2, #0]
 802a10a:	6852      	ldr	r2, [r2, #4]
 802a10c:	18c0      	adds	r0, r0, r3
}
 802a10e:	eb42 0101 	adc.w	r1, r2, r1
 802a112:	bd08      	pop	{r3, pc}
 802a114:	20019f68 	.word	0x20019f68

0802a118 <mg_sntp_parse>:
int64_t mg_sntp_parse(const unsigned char *buf, size_t len) {
 802a118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a11c:	4604      	mov	r4, r0
  int mode = len > 0 ? buf[0] & 7 : 0;
 802a11e:	460a      	mov	r2, r1
 802a120:	b129      	cbz	r1, 802a12e <mg_sntp_parse+0x16>
 802a122:	7801      	ldrb	r1, [r0, #0]
 802a124:	f001 0307 	and.w	r3, r1, #7
  int version = len > 0 ? (buf[0] >> 3) & 7 : 0;
 802a128:	f3c1 05c2 	ubfx	r5, r1, #3, #3
 802a12c:	e001      	b.n	802a132 <mg_sntp_parse+0x1a>
  int mode = len > 0 ? buf[0] & 7 : 0;
 802a12e:	2300      	movs	r3, #0
  int version = len > 0 ? (buf[0] >> 3) & 7 : 0;
 802a130:	461d      	mov	r5, r3
  if (len < 48) {
 802a132:	2a2f      	cmp	r2, #47	@ 0x2f
 802a134:	d817      	bhi.n	802a166 <mg_sntp_parse+0x4e>
    MG_ERROR(("%s", "corrupt packet"));
 802a136:	4b4b      	ldr	r3, [pc, #300]	@ (802a264 <mg_sntp_parse+0x14c>)
 802a138:	681b      	ldr	r3, [r3, #0]
 802a13a:	2b00      	cmp	r3, #0
 802a13c:	dc04      	bgt.n	802a148 <mg_sntp_parse+0x30>
  int64_t epoch_milliseconds = -1;
 802a13e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802a142:	4601      	mov	r1, r0
}
 802a144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    MG_ERROR(("%s", "corrupt packet"));
 802a148:	4b47      	ldr	r3, [pc, #284]	@ (802a268 <mg_sntp_parse+0x150>)
 802a14a:	f641 420e 	movw	r2, #7182	@ 0x1c0e
 802a14e:	4947      	ldr	r1, [pc, #284]	@ (802a26c <mg_sntp_parse+0x154>)
 802a150:	2001      	movs	r0, #1
 802a152:	f7fc fb89 	bl	8026868 <mg_log_prefix>
 802a156:	4946      	ldr	r1, [pc, #280]	@ (802a270 <mg_sntp_parse+0x158>)
 802a158:	4846      	ldr	r0, [pc, #280]	@ (802a274 <mg_sntp_parse+0x15c>)
 802a15a:	f7fa fa33 	bl	80245c4 <mg_log>
  int64_t epoch_milliseconds = -1;
 802a15e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802a162:	4601      	mov	r1, r0
 802a164:	e7ee      	b.n	802a144 <mg_sntp_parse+0x2c>
  } else if (mode != 4 && mode != 5) {
 802a166:	3b04      	subs	r3, #4
 802a168:	2b01      	cmp	r3, #1
 802a16a:	d916      	bls.n	802a19a <mg_sntp_parse+0x82>
    MG_ERROR(("%s", "not a server reply"));
 802a16c:	4b3d      	ldr	r3, [pc, #244]	@ (802a264 <mg_sntp_parse+0x14c>)
 802a16e:	681b      	ldr	r3, [r3, #0]
 802a170:	2b00      	cmp	r3, #0
 802a172:	dc03      	bgt.n	802a17c <mg_sntp_parse+0x64>
  int64_t epoch_milliseconds = -1;
 802a174:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802a178:	4601      	mov	r1, r0
 802a17a:	e7e3      	b.n	802a144 <mg_sntp_parse+0x2c>
    MG_ERROR(("%s", "not a server reply"));
 802a17c:	4b3a      	ldr	r3, [pc, #232]	@ (802a268 <mg_sntp_parse+0x150>)
 802a17e:	f641 4210 	movw	r2, #7184	@ 0x1c10
 802a182:	493a      	ldr	r1, [pc, #232]	@ (802a26c <mg_sntp_parse+0x154>)
 802a184:	2001      	movs	r0, #1
 802a186:	f7fc fb6f 	bl	8026868 <mg_log_prefix>
 802a18a:	493b      	ldr	r1, [pc, #236]	@ (802a278 <mg_sntp_parse+0x160>)
 802a18c:	4839      	ldr	r0, [pc, #228]	@ (802a274 <mg_sntp_parse+0x15c>)
 802a18e:	f7fa fa19 	bl	80245c4 <mg_log>
  int64_t epoch_milliseconds = -1;
 802a192:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802a196:	4601      	mov	r1, r0
 802a198:	e7d4      	b.n	802a144 <mg_sntp_parse+0x2c>
  } else if (buf[1] == 0) {
 802a19a:	7863      	ldrb	r3, [r4, #1]
 802a19c:	b9b3      	cbnz	r3, 802a1cc <mg_sntp_parse+0xb4>
    MG_ERROR(("%s", "server sent a kiss of death"));
 802a19e:	4b31      	ldr	r3, [pc, #196]	@ (802a264 <mg_sntp_parse+0x14c>)
 802a1a0:	681b      	ldr	r3, [r3, #0]
 802a1a2:	2b00      	cmp	r3, #0
 802a1a4:	dc03      	bgt.n	802a1ae <mg_sntp_parse+0x96>
  int64_t epoch_milliseconds = -1;
 802a1a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802a1aa:	4601      	mov	r1, r0
 802a1ac:	e7ca      	b.n	802a144 <mg_sntp_parse+0x2c>
    MG_ERROR(("%s", "server sent a kiss of death"));
 802a1ae:	4b2e      	ldr	r3, [pc, #184]	@ (802a268 <mg_sntp_parse+0x150>)
 802a1b0:	f641 4212 	movw	r2, #7186	@ 0x1c12
 802a1b4:	492d      	ldr	r1, [pc, #180]	@ (802a26c <mg_sntp_parse+0x154>)
 802a1b6:	2001      	movs	r0, #1
 802a1b8:	f7fc fb56 	bl	8026868 <mg_log_prefix>
 802a1bc:	492f      	ldr	r1, [pc, #188]	@ (802a27c <mg_sntp_parse+0x164>)
 802a1be:	482d      	ldr	r0, [pc, #180]	@ (802a274 <mg_sntp_parse+0x15c>)
 802a1c0:	f7fa fa00 	bl	80245c4 <mg_log>
  int64_t epoch_milliseconds = -1;
 802a1c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802a1c8:	4601      	mov	r1, r0
 802a1ca:	e7bb      	b.n	802a144 <mg_sntp_parse+0x2c>
  } else if (version == 4 || version == 3) {
 802a1cc:	1eeb      	subs	r3, r5, #3
 802a1ce:	2b01      	cmp	r3, #1
 802a1d0:	d907      	bls.n	802a1e2 <mg_sntp_parse+0xca>
    MG_ERROR(("unexpected version: %d", version));
 802a1d2:	4b24      	ldr	r3, [pc, #144]	@ (802a264 <mg_sntp_parse+0x14c>)
 802a1d4:	681b      	ldr	r3, [r3, #0]
 802a1d6:	2b00      	cmp	r3, #0
 802a1d8:	dc35      	bgt.n	802a246 <mg_sntp_parse+0x12e>
  int64_t epoch_milliseconds = -1;
 802a1da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802a1de:	4601      	mov	r1, r0
  return epoch_milliseconds;
 802a1e0:	e7b0      	b.n	802a144 <mg_sntp_parse+0x2c>
    int64_t origin_time = gettimestamp((uint32_t *) &buf[24]);
 802a1e2:	f104 0018 	add.w	r0, r4, #24
 802a1e6:	f7fb ffc3 	bl	8026170 <gettimestamp>
 802a1ea:	4606      	mov	r6, r0
 802a1ec:	468a      	mov	sl, r1
    int64_t receive_time = gettimestamp((uint32_t *) &buf[32]);
 802a1ee:	f104 0020 	add.w	r0, r4, #32
 802a1f2:	f7fb ffbd 	bl	8026170 <gettimestamp>
 802a1f6:	4680      	mov	r8, r0
 802a1f8:	4689      	mov	r9, r1
    int64_t transmit_time = gettimestamp((uint32_t *) &buf[40]);
 802a1fa:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 802a1fe:	f7fb ffb7 	bl	8026170 <gettimestamp>
 802a202:	4607      	mov	r7, r0
 802a204:	460c      	mov	r4, r1
    int64_t now = (int64_t) mg_millis();
 802a206:	f7fc fb29 	bl	802685c <mg_millis>
 802a20a:	4605      	mov	r5, r0
 802a20c:	468c      	mov	ip, r1
    int64_t latency = (now - origin_time) - (transmit_time - receive_time);
 802a20e:	1b86      	subs	r6, r0, r6
 802a210:	eb61 020a 	sbc.w	r2, r1, sl
 802a214:	ebb7 0808 	subs.w	r8, r7, r8
 802a218:	eb64 0909 	sbc.w	r9, r4, r9
 802a21c:	ebb6 0608 	subs.w	r6, r6, r8
 802a220:	eb62 0209 	sbc.w	r2, r2, r9
    epoch_milliseconds = transmit_time + latency / 2;
 802a224:	0fd3      	lsrs	r3, r2, #31
 802a226:	199b      	adds	r3, r3, r6
 802a228:	f142 0200 	adc.w	r2, r2, #0
 802a22c:	085b      	lsrs	r3, r3, #1
 802a22e:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 802a232:	19d8      	adds	r0, r3, r7
 802a234:	eb44 0162 	adc.w	r1, r4, r2, asr #1
    s_boot_timestamp = (uint64_t) (epoch_milliseconds - now);
 802a238:	1b45      	subs	r5, r0, r5
 802a23a:	eb61 030c 	sbc.w	r3, r1, ip
 802a23e:	4a10      	ldr	r2, [pc, #64]	@ (802a280 <mg_sntp_parse+0x168>)
 802a240:	6015      	str	r5, [r2, #0]
 802a242:	6053      	str	r3, [r2, #4]
 802a244:	e77e      	b.n	802a144 <mg_sntp_parse+0x2c>
    MG_ERROR(("unexpected version: %d", version));
 802a246:	4b08      	ldr	r3, [pc, #32]	@ (802a268 <mg_sntp_parse+0x150>)
 802a248:	f641 421d 	movw	r2, #7197	@ 0x1c1d
 802a24c:	4907      	ldr	r1, [pc, #28]	@ (802a26c <mg_sntp_parse+0x154>)
 802a24e:	2001      	movs	r0, #1
 802a250:	f7fc fb0a 	bl	8026868 <mg_log_prefix>
 802a254:	4629      	mov	r1, r5
 802a256:	480b      	ldr	r0, [pc, #44]	@ (802a284 <mg_sntp_parse+0x16c>)
 802a258:	f7fa f9b4 	bl	80245c4 <mg_log>
  int64_t epoch_milliseconds = -1;
 802a25c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802a260:	4601      	mov	r1, r0
 802a262:	e76f      	b.n	802a144 <mg_sntp_parse+0x2c>
 802a264:	2000012c 	.word	0x2000012c
 802a268:	0803bd50 	.word	0x0803bd50
 802a26c:	0803b480 	.word	0x0803b480
 802a270:	0803bc48 	.word	0x0803bc48
 802a274:	0803b798 	.word	0x0803b798
 802a278:	0803bc58 	.word	0x0803bc58
 802a27c:	0803bc6c 	.word	0x0803bc6c
 802a280:	20019f68 	.word	0x20019f68
 802a284:	0803bc88 	.word	0x0803bc88

0802a288 <mg_sntp_request>:
void mg_sntp_request(struct mg_connection *c) {
 802a288:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 802a28c:	b08c      	sub	sp, #48	@ 0x30
 802a28e:	4604      	mov	r4, r0
  if (c->is_resolving) {
 802a290:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 802a294:	f013 0f08 	tst.w	r3, #8
 802a298:	d012      	beq.n	802a2c0 <mg_sntp_request+0x38>
    MG_ERROR(("%lu wait until resolved", c->id));
 802a29a:	4b2b      	ldr	r3, [pc, #172]	@ (802a348 <mg_sntp_request+0xc0>)
 802a29c:	681b      	ldr	r3, [r3, #0]
 802a29e:	2b00      	cmp	r3, #0
 802a2a0:	dc02      	bgt.n	802a2a8 <mg_sntp_request+0x20>
}
 802a2a2:	b00c      	add	sp, #48	@ 0x30
 802a2a4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    MG_ERROR(("%lu wait until resolved", c->id));
 802a2a8:	4b28      	ldr	r3, [pc, #160]	@ (802a34c <mg_sntp_request+0xc4>)
 802a2aa:	f641 423a 	movw	r2, #7226	@ 0x1c3a
 802a2ae:	4928      	ldr	r1, [pc, #160]	@ (802a350 <mg_sntp_request+0xc8>)
 802a2b0:	2001      	movs	r0, #1
 802a2b2:	f7fc fad9 	bl	8026868 <mg_log_prefix>
 802a2b6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802a2b8:	4826      	ldr	r0, [pc, #152]	@ (802a354 <mg_sntp_request+0xcc>)
 802a2ba:	f7fa f983 	bl	80245c4 <mg_log>
 802a2be:	e7f0      	b.n	802a2a2 <mg_sntp_request+0x1a>
    int64_t now = (int64_t) mg_millis();  // Use int64_t, for vc98
 802a2c0:	f7fc facc 	bl	802685c <mg_millis>
 802a2c4:	4606      	mov	r6, r0
 802a2c6:	460d      	mov	r5, r1
    uint8_t buf[48] = {0};
 802a2c8:	2100      	movs	r1, #0
 802a2ca:	9100      	str	r1, [sp, #0]
 802a2cc:	222c      	movs	r2, #44	@ 0x2c
 802a2ce:	a801      	add	r0, sp, #4
 802a2d0:	f002 fec6 	bl	802d060 <memset>
    double frac = ((double) (now % 1000)) / 1000.0 * SNTP_MAX_FRAC;
 802a2d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 802a2d8:	2300      	movs	r3, #0
 802a2da:	4630      	mov	r0, r6
 802a2dc:	4629      	mov	r1, r5
 802a2de:	f7e6 fceb 	bl	8010cb8 <__aeabi_ldivmod>
 802a2e2:	4610      	mov	r0, r2
 802a2e4:	4619      	mov	r1, r3
 802a2e6:	f7e6 f971 	bl	80105cc <__aeabi_l2d>
 802a2ea:	2200      	movs	r2, #0
 802a2ec:	4b1a      	ldr	r3, [pc, #104]	@ (802a358 <mg_sntp_request+0xd0>)
 802a2ee:	f7e6 fac5 	bl	801087c <__aeabi_ddiv>
 802a2f2:	a313      	add	r3, pc, #76	@ (adr r3, 802a340 <mg_sntp_request+0xb8>)
 802a2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802a2f8:	f7e6 f996 	bl	8010628 <__aeabi_dmul>
 802a2fc:	4680      	mov	r8, r0
 802a2fe:	4689      	mov	r9, r1
    buf[0] = (0 << 6) | (4 << 3) | 3;
 802a300:	2323      	movs	r3, #35	@ 0x23
 802a302:	f88d 3000 	strb.w	r3, [sp]
    t[0] = mg_htonl((uint32_t) (now / 1000) + SNTP_TIME_OFFSET);
 802a306:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 802a30a:	2300      	movs	r3, #0
 802a30c:	4630      	mov	r0, r6
 802a30e:	4629      	mov	r1, r5
 802a310:	f7e6 fcd2 	bl	8010cb8 <__aeabi_ldivmod>
 802a314:	f100 4003 	add.w	r0, r0, #2197815296	@ 0x83000000
 802a318:	f500 002a 	add.w	r0, r0, #11141120	@ 0xaa0000
 802a31c:	f500 40fd 	add.w	r0, r0, #32384	@ 0x7e80
 802a320:	f7fb fec8 	bl	80260b4 <mg_ntohl>
 802a324:	900a      	str	r0, [sp, #40]	@ 0x28
    t[1] = mg_htonl((uint32_t) frac);
 802a326:	4640      	mov	r0, r8
 802a328:	4649      	mov	r1, r9
 802a32a:	f7e6 fc55 	bl	8010bd8 <__aeabi_d2uiz>
 802a32e:	f7fb fec1 	bl	80260b4 <mg_ntohl>
 802a332:	900b      	str	r0, [sp, #44]	@ 0x2c
    mg_send(c, buf, sizeof(buf));
 802a334:	2230      	movs	r2, #48	@ 0x30
 802a336:	4669      	mov	r1, sp
 802a338:	4620      	mov	r0, r4
 802a33a:	f7fd fb49 	bl	80279d0 <mg_send>
}
 802a33e:	e7b0      	b.n	802a2a2 <mg_sntp_request+0x1a>
 802a340:	ffe00000 	.word	0xffe00000
 802a344:	41efffff 	.word	0x41efffff
 802a348:	2000012c 	.word	0x2000012c
 802a34c:	0803bd40 	.word	0x0803bd40
 802a350:	0803b480 	.word	0x0803b480
 802a354:	0803bca0 	.word	0x0803bca0
 802a358:	408f4000 	.word	0x408f4000

0802a35c <sntp_cb>:
static void sntp_cb(struct mg_connection *c, int ev, void *ev_data) {
 802a35c:	b570      	push	{r4, r5, r6, lr}
 802a35e:	b082      	sub	sp, #8
 802a360:	4604      	mov	r4, r0
  if (ev == MG_EV_OPEN) {
 802a362:	3901      	subs	r1, #1
 802a364:	2906      	cmp	r1, #6
 802a366:	d810      	bhi.n	802a38a <sntp_cb+0x2e>
 802a368:	e8df f001 	tbb	[pc, r1]
 802a36c:	110f4604 	.word	0x110f4604
 802a370:	0f0f      	.short	0x0f0f
 802a372:	14          	.byte	0x14
 802a373:	00          	.byte	0x00
    *expiration_time = mg_millis() + 3000;  // Store expiration time in 3s
 802a374:	f7fc fa72 	bl	802685c <mg_millis>
 802a378:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 802a37c:	18c0      	adds	r0, r0, r3
 802a37e:	f141 0100 	adc.w	r1, r1, #0
 802a382:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 802a386:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
}
 802a38a:	b002      	add	sp, #8
 802a38c:	bd70      	pop	{r4, r5, r6, pc}
    mg_sntp_request(c);
 802a38e:	f7ff ff7b 	bl	802a288 <mg_sntp_request>
 802a392:	e7fa      	b.n	802a38a <sntp_cb+0x2e>
    int64_t milliseconds = mg_sntp_parse(c->recv.buf, c->recv.len);
 802a394:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 802a396:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 802a398:	f7ff febe 	bl	802a118 <mg_sntp_parse>
 802a39c:	4605      	mov	r5, r0
 802a39e:	460e      	mov	r6, r1
 802a3a0:	9000      	str	r0, [sp, #0]
 802a3a2:	9101      	str	r1, [sp, #4]
    if (milliseconds > 0) {
 802a3a4:	2801      	cmp	r0, #1
 802a3a6:	f171 0300 	sbcs.w	r3, r1, #0
 802a3aa:	da06      	bge.n	802a3ba <sntp_cb+0x5e>
    c->is_closing = 1;
 802a3ac:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802a3b0:	f043 0320 	orr.w	r3, r3, #32
 802a3b4:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
 802a3b8:	e7e7      	b.n	802a38a <sntp_cb+0x2e>
      s_boot_timestamp = (uint64_t) milliseconds - mg_millis();
 802a3ba:	f7fc fa4f 	bl	802685c <mg_millis>
 802a3be:	1a2d      	subs	r5, r5, r0
 802a3c0:	eb66 0601 	sbc.w	r6, r6, r1
 802a3c4:	4b14      	ldr	r3, [pc, #80]	@ (802a418 <sntp_cb+0xbc>)
 802a3c6:	601d      	str	r5, [r3, #0]
 802a3c8:	605e      	str	r6, [r3, #4]
      mg_call(c, MG_EV_SNTP_TIME, (uint64_t *) &milliseconds);
 802a3ca:	466a      	mov	r2, sp
 802a3cc:	2112      	movs	r1, #18
 802a3ce:	4620      	mov	r0, r4
 802a3d0:	f7f8 feaf 	bl	8023132 <mg_call>
      MG_DEBUG(("%lu got time: %lld ms from epoch", c->id, milliseconds));
 802a3d4:	4b11      	ldr	r3, [pc, #68]	@ (802a41c <sntp_cb+0xc0>)
 802a3d6:	681b      	ldr	r3, [r3, #0]
 802a3d8:	2b02      	cmp	r3, #2
 802a3da:	dde7      	ble.n	802a3ac <sntp_cb+0x50>
 802a3dc:	4b10      	ldr	r3, [pc, #64]	@ (802a420 <sntp_cb+0xc4>)
 802a3de:	f641 422d 	movw	r2, #7213	@ 0x1c2d
 802a3e2:	4910      	ldr	r1, [pc, #64]	@ (802a424 <sntp_cb+0xc8>)
 802a3e4:	2003      	movs	r0, #3
 802a3e6:	f7fc fa3f 	bl	8026868 <mg_log_prefix>
 802a3ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 802a3ee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802a3f0:	480d      	ldr	r0, [pc, #52]	@ (802a428 <sntp_cb+0xcc>)
 802a3f2:	f7fa f8e7 	bl	80245c4 <mg_log>
 802a3f6:	e7d9      	b.n	802a3ac <sntp_cb+0x50>
    if (mg_millis() > *expiration_time) c->is_closing = 1;
 802a3f8:	f7fc fa30 	bl	802685c <mg_millis>
 802a3fc:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
 802a400:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 802a404:	4282      	cmp	r2, r0
 802a406:	418b      	sbcs	r3, r1
 802a408:	d2bf      	bcs.n	802a38a <sntp_cb+0x2e>
 802a40a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802a40e:	f043 0320 	orr.w	r3, r3, #32
 802a412:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 802a416:	e7b8      	b.n	802a38a <sntp_cb+0x2e>
 802a418:	20019f68 	.word	0x20019f68
 802a41c:	2000012c 	.word	0x2000012c
 802a420:	0803bd38 	.word	0x0803bd38
 802a424:	0803b480 	.word	0x0803b480
 802a428:	0803bcb8 	.word	0x0803bcb8

0802a42c <mg_sntp_connect>:
                                      mg_event_handler_t fn, void *fnd) {
 802a42c:	b538      	push	{r3, r4, r5, lr}
  if (url == NULL) url = "udp://time.google.com:123";
 802a42e:	460d      	mov	r5, r1
 802a430:	b169      	cbz	r1, 802a44e <mg_sntp_connect+0x22>
  if ((c = mg_connect(mgr, url, fn, fnd)) != NULL) {
 802a432:	4629      	mov	r1, r5
 802a434:	f7fe ffa0 	bl	8029378 <mg_connect>
 802a438:	4604      	mov	r4, r0
 802a43a:	b130      	cbz	r0, 802a44a <mg_sntp_connect+0x1e>
    c->pfn = sntp_cb;
 802a43c:	4b05      	ldr	r3, [pc, #20]	@ (802a454 <mg_sntp_connect+0x28>)
 802a43e:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
    sntp_cb(c, MG_EV_OPEN, (void *) url);
 802a442:	462a      	mov	r2, r5
 802a444:	2101      	movs	r1, #1
 802a446:	f7ff ff89 	bl	802a35c <sntp_cb>
}
 802a44a:	4620      	mov	r0, r4
 802a44c:	bd38      	pop	{r3, r4, r5, pc}
  if (url == NULL) url = "udp://time.google.com:123";
 802a44e:	4d02      	ldr	r5, [pc, #8]	@ (802a458 <mg_sntp_connect+0x2c>)
 802a450:	e7ef      	b.n	802a432 <mg_sntp_connect+0x6>
 802a452:	bf00      	nop
 802a454:	0802a35d 	.word	0x0802a35d
 802a458:	0803bcdc 	.word	0x0803bcdc

0802a45c <has_mqtt_prefix>:
 802a45c:	b508      	push	{r3, lr}
 802a45e:	2207      	movs	r2, #7
 802a460:	4903      	ldr	r1, [pc, #12]	@ (802a470 <has_mqtt_prefix+0x14>)
 802a462:	f002 fe32 	bl	802d0ca <strncmp>
 802a466:	fab0 f080 	clz	r0, r0
 802a46a:	0940      	lsrs	r0, r0, #5
 802a46c:	bd08      	pop	{r3, pc}
 802a46e:	bf00      	nop
 802a470:	0803c358 	.word	0x0803c358

0802a474 <is_valid_ip_or_domain>:
 802a474:	b570      	push	{r4, r5, r6, lr}
 802a476:	4604      	mov	r4, r0
 802a478:	2200      	movs	r2, #0
 802a47a:	4610      	mov	r0, r2
 802a47c:	e001      	b.n	802a482 <is_valid_ip_or_domain+0xe>
 802a47e:	3001      	adds	r0, #1
 802a480:	3201      	adds	r2, #1
 802a482:	5ca3      	ldrb	r3, [r4, r2]
 802a484:	b143      	cbz	r3, 802a498 <is_valid_ip_or_domain+0x24>
 802a486:	2b2e      	cmp	r3, #46	@ 0x2e
 802a488:	d0f9      	beq.n	802a47e <is_valid_ip_or_domain+0xa>
 802a48a:	491d      	ldr	r1, [pc, #116]	@ (802a500 <is_valid_ip_or_domain+0x8c>)
 802a48c:	5ccb      	ldrb	r3, [r1, r3]
 802a48e:	f013 0f04 	tst.w	r3, #4
 802a492:	d1f5      	bne.n	802a480 <is_valid_ip_or_domain+0xc>
 802a494:	2500      	movs	r5, #0
 802a496:	e000      	b.n	802a49a <is_valid_ip_or_domain+0x26>
 802a498:	2501      	movs	r5, #1
 802a49a:	b335      	cbz	r5, 802a4ea <is_valid_ip_or_domain+0x76>
 802a49c:	2803      	cmp	r0, #3
 802a49e:	d013      	beq.n	802a4c8 <is_valid_ip_or_domain+0x54>
 802a4a0:	2200      	movs	r2, #0
 802a4a2:	4615      	mov	r5, r2
 802a4a4:	e014      	b.n	802a4d0 <is_valid_ip_or_domain+0x5c>
 802a4a6:	3601      	adds	r6, #1
 802a4a8:	2e03      	cmp	r6, #3
 802a4aa:	dc24      	bgt.n	802a4f6 <is_valid_ip_or_domain+0x82>
 802a4ac:	4620      	mov	r0, r4
 802a4ae:	f000 f8a3 	bl	802a5f8 <atoi>
 802a4b2:	28ff      	cmp	r0, #255	@ 0xff
 802a4b4:	d821      	bhi.n	802a4fa <is_valid_ip_or_domain+0x86>
 802a4b6:	212e      	movs	r1, #46	@ 0x2e
 802a4b8:	4620      	mov	r0, r4
 802a4ba:	f002 fde8 	bl	802d08e <strchr>
 802a4be:	4604      	mov	r4, r0
 802a4c0:	2800      	cmp	r0, #0
 802a4c2:	d0f0      	beq.n	802a4a6 <is_valid_ip_or_domain+0x32>
 802a4c4:	3401      	adds	r4, #1
 802a4c6:	e7ee      	b.n	802a4a6 <is_valid_ip_or_domain+0x32>
 802a4c8:	2600      	movs	r6, #0
 802a4ca:	e7ed      	b.n	802a4a8 <is_valid_ip_or_domain+0x34>
 802a4cc:	3501      	adds	r5, #1
 802a4ce:	3201      	adds	r2, #1
 802a4d0:	5ca3      	ldrb	r3, [r4, r2]
 802a4d2:	b163      	cbz	r3, 802a4ee <is_valid_ip_or_domain+0x7a>
 802a4d4:	2b2e      	cmp	r3, #46	@ 0x2e
 802a4d6:	d0f9      	beq.n	802a4cc <is_valid_ip_or_domain+0x58>
 802a4d8:	4909      	ldr	r1, [pc, #36]	@ (802a500 <is_valid_ip_or_domain+0x8c>)
 802a4da:	5cc9      	ldrb	r1, [r1, r3]
 802a4dc:	f011 0f07 	tst.w	r1, #7
 802a4e0:	d1f5      	bne.n	802a4ce <is_valid_ip_or_domain+0x5a>
 802a4e2:	2b2d      	cmp	r3, #45	@ 0x2d
 802a4e4:	d0f3      	beq.n	802a4ce <is_valid_ip_or_domain+0x5a>
 802a4e6:	2500      	movs	r5, #0
 802a4e8:	e005      	b.n	802a4f6 <is_valid_ip_or_domain+0x82>
 802a4ea:	462a      	mov	r2, r5
 802a4ec:	e7f0      	b.n	802a4d0 <is_valid_ip_or_domain+0x5c>
 802a4ee:	2d00      	cmp	r5, #0
 802a4f0:	bfd4      	ite	le
 802a4f2:	2500      	movle	r5, #0
 802a4f4:	2501      	movgt	r5, #1
 802a4f6:	4628      	mov	r0, r5
 802a4f8:	bd70      	pop	{r4, r5, r6, pc}
 802a4fa:	2500      	movs	r5, #0
 802a4fc:	e7fb      	b.n	802a4f6 <is_valid_ip_or_domain+0x82>
 802a4fe:	bf00      	nop
 802a500:	0803c7f9 	.word	0x0803c7f9

0802a504 <is_valid_port>:
 802a504:	b510      	push	{r4, lr}
 802a506:	4604      	mov	r4, r0
 802a508:	f000 f876 	bl	802a5f8 <atoi>
 802a50c:	3801      	subs	r0, #1
 802a50e:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 802a512:	4298      	cmp	r0, r3
 802a514:	d80a      	bhi.n	802a52c <is_valid_port+0x28>
 802a516:	7823      	ldrb	r3, [r4, #0]
 802a518:	b133      	cbz	r3, 802a528 <is_valid_port+0x24>
 802a51a:	4a06      	ldr	r2, [pc, #24]	@ (802a534 <is_valid_port+0x30>)
 802a51c:	5cd3      	ldrb	r3, [r2, r3]
 802a51e:	f013 0f04 	tst.w	r3, #4
 802a522:	d005      	beq.n	802a530 <is_valid_port+0x2c>
 802a524:	3401      	adds	r4, #1
 802a526:	e7f6      	b.n	802a516 <is_valid_port+0x12>
 802a528:	2001      	movs	r0, #1
 802a52a:	e000      	b.n	802a52e <is_valid_port+0x2a>
 802a52c:	2000      	movs	r0, #0
 802a52e:	bd10      	pop	{r4, pc}
 802a530:	2000      	movs	r0, #0
 802a532:	e7fc      	b.n	802a52e <is_valid_port+0x2a>
 802a534:	0803c7f9 	.word	0x0803c7f9

0802a538 <is_valid_mqtt_url>:
 802a538:	b570      	push	{r4, r5, r6, lr}
 802a53a:	b0c0      	sub	sp, #256	@ 0x100
 802a53c:	4604      	mov	r4, r0
 802a53e:	f7ff ff8d 	bl	802a45c <has_mqtt_prefix>
 802a542:	b1d0      	cbz	r0, 802a57a <is_valid_mqtt_url+0x42>
 802a544:	3407      	adds	r4, #7
 802a546:	213a      	movs	r1, #58	@ 0x3a
 802a548:	4620      	mov	r0, r4
 802a54a:	f002 fda0 	bl	802d08e <strchr>
 802a54e:	4606      	mov	r6, r0
 802a550:	b1c8      	cbz	r0, 802a586 <is_valid_mqtt_url+0x4e>
 802a552:	1b05      	subs	r5, r0, r4
 802a554:	462a      	mov	r2, r5
 802a556:	4621      	mov	r1, r4
 802a558:	4668      	mov	r0, sp
 802a55a:	f002 fdc8 	bl	802d0ee <strncpy>
 802a55e:	2300      	movs	r3, #0
 802a560:	f80d 3005 	strb.w	r3, [sp, r5]
 802a564:	4668      	mov	r0, sp
 802a566:	f7ff ff85 	bl	802a474 <is_valid_ip_or_domain>
 802a56a:	b190      	cbz	r0, 802a592 <is_valid_mqtt_url+0x5a>
 802a56c:	1c70      	adds	r0, r6, #1
 802a56e:	f7ff ffc9 	bl	802a504 <is_valid_port>
 802a572:	b1a0      	cbz	r0, 802a59e <is_valid_mqtt_url+0x66>
 802a574:	2000      	movs	r0, #0
 802a576:	b040      	add	sp, #256	@ 0x100
 802a578:	bd70      	pop	{r4, r5, r6, pc}
 802a57a:	480c      	ldr	r0, [pc, #48]	@ (802a5ac <is_valid_mqtt_url+0x74>)
 802a57c:	f002 f818 	bl	802c5b0 <puts>
 802a580:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802a584:	e7f7      	b.n	802a576 <is_valid_mqtt_url+0x3e>
 802a586:	480a      	ldr	r0, [pc, #40]	@ (802a5b0 <is_valid_mqtt_url+0x78>)
 802a588:	f002 f812 	bl	802c5b0 <puts>
 802a58c:	f06f 0001 	mvn.w	r0, #1
 802a590:	e7f1      	b.n	802a576 <is_valid_mqtt_url+0x3e>
 802a592:	4808      	ldr	r0, [pc, #32]	@ (802a5b4 <is_valid_mqtt_url+0x7c>)
 802a594:	f002 f80c 	bl	802c5b0 <puts>
 802a598:	f06f 0002 	mvn.w	r0, #2
 802a59c:	e7eb      	b.n	802a576 <is_valid_mqtt_url+0x3e>
 802a59e:	4806      	ldr	r0, [pc, #24]	@ (802a5b8 <is_valid_mqtt_url+0x80>)
 802a5a0:	f002 f806 	bl	802c5b0 <puts>
 802a5a4:	f06f 0003 	mvn.w	r0, #3
 802a5a8:	e7e5      	b.n	802a576 <is_valid_mqtt_url+0x3e>
 802a5aa:	bf00      	nop
 802a5ac:	0803c360 	.word	0x0803c360
 802a5b0:	0803c38c 	.word	0x0803c38c
 802a5b4:	0803c3c0 	.word	0x0803c3c0
 802a5b8:	0803c3e4 	.word	0x0803c3e4

0802a5bc <__assert_func>:
 802a5bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802a5be:	4614      	mov	r4, r2
 802a5c0:	461a      	mov	r2, r3
 802a5c2:	4b09      	ldr	r3, [pc, #36]	@ (802a5e8 <__assert_func+0x2c>)
 802a5c4:	681b      	ldr	r3, [r3, #0]
 802a5c6:	4605      	mov	r5, r0
 802a5c8:	68d8      	ldr	r0, [r3, #12]
 802a5ca:	b954      	cbnz	r4, 802a5e2 <__assert_func+0x26>
 802a5cc:	4b07      	ldr	r3, [pc, #28]	@ (802a5ec <__assert_func+0x30>)
 802a5ce:	461c      	mov	r4, r3
 802a5d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802a5d4:	9100      	str	r1, [sp, #0]
 802a5d6:	462b      	mov	r3, r5
 802a5d8:	4905      	ldr	r1, [pc, #20]	@ (802a5f0 <__assert_func+0x34>)
 802a5da:	f000 f811 	bl	802a600 <fiprintf>
 802a5de:	f003 ffdf 	bl	802e5a0 <abort>
 802a5e2:	4b04      	ldr	r3, [pc, #16]	@ (802a5f4 <__assert_func+0x38>)
 802a5e4:	e7f4      	b.n	802a5d0 <__assert_func+0x14>
 802a5e6:	bf00      	nop
 802a5e8:	200002d8 	.word	0x200002d8
 802a5ec:	0803c43a 	.word	0x0803c43a
 802a5f0:	0803c40c 	.word	0x0803c40c
 802a5f4:	0803c3ff 	.word	0x0803c3ff

0802a5f8 <atoi>:
 802a5f8:	220a      	movs	r2, #10
 802a5fa:	2100      	movs	r1, #0
 802a5fc:	f002 b8b6 	b.w	802c76c <strtol>

0802a600 <fiprintf>:
 802a600:	b40e      	push	{r1, r2, r3}
 802a602:	b503      	push	{r0, r1, lr}
 802a604:	4601      	mov	r1, r0
 802a606:	ab03      	add	r3, sp, #12
 802a608:	4805      	ldr	r0, [pc, #20]	@ (802a620 <fiprintf+0x20>)
 802a60a:	f853 2b04 	ldr.w	r2, [r3], #4
 802a60e:	6800      	ldr	r0, [r0, #0]
 802a610:	9301      	str	r3, [sp, #4]
 802a612:	f001 fab7 	bl	802bb84 <_vfiprintf_r>
 802a616:	b002      	add	sp, #8
 802a618:	f85d eb04 	ldr.w	lr, [sp], #4
 802a61c:	b003      	add	sp, #12
 802a61e:	4770      	bx	lr
 802a620:	200002d8 	.word	0x200002d8

0802a624 <printf>:
 802a624:	b40f      	push	{r0, r1, r2, r3}
 802a626:	b507      	push	{r0, r1, r2, lr}
 802a628:	4906      	ldr	r1, [pc, #24]	@ (802a644 <printf+0x20>)
 802a62a:	ab04      	add	r3, sp, #16
 802a62c:	6808      	ldr	r0, [r1, #0]
 802a62e:	f853 2b04 	ldr.w	r2, [r3], #4
 802a632:	6881      	ldr	r1, [r0, #8]
 802a634:	9301      	str	r3, [sp, #4]
 802a636:	f000 f807 	bl	802a648 <_vfprintf_r>
 802a63a:	b003      	add	sp, #12
 802a63c:	f85d eb04 	ldr.w	lr, [sp], #4
 802a640:	b004      	add	sp, #16
 802a642:	4770      	bx	lr
 802a644:	200002d8 	.word	0x200002d8

0802a648 <_vfprintf_r>:
 802a648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a64c:	b0d3      	sub	sp, #332	@ 0x14c
 802a64e:	468b      	mov	fp, r1
 802a650:	4690      	mov	r8, r2
 802a652:	461c      	mov	r4, r3
 802a654:	461e      	mov	r6, r3
 802a656:	9003      	str	r0, [sp, #12]
 802a658:	f003 fe90 	bl	802e37c <_localeconv_r>
 802a65c:	6803      	ldr	r3, [r0, #0]
 802a65e:	9316      	str	r3, [sp, #88]	@ 0x58
 802a660:	4618      	mov	r0, r3
 802a662:	f7e5 fe1d 	bl	80102a0 <strlen>
 802a666:	9b03      	ldr	r3, [sp, #12]
 802a668:	900d      	str	r0, [sp, #52]	@ 0x34
 802a66a:	b123      	cbz	r3, 802a676 <_vfprintf_r+0x2e>
 802a66c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802a66e:	b913      	cbnz	r3, 802a676 <_vfprintf_r+0x2e>
 802a670:	9803      	ldr	r0, [sp, #12]
 802a672:	f002 fa4f 	bl	802cb14 <__sinit>
 802a676:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 802a67a:	07da      	lsls	r2, r3, #31
 802a67c:	d407      	bmi.n	802a68e <_vfprintf_r+0x46>
 802a67e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802a682:	059b      	lsls	r3, r3, #22
 802a684:	d403      	bmi.n	802a68e <_vfprintf_r+0x46>
 802a686:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 802a68a:	f003 ff22 	bl	802e4d2 <__retarget_lock_acquire_recursive>
 802a68e:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 802a692:	049f      	lsls	r7, r3, #18
 802a694:	d409      	bmi.n	802a6aa <_vfprintf_r+0x62>
 802a696:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802a69a:	f8ab 300c 	strh.w	r3, [fp, #12]
 802a69e:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 802a6a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 802a6a6:	f8cb 3064 	str.w	r3, [fp, #100]	@ 0x64
 802a6aa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802a6ae:	071d      	lsls	r5, r3, #28
 802a6b0:	d502      	bpl.n	802a6b8 <_vfprintf_r+0x70>
 802a6b2:	f8db 3010 	ldr.w	r3, [fp, #16]
 802a6b6:	b9c3      	cbnz	r3, 802a6ea <_vfprintf_r+0xa2>
 802a6b8:	9803      	ldr	r0, [sp, #12]
 802a6ba:	4659      	mov	r1, fp
 802a6bc:	f002 fbe6 	bl	802ce8c <__swsetup_r>
 802a6c0:	b198      	cbz	r0, 802a6ea <_vfprintf_r+0xa2>
 802a6c2:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 802a6c6:	07d8      	lsls	r0, r3, #31
 802a6c8:	d506      	bpl.n	802a6d8 <_vfprintf_r+0x90>
 802a6ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802a6ce:	930f      	str	r3, [sp, #60]	@ 0x3c
 802a6d0:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802a6d2:	b053      	add	sp, #332	@ 0x14c
 802a6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a6d8:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802a6dc:	0599      	lsls	r1, r3, #22
 802a6de:	d4f4      	bmi.n	802a6ca <_vfprintf_r+0x82>
 802a6e0:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 802a6e4:	f003 fef7 	bl	802e4d6 <__retarget_lock_release_recursive>
 802a6e8:	e7ef      	b.n	802a6ca <_vfprintf_r+0x82>
 802a6ea:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 802a6ee:	f003 021a 	and.w	r2, r3, #26
 802a6f2:	2a0a      	cmp	r2, #10
 802a6f4:	d116      	bne.n	802a724 <_vfprintf_r+0xdc>
 802a6f6:	f9bb 200e 	ldrsh.w	r2, [fp, #14]
 802a6fa:	2a00      	cmp	r2, #0
 802a6fc:	db12      	blt.n	802a724 <_vfprintf_r+0xdc>
 802a6fe:	f8db 2064 	ldr.w	r2, [fp, #100]	@ 0x64
 802a702:	07d2      	lsls	r2, r2, #31
 802a704:	d405      	bmi.n	802a712 <_vfprintf_r+0xca>
 802a706:	059b      	lsls	r3, r3, #22
 802a708:	d403      	bmi.n	802a712 <_vfprintf_r+0xca>
 802a70a:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 802a70e:	f003 fee2 	bl	802e4d6 <__retarget_lock_release_recursive>
 802a712:	9803      	ldr	r0, [sp, #12]
 802a714:	4623      	mov	r3, r4
 802a716:	4642      	mov	r2, r8
 802a718:	4659      	mov	r1, fp
 802a71a:	b053      	add	sp, #332	@ 0x14c
 802a71c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a720:	f001 b9be 	b.w	802baa0 <__sbprintf>
 802a724:	ed9f 7b92 	vldr	d7, [pc, #584]	@ 802a970 <_vfprintf_r+0x328>
 802a728:	2300      	movs	r3, #0
 802a72a:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 802a72e:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 802a732:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 802a736:	ac29      	add	r4, sp, #164	@ 0xa4
 802a738:	9426      	str	r4, [sp, #152]	@ 0x98
 802a73a:	9304      	str	r3, [sp, #16]
 802a73c:	9309      	str	r3, [sp, #36]	@ 0x24
 802a73e:	9312      	str	r3, [sp, #72]	@ 0x48
 802a740:	9317      	str	r3, [sp, #92]	@ 0x5c
 802a742:	930f      	str	r3, [sp, #60]	@ 0x3c
 802a744:	4643      	mov	r3, r8
 802a746:	461d      	mov	r5, r3
 802a748:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a74c:	b10a      	cbz	r2, 802a752 <_vfprintf_r+0x10a>
 802a74e:	2a25      	cmp	r2, #37	@ 0x25
 802a750:	d1f9      	bne.n	802a746 <_vfprintf_r+0xfe>
 802a752:	ebb5 0708 	subs.w	r7, r5, r8
 802a756:	d00d      	beq.n	802a774 <_vfprintf_r+0x12c>
 802a758:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a75a:	443b      	add	r3, r7
 802a75c:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a75e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a760:	3301      	adds	r3, #1
 802a762:	2b07      	cmp	r3, #7
 802a764:	e9c4 8700 	strd	r8, r7, [r4]
 802a768:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a76a:	dc75      	bgt.n	802a858 <_vfprintf_r+0x210>
 802a76c:	3408      	adds	r4, #8
 802a76e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802a770:	443b      	add	r3, r7
 802a772:	930f      	str	r3, [sp, #60]	@ 0x3c
 802a774:	782b      	ldrb	r3, [r5, #0]
 802a776:	2b00      	cmp	r3, #0
 802a778:	f001 814f 	beq.w	802ba1a <_vfprintf_r+0x13d2>
 802a77c:	2200      	movs	r2, #0
 802a77e:	1c6b      	adds	r3, r5, #1
 802a780:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 802a784:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 802a788:	920e      	str	r2, [sp, #56]	@ 0x38
 802a78a:	4615      	mov	r5, r2
 802a78c:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a790:	9206      	str	r2, [sp, #24]
 802a792:	930c      	str	r3, [sp, #48]	@ 0x30
 802a794:	9b06      	ldr	r3, [sp, #24]
 802a796:	3b20      	subs	r3, #32
 802a798:	2b5a      	cmp	r3, #90	@ 0x5a
 802a79a:	f200 85aa 	bhi.w	802b2f2 <_vfprintf_r+0xcaa>
 802a79e:	e8df f013 	tbh	[pc, r3, lsl #1]
 802a7a2:	009d      	.short	0x009d
 802a7a4:	05a805a8 	.word	0x05a805a8
 802a7a8:	05a800a5 	.word	0x05a800a5
 802a7ac:	05a805a8 	.word	0x05a805a8
 802a7b0:	05a80085 	.word	0x05a80085
 802a7b4:	00a805a8 	.word	0x00a805a8
 802a7b8:	05a800b2 	.word	0x05a800b2
 802a7bc:	00b400af 	.word	0x00b400af
 802a7c0:	00ce05a8 	.word	0x00ce05a8
 802a7c4:	00d100d1 	.word	0x00d100d1
 802a7c8:	00d100d1 	.word	0x00d100d1
 802a7cc:	00d100d1 	.word	0x00d100d1
 802a7d0:	00d100d1 	.word	0x00d100d1
 802a7d4:	05a800d1 	.word	0x05a800d1
 802a7d8:	05a805a8 	.word	0x05a805a8
 802a7dc:	05a805a8 	.word	0x05a805a8
 802a7e0:	05a805a8 	.word	0x05a805a8
 802a7e4:	05a80146 	.word	0x05a80146
 802a7e8:	011a0107 	.word	0x011a0107
 802a7ec:	01460146 	.word	0x01460146
 802a7f0:	05a80146 	.word	0x05a80146
 802a7f4:	05a805a8 	.word	0x05a805a8
 802a7f8:	00e205a8 	.word	0x00e205a8
 802a7fc:	05a805a8 	.word	0x05a805a8
 802a800:	05a804a3 	.word	0x05a804a3
 802a804:	05a805a8 	.word	0x05a805a8
 802a808:	05a804ed 	.word	0x05a804ed
 802a80c:	05a8050e 	.word	0x05a8050e
 802a810:	053005a8 	.word	0x053005a8
 802a814:	05a805a8 	.word	0x05a805a8
 802a818:	05a805a8 	.word	0x05a805a8
 802a81c:	05a805a8 	.word	0x05a805a8
 802a820:	05a805a8 	.word	0x05a805a8
 802a824:	05a80146 	.word	0x05a80146
 802a828:	011c0107 	.word	0x011c0107
 802a82c:	01460146 	.word	0x01460146
 802a830:	00ed0146 	.word	0x00ed0146
 802a834:	0101011c 	.word	0x0101011c
 802a838:	00fa05a8 	.word	0x00fa05a8
 802a83c:	048705a8 	.word	0x048705a8
 802a840:	04dc04a5 	.word	0x04dc04a5
 802a844:	05a80101 	.word	0x05a80101
 802a848:	009b04ed 	.word	0x009b04ed
 802a84c:	05a80510 	.word	0x05a80510
 802a850:	006505a8 	.word	0x006505a8
 802a854:	009b05a8 	.word	0x009b05a8
 802a858:	9803      	ldr	r0, [sp, #12]
 802a85a:	aa26      	add	r2, sp, #152	@ 0x98
 802a85c:	4659      	mov	r1, fp
 802a85e:	f001 f95f 	bl	802bb20 <__sprint_r>
 802a862:	2800      	cmp	r0, #0
 802a864:	f040 814d 	bne.w	802ab02 <_vfprintf_r+0x4ba>
 802a868:	ac29      	add	r4, sp, #164	@ 0xa4
 802a86a:	e780      	b.n	802a76e <_vfprintf_r+0x126>
 802a86c:	4b42      	ldr	r3, [pc, #264]	@ (802a978 <_vfprintf_r+0x330>)
 802a86e:	9319      	str	r3, [sp, #100]	@ 0x64
 802a870:	f015 0320 	ands.w	r3, r5, #32
 802a874:	f000 84c8 	beq.w	802b208 <_vfprintf_r+0xbc0>
 802a878:	3607      	adds	r6, #7
 802a87a:	f026 0307 	bic.w	r3, r6, #7
 802a87e:	461a      	mov	r2, r3
 802a880:	685f      	ldr	r7, [r3, #4]
 802a882:	f852 6b08 	ldr.w	r6, [r2], #8
 802a886:	9207      	str	r2, [sp, #28]
 802a888:	07eb      	lsls	r3, r5, #31
 802a88a:	d50a      	bpl.n	802a8a2 <_vfprintf_r+0x25a>
 802a88c:	ea56 0307 	orrs.w	r3, r6, r7
 802a890:	d007      	beq.n	802a8a2 <_vfprintf_r+0x25a>
 802a892:	2330      	movs	r3, #48	@ 0x30
 802a894:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 802a898:	9b06      	ldr	r3, [sp, #24]
 802a89a:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 802a89e:	f045 0502 	orr.w	r5, r5, #2
 802a8a2:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 802a8a6:	2302      	movs	r3, #2
 802a8a8:	f000 bc2e 	b.w	802b108 <_vfprintf_r+0xac0>
 802a8ac:	9803      	ldr	r0, [sp, #12]
 802a8ae:	f003 fd65 	bl	802e37c <_localeconv_r>
 802a8b2:	6843      	ldr	r3, [r0, #4]
 802a8b4:	9317      	str	r3, [sp, #92]	@ 0x5c
 802a8b6:	4618      	mov	r0, r3
 802a8b8:	f7e5 fcf2 	bl	80102a0 <strlen>
 802a8bc:	9012      	str	r0, [sp, #72]	@ 0x48
 802a8be:	9803      	ldr	r0, [sp, #12]
 802a8c0:	f003 fd5c 	bl	802e37c <_localeconv_r>
 802a8c4:	6883      	ldr	r3, [r0, #8]
 802a8c6:	9309      	str	r3, [sp, #36]	@ 0x24
 802a8c8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802a8ca:	b12b      	cbz	r3, 802a8d8 <_vfprintf_r+0x290>
 802a8cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a8ce:	b11b      	cbz	r3, 802a8d8 <_vfprintf_r+0x290>
 802a8d0:	781b      	ldrb	r3, [r3, #0]
 802a8d2:	b10b      	cbz	r3, 802a8d8 <_vfprintf_r+0x290>
 802a8d4:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 802a8d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a8da:	e757      	b.n	802a78c <_vfprintf_r+0x144>
 802a8dc:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 802a8e0:	2b00      	cmp	r3, #0
 802a8e2:	d1f9      	bne.n	802a8d8 <_vfprintf_r+0x290>
 802a8e4:	2320      	movs	r3, #32
 802a8e6:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802a8ea:	e7f5      	b.n	802a8d8 <_vfprintf_r+0x290>
 802a8ec:	f045 0501 	orr.w	r5, r5, #1
 802a8f0:	e7f2      	b.n	802a8d8 <_vfprintf_r+0x290>
 802a8f2:	f856 3b04 	ldr.w	r3, [r6], #4
 802a8f6:	930e      	str	r3, [sp, #56]	@ 0x38
 802a8f8:	2b00      	cmp	r3, #0
 802a8fa:	daed      	bge.n	802a8d8 <_vfprintf_r+0x290>
 802a8fc:	425b      	negs	r3, r3
 802a8fe:	930e      	str	r3, [sp, #56]	@ 0x38
 802a900:	f045 0504 	orr.w	r5, r5, #4
 802a904:	e7e8      	b.n	802a8d8 <_vfprintf_r+0x290>
 802a906:	232b      	movs	r3, #43	@ 0x2b
 802a908:	e7ed      	b.n	802a8e6 <_vfprintf_r+0x29e>
 802a90a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a90c:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a910:	9206      	str	r2, [sp, #24]
 802a912:	2a2a      	cmp	r2, #42	@ 0x2a
 802a914:	d10f      	bne.n	802a936 <_vfprintf_r+0x2ee>
 802a916:	f856 2b04 	ldr.w	r2, [r6], #4
 802a91a:	930c      	str	r3, [sp, #48]	@ 0x30
 802a91c:	ea42 79e2 	orr.w	r9, r2, r2, asr #31
 802a920:	e7da      	b.n	802a8d8 <_vfprintf_r+0x290>
 802a922:	fb01 2909 	mla	r9, r1, r9, r2
 802a926:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a92a:	9206      	str	r2, [sp, #24]
 802a92c:	9a06      	ldr	r2, [sp, #24]
 802a92e:	3a30      	subs	r2, #48	@ 0x30
 802a930:	2a09      	cmp	r2, #9
 802a932:	d9f6      	bls.n	802a922 <_vfprintf_r+0x2da>
 802a934:	e72d      	b.n	802a792 <_vfprintf_r+0x14a>
 802a936:	f04f 0900 	mov.w	r9, #0
 802a93a:	210a      	movs	r1, #10
 802a93c:	e7f6      	b.n	802a92c <_vfprintf_r+0x2e4>
 802a93e:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 802a942:	e7c9      	b.n	802a8d8 <_vfprintf_r+0x290>
 802a944:	2200      	movs	r2, #0
 802a946:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a948:	920e      	str	r2, [sp, #56]	@ 0x38
 802a94a:	210a      	movs	r1, #10
 802a94c:	9a06      	ldr	r2, [sp, #24]
 802a94e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 802a950:	3a30      	subs	r2, #48	@ 0x30
 802a952:	fb01 2200 	mla	r2, r1, r0, r2
 802a956:	920e      	str	r2, [sp, #56]	@ 0x38
 802a958:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a95c:	9206      	str	r2, [sp, #24]
 802a95e:	3a30      	subs	r2, #48	@ 0x30
 802a960:	2a09      	cmp	r2, #9
 802a962:	d9f3      	bls.n	802a94c <_vfprintf_r+0x304>
 802a964:	e715      	b.n	802a792 <_vfprintf_r+0x14a>
 802a966:	f045 0508 	orr.w	r5, r5, #8
 802a96a:	e7b5      	b.n	802a8d8 <_vfprintf_r+0x290>
 802a96c:	f3af 8000 	nop.w
	...
 802a978:	0803c44b 	.word	0x0803c44b
 802a97c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a97e:	781b      	ldrb	r3, [r3, #0]
 802a980:	2b68      	cmp	r3, #104	@ 0x68
 802a982:	bf01      	itttt	eq
 802a984:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 802a986:	3301      	addeq	r3, #1
 802a988:	930c      	streq	r3, [sp, #48]	@ 0x30
 802a98a:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 802a98e:	bf18      	it	ne
 802a990:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 802a994:	e7a0      	b.n	802a8d8 <_vfprintf_r+0x290>
 802a996:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a998:	781b      	ldrb	r3, [r3, #0]
 802a99a:	2b6c      	cmp	r3, #108	@ 0x6c
 802a99c:	d105      	bne.n	802a9aa <_vfprintf_r+0x362>
 802a99e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a9a0:	3301      	adds	r3, #1
 802a9a2:	930c      	str	r3, [sp, #48]	@ 0x30
 802a9a4:	f045 0520 	orr.w	r5, r5, #32
 802a9a8:	e796      	b.n	802a8d8 <_vfprintf_r+0x290>
 802a9aa:	f045 0510 	orr.w	r5, r5, #16
 802a9ae:	e793      	b.n	802a8d8 <_vfprintf_r+0x290>
 802a9b0:	4632      	mov	r2, r6
 802a9b2:	f852 3b04 	ldr.w	r3, [r2], #4
 802a9b6:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 802a9ba:	2300      	movs	r3, #0
 802a9bc:	9207      	str	r2, [sp, #28]
 802a9be:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802a9c2:	469a      	mov	sl, r3
 802a9c4:	f04f 0901 	mov.w	r9, #1
 802a9c8:	9310      	str	r3, [sp, #64]	@ 0x40
 802a9ca:	461f      	mov	r7, r3
 802a9cc:	9308      	str	r3, [sp, #32]
 802a9ce:	461e      	mov	r6, r3
 802a9d0:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 802a9d4:	e1da      	b.n	802ad8c <_vfprintf_r+0x744>
 802a9d6:	f045 0510 	orr.w	r5, r5, #16
 802a9da:	06af      	lsls	r7, r5, #26
 802a9dc:	d512      	bpl.n	802aa04 <_vfprintf_r+0x3bc>
 802a9de:	3607      	adds	r6, #7
 802a9e0:	f026 0307 	bic.w	r3, r6, #7
 802a9e4:	461a      	mov	r2, r3
 802a9e6:	685f      	ldr	r7, [r3, #4]
 802a9e8:	f852 6b08 	ldr.w	r6, [r2], #8
 802a9ec:	9207      	str	r2, [sp, #28]
 802a9ee:	2f00      	cmp	r7, #0
 802a9f0:	da06      	bge.n	802aa00 <_vfprintf_r+0x3b8>
 802a9f2:	4276      	negs	r6, r6
 802a9f4:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 802a9f8:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 802a9fc:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802aa00:	2301      	movs	r3, #1
 802aa02:	e384      	b.n	802b10e <_vfprintf_r+0xac6>
 802aa04:	4633      	mov	r3, r6
 802aa06:	06ee      	lsls	r6, r5, #27
 802aa08:	f853 7b04 	ldr.w	r7, [r3], #4
 802aa0c:	9307      	str	r3, [sp, #28]
 802aa0e:	d502      	bpl.n	802aa16 <_vfprintf_r+0x3ce>
 802aa10:	463e      	mov	r6, r7
 802aa12:	17ff      	asrs	r7, r7, #31
 802aa14:	e7eb      	b.n	802a9ee <_vfprintf_r+0x3a6>
 802aa16:	0668      	lsls	r0, r5, #25
 802aa18:	d503      	bpl.n	802aa22 <_vfprintf_r+0x3da>
 802aa1a:	b23e      	sxth	r6, r7
 802aa1c:	f347 37c0 	sbfx	r7, r7, #15, #1
 802aa20:	e7e5      	b.n	802a9ee <_vfprintf_r+0x3a6>
 802aa22:	05a9      	lsls	r1, r5, #22
 802aa24:	d5f4      	bpl.n	802aa10 <_vfprintf_r+0x3c8>
 802aa26:	b27e      	sxtb	r6, r7
 802aa28:	f347 17c0 	sbfx	r7, r7, #7, #1
 802aa2c:	e7df      	b.n	802a9ee <_vfprintf_r+0x3a6>
 802aa2e:	3607      	adds	r6, #7
 802aa30:	f026 0307 	bic.w	r3, r6, #7
 802aa34:	ecb3 7b02 	vldmia	r3!, {d7}
 802aa38:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 802aa3c:	9307      	str	r3, [sp, #28]
 802aa3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802aa40:	931a      	str	r3, [sp, #104]	@ 0x68
 802aa42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802aa44:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802aa48:	931b      	str	r3, [sp, #108]	@ 0x6c
 802aa4a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 802aa4e:	4b85      	ldr	r3, [pc, #532]	@ (802ac64 <_vfprintf_r+0x61c>)
 802aa50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802aa54:	f7e6 f882 	bl	8010b5c <__aeabi_dcmpun>
 802aa58:	bb10      	cbnz	r0, 802aaa0 <_vfprintf_r+0x458>
 802aa5a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 802aa5e:	4b81      	ldr	r3, [pc, #516]	@ (802ac64 <_vfprintf_r+0x61c>)
 802aa60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802aa64:	f7e6 f85c 	bl	8010b20 <__aeabi_dcmple>
 802aa68:	b9d0      	cbnz	r0, 802aaa0 <_vfprintf_r+0x458>
 802aa6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802aa6e:	2200      	movs	r2, #0
 802aa70:	2300      	movs	r3, #0
 802aa72:	f7e6 f84b 	bl	8010b0c <__aeabi_dcmplt>
 802aa76:	b110      	cbz	r0, 802aa7e <_vfprintf_r+0x436>
 802aa78:	232d      	movs	r3, #45	@ 0x2d
 802aa7a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802aa7e:	4a7a      	ldr	r2, [pc, #488]	@ (802ac68 <_vfprintf_r+0x620>)
 802aa80:	4b7a      	ldr	r3, [pc, #488]	@ (802ac6c <_vfprintf_r+0x624>)
 802aa82:	9906      	ldr	r1, [sp, #24]
 802aa84:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 802aa88:	2947      	cmp	r1, #71	@ 0x47
 802aa8a:	bfd4      	ite	le
 802aa8c:	4690      	movle	r8, r2
 802aa8e:	4698      	movgt	r8, r3
 802aa90:	f04f 0a00 	mov.w	sl, #0
 802aa94:	f04f 0903 	mov.w	r9, #3
 802aa98:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 802aa9c:	f000 bff8 	b.w	802ba90 <_vfprintf_r+0x1448>
 802aaa0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 802aaa4:	4610      	mov	r0, r2
 802aaa6:	4619      	mov	r1, r3
 802aaa8:	f7e6 f858 	bl	8010b5c <__aeabi_dcmpun>
 802aaac:	4682      	mov	sl, r0
 802aaae:	b140      	cbz	r0, 802aac2 <_vfprintf_r+0x47a>
 802aab0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802aab2:	4a6f      	ldr	r2, [pc, #444]	@ (802ac70 <_vfprintf_r+0x628>)
 802aab4:	2b00      	cmp	r3, #0
 802aab6:	bfbc      	itt	lt
 802aab8:	232d      	movlt	r3, #45	@ 0x2d
 802aaba:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 802aabe:	4b6d      	ldr	r3, [pc, #436]	@ (802ac74 <_vfprintf_r+0x62c>)
 802aac0:	e7df      	b.n	802aa82 <_vfprintf_r+0x43a>
 802aac2:	9b06      	ldr	r3, [sp, #24]
 802aac4:	2b61      	cmp	r3, #97	@ 0x61
 802aac6:	d02e      	beq.n	802ab26 <_vfprintf_r+0x4de>
 802aac8:	2b41      	cmp	r3, #65	@ 0x41
 802aaca:	d12e      	bne.n	802ab2a <_vfprintf_r+0x4e2>
 802aacc:	2358      	movs	r3, #88	@ 0x58
 802aace:	2230      	movs	r2, #48	@ 0x30
 802aad0:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 802aad4:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 802aad8:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 802aadc:	f045 0502 	orr.w	r5, r5, #2
 802aae0:	f340 80ae 	ble.w	802ac40 <_vfprintf_r+0x5f8>
 802aae4:	9803      	ldr	r0, [sp, #12]
 802aae6:	f109 0101 	add.w	r1, r9, #1
 802aaea:	f004 fd0f 	bl	802f50c <_malloc_r>
 802aaee:	4680      	mov	r8, r0
 802aaf0:	2800      	cmp	r0, #0
 802aaf2:	f040 80aa 	bne.w	802ac4a <_vfprintf_r+0x602>
 802aaf6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802aafa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802aafe:	f8ab 300c 	strh.w	r3, [fp, #12]
 802ab02:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 802ab06:	07d9      	lsls	r1, r3, #31
 802ab08:	d407      	bmi.n	802ab1a <_vfprintf_r+0x4d2>
 802ab0a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802ab0e:	059a      	lsls	r2, r3, #22
 802ab10:	d403      	bmi.n	802ab1a <_vfprintf_r+0x4d2>
 802ab12:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 802ab16:	f003 fcde 	bl	802e4d6 <__retarget_lock_release_recursive>
 802ab1a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802ab1e:	065b      	lsls	r3, r3, #25
 802ab20:	f57f add6 	bpl.w	802a6d0 <_vfprintf_r+0x88>
 802ab24:	e5d1      	b.n	802a6ca <_vfprintf_r+0x82>
 802ab26:	2378      	movs	r3, #120	@ 0x78
 802ab28:	e7d1      	b.n	802aace <_vfprintf_r+0x486>
 802ab2a:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 802ab2e:	f000 808e 	beq.w	802ac4e <_vfprintf_r+0x606>
 802ab32:	9b06      	ldr	r3, [sp, #24]
 802ab34:	f023 0320 	bic.w	r3, r3, #32
 802ab38:	2b47      	cmp	r3, #71	@ 0x47
 802ab3a:	d105      	bne.n	802ab48 <_vfprintf_r+0x500>
 802ab3c:	f1b9 0f00 	cmp.w	r9, #0
 802ab40:	d102      	bne.n	802ab48 <_vfprintf_r+0x500>
 802ab42:	46ca      	mov	sl, r9
 802ab44:	f04f 0901 	mov.w	r9, #1
 802ab48:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 802ab4c:	9311      	str	r3, [sp, #68]	@ 0x44
 802ab4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802ab50:	2b00      	cmp	r3, #0
 802ab52:	da7f      	bge.n	802ac54 <_vfprintf_r+0x60c>
 802ab54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802ab56:	9314      	str	r3, [sp, #80]	@ 0x50
 802ab58:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802ab5a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 802ab5e:	9315      	str	r3, [sp, #84]	@ 0x54
 802ab60:	232d      	movs	r3, #45	@ 0x2d
 802ab62:	931c      	str	r3, [sp, #112]	@ 0x70
 802ab64:	9b06      	ldr	r3, [sp, #24]
 802ab66:	f023 0320 	bic.w	r3, r3, #32
 802ab6a:	2b41      	cmp	r3, #65	@ 0x41
 802ab6c:	9308      	str	r3, [sp, #32]
 802ab6e:	f040 81e7 	bne.w	802af40 <_vfprintf_r+0x8f8>
 802ab72:	a820      	add	r0, sp, #128	@ 0x80
 802ab74:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 802ab78:	f003 fcd2 	bl	802e520 <frexp>
 802ab7c:	2200      	movs	r2, #0
 802ab7e:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 802ab82:	ec51 0b10 	vmov	r0, r1, d0
 802ab86:	f7e5 fd4f 	bl	8010628 <__aeabi_dmul>
 802ab8a:	4602      	mov	r2, r0
 802ab8c:	460b      	mov	r3, r1
 802ab8e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802ab92:	2200      	movs	r2, #0
 802ab94:	2300      	movs	r3, #0
 802ab96:	f7e5 ffaf 	bl	8010af8 <__aeabi_dcmpeq>
 802ab9a:	b108      	cbz	r0, 802aba0 <_vfprintf_r+0x558>
 802ab9c:	2301      	movs	r3, #1
 802ab9e:	9320      	str	r3, [sp, #128]	@ 0x80
 802aba0:	4a35      	ldr	r2, [pc, #212]	@ (802ac78 <_vfprintf_r+0x630>)
 802aba2:	4b36      	ldr	r3, [pc, #216]	@ (802ac7c <_vfprintf_r+0x634>)
 802aba4:	9906      	ldr	r1, [sp, #24]
 802aba6:	2961      	cmp	r1, #97	@ 0x61
 802aba8:	bf18      	it	ne
 802abaa:	461a      	movne	r2, r3
 802abac:	9210      	str	r2, [sp, #64]	@ 0x40
 802abae:	f109 37ff 	add.w	r7, r9, #4294967295	@ 0xffffffff
 802abb2:	4646      	mov	r6, r8
 802abb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802abb8:	4b31      	ldr	r3, [pc, #196]	@ (802ac80 <_vfprintf_r+0x638>)
 802abba:	2200      	movs	r2, #0
 802abbc:	f7e5 fd34 	bl	8010628 <__aeabi_dmul>
 802abc0:	4602      	mov	r2, r0
 802abc2:	460b      	mov	r3, r1
 802abc4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802abc8:	f7e5 ffde 	bl	8010b88 <__aeabi_d2iz>
 802abcc:	9013      	str	r0, [sp, #76]	@ 0x4c
 802abce:	f7e5 fcc1 	bl	8010554 <__aeabi_i2d>
 802abd2:	4602      	mov	r2, r0
 802abd4:	460b      	mov	r3, r1
 802abd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802abda:	f7e5 fb6d 	bl	80102b8 <__aeabi_dsub>
 802abde:	4602      	mov	r2, r0
 802abe0:	460b      	mov	r3, r1
 802abe2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802abe6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802abe8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802abea:	5c9b      	ldrb	r3, [r3, r2]
 802abec:	f806 3b01 	strb.w	r3, [r6], #1
 802abf0:	1c7a      	adds	r2, r7, #1
 802abf2:	d006      	beq.n	802ac02 <_vfprintf_r+0x5ba>
 802abf4:	1e7b      	subs	r3, r7, #1
 802abf6:	931d      	str	r3, [sp, #116]	@ 0x74
 802abf8:	2200      	movs	r2, #0
 802abfa:	2300      	movs	r3, #0
 802abfc:	f7e5 ff7c 	bl	8010af8 <__aeabi_dcmpeq>
 802ac00:	b370      	cbz	r0, 802ac60 <_vfprintf_r+0x618>
 802ac02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802ac06:	4b1f      	ldr	r3, [pc, #124]	@ (802ac84 <_vfprintf_r+0x63c>)
 802ac08:	2200      	movs	r2, #0
 802ac0a:	f7e5 ff9d 	bl	8010b48 <__aeabi_dcmpgt>
 802ac0e:	2800      	cmp	r0, #0
 802ac10:	d13a      	bne.n	802ac88 <_vfprintf_r+0x640>
 802ac12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802ac16:	4b1b      	ldr	r3, [pc, #108]	@ (802ac84 <_vfprintf_r+0x63c>)
 802ac18:	2200      	movs	r2, #0
 802ac1a:	f7e5 ff6d 	bl	8010af8 <__aeabi_dcmpeq>
 802ac1e:	b110      	cbz	r0, 802ac26 <_vfprintf_r+0x5de>
 802ac20:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802ac22:	07db      	lsls	r3, r3, #31
 802ac24:	d430      	bmi.n	802ac88 <_vfprintf_r+0x640>
 802ac26:	4633      	mov	r3, r6
 802ac28:	19f1      	adds	r1, r6, r7
 802ac2a:	2030      	movs	r0, #48	@ 0x30
 802ac2c:	1aca      	subs	r2, r1, r3
 802ac2e:	2a00      	cmp	r2, #0
 802ac30:	f280 8183 	bge.w	802af3a <_vfprintf_r+0x8f2>
 802ac34:	1c7b      	adds	r3, r7, #1
 802ac36:	3701      	adds	r7, #1
 802ac38:	bfb8      	it	lt
 802ac3a:	2300      	movlt	r3, #0
 802ac3c:	441e      	add	r6, r3
 802ac3e:	e037      	b.n	802acb0 <_vfprintf_r+0x668>
 802ac40:	f04f 0a00 	mov.w	sl, #0
 802ac44:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 802ac48:	e77e      	b.n	802ab48 <_vfprintf_r+0x500>
 802ac4a:	4682      	mov	sl, r0
 802ac4c:	e77c      	b.n	802ab48 <_vfprintf_r+0x500>
 802ac4e:	f04f 0906 	mov.w	r9, #6
 802ac52:	e779      	b.n	802ab48 <_vfprintf_r+0x500>
 802ac54:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 802ac58:	2300      	movs	r3, #0
 802ac5a:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 802ac5e:	e780      	b.n	802ab62 <_vfprintf_r+0x51a>
 802ac60:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 802ac62:	e7a7      	b.n	802abb4 <_vfprintf_r+0x56c>
 802ac64:	7fefffff 	.word	0x7fefffff
 802ac68:	0803c43b 	.word	0x0803c43b
 802ac6c:	0803c43f 	.word	0x0803c43f
 802ac70:	0803c443 	.word	0x0803c443
 802ac74:	0803c447 	.word	0x0803c447
 802ac78:	0803c44b 	.word	0x0803c44b
 802ac7c:	0803c45c 	.word	0x0803c45c
 802ac80:	40300000 	.word	0x40300000
 802ac84:	3fe00000 	.word	0x3fe00000
 802ac88:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802ac8a:	9624      	str	r6, [sp, #144]	@ 0x90
 802ac8c:	7bd9      	ldrb	r1, [r3, #15]
 802ac8e:	2030      	movs	r0, #48	@ 0x30
 802ac90:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802ac92:	1e53      	subs	r3, r2, #1
 802ac94:	9324      	str	r3, [sp, #144]	@ 0x90
 802ac96:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 802ac9a:	428b      	cmp	r3, r1
 802ac9c:	f000 814a 	beq.w	802af34 <_vfprintf_r+0x8ec>
 802aca0:	2b39      	cmp	r3, #57	@ 0x39
 802aca2:	bf0b      	itete	eq
 802aca4:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 802aca6:	3301      	addne	r3, #1
 802aca8:	7a9b      	ldrbeq	r3, [r3, #10]
 802acaa:	b2db      	uxtbne	r3, r3
 802acac:	f802 3c01 	strb.w	r3, [r2, #-1]
 802acb0:	eba6 0308 	sub.w	r3, r6, r8
 802acb4:	9304      	str	r3, [sp, #16]
 802acb6:	9b08      	ldr	r3, [sp, #32]
 802acb8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802acba:	2b47      	cmp	r3, #71	@ 0x47
 802acbc:	f040 8189 	bne.w	802afd2 <_vfprintf_r+0x98a>
 802acc0:	1cf1      	adds	r1, r6, #3
 802acc2:	db02      	blt.n	802acca <_vfprintf_r+0x682>
 802acc4:	45b1      	cmp	r9, r6
 802acc6:	f280 81a7 	bge.w	802b018 <_vfprintf_r+0x9d0>
 802acca:	9b06      	ldr	r3, [sp, #24]
 802accc:	3b02      	subs	r3, #2
 802acce:	9306      	str	r3, [sp, #24]
 802acd0:	9906      	ldr	r1, [sp, #24]
 802acd2:	f89d 2018 	ldrb.w	r2, [sp, #24]
 802acd6:	f021 0120 	bic.w	r1, r1, #32
 802acda:	2941      	cmp	r1, #65	@ 0x41
 802acdc:	bf08      	it	eq
 802acde:	320f      	addeq	r2, #15
 802ace0:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 802ace4:	bf06      	itte	eq
 802ace6:	b2d2      	uxtbeq	r2, r2
 802ace8:	2101      	moveq	r1, #1
 802acea:	2100      	movne	r1, #0
 802acec:	2b00      	cmp	r3, #0
 802acee:	9320      	str	r3, [sp, #128]	@ 0x80
 802acf0:	bfb8      	it	lt
 802acf2:	f1c6 0301 	rsblt	r3, r6, #1
 802acf6:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 802acfa:	bfb4      	ite	lt
 802acfc:	222d      	movlt	r2, #45	@ 0x2d
 802acfe:	222b      	movge	r2, #43	@ 0x2b
 802ad00:	2b09      	cmp	r3, #9
 802ad02:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 802ad06:	f340 817a 	ble.w	802affe <_vfprintf_r+0x9b6>
 802ad0a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 802ad0e:	270a      	movs	r7, #10
 802ad10:	4602      	mov	r2, r0
 802ad12:	fbb3 f6f7 	udiv	r6, r3, r7
 802ad16:	fb07 3116 	mls	r1, r7, r6, r3
 802ad1a:	3130      	adds	r1, #48	@ 0x30
 802ad1c:	f802 1c01 	strb.w	r1, [r2, #-1]
 802ad20:	4619      	mov	r1, r3
 802ad22:	2963      	cmp	r1, #99	@ 0x63
 802ad24:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 802ad28:	4633      	mov	r3, r6
 802ad2a:	dcf1      	bgt.n	802ad10 <_vfprintf_r+0x6c8>
 802ad2c:	3330      	adds	r3, #48	@ 0x30
 802ad2e:	1e91      	subs	r1, r2, #2
 802ad30:	f800 3c01 	strb.w	r3, [r0, #-1]
 802ad34:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 802ad38:	460b      	mov	r3, r1
 802ad3a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 802ad3e:	4283      	cmp	r3, r0
 802ad40:	f0c0 8158 	bcc.w	802aff4 <_vfprintf_r+0x9ac>
 802ad44:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 802ad48:	1a9b      	subs	r3, r3, r2
 802ad4a:	4281      	cmp	r1, r0
 802ad4c:	bf88      	it	hi
 802ad4e:	2300      	movhi	r3, #0
 802ad50:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 802ad54:	441a      	add	r2, r3
 802ad56:	ab22      	add	r3, sp, #136	@ 0x88
 802ad58:	1ad3      	subs	r3, r2, r3
 802ad5a:	9a04      	ldr	r2, [sp, #16]
 802ad5c:	9318      	str	r3, [sp, #96]	@ 0x60
 802ad5e:	2a01      	cmp	r2, #1
 802ad60:	eb03 0902 	add.w	r9, r3, r2
 802ad64:	dc01      	bgt.n	802ad6a <_vfprintf_r+0x722>
 802ad66:	07ea      	lsls	r2, r5, #31
 802ad68:	d501      	bpl.n	802ad6e <_vfprintf_r+0x726>
 802ad6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802ad6c:	4499      	add	r9, r3
 802ad6e:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 802ad72:	2700      	movs	r7, #0
 802ad74:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 802ad78:	9311      	str	r3, [sp, #68]	@ 0x44
 802ad7a:	9708      	str	r7, [sp, #32]
 802ad7c:	463e      	mov	r6, r7
 802ad7e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802ad80:	2b00      	cmp	r3, #0
 802ad82:	f040 8191 	bne.w	802b0a8 <_vfprintf_r+0xa60>
 802ad86:	2300      	movs	r3, #0
 802ad88:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802ad8a:	9310      	str	r3, [sp, #64]	@ 0x40
 802ad8c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802ad8e:	454b      	cmp	r3, r9
 802ad90:	bfb8      	it	lt
 802ad92:	464b      	movlt	r3, r9
 802ad94:	9311      	str	r3, [sp, #68]	@ 0x44
 802ad96:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 802ad9a:	b113      	cbz	r3, 802ada2 <_vfprintf_r+0x75a>
 802ad9c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802ad9e:	3301      	adds	r3, #1
 802ada0:	9311      	str	r3, [sp, #68]	@ 0x44
 802ada2:	f015 0302 	ands.w	r3, r5, #2
 802ada6:	931c      	str	r3, [sp, #112]	@ 0x70
 802ada8:	bf1e      	ittt	ne
 802adaa:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 802adac:	3302      	addne	r3, #2
 802adae:	9311      	strne	r3, [sp, #68]	@ 0x44
 802adb0:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 802adb4:	931d      	str	r3, [sp, #116]	@ 0x74
 802adb6:	d122      	bne.n	802adfe <_vfprintf_r+0x7b6>
 802adb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802adba:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802adbc:	1a9b      	subs	r3, r3, r2
 802adbe:	2b00      	cmp	r3, #0
 802adc0:	9313      	str	r3, [sp, #76]	@ 0x4c
 802adc2:	dd1c      	ble.n	802adfe <_vfprintf_r+0x7b6>
 802adc4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802adc6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802adca:	2810      	cmp	r0, #16
 802adcc:	489f      	ldr	r0, [pc, #636]	@ (802b04c <_vfprintf_r+0xa04>)
 802adce:	6020      	str	r0, [r4, #0]
 802add0:	f102 0201 	add.w	r2, r2, #1
 802add4:	f104 0108 	add.w	r1, r4, #8
 802add8:	f300 8297 	bgt.w	802b30a <_vfprintf_r+0xcc2>
 802addc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802adde:	6060      	str	r0, [r4, #4]
 802ade0:	4403      	add	r3, r0
 802ade2:	2a07      	cmp	r2, #7
 802ade4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802ade8:	f340 82a4 	ble.w	802b334 <_vfprintf_r+0xcec>
 802adec:	9803      	ldr	r0, [sp, #12]
 802adee:	aa26      	add	r2, sp, #152	@ 0x98
 802adf0:	4659      	mov	r1, fp
 802adf2:	f000 fe95 	bl	802bb20 <__sprint_r>
 802adf6:	2800      	cmp	r0, #0
 802adf8:	f040 85ed 	bne.w	802b9d6 <_vfprintf_r+0x138e>
 802adfc:	ac29      	add	r4, sp, #164	@ 0xa4
 802adfe:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 802ae02:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802ae04:	b16a      	cbz	r2, 802ae22 <_vfprintf_r+0x7da>
 802ae06:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 802ae0a:	6022      	str	r2, [r4, #0]
 802ae0c:	2201      	movs	r2, #1
 802ae0e:	4413      	add	r3, r2
 802ae10:	9328      	str	r3, [sp, #160]	@ 0xa0
 802ae12:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ae14:	6062      	str	r2, [r4, #4]
 802ae16:	4413      	add	r3, r2
 802ae18:	2b07      	cmp	r3, #7
 802ae1a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ae1c:	f300 828c 	bgt.w	802b338 <_vfprintf_r+0xcf0>
 802ae20:	3408      	adds	r4, #8
 802ae22:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 802ae24:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802ae26:	b162      	cbz	r2, 802ae42 <_vfprintf_r+0x7fa>
 802ae28:	aa1f      	add	r2, sp, #124	@ 0x7c
 802ae2a:	6022      	str	r2, [r4, #0]
 802ae2c:	2202      	movs	r2, #2
 802ae2e:	4413      	add	r3, r2
 802ae30:	9328      	str	r3, [sp, #160]	@ 0xa0
 802ae32:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ae34:	6062      	str	r2, [r4, #4]
 802ae36:	3301      	adds	r3, #1
 802ae38:	2b07      	cmp	r3, #7
 802ae3a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ae3c:	f300 8286 	bgt.w	802b34c <_vfprintf_r+0xd04>
 802ae40:	3408      	adds	r4, #8
 802ae42:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802ae44:	2b80      	cmp	r3, #128	@ 0x80
 802ae46:	d122      	bne.n	802ae8e <_vfprintf_r+0x846>
 802ae48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802ae4a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802ae4c:	1a9b      	subs	r3, r3, r2
 802ae4e:	2b00      	cmp	r3, #0
 802ae50:	9313      	str	r3, [sp, #76]	@ 0x4c
 802ae52:	dd1c      	ble.n	802ae8e <_vfprintf_r+0x846>
 802ae54:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802ae56:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802ae5a:	2810      	cmp	r0, #16
 802ae5c:	487c      	ldr	r0, [pc, #496]	@ (802b050 <_vfprintf_r+0xa08>)
 802ae5e:	6020      	str	r0, [r4, #0]
 802ae60:	f102 0201 	add.w	r2, r2, #1
 802ae64:	f104 0108 	add.w	r1, r4, #8
 802ae68:	f300 827a 	bgt.w	802b360 <_vfprintf_r+0xd18>
 802ae6c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802ae6e:	6060      	str	r0, [r4, #4]
 802ae70:	4403      	add	r3, r0
 802ae72:	2a07      	cmp	r2, #7
 802ae74:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802ae78:	f340 8287 	ble.w	802b38a <_vfprintf_r+0xd42>
 802ae7c:	9803      	ldr	r0, [sp, #12]
 802ae7e:	aa26      	add	r2, sp, #152	@ 0x98
 802ae80:	4659      	mov	r1, fp
 802ae82:	f000 fe4d 	bl	802bb20 <__sprint_r>
 802ae86:	2800      	cmp	r0, #0
 802ae88:	f040 85a5 	bne.w	802b9d6 <_vfprintf_r+0x138e>
 802ae8c:	ac29      	add	r4, sp, #164	@ 0xa4
 802ae8e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802ae90:	eba3 0309 	sub.w	r3, r3, r9
 802ae94:	2b00      	cmp	r3, #0
 802ae96:	9310      	str	r3, [sp, #64]	@ 0x40
 802ae98:	dd1c      	ble.n	802aed4 <_vfprintf_r+0x88c>
 802ae9a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802ae9c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802aea0:	2810      	cmp	r0, #16
 802aea2:	486b      	ldr	r0, [pc, #428]	@ (802b050 <_vfprintf_r+0xa08>)
 802aea4:	6020      	str	r0, [r4, #0]
 802aea6:	f102 0201 	add.w	r2, r2, #1
 802aeaa:	f104 0108 	add.w	r1, r4, #8
 802aeae:	f300 826e 	bgt.w	802b38e <_vfprintf_r+0xd46>
 802aeb2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802aeb4:	6060      	str	r0, [r4, #4]
 802aeb6:	4403      	add	r3, r0
 802aeb8:	2a07      	cmp	r2, #7
 802aeba:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802aebe:	f340 827b 	ble.w	802b3b8 <_vfprintf_r+0xd70>
 802aec2:	9803      	ldr	r0, [sp, #12]
 802aec4:	aa26      	add	r2, sp, #152	@ 0x98
 802aec6:	4659      	mov	r1, fp
 802aec8:	f000 fe2a 	bl	802bb20 <__sprint_r>
 802aecc:	2800      	cmp	r0, #0
 802aece:	f040 8582 	bne.w	802b9d6 <_vfprintf_r+0x138e>
 802aed2:	ac29      	add	r4, sp, #164	@ 0xa4
 802aed4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802aed6:	9310      	str	r3, [sp, #64]	@ 0x40
 802aed8:	05e8      	lsls	r0, r5, #23
 802aeda:	f100 8273 	bmi.w	802b3c4 <_vfprintf_r+0xd7c>
 802aede:	444b      	add	r3, r9
 802aee0:	9328      	str	r3, [sp, #160]	@ 0xa0
 802aee2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802aee4:	3301      	adds	r3, #1
 802aee6:	2b07      	cmp	r3, #7
 802aee8:	e9c4 8900 	strd	r8, r9, [r4]
 802aeec:	9327      	str	r3, [sp, #156]	@ 0x9c
 802aeee:	f300 82af 	bgt.w	802b450 <_vfprintf_r+0xe08>
 802aef2:	3408      	adds	r4, #8
 802aef4:	0768      	lsls	r0, r5, #29
 802aef6:	f100 8550 	bmi.w	802b99a <_vfprintf_r+0x1352>
 802aefa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 802aefe:	9911      	ldr	r1, [sp, #68]	@ 0x44
 802af00:	428a      	cmp	r2, r1
 802af02:	bfac      	ite	ge
 802af04:	189b      	addge	r3, r3, r2
 802af06:	185b      	addlt	r3, r3, r1
 802af08:	930f      	str	r3, [sp, #60]	@ 0x3c
 802af0a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802af0c:	b13b      	cbz	r3, 802af1e <_vfprintf_r+0x8d6>
 802af0e:	9803      	ldr	r0, [sp, #12]
 802af10:	aa26      	add	r2, sp, #152	@ 0x98
 802af12:	4659      	mov	r1, fp
 802af14:	f000 fe04 	bl	802bb20 <__sprint_r>
 802af18:	2800      	cmp	r0, #0
 802af1a:	f040 855c 	bne.w	802b9d6 <_vfprintf_r+0x138e>
 802af1e:	2300      	movs	r3, #0
 802af20:	9327      	str	r3, [sp, #156]	@ 0x9c
 802af22:	f1ba 0f00 	cmp.w	sl, #0
 802af26:	f040 8572 	bne.w	802ba0e <_vfprintf_r+0x13c6>
 802af2a:	9e07      	ldr	r6, [sp, #28]
 802af2c:	ac29      	add	r4, sp, #164	@ 0xa4
 802af2e:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 802af32:	e407      	b.n	802a744 <_vfprintf_r+0xfc>
 802af34:	f802 0c01 	strb.w	r0, [r2, #-1]
 802af38:	e6aa      	b.n	802ac90 <_vfprintf_r+0x648>
 802af3a:	f803 0b01 	strb.w	r0, [r3], #1
 802af3e:	e675      	b.n	802ac2c <_vfprintf_r+0x5e4>
 802af40:	9b08      	ldr	r3, [sp, #32]
 802af42:	2b46      	cmp	r3, #70	@ 0x46
 802af44:	d005      	beq.n	802af52 <_vfprintf_r+0x90a>
 802af46:	2b45      	cmp	r3, #69	@ 0x45
 802af48:	d11a      	bne.n	802af80 <_vfprintf_r+0x938>
 802af4a:	f109 0601 	add.w	r6, r9, #1
 802af4e:	2102      	movs	r1, #2
 802af50:	e001      	b.n	802af56 <_vfprintf_r+0x90e>
 802af52:	464e      	mov	r6, r9
 802af54:	2103      	movs	r1, #3
 802af56:	ab24      	add	r3, sp, #144	@ 0x90
 802af58:	9301      	str	r3, [sp, #4]
 802af5a:	ab21      	add	r3, sp, #132	@ 0x84
 802af5c:	9300      	str	r3, [sp, #0]
 802af5e:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 802af62:	ab20      	add	r3, sp, #128	@ 0x80
 802af64:	9803      	ldr	r0, [sp, #12]
 802af66:	4632      	mov	r2, r6
 802af68:	f003 fbb6 	bl	802e6d8 <_dtoa_r>
 802af6c:	9b08      	ldr	r3, [sp, #32]
 802af6e:	2b47      	cmp	r3, #71	@ 0x47
 802af70:	4680      	mov	r8, r0
 802af72:	d119      	bne.n	802afa8 <_vfprintf_r+0x960>
 802af74:	07e8      	lsls	r0, r5, #31
 802af76:	d405      	bmi.n	802af84 <_vfprintf_r+0x93c>
 802af78:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802af7a:	eba3 0308 	sub.w	r3, r3, r8
 802af7e:	e699      	b.n	802acb4 <_vfprintf_r+0x66c>
 802af80:	464e      	mov	r6, r9
 802af82:	e7e4      	b.n	802af4e <_vfprintf_r+0x906>
 802af84:	eb08 0706 	add.w	r7, r8, r6
 802af88:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 802af8c:	2200      	movs	r2, #0
 802af8e:	2300      	movs	r3, #0
 802af90:	f7e5 fdb2 	bl	8010af8 <__aeabi_dcmpeq>
 802af94:	b100      	cbz	r0, 802af98 <_vfprintf_r+0x950>
 802af96:	9724      	str	r7, [sp, #144]	@ 0x90
 802af98:	2230      	movs	r2, #48	@ 0x30
 802af9a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802af9c:	429f      	cmp	r7, r3
 802af9e:	d9eb      	bls.n	802af78 <_vfprintf_r+0x930>
 802afa0:	1c59      	adds	r1, r3, #1
 802afa2:	9124      	str	r1, [sp, #144]	@ 0x90
 802afa4:	701a      	strb	r2, [r3, #0]
 802afa6:	e7f8      	b.n	802af9a <_vfprintf_r+0x952>
 802afa8:	9b08      	ldr	r3, [sp, #32]
 802afaa:	2b46      	cmp	r3, #70	@ 0x46
 802afac:	eb00 0706 	add.w	r7, r0, r6
 802afb0:	d1ea      	bne.n	802af88 <_vfprintf_r+0x940>
 802afb2:	7803      	ldrb	r3, [r0, #0]
 802afb4:	2b30      	cmp	r3, #48	@ 0x30
 802afb6:	d109      	bne.n	802afcc <_vfprintf_r+0x984>
 802afb8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 802afbc:	2200      	movs	r2, #0
 802afbe:	2300      	movs	r3, #0
 802afc0:	f7e5 fd9a 	bl	8010af8 <__aeabi_dcmpeq>
 802afc4:	b910      	cbnz	r0, 802afcc <_vfprintf_r+0x984>
 802afc6:	f1c6 0601 	rsb	r6, r6, #1
 802afca:	9620      	str	r6, [sp, #128]	@ 0x80
 802afcc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802afce:	441f      	add	r7, r3
 802afd0:	e7da      	b.n	802af88 <_vfprintf_r+0x940>
 802afd2:	9b08      	ldr	r3, [sp, #32]
 802afd4:	2b46      	cmp	r3, #70	@ 0x46
 802afd6:	f47f ae7b 	bne.w	802acd0 <_vfprintf_r+0x688>
 802afda:	f005 0301 	and.w	r3, r5, #1
 802afde:	2e00      	cmp	r6, #0
 802afe0:	ea43 0309 	orr.w	r3, r3, r9
 802afe4:	dd25      	ble.n	802b032 <_vfprintf_r+0x9ea>
 802afe6:	b37b      	cbz	r3, 802b048 <_vfprintf_r+0xa00>
 802afe8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802afea:	18f3      	adds	r3, r6, r3
 802afec:	4499      	add	r9, r3
 802afee:	2366      	movs	r3, #102	@ 0x66
 802aff0:	9306      	str	r3, [sp, #24]
 802aff2:	e033      	b.n	802b05c <_vfprintf_r+0xa14>
 802aff4:	f813 7b01 	ldrb.w	r7, [r3], #1
 802aff8:	f806 7f01 	strb.w	r7, [r6, #1]!
 802affc:	e69f      	b.n	802ad3e <_vfprintf_r+0x6f6>
 802affe:	b941      	cbnz	r1, 802b012 <_vfprintf_r+0x9ca>
 802b000:	2230      	movs	r2, #48	@ 0x30
 802b002:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 802b006:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 802b00a:	3330      	adds	r3, #48	@ 0x30
 802b00c:	f802 3b01 	strb.w	r3, [r2], #1
 802b010:	e6a1      	b.n	802ad56 <_vfprintf_r+0x70e>
 802b012:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 802b016:	e7f8      	b.n	802b00a <_vfprintf_r+0x9c2>
 802b018:	9b04      	ldr	r3, [sp, #16]
 802b01a:	42b3      	cmp	r3, r6
 802b01c:	dd0d      	ble.n	802b03a <_vfprintf_r+0x9f2>
 802b01e:	9b04      	ldr	r3, [sp, #16]
 802b020:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802b022:	2e00      	cmp	r6, #0
 802b024:	eb03 0902 	add.w	r9, r3, r2
 802b028:	dc0c      	bgt.n	802b044 <_vfprintf_r+0x9fc>
 802b02a:	f1c6 0301 	rsb	r3, r6, #1
 802b02e:	4499      	add	r9, r3
 802b030:	e008      	b.n	802b044 <_vfprintf_r+0x9fc>
 802b032:	b17b      	cbz	r3, 802b054 <_vfprintf_r+0xa0c>
 802b034:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802b036:	3301      	adds	r3, #1
 802b038:	e7d8      	b.n	802afec <_vfprintf_r+0x9a4>
 802b03a:	07eb      	lsls	r3, r5, #31
 802b03c:	d521      	bpl.n	802b082 <_vfprintf_r+0xa3a>
 802b03e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802b040:	eb06 0903 	add.w	r9, r6, r3
 802b044:	2367      	movs	r3, #103	@ 0x67
 802b046:	e7d3      	b.n	802aff0 <_vfprintf_r+0x9a8>
 802b048:	46b1      	mov	r9, r6
 802b04a:	e7d0      	b.n	802afee <_vfprintf_r+0x9a6>
 802b04c:	0803c47f 	.word	0x0803c47f
 802b050:	0803c46f 	.word	0x0803c46f
 802b054:	2366      	movs	r3, #102	@ 0x66
 802b056:	9306      	str	r3, [sp, #24]
 802b058:	f04f 0901 	mov.w	r9, #1
 802b05c:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 802b060:	9308      	str	r3, [sp, #32]
 802b062:	d01f      	beq.n	802b0a4 <_vfprintf_r+0xa5c>
 802b064:	2700      	movs	r7, #0
 802b066:	2e00      	cmp	r6, #0
 802b068:	9708      	str	r7, [sp, #32]
 802b06a:	f77f ae88 	ble.w	802ad7e <_vfprintf_r+0x736>
 802b06e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b070:	781b      	ldrb	r3, [r3, #0]
 802b072:	2bff      	cmp	r3, #255	@ 0xff
 802b074:	d107      	bne.n	802b086 <_vfprintf_r+0xa3e>
 802b076:	9b08      	ldr	r3, [sp, #32]
 802b078:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802b07a:	443b      	add	r3, r7
 802b07c:	fb02 9903 	mla	r9, r2, r3, r9
 802b080:	e67d      	b.n	802ad7e <_vfprintf_r+0x736>
 802b082:	46b1      	mov	r9, r6
 802b084:	e7de      	b.n	802b044 <_vfprintf_r+0x9fc>
 802b086:	42b3      	cmp	r3, r6
 802b088:	daf5      	bge.n	802b076 <_vfprintf_r+0xa2e>
 802b08a:	1af6      	subs	r6, r6, r3
 802b08c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b08e:	785b      	ldrb	r3, [r3, #1]
 802b090:	b133      	cbz	r3, 802b0a0 <_vfprintf_r+0xa58>
 802b092:	9b08      	ldr	r3, [sp, #32]
 802b094:	3301      	adds	r3, #1
 802b096:	9308      	str	r3, [sp, #32]
 802b098:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b09a:	3301      	adds	r3, #1
 802b09c:	9309      	str	r3, [sp, #36]	@ 0x24
 802b09e:	e7e6      	b.n	802b06e <_vfprintf_r+0xa26>
 802b0a0:	3701      	adds	r7, #1
 802b0a2:	e7e4      	b.n	802b06e <_vfprintf_r+0xa26>
 802b0a4:	9f08      	ldr	r7, [sp, #32]
 802b0a6:	e66a      	b.n	802ad7e <_vfprintf_r+0x736>
 802b0a8:	232d      	movs	r3, #45	@ 0x2d
 802b0aa:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802b0ae:	e66a      	b.n	802ad86 <_vfprintf_r+0x73e>
 802b0b0:	06af      	lsls	r7, r5, #26
 802b0b2:	d507      	bpl.n	802b0c4 <_vfprintf_r+0xa7c>
 802b0b4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802b0b6:	6833      	ldr	r3, [r6, #0]
 802b0b8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802b0ba:	17d2      	asrs	r2, r2, #31
 802b0bc:	e9c3 1200 	strd	r1, r2, [r3]
 802b0c0:	3604      	adds	r6, #4
 802b0c2:	e734      	b.n	802af2e <_vfprintf_r+0x8e6>
 802b0c4:	06e8      	lsls	r0, r5, #27
 802b0c6:	d503      	bpl.n	802b0d0 <_vfprintf_r+0xa88>
 802b0c8:	6833      	ldr	r3, [r6, #0]
 802b0ca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802b0cc:	601a      	str	r2, [r3, #0]
 802b0ce:	e7f7      	b.n	802b0c0 <_vfprintf_r+0xa78>
 802b0d0:	0669      	lsls	r1, r5, #25
 802b0d2:	d503      	bpl.n	802b0dc <_vfprintf_r+0xa94>
 802b0d4:	6833      	ldr	r3, [r6, #0]
 802b0d6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802b0d8:	801a      	strh	r2, [r3, #0]
 802b0da:	e7f1      	b.n	802b0c0 <_vfprintf_r+0xa78>
 802b0dc:	05aa      	lsls	r2, r5, #22
 802b0de:	d5f3      	bpl.n	802b0c8 <_vfprintf_r+0xa80>
 802b0e0:	6833      	ldr	r3, [r6, #0]
 802b0e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802b0e4:	701a      	strb	r2, [r3, #0]
 802b0e6:	e7eb      	b.n	802b0c0 <_vfprintf_r+0xa78>
 802b0e8:	f045 0510 	orr.w	r5, r5, #16
 802b0ec:	f015 0320 	ands.w	r3, r5, #32
 802b0f0:	d020      	beq.n	802b134 <_vfprintf_r+0xaec>
 802b0f2:	3607      	adds	r6, #7
 802b0f4:	f026 0307 	bic.w	r3, r6, #7
 802b0f8:	461a      	mov	r2, r3
 802b0fa:	685f      	ldr	r7, [r3, #4]
 802b0fc:	f852 6b08 	ldr.w	r6, [r2], #8
 802b100:	9207      	str	r2, [sp, #28]
 802b102:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 802b106:	2300      	movs	r3, #0
 802b108:	2200      	movs	r2, #0
 802b10a:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 802b10e:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 802b112:	f000 8491 	beq.w	802ba38 <_vfprintf_r+0x13f0>
 802b116:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 802b11a:	9208      	str	r2, [sp, #32]
 802b11c:	ea56 0207 	orrs.w	r2, r6, r7
 802b120:	f040 848f 	bne.w	802ba42 <_vfprintf_r+0x13fa>
 802b124:	f1b9 0f00 	cmp.w	r9, #0
 802b128:	f000 80db 	beq.w	802b2e2 <_vfprintf_r+0xc9a>
 802b12c:	2b01      	cmp	r3, #1
 802b12e:	f040 848b 	bne.w	802ba48 <_vfprintf_r+0x1400>
 802b132:	e083      	b.n	802b23c <_vfprintf_r+0xbf4>
 802b134:	4632      	mov	r2, r6
 802b136:	f015 0710 	ands.w	r7, r5, #16
 802b13a:	f852 6b04 	ldr.w	r6, [r2], #4
 802b13e:	9207      	str	r2, [sp, #28]
 802b140:	d001      	beq.n	802b146 <_vfprintf_r+0xafe>
 802b142:	461f      	mov	r7, r3
 802b144:	e7dd      	b.n	802b102 <_vfprintf_r+0xaba>
 802b146:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 802b14a:	d001      	beq.n	802b150 <_vfprintf_r+0xb08>
 802b14c:	b2b6      	uxth	r6, r6
 802b14e:	e7d8      	b.n	802b102 <_vfprintf_r+0xaba>
 802b150:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 802b154:	d0d5      	beq.n	802b102 <_vfprintf_r+0xaba>
 802b156:	b2f6      	uxtb	r6, r6
 802b158:	e7f3      	b.n	802b142 <_vfprintf_r+0xafa>
 802b15a:	4633      	mov	r3, r6
 802b15c:	2278      	movs	r2, #120	@ 0x78
 802b15e:	f853 6b04 	ldr.w	r6, [r3], #4
 802b162:	9307      	str	r3, [sp, #28]
 802b164:	f647 0330 	movw	r3, #30768	@ 0x7830
 802b168:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 802b16c:	4b93      	ldr	r3, [pc, #588]	@ (802b3bc <_vfprintf_r+0xd74>)
 802b16e:	9319      	str	r3, [sp, #100]	@ 0x64
 802b170:	2700      	movs	r7, #0
 802b172:	f045 0502 	orr.w	r5, r5, #2
 802b176:	2302      	movs	r3, #2
 802b178:	9206      	str	r2, [sp, #24]
 802b17a:	e7c5      	b.n	802b108 <_vfprintf_r+0xac0>
 802b17c:	4633      	mov	r3, r6
 802b17e:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 802b182:	f853 8b04 	ldr.w	r8, [r3], #4
 802b186:	9307      	str	r3, [sp, #28]
 802b188:	f04f 0600 	mov.w	r6, #0
 802b18c:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 802b190:	d00f      	beq.n	802b1b2 <_vfprintf_r+0xb6a>
 802b192:	464a      	mov	r2, r9
 802b194:	4631      	mov	r1, r6
 802b196:	4640      	mov	r0, r8
 802b198:	f7e5 f832 	bl	8010200 <memchr>
 802b19c:	4682      	mov	sl, r0
 802b19e:	2800      	cmp	r0, #0
 802b1a0:	f43f ac7a 	beq.w	802aa98 <_vfprintf_r+0x450>
 802b1a4:	eba0 0908 	sub.w	r9, r0, r8
 802b1a8:	46b2      	mov	sl, r6
 802b1aa:	9610      	str	r6, [sp, #64]	@ 0x40
 802b1ac:	4637      	mov	r7, r6
 802b1ae:	9608      	str	r6, [sp, #32]
 802b1b0:	e5ec      	b.n	802ad8c <_vfprintf_r+0x744>
 802b1b2:	4640      	mov	r0, r8
 802b1b4:	f7e5 f874 	bl	80102a0 <strlen>
 802b1b8:	46b2      	mov	sl, r6
 802b1ba:	4681      	mov	r9, r0
 802b1bc:	e46c      	b.n	802aa98 <_vfprintf_r+0x450>
 802b1be:	f045 0510 	orr.w	r5, r5, #16
 802b1c2:	f015 0320 	ands.w	r3, r5, #32
 802b1c6:	d009      	beq.n	802b1dc <_vfprintf_r+0xb94>
 802b1c8:	3607      	adds	r6, #7
 802b1ca:	f026 0307 	bic.w	r3, r6, #7
 802b1ce:	461a      	mov	r2, r3
 802b1d0:	685f      	ldr	r7, [r3, #4]
 802b1d2:	f852 6b08 	ldr.w	r6, [r2], #8
 802b1d6:	9207      	str	r2, [sp, #28]
 802b1d8:	2301      	movs	r3, #1
 802b1da:	e795      	b.n	802b108 <_vfprintf_r+0xac0>
 802b1dc:	4632      	mov	r2, r6
 802b1de:	f015 0710 	ands.w	r7, r5, #16
 802b1e2:	f852 6b04 	ldr.w	r6, [r2], #4
 802b1e6:	9207      	str	r2, [sp, #28]
 802b1e8:	d001      	beq.n	802b1ee <_vfprintf_r+0xba6>
 802b1ea:	461f      	mov	r7, r3
 802b1ec:	e7f4      	b.n	802b1d8 <_vfprintf_r+0xb90>
 802b1ee:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 802b1f2:	d001      	beq.n	802b1f8 <_vfprintf_r+0xbb0>
 802b1f4:	b2b6      	uxth	r6, r6
 802b1f6:	e7ef      	b.n	802b1d8 <_vfprintf_r+0xb90>
 802b1f8:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 802b1fc:	d0ec      	beq.n	802b1d8 <_vfprintf_r+0xb90>
 802b1fe:	b2f6      	uxtb	r6, r6
 802b200:	e7f3      	b.n	802b1ea <_vfprintf_r+0xba2>
 802b202:	4b6f      	ldr	r3, [pc, #444]	@ (802b3c0 <_vfprintf_r+0xd78>)
 802b204:	f7ff bb33 	b.w	802a86e <_vfprintf_r+0x226>
 802b208:	4632      	mov	r2, r6
 802b20a:	f015 0710 	ands.w	r7, r5, #16
 802b20e:	f852 6b04 	ldr.w	r6, [r2], #4
 802b212:	9207      	str	r2, [sp, #28]
 802b214:	d002      	beq.n	802b21c <_vfprintf_r+0xbd4>
 802b216:	461f      	mov	r7, r3
 802b218:	f7ff bb36 	b.w	802a888 <_vfprintf_r+0x240>
 802b21c:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 802b220:	d002      	beq.n	802b228 <_vfprintf_r+0xbe0>
 802b222:	b2b6      	uxth	r6, r6
 802b224:	f7ff bb30 	b.w	802a888 <_vfprintf_r+0x240>
 802b228:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 802b22c:	f43f ab2c 	beq.w	802a888 <_vfprintf_r+0x240>
 802b230:	b2f6      	uxtb	r6, r6
 802b232:	e7f0      	b.n	802b216 <_vfprintf_r+0xbce>
 802b234:	2e0a      	cmp	r6, #10
 802b236:	f177 0300 	sbcs.w	r3, r7, #0
 802b23a:	d207      	bcs.n	802b24c <_vfprintf_r+0xc04>
 802b23c:	3630      	adds	r6, #48	@ 0x30
 802b23e:	b2f6      	uxtb	r6, r6
 802b240:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 802b244:	f20d 1847 	addw	r8, sp, #327	@ 0x147
 802b248:	f000 bc1a 	b.w	802ba80 <_vfprintf_r+0x1438>
 802b24c:	2300      	movs	r3, #0
 802b24e:	9304      	str	r3, [sp, #16]
 802b250:	9b08      	ldr	r3, [sp, #32]
 802b252:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 802b256:	ad52      	add	r5, sp, #328	@ 0x148
 802b258:	9310      	str	r3, [sp, #64]	@ 0x40
 802b25a:	220a      	movs	r2, #10
 802b25c:	2300      	movs	r3, #0
 802b25e:	4630      	mov	r0, r6
 802b260:	4639      	mov	r1, r7
 802b262:	f7e5 fd79 	bl	8010d58 <__aeabi_uldivmod>
 802b266:	9b04      	ldr	r3, [sp, #16]
 802b268:	9011      	str	r0, [sp, #68]	@ 0x44
 802b26a:	3301      	adds	r3, #1
 802b26c:	9304      	str	r3, [sp, #16]
 802b26e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802b270:	3230      	adds	r2, #48	@ 0x30
 802b272:	468a      	mov	sl, r1
 802b274:	f105 38ff 	add.w	r8, r5, #4294967295	@ 0xffffffff
 802b278:	f805 2c01 	strb.w	r2, [r5, #-1]
 802b27c:	b1d3      	cbz	r3, 802b2b4 <_vfprintf_r+0xc6c>
 802b27e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b280:	9a04      	ldr	r2, [sp, #16]
 802b282:	781b      	ldrb	r3, [r3, #0]
 802b284:	429a      	cmp	r2, r3
 802b286:	d115      	bne.n	802b2b4 <_vfprintf_r+0xc6c>
 802b288:	2aff      	cmp	r2, #255	@ 0xff
 802b28a:	d013      	beq.n	802b2b4 <_vfprintf_r+0xc6c>
 802b28c:	2e0a      	cmp	r6, #10
 802b28e:	f177 0300 	sbcs.w	r3, r7, #0
 802b292:	d30f      	bcc.n	802b2b4 <_vfprintf_r+0xc6c>
 802b294:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802b296:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 802b298:	eba8 0803 	sub.w	r8, r8, r3
 802b29c:	461a      	mov	r2, r3
 802b29e:	4640      	mov	r0, r8
 802b2a0:	f001 ff25 	bl	802d0ee <strncpy>
 802b2a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b2a6:	785b      	ldrb	r3, [r3, #1]
 802b2a8:	b11b      	cbz	r3, 802b2b2 <_vfprintf_r+0xc6a>
 802b2aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b2ac:	3301      	adds	r3, #1
 802b2ae:	9309      	str	r3, [sp, #36]	@ 0x24
 802b2b0:	2300      	movs	r3, #0
 802b2b2:	9304      	str	r3, [sp, #16]
 802b2b4:	2e0a      	cmp	r6, #10
 802b2b6:	f177 0700 	sbcs.w	r7, r7, #0
 802b2ba:	f0c0 83e1 	bcc.w	802ba80 <_vfprintf_r+0x1438>
 802b2be:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 802b2c0:	4657      	mov	r7, sl
 802b2c2:	4645      	mov	r5, r8
 802b2c4:	e7c9      	b.n	802b25a <_vfprintf_r+0xc12>
 802b2c6:	f006 030f 	and.w	r3, r6, #15
 802b2ca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802b2cc:	0936      	lsrs	r6, r6, #4
 802b2ce:	5cd3      	ldrb	r3, [r2, r3]
 802b2d0:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802b2d4:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 802b2d8:	093f      	lsrs	r7, r7, #4
 802b2da:	ea56 0307 	orrs.w	r3, r6, r7
 802b2de:	d1f2      	bne.n	802b2c6 <_vfprintf_r+0xc7e>
 802b2e0:	e3ce      	b.n	802ba80 <_vfprintf_r+0x1438>
 802b2e2:	b91b      	cbnz	r3, 802b2ec <_vfprintf_r+0xca4>
 802b2e4:	07ed      	lsls	r5, r5, #31
 802b2e6:	d501      	bpl.n	802b2ec <_vfprintf_r+0xca4>
 802b2e8:	2630      	movs	r6, #48	@ 0x30
 802b2ea:	e7a9      	b.n	802b240 <_vfprintf_r+0xbf8>
 802b2ec:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 802b2f0:	e3c6      	b.n	802ba80 <_vfprintf_r+0x1438>
 802b2f2:	9b06      	ldr	r3, [sp, #24]
 802b2f4:	2b00      	cmp	r3, #0
 802b2f6:	f000 8390 	beq.w	802ba1a <_vfprintf_r+0x13d2>
 802b2fa:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 802b2fe:	2300      	movs	r3, #0
 802b300:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802b304:	9607      	str	r6, [sp, #28]
 802b306:	f7ff bb5c 	b.w	802a9c2 <_vfprintf_r+0x37a>
 802b30a:	2010      	movs	r0, #16
 802b30c:	4403      	add	r3, r0
 802b30e:	2a07      	cmp	r2, #7
 802b310:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802b314:	6060      	str	r0, [r4, #4]
 802b316:	dd08      	ble.n	802b32a <_vfprintf_r+0xce2>
 802b318:	9803      	ldr	r0, [sp, #12]
 802b31a:	aa26      	add	r2, sp, #152	@ 0x98
 802b31c:	4659      	mov	r1, fp
 802b31e:	f000 fbff 	bl	802bb20 <__sprint_r>
 802b322:	2800      	cmp	r0, #0
 802b324:	f040 8357 	bne.w	802b9d6 <_vfprintf_r+0x138e>
 802b328:	a929      	add	r1, sp, #164	@ 0xa4
 802b32a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802b32c:	3b10      	subs	r3, #16
 802b32e:	9313      	str	r3, [sp, #76]	@ 0x4c
 802b330:	460c      	mov	r4, r1
 802b332:	e547      	b.n	802adc4 <_vfprintf_r+0x77c>
 802b334:	460c      	mov	r4, r1
 802b336:	e562      	b.n	802adfe <_vfprintf_r+0x7b6>
 802b338:	9803      	ldr	r0, [sp, #12]
 802b33a:	aa26      	add	r2, sp, #152	@ 0x98
 802b33c:	4659      	mov	r1, fp
 802b33e:	f000 fbef 	bl	802bb20 <__sprint_r>
 802b342:	2800      	cmp	r0, #0
 802b344:	f040 8347 	bne.w	802b9d6 <_vfprintf_r+0x138e>
 802b348:	ac29      	add	r4, sp, #164	@ 0xa4
 802b34a:	e56a      	b.n	802ae22 <_vfprintf_r+0x7da>
 802b34c:	9803      	ldr	r0, [sp, #12]
 802b34e:	aa26      	add	r2, sp, #152	@ 0x98
 802b350:	4659      	mov	r1, fp
 802b352:	f000 fbe5 	bl	802bb20 <__sprint_r>
 802b356:	2800      	cmp	r0, #0
 802b358:	f040 833d 	bne.w	802b9d6 <_vfprintf_r+0x138e>
 802b35c:	ac29      	add	r4, sp, #164	@ 0xa4
 802b35e:	e570      	b.n	802ae42 <_vfprintf_r+0x7fa>
 802b360:	2010      	movs	r0, #16
 802b362:	4403      	add	r3, r0
 802b364:	2a07      	cmp	r2, #7
 802b366:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802b36a:	6060      	str	r0, [r4, #4]
 802b36c:	dd08      	ble.n	802b380 <_vfprintf_r+0xd38>
 802b36e:	9803      	ldr	r0, [sp, #12]
 802b370:	aa26      	add	r2, sp, #152	@ 0x98
 802b372:	4659      	mov	r1, fp
 802b374:	f000 fbd4 	bl	802bb20 <__sprint_r>
 802b378:	2800      	cmp	r0, #0
 802b37a:	f040 832c 	bne.w	802b9d6 <_vfprintf_r+0x138e>
 802b37e:	a929      	add	r1, sp, #164	@ 0xa4
 802b380:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802b382:	3b10      	subs	r3, #16
 802b384:	9313      	str	r3, [sp, #76]	@ 0x4c
 802b386:	460c      	mov	r4, r1
 802b388:	e564      	b.n	802ae54 <_vfprintf_r+0x80c>
 802b38a:	460c      	mov	r4, r1
 802b38c:	e57f      	b.n	802ae8e <_vfprintf_r+0x846>
 802b38e:	2010      	movs	r0, #16
 802b390:	4403      	add	r3, r0
 802b392:	2a07      	cmp	r2, #7
 802b394:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802b398:	6060      	str	r0, [r4, #4]
 802b39a:	dd08      	ble.n	802b3ae <_vfprintf_r+0xd66>
 802b39c:	9803      	ldr	r0, [sp, #12]
 802b39e:	aa26      	add	r2, sp, #152	@ 0x98
 802b3a0:	4659      	mov	r1, fp
 802b3a2:	f000 fbbd 	bl	802bb20 <__sprint_r>
 802b3a6:	2800      	cmp	r0, #0
 802b3a8:	f040 8315 	bne.w	802b9d6 <_vfprintf_r+0x138e>
 802b3ac:	a929      	add	r1, sp, #164	@ 0xa4
 802b3ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802b3b0:	3b10      	subs	r3, #16
 802b3b2:	9310      	str	r3, [sp, #64]	@ 0x40
 802b3b4:	460c      	mov	r4, r1
 802b3b6:	e570      	b.n	802ae9a <_vfprintf_r+0x852>
 802b3b8:	460c      	mov	r4, r1
 802b3ba:	e58b      	b.n	802aed4 <_vfprintf_r+0x88c>
 802b3bc:	0803c44b 	.word	0x0803c44b
 802b3c0:	0803c45c 	.word	0x0803c45c
 802b3c4:	9b06      	ldr	r3, [sp, #24]
 802b3c6:	2b65      	cmp	r3, #101	@ 0x65
 802b3c8:	f340 8245 	ble.w	802b856 <_vfprintf_r+0x120e>
 802b3cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802b3d0:	2200      	movs	r2, #0
 802b3d2:	2300      	movs	r3, #0
 802b3d4:	f7e5 fb90 	bl	8010af8 <__aeabi_dcmpeq>
 802b3d8:	2800      	cmp	r0, #0
 802b3da:	d06a      	beq.n	802b4b2 <_vfprintf_r+0xe6a>
 802b3dc:	4b73      	ldr	r3, [pc, #460]	@ (802b5ac <_vfprintf_r+0xf64>)
 802b3de:	6023      	str	r3, [r4, #0]
 802b3e0:	2301      	movs	r3, #1
 802b3e2:	6063      	str	r3, [r4, #4]
 802b3e4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802b3e6:	3301      	adds	r3, #1
 802b3e8:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b3ea:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b3ec:	3301      	adds	r3, #1
 802b3ee:	2b07      	cmp	r3, #7
 802b3f0:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b3f2:	dc37      	bgt.n	802b464 <_vfprintf_r+0xe1c>
 802b3f4:	3408      	adds	r4, #8
 802b3f6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802b3f8:	9a04      	ldr	r2, [sp, #16]
 802b3fa:	4293      	cmp	r3, r2
 802b3fc:	db02      	blt.n	802b404 <_vfprintf_r+0xdbc>
 802b3fe:	07e9      	lsls	r1, r5, #31
 802b400:	f57f ad78 	bpl.w	802aef4 <_vfprintf_r+0x8ac>
 802b404:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802b406:	6023      	str	r3, [r4, #0]
 802b408:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802b40a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802b40c:	6063      	str	r3, [r4, #4]
 802b40e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b410:	4413      	add	r3, r2
 802b412:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b414:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b416:	3301      	adds	r3, #1
 802b418:	2b07      	cmp	r3, #7
 802b41a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b41c:	dc2c      	bgt.n	802b478 <_vfprintf_r+0xe30>
 802b41e:	3408      	adds	r4, #8
 802b420:	9b04      	ldr	r3, [sp, #16]
 802b422:	1e5e      	subs	r6, r3, #1
 802b424:	2e00      	cmp	r6, #0
 802b426:	f77f ad65 	ble.w	802aef4 <_vfprintf_r+0x8ac>
 802b42a:	4f61      	ldr	r7, [pc, #388]	@ (802b5b0 <_vfprintf_r+0xf68>)
 802b42c:	f04f 0810 	mov.w	r8, #16
 802b430:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802b434:	2e10      	cmp	r6, #16
 802b436:	f103 0301 	add.w	r3, r3, #1
 802b43a:	f104 0108 	add.w	r1, r4, #8
 802b43e:	6027      	str	r7, [r4, #0]
 802b440:	dc24      	bgt.n	802b48c <_vfprintf_r+0xe44>
 802b442:	6066      	str	r6, [r4, #4]
 802b444:	2b07      	cmp	r3, #7
 802b446:	4416      	add	r6, r2
 802b448:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 802b44c:	f340 82a2 	ble.w	802b994 <_vfprintf_r+0x134c>
 802b450:	9803      	ldr	r0, [sp, #12]
 802b452:	aa26      	add	r2, sp, #152	@ 0x98
 802b454:	4659      	mov	r1, fp
 802b456:	f000 fb63 	bl	802bb20 <__sprint_r>
 802b45a:	2800      	cmp	r0, #0
 802b45c:	f040 82bb 	bne.w	802b9d6 <_vfprintf_r+0x138e>
 802b460:	ac29      	add	r4, sp, #164	@ 0xa4
 802b462:	e547      	b.n	802aef4 <_vfprintf_r+0x8ac>
 802b464:	9803      	ldr	r0, [sp, #12]
 802b466:	aa26      	add	r2, sp, #152	@ 0x98
 802b468:	4659      	mov	r1, fp
 802b46a:	f000 fb59 	bl	802bb20 <__sprint_r>
 802b46e:	2800      	cmp	r0, #0
 802b470:	f040 82b1 	bne.w	802b9d6 <_vfprintf_r+0x138e>
 802b474:	ac29      	add	r4, sp, #164	@ 0xa4
 802b476:	e7be      	b.n	802b3f6 <_vfprintf_r+0xdae>
 802b478:	9803      	ldr	r0, [sp, #12]
 802b47a:	aa26      	add	r2, sp, #152	@ 0x98
 802b47c:	4659      	mov	r1, fp
 802b47e:	f000 fb4f 	bl	802bb20 <__sprint_r>
 802b482:	2800      	cmp	r0, #0
 802b484:	f040 82a7 	bne.w	802b9d6 <_vfprintf_r+0x138e>
 802b488:	ac29      	add	r4, sp, #164	@ 0xa4
 802b48a:	e7c9      	b.n	802b420 <_vfprintf_r+0xdd8>
 802b48c:	3210      	adds	r2, #16
 802b48e:	2b07      	cmp	r3, #7
 802b490:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802b494:	f8c4 8004 	str.w	r8, [r4, #4]
 802b498:	dd08      	ble.n	802b4ac <_vfprintf_r+0xe64>
 802b49a:	9803      	ldr	r0, [sp, #12]
 802b49c:	aa26      	add	r2, sp, #152	@ 0x98
 802b49e:	4659      	mov	r1, fp
 802b4a0:	f000 fb3e 	bl	802bb20 <__sprint_r>
 802b4a4:	2800      	cmp	r0, #0
 802b4a6:	f040 8296 	bne.w	802b9d6 <_vfprintf_r+0x138e>
 802b4aa:	a929      	add	r1, sp, #164	@ 0xa4
 802b4ac:	3e10      	subs	r6, #16
 802b4ae:	460c      	mov	r4, r1
 802b4b0:	e7be      	b.n	802b430 <_vfprintf_r+0xde8>
 802b4b2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802b4b4:	2b00      	cmp	r3, #0
 802b4b6:	dc7d      	bgt.n	802b5b4 <_vfprintf_r+0xf6c>
 802b4b8:	4b3c      	ldr	r3, [pc, #240]	@ (802b5ac <_vfprintf_r+0xf64>)
 802b4ba:	6023      	str	r3, [r4, #0]
 802b4bc:	2301      	movs	r3, #1
 802b4be:	6063      	str	r3, [r4, #4]
 802b4c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802b4c2:	3301      	adds	r3, #1
 802b4c4:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b4c6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b4c8:	3301      	adds	r3, #1
 802b4ca:	2b07      	cmp	r3, #7
 802b4cc:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b4ce:	dc46      	bgt.n	802b55e <_vfprintf_r+0xf16>
 802b4d0:	3408      	adds	r4, #8
 802b4d2:	9904      	ldr	r1, [sp, #16]
 802b4d4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802b4d6:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 802b4d8:	430b      	orrs	r3, r1
 802b4da:	f005 0101 	and.w	r1, r5, #1
 802b4de:	430b      	orrs	r3, r1
 802b4e0:	f43f ad08 	beq.w	802aef4 <_vfprintf_r+0x8ac>
 802b4e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802b4e6:	6023      	str	r3, [r4, #0]
 802b4e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802b4ea:	6063      	str	r3, [r4, #4]
 802b4ec:	441a      	add	r2, r3
 802b4ee:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b4f0:	9228      	str	r2, [sp, #160]	@ 0xa0
 802b4f2:	3301      	adds	r3, #1
 802b4f4:	2b07      	cmp	r3, #7
 802b4f6:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b4f8:	dc3b      	bgt.n	802b572 <_vfprintf_r+0xf2a>
 802b4fa:	f104 0308 	add.w	r3, r4, #8
 802b4fe:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802b500:	2e00      	cmp	r6, #0
 802b502:	da1b      	bge.n	802b53c <_vfprintf_r+0xef4>
 802b504:	4f2a      	ldr	r7, [pc, #168]	@ (802b5b0 <_vfprintf_r+0xf68>)
 802b506:	4276      	negs	r6, r6
 802b508:	461a      	mov	r2, r3
 802b50a:	2410      	movs	r4, #16
 802b50c:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 802b510:	2e10      	cmp	r6, #16
 802b512:	f101 0101 	add.w	r1, r1, #1
 802b516:	f103 0308 	add.w	r3, r3, #8
 802b51a:	6017      	str	r7, [r2, #0]
 802b51c:	dc33      	bgt.n	802b586 <_vfprintf_r+0xf3e>
 802b51e:	6056      	str	r6, [r2, #4]
 802b520:	2907      	cmp	r1, #7
 802b522:	4406      	add	r6, r0
 802b524:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 802b528:	dd08      	ble.n	802b53c <_vfprintf_r+0xef4>
 802b52a:	9803      	ldr	r0, [sp, #12]
 802b52c:	aa26      	add	r2, sp, #152	@ 0x98
 802b52e:	4659      	mov	r1, fp
 802b530:	f000 faf6 	bl	802bb20 <__sprint_r>
 802b534:	2800      	cmp	r0, #0
 802b536:	f040 824e 	bne.w	802b9d6 <_vfprintf_r+0x138e>
 802b53a:	ab29      	add	r3, sp, #164	@ 0xa4
 802b53c:	9a04      	ldr	r2, [sp, #16]
 802b53e:	9904      	ldr	r1, [sp, #16]
 802b540:	605a      	str	r2, [r3, #4]
 802b542:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 802b544:	f8c3 8000 	str.w	r8, [r3]
 802b548:	440a      	add	r2, r1
 802b54a:	9228      	str	r2, [sp, #160]	@ 0xa0
 802b54c:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 802b54e:	3201      	adds	r2, #1
 802b550:	2a07      	cmp	r2, #7
 802b552:	9227      	str	r2, [sp, #156]	@ 0x9c
 802b554:	f73f af7c 	bgt.w	802b450 <_vfprintf_r+0xe08>
 802b558:	f103 0408 	add.w	r4, r3, #8
 802b55c:	e4ca      	b.n	802aef4 <_vfprintf_r+0x8ac>
 802b55e:	9803      	ldr	r0, [sp, #12]
 802b560:	aa26      	add	r2, sp, #152	@ 0x98
 802b562:	4659      	mov	r1, fp
 802b564:	f000 fadc 	bl	802bb20 <__sprint_r>
 802b568:	2800      	cmp	r0, #0
 802b56a:	f040 8234 	bne.w	802b9d6 <_vfprintf_r+0x138e>
 802b56e:	ac29      	add	r4, sp, #164	@ 0xa4
 802b570:	e7af      	b.n	802b4d2 <_vfprintf_r+0xe8a>
 802b572:	9803      	ldr	r0, [sp, #12]
 802b574:	aa26      	add	r2, sp, #152	@ 0x98
 802b576:	4659      	mov	r1, fp
 802b578:	f000 fad2 	bl	802bb20 <__sprint_r>
 802b57c:	2800      	cmp	r0, #0
 802b57e:	f040 822a 	bne.w	802b9d6 <_vfprintf_r+0x138e>
 802b582:	ab29      	add	r3, sp, #164	@ 0xa4
 802b584:	e7bb      	b.n	802b4fe <_vfprintf_r+0xeb6>
 802b586:	3010      	adds	r0, #16
 802b588:	2907      	cmp	r1, #7
 802b58a:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 802b58e:	6054      	str	r4, [r2, #4]
 802b590:	dd08      	ble.n	802b5a4 <_vfprintf_r+0xf5c>
 802b592:	9803      	ldr	r0, [sp, #12]
 802b594:	aa26      	add	r2, sp, #152	@ 0x98
 802b596:	4659      	mov	r1, fp
 802b598:	f000 fac2 	bl	802bb20 <__sprint_r>
 802b59c:	2800      	cmp	r0, #0
 802b59e:	f040 821a 	bne.w	802b9d6 <_vfprintf_r+0x138e>
 802b5a2:	ab29      	add	r3, sp, #164	@ 0xa4
 802b5a4:	3e10      	subs	r6, #16
 802b5a6:	461a      	mov	r2, r3
 802b5a8:	e7b0      	b.n	802b50c <_vfprintf_r+0xec4>
 802b5aa:	bf00      	nop
 802b5ac:	0803c46d 	.word	0x0803c46d
 802b5b0:	0803c46f 	.word	0x0803c46f
 802b5b4:	9b04      	ldr	r3, [sp, #16]
 802b5b6:	4443      	add	r3, r8
 802b5b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 802b5ba:	9b04      	ldr	r3, [sp, #16]
 802b5bc:	42b3      	cmp	r3, r6
 802b5be:	bfa8      	it	ge
 802b5c0:	4633      	movge	r3, r6
 802b5c2:	2b00      	cmp	r3, #0
 802b5c4:	4699      	mov	r9, r3
 802b5c6:	dd0b      	ble.n	802b5e0 <_vfprintf_r+0xf98>
 802b5c8:	e9c4 8300 	strd	r8, r3, [r4]
 802b5cc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802b5ce:	444b      	add	r3, r9
 802b5d0:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b5d2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b5d4:	3301      	adds	r3, #1
 802b5d6:	2b07      	cmp	r3, #7
 802b5d8:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b5da:	f300 8089 	bgt.w	802b6f0 <_vfprintf_r+0x10a8>
 802b5de:	3408      	adds	r4, #8
 802b5e0:	f1b9 0f00 	cmp.w	r9, #0
 802b5e4:	bfac      	ite	ge
 802b5e6:	eba6 0309 	subge.w	r3, r6, r9
 802b5ea:	4633      	movlt	r3, r6
 802b5ec:	2b00      	cmp	r3, #0
 802b5ee:	9306      	str	r3, [sp, #24]
 802b5f0:	dd1c      	ble.n	802b62c <_vfprintf_r+0xfe4>
 802b5f2:	f8df 9364 	ldr.w	r9, [pc, #868]	@ 802b958 <_vfprintf_r+0x1310>
 802b5f6:	9806      	ldr	r0, [sp, #24]
 802b5f8:	f8c4 9000 	str.w	r9, [r4]
 802b5fc:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802b600:	2810      	cmp	r0, #16
 802b602:	f102 0201 	add.w	r2, r2, #1
 802b606:	f104 0108 	add.w	r1, r4, #8
 802b60a:	dc7b      	bgt.n	802b704 <_vfprintf_r+0x10bc>
 802b60c:	4403      	add	r3, r0
 802b60e:	2a07      	cmp	r2, #7
 802b610:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802b614:	6060      	str	r0, [r4, #4]
 802b616:	f340 808a 	ble.w	802b72e <_vfprintf_r+0x10e6>
 802b61a:	9803      	ldr	r0, [sp, #12]
 802b61c:	aa26      	add	r2, sp, #152	@ 0x98
 802b61e:	4659      	mov	r1, fp
 802b620:	f000 fa7e 	bl	802bb20 <__sprint_r>
 802b624:	2800      	cmp	r0, #0
 802b626:	f040 81d6 	bne.w	802b9d6 <_vfprintf_r+0x138e>
 802b62a:	ac29      	add	r4, sp, #164	@ 0xa4
 802b62c:	056a      	lsls	r2, r5, #21
 802b62e:	44b0      	add	r8, r6
 802b630:	d508      	bpl.n	802b644 <_vfprintf_r+0xffc>
 802b632:	9b08      	ldr	r3, [sp, #32]
 802b634:	2b00      	cmp	r3, #0
 802b636:	d17c      	bne.n	802b732 <_vfprintf_r+0x10ea>
 802b638:	2f00      	cmp	r7, #0
 802b63a:	d17c      	bne.n	802b736 <_vfprintf_r+0x10ee>
 802b63c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802b63e:	4598      	cmp	r8, r3
 802b640:	bf28      	it	cs
 802b642:	4698      	movcs	r8, r3
 802b644:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802b646:	9a04      	ldr	r2, [sp, #16]
 802b648:	4293      	cmp	r3, r2
 802b64a:	db01      	blt.n	802b650 <_vfprintf_r+0x1008>
 802b64c:	07eb      	lsls	r3, r5, #31
 802b64e:	d50e      	bpl.n	802b66e <_vfprintf_r+0x1026>
 802b650:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802b652:	6023      	str	r3, [r4, #0]
 802b654:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802b656:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802b658:	6063      	str	r3, [r4, #4]
 802b65a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b65c:	4413      	add	r3, r2
 802b65e:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b660:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b662:	3301      	adds	r3, #1
 802b664:	2b07      	cmp	r3, #7
 802b666:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b668:	f300 80e1 	bgt.w	802b82e <_vfprintf_r+0x11e6>
 802b66c:	3408      	adds	r4, #8
 802b66e:	9b04      	ldr	r3, [sp, #16]
 802b670:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 802b672:	1bdf      	subs	r7, r3, r7
 802b674:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802b676:	eba3 0308 	sub.w	r3, r3, r8
 802b67a:	429f      	cmp	r7, r3
 802b67c:	bfa8      	it	ge
 802b67e:	461f      	movge	r7, r3
 802b680:	2f00      	cmp	r7, #0
 802b682:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b684:	dd0a      	ble.n	802b69c <_vfprintf_r+0x1054>
 802b686:	443b      	add	r3, r7
 802b688:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b68a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b68c:	3301      	adds	r3, #1
 802b68e:	2b07      	cmp	r3, #7
 802b690:	e9c4 8700 	strd	r8, r7, [r4]
 802b694:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b696:	f300 80d4 	bgt.w	802b842 <_vfprintf_r+0x11fa>
 802b69a:	3408      	adds	r4, #8
 802b69c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802b69e:	9b04      	ldr	r3, [sp, #16]
 802b6a0:	2f00      	cmp	r7, #0
 802b6a2:	eba3 0606 	sub.w	r6, r3, r6
 802b6a6:	bfa8      	it	ge
 802b6a8:	1bf6      	subge	r6, r6, r7
 802b6aa:	2e00      	cmp	r6, #0
 802b6ac:	f77f ac22 	ble.w	802aef4 <_vfprintf_r+0x8ac>
 802b6b0:	4fa9      	ldr	r7, [pc, #676]	@ (802b958 <_vfprintf_r+0x1310>)
 802b6b2:	f04f 0810 	mov.w	r8, #16
 802b6b6:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802b6ba:	2e10      	cmp	r6, #16
 802b6bc:	f103 0301 	add.w	r3, r3, #1
 802b6c0:	f104 0108 	add.w	r1, r4, #8
 802b6c4:	6027      	str	r7, [r4, #0]
 802b6c6:	f77f aebc 	ble.w	802b442 <_vfprintf_r+0xdfa>
 802b6ca:	3210      	adds	r2, #16
 802b6cc:	2b07      	cmp	r3, #7
 802b6ce:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802b6d2:	f8c4 8004 	str.w	r8, [r4, #4]
 802b6d6:	dd08      	ble.n	802b6ea <_vfprintf_r+0x10a2>
 802b6d8:	9803      	ldr	r0, [sp, #12]
 802b6da:	aa26      	add	r2, sp, #152	@ 0x98
 802b6dc:	4659      	mov	r1, fp
 802b6de:	f000 fa1f 	bl	802bb20 <__sprint_r>
 802b6e2:	2800      	cmp	r0, #0
 802b6e4:	f040 8177 	bne.w	802b9d6 <_vfprintf_r+0x138e>
 802b6e8:	a929      	add	r1, sp, #164	@ 0xa4
 802b6ea:	3e10      	subs	r6, #16
 802b6ec:	460c      	mov	r4, r1
 802b6ee:	e7e2      	b.n	802b6b6 <_vfprintf_r+0x106e>
 802b6f0:	9803      	ldr	r0, [sp, #12]
 802b6f2:	aa26      	add	r2, sp, #152	@ 0x98
 802b6f4:	4659      	mov	r1, fp
 802b6f6:	f000 fa13 	bl	802bb20 <__sprint_r>
 802b6fa:	2800      	cmp	r0, #0
 802b6fc:	f040 816b 	bne.w	802b9d6 <_vfprintf_r+0x138e>
 802b700:	ac29      	add	r4, sp, #164	@ 0xa4
 802b702:	e76d      	b.n	802b5e0 <_vfprintf_r+0xf98>
 802b704:	2010      	movs	r0, #16
 802b706:	4403      	add	r3, r0
 802b708:	2a07      	cmp	r2, #7
 802b70a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802b70e:	6060      	str	r0, [r4, #4]
 802b710:	dd08      	ble.n	802b724 <_vfprintf_r+0x10dc>
 802b712:	9803      	ldr	r0, [sp, #12]
 802b714:	aa26      	add	r2, sp, #152	@ 0x98
 802b716:	4659      	mov	r1, fp
 802b718:	f000 fa02 	bl	802bb20 <__sprint_r>
 802b71c:	2800      	cmp	r0, #0
 802b71e:	f040 815a 	bne.w	802b9d6 <_vfprintf_r+0x138e>
 802b722:	a929      	add	r1, sp, #164	@ 0xa4
 802b724:	9b06      	ldr	r3, [sp, #24]
 802b726:	3b10      	subs	r3, #16
 802b728:	9306      	str	r3, [sp, #24]
 802b72a:	460c      	mov	r4, r1
 802b72c:	e763      	b.n	802b5f6 <_vfprintf_r+0xfae>
 802b72e:	460c      	mov	r4, r1
 802b730:	e77c      	b.n	802b62c <_vfprintf_r+0xfe4>
 802b732:	2f00      	cmp	r7, #0
 802b734:	d04b      	beq.n	802b7ce <_vfprintf_r+0x1186>
 802b736:	3f01      	subs	r7, #1
 802b738:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802b73a:	6023      	str	r3, [r4, #0]
 802b73c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802b73e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802b740:	6063      	str	r3, [r4, #4]
 802b742:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b744:	4413      	add	r3, r2
 802b746:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b748:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b74a:	3301      	adds	r3, #1
 802b74c:	2b07      	cmp	r3, #7
 802b74e:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b750:	dc44      	bgt.n	802b7dc <_vfprintf_r+0x1194>
 802b752:	3408      	adds	r4, #8
 802b754:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b756:	f893 9000 	ldrb.w	r9, [r3]
 802b75a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802b75c:	eba3 0308 	sub.w	r3, r3, r8
 802b760:	4599      	cmp	r9, r3
 802b762:	bfa8      	it	ge
 802b764:	4699      	movge	r9, r3
 802b766:	f1b9 0f00 	cmp.w	r9, #0
 802b76a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b76c:	dd09      	ble.n	802b782 <_vfprintf_r+0x113a>
 802b76e:	444b      	add	r3, r9
 802b770:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b772:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b774:	3301      	adds	r3, #1
 802b776:	2b07      	cmp	r3, #7
 802b778:	e9c4 8900 	strd	r8, r9, [r4]
 802b77c:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b77e:	dc37      	bgt.n	802b7f0 <_vfprintf_r+0x11a8>
 802b780:	3408      	adds	r4, #8
 802b782:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b784:	781e      	ldrb	r6, [r3, #0]
 802b786:	f1b9 0f00 	cmp.w	r9, #0
 802b78a:	bfa8      	it	ge
 802b78c:	eba6 0609 	subge.w	r6, r6, r9
 802b790:	2e00      	cmp	r6, #0
 802b792:	dd18      	ble.n	802b7c6 <_vfprintf_r+0x117e>
 802b794:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802b798:	486f      	ldr	r0, [pc, #444]	@ (802b958 <_vfprintf_r+0x1310>)
 802b79a:	6020      	str	r0, [r4, #0]
 802b79c:	2e10      	cmp	r6, #16
 802b79e:	f103 0301 	add.w	r3, r3, #1
 802b7a2:	f104 0108 	add.w	r1, r4, #8
 802b7a6:	dc2d      	bgt.n	802b804 <_vfprintf_r+0x11bc>
 802b7a8:	6066      	str	r6, [r4, #4]
 802b7aa:	2b07      	cmp	r3, #7
 802b7ac:	4416      	add	r6, r2
 802b7ae:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 802b7b2:	dd3a      	ble.n	802b82a <_vfprintf_r+0x11e2>
 802b7b4:	9803      	ldr	r0, [sp, #12]
 802b7b6:	aa26      	add	r2, sp, #152	@ 0x98
 802b7b8:	4659      	mov	r1, fp
 802b7ba:	f000 f9b1 	bl	802bb20 <__sprint_r>
 802b7be:	2800      	cmp	r0, #0
 802b7c0:	f040 8109 	bne.w	802b9d6 <_vfprintf_r+0x138e>
 802b7c4:	ac29      	add	r4, sp, #164	@ 0xa4
 802b7c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b7c8:	781b      	ldrb	r3, [r3, #0]
 802b7ca:	4498      	add	r8, r3
 802b7cc:	e731      	b.n	802b632 <_vfprintf_r+0xfea>
 802b7ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b7d0:	3b01      	subs	r3, #1
 802b7d2:	9309      	str	r3, [sp, #36]	@ 0x24
 802b7d4:	9b08      	ldr	r3, [sp, #32]
 802b7d6:	3b01      	subs	r3, #1
 802b7d8:	9308      	str	r3, [sp, #32]
 802b7da:	e7ad      	b.n	802b738 <_vfprintf_r+0x10f0>
 802b7dc:	9803      	ldr	r0, [sp, #12]
 802b7de:	aa26      	add	r2, sp, #152	@ 0x98
 802b7e0:	4659      	mov	r1, fp
 802b7e2:	f000 f99d 	bl	802bb20 <__sprint_r>
 802b7e6:	2800      	cmp	r0, #0
 802b7e8:	f040 80f5 	bne.w	802b9d6 <_vfprintf_r+0x138e>
 802b7ec:	ac29      	add	r4, sp, #164	@ 0xa4
 802b7ee:	e7b1      	b.n	802b754 <_vfprintf_r+0x110c>
 802b7f0:	9803      	ldr	r0, [sp, #12]
 802b7f2:	aa26      	add	r2, sp, #152	@ 0x98
 802b7f4:	4659      	mov	r1, fp
 802b7f6:	f000 f993 	bl	802bb20 <__sprint_r>
 802b7fa:	2800      	cmp	r0, #0
 802b7fc:	f040 80eb 	bne.w	802b9d6 <_vfprintf_r+0x138e>
 802b800:	ac29      	add	r4, sp, #164	@ 0xa4
 802b802:	e7be      	b.n	802b782 <_vfprintf_r+0x113a>
 802b804:	2010      	movs	r0, #16
 802b806:	4402      	add	r2, r0
 802b808:	2b07      	cmp	r3, #7
 802b80a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802b80e:	6060      	str	r0, [r4, #4]
 802b810:	dd08      	ble.n	802b824 <_vfprintf_r+0x11dc>
 802b812:	9803      	ldr	r0, [sp, #12]
 802b814:	aa26      	add	r2, sp, #152	@ 0x98
 802b816:	4659      	mov	r1, fp
 802b818:	f000 f982 	bl	802bb20 <__sprint_r>
 802b81c:	2800      	cmp	r0, #0
 802b81e:	f040 80da 	bne.w	802b9d6 <_vfprintf_r+0x138e>
 802b822:	a929      	add	r1, sp, #164	@ 0xa4
 802b824:	3e10      	subs	r6, #16
 802b826:	460c      	mov	r4, r1
 802b828:	e7b4      	b.n	802b794 <_vfprintf_r+0x114c>
 802b82a:	460c      	mov	r4, r1
 802b82c:	e7cb      	b.n	802b7c6 <_vfprintf_r+0x117e>
 802b82e:	9803      	ldr	r0, [sp, #12]
 802b830:	aa26      	add	r2, sp, #152	@ 0x98
 802b832:	4659      	mov	r1, fp
 802b834:	f000 f974 	bl	802bb20 <__sprint_r>
 802b838:	2800      	cmp	r0, #0
 802b83a:	f040 80cc 	bne.w	802b9d6 <_vfprintf_r+0x138e>
 802b83e:	ac29      	add	r4, sp, #164	@ 0xa4
 802b840:	e715      	b.n	802b66e <_vfprintf_r+0x1026>
 802b842:	9803      	ldr	r0, [sp, #12]
 802b844:	aa26      	add	r2, sp, #152	@ 0x98
 802b846:	4659      	mov	r1, fp
 802b848:	f000 f96a 	bl	802bb20 <__sprint_r>
 802b84c:	2800      	cmp	r0, #0
 802b84e:	f040 80c2 	bne.w	802b9d6 <_vfprintf_r+0x138e>
 802b852:	ac29      	add	r4, sp, #164	@ 0xa4
 802b854:	e722      	b.n	802b69c <_vfprintf_r+0x1054>
 802b856:	9904      	ldr	r1, [sp, #16]
 802b858:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802b85a:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 802b85c:	2901      	cmp	r1, #1
 802b85e:	f103 0301 	add.w	r3, r3, #1
 802b862:	f102 0201 	add.w	r2, r2, #1
 802b866:	f104 0608 	add.w	r6, r4, #8
 802b86a:	dc02      	bgt.n	802b872 <_vfprintf_r+0x122a>
 802b86c:	07ef      	lsls	r7, r5, #31
 802b86e:	f140 8086 	bpl.w	802b97e <_vfprintf_r+0x1336>
 802b872:	2101      	movs	r1, #1
 802b874:	2a07      	cmp	r2, #7
 802b876:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802b87a:	f8c4 8000 	str.w	r8, [r4]
 802b87e:	6061      	str	r1, [r4, #4]
 802b880:	dd08      	ble.n	802b894 <_vfprintf_r+0x124c>
 802b882:	9803      	ldr	r0, [sp, #12]
 802b884:	aa26      	add	r2, sp, #152	@ 0x98
 802b886:	4659      	mov	r1, fp
 802b888:	f000 f94a 	bl	802bb20 <__sprint_r>
 802b88c:	2800      	cmp	r0, #0
 802b88e:	f040 80a2 	bne.w	802b9d6 <_vfprintf_r+0x138e>
 802b892:	ae29      	add	r6, sp, #164	@ 0xa4
 802b894:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802b896:	6033      	str	r3, [r6, #0]
 802b898:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802b89a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802b89c:	6073      	str	r3, [r6, #4]
 802b89e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b8a0:	4413      	add	r3, r2
 802b8a2:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b8a4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b8a6:	3301      	adds	r3, #1
 802b8a8:	2b07      	cmp	r3, #7
 802b8aa:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b8ac:	dc33      	bgt.n	802b916 <_vfprintf_r+0x12ce>
 802b8ae:	3608      	adds	r6, #8
 802b8b0:	9b04      	ldr	r3, [sp, #16]
 802b8b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802b8b6:	1e5c      	subs	r4, r3, #1
 802b8b8:	2200      	movs	r2, #0
 802b8ba:	2300      	movs	r3, #0
 802b8bc:	e9dd 9727 	ldrd	r9, r7, [sp, #156]	@ 0x9c
 802b8c0:	f7e5 f91a 	bl	8010af8 <__aeabi_dcmpeq>
 802b8c4:	2800      	cmp	r0, #0
 802b8c6:	d12f      	bne.n	802b928 <_vfprintf_r+0x12e0>
 802b8c8:	f108 0201 	add.w	r2, r8, #1
 802b8cc:	e9c6 2400 	strd	r2, r4, [r6]
 802b8d0:	9a04      	ldr	r2, [sp, #16]
 802b8d2:	f109 0301 	add.w	r3, r9, #1
 802b8d6:	3f01      	subs	r7, #1
 802b8d8:	4417      	add	r7, r2
 802b8da:	2b07      	cmp	r3, #7
 802b8dc:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 802b8e0:	dd56      	ble.n	802b990 <_vfprintf_r+0x1348>
 802b8e2:	9803      	ldr	r0, [sp, #12]
 802b8e4:	aa26      	add	r2, sp, #152	@ 0x98
 802b8e6:	4659      	mov	r1, fp
 802b8e8:	f000 f91a 	bl	802bb20 <__sprint_r>
 802b8ec:	2800      	cmp	r0, #0
 802b8ee:	d172      	bne.n	802b9d6 <_vfprintf_r+0x138e>
 802b8f0:	ae29      	add	r6, sp, #164	@ 0xa4
 802b8f2:	ab22      	add	r3, sp, #136	@ 0x88
 802b8f4:	6033      	str	r3, [r6, #0]
 802b8f6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802b8f8:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802b8fa:	6073      	str	r3, [r6, #4]
 802b8fc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b8fe:	4413      	add	r3, r2
 802b900:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b902:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b904:	3301      	adds	r3, #1
 802b906:	2b07      	cmp	r3, #7
 802b908:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b90a:	f73f ada1 	bgt.w	802b450 <_vfprintf_r+0xe08>
 802b90e:	f106 0408 	add.w	r4, r6, #8
 802b912:	f7ff baef 	b.w	802aef4 <_vfprintf_r+0x8ac>
 802b916:	9803      	ldr	r0, [sp, #12]
 802b918:	aa26      	add	r2, sp, #152	@ 0x98
 802b91a:	4659      	mov	r1, fp
 802b91c:	f000 f900 	bl	802bb20 <__sprint_r>
 802b920:	2800      	cmp	r0, #0
 802b922:	d158      	bne.n	802b9d6 <_vfprintf_r+0x138e>
 802b924:	ae29      	add	r6, sp, #164	@ 0xa4
 802b926:	e7c3      	b.n	802b8b0 <_vfprintf_r+0x1268>
 802b928:	9b04      	ldr	r3, [sp, #16]
 802b92a:	2b01      	cmp	r3, #1
 802b92c:	dde1      	ble.n	802b8f2 <_vfprintf_r+0x12aa>
 802b92e:	4f0a      	ldr	r7, [pc, #40]	@ (802b958 <_vfprintf_r+0x1310>)
 802b930:	f04f 0810 	mov.w	r8, #16
 802b934:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802b938:	2c10      	cmp	r4, #16
 802b93a:	f103 0301 	add.w	r3, r3, #1
 802b93e:	f106 0108 	add.w	r1, r6, #8
 802b942:	6037      	str	r7, [r6, #0]
 802b944:	dc0a      	bgt.n	802b95c <_vfprintf_r+0x1314>
 802b946:	6074      	str	r4, [r6, #4]
 802b948:	2b07      	cmp	r3, #7
 802b94a:	4414      	add	r4, r2
 802b94c:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 802b950:	dcc7      	bgt.n	802b8e2 <_vfprintf_r+0x129a>
 802b952:	460e      	mov	r6, r1
 802b954:	e7cd      	b.n	802b8f2 <_vfprintf_r+0x12aa>
 802b956:	bf00      	nop
 802b958:	0803c46f 	.word	0x0803c46f
 802b95c:	3210      	adds	r2, #16
 802b95e:	2b07      	cmp	r3, #7
 802b960:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802b964:	f8c6 8004 	str.w	r8, [r6, #4]
 802b968:	dd06      	ble.n	802b978 <_vfprintf_r+0x1330>
 802b96a:	9803      	ldr	r0, [sp, #12]
 802b96c:	aa26      	add	r2, sp, #152	@ 0x98
 802b96e:	4659      	mov	r1, fp
 802b970:	f000 f8d6 	bl	802bb20 <__sprint_r>
 802b974:	bb78      	cbnz	r0, 802b9d6 <_vfprintf_r+0x138e>
 802b976:	a929      	add	r1, sp, #164	@ 0xa4
 802b978:	3c10      	subs	r4, #16
 802b97a:	460e      	mov	r6, r1
 802b97c:	e7da      	b.n	802b934 <_vfprintf_r+0x12ec>
 802b97e:	2101      	movs	r1, #1
 802b980:	2a07      	cmp	r2, #7
 802b982:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802b986:	f8c4 8000 	str.w	r8, [r4]
 802b98a:	6061      	str	r1, [r4, #4]
 802b98c:	ddb1      	ble.n	802b8f2 <_vfprintf_r+0x12aa>
 802b98e:	e7a8      	b.n	802b8e2 <_vfprintf_r+0x129a>
 802b990:	3608      	adds	r6, #8
 802b992:	e7ae      	b.n	802b8f2 <_vfprintf_r+0x12aa>
 802b994:	460c      	mov	r4, r1
 802b996:	f7ff baad 	b.w	802aef4 <_vfprintf_r+0x8ac>
 802b99a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802b99c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802b99e:	1a9d      	subs	r5, r3, r2
 802b9a0:	2d00      	cmp	r5, #0
 802b9a2:	f77f aaaa 	ble.w	802aefa <_vfprintf_r+0x8b2>
 802b9a6:	4e3d      	ldr	r6, [pc, #244]	@ (802ba9c <_vfprintf_r+0x1454>)
 802b9a8:	2710      	movs	r7, #16
 802b9aa:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802b9ae:	2d10      	cmp	r5, #16
 802b9b0:	f103 0301 	add.w	r3, r3, #1
 802b9b4:	6026      	str	r6, [r4, #0]
 802b9b6:	dc18      	bgt.n	802b9ea <_vfprintf_r+0x13a2>
 802b9b8:	6065      	str	r5, [r4, #4]
 802b9ba:	2b07      	cmp	r3, #7
 802b9bc:	4415      	add	r5, r2
 802b9be:	e9cd 3527 	strd	r3, r5, [sp, #156]	@ 0x9c
 802b9c2:	f77f aa9a 	ble.w	802aefa <_vfprintf_r+0x8b2>
 802b9c6:	9803      	ldr	r0, [sp, #12]
 802b9c8:	aa26      	add	r2, sp, #152	@ 0x98
 802b9ca:	4659      	mov	r1, fp
 802b9cc:	f000 f8a8 	bl	802bb20 <__sprint_r>
 802b9d0:	2800      	cmp	r0, #0
 802b9d2:	f43f aa92 	beq.w	802aefa <_vfprintf_r+0x8b2>
 802b9d6:	f1ba 0f00 	cmp.w	sl, #0
 802b9da:	f43f a892 	beq.w	802ab02 <_vfprintf_r+0x4ba>
 802b9de:	9803      	ldr	r0, [sp, #12]
 802b9e0:	4651      	mov	r1, sl
 802b9e2:	f003 fc7b 	bl	802f2dc <_free_r>
 802b9e6:	f7ff b88c 	b.w	802ab02 <_vfprintf_r+0x4ba>
 802b9ea:	3210      	adds	r2, #16
 802b9ec:	2b07      	cmp	r3, #7
 802b9ee:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802b9f2:	6067      	str	r7, [r4, #4]
 802b9f4:	dc02      	bgt.n	802b9fc <_vfprintf_r+0x13b4>
 802b9f6:	3408      	adds	r4, #8
 802b9f8:	3d10      	subs	r5, #16
 802b9fa:	e7d6      	b.n	802b9aa <_vfprintf_r+0x1362>
 802b9fc:	9803      	ldr	r0, [sp, #12]
 802b9fe:	aa26      	add	r2, sp, #152	@ 0x98
 802ba00:	4659      	mov	r1, fp
 802ba02:	f000 f88d 	bl	802bb20 <__sprint_r>
 802ba06:	2800      	cmp	r0, #0
 802ba08:	d1e5      	bne.n	802b9d6 <_vfprintf_r+0x138e>
 802ba0a:	ac29      	add	r4, sp, #164	@ 0xa4
 802ba0c:	e7f4      	b.n	802b9f8 <_vfprintf_r+0x13b0>
 802ba0e:	9803      	ldr	r0, [sp, #12]
 802ba10:	4651      	mov	r1, sl
 802ba12:	f003 fc63 	bl	802f2dc <_free_r>
 802ba16:	f7ff ba88 	b.w	802af2a <_vfprintf_r+0x8e2>
 802ba1a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802ba1c:	b91b      	cbnz	r3, 802ba26 <_vfprintf_r+0x13de>
 802ba1e:	2300      	movs	r3, #0
 802ba20:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ba22:	f7ff b86e 	b.w	802ab02 <_vfprintf_r+0x4ba>
 802ba26:	9803      	ldr	r0, [sp, #12]
 802ba28:	aa26      	add	r2, sp, #152	@ 0x98
 802ba2a:	4659      	mov	r1, fp
 802ba2c:	f000 f878 	bl	802bb20 <__sprint_r>
 802ba30:	2800      	cmp	r0, #0
 802ba32:	d0f4      	beq.n	802ba1e <_vfprintf_r+0x13d6>
 802ba34:	f7ff b865 	b.w	802ab02 <_vfprintf_r+0x4ba>
 802ba38:	ea56 0207 	orrs.w	r2, r6, r7
 802ba3c:	9508      	str	r5, [sp, #32]
 802ba3e:	f43f ab75 	beq.w	802b12c <_vfprintf_r+0xae4>
 802ba42:	2b01      	cmp	r3, #1
 802ba44:	f43f abf6 	beq.w	802b234 <_vfprintf_r+0xbec>
 802ba48:	2b02      	cmp	r3, #2
 802ba4a:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 802ba4e:	f43f ac3a 	beq.w	802b2c6 <_vfprintf_r+0xc7e>
 802ba52:	f006 0307 	and.w	r3, r6, #7
 802ba56:	08f6      	lsrs	r6, r6, #3
 802ba58:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 802ba5c:	08ff      	lsrs	r7, r7, #3
 802ba5e:	3330      	adds	r3, #48	@ 0x30
 802ba60:	ea56 0107 	orrs.w	r1, r6, r7
 802ba64:	4642      	mov	r2, r8
 802ba66:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802ba6a:	d1f2      	bne.n	802ba52 <_vfprintf_r+0x140a>
 802ba6c:	9908      	ldr	r1, [sp, #32]
 802ba6e:	07ce      	lsls	r6, r1, #31
 802ba70:	d506      	bpl.n	802ba80 <_vfprintf_r+0x1438>
 802ba72:	2b30      	cmp	r3, #48	@ 0x30
 802ba74:	d004      	beq.n	802ba80 <_vfprintf_r+0x1438>
 802ba76:	2330      	movs	r3, #48	@ 0x30
 802ba78:	f808 3c01 	strb.w	r3, [r8, #-1]
 802ba7c:	f1a2 0802 	sub.w	r8, r2, #2
 802ba80:	ab52      	add	r3, sp, #328	@ 0x148
 802ba82:	9d08      	ldr	r5, [sp, #32]
 802ba84:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 802ba88:	f04f 0a00 	mov.w	sl, #0
 802ba8c:	eba3 0908 	sub.w	r9, r3, r8
 802ba90:	4657      	mov	r7, sl
 802ba92:	f8cd a020 	str.w	sl, [sp, #32]
 802ba96:	4656      	mov	r6, sl
 802ba98:	f7ff b978 	b.w	802ad8c <_vfprintf_r+0x744>
 802ba9c:	0803c47f 	.word	0x0803c47f

0802baa0 <__sbprintf>:
 802baa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 802baa2:	461f      	mov	r7, r3
 802baa4:	898b      	ldrh	r3, [r1, #12]
 802baa6:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 802baaa:	f023 0302 	bic.w	r3, r3, #2
 802baae:	f8ad 300c 	strh.w	r3, [sp, #12]
 802bab2:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 802bab4:	9319      	str	r3, [sp, #100]	@ 0x64
 802bab6:	89cb      	ldrh	r3, [r1, #14]
 802bab8:	f8ad 300e 	strh.w	r3, [sp, #14]
 802babc:	69cb      	ldr	r3, [r1, #28]
 802babe:	9307      	str	r3, [sp, #28]
 802bac0:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 802bac2:	9309      	str	r3, [sp, #36]	@ 0x24
 802bac4:	ab1a      	add	r3, sp, #104	@ 0x68
 802bac6:	9300      	str	r3, [sp, #0]
 802bac8:	9304      	str	r3, [sp, #16]
 802baca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802bace:	4615      	mov	r5, r2
 802bad0:	4606      	mov	r6, r0
 802bad2:	9302      	str	r3, [sp, #8]
 802bad4:	9305      	str	r3, [sp, #20]
 802bad6:	a816      	add	r0, sp, #88	@ 0x58
 802bad8:	2300      	movs	r3, #0
 802bada:	460c      	mov	r4, r1
 802badc:	9306      	str	r3, [sp, #24]
 802bade:	f002 fcf5 	bl	802e4cc <__retarget_lock_init_recursive>
 802bae2:	462a      	mov	r2, r5
 802bae4:	463b      	mov	r3, r7
 802bae6:	4669      	mov	r1, sp
 802bae8:	4630      	mov	r0, r6
 802baea:	f7fe fdad 	bl	802a648 <_vfprintf_r>
 802baee:	1e05      	subs	r5, r0, #0
 802baf0:	db07      	blt.n	802bb02 <__sbprintf+0x62>
 802baf2:	4669      	mov	r1, sp
 802baf4:	4630      	mov	r0, r6
 802baf6:	f000 fecb 	bl	802c890 <_fflush_r>
 802bafa:	2800      	cmp	r0, #0
 802bafc:	bf18      	it	ne
 802bafe:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 802bb02:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 802bb06:	9816      	ldr	r0, [sp, #88]	@ 0x58
 802bb08:	065b      	lsls	r3, r3, #25
 802bb0a:	bf42      	ittt	mi
 802bb0c:	89a3      	ldrhmi	r3, [r4, #12]
 802bb0e:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 802bb12:	81a3      	strhmi	r3, [r4, #12]
 802bb14:	f002 fcdb 	bl	802e4ce <__retarget_lock_close_recursive>
 802bb18:	4628      	mov	r0, r5
 802bb1a:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 802bb1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802bb20 <__sprint_r>:
 802bb20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bb24:	6893      	ldr	r3, [r2, #8]
 802bb26:	4680      	mov	r8, r0
 802bb28:	460e      	mov	r6, r1
 802bb2a:	4614      	mov	r4, r2
 802bb2c:	b343      	cbz	r3, 802bb80 <__sprint_r+0x60>
 802bb2e:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 802bb30:	049d      	lsls	r5, r3, #18
 802bb32:	d522      	bpl.n	802bb7a <__sprint_r+0x5a>
 802bb34:	6815      	ldr	r5, [r2, #0]
 802bb36:	68a0      	ldr	r0, [r4, #8]
 802bb38:	3508      	adds	r5, #8
 802bb3a:	b928      	cbnz	r0, 802bb48 <__sprint_r+0x28>
 802bb3c:	2300      	movs	r3, #0
 802bb3e:	60a3      	str	r3, [r4, #8]
 802bb40:	2300      	movs	r3, #0
 802bb42:	6063      	str	r3, [r4, #4]
 802bb44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bb48:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 802bb4c:	f04f 0900 	mov.w	r9, #0
 802bb50:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 802bb54:	45ca      	cmp	sl, r9
 802bb56:	dc05      	bgt.n	802bb64 <__sprint_r+0x44>
 802bb58:	68a3      	ldr	r3, [r4, #8]
 802bb5a:	f027 0703 	bic.w	r7, r7, #3
 802bb5e:	1bdb      	subs	r3, r3, r7
 802bb60:	60a3      	str	r3, [r4, #8]
 802bb62:	e7e8      	b.n	802bb36 <__sprint_r+0x16>
 802bb64:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 802bb68:	4632      	mov	r2, r6
 802bb6a:	4640      	mov	r0, r8
 802bb6c:	f001 fa35 	bl	802cfda <_fputwc_r>
 802bb70:	1c43      	adds	r3, r0, #1
 802bb72:	d0e3      	beq.n	802bb3c <__sprint_r+0x1c>
 802bb74:	f109 0901 	add.w	r9, r9, #1
 802bb78:	e7ec      	b.n	802bb54 <__sprint_r+0x34>
 802bb7a:	f001 f81d 	bl	802cbb8 <__sfvwrite_r>
 802bb7e:	e7dd      	b.n	802bb3c <__sprint_r+0x1c>
 802bb80:	4618      	mov	r0, r3
 802bb82:	e7dd      	b.n	802bb40 <__sprint_r+0x20>

0802bb84 <_vfiprintf_r>:
 802bb84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bb88:	b0bb      	sub	sp, #236	@ 0xec
 802bb8a:	460f      	mov	r7, r1
 802bb8c:	4693      	mov	fp, r2
 802bb8e:	461c      	mov	r4, r3
 802bb90:	461d      	mov	r5, r3
 802bb92:	9000      	str	r0, [sp, #0]
 802bb94:	b118      	cbz	r0, 802bb9e <_vfiprintf_r+0x1a>
 802bb96:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802bb98:	b90b      	cbnz	r3, 802bb9e <_vfiprintf_r+0x1a>
 802bb9a:	f000 ffbb 	bl	802cb14 <__sinit>
 802bb9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802bba0:	07db      	lsls	r3, r3, #31
 802bba2:	d405      	bmi.n	802bbb0 <_vfiprintf_r+0x2c>
 802bba4:	89bb      	ldrh	r3, [r7, #12]
 802bba6:	059e      	lsls	r6, r3, #22
 802bba8:	d402      	bmi.n	802bbb0 <_vfiprintf_r+0x2c>
 802bbaa:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802bbac:	f002 fc91 	bl	802e4d2 <__retarget_lock_acquire_recursive>
 802bbb0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 802bbb4:	0498      	lsls	r0, r3, #18
 802bbb6:	d406      	bmi.n	802bbc6 <_vfiprintf_r+0x42>
 802bbb8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802bbbc:	81bb      	strh	r3, [r7, #12]
 802bbbe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802bbc0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 802bbc4:	667b      	str	r3, [r7, #100]	@ 0x64
 802bbc6:	89bb      	ldrh	r3, [r7, #12]
 802bbc8:	0719      	lsls	r1, r3, #28
 802bbca:	d501      	bpl.n	802bbd0 <_vfiprintf_r+0x4c>
 802bbcc:	693b      	ldr	r3, [r7, #16]
 802bbce:	b9ab      	cbnz	r3, 802bbfc <_vfiprintf_r+0x78>
 802bbd0:	9800      	ldr	r0, [sp, #0]
 802bbd2:	4639      	mov	r1, r7
 802bbd4:	f001 f95a 	bl	802ce8c <__swsetup_r>
 802bbd8:	b180      	cbz	r0, 802bbfc <_vfiprintf_r+0x78>
 802bbda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802bbdc:	07da      	lsls	r2, r3, #31
 802bbde:	d506      	bpl.n	802bbee <_vfiprintf_r+0x6a>
 802bbe0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802bbe4:	9303      	str	r3, [sp, #12]
 802bbe6:	9803      	ldr	r0, [sp, #12]
 802bbe8:	b03b      	add	sp, #236	@ 0xec
 802bbea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bbee:	89bb      	ldrh	r3, [r7, #12]
 802bbf0:	059b      	lsls	r3, r3, #22
 802bbf2:	d4f5      	bmi.n	802bbe0 <_vfiprintf_r+0x5c>
 802bbf4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802bbf6:	f002 fc6e 	bl	802e4d6 <__retarget_lock_release_recursive>
 802bbfa:	e7f1      	b.n	802bbe0 <_vfiprintf_r+0x5c>
 802bbfc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 802bc00:	f003 021a 	and.w	r2, r3, #26
 802bc04:	2a0a      	cmp	r2, #10
 802bc06:	d114      	bne.n	802bc32 <_vfiprintf_r+0xae>
 802bc08:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 802bc0c:	2a00      	cmp	r2, #0
 802bc0e:	db10      	blt.n	802bc32 <_vfiprintf_r+0xae>
 802bc10:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 802bc12:	07d6      	lsls	r6, r2, #31
 802bc14:	d404      	bmi.n	802bc20 <_vfiprintf_r+0x9c>
 802bc16:	059d      	lsls	r5, r3, #22
 802bc18:	d402      	bmi.n	802bc20 <_vfiprintf_r+0x9c>
 802bc1a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802bc1c:	f002 fc5b 	bl	802e4d6 <__retarget_lock_release_recursive>
 802bc20:	9800      	ldr	r0, [sp, #0]
 802bc22:	4623      	mov	r3, r4
 802bc24:	465a      	mov	r2, fp
 802bc26:	4639      	mov	r1, r7
 802bc28:	b03b      	add	sp, #236	@ 0xec
 802bc2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bc2e:	f000 bc31 	b.w	802c494 <__sbprintf>
 802bc32:	2300      	movs	r3, #0
 802bc34:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 802bc38:	e9cd 3305 	strd	r3, r3, [sp, #20]
 802bc3c:	ae11      	add	r6, sp, #68	@ 0x44
 802bc3e:	960e      	str	r6, [sp, #56]	@ 0x38
 802bc40:	9307      	str	r3, [sp, #28]
 802bc42:	9309      	str	r3, [sp, #36]	@ 0x24
 802bc44:	9303      	str	r3, [sp, #12]
 802bc46:	465b      	mov	r3, fp
 802bc48:	461c      	mov	r4, r3
 802bc4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802bc4e:	b10a      	cbz	r2, 802bc54 <_vfiprintf_r+0xd0>
 802bc50:	2a25      	cmp	r2, #37	@ 0x25
 802bc52:	d1f9      	bne.n	802bc48 <_vfiprintf_r+0xc4>
 802bc54:	ebb4 080b 	subs.w	r8, r4, fp
 802bc58:	d00d      	beq.n	802bc76 <_vfiprintf_r+0xf2>
 802bc5a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802bc5c:	4443      	add	r3, r8
 802bc5e:	9310      	str	r3, [sp, #64]	@ 0x40
 802bc60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802bc62:	3301      	adds	r3, #1
 802bc64:	2b07      	cmp	r3, #7
 802bc66:	e9c6 b800 	strd	fp, r8, [r6]
 802bc6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802bc6c:	dc75      	bgt.n	802bd5a <_vfiprintf_r+0x1d6>
 802bc6e:	3608      	adds	r6, #8
 802bc70:	9b03      	ldr	r3, [sp, #12]
 802bc72:	4443      	add	r3, r8
 802bc74:	9303      	str	r3, [sp, #12]
 802bc76:	7823      	ldrb	r3, [r4, #0]
 802bc78:	2b00      	cmp	r3, #0
 802bc7a:	f000 83cd 	beq.w	802c418 <_vfiprintf_r+0x894>
 802bc7e:	2300      	movs	r3, #0
 802bc80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802bc84:	e9cd 2301 	strd	r2, r3, [sp, #4]
 802bc88:	3401      	adds	r4, #1
 802bc8a:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802bc8e:	469a      	mov	sl, r3
 802bc90:	46a3      	mov	fp, r4
 802bc92:	f81b 3b01 	ldrb.w	r3, [fp], #1
 802bc96:	f1a3 0220 	sub.w	r2, r3, #32
 802bc9a:	2a5a      	cmp	r2, #90	@ 0x5a
 802bc9c:	f200 8316 	bhi.w	802c2cc <_vfiprintf_r+0x748>
 802bca0:	e8df f012 	tbh	[pc, r2, lsl #1]
 802bca4:	0314009a 	.word	0x0314009a
 802bca8:	00a20314 	.word	0x00a20314
 802bcac:	03140314 	.word	0x03140314
 802bcb0:	00820314 	.word	0x00820314
 802bcb4:	03140314 	.word	0x03140314
 802bcb8:	00af00a5 	.word	0x00af00a5
 802bcbc:	00ac0314 	.word	0x00ac0314
 802bcc0:	031400b1 	.word	0x031400b1
 802bcc4:	00d000cd 	.word	0x00d000cd
 802bcc8:	00d000d0 	.word	0x00d000d0
 802bccc:	00d000d0 	.word	0x00d000d0
 802bcd0:	00d000d0 	.word	0x00d000d0
 802bcd4:	00d000d0 	.word	0x00d000d0
 802bcd8:	03140314 	.word	0x03140314
 802bcdc:	03140314 	.word	0x03140314
 802bce0:	03140314 	.word	0x03140314
 802bce4:	03140314 	.word	0x03140314
 802bce8:	00f70314 	.word	0x00f70314
 802bcec:	03140104 	.word	0x03140104
 802bcf0:	03140314 	.word	0x03140314
 802bcf4:	03140314 	.word	0x03140314
 802bcf8:	03140314 	.word	0x03140314
 802bcfc:	03140314 	.word	0x03140314
 802bd00:	01520314 	.word	0x01520314
 802bd04:	03140314 	.word	0x03140314
 802bd08:	019a0314 	.word	0x019a0314
 802bd0c:	027a0314 	.word	0x027a0314
 802bd10:	03140314 	.word	0x03140314
 802bd14:	0314029a 	.word	0x0314029a
 802bd18:	03140314 	.word	0x03140314
 802bd1c:	03140314 	.word	0x03140314
 802bd20:	03140314 	.word	0x03140314
 802bd24:	03140314 	.word	0x03140314
 802bd28:	00f70314 	.word	0x00f70314
 802bd2c:	03140106 	.word	0x03140106
 802bd30:	03140314 	.word	0x03140314
 802bd34:	010600e0 	.word	0x010600e0
 802bd38:	031400f1 	.word	0x031400f1
 802bd3c:	031400eb 	.word	0x031400eb
 802bd40:	01540132 	.word	0x01540132
 802bd44:	00f10189 	.word	0x00f10189
 802bd48:	019a0314 	.word	0x019a0314
 802bd4c:	027c0098 	.word	0x027c0098
 802bd50:	03140314 	.word	0x03140314
 802bd54:	03140065 	.word	0x03140065
 802bd58:	0098      	.short	0x0098
 802bd5a:	9800      	ldr	r0, [sp, #0]
 802bd5c:	aa0e      	add	r2, sp, #56	@ 0x38
 802bd5e:	4639      	mov	r1, r7
 802bd60:	f7ff fede 	bl	802bb20 <__sprint_r>
 802bd64:	2800      	cmp	r0, #0
 802bd66:	f040 8336 	bne.w	802c3d6 <_vfiprintf_r+0x852>
 802bd6a:	ae11      	add	r6, sp, #68	@ 0x44
 802bd6c:	e780      	b.n	802bc70 <_vfiprintf_r+0xec>
 802bd6e:	4a99      	ldr	r2, [pc, #612]	@ (802bfd4 <_vfiprintf_r+0x450>)
 802bd70:	9205      	str	r2, [sp, #20]
 802bd72:	f01a 0220 	ands.w	r2, sl, #32
 802bd76:	f000 8231 	beq.w	802c1dc <_vfiprintf_r+0x658>
 802bd7a:	3507      	adds	r5, #7
 802bd7c:	f025 0507 	bic.w	r5, r5, #7
 802bd80:	46a8      	mov	r8, r5
 802bd82:	686d      	ldr	r5, [r5, #4]
 802bd84:	f858 4b08 	ldr.w	r4, [r8], #8
 802bd88:	f01a 0f01 	tst.w	sl, #1
 802bd8c:	d009      	beq.n	802bda2 <_vfiprintf_r+0x21e>
 802bd8e:	ea54 0205 	orrs.w	r2, r4, r5
 802bd92:	bf1f      	itttt	ne
 802bd94:	2230      	movne	r2, #48	@ 0x30
 802bd96:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 802bd9a:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 802bd9e:	f04a 0a02 	orrne.w	sl, sl, #2
 802bda2:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 802bda6:	e112      	b.n	802bfce <_vfiprintf_r+0x44a>
 802bda8:	9800      	ldr	r0, [sp, #0]
 802bdaa:	f002 fae7 	bl	802e37c <_localeconv_r>
 802bdae:	6843      	ldr	r3, [r0, #4]
 802bdb0:	9309      	str	r3, [sp, #36]	@ 0x24
 802bdb2:	4618      	mov	r0, r3
 802bdb4:	f7e4 fa74 	bl	80102a0 <strlen>
 802bdb8:	9007      	str	r0, [sp, #28]
 802bdba:	9800      	ldr	r0, [sp, #0]
 802bdbc:	f002 fade 	bl	802e37c <_localeconv_r>
 802bdc0:	6883      	ldr	r3, [r0, #8]
 802bdc2:	9306      	str	r3, [sp, #24]
 802bdc4:	9b07      	ldr	r3, [sp, #28]
 802bdc6:	b12b      	cbz	r3, 802bdd4 <_vfiprintf_r+0x250>
 802bdc8:	9b06      	ldr	r3, [sp, #24]
 802bdca:	b11b      	cbz	r3, 802bdd4 <_vfiprintf_r+0x250>
 802bdcc:	781b      	ldrb	r3, [r3, #0]
 802bdce:	b10b      	cbz	r3, 802bdd4 <_vfiprintf_r+0x250>
 802bdd0:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 802bdd4:	465c      	mov	r4, fp
 802bdd6:	e75b      	b.n	802bc90 <_vfiprintf_r+0x10c>
 802bdd8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802bddc:	2b00      	cmp	r3, #0
 802bdde:	d1f9      	bne.n	802bdd4 <_vfiprintf_r+0x250>
 802bde0:	2320      	movs	r3, #32
 802bde2:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802bde6:	e7f5      	b.n	802bdd4 <_vfiprintf_r+0x250>
 802bde8:	f04a 0a01 	orr.w	sl, sl, #1
 802bdec:	e7f2      	b.n	802bdd4 <_vfiprintf_r+0x250>
 802bdee:	f855 3b04 	ldr.w	r3, [r5], #4
 802bdf2:	9302      	str	r3, [sp, #8]
 802bdf4:	2b00      	cmp	r3, #0
 802bdf6:	daed      	bge.n	802bdd4 <_vfiprintf_r+0x250>
 802bdf8:	425b      	negs	r3, r3
 802bdfa:	9302      	str	r3, [sp, #8]
 802bdfc:	f04a 0a04 	orr.w	sl, sl, #4
 802be00:	e7e8      	b.n	802bdd4 <_vfiprintf_r+0x250>
 802be02:	232b      	movs	r3, #43	@ 0x2b
 802be04:	e7ed      	b.n	802bde2 <_vfiprintf_r+0x25e>
 802be06:	465a      	mov	r2, fp
 802be08:	f812 3b01 	ldrb.w	r3, [r2], #1
 802be0c:	2b2a      	cmp	r3, #42	@ 0x2a
 802be0e:	d112      	bne.n	802be36 <_vfiprintf_r+0x2b2>
 802be10:	f855 3b04 	ldr.w	r3, [r5], #4
 802be14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802be18:	9301      	str	r3, [sp, #4]
 802be1a:	4693      	mov	fp, r2
 802be1c:	e7da      	b.n	802bdd4 <_vfiprintf_r+0x250>
 802be1e:	9b01      	ldr	r3, [sp, #4]
 802be20:	fb00 1303 	mla	r3, r0, r3, r1
 802be24:	9301      	str	r3, [sp, #4]
 802be26:	f812 3b01 	ldrb.w	r3, [r2], #1
 802be2a:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802be2e:	2909      	cmp	r1, #9
 802be30:	d9f5      	bls.n	802be1e <_vfiprintf_r+0x29a>
 802be32:	4693      	mov	fp, r2
 802be34:	e72f      	b.n	802bc96 <_vfiprintf_r+0x112>
 802be36:	2100      	movs	r1, #0
 802be38:	9101      	str	r1, [sp, #4]
 802be3a:	200a      	movs	r0, #10
 802be3c:	e7f5      	b.n	802be2a <_vfiprintf_r+0x2a6>
 802be3e:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 802be42:	e7c7      	b.n	802bdd4 <_vfiprintf_r+0x250>
 802be44:	2100      	movs	r1, #0
 802be46:	465a      	mov	r2, fp
 802be48:	9102      	str	r1, [sp, #8]
 802be4a:	200a      	movs	r0, #10
 802be4c:	9902      	ldr	r1, [sp, #8]
 802be4e:	3b30      	subs	r3, #48	@ 0x30
 802be50:	fb00 3301 	mla	r3, r0, r1, r3
 802be54:	9302      	str	r3, [sp, #8]
 802be56:	f812 3b01 	ldrb.w	r3, [r2], #1
 802be5a:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802be5e:	2909      	cmp	r1, #9
 802be60:	d9f4      	bls.n	802be4c <_vfiprintf_r+0x2c8>
 802be62:	e7e6      	b.n	802be32 <_vfiprintf_r+0x2ae>
 802be64:	f89b 3000 	ldrb.w	r3, [fp]
 802be68:	2b68      	cmp	r3, #104	@ 0x68
 802be6a:	bf06      	itte	eq
 802be6c:	f10b 0b01 	addeq.w	fp, fp, #1
 802be70:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 802be74:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 802be78:	e7ac      	b.n	802bdd4 <_vfiprintf_r+0x250>
 802be7a:	f89b 3000 	ldrb.w	r3, [fp]
 802be7e:	2b6c      	cmp	r3, #108	@ 0x6c
 802be80:	d104      	bne.n	802be8c <_vfiprintf_r+0x308>
 802be82:	f10b 0b01 	add.w	fp, fp, #1
 802be86:	f04a 0a20 	orr.w	sl, sl, #32
 802be8a:	e7a3      	b.n	802bdd4 <_vfiprintf_r+0x250>
 802be8c:	f04a 0a10 	orr.w	sl, sl, #16
 802be90:	e7a0      	b.n	802bdd4 <_vfiprintf_r+0x250>
 802be92:	46a8      	mov	r8, r5
 802be94:	2400      	movs	r4, #0
 802be96:	f858 3b04 	ldr.w	r3, [r8], #4
 802be9a:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802be9e:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802bea2:	2301      	movs	r3, #1
 802bea4:	9301      	str	r3, [sp, #4]
 802bea6:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 802beaa:	e0ab      	b.n	802c004 <_vfiprintf_r+0x480>
 802beac:	f04a 0a10 	orr.w	sl, sl, #16
 802beb0:	f01a 0f20 	tst.w	sl, #32
 802beb4:	d011      	beq.n	802beda <_vfiprintf_r+0x356>
 802beb6:	3507      	adds	r5, #7
 802beb8:	f025 0507 	bic.w	r5, r5, #7
 802bebc:	46a8      	mov	r8, r5
 802bebe:	686d      	ldr	r5, [r5, #4]
 802bec0:	f858 4b08 	ldr.w	r4, [r8], #8
 802bec4:	2d00      	cmp	r5, #0
 802bec6:	da06      	bge.n	802bed6 <_vfiprintf_r+0x352>
 802bec8:	4264      	negs	r4, r4
 802beca:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 802bece:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 802bed2:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802bed6:	2301      	movs	r3, #1
 802bed8:	e048      	b.n	802bf6c <_vfiprintf_r+0x3e8>
 802beda:	46a8      	mov	r8, r5
 802bedc:	f01a 0f10 	tst.w	sl, #16
 802bee0:	f858 5b04 	ldr.w	r5, [r8], #4
 802bee4:	d002      	beq.n	802beec <_vfiprintf_r+0x368>
 802bee6:	462c      	mov	r4, r5
 802bee8:	17ed      	asrs	r5, r5, #31
 802beea:	e7eb      	b.n	802bec4 <_vfiprintf_r+0x340>
 802beec:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 802bef0:	d003      	beq.n	802befa <_vfiprintf_r+0x376>
 802bef2:	b22c      	sxth	r4, r5
 802bef4:	f345 35c0 	sbfx	r5, r5, #15, #1
 802bef8:	e7e4      	b.n	802bec4 <_vfiprintf_r+0x340>
 802befa:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 802befe:	d0f2      	beq.n	802bee6 <_vfiprintf_r+0x362>
 802bf00:	b26c      	sxtb	r4, r5
 802bf02:	f345 15c0 	sbfx	r5, r5, #7, #1
 802bf06:	e7dd      	b.n	802bec4 <_vfiprintf_r+0x340>
 802bf08:	f01a 0f20 	tst.w	sl, #32
 802bf0c:	d007      	beq.n	802bf1e <_vfiprintf_r+0x39a>
 802bf0e:	9a03      	ldr	r2, [sp, #12]
 802bf10:	682b      	ldr	r3, [r5, #0]
 802bf12:	9903      	ldr	r1, [sp, #12]
 802bf14:	17d2      	asrs	r2, r2, #31
 802bf16:	e9c3 1200 	strd	r1, r2, [r3]
 802bf1a:	3504      	adds	r5, #4
 802bf1c:	e693      	b.n	802bc46 <_vfiprintf_r+0xc2>
 802bf1e:	f01a 0f10 	tst.w	sl, #16
 802bf22:	d003      	beq.n	802bf2c <_vfiprintf_r+0x3a8>
 802bf24:	682b      	ldr	r3, [r5, #0]
 802bf26:	9a03      	ldr	r2, [sp, #12]
 802bf28:	601a      	str	r2, [r3, #0]
 802bf2a:	e7f6      	b.n	802bf1a <_vfiprintf_r+0x396>
 802bf2c:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 802bf30:	d003      	beq.n	802bf3a <_vfiprintf_r+0x3b6>
 802bf32:	682b      	ldr	r3, [r5, #0]
 802bf34:	9a03      	ldr	r2, [sp, #12]
 802bf36:	801a      	strh	r2, [r3, #0]
 802bf38:	e7ef      	b.n	802bf1a <_vfiprintf_r+0x396>
 802bf3a:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 802bf3e:	d0f1      	beq.n	802bf24 <_vfiprintf_r+0x3a0>
 802bf40:	682b      	ldr	r3, [r5, #0]
 802bf42:	9a03      	ldr	r2, [sp, #12]
 802bf44:	701a      	strb	r2, [r3, #0]
 802bf46:	e7e8      	b.n	802bf1a <_vfiprintf_r+0x396>
 802bf48:	f04a 0a10 	orr.w	sl, sl, #16
 802bf4c:	f01a 0320 	ands.w	r3, sl, #32
 802bf50:	d01f      	beq.n	802bf92 <_vfiprintf_r+0x40e>
 802bf52:	3507      	adds	r5, #7
 802bf54:	f025 0507 	bic.w	r5, r5, #7
 802bf58:	46a8      	mov	r8, r5
 802bf5a:	686d      	ldr	r5, [r5, #4]
 802bf5c:	f858 4b08 	ldr.w	r4, [r8], #8
 802bf60:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 802bf64:	2300      	movs	r3, #0
 802bf66:	2200      	movs	r2, #0
 802bf68:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 802bf6c:	9a01      	ldr	r2, [sp, #4]
 802bf6e:	3201      	adds	r2, #1
 802bf70:	f000 825f 	beq.w	802c432 <_vfiprintf_r+0x8ae>
 802bf74:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 802bf78:	9204      	str	r2, [sp, #16]
 802bf7a:	ea54 0205 	orrs.w	r2, r4, r5
 802bf7e:	f040 825e 	bne.w	802c43e <_vfiprintf_r+0x8ba>
 802bf82:	9a01      	ldr	r2, [sp, #4]
 802bf84:	2a00      	cmp	r2, #0
 802bf86:	f000 8198 	beq.w	802c2ba <_vfiprintf_r+0x736>
 802bf8a:	2b01      	cmp	r3, #1
 802bf8c:	f040 825a 	bne.w	802c444 <_vfiprintf_r+0x8c0>
 802bf90:	e13b      	b.n	802c20a <_vfiprintf_r+0x686>
 802bf92:	46a8      	mov	r8, r5
 802bf94:	f01a 0510 	ands.w	r5, sl, #16
 802bf98:	f858 4b04 	ldr.w	r4, [r8], #4
 802bf9c:	d001      	beq.n	802bfa2 <_vfiprintf_r+0x41e>
 802bf9e:	461d      	mov	r5, r3
 802bfa0:	e7de      	b.n	802bf60 <_vfiprintf_r+0x3dc>
 802bfa2:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 802bfa6:	d001      	beq.n	802bfac <_vfiprintf_r+0x428>
 802bfa8:	b2a4      	uxth	r4, r4
 802bfaa:	e7d9      	b.n	802bf60 <_vfiprintf_r+0x3dc>
 802bfac:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 802bfb0:	d0d6      	beq.n	802bf60 <_vfiprintf_r+0x3dc>
 802bfb2:	b2e4      	uxtb	r4, r4
 802bfb4:	e7f3      	b.n	802bf9e <_vfiprintf_r+0x41a>
 802bfb6:	46a8      	mov	r8, r5
 802bfb8:	f647 0330 	movw	r3, #30768	@ 0x7830
 802bfbc:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 802bfc0:	f858 4b04 	ldr.w	r4, [r8], #4
 802bfc4:	4b03      	ldr	r3, [pc, #12]	@ (802bfd4 <_vfiprintf_r+0x450>)
 802bfc6:	9305      	str	r3, [sp, #20]
 802bfc8:	2500      	movs	r5, #0
 802bfca:	f04a 0a02 	orr.w	sl, sl, #2
 802bfce:	2302      	movs	r3, #2
 802bfd0:	e7c9      	b.n	802bf66 <_vfiprintf_r+0x3e2>
 802bfd2:	bf00      	nop
 802bfd4:	0803c44b 	.word	0x0803c44b
 802bfd8:	9b01      	ldr	r3, [sp, #4]
 802bfda:	46a8      	mov	r8, r5
 802bfdc:	1c5c      	adds	r4, r3, #1
 802bfde:	f04f 0500 	mov.w	r5, #0
 802bfe2:	f858 9b04 	ldr.w	r9, [r8], #4
 802bfe6:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 802bfea:	f000 80d0 	beq.w	802c18e <_vfiprintf_r+0x60a>
 802bfee:	461a      	mov	r2, r3
 802bff0:	4629      	mov	r1, r5
 802bff2:	4648      	mov	r0, r9
 802bff4:	f7e4 f904 	bl	8010200 <memchr>
 802bff8:	4604      	mov	r4, r0
 802bffa:	b118      	cbz	r0, 802c004 <_vfiprintf_r+0x480>
 802bffc:	eba0 0309 	sub.w	r3, r0, r9
 802c000:	9301      	str	r3, [sp, #4]
 802c002:	462c      	mov	r4, r5
 802c004:	9b01      	ldr	r3, [sp, #4]
 802c006:	42a3      	cmp	r3, r4
 802c008:	bfb8      	it	lt
 802c00a:	4623      	movlt	r3, r4
 802c00c:	9304      	str	r3, [sp, #16]
 802c00e:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802c012:	b113      	cbz	r3, 802c01a <_vfiprintf_r+0x496>
 802c014:	9b04      	ldr	r3, [sp, #16]
 802c016:	3301      	adds	r3, #1
 802c018:	9304      	str	r3, [sp, #16]
 802c01a:	f01a 0302 	ands.w	r3, sl, #2
 802c01e:	9308      	str	r3, [sp, #32]
 802c020:	bf1e      	ittt	ne
 802c022:	9b04      	ldrne	r3, [sp, #16]
 802c024:	3302      	addne	r3, #2
 802c026:	9304      	strne	r3, [sp, #16]
 802c028:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 802c02c:	930a      	str	r3, [sp, #40]	@ 0x28
 802c02e:	d11f      	bne.n	802c070 <_vfiprintf_r+0x4ec>
 802c030:	9b02      	ldr	r3, [sp, #8]
 802c032:	9a04      	ldr	r2, [sp, #16]
 802c034:	1a9d      	subs	r5, r3, r2
 802c036:	2d00      	cmp	r5, #0
 802c038:	dd1a      	ble.n	802c070 <_vfiprintf_r+0x4ec>
 802c03a:	4ba9      	ldr	r3, [pc, #676]	@ (802c2e0 <_vfiprintf_r+0x75c>)
 802c03c:	6033      	str	r3, [r6, #0]
 802c03e:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802c042:	2d10      	cmp	r5, #16
 802c044:	f102 0201 	add.w	r2, r2, #1
 802c048:	f106 0008 	add.w	r0, r6, #8
 802c04c:	f300 814e 	bgt.w	802c2ec <_vfiprintf_r+0x768>
 802c050:	6075      	str	r5, [r6, #4]
 802c052:	2a07      	cmp	r2, #7
 802c054:	4465      	add	r5, ip
 802c056:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 802c05a:	f340 815a 	ble.w	802c312 <_vfiprintf_r+0x78e>
 802c05e:	9800      	ldr	r0, [sp, #0]
 802c060:	aa0e      	add	r2, sp, #56	@ 0x38
 802c062:	4639      	mov	r1, r7
 802c064:	f7ff fd5c 	bl	802bb20 <__sprint_r>
 802c068:	2800      	cmp	r0, #0
 802c06a:	f040 81b4 	bne.w	802c3d6 <_vfiprintf_r+0x852>
 802c06e:	ae11      	add	r6, sp, #68	@ 0x44
 802c070:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 802c074:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802c078:	b161      	cbz	r1, 802c094 <_vfiprintf_r+0x510>
 802c07a:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 802c07e:	3301      	adds	r3, #1
 802c080:	6031      	str	r1, [r6, #0]
 802c082:	2101      	movs	r1, #1
 802c084:	440a      	add	r2, r1
 802c086:	2b07      	cmp	r3, #7
 802c088:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802c08c:	6071      	str	r1, [r6, #4]
 802c08e:	f300 8142 	bgt.w	802c316 <_vfiprintf_r+0x792>
 802c092:	3608      	adds	r6, #8
 802c094:	9908      	ldr	r1, [sp, #32]
 802c096:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802c09a:	b159      	cbz	r1, 802c0b4 <_vfiprintf_r+0x530>
 802c09c:	a90d      	add	r1, sp, #52	@ 0x34
 802c09e:	3301      	adds	r3, #1
 802c0a0:	6031      	str	r1, [r6, #0]
 802c0a2:	2102      	movs	r1, #2
 802c0a4:	440a      	add	r2, r1
 802c0a6:	2b07      	cmp	r3, #7
 802c0a8:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802c0ac:	6071      	str	r1, [r6, #4]
 802c0ae:	f300 813b 	bgt.w	802c328 <_vfiprintf_r+0x7a4>
 802c0b2:	3608      	adds	r6, #8
 802c0b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802c0b6:	2b80      	cmp	r3, #128	@ 0x80
 802c0b8:	d11f      	bne.n	802c0fa <_vfiprintf_r+0x576>
 802c0ba:	9b02      	ldr	r3, [sp, #8]
 802c0bc:	9a04      	ldr	r2, [sp, #16]
 802c0be:	1a9d      	subs	r5, r3, r2
 802c0c0:	2d00      	cmp	r5, #0
 802c0c2:	dd1a      	ble.n	802c0fa <_vfiprintf_r+0x576>
 802c0c4:	4b87      	ldr	r3, [pc, #540]	@ (802c2e4 <_vfiprintf_r+0x760>)
 802c0c6:	6033      	str	r3, [r6, #0]
 802c0c8:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802c0cc:	2d10      	cmp	r5, #16
 802c0ce:	f102 0201 	add.w	r2, r2, #1
 802c0d2:	f106 0008 	add.w	r0, r6, #8
 802c0d6:	f300 8130 	bgt.w	802c33a <_vfiprintf_r+0x7b6>
 802c0da:	6075      	str	r5, [r6, #4]
 802c0dc:	2a07      	cmp	r2, #7
 802c0de:	4465      	add	r5, ip
 802c0e0:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 802c0e4:	f340 813c 	ble.w	802c360 <_vfiprintf_r+0x7dc>
 802c0e8:	9800      	ldr	r0, [sp, #0]
 802c0ea:	aa0e      	add	r2, sp, #56	@ 0x38
 802c0ec:	4639      	mov	r1, r7
 802c0ee:	f7ff fd17 	bl	802bb20 <__sprint_r>
 802c0f2:	2800      	cmp	r0, #0
 802c0f4:	f040 816f 	bne.w	802c3d6 <_vfiprintf_r+0x852>
 802c0f8:	ae11      	add	r6, sp, #68	@ 0x44
 802c0fa:	9b01      	ldr	r3, [sp, #4]
 802c0fc:	1ae4      	subs	r4, r4, r3
 802c0fe:	2c00      	cmp	r4, #0
 802c100:	dd1a      	ble.n	802c138 <_vfiprintf_r+0x5b4>
 802c102:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802c106:	4877      	ldr	r0, [pc, #476]	@ (802c2e4 <_vfiprintf_r+0x760>)
 802c108:	6030      	str	r0, [r6, #0]
 802c10a:	2c10      	cmp	r4, #16
 802c10c:	f103 0301 	add.w	r3, r3, #1
 802c110:	f106 0108 	add.w	r1, r6, #8
 802c114:	f300 8126 	bgt.w	802c364 <_vfiprintf_r+0x7e0>
 802c118:	6074      	str	r4, [r6, #4]
 802c11a:	2b07      	cmp	r3, #7
 802c11c:	4414      	add	r4, r2
 802c11e:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 802c122:	f340 8130 	ble.w	802c386 <_vfiprintf_r+0x802>
 802c126:	9800      	ldr	r0, [sp, #0]
 802c128:	aa0e      	add	r2, sp, #56	@ 0x38
 802c12a:	4639      	mov	r1, r7
 802c12c:	f7ff fcf8 	bl	802bb20 <__sprint_r>
 802c130:	2800      	cmp	r0, #0
 802c132:	f040 8150 	bne.w	802c3d6 <_vfiprintf_r+0x852>
 802c136:	ae11      	add	r6, sp, #68	@ 0x44
 802c138:	9b01      	ldr	r3, [sp, #4]
 802c13a:	9a01      	ldr	r2, [sp, #4]
 802c13c:	6073      	str	r3, [r6, #4]
 802c13e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802c140:	f8c6 9000 	str.w	r9, [r6]
 802c144:	4413      	add	r3, r2
 802c146:	9310      	str	r3, [sp, #64]	@ 0x40
 802c148:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802c14a:	3301      	adds	r3, #1
 802c14c:	2b07      	cmp	r3, #7
 802c14e:	930f      	str	r3, [sp, #60]	@ 0x3c
 802c150:	f300 811b 	bgt.w	802c38a <_vfiprintf_r+0x806>
 802c154:	f106 0308 	add.w	r3, r6, #8
 802c158:	f01a 0f04 	tst.w	sl, #4
 802c15c:	f040 811d 	bne.w	802c39a <_vfiprintf_r+0x816>
 802c160:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802c164:	9904      	ldr	r1, [sp, #16]
 802c166:	428a      	cmp	r2, r1
 802c168:	bfac      	ite	ge
 802c16a:	189b      	addge	r3, r3, r2
 802c16c:	185b      	addlt	r3, r3, r1
 802c16e:	9303      	str	r3, [sp, #12]
 802c170:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802c172:	b13b      	cbz	r3, 802c184 <_vfiprintf_r+0x600>
 802c174:	9800      	ldr	r0, [sp, #0]
 802c176:	aa0e      	add	r2, sp, #56	@ 0x38
 802c178:	4639      	mov	r1, r7
 802c17a:	f7ff fcd1 	bl	802bb20 <__sprint_r>
 802c17e:	2800      	cmp	r0, #0
 802c180:	f040 8129 	bne.w	802c3d6 <_vfiprintf_r+0x852>
 802c184:	2300      	movs	r3, #0
 802c186:	930f      	str	r3, [sp, #60]	@ 0x3c
 802c188:	4645      	mov	r5, r8
 802c18a:	ae11      	add	r6, sp, #68	@ 0x44
 802c18c:	e55b      	b.n	802bc46 <_vfiprintf_r+0xc2>
 802c18e:	4648      	mov	r0, r9
 802c190:	f7e4 f886 	bl	80102a0 <strlen>
 802c194:	9001      	str	r0, [sp, #4]
 802c196:	e734      	b.n	802c002 <_vfiprintf_r+0x47e>
 802c198:	f04a 0a10 	orr.w	sl, sl, #16
 802c19c:	f01a 0320 	ands.w	r3, sl, #32
 802c1a0:	d008      	beq.n	802c1b4 <_vfiprintf_r+0x630>
 802c1a2:	3507      	adds	r5, #7
 802c1a4:	f025 0507 	bic.w	r5, r5, #7
 802c1a8:	46a8      	mov	r8, r5
 802c1aa:	686d      	ldr	r5, [r5, #4]
 802c1ac:	f858 4b08 	ldr.w	r4, [r8], #8
 802c1b0:	2301      	movs	r3, #1
 802c1b2:	e6d8      	b.n	802bf66 <_vfiprintf_r+0x3e2>
 802c1b4:	46a8      	mov	r8, r5
 802c1b6:	f01a 0510 	ands.w	r5, sl, #16
 802c1ba:	f858 4b04 	ldr.w	r4, [r8], #4
 802c1be:	d001      	beq.n	802c1c4 <_vfiprintf_r+0x640>
 802c1c0:	461d      	mov	r5, r3
 802c1c2:	e7f5      	b.n	802c1b0 <_vfiprintf_r+0x62c>
 802c1c4:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 802c1c8:	d001      	beq.n	802c1ce <_vfiprintf_r+0x64a>
 802c1ca:	b2a4      	uxth	r4, r4
 802c1cc:	e7f0      	b.n	802c1b0 <_vfiprintf_r+0x62c>
 802c1ce:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 802c1d2:	d0ed      	beq.n	802c1b0 <_vfiprintf_r+0x62c>
 802c1d4:	b2e4      	uxtb	r4, r4
 802c1d6:	e7f3      	b.n	802c1c0 <_vfiprintf_r+0x63c>
 802c1d8:	4a43      	ldr	r2, [pc, #268]	@ (802c2e8 <_vfiprintf_r+0x764>)
 802c1da:	e5c9      	b.n	802bd70 <_vfiprintf_r+0x1ec>
 802c1dc:	46a8      	mov	r8, r5
 802c1de:	f01a 0510 	ands.w	r5, sl, #16
 802c1e2:	f858 4b04 	ldr.w	r4, [r8], #4
 802c1e6:	d001      	beq.n	802c1ec <_vfiprintf_r+0x668>
 802c1e8:	4615      	mov	r5, r2
 802c1ea:	e5cd      	b.n	802bd88 <_vfiprintf_r+0x204>
 802c1ec:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 802c1f0:	d001      	beq.n	802c1f6 <_vfiprintf_r+0x672>
 802c1f2:	b2a4      	uxth	r4, r4
 802c1f4:	e5c8      	b.n	802bd88 <_vfiprintf_r+0x204>
 802c1f6:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 802c1fa:	f43f adc5 	beq.w	802bd88 <_vfiprintf_r+0x204>
 802c1fe:	b2e4      	uxtb	r4, r4
 802c200:	e7f2      	b.n	802c1e8 <_vfiprintf_r+0x664>
 802c202:	2c0a      	cmp	r4, #10
 802c204:	f175 0300 	sbcs.w	r3, r5, #0
 802c208:	d206      	bcs.n	802c218 <_vfiprintf_r+0x694>
 802c20a:	3430      	adds	r4, #48	@ 0x30
 802c20c:	b2e4      	uxtb	r4, r4
 802c20e:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 802c212:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 802c216:	e131      	b.n	802c47c <_vfiprintf_r+0x8f8>
 802c218:	ab3a      	add	r3, sp, #232	@ 0xe8
 802c21a:	9308      	str	r3, [sp, #32]
 802c21c:	9b04      	ldr	r3, [sp, #16]
 802c21e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 802c222:	f04f 0a00 	mov.w	sl, #0
 802c226:	930a      	str	r3, [sp, #40]	@ 0x28
 802c228:	220a      	movs	r2, #10
 802c22a:	2300      	movs	r3, #0
 802c22c:	4620      	mov	r0, r4
 802c22e:	4629      	mov	r1, r5
 802c230:	f7e4 fd92 	bl	8010d58 <__aeabi_uldivmod>
 802c234:	460b      	mov	r3, r1
 802c236:	9908      	ldr	r1, [sp, #32]
 802c238:	900b      	str	r0, [sp, #44]	@ 0x2c
 802c23a:	3230      	adds	r2, #48	@ 0x30
 802c23c:	f801 2c01 	strb.w	r2, [r1, #-1]
 802c240:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802c242:	f101 39ff 	add.w	r9, r1, #4294967295	@ 0xffffffff
 802c246:	f10a 0a01 	add.w	sl, sl, #1
 802c24a:	b1e2      	cbz	r2, 802c286 <_vfiprintf_r+0x702>
 802c24c:	9a06      	ldr	r2, [sp, #24]
 802c24e:	7812      	ldrb	r2, [r2, #0]
 802c250:	4552      	cmp	r2, sl
 802c252:	d118      	bne.n	802c286 <_vfiprintf_r+0x702>
 802c254:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 802c258:	d015      	beq.n	802c286 <_vfiprintf_r+0x702>
 802c25a:	2c0a      	cmp	r4, #10
 802c25c:	f175 0200 	sbcs.w	r2, r5, #0
 802c260:	d311      	bcc.n	802c286 <_vfiprintf_r+0x702>
 802c262:	9308      	str	r3, [sp, #32]
 802c264:	9b07      	ldr	r3, [sp, #28]
 802c266:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802c268:	eba9 0903 	sub.w	r9, r9, r3
 802c26c:	461a      	mov	r2, r3
 802c26e:	4648      	mov	r0, r9
 802c270:	f000 ff3d 	bl	802d0ee <strncpy>
 802c274:	9b06      	ldr	r3, [sp, #24]
 802c276:	785a      	ldrb	r2, [r3, #1]
 802c278:	9b08      	ldr	r3, [sp, #32]
 802c27a:	b172      	cbz	r2, 802c29a <_vfiprintf_r+0x716>
 802c27c:	9a06      	ldr	r2, [sp, #24]
 802c27e:	3201      	adds	r2, #1
 802c280:	9206      	str	r2, [sp, #24]
 802c282:	f04f 0a00 	mov.w	sl, #0
 802c286:	2c0a      	cmp	r4, #10
 802c288:	f175 0500 	sbcs.w	r5, r5, #0
 802c28c:	f0c0 80f6 	bcc.w	802c47c <_vfiprintf_r+0x8f8>
 802c290:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802c292:	f8cd 9020 	str.w	r9, [sp, #32]
 802c296:	461d      	mov	r5, r3
 802c298:	e7c6      	b.n	802c228 <_vfiprintf_r+0x6a4>
 802c29a:	4692      	mov	sl, r2
 802c29c:	e7f3      	b.n	802c286 <_vfiprintf_r+0x702>
 802c29e:	f004 030f 	and.w	r3, r4, #15
 802c2a2:	9a05      	ldr	r2, [sp, #20]
 802c2a4:	0924      	lsrs	r4, r4, #4
 802c2a6:	5cd3      	ldrb	r3, [r2, r3]
 802c2a8:	f809 3d01 	strb.w	r3, [r9, #-1]!
 802c2ac:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 802c2b0:	092d      	lsrs	r5, r5, #4
 802c2b2:	ea54 0305 	orrs.w	r3, r4, r5
 802c2b6:	d1f2      	bne.n	802c29e <_vfiprintf_r+0x71a>
 802c2b8:	e0e0      	b.n	802c47c <_vfiprintf_r+0x8f8>
 802c2ba:	b923      	cbnz	r3, 802c2c6 <_vfiprintf_r+0x742>
 802c2bc:	f01a 0f01 	tst.w	sl, #1
 802c2c0:	d001      	beq.n	802c2c6 <_vfiprintf_r+0x742>
 802c2c2:	2430      	movs	r4, #48	@ 0x30
 802c2c4:	e7a3      	b.n	802c20e <_vfiprintf_r+0x68a>
 802c2c6:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 802c2ca:	e0d7      	b.n	802c47c <_vfiprintf_r+0x8f8>
 802c2cc:	2b00      	cmp	r3, #0
 802c2ce:	f000 80a3 	beq.w	802c418 <_vfiprintf_r+0x894>
 802c2d2:	2400      	movs	r4, #0
 802c2d4:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802c2d8:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802c2dc:	46a8      	mov	r8, r5
 802c2de:	e5e0      	b.n	802bea2 <_vfiprintf_r+0x31e>
 802c2e0:	0803c49f 	.word	0x0803c49f
 802c2e4:	0803c48f 	.word	0x0803c48f
 802c2e8:	0803c45c 	.word	0x0803c45c
 802c2ec:	2110      	movs	r1, #16
 802c2ee:	6071      	str	r1, [r6, #4]
 802c2f0:	2a07      	cmp	r2, #7
 802c2f2:	4461      	add	r1, ip
 802c2f4:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802c2f8:	dd08      	ble.n	802c30c <_vfiprintf_r+0x788>
 802c2fa:	9800      	ldr	r0, [sp, #0]
 802c2fc:	aa0e      	add	r2, sp, #56	@ 0x38
 802c2fe:	4639      	mov	r1, r7
 802c300:	f7ff fc0e 	bl	802bb20 <__sprint_r>
 802c304:	2800      	cmp	r0, #0
 802c306:	d166      	bne.n	802c3d6 <_vfiprintf_r+0x852>
 802c308:	4b60      	ldr	r3, [pc, #384]	@ (802c48c <_vfiprintf_r+0x908>)
 802c30a:	a811      	add	r0, sp, #68	@ 0x44
 802c30c:	3d10      	subs	r5, #16
 802c30e:	4606      	mov	r6, r0
 802c310:	e694      	b.n	802c03c <_vfiprintf_r+0x4b8>
 802c312:	4606      	mov	r6, r0
 802c314:	e6ac      	b.n	802c070 <_vfiprintf_r+0x4ec>
 802c316:	9800      	ldr	r0, [sp, #0]
 802c318:	aa0e      	add	r2, sp, #56	@ 0x38
 802c31a:	4639      	mov	r1, r7
 802c31c:	f7ff fc00 	bl	802bb20 <__sprint_r>
 802c320:	2800      	cmp	r0, #0
 802c322:	d158      	bne.n	802c3d6 <_vfiprintf_r+0x852>
 802c324:	ae11      	add	r6, sp, #68	@ 0x44
 802c326:	e6b5      	b.n	802c094 <_vfiprintf_r+0x510>
 802c328:	9800      	ldr	r0, [sp, #0]
 802c32a:	aa0e      	add	r2, sp, #56	@ 0x38
 802c32c:	4639      	mov	r1, r7
 802c32e:	f7ff fbf7 	bl	802bb20 <__sprint_r>
 802c332:	2800      	cmp	r0, #0
 802c334:	d14f      	bne.n	802c3d6 <_vfiprintf_r+0x852>
 802c336:	ae11      	add	r6, sp, #68	@ 0x44
 802c338:	e6bc      	b.n	802c0b4 <_vfiprintf_r+0x530>
 802c33a:	2110      	movs	r1, #16
 802c33c:	6071      	str	r1, [r6, #4]
 802c33e:	2a07      	cmp	r2, #7
 802c340:	4461      	add	r1, ip
 802c342:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802c346:	dd08      	ble.n	802c35a <_vfiprintf_r+0x7d6>
 802c348:	9800      	ldr	r0, [sp, #0]
 802c34a:	aa0e      	add	r2, sp, #56	@ 0x38
 802c34c:	4639      	mov	r1, r7
 802c34e:	f7ff fbe7 	bl	802bb20 <__sprint_r>
 802c352:	2800      	cmp	r0, #0
 802c354:	d13f      	bne.n	802c3d6 <_vfiprintf_r+0x852>
 802c356:	4b4e      	ldr	r3, [pc, #312]	@ (802c490 <_vfiprintf_r+0x90c>)
 802c358:	a811      	add	r0, sp, #68	@ 0x44
 802c35a:	3d10      	subs	r5, #16
 802c35c:	4606      	mov	r6, r0
 802c35e:	e6b2      	b.n	802c0c6 <_vfiprintf_r+0x542>
 802c360:	4606      	mov	r6, r0
 802c362:	e6ca      	b.n	802c0fa <_vfiprintf_r+0x576>
 802c364:	2010      	movs	r0, #16
 802c366:	4402      	add	r2, r0
 802c368:	2b07      	cmp	r3, #7
 802c36a:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802c36e:	6070      	str	r0, [r6, #4]
 802c370:	dd06      	ble.n	802c380 <_vfiprintf_r+0x7fc>
 802c372:	9800      	ldr	r0, [sp, #0]
 802c374:	aa0e      	add	r2, sp, #56	@ 0x38
 802c376:	4639      	mov	r1, r7
 802c378:	f7ff fbd2 	bl	802bb20 <__sprint_r>
 802c37c:	bb58      	cbnz	r0, 802c3d6 <_vfiprintf_r+0x852>
 802c37e:	a911      	add	r1, sp, #68	@ 0x44
 802c380:	3c10      	subs	r4, #16
 802c382:	460e      	mov	r6, r1
 802c384:	e6bd      	b.n	802c102 <_vfiprintf_r+0x57e>
 802c386:	460e      	mov	r6, r1
 802c388:	e6d6      	b.n	802c138 <_vfiprintf_r+0x5b4>
 802c38a:	9800      	ldr	r0, [sp, #0]
 802c38c:	aa0e      	add	r2, sp, #56	@ 0x38
 802c38e:	4639      	mov	r1, r7
 802c390:	f7ff fbc6 	bl	802bb20 <__sprint_r>
 802c394:	b9f8      	cbnz	r0, 802c3d6 <_vfiprintf_r+0x852>
 802c396:	ab11      	add	r3, sp, #68	@ 0x44
 802c398:	e6de      	b.n	802c158 <_vfiprintf_r+0x5d4>
 802c39a:	9a02      	ldr	r2, [sp, #8]
 802c39c:	9904      	ldr	r1, [sp, #16]
 802c39e:	1a54      	subs	r4, r2, r1
 802c3a0:	2c00      	cmp	r4, #0
 802c3a2:	f77f aedd 	ble.w	802c160 <_vfiprintf_r+0x5dc>
 802c3a6:	4d39      	ldr	r5, [pc, #228]	@ (802c48c <_vfiprintf_r+0x908>)
 802c3a8:	2610      	movs	r6, #16
 802c3aa:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 802c3ae:	2c10      	cmp	r4, #16
 802c3b0:	f102 0201 	add.w	r2, r2, #1
 802c3b4:	601d      	str	r5, [r3, #0]
 802c3b6:	dc1d      	bgt.n	802c3f4 <_vfiprintf_r+0x870>
 802c3b8:	605c      	str	r4, [r3, #4]
 802c3ba:	2a07      	cmp	r2, #7
 802c3bc:	440c      	add	r4, r1
 802c3be:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 802c3c2:	f77f aecd 	ble.w	802c160 <_vfiprintf_r+0x5dc>
 802c3c6:	9800      	ldr	r0, [sp, #0]
 802c3c8:	aa0e      	add	r2, sp, #56	@ 0x38
 802c3ca:	4639      	mov	r1, r7
 802c3cc:	f7ff fba8 	bl	802bb20 <__sprint_r>
 802c3d0:	2800      	cmp	r0, #0
 802c3d2:	f43f aec5 	beq.w	802c160 <_vfiprintf_r+0x5dc>
 802c3d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802c3d8:	07d9      	lsls	r1, r3, #31
 802c3da:	d405      	bmi.n	802c3e8 <_vfiprintf_r+0x864>
 802c3dc:	89bb      	ldrh	r3, [r7, #12]
 802c3de:	059a      	lsls	r2, r3, #22
 802c3e0:	d402      	bmi.n	802c3e8 <_vfiprintf_r+0x864>
 802c3e2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802c3e4:	f002 f877 	bl	802e4d6 <__retarget_lock_release_recursive>
 802c3e8:	89bb      	ldrh	r3, [r7, #12]
 802c3ea:	065b      	lsls	r3, r3, #25
 802c3ec:	f57f abfb 	bpl.w	802bbe6 <_vfiprintf_r+0x62>
 802c3f0:	f7ff bbf6 	b.w	802bbe0 <_vfiprintf_r+0x5c>
 802c3f4:	3110      	adds	r1, #16
 802c3f6:	2a07      	cmp	r2, #7
 802c3f8:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802c3fc:	605e      	str	r6, [r3, #4]
 802c3fe:	dc02      	bgt.n	802c406 <_vfiprintf_r+0x882>
 802c400:	3308      	adds	r3, #8
 802c402:	3c10      	subs	r4, #16
 802c404:	e7d1      	b.n	802c3aa <_vfiprintf_r+0x826>
 802c406:	9800      	ldr	r0, [sp, #0]
 802c408:	aa0e      	add	r2, sp, #56	@ 0x38
 802c40a:	4639      	mov	r1, r7
 802c40c:	f7ff fb88 	bl	802bb20 <__sprint_r>
 802c410:	2800      	cmp	r0, #0
 802c412:	d1e0      	bne.n	802c3d6 <_vfiprintf_r+0x852>
 802c414:	ab11      	add	r3, sp, #68	@ 0x44
 802c416:	e7f4      	b.n	802c402 <_vfiprintf_r+0x87e>
 802c418:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802c41a:	b913      	cbnz	r3, 802c422 <_vfiprintf_r+0x89e>
 802c41c:	2300      	movs	r3, #0
 802c41e:	930f      	str	r3, [sp, #60]	@ 0x3c
 802c420:	e7d9      	b.n	802c3d6 <_vfiprintf_r+0x852>
 802c422:	9800      	ldr	r0, [sp, #0]
 802c424:	aa0e      	add	r2, sp, #56	@ 0x38
 802c426:	4639      	mov	r1, r7
 802c428:	f7ff fb7a 	bl	802bb20 <__sprint_r>
 802c42c:	2800      	cmp	r0, #0
 802c42e:	d0f5      	beq.n	802c41c <_vfiprintf_r+0x898>
 802c430:	e7d1      	b.n	802c3d6 <_vfiprintf_r+0x852>
 802c432:	ea54 0205 	orrs.w	r2, r4, r5
 802c436:	f8cd a010 	str.w	sl, [sp, #16]
 802c43a:	f43f ada6 	beq.w	802bf8a <_vfiprintf_r+0x406>
 802c43e:	2b01      	cmp	r3, #1
 802c440:	f43f aedf 	beq.w	802c202 <_vfiprintf_r+0x67e>
 802c444:	2b02      	cmp	r3, #2
 802c446:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 802c44a:	f43f af28 	beq.w	802c29e <_vfiprintf_r+0x71a>
 802c44e:	f004 0307 	and.w	r3, r4, #7
 802c452:	08e4      	lsrs	r4, r4, #3
 802c454:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 802c458:	08ed      	lsrs	r5, r5, #3
 802c45a:	3330      	adds	r3, #48	@ 0x30
 802c45c:	ea54 0105 	orrs.w	r1, r4, r5
 802c460:	464a      	mov	r2, r9
 802c462:	f809 3d01 	strb.w	r3, [r9, #-1]!
 802c466:	d1f2      	bne.n	802c44e <_vfiprintf_r+0x8ca>
 802c468:	9904      	ldr	r1, [sp, #16]
 802c46a:	07c8      	lsls	r0, r1, #31
 802c46c:	d506      	bpl.n	802c47c <_vfiprintf_r+0x8f8>
 802c46e:	2b30      	cmp	r3, #48	@ 0x30
 802c470:	d004      	beq.n	802c47c <_vfiprintf_r+0x8f8>
 802c472:	2330      	movs	r3, #48	@ 0x30
 802c474:	f809 3c01 	strb.w	r3, [r9, #-1]
 802c478:	f1a2 0902 	sub.w	r9, r2, #2
 802c47c:	ab3a      	add	r3, sp, #232	@ 0xe8
 802c47e:	eba3 0309 	sub.w	r3, r3, r9
 802c482:	9c01      	ldr	r4, [sp, #4]
 802c484:	f8dd a010 	ldr.w	sl, [sp, #16]
 802c488:	9301      	str	r3, [sp, #4]
 802c48a:	e5bb      	b.n	802c004 <_vfiprintf_r+0x480>
 802c48c:	0803c49f 	.word	0x0803c49f
 802c490:	0803c48f 	.word	0x0803c48f

0802c494 <__sbprintf>:
 802c494:	b5f0      	push	{r4, r5, r6, r7, lr}
 802c496:	461f      	mov	r7, r3
 802c498:	898b      	ldrh	r3, [r1, #12]
 802c49a:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 802c49e:	f023 0302 	bic.w	r3, r3, #2
 802c4a2:	f8ad 300c 	strh.w	r3, [sp, #12]
 802c4a6:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 802c4a8:	9319      	str	r3, [sp, #100]	@ 0x64
 802c4aa:	89cb      	ldrh	r3, [r1, #14]
 802c4ac:	f8ad 300e 	strh.w	r3, [sp, #14]
 802c4b0:	69cb      	ldr	r3, [r1, #28]
 802c4b2:	9307      	str	r3, [sp, #28]
 802c4b4:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 802c4b6:	9309      	str	r3, [sp, #36]	@ 0x24
 802c4b8:	ab1a      	add	r3, sp, #104	@ 0x68
 802c4ba:	9300      	str	r3, [sp, #0]
 802c4bc:	9304      	str	r3, [sp, #16]
 802c4be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802c4c2:	4615      	mov	r5, r2
 802c4c4:	4606      	mov	r6, r0
 802c4c6:	9302      	str	r3, [sp, #8]
 802c4c8:	9305      	str	r3, [sp, #20]
 802c4ca:	a816      	add	r0, sp, #88	@ 0x58
 802c4cc:	2300      	movs	r3, #0
 802c4ce:	460c      	mov	r4, r1
 802c4d0:	9306      	str	r3, [sp, #24]
 802c4d2:	f001 fffb 	bl	802e4cc <__retarget_lock_init_recursive>
 802c4d6:	462a      	mov	r2, r5
 802c4d8:	463b      	mov	r3, r7
 802c4da:	4669      	mov	r1, sp
 802c4dc:	4630      	mov	r0, r6
 802c4de:	f7ff fb51 	bl	802bb84 <_vfiprintf_r>
 802c4e2:	1e05      	subs	r5, r0, #0
 802c4e4:	db07      	blt.n	802c4f6 <__sbprintf+0x62>
 802c4e6:	4669      	mov	r1, sp
 802c4e8:	4630      	mov	r0, r6
 802c4ea:	f000 f9d1 	bl	802c890 <_fflush_r>
 802c4ee:	2800      	cmp	r0, #0
 802c4f0:	bf18      	it	ne
 802c4f2:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 802c4f6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 802c4fa:	9816      	ldr	r0, [sp, #88]	@ 0x58
 802c4fc:	065b      	lsls	r3, r3, #25
 802c4fe:	bf42      	ittt	mi
 802c500:	89a3      	ldrhmi	r3, [r4, #12]
 802c502:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 802c506:	81a3      	strhmi	r3, [r4, #12]
 802c508:	f001 ffe1 	bl	802e4ce <__retarget_lock_close_recursive>
 802c50c:	4628      	mov	r0, r5
 802c50e:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 802c512:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802c514 <putchar>:
 802c514:	4b02      	ldr	r3, [pc, #8]	@ (802c520 <putchar+0xc>)
 802c516:	4601      	mov	r1, r0
 802c518:	6818      	ldr	r0, [r3, #0]
 802c51a:	6882      	ldr	r2, [r0, #8]
 802c51c:	f007 bacc 	b.w	8033ab8 <_putc_r>
 802c520:	200002d8 	.word	0x200002d8

0802c524 <_puts_r>:
 802c524:	b530      	push	{r4, r5, lr}
 802c526:	4605      	mov	r5, r0
 802c528:	b089      	sub	sp, #36	@ 0x24
 802c52a:	4608      	mov	r0, r1
 802c52c:	460c      	mov	r4, r1
 802c52e:	f7e3 feb7 	bl	80102a0 <strlen>
 802c532:	4b1e      	ldr	r3, [pc, #120]	@ (802c5ac <_puts_r+0x88>)
 802c534:	9306      	str	r3, [sp, #24]
 802c536:	2301      	movs	r3, #1
 802c538:	e9cd 4004 	strd	r4, r0, [sp, #16]
 802c53c:	9307      	str	r3, [sp, #28]
 802c53e:	4418      	add	r0, r3
 802c540:	ab04      	add	r3, sp, #16
 802c542:	9301      	str	r3, [sp, #4]
 802c544:	2302      	movs	r3, #2
 802c546:	9302      	str	r3, [sp, #8]
 802c548:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 802c54a:	68ac      	ldr	r4, [r5, #8]
 802c54c:	9003      	str	r0, [sp, #12]
 802c54e:	b913      	cbnz	r3, 802c556 <_puts_r+0x32>
 802c550:	4628      	mov	r0, r5
 802c552:	f000 fadf 	bl	802cb14 <__sinit>
 802c556:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c558:	07db      	lsls	r3, r3, #31
 802c55a:	d405      	bmi.n	802c568 <_puts_r+0x44>
 802c55c:	89a3      	ldrh	r3, [r4, #12]
 802c55e:	0598      	lsls	r0, r3, #22
 802c560:	d402      	bmi.n	802c568 <_puts_r+0x44>
 802c562:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c564:	f001 ffb5 	bl	802e4d2 <__retarget_lock_acquire_recursive>
 802c568:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c56c:	0499      	lsls	r1, r3, #18
 802c56e:	d406      	bmi.n	802c57e <_puts_r+0x5a>
 802c570:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802c574:	81a3      	strh	r3, [r4, #12]
 802c576:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c578:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 802c57c:	6663      	str	r3, [r4, #100]	@ 0x64
 802c57e:	4628      	mov	r0, r5
 802c580:	aa01      	add	r2, sp, #4
 802c582:	4621      	mov	r1, r4
 802c584:	f000 fb18 	bl	802cbb8 <__sfvwrite_r>
 802c588:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c58a:	2800      	cmp	r0, #0
 802c58c:	bf0c      	ite	eq
 802c58e:	250a      	moveq	r5, #10
 802c590:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 802c594:	07da      	lsls	r2, r3, #31
 802c596:	d405      	bmi.n	802c5a4 <_puts_r+0x80>
 802c598:	89a3      	ldrh	r3, [r4, #12]
 802c59a:	059b      	lsls	r3, r3, #22
 802c59c:	d402      	bmi.n	802c5a4 <_puts_r+0x80>
 802c59e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c5a0:	f001 ff99 	bl	802e4d6 <__retarget_lock_release_recursive>
 802c5a4:	4628      	mov	r0, r5
 802c5a6:	b009      	add	sp, #36	@ 0x24
 802c5a8:	bd30      	pop	{r4, r5, pc}
 802c5aa:	bf00      	nop
 802c5ac:	0803c439 	.word	0x0803c439

0802c5b0 <puts>:
 802c5b0:	4b02      	ldr	r3, [pc, #8]	@ (802c5bc <puts+0xc>)
 802c5b2:	4601      	mov	r1, r0
 802c5b4:	6818      	ldr	r0, [r3, #0]
 802c5b6:	f7ff bfb5 	b.w	802c524 <_puts_r>
 802c5ba:	bf00      	nop
 802c5bc:	200002d8 	.word	0x200002d8

0802c5c0 <srand>:
 802c5c0:	4b03      	ldr	r3, [pc, #12]	@ (802c5d0 <srand+0x10>)
 802c5c2:	681b      	ldr	r3, [r3, #0]
 802c5c4:	2200      	movs	r2, #0
 802c5c6:	f8c3 0098 	str.w	r0, [r3, #152]	@ 0x98
 802c5ca:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 802c5ce:	4770      	bx	lr
 802c5d0:	200002d8 	.word	0x200002d8

0802c5d4 <rand>:
 802c5d4:	4b0a      	ldr	r3, [pc, #40]	@ (802c600 <rand+0x2c>)
 802c5d6:	480b      	ldr	r0, [pc, #44]	@ (802c604 <rand+0x30>)
 802c5d8:	6819      	ldr	r1, [r3, #0]
 802c5da:	4a0b      	ldr	r2, [pc, #44]	@ (802c608 <rand+0x34>)
 802c5dc:	f8d1 3098 	ldr.w	r3, [r1, #152]	@ 0x98
 802c5e0:	b510      	push	{r4, lr}
 802c5e2:	f8d1 409c 	ldr.w	r4, [r1, #156]	@ 0x9c
 802c5e6:	4358      	muls	r0, r3
 802c5e8:	fb02 0004 	mla	r0, r2, r4, r0
 802c5ec:	fba3 3202 	umull	r3, r2, r3, r2
 802c5f0:	3301      	adds	r3, #1
 802c5f2:	eb40 0002 	adc.w	r0, r0, r2
 802c5f6:	e9c1 3026 	strd	r3, r0, [r1, #152]	@ 0x98
 802c5fa:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 802c5fe:	bd10      	pop	{r4, pc}
 802c600:	200002d8 	.word	0x200002d8
 802c604:	5851f42d 	.word	0x5851f42d
 802c608:	4c957f2d 	.word	0x4c957f2d

0802c60c <snprintf>:
 802c60c:	b40c      	push	{r2, r3}
 802c60e:	b530      	push	{r4, r5, lr}
 802c610:	4b17      	ldr	r3, [pc, #92]	@ (802c670 <snprintf+0x64>)
 802c612:	1e0c      	subs	r4, r1, #0
 802c614:	681d      	ldr	r5, [r3, #0]
 802c616:	b09d      	sub	sp, #116	@ 0x74
 802c618:	da08      	bge.n	802c62c <snprintf+0x20>
 802c61a:	238b      	movs	r3, #139	@ 0x8b
 802c61c:	602b      	str	r3, [r5, #0]
 802c61e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802c622:	b01d      	add	sp, #116	@ 0x74
 802c624:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802c628:	b002      	add	sp, #8
 802c62a:	4770      	bx	lr
 802c62c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802c630:	f8ad 3014 	strh.w	r3, [sp, #20]
 802c634:	bf14      	ite	ne
 802c636:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802c63a:	4623      	moveq	r3, r4
 802c63c:	9304      	str	r3, [sp, #16]
 802c63e:	9307      	str	r3, [sp, #28]
 802c640:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802c644:	9002      	str	r0, [sp, #8]
 802c646:	9006      	str	r0, [sp, #24]
 802c648:	f8ad 3016 	strh.w	r3, [sp, #22]
 802c64c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802c64e:	ab21      	add	r3, sp, #132	@ 0x84
 802c650:	a902      	add	r1, sp, #8
 802c652:	4628      	mov	r0, r5
 802c654:	9301      	str	r3, [sp, #4]
 802c656:	f004 fe7b 	bl	8031350 <_svfprintf_r>
 802c65a:	1c43      	adds	r3, r0, #1
 802c65c:	bfbc      	itt	lt
 802c65e:	238b      	movlt	r3, #139	@ 0x8b
 802c660:	602b      	strlt	r3, [r5, #0]
 802c662:	2c00      	cmp	r4, #0
 802c664:	d0dd      	beq.n	802c622 <snprintf+0x16>
 802c666:	9b02      	ldr	r3, [sp, #8]
 802c668:	2200      	movs	r2, #0
 802c66a:	701a      	strb	r2, [r3, #0]
 802c66c:	e7d9      	b.n	802c622 <snprintf+0x16>
 802c66e:	bf00      	nop
 802c670:	200002d8 	.word	0x200002d8

0802c674 <_strtol_l.constprop.0>:
 802c674:	2b24      	cmp	r3, #36	@ 0x24
 802c676:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802c67a:	4686      	mov	lr, r0
 802c67c:	4690      	mov	r8, r2
 802c67e:	d801      	bhi.n	802c684 <_strtol_l.constprop.0+0x10>
 802c680:	2b01      	cmp	r3, #1
 802c682:	d106      	bne.n	802c692 <_strtol_l.constprop.0+0x1e>
 802c684:	f001 fef0 	bl	802e468 <__errno>
 802c688:	2316      	movs	r3, #22
 802c68a:	6003      	str	r3, [r0, #0]
 802c68c:	2000      	movs	r0, #0
 802c68e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c692:	4834      	ldr	r0, [pc, #208]	@ (802c764 <_strtol_l.constprop.0+0xf0>)
 802c694:	460d      	mov	r5, r1
 802c696:	462a      	mov	r2, r5
 802c698:	f815 4b01 	ldrb.w	r4, [r5], #1
 802c69c:	5d06      	ldrb	r6, [r0, r4]
 802c69e:	f016 0608 	ands.w	r6, r6, #8
 802c6a2:	d1f8      	bne.n	802c696 <_strtol_l.constprop.0+0x22>
 802c6a4:	2c2d      	cmp	r4, #45	@ 0x2d
 802c6a6:	d12d      	bne.n	802c704 <_strtol_l.constprop.0+0x90>
 802c6a8:	782c      	ldrb	r4, [r5, #0]
 802c6aa:	2601      	movs	r6, #1
 802c6ac:	1c95      	adds	r5, r2, #2
 802c6ae:	f033 0210 	bics.w	r2, r3, #16
 802c6b2:	d109      	bne.n	802c6c8 <_strtol_l.constprop.0+0x54>
 802c6b4:	2c30      	cmp	r4, #48	@ 0x30
 802c6b6:	d12a      	bne.n	802c70e <_strtol_l.constprop.0+0x9a>
 802c6b8:	782a      	ldrb	r2, [r5, #0]
 802c6ba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 802c6be:	2a58      	cmp	r2, #88	@ 0x58
 802c6c0:	d125      	bne.n	802c70e <_strtol_l.constprop.0+0x9a>
 802c6c2:	786c      	ldrb	r4, [r5, #1]
 802c6c4:	2310      	movs	r3, #16
 802c6c6:	3502      	adds	r5, #2
 802c6c8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 802c6cc:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 802c6d0:	2200      	movs	r2, #0
 802c6d2:	fbbc f9f3 	udiv	r9, ip, r3
 802c6d6:	4610      	mov	r0, r2
 802c6d8:	fb03 ca19 	mls	sl, r3, r9, ip
 802c6dc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 802c6e0:	2f09      	cmp	r7, #9
 802c6e2:	d81b      	bhi.n	802c71c <_strtol_l.constprop.0+0xa8>
 802c6e4:	463c      	mov	r4, r7
 802c6e6:	42a3      	cmp	r3, r4
 802c6e8:	dd27      	ble.n	802c73a <_strtol_l.constprop.0+0xc6>
 802c6ea:	1c57      	adds	r7, r2, #1
 802c6ec:	d007      	beq.n	802c6fe <_strtol_l.constprop.0+0x8a>
 802c6ee:	4581      	cmp	r9, r0
 802c6f0:	d320      	bcc.n	802c734 <_strtol_l.constprop.0+0xc0>
 802c6f2:	d101      	bne.n	802c6f8 <_strtol_l.constprop.0+0x84>
 802c6f4:	45a2      	cmp	sl, r4
 802c6f6:	db1d      	blt.n	802c734 <_strtol_l.constprop.0+0xc0>
 802c6f8:	fb00 4003 	mla	r0, r0, r3, r4
 802c6fc:	2201      	movs	r2, #1
 802c6fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 802c702:	e7eb      	b.n	802c6dc <_strtol_l.constprop.0+0x68>
 802c704:	2c2b      	cmp	r4, #43	@ 0x2b
 802c706:	bf04      	itt	eq
 802c708:	782c      	ldrbeq	r4, [r5, #0]
 802c70a:	1c95      	addeq	r5, r2, #2
 802c70c:	e7cf      	b.n	802c6ae <_strtol_l.constprop.0+0x3a>
 802c70e:	2b00      	cmp	r3, #0
 802c710:	d1da      	bne.n	802c6c8 <_strtol_l.constprop.0+0x54>
 802c712:	2c30      	cmp	r4, #48	@ 0x30
 802c714:	bf0c      	ite	eq
 802c716:	2308      	moveq	r3, #8
 802c718:	230a      	movne	r3, #10
 802c71a:	e7d5      	b.n	802c6c8 <_strtol_l.constprop.0+0x54>
 802c71c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 802c720:	2f19      	cmp	r7, #25
 802c722:	d801      	bhi.n	802c728 <_strtol_l.constprop.0+0xb4>
 802c724:	3c37      	subs	r4, #55	@ 0x37
 802c726:	e7de      	b.n	802c6e6 <_strtol_l.constprop.0+0x72>
 802c728:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 802c72c:	2f19      	cmp	r7, #25
 802c72e:	d804      	bhi.n	802c73a <_strtol_l.constprop.0+0xc6>
 802c730:	3c57      	subs	r4, #87	@ 0x57
 802c732:	e7d8      	b.n	802c6e6 <_strtol_l.constprop.0+0x72>
 802c734:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802c738:	e7e1      	b.n	802c6fe <_strtol_l.constprop.0+0x8a>
 802c73a:	1c53      	adds	r3, r2, #1
 802c73c:	d108      	bne.n	802c750 <_strtol_l.constprop.0+0xdc>
 802c73e:	2322      	movs	r3, #34	@ 0x22
 802c740:	f8ce 3000 	str.w	r3, [lr]
 802c744:	4660      	mov	r0, ip
 802c746:	f1b8 0f00 	cmp.w	r8, #0
 802c74a:	d0a0      	beq.n	802c68e <_strtol_l.constprop.0+0x1a>
 802c74c:	1e69      	subs	r1, r5, #1
 802c74e:	e006      	b.n	802c75e <_strtol_l.constprop.0+0xea>
 802c750:	b106      	cbz	r6, 802c754 <_strtol_l.constprop.0+0xe0>
 802c752:	4240      	negs	r0, r0
 802c754:	f1b8 0f00 	cmp.w	r8, #0
 802c758:	d099      	beq.n	802c68e <_strtol_l.constprop.0+0x1a>
 802c75a:	2a00      	cmp	r2, #0
 802c75c:	d1f6      	bne.n	802c74c <_strtol_l.constprop.0+0xd8>
 802c75e:	f8c8 1000 	str.w	r1, [r8]
 802c762:	e794      	b.n	802c68e <_strtol_l.constprop.0+0x1a>
 802c764:	0803c7f9 	.word	0x0803c7f9

0802c768 <_strtol_r>:
 802c768:	f7ff bf84 	b.w	802c674 <_strtol_l.constprop.0>

0802c76c <strtol>:
 802c76c:	4613      	mov	r3, r2
 802c76e:	460a      	mov	r2, r1
 802c770:	4601      	mov	r1, r0
 802c772:	4802      	ldr	r0, [pc, #8]	@ (802c77c <strtol+0x10>)
 802c774:	6800      	ldr	r0, [r0, #0]
 802c776:	f7ff bf7d 	b.w	802c674 <_strtol_l.constprop.0>
 802c77a:	bf00      	nop
 802c77c:	200002d8 	.word	0x200002d8

0802c780 <__sflush_r>:
 802c780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c784:	4605      	mov	r5, r0
 802c786:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 802c78a:	0706      	lsls	r6, r0, #28
 802c78c:	460c      	mov	r4, r1
 802c78e:	d457      	bmi.n	802c840 <__sflush_r+0xc0>
 802c790:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 802c794:	818b      	strh	r3, [r1, #12]
 802c796:	684b      	ldr	r3, [r1, #4]
 802c798:	2b00      	cmp	r3, #0
 802c79a:	dc02      	bgt.n	802c7a2 <__sflush_r+0x22>
 802c79c:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 802c79e:	2b00      	cmp	r3, #0
 802c7a0:	dd4c      	ble.n	802c83c <__sflush_r+0xbc>
 802c7a2:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802c7a4:	2e00      	cmp	r6, #0
 802c7a6:	d049      	beq.n	802c83c <__sflush_r+0xbc>
 802c7a8:	2300      	movs	r3, #0
 802c7aa:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 802c7ae:	682f      	ldr	r7, [r5, #0]
 802c7b0:	69e1      	ldr	r1, [r4, #28]
 802c7b2:	602b      	str	r3, [r5, #0]
 802c7b4:	d034      	beq.n	802c820 <__sflush_r+0xa0>
 802c7b6:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 802c7b8:	89a3      	ldrh	r3, [r4, #12]
 802c7ba:	0759      	lsls	r1, r3, #29
 802c7bc:	d505      	bpl.n	802c7ca <__sflush_r+0x4a>
 802c7be:	6863      	ldr	r3, [r4, #4]
 802c7c0:	1ad2      	subs	r2, r2, r3
 802c7c2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 802c7c4:	b10b      	cbz	r3, 802c7ca <__sflush_r+0x4a>
 802c7c6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 802c7c8:	1ad2      	subs	r2, r2, r3
 802c7ca:	2300      	movs	r3, #0
 802c7cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802c7ce:	69e1      	ldr	r1, [r4, #28]
 802c7d0:	4628      	mov	r0, r5
 802c7d2:	47b0      	blx	r6
 802c7d4:	1c43      	adds	r3, r0, #1
 802c7d6:	d106      	bne.n	802c7e6 <__sflush_r+0x66>
 802c7d8:	682a      	ldr	r2, [r5, #0]
 802c7da:	2a1d      	cmp	r2, #29
 802c7dc:	d848      	bhi.n	802c870 <__sflush_r+0xf0>
 802c7de:	4b2b      	ldr	r3, [pc, #172]	@ (802c88c <__sflush_r+0x10c>)
 802c7e0:	4113      	asrs	r3, r2
 802c7e2:	07de      	lsls	r6, r3, #31
 802c7e4:	d444      	bmi.n	802c870 <__sflush_r+0xf0>
 802c7e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c7ea:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 802c7ee:	81a2      	strh	r2, [r4, #12]
 802c7f0:	2200      	movs	r2, #0
 802c7f2:	6062      	str	r2, [r4, #4]
 802c7f4:	04d9      	lsls	r1, r3, #19
 802c7f6:	6922      	ldr	r2, [r4, #16]
 802c7f8:	6022      	str	r2, [r4, #0]
 802c7fa:	d504      	bpl.n	802c806 <__sflush_r+0x86>
 802c7fc:	1c42      	adds	r2, r0, #1
 802c7fe:	d101      	bne.n	802c804 <__sflush_r+0x84>
 802c800:	682b      	ldr	r3, [r5, #0]
 802c802:	b903      	cbnz	r3, 802c806 <__sflush_r+0x86>
 802c804:	6520      	str	r0, [r4, #80]	@ 0x50
 802c806:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802c808:	602f      	str	r7, [r5, #0]
 802c80a:	b1b9      	cbz	r1, 802c83c <__sflush_r+0xbc>
 802c80c:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802c810:	4299      	cmp	r1, r3
 802c812:	d002      	beq.n	802c81a <__sflush_r+0x9a>
 802c814:	4628      	mov	r0, r5
 802c816:	f002 fd61 	bl	802f2dc <_free_r>
 802c81a:	2300      	movs	r3, #0
 802c81c:	6323      	str	r3, [r4, #48]	@ 0x30
 802c81e:	e00d      	b.n	802c83c <__sflush_r+0xbc>
 802c820:	2301      	movs	r3, #1
 802c822:	4628      	mov	r0, r5
 802c824:	47b0      	blx	r6
 802c826:	4602      	mov	r2, r0
 802c828:	1c50      	adds	r0, r2, #1
 802c82a:	d1c5      	bne.n	802c7b8 <__sflush_r+0x38>
 802c82c:	682b      	ldr	r3, [r5, #0]
 802c82e:	2b00      	cmp	r3, #0
 802c830:	d0c2      	beq.n	802c7b8 <__sflush_r+0x38>
 802c832:	2b1d      	cmp	r3, #29
 802c834:	d001      	beq.n	802c83a <__sflush_r+0xba>
 802c836:	2b16      	cmp	r3, #22
 802c838:	d11a      	bne.n	802c870 <__sflush_r+0xf0>
 802c83a:	602f      	str	r7, [r5, #0]
 802c83c:	2000      	movs	r0, #0
 802c83e:	e01e      	b.n	802c87e <__sflush_r+0xfe>
 802c840:	690f      	ldr	r7, [r1, #16]
 802c842:	2f00      	cmp	r7, #0
 802c844:	d0fa      	beq.n	802c83c <__sflush_r+0xbc>
 802c846:	0783      	lsls	r3, r0, #30
 802c848:	680e      	ldr	r6, [r1, #0]
 802c84a:	bf08      	it	eq
 802c84c:	694b      	ldreq	r3, [r1, #20]
 802c84e:	600f      	str	r7, [r1, #0]
 802c850:	bf18      	it	ne
 802c852:	2300      	movne	r3, #0
 802c854:	eba6 0807 	sub.w	r8, r6, r7
 802c858:	608b      	str	r3, [r1, #8]
 802c85a:	f1b8 0f00 	cmp.w	r8, #0
 802c85e:	dded      	ble.n	802c83c <__sflush_r+0xbc>
 802c860:	69e1      	ldr	r1, [r4, #28]
 802c862:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 802c864:	4643      	mov	r3, r8
 802c866:	463a      	mov	r2, r7
 802c868:	4628      	mov	r0, r5
 802c86a:	47b0      	blx	r6
 802c86c:	2800      	cmp	r0, #0
 802c86e:	dc08      	bgt.n	802c882 <__sflush_r+0x102>
 802c870:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c874:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802c878:	81a3      	strh	r3, [r4, #12]
 802c87a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802c87e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c882:	4407      	add	r7, r0
 802c884:	eba8 0800 	sub.w	r8, r8, r0
 802c888:	e7e7      	b.n	802c85a <__sflush_r+0xda>
 802c88a:	bf00      	nop
 802c88c:	dfbffffe 	.word	0xdfbffffe

0802c890 <_fflush_r>:
 802c890:	b538      	push	{r3, r4, r5, lr}
 802c892:	460c      	mov	r4, r1
 802c894:	4605      	mov	r5, r0
 802c896:	b118      	cbz	r0, 802c8a0 <_fflush_r+0x10>
 802c898:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802c89a:	b90b      	cbnz	r3, 802c8a0 <_fflush_r+0x10>
 802c89c:	f000 f93a 	bl	802cb14 <__sinit>
 802c8a0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 802c8a4:	b1b8      	cbz	r0, 802c8d6 <_fflush_r+0x46>
 802c8a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c8a8:	07db      	lsls	r3, r3, #31
 802c8aa:	d404      	bmi.n	802c8b6 <_fflush_r+0x26>
 802c8ac:	0581      	lsls	r1, r0, #22
 802c8ae:	d402      	bmi.n	802c8b6 <_fflush_r+0x26>
 802c8b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c8b2:	f001 fe0e 	bl	802e4d2 <__retarget_lock_acquire_recursive>
 802c8b6:	4628      	mov	r0, r5
 802c8b8:	4621      	mov	r1, r4
 802c8ba:	f7ff ff61 	bl	802c780 <__sflush_r>
 802c8be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c8c0:	07da      	lsls	r2, r3, #31
 802c8c2:	4605      	mov	r5, r0
 802c8c4:	d405      	bmi.n	802c8d2 <_fflush_r+0x42>
 802c8c6:	89a3      	ldrh	r3, [r4, #12]
 802c8c8:	059b      	lsls	r3, r3, #22
 802c8ca:	d402      	bmi.n	802c8d2 <_fflush_r+0x42>
 802c8cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c8ce:	f001 fe02 	bl	802e4d6 <__retarget_lock_release_recursive>
 802c8d2:	4628      	mov	r0, r5
 802c8d4:	bd38      	pop	{r3, r4, r5, pc}
 802c8d6:	4605      	mov	r5, r0
 802c8d8:	e7fb      	b.n	802c8d2 <_fflush_r+0x42>
	...

0802c8dc <sprintf>:
 802c8dc:	b40e      	push	{r1, r2, r3}
 802c8de:	b500      	push	{lr}
 802c8e0:	b09c      	sub	sp, #112	@ 0x70
 802c8e2:	ab1d      	add	r3, sp, #116	@ 0x74
 802c8e4:	9002      	str	r0, [sp, #8]
 802c8e6:	9006      	str	r0, [sp, #24]
 802c8e8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 802c8ec:	4809      	ldr	r0, [pc, #36]	@ (802c914 <sprintf+0x38>)
 802c8ee:	9107      	str	r1, [sp, #28]
 802c8f0:	9104      	str	r1, [sp, #16]
 802c8f2:	4909      	ldr	r1, [pc, #36]	@ (802c918 <sprintf+0x3c>)
 802c8f4:	f853 2b04 	ldr.w	r2, [r3], #4
 802c8f8:	9105      	str	r1, [sp, #20]
 802c8fa:	6800      	ldr	r0, [r0, #0]
 802c8fc:	9301      	str	r3, [sp, #4]
 802c8fe:	a902      	add	r1, sp, #8
 802c900:	f004 fd26 	bl	8031350 <_svfprintf_r>
 802c904:	9b02      	ldr	r3, [sp, #8]
 802c906:	2200      	movs	r2, #0
 802c908:	701a      	strb	r2, [r3, #0]
 802c90a:	b01c      	add	sp, #112	@ 0x70
 802c90c:	f85d eb04 	ldr.w	lr, [sp], #4
 802c910:	b003      	add	sp, #12
 802c912:	4770      	bx	lr
 802c914:	200002d8 	.word	0x200002d8
 802c918:	ffff0208 	.word	0xffff0208

0802c91c <sscanf>:
 802c91c:	b40e      	push	{r1, r2, r3}
 802c91e:	b530      	push	{r4, r5, lr}
 802c920:	b09c      	sub	sp, #112	@ 0x70
 802c922:	ac1f      	add	r4, sp, #124	@ 0x7c
 802c924:	f44f 7201 	mov.w	r2, #516	@ 0x204
 802c928:	f854 5b04 	ldr.w	r5, [r4], #4
 802c92c:	f8ad 2014 	strh.w	r2, [sp, #20]
 802c930:	9002      	str	r0, [sp, #8]
 802c932:	9006      	str	r0, [sp, #24]
 802c934:	f7e3 fcb4 	bl	80102a0 <strlen>
 802c938:	4b0b      	ldr	r3, [pc, #44]	@ (802c968 <sscanf+0x4c>)
 802c93a:	9003      	str	r0, [sp, #12]
 802c93c:	9007      	str	r0, [sp, #28]
 802c93e:	930a      	str	r3, [sp, #40]	@ 0x28
 802c940:	480a      	ldr	r0, [pc, #40]	@ (802c96c <sscanf+0x50>)
 802c942:	9401      	str	r4, [sp, #4]
 802c944:	2300      	movs	r3, #0
 802c946:	930e      	str	r3, [sp, #56]	@ 0x38
 802c948:	9313      	str	r3, [sp, #76]	@ 0x4c
 802c94a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802c94e:	f8ad 3016 	strh.w	r3, [sp, #22]
 802c952:	462a      	mov	r2, r5
 802c954:	4623      	mov	r3, r4
 802c956:	a902      	add	r1, sp, #8
 802c958:	6800      	ldr	r0, [r0, #0]
 802c95a:	f005 ff3b 	bl	80327d4 <__ssvfscanf_r>
 802c95e:	b01c      	add	sp, #112	@ 0x70
 802c960:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802c964:	b003      	add	sp, #12
 802c966:	4770      	bx	lr
 802c968:	0802c993 	.word	0x0802c993
 802c96c:	200002d8 	.word	0x200002d8

0802c970 <__sread>:
 802c970:	b510      	push	{r4, lr}
 802c972:	460c      	mov	r4, r1
 802c974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c978:	f001 fd52 	bl	802e420 <_read_r>
 802c97c:	2800      	cmp	r0, #0
 802c97e:	bfab      	itete	ge
 802c980:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 802c982:	89a3      	ldrhlt	r3, [r4, #12]
 802c984:	181b      	addge	r3, r3, r0
 802c986:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802c98a:	bfac      	ite	ge
 802c98c:	6523      	strge	r3, [r4, #80]	@ 0x50
 802c98e:	81a3      	strhlt	r3, [r4, #12]
 802c990:	bd10      	pop	{r4, pc}

0802c992 <__seofread>:
 802c992:	2000      	movs	r0, #0
 802c994:	4770      	bx	lr

0802c996 <__swrite>:
 802c996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c99a:	461f      	mov	r7, r3
 802c99c:	898b      	ldrh	r3, [r1, #12]
 802c99e:	05db      	lsls	r3, r3, #23
 802c9a0:	4605      	mov	r5, r0
 802c9a2:	460c      	mov	r4, r1
 802c9a4:	4616      	mov	r6, r2
 802c9a6:	d505      	bpl.n	802c9b4 <__swrite+0x1e>
 802c9a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c9ac:	2302      	movs	r3, #2
 802c9ae:	2200      	movs	r2, #0
 802c9b0:	f001 fd24 	bl	802e3fc <_lseek_r>
 802c9b4:	89a3      	ldrh	r3, [r4, #12]
 802c9b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802c9ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802c9be:	81a3      	strh	r3, [r4, #12]
 802c9c0:	4632      	mov	r2, r6
 802c9c2:	463b      	mov	r3, r7
 802c9c4:	4628      	mov	r0, r5
 802c9c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802c9ca:	f001 bd3b 	b.w	802e444 <_write_r>

0802c9ce <__sseek>:
 802c9ce:	b510      	push	{r4, lr}
 802c9d0:	460c      	mov	r4, r1
 802c9d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c9d6:	f001 fd11 	bl	802e3fc <_lseek_r>
 802c9da:	1c43      	adds	r3, r0, #1
 802c9dc:	89a3      	ldrh	r3, [r4, #12]
 802c9de:	bf15      	itete	ne
 802c9e0:	6520      	strne	r0, [r4, #80]	@ 0x50
 802c9e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802c9e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802c9ea:	81a3      	strheq	r3, [r4, #12]
 802c9ec:	bf18      	it	ne
 802c9ee:	81a3      	strhne	r3, [r4, #12]
 802c9f0:	bd10      	pop	{r4, pc}

0802c9f2 <__sclose>:
 802c9f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c9f6:	f001 bcc5 	b.w	802e384 <_close_r>
	...

0802c9fc <std>:
 802c9fc:	2300      	movs	r3, #0
 802c9fe:	b510      	push	{r4, lr}
 802ca00:	4604      	mov	r4, r0
 802ca02:	e9c0 3300 	strd	r3, r3, [r0]
 802ca06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802ca0a:	6083      	str	r3, [r0, #8]
 802ca0c:	8181      	strh	r1, [r0, #12]
 802ca0e:	6643      	str	r3, [r0, #100]	@ 0x64
 802ca10:	81c2      	strh	r2, [r0, #14]
 802ca12:	6183      	str	r3, [r0, #24]
 802ca14:	4619      	mov	r1, r3
 802ca16:	2208      	movs	r2, #8
 802ca18:	305c      	adds	r0, #92	@ 0x5c
 802ca1a:	f000 fb21 	bl	802d060 <memset>
 802ca1e:	4b0d      	ldr	r3, [pc, #52]	@ (802ca54 <std+0x58>)
 802ca20:	6223      	str	r3, [r4, #32]
 802ca22:	4b0d      	ldr	r3, [pc, #52]	@ (802ca58 <std+0x5c>)
 802ca24:	6263      	str	r3, [r4, #36]	@ 0x24
 802ca26:	4b0d      	ldr	r3, [pc, #52]	@ (802ca5c <std+0x60>)
 802ca28:	62a3      	str	r3, [r4, #40]	@ 0x28
 802ca2a:	4b0d      	ldr	r3, [pc, #52]	@ (802ca60 <std+0x64>)
 802ca2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802ca2e:	4b0d      	ldr	r3, [pc, #52]	@ (802ca64 <std+0x68>)
 802ca30:	61e4      	str	r4, [r4, #28]
 802ca32:	429c      	cmp	r4, r3
 802ca34:	d006      	beq.n	802ca44 <std+0x48>
 802ca36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802ca3a:	4294      	cmp	r4, r2
 802ca3c:	d002      	beq.n	802ca44 <std+0x48>
 802ca3e:	33d0      	adds	r3, #208	@ 0xd0
 802ca40:	429c      	cmp	r4, r3
 802ca42:	d105      	bne.n	802ca50 <std+0x54>
 802ca44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802ca48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802ca4c:	f001 bd3e 	b.w	802e4cc <__retarget_lock_init_recursive>
 802ca50:	bd10      	pop	{r4, pc}
 802ca52:	bf00      	nop
 802ca54:	0802c971 	.word	0x0802c971
 802ca58:	0802c997 	.word	0x0802c997
 802ca5c:	0802c9cf 	.word	0x0802c9cf
 802ca60:	0802c9f3 	.word	0x0802c9f3
 802ca64:	20019f74 	.word	0x20019f74

0802ca68 <stdio_exit_handler>:
 802ca68:	4a02      	ldr	r2, [pc, #8]	@ (802ca74 <stdio_exit_handler+0xc>)
 802ca6a:	4903      	ldr	r1, [pc, #12]	@ (802ca78 <stdio_exit_handler+0x10>)
 802ca6c:	4803      	ldr	r0, [pc, #12]	@ (802ca7c <stdio_exit_handler+0x14>)
 802ca6e:	f000 b9ef 	b.w	802ce50 <_fwalk_sglue>
 802ca72:	bf00      	nop
 802ca74:	20000158 	.word	0x20000158
 802ca78:	08034411 	.word	0x08034411
 802ca7c:	200002e0 	.word	0x200002e0

0802ca80 <cleanup_stdio>:
 802ca80:	6841      	ldr	r1, [r0, #4]
 802ca82:	4b0c      	ldr	r3, [pc, #48]	@ (802cab4 <cleanup_stdio+0x34>)
 802ca84:	4299      	cmp	r1, r3
 802ca86:	b510      	push	{r4, lr}
 802ca88:	4604      	mov	r4, r0
 802ca8a:	d001      	beq.n	802ca90 <cleanup_stdio+0x10>
 802ca8c:	f007 fcc0 	bl	8034410 <_fclose_r>
 802ca90:	68a1      	ldr	r1, [r4, #8]
 802ca92:	4b09      	ldr	r3, [pc, #36]	@ (802cab8 <cleanup_stdio+0x38>)
 802ca94:	4299      	cmp	r1, r3
 802ca96:	d002      	beq.n	802ca9e <cleanup_stdio+0x1e>
 802ca98:	4620      	mov	r0, r4
 802ca9a:	f007 fcb9 	bl	8034410 <_fclose_r>
 802ca9e:	68e1      	ldr	r1, [r4, #12]
 802caa0:	4b06      	ldr	r3, [pc, #24]	@ (802cabc <cleanup_stdio+0x3c>)
 802caa2:	4299      	cmp	r1, r3
 802caa4:	d004      	beq.n	802cab0 <cleanup_stdio+0x30>
 802caa6:	4620      	mov	r0, r4
 802caa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802caac:	f007 bcb0 	b.w	8034410 <_fclose_r>
 802cab0:	bd10      	pop	{r4, pc}
 802cab2:	bf00      	nop
 802cab4:	20019f74 	.word	0x20019f74
 802cab8:	20019fdc 	.word	0x20019fdc
 802cabc:	2001a044 	.word	0x2001a044

0802cac0 <global_stdio_init.part.0>:
 802cac0:	b510      	push	{r4, lr}
 802cac2:	4b0b      	ldr	r3, [pc, #44]	@ (802caf0 <global_stdio_init.part.0+0x30>)
 802cac4:	4c0b      	ldr	r4, [pc, #44]	@ (802caf4 <global_stdio_init.part.0+0x34>)
 802cac6:	4a0c      	ldr	r2, [pc, #48]	@ (802caf8 <global_stdio_init.part.0+0x38>)
 802cac8:	601a      	str	r2, [r3, #0]
 802caca:	4620      	mov	r0, r4
 802cacc:	2200      	movs	r2, #0
 802cace:	2104      	movs	r1, #4
 802cad0:	f7ff ff94 	bl	802c9fc <std>
 802cad4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802cad8:	2201      	movs	r2, #1
 802cada:	2109      	movs	r1, #9
 802cadc:	f7ff ff8e 	bl	802c9fc <std>
 802cae0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802cae4:	2202      	movs	r2, #2
 802cae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802caea:	2112      	movs	r1, #18
 802caec:	f7ff bf86 	b.w	802c9fc <std>
 802caf0:	2001a0ac 	.word	0x2001a0ac
 802caf4:	20019f74 	.word	0x20019f74
 802caf8:	0802ca69 	.word	0x0802ca69

0802cafc <__sfp_lock_acquire>:
 802cafc:	4801      	ldr	r0, [pc, #4]	@ (802cb04 <__sfp_lock_acquire+0x8>)
 802cafe:	f001 bce8 	b.w	802e4d2 <__retarget_lock_acquire_recursive>
 802cb02:	bf00      	nop
 802cb04:	2001a0dc 	.word	0x2001a0dc

0802cb08 <__sfp_lock_release>:
 802cb08:	4801      	ldr	r0, [pc, #4]	@ (802cb10 <__sfp_lock_release+0x8>)
 802cb0a:	f001 bce4 	b.w	802e4d6 <__retarget_lock_release_recursive>
 802cb0e:	bf00      	nop
 802cb10:	2001a0dc 	.word	0x2001a0dc

0802cb14 <__sinit>:
 802cb14:	b510      	push	{r4, lr}
 802cb16:	4604      	mov	r4, r0
 802cb18:	f7ff fff0 	bl	802cafc <__sfp_lock_acquire>
 802cb1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802cb1e:	b11b      	cbz	r3, 802cb28 <__sinit+0x14>
 802cb20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802cb24:	f7ff bff0 	b.w	802cb08 <__sfp_lock_release>
 802cb28:	4b04      	ldr	r3, [pc, #16]	@ (802cb3c <__sinit+0x28>)
 802cb2a:	6363      	str	r3, [r4, #52]	@ 0x34
 802cb2c:	4b04      	ldr	r3, [pc, #16]	@ (802cb40 <__sinit+0x2c>)
 802cb2e:	681b      	ldr	r3, [r3, #0]
 802cb30:	2b00      	cmp	r3, #0
 802cb32:	d1f5      	bne.n	802cb20 <__sinit+0xc>
 802cb34:	f7ff ffc4 	bl	802cac0 <global_stdio_init.part.0>
 802cb38:	e7f2      	b.n	802cb20 <__sinit+0xc>
 802cb3a:	bf00      	nop
 802cb3c:	0802ca81 	.word	0x0802ca81
 802cb40:	2001a0ac 	.word	0x2001a0ac

0802cb44 <_vsnprintf_r>:
 802cb44:	b530      	push	{r4, r5, lr}
 802cb46:	4614      	mov	r4, r2
 802cb48:	2c00      	cmp	r4, #0
 802cb4a:	b09b      	sub	sp, #108	@ 0x6c
 802cb4c:	4605      	mov	r5, r0
 802cb4e:	461a      	mov	r2, r3
 802cb50:	da05      	bge.n	802cb5e <_vsnprintf_r+0x1a>
 802cb52:	238b      	movs	r3, #139	@ 0x8b
 802cb54:	6003      	str	r3, [r0, #0]
 802cb56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802cb5a:	b01b      	add	sp, #108	@ 0x6c
 802cb5c:	bd30      	pop	{r4, r5, pc}
 802cb5e:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802cb62:	f8ad 300c 	strh.w	r3, [sp, #12]
 802cb66:	bf14      	ite	ne
 802cb68:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802cb6c:	4623      	moveq	r3, r4
 802cb6e:	9302      	str	r3, [sp, #8]
 802cb70:	9305      	str	r3, [sp, #20]
 802cb72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802cb76:	9100      	str	r1, [sp, #0]
 802cb78:	9104      	str	r1, [sp, #16]
 802cb7a:	f8ad 300e 	strh.w	r3, [sp, #14]
 802cb7e:	4669      	mov	r1, sp
 802cb80:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802cb82:	f004 fbe5 	bl	8031350 <_svfprintf_r>
 802cb86:	1c43      	adds	r3, r0, #1
 802cb88:	bfbc      	itt	lt
 802cb8a:	238b      	movlt	r3, #139	@ 0x8b
 802cb8c:	602b      	strlt	r3, [r5, #0]
 802cb8e:	2c00      	cmp	r4, #0
 802cb90:	d0e3      	beq.n	802cb5a <_vsnprintf_r+0x16>
 802cb92:	9b00      	ldr	r3, [sp, #0]
 802cb94:	2200      	movs	r2, #0
 802cb96:	701a      	strb	r2, [r3, #0]
 802cb98:	e7df      	b.n	802cb5a <_vsnprintf_r+0x16>
	...

0802cb9c <vsnprintf>:
 802cb9c:	b507      	push	{r0, r1, r2, lr}
 802cb9e:	9300      	str	r3, [sp, #0]
 802cba0:	4613      	mov	r3, r2
 802cba2:	460a      	mov	r2, r1
 802cba4:	4601      	mov	r1, r0
 802cba6:	4803      	ldr	r0, [pc, #12]	@ (802cbb4 <vsnprintf+0x18>)
 802cba8:	6800      	ldr	r0, [r0, #0]
 802cbaa:	f7ff ffcb 	bl	802cb44 <_vsnprintf_r>
 802cbae:	b003      	add	sp, #12
 802cbb0:	f85d fb04 	ldr.w	pc, [sp], #4
 802cbb4:	200002d8 	.word	0x200002d8

0802cbb8 <__sfvwrite_r>:
 802cbb8:	6893      	ldr	r3, [r2, #8]
 802cbba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cbbe:	4606      	mov	r6, r0
 802cbc0:	460c      	mov	r4, r1
 802cbc2:	4691      	mov	r9, r2
 802cbc4:	b91b      	cbnz	r3, 802cbce <__sfvwrite_r+0x16>
 802cbc6:	2000      	movs	r0, #0
 802cbc8:	b003      	add	sp, #12
 802cbca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802cbce:	898b      	ldrh	r3, [r1, #12]
 802cbd0:	0718      	lsls	r0, r3, #28
 802cbd2:	d550      	bpl.n	802cc76 <__sfvwrite_r+0xbe>
 802cbd4:	690b      	ldr	r3, [r1, #16]
 802cbd6:	2b00      	cmp	r3, #0
 802cbd8:	d04d      	beq.n	802cc76 <__sfvwrite_r+0xbe>
 802cbda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802cbde:	f8d9 8000 	ldr.w	r8, [r9]
 802cbe2:	f013 0702 	ands.w	r7, r3, #2
 802cbe6:	d16b      	bne.n	802ccc0 <__sfvwrite_r+0x108>
 802cbe8:	f013 0301 	ands.w	r3, r3, #1
 802cbec:	f000 809c 	beq.w	802cd28 <__sfvwrite_r+0x170>
 802cbf0:	4638      	mov	r0, r7
 802cbf2:	46ba      	mov	sl, r7
 802cbf4:	46bb      	mov	fp, r7
 802cbf6:	f1bb 0f00 	cmp.w	fp, #0
 802cbfa:	f000 8103 	beq.w	802ce04 <__sfvwrite_r+0x24c>
 802cbfe:	b950      	cbnz	r0, 802cc16 <__sfvwrite_r+0x5e>
 802cc00:	465a      	mov	r2, fp
 802cc02:	210a      	movs	r1, #10
 802cc04:	4650      	mov	r0, sl
 802cc06:	f7e3 fafb 	bl	8010200 <memchr>
 802cc0a:	2800      	cmp	r0, #0
 802cc0c:	f000 8100 	beq.w	802ce10 <__sfvwrite_r+0x258>
 802cc10:	3001      	adds	r0, #1
 802cc12:	eba0 070a 	sub.w	r7, r0, sl
 802cc16:	6820      	ldr	r0, [r4, #0]
 802cc18:	6921      	ldr	r1, [r4, #16]
 802cc1a:	68a5      	ldr	r5, [r4, #8]
 802cc1c:	6963      	ldr	r3, [r4, #20]
 802cc1e:	455f      	cmp	r7, fp
 802cc20:	463a      	mov	r2, r7
 802cc22:	bf28      	it	cs
 802cc24:	465a      	movcs	r2, fp
 802cc26:	4288      	cmp	r0, r1
 802cc28:	f240 80f5 	bls.w	802ce16 <__sfvwrite_r+0x25e>
 802cc2c:	441d      	add	r5, r3
 802cc2e:	42aa      	cmp	r2, r5
 802cc30:	f340 80f1 	ble.w	802ce16 <__sfvwrite_r+0x25e>
 802cc34:	4651      	mov	r1, sl
 802cc36:	462a      	mov	r2, r5
 802cc38:	f000 f9f8 	bl	802d02c <memmove>
 802cc3c:	6823      	ldr	r3, [r4, #0]
 802cc3e:	442b      	add	r3, r5
 802cc40:	6023      	str	r3, [r4, #0]
 802cc42:	4621      	mov	r1, r4
 802cc44:	4630      	mov	r0, r6
 802cc46:	f7ff fe23 	bl	802c890 <_fflush_r>
 802cc4a:	2800      	cmp	r0, #0
 802cc4c:	d167      	bne.n	802cd1e <__sfvwrite_r+0x166>
 802cc4e:	1b7f      	subs	r7, r7, r5
 802cc50:	f040 80f9 	bne.w	802ce46 <__sfvwrite_r+0x28e>
 802cc54:	4621      	mov	r1, r4
 802cc56:	4630      	mov	r0, r6
 802cc58:	f7ff fe1a 	bl	802c890 <_fflush_r>
 802cc5c:	2800      	cmp	r0, #0
 802cc5e:	d15e      	bne.n	802cd1e <__sfvwrite_r+0x166>
 802cc60:	f8d9 3008 	ldr.w	r3, [r9, #8]
 802cc64:	1b5b      	subs	r3, r3, r5
 802cc66:	44aa      	add	sl, r5
 802cc68:	ebab 0b05 	sub.w	fp, fp, r5
 802cc6c:	f8c9 3008 	str.w	r3, [r9, #8]
 802cc70:	2b00      	cmp	r3, #0
 802cc72:	d1c0      	bne.n	802cbf6 <__sfvwrite_r+0x3e>
 802cc74:	e7a7      	b.n	802cbc6 <__sfvwrite_r+0xe>
 802cc76:	4621      	mov	r1, r4
 802cc78:	4630      	mov	r0, r6
 802cc7a:	f000 f907 	bl	802ce8c <__swsetup_r>
 802cc7e:	2800      	cmp	r0, #0
 802cc80:	d0ab      	beq.n	802cbda <__sfvwrite_r+0x22>
 802cc82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802cc86:	e79f      	b.n	802cbc8 <__sfvwrite_r+0x10>
 802cc88:	e9d8 a500 	ldrd	sl, r5, [r8]
 802cc8c:	f108 0808 	add.w	r8, r8, #8
 802cc90:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 802cc94:	69e1      	ldr	r1, [r4, #28]
 802cc96:	2d00      	cmp	r5, #0
 802cc98:	d0f6      	beq.n	802cc88 <__sfvwrite_r+0xd0>
 802cc9a:	42bd      	cmp	r5, r7
 802cc9c:	462b      	mov	r3, r5
 802cc9e:	4652      	mov	r2, sl
 802cca0:	bf28      	it	cs
 802cca2:	463b      	movcs	r3, r7
 802cca4:	4630      	mov	r0, r6
 802cca6:	47d8      	blx	fp
 802cca8:	2800      	cmp	r0, #0
 802ccaa:	dd38      	ble.n	802cd1e <__sfvwrite_r+0x166>
 802ccac:	f8d9 3008 	ldr.w	r3, [r9, #8]
 802ccb0:	1a1b      	subs	r3, r3, r0
 802ccb2:	4482      	add	sl, r0
 802ccb4:	1a2d      	subs	r5, r5, r0
 802ccb6:	f8c9 3008 	str.w	r3, [r9, #8]
 802ccba:	2b00      	cmp	r3, #0
 802ccbc:	d1e8      	bne.n	802cc90 <__sfvwrite_r+0xd8>
 802ccbe:	e782      	b.n	802cbc6 <__sfvwrite_r+0xe>
 802ccc0:	f04f 0a00 	mov.w	sl, #0
 802ccc4:	4f61      	ldr	r7, [pc, #388]	@ (802ce4c <__sfvwrite_r+0x294>)
 802ccc6:	4655      	mov	r5, sl
 802ccc8:	e7e2      	b.n	802cc90 <__sfvwrite_r+0xd8>
 802ccca:	e9d8 7a00 	ldrd	r7, sl, [r8]
 802ccce:	f108 0808 	add.w	r8, r8, #8
 802ccd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802ccd6:	6820      	ldr	r0, [r4, #0]
 802ccd8:	68a2      	ldr	r2, [r4, #8]
 802ccda:	f1ba 0f00 	cmp.w	sl, #0
 802ccde:	d0f4      	beq.n	802ccca <__sfvwrite_r+0x112>
 802cce0:	0599      	lsls	r1, r3, #22
 802cce2:	d563      	bpl.n	802cdac <__sfvwrite_r+0x1f4>
 802cce4:	4552      	cmp	r2, sl
 802cce6:	d836      	bhi.n	802cd56 <__sfvwrite_r+0x19e>
 802cce8:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 802ccec:	d033      	beq.n	802cd56 <__sfvwrite_r+0x19e>
 802ccee:	6921      	ldr	r1, [r4, #16]
 802ccf0:	6965      	ldr	r5, [r4, #20]
 802ccf2:	eba0 0b01 	sub.w	fp, r0, r1
 802ccf6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802ccfa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802ccfe:	f10b 0201 	add.w	r2, fp, #1
 802cd02:	106d      	asrs	r5, r5, #1
 802cd04:	4452      	add	r2, sl
 802cd06:	4295      	cmp	r5, r2
 802cd08:	bf38      	it	cc
 802cd0a:	4615      	movcc	r5, r2
 802cd0c:	055b      	lsls	r3, r3, #21
 802cd0e:	d53d      	bpl.n	802cd8c <__sfvwrite_r+0x1d4>
 802cd10:	4629      	mov	r1, r5
 802cd12:	4630      	mov	r0, r6
 802cd14:	f002 fbfa 	bl	802f50c <_malloc_r>
 802cd18:	b948      	cbnz	r0, 802cd2e <__sfvwrite_r+0x176>
 802cd1a:	230c      	movs	r3, #12
 802cd1c:	6033      	str	r3, [r6, #0]
 802cd1e:	89a3      	ldrh	r3, [r4, #12]
 802cd20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802cd24:	81a3      	strh	r3, [r4, #12]
 802cd26:	e7ac      	b.n	802cc82 <__sfvwrite_r+0xca>
 802cd28:	461f      	mov	r7, r3
 802cd2a:	469a      	mov	sl, r3
 802cd2c:	e7d1      	b.n	802ccd2 <__sfvwrite_r+0x11a>
 802cd2e:	465a      	mov	r2, fp
 802cd30:	6921      	ldr	r1, [r4, #16]
 802cd32:	9001      	str	r0, [sp, #4]
 802cd34:	f001 fbd0 	bl	802e4d8 <memcpy>
 802cd38:	89a2      	ldrh	r2, [r4, #12]
 802cd3a:	9b01      	ldr	r3, [sp, #4]
 802cd3c:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 802cd40:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 802cd44:	81a2      	strh	r2, [r4, #12]
 802cd46:	6123      	str	r3, [r4, #16]
 802cd48:	6165      	str	r5, [r4, #20]
 802cd4a:	445b      	add	r3, fp
 802cd4c:	eba5 050b 	sub.w	r5, r5, fp
 802cd50:	6023      	str	r3, [r4, #0]
 802cd52:	4652      	mov	r2, sl
 802cd54:	60a5      	str	r5, [r4, #8]
 802cd56:	4552      	cmp	r2, sl
 802cd58:	bf28      	it	cs
 802cd5a:	4652      	movcs	r2, sl
 802cd5c:	6820      	ldr	r0, [r4, #0]
 802cd5e:	9201      	str	r2, [sp, #4]
 802cd60:	4639      	mov	r1, r7
 802cd62:	f000 f963 	bl	802d02c <memmove>
 802cd66:	68a3      	ldr	r3, [r4, #8]
 802cd68:	9a01      	ldr	r2, [sp, #4]
 802cd6a:	1a9b      	subs	r3, r3, r2
 802cd6c:	60a3      	str	r3, [r4, #8]
 802cd6e:	6823      	ldr	r3, [r4, #0]
 802cd70:	4413      	add	r3, r2
 802cd72:	4655      	mov	r5, sl
 802cd74:	6023      	str	r3, [r4, #0]
 802cd76:	f8d9 3008 	ldr.w	r3, [r9, #8]
 802cd7a:	1b5b      	subs	r3, r3, r5
 802cd7c:	442f      	add	r7, r5
 802cd7e:	ebaa 0a05 	sub.w	sl, sl, r5
 802cd82:	f8c9 3008 	str.w	r3, [r9, #8]
 802cd86:	2b00      	cmp	r3, #0
 802cd88:	d1a3      	bne.n	802ccd2 <__sfvwrite_r+0x11a>
 802cd8a:	e71c      	b.n	802cbc6 <__sfvwrite_r+0xe>
 802cd8c:	462a      	mov	r2, r5
 802cd8e:	4630      	mov	r0, r6
 802cd90:	f007 fbcc 	bl	803452c <_realloc_r>
 802cd94:	4603      	mov	r3, r0
 802cd96:	2800      	cmp	r0, #0
 802cd98:	d1d5      	bne.n	802cd46 <__sfvwrite_r+0x18e>
 802cd9a:	6921      	ldr	r1, [r4, #16]
 802cd9c:	4630      	mov	r0, r6
 802cd9e:	f002 fa9d 	bl	802f2dc <_free_r>
 802cda2:	89a3      	ldrh	r3, [r4, #12]
 802cda4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 802cda8:	81a3      	strh	r3, [r4, #12]
 802cdaa:	e7b6      	b.n	802cd1a <__sfvwrite_r+0x162>
 802cdac:	6923      	ldr	r3, [r4, #16]
 802cdae:	4283      	cmp	r3, r0
 802cdb0:	d302      	bcc.n	802cdb8 <__sfvwrite_r+0x200>
 802cdb2:	6961      	ldr	r1, [r4, #20]
 802cdb4:	4551      	cmp	r1, sl
 802cdb6:	d915      	bls.n	802cde4 <__sfvwrite_r+0x22c>
 802cdb8:	4552      	cmp	r2, sl
 802cdba:	bf28      	it	cs
 802cdbc:	4652      	movcs	r2, sl
 802cdbe:	4639      	mov	r1, r7
 802cdc0:	4615      	mov	r5, r2
 802cdc2:	f000 f933 	bl	802d02c <memmove>
 802cdc6:	68a3      	ldr	r3, [r4, #8]
 802cdc8:	6822      	ldr	r2, [r4, #0]
 802cdca:	1b5b      	subs	r3, r3, r5
 802cdcc:	442a      	add	r2, r5
 802cdce:	60a3      	str	r3, [r4, #8]
 802cdd0:	6022      	str	r2, [r4, #0]
 802cdd2:	2b00      	cmp	r3, #0
 802cdd4:	d1cf      	bne.n	802cd76 <__sfvwrite_r+0x1be>
 802cdd6:	4621      	mov	r1, r4
 802cdd8:	4630      	mov	r0, r6
 802cdda:	f7ff fd59 	bl	802c890 <_fflush_r>
 802cdde:	2800      	cmp	r0, #0
 802cde0:	d0c9      	beq.n	802cd76 <__sfvwrite_r+0x1be>
 802cde2:	e79c      	b.n	802cd1e <__sfvwrite_r+0x166>
 802cde4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 802cde8:	4553      	cmp	r3, sl
 802cdea:	bf28      	it	cs
 802cdec:	4653      	movcs	r3, sl
 802cdee:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 802cdf0:	fb93 f3f1 	sdiv	r3, r3, r1
 802cdf4:	463a      	mov	r2, r7
 802cdf6:	434b      	muls	r3, r1
 802cdf8:	4630      	mov	r0, r6
 802cdfa:	69e1      	ldr	r1, [r4, #28]
 802cdfc:	47a8      	blx	r5
 802cdfe:	1e05      	subs	r5, r0, #0
 802ce00:	dcb9      	bgt.n	802cd76 <__sfvwrite_r+0x1be>
 802ce02:	e78c      	b.n	802cd1e <__sfvwrite_r+0x166>
 802ce04:	e9d8 ab00 	ldrd	sl, fp, [r8]
 802ce08:	2000      	movs	r0, #0
 802ce0a:	f108 0808 	add.w	r8, r8, #8
 802ce0e:	e6f2      	b.n	802cbf6 <__sfvwrite_r+0x3e>
 802ce10:	f10b 0701 	add.w	r7, fp, #1
 802ce14:	e6ff      	b.n	802cc16 <__sfvwrite_r+0x5e>
 802ce16:	4293      	cmp	r3, r2
 802ce18:	dc08      	bgt.n	802ce2c <__sfvwrite_r+0x274>
 802ce1a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 802ce1c:	69e1      	ldr	r1, [r4, #28]
 802ce1e:	4652      	mov	r2, sl
 802ce20:	4630      	mov	r0, r6
 802ce22:	47a8      	blx	r5
 802ce24:	1e05      	subs	r5, r0, #0
 802ce26:	f73f af12 	bgt.w	802cc4e <__sfvwrite_r+0x96>
 802ce2a:	e778      	b.n	802cd1e <__sfvwrite_r+0x166>
 802ce2c:	4651      	mov	r1, sl
 802ce2e:	9201      	str	r2, [sp, #4]
 802ce30:	f000 f8fc 	bl	802d02c <memmove>
 802ce34:	9a01      	ldr	r2, [sp, #4]
 802ce36:	68a3      	ldr	r3, [r4, #8]
 802ce38:	1a9b      	subs	r3, r3, r2
 802ce3a:	60a3      	str	r3, [r4, #8]
 802ce3c:	6823      	ldr	r3, [r4, #0]
 802ce3e:	4413      	add	r3, r2
 802ce40:	6023      	str	r3, [r4, #0]
 802ce42:	4615      	mov	r5, r2
 802ce44:	e703      	b.n	802cc4e <__sfvwrite_r+0x96>
 802ce46:	2001      	movs	r0, #1
 802ce48:	e70a      	b.n	802cc60 <__sfvwrite_r+0xa8>
 802ce4a:	bf00      	nop
 802ce4c:	7ffffc00 	.word	0x7ffffc00

0802ce50 <_fwalk_sglue>:
 802ce50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802ce54:	4607      	mov	r7, r0
 802ce56:	4688      	mov	r8, r1
 802ce58:	4614      	mov	r4, r2
 802ce5a:	2600      	movs	r6, #0
 802ce5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802ce60:	f1b9 0901 	subs.w	r9, r9, #1
 802ce64:	d505      	bpl.n	802ce72 <_fwalk_sglue+0x22>
 802ce66:	6824      	ldr	r4, [r4, #0]
 802ce68:	2c00      	cmp	r4, #0
 802ce6a:	d1f7      	bne.n	802ce5c <_fwalk_sglue+0xc>
 802ce6c:	4630      	mov	r0, r6
 802ce6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802ce72:	89ab      	ldrh	r3, [r5, #12]
 802ce74:	2b01      	cmp	r3, #1
 802ce76:	d907      	bls.n	802ce88 <_fwalk_sglue+0x38>
 802ce78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802ce7c:	3301      	adds	r3, #1
 802ce7e:	d003      	beq.n	802ce88 <_fwalk_sglue+0x38>
 802ce80:	4629      	mov	r1, r5
 802ce82:	4638      	mov	r0, r7
 802ce84:	47c0      	blx	r8
 802ce86:	4306      	orrs	r6, r0
 802ce88:	3568      	adds	r5, #104	@ 0x68
 802ce8a:	e7e9      	b.n	802ce60 <_fwalk_sglue+0x10>

0802ce8c <__swsetup_r>:
 802ce8c:	b538      	push	{r3, r4, r5, lr}
 802ce8e:	4b29      	ldr	r3, [pc, #164]	@ (802cf34 <__swsetup_r+0xa8>)
 802ce90:	4605      	mov	r5, r0
 802ce92:	6818      	ldr	r0, [r3, #0]
 802ce94:	460c      	mov	r4, r1
 802ce96:	b118      	cbz	r0, 802cea0 <__swsetup_r+0x14>
 802ce98:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802ce9a:	b90b      	cbnz	r3, 802cea0 <__swsetup_r+0x14>
 802ce9c:	f7ff fe3a 	bl	802cb14 <__sinit>
 802cea0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802cea4:	0719      	lsls	r1, r3, #28
 802cea6:	d422      	bmi.n	802ceee <__swsetup_r+0x62>
 802cea8:	06da      	lsls	r2, r3, #27
 802ceaa:	d407      	bmi.n	802cebc <__swsetup_r+0x30>
 802ceac:	2209      	movs	r2, #9
 802ceae:	602a      	str	r2, [r5, #0]
 802ceb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802ceb4:	81a3      	strh	r3, [r4, #12]
 802ceb6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802ceba:	e033      	b.n	802cf24 <__swsetup_r+0x98>
 802cebc:	0758      	lsls	r0, r3, #29
 802cebe:	d512      	bpl.n	802cee6 <__swsetup_r+0x5a>
 802cec0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802cec2:	b141      	cbz	r1, 802ced6 <__swsetup_r+0x4a>
 802cec4:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802cec8:	4299      	cmp	r1, r3
 802ceca:	d002      	beq.n	802ced2 <__swsetup_r+0x46>
 802cecc:	4628      	mov	r0, r5
 802cece:	f002 fa05 	bl	802f2dc <_free_r>
 802ced2:	2300      	movs	r3, #0
 802ced4:	6323      	str	r3, [r4, #48]	@ 0x30
 802ced6:	89a3      	ldrh	r3, [r4, #12]
 802ced8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802cedc:	81a3      	strh	r3, [r4, #12]
 802cede:	2300      	movs	r3, #0
 802cee0:	6063      	str	r3, [r4, #4]
 802cee2:	6923      	ldr	r3, [r4, #16]
 802cee4:	6023      	str	r3, [r4, #0]
 802cee6:	89a3      	ldrh	r3, [r4, #12]
 802cee8:	f043 0308 	orr.w	r3, r3, #8
 802ceec:	81a3      	strh	r3, [r4, #12]
 802ceee:	6923      	ldr	r3, [r4, #16]
 802cef0:	b94b      	cbnz	r3, 802cf06 <__swsetup_r+0x7a>
 802cef2:	89a3      	ldrh	r3, [r4, #12]
 802cef4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802cef8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802cefc:	d003      	beq.n	802cf06 <__swsetup_r+0x7a>
 802cefe:	4621      	mov	r1, r4
 802cf00:	4628      	mov	r0, r5
 802cf02:	f005 fc2b 	bl	803275c <__smakebuf_r>
 802cf06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802cf0a:	f013 0201 	ands.w	r2, r3, #1
 802cf0e:	d00a      	beq.n	802cf26 <__swsetup_r+0x9a>
 802cf10:	2200      	movs	r2, #0
 802cf12:	60a2      	str	r2, [r4, #8]
 802cf14:	6962      	ldr	r2, [r4, #20]
 802cf16:	4252      	negs	r2, r2
 802cf18:	61a2      	str	r2, [r4, #24]
 802cf1a:	6922      	ldr	r2, [r4, #16]
 802cf1c:	b942      	cbnz	r2, 802cf30 <__swsetup_r+0xa4>
 802cf1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802cf22:	d1c5      	bne.n	802ceb0 <__swsetup_r+0x24>
 802cf24:	bd38      	pop	{r3, r4, r5, pc}
 802cf26:	0799      	lsls	r1, r3, #30
 802cf28:	bf58      	it	pl
 802cf2a:	6962      	ldrpl	r2, [r4, #20]
 802cf2c:	60a2      	str	r2, [r4, #8]
 802cf2e:	e7f4      	b.n	802cf1a <__swsetup_r+0x8e>
 802cf30:	2000      	movs	r0, #0
 802cf32:	e7f7      	b.n	802cf24 <__swsetup_r+0x98>
 802cf34:	200002d8 	.word	0x200002d8

0802cf38 <memcmp>:
 802cf38:	b510      	push	{r4, lr}
 802cf3a:	3901      	subs	r1, #1
 802cf3c:	4402      	add	r2, r0
 802cf3e:	4290      	cmp	r0, r2
 802cf40:	d101      	bne.n	802cf46 <memcmp+0xe>
 802cf42:	2000      	movs	r0, #0
 802cf44:	e005      	b.n	802cf52 <memcmp+0x1a>
 802cf46:	7803      	ldrb	r3, [r0, #0]
 802cf48:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802cf4c:	42a3      	cmp	r3, r4
 802cf4e:	d001      	beq.n	802cf54 <memcmp+0x1c>
 802cf50:	1b18      	subs	r0, r3, r4
 802cf52:	bd10      	pop	{r4, pc}
 802cf54:	3001      	adds	r0, #1
 802cf56:	e7f2      	b.n	802cf3e <memcmp+0x6>

0802cf58 <__fputwc>:
 802cf58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802cf5c:	4680      	mov	r8, r0
 802cf5e:	460f      	mov	r7, r1
 802cf60:	4614      	mov	r4, r2
 802cf62:	f001 fa05 	bl	802e370 <__locale_mb_cur_max>
 802cf66:	2801      	cmp	r0, #1
 802cf68:	4605      	mov	r5, r0
 802cf6a:	d11b      	bne.n	802cfa4 <__fputwc+0x4c>
 802cf6c:	1e7b      	subs	r3, r7, #1
 802cf6e:	2bfe      	cmp	r3, #254	@ 0xfe
 802cf70:	d818      	bhi.n	802cfa4 <__fputwc+0x4c>
 802cf72:	f88d 7004 	strb.w	r7, [sp, #4]
 802cf76:	2600      	movs	r6, #0
 802cf78:	f10d 0904 	add.w	r9, sp, #4
 802cf7c:	42ae      	cmp	r6, r5
 802cf7e:	d021      	beq.n	802cfc4 <__fputwc+0x6c>
 802cf80:	68a3      	ldr	r3, [r4, #8]
 802cf82:	f816 1009 	ldrb.w	r1, [r6, r9]
 802cf86:	3b01      	subs	r3, #1
 802cf88:	2b00      	cmp	r3, #0
 802cf8a:	60a3      	str	r3, [r4, #8]
 802cf8c:	da04      	bge.n	802cf98 <__fputwc+0x40>
 802cf8e:	69a2      	ldr	r2, [r4, #24]
 802cf90:	4293      	cmp	r3, r2
 802cf92:	db1b      	blt.n	802cfcc <__fputwc+0x74>
 802cf94:	290a      	cmp	r1, #10
 802cf96:	d019      	beq.n	802cfcc <__fputwc+0x74>
 802cf98:	6823      	ldr	r3, [r4, #0]
 802cf9a:	1c5a      	adds	r2, r3, #1
 802cf9c:	6022      	str	r2, [r4, #0]
 802cf9e:	7019      	strb	r1, [r3, #0]
 802cfa0:	3601      	adds	r6, #1
 802cfa2:	e7eb      	b.n	802cf7c <__fputwc+0x24>
 802cfa4:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 802cfa8:	463a      	mov	r2, r7
 802cfaa:	a901      	add	r1, sp, #4
 802cfac:	4640      	mov	r0, r8
 802cfae:	f001 faa1 	bl	802e4f4 <_wcrtomb_r>
 802cfb2:	1c43      	adds	r3, r0, #1
 802cfb4:	4605      	mov	r5, r0
 802cfb6:	d1de      	bne.n	802cf76 <__fputwc+0x1e>
 802cfb8:	89a3      	ldrh	r3, [r4, #12]
 802cfba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802cfbe:	81a3      	strh	r3, [r4, #12]
 802cfc0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 802cfc4:	4638      	mov	r0, r7
 802cfc6:	b003      	add	sp, #12
 802cfc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802cfcc:	4622      	mov	r2, r4
 802cfce:	4640      	mov	r0, r8
 802cfd0:	f008 fb1d 	bl	803560e <__swbuf_r>
 802cfd4:	3001      	adds	r0, #1
 802cfd6:	d1e3      	bne.n	802cfa0 <__fputwc+0x48>
 802cfd8:	e7f2      	b.n	802cfc0 <__fputwc+0x68>

0802cfda <_fputwc_r>:
 802cfda:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 802cfdc:	07db      	lsls	r3, r3, #31
 802cfde:	b570      	push	{r4, r5, r6, lr}
 802cfe0:	4605      	mov	r5, r0
 802cfe2:	460e      	mov	r6, r1
 802cfe4:	4614      	mov	r4, r2
 802cfe6:	d405      	bmi.n	802cff4 <_fputwc_r+0x1a>
 802cfe8:	8993      	ldrh	r3, [r2, #12]
 802cfea:	0598      	lsls	r0, r3, #22
 802cfec:	d402      	bmi.n	802cff4 <_fputwc_r+0x1a>
 802cfee:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 802cff0:	f001 fa6f 	bl	802e4d2 <__retarget_lock_acquire_recursive>
 802cff4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802cff8:	0499      	lsls	r1, r3, #18
 802cffa:	d406      	bmi.n	802d00a <_fputwc_r+0x30>
 802cffc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802d000:	81a3      	strh	r3, [r4, #12]
 802d002:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802d004:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802d008:	6663      	str	r3, [r4, #100]	@ 0x64
 802d00a:	4622      	mov	r2, r4
 802d00c:	4628      	mov	r0, r5
 802d00e:	4631      	mov	r1, r6
 802d010:	f7ff ffa2 	bl	802cf58 <__fputwc>
 802d014:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802d016:	07da      	lsls	r2, r3, #31
 802d018:	4605      	mov	r5, r0
 802d01a:	d405      	bmi.n	802d028 <_fputwc_r+0x4e>
 802d01c:	89a3      	ldrh	r3, [r4, #12]
 802d01e:	059b      	lsls	r3, r3, #22
 802d020:	d402      	bmi.n	802d028 <_fputwc_r+0x4e>
 802d022:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802d024:	f001 fa57 	bl	802e4d6 <__retarget_lock_release_recursive>
 802d028:	4628      	mov	r0, r5
 802d02a:	bd70      	pop	{r4, r5, r6, pc}

0802d02c <memmove>:
 802d02c:	4288      	cmp	r0, r1
 802d02e:	b510      	push	{r4, lr}
 802d030:	eb01 0402 	add.w	r4, r1, r2
 802d034:	d902      	bls.n	802d03c <memmove+0x10>
 802d036:	4284      	cmp	r4, r0
 802d038:	4623      	mov	r3, r4
 802d03a:	d807      	bhi.n	802d04c <memmove+0x20>
 802d03c:	1e43      	subs	r3, r0, #1
 802d03e:	42a1      	cmp	r1, r4
 802d040:	d008      	beq.n	802d054 <memmove+0x28>
 802d042:	f811 2b01 	ldrb.w	r2, [r1], #1
 802d046:	f803 2f01 	strb.w	r2, [r3, #1]!
 802d04a:	e7f8      	b.n	802d03e <memmove+0x12>
 802d04c:	4402      	add	r2, r0
 802d04e:	4601      	mov	r1, r0
 802d050:	428a      	cmp	r2, r1
 802d052:	d100      	bne.n	802d056 <memmove+0x2a>
 802d054:	bd10      	pop	{r4, pc}
 802d056:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802d05a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802d05e:	e7f7      	b.n	802d050 <memmove+0x24>

0802d060 <memset>:
 802d060:	4402      	add	r2, r0
 802d062:	4603      	mov	r3, r0
 802d064:	4293      	cmp	r3, r2
 802d066:	d100      	bne.n	802d06a <memset+0xa>
 802d068:	4770      	bx	lr
 802d06a:	f803 1b01 	strb.w	r1, [r3], #1
 802d06e:	e7f9      	b.n	802d064 <memset+0x4>

0802d070 <strcat>:
 802d070:	b510      	push	{r4, lr}
 802d072:	4602      	mov	r2, r0
 802d074:	7814      	ldrb	r4, [r2, #0]
 802d076:	4613      	mov	r3, r2
 802d078:	3201      	adds	r2, #1
 802d07a:	2c00      	cmp	r4, #0
 802d07c:	d1fa      	bne.n	802d074 <strcat+0x4>
 802d07e:	3b01      	subs	r3, #1
 802d080:	f811 2b01 	ldrb.w	r2, [r1], #1
 802d084:	f803 2f01 	strb.w	r2, [r3, #1]!
 802d088:	2a00      	cmp	r2, #0
 802d08a:	d1f9      	bne.n	802d080 <strcat+0x10>
 802d08c:	bd10      	pop	{r4, pc}

0802d08e <strchr>:
 802d08e:	b2c9      	uxtb	r1, r1
 802d090:	4603      	mov	r3, r0
 802d092:	4618      	mov	r0, r3
 802d094:	f813 2b01 	ldrb.w	r2, [r3], #1
 802d098:	b112      	cbz	r2, 802d0a0 <strchr+0x12>
 802d09a:	428a      	cmp	r2, r1
 802d09c:	d1f9      	bne.n	802d092 <strchr+0x4>
 802d09e:	4770      	bx	lr
 802d0a0:	2900      	cmp	r1, #0
 802d0a2:	bf18      	it	ne
 802d0a4:	2000      	movne	r0, #0
 802d0a6:	4770      	bx	lr

0802d0a8 <strcspn>:
 802d0a8:	b570      	push	{r4, r5, r6, lr}
 802d0aa:	4603      	mov	r3, r0
 802d0ac:	461e      	mov	r6, r3
 802d0ae:	f813 4b01 	ldrb.w	r4, [r3], #1
 802d0b2:	b144      	cbz	r4, 802d0c6 <strcspn+0x1e>
 802d0b4:	1e4a      	subs	r2, r1, #1
 802d0b6:	e001      	b.n	802d0bc <strcspn+0x14>
 802d0b8:	42a5      	cmp	r5, r4
 802d0ba:	d004      	beq.n	802d0c6 <strcspn+0x1e>
 802d0bc:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 802d0c0:	2d00      	cmp	r5, #0
 802d0c2:	d1f9      	bne.n	802d0b8 <strcspn+0x10>
 802d0c4:	e7f2      	b.n	802d0ac <strcspn+0x4>
 802d0c6:	1a30      	subs	r0, r6, r0
 802d0c8:	bd70      	pop	{r4, r5, r6, pc}

0802d0ca <strncmp>:
 802d0ca:	b510      	push	{r4, lr}
 802d0cc:	b16a      	cbz	r2, 802d0ea <strncmp+0x20>
 802d0ce:	3901      	subs	r1, #1
 802d0d0:	1884      	adds	r4, r0, r2
 802d0d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 802d0d6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802d0da:	429a      	cmp	r2, r3
 802d0dc:	d103      	bne.n	802d0e6 <strncmp+0x1c>
 802d0de:	42a0      	cmp	r0, r4
 802d0e0:	d001      	beq.n	802d0e6 <strncmp+0x1c>
 802d0e2:	2a00      	cmp	r2, #0
 802d0e4:	d1f5      	bne.n	802d0d2 <strncmp+0x8>
 802d0e6:	1ad0      	subs	r0, r2, r3
 802d0e8:	bd10      	pop	{r4, pc}
 802d0ea:	4610      	mov	r0, r2
 802d0ec:	e7fc      	b.n	802d0e8 <strncmp+0x1e>

0802d0ee <strncpy>:
 802d0ee:	b510      	push	{r4, lr}
 802d0f0:	3901      	subs	r1, #1
 802d0f2:	4603      	mov	r3, r0
 802d0f4:	b132      	cbz	r2, 802d104 <strncpy+0x16>
 802d0f6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802d0fa:	f803 4b01 	strb.w	r4, [r3], #1
 802d0fe:	3a01      	subs	r2, #1
 802d100:	2c00      	cmp	r4, #0
 802d102:	d1f7      	bne.n	802d0f4 <strncpy+0x6>
 802d104:	441a      	add	r2, r3
 802d106:	2100      	movs	r1, #0
 802d108:	4293      	cmp	r3, r2
 802d10a:	d100      	bne.n	802d10e <strncpy+0x20>
 802d10c:	bd10      	pop	{r4, pc}
 802d10e:	f803 1b01 	strb.w	r1, [r3], #1
 802d112:	e7f9      	b.n	802d108 <strncpy+0x1a>

0802d114 <strrchr>:
 802d114:	b538      	push	{r3, r4, r5, lr}
 802d116:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 802d11a:	4603      	mov	r3, r0
 802d11c:	d10e      	bne.n	802d13c <strrchr+0x28>
 802d11e:	4621      	mov	r1, r4
 802d120:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802d124:	f7ff bfb3 	b.w	802d08e <strchr>
 802d128:	1c43      	adds	r3, r0, #1
 802d12a:	4605      	mov	r5, r0
 802d12c:	4621      	mov	r1, r4
 802d12e:	4618      	mov	r0, r3
 802d130:	f7ff ffad 	bl	802d08e <strchr>
 802d134:	2800      	cmp	r0, #0
 802d136:	d1f7      	bne.n	802d128 <strrchr+0x14>
 802d138:	4628      	mov	r0, r5
 802d13a:	bd38      	pop	{r3, r4, r5, pc}
 802d13c:	2500      	movs	r5, #0
 802d13e:	e7f5      	b.n	802d12c <strrchr+0x18>

0802d140 <strspn>:
 802d140:	b570      	push	{r4, r5, r6, lr}
 802d142:	4603      	mov	r3, r0
 802d144:	461e      	mov	r6, r3
 802d146:	f813 4b01 	ldrb.w	r4, [r3], #1
 802d14a:	b13c      	cbz	r4, 802d15c <strspn+0x1c>
 802d14c:	1e4a      	subs	r2, r1, #1
 802d14e:	e001      	b.n	802d154 <strspn+0x14>
 802d150:	42a5      	cmp	r5, r4
 802d152:	d0f7      	beq.n	802d144 <strspn+0x4>
 802d154:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 802d158:	2d00      	cmp	r5, #0
 802d15a:	d1f9      	bne.n	802d150 <strspn+0x10>
 802d15c:	1a30      	subs	r0, r6, r0
 802d15e:	bd70      	pop	{r4, r5, r6, pc}

0802d160 <strstr>:
 802d160:	780a      	ldrb	r2, [r1, #0]
 802d162:	b570      	push	{r4, r5, r6, lr}
 802d164:	b96a      	cbnz	r2, 802d182 <strstr+0x22>
 802d166:	bd70      	pop	{r4, r5, r6, pc}
 802d168:	429a      	cmp	r2, r3
 802d16a:	d109      	bne.n	802d180 <strstr+0x20>
 802d16c:	460c      	mov	r4, r1
 802d16e:	4605      	mov	r5, r0
 802d170:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 802d174:	2b00      	cmp	r3, #0
 802d176:	d0f6      	beq.n	802d166 <strstr+0x6>
 802d178:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 802d17c:	429e      	cmp	r6, r3
 802d17e:	d0f7      	beq.n	802d170 <strstr+0x10>
 802d180:	3001      	adds	r0, #1
 802d182:	7803      	ldrb	r3, [r0, #0]
 802d184:	2b00      	cmp	r3, #0
 802d186:	d1ef      	bne.n	802d168 <strstr+0x8>
 802d188:	4618      	mov	r0, r3
 802d18a:	e7ec      	b.n	802d166 <strstr+0x6>

0802d18c <localtime_r>:
 802d18c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d190:	460c      	mov	r4, r1
 802d192:	4680      	mov	r8, r0
 802d194:	f008 fab6 	bl	8035704 <__gettzinfo>
 802d198:	4621      	mov	r1, r4
 802d19a:	4605      	mov	r5, r0
 802d19c:	4640      	mov	r0, r8
 802d19e:	f008 fab5 	bl	803570c <gmtime_r>
 802d1a2:	6943      	ldr	r3, [r0, #20]
 802d1a4:	0799      	lsls	r1, r3, #30
 802d1a6:	4604      	mov	r4, r0
 802d1a8:	f203 776c 	addw	r7, r3, #1900	@ 0x76c
 802d1ac:	d106      	bne.n	802d1bc <localtime_r+0x30>
 802d1ae:	2264      	movs	r2, #100	@ 0x64
 802d1b0:	fb97 f3f2 	sdiv	r3, r7, r2
 802d1b4:	fb02 7313 	mls	r3, r2, r3, r7
 802d1b8:	2b00      	cmp	r3, #0
 802d1ba:	d170      	bne.n	802d29e <localtime_r+0x112>
 802d1bc:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802d1c0:	fb97 f3f2 	sdiv	r3, r7, r2
 802d1c4:	fb02 7313 	mls	r3, r2, r3, r7
 802d1c8:	fab3 f383 	clz	r3, r3
 802d1cc:	095b      	lsrs	r3, r3, #5
 802d1ce:	4e64      	ldr	r6, [pc, #400]	@ (802d360 <localtime_r+0x1d4>)
 802d1d0:	2230      	movs	r2, #48	@ 0x30
 802d1d2:	fb02 6603 	mla	r6, r2, r3, r6
 802d1d6:	f000 fe97 	bl	802df08 <__tz_lock>
 802d1da:	f000 fea1 	bl	802df20 <_tzset_unlocked>
 802d1de:	4b61      	ldr	r3, [pc, #388]	@ (802d364 <localtime_r+0x1d8>)
 802d1e0:	681b      	ldr	r3, [r3, #0]
 802d1e2:	2b00      	cmp	r3, #0
 802d1e4:	d06a      	beq.n	802d2bc <localtime_r+0x130>
 802d1e6:	686b      	ldr	r3, [r5, #4]
 802d1e8:	42bb      	cmp	r3, r7
 802d1ea:	d15a      	bne.n	802d2a2 <localtime_r+0x116>
 802d1ec:	682f      	ldr	r7, [r5, #0]
 802d1ee:	e9d8 2300 	ldrd	r2, r3, [r8]
 802d1f2:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 802d1f6:	2f00      	cmp	r7, #0
 802d1f8:	d15b      	bne.n	802d2b2 <localtime_r+0x126>
 802d1fa:	4282      	cmp	r2, r0
 802d1fc:	eb73 0101 	sbcs.w	r1, r3, r1
 802d200:	db5e      	blt.n	802d2c0 <localtime_r+0x134>
 802d202:	2301      	movs	r3, #1
 802d204:	6223      	str	r3, [r4, #32]
 802d206:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 802d208:	6861      	ldr	r1, [r4, #4]
 802d20a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 802d20e:	fb93 f0f2 	sdiv	r0, r3, r2
 802d212:	fb02 3310 	mls	r3, r2, r0, r3
 802d216:	223c      	movs	r2, #60	@ 0x3c
 802d218:	fb93 f5f2 	sdiv	r5, r3, r2
 802d21c:	fb02 3215 	mls	r2, r2, r5, r3
 802d220:	6823      	ldr	r3, [r4, #0]
 802d222:	1a9b      	subs	r3, r3, r2
 802d224:	68a2      	ldr	r2, [r4, #8]
 802d226:	6023      	str	r3, [r4, #0]
 802d228:	1b49      	subs	r1, r1, r5
 802d22a:	1a12      	subs	r2, r2, r0
 802d22c:	2b3b      	cmp	r3, #59	@ 0x3b
 802d22e:	6061      	str	r1, [r4, #4]
 802d230:	60a2      	str	r2, [r4, #8]
 802d232:	dd51      	ble.n	802d2d8 <localtime_r+0x14c>
 802d234:	3101      	adds	r1, #1
 802d236:	6061      	str	r1, [r4, #4]
 802d238:	3b3c      	subs	r3, #60	@ 0x3c
 802d23a:	6023      	str	r3, [r4, #0]
 802d23c:	6863      	ldr	r3, [r4, #4]
 802d23e:	2b3b      	cmp	r3, #59	@ 0x3b
 802d240:	dd50      	ble.n	802d2e4 <localtime_r+0x158>
 802d242:	3201      	adds	r2, #1
 802d244:	60a2      	str	r2, [r4, #8]
 802d246:	3b3c      	subs	r3, #60	@ 0x3c
 802d248:	6063      	str	r3, [r4, #4]
 802d24a:	68a3      	ldr	r3, [r4, #8]
 802d24c:	2b17      	cmp	r3, #23
 802d24e:	dd4f      	ble.n	802d2f0 <localtime_r+0x164>
 802d250:	69e2      	ldr	r2, [r4, #28]
 802d252:	3201      	adds	r2, #1
 802d254:	61e2      	str	r2, [r4, #28]
 802d256:	69a2      	ldr	r2, [r4, #24]
 802d258:	3201      	adds	r2, #1
 802d25a:	2a07      	cmp	r2, #7
 802d25c:	bfa8      	it	ge
 802d25e:	2200      	movge	r2, #0
 802d260:	61a2      	str	r2, [r4, #24]
 802d262:	68e2      	ldr	r2, [r4, #12]
 802d264:	3b18      	subs	r3, #24
 802d266:	3201      	adds	r2, #1
 802d268:	60a3      	str	r3, [r4, #8]
 802d26a:	6923      	ldr	r3, [r4, #16]
 802d26c:	60e2      	str	r2, [r4, #12]
 802d26e:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802d272:	428a      	cmp	r2, r1
 802d274:	dd0e      	ble.n	802d294 <localtime_r+0x108>
 802d276:	2b0b      	cmp	r3, #11
 802d278:	eba2 0201 	sub.w	r2, r2, r1
 802d27c:	60e2      	str	r2, [r4, #12]
 802d27e:	f103 0201 	add.w	r2, r3, #1
 802d282:	bf09      	itett	eq
 802d284:	6963      	ldreq	r3, [r4, #20]
 802d286:	6122      	strne	r2, [r4, #16]
 802d288:	2200      	moveq	r2, #0
 802d28a:	3301      	addeq	r3, #1
 802d28c:	bf02      	ittt	eq
 802d28e:	6122      	streq	r2, [r4, #16]
 802d290:	6163      	streq	r3, [r4, #20]
 802d292:	61e2      	streq	r2, [r4, #28]
 802d294:	f000 fe3e 	bl	802df14 <__tz_unlock>
 802d298:	4620      	mov	r0, r4
 802d29a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802d29e:	2301      	movs	r3, #1
 802d2a0:	e795      	b.n	802d1ce <localtime_r+0x42>
 802d2a2:	4638      	mov	r0, r7
 802d2a4:	f000 fd86 	bl	802ddb4 <__tzcalc_limits>
 802d2a8:	2800      	cmp	r0, #0
 802d2aa:	d19f      	bne.n	802d1ec <localtime_r+0x60>
 802d2ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802d2b0:	e004      	b.n	802d2bc <localtime_r+0x130>
 802d2b2:	4282      	cmp	r2, r0
 802d2b4:	eb73 0101 	sbcs.w	r1, r3, r1
 802d2b8:	da02      	bge.n	802d2c0 <localtime_r+0x134>
 802d2ba:	2300      	movs	r3, #0
 802d2bc:	6223      	str	r3, [r4, #32]
 802d2be:	e009      	b.n	802d2d4 <localtime_r+0x148>
 802d2c0:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 802d2c4:	4282      	cmp	r2, r0
 802d2c6:	418b      	sbcs	r3, r1
 802d2c8:	bfb4      	ite	lt
 802d2ca:	2301      	movlt	r3, #1
 802d2cc:	2300      	movge	r3, #0
 802d2ce:	6223      	str	r3, [r4, #32]
 802d2d0:	2b00      	cmp	r3, #0
 802d2d2:	d198      	bne.n	802d206 <localtime_r+0x7a>
 802d2d4:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 802d2d6:	e797      	b.n	802d208 <localtime_r+0x7c>
 802d2d8:	2b00      	cmp	r3, #0
 802d2da:	daaf      	bge.n	802d23c <localtime_r+0xb0>
 802d2dc:	3901      	subs	r1, #1
 802d2de:	6061      	str	r1, [r4, #4]
 802d2e0:	333c      	adds	r3, #60	@ 0x3c
 802d2e2:	e7aa      	b.n	802d23a <localtime_r+0xae>
 802d2e4:	2b00      	cmp	r3, #0
 802d2e6:	dab0      	bge.n	802d24a <localtime_r+0xbe>
 802d2e8:	3a01      	subs	r2, #1
 802d2ea:	60a2      	str	r2, [r4, #8]
 802d2ec:	333c      	adds	r3, #60	@ 0x3c
 802d2ee:	e7ab      	b.n	802d248 <localtime_r+0xbc>
 802d2f0:	2b00      	cmp	r3, #0
 802d2f2:	dacf      	bge.n	802d294 <localtime_r+0x108>
 802d2f4:	69e2      	ldr	r2, [r4, #28]
 802d2f6:	3a01      	subs	r2, #1
 802d2f8:	61e2      	str	r2, [r4, #28]
 802d2fa:	69a2      	ldr	r2, [r4, #24]
 802d2fc:	3a01      	subs	r2, #1
 802d2fe:	bf48      	it	mi
 802d300:	2206      	movmi	r2, #6
 802d302:	61a2      	str	r2, [r4, #24]
 802d304:	68e2      	ldr	r2, [r4, #12]
 802d306:	3318      	adds	r3, #24
 802d308:	3a01      	subs	r2, #1
 802d30a:	60e2      	str	r2, [r4, #12]
 802d30c:	60a3      	str	r3, [r4, #8]
 802d30e:	2a00      	cmp	r2, #0
 802d310:	d1c0      	bne.n	802d294 <localtime_r+0x108>
 802d312:	6923      	ldr	r3, [r4, #16]
 802d314:	3b01      	subs	r3, #1
 802d316:	d405      	bmi.n	802d324 <localtime_r+0x198>
 802d318:	6123      	str	r3, [r4, #16]
 802d31a:	6923      	ldr	r3, [r4, #16]
 802d31c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802d320:	60e3      	str	r3, [r4, #12]
 802d322:	e7b7      	b.n	802d294 <localtime_r+0x108>
 802d324:	230b      	movs	r3, #11
 802d326:	6123      	str	r3, [r4, #16]
 802d328:	6963      	ldr	r3, [r4, #20]
 802d32a:	1e5a      	subs	r2, r3, #1
 802d32c:	6162      	str	r2, [r4, #20]
 802d32e:	0792      	lsls	r2, r2, #30
 802d330:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 802d334:	d105      	bne.n	802d342 <localtime_r+0x1b6>
 802d336:	2164      	movs	r1, #100	@ 0x64
 802d338:	fb93 f2f1 	sdiv	r2, r3, r1
 802d33c:	fb01 3212 	mls	r2, r1, r2, r3
 802d340:	b962      	cbnz	r2, 802d35c <localtime_r+0x1d0>
 802d342:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802d346:	fb93 f1f2 	sdiv	r1, r3, r2
 802d34a:	fb02 3311 	mls	r3, r2, r1, r3
 802d34e:	fab3 f383 	clz	r3, r3
 802d352:	095b      	lsrs	r3, r3, #5
 802d354:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 802d358:	61e3      	str	r3, [r4, #28]
 802d35a:	e7de      	b.n	802d31a <localtime_r+0x18e>
 802d35c:	2301      	movs	r3, #1
 802d35e:	e7f9      	b.n	802d354 <localtime_r+0x1c8>
 802d360:	0803c4b0 	.word	0x0803c4b0
 802d364:	2001a0d0 	.word	0x2001a0d0

0802d368 <iso_year_adjust>:
 802d368:	6942      	ldr	r2, [r0, #20]
 802d36a:	2a00      	cmp	r2, #0
 802d36c:	f240 736c 	movw	r3, #1900	@ 0x76c
 802d370:	bfa8      	it	ge
 802d372:	f06f 0363 	mvnge.w	r3, #99	@ 0x63
 802d376:	4413      	add	r3, r2
 802d378:	0792      	lsls	r2, r2, #30
 802d37a:	d105      	bne.n	802d388 <iso_year_adjust+0x20>
 802d37c:	2164      	movs	r1, #100	@ 0x64
 802d37e:	fb93 f2f1 	sdiv	r2, r3, r1
 802d382:	fb01 3212 	mls	r2, r1, r2, r3
 802d386:	b9ca      	cbnz	r2, 802d3bc <iso_year_adjust+0x54>
 802d388:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802d38c:	fb93 f1f2 	sdiv	r1, r3, r2
 802d390:	fb02 3311 	mls	r3, r2, r1, r3
 802d394:	fab3 f383 	clz	r3, r3
 802d398:	095b      	lsrs	r3, r3, #5
 802d39a:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 802d39e:	0040      	lsls	r0, r0, #1
 802d3a0:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 802d3a4:	4418      	add	r0, r3
 802d3a6:	f241 63a2 	movw	r3, #5794	@ 0x16a2
 802d3aa:	4298      	cmp	r0, r3
 802d3ac:	d027      	beq.n	802d3fe <iso_year_adjust+0x96>
 802d3ae:	dc11      	bgt.n	802d3d4 <iso_year_adjust+0x6c>
 802d3b0:	2801      	cmp	r0, #1
 802d3b2:	dc0a      	bgt.n	802d3ca <iso_year_adjust+0x62>
 802d3b4:	43c0      	mvns	r0, r0
 802d3b6:	0fc0      	lsrs	r0, r0, #31
 802d3b8:	4240      	negs	r0, r0
 802d3ba:	4770      	bx	lr
 802d3bc:	2301      	movs	r3, #1
 802d3be:	e7ec      	b.n	802d39a <iso_year_adjust+0x32>
 802d3c0:	4b10      	ldr	r3, [pc, #64]	@ (802d404 <iso_year_adjust+0x9c>)
 802d3c2:	40c3      	lsrs	r3, r0
 802d3c4:	f343 0000 	sbfx	r0, r3, #0, #1
 802d3c8:	4770      	bx	lr
 802d3ca:	380a      	subs	r0, #10
 802d3cc:	2817      	cmp	r0, #23
 802d3ce:	d9f7      	bls.n	802d3c0 <iso_year_adjust+0x58>
 802d3d0:	2000      	movs	r0, #0
 802d3d2:	4770      	bx	lr
 802d3d4:	f241 63b4 	movw	r3, #5812	@ 0x16b4
 802d3d8:	4298      	cmp	r0, r3
 802d3da:	dc06      	bgt.n	802d3ea <iso_year_adjust+0x82>
 802d3dc:	f241 63b1 	movw	r3, #5809	@ 0x16b1
 802d3e0:	4298      	cmp	r0, r3
 802d3e2:	bfd4      	ite	le
 802d3e4:	2000      	movle	r0, #0
 802d3e6:	2001      	movgt	r0, #1
 802d3e8:	4770      	bx	lr
 802d3ea:	f5a0 50b6 	sub.w	r0, r0, #5824	@ 0x16c0
 802d3ee:	3802      	subs	r0, #2
 802d3f0:	2815      	cmp	r0, #21
 802d3f2:	d8ed      	bhi.n	802d3d0 <iso_year_adjust+0x68>
 802d3f4:	4b04      	ldr	r3, [pc, #16]	@ (802d408 <iso_year_adjust+0xa0>)
 802d3f6:	40c3      	lsrs	r3, r0
 802d3f8:	f003 0001 	and.w	r0, r3, #1
 802d3fc:	4770      	bx	lr
 802d3fe:	2001      	movs	r0, #1
 802d400:	4770      	bx	lr
 802d402:	bf00      	nop
 802d404:	00cc00cf 	.word	0x00cc00cf
 802d408:	002a001f 	.word	0x002a001f

0802d40c <__strftime.isra.0>:
 802d40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d410:	b08f      	sub	sp, #60	@ 0x3c
 802d412:	461e      	mov	r6, r3
 802d414:	2300      	movs	r3, #0
 802d416:	4607      	mov	r7, r0
 802d418:	460d      	mov	r5, r1
 802d41a:	9302      	str	r3, [sp, #8]
 802d41c:	461c      	mov	r4, r3
 802d41e:	7813      	ldrb	r3, [r2, #0]
 802d420:	2b00      	cmp	r3, #0
 802d422:	f000 84ae 	beq.w	802dd82 <__strftime.isra.0+0x976>
 802d426:	2b25      	cmp	r3, #37	@ 0x25
 802d428:	d11f      	bne.n	802d46a <__strftime.isra.0+0x5e>
 802d42a:	f892 9001 	ldrb.w	r9, [r2, #1]
 802d42e:	f1b9 0f30 	cmp.w	r9, #48	@ 0x30
 802d432:	d024      	beq.n	802d47e <__strftime.isra.0+0x72>
 802d434:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 802d438:	d021      	beq.n	802d47e <__strftime.isra.0+0x72>
 802d43a:	f102 0801 	add.w	r8, r2, #1
 802d43e:	f04f 0900 	mov.w	r9, #0
 802d442:	f898 2000 	ldrb.w	r2, [r8]
 802d446:	3a31      	subs	r2, #49	@ 0x31
 802d448:	2a08      	cmp	r2, #8
 802d44a:	d81b      	bhi.n	802d484 <__strftime.isra.0+0x78>
 802d44c:	220a      	movs	r2, #10
 802d44e:	4640      	mov	r0, r8
 802d450:	a906      	add	r1, sp, #24
 802d452:	f008 f88b 	bl	803556c <strtoul>
 802d456:	f8dd 8018 	ldr.w	r8, [sp, #24]
 802d45a:	4602      	mov	r2, r0
 802d45c:	f898 1000 	ldrb.w	r1, [r8]
 802d460:	2945      	cmp	r1, #69	@ 0x45
 802d462:	d111      	bne.n	802d488 <__strftime.isra.0+0x7c>
 802d464:	f108 0801 	add.w	r8, r8, #1
 802d468:	e010      	b.n	802d48c <__strftime.isra.0+0x80>
 802d46a:	1e69      	subs	r1, r5, #1
 802d46c:	42a1      	cmp	r1, r4
 802d46e:	f240 815d 	bls.w	802d72c <__strftime.isra.0+0x320>
 802d472:	553b      	strb	r3, [r7, r4]
 802d474:	3201      	adds	r2, #1
 802d476:	f104 0a01 	add.w	sl, r4, #1
 802d47a:	4654      	mov	r4, sl
 802d47c:	e7cf      	b.n	802d41e <__strftime.isra.0+0x12>
 802d47e:	f102 0802 	add.w	r8, r2, #2
 802d482:	e7de      	b.n	802d442 <__strftime.isra.0+0x36>
 802d484:	2200      	movs	r2, #0
 802d486:	e7e9      	b.n	802d45c <__strftime.isra.0+0x50>
 802d488:	294f      	cmp	r1, #79	@ 0x4f
 802d48a:	d0eb      	beq.n	802d464 <__strftime.isra.0+0x58>
 802d48c:	f898 0000 	ldrb.w	r0, [r8]
 802d490:	f1a0 0125 	sub.w	r1, r0, #37	@ 0x25
 802d494:	2955      	cmp	r1, #85	@ 0x55
 802d496:	f200 8149 	bhi.w	802d72c <__strftime.isra.0+0x320>
 802d49a:	e8df f011 	tbh	[pc, r1, lsl #1]
 802d49e:	046a      	.short	0x046a
 802d4a0:	01470147 	.word	0x01470147
 802d4a4:	01470147 	.word	0x01470147
 802d4a8:	01470147 	.word	0x01470147
 802d4ac:	01470147 	.word	0x01470147
 802d4b0:	01470147 	.word	0x01470147
 802d4b4:	01470147 	.word	0x01470147
 802d4b8:	01470147 	.word	0x01470147
 802d4bc:	01470147 	.word	0x01470147
 802d4c0:	01470147 	.word	0x01470147
 802d4c4:	01470147 	.word	0x01470147
 802d4c8:	01470147 	.word	0x01470147
 802d4cc:	01470147 	.word	0x01470147
 802d4d0:	01470147 	.word	0x01470147
 802d4d4:	00750147 	.word	0x00750147
 802d4d8:	00dc00a3 	.word	0x00dc00a3
 802d4dc:	01470128 	.word	0x01470128
 802d4e0:	01cb0159 	.word	0x01cb0159
 802d4e4:	02590252 	.word	0x02590252
 802d4e8:	01470147 	.word	0x01470147
 802d4ec:	02710147 	.word	0x02710147
 802d4f0:	01470147 	.word	0x01470147
 802d4f4:	0147027c 	.word	0x0147027c
 802d4f8:	033402ac 	.word	0x033402ac
 802d4fc:	036a033e 	.word	0x036a033e
 802d500:	03d80372 	.word	0x03d80372
 802d504:	03ee00d8 	.word	0x03ee00d8
 802d508:	01470440 	.word	0x01470440
 802d50c:	01470147 	.word	0x01470147
 802d510:	01470147 	.word	0x01470147
 802d514:	00560147 	.word	0x00560147
 802d518:	00ba008d 	.word	0x00ba008d
 802d51c:	011d011d 	.word	0x011d011d
 802d520:	017e0147 	.word	0x017e0147
 802d524:	0147008d 	.word	0x0147008d
 802d528:	0252026a 	.word	0x0252026a
 802d52c:	026e0259 	.word	0x026e0259
 802d530:	01470273 	.word	0x01470273
 802d534:	02a5027c 	.word	0x02a5027c
 802d538:	02b500d0 	.word	0x02b500d0
 802d53c:	035d0336 	.word	0x035d0336
 802d540:	03cf03a4 	.word	0x03cf03a4
 802d544:	03e000d4 	.word	0x03e000d4
 802d548:	0403      	.short	0x0403
 802d54a:	69b3      	ldr	r3, [r6, #24]
 802d54c:	4aad      	ldr	r2, [pc, #692]	@ (802d804 <__strftime.isra.0+0x3f8>)
 802d54e:	3318      	adds	r3, #24
 802d550:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 802d554:	4658      	mov	r0, fp
 802d556:	f7e2 fea3 	bl	80102a0 <strlen>
 802d55a:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802d55e:	eb04 0a00 	add.w	sl, r4, r0
 802d562:	1e6b      	subs	r3, r5, #1
 802d564:	45a2      	cmp	sl, r4
 802d566:	d107      	bne.n	802d578 <__strftime.isra.0+0x16c>
 802d568:	f898 3000 	ldrb.w	r3, [r8]
 802d56c:	2b00      	cmp	r3, #0
 802d56e:	f000 8409 	beq.w	802dd84 <__strftime.isra.0+0x978>
 802d572:	f108 0201 	add.w	r2, r8, #1
 802d576:	e780      	b.n	802d47a <__strftime.isra.0+0x6e>
 802d578:	42a3      	cmp	r3, r4
 802d57a:	f240 80d7 	bls.w	802d72c <__strftime.isra.0+0x320>
 802d57e:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802d582:	553a      	strb	r2, [r7, r4]
 802d584:	3401      	adds	r4, #1
 802d586:	e7ed      	b.n	802d564 <__strftime.isra.0+0x158>
 802d588:	69b2      	ldr	r2, [r6, #24]
 802d58a:	4b9e      	ldr	r3, [pc, #632]	@ (802d804 <__strftime.isra.0+0x3f8>)
 802d58c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802d590:	f8d3 b07c 	ldr.w	fp, [r3, #124]	@ 0x7c
 802d594:	4658      	mov	r0, fp
 802d596:	f7e2 fe83 	bl	80102a0 <strlen>
 802d59a:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802d59e:	eb04 0a00 	add.w	sl, r4, r0
 802d5a2:	1e6b      	subs	r3, r5, #1
 802d5a4:	4554      	cmp	r4, sl
 802d5a6:	d0df      	beq.n	802d568 <__strftime.isra.0+0x15c>
 802d5a8:	42a3      	cmp	r3, r4
 802d5aa:	f240 80bf 	bls.w	802d72c <__strftime.isra.0+0x320>
 802d5ae:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802d5b2:	553a      	strb	r2, [r7, r4]
 802d5b4:	3401      	adds	r4, #1
 802d5b6:	e7f5      	b.n	802d5a4 <__strftime.isra.0+0x198>
 802d5b8:	4b92      	ldr	r3, [pc, #584]	@ (802d804 <__strftime.isra.0+0x3f8>)
 802d5ba:	6932      	ldr	r2, [r6, #16]
 802d5bc:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 802d5c0:	4658      	mov	r0, fp
 802d5c2:	f7e2 fe6d 	bl	80102a0 <strlen>
 802d5c6:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802d5ca:	eb04 0a00 	add.w	sl, r4, r0
 802d5ce:	1e6b      	subs	r3, r5, #1
 802d5d0:	45a2      	cmp	sl, r4
 802d5d2:	d0c9      	beq.n	802d568 <__strftime.isra.0+0x15c>
 802d5d4:	42a3      	cmp	r3, r4
 802d5d6:	f240 80a9 	bls.w	802d72c <__strftime.isra.0+0x320>
 802d5da:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802d5de:	553a      	strb	r2, [r7, r4]
 802d5e0:	3401      	adds	r4, #1
 802d5e2:	e7f5      	b.n	802d5d0 <__strftime.isra.0+0x1c4>
 802d5e4:	6933      	ldr	r3, [r6, #16]
 802d5e6:	4a87      	ldr	r2, [pc, #540]	@ (802d804 <__strftime.isra.0+0x3f8>)
 802d5e8:	330c      	adds	r3, #12
 802d5ea:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 802d5ee:	4658      	mov	r0, fp
 802d5f0:	f7e2 fe56 	bl	80102a0 <strlen>
 802d5f4:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802d5f8:	eb04 0a00 	add.w	sl, r4, r0
 802d5fc:	1e6b      	subs	r3, r5, #1
 802d5fe:	45a2      	cmp	sl, r4
 802d600:	d0b2      	beq.n	802d568 <__strftime.isra.0+0x15c>
 802d602:	42a3      	cmp	r3, r4
 802d604:	f240 8092 	bls.w	802d72c <__strftime.isra.0+0x320>
 802d608:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802d60c:	553a      	strb	r2, [r7, r4]
 802d60e:	3401      	adds	r4, #1
 802d610:	e7f5      	b.n	802d5fe <__strftime.isra.0+0x1f2>
 802d612:	4b7c      	ldr	r3, [pc, #496]	@ (802d804 <__strftime.isra.0+0x3f8>)
 802d614:	f8d3 a0a0 	ldr.w	sl, [r3, #160]	@ 0xa0
 802d618:	4650      	mov	r0, sl
 802d61a:	f7e2 fe41 	bl	80102a0 <strlen>
 802d61e:	f89a 3000 	ldrb.w	r3, [sl]
 802d622:	2b00      	cmp	r3, #0
 802d624:	f000 8341 	beq.w	802dcaa <__strftime.isra.0+0x89e>
 802d628:	4633      	mov	r3, r6
 802d62a:	4652      	mov	r2, sl
 802d62c:	1b29      	subs	r1, r5, r4
 802d62e:	1938      	adds	r0, r7, r4
 802d630:	f7ff feec 	bl	802d40c <__strftime.isra.0>
 802d634:	2800      	cmp	r0, #0
 802d636:	dd79      	ble.n	802d72c <__strftime.isra.0+0x320>
 802d638:	eb04 0a00 	add.w	sl, r4, r0
 802d63c:	e794      	b.n	802d568 <__strftime.isra.0+0x15c>
 802d63e:	4b71      	ldr	r3, [pc, #452]	@ (802d804 <__strftime.isra.0+0x3f8>)
 802d640:	f8d3 a0e4 	ldr.w	sl, [r3, #228]	@ 0xe4
 802d644:	e7e8      	b.n	802d618 <__strftime.isra.0+0x20c>
 802d646:	4b6f      	ldr	r3, [pc, #444]	@ (802d804 <__strftime.isra.0+0x3f8>)
 802d648:	f8d3 a09c 	ldr.w	sl, [r3, #156]	@ 0x9c
 802d64c:	e7e4      	b.n	802d618 <__strftime.isra.0+0x20c>
 802d64e:	4b6d      	ldr	r3, [pc, #436]	@ (802d804 <__strftime.isra.0+0x3f8>)
 802d650:	f8d3 a098 	ldr.w	sl, [r3, #152]	@ 0x98
 802d654:	e7e0      	b.n	802d618 <__strftime.isra.0+0x20c>
 802d656:	f8d6 a014 	ldr.w	sl, [r6, #20]
 802d65a:	496b      	ldr	r1, [pc, #428]	@ (802d808 <__strftime.isra.0+0x3fc>)
 802d65c:	458a      	cmp	sl, r1
 802d65e:	bfac      	ite	ge
 802d660:	f04f 0b00 	movge.w	fp, #0
 802d664:	f04f 0b01 	movlt.w	fp, #1
 802d668:	f1ba 0f00 	cmp.w	sl, #0
 802d66c:	db12      	blt.n	802d694 <__strftime.isra.0+0x288>
 802d66e:	2064      	movs	r0, #100	@ 0x64
 802d670:	fb9a f0f0 	sdiv	r0, sl, r0
 802d674:	3013      	adds	r0, #19
 802d676:	f1b9 0f00 	cmp.w	r9, #0
 802d67a:	d015      	beq.n	802d6a8 <__strftime.isra.0+0x29c>
 802d67c:	2863      	cmp	r0, #99	@ 0x63
 802d67e:	dd28      	ble.n	802d6d2 <__strftime.isra.0+0x2c6>
 802d680:	4b62      	ldr	r3, [pc, #392]	@ (802d80c <__strftime.isra.0+0x400>)
 802d682:	4963      	ldr	r1, [pc, #396]	@ (802d810 <__strftime.isra.0+0x404>)
 802d684:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 802d688:	bf0c      	ite	eq
 802d68a:	469c      	moveq	ip, r3
 802d68c:	468c      	movne	ip, r1
 802d68e:	f8df e19c 	ldr.w	lr, [pc, #412]	@ 802d82c <__strftime.isra.0+0x420>
 802d692:	e00d      	b.n	802d6b0 <__strftime.isra.0+0x2a4>
 802d694:	f20a 706c 	addw	r0, sl, #1900	@ 0x76c
 802d698:	9203      	str	r2, [sp, #12]
 802d69a:	f000 ff88 	bl	802e5ae <abs>
 802d69e:	2164      	movs	r1, #100	@ 0x64
 802d6a0:	9a03      	ldr	r2, [sp, #12]
 802d6a2:	fb90 f0f1 	sdiv	r0, r0, r1
 802d6a6:	e7e6      	b.n	802d676 <__strftime.isra.0+0x26a>
 802d6a8:	f8df c164 	ldr.w	ip, [pc, #356]	@ 802d810 <__strftime.isra.0+0x404>
 802d6ac:	f8df e180 	ldr.w	lr, [pc, #384]	@ 802d830 <__strftime.isra.0+0x424>
 802d6b0:	4b58      	ldr	r3, [pc, #352]	@ (802d814 <__strftime.isra.0+0x408>)
 802d6b2:	9001      	str	r0, [sp, #4]
 802d6b4:	2a02      	cmp	r2, #2
 802d6b6:	bf2c      	ite	cs
 802d6b8:	ebcb 0102 	rsbcs	r1, fp, r2
 802d6bc:	f1cb 0102 	rsbcc	r1, fp, #2
 802d6c0:	4a51      	ldr	r2, [pc, #324]	@ (802d808 <__strftime.isra.0+0x3fc>)
 802d6c2:	9100      	str	r1, [sp, #0]
 802d6c4:	4592      	cmp	sl, r2
 802d6c6:	bfa8      	it	ge
 802d6c8:	4663      	movge	r3, ip
 802d6ca:	4672      	mov	r2, lr
 802d6cc:	1b29      	subs	r1, r5, r4
 802d6ce:	1938      	adds	r0, r7, r4
 802d6d0:	e023      	b.n	802d71a <__strftime.isra.0+0x30e>
 802d6d2:	f8df c13c 	ldr.w	ip, [pc, #316]	@ 802d810 <__strftime.isra.0+0x404>
 802d6d6:	e7da      	b.n	802d68e <__strftime.isra.0+0x282>
 802d6d8:	494f      	ldr	r1, [pc, #316]	@ (802d818 <__strftime.isra.0+0x40c>)
 802d6da:	4a50      	ldr	r2, [pc, #320]	@ (802d81c <__strftime.isra.0+0x410>)
 802d6dc:	68f3      	ldr	r3, [r6, #12]
 802d6de:	2864      	cmp	r0, #100	@ 0x64
 802d6e0:	bf18      	it	ne
 802d6e2:	460a      	movne	r2, r1
 802d6e4:	1b29      	subs	r1, r5, r4
 802d6e6:	1938      	adds	r0, r7, r4
 802d6e8:	f002 f986 	bl	802f9f8 <sniprintf>
 802d6ec:	e017      	b.n	802d71e <__strftime.isra.0+0x312>
 802d6ee:	6970      	ldr	r0, [r6, #20]
 802d6f0:	6933      	ldr	r3, [r6, #16]
 802d6f2:	2800      	cmp	r0, #0
 802d6f4:	f103 0a01 	add.w	sl, r3, #1
 802d6f8:	eb07 0b04 	add.w	fp, r7, r4
 802d6fc:	68f3      	ldr	r3, [r6, #12]
 802d6fe:	eba5 0904 	sub.w	r9, r5, r4
 802d702:	db19      	blt.n	802d738 <__strftime.isra.0+0x32c>
 802d704:	2264      	movs	r2, #100	@ 0x64
 802d706:	fb90 fcf2 	sdiv	ip, r0, r2
 802d70a:	fb02 001c 	mls	r0, r2, ip, r0
 802d70e:	4a44      	ldr	r2, [pc, #272]	@ (802d820 <__strftime.isra.0+0x414>)
 802d710:	e9cd 3000 	strd	r3, r0, [sp]
 802d714:	4649      	mov	r1, r9
 802d716:	4653      	mov	r3, sl
 802d718:	4658      	mov	r0, fp
 802d71a:	f002 f96d 	bl	802f9f8 <sniprintf>
 802d71e:	2800      	cmp	r0, #0
 802d720:	db04      	blt.n	802d72c <__strftime.isra.0+0x320>
 802d722:	eb00 0a04 	add.w	sl, r0, r4
 802d726:	4555      	cmp	r5, sl
 802d728:	f63f af1e 	bhi.w	802d568 <__strftime.isra.0+0x15c>
 802d72c:	f04f 0a00 	mov.w	sl, #0
 802d730:	4650      	mov	r0, sl
 802d732:	b00f      	add	sp, #60	@ 0x3c
 802d734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d738:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802d73c:	9303      	str	r3, [sp, #12]
 802d73e:	f000 ff36 	bl	802e5ae <abs>
 802d742:	2264      	movs	r2, #100	@ 0x64
 802d744:	9b03      	ldr	r3, [sp, #12]
 802d746:	fb90 fcf2 	sdiv	ip, r0, r2
 802d74a:	fb0c 0012 	mls	r0, ip, r2, r0
 802d74e:	e7de      	b.n	802d70e <__strftime.isra.0+0x302>
 802d750:	2125      	movs	r1, #37	@ 0x25
 802d752:	f88d 1018 	strb.w	r1, [sp, #24]
 802d756:	f1b9 0f00 	cmp.w	r9, #0
 802d75a:	d00b      	beq.n	802d774 <__strftime.isra.0+0x368>
 802d75c:	2a05      	cmp	r2, #5
 802d75e:	f88d 9019 	strb.w	r9, [sp, #25]
 802d762:	d817      	bhi.n	802d794 <__strftime.isra.0+0x388>
 802d764:	f10d 001a 	add.w	r0, sp, #26
 802d768:	492e      	ldr	r1, [pc, #184]	@ (802d824 <__strftime.isra.0+0x418>)
 802d76a:	f000 fe83 	bl	802e474 <strcpy>
 802d76e:	4633      	mov	r3, r6
 802d770:	aa06      	add	r2, sp, #24
 802d772:	e75b      	b.n	802d62c <__strftime.isra.0+0x220>
 802d774:	232b      	movs	r3, #43	@ 0x2b
 802d776:	f88d 3019 	strb.w	r3, [sp, #25]
 802d77a:	2304      	movs	r3, #4
 802d77c:	4a2a      	ldr	r2, [pc, #168]	@ (802d828 <__strftime.isra.0+0x41c>)
 802d77e:	211e      	movs	r1, #30
 802d780:	f10d 001a 	add.w	r0, sp, #26
 802d784:	f002 f938 	bl	802f9f8 <sniprintf>
 802d788:	2800      	cmp	r0, #0
 802d78a:	ddeb      	ble.n	802d764 <__strftime.isra.0+0x358>
 802d78c:	f10d 031a 	add.w	r3, sp, #26
 802d790:	4418      	add	r0, r3
 802d792:	e7e9      	b.n	802d768 <__strftime.isra.0+0x35c>
 802d794:	1f93      	subs	r3, r2, #6
 802d796:	d0e5      	beq.n	802d764 <__strftime.isra.0+0x358>
 802d798:	e7f0      	b.n	802d77c <__strftime.isra.0+0x370>
 802d79a:	4630      	mov	r0, r6
 802d79c:	f7ff fde4 	bl	802d368 <iso_year_adjust>
 802d7a0:	4682      	mov	sl, r0
 802d7a2:	6970      	ldr	r0, [r6, #20]
 802d7a4:	2800      	cmp	r0, #0
 802d7a6:	db11      	blt.n	802d7cc <__strftime.isra.0+0x3c0>
 802d7a8:	2364      	movs	r3, #100	@ 0x64
 802d7aa:	fb90 f2f3 	sdiv	r2, r0, r3
 802d7ae:	fb03 0012 	mls	r0, r3, r2, r0
 802d7b2:	2364      	movs	r3, #100	@ 0x64
 802d7b4:	4482      	add	sl, r0
 802d7b6:	fb9a f2f3 	sdiv	r2, sl, r3
 802d7ba:	fb03 aa12 	mls	sl, r3, r2, sl
 802d7be:	449a      	add	sl, r3
 802d7c0:	fbba f2f3 	udiv	r2, sl, r3
 802d7c4:	fb03 a312 	mls	r3, r3, r2, sl
 802d7c8:	4a14      	ldr	r2, [pc, #80]	@ (802d81c <__strftime.isra.0+0x410>)
 802d7ca:	e78b      	b.n	802d6e4 <__strftime.isra.0+0x2d8>
 802d7cc:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802d7d0:	f000 feed 	bl	802e5ae <abs>
 802d7d4:	2364      	movs	r3, #100	@ 0x64
 802d7d6:	f1ba 0f00 	cmp.w	sl, #0
 802d7da:	fb90 f2f3 	sdiv	r2, r0, r3
 802d7de:	fb02 0013 	mls	r0, r2, r3, r0
 802d7e2:	da07      	bge.n	802d7f4 <__strftime.isra.0+0x3e8>
 802d7e4:	6972      	ldr	r2, [r6, #20]
 802d7e6:	f2a3 73cf 	subw	r3, r3, #1999	@ 0x7cf
 802d7ea:	429a      	cmp	r2, r3
 802d7ec:	bfb8      	it	lt
 802d7ee:	f04f 0a01 	movlt.w	sl, #1
 802d7f2:	e7de      	b.n	802d7b2 <__strftime.isra.0+0x3a6>
 802d7f4:	d0dd      	beq.n	802d7b2 <__strftime.isra.0+0x3a6>
 802d7f6:	6972      	ldr	r2, [r6, #20]
 802d7f8:	4b03      	ldr	r3, [pc, #12]	@ (802d808 <__strftime.isra.0+0x3fc>)
 802d7fa:	429a      	cmp	r2, r3
 802d7fc:	bfb8      	it	lt
 802d7fe:	f04f 3aff 	movlt.w	sl, #4294967295	@ 0xffffffff
 802d802:	e7d6      	b.n	802d7b2 <__strftime.isra.0+0x3a6>
 802d804:	0803c6fc 	.word	0x0803c6fc
 802d808:	fffff894 	.word	0xfffff894
 802d80c:	0803c51f 	.word	0x0803c51f
 802d810:	0803c43a 	.word	0x0803c43a
 802d814:	0803c521 	.word	0x0803c521
 802d818:	0803c523 	.word	0x0803c523
 802d81c:	0803c531 	.word	0x0803c531
 802d820:	0803c527 	.word	0x0803c527
 802d824:	0803c53a 	.word	0x0803c53a
 802d828:	0803c536 	.word	0x0803c536
 802d82c:	0803c517 	.word	0x0803c517
 802d830:	0803c510 	.word	0x0803c510
 802d834:	6971      	ldr	r1, [r6, #20]
 802d836:	48bc      	ldr	r0, [pc, #752]	@ (802db28 <__strftime.isra.0+0x71c>)
 802d838:	9205      	str	r2, [sp, #20]
 802d83a:	4281      	cmp	r1, r0
 802d83c:	bfac      	ite	ge
 802d83e:	2300      	movge	r3, #0
 802d840:	2301      	movlt	r3, #1
 802d842:	4630      	mov	r0, r6
 802d844:	e9cd 3103 	strd	r3, r1, [sp, #12]
 802d848:	f7ff fd8e 	bl	802d368 <iso_year_adjust>
 802d84c:	9904      	ldr	r1, [sp, #16]
 802d84e:	9a05      	ldr	r2, [sp, #20]
 802d850:	2900      	cmp	r1, #0
 802d852:	4682      	mov	sl, r0
 802d854:	db3a      	blt.n	802d8cc <__strftime.isra.0+0x4c0>
 802d856:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 802d85a:	fb91 fbfb 	sdiv	fp, r1, fp
 802d85e:	f10b 0b13 	add.w	fp, fp, #19
 802d862:	6970      	ldr	r0, [r6, #20]
 802d864:	2800      	cmp	r0, #0
 802d866:	db3e      	blt.n	802d8e6 <__strftime.isra.0+0x4da>
 802d868:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 802d86c:	f1ba 0f00 	cmp.w	sl, #0
 802d870:	fb90 fefc 	sdiv	lr, r0, ip
 802d874:	fb0c 001e 	mls	r0, ip, lr, r0
 802d878:	da4f      	bge.n	802d91a <__strftime.isra.0+0x50e>
 802d87a:	4482      	add	sl, r0
 802d87c:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 802d880:	d157      	bne.n	802d932 <__strftime.isra.0+0x526>
 802d882:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802d886:	f04f 0a63 	mov.w	sl, #99	@ 0x63
 802d88a:	9b03      	ldr	r3, [sp, #12]
 802d88c:	2164      	movs	r1, #100	@ 0x64
 802d88e:	fb01 aa0b 	mla	sl, r1, fp, sl
 802d892:	2b00      	cmp	r3, #0
 802d894:	f040 81f7 	bne.w	802dc86 <__strftime.isra.0+0x87a>
 802d898:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 802d89c:	d104      	bne.n	802d8a8 <__strftime.isra.0+0x49c>
 802d89e:	f242 710f 	movw	r1, #9999	@ 0x270f
 802d8a2:	458a      	cmp	sl, r1
 802d8a4:	f200 8275 	bhi.w	802dd92 <__strftime.isra.0+0x986>
 802d8a8:	a906      	add	r1, sp, #24
 802d8aa:	2025      	movs	r0, #37	@ 0x25
 802d8ac:	7008      	strb	r0, [r1, #0]
 802d8ae:	f1b9 0f00 	cmp.w	r9, #0
 802d8b2:	f040 81f3 	bne.w	802dc9c <__strftime.isra.0+0x890>
 802d8b6:	1c48      	adds	r0, r1, #1
 802d8b8:	499c      	ldr	r1, [pc, #624]	@ (802db2c <__strftime.isra.0+0x720>)
 802d8ba:	9203      	str	r2, [sp, #12]
 802d8bc:	f000 fdda 	bl	802e474 <strcpy>
 802d8c0:	9a03      	ldr	r2, [sp, #12]
 802d8c2:	f8cd a000 	str.w	sl, [sp]
 802d8c6:	4613      	mov	r3, r2
 802d8c8:	aa06      	add	r2, sp, #24
 802d8ca:	e098      	b.n	802d9fe <__strftime.isra.0+0x5f2>
 802d8cc:	f201 706c 	addw	r0, r1, #1900	@ 0x76c
 802d8d0:	9205      	str	r2, [sp, #20]
 802d8d2:	9104      	str	r1, [sp, #16]
 802d8d4:	f000 fe6b 	bl	802e5ae <abs>
 802d8d8:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 802d8dc:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 802d8e0:	fb90 fbfc 	sdiv	fp, r0, ip
 802d8e4:	e7bd      	b.n	802d862 <__strftime.isra.0+0x456>
 802d8e6:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802d8ea:	e9cd 2104 	strd	r2, r1, [sp, #16]
 802d8ee:	f000 fe5e 	bl	802e5ae <abs>
 802d8f2:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 802d8f6:	f1ba 0f00 	cmp.w	sl, #0
 802d8fa:	fb90 fefc 	sdiv	lr, r0, ip
 802d8fe:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 802d902:	fb0e 001c 	mls	r0, lr, ip, r0
 802d906:	da08      	bge.n	802d91a <__strftime.isra.0+0x50e>
 802d908:	6971      	ldr	r1, [r6, #20]
 802d90a:	4b89      	ldr	r3, [pc, #548]	@ (802db30 <__strftime.isra.0+0x724>)
 802d90c:	4299      	cmp	r1, r3
 802d90e:	dab4      	bge.n	802d87a <__strftime.isra.0+0x46e>
 802d910:	f04f 0a01 	mov.w	sl, #1
 802d914:	f8cd a00c 	str.w	sl, [sp, #12]
 802d918:	e7af      	b.n	802d87a <__strftime.isra.0+0x46e>
 802d91a:	f1ba 0f00 	cmp.w	sl, #0
 802d91e:	d0ac      	beq.n	802d87a <__strftime.isra.0+0x46e>
 802d920:	4b81      	ldr	r3, [pc, #516]	@ (802db28 <__strftime.isra.0+0x71c>)
 802d922:	4299      	cmp	r1, r3
 802d924:	9b03      	ldr	r3, [sp, #12]
 802d926:	bfbc      	itt	lt
 802d928:	2301      	movlt	r3, #1
 802d92a:	f04f 3aff 	movlt.w	sl, #4294967295	@ 0xffffffff
 802d92e:	9303      	str	r3, [sp, #12]
 802d930:	e7a3      	b.n	802d87a <__strftime.isra.0+0x46e>
 802d932:	f1ba 0f64 	cmp.w	sl, #100	@ 0x64
 802d936:	bf04      	itt	eq
 802d938:	f10b 0b01 	addeq.w	fp, fp, #1
 802d93c:	f04f 0a00 	moveq.w	sl, #0
 802d940:	e7a3      	b.n	802d88a <__strftime.isra.0+0x47e>
 802d942:	497c      	ldr	r1, [pc, #496]	@ (802db34 <__strftime.isra.0+0x728>)
 802d944:	4a7c      	ldr	r2, [pc, #496]	@ (802db38 <__strftime.isra.0+0x72c>)
 802d946:	68b3      	ldr	r3, [r6, #8]
 802d948:	286b      	cmp	r0, #107	@ 0x6b
 802d94a:	bf18      	it	ne
 802d94c:	460a      	movne	r2, r1
 802d94e:	e6c9      	b.n	802d6e4 <__strftime.isra.0+0x2d8>
 802d950:	68b3      	ldr	r3, [r6, #8]
 802d952:	b163      	cbz	r3, 802d96e <__strftime.isra.0+0x562>
 802d954:	2b0c      	cmp	r3, #12
 802d956:	d004      	beq.n	802d962 <__strftime.isra.0+0x556>
 802d958:	210c      	movs	r1, #12
 802d95a:	fb93 f2f1 	sdiv	r2, r3, r1
 802d95e:	fb01 3312 	mls	r3, r1, r2, r3
 802d962:	4975      	ldr	r1, [pc, #468]	@ (802db38 <__strftime.isra.0+0x72c>)
 802d964:	4a73      	ldr	r2, [pc, #460]	@ (802db34 <__strftime.isra.0+0x728>)
 802d966:	2849      	cmp	r0, #73	@ 0x49
 802d968:	bf18      	it	ne
 802d96a:	460a      	movne	r2, r1
 802d96c:	e6ba      	b.n	802d6e4 <__strftime.isra.0+0x2d8>
 802d96e:	230c      	movs	r3, #12
 802d970:	e7f7      	b.n	802d962 <__strftime.isra.0+0x556>
 802d972:	69f3      	ldr	r3, [r6, #28]
 802d974:	4a71      	ldr	r2, [pc, #452]	@ (802db3c <__strftime.isra.0+0x730>)
 802d976:	3301      	adds	r3, #1
 802d978:	e6b4      	b.n	802d6e4 <__strftime.isra.0+0x2d8>
 802d97a:	6933      	ldr	r3, [r6, #16]
 802d97c:	3301      	adds	r3, #1
 802d97e:	e723      	b.n	802d7c8 <__strftime.isra.0+0x3bc>
 802d980:	6873      	ldr	r3, [r6, #4]
 802d982:	e721      	b.n	802d7c8 <__strftime.isra.0+0x3bc>
 802d984:	1e6b      	subs	r3, r5, #1
 802d986:	429c      	cmp	r4, r3
 802d988:	f4bf aed0 	bcs.w	802d72c <__strftime.isra.0+0x320>
 802d98c:	f104 0a01 	add.w	sl, r4, #1
 802d990:	230a      	movs	r3, #10
 802d992:	553b      	strb	r3, [r7, r4]
 802d994:	e5e8      	b.n	802d568 <__strftime.isra.0+0x15c>
 802d996:	68b3      	ldr	r3, [r6, #8]
 802d998:	2b0b      	cmp	r3, #11
 802d99a:	4b69      	ldr	r3, [pc, #420]	@ (802db40 <__strftime.isra.0+0x734>)
 802d99c:	bfd4      	ite	le
 802d99e:	2200      	movle	r2, #0
 802d9a0:	2201      	movgt	r2, #1
 802d9a2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802d9a6:	f8d3 b0a4 	ldr.w	fp, [r3, #164]	@ 0xa4
 802d9aa:	4658      	mov	r0, fp
 802d9ac:	f7e2 fc78 	bl	80102a0 <strlen>
 802d9b0:	eb04 0a00 	add.w	sl, r4, r0
 802d9b4:	4863      	ldr	r0, [pc, #396]	@ (802db44 <__strftime.isra.0+0x738>)
 802d9b6:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802d9ba:	1e69      	subs	r1, r5, #1
 802d9bc:	45a2      	cmp	sl, r4
 802d9be:	f43f add3 	beq.w	802d568 <__strftime.isra.0+0x15c>
 802d9c2:	42a1      	cmp	r1, r4
 802d9c4:	f67f aeb2 	bls.w	802d72c <__strftime.isra.0+0x320>
 802d9c8:	f898 2000 	ldrb.w	r2, [r8]
 802d9cc:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
 802d9d0:	2a50      	cmp	r2, #80	@ 0x50
 802d9d2:	d106      	bne.n	802d9e2 <__strftime.isra.0+0x5d6>
 802d9d4:	5cc2      	ldrb	r2, [r0, r3]
 802d9d6:	f002 0203 	and.w	r2, r2, #3
 802d9da:	2a01      	cmp	r2, #1
 802d9dc:	bf08      	it	eq
 802d9de:	3320      	addeq	r3, #32
 802d9e0:	b2db      	uxtb	r3, r3
 802d9e2:	553b      	strb	r3, [r7, r4]
 802d9e4:	3401      	adds	r4, #1
 802d9e6:	e7e9      	b.n	802d9bc <__strftime.isra.0+0x5b0>
 802d9e8:	2203      	movs	r2, #3
 802d9ea:	6933      	ldr	r3, [r6, #16]
 802d9ec:	fb93 f3f2 	sdiv	r3, r3, r2
 802d9f0:	4a55      	ldr	r2, [pc, #340]	@ (802db48 <__strftime.isra.0+0x73c>)
 802d9f2:	3301      	adds	r3, #1
 802d9f4:	e676      	b.n	802d6e4 <__strftime.isra.0+0x2d8>
 802d9f6:	6873      	ldr	r3, [r6, #4]
 802d9f8:	9300      	str	r3, [sp, #0]
 802d9fa:	68b3      	ldr	r3, [r6, #8]
 802d9fc:	4a53      	ldr	r2, [pc, #332]	@ (802db4c <__strftime.isra.0+0x740>)
 802d9fe:	1b29      	subs	r1, r5, r4
 802da00:	1938      	adds	r0, r7, r4
 802da02:	f001 fff9 	bl	802f9f8 <sniprintf>
 802da06:	e68a      	b.n	802d71e <__strftime.isra.0+0x312>
 802da08:	6a33      	ldr	r3, [r6, #32]
 802da0a:	2b00      	cmp	r3, #0
 802da0c:	db78      	blt.n	802db00 <__strftime.isra.0+0x6f4>
 802da0e:	f000 fa7b 	bl	802df08 <__tz_lock>
 802da12:	9b02      	ldr	r3, [sp, #8]
 802da14:	b90b      	cbnz	r3, 802da1a <__strftime.isra.0+0x60e>
 802da16:	f000 fa83 	bl	802df20 <_tzset_unlocked>
 802da1a:	f007 fe73 	bl	8035704 <__gettzinfo>
 802da1e:	6a33      	ldr	r3, [r6, #32]
 802da20:	2b00      	cmp	r3, #0
 802da22:	bfd4      	ite	le
 802da24:	2200      	movle	r2, #0
 802da26:	2201      	movgt	r2, #1
 802da28:	2328      	movs	r3, #40	@ 0x28
 802da2a:	fb02 3303 	mla	r3, r2, r3, r3
 802da2e:	58c3      	ldr	r3, [r0, r3]
 802da30:	f1c3 0a00 	rsb	sl, r3, #0
 802da34:	f000 fa6e 	bl	802df14 <__tz_unlock>
 802da38:	2301      	movs	r3, #1
 802da3a:	9302      	str	r3, [sp, #8]
 802da3c:	6972      	ldr	r2, [r6, #20]
 802da3e:	f1b2 0345 	subs.w	r3, r2, #69	@ 0x45
 802da42:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 802da46:	f16c 0c00 	sbc.w	ip, ip, #0
 802da4a:	f1bc 0f00 	cmp.w	ip, #0
 802da4e:	eba5 0104 	sub.w	r1, r5, r4
 802da52:	eb07 0004 	add.w	r0, r7, r4
 802da56:	da02      	bge.n	802da5e <__strftime.isra.0+0x652>
 802da58:	3303      	adds	r3, #3
 802da5a:	f14c 0c00 	adc.w	ip, ip, #0
 802da5e:	089b      	lsrs	r3, r3, #2
 802da60:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 802da64:	f102 3eff 	add.w	lr, r2, #4294967295	@ 0xffffffff
 802da68:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 802da6c:	ea4f 0cac 	mov.w	ip, ip, asr #2
 802da70:	fb9e fefb 	sdiv	lr, lr, fp
 802da74:	ebb3 030e 	subs.w	r3, r3, lr
 802da78:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 802da7c:	f44f 7bc8 	mov.w	fp, #400	@ 0x190
 802da80:	f202 1e2b 	addw	lr, r2, #299	@ 0x12b
 802da84:	fb9e fefb 	sdiv	lr, lr, fp
 802da88:	eb13 030e 	adds.w	r3, r3, lr
 802da8c:	eb4c 7cee 	adc.w	ip, ip, lr, asr #31
 802da90:	3a46      	subs	r2, #70	@ 0x46
 802da92:	f240 1e6d 	movw	lr, #365	@ 0x16d
 802da96:	fb0e f202 	mul.w	r2, lr, r2
 802da9a:	189b      	adds	r3, r3, r2
 802da9c:	eb4c 7ce2 	adc.w	ip, ip, r2, asr #31
 802daa0:	69f2      	ldr	r2, [r6, #28]
 802daa2:	f8d6 b004 	ldr.w	fp, [r6, #4]
 802daa6:	189b      	adds	r3, r3, r2
 802daa8:	f04f 0e18 	mov.w	lr, #24
 802daac:	eb4c 7ce2 	adc.w	ip, ip, r2, asr #31
 802dab0:	fba3 230e 	umull	r2, r3, r3, lr
 802dab4:	fb0e 330c 	mla	r3, lr, ip, r3
 802dab8:	f8d6 c008 	ldr.w	ip, [r6, #8]
 802dabc:	eb12 020c 	adds.w	r2, r2, ip
 802dac0:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
 802dac4:	f04f 0c3c 	mov.w	ip, #60	@ 0x3c
 802dac8:	fba2 2e0c 	umull	r2, lr, r2, ip
 802dacc:	fb0c ee03 	mla	lr, ip, r3, lr
 802dad0:	eb12 030b 	adds.w	r3, r2, fp
 802dad4:	eb4e 72eb 	adc.w	r2, lr, fp, asr #31
 802dad8:	fba3 e30c 	umull	lr, r3, r3, ip
 802dadc:	fb0c 3302 	mla	r3, ip, r2, r3
 802dae0:	f8d6 c000 	ldr.w	ip, [r6]
 802dae4:	eb1e 020c 	adds.w	r2, lr, ip
 802dae8:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
 802daec:	ebb2 020a 	subs.w	r2, r2, sl
 802daf0:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 802daf4:	e9cd 2300 	strd	r2, r3, [sp]
 802daf8:	4a15      	ldr	r2, [pc, #84]	@ (802db50 <__strftime.isra.0+0x744>)
 802dafa:	f001 ff7d 	bl	802f9f8 <sniprintf>
 802dafe:	e60e      	b.n	802d71e <__strftime.isra.0+0x312>
 802db00:	f04f 0a00 	mov.w	sl, #0
 802db04:	e79a      	b.n	802da3c <__strftime.isra.0+0x630>
 802db06:	6833      	ldr	r3, [r6, #0]
 802db08:	e65e      	b.n	802d7c8 <__strftime.isra.0+0x3bc>
 802db0a:	1e6b      	subs	r3, r5, #1
 802db0c:	429c      	cmp	r4, r3
 802db0e:	f4bf ae0d 	bcs.w	802d72c <__strftime.isra.0+0x320>
 802db12:	f104 0a01 	add.w	sl, r4, #1
 802db16:	2309      	movs	r3, #9
 802db18:	e73b      	b.n	802d992 <__strftime.isra.0+0x586>
 802db1a:	6833      	ldr	r3, [r6, #0]
 802db1c:	9301      	str	r3, [sp, #4]
 802db1e:	6873      	ldr	r3, [r6, #4]
 802db20:	9300      	str	r3, [sp, #0]
 802db22:	68b3      	ldr	r3, [r6, #8]
 802db24:	4a0b      	ldr	r2, [pc, #44]	@ (802db54 <__strftime.isra.0+0x748>)
 802db26:	e5d1      	b.n	802d6cc <__strftime.isra.0+0x2c0>
 802db28:	fffff894 	.word	0xfffff894
 802db2c:	0803c542 	.word	0x0803c542
 802db30:	fffff895 	.word	0xfffff895
 802db34:	0803c531 	.word	0x0803c531
 802db38:	0803c523 	.word	0x0803c523
 802db3c:	0803c546 	.word	0x0803c546
 802db40:	0803c6fc 	.word	0x0803c6fc
 802db44:	0803c7f9 	.word	0x0803c7f9
 802db48:	0803c54b 	.word	0x0803c54b
 802db4c:	0803c55a 	.word	0x0803c55a
 802db50:	0803c550 	.word	0x0803c550
 802db54:	0803c555 	.word	0x0803c555
 802db58:	1e6b      	subs	r3, r5, #1
 802db5a:	429c      	cmp	r4, r3
 802db5c:	f4bf ade6 	bcs.w	802d72c <__strftime.isra.0+0x320>
 802db60:	69b3      	ldr	r3, [r6, #24]
 802db62:	b91b      	cbnz	r3, 802db6c <__strftime.isra.0+0x760>
 802db64:	2337      	movs	r3, #55	@ 0x37
 802db66:	f104 0a01 	add.w	sl, r4, #1
 802db6a:	e712      	b.n	802d992 <__strftime.isra.0+0x586>
 802db6c:	3330      	adds	r3, #48	@ 0x30
 802db6e:	b2db      	uxtb	r3, r3
 802db70:	e7f9      	b.n	802db66 <__strftime.isra.0+0x75a>
 802db72:	69f3      	ldr	r3, [r6, #28]
 802db74:	69b2      	ldr	r2, [r6, #24]
 802db76:	3307      	adds	r3, #7
 802db78:	1a9b      	subs	r3, r3, r2
 802db7a:	2207      	movs	r2, #7
 802db7c:	fb93 f3f2 	sdiv	r3, r3, r2
 802db80:	e622      	b.n	802d7c8 <__strftime.isra.0+0x3bc>
 802db82:	4630      	mov	r0, r6
 802db84:	f7ff fbf0 	bl	802d368 <iso_year_adjust>
 802db88:	69b2      	ldr	r2, [r6, #24]
 802db8a:	b132      	cbz	r2, 802db9a <__strftime.isra.0+0x78e>
 802db8c:	3a01      	subs	r2, #1
 802db8e:	2800      	cmp	r0, #0
 802db90:	69f3      	ldr	r3, [r6, #28]
 802db92:	dc26      	bgt.n	802dbe2 <__strftime.isra.0+0x7d6>
 802db94:	d103      	bne.n	802db9e <__strftime.isra.0+0x792>
 802db96:	330a      	adds	r3, #10
 802db98:	e7ee      	b.n	802db78 <__strftime.isra.0+0x76c>
 802db9a:	2206      	movs	r2, #6
 802db9c:	e7f7      	b.n	802db8e <__strftime.isra.0+0x782>
 802db9e:	1ad2      	subs	r2, r2, r3
 802dba0:	6973      	ldr	r3, [r6, #20]
 802dba2:	2b00      	cmp	r3, #0
 802dba4:	f240 716b 	movw	r1, #1899	@ 0x76b
 802dba8:	bfa8      	it	ge
 802dbaa:	f06f 0164 	mvnge.w	r1, #100	@ 0x64
 802dbae:	440b      	add	r3, r1
 802dbb0:	0799      	lsls	r1, r3, #30
 802dbb2:	d105      	bne.n	802dbc0 <__strftime.isra.0+0x7b4>
 802dbb4:	2064      	movs	r0, #100	@ 0x64
 802dbb6:	fb93 f1f0 	sdiv	r1, r3, r0
 802dbba:	fb00 3111 	mls	r1, r0, r1, r3
 802dbbe:	b971      	cbnz	r1, 802dbde <__strftime.isra.0+0x7d2>
 802dbc0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 802dbc4:	fb93 f0f1 	sdiv	r0, r3, r1
 802dbc8:	fb01 3310 	mls	r3, r1, r0, r3
 802dbcc:	fab3 f383 	clz	r3, r3
 802dbd0:	095b      	lsrs	r3, r3, #5
 802dbd2:	1ad2      	subs	r2, r2, r3
 802dbd4:	2a04      	cmp	r2, #4
 802dbd6:	bfcc      	ite	gt
 802dbd8:	2334      	movgt	r3, #52	@ 0x34
 802dbda:	2335      	movle	r3, #53	@ 0x35
 802dbdc:	e5f4      	b.n	802d7c8 <__strftime.isra.0+0x3bc>
 802dbde:	2301      	movs	r3, #1
 802dbe0:	e7f7      	b.n	802dbd2 <__strftime.isra.0+0x7c6>
 802dbe2:	2301      	movs	r3, #1
 802dbe4:	e5f0      	b.n	802d7c8 <__strftime.isra.0+0x3bc>
 802dbe6:	496c      	ldr	r1, [pc, #432]	@ (802dd98 <__strftime.isra.0+0x98c>)
 802dbe8:	9203      	str	r2, [sp, #12]
 802dbea:	a806      	add	r0, sp, #24
 802dbec:	f000 fc42 	bl	802e474 <strcpy>
 802dbf0:	a806      	add	r0, sp, #24
 802dbf2:	f7e2 fb55 	bl	80102a0 <strlen>
 802dbf6:	ab06      	add	r3, sp, #24
 802dbf8:	eb03 0a00 	add.w	sl, r3, r0
 802dbfc:	f10a 0a01 	add.w	sl, sl, #1
 802dc00:	46d3      	mov	fp, sl
 802dc02:	f1b9 0f00 	cmp.w	r9, #0
 802dc06:	d009      	beq.n	802dc1c <__strftime.isra.0+0x810>
 802dc08:	9a03      	ldr	r2, [sp, #12]
 802dc0a:	f803 9000 	strb.w	r9, [r3, r0]
 802dc0e:	2a05      	cmp	r2, #5
 802dc10:	d901      	bls.n	802dc16 <__strftime.isra.0+0x80a>
 802dc12:	1f93      	subs	r3, r2, #6
 802dc14:	d106      	bne.n	802dc24 <__strftime.isra.0+0x818>
 802dc16:	4961      	ldr	r1, [pc, #388]	@ (802dd9c <__strftime.isra.0+0x990>)
 802dc18:	4658      	mov	r0, fp
 802dc1a:	e5a6      	b.n	802d76a <__strftime.isra.0+0x35e>
 802dc1c:	aa06      	add	r2, sp, #24
 802dc1e:	232b      	movs	r3, #43	@ 0x2b
 802dc20:	5413      	strb	r3, [r2, r0]
 802dc22:	2304      	movs	r3, #4
 802dc24:	a90e      	add	r1, sp, #56	@ 0x38
 802dc26:	4a5e      	ldr	r2, [pc, #376]	@ (802dda0 <__strftime.isra.0+0x994>)
 802dc28:	eba1 010a 	sub.w	r1, r1, sl
 802dc2c:	4650      	mov	r0, sl
 802dc2e:	f001 fee3 	bl	802f9f8 <sniprintf>
 802dc32:	2800      	cmp	r0, #0
 802dc34:	bfc8      	it	gt
 802dc36:	eb0a 0b00 	addgt.w	fp, sl, r0
 802dc3a:	e7ec      	b.n	802dc16 <__strftime.isra.0+0x80a>
 802dc3c:	1e6b      	subs	r3, r5, #1
 802dc3e:	429c      	cmp	r4, r3
 802dc40:	f4bf ad74 	bcs.w	802d72c <__strftime.isra.0+0x320>
 802dc44:	69b3      	ldr	r3, [r6, #24]
 802dc46:	f104 0a01 	add.w	sl, r4, #1
 802dc4a:	3330      	adds	r3, #48	@ 0x30
 802dc4c:	e6a1      	b.n	802d992 <__strftime.isra.0+0x586>
 802dc4e:	69b2      	ldr	r2, [r6, #24]
 802dc50:	b11a      	cbz	r2, 802dc5a <__strftime.isra.0+0x84e>
 802dc52:	3a01      	subs	r2, #1
 802dc54:	69f3      	ldr	r3, [r6, #28]
 802dc56:	3307      	adds	r3, #7
 802dc58:	e78e      	b.n	802db78 <__strftime.isra.0+0x76c>
 802dc5a:	2206      	movs	r2, #6
 802dc5c:	e7fa      	b.n	802dc54 <__strftime.isra.0+0x848>
 802dc5e:	6970      	ldr	r0, [r6, #20]
 802dc60:	2800      	cmp	r0, #0
 802dc62:	db05      	blt.n	802dc70 <__strftime.isra.0+0x864>
 802dc64:	2364      	movs	r3, #100	@ 0x64
 802dc66:	fb90 f2f3 	sdiv	r2, r0, r3
 802dc6a:	fb02 0313 	mls	r3, r2, r3, r0
 802dc6e:	e5ab      	b.n	802d7c8 <__strftime.isra.0+0x3bc>
 802dc70:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802dc74:	f000 fc9b 	bl	802e5ae <abs>
 802dc78:	e7f4      	b.n	802dc64 <__strftime.isra.0+0x858>
 802dc7a:	6971      	ldr	r1, [r6, #20]
 802dc7c:	4849      	ldr	r0, [pc, #292]	@ (802dda4 <__strftime.isra.0+0x998>)
 802dc7e:	4281      	cmp	r1, r0
 802dc80:	da09      	bge.n	802dc96 <__strftime.isra.0+0x88a>
 802dc82:	eba0 0a01 	sub.w	sl, r0, r1
 802dc86:	212d      	movs	r1, #45	@ 0x2d
 802dc88:	f88d 1018 	strb.w	r1, [sp, #24]
 802dc8c:	b102      	cbz	r2, 802dc90 <__strftime.isra.0+0x884>
 802dc8e:	3a01      	subs	r2, #1
 802dc90:	f10d 0119 	add.w	r1, sp, #25
 802dc94:	e609      	b.n	802d8aa <__strftime.isra.0+0x49e>
 802dc96:	f201 7a6c 	addw	sl, r1, #1900	@ 0x76c
 802dc9a:	e5fd      	b.n	802d898 <__strftime.isra.0+0x48c>
 802dc9c:	2330      	movs	r3, #48	@ 0x30
 802dc9e:	1c88      	adds	r0, r1, #2
 802dca0:	704b      	strb	r3, [r1, #1]
 802dca2:	e609      	b.n	802d8b8 <__strftime.isra.0+0x4ac>
 802dca4:	6a33      	ldr	r3, [r6, #32]
 802dca6:	2b00      	cmp	r3, #0
 802dca8:	da01      	bge.n	802dcae <__strftime.isra.0+0x8a2>
 802dcaa:	46a2      	mov	sl, r4
 802dcac:	e45c      	b.n	802d568 <__strftime.isra.0+0x15c>
 802dcae:	f000 f92b 	bl	802df08 <__tz_lock>
 802dcb2:	9b02      	ldr	r3, [sp, #8]
 802dcb4:	b90b      	cbnz	r3, 802dcba <__strftime.isra.0+0x8ae>
 802dcb6:	f000 f933 	bl	802df20 <_tzset_unlocked>
 802dcba:	f007 fd23 	bl	8035704 <__gettzinfo>
 802dcbe:	6a33      	ldr	r3, [r6, #32]
 802dcc0:	2b00      	cmp	r3, #0
 802dcc2:	bfd4      	ite	le
 802dcc4:	2200      	movle	r2, #0
 802dcc6:	2201      	movgt	r2, #1
 802dcc8:	2328      	movs	r3, #40	@ 0x28
 802dcca:	fb02 3303 	mla	r3, r2, r3, r3
 802dcce:	eb07 0a04 	add.w	sl, r7, r4
 802dcd2:	58c3      	ldr	r3, [r0, r3]
 802dcd4:	f1c3 0900 	rsb	r9, r3, #0
 802dcd8:	f000 f91c 	bl	802df14 <__tz_unlock>
 802dcdc:	233c      	movs	r3, #60	@ 0x3c
 802dcde:	fb99 f0f3 	sdiv	r0, r9, r3
 802dce2:	f001 fbfe 	bl	802f4e2 <labs>
 802dce6:	233c      	movs	r3, #60	@ 0x3c
 802dce8:	eba5 0b04 	sub.w	fp, r5, r4
 802dcec:	fb90 f2f3 	sdiv	r2, r0, r3
 802dcf0:	fb02 0013 	mls	r0, r2, r3, r0
 802dcf4:	9000      	str	r0, [sp, #0]
 802dcf6:	4a2c      	ldr	r2, [pc, #176]	@ (802dda8 <__strftime.isra.0+0x99c>)
 802dcf8:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 802dcfc:	4659      	mov	r1, fp
 802dcfe:	4650      	mov	r0, sl
 802dd00:	fb99 f3f3 	sdiv	r3, r9, r3
 802dd04:	f001 fe78 	bl	802f9f8 <sniprintf>
 802dd08:	2800      	cmp	r0, #0
 802dd0a:	f6ff ad0f 	blt.w	802d72c <__strftime.isra.0+0x320>
 802dd0e:	eb00 0a04 	add.w	sl, r0, r4
 802dd12:	4555      	cmp	r5, sl
 802dd14:	f67f ad0a 	bls.w	802d72c <__strftime.isra.0+0x320>
 802dd18:	2301      	movs	r3, #1
 802dd1a:	9302      	str	r3, [sp, #8]
 802dd1c:	e424      	b.n	802d568 <__strftime.isra.0+0x15c>
 802dd1e:	6a33      	ldr	r3, [r6, #32]
 802dd20:	2b00      	cmp	r3, #0
 802dd22:	dbc2      	blt.n	802dcaa <__strftime.isra.0+0x89e>
 802dd24:	f000 f8f0 	bl	802df08 <__tz_lock>
 802dd28:	9b02      	ldr	r3, [sp, #8]
 802dd2a:	b90b      	cbnz	r3, 802dd30 <__strftime.isra.0+0x924>
 802dd2c:	f000 f8f8 	bl	802df20 <_tzset_unlocked>
 802dd30:	6a33      	ldr	r3, [r6, #32]
 802dd32:	4a1e      	ldr	r2, [pc, #120]	@ (802ddac <__strftime.isra.0+0x9a0>)
 802dd34:	2b00      	cmp	r3, #0
 802dd36:	bfd4      	ite	le
 802dd38:	2300      	movle	r3, #0
 802dd3a:	2301      	movgt	r3, #1
 802dd3c:	46a2      	mov	sl, r4
 802dd3e:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 802dd42:	4648      	mov	r0, r9
 802dd44:	f7e2 faac 	bl	80102a0 <strlen>
 802dd48:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 802dd4c:	4420      	add	r0, r4
 802dd4e:	1e6b      	subs	r3, r5, #1
 802dd50:	4550      	cmp	r0, sl
 802dd52:	d102      	bne.n	802dd5a <__strftime.isra.0+0x94e>
 802dd54:	f000 f8de 	bl	802df14 <__tz_unlock>
 802dd58:	e7de      	b.n	802dd18 <__strftime.isra.0+0x90c>
 802dd5a:	4553      	cmp	r3, sl
 802dd5c:	d906      	bls.n	802dd6c <__strftime.isra.0+0x960>
 802dd5e:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 802dd62:	f807 200a 	strb.w	r2, [r7, sl]
 802dd66:	f10a 0a01 	add.w	sl, sl, #1
 802dd6a:	e7f1      	b.n	802dd50 <__strftime.isra.0+0x944>
 802dd6c:	f000 f8d2 	bl	802df14 <__tz_unlock>
 802dd70:	e4dc      	b.n	802d72c <__strftime.isra.0+0x320>
 802dd72:	1e6b      	subs	r3, r5, #1
 802dd74:	429c      	cmp	r4, r3
 802dd76:	f4bf acd9 	bcs.w	802d72c <__strftime.isra.0+0x320>
 802dd7a:	f104 0a01 	add.w	sl, r4, #1
 802dd7e:	2325      	movs	r3, #37	@ 0x25
 802dd80:	e607      	b.n	802d992 <__strftime.isra.0+0x586>
 802dd82:	46a2      	mov	sl, r4
 802dd84:	2d00      	cmp	r5, #0
 802dd86:	f43f acd3 	beq.w	802d730 <__strftime.isra.0+0x324>
 802dd8a:	2300      	movs	r3, #0
 802dd8c:	f807 300a 	strb.w	r3, [r7, sl]
 802dd90:	e4ce      	b.n	802d730 <__strftime.isra.0+0x324>
 802dd92:	4649      	mov	r1, r9
 802dd94:	e778      	b.n	802dc88 <__strftime.isra.0+0x87c>
 802dd96:	bf00      	nop
 802dd98:	0803c564 	.word	0x0803c564
 802dd9c:	0803c6cc 	.word	0x0803c6cc
 802dda0:	0803c536 	.word	0x0803c536
 802dda4:	fffff894 	.word	0xfffff894
 802dda8:	0803c56c 	.word	0x0803c56c
 802ddac:	20000164 	.word	0x20000164

0802ddb0 <strftime>:
 802ddb0:	f7ff bb2c 	b.w	802d40c <__strftime.isra.0>

0802ddb4 <__tzcalc_limits>:
 802ddb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802ddb8:	4604      	mov	r4, r0
 802ddba:	f007 fca3 	bl	8035704 <__gettzinfo>
 802ddbe:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 802ddc2:	429c      	cmp	r4, r3
 802ddc4:	f340 8099 	ble.w	802defa <__tzcalc_limits+0x146>
 802ddc8:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 802ddcc:	19e5      	adds	r5, r4, r7
 802ddce:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 802ddd2:	f240 126d 	movw	r2, #365	@ 0x16d
 802ddd6:	10ad      	asrs	r5, r5, #2
 802ddd8:	fb02 5503 	mla	r5, r2, r3, r5
 802dddc:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 802dde0:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 802dde4:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 802dde8:	4f45      	ldr	r7, [pc, #276]	@ (802df00 <__tzcalc_limits+0x14c>)
 802ddea:	fb93 f3f2 	sdiv	r3, r3, r2
 802ddee:	441d      	add	r5, r3
 802ddf0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802ddf4:	eb04 030c 	add.w	r3, r4, ip
 802ddf8:	6044      	str	r4, [r0, #4]
 802ddfa:	fbb3 f3f2 	udiv	r3, r3, r2
 802ddfe:	4601      	mov	r1, r0
 802de00:	441d      	add	r5, r3
 802de02:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 802de06:	7a0b      	ldrb	r3, [r1, #8]
 802de08:	694a      	ldr	r2, [r1, #20]
 802de0a:	2b4a      	cmp	r3, #74	@ 0x4a
 802de0c:	d133      	bne.n	802de76 <__tzcalc_limits+0xc2>
 802de0e:	07a6      	lsls	r6, r4, #30
 802de10:	eb05 0302 	add.w	r3, r5, r2
 802de14:	d106      	bne.n	802de24 <__tzcalc_limits+0x70>
 802de16:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 802de1a:	fb94 f6fe 	sdiv	r6, r4, lr
 802de1e:	fb0e 4616 	mls	r6, lr, r6, r4
 802de22:	b936      	cbnz	r6, 802de32 <__tzcalc_limits+0x7e>
 802de24:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 802de28:	fb94 f6fe 	sdiv	r6, r4, lr
 802de2c:	fb0e 4616 	mls	r6, lr, r6, r4
 802de30:	b9fe      	cbnz	r6, 802de72 <__tzcalc_limits+0xbe>
 802de32:	2a3b      	cmp	r2, #59	@ 0x3b
 802de34:	bfd4      	ite	le
 802de36:	2200      	movle	r2, #0
 802de38:	2201      	movgt	r2, #1
 802de3a:	4413      	add	r3, r2
 802de3c:	3b01      	subs	r3, #1
 802de3e:	698a      	ldr	r2, [r1, #24]
 802de40:	17d6      	asrs	r6, r2, #31
 802de42:	fbc3 2607 	smlal	r2, r6, r3, r7
 802de46:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 802de48:	18d2      	adds	r2, r2, r3
 802de4a:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 802de4e:	e9c1 2308 	strd	r2, r3, [r1, #32]
 802de52:	3128      	adds	r1, #40	@ 0x28
 802de54:	458c      	cmp	ip, r1
 802de56:	d1d6      	bne.n	802de06 <__tzcalc_limits+0x52>
 802de58:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 802de5c:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 802de60:	428c      	cmp	r4, r1
 802de62:	4193      	sbcs	r3, r2
 802de64:	bfb4      	ite	lt
 802de66:	2301      	movlt	r3, #1
 802de68:	2300      	movge	r3, #0
 802de6a:	6003      	str	r3, [r0, #0]
 802de6c:	2001      	movs	r0, #1
 802de6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802de72:	2200      	movs	r2, #0
 802de74:	e7e1      	b.n	802de3a <__tzcalc_limits+0x86>
 802de76:	2b44      	cmp	r3, #68	@ 0x44
 802de78:	d101      	bne.n	802de7e <__tzcalc_limits+0xca>
 802de7a:	18ab      	adds	r3, r5, r2
 802de7c:	e7df      	b.n	802de3e <__tzcalc_limits+0x8a>
 802de7e:	07a3      	lsls	r3, r4, #30
 802de80:	d105      	bne.n	802de8e <__tzcalc_limits+0xda>
 802de82:	2664      	movs	r6, #100	@ 0x64
 802de84:	fb94 f3f6 	sdiv	r3, r4, r6
 802de88:	fb06 4313 	mls	r3, r6, r3, r4
 802de8c:	bb7b      	cbnz	r3, 802deee <__tzcalc_limits+0x13a>
 802de8e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 802de92:	fb94 f6f3 	sdiv	r6, r4, r3
 802de96:	fb03 4616 	mls	r6, r3, r6, r4
 802de9a:	fab6 f686 	clz	r6, r6
 802de9e:	0976      	lsrs	r6, r6, #5
 802dea0:	f8df e060 	ldr.w	lr, [pc, #96]	@ 802df04 <__tzcalc_limits+0x150>
 802dea4:	f8d1 900c 	ldr.w	r9, [r1, #12]
 802dea8:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 802deac:	462b      	mov	r3, r5
 802deae:	f04f 0800 	mov.w	r8, #0
 802deb2:	fb0a e606 	mla	r6, sl, r6, lr
 802deb6:	f108 0801 	add.w	r8, r8, #1
 802deba:	45c1      	cmp	r9, r8
 802debc:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 802dec0:	dc17      	bgt.n	802def2 <__tzcalc_limits+0x13e>
 802dec2:	f103 0804 	add.w	r8, r3, #4
 802dec6:	2607      	movs	r6, #7
 802dec8:	fb98 f6f6 	sdiv	r6, r8, r6
 802decc:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 802ded0:	eba8 0606 	sub.w	r6, r8, r6
 802ded4:	1b92      	subs	r2, r2, r6
 802ded6:	690e      	ldr	r6, [r1, #16]
 802ded8:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 802dedc:	bf48      	it	mi
 802dede:	3207      	addmi	r2, #7
 802dee0:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 802dee4:	4432      	add	r2, r6
 802dee6:	4572      	cmp	r2, lr
 802dee8:	da05      	bge.n	802def6 <__tzcalc_limits+0x142>
 802deea:	4413      	add	r3, r2
 802deec:	e7a7      	b.n	802de3e <__tzcalc_limits+0x8a>
 802deee:	2601      	movs	r6, #1
 802def0:	e7d6      	b.n	802dea0 <__tzcalc_limits+0xec>
 802def2:	4473      	add	r3, lr
 802def4:	e7df      	b.n	802deb6 <__tzcalc_limits+0x102>
 802def6:	3a07      	subs	r2, #7
 802def8:	e7f5      	b.n	802dee6 <__tzcalc_limits+0x132>
 802defa:	2000      	movs	r0, #0
 802defc:	e7b7      	b.n	802de6e <__tzcalc_limits+0xba>
 802defe:	bf00      	nop
 802df00:	00015180 	.word	0x00015180
 802df04:	0803c4ac 	.word	0x0803c4ac

0802df08 <__tz_lock>:
 802df08:	4801      	ldr	r0, [pc, #4]	@ (802df10 <__tz_lock+0x8>)
 802df0a:	f000 bae1 	b.w	802e4d0 <__retarget_lock_acquire>
 802df0e:	bf00      	nop
 802df10:	2001a0d8 	.word	0x2001a0d8

0802df14 <__tz_unlock>:
 802df14:	4801      	ldr	r0, [pc, #4]	@ (802df1c <__tz_unlock+0x8>)
 802df16:	f000 badd 	b.w	802e4d4 <__retarget_lock_release>
 802df1a:	bf00      	nop
 802df1c:	2001a0d8 	.word	0x2001a0d8

0802df20 <_tzset_unlocked>:
 802df20:	4b01      	ldr	r3, [pc, #4]	@ (802df28 <_tzset_unlocked+0x8>)
 802df22:	6818      	ldr	r0, [r3, #0]
 802df24:	f000 b802 	b.w	802df2c <_tzset_unlocked_r>
 802df28:	200002d8 	.word	0x200002d8

0802df2c <_tzset_unlocked_r>:
 802df2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802df30:	b08d      	sub	sp, #52	@ 0x34
 802df32:	4607      	mov	r7, r0
 802df34:	f007 fbe6 	bl	8035704 <__gettzinfo>
 802df38:	49bc      	ldr	r1, [pc, #752]	@ (802e22c <_tzset_unlocked_r+0x300>)
 802df3a:	4dbd      	ldr	r5, [pc, #756]	@ (802e230 <_tzset_unlocked_r+0x304>)
 802df3c:	4604      	mov	r4, r0
 802df3e:	4638      	mov	r0, r7
 802df40:	f001 fac8 	bl	802f4d4 <_getenv_r>
 802df44:	4606      	mov	r6, r0
 802df46:	bb10      	cbnz	r0, 802df8e <_tzset_unlocked_r+0x62>
 802df48:	4bba      	ldr	r3, [pc, #744]	@ (802e234 <_tzset_unlocked_r+0x308>)
 802df4a:	4abb      	ldr	r2, [pc, #748]	@ (802e238 <_tzset_unlocked_r+0x30c>)
 802df4c:	6018      	str	r0, [r3, #0]
 802df4e:	4bbb      	ldr	r3, [pc, #748]	@ (802e23c <_tzset_unlocked_r+0x310>)
 802df50:	62a0      	str	r0, [r4, #40]	@ 0x28
 802df52:	6018      	str	r0, [r3, #0]
 802df54:	4bba      	ldr	r3, [pc, #744]	@ (802e240 <_tzset_unlocked_r+0x314>)
 802df56:	6520      	str	r0, [r4, #80]	@ 0x50
 802df58:	e9c3 2200 	strd	r2, r2, [r3]
 802df5c:	214a      	movs	r1, #74	@ 0x4a
 802df5e:	2200      	movs	r2, #0
 802df60:	2300      	movs	r3, #0
 802df62:	e9c4 0003 	strd	r0, r0, [r4, #12]
 802df66:	e9c4 0005 	strd	r0, r0, [r4, #20]
 802df6a:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 802df6e:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 802df72:	e9c4 2308 	strd	r2, r3, [r4, #32]
 802df76:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 802df7a:	6828      	ldr	r0, [r5, #0]
 802df7c:	7221      	strb	r1, [r4, #8]
 802df7e:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 802df82:	f001 fabb 	bl	802f4fc <free>
 802df86:	602e      	str	r6, [r5, #0]
 802df88:	b00d      	add	sp, #52	@ 0x34
 802df8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802df8e:	6829      	ldr	r1, [r5, #0]
 802df90:	2900      	cmp	r1, #0
 802df92:	f040 808e 	bne.w	802e0b2 <_tzset_unlocked_r+0x186>
 802df96:	6828      	ldr	r0, [r5, #0]
 802df98:	f001 fab0 	bl	802f4fc <free>
 802df9c:	4630      	mov	r0, r6
 802df9e:	f7e2 f97f 	bl	80102a0 <strlen>
 802dfa2:	1c41      	adds	r1, r0, #1
 802dfa4:	4638      	mov	r0, r7
 802dfa6:	f001 fab1 	bl	802f50c <_malloc_r>
 802dfaa:	6028      	str	r0, [r5, #0]
 802dfac:	2800      	cmp	r0, #0
 802dfae:	f040 8086 	bne.w	802e0be <_tzset_unlocked_r+0x192>
 802dfb2:	4aa2      	ldr	r2, [pc, #648]	@ (802e23c <_tzset_unlocked_r+0x310>)
 802dfb4:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 802e240 <_tzset_unlocked_r+0x314>
 802dfb8:	f8df a278 	ldr.w	sl, [pc, #632]	@ 802e234 <_tzset_unlocked_r+0x308>
 802dfbc:	2300      	movs	r3, #0
 802dfbe:	6013      	str	r3, [r2, #0]
 802dfc0:	4aa0      	ldr	r2, [pc, #640]	@ (802e244 <_tzset_unlocked_r+0x318>)
 802dfc2:	f8ca 3000 	str.w	r3, [sl]
 802dfc6:	2000      	movs	r0, #0
 802dfc8:	2100      	movs	r1, #0
 802dfca:	e9c8 2200 	strd	r2, r2, [r8]
 802dfce:	e9c4 3303 	strd	r3, r3, [r4, #12]
 802dfd2:	e9c4 3305 	strd	r3, r3, [r4, #20]
 802dfd6:	e9c4 0108 	strd	r0, r1, [r4, #32]
 802dfda:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 802dfde:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 802dfe2:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 802dfe6:	224a      	movs	r2, #74	@ 0x4a
 802dfe8:	7222      	strb	r2, [r4, #8]
 802dfea:	62a3      	str	r3, [r4, #40]	@ 0x28
 802dfec:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 802dff0:	6523      	str	r3, [r4, #80]	@ 0x50
 802dff2:	7833      	ldrb	r3, [r6, #0]
 802dff4:	2b3a      	cmp	r3, #58	@ 0x3a
 802dff6:	bf08      	it	eq
 802dff8:	3601      	addeq	r6, #1
 802dffa:	7833      	ldrb	r3, [r6, #0]
 802dffc:	2b3c      	cmp	r3, #60	@ 0x3c
 802dffe:	d162      	bne.n	802e0c6 <_tzset_unlocked_r+0x19a>
 802e000:	1c75      	adds	r5, r6, #1
 802e002:	4a91      	ldr	r2, [pc, #580]	@ (802e248 <_tzset_unlocked_r+0x31c>)
 802e004:	4991      	ldr	r1, [pc, #580]	@ (802e24c <_tzset_unlocked_r+0x320>)
 802e006:	ab0a      	add	r3, sp, #40	@ 0x28
 802e008:	4628      	mov	r0, r5
 802e00a:	f001 fccb 	bl	802f9a4 <siscanf>
 802e00e:	2800      	cmp	r0, #0
 802e010:	ddba      	ble.n	802df88 <_tzset_unlocked_r+0x5c>
 802e012:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e014:	1eda      	subs	r2, r3, #3
 802e016:	2a07      	cmp	r2, #7
 802e018:	d8b6      	bhi.n	802df88 <_tzset_unlocked_r+0x5c>
 802e01a:	5ceb      	ldrb	r3, [r5, r3]
 802e01c:	2b3e      	cmp	r3, #62	@ 0x3e
 802e01e:	d1b3      	bne.n	802df88 <_tzset_unlocked_r+0x5c>
 802e020:	3602      	adds	r6, #2
 802e022:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e024:	18f5      	adds	r5, r6, r3
 802e026:	5cf3      	ldrb	r3, [r6, r3]
 802e028:	2b2d      	cmp	r3, #45	@ 0x2d
 802e02a:	d15a      	bne.n	802e0e2 <_tzset_unlocked_r+0x1b6>
 802e02c:	3501      	adds	r5, #1
 802e02e:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 802e032:	2300      	movs	r3, #0
 802e034:	f8ad 301e 	strh.w	r3, [sp, #30]
 802e038:	f8ad 3020 	strh.w	r3, [sp, #32]
 802e03c:	af08      	add	r7, sp, #32
 802e03e:	ab0a      	add	r3, sp, #40	@ 0x28
 802e040:	e9cd 3701 	strd	r3, r7, [sp, #4]
 802e044:	9303      	str	r3, [sp, #12]
 802e046:	f10d 031e 	add.w	r3, sp, #30
 802e04a:	9300      	str	r3, [sp, #0]
 802e04c:	4980      	ldr	r1, [pc, #512]	@ (802e250 <_tzset_unlocked_r+0x324>)
 802e04e:	ab0a      	add	r3, sp, #40	@ 0x28
 802e050:	aa07      	add	r2, sp, #28
 802e052:	4628      	mov	r0, r5
 802e054:	f001 fca6 	bl	802f9a4 <siscanf>
 802e058:	2800      	cmp	r0, #0
 802e05a:	dd95      	ble.n	802df88 <_tzset_unlocked_r+0x5c>
 802e05c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 802e060:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 802e064:	223c      	movs	r2, #60	@ 0x3c
 802e066:	fb02 6603 	mla	r6, r2, r3, r6
 802e06a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 802e06e:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 802e072:	fb02 6603 	mla	r6, r2, r3, r6
 802e076:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e078:	fb09 f606 	mul.w	r6, r9, r6
 802e07c:	eb05 0903 	add.w	r9, r5, r3
 802e080:	5ceb      	ldrb	r3, [r5, r3]
 802e082:	2b3c      	cmp	r3, #60	@ 0x3c
 802e084:	f040 80ee 	bne.w	802e264 <_tzset_unlocked_r+0x338>
 802e088:	f109 0501 	add.w	r5, r9, #1
 802e08c:	4a71      	ldr	r2, [pc, #452]	@ (802e254 <_tzset_unlocked_r+0x328>)
 802e08e:	496f      	ldr	r1, [pc, #444]	@ (802e24c <_tzset_unlocked_r+0x320>)
 802e090:	ab0a      	add	r3, sp, #40	@ 0x28
 802e092:	4628      	mov	r0, r5
 802e094:	f001 fc86 	bl	802f9a4 <siscanf>
 802e098:	2800      	cmp	r0, #0
 802e09a:	dc28      	bgt.n	802e0ee <_tzset_unlocked_r+0x1c2>
 802e09c:	f899 3001 	ldrb.w	r3, [r9, #1]
 802e0a0:	2b3e      	cmp	r3, #62	@ 0x3e
 802e0a2:	d124      	bne.n	802e0ee <_tzset_unlocked_r+0x1c2>
 802e0a4:	4b68      	ldr	r3, [pc, #416]	@ (802e248 <_tzset_unlocked_r+0x31c>)
 802e0a6:	62a6      	str	r6, [r4, #40]	@ 0x28
 802e0a8:	e9c8 3300 	strd	r3, r3, [r8]
 802e0ac:	f8ca 6000 	str.w	r6, [sl]
 802e0b0:	e76a      	b.n	802df88 <_tzset_unlocked_r+0x5c>
 802e0b2:	f7e2 f895 	bl	80101e0 <strcmp>
 802e0b6:	2800      	cmp	r0, #0
 802e0b8:	f47f af6d 	bne.w	802df96 <_tzset_unlocked_r+0x6a>
 802e0bc:	e764      	b.n	802df88 <_tzset_unlocked_r+0x5c>
 802e0be:	4631      	mov	r1, r6
 802e0c0:	f000 f9d8 	bl	802e474 <strcpy>
 802e0c4:	e775      	b.n	802dfb2 <_tzset_unlocked_r+0x86>
 802e0c6:	4a60      	ldr	r2, [pc, #384]	@ (802e248 <_tzset_unlocked_r+0x31c>)
 802e0c8:	4963      	ldr	r1, [pc, #396]	@ (802e258 <_tzset_unlocked_r+0x32c>)
 802e0ca:	ab0a      	add	r3, sp, #40	@ 0x28
 802e0cc:	4630      	mov	r0, r6
 802e0ce:	f001 fc69 	bl	802f9a4 <siscanf>
 802e0d2:	2800      	cmp	r0, #0
 802e0d4:	f77f af58 	ble.w	802df88 <_tzset_unlocked_r+0x5c>
 802e0d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e0da:	3b03      	subs	r3, #3
 802e0dc:	2b07      	cmp	r3, #7
 802e0de:	d9a0      	bls.n	802e022 <_tzset_unlocked_r+0xf6>
 802e0e0:	e752      	b.n	802df88 <_tzset_unlocked_r+0x5c>
 802e0e2:	2b2b      	cmp	r3, #43	@ 0x2b
 802e0e4:	bf08      	it	eq
 802e0e6:	3501      	addeq	r5, #1
 802e0e8:	f04f 0901 	mov.w	r9, #1
 802e0ec:	e7a1      	b.n	802e032 <_tzset_unlocked_r+0x106>
 802e0ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e0f0:	1eda      	subs	r2, r3, #3
 802e0f2:	2a07      	cmp	r2, #7
 802e0f4:	f63f af48 	bhi.w	802df88 <_tzset_unlocked_r+0x5c>
 802e0f8:	5ceb      	ldrb	r3, [r5, r3]
 802e0fa:	2b3e      	cmp	r3, #62	@ 0x3e
 802e0fc:	f47f af44 	bne.w	802df88 <_tzset_unlocked_r+0x5c>
 802e100:	f109 0902 	add.w	r9, r9, #2
 802e104:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e106:	eb09 0503 	add.w	r5, r9, r3
 802e10a:	f819 3003 	ldrb.w	r3, [r9, r3]
 802e10e:	2b2d      	cmp	r3, #45	@ 0x2d
 802e110:	f040 80b7 	bne.w	802e282 <_tzset_unlocked_r+0x356>
 802e114:	3501      	adds	r5, #1
 802e116:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 802e11a:	2300      	movs	r3, #0
 802e11c:	f8ad 301c 	strh.w	r3, [sp, #28]
 802e120:	f8ad 301e 	strh.w	r3, [sp, #30]
 802e124:	f8ad 3020 	strh.w	r3, [sp, #32]
 802e128:	930a      	str	r3, [sp, #40]	@ 0x28
 802e12a:	ab0a      	add	r3, sp, #40	@ 0x28
 802e12c:	e9cd 7302 	strd	r7, r3, [sp, #8]
 802e130:	9301      	str	r3, [sp, #4]
 802e132:	f10d 031e 	add.w	r3, sp, #30
 802e136:	9300      	str	r3, [sp, #0]
 802e138:	4945      	ldr	r1, [pc, #276]	@ (802e250 <_tzset_unlocked_r+0x324>)
 802e13a:	ab0a      	add	r3, sp, #40	@ 0x28
 802e13c:	aa07      	add	r2, sp, #28
 802e13e:	4628      	mov	r0, r5
 802e140:	f001 fc30 	bl	802f9a4 <siscanf>
 802e144:	2800      	cmp	r0, #0
 802e146:	f300 80a2 	bgt.w	802e28e <_tzset_unlocked_r+0x362>
 802e14a:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 802e14e:	9304      	str	r3, [sp, #16]
 802e150:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e152:	4627      	mov	r7, r4
 802e154:	441d      	add	r5, r3
 802e156:	f04f 0b00 	mov.w	fp, #0
 802e15a:	782b      	ldrb	r3, [r5, #0]
 802e15c:	2b2c      	cmp	r3, #44	@ 0x2c
 802e15e:	bf08      	it	eq
 802e160:	3501      	addeq	r5, #1
 802e162:	f895 9000 	ldrb.w	r9, [r5]
 802e166:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 802e16a:	f040 80a3 	bne.w	802e2b4 <_tzset_unlocked_r+0x388>
 802e16e:	ab0a      	add	r3, sp, #40	@ 0x28
 802e170:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 802e174:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802e178:	aa09      	add	r2, sp, #36	@ 0x24
 802e17a:	9200      	str	r2, [sp, #0]
 802e17c:	4937      	ldr	r1, [pc, #220]	@ (802e25c <_tzset_unlocked_r+0x330>)
 802e17e:	9303      	str	r3, [sp, #12]
 802e180:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 802e184:	4628      	mov	r0, r5
 802e186:	f001 fc0d 	bl	802f9a4 <siscanf>
 802e18a:	2803      	cmp	r0, #3
 802e18c:	f47f aefc 	bne.w	802df88 <_tzset_unlocked_r+0x5c>
 802e190:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 802e194:	1e4b      	subs	r3, r1, #1
 802e196:	2b0b      	cmp	r3, #11
 802e198:	f63f aef6 	bhi.w	802df88 <_tzset_unlocked_r+0x5c>
 802e19c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 802e1a0:	1e53      	subs	r3, r2, #1
 802e1a2:	2b04      	cmp	r3, #4
 802e1a4:	f63f aef0 	bhi.w	802df88 <_tzset_unlocked_r+0x5c>
 802e1a8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 802e1ac:	2b06      	cmp	r3, #6
 802e1ae:	f63f aeeb 	bhi.w	802df88 <_tzset_unlocked_r+0x5c>
 802e1b2:	e9c7 1203 	strd	r1, r2, [r7, #12]
 802e1b6:	f887 9008 	strb.w	r9, [r7, #8]
 802e1ba:	617b      	str	r3, [r7, #20]
 802e1bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e1be:	eb05 0903 	add.w	r9, r5, r3
 802e1c2:	2500      	movs	r5, #0
 802e1c4:	f04f 0302 	mov.w	r3, #2
 802e1c8:	f8ad 301c 	strh.w	r3, [sp, #28]
 802e1cc:	f8ad 501e 	strh.w	r5, [sp, #30]
 802e1d0:	f8ad 5020 	strh.w	r5, [sp, #32]
 802e1d4:	950a      	str	r5, [sp, #40]	@ 0x28
 802e1d6:	f899 3000 	ldrb.w	r3, [r9]
 802e1da:	2b2f      	cmp	r3, #47	@ 0x2f
 802e1dc:	f040 8096 	bne.w	802e30c <_tzset_unlocked_r+0x3e0>
 802e1e0:	ab0a      	add	r3, sp, #40	@ 0x28
 802e1e2:	aa08      	add	r2, sp, #32
 802e1e4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802e1e8:	f10d 021e 	add.w	r2, sp, #30
 802e1ec:	9200      	str	r2, [sp, #0]
 802e1ee:	491c      	ldr	r1, [pc, #112]	@ (802e260 <_tzset_unlocked_r+0x334>)
 802e1f0:	9303      	str	r3, [sp, #12]
 802e1f2:	aa07      	add	r2, sp, #28
 802e1f4:	4648      	mov	r0, r9
 802e1f6:	f001 fbd5 	bl	802f9a4 <siscanf>
 802e1fa:	42a8      	cmp	r0, r5
 802e1fc:	f300 8086 	bgt.w	802e30c <_tzset_unlocked_r+0x3e0>
 802e200:	214a      	movs	r1, #74	@ 0x4a
 802e202:	2200      	movs	r2, #0
 802e204:	2300      	movs	r3, #0
 802e206:	e9c4 5503 	strd	r5, r5, [r4, #12]
 802e20a:	e9c4 5505 	strd	r5, r5, [r4, #20]
 802e20e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 802e212:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 802e216:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 802e21a:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 802e21e:	7221      	strb	r1, [r4, #8]
 802e220:	62a5      	str	r5, [r4, #40]	@ 0x28
 802e222:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 802e226:	6525      	str	r5, [r4, #80]	@ 0x50
 802e228:	e6ae      	b.n	802df88 <_tzset_unlocked_r+0x5c>
 802e22a:	bf00      	nop
 802e22c:	0803c578 	.word	0x0803c578
 802e230:	2001a0b0 	.word	0x2001a0b0
 802e234:	2001a0cc 	.word	0x2001a0cc
 802e238:	0803c57b 	.word	0x0803c57b
 802e23c:	2001a0d0 	.word	0x2001a0d0
 802e240:	20000164 	.word	0x20000164
 802e244:	0803c43a 	.word	0x0803c43a
 802e248:	2001a0c0 	.word	0x2001a0c0
 802e24c:	0803c57f 	.word	0x0803c57f
 802e250:	0803c5b4 	.word	0x0803c5b4
 802e254:	2001a0b4 	.word	0x2001a0b4
 802e258:	0803c592 	.word	0x0803c592
 802e25c:	0803c5a0 	.word	0x0803c5a0
 802e260:	0803c5b3 	.word	0x0803c5b3
 802e264:	4a3e      	ldr	r2, [pc, #248]	@ (802e360 <_tzset_unlocked_r+0x434>)
 802e266:	493f      	ldr	r1, [pc, #252]	@ (802e364 <_tzset_unlocked_r+0x438>)
 802e268:	ab0a      	add	r3, sp, #40	@ 0x28
 802e26a:	4648      	mov	r0, r9
 802e26c:	f001 fb9a 	bl	802f9a4 <siscanf>
 802e270:	2800      	cmp	r0, #0
 802e272:	f77f af17 	ble.w	802e0a4 <_tzset_unlocked_r+0x178>
 802e276:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e278:	3b03      	subs	r3, #3
 802e27a:	2b07      	cmp	r3, #7
 802e27c:	f67f af42 	bls.w	802e104 <_tzset_unlocked_r+0x1d8>
 802e280:	e682      	b.n	802df88 <_tzset_unlocked_r+0x5c>
 802e282:	2b2b      	cmp	r3, #43	@ 0x2b
 802e284:	bf08      	it	eq
 802e286:	3501      	addeq	r5, #1
 802e288:	f04f 0901 	mov.w	r9, #1
 802e28c:	e745      	b.n	802e11a <_tzset_unlocked_r+0x1ee>
 802e28e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802e292:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802e296:	213c      	movs	r1, #60	@ 0x3c
 802e298:	fb01 3302 	mla	r3, r1, r2, r3
 802e29c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802e2a0:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 802e2a4:	fb01 3302 	mla	r3, r1, r2, r3
 802e2a8:	fb09 f303 	mul.w	r3, r9, r3
 802e2ac:	e74f      	b.n	802e14e <_tzset_unlocked_r+0x222>
 802e2ae:	f04f 0b01 	mov.w	fp, #1
 802e2b2:	e752      	b.n	802e15a <_tzset_unlocked_r+0x22e>
 802e2b4:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 802e2b8:	bf06      	itte	eq
 802e2ba:	3501      	addeq	r5, #1
 802e2bc:	464b      	moveq	r3, r9
 802e2be:	2344      	movne	r3, #68	@ 0x44
 802e2c0:	220a      	movs	r2, #10
 802e2c2:	a90b      	add	r1, sp, #44	@ 0x2c
 802e2c4:	4628      	mov	r0, r5
 802e2c6:	9305      	str	r3, [sp, #20]
 802e2c8:	f007 f950 	bl	803556c <strtoul>
 802e2cc:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 802e2d0:	9b05      	ldr	r3, [sp, #20]
 802e2d2:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 802e2d6:	45a9      	cmp	r9, r5
 802e2d8:	d114      	bne.n	802e304 <_tzset_unlocked_r+0x3d8>
 802e2da:	234d      	movs	r3, #77	@ 0x4d
 802e2dc:	f1bb 0f00 	cmp.w	fp, #0
 802e2e0:	d107      	bne.n	802e2f2 <_tzset_unlocked_r+0x3c6>
 802e2e2:	7223      	strb	r3, [r4, #8]
 802e2e4:	2103      	movs	r1, #3
 802e2e6:	2302      	movs	r3, #2
 802e2e8:	e9c4 1303 	strd	r1, r3, [r4, #12]
 802e2ec:	f8c4 b014 	str.w	fp, [r4, #20]
 802e2f0:	e767      	b.n	802e1c2 <_tzset_unlocked_r+0x296>
 802e2f2:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 802e2f6:	220b      	movs	r2, #11
 802e2f8:	2301      	movs	r3, #1
 802e2fa:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 802e2fe:	2300      	movs	r3, #0
 802e300:	63e3      	str	r3, [r4, #60]	@ 0x3c
 802e302:	e75e      	b.n	802e1c2 <_tzset_unlocked_r+0x296>
 802e304:	b280      	uxth	r0, r0
 802e306:	723b      	strb	r3, [r7, #8]
 802e308:	6178      	str	r0, [r7, #20]
 802e30a:	e75a      	b.n	802e1c2 <_tzset_unlocked_r+0x296>
 802e30c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802e310:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802e314:	213c      	movs	r1, #60	@ 0x3c
 802e316:	fb01 3302 	mla	r3, r1, r2, r3
 802e31a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802e31e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 802e322:	fb01 3302 	mla	r3, r1, r2, r3
 802e326:	61bb      	str	r3, [r7, #24]
 802e328:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802e32a:	3728      	adds	r7, #40	@ 0x28
 802e32c:	444d      	add	r5, r9
 802e32e:	f1bb 0f00 	cmp.w	fp, #0
 802e332:	d0bc      	beq.n	802e2ae <_tzset_unlocked_r+0x382>
 802e334:	9b04      	ldr	r3, [sp, #16]
 802e336:	6523      	str	r3, [r4, #80]	@ 0x50
 802e338:	4b0b      	ldr	r3, [pc, #44]	@ (802e368 <_tzset_unlocked_r+0x43c>)
 802e33a:	f8c8 3000 	str.w	r3, [r8]
 802e33e:	6860      	ldr	r0, [r4, #4]
 802e340:	4b07      	ldr	r3, [pc, #28]	@ (802e360 <_tzset_unlocked_r+0x434>)
 802e342:	62a6      	str	r6, [r4, #40]	@ 0x28
 802e344:	f8c8 3004 	str.w	r3, [r8, #4]
 802e348:	f7ff fd34 	bl	802ddb4 <__tzcalc_limits>
 802e34c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 802e34e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802e350:	f8ca 2000 	str.w	r2, [sl]
 802e354:	1a9b      	subs	r3, r3, r2
 802e356:	4a05      	ldr	r2, [pc, #20]	@ (802e36c <_tzset_unlocked_r+0x440>)
 802e358:	bf18      	it	ne
 802e35a:	2301      	movne	r3, #1
 802e35c:	6013      	str	r3, [r2, #0]
 802e35e:	e613      	b.n	802df88 <_tzset_unlocked_r+0x5c>
 802e360:	2001a0b4 	.word	0x2001a0b4
 802e364:	0803c592 	.word	0x0803c592
 802e368:	2001a0c0 	.word	0x2001a0c0
 802e36c:	2001a0d0 	.word	0x2001a0d0

0802e370 <__locale_mb_cur_max>:
 802e370:	4b01      	ldr	r3, [pc, #4]	@ (802e378 <__locale_mb_cur_max+0x8>)
 802e372:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 802e376:	4770      	bx	lr
 802e378:	2000016c 	.word	0x2000016c

0802e37c <_localeconv_r>:
 802e37c:	4800      	ldr	r0, [pc, #0]	@ (802e380 <_localeconv_r+0x4>)
 802e37e:	4770      	bx	lr
 802e380:	2000025c 	.word	0x2000025c

0802e384 <_close_r>:
 802e384:	b538      	push	{r3, r4, r5, lr}
 802e386:	4d06      	ldr	r5, [pc, #24]	@ (802e3a0 <_close_r+0x1c>)
 802e388:	2300      	movs	r3, #0
 802e38a:	4604      	mov	r4, r0
 802e38c:	4608      	mov	r0, r1
 802e38e:	602b      	str	r3, [r5, #0]
 802e390:	f7e4 f984 	bl	801269c <_close>
 802e394:	1c43      	adds	r3, r0, #1
 802e396:	d102      	bne.n	802e39e <_close_r+0x1a>
 802e398:	682b      	ldr	r3, [r5, #0]
 802e39a:	b103      	cbz	r3, 802e39e <_close_r+0x1a>
 802e39c:	6023      	str	r3, [r4, #0]
 802e39e:	bd38      	pop	{r3, r4, r5, pc}
 802e3a0:	2001a0d4 	.word	0x2001a0d4

0802e3a4 <_reclaim_reent>:
 802e3a4:	4b14      	ldr	r3, [pc, #80]	@ (802e3f8 <_reclaim_reent+0x54>)
 802e3a6:	681b      	ldr	r3, [r3, #0]
 802e3a8:	4283      	cmp	r3, r0
 802e3aa:	b570      	push	{r4, r5, r6, lr}
 802e3ac:	4604      	mov	r4, r0
 802e3ae:	d022      	beq.n	802e3f6 <_reclaim_reent+0x52>
 802e3b0:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 802e3b2:	b153      	cbz	r3, 802e3ca <_reclaim_reent+0x26>
 802e3b4:	2500      	movs	r5, #0
 802e3b6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 802e3b8:	5959      	ldr	r1, [r3, r5]
 802e3ba:	b9b1      	cbnz	r1, 802e3ea <_reclaim_reent+0x46>
 802e3bc:	3504      	adds	r5, #4
 802e3be:	2d80      	cmp	r5, #128	@ 0x80
 802e3c0:	d1f9      	bne.n	802e3b6 <_reclaim_reent+0x12>
 802e3c2:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 802e3c4:	4620      	mov	r0, r4
 802e3c6:	f000 ff89 	bl	802f2dc <_free_r>
 802e3ca:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 802e3cc:	b111      	cbz	r1, 802e3d4 <_reclaim_reent+0x30>
 802e3ce:	4620      	mov	r0, r4
 802e3d0:	f000 ff84 	bl	802f2dc <_free_r>
 802e3d4:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 802e3d6:	b111      	cbz	r1, 802e3de <_reclaim_reent+0x3a>
 802e3d8:	4620      	mov	r0, r4
 802e3da:	f000 ff7f 	bl	802f2dc <_free_r>
 802e3de:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802e3e0:	b14b      	cbz	r3, 802e3f6 <_reclaim_reent+0x52>
 802e3e2:	4620      	mov	r0, r4
 802e3e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802e3e8:	4718      	bx	r3
 802e3ea:	680e      	ldr	r6, [r1, #0]
 802e3ec:	4620      	mov	r0, r4
 802e3ee:	f000 ff75 	bl	802f2dc <_free_r>
 802e3f2:	4631      	mov	r1, r6
 802e3f4:	e7e1      	b.n	802e3ba <_reclaim_reent+0x16>
 802e3f6:	bd70      	pop	{r4, r5, r6, pc}
 802e3f8:	200002d8 	.word	0x200002d8

0802e3fc <_lseek_r>:
 802e3fc:	b538      	push	{r3, r4, r5, lr}
 802e3fe:	4d07      	ldr	r5, [pc, #28]	@ (802e41c <_lseek_r+0x20>)
 802e400:	4604      	mov	r4, r0
 802e402:	4608      	mov	r0, r1
 802e404:	4611      	mov	r1, r2
 802e406:	2200      	movs	r2, #0
 802e408:	602a      	str	r2, [r5, #0]
 802e40a:	461a      	mov	r2, r3
 802e40c:	f7e4 f950 	bl	80126b0 <_lseek>
 802e410:	1c43      	adds	r3, r0, #1
 802e412:	d102      	bne.n	802e41a <_lseek_r+0x1e>
 802e414:	682b      	ldr	r3, [r5, #0]
 802e416:	b103      	cbz	r3, 802e41a <_lseek_r+0x1e>
 802e418:	6023      	str	r3, [r4, #0]
 802e41a:	bd38      	pop	{r3, r4, r5, pc}
 802e41c:	2001a0d4 	.word	0x2001a0d4

0802e420 <_read_r>:
 802e420:	b538      	push	{r3, r4, r5, lr}
 802e422:	4d07      	ldr	r5, [pc, #28]	@ (802e440 <_read_r+0x20>)
 802e424:	4604      	mov	r4, r0
 802e426:	4608      	mov	r0, r1
 802e428:	4611      	mov	r1, r2
 802e42a:	2200      	movs	r2, #0
 802e42c:	602a      	str	r2, [r5, #0]
 802e42e:	461a      	mov	r2, r3
 802e430:	f7e4 f916 	bl	8012660 <_read>
 802e434:	1c43      	adds	r3, r0, #1
 802e436:	d102      	bne.n	802e43e <_read_r+0x1e>
 802e438:	682b      	ldr	r3, [r5, #0]
 802e43a:	b103      	cbz	r3, 802e43e <_read_r+0x1e>
 802e43c:	6023      	str	r3, [r4, #0]
 802e43e:	bd38      	pop	{r3, r4, r5, pc}
 802e440:	2001a0d4 	.word	0x2001a0d4

0802e444 <_write_r>:
 802e444:	b538      	push	{r3, r4, r5, lr}
 802e446:	4d07      	ldr	r5, [pc, #28]	@ (802e464 <_write_r+0x20>)
 802e448:	4604      	mov	r4, r0
 802e44a:	4608      	mov	r0, r1
 802e44c:	4611      	mov	r1, r2
 802e44e:	2200      	movs	r2, #0
 802e450:	602a      	str	r2, [r5, #0]
 802e452:	461a      	mov	r2, r3
 802e454:	f7e4 f914 	bl	8012680 <_write>
 802e458:	1c43      	adds	r3, r0, #1
 802e45a:	d102      	bne.n	802e462 <_write_r+0x1e>
 802e45c:	682b      	ldr	r3, [r5, #0]
 802e45e:	b103      	cbz	r3, 802e462 <_write_r+0x1e>
 802e460:	6023      	str	r3, [r4, #0]
 802e462:	bd38      	pop	{r3, r4, r5, pc}
 802e464:	2001a0d4 	.word	0x2001a0d4

0802e468 <__errno>:
 802e468:	4b01      	ldr	r3, [pc, #4]	@ (802e470 <__errno+0x8>)
 802e46a:	6818      	ldr	r0, [r3, #0]
 802e46c:	4770      	bx	lr
 802e46e:	bf00      	nop
 802e470:	200002d8 	.word	0x200002d8

0802e474 <strcpy>:
 802e474:	4603      	mov	r3, r0
 802e476:	f811 2b01 	ldrb.w	r2, [r1], #1
 802e47a:	f803 2b01 	strb.w	r2, [r3], #1
 802e47e:	2a00      	cmp	r2, #0
 802e480:	d1f9      	bne.n	802e476 <strcpy+0x2>
 802e482:	4770      	bx	lr

0802e484 <__libc_init_array>:
 802e484:	b570      	push	{r4, r5, r6, lr}
 802e486:	4d0d      	ldr	r5, [pc, #52]	@ (802e4bc <__libc_init_array+0x38>)
 802e488:	4c0d      	ldr	r4, [pc, #52]	@ (802e4c0 <__libc_init_array+0x3c>)
 802e48a:	1b64      	subs	r4, r4, r5
 802e48c:	10a4      	asrs	r4, r4, #2
 802e48e:	2600      	movs	r6, #0
 802e490:	42a6      	cmp	r6, r4
 802e492:	d109      	bne.n	802e4a8 <__libc_init_array+0x24>
 802e494:	4d0b      	ldr	r5, [pc, #44]	@ (802e4c4 <__libc_init_array+0x40>)
 802e496:	4c0c      	ldr	r4, [pc, #48]	@ (802e4c8 <__libc_init_array+0x44>)
 802e498:	f007 ff60 	bl	803635c <_init>
 802e49c:	1b64      	subs	r4, r4, r5
 802e49e:	10a4      	asrs	r4, r4, #2
 802e4a0:	2600      	movs	r6, #0
 802e4a2:	42a6      	cmp	r6, r4
 802e4a4:	d105      	bne.n	802e4b2 <__libc_init_array+0x2e>
 802e4a6:	bd70      	pop	{r4, r5, r6, pc}
 802e4a8:	f855 3b04 	ldr.w	r3, [r5], #4
 802e4ac:	4798      	blx	r3
 802e4ae:	3601      	adds	r6, #1
 802e4b0:	e7ee      	b.n	802e490 <__libc_init_array+0xc>
 802e4b2:	f855 3b04 	ldr.w	r3, [r5], #4
 802e4b6:	4798      	blx	r3
 802e4b8:	3601      	adds	r6, #1
 802e4ba:	e7f2      	b.n	802e4a2 <__libc_init_array+0x1e>
 802e4bc:	0803cc08 	.word	0x0803cc08
 802e4c0:	0803cc08 	.word	0x0803cc08
 802e4c4:	0803cc08 	.word	0x0803cc08
 802e4c8:	0803cc10 	.word	0x0803cc10

0802e4cc <__retarget_lock_init_recursive>:
 802e4cc:	4770      	bx	lr

0802e4ce <__retarget_lock_close_recursive>:
 802e4ce:	4770      	bx	lr

0802e4d0 <__retarget_lock_acquire>:
 802e4d0:	4770      	bx	lr

0802e4d2 <__retarget_lock_acquire_recursive>:
 802e4d2:	4770      	bx	lr

0802e4d4 <__retarget_lock_release>:
 802e4d4:	4770      	bx	lr

0802e4d6 <__retarget_lock_release_recursive>:
 802e4d6:	4770      	bx	lr

0802e4d8 <memcpy>:
 802e4d8:	440a      	add	r2, r1
 802e4da:	4291      	cmp	r1, r2
 802e4dc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 802e4e0:	d100      	bne.n	802e4e4 <memcpy+0xc>
 802e4e2:	4770      	bx	lr
 802e4e4:	b510      	push	{r4, lr}
 802e4e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 802e4ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 802e4ee:	4291      	cmp	r1, r2
 802e4f0:	d1f9      	bne.n	802e4e6 <memcpy+0xe>
 802e4f2:	bd10      	pop	{r4, pc}

0802e4f4 <_wcrtomb_r>:
 802e4f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 802e4f6:	4c09      	ldr	r4, [pc, #36]	@ (802e51c <_wcrtomb_r+0x28>)
 802e4f8:	b085      	sub	sp, #20
 802e4fa:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 802e4fe:	4605      	mov	r5, r0
 802e500:	461e      	mov	r6, r3
 802e502:	b909      	cbnz	r1, 802e508 <_wcrtomb_r+0x14>
 802e504:	460a      	mov	r2, r1
 802e506:	a901      	add	r1, sp, #4
 802e508:	47b8      	blx	r7
 802e50a:	1c43      	adds	r3, r0, #1
 802e50c:	bf01      	itttt	eq
 802e50e:	2300      	moveq	r3, #0
 802e510:	6033      	streq	r3, [r6, #0]
 802e512:	238a      	moveq	r3, #138	@ 0x8a
 802e514:	602b      	streq	r3, [r5, #0]
 802e516:	b005      	add	sp, #20
 802e518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802e51a:	bf00      	nop
 802e51c:	2000016c 	.word	0x2000016c

0802e520 <frexp>:
 802e520:	b570      	push	{r4, r5, r6, lr}
 802e522:	2100      	movs	r1, #0
 802e524:	ec55 4b10 	vmov	r4, r5, d0
 802e528:	6001      	str	r1, [r0, #0]
 802e52a:	4915      	ldr	r1, [pc, #84]	@ (802e580 <frexp+0x60>)
 802e52c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 802e530:	428a      	cmp	r2, r1
 802e532:	4606      	mov	r6, r0
 802e534:	462b      	mov	r3, r5
 802e536:	d820      	bhi.n	802e57a <frexp+0x5a>
 802e538:	4621      	mov	r1, r4
 802e53a:	4311      	orrs	r1, r2
 802e53c:	d01d      	beq.n	802e57a <frexp+0x5a>
 802e53e:	4911      	ldr	r1, [pc, #68]	@ (802e584 <frexp+0x64>)
 802e540:	4029      	ands	r1, r5
 802e542:	b961      	cbnz	r1, 802e55e <frexp+0x3e>
 802e544:	4b10      	ldr	r3, [pc, #64]	@ (802e588 <frexp+0x68>)
 802e546:	2200      	movs	r2, #0
 802e548:	4620      	mov	r0, r4
 802e54a:	4629      	mov	r1, r5
 802e54c:	f7e2 f86c 	bl	8010628 <__aeabi_dmul>
 802e550:	460b      	mov	r3, r1
 802e552:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 802e556:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 802e55a:	4604      	mov	r4, r0
 802e55c:	6031      	str	r1, [r6, #0]
 802e55e:	6831      	ldr	r1, [r6, #0]
 802e560:	1512      	asrs	r2, r2, #20
 802e562:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 802e566:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 802e56a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 802e56e:	4411      	add	r1, r2
 802e570:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 802e574:	6031      	str	r1, [r6, #0]
 802e576:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 802e57a:	ec45 4b10 	vmov	d0, r4, r5
 802e57e:	bd70      	pop	{r4, r5, r6, pc}
 802e580:	7fefffff 	.word	0x7fefffff
 802e584:	7ff00000 	.word	0x7ff00000
 802e588:	43500000 	.word	0x43500000

0802e58c <register_fini>:
 802e58c:	4b02      	ldr	r3, [pc, #8]	@ (802e598 <register_fini+0xc>)
 802e58e:	b113      	cbz	r3, 802e596 <register_fini+0xa>
 802e590:	4802      	ldr	r0, [pc, #8]	@ (802e59c <register_fini+0x10>)
 802e592:	f000 b810 	b.w	802e5b6 <atexit>
 802e596:	4770      	bx	lr
 802e598:	00000000 	.word	0x00000000
 802e59c:	08035a1d 	.word	0x08035a1d

0802e5a0 <abort>:
 802e5a0:	b508      	push	{r3, lr}
 802e5a2:	2006      	movs	r0, #6
 802e5a4:	f007 f8a6 	bl	80356f4 <raise>
 802e5a8:	2001      	movs	r0, #1
 802e5aa:	f7e4 f853 	bl	8012654 <_exit>

0802e5ae <abs>:
 802e5ae:	2800      	cmp	r0, #0
 802e5b0:	bfb8      	it	lt
 802e5b2:	4240      	neglt	r0, r0
 802e5b4:	4770      	bx	lr

0802e5b6 <atexit>:
 802e5b6:	2300      	movs	r3, #0
 802e5b8:	4601      	mov	r1, r0
 802e5ba:	461a      	mov	r2, r3
 802e5bc:	4618      	mov	r0, r3
 802e5be:	f007 bb01 	b.w	8035bc4 <__register_exitproc>

0802e5c2 <quorem>:
 802e5c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e5c6:	6903      	ldr	r3, [r0, #16]
 802e5c8:	690c      	ldr	r4, [r1, #16]
 802e5ca:	42a3      	cmp	r3, r4
 802e5cc:	4607      	mov	r7, r0
 802e5ce:	db7e      	blt.n	802e6ce <quorem+0x10c>
 802e5d0:	3c01      	subs	r4, #1
 802e5d2:	f101 0814 	add.w	r8, r1, #20
 802e5d6:	00a3      	lsls	r3, r4, #2
 802e5d8:	f100 0514 	add.w	r5, r0, #20
 802e5dc:	9300      	str	r3, [sp, #0]
 802e5de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802e5e2:	9301      	str	r3, [sp, #4]
 802e5e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802e5e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802e5ec:	3301      	adds	r3, #1
 802e5ee:	429a      	cmp	r2, r3
 802e5f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802e5f4:	fbb2 f6f3 	udiv	r6, r2, r3
 802e5f8:	d32e      	bcc.n	802e658 <quorem+0x96>
 802e5fa:	f04f 0a00 	mov.w	sl, #0
 802e5fe:	46c4      	mov	ip, r8
 802e600:	46ae      	mov	lr, r5
 802e602:	46d3      	mov	fp, sl
 802e604:	f85c 3b04 	ldr.w	r3, [ip], #4
 802e608:	b298      	uxth	r0, r3
 802e60a:	fb06 a000 	mla	r0, r6, r0, sl
 802e60e:	0c02      	lsrs	r2, r0, #16
 802e610:	0c1b      	lsrs	r3, r3, #16
 802e612:	fb06 2303 	mla	r3, r6, r3, r2
 802e616:	f8de 2000 	ldr.w	r2, [lr]
 802e61a:	b280      	uxth	r0, r0
 802e61c:	b292      	uxth	r2, r2
 802e61e:	1a12      	subs	r2, r2, r0
 802e620:	445a      	add	r2, fp
 802e622:	f8de 0000 	ldr.w	r0, [lr]
 802e626:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802e62a:	b29b      	uxth	r3, r3
 802e62c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 802e630:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 802e634:	b292      	uxth	r2, r2
 802e636:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 802e63a:	45e1      	cmp	r9, ip
 802e63c:	f84e 2b04 	str.w	r2, [lr], #4
 802e640:	ea4f 4b23 	mov.w	fp, r3, asr #16
 802e644:	d2de      	bcs.n	802e604 <quorem+0x42>
 802e646:	9b00      	ldr	r3, [sp, #0]
 802e648:	58eb      	ldr	r3, [r5, r3]
 802e64a:	b92b      	cbnz	r3, 802e658 <quorem+0x96>
 802e64c:	9b01      	ldr	r3, [sp, #4]
 802e64e:	3b04      	subs	r3, #4
 802e650:	429d      	cmp	r5, r3
 802e652:	461a      	mov	r2, r3
 802e654:	d32f      	bcc.n	802e6b6 <quorem+0xf4>
 802e656:	613c      	str	r4, [r7, #16]
 802e658:	4638      	mov	r0, r7
 802e65a:	f005 fce3 	bl	8034024 <__mcmp>
 802e65e:	2800      	cmp	r0, #0
 802e660:	db25      	blt.n	802e6ae <quorem+0xec>
 802e662:	4629      	mov	r1, r5
 802e664:	2000      	movs	r0, #0
 802e666:	f858 2b04 	ldr.w	r2, [r8], #4
 802e66a:	f8d1 c000 	ldr.w	ip, [r1]
 802e66e:	fa1f fe82 	uxth.w	lr, r2
 802e672:	fa1f f38c 	uxth.w	r3, ip
 802e676:	eba3 030e 	sub.w	r3, r3, lr
 802e67a:	4403      	add	r3, r0
 802e67c:	0c12      	lsrs	r2, r2, #16
 802e67e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 802e682:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 802e686:	b29b      	uxth	r3, r3
 802e688:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802e68c:	45c1      	cmp	r9, r8
 802e68e:	f841 3b04 	str.w	r3, [r1], #4
 802e692:	ea4f 4022 	mov.w	r0, r2, asr #16
 802e696:	d2e6      	bcs.n	802e666 <quorem+0xa4>
 802e698:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802e69c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802e6a0:	b922      	cbnz	r2, 802e6ac <quorem+0xea>
 802e6a2:	3b04      	subs	r3, #4
 802e6a4:	429d      	cmp	r5, r3
 802e6a6:	461a      	mov	r2, r3
 802e6a8:	d30b      	bcc.n	802e6c2 <quorem+0x100>
 802e6aa:	613c      	str	r4, [r7, #16]
 802e6ac:	3601      	adds	r6, #1
 802e6ae:	4630      	mov	r0, r6
 802e6b0:	b003      	add	sp, #12
 802e6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e6b6:	6812      	ldr	r2, [r2, #0]
 802e6b8:	3b04      	subs	r3, #4
 802e6ba:	2a00      	cmp	r2, #0
 802e6bc:	d1cb      	bne.n	802e656 <quorem+0x94>
 802e6be:	3c01      	subs	r4, #1
 802e6c0:	e7c6      	b.n	802e650 <quorem+0x8e>
 802e6c2:	6812      	ldr	r2, [r2, #0]
 802e6c4:	3b04      	subs	r3, #4
 802e6c6:	2a00      	cmp	r2, #0
 802e6c8:	d1ef      	bne.n	802e6aa <quorem+0xe8>
 802e6ca:	3c01      	subs	r4, #1
 802e6cc:	e7ea      	b.n	802e6a4 <quorem+0xe2>
 802e6ce:	2000      	movs	r0, #0
 802e6d0:	e7ee      	b.n	802e6b0 <quorem+0xee>
 802e6d2:	0000      	movs	r0, r0
 802e6d4:	0000      	movs	r0, r0
	...

0802e6d8 <_dtoa_r>:
 802e6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e6dc:	b099      	sub	sp, #100	@ 0x64
 802e6de:	ed8d 0b02 	vstr	d0, [sp, #8]
 802e6e2:	9109      	str	r1, [sp, #36]	@ 0x24
 802e6e4:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 802e6e6:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 802e6e8:	920e      	str	r2, [sp, #56]	@ 0x38
 802e6ea:	ec55 4b10 	vmov	r4, r5, d0
 802e6ee:	4683      	mov	fp, r0
 802e6f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 802e6f2:	b149      	cbz	r1, 802e708 <_dtoa_r+0x30>
 802e6f4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802e6f6:	604a      	str	r2, [r1, #4]
 802e6f8:	2301      	movs	r3, #1
 802e6fa:	4093      	lsls	r3, r2
 802e6fc:	608b      	str	r3, [r1, #8]
 802e6fe:	f005 fa40 	bl	8033b82 <_Bfree>
 802e702:	2300      	movs	r3, #0
 802e704:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 802e708:	1e2b      	subs	r3, r5, #0
 802e70a:	bfb9      	ittee	lt
 802e70c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 802e710:	9303      	strlt	r3, [sp, #12]
 802e712:	2300      	movge	r3, #0
 802e714:	6033      	strge	r3, [r6, #0]
 802e716:	9f03      	ldr	r7, [sp, #12]
 802e718:	4b97      	ldr	r3, [pc, #604]	@ (802e978 <_dtoa_r+0x2a0>)
 802e71a:	bfbc      	itt	lt
 802e71c:	2201      	movlt	r2, #1
 802e71e:	6032      	strlt	r2, [r6, #0]
 802e720:	43bb      	bics	r3, r7
 802e722:	d114      	bne.n	802e74e <_dtoa_r+0x76>
 802e724:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802e726:	f242 730f 	movw	r3, #9999	@ 0x270f
 802e72a:	6013      	str	r3, [r2, #0]
 802e72c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802e730:	4323      	orrs	r3, r4
 802e732:	f000 854c 	beq.w	802f1ce <_dtoa_r+0xaf6>
 802e736:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802e738:	f8df a254 	ldr.w	sl, [pc, #596]	@ 802e990 <_dtoa_r+0x2b8>
 802e73c:	b11b      	cbz	r3, 802e746 <_dtoa_r+0x6e>
 802e73e:	f10a 0303 	add.w	r3, sl, #3
 802e742:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802e744:	6013      	str	r3, [r2, #0]
 802e746:	4650      	mov	r0, sl
 802e748:	b019      	add	sp, #100	@ 0x64
 802e74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e74e:	ed9d 7b02 	vldr	d7, [sp, #8]
 802e752:	2200      	movs	r2, #0
 802e754:	ec51 0b17 	vmov	r0, r1, d7
 802e758:	2300      	movs	r3, #0
 802e75a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 802e75e:	f7e2 f9cb 	bl	8010af8 <__aeabi_dcmpeq>
 802e762:	4680      	mov	r8, r0
 802e764:	b150      	cbz	r0, 802e77c <_dtoa_r+0xa4>
 802e766:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802e768:	2301      	movs	r3, #1
 802e76a:	6013      	str	r3, [r2, #0]
 802e76c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802e76e:	b113      	cbz	r3, 802e776 <_dtoa_r+0x9e>
 802e770:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802e772:	4b82      	ldr	r3, [pc, #520]	@ (802e97c <_dtoa_r+0x2a4>)
 802e774:	6013      	str	r3, [r2, #0]
 802e776:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 802e994 <_dtoa_r+0x2bc>
 802e77a:	e7e4      	b.n	802e746 <_dtoa_r+0x6e>
 802e77c:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 802e780:	aa16      	add	r2, sp, #88	@ 0x58
 802e782:	a917      	add	r1, sp, #92	@ 0x5c
 802e784:	4658      	mov	r0, fp
 802e786:	f005 fd6d 	bl	8034264 <__d2b>
 802e78a:	f3c7 560a 	ubfx	r6, r7, #20, #11
 802e78e:	4681      	mov	r9, r0
 802e790:	2e00      	cmp	r6, #0
 802e792:	d077      	beq.n	802e884 <_dtoa_r+0x1ac>
 802e794:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802e796:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 802e79a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802e79e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802e7a2:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 802e7a6:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 802e7aa:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 802e7ae:	4619      	mov	r1, r3
 802e7b0:	2200      	movs	r2, #0
 802e7b2:	4b73      	ldr	r3, [pc, #460]	@ (802e980 <_dtoa_r+0x2a8>)
 802e7b4:	f7e1 fd80 	bl	80102b8 <__aeabi_dsub>
 802e7b8:	a369      	add	r3, pc, #420	@ (adr r3, 802e960 <_dtoa_r+0x288>)
 802e7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e7be:	f7e1 ff33 	bl	8010628 <__aeabi_dmul>
 802e7c2:	a369      	add	r3, pc, #420	@ (adr r3, 802e968 <_dtoa_r+0x290>)
 802e7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e7c8:	f7e1 fd78 	bl	80102bc <__adddf3>
 802e7cc:	4604      	mov	r4, r0
 802e7ce:	4630      	mov	r0, r6
 802e7d0:	460d      	mov	r5, r1
 802e7d2:	f7e1 febf 	bl	8010554 <__aeabi_i2d>
 802e7d6:	a366      	add	r3, pc, #408	@ (adr r3, 802e970 <_dtoa_r+0x298>)
 802e7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e7dc:	f7e1 ff24 	bl	8010628 <__aeabi_dmul>
 802e7e0:	4602      	mov	r2, r0
 802e7e2:	460b      	mov	r3, r1
 802e7e4:	4620      	mov	r0, r4
 802e7e6:	4629      	mov	r1, r5
 802e7e8:	f7e1 fd68 	bl	80102bc <__adddf3>
 802e7ec:	4604      	mov	r4, r0
 802e7ee:	460d      	mov	r5, r1
 802e7f0:	f7e2 f9ca 	bl	8010b88 <__aeabi_d2iz>
 802e7f4:	2200      	movs	r2, #0
 802e7f6:	4607      	mov	r7, r0
 802e7f8:	2300      	movs	r3, #0
 802e7fa:	4620      	mov	r0, r4
 802e7fc:	4629      	mov	r1, r5
 802e7fe:	f7e2 f985 	bl	8010b0c <__aeabi_dcmplt>
 802e802:	b140      	cbz	r0, 802e816 <_dtoa_r+0x13e>
 802e804:	4638      	mov	r0, r7
 802e806:	f7e1 fea5 	bl	8010554 <__aeabi_i2d>
 802e80a:	4622      	mov	r2, r4
 802e80c:	462b      	mov	r3, r5
 802e80e:	f7e2 f973 	bl	8010af8 <__aeabi_dcmpeq>
 802e812:	b900      	cbnz	r0, 802e816 <_dtoa_r+0x13e>
 802e814:	3f01      	subs	r7, #1
 802e816:	2f16      	cmp	r7, #22
 802e818:	d851      	bhi.n	802e8be <_dtoa_r+0x1e6>
 802e81a:	4b5a      	ldr	r3, [pc, #360]	@ (802e984 <_dtoa_r+0x2ac>)
 802e81c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802e820:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e824:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802e828:	f7e2 f970 	bl	8010b0c <__aeabi_dcmplt>
 802e82c:	2800      	cmp	r0, #0
 802e82e:	d048      	beq.n	802e8c2 <_dtoa_r+0x1ea>
 802e830:	3f01      	subs	r7, #1
 802e832:	2300      	movs	r3, #0
 802e834:	9312      	str	r3, [sp, #72]	@ 0x48
 802e836:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802e838:	1b9b      	subs	r3, r3, r6
 802e83a:	1e5a      	subs	r2, r3, #1
 802e83c:	bf44      	itt	mi
 802e83e:	f1c3 0801 	rsbmi	r8, r3, #1
 802e842:	2300      	movmi	r3, #0
 802e844:	9208      	str	r2, [sp, #32]
 802e846:	bf54      	ite	pl
 802e848:	f04f 0800 	movpl.w	r8, #0
 802e84c:	9308      	strmi	r3, [sp, #32]
 802e84e:	2f00      	cmp	r7, #0
 802e850:	db39      	blt.n	802e8c6 <_dtoa_r+0x1ee>
 802e852:	9b08      	ldr	r3, [sp, #32]
 802e854:	970f      	str	r7, [sp, #60]	@ 0x3c
 802e856:	443b      	add	r3, r7
 802e858:	9308      	str	r3, [sp, #32]
 802e85a:	2300      	movs	r3, #0
 802e85c:	930a      	str	r3, [sp, #40]	@ 0x28
 802e85e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e860:	2b09      	cmp	r3, #9
 802e862:	d865      	bhi.n	802e930 <_dtoa_r+0x258>
 802e864:	2b05      	cmp	r3, #5
 802e866:	bfc4      	itt	gt
 802e868:	3b04      	subgt	r3, #4
 802e86a:	9309      	strgt	r3, [sp, #36]	@ 0x24
 802e86c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e86e:	f1a3 0302 	sub.w	r3, r3, #2
 802e872:	bfcc      	ite	gt
 802e874:	2400      	movgt	r4, #0
 802e876:	2401      	movle	r4, #1
 802e878:	2b03      	cmp	r3, #3
 802e87a:	d864      	bhi.n	802e946 <_dtoa_r+0x26e>
 802e87c:	e8df f003 	tbb	[pc, r3]
 802e880:	5635372a 	.word	0x5635372a
 802e884:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 802e888:	441e      	add	r6, r3
 802e88a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 802e88e:	2b20      	cmp	r3, #32
 802e890:	bfc1      	itttt	gt
 802e892:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 802e896:	409f      	lslgt	r7, r3
 802e898:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 802e89c:	fa24 f303 	lsrgt.w	r3, r4, r3
 802e8a0:	bfd6      	itet	le
 802e8a2:	f1c3 0320 	rsble	r3, r3, #32
 802e8a6:	ea47 0003 	orrgt.w	r0, r7, r3
 802e8aa:	fa04 f003 	lslle.w	r0, r4, r3
 802e8ae:	f7e1 fe41 	bl	8010534 <__aeabi_ui2d>
 802e8b2:	2201      	movs	r2, #1
 802e8b4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 802e8b8:	3e01      	subs	r6, #1
 802e8ba:	9214      	str	r2, [sp, #80]	@ 0x50
 802e8bc:	e777      	b.n	802e7ae <_dtoa_r+0xd6>
 802e8be:	2301      	movs	r3, #1
 802e8c0:	e7b8      	b.n	802e834 <_dtoa_r+0x15c>
 802e8c2:	9012      	str	r0, [sp, #72]	@ 0x48
 802e8c4:	e7b7      	b.n	802e836 <_dtoa_r+0x15e>
 802e8c6:	427b      	negs	r3, r7
 802e8c8:	930a      	str	r3, [sp, #40]	@ 0x28
 802e8ca:	2300      	movs	r3, #0
 802e8cc:	eba8 0807 	sub.w	r8, r8, r7
 802e8d0:	930f      	str	r3, [sp, #60]	@ 0x3c
 802e8d2:	e7c4      	b.n	802e85e <_dtoa_r+0x186>
 802e8d4:	2300      	movs	r3, #0
 802e8d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 802e8d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802e8da:	2b00      	cmp	r3, #0
 802e8dc:	dc36      	bgt.n	802e94c <_dtoa_r+0x274>
 802e8de:	2301      	movs	r3, #1
 802e8e0:	9300      	str	r3, [sp, #0]
 802e8e2:	9307      	str	r3, [sp, #28]
 802e8e4:	461a      	mov	r2, r3
 802e8e6:	920e      	str	r2, [sp, #56]	@ 0x38
 802e8e8:	e00b      	b.n	802e902 <_dtoa_r+0x22a>
 802e8ea:	2301      	movs	r3, #1
 802e8ec:	e7f3      	b.n	802e8d6 <_dtoa_r+0x1fe>
 802e8ee:	2300      	movs	r3, #0
 802e8f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 802e8f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802e8f4:	18fb      	adds	r3, r7, r3
 802e8f6:	9300      	str	r3, [sp, #0]
 802e8f8:	3301      	adds	r3, #1
 802e8fa:	2b01      	cmp	r3, #1
 802e8fc:	9307      	str	r3, [sp, #28]
 802e8fe:	bfb8      	it	lt
 802e900:	2301      	movlt	r3, #1
 802e902:	2100      	movs	r1, #0
 802e904:	2204      	movs	r2, #4
 802e906:	f102 0014 	add.w	r0, r2, #20
 802e90a:	4298      	cmp	r0, r3
 802e90c:	d922      	bls.n	802e954 <_dtoa_r+0x27c>
 802e90e:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
 802e912:	4658      	mov	r0, fp
 802e914:	f005 f910 	bl	8033b38 <_Balloc>
 802e918:	4682      	mov	sl, r0
 802e91a:	2800      	cmp	r0, #0
 802e91c:	d13c      	bne.n	802e998 <_dtoa_r+0x2c0>
 802e91e:	4b1a      	ldr	r3, [pc, #104]	@ (802e988 <_dtoa_r+0x2b0>)
 802e920:	4602      	mov	r2, r0
 802e922:	f240 11af 	movw	r1, #431	@ 0x1af
 802e926:	4819      	ldr	r0, [pc, #100]	@ (802e98c <_dtoa_r+0x2b4>)
 802e928:	f7fb fe48 	bl	802a5bc <__assert_func>
 802e92c:	2301      	movs	r3, #1
 802e92e:	e7df      	b.n	802e8f0 <_dtoa_r+0x218>
 802e930:	2401      	movs	r4, #1
 802e932:	2300      	movs	r3, #0
 802e934:	9309      	str	r3, [sp, #36]	@ 0x24
 802e936:	940b      	str	r4, [sp, #44]	@ 0x2c
 802e938:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802e93c:	9300      	str	r3, [sp, #0]
 802e93e:	9307      	str	r3, [sp, #28]
 802e940:	2200      	movs	r2, #0
 802e942:	2312      	movs	r3, #18
 802e944:	e7cf      	b.n	802e8e6 <_dtoa_r+0x20e>
 802e946:	2301      	movs	r3, #1
 802e948:	930b      	str	r3, [sp, #44]	@ 0x2c
 802e94a:	e7f5      	b.n	802e938 <_dtoa_r+0x260>
 802e94c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802e94e:	9300      	str	r3, [sp, #0]
 802e950:	9307      	str	r3, [sp, #28]
 802e952:	e7d6      	b.n	802e902 <_dtoa_r+0x22a>
 802e954:	3101      	adds	r1, #1
 802e956:	0052      	lsls	r2, r2, #1
 802e958:	e7d5      	b.n	802e906 <_dtoa_r+0x22e>
 802e95a:	bf00      	nop
 802e95c:	f3af 8000 	nop.w
 802e960:	636f4361 	.word	0x636f4361
 802e964:	3fd287a7 	.word	0x3fd287a7
 802e968:	8b60c8b3 	.word	0x8b60c8b3
 802e96c:	3fc68a28 	.word	0x3fc68a28
 802e970:	509f79fb 	.word	0x509f79fb
 802e974:	3fd34413 	.word	0x3fd34413
 802e978:	7ff00000 	.word	0x7ff00000
 802e97c:	0803c46e 	.word	0x0803c46e
 802e980:	3ff80000 	.word	0x3ff80000
 802e984:	0803ca88 	.word	0x0803ca88
 802e988:	0803c906 	.word	0x0803c906
 802e98c:	0803c917 	.word	0x0803c917
 802e990:	0803c902 	.word	0x0803c902
 802e994:	0803c46d 	.word	0x0803c46d
 802e998:	9b07      	ldr	r3, [sp, #28]
 802e99a:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 802e99e:	2b0e      	cmp	r3, #14
 802e9a0:	f200 80a4 	bhi.w	802eaec <_dtoa_r+0x414>
 802e9a4:	2c00      	cmp	r4, #0
 802e9a6:	f000 80a1 	beq.w	802eaec <_dtoa_r+0x414>
 802e9aa:	2f00      	cmp	r7, #0
 802e9ac:	dd33      	ble.n	802ea16 <_dtoa_r+0x33e>
 802e9ae:	4bae      	ldr	r3, [pc, #696]	@ (802ec68 <_dtoa_r+0x590>)
 802e9b0:	f007 020f 	and.w	r2, r7, #15
 802e9b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802e9b8:	ed93 7b00 	vldr	d7, [r3]
 802e9bc:	05f8      	lsls	r0, r7, #23
 802e9be:	ed8d 7b04 	vstr	d7, [sp, #16]
 802e9c2:	ea4f 1427 	mov.w	r4, r7, asr #4
 802e9c6:	d516      	bpl.n	802e9f6 <_dtoa_r+0x31e>
 802e9c8:	4ba8      	ldr	r3, [pc, #672]	@ (802ec6c <_dtoa_r+0x594>)
 802e9ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802e9ce:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802e9d2:	f7e1 ff53 	bl	801087c <__aeabi_ddiv>
 802e9d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e9da:	f004 040f 	and.w	r4, r4, #15
 802e9de:	2603      	movs	r6, #3
 802e9e0:	4da2      	ldr	r5, [pc, #648]	@ (802ec6c <_dtoa_r+0x594>)
 802e9e2:	b954      	cbnz	r4, 802e9fa <_dtoa_r+0x322>
 802e9e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802e9e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e9ec:	f7e1 ff46 	bl	801087c <__aeabi_ddiv>
 802e9f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e9f4:	e028      	b.n	802ea48 <_dtoa_r+0x370>
 802e9f6:	2602      	movs	r6, #2
 802e9f8:	e7f2      	b.n	802e9e0 <_dtoa_r+0x308>
 802e9fa:	07e1      	lsls	r1, r4, #31
 802e9fc:	d508      	bpl.n	802ea10 <_dtoa_r+0x338>
 802e9fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802ea02:	e9d5 2300 	ldrd	r2, r3, [r5]
 802ea06:	f7e1 fe0f 	bl	8010628 <__aeabi_dmul>
 802ea0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802ea0e:	3601      	adds	r6, #1
 802ea10:	1064      	asrs	r4, r4, #1
 802ea12:	3508      	adds	r5, #8
 802ea14:	e7e5      	b.n	802e9e2 <_dtoa_r+0x30a>
 802ea16:	f000 80d2 	beq.w	802ebbe <_dtoa_r+0x4e6>
 802ea1a:	427c      	negs	r4, r7
 802ea1c:	4b92      	ldr	r3, [pc, #584]	@ (802ec68 <_dtoa_r+0x590>)
 802ea1e:	4d93      	ldr	r5, [pc, #588]	@ (802ec6c <_dtoa_r+0x594>)
 802ea20:	f004 020f 	and.w	r2, r4, #15
 802ea24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802ea28:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ea2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802ea30:	f7e1 fdfa 	bl	8010628 <__aeabi_dmul>
 802ea34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802ea38:	1124      	asrs	r4, r4, #4
 802ea3a:	2300      	movs	r3, #0
 802ea3c:	2602      	movs	r6, #2
 802ea3e:	2c00      	cmp	r4, #0
 802ea40:	f040 80b2 	bne.w	802eba8 <_dtoa_r+0x4d0>
 802ea44:	2b00      	cmp	r3, #0
 802ea46:	d1d3      	bne.n	802e9f0 <_dtoa_r+0x318>
 802ea48:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802ea4a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 802ea4e:	2b00      	cmp	r3, #0
 802ea50:	f000 80b7 	beq.w	802ebc2 <_dtoa_r+0x4ea>
 802ea54:	4b86      	ldr	r3, [pc, #536]	@ (802ec70 <_dtoa_r+0x598>)
 802ea56:	2200      	movs	r2, #0
 802ea58:	4620      	mov	r0, r4
 802ea5a:	4629      	mov	r1, r5
 802ea5c:	f7e2 f856 	bl	8010b0c <__aeabi_dcmplt>
 802ea60:	2800      	cmp	r0, #0
 802ea62:	f000 80ae 	beq.w	802ebc2 <_dtoa_r+0x4ea>
 802ea66:	9b07      	ldr	r3, [sp, #28]
 802ea68:	2b00      	cmp	r3, #0
 802ea6a:	f000 80aa 	beq.w	802ebc2 <_dtoa_r+0x4ea>
 802ea6e:	9b00      	ldr	r3, [sp, #0]
 802ea70:	2b00      	cmp	r3, #0
 802ea72:	dd37      	ble.n	802eae4 <_dtoa_r+0x40c>
 802ea74:	1e7b      	subs	r3, r7, #1
 802ea76:	9304      	str	r3, [sp, #16]
 802ea78:	4620      	mov	r0, r4
 802ea7a:	4b7e      	ldr	r3, [pc, #504]	@ (802ec74 <_dtoa_r+0x59c>)
 802ea7c:	2200      	movs	r2, #0
 802ea7e:	4629      	mov	r1, r5
 802ea80:	f7e1 fdd2 	bl	8010628 <__aeabi_dmul>
 802ea84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802ea88:	9c00      	ldr	r4, [sp, #0]
 802ea8a:	3601      	adds	r6, #1
 802ea8c:	4630      	mov	r0, r6
 802ea8e:	f7e1 fd61 	bl	8010554 <__aeabi_i2d>
 802ea92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802ea96:	f7e1 fdc7 	bl	8010628 <__aeabi_dmul>
 802ea9a:	4b77      	ldr	r3, [pc, #476]	@ (802ec78 <_dtoa_r+0x5a0>)
 802ea9c:	2200      	movs	r2, #0
 802ea9e:	f7e1 fc0d 	bl	80102bc <__adddf3>
 802eaa2:	4605      	mov	r5, r0
 802eaa4:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 802eaa8:	2c00      	cmp	r4, #0
 802eaaa:	f040 808d 	bne.w	802ebc8 <_dtoa_r+0x4f0>
 802eaae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802eab2:	4b72      	ldr	r3, [pc, #456]	@ (802ec7c <_dtoa_r+0x5a4>)
 802eab4:	2200      	movs	r2, #0
 802eab6:	f7e1 fbff 	bl	80102b8 <__aeabi_dsub>
 802eaba:	4602      	mov	r2, r0
 802eabc:	460b      	mov	r3, r1
 802eabe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802eac2:	462a      	mov	r2, r5
 802eac4:	4633      	mov	r3, r6
 802eac6:	f7e2 f83f 	bl	8010b48 <__aeabi_dcmpgt>
 802eaca:	2800      	cmp	r0, #0
 802eacc:	f040 828c 	bne.w	802efe8 <_dtoa_r+0x910>
 802ead0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802ead4:	462a      	mov	r2, r5
 802ead6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 802eada:	f7e2 f817 	bl	8010b0c <__aeabi_dcmplt>
 802eade:	2800      	cmp	r0, #0
 802eae0:	f040 8129 	bne.w	802ed36 <_dtoa_r+0x65e>
 802eae4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 802eae8:	e9cd 3402 	strd	r3, r4, [sp, #8]
 802eaec:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802eaee:	2b00      	cmp	r3, #0
 802eaf0:	f2c0 815b 	blt.w	802edaa <_dtoa_r+0x6d2>
 802eaf4:	2f0e      	cmp	r7, #14
 802eaf6:	f300 8158 	bgt.w	802edaa <_dtoa_r+0x6d2>
 802eafa:	4b5b      	ldr	r3, [pc, #364]	@ (802ec68 <_dtoa_r+0x590>)
 802eafc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802eb00:	ed93 7b00 	vldr	d7, [r3]
 802eb04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802eb06:	2b00      	cmp	r3, #0
 802eb08:	ed8d 7b00 	vstr	d7, [sp]
 802eb0c:	da03      	bge.n	802eb16 <_dtoa_r+0x43e>
 802eb0e:	9b07      	ldr	r3, [sp, #28]
 802eb10:	2b00      	cmp	r3, #0
 802eb12:	f340 8102 	ble.w	802ed1a <_dtoa_r+0x642>
 802eb16:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 802eb1a:	4656      	mov	r6, sl
 802eb1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 802eb20:	4620      	mov	r0, r4
 802eb22:	4629      	mov	r1, r5
 802eb24:	f7e1 feaa 	bl	801087c <__aeabi_ddiv>
 802eb28:	f7e2 f82e 	bl	8010b88 <__aeabi_d2iz>
 802eb2c:	4680      	mov	r8, r0
 802eb2e:	f7e1 fd11 	bl	8010554 <__aeabi_i2d>
 802eb32:	e9dd 2300 	ldrd	r2, r3, [sp]
 802eb36:	f7e1 fd77 	bl	8010628 <__aeabi_dmul>
 802eb3a:	4602      	mov	r2, r0
 802eb3c:	460b      	mov	r3, r1
 802eb3e:	4620      	mov	r0, r4
 802eb40:	4629      	mov	r1, r5
 802eb42:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 802eb46:	f7e1 fbb7 	bl	80102b8 <__aeabi_dsub>
 802eb4a:	f806 4b01 	strb.w	r4, [r6], #1
 802eb4e:	9d07      	ldr	r5, [sp, #28]
 802eb50:	eba6 040a 	sub.w	r4, r6, sl
 802eb54:	42a5      	cmp	r5, r4
 802eb56:	4602      	mov	r2, r0
 802eb58:	460b      	mov	r3, r1
 802eb5a:	f040 8118 	bne.w	802ed8e <_dtoa_r+0x6b6>
 802eb5e:	f7e1 fbad 	bl	80102bc <__adddf3>
 802eb62:	e9dd 2300 	ldrd	r2, r3, [sp]
 802eb66:	4604      	mov	r4, r0
 802eb68:	460d      	mov	r5, r1
 802eb6a:	f7e1 ffed 	bl	8010b48 <__aeabi_dcmpgt>
 802eb6e:	2800      	cmp	r0, #0
 802eb70:	f040 80fa 	bne.w	802ed68 <_dtoa_r+0x690>
 802eb74:	e9dd 2300 	ldrd	r2, r3, [sp]
 802eb78:	4620      	mov	r0, r4
 802eb7a:	4629      	mov	r1, r5
 802eb7c:	f7e1 ffbc 	bl	8010af8 <__aeabi_dcmpeq>
 802eb80:	b118      	cbz	r0, 802eb8a <_dtoa_r+0x4b2>
 802eb82:	f018 0f01 	tst.w	r8, #1
 802eb86:	f040 80ef 	bne.w	802ed68 <_dtoa_r+0x690>
 802eb8a:	4649      	mov	r1, r9
 802eb8c:	4658      	mov	r0, fp
 802eb8e:	f004 fff8 	bl	8033b82 <_Bfree>
 802eb92:	2300      	movs	r3, #0
 802eb94:	7033      	strb	r3, [r6, #0]
 802eb96:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802eb98:	3701      	adds	r7, #1
 802eb9a:	601f      	str	r7, [r3, #0]
 802eb9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802eb9e:	2b00      	cmp	r3, #0
 802eba0:	f43f add1 	beq.w	802e746 <_dtoa_r+0x6e>
 802eba4:	601e      	str	r6, [r3, #0]
 802eba6:	e5ce      	b.n	802e746 <_dtoa_r+0x6e>
 802eba8:	07e2      	lsls	r2, r4, #31
 802ebaa:	d505      	bpl.n	802ebb8 <_dtoa_r+0x4e0>
 802ebac:	e9d5 2300 	ldrd	r2, r3, [r5]
 802ebb0:	f7e1 fd3a 	bl	8010628 <__aeabi_dmul>
 802ebb4:	3601      	adds	r6, #1
 802ebb6:	2301      	movs	r3, #1
 802ebb8:	1064      	asrs	r4, r4, #1
 802ebba:	3508      	adds	r5, #8
 802ebbc:	e73f      	b.n	802ea3e <_dtoa_r+0x366>
 802ebbe:	2602      	movs	r6, #2
 802ebc0:	e742      	b.n	802ea48 <_dtoa_r+0x370>
 802ebc2:	9c07      	ldr	r4, [sp, #28]
 802ebc4:	9704      	str	r7, [sp, #16]
 802ebc6:	e761      	b.n	802ea8c <_dtoa_r+0x3b4>
 802ebc8:	4b27      	ldr	r3, [pc, #156]	@ (802ec68 <_dtoa_r+0x590>)
 802ebca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802ebcc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802ebd0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802ebd4:	4454      	add	r4, sl
 802ebd6:	2900      	cmp	r1, #0
 802ebd8:	d054      	beq.n	802ec84 <_dtoa_r+0x5ac>
 802ebda:	4929      	ldr	r1, [pc, #164]	@ (802ec80 <_dtoa_r+0x5a8>)
 802ebdc:	2000      	movs	r0, #0
 802ebde:	f7e1 fe4d 	bl	801087c <__aeabi_ddiv>
 802ebe2:	4633      	mov	r3, r6
 802ebe4:	462a      	mov	r2, r5
 802ebe6:	f7e1 fb67 	bl	80102b8 <__aeabi_dsub>
 802ebea:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802ebee:	4656      	mov	r6, sl
 802ebf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802ebf4:	f7e1 ffc8 	bl	8010b88 <__aeabi_d2iz>
 802ebf8:	4605      	mov	r5, r0
 802ebfa:	f7e1 fcab 	bl	8010554 <__aeabi_i2d>
 802ebfe:	4602      	mov	r2, r0
 802ec00:	460b      	mov	r3, r1
 802ec02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802ec06:	f7e1 fb57 	bl	80102b8 <__aeabi_dsub>
 802ec0a:	3530      	adds	r5, #48	@ 0x30
 802ec0c:	4602      	mov	r2, r0
 802ec0e:	460b      	mov	r3, r1
 802ec10:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802ec14:	f806 5b01 	strb.w	r5, [r6], #1
 802ec18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802ec1c:	f7e1 ff76 	bl	8010b0c <__aeabi_dcmplt>
 802ec20:	2800      	cmp	r0, #0
 802ec22:	d172      	bne.n	802ed0a <_dtoa_r+0x632>
 802ec24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802ec28:	4911      	ldr	r1, [pc, #68]	@ (802ec70 <_dtoa_r+0x598>)
 802ec2a:	2000      	movs	r0, #0
 802ec2c:	f7e1 fb44 	bl	80102b8 <__aeabi_dsub>
 802ec30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802ec34:	f7e1 ff6a 	bl	8010b0c <__aeabi_dcmplt>
 802ec38:	2800      	cmp	r0, #0
 802ec3a:	f040 8096 	bne.w	802ed6a <_dtoa_r+0x692>
 802ec3e:	42a6      	cmp	r6, r4
 802ec40:	f43f af50 	beq.w	802eae4 <_dtoa_r+0x40c>
 802ec44:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 802ec48:	4b0a      	ldr	r3, [pc, #40]	@ (802ec74 <_dtoa_r+0x59c>)
 802ec4a:	2200      	movs	r2, #0
 802ec4c:	f7e1 fcec 	bl	8010628 <__aeabi_dmul>
 802ec50:	4b08      	ldr	r3, [pc, #32]	@ (802ec74 <_dtoa_r+0x59c>)
 802ec52:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802ec56:	2200      	movs	r2, #0
 802ec58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802ec5c:	f7e1 fce4 	bl	8010628 <__aeabi_dmul>
 802ec60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802ec64:	e7c4      	b.n	802ebf0 <_dtoa_r+0x518>
 802ec66:	bf00      	nop
 802ec68:	0803ca88 	.word	0x0803ca88
 802ec6c:	0803ca60 	.word	0x0803ca60
 802ec70:	3ff00000 	.word	0x3ff00000
 802ec74:	40240000 	.word	0x40240000
 802ec78:	401c0000 	.word	0x401c0000
 802ec7c:	40140000 	.word	0x40140000
 802ec80:	3fe00000 	.word	0x3fe00000
 802ec84:	4631      	mov	r1, r6
 802ec86:	4628      	mov	r0, r5
 802ec88:	f7e1 fcce 	bl	8010628 <__aeabi_dmul>
 802ec8c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802ec90:	9415      	str	r4, [sp, #84]	@ 0x54
 802ec92:	4656      	mov	r6, sl
 802ec94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802ec98:	f7e1 ff76 	bl	8010b88 <__aeabi_d2iz>
 802ec9c:	4605      	mov	r5, r0
 802ec9e:	f7e1 fc59 	bl	8010554 <__aeabi_i2d>
 802eca2:	4602      	mov	r2, r0
 802eca4:	460b      	mov	r3, r1
 802eca6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802ecaa:	f7e1 fb05 	bl	80102b8 <__aeabi_dsub>
 802ecae:	3530      	adds	r5, #48	@ 0x30
 802ecb0:	f806 5b01 	strb.w	r5, [r6], #1
 802ecb4:	4602      	mov	r2, r0
 802ecb6:	460b      	mov	r3, r1
 802ecb8:	42a6      	cmp	r6, r4
 802ecba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802ecbe:	f04f 0200 	mov.w	r2, #0
 802ecc2:	d124      	bne.n	802ed0e <_dtoa_r+0x636>
 802ecc4:	4bac      	ldr	r3, [pc, #688]	@ (802ef78 <_dtoa_r+0x8a0>)
 802ecc6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 802ecca:	f7e1 faf7 	bl	80102bc <__adddf3>
 802ecce:	4602      	mov	r2, r0
 802ecd0:	460b      	mov	r3, r1
 802ecd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802ecd6:	f7e1 ff37 	bl	8010b48 <__aeabi_dcmpgt>
 802ecda:	2800      	cmp	r0, #0
 802ecdc:	d145      	bne.n	802ed6a <_dtoa_r+0x692>
 802ecde:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802ece2:	49a5      	ldr	r1, [pc, #660]	@ (802ef78 <_dtoa_r+0x8a0>)
 802ece4:	2000      	movs	r0, #0
 802ece6:	f7e1 fae7 	bl	80102b8 <__aeabi_dsub>
 802ecea:	4602      	mov	r2, r0
 802ecec:	460b      	mov	r3, r1
 802ecee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802ecf2:	f7e1 ff0b 	bl	8010b0c <__aeabi_dcmplt>
 802ecf6:	2800      	cmp	r0, #0
 802ecf8:	f43f aef4 	beq.w	802eae4 <_dtoa_r+0x40c>
 802ecfc:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 802ecfe:	1e73      	subs	r3, r6, #1
 802ed00:	9315      	str	r3, [sp, #84]	@ 0x54
 802ed02:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 802ed06:	2b30      	cmp	r3, #48	@ 0x30
 802ed08:	d0f8      	beq.n	802ecfc <_dtoa_r+0x624>
 802ed0a:	9f04      	ldr	r7, [sp, #16]
 802ed0c:	e73d      	b.n	802eb8a <_dtoa_r+0x4b2>
 802ed0e:	4b9b      	ldr	r3, [pc, #620]	@ (802ef7c <_dtoa_r+0x8a4>)
 802ed10:	f7e1 fc8a 	bl	8010628 <__aeabi_dmul>
 802ed14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802ed18:	e7bc      	b.n	802ec94 <_dtoa_r+0x5bc>
 802ed1a:	d10c      	bne.n	802ed36 <_dtoa_r+0x65e>
 802ed1c:	4b98      	ldr	r3, [pc, #608]	@ (802ef80 <_dtoa_r+0x8a8>)
 802ed1e:	2200      	movs	r2, #0
 802ed20:	e9dd 0100 	ldrd	r0, r1, [sp]
 802ed24:	f7e1 fc80 	bl	8010628 <__aeabi_dmul>
 802ed28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802ed2c:	f7e1 ff02 	bl	8010b34 <__aeabi_dcmpge>
 802ed30:	2800      	cmp	r0, #0
 802ed32:	f000 8157 	beq.w	802efe4 <_dtoa_r+0x90c>
 802ed36:	2400      	movs	r4, #0
 802ed38:	4625      	mov	r5, r4
 802ed3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802ed3c:	43db      	mvns	r3, r3
 802ed3e:	9304      	str	r3, [sp, #16]
 802ed40:	4656      	mov	r6, sl
 802ed42:	2700      	movs	r7, #0
 802ed44:	4621      	mov	r1, r4
 802ed46:	4658      	mov	r0, fp
 802ed48:	f004 ff1b 	bl	8033b82 <_Bfree>
 802ed4c:	2d00      	cmp	r5, #0
 802ed4e:	d0dc      	beq.n	802ed0a <_dtoa_r+0x632>
 802ed50:	b12f      	cbz	r7, 802ed5e <_dtoa_r+0x686>
 802ed52:	42af      	cmp	r7, r5
 802ed54:	d003      	beq.n	802ed5e <_dtoa_r+0x686>
 802ed56:	4639      	mov	r1, r7
 802ed58:	4658      	mov	r0, fp
 802ed5a:	f004 ff12 	bl	8033b82 <_Bfree>
 802ed5e:	4629      	mov	r1, r5
 802ed60:	4658      	mov	r0, fp
 802ed62:	f004 ff0e 	bl	8033b82 <_Bfree>
 802ed66:	e7d0      	b.n	802ed0a <_dtoa_r+0x632>
 802ed68:	9704      	str	r7, [sp, #16]
 802ed6a:	4633      	mov	r3, r6
 802ed6c:	461e      	mov	r6, r3
 802ed6e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802ed72:	2a39      	cmp	r2, #57	@ 0x39
 802ed74:	d107      	bne.n	802ed86 <_dtoa_r+0x6ae>
 802ed76:	459a      	cmp	sl, r3
 802ed78:	d1f8      	bne.n	802ed6c <_dtoa_r+0x694>
 802ed7a:	9a04      	ldr	r2, [sp, #16]
 802ed7c:	3201      	adds	r2, #1
 802ed7e:	9204      	str	r2, [sp, #16]
 802ed80:	2230      	movs	r2, #48	@ 0x30
 802ed82:	f88a 2000 	strb.w	r2, [sl]
 802ed86:	781a      	ldrb	r2, [r3, #0]
 802ed88:	3201      	adds	r2, #1
 802ed8a:	701a      	strb	r2, [r3, #0]
 802ed8c:	e7bd      	b.n	802ed0a <_dtoa_r+0x632>
 802ed8e:	4b7b      	ldr	r3, [pc, #492]	@ (802ef7c <_dtoa_r+0x8a4>)
 802ed90:	2200      	movs	r2, #0
 802ed92:	f7e1 fc49 	bl	8010628 <__aeabi_dmul>
 802ed96:	2200      	movs	r2, #0
 802ed98:	2300      	movs	r3, #0
 802ed9a:	4604      	mov	r4, r0
 802ed9c:	460d      	mov	r5, r1
 802ed9e:	f7e1 feab 	bl	8010af8 <__aeabi_dcmpeq>
 802eda2:	2800      	cmp	r0, #0
 802eda4:	f43f aeba 	beq.w	802eb1c <_dtoa_r+0x444>
 802eda8:	e6ef      	b.n	802eb8a <_dtoa_r+0x4b2>
 802edaa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802edac:	2a00      	cmp	r2, #0
 802edae:	f000 80db 	beq.w	802ef68 <_dtoa_r+0x890>
 802edb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802edb4:	2a01      	cmp	r2, #1
 802edb6:	f300 80bf 	bgt.w	802ef38 <_dtoa_r+0x860>
 802edba:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802edbc:	2a00      	cmp	r2, #0
 802edbe:	f000 80b7 	beq.w	802ef30 <_dtoa_r+0x858>
 802edc2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 802edc6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802edc8:	4646      	mov	r6, r8
 802edca:	9a08      	ldr	r2, [sp, #32]
 802edcc:	2101      	movs	r1, #1
 802edce:	441a      	add	r2, r3
 802edd0:	4658      	mov	r0, fp
 802edd2:	4498      	add	r8, r3
 802edd4:	9208      	str	r2, [sp, #32]
 802edd6:	f004 ffb9 	bl	8033d4c <__i2b>
 802edda:	4605      	mov	r5, r0
 802eddc:	b15e      	cbz	r6, 802edf6 <_dtoa_r+0x71e>
 802edde:	9b08      	ldr	r3, [sp, #32]
 802ede0:	2b00      	cmp	r3, #0
 802ede2:	dd08      	ble.n	802edf6 <_dtoa_r+0x71e>
 802ede4:	42b3      	cmp	r3, r6
 802ede6:	9a08      	ldr	r2, [sp, #32]
 802ede8:	bfa8      	it	ge
 802edea:	4633      	movge	r3, r6
 802edec:	eba8 0803 	sub.w	r8, r8, r3
 802edf0:	1af6      	subs	r6, r6, r3
 802edf2:	1ad3      	subs	r3, r2, r3
 802edf4:	9308      	str	r3, [sp, #32]
 802edf6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802edf8:	b1f3      	cbz	r3, 802ee38 <_dtoa_r+0x760>
 802edfa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802edfc:	2b00      	cmp	r3, #0
 802edfe:	f000 80b7 	beq.w	802ef70 <_dtoa_r+0x898>
 802ee02:	b18c      	cbz	r4, 802ee28 <_dtoa_r+0x750>
 802ee04:	4629      	mov	r1, r5
 802ee06:	4622      	mov	r2, r4
 802ee08:	4658      	mov	r0, fp
 802ee0a:	f005 f85f 	bl	8033ecc <__pow5mult>
 802ee0e:	464a      	mov	r2, r9
 802ee10:	4601      	mov	r1, r0
 802ee12:	4605      	mov	r5, r0
 802ee14:	4658      	mov	r0, fp
 802ee16:	f004 ffaf 	bl	8033d78 <__multiply>
 802ee1a:	4649      	mov	r1, r9
 802ee1c:	9004      	str	r0, [sp, #16]
 802ee1e:	4658      	mov	r0, fp
 802ee20:	f004 feaf 	bl	8033b82 <_Bfree>
 802ee24:	9b04      	ldr	r3, [sp, #16]
 802ee26:	4699      	mov	r9, r3
 802ee28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802ee2a:	1b1a      	subs	r2, r3, r4
 802ee2c:	d004      	beq.n	802ee38 <_dtoa_r+0x760>
 802ee2e:	4649      	mov	r1, r9
 802ee30:	4658      	mov	r0, fp
 802ee32:	f005 f84b 	bl	8033ecc <__pow5mult>
 802ee36:	4681      	mov	r9, r0
 802ee38:	2101      	movs	r1, #1
 802ee3a:	4658      	mov	r0, fp
 802ee3c:	f004 ff86 	bl	8033d4c <__i2b>
 802ee40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802ee42:	4604      	mov	r4, r0
 802ee44:	2b00      	cmp	r3, #0
 802ee46:	f000 81cc 	beq.w	802f1e2 <_dtoa_r+0xb0a>
 802ee4a:	461a      	mov	r2, r3
 802ee4c:	4601      	mov	r1, r0
 802ee4e:	4658      	mov	r0, fp
 802ee50:	f005 f83c 	bl	8033ecc <__pow5mult>
 802ee54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ee56:	2b01      	cmp	r3, #1
 802ee58:	4604      	mov	r4, r0
 802ee5a:	f300 8095 	bgt.w	802ef88 <_dtoa_r+0x8b0>
 802ee5e:	9b02      	ldr	r3, [sp, #8]
 802ee60:	2b00      	cmp	r3, #0
 802ee62:	f040 8087 	bne.w	802ef74 <_dtoa_r+0x89c>
 802ee66:	9b03      	ldr	r3, [sp, #12]
 802ee68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802ee6c:	2b00      	cmp	r3, #0
 802ee6e:	f040 8089 	bne.w	802ef84 <_dtoa_r+0x8ac>
 802ee72:	9b03      	ldr	r3, [sp, #12]
 802ee74:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802ee78:	0d1b      	lsrs	r3, r3, #20
 802ee7a:	051b      	lsls	r3, r3, #20
 802ee7c:	b12b      	cbz	r3, 802ee8a <_dtoa_r+0x7b2>
 802ee7e:	9b08      	ldr	r3, [sp, #32]
 802ee80:	3301      	adds	r3, #1
 802ee82:	9308      	str	r3, [sp, #32]
 802ee84:	f108 0801 	add.w	r8, r8, #1
 802ee88:	2301      	movs	r3, #1
 802ee8a:	930a      	str	r3, [sp, #40]	@ 0x28
 802ee8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802ee8e:	2b00      	cmp	r3, #0
 802ee90:	f000 81ad 	beq.w	802f1ee <_dtoa_r+0xb16>
 802ee94:	6923      	ldr	r3, [r4, #16]
 802ee96:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802ee9a:	6918      	ldr	r0, [r3, #16]
 802ee9c:	f004 ff0a 	bl	8033cb4 <__hi0bits>
 802eea0:	f1c0 0020 	rsb	r0, r0, #32
 802eea4:	9b08      	ldr	r3, [sp, #32]
 802eea6:	4418      	add	r0, r3
 802eea8:	f010 001f 	ands.w	r0, r0, #31
 802eeac:	d077      	beq.n	802ef9e <_dtoa_r+0x8c6>
 802eeae:	f1c0 0320 	rsb	r3, r0, #32
 802eeb2:	2b04      	cmp	r3, #4
 802eeb4:	dd6b      	ble.n	802ef8e <_dtoa_r+0x8b6>
 802eeb6:	9b08      	ldr	r3, [sp, #32]
 802eeb8:	f1c0 001c 	rsb	r0, r0, #28
 802eebc:	4403      	add	r3, r0
 802eebe:	4480      	add	r8, r0
 802eec0:	4406      	add	r6, r0
 802eec2:	9308      	str	r3, [sp, #32]
 802eec4:	f1b8 0f00 	cmp.w	r8, #0
 802eec8:	dd05      	ble.n	802eed6 <_dtoa_r+0x7fe>
 802eeca:	4649      	mov	r1, r9
 802eecc:	4642      	mov	r2, r8
 802eece:	4658      	mov	r0, fp
 802eed0:	f005 f83c 	bl	8033f4c <__lshift>
 802eed4:	4681      	mov	r9, r0
 802eed6:	9b08      	ldr	r3, [sp, #32]
 802eed8:	2b00      	cmp	r3, #0
 802eeda:	dd05      	ble.n	802eee8 <_dtoa_r+0x810>
 802eedc:	4621      	mov	r1, r4
 802eede:	461a      	mov	r2, r3
 802eee0:	4658      	mov	r0, fp
 802eee2:	f005 f833 	bl	8033f4c <__lshift>
 802eee6:	4604      	mov	r4, r0
 802eee8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802eeea:	2b00      	cmp	r3, #0
 802eeec:	d059      	beq.n	802efa2 <_dtoa_r+0x8ca>
 802eeee:	4621      	mov	r1, r4
 802eef0:	4648      	mov	r0, r9
 802eef2:	f005 f897 	bl	8034024 <__mcmp>
 802eef6:	2800      	cmp	r0, #0
 802eef8:	da53      	bge.n	802efa2 <_dtoa_r+0x8ca>
 802eefa:	1e7b      	subs	r3, r7, #1
 802eefc:	9304      	str	r3, [sp, #16]
 802eefe:	4649      	mov	r1, r9
 802ef00:	2300      	movs	r3, #0
 802ef02:	220a      	movs	r2, #10
 802ef04:	4658      	mov	r0, fp
 802ef06:	f004 fe45 	bl	8033b94 <__multadd>
 802ef0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802ef0c:	4681      	mov	r9, r0
 802ef0e:	2b00      	cmp	r3, #0
 802ef10:	f000 816f 	beq.w	802f1f2 <_dtoa_r+0xb1a>
 802ef14:	2300      	movs	r3, #0
 802ef16:	4629      	mov	r1, r5
 802ef18:	220a      	movs	r2, #10
 802ef1a:	4658      	mov	r0, fp
 802ef1c:	f004 fe3a 	bl	8033b94 <__multadd>
 802ef20:	9b00      	ldr	r3, [sp, #0]
 802ef22:	2b00      	cmp	r3, #0
 802ef24:	4605      	mov	r5, r0
 802ef26:	dc67      	bgt.n	802eff8 <_dtoa_r+0x920>
 802ef28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ef2a:	2b02      	cmp	r3, #2
 802ef2c:	dc41      	bgt.n	802efb2 <_dtoa_r+0x8da>
 802ef2e:	e063      	b.n	802eff8 <_dtoa_r+0x920>
 802ef30:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802ef32:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 802ef36:	e746      	b.n	802edc6 <_dtoa_r+0x6ee>
 802ef38:	9b07      	ldr	r3, [sp, #28]
 802ef3a:	1e5c      	subs	r4, r3, #1
 802ef3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802ef3e:	42a3      	cmp	r3, r4
 802ef40:	bfbf      	itttt	lt
 802ef42:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 802ef44:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 802ef46:	940a      	strlt	r4, [sp, #40]	@ 0x28
 802ef48:	1ae3      	sublt	r3, r4, r3
 802ef4a:	bfb4      	ite	lt
 802ef4c:	18d2      	addlt	r2, r2, r3
 802ef4e:	1b1c      	subge	r4, r3, r4
 802ef50:	9b07      	ldr	r3, [sp, #28]
 802ef52:	bfbc      	itt	lt
 802ef54:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 802ef56:	2400      	movlt	r4, #0
 802ef58:	2b00      	cmp	r3, #0
 802ef5a:	bfb5      	itete	lt
 802ef5c:	eba8 0603 	sublt.w	r6, r8, r3
 802ef60:	9b07      	ldrge	r3, [sp, #28]
 802ef62:	2300      	movlt	r3, #0
 802ef64:	4646      	movge	r6, r8
 802ef66:	e730      	b.n	802edca <_dtoa_r+0x6f2>
 802ef68:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802ef6a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802ef6c:	4646      	mov	r6, r8
 802ef6e:	e735      	b.n	802eddc <_dtoa_r+0x704>
 802ef70:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802ef72:	e75c      	b.n	802ee2e <_dtoa_r+0x756>
 802ef74:	2300      	movs	r3, #0
 802ef76:	e788      	b.n	802ee8a <_dtoa_r+0x7b2>
 802ef78:	3fe00000 	.word	0x3fe00000
 802ef7c:	40240000 	.word	0x40240000
 802ef80:	40140000 	.word	0x40140000
 802ef84:	9b02      	ldr	r3, [sp, #8]
 802ef86:	e780      	b.n	802ee8a <_dtoa_r+0x7b2>
 802ef88:	2300      	movs	r3, #0
 802ef8a:	930a      	str	r3, [sp, #40]	@ 0x28
 802ef8c:	e782      	b.n	802ee94 <_dtoa_r+0x7bc>
 802ef8e:	d099      	beq.n	802eec4 <_dtoa_r+0x7ec>
 802ef90:	9a08      	ldr	r2, [sp, #32]
 802ef92:	331c      	adds	r3, #28
 802ef94:	441a      	add	r2, r3
 802ef96:	4498      	add	r8, r3
 802ef98:	441e      	add	r6, r3
 802ef9a:	9208      	str	r2, [sp, #32]
 802ef9c:	e792      	b.n	802eec4 <_dtoa_r+0x7ec>
 802ef9e:	4603      	mov	r3, r0
 802efa0:	e7f6      	b.n	802ef90 <_dtoa_r+0x8b8>
 802efa2:	9b07      	ldr	r3, [sp, #28]
 802efa4:	9704      	str	r7, [sp, #16]
 802efa6:	2b00      	cmp	r3, #0
 802efa8:	dc20      	bgt.n	802efec <_dtoa_r+0x914>
 802efaa:	9300      	str	r3, [sp, #0]
 802efac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802efae:	2b02      	cmp	r3, #2
 802efb0:	dd1e      	ble.n	802eff0 <_dtoa_r+0x918>
 802efb2:	9b00      	ldr	r3, [sp, #0]
 802efb4:	2b00      	cmp	r3, #0
 802efb6:	f47f aec0 	bne.w	802ed3a <_dtoa_r+0x662>
 802efba:	4621      	mov	r1, r4
 802efbc:	2205      	movs	r2, #5
 802efbe:	4658      	mov	r0, fp
 802efc0:	f004 fde8 	bl	8033b94 <__multadd>
 802efc4:	4601      	mov	r1, r0
 802efc6:	4604      	mov	r4, r0
 802efc8:	4648      	mov	r0, r9
 802efca:	f005 f82b 	bl	8034024 <__mcmp>
 802efce:	2800      	cmp	r0, #0
 802efd0:	f77f aeb3 	ble.w	802ed3a <_dtoa_r+0x662>
 802efd4:	4656      	mov	r6, sl
 802efd6:	2331      	movs	r3, #49	@ 0x31
 802efd8:	f806 3b01 	strb.w	r3, [r6], #1
 802efdc:	9b04      	ldr	r3, [sp, #16]
 802efde:	3301      	adds	r3, #1
 802efe0:	9304      	str	r3, [sp, #16]
 802efe2:	e6ae      	b.n	802ed42 <_dtoa_r+0x66a>
 802efe4:	9c07      	ldr	r4, [sp, #28]
 802efe6:	9704      	str	r7, [sp, #16]
 802efe8:	4625      	mov	r5, r4
 802efea:	e7f3      	b.n	802efd4 <_dtoa_r+0x8fc>
 802efec:	9b07      	ldr	r3, [sp, #28]
 802efee:	9300      	str	r3, [sp, #0]
 802eff0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802eff2:	2b00      	cmp	r3, #0
 802eff4:	f000 8101 	beq.w	802f1fa <_dtoa_r+0xb22>
 802eff8:	2e00      	cmp	r6, #0
 802effa:	dd05      	ble.n	802f008 <_dtoa_r+0x930>
 802effc:	4629      	mov	r1, r5
 802effe:	4632      	mov	r2, r6
 802f000:	4658      	mov	r0, fp
 802f002:	f004 ffa3 	bl	8033f4c <__lshift>
 802f006:	4605      	mov	r5, r0
 802f008:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802f00a:	2b00      	cmp	r3, #0
 802f00c:	d059      	beq.n	802f0c2 <_dtoa_r+0x9ea>
 802f00e:	6869      	ldr	r1, [r5, #4]
 802f010:	4658      	mov	r0, fp
 802f012:	f004 fd91 	bl	8033b38 <_Balloc>
 802f016:	4606      	mov	r6, r0
 802f018:	b920      	cbnz	r0, 802f024 <_dtoa_r+0x94c>
 802f01a:	4b83      	ldr	r3, [pc, #524]	@ (802f228 <_dtoa_r+0xb50>)
 802f01c:	4602      	mov	r2, r0
 802f01e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 802f022:	e480      	b.n	802e926 <_dtoa_r+0x24e>
 802f024:	692a      	ldr	r2, [r5, #16]
 802f026:	3202      	adds	r2, #2
 802f028:	0092      	lsls	r2, r2, #2
 802f02a:	f105 010c 	add.w	r1, r5, #12
 802f02e:	300c      	adds	r0, #12
 802f030:	f7ff fa52 	bl	802e4d8 <memcpy>
 802f034:	2201      	movs	r2, #1
 802f036:	4631      	mov	r1, r6
 802f038:	4658      	mov	r0, fp
 802f03a:	f004 ff87 	bl	8033f4c <__lshift>
 802f03e:	f10a 0301 	add.w	r3, sl, #1
 802f042:	9307      	str	r3, [sp, #28]
 802f044:	9b00      	ldr	r3, [sp, #0]
 802f046:	4453      	add	r3, sl
 802f048:	930b      	str	r3, [sp, #44]	@ 0x2c
 802f04a:	9b02      	ldr	r3, [sp, #8]
 802f04c:	f003 0301 	and.w	r3, r3, #1
 802f050:	462f      	mov	r7, r5
 802f052:	930a      	str	r3, [sp, #40]	@ 0x28
 802f054:	4605      	mov	r5, r0
 802f056:	9b07      	ldr	r3, [sp, #28]
 802f058:	4621      	mov	r1, r4
 802f05a:	3b01      	subs	r3, #1
 802f05c:	4648      	mov	r0, r9
 802f05e:	9300      	str	r3, [sp, #0]
 802f060:	f7ff faaf 	bl	802e5c2 <quorem>
 802f064:	4639      	mov	r1, r7
 802f066:	9002      	str	r0, [sp, #8]
 802f068:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 802f06c:	4648      	mov	r0, r9
 802f06e:	f004 ffd9 	bl	8034024 <__mcmp>
 802f072:	462a      	mov	r2, r5
 802f074:	9008      	str	r0, [sp, #32]
 802f076:	4621      	mov	r1, r4
 802f078:	4658      	mov	r0, fp
 802f07a:	f004 ffef 	bl	803405c <__mdiff>
 802f07e:	68c2      	ldr	r2, [r0, #12]
 802f080:	4606      	mov	r6, r0
 802f082:	bb02      	cbnz	r2, 802f0c6 <_dtoa_r+0x9ee>
 802f084:	4601      	mov	r1, r0
 802f086:	4648      	mov	r0, r9
 802f088:	f004 ffcc 	bl	8034024 <__mcmp>
 802f08c:	4602      	mov	r2, r0
 802f08e:	4631      	mov	r1, r6
 802f090:	4658      	mov	r0, fp
 802f092:	920e      	str	r2, [sp, #56]	@ 0x38
 802f094:	f004 fd75 	bl	8033b82 <_Bfree>
 802f098:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802f09a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802f09c:	9e07      	ldr	r6, [sp, #28]
 802f09e:	ea43 0102 	orr.w	r1, r3, r2
 802f0a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802f0a4:	4319      	orrs	r1, r3
 802f0a6:	d110      	bne.n	802f0ca <_dtoa_r+0x9f2>
 802f0a8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802f0ac:	d029      	beq.n	802f102 <_dtoa_r+0xa2a>
 802f0ae:	9b08      	ldr	r3, [sp, #32]
 802f0b0:	2b00      	cmp	r3, #0
 802f0b2:	dd02      	ble.n	802f0ba <_dtoa_r+0x9e2>
 802f0b4:	9b02      	ldr	r3, [sp, #8]
 802f0b6:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 802f0ba:	9b00      	ldr	r3, [sp, #0]
 802f0bc:	f883 8000 	strb.w	r8, [r3]
 802f0c0:	e640      	b.n	802ed44 <_dtoa_r+0x66c>
 802f0c2:	4628      	mov	r0, r5
 802f0c4:	e7bb      	b.n	802f03e <_dtoa_r+0x966>
 802f0c6:	2201      	movs	r2, #1
 802f0c8:	e7e1      	b.n	802f08e <_dtoa_r+0x9b6>
 802f0ca:	9b08      	ldr	r3, [sp, #32]
 802f0cc:	2b00      	cmp	r3, #0
 802f0ce:	db04      	blt.n	802f0da <_dtoa_r+0xa02>
 802f0d0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802f0d2:	430b      	orrs	r3, r1
 802f0d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802f0d6:	430b      	orrs	r3, r1
 802f0d8:	d120      	bne.n	802f11c <_dtoa_r+0xa44>
 802f0da:	2a00      	cmp	r2, #0
 802f0dc:	dded      	ble.n	802f0ba <_dtoa_r+0x9e2>
 802f0de:	4649      	mov	r1, r9
 802f0e0:	2201      	movs	r2, #1
 802f0e2:	4658      	mov	r0, fp
 802f0e4:	f004 ff32 	bl	8033f4c <__lshift>
 802f0e8:	4621      	mov	r1, r4
 802f0ea:	4681      	mov	r9, r0
 802f0ec:	f004 ff9a 	bl	8034024 <__mcmp>
 802f0f0:	2800      	cmp	r0, #0
 802f0f2:	dc03      	bgt.n	802f0fc <_dtoa_r+0xa24>
 802f0f4:	d1e1      	bne.n	802f0ba <_dtoa_r+0x9e2>
 802f0f6:	f018 0f01 	tst.w	r8, #1
 802f0fa:	d0de      	beq.n	802f0ba <_dtoa_r+0x9e2>
 802f0fc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802f100:	d1d8      	bne.n	802f0b4 <_dtoa_r+0x9dc>
 802f102:	9a00      	ldr	r2, [sp, #0]
 802f104:	2339      	movs	r3, #57	@ 0x39
 802f106:	7013      	strb	r3, [r2, #0]
 802f108:	4633      	mov	r3, r6
 802f10a:	461e      	mov	r6, r3
 802f10c:	3b01      	subs	r3, #1
 802f10e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 802f112:	2a39      	cmp	r2, #57	@ 0x39
 802f114:	d052      	beq.n	802f1bc <_dtoa_r+0xae4>
 802f116:	3201      	adds	r2, #1
 802f118:	701a      	strb	r2, [r3, #0]
 802f11a:	e613      	b.n	802ed44 <_dtoa_r+0x66c>
 802f11c:	2a00      	cmp	r2, #0
 802f11e:	dd07      	ble.n	802f130 <_dtoa_r+0xa58>
 802f120:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802f124:	d0ed      	beq.n	802f102 <_dtoa_r+0xa2a>
 802f126:	9a00      	ldr	r2, [sp, #0]
 802f128:	f108 0301 	add.w	r3, r8, #1
 802f12c:	7013      	strb	r3, [r2, #0]
 802f12e:	e609      	b.n	802ed44 <_dtoa_r+0x66c>
 802f130:	9b07      	ldr	r3, [sp, #28]
 802f132:	9a07      	ldr	r2, [sp, #28]
 802f134:	f803 8c01 	strb.w	r8, [r3, #-1]
 802f138:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802f13a:	4293      	cmp	r3, r2
 802f13c:	d028      	beq.n	802f190 <_dtoa_r+0xab8>
 802f13e:	4649      	mov	r1, r9
 802f140:	2300      	movs	r3, #0
 802f142:	220a      	movs	r2, #10
 802f144:	4658      	mov	r0, fp
 802f146:	f004 fd25 	bl	8033b94 <__multadd>
 802f14a:	42af      	cmp	r7, r5
 802f14c:	4681      	mov	r9, r0
 802f14e:	f04f 0300 	mov.w	r3, #0
 802f152:	f04f 020a 	mov.w	r2, #10
 802f156:	4639      	mov	r1, r7
 802f158:	4658      	mov	r0, fp
 802f15a:	d107      	bne.n	802f16c <_dtoa_r+0xa94>
 802f15c:	f004 fd1a 	bl	8033b94 <__multadd>
 802f160:	4607      	mov	r7, r0
 802f162:	4605      	mov	r5, r0
 802f164:	9b07      	ldr	r3, [sp, #28]
 802f166:	3301      	adds	r3, #1
 802f168:	9307      	str	r3, [sp, #28]
 802f16a:	e774      	b.n	802f056 <_dtoa_r+0x97e>
 802f16c:	f004 fd12 	bl	8033b94 <__multadd>
 802f170:	4629      	mov	r1, r5
 802f172:	4607      	mov	r7, r0
 802f174:	2300      	movs	r3, #0
 802f176:	220a      	movs	r2, #10
 802f178:	4658      	mov	r0, fp
 802f17a:	f004 fd0b 	bl	8033b94 <__multadd>
 802f17e:	4605      	mov	r5, r0
 802f180:	e7f0      	b.n	802f164 <_dtoa_r+0xa8c>
 802f182:	9b00      	ldr	r3, [sp, #0]
 802f184:	2b00      	cmp	r3, #0
 802f186:	bfcc      	ite	gt
 802f188:	461e      	movgt	r6, r3
 802f18a:	2601      	movle	r6, #1
 802f18c:	4456      	add	r6, sl
 802f18e:	2700      	movs	r7, #0
 802f190:	4649      	mov	r1, r9
 802f192:	2201      	movs	r2, #1
 802f194:	4658      	mov	r0, fp
 802f196:	f004 fed9 	bl	8033f4c <__lshift>
 802f19a:	4621      	mov	r1, r4
 802f19c:	4681      	mov	r9, r0
 802f19e:	f004 ff41 	bl	8034024 <__mcmp>
 802f1a2:	2800      	cmp	r0, #0
 802f1a4:	dcb0      	bgt.n	802f108 <_dtoa_r+0xa30>
 802f1a6:	d102      	bne.n	802f1ae <_dtoa_r+0xad6>
 802f1a8:	f018 0f01 	tst.w	r8, #1
 802f1ac:	d1ac      	bne.n	802f108 <_dtoa_r+0xa30>
 802f1ae:	4633      	mov	r3, r6
 802f1b0:	461e      	mov	r6, r3
 802f1b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802f1b6:	2a30      	cmp	r2, #48	@ 0x30
 802f1b8:	d0fa      	beq.n	802f1b0 <_dtoa_r+0xad8>
 802f1ba:	e5c3      	b.n	802ed44 <_dtoa_r+0x66c>
 802f1bc:	459a      	cmp	sl, r3
 802f1be:	d1a4      	bne.n	802f10a <_dtoa_r+0xa32>
 802f1c0:	9b04      	ldr	r3, [sp, #16]
 802f1c2:	3301      	adds	r3, #1
 802f1c4:	9304      	str	r3, [sp, #16]
 802f1c6:	2331      	movs	r3, #49	@ 0x31
 802f1c8:	f88a 3000 	strb.w	r3, [sl]
 802f1cc:	e5ba      	b.n	802ed44 <_dtoa_r+0x66c>
 802f1ce:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802f1d0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 802f22c <_dtoa_r+0xb54>
 802f1d4:	2b00      	cmp	r3, #0
 802f1d6:	f43f aab6 	beq.w	802e746 <_dtoa_r+0x6e>
 802f1da:	f10a 0308 	add.w	r3, sl, #8
 802f1de:	f7ff bab0 	b.w	802e742 <_dtoa_r+0x6a>
 802f1e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802f1e4:	2b01      	cmp	r3, #1
 802f1e6:	f77f ae3a 	ble.w	802ee5e <_dtoa_r+0x786>
 802f1ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802f1ec:	930a      	str	r3, [sp, #40]	@ 0x28
 802f1ee:	2001      	movs	r0, #1
 802f1f0:	e658      	b.n	802eea4 <_dtoa_r+0x7cc>
 802f1f2:	9b00      	ldr	r3, [sp, #0]
 802f1f4:	2b00      	cmp	r3, #0
 802f1f6:	f77f aed9 	ble.w	802efac <_dtoa_r+0x8d4>
 802f1fa:	4656      	mov	r6, sl
 802f1fc:	4621      	mov	r1, r4
 802f1fe:	4648      	mov	r0, r9
 802f200:	f7ff f9df 	bl	802e5c2 <quorem>
 802f204:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 802f208:	f806 8b01 	strb.w	r8, [r6], #1
 802f20c:	9b00      	ldr	r3, [sp, #0]
 802f20e:	eba6 020a 	sub.w	r2, r6, sl
 802f212:	4293      	cmp	r3, r2
 802f214:	ddb5      	ble.n	802f182 <_dtoa_r+0xaaa>
 802f216:	4649      	mov	r1, r9
 802f218:	2300      	movs	r3, #0
 802f21a:	220a      	movs	r2, #10
 802f21c:	4658      	mov	r0, fp
 802f21e:	f004 fcb9 	bl	8033b94 <__multadd>
 802f222:	4681      	mov	r9, r0
 802f224:	e7ea      	b.n	802f1fc <_dtoa_r+0xb24>
 802f226:	bf00      	nop
 802f228:	0803c906 	.word	0x0803c906
 802f22c:	0803c8f9 	.word	0x0803c8f9

0802f230 <_malloc_trim_r>:
 802f230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802f234:	4606      	mov	r6, r0
 802f236:	2008      	movs	r0, #8
 802f238:	4689      	mov	r9, r1
 802f23a:	f006 fb53 	bl	80358e4 <sysconf>
 802f23e:	4f24      	ldr	r7, [pc, #144]	@ (802f2d0 <_malloc_trim_r+0xa0>)
 802f240:	4680      	mov	r8, r0
 802f242:	4630      	mov	r0, r6
 802f244:	f004 fc6c 	bl	8033b20 <__malloc_lock>
 802f248:	68bb      	ldr	r3, [r7, #8]
 802f24a:	685d      	ldr	r5, [r3, #4]
 802f24c:	f025 0503 	bic.w	r5, r5, #3
 802f250:	f1a5 0411 	sub.w	r4, r5, #17
 802f254:	eba4 0409 	sub.w	r4, r4, r9
 802f258:	4444      	add	r4, r8
 802f25a:	fbb4 f4f8 	udiv	r4, r4, r8
 802f25e:	3c01      	subs	r4, #1
 802f260:	fb08 f404 	mul.w	r4, r8, r4
 802f264:	45a0      	cmp	r8, r4
 802f266:	dd05      	ble.n	802f274 <_malloc_trim_r+0x44>
 802f268:	4630      	mov	r0, r6
 802f26a:	f004 fc5f 	bl	8033b2c <__malloc_unlock>
 802f26e:	2000      	movs	r0, #0
 802f270:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802f274:	2100      	movs	r1, #0
 802f276:	4630      	mov	r0, r6
 802f278:	f006 fb24 	bl	80358c4 <_sbrk_r>
 802f27c:	68bb      	ldr	r3, [r7, #8]
 802f27e:	442b      	add	r3, r5
 802f280:	4298      	cmp	r0, r3
 802f282:	d1f1      	bne.n	802f268 <_malloc_trim_r+0x38>
 802f284:	4261      	negs	r1, r4
 802f286:	4630      	mov	r0, r6
 802f288:	f006 fb1c 	bl	80358c4 <_sbrk_r>
 802f28c:	3001      	adds	r0, #1
 802f28e:	d110      	bne.n	802f2b2 <_malloc_trim_r+0x82>
 802f290:	2100      	movs	r1, #0
 802f292:	4630      	mov	r0, r6
 802f294:	f006 fb16 	bl	80358c4 <_sbrk_r>
 802f298:	68ba      	ldr	r2, [r7, #8]
 802f29a:	1a83      	subs	r3, r0, r2
 802f29c:	2b0f      	cmp	r3, #15
 802f29e:	dde3      	ble.n	802f268 <_malloc_trim_r+0x38>
 802f2a0:	490c      	ldr	r1, [pc, #48]	@ (802f2d4 <_malloc_trim_r+0xa4>)
 802f2a2:	6809      	ldr	r1, [r1, #0]
 802f2a4:	1a40      	subs	r0, r0, r1
 802f2a6:	490c      	ldr	r1, [pc, #48]	@ (802f2d8 <_malloc_trim_r+0xa8>)
 802f2a8:	f043 0301 	orr.w	r3, r3, #1
 802f2ac:	6008      	str	r0, [r1, #0]
 802f2ae:	6053      	str	r3, [r2, #4]
 802f2b0:	e7da      	b.n	802f268 <_malloc_trim_r+0x38>
 802f2b2:	68bb      	ldr	r3, [r7, #8]
 802f2b4:	4a08      	ldr	r2, [pc, #32]	@ (802f2d8 <_malloc_trim_r+0xa8>)
 802f2b6:	1b2d      	subs	r5, r5, r4
 802f2b8:	f045 0501 	orr.w	r5, r5, #1
 802f2bc:	605d      	str	r5, [r3, #4]
 802f2be:	6813      	ldr	r3, [r2, #0]
 802f2c0:	4630      	mov	r0, r6
 802f2c2:	1b1b      	subs	r3, r3, r4
 802f2c4:	6013      	str	r3, [r2, #0]
 802f2c6:	f004 fc31 	bl	8033b2c <__malloc_unlock>
 802f2ca:	2001      	movs	r0, #1
 802f2cc:	e7d0      	b.n	802f270 <_malloc_trim_r+0x40>
 802f2ce:	bf00      	nop
 802f2d0:	2000040c 	.word	0x2000040c
 802f2d4:	20000404 	.word	0x20000404
 802f2d8:	2001a0e4 	.word	0x2001a0e4

0802f2dc <_free_r>:
 802f2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802f2de:	4604      	mov	r4, r0
 802f2e0:	460f      	mov	r7, r1
 802f2e2:	2900      	cmp	r1, #0
 802f2e4:	f000 80b1 	beq.w	802f44a <_free_r+0x16e>
 802f2e8:	f004 fc1a 	bl	8033b20 <__malloc_lock>
 802f2ec:	f857 2c04 	ldr.w	r2, [r7, #-4]
 802f2f0:	4d56      	ldr	r5, [pc, #344]	@ (802f44c <_free_r+0x170>)
 802f2f2:	f022 0001 	bic.w	r0, r2, #1
 802f2f6:	f1a7 0308 	sub.w	r3, r7, #8
 802f2fa:	eb03 0c00 	add.w	ip, r3, r0
 802f2fe:	68a9      	ldr	r1, [r5, #8]
 802f300:	f8dc 6004 	ldr.w	r6, [ip, #4]
 802f304:	4561      	cmp	r1, ip
 802f306:	f026 0603 	bic.w	r6, r6, #3
 802f30a:	f002 0201 	and.w	r2, r2, #1
 802f30e:	d11b      	bne.n	802f348 <_free_r+0x6c>
 802f310:	4406      	add	r6, r0
 802f312:	b93a      	cbnz	r2, 802f324 <_free_r+0x48>
 802f314:	f857 2c08 	ldr.w	r2, [r7, #-8]
 802f318:	1a9b      	subs	r3, r3, r2
 802f31a:	4416      	add	r6, r2
 802f31c:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 802f320:	60ca      	str	r2, [r1, #12]
 802f322:	6091      	str	r1, [r2, #8]
 802f324:	f046 0201 	orr.w	r2, r6, #1
 802f328:	605a      	str	r2, [r3, #4]
 802f32a:	60ab      	str	r3, [r5, #8]
 802f32c:	4b48      	ldr	r3, [pc, #288]	@ (802f450 <_free_r+0x174>)
 802f32e:	681b      	ldr	r3, [r3, #0]
 802f330:	42b3      	cmp	r3, r6
 802f332:	d804      	bhi.n	802f33e <_free_r+0x62>
 802f334:	4b47      	ldr	r3, [pc, #284]	@ (802f454 <_free_r+0x178>)
 802f336:	4620      	mov	r0, r4
 802f338:	6819      	ldr	r1, [r3, #0]
 802f33a:	f7ff ff79 	bl	802f230 <_malloc_trim_r>
 802f33e:	4620      	mov	r0, r4
 802f340:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802f344:	f004 bbf2 	b.w	8033b2c <__malloc_unlock>
 802f348:	f8cc 6004 	str.w	r6, [ip, #4]
 802f34c:	2a00      	cmp	r2, #0
 802f34e:	d138      	bne.n	802f3c2 <_free_r+0xe6>
 802f350:	f857 1c08 	ldr.w	r1, [r7, #-8]
 802f354:	1a5b      	subs	r3, r3, r1
 802f356:	4408      	add	r0, r1
 802f358:	6899      	ldr	r1, [r3, #8]
 802f35a:	f105 0708 	add.w	r7, r5, #8
 802f35e:	42b9      	cmp	r1, r7
 802f360:	d031      	beq.n	802f3c6 <_free_r+0xea>
 802f362:	68df      	ldr	r7, [r3, #12]
 802f364:	60cf      	str	r7, [r1, #12]
 802f366:	60b9      	str	r1, [r7, #8]
 802f368:	eb0c 0106 	add.w	r1, ip, r6
 802f36c:	6849      	ldr	r1, [r1, #4]
 802f36e:	07c9      	lsls	r1, r1, #31
 802f370:	d40b      	bmi.n	802f38a <_free_r+0xae>
 802f372:	f8dc 1008 	ldr.w	r1, [ip, #8]
 802f376:	4430      	add	r0, r6
 802f378:	bb3a      	cbnz	r2, 802f3ca <_free_r+0xee>
 802f37a:	4e37      	ldr	r6, [pc, #220]	@ (802f458 <_free_r+0x17c>)
 802f37c:	42b1      	cmp	r1, r6
 802f37e:	d124      	bne.n	802f3ca <_free_r+0xee>
 802f380:	e9c5 3304 	strd	r3, r3, [r5, #16]
 802f384:	e9c3 1102 	strd	r1, r1, [r3, #8]
 802f388:	2201      	movs	r2, #1
 802f38a:	f040 0101 	orr.w	r1, r0, #1
 802f38e:	6059      	str	r1, [r3, #4]
 802f390:	5018      	str	r0, [r3, r0]
 802f392:	2a00      	cmp	r2, #0
 802f394:	d1d3      	bne.n	802f33e <_free_r+0x62>
 802f396:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 802f39a:	d21b      	bcs.n	802f3d4 <_free_r+0xf8>
 802f39c:	08c2      	lsrs	r2, r0, #3
 802f39e:	2101      	movs	r1, #1
 802f3a0:	0940      	lsrs	r0, r0, #5
 802f3a2:	4081      	lsls	r1, r0
 802f3a4:	6868      	ldr	r0, [r5, #4]
 802f3a6:	3201      	adds	r2, #1
 802f3a8:	4301      	orrs	r1, r0
 802f3aa:	6069      	str	r1, [r5, #4]
 802f3ac:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 802f3b0:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 802f3b4:	3908      	subs	r1, #8
 802f3b6:	e9c3 0102 	strd	r0, r1, [r3, #8]
 802f3ba:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 802f3be:	60c3      	str	r3, [r0, #12]
 802f3c0:	e7bd      	b.n	802f33e <_free_r+0x62>
 802f3c2:	2200      	movs	r2, #0
 802f3c4:	e7d0      	b.n	802f368 <_free_r+0x8c>
 802f3c6:	2201      	movs	r2, #1
 802f3c8:	e7ce      	b.n	802f368 <_free_r+0x8c>
 802f3ca:	f8dc 600c 	ldr.w	r6, [ip, #12]
 802f3ce:	60ce      	str	r6, [r1, #12]
 802f3d0:	60b1      	str	r1, [r6, #8]
 802f3d2:	e7da      	b.n	802f38a <_free_r+0xae>
 802f3d4:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 802f3d8:	ea4f 2250 	mov.w	r2, r0, lsr #9
 802f3dc:	d214      	bcs.n	802f408 <_free_r+0x12c>
 802f3de:	0982      	lsrs	r2, r0, #6
 802f3e0:	3238      	adds	r2, #56	@ 0x38
 802f3e2:	1c51      	adds	r1, r2, #1
 802f3e4:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 802f3e8:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 802f3ec:	428e      	cmp	r6, r1
 802f3ee:	d125      	bne.n	802f43c <_free_r+0x160>
 802f3f0:	2001      	movs	r0, #1
 802f3f2:	1092      	asrs	r2, r2, #2
 802f3f4:	fa00 f202 	lsl.w	r2, r0, r2
 802f3f8:	6868      	ldr	r0, [r5, #4]
 802f3fa:	4302      	orrs	r2, r0
 802f3fc:	606a      	str	r2, [r5, #4]
 802f3fe:	e9c3 1602 	strd	r1, r6, [r3, #8]
 802f402:	60b3      	str	r3, [r6, #8]
 802f404:	60cb      	str	r3, [r1, #12]
 802f406:	e79a      	b.n	802f33e <_free_r+0x62>
 802f408:	2a14      	cmp	r2, #20
 802f40a:	d801      	bhi.n	802f410 <_free_r+0x134>
 802f40c:	325b      	adds	r2, #91	@ 0x5b
 802f40e:	e7e8      	b.n	802f3e2 <_free_r+0x106>
 802f410:	2a54      	cmp	r2, #84	@ 0x54
 802f412:	d802      	bhi.n	802f41a <_free_r+0x13e>
 802f414:	0b02      	lsrs	r2, r0, #12
 802f416:	326e      	adds	r2, #110	@ 0x6e
 802f418:	e7e3      	b.n	802f3e2 <_free_r+0x106>
 802f41a:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 802f41e:	d802      	bhi.n	802f426 <_free_r+0x14a>
 802f420:	0bc2      	lsrs	r2, r0, #15
 802f422:	3277      	adds	r2, #119	@ 0x77
 802f424:	e7dd      	b.n	802f3e2 <_free_r+0x106>
 802f426:	f240 5154 	movw	r1, #1364	@ 0x554
 802f42a:	428a      	cmp	r2, r1
 802f42c:	bf9a      	itte	ls
 802f42e:	0c82      	lsrls	r2, r0, #18
 802f430:	327c      	addls	r2, #124	@ 0x7c
 802f432:	227e      	movhi	r2, #126	@ 0x7e
 802f434:	e7d5      	b.n	802f3e2 <_free_r+0x106>
 802f436:	6889      	ldr	r1, [r1, #8]
 802f438:	428e      	cmp	r6, r1
 802f43a:	d004      	beq.n	802f446 <_free_r+0x16a>
 802f43c:	684a      	ldr	r2, [r1, #4]
 802f43e:	f022 0203 	bic.w	r2, r2, #3
 802f442:	4282      	cmp	r2, r0
 802f444:	d8f7      	bhi.n	802f436 <_free_r+0x15a>
 802f446:	68ce      	ldr	r6, [r1, #12]
 802f448:	e7d9      	b.n	802f3fe <_free_r+0x122>
 802f44a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802f44c:	2000040c 	.word	0x2000040c
 802f450:	20000408 	.word	0x20000408
 802f454:	2001a114 	.word	0x2001a114
 802f458:	20000414 	.word	0x20000414

0802f45c <_findenv_r>:
 802f45c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f460:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 802f4d0 <_findenv_r+0x74>
 802f464:	4606      	mov	r6, r0
 802f466:	4689      	mov	r9, r1
 802f468:	4617      	mov	r7, r2
 802f46a:	f006 fc31 	bl	8035cd0 <__env_lock>
 802f46e:	f8da 4000 	ldr.w	r4, [sl]
 802f472:	b134      	cbz	r4, 802f482 <_findenv_r+0x26>
 802f474:	464b      	mov	r3, r9
 802f476:	4698      	mov	r8, r3
 802f478:	f813 2b01 	ldrb.w	r2, [r3], #1
 802f47c:	b13a      	cbz	r2, 802f48e <_findenv_r+0x32>
 802f47e:	2a3d      	cmp	r2, #61	@ 0x3d
 802f480:	d1f9      	bne.n	802f476 <_findenv_r+0x1a>
 802f482:	4630      	mov	r0, r6
 802f484:	f006 fc2a 	bl	8035cdc <__env_unlock>
 802f488:	2000      	movs	r0, #0
 802f48a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f48e:	eba8 0809 	sub.w	r8, r8, r9
 802f492:	46a3      	mov	fp, r4
 802f494:	f854 0b04 	ldr.w	r0, [r4], #4
 802f498:	2800      	cmp	r0, #0
 802f49a:	d0f2      	beq.n	802f482 <_findenv_r+0x26>
 802f49c:	4642      	mov	r2, r8
 802f49e:	4649      	mov	r1, r9
 802f4a0:	f7fd fe13 	bl	802d0ca <strncmp>
 802f4a4:	2800      	cmp	r0, #0
 802f4a6:	d1f4      	bne.n	802f492 <_findenv_r+0x36>
 802f4a8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802f4ac:	eb03 0508 	add.w	r5, r3, r8
 802f4b0:	f813 3008 	ldrb.w	r3, [r3, r8]
 802f4b4:	2b3d      	cmp	r3, #61	@ 0x3d
 802f4b6:	d1ec      	bne.n	802f492 <_findenv_r+0x36>
 802f4b8:	f8da 3000 	ldr.w	r3, [sl]
 802f4bc:	ebab 0303 	sub.w	r3, fp, r3
 802f4c0:	109b      	asrs	r3, r3, #2
 802f4c2:	4630      	mov	r0, r6
 802f4c4:	603b      	str	r3, [r7, #0]
 802f4c6:	f006 fc09 	bl	8035cdc <__env_unlock>
 802f4ca:	1c68      	adds	r0, r5, #1
 802f4cc:	e7dd      	b.n	802f48a <_findenv_r+0x2e>
 802f4ce:	bf00      	nop
 802f4d0:	20000014 	.word	0x20000014

0802f4d4 <_getenv_r>:
 802f4d4:	b507      	push	{r0, r1, r2, lr}
 802f4d6:	aa01      	add	r2, sp, #4
 802f4d8:	f7ff ffc0 	bl	802f45c <_findenv_r>
 802f4dc:	b003      	add	sp, #12
 802f4de:	f85d fb04 	ldr.w	pc, [sp], #4

0802f4e2 <labs>:
 802f4e2:	2800      	cmp	r0, #0
 802f4e4:	bfb8      	it	lt
 802f4e6:	4240      	neglt	r0, r0
 802f4e8:	4770      	bx	lr
	...

0802f4ec <malloc>:
 802f4ec:	4b02      	ldr	r3, [pc, #8]	@ (802f4f8 <malloc+0xc>)
 802f4ee:	4601      	mov	r1, r0
 802f4f0:	6818      	ldr	r0, [r3, #0]
 802f4f2:	f000 b80b 	b.w	802f50c <_malloc_r>
 802f4f6:	bf00      	nop
 802f4f8:	200002d8 	.word	0x200002d8

0802f4fc <free>:
 802f4fc:	4b02      	ldr	r3, [pc, #8]	@ (802f508 <free+0xc>)
 802f4fe:	4601      	mov	r1, r0
 802f500:	6818      	ldr	r0, [r3, #0]
 802f502:	f7ff beeb 	b.w	802f2dc <_free_r>
 802f506:	bf00      	nop
 802f508:	200002d8 	.word	0x200002d8

0802f50c <_malloc_r>:
 802f50c:	f101 030b 	add.w	r3, r1, #11
 802f510:	2b16      	cmp	r3, #22
 802f512:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f516:	4605      	mov	r5, r0
 802f518:	d906      	bls.n	802f528 <_malloc_r+0x1c>
 802f51a:	f033 0707 	bics.w	r7, r3, #7
 802f51e:	d504      	bpl.n	802f52a <_malloc_r+0x1e>
 802f520:	230c      	movs	r3, #12
 802f522:	602b      	str	r3, [r5, #0]
 802f524:	2400      	movs	r4, #0
 802f526:	e1a3      	b.n	802f870 <_malloc_r+0x364>
 802f528:	2710      	movs	r7, #16
 802f52a:	42b9      	cmp	r1, r7
 802f52c:	d8f8      	bhi.n	802f520 <_malloc_r+0x14>
 802f52e:	4628      	mov	r0, r5
 802f530:	f004 faf6 	bl	8033b20 <__malloc_lock>
 802f534:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 802f538:	4eaf      	ldr	r6, [pc, #700]	@ (802f7f8 <_malloc_r+0x2ec>)
 802f53a:	d237      	bcs.n	802f5ac <_malloc_r+0xa0>
 802f53c:	f107 0208 	add.w	r2, r7, #8
 802f540:	4432      	add	r2, r6
 802f542:	f1a2 0108 	sub.w	r1, r2, #8
 802f546:	6854      	ldr	r4, [r2, #4]
 802f548:	428c      	cmp	r4, r1
 802f54a:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 802f54e:	d102      	bne.n	802f556 <_malloc_r+0x4a>
 802f550:	68d4      	ldr	r4, [r2, #12]
 802f552:	42a2      	cmp	r2, r4
 802f554:	d010      	beq.n	802f578 <_malloc_r+0x6c>
 802f556:	6863      	ldr	r3, [r4, #4]
 802f558:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 802f55c:	f023 0303 	bic.w	r3, r3, #3
 802f560:	60ca      	str	r2, [r1, #12]
 802f562:	4423      	add	r3, r4
 802f564:	6091      	str	r1, [r2, #8]
 802f566:	685a      	ldr	r2, [r3, #4]
 802f568:	f042 0201 	orr.w	r2, r2, #1
 802f56c:	605a      	str	r2, [r3, #4]
 802f56e:	4628      	mov	r0, r5
 802f570:	f004 fadc 	bl	8033b2c <__malloc_unlock>
 802f574:	3408      	adds	r4, #8
 802f576:	e17b      	b.n	802f870 <_malloc_r+0x364>
 802f578:	3302      	adds	r3, #2
 802f57a:	6934      	ldr	r4, [r6, #16]
 802f57c:	499f      	ldr	r1, [pc, #636]	@ (802f7fc <_malloc_r+0x2f0>)
 802f57e:	428c      	cmp	r4, r1
 802f580:	d077      	beq.n	802f672 <_malloc_r+0x166>
 802f582:	6862      	ldr	r2, [r4, #4]
 802f584:	f022 0c03 	bic.w	ip, r2, #3
 802f588:	ebac 0007 	sub.w	r0, ip, r7
 802f58c:	280f      	cmp	r0, #15
 802f58e:	dd48      	ble.n	802f622 <_malloc_r+0x116>
 802f590:	19e2      	adds	r2, r4, r7
 802f592:	f040 0301 	orr.w	r3, r0, #1
 802f596:	f047 0701 	orr.w	r7, r7, #1
 802f59a:	6067      	str	r7, [r4, #4]
 802f59c:	e9c6 2204 	strd	r2, r2, [r6, #16]
 802f5a0:	e9c2 1102 	strd	r1, r1, [r2, #8]
 802f5a4:	6053      	str	r3, [r2, #4]
 802f5a6:	f844 000c 	str.w	r0, [r4, ip]
 802f5aa:	e7e0      	b.n	802f56e <_malloc_r+0x62>
 802f5ac:	0a7b      	lsrs	r3, r7, #9
 802f5ae:	d02a      	beq.n	802f606 <_malloc_r+0xfa>
 802f5b0:	2b04      	cmp	r3, #4
 802f5b2:	d812      	bhi.n	802f5da <_malloc_r+0xce>
 802f5b4:	09bb      	lsrs	r3, r7, #6
 802f5b6:	3338      	adds	r3, #56	@ 0x38
 802f5b8:	1c5a      	adds	r2, r3, #1
 802f5ba:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 802f5be:	f1a2 0c08 	sub.w	ip, r2, #8
 802f5c2:	6854      	ldr	r4, [r2, #4]
 802f5c4:	4564      	cmp	r4, ip
 802f5c6:	d006      	beq.n	802f5d6 <_malloc_r+0xca>
 802f5c8:	6862      	ldr	r2, [r4, #4]
 802f5ca:	f022 0203 	bic.w	r2, r2, #3
 802f5ce:	1bd0      	subs	r0, r2, r7
 802f5d0:	280f      	cmp	r0, #15
 802f5d2:	dd1c      	ble.n	802f60e <_malloc_r+0x102>
 802f5d4:	3b01      	subs	r3, #1
 802f5d6:	3301      	adds	r3, #1
 802f5d8:	e7cf      	b.n	802f57a <_malloc_r+0x6e>
 802f5da:	2b14      	cmp	r3, #20
 802f5dc:	d801      	bhi.n	802f5e2 <_malloc_r+0xd6>
 802f5de:	335b      	adds	r3, #91	@ 0x5b
 802f5e0:	e7ea      	b.n	802f5b8 <_malloc_r+0xac>
 802f5e2:	2b54      	cmp	r3, #84	@ 0x54
 802f5e4:	d802      	bhi.n	802f5ec <_malloc_r+0xe0>
 802f5e6:	0b3b      	lsrs	r3, r7, #12
 802f5e8:	336e      	adds	r3, #110	@ 0x6e
 802f5ea:	e7e5      	b.n	802f5b8 <_malloc_r+0xac>
 802f5ec:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 802f5f0:	d802      	bhi.n	802f5f8 <_malloc_r+0xec>
 802f5f2:	0bfb      	lsrs	r3, r7, #15
 802f5f4:	3377      	adds	r3, #119	@ 0x77
 802f5f6:	e7df      	b.n	802f5b8 <_malloc_r+0xac>
 802f5f8:	f240 5254 	movw	r2, #1364	@ 0x554
 802f5fc:	4293      	cmp	r3, r2
 802f5fe:	d804      	bhi.n	802f60a <_malloc_r+0xfe>
 802f600:	0cbb      	lsrs	r3, r7, #18
 802f602:	337c      	adds	r3, #124	@ 0x7c
 802f604:	e7d8      	b.n	802f5b8 <_malloc_r+0xac>
 802f606:	233f      	movs	r3, #63	@ 0x3f
 802f608:	e7d6      	b.n	802f5b8 <_malloc_r+0xac>
 802f60a:	237e      	movs	r3, #126	@ 0x7e
 802f60c:	e7d4      	b.n	802f5b8 <_malloc_r+0xac>
 802f60e:	2800      	cmp	r0, #0
 802f610:	68e1      	ldr	r1, [r4, #12]
 802f612:	db04      	blt.n	802f61e <_malloc_r+0x112>
 802f614:	68a3      	ldr	r3, [r4, #8]
 802f616:	60d9      	str	r1, [r3, #12]
 802f618:	608b      	str	r3, [r1, #8]
 802f61a:	18a3      	adds	r3, r4, r2
 802f61c:	e7a3      	b.n	802f566 <_malloc_r+0x5a>
 802f61e:	460c      	mov	r4, r1
 802f620:	e7d0      	b.n	802f5c4 <_malloc_r+0xb8>
 802f622:	2800      	cmp	r0, #0
 802f624:	e9c6 1104 	strd	r1, r1, [r6, #16]
 802f628:	db07      	blt.n	802f63a <_malloc_r+0x12e>
 802f62a:	44a4      	add	ip, r4
 802f62c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802f630:	f043 0301 	orr.w	r3, r3, #1
 802f634:	f8cc 3004 	str.w	r3, [ip, #4]
 802f638:	e799      	b.n	802f56e <_malloc_r+0x62>
 802f63a:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 802f63e:	6870      	ldr	r0, [r6, #4]
 802f640:	f080 8095 	bcs.w	802f76e <_malloc_r+0x262>
 802f644:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 802f648:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 802f64c:	f04f 0c01 	mov.w	ip, #1
 802f650:	3201      	adds	r2, #1
 802f652:	fa0c fc0e 	lsl.w	ip, ip, lr
 802f656:	ea4c 0000 	orr.w	r0, ip, r0
 802f65a:	6070      	str	r0, [r6, #4]
 802f65c:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 802f660:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 802f664:	3808      	subs	r0, #8
 802f666:	e9c4 c002 	strd	ip, r0, [r4, #8]
 802f66a:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 802f66e:	f8cc 400c 	str.w	r4, [ip, #12]
 802f672:	1098      	asrs	r0, r3, #2
 802f674:	2201      	movs	r2, #1
 802f676:	4082      	lsls	r2, r0
 802f678:	6870      	ldr	r0, [r6, #4]
 802f67a:	4290      	cmp	r0, r2
 802f67c:	d326      	bcc.n	802f6cc <_malloc_r+0x1c0>
 802f67e:	4210      	tst	r0, r2
 802f680:	d106      	bne.n	802f690 <_malloc_r+0x184>
 802f682:	f023 0303 	bic.w	r3, r3, #3
 802f686:	0052      	lsls	r2, r2, #1
 802f688:	4210      	tst	r0, r2
 802f68a:	f103 0304 	add.w	r3, r3, #4
 802f68e:	d0fa      	beq.n	802f686 <_malloc_r+0x17a>
 802f690:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 802f694:	46c1      	mov	r9, r8
 802f696:	469e      	mov	lr, r3
 802f698:	f8d9 400c 	ldr.w	r4, [r9, #12]
 802f69c:	454c      	cmp	r4, r9
 802f69e:	f040 80b9 	bne.w	802f814 <_malloc_r+0x308>
 802f6a2:	f10e 0e01 	add.w	lr, lr, #1
 802f6a6:	f01e 0f03 	tst.w	lr, #3
 802f6aa:	f109 0908 	add.w	r9, r9, #8
 802f6ae:	d1f3      	bne.n	802f698 <_malloc_r+0x18c>
 802f6b0:	0798      	lsls	r0, r3, #30
 802f6b2:	f040 80e3 	bne.w	802f87c <_malloc_r+0x370>
 802f6b6:	6873      	ldr	r3, [r6, #4]
 802f6b8:	ea23 0302 	bic.w	r3, r3, r2
 802f6bc:	6073      	str	r3, [r6, #4]
 802f6be:	6870      	ldr	r0, [r6, #4]
 802f6c0:	0052      	lsls	r2, r2, #1
 802f6c2:	4290      	cmp	r0, r2
 802f6c4:	d302      	bcc.n	802f6cc <_malloc_r+0x1c0>
 802f6c6:	2a00      	cmp	r2, #0
 802f6c8:	f040 80e5 	bne.w	802f896 <_malloc_r+0x38a>
 802f6cc:	f8d6 a008 	ldr.w	sl, [r6, #8]
 802f6d0:	f8da 3004 	ldr.w	r3, [sl, #4]
 802f6d4:	f023 0903 	bic.w	r9, r3, #3
 802f6d8:	45b9      	cmp	r9, r7
 802f6da:	d304      	bcc.n	802f6e6 <_malloc_r+0x1da>
 802f6dc:	eba9 0207 	sub.w	r2, r9, r7
 802f6e0:	2a0f      	cmp	r2, #15
 802f6e2:	f300 8141 	bgt.w	802f968 <_malloc_r+0x45c>
 802f6e6:	4b46      	ldr	r3, [pc, #280]	@ (802f800 <_malloc_r+0x2f4>)
 802f6e8:	6819      	ldr	r1, [r3, #0]
 802f6ea:	3110      	adds	r1, #16
 802f6ec:	4439      	add	r1, r7
 802f6ee:	2008      	movs	r0, #8
 802f6f0:	9101      	str	r1, [sp, #4]
 802f6f2:	f006 f8f7 	bl	80358e4 <sysconf>
 802f6f6:	4a43      	ldr	r2, [pc, #268]	@ (802f804 <_malloc_r+0x2f8>)
 802f6f8:	9901      	ldr	r1, [sp, #4]
 802f6fa:	6813      	ldr	r3, [r2, #0]
 802f6fc:	3301      	adds	r3, #1
 802f6fe:	bf1f      	itttt	ne
 802f700:	f101 31ff 	addne.w	r1, r1, #4294967295	@ 0xffffffff
 802f704:	1809      	addne	r1, r1, r0
 802f706:	4243      	negne	r3, r0
 802f708:	4019      	andne	r1, r3
 802f70a:	4680      	mov	r8, r0
 802f70c:	4628      	mov	r0, r5
 802f70e:	9101      	str	r1, [sp, #4]
 802f710:	f006 f8d8 	bl	80358c4 <_sbrk_r>
 802f714:	1c42      	adds	r2, r0, #1
 802f716:	eb0a 0b09 	add.w	fp, sl, r9
 802f71a:	4604      	mov	r4, r0
 802f71c:	f000 80f7 	beq.w	802f90e <_malloc_r+0x402>
 802f720:	4583      	cmp	fp, r0
 802f722:	9901      	ldr	r1, [sp, #4]
 802f724:	4a37      	ldr	r2, [pc, #220]	@ (802f804 <_malloc_r+0x2f8>)
 802f726:	d902      	bls.n	802f72e <_malloc_r+0x222>
 802f728:	45b2      	cmp	sl, r6
 802f72a:	f040 80f0 	bne.w	802f90e <_malloc_r+0x402>
 802f72e:	4b36      	ldr	r3, [pc, #216]	@ (802f808 <_malloc_r+0x2fc>)
 802f730:	6818      	ldr	r0, [r3, #0]
 802f732:	45a3      	cmp	fp, r4
 802f734:	eb00 0e01 	add.w	lr, r0, r1
 802f738:	f8c3 e000 	str.w	lr, [r3]
 802f73c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 802f740:	f040 80ab 	bne.w	802f89a <_malloc_r+0x38e>
 802f744:	ea1b 0f0c 	tst.w	fp, ip
 802f748:	f040 80a7 	bne.w	802f89a <_malloc_r+0x38e>
 802f74c:	68b2      	ldr	r2, [r6, #8]
 802f74e:	4449      	add	r1, r9
 802f750:	f041 0101 	orr.w	r1, r1, #1
 802f754:	6051      	str	r1, [r2, #4]
 802f756:	4a2d      	ldr	r2, [pc, #180]	@ (802f80c <_malloc_r+0x300>)
 802f758:	681b      	ldr	r3, [r3, #0]
 802f75a:	6811      	ldr	r1, [r2, #0]
 802f75c:	428b      	cmp	r3, r1
 802f75e:	bf88      	it	hi
 802f760:	6013      	strhi	r3, [r2, #0]
 802f762:	4a2b      	ldr	r2, [pc, #172]	@ (802f810 <_malloc_r+0x304>)
 802f764:	6811      	ldr	r1, [r2, #0]
 802f766:	428b      	cmp	r3, r1
 802f768:	bf88      	it	hi
 802f76a:	6013      	strhi	r3, [r2, #0]
 802f76c:	e0cf      	b.n	802f90e <_malloc_r+0x402>
 802f76e:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 802f772:	ea4f 225c 	mov.w	r2, ip, lsr #9
 802f776:	d218      	bcs.n	802f7aa <_malloc_r+0x29e>
 802f778:	ea4f 129c 	mov.w	r2, ip, lsr #6
 802f77c:	3238      	adds	r2, #56	@ 0x38
 802f77e:	f102 0e01 	add.w	lr, r2, #1
 802f782:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 802f786:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 802f78a:	45f0      	cmp	r8, lr
 802f78c:	d12b      	bne.n	802f7e6 <_malloc_r+0x2da>
 802f78e:	1092      	asrs	r2, r2, #2
 802f790:	f04f 0c01 	mov.w	ip, #1
 802f794:	fa0c f202 	lsl.w	r2, ip, r2
 802f798:	4302      	orrs	r2, r0
 802f79a:	6072      	str	r2, [r6, #4]
 802f79c:	e9c4 e802 	strd	lr, r8, [r4, #8]
 802f7a0:	f8c8 4008 	str.w	r4, [r8, #8]
 802f7a4:	f8ce 400c 	str.w	r4, [lr, #12]
 802f7a8:	e763      	b.n	802f672 <_malloc_r+0x166>
 802f7aa:	2a14      	cmp	r2, #20
 802f7ac:	d801      	bhi.n	802f7b2 <_malloc_r+0x2a6>
 802f7ae:	325b      	adds	r2, #91	@ 0x5b
 802f7b0:	e7e5      	b.n	802f77e <_malloc_r+0x272>
 802f7b2:	2a54      	cmp	r2, #84	@ 0x54
 802f7b4:	d803      	bhi.n	802f7be <_malloc_r+0x2b2>
 802f7b6:	ea4f 321c 	mov.w	r2, ip, lsr #12
 802f7ba:	326e      	adds	r2, #110	@ 0x6e
 802f7bc:	e7df      	b.n	802f77e <_malloc_r+0x272>
 802f7be:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 802f7c2:	d803      	bhi.n	802f7cc <_malloc_r+0x2c0>
 802f7c4:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 802f7c8:	3277      	adds	r2, #119	@ 0x77
 802f7ca:	e7d8      	b.n	802f77e <_malloc_r+0x272>
 802f7cc:	f240 5e54 	movw	lr, #1364	@ 0x554
 802f7d0:	4572      	cmp	r2, lr
 802f7d2:	bf9a      	itte	ls
 802f7d4:	ea4f 429c 	movls.w	r2, ip, lsr #18
 802f7d8:	327c      	addls	r2, #124	@ 0x7c
 802f7da:	227e      	movhi	r2, #126	@ 0x7e
 802f7dc:	e7cf      	b.n	802f77e <_malloc_r+0x272>
 802f7de:	f8de e008 	ldr.w	lr, [lr, #8]
 802f7e2:	45f0      	cmp	r8, lr
 802f7e4:	d005      	beq.n	802f7f2 <_malloc_r+0x2e6>
 802f7e6:	f8de 2004 	ldr.w	r2, [lr, #4]
 802f7ea:	f022 0203 	bic.w	r2, r2, #3
 802f7ee:	4562      	cmp	r2, ip
 802f7f0:	d8f5      	bhi.n	802f7de <_malloc_r+0x2d2>
 802f7f2:	f8de 800c 	ldr.w	r8, [lr, #12]
 802f7f6:	e7d1      	b.n	802f79c <_malloc_r+0x290>
 802f7f8:	2000040c 	.word	0x2000040c
 802f7fc:	20000414 	.word	0x20000414
 802f800:	2001a114 	.word	0x2001a114
 802f804:	20000404 	.word	0x20000404
 802f808:	2001a0e4 	.word	0x2001a0e4
 802f80c:	2001a110 	.word	0x2001a110
 802f810:	2001a10c 	.word	0x2001a10c
 802f814:	6860      	ldr	r0, [r4, #4]
 802f816:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 802f81a:	f020 0003 	bic.w	r0, r0, #3
 802f81e:	eba0 0a07 	sub.w	sl, r0, r7
 802f822:	f1ba 0f0f 	cmp.w	sl, #15
 802f826:	dd12      	ble.n	802f84e <_malloc_r+0x342>
 802f828:	68a3      	ldr	r3, [r4, #8]
 802f82a:	19e2      	adds	r2, r4, r7
 802f82c:	f047 0701 	orr.w	r7, r7, #1
 802f830:	6067      	str	r7, [r4, #4]
 802f832:	f8c3 c00c 	str.w	ip, [r3, #12]
 802f836:	f8cc 3008 	str.w	r3, [ip, #8]
 802f83a:	f04a 0301 	orr.w	r3, sl, #1
 802f83e:	e9c6 2204 	strd	r2, r2, [r6, #16]
 802f842:	e9c2 1102 	strd	r1, r1, [r2, #8]
 802f846:	6053      	str	r3, [r2, #4]
 802f848:	f844 a000 	str.w	sl, [r4, r0]
 802f84c:	e68f      	b.n	802f56e <_malloc_r+0x62>
 802f84e:	f1ba 0f00 	cmp.w	sl, #0
 802f852:	db11      	blt.n	802f878 <_malloc_r+0x36c>
 802f854:	4420      	add	r0, r4
 802f856:	6843      	ldr	r3, [r0, #4]
 802f858:	f043 0301 	orr.w	r3, r3, #1
 802f85c:	6043      	str	r3, [r0, #4]
 802f85e:	f854 3f08 	ldr.w	r3, [r4, #8]!
 802f862:	4628      	mov	r0, r5
 802f864:	f8c3 c00c 	str.w	ip, [r3, #12]
 802f868:	f8cc 3008 	str.w	r3, [ip, #8]
 802f86c:	f004 f95e 	bl	8033b2c <__malloc_unlock>
 802f870:	4620      	mov	r0, r4
 802f872:	b003      	add	sp, #12
 802f874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f878:	4664      	mov	r4, ip
 802f87a:	e70f      	b.n	802f69c <_malloc_r+0x190>
 802f87c:	f858 0908 	ldr.w	r0, [r8], #-8
 802f880:	4540      	cmp	r0, r8
 802f882:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 802f886:	f43f af13 	beq.w	802f6b0 <_malloc_r+0x1a4>
 802f88a:	e718      	b.n	802f6be <_malloc_r+0x1b2>
 802f88c:	3304      	adds	r3, #4
 802f88e:	0052      	lsls	r2, r2, #1
 802f890:	4210      	tst	r0, r2
 802f892:	d0fb      	beq.n	802f88c <_malloc_r+0x380>
 802f894:	e6fc      	b.n	802f690 <_malloc_r+0x184>
 802f896:	4673      	mov	r3, lr
 802f898:	e7fa      	b.n	802f890 <_malloc_r+0x384>
 802f89a:	6810      	ldr	r0, [r2, #0]
 802f89c:	3001      	adds	r0, #1
 802f89e:	bf1b      	ittet	ne
 802f8a0:	eba4 0b0b 	subne.w	fp, r4, fp
 802f8a4:	eb0b 020e 	addne.w	r2, fp, lr
 802f8a8:	6014      	streq	r4, [r2, #0]
 802f8aa:	601a      	strne	r2, [r3, #0]
 802f8ac:	f014 0b07 	ands.w	fp, r4, #7
 802f8b0:	bf1a      	itte	ne
 802f8b2:	f1cb 0008 	rsbne	r0, fp, #8
 802f8b6:	1824      	addne	r4, r4, r0
 802f8b8:	4658      	moveq	r0, fp
 802f8ba:	1862      	adds	r2, r4, r1
 802f8bc:	ea02 010c 	and.w	r1, r2, ip
 802f8c0:	4480      	add	r8, r0
 802f8c2:	eba8 0801 	sub.w	r8, r8, r1
 802f8c6:	ea08 080c 	and.w	r8, r8, ip
 802f8ca:	4641      	mov	r1, r8
 802f8cc:	4628      	mov	r0, r5
 802f8ce:	9201      	str	r2, [sp, #4]
 802f8d0:	f005 fff8 	bl	80358c4 <_sbrk_r>
 802f8d4:	1c43      	adds	r3, r0, #1
 802f8d6:	9a01      	ldr	r2, [sp, #4]
 802f8d8:	4b28      	ldr	r3, [pc, #160]	@ (802f97c <_malloc_r+0x470>)
 802f8da:	d107      	bne.n	802f8ec <_malloc_r+0x3e0>
 802f8dc:	f1bb 0f00 	cmp.w	fp, #0
 802f8e0:	d023      	beq.n	802f92a <_malloc_r+0x41e>
 802f8e2:	f1ab 0008 	sub.w	r0, fp, #8
 802f8e6:	4410      	add	r0, r2
 802f8e8:	f04f 0800 	mov.w	r8, #0
 802f8ec:	681a      	ldr	r2, [r3, #0]
 802f8ee:	60b4      	str	r4, [r6, #8]
 802f8f0:	1b00      	subs	r0, r0, r4
 802f8f2:	4440      	add	r0, r8
 802f8f4:	4442      	add	r2, r8
 802f8f6:	f040 0001 	orr.w	r0, r0, #1
 802f8fa:	45b2      	cmp	sl, r6
 802f8fc:	601a      	str	r2, [r3, #0]
 802f8fe:	6060      	str	r0, [r4, #4]
 802f900:	f43f af29 	beq.w	802f756 <_malloc_r+0x24a>
 802f904:	f1b9 0f0f 	cmp.w	r9, #15
 802f908:	d812      	bhi.n	802f930 <_malloc_r+0x424>
 802f90a:	2301      	movs	r3, #1
 802f90c:	6063      	str	r3, [r4, #4]
 802f90e:	68b3      	ldr	r3, [r6, #8]
 802f910:	685b      	ldr	r3, [r3, #4]
 802f912:	f023 0303 	bic.w	r3, r3, #3
 802f916:	42bb      	cmp	r3, r7
 802f918:	eba3 0207 	sub.w	r2, r3, r7
 802f91c:	d301      	bcc.n	802f922 <_malloc_r+0x416>
 802f91e:	2a0f      	cmp	r2, #15
 802f920:	dc22      	bgt.n	802f968 <_malloc_r+0x45c>
 802f922:	4628      	mov	r0, r5
 802f924:	f004 f902 	bl	8033b2c <__malloc_unlock>
 802f928:	e5fc      	b.n	802f524 <_malloc_r+0x18>
 802f92a:	4610      	mov	r0, r2
 802f92c:	46d8      	mov	r8, fp
 802f92e:	e7dd      	b.n	802f8ec <_malloc_r+0x3e0>
 802f930:	f8da 2004 	ldr.w	r2, [sl, #4]
 802f934:	f1a9 090c 	sub.w	r9, r9, #12
 802f938:	f029 0907 	bic.w	r9, r9, #7
 802f93c:	f002 0201 	and.w	r2, r2, #1
 802f940:	ea42 0209 	orr.w	r2, r2, r9
 802f944:	f8ca 2004 	str.w	r2, [sl, #4]
 802f948:	2105      	movs	r1, #5
 802f94a:	eb0a 0209 	add.w	r2, sl, r9
 802f94e:	f1b9 0f0f 	cmp.w	r9, #15
 802f952:	e9c2 1101 	strd	r1, r1, [r2, #4]
 802f956:	f67f aefe 	bls.w	802f756 <_malloc_r+0x24a>
 802f95a:	f10a 0108 	add.w	r1, sl, #8
 802f95e:	4628      	mov	r0, r5
 802f960:	f7ff fcbc 	bl	802f2dc <_free_r>
 802f964:	4b05      	ldr	r3, [pc, #20]	@ (802f97c <_malloc_r+0x470>)
 802f966:	e6f6      	b.n	802f756 <_malloc_r+0x24a>
 802f968:	68b4      	ldr	r4, [r6, #8]
 802f96a:	f047 0301 	orr.w	r3, r7, #1
 802f96e:	4427      	add	r7, r4
 802f970:	f042 0201 	orr.w	r2, r2, #1
 802f974:	6063      	str	r3, [r4, #4]
 802f976:	60b7      	str	r7, [r6, #8]
 802f978:	607a      	str	r2, [r7, #4]
 802f97a:	e5f8      	b.n	802f56e <_malloc_r+0x62>
 802f97c:	2001a0e4 	.word	0x2001a0e4

0802f980 <__ascii_mbtowc>:
 802f980:	b082      	sub	sp, #8
 802f982:	b901      	cbnz	r1, 802f986 <__ascii_mbtowc+0x6>
 802f984:	a901      	add	r1, sp, #4
 802f986:	b142      	cbz	r2, 802f99a <__ascii_mbtowc+0x1a>
 802f988:	b14b      	cbz	r3, 802f99e <__ascii_mbtowc+0x1e>
 802f98a:	7813      	ldrb	r3, [r2, #0]
 802f98c:	600b      	str	r3, [r1, #0]
 802f98e:	7812      	ldrb	r2, [r2, #0]
 802f990:	1e10      	subs	r0, r2, #0
 802f992:	bf18      	it	ne
 802f994:	2001      	movne	r0, #1
 802f996:	b002      	add	sp, #8
 802f998:	4770      	bx	lr
 802f99a:	4610      	mov	r0, r2
 802f99c:	e7fb      	b.n	802f996 <__ascii_mbtowc+0x16>
 802f99e:	f06f 0001 	mvn.w	r0, #1
 802f9a2:	e7f8      	b.n	802f996 <__ascii_mbtowc+0x16>

0802f9a4 <siscanf>:
 802f9a4:	b40e      	push	{r1, r2, r3}
 802f9a6:	b530      	push	{r4, r5, lr}
 802f9a8:	b09c      	sub	sp, #112	@ 0x70
 802f9aa:	ac1f      	add	r4, sp, #124	@ 0x7c
 802f9ac:	f44f 7201 	mov.w	r2, #516	@ 0x204
 802f9b0:	f854 5b04 	ldr.w	r5, [r4], #4
 802f9b4:	f8ad 2014 	strh.w	r2, [sp, #20]
 802f9b8:	9002      	str	r0, [sp, #8]
 802f9ba:	9006      	str	r0, [sp, #24]
 802f9bc:	f7e0 fc70 	bl	80102a0 <strlen>
 802f9c0:	4b0b      	ldr	r3, [pc, #44]	@ (802f9f0 <siscanf+0x4c>)
 802f9c2:	9003      	str	r0, [sp, #12]
 802f9c4:	9007      	str	r0, [sp, #28]
 802f9c6:	930a      	str	r3, [sp, #40]	@ 0x28
 802f9c8:	480a      	ldr	r0, [pc, #40]	@ (802f9f4 <siscanf+0x50>)
 802f9ca:	9401      	str	r4, [sp, #4]
 802f9cc:	2300      	movs	r3, #0
 802f9ce:	930e      	str	r3, [sp, #56]	@ 0x38
 802f9d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 802f9d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802f9d6:	f8ad 3016 	strh.w	r3, [sp, #22]
 802f9da:	462a      	mov	r2, r5
 802f9dc:	4623      	mov	r3, r4
 802f9de:	a902      	add	r1, sp, #8
 802f9e0:	6800      	ldr	r0, [r0, #0]
 802f9e2:	f000 fd99 	bl	8030518 <__ssvfiscanf_r>
 802f9e6:	b01c      	add	sp, #112	@ 0x70
 802f9e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802f9ec:	b003      	add	sp, #12
 802f9ee:	4770      	bx	lr
 802f9f0:	0802c993 	.word	0x0802c993
 802f9f4:	200002d8 	.word	0x200002d8

0802f9f8 <sniprintf>:
 802f9f8:	b40c      	push	{r2, r3}
 802f9fa:	b530      	push	{r4, r5, lr}
 802f9fc:	4b17      	ldr	r3, [pc, #92]	@ (802fa5c <sniprintf+0x64>)
 802f9fe:	1e0c      	subs	r4, r1, #0
 802fa00:	681d      	ldr	r5, [r3, #0]
 802fa02:	b09d      	sub	sp, #116	@ 0x74
 802fa04:	da08      	bge.n	802fa18 <sniprintf+0x20>
 802fa06:	238b      	movs	r3, #139	@ 0x8b
 802fa08:	602b      	str	r3, [r5, #0]
 802fa0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802fa0e:	b01d      	add	sp, #116	@ 0x74
 802fa10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802fa14:	b002      	add	sp, #8
 802fa16:	4770      	bx	lr
 802fa18:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802fa1c:	f8ad 3014 	strh.w	r3, [sp, #20]
 802fa20:	bf14      	ite	ne
 802fa22:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802fa26:	4623      	moveq	r3, r4
 802fa28:	9304      	str	r3, [sp, #16]
 802fa2a:	9307      	str	r3, [sp, #28]
 802fa2c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802fa30:	9002      	str	r0, [sp, #8]
 802fa32:	9006      	str	r0, [sp, #24]
 802fa34:	f8ad 3016 	strh.w	r3, [sp, #22]
 802fa38:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802fa3a:	ab21      	add	r3, sp, #132	@ 0x84
 802fa3c:	a902      	add	r1, sp, #8
 802fa3e:	4628      	mov	r0, r5
 802fa40:	9301      	str	r3, [sp, #4]
 802fa42:	f000 f88b 	bl	802fb5c <_svfiprintf_r>
 802fa46:	1c43      	adds	r3, r0, #1
 802fa48:	bfbc      	itt	lt
 802fa4a:	238b      	movlt	r3, #139	@ 0x8b
 802fa4c:	602b      	strlt	r3, [r5, #0]
 802fa4e:	2c00      	cmp	r4, #0
 802fa50:	d0dd      	beq.n	802fa0e <sniprintf+0x16>
 802fa52:	9b02      	ldr	r3, [sp, #8]
 802fa54:	2200      	movs	r2, #0
 802fa56:	701a      	strb	r2, [r3, #0]
 802fa58:	e7d9      	b.n	802fa0e <sniprintf+0x16>
 802fa5a:	bf00      	nop
 802fa5c:	200002d8 	.word	0x200002d8

0802fa60 <__ssprint_r>:
 802fa60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802fa64:	6893      	ldr	r3, [r2, #8]
 802fa66:	f8d2 b000 	ldr.w	fp, [r2]
 802fa6a:	9001      	str	r0, [sp, #4]
 802fa6c:	460c      	mov	r4, r1
 802fa6e:	4617      	mov	r7, r2
 802fa70:	2b00      	cmp	r3, #0
 802fa72:	d157      	bne.n	802fb24 <__ssprint_r+0xc4>
 802fa74:	2000      	movs	r0, #0
 802fa76:	2300      	movs	r3, #0
 802fa78:	607b      	str	r3, [r7, #4]
 802fa7a:	b003      	add	sp, #12
 802fa7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802fa80:	e9db a800 	ldrd	sl, r8, [fp]
 802fa84:	f10b 0b08 	add.w	fp, fp, #8
 802fa88:	68a6      	ldr	r6, [r4, #8]
 802fa8a:	6820      	ldr	r0, [r4, #0]
 802fa8c:	f1b8 0f00 	cmp.w	r8, #0
 802fa90:	d0f6      	beq.n	802fa80 <__ssprint_r+0x20>
 802fa92:	45b0      	cmp	r8, r6
 802fa94:	d32e      	bcc.n	802faf4 <__ssprint_r+0x94>
 802fa96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802fa9a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 802fa9e:	d029      	beq.n	802faf4 <__ssprint_r+0x94>
 802faa0:	6921      	ldr	r1, [r4, #16]
 802faa2:	6965      	ldr	r5, [r4, #20]
 802faa4:	eba0 0901 	sub.w	r9, r0, r1
 802faa8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802faac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802fab0:	f109 0001 	add.w	r0, r9, #1
 802fab4:	106d      	asrs	r5, r5, #1
 802fab6:	4440      	add	r0, r8
 802fab8:	4285      	cmp	r5, r0
 802faba:	bf38      	it	cc
 802fabc:	4605      	movcc	r5, r0
 802fabe:	0553      	lsls	r3, r2, #21
 802fac0:	d534      	bpl.n	802fb2c <__ssprint_r+0xcc>
 802fac2:	9801      	ldr	r0, [sp, #4]
 802fac4:	4629      	mov	r1, r5
 802fac6:	f7ff fd21 	bl	802f50c <_malloc_r>
 802faca:	4606      	mov	r6, r0
 802facc:	2800      	cmp	r0, #0
 802face:	d038      	beq.n	802fb42 <__ssprint_r+0xe2>
 802fad0:	464a      	mov	r2, r9
 802fad2:	6921      	ldr	r1, [r4, #16]
 802fad4:	f7fe fd00 	bl	802e4d8 <memcpy>
 802fad8:	89a2      	ldrh	r2, [r4, #12]
 802fada:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 802fade:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 802fae2:	81a2      	strh	r2, [r4, #12]
 802fae4:	6126      	str	r6, [r4, #16]
 802fae6:	6165      	str	r5, [r4, #20]
 802fae8:	444e      	add	r6, r9
 802faea:	eba5 0509 	sub.w	r5, r5, r9
 802faee:	6026      	str	r6, [r4, #0]
 802faf0:	60a5      	str	r5, [r4, #8]
 802faf2:	4646      	mov	r6, r8
 802faf4:	4546      	cmp	r6, r8
 802faf6:	bf28      	it	cs
 802faf8:	4646      	movcs	r6, r8
 802fafa:	4632      	mov	r2, r6
 802fafc:	4651      	mov	r1, sl
 802fafe:	6820      	ldr	r0, [r4, #0]
 802fb00:	f7fd fa94 	bl	802d02c <memmove>
 802fb04:	68a2      	ldr	r2, [r4, #8]
 802fb06:	1b92      	subs	r2, r2, r6
 802fb08:	60a2      	str	r2, [r4, #8]
 802fb0a:	6822      	ldr	r2, [r4, #0]
 802fb0c:	4432      	add	r2, r6
 802fb0e:	6022      	str	r2, [r4, #0]
 802fb10:	68ba      	ldr	r2, [r7, #8]
 802fb12:	eba2 0308 	sub.w	r3, r2, r8
 802fb16:	44c2      	add	sl, r8
 802fb18:	60bb      	str	r3, [r7, #8]
 802fb1a:	2b00      	cmp	r3, #0
 802fb1c:	d0aa      	beq.n	802fa74 <__ssprint_r+0x14>
 802fb1e:	f04f 0800 	mov.w	r8, #0
 802fb22:	e7b1      	b.n	802fa88 <__ssprint_r+0x28>
 802fb24:	f04f 0a00 	mov.w	sl, #0
 802fb28:	46d0      	mov	r8, sl
 802fb2a:	e7ad      	b.n	802fa88 <__ssprint_r+0x28>
 802fb2c:	9801      	ldr	r0, [sp, #4]
 802fb2e:	462a      	mov	r2, r5
 802fb30:	f004 fcfc 	bl	803452c <_realloc_r>
 802fb34:	4606      	mov	r6, r0
 802fb36:	2800      	cmp	r0, #0
 802fb38:	d1d4      	bne.n	802fae4 <__ssprint_r+0x84>
 802fb3a:	6921      	ldr	r1, [r4, #16]
 802fb3c:	9801      	ldr	r0, [sp, #4]
 802fb3e:	f7ff fbcd 	bl	802f2dc <_free_r>
 802fb42:	9a01      	ldr	r2, [sp, #4]
 802fb44:	230c      	movs	r3, #12
 802fb46:	6013      	str	r3, [r2, #0]
 802fb48:	89a3      	ldrh	r3, [r4, #12]
 802fb4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802fb4e:	81a3      	strh	r3, [r4, #12]
 802fb50:	2300      	movs	r3, #0
 802fb52:	60bb      	str	r3, [r7, #8]
 802fb54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802fb58:	e78d      	b.n	802fa76 <__ssprint_r+0x16>
	...

0802fb5c <_svfiprintf_r>:
 802fb5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802fb60:	461d      	mov	r5, r3
 802fb62:	898b      	ldrh	r3, [r1, #12]
 802fb64:	b0bb      	sub	sp, #236	@ 0xec
 802fb66:	468b      	mov	fp, r1
 802fb68:	0619      	lsls	r1, r3, #24
 802fb6a:	9001      	str	r0, [sp, #4]
 802fb6c:	9202      	str	r2, [sp, #8]
 802fb6e:	d514      	bpl.n	802fb9a <_svfiprintf_r+0x3e>
 802fb70:	f8db 3010 	ldr.w	r3, [fp, #16]
 802fb74:	b98b      	cbnz	r3, 802fb9a <_svfiprintf_r+0x3e>
 802fb76:	2140      	movs	r1, #64	@ 0x40
 802fb78:	f7ff fcc8 	bl	802f50c <_malloc_r>
 802fb7c:	f8cb 0000 	str.w	r0, [fp]
 802fb80:	f8cb 0010 	str.w	r0, [fp, #16]
 802fb84:	b930      	cbnz	r0, 802fb94 <_svfiprintf_r+0x38>
 802fb86:	9a01      	ldr	r2, [sp, #4]
 802fb88:	230c      	movs	r3, #12
 802fb8a:	6013      	str	r3, [r2, #0]
 802fb8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802fb90:	9304      	str	r3, [sp, #16]
 802fb92:	e3df      	b.n	8030354 <_svfiprintf_r+0x7f8>
 802fb94:	2340      	movs	r3, #64	@ 0x40
 802fb96:	f8cb 3014 	str.w	r3, [fp, #20]
 802fb9a:	2300      	movs	r3, #0
 802fb9c:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 802fba0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 802fba4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 802fba8:	ae11      	add	r6, sp, #68	@ 0x44
 802fbaa:	960e      	str	r6, [sp, #56]	@ 0x38
 802fbac:	9304      	str	r3, [sp, #16]
 802fbae:	9b02      	ldr	r3, [sp, #8]
 802fbb0:	461c      	mov	r4, r3
 802fbb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 802fbb6:	b10a      	cbz	r2, 802fbbc <_svfiprintf_r+0x60>
 802fbb8:	2a25      	cmp	r2, #37	@ 0x25
 802fbba:	d1f9      	bne.n	802fbb0 <_svfiprintf_r+0x54>
 802fbbc:	9a02      	ldr	r2, [sp, #8]
 802fbbe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802fbc0:	1aa7      	subs	r7, r4, r2
 802fbc2:	d00c      	beq.n	802fbde <_svfiprintf_r+0x82>
 802fbc4:	443b      	add	r3, r7
 802fbc6:	9310      	str	r3, [sp, #64]	@ 0x40
 802fbc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802fbca:	3301      	adds	r3, #1
 802fbcc:	2b07      	cmp	r3, #7
 802fbce:	e9c6 2700 	strd	r2, r7, [r6]
 802fbd2:	930f      	str	r3, [sp, #60]	@ 0x3c
 802fbd4:	dc76      	bgt.n	802fcc4 <_svfiprintf_r+0x168>
 802fbd6:	3608      	adds	r6, #8
 802fbd8:	9b04      	ldr	r3, [sp, #16]
 802fbda:	443b      	add	r3, r7
 802fbdc:	9304      	str	r3, [sp, #16]
 802fbde:	7823      	ldrb	r3, [r4, #0]
 802fbe0:	2b00      	cmp	r3, #0
 802fbe2:	f000 83ce 	beq.w	8030382 <_svfiprintf_r+0x826>
 802fbe6:	2300      	movs	r3, #0
 802fbe8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802fbec:	3401      	adds	r4, #1
 802fbee:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802fbf2:	9200      	str	r2, [sp, #0]
 802fbf4:	9303      	str	r3, [sp, #12]
 802fbf6:	4699      	mov	r9, r3
 802fbf8:	4622      	mov	r2, r4
 802fbfa:	f812 3b01 	ldrb.w	r3, [r2], #1
 802fbfe:	9202      	str	r2, [sp, #8]
 802fc00:	f1a3 0220 	sub.w	r2, r3, #32
 802fc04:	2a5a      	cmp	r2, #90	@ 0x5a
 802fc06:	f200 8318 	bhi.w	803023a <_svfiprintf_r+0x6de>
 802fc0a:	e8df f012 	tbh	[pc, r2, lsl #1]
 802fc0e:	009a      	.short	0x009a
 802fc10:	03160316 	.word	0x03160316
 802fc14:	031600a2 	.word	0x031600a2
 802fc18:	03160316 	.word	0x03160316
 802fc1c:	03160082 	.word	0x03160082
 802fc20:	00a50316 	.word	0x00a50316
 802fc24:	031600af 	.word	0x031600af
 802fc28:	00b100ac 	.word	0x00b100ac
 802fc2c:	00cc0316 	.word	0x00cc0316
 802fc30:	00cf00cf 	.word	0x00cf00cf
 802fc34:	00cf00cf 	.word	0x00cf00cf
 802fc38:	00cf00cf 	.word	0x00cf00cf
 802fc3c:	00cf00cf 	.word	0x00cf00cf
 802fc40:	031600cf 	.word	0x031600cf
 802fc44:	03160316 	.word	0x03160316
 802fc48:	03160316 	.word	0x03160316
 802fc4c:	03160316 	.word	0x03160316
 802fc50:	03160316 	.word	0x03160316
 802fc54:	010600f9 	.word	0x010600f9
 802fc58:	03160316 	.word	0x03160316
 802fc5c:	03160316 	.word	0x03160316
 802fc60:	03160316 	.word	0x03160316
 802fc64:	03160316 	.word	0x03160316
 802fc68:	03160316 	.word	0x03160316
 802fc6c:	03160154 	.word	0x03160154
 802fc70:	03160316 	.word	0x03160316
 802fc74:	0316019b 	.word	0x0316019b
 802fc78:	0316027d 	.word	0x0316027d
 802fc7c:	029d0316 	.word	0x029d0316
 802fc80:	03160316 	.word	0x03160316
 802fc84:	03160316 	.word	0x03160316
 802fc88:	03160316 	.word	0x03160316
 802fc8c:	03160316 	.word	0x03160316
 802fc90:	03160316 	.word	0x03160316
 802fc94:	010800f9 	.word	0x010800f9
 802fc98:	03160316 	.word	0x03160316
 802fc9c:	00df0316 	.word	0x00df0316
 802fca0:	00f30108 	.word	0x00f30108
 802fca4:	00ec0316 	.word	0x00ec0316
 802fca8:	01340316 	.word	0x01340316
 802fcac:	018a0156 	.word	0x018a0156
 802fcb0:	031600f3 	.word	0x031600f3
 802fcb4:	0098019b 	.word	0x0098019b
 802fcb8:	0316027f 	.word	0x0316027f
 802fcbc:	00650316 	.word	0x00650316
 802fcc0:	00980316 	.word	0x00980316
 802fcc4:	9801      	ldr	r0, [sp, #4]
 802fcc6:	aa0e      	add	r2, sp, #56	@ 0x38
 802fcc8:	4659      	mov	r1, fp
 802fcca:	f7ff fec9 	bl	802fa60 <__ssprint_r>
 802fcce:	2800      	cmp	r0, #0
 802fcd0:	f040 833b 	bne.w	803034a <_svfiprintf_r+0x7ee>
 802fcd4:	ae11      	add	r6, sp, #68	@ 0x44
 802fcd6:	e77f      	b.n	802fbd8 <_svfiprintf_r+0x7c>
 802fcd8:	4a99      	ldr	r2, [pc, #612]	@ (802ff40 <_svfiprintf_r+0x3e4>)
 802fcda:	9205      	str	r2, [sp, #20]
 802fcdc:	f019 0220 	ands.w	r2, r9, #32
 802fce0:	f000 8234 	beq.w	803014c <_svfiprintf_r+0x5f0>
 802fce4:	3507      	adds	r5, #7
 802fce6:	f025 0507 	bic.w	r5, r5, #7
 802fcea:	462f      	mov	r7, r5
 802fcec:	686d      	ldr	r5, [r5, #4]
 802fcee:	f857 4b08 	ldr.w	r4, [r7], #8
 802fcf2:	f019 0f01 	tst.w	r9, #1
 802fcf6:	d009      	beq.n	802fd0c <_svfiprintf_r+0x1b0>
 802fcf8:	ea54 0205 	orrs.w	r2, r4, r5
 802fcfc:	bf1f      	itttt	ne
 802fcfe:	2230      	movne	r2, #48	@ 0x30
 802fd00:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 802fd04:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 802fd08:	f049 0902 	orrne.w	r9, r9, #2
 802fd0c:	f429 6980 	bic.w	r9, r9, #1024	@ 0x400
 802fd10:	e113      	b.n	802ff3a <_svfiprintf_r+0x3de>
 802fd12:	9801      	ldr	r0, [sp, #4]
 802fd14:	f7fe fb32 	bl	802e37c <_localeconv_r>
 802fd18:	6843      	ldr	r3, [r0, #4]
 802fd1a:	9308      	str	r3, [sp, #32]
 802fd1c:	4618      	mov	r0, r3
 802fd1e:	f7e0 fabf 	bl	80102a0 <strlen>
 802fd22:	9007      	str	r0, [sp, #28]
 802fd24:	9801      	ldr	r0, [sp, #4]
 802fd26:	f7fe fb29 	bl	802e37c <_localeconv_r>
 802fd2a:	6883      	ldr	r3, [r0, #8]
 802fd2c:	9306      	str	r3, [sp, #24]
 802fd2e:	9b07      	ldr	r3, [sp, #28]
 802fd30:	b12b      	cbz	r3, 802fd3e <_svfiprintf_r+0x1e2>
 802fd32:	9b06      	ldr	r3, [sp, #24]
 802fd34:	b11b      	cbz	r3, 802fd3e <_svfiprintf_r+0x1e2>
 802fd36:	781b      	ldrb	r3, [r3, #0]
 802fd38:	b10b      	cbz	r3, 802fd3e <_svfiprintf_r+0x1e2>
 802fd3a:	f449 6980 	orr.w	r9, r9, #1024	@ 0x400
 802fd3e:	9c02      	ldr	r4, [sp, #8]
 802fd40:	e75a      	b.n	802fbf8 <_svfiprintf_r+0x9c>
 802fd42:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802fd46:	2b00      	cmp	r3, #0
 802fd48:	d1f9      	bne.n	802fd3e <_svfiprintf_r+0x1e2>
 802fd4a:	2320      	movs	r3, #32
 802fd4c:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802fd50:	e7f5      	b.n	802fd3e <_svfiprintf_r+0x1e2>
 802fd52:	f049 0901 	orr.w	r9, r9, #1
 802fd56:	e7f2      	b.n	802fd3e <_svfiprintf_r+0x1e2>
 802fd58:	f855 3b04 	ldr.w	r3, [r5], #4
 802fd5c:	9303      	str	r3, [sp, #12]
 802fd5e:	2b00      	cmp	r3, #0
 802fd60:	daed      	bge.n	802fd3e <_svfiprintf_r+0x1e2>
 802fd62:	425b      	negs	r3, r3
 802fd64:	9303      	str	r3, [sp, #12]
 802fd66:	f049 0904 	orr.w	r9, r9, #4
 802fd6a:	e7e8      	b.n	802fd3e <_svfiprintf_r+0x1e2>
 802fd6c:	232b      	movs	r3, #43	@ 0x2b
 802fd6e:	e7ed      	b.n	802fd4c <_svfiprintf_r+0x1f0>
 802fd70:	9a02      	ldr	r2, [sp, #8]
 802fd72:	f812 3b01 	ldrb.w	r3, [r2], #1
 802fd76:	2b2a      	cmp	r3, #42	@ 0x2a
 802fd78:	d111      	bne.n	802fd9e <_svfiprintf_r+0x242>
 802fd7a:	f855 3b04 	ldr.w	r3, [r5], #4
 802fd7e:	9202      	str	r2, [sp, #8]
 802fd80:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802fd84:	9300      	str	r3, [sp, #0]
 802fd86:	e7da      	b.n	802fd3e <_svfiprintf_r+0x1e2>
 802fd88:	9b00      	ldr	r3, [sp, #0]
 802fd8a:	fb00 1303 	mla	r3, r0, r3, r1
 802fd8e:	9300      	str	r3, [sp, #0]
 802fd90:	f812 3b01 	ldrb.w	r3, [r2], #1
 802fd94:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802fd98:	2909      	cmp	r1, #9
 802fd9a:	d9f5      	bls.n	802fd88 <_svfiprintf_r+0x22c>
 802fd9c:	e72f      	b.n	802fbfe <_svfiprintf_r+0xa2>
 802fd9e:	2100      	movs	r1, #0
 802fda0:	9100      	str	r1, [sp, #0]
 802fda2:	200a      	movs	r0, #10
 802fda4:	e7f6      	b.n	802fd94 <_svfiprintf_r+0x238>
 802fda6:	f049 0980 	orr.w	r9, r9, #128	@ 0x80
 802fdaa:	e7c8      	b.n	802fd3e <_svfiprintf_r+0x1e2>
 802fdac:	2100      	movs	r1, #0
 802fdae:	9a02      	ldr	r2, [sp, #8]
 802fdb0:	9103      	str	r1, [sp, #12]
 802fdb2:	200a      	movs	r0, #10
 802fdb4:	9903      	ldr	r1, [sp, #12]
 802fdb6:	3b30      	subs	r3, #48	@ 0x30
 802fdb8:	fb00 3301 	mla	r3, r0, r1, r3
 802fdbc:	9303      	str	r3, [sp, #12]
 802fdbe:	f812 3b01 	ldrb.w	r3, [r2], #1
 802fdc2:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802fdc6:	2909      	cmp	r1, #9
 802fdc8:	d9f4      	bls.n	802fdb4 <_svfiprintf_r+0x258>
 802fdca:	e718      	b.n	802fbfe <_svfiprintf_r+0xa2>
 802fdcc:	9b02      	ldr	r3, [sp, #8]
 802fdce:	781b      	ldrb	r3, [r3, #0]
 802fdd0:	2b68      	cmp	r3, #104	@ 0x68
 802fdd2:	bf01      	itttt	eq
 802fdd4:	9b02      	ldreq	r3, [sp, #8]
 802fdd6:	3301      	addeq	r3, #1
 802fdd8:	9302      	streq	r3, [sp, #8]
 802fdda:	f449 7900 	orreq.w	r9, r9, #512	@ 0x200
 802fdde:	bf18      	it	ne
 802fde0:	f049 0940 	orrne.w	r9, r9, #64	@ 0x40
 802fde4:	e7ab      	b.n	802fd3e <_svfiprintf_r+0x1e2>
 802fde6:	9b02      	ldr	r3, [sp, #8]
 802fde8:	781b      	ldrb	r3, [r3, #0]
 802fdea:	2b6c      	cmp	r3, #108	@ 0x6c
 802fdec:	d105      	bne.n	802fdfa <_svfiprintf_r+0x29e>
 802fdee:	9b02      	ldr	r3, [sp, #8]
 802fdf0:	3301      	adds	r3, #1
 802fdf2:	9302      	str	r3, [sp, #8]
 802fdf4:	f049 0920 	orr.w	r9, r9, #32
 802fdf8:	e7a1      	b.n	802fd3e <_svfiprintf_r+0x1e2>
 802fdfa:	f049 0910 	orr.w	r9, r9, #16
 802fdfe:	e79e      	b.n	802fd3e <_svfiprintf_r+0x1e2>
 802fe00:	462f      	mov	r7, r5
 802fe02:	2400      	movs	r4, #0
 802fe04:	f857 3b04 	ldr.w	r3, [r7], #4
 802fe08:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802fe0c:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802fe10:	2301      	movs	r3, #1
 802fe12:	9300      	str	r3, [sp, #0]
 802fe14:	f10d 0884 	add.w	r8, sp, #132	@ 0x84
 802fe18:	e0aa      	b.n	802ff70 <_svfiprintf_r+0x414>
 802fe1a:	f049 0910 	orr.w	r9, r9, #16
 802fe1e:	f019 0f20 	tst.w	r9, #32
 802fe22:	d011      	beq.n	802fe48 <_svfiprintf_r+0x2ec>
 802fe24:	3507      	adds	r5, #7
 802fe26:	f025 0507 	bic.w	r5, r5, #7
 802fe2a:	462f      	mov	r7, r5
 802fe2c:	686d      	ldr	r5, [r5, #4]
 802fe2e:	f857 4b08 	ldr.w	r4, [r7], #8
 802fe32:	2d00      	cmp	r5, #0
 802fe34:	da06      	bge.n	802fe44 <_svfiprintf_r+0x2e8>
 802fe36:	4264      	negs	r4, r4
 802fe38:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 802fe3c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 802fe40:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802fe44:	2301      	movs	r3, #1
 802fe46:	e048      	b.n	802feda <_svfiprintf_r+0x37e>
 802fe48:	462f      	mov	r7, r5
 802fe4a:	f019 0f10 	tst.w	r9, #16
 802fe4e:	f857 5b04 	ldr.w	r5, [r7], #4
 802fe52:	d002      	beq.n	802fe5a <_svfiprintf_r+0x2fe>
 802fe54:	462c      	mov	r4, r5
 802fe56:	17ed      	asrs	r5, r5, #31
 802fe58:	e7eb      	b.n	802fe32 <_svfiprintf_r+0x2d6>
 802fe5a:	f019 0f40 	tst.w	r9, #64	@ 0x40
 802fe5e:	d003      	beq.n	802fe68 <_svfiprintf_r+0x30c>
 802fe60:	b22c      	sxth	r4, r5
 802fe62:	f345 35c0 	sbfx	r5, r5, #15, #1
 802fe66:	e7e4      	b.n	802fe32 <_svfiprintf_r+0x2d6>
 802fe68:	f419 7f00 	tst.w	r9, #512	@ 0x200
 802fe6c:	d0f2      	beq.n	802fe54 <_svfiprintf_r+0x2f8>
 802fe6e:	b26c      	sxtb	r4, r5
 802fe70:	f345 15c0 	sbfx	r5, r5, #7, #1
 802fe74:	e7dd      	b.n	802fe32 <_svfiprintf_r+0x2d6>
 802fe76:	f019 0f20 	tst.w	r9, #32
 802fe7a:	d007      	beq.n	802fe8c <_svfiprintf_r+0x330>
 802fe7c:	9a04      	ldr	r2, [sp, #16]
 802fe7e:	682b      	ldr	r3, [r5, #0]
 802fe80:	9904      	ldr	r1, [sp, #16]
 802fe82:	17d2      	asrs	r2, r2, #31
 802fe84:	e9c3 1200 	strd	r1, r2, [r3]
 802fe88:	3504      	adds	r5, #4
 802fe8a:	e690      	b.n	802fbae <_svfiprintf_r+0x52>
 802fe8c:	f019 0f10 	tst.w	r9, #16
 802fe90:	d003      	beq.n	802fe9a <_svfiprintf_r+0x33e>
 802fe92:	682b      	ldr	r3, [r5, #0]
 802fe94:	9a04      	ldr	r2, [sp, #16]
 802fe96:	601a      	str	r2, [r3, #0]
 802fe98:	e7f6      	b.n	802fe88 <_svfiprintf_r+0x32c>
 802fe9a:	f019 0f40 	tst.w	r9, #64	@ 0x40
 802fe9e:	d003      	beq.n	802fea8 <_svfiprintf_r+0x34c>
 802fea0:	682b      	ldr	r3, [r5, #0]
 802fea2:	9a04      	ldr	r2, [sp, #16]
 802fea4:	801a      	strh	r2, [r3, #0]
 802fea6:	e7ef      	b.n	802fe88 <_svfiprintf_r+0x32c>
 802fea8:	f419 7f00 	tst.w	r9, #512	@ 0x200
 802feac:	d0f1      	beq.n	802fe92 <_svfiprintf_r+0x336>
 802feae:	682b      	ldr	r3, [r5, #0]
 802feb0:	9a04      	ldr	r2, [sp, #16]
 802feb2:	701a      	strb	r2, [r3, #0]
 802feb4:	e7e8      	b.n	802fe88 <_svfiprintf_r+0x32c>
 802feb6:	f049 0910 	orr.w	r9, r9, #16
 802feba:	f019 0320 	ands.w	r3, r9, #32
 802febe:	d01e      	beq.n	802fefe <_svfiprintf_r+0x3a2>
 802fec0:	3507      	adds	r5, #7
 802fec2:	f025 0507 	bic.w	r5, r5, #7
 802fec6:	462f      	mov	r7, r5
 802fec8:	686d      	ldr	r5, [r5, #4]
 802feca:	f857 4b08 	ldr.w	r4, [r7], #8
 802fece:	f429 6980 	bic.w	r9, r9, #1024	@ 0x400
 802fed2:	2300      	movs	r3, #0
 802fed4:	2200      	movs	r2, #0
 802fed6:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 802feda:	9a00      	ldr	r2, [sp, #0]
 802fedc:	3201      	adds	r2, #1
 802fede:	f000 8259 	beq.w	8030394 <_svfiprintf_r+0x838>
 802fee2:	ea54 0205 	orrs.w	r2, r4, r5
 802fee6:	f029 0a80 	bic.w	sl, r9, #128	@ 0x80
 802feea:	f040 8258 	bne.w	803039e <_svfiprintf_r+0x842>
 802feee:	9a00      	ldr	r2, [sp, #0]
 802fef0:	2a00      	cmp	r2, #0
 802fef2:	f000 8199 	beq.w	8030228 <_svfiprintf_r+0x6cc>
 802fef6:	2b01      	cmp	r3, #1
 802fef8:	f040 8254 	bne.w	80303a4 <_svfiprintf_r+0x848>
 802fefc:	e13d      	b.n	803017a <_svfiprintf_r+0x61e>
 802fefe:	462f      	mov	r7, r5
 802ff00:	f019 0510 	ands.w	r5, r9, #16
 802ff04:	f857 4b04 	ldr.w	r4, [r7], #4
 802ff08:	d001      	beq.n	802ff0e <_svfiprintf_r+0x3b2>
 802ff0a:	461d      	mov	r5, r3
 802ff0c:	e7df      	b.n	802fece <_svfiprintf_r+0x372>
 802ff0e:	f019 0340 	ands.w	r3, r9, #64	@ 0x40
 802ff12:	d001      	beq.n	802ff18 <_svfiprintf_r+0x3bc>
 802ff14:	b2a4      	uxth	r4, r4
 802ff16:	e7da      	b.n	802fece <_svfiprintf_r+0x372>
 802ff18:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 802ff1c:	d0d7      	beq.n	802fece <_svfiprintf_r+0x372>
 802ff1e:	b2e4      	uxtb	r4, r4
 802ff20:	e7f3      	b.n	802ff0a <_svfiprintf_r+0x3ae>
 802ff22:	462f      	mov	r7, r5
 802ff24:	f647 0330 	movw	r3, #30768	@ 0x7830
 802ff28:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 802ff2c:	f857 4b04 	ldr.w	r4, [r7], #4
 802ff30:	4b03      	ldr	r3, [pc, #12]	@ (802ff40 <_svfiprintf_r+0x3e4>)
 802ff32:	9305      	str	r3, [sp, #20]
 802ff34:	2500      	movs	r5, #0
 802ff36:	f049 0902 	orr.w	r9, r9, #2
 802ff3a:	2302      	movs	r3, #2
 802ff3c:	e7ca      	b.n	802fed4 <_svfiprintf_r+0x378>
 802ff3e:	bf00      	nop
 802ff40:	0803c44b 	.word	0x0803c44b
 802ff44:	9b00      	ldr	r3, [sp, #0]
 802ff46:	462f      	mov	r7, r5
 802ff48:	1c5a      	adds	r2, r3, #1
 802ff4a:	f04f 0500 	mov.w	r5, #0
 802ff4e:	f857 8b04 	ldr.w	r8, [r7], #4
 802ff52:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 802ff56:	f000 80d2 	beq.w	80300fe <_svfiprintf_r+0x5a2>
 802ff5a:	461a      	mov	r2, r3
 802ff5c:	4629      	mov	r1, r5
 802ff5e:	4640      	mov	r0, r8
 802ff60:	f7e0 f94e 	bl	8010200 <memchr>
 802ff64:	4604      	mov	r4, r0
 802ff66:	b118      	cbz	r0, 802ff70 <_svfiprintf_r+0x414>
 802ff68:	eba0 0308 	sub.w	r3, r0, r8
 802ff6c:	9300      	str	r3, [sp, #0]
 802ff6e:	462c      	mov	r4, r5
 802ff70:	9d00      	ldr	r5, [sp, #0]
 802ff72:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802ff76:	42a5      	cmp	r5, r4
 802ff78:	bfb8      	it	lt
 802ff7a:	4625      	movlt	r5, r4
 802ff7c:	b103      	cbz	r3, 802ff80 <_svfiprintf_r+0x424>
 802ff7e:	3501      	adds	r5, #1
 802ff80:	f019 0302 	ands.w	r3, r9, #2
 802ff84:	9309      	str	r3, [sp, #36]	@ 0x24
 802ff86:	bf18      	it	ne
 802ff88:	3502      	addne	r5, #2
 802ff8a:	f019 0384 	ands.w	r3, r9, #132	@ 0x84
 802ff8e:	930a      	str	r3, [sp, #40]	@ 0x28
 802ff90:	d123      	bne.n	802ffda <_svfiprintf_r+0x47e>
 802ff92:	9b03      	ldr	r3, [sp, #12]
 802ff94:	eba3 0a05 	sub.w	sl, r3, r5
 802ff98:	f1ba 0f00 	cmp.w	sl, #0
 802ff9c:	dd1d      	ble.n	802ffda <_svfiprintf_r+0x47e>
 802ff9e:	4bac      	ldr	r3, [pc, #688]	@ (8030250 <_svfiprintf_r+0x6f4>)
 802ffa0:	6033      	str	r3, [r6, #0]
 802ffa2:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802ffa6:	f1ba 0f10 	cmp.w	sl, #16
 802ffaa:	f102 0201 	add.w	r2, r2, #1
 802ffae:	f106 0008 	add.w	r0, r6, #8
 802ffb2:	f300 8153 	bgt.w	803025c <_svfiprintf_r+0x700>
 802ffb6:	eb0c 010a 	add.w	r1, ip, sl
 802ffba:	2a07      	cmp	r2, #7
 802ffbc:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802ffc0:	f8c6 a004 	str.w	sl, [r6, #4]
 802ffc4:	f340 815e 	ble.w	8030284 <_svfiprintf_r+0x728>
 802ffc8:	9801      	ldr	r0, [sp, #4]
 802ffca:	aa0e      	add	r2, sp, #56	@ 0x38
 802ffcc:	4659      	mov	r1, fp
 802ffce:	f7ff fd47 	bl	802fa60 <__ssprint_r>
 802ffd2:	2800      	cmp	r0, #0
 802ffd4:	f040 81b9 	bne.w	803034a <_svfiprintf_r+0x7ee>
 802ffd8:	ae11      	add	r6, sp, #68	@ 0x44
 802ffda:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 802ffde:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802ffe2:	b161      	cbz	r1, 802fffe <_svfiprintf_r+0x4a2>
 802ffe4:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 802ffe8:	3301      	adds	r3, #1
 802ffea:	6031      	str	r1, [r6, #0]
 802ffec:	2101      	movs	r1, #1
 802ffee:	440a      	add	r2, r1
 802fff0:	2b07      	cmp	r3, #7
 802fff2:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802fff6:	6071      	str	r1, [r6, #4]
 802fff8:	f300 8146 	bgt.w	8030288 <_svfiprintf_r+0x72c>
 802fffc:	3608      	adds	r6, #8
 802fffe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8030000:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8030004:	b159      	cbz	r1, 803001e <_svfiprintf_r+0x4c2>
 8030006:	a90d      	add	r1, sp, #52	@ 0x34
 8030008:	3301      	adds	r3, #1
 803000a:	6031      	str	r1, [r6, #0]
 803000c:	2102      	movs	r1, #2
 803000e:	440a      	add	r2, r1
 8030010:	2b07      	cmp	r3, #7
 8030012:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8030016:	6071      	str	r1, [r6, #4]
 8030018:	f300 813f 	bgt.w	803029a <_svfiprintf_r+0x73e>
 803001c:	3608      	adds	r6, #8
 803001e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8030020:	2b80      	cmp	r3, #128	@ 0x80
 8030022:	d123      	bne.n	803006c <_svfiprintf_r+0x510>
 8030024:	9b03      	ldr	r3, [sp, #12]
 8030026:	eba3 0a05 	sub.w	sl, r3, r5
 803002a:	f1ba 0f00 	cmp.w	sl, #0
 803002e:	dd1d      	ble.n	803006c <_svfiprintf_r+0x510>
 8030030:	4b88      	ldr	r3, [pc, #544]	@ (8030254 <_svfiprintf_r+0x6f8>)
 8030032:	6033      	str	r3, [r6, #0]
 8030034:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8030038:	f1ba 0f10 	cmp.w	sl, #16
 803003c:	f102 0201 	add.w	r2, r2, #1
 8030040:	f106 0008 	add.w	r0, r6, #8
 8030044:	f300 8132 	bgt.w	80302ac <_svfiprintf_r+0x750>
 8030048:	eb0c 010a 	add.w	r1, ip, sl
 803004c:	2a07      	cmp	r2, #7
 803004e:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8030052:	f8c6 a004 	str.w	sl, [r6, #4]
 8030056:	f340 813d 	ble.w	80302d4 <_svfiprintf_r+0x778>
 803005a:	9801      	ldr	r0, [sp, #4]
 803005c:	aa0e      	add	r2, sp, #56	@ 0x38
 803005e:	4659      	mov	r1, fp
 8030060:	f7ff fcfe 	bl	802fa60 <__ssprint_r>
 8030064:	2800      	cmp	r0, #0
 8030066:	f040 8170 	bne.w	803034a <_svfiprintf_r+0x7ee>
 803006a:	ae11      	add	r6, sp, #68	@ 0x44
 803006c:	9b00      	ldr	r3, [sp, #0]
 803006e:	1ae4      	subs	r4, r4, r3
 8030070:	2c00      	cmp	r4, #0
 8030072:	dd1a      	ble.n	80300aa <_svfiprintf_r+0x54e>
 8030074:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8030078:	4876      	ldr	r0, [pc, #472]	@ (8030254 <_svfiprintf_r+0x6f8>)
 803007a:	6030      	str	r0, [r6, #0]
 803007c:	2c10      	cmp	r4, #16
 803007e:	f103 0301 	add.w	r3, r3, #1
 8030082:	f106 0108 	add.w	r1, r6, #8
 8030086:	f300 8127 	bgt.w	80302d8 <_svfiprintf_r+0x77c>
 803008a:	6074      	str	r4, [r6, #4]
 803008c:	2b07      	cmp	r3, #7
 803008e:	4414      	add	r4, r2
 8030090:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 8030094:	f340 8131 	ble.w	80302fa <_svfiprintf_r+0x79e>
 8030098:	9801      	ldr	r0, [sp, #4]
 803009a:	aa0e      	add	r2, sp, #56	@ 0x38
 803009c:	4659      	mov	r1, fp
 803009e:	f7ff fcdf 	bl	802fa60 <__ssprint_r>
 80300a2:	2800      	cmp	r0, #0
 80300a4:	f040 8151 	bne.w	803034a <_svfiprintf_r+0x7ee>
 80300a8:	ae11      	add	r6, sp, #68	@ 0x44
 80300aa:	9b00      	ldr	r3, [sp, #0]
 80300ac:	9a00      	ldr	r2, [sp, #0]
 80300ae:	6073      	str	r3, [r6, #4]
 80300b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80300b2:	f8c6 8000 	str.w	r8, [r6]
 80300b6:	4413      	add	r3, r2
 80300b8:	9310      	str	r3, [sp, #64]	@ 0x40
 80300ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80300bc:	3301      	adds	r3, #1
 80300be:	2b07      	cmp	r3, #7
 80300c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80300c2:	f300 811c 	bgt.w	80302fe <_svfiprintf_r+0x7a2>
 80300c6:	f106 0308 	add.w	r3, r6, #8
 80300ca:	f019 0f04 	tst.w	r9, #4
 80300ce:	f040 811e 	bne.w	803030e <_svfiprintf_r+0x7b2>
 80300d2:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 80300d6:	42aa      	cmp	r2, r5
 80300d8:	bfac      	ite	ge
 80300da:	189b      	addge	r3, r3, r2
 80300dc:	195b      	addlt	r3, r3, r5
 80300de:	9304      	str	r3, [sp, #16]
 80300e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80300e2:	b13b      	cbz	r3, 80300f4 <_svfiprintf_r+0x598>
 80300e4:	9801      	ldr	r0, [sp, #4]
 80300e6:	aa0e      	add	r2, sp, #56	@ 0x38
 80300e8:	4659      	mov	r1, fp
 80300ea:	f7ff fcb9 	bl	802fa60 <__ssprint_r>
 80300ee:	2800      	cmp	r0, #0
 80300f0:	f040 812b 	bne.w	803034a <_svfiprintf_r+0x7ee>
 80300f4:	2300      	movs	r3, #0
 80300f6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80300f8:	463d      	mov	r5, r7
 80300fa:	ae11      	add	r6, sp, #68	@ 0x44
 80300fc:	e557      	b.n	802fbae <_svfiprintf_r+0x52>
 80300fe:	4640      	mov	r0, r8
 8030100:	f7e0 f8ce 	bl	80102a0 <strlen>
 8030104:	9000      	str	r0, [sp, #0]
 8030106:	e732      	b.n	802ff6e <_svfiprintf_r+0x412>
 8030108:	f049 0910 	orr.w	r9, r9, #16
 803010c:	f019 0320 	ands.w	r3, r9, #32
 8030110:	d008      	beq.n	8030124 <_svfiprintf_r+0x5c8>
 8030112:	3507      	adds	r5, #7
 8030114:	f025 0507 	bic.w	r5, r5, #7
 8030118:	462f      	mov	r7, r5
 803011a:	686d      	ldr	r5, [r5, #4]
 803011c:	f857 4b08 	ldr.w	r4, [r7], #8
 8030120:	2301      	movs	r3, #1
 8030122:	e6d7      	b.n	802fed4 <_svfiprintf_r+0x378>
 8030124:	462f      	mov	r7, r5
 8030126:	f019 0510 	ands.w	r5, r9, #16
 803012a:	f857 4b04 	ldr.w	r4, [r7], #4
 803012e:	d001      	beq.n	8030134 <_svfiprintf_r+0x5d8>
 8030130:	461d      	mov	r5, r3
 8030132:	e7f5      	b.n	8030120 <_svfiprintf_r+0x5c4>
 8030134:	f019 0340 	ands.w	r3, r9, #64	@ 0x40
 8030138:	d001      	beq.n	803013e <_svfiprintf_r+0x5e2>
 803013a:	b2a4      	uxth	r4, r4
 803013c:	e7f0      	b.n	8030120 <_svfiprintf_r+0x5c4>
 803013e:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 8030142:	d0ed      	beq.n	8030120 <_svfiprintf_r+0x5c4>
 8030144:	b2e4      	uxtb	r4, r4
 8030146:	e7f3      	b.n	8030130 <_svfiprintf_r+0x5d4>
 8030148:	4a43      	ldr	r2, [pc, #268]	@ (8030258 <_svfiprintf_r+0x6fc>)
 803014a:	e5c6      	b.n	802fcda <_svfiprintf_r+0x17e>
 803014c:	462f      	mov	r7, r5
 803014e:	f019 0510 	ands.w	r5, r9, #16
 8030152:	f857 4b04 	ldr.w	r4, [r7], #4
 8030156:	d001      	beq.n	803015c <_svfiprintf_r+0x600>
 8030158:	4615      	mov	r5, r2
 803015a:	e5ca      	b.n	802fcf2 <_svfiprintf_r+0x196>
 803015c:	f019 0240 	ands.w	r2, r9, #64	@ 0x40
 8030160:	d001      	beq.n	8030166 <_svfiprintf_r+0x60a>
 8030162:	b2a4      	uxth	r4, r4
 8030164:	e5c5      	b.n	802fcf2 <_svfiprintf_r+0x196>
 8030166:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 803016a:	f43f adc2 	beq.w	802fcf2 <_svfiprintf_r+0x196>
 803016e:	b2e4      	uxtb	r4, r4
 8030170:	e7f2      	b.n	8030158 <_svfiprintf_r+0x5fc>
 8030172:	2c0a      	cmp	r4, #10
 8030174:	f175 0300 	sbcs.w	r3, r5, #0
 8030178:	d206      	bcs.n	8030188 <_svfiprintf_r+0x62c>
 803017a:	3430      	adds	r4, #48	@ 0x30
 803017c:	b2e4      	uxtb	r4, r4
 803017e:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 8030182:	f10d 08e7 	add.w	r8, sp, #231	@ 0xe7
 8030186:	e129      	b.n	80303dc <_svfiprintf_r+0x880>
 8030188:	ab3a      	add	r3, sp, #232	@ 0xe8
 803018a:	9309      	str	r3, [sp, #36]	@ 0x24
 803018c:	f40a 6380 	and.w	r3, sl, #1024	@ 0x400
 8030190:	f04f 0900 	mov.w	r9, #0
 8030194:	930a      	str	r3, [sp, #40]	@ 0x28
 8030196:	220a      	movs	r2, #10
 8030198:	2300      	movs	r3, #0
 803019a:	4620      	mov	r0, r4
 803019c:	4629      	mov	r1, r5
 803019e:	f7e0 fddb 	bl	8010d58 <__aeabi_uldivmod>
 80301a2:	460b      	mov	r3, r1
 80301a4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80301a6:	900b      	str	r0, [sp, #44]	@ 0x2c
 80301a8:	3230      	adds	r2, #48	@ 0x30
 80301aa:	f801 2c01 	strb.w	r2, [r1, #-1]
 80301ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80301b0:	f101 38ff 	add.w	r8, r1, #4294967295	@ 0xffffffff
 80301b4:	f109 0901 	add.w	r9, r9, #1
 80301b8:	b1e2      	cbz	r2, 80301f4 <_svfiprintf_r+0x698>
 80301ba:	9a06      	ldr	r2, [sp, #24]
 80301bc:	7812      	ldrb	r2, [r2, #0]
 80301be:	454a      	cmp	r2, r9
 80301c0:	d118      	bne.n	80301f4 <_svfiprintf_r+0x698>
 80301c2:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80301c6:	d015      	beq.n	80301f4 <_svfiprintf_r+0x698>
 80301c8:	2c0a      	cmp	r4, #10
 80301ca:	f175 0200 	sbcs.w	r2, r5, #0
 80301ce:	d311      	bcc.n	80301f4 <_svfiprintf_r+0x698>
 80301d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80301d2:	9b07      	ldr	r3, [sp, #28]
 80301d4:	9908      	ldr	r1, [sp, #32]
 80301d6:	eba8 0803 	sub.w	r8, r8, r3
 80301da:	461a      	mov	r2, r3
 80301dc:	4640      	mov	r0, r8
 80301de:	f7fc ff86 	bl	802d0ee <strncpy>
 80301e2:	9b06      	ldr	r3, [sp, #24]
 80301e4:	785a      	ldrb	r2, [r3, #1]
 80301e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80301e8:	b172      	cbz	r2, 8030208 <_svfiprintf_r+0x6ac>
 80301ea:	9a06      	ldr	r2, [sp, #24]
 80301ec:	3201      	adds	r2, #1
 80301ee:	9206      	str	r2, [sp, #24]
 80301f0:	f04f 0900 	mov.w	r9, #0
 80301f4:	2c0a      	cmp	r4, #10
 80301f6:	f175 0500 	sbcs.w	r5, r5, #0
 80301fa:	f0c0 80ef 	bcc.w	80303dc <_svfiprintf_r+0x880>
 80301fe:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8030200:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8030204:	461d      	mov	r5, r3
 8030206:	e7c6      	b.n	8030196 <_svfiprintf_r+0x63a>
 8030208:	4691      	mov	r9, r2
 803020a:	e7f3      	b.n	80301f4 <_svfiprintf_r+0x698>
 803020c:	f004 030f 	and.w	r3, r4, #15
 8030210:	9a05      	ldr	r2, [sp, #20]
 8030212:	0924      	lsrs	r4, r4, #4
 8030214:	5cd3      	ldrb	r3, [r2, r3]
 8030216:	f808 3d01 	strb.w	r3, [r8, #-1]!
 803021a:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 803021e:	092d      	lsrs	r5, r5, #4
 8030220:	ea54 0305 	orrs.w	r3, r4, r5
 8030224:	d1f2      	bne.n	803020c <_svfiprintf_r+0x6b0>
 8030226:	e0d9      	b.n	80303dc <_svfiprintf_r+0x880>
 8030228:	b923      	cbnz	r3, 8030234 <_svfiprintf_r+0x6d8>
 803022a:	f019 0f01 	tst.w	r9, #1
 803022e:	d001      	beq.n	8030234 <_svfiprintf_r+0x6d8>
 8030230:	2430      	movs	r4, #48	@ 0x30
 8030232:	e7a4      	b.n	803017e <_svfiprintf_r+0x622>
 8030234:	f10d 08e8 	add.w	r8, sp, #232	@ 0xe8
 8030238:	e0d0      	b.n	80303dc <_svfiprintf_r+0x880>
 803023a:	2b00      	cmp	r3, #0
 803023c:	f000 80a1 	beq.w	8030382 <_svfiprintf_r+0x826>
 8030240:	2400      	movs	r4, #0
 8030242:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8030246:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 803024a:	462f      	mov	r7, r5
 803024c:	e5e0      	b.n	802fe10 <_svfiprintf_r+0x2b4>
 803024e:	bf00      	nop
 8030250:	0803c97f 	.word	0x0803c97f
 8030254:	0803c96f 	.word	0x0803c96f
 8030258:	0803c45c 	.word	0x0803c45c
 803025c:	2110      	movs	r1, #16
 803025e:	6071      	str	r1, [r6, #4]
 8030260:	2a07      	cmp	r2, #7
 8030262:	4461      	add	r1, ip
 8030264:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8030268:	dd08      	ble.n	803027c <_svfiprintf_r+0x720>
 803026a:	9801      	ldr	r0, [sp, #4]
 803026c:	aa0e      	add	r2, sp, #56	@ 0x38
 803026e:	4659      	mov	r1, fp
 8030270:	f7ff fbf6 	bl	802fa60 <__ssprint_r>
 8030274:	2800      	cmp	r0, #0
 8030276:	d168      	bne.n	803034a <_svfiprintf_r+0x7ee>
 8030278:	4b5c      	ldr	r3, [pc, #368]	@ (80303ec <_svfiprintf_r+0x890>)
 803027a:	a811      	add	r0, sp, #68	@ 0x44
 803027c:	f1aa 0a10 	sub.w	sl, sl, #16
 8030280:	4606      	mov	r6, r0
 8030282:	e68d      	b.n	802ffa0 <_svfiprintf_r+0x444>
 8030284:	4606      	mov	r6, r0
 8030286:	e6a8      	b.n	802ffda <_svfiprintf_r+0x47e>
 8030288:	9801      	ldr	r0, [sp, #4]
 803028a:	aa0e      	add	r2, sp, #56	@ 0x38
 803028c:	4659      	mov	r1, fp
 803028e:	f7ff fbe7 	bl	802fa60 <__ssprint_r>
 8030292:	2800      	cmp	r0, #0
 8030294:	d159      	bne.n	803034a <_svfiprintf_r+0x7ee>
 8030296:	ae11      	add	r6, sp, #68	@ 0x44
 8030298:	e6b1      	b.n	802fffe <_svfiprintf_r+0x4a2>
 803029a:	9801      	ldr	r0, [sp, #4]
 803029c:	aa0e      	add	r2, sp, #56	@ 0x38
 803029e:	4659      	mov	r1, fp
 80302a0:	f7ff fbde 	bl	802fa60 <__ssprint_r>
 80302a4:	2800      	cmp	r0, #0
 80302a6:	d150      	bne.n	803034a <_svfiprintf_r+0x7ee>
 80302a8:	ae11      	add	r6, sp, #68	@ 0x44
 80302aa:	e6b8      	b.n	803001e <_svfiprintf_r+0x4c2>
 80302ac:	2110      	movs	r1, #16
 80302ae:	6071      	str	r1, [r6, #4]
 80302b0:	2a07      	cmp	r2, #7
 80302b2:	4461      	add	r1, ip
 80302b4:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 80302b8:	dd08      	ble.n	80302cc <_svfiprintf_r+0x770>
 80302ba:	9801      	ldr	r0, [sp, #4]
 80302bc:	aa0e      	add	r2, sp, #56	@ 0x38
 80302be:	4659      	mov	r1, fp
 80302c0:	f7ff fbce 	bl	802fa60 <__ssprint_r>
 80302c4:	2800      	cmp	r0, #0
 80302c6:	d140      	bne.n	803034a <_svfiprintf_r+0x7ee>
 80302c8:	4b49      	ldr	r3, [pc, #292]	@ (80303f0 <_svfiprintf_r+0x894>)
 80302ca:	a811      	add	r0, sp, #68	@ 0x44
 80302cc:	f1aa 0a10 	sub.w	sl, sl, #16
 80302d0:	4606      	mov	r6, r0
 80302d2:	e6ae      	b.n	8030032 <_svfiprintf_r+0x4d6>
 80302d4:	4606      	mov	r6, r0
 80302d6:	e6c9      	b.n	803006c <_svfiprintf_r+0x510>
 80302d8:	2010      	movs	r0, #16
 80302da:	4402      	add	r2, r0
 80302dc:	2b07      	cmp	r3, #7
 80302de:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 80302e2:	6070      	str	r0, [r6, #4]
 80302e4:	dd06      	ble.n	80302f4 <_svfiprintf_r+0x798>
 80302e6:	9801      	ldr	r0, [sp, #4]
 80302e8:	aa0e      	add	r2, sp, #56	@ 0x38
 80302ea:	4659      	mov	r1, fp
 80302ec:	f7ff fbb8 	bl	802fa60 <__ssprint_r>
 80302f0:	bb58      	cbnz	r0, 803034a <_svfiprintf_r+0x7ee>
 80302f2:	a911      	add	r1, sp, #68	@ 0x44
 80302f4:	3c10      	subs	r4, #16
 80302f6:	460e      	mov	r6, r1
 80302f8:	e6bc      	b.n	8030074 <_svfiprintf_r+0x518>
 80302fa:	460e      	mov	r6, r1
 80302fc:	e6d5      	b.n	80300aa <_svfiprintf_r+0x54e>
 80302fe:	9801      	ldr	r0, [sp, #4]
 8030300:	aa0e      	add	r2, sp, #56	@ 0x38
 8030302:	4659      	mov	r1, fp
 8030304:	f7ff fbac 	bl	802fa60 <__ssprint_r>
 8030308:	b9f8      	cbnz	r0, 803034a <_svfiprintf_r+0x7ee>
 803030a:	ab11      	add	r3, sp, #68	@ 0x44
 803030c:	e6dd      	b.n	80300ca <_svfiprintf_r+0x56e>
 803030e:	9a03      	ldr	r2, [sp, #12]
 8030310:	1b54      	subs	r4, r2, r5
 8030312:	2c00      	cmp	r4, #0
 8030314:	f77f aedd 	ble.w	80300d2 <_svfiprintf_r+0x576>
 8030318:	4e34      	ldr	r6, [pc, #208]	@ (80303ec <_svfiprintf_r+0x890>)
 803031a:	f04f 0810 	mov.w	r8, #16
 803031e:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 8030322:	2c10      	cmp	r4, #16
 8030324:	f102 0201 	add.w	r2, r2, #1
 8030328:	601e      	str	r6, [r3, #0]
 803032a:	dc17      	bgt.n	803035c <_svfiprintf_r+0x800>
 803032c:	605c      	str	r4, [r3, #4]
 803032e:	2a07      	cmp	r2, #7
 8030330:	440c      	add	r4, r1
 8030332:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 8030336:	f77f aecc 	ble.w	80300d2 <_svfiprintf_r+0x576>
 803033a:	9801      	ldr	r0, [sp, #4]
 803033c:	aa0e      	add	r2, sp, #56	@ 0x38
 803033e:	4659      	mov	r1, fp
 8030340:	f7ff fb8e 	bl	802fa60 <__ssprint_r>
 8030344:	2800      	cmp	r0, #0
 8030346:	f43f aec4 	beq.w	80300d2 <_svfiprintf_r+0x576>
 803034a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 803034e:	065b      	lsls	r3, r3, #25
 8030350:	f53f ac1c 	bmi.w	802fb8c <_svfiprintf_r+0x30>
 8030354:	9804      	ldr	r0, [sp, #16]
 8030356:	b03b      	add	sp, #236	@ 0xec
 8030358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803035c:	3110      	adds	r1, #16
 803035e:	2a07      	cmp	r2, #7
 8030360:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8030364:	f8c3 8004 	str.w	r8, [r3, #4]
 8030368:	dc02      	bgt.n	8030370 <_svfiprintf_r+0x814>
 803036a:	3308      	adds	r3, #8
 803036c:	3c10      	subs	r4, #16
 803036e:	e7d6      	b.n	803031e <_svfiprintf_r+0x7c2>
 8030370:	9801      	ldr	r0, [sp, #4]
 8030372:	aa0e      	add	r2, sp, #56	@ 0x38
 8030374:	4659      	mov	r1, fp
 8030376:	f7ff fb73 	bl	802fa60 <__ssprint_r>
 803037a:	2800      	cmp	r0, #0
 803037c:	d1e5      	bne.n	803034a <_svfiprintf_r+0x7ee>
 803037e:	ab11      	add	r3, sp, #68	@ 0x44
 8030380:	e7f4      	b.n	803036c <_svfiprintf_r+0x810>
 8030382:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8030384:	2b00      	cmp	r3, #0
 8030386:	d0e0      	beq.n	803034a <_svfiprintf_r+0x7ee>
 8030388:	9801      	ldr	r0, [sp, #4]
 803038a:	aa0e      	add	r2, sp, #56	@ 0x38
 803038c:	4659      	mov	r1, fp
 803038e:	f7ff fb67 	bl	802fa60 <__ssprint_r>
 8030392:	e7da      	b.n	803034a <_svfiprintf_r+0x7ee>
 8030394:	ea54 0205 	orrs.w	r2, r4, r5
 8030398:	46ca      	mov	sl, r9
 803039a:	f43f adac 	beq.w	802fef6 <_svfiprintf_r+0x39a>
 803039e:	2b01      	cmp	r3, #1
 80303a0:	f43f aee7 	beq.w	8030172 <_svfiprintf_r+0x616>
 80303a4:	2b02      	cmp	r3, #2
 80303a6:	f10d 08e8 	add.w	r8, sp, #232	@ 0xe8
 80303aa:	f43f af2f 	beq.w	803020c <_svfiprintf_r+0x6b0>
 80303ae:	f004 0307 	and.w	r3, r4, #7
 80303b2:	08e4      	lsrs	r4, r4, #3
 80303b4:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 80303b8:	08ed      	lsrs	r5, r5, #3
 80303ba:	3330      	adds	r3, #48	@ 0x30
 80303bc:	ea54 0105 	orrs.w	r1, r4, r5
 80303c0:	4642      	mov	r2, r8
 80303c2:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80303c6:	d1f2      	bne.n	80303ae <_svfiprintf_r+0x852>
 80303c8:	f01a 0f01 	tst.w	sl, #1
 80303cc:	d006      	beq.n	80303dc <_svfiprintf_r+0x880>
 80303ce:	2b30      	cmp	r3, #48	@ 0x30
 80303d0:	d004      	beq.n	80303dc <_svfiprintf_r+0x880>
 80303d2:	2330      	movs	r3, #48	@ 0x30
 80303d4:	f808 3c01 	strb.w	r3, [r8, #-1]
 80303d8:	f1a2 0802 	sub.w	r8, r2, #2
 80303dc:	ab3a      	add	r3, sp, #232	@ 0xe8
 80303de:	eba3 0308 	sub.w	r3, r3, r8
 80303e2:	9c00      	ldr	r4, [sp, #0]
 80303e4:	9300      	str	r3, [sp, #0]
 80303e6:	46d1      	mov	r9, sl
 80303e8:	e5c2      	b.n	802ff70 <_svfiprintf_r+0x414>
 80303ea:	bf00      	nop
 80303ec:	0803c97f 	.word	0x0803c97f
 80303f0:	0803c96f 	.word	0x0803c96f

080303f4 <_sungetc_r>:
 80303f4:	b538      	push	{r3, r4, r5, lr}
 80303f6:	1c4b      	adds	r3, r1, #1
 80303f8:	4614      	mov	r4, r2
 80303fa:	d103      	bne.n	8030404 <_sungetc_r+0x10>
 80303fc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8030400:	4628      	mov	r0, r5
 8030402:	bd38      	pop	{r3, r4, r5, pc}
 8030404:	8993      	ldrh	r3, [r2, #12]
 8030406:	f023 0320 	bic.w	r3, r3, #32
 803040a:	8193      	strh	r3, [r2, #12]
 803040c:	6853      	ldr	r3, [r2, #4]
 803040e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8030410:	b2cd      	uxtb	r5, r1
 8030412:	b18a      	cbz	r2, 8030438 <_sungetc_r+0x44>
 8030414:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8030416:	429a      	cmp	r2, r3
 8030418:	dd08      	ble.n	803042c <_sungetc_r+0x38>
 803041a:	6823      	ldr	r3, [r4, #0]
 803041c:	1e5a      	subs	r2, r3, #1
 803041e:	6022      	str	r2, [r4, #0]
 8030420:	f803 5c01 	strb.w	r5, [r3, #-1]
 8030424:	6863      	ldr	r3, [r4, #4]
 8030426:	3301      	adds	r3, #1
 8030428:	6063      	str	r3, [r4, #4]
 803042a:	e7e9      	b.n	8030400 <_sungetc_r+0xc>
 803042c:	4621      	mov	r1, r4
 803042e:	f005 f8a7 	bl	8035580 <__submore>
 8030432:	2800      	cmp	r0, #0
 8030434:	d0f1      	beq.n	803041a <_sungetc_r+0x26>
 8030436:	e7e1      	b.n	80303fc <_sungetc_r+0x8>
 8030438:	6921      	ldr	r1, [r4, #16]
 803043a:	6822      	ldr	r2, [r4, #0]
 803043c:	b141      	cbz	r1, 8030450 <_sungetc_r+0x5c>
 803043e:	4291      	cmp	r1, r2
 8030440:	d206      	bcs.n	8030450 <_sungetc_r+0x5c>
 8030442:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8030446:	42a9      	cmp	r1, r5
 8030448:	d102      	bne.n	8030450 <_sungetc_r+0x5c>
 803044a:	3a01      	subs	r2, #1
 803044c:	6022      	str	r2, [r4, #0]
 803044e:	e7ea      	b.n	8030426 <_sungetc_r+0x32>
 8030450:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
 8030454:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8030458:	6323      	str	r3, [r4, #48]	@ 0x30
 803045a:	2303      	movs	r3, #3
 803045c:	6363      	str	r3, [r4, #52]	@ 0x34
 803045e:	4623      	mov	r3, r4
 8030460:	f803 5f42 	strb.w	r5, [r3, #66]!
 8030464:	6023      	str	r3, [r4, #0]
 8030466:	2301      	movs	r3, #1
 8030468:	e7de      	b.n	8030428 <_sungetc_r+0x34>

0803046a <__ssrefill_r>:
 803046a:	b510      	push	{r4, lr}
 803046c:	460c      	mov	r4, r1
 803046e:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 8030470:	b169      	cbz	r1, 803048e <__ssrefill_r+0x24>
 8030472:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8030476:	4299      	cmp	r1, r3
 8030478:	d001      	beq.n	803047e <__ssrefill_r+0x14>
 803047a:	f7fe ff2f 	bl	802f2dc <_free_r>
 803047e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8030480:	6063      	str	r3, [r4, #4]
 8030482:	2000      	movs	r0, #0
 8030484:	6320      	str	r0, [r4, #48]	@ 0x30
 8030486:	b113      	cbz	r3, 803048e <__ssrefill_r+0x24>
 8030488:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 803048a:	6023      	str	r3, [r4, #0]
 803048c:	bd10      	pop	{r4, pc}
 803048e:	6923      	ldr	r3, [r4, #16]
 8030490:	6023      	str	r3, [r4, #0]
 8030492:	2300      	movs	r3, #0
 8030494:	6063      	str	r3, [r4, #4]
 8030496:	89a3      	ldrh	r3, [r4, #12]
 8030498:	f043 0320 	orr.w	r3, r3, #32
 803049c:	81a3      	strh	r3, [r4, #12]
 803049e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80304a2:	e7f3      	b.n	803048c <__ssrefill_r+0x22>

080304a4 <_sfread_r>:
 80304a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80304a8:	461f      	mov	r7, r3
 80304aa:	4613      	mov	r3, r2
 80304ac:	437b      	muls	r3, r7
 80304ae:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80304b0:	9000      	str	r0, [sp, #0]
 80304b2:	4688      	mov	r8, r1
 80304b4:	4691      	mov	r9, r2
 80304b6:	d028      	beq.n	803050a <_sfread_r+0x66>
 80304b8:	461e      	mov	r6, r3
 80304ba:	f04f 0b00 	mov.w	fp, #0
 80304be:	e9d4 1500 	ldrd	r1, r5, [r4]
 80304c2:	42b5      	cmp	r5, r6
 80304c4:	d30b      	bcc.n	80304de <_sfread_r+0x3a>
 80304c6:	4632      	mov	r2, r6
 80304c8:	4640      	mov	r0, r8
 80304ca:	f7fe f805 	bl	802e4d8 <memcpy>
 80304ce:	6862      	ldr	r2, [r4, #4]
 80304d0:	6821      	ldr	r1, [r4, #0]
 80304d2:	1b92      	subs	r2, r2, r6
 80304d4:	4431      	add	r1, r6
 80304d6:	6062      	str	r2, [r4, #4]
 80304d8:	6021      	str	r1, [r4, #0]
 80304da:	463b      	mov	r3, r7
 80304dc:	e015      	b.n	803050a <_sfread_r+0x66>
 80304de:	462a      	mov	r2, r5
 80304e0:	4640      	mov	r0, r8
 80304e2:	9301      	str	r3, [sp, #4]
 80304e4:	f7fd fff8 	bl	802e4d8 <memcpy>
 80304e8:	6822      	ldr	r2, [r4, #0]
 80304ea:	9800      	ldr	r0, [sp, #0]
 80304ec:	442a      	add	r2, r5
 80304ee:	e9c4 2b00 	strd	r2, fp, [r4]
 80304f2:	4621      	mov	r1, r4
 80304f4:	f7ff ffb9 	bl	803046a <__ssrefill_r>
 80304f8:	44a8      	add	r8, r5
 80304fa:	9b01      	ldr	r3, [sp, #4]
 80304fc:	eba6 0a05 	sub.w	sl, r6, r5
 8030500:	b138      	cbz	r0, 8030512 <_sfread_r+0x6e>
 8030502:	441d      	add	r5, r3
 8030504:	1bad      	subs	r5, r5, r6
 8030506:	fbb5 f3f9 	udiv	r3, r5, r9
 803050a:	4618      	mov	r0, r3
 803050c:	b003      	add	sp, #12
 803050e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8030512:	4656      	mov	r6, sl
 8030514:	e7d3      	b.n	80304be <_sfread_r+0x1a>
	...

08030518 <__ssvfiscanf_r>:
 8030518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803051c:	b0df      	sub	sp, #380	@ 0x17c
 803051e:	af02      	add	r7, sp, #8
 8030520:	460c      	mov	r4, r1
 8030522:	623b      	str	r3, [r7, #32]
 8030524:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8030528:	6278      	str	r0, [r7, #36]	@ 0x24
 803052a:	049d      	lsls	r5, r3, #18
 803052c:	60ba      	str	r2, [r7, #8]
 803052e:	d406      	bmi.n	803053e <__ssvfiscanf_r+0x26>
 8030530:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8030534:	818b      	strh	r3, [r1, #12]
 8030536:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8030538:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 803053c:	664b      	str	r3, [r1, #100]	@ 0x64
 803053e:	2300      	movs	r3, #0
 8030540:	e9c7 3305 	strd	r3, r3, [r7, #20]
 8030544:	60fb      	str	r3, [r7, #12]
 8030546:	469b      	mov	fp, r3
 8030548:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803054a:	61fb      	str	r3, [r7, #28]
 803054c:	e005      	b.n	803055a <__ssvfiscanf_r+0x42>
 803054e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030550:	4621      	mov	r1, r4
 8030552:	f7ff ff8a 	bl	803046a <__ssrefill_r>
 8030556:	b168      	cbz	r0, 8030574 <__ssvfiscanf_r+0x5c>
 8030558:	60bd      	str	r5, [r7, #8]
 803055a:	68bd      	ldr	r5, [r7, #8]
 803055c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8030560:	637b      	str	r3, [r7, #52]	@ 0x34
 8030562:	b333      	cbz	r3, 80305b2 <__ssvfiscanf_r+0x9a>
 8030564:	4a75      	ldr	r2, [pc, #468]	@ (803073c <__ssvfiscanf_r+0x224>)
 8030566:	5cd6      	ldrb	r6, [r2, r3]
 8030568:	f016 0608 	ands.w	r6, r6, #8
 803056c:	d011      	beq.n	8030592 <__ssvfiscanf_r+0x7a>
 803056e:	6863      	ldr	r3, [r4, #4]
 8030570:	2b00      	cmp	r3, #0
 8030572:	ddec      	ble.n	803054e <__ssvfiscanf_r+0x36>
 8030574:	6823      	ldr	r3, [r4, #0]
 8030576:	4971      	ldr	r1, [pc, #452]	@ (803073c <__ssvfiscanf_r+0x224>)
 8030578:	781a      	ldrb	r2, [r3, #0]
 803057a:	5c8a      	ldrb	r2, [r1, r2]
 803057c:	0710      	lsls	r0, r2, #28
 803057e:	d5eb      	bpl.n	8030558 <__ssvfiscanf_r+0x40>
 8030580:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8030582:	3201      	adds	r2, #1
 8030584:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8030586:	6862      	ldr	r2, [r4, #4]
 8030588:	3301      	adds	r3, #1
 803058a:	3a01      	subs	r2, #1
 803058c:	6062      	str	r2, [r4, #4]
 803058e:	6023      	str	r3, [r4, #0]
 8030590:	e7ed      	b.n	803056e <__ssvfiscanf_r+0x56>
 8030592:	2b25      	cmp	r3, #37	@ 0x25
 8030594:	d15f      	bne.n	8030656 <__ssvfiscanf_r+0x13e>
 8030596:	62be      	str	r6, [r7, #40]	@ 0x28
 8030598:	462a      	mov	r2, r5
 803059a:	f812 3b01 	ldrb.w	r3, [r2], #1
 803059e:	60ba      	str	r2, [r7, #8]
 80305a0:	2b7a      	cmp	r3, #122	@ 0x7a
 80305a2:	d806      	bhi.n	80305b2 <__ssvfiscanf_r+0x9a>
 80305a4:	2b42      	cmp	r3, #66	@ 0x42
 80305a6:	d809      	bhi.n	80305bc <__ssvfiscanf_r+0xa4>
 80305a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80305aa:	d079      	beq.n	80306a0 <__ssvfiscanf_r+0x188>
 80305ac:	d844      	bhi.n	8030638 <__ssvfiscanf_r+0x120>
 80305ae:	2b25      	cmp	r3, #37	@ 0x25
 80305b0:	d050      	beq.n	8030654 <__ssvfiscanf_r+0x13c>
 80305b2:	f1bb 0f00 	cmp.w	fp, #0
 80305b6:	f000 810e 	beq.w	80307d6 <__ssvfiscanf_r+0x2be>
 80305ba:	e107      	b.n	80307cc <__ssvfiscanf_r+0x2b4>
 80305bc:	3b43      	subs	r3, #67	@ 0x43
 80305be:	2b37      	cmp	r3, #55	@ 0x37
 80305c0:	f200 80fd 	bhi.w	80307be <__ssvfiscanf_r+0x2a6>
 80305c4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80305c8:	00a40117 	.word	0x00a40117
 80305cc:	00fb00fb 	.word	0x00fb00fb
 80305d0:	00fb00fb 	.word	0x00fb00fb
 80305d4:	00fb00fb 	.word	0x00fb00fb
 80305d8:	008e00fb 	.word	0x008e00fb
 80305dc:	00fb00fb 	.word	0x00fb00fb
 80305e0:	00fb00a8 	.word	0x00fb00a8
 80305e4:	00fb00fb 	.word	0x00fb00fb
 80305e8:	00fb00c0 	.word	0x00fb00c0
 80305ec:	00fb00fb 	.word	0x00fb00fb
 80305f0:	00b400fb 	.word	0x00b400fb
 80305f4:	00fb00fb 	.word	0x00fb00fb
 80305f8:	00fb010d 	.word	0x00fb010d
 80305fc:	00fb00fb 	.word	0x00fb00fb
 8030600:	00fb00fb 	.word	0x00fb00fb
 8030604:	00fb00fb 	.word	0x00fb00fb
 8030608:	00a60119 	.word	0x00a60119
 803060c:	00fb00fb 	.word	0x00fb00fb
 8030610:	008100fb 	.word	0x008100fb
 8030614:	008e013e 	.word	0x008e013e
 8030618:	007300fb 	.word	0x007300fb
 803061c:	01200095 	.word	0x01200095
 8030620:	011d00aa 	.word	0x011d00aa
 8030624:	00fb00fb 	.word	0x00fb00fb
 8030628:	009200c2 	.word	0x009200c2
 803062c:	00fb00b0 	.word	0x00fb00b0
 8030630:	00b400fb 	.word	0x00b400fb
 8030634:	009200fb 	.word	0x009200fb
 8030638:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 803063c:	2a09      	cmp	r2, #9
 803063e:	d8b8      	bhi.n	80305b2 <__ssvfiscanf_r+0x9a>
 8030640:	f016 0f8f 	tst.w	r6, #143	@ 0x8f
 8030644:	d1b5      	bne.n	80305b2 <__ssvfiscanf_r+0x9a>
 8030646:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8030648:	220a      	movs	r2, #10
 803064a:	fb02 3301 	mla	r3, r2, r1, r3
 803064e:	3b30      	subs	r3, #48	@ 0x30
 8030650:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030652:	e02a      	b.n	80306aa <__ssvfiscanf_r+0x192>
 8030654:	68bd      	ldr	r5, [r7, #8]
 8030656:	6863      	ldr	r3, [r4, #4]
 8030658:	2b00      	cmp	r3, #0
 803065a:	dd0e      	ble.n	803067a <__ssvfiscanf_r+0x162>
 803065c:	6823      	ldr	r3, [r4, #0]
 803065e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8030662:	7819      	ldrb	r1, [r3, #0]
 8030664:	4291      	cmp	r1, r2
 8030666:	d1a4      	bne.n	80305b2 <__ssvfiscanf_r+0x9a>
 8030668:	3301      	adds	r3, #1
 803066a:	6862      	ldr	r2, [r4, #4]
 803066c:	6023      	str	r3, [r4, #0]
 803066e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8030670:	3a01      	subs	r2, #1
 8030672:	3301      	adds	r3, #1
 8030674:	6062      	str	r2, [r4, #4]
 8030676:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8030678:	e76e      	b.n	8030558 <__ssvfiscanf_r+0x40>
 803067a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803067c:	4621      	mov	r1, r4
 803067e:	f7ff fef4 	bl	803046a <__ssrefill_r>
 8030682:	2800      	cmp	r0, #0
 8030684:	d0ea      	beq.n	803065c <__ssvfiscanf_r+0x144>
 8030686:	69fb      	ldr	r3, [r7, #28]
 8030688:	b113      	cbz	r3, 8030690 <__ssvfiscanf_r+0x178>
 803068a:	89a3      	ldrh	r3, [r4, #12]
 803068c:	065b      	lsls	r3, r3, #25
 803068e:	d590      	bpl.n	80305b2 <__ssvfiscanf_r+0x9a>
 8030690:	f1bb 0f00 	cmp.w	fp, #0
 8030694:	f040 8654 	bne.w	8031340 <__ssvfiscanf_r+0xe28>
 8030698:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803069c:	61fb      	str	r3, [r7, #28]
 803069e:	e09a      	b.n	80307d6 <__ssvfiscanf_r+0x2be>
 80306a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80306a2:	4333      	orrs	r3, r6
 80306a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80306a6:	d184      	bne.n	80305b2 <__ssvfiscanf_r+0x9a>
 80306a8:	2610      	movs	r6, #16
 80306aa:	68bd      	ldr	r5, [r7, #8]
 80306ac:	e774      	b.n	8030598 <__ssvfiscanf_r+0x80>
 80306ae:	0731      	lsls	r1, r6, #28
 80306b0:	f47f af7f 	bne.w	80305b2 <__ssvfiscanf_r+0x9a>
 80306b4:	786b      	ldrb	r3, [r5, #1]
 80306b6:	2b6c      	cmp	r3, #108	@ 0x6c
 80306b8:	d104      	bne.n	80306c4 <__ssvfiscanf_r+0x1ac>
 80306ba:	1cab      	adds	r3, r5, #2
 80306bc:	60bb      	str	r3, [r7, #8]
 80306be:	f046 0602 	orr.w	r6, r6, #2
 80306c2:	e7f2      	b.n	80306aa <__ssvfiscanf_r+0x192>
 80306c4:	f046 0601 	orr.w	r6, r6, #1
 80306c8:	e7ef      	b.n	80306aa <__ssvfiscanf_r+0x192>
 80306ca:	0732      	lsls	r2, r6, #28
 80306cc:	f47f af71 	bne.w	80305b2 <__ssvfiscanf_r+0x9a>
 80306d0:	786b      	ldrb	r3, [r5, #1]
 80306d2:	2b68      	cmp	r3, #104	@ 0x68
 80306d4:	bf03      	ittte	eq
 80306d6:	1cab      	addeq	r3, r5, #2
 80306d8:	60bb      	streq	r3, [r7, #8]
 80306da:	f046 0608 	orreq.w	r6, r6, #8
 80306de:	f046 0604 	orrne.w	r6, r6, #4
 80306e2:	e7e2      	b.n	80306aa <__ssvfiscanf_r+0x192>
 80306e4:	0733      	lsls	r3, r6, #28
 80306e6:	f47f af64 	bne.w	80305b2 <__ssvfiscanf_r+0x9a>
 80306ea:	e7e8      	b.n	80306be <__ssvfiscanf_r+0x1a6>
 80306ec:	0735      	lsls	r5, r6, #28
 80306ee:	d0dc      	beq.n	80306aa <__ssvfiscanf_r+0x192>
 80306f0:	e75f      	b.n	80305b2 <__ssvfiscanf_r+0x9a>
 80306f2:	f016 038f 	ands.w	r3, r6, #143	@ 0x8f
 80306f6:	f47f af5c 	bne.w	80305b2 <__ssvfiscanf_r+0x9a>
 80306fa:	f1bb 0f00 	cmp.w	fp, #0
 80306fe:	d104      	bne.n	803070a <__ssvfiscanf_r+0x1f2>
 8030700:	b082      	sub	sp, #8
 8030702:	f10d 0b08 	add.w	fp, sp, #8
 8030706:	e9cb 3300 	strd	r3, r3, [fp]
 803070a:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
 803070e:	e7cc      	b.n	80306aa <__ssvfiscanf_r+0x192>
 8030710:	f046 0601 	orr.w	r6, r6, #1
 8030714:	4b0a      	ldr	r3, [pc, #40]	@ (8030740 <__ssvfiscanf_r+0x228>)
 8030716:	e008      	b.n	803072a <__ssvfiscanf_r+0x212>
 8030718:	f046 0601 	orr.w	r6, r6, #1
 803071c:	4b09      	ldr	r3, [pc, #36]	@ (8030744 <__ssvfiscanf_r+0x22c>)
 803071e:	60fb      	str	r3, [r7, #12]
 8030720:	2308      	movs	r3, #8
 8030722:	617b      	str	r3, [r7, #20]
 8030724:	2503      	movs	r5, #3
 8030726:	e012      	b.n	803074e <__ssvfiscanf_r+0x236>
 8030728:	4b06      	ldr	r3, [pc, #24]	@ (8030744 <__ssvfiscanf_r+0x22c>)
 803072a:	60fb      	str	r3, [r7, #12]
 803072c:	230a      	movs	r3, #10
 803072e:	e7f8      	b.n	8030722 <__ssvfiscanf_r+0x20a>
 8030730:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 8030734:	4b03      	ldr	r3, [pc, #12]	@ (8030744 <__ssvfiscanf_r+0x22c>)
 8030736:	60fb      	str	r3, [r7, #12]
 8030738:	2310      	movs	r3, #16
 803073a:	e7f2      	b.n	8030722 <__ssvfiscanf_r+0x20a>
 803073c:	0803c7f9 	.word	0x0803c7f9
 8030740:	0802c769 	.word	0x0802c769
 8030744:	08035569 	.word	0x08035569
 8030748:	f046 0601 	orr.w	r6, r6, #1
 803074c:	2502      	movs	r5, #2
 803074e:	6863      	ldr	r3, [r4, #4]
 8030750:	2b00      	cmp	r3, #0
 8030752:	dd7b      	ble.n	803084c <__ssvfiscanf_r+0x334>
 8030754:	0671      	lsls	r1, r6, #25
 8030756:	d407      	bmi.n	8030768 <__ssvfiscanf_r+0x250>
 8030758:	f8df 8388 	ldr.w	r8, [pc, #904]	@ 8030ae4 <__ssvfiscanf_r+0x5cc>
 803075c:	6823      	ldr	r3, [r4, #0]
 803075e:	781a      	ldrb	r2, [r3, #0]
 8030760:	f818 2002 	ldrb.w	r2, [r8, r2]
 8030764:	0712      	lsls	r2, r2, #28
 8030766:	d479      	bmi.n	803085c <__ssvfiscanf_r+0x344>
 8030768:	2d02      	cmp	r5, #2
 803076a:	f000 836f 	beq.w	8030e4c <__ssvfiscanf_r+0x934>
 803076e:	2d03      	cmp	r5, #3
 8030770:	f000 84f6 	beq.w	8031160 <__ssvfiscanf_r+0xc48>
 8030774:	f006 0310 	and.w	r3, r6, #16
 8030778:	2d01      	cmp	r5, #1
 803077a:	613b      	str	r3, [r7, #16]
 803077c:	f006 0501 	and.w	r5, r6, #1
 8030780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030782:	f000 81b1 	beq.w	8030ae8 <__ssvfiscanf_r+0x5d0>
 8030786:	2b01      	cmp	r3, #1
 8030788:	bf38      	it	cc
 803078a:	2301      	movcc	r3, #1
 803078c:	4698      	mov	r8, r3
 803078e:	693b      	ldr	r3, [r7, #16]
 8030790:	2d00      	cmp	r5, #0
 8030792:	f000 813b 	beq.w	8030a0c <__ssvfiscanf_r+0x4f4>
 8030796:	2b00      	cmp	r3, #0
 8030798:	f040 80d8 	bne.w	803094c <__ssvfiscanf_r+0x434>
 803079c:	6a3b      	ldr	r3, [r7, #32]
 803079e:	0636      	lsls	r6, r6, #24
 80307a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80307a4:	623b      	str	r3, [r7, #32]
 80307a6:	f140 80d7 	bpl.w	8030958 <__ssvfiscanf_r+0x440>
 80307aa:	b145      	cbz	r5, 80307be <__ssvfiscanf_r+0x2a6>
 80307ac:	2080      	movs	r0, #128	@ 0x80
 80307ae:	f7fe fe9d 	bl	802f4ec <malloc>
 80307b2:	4606      	mov	r6, r0
 80307b4:	2800      	cmp	r0, #0
 80307b6:	d164      	bne.n	8030882 <__ssvfiscanf_r+0x36a>
 80307b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80307bc:	61fb      	str	r3, [r7, #28]
 80307be:	f1bb 0f00 	cmp.w	fp, #0
 80307c2:	d008      	beq.n	80307d6 <__ssvfiscanf_r+0x2be>
 80307c4:	69fb      	ldr	r3, [r7, #28]
 80307c6:	3301      	adds	r3, #1
 80307c8:	f000 85ba 	beq.w	8031340 <__ssvfiscanf_r+0xe28>
 80307cc:	f8db 0000 	ldr.w	r0, [fp]
 80307d0:	b108      	cbz	r0, 80307d6 <__ssvfiscanf_r+0x2be>
 80307d2:	f7fe fe93 	bl	802f4fc <free>
 80307d6:	69f8      	ldr	r0, [r7, #28]
 80307d8:	f507 77ba 	add.w	r7, r7, #372	@ 0x174
 80307dc:	46bd      	mov	sp, r7
 80307de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80307e2:	68b9      	ldr	r1, [r7, #8]
 80307e4:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 80307e8:	f003 fe67 	bl	80344ba <__sccl>
 80307ec:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 80307f0:	60b8      	str	r0, [r7, #8]
 80307f2:	2501      	movs	r5, #1
 80307f4:	e7ab      	b.n	803074e <__ssvfiscanf_r+0x236>
 80307f6:	f046 0601 	orr.w	r6, r6, #1
 80307fa:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 80307fe:	2500      	movs	r5, #0
 8030800:	e7a5      	b.n	803074e <__ssvfiscanf_r+0x236>
 8030802:	f446 7608 	orr.w	r6, r6, #544	@ 0x220
 8030806:	e795      	b.n	8030734 <__ssvfiscanf_r+0x21c>
 8030808:	06f0      	lsls	r0, r6, #27
 803080a:	f53f aea6 	bmi.w	803055a <__ssvfiscanf_r+0x42>
 803080e:	6a3a      	ldr	r2, [r7, #32]
 8030810:	0731      	lsls	r1, r6, #28
 8030812:	f852 3b04 	ldr.w	r3, [r2], #4
 8030816:	623a      	str	r2, [r7, #32]
 8030818:	d502      	bpl.n	8030820 <__ssvfiscanf_r+0x308>
 803081a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 803081c:	701a      	strb	r2, [r3, #0]
 803081e:	e69c      	b.n	803055a <__ssvfiscanf_r+0x42>
 8030820:	0772      	lsls	r2, r6, #29
 8030822:	d502      	bpl.n	803082a <__ssvfiscanf_r+0x312>
 8030824:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8030826:	801a      	strh	r2, [r3, #0]
 8030828:	e697      	b.n	803055a <__ssvfiscanf_r+0x42>
 803082a:	07f5      	lsls	r5, r6, #31
 803082c:	d502      	bpl.n	8030834 <__ssvfiscanf_r+0x31c>
 803082e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8030830:	601a      	str	r2, [r3, #0]
 8030832:	e692      	b.n	803055a <__ssvfiscanf_r+0x42>
 8030834:	07b0      	lsls	r0, r6, #30
 8030836:	d5fa      	bpl.n	803082e <__ssvfiscanf_r+0x316>
 8030838:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 803083a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 803083c:	17d2      	asrs	r2, r2, #31
 803083e:	e9c3 1200 	strd	r1, r2, [r3]
 8030842:	e68a      	b.n	803055a <__ssvfiscanf_r+0x42>
 8030844:	4ba6      	ldr	r3, [pc, #664]	@ (8030ae0 <__ssvfiscanf_r+0x5c8>)
 8030846:	60fb      	str	r3, [r7, #12]
 8030848:	2300      	movs	r3, #0
 803084a:	e76a      	b.n	8030722 <__ssvfiscanf_r+0x20a>
 803084c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803084e:	4621      	mov	r1, r4
 8030850:	f7ff fe0b 	bl	803046a <__ssrefill_r>
 8030854:	2800      	cmp	r0, #0
 8030856:	f43f af7d 	beq.w	8030754 <__ssvfiscanf_r+0x23c>
 803085a:	e714      	b.n	8030686 <__ssvfiscanf_r+0x16e>
 803085c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 803085e:	3201      	adds	r2, #1
 8030860:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8030862:	6862      	ldr	r2, [r4, #4]
 8030864:	3a01      	subs	r2, #1
 8030866:	2a00      	cmp	r2, #0
 8030868:	6062      	str	r2, [r4, #4]
 803086a:	dd02      	ble.n	8030872 <__ssvfiscanf_r+0x35a>
 803086c:	3301      	adds	r3, #1
 803086e:	6023      	str	r3, [r4, #0]
 8030870:	e774      	b.n	803075c <__ssvfiscanf_r+0x244>
 8030872:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030874:	4621      	mov	r1, r4
 8030876:	f7ff fdf8 	bl	803046a <__ssrefill_r>
 803087a:	2800      	cmp	r0, #0
 803087c:	f43f af6e 	beq.w	803075c <__ssvfiscanf_r+0x244>
 8030880:	e701      	b.n	8030686 <__ssvfiscanf_r+0x16e>
 8030882:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8030886:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 803088a:	6028      	str	r0, [r5, #0]
 803088c:	4599      	cmp	r9, r3
 803088e:	d314      	bcc.n	80308ba <__ssvfiscanf_r+0x3a2>
 8030890:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8030894:	4293      	cmp	r3, r2
 8030896:	f200 8553 	bhi.w	8031340 <__ssvfiscanf_r+0xe28>
 803089a:	3308      	adds	r3, #8
 803089c:	fa1f fa83 	uxth.w	sl, r3
 80308a0:	f8db 0000 	ldr.w	r0, [fp]
 80308a4:	ea4f 018a 	mov.w	r1, sl, lsl #2
 80308a8:	f003 fdaa 	bl	8034400 <realloc>
 80308ac:	2800      	cmp	r0, #0
 80308ae:	f000 8547 	beq.w	8031340 <__ssvfiscanf_r+0xe28>
 80308b2:	f8cb 0000 	str.w	r0, [fp]
 80308b6:	f8ab a004 	strh.w	sl, [fp, #4]
 80308ba:	f8db 3000 	ldr.w	r3, [fp]
 80308be:	f109 0201 	add.w	r2, r9, #1
 80308c2:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 80308c6:	46aa      	mov	sl, r5
 80308c8:	f8ab 2006 	strh.w	r2, [fp, #6]
 80308cc:	4635      	mov	r5, r6
 80308ce:	f04f 0920 	mov.w	r9, #32
 80308d2:	2200      	movs	r2, #0
 80308d4:	62ba      	str	r2, [r7, #40]	@ 0x28
 80308d6:	f7fd fd4b 	bl	802e370 <__locale_mb_cur_max>
 80308da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80308dc:	4290      	cmp	r0, r2
 80308de:	f43f aed2 	beq.w	8030686 <__ssvfiscanf_r+0x16e>
 80308e2:	6821      	ldr	r1, [r4, #0]
 80308e4:	f107 0c48 	add.w	ip, r7, #72	@ 0x48
 80308e8:	f811 0b01 	ldrb.w	r0, [r1], #1
 80308ec:	f80c 0002 	strb.w	r0, [ip, r2]
 80308f0:	1c53      	adds	r3, r2, #1
 80308f2:	6862      	ldr	r2, [r4, #4]
 80308f4:	3a01      	subs	r2, #1
 80308f6:	e9c4 1200 	strd	r1, r2, [r4]
 80308fa:	69ba      	ldr	r2, [r7, #24]
 80308fc:	2a03      	cmp	r2, #3
 80308fe:	d102      	bne.n	8030906 <__ssvfiscanf_r+0x3ee>
 8030900:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8030902:	2a04      	cmp	r2, #4
 8030904:	d007      	beq.n	8030916 <__ssvfiscanf_r+0x3fe>
 8030906:	2208      	movs	r2, #8
 8030908:	2100      	movs	r1, #0
 803090a:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 803090e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030910:	f7fc fba6 	bl	802d060 <memset>
 8030914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030916:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 803091a:	9200      	str	r2, [sp, #0]
 803091c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803091e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030920:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8030924:	4629      	mov	r1, r5
 8030926:	f005 f925 	bl	8035b74 <_mbrtowc_r>
 803092a:	4603      	mov	r3, r0
 803092c:	61b8      	str	r0, [r7, #24]
 803092e:	1c58      	adds	r0, r3, #1
 8030930:	f43f aea9 	beq.w	8030686 <__ssvfiscanf_r+0x16e>
 8030934:	461a      	mov	r2, r3
 8030936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030938:	b9b2      	cbnz	r2, 8030968 <__ssvfiscanf_r+0x450>
 803093a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 803093c:	441a      	add	r2, r3
 803093e:	4613      	mov	r3, r2
 8030940:	693a      	ldr	r2, [r7, #16]
 8030942:	b172      	cbz	r2, 8030962 <__ssvfiscanf_r+0x44a>
 8030944:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8030946:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 803094a:	e019      	b.n	8030980 <__ssvfiscanf_r+0x468>
 803094c:	f04f 0900 	mov.w	r9, #0
 8030950:	464e      	mov	r6, r9
 8030952:	46ca      	mov	sl, r9
 8030954:	464d      	mov	r5, r9
 8030956:	e7bc      	b.n	80308d2 <__ssvfiscanf_r+0x3ba>
 8030958:	f8d7 9010 	ldr.w	r9, [r7, #16]
 803095c:	464e      	mov	r6, r9
 803095e:	46ca      	mov	sl, r9
 8030960:	e7b7      	b.n	80308d2 <__ssvfiscanf_r+0x3ba>
 8030962:	693a      	ldr	r2, [r7, #16]
 8030964:	602a      	str	r2, [r5, #0]
 8030966:	e7ed      	b.n	8030944 <__ssvfiscanf_r+0x42c>
 8030968:	69ba      	ldr	r2, [r7, #24]
 803096a:	3202      	adds	r2, #2
 803096c:	d024      	beq.n	80309b8 <__ssvfiscanf_r+0x4a0>
 803096e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8030970:	441a      	add	r2, r3
 8030972:	69bb      	ldr	r3, [r7, #24]
 8030974:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8030976:	2b03      	cmp	r3, #3
 8030978:	d1e5      	bne.n	8030946 <__ssvfiscanf_r+0x42e>
 803097a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 803097c:	2b04      	cmp	r3, #4
 803097e:	d1e2      	bne.n	8030946 <__ssvfiscanf_r+0x42e>
 8030980:	693b      	ldr	r3, [r7, #16]
 8030982:	b9bb      	cbnz	r3, 80309b4 <__ssvfiscanf_r+0x49c>
 8030984:	f1ba 0f00 	cmp.w	sl, #0
 8030988:	d013      	beq.n	80309b2 <__ssvfiscanf_r+0x49a>
 803098a:	1bab      	subs	r3, r5, r6
 803098c:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 8030990:	d80f      	bhi.n	80309b2 <__ssvfiscanf_r+0x49a>
 8030992:	4630      	mov	r0, r6
 8030994:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8030998:	62bb      	str	r3, [r7, #40]	@ 0x28
 803099a:	f003 fd31 	bl	8034400 <realloc>
 803099e:	4606      	mov	r6, r0
 80309a0:	2800      	cmp	r0, #0
 80309a2:	f43f af09 	beq.w	80307b8 <__ssvfiscanf_r+0x2a0>
 80309a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80309a8:	f8ca 0000 	str.w	r0, [sl]
 80309ac:	18c5      	adds	r5, r0, r3
 80309ae:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80309b2:	3504      	adds	r5, #4
 80309b4:	2200      	movs	r2, #0
 80309b6:	e000      	b.n	80309ba <__ssvfiscanf_r+0x4a2>
 80309b8:	461a      	mov	r2, r3
 80309ba:	6863      	ldr	r3, [r4, #4]
 80309bc:	2b00      	cmp	r3, #0
 80309be:	dc13      	bgt.n	80309e8 <__ssvfiscanf_r+0x4d0>
 80309c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80309c2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80309c4:	4621      	mov	r1, r4
 80309c6:	f7ff fd50 	bl	803046a <__ssrefill_r>
 80309ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80309cc:	b160      	cbz	r0, 80309e8 <__ssvfiscanf_r+0x4d0>
 80309ce:	2a00      	cmp	r2, #0
 80309d0:	f47f ae59 	bne.w	8030686 <__ssvfiscanf_r+0x16e>
 80309d4:	f1ba 0f00 	cmp.w	sl, #0
 80309d8:	d10b      	bne.n	80309f2 <__ssvfiscanf_r+0x4da>
 80309da:	693b      	ldr	r3, [r7, #16]
 80309dc:	2b00      	cmp	r3, #0
 80309de:	f47f adbc 	bne.w	803055a <__ssvfiscanf_r+0x42>
 80309e2:	69fb      	ldr	r3, [r7, #28]
 80309e4:	3301      	adds	r3, #1
 80309e6:	e5b0      	b.n	803054a <__ssvfiscanf_r+0x32>
 80309e8:	f1b8 0f00 	cmp.w	r8, #0
 80309ec:	f47f af72 	bne.w	80308d4 <__ssvfiscanf_r+0x3bc>
 80309f0:	e7f0      	b.n	80309d4 <__ssvfiscanf_r+0x4bc>
 80309f2:	1ba9      	subs	r1, r5, r6
 80309f4:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 80309f8:	d9ef      	bls.n	80309da <__ssvfiscanf_r+0x4c2>
 80309fa:	f8da 0000 	ldr.w	r0, [sl]
 80309fe:	f003 fcff 	bl	8034400 <realloc>
 8030a02:	2800      	cmp	r0, #0
 8030a04:	d0e9      	beq.n	80309da <__ssvfiscanf_r+0x4c2>
 8030a06:	f8ca 0000 	str.w	r0, [sl]
 8030a0a:	e7e6      	b.n	80309da <__ssvfiscanf_r+0x4c2>
 8030a0c:	b1db      	cbz	r3, 8030a46 <__ssvfiscanf_r+0x52e>
 8030a0e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8030a12:	4598      	cmp	r8, r3
 8030a14:	dd10      	ble.n	8030a38 <__ssvfiscanf_r+0x520>
 8030a16:	441a      	add	r2, r3
 8030a18:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030a1a:	6022      	str	r2, [r4, #0]
 8030a1c:	4621      	mov	r1, r4
 8030a1e:	441d      	add	r5, r3
 8030a20:	eba8 0803 	sub.w	r8, r8, r3
 8030a24:	f7ff fd21 	bl	803046a <__ssrefill_r>
 8030a28:	2800      	cmp	r0, #0
 8030a2a:	d0f0      	beq.n	8030a0e <__ssvfiscanf_r+0x4f6>
 8030a2c:	2d00      	cmp	r5, #0
 8030a2e:	f43f ae2a 	beq.w	8030686 <__ssvfiscanf_r+0x16e>
 8030a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8030a34:	442b      	add	r3, r5
 8030a36:	e201      	b.n	8030e3c <__ssvfiscanf_r+0x924>
 8030a38:	eba3 0308 	sub.w	r3, r3, r8
 8030a3c:	4442      	add	r2, r8
 8030a3e:	4445      	add	r5, r8
 8030a40:	6063      	str	r3, [r4, #4]
 8030a42:	6022      	str	r2, [r4, #0]
 8030a44:	e7f5      	b.n	8030a32 <__ssvfiscanf_r+0x51a>
 8030a46:	6a3b      	ldr	r3, [r7, #32]
 8030a48:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 8030a4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8030a50:	623b      	str	r3, [r7, #32]
 8030a52:	d02d      	beq.n	8030ab0 <__ssvfiscanf_r+0x598>
 8030a54:	2d00      	cmp	r5, #0
 8030a56:	f43f adac 	beq.w	80305b2 <__ssvfiscanf_r+0x9a>
 8030a5a:	4640      	mov	r0, r8
 8030a5c:	f7fe fd46 	bl	802f4ec <malloc>
 8030a60:	4681      	mov	r9, r0
 8030a62:	2800      	cmp	r0, #0
 8030a64:	f43f ae14 	beq.w	8030690 <__ssvfiscanf_r+0x178>
 8030a68:	f8bb a006 	ldrh.w	sl, [fp, #6]
 8030a6c:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 8030a70:	6028      	str	r0, [r5, #0]
 8030a72:	45b2      	cmp	sl, r6
 8030a74:	d312      	bcc.n	8030a9c <__ssvfiscanf_r+0x584>
 8030a76:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8030a7a:	429e      	cmp	r6, r3
 8030a7c:	f200 8460 	bhi.w	8031340 <__ssvfiscanf_r+0xe28>
 8030a80:	3608      	adds	r6, #8
 8030a82:	b2b6      	uxth	r6, r6
 8030a84:	f8db 0000 	ldr.w	r0, [fp]
 8030a88:	00b1      	lsls	r1, r6, #2
 8030a8a:	f003 fcb9 	bl	8034400 <realloc>
 8030a8e:	2800      	cmp	r0, #0
 8030a90:	f000 8456 	beq.w	8031340 <__ssvfiscanf_r+0xe28>
 8030a94:	f8cb 0000 	str.w	r0, [fp]
 8030a98:	f8ab 6004 	strh.w	r6, [fp, #4]
 8030a9c:	f8db 3000 	ldr.w	r3, [fp]
 8030aa0:	f10a 0201 	add.w	r2, sl, #1
 8030aa4:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 8030aa8:	462e      	mov	r6, r5
 8030aaa:	f8ab 2006 	strh.w	r2, [fp, #6]
 8030aae:	464d      	mov	r5, r9
 8030ab0:	9400      	str	r4, [sp, #0]
 8030ab2:	4629      	mov	r1, r5
 8030ab4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030ab6:	4643      	mov	r3, r8
 8030ab8:	2201      	movs	r2, #1
 8030aba:	f7ff fcf3 	bl	80304a4 <_sfread_r>
 8030abe:	4605      	mov	r5, r0
 8030ac0:	2800      	cmp	r0, #0
 8030ac2:	f43f ade0 	beq.w	8030686 <__ssvfiscanf_r+0x16e>
 8030ac6:	b13e      	cbz	r6, 8030ad8 <__ssvfiscanf_r+0x5c0>
 8030ac8:	4580      	cmp	r8, r0
 8030aca:	d905      	bls.n	8030ad8 <__ssvfiscanf_r+0x5c0>
 8030acc:	4601      	mov	r1, r0
 8030ace:	6830      	ldr	r0, [r6, #0]
 8030ad0:	f003 fc96 	bl	8034400 <realloc>
 8030ad4:	b100      	cbz	r0, 8030ad8 <__ssvfiscanf_r+0x5c0>
 8030ad6:	6030      	str	r0, [r6, #0]
 8030ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8030ada:	442b      	add	r3, r5
 8030adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8030ade:	e780      	b.n	80309e2 <__ssvfiscanf_r+0x4ca>
 8030ae0:	0802c769 	.word	0x0802c769
 8030ae4:	0803c7f9 	.word	0x0803c7f9
 8030ae8:	2b00      	cmp	r3, #0
 8030aea:	bf08      	it	eq
 8030aec:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 8030af0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030af2:	693b      	ldr	r3, [r7, #16]
 8030af4:	2d00      	cmp	r5, #0
 8030af6:	f000 8100 	beq.w	8030cfa <__ssvfiscanf_r+0x7e2>
 8030afa:	2b00      	cmp	r3, #0
 8030afc:	f040 80a5 	bne.w	8030c4a <__ssvfiscanf_r+0x732>
 8030b00:	6a3b      	ldr	r3, [r7, #32]
 8030b02:	0631      	lsls	r1, r6, #24
 8030b04:	f853 5b04 	ldr.w	r5, [r3], #4
 8030b08:	623b      	str	r3, [r7, #32]
 8030b0a:	f140 80a5 	bpl.w	8030c58 <__ssvfiscanf_r+0x740>
 8030b0e:	2d00      	cmp	r5, #0
 8030b10:	f43f ae55 	beq.w	80307be <__ssvfiscanf_r+0x2a6>
 8030b14:	2080      	movs	r0, #128	@ 0x80
 8030b16:	f7fe fce9 	bl	802f4ec <malloc>
 8030b1a:	4680      	mov	r8, r0
 8030b1c:	2800      	cmp	r0, #0
 8030b1e:	f43f ae4b 	beq.w	80307b8 <__ssvfiscanf_r+0x2a0>
 8030b22:	f8bb 6006 	ldrh.w	r6, [fp, #6]
 8030b26:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 8030b2a:	6028      	str	r0, [r5, #0]
 8030b2c:	429e      	cmp	r6, r3
 8030b2e:	d314      	bcc.n	8030b5a <__ssvfiscanf_r+0x642>
 8030b30:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8030b34:	4293      	cmp	r3, r2
 8030b36:	f200 8403 	bhi.w	8031340 <__ssvfiscanf_r+0xe28>
 8030b3a:	3308      	adds	r3, #8
 8030b3c:	fa1f f983 	uxth.w	r9, r3
 8030b40:	f8db 0000 	ldr.w	r0, [fp]
 8030b44:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8030b48:	f003 fc5a 	bl	8034400 <realloc>
 8030b4c:	2800      	cmp	r0, #0
 8030b4e:	f000 83f7 	beq.w	8031340 <__ssvfiscanf_r+0xe28>
 8030b52:	f8cb 0000 	str.w	r0, [fp]
 8030b56:	f8ab 9004 	strh.w	r9, [fp, #4]
 8030b5a:	f8db 3000 	ldr.w	r3, [fp]
 8030b5e:	1c72      	adds	r2, r6, #1
 8030b60:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 8030b64:	46aa      	mov	sl, r5
 8030b66:	f8ab 2006 	strh.w	r2, [fp, #6]
 8030b6a:	4645      	mov	r5, r8
 8030b6c:	f04f 0920 	mov.w	r9, #32
 8030b70:	2600      	movs	r6, #0
 8030b72:	f7fd fbfd 	bl	802e370 <__locale_mb_cur_max>
 8030b76:	4286      	cmp	r6, r0
 8030b78:	f43f ad85 	beq.w	8030686 <__ssvfiscanf_r+0x16e>
 8030b7c:	1c73      	adds	r3, r6, #1
 8030b7e:	607b      	str	r3, [r7, #4]
 8030b80:	6823      	ldr	r3, [r4, #0]
 8030b82:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8030b86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8030b8a:	558a      	strb	r2, [r1, r6]
 8030b8c:	6862      	ldr	r2, [r4, #4]
 8030b8e:	3a01      	subs	r2, #1
 8030b90:	e9c4 3200 	strd	r3, r2, [r4]
 8030b94:	69bb      	ldr	r3, [r7, #24]
 8030b96:	2b03      	cmp	r3, #3
 8030b98:	d102      	bne.n	8030ba0 <__ssvfiscanf_r+0x688>
 8030b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8030b9c:	2b04      	cmp	r3, #4
 8030b9e:	d005      	beq.n	8030bac <__ssvfiscanf_r+0x694>
 8030ba0:	2208      	movs	r2, #8
 8030ba2:	2100      	movs	r1, #0
 8030ba4:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8030ba8:	f7fc fa5a 	bl	802d060 <memset>
 8030bac:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8030bb0:	9300      	str	r3, [sp, #0]
 8030bb2:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8030bb6:	687b      	ldr	r3, [r7, #4]
 8030bb8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030bba:	4629      	mov	r1, r5
 8030bbc:	f004 ffda 	bl	8035b74 <_mbrtowc_r>
 8030bc0:	1c42      	adds	r2, r0, #1
 8030bc2:	61b8      	str	r0, [r7, #24]
 8030bc4:	f43f ad5f 	beq.w	8030686 <__ssvfiscanf_r+0x16e>
 8030bc8:	2800      	cmp	r0, #0
 8030bca:	d14a      	bne.n	8030c62 <__ssvfiscanf_r+0x74a>
 8030bcc:	6028      	str	r0, [r5, #0]
 8030bce:	682e      	ldr	r6, [r5, #0]
 8030bd0:	1c73      	adds	r3, r6, #1
 8030bd2:	d056      	beq.n	8030c82 <__ssvfiscanf_r+0x76a>
 8030bd4:	2208      	movs	r2, #8
 8030bd6:	2100      	movs	r1, #0
 8030bd8:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8030bdc:	f7fc fa40 	bl	802d060 <memset>
 8030be0:	4b99      	ldr	r3, [pc, #612]	@ (8030e48 <__ssvfiscanf_r+0x930>)
 8030be2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8030be8:	603b      	str	r3, [r7, #0]
 8030bea:	4632      	mov	r2, r6
 8030bec:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8030bf0:	683e      	ldr	r6, [r7, #0]
 8030bf2:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8030bf6:	47b0      	blx	r6
 8030bf8:	2801      	cmp	r0, #1
 8030bfa:	d144      	bne.n	8030c86 <__ssvfiscanf_r+0x76e>
 8030bfc:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8030c00:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8030c04:	5c9b      	ldrb	r3, [r3, r2]
 8030c06:	2b00      	cmp	r3, #0
 8030c08:	d148      	bne.n	8030c9c <__ssvfiscanf_r+0x784>
 8030c0a:	f107 0648 	add.w	r6, r7, #72	@ 0x48
 8030c0e:	687b      	ldr	r3, [r7, #4]
 8030c10:	2b00      	cmp	r3, #0
 8030c12:	d13a      	bne.n	8030c8a <__ssvfiscanf_r+0x772>
 8030c14:	693b      	ldr	r3, [r7, #16]
 8030c16:	2b00      	cmp	r3, #0
 8030c18:	f47f ac9f 	bne.w	803055a <__ssvfiscanf_r+0x42>
 8030c1c:	602b      	str	r3, [r5, #0]
 8030c1e:	f1ba 0f00 	cmp.w	sl, #0
 8030c22:	f43f aede 	beq.w	80309e2 <__ssvfiscanf_r+0x4ca>
 8030c26:	eba5 0108 	sub.w	r1, r5, r8
 8030c2a:	108b      	asrs	r3, r1, #2
 8030c2c:	3301      	adds	r3, #1
 8030c2e:	4599      	cmp	r9, r3
 8030c30:	f67f aed7 	bls.w	80309e2 <__ssvfiscanf_r+0x4ca>
 8030c34:	f8da 0000 	ldr.w	r0, [sl]
 8030c38:	3104      	adds	r1, #4
 8030c3a:	f003 fbe1 	bl	8034400 <realloc>
 8030c3e:	2800      	cmp	r0, #0
 8030c40:	f43f aecf 	beq.w	80309e2 <__ssvfiscanf_r+0x4ca>
 8030c44:	f8ca 0000 	str.w	r0, [sl]
 8030c48:	e6cb      	b.n	80309e2 <__ssvfiscanf_r+0x4ca>
 8030c4a:	f04f 0900 	mov.w	r9, #0
 8030c4e:	46c8      	mov	r8, r9
 8030c50:	46ca      	mov	sl, r9
 8030c52:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 8030c56:	e78b      	b.n	8030b70 <__ssvfiscanf_r+0x658>
 8030c58:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8030c5c:	46c8      	mov	r8, r9
 8030c5e:	46ca      	mov	sl, r9
 8030c60:	e786      	b.n	8030b70 <__ssvfiscanf_r+0x658>
 8030c62:	69bb      	ldr	r3, [r7, #24]
 8030c64:	3302      	adds	r3, #2
 8030c66:	d1b2      	bne.n	8030bce <__ssvfiscanf_r+0x6b6>
 8030c68:	687e      	ldr	r6, [r7, #4]
 8030c6a:	6863      	ldr	r3, [r4, #4]
 8030c6c:	2b00      	cmp	r3, #0
 8030c6e:	dc3f      	bgt.n	8030cf0 <__ssvfiscanf_r+0x7d8>
 8030c70:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030c72:	4621      	mov	r1, r4
 8030c74:	f7ff fbf9 	bl	803046a <__ssrefill_r>
 8030c78:	2800      	cmp	r0, #0
 8030c7a:	d039      	beq.n	8030cf0 <__ssvfiscanf_r+0x7d8>
 8030c7c:	2e00      	cmp	r6, #0
 8030c7e:	d0c9      	beq.n	8030c14 <__ssvfiscanf_r+0x6fc>
 8030c80:	e501      	b.n	8030686 <__ssvfiscanf_r+0x16e>
 8030c82:	4632      	mov	r2, r6
 8030c84:	e7bc      	b.n	8030c00 <__ssvfiscanf_r+0x6e8>
 8030c86:	2200      	movs	r2, #0
 8030c88:	e7ba      	b.n	8030c00 <__ssvfiscanf_r+0x6e8>
 8030c8a:	687b      	ldr	r3, [r7, #4]
 8030c8c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030c8e:	3b01      	subs	r3, #1
 8030c90:	4622      	mov	r2, r4
 8030c92:	5cf1      	ldrb	r1, [r6, r3]
 8030c94:	607b      	str	r3, [r7, #4]
 8030c96:	f7ff fbad 	bl	80303f4 <_sungetc_r>
 8030c9a:	e7b8      	b.n	8030c0e <__ssvfiscanf_r+0x6f6>
 8030c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8030c9e:	687a      	ldr	r2, [r7, #4]
 8030ca0:	4413      	add	r3, r2
 8030ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8030ca4:	69bb      	ldr	r3, [r7, #24]
 8030ca6:	2b03      	cmp	r3, #3
 8030ca8:	d102      	bne.n	8030cb0 <__ssvfiscanf_r+0x798>
 8030caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8030cac:	2b04      	cmp	r3, #4
 8030cae:	d002      	beq.n	8030cb6 <__ssvfiscanf_r+0x79e>
 8030cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030cb2:	3b01      	subs	r3, #1
 8030cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030cb6:	693b      	ldr	r3, [r7, #16]
 8030cb8:	b9c3      	cbnz	r3, 8030cec <__ssvfiscanf_r+0x7d4>
 8030cba:	3504      	adds	r5, #4
 8030cbc:	f1ba 0f00 	cmp.w	sl, #0
 8030cc0:	d014      	beq.n	8030cec <__ssvfiscanf_r+0x7d4>
 8030cc2:	eba5 0608 	sub.w	r6, r5, r8
 8030cc6:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 8030cca:	d80d      	bhi.n	8030ce8 <__ssvfiscanf_r+0x7d0>
 8030ccc:	4640      	mov	r0, r8
 8030cce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8030cd2:	f003 fb95 	bl	8034400 <realloc>
 8030cd6:	4680      	mov	r8, r0
 8030cd8:	2800      	cmp	r0, #0
 8030cda:	f43f ad6d 	beq.w	80307b8 <__ssvfiscanf_r+0x2a0>
 8030cde:	1985      	adds	r5, r0, r6
 8030ce0:	f8ca 0000 	str.w	r0, [sl]
 8030ce4:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8030ce8:	693e      	ldr	r6, [r7, #16]
 8030cea:	e7be      	b.n	8030c6a <__ssvfiscanf_r+0x752>
 8030cec:	2600      	movs	r6, #0
 8030cee:	e7bc      	b.n	8030c6a <__ssvfiscanf_r+0x752>
 8030cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030cf2:	2b00      	cmp	r3, #0
 8030cf4:	f47f af3d 	bne.w	8030b72 <__ssvfiscanf_r+0x65a>
 8030cf8:	e78c      	b.n	8030c14 <__ssvfiscanf_r+0x6fc>
 8030cfa:	b1e3      	cbz	r3, 8030d36 <__ssvfiscanf_r+0x81e>
 8030cfc:	f107 0670 	add.w	r6, r7, #112	@ 0x70
 8030d00:	6823      	ldr	r3, [r4, #0]
 8030d02:	781a      	ldrb	r2, [r3, #0]
 8030d04:	5cb2      	ldrb	r2, [r6, r2]
 8030d06:	b91a      	cbnz	r2, 8030d10 <__ssvfiscanf_r+0x7f8>
 8030d08:	2d00      	cmp	r5, #0
 8030d0a:	f47f ae92 	bne.w	8030a32 <__ssvfiscanf_r+0x51a>
 8030d0e:	e450      	b.n	80305b2 <__ssvfiscanf_r+0x9a>
 8030d10:	3301      	adds	r3, #1
 8030d12:	6862      	ldr	r2, [r4, #4]
 8030d14:	6023      	str	r3, [r4, #0]
 8030d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030d18:	3501      	adds	r5, #1
 8030d1a:	3a01      	subs	r2, #1
 8030d1c:	42ab      	cmp	r3, r5
 8030d1e:	6062      	str	r2, [r4, #4]
 8030d20:	f43f ae87 	beq.w	8030a32 <__ssvfiscanf_r+0x51a>
 8030d24:	2a00      	cmp	r2, #0
 8030d26:	dceb      	bgt.n	8030d00 <__ssvfiscanf_r+0x7e8>
 8030d28:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030d2a:	4621      	mov	r1, r4
 8030d2c:	f7ff fb9d 	bl	803046a <__ssrefill_r>
 8030d30:	2800      	cmp	r0, #0
 8030d32:	d0e5      	beq.n	8030d00 <__ssvfiscanf_r+0x7e8>
 8030d34:	e67d      	b.n	8030a32 <__ssvfiscanf_r+0x51a>
 8030d36:	6a3b      	ldr	r3, [r7, #32]
 8030d38:	f016 0980 	ands.w	r9, r6, #128	@ 0x80
 8030d3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8030d40:	623b      	str	r3, [r7, #32]
 8030d42:	d07e      	beq.n	8030e42 <__ssvfiscanf_r+0x92a>
 8030d44:	2d00      	cmp	r5, #0
 8030d46:	f43f ac34 	beq.w	80305b2 <__ssvfiscanf_r+0x9a>
 8030d4a:	2020      	movs	r0, #32
 8030d4c:	f7fe fbce 	bl	802f4ec <malloc>
 8030d50:	4680      	mov	r8, r0
 8030d52:	2800      	cmp	r0, #0
 8030d54:	f43f ac9c 	beq.w	8030690 <__ssvfiscanf_r+0x178>
 8030d58:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8030d5c:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 8030d60:	6028      	str	r0, [r5, #0]
 8030d62:	45b1      	cmp	r9, r6
 8030d64:	d312      	bcc.n	8030d8c <__ssvfiscanf_r+0x874>
 8030d66:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8030d6a:	429e      	cmp	r6, r3
 8030d6c:	f200 82e8 	bhi.w	8031340 <__ssvfiscanf_r+0xe28>
 8030d70:	3608      	adds	r6, #8
 8030d72:	b2b6      	uxth	r6, r6
 8030d74:	f8db 0000 	ldr.w	r0, [fp]
 8030d78:	00b1      	lsls	r1, r6, #2
 8030d7a:	f003 fb41 	bl	8034400 <realloc>
 8030d7e:	2800      	cmp	r0, #0
 8030d80:	f000 82de 	beq.w	8031340 <__ssvfiscanf_r+0xe28>
 8030d84:	f8cb 0000 	str.w	r0, [fp]
 8030d88:	f8ab 6004 	strh.w	r6, [fp, #4]
 8030d8c:	f8db 3000 	ldr.w	r3, [fp]
 8030d90:	f109 0201 	add.w	r2, r9, #1
 8030d94:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8030d98:	46aa      	mov	sl, r5
 8030d9a:	f8ab 2006 	strh.w	r2, [fp, #6]
 8030d9e:	4645      	mov	r5, r8
 8030da0:	f04f 0920 	mov.w	r9, #32
 8030da4:	462e      	mov	r6, r5
 8030da6:	f107 0870 	add.w	r8, r7, #112	@ 0x70
 8030daa:	6823      	ldr	r3, [r4, #0]
 8030dac:	781a      	ldrb	r2, [r3, #0]
 8030dae:	f818 2002 	ldrb.w	r2, [r8, r2]
 8030db2:	b362      	cbz	r2, 8030e0e <__ssvfiscanf_r+0x8f6>
 8030db4:	6862      	ldr	r2, [r4, #4]
 8030db6:	3a01      	subs	r2, #1
 8030db8:	6062      	str	r2, [r4, #4]
 8030dba:	1c5a      	adds	r2, r3, #1
 8030dbc:	6022      	str	r2, [r4, #0]
 8030dbe:	781b      	ldrb	r3, [r3, #0]
 8030dc0:	f805 3b01 	strb.w	r3, [r5], #1
 8030dc4:	f1ba 0f00 	cmp.w	sl, #0
 8030dc8:	d011      	beq.n	8030dee <__ssvfiscanf_r+0x8d6>
 8030dca:	1bab      	subs	r3, r5, r6
 8030dcc:	454b      	cmp	r3, r9
 8030dce:	d30e      	bcc.n	8030dee <__ssvfiscanf_r+0x8d6>
 8030dd0:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8030dd4:	4630      	mov	r0, r6
 8030dd6:	4649      	mov	r1, r9
 8030dd8:	613b      	str	r3, [r7, #16]
 8030dda:	f003 fb11 	bl	8034400 <realloc>
 8030dde:	4606      	mov	r6, r0
 8030de0:	2800      	cmp	r0, #0
 8030de2:	f43f ac55 	beq.w	8030690 <__ssvfiscanf_r+0x178>
 8030de6:	693b      	ldr	r3, [r7, #16]
 8030de8:	f8ca 0000 	str.w	r0, [sl]
 8030dec:	18c5      	adds	r5, r0, r3
 8030dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030df0:	3b01      	subs	r3, #1
 8030df2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030df4:	d00b      	beq.n	8030e0e <__ssvfiscanf_r+0x8f6>
 8030df6:	6863      	ldr	r3, [r4, #4]
 8030df8:	2b00      	cmp	r3, #0
 8030dfa:	dcd6      	bgt.n	8030daa <__ssvfiscanf_r+0x892>
 8030dfc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030dfe:	4621      	mov	r1, r4
 8030e00:	f7ff fb33 	bl	803046a <__ssrefill_r>
 8030e04:	2800      	cmp	r0, #0
 8030e06:	d0d0      	beq.n	8030daa <__ssvfiscanf_r+0x892>
 8030e08:	42b5      	cmp	r5, r6
 8030e0a:	f43f ac3c 	beq.w	8030686 <__ssvfiscanf_r+0x16e>
 8030e0e:	1bae      	subs	r6, r5, r6
 8030e10:	f43f abcf 	beq.w	80305b2 <__ssvfiscanf_r+0x9a>
 8030e14:	2300      	movs	r3, #0
 8030e16:	702b      	strb	r3, [r5, #0]
 8030e18:	f1ba 0f00 	cmp.w	sl, #0
 8030e1c:	d009      	beq.n	8030e32 <__ssvfiscanf_r+0x91a>
 8030e1e:	1c71      	adds	r1, r6, #1
 8030e20:	4589      	cmp	r9, r1
 8030e22:	d906      	bls.n	8030e32 <__ssvfiscanf_r+0x91a>
 8030e24:	f8da 0000 	ldr.w	r0, [sl]
 8030e28:	f003 faea 	bl	8034400 <realloc>
 8030e2c:	b108      	cbz	r0, 8030e32 <__ssvfiscanf_r+0x91a>
 8030e2e:	f8ca 0000 	str.w	r0, [sl]
 8030e32:	69fb      	ldr	r3, [r7, #28]
 8030e34:	3301      	adds	r3, #1
 8030e36:	61fb      	str	r3, [r7, #28]
 8030e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8030e3a:	4433      	add	r3, r6
 8030e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8030e3e:	f7ff bb8c 	b.w	803055a <__ssvfiscanf_r+0x42>
 8030e42:	46ca      	mov	sl, r9
 8030e44:	e7ae      	b.n	8030da4 <__ssvfiscanf_r+0x88c>
 8030e46:	bf00      	nop
 8030e48:	2000016c 	.word	0x2000016c
 8030e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030e4e:	2b00      	cmp	r3, #0
 8030e50:	bf08      	it	eq
 8030e52:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 8030e56:	f016 0501 	ands.w	r5, r6, #1
 8030e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030e5c:	f006 0810 	and.w	r8, r6, #16
 8030e60:	f000 80e1 	beq.w	8031026 <__ssvfiscanf_r+0xb0e>
 8030e64:	f1b8 0f00 	cmp.w	r8, #0
 8030e68:	f040 8089 	bne.w	8030f7e <__ssvfiscanf_r+0xa66>
 8030e6c:	6a3b      	ldr	r3, [r7, #32]
 8030e6e:	0636      	lsls	r6, r6, #24
 8030e70:	f853 5b04 	ldr.w	r5, [r3], #4
 8030e74:	623b      	str	r3, [r7, #32]
 8030e76:	f140 8089 	bpl.w	8030f8c <__ssvfiscanf_r+0xa74>
 8030e7a:	2d00      	cmp	r5, #0
 8030e7c:	f43f ac9f 	beq.w	80307be <__ssvfiscanf_r+0x2a6>
 8030e80:	2080      	movs	r0, #128	@ 0x80
 8030e82:	f7fe fb33 	bl	802f4ec <malloc>
 8030e86:	4606      	mov	r6, r0
 8030e88:	2800      	cmp	r0, #0
 8030e8a:	f43f ac95 	beq.w	80307b8 <__ssvfiscanf_r+0x2a0>
 8030e8e:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8030e92:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 8030e96:	6028      	str	r0, [r5, #0]
 8030e98:	4599      	cmp	r9, r3
 8030e9a:	d314      	bcc.n	8030ec6 <__ssvfiscanf_r+0x9ae>
 8030e9c:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8030ea0:	4293      	cmp	r3, r2
 8030ea2:	f200 824d 	bhi.w	8031340 <__ssvfiscanf_r+0xe28>
 8030ea6:	3308      	adds	r3, #8
 8030ea8:	fa1f fa83 	uxth.w	sl, r3
 8030eac:	f8db 0000 	ldr.w	r0, [fp]
 8030eb0:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8030eb4:	f003 faa4 	bl	8034400 <realloc>
 8030eb8:	2800      	cmp	r0, #0
 8030eba:	f000 8241 	beq.w	8031340 <__ssvfiscanf_r+0xe28>
 8030ebe:	f8cb 0000 	str.w	r0, [fp]
 8030ec2:	f8ab a004 	strh.w	sl, [fp, #4]
 8030ec6:	f8db 3000 	ldr.w	r3, [fp]
 8030eca:	f109 0201 	add.w	r2, r9, #1
 8030ece:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8030ed2:	46aa      	mov	sl, r5
 8030ed4:	f8ab 2006 	strh.w	r2, [fp, #6]
 8030ed8:	4635      	mov	r5, r6
 8030eda:	f04f 0920 	mov.w	r9, #32
 8030ede:	2300      	movs	r3, #0
 8030ee0:	6822      	ldr	r2, [r4, #0]
 8030ee2:	499e      	ldr	r1, [pc, #632]	@ (803115c <__ssvfiscanf_r+0xc44>)
 8030ee4:	7812      	ldrb	r2, [r2, #0]
 8030ee6:	5c8a      	ldrb	r2, [r1, r2]
 8030ee8:	0711      	lsls	r1, r2, #28
 8030eea:	d43c      	bmi.n	8030f66 <__ssvfiscanf_r+0xa4e>
 8030eec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8030eee:	2a00      	cmp	r2, #0
 8030ef0:	d039      	beq.n	8030f66 <__ssvfiscanf_r+0xa4e>
 8030ef2:	613b      	str	r3, [r7, #16]
 8030ef4:	f7fd fa3c 	bl	802e370 <__locale_mb_cur_max>
 8030ef8:	693b      	ldr	r3, [r7, #16]
 8030efa:	4298      	cmp	r0, r3
 8030efc:	f43f abc3 	beq.w	8030686 <__ssvfiscanf_r+0x16e>
 8030f00:	1c5a      	adds	r2, r3, #1
 8030f02:	613a      	str	r2, [r7, #16]
 8030f04:	6822      	ldr	r2, [r4, #0]
 8030f06:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8030f0a:	f812 0b01 	ldrb.w	r0, [r2], #1
 8030f0e:	54c8      	strb	r0, [r1, r3]
 8030f10:	6863      	ldr	r3, [r4, #4]
 8030f12:	3b01      	subs	r3, #1
 8030f14:	e9c4 2300 	strd	r2, r3, [r4]
 8030f18:	69bb      	ldr	r3, [r7, #24]
 8030f1a:	2b03      	cmp	r3, #3
 8030f1c:	d102      	bne.n	8030f24 <__ssvfiscanf_r+0xa0c>
 8030f1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8030f20:	2b04      	cmp	r3, #4
 8030f22:	d005      	beq.n	8030f30 <__ssvfiscanf_r+0xa18>
 8030f24:	2208      	movs	r2, #8
 8030f26:	2100      	movs	r1, #0
 8030f28:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8030f2c:	f7fc f898 	bl	802d060 <memset>
 8030f30:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8030f34:	9300      	str	r3, [sp, #0]
 8030f36:	693b      	ldr	r3, [r7, #16]
 8030f38:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030f3a:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8030f3e:	4629      	mov	r1, r5
 8030f40:	f004 fe18 	bl	8035b74 <_mbrtowc_r>
 8030f44:	4603      	mov	r3, r0
 8030f46:	61b8      	str	r0, [r7, #24]
 8030f48:	1c58      	adds	r0, r3, #1
 8030f4a:	f43f ab9c 	beq.w	8030686 <__ssvfiscanf_r+0x16e>
 8030f4e:	bb0b      	cbnz	r3, 8030f94 <__ssvfiscanf_r+0xa7c>
 8030f50:	602b      	str	r3, [r5, #0]
 8030f52:	6828      	ldr	r0, [r5, #0]
 8030f54:	f004 fe28 	bl	8035ba8 <iswspace>
 8030f58:	4603      	mov	r3, r0
 8030f5a:	2800      	cmp	r0, #0
 8030f5c:	d037      	beq.n	8030fce <__ssvfiscanf_r+0xab6>
 8030f5e:	693a      	ldr	r2, [r7, #16]
 8030f60:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8030f64:	bb4a      	cbnz	r2, 8030fba <__ssvfiscanf_r+0xaa2>
 8030f66:	f1b8 0f00 	cmp.w	r8, #0
 8030f6a:	f47f aaf6 	bne.w	803055a <__ssvfiscanf_r+0x42>
 8030f6e:	f8c5 8000 	str.w	r8, [r5]
 8030f72:	f1ba 0f00 	cmp.w	sl, #0
 8030f76:	f43f ad34 	beq.w	80309e2 <__ssvfiscanf_r+0x4ca>
 8030f7a:	1ba9      	subs	r1, r5, r6
 8030f7c:	e655      	b.n	8030c2a <__ssvfiscanf_r+0x712>
 8030f7e:	f04f 0900 	mov.w	r9, #0
 8030f82:	464e      	mov	r6, r9
 8030f84:	46ca      	mov	sl, r9
 8030f86:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 8030f8a:	e7a8      	b.n	8030ede <__ssvfiscanf_r+0x9c6>
 8030f8c:	46c1      	mov	r9, r8
 8030f8e:	4646      	mov	r6, r8
 8030f90:	46c2      	mov	sl, r8
 8030f92:	e7a4      	b.n	8030ede <__ssvfiscanf_r+0x9c6>
 8030f94:	69bb      	ldr	r3, [r7, #24]
 8030f96:	3302      	adds	r3, #2
 8030f98:	d1db      	bne.n	8030f52 <__ssvfiscanf_r+0xa3a>
 8030f9a:	693b      	ldr	r3, [r7, #16]
 8030f9c:	6862      	ldr	r2, [r4, #4]
 8030f9e:	2a00      	cmp	r2, #0
 8030fa0:	dc9e      	bgt.n	8030ee0 <__ssvfiscanf_r+0x9c8>
 8030fa2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030fa4:	613b      	str	r3, [r7, #16]
 8030fa6:	4621      	mov	r1, r4
 8030fa8:	f7ff fa5f 	bl	803046a <__ssrefill_r>
 8030fac:	693b      	ldr	r3, [r7, #16]
 8030fae:	2800      	cmp	r0, #0
 8030fb0:	d096      	beq.n	8030ee0 <__ssvfiscanf_r+0x9c8>
 8030fb2:	2b00      	cmp	r3, #0
 8030fb4:	f47f ab67 	bne.w	8030686 <__ssvfiscanf_r+0x16e>
 8030fb8:	e7d5      	b.n	8030f66 <__ssvfiscanf_r+0xa4e>
 8030fba:	693a      	ldr	r2, [r7, #16]
 8030fbc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030fbe:	3a01      	subs	r2, #1
 8030fc0:	613a      	str	r2, [r7, #16]
 8030fc2:	6939      	ldr	r1, [r7, #16]
 8030fc4:	4622      	mov	r2, r4
 8030fc6:	5c59      	ldrb	r1, [r3, r1]
 8030fc8:	f7ff fa14 	bl	80303f4 <_sungetc_r>
 8030fcc:	e7c7      	b.n	8030f5e <__ssvfiscanf_r+0xa46>
 8030fce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8030fd0:	6939      	ldr	r1, [r7, #16]
 8030fd2:	440a      	add	r2, r1
 8030fd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8030fd6:	69ba      	ldr	r2, [r7, #24]
 8030fd8:	2a03      	cmp	r2, #3
 8030fda:	d102      	bne.n	8030fe2 <__ssvfiscanf_r+0xaca>
 8030fdc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8030fde:	2a04      	cmp	r2, #4
 8030fe0:	d002      	beq.n	8030fe8 <__ssvfiscanf_r+0xad0>
 8030fe2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8030fe4:	3a01      	subs	r2, #1
 8030fe6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8030fe8:	f1b8 0f00 	cmp.w	r8, #0
 8030fec:	d1d6      	bne.n	8030f9c <__ssvfiscanf_r+0xa84>
 8030fee:	3504      	adds	r5, #4
 8030ff0:	f1ba 0f00 	cmp.w	sl, #0
 8030ff4:	d015      	beq.n	8031022 <__ssvfiscanf_r+0xb0a>
 8030ff6:	1bab      	subs	r3, r5, r6
 8030ff8:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 8030ffc:	d80f      	bhi.n	803101e <__ssvfiscanf_r+0xb06>
 8030ffe:	4630      	mov	r0, r6
 8031000:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8031004:	613b      	str	r3, [r7, #16]
 8031006:	f003 f9fb 	bl	8034400 <realloc>
 803100a:	4606      	mov	r6, r0
 803100c:	2800      	cmp	r0, #0
 803100e:	f43f abd3 	beq.w	80307b8 <__ssvfiscanf_r+0x2a0>
 8031012:	693b      	ldr	r3, [r7, #16]
 8031014:	f8ca 0000 	str.w	r0, [sl]
 8031018:	18c5      	adds	r5, r0, r3
 803101a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 803101e:	4643      	mov	r3, r8
 8031020:	e7bc      	b.n	8030f9c <__ssvfiscanf_r+0xa84>
 8031022:	4653      	mov	r3, sl
 8031024:	e7ba      	b.n	8030f9c <__ssvfiscanf_r+0xa84>
 8031026:	f1b8 0f00 	cmp.w	r8, #0
 803102a:	d019      	beq.n	8031060 <__ssvfiscanf_r+0xb48>
 803102c:	4e4b      	ldr	r6, [pc, #300]	@ (803115c <__ssvfiscanf_r+0xc44>)
 803102e:	6823      	ldr	r3, [r4, #0]
 8031030:	781a      	ldrb	r2, [r3, #0]
 8031032:	5cb2      	ldrb	r2, [r6, r2]
 8031034:	0712      	lsls	r2, r2, #28
 8031036:	f53f acfc 	bmi.w	8030a32 <__ssvfiscanf_r+0x51a>
 803103a:	3301      	adds	r3, #1
 803103c:	6862      	ldr	r2, [r4, #4]
 803103e:	6023      	str	r3, [r4, #0]
 8031040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8031042:	3501      	adds	r5, #1
 8031044:	3a01      	subs	r2, #1
 8031046:	429d      	cmp	r5, r3
 8031048:	6062      	str	r2, [r4, #4]
 803104a:	f43f acf2 	beq.w	8030a32 <__ssvfiscanf_r+0x51a>
 803104e:	2a00      	cmp	r2, #0
 8031050:	dced      	bgt.n	803102e <__ssvfiscanf_r+0xb16>
 8031052:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8031054:	4621      	mov	r1, r4
 8031056:	f7ff fa08 	bl	803046a <__ssrefill_r>
 803105a:	2800      	cmp	r0, #0
 803105c:	d0e7      	beq.n	803102e <__ssvfiscanf_r+0xb16>
 803105e:	e4e8      	b.n	8030a32 <__ssvfiscanf_r+0x51a>
 8031060:	6a3b      	ldr	r3, [r7, #32]
 8031062:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 8031066:	f853 5b04 	ldr.w	r5, [r3], #4
 803106a:	623b      	str	r3, [r7, #32]
 803106c:	d074      	beq.n	8031158 <__ssvfiscanf_r+0xc40>
 803106e:	2d00      	cmp	r5, #0
 8031070:	f43f aa9f 	beq.w	80305b2 <__ssvfiscanf_r+0x9a>
 8031074:	2020      	movs	r0, #32
 8031076:	f7fe fa39 	bl	802f4ec <malloc>
 803107a:	4680      	mov	r8, r0
 803107c:	2800      	cmp	r0, #0
 803107e:	f43f ab07 	beq.w	8030690 <__ssvfiscanf_r+0x178>
 8031082:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8031086:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 803108a:	6028      	str	r0, [r5, #0]
 803108c:	45b1      	cmp	r9, r6
 803108e:	d312      	bcc.n	80310b6 <__ssvfiscanf_r+0xb9e>
 8031090:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8031094:	429e      	cmp	r6, r3
 8031096:	f200 8153 	bhi.w	8031340 <__ssvfiscanf_r+0xe28>
 803109a:	3608      	adds	r6, #8
 803109c:	b2b6      	uxth	r6, r6
 803109e:	f8db 0000 	ldr.w	r0, [fp]
 80310a2:	00b1      	lsls	r1, r6, #2
 80310a4:	f003 f9ac 	bl	8034400 <realloc>
 80310a8:	2800      	cmp	r0, #0
 80310aa:	f000 8149 	beq.w	8031340 <__ssvfiscanf_r+0xe28>
 80310ae:	f8cb 0000 	str.w	r0, [fp]
 80310b2:	f8ab 6004 	strh.w	r6, [fp, #4]
 80310b6:	f8db 3000 	ldr.w	r3, [fp]
 80310ba:	f109 0201 	add.w	r2, r9, #1
 80310be:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 80310c2:	46aa      	mov	sl, r5
 80310c4:	f8ab 2006 	strh.w	r2, [fp, #6]
 80310c8:	4645      	mov	r5, r8
 80310ca:	2620      	movs	r6, #32
 80310cc:	46a9      	mov	r9, r5
 80310ce:	6823      	ldr	r3, [r4, #0]
 80310d0:	4922      	ldr	r1, [pc, #136]	@ (803115c <__ssvfiscanf_r+0xc44>)
 80310d2:	781a      	ldrb	r2, [r3, #0]
 80310d4:	5c8a      	ldrb	r2, [r1, r2]
 80310d6:	0710      	lsls	r0, r2, #28
 80310d8:	d428      	bmi.n	803112c <__ssvfiscanf_r+0xc14>
 80310da:	6862      	ldr	r2, [r4, #4]
 80310dc:	3a01      	subs	r2, #1
 80310de:	6062      	str	r2, [r4, #4]
 80310e0:	1c5a      	adds	r2, r3, #1
 80310e2:	6022      	str	r2, [r4, #0]
 80310e4:	781b      	ldrb	r3, [r3, #0]
 80310e6:	f805 3b01 	strb.w	r3, [r5], #1
 80310ea:	f1ba 0f00 	cmp.w	sl, #0
 80310ee:	d010      	beq.n	8031112 <__ssvfiscanf_r+0xbfa>
 80310f0:	eba5 0809 	sub.w	r8, r5, r9
 80310f4:	45b0      	cmp	r8, r6
 80310f6:	d30c      	bcc.n	8031112 <__ssvfiscanf_r+0xbfa>
 80310f8:	0076      	lsls	r6, r6, #1
 80310fa:	4648      	mov	r0, r9
 80310fc:	4631      	mov	r1, r6
 80310fe:	f003 f97f 	bl	8034400 <realloc>
 8031102:	4681      	mov	r9, r0
 8031104:	2800      	cmp	r0, #0
 8031106:	f43f aac3 	beq.w	8030690 <__ssvfiscanf_r+0x178>
 803110a:	eb00 0508 	add.w	r5, r0, r8
 803110e:	f8ca 0000 	str.w	r0, [sl]
 8031112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8031114:	3b01      	subs	r3, #1
 8031116:	62bb      	str	r3, [r7, #40]	@ 0x28
 8031118:	d008      	beq.n	803112c <__ssvfiscanf_r+0xc14>
 803111a:	6863      	ldr	r3, [r4, #4]
 803111c:	2b00      	cmp	r3, #0
 803111e:	dcd6      	bgt.n	80310ce <__ssvfiscanf_r+0xbb6>
 8031120:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8031122:	4621      	mov	r1, r4
 8031124:	f7ff f9a1 	bl	803046a <__ssrefill_r>
 8031128:	2800      	cmp	r0, #0
 803112a:	d0d0      	beq.n	80310ce <__ssvfiscanf_r+0xbb6>
 803112c:	2300      	movs	r3, #0
 803112e:	702b      	strb	r3, [r5, #0]
 8031130:	eba5 0509 	sub.w	r5, r5, r9
 8031134:	f1ba 0f00 	cmp.w	sl, #0
 8031138:	f43f acce 	beq.w	8030ad8 <__ssvfiscanf_r+0x5c0>
 803113c:	1c69      	adds	r1, r5, #1
 803113e:	428e      	cmp	r6, r1
 8031140:	f67f acca 	bls.w	8030ad8 <__ssvfiscanf_r+0x5c0>
 8031144:	f8da 0000 	ldr.w	r0, [sl]
 8031148:	f003 f95a 	bl	8034400 <realloc>
 803114c:	2800      	cmp	r0, #0
 803114e:	f43f acc3 	beq.w	8030ad8 <__ssvfiscanf_r+0x5c0>
 8031152:	f8ca 0000 	str.w	r0, [sl]
 8031156:	e4bf      	b.n	8030ad8 <__ssvfiscanf_r+0x5c0>
 8031158:	46b2      	mov	sl, r6
 803115a:	e7b7      	b.n	80310cc <__ssvfiscanf_r+0xbb4>
 803115c:	0803c7f9 	.word	0x0803c7f9
 8031160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8031162:	3b01      	subs	r3, #1
 8031164:	2b26      	cmp	r3, #38	@ 0x26
 8031166:	bf81      	itttt	hi
 8031168:	6abb      	ldrhi	r3, [r7, #40]	@ 0x28
 803116a:	f1a3 0827 	subhi.w	r8, r3, #39	@ 0x27
 803116e:	2327      	movhi	r3, #39	@ 0x27
 8031170:	62bb      	strhi	r3, [r7, #40]	@ 0x28
 8031172:	bf98      	it	ls
 8031174:	f04f 0800 	movls.w	r8, #0
 8031178:	f446 6658 	orr.w	r6, r6, #3456	@ 0xd80
 803117c:	f04f 0900 	mov.w	r9, #0
 8031180:	f107 0a48 	add.w	sl, r7, #72	@ 0x48
 8031184:	6822      	ldr	r2, [r4, #0]
 8031186:	7813      	ldrb	r3, [r2, #0]
 8031188:	2b39      	cmp	r3, #57	@ 0x39
 803118a:	d80f      	bhi.n	80311ac <__ssvfiscanf_r+0xc94>
 803118c:	2b2a      	cmp	r3, #42	@ 0x2a
 803118e:	d91a      	bls.n	80311c6 <__ssvfiscanf_r+0xcae>
 8031190:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8031194:	290e      	cmp	r1, #14
 8031196:	d816      	bhi.n	80311c6 <__ssvfiscanf_r+0xcae>
 8031198:	e8df f001 	tbb	[pc, r1]
 803119c:	15771577 	.word	0x15771577
 80311a0:	67673e15 	.word	0x67673e15
 80311a4:	67676767 	.word	0x67676767
 80311a8:	6f67      	.short	0x6f67
 80311aa:	6f          	.byte	0x6f
 80311ab:	00          	.byte	0x00
 80311ac:	2b66      	cmp	r3, #102	@ 0x66
 80311ae:	d831      	bhi.n	8031214 <__ssvfiscanf_r+0xcfc>
 80311b0:	2b60      	cmp	r3, #96	@ 0x60
 80311b2:	d803      	bhi.n	80311bc <__ssvfiscanf_r+0xca4>
 80311b4:	2b46      	cmp	r3, #70	@ 0x46
 80311b6:	d804      	bhi.n	80311c2 <__ssvfiscanf_r+0xcaa>
 80311b8:	2b40      	cmp	r3, #64	@ 0x40
 80311ba:	d904      	bls.n	80311c6 <__ssvfiscanf_r+0xcae>
 80311bc:	6979      	ldr	r1, [r7, #20]
 80311be:	290a      	cmp	r1, #10
 80311c0:	e061      	b.n	8031286 <__ssvfiscanf_r+0xd6e>
 80311c2:	2b58      	cmp	r3, #88	@ 0x58
 80311c4:	d066      	beq.n	8031294 <__ssvfiscanf_r+0xd7c>
 80311c6:	05f1      	lsls	r1, r6, #23
 80311c8:	d511      	bpl.n	80311ee <__ssvfiscanf_r+0xcd6>
 80311ca:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80311ce:	459a      	cmp	sl, r3
 80311d0:	d908      	bls.n	80311e4 <__ssvfiscanf_r+0xccc>
 80311d2:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
 80311d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80311d8:	4622      	mov	r2, r4
 80311da:	f7ff f90b 	bl	80303f4 <_sungetc_r>
 80311de:	f10a 38ff 	add.w	r8, sl, #4294967295	@ 0xffffffff
 80311e2:	46c2      	mov	sl, r8
 80311e4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80311e8:	459a      	cmp	sl, r3
 80311ea:	f43f a9e2 	beq.w	80305b2 <__ssvfiscanf_r+0x9a>
 80311ee:	f016 0210 	ands.w	r2, r6, #16
 80311f2:	d16b      	bne.n	80312cc <__ssvfiscanf_r+0xdb4>
 80311f4:	697b      	ldr	r3, [r7, #20]
 80311f6:	f88a 2000 	strb.w	r2, [sl]
 80311fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80311fc:	68fd      	ldr	r5, [r7, #12]
 80311fe:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8031202:	47a8      	blx	r5
 8031204:	6a3b      	ldr	r3, [r7, #32]
 8031206:	06b2      	lsls	r2, r6, #26
 8031208:	f103 0804 	add.w	r8, r3, #4
 803120c:	d555      	bpl.n	80312ba <__ssvfiscanf_r+0xda2>
 803120e:	681b      	ldr	r3, [r3, #0]
 8031210:	6018      	str	r0, [r3, #0]
 8031212:	e057      	b.n	80312c4 <__ssvfiscanf_r+0xdac>
 8031214:	2b78      	cmp	r3, #120	@ 0x78
 8031216:	e7d5      	b.n	80311c4 <__ssvfiscanf_r+0xcac>
 8031218:	0531      	lsls	r1, r6, #20
 803121a:	d509      	bpl.n	8031230 <__ssvfiscanf_r+0xd18>
 803121c:	6979      	ldr	r1, [r7, #20]
 803121e:	b919      	cbnz	r1, 8031228 <__ssvfiscanf_r+0xd10>
 8031220:	2108      	movs	r1, #8
 8031222:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 8031226:	6179      	str	r1, [r7, #20]
 8031228:	0575      	lsls	r5, r6, #21
 803122a:	d506      	bpl.n	803123a <__ssvfiscanf_r+0xd22>
 803122c:	f426 66b0 	bic.w	r6, r6, #1408	@ 0x580
 8031230:	4655      	mov	r5, sl
 8031232:	f805 3b01 	strb.w	r3, [r5], #1
 8031236:	46aa      	mov	sl, r5
 8031238:	e00b      	b.n	8031252 <__ssvfiscanf_r+0xd3a>
 803123a:	f426 7660 	bic.w	r6, r6, #896	@ 0x380
 803123e:	f1b8 0f00 	cmp.w	r8, #0
 8031242:	d004      	beq.n	803124e <__ssvfiscanf_r+0xd36>
 8031244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8031246:	3301      	adds	r3, #1
 8031248:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 803124c:	62bb      	str	r3, [r7, #40]	@ 0x28
 803124e:	f109 0901 	add.w	r9, r9, #1
 8031252:	6863      	ldr	r3, [r4, #4]
 8031254:	3b01      	subs	r3, #1
 8031256:	2b00      	cmp	r3, #0
 8031258:	6063      	str	r3, [r4, #4]
 803125a:	dd27      	ble.n	80312ac <__ssvfiscanf_r+0xd94>
 803125c:	3201      	adds	r2, #1
 803125e:	6022      	str	r2, [r4, #0]
 8031260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8031262:	3b01      	subs	r3, #1
 8031264:	62bb      	str	r3, [r7, #40]	@ 0x28
 8031266:	d18d      	bne.n	8031184 <__ssvfiscanf_r+0xc6c>
 8031268:	e7ad      	b.n	80311c6 <__ssvfiscanf_r+0xcae>
 803126a:	6978      	ldr	r0, [r7, #20]
 803126c:	4936      	ldr	r1, [pc, #216]	@ (8031348 <__ssvfiscanf_r+0xe30>)
 803126e:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8031272:	6179      	str	r1, [r7, #20]
 8031274:	f426 6638 	bic.w	r6, r6, #2944	@ 0xb80
 8031278:	e7da      	b.n	8031230 <__ssvfiscanf_r+0xd18>
 803127a:	6978      	ldr	r0, [r7, #20]
 803127c:	4932      	ldr	r1, [pc, #200]	@ (8031348 <__ssvfiscanf_r+0xe30>)
 803127e:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8031282:	6179      	str	r1, [r7, #20]
 8031284:	2908      	cmp	r1, #8
 8031286:	dcf5      	bgt.n	8031274 <__ssvfiscanf_r+0xd5c>
 8031288:	e79d      	b.n	80311c6 <__ssvfiscanf_r+0xcae>
 803128a:	0630      	lsls	r0, r6, #24
 803128c:	d59b      	bpl.n	80311c6 <__ssvfiscanf_r+0xcae>
 803128e:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 8031292:	e7cd      	b.n	8031230 <__ssvfiscanf_r+0xd18>
 8031294:	f406 61c0 	and.w	r1, r6, #1536	@ 0x600
 8031298:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 803129c:	d193      	bne.n	80311c6 <__ssvfiscanf_r+0xcae>
 803129e:	f426 7600 	bic.w	r6, r6, #512	@ 0x200
 80312a2:	2110      	movs	r1, #16
 80312a4:	f446 66a0 	orr.w	r6, r6, #1280	@ 0x500
 80312a8:	6179      	str	r1, [r7, #20]
 80312aa:	e7c1      	b.n	8031230 <__ssvfiscanf_r+0xd18>
 80312ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80312ae:	4621      	mov	r1, r4
 80312b0:	f7ff f8db 	bl	803046a <__ssrefill_r>
 80312b4:	2800      	cmp	r0, #0
 80312b6:	d0d3      	beq.n	8031260 <__ssvfiscanf_r+0xd48>
 80312b8:	e785      	b.n	80311c6 <__ssvfiscanf_r+0xcae>
 80312ba:	0733      	lsls	r3, r6, #28
 80312bc:	d50d      	bpl.n	80312da <__ssvfiscanf_r+0xdc2>
 80312be:	6a3b      	ldr	r3, [r7, #32]
 80312c0:	681b      	ldr	r3, [r3, #0]
 80312c2:	7018      	strb	r0, [r3, #0]
 80312c4:	69fb      	ldr	r3, [r7, #28]
 80312c6:	3301      	adds	r3, #1
 80312c8:	e9c7 3807 	strd	r3, r8, [r7, #28]
 80312cc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80312d0:	ebaa 0503 	sub.w	r5, sl, r3
 80312d4:	444d      	add	r5, r9
 80312d6:	f7ff bbac 	b.w	8030a32 <__ssvfiscanf_r+0x51a>
 80312da:	0775      	lsls	r5, r6, #29
 80312dc:	d503      	bpl.n	80312e6 <__ssvfiscanf_r+0xdce>
 80312de:	6a3b      	ldr	r3, [r7, #32]
 80312e0:	681b      	ldr	r3, [r3, #0]
 80312e2:	8018      	strh	r0, [r3, #0]
 80312e4:	e7ee      	b.n	80312c4 <__ssvfiscanf_r+0xdac>
 80312e6:	f016 0201 	ands.w	r2, r6, #1
 80312ea:	d001      	beq.n	80312f0 <__ssvfiscanf_r+0xdd8>
 80312ec:	6a3b      	ldr	r3, [r7, #32]
 80312ee:	e78e      	b.n	803120e <__ssvfiscanf_r+0xcf6>
 80312f0:	07b1      	lsls	r1, r6, #30
 80312f2:	d5fb      	bpl.n	80312ec <__ssvfiscanf_r+0xdd4>
 80312f4:	4b15      	ldr	r3, [pc, #84]	@ (803134c <__ssvfiscanf_r+0xe34>)
 80312f6:	68f9      	ldr	r1, [r7, #12]
 80312f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80312fa:	4299      	cmp	r1, r3
 80312fc:	697b      	ldr	r3, [r7, #20]
 80312fe:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8031302:	d106      	bne.n	8031312 <__ssvfiscanf_r+0xdfa>
 8031304:	f004 fc34 	bl	8035b70 <_strtoull_r>
 8031308:	6a3b      	ldr	r3, [r7, #32]
 803130a:	681b      	ldr	r3, [r3, #0]
 803130c:	e9c3 0100 	strd	r0, r1, [r3]
 8031310:	e7d8      	b.n	80312c4 <__ssvfiscanf_r+0xdac>
 8031312:	f004 fb81 	bl	8035a18 <_strtoll_r>
 8031316:	e7f7      	b.n	8031308 <__ssvfiscanf_r+0xdf0>
 8031318:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 803131c:	6818      	ldr	r0, [r3, #0]
 803131e:	f7fe f8ed 	bl	802f4fc <free>
 8031322:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8031326:	3401      	adds	r4, #1
 8031328:	601e      	str	r6, [r3, #0]
 803132a:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 803132e:	f8db 5000 	ldr.w	r5, [fp]
 8031332:	42a3      	cmp	r3, r4
 8031334:	dcf0      	bgt.n	8031318 <__ssvfiscanf_r+0xe00>
 8031336:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803133a:	61fb      	str	r3, [r7, #28]
 803133c:	f7ff ba46 	b.w	80307cc <__ssvfiscanf_r+0x2b4>
 8031340:	2400      	movs	r4, #0
 8031342:	4626      	mov	r6, r4
 8031344:	e7f1      	b.n	803132a <__ssvfiscanf_r+0xe12>
 8031346:	bf00      	nop
 8031348:	0803c990 	.word	0x0803c990
 803134c:	08035569 	.word	0x08035569

08031350 <_svfprintf_r>:
 8031350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8031354:	b0d3      	sub	sp, #332	@ 0x14c
 8031356:	468b      	mov	fp, r1
 8031358:	4691      	mov	r9, r2
 803135a:	461e      	mov	r6, r3
 803135c:	9003      	str	r0, [sp, #12]
 803135e:	f7fd f80d 	bl	802e37c <_localeconv_r>
 8031362:	6803      	ldr	r3, [r0, #0]
 8031364:	9316      	str	r3, [sp, #88]	@ 0x58
 8031366:	4618      	mov	r0, r3
 8031368:	f7de ff9a 	bl	80102a0 <strlen>
 803136c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8031370:	900d      	str	r0, [sp, #52]	@ 0x34
 8031372:	061b      	lsls	r3, r3, #24
 8031374:	d515      	bpl.n	80313a2 <_svfprintf_r+0x52>
 8031376:	f8db 3010 	ldr.w	r3, [fp, #16]
 803137a:	b993      	cbnz	r3, 80313a2 <_svfprintf_r+0x52>
 803137c:	9803      	ldr	r0, [sp, #12]
 803137e:	2140      	movs	r1, #64	@ 0x40
 8031380:	f7fe f8c4 	bl	802f50c <_malloc_r>
 8031384:	f8cb 0000 	str.w	r0, [fp]
 8031388:	f8cb 0010 	str.w	r0, [fp, #16]
 803138c:	b930      	cbnz	r0, 803139c <_svfprintf_r+0x4c>
 803138e:	9a03      	ldr	r2, [sp, #12]
 8031390:	230c      	movs	r3, #12
 8031392:	6013      	str	r3, [r2, #0]
 8031394:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8031398:	930f      	str	r3, [sp, #60]	@ 0x3c
 803139a:	e1f7      	b.n	803178c <_svfprintf_r+0x43c>
 803139c:	2340      	movs	r3, #64	@ 0x40
 803139e:	f8cb 3014 	str.w	r3, [fp, #20]
 80313a2:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 80315f0 <_svfprintf_r+0x2a0>
 80313a6:	2300      	movs	r3, #0
 80313a8:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 80313ac:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80313b0:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 80313b4:	ac29      	add	r4, sp, #164	@ 0xa4
 80313b6:	9426      	str	r4, [sp, #152]	@ 0x98
 80313b8:	9304      	str	r3, [sp, #16]
 80313ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80313bc:	9312      	str	r3, [sp, #72]	@ 0x48
 80313be:	9317      	str	r3, [sp, #92]	@ 0x5c
 80313c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80313c2:	464b      	mov	r3, r9
 80313c4:	461d      	mov	r5, r3
 80313c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80313ca:	b10a      	cbz	r2, 80313d0 <_svfprintf_r+0x80>
 80313cc:	2a25      	cmp	r2, #37	@ 0x25
 80313ce:	d1f9      	bne.n	80313c4 <_svfprintf_r+0x74>
 80313d0:	ebb5 0709 	subs.w	r7, r5, r9
 80313d4:	d00d      	beq.n	80313f2 <_svfprintf_r+0xa2>
 80313d6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80313d8:	443b      	add	r3, r7
 80313da:	9328      	str	r3, [sp, #160]	@ 0xa0
 80313dc:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80313de:	3301      	adds	r3, #1
 80313e0:	2b07      	cmp	r3, #7
 80313e2:	e9c4 9700 	strd	r9, r7, [r4]
 80313e6:	9327      	str	r3, [sp, #156]	@ 0x9c
 80313e8:	dc75      	bgt.n	80314d6 <_svfprintf_r+0x186>
 80313ea:	3408      	adds	r4, #8
 80313ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80313ee:	443b      	add	r3, r7
 80313f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80313f2:	782b      	ldrb	r3, [r5, #0]
 80313f4:	2b00      	cmp	r3, #0
 80313f6:	f001 8148 	beq.w	803268a <_svfprintf_r+0x133a>
 80313fa:	2200      	movs	r2, #0
 80313fc:	1c6b      	adds	r3, r5, #1
 80313fe:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8031402:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8031406:	920e      	str	r2, [sp, #56]	@ 0x38
 8031408:	4615      	mov	r5, r2
 803140a:	f813 2b01 	ldrb.w	r2, [r3], #1
 803140e:	9206      	str	r2, [sp, #24]
 8031410:	930c      	str	r3, [sp, #48]	@ 0x30
 8031412:	9b06      	ldr	r3, [sp, #24]
 8031414:	3b20      	subs	r3, #32
 8031416:	2b5a      	cmp	r3, #90	@ 0x5a
 8031418:	f200 85a4 	bhi.w	8031f64 <_svfprintf_r+0xc14>
 803141c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8031420:	05a2009d 	.word	0x05a2009d
 8031424:	00a505a2 	.word	0x00a505a2
 8031428:	05a205a2 	.word	0x05a205a2
 803142c:	008505a2 	.word	0x008505a2
 8031430:	05a205a2 	.word	0x05a205a2
 8031434:	00b200a8 	.word	0x00b200a8
 8031438:	00af05a2 	.word	0x00af05a2
 803143c:	05a200b4 	.word	0x05a200b4
 8031440:	00d100ce 	.word	0x00d100ce
 8031444:	00d100d1 	.word	0x00d100d1
 8031448:	00d100d1 	.word	0x00d100d1
 803144c:	00d100d1 	.word	0x00d100d1
 8031450:	00d100d1 	.word	0x00d100d1
 8031454:	05a205a2 	.word	0x05a205a2
 8031458:	05a205a2 	.word	0x05a205a2
 803145c:	05a205a2 	.word	0x05a205a2
 8031460:	014705a2 	.word	0x014705a2
 8031464:	010805a2 	.word	0x010805a2
 8031468:	0147011b 	.word	0x0147011b
 803146c:	01470147 	.word	0x01470147
 8031470:	05a205a2 	.word	0x05a205a2
 8031474:	05a205a2 	.word	0x05a205a2
 8031478:	05a200e2 	.word	0x05a200e2
 803147c:	049d05a2 	.word	0x049d05a2
 8031480:	05a205a2 	.word	0x05a205a2
 8031484:	04e705a2 	.word	0x04e705a2
 8031488:	050805a2 	.word	0x050805a2
 803148c:	05a205a2 	.word	0x05a205a2
 8031490:	05a2052a 	.word	0x05a2052a
 8031494:	05a205a2 	.word	0x05a205a2
 8031498:	05a205a2 	.word	0x05a205a2
 803149c:	05a205a2 	.word	0x05a205a2
 80314a0:	014705a2 	.word	0x014705a2
 80314a4:	010805a2 	.word	0x010805a2
 80314a8:	0147011d 	.word	0x0147011d
 80314ac:	01470147 	.word	0x01470147
 80314b0:	011d00ee 	.word	0x011d00ee
 80314b4:	05a20102 	.word	0x05a20102
 80314b8:	05a200fb 	.word	0x05a200fb
 80314bc:	049f047e 	.word	0x049f047e
 80314c0:	010204d6 	.word	0x010204d6
 80314c4:	04e705a2 	.word	0x04e705a2
 80314c8:	050a009b 	.word	0x050a009b
 80314cc:	05a205a2 	.word	0x05a205a2
 80314d0:	05a20065 	.word	0x05a20065
 80314d4:	009b      	.short	0x009b
 80314d6:	9803      	ldr	r0, [sp, #12]
 80314d8:	aa26      	add	r2, sp, #152	@ 0x98
 80314da:	4659      	mov	r1, fp
 80314dc:	f7fe fac0 	bl	802fa60 <__ssprint_r>
 80314e0:	2800      	cmp	r0, #0
 80314e2:	f040 814e 	bne.w	8031782 <_svfprintf_r+0x432>
 80314e6:	ac29      	add	r4, sp, #164	@ 0xa4
 80314e8:	e780      	b.n	80313ec <_svfprintf_r+0x9c>
 80314ea:	4b43      	ldr	r3, [pc, #268]	@ (80315f8 <_svfprintf_r+0x2a8>)
 80314ec:	9319      	str	r3, [sp, #100]	@ 0x64
 80314ee:	f015 0320 	ands.w	r3, r5, #32
 80314f2:	f000 84c2 	beq.w	8031e7a <_svfprintf_r+0xb2a>
 80314f6:	3607      	adds	r6, #7
 80314f8:	f026 0307 	bic.w	r3, r6, #7
 80314fc:	461a      	mov	r2, r3
 80314fe:	685f      	ldr	r7, [r3, #4]
 8031500:	f852 6b08 	ldr.w	r6, [r2], #8
 8031504:	9207      	str	r2, [sp, #28]
 8031506:	07eb      	lsls	r3, r5, #31
 8031508:	d50a      	bpl.n	8031520 <_svfprintf_r+0x1d0>
 803150a:	ea56 0307 	orrs.w	r3, r6, r7
 803150e:	d007      	beq.n	8031520 <_svfprintf_r+0x1d0>
 8031510:	2330      	movs	r3, #48	@ 0x30
 8031512:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 8031516:	9b06      	ldr	r3, [sp, #24]
 8031518:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 803151c:	f045 0502 	orr.w	r5, r5, #2
 8031520:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8031524:	2302      	movs	r3, #2
 8031526:	f000 bc28 	b.w	8031d7a <_svfprintf_r+0xa2a>
 803152a:	9803      	ldr	r0, [sp, #12]
 803152c:	f7fc ff26 	bl	802e37c <_localeconv_r>
 8031530:	6843      	ldr	r3, [r0, #4]
 8031532:	9317      	str	r3, [sp, #92]	@ 0x5c
 8031534:	4618      	mov	r0, r3
 8031536:	f7de feb3 	bl	80102a0 <strlen>
 803153a:	9012      	str	r0, [sp, #72]	@ 0x48
 803153c:	9803      	ldr	r0, [sp, #12]
 803153e:	f7fc ff1d 	bl	802e37c <_localeconv_r>
 8031542:	6883      	ldr	r3, [r0, #8]
 8031544:	9309      	str	r3, [sp, #36]	@ 0x24
 8031546:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8031548:	b12b      	cbz	r3, 8031556 <_svfprintf_r+0x206>
 803154a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803154c:	b11b      	cbz	r3, 8031556 <_svfprintf_r+0x206>
 803154e:	781b      	ldrb	r3, [r3, #0]
 8031550:	b10b      	cbz	r3, 8031556 <_svfprintf_r+0x206>
 8031552:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 8031556:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8031558:	e757      	b.n	803140a <_svfprintf_r+0xba>
 803155a:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 803155e:	2b00      	cmp	r3, #0
 8031560:	d1f9      	bne.n	8031556 <_svfprintf_r+0x206>
 8031562:	2320      	movs	r3, #32
 8031564:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8031568:	e7f5      	b.n	8031556 <_svfprintf_r+0x206>
 803156a:	f045 0501 	orr.w	r5, r5, #1
 803156e:	e7f2      	b.n	8031556 <_svfprintf_r+0x206>
 8031570:	f856 3b04 	ldr.w	r3, [r6], #4
 8031574:	930e      	str	r3, [sp, #56]	@ 0x38
 8031576:	2b00      	cmp	r3, #0
 8031578:	daed      	bge.n	8031556 <_svfprintf_r+0x206>
 803157a:	425b      	negs	r3, r3
 803157c:	930e      	str	r3, [sp, #56]	@ 0x38
 803157e:	f045 0504 	orr.w	r5, r5, #4
 8031582:	e7e8      	b.n	8031556 <_svfprintf_r+0x206>
 8031584:	232b      	movs	r3, #43	@ 0x2b
 8031586:	e7ed      	b.n	8031564 <_svfprintf_r+0x214>
 8031588:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803158a:	f813 2b01 	ldrb.w	r2, [r3], #1
 803158e:	9206      	str	r2, [sp, #24]
 8031590:	2a2a      	cmp	r2, #42	@ 0x2a
 8031592:	d10f      	bne.n	80315b4 <_svfprintf_r+0x264>
 8031594:	f856 2b04 	ldr.w	r2, [r6], #4
 8031598:	930c      	str	r3, [sp, #48]	@ 0x30
 803159a:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 803159e:	e7da      	b.n	8031556 <_svfprintf_r+0x206>
 80315a0:	fb01 2808 	mla	r8, r1, r8, r2
 80315a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80315a8:	9206      	str	r2, [sp, #24]
 80315aa:	9a06      	ldr	r2, [sp, #24]
 80315ac:	3a30      	subs	r2, #48	@ 0x30
 80315ae:	2a09      	cmp	r2, #9
 80315b0:	d9f6      	bls.n	80315a0 <_svfprintf_r+0x250>
 80315b2:	e72d      	b.n	8031410 <_svfprintf_r+0xc0>
 80315b4:	f04f 0800 	mov.w	r8, #0
 80315b8:	210a      	movs	r1, #10
 80315ba:	e7f6      	b.n	80315aa <_svfprintf_r+0x25a>
 80315bc:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 80315c0:	e7c9      	b.n	8031556 <_svfprintf_r+0x206>
 80315c2:	2200      	movs	r2, #0
 80315c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80315c6:	920e      	str	r2, [sp, #56]	@ 0x38
 80315c8:	210a      	movs	r1, #10
 80315ca:	9a06      	ldr	r2, [sp, #24]
 80315cc:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80315ce:	3a30      	subs	r2, #48	@ 0x30
 80315d0:	fb01 2200 	mla	r2, r1, r0, r2
 80315d4:	920e      	str	r2, [sp, #56]	@ 0x38
 80315d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80315da:	9206      	str	r2, [sp, #24]
 80315dc:	3a30      	subs	r2, #48	@ 0x30
 80315de:	2a09      	cmp	r2, #9
 80315e0:	d9f3      	bls.n	80315ca <_svfprintf_r+0x27a>
 80315e2:	e715      	b.n	8031410 <_svfprintf_r+0xc0>
 80315e4:	f045 0508 	orr.w	r5, r5, #8
 80315e8:	e7b5      	b.n	8031556 <_svfprintf_r+0x206>
 80315ea:	bf00      	nop
 80315ec:	f3af 8000 	nop.w
	...
 80315f8:	0803c44b 	.word	0x0803c44b
 80315fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80315fe:	781b      	ldrb	r3, [r3, #0]
 8031600:	2b68      	cmp	r3, #104	@ 0x68
 8031602:	bf01      	itttt	eq
 8031604:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 8031606:	3301      	addeq	r3, #1
 8031608:	930c      	streq	r3, [sp, #48]	@ 0x30
 803160a:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 803160e:	bf18      	it	ne
 8031610:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 8031614:	e79f      	b.n	8031556 <_svfprintf_r+0x206>
 8031616:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8031618:	781b      	ldrb	r3, [r3, #0]
 803161a:	2b6c      	cmp	r3, #108	@ 0x6c
 803161c:	d105      	bne.n	803162a <_svfprintf_r+0x2da>
 803161e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8031620:	3301      	adds	r3, #1
 8031622:	930c      	str	r3, [sp, #48]	@ 0x30
 8031624:	f045 0520 	orr.w	r5, r5, #32
 8031628:	e795      	b.n	8031556 <_svfprintf_r+0x206>
 803162a:	f045 0510 	orr.w	r5, r5, #16
 803162e:	e792      	b.n	8031556 <_svfprintf_r+0x206>
 8031630:	4632      	mov	r2, r6
 8031632:	f852 3b04 	ldr.w	r3, [r2], #4
 8031636:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 803163a:	2300      	movs	r3, #0
 803163c:	9207      	str	r2, [sp, #28]
 803163e:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8031642:	469a      	mov	sl, r3
 8031644:	f04f 0801 	mov.w	r8, #1
 8031648:	9310      	str	r3, [sp, #64]	@ 0x40
 803164a:	461f      	mov	r7, r3
 803164c:	9308      	str	r3, [sp, #32]
 803164e:	461e      	mov	r6, r3
 8031650:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 8031654:	e1d2      	b.n	80319fc <_svfprintf_r+0x6ac>
 8031656:	f045 0510 	orr.w	r5, r5, #16
 803165a:	06af      	lsls	r7, r5, #26
 803165c:	d512      	bpl.n	8031684 <_svfprintf_r+0x334>
 803165e:	3607      	adds	r6, #7
 8031660:	f026 0307 	bic.w	r3, r6, #7
 8031664:	461a      	mov	r2, r3
 8031666:	685f      	ldr	r7, [r3, #4]
 8031668:	f852 6b08 	ldr.w	r6, [r2], #8
 803166c:	9207      	str	r2, [sp, #28]
 803166e:	2f00      	cmp	r7, #0
 8031670:	da06      	bge.n	8031680 <_svfprintf_r+0x330>
 8031672:	4276      	negs	r6, r6
 8031674:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8031678:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 803167c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8031680:	2301      	movs	r3, #1
 8031682:	e37d      	b.n	8031d80 <_svfprintf_r+0xa30>
 8031684:	4633      	mov	r3, r6
 8031686:	06ee      	lsls	r6, r5, #27
 8031688:	f853 7b04 	ldr.w	r7, [r3], #4
 803168c:	9307      	str	r3, [sp, #28]
 803168e:	d502      	bpl.n	8031696 <_svfprintf_r+0x346>
 8031690:	463e      	mov	r6, r7
 8031692:	17ff      	asrs	r7, r7, #31
 8031694:	e7eb      	b.n	803166e <_svfprintf_r+0x31e>
 8031696:	0668      	lsls	r0, r5, #25
 8031698:	d503      	bpl.n	80316a2 <_svfprintf_r+0x352>
 803169a:	b23e      	sxth	r6, r7
 803169c:	f347 37c0 	sbfx	r7, r7, #15, #1
 80316a0:	e7e5      	b.n	803166e <_svfprintf_r+0x31e>
 80316a2:	05a9      	lsls	r1, r5, #22
 80316a4:	d5f4      	bpl.n	8031690 <_svfprintf_r+0x340>
 80316a6:	b27e      	sxtb	r6, r7
 80316a8:	f347 17c0 	sbfx	r7, r7, #7, #1
 80316ac:	e7df      	b.n	803166e <_svfprintf_r+0x31e>
 80316ae:	3607      	adds	r6, #7
 80316b0:	f026 0307 	bic.w	r3, r6, #7
 80316b4:	ecb3 7b02 	vldmia	r3!, {d7}
 80316b8:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80316bc:	9307      	str	r3, [sp, #28]
 80316be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80316c0:	931a      	str	r3, [sp, #104]	@ 0x68
 80316c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80316c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80316c8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80316ca:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 80316ce:	4b81      	ldr	r3, [pc, #516]	@ (80318d4 <_svfprintf_r+0x584>)
 80316d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80316d4:	f7df fa42 	bl	8010b5c <__aeabi_dcmpun>
 80316d8:	bb10      	cbnz	r0, 8031720 <_svfprintf_r+0x3d0>
 80316da:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 80316de:	4b7d      	ldr	r3, [pc, #500]	@ (80318d4 <_svfprintf_r+0x584>)
 80316e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80316e4:	f7df fa1c 	bl	8010b20 <__aeabi_dcmple>
 80316e8:	b9d0      	cbnz	r0, 8031720 <_svfprintf_r+0x3d0>
 80316ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80316ee:	2200      	movs	r2, #0
 80316f0:	2300      	movs	r3, #0
 80316f2:	f7df fa0b 	bl	8010b0c <__aeabi_dcmplt>
 80316f6:	b110      	cbz	r0, 80316fe <_svfprintf_r+0x3ae>
 80316f8:	232d      	movs	r3, #45	@ 0x2d
 80316fa:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80316fe:	4a76      	ldr	r2, [pc, #472]	@ (80318d8 <_svfprintf_r+0x588>)
 8031700:	4b76      	ldr	r3, [pc, #472]	@ (80318dc <_svfprintf_r+0x58c>)
 8031702:	9906      	ldr	r1, [sp, #24]
 8031704:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 8031708:	2947      	cmp	r1, #71	@ 0x47
 803170a:	bfd4      	ite	le
 803170c:	4691      	movle	r9, r2
 803170e:	4699      	movgt	r9, r3
 8031710:	f04f 0a00 	mov.w	sl, #0
 8031714:	f04f 0803 	mov.w	r8, #3
 8031718:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 803171c:	f000 bfec 	b.w	80326f8 <_svfprintf_r+0x13a8>
 8031720:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8031724:	4610      	mov	r0, r2
 8031726:	4619      	mov	r1, r3
 8031728:	f7df fa18 	bl	8010b5c <__aeabi_dcmpun>
 803172c:	4682      	mov	sl, r0
 803172e:	b140      	cbz	r0, 8031742 <_svfprintf_r+0x3f2>
 8031730:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8031732:	4a6b      	ldr	r2, [pc, #428]	@ (80318e0 <_svfprintf_r+0x590>)
 8031734:	2b00      	cmp	r3, #0
 8031736:	bfbc      	itt	lt
 8031738:	232d      	movlt	r3, #45	@ 0x2d
 803173a:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 803173e:	4b69      	ldr	r3, [pc, #420]	@ (80318e4 <_svfprintf_r+0x594>)
 8031740:	e7df      	b.n	8031702 <_svfprintf_r+0x3b2>
 8031742:	9b06      	ldr	r3, [sp, #24]
 8031744:	2b61      	cmp	r3, #97	@ 0x61
 8031746:	d025      	beq.n	8031794 <_svfprintf_r+0x444>
 8031748:	2b41      	cmp	r3, #65	@ 0x41
 803174a:	d125      	bne.n	8031798 <_svfprintf_r+0x448>
 803174c:	2358      	movs	r3, #88	@ 0x58
 803174e:	2230      	movs	r2, #48	@ 0x30
 8031750:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 8031754:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 8031758:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 803175c:	f045 0502 	orr.w	r5, r5, #2
 8031760:	f340 80a5 	ble.w	80318ae <_svfprintf_r+0x55e>
 8031764:	9803      	ldr	r0, [sp, #12]
 8031766:	f108 0101 	add.w	r1, r8, #1
 803176a:	f7fd fecf 	bl	802f50c <_malloc_r>
 803176e:	4681      	mov	r9, r0
 8031770:	2800      	cmp	r0, #0
 8031772:	f040 80a1 	bne.w	80318b8 <_svfprintf_r+0x568>
 8031776:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 803177a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 803177e:	f8ab 300c 	strh.w	r3, [fp, #12]
 8031782:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8031786:	065b      	lsls	r3, r3, #25
 8031788:	f53f ae04 	bmi.w	8031394 <_svfprintf_r+0x44>
 803178c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 803178e:	b053      	add	sp, #332	@ 0x14c
 8031790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8031794:	2378      	movs	r3, #120	@ 0x78
 8031796:	e7da      	b.n	803174e <_svfprintf_r+0x3fe>
 8031798:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 803179c:	f000 808e 	beq.w	80318bc <_svfprintf_r+0x56c>
 80317a0:	9b06      	ldr	r3, [sp, #24]
 80317a2:	f023 0320 	bic.w	r3, r3, #32
 80317a6:	2b47      	cmp	r3, #71	@ 0x47
 80317a8:	d105      	bne.n	80317b6 <_svfprintf_r+0x466>
 80317aa:	f1b8 0f00 	cmp.w	r8, #0
 80317ae:	d102      	bne.n	80317b6 <_svfprintf_r+0x466>
 80317b0:	46c2      	mov	sl, r8
 80317b2:	f04f 0801 	mov.w	r8, #1
 80317b6:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 80317ba:	9311      	str	r3, [sp, #68]	@ 0x44
 80317bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80317be:	2b00      	cmp	r3, #0
 80317c0:	da7f      	bge.n	80318c2 <_svfprintf_r+0x572>
 80317c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80317c4:	9314      	str	r3, [sp, #80]	@ 0x50
 80317c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80317c8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80317cc:	9315      	str	r3, [sp, #84]	@ 0x54
 80317ce:	232d      	movs	r3, #45	@ 0x2d
 80317d0:	931c      	str	r3, [sp, #112]	@ 0x70
 80317d2:	9b06      	ldr	r3, [sp, #24]
 80317d4:	f023 0320 	bic.w	r3, r3, #32
 80317d8:	2b41      	cmp	r3, #65	@ 0x41
 80317da:	9308      	str	r3, [sp, #32]
 80317dc:	f040 81e6 	bne.w	8031bac <_svfprintf_r+0x85c>
 80317e0:	a820      	add	r0, sp, #128	@ 0x80
 80317e2:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 80317e6:	f7fc fe9b 	bl	802e520 <frexp>
 80317ea:	2200      	movs	r2, #0
 80317ec:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80317f0:	ec51 0b10 	vmov	r0, r1, d0
 80317f4:	f7de ff18 	bl	8010628 <__aeabi_dmul>
 80317f8:	4602      	mov	r2, r0
 80317fa:	460b      	mov	r3, r1
 80317fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8031800:	2200      	movs	r2, #0
 8031802:	2300      	movs	r3, #0
 8031804:	f7df f978 	bl	8010af8 <__aeabi_dcmpeq>
 8031808:	b108      	cbz	r0, 803180e <_svfprintf_r+0x4be>
 803180a:	2301      	movs	r3, #1
 803180c:	9320      	str	r3, [sp, #128]	@ 0x80
 803180e:	4a36      	ldr	r2, [pc, #216]	@ (80318e8 <_svfprintf_r+0x598>)
 8031810:	4b36      	ldr	r3, [pc, #216]	@ (80318ec <_svfprintf_r+0x59c>)
 8031812:	9906      	ldr	r1, [sp, #24]
 8031814:	2961      	cmp	r1, #97	@ 0x61
 8031816:	bf18      	it	ne
 8031818:	461a      	movne	r2, r3
 803181a:	9210      	str	r2, [sp, #64]	@ 0x40
 803181c:	f108 37ff 	add.w	r7, r8, #4294967295	@ 0xffffffff
 8031820:	464e      	mov	r6, r9
 8031822:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8031826:	4b32      	ldr	r3, [pc, #200]	@ (80318f0 <_svfprintf_r+0x5a0>)
 8031828:	2200      	movs	r2, #0
 803182a:	f7de fefd 	bl	8010628 <__aeabi_dmul>
 803182e:	4602      	mov	r2, r0
 8031830:	460b      	mov	r3, r1
 8031832:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8031836:	f7df f9a7 	bl	8010b88 <__aeabi_d2iz>
 803183a:	9013      	str	r0, [sp, #76]	@ 0x4c
 803183c:	f7de fe8a 	bl	8010554 <__aeabi_i2d>
 8031840:	4602      	mov	r2, r0
 8031842:	460b      	mov	r3, r1
 8031844:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8031848:	f7de fd36 	bl	80102b8 <__aeabi_dsub>
 803184c:	4602      	mov	r2, r0
 803184e:	460b      	mov	r3, r1
 8031850:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8031854:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8031856:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8031858:	5c9b      	ldrb	r3, [r3, r2]
 803185a:	f806 3b01 	strb.w	r3, [r6], #1
 803185e:	1c7a      	adds	r2, r7, #1
 8031860:	d006      	beq.n	8031870 <_svfprintf_r+0x520>
 8031862:	1e7b      	subs	r3, r7, #1
 8031864:	931d      	str	r3, [sp, #116]	@ 0x74
 8031866:	2200      	movs	r2, #0
 8031868:	2300      	movs	r3, #0
 803186a:	f7df f945 	bl	8010af8 <__aeabi_dcmpeq>
 803186e:	b370      	cbz	r0, 80318ce <_svfprintf_r+0x57e>
 8031870:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8031874:	4b1f      	ldr	r3, [pc, #124]	@ (80318f4 <_svfprintf_r+0x5a4>)
 8031876:	2200      	movs	r2, #0
 8031878:	f7df f966 	bl	8010b48 <__aeabi_dcmpgt>
 803187c:	2800      	cmp	r0, #0
 803187e:	d13b      	bne.n	80318f8 <_svfprintf_r+0x5a8>
 8031880:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8031884:	4b1b      	ldr	r3, [pc, #108]	@ (80318f4 <_svfprintf_r+0x5a4>)
 8031886:	2200      	movs	r2, #0
 8031888:	f7df f936 	bl	8010af8 <__aeabi_dcmpeq>
 803188c:	b110      	cbz	r0, 8031894 <_svfprintf_r+0x544>
 803188e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8031890:	07db      	lsls	r3, r3, #31
 8031892:	d431      	bmi.n	80318f8 <_svfprintf_r+0x5a8>
 8031894:	4633      	mov	r3, r6
 8031896:	19f1      	adds	r1, r6, r7
 8031898:	2030      	movs	r0, #48	@ 0x30
 803189a:	1aca      	subs	r2, r1, r3
 803189c:	2a00      	cmp	r2, #0
 803189e:	f280 8182 	bge.w	8031ba6 <_svfprintf_r+0x856>
 80318a2:	1c7b      	adds	r3, r7, #1
 80318a4:	3701      	adds	r7, #1
 80318a6:	bfb8      	it	lt
 80318a8:	2300      	movlt	r3, #0
 80318aa:	441e      	add	r6, r3
 80318ac:	e038      	b.n	8031920 <_svfprintf_r+0x5d0>
 80318ae:	f04f 0a00 	mov.w	sl, #0
 80318b2:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 80318b6:	e77e      	b.n	80317b6 <_svfprintf_r+0x466>
 80318b8:	4682      	mov	sl, r0
 80318ba:	e77c      	b.n	80317b6 <_svfprintf_r+0x466>
 80318bc:	f04f 0806 	mov.w	r8, #6
 80318c0:	e779      	b.n	80317b6 <_svfprintf_r+0x466>
 80318c2:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 80318c6:	2300      	movs	r3, #0
 80318c8:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 80318cc:	e780      	b.n	80317d0 <_svfprintf_r+0x480>
 80318ce:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 80318d0:	e7a7      	b.n	8031822 <_svfprintf_r+0x4d2>
 80318d2:	bf00      	nop
 80318d4:	7fefffff 	.word	0x7fefffff
 80318d8:	0803c43b 	.word	0x0803c43b
 80318dc:	0803c43f 	.word	0x0803c43f
 80318e0:	0803c443 	.word	0x0803c443
 80318e4:	0803c447 	.word	0x0803c447
 80318e8:	0803c44b 	.word	0x0803c44b
 80318ec:	0803c45c 	.word	0x0803c45c
 80318f0:	40300000 	.word	0x40300000
 80318f4:	3fe00000 	.word	0x3fe00000
 80318f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80318fa:	9624      	str	r6, [sp, #144]	@ 0x90
 80318fc:	7bd9      	ldrb	r1, [r3, #15]
 80318fe:	2030      	movs	r0, #48	@ 0x30
 8031900:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8031902:	1e53      	subs	r3, r2, #1
 8031904:	9324      	str	r3, [sp, #144]	@ 0x90
 8031906:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 803190a:	428b      	cmp	r3, r1
 803190c:	f000 8148 	beq.w	8031ba0 <_svfprintf_r+0x850>
 8031910:	2b39      	cmp	r3, #57	@ 0x39
 8031912:	bf0b      	itete	eq
 8031914:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 8031916:	3301      	addne	r3, #1
 8031918:	7a9b      	ldrbeq	r3, [r3, #10]
 803191a:	b2db      	uxtbne	r3, r3
 803191c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8031920:	eba6 0309 	sub.w	r3, r6, r9
 8031924:	9304      	str	r3, [sp, #16]
 8031926:	9b08      	ldr	r3, [sp, #32]
 8031928:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 803192a:	2b47      	cmp	r3, #71	@ 0x47
 803192c:	f040 8187 	bne.w	8031c3e <_svfprintf_r+0x8ee>
 8031930:	1cf1      	adds	r1, r6, #3
 8031932:	db02      	blt.n	803193a <_svfprintf_r+0x5ea>
 8031934:	4546      	cmp	r6, r8
 8031936:	f340 81a5 	ble.w	8031c84 <_svfprintf_r+0x934>
 803193a:	9b06      	ldr	r3, [sp, #24]
 803193c:	3b02      	subs	r3, #2
 803193e:	9306      	str	r3, [sp, #24]
 8031940:	9906      	ldr	r1, [sp, #24]
 8031942:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8031946:	f021 0120 	bic.w	r1, r1, #32
 803194a:	2941      	cmp	r1, #65	@ 0x41
 803194c:	bf08      	it	eq
 803194e:	320f      	addeq	r2, #15
 8031950:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 8031954:	bf06      	itte	eq
 8031956:	b2d2      	uxtbeq	r2, r2
 8031958:	2101      	moveq	r1, #1
 803195a:	2100      	movne	r1, #0
 803195c:	2b00      	cmp	r3, #0
 803195e:	9320      	str	r3, [sp, #128]	@ 0x80
 8031960:	bfb8      	it	lt
 8031962:	f1c6 0301 	rsblt	r3, r6, #1
 8031966:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 803196a:	bfb4      	ite	lt
 803196c:	222d      	movlt	r2, #45	@ 0x2d
 803196e:	222b      	movge	r2, #43	@ 0x2b
 8031970:	2b09      	cmp	r3, #9
 8031972:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 8031976:	f340 8178 	ble.w	8031c6a <_svfprintf_r+0x91a>
 803197a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 803197e:	270a      	movs	r7, #10
 8031980:	4602      	mov	r2, r0
 8031982:	fbb3 f6f7 	udiv	r6, r3, r7
 8031986:	fb07 3116 	mls	r1, r7, r6, r3
 803198a:	3130      	adds	r1, #48	@ 0x30
 803198c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8031990:	4619      	mov	r1, r3
 8031992:	2963      	cmp	r1, #99	@ 0x63
 8031994:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 8031998:	4633      	mov	r3, r6
 803199a:	dcf1      	bgt.n	8031980 <_svfprintf_r+0x630>
 803199c:	3330      	adds	r3, #48	@ 0x30
 803199e:	1e91      	subs	r1, r2, #2
 80319a0:	f800 3c01 	strb.w	r3, [r0, #-1]
 80319a4:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 80319a8:	460b      	mov	r3, r1
 80319aa:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 80319ae:	4283      	cmp	r3, r0
 80319b0:	f0c0 8156 	bcc.w	8031c60 <_svfprintf_r+0x910>
 80319b4:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 80319b8:	1a9b      	subs	r3, r3, r2
 80319ba:	4281      	cmp	r1, r0
 80319bc:	bf88      	it	hi
 80319be:	2300      	movhi	r3, #0
 80319c0:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 80319c4:	441a      	add	r2, r3
 80319c6:	ab22      	add	r3, sp, #136	@ 0x88
 80319c8:	1ad3      	subs	r3, r2, r3
 80319ca:	9a04      	ldr	r2, [sp, #16]
 80319cc:	9318      	str	r3, [sp, #96]	@ 0x60
 80319ce:	2a01      	cmp	r2, #1
 80319d0:	eb03 0802 	add.w	r8, r3, r2
 80319d4:	dc01      	bgt.n	80319da <_svfprintf_r+0x68a>
 80319d6:	07ea      	lsls	r2, r5, #31
 80319d8:	d501      	bpl.n	80319de <_svfprintf_r+0x68e>
 80319da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80319dc:	4498      	add	r8, r3
 80319de:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 80319e2:	2700      	movs	r7, #0
 80319e4:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 80319e8:	9311      	str	r3, [sp, #68]	@ 0x44
 80319ea:	9708      	str	r7, [sp, #32]
 80319ec:	463e      	mov	r6, r7
 80319ee:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80319f0:	2b00      	cmp	r3, #0
 80319f2:	f040 818f 	bne.w	8031d14 <_svfprintf_r+0x9c4>
 80319f6:	2300      	movs	r3, #0
 80319f8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80319fa:	9310      	str	r3, [sp, #64]	@ 0x40
 80319fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80319fe:	4543      	cmp	r3, r8
 8031a00:	bfb8      	it	lt
 8031a02:	4643      	movlt	r3, r8
 8031a04:	9311      	str	r3, [sp, #68]	@ 0x44
 8031a06:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 8031a0a:	b113      	cbz	r3, 8031a12 <_svfprintf_r+0x6c2>
 8031a0c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8031a0e:	3301      	adds	r3, #1
 8031a10:	9311      	str	r3, [sp, #68]	@ 0x44
 8031a12:	f015 0302 	ands.w	r3, r5, #2
 8031a16:	931c      	str	r3, [sp, #112]	@ 0x70
 8031a18:	bf1e      	ittt	ne
 8031a1a:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 8031a1c:	3302      	addne	r3, #2
 8031a1e:	9311      	strne	r3, [sp, #68]	@ 0x44
 8031a20:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 8031a24:	931d      	str	r3, [sp, #116]	@ 0x74
 8031a26:	d122      	bne.n	8031a6e <_svfprintf_r+0x71e>
 8031a28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8031a2a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8031a2c:	1a9b      	subs	r3, r3, r2
 8031a2e:	2b00      	cmp	r3, #0
 8031a30:	9313      	str	r3, [sp, #76]	@ 0x4c
 8031a32:	dd1c      	ble.n	8031a6e <_svfprintf_r+0x71e>
 8031a34:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8031a36:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8031a3a:	2810      	cmp	r0, #16
 8031a3c:	489e      	ldr	r0, [pc, #632]	@ (8031cb8 <_svfprintf_r+0x968>)
 8031a3e:	6020      	str	r0, [r4, #0]
 8031a40:	f102 0201 	add.w	r2, r2, #1
 8031a44:	f104 0108 	add.w	r1, r4, #8
 8031a48:	f300 8298 	bgt.w	8031f7c <_svfprintf_r+0xc2c>
 8031a4c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8031a4e:	6060      	str	r0, [r4, #4]
 8031a50:	4403      	add	r3, r0
 8031a52:	2a07      	cmp	r2, #7
 8031a54:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8031a58:	f340 82a5 	ble.w	8031fa6 <_svfprintf_r+0xc56>
 8031a5c:	9803      	ldr	r0, [sp, #12]
 8031a5e:	aa26      	add	r2, sp, #152	@ 0x98
 8031a60:	4659      	mov	r1, fp
 8031a62:	f7fd fffd 	bl	802fa60 <__ssprint_r>
 8031a66:	2800      	cmp	r0, #0
 8031a68:	f040 85ed 	bne.w	8032646 <_svfprintf_r+0x12f6>
 8031a6c:	ac29      	add	r4, sp, #164	@ 0xa4
 8031a6e:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 8031a72:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031a74:	b16a      	cbz	r2, 8031a92 <_svfprintf_r+0x742>
 8031a76:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 8031a7a:	6022      	str	r2, [r4, #0]
 8031a7c:	2201      	movs	r2, #1
 8031a7e:	4413      	add	r3, r2
 8031a80:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031a82:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031a84:	6062      	str	r2, [r4, #4]
 8031a86:	4413      	add	r3, r2
 8031a88:	2b07      	cmp	r3, #7
 8031a8a:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031a8c:	f300 828d 	bgt.w	8031faa <_svfprintf_r+0xc5a>
 8031a90:	3408      	adds	r4, #8
 8031a92:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8031a94:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031a96:	b162      	cbz	r2, 8031ab2 <_svfprintf_r+0x762>
 8031a98:	aa1f      	add	r2, sp, #124	@ 0x7c
 8031a9a:	6022      	str	r2, [r4, #0]
 8031a9c:	2202      	movs	r2, #2
 8031a9e:	4413      	add	r3, r2
 8031aa0:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031aa2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031aa4:	6062      	str	r2, [r4, #4]
 8031aa6:	3301      	adds	r3, #1
 8031aa8:	2b07      	cmp	r3, #7
 8031aaa:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031aac:	f300 8287 	bgt.w	8031fbe <_svfprintf_r+0xc6e>
 8031ab0:	3408      	adds	r4, #8
 8031ab2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8031ab4:	2b80      	cmp	r3, #128	@ 0x80
 8031ab6:	d122      	bne.n	8031afe <_svfprintf_r+0x7ae>
 8031ab8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8031aba:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8031abc:	1a9b      	subs	r3, r3, r2
 8031abe:	2b00      	cmp	r3, #0
 8031ac0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8031ac2:	dd1c      	ble.n	8031afe <_svfprintf_r+0x7ae>
 8031ac4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8031ac6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8031aca:	2810      	cmp	r0, #16
 8031acc:	487b      	ldr	r0, [pc, #492]	@ (8031cbc <_svfprintf_r+0x96c>)
 8031ace:	6020      	str	r0, [r4, #0]
 8031ad0:	f102 0201 	add.w	r2, r2, #1
 8031ad4:	f104 0108 	add.w	r1, r4, #8
 8031ad8:	f300 827b 	bgt.w	8031fd2 <_svfprintf_r+0xc82>
 8031adc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8031ade:	6060      	str	r0, [r4, #4]
 8031ae0:	4403      	add	r3, r0
 8031ae2:	2a07      	cmp	r2, #7
 8031ae4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8031ae8:	f340 8288 	ble.w	8031ffc <_svfprintf_r+0xcac>
 8031aec:	9803      	ldr	r0, [sp, #12]
 8031aee:	aa26      	add	r2, sp, #152	@ 0x98
 8031af0:	4659      	mov	r1, fp
 8031af2:	f7fd ffb5 	bl	802fa60 <__ssprint_r>
 8031af6:	2800      	cmp	r0, #0
 8031af8:	f040 85a5 	bne.w	8032646 <_svfprintf_r+0x12f6>
 8031afc:	ac29      	add	r4, sp, #164	@ 0xa4
 8031afe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8031b00:	eba3 0308 	sub.w	r3, r3, r8
 8031b04:	2b00      	cmp	r3, #0
 8031b06:	9310      	str	r3, [sp, #64]	@ 0x40
 8031b08:	dd1c      	ble.n	8031b44 <_svfprintf_r+0x7f4>
 8031b0a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8031b0c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8031b10:	2810      	cmp	r0, #16
 8031b12:	486a      	ldr	r0, [pc, #424]	@ (8031cbc <_svfprintf_r+0x96c>)
 8031b14:	6020      	str	r0, [r4, #0]
 8031b16:	f102 0201 	add.w	r2, r2, #1
 8031b1a:	f104 0108 	add.w	r1, r4, #8
 8031b1e:	f300 826f 	bgt.w	8032000 <_svfprintf_r+0xcb0>
 8031b22:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8031b24:	6060      	str	r0, [r4, #4]
 8031b26:	4403      	add	r3, r0
 8031b28:	2a07      	cmp	r2, #7
 8031b2a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8031b2e:	f340 827c 	ble.w	803202a <_svfprintf_r+0xcda>
 8031b32:	9803      	ldr	r0, [sp, #12]
 8031b34:	aa26      	add	r2, sp, #152	@ 0x98
 8031b36:	4659      	mov	r1, fp
 8031b38:	f7fd ff92 	bl	802fa60 <__ssprint_r>
 8031b3c:	2800      	cmp	r0, #0
 8031b3e:	f040 8582 	bne.w	8032646 <_svfprintf_r+0x12f6>
 8031b42:	ac29      	add	r4, sp, #164	@ 0xa4
 8031b44:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031b46:	9310      	str	r3, [sp, #64]	@ 0x40
 8031b48:	05ea      	lsls	r2, r5, #23
 8031b4a:	f100 8275 	bmi.w	8032038 <_svfprintf_r+0xce8>
 8031b4e:	4443      	add	r3, r8
 8031b50:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031b52:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031b54:	3301      	adds	r3, #1
 8031b56:	2b07      	cmp	r3, #7
 8031b58:	e9c4 9800 	strd	r9, r8, [r4]
 8031b5c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031b5e:	f300 82b1 	bgt.w	80320c4 <_svfprintf_r+0xd74>
 8031b62:	3408      	adds	r4, #8
 8031b64:	076a      	lsls	r2, r5, #29
 8031b66:	f100 8550 	bmi.w	803260a <_svfprintf_r+0x12ba>
 8031b6a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8031b6e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8031b70:	428a      	cmp	r2, r1
 8031b72:	bfac      	ite	ge
 8031b74:	189b      	addge	r3, r3, r2
 8031b76:	185b      	addlt	r3, r3, r1
 8031b78:	930f      	str	r3, [sp, #60]	@ 0x3c
 8031b7a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031b7c:	b13b      	cbz	r3, 8031b8e <_svfprintf_r+0x83e>
 8031b7e:	9803      	ldr	r0, [sp, #12]
 8031b80:	aa26      	add	r2, sp, #152	@ 0x98
 8031b82:	4659      	mov	r1, fp
 8031b84:	f7fd ff6c 	bl	802fa60 <__ssprint_r>
 8031b88:	2800      	cmp	r0, #0
 8031b8a:	f040 855c 	bne.w	8032646 <_svfprintf_r+0x12f6>
 8031b8e:	2300      	movs	r3, #0
 8031b90:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031b92:	f1ba 0f00 	cmp.w	sl, #0
 8031b96:	f040 8572 	bne.w	803267e <_svfprintf_r+0x132e>
 8031b9a:	9e07      	ldr	r6, [sp, #28]
 8031b9c:	ac29      	add	r4, sp, #164	@ 0xa4
 8031b9e:	e0c6      	b.n	8031d2e <_svfprintf_r+0x9de>
 8031ba0:	f802 0c01 	strb.w	r0, [r2, #-1]
 8031ba4:	e6ac      	b.n	8031900 <_svfprintf_r+0x5b0>
 8031ba6:	f803 0b01 	strb.w	r0, [r3], #1
 8031baa:	e676      	b.n	803189a <_svfprintf_r+0x54a>
 8031bac:	9b08      	ldr	r3, [sp, #32]
 8031bae:	2b46      	cmp	r3, #70	@ 0x46
 8031bb0:	d005      	beq.n	8031bbe <_svfprintf_r+0x86e>
 8031bb2:	2b45      	cmp	r3, #69	@ 0x45
 8031bb4:	d11a      	bne.n	8031bec <_svfprintf_r+0x89c>
 8031bb6:	f108 0601 	add.w	r6, r8, #1
 8031bba:	2102      	movs	r1, #2
 8031bbc:	e001      	b.n	8031bc2 <_svfprintf_r+0x872>
 8031bbe:	4646      	mov	r6, r8
 8031bc0:	2103      	movs	r1, #3
 8031bc2:	ab24      	add	r3, sp, #144	@ 0x90
 8031bc4:	9301      	str	r3, [sp, #4]
 8031bc6:	ab21      	add	r3, sp, #132	@ 0x84
 8031bc8:	9300      	str	r3, [sp, #0]
 8031bca:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8031bce:	ab20      	add	r3, sp, #128	@ 0x80
 8031bd0:	9803      	ldr	r0, [sp, #12]
 8031bd2:	4632      	mov	r2, r6
 8031bd4:	f7fc fd80 	bl	802e6d8 <_dtoa_r>
 8031bd8:	9b08      	ldr	r3, [sp, #32]
 8031bda:	2b47      	cmp	r3, #71	@ 0x47
 8031bdc:	4681      	mov	r9, r0
 8031bde:	d119      	bne.n	8031c14 <_svfprintf_r+0x8c4>
 8031be0:	07e8      	lsls	r0, r5, #31
 8031be2:	d405      	bmi.n	8031bf0 <_svfprintf_r+0x8a0>
 8031be4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8031be6:	eba3 0309 	sub.w	r3, r3, r9
 8031bea:	e69b      	b.n	8031924 <_svfprintf_r+0x5d4>
 8031bec:	4646      	mov	r6, r8
 8031bee:	e7e4      	b.n	8031bba <_svfprintf_r+0x86a>
 8031bf0:	eb09 0706 	add.w	r7, r9, r6
 8031bf4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8031bf8:	2200      	movs	r2, #0
 8031bfa:	2300      	movs	r3, #0
 8031bfc:	f7de ff7c 	bl	8010af8 <__aeabi_dcmpeq>
 8031c00:	b100      	cbz	r0, 8031c04 <_svfprintf_r+0x8b4>
 8031c02:	9724      	str	r7, [sp, #144]	@ 0x90
 8031c04:	2230      	movs	r2, #48	@ 0x30
 8031c06:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8031c08:	429f      	cmp	r7, r3
 8031c0a:	d9eb      	bls.n	8031be4 <_svfprintf_r+0x894>
 8031c0c:	1c59      	adds	r1, r3, #1
 8031c0e:	9124      	str	r1, [sp, #144]	@ 0x90
 8031c10:	701a      	strb	r2, [r3, #0]
 8031c12:	e7f8      	b.n	8031c06 <_svfprintf_r+0x8b6>
 8031c14:	9b08      	ldr	r3, [sp, #32]
 8031c16:	2b46      	cmp	r3, #70	@ 0x46
 8031c18:	eb00 0706 	add.w	r7, r0, r6
 8031c1c:	d1ea      	bne.n	8031bf4 <_svfprintf_r+0x8a4>
 8031c1e:	7803      	ldrb	r3, [r0, #0]
 8031c20:	2b30      	cmp	r3, #48	@ 0x30
 8031c22:	d109      	bne.n	8031c38 <_svfprintf_r+0x8e8>
 8031c24:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8031c28:	2200      	movs	r2, #0
 8031c2a:	2300      	movs	r3, #0
 8031c2c:	f7de ff64 	bl	8010af8 <__aeabi_dcmpeq>
 8031c30:	b910      	cbnz	r0, 8031c38 <_svfprintf_r+0x8e8>
 8031c32:	f1c6 0601 	rsb	r6, r6, #1
 8031c36:	9620      	str	r6, [sp, #128]	@ 0x80
 8031c38:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8031c3a:	441f      	add	r7, r3
 8031c3c:	e7da      	b.n	8031bf4 <_svfprintf_r+0x8a4>
 8031c3e:	9b08      	ldr	r3, [sp, #32]
 8031c40:	2b46      	cmp	r3, #70	@ 0x46
 8031c42:	f47f ae7d 	bne.w	8031940 <_svfprintf_r+0x5f0>
 8031c46:	f005 0301 	and.w	r3, r5, #1
 8031c4a:	2e00      	cmp	r6, #0
 8031c4c:	ea43 0308 	orr.w	r3, r3, r8
 8031c50:	dd25      	ble.n	8031c9e <_svfprintf_r+0x94e>
 8031c52:	b37b      	cbz	r3, 8031cb4 <_svfprintf_r+0x964>
 8031c54:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8031c56:	18f3      	adds	r3, r6, r3
 8031c58:	4498      	add	r8, r3
 8031c5a:	2366      	movs	r3, #102	@ 0x66
 8031c5c:	9306      	str	r3, [sp, #24]
 8031c5e:	e033      	b.n	8031cc8 <_svfprintf_r+0x978>
 8031c60:	f813 7b01 	ldrb.w	r7, [r3], #1
 8031c64:	f806 7f01 	strb.w	r7, [r6, #1]!
 8031c68:	e6a1      	b.n	80319ae <_svfprintf_r+0x65e>
 8031c6a:	b941      	cbnz	r1, 8031c7e <_svfprintf_r+0x92e>
 8031c6c:	2230      	movs	r2, #48	@ 0x30
 8031c6e:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 8031c72:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 8031c76:	3330      	adds	r3, #48	@ 0x30
 8031c78:	f802 3b01 	strb.w	r3, [r2], #1
 8031c7c:	e6a3      	b.n	80319c6 <_svfprintf_r+0x676>
 8031c7e:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8031c82:	e7f8      	b.n	8031c76 <_svfprintf_r+0x926>
 8031c84:	9b04      	ldr	r3, [sp, #16]
 8031c86:	429e      	cmp	r6, r3
 8031c88:	da0d      	bge.n	8031ca6 <_svfprintf_r+0x956>
 8031c8a:	9b04      	ldr	r3, [sp, #16]
 8031c8c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8031c8e:	2e00      	cmp	r6, #0
 8031c90:	eb03 0802 	add.w	r8, r3, r2
 8031c94:	dc0c      	bgt.n	8031cb0 <_svfprintf_r+0x960>
 8031c96:	f1c6 0301 	rsb	r3, r6, #1
 8031c9a:	4498      	add	r8, r3
 8031c9c:	e008      	b.n	8031cb0 <_svfprintf_r+0x960>
 8031c9e:	b17b      	cbz	r3, 8031cc0 <_svfprintf_r+0x970>
 8031ca0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8031ca2:	3301      	adds	r3, #1
 8031ca4:	e7d8      	b.n	8031c58 <_svfprintf_r+0x908>
 8031ca6:	07eb      	lsls	r3, r5, #31
 8031ca8:	d521      	bpl.n	8031cee <_svfprintf_r+0x99e>
 8031caa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8031cac:	eb06 0803 	add.w	r8, r6, r3
 8031cb0:	2367      	movs	r3, #103	@ 0x67
 8031cb2:	e7d3      	b.n	8031c5c <_svfprintf_r+0x90c>
 8031cb4:	46b0      	mov	r8, r6
 8031cb6:	e7d0      	b.n	8031c5a <_svfprintf_r+0x90a>
 8031cb8:	0803c9c2 	.word	0x0803c9c2
 8031cbc:	0803c9b2 	.word	0x0803c9b2
 8031cc0:	2366      	movs	r3, #102	@ 0x66
 8031cc2:	9306      	str	r3, [sp, #24]
 8031cc4:	f04f 0801 	mov.w	r8, #1
 8031cc8:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 8031ccc:	9308      	str	r3, [sp, #32]
 8031cce:	d01f      	beq.n	8031d10 <_svfprintf_r+0x9c0>
 8031cd0:	2700      	movs	r7, #0
 8031cd2:	2e00      	cmp	r6, #0
 8031cd4:	9708      	str	r7, [sp, #32]
 8031cd6:	f77f ae8a 	ble.w	80319ee <_svfprintf_r+0x69e>
 8031cda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031cdc:	781b      	ldrb	r3, [r3, #0]
 8031cde:	2bff      	cmp	r3, #255	@ 0xff
 8031ce0:	d107      	bne.n	8031cf2 <_svfprintf_r+0x9a2>
 8031ce2:	9b08      	ldr	r3, [sp, #32]
 8031ce4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8031ce6:	443b      	add	r3, r7
 8031ce8:	fb02 8803 	mla	r8, r2, r3, r8
 8031cec:	e67f      	b.n	80319ee <_svfprintf_r+0x69e>
 8031cee:	46b0      	mov	r8, r6
 8031cf0:	e7de      	b.n	8031cb0 <_svfprintf_r+0x960>
 8031cf2:	42b3      	cmp	r3, r6
 8031cf4:	daf5      	bge.n	8031ce2 <_svfprintf_r+0x992>
 8031cf6:	1af6      	subs	r6, r6, r3
 8031cf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031cfa:	785b      	ldrb	r3, [r3, #1]
 8031cfc:	b133      	cbz	r3, 8031d0c <_svfprintf_r+0x9bc>
 8031cfe:	9b08      	ldr	r3, [sp, #32]
 8031d00:	3301      	adds	r3, #1
 8031d02:	9308      	str	r3, [sp, #32]
 8031d04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031d06:	3301      	adds	r3, #1
 8031d08:	9309      	str	r3, [sp, #36]	@ 0x24
 8031d0a:	e7e6      	b.n	8031cda <_svfprintf_r+0x98a>
 8031d0c:	3701      	adds	r7, #1
 8031d0e:	e7e4      	b.n	8031cda <_svfprintf_r+0x98a>
 8031d10:	9f08      	ldr	r7, [sp, #32]
 8031d12:	e66c      	b.n	80319ee <_svfprintf_r+0x69e>
 8031d14:	232d      	movs	r3, #45	@ 0x2d
 8031d16:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8031d1a:	e66c      	b.n	80319f6 <_svfprintf_r+0x6a6>
 8031d1c:	06af      	lsls	r7, r5, #26
 8031d1e:	d50a      	bpl.n	8031d36 <_svfprintf_r+0x9e6>
 8031d20:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8031d22:	6833      	ldr	r3, [r6, #0]
 8031d24:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8031d26:	17d2      	asrs	r2, r2, #31
 8031d28:	e9c3 1200 	strd	r1, r2, [r3]
 8031d2c:	3604      	adds	r6, #4
 8031d2e:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 8031d32:	f7ff bb46 	b.w	80313c2 <_svfprintf_r+0x72>
 8031d36:	06e8      	lsls	r0, r5, #27
 8031d38:	d503      	bpl.n	8031d42 <_svfprintf_r+0x9f2>
 8031d3a:	6833      	ldr	r3, [r6, #0]
 8031d3c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8031d3e:	601a      	str	r2, [r3, #0]
 8031d40:	e7f4      	b.n	8031d2c <_svfprintf_r+0x9dc>
 8031d42:	0669      	lsls	r1, r5, #25
 8031d44:	d503      	bpl.n	8031d4e <_svfprintf_r+0x9fe>
 8031d46:	6833      	ldr	r3, [r6, #0]
 8031d48:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8031d4a:	801a      	strh	r2, [r3, #0]
 8031d4c:	e7ee      	b.n	8031d2c <_svfprintf_r+0x9dc>
 8031d4e:	05aa      	lsls	r2, r5, #22
 8031d50:	d5f3      	bpl.n	8031d3a <_svfprintf_r+0x9ea>
 8031d52:	6833      	ldr	r3, [r6, #0]
 8031d54:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8031d56:	701a      	strb	r2, [r3, #0]
 8031d58:	e7e8      	b.n	8031d2c <_svfprintf_r+0x9dc>
 8031d5a:	f045 0510 	orr.w	r5, r5, #16
 8031d5e:	f015 0320 	ands.w	r3, r5, #32
 8031d62:	d020      	beq.n	8031da6 <_svfprintf_r+0xa56>
 8031d64:	3607      	adds	r6, #7
 8031d66:	f026 0307 	bic.w	r3, r6, #7
 8031d6a:	461a      	mov	r2, r3
 8031d6c:	685f      	ldr	r7, [r3, #4]
 8031d6e:	f852 6b08 	ldr.w	r6, [r2], #8
 8031d72:	9207      	str	r2, [sp, #28]
 8031d74:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8031d78:	2300      	movs	r3, #0
 8031d7a:	2200      	movs	r2, #0
 8031d7c:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8031d80:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8031d84:	f000 848c 	beq.w	80326a0 <_svfprintf_r+0x1350>
 8031d88:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 8031d8c:	9208      	str	r2, [sp, #32]
 8031d8e:	ea56 0207 	orrs.w	r2, r6, r7
 8031d92:	f040 848a 	bne.w	80326aa <_svfprintf_r+0x135a>
 8031d96:	f1b8 0f00 	cmp.w	r8, #0
 8031d9a:	f000 80db 	beq.w	8031f54 <_svfprintf_r+0xc04>
 8031d9e:	2b01      	cmp	r3, #1
 8031da0:	f040 8486 	bne.w	80326b0 <_svfprintf_r+0x1360>
 8031da4:	e083      	b.n	8031eae <_svfprintf_r+0xb5e>
 8031da6:	4632      	mov	r2, r6
 8031da8:	f015 0710 	ands.w	r7, r5, #16
 8031dac:	f852 6b04 	ldr.w	r6, [r2], #4
 8031db0:	9207      	str	r2, [sp, #28]
 8031db2:	d001      	beq.n	8031db8 <_svfprintf_r+0xa68>
 8031db4:	461f      	mov	r7, r3
 8031db6:	e7dd      	b.n	8031d74 <_svfprintf_r+0xa24>
 8031db8:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8031dbc:	d001      	beq.n	8031dc2 <_svfprintf_r+0xa72>
 8031dbe:	b2b6      	uxth	r6, r6
 8031dc0:	e7d8      	b.n	8031d74 <_svfprintf_r+0xa24>
 8031dc2:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8031dc6:	d0d5      	beq.n	8031d74 <_svfprintf_r+0xa24>
 8031dc8:	b2f6      	uxtb	r6, r6
 8031dca:	e7f3      	b.n	8031db4 <_svfprintf_r+0xa64>
 8031dcc:	4633      	mov	r3, r6
 8031dce:	2278      	movs	r2, #120	@ 0x78
 8031dd0:	f853 6b04 	ldr.w	r6, [r3], #4
 8031dd4:	9307      	str	r3, [sp, #28]
 8031dd6:	f647 0330 	movw	r3, #30768	@ 0x7830
 8031dda:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 8031dde:	4b94      	ldr	r3, [pc, #592]	@ (8032030 <_svfprintf_r+0xce0>)
 8031de0:	9319      	str	r3, [sp, #100]	@ 0x64
 8031de2:	2700      	movs	r7, #0
 8031de4:	f045 0502 	orr.w	r5, r5, #2
 8031de8:	2302      	movs	r3, #2
 8031dea:	9206      	str	r2, [sp, #24]
 8031dec:	e7c5      	b.n	8031d7a <_svfprintf_r+0xa2a>
 8031dee:	4633      	mov	r3, r6
 8031df0:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8031df4:	f853 9b04 	ldr.w	r9, [r3], #4
 8031df8:	9307      	str	r3, [sp, #28]
 8031dfa:	f04f 0600 	mov.w	r6, #0
 8031dfe:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 8031e02:	d00f      	beq.n	8031e24 <_svfprintf_r+0xad4>
 8031e04:	4642      	mov	r2, r8
 8031e06:	4631      	mov	r1, r6
 8031e08:	4648      	mov	r0, r9
 8031e0a:	f7de f9f9 	bl	8010200 <memchr>
 8031e0e:	4682      	mov	sl, r0
 8031e10:	2800      	cmp	r0, #0
 8031e12:	f43f ac81 	beq.w	8031718 <_svfprintf_r+0x3c8>
 8031e16:	eba0 0809 	sub.w	r8, r0, r9
 8031e1a:	46b2      	mov	sl, r6
 8031e1c:	9610      	str	r6, [sp, #64]	@ 0x40
 8031e1e:	4637      	mov	r7, r6
 8031e20:	9608      	str	r6, [sp, #32]
 8031e22:	e5eb      	b.n	80319fc <_svfprintf_r+0x6ac>
 8031e24:	4648      	mov	r0, r9
 8031e26:	f7de fa3b 	bl	80102a0 <strlen>
 8031e2a:	46b2      	mov	sl, r6
 8031e2c:	4680      	mov	r8, r0
 8031e2e:	e473      	b.n	8031718 <_svfprintf_r+0x3c8>
 8031e30:	f045 0510 	orr.w	r5, r5, #16
 8031e34:	f015 0320 	ands.w	r3, r5, #32
 8031e38:	d009      	beq.n	8031e4e <_svfprintf_r+0xafe>
 8031e3a:	3607      	adds	r6, #7
 8031e3c:	f026 0307 	bic.w	r3, r6, #7
 8031e40:	461a      	mov	r2, r3
 8031e42:	685f      	ldr	r7, [r3, #4]
 8031e44:	f852 6b08 	ldr.w	r6, [r2], #8
 8031e48:	9207      	str	r2, [sp, #28]
 8031e4a:	2301      	movs	r3, #1
 8031e4c:	e795      	b.n	8031d7a <_svfprintf_r+0xa2a>
 8031e4e:	4632      	mov	r2, r6
 8031e50:	f015 0710 	ands.w	r7, r5, #16
 8031e54:	f852 6b04 	ldr.w	r6, [r2], #4
 8031e58:	9207      	str	r2, [sp, #28]
 8031e5a:	d001      	beq.n	8031e60 <_svfprintf_r+0xb10>
 8031e5c:	461f      	mov	r7, r3
 8031e5e:	e7f4      	b.n	8031e4a <_svfprintf_r+0xafa>
 8031e60:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8031e64:	d001      	beq.n	8031e6a <_svfprintf_r+0xb1a>
 8031e66:	b2b6      	uxth	r6, r6
 8031e68:	e7ef      	b.n	8031e4a <_svfprintf_r+0xafa>
 8031e6a:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8031e6e:	d0ec      	beq.n	8031e4a <_svfprintf_r+0xafa>
 8031e70:	b2f6      	uxtb	r6, r6
 8031e72:	e7f3      	b.n	8031e5c <_svfprintf_r+0xb0c>
 8031e74:	4b6f      	ldr	r3, [pc, #444]	@ (8032034 <_svfprintf_r+0xce4>)
 8031e76:	f7ff bb39 	b.w	80314ec <_svfprintf_r+0x19c>
 8031e7a:	4632      	mov	r2, r6
 8031e7c:	f015 0710 	ands.w	r7, r5, #16
 8031e80:	f852 6b04 	ldr.w	r6, [r2], #4
 8031e84:	9207      	str	r2, [sp, #28]
 8031e86:	d002      	beq.n	8031e8e <_svfprintf_r+0xb3e>
 8031e88:	461f      	mov	r7, r3
 8031e8a:	f7ff bb3c 	b.w	8031506 <_svfprintf_r+0x1b6>
 8031e8e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8031e92:	d002      	beq.n	8031e9a <_svfprintf_r+0xb4a>
 8031e94:	b2b6      	uxth	r6, r6
 8031e96:	f7ff bb36 	b.w	8031506 <_svfprintf_r+0x1b6>
 8031e9a:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8031e9e:	f43f ab32 	beq.w	8031506 <_svfprintf_r+0x1b6>
 8031ea2:	b2f6      	uxtb	r6, r6
 8031ea4:	e7f0      	b.n	8031e88 <_svfprintf_r+0xb38>
 8031ea6:	2e0a      	cmp	r6, #10
 8031ea8:	f177 0300 	sbcs.w	r3, r7, #0
 8031eac:	d207      	bcs.n	8031ebe <_svfprintf_r+0xb6e>
 8031eae:	3630      	adds	r6, #48	@ 0x30
 8031eb0:	b2f6      	uxtb	r6, r6
 8031eb2:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 8031eb6:	f20d 1947 	addw	r9, sp, #327	@ 0x147
 8031eba:	f000 bc15 	b.w	80326e8 <_svfprintf_r+0x1398>
 8031ebe:	2300      	movs	r3, #0
 8031ec0:	9304      	str	r3, [sp, #16]
 8031ec2:	9b08      	ldr	r3, [sp, #32]
 8031ec4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8031ec8:	ad52      	add	r5, sp, #328	@ 0x148
 8031eca:	9310      	str	r3, [sp, #64]	@ 0x40
 8031ecc:	220a      	movs	r2, #10
 8031ece:	2300      	movs	r3, #0
 8031ed0:	4630      	mov	r0, r6
 8031ed2:	4639      	mov	r1, r7
 8031ed4:	f7de ff40 	bl	8010d58 <__aeabi_uldivmod>
 8031ed8:	9b04      	ldr	r3, [sp, #16]
 8031eda:	9011      	str	r0, [sp, #68]	@ 0x44
 8031edc:	3301      	adds	r3, #1
 8031ede:	9304      	str	r3, [sp, #16]
 8031ee0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8031ee2:	3230      	adds	r2, #48	@ 0x30
 8031ee4:	468a      	mov	sl, r1
 8031ee6:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8031eea:	f805 2c01 	strb.w	r2, [r5, #-1]
 8031eee:	b1d3      	cbz	r3, 8031f26 <_svfprintf_r+0xbd6>
 8031ef0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031ef2:	9a04      	ldr	r2, [sp, #16]
 8031ef4:	781b      	ldrb	r3, [r3, #0]
 8031ef6:	429a      	cmp	r2, r3
 8031ef8:	d115      	bne.n	8031f26 <_svfprintf_r+0xbd6>
 8031efa:	2aff      	cmp	r2, #255	@ 0xff
 8031efc:	d013      	beq.n	8031f26 <_svfprintf_r+0xbd6>
 8031efe:	2e0a      	cmp	r6, #10
 8031f00:	f177 0300 	sbcs.w	r3, r7, #0
 8031f04:	d30f      	bcc.n	8031f26 <_svfprintf_r+0xbd6>
 8031f06:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8031f08:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8031f0a:	eba9 0903 	sub.w	r9, r9, r3
 8031f0e:	461a      	mov	r2, r3
 8031f10:	4648      	mov	r0, r9
 8031f12:	f7fb f8ec 	bl	802d0ee <strncpy>
 8031f16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031f18:	785b      	ldrb	r3, [r3, #1]
 8031f1a:	b11b      	cbz	r3, 8031f24 <_svfprintf_r+0xbd4>
 8031f1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031f1e:	3301      	adds	r3, #1
 8031f20:	9309      	str	r3, [sp, #36]	@ 0x24
 8031f22:	2300      	movs	r3, #0
 8031f24:	9304      	str	r3, [sp, #16]
 8031f26:	2e0a      	cmp	r6, #10
 8031f28:	f177 0700 	sbcs.w	r7, r7, #0
 8031f2c:	f0c0 83dc 	bcc.w	80326e8 <_svfprintf_r+0x1398>
 8031f30:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8031f32:	4657      	mov	r7, sl
 8031f34:	464d      	mov	r5, r9
 8031f36:	e7c9      	b.n	8031ecc <_svfprintf_r+0xb7c>
 8031f38:	f006 030f 	and.w	r3, r6, #15
 8031f3c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8031f3e:	0936      	lsrs	r6, r6, #4
 8031f40:	5cd3      	ldrb	r3, [r2, r3]
 8031f42:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8031f46:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 8031f4a:	093f      	lsrs	r7, r7, #4
 8031f4c:	ea56 0307 	orrs.w	r3, r6, r7
 8031f50:	d1f2      	bne.n	8031f38 <_svfprintf_r+0xbe8>
 8031f52:	e3c9      	b.n	80326e8 <_svfprintf_r+0x1398>
 8031f54:	b91b      	cbnz	r3, 8031f5e <_svfprintf_r+0xc0e>
 8031f56:	07e9      	lsls	r1, r5, #31
 8031f58:	d501      	bpl.n	8031f5e <_svfprintf_r+0xc0e>
 8031f5a:	2630      	movs	r6, #48	@ 0x30
 8031f5c:	e7a9      	b.n	8031eb2 <_svfprintf_r+0xb62>
 8031f5e:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 8031f62:	e3c1      	b.n	80326e8 <_svfprintf_r+0x1398>
 8031f64:	9b06      	ldr	r3, [sp, #24]
 8031f66:	2b00      	cmp	r3, #0
 8031f68:	f000 838f 	beq.w	803268a <_svfprintf_r+0x133a>
 8031f6c:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 8031f70:	2300      	movs	r3, #0
 8031f72:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8031f76:	9607      	str	r6, [sp, #28]
 8031f78:	f7ff bb63 	b.w	8031642 <_svfprintf_r+0x2f2>
 8031f7c:	2010      	movs	r0, #16
 8031f7e:	4403      	add	r3, r0
 8031f80:	2a07      	cmp	r2, #7
 8031f82:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8031f86:	6060      	str	r0, [r4, #4]
 8031f88:	dd08      	ble.n	8031f9c <_svfprintf_r+0xc4c>
 8031f8a:	9803      	ldr	r0, [sp, #12]
 8031f8c:	aa26      	add	r2, sp, #152	@ 0x98
 8031f8e:	4659      	mov	r1, fp
 8031f90:	f7fd fd66 	bl	802fa60 <__ssprint_r>
 8031f94:	2800      	cmp	r0, #0
 8031f96:	f040 8356 	bne.w	8032646 <_svfprintf_r+0x12f6>
 8031f9a:	a929      	add	r1, sp, #164	@ 0xa4
 8031f9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8031f9e:	3b10      	subs	r3, #16
 8031fa0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8031fa2:	460c      	mov	r4, r1
 8031fa4:	e546      	b.n	8031a34 <_svfprintf_r+0x6e4>
 8031fa6:	460c      	mov	r4, r1
 8031fa8:	e561      	b.n	8031a6e <_svfprintf_r+0x71e>
 8031faa:	9803      	ldr	r0, [sp, #12]
 8031fac:	aa26      	add	r2, sp, #152	@ 0x98
 8031fae:	4659      	mov	r1, fp
 8031fb0:	f7fd fd56 	bl	802fa60 <__ssprint_r>
 8031fb4:	2800      	cmp	r0, #0
 8031fb6:	f040 8346 	bne.w	8032646 <_svfprintf_r+0x12f6>
 8031fba:	ac29      	add	r4, sp, #164	@ 0xa4
 8031fbc:	e569      	b.n	8031a92 <_svfprintf_r+0x742>
 8031fbe:	9803      	ldr	r0, [sp, #12]
 8031fc0:	aa26      	add	r2, sp, #152	@ 0x98
 8031fc2:	4659      	mov	r1, fp
 8031fc4:	f7fd fd4c 	bl	802fa60 <__ssprint_r>
 8031fc8:	2800      	cmp	r0, #0
 8031fca:	f040 833c 	bne.w	8032646 <_svfprintf_r+0x12f6>
 8031fce:	ac29      	add	r4, sp, #164	@ 0xa4
 8031fd0:	e56f      	b.n	8031ab2 <_svfprintf_r+0x762>
 8031fd2:	2010      	movs	r0, #16
 8031fd4:	4403      	add	r3, r0
 8031fd6:	2a07      	cmp	r2, #7
 8031fd8:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8031fdc:	6060      	str	r0, [r4, #4]
 8031fde:	dd08      	ble.n	8031ff2 <_svfprintf_r+0xca2>
 8031fe0:	9803      	ldr	r0, [sp, #12]
 8031fe2:	aa26      	add	r2, sp, #152	@ 0x98
 8031fe4:	4659      	mov	r1, fp
 8031fe6:	f7fd fd3b 	bl	802fa60 <__ssprint_r>
 8031fea:	2800      	cmp	r0, #0
 8031fec:	f040 832b 	bne.w	8032646 <_svfprintf_r+0x12f6>
 8031ff0:	a929      	add	r1, sp, #164	@ 0xa4
 8031ff2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8031ff4:	3b10      	subs	r3, #16
 8031ff6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8031ff8:	460c      	mov	r4, r1
 8031ffa:	e563      	b.n	8031ac4 <_svfprintf_r+0x774>
 8031ffc:	460c      	mov	r4, r1
 8031ffe:	e57e      	b.n	8031afe <_svfprintf_r+0x7ae>
 8032000:	2010      	movs	r0, #16
 8032002:	4403      	add	r3, r0
 8032004:	2a07      	cmp	r2, #7
 8032006:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 803200a:	6060      	str	r0, [r4, #4]
 803200c:	dd08      	ble.n	8032020 <_svfprintf_r+0xcd0>
 803200e:	9803      	ldr	r0, [sp, #12]
 8032010:	aa26      	add	r2, sp, #152	@ 0x98
 8032012:	4659      	mov	r1, fp
 8032014:	f7fd fd24 	bl	802fa60 <__ssprint_r>
 8032018:	2800      	cmp	r0, #0
 803201a:	f040 8314 	bne.w	8032646 <_svfprintf_r+0x12f6>
 803201e:	a929      	add	r1, sp, #164	@ 0xa4
 8032020:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8032022:	3b10      	subs	r3, #16
 8032024:	9310      	str	r3, [sp, #64]	@ 0x40
 8032026:	460c      	mov	r4, r1
 8032028:	e56f      	b.n	8031b0a <_svfprintf_r+0x7ba>
 803202a:	460c      	mov	r4, r1
 803202c:	e58a      	b.n	8031b44 <_svfprintf_r+0x7f4>
 803202e:	bf00      	nop
 8032030:	0803c44b 	.word	0x0803c44b
 8032034:	0803c45c 	.word	0x0803c45c
 8032038:	9b06      	ldr	r3, [sp, #24]
 803203a:	2b65      	cmp	r3, #101	@ 0x65
 803203c:	f340 8246 	ble.w	80324cc <_svfprintf_r+0x117c>
 8032040:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8032044:	2200      	movs	r2, #0
 8032046:	2300      	movs	r3, #0
 8032048:	f7de fd56 	bl	8010af8 <__aeabi_dcmpeq>
 803204c:	2800      	cmp	r0, #0
 803204e:	d06a      	beq.n	8032126 <_svfprintf_r+0xdd6>
 8032050:	4b73      	ldr	r3, [pc, #460]	@ (8032220 <_svfprintf_r+0xed0>)
 8032052:	6023      	str	r3, [r4, #0]
 8032054:	2301      	movs	r3, #1
 8032056:	6063      	str	r3, [r4, #4]
 8032058:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803205a:	3301      	adds	r3, #1
 803205c:	9328      	str	r3, [sp, #160]	@ 0xa0
 803205e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8032060:	3301      	adds	r3, #1
 8032062:	2b07      	cmp	r3, #7
 8032064:	9327      	str	r3, [sp, #156]	@ 0x9c
 8032066:	dc37      	bgt.n	80320d8 <_svfprintf_r+0xd88>
 8032068:	3408      	adds	r4, #8
 803206a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 803206c:	9a04      	ldr	r2, [sp, #16]
 803206e:	4293      	cmp	r3, r2
 8032070:	db02      	blt.n	8032078 <_svfprintf_r+0xd28>
 8032072:	07ef      	lsls	r7, r5, #31
 8032074:	f57f ad76 	bpl.w	8031b64 <_svfprintf_r+0x814>
 8032078:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 803207a:	6023      	str	r3, [r4, #0]
 803207c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803207e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8032080:	6063      	str	r3, [r4, #4]
 8032082:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8032084:	4413      	add	r3, r2
 8032086:	9328      	str	r3, [sp, #160]	@ 0xa0
 8032088:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803208a:	3301      	adds	r3, #1
 803208c:	2b07      	cmp	r3, #7
 803208e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8032090:	dc2c      	bgt.n	80320ec <_svfprintf_r+0xd9c>
 8032092:	3408      	adds	r4, #8
 8032094:	9b04      	ldr	r3, [sp, #16]
 8032096:	1e5e      	subs	r6, r3, #1
 8032098:	2e00      	cmp	r6, #0
 803209a:	f77f ad63 	ble.w	8031b64 <_svfprintf_r+0x814>
 803209e:	4f61      	ldr	r7, [pc, #388]	@ (8032224 <_svfprintf_r+0xed4>)
 80320a0:	f04f 0810 	mov.w	r8, #16
 80320a4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80320a8:	2e10      	cmp	r6, #16
 80320aa:	f103 0301 	add.w	r3, r3, #1
 80320ae:	f104 0108 	add.w	r1, r4, #8
 80320b2:	6027      	str	r7, [r4, #0]
 80320b4:	dc24      	bgt.n	8032100 <_svfprintf_r+0xdb0>
 80320b6:	6066      	str	r6, [r4, #4]
 80320b8:	2b07      	cmp	r3, #7
 80320ba:	4416      	add	r6, r2
 80320bc:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 80320c0:	f340 82a0 	ble.w	8032604 <_svfprintf_r+0x12b4>
 80320c4:	9803      	ldr	r0, [sp, #12]
 80320c6:	aa26      	add	r2, sp, #152	@ 0x98
 80320c8:	4659      	mov	r1, fp
 80320ca:	f7fd fcc9 	bl	802fa60 <__ssprint_r>
 80320ce:	2800      	cmp	r0, #0
 80320d0:	f040 82b9 	bne.w	8032646 <_svfprintf_r+0x12f6>
 80320d4:	ac29      	add	r4, sp, #164	@ 0xa4
 80320d6:	e545      	b.n	8031b64 <_svfprintf_r+0x814>
 80320d8:	9803      	ldr	r0, [sp, #12]
 80320da:	aa26      	add	r2, sp, #152	@ 0x98
 80320dc:	4659      	mov	r1, fp
 80320de:	f7fd fcbf 	bl	802fa60 <__ssprint_r>
 80320e2:	2800      	cmp	r0, #0
 80320e4:	f040 82af 	bne.w	8032646 <_svfprintf_r+0x12f6>
 80320e8:	ac29      	add	r4, sp, #164	@ 0xa4
 80320ea:	e7be      	b.n	803206a <_svfprintf_r+0xd1a>
 80320ec:	9803      	ldr	r0, [sp, #12]
 80320ee:	aa26      	add	r2, sp, #152	@ 0x98
 80320f0:	4659      	mov	r1, fp
 80320f2:	f7fd fcb5 	bl	802fa60 <__ssprint_r>
 80320f6:	2800      	cmp	r0, #0
 80320f8:	f040 82a5 	bne.w	8032646 <_svfprintf_r+0x12f6>
 80320fc:	ac29      	add	r4, sp, #164	@ 0xa4
 80320fe:	e7c9      	b.n	8032094 <_svfprintf_r+0xd44>
 8032100:	3210      	adds	r2, #16
 8032102:	2b07      	cmp	r3, #7
 8032104:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8032108:	f8c4 8004 	str.w	r8, [r4, #4]
 803210c:	dd08      	ble.n	8032120 <_svfprintf_r+0xdd0>
 803210e:	9803      	ldr	r0, [sp, #12]
 8032110:	aa26      	add	r2, sp, #152	@ 0x98
 8032112:	4659      	mov	r1, fp
 8032114:	f7fd fca4 	bl	802fa60 <__ssprint_r>
 8032118:	2800      	cmp	r0, #0
 803211a:	f040 8294 	bne.w	8032646 <_svfprintf_r+0x12f6>
 803211e:	a929      	add	r1, sp, #164	@ 0xa4
 8032120:	3e10      	subs	r6, #16
 8032122:	460c      	mov	r4, r1
 8032124:	e7be      	b.n	80320a4 <_svfprintf_r+0xd54>
 8032126:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8032128:	2b00      	cmp	r3, #0
 803212a:	dc7d      	bgt.n	8032228 <_svfprintf_r+0xed8>
 803212c:	4b3c      	ldr	r3, [pc, #240]	@ (8032220 <_svfprintf_r+0xed0>)
 803212e:	6023      	str	r3, [r4, #0]
 8032130:	2301      	movs	r3, #1
 8032132:	6063      	str	r3, [r4, #4]
 8032134:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8032136:	3301      	adds	r3, #1
 8032138:	9328      	str	r3, [sp, #160]	@ 0xa0
 803213a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803213c:	3301      	adds	r3, #1
 803213e:	2b07      	cmp	r3, #7
 8032140:	9327      	str	r3, [sp, #156]	@ 0x9c
 8032142:	dc46      	bgt.n	80321d2 <_svfprintf_r+0xe82>
 8032144:	3408      	adds	r4, #8
 8032146:	9904      	ldr	r1, [sp, #16]
 8032148:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 803214a:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 803214c:	430b      	orrs	r3, r1
 803214e:	f005 0101 	and.w	r1, r5, #1
 8032152:	430b      	orrs	r3, r1
 8032154:	f43f ad06 	beq.w	8031b64 <_svfprintf_r+0x814>
 8032158:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 803215a:	6023      	str	r3, [r4, #0]
 803215c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803215e:	6063      	str	r3, [r4, #4]
 8032160:	441a      	add	r2, r3
 8032162:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8032164:	9228      	str	r2, [sp, #160]	@ 0xa0
 8032166:	3301      	adds	r3, #1
 8032168:	2b07      	cmp	r3, #7
 803216a:	9327      	str	r3, [sp, #156]	@ 0x9c
 803216c:	dc3b      	bgt.n	80321e6 <_svfprintf_r+0xe96>
 803216e:	f104 0308 	add.w	r3, r4, #8
 8032172:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8032174:	2e00      	cmp	r6, #0
 8032176:	da1b      	bge.n	80321b0 <_svfprintf_r+0xe60>
 8032178:	4f2a      	ldr	r7, [pc, #168]	@ (8032224 <_svfprintf_r+0xed4>)
 803217a:	4276      	negs	r6, r6
 803217c:	461a      	mov	r2, r3
 803217e:	2410      	movs	r4, #16
 8032180:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 8032184:	2e10      	cmp	r6, #16
 8032186:	f101 0101 	add.w	r1, r1, #1
 803218a:	f103 0308 	add.w	r3, r3, #8
 803218e:	6017      	str	r7, [r2, #0]
 8032190:	dc33      	bgt.n	80321fa <_svfprintf_r+0xeaa>
 8032192:	6056      	str	r6, [r2, #4]
 8032194:	2907      	cmp	r1, #7
 8032196:	4406      	add	r6, r0
 8032198:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 803219c:	dd08      	ble.n	80321b0 <_svfprintf_r+0xe60>
 803219e:	9803      	ldr	r0, [sp, #12]
 80321a0:	aa26      	add	r2, sp, #152	@ 0x98
 80321a2:	4659      	mov	r1, fp
 80321a4:	f7fd fc5c 	bl	802fa60 <__ssprint_r>
 80321a8:	2800      	cmp	r0, #0
 80321aa:	f040 824c 	bne.w	8032646 <_svfprintf_r+0x12f6>
 80321ae:	ab29      	add	r3, sp, #164	@ 0xa4
 80321b0:	9a04      	ldr	r2, [sp, #16]
 80321b2:	9904      	ldr	r1, [sp, #16]
 80321b4:	605a      	str	r2, [r3, #4]
 80321b6:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 80321b8:	f8c3 9000 	str.w	r9, [r3]
 80321bc:	440a      	add	r2, r1
 80321be:	9228      	str	r2, [sp, #160]	@ 0xa0
 80321c0:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80321c2:	3201      	adds	r2, #1
 80321c4:	2a07      	cmp	r2, #7
 80321c6:	9227      	str	r2, [sp, #156]	@ 0x9c
 80321c8:	f73f af7c 	bgt.w	80320c4 <_svfprintf_r+0xd74>
 80321cc:	f103 0408 	add.w	r4, r3, #8
 80321d0:	e4c8      	b.n	8031b64 <_svfprintf_r+0x814>
 80321d2:	9803      	ldr	r0, [sp, #12]
 80321d4:	aa26      	add	r2, sp, #152	@ 0x98
 80321d6:	4659      	mov	r1, fp
 80321d8:	f7fd fc42 	bl	802fa60 <__ssprint_r>
 80321dc:	2800      	cmp	r0, #0
 80321de:	f040 8232 	bne.w	8032646 <_svfprintf_r+0x12f6>
 80321e2:	ac29      	add	r4, sp, #164	@ 0xa4
 80321e4:	e7af      	b.n	8032146 <_svfprintf_r+0xdf6>
 80321e6:	9803      	ldr	r0, [sp, #12]
 80321e8:	aa26      	add	r2, sp, #152	@ 0x98
 80321ea:	4659      	mov	r1, fp
 80321ec:	f7fd fc38 	bl	802fa60 <__ssprint_r>
 80321f0:	2800      	cmp	r0, #0
 80321f2:	f040 8228 	bne.w	8032646 <_svfprintf_r+0x12f6>
 80321f6:	ab29      	add	r3, sp, #164	@ 0xa4
 80321f8:	e7bb      	b.n	8032172 <_svfprintf_r+0xe22>
 80321fa:	3010      	adds	r0, #16
 80321fc:	2907      	cmp	r1, #7
 80321fe:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 8032202:	6054      	str	r4, [r2, #4]
 8032204:	dd08      	ble.n	8032218 <_svfprintf_r+0xec8>
 8032206:	9803      	ldr	r0, [sp, #12]
 8032208:	aa26      	add	r2, sp, #152	@ 0x98
 803220a:	4659      	mov	r1, fp
 803220c:	f7fd fc28 	bl	802fa60 <__ssprint_r>
 8032210:	2800      	cmp	r0, #0
 8032212:	f040 8218 	bne.w	8032646 <_svfprintf_r+0x12f6>
 8032216:	ab29      	add	r3, sp, #164	@ 0xa4
 8032218:	3e10      	subs	r6, #16
 803221a:	461a      	mov	r2, r3
 803221c:	e7b0      	b.n	8032180 <_svfprintf_r+0xe30>
 803221e:	bf00      	nop
 8032220:	0803c46d 	.word	0x0803c46d
 8032224:	0803c9b2 	.word	0x0803c9b2
 8032228:	9b04      	ldr	r3, [sp, #16]
 803222a:	444b      	add	r3, r9
 803222c:	9306      	str	r3, [sp, #24]
 803222e:	9b04      	ldr	r3, [sp, #16]
 8032230:	42b3      	cmp	r3, r6
 8032232:	bfa8      	it	ge
 8032234:	4633      	movge	r3, r6
 8032236:	2b00      	cmp	r3, #0
 8032238:	4698      	mov	r8, r3
 803223a:	dd0b      	ble.n	8032254 <_svfprintf_r+0xf04>
 803223c:	e9c4 9300 	strd	r9, r3, [r4]
 8032240:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8032242:	4443      	add	r3, r8
 8032244:	9328      	str	r3, [sp, #160]	@ 0xa0
 8032246:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8032248:	3301      	adds	r3, #1
 803224a:	2b07      	cmp	r3, #7
 803224c:	9327      	str	r3, [sp, #156]	@ 0x9c
 803224e:	f300 8089 	bgt.w	8032364 <_svfprintf_r+0x1014>
 8032252:	3408      	adds	r4, #8
 8032254:	4643      	mov	r3, r8
 8032256:	2b00      	cmp	r3, #0
 8032258:	bfac      	ite	ge
 803225a:	eba6 0808 	subge.w	r8, r6, r8
 803225e:	46b0      	movlt	r8, r6
 8032260:	f1b8 0f00 	cmp.w	r8, #0
 8032264:	dd1b      	ble.n	803229e <_svfprintf_r+0xf4e>
 8032266:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 803226a:	4897      	ldr	r0, [pc, #604]	@ (80324c8 <_svfprintf_r+0x1178>)
 803226c:	6020      	str	r0, [r4, #0]
 803226e:	f1b8 0f10 	cmp.w	r8, #16
 8032272:	f102 0201 	add.w	r2, r2, #1
 8032276:	f104 0108 	add.w	r1, r4, #8
 803227a:	dc7d      	bgt.n	8032378 <_svfprintf_r+0x1028>
 803227c:	4443      	add	r3, r8
 803227e:	2a07      	cmp	r2, #7
 8032280:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8032284:	f8c4 8004 	str.w	r8, [r4, #4]
 8032288:	f340 808a 	ble.w	80323a0 <_svfprintf_r+0x1050>
 803228c:	9803      	ldr	r0, [sp, #12]
 803228e:	aa26      	add	r2, sp, #152	@ 0x98
 8032290:	4659      	mov	r1, fp
 8032292:	f7fd fbe5 	bl	802fa60 <__ssprint_r>
 8032296:	2800      	cmp	r0, #0
 8032298:	f040 81d5 	bne.w	8032646 <_svfprintf_r+0x12f6>
 803229c:	ac29      	add	r4, sp, #164	@ 0xa4
 803229e:	eb09 0806 	add.w	r8, r9, r6
 80322a2:	056e      	lsls	r6, r5, #21
 80322a4:	d508      	bpl.n	80322b8 <_svfprintf_r+0xf68>
 80322a6:	9b08      	ldr	r3, [sp, #32]
 80322a8:	2b00      	cmp	r3, #0
 80322aa:	d17b      	bne.n	80323a4 <_svfprintf_r+0x1054>
 80322ac:	2f00      	cmp	r7, #0
 80322ae:	d17b      	bne.n	80323a8 <_svfprintf_r+0x1058>
 80322b0:	9b06      	ldr	r3, [sp, #24]
 80322b2:	4598      	cmp	r8, r3
 80322b4:	bf28      	it	cs
 80322b6:	4698      	movcs	r8, r3
 80322b8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80322ba:	9a04      	ldr	r2, [sp, #16]
 80322bc:	4293      	cmp	r3, r2
 80322be:	db01      	blt.n	80322c4 <_svfprintf_r+0xf74>
 80322c0:	07e8      	lsls	r0, r5, #31
 80322c2:	d50e      	bpl.n	80322e2 <_svfprintf_r+0xf92>
 80322c4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80322c6:	6023      	str	r3, [r4, #0]
 80322c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80322ca:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80322cc:	6063      	str	r3, [r4, #4]
 80322ce:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80322d0:	4413      	add	r3, r2
 80322d2:	9328      	str	r3, [sp, #160]	@ 0xa0
 80322d4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80322d6:	3301      	adds	r3, #1
 80322d8:	2b07      	cmp	r3, #7
 80322da:	9327      	str	r3, [sp, #156]	@ 0x9c
 80322dc:	f300 80df 	bgt.w	803249e <_svfprintf_r+0x114e>
 80322e0:	3408      	adds	r4, #8
 80322e2:	9b04      	ldr	r3, [sp, #16]
 80322e4:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 80322e6:	1bdf      	subs	r7, r3, r7
 80322e8:	9b06      	ldr	r3, [sp, #24]
 80322ea:	eba3 0308 	sub.w	r3, r3, r8
 80322ee:	429f      	cmp	r7, r3
 80322f0:	bfa8      	it	ge
 80322f2:	461f      	movge	r7, r3
 80322f4:	2f00      	cmp	r7, #0
 80322f6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80322f8:	dd0a      	ble.n	8032310 <_svfprintf_r+0xfc0>
 80322fa:	443b      	add	r3, r7
 80322fc:	9328      	str	r3, [sp, #160]	@ 0xa0
 80322fe:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8032300:	3301      	adds	r3, #1
 8032302:	2b07      	cmp	r3, #7
 8032304:	e9c4 8700 	strd	r8, r7, [r4]
 8032308:	9327      	str	r3, [sp, #156]	@ 0x9c
 803230a:	f300 80d2 	bgt.w	80324b2 <_svfprintf_r+0x1162>
 803230e:	3408      	adds	r4, #8
 8032310:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8032312:	9b04      	ldr	r3, [sp, #16]
 8032314:	2f00      	cmp	r7, #0
 8032316:	eba3 0606 	sub.w	r6, r3, r6
 803231a:	bfa8      	it	ge
 803231c:	1bf6      	subge	r6, r6, r7
 803231e:	2e00      	cmp	r6, #0
 8032320:	f77f ac20 	ble.w	8031b64 <_svfprintf_r+0x814>
 8032324:	4f68      	ldr	r7, [pc, #416]	@ (80324c8 <_svfprintf_r+0x1178>)
 8032326:	f04f 0810 	mov.w	r8, #16
 803232a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 803232e:	2e10      	cmp	r6, #16
 8032330:	f103 0301 	add.w	r3, r3, #1
 8032334:	f104 0108 	add.w	r1, r4, #8
 8032338:	6027      	str	r7, [r4, #0]
 803233a:	f77f aebc 	ble.w	80320b6 <_svfprintf_r+0xd66>
 803233e:	3210      	adds	r2, #16
 8032340:	2b07      	cmp	r3, #7
 8032342:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8032346:	f8c4 8004 	str.w	r8, [r4, #4]
 803234a:	dd08      	ble.n	803235e <_svfprintf_r+0x100e>
 803234c:	9803      	ldr	r0, [sp, #12]
 803234e:	aa26      	add	r2, sp, #152	@ 0x98
 8032350:	4659      	mov	r1, fp
 8032352:	f7fd fb85 	bl	802fa60 <__ssprint_r>
 8032356:	2800      	cmp	r0, #0
 8032358:	f040 8175 	bne.w	8032646 <_svfprintf_r+0x12f6>
 803235c:	a929      	add	r1, sp, #164	@ 0xa4
 803235e:	3e10      	subs	r6, #16
 8032360:	460c      	mov	r4, r1
 8032362:	e7e2      	b.n	803232a <_svfprintf_r+0xfda>
 8032364:	9803      	ldr	r0, [sp, #12]
 8032366:	aa26      	add	r2, sp, #152	@ 0x98
 8032368:	4659      	mov	r1, fp
 803236a:	f7fd fb79 	bl	802fa60 <__ssprint_r>
 803236e:	2800      	cmp	r0, #0
 8032370:	f040 8169 	bne.w	8032646 <_svfprintf_r+0x12f6>
 8032374:	ac29      	add	r4, sp, #164	@ 0xa4
 8032376:	e76d      	b.n	8032254 <_svfprintf_r+0xf04>
 8032378:	2010      	movs	r0, #16
 803237a:	4403      	add	r3, r0
 803237c:	2a07      	cmp	r2, #7
 803237e:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8032382:	6060      	str	r0, [r4, #4]
 8032384:	dd08      	ble.n	8032398 <_svfprintf_r+0x1048>
 8032386:	9803      	ldr	r0, [sp, #12]
 8032388:	aa26      	add	r2, sp, #152	@ 0x98
 803238a:	4659      	mov	r1, fp
 803238c:	f7fd fb68 	bl	802fa60 <__ssprint_r>
 8032390:	2800      	cmp	r0, #0
 8032392:	f040 8158 	bne.w	8032646 <_svfprintf_r+0x12f6>
 8032396:	a929      	add	r1, sp, #164	@ 0xa4
 8032398:	f1a8 0810 	sub.w	r8, r8, #16
 803239c:	460c      	mov	r4, r1
 803239e:	e762      	b.n	8032266 <_svfprintf_r+0xf16>
 80323a0:	460c      	mov	r4, r1
 80323a2:	e77c      	b.n	803229e <_svfprintf_r+0xf4e>
 80323a4:	2f00      	cmp	r7, #0
 80323a6:	d04a      	beq.n	803243e <_svfprintf_r+0x10ee>
 80323a8:	3f01      	subs	r7, #1
 80323aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80323ac:	6023      	str	r3, [r4, #0]
 80323ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80323b0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80323b2:	6063      	str	r3, [r4, #4]
 80323b4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80323b6:	4413      	add	r3, r2
 80323b8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80323ba:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80323bc:	3301      	adds	r3, #1
 80323be:	2b07      	cmp	r3, #7
 80323c0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80323c2:	dc43      	bgt.n	803244c <_svfprintf_r+0x10fc>
 80323c4:	3408      	adds	r4, #8
 80323c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80323c8:	781a      	ldrb	r2, [r3, #0]
 80323ca:	9b06      	ldr	r3, [sp, #24]
 80323cc:	eba3 0308 	sub.w	r3, r3, r8
 80323d0:	429a      	cmp	r2, r3
 80323d2:	bfa8      	it	ge
 80323d4:	461a      	movge	r2, r3
 80323d6:	2a00      	cmp	r2, #0
 80323d8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80323da:	4691      	mov	r9, r2
 80323dc:	dd09      	ble.n	80323f2 <_svfprintf_r+0x10a2>
 80323de:	4413      	add	r3, r2
 80323e0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80323e2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80323e4:	3301      	adds	r3, #1
 80323e6:	2b07      	cmp	r3, #7
 80323e8:	e9c4 8200 	strd	r8, r2, [r4]
 80323ec:	9327      	str	r3, [sp, #156]	@ 0x9c
 80323ee:	dc37      	bgt.n	8032460 <_svfprintf_r+0x1110>
 80323f0:	3408      	adds	r4, #8
 80323f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80323f4:	781e      	ldrb	r6, [r3, #0]
 80323f6:	f1b9 0f00 	cmp.w	r9, #0
 80323fa:	bfa8      	it	ge
 80323fc:	eba6 0609 	subge.w	r6, r6, r9
 8032400:	2e00      	cmp	r6, #0
 8032402:	dd18      	ble.n	8032436 <_svfprintf_r+0x10e6>
 8032404:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8032408:	482f      	ldr	r0, [pc, #188]	@ (80324c8 <_svfprintf_r+0x1178>)
 803240a:	6020      	str	r0, [r4, #0]
 803240c:	2e10      	cmp	r6, #16
 803240e:	f103 0301 	add.w	r3, r3, #1
 8032412:	f104 0108 	add.w	r1, r4, #8
 8032416:	dc2d      	bgt.n	8032474 <_svfprintf_r+0x1124>
 8032418:	6066      	str	r6, [r4, #4]
 803241a:	2b07      	cmp	r3, #7
 803241c:	4416      	add	r6, r2
 803241e:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8032422:	dd3a      	ble.n	803249a <_svfprintf_r+0x114a>
 8032424:	9803      	ldr	r0, [sp, #12]
 8032426:	aa26      	add	r2, sp, #152	@ 0x98
 8032428:	4659      	mov	r1, fp
 803242a:	f7fd fb19 	bl	802fa60 <__ssprint_r>
 803242e:	2800      	cmp	r0, #0
 8032430:	f040 8109 	bne.w	8032646 <_svfprintf_r+0x12f6>
 8032434:	ac29      	add	r4, sp, #164	@ 0xa4
 8032436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8032438:	781b      	ldrb	r3, [r3, #0]
 803243a:	4498      	add	r8, r3
 803243c:	e733      	b.n	80322a6 <_svfprintf_r+0xf56>
 803243e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8032440:	3b01      	subs	r3, #1
 8032442:	9309      	str	r3, [sp, #36]	@ 0x24
 8032444:	9b08      	ldr	r3, [sp, #32]
 8032446:	3b01      	subs	r3, #1
 8032448:	9308      	str	r3, [sp, #32]
 803244a:	e7ae      	b.n	80323aa <_svfprintf_r+0x105a>
 803244c:	9803      	ldr	r0, [sp, #12]
 803244e:	aa26      	add	r2, sp, #152	@ 0x98
 8032450:	4659      	mov	r1, fp
 8032452:	f7fd fb05 	bl	802fa60 <__ssprint_r>
 8032456:	2800      	cmp	r0, #0
 8032458:	f040 80f5 	bne.w	8032646 <_svfprintf_r+0x12f6>
 803245c:	ac29      	add	r4, sp, #164	@ 0xa4
 803245e:	e7b2      	b.n	80323c6 <_svfprintf_r+0x1076>
 8032460:	9803      	ldr	r0, [sp, #12]
 8032462:	aa26      	add	r2, sp, #152	@ 0x98
 8032464:	4659      	mov	r1, fp
 8032466:	f7fd fafb 	bl	802fa60 <__ssprint_r>
 803246a:	2800      	cmp	r0, #0
 803246c:	f040 80eb 	bne.w	8032646 <_svfprintf_r+0x12f6>
 8032470:	ac29      	add	r4, sp, #164	@ 0xa4
 8032472:	e7be      	b.n	80323f2 <_svfprintf_r+0x10a2>
 8032474:	2010      	movs	r0, #16
 8032476:	4402      	add	r2, r0
 8032478:	2b07      	cmp	r3, #7
 803247a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 803247e:	6060      	str	r0, [r4, #4]
 8032480:	dd08      	ble.n	8032494 <_svfprintf_r+0x1144>
 8032482:	9803      	ldr	r0, [sp, #12]
 8032484:	aa26      	add	r2, sp, #152	@ 0x98
 8032486:	4659      	mov	r1, fp
 8032488:	f7fd faea 	bl	802fa60 <__ssprint_r>
 803248c:	2800      	cmp	r0, #0
 803248e:	f040 80da 	bne.w	8032646 <_svfprintf_r+0x12f6>
 8032492:	a929      	add	r1, sp, #164	@ 0xa4
 8032494:	3e10      	subs	r6, #16
 8032496:	460c      	mov	r4, r1
 8032498:	e7b4      	b.n	8032404 <_svfprintf_r+0x10b4>
 803249a:	460c      	mov	r4, r1
 803249c:	e7cb      	b.n	8032436 <_svfprintf_r+0x10e6>
 803249e:	9803      	ldr	r0, [sp, #12]
 80324a0:	aa26      	add	r2, sp, #152	@ 0x98
 80324a2:	4659      	mov	r1, fp
 80324a4:	f7fd fadc 	bl	802fa60 <__ssprint_r>
 80324a8:	2800      	cmp	r0, #0
 80324aa:	f040 80cc 	bne.w	8032646 <_svfprintf_r+0x12f6>
 80324ae:	ac29      	add	r4, sp, #164	@ 0xa4
 80324b0:	e717      	b.n	80322e2 <_svfprintf_r+0xf92>
 80324b2:	9803      	ldr	r0, [sp, #12]
 80324b4:	aa26      	add	r2, sp, #152	@ 0x98
 80324b6:	4659      	mov	r1, fp
 80324b8:	f7fd fad2 	bl	802fa60 <__ssprint_r>
 80324bc:	2800      	cmp	r0, #0
 80324be:	f040 80c2 	bne.w	8032646 <_svfprintf_r+0x12f6>
 80324c2:	ac29      	add	r4, sp, #164	@ 0xa4
 80324c4:	e724      	b.n	8032310 <_svfprintf_r+0xfc0>
 80324c6:	bf00      	nop
 80324c8:	0803c9b2 	.word	0x0803c9b2
 80324cc:	9904      	ldr	r1, [sp, #16]
 80324ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80324d0:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80324d2:	2901      	cmp	r1, #1
 80324d4:	f103 0301 	add.w	r3, r3, #1
 80324d8:	f102 0201 	add.w	r2, r2, #1
 80324dc:	f104 0608 	add.w	r6, r4, #8
 80324e0:	dc02      	bgt.n	80324e8 <_svfprintf_r+0x1198>
 80324e2:	07e9      	lsls	r1, r5, #31
 80324e4:	f140 8083 	bpl.w	80325ee <_svfprintf_r+0x129e>
 80324e8:	2101      	movs	r1, #1
 80324ea:	2a07      	cmp	r2, #7
 80324ec:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80324f0:	f8c4 9000 	str.w	r9, [r4]
 80324f4:	6061      	str	r1, [r4, #4]
 80324f6:	dd08      	ble.n	803250a <_svfprintf_r+0x11ba>
 80324f8:	9803      	ldr	r0, [sp, #12]
 80324fa:	aa26      	add	r2, sp, #152	@ 0x98
 80324fc:	4659      	mov	r1, fp
 80324fe:	f7fd faaf 	bl	802fa60 <__ssprint_r>
 8032502:	2800      	cmp	r0, #0
 8032504:	f040 809f 	bne.w	8032646 <_svfprintf_r+0x12f6>
 8032508:	ae29      	add	r6, sp, #164	@ 0xa4
 803250a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 803250c:	6033      	str	r3, [r6, #0]
 803250e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8032510:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8032512:	6073      	str	r3, [r6, #4]
 8032514:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8032516:	4413      	add	r3, r2
 8032518:	9328      	str	r3, [sp, #160]	@ 0xa0
 803251a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803251c:	3301      	adds	r3, #1
 803251e:	2b07      	cmp	r3, #7
 8032520:	9327      	str	r3, [sp, #156]	@ 0x9c
 8032522:	dc33      	bgt.n	803258c <_svfprintf_r+0x123c>
 8032524:	3608      	adds	r6, #8
 8032526:	9b04      	ldr	r3, [sp, #16]
 8032528:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 803252c:	1e5c      	subs	r4, r3, #1
 803252e:	2200      	movs	r2, #0
 8032530:	2300      	movs	r3, #0
 8032532:	e9dd 8727 	ldrd	r8, r7, [sp, #156]	@ 0x9c
 8032536:	f7de fadf 	bl	8010af8 <__aeabi_dcmpeq>
 803253a:	2800      	cmp	r0, #0
 803253c:	d12f      	bne.n	803259e <_svfprintf_r+0x124e>
 803253e:	f109 0201 	add.w	r2, r9, #1
 8032542:	e9c6 2400 	strd	r2, r4, [r6]
 8032546:	9a04      	ldr	r2, [sp, #16]
 8032548:	f108 0301 	add.w	r3, r8, #1
 803254c:	3f01      	subs	r7, #1
 803254e:	4417      	add	r7, r2
 8032550:	2b07      	cmp	r3, #7
 8032552:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 8032556:	dd53      	ble.n	8032600 <_svfprintf_r+0x12b0>
 8032558:	9803      	ldr	r0, [sp, #12]
 803255a:	aa26      	add	r2, sp, #152	@ 0x98
 803255c:	4659      	mov	r1, fp
 803255e:	f7fd fa7f 	bl	802fa60 <__ssprint_r>
 8032562:	2800      	cmp	r0, #0
 8032564:	d16f      	bne.n	8032646 <_svfprintf_r+0x12f6>
 8032566:	ae29      	add	r6, sp, #164	@ 0xa4
 8032568:	ab22      	add	r3, sp, #136	@ 0x88
 803256a:	6033      	str	r3, [r6, #0]
 803256c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 803256e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8032570:	6073      	str	r3, [r6, #4]
 8032572:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8032574:	4413      	add	r3, r2
 8032576:	9328      	str	r3, [sp, #160]	@ 0xa0
 8032578:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803257a:	3301      	adds	r3, #1
 803257c:	2b07      	cmp	r3, #7
 803257e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8032580:	f73f ada0 	bgt.w	80320c4 <_svfprintf_r+0xd74>
 8032584:	f106 0408 	add.w	r4, r6, #8
 8032588:	f7ff baec 	b.w	8031b64 <_svfprintf_r+0x814>
 803258c:	9803      	ldr	r0, [sp, #12]
 803258e:	aa26      	add	r2, sp, #152	@ 0x98
 8032590:	4659      	mov	r1, fp
 8032592:	f7fd fa65 	bl	802fa60 <__ssprint_r>
 8032596:	2800      	cmp	r0, #0
 8032598:	d155      	bne.n	8032646 <_svfprintf_r+0x12f6>
 803259a:	ae29      	add	r6, sp, #164	@ 0xa4
 803259c:	e7c3      	b.n	8032526 <_svfprintf_r+0x11d6>
 803259e:	9b04      	ldr	r3, [sp, #16]
 80325a0:	2b01      	cmp	r3, #1
 80325a2:	dde1      	ble.n	8032568 <_svfprintf_r+0x1218>
 80325a4:	4f57      	ldr	r7, [pc, #348]	@ (8032704 <_svfprintf_r+0x13b4>)
 80325a6:	f04f 0810 	mov.w	r8, #16
 80325aa:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80325ae:	2c10      	cmp	r4, #16
 80325b0:	f103 0301 	add.w	r3, r3, #1
 80325b4:	f106 0108 	add.w	r1, r6, #8
 80325b8:	6037      	str	r7, [r6, #0]
 80325ba:	dc07      	bgt.n	80325cc <_svfprintf_r+0x127c>
 80325bc:	6074      	str	r4, [r6, #4]
 80325be:	2b07      	cmp	r3, #7
 80325c0:	4414      	add	r4, r2
 80325c2:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 80325c6:	dcc7      	bgt.n	8032558 <_svfprintf_r+0x1208>
 80325c8:	460e      	mov	r6, r1
 80325ca:	e7cd      	b.n	8032568 <_svfprintf_r+0x1218>
 80325cc:	3210      	adds	r2, #16
 80325ce:	2b07      	cmp	r3, #7
 80325d0:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 80325d4:	f8c6 8004 	str.w	r8, [r6, #4]
 80325d8:	dd06      	ble.n	80325e8 <_svfprintf_r+0x1298>
 80325da:	9803      	ldr	r0, [sp, #12]
 80325dc:	aa26      	add	r2, sp, #152	@ 0x98
 80325de:	4659      	mov	r1, fp
 80325e0:	f7fd fa3e 	bl	802fa60 <__ssprint_r>
 80325e4:	bb78      	cbnz	r0, 8032646 <_svfprintf_r+0x12f6>
 80325e6:	a929      	add	r1, sp, #164	@ 0xa4
 80325e8:	3c10      	subs	r4, #16
 80325ea:	460e      	mov	r6, r1
 80325ec:	e7dd      	b.n	80325aa <_svfprintf_r+0x125a>
 80325ee:	2101      	movs	r1, #1
 80325f0:	2a07      	cmp	r2, #7
 80325f2:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80325f6:	f8c4 9000 	str.w	r9, [r4]
 80325fa:	6061      	str	r1, [r4, #4]
 80325fc:	ddb4      	ble.n	8032568 <_svfprintf_r+0x1218>
 80325fe:	e7ab      	b.n	8032558 <_svfprintf_r+0x1208>
 8032600:	3608      	adds	r6, #8
 8032602:	e7b1      	b.n	8032568 <_svfprintf_r+0x1218>
 8032604:	460c      	mov	r4, r1
 8032606:	f7ff baad 	b.w	8031b64 <_svfprintf_r+0x814>
 803260a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803260c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 803260e:	1a9d      	subs	r5, r3, r2
 8032610:	2d00      	cmp	r5, #0
 8032612:	f77f aaaa 	ble.w	8031b6a <_svfprintf_r+0x81a>
 8032616:	4e3c      	ldr	r6, [pc, #240]	@ (8032708 <_svfprintf_r+0x13b8>)
 8032618:	2710      	movs	r7, #16
 803261a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 803261e:	2d10      	cmp	r5, #16
 8032620:	f103 0301 	add.w	r3, r3, #1
 8032624:	6026      	str	r6, [r4, #0]
 8032626:	dc18      	bgt.n	803265a <_svfprintf_r+0x130a>
 8032628:	442a      	add	r2, r5
 803262a:	2b07      	cmp	r3, #7
 803262c:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8032630:	6065      	str	r5, [r4, #4]
 8032632:	f77f aa9a 	ble.w	8031b6a <_svfprintf_r+0x81a>
 8032636:	9803      	ldr	r0, [sp, #12]
 8032638:	aa26      	add	r2, sp, #152	@ 0x98
 803263a:	4659      	mov	r1, fp
 803263c:	f7fd fa10 	bl	802fa60 <__ssprint_r>
 8032640:	2800      	cmp	r0, #0
 8032642:	f43f aa92 	beq.w	8031b6a <_svfprintf_r+0x81a>
 8032646:	f1ba 0f00 	cmp.w	sl, #0
 803264a:	f43f a89a 	beq.w	8031782 <_svfprintf_r+0x432>
 803264e:	9803      	ldr	r0, [sp, #12]
 8032650:	4651      	mov	r1, sl
 8032652:	f7fc fe43 	bl	802f2dc <_free_r>
 8032656:	f7ff b894 	b.w	8031782 <_svfprintf_r+0x432>
 803265a:	3210      	adds	r2, #16
 803265c:	2b07      	cmp	r3, #7
 803265e:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8032662:	6067      	str	r7, [r4, #4]
 8032664:	dc02      	bgt.n	803266c <_svfprintf_r+0x131c>
 8032666:	3408      	adds	r4, #8
 8032668:	3d10      	subs	r5, #16
 803266a:	e7d6      	b.n	803261a <_svfprintf_r+0x12ca>
 803266c:	9803      	ldr	r0, [sp, #12]
 803266e:	aa26      	add	r2, sp, #152	@ 0x98
 8032670:	4659      	mov	r1, fp
 8032672:	f7fd f9f5 	bl	802fa60 <__ssprint_r>
 8032676:	2800      	cmp	r0, #0
 8032678:	d1e5      	bne.n	8032646 <_svfprintf_r+0x12f6>
 803267a:	ac29      	add	r4, sp, #164	@ 0xa4
 803267c:	e7f4      	b.n	8032668 <_svfprintf_r+0x1318>
 803267e:	9803      	ldr	r0, [sp, #12]
 8032680:	4651      	mov	r1, sl
 8032682:	f7fc fe2b 	bl	802f2dc <_free_r>
 8032686:	f7ff ba88 	b.w	8031b9a <_svfprintf_r+0x84a>
 803268a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803268c:	2b00      	cmp	r3, #0
 803268e:	f43f a878 	beq.w	8031782 <_svfprintf_r+0x432>
 8032692:	9803      	ldr	r0, [sp, #12]
 8032694:	aa26      	add	r2, sp, #152	@ 0x98
 8032696:	4659      	mov	r1, fp
 8032698:	f7fd f9e2 	bl	802fa60 <__ssprint_r>
 803269c:	f7ff b871 	b.w	8031782 <_svfprintf_r+0x432>
 80326a0:	ea56 0207 	orrs.w	r2, r6, r7
 80326a4:	9508      	str	r5, [sp, #32]
 80326a6:	f43f ab7a 	beq.w	8031d9e <_svfprintf_r+0xa4e>
 80326aa:	2b01      	cmp	r3, #1
 80326ac:	f43f abfb 	beq.w	8031ea6 <_svfprintf_r+0xb56>
 80326b0:	2b02      	cmp	r3, #2
 80326b2:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 80326b6:	f43f ac3f 	beq.w	8031f38 <_svfprintf_r+0xbe8>
 80326ba:	f006 0307 	and.w	r3, r6, #7
 80326be:	08f6      	lsrs	r6, r6, #3
 80326c0:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 80326c4:	08ff      	lsrs	r7, r7, #3
 80326c6:	3330      	adds	r3, #48	@ 0x30
 80326c8:	ea56 0107 	orrs.w	r1, r6, r7
 80326cc:	464a      	mov	r2, r9
 80326ce:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80326d2:	d1f2      	bne.n	80326ba <_svfprintf_r+0x136a>
 80326d4:	9908      	ldr	r1, [sp, #32]
 80326d6:	07c8      	lsls	r0, r1, #31
 80326d8:	d506      	bpl.n	80326e8 <_svfprintf_r+0x1398>
 80326da:	2b30      	cmp	r3, #48	@ 0x30
 80326dc:	d004      	beq.n	80326e8 <_svfprintf_r+0x1398>
 80326de:	2330      	movs	r3, #48	@ 0x30
 80326e0:	f809 3c01 	strb.w	r3, [r9, #-1]
 80326e4:	f1a2 0902 	sub.w	r9, r2, #2
 80326e8:	ab52      	add	r3, sp, #328	@ 0x148
 80326ea:	9d08      	ldr	r5, [sp, #32]
 80326ec:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 80326f0:	f04f 0a00 	mov.w	sl, #0
 80326f4:	eba3 0809 	sub.w	r8, r3, r9
 80326f8:	4657      	mov	r7, sl
 80326fa:	f8cd a020 	str.w	sl, [sp, #32]
 80326fe:	4656      	mov	r6, sl
 8032700:	f7ff b97c 	b.w	80319fc <_svfprintf_r+0x6ac>
 8032704:	0803c9b2 	.word	0x0803c9b2
 8032708:	0803c9c2 	.word	0x0803c9c2

0803270c <__swhatbuf_r>:
 803270c:	b570      	push	{r4, r5, r6, lr}
 803270e:	460c      	mov	r4, r1
 8032710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8032714:	2900      	cmp	r1, #0
 8032716:	b096      	sub	sp, #88	@ 0x58
 8032718:	4615      	mov	r5, r2
 803271a:	461e      	mov	r6, r3
 803271c:	da07      	bge.n	803272e <__swhatbuf_r+0x22>
 803271e:	89a1      	ldrh	r1, [r4, #12]
 8032720:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 8032724:	d117      	bne.n	8032756 <__swhatbuf_r+0x4a>
 8032726:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 803272a:	4608      	mov	r0, r1
 803272c:	e00f      	b.n	803274e <__swhatbuf_r+0x42>
 803272e:	466a      	mov	r2, sp
 8032730:	f003 f892 	bl	8035858 <_fstat_r>
 8032734:	2800      	cmp	r0, #0
 8032736:	dbf2      	blt.n	803271e <__swhatbuf_r+0x12>
 8032738:	9901      	ldr	r1, [sp, #4]
 803273a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 803273e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8032742:	4259      	negs	r1, r3
 8032744:	4159      	adcs	r1, r3
 8032746:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 803274a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 803274e:	6031      	str	r1, [r6, #0]
 8032750:	602b      	str	r3, [r5, #0]
 8032752:	b016      	add	sp, #88	@ 0x58
 8032754:	bd70      	pop	{r4, r5, r6, pc}
 8032756:	2100      	movs	r1, #0
 8032758:	2340      	movs	r3, #64	@ 0x40
 803275a:	e7e6      	b.n	803272a <__swhatbuf_r+0x1e>

0803275c <__smakebuf_r>:
 803275c:	898b      	ldrh	r3, [r1, #12]
 803275e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8032760:	079d      	lsls	r5, r3, #30
 8032762:	4606      	mov	r6, r0
 8032764:	460c      	mov	r4, r1
 8032766:	d507      	bpl.n	8032778 <__smakebuf_r+0x1c>
 8032768:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 803276c:	6023      	str	r3, [r4, #0]
 803276e:	6123      	str	r3, [r4, #16]
 8032770:	2301      	movs	r3, #1
 8032772:	6163      	str	r3, [r4, #20]
 8032774:	b003      	add	sp, #12
 8032776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8032778:	ab01      	add	r3, sp, #4
 803277a:	466a      	mov	r2, sp
 803277c:	f7ff ffc6 	bl	803270c <__swhatbuf_r>
 8032780:	9f00      	ldr	r7, [sp, #0]
 8032782:	4605      	mov	r5, r0
 8032784:	4639      	mov	r1, r7
 8032786:	4630      	mov	r0, r6
 8032788:	f7fc fec0 	bl	802f50c <_malloc_r>
 803278c:	b948      	cbnz	r0, 80327a2 <__smakebuf_r+0x46>
 803278e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8032792:	059a      	lsls	r2, r3, #22
 8032794:	d4ee      	bmi.n	8032774 <__smakebuf_r+0x18>
 8032796:	f023 0303 	bic.w	r3, r3, #3
 803279a:	f043 0302 	orr.w	r3, r3, #2
 803279e:	81a3      	strh	r3, [r4, #12]
 80327a0:	e7e2      	b.n	8032768 <__smakebuf_r+0xc>
 80327a2:	89a3      	ldrh	r3, [r4, #12]
 80327a4:	6020      	str	r0, [r4, #0]
 80327a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80327aa:	81a3      	strh	r3, [r4, #12]
 80327ac:	9b01      	ldr	r3, [sp, #4]
 80327ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80327b2:	b15b      	cbz	r3, 80327cc <__smakebuf_r+0x70>
 80327b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80327b8:	4630      	mov	r0, r6
 80327ba:	f003 f85f 	bl	803587c <_isatty_r>
 80327be:	b128      	cbz	r0, 80327cc <__smakebuf_r+0x70>
 80327c0:	89a3      	ldrh	r3, [r4, #12]
 80327c2:	f023 0303 	bic.w	r3, r3, #3
 80327c6:	f043 0301 	orr.w	r3, r3, #1
 80327ca:	81a3      	strh	r3, [r4, #12]
 80327cc:	89a3      	ldrh	r3, [r4, #12]
 80327ce:	431d      	orrs	r5, r3
 80327d0:	81a5      	strh	r5, [r4, #12]
 80327d2:	e7cf      	b.n	8032774 <__smakebuf_r+0x18>

080327d4 <__ssvfscanf_r>:
 80327d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80327d8:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 80327dc:	461d      	mov	r5, r3
 80327de:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 80327e2:	af02      	add	r7, sp, #8
 80327e4:	049e      	lsls	r6, r3, #18
 80327e6:	62b8      	str	r0, [r7, #40]	@ 0x28
 80327e8:	460c      	mov	r4, r1
 80327ea:	617a      	str	r2, [r7, #20]
 80327ec:	d406      	bmi.n	80327fc <__ssvfscanf_r+0x28>
 80327ee:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80327f2:	818b      	strh	r3, [r1, #12]
 80327f4:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 80327f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80327fa:	664b      	str	r3, [r1, #100]	@ 0x64
 80327fc:	2300      	movs	r3, #0
 80327fe:	e9c7 3307 	strd	r3, r3, [r7, #28]
 8032802:	61bb      	str	r3, [r7, #24]
 8032804:	637b      	str	r3, [r7, #52]	@ 0x34
 8032806:	633b      	str	r3, [r7, #48]	@ 0x30
 8032808:	627b      	str	r3, [r7, #36]	@ 0x24
 803280a:	f8d7 8014 	ldr.w	r8, [r7, #20]
 803280e:	f818 3b01 	ldrb.w	r3, [r8], #1
 8032812:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8032814:	2b00      	cmp	r3, #0
 8032816:	f000 80d3 	beq.w	80329c0 <__ssvfscanf_r+0x1ec>
 803281a:	4a84      	ldr	r2, [pc, #528]	@ (8032a2c <__ssvfscanf_r+0x258>)
 803281c:	5cd6      	ldrb	r6, [r2, r3]
 803281e:	f016 0608 	ands.w	r6, r6, #8
 8032822:	d01b      	beq.n	803285c <__ssvfscanf_r+0x88>
 8032824:	6863      	ldr	r3, [r4, #4]
 8032826:	2b00      	cmp	r3, #0
 8032828:	dd08      	ble.n	803283c <__ssvfscanf_r+0x68>
 803282a:	6823      	ldr	r3, [r4, #0]
 803282c:	497f      	ldr	r1, [pc, #508]	@ (8032a2c <__ssvfscanf_r+0x258>)
 803282e:	781a      	ldrb	r2, [r3, #0]
 8032830:	5c8a      	ldrb	r2, [r1, r2]
 8032832:	0710      	lsls	r0, r2, #28
 8032834:	d409      	bmi.n	803284a <__ssvfscanf_r+0x76>
 8032836:	f8c7 8014 	str.w	r8, [r7, #20]
 803283a:	e7e6      	b.n	803280a <__ssvfscanf_r+0x36>
 803283c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803283e:	4621      	mov	r1, r4
 8032840:	f7fd fe13 	bl	803046a <__ssrefill_r>
 8032844:	2800      	cmp	r0, #0
 8032846:	d0f0      	beq.n	803282a <__ssvfscanf_r+0x56>
 8032848:	e7f5      	b.n	8032836 <__ssvfscanf_r+0x62>
 803284a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 803284c:	3201      	adds	r2, #1
 803284e:	633a      	str	r2, [r7, #48]	@ 0x30
 8032850:	6862      	ldr	r2, [r4, #4]
 8032852:	3301      	adds	r3, #1
 8032854:	3a01      	subs	r2, #1
 8032856:	6062      	str	r2, [r4, #4]
 8032858:	6023      	str	r3, [r4, #0]
 803285a:	e7e3      	b.n	8032824 <__ssvfscanf_r+0x50>
 803285c:	2b25      	cmp	r3, #37	@ 0x25
 803285e:	d163      	bne.n	8032928 <__ssvfscanf_r+0x154>
 8032860:	62fe      	str	r6, [r7, #44]	@ 0x2c
 8032862:	4642      	mov	r2, r8
 8032864:	f812 3b01 	ldrb.w	r3, [r2], #1
 8032868:	617a      	str	r2, [r7, #20]
 803286a:	f1a3 0225 	sub.w	r2, r3, #37	@ 0x25
 803286e:	2a55      	cmp	r2, #85	@ 0x55
 8032870:	f200 816e 	bhi.w	8032b50 <__ssvfscanf_r+0x37c>
 8032874:	e8df f012 	tbh	[pc, r2, lsl #1]
 8032878:	016c0056 	.word	0x016c0056
 803287c:	016c016c 	.word	0x016c016c
 8032880:	007d016c 	.word	0x007d016c
 8032884:	016c016c 	.word	0x016c016c
 8032888:	016c016c 	.word	0x016c016c
 803288c:	00b9016c 	.word	0x00b9016c
 8032890:	00b900b9 	.word	0x00b900b9
 8032894:	00b900b9 	.word	0x00b900b9
 8032898:	00b900b9 	.word	0x00b900b9
 803289c:	00b900b9 	.word	0x00b900b9
 80328a0:	016c00b9 	.word	0x016c00b9
 80328a4:	016c016c 	.word	0x016c016c
 80328a8:	016c016c 	.word	0x016c016c
 80328ac:	016c016c 	.word	0x016c016c
 80328b0:	016c00e0 	.word	0x016c00e0
 80328b4:	00c3010a 	.word	0x00c3010a
 80328b8:	00e000e0 	.word	0x00e000e0
 80328bc:	016c00e0 	.word	0x016c00e0
 80328c0:	016c016c 	.word	0x016c016c
 80328c4:	00a2016c 	.word	0x00a2016c
 80328c8:	016c016c 	.word	0x016c016c
 80328cc:	016c00c7 	.word	0x016c00c7
 80328d0:	016c016c 	.word	0x016c016c
 80328d4:	016c00fa 	.word	0x016c00fa
 80328d8:	016c016c 	.word	0x016c016c
 80328dc:	00d4016c 	.word	0x00d4016c
 80328e0:	016c016c 	.word	0x016c016c
 80328e4:	016c00ff 	.word	0x016c00ff
 80328e8:	016c016c 	.word	0x016c016c
 80328ec:	016c016c 	.word	0x016c016c
 80328f0:	016c00e0 	.word	0x016c00e0
 80328f4:	00c5010c 	.word	0x00c5010c
 80328f8:	00e000e0 	.word	0x00e000e0
 80328fc:	009400e0 	.word	0x009400e0
 8032900:	00a20130 	.word	0x00a20130
 8032904:	0085016c 	.word	0x0085016c
 8032908:	011400ac 	.word	0x011400ac
 803290c:	011100c9 	.word	0x011100c9
 8032910:	016c016c 	.word	0x016c016c
 8032914:	00a900fc 	.word	0x00a900fc
 8032918:	016c00d0 	.word	0x016c00d0
 803291c:	00d4016c 	.word	0x00d4016c
 8032920:	00a9016c 	.word	0x00a9016c
 8032924:	f8d7 8014 	ldr.w	r8, [r7, #20]
 8032928:	6863      	ldr	r3, [r4, #4]
 803292a:	2b00      	cmp	r3, #0
 803292c:	dd0e      	ble.n	803294c <__ssvfscanf_r+0x178>
 803292e:	6823      	ldr	r3, [r4, #0]
 8032930:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8032934:	7819      	ldrb	r1, [r3, #0]
 8032936:	4291      	cmp	r1, r2
 8032938:	d142      	bne.n	80329c0 <__ssvfscanf_r+0x1ec>
 803293a:	3301      	adds	r3, #1
 803293c:	6862      	ldr	r2, [r4, #4]
 803293e:	6023      	str	r3, [r4, #0]
 8032940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8032942:	3a01      	subs	r2, #1
 8032944:	3301      	adds	r3, #1
 8032946:	6062      	str	r2, [r4, #4]
 8032948:	633b      	str	r3, [r7, #48]	@ 0x30
 803294a:	e774      	b.n	8032836 <__ssvfscanf_r+0x62>
 803294c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803294e:	4621      	mov	r1, r4
 8032950:	f7fd fd8b 	bl	803046a <__ssrefill_r>
 8032954:	2800      	cmp	r0, #0
 8032956:	d0ea      	beq.n	803292e <__ssvfscanf_r+0x15a>
 8032958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803295a:	b113      	cbz	r3, 8032962 <__ssvfscanf_r+0x18e>
 803295c:	89a3      	ldrh	r3, [r4, #12]
 803295e:	065b      	lsls	r3, r3, #25
 8032960:	d52e      	bpl.n	80329c0 <__ssvfscanf_r+0x1ec>
 8032962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032964:	2b00      	cmp	r3, #0
 8032966:	f041 809d 	bne.w	8033aa4 <__ssvfscanf_r+0x12d0>
 803296a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803296e:	627b      	str	r3, [r7, #36]	@ 0x24
 8032970:	e0f9      	b.n	8032b66 <__ssvfscanf_r+0x392>
 8032972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032974:	4333      	orrs	r3, r6
 8032976:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8032978:	d122      	bne.n	80329c0 <__ssvfscanf_r+0x1ec>
 803297a:	2610      	movs	r6, #16
 803297c:	f8d7 8014 	ldr.w	r8, [r7, #20]
 8032980:	e76f      	b.n	8032862 <__ssvfscanf_r+0x8e>
 8032982:	0731      	lsls	r1, r6, #28
 8032984:	d11c      	bne.n	80329c0 <__ssvfscanf_r+0x1ec>
 8032986:	f898 3001 	ldrb.w	r3, [r8, #1]
 803298a:	2b6c      	cmp	r3, #108	@ 0x6c
 803298c:	d105      	bne.n	803299a <__ssvfscanf_r+0x1c6>
 803298e:	f108 0302 	add.w	r3, r8, #2
 8032992:	617b      	str	r3, [r7, #20]
 8032994:	f046 0602 	orr.w	r6, r6, #2
 8032998:	e7f0      	b.n	803297c <__ssvfscanf_r+0x1a8>
 803299a:	f046 0601 	orr.w	r6, r6, #1
 803299e:	e7ed      	b.n	803297c <__ssvfscanf_r+0x1a8>
 80329a0:	0732      	lsls	r2, r6, #28
 80329a2:	d10d      	bne.n	80329c0 <__ssvfscanf_r+0x1ec>
 80329a4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80329a8:	2b68      	cmp	r3, #104	@ 0x68
 80329aa:	bf03      	ittte	eq
 80329ac:	f108 0302 	addeq.w	r3, r8, #2
 80329b0:	617b      	streq	r3, [r7, #20]
 80329b2:	f046 0608 	orreq.w	r6, r6, #8
 80329b6:	f046 0604 	orrne.w	r6, r6, #4
 80329ba:	e7df      	b.n	803297c <__ssvfscanf_r+0x1a8>
 80329bc:	0733      	lsls	r3, r6, #28
 80329be:	d0e9      	beq.n	8032994 <__ssvfscanf_r+0x1c0>
 80329c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80329c2:	2b00      	cmp	r3, #0
 80329c4:	f000 80cf 	beq.w	8032b66 <__ssvfscanf_r+0x392>
 80329c8:	e0c8      	b.n	8032b5c <__ssvfscanf_r+0x388>
 80329ca:	0730      	lsls	r0, r6, #28
 80329cc:	d0d6      	beq.n	803297c <__ssvfscanf_r+0x1a8>
 80329ce:	e7f7      	b.n	80329c0 <__ssvfscanf_r+0x1ec>
 80329d0:	f016 038f 	ands.w	r3, r6, #143	@ 0x8f
 80329d4:	d1f4      	bne.n	80329c0 <__ssvfscanf_r+0x1ec>
 80329d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80329d8:	b922      	cbnz	r2, 80329e4 <__ssvfscanf_r+0x210>
 80329da:	b082      	sub	sp, #8
 80329dc:	aa02      	add	r2, sp, #8
 80329de:	e9c2 3300 	strd	r3, r3, [r2]
 80329e2:	637a      	str	r2, [r7, #52]	@ 0x34
 80329e4:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
 80329e8:	e7c8      	b.n	803297c <__ssvfscanf_r+0x1a8>
 80329ea:	f016 0f8f 	tst.w	r6, #143	@ 0x8f
 80329ee:	d1e7      	bne.n	80329c0 <__ssvfscanf_r+0x1ec>
 80329f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80329f2:	220a      	movs	r2, #10
 80329f4:	fb02 3301 	mla	r3, r2, r1, r3
 80329f8:	3b30      	subs	r3, #48	@ 0x30
 80329fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80329fc:	e7be      	b.n	803297c <__ssvfscanf_r+0x1a8>
 80329fe:	f046 0601 	orr.w	r6, r6, #1
 8032a02:	4b0b      	ldr	r3, [pc, #44]	@ (8032a30 <__ssvfscanf_r+0x25c>)
 8032a04:	e009      	b.n	8032a1a <__ssvfscanf_r+0x246>
 8032a06:	f046 0601 	orr.w	r6, r6, #1
 8032a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8032a34 <__ssvfscanf_r+0x260>)
 8032a0c:	61bb      	str	r3, [r7, #24]
 8032a0e:	2308      	movs	r3, #8
 8032a10:	61fb      	str	r3, [r7, #28]
 8032a12:	f04f 0803 	mov.w	r8, #3
 8032a16:	e011      	b.n	8032a3c <__ssvfscanf_r+0x268>
 8032a18:	4b06      	ldr	r3, [pc, #24]	@ (8032a34 <__ssvfscanf_r+0x260>)
 8032a1a:	61bb      	str	r3, [r7, #24]
 8032a1c:	230a      	movs	r3, #10
 8032a1e:	e7f7      	b.n	8032a10 <__ssvfscanf_r+0x23c>
 8032a20:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 8032a24:	4b03      	ldr	r3, [pc, #12]	@ (8032a34 <__ssvfscanf_r+0x260>)
 8032a26:	61bb      	str	r3, [r7, #24]
 8032a28:	2310      	movs	r3, #16
 8032a2a:	e7f1      	b.n	8032a10 <__ssvfscanf_r+0x23c>
 8032a2c:	0803c7f9 	.word	0x0803c7f9
 8032a30:	0802c769 	.word	0x0802c769
 8032a34:	08035569 	.word	0x08035569
 8032a38:	f04f 0804 	mov.w	r8, #4
 8032a3c:	6863      	ldr	r3, [r4, #4]
 8032a3e:	2b00      	cmp	r3, #0
 8032a40:	dd4e      	ble.n	8032ae0 <__ssvfscanf_r+0x30c>
 8032a42:	0673      	lsls	r3, r6, #25
 8032a44:	d407      	bmi.n	8032a56 <__ssvfscanf_r+0x282>
 8032a46:	f8df 92fc 	ldr.w	r9, [pc, #764]	@ 8032d44 <__ssvfscanf_r+0x570>
 8032a4a:	6823      	ldr	r3, [r4, #0]
 8032a4c:	781a      	ldrb	r2, [r3, #0]
 8032a4e:	f819 2002 	ldrb.w	r2, [r9, r2]
 8032a52:	0710      	lsls	r0, r2, #28
 8032a54:	d44b      	bmi.n	8032aee <__ssvfscanf_r+0x31a>
 8032a56:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8032a5a:	f1b8 0f03 	cmp.w	r8, #3
 8032a5e:	d858      	bhi.n	8032b12 <__ssvfscanf_r+0x33e>
 8032a60:	e8df f018 	tbh	[pc, r8, lsl #1]
 8032a64:	037801c1 	.word	0x037801c1
 8032a68:	05f30514 	.word	0x05f30514
 8032a6c:	f046 0601 	orr.w	r6, r6, #1
 8032a70:	f04f 0802 	mov.w	r8, #2
 8032a74:	e7e2      	b.n	8032a3c <__ssvfscanf_r+0x268>
 8032a76:	6979      	ldr	r1, [r7, #20]
 8032a78:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8032a7c:	f001 fd1d 	bl	80344ba <__sccl>
 8032a80:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 8032a84:	6178      	str	r0, [r7, #20]
 8032a86:	f04f 0801 	mov.w	r8, #1
 8032a8a:	e7d7      	b.n	8032a3c <__ssvfscanf_r+0x268>
 8032a8c:	f046 0601 	orr.w	r6, r6, #1
 8032a90:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 8032a94:	f04f 0800 	mov.w	r8, #0
 8032a98:	e7d0      	b.n	8032a3c <__ssvfscanf_r+0x268>
 8032a9a:	f446 7608 	orr.w	r6, r6, #544	@ 0x220
 8032a9e:	e7c1      	b.n	8032a24 <__ssvfscanf_r+0x250>
 8032aa0:	06f1      	lsls	r1, r6, #27
 8032aa2:	f53f aeb2 	bmi.w	803280a <__ssvfscanf_r+0x36>
 8032aa6:	0732      	lsls	r2, r6, #28
 8032aa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8032aac:	d502      	bpl.n	8032ab4 <__ssvfscanf_r+0x2e0>
 8032aae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8032ab0:	701a      	strb	r2, [r3, #0]
 8032ab2:	e6aa      	b.n	803280a <__ssvfscanf_r+0x36>
 8032ab4:	0770      	lsls	r0, r6, #29
 8032ab6:	d502      	bpl.n	8032abe <__ssvfscanf_r+0x2ea>
 8032ab8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8032aba:	801a      	strh	r2, [r3, #0]
 8032abc:	e6a5      	b.n	803280a <__ssvfscanf_r+0x36>
 8032abe:	07f1      	lsls	r1, r6, #31
 8032ac0:	d502      	bpl.n	8032ac8 <__ssvfscanf_r+0x2f4>
 8032ac2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8032ac4:	601a      	str	r2, [r3, #0]
 8032ac6:	e6a0      	b.n	803280a <__ssvfscanf_r+0x36>
 8032ac8:	07b2      	lsls	r2, r6, #30
 8032aca:	d5fa      	bpl.n	8032ac2 <__ssvfscanf_r+0x2ee>
 8032acc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8032ace:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8032ad0:	17d2      	asrs	r2, r2, #31
 8032ad2:	e9c3 1200 	strd	r1, r2, [r3]
 8032ad6:	e698      	b.n	803280a <__ssvfscanf_r+0x36>
 8032ad8:	4b99      	ldr	r3, [pc, #612]	@ (8032d40 <__ssvfscanf_r+0x56c>)
 8032ada:	61bb      	str	r3, [r7, #24]
 8032adc:	2300      	movs	r3, #0
 8032ade:	e797      	b.n	8032a10 <__ssvfscanf_r+0x23c>
 8032ae0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032ae2:	4621      	mov	r1, r4
 8032ae4:	f7fd fcc1 	bl	803046a <__ssrefill_r>
 8032ae8:	2800      	cmp	r0, #0
 8032aea:	d0aa      	beq.n	8032a42 <__ssvfscanf_r+0x26e>
 8032aec:	e734      	b.n	8032958 <__ssvfscanf_r+0x184>
 8032aee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8032af0:	3201      	adds	r2, #1
 8032af2:	633a      	str	r2, [r7, #48]	@ 0x30
 8032af4:	6862      	ldr	r2, [r4, #4]
 8032af6:	3a01      	subs	r2, #1
 8032af8:	2a00      	cmp	r2, #0
 8032afa:	6062      	str	r2, [r4, #4]
 8032afc:	dd02      	ble.n	8032b04 <__ssvfscanf_r+0x330>
 8032afe:	3301      	adds	r3, #1
 8032b00:	6023      	str	r3, [r4, #0]
 8032b02:	e7a2      	b.n	8032a4a <__ssvfscanf_r+0x276>
 8032b04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032b06:	4621      	mov	r1, r4
 8032b08:	f7fd fcaf 	bl	803046a <__ssrefill_r>
 8032b0c:	2800      	cmp	r0, #0
 8032b0e:	d09c      	beq.n	8032a4a <__ssvfscanf_r+0x276>
 8032b10:	e722      	b.n	8032958 <__ssvfscanf_r+0x184>
 8032b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032b14:	2b01      	cmp	r3, #1
 8032b16:	bf38      	it	cc
 8032b18:	2301      	movcc	r3, #1
 8032b1a:	4698      	mov	r8, r3
 8032b1c:	f016 0301 	ands.w	r3, r6, #1
 8032b20:	f006 0b10 	and.w	fp, r6, #16
 8032b24:	f000 80eb 	beq.w	8032cfe <__ssvfscanf_r+0x52a>
 8032b28:	f1bb 0f00 	cmp.w	fp, #0
 8032b2c:	f040 8085 	bne.w	8032c3a <__ssvfscanf_r+0x466>
 8032b30:	462b      	mov	r3, r5
 8032b32:	0631      	lsls	r1, r6, #24
 8032b34:	f853 5b04 	ldr.w	r5, [r3], #4
 8032b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8032b3a:	f140 8085 	bpl.w	8032c48 <__ssvfscanf_r+0x474>
 8032b3e:	b13d      	cbz	r5, 8032b50 <__ssvfscanf_r+0x37c>
 8032b40:	2080      	movs	r0, #128	@ 0x80
 8032b42:	f7fc fcd3 	bl	802f4ec <malloc>
 8032b46:	4606      	mov	r6, r0
 8032b48:	b998      	cbnz	r0, 8032b72 <__ssvfscanf_r+0x39e>
 8032b4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8032b4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8032b50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032b52:	b143      	cbz	r3, 8032b66 <__ssvfscanf_r+0x392>
 8032b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032b56:	3301      	adds	r3, #1
 8032b58:	f000 87a4 	beq.w	8033aa4 <__ssvfscanf_r+0x12d0>
 8032b5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032b5e:	6818      	ldr	r0, [r3, #0]
 8032b60:	b108      	cbz	r0, 8032b66 <__ssvfscanf_r+0x392>
 8032b62:	f7fc fccb 	bl	802f4fc <free>
 8032b66:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8032b68:	f507 772d 	add.w	r7, r7, #692	@ 0x2b4
 8032b6c:	46bd      	mov	sp, r7
 8032b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8032b72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032b74:	6028      	str	r0, [r5, #0]
 8032b76:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8032b7a:	889b      	ldrh	r3, [r3, #4]
 8032b7c:	4599      	cmp	r9, r3
 8032b7e:	d314      	bcc.n	8032baa <__ssvfscanf_r+0x3d6>
 8032b80:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8032b84:	4293      	cmp	r3, r2
 8032b86:	f200 878d 	bhi.w	8033aa4 <__ssvfscanf_r+0x12d0>
 8032b8a:	3308      	adds	r3, #8
 8032b8c:	fa1f fa83 	uxth.w	sl, r3
 8032b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032b92:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8032b96:	6818      	ldr	r0, [r3, #0]
 8032b98:	f001 fc32 	bl	8034400 <realloc>
 8032b9c:	2800      	cmp	r0, #0
 8032b9e:	f000 8781 	beq.w	8033aa4 <__ssvfscanf_r+0x12d0>
 8032ba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032ba4:	6018      	str	r0, [r3, #0]
 8032ba6:	f8a3 a004 	strh.w	sl, [r3, #4]
 8032baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032bac:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8032bae:	681b      	ldr	r3, [r3, #0]
 8032bb0:	f109 0201 	add.w	r2, r9, #1
 8032bb4:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8032bb8:	46aa      	mov	sl, r5
 8032bba:	80ca      	strh	r2, [r1, #6]
 8032bbc:	4635      	mov	r5, r6
 8032bbe:	f04f 0920 	mov.w	r9, #32
 8032bc2:	2200      	movs	r2, #0
 8032bc4:	613a      	str	r2, [r7, #16]
 8032bc6:	f7fb fbd3 	bl	802e370 <__locale_mb_cur_max>
 8032bca:	693a      	ldr	r2, [r7, #16]
 8032bcc:	4290      	cmp	r0, r2
 8032bce:	f43f aec3 	beq.w	8032958 <__ssvfscanf_r+0x184>
 8032bd2:	6821      	ldr	r1, [r4, #0]
 8032bd4:	f507 7ca8 	add.w	ip, r7, #336	@ 0x150
 8032bd8:	f811 0b01 	ldrb.w	r0, [r1], #1
 8032bdc:	f80c 0002 	strb.w	r0, [ip, r2]
 8032be0:	1c53      	adds	r3, r2, #1
 8032be2:	6862      	ldr	r2, [r4, #4]
 8032be4:	3a01      	subs	r2, #1
 8032be6:	e9c4 1200 	strd	r1, r2, [r4]
 8032bea:	6a3a      	ldr	r2, [r7, #32]
 8032bec:	2a03      	cmp	r2, #3
 8032bee:	d102      	bne.n	8032bf6 <__ssvfscanf_r+0x422>
 8032bf0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8032bf2:	2a04      	cmp	r2, #4
 8032bf4:	d007      	beq.n	8032c06 <__ssvfscanf_r+0x432>
 8032bf6:	2208      	movs	r2, #8
 8032bf8:	2100      	movs	r1, #0
 8032bfa:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8032bfe:	623b      	str	r3, [r7, #32]
 8032c00:	f7fa fa2e 	bl	802d060 <memset>
 8032c04:	6a3b      	ldr	r3, [r7, #32]
 8032c06:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8032c0a:	9200      	str	r2, [sp, #0]
 8032c0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032c0e:	613b      	str	r3, [r7, #16]
 8032c10:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8032c14:	4629      	mov	r1, r5
 8032c16:	f002 ffad 	bl	8035b74 <_mbrtowc_r>
 8032c1a:	1c42      	adds	r2, r0, #1
 8032c1c:	6238      	str	r0, [r7, #32]
 8032c1e:	f43f ae9b 	beq.w	8032958 <__ssvfscanf_r+0x184>
 8032c22:	693b      	ldr	r3, [r7, #16]
 8032c24:	b9b8      	cbnz	r0, 8032c56 <__ssvfscanf_r+0x482>
 8032c26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8032c28:	441a      	add	r2, r3
 8032c2a:	4613      	mov	r3, r2
 8032c2c:	f1bb 0f00 	cmp.w	fp, #0
 8032c30:	d00e      	beq.n	8032c50 <__ssvfscanf_r+0x47c>
 8032c32:	633b      	str	r3, [r7, #48]	@ 0x30
 8032c34:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8032c38:	e019      	b.n	8032c6e <__ssvfscanf_r+0x49a>
 8032c3a:	f04f 0900 	mov.w	r9, #0
 8032c3e:	62fd      	str	r5, [r7, #44]	@ 0x2c
 8032c40:	464e      	mov	r6, r9
 8032c42:	46ca      	mov	sl, r9
 8032c44:	464d      	mov	r5, r9
 8032c46:	e7bc      	b.n	8032bc2 <__ssvfscanf_r+0x3ee>
 8032c48:	46d9      	mov	r9, fp
 8032c4a:	465e      	mov	r6, fp
 8032c4c:	46da      	mov	sl, fp
 8032c4e:	e7b8      	b.n	8032bc2 <__ssvfscanf_r+0x3ee>
 8032c50:	f8c5 b000 	str.w	fp, [r5]
 8032c54:	e7ed      	b.n	8032c32 <__ssvfscanf_r+0x45e>
 8032c56:	6a3a      	ldr	r2, [r7, #32]
 8032c58:	3202      	adds	r2, #2
 8032c5a:	d025      	beq.n	8032ca8 <__ssvfscanf_r+0x4d4>
 8032c5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8032c5e:	441a      	add	r2, r3
 8032c60:	6a3b      	ldr	r3, [r7, #32]
 8032c62:	633a      	str	r2, [r7, #48]	@ 0x30
 8032c64:	2b03      	cmp	r3, #3
 8032c66:	d1e5      	bne.n	8032c34 <__ssvfscanf_r+0x460>
 8032c68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8032c6a:	2b04      	cmp	r3, #4
 8032c6c:	d1e2      	bne.n	8032c34 <__ssvfscanf_r+0x460>
 8032c6e:	f1bb 0f00 	cmp.w	fp, #0
 8032c72:	d117      	bne.n	8032ca4 <__ssvfscanf_r+0x4d0>
 8032c74:	f1ba 0f00 	cmp.w	sl, #0
 8032c78:	d013      	beq.n	8032ca2 <__ssvfscanf_r+0x4ce>
 8032c7a:	1bab      	subs	r3, r5, r6
 8032c7c:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 8032c80:	d80f      	bhi.n	8032ca2 <__ssvfscanf_r+0x4ce>
 8032c82:	4630      	mov	r0, r6
 8032c84:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8032c88:	613b      	str	r3, [r7, #16]
 8032c8a:	f001 fbb9 	bl	8034400 <realloc>
 8032c8e:	4606      	mov	r6, r0
 8032c90:	2800      	cmp	r0, #0
 8032c92:	f43f af5a 	beq.w	8032b4a <__ssvfscanf_r+0x376>
 8032c96:	693b      	ldr	r3, [r7, #16]
 8032c98:	f8ca 0000 	str.w	r0, [sl]
 8032c9c:	18c5      	adds	r5, r0, r3
 8032c9e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8032ca2:	3504      	adds	r5, #4
 8032ca4:	2200      	movs	r2, #0
 8032ca6:	e000      	b.n	8032caa <__ssvfscanf_r+0x4d6>
 8032ca8:	461a      	mov	r2, r3
 8032caa:	6863      	ldr	r3, [r4, #4]
 8032cac:	2b00      	cmp	r3, #0
 8032cae:	dc14      	bgt.n	8032cda <__ssvfscanf_r+0x506>
 8032cb0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032cb2:	613a      	str	r2, [r7, #16]
 8032cb4:	4621      	mov	r1, r4
 8032cb6:	f7fd fbd8 	bl	803046a <__ssrefill_r>
 8032cba:	693a      	ldr	r2, [r7, #16]
 8032cbc:	b168      	cbz	r0, 8032cda <__ssvfscanf_r+0x506>
 8032cbe:	2a00      	cmp	r2, #0
 8032cc0:	f47f ae4a 	bne.w	8032958 <__ssvfscanf_r+0x184>
 8032cc4:	f1ba 0f00 	cmp.w	sl, #0
 8032cc8:	d10c      	bne.n	8032ce4 <__ssvfscanf_r+0x510>
 8032cca:	f1bb 0f00 	cmp.w	fp, #0
 8032cce:	d102      	bne.n	8032cd6 <__ssvfscanf_r+0x502>
 8032cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032cd2:	3301      	adds	r3, #1
 8032cd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8032cd6:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8032cd8:	e597      	b.n	803280a <__ssvfscanf_r+0x36>
 8032cda:	f1b8 0f00 	cmp.w	r8, #0
 8032cde:	f47f af71 	bne.w	8032bc4 <__ssvfscanf_r+0x3f0>
 8032ce2:	e7ef      	b.n	8032cc4 <__ssvfscanf_r+0x4f0>
 8032ce4:	1ba9      	subs	r1, r5, r6
 8032ce6:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 8032cea:	d9ee      	bls.n	8032cca <__ssvfscanf_r+0x4f6>
 8032cec:	f8da 0000 	ldr.w	r0, [sl]
 8032cf0:	f001 fb86 	bl	8034400 <realloc>
 8032cf4:	2800      	cmp	r0, #0
 8032cf6:	d0e8      	beq.n	8032cca <__ssvfscanf_r+0x4f6>
 8032cf8:	f8ca 0000 	str.w	r0, [sl]
 8032cfc:	e7e5      	b.n	8032cca <__ssvfscanf_r+0x4f6>
 8032cfe:	f1bb 0f00 	cmp.w	fp, #0
 8032d02:	d021      	beq.n	8032d48 <__ssvfscanf_r+0x574>
 8032d04:	461e      	mov	r6, r3
 8032d06:	e9d4 2300 	ldrd	r2, r3, [r4]
 8032d0a:	4598      	cmp	r8, r3
 8032d0c:	dd11      	ble.n	8032d32 <__ssvfscanf_r+0x55e>
 8032d0e:	441a      	add	r2, r3
 8032d10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032d12:	6022      	str	r2, [r4, #0]
 8032d14:	4621      	mov	r1, r4
 8032d16:	441e      	add	r6, r3
 8032d18:	eba8 0803 	sub.w	r8, r8, r3
 8032d1c:	f7fd fba5 	bl	803046a <__ssrefill_r>
 8032d20:	2800      	cmp	r0, #0
 8032d22:	d0f0      	beq.n	8032d06 <__ssvfscanf_r+0x532>
 8032d24:	2e00      	cmp	r6, #0
 8032d26:	f43f ae17 	beq.w	8032958 <__ssvfscanf_r+0x184>
 8032d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8032d2c:	4433      	add	r3, r6
 8032d2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8032d30:	e56b      	b.n	803280a <__ssvfscanf_r+0x36>
 8032d32:	eba3 0308 	sub.w	r3, r3, r8
 8032d36:	4442      	add	r2, r8
 8032d38:	4446      	add	r6, r8
 8032d3a:	6063      	str	r3, [r4, #4]
 8032d3c:	6022      	str	r2, [r4, #0]
 8032d3e:	e7f4      	b.n	8032d2a <__ssvfscanf_r+0x556>
 8032d40:	0802c769 	.word	0x0802c769
 8032d44:	0803c7f9 	.word	0x0803c7f9
 8032d48:	46a9      	mov	r9, r5
 8032d4a:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 8032d4e:	f859 5b04 	ldr.w	r5, [r9], #4
 8032d52:	d02c      	beq.n	8032dae <__ssvfscanf_r+0x5da>
 8032d54:	2d00      	cmp	r5, #0
 8032d56:	f43f ae33 	beq.w	80329c0 <__ssvfscanf_r+0x1ec>
 8032d5a:	4640      	mov	r0, r8
 8032d5c:	f7fc fbc6 	bl	802f4ec <malloc>
 8032d60:	4682      	mov	sl, r0
 8032d62:	2800      	cmp	r0, #0
 8032d64:	f43f adfd 	beq.w	8032962 <__ssvfscanf_r+0x18e>
 8032d68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032d6a:	6028      	str	r0, [r5, #0]
 8032d6c:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 8032d70:	889e      	ldrh	r6, [r3, #4]
 8032d72:	45b3      	cmp	fp, r6
 8032d74:	d311      	bcc.n	8032d9a <__ssvfscanf_r+0x5c6>
 8032d76:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8032d7a:	429e      	cmp	r6, r3
 8032d7c:	f200 8692 	bhi.w	8033aa4 <__ssvfscanf_r+0x12d0>
 8032d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032d82:	3608      	adds	r6, #8
 8032d84:	b2b6      	uxth	r6, r6
 8032d86:	6818      	ldr	r0, [r3, #0]
 8032d88:	00b1      	lsls	r1, r6, #2
 8032d8a:	f001 fb39 	bl	8034400 <realloc>
 8032d8e:	2800      	cmp	r0, #0
 8032d90:	f000 8688 	beq.w	8033aa4 <__ssvfscanf_r+0x12d0>
 8032d94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032d96:	6018      	str	r0, [r3, #0]
 8032d98:	809e      	strh	r6, [r3, #4]
 8032d9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032d9c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8032d9e:	681b      	ldr	r3, [r3, #0]
 8032da0:	f10b 0201 	add.w	r2, fp, #1
 8032da4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8032da8:	462e      	mov	r6, r5
 8032daa:	80ca      	strh	r2, [r1, #6]
 8032dac:	4655      	mov	r5, sl
 8032dae:	9400      	str	r4, [sp, #0]
 8032db0:	4629      	mov	r1, r5
 8032db2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032db4:	4643      	mov	r3, r8
 8032db6:	2201      	movs	r2, #1
 8032db8:	f7fd fb74 	bl	80304a4 <_sfread_r>
 8032dbc:	4605      	mov	r5, r0
 8032dbe:	2800      	cmp	r0, #0
 8032dc0:	f43f adca 	beq.w	8032958 <__ssvfscanf_r+0x184>
 8032dc4:	b13e      	cbz	r6, 8032dd6 <__ssvfscanf_r+0x602>
 8032dc6:	4580      	cmp	r8, r0
 8032dc8:	d905      	bls.n	8032dd6 <__ssvfscanf_r+0x602>
 8032dca:	4601      	mov	r1, r0
 8032dcc:	6830      	ldr	r0, [r6, #0]
 8032dce:	f001 fb17 	bl	8034400 <realloc>
 8032dd2:	b100      	cbz	r0, 8032dd6 <__ssvfscanf_r+0x602>
 8032dd4:	6030      	str	r0, [r6, #0]
 8032dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8032dd8:	442b      	add	r3, r5
 8032dda:	633b      	str	r3, [r7, #48]	@ 0x30
 8032ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032dde:	3301      	adds	r3, #1
 8032de0:	627b      	str	r3, [r7, #36]	@ 0x24
 8032de2:	464d      	mov	r5, r9
 8032de4:	e511      	b.n	803280a <__ssvfscanf_r+0x36>
 8032de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032de8:	2b00      	cmp	r3, #0
 8032dea:	bf08      	it	eq
 8032dec:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 8032df0:	f016 0801 	ands.w	r8, r6, #1
 8032df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8032df6:	f006 0a10 	and.w	sl, r6, #16
 8032dfa:	f000 8101 	beq.w	8033000 <__ssvfscanf_r+0x82c>
 8032dfe:	f1ba 0f00 	cmp.w	sl, #0
 8032e02:	f040 80a4 	bne.w	8032f4e <__ssvfscanf_r+0x77a>
 8032e06:	462b      	mov	r3, r5
 8032e08:	f853 5b04 	ldr.w	r5, [r3], #4
 8032e0c:	60fb      	str	r3, [r7, #12]
 8032e0e:	0633      	lsls	r3, r6, #24
 8032e10:	f140 80a5 	bpl.w	8032f5e <__ssvfscanf_r+0x78a>
 8032e14:	2d00      	cmp	r5, #0
 8032e16:	f43f ae9b 	beq.w	8032b50 <__ssvfscanf_r+0x37c>
 8032e1a:	2080      	movs	r0, #128	@ 0x80
 8032e1c:	f7fc fb66 	bl	802f4ec <malloc>
 8032e20:	4680      	mov	r8, r0
 8032e22:	2800      	cmp	r0, #0
 8032e24:	f43f ae91 	beq.w	8032b4a <__ssvfscanf_r+0x376>
 8032e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032e2a:	6028      	str	r0, [r5, #0]
 8032e2c:	88de      	ldrh	r6, [r3, #6]
 8032e2e:	889b      	ldrh	r3, [r3, #4]
 8032e30:	429e      	cmp	r6, r3
 8032e32:	d314      	bcc.n	8032e5e <__ssvfscanf_r+0x68a>
 8032e34:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8032e38:	4293      	cmp	r3, r2
 8032e3a:	f200 8633 	bhi.w	8033aa4 <__ssvfscanf_r+0x12d0>
 8032e3e:	3308      	adds	r3, #8
 8032e40:	fa1f f983 	uxth.w	r9, r3
 8032e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032e46:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8032e4a:	6818      	ldr	r0, [r3, #0]
 8032e4c:	f001 fad8 	bl	8034400 <realloc>
 8032e50:	2800      	cmp	r0, #0
 8032e52:	f000 8627 	beq.w	8033aa4 <__ssvfscanf_r+0x12d0>
 8032e56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032e58:	6018      	str	r0, [r3, #0]
 8032e5a:	f8a3 9004 	strh.w	r9, [r3, #4]
 8032e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032e60:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8032e62:	681b      	ldr	r3, [r3, #0]
 8032e64:	1c72      	adds	r2, r6, #1
 8032e66:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 8032e6a:	46ab      	mov	fp, r5
 8032e6c:	80ca      	strh	r2, [r1, #6]
 8032e6e:	4645      	mov	r5, r8
 8032e70:	f04f 0920 	mov.w	r9, #32
 8032e74:	2600      	movs	r6, #0
 8032e76:	f7fb fa7b 	bl	802e370 <__locale_mb_cur_max>
 8032e7a:	42b0      	cmp	r0, r6
 8032e7c:	f43f ad6c 	beq.w	8032958 <__ssvfscanf_r+0x184>
 8032e80:	1c73      	adds	r3, r6, #1
 8032e82:	613b      	str	r3, [r7, #16]
 8032e84:	6823      	ldr	r3, [r4, #0]
 8032e86:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8032e8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8032e8e:	558a      	strb	r2, [r1, r6]
 8032e90:	6862      	ldr	r2, [r4, #4]
 8032e92:	3a01      	subs	r2, #1
 8032e94:	e9c4 3200 	strd	r3, r2, [r4]
 8032e98:	6a3b      	ldr	r3, [r7, #32]
 8032e9a:	2b03      	cmp	r3, #3
 8032e9c:	d102      	bne.n	8032ea4 <__ssvfscanf_r+0x6d0>
 8032e9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8032ea0:	2b04      	cmp	r3, #4
 8032ea2:	d005      	beq.n	8032eb0 <__ssvfscanf_r+0x6dc>
 8032ea4:	2208      	movs	r2, #8
 8032ea6:	2100      	movs	r1, #0
 8032ea8:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8032eac:	f7fa f8d8 	bl	802d060 <memset>
 8032eb0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8032eb4:	9300      	str	r3, [sp, #0]
 8032eb6:	693b      	ldr	r3, [r7, #16]
 8032eb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032eba:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8032ebe:	4629      	mov	r1, r5
 8032ec0:	f002 fe58 	bl	8035b74 <_mbrtowc_r>
 8032ec4:	1c46      	adds	r6, r0, #1
 8032ec6:	6238      	str	r0, [r7, #32]
 8032ec8:	f43f ad46 	beq.w	8032958 <__ssvfscanf_r+0x184>
 8032ecc:	2800      	cmp	r0, #0
 8032ece:	d14a      	bne.n	8032f66 <__ssvfscanf_r+0x792>
 8032ed0:	6028      	str	r0, [r5, #0]
 8032ed2:	682e      	ldr	r6, [r5, #0]
 8032ed4:	1c70      	adds	r0, r6, #1
 8032ed6:	d056      	beq.n	8032f86 <__ssvfscanf_r+0x7b2>
 8032ed8:	2208      	movs	r2, #8
 8032eda:	2100      	movs	r1, #0
 8032edc:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8032ee0:	f7fa f8be 	bl	802d060 <memset>
 8032ee4:	4b9a      	ldr	r3, [pc, #616]	@ (8033150 <__ssvfscanf_r+0x97c>)
 8032ee6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8032eec:	60bb      	str	r3, [r7, #8]
 8032eee:	4632      	mov	r2, r6
 8032ef0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8032ef4:	68be      	ldr	r6, [r7, #8]
 8032ef6:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8032efa:	47b0      	blx	r6
 8032efc:	2801      	cmp	r0, #1
 8032efe:	d144      	bne.n	8032f8a <__ssvfscanf_r+0x7b6>
 8032f00:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8032f04:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8032f08:	5c9b      	ldrb	r3, [r3, r2]
 8032f0a:	2b00      	cmp	r3, #0
 8032f0c:	d148      	bne.n	8032fa0 <__ssvfscanf_r+0x7cc>
 8032f0e:	f507 76a8 	add.w	r6, r7, #336	@ 0x150
 8032f12:	693b      	ldr	r3, [r7, #16]
 8032f14:	2b00      	cmp	r3, #0
 8032f16:	d13a      	bne.n	8032f8e <__ssvfscanf_r+0x7ba>
 8032f18:	f1ba 0f00 	cmp.w	sl, #0
 8032f1c:	d115      	bne.n	8032f4a <__ssvfscanf_r+0x776>
 8032f1e:	f8c5 a000 	str.w	sl, [r5]
 8032f22:	f1bb 0f00 	cmp.w	fp, #0
 8032f26:	d00d      	beq.n	8032f44 <__ssvfscanf_r+0x770>
 8032f28:	eba5 0108 	sub.w	r1, r5, r8
 8032f2c:	108b      	asrs	r3, r1, #2
 8032f2e:	3301      	adds	r3, #1
 8032f30:	4599      	cmp	r9, r3
 8032f32:	d907      	bls.n	8032f44 <__ssvfscanf_r+0x770>
 8032f34:	f8db 0000 	ldr.w	r0, [fp]
 8032f38:	3104      	adds	r1, #4
 8032f3a:	f001 fa61 	bl	8034400 <realloc>
 8032f3e:	b108      	cbz	r0, 8032f44 <__ssvfscanf_r+0x770>
 8032f40:	f8cb 0000 	str.w	r0, [fp]
 8032f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032f46:	3301      	adds	r3, #1
 8032f48:	627b      	str	r3, [r7, #36]	@ 0x24
 8032f4a:	68fd      	ldr	r5, [r7, #12]
 8032f4c:	e45d      	b.n	803280a <__ssvfscanf_r+0x36>
 8032f4e:	f04f 0900 	mov.w	r9, #0
 8032f52:	60fd      	str	r5, [r7, #12]
 8032f54:	46c8      	mov	r8, r9
 8032f56:	46cb      	mov	fp, r9
 8032f58:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 8032f5c:	e78a      	b.n	8032e74 <__ssvfscanf_r+0x6a0>
 8032f5e:	46d1      	mov	r9, sl
 8032f60:	46d0      	mov	r8, sl
 8032f62:	46d3      	mov	fp, sl
 8032f64:	e786      	b.n	8032e74 <__ssvfscanf_r+0x6a0>
 8032f66:	6a3b      	ldr	r3, [r7, #32]
 8032f68:	3302      	adds	r3, #2
 8032f6a:	d1b2      	bne.n	8032ed2 <__ssvfscanf_r+0x6fe>
 8032f6c:	693e      	ldr	r6, [r7, #16]
 8032f6e:	6863      	ldr	r3, [r4, #4]
 8032f70:	2b00      	cmp	r3, #0
 8032f72:	dc40      	bgt.n	8032ff6 <__ssvfscanf_r+0x822>
 8032f74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032f76:	4621      	mov	r1, r4
 8032f78:	f7fd fa77 	bl	803046a <__ssrefill_r>
 8032f7c:	2800      	cmp	r0, #0
 8032f7e:	d03a      	beq.n	8032ff6 <__ssvfscanf_r+0x822>
 8032f80:	2e00      	cmp	r6, #0
 8032f82:	d0c9      	beq.n	8032f18 <__ssvfscanf_r+0x744>
 8032f84:	e4e8      	b.n	8032958 <__ssvfscanf_r+0x184>
 8032f86:	4632      	mov	r2, r6
 8032f88:	e7bc      	b.n	8032f04 <__ssvfscanf_r+0x730>
 8032f8a:	2200      	movs	r2, #0
 8032f8c:	e7ba      	b.n	8032f04 <__ssvfscanf_r+0x730>
 8032f8e:	693b      	ldr	r3, [r7, #16]
 8032f90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032f92:	3b01      	subs	r3, #1
 8032f94:	4622      	mov	r2, r4
 8032f96:	5cf1      	ldrb	r1, [r6, r3]
 8032f98:	613b      	str	r3, [r7, #16]
 8032f9a:	f7fd fa2b 	bl	80303f4 <_sungetc_r>
 8032f9e:	e7b8      	b.n	8032f12 <__ssvfscanf_r+0x73e>
 8032fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8032fa2:	693a      	ldr	r2, [r7, #16]
 8032fa4:	4413      	add	r3, r2
 8032fa6:	633b      	str	r3, [r7, #48]	@ 0x30
 8032fa8:	6a3b      	ldr	r3, [r7, #32]
 8032faa:	2b03      	cmp	r3, #3
 8032fac:	d102      	bne.n	8032fb4 <__ssvfscanf_r+0x7e0>
 8032fae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8032fb0:	2b04      	cmp	r3, #4
 8032fb2:	d002      	beq.n	8032fba <__ssvfscanf_r+0x7e6>
 8032fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032fb6:	3b01      	subs	r3, #1
 8032fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8032fba:	f1ba 0f00 	cmp.w	sl, #0
 8032fbe:	d118      	bne.n	8032ff2 <__ssvfscanf_r+0x81e>
 8032fc0:	3504      	adds	r5, #4
 8032fc2:	f1bb 0f00 	cmp.w	fp, #0
 8032fc6:	d014      	beq.n	8032ff2 <__ssvfscanf_r+0x81e>
 8032fc8:	eba5 0608 	sub.w	r6, r5, r8
 8032fcc:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 8032fd0:	d80d      	bhi.n	8032fee <__ssvfscanf_r+0x81a>
 8032fd2:	4640      	mov	r0, r8
 8032fd4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8032fd8:	f001 fa12 	bl	8034400 <realloc>
 8032fdc:	4680      	mov	r8, r0
 8032fde:	2800      	cmp	r0, #0
 8032fe0:	f43f adb3 	beq.w	8032b4a <__ssvfscanf_r+0x376>
 8032fe4:	1985      	adds	r5, r0, r6
 8032fe6:	f8cb 0000 	str.w	r0, [fp]
 8032fea:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8032fee:	4656      	mov	r6, sl
 8032ff0:	e7bd      	b.n	8032f6e <__ssvfscanf_r+0x79a>
 8032ff2:	2600      	movs	r6, #0
 8032ff4:	e7bb      	b.n	8032f6e <__ssvfscanf_r+0x79a>
 8032ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032ff8:	2b00      	cmp	r3, #0
 8032ffa:	f47f af3c 	bne.w	8032e76 <__ssvfscanf_r+0x6a2>
 8032ffe:	e78b      	b.n	8032f18 <__ssvfscanf_r+0x744>
 8033000:	f1ba 0f00 	cmp.w	sl, #0
 8033004:	d01e      	beq.n	8033044 <__ssvfscanf_r+0x870>
 8033006:	f107 0650 	add.w	r6, r7, #80	@ 0x50
 803300a:	6823      	ldr	r3, [r4, #0]
 803300c:	781a      	ldrb	r2, [r3, #0]
 803300e:	5cb2      	ldrb	r2, [r6, r2]
 8033010:	b91a      	cbnz	r2, 803301a <__ssvfscanf_r+0x846>
 8033012:	f1b8 0f00 	cmp.w	r8, #0
 8033016:	d112      	bne.n	803303e <__ssvfscanf_r+0x86a>
 8033018:	e4d2      	b.n	80329c0 <__ssvfscanf_r+0x1ec>
 803301a:	3301      	adds	r3, #1
 803301c:	6862      	ldr	r2, [r4, #4]
 803301e:	6023      	str	r3, [r4, #0]
 8033020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8033022:	f108 0801 	add.w	r8, r8, #1
 8033026:	3a01      	subs	r2, #1
 8033028:	4543      	cmp	r3, r8
 803302a:	6062      	str	r2, [r4, #4]
 803302c:	d007      	beq.n	803303e <__ssvfscanf_r+0x86a>
 803302e:	2a00      	cmp	r2, #0
 8033030:	dceb      	bgt.n	803300a <__ssvfscanf_r+0x836>
 8033032:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033034:	4621      	mov	r1, r4
 8033036:	f7fd fa18 	bl	803046a <__ssrefill_r>
 803303a:	2800      	cmp	r0, #0
 803303c:	d0e5      	beq.n	803300a <__ssvfscanf_r+0x836>
 803303e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8033040:	4443      	add	r3, r8
 8033042:	e674      	b.n	8032d2e <__ssvfscanf_r+0x55a>
 8033044:	46a9      	mov	r9, r5
 8033046:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 803304a:	f859 8b04 	ldr.w	r8, [r9], #4
 803304e:	d07d      	beq.n	803314c <__ssvfscanf_r+0x978>
 8033050:	f1b8 0f00 	cmp.w	r8, #0
 8033054:	f43f acb4 	beq.w	80329c0 <__ssvfscanf_r+0x1ec>
 8033058:	2020      	movs	r0, #32
 803305a:	f7fc fa47 	bl	802f4ec <malloc>
 803305e:	4606      	mov	r6, r0
 8033060:	2800      	cmp	r0, #0
 8033062:	f43f ac7e 	beq.w	8032962 <__ssvfscanf_r+0x18e>
 8033066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8033068:	f8c8 0000 	str.w	r0, [r8]
 803306c:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 8033070:	889d      	ldrh	r5, [r3, #4]
 8033072:	45aa      	cmp	sl, r5
 8033074:	d311      	bcc.n	803309a <__ssvfscanf_r+0x8c6>
 8033076:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 803307a:	429d      	cmp	r5, r3
 803307c:	f200 8512 	bhi.w	8033aa4 <__ssvfscanf_r+0x12d0>
 8033080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8033082:	3508      	adds	r5, #8
 8033084:	b2ad      	uxth	r5, r5
 8033086:	6818      	ldr	r0, [r3, #0]
 8033088:	00a9      	lsls	r1, r5, #2
 803308a:	f001 f9b9 	bl	8034400 <realloc>
 803308e:	2800      	cmp	r0, #0
 8033090:	f000 8508 	beq.w	8033aa4 <__ssvfscanf_r+0x12d0>
 8033094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8033096:	6018      	str	r0, [r3, #0]
 8033098:	809d      	strh	r5, [r3, #4]
 803309a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803309c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 803309e:	681b      	ldr	r3, [r3, #0]
 80330a0:	f10a 0201 	add.w	r2, sl, #1
 80330a4:	f843 802a 	str.w	r8, [r3, sl, lsl #2]
 80330a8:	80ca      	strh	r2, [r1, #6]
 80330aa:	46c2      	mov	sl, r8
 80330ac:	46b0      	mov	r8, r6
 80330ae:	2620      	movs	r6, #32
 80330b0:	4645      	mov	r5, r8
 80330b2:	6823      	ldr	r3, [r4, #0]
 80330b4:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 80330b8:	781a      	ldrb	r2, [r3, #0]
 80330ba:	5c8a      	ldrb	r2, [r1, r2]
 80330bc:	b35a      	cbz	r2, 8033116 <__ssvfscanf_r+0x942>
 80330be:	6862      	ldr	r2, [r4, #4]
 80330c0:	3a01      	subs	r2, #1
 80330c2:	6062      	str	r2, [r4, #4]
 80330c4:	1c5a      	adds	r2, r3, #1
 80330c6:	6022      	str	r2, [r4, #0]
 80330c8:	781b      	ldrb	r3, [r3, #0]
 80330ca:	f808 3b01 	strb.w	r3, [r8], #1
 80330ce:	f1ba 0f00 	cmp.w	sl, #0
 80330d2:	d010      	beq.n	80330f6 <__ssvfscanf_r+0x922>
 80330d4:	eba8 0b05 	sub.w	fp, r8, r5
 80330d8:	45b3      	cmp	fp, r6
 80330da:	d30c      	bcc.n	80330f6 <__ssvfscanf_r+0x922>
 80330dc:	0076      	lsls	r6, r6, #1
 80330de:	4628      	mov	r0, r5
 80330e0:	4631      	mov	r1, r6
 80330e2:	f001 f98d 	bl	8034400 <realloc>
 80330e6:	4605      	mov	r5, r0
 80330e8:	2800      	cmp	r0, #0
 80330ea:	f43f ac3a 	beq.w	8032962 <__ssvfscanf_r+0x18e>
 80330ee:	eb00 080b 	add.w	r8, r0, fp
 80330f2:	f8ca 0000 	str.w	r0, [sl]
 80330f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80330f8:	3b01      	subs	r3, #1
 80330fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80330fc:	d00b      	beq.n	8033116 <__ssvfscanf_r+0x942>
 80330fe:	6863      	ldr	r3, [r4, #4]
 8033100:	2b00      	cmp	r3, #0
 8033102:	dcd6      	bgt.n	80330b2 <__ssvfscanf_r+0x8de>
 8033104:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033106:	4621      	mov	r1, r4
 8033108:	f7fd f9af 	bl	803046a <__ssrefill_r>
 803310c:	2800      	cmp	r0, #0
 803310e:	d0d0      	beq.n	80330b2 <__ssvfscanf_r+0x8de>
 8033110:	45a8      	cmp	r8, r5
 8033112:	f43f ac21 	beq.w	8032958 <__ssvfscanf_r+0x184>
 8033116:	ebb8 0505 	subs.w	r5, r8, r5
 803311a:	f43f ac51 	beq.w	80329c0 <__ssvfscanf_r+0x1ec>
 803311e:	2300      	movs	r3, #0
 8033120:	f888 3000 	strb.w	r3, [r8]
 8033124:	f1ba 0f00 	cmp.w	sl, #0
 8033128:	d009      	beq.n	803313e <__ssvfscanf_r+0x96a>
 803312a:	1c69      	adds	r1, r5, #1
 803312c:	428e      	cmp	r6, r1
 803312e:	d906      	bls.n	803313e <__ssvfscanf_r+0x96a>
 8033130:	f8da 0000 	ldr.w	r0, [sl]
 8033134:	f001 f964 	bl	8034400 <realloc>
 8033138:	b108      	cbz	r0, 803313e <__ssvfscanf_r+0x96a>
 803313a:	f8ca 0000 	str.w	r0, [sl]
 803313e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8033140:	3301      	adds	r3, #1
 8033142:	627b      	str	r3, [r7, #36]	@ 0x24
 8033144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8033146:	442b      	add	r3, r5
 8033148:	633b      	str	r3, [r7, #48]	@ 0x30
 803314a:	e64a      	b.n	8032de2 <__ssvfscanf_r+0x60e>
 803314c:	46b2      	mov	sl, r6
 803314e:	e7af      	b.n	80330b0 <__ssvfscanf_r+0x8dc>
 8033150:	2000016c 	.word	0x2000016c
 8033154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8033156:	2b00      	cmp	r3, #0
 8033158:	bf08      	it	eq
 803315a:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 803315e:	f016 0901 	ands.w	r9, r6, #1
 8033162:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8033164:	f006 0810 	and.w	r8, r6, #16
 8033168:	f000 80ef 	beq.w	803334a <__ssvfscanf_r+0xb76>
 803316c:	f1b8 0f00 	cmp.w	r8, #0
 8033170:	f040 8098 	bne.w	80332a4 <__ssvfscanf_r+0xad0>
 8033174:	462b      	mov	r3, r5
 8033176:	0631      	lsls	r1, r6, #24
 8033178:	f853 5b04 	ldr.w	r5, [r3], #4
 803317c:	613b      	str	r3, [r7, #16]
 803317e:	f140 8099 	bpl.w	80332b4 <__ssvfscanf_r+0xae0>
 8033182:	2d00      	cmp	r5, #0
 8033184:	f43f ace4 	beq.w	8032b50 <__ssvfscanf_r+0x37c>
 8033188:	2080      	movs	r0, #128	@ 0x80
 803318a:	f7fc f9af 	bl	802f4ec <malloc>
 803318e:	4606      	mov	r6, r0
 8033190:	2800      	cmp	r0, #0
 8033192:	f43f acda 	beq.w	8032b4a <__ssvfscanf_r+0x376>
 8033196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8033198:	6028      	str	r0, [r5, #0]
 803319a:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 803319e:	889b      	ldrh	r3, [r3, #4]
 80331a0:	4599      	cmp	r9, r3
 80331a2:	d314      	bcc.n	80331ce <__ssvfscanf_r+0x9fa>
 80331a4:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 80331a8:	4293      	cmp	r3, r2
 80331aa:	f200 847b 	bhi.w	8033aa4 <__ssvfscanf_r+0x12d0>
 80331ae:	3308      	adds	r3, #8
 80331b0:	fa1f fa83 	uxth.w	sl, r3
 80331b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80331b6:	ea4f 018a 	mov.w	r1, sl, lsl #2
 80331ba:	6818      	ldr	r0, [r3, #0]
 80331bc:	f001 f920 	bl	8034400 <realloc>
 80331c0:	2800      	cmp	r0, #0
 80331c2:	f000 846f 	beq.w	8033aa4 <__ssvfscanf_r+0x12d0>
 80331c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80331c8:	6018      	str	r0, [r3, #0]
 80331ca:	f8a3 a004 	strh.w	sl, [r3, #4]
 80331ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80331d0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80331d2:	681b      	ldr	r3, [r3, #0]
 80331d4:	f109 0201 	add.w	r2, r9, #1
 80331d8:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 80331dc:	46aa      	mov	sl, r5
 80331de:	80ca      	strh	r2, [r1, #6]
 80331e0:	4635      	mov	r5, r6
 80331e2:	f04f 0920 	mov.w	r9, #32
 80331e6:	2300      	movs	r3, #0
 80331e8:	6822      	ldr	r2, [r4, #0]
 80331ea:	49a7      	ldr	r1, [pc, #668]	@ (8033488 <__ssvfscanf_r+0xcb4>)
 80331ec:	7812      	ldrb	r2, [r2, #0]
 80331ee:	5c8a      	ldrb	r2, [r1, r2]
 80331f0:	0710      	lsls	r0, r2, #28
 80331f2:	d43c      	bmi.n	803326e <__ssvfscanf_r+0xa9a>
 80331f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80331f6:	2a00      	cmp	r2, #0
 80331f8:	d039      	beq.n	803326e <__ssvfscanf_r+0xa9a>
 80331fa:	60fb      	str	r3, [r7, #12]
 80331fc:	f7fb f8b8 	bl	802e370 <__locale_mb_cur_max>
 8033200:	68fb      	ldr	r3, [r7, #12]
 8033202:	4298      	cmp	r0, r3
 8033204:	f43f aba8 	beq.w	8032958 <__ssvfscanf_r+0x184>
 8033208:	6822      	ldr	r2, [r4, #0]
 803320a:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 803320e:	f812 0b01 	ldrb.w	r0, [r2], #1
 8033212:	54c8      	strb	r0, [r1, r3]
 8033214:	f103 0b01 	add.w	fp, r3, #1
 8033218:	6863      	ldr	r3, [r4, #4]
 803321a:	3b01      	subs	r3, #1
 803321c:	e9c4 2300 	strd	r2, r3, [r4]
 8033220:	6a3b      	ldr	r3, [r7, #32]
 8033222:	2b03      	cmp	r3, #3
 8033224:	d102      	bne.n	803322c <__ssvfscanf_r+0xa58>
 8033226:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8033228:	2b04      	cmp	r3, #4
 803322a:	d005      	beq.n	8033238 <__ssvfscanf_r+0xa64>
 803322c:	2208      	movs	r2, #8
 803322e:	2100      	movs	r1, #0
 8033230:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8033234:	f7f9 ff14 	bl	802d060 <memset>
 8033238:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 803323c:	9300      	str	r3, [sp, #0]
 803323e:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8033242:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033244:	465b      	mov	r3, fp
 8033246:	4629      	mov	r1, r5
 8033248:	f002 fc94 	bl	8035b74 <_mbrtowc_r>
 803324c:	1c42      	adds	r2, r0, #1
 803324e:	6238      	str	r0, [r7, #32]
 8033250:	f43f ab82 	beq.w	8032958 <__ssvfscanf_r+0x184>
 8033254:	bb90      	cbnz	r0, 80332bc <__ssvfscanf_r+0xae8>
 8033256:	6028      	str	r0, [r5, #0]
 8033258:	6828      	ldr	r0, [r5, #0]
 803325a:	f002 fca5 	bl	8035ba8 <iswspace>
 803325e:	4603      	mov	r3, r0
 8033260:	2800      	cmp	r0, #0
 8033262:	d047      	beq.n	80332f4 <__ssvfscanf_r+0xb20>
 8033264:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8033268:	f1bb 0f00 	cmp.w	fp, #0
 803326c:	d139      	bne.n	80332e2 <__ssvfscanf_r+0xb0e>
 803326e:	f1b8 0f00 	cmp.w	r8, #0
 8033272:	d114      	bne.n	803329e <__ssvfscanf_r+0xaca>
 8033274:	f8c5 8000 	str.w	r8, [r5]
 8033278:	f1ba 0f00 	cmp.w	sl, #0
 803327c:	d00c      	beq.n	8033298 <__ssvfscanf_r+0xac4>
 803327e:	1ba9      	subs	r1, r5, r6
 8033280:	108b      	asrs	r3, r1, #2
 8033282:	3301      	adds	r3, #1
 8033284:	4599      	cmp	r9, r3
 8033286:	d907      	bls.n	8033298 <__ssvfscanf_r+0xac4>
 8033288:	f8da 0000 	ldr.w	r0, [sl]
 803328c:	3104      	adds	r1, #4
 803328e:	f001 f8b7 	bl	8034400 <realloc>
 8033292:	b108      	cbz	r0, 8033298 <__ssvfscanf_r+0xac4>
 8033294:	f8ca 0000 	str.w	r0, [sl]
 8033298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803329a:	3301      	adds	r3, #1
 803329c:	627b      	str	r3, [r7, #36]	@ 0x24
 803329e:	693d      	ldr	r5, [r7, #16]
 80332a0:	f7ff bab3 	b.w	803280a <__ssvfscanf_r+0x36>
 80332a4:	f04f 0900 	mov.w	r9, #0
 80332a8:	613d      	str	r5, [r7, #16]
 80332aa:	464e      	mov	r6, r9
 80332ac:	46ca      	mov	sl, r9
 80332ae:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 80332b2:	e798      	b.n	80331e6 <__ssvfscanf_r+0xa12>
 80332b4:	46c1      	mov	r9, r8
 80332b6:	4646      	mov	r6, r8
 80332b8:	46c2      	mov	sl, r8
 80332ba:	e794      	b.n	80331e6 <__ssvfscanf_r+0xa12>
 80332bc:	6a3b      	ldr	r3, [r7, #32]
 80332be:	3302      	adds	r3, #2
 80332c0:	d1ca      	bne.n	8033258 <__ssvfscanf_r+0xa84>
 80332c2:	465b      	mov	r3, fp
 80332c4:	6862      	ldr	r2, [r4, #4]
 80332c6:	2a00      	cmp	r2, #0
 80332c8:	dc8e      	bgt.n	80331e8 <__ssvfscanf_r+0xa14>
 80332ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80332cc:	60fb      	str	r3, [r7, #12]
 80332ce:	4621      	mov	r1, r4
 80332d0:	f7fd f8cb 	bl	803046a <__ssrefill_r>
 80332d4:	68fb      	ldr	r3, [r7, #12]
 80332d6:	2800      	cmp	r0, #0
 80332d8:	d086      	beq.n	80331e8 <__ssvfscanf_r+0xa14>
 80332da:	2b00      	cmp	r3, #0
 80332dc:	f47f ab3c 	bne.w	8032958 <__ssvfscanf_r+0x184>
 80332e0:	e7c5      	b.n	803326e <__ssvfscanf_r+0xa9a>
 80332e2:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80332e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80332e8:	f813 100b 	ldrb.w	r1, [r3, fp]
 80332ec:	4622      	mov	r2, r4
 80332ee:	f7fd f881 	bl	80303f4 <_sungetc_r>
 80332f2:	e7b7      	b.n	8033264 <__ssvfscanf_r+0xa90>
 80332f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80332f6:	445a      	add	r2, fp
 80332f8:	633a      	str	r2, [r7, #48]	@ 0x30
 80332fa:	6a3a      	ldr	r2, [r7, #32]
 80332fc:	2a03      	cmp	r2, #3
 80332fe:	d102      	bne.n	8033306 <__ssvfscanf_r+0xb32>
 8033300:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8033302:	2a04      	cmp	r2, #4
 8033304:	d002      	beq.n	803330c <__ssvfscanf_r+0xb38>
 8033306:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8033308:	3a01      	subs	r2, #1
 803330a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 803330c:	f1b8 0f00 	cmp.w	r8, #0
 8033310:	d1d8      	bne.n	80332c4 <__ssvfscanf_r+0xaf0>
 8033312:	3504      	adds	r5, #4
 8033314:	f1ba 0f00 	cmp.w	sl, #0
 8033318:	d015      	beq.n	8033346 <__ssvfscanf_r+0xb72>
 803331a:	eba5 0b06 	sub.w	fp, r5, r6
 803331e:	ebb9 0fab 	cmp.w	r9, fp, asr #2
 8033322:	d80e      	bhi.n	8033342 <__ssvfscanf_r+0xb6e>
 8033324:	4630      	mov	r0, r6
 8033326:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 803332a:	f001 f869 	bl	8034400 <realloc>
 803332e:	4606      	mov	r6, r0
 8033330:	2800      	cmp	r0, #0
 8033332:	f43f ac0a 	beq.w	8032b4a <__ssvfscanf_r+0x376>
 8033336:	eb00 050b 	add.w	r5, r0, fp
 803333a:	f8ca 0000 	str.w	r0, [sl]
 803333e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8033342:	4643      	mov	r3, r8
 8033344:	e7be      	b.n	80332c4 <__ssvfscanf_r+0xaf0>
 8033346:	4653      	mov	r3, sl
 8033348:	e7bc      	b.n	80332c4 <__ssvfscanf_r+0xaf0>
 803334a:	f1b8 0f00 	cmp.w	r8, #0
 803334e:	d01a      	beq.n	8033386 <__ssvfscanf_r+0xbb2>
 8033350:	4e4d      	ldr	r6, [pc, #308]	@ (8033488 <__ssvfscanf_r+0xcb4>)
 8033352:	6823      	ldr	r3, [r4, #0]
 8033354:	781a      	ldrb	r2, [r3, #0]
 8033356:	5cb2      	ldrb	r2, [r6, r2]
 8033358:	0711      	lsls	r1, r2, #28
 803335a:	d411      	bmi.n	8033380 <__ssvfscanf_r+0xbac>
 803335c:	3301      	adds	r3, #1
 803335e:	6862      	ldr	r2, [r4, #4]
 8033360:	6023      	str	r3, [r4, #0]
 8033362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8033364:	f109 0901 	add.w	r9, r9, #1
 8033368:	3a01      	subs	r2, #1
 803336a:	454b      	cmp	r3, r9
 803336c:	6062      	str	r2, [r4, #4]
 803336e:	d007      	beq.n	8033380 <__ssvfscanf_r+0xbac>
 8033370:	2a00      	cmp	r2, #0
 8033372:	dcee      	bgt.n	8033352 <__ssvfscanf_r+0xb7e>
 8033374:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033376:	4621      	mov	r1, r4
 8033378:	f7fd f877 	bl	803046a <__ssrefill_r>
 803337c:	2800      	cmp	r0, #0
 803337e:	d0e8      	beq.n	8033352 <__ssvfscanf_r+0xb7e>
 8033380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8033382:	444b      	add	r3, r9
 8033384:	e4d3      	b.n	8032d2e <__ssvfscanf_r+0x55a>
 8033386:	46a8      	mov	r8, r5
 8033388:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 803338c:	f858 5b04 	ldr.w	r5, [r8], #4
 8033390:	d077      	beq.n	8033482 <__ssvfscanf_r+0xcae>
 8033392:	2d00      	cmp	r5, #0
 8033394:	f43f ab14 	beq.w	80329c0 <__ssvfscanf_r+0x1ec>
 8033398:	2020      	movs	r0, #32
 803339a:	f7fc f8a7 	bl	802f4ec <malloc>
 803339e:	4681      	mov	r9, r0
 80333a0:	2800      	cmp	r0, #0
 80333a2:	f43f aade 	beq.w	8032962 <__ssvfscanf_r+0x18e>
 80333a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80333a8:	6028      	str	r0, [r5, #0]
 80333aa:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 80333ae:	889e      	ldrh	r6, [r3, #4]
 80333b0:	45b2      	cmp	sl, r6
 80333b2:	d311      	bcc.n	80333d8 <__ssvfscanf_r+0xc04>
 80333b4:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 80333b8:	429e      	cmp	r6, r3
 80333ba:	f200 8373 	bhi.w	8033aa4 <__ssvfscanf_r+0x12d0>
 80333be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80333c0:	3608      	adds	r6, #8
 80333c2:	b2b6      	uxth	r6, r6
 80333c4:	6818      	ldr	r0, [r3, #0]
 80333c6:	00b1      	lsls	r1, r6, #2
 80333c8:	f001 f81a 	bl	8034400 <realloc>
 80333cc:	2800      	cmp	r0, #0
 80333ce:	f000 8369 	beq.w	8033aa4 <__ssvfscanf_r+0x12d0>
 80333d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80333d4:	6018      	str	r0, [r3, #0]
 80333d6:	809e      	strh	r6, [r3, #4]
 80333d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80333da:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80333dc:	681b      	ldr	r3, [r3, #0]
 80333de:	f10a 0201 	add.w	r2, sl, #1
 80333e2:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 80333e6:	80ca      	strh	r2, [r1, #6]
 80333e8:	46aa      	mov	sl, r5
 80333ea:	2620      	movs	r6, #32
 80333ec:	464d      	mov	r5, r9
 80333ee:	46a9      	mov	r9, r5
 80333f0:	6823      	ldr	r3, [r4, #0]
 80333f2:	4925      	ldr	r1, [pc, #148]	@ (8033488 <__ssvfscanf_r+0xcb4>)
 80333f4:	781a      	ldrb	r2, [r3, #0]
 80333f6:	5c8a      	ldrb	r2, [r1, r2]
 80333f8:	0712      	lsls	r2, r2, #28
 80333fa:	d428      	bmi.n	803344e <__ssvfscanf_r+0xc7a>
 80333fc:	6862      	ldr	r2, [r4, #4]
 80333fe:	3a01      	subs	r2, #1
 8033400:	6062      	str	r2, [r4, #4]
 8033402:	1c5a      	adds	r2, r3, #1
 8033404:	6022      	str	r2, [r4, #0]
 8033406:	781b      	ldrb	r3, [r3, #0]
 8033408:	f805 3b01 	strb.w	r3, [r5], #1
 803340c:	f1ba 0f00 	cmp.w	sl, #0
 8033410:	d010      	beq.n	8033434 <__ssvfscanf_r+0xc60>
 8033412:	eba5 0b09 	sub.w	fp, r5, r9
 8033416:	45b3      	cmp	fp, r6
 8033418:	d30c      	bcc.n	8033434 <__ssvfscanf_r+0xc60>
 803341a:	0076      	lsls	r6, r6, #1
 803341c:	4648      	mov	r0, r9
 803341e:	4631      	mov	r1, r6
 8033420:	f000 ffee 	bl	8034400 <realloc>
 8033424:	4681      	mov	r9, r0
 8033426:	2800      	cmp	r0, #0
 8033428:	f43f aa9b 	beq.w	8032962 <__ssvfscanf_r+0x18e>
 803342c:	eb00 050b 	add.w	r5, r0, fp
 8033430:	f8ca 0000 	str.w	r0, [sl]
 8033434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8033436:	3b01      	subs	r3, #1
 8033438:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803343a:	d008      	beq.n	803344e <__ssvfscanf_r+0xc7a>
 803343c:	6863      	ldr	r3, [r4, #4]
 803343e:	2b00      	cmp	r3, #0
 8033440:	dcd6      	bgt.n	80333f0 <__ssvfscanf_r+0xc1c>
 8033442:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033444:	4621      	mov	r1, r4
 8033446:	f7fd f810 	bl	803046a <__ssrefill_r>
 803344a:	2800      	cmp	r0, #0
 803344c:	d0d0      	beq.n	80333f0 <__ssvfscanf_r+0xc1c>
 803344e:	2300      	movs	r3, #0
 8033450:	702b      	strb	r3, [r5, #0]
 8033452:	eba5 0509 	sub.w	r5, r5, r9
 8033456:	f1ba 0f00 	cmp.w	sl, #0
 803345a:	d009      	beq.n	8033470 <__ssvfscanf_r+0xc9c>
 803345c:	1c69      	adds	r1, r5, #1
 803345e:	428e      	cmp	r6, r1
 8033460:	d906      	bls.n	8033470 <__ssvfscanf_r+0xc9c>
 8033462:	f8da 0000 	ldr.w	r0, [sl]
 8033466:	f000 ffcb 	bl	8034400 <realloc>
 803346a:	b108      	cbz	r0, 8033470 <__ssvfscanf_r+0xc9c>
 803346c:	f8ca 0000 	str.w	r0, [sl]
 8033470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8033472:	442b      	add	r3, r5
 8033474:	633b      	str	r3, [r7, #48]	@ 0x30
 8033476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8033478:	3301      	adds	r3, #1
 803347a:	627b      	str	r3, [r7, #36]	@ 0x24
 803347c:	4645      	mov	r5, r8
 803347e:	f7ff b9c4 	b.w	803280a <__ssvfscanf_r+0x36>
 8033482:	46b2      	mov	sl, r6
 8033484:	e7b3      	b.n	80333ee <__ssvfscanf_r+0xc1a>
 8033486:	bf00      	nop
 8033488:	0803c7f9 	.word	0x0803c7f9
 803348c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803348e:	3b01      	subs	r3, #1
 8033490:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 8033494:	bf81      	itttt	hi
 8033496:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 8033498:	f46f 7cae 	mvnhi.w	ip, #348	@ 0x15c
 803349c:	eb03 090c 	addhi.w	r9, r3, ip
 80334a0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80334a4:	bf8c      	ite	hi
 80334a6:	62fb      	strhi	r3, [r7, #44]	@ 0x2c
 80334a8:	f04f 0900 	movls.w	r9, #0
 80334ac:	f446 6b58 	orr.w	fp, r6, #3456	@ 0xd80
 80334b0:	f04f 0a00 	mov.w	sl, #0
 80334b4:	f507 78a8 	add.w	r8, r7, #336	@ 0x150
 80334b8:	6822      	ldr	r2, [r4, #0]
 80334ba:	7813      	ldrb	r3, [r2, #0]
 80334bc:	2b39      	cmp	r3, #57	@ 0x39
 80334be:	d80f      	bhi.n	80334e0 <__ssvfscanf_r+0xd0c>
 80334c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80334c2:	d91a      	bls.n	80334fa <__ssvfscanf_r+0xd26>
 80334c4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80334c8:	290e      	cmp	r1, #14
 80334ca:	d816      	bhi.n	80334fa <__ssvfscanf_r+0xd26>
 80334cc:	e8df f001 	tbb	[pc, r1]
 80334d0:	15781578 	.word	0x15781578
 80334d4:	68683f15 	.word	0x68683f15
 80334d8:	68686868 	.word	0x68686868
 80334dc:	7068      	.short	0x7068
 80334de:	70          	.byte	0x70
 80334df:	00          	.byte	0x00
 80334e0:	2b66      	cmp	r3, #102	@ 0x66
 80334e2:	d832      	bhi.n	803354a <__ssvfscanf_r+0xd76>
 80334e4:	2b60      	cmp	r3, #96	@ 0x60
 80334e6:	d803      	bhi.n	80334f0 <__ssvfscanf_r+0xd1c>
 80334e8:	2b46      	cmp	r3, #70	@ 0x46
 80334ea:	d804      	bhi.n	80334f6 <__ssvfscanf_r+0xd22>
 80334ec:	2b40      	cmp	r3, #64	@ 0x40
 80334ee:	d904      	bls.n	80334fa <__ssvfscanf_r+0xd26>
 80334f0:	69f9      	ldr	r1, [r7, #28]
 80334f2:	290a      	cmp	r1, #10
 80334f4:	e062      	b.n	80335bc <__ssvfscanf_r+0xde8>
 80334f6:	2b58      	cmp	r3, #88	@ 0x58
 80334f8:	d068      	beq.n	80335cc <__ssvfscanf_r+0xdf8>
 80334fa:	f41b 7f80 	tst.w	fp, #256	@ 0x100
 80334fe:	d011      	beq.n	8033524 <__ssvfscanf_r+0xd50>
 8033500:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8033504:	4598      	cmp	r8, r3
 8033506:	d908      	bls.n	803351a <__ssvfscanf_r+0xd46>
 8033508:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 803350c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803350e:	4622      	mov	r2, r4
 8033510:	f7fc ff70 	bl	80303f4 <_sungetc_r>
 8033514:	f108 39ff 	add.w	r9, r8, #4294967295	@ 0xffffffff
 8033518:	46c8      	mov	r8, r9
 803351a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 803351e:	4598      	cmp	r8, r3
 8033520:	f43f aa4e 	beq.w	80329c0 <__ssvfscanf_r+0x1ec>
 8033524:	f01b 0210 	ands.w	r2, fp, #16
 8033528:	d16c      	bne.n	8033604 <__ssvfscanf_r+0xe30>
 803352a:	69fb      	ldr	r3, [r7, #28]
 803352c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803352e:	69be      	ldr	r6, [r7, #24]
 8033530:	f888 2000 	strb.w	r2, [r8]
 8033534:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8033538:	47b0      	blx	r6
 803353a:	f01b 0f20 	tst.w	fp, #32
 803353e:	f105 0904 	add.w	r9, r5, #4
 8033542:	d056      	beq.n	80335f2 <__ssvfscanf_r+0xe1e>
 8033544:	682b      	ldr	r3, [r5, #0]
 8033546:	6018      	str	r0, [r3, #0]
 8033548:	e058      	b.n	80335fc <__ssvfscanf_r+0xe28>
 803354a:	2b78      	cmp	r3, #120	@ 0x78
 803354c:	e7d4      	b.n	80334f8 <__ssvfscanf_r+0xd24>
 803354e:	f41b 6f00 	tst.w	fp, #2048	@ 0x800
 8033552:	d00a      	beq.n	803356a <__ssvfscanf_r+0xd96>
 8033554:	69f9      	ldr	r1, [r7, #28]
 8033556:	b919      	cbnz	r1, 8033560 <__ssvfscanf_r+0xd8c>
 8033558:	2108      	movs	r1, #8
 803355a:	f44b 7b00 	orr.w	fp, fp, #512	@ 0x200
 803355e:	61f9      	str	r1, [r7, #28]
 8033560:	f41b 6f80 	tst.w	fp, #1024	@ 0x400
 8033564:	d004      	beq.n	8033570 <__ssvfscanf_r+0xd9c>
 8033566:	f42b 6bb0 	bic.w	fp, fp, #1408	@ 0x580
 803356a:	f808 3b01 	strb.w	r3, [r8], #1
 803356e:	e00b      	b.n	8033588 <__ssvfscanf_r+0xdb4>
 8033570:	f42b 7b60 	bic.w	fp, fp, #896	@ 0x380
 8033574:	f1b9 0f00 	cmp.w	r9, #0
 8033578:	d004      	beq.n	8033584 <__ssvfscanf_r+0xdb0>
 803357a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803357c:	3301      	adds	r3, #1
 803357e:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8033582:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8033584:	f10a 0a01 	add.w	sl, sl, #1
 8033588:	6863      	ldr	r3, [r4, #4]
 803358a:	3b01      	subs	r3, #1
 803358c:	2b00      	cmp	r3, #0
 803358e:	6063      	str	r3, [r4, #4]
 8033590:	dd28      	ble.n	80335e4 <__ssvfscanf_r+0xe10>
 8033592:	3201      	adds	r2, #1
 8033594:	6022      	str	r2, [r4, #0]
 8033596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8033598:	3b01      	subs	r3, #1
 803359a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803359c:	d18c      	bne.n	80334b8 <__ssvfscanf_r+0xce4>
 803359e:	e7ac      	b.n	80334fa <__ssvfscanf_r+0xd26>
 80335a0:	69f8      	ldr	r0, [r7, #28]
 80335a2:	499b      	ldr	r1, [pc, #620]	@ (8033810 <__ssvfscanf_r+0x103c>)
 80335a4:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 80335a8:	61f9      	str	r1, [r7, #28]
 80335aa:	f42b 6b38 	bic.w	fp, fp, #2944	@ 0xb80
 80335ae:	e7dc      	b.n	803356a <__ssvfscanf_r+0xd96>
 80335b0:	69f8      	ldr	r0, [r7, #28]
 80335b2:	4997      	ldr	r1, [pc, #604]	@ (8033810 <__ssvfscanf_r+0x103c>)
 80335b4:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 80335b8:	61f9      	str	r1, [r7, #28]
 80335ba:	2908      	cmp	r1, #8
 80335bc:	dcf5      	bgt.n	80335aa <__ssvfscanf_r+0xdd6>
 80335be:	e79c      	b.n	80334fa <__ssvfscanf_r+0xd26>
 80335c0:	f01b 0f80 	tst.w	fp, #128	@ 0x80
 80335c4:	d099      	beq.n	80334fa <__ssvfscanf_r+0xd26>
 80335c6:	f02b 0b80 	bic.w	fp, fp, #128	@ 0x80
 80335ca:	e7ce      	b.n	803356a <__ssvfscanf_r+0xd96>
 80335cc:	f40b 61c0 	and.w	r1, fp, #1536	@ 0x600
 80335d0:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80335d4:	d191      	bne.n	80334fa <__ssvfscanf_r+0xd26>
 80335d6:	f42b 7600 	bic.w	r6, fp, #512	@ 0x200
 80335da:	2110      	movs	r1, #16
 80335dc:	f446 6ba0 	orr.w	fp, r6, #1280	@ 0x500
 80335e0:	61f9      	str	r1, [r7, #28]
 80335e2:	e7c2      	b.n	803356a <__ssvfscanf_r+0xd96>
 80335e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80335e6:	4621      	mov	r1, r4
 80335e8:	f7fc ff3f 	bl	803046a <__ssrefill_r>
 80335ec:	2800      	cmp	r0, #0
 80335ee:	d0d2      	beq.n	8033596 <__ssvfscanf_r+0xdc2>
 80335f0:	e783      	b.n	80334fa <__ssvfscanf_r+0xd26>
 80335f2:	f01b 0f08 	tst.w	fp, #8
 80335f6:	d00b      	beq.n	8033610 <__ssvfscanf_r+0xe3c>
 80335f8:	682b      	ldr	r3, [r5, #0]
 80335fa:	7018      	strb	r0, [r3, #0]
 80335fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80335fe:	3301      	adds	r3, #1
 8033600:	627b      	str	r3, [r7, #36]	@ 0x24
 8033602:	464d      	mov	r5, r9
 8033604:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8033608:	eba8 0803 	sub.w	r8, r8, r3
 803360c:	44d0      	add	r8, sl
 803360e:	e516      	b.n	803303e <__ssvfscanf_r+0x86a>
 8033610:	f01b 0f04 	tst.w	fp, #4
 8033614:	d002      	beq.n	803361c <__ssvfscanf_r+0xe48>
 8033616:	682b      	ldr	r3, [r5, #0]
 8033618:	8018      	strh	r0, [r3, #0]
 803361a:	e7ef      	b.n	80335fc <__ssvfscanf_r+0xe28>
 803361c:	f01b 0201 	ands.w	r2, fp, #1
 8033620:	d190      	bne.n	8033544 <__ssvfscanf_r+0xd70>
 8033622:	f01b 0f02 	tst.w	fp, #2
 8033626:	d08d      	beq.n	8033544 <__ssvfscanf_r+0xd70>
 8033628:	4b7a      	ldr	r3, [pc, #488]	@ (8033814 <__ssvfscanf_r+0x1040>)
 803362a:	69b9      	ldr	r1, [r7, #24]
 803362c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803362e:	4299      	cmp	r1, r3
 8033630:	69fb      	ldr	r3, [r7, #28]
 8033632:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8033636:	d105      	bne.n	8033644 <__ssvfscanf_r+0xe70>
 8033638:	f002 fa9a 	bl	8035b70 <_strtoull_r>
 803363c:	682b      	ldr	r3, [r5, #0]
 803363e:	e9c3 0100 	strd	r0, r1, [r3]
 8033642:	e7db      	b.n	80335fc <__ssvfscanf_r+0xe28>
 8033644:	f002 f9e8 	bl	8035a18 <_strtoll_r>
 8033648:	e7f8      	b.n	803363c <__ssvfscanf_r+0xe68>
 803364a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803364c:	f7fa fe96 	bl	802e37c <_localeconv_r>
 8033650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8033652:	6802      	ldr	r2, [r0, #0]
 8033654:	3b01      	subs	r3, #1
 8033656:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 803365a:	f04f 0800 	mov.w	r8, #0
 803365e:	bf88      	it	hi
 8033660:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 8033662:	f8c7 8010 	str.w	r8, [r7, #16]
 8033666:	e9c7 8802 	strd	r8, r8, [r7, #8]
 803366a:	bf81      	itttt	hi
 803366c:	f46f 70ae 	mvnhi.w	r0, #348	@ 0x15c
 8033670:	f240 115d 	movwhi	r1, #349	@ 0x15d
 8033674:	181b      	addhi	r3, r3, r0
 8033676:	62f9      	strhi	r1, [r7, #44]	@ 0x2c
 8033678:	bf98      	it	ls
 803367a:	2300      	movls	r3, #0
 803367c:	f446 66f0 	orr.w	r6, r6, #1920	@ 0x780
 8033680:	46c3      	mov	fp, r8
 8033682:	46c2      	mov	sl, r8
 8033684:	f507 79a8 	add.w	r9, r7, #336	@ 0x150
 8033688:	6821      	ldr	r1, [r4, #0]
 803368a:	6079      	str	r1, [r7, #4]
 803368c:	7808      	ldrb	r0, [r1, #0]
 803368e:	f1a0 0c2b 	sub.w	ip, r0, #43	@ 0x2b
 8033692:	f1bc 0f4e 	cmp.w	ip, #78	@ 0x4e
 8033696:	f200 8123 	bhi.w	80338e0 <__ssvfscanf_r+0x110c>
 803369a:	e8df f01c 	tbh	[pc, ip, lsl #1]
 803369e:	0089      	.short	0x0089
 80336a0:	00890121 	.word	0x00890121
 80336a4:	01210121 	.word	0x01210121
 80336a8:	006f004f 	.word	0x006f004f
 80336ac:	006f006f 	.word	0x006f006f
 80336b0:	006f006f 	.word	0x006f006f
 80336b4:	006f006f 	.word	0x006f006f
 80336b8:	006f006f 	.word	0x006f006f
 80336bc:	01210121 	.word	0x01210121
 80336c0:	01210121 	.word	0x01210121
 80336c4:	01210121 	.word	0x01210121
 80336c8:	00af0121 	.word	0x00af0121
 80336cc:	006d006d 	.word	0x006d006d
 80336d0:	011e006d 	.word	0x011e006d
 80336d4:	012100ed 	.word	0x012100ed
 80336d8:	00d60121 	.word	0x00d60121
 80336dc:	01210121 	.word	0x01210121
 80336e0:	01210121 	.word	0x01210121
 80336e4:	01210090 	.word	0x01210090
 80336e8:	01210104 	.word	0x01210104
 80336ec:	01210121 	.word	0x01210121
 80336f0:	012100f8 	.word	0x012100f8
 80336f4:	01210121 	.word	0x01210121
 80336f8:	00fe0073 	.word	0x00fe0073
 80336fc:	01210121 	.word	0x01210121
 8033700:	01210121 	.word	0x01210121
 8033704:	01210121 	.word	0x01210121
 8033708:	00af0121 	.word	0x00af0121
 803370c:	006d006d 	.word	0x006d006d
 8033710:	011e006d 	.word	0x011e006d
 8033714:	012100ed 	.word	0x012100ed
 8033718:	00d60121 	.word	0x00d60121
 803371c:	01210121 	.word	0x01210121
 8033720:	01210121 	.word	0x01210121
 8033724:	01210090 	.word	0x01210090
 8033728:	01210104 	.word	0x01210104
 803372c:	01210121 	.word	0x01210121
 8033730:	012100f8 	.word	0x012100f8
 8033734:	01210121 	.word	0x01210121
 8033738:	00fe0073 	.word	0x00fe0073
 803373c:	05f1      	lsls	r1, r6, #23
 803373e:	d51d      	bpl.n	803377c <__ssvfscanf_r+0xfa8>
 8033740:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 8033744:	f10a 0a01 	add.w	sl, sl, #1
 8033748:	b11b      	cbz	r3, 8033752 <__ssvfscanf_r+0xf7e>
 803374a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 803374c:	3001      	adds	r0, #1
 803374e:	3b01      	subs	r3, #1
 8033750:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8033752:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8033754:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8033756:	3001      	adds	r0, #1
 8033758:	6338      	str	r0, [r7, #48]	@ 0x30
 803375a:	6860      	ldr	r0, [r4, #4]
 803375c:	3801      	subs	r0, #1
 803375e:	3901      	subs	r1, #1
 8033760:	2800      	cmp	r0, #0
 8033762:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8033764:	6060      	str	r0, [r4, #4]
 8033766:	f340 80cc 	ble.w	8033902 <__ssvfscanf_r+0x112e>
 803376a:	6879      	ldr	r1, [r7, #4]
 803376c:	3101      	adds	r1, #1
 803376e:	6021      	str	r1, [r4, #0]
 8033770:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8033772:	2900      	cmp	r1, #0
 8033774:	d188      	bne.n	8033688 <__ssvfscanf_r+0xeb4>
 8033776:	e052      	b.n	803381e <__ssvfscanf_r+0x104a>
 8033778:	0531      	lsls	r1, r6, #20
 803377a:	d550      	bpl.n	803381e <__ssvfscanf_r+0x104a>
 803377c:	eb1b 0c08 	adds.w	ip, fp, r8
 8033780:	d041      	beq.n	8033806 <__ssvfscanf_r+0x1032>
 8033782:	e04c      	b.n	803381e <__ssvfscanf_r+0x104a>
 8033784:	f406 6c18 	and.w	ip, r6, #2432	@ 0x980
 8033788:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 803378c:	d147      	bne.n	803381e <__ssvfscanf_r+0x104a>
 803378e:	f1ba 0f01 	cmp.w	sl, #1
 8033792:	d144      	bne.n	803381e <__ssvfscanf_r+0x104a>
 8033794:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8033796:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 803379a:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 803379e:	3901      	subs	r1, #1
 80337a0:	f809 cb01 	strb.w	ip, [r9], #1
 80337a4:	f446 6600 	orr.w	r6, r6, #2048	@ 0x800
 80337a8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80337aa:	f04f 0a00 	mov.w	sl, #0
 80337ae:	e003      	b.n	80337b8 <__ssvfscanf_r+0xfe4>
 80337b0:	0631      	lsls	r1, r6, #24
 80337b2:	d534      	bpl.n	803381e <__ssvfscanf_r+0x104a>
 80337b4:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 80337b8:	f809 0b01 	strb.w	r0, [r9], #1
 80337bc:	e7c9      	b.n	8033752 <__ssvfscanf_r+0xf7e>
 80337be:	f1bb 0f00 	cmp.w	fp, #0
 80337c2:	d10c      	bne.n	80337de <__ssvfscanf_r+0x100a>
 80337c4:	f1ba 0f00 	cmp.w	sl, #0
 80337c8:	d10d      	bne.n	80337e6 <__ssvfscanf_r+0x1012>
 80337ca:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 80337ce:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 80337d2:	d108      	bne.n	80337e6 <__ssvfscanf_r+0x1012>
 80337d4:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 80337d8:	f04f 0b01 	mov.w	fp, #1
 80337dc:	e7ec      	b.n	80337b8 <__ssvfscanf_r+0xfe4>
 80337de:	f1bb 0f02 	cmp.w	fp, #2
 80337e2:	f000 8088 	beq.w	80338f6 <__ssvfscanf_r+0x1122>
 80337e6:	f1b8 0f01 	cmp.w	r8, #1
 80337ea:	d002      	beq.n	80337f2 <__ssvfscanf_r+0x101e>
 80337ec:	f1b8 0f04 	cmp.w	r8, #4
 80337f0:	d115      	bne.n	803381e <__ssvfscanf_r+0x104a>
 80337f2:	f108 0801 	add.w	r8, r8, #1
 80337f6:	fa5f f888 	uxtb.w	r8, r8
 80337fa:	e7dd      	b.n	80337b8 <__ssvfscanf_r+0xfe4>
 80337fc:	0531      	lsls	r1, r6, #20
 80337fe:	d50b      	bpl.n	8033818 <__ssvfscanf_r+0x1044>
 8033800:	eb1b 0c08 	adds.w	ip, fp, r8
 8033804:	d108      	bne.n	8033818 <__ssvfscanf_r+0x1044>
 8033806:	f426 76c0 	bic.w	r6, r6, #384	@ 0x180
 803380a:	46e0      	mov	r8, ip
 803380c:	46e3      	mov	fp, ip
 803380e:	e7d3      	b.n	80337b8 <__ssvfscanf_r+0xfe4>
 8033810:	0803c9d8 	.word	0x0803c9d8
 8033814:	08035569 	.word	0x08035569
 8033818:	f1bb 0f01 	cmp.w	fp, #1
 803381c:	d06e      	beq.n	80338fc <__ssvfscanf_r+0x1128>
 803381e:	f1ba 0f00 	cmp.w	sl, #0
 8033822:	d001      	beq.n	8033828 <__ssvfscanf_r+0x1054>
 8033824:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 8033828:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 803382c:	f1bb 0f01 	cmp.w	fp, #1
 8033830:	d873      	bhi.n	803391a <__ssvfscanf_r+0x1146>
 8033832:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 8033836:	45a9      	cmp	r9, r5
 8033838:	f67f a8c2 	bls.w	80329c0 <__ssvfscanf_r+0x1ec>
 803383c:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 8033840:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033842:	4622      	mov	r2, r4
 8033844:	f7fc fdd6 	bl	80303f4 <_sungetc_r>
 8033848:	e7f5      	b.n	8033836 <__ssvfscanf_r+0x1062>
 803384a:	f1b8 0f00 	cmp.w	r8, #0
 803384e:	d10d      	bne.n	803386c <__ssvfscanf_r+0x1098>
 8033850:	f1ba 0f00 	cmp.w	sl, #0
 8033854:	d1e6      	bne.n	8033824 <__ssvfscanf_r+0x1050>
 8033856:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 803385a:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 803385e:	f040 8124 	bne.w	8033aaa <__ssvfscanf_r+0x12d6>
 8033862:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 8033866:	f04f 0801 	mov.w	r8, #1
 803386a:	e7a5      	b.n	80337b8 <__ssvfscanf_r+0xfe4>
 803386c:	f1b8 0f03 	cmp.w	r8, #3
 8033870:	d0bf      	beq.n	80337f2 <__ssvfscanf_r+0x101e>
 8033872:	f1b8 0f05 	cmp.w	r8, #5
 8033876:	e7bb      	b.n	80337f0 <__ssvfscanf_r+0x101c>
 8033878:	0531      	lsls	r1, r6, #20
 803387a:	d502      	bpl.n	8033882 <__ssvfscanf_r+0x10ae>
 803387c:	eb1b 0c08 	adds.w	ip, fp, r8
 8033880:	d0c1      	beq.n	8033806 <__ssvfscanf_r+0x1032>
 8033882:	f1b8 0f02 	cmp.w	r8, #2
 8033886:	d1ca      	bne.n	803381e <__ssvfscanf_r+0x104a>
 8033888:	f04f 0803 	mov.w	r8, #3
 803388c:	e794      	b.n	80337b8 <__ssvfscanf_r+0xfe4>
 803388e:	f1b8 0f06 	cmp.w	r8, #6
 8033892:	d1c4      	bne.n	803381e <__ssvfscanf_r+0x104a>
 8033894:	f04f 0807 	mov.w	r8, #7
 8033898:	e78e      	b.n	80337b8 <__ssvfscanf_r+0xfe4>
 803389a:	f1b8 0f07 	cmp.w	r8, #7
 803389e:	d1be      	bne.n	803381e <__ssvfscanf_r+0x104a>
 80338a0:	f04f 0808 	mov.w	r8, #8
 80338a4:	e788      	b.n	80337b8 <__ssvfscanf_r+0xfe4>
 80338a6:	0531      	lsls	r1, r6, #20
 80338a8:	d5b9      	bpl.n	803381e <__ssvfscanf_r+0x104a>
 80338aa:	f406 6ca0 	and.w	ip, r6, #1280	@ 0x500
 80338ae:	f5bc 6f80 	cmp.w	ip, #1024	@ 0x400
 80338b2:	d005      	beq.n	80338c0 <__ssvfscanf_r+0x10ec>
 80338b4:	0571      	lsls	r1, r6, #21
 80338b6:	d5b2      	bpl.n	803381e <__ssvfscanf_r+0x104a>
 80338b8:	f1ba 0f00 	cmp.w	sl, #0
 80338bc:	f000 80f5 	beq.w	8033aaa <__ssvfscanf_r+0x12d6>
 80338c0:	05b1      	lsls	r1, r6, #22
 80338c2:	bf58      	it	pl
 80338c4:	6939      	ldrpl	r1, [r7, #16]
 80338c6:	f426 6678 	bic.w	r6, r6, #3968	@ 0xf80
 80338ca:	bf5c      	itt	pl
 80338cc:	ebaa 0101 	subpl.w	r1, sl, r1
 80338d0:	e9c7 9102 	strdpl	r9, r1, [r7, #8]
 80338d4:	f446 76c0 	orr.w	r6, r6, #384	@ 0x180
 80338d8:	e767      	b.n	80337aa <__ssvfscanf_r+0xfd6>
 80338da:	0531      	lsls	r1, r6, #20
 80338dc:	d5e5      	bpl.n	80338aa <__ssvfscanf_r+0x10d6>
 80338de:	e74d      	b.n	803377c <__ssvfscanf_r+0xfa8>
 80338e0:	f892 c000 	ldrb.w	ip, [r2]
 80338e4:	4584      	cmp	ip, r0
 80338e6:	d19a      	bne.n	803381e <__ssvfscanf_r+0x104a>
 80338e8:	05b1      	lsls	r1, r6, #22
 80338ea:	d598      	bpl.n	803381e <__ssvfscanf_r+0x104a>
 80338ec:	f426 7620 	bic.w	r6, r6, #640	@ 0x280
 80338f0:	f8c7 a010 	str.w	sl, [r7, #16]
 80338f4:	e760      	b.n	80337b8 <__ssvfscanf_r+0xfe4>
 80338f6:	f04f 0b03 	mov.w	fp, #3
 80338fa:	e75d      	b.n	80337b8 <__ssvfscanf_r+0xfe4>
 80338fc:	f04f 0b02 	mov.w	fp, #2
 8033900:	e75a      	b.n	80337b8 <__ssvfscanf_r+0xfe4>
 8033902:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033904:	4621      	mov	r1, r4
 8033906:	e9c7 2300 	strd	r2, r3, [r7]
 803390a:	f7fc fdae 	bl	803046a <__ssrefill_r>
 803390e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8033912:	2800      	cmp	r0, #0
 8033914:	f43f af2c 	beq.w	8033770 <__ssvfscanf_r+0xf9c>
 8033918:	e781      	b.n	803381e <__ssvfscanf_r+0x104a>
 803391a:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 803391e:	2b06      	cmp	r3, #6
 8033920:	d827      	bhi.n	8033972 <__ssvfscanf_r+0x119e>
 8033922:	f1b8 0f02 	cmp.w	r8, #2
 8033926:	d834      	bhi.n	8033992 <__ssvfscanf_r+0x11be>
 8033928:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 803392c:	45a9      	cmp	r9, r5
 803392e:	f67f a847 	bls.w	80329c0 <__ssvfscanf_r+0x1ec>
 8033932:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 8033936:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033938:	4622      	mov	r2, r4
 803393a:	f7fc fd5b 	bl	80303f4 <_sungetc_r>
 803393e:	e7f5      	b.n	803392c <__ssvfscanf_r+0x1158>
 8033940:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8033944:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033946:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8033948:	4622      	mov	r2, r4
 803394a:	f7fc fd53 	bl	80303f4 <_sungetc_r>
 803394e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8033950:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8033954:	fa5f fb8b 	uxtb.w	fp, fp
 8033958:	f1bb 0f02 	cmp.w	fp, #2
 803395c:	d1f0      	bne.n	8033940 <__ssvfscanf_r+0x116c>
 803395e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8033960:	f1a8 0803 	sub.w	r8, r8, #3
 8033964:	fa5f f888 	uxtb.w	r8, r8
 8033968:	eba3 0308 	sub.w	r3, r3, r8
 803396c:	eba9 0908 	sub.w	r9, r9, r8
 8033970:	633b      	str	r3, [r7, #48]	@ 0x30
 8033972:	05f3      	lsls	r3, r6, #23
 8033974:	d52d      	bpl.n	80339d2 <__ssvfscanf_r+0x11fe>
 8033976:	0570      	lsls	r0, r6, #21
 8033978:	d50e      	bpl.n	8033998 <__ssvfscanf_r+0x11c4>
 803397a:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 803397e:	45a9      	cmp	r9, r5
 8033980:	f67f a81e 	bls.w	80329c0 <__ssvfscanf_r+0x1ec>
 8033984:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 8033988:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803398a:	4622      	mov	r2, r4
 803398c:	f7fc fd32 	bl	80303f4 <_sungetc_r>
 8033990:	e7f5      	b.n	803397e <__ssvfscanf_r+0x11aa>
 8033992:	46c3      	mov	fp, r8
 8033994:	464b      	mov	r3, r9
 8033996:	e7db      	b.n	8033950 <__ssvfscanf_r+0x117c>
 8033998:	f819 1c01 	ldrb.w	r1, [r9, #-1]
 803399c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 803399e:	2965      	cmp	r1, #101	@ 0x65
 80339a0:	f109 38ff 	add.w	r8, r9, #4294967295	@ 0xffffffff
 80339a4:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80339a8:	d00c      	beq.n	80339c4 <__ssvfscanf_r+0x11f0>
 80339aa:	2945      	cmp	r1, #69	@ 0x45
 80339ac:	d00a      	beq.n	80339c4 <__ssvfscanf_r+0x11f0>
 80339ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80339b0:	4622      	mov	r2, r4
 80339b2:	f7fc fd1f 	bl	80303f4 <_sungetc_r>
 80339b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80339b8:	f819 1c02 	ldrb.w	r1, [r9, #-2]
 80339bc:	f1a9 0802 	sub.w	r8, r9, #2
 80339c0:	f1a3 0b02 	sub.w	fp, r3, #2
 80339c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80339c6:	4622      	mov	r2, r4
 80339c8:	f7fc fd14 	bl	80303f4 <_sungetc_r>
 80339cc:	46c1      	mov	r9, r8
 80339ce:	f8c7 b030 	str.w	fp, [r7, #48]	@ 0x30
 80339d2:	f016 0210 	ands.w	r2, r6, #16
 80339d6:	f47e af18 	bne.w	803280a <__ssvfscanf_r+0x36>
 80339da:	f406 63c0 	and.w	r3, r6, #1536	@ 0x600
 80339de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80339e2:	f889 2000 	strb.w	r2, [r9]
 80339e6:	d119      	bne.n	8033a1c <__ssvfscanf_r+0x1248>
 80339e8:	693b      	ldr	r3, [r7, #16]
 80339ea:	4553      	cmp	r3, sl
 80339ec:	eba3 020a 	sub.w	r2, r3, sl
 80339f0:	d121      	bne.n	8033a36 <__ssvfscanf_r+0x1262>
 80339f2:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 80339f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80339f8:	2200      	movs	r2, #0
 80339fa:	f001 fd41 	bl	8035480 <_strtod_r>
 80339fe:	07f1      	lsls	r1, r6, #31
 8033a00:	ec59 8b10 	vmov	r8, r9, d0
 8033a04:	f105 0a04 	add.w	sl, r5, #4
 8033a08:	d520      	bpl.n	8033a4c <__ssvfscanf_r+0x1278>
 8033a0a:	682b      	ldr	r3, [r5, #0]
 8033a0c:	ed83 0b00 	vstr	d0, [r3]
 8033a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8033a12:	3301      	adds	r3, #1
 8033a14:	627b      	str	r3, [r7, #36]	@ 0x24
 8033a16:	4655      	mov	r5, sl
 8033a18:	f7fe bef7 	b.w	803280a <__ssvfscanf_r+0x36>
 8033a1c:	68fb      	ldr	r3, [r7, #12]
 8033a1e:	2b00      	cmp	r3, #0
 8033a20:	d0e7      	beq.n	80339f2 <__ssvfscanf_r+0x121e>
 8033a22:	68b9      	ldr	r1, [r7, #8]
 8033a24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033a26:	230a      	movs	r3, #10
 8033a28:	3101      	adds	r1, #1
 8033a2a:	f7f8 fe9d 	bl	802c768 <_strtol_r>
 8033a2e:	68fb      	ldr	r3, [r7, #12]
 8033a30:	f8d7 9008 	ldr.w	r9, [r7, #8]
 8033a34:	1ac2      	subs	r2, r0, r3
 8033a36:	f207 23a3 	addw	r3, r7, #675	@ 0x2a3
 8033a3a:	4599      	cmp	r9, r3
 8033a3c:	bf28      	it	cs
 8033a3e:	f207 29a2 	addwcs	r9, r7, #674	@ 0x2a2
 8033a42:	491b      	ldr	r1, [pc, #108]	@ (8033ab0 <__ssvfscanf_r+0x12dc>)
 8033a44:	4648      	mov	r0, r9
 8033a46:	f7f8 ff49 	bl	802c8dc <sprintf>
 8033a4a:	e7d2      	b.n	80339f2 <__ssvfscanf_r+0x121e>
 8033a4c:	07b2      	lsls	r2, r6, #30
 8033a4e:	682d      	ldr	r5, [r5, #0]
 8033a50:	d502      	bpl.n	8033a58 <__ssvfscanf_r+0x1284>
 8033a52:	ed85 0b00 	vstr	d0, [r5]
 8033a56:	e7db      	b.n	8033a10 <__ssvfscanf_r+0x123c>
 8033a58:	4642      	mov	r2, r8
 8033a5a:	464b      	mov	r3, r9
 8033a5c:	4640      	mov	r0, r8
 8033a5e:	4649      	mov	r1, r9
 8033a60:	f7dd f87c 	bl	8010b5c <__aeabi_dcmpun>
 8033a64:	b128      	cbz	r0, 8033a72 <__ssvfscanf_r+0x129e>
 8033a66:	4813      	ldr	r0, [pc, #76]	@ (8033ab4 <__ssvfscanf_r+0x12e0>)
 8033a68:	f002 f8f6 	bl	8035c58 <nanf>
 8033a6c:	ed85 0a00 	vstr	s0, [r5]
 8033a70:	e7ce      	b.n	8033a10 <__ssvfscanf_r+0x123c>
 8033a72:	4640      	mov	r0, r8
 8033a74:	4649      	mov	r1, r9
 8033a76:	f7dd f8cf 	bl	8010c18 <__aeabi_d2f>
 8033a7a:	6028      	str	r0, [r5, #0]
 8033a7c:	e7c8      	b.n	8033a10 <__ssvfscanf_r+0x123c>
 8033a7e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8033a82:	6818      	ldr	r0, [r3, #0]
 8033a84:	f7fb fd3a 	bl	802f4fc <free>
 8033a88:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8033a8c:	3401      	adds	r4, #1
 8033a8e:	601e      	str	r6, [r3, #0]
 8033a90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8033a92:	681d      	ldr	r5, [r3, #0]
 8033a94:	88db      	ldrh	r3, [r3, #6]
 8033a96:	42a3      	cmp	r3, r4
 8033a98:	dcf1      	bgt.n	8033a7e <__ssvfscanf_r+0x12aa>
 8033a9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8033a9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8033aa0:	f7ff b85c 	b.w	8032b5c <__ssvfscanf_r+0x388>
 8033aa4:	2400      	movs	r4, #0
 8033aa6:	4626      	mov	r6, r4
 8033aa8:	e7f2      	b.n	8033a90 <__ssvfscanf_r+0x12bc>
 8033aaa:	f04f 0a00 	mov.w	sl, #0
 8033aae:	e6bb      	b.n	8033828 <__ssvfscanf_r+0x1054>
 8033ab0:	0803c9d2 	.word	0x0803c9d2
 8033ab4:	0803c43a 	.word	0x0803c43a

08033ab8 <_putc_r>:
 8033ab8:	b570      	push	{r4, r5, r6, lr}
 8033aba:	460d      	mov	r5, r1
 8033abc:	4614      	mov	r4, r2
 8033abe:	4606      	mov	r6, r0
 8033ac0:	b118      	cbz	r0, 8033aca <_putc_r+0x12>
 8033ac2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8033ac4:	b90b      	cbnz	r3, 8033aca <_putc_r+0x12>
 8033ac6:	f7f9 f825 	bl	802cb14 <__sinit>
 8033aca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8033acc:	07d8      	lsls	r0, r3, #31
 8033ace:	d405      	bmi.n	8033adc <_putc_r+0x24>
 8033ad0:	89a3      	ldrh	r3, [r4, #12]
 8033ad2:	0599      	lsls	r1, r3, #22
 8033ad4:	d402      	bmi.n	8033adc <_putc_r+0x24>
 8033ad6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8033ad8:	f7fa fcfb 	bl	802e4d2 <__retarget_lock_acquire_recursive>
 8033adc:	68a3      	ldr	r3, [r4, #8]
 8033ade:	3b01      	subs	r3, #1
 8033ae0:	2b00      	cmp	r3, #0
 8033ae2:	60a3      	str	r3, [r4, #8]
 8033ae4:	da05      	bge.n	8033af2 <_putc_r+0x3a>
 8033ae6:	69a2      	ldr	r2, [r4, #24]
 8033ae8:	4293      	cmp	r3, r2
 8033aea:	db12      	blt.n	8033b12 <_putc_r+0x5a>
 8033aec:	b2eb      	uxtb	r3, r5
 8033aee:	2b0a      	cmp	r3, #10
 8033af0:	d00f      	beq.n	8033b12 <_putc_r+0x5a>
 8033af2:	6823      	ldr	r3, [r4, #0]
 8033af4:	1c5a      	adds	r2, r3, #1
 8033af6:	6022      	str	r2, [r4, #0]
 8033af8:	701d      	strb	r5, [r3, #0]
 8033afa:	b2ed      	uxtb	r5, r5
 8033afc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8033afe:	07da      	lsls	r2, r3, #31
 8033b00:	d405      	bmi.n	8033b0e <_putc_r+0x56>
 8033b02:	89a3      	ldrh	r3, [r4, #12]
 8033b04:	059b      	lsls	r3, r3, #22
 8033b06:	d402      	bmi.n	8033b0e <_putc_r+0x56>
 8033b08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8033b0a:	f7fa fce4 	bl	802e4d6 <__retarget_lock_release_recursive>
 8033b0e:	4628      	mov	r0, r5
 8033b10:	bd70      	pop	{r4, r5, r6, pc}
 8033b12:	4629      	mov	r1, r5
 8033b14:	4622      	mov	r2, r4
 8033b16:	4630      	mov	r0, r6
 8033b18:	f001 fd79 	bl	803560e <__swbuf_r>
 8033b1c:	4605      	mov	r5, r0
 8033b1e:	e7ed      	b.n	8033afc <_putc_r+0x44>

08033b20 <__malloc_lock>:
 8033b20:	4801      	ldr	r0, [pc, #4]	@ (8033b28 <__malloc_lock+0x8>)
 8033b22:	f7fa bcd6 	b.w	802e4d2 <__retarget_lock_acquire_recursive>
 8033b26:	bf00      	nop
 8033b28:	2001a0da 	.word	0x2001a0da

08033b2c <__malloc_unlock>:
 8033b2c:	4801      	ldr	r0, [pc, #4]	@ (8033b34 <__malloc_unlock+0x8>)
 8033b2e:	f7fa bcd2 	b.w	802e4d6 <__retarget_lock_release_recursive>
 8033b32:	bf00      	nop
 8033b34:	2001a0da 	.word	0x2001a0da

08033b38 <_Balloc>:
 8033b38:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8033b3a:	b570      	push	{r4, r5, r6, lr}
 8033b3c:	4605      	mov	r5, r0
 8033b3e:	460c      	mov	r4, r1
 8033b40:	b17b      	cbz	r3, 8033b62 <_Balloc+0x2a>
 8033b42:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8033b44:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8033b48:	b9a0      	cbnz	r0, 8033b74 <_Balloc+0x3c>
 8033b4a:	2101      	movs	r1, #1
 8033b4c:	fa01 f604 	lsl.w	r6, r1, r4
 8033b50:	1d72      	adds	r2, r6, #5
 8033b52:	0092      	lsls	r2, r2, #2
 8033b54:	4628      	mov	r0, r5
 8033b56:	f002 f885 	bl	8035c64 <_calloc_r>
 8033b5a:	b148      	cbz	r0, 8033b70 <_Balloc+0x38>
 8033b5c:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8033b60:	e00b      	b.n	8033b7a <_Balloc+0x42>
 8033b62:	2221      	movs	r2, #33	@ 0x21
 8033b64:	2104      	movs	r1, #4
 8033b66:	f002 f87d 	bl	8035c64 <_calloc_r>
 8033b6a:	6468      	str	r0, [r5, #68]	@ 0x44
 8033b6c:	2800      	cmp	r0, #0
 8033b6e:	d1e8      	bne.n	8033b42 <_Balloc+0xa>
 8033b70:	2000      	movs	r0, #0
 8033b72:	bd70      	pop	{r4, r5, r6, pc}
 8033b74:	6802      	ldr	r2, [r0, #0]
 8033b76:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8033b7a:	2300      	movs	r3, #0
 8033b7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8033b80:	e7f7      	b.n	8033b72 <_Balloc+0x3a>

08033b82 <_Bfree>:
 8033b82:	b131      	cbz	r1, 8033b92 <_Bfree+0x10>
 8033b84:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8033b86:	684a      	ldr	r2, [r1, #4]
 8033b88:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8033b8c:	6008      	str	r0, [r1, #0]
 8033b8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8033b92:	4770      	bx	lr

08033b94 <__multadd>:
 8033b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8033b98:	690d      	ldr	r5, [r1, #16]
 8033b9a:	4607      	mov	r7, r0
 8033b9c:	460c      	mov	r4, r1
 8033b9e:	461e      	mov	r6, r3
 8033ba0:	f101 0c14 	add.w	ip, r1, #20
 8033ba4:	2000      	movs	r0, #0
 8033ba6:	f8dc 3000 	ldr.w	r3, [ip]
 8033baa:	b299      	uxth	r1, r3
 8033bac:	fb02 6101 	mla	r1, r2, r1, r6
 8033bb0:	0c1e      	lsrs	r6, r3, #16
 8033bb2:	0c0b      	lsrs	r3, r1, #16
 8033bb4:	fb02 3306 	mla	r3, r2, r6, r3
 8033bb8:	b289      	uxth	r1, r1
 8033bba:	3001      	adds	r0, #1
 8033bbc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8033bc0:	4285      	cmp	r5, r0
 8033bc2:	f84c 1b04 	str.w	r1, [ip], #4
 8033bc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8033bca:	dcec      	bgt.n	8033ba6 <__multadd+0x12>
 8033bcc:	b30e      	cbz	r6, 8033c12 <__multadd+0x7e>
 8033bce:	68a3      	ldr	r3, [r4, #8]
 8033bd0:	42ab      	cmp	r3, r5
 8033bd2:	dc19      	bgt.n	8033c08 <__multadd+0x74>
 8033bd4:	6861      	ldr	r1, [r4, #4]
 8033bd6:	4638      	mov	r0, r7
 8033bd8:	3101      	adds	r1, #1
 8033bda:	f7ff ffad 	bl	8033b38 <_Balloc>
 8033bde:	4680      	mov	r8, r0
 8033be0:	b928      	cbnz	r0, 8033bee <__multadd+0x5a>
 8033be2:	4602      	mov	r2, r0
 8033be4:	4b0c      	ldr	r3, [pc, #48]	@ (8033c18 <__multadd+0x84>)
 8033be6:	480d      	ldr	r0, [pc, #52]	@ (8033c1c <__multadd+0x88>)
 8033be8:	21ba      	movs	r1, #186	@ 0xba
 8033bea:	f7f6 fce7 	bl	802a5bc <__assert_func>
 8033bee:	6922      	ldr	r2, [r4, #16]
 8033bf0:	3202      	adds	r2, #2
 8033bf2:	f104 010c 	add.w	r1, r4, #12
 8033bf6:	0092      	lsls	r2, r2, #2
 8033bf8:	300c      	adds	r0, #12
 8033bfa:	f7fa fc6d 	bl	802e4d8 <memcpy>
 8033bfe:	4621      	mov	r1, r4
 8033c00:	4638      	mov	r0, r7
 8033c02:	f7ff ffbe 	bl	8033b82 <_Bfree>
 8033c06:	4644      	mov	r4, r8
 8033c08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8033c0c:	3501      	adds	r5, #1
 8033c0e:	615e      	str	r6, [r3, #20]
 8033c10:	6125      	str	r5, [r4, #16]
 8033c12:	4620      	mov	r0, r4
 8033c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8033c18:	0803c906 	.word	0x0803c906
 8033c1c:	0803c9fa 	.word	0x0803c9fa

08033c20 <__s2b>:
 8033c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8033c24:	460c      	mov	r4, r1
 8033c26:	4615      	mov	r5, r2
 8033c28:	461f      	mov	r7, r3
 8033c2a:	2209      	movs	r2, #9
 8033c2c:	3308      	adds	r3, #8
 8033c2e:	4606      	mov	r6, r0
 8033c30:	fb93 f3f2 	sdiv	r3, r3, r2
 8033c34:	2100      	movs	r1, #0
 8033c36:	2201      	movs	r2, #1
 8033c38:	429a      	cmp	r2, r3
 8033c3a:	db09      	blt.n	8033c50 <__s2b+0x30>
 8033c3c:	4630      	mov	r0, r6
 8033c3e:	f7ff ff7b 	bl	8033b38 <_Balloc>
 8033c42:	b940      	cbnz	r0, 8033c56 <__s2b+0x36>
 8033c44:	4602      	mov	r2, r0
 8033c46:	4b19      	ldr	r3, [pc, #100]	@ (8033cac <__s2b+0x8c>)
 8033c48:	4819      	ldr	r0, [pc, #100]	@ (8033cb0 <__s2b+0x90>)
 8033c4a:	21d3      	movs	r1, #211	@ 0xd3
 8033c4c:	f7f6 fcb6 	bl	802a5bc <__assert_func>
 8033c50:	0052      	lsls	r2, r2, #1
 8033c52:	3101      	adds	r1, #1
 8033c54:	e7f0      	b.n	8033c38 <__s2b+0x18>
 8033c56:	9b08      	ldr	r3, [sp, #32]
 8033c58:	6143      	str	r3, [r0, #20]
 8033c5a:	2d09      	cmp	r5, #9
 8033c5c:	f04f 0301 	mov.w	r3, #1
 8033c60:	6103      	str	r3, [r0, #16]
 8033c62:	dd16      	ble.n	8033c92 <__s2b+0x72>
 8033c64:	f104 0909 	add.w	r9, r4, #9
 8033c68:	46c8      	mov	r8, r9
 8033c6a:	442c      	add	r4, r5
 8033c6c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8033c70:	4601      	mov	r1, r0
 8033c72:	3b30      	subs	r3, #48	@ 0x30
 8033c74:	220a      	movs	r2, #10
 8033c76:	4630      	mov	r0, r6
 8033c78:	f7ff ff8c 	bl	8033b94 <__multadd>
 8033c7c:	45a0      	cmp	r8, r4
 8033c7e:	d1f5      	bne.n	8033c6c <__s2b+0x4c>
 8033c80:	f1a5 0408 	sub.w	r4, r5, #8
 8033c84:	444c      	add	r4, r9
 8033c86:	1b2d      	subs	r5, r5, r4
 8033c88:	1963      	adds	r3, r4, r5
 8033c8a:	42bb      	cmp	r3, r7
 8033c8c:	db04      	blt.n	8033c98 <__s2b+0x78>
 8033c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8033c92:	340a      	adds	r4, #10
 8033c94:	2509      	movs	r5, #9
 8033c96:	e7f6      	b.n	8033c86 <__s2b+0x66>
 8033c98:	f814 3b01 	ldrb.w	r3, [r4], #1
 8033c9c:	4601      	mov	r1, r0
 8033c9e:	3b30      	subs	r3, #48	@ 0x30
 8033ca0:	220a      	movs	r2, #10
 8033ca2:	4630      	mov	r0, r6
 8033ca4:	f7ff ff76 	bl	8033b94 <__multadd>
 8033ca8:	e7ee      	b.n	8033c88 <__s2b+0x68>
 8033caa:	bf00      	nop
 8033cac:	0803c906 	.word	0x0803c906
 8033cb0:	0803c9fa 	.word	0x0803c9fa

08033cb4 <__hi0bits>:
 8033cb4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8033cb8:	4603      	mov	r3, r0
 8033cba:	bf36      	itet	cc
 8033cbc:	0403      	lslcc	r3, r0, #16
 8033cbe:	2000      	movcs	r0, #0
 8033cc0:	2010      	movcc	r0, #16
 8033cc2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8033cc6:	bf3c      	itt	cc
 8033cc8:	021b      	lslcc	r3, r3, #8
 8033cca:	3008      	addcc	r0, #8
 8033ccc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8033cd0:	bf3c      	itt	cc
 8033cd2:	011b      	lslcc	r3, r3, #4
 8033cd4:	3004      	addcc	r0, #4
 8033cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8033cda:	bf3c      	itt	cc
 8033cdc:	009b      	lslcc	r3, r3, #2
 8033cde:	3002      	addcc	r0, #2
 8033ce0:	2b00      	cmp	r3, #0
 8033ce2:	db05      	blt.n	8033cf0 <__hi0bits+0x3c>
 8033ce4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8033ce8:	f100 0001 	add.w	r0, r0, #1
 8033cec:	bf08      	it	eq
 8033cee:	2020      	moveq	r0, #32
 8033cf0:	4770      	bx	lr

08033cf2 <__lo0bits>:
 8033cf2:	6803      	ldr	r3, [r0, #0]
 8033cf4:	4602      	mov	r2, r0
 8033cf6:	f013 0007 	ands.w	r0, r3, #7
 8033cfa:	d00b      	beq.n	8033d14 <__lo0bits+0x22>
 8033cfc:	07d9      	lsls	r1, r3, #31
 8033cfe:	d421      	bmi.n	8033d44 <__lo0bits+0x52>
 8033d00:	0798      	lsls	r0, r3, #30
 8033d02:	bf49      	itett	mi
 8033d04:	085b      	lsrmi	r3, r3, #1
 8033d06:	089b      	lsrpl	r3, r3, #2
 8033d08:	2001      	movmi	r0, #1
 8033d0a:	6013      	strmi	r3, [r2, #0]
 8033d0c:	bf5c      	itt	pl
 8033d0e:	6013      	strpl	r3, [r2, #0]
 8033d10:	2002      	movpl	r0, #2
 8033d12:	4770      	bx	lr
 8033d14:	b299      	uxth	r1, r3
 8033d16:	b909      	cbnz	r1, 8033d1c <__lo0bits+0x2a>
 8033d18:	0c1b      	lsrs	r3, r3, #16
 8033d1a:	2010      	movs	r0, #16
 8033d1c:	b2d9      	uxtb	r1, r3
 8033d1e:	b909      	cbnz	r1, 8033d24 <__lo0bits+0x32>
 8033d20:	3008      	adds	r0, #8
 8033d22:	0a1b      	lsrs	r3, r3, #8
 8033d24:	0719      	lsls	r1, r3, #28
 8033d26:	bf04      	itt	eq
 8033d28:	091b      	lsreq	r3, r3, #4
 8033d2a:	3004      	addeq	r0, #4
 8033d2c:	0799      	lsls	r1, r3, #30
 8033d2e:	bf04      	itt	eq
 8033d30:	089b      	lsreq	r3, r3, #2
 8033d32:	3002      	addeq	r0, #2
 8033d34:	07d9      	lsls	r1, r3, #31
 8033d36:	d403      	bmi.n	8033d40 <__lo0bits+0x4e>
 8033d38:	085b      	lsrs	r3, r3, #1
 8033d3a:	f100 0001 	add.w	r0, r0, #1
 8033d3e:	d003      	beq.n	8033d48 <__lo0bits+0x56>
 8033d40:	6013      	str	r3, [r2, #0]
 8033d42:	4770      	bx	lr
 8033d44:	2000      	movs	r0, #0
 8033d46:	4770      	bx	lr
 8033d48:	2020      	movs	r0, #32
 8033d4a:	4770      	bx	lr

08033d4c <__i2b>:
 8033d4c:	b510      	push	{r4, lr}
 8033d4e:	460c      	mov	r4, r1
 8033d50:	2101      	movs	r1, #1
 8033d52:	f7ff fef1 	bl	8033b38 <_Balloc>
 8033d56:	4602      	mov	r2, r0
 8033d58:	b928      	cbnz	r0, 8033d66 <__i2b+0x1a>
 8033d5a:	4b05      	ldr	r3, [pc, #20]	@ (8033d70 <__i2b+0x24>)
 8033d5c:	4805      	ldr	r0, [pc, #20]	@ (8033d74 <__i2b+0x28>)
 8033d5e:	f240 1145 	movw	r1, #325	@ 0x145
 8033d62:	f7f6 fc2b 	bl	802a5bc <__assert_func>
 8033d66:	2301      	movs	r3, #1
 8033d68:	6144      	str	r4, [r0, #20]
 8033d6a:	6103      	str	r3, [r0, #16]
 8033d6c:	bd10      	pop	{r4, pc}
 8033d6e:	bf00      	nop
 8033d70:	0803c906 	.word	0x0803c906
 8033d74:	0803c9fa 	.word	0x0803c9fa

08033d78 <__multiply>:
 8033d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8033d7c:	4614      	mov	r4, r2
 8033d7e:	690a      	ldr	r2, [r1, #16]
 8033d80:	6923      	ldr	r3, [r4, #16]
 8033d82:	429a      	cmp	r2, r3
 8033d84:	bfa8      	it	ge
 8033d86:	4623      	movge	r3, r4
 8033d88:	460f      	mov	r7, r1
 8033d8a:	bfa4      	itt	ge
 8033d8c:	460c      	movge	r4, r1
 8033d8e:	461f      	movge	r7, r3
 8033d90:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8033d94:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8033d98:	68a3      	ldr	r3, [r4, #8]
 8033d9a:	6861      	ldr	r1, [r4, #4]
 8033d9c:	eb0a 0609 	add.w	r6, sl, r9
 8033da0:	42b3      	cmp	r3, r6
 8033da2:	b085      	sub	sp, #20
 8033da4:	bfb8      	it	lt
 8033da6:	3101      	addlt	r1, #1
 8033da8:	f7ff fec6 	bl	8033b38 <_Balloc>
 8033dac:	b930      	cbnz	r0, 8033dbc <__multiply+0x44>
 8033dae:	4602      	mov	r2, r0
 8033db0:	4b44      	ldr	r3, [pc, #272]	@ (8033ec4 <__multiply+0x14c>)
 8033db2:	4845      	ldr	r0, [pc, #276]	@ (8033ec8 <__multiply+0x150>)
 8033db4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8033db8:	f7f6 fc00 	bl	802a5bc <__assert_func>
 8033dbc:	f100 0514 	add.w	r5, r0, #20
 8033dc0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8033dc4:	462b      	mov	r3, r5
 8033dc6:	2200      	movs	r2, #0
 8033dc8:	4543      	cmp	r3, r8
 8033dca:	d321      	bcc.n	8033e10 <__multiply+0x98>
 8033dcc:	f107 0114 	add.w	r1, r7, #20
 8033dd0:	f104 0214 	add.w	r2, r4, #20
 8033dd4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8033dd8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8033ddc:	9302      	str	r3, [sp, #8]
 8033dde:	1b13      	subs	r3, r2, r4
 8033de0:	3b15      	subs	r3, #21
 8033de2:	f023 0303 	bic.w	r3, r3, #3
 8033de6:	3304      	adds	r3, #4
 8033de8:	f104 0715 	add.w	r7, r4, #21
 8033dec:	42ba      	cmp	r2, r7
 8033dee:	bf38      	it	cc
 8033df0:	2304      	movcc	r3, #4
 8033df2:	9301      	str	r3, [sp, #4]
 8033df4:	9b02      	ldr	r3, [sp, #8]
 8033df6:	9103      	str	r1, [sp, #12]
 8033df8:	428b      	cmp	r3, r1
 8033dfa:	d80c      	bhi.n	8033e16 <__multiply+0x9e>
 8033dfc:	2e00      	cmp	r6, #0
 8033dfe:	dd03      	ble.n	8033e08 <__multiply+0x90>
 8033e00:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8033e04:	2b00      	cmp	r3, #0
 8033e06:	d05b      	beq.n	8033ec0 <__multiply+0x148>
 8033e08:	6106      	str	r6, [r0, #16]
 8033e0a:	b005      	add	sp, #20
 8033e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8033e10:	f843 2b04 	str.w	r2, [r3], #4
 8033e14:	e7d8      	b.n	8033dc8 <__multiply+0x50>
 8033e16:	f8b1 a000 	ldrh.w	sl, [r1]
 8033e1a:	f1ba 0f00 	cmp.w	sl, #0
 8033e1e:	d024      	beq.n	8033e6a <__multiply+0xf2>
 8033e20:	f104 0e14 	add.w	lr, r4, #20
 8033e24:	46a9      	mov	r9, r5
 8033e26:	f04f 0c00 	mov.w	ip, #0
 8033e2a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8033e2e:	f8d9 3000 	ldr.w	r3, [r9]
 8033e32:	fa1f fb87 	uxth.w	fp, r7
 8033e36:	b29b      	uxth	r3, r3
 8033e38:	fb0a 330b 	mla	r3, sl, fp, r3
 8033e3c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8033e40:	f8d9 7000 	ldr.w	r7, [r9]
 8033e44:	4463      	add	r3, ip
 8033e46:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8033e4a:	fb0a c70b 	mla	r7, sl, fp, ip
 8033e4e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8033e52:	b29b      	uxth	r3, r3
 8033e54:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8033e58:	4572      	cmp	r2, lr
 8033e5a:	f849 3b04 	str.w	r3, [r9], #4
 8033e5e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8033e62:	d8e2      	bhi.n	8033e2a <__multiply+0xb2>
 8033e64:	9b01      	ldr	r3, [sp, #4]
 8033e66:	f845 c003 	str.w	ip, [r5, r3]
 8033e6a:	9b03      	ldr	r3, [sp, #12]
 8033e6c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8033e70:	3104      	adds	r1, #4
 8033e72:	f1b9 0f00 	cmp.w	r9, #0
 8033e76:	d021      	beq.n	8033ebc <__multiply+0x144>
 8033e78:	682b      	ldr	r3, [r5, #0]
 8033e7a:	f104 0c14 	add.w	ip, r4, #20
 8033e7e:	46ae      	mov	lr, r5
 8033e80:	f04f 0a00 	mov.w	sl, #0
 8033e84:	f8bc b000 	ldrh.w	fp, [ip]
 8033e88:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8033e8c:	fb09 770b 	mla	r7, r9, fp, r7
 8033e90:	4457      	add	r7, sl
 8033e92:	b29b      	uxth	r3, r3
 8033e94:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8033e98:	f84e 3b04 	str.w	r3, [lr], #4
 8033e9c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8033ea0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8033ea4:	f8be 3000 	ldrh.w	r3, [lr]
 8033ea8:	fb09 330a 	mla	r3, r9, sl, r3
 8033eac:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8033eb0:	4562      	cmp	r2, ip
 8033eb2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8033eb6:	d8e5      	bhi.n	8033e84 <__multiply+0x10c>
 8033eb8:	9f01      	ldr	r7, [sp, #4]
 8033eba:	51eb      	str	r3, [r5, r7]
 8033ebc:	3504      	adds	r5, #4
 8033ebe:	e799      	b.n	8033df4 <__multiply+0x7c>
 8033ec0:	3e01      	subs	r6, #1
 8033ec2:	e79b      	b.n	8033dfc <__multiply+0x84>
 8033ec4:	0803c906 	.word	0x0803c906
 8033ec8:	0803c9fa 	.word	0x0803c9fa

08033ecc <__pow5mult>:
 8033ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8033ed0:	4615      	mov	r5, r2
 8033ed2:	f012 0203 	ands.w	r2, r2, #3
 8033ed6:	4607      	mov	r7, r0
 8033ed8:	460e      	mov	r6, r1
 8033eda:	d007      	beq.n	8033eec <__pow5mult+0x20>
 8033edc:	4c1a      	ldr	r4, [pc, #104]	@ (8033f48 <__pow5mult+0x7c>)
 8033ede:	3a01      	subs	r2, #1
 8033ee0:	2300      	movs	r3, #0
 8033ee2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8033ee6:	f7ff fe55 	bl	8033b94 <__multadd>
 8033eea:	4606      	mov	r6, r0
 8033eec:	10ad      	asrs	r5, r5, #2
 8033eee:	d027      	beq.n	8033f40 <__pow5mult+0x74>
 8033ef0:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8033ef2:	b944      	cbnz	r4, 8033f06 <__pow5mult+0x3a>
 8033ef4:	f240 2171 	movw	r1, #625	@ 0x271
 8033ef8:	4638      	mov	r0, r7
 8033efa:	f7ff ff27 	bl	8033d4c <__i2b>
 8033efe:	2300      	movs	r3, #0
 8033f00:	6438      	str	r0, [r7, #64]	@ 0x40
 8033f02:	4604      	mov	r4, r0
 8033f04:	6003      	str	r3, [r0, #0]
 8033f06:	f04f 0900 	mov.w	r9, #0
 8033f0a:	07eb      	lsls	r3, r5, #31
 8033f0c:	d50a      	bpl.n	8033f24 <__pow5mult+0x58>
 8033f0e:	4631      	mov	r1, r6
 8033f10:	4622      	mov	r2, r4
 8033f12:	4638      	mov	r0, r7
 8033f14:	f7ff ff30 	bl	8033d78 <__multiply>
 8033f18:	4631      	mov	r1, r6
 8033f1a:	4680      	mov	r8, r0
 8033f1c:	4638      	mov	r0, r7
 8033f1e:	f7ff fe30 	bl	8033b82 <_Bfree>
 8033f22:	4646      	mov	r6, r8
 8033f24:	106d      	asrs	r5, r5, #1
 8033f26:	d00b      	beq.n	8033f40 <__pow5mult+0x74>
 8033f28:	6820      	ldr	r0, [r4, #0]
 8033f2a:	b938      	cbnz	r0, 8033f3c <__pow5mult+0x70>
 8033f2c:	4622      	mov	r2, r4
 8033f2e:	4621      	mov	r1, r4
 8033f30:	4638      	mov	r0, r7
 8033f32:	f7ff ff21 	bl	8033d78 <__multiply>
 8033f36:	6020      	str	r0, [r4, #0]
 8033f38:	f8c0 9000 	str.w	r9, [r0]
 8033f3c:	4604      	mov	r4, r0
 8033f3e:	e7e4      	b.n	8033f0a <__pow5mult+0x3e>
 8033f40:	4630      	mov	r0, r6
 8033f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8033f46:	bf00      	nop
 8033f48:	0803ca54 	.word	0x0803ca54

08033f4c <__lshift>:
 8033f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8033f50:	460c      	mov	r4, r1
 8033f52:	6849      	ldr	r1, [r1, #4]
 8033f54:	6923      	ldr	r3, [r4, #16]
 8033f56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8033f5a:	68a3      	ldr	r3, [r4, #8]
 8033f5c:	4607      	mov	r7, r0
 8033f5e:	4691      	mov	r9, r2
 8033f60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8033f64:	f108 0601 	add.w	r6, r8, #1
 8033f68:	42b3      	cmp	r3, r6
 8033f6a:	db0b      	blt.n	8033f84 <__lshift+0x38>
 8033f6c:	4638      	mov	r0, r7
 8033f6e:	f7ff fde3 	bl	8033b38 <_Balloc>
 8033f72:	4605      	mov	r5, r0
 8033f74:	b948      	cbnz	r0, 8033f8a <__lshift+0x3e>
 8033f76:	4602      	mov	r2, r0
 8033f78:	4b28      	ldr	r3, [pc, #160]	@ (803401c <__lshift+0xd0>)
 8033f7a:	4829      	ldr	r0, [pc, #164]	@ (8034020 <__lshift+0xd4>)
 8033f7c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8033f80:	f7f6 fb1c 	bl	802a5bc <__assert_func>
 8033f84:	3101      	adds	r1, #1
 8033f86:	005b      	lsls	r3, r3, #1
 8033f88:	e7ee      	b.n	8033f68 <__lshift+0x1c>
 8033f8a:	2300      	movs	r3, #0
 8033f8c:	f100 0114 	add.w	r1, r0, #20
 8033f90:	f100 0210 	add.w	r2, r0, #16
 8033f94:	4618      	mov	r0, r3
 8033f96:	4553      	cmp	r3, sl
 8033f98:	db33      	blt.n	8034002 <__lshift+0xb6>
 8033f9a:	6920      	ldr	r0, [r4, #16]
 8033f9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8033fa0:	f104 0314 	add.w	r3, r4, #20
 8033fa4:	f019 091f 	ands.w	r9, r9, #31
 8033fa8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8033fac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8033fb0:	d02b      	beq.n	803400a <__lshift+0xbe>
 8033fb2:	f1c9 0e20 	rsb	lr, r9, #32
 8033fb6:	468a      	mov	sl, r1
 8033fb8:	2200      	movs	r2, #0
 8033fba:	6818      	ldr	r0, [r3, #0]
 8033fbc:	fa00 f009 	lsl.w	r0, r0, r9
 8033fc0:	4310      	orrs	r0, r2
 8033fc2:	f84a 0b04 	str.w	r0, [sl], #4
 8033fc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8033fca:	459c      	cmp	ip, r3
 8033fcc:	fa22 f20e 	lsr.w	r2, r2, lr
 8033fd0:	d8f3      	bhi.n	8033fba <__lshift+0x6e>
 8033fd2:	ebac 0304 	sub.w	r3, ip, r4
 8033fd6:	3b15      	subs	r3, #21
 8033fd8:	f023 0303 	bic.w	r3, r3, #3
 8033fdc:	3304      	adds	r3, #4
 8033fde:	f104 0015 	add.w	r0, r4, #21
 8033fe2:	4584      	cmp	ip, r0
 8033fe4:	bf38      	it	cc
 8033fe6:	2304      	movcc	r3, #4
 8033fe8:	50ca      	str	r2, [r1, r3]
 8033fea:	b10a      	cbz	r2, 8033ff0 <__lshift+0xa4>
 8033fec:	f108 0602 	add.w	r6, r8, #2
 8033ff0:	3e01      	subs	r6, #1
 8033ff2:	4638      	mov	r0, r7
 8033ff4:	612e      	str	r6, [r5, #16]
 8033ff6:	4621      	mov	r1, r4
 8033ff8:	f7ff fdc3 	bl	8033b82 <_Bfree>
 8033ffc:	4628      	mov	r0, r5
 8033ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8034002:	f842 0f04 	str.w	r0, [r2, #4]!
 8034006:	3301      	adds	r3, #1
 8034008:	e7c5      	b.n	8033f96 <__lshift+0x4a>
 803400a:	3904      	subs	r1, #4
 803400c:	f853 2b04 	ldr.w	r2, [r3], #4
 8034010:	f841 2f04 	str.w	r2, [r1, #4]!
 8034014:	459c      	cmp	ip, r3
 8034016:	d8f9      	bhi.n	803400c <__lshift+0xc0>
 8034018:	e7ea      	b.n	8033ff0 <__lshift+0xa4>
 803401a:	bf00      	nop
 803401c:	0803c906 	.word	0x0803c906
 8034020:	0803c9fa 	.word	0x0803c9fa

08034024 <__mcmp>:
 8034024:	690a      	ldr	r2, [r1, #16]
 8034026:	4603      	mov	r3, r0
 8034028:	6900      	ldr	r0, [r0, #16]
 803402a:	1a80      	subs	r0, r0, r2
 803402c:	b530      	push	{r4, r5, lr}
 803402e:	d10e      	bne.n	803404e <__mcmp+0x2a>
 8034030:	3314      	adds	r3, #20
 8034032:	3114      	adds	r1, #20
 8034034:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8034038:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 803403c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8034040:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8034044:	4295      	cmp	r5, r2
 8034046:	d003      	beq.n	8034050 <__mcmp+0x2c>
 8034048:	d205      	bcs.n	8034056 <__mcmp+0x32>
 803404a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 803404e:	bd30      	pop	{r4, r5, pc}
 8034050:	42a3      	cmp	r3, r4
 8034052:	d3f3      	bcc.n	803403c <__mcmp+0x18>
 8034054:	e7fb      	b.n	803404e <__mcmp+0x2a>
 8034056:	2001      	movs	r0, #1
 8034058:	e7f9      	b.n	803404e <__mcmp+0x2a>
	...

0803405c <__mdiff>:
 803405c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8034060:	4689      	mov	r9, r1
 8034062:	4606      	mov	r6, r0
 8034064:	4611      	mov	r1, r2
 8034066:	4648      	mov	r0, r9
 8034068:	4614      	mov	r4, r2
 803406a:	f7ff ffdb 	bl	8034024 <__mcmp>
 803406e:	1e05      	subs	r5, r0, #0
 8034070:	d112      	bne.n	8034098 <__mdiff+0x3c>
 8034072:	4629      	mov	r1, r5
 8034074:	4630      	mov	r0, r6
 8034076:	f7ff fd5f 	bl	8033b38 <_Balloc>
 803407a:	4602      	mov	r2, r0
 803407c:	b928      	cbnz	r0, 803408a <__mdiff+0x2e>
 803407e:	4b3f      	ldr	r3, [pc, #252]	@ (803417c <__mdiff+0x120>)
 8034080:	f240 2137 	movw	r1, #567	@ 0x237
 8034084:	483e      	ldr	r0, [pc, #248]	@ (8034180 <__mdiff+0x124>)
 8034086:	f7f6 fa99 	bl	802a5bc <__assert_func>
 803408a:	2301      	movs	r3, #1
 803408c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8034090:	4610      	mov	r0, r2
 8034092:	b003      	add	sp, #12
 8034094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8034098:	bfbc      	itt	lt
 803409a:	464b      	movlt	r3, r9
 803409c:	46a1      	movlt	r9, r4
 803409e:	4630      	mov	r0, r6
 80340a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80340a4:	bfba      	itte	lt
 80340a6:	461c      	movlt	r4, r3
 80340a8:	2501      	movlt	r5, #1
 80340aa:	2500      	movge	r5, #0
 80340ac:	f7ff fd44 	bl	8033b38 <_Balloc>
 80340b0:	4602      	mov	r2, r0
 80340b2:	b918      	cbnz	r0, 80340bc <__mdiff+0x60>
 80340b4:	4b31      	ldr	r3, [pc, #196]	@ (803417c <__mdiff+0x120>)
 80340b6:	f240 2145 	movw	r1, #581	@ 0x245
 80340ba:	e7e3      	b.n	8034084 <__mdiff+0x28>
 80340bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80340c0:	6926      	ldr	r6, [r4, #16]
 80340c2:	60c5      	str	r5, [r0, #12]
 80340c4:	f109 0310 	add.w	r3, r9, #16
 80340c8:	f109 0514 	add.w	r5, r9, #20
 80340cc:	f104 0e14 	add.w	lr, r4, #20
 80340d0:	f100 0b14 	add.w	fp, r0, #20
 80340d4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80340d8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80340dc:	9301      	str	r3, [sp, #4]
 80340de:	46d9      	mov	r9, fp
 80340e0:	f04f 0c00 	mov.w	ip, #0
 80340e4:	9b01      	ldr	r3, [sp, #4]
 80340e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80340ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 80340ee:	9301      	str	r3, [sp, #4]
 80340f0:	fa1f f38a 	uxth.w	r3, sl
 80340f4:	4619      	mov	r1, r3
 80340f6:	b283      	uxth	r3, r0
 80340f8:	1acb      	subs	r3, r1, r3
 80340fa:	0c00      	lsrs	r0, r0, #16
 80340fc:	4463      	add	r3, ip
 80340fe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8034102:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8034106:	b29b      	uxth	r3, r3
 8034108:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 803410c:	4576      	cmp	r6, lr
 803410e:	f849 3b04 	str.w	r3, [r9], #4
 8034112:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8034116:	d8e5      	bhi.n	80340e4 <__mdiff+0x88>
 8034118:	1b33      	subs	r3, r6, r4
 803411a:	3b15      	subs	r3, #21
 803411c:	f023 0303 	bic.w	r3, r3, #3
 8034120:	3415      	adds	r4, #21
 8034122:	3304      	adds	r3, #4
 8034124:	42a6      	cmp	r6, r4
 8034126:	bf38      	it	cc
 8034128:	2304      	movcc	r3, #4
 803412a:	441d      	add	r5, r3
 803412c:	445b      	add	r3, fp
 803412e:	461e      	mov	r6, r3
 8034130:	462c      	mov	r4, r5
 8034132:	4544      	cmp	r4, r8
 8034134:	d30e      	bcc.n	8034154 <__mdiff+0xf8>
 8034136:	f108 0103 	add.w	r1, r8, #3
 803413a:	1b49      	subs	r1, r1, r5
 803413c:	f021 0103 	bic.w	r1, r1, #3
 8034140:	3d03      	subs	r5, #3
 8034142:	45a8      	cmp	r8, r5
 8034144:	bf38      	it	cc
 8034146:	2100      	movcc	r1, #0
 8034148:	440b      	add	r3, r1
 803414a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 803414e:	b191      	cbz	r1, 8034176 <__mdiff+0x11a>
 8034150:	6117      	str	r7, [r2, #16]
 8034152:	e79d      	b.n	8034090 <__mdiff+0x34>
 8034154:	f854 1b04 	ldr.w	r1, [r4], #4
 8034158:	46e6      	mov	lr, ip
 803415a:	0c08      	lsrs	r0, r1, #16
 803415c:	fa1c fc81 	uxtah	ip, ip, r1
 8034160:	4471      	add	r1, lr
 8034162:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8034166:	b289      	uxth	r1, r1
 8034168:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 803416c:	f846 1b04 	str.w	r1, [r6], #4
 8034170:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8034174:	e7dd      	b.n	8034132 <__mdiff+0xd6>
 8034176:	3f01      	subs	r7, #1
 8034178:	e7e7      	b.n	803414a <__mdiff+0xee>
 803417a:	bf00      	nop
 803417c:	0803c906 	.word	0x0803c906
 8034180:	0803c9fa 	.word	0x0803c9fa

08034184 <__ulp>:
 8034184:	b082      	sub	sp, #8
 8034186:	ed8d 0b00 	vstr	d0, [sp]
 803418a:	9a01      	ldr	r2, [sp, #4]
 803418c:	4b0f      	ldr	r3, [pc, #60]	@ (80341cc <__ulp+0x48>)
 803418e:	4013      	ands	r3, r2
 8034190:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8034194:	2b00      	cmp	r3, #0
 8034196:	dc08      	bgt.n	80341aa <__ulp+0x26>
 8034198:	425b      	negs	r3, r3
 803419a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 803419e:	ea4f 5223 	mov.w	r2, r3, asr #20
 80341a2:	da04      	bge.n	80341ae <__ulp+0x2a>
 80341a4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80341a8:	4113      	asrs	r3, r2
 80341aa:	2200      	movs	r2, #0
 80341ac:	e008      	b.n	80341c0 <__ulp+0x3c>
 80341ae:	f1a2 0314 	sub.w	r3, r2, #20
 80341b2:	2b1e      	cmp	r3, #30
 80341b4:	bfda      	itte	le
 80341b6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80341ba:	40da      	lsrle	r2, r3
 80341bc:	2201      	movgt	r2, #1
 80341be:	2300      	movs	r3, #0
 80341c0:	4619      	mov	r1, r3
 80341c2:	4610      	mov	r0, r2
 80341c4:	ec41 0b10 	vmov	d0, r0, r1
 80341c8:	b002      	add	sp, #8
 80341ca:	4770      	bx	lr
 80341cc:	7ff00000 	.word	0x7ff00000

080341d0 <__b2d>:
 80341d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80341d4:	6906      	ldr	r6, [r0, #16]
 80341d6:	f100 0814 	add.w	r8, r0, #20
 80341da:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80341de:	1f37      	subs	r7, r6, #4
 80341e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80341e4:	4610      	mov	r0, r2
 80341e6:	f7ff fd65 	bl	8033cb4 <__hi0bits>
 80341ea:	f1c0 0320 	rsb	r3, r0, #32
 80341ee:	280a      	cmp	r0, #10
 80341f0:	600b      	str	r3, [r1, #0]
 80341f2:	491b      	ldr	r1, [pc, #108]	@ (8034260 <__b2d+0x90>)
 80341f4:	dc15      	bgt.n	8034222 <__b2d+0x52>
 80341f6:	f1c0 0c0b 	rsb	ip, r0, #11
 80341fa:	fa22 f30c 	lsr.w	r3, r2, ip
 80341fe:	45b8      	cmp	r8, r7
 8034200:	ea43 0501 	orr.w	r5, r3, r1
 8034204:	bf34      	ite	cc
 8034206:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 803420a:	2300      	movcs	r3, #0
 803420c:	3015      	adds	r0, #21
 803420e:	fa02 f000 	lsl.w	r0, r2, r0
 8034212:	fa23 f30c 	lsr.w	r3, r3, ip
 8034216:	4303      	orrs	r3, r0
 8034218:	461c      	mov	r4, r3
 803421a:	ec45 4b10 	vmov	d0, r4, r5
 803421e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8034222:	45b8      	cmp	r8, r7
 8034224:	bf3a      	itte	cc
 8034226:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 803422a:	f1a6 0708 	subcc.w	r7, r6, #8
 803422e:	2300      	movcs	r3, #0
 8034230:	380b      	subs	r0, #11
 8034232:	d012      	beq.n	803425a <__b2d+0x8a>
 8034234:	f1c0 0120 	rsb	r1, r0, #32
 8034238:	fa23 f401 	lsr.w	r4, r3, r1
 803423c:	4082      	lsls	r2, r0
 803423e:	4322      	orrs	r2, r4
 8034240:	4547      	cmp	r7, r8
 8034242:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8034246:	bf8c      	ite	hi
 8034248:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 803424c:	2200      	movls	r2, #0
 803424e:	4083      	lsls	r3, r0
 8034250:	40ca      	lsrs	r2, r1
 8034252:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8034256:	4313      	orrs	r3, r2
 8034258:	e7de      	b.n	8034218 <__b2d+0x48>
 803425a:	ea42 0501 	orr.w	r5, r2, r1
 803425e:	e7db      	b.n	8034218 <__b2d+0x48>
 8034260:	3ff00000 	.word	0x3ff00000

08034264 <__d2b>:
 8034264:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8034268:	460f      	mov	r7, r1
 803426a:	2101      	movs	r1, #1
 803426c:	ec59 8b10 	vmov	r8, r9, d0
 8034270:	4616      	mov	r6, r2
 8034272:	f7ff fc61 	bl	8033b38 <_Balloc>
 8034276:	4604      	mov	r4, r0
 8034278:	b930      	cbnz	r0, 8034288 <__d2b+0x24>
 803427a:	4602      	mov	r2, r0
 803427c:	4b23      	ldr	r3, [pc, #140]	@ (803430c <__d2b+0xa8>)
 803427e:	4824      	ldr	r0, [pc, #144]	@ (8034310 <__d2b+0xac>)
 8034280:	f240 310f 	movw	r1, #783	@ 0x30f
 8034284:	f7f6 f99a 	bl	802a5bc <__assert_func>
 8034288:	f3c9 550a 	ubfx	r5, r9, #20, #11
 803428c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8034290:	b10d      	cbz	r5, 8034296 <__d2b+0x32>
 8034292:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8034296:	9301      	str	r3, [sp, #4]
 8034298:	f1b8 0300 	subs.w	r3, r8, #0
 803429c:	d023      	beq.n	80342e6 <__d2b+0x82>
 803429e:	4668      	mov	r0, sp
 80342a0:	9300      	str	r3, [sp, #0]
 80342a2:	f7ff fd26 	bl	8033cf2 <__lo0bits>
 80342a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80342aa:	b1d0      	cbz	r0, 80342e2 <__d2b+0x7e>
 80342ac:	f1c0 0320 	rsb	r3, r0, #32
 80342b0:	fa02 f303 	lsl.w	r3, r2, r3
 80342b4:	430b      	orrs	r3, r1
 80342b6:	40c2      	lsrs	r2, r0
 80342b8:	6163      	str	r3, [r4, #20]
 80342ba:	9201      	str	r2, [sp, #4]
 80342bc:	9b01      	ldr	r3, [sp, #4]
 80342be:	61a3      	str	r3, [r4, #24]
 80342c0:	2b00      	cmp	r3, #0
 80342c2:	bf0c      	ite	eq
 80342c4:	2201      	moveq	r2, #1
 80342c6:	2202      	movne	r2, #2
 80342c8:	6122      	str	r2, [r4, #16]
 80342ca:	b1a5      	cbz	r5, 80342f6 <__d2b+0x92>
 80342cc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80342d0:	4405      	add	r5, r0
 80342d2:	603d      	str	r5, [r7, #0]
 80342d4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80342d8:	6030      	str	r0, [r6, #0]
 80342da:	4620      	mov	r0, r4
 80342dc:	b003      	add	sp, #12
 80342de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80342e2:	6161      	str	r1, [r4, #20]
 80342e4:	e7ea      	b.n	80342bc <__d2b+0x58>
 80342e6:	a801      	add	r0, sp, #4
 80342e8:	f7ff fd03 	bl	8033cf2 <__lo0bits>
 80342ec:	9b01      	ldr	r3, [sp, #4]
 80342ee:	6163      	str	r3, [r4, #20]
 80342f0:	3020      	adds	r0, #32
 80342f2:	2201      	movs	r2, #1
 80342f4:	e7e8      	b.n	80342c8 <__d2b+0x64>
 80342f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80342fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80342fe:	6038      	str	r0, [r7, #0]
 8034300:	6918      	ldr	r0, [r3, #16]
 8034302:	f7ff fcd7 	bl	8033cb4 <__hi0bits>
 8034306:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 803430a:	e7e5      	b.n	80342d8 <__d2b+0x74>
 803430c:	0803c906 	.word	0x0803c906
 8034310:	0803c9fa 	.word	0x0803c9fa

08034314 <__ratio>:
 8034314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8034318:	b085      	sub	sp, #20
 803431a:	e9cd 1000 	strd	r1, r0, [sp]
 803431e:	a902      	add	r1, sp, #8
 8034320:	f7ff ff56 	bl	80341d0 <__b2d>
 8034324:	9800      	ldr	r0, [sp, #0]
 8034326:	a903      	add	r1, sp, #12
 8034328:	ec55 4b10 	vmov	r4, r5, d0
 803432c:	f7ff ff50 	bl	80341d0 <__b2d>
 8034330:	9b01      	ldr	r3, [sp, #4]
 8034332:	6919      	ldr	r1, [r3, #16]
 8034334:	9b00      	ldr	r3, [sp, #0]
 8034336:	691b      	ldr	r3, [r3, #16]
 8034338:	1ac9      	subs	r1, r1, r3
 803433a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 803433e:	1a9b      	subs	r3, r3, r2
 8034340:	ec5b ab10 	vmov	sl, fp, d0
 8034344:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8034348:	2b00      	cmp	r3, #0
 803434a:	bfce      	itee	gt
 803434c:	462a      	movgt	r2, r5
 803434e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8034352:	465a      	movle	r2, fp
 8034354:	462f      	mov	r7, r5
 8034356:	46d9      	mov	r9, fp
 8034358:	bfcc      	ite	gt
 803435a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 803435e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8034362:	464b      	mov	r3, r9
 8034364:	4652      	mov	r2, sl
 8034366:	4620      	mov	r0, r4
 8034368:	4639      	mov	r1, r7
 803436a:	f7dc fa87 	bl	801087c <__aeabi_ddiv>
 803436e:	ec41 0b10 	vmov	d0, r0, r1
 8034372:	b005      	add	sp, #20
 8034374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08034378 <__copybits>:
 8034378:	3901      	subs	r1, #1
 803437a:	b570      	push	{r4, r5, r6, lr}
 803437c:	1149      	asrs	r1, r1, #5
 803437e:	6914      	ldr	r4, [r2, #16]
 8034380:	3101      	adds	r1, #1
 8034382:	f102 0314 	add.w	r3, r2, #20
 8034386:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 803438a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 803438e:	1f05      	subs	r5, r0, #4
 8034390:	42a3      	cmp	r3, r4
 8034392:	d30c      	bcc.n	80343ae <__copybits+0x36>
 8034394:	1aa3      	subs	r3, r4, r2
 8034396:	3b11      	subs	r3, #17
 8034398:	f023 0303 	bic.w	r3, r3, #3
 803439c:	3211      	adds	r2, #17
 803439e:	42a2      	cmp	r2, r4
 80343a0:	bf88      	it	hi
 80343a2:	2300      	movhi	r3, #0
 80343a4:	4418      	add	r0, r3
 80343a6:	2300      	movs	r3, #0
 80343a8:	4288      	cmp	r0, r1
 80343aa:	d305      	bcc.n	80343b8 <__copybits+0x40>
 80343ac:	bd70      	pop	{r4, r5, r6, pc}
 80343ae:	f853 6b04 	ldr.w	r6, [r3], #4
 80343b2:	f845 6f04 	str.w	r6, [r5, #4]!
 80343b6:	e7eb      	b.n	8034390 <__copybits+0x18>
 80343b8:	f840 3b04 	str.w	r3, [r0], #4
 80343bc:	e7f4      	b.n	80343a8 <__copybits+0x30>

080343be <__any_on>:
 80343be:	f100 0214 	add.w	r2, r0, #20
 80343c2:	6900      	ldr	r0, [r0, #16]
 80343c4:	114b      	asrs	r3, r1, #5
 80343c6:	4298      	cmp	r0, r3
 80343c8:	b510      	push	{r4, lr}
 80343ca:	db11      	blt.n	80343f0 <__any_on+0x32>
 80343cc:	dd0a      	ble.n	80343e4 <__any_on+0x26>
 80343ce:	f011 011f 	ands.w	r1, r1, #31
 80343d2:	d007      	beq.n	80343e4 <__any_on+0x26>
 80343d4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80343d8:	fa24 f001 	lsr.w	r0, r4, r1
 80343dc:	fa00 f101 	lsl.w	r1, r0, r1
 80343e0:	428c      	cmp	r4, r1
 80343e2:	d10b      	bne.n	80343fc <__any_on+0x3e>
 80343e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80343e8:	4293      	cmp	r3, r2
 80343ea:	d803      	bhi.n	80343f4 <__any_on+0x36>
 80343ec:	2000      	movs	r0, #0
 80343ee:	bd10      	pop	{r4, pc}
 80343f0:	4603      	mov	r3, r0
 80343f2:	e7f7      	b.n	80343e4 <__any_on+0x26>
 80343f4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80343f8:	2900      	cmp	r1, #0
 80343fa:	d0f5      	beq.n	80343e8 <__any_on+0x2a>
 80343fc:	2001      	movs	r0, #1
 80343fe:	e7f6      	b.n	80343ee <__any_on+0x30>

08034400 <realloc>:
 8034400:	4b02      	ldr	r3, [pc, #8]	@ (803440c <realloc+0xc>)
 8034402:	460a      	mov	r2, r1
 8034404:	4601      	mov	r1, r0
 8034406:	6818      	ldr	r0, [r3, #0]
 8034408:	f000 b890 	b.w	803452c <_realloc_r>
 803440c:	200002d8 	.word	0x200002d8

08034410 <_fclose_r>:
 8034410:	b570      	push	{r4, r5, r6, lr}
 8034412:	4605      	mov	r5, r0
 8034414:	460c      	mov	r4, r1
 8034416:	b1b1      	cbz	r1, 8034446 <_fclose_r+0x36>
 8034418:	b118      	cbz	r0, 8034422 <_fclose_r+0x12>
 803441a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 803441c:	b90b      	cbnz	r3, 8034422 <_fclose_r+0x12>
 803441e:	f7f8 fb79 	bl	802cb14 <__sinit>
 8034422:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8034424:	07de      	lsls	r6, r3, #31
 8034426:	d405      	bmi.n	8034434 <_fclose_r+0x24>
 8034428:	89a3      	ldrh	r3, [r4, #12]
 803442a:	0598      	lsls	r0, r3, #22
 803442c:	d402      	bmi.n	8034434 <_fclose_r+0x24>
 803442e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8034430:	f7fa f84f 	bl	802e4d2 <__retarget_lock_acquire_recursive>
 8034434:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8034438:	b943      	cbnz	r3, 803444c <_fclose_r+0x3c>
 803443a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 803443c:	07d9      	lsls	r1, r3, #31
 803443e:	d402      	bmi.n	8034446 <_fclose_r+0x36>
 8034440:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8034442:	f7fa f848 	bl	802e4d6 <__retarget_lock_release_recursive>
 8034446:	2600      	movs	r6, #0
 8034448:	4630      	mov	r0, r6
 803444a:	bd70      	pop	{r4, r5, r6, pc}
 803444c:	4621      	mov	r1, r4
 803444e:	4628      	mov	r0, r5
 8034450:	f7f8 f996 	bl	802c780 <__sflush_r>
 8034454:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8034456:	4606      	mov	r6, r0
 8034458:	b133      	cbz	r3, 8034468 <_fclose_r+0x58>
 803445a:	69e1      	ldr	r1, [r4, #28]
 803445c:	4628      	mov	r0, r5
 803445e:	4798      	blx	r3
 8034460:	2800      	cmp	r0, #0
 8034462:	bfb8      	it	lt
 8034464:	f04f 36ff 	movlt.w	r6, #4294967295	@ 0xffffffff
 8034468:	89a3      	ldrh	r3, [r4, #12]
 803446a:	061a      	lsls	r2, r3, #24
 803446c:	d503      	bpl.n	8034476 <_fclose_r+0x66>
 803446e:	6921      	ldr	r1, [r4, #16]
 8034470:	4628      	mov	r0, r5
 8034472:	f7fa ff33 	bl	802f2dc <_free_r>
 8034476:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8034478:	b141      	cbz	r1, 803448c <_fclose_r+0x7c>
 803447a:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 803447e:	4299      	cmp	r1, r3
 8034480:	d002      	beq.n	8034488 <_fclose_r+0x78>
 8034482:	4628      	mov	r0, r5
 8034484:	f7fa ff2a 	bl	802f2dc <_free_r>
 8034488:	2300      	movs	r3, #0
 803448a:	6323      	str	r3, [r4, #48]	@ 0x30
 803448c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 803448e:	b121      	cbz	r1, 803449a <_fclose_r+0x8a>
 8034490:	4628      	mov	r0, r5
 8034492:	f7fa ff23 	bl	802f2dc <_free_r>
 8034496:	2300      	movs	r3, #0
 8034498:	6463      	str	r3, [r4, #68]	@ 0x44
 803449a:	f7f8 fb2f 	bl	802cafc <__sfp_lock_acquire>
 803449e:	2300      	movs	r3, #0
 80344a0:	81a3      	strh	r3, [r4, #12]
 80344a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80344a4:	07db      	lsls	r3, r3, #31
 80344a6:	d402      	bmi.n	80344ae <_fclose_r+0x9e>
 80344a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80344aa:	f7fa f814 	bl	802e4d6 <__retarget_lock_release_recursive>
 80344ae:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80344b0:	f7fa f80d 	bl	802e4ce <__retarget_lock_close_recursive>
 80344b4:	f7f8 fb28 	bl	802cb08 <__sfp_lock_release>
 80344b8:	e7c6      	b.n	8034448 <_fclose_r+0x38>

080344ba <__sccl>:
 80344ba:	b570      	push	{r4, r5, r6, lr}
 80344bc:	780b      	ldrb	r3, [r1, #0]
 80344be:	4604      	mov	r4, r0
 80344c0:	2b5e      	cmp	r3, #94	@ 0x5e
 80344c2:	bf0b      	itete	eq
 80344c4:	784b      	ldrbeq	r3, [r1, #1]
 80344c6:	1c4a      	addne	r2, r1, #1
 80344c8:	1c8a      	addeq	r2, r1, #2
 80344ca:	2100      	movne	r1, #0
 80344cc:	bf08      	it	eq
 80344ce:	2101      	moveq	r1, #1
 80344d0:	3801      	subs	r0, #1
 80344d2:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80344d6:	f800 1f01 	strb.w	r1, [r0, #1]!
 80344da:	42a8      	cmp	r0, r5
 80344dc:	d1fb      	bne.n	80344d6 <__sccl+0x1c>
 80344de:	b90b      	cbnz	r3, 80344e4 <__sccl+0x2a>
 80344e0:	1e50      	subs	r0, r2, #1
 80344e2:	bd70      	pop	{r4, r5, r6, pc}
 80344e4:	f081 0101 	eor.w	r1, r1, #1
 80344e8:	54e1      	strb	r1, [r4, r3]
 80344ea:	4610      	mov	r0, r2
 80344ec:	4602      	mov	r2, r0
 80344ee:	f812 5b01 	ldrb.w	r5, [r2], #1
 80344f2:	2d2d      	cmp	r5, #45	@ 0x2d
 80344f4:	d005      	beq.n	8034502 <__sccl+0x48>
 80344f6:	2d5d      	cmp	r5, #93	@ 0x5d
 80344f8:	d016      	beq.n	8034528 <__sccl+0x6e>
 80344fa:	2d00      	cmp	r5, #0
 80344fc:	d0f1      	beq.n	80344e2 <__sccl+0x28>
 80344fe:	462b      	mov	r3, r5
 8034500:	e7f2      	b.n	80344e8 <__sccl+0x2e>
 8034502:	7846      	ldrb	r6, [r0, #1]
 8034504:	2e5d      	cmp	r6, #93	@ 0x5d
 8034506:	d0fa      	beq.n	80344fe <__sccl+0x44>
 8034508:	42b3      	cmp	r3, r6
 803450a:	dcf8      	bgt.n	80344fe <__sccl+0x44>
 803450c:	3002      	adds	r0, #2
 803450e:	461a      	mov	r2, r3
 8034510:	3201      	adds	r2, #1
 8034512:	4296      	cmp	r6, r2
 8034514:	54a1      	strb	r1, [r4, r2]
 8034516:	dcfb      	bgt.n	8034510 <__sccl+0x56>
 8034518:	1af2      	subs	r2, r6, r3
 803451a:	3a01      	subs	r2, #1
 803451c:	1c5d      	adds	r5, r3, #1
 803451e:	42b3      	cmp	r3, r6
 8034520:	bfa8      	it	ge
 8034522:	2200      	movge	r2, #0
 8034524:	18ab      	adds	r3, r5, r2
 8034526:	e7e1      	b.n	80344ec <__sccl+0x32>
 8034528:	4610      	mov	r0, r2
 803452a:	e7da      	b.n	80344e2 <__sccl+0x28>

0803452c <_realloc_r>:
 803452c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8034530:	4682      	mov	sl, r0
 8034532:	4693      	mov	fp, r2
 8034534:	460c      	mov	r4, r1
 8034536:	b929      	cbnz	r1, 8034544 <_realloc_r+0x18>
 8034538:	4611      	mov	r1, r2
 803453a:	b003      	add	sp, #12
 803453c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8034540:	f7fa bfe4 	b.w	802f50c <_malloc_r>
 8034544:	f7ff faec 	bl	8033b20 <__malloc_lock>
 8034548:	f10b 080b 	add.w	r8, fp, #11
 803454c:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8034550:	f1b8 0f16 	cmp.w	r8, #22
 8034554:	f1a4 0908 	sub.w	r9, r4, #8
 8034558:	f025 0603 	bic.w	r6, r5, #3
 803455c:	d908      	bls.n	8034570 <_realloc_r+0x44>
 803455e:	f038 0807 	bics.w	r8, r8, #7
 8034562:	d507      	bpl.n	8034574 <_realloc_r+0x48>
 8034564:	230c      	movs	r3, #12
 8034566:	f8ca 3000 	str.w	r3, [sl]
 803456a:	f04f 0b00 	mov.w	fp, #0
 803456e:	e032      	b.n	80345d6 <_realloc_r+0xaa>
 8034570:	f04f 0810 	mov.w	r8, #16
 8034574:	45c3      	cmp	fp, r8
 8034576:	d8f5      	bhi.n	8034564 <_realloc_r+0x38>
 8034578:	4546      	cmp	r6, r8
 803457a:	f280 8174 	bge.w	8034866 <_realloc_r+0x33a>
 803457e:	4b9e      	ldr	r3, [pc, #632]	@ (80347f8 <_realloc_r+0x2cc>)
 8034580:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8034584:	eb09 0106 	add.w	r1, r9, r6
 8034588:	458c      	cmp	ip, r1
 803458a:	6848      	ldr	r0, [r1, #4]
 803458c:	d005      	beq.n	803459a <_realloc_r+0x6e>
 803458e:	f020 0201 	bic.w	r2, r0, #1
 8034592:	440a      	add	r2, r1
 8034594:	6852      	ldr	r2, [r2, #4]
 8034596:	07d7      	lsls	r7, r2, #31
 8034598:	d449      	bmi.n	803462e <_realloc_r+0x102>
 803459a:	f020 0003 	bic.w	r0, r0, #3
 803459e:	458c      	cmp	ip, r1
 80345a0:	eb06 0700 	add.w	r7, r6, r0
 80345a4:	d11b      	bne.n	80345de <_realloc_r+0xb2>
 80345a6:	f108 0210 	add.w	r2, r8, #16
 80345aa:	42ba      	cmp	r2, r7
 80345ac:	dc41      	bgt.n	8034632 <_realloc_r+0x106>
 80345ae:	eb09 0208 	add.w	r2, r9, r8
 80345b2:	eba7 0708 	sub.w	r7, r7, r8
 80345b6:	f047 0701 	orr.w	r7, r7, #1
 80345ba:	609a      	str	r2, [r3, #8]
 80345bc:	6057      	str	r7, [r2, #4]
 80345be:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80345c2:	f003 0301 	and.w	r3, r3, #1
 80345c6:	ea43 0308 	orr.w	r3, r3, r8
 80345ca:	f844 3c04 	str.w	r3, [r4, #-4]
 80345ce:	4650      	mov	r0, sl
 80345d0:	f7ff faac 	bl	8033b2c <__malloc_unlock>
 80345d4:	46a3      	mov	fp, r4
 80345d6:	4658      	mov	r0, fp
 80345d8:	b003      	add	sp, #12
 80345da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80345de:	45b8      	cmp	r8, r7
 80345e0:	dc27      	bgt.n	8034632 <_realloc_r+0x106>
 80345e2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80345e6:	60d3      	str	r3, [r2, #12]
 80345e8:	609a      	str	r2, [r3, #8]
 80345ea:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80345ee:	eba7 0008 	sub.w	r0, r7, r8
 80345f2:	280f      	cmp	r0, #15
 80345f4:	f003 0301 	and.w	r3, r3, #1
 80345f8:	eb09 0207 	add.w	r2, r9, r7
 80345fc:	f240 8135 	bls.w	803486a <_realloc_r+0x33e>
 8034600:	eb09 0108 	add.w	r1, r9, r8
 8034604:	ea48 0303 	orr.w	r3, r8, r3
 8034608:	f040 0001 	orr.w	r0, r0, #1
 803460c:	f8c9 3004 	str.w	r3, [r9, #4]
 8034610:	6048      	str	r0, [r1, #4]
 8034612:	6853      	ldr	r3, [r2, #4]
 8034614:	f043 0301 	orr.w	r3, r3, #1
 8034618:	6053      	str	r3, [r2, #4]
 803461a:	3108      	adds	r1, #8
 803461c:	4650      	mov	r0, sl
 803461e:	f7fa fe5d 	bl	802f2dc <_free_r>
 8034622:	4650      	mov	r0, sl
 8034624:	f7ff fa82 	bl	8033b2c <__malloc_unlock>
 8034628:	f109 0b08 	add.w	fp, r9, #8
 803462c:	e7d3      	b.n	80345d6 <_realloc_r+0xaa>
 803462e:	2000      	movs	r0, #0
 8034630:	4601      	mov	r1, r0
 8034632:	07ea      	lsls	r2, r5, #31
 8034634:	f100 80c7 	bmi.w	80347c6 <_realloc_r+0x29a>
 8034638:	f854 5c08 	ldr.w	r5, [r4, #-8]
 803463c:	eba9 0505 	sub.w	r5, r9, r5
 8034640:	686a      	ldr	r2, [r5, #4]
 8034642:	f022 0203 	bic.w	r2, r2, #3
 8034646:	4432      	add	r2, r6
 8034648:	9201      	str	r2, [sp, #4]
 803464a:	2900      	cmp	r1, #0
 803464c:	f000 8086 	beq.w	803475c <_realloc_r+0x230>
 8034650:	458c      	cmp	ip, r1
 8034652:	eb00 0702 	add.w	r7, r0, r2
 8034656:	d149      	bne.n	80346ec <_realloc_r+0x1c0>
 8034658:	f108 0210 	add.w	r2, r8, #16
 803465c:	42ba      	cmp	r2, r7
 803465e:	dc7d      	bgt.n	803475c <_realloc_r+0x230>
 8034660:	46ab      	mov	fp, r5
 8034662:	68ea      	ldr	r2, [r5, #12]
 8034664:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 8034668:	60ca      	str	r2, [r1, #12]
 803466a:	6091      	str	r1, [r2, #8]
 803466c:	1f32      	subs	r2, r6, #4
 803466e:	2a24      	cmp	r2, #36	@ 0x24
 8034670:	d836      	bhi.n	80346e0 <_realloc_r+0x1b4>
 8034672:	2a13      	cmp	r2, #19
 8034674:	d932      	bls.n	80346dc <_realloc_r+0x1b0>
 8034676:	6821      	ldr	r1, [r4, #0]
 8034678:	60a9      	str	r1, [r5, #8]
 803467a:	6861      	ldr	r1, [r4, #4]
 803467c:	60e9      	str	r1, [r5, #12]
 803467e:	2a1b      	cmp	r2, #27
 8034680:	d81a      	bhi.n	80346b8 <_realloc_r+0x18c>
 8034682:	3408      	adds	r4, #8
 8034684:	f105 0210 	add.w	r2, r5, #16
 8034688:	6821      	ldr	r1, [r4, #0]
 803468a:	6011      	str	r1, [r2, #0]
 803468c:	6861      	ldr	r1, [r4, #4]
 803468e:	6051      	str	r1, [r2, #4]
 8034690:	68a1      	ldr	r1, [r4, #8]
 8034692:	6091      	str	r1, [r2, #8]
 8034694:	eb05 0208 	add.w	r2, r5, r8
 8034698:	eba7 0708 	sub.w	r7, r7, r8
 803469c:	f047 0701 	orr.w	r7, r7, #1
 80346a0:	609a      	str	r2, [r3, #8]
 80346a2:	6057      	str	r7, [r2, #4]
 80346a4:	686b      	ldr	r3, [r5, #4]
 80346a6:	f003 0301 	and.w	r3, r3, #1
 80346aa:	ea43 0308 	orr.w	r3, r3, r8
 80346ae:	606b      	str	r3, [r5, #4]
 80346b0:	4650      	mov	r0, sl
 80346b2:	f7ff fa3b 	bl	8033b2c <__malloc_unlock>
 80346b6:	e78e      	b.n	80345d6 <_realloc_r+0xaa>
 80346b8:	68a1      	ldr	r1, [r4, #8]
 80346ba:	6129      	str	r1, [r5, #16]
 80346bc:	68e1      	ldr	r1, [r4, #12]
 80346be:	6169      	str	r1, [r5, #20]
 80346c0:	2a24      	cmp	r2, #36	@ 0x24
 80346c2:	bf01      	itttt	eq
 80346c4:	6922      	ldreq	r2, [r4, #16]
 80346c6:	61aa      	streq	r2, [r5, #24]
 80346c8:	6961      	ldreq	r1, [r4, #20]
 80346ca:	61e9      	streq	r1, [r5, #28]
 80346cc:	bf19      	ittee	ne
 80346ce:	3410      	addne	r4, #16
 80346d0:	f105 0218 	addne.w	r2, r5, #24
 80346d4:	f105 0220 	addeq.w	r2, r5, #32
 80346d8:	3418      	addeq	r4, #24
 80346da:	e7d5      	b.n	8034688 <_realloc_r+0x15c>
 80346dc:	465a      	mov	r2, fp
 80346de:	e7d3      	b.n	8034688 <_realloc_r+0x15c>
 80346e0:	4621      	mov	r1, r4
 80346e2:	4658      	mov	r0, fp
 80346e4:	f7f8 fca2 	bl	802d02c <memmove>
 80346e8:	4b43      	ldr	r3, [pc, #268]	@ (80347f8 <_realloc_r+0x2cc>)
 80346ea:	e7d3      	b.n	8034694 <_realloc_r+0x168>
 80346ec:	45b8      	cmp	r8, r7
 80346ee:	dc35      	bgt.n	803475c <_realloc_r+0x230>
 80346f0:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80346f4:	4628      	mov	r0, r5
 80346f6:	60d3      	str	r3, [r2, #12]
 80346f8:	609a      	str	r2, [r3, #8]
 80346fa:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80346fe:	68eb      	ldr	r3, [r5, #12]
 8034700:	60d3      	str	r3, [r2, #12]
 8034702:	609a      	str	r2, [r3, #8]
 8034704:	1f32      	subs	r2, r6, #4
 8034706:	2a24      	cmp	r2, #36	@ 0x24
 8034708:	d824      	bhi.n	8034754 <_realloc_r+0x228>
 803470a:	2a13      	cmp	r2, #19
 803470c:	d908      	bls.n	8034720 <_realloc_r+0x1f4>
 803470e:	6823      	ldr	r3, [r4, #0]
 8034710:	60ab      	str	r3, [r5, #8]
 8034712:	6863      	ldr	r3, [r4, #4]
 8034714:	60eb      	str	r3, [r5, #12]
 8034716:	2a1b      	cmp	r2, #27
 8034718:	d80a      	bhi.n	8034730 <_realloc_r+0x204>
 803471a:	3408      	adds	r4, #8
 803471c:	f105 0010 	add.w	r0, r5, #16
 8034720:	6823      	ldr	r3, [r4, #0]
 8034722:	6003      	str	r3, [r0, #0]
 8034724:	6863      	ldr	r3, [r4, #4]
 8034726:	6043      	str	r3, [r0, #4]
 8034728:	68a3      	ldr	r3, [r4, #8]
 803472a:	6083      	str	r3, [r0, #8]
 803472c:	46a9      	mov	r9, r5
 803472e:	e75c      	b.n	80345ea <_realloc_r+0xbe>
 8034730:	68a3      	ldr	r3, [r4, #8]
 8034732:	612b      	str	r3, [r5, #16]
 8034734:	68e3      	ldr	r3, [r4, #12]
 8034736:	616b      	str	r3, [r5, #20]
 8034738:	2a24      	cmp	r2, #36	@ 0x24
 803473a:	bf01      	itttt	eq
 803473c:	6923      	ldreq	r3, [r4, #16]
 803473e:	61ab      	streq	r3, [r5, #24]
 8034740:	6963      	ldreq	r3, [r4, #20]
 8034742:	61eb      	streq	r3, [r5, #28]
 8034744:	bf19      	ittee	ne
 8034746:	3410      	addne	r4, #16
 8034748:	f105 0018 	addne.w	r0, r5, #24
 803474c:	f105 0020 	addeq.w	r0, r5, #32
 8034750:	3418      	addeq	r4, #24
 8034752:	e7e5      	b.n	8034720 <_realloc_r+0x1f4>
 8034754:	4621      	mov	r1, r4
 8034756:	f7f8 fc69 	bl	802d02c <memmove>
 803475a:	e7e7      	b.n	803472c <_realloc_r+0x200>
 803475c:	9b01      	ldr	r3, [sp, #4]
 803475e:	4598      	cmp	r8, r3
 8034760:	dc31      	bgt.n	80347c6 <_realloc_r+0x29a>
 8034762:	4628      	mov	r0, r5
 8034764:	68eb      	ldr	r3, [r5, #12]
 8034766:	f850 2f08 	ldr.w	r2, [r0, #8]!
 803476a:	60d3      	str	r3, [r2, #12]
 803476c:	609a      	str	r2, [r3, #8]
 803476e:	1f32      	subs	r2, r6, #4
 8034770:	2a24      	cmp	r2, #36	@ 0x24
 8034772:	d824      	bhi.n	80347be <_realloc_r+0x292>
 8034774:	2a13      	cmp	r2, #19
 8034776:	d908      	bls.n	803478a <_realloc_r+0x25e>
 8034778:	6823      	ldr	r3, [r4, #0]
 803477a:	60ab      	str	r3, [r5, #8]
 803477c:	6863      	ldr	r3, [r4, #4]
 803477e:	60eb      	str	r3, [r5, #12]
 8034780:	2a1b      	cmp	r2, #27
 8034782:	d80a      	bhi.n	803479a <_realloc_r+0x26e>
 8034784:	3408      	adds	r4, #8
 8034786:	f105 0010 	add.w	r0, r5, #16
 803478a:	6823      	ldr	r3, [r4, #0]
 803478c:	6003      	str	r3, [r0, #0]
 803478e:	6863      	ldr	r3, [r4, #4]
 8034790:	6043      	str	r3, [r0, #4]
 8034792:	68a3      	ldr	r3, [r4, #8]
 8034794:	6083      	str	r3, [r0, #8]
 8034796:	9f01      	ldr	r7, [sp, #4]
 8034798:	e7c8      	b.n	803472c <_realloc_r+0x200>
 803479a:	68a3      	ldr	r3, [r4, #8]
 803479c:	612b      	str	r3, [r5, #16]
 803479e:	68e3      	ldr	r3, [r4, #12]
 80347a0:	616b      	str	r3, [r5, #20]
 80347a2:	2a24      	cmp	r2, #36	@ 0x24
 80347a4:	bf01      	itttt	eq
 80347a6:	6923      	ldreq	r3, [r4, #16]
 80347a8:	61ab      	streq	r3, [r5, #24]
 80347aa:	6963      	ldreq	r3, [r4, #20]
 80347ac:	61eb      	streq	r3, [r5, #28]
 80347ae:	bf19      	ittee	ne
 80347b0:	3410      	addne	r4, #16
 80347b2:	f105 0018 	addne.w	r0, r5, #24
 80347b6:	f105 0020 	addeq.w	r0, r5, #32
 80347ba:	3418      	addeq	r4, #24
 80347bc:	e7e5      	b.n	803478a <_realloc_r+0x25e>
 80347be:	4621      	mov	r1, r4
 80347c0:	f7f8 fc34 	bl	802d02c <memmove>
 80347c4:	e7e7      	b.n	8034796 <_realloc_r+0x26a>
 80347c6:	4659      	mov	r1, fp
 80347c8:	4650      	mov	r0, sl
 80347ca:	f7fa fe9f 	bl	802f50c <_malloc_r>
 80347ce:	4683      	mov	fp, r0
 80347d0:	b918      	cbnz	r0, 80347da <_realloc_r+0x2ae>
 80347d2:	4650      	mov	r0, sl
 80347d4:	f7ff f9aa 	bl	8033b2c <__malloc_unlock>
 80347d8:	e6c7      	b.n	803456a <_realloc_r+0x3e>
 80347da:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80347de:	f023 0301 	bic.w	r3, r3, #1
 80347e2:	444b      	add	r3, r9
 80347e4:	f1a0 0208 	sub.w	r2, r0, #8
 80347e8:	4293      	cmp	r3, r2
 80347ea:	d107      	bne.n	80347fc <_realloc_r+0x2d0>
 80347ec:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80347f0:	f027 0703 	bic.w	r7, r7, #3
 80347f4:	4437      	add	r7, r6
 80347f6:	e6f8      	b.n	80345ea <_realloc_r+0xbe>
 80347f8:	2000040c 	.word	0x2000040c
 80347fc:	1f32      	subs	r2, r6, #4
 80347fe:	2a24      	cmp	r2, #36	@ 0x24
 8034800:	d82d      	bhi.n	803485e <_realloc_r+0x332>
 8034802:	2a13      	cmp	r2, #19
 8034804:	d928      	bls.n	8034858 <_realloc_r+0x32c>
 8034806:	6823      	ldr	r3, [r4, #0]
 8034808:	6003      	str	r3, [r0, #0]
 803480a:	6863      	ldr	r3, [r4, #4]
 803480c:	6043      	str	r3, [r0, #4]
 803480e:	2a1b      	cmp	r2, #27
 8034810:	d80e      	bhi.n	8034830 <_realloc_r+0x304>
 8034812:	f104 0208 	add.w	r2, r4, #8
 8034816:	f100 0308 	add.w	r3, r0, #8
 803481a:	6811      	ldr	r1, [r2, #0]
 803481c:	6019      	str	r1, [r3, #0]
 803481e:	6851      	ldr	r1, [r2, #4]
 8034820:	6059      	str	r1, [r3, #4]
 8034822:	6892      	ldr	r2, [r2, #8]
 8034824:	609a      	str	r2, [r3, #8]
 8034826:	4621      	mov	r1, r4
 8034828:	4650      	mov	r0, sl
 803482a:	f7fa fd57 	bl	802f2dc <_free_r>
 803482e:	e73f      	b.n	80346b0 <_realloc_r+0x184>
 8034830:	68a3      	ldr	r3, [r4, #8]
 8034832:	6083      	str	r3, [r0, #8]
 8034834:	68e3      	ldr	r3, [r4, #12]
 8034836:	60c3      	str	r3, [r0, #12]
 8034838:	2a24      	cmp	r2, #36	@ 0x24
 803483a:	bf01      	itttt	eq
 803483c:	6923      	ldreq	r3, [r4, #16]
 803483e:	6103      	streq	r3, [r0, #16]
 8034840:	6961      	ldreq	r1, [r4, #20]
 8034842:	6141      	streq	r1, [r0, #20]
 8034844:	bf19      	ittee	ne
 8034846:	f104 0210 	addne.w	r2, r4, #16
 803484a:	f100 0310 	addne.w	r3, r0, #16
 803484e:	f104 0218 	addeq.w	r2, r4, #24
 8034852:	f100 0318 	addeq.w	r3, r0, #24
 8034856:	e7e0      	b.n	803481a <_realloc_r+0x2ee>
 8034858:	4603      	mov	r3, r0
 803485a:	4622      	mov	r2, r4
 803485c:	e7dd      	b.n	803481a <_realloc_r+0x2ee>
 803485e:	4621      	mov	r1, r4
 8034860:	f7f8 fbe4 	bl	802d02c <memmove>
 8034864:	e7df      	b.n	8034826 <_realloc_r+0x2fa>
 8034866:	4637      	mov	r7, r6
 8034868:	e6bf      	b.n	80345ea <_realloc_r+0xbe>
 803486a:	431f      	orrs	r7, r3
 803486c:	f8c9 7004 	str.w	r7, [r9, #4]
 8034870:	6853      	ldr	r3, [r2, #4]
 8034872:	f043 0301 	orr.w	r3, r3, #1
 8034876:	6053      	str	r3, [r2, #4]
 8034878:	e6d3      	b.n	8034622 <_realloc_r+0xf6>
 803487a:	bf00      	nop

0803487c <sulp>:
 803487c:	b570      	push	{r4, r5, r6, lr}
 803487e:	4604      	mov	r4, r0
 8034880:	460d      	mov	r5, r1
 8034882:	ec45 4b10 	vmov	d0, r4, r5
 8034886:	4616      	mov	r6, r2
 8034888:	f7ff fc7c 	bl	8034184 <__ulp>
 803488c:	ec51 0b10 	vmov	r0, r1, d0
 8034890:	b17e      	cbz	r6, 80348b2 <sulp+0x36>
 8034892:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8034896:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 803489a:	2b00      	cmp	r3, #0
 803489c:	dd09      	ble.n	80348b2 <sulp+0x36>
 803489e:	051b      	lsls	r3, r3, #20
 80348a0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80348a4:	2400      	movs	r4, #0
 80348a6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80348aa:	4622      	mov	r2, r4
 80348ac:	462b      	mov	r3, r5
 80348ae:	f7db febb 	bl	8010628 <__aeabi_dmul>
 80348b2:	ec41 0b10 	vmov	d0, r0, r1
 80348b6:	bd70      	pop	{r4, r5, r6, pc}

080348b8 <_strtod_l>:
 80348b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80348bc:	b09f      	sub	sp, #124	@ 0x7c
 80348be:	460c      	mov	r4, r1
 80348c0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80348c2:	2200      	movs	r2, #0
 80348c4:	921a      	str	r2, [sp, #104]	@ 0x68
 80348c6:	9005      	str	r0, [sp, #20]
 80348c8:	f04f 0a00 	mov.w	sl, #0
 80348cc:	f04f 0b00 	mov.w	fp, #0
 80348d0:	460a      	mov	r2, r1
 80348d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80348d4:	7811      	ldrb	r1, [r2, #0]
 80348d6:	292b      	cmp	r1, #43	@ 0x2b
 80348d8:	d04a      	beq.n	8034970 <_strtod_l+0xb8>
 80348da:	d838      	bhi.n	803494e <_strtod_l+0x96>
 80348dc:	290d      	cmp	r1, #13
 80348de:	d832      	bhi.n	8034946 <_strtod_l+0x8e>
 80348e0:	2908      	cmp	r1, #8
 80348e2:	d832      	bhi.n	803494a <_strtod_l+0x92>
 80348e4:	2900      	cmp	r1, #0
 80348e6:	d03b      	beq.n	8034960 <_strtod_l+0xa8>
 80348e8:	2200      	movs	r2, #0
 80348ea:	920b      	str	r2, [sp, #44]	@ 0x2c
 80348ec:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80348ee:	782a      	ldrb	r2, [r5, #0]
 80348f0:	2a30      	cmp	r2, #48	@ 0x30
 80348f2:	f040 80b3 	bne.w	8034a5c <_strtod_l+0x1a4>
 80348f6:	786a      	ldrb	r2, [r5, #1]
 80348f8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80348fc:	2a58      	cmp	r2, #88	@ 0x58
 80348fe:	d16e      	bne.n	80349de <_strtod_l+0x126>
 8034900:	9302      	str	r3, [sp, #8]
 8034902:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8034904:	9301      	str	r3, [sp, #4]
 8034906:	ab1a      	add	r3, sp, #104	@ 0x68
 8034908:	9300      	str	r3, [sp, #0]
 803490a:	4a8e      	ldr	r2, [pc, #568]	@ (8034b44 <_strtod_l+0x28c>)
 803490c:	9805      	ldr	r0, [sp, #20]
 803490e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8034910:	a919      	add	r1, sp, #100	@ 0x64
 8034912:	f001 fa51 	bl	8035db8 <__gethex>
 8034916:	f010 060f 	ands.w	r6, r0, #15
 803491a:	4604      	mov	r4, r0
 803491c:	d005      	beq.n	803492a <_strtod_l+0x72>
 803491e:	2e06      	cmp	r6, #6
 8034920:	d128      	bne.n	8034974 <_strtod_l+0xbc>
 8034922:	3501      	adds	r5, #1
 8034924:	2300      	movs	r3, #0
 8034926:	9519      	str	r5, [sp, #100]	@ 0x64
 8034928:	930b      	str	r3, [sp, #44]	@ 0x2c
 803492a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 803492c:	2b00      	cmp	r3, #0
 803492e:	f040 858e 	bne.w	803544e <_strtod_l+0xb96>
 8034932:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8034934:	b1cb      	cbz	r3, 803496a <_strtod_l+0xb2>
 8034936:	4652      	mov	r2, sl
 8034938:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 803493c:	ec43 2b10 	vmov	d0, r2, r3
 8034940:	b01f      	add	sp, #124	@ 0x7c
 8034942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8034946:	2920      	cmp	r1, #32
 8034948:	d1ce      	bne.n	80348e8 <_strtod_l+0x30>
 803494a:	3201      	adds	r2, #1
 803494c:	e7c1      	b.n	80348d2 <_strtod_l+0x1a>
 803494e:	292d      	cmp	r1, #45	@ 0x2d
 8034950:	d1ca      	bne.n	80348e8 <_strtod_l+0x30>
 8034952:	2101      	movs	r1, #1
 8034954:	910b      	str	r1, [sp, #44]	@ 0x2c
 8034956:	1c51      	adds	r1, r2, #1
 8034958:	9119      	str	r1, [sp, #100]	@ 0x64
 803495a:	7852      	ldrb	r2, [r2, #1]
 803495c:	2a00      	cmp	r2, #0
 803495e:	d1c5      	bne.n	80348ec <_strtod_l+0x34>
 8034960:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8034962:	9419      	str	r4, [sp, #100]	@ 0x64
 8034964:	2b00      	cmp	r3, #0
 8034966:	f040 8570 	bne.w	803544a <_strtod_l+0xb92>
 803496a:	4652      	mov	r2, sl
 803496c:	465b      	mov	r3, fp
 803496e:	e7e5      	b.n	803493c <_strtod_l+0x84>
 8034970:	2100      	movs	r1, #0
 8034972:	e7ef      	b.n	8034954 <_strtod_l+0x9c>
 8034974:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8034976:	b13a      	cbz	r2, 8034988 <_strtod_l+0xd0>
 8034978:	2135      	movs	r1, #53	@ 0x35
 803497a:	a81c      	add	r0, sp, #112	@ 0x70
 803497c:	f7ff fcfc 	bl	8034378 <__copybits>
 8034980:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8034982:	9805      	ldr	r0, [sp, #20]
 8034984:	f7ff f8fd 	bl	8033b82 <_Bfree>
 8034988:	3e01      	subs	r6, #1
 803498a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 803498c:	2e04      	cmp	r6, #4
 803498e:	d806      	bhi.n	803499e <_strtod_l+0xe6>
 8034990:	e8df f006 	tbb	[pc, r6]
 8034994:	201d0314 	.word	0x201d0314
 8034998:	14          	.byte	0x14
 8034999:	00          	.byte	0x00
 803499a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 803499e:	05e1      	lsls	r1, r4, #23
 80349a0:	bf48      	it	mi
 80349a2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80349a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80349aa:	0d1b      	lsrs	r3, r3, #20
 80349ac:	051b      	lsls	r3, r3, #20
 80349ae:	2b00      	cmp	r3, #0
 80349b0:	d1bb      	bne.n	803492a <_strtod_l+0x72>
 80349b2:	f7f9 fd59 	bl	802e468 <__errno>
 80349b6:	2322      	movs	r3, #34	@ 0x22
 80349b8:	6003      	str	r3, [r0, #0]
 80349ba:	e7b6      	b.n	803492a <_strtod_l+0x72>
 80349bc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80349c0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80349c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80349c8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80349cc:	e7e7      	b.n	803499e <_strtod_l+0xe6>
 80349ce:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8034b4c <_strtod_l+0x294>
 80349d2:	e7e4      	b.n	803499e <_strtod_l+0xe6>
 80349d4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80349d8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80349dc:	e7df      	b.n	803499e <_strtod_l+0xe6>
 80349de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80349e0:	1c5a      	adds	r2, r3, #1
 80349e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80349e4:	785b      	ldrb	r3, [r3, #1]
 80349e6:	2b30      	cmp	r3, #48	@ 0x30
 80349e8:	d0f9      	beq.n	80349de <_strtod_l+0x126>
 80349ea:	2b00      	cmp	r3, #0
 80349ec:	d09d      	beq.n	803492a <_strtod_l+0x72>
 80349ee:	2301      	movs	r3, #1
 80349f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80349f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80349f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80349f6:	2300      	movs	r3, #0
 80349f8:	9308      	str	r3, [sp, #32]
 80349fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80349fc:	461f      	mov	r7, r3
 80349fe:	220a      	movs	r2, #10
 8034a00:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8034a02:	7805      	ldrb	r5, [r0, #0]
 8034a04:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8034a08:	b2d9      	uxtb	r1, r3
 8034a0a:	2909      	cmp	r1, #9
 8034a0c:	d928      	bls.n	8034a60 <_strtod_l+0x1a8>
 8034a0e:	494e      	ldr	r1, [pc, #312]	@ (8034b48 <_strtod_l+0x290>)
 8034a10:	2201      	movs	r2, #1
 8034a12:	f7f8 fb5a 	bl	802d0ca <strncmp>
 8034a16:	2800      	cmp	r0, #0
 8034a18:	d032      	beq.n	8034a80 <_strtod_l+0x1c8>
 8034a1a:	2000      	movs	r0, #0
 8034a1c:	462a      	mov	r2, r5
 8034a1e:	4681      	mov	r9, r0
 8034a20:	463d      	mov	r5, r7
 8034a22:	4603      	mov	r3, r0
 8034a24:	2a65      	cmp	r2, #101	@ 0x65
 8034a26:	d001      	beq.n	8034a2c <_strtod_l+0x174>
 8034a28:	2a45      	cmp	r2, #69	@ 0x45
 8034a2a:	d114      	bne.n	8034a56 <_strtod_l+0x19e>
 8034a2c:	b91d      	cbnz	r5, 8034a36 <_strtod_l+0x17e>
 8034a2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8034a30:	4302      	orrs	r2, r0
 8034a32:	d095      	beq.n	8034960 <_strtod_l+0xa8>
 8034a34:	2500      	movs	r5, #0
 8034a36:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8034a38:	1c62      	adds	r2, r4, #1
 8034a3a:	9219      	str	r2, [sp, #100]	@ 0x64
 8034a3c:	7862      	ldrb	r2, [r4, #1]
 8034a3e:	2a2b      	cmp	r2, #43	@ 0x2b
 8034a40:	d077      	beq.n	8034b32 <_strtod_l+0x27a>
 8034a42:	2a2d      	cmp	r2, #45	@ 0x2d
 8034a44:	d07b      	beq.n	8034b3e <_strtod_l+0x286>
 8034a46:	f04f 0c00 	mov.w	ip, #0
 8034a4a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8034a4e:	2909      	cmp	r1, #9
 8034a50:	f240 8082 	bls.w	8034b58 <_strtod_l+0x2a0>
 8034a54:	9419      	str	r4, [sp, #100]	@ 0x64
 8034a56:	f04f 0800 	mov.w	r8, #0
 8034a5a:	e0a2      	b.n	8034ba2 <_strtod_l+0x2ea>
 8034a5c:	2300      	movs	r3, #0
 8034a5e:	e7c7      	b.n	80349f0 <_strtod_l+0x138>
 8034a60:	2f08      	cmp	r7, #8
 8034a62:	bfd5      	itete	le
 8034a64:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8034a66:	9908      	ldrgt	r1, [sp, #32]
 8034a68:	fb02 3301 	mlale	r3, r2, r1, r3
 8034a6c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8034a70:	f100 0001 	add.w	r0, r0, #1
 8034a74:	bfd4      	ite	le
 8034a76:	930a      	strle	r3, [sp, #40]	@ 0x28
 8034a78:	9308      	strgt	r3, [sp, #32]
 8034a7a:	3701      	adds	r7, #1
 8034a7c:	9019      	str	r0, [sp, #100]	@ 0x64
 8034a7e:	e7bf      	b.n	8034a00 <_strtod_l+0x148>
 8034a80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8034a82:	1c5a      	adds	r2, r3, #1
 8034a84:	9219      	str	r2, [sp, #100]	@ 0x64
 8034a86:	785a      	ldrb	r2, [r3, #1]
 8034a88:	b37f      	cbz	r7, 8034aea <_strtod_l+0x232>
 8034a8a:	4681      	mov	r9, r0
 8034a8c:	463d      	mov	r5, r7
 8034a8e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8034a92:	2b09      	cmp	r3, #9
 8034a94:	d912      	bls.n	8034abc <_strtod_l+0x204>
 8034a96:	2301      	movs	r3, #1
 8034a98:	e7c4      	b.n	8034a24 <_strtod_l+0x16c>
 8034a9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8034a9c:	1c5a      	adds	r2, r3, #1
 8034a9e:	9219      	str	r2, [sp, #100]	@ 0x64
 8034aa0:	785a      	ldrb	r2, [r3, #1]
 8034aa2:	3001      	adds	r0, #1
 8034aa4:	2a30      	cmp	r2, #48	@ 0x30
 8034aa6:	d0f8      	beq.n	8034a9a <_strtod_l+0x1e2>
 8034aa8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8034aac:	2b08      	cmp	r3, #8
 8034aae:	f200 84d3 	bhi.w	8035458 <_strtod_l+0xba0>
 8034ab2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8034ab4:	930c      	str	r3, [sp, #48]	@ 0x30
 8034ab6:	4681      	mov	r9, r0
 8034ab8:	2000      	movs	r0, #0
 8034aba:	4605      	mov	r5, r0
 8034abc:	3a30      	subs	r2, #48	@ 0x30
 8034abe:	f100 0301 	add.w	r3, r0, #1
 8034ac2:	d02a      	beq.n	8034b1a <_strtod_l+0x262>
 8034ac4:	4499      	add	r9, r3
 8034ac6:	eb00 0c05 	add.w	ip, r0, r5
 8034aca:	462b      	mov	r3, r5
 8034acc:	210a      	movs	r1, #10
 8034ace:	4563      	cmp	r3, ip
 8034ad0:	d10d      	bne.n	8034aee <_strtod_l+0x236>
 8034ad2:	1c69      	adds	r1, r5, #1
 8034ad4:	4401      	add	r1, r0
 8034ad6:	4428      	add	r0, r5
 8034ad8:	2808      	cmp	r0, #8
 8034ada:	dc16      	bgt.n	8034b0a <_strtod_l+0x252>
 8034adc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8034ade:	230a      	movs	r3, #10
 8034ae0:	fb03 2300 	mla	r3, r3, r0, r2
 8034ae4:	930a      	str	r3, [sp, #40]	@ 0x28
 8034ae6:	2300      	movs	r3, #0
 8034ae8:	e018      	b.n	8034b1c <_strtod_l+0x264>
 8034aea:	4638      	mov	r0, r7
 8034aec:	e7da      	b.n	8034aa4 <_strtod_l+0x1ec>
 8034aee:	2b08      	cmp	r3, #8
 8034af0:	f103 0301 	add.w	r3, r3, #1
 8034af4:	dc03      	bgt.n	8034afe <_strtod_l+0x246>
 8034af6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8034af8:	434e      	muls	r6, r1
 8034afa:	960a      	str	r6, [sp, #40]	@ 0x28
 8034afc:	e7e7      	b.n	8034ace <_strtod_l+0x216>
 8034afe:	2b10      	cmp	r3, #16
 8034b00:	bfde      	ittt	le
 8034b02:	9e08      	ldrle	r6, [sp, #32]
 8034b04:	434e      	mulle	r6, r1
 8034b06:	9608      	strle	r6, [sp, #32]
 8034b08:	e7e1      	b.n	8034ace <_strtod_l+0x216>
 8034b0a:	280f      	cmp	r0, #15
 8034b0c:	dceb      	bgt.n	8034ae6 <_strtod_l+0x22e>
 8034b0e:	9808      	ldr	r0, [sp, #32]
 8034b10:	230a      	movs	r3, #10
 8034b12:	fb03 2300 	mla	r3, r3, r0, r2
 8034b16:	9308      	str	r3, [sp, #32]
 8034b18:	e7e5      	b.n	8034ae6 <_strtod_l+0x22e>
 8034b1a:	4629      	mov	r1, r5
 8034b1c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8034b1e:	1c50      	adds	r0, r2, #1
 8034b20:	9019      	str	r0, [sp, #100]	@ 0x64
 8034b22:	7852      	ldrb	r2, [r2, #1]
 8034b24:	4618      	mov	r0, r3
 8034b26:	460d      	mov	r5, r1
 8034b28:	e7b1      	b.n	8034a8e <_strtod_l+0x1d6>
 8034b2a:	f04f 0900 	mov.w	r9, #0
 8034b2e:	2301      	movs	r3, #1
 8034b30:	e77d      	b.n	8034a2e <_strtod_l+0x176>
 8034b32:	f04f 0c00 	mov.w	ip, #0
 8034b36:	1ca2      	adds	r2, r4, #2
 8034b38:	9219      	str	r2, [sp, #100]	@ 0x64
 8034b3a:	78a2      	ldrb	r2, [r4, #2]
 8034b3c:	e785      	b.n	8034a4a <_strtod_l+0x192>
 8034b3e:	f04f 0c01 	mov.w	ip, #1
 8034b42:	e7f8      	b.n	8034b36 <_strtod_l+0x27e>
 8034b44:	0803cb64 	.word	0x0803cb64
 8034b48:	0803c5ce 	.word	0x0803c5ce
 8034b4c:	7ff00000 	.word	0x7ff00000
 8034b50:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8034b52:	1c51      	adds	r1, r2, #1
 8034b54:	9119      	str	r1, [sp, #100]	@ 0x64
 8034b56:	7852      	ldrb	r2, [r2, #1]
 8034b58:	2a30      	cmp	r2, #48	@ 0x30
 8034b5a:	d0f9      	beq.n	8034b50 <_strtod_l+0x298>
 8034b5c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8034b60:	2908      	cmp	r1, #8
 8034b62:	f63f af78 	bhi.w	8034a56 <_strtod_l+0x19e>
 8034b66:	3a30      	subs	r2, #48	@ 0x30
 8034b68:	920e      	str	r2, [sp, #56]	@ 0x38
 8034b6a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8034b6c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8034b6e:	f04f 080a 	mov.w	r8, #10
 8034b72:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8034b74:	1c56      	adds	r6, r2, #1
 8034b76:	9619      	str	r6, [sp, #100]	@ 0x64
 8034b78:	7852      	ldrb	r2, [r2, #1]
 8034b7a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8034b7e:	f1be 0f09 	cmp.w	lr, #9
 8034b82:	d939      	bls.n	8034bf8 <_strtod_l+0x340>
 8034b84:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8034b86:	1a76      	subs	r6, r6, r1
 8034b88:	2e08      	cmp	r6, #8
 8034b8a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8034b8e:	dc03      	bgt.n	8034b98 <_strtod_l+0x2e0>
 8034b90:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8034b92:	4588      	cmp	r8, r1
 8034b94:	bfa8      	it	ge
 8034b96:	4688      	movge	r8, r1
 8034b98:	f1bc 0f00 	cmp.w	ip, #0
 8034b9c:	d001      	beq.n	8034ba2 <_strtod_l+0x2ea>
 8034b9e:	f1c8 0800 	rsb	r8, r8, #0
 8034ba2:	2d00      	cmp	r5, #0
 8034ba4:	d14e      	bne.n	8034c44 <_strtod_l+0x38c>
 8034ba6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8034ba8:	4308      	orrs	r0, r1
 8034baa:	f47f aebe 	bne.w	803492a <_strtod_l+0x72>
 8034bae:	2b00      	cmp	r3, #0
 8034bb0:	f47f aed6 	bne.w	8034960 <_strtod_l+0xa8>
 8034bb4:	2a69      	cmp	r2, #105	@ 0x69
 8034bb6:	d028      	beq.n	8034c0a <_strtod_l+0x352>
 8034bb8:	dc25      	bgt.n	8034c06 <_strtod_l+0x34e>
 8034bba:	2a49      	cmp	r2, #73	@ 0x49
 8034bbc:	d025      	beq.n	8034c0a <_strtod_l+0x352>
 8034bbe:	2a4e      	cmp	r2, #78	@ 0x4e
 8034bc0:	f47f aece 	bne.w	8034960 <_strtod_l+0xa8>
 8034bc4:	499b      	ldr	r1, [pc, #620]	@ (8034e34 <_strtod_l+0x57c>)
 8034bc6:	a819      	add	r0, sp, #100	@ 0x64
 8034bc8:	f001 fb18 	bl	80361fc <__match>
 8034bcc:	2800      	cmp	r0, #0
 8034bce:	f43f aec7 	beq.w	8034960 <_strtod_l+0xa8>
 8034bd2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8034bd4:	781b      	ldrb	r3, [r3, #0]
 8034bd6:	2b28      	cmp	r3, #40	@ 0x28
 8034bd8:	d12e      	bne.n	8034c38 <_strtod_l+0x380>
 8034bda:	4997      	ldr	r1, [pc, #604]	@ (8034e38 <_strtod_l+0x580>)
 8034bdc:	aa1c      	add	r2, sp, #112	@ 0x70
 8034bde:	a819      	add	r0, sp, #100	@ 0x64
 8034be0:	f001 fb20 	bl	8036224 <__hexnan>
 8034be4:	2805      	cmp	r0, #5
 8034be6:	d127      	bne.n	8034c38 <_strtod_l+0x380>
 8034be8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8034bea:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8034bee:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8034bf2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8034bf6:	e698      	b.n	803492a <_strtod_l+0x72>
 8034bf8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8034bfa:	fb08 2101 	mla	r1, r8, r1, r2
 8034bfe:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8034c02:	920e      	str	r2, [sp, #56]	@ 0x38
 8034c04:	e7b5      	b.n	8034b72 <_strtod_l+0x2ba>
 8034c06:	2a6e      	cmp	r2, #110	@ 0x6e
 8034c08:	e7da      	b.n	8034bc0 <_strtod_l+0x308>
 8034c0a:	498c      	ldr	r1, [pc, #560]	@ (8034e3c <_strtod_l+0x584>)
 8034c0c:	a819      	add	r0, sp, #100	@ 0x64
 8034c0e:	f001 faf5 	bl	80361fc <__match>
 8034c12:	2800      	cmp	r0, #0
 8034c14:	f43f aea4 	beq.w	8034960 <_strtod_l+0xa8>
 8034c18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8034c1a:	4989      	ldr	r1, [pc, #548]	@ (8034e40 <_strtod_l+0x588>)
 8034c1c:	3b01      	subs	r3, #1
 8034c1e:	a819      	add	r0, sp, #100	@ 0x64
 8034c20:	9319      	str	r3, [sp, #100]	@ 0x64
 8034c22:	f001 faeb 	bl	80361fc <__match>
 8034c26:	b910      	cbnz	r0, 8034c2e <_strtod_l+0x376>
 8034c28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8034c2a:	3301      	adds	r3, #1
 8034c2c:	9319      	str	r3, [sp, #100]	@ 0x64
 8034c2e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8034e50 <_strtod_l+0x598>
 8034c32:	f04f 0a00 	mov.w	sl, #0
 8034c36:	e678      	b.n	803492a <_strtod_l+0x72>
 8034c38:	4882      	ldr	r0, [pc, #520]	@ (8034e44 <_strtod_l+0x58c>)
 8034c3a:	f001 f805 	bl	8035c48 <nan>
 8034c3e:	ec5b ab10 	vmov	sl, fp, d0
 8034c42:	e672      	b.n	803492a <_strtod_l+0x72>
 8034c44:	eba8 0309 	sub.w	r3, r8, r9
 8034c48:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8034c4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8034c4c:	2f00      	cmp	r7, #0
 8034c4e:	bf08      	it	eq
 8034c50:	462f      	moveq	r7, r5
 8034c52:	2d10      	cmp	r5, #16
 8034c54:	462c      	mov	r4, r5
 8034c56:	bfa8      	it	ge
 8034c58:	2410      	movge	r4, #16
 8034c5a:	f7db fc6b 	bl	8010534 <__aeabi_ui2d>
 8034c5e:	2d09      	cmp	r5, #9
 8034c60:	4682      	mov	sl, r0
 8034c62:	468b      	mov	fp, r1
 8034c64:	dc13      	bgt.n	8034c8e <_strtod_l+0x3d6>
 8034c66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8034c68:	2b00      	cmp	r3, #0
 8034c6a:	f43f ae5e 	beq.w	803492a <_strtod_l+0x72>
 8034c6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8034c70:	dd78      	ble.n	8034d64 <_strtod_l+0x4ac>
 8034c72:	2b16      	cmp	r3, #22
 8034c74:	dc5f      	bgt.n	8034d36 <_strtod_l+0x47e>
 8034c76:	4974      	ldr	r1, [pc, #464]	@ (8034e48 <_strtod_l+0x590>)
 8034c78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8034c7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8034c80:	4652      	mov	r2, sl
 8034c82:	465b      	mov	r3, fp
 8034c84:	f7db fcd0 	bl	8010628 <__aeabi_dmul>
 8034c88:	4682      	mov	sl, r0
 8034c8a:	468b      	mov	fp, r1
 8034c8c:	e64d      	b.n	803492a <_strtod_l+0x72>
 8034c8e:	4b6e      	ldr	r3, [pc, #440]	@ (8034e48 <_strtod_l+0x590>)
 8034c90:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8034c94:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8034c98:	f7db fcc6 	bl	8010628 <__aeabi_dmul>
 8034c9c:	4682      	mov	sl, r0
 8034c9e:	9808      	ldr	r0, [sp, #32]
 8034ca0:	468b      	mov	fp, r1
 8034ca2:	f7db fc47 	bl	8010534 <__aeabi_ui2d>
 8034ca6:	4602      	mov	r2, r0
 8034ca8:	460b      	mov	r3, r1
 8034caa:	4650      	mov	r0, sl
 8034cac:	4659      	mov	r1, fp
 8034cae:	f7db fb05 	bl	80102bc <__adddf3>
 8034cb2:	2d0f      	cmp	r5, #15
 8034cb4:	4682      	mov	sl, r0
 8034cb6:	468b      	mov	fp, r1
 8034cb8:	ddd5      	ble.n	8034c66 <_strtod_l+0x3ae>
 8034cba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8034cbc:	1b2c      	subs	r4, r5, r4
 8034cbe:	441c      	add	r4, r3
 8034cc0:	2c00      	cmp	r4, #0
 8034cc2:	f340 8096 	ble.w	8034df2 <_strtod_l+0x53a>
 8034cc6:	f014 030f 	ands.w	r3, r4, #15
 8034cca:	d00a      	beq.n	8034ce2 <_strtod_l+0x42a>
 8034ccc:	495e      	ldr	r1, [pc, #376]	@ (8034e48 <_strtod_l+0x590>)
 8034cce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8034cd2:	4652      	mov	r2, sl
 8034cd4:	465b      	mov	r3, fp
 8034cd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8034cda:	f7db fca5 	bl	8010628 <__aeabi_dmul>
 8034cde:	4682      	mov	sl, r0
 8034ce0:	468b      	mov	fp, r1
 8034ce2:	f034 040f 	bics.w	r4, r4, #15
 8034ce6:	d073      	beq.n	8034dd0 <_strtod_l+0x518>
 8034ce8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8034cec:	dd48      	ble.n	8034d80 <_strtod_l+0x4c8>
 8034cee:	2400      	movs	r4, #0
 8034cf0:	46a0      	mov	r8, r4
 8034cf2:	940a      	str	r4, [sp, #40]	@ 0x28
 8034cf4:	46a1      	mov	r9, r4
 8034cf6:	9a05      	ldr	r2, [sp, #20]
 8034cf8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8034e50 <_strtod_l+0x598>
 8034cfc:	2322      	movs	r3, #34	@ 0x22
 8034cfe:	6013      	str	r3, [r2, #0]
 8034d00:	f04f 0a00 	mov.w	sl, #0
 8034d04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8034d06:	2b00      	cmp	r3, #0
 8034d08:	f43f ae0f 	beq.w	803492a <_strtod_l+0x72>
 8034d0c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8034d0e:	9805      	ldr	r0, [sp, #20]
 8034d10:	f7fe ff37 	bl	8033b82 <_Bfree>
 8034d14:	9805      	ldr	r0, [sp, #20]
 8034d16:	4649      	mov	r1, r9
 8034d18:	f7fe ff33 	bl	8033b82 <_Bfree>
 8034d1c:	9805      	ldr	r0, [sp, #20]
 8034d1e:	4641      	mov	r1, r8
 8034d20:	f7fe ff2f 	bl	8033b82 <_Bfree>
 8034d24:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8034d26:	9805      	ldr	r0, [sp, #20]
 8034d28:	f7fe ff2b 	bl	8033b82 <_Bfree>
 8034d2c:	9805      	ldr	r0, [sp, #20]
 8034d2e:	4621      	mov	r1, r4
 8034d30:	f7fe ff27 	bl	8033b82 <_Bfree>
 8034d34:	e5f9      	b.n	803492a <_strtod_l+0x72>
 8034d36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8034d38:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8034d3c:	4293      	cmp	r3, r2
 8034d3e:	dbbc      	blt.n	8034cba <_strtod_l+0x402>
 8034d40:	4c41      	ldr	r4, [pc, #260]	@ (8034e48 <_strtod_l+0x590>)
 8034d42:	f1c5 050f 	rsb	r5, r5, #15
 8034d46:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8034d4a:	4652      	mov	r2, sl
 8034d4c:	465b      	mov	r3, fp
 8034d4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8034d52:	f7db fc69 	bl	8010628 <__aeabi_dmul>
 8034d56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8034d58:	1b5d      	subs	r5, r3, r5
 8034d5a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8034d5e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8034d62:	e78f      	b.n	8034c84 <_strtod_l+0x3cc>
 8034d64:	3316      	adds	r3, #22
 8034d66:	dba8      	blt.n	8034cba <_strtod_l+0x402>
 8034d68:	4b37      	ldr	r3, [pc, #220]	@ (8034e48 <_strtod_l+0x590>)
 8034d6a:	eba9 0808 	sub.w	r8, r9, r8
 8034d6e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8034d72:	e9d8 2300 	ldrd	r2, r3, [r8]
 8034d76:	4650      	mov	r0, sl
 8034d78:	4659      	mov	r1, fp
 8034d7a:	f7db fd7f 	bl	801087c <__aeabi_ddiv>
 8034d7e:	e783      	b.n	8034c88 <_strtod_l+0x3d0>
 8034d80:	4b32      	ldr	r3, [pc, #200]	@ (8034e4c <_strtod_l+0x594>)
 8034d82:	9308      	str	r3, [sp, #32]
 8034d84:	2300      	movs	r3, #0
 8034d86:	1124      	asrs	r4, r4, #4
 8034d88:	4650      	mov	r0, sl
 8034d8a:	4659      	mov	r1, fp
 8034d8c:	461e      	mov	r6, r3
 8034d8e:	2c01      	cmp	r4, #1
 8034d90:	dc21      	bgt.n	8034dd6 <_strtod_l+0x51e>
 8034d92:	b10b      	cbz	r3, 8034d98 <_strtod_l+0x4e0>
 8034d94:	4682      	mov	sl, r0
 8034d96:	468b      	mov	fp, r1
 8034d98:	492c      	ldr	r1, [pc, #176]	@ (8034e4c <_strtod_l+0x594>)
 8034d9a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8034d9e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8034da2:	4652      	mov	r2, sl
 8034da4:	465b      	mov	r3, fp
 8034da6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8034daa:	f7db fc3d 	bl	8010628 <__aeabi_dmul>
 8034dae:	4b28      	ldr	r3, [pc, #160]	@ (8034e50 <_strtod_l+0x598>)
 8034db0:	460a      	mov	r2, r1
 8034db2:	400b      	ands	r3, r1
 8034db4:	4927      	ldr	r1, [pc, #156]	@ (8034e54 <_strtod_l+0x59c>)
 8034db6:	428b      	cmp	r3, r1
 8034db8:	4682      	mov	sl, r0
 8034dba:	d898      	bhi.n	8034cee <_strtod_l+0x436>
 8034dbc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8034dc0:	428b      	cmp	r3, r1
 8034dc2:	bf86      	itte	hi
 8034dc4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8034e58 <_strtod_l+0x5a0>
 8034dc8:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8034dcc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8034dd0:	2300      	movs	r3, #0
 8034dd2:	9308      	str	r3, [sp, #32]
 8034dd4:	e07a      	b.n	8034ecc <_strtod_l+0x614>
 8034dd6:	07e2      	lsls	r2, r4, #31
 8034dd8:	d505      	bpl.n	8034de6 <_strtod_l+0x52e>
 8034dda:	9b08      	ldr	r3, [sp, #32]
 8034ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8034de0:	f7db fc22 	bl	8010628 <__aeabi_dmul>
 8034de4:	2301      	movs	r3, #1
 8034de6:	9a08      	ldr	r2, [sp, #32]
 8034de8:	3208      	adds	r2, #8
 8034dea:	3601      	adds	r6, #1
 8034dec:	1064      	asrs	r4, r4, #1
 8034dee:	9208      	str	r2, [sp, #32]
 8034df0:	e7cd      	b.n	8034d8e <_strtod_l+0x4d6>
 8034df2:	d0ed      	beq.n	8034dd0 <_strtod_l+0x518>
 8034df4:	4264      	negs	r4, r4
 8034df6:	f014 020f 	ands.w	r2, r4, #15
 8034dfa:	d00a      	beq.n	8034e12 <_strtod_l+0x55a>
 8034dfc:	4b12      	ldr	r3, [pc, #72]	@ (8034e48 <_strtod_l+0x590>)
 8034dfe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8034e02:	4650      	mov	r0, sl
 8034e04:	4659      	mov	r1, fp
 8034e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8034e0a:	f7db fd37 	bl	801087c <__aeabi_ddiv>
 8034e0e:	4682      	mov	sl, r0
 8034e10:	468b      	mov	fp, r1
 8034e12:	1124      	asrs	r4, r4, #4
 8034e14:	d0dc      	beq.n	8034dd0 <_strtod_l+0x518>
 8034e16:	2c1f      	cmp	r4, #31
 8034e18:	dd20      	ble.n	8034e5c <_strtod_l+0x5a4>
 8034e1a:	2400      	movs	r4, #0
 8034e1c:	46a0      	mov	r8, r4
 8034e1e:	940a      	str	r4, [sp, #40]	@ 0x28
 8034e20:	46a1      	mov	r9, r4
 8034e22:	9a05      	ldr	r2, [sp, #20]
 8034e24:	2322      	movs	r3, #34	@ 0x22
 8034e26:	f04f 0a00 	mov.w	sl, #0
 8034e2a:	f04f 0b00 	mov.w	fp, #0
 8034e2e:	6013      	str	r3, [r2, #0]
 8034e30:	e768      	b.n	8034d04 <_strtod_l+0x44c>
 8034e32:	bf00      	nop
 8034e34:	0803c5d1 	.word	0x0803c5d1
 8034e38:	0803cb50 	.word	0x0803cb50
 8034e3c:	0803c440 	.word	0x0803c440
 8034e40:	0803c8fc 	.word	0x0803c8fc
 8034e44:	0803c43a 	.word	0x0803c43a
 8034e48:	0803ca88 	.word	0x0803ca88
 8034e4c:	0803ca60 	.word	0x0803ca60
 8034e50:	7ff00000 	.word	0x7ff00000
 8034e54:	7ca00000 	.word	0x7ca00000
 8034e58:	7fefffff 	.word	0x7fefffff
 8034e5c:	f014 0310 	ands.w	r3, r4, #16
 8034e60:	bf18      	it	ne
 8034e62:	236a      	movne	r3, #106	@ 0x6a
 8034e64:	4ea9      	ldr	r6, [pc, #676]	@ (803510c <_strtod_l+0x854>)
 8034e66:	9308      	str	r3, [sp, #32]
 8034e68:	4650      	mov	r0, sl
 8034e6a:	4659      	mov	r1, fp
 8034e6c:	2300      	movs	r3, #0
 8034e6e:	07e2      	lsls	r2, r4, #31
 8034e70:	d504      	bpl.n	8034e7c <_strtod_l+0x5c4>
 8034e72:	e9d6 2300 	ldrd	r2, r3, [r6]
 8034e76:	f7db fbd7 	bl	8010628 <__aeabi_dmul>
 8034e7a:	2301      	movs	r3, #1
 8034e7c:	1064      	asrs	r4, r4, #1
 8034e7e:	f106 0608 	add.w	r6, r6, #8
 8034e82:	d1f4      	bne.n	8034e6e <_strtod_l+0x5b6>
 8034e84:	b10b      	cbz	r3, 8034e8a <_strtod_l+0x5d2>
 8034e86:	4682      	mov	sl, r0
 8034e88:	468b      	mov	fp, r1
 8034e8a:	9b08      	ldr	r3, [sp, #32]
 8034e8c:	b1b3      	cbz	r3, 8034ebc <_strtod_l+0x604>
 8034e8e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8034e92:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8034e96:	2b00      	cmp	r3, #0
 8034e98:	4659      	mov	r1, fp
 8034e9a:	dd0f      	ble.n	8034ebc <_strtod_l+0x604>
 8034e9c:	2b1f      	cmp	r3, #31
 8034e9e:	dd55      	ble.n	8034f4c <_strtod_l+0x694>
 8034ea0:	2b34      	cmp	r3, #52	@ 0x34
 8034ea2:	bfde      	ittt	le
 8034ea4:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8034ea8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8034eac:	4093      	lslle	r3, r2
 8034eae:	f04f 0a00 	mov.w	sl, #0
 8034eb2:	bfcc      	ite	gt
 8034eb4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8034eb8:	ea03 0b01 	andle.w	fp, r3, r1
 8034ebc:	2200      	movs	r2, #0
 8034ebe:	2300      	movs	r3, #0
 8034ec0:	4650      	mov	r0, sl
 8034ec2:	4659      	mov	r1, fp
 8034ec4:	f7db fe18 	bl	8010af8 <__aeabi_dcmpeq>
 8034ec8:	2800      	cmp	r0, #0
 8034eca:	d1a6      	bne.n	8034e1a <_strtod_l+0x562>
 8034ecc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8034ece:	9300      	str	r3, [sp, #0]
 8034ed0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8034ed2:	9805      	ldr	r0, [sp, #20]
 8034ed4:	462b      	mov	r3, r5
 8034ed6:	463a      	mov	r2, r7
 8034ed8:	f7fe fea2 	bl	8033c20 <__s2b>
 8034edc:	900a      	str	r0, [sp, #40]	@ 0x28
 8034ede:	2800      	cmp	r0, #0
 8034ee0:	f43f af05 	beq.w	8034cee <_strtod_l+0x436>
 8034ee4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8034ee6:	2a00      	cmp	r2, #0
 8034ee8:	eba9 0308 	sub.w	r3, r9, r8
 8034eec:	bfa8      	it	ge
 8034eee:	2300      	movge	r3, #0
 8034ef0:	9312      	str	r3, [sp, #72]	@ 0x48
 8034ef2:	2400      	movs	r4, #0
 8034ef4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8034ef8:	9316      	str	r3, [sp, #88]	@ 0x58
 8034efa:	46a0      	mov	r8, r4
 8034efc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8034efe:	9805      	ldr	r0, [sp, #20]
 8034f00:	6859      	ldr	r1, [r3, #4]
 8034f02:	f7fe fe19 	bl	8033b38 <_Balloc>
 8034f06:	4681      	mov	r9, r0
 8034f08:	2800      	cmp	r0, #0
 8034f0a:	f43f aef4 	beq.w	8034cf6 <_strtod_l+0x43e>
 8034f0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8034f10:	691a      	ldr	r2, [r3, #16]
 8034f12:	3202      	adds	r2, #2
 8034f14:	f103 010c 	add.w	r1, r3, #12
 8034f18:	0092      	lsls	r2, r2, #2
 8034f1a:	300c      	adds	r0, #12
 8034f1c:	f7f9 fadc 	bl	802e4d8 <memcpy>
 8034f20:	ec4b ab10 	vmov	d0, sl, fp
 8034f24:	9805      	ldr	r0, [sp, #20]
 8034f26:	aa1c      	add	r2, sp, #112	@ 0x70
 8034f28:	a91b      	add	r1, sp, #108	@ 0x6c
 8034f2a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8034f2e:	f7ff f999 	bl	8034264 <__d2b>
 8034f32:	901a      	str	r0, [sp, #104]	@ 0x68
 8034f34:	2800      	cmp	r0, #0
 8034f36:	f43f aede 	beq.w	8034cf6 <_strtod_l+0x43e>
 8034f3a:	9805      	ldr	r0, [sp, #20]
 8034f3c:	2101      	movs	r1, #1
 8034f3e:	f7fe ff05 	bl	8033d4c <__i2b>
 8034f42:	4680      	mov	r8, r0
 8034f44:	b948      	cbnz	r0, 8034f5a <_strtod_l+0x6a2>
 8034f46:	f04f 0800 	mov.w	r8, #0
 8034f4a:	e6d4      	b.n	8034cf6 <_strtod_l+0x43e>
 8034f4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8034f50:	fa02 f303 	lsl.w	r3, r2, r3
 8034f54:	ea03 0a0a 	and.w	sl, r3, sl
 8034f58:	e7b0      	b.n	8034ebc <_strtod_l+0x604>
 8034f5a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8034f5c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8034f5e:	2d00      	cmp	r5, #0
 8034f60:	bfab      	itete	ge
 8034f62:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8034f64:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8034f66:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8034f68:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8034f6a:	bfac      	ite	ge
 8034f6c:	18ef      	addge	r7, r5, r3
 8034f6e:	1b5e      	sublt	r6, r3, r5
 8034f70:	9b08      	ldr	r3, [sp, #32]
 8034f72:	1aed      	subs	r5, r5, r3
 8034f74:	4415      	add	r5, r2
 8034f76:	4b66      	ldr	r3, [pc, #408]	@ (8035110 <_strtod_l+0x858>)
 8034f78:	3d01      	subs	r5, #1
 8034f7a:	429d      	cmp	r5, r3
 8034f7c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8034f80:	da50      	bge.n	8035024 <_strtod_l+0x76c>
 8034f82:	1b5b      	subs	r3, r3, r5
 8034f84:	2b1f      	cmp	r3, #31
 8034f86:	eba2 0203 	sub.w	r2, r2, r3
 8034f8a:	f04f 0101 	mov.w	r1, #1
 8034f8e:	dc3d      	bgt.n	803500c <_strtod_l+0x754>
 8034f90:	fa01 f303 	lsl.w	r3, r1, r3
 8034f94:	9313      	str	r3, [sp, #76]	@ 0x4c
 8034f96:	2300      	movs	r3, #0
 8034f98:	9310      	str	r3, [sp, #64]	@ 0x40
 8034f9a:	18bd      	adds	r5, r7, r2
 8034f9c:	9b08      	ldr	r3, [sp, #32]
 8034f9e:	42af      	cmp	r7, r5
 8034fa0:	4416      	add	r6, r2
 8034fa2:	441e      	add	r6, r3
 8034fa4:	463b      	mov	r3, r7
 8034fa6:	bfa8      	it	ge
 8034fa8:	462b      	movge	r3, r5
 8034faa:	42b3      	cmp	r3, r6
 8034fac:	bfa8      	it	ge
 8034fae:	4633      	movge	r3, r6
 8034fb0:	2b00      	cmp	r3, #0
 8034fb2:	bfc2      	ittt	gt
 8034fb4:	1aed      	subgt	r5, r5, r3
 8034fb6:	1af6      	subgt	r6, r6, r3
 8034fb8:	1aff      	subgt	r7, r7, r3
 8034fba:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8034fbc:	2b00      	cmp	r3, #0
 8034fbe:	dd16      	ble.n	8034fee <_strtod_l+0x736>
 8034fc0:	4641      	mov	r1, r8
 8034fc2:	9805      	ldr	r0, [sp, #20]
 8034fc4:	461a      	mov	r2, r3
 8034fc6:	f7fe ff81 	bl	8033ecc <__pow5mult>
 8034fca:	4680      	mov	r8, r0
 8034fcc:	2800      	cmp	r0, #0
 8034fce:	d0ba      	beq.n	8034f46 <_strtod_l+0x68e>
 8034fd0:	4601      	mov	r1, r0
 8034fd2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8034fd4:	9805      	ldr	r0, [sp, #20]
 8034fd6:	f7fe fecf 	bl	8033d78 <__multiply>
 8034fda:	900e      	str	r0, [sp, #56]	@ 0x38
 8034fdc:	2800      	cmp	r0, #0
 8034fde:	f43f ae8a 	beq.w	8034cf6 <_strtod_l+0x43e>
 8034fe2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8034fe4:	9805      	ldr	r0, [sp, #20]
 8034fe6:	f7fe fdcc 	bl	8033b82 <_Bfree>
 8034fea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8034fec:	931a      	str	r3, [sp, #104]	@ 0x68
 8034fee:	2d00      	cmp	r5, #0
 8034ff0:	dc1d      	bgt.n	803502e <_strtod_l+0x776>
 8034ff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8034ff4:	2b00      	cmp	r3, #0
 8034ff6:	dd23      	ble.n	8035040 <_strtod_l+0x788>
 8034ff8:	4649      	mov	r1, r9
 8034ffa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8034ffc:	9805      	ldr	r0, [sp, #20]
 8034ffe:	f7fe ff65 	bl	8033ecc <__pow5mult>
 8035002:	4681      	mov	r9, r0
 8035004:	b9e0      	cbnz	r0, 8035040 <_strtod_l+0x788>
 8035006:	f04f 0900 	mov.w	r9, #0
 803500a:	e674      	b.n	8034cf6 <_strtod_l+0x43e>
 803500c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8035010:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8035014:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8035018:	35e2      	adds	r5, #226	@ 0xe2
 803501a:	fa01 f305 	lsl.w	r3, r1, r5
 803501e:	9310      	str	r3, [sp, #64]	@ 0x40
 8035020:	9113      	str	r1, [sp, #76]	@ 0x4c
 8035022:	e7ba      	b.n	8034f9a <_strtod_l+0x6e2>
 8035024:	2300      	movs	r3, #0
 8035026:	9310      	str	r3, [sp, #64]	@ 0x40
 8035028:	2301      	movs	r3, #1
 803502a:	9313      	str	r3, [sp, #76]	@ 0x4c
 803502c:	e7b5      	b.n	8034f9a <_strtod_l+0x6e2>
 803502e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8035030:	9805      	ldr	r0, [sp, #20]
 8035032:	462a      	mov	r2, r5
 8035034:	f7fe ff8a 	bl	8033f4c <__lshift>
 8035038:	901a      	str	r0, [sp, #104]	@ 0x68
 803503a:	2800      	cmp	r0, #0
 803503c:	d1d9      	bne.n	8034ff2 <_strtod_l+0x73a>
 803503e:	e65a      	b.n	8034cf6 <_strtod_l+0x43e>
 8035040:	2e00      	cmp	r6, #0
 8035042:	dd07      	ble.n	8035054 <_strtod_l+0x79c>
 8035044:	4649      	mov	r1, r9
 8035046:	9805      	ldr	r0, [sp, #20]
 8035048:	4632      	mov	r2, r6
 803504a:	f7fe ff7f 	bl	8033f4c <__lshift>
 803504e:	4681      	mov	r9, r0
 8035050:	2800      	cmp	r0, #0
 8035052:	d0d8      	beq.n	8035006 <_strtod_l+0x74e>
 8035054:	2f00      	cmp	r7, #0
 8035056:	dd08      	ble.n	803506a <_strtod_l+0x7b2>
 8035058:	4641      	mov	r1, r8
 803505a:	9805      	ldr	r0, [sp, #20]
 803505c:	463a      	mov	r2, r7
 803505e:	f7fe ff75 	bl	8033f4c <__lshift>
 8035062:	4680      	mov	r8, r0
 8035064:	2800      	cmp	r0, #0
 8035066:	f43f ae46 	beq.w	8034cf6 <_strtod_l+0x43e>
 803506a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 803506c:	9805      	ldr	r0, [sp, #20]
 803506e:	464a      	mov	r2, r9
 8035070:	f7fe fff4 	bl	803405c <__mdiff>
 8035074:	4604      	mov	r4, r0
 8035076:	2800      	cmp	r0, #0
 8035078:	f43f ae3d 	beq.w	8034cf6 <_strtod_l+0x43e>
 803507c:	68c3      	ldr	r3, [r0, #12]
 803507e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8035080:	2300      	movs	r3, #0
 8035082:	60c3      	str	r3, [r0, #12]
 8035084:	4641      	mov	r1, r8
 8035086:	f7fe ffcd 	bl	8034024 <__mcmp>
 803508a:	2800      	cmp	r0, #0
 803508c:	da46      	bge.n	803511c <_strtod_l+0x864>
 803508e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8035090:	ea53 030a 	orrs.w	r3, r3, sl
 8035094:	d16c      	bne.n	8035170 <_strtod_l+0x8b8>
 8035096:	f3cb 0313 	ubfx	r3, fp, #0, #20
 803509a:	2b00      	cmp	r3, #0
 803509c:	d168      	bne.n	8035170 <_strtod_l+0x8b8>
 803509e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80350a2:	0d1b      	lsrs	r3, r3, #20
 80350a4:	051b      	lsls	r3, r3, #20
 80350a6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80350aa:	d961      	bls.n	8035170 <_strtod_l+0x8b8>
 80350ac:	6963      	ldr	r3, [r4, #20]
 80350ae:	b913      	cbnz	r3, 80350b6 <_strtod_l+0x7fe>
 80350b0:	6923      	ldr	r3, [r4, #16]
 80350b2:	2b01      	cmp	r3, #1
 80350b4:	dd5c      	ble.n	8035170 <_strtod_l+0x8b8>
 80350b6:	4621      	mov	r1, r4
 80350b8:	2201      	movs	r2, #1
 80350ba:	9805      	ldr	r0, [sp, #20]
 80350bc:	f7fe ff46 	bl	8033f4c <__lshift>
 80350c0:	4641      	mov	r1, r8
 80350c2:	4604      	mov	r4, r0
 80350c4:	f7fe ffae 	bl	8034024 <__mcmp>
 80350c8:	2800      	cmp	r0, #0
 80350ca:	dd51      	ble.n	8035170 <_strtod_l+0x8b8>
 80350cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80350d0:	9a08      	ldr	r2, [sp, #32]
 80350d2:	0d1b      	lsrs	r3, r3, #20
 80350d4:	051b      	lsls	r3, r3, #20
 80350d6:	2a00      	cmp	r2, #0
 80350d8:	d06b      	beq.n	80351b2 <_strtod_l+0x8fa>
 80350da:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80350de:	d868      	bhi.n	80351b2 <_strtod_l+0x8fa>
 80350e0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80350e4:	f67f ae9d 	bls.w	8034e22 <_strtod_l+0x56a>
 80350e8:	4b0a      	ldr	r3, [pc, #40]	@ (8035114 <_strtod_l+0x85c>)
 80350ea:	4650      	mov	r0, sl
 80350ec:	4659      	mov	r1, fp
 80350ee:	2200      	movs	r2, #0
 80350f0:	f7db fa9a 	bl	8010628 <__aeabi_dmul>
 80350f4:	4b08      	ldr	r3, [pc, #32]	@ (8035118 <_strtod_l+0x860>)
 80350f6:	400b      	ands	r3, r1
 80350f8:	4682      	mov	sl, r0
 80350fa:	468b      	mov	fp, r1
 80350fc:	2b00      	cmp	r3, #0
 80350fe:	f47f ae05 	bne.w	8034d0c <_strtod_l+0x454>
 8035102:	9a05      	ldr	r2, [sp, #20]
 8035104:	2322      	movs	r3, #34	@ 0x22
 8035106:	6013      	str	r3, [r2, #0]
 8035108:	e600      	b.n	8034d0c <_strtod_l+0x454>
 803510a:	bf00      	nop
 803510c:	0803cb78 	.word	0x0803cb78
 8035110:	fffffc02 	.word	0xfffffc02
 8035114:	39500000 	.word	0x39500000
 8035118:	7ff00000 	.word	0x7ff00000
 803511c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8035120:	d165      	bne.n	80351ee <_strtod_l+0x936>
 8035122:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8035124:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8035128:	b35a      	cbz	r2, 8035182 <_strtod_l+0x8ca>
 803512a:	4a9f      	ldr	r2, [pc, #636]	@ (80353a8 <_strtod_l+0xaf0>)
 803512c:	4293      	cmp	r3, r2
 803512e:	d12b      	bne.n	8035188 <_strtod_l+0x8d0>
 8035130:	9b08      	ldr	r3, [sp, #32]
 8035132:	4651      	mov	r1, sl
 8035134:	b303      	cbz	r3, 8035178 <_strtod_l+0x8c0>
 8035136:	4b9d      	ldr	r3, [pc, #628]	@ (80353ac <_strtod_l+0xaf4>)
 8035138:	465a      	mov	r2, fp
 803513a:	4013      	ands	r3, r2
 803513c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8035140:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8035144:	d81b      	bhi.n	803517e <_strtod_l+0x8c6>
 8035146:	0d1b      	lsrs	r3, r3, #20
 8035148:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 803514c:	fa02 f303 	lsl.w	r3, r2, r3
 8035150:	4299      	cmp	r1, r3
 8035152:	d119      	bne.n	8035188 <_strtod_l+0x8d0>
 8035154:	4b96      	ldr	r3, [pc, #600]	@ (80353b0 <_strtod_l+0xaf8>)
 8035156:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8035158:	429a      	cmp	r2, r3
 803515a:	d102      	bne.n	8035162 <_strtod_l+0x8aa>
 803515c:	3101      	adds	r1, #1
 803515e:	f43f adca 	beq.w	8034cf6 <_strtod_l+0x43e>
 8035162:	4b92      	ldr	r3, [pc, #584]	@ (80353ac <_strtod_l+0xaf4>)
 8035164:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8035166:	401a      	ands	r2, r3
 8035168:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 803516c:	f04f 0a00 	mov.w	sl, #0
 8035170:	9b08      	ldr	r3, [sp, #32]
 8035172:	2b00      	cmp	r3, #0
 8035174:	d1b8      	bne.n	80350e8 <_strtod_l+0x830>
 8035176:	e5c9      	b.n	8034d0c <_strtod_l+0x454>
 8035178:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803517c:	e7e8      	b.n	8035150 <_strtod_l+0x898>
 803517e:	4613      	mov	r3, r2
 8035180:	e7e6      	b.n	8035150 <_strtod_l+0x898>
 8035182:	ea53 030a 	orrs.w	r3, r3, sl
 8035186:	d0a1      	beq.n	80350cc <_strtod_l+0x814>
 8035188:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803518a:	b1db      	cbz	r3, 80351c4 <_strtod_l+0x90c>
 803518c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 803518e:	4213      	tst	r3, r2
 8035190:	d0ee      	beq.n	8035170 <_strtod_l+0x8b8>
 8035192:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8035194:	9a08      	ldr	r2, [sp, #32]
 8035196:	4650      	mov	r0, sl
 8035198:	4659      	mov	r1, fp
 803519a:	b1bb      	cbz	r3, 80351cc <_strtod_l+0x914>
 803519c:	f7ff fb6e 	bl	803487c <sulp>
 80351a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80351a4:	ec53 2b10 	vmov	r2, r3, d0
 80351a8:	f7db f888 	bl	80102bc <__adddf3>
 80351ac:	4682      	mov	sl, r0
 80351ae:	468b      	mov	fp, r1
 80351b0:	e7de      	b.n	8035170 <_strtod_l+0x8b8>
 80351b2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80351b6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80351ba:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80351be:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80351c2:	e7d5      	b.n	8035170 <_strtod_l+0x8b8>
 80351c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80351c6:	ea13 0f0a 	tst.w	r3, sl
 80351ca:	e7e1      	b.n	8035190 <_strtod_l+0x8d8>
 80351cc:	f7ff fb56 	bl	803487c <sulp>
 80351d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80351d4:	ec53 2b10 	vmov	r2, r3, d0
 80351d8:	f7db f86e 	bl	80102b8 <__aeabi_dsub>
 80351dc:	2200      	movs	r2, #0
 80351de:	2300      	movs	r3, #0
 80351e0:	4682      	mov	sl, r0
 80351e2:	468b      	mov	fp, r1
 80351e4:	f7db fc88 	bl	8010af8 <__aeabi_dcmpeq>
 80351e8:	2800      	cmp	r0, #0
 80351ea:	d0c1      	beq.n	8035170 <_strtod_l+0x8b8>
 80351ec:	e619      	b.n	8034e22 <_strtod_l+0x56a>
 80351ee:	4641      	mov	r1, r8
 80351f0:	4620      	mov	r0, r4
 80351f2:	f7ff f88f 	bl	8034314 <__ratio>
 80351f6:	ec57 6b10 	vmov	r6, r7, d0
 80351fa:	2200      	movs	r2, #0
 80351fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8035200:	4630      	mov	r0, r6
 8035202:	4639      	mov	r1, r7
 8035204:	f7db fc8c 	bl	8010b20 <__aeabi_dcmple>
 8035208:	2800      	cmp	r0, #0
 803520a:	d06f      	beq.n	80352ec <_strtod_l+0xa34>
 803520c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803520e:	2b00      	cmp	r3, #0
 8035210:	d17a      	bne.n	8035308 <_strtod_l+0xa50>
 8035212:	f1ba 0f00 	cmp.w	sl, #0
 8035216:	d158      	bne.n	80352ca <_strtod_l+0xa12>
 8035218:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803521a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 803521e:	2b00      	cmp	r3, #0
 8035220:	d15a      	bne.n	80352d8 <_strtod_l+0xa20>
 8035222:	4b64      	ldr	r3, [pc, #400]	@ (80353b4 <_strtod_l+0xafc>)
 8035224:	2200      	movs	r2, #0
 8035226:	4630      	mov	r0, r6
 8035228:	4639      	mov	r1, r7
 803522a:	f7db fc6f 	bl	8010b0c <__aeabi_dcmplt>
 803522e:	2800      	cmp	r0, #0
 8035230:	d159      	bne.n	80352e6 <_strtod_l+0xa2e>
 8035232:	4630      	mov	r0, r6
 8035234:	4639      	mov	r1, r7
 8035236:	4b60      	ldr	r3, [pc, #384]	@ (80353b8 <_strtod_l+0xb00>)
 8035238:	2200      	movs	r2, #0
 803523a:	f7db f9f5 	bl	8010628 <__aeabi_dmul>
 803523e:	4606      	mov	r6, r0
 8035240:	460f      	mov	r7, r1
 8035242:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8035246:	9606      	str	r6, [sp, #24]
 8035248:	9307      	str	r3, [sp, #28]
 803524a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 803524e:	4d57      	ldr	r5, [pc, #348]	@ (80353ac <_strtod_l+0xaf4>)
 8035250:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8035254:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8035256:	401d      	ands	r5, r3
 8035258:	4b58      	ldr	r3, [pc, #352]	@ (80353bc <_strtod_l+0xb04>)
 803525a:	429d      	cmp	r5, r3
 803525c:	f040 80b2 	bne.w	80353c4 <_strtod_l+0xb0c>
 8035260:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8035262:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8035266:	ec4b ab10 	vmov	d0, sl, fp
 803526a:	f7fe ff8b 	bl	8034184 <__ulp>
 803526e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8035272:	ec51 0b10 	vmov	r0, r1, d0
 8035276:	f7db f9d7 	bl	8010628 <__aeabi_dmul>
 803527a:	4652      	mov	r2, sl
 803527c:	465b      	mov	r3, fp
 803527e:	f7db f81d 	bl	80102bc <__adddf3>
 8035282:	460b      	mov	r3, r1
 8035284:	4949      	ldr	r1, [pc, #292]	@ (80353ac <_strtod_l+0xaf4>)
 8035286:	4a4e      	ldr	r2, [pc, #312]	@ (80353c0 <_strtod_l+0xb08>)
 8035288:	4019      	ands	r1, r3
 803528a:	4291      	cmp	r1, r2
 803528c:	4682      	mov	sl, r0
 803528e:	d942      	bls.n	8035316 <_strtod_l+0xa5e>
 8035290:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8035292:	4b47      	ldr	r3, [pc, #284]	@ (80353b0 <_strtod_l+0xaf8>)
 8035294:	429a      	cmp	r2, r3
 8035296:	d103      	bne.n	80352a0 <_strtod_l+0x9e8>
 8035298:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803529a:	3301      	adds	r3, #1
 803529c:	f43f ad2b 	beq.w	8034cf6 <_strtod_l+0x43e>
 80352a0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80353b0 <_strtod_l+0xaf8>
 80352a4:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80352a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80352aa:	9805      	ldr	r0, [sp, #20]
 80352ac:	f7fe fc69 	bl	8033b82 <_Bfree>
 80352b0:	9805      	ldr	r0, [sp, #20]
 80352b2:	4649      	mov	r1, r9
 80352b4:	f7fe fc65 	bl	8033b82 <_Bfree>
 80352b8:	9805      	ldr	r0, [sp, #20]
 80352ba:	4641      	mov	r1, r8
 80352bc:	f7fe fc61 	bl	8033b82 <_Bfree>
 80352c0:	9805      	ldr	r0, [sp, #20]
 80352c2:	4621      	mov	r1, r4
 80352c4:	f7fe fc5d 	bl	8033b82 <_Bfree>
 80352c8:	e618      	b.n	8034efc <_strtod_l+0x644>
 80352ca:	f1ba 0f01 	cmp.w	sl, #1
 80352ce:	d103      	bne.n	80352d8 <_strtod_l+0xa20>
 80352d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80352d2:	2b00      	cmp	r3, #0
 80352d4:	f43f ada5 	beq.w	8034e22 <_strtod_l+0x56a>
 80352d8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8035388 <_strtod_l+0xad0>
 80352dc:	4f35      	ldr	r7, [pc, #212]	@ (80353b4 <_strtod_l+0xafc>)
 80352de:	ed8d 7b06 	vstr	d7, [sp, #24]
 80352e2:	2600      	movs	r6, #0
 80352e4:	e7b1      	b.n	803524a <_strtod_l+0x992>
 80352e6:	4f34      	ldr	r7, [pc, #208]	@ (80353b8 <_strtod_l+0xb00>)
 80352e8:	2600      	movs	r6, #0
 80352ea:	e7aa      	b.n	8035242 <_strtod_l+0x98a>
 80352ec:	4b32      	ldr	r3, [pc, #200]	@ (80353b8 <_strtod_l+0xb00>)
 80352ee:	4630      	mov	r0, r6
 80352f0:	4639      	mov	r1, r7
 80352f2:	2200      	movs	r2, #0
 80352f4:	f7db f998 	bl	8010628 <__aeabi_dmul>
 80352f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80352fa:	4606      	mov	r6, r0
 80352fc:	460f      	mov	r7, r1
 80352fe:	2b00      	cmp	r3, #0
 8035300:	d09f      	beq.n	8035242 <_strtod_l+0x98a>
 8035302:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8035306:	e7a0      	b.n	803524a <_strtod_l+0x992>
 8035308:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8035390 <_strtod_l+0xad8>
 803530c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8035310:	ec57 6b17 	vmov	r6, r7, d7
 8035314:	e799      	b.n	803524a <_strtod_l+0x992>
 8035316:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 803531a:	9b08      	ldr	r3, [sp, #32]
 803531c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8035320:	2b00      	cmp	r3, #0
 8035322:	d1c1      	bne.n	80352a8 <_strtod_l+0x9f0>
 8035324:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8035328:	0d1b      	lsrs	r3, r3, #20
 803532a:	051b      	lsls	r3, r3, #20
 803532c:	429d      	cmp	r5, r3
 803532e:	d1bb      	bne.n	80352a8 <_strtod_l+0x9f0>
 8035330:	4630      	mov	r0, r6
 8035332:	4639      	mov	r1, r7
 8035334:	f7db fd3c 	bl	8010db0 <__aeabi_d2lz>
 8035338:	f7db f948 	bl	80105cc <__aeabi_l2d>
 803533c:	4602      	mov	r2, r0
 803533e:	460b      	mov	r3, r1
 8035340:	4630      	mov	r0, r6
 8035342:	4639      	mov	r1, r7
 8035344:	f7da ffb8 	bl	80102b8 <__aeabi_dsub>
 8035348:	460b      	mov	r3, r1
 803534a:	4602      	mov	r2, r0
 803534c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8035350:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8035354:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8035356:	ea46 060a 	orr.w	r6, r6, sl
 803535a:	431e      	orrs	r6, r3
 803535c:	d06f      	beq.n	803543e <_strtod_l+0xb86>
 803535e:	a30e      	add	r3, pc, #56	@ (adr r3, 8035398 <_strtod_l+0xae0>)
 8035360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8035364:	f7db fbd2 	bl	8010b0c <__aeabi_dcmplt>
 8035368:	2800      	cmp	r0, #0
 803536a:	f47f accf 	bne.w	8034d0c <_strtod_l+0x454>
 803536e:	a30c      	add	r3, pc, #48	@ (adr r3, 80353a0 <_strtod_l+0xae8>)
 8035370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8035374:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8035378:	f7db fbe6 	bl	8010b48 <__aeabi_dcmpgt>
 803537c:	2800      	cmp	r0, #0
 803537e:	d093      	beq.n	80352a8 <_strtod_l+0x9f0>
 8035380:	e4c4      	b.n	8034d0c <_strtod_l+0x454>
 8035382:	bf00      	nop
 8035384:	f3af 8000 	nop.w
 8035388:	00000000 	.word	0x00000000
 803538c:	bff00000 	.word	0xbff00000
 8035390:	00000000 	.word	0x00000000
 8035394:	3ff00000 	.word	0x3ff00000
 8035398:	94a03595 	.word	0x94a03595
 803539c:	3fdfffff 	.word	0x3fdfffff
 80353a0:	35afe535 	.word	0x35afe535
 80353a4:	3fe00000 	.word	0x3fe00000
 80353a8:	000fffff 	.word	0x000fffff
 80353ac:	7ff00000 	.word	0x7ff00000
 80353b0:	7fefffff 	.word	0x7fefffff
 80353b4:	3ff00000 	.word	0x3ff00000
 80353b8:	3fe00000 	.word	0x3fe00000
 80353bc:	7fe00000 	.word	0x7fe00000
 80353c0:	7c9fffff 	.word	0x7c9fffff
 80353c4:	9b08      	ldr	r3, [sp, #32]
 80353c6:	b323      	cbz	r3, 8035412 <_strtod_l+0xb5a>
 80353c8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80353cc:	d821      	bhi.n	8035412 <_strtod_l+0xb5a>
 80353ce:	a328      	add	r3, pc, #160	@ (adr r3, 8035470 <_strtod_l+0xbb8>)
 80353d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80353d4:	4630      	mov	r0, r6
 80353d6:	4639      	mov	r1, r7
 80353d8:	f7db fba2 	bl	8010b20 <__aeabi_dcmple>
 80353dc:	b1a0      	cbz	r0, 8035408 <_strtod_l+0xb50>
 80353de:	4639      	mov	r1, r7
 80353e0:	4630      	mov	r0, r6
 80353e2:	f7db fbf9 	bl	8010bd8 <__aeabi_d2uiz>
 80353e6:	2801      	cmp	r0, #1
 80353e8:	bf38      	it	cc
 80353ea:	2001      	movcc	r0, #1
 80353ec:	f7db f8a2 	bl	8010534 <__aeabi_ui2d>
 80353f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80353f2:	4606      	mov	r6, r0
 80353f4:	460f      	mov	r7, r1
 80353f6:	b9fb      	cbnz	r3, 8035438 <_strtod_l+0xb80>
 80353f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80353fc:	9014      	str	r0, [sp, #80]	@ 0x50
 80353fe:	9315      	str	r3, [sp, #84]	@ 0x54
 8035400:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8035404:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8035408:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 803540a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 803540e:	1b5b      	subs	r3, r3, r5
 8035410:	9311      	str	r3, [sp, #68]	@ 0x44
 8035412:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8035416:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 803541a:	f7fe feb3 	bl	8034184 <__ulp>
 803541e:	4650      	mov	r0, sl
 8035420:	ec53 2b10 	vmov	r2, r3, d0
 8035424:	4659      	mov	r1, fp
 8035426:	f7db f8ff 	bl	8010628 <__aeabi_dmul>
 803542a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 803542e:	f7da ff45 	bl	80102bc <__adddf3>
 8035432:	4682      	mov	sl, r0
 8035434:	468b      	mov	fp, r1
 8035436:	e770      	b.n	803531a <_strtod_l+0xa62>
 8035438:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 803543c:	e7e0      	b.n	8035400 <_strtod_l+0xb48>
 803543e:	a30e      	add	r3, pc, #56	@ (adr r3, 8035478 <_strtod_l+0xbc0>)
 8035440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8035444:	f7db fb62 	bl	8010b0c <__aeabi_dcmplt>
 8035448:	e798      	b.n	803537c <_strtod_l+0xac4>
 803544a:	2300      	movs	r3, #0
 803544c:	930b      	str	r3, [sp, #44]	@ 0x2c
 803544e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8035450:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8035452:	6013      	str	r3, [r2, #0]
 8035454:	f7ff ba6d 	b.w	8034932 <_strtod_l+0x7a>
 8035458:	2a65      	cmp	r2, #101	@ 0x65
 803545a:	f43f ab66 	beq.w	8034b2a <_strtod_l+0x272>
 803545e:	2a45      	cmp	r2, #69	@ 0x45
 8035460:	f43f ab63 	beq.w	8034b2a <_strtod_l+0x272>
 8035464:	2301      	movs	r3, #1
 8035466:	f7ff bb9e 	b.w	8034ba6 <_strtod_l+0x2ee>
 803546a:	bf00      	nop
 803546c:	f3af 8000 	nop.w
 8035470:	ffc00000 	.word	0xffc00000
 8035474:	41dfffff 	.word	0x41dfffff
 8035478:	94a03595 	.word	0x94a03595
 803547c:	3fcfffff 	.word	0x3fcfffff

08035480 <_strtod_r>:
 8035480:	4b01      	ldr	r3, [pc, #4]	@ (8035488 <_strtod_r+0x8>)
 8035482:	f7ff ba19 	b.w	80348b8 <_strtod_l>
 8035486:	bf00      	nop
 8035488:	2000016c 	.word	0x2000016c

0803548c <_strtoul_l.constprop.0>:
 803548c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8035490:	4e34      	ldr	r6, [pc, #208]	@ (8035564 <_strtoul_l.constprop.0+0xd8>)
 8035492:	4686      	mov	lr, r0
 8035494:	460d      	mov	r5, r1
 8035496:	4628      	mov	r0, r5
 8035498:	f815 4b01 	ldrb.w	r4, [r5], #1
 803549c:	5d37      	ldrb	r7, [r6, r4]
 803549e:	f017 0708 	ands.w	r7, r7, #8
 80354a2:	d1f8      	bne.n	8035496 <_strtoul_l.constprop.0+0xa>
 80354a4:	2c2d      	cmp	r4, #45	@ 0x2d
 80354a6:	d12f      	bne.n	8035508 <_strtoul_l.constprop.0+0x7c>
 80354a8:	782c      	ldrb	r4, [r5, #0]
 80354aa:	2701      	movs	r7, #1
 80354ac:	1c85      	adds	r5, r0, #2
 80354ae:	f033 0010 	bics.w	r0, r3, #16
 80354b2:	d109      	bne.n	80354c8 <_strtoul_l.constprop.0+0x3c>
 80354b4:	2c30      	cmp	r4, #48	@ 0x30
 80354b6:	d12c      	bne.n	8035512 <_strtoul_l.constprop.0+0x86>
 80354b8:	7828      	ldrb	r0, [r5, #0]
 80354ba:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80354be:	2858      	cmp	r0, #88	@ 0x58
 80354c0:	d127      	bne.n	8035512 <_strtoul_l.constprop.0+0x86>
 80354c2:	786c      	ldrb	r4, [r5, #1]
 80354c4:	2310      	movs	r3, #16
 80354c6:	3502      	adds	r5, #2
 80354c8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80354cc:	2600      	movs	r6, #0
 80354ce:	fbb8 f8f3 	udiv	r8, r8, r3
 80354d2:	fb03 f908 	mul.w	r9, r3, r8
 80354d6:	ea6f 0909 	mvn.w	r9, r9
 80354da:	4630      	mov	r0, r6
 80354dc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80354e0:	f1bc 0f09 	cmp.w	ip, #9
 80354e4:	d81c      	bhi.n	8035520 <_strtoul_l.constprop.0+0x94>
 80354e6:	4664      	mov	r4, ip
 80354e8:	42a3      	cmp	r3, r4
 80354ea:	dd2a      	ble.n	8035542 <_strtoul_l.constprop.0+0xb6>
 80354ec:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80354f0:	d007      	beq.n	8035502 <_strtoul_l.constprop.0+0x76>
 80354f2:	4580      	cmp	r8, r0
 80354f4:	d322      	bcc.n	803553c <_strtoul_l.constprop.0+0xb0>
 80354f6:	d101      	bne.n	80354fc <_strtoul_l.constprop.0+0x70>
 80354f8:	45a1      	cmp	r9, r4
 80354fa:	db1f      	blt.n	803553c <_strtoul_l.constprop.0+0xb0>
 80354fc:	fb00 4003 	mla	r0, r0, r3, r4
 8035500:	2601      	movs	r6, #1
 8035502:	f815 4b01 	ldrb.w	r4, [r5], #1
 8035506:	e7e9      	b.n	80354dc <_strtoul_l.constprop.0+0x50>
 8035508:	2c2b      	cmp	r4, #43	@ 0x2b
 803550a:	bf04      	itt	eq
 803550c:	782c      	ldrbeq	r4, [r5, #0]
 803550e:	1c85      	addeq	r5, r0, #2
 8035510:	e7cd      	b.n	80354ae <_strtoul_l.constprop.0+0x22>
 8035512:	2b00      	cmp	r3, #0
 8035514:	d1d8      	bne.n	80354c8 <_strtoul_l.constprop.0+0x3c>
 8035516:	2c30      	cmp	r4, #48	@ 0x30
 8035518:	bf0c      	ite	eq
 803551a:	2308      	moveq	r3, #8
 803551c:	230a      	movne	r3, #10
 803551e:	e7d3      	b.n	80354c8 <_strtoul_l.constprop.0+0x3c>
 8035520:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8035524:	f1bc 0f19 	cmp.w	ip, #25
 8035528:	d801      	bhi.n	803552e <_strtoul_l.constprop.0+0xa2>
 803552a:	3c37      	subs	r4, #55	@ 0x37
 803552c:	e7dc      	b.n	80354e8 <_strtoul_l.constprop.0+0x5c>
 803552e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8035532:	f1bc 0f19 	cmp.w	ip, #25
 8035536:	d804      	bhi.n	8035542 <_strtoul_l.constprop.0+0xb6>
 8035538:	3c57      	subs	r4, #87	@ 0x57
 803553a:	e7d5      	b.n	80354e8 <_strtoul_l.constprop.0+0x5c>
 803553c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8035540:	e7df      	b.n	8035502 <_strtoul_l.constprop.0+0x76>
 8035542:	1c73      	adds	r3, r6, #1
 8035544:	d106      	bne.n	8035554 <_strtoul_l.constprop.0+0xc8>
 8035546:	2322      	movs	r3, #34	@ 0x22
 8035548:	f8ce 3000 	str.w	r3, [lr]
 803554c:	4630      	mov	r0, r6
 803554e:	b932      	cbnz	r2, 803555e <_strtoul_l.constprop.0+0xd2>
 8035550:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8035554:	b107      	cbz	r7, 8035558 <_strtoul_l.constprop.0+0xcc>
 8035556:	4240      	negs	r0, r0
 8035558:	2a00      	cmp	r2, #0
 803555a:	d0f9      	beq.n	8035550 <_strtoul_l.constprop.0+0xc4>
 803555c:	b106      	cbz	r6, 8035560 <_strtoul_l.constprop.0+0xd4>
 803555e:	1e69      	subs	r1, r5, #1
 8035560:	6011      	str	r1, [r2, #0]
 8035562:	e7f5      	b.n	8035550 <_strtoul_l.constprop.0+0xc4>
 8035564:	0803c7f9 	.word	0x0803c7f9

08035568 <_strtoul_r>:
 8035568:	f7ff bf90 	b.w	803548c <_strtoul_l.constprop.0>

0803556c <strtoul>:
 803556c:	4613      	mov	r3, r2
 803556e:	460a      	mov	r2, r1
 8035570:	4601      	mov	r1, r0
 8035572:	4802      	ldr	r0, [pc, #8]	@ (803557c <strtoul+0x10>)
 8035574:	6800      	ldr	r0, [r0, #0]
 8035576:	f7ff bf89 	b.w	803548c <_strtoul_l.constprop.0>
 803557a:	bf00      	nop
 803557c:	200002d8 	.word	0x200002d8

08035580 <__submore>:
 8035580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8035584:	460c      	mov	r4, r1
 8035586:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 8035588:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 803558c:	4299      	cmp	r1, r3
 803558e:	d11d      	bne.n	80355cc <__submore+0x4c>
 8035590:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8035594:	f7f9 ffba 	bl	802f50c <_malloc_r>
 8035598:	b918      	cbnz	r0, 80355a2 <__submore+0x22>
 803559a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 803559e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80355a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80355a6:	6363      	str	r3, [r4, #52]	@ 0x34
 80355a8:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 80355ac:	6320      	str	r0, [r4, #48]	@ 0x30
 80355ae:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80355b2:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80355b6:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80355ba:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80355be:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80355c2:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80355c6:	6020      	str	r0, [r4, #0]
 80355c8:	2000      	movs	r0, #0
 80355ca:	e7e8      	b.n	803559e <__submore+0x1e>
 80355cc:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 80355ce:	0077      	lsls	r7, r6, #1
 80355d0:	463a      	mov	r2, r7
 80355d2:	f7fe ffab 	bl	803452c <_realloc_r>
 80355d6:	4605      	mov	r5, r0
 80355d8:	2800      	cmp	r0, #0
 80355da:	d0de      	beq.n	803559a <__submore+0x1a>
 80355dc:	eb00 0806 	add.w	r8, r0, r6
 80355e0:	4601      	mov	r1, r0
 80355e2:	4632      	mov	r2, r6
 80355e4:	4640      	mov	r0, r8
 80355e6:	f7f8 ff77 	bl	802e4d8 <memcpy>
 80355ea:	e9c4 570c 	strd	r5, r7, [r4, #48]	@ 0x30
 80355ee:	f8c4 8000 	str.w	r8, [r4]
 80355f2:	e7e9      	b.n	80355c8 <__submore+0x48>

080355f4 <__ascii_wctomb>:
 80355f4:	4603      	mov	r3, r0
 80355f6:	4608      	mov	r0, r1
 80355f8:	b141      	cbz	r1, 803560c <__ascii_wctomb+0x18>
 80355fa:	2aff      	cmp	r2, #255	@ 0xff
 80355fc:	d904      	bls.n	8035608 <__ascii_wctomb+0x14>
 80355fe:	228a      	movs	r2, #138	@ 0x8a
 8035600:	601a      	str	r2, [r3, #0]
 8035602:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8035606:	4770      	bx	lr
 8035608:	700a      	strb	r2, [r1, #0]
 803560a:	2001      	movs	r0, #1
 803560c:	4770      	bx	lr

0803560e <__swbuf_r>:
 803560e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8035610:	460e      	mov	r6, r1
 8035612:	4614      	mov	r4, r2
 8035614:	4605      	mov	r5, r0
 8035616:	b118      	cbz	r0, 8035620 <__swbuf_r+0x12>
 8035618:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 803561a:	b90b      	cbnz	r3, 8035620 <__swbuf_r+0x12>
 803561c:	f7f7 fa7a 	bl	802cb14 <__sinit>
 8035620:	69a3      	ldr	r3, [r4, #24]
 8035622:	60a3      	str	r3, [r4, #8]
 8035624:	89a3      	ldrh	r3, [r4, #12]
 8035626:	0719      	lsls	r1, r3, #28
 8035628:	d501      	bpl.n	803562e <__swbuf_r+0x20>
 803562a:	6923      	ldr	r3, [r4, #16]
 803562c:	b943      	cbnz	r3, 8035640 <__swbuf_r+0x32>
 803562e:	4621      	mov	r1, r4
 8035630:	4628      	mov	r0, r5
 8035632:	f7f7 fc2b 	bl	802ce8c <__swsetup_r>
 8035636:	b118      	cbz	r0, 8035640 <__swbuf_r+0x32>
 8035638:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 803563c:	4638      	mov	r0, r7
 803563e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8035640:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8035644:	b2f6      	uxtb	r6, r6
 8035646:	049a      	lsls	r2, r3, #18
 8035648:	4637      	mov	r7, r6
 803564a:	d406      	bmi.n	803565a <__swbuf_r+0x4c>
 803564c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8035650:	81a3      	strh	r3, [r4, #12]
 8035652:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8035654:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8035658:	6663      	str	r3, [r4, #100]	@ 0x64
 803565a:	6823      	ldr	r3, [r4, #0]
 803565c:	6922      	ldr	r2, [r4, #16]
 803565e:	1a98      	subs	r0, r3, r2
 8035660:	6963      	ldr	r3, [r4, #20]
 8035662:	4283      	cmp	r3, r0
 8035664:	dc05      	bgt.n	8035672 <__swbuf_r+0x64>
 8035666:	4621      	mov	r1, r4
 8035668:	4628      	mov	r0, r5
 803566a:	f7f7 f911 	bl	802c890 <_fflush_r>
 803566e:	2800      	cmp	r0, #0
 8035670:	d1e2      	bne.n	8035638 <__swbuf_r+0x2a>
 8035672:	68a3      	ldr	r3, [r4, #8]
 8035674:	3b01      	subs	r3, #1
 8035676:	60a3      	str	r3, [r4, #8]
 8035678:	6823      	ldr	r3, [r4, #0]
 803567a:	1c5a      	adds	r2, r3, #1
 803567c:	6022      	str	r2, [r4, #0]
 803567e:	701e      	strb	r6, [r3, #0]
 8035680:	6962      	ldr	r2, [r4, #20]
 8035682:	1c43      	adds	r3, r0, #1
 8035684:	429a      	cmp	r2, r3
 8035686:	d004      	beq.n	8035692 <__swbuf_r+0x84>
 8035688:	89a3      	ldrh	r3, [r4, #12]
 803568a:	07db      	lsls	r3, r3, #31
 803568c:	d5d6      	bpl.n	803563c <__swbuf_r+0x2e>
 803568e:	2e0a      	cmp	r6, #10
 8035690:	d1d4      	bne.n	803563c <__swbuf_r+0x2e>
 8035692:	4621      	mov	r1, r4
 8035694:	4628      	mov	r0, r5
 8035696:	f7f7 f8fb 	bl	802c890 <_fflush_r>
 803569a:	2800      	cmp	r0, #0
 803569c:	d0ce      	beq.n	803563c <__swbuf_r+0x2e>
 803569e:	e7cb      	b.n	8035638 <__swbuf_r+0x2a>

080356a0 <_raise_r>:
 80356a0:	291f      	cmp	r1, #31
 80356a2:	b538      	push	{r3, r4, r5, lr}
 80356a4:	4605      	mov	r5, r0
 80356a6:	460c      	mov	r4, r1
 80356a8:	d904      	bls.n	80356b4 <_raise_r+0x14>
 80356aa:	2316      	movs	r3, #22
 80356ac:	6003      	str	r3, [r0, #0]
 80356ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80356b2:	bd38      	pop	{r3, r4, r5, pc}
 80356b4:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 80356b8:	b112      	cbz	r2, 80356c0 <_raise_r+0x20>
 80356ba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80356be:	b94b      	cbnz	r3, 80356d4 <_raise_r+0x34>
 80356c0:	4628      	mov	r0, r5
 80356c2:	f000 f8fd 	bl	80358c0 <_getpid_r>
 80356c6:	4622      	mov	r2, r4
 80356c8:	4601      	mov	r1, r0
 80356ca:	4628      	mov	r0, r5
 80356cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80356d0:	f000 b8e4 	b.w	803589c <_kill_r>
 80356d4:	2b01      	cmp	r3, #1
 80356d6:	d00a      	beq.n	80356ee <_raise_r+0x4e>
 80356d8:	1c59      	adds	r1, r3, #1
 80356da:	d103      	bne.n	80356e4 <_raise_r+0x44>
 80356dc:	2316      	movs	r3, #22
 80356de:	6003      	str	r3, [r0, #0]
 80356e0:	2001      	movs	r0, #1
 80356e2:	e7e6      	b.n	80356b2 <_raise_r+0x12>
 80356e4:	2100      	movs	r1, #0
 80356e6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80356ea:	4620      	mov	r0, r4
 80356ec:	4798      	blx	r3
 80356ee:	2000      	movs	r0, #0
 80356f0:	e7df      	b.n	80356b2 <_raise_r+0x12>
	...

080356f4 <raise>:
 80356f4:	4b02      	ldr	r3, [pc, #8]	@ (8035700 <raise+0xc>)
 80356f6:	4601      	mov	r1, r0
 80356f8:	6818      	ldr	r0, [r3, #0]
 80356fa:	f7ff bfd1 	b.w	80356a0 <_raise_r>
 80356fe:	bf00      	nop
 8035700:	200002d8 	.word	0x200002d8

08035704 <__gettzinfo>:
 8035704:	4800      	ldr	r0, [pc, #0]	@ (8035708 <__gettzinfo+0x4>)
 8035706:	4770      	bx	lr
 8035708:	20000818 	.word	0x20000818

0803570c <gmtime_r>:
 803570c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8035710:	4a4d      	ldr	r2, [pc, #308]	@ (8035848 <gmtime_r+0x13c>)
 8035712:	460c      	mov	r4, r1
 8035714:	2300      	movs	r3, #0
 8035716:	e9d0 0100 	ldrd	r0, r1, [r0]
 803571a:	f7db facd 	bl	8010cb8 <__aeabi_ldivmod>
 803571e:	2a00      	cmp	r2, #0
 8035720:	bfbc      	itt	lt
 8035722:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 8035726:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 803572a:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 803572e:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 8035732:	fbb2 f3f1 	udiv	r3, r2, r1
 8035736:	fb01 2213 	mls	r2, r1, r3, r2
 803573a:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 803573e:	bfac      	ite	ge
 8035740:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 8035744:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 8035748:	60a3      	str	r3, [r4, #8]
 803574a:	fbb2 f3f1 	udiv	r3, r2, r1
 803574e:	fb01 2213 	mls	r2, r1, r3, r2
 8035752:	6063      	str	r3, [r4, #4]
 8035754:	6022      	str	r2, [r4, #0]
 8035756:	1cc3      	adds	r3, r0, #3
 8035758:	2207      	movs	r2, #7
 803575a:	fb93 f2f2 	sdiv	r2, r3, r2
 803575e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8035762:	1a9b      	subs	r3, r3, r2
 8035764:	bf48      	it	mi
 8035766:	3307      	addmi	r3, #7
 8035768:	2800      	cmp	r0, #0
 803576a:	61a3      	str	r3, [r4, #24]
 803576c:	bfb8      	it	lt
 803576e:	f5a0 330e 	sublt.w	r3, r0, #145408	@ 0x23800
 8035772:	4936      	ldr	r1, [pc, #216]	@ (803584c <gmtime_r+0x140>)
 8035774:	bfae      	itee	ge
 8035776:	fb90 f1f1 	sdivge	r1, r0, r1
 803577a:	f5a3 732c 	sublt.w	r3, r3, #688	@ 0x2b0
 803577e:	fb93 f1f1 	sdivlt	r1, r3, r1
 8035782:	4b33      	ldr	r3, [pc, #204]	@ (8035850 <gmtime_r+0x144>)
 8035784:	fb03 0001 	mla	r0, r3, r1, r0
 8035788:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 803578c:	fbb0 f3f3 	udiv	r3, r0, r3
 8035790:	4403      	add	r3, r0
 8035792:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 8035796:	fbb0 f2fc 	udiv	r2, r0, ip
 803579a:	1a9b      	subs	r3, r3, r2
 803579c:	f240 176d 	movw	r7, #365	@ 0x16d
 80357a0:	4a2c      	ldr	r2, [pc, #176]	@ (8035854 <gmtime_r+0x148>)
 80357a2:	fbb0 f2f2 	udiv	r2, r0, r2
 80357a6:	2664      	movs	r6, #100	@ 0x64
 80357a8:	1a9b      	subs	r3, r3, r2
 80357aa:	fbb3 f2f7 	udiv	r2, r3, r7
 80357ae:	fbb3 f3fc 	udiv	r3, r3, ip
 80357b2:	fbb2 f5f6 	udiv	r5, r2, r6
 80357b6:	1aeb      	subs	r3, r5, r3
 80357b8:	4403      	add	r3, r0
 80357ba:	fb07 3312 	mls	r3, r7, r2, r3
 80357be:	2099      	movs	r0, #153	@ 0x99
 80357c0:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 80357c4:	3702      	adds	r7, #2
 80357c6:	f103 0e01 	add.w	lr, r3, #1
 80357ca:	fbb7 fcf0 	udiv	ip, r7, r0
 80357ce:	fb00 f00c 	mul.w	r0, r0, ip
 80357d2:	3002      	adds	r0, #2
 80357d4:	f04f 0805 	mov.w	r8, #5
 80357d8:	fbb0 f0f8 	udiv	r0, r0, r8
 80357dc:	ebae 0000 	sub.w	r0, lr, r0
 80357e0:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 80357e4:	4577      	cmp	r7, lr
 80357e6:	bf8c      	ite	hi
 80357e8:	f06f 0709 	mvnhi.w	r7, #9
 80357ec:	2702      	movls	r7, #2
 80357ee:	4467      	add	r7, ip
 80357f0:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 80357f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80357f8:	2f01      	cmp	r7, #1
 80357fa:	bf98      	it	ls
 80357fc:	3101      	addls	r1, #1
 80357fe:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 8035802:	d30c      	bcc.n	803581e <gmtime_r+0x112>
 8035804:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8035808:	61e3      	str	r3, [r4, #28]
 803580a:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 803580e:	2300      	movs	r3, #0
 8035810:	60e0      	str	r0, [r4, #12]
 8035812:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8035816:	6223      	str	r3, [r4, #32]
 8035818:	4620      	mov	r0, r4
 803581a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803581e:	f012 0f03 	tst.w	r2, #3
 8035822:	d102      	bne.n	803582a <gmtime_r+0x11e>
 8035824:	fb06 2515 	mls	r5, r6, r5, r2
 8035828:	b95d      	cbnz	r5, 8035842 <gmtime_r+0x136>
 803582a:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 803582e:	fbb2 f6f5 	udiv	r6, r2, r5
 8035832:	fb05 2216 	mls	r2, r5, r6, r2
 8035836:	fab2 f282 	clz	r2, r2
 803583a:	0952      	lsrs	r2, r2, #5
 803583c:	333b      	adds	r3, #59	@ 0x3b
 803583e:	4413      	add	r3, r2
 8035840:	e7e2      	b.n	8035808 <gmtime_r+0xfc>
 8035842:	2201      	movs	r2, #1
 8035844:	e7fa      	b.n	803583c <gmtime_r+0x130>
 8035846:	bf00      	nop
 8035848:	00015180 	.word	0x00015180
 803584c:	00023ab1 	.word	0x00023ab1
 8035850:	fffdc54f 	.word	0xfffdc54f
 8035854:	00023ab0 	.word	0x00023ab0

08035858 <_fstat_r>:
 8035858:	b538      	push	{r3, r4, r5, lr}
 803585a:	4d07      	ldr	r5, [pc, #28]	@ (8035878 <_fstat_r+0x20>)
 803585c:	2300      	movs	r3, #0
 803585e:	4604      	mov	r4, r0
 8035860:	4608      	mov	r0, r1
 8035862:	4611      	mov	r1, r2
 8035864:	602b      	str	r3, [r5, #0]
 8035866:	f7dc ff1c 	bl	80126a2 <_fstat>
 803586a:	1c43      	adds	r3, r0, #1
 803586c:	d102      	bne.n	8035874 <_fstat_r+0x1c>
 803586e:	682b      	ldr	r3, [r5, #0]
 8035870:	b103      	cbz	r3, 8035874 <_fstat_r+0x1c>
 8035872:	6023      	str	r3, [r4, #0]
 8035874:	bd38      	pop	{r3, r4, r5, pc}
 8035876:	bf00      	nop
 8035878:	2001a0d4 	.word	0x2001a0d4

0803587c <_isatty_r>:
 803587c:	b538      	push	{r3, r4, r5, lr}
 803587e:	4d06      	ldr	r5, [pc, #24]	@ (8035898 <_isatty_r+0x1c>)
 8035880:	2300      	movs	r3, #0
 8035882:	4604      	mov	r4, r0
 8035884:	4608      	mov	r0, r1
 8035886:	602b      	str	r3, [r5, #0]
 8035888:	f7dc ff10 	bl	80126ac <_isatty>
 803588c:	1c43      	adds	r3, r0, #1
 803588e:	d102      	bne.n	8035896 <_isatty_r+0x1a>
 8035890:	682b      	ldr	r3, [r5, #0]
 8035892:	b103      	cbz	r3, 8035896 <_isatty_r+0x1a>
 8035894:	6023      	str	r3, [r4, #0]
 8035896:	bd38      	pop	{r3, r4, r5, pc}
 8035898:	2001a0d4 	.word	0x2001a0d4

0803589c <_kill_r>:
 803589c:	b538      	push	{r3, r4, r5, lr}
 803589e:	4d07      	ldr	r5, [pc, #28]	@ (80358bc <_kill_r+0x20>)
 80358a0:	2300      	movs	r3, #0
 80358a2:	4604      	mov	r4, r0
 80358a4:	4608      	mov	r0, r1
 80358a6:	4611      	mov	r1, r2
 80358a8:	602b      	str	r3, [r5, #0]
 80358aa:	f7dc fecb 	bl	8012644 <_kill>
 80358ae:	1c43      	adds	r3, r0, #1
 80358b0:	d102      	bne.n	80358b8 <_kill_r+0x1c>
 80358b2:	682b      	ldr	r3, [r5, #0]
 80358b4:	b103      	cbz	r3, 80358b8 <_kill_r+0x1c>
 80358b6:	6023      	str	r3, [r4, #0]
 80358b8:	bd38      	pop	{r3, r4, r5, pc}
 80358ba:	bf00      	nop
 80358bc:	2001a0d4 	.word	0x2001a0d4

080358c0 <_getpid_r>:
 80358c0:	f7dc bebe 	b.w	8012640 <_getpid>

080358c4 <_sbrk_r>:
 80358c4:	b538      	push	{r3, r4, r5, lr}
 80358c6:	4d06      	ldr	r5, [pc, #24]	@ (80358e0 <_sbrk_r+0x1c>)
 80358c8:	2300      	movs	r3, #0
 80358ca:	4604      	mov	r4, r0
 80358cc:	4608      	mov	r0, r1
 80358ce:	602b      	str	r3, [r5, #0]
 80358d0:	f7dc fef0 	bl	80126b4 <_sbrk>
 80358d4:	1c43      	adds	r3, r0, #1
 80358d6:	d102      	bne.n	80358de <_sbrk_r+0x1a>
 80358d8:	682b      	ldr	r3, [r5, #0]
 80358da:	b103      	cbz	r3, 80358de <_sbrk_r+0x1a>
 80358dc:	6023      	str	r3, [r4, #0]
 80358de:	bd38      	pop	{r3, r4, r5, pc}
 80358e0:	2001a0d4 	.word	0x2001a0d4

080358e4 <sysconf>:
 80358e4:	2808      	cmp	r0, #8
 80358e6:	b508      	push	{r3, lr}
 80358e8:	d006      	beq.n	80358f8 <sysconf+0x14>
 80358ea:	f7f8 fdbd 	bl	802e468 <__errno>
 80358ee:	2316      	movs	r3, #22
 80358f0:	6003      	str	r3, [r0, #0]
 80358f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80358f6:	bd08      	pop	{r3, pc}
 80358f8:	2080      	movs	r0, #128	@ 0x80
 80358fa:	e7fc      	b.n	80358f6 <sysconf+0x12>

080358fc <_strtoll_l.constprop.0>:
 80358fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8035900:	b085      	sub	sp, #20
 8035902:	4690      	mov	r8, r2
 8035904:	4a43      	ldr	r2, [pc, #268]	@ (8035a14 <_strtoll_l.constprop.0+0x118>)
 8035906:	9002      	str	r0, [sp, #8]
 8035908:	4689      	mov	r9, r1
 803590a:	461e      	mov	r6, r3
 803590c:	460d      	mov	r5, r1
 803590e:	462b      	mov	r3, r5
 8035910:	f815 4b01 	ldrb.w	r4, [r5], #1
 8035914:	5d17      	ldrb	r7, [r2, r4]
 8035916:	f017 0708 	ands.w	r7, r7, #8
 803591a:	d1f8      	bne.n	803590e <_strtoll_l.constprop.0+0x12>
 803591c:	2c2d      	cmp	r4, #45	@ 0x2d
 803591e:	d149      	bne.n	80359b4 <_strtoll_l.constprop.0+0xb8>
 8035920:	782c      	ldrb	r4, [r5, #0]
 8035922:	2701      	movs	r7, #1
 8035924:	1c9d      	adds	r5, r3, #2
 8035926:	f036 0310 	bics.w	r3, r6, #16
 803592a:	d109      	bne.n	8035940 <_strtoll_l.constprop.0+0x44>
 803592c:	2c30      	cmp	r4, #48	@ 0x30
 803592e:	d146      	bne.n	80359be <_strtoll_l.constprop.0+0xc2>
 8035930:	782b      	ldrb	r3, [r5, #0]
 8035932:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8035936:	2b58      	cmp	r3, #88	@ 0x58
 8035938:	d141      	bne.n	80359be <_strtoll_l.constprop.0+0xc2>
 803593a:	786c      	ldrb	r4, [r5, #1]
 803593c:	2610      	movs	r6, #16
 803593e:	3502      	adds	r5, #2
 8035940:	f107 4a00 	add.w	sl, r7, #2147483648	@ 0x80000000
 8035944:	f107 3bff 	add.w	fp, r7, #4294967295	@ 0xffffffff
 8035948:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 803594c:	17f3      	asrs	r3, r6, #31
 803594e:	4632      	mov	r2, r6
 8035950:	4658      	mov	r0, fp
 8035952:	4651      	mov	r1, sl
 8035954:	9303      	str	r3, [sp, #12]
 8035956:	f7db f9ff 	bl	8010d58 <__aeabi_uldivmod>
 803595a:	9201      	str	r2, [sp, #4]
 803595c:	2200      	movs	r2, #0
 803595e:	468e      	mov	lr, r1
 8035960:	4684      	mov	ip, r0
 8035962:	4611      	mov	r1, r2
 8035964:	4610      	mov	r0, r2
 8035966:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 803596a:	2b09      	cmp	r3, #9
 803596c:	d905      	bls.n	803597a <_strtoll_l.constprop.0+0x7e>
 803596e:	f1a4 0341 	sub.w	r3, r4, #65	@ 0x41
 8035972:	2b19      	cmp	r3, #25
 8035974:	d82a      	bhi.n	80359cc <_strtoll_l.constprop.0+0xd0>
 8035976:	f1a4 0337 	sub.w	r3, r4, #55	@ 0x37
 803597a:	429e      	cmp	r6, r3
 803597c:	dd30      	ble.n	80359e0 <_strtoll_l.constprop.0+0xe4>
 803597e:	1c54      	adds	r4, r2, #1
 8035980:	d015      	beq.n	80359ae <_strtoll_l.constprop.0+0xb2>
 8035982:	4584      	cmp	ip, r0
 8035984:	eb7e 0201 	sbcs.w	r2, lr, r1
 8035988:	d327      	bcc.n	80359da <_strtoll_l.constprop.0+0xde>
 803598a:	458e      	cmp	lr, r1
 803598c:	bf08      	it	eq
 803598e:	4584      	cmpeq	ip, r0
 8035990:	d102      	bne.n	8035998 <_strtoll_l.constprop.0+0x9c>
 8035992:	9a01      	ldr	r2, [sp, #4]
 8035994:	429a      	cmp	r2, r3
 8035996:	db20      	blt.n	80359da <_strtoll_l.constprop.0+0xde>
 8035998:	9a03      	ldr	r2, [sp, #12]
 803599a:	4371      	muls	r1, r6
 803599c:	fb00 1102 	mla	r1, r0, r2, r1
 80359a0:	fba6 0200 	umull	r0, r2, r6, r0
 80359a4:	440a      	add	r2, r1
 80359a6:	1818      	adds	r0, r3, r0
 80359a8:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
 80359ac:	2201      	movs	r2, #1
 80359ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80359b2:	e7d8      	b.n	8035966 <_strtoll_l.constprop.0+0x6a>
 80359b4:	2c2b      	cmp	r4, #43	@ 0x2b
 80359b6:	bf04      	itt	eq
 80359b8:	782c      	ldrbeq	r4, [r5, #0]
 80359ba:	1c9d      	addeq	r5, r3, #2
 80359bc:	e7b3      	b.n	8035926 <_strtoll_l.constprop.0+0x2a>
 80359be:	2e00      	cmp	r6, #0
 80359c0:	d1be      	bne.n	8035940 <_strtoll_l.constprop.0+0x44>
 80359c2:	2c30      	cmp	r4, #48	@ 0x30
 80359c4:	bf0c      	ite	eq
 80359c6:	2608      	moveq	r6, #8
 80359c8:	260a      	movne	r6, #10
 80359ca:	e7b9      	b.n	8035940 <_strtoll_l.constprop.0+0x44>
 80359cc:	f1a4 0361 	sub.w	r3, r4, #97	@ 0x61
 80359d0:	2b19      	cmp	r3, #25
 80359d2:	d805      	bhi.n	80359e0 <_strtoll_l.constprop.0+0xe4>
 80359d4:	f1a4 0357 	sub.w	r3, r4, #87	@ 0x57
 80359d8:	e7cf      	b.n	803597a <_strtoll_l.constprop.0+0x7e>
 80359da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80359de:	e7e6      	b.n	80359ae <_strtoll_l.constprop.0+0xb2>
 80359e0:	1c53      	adds	r3, r2, #1
 80359e2:	d10a      	bne.n	80359fa <_strtoll_l.constprop.0+0xfe>
 80359e4:	9a02      	ldr	r2, [sp, #8]
 80359e6:	2322      	movs	r3, #34	@ 0x22
 80359e8:	6013      	str	r3, [r2, #0]
 80359ea:	4658      	mov	r0, fp
 80359ec:	4651      	mov	r1, sl
 80359ee:	f1b8 0f00 	cmp.w	r8, #0
 80359f2:	d10a      	bne.n	8035a0a <_strtoll_l.constprop.0+0x10e>
 80359f4:	b005      	add	sp, #20
 80359f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80359fa:	b117      	cbz	r7, 8035a02 <_strtoll_l.constprop.0+0x106>
 80359fc:	4240      	negs	r0, r0
 80359fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8035a02:	f1b8 0f00 	cmp.w	r8, #0
 8035a06:	d0f5      	beq.n	80359f4 <_strtoll_l.constprop.0+0xf8>
 8035a08:	b10a      	cbz	r2, 8035a0e <_strtoll_l.constprop.0+0x112>
 8035a0a:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8035a0e:	f8c8 9000 	str.w	r9, [r8]
 8035a12:	e7ef      	b.n	80359f4 <_strtoll_l.constprop.0+0xf8>
 8035a14:	0803c7f9 	.word	0x0803c7f9

08035a18 <_strtoll_r>:
 8035a18:	f7ff bf70 	b.w	80358fc <_strtoll_l.constprop.0>

08035a1c <__libc_fini_array>:
 8035a1c:	b538      	push	{r3, r4, r5, lr}
 8035a1e:	4d07      	ldr	r5, [pc, #28]	@ (8035a3c <__libc_fini_array+0x20>)
 8035a20:	4c07      	ldr	r4, [pc, #28]	@ (8035a40 <__libc_fini_array+0x24>)
 8035a22:	1b64      	subs	r4, r4, r5
 8035a24:	10a4      	asrs	r4, r4, #2
 8035a26:	b91c      	cbnz	r4, 8035a30 <__libc_fini_array+0x14>
 8035a28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8035a2c:	f000 bc9c 	b.w	8036368 <_fini>
 8035a30:	3c01      	subs	r4, #1
 8035a32:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8035a36:	4798      	blx	r3
 8035a38:	e7f5      	b.n	8035a26 <__libc_fini_array+0xa>
 8035a3a:	bf00      	nop
 8035a3c:	0803cc10 	.word	0x0803cc10
 8035a40:	0803cc14 	.word	0x0803cc14

08035a44 <_strtoull_l.constprop.0>:
 8035a44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8035a48:	4691      	mov	r9, r2
 8035a4a:	4a48      	ldr	r2, [pc, #288]	@ (8035b6c <_strtoull_l.constprop.0+0x128>)
 8035a4c:	9001      	str	r0, [sp, #4]
 8035a4e:	468a      	mov	sl, r1
 8035a50:	461e      	mov	r6, r3
 8035a52:	460d      	mov	r5, r1
 8035a54:	462b      	mov	r3, r5
 8035a56:	f815 4b01 	ldrb.w	r4, [r5], #1
 8035a5a:	5d17      	ldrb	r7, [r2, r4]
 8035a5c:	f017 0708 	ands.w	r7, r7, #8
 8035a60:	d1f8      	bne.n	8035a54 <_strtoull_l.constprop.0+0x10>
 8035a62:	2c2d      	cmp	r4, #45	@ 0x2d
 8035a64:	d14a      	bne.n	8035afc <_strtoull_l.constprop.0+0xb8>
 8035a66:	782c      	ldrb	r4, [r5, #0]
 8035a68:	2701      	movs	r7, #1
 8035a6a:	1c9d      	adds	r5, r3, #2
 8035a6c:	f036 0310 	bics.w	r3, r6, #16
 8035a70:	d109      	bne.n	8035a86 <_strtoull_l.constprop.0+0x42>
 8035a72:	2c30      	cmp	r4, #48	@ 0x30
 8035a74:	d147      	bne.n	8035b06 <_strtoull_l.constprop.0+0xc2>
 8035a76:	782b      	ldrb	r3, [r5, #0]
 8035a78:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8035a7c:	2b58      	cmp	r3, #88	@ 0x58
 8035a7e:	d142      	bne.n	8035b06 <_strtoull_l.constprop.0+0xc2>
 8035a80:	786c      	ldrb	r4, [r5, #1]
 8035a82:	2610      	movs	r6, #16
 8035a84:	3502      	adds	r5, #2
 8035a86:	ea4f 7be6 	mov.w	fp, r6, asr #31
 8035a8a:	4632      	mov	r2, r6
 8035a8c:	465b      	mov	r3, fp
 8035a8e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8035a92:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8035a96:	f7db f95f 	bl	8010d58 <__aeabi_uldivmod>
 8035a9a:	4632      	mov	r2, r6
 8035a9c:	9000      	str	r0, [sp, #0]
 8035a9e:	4688      	mov	r8, r1
 8035aa0:	465b      	mov	r3, fp
 8035aa2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8035aa6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8035aaa:	f7db f955 	bl	8010d58 <__aeabi_uldivmod>
 8035aae:	2300      	movs	r3, #0
 8035ab0:	4618      	mov	r0, r3
 8035ab2:	4619      	mov	r1, r3
 8035ab4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8035ab8:	f1bc 0f09 	cmp.w	ip, #9
 8035abc:	d82a      	bhi.n	8035b14 <_strtoull_l.constprop.0+0xd0>
 8035abe:	4664      	mov	r4, ip
 8035ac0:	42a6      	cmp	r6, r4
 8035ac2:	dd38      	ble.n	8035b36 <_strtoull_l.constprop.0+0xf2>
 8035ac4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8035ac8:	d015      	beq.n	8035af6 <_strtoull_l.constprop.0+0xb2>
 8035aca:	9b00      	ldr	r3, [sp, #0]
 8035acc:	4283      	cmp	r3, r0
 8035ace:	eb78 0301 	sbcs.w	r3, r8, r1
 8035ad2:	d32d      	bcc.n	8035b30 <_strtoull_l.constprop.0+0xec>
 8035ad4:	9b00      	ldr	r3, [sp, #0]
 8035ad6:	4588      	cmp	r8, r1
 8035ad8:	bf08      	it	eq
 8035ada:	4283      	cmpeq	r3, r0
 8035adc:	d101      	bne.n	8035ae2 <_strtoull_l.constprop.0+0x9e>
 8035ade:	42a2      	cmp	r2, r4
 8035ae0:	db26      	blt.n	8035b30 <_strtoull_l.constprop.0+0xec>
 8035ae2:	4371      	muls	r1, r6
 8035ae4:	fb00 110b 	mla	r1, r0, fp, r1
 8035ae8:	fba6 0300 	umull	r0, r3, r6, r0
 8035aec:	4419      	add	r1, r3
 8035aee:	1820      	adds	r0, r4, r0
 8035af0:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8035af4:	2301      	movs	r3, #1
 8035af6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8035afa:	e7db      	b.n	8035ab4 <_strtoull_l.constprop.0+0x70>
 8035afc:	2c2b      	cmp	r4, #43	@ 0x2b
 8035afe:	bf04      	itt	eq
 8035b00:	782c      	ldrbeq	r4, [r5, #0]
 8035b02:	1c9d      	addeq	r5, r3, #2
 8035b04:	e7b2      	b.n	8035a6c <_strtoull_l.constprop.0+0x28>
 8035b06:	2e00      	cmp	r6, #0
 8035b08:	d1bd      	bne.n	8035a86 <_strtoull_l.constprop.0+0x42>
 8035b0a:	2c30      	cmp	r4, #48	@ 0x30
 8035b0c:	bf0c      	ite	eq
 8035b0e:	2608      	moveq	r6, #8
 8035b10:	260a      	movne	r6, #10
 8035b12:	e7b8      	b.n	8035a86 <_strtoull_l.constprop.0+0x42>
 8035b14:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8035b18:	f1bc 0f19 	cmp.w	ip, #25
 8035b1c:	d801      	bhi.n	8035b22 <_strtoull_l.constprop.0+0xde>
 8035b1e:	3c37      	subs	r4, #55	@ 0x37
 8035b20:	e7ce      	b.n	8035ac0 <_strtoull_l.constprop.0+0x7c>
 8035b22:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8035b26:	f1bc 0f19 	cmp.w	ip, #25
 8035b2a:	d804      	bhi.n	8035b36 <_strtoull_l.constprop.0+0xf2>
 8035b2c:	3c57      	subs	r4, #87	@ 0x57
 8035b2e:	e7c7      	b.n	8035ac0 <_strtoull_l.constprop.0+0x7c>
 8035b30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8035b34:	e7df      	b.n	8035af6 <_strtoull_l.constprop.0+0xb2>
 8035b36:	1c5a      	adds	r2, r3, #1
 8035b38:	d10a      	bne.n	8035b50 <_strtoull_l.constprop.0+0x10c>
 8035b3a:	9901      	ldr	r1, [sp, #4]
 8035b3c:	2222      	movs	r2, #34	@ 0x22
 8035b3e:	600a      	str	r2, [r1, #0]
 8035b40:	4618      	mov	r0, r3
 8035b42:	4619      	mov	r1, r3
 8035b44:	f1b9 0f00 	cmp.w	r9, #0
 8035b48:	d10a      	bne.n	8035b60 <_strtoull_l.constprop.0+0x11c>
 8035b4a:	b003      	add	sp, #12
 8035b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8035b50:	b117      	cbz	r7, 8035b58 <_strtoull_l.constprop.0+0x114>
 8035b52:	4240      	negs	r0, r0
 8035b54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8035b58:	f1b9 0f00 	cmp.w	r9, #0
 8035b5c:	d0f5      	beq.n	8035b4a <_strtoull_l.constprop.0+0x106>
 8035b5e:	b10b      	cbz	r3, 8035b64 <_strtoull_l.constprop.0+0x120>
 8035b60:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8035b64:	f8c9 a000 	str.w	sl, [r9]
 8035b68:	e7ef      	b.n	8035b4a <_strtoull_l.constprop.0+0x106>
 8035b6a:	bf00      	nop
 8035b6c:	0803c7f9 	.word	0x0803c7f9

08035b70 <_strtoull_r>:
 8035b70:	f7ff bf68 	b.w	8035a44 <_strtoull_l.constprop.0>

08035b74 <_mbrtowc_r>:
 8035b74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8035b76:	4c0a      	ldr	r4, [pc, #40]	@ (8035ba0 <_mbrtowc_r+0x2c>)
 8035b78:	9e08      	ldr	r6, [sp, #32]
 8035b7a:	f8d4 70e4 	ldr.w	r7, [r4, #228]	@ 0xe4
 8035b7e:	9600      	str	r6, [sp, #0]
 8035b80:	4605      	mov	r5, r0
 8035b82:	4614      	mov	r4, r2
 8035b84:	b912      	cbnz	r2, 8035b8c <_mbrtowc_r+0x18>
 8035b86:	4a07      	ldr	r2, [pc, #28]	@ (8035ba4 <_mbrtowc_r+0x30>)
 8035b88:	2301      	movs	r3, #1
 8035b8a:	4621      	mov	r1, r4
 8035b8c:	47b8      	blx	r7
 8035b8e:	1c43      	adds	r3, r0, #1
 8035b90:	bf01      	itttt	eq
 8035b92:	2300      	moveq	r3, #0
 8035b94:	6033      	streq	r3, [r6, #0]
 8035b96:	238a      	moveq	r3, #138	@ 0x8a
 8035b98:	602b      	streq	r3, [r5, #0]
 8035b9a:	b003      	add	sp, #12
 8035b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8035b9e:	bf00      	nop
 8035ba0:	2000016c 	.word	0x2000016c
 8035ba4:	0803c43a 	.word	0x0803c43a

08035ba8 <iswspace>:
 8035ba8:	2100      	movs	r1, #0
 8035baa:	f000 b801 	b.w	8035bb0 <iswspace_l>
	...

08035bb0 <iswspace_l>:
 8035bb0:	28ff      	cmp	r0, #255	@ 0xff
 8035bb2:	bf9d      	ittte	ls
 8035bb4:	4b02      	ldrls	r3, [pc, #8]	@ (8035bc0 <iswspace_l+0x10>)
 8035bb6:	5c18      	ldrbls	r0, [r3, r0]
 8035bb8:	f000 0008 	andls.w	r0, r0, #8
 8035bbc:	2000      	movhi	r0, #0
 8035bbe:	4770      	bx	lr
 8035bc0:	0803c7f9 	.word	0x0803c7f9

08035bc4 <__register_exitproc>:
 8035bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8035bc8:	f8df a074 	ldr.w	sl, [pc, #116]	@ 8035c40 <__register_exitproc+0x7c>
 8035bcc:	4606      	mov	r6, r0
 8035bce:	f8da 0000 	ldr.w	r0, [sl]
 8035bd2:	4698      	mov	r8, r3
 8035bd4:	460f      	mov	r7, r1
 8035bd6:	4691      	mov	r9, r2
 8035bd8:	f7f8 fc7b 	bl	802e4d2 <__retarget_lock_acquire_recursive>
 8035bdc:	4b16      	ldr	r3, [pc, #88]	@ (8035c38 <__register_exitproc+0x74>)
 8035bde:	681c      	ldr	r4, [r3, #0]
 8035be0:	b90c      	cbnz	r4, 8035be6 <__register_exitproc+0x22>
 8035be2:	4c16      	ldr	r4, [pc, #88]	@ (8035c3c <__register_exitproc+0x78>)
 8035be4:	601c      	str	r4, [r3, #0]
 8035be6:	6865      	ldr	r5, [r4, #4]
 8035be8:	f8da 0000 	ldr.w	r0, [sl]
 8035bec:	2d1f      	cmp	r5, #31
 8035bee:	dd05      	ble.n	8035bfc <__register_exitproc+0x38>
 8035bf0:	f7f8 fc71 	bl	802e4d6 <__retarget_lock_release_recursive>
 8035bf4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8035bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8035bfc:	b19e      	cbz	r6, 8035c26 <__register_exitproc+0x62>
 8035bfe:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8035c02:	2201      	movs	r2, #1
 8035c04:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 8035c08:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 8035c0c:	40aa      	lsls	r2, r5
 8035c0e:	4313      	orrs	r3, r2
 8035c10:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 8035c14:	2e02      	cmp	r6, #2
 8035c16:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 8035c1a:	bf02      	ittt	eq
 8035c1c:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 8035c20:	4313      	orreq	r3, r2
 8035c22:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 8035c26:	1c6b      	adds	r3, r5, #1
 8035c28:	3502      	adds	r5, #2
 8035c2a:	6063      	str	r3, [r4, #4]
 8035c2c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8035c30:	f7f8 fc51 	bl	802e4d6 <__retarget_lock_release_recursive>
 8035c34:	2000      	movs	r0, #0
 8035c36:	e7df      	b.n	8035bf8 <__register_exitproc+0x34>
 8035c38:	2001a0e0 	.word	0x2001a0e0
 8035c3c:	2001a118 	.word	0x2001a118
 8035c40:	20000400 	.word	0x20000400
 8035c44:	00000000 	.word	0x00000000

08035c48 <nan>:
 8035c48:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8035c50 <nan+0x8>
 8035c4c:	4770      	bx	lr
 8035c4e:	bf00      	nop
 8035c50:	00000000 	.word	0x00000000
 8035c54:	7ff80000 	.word	0x7ff80000

08035c58 <nanf>:
 8035c58:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8035c60 <nanf+0x8>
 8035c5c:	4770      	bx	lr
 8035c5e:	bf00      	nop
 8035c60:	7fc00000 	.word	0x7fc00000

08035c64 <_calloc_r>:
 8035c64:	b538      	push	{r3, r4, r5, lr}
 8035c66:	fba1 1502 	umull	r1, r5, r1, r2
 8035c6a:	b935      	cbnz	r5, 8035c7a <_calloc_r+0x16>
 8035c6c:	f7f9 fc4e 	bl	802f50c <_malloc_r>
 8035c70:	4604      	mov	r4, r0
 8035c72:	b938      	cbnz	r0, 8035c84 <_calloc_r+0x20>
 8035c74:	2400      	movs	r4, #0
 8035c76:	4620      	mov	r0, r4
 8035c78:	bd38      	pop	{r3, r4, r5, pc}
 8035c7a:	f7f8 fbf5 	bl	802e468 <__errno>
 8035c7e:	230c      	movs	r3, #12
 8035c80:	6003      	str	r3, [r0, #0]
 8035c82:	e7f7      	b.n	8035c74 <_calloc_r+0x10>
 8035c84:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8035c88:	f022 0203 	bic.w	r2, r2, #3
 8035c8c:	3a04      	subs	r2, #4
 8035c8e:	2a24      	cmp	r2, #36	@ 0x24
 8035c90:	d819      	bhi.n	8035cc6 <_calloc_r+0x62>
 8035c92:	2a13      	cmp	r2, #19
 8035c94:	d915      	bls.n	8035cc2 <_calloc_r+0x5e>
 8035c96:	2a1b      	cmp	r2, #27
 8035c98:	e9c0 5500 	strd	r5, r5, [r0]
 8035c9c:	d806      	bhi.n	8035cac <_calloc_r+0x48>
 8035c9e:	f100 0308 	add.w	r3, r0, #8
 8035ca2:	2200      	movs	r2, #0
 8035ca4:	e9c3 2200 	strd	r2, r2, [r3]
 8035ca8:	609a      	str	r2, [r3, #8]
 8035caa:	e7e4      	b.n	8035c76 <_calloc_r+0x12>
 8035cac:	2a24      	cmp	r2, #36	@ 0x24
 8035cae:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8035cb2:	bf11      	iteee	ne
 8035cb4:	f100 0310 	addne.w	r3, r0, #16
 8035cb8:	6105      	streq	r5, [r0, #16]
 8035cba:	f100 0318 	addeq.w	r3, r0, #24
 8035cbe:	6145      	streq	r5, [r0, #20]
 8035cc0:	e7ef      	b.n	8035ca2 <_calloc_r+0x3e>
 8035cc2:	4603      	mov	r3, r0
 8035cc4:	e7ed      	b.n	8035ca2 <_calloc_r+0x3e>
 8035cc6:	4629      	mov	r1, r5
 8035cc8:	f7f7 f9ca 	bl	802d060 <memset>
 8035ccc:	e7d3      	b.n	8035c76 <_calloc_r+0x12>
	...

08035cd0 <__env_lock>:
 8035cd0:	4801      	ldr	r0, [pc, #4]	@ (8035cd8 <__env_lock+0x8>)
 8035cd2:	f7f8 bbfe 	b.w	802e4d2 <__retarget_lock_acquire_recursive>
 8035cd6:	bf00      	nop
 8035cd8:	2001a0d9 	.word	0x2001a0d9

08035cdc <__env_unlock>:
 8035cdc:	4801      	ldr	r0, [pc, #4]	@ (8035ce4 <__env_unlock+0x8>)
 8035cde:	f7f8 bbfa 	b.w	802e4d6 <__retarget_lock_release_recursive>
 8035ce2:	bf00      	nop
 8035ce4:	2001a0d9 	.word	0x2001a0d9

08035ce8 <rshift>:
 8035ce8:	6903      	ldr	r3, [r0, #16]
 8035cea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8035cee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8035cf2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8035cf6:	f100 0414 	add.w	r4, r0, #20
 8035cfa:	dd45      	ble.n	8035d88 <rshift+0xa0>
 8035cfc:	f011 011f 	ands.w	r1, r1, #31
 8035d00:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8035d04:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8035d08:	d10c      	bne.n	8035d24 <rshift+0x3c>
 8035d0a:	f100 0710 	add.w	r7, r0, #16
 8035d0e:	4629      	mov	r1, r5
 8035d10:	42b1      	cmp	r1, r6
 8035d12:	d334      	bcc.n	8035d7e <rshift+0x96>
 8035d14:	1a9b      	subs	r3, r3, r2
 8035d16:	009b      	lsls	r3, r3, #2
 8035d18:	1eea      	subs	r2, r5, #3
 8035d1a:	4296      	cmp	r6, r2
 8035d1c:	bf38      	it	cc
 8035d1e:	2300      	movcc	r3, #0
 8035d20:	4423      	add	r3, r4
 8035d22:	e015      	b.n	8035d50 <rshift+0x68>
 8035d24:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8035d28:	f1c1 0820 	rsb	r8, r1, #32
 8035d2c:	40cf      	lsrs	r7, r1
 8035d2e:	f105 0e04 	add.w	lr, r5, #4
 8035d32:	46a1      	mov	r9, r4
 8035d34:	4576      	cmp	r6, lr
 8035d36:	46f4      	mov	ip, lr
 8035d38:	d815      	bhi.n	8035d66 <rshift+0x7e>
 8035d3a:	1a9a      	subs	r2, r3, r2
 8035d3c:	0092      	lsls	r2, r2, #2
 8035d3e:	3a04      	subs	r2, #4
 8035d40:	3501      	adds	r5, #1
 8035d42:	42ae      	cmp	r6, r5
 8035d44:	bf38      	it	cc
 8035d46:	2200      	movcc	r2, #0
 8035d48:	18a3      	adds	r3, r4, r2
 8035d4a:	50a7      	str	r7, [r4, r2]
 8035d4c:	b107      	cbz	r7, 8035d50 <rshift+0x68>
 8035d4e:	3304      	adds	r3, #4
 8035d50:	1b1a      	subs	r2, r3, r4
 8035d52:	42a3      	cmp	r3, r4
 8035d54:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8035d58:	bf08      	it	eq
 8035d5a:	2300      	moveq	r3, #0
 8035d5c:	6102      	str	r2, [r0, #16]
 8035d5e:	bf08      	it	eq
 8035d60:	6143      	streq	r3, [r0, #20]
 8035d62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8035d66:	f8dc c000 	ldr.w	ip, [ip]
 8035d6a:	fa0c fc08 	lsl.w	ip, ip, r8
 8035d6e:	ea4c 0707 	orr.w	r7, ip, r7
 8035d72:	f849 7b04 	str.w	r7, [r9], #4
 8035d76:	f85e 7b04 	ldr.w	r7, [lr], #4
 8035d7a:	40cf      	lsrs	r7, r1
 8035d7c:	e7da      	b.n	8035d34 <rshift+0x4c>
 8035d7e:	f851 cb04 	ldr.w	ip, [r1], #4
 8035d82:	f847 cf04 	str.w	ip, [r7, #4]!
 8035d86:	e7c3      	b.n	8035d10 <rshift+0x28>
 8035d88:	4623      	mov	r3, r4
 8035d8a:	e7e1      	b.n	8035d50 <rshift+0x68>

08035d8c <__hexdig_fun>:
 8035d8c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8035d90:	2b09      	cmp	r3, #9
 8035d92:	d802      	bhi.n	8035d9a <__hexdig_fun+0xe>
 8035d94:	3820      	subs	r0, #32
 8035d96:	b2c0      	uxtb	r0, r0
 8035d98:	4770      	bx	lr
 8035d9a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8035d9e:	2b05      	cmp	r3, #5
 8035da0:	d801      	bhi.n	8035da6 <__hexdig_fun+0x1a>
 8035da2:	3847      	subs	r0, #71	@ 0x47
 8035da4:	e7f7      	b.n	8035d96 <__hexdig_fun+0xa>
 8035da6:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8035daa:	2b05      	cmp	r3, #5
 8035dac:	d801      	bhi.n	8035db2 <__hexdig_fun+0x26>
 8035dae:	3827      	subs	r0, #39	@ 0x27
 8035db0:	e7f1      	b.n	8035d96 <__hexdig_fun+0xa>
 8035db2:	2000      	movs	r0, #0
 8035db4:	4770      	bx	lr
	...

08035db8 <__gethex>:
 8035db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8035dbc:	b085      	sub	sp, #20
 8035dbe:	468a      	mov	sl, r1
 8035dc0:	9302      	str	r3, [sp, #8]
 8035dc2:	680b      	ldr	r3, [r1, #0]
 8035dc4:	9001      	str	r0, [sp, #4]
 8035dc6:	4690      	mov	r8, r2
 8035dc8:	1c9c      	adds	r4, r3, #2
 8035dca:	46a1      	mov	r9, r4
 8035dcc:	f814 0b01 	ldrb.w	r0, [r4], #1
 8035dd0:	2830      	cmp	r0, #48	@ 0x30
 8035dd2:	d0fa      	beq.n	8035dca <__gethex+0x12>
 8035dd4:	eba9 0303 	sub.w	r3, r9, r3
 8035dd8:	f1a3 0b02 	sub.w	fp, r3, #2
 8035ddc:	f7ff ffd6 	bl	8035d8c <__hexdig_fun>
 8035de0:	4605      	mov	r5, r0
 8035de2:	2800      	cmp	r0, #0
 8035de4:	d168      	bne.n	8035eb8 <__gethex+0x100>
 8035de6:	49a0      	ldr	r1, [pc, #640]	@ (8036068 <__gethex+0x2b0>)
 8035de8:	2201      	movs	r2, #1
 8035dea:	4648      	mov	r0, r9
 8035dec:	f7f7 f96d 	bl	802d0ca <strncmp>
 8035df0:	4607      	mov	r7, r0
 8035df2:	2800      	cmp	r0, #0
 8035df4:	d167      	bne.n	8035ec6 <__gethex+0x10e>
 8035df6:	f899 0001 	ldrb.w	r0, [r9, #1]
 8035dfa:	4626      	mov	r6, r4
 8035dfc:	f7ff ffc6 	bl	8035d8c <__hexdig_fun>
 8035e00:	2800      	cmp	r0, #0
 8035e02:	d062      	beq.n	8035eca <__gethex+0x112>
 8035e04:	4623      	mov	r3, r4
 8035e06:	7818      	ldrb	r0, [r3, #0]
 8035e08:	2830      	cmp	r0, #48	@ 0x30
 8035e0a:	4699      	mov	r9, r3
 8035e0c:	f103 0301 	add.w	r3, r3, #1
 8035e10:	d0f9      	beq.n	8035e06 <__gethex+0x4e>
 8035e12:	f7ff ffbb 	bl	8035d8c <__hexdig_fun>
 8035e16:	fab0 f580 	clz	r5, r0
 8035e1a:	096d      	lsrs	r5, r5, #5
 8035e1c:	f04f 0b01 	mov.w	fp, #1
 8035e20:	464a      	mov	r2, r9
 8035e22:	4616      	mov	r6, r2
 8035e24:	3201      	adds	r2, #1
 8035e26:	7830      	ldrb	r0, [r6, #0]
 8035e28:	f7ff ffb0 	bl	8035d8c <__hexdig_fun>
 8035e2c:	2800      	cmp	r0, #0
 8035e2e:	d1f8      	bne.n	8035e22 <__gethex+0x6a>
 8035e30:	498d      	ldr	r1, [pc, #564]	@ (8036068 <__gethex+0x2b0>)
 8035e32:	2201      	movs	r2, #1
 8035e34:	4630      	mov	r0, r6
 8035e36:	f7f7 f948 	bl	802d0ca <strncmp>
 8035e3a:	2800      	cmp	r0, #0
 8035e3c:	d13f      	bne.n	8035ebe <__gethex+0x106>
 8035e3e:	b944      	cbnz	r4, 8035e52 <__gethex+0x9a>
 8035e40:	1c74      	adds	r4, r6, #1
 8035e42:	4622      	mov	r2, r4
 8035e44:	4616      	mov	r6, r2
 8035e46:	3201      	adds	r2, #1
 8035e48:	7830      	ldrb	r0, [r6, #0]
 8035e4a:	f7ff ff9f 	bl	8035d8c <__hexdig_fun>
 8035e4e:	2800      	cmp	r0, #0
 8035e50:	d1f8      	bne.n	8035e44 <__gethex+0x8c>
 8035e52:	1ba4      	subs	r4, r4, r6
 8035e54:	00a7      	lsls	r7, r4, #2
 8035e56:	7833      	ldrb	r3, [r6, #0]
 8035e58:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8035e5c:	2b50      	cmp	r3, #80	@ 0x50
 8035e5e:	d13e      	bne.n	8035ede <__gethex+0x126>
 8035e60:	7873      	ldrb	r3, [r6, #1]
 8035e62:	2b2b      	cmp	r3, #43	@ 0x2b
 8035e64:	d033      	beq.n	8035ece <__gethex+0x116>
 8035e66:	2b2d      	cmp	r3, #45	@ 0x2d
 8035e68:	d034      	beq.n	8035ed4 <__gethex+0x11c>
 8035e6a:	1c71      	adds	r1, r6, #1
 8035e6c:	2400      	movs	r4, #0
 8035e6e:	7808      	ldrb	r0, [r1, #0]
 8035e70:	f7ff ff8c 	bl	8035d8c <__hexdig_fun>
 8035e74:	1e43      	subs	r3, r0, #1
 8035e76:	b2db      	uxtb	r3, r3
 8035e78:	2b18      	cmp	r3, #24
 8035e7a:	d830      	bhi.n	8035ede <__gethex+0x126>
 8035e7c:	f1a0 0210 	sub.w	r2, r0, #16
 8035e80:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8035e84:	f7ff ff82 	bl	8035d8c <__hexdig_fun>
 8035e88:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8035e8c:	fa5f fc8c 	uxtb.w	ip, ip
 8035e90:	f1bc 0f18 	cmp.w	ip, #24
 8035e94:	f04f 030a 	mov.w	r3, #10
 8035e98:	d91e      	bls.n	8035ed8 <__gethex+0x120>
 8035e9a:	b104      	cbz	r4, 8035e9e <__gethex+0xe6>
 8035e9c:	4252      	negs	r2, r2
 8035e9e:	4417      	add	r7, r2
 8035ea0:	f8ca 1000 	str.w	r1, [sl]
 8035ea4:	b1ed      	cbz	r5, 8035ee2 <__gethex+0x12a>
 8035ea6:	f1bb 0f00 	cmp.w	fp, #0
 8035eaa:	bf0c      	ite	eq
 8035eac:	2506      	moveq	r5, #6
 8035eae:	2500      	movne	r5, #0
 8035eb0:	4628      	mov	r0, r5
 8035eb2:	b005      	add	sp, #20
 8035eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8035eb8:	2500      	movs	r5, #0
 8035eba:	462c      	mov	r4, r5
 8035ebc:	e7b0      	b.n	8035e20 <__gethex+0x68>
 8035ebe:	2c00      	cmp	r4, #0
 8035ec0:	d1c7      	bne.n	8035e52 <__gethex+0x9a>
 8035ec2:	4627      	mov	r7, r4
 8035ec4:	e7c7      	b.n	8035e56 <__gethex+0x9e>
 8035ec6:	464e      	mov	r6, r9
 8035ec8:	462f      	mov	r7, r5
 8035eca:	2501      	movs	r5, #1
 8035ecc:	e7c3      	b.n	8035e56 <__gethex+0x9e>
 8035ece:	2400      	movs	r4, #0
 8035ed0:	1cb1      	adds	r1, r6, #2
 8035ed2:	e7cc      	b.n	8035e6e <__gethex+0xb6>
 8035ed4:	2401      	movs	r4, #1
 8035ed6:	e7fb      	b.n	8035ed0 <__gethex+0x118>
 8035ed8:	fb03 0002 	mla	r0, r3, r2, r0
 8035edc:	e7ce      	b.n	8035e7c <__gethex+0xc4>
 8035ede:	4631      	mov	r1, r6
 8035ee0:	e7de      	b.n	8035ea0 <__gethex+0xe8>
 8035ee2:	eba6 0309 	sub.w	r3, r6, r9
 8035ee6:	3b01      	subs	r3, #1
 8035ee8:	4629      	mov	r1, r5
 8035eea:	2b07      	cmp	r3, #7
 8035eec:	dc0a      	bgt.n	8035f04 <__gethex+0x14c>
 8035eee:	9801      	ldr	r0, [sp, #4]
 8035ef0:	f7fd fe22 	bl	8033b38 <_Balloc>
 8035ef4:	4604      	mov	r4, r0
 8035ef6:	b940      	cbnz	r0, 8035f0a <__gethex+0x152>
 8035ef8:	4b5c      	ldr	r3, [pc, #368]	@ (803606c <__gethex+0x2b4>)
 8035efa:	4602      	mov	r2, r0
 8035efc:	21e4      	movs	r1, #228	@ 0xe4
 8035efe:	485c      	ldr	r0, [pc, #368]	@ (8036070 <__gethex+0x2b8>)
 8035f00:	f7f4 fb5c 	bl	802a5bc <__assert_func>
 8035f04:	3101      	adds	r1, #1
 8035f06:	105b      	asrs	r3, r3, #1
 8035f08:	e7ef      	b.n	8035eea <__gethex+0x132>
 8035f0a:	f100 0a14 	add.w	sl, r0, #20
 8035f0e:	2300      	movs	r3, #0
 8035f10:	4655      	mov	r5, sl
 8035f12:	469b      	mov	fp, r3
 8035f14:	45b1      	cmp	r9, r6
 8035f16:	d337      	bcc.n	8035f88 <__gethex+0x1d0>
 8035f18:	f845 bb04 	str.w	fp, [r5], #4
 8035f1c:	eba5 050a 	sub.w	r5, r5, sl
 8035f20:	10ad      	asrs	r5, r5, #2
 8035f22:	6125      	str	r5, [r4, #16]
 8035f24:	4658      	mov	r0, fp
 8035f26:	f7fd fec5 	bl	8033cb4 <__hi0bits>
 8035f2a:	016d      	lsls	r5, r5, #5
 8035f2c:	f8d8 6000 	ldr.w	r6, [r8]
 8035f30:	1a2d      	subs	r5, r5, r0
 8035f32:	42b5      	cmp	r5, r6
 8035f34:	dd54      	ble.n	8035fe0 <__gethex+0x228>
 8035f36:	1bad      	subs	r5, r5, r6
 8035f38:	4629      	mov	r1, r5
 8035f3a:	4620      	mov	r0, r4
 8035f3c:	f7fe fa3f 	bl	80343be <__any_on>
 8035f40:	4681      	mov	r9, r0
 8035f42:	b178      	cbz	r0, 8035f64 <__gethex+0x1ac>
 8035f44:	1e6b      	subs	r3, r5, #1
 8035f46:	1159      	asrs	r1, r3, #5
 8035f48:	f003 021f 	and.w	r2, r3, #31
 8035f4c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8035f50:	f04f 0901 	mov.w	r9, #1
 8035f54:	fa09 f202 	lsl.w	r2, r9, r2
 8035f58:	420a      	tst	r2, r1
 8035f5a:	d003      	beq.n	8035f64 <__gethex+0x1ac>
 8035f5c:	454b      	cmp	r3, r9
 8035f5e:	dc36      	bgt.n	8035fce <__gethex+0x216>
 8035f60:	f04f 0902 	mov.w	r9, #2
 8035f64:	4629      	mov	r1, r5
 8035f66:	4620      	mov	r0, r4
 8035f68:	f7ff febe 	bl	8035ce8 <rshift>
 8035f6c:	442f      	add	r7, r5
 8035f6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8035f72:	42bb      	cmp	r3, r7
 8035f74:	da42      	bge.n	8035ffc <__gethex+0x244>
 8035f76:	9801      	ldr	r0, [sp, #4]
 8035f78:	4621      	mov	r1, r4
 8035f7a:	f7fd fe02 	bl	8033b82 <_Bfree>
 8035f7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8035f80:	2300      	movs	r3, #0
 8035f82:	6013      	str	r3, [r2, #0]
 8035f84:	25a3      	movs	r5, #163	@ 0xa3
 8035f86:	e793      	b.n	8035eb0 <__gethex+0xf8>
 8035f88:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8035f8c:	2a2e      	cmp	r2, #46	@ 0x2e
 8035f8e:	d012      	beq.n	8035fb6 <__gethex+0x1fe>
 8035f90:	2b20      	cmp	r3, #32
 8035f92:	d104      	bne.n	8035f9e <__gethex+0x1e6>
 8035f94:	f845 bb04 	str.w	fp, [r5], #4
 8035f98:	f04f 0b00 	mov.w	fp, #0
 8035f9c:	465b      	mov	r3, fp
 8035f9e:	7830      	ldrb	r0, [r6, #0]
 8035fa0:	9303      	str	r3, [sp, #12]
 8035fa2:	f7ff fef3 	bl	8035d8c <__hexdig_fun>
 8035fa6:	9b03      	ldr	r3, [sp, #12]
 8035fa8:	f000 000f 	and.w	r0, r0, #15
 8035fac:	4098      	lsls	r0, r3
 8035fae:	ea4b 0b00 	orr.w	fp, fp, r0
 8035fb2:	3304      	adds	r3, #4
 8035fb4:	e7ae      	b.n	8035f14 <__gethex+0x15c>
 8035fb6:	45b1      	cmp	r9, r6
 8035fb8:	d8ea      	bhi.n	8035f90 <__gethex+0x1d8>
 8035fba:	492b      	ldr	r1, [pc, #172]	@ (8036068 <__gethex+0x2b0>)
 8035fbc:	9303      	str	r3, [sp, #12]
 8035fbe:	2201      	movs	r2, #1
 8035fc0:	4630      	mov	r0, r6
 8035fc2:	f7f7 f882 	bl	802d0ca <strncmp>
 8035fc6:	9b03      	ldr	r3, [sp, #12]
 8035fc8:	2800      	cmp	r0, #0
 8035fca:	d1e1      	bne.n	8035f90 <__gethex+0x1d8>
 8035fcc:	e7a2      	b.n	8035f14 <__gethex+0x15c>
 8035fce:	1ea9      	subs	r1, r5, #2
 8035fd0:	4620      	mov	r0, r4
 8035fd2:	f7fe f9f4 	bl	80343be <__any_on>
 8035fd6:	2800      	cmp	r0, #0
 8035fd8:	d0c2      	beq.n	8035f60 <__gethex+0x1a8>
 8035fda:	f04f 0903 	mov.w	r9, #3
 8035fde:	e7c1      	b.n	8035f64 <__gethex+0x1ac>
 8035fe0:	da09      	bge.n	8035ff6 <__gethex+0x23e>
 8035fe2:	1b75      	subs	r5, r6, r5
 8035fe4:	4621      	mov	r1, r4
 8035fe6:	9801      	ldr	r0, [sp, #4]
 8035fe8:	462a      	mov	r2, r5
 8035fea:	f7fd ffaf 	bl	8033f4c <__lshift>
 8035fee:	1b7f      	subs	r7, r7, r5
 8035ff0:	4604      	mov	r4, r0
 8035ff2:	f100 0a14 	add.w	sl, r0, #20
 8035ff6:	f04f 0900 	mov.w	r9, #0
 8035ffa:	e7b8      	b.n	8035f6e <__gethex+0x1b6>
 8035ffc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8036000:	42bd      	cmp	r5, r7
 8036002:	dd6f      	ble.n	80360e4 <__gethex+0x32c>
 8036004:	1bed      	subs	r5, r5, r7
 8036006:	42ae      	cmp	r6, r5
 8036008:	dc34      	bgt.n	8036074 <__gethex+0x2bc>
 803600a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 803600e:	2b02      	cmp	r3, #2
 8036010:	d022      	beq.n	8036058 <__gethex+0x2a0>
 8036012:	2b03      	cmp	r3, #3
 8036014:	d024      	beq.n	8036060 <__gethex+0x2a8>
 8036016:	2b01      	cmp	r3, #1
 8036018:	d115      	bne.n	8036046 <__gethex+0x28e>
 803601a:	42ae      	cmp	r6, r5
 803601c:	d113      	bne.n	8036046 <__gethex+0x28e>
 803601e:	2e01      	cmp	r6, #1
 8036020:	d10b      	bne.n	803603a <__gethex+0x282>
 8036022:	9a02      	ldr	r2, [sp, #8]
 8036024:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8036028:	6013      	str	r3, [r2, #0]
 803602a:	2301      	movs	r3, #1
 803602c:	6123      	str	r3, [r4, #16]
 803602e:	f8ca 3000 	str.w	r3, [sl]
 8036032:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8036034:	2562      	movs	r5, #98	@ 0x62
 8036036:	601c      	str	r4, [r3, #0]
 8036038:	e73a      	b.n	8035eb0 <__gethex+0xf8>
 803603a:	1e71      	subs	r1, r6, #1
 803603c:	4620      	mov	r0, r4
 803603e:	f7fe f9be 	bl	80343be <__any_on>
 8036042:	2800      	cmp	r0, #0
 8036044:	d1ed      	bne.n	8036022 <__gethex+0x26a>
 8036046:	9801      	ldr	r0, [sp, #4]
 8036048:	4621      	mov	r1, r4
 803604a:	f7fd fd9a 	bl	8033b82 <_Bfree>
 803604e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8036050:	2300      	movs	r3, #0
 8036052:	6013      	str	r3, [r2, #0]
 8036054:	2550      	movs	r5, #80	@ 0x50
 8036056:	e72b      	b.n	8035eb0 <__gethex+0xf8>
 8036058:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803605a:	2b00      	cmp	r3, #0
 803605c:	d1f3      	bne.n	8036046 <__gethex+0x28e>
 803605e:	e7e0      	b.n	8036022 <__gethex+0x26a>
 8036060:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8036062:	2b00      	cmp	r3, #0
 8036064:	d1dd      	bne.n	8036022 <__gethex+0x26a>
 8036066:	e7ee      	b.n	8036046 <__gethex+0x28e>
 8036068:	0803c5ce 	.word	0x0803c5ce
 803606c:	0803c906 	.word	0x0803c906
 8036070:	0803cba0 	.word	0x0803cba0
 8036074:	1e6f      	subs	r7, r5, #1
 8036076:	f1b9 0f00 	cmp.w	r9, #0
 803607a:	d130      	bne.n	80360de <__gethex+0x326>
 803607c:	b127      	cbz	r7, 8036088 <__gethex+0x2d0>
 803607e:	4639      	mov	r1, r7
 8036080:	4620      	mov	r0, r4
 8036082:	f7fe f99c 	bl	80343be <__any_on>
 8036086:	4681      	mov	r9, r0
 8036088:	117a      	asrs	r2, r7, #5
 803608a:	2301      	movs	r3, #1
 803608c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8036090:	f007 071f 	and.w	r7, r7, #31
 8036094:	40bb      	lsls	r3, r7
 8036096:	4213      	tst	r3, r2
 8036098:	4629      	mov	r1, r5
 803609a:	4620      	mov	r0, r4
 803609c:	bf18      	it	ne
 803609e:	f049 0902 	orrne.w	r9, r9, #2
 80360a2:	f7ff fe21 	bl	8035ce8 <rshift>
 80360a6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80360aa:	1b76      	subs	r6, r6, r5
 80360ac:	2502      	movs	r5, #2
 80360ae:	f1b9 0f00 	cmp.w	r9, #0
 80360b2:	d047      	beq.n	8036144 <__gethex+0x38c>
 80360b4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80360b8:	2b02      	cmp	r3, #2
 80360ba:	d015      	beq.n	80360e8 <__gethex+0x330>
 80360bc:	2b03      	cmp	r3, #3
 80360be:	d017      	beq.n	80360f0 <__gethex+0x338>
 80360c0:	2b01      	cmp	r3, #1
 80360c2:	d109      	bne.n	80360d8 <__gethex+0x320>
 80360c4:	f019 0f02 	tst.w	r9, #2
 80360c8:	d006      	beq.n	80360d8 <__gethex+0x320>
 80360ca:	f8da 3000 	ldr.w	r3, [sl]
 80360ce:	ea49 0903 	orr.w	r9, r9, r3
 80360d2:	f019 0f01 	tst.w	r9, #1
 80360d6:	d10e      	bne.n	80360f6 <__gethex+0x33e>
 80360d8:	f045 0510 	orr.w	r5, r5, #16
 80360dc:	e032      	b.n	8036144 <__gethex+0x38c>
 80360de:	f04f 0901 	mov.w	r9, #1
 80360e2:	e7d1      	b.n	8036088 <__gethex+0x2d0>
 80360e4:	2501      	movs	r5, #1
 80360e6:	e7e2      	b.n	80360ae <__gethex+0x2f6>
 80360e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80360ea:	f1c3 0301 	rsb	r3, r3, #1
 80360ee:	930f      	str	r3, [sp, #60]	@ 0x3c
 80360f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80360f2:	2b00      	cmp	r3, #0
 80360f4:	d0f0      	beq.n	80360d8 <__gethex+0x320>
 80360f6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80360fa:	f104 0314 	add.w	r3, r4, #20
 80360fe:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8036102:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8036106:	f04f 0c00 	mov.w	ip, #0
 803610a:	4618      	mov	r0, r3
 803610c:	f853 2b04 	ldr.w	r2, [r3], #4
 8036110:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8036114:	d01b      	beq.n	803614e <__gethex+0x396>
 8036116:	3201      	adds	r2, #1
 8036118:	6002      	str	r2, [r0, #0]
 803611a:	2d02      	cmp	r5, #2
 803611c:	f104 0314 	add.w	r3, r4, #20
 8036120:	d13c      	bne.n	803619c <__gethex+0x3e4>
 8036122:	f8d8 2000 	ldr.w	r2, [r8]
 8036126:	3a01      	subs	r2, #1
 8036128:	42b2      	cmp	r2, r6
 803612a:	d109      	bne.n	8036140 <__gethex+0x388>
 803612c:	1171      	asrs	r1, r6, #5
 803612e:	2201      	movs	r2, #1
 8036130:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8036134:	f006 061f 	and.w	r6, r6, #31
 8036138:	fa02 f606 	lsl.w	r6, r2, r6
 803613c:	421e      	tst	r6, r3
 803613e:	d13a      	bne.n	80361b6 <__gethex+0x3fe>
 8036140:	f045 0520 	orr.w	r5, r5, #32
 8036144:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8036146:	601c      	str	r4, [r3, #0]
 8036148:	9b02      	ldr	r3, [sp, #8]
 803614a:	601f      	str	r7, [r3, #0]
 803614c:	e6b0      	b.n	8035eb0 <__gethex+0xf8>
 803614e:	4299      	cmp	r1, r3
 8036150:	f843 cc04 	str.w	ip, [r3, #-4]
 8036154:	d8d9      	bhi.n	803610a <__gethex+0x352>
 8036156:	68a3      	ldr	r3, [r4, #8]
 8036158:	459b      	cmp	fp, r3
 803615a:	db17      	blt.n	803618c <__gethex+0x3d4>
 803615c:	6861      	ldr	r1, [r4, #4]
 803615e:	9801      	ldr	r0, [sp, #4]
 8036160:	3101      	adds	r1, #1
 8036162:	f7fd fce9 	bl	8033b38 <_Balloc>
 8036166:	4681      	mov	r9, r0
 8036168:	b918      	cbnz	r0, 8036172 <__gethex+0x3ba>
 803616a:	4b1a      	ldr	r3, [pc, #104]	@ (80361d4 <__gethex+0x41c>)
 803616c:	4602      	mov	r2, r0
 803616e:	2184      	movs	r1, #132	@ 0x84
 8036170:	e6c5      	b.n	8035efe <__gethex+0x146>
 8036172:	6922      	ldr	r2, [r4, #16]
 8036174:	3202      	adds	r2, #2
 8036176:	f104 010c 	add.w	r1, r4, #12
 803617a:	0092      	lsls	r2, r2, #2
 803617c:	300c      	adds	r0, #12
 803617e:	f7f8 f9ab 	bl	802e4d8 <memcpy>
 8036182:	4621      	mov	r1, r4
 8036184:	9801      	ldr	r0, [sp, #4]
 8036186:	f7fd fcfc 	bl	8033b82 <_Bfree>
 803618a:	464c      	mov	r4, r9
 803618c:	6923      	ldr	r3, [r4, #16]
 803618e:	1c5a      	adds	r2, r3, #1
 8036190:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8036194:	6122      	str	r2, [r4, #16]
 8036196:	2201      	movs	r2, #1
 8036198:	615a      	str	r2, [r3, #20]
 803619a:	e7be      	b.n	803611a <__gethex+0x362>
 803619c:	6922      	ldr	r2, [r4, #16]
 803619e:	455a      	cmp	r2, fp
 80361a0:	dd0b      	ble.n	80361ba <__gethex+0x402>
 80361a2:	2101      	movs	r1, #1
 80361a4:	4620      	mov	r0, r4
 80361a6:	f7ff fd9f 	bl	8035ce8 <rshift>
 80361aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80361ae:	3701      	adds	r7, #1
 80361b0:	42bb      	cmp	r3, r7
 80361b2:	f6ff aee0 	blt.w	8035f76 <__gethex+0x1be>
 80361b6:	2501      	movs	r5, #1
 80361b8:	e7c2      	b.n	8036140 <__gethex+0x388>
 80361ba:	f016 061f 	ands.w	r6, r6, #31
 80361be:	d0fa      	beq.n	80361b6 <__gethex+0x3fe>
 80361c0:	4453      	add	r3, sl
 80361c2:	f1c6 0620 	rsb	r6, r6, #32
 80361c6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80361ca:	f7fd fd73 	bl	8033cb4 <__hi0bits>
 80361ce:	42b0      	cmp	r0, r6
 80361d0:	dbe7      	blt.n	80361a2 <__gethex+0x3ea>
 80361d2:	e7f0      	b.n	80361b6 <__gethex+0x3fe>
 80361d4:	0803c906 	.word	0x0803c906

080361d8 <L_shift>:
 80361d8:	f1c2 0208 	rsb	r2, r2, #8
 80361dc:	0092      	lsls	r2, r2, #2
 80361de:	b570      	push	{r4, r5, r6, lr}
 80361e0:	f1c2 0620 	rsb	r6, r2, #32
 80361e4:	6843      	ldr	r3, [r0, #4]
 80361e6:	6804      	ldr	r4, [r0, #0]
 80361e8:	fa03 f506 	lsl.w	r5, r3, r6
 80361ec:	432c      	orrs	r4, r5
 80361ee:	40d3      	lsrs	r3, r2
 80361f0:	6004      	str	r4, [r0, #0]
 80361f2:	f840 3f04 	str.w	r3, [r0, #4]!
 80361f6:	4288      	cmp	r0, r1
 80361f8:	d3f4      	bcc.n	80361e4 <L_shift+0xc>
 80361fa:	bd70      	pop	{r4, r5, r6, pc}

080361fc <__match>:
 80361fc:	b530      	push	{r4, r5, lr}
 80361fe:	6803      	ldr	r3, [r0, #0]
 8036200:	3301      	adds	r3, #1
 8036202:	f811 4b01 	ldrb.w	r4, [r1], #1
 8036206:	b914      	cbnz	r4, 803620e <__match+0x12>
 8036208:	6003      	str	r3, [r0, #0]
 803620a:	2001      	movs	r0, #1
 803620c:	bd30      	pop	{r4, r5, pc}
 803620e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8036212:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8036216:	2d19      	cmp	r5, #25
 8036218:	bf98      	it	ls
 803621a:	3220      	addls	r2, #32
 803621c:	42a2      	cmp	r2, r4
 803621e:	d0f0      	beq.n	8036202 <__match+0x6>
 8036220:	2000      	movs	r0, #0
 8036222:	e7f3      	b.n	803620c <__match+0x10>

08036224 <__hexnan>:
 8036224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8036228:	680b      	ldr	r3, [r1, #0]
 803622a:	6801      	ldr	r1, [r0, #0]
 803622c:	115e      	asrs	r6, r3, #5
 803622e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8036232:	f013 031f 	ands.w	r3, r3, #31
 8036236:	b087      	sub	sp, #28
 8036238:	bf18      	it	ne
 803623a:	3604      	addne	r6, #4
 803623c:	2500      	movs	r5, #0
 803623e:	1f37      	subs	r7, r6, #4
 8036240:	4682      	mov	sl, r0
 8036242:	4690      	mov	r8, r2
 8036244:	9301      	str	r3, [sp, #4]
 8036246:	f846 5c04 	str.w	r5, [r6, #-4]
 803624a:	46b9      	mov	r9, r7
 803624c:	463c      	mov	r4, r7
 803624e:	9502      	str	r5, [sp, #8]
 8036250:	46ab      	mov	fp, r5
 8036252:	784a      	ldrb	r2, [r1, #1]
 8036254:	1c4b      	adds	r3, r1, #1
 8036256:	9303      	str	r3, [sp, #12]
 8036258:	b342      	cbz	r2, 80362ac <__hexnan+0x88>
 803625a:	4610      	mov	r0, r2
 803625c:	9105      	str	r1, [sp, #20]
 803625e:	9204      	str	r2, [sp, #16]
 8036260:	f7ff fd94 	bl	8035d8c <__hexdig_fun>
 8036264:	2800      	cmp	r0, #0
 8036266:	d151      	bne.n	803630c <__hexnan+0xe8>
 8036268:	9a04      	ldr	r2, [sp, #16]
 803626a:	9905      	ldr	r1, [sp, #20]
 803626c:	2a20      	cmp	r2, #32
 803626e:	d818      	bhi.n	80362a2 <__hexnan+0x7e>
 8036270:	9b02      	ldr	r3, [sp, #8]
 8036272:	459b      	cmp	fp, r3
 8036274:	dd13      	ble.n	803629e <__hexnan+0x7a>
 8036276:	454c      	cmp	r4, r9
 8036278:	d206      	bcs.n	8036288 <__hexnan+0x64>
 803627a:	2d07      	cmp	r5, #7
 803627c:	dc04      	bgt.n	8036288 <__hexnan+0x64>
 803627e:	462a      	mov	r2, r5
 8036280:	4649      	mov	r1, r9
 8036282:	4620      	mov	r0, r4
 8036284:	f7ff ffa8 	bl	80361d8 <L_shift>
 8036288:	4544      	cmp	r4, r8
 803628a:	d952      	bls.n	8036332 <__hexnan+0x10e>
 803628c:	2300      	movs	r3, #0
 803628e:	f1a4 0904 	sub.w	r9, r4, #4
 8036292:	f844 3c04 	str.w	r3, [r4, #-4]
 8036296:	f8cd b008 	str.w	fp, [sp, #8]
 803629a:	464c      	mov	r4, r9
 803629c:	461d      	mov	r5, r3
 803629e:	9903      	ldr	r1, [sp, #12]
 80362a0:	e7d7      	b.n	8036252 <__hexnan+0x2e>
 80362a2:	2a29      	cmp	r2, #41	@ 0x29
 80362a4:	d157      	bne.n	8036356 <__hexnan+0x132>
 80362a6:	3102      	adds	r1, #2
 80362a8:	f8ca 1000 	str.w	r1, [sl]
 80362ac:	f1bb 0f00 	cmp.w	fp, #0
 80362b0:	d051      	beq.n	8036356 <__hexnan+0x132>
 80362b2:	454c      	cmp	r4, r9
 80362b4:	d206      	bcs.n	80362c4 <__hexnan+0xa0>
 80362b6:	2d07      	cmp	r5, #7
 80362b8:	dc04      	bgt.n	80362c4 <__hexnan+0xa0>
 80362ba:	462a      	mov	r2, r5
 80362bc:	4649      	mov	r1, r9
 80362be:	4620      	mov	r0, r4
 80362c0:	f7ff ff8a 	bl	80361d8 <L_shift>
 80362c4:	4544      	cmp	r4, r8
 80362c6:	d936      	bls.n	8036336 <__hexnan+0x112>
 80362c8:	f1a8 0204 	sub.w	r2, r8, #4
 80362cc:	4623      	mov	r3, r4
 80362ce:	f853 1b04 	ldr.w	r1, [r3], #4
 80362d2:	f842 1f04 	str.w	r1, [r2, #4]!
 80362d6:	429f      	cmp	r7, r3
 80362d8:	d2f9      	bcs.n	80362ce <__hexnan+0xaa>
 80362da:	1b3b      	subs	r3, r7, r4
 80362dc:	f023 0303 	bic.w	r3, r3, #3
 80362e0:	3304      	adds	r3, #4
 80362e2:	3401      	adds	r4, #1
 80362e4:	3e03      	subs	r6, #3
 80362e6:	42b4      	cmp	r4, r6
 80362e8:	bf88      	it	hi
 80362ea:	2304      	movhi	r3, #4
 80362ec:	4443      	add	r3, r8
 80362ee:	2200      	movs	r2, #0
 80362f0:	f843 2b04 	str.w	r2, [r3], #4
 80362f4:	429f      	cmp	r7, r3
 80362f6:	d2fb      	bcs.n	80362f0 <__hexnan+0xcc>
 80362f8:	683b      	ldr	r3, [r7, #0]
 80362fa:	b91b      	cbnz	r3, 8036304 <__hexnan+0xe0>
 80362fc:	4547      	cmp	r7, r8
 80362fe:	d128      	bne.n	8036352 <__hexnan+0x12e>
 8036300:	2301      	movs	r3, #1
 8036302:	603b      	str	r3, [r7, #0]
 8036304:	2005      	movs	r0, #5
 8036306:	b007      	add	sp, #28
 8036308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803630c:	3501      	adds	r5, #1
 803630e:	2d08      	cmp	r5, #8
 8036310:	f10b 0b01 	add.w	fp, fp, #1
 8036314:	dd06      	ble.n	8036324 <__hexnan+0x100>
 8036316:	4544      	cmp	r4, r8
 8036318:	d9c1      	bls.n	803629e <__hexnan+0x7a>
 803631a:	2300      	movs	r3, #0
 803631c:	f844 3c04 	str.w	r3, [r4, #-4]
 8036320:	2501      	movs	r5, #1
 8036322:	3c04      	subs	r4, #4
 8036324:	6822      	ldr	r2, [r4, #0]
 8036326:	f000 000f 	and.w	r0, r0, #15
 803632a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 803632e:	6020      	str	r0, [r4, #0]
 8036330:	e7b5      	b.n	803629e <__hexnan+0x7a>
 8036332:	2508      	movs	r5, #8
 8036334:	e7b3      	b.n	803629e <__hexnan+0x7a>
 8036336:	9b01      	ldr	r3, [sp, #4]
 8036338:	2b00      	cmp	r3, #0
 803633a:	d0dd      	beq.n	80362f8 <__hexnan+0xd4>
 803633c:	f1c3 0320 	rsb	r3, r3, #32
 8036340:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8036344:	40da      	lsrs	r2, r3
 8036346:	f856 3c04 	ldr.w	r3, [r6, #-4]
 803634a:	4013      	ands	r3, r2
 803634c:	f846 3c04 	str.w	r3, [r6, #-4]
 8036350:	e7d2      	b.n	80362f8 <__hexnan+0xd4>
 8036352:	3f04      	subs	r7, #4
 8036354:	e7d0      	b.n	80362f8 <__hexnan+0xd4>
 8036356:	2004      	movs	r0, #4
 8036358:	e7d5      	b.n	8036306 <__hexnan+0xe2>
	...

0803635c <_init>:
 803635c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803635e:	bf00      	nop
 8036360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8036362:	bc08      	pop	{r3}
 8036364:	469e      	mov	lr, r3
 8036366:	4770      	bx	lr

08036368 <_fini>:
 8036368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803636a:	bf00      	nop
 803636c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803636e:	bc08      	pop	{r3}
 8036370:	469e      	mov	lr, r3
 8036372:	4770      	bx	lr
