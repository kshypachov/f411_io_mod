
f411_io_mod.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08010000  08010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002ef64  080101a0  080101a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005e58  0803f108  0803f108  00030108  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08044f60  08044f60  000369c8  2**0
                  CONTENTS
  4 .ARM          00000008  08044f60  08044f60  00035f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08044f68  08044f68  000369c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08044f68  08044f68  00035f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08044f70  08044f70  00035f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000009c8  20000000  08044f74  00036000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00017ae4  200009c8  0804593c  000369c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000c04  200184ac  0804593c  000374ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000369c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003525d  00000000  00000000  000369f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006256  00000000  00000000  0006bc55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ed8  00000000  00000000  00071eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000027bc  00000000  00000000  00074d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f71f  00000000  00000000  00077544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000337cc  00000000  00000000  00096c63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a84db  00000000  00000000  000ca42f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017290a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000f0c8  00000000  00000000  00172950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00181a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080101a0 <__do_global_dtors_aux>:
 80101a0:	b510      	push	{r4, lr}
 80101a2:	4c05      	ldr	r4, [pc, #20]	@ (80101b8 <__do_global_dtors_aux+0x18>)
 80101a4:	7823      	ldrb	r3, [r4, #0]
 80101a6:	b933      	cbnz	r3, 80101b6 <__do_global_dtors_aux+0x16>
 80101a8:	4b04      	ldr	r3, [pc, #16]	@ (80101bc <__do_global_dtors_aux+0x1c>)
 80101aa:	b113      	cbz	r3, 80101b2 <__do_global_dtors_aux+0x12>
 80101ac:	4804      	ldr	r0, [pc, #16]	@ (80101c0 <__do_global_dtors_aux+0x20>)
 80101ae:	f3af 8000 	nop.w
 80101b2:	2301      	movs	r3, #1
 80101b4:	7023      	strb	r3, [r4, #0]
 80101b6:	bd10      	pop	{r4, pc}
 80101b8:	200009c8 	.word	0x200009c8
 80101bc:	00000000 	.word	0x00000000
 80101c0:	0803f0ec 	.word	0x0803f0ec

080101c4 <frame_dummy>:
 80101c4:	b508      	push	{r3, lr}
 80101c6:	4b03      	ldr	r3, [pc, #12]	@ (80101d4 <frame_dummy+0x10>)
 80101c8:	b11b      	cbz	r3, 80101d2 <frame_dummy+0xe>
 80101ca:	4903      	ldr	r1, [pc, #12]	@ (80101d8 <frame_dummy+0x14>)
 80101cc:	4803      	ldr	r0, [pc, #12]	@ (80101dc <frame_dummy+0x18>)
 80101ce:	f3af 8000 	nop.w
 80101d2:	bd08      	pop	{r3, pc}
 80101d4:	00000000 	.word	0x00000000
 80101d8:	200009cc 	.word	0x200009cc
 80101dc:	0803f0ec 	.word	0x0803f0ec

080101e0 <strcmp>:
 80101e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101e8:	2a01      	cmp	r2, #1
 80101ea:	bf28      	it	cs
 80101ec:	429a      	cmpcs	r2, r3
 80101ee:	d0f7      	beq.n	80101e0 <strcmp>
 80101f0:	1ad0      	subs	r0, r2, r3
 80101f2:	4770      	bx	lr
	...

08010200 <memchr>:
 8010200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8010204:	2a10      	cmp	r2, #16
 8010206:	db2b      	blt.n	8010260 <memchr+0x60>
 8010208:	f010 0f07 	tst.w	r0, #7
 801020c:	d008      	beq.n	8010220 <memchr+0x20>
 801020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010212:	3a01      	subs	r2, #1
 8010214:	428b      	cmp	r3, r1
 8010216:	d02d      	beq.n	8010274 <memchr+0x74>
 8010218:	f010 0f07 	tst.w	r0, #7
 801021c:	b342      	cbz	r2, 8010270 <memchr+0x70>
 801021e:	d1f6      	bne.n	801020e <memchr+0xe>
 8010220:	b4f0      	push	{r4, r5, r6, r7}
 8010222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801022a:	f022 0407 	bic.w	r4, r2, #7
 801022e:	f07f 0700 	mvns.w	r7, #0
 8010232:	2300      	movs	r3, #0
 8010234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010238:	3c08      	subs	r4, #8
 801023a:	ea85 0501 	eor.w	r5, r5, r1
 801023e:	ea86 0601 	eor.w	r6, r6, r1
 8010242:	fa85 f547 	uadd8	r5, r5, r7
 8010246:	faa3 f587 	sel	r5, r3, r7
 801024a:	fa86 f647 	uadd8	r6, r6, r7
 801024e:	faa5 f687 	sel	r6, r5, r7
 8010252:	b98e      	cbnz	r6, 8010278 <memchr+0x78>
 8010254:	d1ee      	bne.n	8010234 <memchr+0x34>
 8010256:	bcf0      	pop	{r4, r5, r6, r7}
 8010258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801025c:	f002 0207 	and.w	r2, r2, #7
 8010260:	b132      	cbz	r2, 8010270 <memchr+0x70>
 8010262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010266:	3a01      	subs	r2, #1
 8010268:	ea83 0301 	eor.w	r3, r3, r1
 801026c:	b113      	cbz	r3, 8010274 <memchr+0x74>
 801026e:	d1f8      	bne.n	8010262 <memchr+0x62>
 8010270:	2000      	movs	r0, #0
 8010272:	4770      	bx	lr
 8010274:	3801      	subs	r0, #1
 8010276:	4770      	bx	lr
 8010278:	2d00      	cmp	r5, #0
 801027a:	bf06      	itte	eq
 801027c:	4635      	moveq	r5, r6
 801027e:	3803      	subeq	r0, #3
 8010280:	3807      	subne	r0, #7
 8010282:	f015 0f01 	tst.w	r5, #1
 8010286:	d107      	bne.n	8010298 <memchr+0x98>
 8010288:	3001      	adds	r0, #1
 801028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 801028e:	bf02      	ittt	eq
 8010290:	3001      	addeq	r0, #1
 8010292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8010296:	3001      	addeq	r0, #1
 8010298:	bcf0      	pop	{r4, r5, r6, r7}
 801029a:	3801      	subs	r0, #1
 801029c:	4770      	bx	lr
 801029e:	bf00      	nop

080102a0 <strlen>:
 80102a0:	4603      	mov	r3, r0
 80102a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102a6:	2a00      	cmp	r2, #0
 80102a8:	d1fb      	bne.n	80102a2 <strlen+0x2>
 80102aa:	1a18      	subs	r0, r3, r0
 80102ac:	3801      	subs	r0, #1
 80102ae:	4770      	bx	lr

080102b0 <__aeabi_drsub>:
 80102b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80102b4:	e002      	b.n	80102bc <__adddf3>
 80102b6:	bf00      	nop

080102b8 <__aeabi_dsub>:
 80102b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080102bc <__adddf3>:
 80102bc:	b530      	push	{r4, r5, lr}
 80102be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80102c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80102c6:	ea94 0f05 	teq	r4, r5
 80102ca:	bf08      	it	eq
 80102cc:	ea90 0f02 	teqeq	r0, r2
 80102d0:	bf1f      	itttt	ne
 80102d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80102d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80102da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80102de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80102e2:	f000 80e2 	beq.w	80104aa <__adddf3+0x1ee>
 80102e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80102ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80102ee:	bfb8      	it	lt
 80102f0:	426d      	neglt	r5, r5
 80102f2:	dd0c      	ble.n	801030e <__adddf3+0x52>
 80102f4:	442c      	add	r4, r5
 80102f6:	ea80 0202 	eor.w	r2, r0, r2
 80102fa:	ea81 0303 	eor.w	r3, r1, r3
 80102fe:	ea82 0000 	eor.w	r0, r2, r0
 8010302:	ea83 0101 	eor.w	r1, r3, r1
 8010306:	ea80 0202 	eor.w	r2, r0, r2
 801030a:	ea81 0303 	eor.w	r3, r1, r3
 801030e:	2d36      	cmp	r5, #54	@ 0x36
 8010310:	bf88      	it	hi
 8010312:	bd30      	pophi	{r4, r5, pc}
 8010314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8010318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8010320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8010324:	d002      	beq.n	801032c <__adddf3+0x70>
 8010326:	4240      	negs	r0, r0
 8010328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8010330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8010338:	d002      	beq.n	8010340 <__adddf3+0x84>
 801033a:	4252      	negs	r2, r2
 801033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010340:	ea94 0f05 	teq	r4, r5
 8010344:	f000 80a7 	beq.w	8010496 <__adddf3+0x1da>
 8010348:	f1a4 0401 	sub.w	r4, r4, #1
 801034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8010350:	db0d      	blt.n	801036e <__adddf3+0xb2>
 8010352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8010356:	fa22 f205 	lsr.w	r2, r2, r5
 801035a:	1880      	adds	r0, r0, r2
 801035c:	f141 0100 	adc.w	r1, r1, #0
 8010360:	fa03 f20e 	lsl.w	r2, r3, lr
 8010364:	1880      	adds	r0, r0, r2
 8010366:	fa43 f305 	asr.w	r3, r3, r5
 801036a:	4159      	adcs	r1, r3
 801036c:	e00e      	b.n	801038c <__adddf3+0xd0>
 801036e:	f1a5 0520 	sub.w	r5, r5, #32
 8010372:	f10e 0e20 	add.w	lr, lr, #32
 8010376:	2a01      	cmp	r2, #1
 8010378:	fa03 fc0e 	lsl.w	ip, r3, lr
 801037c:	bf28      	it	cs
 801037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8010382:	fa43 f305 	asr.w	r3, r3, r5
 8010386:	18c0      	adds	r0, r0, r3
 8010388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 801038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8010390:	d507      	bpl.n	80103a2 <__adddf3+0xe6>
 8010392:	f04f 0e00 	mov.w	lr, #0
 8010396:	f1dc 0c00 	rsbs	ip, ip, #0
 801039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 801039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80103a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80103a6:	d31b      	bcc.n	80103e0 <__adddf3+0x124>
 80103a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80103ac:	d30c      	bcc.n	80103c8 <__adddf3+0x10c>
 80103ae:	0849      	lsrs	r1, r1, #1
 80103b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80103b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80103b8:	f104 0401 	add.w	r4, r4, #1
 80103bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80103c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80103c4:	f080 809a 	bcs.w	80104fc <__adddf3+0x240>
 80103c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80103cc:	bf08      	it	eq
 80103ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80103d2:	f150 0000 	adcs.w	r0, r0, #0
 80103d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80103da:	ea41 0105 	orr.w	r1, r1, r5
 80103de:	bd30      	pop	{r4, r5, pc}
 80103e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80103e4:	4140      	adcs	r0, r0
 80103e6:	eb41 0101 	adc.w	r1, r1, r1
 80103ea:	3c01      	subs	r4, #1
 80103ec:	bf28      	it	cs
 80103ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80103f2:	d2e9      	bcs.n	80103c8 <__adddf3+0x10c>
 80103f4:	f091 0f00 	teq	r1, #0
 80103f8:	bf04      	itt	eq
 80103fa:	4601      	moveq	r1, r0
 80103fc:	2000      	moveq	r0, #0
 80103fe:	fab1 f381 	clz	r3, r1
 8010402:	bf08      	it	eq
 8010404:	3320      	addeq	r3, #32
 8010406:	f1a3 030b 	sub.w	r3, r3, #11
 801040a:	f1b3 0220 	subs.w	r2, r3, #32
 801040e:	da0c      	bge.n	801042a <__adddf3+0x16e>
 8010410:	320c      	adds	r2, #12
 8010412:	dd08      	ble.n	8010426 <__adddf3+0x16a>
 8010414:	f102 0c14 	add.w	ip, r2, #20
 8010418:	f1c2 020c 	rsb	r2, r2, #12
 801041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8010420:	fa21 f102 	lsr.w	r1, r1, r2
 8010424:	e00c      	b.n	8010440 <__adddf3+0x184>
 8010426:	f102 0214 	add.w	r2, r2, #20
 801042a:	bfd8      	it	le
 801042c:	f1c2 0c20 	rsble	ip, r2, #32
 8010430:	fa01 f102 	lsl.w	r1, r1, r2
 8010434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8010438:	bfdc      	itt	le
 801043a:	ea41 010c 	orrle.w	r1, r1, ip
 801043e:	4090      	lslle	r0, r2
 8010440:	1ae4      	subs	r4, r4, r3
 8010442:	bfa2      	ittt	ge
 8010444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8010448:	4329      	orrge	r1, r5
 801044a:	bd30      	popge	{r4, r5, pc}
 801044c:	ea6f 0404 	mvn.w	r4, r4
 8010450:	3c1f      	subs	r4, #31
 8010452:	da1c      	bge.n	801048e <__adddf3+0x1d2>
 8010454:	340c      	adds	r4, #12
 8010456:	dc0e      	bgt.n	8010476 <__adddf3+0x1ba>
 8010458:	f104 0414 	add.w	r4, r4, #20
 801045c:	f1c4 0220 	rsb	r2, r4, #32
 8010460:	fa20 f004 	lsr.w	r0, r0, r4
 8010464:	fa01 f302 	lsl.w	r3, r1, r2
 8010468:	ea40 0003 	orr.w	r0, r0, r3
 801046c:	fa21 f304 	lsr.w	r3, r1, r4
 8010470:	ea45 0103 	orr.w	r1, r5, r3
 8010474:	bd30      	pop	{r4, r5, pc}
 8010476:	f1c4 040c 	rsb	r4, r4, #12
 801047a:	f1c4 0220 	rsb	r2, r4, #32
 801047e:	fa20 f002 	lsr.w	r0, r0, r2
 8010482:	fa01 f304 	lsl.w	r3, r1, r4
 8010486:	ea40 0003 	orr.w	r0, r0, r3
 801048a:	4629      	mov	r1, r5
 801048c:	bd30      	pop	{r4, r5, pc}
 801048e:	fa21 f004 	lsr.w	r0, r1, r4
 8010492:	4629      	mov	r1, r5
 8010494:	bd30      	pop	{r4, r5, pc}
 8010496:	f094 0f00 	teq	r4, #0
 801049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 801049e:	bf06      	itte	eq
 80104a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80104a4:	3401      	addeq	r4, #1
 80104a6:	3d01      	subne	r5, #1
 80104a8:	e74e      	b.n	8010348 <__adddf3+0x8c>
 80104aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80104ae:	bf18      	it	ne
 80104b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80104b4:	d029      	beq.n	801050a <__adddf3+0x24e>
 80104b6:	ea94 0f05 	teq	r4, r5
 80104ba:	bf08      	it	eq
 80104bc:	ea90 0f02 	teqeq	r0, r2
 80104c0:	d005      	beq.n	80104ce <__adddf3+0x212>
 80104c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80104c6:	bf04      	itt	eq
 80104c8:	4619      	moveq	r1, r3
 80104ca:	4610      	moveq	r0, r2
 80104cc:	bd30      	pop	{r4, r5, pc}
 80104ce:	ea91 0f03 	teq	r1, r3
 80104d2:	bf1e      	ittt	ne
 80104d4:	2100      	movne	r1, #0
 80104d6:	2000      	movne	r0, #0
 80104d8:	bd30      	popne	{r4, r5, pc}
 80104da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80104de:	d105      	bne.n	80104ec <__adddf3+0x230>
 80104e0:	0040      	lsls	r0, r0, #1
 80104e2:	4149      	adcs	r1, r1
 80104e4:	bf28      	it	cs
 80104e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80104ea:	bd30      	pop	{r4, r5, pc}
 80104ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80104f0:	bf3c      	itt	cc
 80104f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80104f6:	bd30      	popcc	{r4, r5, pc}
 80104f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80104fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8010500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010504:	f04f 0000 	mov.w	r0, #0
 8010508:	bd30      	pop	{r4, r5, pc}
 801050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801050e:	bf1a      	itte	ne
 8010510:	4619      	movne	r1, r3
 8010512:	4610      	movne	r0, r2
 8010514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8010518:	bf1c      	itt	ne
 801051a:	460b      	movne	r3, r1
 801051c:	4602      	movne	r2, r0
 801051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010522:	bf06      	itte	eq
 8010524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8010528:	ea91 0f03 	teqeq	r1, r3
 801052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8010530:	bd30      	pop	{r4, r5, pc}
 8010532:	bf00      	nop

08010534 <__aeabi_ui2d>:
 8010534:	f090 0f00 	teq	r0, #0
 8010538:	bf04      	itt	eq
 801053a:	2100      	moveq	r1, #0
 801053c:	4770      	bxeq	lr
 801053e:	b530      	push	{r4, r5, lr}
 8010540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8010544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8010548:	f04f 0500 	mov.w	r5, #0
 801054c:	f04f 0100 	mov.w	r1, #0
 8010550:	e750      	b.n	80103f4 <__adddf3+0x138>
 8010552:	bf00      	nop

08010554 <__aeabi_i2d>:
 8010554:	f090 0f00 	teq	r0, #0
 8010558:	bf04      	itt	eq
 801055a:	2100      	moveq	r1, #0
 801055c:	4770      	bxeq	lr
 801055e:	b530      	push	{r4, r5, lr}
 8010560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8010564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8010568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 801056c:	bf48      	it	mi
 801056e:	4240      	negmi	r0, r0
 8010570:	f04f 0100 	mov.w	r1, #0
 8010574:	e73e      	b.n	80103f4 <__adddf3+0x138>
 8010576:	bf00      	nop

08010578 <__aeabi_f2d>:
 8010578:	0042      	lsls	r2, r0, #1
 801057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 801057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8010582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8010586:	bf1f      	itttt	ne
 8010588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 801058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8010590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8010594:	4770      	bxne	lr
 8010596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 801059a:	bf08      	it	eq
 801059c:	4770      	bxeq	lr
 801059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80105a2:	bf04      	itt	eq
 80105a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80105a8:	4770      	bxeq	lr
 80105aa:	b530      	push	{r4, r5, lr}
 80105ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80105b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80105b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80105b8:	e71c      	b.n	80103f4 <__adddf3+0x138>
 80105ba:	bf00      	nop

080105bc <__aeabi_ul2d>:
 80105bc:	ea50 0201 	orrs.w	r2, r0, r1
 80105c0:	bf08      	it	eq
 80105c2:	4770      	bxeq	lr
 80105c4:	b530      	push	{r4, r5, lr}
 80105c6:	f04f 0500 	mov.w	r5, #0
 80105ca:	e00a      	b.n	80105e2 <__aeabi_l2d+0x16>

080105cc <__aeabi_l2d>:
 80105cc:	ea50 0201 	orrs.w	r2, r0, r1
 80105d0:	bf08      	it	eq
 80105d2:	4770      	bxeq	lr
 80105d4:	b530      	push	{r4, r5, lr}
 80105d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80105da:	d502      	bpl.n	80105e2 <__aeabi_l2d+0x16>
 80105dc:	4240      	negs	r0, r0
 80105de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80105e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80105e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80105ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80105ee:	f43f aed8 	beq.w	80103a2 <__adddf3+0xe6>
 80105f2:	f04f 0203 	mov.w	r2, #3
 80105f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80105fa:	bf18      	it	ne
 80105fc:	3203      	addne	r2, #3
 80105fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010602:	bf18      	it	ne
 8010604:	3203      	addne	r2, #3
 8010606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 801060a:	f1c2 0320 	rsb	r3, r2, #32
 801060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8010612:	fa20 f002 	lsr.w	r0, r0, r2
 8010616:	fa01 fe03 	lsl.w	lr, r1, r3
 801061a:	ea40 000e 	orr.w	r0, r0, lr
 801061e:	fa21 f102 	lsr.w	r1, r1, r2
 8010622:	4414      	add	r4, r2
 8010624:	e6bd      	b.n	80103a2 <__adddf3+0xe6>
 8010626:	bf00      	nop

08010628 <__aeabi_dmul>:
 8010628:	b570      	push	{r4, r5, r6, lr}
 801062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 801062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8010632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8010636:	bf1d      	ittte	ne
 8010638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801063c:	ea94 0f0c 	teqne	r4, ip
 8010640:	ea95 0f0c 	teqne	r5, ip
 8010644:	f000 f8de 	bleq	8010804 <__aeabi_dmul+0x1dc>
 8010648:	442c      	add	r4, r5
 801064a:	ea81 0603 	eor.w	r6, r1, r3
 801064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8010652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8010656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801065a:	bf18      	it	ne
 801065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8010660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010668:	d038      	beq.n	80106dc <__aeabi_dmul+0xb4>
 801066a:	fba0 ce02 	umull	ip, lr, r0, r2
 801066e:	f04f 0500 	mov.w	r5, #0
 8010672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8010676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 801067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 801067e:	f04f 0600 	mov.w	r6, #0
 8010682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8010686:	f09c 0f00 	teq	ip, #0
 801068a:	bf18      	it	ne
 801068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8010690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8010694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8010698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 801069c:	d204      	bcs.n	80106a8 <__aeabi_dmul+0x80>
 801069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80106a2:	416d      	adcs	r5, r5
 80106a4:	eb46 0606 	adc.w	r6, r6, r6
 80106a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80106ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80106b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80106b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80106b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80106bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80106c0:	bf88      	it	hi
 80106c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80106c6:	d81e      	bhi.n	8010706 <__aeabi_dmul+0xde>
 80106c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80106cc:	bf08      	it	eq
 80106ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80106d2:	f150 0000 	adcs.w	r0, r0, #0
 80106d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80106da:	bd70      	pop	{r4, r5, r6, pc}
 80106dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80106e0:	ea46 0101 	orr.w	r1, r6, r1
 80106e4:	ea40 0002 	orr.w	r0, r0, r2
 80106e8:	ea81 0103 	eor.w	r1, r1, r3
 80106ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80106f0:	bfc2      	ittt	gt
 80106f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80106f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80106fa:	bd70      	popgt	{r4, r5, r6, pc}
 80106fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010700:	f04f 0e00 	mov.w	lr, #0
 8010704:	3c01      	subs	r4, #1
 8010706:	f300 80ab 	bgt.w	8010860 <__aeabi_dmul+0x238>
 801070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 801070e:	bfde      	ittt	le
 8010710:	2000      	movle	r0, #0
 8010712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8010716:	bd70      	pople	{r4, r5, r6, pc}
 8010718:	f1c4 0400 	rsb	r4, r4, #0
 801071c:	3c20      	subs	r4, #32
 801071e:	da35      	bge.n	801078c <__aeabi_dmul+0x164>
 8010720:	340c      	adds	r4, #12
 8010722:	dc1b      	bgt.n	801075c <__aeabi_dmul+0x134>
 8010724:	f104 0414 	add.w	r4, r4, #20
 8010728:	f1c4 0520 	rsb	r5, r4, #32
 801072c:	fa00 f305 	lsl.w	r3, r0, r5
 8010730:	fa20 f004 	lsr.w	r0, r0, r4
 8010734:	fa01 f205 	lsl.w	r2, r1, r5
 8010738:	ea40 0002 	orr.w	r0, r0, r2
 801073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8010740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8010744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8010748:	fa21 f604 	lsr.w	r6, r1, r4
 801074c:	eb42 0106 	adc.w	r1, r2, r6
 8010750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010754:	bf08      	it	eq
 8010756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801075a:	bd70      	pop	{r4, r5, r6, pc}
 801075c:	f1c4 040c 	rsb	r4, r4, #12
 8010760:	f1c4 0520 	rsb	r5, r4, #32
 8010764:	fa00 f304 	lsl.w	r3, r0, r4
 8010768:	fa20 f005 	lsr.w	r0, r0, r5
 801076c:	fa01 f204 	lsl.w	r2, r1, r4
 8010770:	ea40 0002 	orr.w	r0, r0, r2
 8010774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801077c:	f141 0100 	adc.w	r1, r1, #0
 8010780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010784:	bf08      	it	eq
 8010786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801078a:	bd70      	pop	{r4, r5, r6, pc}
 801078c:	f1c4 0520 	rsb	r5, r4, #32
 8010790:	fa00 f205 	lsl.w	r2, r0, r5
 8010794:	ea4e 0e02 	orr.w	lr, lr, r2
 8010798:	fa20 f304 	lsr.w	r3, r0, r4
 801079c:	fa01 f205 	lsl.w	r2, r1, r5
 80107a0:	ea43 0302 	orr.w	r3, r3, r2
 80107a4:	fa21 f004 	lsr.w	r0, r1, r4
 80107a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80107ac:	fa21 f204 	lsr.w	r2, r1, r4
 80107b0:	ea20 0002 	bic.w	r0, r0, r2
 80107b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80107b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80107bc:	bf08      	it	eq
 80107be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80107c2:	bd70      	pop	{r4, r5, r6, pc}
 80107c4:	f094 0f00 	teq	r4, #0
 80107c8:	d10f      	bne.n	80107ea <__aeabi_dmul+0x1c2>
 80107ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80107ce:	0040      	lsls	r0, r0, #1
 80107d0:	eb41 0101 	adc.w	r1, r1, r1
 80107d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80107d8:	bf08      	it	eq
 80107da:	3c01      	subeq	r4, #1
 80107dc:	d0f7      	beq.n	80107ce <__aeabi_dmul+0x1a6>
 80107de:	ea41 0106 	orr.w	r1, r1, r6
 80107e2:	f095 0f00 	teq	r5, #0
 80107e6:	bf18      	it	ne
 80107e8:	4770      	bxne	lr
 80107ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80107ee:	0052      	lsls	r2, r2, #1
 80107f0:	eb43 0303 	adc.w	r3, r3, r3
 80107f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80107f8:	bf08      	it	eq
 80107fa:	3d01      	subeq	r5, #1
 80107fc:	d0f7      	beq.n	80107ee <__aeabi_dmul+0x1c6>
 80107fe:	ea43 0306 	orr.w	r3, r3, r6
 8010802:	4770      	bx	lr
 8010804:	ea94 0f0c 	teq	r4, ip
 8010808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801080c:	bf18      	it	ne
 801080e:	ea95 0f0c 	teqne	r5, ip
 8010812:	d00c      	beq.n	801082e <__aeabi_dmul+0x206>
 8010814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010818:	bf18      	it	ne
 801081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801081e:	d1d1      	bne.n	80107c4 <__aeabi_dmul+0x19c>
 8010820:	ea81 0103 	eor.w	r1, r1, r3
 8010824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010828:	f04f 0000 	mov.w	r0, #0
 801082c:	bd70      	pop	{r4, r5, r6, pc}
 801082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010832:	bf06      	itte	eq
 8010834:	4610      	moveq	r0, r2
 8010836:	4619      	moveq	r1, r3
 8010838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801083c:	d019      	beq.n	8010872 <__aeabi_dmul+0x24a>
 801083e:	ea94 0f0c 	teq	r4, ip
 8010842:	d102      	bne.n	801084a <__aeabi_dmul+0x222>
 8010844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8010848:	d113      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801084a:	ea95 0f0c 	teq	r5, ip
 801084e:	d105      	bne.n	801085c <__aeabi_dmul+0x234>
 8010850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8010854:	bf1c      	itt	ne
 8010856:	4610      	movne	r0, r2
 8010858:	4619      	movne	r1, r3
 801085a:	d10a      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801085c:	ea81 0103 	eor.w	r1, r1, r3
 8010860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8010868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801086c:	f04f 0000 	mov.w	r0, #0
 8010870:	bd70      	pop	{r4, r5, r6, pc}
 8010872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8010876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 801087a:	bd70      	pop	{r4, r5, r6, pc}

0801087c <__aeabi_ddiv>:
 801087c:	b570      	push	{r4, r5, r6, lr}
 801087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8010882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8010886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801088a:	bf1d      	ittte	ne
 801088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010890:	ea94 0f0c 	teqne	r4, ip
 8010894:	ea95 0f0c 	teqne	r5, ip
 8010898:	f000 f8a7 	bleq	80109ea <__aeabi_ddiv+0x16e>
 801089c:	eba4 0405 	sub.w	r4, r4, r5
 80108a0:	ea81 0e03 	eor.w	lr, r1, r3
 80108a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80108a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80108ac:	f000 8088 	beq.w	80109c0 <__aeabi_ddiv+0x144>
 80108b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80108b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80108b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80108bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80108c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80108c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80108c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80108cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80108d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80108d4:	429d      	cmp	r5, r3
 80108d6:	bf08      	it	eq
 80108d8:	4296      	cmpeq	r6, r2
 80108da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80108de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80108e2:	d202      	bcs.n	80108ea <__aeabi_ddiv+0x6e>
 80108e4:	085b      	lsrs	r3, r3, #1
 80108e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80108ea:	1ab6      	subs	r6, r6, r2
 80108ec:	eb65 0503 	sbc.w	r5, r5, r3
 80108f0:	085b      	lsrs	r3, r3, #1
 80108f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80108f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80108fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80108fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8010902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010906:	bf22      	ittt	cs
 8010908:	1ab6      	subcs	r6, r6, r2
 801090a:	4675      	movcs	r5, lr
 801090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8010910:	085b      	lsrs	r3, r3, #1
 8010912:	ea4f 0232 	mov.w	r2, r2, rrx
 8010916:	ebb6 0e02 	subs.w	lr, r6, r2
 801091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801091e:	bf22      	ittt	cs
 8010920:	1ab6      	subcs	r6, r6, r2
 8010922:	4675      	movcs	r5, lr
 8010924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8010928:	085b      	lsrs	r3, r3, #1
 801092a:	ea4f 0232 	mov.w	r2, r2, rrx
 801092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8010932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010936:	bf22      	ittt	cs
 8010938:	1ab6      	subcs	r6, r6, r2
 801093a:	4675      	movcs	r5, lr
 801093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8010940:	085b      	lsrs	r3, r3, #1
 8010942:	ea4f 0232 	mov.w	r2, r2, rrx
 8010946:	ebb6 0e02 	subs.w	lr, r6, r2
 801094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801094e:	bf22      	ittt	cs
 8010950:	1ab6      	subcs	r6, r6, r2
 8010952:	4675      	movcs	r5, lr
 8010954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8010958:	ea55 0e06 	orrs.w	lr, r5, r6
 801095c:	d018      	beq.n	8010990 <__aeabi_ddiv+0x114>
 801095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8010962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8010966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8010972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8010976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 801097a:	d1c0      	bne.n	80108fe <__aeabi_ddiv+0x82>
 801097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8010980:	d10b      	bne.n	801099a <__aeabi_ddiv+0x11e>
 8010982:	ea41 0100 	orr.w	r1, r1, r0
 8010986:	f04f 0000 	mov.w	r0, #0
 801098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801098e:	e7b6      	b.n	80108fe <__aeabi_ddiv+0x82>
 8010990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8010994:	bf04      	itt	eq
 8010996:	4301      	orreq	r1, r0
 8010998:	2000      	moveq	r0, #0
 801099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 801099e:	bf88      	it	hi
 80109a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80109a4:	f63f aeaf 	bhi.w	8010706 <__aeabi_dmul+0xde>
 80109a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80109ac:	bf04      	itt	eq
 80109ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80109b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80109b6:	f150 0000 	adcs.w	r0, r0, #0
 80109ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80109be:	bd70      	pop	{r4, r5, r6, pc}
 80109c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80109c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80109c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80109cc:	bfc2      	ittt	gt
 80109ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80109d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80109d6:	bd70      	popgt	{r4, r5, r6, pc}
 80109d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80109dc:	f04f 0e00 	mov.w	lr, #0
 80109e0:	3c01      	subs	r4, #1
 80109e2:	e690      	b.n	8010706 <__aeabi_dmul+0xde>
 80109e4:	ea45 0e06 	orr.w	lr, r5, r6
 80109e8:	e68d      	b.n	8010706 <__aeabi_dmul+0xde>
 80109ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80109ee:	ea94 0f0c 	teq	r4, ip
 80109f2:	bf08      	it	eq
 80109f4:	ea95 0f0c 	teqeq	r5, ip
 80109f8:	f43f af3b 	beq.w	8010872 <__aeabi_dmul+0x24a>
 80109fc:	ea94 0f0c 	teq	r4, ip
 8010a00:	d10a      	bne.n	8010a18 <__aeabi_ddiv+0x19c>
 8010a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010a06:	f47f af34 	bne.w	8010872 <__aeabi_dmul+0x24a>
 8010a0a:	ea95 0f0c 	teq	r5, ip
 8010a0e:	f47f af25 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a12:	4610      	mov	r0, r2
 8010a14:	4619      	mov	r1, r3
 8010a16:	e72c      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a18:	ea95 0f0c 	teq	r5, ip
 8010a1c:	d106      	bne.n	8010a2c <__aeabi_ddiv+0x1b0>
 8010a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8010a22:	f43f aefd 	beq.w	8010820 <__aeabi_dmul+0x1f8>
 8010a26:	4610      	mov	r0, r2
 8010a28:	4619      	mov	r1, r3
 8010a2a:	e722      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010a30:	bf18      	it	ne
 8010a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010a36:	f47f aec5 	bne.w	80107c4 <__aeabi_dmul+0x19c>
 8010a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8010a3e:	f47f af0d 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8010a46:	f47f aeeb 	bne.w	8010820 <__aeabi_dmul+0x1f8>
 8010a4a:	e712      	b.n	8010872 <__aeabi_dmul+0x24a>

08010a4c <__gedf2>:
 8010a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8010a50:	e006      	b.n	8010a60 <__cmpdf2+0x4>
 8010a52:	bf00      	nop

08010a54 <__ledf2>:
 8010a54:	f04f 0c01 	mov.w	ip, #1
 8010a58:	e002      	b.n	8010a60 <__cmpdf2+0x4>
 8010a5a:	bf00      	nop

08010a5c <__cmpdf2>:
 8010a5c:	f04f 0c01 	mov.w	ip, #1
 8010a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8010a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010a70:	bf18      	it	ne
 8010a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8010a76:	d01b      	beq.n	8010ab0 <__cmpdf2+0x54>
 8010a78:	b001      	add	sp, #4
 8010a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8010a7e:	bf0c      	ite	eq
 8010a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8010a84:	ea91 0f03 	teqne	r1, r3
 8010a88:	bf02      	ittt	eq
 8010a8a:	ea90 0f02 	teqeq	r0, r2
 8010a8e:	2000      	moveq	r0, #0
 8010a90:	4770      	bxeq	lr
 8010a92:	f110 0f00 	cmn.w	r0, #0
 8010a96:	ea91 0f03 	teq	r1, r3
 8010a9a:	bf58      	it	pl
 8010a9c:	4299      	cmppl	r1, r3
 8010a9e:	bf08      	it	eq
 8010aa0:	4290      	cmpeq	r0, r2
 8010aa2:	bf2c      	ite	cs
 8010aa4:	17d8      	asrcs	r0, r3, #31
 8010aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8010aaa:	f040 0001 	orr.w	r0, r0, #1
 8010aae:	4770      	bx	lr
 8010ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ab8:	d102      	bne.n	8010ac0 <__cmpdf2+0x64>
 8010aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010abe:	d107      	bne.n	8010ad0 <__cmpdf2+0x74>
 8010ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ac8:	d1d6      	bne.n	8010a78 <__cmpdf2+0x1c>
 8010aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010ace:	d0d3      	beq.n	8010a78 <__cmpdf2+0x1c>
 8010ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8010ad4:	4770      	bx	lr
 8010ad6:	bf00      	nop

08010ad8 <__aeabi_cdrcmple>:
 8010ad8:	4684      	mov	ip, r0
 8010ada:	4610      	mov	r0, r2
 8010adc:	4662      	mov	r2, ip
 8010ade:	468c      	mov	ip, r1
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	4663      	mov	r3, ip
 8010ae4:	e000      	b.n	8010ae8 <__aeabi_cdcmpeq>
 8010ae6:	bf00      	nop

08010ae8 <__aeabi_cdcmpeq>:
 8010ae8:	b501      	push	{r0, lr}
 8010aea:	f7ff ffb7 	bl	8010a5c <__cmpdf2>
 8010aee:	2800      	cmp	r0, #0
 8010af0:	bf48      	it	mi
 8010af2:	f110 0f00 	cmnmi.w	r0, #0
 8010af6:	bd01      	pop	{r0, pc}

08010af8 <__aeabi_dcmpeq>:
 8010af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010afc:	f7ff fff4 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b00:	bf0c      	ite	eq
 8010b02:	2001      	moveq	r0, #1
 8010b04:	2000      	movne	r0, #0
 8010b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b0a:	bf00      	nop

08010b0c <__aeabi_dcmplt>:
 8010b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b10:	f7ff ffea 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b14:	bf34      	ite	cc
 8010b16:	2001      	movcc	r0, #1
 8010b18:	2000      	movcs	r0, #0
 8010b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b1e:	bf00      	nop

08010b20 <__aeabi_dcmple>:
 8010b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b24:	f7ff ffe0 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b28:	bf94      	ite	ls
 8010b2a:	2001      	movls	r0, #1
 8010b2c:	2000      	movhi	r0, #0
 8010b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b32:	bf00      	nop

08010b34 <__aeabi_dcmpge>:
 8010b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b38:	f7ff ffce 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b3c:	bf94      	ite	ls
 8010b3e:	2001      	movls	r0, #1
 8010b40:	2000      	movhi	r0, #0
 8010b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b46:	bf00      	nop

08010b48 <__aeabi_dcmpgt>:
 8010b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b4c:	f7ff ffc4 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b50:	bf34      	ite	cc
 8010b52:	2001      	movcc	r0, #1
 8010b54:	2000      	movcs	r0, #0
 8010b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b5a:	bf00      	nop

08010b5c <__aeabi_dcmpun>:
 8010b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b64:	d102      	bne.n	8010b6c <__aeabi_dcmpun+0x10>
 8010b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010b6a:	d10a      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b74:	d102      	bne.n	8010b7c <__aeabi_dcmpun+0x20>
 8010b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010b7a:	d102      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b7c:	f04f 0000 	mov.w	r0, #0
 8010b80:	4770      	bx	lr
 8010b82:	f04f 0001 	mov.w	r0, #1
 8010b86:	4770      	bx	lr

08010b88 <__aeabi_d2iz>:
 8010b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8010b90:	d215      	bcs.n	8010bbe <__aeabi_d2iz+0x36>
 8010b92:	d511      	bpl.n	8010bb8 <__aeabi_d2iz+0x30>
 8010b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8010b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010b9c:	d912      	bls.n	8010bc4 <__aeabi_d2iz+0x3c>
 8010b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8010bae:	fa23 f002 	lsr.w	r0, r3, r2
 8010bb2:	bf18      	it	ne
 8010bb4:	4240      	negne	r0, r0
 8010bb6:	4770      	bx	lr
 8010bb8:	f04f 0000 	mov.w	r0, #0
 8010bbc:	4770      	bx	lr
 8010bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010bc2:	d105      	bne.n	8010bd0 <__aeabi_d2iz+0x48>
 8010bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8010bc8:	bf08      	it	eq
 8010bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8010bce:	4770      	bx	lr
 8010bd0:	f04f 0000 	mov.w	r0, #0
 8010bd4:	4770      	bx	lr
 8010bd6:	bf00      	nop

08010bd8 <__aeabi_d2uiz>:
 8010bd8:	004a      	lsls	r2, r1, #1
 8010bda:	d211      	bcs.n	8010c00 <__aeabi_d2uiz+0x28>
 8010bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8010be0:	d211      	bcs.n	8010c06 <__aeabi_d2uiz+0x2e>
 8010be2:	d50d      	bpl.n	8010c00 <__aeabi_d2uiz+0x28>
 8010be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8010be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010bec:	d40e      	bmi.n	8010c0c <__aeabi_d2uiz+0x34>
 8010bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8010bfe:	4770      	bx	lr
 8010c00:	f04f 0000 	mov.w	r0, #0
 8010c04:	4770      	bx	lr
 8010c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010c0a:	d102      	bne.n	8010c12 <__aeabi_d2uiz+0x3a>
 8010c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010c10:	4770      	bx	lr
 8010c12:	f04f 0000 	mov.w	r0, #0
 8010c16:	4770      	bx	lr

08010c18 <__aeabi_d2f>:
 8010c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8010c20:	bf24      	itt	cs
 8010c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8010c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8010c2a:	d90d      	bls.n	8010c48 <__aeabi_d2f+0x30>
 8010c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8010c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8010c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8010c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8010c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8010c40:	bf08      	it	eq
 8010c42:	f020 0001 	biceq.w	r0, r0, #1
 8010c46:	4770      	bx	lr
 8010c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8010c4c:	d121      	bne.n	8010c92 <__aeabi_d2f+0x7a>
 8010c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8010c52:	bfbc      	itt	lt
 8010c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8010c58:	4770      	bxlt	lr
 8010c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8010c62:	f1c2 0218 	rsb	r2, r2, #24
 8010c66:	f1c2 0c20 	rsb	ip, r2, #32
 8010c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8010c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8010c72:	bf18      	it	ne
 8010c74:	f040 0001 	orrne.w	r0, r0, #1
 8010c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8010c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8010c84:	ea40 000c 	orr.w	r0, r0, ip
 8010c88:	fa23 f302 	lsr.w	r3, r3, r2
 8010c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010c90:	e7cc      	b.n	8010c2c <__aeabi_d2f+0x14>
 8010c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8010c96:	d107      	bne.n	8010ca8 <__aeabi_d2f+0x90>
 8010c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8010c9c:	bf1e      	ittt	ne
 8010c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8010ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8010ca6:	4770      	bxne	lr
 8010ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8010cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8010cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8010cb4:	4770      	bx	lr
 8010cb6:	bf00      	nop

08010cb8 <__aeabi_ldivmod>:
 8010cb8:	b97b      	cbnz	r3, 8010cda <__aeabi_ldivmod+0x22>
 8010cba:	b972      	cbnz	r2, 8010cda <__aeabi_ldivmod+0x22>
 8010cbc:	2900      	cmp	r1, #0
 8010cbe:	bfbe      	ittt	lt
 8010cc0:	2000      	movlt	r0, #0
 8010cc2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8010cc6:	e006      	blt.n	8010cd6 <__aeabi_ldivmod+0x1e>
 8010cc8:	bf08      	it	eq
 8010cca:	2800      	cmpeq	r0, #0
 8010ccc:	bf1c      	itt	ne
 8010cce:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8010cd2:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8010cd6:	f000 b9ff 	b.w	80110d8 <__aeabi_idiv0>
 8010cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8010cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010ce2:	2900      	cmp	r1, #0
 8010ce4:	db09      	blt.n	8010cfa <__aeabi_ldivmod+0x42>
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	db1a      	blt.n	8010d20 <__aeabi_ldivmod+0x68>
 8010cea:	f000 f897 	bl	8010e1c <__udivmoddi4>
 8010cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010cf6:	b004      	add	sp, #16
 8010cf8:	4770      	bx	lr
 8010cfa:	4240      	negs	r0, r0
 8010cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	db1b      	blt.n	8010d3c <__aeabi_ldivmod+0x84>
 8010d04:	f000 f88a 	bl	8010e1c <__udivmoddi4>
 8010d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d10:	b004      	add	sp, #16
 8010d12:	4240      	negs	r0, r0
 8010d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d18:	4252      	negs	r2, r2
 8010d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d1e:	4770      	bx	lr
 8010d20:	4252      	negs	r2, r2
 8010d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d26:	f000 f879 	bl	8010e1c <__udivmoddi4>
 8010d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d32:	b004      	add	sp, #16
 8010d34:	4240      	negs	r0, r0
 8010d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d3a:	4770      	bx	lr
 8010d3c:	4252      	negs	r2, r2
 8010d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d42:	f000 f86b 	bl	8010e1c <__udivmoddi4>
 8010d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d4e:	b004      	add	sp, #16
 8010d50:	4252      	negs	r2, r2
 8010d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d56:	4770      	bx	lr

08010d58 <__aeabi_uldivmod>:
 8010d58:	b953      	cbnz	r3, 8010d70 <__aeabi_uldivmod+0x18>
 8010d5a:	b94a      	cbnz	r2, 8010d70 <__aeabi_uldivmod+0x18>
 8010d5c:	2900      	cmp	r1, #0
 8010d5e:	bf08      	it	eq
 8010d60:	2800      	cmpeq	r0, #0
 8010d62:	bf1c      	itt	ne
 8010d64:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8010d68:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8010d6c:	f000 b9b4 	b.w	80110d8 <__aeabi_idiv0>
 8010d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8010d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010d78:	f000 f850 	bl	8010e1c <__udivmoddi4>
 8010d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d84:	b004      	add	sp, #16
 8010d86:	4770      	bx	lr

08010d88 <__popcountsi2>:
 8010d88:	0843      	lsrs	r3, r0, #1
 8010d8a:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8010d8e:	1ac0      	subs	r0, r0, r3
 8010d90:	0883      	lsrs	r3, r0, #2
 8010d92:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8010d96:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 8010d9a:	4418      	add	r0, r3
 8010d9c:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8010da0:	f000 300f 	and.w	r0, r0, #252645135	@ 0xf0f0f0f
 8010da4:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8010da8:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8010dac:	0e00      	lsrs	r0, r0, #24
 8010dae:	4770      	bx	lr

08010db0 <__aeabi_d2lz>:
 8010db0:	b538      	push	{r3, r4, r5, lr}
 8010db2:	2200      	movs	r2, #0
 8010db4:	2300      	movs	r3, #0
 8010db6:	4604      	mov	r4, r0
 8010db8:	460d      	mov	r5, r1
 8010dba:	f7ff fea7 	bl	8010b0c <__aeabi_dcmplt>
 8010dbe:	b928      	cbnz	r0, 8010dcc <__aeabi_d2lz+0x1c>
 8010dc0:	4620      	mov	r0, r4
 8010dc2:	4629      	mov	r1, r5
 8010dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010dc8:	f000 b80a 	b.w	8010de0 <__aeabi_d2ulz>
 8010dcc:	4620      	mov	r0, r4
 8010dce:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8010dd2:	f000 f805 	bl	8010de0 <__aeabi_d2ulz>
 8010dd6:	4240      	negs	r0, r0
 8010dd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010ddc:	bd38      	pop	{r3, r4, r5, pc}
 8010dde:	bf00      	nop

08010de0 <__aeabi_d2ulz>:
 8010de0:	b5d0      	push	{r4, r6, r7, lr}
 8010de2:	4b0c      	ldr	r3, [pc, #48]	@ (8010e14 <__aeabi_d2ulz+0x34>)
 8010de4:	2200      	movs	r2, #0
 8010de6:	4606      	mov	r6, r0
 8010de8:	460f      	mov	r7, r1
 8010dea:	f7ff fc1d 	bl	8010628 <__aeabi_dmul>
 8010dee:	f7ff fef3 	bl	8010bd8 <__aeabi_d2uiz>
 8010df2:	4604      	mov	r4, r0
 8010df4:	f7ff fb9e 	bl	8010534 <__aeabi_ui2d>
 8010df8:	4b07      	ldr	r3, [pc, #28]	@ (8010e18 <__aeabi_d2ulz+0x38>)
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	f7ff fc14 	bl	8010628 <__aeabi_dmul>
 8010e00:	4602      	mov	r2, r0
 8010e02:	460b      	mov	r3, r1
 8010e04:	4630      	mov	r0, r6
 8010e06:	4639      	mov	r1, r7
 8010e08:	f7ff fa56 	bl	80102b8 <__aeabi_dsub>
 8010e0c:	f7ff fee4 	bl	8010bd8 <__aeabi_d2uiz>
 8010e10:	4621      	mov	r1, r4
 8010e12:	bdd0      	pop	{r4, r6, r7, pc}
 8010e14:	3df00000 	.word	0x3df00000
 8010e18:	41f00000 	.word	0x41f00000

08010e1c <__udivmoddi4>:
 8010e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e20:	9d08      	ldr	r5, [sp, #32]
 8010e22:	460c      	mov	r4, r1
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d14e      	bne.n	8010ec6 <__udivmoddi4+0xaa>
 8010e28:	4694      	mov	ip, r2
 8010e2a:	458c      	cmp	ip, r1
 8010e2c:	4686      	mov	lr, r0
 8010e2e:	fab2 f282 	clz	r2, r2
 8010e32:	d962      	bls.n	8010efa <__udivmoddi4+0xde>
 8010e34:	b14a      	cbz	r2, 8010e4a <__udivmoddi4+0x2e>
 8010e36:	f1c2 0320 	rsb	r3, r2, #32
 8010e3a:	4091      	lsls	r1, r2
 8010e3c:	fa20 f303 	lsr.w	r3, r0, r3
 8010e40:	fa0c fc02 	lsl.w	ip, ip, r2
 8010e44:	4319      	orrs	r1, r3
 8010e46:	fa00 fe02 	lsl.w	lr, r0, r2
 8010e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8010e4e:	fa1f f68c 	uxth.w	r6, ip
 8010e52:	fbb1 f4f7 	udiv	r4, r1, r7
 8010e56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8010e5a:	fb07 1114 	mls	r1, r7, r4, r1
 8010e5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010e62:	fb04 f106 	mul.w	r1, r4, r6
 8010e66:	4299      	cmp	r1, r3
 8010e68:	d90a      	bls.n	8010e80 <__udivmoddi4+0x64>
 8010e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8010e6e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8010e72:	f080 8112 	bcs.w	801109a <__udivmoddi4+0x27e>
 8010e76:	4299      	cmp	r1, r3
 8010e78:	f240 810f 	bls.w	801109a <__udivmoddi4+0x27e>
 8010e7c:	3c02      	subs	r4, #2
 8010e7e:	4463      	add	r3, ip
 8010e80:	1a59      	subs	r1, r3, r1
 8010e82:	fa1f f38e 	uxth.w	r3, lr
 8010e86:	fbb1 f0f7 	udiv	r0, r1, r7
 8010e8a:	fb07 1110 	mls	r1, r7, r0, r1
 8010e8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010e92:	fb00 f606 	mul.w	r6, r0, r6
 8010e96:	429e      	cmp	r6, r3
 8010e98:	d90a      	bls.n	8010eb0 <__udivmoddi4+0x94>
 8010e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8010e9e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8010ea2:	f080 80fc 	bcs.w	801109e <__udivmoddi4+0x282>
 8010ea6:	429e      	cmp	r6, r3
 8010ea8:	f240 80f9 	bls.w	801109e <__udivmoddi4+0x282>
 8010eac:	4463      	add	r3, ip
 8010eae:	3802      	subs	r0, #2
 8010eb0:	1b9b      	subs	r3, r3, r6
 8010eb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8010eb6:	2100      	movs	r1, #0
 8010eb8:	b11d      	cbz	r5, 8010ec2 <__udivmoddi4+0xa6>
 8010eba:	40d3      	lsrs	r3, r2
 8010ebc:	2200      	movs	r2, #0
 8010ebe:	e9c5 3200 	strd	r3, r2, [r5]
 8010ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ec6:	428b      	cmp	r3, r1
 8010ec8:	d905      	bls.n	8010ed6 <__udivmoddi4+0xba>
 8010eca:	b10d      	cbz	r5, 8010ed0 <__udivmoddi4+0xb4>
 8010ecc:	e9c5 0100 	strd	r0, r1, [r5]
 8010ed0:	2100      	movs	r1, #0
 8010ed2:	4608      	mov	r0, r1
 8010ed4:	e7f5      	b.n	8010ec2 <__udivmoddi4+0xa6>
 8010ed6:	fab3 f183 	clz	r1, r3
 8010eda:	2900      	cmp	r1, #0
 8010edc:	d146      	bne.n	8010f6c <__udivmoddi4+0x150>
 8010ede:	42a3      	cmp	r3, r4
 8010ee0:	d302      	bcc.n	8010ee8 <__udivmoddi4+0xcc>
 8010ee2:	4290      	cmp	r0, r2
 8010ee4:	f0c0 80f0 	bcc.w	80110c8 <__udivmoddi4+0x2ac>
 8010ee8:	1a86      	subs	r6, r0, r2
 8010eea:	eb64 0303 	sbc.w	r3, r4, r3
 8010eee:	2001      	movs	r0, #1
 8010ef0:	2d00      	cmp	r5, #0
 8010ef2:	d0e6      	beq.n	8010ec2 <__udivmoddi4+0xa6>
 8010ef4:	e9c5 6300 	strd	r6, r3, [r5]
 8010ef8:	e7e3      	b.n	8010ec2 <__udivmoddi4+0xa6>
 8010efa:	2a00      	cmp	r2, #0
 8010efc:	f040 8090 	bne.w	8011020 <__udivmoddi4+0x204>
 8010f00:	eba1 040c 	sub.w	r4, r1, ip
 8010f04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8010f08:	fa1f f78c 	uxth.w	r7, ip
 8010f0c:	2101      	movs	r1, #1
 8010f0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8010f12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8010f16:	fb08 4416 	mls	r4, r8, r6, r4
 8010f1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010f1e:	fb07 f006 	mul.w	r0, r7, r6
 8010f22:	4298      	cmp	r0, r3
 8010f24:	d908      	bls.n	8010f38 <__udivmoddi4+0x11c>
 8010f26:	eb1c 0303 	adds.w	r3, ip, r3
 8010f2a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8010f2e:	d202      	bcs.n	8010f36 <__udivmoddi4+0x11a>
 8010f30:	4298      	cmp	r0, r3
 8010f32:	f200 80cd 	bhi.w	80110d0 <__udivmoddi4+0x2b4>
 8010f36:	4626      	mov	r6, r4
 8010f38:	1a1c      	subs	r4, r3, r0
 8010f3a:	fa1f f38e 	uxth.w	r3, lr
 8010f3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8010f42:	fb08 4410 	mls	r4, r8, r0, r4
 8010f46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010f4a:	fb00 f707 	mul.w	r7, r0, r7
 8010f4e:	429f      	cmp	r7, r3
 8010f50:	d908      	bls.n	8010f64 <__udivmoddi4+0x148>
 8010f52:	eb1c 0303 	adds.w	r3, ip, r3
 8010f56:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8010f5a:	d202      	bcs.n	8010f62 <__udivmoddi4+0x146>
 8010f5c:	429f      	cmp	r7, r3
 8010f5e:	f200 80b0 	bhi.w	80110c2 <__udivmoddi4+0x2a6>
 8010f62:	4620      	mov	r0, r4
 8010f64:	1bdb      	subs	r3, r3, r7
 8010f66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8010f6a:	e7a5      	b.n	8010eb8 <__udivmoddi4+0x9c>
 8010f6c:	f1c1 0620 	rsb	r6, r1, #32
 8010f70:	408b      	lsls	r3, r1
 8010f72:	fa22 f706 	lsr.w	r7, r2, r6
 8010f76:	431f      	orrs	r7, r3
 8010f78:	fa20 fc06 	lsr.w	ip, r0, r6
 8010f7c:	fa04 f301 	lsl.w	r3, r4, r1
 8010f80:	ea43 030c 	orr.w	r3, r3, ip
 8010f84:	40f4      	lsrs	r4, r6
 8010f86:	fa00 f801 	lsl.w	r8, r0, r1
 8010f8a:	0c38      	lsrs	r0, r7, #16
 8010f8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8010f90:	fbb4 fef0 	udiv	lr, r4, r0
 8010f94:	fa1f fc87 	uxth.w	ip, r7
 8010f98:	fb00 441e 	mls	r4, r0, lr, r4
 8010f9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8010fa0:	fb0e f90c 	mul.w	r9, lr, ip
 8010fa4:	45a1      	cmp	r9, r4
 8010fa6:	fa02 f201 	lsl.w	r2, r2, r1
 8010faa:	d90a      	bls.n	8010fc2 <__udivmoddi4+0x1a6>
 8010fac:	193c      	adds	r4, r7, r4
 8010fae:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8010fb2:	f080 8084 	bcs.w	80110be <__udivmoddi4+0x2a2>
 8010fb6:	45a1      	cmp	r9, r4
 8010fb8:	f240 8081 	bls.w	80110be <__udivmoddi4+0x2a2>
 8010fbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8010fc0:	443c      	add	r4, r7
 8010fc2:	eba4 0409 	sub.w	r4, r4, r9
 8010fc6:	fa1f f983 	uxth.w	r9, r3
 8010fca:	fbb4 f3f0 	udiv	r3, r4, r0
 8010fce:	fb00 4413 	mls	r4, r0, r3, r4
 8010fd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8010fd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8010fda:	45a4      	cmp	ip, r4
 8010fdc:	d907      	bls.n	8010fee <__udivmoddi4+0x1d2>
 8010fde:	193c      	adds	r4, r7, r4
 8010fe0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8010fe4:	d267      	bcs.n	80110b6 <__udivmoddi4+0x29a>
 8010fe6:	45a4      	cmp	ip, r4
 8010fe8:	d965      	bls.n	80110b6 <__udivmoddi4+0x29a>
 8010fea:	3b02      	subs	r3, #2
 8010fec:	443c      	add	r4, r7
 8010fee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8010ff2:	fba0 9302 	umull	r9, r3, r0, r2
 8010ff6:	eba4 040c 	sub.w	r4, r4, ip
 8010ffa:	429c      	cmp	r4, r3
 8010ffc:	46ce      	mov	lr, r9
 8010ffe:	469c      	mov	ip, r3
 8011000:	d351      	bcc.n	80110a6 <__udivmoddi4+0x28a>
 8011002:	d04e      	beq.n	80110a2 <__udivmoddi4+0x286>
 8011004:	b155      	cbz	r5, 801101c <__udivmoddi4+0x200>
 8011006:	ebb8 030e 	subs.w	r3, r8, lr
 801100a:	eb64 040c 	sbc.w	r4, r4, ip
 801100e:	fa04 f606 	lsl.w	r6, r4, r6
 8011012:	40cb      	lsrs	r3, r1
 8011014:	431e      	orrs	r6, r3
 8011016:	40cc      	lsrs	r4, r1
 8011018:	e9c5 6400 	strd	r6, r4, [r5]
 801101c:	2100      	movs	r1, #0
 801101e:	e750      	b.n	8010ec2 <__udivmoddi4+0xa6>
 8011020:	f1c2 0320 	rsb	r3, r2, #32
 8011024:	fa20 f103 	lsr.w	r1, r0, r3
 8011028:	fa0c fc02 	lsl.w	ip, ip, r2
 801102c:	fa24 f303 	lsr.w	r3, r4, r3
 8011030:	4094      	lsls	r4, r2
 8011032:	430c      	orrs	r4, r1
 8011034:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8011038:	fa00 fe02 	lsl.w	lr, r0, r2
 801103c:	fa1f f78c 	uxth.w	r7, ip
 8011040:	fbb3 f0f8 	udiv	r0, r3, r8
 8011044:	fb08 3110 	mls	r1, r8, r0, r3
 8011048:	0c23      	lsrs	r3, r4, #16
 801104a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801104e:	fb00 f107 	mul.w	r1, r0, r7
 8011052:	4299      	cmp	r1, r3
 8011054:	d908      	bls.n	8011068 <__udivmoddi4+0x24c>
 8011056:	eb1c 0303 	adds.w	r3, ip, r3
 801105a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 801105e:	d22c      	bcs.n	80110ba <__udivmoddi4+0x29e>
 8011060:	4299      	cmp	r1, r3
 8011062:	d92a      	bls.n	80110ba <__udivmoddi4+0x29e>
 8011064:	3802      	subs	r0, #2
 8011066:	4463      	add	r3, ip
 8011068:	1a5b      	subs	r3, r3, r1
 801106a:	b2a4      	uxth	r4, r4
 801106c:	fbb3 f1f8 	udiv	r1, r3, r8
 8011070:	fb08 3311 	mls	r3, r8, r1, r3
 8011074:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8011078:	fb01 f307 	mul.w	r3, r1, r7
 801107c:	42a3      	cmp	r3, r4
 801107e:	d908      	bls.n	8011092 <__udivmoddi4+0x276>
 8011080:	eb1c 0404 	adds.w	r4, ip, r4
 8011084:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8011088:	d213      	bcs.n	80110b2 <__udivmoddi4+0x296>
 801108a:	42a3      	cmp	r3, r4
 801108c:	d911      	bls.n	80110b2 <__udivmoddi4+0x296>
 801108e:	3902      	subs	r1, #2
 8011090:	4464      	add	r4, ip
 8011092:	1ae4      	subs	r4, r4, r3
 8011094:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011098:	e739      	b.n	8010f0e <__udivmoddi4+0xf2>
 801109a:	4604      	mov	r4, r0
 801109c:	e6f0      	b.n	8010e80 <__udivmoddi4+0x64>
 801109e:	4608      	mov	r0, r1
 80110a0:	e706      	b.n	8010eb0 <__udivmoddi4+0x94>
 80110a2:	45c8      	cmp	r8, r9
 80110a4:	d2ae      	bcs.n	8011004 <__udivmoddi4+0x1e8>
 80110a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80110aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80110ae:	3801      	subs	r0, #1
 80110b0:	e7a8      	b.n	8011004 <__udivmoddi4+0x1e8>
 80110b2:	4631      	mov	r1, r6
 80110b4:	e7ed      	b.n	8011092 <__udivmoddi4+0x276>
 80110b6:	4603      	mov	r3, r0
 80110b8:	e799      	b.n	8010fee <__udivmoddi4+0x1d2>
 80110ba:	4630      	mov	r0, r6
 80110bc:	e7d4      	b.n	8011068 <__udivmoddi4+0x24c>
 80110be:	46d6      	mov	lr, sl
 80110c0:	e77f      	b.n	8010fc2 <__udivmoddi4+0x1a6>
 80110c2:	4463      	add	r3, ip
 80110c4:	3802      	subs	r0, #2
 80110c6:	e74d      	b.n	8010f64 <__udivmoddi4+0x148>
 80110c8:	4606      	mov	r6, r0
 80110ca:	4623      	mov	r3, r4
 80110cc:	4608      	mov	r0, r1
 80110ce:	e70f      	b.n	8010ef0 <__udivmoddi4+0xd4>
 80110d0:	3e02      	subs	r6, #2
 80110d2:	4463      	add	r3, ip
 80110d4:	e730      	b.n	8010f38 <__udivmoddi4+0x11c>
 80110d6:	bf00      	nop

080110d8 <__aeabi_idiv0>:
 80110d8:	4770      	bx	lr
 80110da:	bf00      	nop

080110dc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80110dc:	b580      	push	{r7, lr}
 80110de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of SPI2Mutex */
  SPI2MutexHandle = osMutexNew(&SPI2Mutex_attributes);
 80110e0:	482f      	ldr	r0, [pc, #188]	@ (80111a0 <MX_FREERTOS_Init+0xc4>)
 80110e2:	f008 f82d 	bl	8019140 <osMutexNew>
 80110e6:	4603      	mov	r3, r0
 80110e8:	4a2e      	ldr	r2, [pc, #184]	@ (80111a4 <MX_FREERTOS_Init+0xc8>)
 80110ea:	6013      	str	r3, [r2, #0]

  /* creation of FSMutex */
  FSMutexHandle = osMutexNew(&FSMutex_attributes);
 80110ec:	482e      	ldr	r0, [pc, #184]	@ (80111a8 <MX_FREERTOS_Init+0xcc>)
 80110ee:	f008 f827 	bl	8019140 <osMutexNew>
 80110f2:	4603      	mov	r3, r0
 80110f4:	4a2d      	ldr	r2, [pc, #180]	@ (80111ac <MX_FREERTOS_Init+0xd0>)
 80110f6:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of inputReadQ */
  inputReadQHandle = osMessageQueueNew (1, sizeof(inputs_state_t), &inputReadQ_attributes);
 80110f8:	4a2d      	ldr	r2, [pc, #180]	@ (80111b0 <MX_FREERTOS_Init+0xd4>)
 80110fa:	2103      	movs	r1, #3
 80110fc:	2001      	movs	r0, #1
 80110fe:	f008 f92d 	bl	801935c <osMessageQueueNew>
 8011102:	4603      	mov	r3, r0
 8011104:	4a2b      	ldr	r2, [pc, #172]	@ (80111b4 <MX_FREERTOS_Init+0xd8>)
 8011106:	6013      	str	r3, [r2, #0]

  /* creation of outputReadQ */
  outputReadQHandle = osMessageQueueNew (1, sizeof(outputs_state_t), &outputReadQ_attributes);
 8011108:	4a2b      	ldr	r2, [pc, #172]	@ (80111b8 <MX_FREERTOS_Init+0xdc>)
 801110a:	2103      	movs	r1, #3
 801110c:	2001      	movs	r0, #1
 801110e:	f008 f925 	bl	801935c <osMessageQueueNew>
 8011112:	4603      	mov	r3, r0
 8011114:	4a29      	ldr	r2, [pc, #164]	@ (80111bc <MX_FREERTOS_Init+0xe0>)
 8011116:	6013      	str	r3, [r2, #0]

  /* creation of outputWriteQ */
  outputWriteQHandle = osMessageQueueNew (1, sizeof(outputs_state_t), &outputWriteQ_attributes);
 8011118:	4a29      	ldr	r2, [pc, #164]	@ (80111c0 <MX_FREERTOS_Init+0xe4>)
 801111a:	2103      	movs	r1, #3
 801111c:	2001      	movs	r0, #1
 801111e:	f008 f91d 	bl	801935c <osMessageQueueNew>
 8011122:	4603      	mov	r3, r0
 8011124:	4a27      	ldr	r2, [pc, #156]	@ (80111c4 <MX_FREERTOS_Init+0xe8>)
 8011126:	6013      	str	r3, [r2, #0]

  /* creation of mqttQ */
  mqttQHandle = osMessageQueueNew (1, sizeof(MQTT_cred_struct), &mqttQ_attributes);
 8011128:	4a27      	ldr	r2, [pc, #156]	@ (80111c8 <MX_FREERTOS_Init+0xec>)
 801112a:	21c6      	movs	r1, #198	@ 0xc6
 801112c:	2001      	movs	r0, #1
 801112e:	f008 f915 	bl	801935c <osMessageQueueNew>
 8011132:	4603      	mov	r3, r0
 8011134:	4a25      	ldr	r2, [pc, #148]	@ (80111cc <MX_FREERTOS_Init+0xf0>)
 8011136:	6013      	str	r3, [r2, #0]

  /* creation of loggingQ */
  loggingQHandle = osMessageQueueNew (15, sizeof(log_message_t), &loggingQ_attributes);
 8011138:	4a25      	ldr	r2, [pc, #148]	@ (80111d0 <MX_FREERTOS_Init+0xf4>)
 801113a:	f44f 7181 	mov.w	r1, #258	@ 0x102
 801113e:	200f      	movs	r0, #15
 8011140:	f008 f90c 	bl	801935c <osMessageQueueNew>
 8011144:	4603      	mov	r3, r0
 8011146:	4a23      	ldr	r2, [pc, #140]	@ (80111d4 <MX_FREERTOS_Init+0xf8>)
 8011148:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ethTask */
  ethTaskHandle = osThreadNew(StartEthTask, NULL, &ethTask_attributes);
 801114a:	4a23      	ldr	r2, [pc, #140]	@ (80111d8 <MX_FREERTOS_Init+0xfc>)
 801114c:	2100      	movs	r1, #0
 801114e:	4823      	ldr	r0, [pc, #140]	@ (80111dc <MX_FREERTOS_Init+0x100>)
 8011150:	f007 ff48 	bl	8018fe4 <osThreadNew>
 8011154:	4603      	mov	r3, r0
 8011156:	4a22      	ldr	r2, [pc, #136]	@ (80111e0 <MX_FREERTOS_Init+0x104>)
 8011158:	6013      	str	r3, [r2, #0]

  /* creation of IOTask */
  IOTaskHandle = osThreadNew(StartIOTask, NULL, &IOTask_attributes);
 801115a:	4a22      	ldr	r2, [pc, #136]	@ (80111e4 <MX_FREERTOS_Init+0x108>)
 801115c:	2100      	movs	r1, #0
 801115e:	4822      	ldr	r0, [pc, #136]	@ (80111e8 <MX_FREERTOS_Init+0x10c>)
 8011160:	f007 ff40 	bl	8018fe4 <osThreadNew>
 8011164:	4603      	mov	r3, r0
 8011166:	4a21      	ldr	r2, [pc, #132]	@ (80111ec <MX_FREERTOS_Init+0x110>)
 8011168:	6013      	str	r3, [r2, #0]

  /* creation of displayTask */
  displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
 801116a:	4a21      	ldr	r2, [pc, #132]	@ (80111f0 <MX_FREERTOS_Init+0x114>)
 801116c:	2100      	movs	r1, #0
 801116e:	4821      	ldr	r0, [pc, #132]	@ (80111f4 <MX_FREERTOS_Init+0x118>)
 8011170:	f007 ff38 	bl	8018fe4 <osThreadNew>
 8011174:	4603      	mov	r3, r0
 8011176:	4a20      	ldr	r2, [pc, #128]	@ (80111f8 <MX_FREERTOS_Init+0x11c>)
 8011178:	6013      	str	r3, [r2, #0]

  /* creation of settingsTask */
  settingsTaskHandle = osThreadNew(StartSettingsTask, NULL, &settingsTask_attributes);
 801117a:	4a20      	ldr	r2, [pc, #128]	@ (80111fc <MX_FREERTOS_Init+0x120>)
 801117c:	2100      	movs	r1, #0
 801117e:	4820      	ldr	r0, [pc, #128]	@ (8011200 <MX_FREERTOS_Init+0x124>)
 8011180:	f007 ff30 	bl	8018fe4 <osThreadNew>
 8011184:	4603      	mov	r3, r0
 8011186:	4a1f      	ldr	r2, [pc, #124]	@ (8011204 <MX_FREERTOS_Init+0x128>)
 8011188:	6013      	str	r3, [r2, #0]

  /* creation of loggingTask */
  loggingTaskHandle = osThreadNew(StartLoggingTask, NULL, &loggingTask_attributes);
 801118a:	4a1f      	ldr	r2, [pc, #124]	@ (8011208 <MX_FREERTOS_Init+0x12c>)
 801118c:	2100      	movs	r1, #0
 801118e:	481f      	ldr	r0, [pc, #124]	@ (801120c <MX_FREERTOS_Init+0x130>)
 8011190:	f007 ff28 	bl	8018fe4 <osThreadNew>
 8011194:	4603      	mov	r3, r0
 8011196:	4a1e      	ldr	r2, [pc, #120]	@ (8011210 <MX_FREERTOS_Init+0x134>)
 8011198:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 801119a:	bf00      	nop
 801119c:	bd80      	pop	{r7, pc}
 801119e:	bf00      	nop
 80111a0:	08043708 	.word	0x08043708
 80111a4:	20000a14 	.word	0x20000a14
 80111a8:	08043718 	.word	0x08043718
 80111ac:	20000a18 	.word	0x20000a18
 80111b0:	08043690 	.word	0x08043690
 80111b4:	20000a00 	.word	0x20000a00
 80111b8:	080436a8 	.word	0x080436a8
 80111bc:	20000a04 	.word	0x20000a04
 80111c0:	080436c0 	.word	0x080436c0
 80111c4:	20000a08 	.word	0x20000a08
 80111c8:	080436d8 	.word	0x080436d8
 80111cc:	20000a0c 	.word	0x20000a0c
 80111d0:	080436f0 	.word	0x080436f0
 80111d4:	20000a10 	.word	0x20000a10
 80111d8:	080435dc 	.word	0x080435dc
 80111dc:	08011215 	.word	0x08011215
 80111e0:	200009ec 	.word	0x200009ec
 80111e4:	08043600 	.word	0x08043600
 80111e8:	080114e5 	.word	0x080114e5
 80111ec:	200009f0 	.word	0x200009f0
 80111f0:	08043624 	.word	0x08043624
 80111f4:	080116ad 	.word	0x080116ad
 80111f8:	200009f4 	.word	0x200009f4
 80111fc:	08043648 	.word	0x08043648
 8011200:	080118dd 	.word	0x080118dd
 8011204:	200009f8 	.word	0x200009f8
 8011208:	0804366c 	.word	0x0804366c
 801120c:	08011a45 	.word	0x08011a45
 8011210:	200009fc 	.word	0x200009fc

08011214 <StartEthTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEthTask */
void StartEthTask(void *argument)
{
 8011214:	b590      	push	{r4, r7, lr}
 8011216:	b0f1      	sub	sp, #452	@ 0x1c4
 8011218:	af02      	add	r7, sp, #8
 801121a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801121e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8011222:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartEthTask */
  void 		           *web_handler;
  struct 			   mg_mgr mgr; // Initialise
  MQTT_cred_struct	   mqtt_conf;
  struct mg_connection *mqtt_conn;
  struct               mg_tcpip_spi spi = {
 8011224:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8011228:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 801122c:	4aa0      	ldr	r2, [pc, #640]	@ (80114b0 <StartEthTask+0x29c>)
 801122e:	461c      	mov	r4, r3
 8011230:	4613      	mov	r3, r2
 8011232:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011234:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
											  .begin = EthBegin,
											  .end = EthEnd,
											  .txn = EthTxn,
											  .spi = &hspi2,
										  };
  struct              mg_tcpip_if   mif = {
 8011238:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801123c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8011240:	4618      	mov	r0, r3
 8011242:	2380      	movs	r3, #128	@ 0x80
 8011244:	461a      	mov	r2, r3
 8011246:	2100      	movs	r1, #0
 8011248:	f024 fdd2 	bl	8035df0 <memset>
 801124c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8011250:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8011254:	2240      	movs	r2, #64	@ 0x40
 8011256:	701a      	strb	r2, [r3, #0]
 8011258:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801125c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8011260:	2222      	movs	r2, #34	@ 0x22
 8011262:	705a      	strb	r2, [r3, #1]
											  .mac = {
													  0x40,
													  0x22,
													  *(uint8_t*)(UID_BASE),
 8011264:	4b93      	ldr	r3, [pc, #588]	@ (80114b4 <StartEthTask+0x2a0>)
 8011266:	781a      	ldrb	r2, [r3, #0]
  struct              mg_tcpip_if   mif = {
 8011268:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801126c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8011270:	709a      	strb	r2, [r3, #2]
													  *(uint8_t*)(UID_BASE + 0x02),
 8011272:	4b91      	ldr	r3, [pc, #580]	@ (80114b8 <StartEthTask+0x2a4>)
 8011274:	781a      	ldrb	r2, [r3, #0]
  struct              mg_tcpip_if   mif = {
 8011276:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801127a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 801127e:	70da      	strb	r2, [r3, #3]
													  *(uint8_t*)(UID_BASE + 0x04),
 8011280:	4b8e      	ldr	r3, [pc, #568]	@ (80114bc <StartEthTask+0x2a8>)
 8011282:	781a      	ldrb	r2, [r3, #0]
  struct              mg_tcpip_if   mif = {
 8011284:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8011288:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 801128c:	711a      	strb	r2, [r3, #4]
													  *(uint8_t*)(UID_BASE + 0x08)
 801128e:	4b8c      	ldr	r3, [pc, #560]	@ (80114c0 <StartEthTask+0x2ac>)
 8011290:	781a      	ldrb	r2, [r3, #0]
  struct              mg_tcpip_if   mif = {
 8011292:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8011296:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 801129a:	715a      	strb	r2, [r3, #5]
 801129c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80112a0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80112a4:	2201      	movs	r2, #1
 80112a6:	77da      	strb	r2, [r3, #31]
 80112a8:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80112ac:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80112b0:	2201      	movs	r2, #1
 80112b2:	f883 2020 	strb.w	r2, [r3, #32]
 80112b6:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80112ba:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80112be:	4a81      	ldr	r2, [pc, #516]	@ (80114c4 <StartEthTask+0x2b0>)
 80112c0:	625a      	str	r2, [r3, #36]	@ 0x24
 80112c2:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80112c6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80112ca:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 80112ce:	629a      	str	r2, [r3, #40]	@ 0x28
											  .enable_req_sntp = true,
											  .driver = &mg_tcpip_driver_w5500,
											  .driver_data = &spi
										  };

  mg_full_info.mgr =  &mgr;
 80112d0:	4a7d      	ldr	r2, [pc, #500]	@ (80114c8 <StartEthTask+0x2b4>)
 80112d2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80112d6:	6013      	str	r3, [r2, #0]
  mg_full_info.mgr_if =  &mif;
 80112d8:	4a7b      	ldr	r2, [pc, #492]	@ (80114c8 <StartEthTask+0x2b4>)
 80112da:	f107 0308 	add.w	r3, r7, #8
 80112de:	6053      	str	r3, [r2, #4]



  mg_mgr_init(&mgr);        // Mongoose event manager
 80112e0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80112e4:	4618      	mov	r0, r3
 80112e6:	f01c fd3b 	bl	802dd60 <mg_mgr_init>
  mg_log_set(MG_LL_DEBUG);  // Set log level
 80112ea:	4b78      	ldr	r3, [pc, #480]	@ (80114cc <StartEthTask+0x2b8>)
 80112ec:	2203      	movs	r2, #3
 80112ee:	601a      	str	r2, [r3, #0]

  web_handler = dash_hdl(); // Get dashboard handler
 80112f0:	f002 fd20 	bl	8013d34 <dash_hdl>
 80112f4:	f8c7 01b0 	str.w	r0, [r7, #432]	@ 0x1b0

  while(mif.mtu == 0){
 80112f8:	e013      	b.n	8011322 <StartEthTask+0x10e>
	  EthResetBegin();
 80112fa:	f000 fc7d 	bl	8011bf8 <EthResetBegin>
	  osDelay(500);
 80112fe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011302:	f007 ff02 	bl	801910a <osDelay>
	  EthResetEnd();
 8011306:	f000 fc83 	bl	8011c10 <EthResetEnd>
	  osDelay(2000);
 801130a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 801130e:	f007 fefc 	bl	801910a <osDelay>
	  mg_tcpip_init(&mgr, &mif);  // Initialize TCP/IP stack
 8011312:	f107 0208 	add.w	r2, r7, #8
 8011316:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 801131a:	4611      	mov	r1, r2
 801131c:	4618      	mov	r0, r3
 801131e:	f01f faa7 	bl	8030870 <mg_tcpip_init>
  while(mif.mtu == 0){
 8011322:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8011326:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 801132a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 801132e:	2b00      	cmp	r3, #0
 8011330:	d0e3      	beq.n	80112fa <StartEthTask+0xe6>
  }
  set_device_id(mif.mac, sizeof(mif.mac));
 8011332:	f107 0308 	add.w	r3, r7, #8
 8011336:	2106      	movs	r1, #6
 8011338:	4618      	mov	r0, r3
 801133a:	f003 fa35 	bl	80147a8 <set_device_id>
  reg_parameter_handler(RW_parameters_from_queue);
 801133e:	4864      	ldr	r0, [pc, #400]	@ (80114d0 <StartEthTask+0x2bc>)
 8011340:	f002 fd02 	bl	8013d48 <reg_parameter_handler>
  mg_http_listen(&mgr, "http://0.0.0.0:80", web_handler, &mg_full_info);
 8011344:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8011348:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 801134c:	4b5e      	ldr	r3, [pc, #376]	@ (80114c8 <StartEthTask+0x2b4>)
 801134e:	4961      	ldr	r1, [pc, #388]	@ (80114d4 <StartEthTask+0x2c0>)
 8011350:	f018 ff1e 	bl	802a190 <mg_http_listen>

  while (mif.state != MG_TCPIP_STATE_READY) {
 8011354:	e008      	b.n	8011368 <StartEthTask+0x154>
    mg_mgr_poll(&mgr, 1);
 8011356:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 801135a:	2101      	movs	r1, #1
 801135c:	4618      	mov	r0, r3
 801135e:	f01f fd9b 	bl	8030e98 <mg_mgr_poll>
    osDelay(1);
 8011362:	2001      	movs	r0, #1
 8011364:	f007 fed1 	bl	801910a <osDelay>
  while (mif.state != MG_TCPIP_STATE_READY) {
 8011368:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801136c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8011370:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8011374:	2b03      	cmp	r3, #3
 8011376:	d1ee      	bne.n	8011356 <StartEthTask+0x142>
  }

  logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011378:	4b53      	ldr	r3, [pc, #332]	@ (80114c8 <StartEthTask+0x2b4>)
 801137a:	685b      	ldr	r3, [r3, #4]
 801137c:	689b      	ldr	r3, [r3, #8]
 801137e:	b2d9      	uxtb	r1, r3
 8011380:	4b51      	ldr	r3, [pc, #324]	@ (80114c8 <StartEthTask+0x2b4>)
 8011382:	685b      	ldr	r3, [r3, #4]
 8011384:	689b      	ldr	r3, [r3, #8]
 8011386:	0a1b      	lsrs	r3, r3, #8
 8011388:	b2d8      	uxtb	r0, r3
			(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 801138a:	4b4f      	ldr	r3, [pc, #316]	@ (80114c8 <StartEthTask+0x2b4>)
 801138c:	685b      	ldr	r3, [r3, #4]
 801138e:	689b      	ldr	r3, [r3, #8]
 8011390:	0c1b      	lsrs	r3, r3, #16
  logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011392:	b2db      	uxtb	r3, r3
			(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 8011394:	4a4c      	ldr	r2, [pc, #304]	@ (80114c8 <StartEthTask+0x2b4>)
 8011396:	6852      	ldr	r2, [r2, #4]
 8011398:	6892      	ldr	r2, [r2, #8]
 801139a:	0e12      	lsrs	r2, r2, #24
  logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 801139c:	9201      	str	r2, [sp, #4]
 801139e:	9300      	str	r3, [sp, #0]
 80113a0:	4603      	mov	r3, r0
 80113a2:	460a      	mov	r2, r1
 80113a4:	494c      	ldr	r1, [pc, #304]	@ (80114d8 <StartEthTask+0x2c4>)
 80113a6:	2001      	movs	r0, #1
 80113a8:	f000 fed0 	bl	801214c <logging>

  RW_parameters_from_queue(&mqtt_conf, S_MQTT, S_READ);
 80113ac:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80113b0:	2200      	movs	r2, #0
 80113b2:	2100      	movs	r1, #0
 80113b4:	4618      	mov	r0, r3
 80113b6:	f000 fcf3 	bl	8011da0 <RW_parameters_from_queue>
  if (mqtt_conf.enable){
 80113ba:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80113be:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80113c2:	785b      	ldrb	r3, [r3, #1]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d018      	beq.n	80113fa <StartEthTask+0x1e6>
	  logging(L_INFO, "MQTT function enabled.");
 80113c8:	4944      	ldr	r1, [pc, #272]	@ (80114dc <StartEthTask+0x2c8>)
 80113ca:	2001      	movs	r0, #1
 80113cc:	f000 febe 	bl	801214c <logging>
	  mqtt_init(&mgr, &mif, mqtt_conf.uri, mqtt_conf.login, mqtt_conf.pass, RW_parameters_from_queue);
 80113d0:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80113d4:	f103 0484 	add.w	r4, r3, #132	@ 0x84
 80113d8:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80113dc:	1c9a      	adds	r2, r3, #2
 80113de:	f107 0108 	add.w	r1, r7, #8
 80113e2:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 80113e6:	4b3a      	ldr	r3, [pc, #232]	@ (80114d0 <StartEthTask+0x2bc>)
 80113e8:	9301      	str	r3, [sp, #4]
 80113ea:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80113ee:	33a5      	adds	r3, #165	@ 0xa5
 80113f0:	9300      	str	r3, [sp, #0]
 80113f2:	4623      	mov	r3, r4
 80113f4:	f003 f8e2 	bl	80145bc <mqtt_init>
 80113f8:	e003      	b.n	8011402 <StartEthTask+0x1ee>
  }else{
	  logging(L_INFO, "MQTT function disabled");
 80113fa:	4939      	ldr	r1, [pc, #228]	@ (80114e0 <StartEthTask+0x2cc>)
 80113fc:	2001      	movs	r0, #1
 80113fe:	f000 fea5 	bl	801214c <logging>
  }
  start_sntp(&mgr);
 8011402:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8011406:	4618      	mov	r0, r3
 8011408:	f003 fec4 	bl	8015194 <start_sntp>
  ssdp_start_server(&mgr, &mif);
 801140c:	f107 0208 	add.w	r2, r7, #8
 8011410:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8011414:	4611      	mov	r1, r2
 8011416:	4618      	mov	r0, r3
 8011418:	f004 f852 	bl	80154c0 <ssdp_start_server>
  TickType_t last_tick = xTaskGetTickCount(); // начальное значение тиков
 801141c:	f009 fdee 	bl	801affc <xTaskGetTickCount>
 8011420:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4

  /* Infinite loop */
  for(;;)
  {
	  TickType_t current_tick = xTaskGetTickCount();
 8011424:	f009 fdea 	bl	801affc <xTaskGetTickCount>
 8011428:	f8c7 01ac 	str.w	r0, [r7, #428]	@ 0x1ac
	  uint32_t elapsed_ms = (current_tick - last_tick) * portTICK_PERIOD_MS; // количество миллисекунд, прошедших с последнего вызова
 801142c:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8011430:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8011434:	1ad3      	subs	r3, r2, r3
 8011436:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
	  last_tick = current_tick; // обновляем значение тиков
 801143a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 801143e:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4

	  mg_mgr_poll(&mgr, elapsed_ms); // передаем фактическое время в миллисекундах
 8011442:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8011446:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 801144a:	4611      	mov	r1, r2
 801144c:	4618      	mov	r0, r3
 801144e:	f01f fd23 	bl	8030e98 <mg_mgr_poll>

      while (mif.driver->up(&mif) == false){
 8011452:	e018      	b.n	8011486 <StartEthTask+0x272>
    	  EthResetBegin(); //enable reset state w5500
 8011454:	f000 fbd0 	bl	8011bf8 <EthResetBegin>
    	  osDelay(100);
 8011458:	2064      	movs	r0, #100	@ 0x64
 801145a:	f007 fe56 	bl	801910a <osDelay>
    	  EthResetEnd(); //disable reset state w5500
 801145e:	f000 fbd7 	bl	8011c10 <EthResetEnd>
    	  osDelay(3000);
 8011462:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8011466:	f007 fe50 	bl	801910a <osDelay>
    	  mif.driver->init(&mif);
 801146a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801146e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8011472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	f107 0208 	add.w	r2, r7, #8
 801147a:	4610      	mov	r0, r2
 801147c:	4798      	blx	r3
    	  osDelay(7000);
 801147e:	f641 3058 	movw	r0, #7000	@ 0x1b58
 8011482:	f007 fe42 	bl	801910a <osDelay>
      while (mif.driver->up(&mif) == false){
 8011486:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801148a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 801148e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011490:	68db      	ldr	r3, [r3, #12]
 8011492:	f107 0208 	add.w	r2, r7, #8
 8011496:	4610      	mov	r0, r2
 8011498:	4798      	blx	r3
 801149a:	4603      	mov	r3, r0
 801149c:	f083 0301 	eor.w	r3, r3, #1
 80114a0:	b2db      	uxtb	r3, r3
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d1d6      	bne.n	8011454 <StartEthTask+0x240>
      }
      osDelay(1);
 80114a6:	2001      	movs	r0, #1
 80114a8:	f007 fe2f 	bl	801910a <osDelay>
  {
 80114ac:	e7ba      	b.n	8011424 <StartEthTask+0x210>
 80114ae:	bf00      	nop
 80114b0:	0803f1f0 	.word	0x0803f1f0
 80114b4:	1fff7a10 	.word	0x1fff7a10
 80114b8:	1fff7a12 	.word	0x1fff7a12
 80114bc:	1fff7a14 	.word	0x1fff7a14
 80114c0:	1fff7a18 	.word	0x1fff7a18
 80114c4:	200002a0 	.word	0x200002a0
 80114c8:	200009e4 	.word	0x200009e4
 80114cc:	20000298 	.word	0x20000298
 80114d0:	08011da1 	.word	0x08011da1
 80114d4:	0803f190 	.word	0x0803f190
 80114d8:	0803f1a4 	.word	0x0803f1a4
 80114dc:	0803f1c0 	.word	0x0803f1c0
 80114e0:	0803f1d8 	.word	0x0803f1d8

080114e4 <StartIOTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartIOTask */
void StartIOTask(void *argument)
{
 80114e4:	b590      	push	{r4, r7, lr}
 80114e6:	b091      	sub	sp, #68	@ 0x44
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIOTask */
	uint16_t pinCoils[] = {coil1_Pin, coil2_Pin, coil3_Pin};
 80114ec:	4a69      	ldr	r2, [pc, #420]	@ (8011694 <StartIOTask+0x1b0>)
 80114ee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80114f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80114f6:	6018      	str	r0, [r3, #0]
 80114f8:	3304      	adds	r3, #4
 80114fa:	8019      	strh	r1, [r3, #0]
	GPIO_TypeDef* portCoils[] = {coil1_GPIO_Port, coil2_GPIO_Port, coil3_GPIO_Port};
 80114fc:	4a66      	ldr	r2, [pc, #408]	@ (8011698 <StartIOTask+0x1b4>)
 80114fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011502:	ca07      	ldmia	r2, {r0, r1, r2}
 8011504:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t pinInputs[] = {input1_Pin, input2_Pin, input3_Pin};
 8011508:	4a64      	ldr	r2, [pc, #400]	@ (801169c <StartIOTask+0x1b8>)
 801150a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801150e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011512:	6018      	str	r0, [r3, #0]
 8011514:	3304      	adds	r3, #4
 8011516:	8019      	strh	r1, [r3, #0]
	GPIO_TypeDef* portInputs[] = {input1_GPIO_Port, input2_GPIO_Port, input3_GPIO_Port};
 8011518:	4a5f      	ldr	r2, [pc, #380]	@ (8011698 <StartIOTask+0x1b4>)
 801151a:	f107 0318 	add.w	r3, r7, #24
 801151e:	ca07      	ldmia	r2, {r0, r1, r2}
 8011520:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	}
  /* Infinite loop */
  for(;;)
  {
	 // write outputs
	 if(osMessageQueueGetCount(outputWriteQHandle)){
 8011524:	4b5e      	ldr	r3, [pc, #376]	@ (80116a0 <StartIOTask+0x1bc>)
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	4618      	mov	r0, r3
 801152a:	f008 f849 	bl	80195c0 <osMessageQueueGetCount>
 801152e:	4603      	mov	r3, r0
 8011530:	2b00      	cmp	r3, #0
 8011532:	d041      	beq.n	80115b8 <StartIOTask+0xd4>
		 osMessageQueueGet(outputWriteQHandle, &pinOutputs_w, 0, 0);
 8011534:	4b5a      	ldr	r3, [pc, #360]	@ (80116a0 <StartIOTask+0x1bc>)
 8011536:	6818      	ldr	r0, [r3, #0]
 8011538:	f107 010c 	add.w	r1, r7, #12
 801153c:	2300      	movs	r3, #0
 801153e:	2200      	movs	r2, #0
 8011540:	f007 ffe0 	bl	8019504 <osMessageQueueGet>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 8011544:	2300      	movs	r3, #0
 8011546:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 801154a:	e031      	b.n	80115b0 <StartIOTask+0xcc>
		     if (pinOutputs_w[i]) {
 801154c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011550:	3340      	adds	r3, #64	@ 0x40
 8011552:	443b      	add	r3, r7
 8011554:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8011558:	2b00      	cmp	r3, #0
 801155a:	d012      	beq.n	8011582 <StartIOTask+0x9e>
		         HAL_GPIO_WritePin(portCoils[i], pinCoils[i], GPIO_PIN_SET);
 801155c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011560:	009b      	lsls	r3, r3, #2
 8011562:	3340      	adds	r3, #64	@ 0x40
 8011564:	443b      	add	r3, r7
 8011566:	f853 0c14 	ldr.w	r0, [r3, #-20]
 801156a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801156e:	005b      	lsls	r3, r3, #1
 8011570:	3340      	adds	r3, #64	@ 0x40
 8011572:	443b      	add	r3, r7
 8011574:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 8011578:	2201      	movs	r2, #1
 801157a:	4619      	mov	r1, r3
 801157c:	f004 feca 	bl	8016314 <HAL_GPIO_WritePin>
 8011580:	e011      	b.n	80115a6 <StartIOTask+0xc2>
		     } else {
		         HAL_GPIO_WritePin(portCoils[i], pinCoils[i], GPIO_PIN_RESET);
 8011582:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011586:	009b      	lsls	r3, r3, #2
 8011588:	3340      	adds	r3, #64	@ 0x40
 801158a:	443b      	add	r3, r7
 801158c:	f853 0c14 	ldr.w	r0, [r3, #-20]
 8011590:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011594:	005b      	lsls	r3, r3, #1
 8011596:	3340      	adds	r3, #64	@ 0x40
 8011598:	443b      	add	r3, r7
 801159a:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 801159e:	2200      	movs	r2, #0
 80115a0:	4619      	mov	r1, r3
 80115a2:	f004 feb7 	bl	8016314 <HAL_GPIO_WritePin>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 80115a6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80115aa:	3301      	adds	r3, #1
 80115ac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80115b0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80115b4:	2b02      	cmp	r3, #2
 80115b6:	d9c9      	bls.n	801154c <StartIOTask+0x68>
		     }
		 }
	 }

	 // read outputs status
	for (i = 0; i < OUTPUTS_COUNT; i++) {
 80115b8:	2300      	movs	r3, #0
 80115ba:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80115be:	e01f      	b.n	8011600 <StartIOTask+0x11c>
		pinOutputs_r[i] = (uint8_t)HAL_GPIO_ReadPin(portCoils[i], pinCoils[i]);
 80115c0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80115c4:	009b      	lsls	r3, r3, #2
 80115c6:	3340      	adds	r3, #64	@ 0x40
 80115c8:	443b      	add	r3, r7
 80115ca:	f853 2c14 	ldr.w	r2, [r3, #-20]
 80115ce:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80115d2:	005b      	lsls	r3, r3, #1
 80115d4:	3340      	adds	r3, #64	@ 0x40
 80115d6:	443b      	add	r3, r7
 80115d8:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 80115dc:	f897 403f 	ldrb.w	r4, [r7, #63]	@ 0x3f
 80115e0:	4619      	mov	r1, r3
 80115e2:	4610      	mov	r0, r2
 80115e4:	f004 fe7e 	bl	80162e4 <HAL_GPIO_ReadPin>
 80115e8:	4603      	mov	r3, r0
 80115ea:	461a      	mov	r2, r3
 80115ec:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 80115f0:	443b      	add	r3, r7
 80115f2:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (i = 0; i < OUTPUTS_COUNT; i++) {
 80115f6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80115fa:	3301      	adds	r3, #1
 80115fc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8011600:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011604:	2b02      	cmp	r3, #2
 8011606:	d9db      	bls.n	80115c0 <StartIOTask+0xdc>
	}
	//xQueueOverwrite(outputReadQHandle, &pinOutputs_r);
	osMessageQueueReset(outputReadQHandle);
 8011608:	4b26      	ldr	r3, [pc, #152]	@ (80116a4 <StartIOTask+0x1c0>)
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	4618      	mov	r0, r3
 801160e:	f007 fff7 	bl	8019600 <osMessageQueueReset>
	osMessageQueuePut(outputReadQHandle, &pinOutputs_r, 0, 0);
 8011612:	4b24      	ldr	r3, [pc, #144]	@ (80116a4 <StartIOTask+0x1c0>)
 8011614:	6818      	ldr	r0, [r3, #0]
 8011616:	f107 0110 	add.w	r1, r7, #16
 801161a:	2300      	movs	r3, #0
 801161c:	2200      	movs	r2, #0
 801161e:	f007 ff11 	bl	8019444 <osMessageQueuePut>

	// read inputs status
	for (i = 0; i < INPUTS_COUNT; i++) {
 8011622:	2300      	movs	r3, #0
 8011624:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8011628:	e01f      	b.n	801166a <StartIOTask+0x186>
		pinInputs_r[i] = (uint8_t)HAL_GPIO_ReadPin(portInputs[i], pinInputs[i]);
 801162a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801162e:	009b      	lsls	r3, r3, #2
 8011630:	3340      	adds	r3, #64	@ 0x40
 8011632:	443b      	add	r3, r7
 8011634:	f853 2c28 	ldr.w	r2, [r3, #-40]
 8011638:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801163c:	005b      	lsls	r3, r3, #1
 801163e:	3340      	adds	r3, #64	@ 0x40
 8011640:	443b      	add	r3, r7
 8011642:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8011646:	f897 403f 	ldrb.w	r4, [r7, #63]	@ 0x3f
 801164a:	4619      	mov	r1, r3
 801164c:	4610      	mov	r0, r2
 801164e:	f004 fe49 	bl	80162e4 <HAL_GPIO_ReadPin>
 8011652:	4603      	mov	r3, r0
 8011654:	461a      	mov	r2, r3
 8011656:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 801165a:	443b      	add	r3, r7
 801165c:	f803 2c2c 	strb.w	r2, [r3, #-44]
	for (i = 0; i < INPUTS_COUNT; i++) {
 8011660:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011664:	3301      	adds	r3, #1
 8011666:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 801166a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801166e:	2b02      	cmp	r3, #2
 8011670:	d9db      	bls.n	801162a <StartIOTask+0x146>
	}
	//xQueueOverwrite(inputReadQHandle, &pinInputs_r);
	osMessageQueueReset(inputReadQHandle);
 8011672:	4b0d      	ldr	r3, [pc, #52]	@ (80116a8 <StartIOTask+0x1c4>)
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	4618      	mov	r0, r3
 8011678:	f007 ffc2 	bl	8019600 <osMessageQueueReset>
	osMessageQueuePut(inputReadQHandle, &pinInputs_r, 0, 0);
 801167c:	4b0a      	ldr	r3, [pc, #40]	@ (80116a8 <StartIOTask+0x1c4>)
 801167e:	6818      	ldr	r0, [r3, #0]
 8011680:	f107 0114 	add.w	r1, r7, #20
 8011684:	2300      	movs	r3, #0
 8011686:	2200      	movs	r2, #0
 8011688:	f007 fedc 	bl	8019444 <osMessageQueuePut>

    osDelay(1);
 801168c:	2001      	movs	r0, #1
 801168e:	f007 fd3c 	bl	801910a <osDelay>
	 if(osMessageQueueGetCount(outputWriteQHandle)){
 8011692:	e747      	b.n	8011524 <StartIOTask+0x40>
 8011694:	0803f200 	.word	0x0803f200
 8011698:	0803f208 	.word	0x0803f208
 801169c:	0803f214 	.word	0x0803f214
 80116a0:	20000a08 	.word	0x20000a08
 80116a4:	20000a04 	.word	0x20000a04
 80116a8:	20000a00 	.word	0x20000a00

080116ac <StartDisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument)
{
 80116ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116ae:	b08f      	sub	sp, #60	@ 0x3c
 80116b0:	af04      	add	r7, sp, #16
 80116b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
	uint8_t x,y;
	char buf[20];
	osDelay(1000);//
 80116b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80116b8:	f007 fd27 	bl	801910a <osDelay>

	SSD1306_Init (); // initialise the display
 80116bc:	f007 f950 	bl	8018960 <SSD1306_Init>
	osDelay(100);//
 80116c0:	2064      	movs	r0, #100	@ 0x64
 80116c2:	f007 fd22 	bl	801910a <osDelay>
    SSD1306_GotoXY(x=1,y=0);
 80116c6:	2301      	movs	r3, #1
 80116c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80116cc:	2300      	movs	r3, #0
 80116ce:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80116d2:	2100      	movs	r1, #0
 80116d4:	2001      	movs	r0, #1
 80116d6:	f007 faa3 	bl	8018c20 <SSD1306_GotoXY>
    SSD1306_Fill(SSD1306_COLOR_BLACK);
 80116da:	2000      	movs	r0, #0
 80116dc:	f007 fa28 	bl	8018b30 <SSD1306_Fill>
    SSD1306_Puts("Compiled: ", &Font_7x10, SSD1306_COLOR_WHITE);
 80116e0:	2201      	movs	r2, #1
 80116e2:	4972      	ldr	r1, [pc, #456]	@ (80118ac <StartDisplayTask+0x200>)
 80116e4:	4872      	ldr	r0, [pc, #456]	@ (80118b0 <StartDisplayTask+0x204>)
 80116e6:	f007 fb2f 	bl	8018d48 <SSD1306_Puts>
    //SSD1306_GotoXY(x=1,y=y+11);
    SSD1306_Puts(__TIME__, &Font_7x10, SSD1306_COLOR_WHITE);
 80116ea:	2201      	movs	r2, #1
 80116ec:	496f      	ldr	r1, [pc, #444]	@ (80118ac <StartDisplayTask+0x200>)
 80116ee:	4871      	ldr	r0, [pc, #452]	@ (80118b4 <StartDisplayTask+0x208>)
 80116f0:	f007 fb2a 	bl	8018d48 <SSD1306_Puts>
    SSD1306_GotoXY(x=1,y=y+11);
 80116f4:	2301      	movs	r3, #1
 80116f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80116fa:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80116fe:	330b      	adds	r3, #11
 8011700:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8011704:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011708:	b29b      	uxth	r3, r3
 801170a:	4619      	mov	r1, r3
 801170c:	2001      	movs	r0, #1
 801170e:	f007 fa87 	bl	8018c20 <SSD1306_GotoXY>
    SSD1306_Puts(__DATE__, &Font_7x10, SSD1306_COLOR_WHITE);
 8011712:	2201      	movs	r2, #1
 8011714:	4965      	ldr	r1, [pc, #404]	@ (80118ac <StartDisplayTask+0x200>)
 8011716:	4868      	ldr	r0, [pc, #416]	@ (80118b8 <StartDisplayTask+0x20c>)
 8011718:	f007 fb16 	bl	8018d48 <SSD1306_Puts>
    SSD1306_GotoXY(x=1,y=y+11);
 801171c:	2301      	movs	r3, #1
 801171e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011722:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011726:	330b      	adds	r3, #11
 8011728:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801172c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011730:	b29b      	uxth	r3, r3
 8011732:	4619      	mov	r1, r3
 8011734:	2001      	movs	r0, #1
 8011736:	f007 fa73 	bl	8018c20 <SSD1306_GotoXY>
	SSD1306_Puts("MAC: ", &Font_7x10, SSD1306_COLOR_WHITE);
 801173a:	2201      	movs	r2, #1
 801173c:	495b      	ldr	r1, [pc, #364]	@ (80118ac <StartDisplayTask+0x200>)
 801173e:	485f      	ldr	r0, [pc, #380]	@ (80118bc <StartDisplayTask+0x210>)
 8011740:	f007 fb02 	bl	8018d48 <SSD1306_Puts>
	SSD1306_GotoXY(x=1,y=y+11);
 8011744:	2301      	movs	r3, #1
 8011746:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801174a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801174e:	330b      	adds	r3, #11
 8011750:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8011754:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011758:	b29b      	uxth	r3, r3
 801175a:	4619      	mov	r1, r3
 801175c:	2001      	movs	r0, #1
 801175e:	f007 fa5f 	bl	8018c20 <SSD1306_GotoXY>
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 8011762:	4b57      	ldr	r3, [pc, #348]	@ (80118c0 <StartDisplayTask+0x214>)
 8011764:	685b      	ldr	r3, [r3, #4]
 8011766:	781b      	ldrb	r3, [r3, #0]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 8011768:	461d      	mov	r5, r3
			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 801176a:	4b55      	ldr	r3, [pc, #340]	@ (80118c0 <StartDisplayTask+0x214>)
 801176c:	685b      	ldr	r3, [r3, #4]
 801176e:	785b      	ldrb	r3, [r3, #1]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 8011770:	461e      	mov	r6, r3
			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 8011772:	4b53      	ldr	r3, [pc, #332]	@ (80118c0 <StartDisplayTask+0x214>)
 8011774:	685b      	ldr	r3, [r3, #4]
 8011776:	789b      	ldrb	r3, [r3, #2]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 8011778:	461a      	mov	r2, r3
			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 801177a:	4b51      	ldr	r3, [pc, #324]	@ (80118c0 <StartDisplayTask+0x214>)
 801177c:	685b      	ldr	r3, [r3, #4]
 801177e:	78db      	ldrb	r3, [r3, #3]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 8011780:	4619      	mov	r1, r3
			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 8011782:	4b4f      	ldr	r3, [pc, #316]	@ (80118c0 <StartDisplayTask+0x214>)
 8011784:	685b      	ldr	r3, [r3, #4]
 8011786:	791b      	ldrb	r3, [r3, #4]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 8011788:	461c      	mov	r4, r3
			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 801178a:	4b4d      	ldr	r3, [pc, #308]	@ (80118c0 <StartDisplayTask+0x214>)
 801178c:	685b      	ldr	r3, [r3, #4]
 801178e:	795b      	ldrb	r3, [r3, #5]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 8011790:	f107 000c 	add.w	r0, r7, #12
 8011794:	9303      	str	r3, [sp, #12]
 8011796:	9402      	str	r4, [sp, #8]
 8011798:	9101      	str	r1, [sp, #4]
 801179a:	9200      	str	r2, [sp, #0]
 801179c:	4633      	mov	r3, r6
 801179e:	462a      	mov	r2, r5
 80117a0:	4948      	ldr	r1, [pc, #288]	@ (80118c4 <StartDisplayTask+0x218>)
 80117a2:	f023 ff63 	bl	803566c <sprintf>
	SSD1306_Puts((char *)buf, &Font_7x10, SSD1306_COLOR_WHITE);
 80117a6:	f107 030c 	add.w	r3, r7, #12
 80117aa:	2201      	movs	r2, #1
 80117ac:	493f      	ldr	r1, [pc, #252]	@ (80118ac <StartDisplayTask+0x200>)
 80117ae:	4618      	mov	r0, r3
 80117b0:	f007 faca 	bl	8018d48 <SSD1306_Puts>

    SSD1306_UpdateScreen();
 80117b4:	f007 f98e 	bl	8018ad4 <SSD1306_UpdateScreen>
    vTaskDelay(3000);
 80117b8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80117bc:	f009 facc 	bl	801ad58 <vTaskDelay>
    int i=0;
 80117c0:	2300      	movs	r3, #0
 80117c2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Infinite loop */
  for(;;)
  {
		SSD1306_GotoXY(x=1,y=0);
 80117c4:	2301      	movs	r3, #1
 80117c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80117ca:	2300      	movs	r3, #0
 80117cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80117d0:	2100      	movs	r1, #0
 80117d2:	2001      	movs	r0, #1
 80117d4:	f007 fa24 	bl	8018c20 <SSD1306_GotoXY>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 80117d8:	2000      	movs	r0, #0
 80117da:	f007 f9a9 	bl	8018b30 <SSD1306_Fill>
		SSD1306_Puts("IP:", &Font_7x10, SSD1306_COLOR_WHITE);
 80117de:	2201      	movs	r2, #1
 80117e0:	4932      	ldr	r1, [pc, #200]	@ (80118ac <StartDisplayTask+0x200>)
 80117e2:	4839      	ldr	r0, [pc, #228]	@ (80118c8 <StartDisplayTask+0x21c>)
 80117e4:	f007 fab0 	bl	8018d48 <SSD1306_Puts>
	    sprintf(buf,"%lu.%lu.%lu.%lu",
	    		(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 80117e8:	4b35      	ldr	r3, [pc, #212]	@ (80118c0 <StartDisplayTask+0x214>)
 80117ea:	685b      	ldr	r3, [r3, #4]
 80117ec:	689b      	ldr	r3, [r3, #8]
	    sprintf(buf,"%lu.%lu.%lu.%lu",
 80117ee:	b2d9      	uxtb	r1, r3
	    		(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 80117f0:	4b33      	ldr	r3, [pc, #204]	@ (80118c0 <StartDisplayTask+0x214>)
 80117f2:	685b      	ldr	r3, [r3, #4]
 80117f4:	689b      	ldr	r3, [r3, #8]
 80117f6:	0a1b      	lsrs	r3, r3, #8
	    sprintf(buf,"%lu.%lu.%lu.%lu",
 80117f8:	b2dc      	uxtb	r4, r3
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 80117fa:	4b31      	ldr	r3, [pc, #196]	@ (80118c0 <StartDisplayTask+0x214>)
 80117fc:	685b      	ldr	r3, [r3, #4]
 80117fe:	689b      	ldr	r3, [r3, #8]
 8011800:	0c1b      	lsrs	r3, r3, #16
	    sprintf(buf,"%lu.%lu.%lu.%lu",
 8011802:	b2db      	uxtb	r3, r3
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 8011804:	4a2e      	ldr	r2, [pc, #184]	@ (80118c0 <StartDisplayTask+0x214>)
 8011806:	6852      	ldr	r2, [r2, #4]
 8011808:	6892      	ldr	r2, [r2, #8]
 801180a:	0e12      	lsrs	r2, r2, #24
	    sprintf(buf,"%lu.%lu.%lu.%lu",
 801180c:	f107 000c 	add.w	r0, r7, #12
 8011810:	9201      	str	r2, [sp, #4]
 8011812:	9300      	str	r3, [sp, #0]
 8011814:	4623      	mov	r3, r4
 8011816:	460a      	mov	r2, r1
 8011818:	492c      	ldr	r1, [pc, #176]	@ (80118cc <StartDisplayTask+0x220>)
 801181a:	f023 ff27 	bl	803566c <sprintf>
	    SSD1306_Puts(buf, &Font_7x10, SSD1306_COLOR_WHITE);
 801181e:	f107 030c 	add.w	r3, r7, #12
 8011822:	2201      	movs	r2, #1
 8011824:	4921      	ldr	r1, [pc, #132]	@ (80118ac <StartDisplayTask+0x200>)
 8011826:	4618      	mov	r0, r3
 8011828:	f007 fa8e 	bl	8018d48 <SSD1306_Puts>
	    SSD1306_GotoXY(x=1,y=10);
 801182c:	2301      	movs	r3, #1
 801182e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011832:	230a      	movs	r3, #10
 8011834:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8011838:	210a      	movs	r1, #10
 801183a:	2001      	movs	r0, #1
 801183c:	f007 f9f0 	bl	8018c20 <SSD1306_GotoXY>
	    SSD1306_Puts("I=", &Font_7x10, SSD1306_COLOR_WHITE);
 8011840:	2201      	movs	r2, #1
 8011842:	491a      	ldr	r1, [pc, #104]	@ (80118ac <StartDisplayTask+0x200>)
 8011844:	4822      	ldr	r0, [pc, #136]	@ (80118d0 <StartDisplayTask+0x224>)
 8011846:	f007 fa7f 	bl	8018d48 <SSD1306_Puts>
	    sprintf(buf,"%d", ++i);
 801184a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801184c:	3301      	adds	r3, #1
 801184e:	627b      	str	r3, [r7, #36]	@ 0x24
 8011850:	f107 030c 	add.w	r3, r7, #12
 8011854:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011856:	491f      	ldr	r1, [pc, #124]	@ (80118d4 <StartDisplayTask+0x228>)
 8011858:	4618      	mov	r0, r3
 801185a:	f023 ff07 	bl	803566c <sprintf>
	    SSD1306_Puts(buf, &Font_7x10, SSD1306_COLOR_WHITE);
 801185e:	f107 030c 	add.w	r3, r7, #12
 8011862:	2201      	movs	r2, #1
 8011864:	4911      	ldr	r1, [pc, #68]	@ (80118ac <StartDisplayTask+0x200>)
 8011866:	4618      	mov	r0, r3
 8011868:	f007 fa6e 	bl	8018d48 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 801186c:	f007 f932 	bl	8018ad4 <SSD1306_UpdateScreen>

		if(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 1000) != HAL_OK){
 8011870:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011874:	2201      	movs	r2, #1
 8011876:	2178      	movs	r1, #120	@ 0x78
 8011878:	4817      	ldr	r0, [pc, #92]	@ (80118d8 <StartDisplayTask+0x22c>)
 801187a:	f004 ffd7 	bl	801682c <HAL_I2C_IsDeviceReady>
 801187e:	4603      	mov	r3, r0
 8011880:	2b00      	cmp	r3, #0
 8011882:	d00e      	beq.n	80118a2 <StartDisplayTask+0x1f6>
			HAL_I2C_DeInit(&hi2c1);
 8011884:	4814      	ldr	r0, [pc, #80]	@ (80118d8 <StartDisplayTask+0x22c>)
 8011886:	f004 fea3 	bl	80165d0 <HAL_I2C_DeInit>
			vTaskDelay(1000);
 801188a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801188e:	f009 fa63 	bl	801ad58 <vTaskDelay>
			MX_I2C1_Init();
 8011892:	f000 fb85 	bl	8011fa0 <MX_I2C1_Init>
			vTaskDelay(1000);
 8011896:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801189a:	f009 fa5d 	bl	801ad58 <vTaskDelay>
			SSD1306_Init ();
 801189e:	f007 f85f 	bl	8018960 <SSD1306_Init>
		}
		osDelay(1000);
 80118a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80118a6:	f007 fc30 	bl	801910a <osDelay>
		SSD1306_GotoXY(x=1,y=0);
 80118aa:	e78b      	b.n	80117c4 <StartDisplayTask+0x118>
 80118ac:	2000007c 	.word	0x2000007c
 80118b0:	0803f21c 	.word	0x0803f21c
 80118b4:	0803f228 	.word	0x0803f228
 80118b8:	0803f234 	.word	0x0803f234
 80118bc:	0803f240 	.word	0x0803f240
 80118c0:	200009e4 	.word	0x200009e4
 80118c4:	0803f248 	.word	0x0803f248
 80118c8:	0803f268 	.word	0x0803f268
 80118cc:	0803f26c 	.word	0x0803f26c
 80118d0:	0803f27c 	.word	0x0803f27c
 80118d4:	0803f280 	.word	0x0803f280
 80118d8:	20000a1c 	.word	0x20000a1c

080118dc <StartSettingsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSettingsTask */
void StartSettingsTask(void *argument)
{
 80118dc:	b580      	push	{r7, lr}
 80118de:	b0b6      	sub	sp, #216	@ 0xd8
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSettingsTask */
	size_t  f_size = 0;
 80118e4:	2300      	movs	r3, #0
 80118e6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	void *  f_pointer = NULL;
 80118ea:	2300      	movs	r3, #0
 80118ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

	MQTT_cred_struct mqtt_config;

  SPI_flash_reg_cb(FlashBegin, FlashEnd, RecvBuffSPI2, SendByteSPI2);
 80118f0:	4b46      	ldr	r3, [pc, #280]	@ (8011a0c <StartSettingsTask+0x130>)
 80118f2:	4a47      	ldr	r2, [pc, #284]	@ (8011a10 <StartSettingsTask+0x134>)
 80118f4:	4947      	ldr	r1, [pc, #284]	@ (8011a14 <StartSettingsTask+0x138>)
 80118f6:	4848      	ldr	r0, [pc, #288]	@ (8011a18 <StartSettingsTask+0x13c>)
 80118f8:	f003 fe30 	bl	801555c <SPI_flash_reg_cb>
  if (lfs_fs_ll_init(FS_Lock, FS_Unlock) < 0){
 80118fc:	4947      	ldr	r1, [pc, #284]	@ (8011a1c <StartSettingsTask+0x140>)
 80118fe:	4848      	ldr	r0, [pc, #288]	@ (8011a20 <StartSettingsTask+0x144>)
 8011900:	f00b fa52 	bl	801cda8 <lfs_fs_ll_init>
 8011904:	4603      	mov	r3, r0
 8011906:	2b00      	cmp	r3, #0
 8011908:	da01      	bge.n	801190e <StartSettingsTask+0x32>
	  HAL_NVIC_SystemReset();
 801190a:	f004 fa7e 	bl	8015e0a <HAL_NVIC_SystemReset>
  }

  mg_fs_lfs_mkdir("/web");
 801190e:	4845      	ldr	r0, [pc, #276]	@ (8011a24 <StartSettingsTask+0x148>)
 8011910:	f00b fa36 	bl	801cd80 <mg_fs_lfs_mkdir>
  mg_fs_lfs_remove("/firmware");
 8011914:	4844      	ldr	r0, [pc, #272]	@ (8011a28 <StartSettingsTask+0x14c>)
 8011916:	f00b fa1f 	bl	801cd58 <mg_fs_lfs_remove>
  mg_fs_lfs_remove("/firmware.bin");
 801191a:	4844      	ldr	r0, [pc, #272]	@ (8011a2c <StartSettingsTask+0x150>)
 801191c:	f00b fa1c 	bl	801cd58 <mg_fs_lfs_remove>
  mg_fs_lfs_mkdir("/firmware");
 8011920:	4841      	ldr	r0, [pc, #260]	@ (8011a28 <StartSettingsTask+0x14c>)
 8011922:	f00b fa2d 	bl	801cd80 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/settings");
 8011926:	4842      	ldr	r0, [pc, #264]	@ (8011a30 <StartSettingsTask+0x154>)
 8011928:	f00b fa2a 	bl	801cd80 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/certs");
 801192c:	4841      	ldr	r0, [pc, #260]	@ (8011a34 <StartSettingsTask+0x158>)
 801192e:	f00b fa27 	bl	801cd80 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/log");
 8011932:	4841      	ldr	r0, [pc, #260]	@ (8011a38 <StartSettingsTask+0x15c>)
 8011934:	f00b fa24 	bl	801cd80 <mg_fs_lfs_mkdir>



  if (mg_fs_lfs_status("/settings/mqtt.conf", &f_size, NULL)){//file found
 8011938:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 801193c:	2200      	movs	r2, #0
 801193e:	4619      	mov	r1, r3
 8011940:	483e      	ldr	r0, [pc, #248]	@ (8011a3c <StartSettingsTask+0x160>)
 8011942:	f00b f8b1 	bl	801caa8 <mg_fs_lfs_status>
 8011946:	4603      	mov	r3, r0
 8011948:	2b00      	cmp	r3, #0
 801194a:	d01c      	beq.n	8011986 <StartSettingsTask+0xaa>
	  f_pointer = mg_fs_lfs_open("/settings/mqtt.conf", MG_FS_READ);
 801194c:	2101      	movs	r1, #1
 801194e:	483b      	ldr	r0, [pc, #236]	@ (8011a3c <StartSettingsTask+0x160>)
 8011950:	f00b f948 	bl	801cbe4 <mg_fs_lfs_open>
 8011954:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
	  mg_fs_lfs_read(f_pointer, &mqtt_config, sizeof(mqtt_config));
 8011958:	f107 0308 	add.w	r3, r7, #8
 801195c:	22c6      	movs	r2, #198	@ 0xc6
 801195e:	4619      	mov	r1, r3
 8011960:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8011964:	f00b f98c 	bl	801cc80 <mg_fs_lfs_read>
	  mg_fs_lfs_close(f_pointer);
 8011968:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 801196c:	f00b f974 	bl	801cc58 <mg_fs_lfs_close>
	  mqtt_config.save = 0;
 8011970:	2300      	movs	r3, #0
 8011972:	723b      	strb	r3, [r7, #8]
	  xQueueOverwrite(mqttQHandle, &mqtt_config);
 8011974:	4b32      	ldr	r3, [pc, #200]	@ (8011a40 <StartSettingsTask+0x164>)
 8011976:	6818      	ldr	r0, [r3, #0]
 8011978:	f107 0108 	add.w	r1, r7, #8
 801197c:	2302      	movs	r3, #2
 801197e:	2200      	movs	r2, #0
 8011980:	f008 f946 	bl	8019c10 <xQueueGenericSend>
 8011984:	e00e      	b.n	80119a4 <StartSettingsTask+0xc8>
  }else{
	  memset(&mqtt_config, 0, sizeof(mqtt_config));
 8011986:	f107 0308 	add.w	r3, r7, #8
 801198a:	22c6      	movs	r2, #198	@ 0xc6
 801198c:	2100      	movs	r1, #0
 801198e:	4618      	mov	r0, r3
 8011990:	f024 fa2e 	bl	8035df0 <memset>
	  xQueueOverwrite(mqttQHandle, &mqtt_config);
 8011994:	4b2a      	ldr	r3, [pc, #168]	@ (8011a40 <StartSettingsTask+0x164>)
 8011996:	6818      	ldr	r0, [r3, #0]
 8011998:	f107 0108 	add.w	r1, r7, #8
 801199c:	2302      	movs	r3, #2
 801199e:	2200      	movs	r2, #0
 80119a0:	f008 f936 	bl	8019c10 <xQueueGenericSend>


  /* Infinite loop */
  for(;;)
  {
	  xQueuePeek(mqttQHandle, &mqtt_config, 0);
 80119a4:	4b26      	ldr	r3, [pc, #152]	@ (8011a40 <StartSettingsTask+0x164>)
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	f107 0108 	add.w	r1, r7, #8
 80119ac:	2200      	movs	r2, #0
 80119ae:	4618      	mov	r0, r3
 80119b0:	f008 fcc0 	bl	801a334 <xQueuePeek>
	  if(mqtt_config.save){
 80119b4:	7a3b      	ldrb	r3, [r7, #8]
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d022      	beq.n	8011a00 <StartSettingsTask+0x124>
		  mg_fs_lfs_remove("/settings/mqtt.conf");
 80119ba:	4820      	ldr	r0, [pc, #128]	@ (8011a3c <StartSettingsTask+0x160>)
 80119bc:	f00b f9cc 	bl	801cd58 <mg_fs_lfs_remove>
		  if((f_pointer = mg_fs_lfs_open("/settings/mqtt.conf", MG_FS_WRITE))){
 80119c0:	2102      	movs	r1, #2
 80119c2:	481e      	ldr	r0, [pc, #120]	@ (8011a3c <StartSettingsTask+0x160>)
 80119c4:	f00b f90e 	bl	801cbe4 <mg_fs_lfs_open>
 80119c8:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
 80119cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d015      	beq.n	8011a00 <StartSettingsTask+0x124>
			  //mg_fs_lfs_seek(f_pointer, 0);
			  mg_fs_lfs_write(f_pointer, &mqtt_config, sizeof(mqtt_config));
 80119d4:	f107 0308 	add.w	r3, r7, #8
 80119d8:	22c6      	movs	r2, #198	@ 0xc6
 80119da:	4619      	mov	r1, r3
 80119dc:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 80119e0:	f00b f966 	bl	801ccb0 <mg_fs_lfs_write>
			  mg_fs_lfs_close(f_pointer);
 80119e4:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 80119e8:	f00b f936 	bl	801cc58 <mg_fs_lfs_close>
			  mqtt_config.save = 0;
 80119ec:	2300      	movs	r3, #0
 80119ee:	723b      	strb	r3, [r7, #8]
			  xQueueOverwrite(mqttQHandle, &mqtt_config);
 80119f0:	4b13      	ldr	r3, [pc, #76]	@ (8011a40 <StartSettingsTask+0x164>)
 80119f2:	6818      	ldr	r0, [r3, #0]
 80119f4:	f107 0108 	add.w	r1, r7, #8
 80119f8:	2302      	movs	r3, #2
 80119fa:	2200      	movs	r2, #0
 80119fc:	f008 f908 	bl	8019c10 <xQueueGenericSend>
		  }
	  }

    osDelay(1000);
 8011a00:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011a04:	f007 fb81 	bl	801910a <osDelay>
	  xQueuePeek(mqttQHandle, &mqtt_config, 0);
 8011a08:	e7cc      	b.n	80119a4 <StartSettingsTask+0xc8>
 8011a0a:	bf00      	nop
 8011a0c:	08011d11 	.word	0x08011d11
 8011a10:	08011d35 	.word	0x08011d35
 8011a14:	08011ce9 	.word	0x08011ce9
 8011a18:	08011cbd 	.word	0x08011cbd
 8011a1c:	08011d81 	.word	0x08011d81
 8011a20:	08011d5d 	.word	0x08011d5d
 8011a24:	0803f284 	.word	0x0803f284
 8011a28:	0803f28c 	.word	0x0803f28c
 8011a2c:	0803f298 	.word	0x0803f298
 8011a30:	0803f2a8 	.word	0x0803f2a8
 8011a34:	0803f2b4 	.word	0x0803f2b4
 8011a38:	0803f2bc 	.word	0x0803f2bc
 8011a3c:	0803f2c4 	.word	0x0803f2c4
 8011a40:	20000a0c 	.word	0x20000a0c

08011a44 <StartLoggingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLoggingTask */
void StartLoggingTask(void *argument)
{
 8011a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a46:	b0d5      	sub	sp, #340	@ 0x154
 8011a48:	af06      	add	r7, sp, #24
 8011a4a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011a4e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8011a52:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartLoggingTask */

	uint32_t count = 2000;
 8011a54:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8011a58:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
	void *  f_pointer = NULL;
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
	size_t fs_size;
	HeapStats_t heap_status;

	osDelay(2000);
 8011a62:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8011a66:	f007 fb50 	bl	801910a <osDelay>
	reg_logging_fn(add_log_mess_to_q);
 8011a6a:	4859      	ldr	r0, [pc, #356]	@ (8011bd0 <StartLoggingTask+0x18c>)
 8011a6c:	f000 fb5c 	bl	8012128 <reg_logging_fn>

	logging(L_INFO, "Device started...");
 8011a70:	4958      	ldr	r1, [pc, #352]	@ (8011bd4 <StartLoggingTask+0x190>)
 8011a72:	2001      	movs	r0, #1
 8011a74:	f000 fb6a 	bl	801214c <logging>
  /* Infinite loop */
  for(;;)
  {
	  //--------logging
	  if (osMessageQueueGetCount(loggingQHandle)){
 8011a78:	4b57      	ldr	r3, [pc, #348]	@ (8011bd8 <StartLoggingTask+0x194>)
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	4618      	mov	r0, r3
 8011a7e:	f007 fd9f 	bl	80195c0 <osMessageQueueGetCount>
 8011a82:	4603      	mov	r3, r0
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d020      	beq.n	8011aca <StartLoggingTask+0x86>
		  log_message_t log;
		  osMessageQueueGet(loggingQHandle, &log, 0, 0);
 8011a88:	4b53      	ldr	r3, [pc, #332]	@ (8011bd8 <StartLoggingTask+0x194>)
 8011a8a:	6818      	ldr	r0, [r3, #0]
 8011a8c:	f107 010c 	add.w	r1, r7, #12
 8011a90:	2300      	movs	r3, #0
 8011a92:	2200      	movs	r2, #0
 8011a94:	f007 fd36 	bl	8019504 <osMessageQueueGet>
		  f_pointer = mg_fs_lfs_open(LOG_FILE_LOCATION, MG_FS_WRITE);
 8011a98:	2102      	movs	r1, #2
 8011a9a:	4850      	ldr	r0, [pc, #320]	@ (8011bdc <StartLoggingTask+0x198>)
 8011a9c:	f00b f8a2 	bl	801cbe4 <mg_fs_lfs_open>
 8011aa0:	f8c7 0130 	str.w	r0, [r7, #304]	@ 0x130
		  mg_fs_lfs_write(f_pointer, &log.log_text, log.log_len); //
 8011aa4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011aa8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011aac:	f893 3101 	ldrb.w	r3, [r3, #257]	@ 0x101
 8011ab0:	461a      	mov	r2, r3
 8011ab2:	f107 030c 	add.w	r3, r7, #12
 8011ab6:	3301      	adds	r3, #1
 8011ab8:	4619      	mov	r1, r3
 8011aba:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8011abe:	f00b f8f7 	bl	801ccb0 <mg_fs_lfs_write>
		  mg_fs_lfs_close(f_pointer);
 8011ac2:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8011ac6:	f00b f8c7 	bl	801cc58 <mg_fs_lfs_close>
	  }
	  //--------logging
    osDelay(500);
 8011aca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011ace:	f007 fb1c 	bl	801910a <osDelay>


    if (count == 2000){
 8011ad2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011ad6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8011ada:	d173      	bne.n	8011bc4 <StartLoggingTask+0x180>
    	mg_fs_lfs_status(LOG_FILE_LOCATION, &fs_size, NULL);
 8011adc:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8011ae0:	2200      	movs	r2, #0
 8011ae2:	4619      	mov	r1, r3
 8011ae4:	483d      	ldr	r0, [pc, #244]	@ (8011bdc <StartLoggingTask+0x198>)
 8011ae6:	f00a ffdf 	bl	801caa8 <mg_fs_lfs_status>
    	if (fs_size > LOG_FILE_MAX_SIZE){
 8011aea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8011aee:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8011af2:	4293      	cmp	r3, r2
 8011af4:	d90a      	bls.n	8011b0c <StartLoggingTask+0xc8>
    		mg_fs_lfs_remove(LOG_FILE_LOCATION_OLD);
 8011af6:	483a      	ldr	r0, [pc, #232]	@ (8011be0 <StartLoggingTask+0x19c>)
 8011af8:	f00b f92e 	bl	801cd58 <mg_fs_lfs_remove>
    		mg_fs_lfs_rename(LOG_FILE_LOCATION, LOG_FILE_LOCATION_OLD);
 8011afc:	4938      	ldr	r1, [pc, #224]	@ (8011be0 <StartLoggingTask+0x19c>)
 8011afe:	4837      	ldr	r0, [pc, #220]	@ (8011bdc <StartLoggingTask+0x198>)
 8011b00:	f00b f914 	bl	801cd2c <mg_fs_lfs_rename>
    		logging(L_INFO, "Log file rotated");
 8011b04:	4937      	ldr	r1, [pc, #220]	@ (8011be4 <StartLoggingTask+0x1a0>)
 8011b06:	2001      	movs	r0, #1
 8011b08:	f000 fb20 	bl	801214c <logging>
    	}

    	count = 0;
 8011b0c:	2300      	movs	r3, #0
 8011b0e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    	vPortGetHeapStats(&heap_status);
 8011b12:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011b16:	4618      	mov	r0, r3
 8011b18:	f00a ff48 	bl	801c9ac <vPortGetHeapStats>
    	logging(L_INFO, "Free Heap: %u, LargestFreeBlock: %u, SmallestFeeBlock: %u, NumFreeBlock: %u,  MinEverFreeBytes: %u, NumOfSuccessAlloc: %u, NumOfSuccessFree: %u ",
                (unsigned int)heap_status.xAvailableHeapSpaceInBytes,
 8011b1c:	f8d7 5110 	ldr.w	r5, [r7, #272]	@ 0x110
                (unsigned int)heap_status.xSizeOfLargestFreeBlockInBytes,
 8011b20:	f8d7 6114 	ldr.w	r6, [r7, #276]	@ 0x114
                (unsigned int)heap_status.xSizeOfSmallestFreeBlockInBytes,
 8011b24:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
                (unsigned int)heap_status.xNumberOfFreeBlocks,
 8011b28:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
                (unsigned int)heap_status.xMinimumEverFreeBytesRemaining,
 8011b2c:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
                (unsigned int)heap_status.xNumberOfSuccessfulAllocations,
 8011b30:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
                (unsigned int)heap_status.xNumberOfSuccessfulFrees);
 8011b34:	f8d7 4128 	ldr.w	r4, [r7, #296]	@ 0x128
    	logging(L_INFO, "Free Heap: %u, LargestFreeBlock: %u, SmallestFeeBlock: %u, NumFreeBlock: %u,  MinEverFreeBytes: %u, NumOfSuccessAlloc: %u, NumOfSuccessFree: %u ",
 8011b38:	9404      	str	r4, [sp, #16]
 8011b3a:	9003      	str	r0, [sp, #12]
 8011b3c:	9102      	str	r1, [sp, #8]
 8011b3e:	9201      	str	r2, [sp, #4]
 8011b40:	9300      	str	r3, [sp, #0]
 8011b42:	4633      	mov	r3, r6
 8011b44:	462a      	mov	r2, r5
 8011b46:	4928      	ldr	r1, [pc, #160]	@ (8011be8 <StartLoggingTask+0x1a4>)
 8011b48:	2001      	movs	r0, #1
 8011b4a:	f000 faff 	bl	801214c <logging>

    	logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu",
    			(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011b4e:	4b27      	ldr	r3, [pc, #156]	@ (8011bec <StartLoggingTask+0x1a8>)
 8011b50:	685b      	ldr	r3, [r3, #4]
 8011b52:	689b      	ldr	r3, [r3, #8]
    	logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu",
 8011b54:	b2d9      	uxtb	r1, r3
    			(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011b56:	4b25      	ldr	r3, [pc, #148]	@ (8011bec <StartLoggingTask+0x1a8>)
 8011b58:	685b      	ldr	r3, [r3, #4]
 8011b5a:	689b      	ldr	r3, [r3, #8]
 8011b5c:	0a1b      	lsrs	r3, r3, #8
    	logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu",
 8011b5e:	b2d8      	uxtb	r0, r3
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 8011b60:	4b22      	ldr	r3, [pc, #136]	@ (8011bec <StartLoggingTask+0x1a8>)
 8011b62:	685b      	ldr	r3, [r3, #4]
 8011b64:	689b      	ldr	r3, [r3, #8]
 8011b66:	0c1b      	lsrs	r3, r3, #16
    	logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu",
 8011b68:	b2db      	uxtb	r3, r3
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 8011b6a:	4a20      	ldr	r2, [pc, #128]	@ (8011bec <StartLoggingTask+0x1a8>)
 8011b6c:	6852      	ldr	r2, [r2, #4]
 8011b6e:	6892      	ldr	r2, [r2, #8]
 8011b70:	0e12      	lsrs	r2, r2, #24
    	logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu",
 8011b72:	9201      	str	r2, [sp, #4]
 8011b74:	9300      	str	r3, [sp, #0]
 8011b76:	4603      	mov	r3, r0
 8011b78:	460a      	mov	r2, r1
 8011b7a:	491d      	ldr	r1, [pc, #116]	@ (8011bf0 <StartLoggingTask+0x1ac>)
 8011b7c:	2001      	movs	r0, #1
 8011b7e:	f000 fae5 	bl	801214c <logging>

    	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 8011b82:	4b1a      	ldr	r3, [pc, #104]	@ (8011bec <StartLoggingTask+0x1a8>)
 8011b84:	685b      	ldr	r3, [r3, #4]
 8011b86:	781b      	ldrb	r3, [r3, #0]
    	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
 8011b88:	461c      	mov	r4, r3
			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 8011b8a:	4b18      	ldr	r3, [pc, #96]	@ (8011bec <StartLoggingTask+0x1a8>)
 8011b8c:	685b      	ldr	r3, [r3, #4]
 8011b8e:	785b      	ldrb	r3, [r3, #1]
    	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
 8011b90:	461d      	mov	r5, r3
			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 8011b92:	4b16      	ldr	r3, [pc, #88]	@ (8011bec <StartLoggingTask+0x1a8>)
 8011b94:	685b      	ldr	r3, [r3, #4]
 8011b96:	789b      	ldrb	r3, [r3, #2]
    	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
 8011b98:	461a      	mov	r2, r3
			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 8011b9a:	4b14      	ldr	r3, [pc, #80]	@ (8011bec <StartLoggingTask+0x1a8>)
 8011b9c:	685b      	ldr	r3, [r3, #4]
 8011b9e:	78db      	ldrb	r3, [r3, #3]
    	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
 8011ba0:	4619      	mov	r1, r3
			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 8011ba2:	4b12      	ldr	r3, [pc, #72]	@ (8011bec <StartLoggingTask+0x1a8>)
 8011ba4:	685b      	ldr	r3, [r3, #4]
 8011ba6:	791b      	ldrb	r3, [r3, #4]
    	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
 8011ba8:	4618      	mov	r0, r3
			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 8011baa:	4b10      	ldr	r3, [pc, #64]	@ (8011bec <StartLoggingTask+0x1a8>)
 8011bac:	685b      	ldr	r3, [r3, #4]
 8011bae:	795b      	ldrb	r3, [r3, #5]
    	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
 8011bb0:	9303      	str	r3, [sp, #12]
 8011bb2:	9002      	str	r0, [sp, #8]
 8011bb4:	9101      	str	r1, [sp, #4]
 8011bb6:	9200      	str	r2, [sp, #0]
 8011bb8:	462b      	mov	r3, r5
 8011bba:	4622      	mov	r2, r4
 8011bbc:	490d      	ldr	r1, [pc, #52]	@ (8011bf4 <StartLoggingTask+0x1b0>)
 8011bbe:	2001      	movs	r0, #1
 8011bc0:	f000 fac4 	bl	801214c <logging>

    }
    count ++;
 8011bc4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011bc8:	3301      	adds	r3, #1
 8011bca:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
	  if (osMessageQueueGetCount(loggingQHandle)){
 8011bce:	e753      	b.n	8011a78 <StartLoggingTask+0x34>
 8011bd0:	08011e5d 	.word	0x08011e5d
 8011bd4:	0803f2d8 	.word	0x0803f2d8
 8011bd8:	20000a10 	.word	0x20000a10
 8011bdc:	0803f2ec 	.word	0x0803f2ec
 8011be0:	0803f2fc 	.word	0x0803f2fc
 8011be4:	0803f30c 	.word	0x0803f30c
 8011be8:	0803f320 	.word	0x0803f320
 8011bec:	200009e4 	.word	0x200009e4
 8011bf0:	0803f1a4 	.word	0x0803f1a4
 8011bf4:	0803f3b4 	.word	0x0803f3b4

08011bf8 <EthResetBegin>:
  /* USER CODE END StartLoggingTask */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void EthResetBegin(void){
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_RESET);
 8011bfc:	2200      	movs	r2, #0
 8011bfe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011c02:	4802      	ldr	r0, [pc, #8]	@ (8011c0c <EthResetBegin+0x14>)
 8011c04:	f004 fb86 	bl	8016314 <HAL_GPIO_WritePin>
}
 8011c08:	bf00      	nop
 8011c0a:	bd80      	pop	{r7, pc}
 8011c0c:	40020000 	.word	0x40020000

08011c10 <EthResetEnd>:

void EthResetEnd(void){
 8011c10:	b580      	push	{r7, lr}
 8011c12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_SET);
 8011c14:	2201      	movs	r2, #1
 8011c16:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011c1a:	4802      	ldr	r0, [pc, #8]	@ (8011c24 <EthResetEnd+0x14>)
 8011c1c:	f004 fb7a 	bl	8016314 <HAL_GPIO_WritePin>
}
 8011c20:	bf00      	nop
 8011c22:	bd80      	pop	{r7, pc}
 8011c24:	40020000 	.word	0x40020000

08011c28 <EthBegin>:

void EthBegin(void * param){
 8011c28:	b580      	push	{r7, lr}
 8011c2a:	b082      	sub	sp, #8
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	6078      	str	r0, [r7, #4]
	osMutexAcquire(SPI2MutexHandle, osWaitForever);
 8011c30:	4b08      	ldr	r3, [pc, #32]	@ (8011c54 <EthBegin+0x2c>)
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8011c38:	4618      	mov	r0, r3
 8011c3a:	f007 fb07 	bl	801924c <osMutexAcquire>
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_RESET);
 8011c3e:	2200      	movs	r2, #0
 8011c40:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8011c44:	4804      	ldr	r0, [pc, #16]	@ (8011c58 <EthBegin+0x30>)
 8011c46:	f004 fb65 	bl	8016314 <HAL_GPIO_WritePin>
}
 8011c4a:	bf00      	nop
 8011c4c:	3708      	adds	r7, #8
 8011c4e:	46bd      	mov	sp, r7
 8011c50:	bd80      	pop	{r7, pc}
 8011c52:	bf00      	nop
 8011c54:	20000a14 	.word	0x20000a14
 8011c58:	40020400 	.word	0x40020400

08011c5c <EthEnd>:

void EthEnd(void * param){
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	b082      	sub	sp, #8
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	6078      	str	r0, [r7, #4]
	//osDelay(1);
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 8011c64:	2201      	movs	r2, #1
 8011c66:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8011c6a:	4806      	ldr	r0, [pc, #24]	@ (8011c84 <EthEnd+0x28>)
 8011c6c:	f004 fb52 	bl	8016314 <HAL_GPIO_WritePin>
	osMutexRelease(SPI2MutexHandle);
 8011c70:	4b05      	ldr	r3, [pc, #20]	@ (8011c88 <EthEnd+0x2c>)
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	4618      	mov	r0, r3
 8011c76:	f007 fb34 	bl	80192e2 <osMutexRelease>
}
 8011c7a:	bf00      	nop
 8011c7c:	3708      	adds	r7, #8
 8011c7e:	46bd      	mov	sp, r7
 8011c80:	bd80      	pop	{r7, pc}
 8011c82:	bf00      	nop
 8011c84:	40020400 	.word	0x40020400
 8011c88:	20000a14 	.word	0x20000a14

08011c8c <EthTxn>:

uint8_t EthTxn(void *spi, uint8_t data) {
 8011c8c:	b580      	push	{r7, lr}
 8011c8e:	b086      	sub	sp, #24
 8011c90:	af02      	add	r7, sp, #8
 8011c92:	6078      	str	r0, [r7, #4]
 8011c94:	460b      	mov	r3, r1
 8011c96:	70fb      	strb	r3, [r7, #3]
  uint8_t rx_data;
  HAL_SPI_TransmitReceive(&hspi2, &data, &rx_data, 1, HAL_MAX_DELAY);
 8011c98:	f107 020f 	add.w	r2, r7, #15
 8011c9c:	1cf9      	adds	r1, r7, #3
 8011c9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011ca2:	9300      	str	r3, [sp, #0]
 8011ca4:	2301      	movs	r3, #1
 8011ca6:	4804      	ldr	r0, [pc, #16]	@ (8011cb8 <EthTxn+0x2c>)
 8011ca8:	f006 f8fa 	bl	8017ea0 <HAL_SPI_TransmitReceive>
  return rx_data;
 8011cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cae:	4618      	mov	r0, r3
 8011cb0:	3710      	adds	r7, #16
 8011cb2:	46bd      	mov	sp, r7
 8011cb4:	bd80      	pop	{r7, pc}
 8011cb6:	bf00      	nop
 8011cb8:	20000a70 	.word	0x20000a70

08011cbc <FlashBegin>:

void FlashBegin(void){
 8011cbc:	b580      	push	{r7, lr}
 8011cbe:	af00      	add	r7, sp, #0
	osMutexAcquire(SPI2MutexHandle, osWaitForever);
 8011cc0:	4b07      	ldr	r3, [pc, #28]	@ (8011ce0 <FlashBegin+0x24>)
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8011cc8:	4618      	mov	r0, r3
 8011cca:	f007 fabf 	bl	801924c <osMutexAcquire>
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8011cce:	2200      	movs	r2, #0
 8011cd0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8011cd4:	4803      	ldr	r0, [pc, #12]	@ (8011ce4 <FlashBegin+0x28>)
 8011cd6:	f004 fb1d 	bl	8016314 <HAL_GPIO_WritePin>
}
 8011cda:	bf00      	nop
 8011cdc:	bd80      	pop	{r7, pc}
 8011cde:	bf00      	nop
 8011ce0:	20000a14 	.word	0x20000a14
 8011ce4:	40020000 	.word	0x40020000

08011ce8 <FlashEnd>:

void FlashEnd(void){
 8011ce8:	b580      	push	{r7, lr}
 8011cea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8011cec:	2201      	movs	r2, #1
 8011cee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8011cf2:	4805      	ldr	r0, [pc, #20]	@ (8011d08 <FlashEnd+0x20>)
 8011cf4:	f004 fb0e 	bl	8016314 <HAL_GPIO_WritePin>
	osMutexRelease(SPI2MutexHandle);
 8011cf8:	4b04      	ldr	r3, [pc, #16]	@ (8011d0c <FlashEnd+0x24>)
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	4618      	mov	r0, r3
 8011cfe:	f007 faf0 	bl	80192e2 <osMutexRelease>
}
 8011d02:	bf00      	nop
 8011d04:	bd80      	pop	{r7, pc}
 8011d06:	bf00      	nop
 8011d08:	40020000 	.word	0x40020000
 8011d0c:	20000a14 	.word	0x20000a14

08011d10 <SendByteSPI2>:

void SendByteSPI2(uint8_t byte){
 8011d10:	b580      	push	{r7, lr}
 8011d12:	b082      	sub	sp, #8
 8011d14:	af00      	add	r7, sp, #0
 8011d16:	4603      	mov	r3, r0
 8011d18:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &byte, 1, HAL_MAX_DELAY);
 8011d1a:	1df9      	adds	r1, r7, #7
 8011d1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011d20:	2201      	movs	r2, #1
 8011d22:	4803      	ldr	r0, [pc, #12]	@ (8011d30 <SendByteSPI2+0x20>)
 8011d24:	f005 fe5f 	bl	80179e6 <HAL_SPI_Transmit>
}
 8011d28:	bf00      	nop
 8011d2a:	3708      	adds	r7, #8
 8011d2c:	46bd      	mov	sp, r7
 8011d2e:	bd80      	pop	{r7, pc}
 8011d30:	20000a70 	.word	0x20000a70

08011d34 <RecvBuffSPI2>:

int RecvBuffSPI2(uint8_t * buffer, uint16_t size){
 8011d34:	b580      	push	{r7, lr}
 8011d36:	b082      	sub	sp, #8
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	6078      	str	r0, [r7, #4]
 8011d3c:	460b      	mov	r3, r1
 8011d3e:	807b      	strh	r3, [r7, #2]
	return HAL_SPI_Receive(&hspi2, buffer, size, HAL_MAX_DELAY);
 8011d40:	887a      	ldrh	r2, [r7, #2]
 8011d42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011d46:	6879      	ldr	r1, [r7, #4]
 8011d48:	4803      	ldr	r0, [pc, #12]	@ (8011d58 <RecvBuffSPI2+0x24>)
 8011d4a:	f005 ff90 	bl	8017c6e <HAL_SPI_Receive>
 8011d4e:	4603      	mov	r3, r0
}
 8011d50:	4618      	mov	r0, r3
 8011d52:	3708      	adds	r7, #8
 8011d54:	46bd      	mov	sp, r7
 8011d56:	bd80      	pop	{r7, pc}
 8011d58:	20000a70 	.word	0x20000a70

08011d5c <FS_Lock>:

void FS_Lock(void * param){
 8011d5c:	b580      	push	{r7, lr}
 8011d5e:	b082      	sub	sp, #8
 8011d60:	af00      	add	r7, sp, #0
 8011d62:	6078      	str	r0, [r7, #4]
	osMutexAcquire(FSMutexHandle, HAL_MAX_DELAY);
 8011d64:	4b05      	ldr	r3, [pc, #20]	@ (8011d7c <FS_Lock+0x20>)
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	f007 fa6d 	bl	801924c <osMutexAcquire>
}
 8011d72:	bf00      	nop
 8011d74:	3708      	adds	r7, #8
 8011d76:	46bd      	mov	sp, r7
 8011d78:	bd80      	pop	{r7, pc}
 8011d7a:	bf00      	nop
 8011d7c:	20000a18 	.word	0x20000a18

08011d80 <FS_Unlock>:

void FS_Unlock(void * param){
 8011d80:	b580      	push	{r7, lr}
 8011d82:	b082      	sub	sp, #8
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	6078      	str	r0, [r7, #4]
	osMutexRelease(FSMutexHandle);
 8011d88:	4b04      	ldr	r3, [pc, #16]	@ (8011d9c <FS_Unlock+0x1c>)
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	f007 faa8 	bl	80192e2 <osMutexRelease>
}
 8011d92:	bf00      	nop
 8011d94:	3708      	adds	r7, #8
 8011d96:	46bd      	mov	sp, r7
 8011d98:	bd80      	pop	{r7, pc}
 8011d9a:	bf00      	nop
 8011d9c:	20000a18 	.word	0x20000a18

08011da0 <RW_parameters_from_queue>:

    // �?спользуем функцию отправки и приема байта
    return SPI_SendReceiveByte(hspi, data);
}

void RW_parameters_from_queue(void * param, sett_type_t param_type,  sett_direction_t direction){
 8011da0:	b580      	push	{r7, lr}
 8011da2:	b086      	sub	sp, #24
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	6078      	str	r0, [r7, #4]
 8011da8:	460b      	mov	r3, r1
 8011daa:	70fb      	strb	r3, [r7, #3]
 8011dac:	4613      	mov	r3, r2
 8011dae:	70bb      	strb	r3, [r7, #2]
	switch (param_type) {
 8011db0:	78fb      	ldrb	r3, [r7, #3]
 8011db2:	2b02      	cmp	r3, #2
 8011db4:	d02b      	beq.n	8011e0e <RW_parameters_from_queue+0x6e>
 8011db6:	2b02      	cmp	r3, #2
 8011db8:	dc44      	bgt.n	8011e44 <RW_parameters_from_queue+0xa4>
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d002      	beq.n	8011dc4 <RW_parameters_from_queue+0x24>
 8011dbe:	2b01      	cmp	r3, #1
 8011dc0:	d018      	beq.n	8011df4 <RW_parameters_from_queue+0x54>
				xQueuePeek(outputReadQHandle, output, 0);
			}else if(direction == S_WRITE){
				xQueueOverwrite(outputWriteQHandle, output);
			}
	}
}
 8011dc2:	e03f      	b.n	8011e44 <RW_parameters_from_queue+0xa4>
			MQTT_cred_struct * pr = (MQTT_cred_struct *) param;
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	60fb      	str	r3, [r7, #12]
			if (direction == S_READ){
 8011dc8:	78bb      	ldrb	r3, [r7, #2]
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d107      	bne.n	8011dde <RW_parameters_from_queue+0x3e>
				xQueuePeek(mqttQHandle, pr, 0);
 8011dce:	4b1f      	ldr	r3, [pc, #124]	@ (8011e4c <RW_parameters_from_queue+0xac>)
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	2200      	movs	r2, #0
 8011dd4:	68f9      	ldr	r1, [r7, #12]
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	f008 faac 	bl	801a334 <xQueuePeek>
			break;
 8011ddc:	e02f      	b.n	8011e3e <RW_parameters_from_queue+0x9e>
			}else if (direction == S_WRITE){
 8011dde:	78bb      	ldrb	r3, [r7, #2]
 8011de0:	2b01      	cmp	r3, #1
 8011de2:	d12c      	bne.n	8011e3e <RW_parameters_from_queue+0x9e>
				xQueueOverwrite(mqttQHandle, pr);
 8011de4:	4b19      	ldr	r3, [pc, #100]	@ (8011e4c <RW_parameters_from_queue+0xac>)
 8011de6:	6818      	ldr	r0, [r3, #0]
 8011de8:	2302      	movs	r3, #2
 8011dea:	2200      	movs	r2, #0
 8011dec:	68f9      	ldr	r1, [r7, #12]
 8011dee:	f007 ff0f 	bl	8019c10 <xQueueGenericSend>
			break;
 8011df2:	e024      	b.n	8011e3e <RW_parameters_from_queue+0x9e>
			inputs_state_t * input = (inputs_state_t *) param;
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	613b      	str	r3, [r7, #16]
			if (direction == S_READ){
 8011df8:	78bb      	ldrb	r3, [r7, #2]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d121      	bne.n	8011e42 <RW_parameters_from_queue+0xa2>
				xQueuePeek(inputReadQHandle, input, 0);
 8011dfe:	4b14      	ldr	r3, [pc, #80]	@ (8011e50 <RW_parameters_from_queue+0xb0>)
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	2200      	movs	r2, #0
 8011e04:	6939      	ldr	r1, [r7, #16]
 8011e06:	4618      	mov	r0, r3
 8011e08:	f008 fa94 	bl	801a334 <xQueuePeek>
			break;
 8011e0c:	e019      	b.n	8011e42 <RW_parameters_from_queue+0xa2>
			inputs_state_t * output = (inputs_state_t *) param;
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	617b      	str	r3, [r7, #20]
			if (direction == S_READ){
 8011e12:	78bb      	ldrb	r3, [r7, #2]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d107      	bne.n	8011e28 <RW_parameters_from_queue+0x88>
				xQueuePeek(outputReadQHandle, output, 0);
 8011e18:	4b0e      	ldr	r3, [pc, #56]	@ (8011e54 <RW_parameters_from_queue+0xb4>)
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	2200      	movs	r2, #0
 8011e1e:	6979      	ldr	r1, [r7, #20]
 8011e20:	4618      	mov	r0, r3
 8011e22:	f008 fa87 	bl	801a334 <xQueuePeek>
}
 8011e26:	e00d      	b.n	8011e44 <RW_parameters_from_queue+0xa4>
			}else if(direction == S_WRITE){
 8011e28:	78bb      	ldrb	r3, [r7, #2]
 8011e2a:	2b01      	cmp	r3, #1
 8011e2c:	d10a      	bne.n	8011e44 <RW_parameters_from_queue+0xa4>
				xQueueOverwrite(outputWriteQHandle, output);
 8011e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8011e58 <RW_parameters_from_queue+0xb8>)
 8011e30:	6818      	ldr	r0, [r3, #0]
 8011e32:	2302      	movs	r3, #2
 8011e34:	2200      	movs	r2, #0
 8011e36:	6979      	ldr	r1, [r7, #20]
 8011e38:	f007 feea 	bl	8019c10 <xQueueGenericSend>
}
 8011e3c:	e002      	b.n	8011e44 <RW_parameters_from_queue+0xa4>
			break;
 8011e3e:	bf00      	nop
 8011e40:	e000      	b.n	8011e44 <RW_parameters_from_queue+0xa4>
			break;
 8011e42:	bf00      	nop
}
 8011e44:	bf00      	nop
 8011e46:	3718      	adds	r7, #24
 8011e48:	46bd      	mov	sp, r7
 8011e4a:	bd80      	pop	{r7, pc}
 8011e4c:	20000a0c 	.word	0x20000a0c
 8011e50:	20000a00 	.word	0x20000a00
 8011e54:	20000a04 	.word	0x20000a04
 8011e58:	20000a08 	.word	0x20000a08

08011e5c <add_log_mess_to_q>:

void add_log_mess_to_q(struct log_message mess){
 8011e5c:	b084      	sub	sp, #16
 8011e5e:	b580      	push	{r7, lr}
 8011e60:	af00      	add	r7, sp, #0
 8011e62:	f107 0c08 	add.w	ip, r7, #8
 8011e66:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	osMessageQueuePut(loggingQHandle,  &mess, 0, 0);
 8011e6a:	4b07      	ldr	r3, [pc, #28]	@ (8011e88 <add_log_mess_to_q+0x2c>)
 8011e6c:	6818      	ldr	r0, [r3, #0]
 8011e6e:	2300      	movs	r3, #0
 8011e70:	2200      	movs	r2, #0
 8011e72:	f107 0108 	add.w	r1, r7, #8
 8011e76:	f007 fae5 	bl	8019444 <osMessageQueuePut>

}
 8011e7a:	bf00      	nop
 8011e7c:	46bd      	mov	sp, r7
 8011e7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011e82:	b004      	add	sp, #16
 8011e84:	4770      	bx	lr
 8011e86:	bf00      	nop
 8011e88:	20000a10 	.word	0x20000a10

08011e8c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	b088      	sub	sp, #32
 8011e90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011e92:	f107 030c 	add.w	r3, r7, #12
 8011e96:	2200      	movs	r2, #0
 8011e98:	601a      	str	r2, [r3, #0]
 8011e9a:	605a      	str	r2, [r3, #4]
 8011e9c:	609a      	str	r2, [r3, #8]
 8011e9e:	60da      	str	r2, [r3, #12]
 8011ea0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	60bb      	str	r3, [r7, #8]
 8011ea6:	4b3b      	ldr	r3, [pc, #236]	@ (8011f94 <MX_GPIO_Init+0x108>)
 8011ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011eaa:	4a3a      	ldr	r2, [pc, #232]	@ (8011f94 <MX_GPIO_Init+0x108>)
 8011eac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8011eb2:	4b38      	ldr	r3, [pc, #224]	@ (8011f94 <MX_GPIO_Init+0x108>)
 8011eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011eba:	60bb      	str	r3, [r7, #8]
 8011ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8011ebe:	2300      	movs	r3, #0
 8011ec0:	607b      	str	r3, [r7, #4]
 8011ec2:	4b34      	ldr	r3, [pc, #208]	@ (8011f94 <MX_GPIO_Init+0x108>)
 8011ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ec6:	4a33      	ldr	r2, [pc, #204]	@ (8011f94 <MX_GPIO_Init+0x108>)
 8011ec8:	f043 0301 	orr.w	r3, r3, #1
 8011ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8011ece:	4b31      	ldr	r3, [pc, #196]	@ (8011f94 <MX_GPIO_Init+0x108>)
 8011ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ed2:	f003 0301 	and.w	r3, r3, #1
 8011ed6:	607b      	str	r3, [r7, #4]
 8011ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8011eda:	2300      	movs	r3, #0
 8011edc:	603b      	str	r3, [r7, #0]
 8011ede:	4b2d      	ldr	r3, [pc, #180]	@ (8011f94 <MX_GPIO_Init+0x108>)
 8011ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ee2:	4a2c      	ldr	r2, [pc, #176]	@ (8011f94 <MX_GPIO_Init+0x108>)
 8011ee4:	f043 0302 	orr.w	r3, r3, #2
 8011ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8011eea:	4b2a      	ldr	r3, [pc, #168]	@ (8011f94 <MX_GPIO_Init+0x108>)
 8011eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011eee:	f003 0302 	and.w	r3, r3, #2
 8011ef2:	603b      	str	r3, [r7, #0]
 8011ef4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, coil1_Pin|coil2_Pin|coil3_Pin|ETH_RST_Pin, GPIO_PIN_RESET);
 8011ef6:	2200      	movs	r2, #0
 8011ef8:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8011efc:	4826      	ldr	r0, [pc, #152]	@ (8011f98 <MX_GPIO_Init+0x10c>)
 8011efe:	f004 fa09 	bl	8016314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 8011f02:	2201      	movs	r2, #1
 8011f04:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8011f08:	4824      	ldr	r0, [pc, #144]	@ (8011f9c <MX_GPIO_Init+0x110>)
 8011f0a:	f004 fa03 	bl	8016314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8011f0e:	2201      	movs	r2, #1
 8011f10:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8011f14:	4820      	ldr	r0, [pc, #128]	@ (8011f98 <MX_GPIO_Init+0x10c>)
 8011f16:	f004 f9fd 	bl	8016314 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = input1_Pin|input2_Pin|input3_Pin;
 8011f1a:	2307      	movs	r3, #7
 8011f1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011f1e:	2300      	movs	r3, #0
 8011f20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8011f22:	2302      	movs	r3, #2
 8011f24:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011f26:	f107 030c 	add.w	r3, r7, #12
 8011f2a:	4619      	mov	r1, r3
 8011f2c:	481a      	ldr	r0, [pc, #104]	@ (8011f98 <MX_GPIO_Init+0x10c>)
 8011f2e:	f003 ff71 	bl	8015e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = coil1_Pin|coil2_Pin|coil3_Pin;
 8011f32:	23e0      	movs	r3, #224	@ 0xe0
 8011f34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011f36:	2301      	movs	r3, #1
 8011f38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011f3a:	2300      	movs	r3, #0
 8011f3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011f3e:	2300      	movs	r3, #0
 8011f40:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011f42:	f107 030c 	add.w	r3, r7, #12
 8011f46:	4619      	mov	r1, r3
 8011f48:	4813      	ldr	r0, [pc, #76]	@ (8011f98 <MX_GPIO_Init+0x10c>)
 8011f4a:	f003 ff63 	bl	8015e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ETH_CS_Pin;
 8011f4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011f52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011f54:	2301      	movs	r3, #1
 8011f56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011f58:	2300      	movs	r3, #0
 8011f5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8011f5c:	2302      	movs	r3, #2
 8011f5e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ETH_CS_GPIO_Port, &GPIO_InitStruct);
 8011f60:	f107 030c 	add.w	r3, r7, #12
 8011f64:	4619      	mov	r1, r3
 8011f66:	480d      	ldr	r0, [pc, #52]	@ (8011f9c <MX_GPIO_Init+0x110>)
 8011f68:	f003 ff54 	bl	8015e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ETH_RST_Pin|FLASH_CS_Pin;
 8011f6c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8011f70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011f72:	2301      	movs	r3, #1
 8011f74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011f76:	2300      	movs	r3, #0
 8011f78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8011f7a:	2302      	movs	r3, #2
 8011f7c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011f7e:	f107 030c 	add.w	r3, r7, #12
 8011f82:	4619      	mov	r1, r3
 8011f84:	4804      	ldr	r0, [pc, #16]	@ (8011f98 <MX_GPIO_Init+0x10c>)
 8011f86:	f003 ff45 	bl	8015e14 <HAL_GPIO_Init>

}
 8011f8a:	bf00      	nop
 8011f8c:	3720      	adds	r7, #32
 8011f8e:	46bd      	mov	sp, r7
 8011f90:	bd80      	pop	{r7, pc}
 8011f92:	bf00      	nop
 8011f94:	40023800 	.word	0x40023800
 8011f98:	40020000 	.word	0x40020000
 8011f9c:	40020400 	.word	0x40020400

08011fa0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8011fa0:	b580      	push	{r7, lr}
 8011fa2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8011fa4:	4b12      	ldr	r3, [pc, #72]	@ (8011ff0 <MX_I2C1_Init+0x50>)
 8011fa6:	4a13      	ldr	r2, [pc, #76]	@ (8011ff4 <MX_I2C1_Init+0x54>)
 8011fa8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 200000;
 8011faa:	4b11      	ldr	r3, [pc, #68]	@ (8011ff0 <MX_I2C1_Init+0x50>)
 8011fac:	4a12      	ldr	r2, [pc, #72]	@ (8011ff8 <MX_I2C1_Init+0x58>)
 8011fae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8011fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8011ff0 <MX_I2C1_Init+0x50>)
 8011fb2:	2200      	movs	r2, #0
 8011fb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8011fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8011ff0 <MX_I2C1_Init+0x50>)
 8011fb8:	2200      	movs	r2, #0
 8011fba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8011fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8011ff0 <MX_I2C1_Init+0x50>)
 8011fbe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8011fc2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8011fc4:	4b0a      	ldr	r3, [pc, #40]	@ (8011ff0 <MX_I2C1_Init+0x50>)
 8011fc6:	2200      	movs	r2, #0
 8011fc8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8011fca:	4b09      	ldr	r3, [pc, #36]	@ (8011ff0 <MX_I2C1_Init+0x50>)
 8011fcc:	2200      	movs	r2, #0
 8011fce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8011fd0:	4b07      	ldr	r3, [pc, #28]	@ (8011ff0 <MX_I2C1_Init+0x50>)
 8011fd2:	2200      	movs	r2, #0
 8011fd4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8011fd6:	4b06      	ldr	r3, [pc, #24]	@ (8011ff0 <MX_I2C1_Init+0x50>)
 8011fd8:	2200      	movs	r2, #0
 8011fda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8011fdc:	4804      	ldr	r0, [pc, #16]	@ (8011ff0 <MX_I2C1_Init+0x50>)
 8011fde:	f004 f9b3 	bl	8016348 <HAL_I2C_Init>
 8011fe2:	4603      	mov	r3, r0
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d001      	beq.n	8011fec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8011fe8:	f000 fa6c 	bl	80124c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8011fec:	bf00      	nop
 8011fee:	bd80      	pop	{r7, pc}
 8011ff0:	20000a1c 	.word	0x20000a1c
 8011ff4:	40005400 	.word	0x40005400
 8011ff8:	00030d40 	.word	0x00030d40

08011ffc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8011ffc:	b580      	push	{r7, lr}
 8011ffe:	b08a      	sub	sp, #40	@ 0x28
 8012000:	af00      	add	r7, sp, #0
 8012002:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012004:	f107 0314 	add.w	r3, r7, #20
 8012008:	2200      	movs	r2, #0
 801200a:	601a      	str	r2, [r3, #0]
 801200c:	605a      	str	r2, [r3, #4]
 801200e:	609a      	str	r2, [r3, #8]
 8012010:	60da      	str	r2, [r3, #12]
 8012012:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	4a19      	ldr	r2, [pc, #100]	@ (8012080 <HAL_I2C_MspInit+0x84>)
 801201a:	4293      	cmp	r3, r2
 801201c:	d12b      	bne.n	8012076 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 801201e:	2300      	movs	r3, #0
 8012020:	613b      	str	r3, [r7, #16]
 8012022:	4b18      	ldr	r3, [pc, #96]	@ (8012084 <HAL_I2C_MspInit+0x88>)
 8012024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012026:	4a17      	ldr	r2, [pc, #92]	@ (8012084 <HAL_I2C_MspInit+0x88>)
 8012028:	f043 0302 	orr.w	r3, r3, #2
 801202c:	6313      	str	r3, [r2, #48]	@ 0x30
 801202e:	4b15      	ldr	r3, [pc, #84]	@ (8012084 <HAL_I2C_MspInit+0x88>)
 8012030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012032:	f003 0302 	and.w	r3, r3, #2
 8012036:	613b      	str	r3, [r7, #16]
 8012038:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 801203a:	23c0      	movs	r3, #192	@ 0xc0
 801203c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801203e:	2312      	movs	r3, #18
 8012040:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8012042:	2301      	movs	r3, #1
 8012044:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012046:	2303      	movs	r3, #3
 8012048:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 801204a:	2304      	movs	r3, #4
 801204c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801204e:	f107 0314 	add.w	r3, r7, #20
 8012052:	4619      	mov	r1, r3
 8012054:	480c      	ldr	r0, [pc, #48]	@ (8012088 <HAL_I2C_MspInit+0x8c>)
 8012056:	f003 fedd 	bl	8015e14 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 801205a:	2300      	movs	r3, #0
 801205c:	60fb      	str	r3, [r7, #12]
 801205e:	4b09      	ldr	r3, [pc, #36]	@ (8012084 <HAL_I2C_MspInit+0x88>)
 8012060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012062:	4a08      	ldr	r2, [pc, #32]	@ (8012084 <HAL_I2C_MspInit+0x88>)
 8012064:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8012068:	6413      	str	r3, [r2, #64]	@ 0x40
 801206a:	4b06      	ldr	r3, [pc, #24]	@ (8012084 <HAL_I2C_MspInit+0x88>)
 801206c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801206e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8012072:	60fb      	str	r3, [r7, #12]
 8012074:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8012076:	bf00      	nop
 8012078:	3728      	adds	r7, #40	@ 0x28
 801207a:	46bd      	mov	sp, r7
 801207c:	bd80      	pop	{r7, pc}
 801207e:	bf00      	nop
 8012080:	40005400 	.word	0x40005400
 8012084:	40023800 	.word	0x40023800
 8012088:	40020400 	.word	0x40020400

0801208c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 801208c:	b580      	push	{r7, lr}
 801208e:	b082      	sub	sp, #8
 8012090:	af00      	add	r7, sp, #0
 8012092:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	4a0a      	ldr	r2, [pc, #40]	@ (80120c4 <HAL_I2C_MspDeInit+0x38>)
 801209a:	4293      	cmp	r3, r2
 801209c:	d10d      	bne.n	80120ba <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 801209e:	4b0a      	ldr	r3, [pc, #40]	@ (80120c8 <HAL_I2C_MspDeInit+0x3c>)
 80120a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80120a2:	4a09      	ldr	r2, [pc, #36]	@ (80120c8 <HAL_I2C_MspDeInit+0x3c>)
 80120a4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80120a8:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80120aa:	2140      	movs	r1, #64	@ 0x40
 80120ac:	4807      	ldr	r0, [pc, #28]	@ (80120cc <HAL_I2C_MspDeInit+0x40>)
 80120ae:	f004 f835 	bl	801611c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80120b2:	2180      	movs	r1, #128	@ 0x80
 80120b4:	4805      	ldr	r0, [pc, #20]	@ (80120cc <HAL_I2C_MspDeInit+0x40>)
 80120b6:	f004 f831 	bl	801611c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 80120ba:	bf00      	nop
 80120bc:	3708      	adds	r7, #8
 80120be:	46bd      	mov	sp, r7
 80120c0:	bd80      	pop	{r7, pc}
 80120c2:	bf00      	nop
 80120c4:	40005400 	.word	0x40005400
 80120c8:	40023800 	.word	0x40023800
 80120cc:	40020400 	.word	0x40020400

080120d0 <mg_calloc>:
#define free(a) vPortFree(a)
#define malloc(a) pvPortMalloc(a)
#define strdup(s) ((char *) mg_strdup(mg_str(s)).buf)

// Re-route calloc/free to the FreeRTOS's functions, don't use stdlib
static inline void *mg_calloc(size_t cnt, size_t size) {
 80120d0:	b580      	push	{r7, lr}
 80120d2:	b084      	sub	sp, #16
 80120d4:	af00      	add	r7, sp, #0
 80120d6:	6078      	str	r0, [r7, #4]
 80120d8:	6039      	str	r1, [r7, #0]
  void *p = pvPortMalloc(cnt * size);
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	683a      	ldr	r2, [r7, #0]
 80120de:	fb02 f303 	mul.w	r3, r2, r3
 80120e2:	4618      	mov	r0, r3
 80120e4:	f00a fa72 	bl	801c5cc <pvPortMalloc>
 80120e8:	4603      	mov	r3, r0
 80120ea:	60fb      	str	r3, [r7, #12]
  if (p != NULL) memset(p, 0, size * cnt);
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d008      	beq.n	8012104 <mg_calloc+0x34>
 80120f2:	683b      	ldr	r3, [r7, #0]
 80120f4:	687a      	ldr	r2, [r7, #4]
 80120f6:	fb02 f303 	mul.w	r3, r2, r3
 80120fa:	461a      	mov	r2, r3
 80120fc:	2100      	movs	r1, #0
 80120fe:	68f8      	ldr	r0, [r7, #12]
 8012100:	f023 fe76 	bl	8035df0 <memset>
  return p;
 8012104:	68fb      	ldr	r3, [r7, #12]
}
 8012106:	4618      	mov	r0, r3
 8012108:	3710      	adds	r7, #16
 801210a:	46bd      	mov	sp, r7
 801210c:	bd80      	pop	{r7, pc}

0801210e <proto>:

#include "mongoose.h"

#define time_ms_now() mg_now()

static void proto(struct log_message mess ){};
 801210e:	b084      	sub	sp, #16
 8012110:	b490      	push	{r4, r7}
 8012112:	af00      	add	r7, sp, #0
 8012114:	f107 0408 	add.w	r4, r7, #8
 8012118:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801211c:	bf00      	nop
 801211e:	46bd      	mov	sp, r7
 8012120:	bc90      	pop	{r4, r7}
 8012122:	b004      	add	sp, #16
 8012124:	4770      	bx	lr
	...

08012128 <reg_logging_fn>:

void (*_send_log_mess)(struct log_message mess) = proto;


void reg_logging_fn(void (* fn)(struct log_message)){
 8012128:	b480      	push	{r7}
 801212a:	b083      	sub	sp, #12
 801212c:	af00      	add	r7, sp, #0
 801212e:	6078      	str	r0, [r7, #4]
	if (fn != NULL){
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	2b00      	cmp	r3, #0
 8012134:	d002      	beq.n	801213c <reg_logging_fn+0x14>
		_send_log_mess = fn;
 8012136:	4a04      	ldr	r2, [pc, #16]	@ (8012148 <reg_logging_fn+0x20>)
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	6013      	str	r3, [r2, #0]
	}
}
 801213c:	bf00      	nop
 801213e:	370c      	adds	r7, #12
 8012140:	46bd      	mov	sp, r7
 8012142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012146:	4770      	bx	lr
 8012148:	20000000 	.word	0x20000000

0801214c <logging>:

void logging(uint8_t level, const char *format, ...){
 801214c:	b40e      	push	{r1, r2, r3}
 801214e:	b5b0      	push	{r4, r5, r7, lr}
 8012150:	f5ad 7d27 	sub.w	sp, sp, #668	@ 0x29c
 8012154:	af3e      	add	r7, sp, #248	@ 0xf8
 8012156:	4602      	mov	r2, r0
 8012158:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 801215c:	f2a3 1399 	subw	r3, r3, #409	@ 0x199
 8012160:	701a      	strb	r2, [r3, #0]
    va_list args;

    int formatted_len;
    int time_len;

    char * tmp_buf = NULL;
 8012162:	2300      	movs	r3, #0
 8012164:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    tmp_buf = calloc(LOG_MES_TEXT_LEN, sizeof(char));
 8012168:	2101      	movs	r1, #1
 801216a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801216e:	f7ff ffaf 	bl	80120d0 <mg_calloc>
 8012172:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c

    if (!tmp_buf){
 8012176:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 801217a:	2b00      	cmp	r3, #0
 801217c:	f000 80e8 	beq.w	8012350 <logging+0x204>
    	return;
    }

    // Инициализация структуры нулями
    memset(&mess, 0, sizeof(log_message_t));
 8012180:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8012184:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8012188:	2100      	movs	r1, #0
 801218a:	4618      	mov	r0, r3
 801218c:	f023 fe30 	bl	8035df0 <memset>

    // Установка уровня логирования
    mess.log_level = level;
 8012190:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8012194:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8012198:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 801219c:	f2a2 1299 	subw	r2, r2, #409	@ 0x199
 80121a0:	7812      	ldrb	r2, [r2, #0]
 80121a2:	701a      	strb	r2, [r3, #0]


    // Получение текущего времени в миллисекундах
    double ms_now = time_ms_now();
 80121a4:	f01f fa48 	bl	8031638 <mg_now>
 80121a8:	4602      	mov	r2, r0
 80121aa:	460b      	mov	r3, r1
 80121ac:	4610      	mov	r0, r2
 80121ae:	4619      	mov	r1, r3
 80121b0:	f7fe fa04 	bl	80105bc <__aeabi_ul2d>
 80121b4:	4602      	mov	r2, r0
 80121b6:	460b      	mov	r3, r1
 80121b8:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190

    // Преобразование миллисекунд в секунды для time_t
    time_t now = (time_t)(ms_now / 1000.0);
 80121bc:	f04f 0200 	mov.w	r2, #0
 80121c0:	4b67      	ldr	r3, [pc, #412]	@ (8012360 <logging+0x214>)
 80121c2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80121c6:	f7fe fb59 	bl	801087c <__aeabi_ddiv>
 80121ca:	4602      	mov	r2, r0
 80121cc:	460b      	mov	r3, r1
 80121ce:	4610      	mov	r0, r2
 80121d0:	4619      	mov	r1, r3
 80121d2:	f7fe fded 	bl	8010db0 <__aeabi_d2lz>
 80121d6:	4602      	mov	r2, r0
 80121d8:	460b      	mov	r3, r1
 80121da:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

    // Получение локального времени
    struct tm tm_info;
    localtime_r(&now, &tm_info);
 80121de:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80121e2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80121e6:	4611      	mov	r1, r2
 80121e8:	4618      	mov	r0, r3
 80121ea:	f023 fe97 	bl	8035f1c <localtime_r>

    // Форматирование времени
    char time_str[64];
    time_len = strftime(time_str, sizeof(time_str), "%Y-%m-%d %H:%M:%S", &tm_info);
 80121ee:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80121f2:	f107 000c 	add.w	r0, r7, #12
 80121f6:	4a5b      	ldr	r2, [pc, #364]	@ (8012364 <logging+0x218>)
 80121f8:	2140      	movs	r1, #64	@ 0x40
 80121fa:	f024 fca1 	bl	8036b40 <strftime>
 80121fe:	4603      	mov	r3, r0
 8012200:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c

    // Вычисление миллисекунд
    int millis = (int)(ms_now) % 1000;
 8012204:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8012208:	f7fe fcbe 	bl	8010b88 <__aeabi_d2iz>
 801220c:	4603      	mov	r3, r0
 801220e:	4a56      	ldr	r2, [pc, #344]	@ (8012368 <logging+0x21c>)
 8012210:	fb82 1203 	smull	r1, r2, r2, r3
 8012214:	1191      	asrs	r1, r2, #6
 8012216:	17da      	asrs	r2, r3, #31
 8012218:	1a8a      	subs	r2, r1, r2
 801221a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801221e:	fb01 f202 	mul.w	r2, r1, r2
 8012222:	1a9b      	subs	r3, r3, r2
 8012224:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188

    // Добавление миллисекунд к строке времени
    time_len += snprintf(time_str + time_len, sizeof(time_str) - time_len, ".%03d", millis);
 8012228:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801222c:	f107 020c 	add.w	r2, r7, #12
 8012230:	18d0      	adds	r0, r2, r3
 8012232:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8012236:	f1c3 0140 	rsb	r1, r3, #64	@ 0x40
 801223a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 801223e:	4a4b      	ldr	r2, [pc, #300]	@ (801236c <logging+0x220>)
 8012240:	f023 f8ac 	bl	803539c <snprintf>
 8012244:	4602      	mov	r2, r0
 8012246:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801224a:	4413      	add	r3, r2
 801224c:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c

    // Добавление разделителя, например, пробела
    time_str[time_len++] = ' ';
 8012250:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8012254:	1c5a      	adds	r2, r3, #1
 8012256:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 801225a:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 801225e:	f5a2 72ca 	sub.w	r2, r2, #404	@ 0x194
 8012262:	2120      	movs	r1, #32
 8012264:	54d1      	strb	r1, [r2, r3]
    time_str[time_len++] = '\0';
 8012266:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801226a:	1c5a      	adds	r2, r3, #1
 801226c:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 8012270:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8012274:	f5a2 72ca 	sub.w	r2, r2, #404	@ 0x194
 8012278:	2100      	movs	r1, #0
 801227a:	54d1      	strb	r1, [r2, r3]
    time_len += 1;
 801227c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8012280:	3301      	adds	r3, #1
 8012282:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c

    // Инициализация списка аргументов
    va_start(args, format);
 8012286:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 801228a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 801228e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8012292:	601a      	str	r2, [r3, #0]

    // Форматирование строки с ограничением на размер log_text
    formatted_len = vsnprintf(mess.log_text, LOG_MES_TEXT_LEN - 3, format, args);
 8012294:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8012298:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801229c:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 80122a0:	1c50      	adds	r0, r2, #1
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80122a8:	21fd      	movs	r1, #253	@ 0xfd
 80122aa:	f023 fb3f 	bl	803592c <vsnprintf>
 80122ae:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
    //formatted_len = vsnprintf(mess.log_text, LOG_MES_TEXT_LEN  - 3, format, args);

    // Завершение работы со списком аргументов
    va_end(args);

    snprintf(tmp_buf ,LOG_MES_TEXT_LEN, "%s %s\r\n", time_str, mess.log_text);
 80122b2:	f107 020c 	add.w	r2, r7, #12
 80122b6:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80122ba:	3301      	adds	r3, #1
 80122bc:	9300      	str	r3, [sp, #0]
 80122be:	4613      	mov	r3, r2
 80122c0:	4a2b      	ldr	r2, [pc, #172]	@ (8012370 <logging+0x224>)
 80122c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80122c6:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 80122ca:	f023 f867 	bl	803539c <snprintf>
    // Проверка длины отформатированной строки
     if (formatted_len >= 0 && formatted_len < LOG_MES_TEXT_LEN - 3) {
 80122ce:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	db12      	blt.n	80122fc <logging+0x1b0>
 80122d6:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80122da:	2bfc      	cmp	r3, #252	@ 0xfc
 80122dc:	dc0e      	bgt.n	80122fc <logging+0x1b0>
         mess.log_len = time_len + formatted_len;
 80122de:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80122e2:	b2da      	uxtb	r2, r3
 80122e4:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80122e8:	b2db      	uxtb	r3, r3
 80122ea:	4413      	add	r3, r2
 80122ec:	b2da      	uxtb	r2, r3
 80122ee:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80122f2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80122f6:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
 80122fa:	e006      	b.n	801230a <logging+0x1be>
     } else {
         mess.log_len = LOG_MES_TEXT_LEN - 3;
 80122fc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8012300:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8012304:	22fd      	movs	r2, #253	@ 0xfd
 8012306:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
     }

     strncpy(mess.log_text, tmp_buf, LOG_MES_TEXT_LEN);
 801230a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 801230e:	3301      	adds	r3, #1
 8012310:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8012314:	f8d7 119c 	ldr.w	r1, [r7, #412]	@ 0x19c
 8012318:	4618      	mov	r0, r3
 801231a:	f023 fdb0 	bl	8035e7e <strncpy>
//     mess.log_text[mess.log_len + 1] = '\n';
//     mess.log_text[mess.log_len + 2] = '\0';
//     mess.log_len += 2;  // Обновление длины для учёта \r\n

    // Проверка на существование функции перед вызовом
    if (_send_log_mess) {
 801231e:	4b15      	ldr	r3, [pc, #84]	@ (8012374 <logging+0x228>)
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	2b00      	cmp	r3, #0
 8012324:	d00f      	beq.n	8012346 <logging+0x1fa>
        _send_log_mess(mess);
 8012326:	4b13      	ldr	r3, [pc, #76]	@ (8012374 <logging+0x228>)
 8012328:	681d      	ldr	r5, [r3, #0]
 801232a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 801232e:	f5a3 7490 	sub.w	r4, r3, #288	@ 0x120
 8012332:	4668      	mov	r0, sp
 8012334:	f104 0310 	add.w	r3, r4, #16
 8012338:	22f2      	movs	r2, #242	@ 0xf2
 801233a:	4619      	mov	r1, r3
 801233c:	f024 ff94 	bl	8037268 <memcpy>
 8012340:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8012344:	47a8      	blx	r5
    }

    free(tmp_buf);
 8012346:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 801234a:	f00a fa0d 	bl	801c768 <vPortFree>
 801234e:	e000      	b.n	8012352 <logging+0x206>
    	return;
 8012350:	bf00      	nop
}
 8012352:	f507 77d2 	add.w	r7, r7, #420	@ 0x1a4
 8012356:	46bd      	mov	sp, r7
 8012358:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 801235c:	b003      	add	sp, #12
 801235e:	4770      	bx	lr
 8012360:	408f4000 	.word	0x408f4000
 8012364:	0803f3dc 	.word	0x0803f3dc
 8012368:	10624dd3 	.word	0x10624dd3
 801236c:	0803f3f0 	.word	0x0803f3f0
 8012370:	0803f3f8 	.word	0x0803f3f8
 8012374:	20000000 	.word	0x20000000

08012378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8012378:	b580      	push	{r7, lr}
 801237a:	b082      	sub	sp, #8
 801237c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 801237e:	b672      	cpsid	i
}
 8012380:	bf00      	nop

  /* USER CODE BEGIN 1 */
	__disable_irq();
	SCB->VTOR = (uint32_t)0x08000000 | (0x08010000 & (uint32_t)0x1FFFFF80);
 8012382:	4b10      	ldr	r3, [pc, #64]	@ (80123c4 <main+0x4c>)
 8012384:	4a10      	ldr	r2, [pc, #64]	@ (80123c8 <main+0x50>)
 8012386:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8012388:	b662      	cpsie	i
}
 801238a:	bf00      	nop
	 //NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x08010000);
	__enable_irq();

	volatile int i = 1000000;
 801238c:	4b0f      	ldr	r3, [pc, #60]	@ (80123cc <main+0x54>)
 801238e:	607b      	str	r3, [r7, #4]
	while (i > 0){ //delay for startup
 8012390:	e002      	b.n	8012398 <main+0x20>
		i--;
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	3b01      	subs	r3, #1
 8012396:	607b      	str	r3, [r7, #4]
	while (i > 0){ //delay for startup
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	2b00      	cmp	r3, #0
 801239c:	dcf9      	bgt.n	8012392 <main+0x1a>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 801239e:	f003 fbd5 	bl	8015b4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80123a2:	f000 f815 	bl	80123d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80123a6:	f7ff fd71 	bl	8011e8c <MX_GPIO_Init>
  MX_SPI2_Init();
 80123aa:	f000 f891 	bl	80124d0 <MX_SPI2_Init>
  MX_I2C1_Init();
 80123ae:	f7ff fdf7 	bl	8011fa0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80123b2:	f006 fdcd 	bl	8018f50 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80123b6:	f7fe fe91 	bl	80110dc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80123ba:	f006 fded 	bl	8018f98 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80123be:	bf00      	nop
 80123c0:	e7fd      	b.n	80123be <main+0x46>
 80123c2:	bf00      	nop
 80123c4:	e000ed00 	.word	0xe000ed00
 80123c8:	08010000 	.word	0x08010000
 80123cc:	000f4240 	.word	0x000f4240

080123d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80123d0:	b580      	push	{r7, lr}
 80123d2:	b094      	sub	sp, #80	@ 0x50
 80123d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80123d6:	f107 0320 	add.w	r3, r7, #32
 80123da:	2230      	movs	r2, #48	@ 0x30
 80123dc:	2100      	movs	r1, #0
 80123de:	4618      	mov	r0, r3
 80123e0:	f023 fd06 	bl	8035df0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80123e4:	f107 030c 	add.w	r3, r7, #12
 80123e8:	2200      	movs	r2, #0
 80123ea:	601a      	str	r2, [r3, #0]
 80123ec:	605a      	str	r2, [r3, #4]
 80123ee:	609a      	str	r2, [r3, #8]
 80123f0:	60da      	str	r2, [r3, #12]
 80123f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80123f4:	2300      	movs	r3, #0
 80123f6:	60bb      	str	r3, [r7, #8]
 80123f8:	4b27      	ldr	r3, [pc, #156]	@ (8012498 <SystemClock_Config+0xc8>)
 80123fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80123fc:	4a26      	ldr	r2, [pc, #152]	@ (8012498 <SystemClock_Config+0xc8>)
 80123fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8012402:	6413      	str	r3, [r2, #64]	@ 0x40
 8012404:	4b24      	ldr	r3, [pc, #144]	@ (8012498 <SystemClock_Config+0xc8>)
 8012406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012408:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801240c:	60bb      	str	r3, [r7, #8]
 801240e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8012410:	2300      	movs	r3, #0
 8012412:	607b      	str	r3, [r7, #4]
 8012414:	4b21      	ldr	r3, [pc, #132]	@ (801249c <SystemClock_Config+0xcc>)
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	4a20      	ldr	r2, [pc, #128]	@ (801249c <SystemClock_Config+0xcc>)
 801241a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801241e:	6013      	str	r3, [r2, #0]
 8012420:	4b1e      	ldr	r3, [pc, #120]	@ (801249c <SystemClock_Config+0xcc>)
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8012428:	607b      	str	r3, [r7, #4]
 801242a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 801242c:	2301      	movs	r3, #1
 801242e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8012430:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8012434:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8012436:	2302      	movs	r3, #2
 8012438:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801243a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 801243e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8012440:	2304      	movs	r3, #4
 8012442:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8012444:	2364      	movs	r3, #100	@ 0x64
 8012446:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8012448:	2302      	movs	r3, #2
 801244a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 801244c:	2304      	movs	r3, #4
 801244e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8012450:	f107 0320 	add.w	r3, r7, #32
 8012454:	4618      	mov	r0, r3
 8012456:	f004 fd73 	bl	8016f40 <HAL_RCC_OscConfig>
 801245a:	4603      	mov	r3, r0
 801245c:	2b00      	cmp	r3, #0
 801245e:	d001      	beq.n	8012464 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8012460:	f000 f830 	bl	80124c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8012464:	230f      	movs	r3, #15
 8012466:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8012468:	2302      	movs	r3, #2
 801246a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801246c:	2300      	movs	r3, #0
 801246e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8012470:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012474:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8012476:	2300      	movs	r3, #0
 8012478:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 801247a:	f107 030c 	add.w	r3, r7, #12
 801247e:	2103      	movs	r1, #3
 8012480:	4618      	mov	r0, r3
 8012482:	f004 ffd5 	bl	8017430 <HAL_RCC_ClockConfig>
 8012486:	4603      	mov	r3, r0
 8012488:	2b00      	cmp	r3, #0
 801248a:	d001      	beq.n	8012490 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 801248c:	f000 f81a 	bl	80124c4 <Error_Handler>
  }
}
 8012490:	bf00      	nop
 8012492:	3750      	adds	r7, #80	@ 0x50
 8012494:	46bd      	mov	sp, r7
 8012496:	bd80      	pop	{r7, pc}
 8012498:	40023800 	.word	0x40023800
 801249c:	40007000 	.word	0x40007000

080124a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80124a0:	b580      	push	{r7, lr}
 80124a2:	b082      	sub	sp, #8
 80124a4:	af00      	add	r7, sp, #0
 80124a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	4a04      	ldr	r2, [pc, #16]	@ (80124c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80124ae:	4293      	cmp	r3, r2
 80124b0:	d101      	bne.n	80124b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80124b2:	f003 fb6d 	bl	8015b90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80124b6:	bf00      	nop
 80124b8:	3708      	adds	r7, #8
 80124ba:	46bd      	mov	sp, r7
 80124bc:	bd80      	pop	{r7, pc}
 80124be:	bf00      	nop
 80124c0:	40014000 	.word	0x40014000

080124c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80124c4:	b480      	push	{r7}
 80124c6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80124c8:	b672      	cpsid	i
}
 80124ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80124cc:	bf00      	nop
 80124ce:	e7fd      	b.n	80124cc <Error_Handler+0x8>

080124d0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80124d0:	b580      	push	{r7, lr}
 80124d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80124d4:	4b17      	ldr	r3, [pc, #92]	@ (8012534 <MX_SPI2_Init+0x64>)
 80124d6:	4a18      	ldr	r2, [pc, #96]	@ (8012538 <MX_SPI2_Init+0x68>)
 80124d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80124da:	4b16      	ldr	r3, [pc, #88]	@ (8012534 <MX_SPI2_Init+0x64>)
 80124dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80124e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80124e2:	4b14      	ldr	r3, [pc, #80]	@ (8012534 <MX_SPI2_Init+0x64>)
 80124e4:	2200      	movs	r2, #0
 80124e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80124e8:	4b12      	ldr	r3, [pc, #72]	@ (8012534 <MX_SPI2_Init+0x64>)
 80124ea:	2200      	movs	r2, #0
 80124ec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80124ee:	4b11      	ldr	r3, [pc, #68]	@ (8012534 <MX_SPI2_Init+0x64>)
 80124f0:	2200      	movs	r2, #0
 80124f2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80124f4:	4b0f      	ldr	r3, [pc, #60]	@ (8012534 <MX_SPI2_Init+0x64>)
 80124f6:	2200      	movs	r2, #0
 80124f8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80124fa:	4b0e      	ldr	r3, [pc, #56]	@ (8012534 <MX_SPI2_Init+0x64>)
 80124fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012500:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8012502:	4b0c      	ldr	r3, [pc, #48]	@ (8012534 <MX_SPI2_Init+0x64>)
 8012504:	2210      	movs	r2, #16
 8012506:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8012508:	4b0a      	ldr	r3, [pc, #40]	@ (8012534 <MX_SPI2_Init+0x64>)
 801250a:	2200      	movs	r2, #0
 801250c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 801250e:	4b09      	ldr	r3, [pc, #36]	@ (8012534 <MX_SPI2_Init+0x64>)
 8012510:	2200      	movs	r2, #0
 8012512:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012514:	4b07      	ldr	r3, [pc, #28]	@ (8012534 <MX_SPI2_Init+0x64>)
 8012516:	2200      	movs	r2, #0
 8012518:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 801251a:	4b06      	ldr	r3, [pc, #24]	@ (8012534 <MX_SPI2_Init+0x64>)
 801251c:	220a      	movs	r2, #10
 801251e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8012520:	4804      	ldr	r0, [pc, #16]	@ (8012534 <MX_SPI2_Init+0x64>)
 8012522:	f005 f9d7 	bl	80178d4 <HAL_SPI_Init>
 8012526:	4603      	mov	r3, r0
 8012528:	2b00      	cmp	r3, #0
 801252a:	d001      	beq.n	8012530 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 801252c:	f7ff ffca 	bl	80124c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8012530:	bf00      	nop
 8012532:	bd80      	pop	{r7, pc}
 8012534:	20000a70 	.word	0x20000a70
 8012538:	40003800 	.word	0x40003800

0801253c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 801253c:	b580      	push	{r7, lr}
 801253e:	b08a      	sub	sp, #40	@ 0x28
 8012540:	af00      	add	r7, sp, #0
 8012542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012544:	f107 0314 	add.w	r3, r7, #20
 8012548:	2200      	movs	r2, #0
 801254a:	601a      	str	r2, [r3, #0]
 801254c:	605a      	str	r2, [r3, #4]
 801254e:	609a      	str	r2, [r3, #8]
 8012550:	60da      	str	r2, [r3, #12]
 8012552:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	4a19      	ldr	r2, [pc, #100]	@ (80125c0 <HAL_SPI_MspInit+0x84>)
 801255a:	4293      	cmp	r3, r2
 801255c:	d12c      	bne.n	80125b8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 801255e:	2300      	movs	r3, #0
 8012560:	613b      	str	r3, [r7, #16]
 8012562:	4b18      	ldr	r3, [pc, #96]	@ (80125c4 <HAL_SPI_MspInit+0x88>)
 8012564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012566:	4a17      	ldr	r2, [pc, #92]	@ (80125c4 <HAL_SPI_MspInit+0x88>)
 8012568:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801256c:	6413      	str	r3, [r2, #64]	@ 0x40
 801256e:	4b15      	ldr	r3, [pc, #84]	@ (80125c4 <HAL_SPI_MspInit+0x88>)
 8012570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012572:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8012576:	613b      	str	r3, [r7, #16]
 8012578:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 801257a:	2300      	movs	r3, #0
 801257c:	60fb      	str	r3, [r7, #12]
 801257e:	4b11      	ldr	r3, [pc, #68]	@ (80125c4 <HAL_SPI_MspInit+0x88>)
 8012580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012582:	4a10      	ldr	r2, [pc, #64]	@ (80125c4 <HAL_SPI_MspInit+0x88>)
 8012584:	f043 0302 	orr.w	r3, r3, #2
 8012588:	6313      	str	r3, [r2, #48]	@ 0x30
 801258a:	4b0e      	ldr	r3, [pc, #56]	@ (80125c4 <HAL_SPI_MspInit+0x88>)
 801258c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801258e:	f003 0302 	and.w	r3, r3, #2
 8012592:	60fb      	str	r3, [r7, #12]
 8012594:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8012596:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 801259a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801259c:	2302      	movs	r3, #2
 801259e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80125a0:	2300      	movs	r3, #0
 80125a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80125a4:	2302      	movs	r3, #2
 80125a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80125a8:	2305      	movs	r3, #5
 80125aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80125ac:	f107 0314 	add.w	r3, r7, #20
 80125b0:	4619      	mov	r1, r3
 80125b2:	4805      	ldr	r0, [pc, #20]	@ (80125c8 <HAL_SPI_MspInit+0x8c>)
 80125b4:	f003 fc2e 	bl	8015e14 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80125b8:	bf00      	nop
 80125ba:	3728      	adds	r7, #40	@ 0x28
 80125bc:	46bd      	mov	sp, r7
 80125be:	bd80      	pop	{r7, pc}
 80125c0:	40003800 	.word	0x40003800
 80125c4:	40023800 	.word	0x40023800
 80125c8:	40020400 	.word	0x40020400

080125cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80125cc:	b580      	push	{r7, lr}
 80125ce:	b082      	sub	sp, #8
 80125d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80125d2:	2300      	movs	r3, #0
 80125d4:	607b      	str	r3, [r7, #4]
 80125d6:	4b12      	ldr	r3, [pc, #72]	@ (8012620 <HAL_MspInit+0x54>)
 80125d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80125da:	4a11      	ldr	r2, [pc, #68]	@ (8012620 <HAL_MspInit+0x54>)
 80125dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80125e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80125e2:	4b0f      	ldr	r3, [pc, #60]	@ (8012620 <HAL_MspInit+0x54>)
 80125e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80125e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80125ea:	607b      	str	r3, [r7, #4]
 80125ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80125ee:	2300      	movs	r3, #0
 80125f0:	603b      	str	r3, [r7, #0]
 80125f2:	4b0b      	ldr	r3, [pc, #44]	@ (8012620 <HAL_MspInit+0x54>)
 80125f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80125f6:	4a0a      	ldr	r2, [pc, #40]	@ (8012620 <HAL_MspInit+0x54>)
 80125f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80125fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80125fe:	4b08      	ldr	r3, [pc, #32]	@ (8012620 <HAL_MspInit+0x54>)
 8012600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012602:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8012606:	603b      	str	r3, [r7, #0]
 8012608:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 801260a:	2200      	movs	r2, #0
 801260c:	210f      	movs	r1, #15
 801260e:	f06f 0001 	mvn.w	r0, #1
 8012612:	f003 fbd0 	bl	8015db6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8012616:	bf00      	nop
 8012618:	3708      	adds	r7, #8
 801261a:	46bd      	mov	sp, r7
 801261c:	bd80      	pop	{r7, pc}
 801261e:	bf00      	nop
 8012620:	40023800 	.word	0x40023800

08012624 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8012624:	b580      	push	{r7, lr}
 8012626:	b08c      	sub	sp, #48	@ 0x30
 8012628:	af00      	add	r7, sp, #0
 801262a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 801262c:	2300      	movs	r3, #0
 801262e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8012630:	2300      	movs	r3, #0
 8012632:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8012634:	2300      	movs	r3, #0
 8012636:	60bb      	str	r3, [r7, #8]
 8012638:	4b2e      	ldr	r3, [pc, #184]	@ (80126f4 <HAL_InitTick+0xd0>)
 801263a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801263c:	4a2d      	ldr	r2, [pc, #180]	@ (80126f4 <HAL_InitTick+0xd0>)
 801263e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012642:	6453      	str	r3, [r2, #68]	@ 0x44
 8012644:	4b2b      	ldr	r3, [pc, #172]	@ (80126f4 <HAL_InitTick+0xd0>)
 8012646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012648:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801264c:	60bb      	str	r3, [r7, #8]
 801264e:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8012650:	f107 020c 	add.w	r2, r7, #12
 8012654:	f107 0310 	add.w	r3, r7, #16
 8012658:	4611      	mov	r1, r2
 801265a:	4618      	mov	r0, r3
 801265c:	f005 f908 	bl	8017870 <HAL_RCC_GetClockConfig>
  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8012660:	f005 f8f2 	bl	8017848 <HAL_RCC_GetPCLK2Freq>
 8012664:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8012666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012668:	4a23      	ldr	r2, [pc, #140]	@ (80126f8 <HAL_InitTick+0xd4>)
 801266a:	fba2 2303 	umull	r2, r3, r2, r3
 801266e:	0c9b      	lsrs	r3, r3, #18
 8012670:	3b01      	subs	r3, #1
 8012672:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8012674:	4b21      	ldr	r3, [pc, #132]	@ (80126fc <HAL_InitTick+0xd8>)
 8012676:	4a22      	ldr	r2, [pc, #136]	@ (8012700 <HAL_InitTick+0xdc>)
 8012678:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 801267a:	4b20      	ldr	r3, [pc, #128]	@ (80126fc <HAL_InitTick+0xd8>)
 801267c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8012680:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8012682:	4a1e      	ldr	r2, [pc, #120]	@ (80126fc <HAL_InitTick+0xd8>)
 8012684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012686:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8012688:	4b1c      	ldr	r3, [pc, #112]	@ (80126fc <HAL_InitTick+0xd8>)
 801268a:	2200      	movs	r2, #0
 801268c:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 801268e:	4b1b      	ldr	r3, [pc, #108]	@ (80126fc <HAL_InitTick+0xd8>)
 8012690:	2200      	movs	r2, #0
 8012692:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8012694:	4b19      	ldr	r3, [pc, #100]	@ (80126fc <HAL_InitTick+0xd8>)
 8012696:	2200      	movs	r2, #0
 8012698:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 801269a:	4818      	ldr	r0, [pc, #96]	@ (80126fc <HAL_InitTick+0xd8>)
 801269c:	f005 feec 	bl	8018478 <HAL_TIM_Base_Init>
 80126a0:	4603      	mov	r3, r0
 80126a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80126a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d11b      	bne.n	80126e6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 80126ae:	4813      	ldr	r0, [pc, #76]	@ (80126fc <HAL_InitTick+0xd8>)
 80126b0:	f005 ff3c 	bl	801852c <HAL_TIM_Base_Start_IT>
 80126b4:	4603      	mov	r3, r0
 80126b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80126ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d111      	bne.n	80126e6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80126c2:	2018      	movs	r0, #24
 80126c4:	f003 fb93 	bl	8015dee <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	2b0f      	cmp	r3, #15
 80126cc:	d808      	bhi.n	80126e0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 80126ce:	2200      	movs	r2, #0
 80126d0:	6879      	ldr	r1, [r7, #4]
 80126d2:	2018      	movs	r0, #24
 80126d4:	f003 fb6f 	bl	8015db6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80126d8:	4a0a      	ldr	r2, [pc, #40]	@ (8012704 <HAL_InitTick+0xe0>)
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	6013      	str	r3, [r2, #0]
 80126de:	e002      	b.n	80126e6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80126e0:	2301      	movs	r3, #1
 80126e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80126e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80126ea:	4618      	mov	r0, r3
 80126ec:	3730      	adds	r7, #48	@ 0x30
 80126ee:	46bd      	mov	sp, r7
 80126f0:	bd80      	pop	{r7, pc}
 80126f2:	bf00      	nop
 80126f4:	40023800 	.word	0x40023800
 80126f8:	431bde83 	.word	0x431bde83
 80126fc:	20000ac8 	.word	0x20000ac8
 8012700:	40014000 	.word	0x40014000
 8012704:	20000074 	.word	0x20000074

08012708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8012708:	b480      	push	{r7}
 801270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 801270c:	bf00      	nop
 801270e:	e7fd      	b.n	801270c <NMI_Handler+0x4>

08012710 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8012710:	b480      	push	{r7}
 8012712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8012714:	bf00      	nop
 8012716:	e7fd      	b.n	8012714 <HardFault_Handler+0x4>

08012718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8012718:	b480      	push	{r7}
 801271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 801271c:	bf00      	nop
 801271e:	e7fd      	b.n	801271c <MemManage_Handler+0x4>

08012720 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8012720:	b480      	push	{r7}
 8012722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8012724:	bf00      	nop
 8012726:	e7fd      	b.n	8012724 <BusFault_Handler+0x4>

08012728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8012728:	b480      	push	{r7}
 801272a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801272c:	bf00      	nop
 801272e:	e7fd      	b.n	801272c <UsageFault_Handler+0x4>

08012730 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8012730:	b480      	push	{r7}
 8012732:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8012734:	bf00      	nop
 8012736:	46bd      	mov	sp, r7
 8012738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801273c:	4770      	bx	lr
	...

08012740 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8012740:	b580      	push	{r7, lr}
 8012742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8012744:	4802      	ldr	r0, [pc, #8]	@ (8012750 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8012746:	f005 ff53 	bl	80185f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 801274a:	bf00      	nop
 801274c:	bd80      	pop	{r7, pc}
 801274e:	bf00      	nop
 8012750:	20000ac8 	.word	0x20000ac8

08012754 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8012754:	b480      	push	{r7}
 8012756:	af00      	add	r7, sp, #0
  return 1;
 8012758:	2301      	movs	r3, #1
}
 801275a:	4618      	mov	r0, r3
 801275c:	46bd      	mov	sp, r7
 801275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012762:	4770      	bx	lr

08012764 <_kill>:

int _kill(int pid, int sig)
{
 8012764:	b580      	push	{r7, lr}
 8012766:	b082      	sub	sp, #8
 8012768:	af00      	add	r7, sp, #0
 801276a:	6078      	str	r0, [r7, #4]
 801276c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 801276e:	f024 fd43 	bl	80371f8 <__errno>
 8012772:	4603      	mov	r3, r0
 8012774:	2216      	movs	r2, #22
 8012776:	601a      	str	r2, [r3, #0]
  return -1;
 8012778:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801277c:	4618      	mov	r0, r3
 801277e:	3708      	adds	r7, #8
 8012780:	46bd      	mov	sp, r7
 8012782:	bd80      	pop	{r7, pc}

08012784 <_exit>:

void _exit (int status)
{
 8012784:	b580      	push	{r7, lr}
 8012786:	b082      	sub	sp, #8
 8012788:	af00      	add	r7, sp, #0
 801278a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 801278c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8012790:	6878      	ldr	r0, [r7, #4]
 8012792:	f7ff ffe7 	bl	8012764 <_kill>
  while (1) {}    /* Make sure we hang here */
 8012796:	bf00      	nop
 8012798:	e7fd      	b.n	8012796 <_exit+0x12>

0801279a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 801279a:	b580      	push	{r7, lr}
 801279c:	b086      	sub	sp, #24
 801279e:	af00      	add	r7, sp, #0
 80127a0:	60f8      	str	r0, [r7, #12]
 80127a2:	60b9      	str	r1, [r7, #8]
 80127a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80127a6:	2300      	movs	r3, #0
 80127a8:	617b      	str	r3, [r7, #20]
 80127aa:	e00a      	b.n	80127c2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80127ac:	f3af 8000 	nop.w
 80127b0:	4601      	mov	r1, r0
 80127b2:	68bb      	ldr	r3, [r7, #8]
 80127b4:	1c5a      	adds	r2, r3, #1
 80127b6:	60ba      	str	r2, [r7, #8]
 80127b8:	b2ca      	uxtb	r2, r1
 80127ba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80127bc:	697b      	ldr	r3, [r7, #20]
 80127be:	3301      	adds	r3, #1
 80127c0:	617b      	str	r3, [r7, #20]
 80127c2:	697a      	ldr	r2, [r7, #20]
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	429a      	cmp	r2, r3
 80127c8:	dbf0      	blt.n	80127ac <_read+0x12>
  }

  return len;
 80127ca:	687b      	ldr	r3, [r7, #4]
}
 80127cc:	4618      	mov	r0, r3
 80127ce:	3718      	adds	r7, #24
 80127d0:	46bd      	mov	sp, r7
 80127d2:	bd80      	pop	{r7, pc}

080127d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80127d4:	b580      	push	{r7, lr}
 80127d6:	b086      	sub	sp, #24
 80127d8:	af00      	add	r7, sp, #0
 80127da:	60f8      	str	r0, [r7, #12]
 80127dc:	60b9      	str	r1, [r7, #8]
 80127de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80127e0:	2300      	movs	r3, #0
 80127e2:	617b      	str	r3, [r7, #20]
 80127e4:	e009      	b.n	80127fa <_write+0x26>
  {
    __io_putchar(*ptr++);
 80127e6:	68bb      	ldr	r3, [r7, #8]
 80127e8:	1c5a      	adds	r2, r3, #1
 80127ea:	60ba      	str	r2, [r7, #8]
 80127ec:	781b      	ldrb	r3, [r3, #0]
 80127ee:	4618      	mov	r0, r3
 80127f0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80127f4:	697b      	ldr	r3, [r7, #20]
 80127f6:	3301      	adds	r3, #1
 80127f8:	617b      	str	r3, [r7, #20]
 80127fa:	697a      	ldr	r2, [r7, #20]
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	429a      	cmp	r2, r3
 8012800:	dbf1      	blt.n	80127e6 <_write+0x12>
  }
  return len;
 8012802:	687b      	ldr	r3, [r7, #4]
}
 8012804:	4618      	mov	r0, r3
 8012806:	3718      	adds	r7, #24
 8012808:	46bd      	mov	sp, r7
 801280a:	bd80      	pop	{r7, pc}

0801280c <_close>:

int _close(int file)
{
 801280c:	b480      	push	{r7}
 801280e:	b083      	sub	sp, #12
 8012810:	af00      	add	r7, sp, #0
 8012812:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8012814:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8012818:	4618      	mov	r0, r3
 801281a:	370c      	adds	r7, #12
 801281c:	46bd      	mov	sp, r7
 801281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012822:	4770      	bx	lr

08012824 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8012824:	b480      	push	{r7}
 8012826:	b083      	sub	sp, #12
 8012828:	af00      	add	r7, sp, #0
 801282a:	6078      	str	r0, [r7, #4]
 801282c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 801282e:	683b      	ldr	r3, [r7, #0]
 8012830:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8012834:	605a      	str	r2, [r3, #4]
  return 0;
 8012836:	2300      	movs	r3, #0
}
 8012838:	4618      	mov	r0, r3
 801283a:	370c      	adds	r7, #12
 801283c:	46bd      	mov	sp, r7
 801283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012842:	4770      	bx	lr

08012844 <_isatty>:

int _isatty(int file)
{
 8012844:	b480      	push	{r7}
 8012846:	b083      	sub	sp, #12
 8012848:	af00      	add	r7, sp, #0
 801284a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 801284c:	2301      	movs	r3, #1
}
 801284e:	4618      	mov	r0, r3
 8012850:	370c      	adds	r7, #12
 8012852:	46bd      	mov	sp, r7
 8012854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012858:	4770      	bx	lr

0801285a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801285a:	b480      	push	{r7}
 801285c:	b085      	sub	sp, #20
 801285e:	af00      	add	r7, sp, #0
 8012860:	60f8      	str	r0, [r7, #12]
 8012862:	60b9      	str	r1, [r7, #8]
 8012864:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8012866:	2300      	movs	r3, #0
}
 8012868:	4618      	mov	r0, r3
 801286a:	3714      	adds	r7, #20
 801286c:	46bd      	mov	sp, r7
 801286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012872:	4770      	bx	lr

08012874 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8012874:	b580      	push	{r7, lr}
 8012876:	b086      	sub	sp, #24
 8012878:	af00      	add	r7, sp, #0
 801287a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 801287c:	4a14      	ldr	r2, [pc, #80]	@ (80128d0 <_sbrk+0x5c>)
 801287e:	4b15      	ldr	r3, [pc, #84]	@ (80128d4 <_sbrk+0x60>)
 8012880:	1ad3      	subs	r3, r2, r3
 8012882:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8012884:	697b      	ldr	r3, [r7, #20]
 8012886:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8012888:	4b13      	ldr	r3, [pc, #76]	@ (80128d8 <_sbrk+0x64>)
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	2b00      	cmp	r3, #0
 801288e:	d102      	bne.n	8012896 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8012890:	4b11      	ldr	r3, [pc, #68]	@ (80128d8 <_sbrk+0x64>)
 8012892:	4a12      	ldr	r2, [pc, #72]	@ (80128dc <_sbrk+0x68>)
 8012894:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8012896:	4b10      	ldr	r3, [pc, #64]	@ (80128d8 <_sbrk+0x64>)
 8012898:	681a      	ldr	r2, [r3, #0]
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	4413      	add	r3, r2
 801289e:	693a      	ldr	r2, [r7, #16]
 80128a0:	429a      	cmp	r2, r3
 80128a2:	d207      	bcs.n	80128b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80128a4:	f024 fca8 	bl	80371f8 <__errno>
 80128a8:	4603      	mov	r3, r0
 80128aa:	220c      	movs	r2, #12
 80128ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80128ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80128b2:	e009      	b.n	80128c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80128b4:	4b08      	ldr	r3, [pc, #32]	@ (80128d8 <_sbrk+0x64>)
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80128ba:	4b07      	ldr	r3, [pc, #28]	@ (80128d8 <_sbrk+0x64>)
 80128bc:	681a      	ldr	r2, [r3, #0]
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	4413      	add	r3, r2
 80128c2:	4a05      	ldr	r2, [pc, #20]	@ (80128d8 <_sbrk+0x64>)
 80128c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80128c6:	68fb      	ldr	r3, [r7, #12]
}
 80128c8:	4618      	mov	r0, r3
 80128ca:	3718      	adds	r7, #24
 80128cc:	46bd      	mov	sp, r7
 80128ce:	bd80      	pop	{r7, pc}
 80128d0:	20020000 	.word	0x20020000
 80128d4:	00000800 	.word	0x00000800
 80128d8:	20000b14 	.word	0x20000b14
 80128dc:	200184b0 	.word	0x200184b0

080128e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80128e0:	b480      	push	{r7}
 80128e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80128e4:	4b06      	ldr	r3, [pc, #24]	@ (8012900 <SystemInit+0x20>)
 80128e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80128ea:	4a05      	ldr	r2, [pc, #20]	@ (8012900 <SystemInit+0x20>)
 80128ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80128f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80128f4:	bf00      	nop
 80128f6:	46bd      	mov	sp, r7
 80128f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128fc:	4770      	bx	lr
 80128fe:	bf00      	nop
 8012900:	e000ed00 	.word	0xe000ed00

08012904 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8012904:	f8df d034 	ldr.w	sp, [pc, #52]	@ 801293c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8012908:	f7ff ffea 	bl	80128e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 801290c:	480c      	ldr	r0, [pc, #48]	@ (8012940 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 801290e:	490d      	ldr	r1, [pc, #52]	@ (8012944 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8012910:	4a0d      	ldr	r2, [pc, #52]	@ (8012948 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8012912:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8012914:	e002      	b.n	801291c <LoopCopyDataInit>

08012916 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8012916:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8012918:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801291a:	3304      	adds	r3, #4

0801291c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801291c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801291e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8012920:	d3f9      	bcc.n	8012916 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8012922:	4a0a      	ldr	r2, [pc, #40]	@ (801294c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8012924:	4c0a      	ldr	r4, [pc, #40]	@ (8012950 <LoopFillZerobss+0x22>)
  movs r3, #0
 8012926:	2300      	movs	r3, #0
  b LoopFillZerobss
 8012928:	e001      	b.n	801292e <LoopFillZerobss>

0801292a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801292a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801292c:	3204      	adds	r2, #4

0801292e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801292e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8012930:	d3fb      	bcc.n	801292a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8012932:	f024 fc6f 	bl	8037214 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8012936:	f7ff fd1f 	bl	8012378 <main>
  bx  lr    
 801293a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 801293c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8012940:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8012944:	200009c8 	.word	0x200009c8
  ldr r2, =_sidata
 8012948:	08044f74 	.word	0x08044f74
  ldr r2, =_sbss
 801294c:	200009c8 	.word	0x200009c8
  ldr r4, =_ebss
 8012950:	200184ac 	.word	0x200184ac

08012954 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8012954:	e7fe      	b.n	8012954 <ADC_IRQHandler>

08012956 <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 8012956:	b580      	push	{r7, lr}
 8012958:	b084      	sub	sp, #16
 801295a:	af00      	add	r7, sp, #0
 801295c:	6078      	str	r0, [r7, #4]
 801295e:	6039      	str	r1, [r7, #0]
  void *p = pvPortMalloc(cnt * size);
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	683a      	ldr	r2, [r7, #0]
 8012964:	fb02 f303 	mul.w	r3, r2, r3
 8012968:	4618      	mov	r0, r3
 801296a:	f009 fe2f 	bl	801c5cc <pvPortMalloc>
 801296e:	4603      	mov	r3, r0
 8012970:	60fb      	str	r3, [r7, #12]
  if (p != NULL) memset(p, 0, size * cnt);
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	2b00      	cmp	r3, #0
 8012976:	d008      	beq.n	801298a <mg_calloc+0x34>
 8012978:	683b      	ldr	r3, [r7, #0]
 801297a:	687a      	ldr	r2, [r7, #4]
 801297c:	fb02 f303 	mul.w	r3, r2, r3
 8012980:	461a      	mov	r2, r3
 8012982:	2100      	movs	r1, #0
 8012984:	68f8      	ldr	r0, [r7, #12]
 8012986:	f023 fa33 	bl	8035df0 <memset>
  return p;
 801298a:	68fb      	ldr	r3, [r7, #12]
}
 801298c:	4618      	mov	r0, r3
 801298e:	3710      	adds	r7, #16
 8012990:	46bd      	mov	sp, r7
 8012992:	bd80      	pop	{r7, pc}

08012994 <handle_ram_status_get>:

static void (*r_w_parameter)(void * parameter, sett_type_t parameter_type,  sett_direction_t direction) = NULL;



static void handle_ram_status_get(struct mg_connection *c){
 8012994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012996:	b093      	sub	sp, #76	@ 0x4c
 8012998:	af08      	add	r7, sp, #32
 801299a:	6078      	str	r0, [r7, #4]
	HeapStats_t heap_status;
	vPortGetHeapStats(&heap_status);
 801299c:	f107 030c 	add.w	r3, r7, #12
 80129a0:	4618      	mov	r0, r3
 80129a2:	f00a f803 	bl	801c9ac <vPortGetHeapStats>

	logging(1, "Start execute API RAM status");
 80129a6:	490e      	ldr	r1, [pc, #56]	@ (80129e0 <handle_ram_status_get+0x4c>)
 80129a8:	2001      	movs	r0, #1
 80129aa:	f7ff fbcf 	bl	801214c <logging>
                  "\"xNumberOfFreeBlocks\": \"%u\","
                  "\"xMinimumEverFreeBytesRemaining\": \"%u\","
                  "\"xNumberOfSuccessfulAllocations\": \"%u\","
                  "\"xNumberOfSuccessfulFrees\": \"%u\""
                  "}\r\n",
                  (unsigned int)heap_status.xAvailableHeapSpaceInBytes,
 80129ae:	68fb      	ldr	r3, [r7, #12]
                  (unsigned int)heap_status.xSizeOfLargestFreeBlockInBytes,
 80129b0:	693a      	ldr	r2, [r7, #16]
                  (unsigned int)heap_status.xSizeOfSmallestFreeBlockInBytes,
 80129b2:	6979      	ldr	r1, [r7, #20]
                  (unsigned int)heap_status.xNumberOfFreeBlocks,
 80129b4:	69b8      	ldr	r0, [r7, #24]
                  (unsigned int)heap_status.xMinimumEverFreeBytesRemaining,
 80129b6:	69fc      	ldr	r4, [r7, #28]
                  (unsigned int)heap_status.xNumberOfSuccessfulAllocations,
 80129b8:	6a3d      	ldr	r5, [r7, #32]
                  (unsigned int)heap_status.xNumberOfSuccessfulFrees);
 80129ba:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
    mg_http_reply(c, 200, "Content-Type: application/json\r\n"
 80129bc:	9606      	str	r6, [sp, #24]
 80129be:	9505      	str	r5, [sp, #20]
 80129c0:	9404      	str	r4, [sp, #16]
 80129c2:	9003      	str	r0, [sp, #12]
 80129c4:	9102      	str	r1, [sp, #8]
 80129c6:	9201      	str	r2, [sp, #4]
 80129c8:	9300      	str	r3, [sp, #0]
 80129ca:	4b06      	ldr	r3, [pc, #24]	@ (80129e4 <handle_ram_status_get+0x50>)
 80129cc:	4a06      	ldr	r2, [pc, #24]	@ (80129e8 <handle_ram_status_get+0x54>)
 80129ce:	21c8      	movs	r1, #200	@ 0xc8
 80129d0:	6878      	ldr	r0, [r7, #4]
 80129d2:	f015 fc5b 	bl	802828c <mg_http_reply>
}
 80129d6:	bf00      	nop
 80129d8:	372c      	adds	r7, #44	@ 0x2c
 80129da:	46bd      	mov	sp, r7
 80129dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80129de:	bf00      	nop
 80129e0:	0803f400 	.word	0x0803f400
 80129e4:	0803f420 	.word	0x0803f420
 80129e8:	0803f524 	.word	0x0803f524

080129ec <calc_file_md5sum>:

static int calc_file_md5sum(const char * path, char md5_str[static 33]){
 80129ec:	b580      	push	{r7, lr}
 80129ee:	b0a0      	sub	sp, #128	@ 0x80
 80129f0:	af00      	add	r7, sp, #0
 80129f2:	6078      	str	r0, [r7, #4]
 80129f4:	6039      	str	r1, [r7, #0]
	uint32_t md5_str_size = 33; // 32 символа для MD5 + 1 символ для '\0'
 80129f6:	2321      	movs	r3, #33	@ 0x21
 80129f8:	67bb      	str	r3, [r7, #120]	@ 0x78
	uint16_t  buff_len = 1024;
 80129fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80129fe:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
	uint8_t	  digest_len = 16;
 8012a02:	2310      	movs	r3, #16
 8012a04:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
	char * buff = calloc(buff_len, 1);
 8012a08:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8012a0c:	2101      	movs	r1, #1
 8012a0e:	4618      	mov	r0, r3
 8012a10:	f7ff ffa1 	bl	8012956 <mg_calloc>
 8012a14:	6738      	str	r0, [r7, #112]	@ 0x70
	if (buff == NULL){
 8012a16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d105      	bne.n	8012a28 <calc_file_md5sum+0x3c>
		free(buff);
 8012a1c:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8012a1e:	f009 fea3 	bl	801c768 <vPortFree>
		return -1;
 8012a22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012a26:	e067      	b.n	8012af8 <calc_file_md5sum+0x10c>
	}


	struct mg_fd *fd = mg_fs_open(&mg_fs_lfs, path, MG_FS_READ); //Try to open file
 8012a28:	2201      	movs	r2, #1
 8012a2a:	6879      	ldr	r1, [r7, #4]
 8012a2c:	4834      	ldr	r0, [pc, #208]	@ (8012b00 <calc_file_md5sum+0x114>)
 8012a2e:	f014 f8c5 	bl	8026bbc <mg_fs_open>
 8012a32:	66f8      	str	r0, [r7, #108]	@ 0x6c
	if (fd==NULL){
 8012a34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d108      	bne.n	8012a4c <calc_file_md5sum+0x60>
		mg_fs_close(fd);
 8012a3a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8012a3c:	f014 f8e5 	bl	8026c0a <mg_fs_close>
		free(buff);
 8012a40:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8012a42:	f009 fe91 	bl	801c768 <vPortFree>
		return -2;
 8012a46:	f06f 0301 	mvn.w	r3, #1
 8012a4a:	e055      	b.n	8012af8 <calc_file_md5sum+0x10c>
		}


	mg_md5_ctx md5_ctx;
	mg_md5_init(&md5_ctx);
 8012a4c:	f107 030c 	add.w	r3, r7, #12
 8012a50:	4618      	mov	r0, r3
 8012a52:	f018 fd2d 	bl	802b4b0 <mg_md5_init>
	size_t bytes_read;
	while ((bytes_read = mg_fs_lfs.rd(fd->fd, buff, buff_len)) > 0) {
 8012a56:	e006      	b.n	8012a66 <calc_file_md5sum+0x7a>
		mg_md5_update(&md5_ctx, (const unsigned char *)buff, bytes_read);
 8012a58:	f107 030c 	add.w	r3, r7, #12
 8012a5c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8012a5e:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8012a60:	4618      	mov	r0, r3
 8012a62:	f019 fbd1 	bl	802c208 <mg_md5_update>
	while ((bytes_read = mg_fs_lfs.rd(fd->fd, buff, buff_len)) > 0) {
 8012a66:	4b26      	ldr	r3, [pc, #152]	@ (8012b00 <calc_file_md5sum+0x114>)
 8012a68:	691b      	ldr	r3, [r3, #16]
 8012a6a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8012a6c:	6810      	ldr	r0, [r2, #0]
 8012a6e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012a72:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8012a74:	4798      	blx	r3
 8012a76:	66b8      	str	r0, [r7, #104]	@ 0x68
 8012a78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d1ec      	bne.n	8012a58 <calc_file_md5sum+0x6c>
	}

	mg_fs_close(fd);
 8012a7e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8012a80:	f014 f8c3 	bl	8026c0a <mg_fs_close>

	uint8_t * digest = calloc(digest_len, 1);
 8012a84:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8012a88:	2101      	movs	r1, #1
 8012a8a:	4618      	mov	r0, r3
 8012a8c:	f7ff ff63 	bl	8012956 <mg_calloc>
 8012a90:	6678      	str	r0, [r7, #100]	@ 0x64
	if (digest == NULL){
 8012a92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d108      	bne.n	8012aaa <calc_file_md5sum+0xbe>
		free(buff);
 8012a98:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8012a9a:	f009 fe65 	bl	801c768 <vPortFree>
		free(digest);
 8012a9e:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8012aa0:	f009 fe62 	bl	801c768 <vPortFree>
		return -1;
 8012aa4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012aa8:	e026      	b.n	8012af8 <calc_file_md5sum+0x10c>
	}

	mg_md5_final(&md5_ctx, digest);
 8012aaa:	f107 030c 	add.w	r3, r7, #12
 8012aae:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	f019 fc27 	bl	802c304 <mg_md5_final>
	// Преобразование контрольной суммы в строку
	for (int i = 0; i < 16; ++i) {
 8012ab6:	2300      	movs	r3, #0
 8012ab8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012aba:	e013      	b.n	8012ae4 <calc_file_md5sum+0xf8>
		snprintf(md5_str + (i * 2), md5_str_size - (i * 2), "%02x", digest[i]);
 8012abc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012abe:	005b      	lsls	r3, r3, #1
 8012ac0:	461a      	mov	r2, r3
 8012ac2:	683b      	ldr	r3, [r7, #0]
 8012ac4:	1898      	adds	r0, r3, r2
 8012ac6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012ac8:	005b      	lsls	r3, r3, #1
 8012aca:	461a      	mov	r2, r3
 8012acc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012ace:	1a99      	subs	r1, r3, r2
 8012ad0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012ad2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8012ad4:	4413      	add	r3, r2
 8012ad6:	781b      	ldrb	r3, [r3, #0]
 8012ad8:	4a0a      	ldr	r2, [pc, #40]	@ (8012b04 <calc_file_md5sum+0x118>)
 8012ada:	f022 fc5f 	bl	803539c <snprintf>
	for (int i = 0; i < 16; ++i) {
 8012ade:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012ae0:	3301      	adds	r3, #1
 8012ae2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012ae4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012ae6:	2b0f      	cmp	r3, #15
 8012ae8:	dde8      	ble.n	8012abc <calc_file_md5sum+0xd0>
	}

	free(buff);
 8012aea:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8012aec:	f009 fe3c 	bl	801c768 <vPortFree>
	free(digest);
 8012af0:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8012af2:	f009 fe39 	bl	801c768 <vPortFree>

	return 0;
 8012af6:	2300      	movs	r3, #0
}
 8012af8:	4618      	mov	r0, r3
 8012afa:	3780      	adds	r7, #128	@ 0x80
 8012afc:	46bd      	mov	sp, r7
 8012afe:	bd80      	pop	{r7, pc}
 8012b00:	2000000c 	.word	0x2000000c
 8012b04:	0803f568 	.word	0x0803f568

08012b08 <handle_io_status_get>:

static void handle_io_status_get(struct mg_connection *c, struct mg_http_message *hm){
 8012b08:	b5b0      	push	{r4, r5, r7, lr}
 8012b0a:	b094      	sub	sp, #80	@ 0x50
 8012b0c:	af06      	add	r7, sp, #24
 8012b0e:	6078      	str	r0, [r7, #4]
 8012b10:	6039      	str	r1, [r7, #0]


	//Processing GET request
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8012b12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012b16:	4960      	ldr	r1, [pc, #384]	@ (8012c98 <handle_io_status_get+0x190>)
 8012b18:	4618      	mov	r0, r3
 8012b1a:	f01f f863 	bl	8031be4 <mg_str_s>
 8012b1e:	6839      	ldr	r1, [r7, #0]
 8012b20:	2300      	movs	r3, #0
 8012b22:	9300      	str	r3, [sp, #0]
 8012b24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012b28:	cb0c      	ldmia	r3, {r2, r3}
 8012b2a:	c903      	ldmia	r1, {r0, r1}
 8012b2c:	f01f f92d 	bl	8031d8a <mg_match>
 8012b30:	4603      	mov	r3, r0
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d023      	beq.n	8012b7e <handle_io_status_get+0x76>
		struct DeviceStatus status;

		r_w_parameter(status.inputs, S_INPUTS, S_READ);
 8012b36:	4b59      	ldr	r3, [pc, #356]	@ (8012c9c <handle_io_status_get+0x194>)
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	f107 001c 	add.w	r0, r7, #28
 8012b3e:	2200      	movs	r2, #0
 8012b40:	2101      	movs	r1, #1
 8012b42:	4798      	blx	r3
		r_w_parameter(status.outputs, S_OUTPUTS, S_READ);
 8012b44:	4b55      	ldr	r3, [pc, #340]	@ (8012c9c <handle_io_status_get+0x194>)
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	f107 021c 	add.w	r2, r7, #28
 8012b4c:	1cd0      	adds	r0, r2, #3
 8012b4e:	2200      	movs	r2, #0
 8012b50:	2102      	movs	r1, #2
 8012b52:	4798      	blx	r3
		mg_http_reply(c, 200, headers, //TODO delete for release,
						"{"
						"\"inputs\": [%d, %d, %d], \"outputs\": [%d, %d, %d]"
						"}\r\n",
						status.inputs[0], status.inputs[1], status.inputs[2],
 8012b54:	7f3b      	ldrb	r3, [r7, #28]
 8012b56:	7f7a      	ldrb	r2, [r7, #29]
 8012b58:	7fb9      	ldrb	r1, [r7, #30]
						status.outputs[0], status.outputs[1], status.outputs[2]
 8012b5a:	7ff8      	ldrb	r0, [r7, #31]
 8012b5c:	f897 4020 	ldrb.w	r4, [r7, #32]
 8012b60:	f897 5021 	ldrb.w	r5, [r7, #33]	@ 0x21
		mg_http_reply(c, 200, headers, //TODO delete for release,
 8012b64:	9505      	str	r5, [sp, #20]
 8012b66:	9404      	str	r4, [sp, #16]
 8012b68:	9003      	str	r0, [sp, #12]
 8012b6a:	9102      	str	r1, [sp, #8]
 8012b6c:	9201      	str	r2, [sp, #4]
 8012b6e:	9300      	str	r3, [sp, #0]
 8012b70:	4b4b      	ldr	r3, [pc, #300]	@ (8012ca0 <handle_io_status_get+0x198>)
 8012b72:	4a4c      	ldr	r2, [pc, #304]	@ (8012ca4 <handle_io_status_get+0x19c>)
 8012b74:	21c8      	movs	r1, #200	@ 0xc8
 8012b76:	6878      	ldr	r0, [r7, #4]
 8012b78:	f015 fb88 	bl	802828c <mg_http_reply>
	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
				"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET, POST methods\"}\r\n");

	}
}
 8012b7c:	e087      	b.n	8012c8e <handle_io_status_get+0x186>
	}else if(mg_match(hm->method, mg_str("POST"), NULL)){
 8012b7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012b82:	4949      	ldr	r1, [pc, #292]	@ (8012ca8 <handle_io_status_get+0x1a0>)
 8012b84:	4618      	mov	r0, r3
 8012b86:	f01f f82d 	bl	8031be4 <mg_str_s>
 8012b8a:	6839      	ldr	r1, [r7, #0]
 8012b8c:	2300      	movs	r3, #0
 8012b8e:	9300      	str	r3, [sp, #0]
 8012b90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012b94:	cb0c      	ldmia	r3, {r2, r3}
 8012b96:	c903      	ldmia	r1, {r0, r1}
 8012b98:	f01f f8f7 	bl	8031d8a <mg_match>
 8012b9c:	4603      	mov	r3, r0
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d06d      	beq.n	8012c7e <handle_io_status_get+0x176>
		if (mg_json_get_num(hm->body, "$.relay_id", &tmp1) > 0 &&
 8012ba2:	f107 0310 	add.w	r3, r7, #16
 8012ba6:	6839      	ldr	r1, [r7, #0]
 8012ba8:	4a40      	ldr	r2, [pc, #256]	@ (8012cac <handle_io_status_get+0x1a4>)
 8012baa:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8012bae:	c903      	ldmia	r1, {r0, r1}
 8012bb0:	f018 f986 	bl	802aec0 <mg_json_get_num>
 8012bb4:	4603      	mov	r3, r0
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d059      	beq.n	8012c6e <handle_io_status_get+0x166>
			mg_json_get_num(hm->body, "$.state", &tmp2) > 0){
 8012bba:	f107 0308 	add.w	r3, r7, #8
 8012bbe:	6839      	ldr	r1, [r7, #0]
 8012bc0:	4a3b      	ldr	r2, [pc, #236]	@ (8012cb0 <handle_io_status_get+0x1a8>)
 8012bc2:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8012bc6:	c903      	ldmia	r1, {r0, r1}
 8012bc8:	f018 f97a 	bl	802aec0 <mg_json_get_num>
 8012bcc:	4603      	mov	r3, r0
		if (mg_json_get_num(hm->body, "$.relay_id", &tmp1) > 0 &&
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d04d      	beq.n	8012c6e <handle_io_status_get+0x166>
			relay_id = (uint8_t) tmp1;
 8012bd2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8012bd6:	4610      	mov	r0, r2
 8012bd8:	4619      	mov	r1, r3
 8012bda:	f7fd fffd 	bl	8010bd8 <__aeabi_d2uiz>
 8012bde:	4603      	mov	r3, r0
 8012be0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			state = (uint8_t) tmp2;
 8012be4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012be8:	4610      	mov	r0, r2
 8012bea:	4619      	mov	r1, r3
 8012bec:	f7fd fff4 	bl	8010bd8 <__aeabi_d2uiz>
 8012bf0:	4603      	mov	r3, r0
 8012bf2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
			if (relay_id > 0 && relay_id <= OUTPUTS_COUNT && (state == 0 || state == 1)) {
 8012bf6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d02f      	beq.n	8012c5e <handle_io_status_get+0x156>
 8012bfe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012c02:	2b03      	cmp	r3, #3
 8012c04:	d82b      	bhi.n	8012c5e <handle_io_status_get+0x156>
 8012c06:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d003      	beq.n	8012c16 <handle_io_status_get+0x10e>
 8012c0e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8012c12:	2b01      	cmp	r3, #1
 8012c14:	d123      	bne.n	8012c5e <handle_io_status_get+0x156>
				r_w_parameter(output_status, S_OUTPUTS, S_READ);
 8012c16:	4b21      	ldr	r3, [pc, #132]	@ (8012c9c <handle_io_status_get+0x194>)
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	f107 0018 	add.w	r0, r7, #24
 8012c1e:	2200      	movs	r2, #0
 8012c20:	2102      	movs	r1, #2
 8012c22:	4798      	blx	r3
				output_status[relay_id-1] = state;  // make -1 for make human understandable
 8012c24:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012c28:	3b01      	subs	r3, #1
 8012c2a:	3338      	adds	r3, #56	@ 0x38
 8012c2c:	443b      	add	r3, r7
 8012c2e:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8012c32:	f803 2c20 	strb.w	r2, [r3, #-32]
				r_w_parameter(output_status, S_OUTPUTS, S_WRITE);
 8012c36:	4b19      	ldr	r3, [pc, #100]	@ (8012c9c <handle_io_status_get+0x194>)
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	f107 0018 	add.w	r0, r7, #24
 8012c3e:	2201      	movs	r2, #1
 8012c40:	2102      	movs	r1, #2
 8012c42:	4798      	blx	r3
				mg_http_reply(c, 200, headers , //TODO delete for release,
 8012c44:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012c48:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8012c4c:	9201      	str	r2, [sp, #4]
 8012c4e:	9300      	str	r3, [sp, #0]
 8012c50:	4b18      	ldr	r3, [pc, #96]	@ (8012cb4 <handle_io_status_get+0x1ac>)
 8012c52:	4a14      	ldr	r2, [pc, #80]	@ (8012ca4 <handle_io_status_get+0x19c>)
 8012c54:	21c8      	movs	r1, #200	@ 0xc8
 8012c56:	6878      	ldr	r0, [r7, #4]
 8012c58:	f015 fb18 	bl	802828c <mg_http_reply>
			if (relay_id > 0 && relay_id <= OUTPUTS_COUNT && (state == 0 || state == 1)) {
 8012c5c:	e017      	b.n	8012c8e <handle_io_status_get+0x186>
                mg_http_reply(c, 400, headers, //TODO delete for release,
 8012c5e:	4b16      	ldr	r3, [pc, #88]	@ (8012cb8 <handle_io_status_get+0x1b0>)
 8012c60:	4a10      	ldr	r2, [pc, #64]	@ (8012ca4 <handle_io_status_get+0x19c>)
 8012c62:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012c66:	6878      	ldr	r0, [r7, #4]
 8012c68:	f015 fb10 	bl	802828c <mg_http_reply>
			if (relay_id > 0 && relay_id <= OUTPUTS_COUNT && (state == 0 || state == 1)) {
 8012c6c:	e00f      	b.n	8012c8e <handle_io_status_get+0x186>
            mg_http_reply(c, 400, headers, //TODO delete for release,
 8012c6e:	4b13      	ldr	r3, [pc, #76]	@ (8012cbc <handle_io_status_get+0x1b4>)
 8012c70:	4a0c      	ldr	r2, [pc, #48]	@ (8012ca4 <handle_io_status_get+0x19c>)
 8012c72:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012c76:	6878      	ldr	r0, [r7, #4]
 8012c78:	f015 fb08 	bl	802828c <mg_http_reply>
}
 8012c7c:	e007      	b.n	8012c8e <handle_io_status_get+0x186>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8012c7e:	4b10      	ldr	r3, [pc, #64]	@ (8012cc0 <handle_io_status_get+0x1b8>)
 8012c80:	4a08      	ldr	r2, [pc, #32]	@ (8012ca4 <handle_io_status_get+0x19c>)
 8012c82:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012c86:	6878      	ldr	r0, [r7, #4]
 8012c88:	f015 fb00 	bl	802828c <mg_http_reply>
}
 8012c8c:	e7ff      	b.n	8012c8e <handle_io_status_get+0x186>
 8012c8e:	bf00      	nop
 8012c90:	3738      	adds	r7, #56	@ 0x38
 8012c92:	46bd      	mov	sp, r7
 8012c94:	bdb0      	pop	{r4, r5, r7, pc}
 8012c96:	bf00      	nop
 8012c98:	0803f570 	.word	0x0803f570
 8012c9c:	20000b18 	.word	0x20000b18
 8012ca0:	0803f574 	.word	0x0803f574
 8012ca4:	0803f5a8 	.word	0x0803f5a8
 8012ca8:	0803f618 	.word	0x0803f618
 8012cac:	0803f620 	.word	0x0803f620
 8012cb0:	0803f62c 	.word	0x0803f62c
 8012cb4:	0803f634 	.word	0x0803f634
 8012cb8:	0803f66c 	.word	0x0803f66c
 8012cbc:	0803f6a8 	.word	0x0803f6a8
 8012cc0:	0803f6e4 	.word	0x0803f6e4

08012cc4 <handle_mqtt_conf>:

static void handle_mqtt_conf(struct mg_connection *c, struct mg_http_message *hm){
 8012cc4:	b580      	push	{r7, lr}
 8012cc6:	b092      	sub	sp, #72	@ 0x48
 8012cc8:	af04      	add	r7, sp, #16
 8012cca:	6078      	str	r0, [r7, #4]
 8012ccc:	6039      	str	r1, [r7, #0]
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8012cce:	f107 030c 	add.w	r3, r7, #12
 8012cd2:	49a7      	ldr	r1, [pc, #668]	@ (8012f70 <handle_mqtt_conf+0x2ac>)
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	f01e ff85 	bl	8031be4 <mg_str_s>
 8012cda:	6839      	ldr	r1, [r7, #0]
 8012cdc:	2300      	movs	r3, #0
 8012cde:	9300      	str	r3, [sp, #0]
 8012ce0:	f107 030c 	add.w	r3, r7, #12
 8012ce4:	cb0c      	ldmia	r3, {r2, r3}
 8012ce6:	c903      	ldmia	r1, {r0, r1}
 8012ce8:	f01f f84f 	bl	8031d8a <mg_match>
 8012cec:	4603      	mov	r3, r0
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d04d      	beq.n	8012d8e <handle_mqtt_conf+0xca>

		uint8_t pass_len = 0;
 8012cf2:	2300      	movs	r3, #0
 8012cf4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		MQTT_cred_struct * mqtt_config = (MQTT_cred_struct *) calloc(1, sizeof(MQTT_cred_struct));
 8012cf8:	21c6      	movs	r1, #198	@ 0xc6
 8012cfa:	2001      	movs	r0, #1
 8012cfc:	f7ff fe2b 	bl	8012956 <mg_calloc>
 8012d00:	61f8      	str	r0, [r7, #28]
		if (mqtt_config == NULL) {
 8012d02:	69fb      	ldr	r3, [r7, #28]
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d10a      	bne.n	8012d1e <handle_mqtt_conf+0x5a>
			mg_http_reply(c, 500, headers, "{\"status\":\"error\",\"message\":\"Memory allocation failed\"}\r\n");
 8012d08:	4b9a      	ldr	r3, [pc, #616]	@ (8012f74 <handle_mqtt_conf+0x2b0>)
 8012d0a:	4a9b      	ldr	r2, [pc, #620]	@ (8012f78 <handle_mqtt_conf+0x2b4>)
 8012d0c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8012d10:	6878      	ldr	r0, [r7, #4]
 8012d12:	f015 fabb 	bl	802828c <mg_http_reply>
			free(mqtt_config);
 8012d16:	69f8      	ldr	r0, [r7, #28]
 8012d18:	f009 fd26 	bl	801c768 <vPortFree>
			return;
 8012d1c:	e124      	b.n	8012f68 <handle_mqtt_conf+0x2a4>
		}

		r_w_parameter(mqtt_config, S_MQTT, S_READ);
 8012d1e:	4b97      	ldr	r3, [pc, #604]	@ (8012f7c <handle_mqtt_conf+0x2b8>)
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	2200      	movs	r2, #0
 8012d24:	2100      	movs	r1, #0
 8012d26:	69f8      	ldr	r0, [r7, #28]
 8012d28:	4798      	blx	r3
		pass_len = strlen(mqtt_config->pass);
 8012d2a:	69fb      	ldr	r3, [r7, #28]
 8012d2c:	33a5      	adds	r3, #165	@ 0xa5
 8012d2e:	4618      	mov	r0, r3
 8012d30:	f7fd fab6 	bl	80102a0 <strlen>
 8012d34:	4603      	mov	r3, r0
 8012d36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		memset(mqtt_config->pass, 42,pass_len); // маскируем пароль
 8012d3a:	69fb      	ldr	r3, [r7, #28]
 8012d3c:	33a5      	adds	r3, #165	@ 0xa5
 8012d3e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8012d42:	212a      	movs	r1, #42	@ 0x2a
 8012d44:	4618      	mov	r0, r3
 8012d46:	f023 f853 	bl	8035df0 <memset>
		mqtt_config->pass[pass_len] = '\0'; // добавляем null-terminator
 8012d4a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012d4e:	69fa      	ldr	r2, [r7, #28]
 8012d50:	4413      	add	r3, r2
 8012d52:	2200      	movs	r2, #0
 8012d54:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5


		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 8012d58:	69fb      	ldr	r3, [r7, #28]
 8012d5a:	785b      	ldrb	r3, [r3, #1]
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d001      	beq.n	8012d64 <handle_mqtt_conf+0xa0>
 8012d60:	4b87      	ldr	r3, [pc, #540]	@ (8012f80 <handle_mqtt_conf+0x2bc>)
 8012d62:	e000      	b.n	8012d66 <handle_mqtt_conf+0xa2>
 8012d64:	4b87      	ldr	r3, [pc, #540]	@ (8012f84 <handle_mqtt_conf+0x2c0>)
						mqtt_config->uri, mqtt_config->login, mqtt_config->pass);
 8012d66:	69fa      	ldr	r2, [r7, #28]
 8012d68:	3202      	adds	r2, #2
 8012d6a:	69f9      	ldr	r1, [r7, #28]
 8012d6c:	3184      	adds	r1, #132	@ 0x84
 8012d6e:	69f8      	ldr	r0, [r7, #28]
 8012d70:	30a5      	adds	r0, #165	@ 0xa5
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 8012d72:	9003      	str	r0, [sp, #12]
 8012d74:	9102      	str	r1, [sp, #8]
 8012d76:	9201      	str	r2, [sp, #4]
 8012d78:	9300      	str	r3, [sp, #0]
 8012d7a:	4b83      	ldr	r3, [pc, #524]	@ (8012f88 <handle_mqtt_conf+0x2c4>)
 8012d7c:	4a7e      	ldr	r2, [pc, #504]	@ (8012f78 <handle_mqtt_conf+0x2b4>)
 8012d7e:	21c8      	movs	r1, #200	@ 0xc8
 8012d80:	6878      	ldr	r0, [r7, #4]
 8012d82:	f015 fa83 	bl	802828c <mg_http_reply>

		free(mqtt_config);
 8012d86:	69f8      	ldr	r0, [r7, #28]
 8012d88:	f009 fcee 	bl	801c768 <vPortFree>
 8012d8c:	e0ec      	b.n	8012f68 <handle_mqtt_conf+0x2a4>

	}else if(mg_match(hm->method, mg_str("POST"), NULL)){
 8012d8e:	f107 0314 	add.w	r3, r7, #20
 8012d92:	497e      	ldr	r1, [pc, #504]	@ (8012f8c <handle_mqtt_conf+0x2c8>)
 8012d94:	4618      	mov	r0, r3
 8012d96:	f01e ff25 	bl	8031be4 <mg_str_s>
 8012d9a:	6839      	ldr	r1, [r7, #0]
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	9300      	str	r3, [sp, #0]
 8012da0:	f107 0314 	add.w	r3, r7, #20
 8012da4:	cb0c      	ldmia	r3, {r2, r3}
 8012da6:	c903      	ldmia	r1, {r0, r1}
 8012da8:	f01e ffef 	bl	8031d8a <mg_match>
 8012dac:	4603      	mov	r3, r0
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	f000 80d3 	beq.w	8012f5a <handle_mqtt_conf+0x296>

		MQTT_cred_struct * mqtt_config = (MQTT_cred_struct *) calloc(1, sizeof(MQTT_cred_struct));
 8012db4:	21c6      	movs	r1, #198	@ 0xc6
 8012db6:	2001      	movs	r0, #1
 8012db8:	f7ff fdcd 	bl	8012956 <mg_calloc>
 8012dbc:	6378      	str	r0, [r7, #52]	@ 0x34
		if (mqtt_config == NULL) {
 8012dbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d10a      	bne.n	8012dda <handle_mqtt_conf+0x116>
			mg_http_reply(c, 500, headers, "{\"status\":\"error\",\"message\":\"Memory allocation failed\"}\r\n");
 8012dc4:	4b6b      	ldr	r3, [pc, #428]	@ (8012f74 <handle_mqtt_conf+0x2b0>)
 8012dc6:	4a6c      	ldr	r2, [pc, #432]	@ (8012f78 <handle_mqtt_conf+0x2b4>)
 8012dc8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8012dcc:	6878      	ldr	r0, [r7, #4]
 8012dce:	f015 fa5d 	bl	802828c <mg_http_reply>
			free(mqtt_config);
 8012dd2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8012dd4:	f009 fcc8 	bl	801c768 <vPortFree>
			return;
 8012dd8:	e0c6      	b.n	8012f68 <handle_mqtt_conf+0x2a4>
		}
		int length;
		if(mg_json_get(hm->body, "$", &length) < 0){//JSON validation err
 8012dda:	f107 0308 	add.w	r3, r7, #8
 8012dde:	6839      	ldr	r1, [r7, #0]
 8012de0:	4a6b      	ldr	r2, [pc, #428]	@ (8012f90 <handle_mqtt_conf+0x2cc>)
 8012de2:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8012de6:	c903      	ldmia	r1, {r0, r1}
 8012de8:	f017 fd30 	bl	802a84c <mg_json_get>
 8012dec:	4603      	mov	r3, r0
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	da07      	bge.n	8012e02 <handle_mqtt_conf+0x13e>

			mg_http_reply(c, 400, headers, //TODO delete for release,
 8012df2:	4b68      	ldr	r3, [pc, #416]	@ (8012f94 <handle_mqtt_conf+0x2d0>)
 8012df4:	4a60      	ldr	r2, [pc, #384]	@ (8012f78 <handle_mqtt_conf+0x2b4>)
 8012df6:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012dfa:	6878      	ldr	r0, [r7, #4]
 8012dfc:	f015 fa46 	bl	802828c <mg_http_reply>
 8012e00:	e0a7      	b.n	8012f52 <handle_mqtt_conf+0x28e>
					"{\"status\":\"error\",\"message\":\"Incorrect JSON\"}\r\n");

		}else{//JSON validation success
			mg_json_get_bool(hm->body, "$.enabled", &mqtt_config->enable);
 8012e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012e04:	3301      	adds	r3, #1
 8012e06:	6839      	ldr	r1, [r7, #0]
 8012e08:	4a63      	ldr	r2, [pc, #396]	@ (8012f98 <handle_mqtt_conf+0x2d4>)
 8012e0a:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8012e0e:	c903      	ldmia	r1, {r0, r1}
 8012e10:	f018 f89d 	bl	802af4e <mg_json_get_bool>

			char * broker = NULL;
 8012e14:	2300      	movs	r3, #0
 8012e16:	633b      	str	r3, [r7, #48]	@ 0x30
			if ((broker = mg_json_get_str(hm->body, "$.broker"))){
 8012e18:	683b      	ldr	r3, [r7, #0]
 8012e1a:	4a60      	ldr	r2, [pc, #384]	@ (8012f9c <handle_mqtt_conf+0x2d8>)
 8012e1c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8012e20:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012e24:	f018 f95d 	bl	802b0e2 <mg_json_get_str>
 8012e28:	6338      	str	r0, [r7, #48]	@ 0x30
 8012e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d04e      	beq.n	8012ece <handle_mqtt_conf+0x20a>
				int err = 0;
 8012e30:	2300      	movs	r3, #0
 8012e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
				if((err=is_valid_mqtt_url(broker))==0){  //Validate MQTT URI
 8012e34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012e36:	f020 fa0f 	bl	8033258 <is_valid_mqtt_url>
 8012e3a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8012e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d107      	bne.n	8012e52 <handle_mqtt_conf+0x18e>
					strncpy(mqtt_config->uri, broker, MAX_MQTT_URL_LEN -1);
 8012e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012e44:	3302      	adds	r3, #2
 8012e46:	227f      	movs	r2, #127	@ 0x7f
 8012e48:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8012e4a:	4618      	mov	r0, r3
 8012e4c:	f023 f817 	bl	8035e7e <strncpy>
 8012e50:	e03d      	b.n	8012ece <handle_mqtt_conf+0x20a>
				}else{
					switch (err) {
 8012e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e54:	3304      	adds	r3, #4
 8012e56:	2b03      	cmp	r3, #3
 8012e58:	d82a      	bhi.n	8012eb0 <handle_mqtt_conf+0x1ec>
 8012e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8012e60 <handle_mqtt_conf+0x19c>)
 8012e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e60:	08012ea1 	.word	0x08012ea1
 8012e64:	08012e91 	.word	0x08012e91
 8012e68:	08012e81 	.word	0x08012e81
 8012e6c:	08012e71 	.word	0x08012e71
						case -1:
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8012e70:	4b4b      	ldr	r3, [pc, #300]	@ (8012fa0 <handle_mqtt_conf+0x2dc>)
 8012e72:	4a41      	ldr	r2, [pc, #260]	@ (8012f78 <handle_mqtt_conf+0x2b4>)
 8012e74:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012e78:	6878      	ldr	r0, [r7, #4]
 8012e7a:	f015 fa07 	bl	802828c <mg_http_reply>
									"{\"status\":\"error\",\"message\":\"URL does not start with 'mqtt://'\"}\r\n");
							break;
 8012e7e:	e01f      	b.n	8012ec0 <handle_mqtt_conf+0x1fc>
						case -2:
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8012e80:	4b48      	ldr	r3, [pc, #288]	@ (8012fa4 <handle_mqtt_conf+0x2e0>)
 8012e82:	4a3d      	ldr	r2, [pc, #244]	@ (8012f78 <handle_mqtt_conf+0x2b4>)
 8012e84:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012e88:	6878      	ldr	r0, [r7, #4]
 8012e8a:	f015 f9ff 	bl	802828c <mg_http_reply>
									"{\"status\":\"error\",\"message\":\"URL does not contain a port separator ':'\"}\r\n");
							break;
 8012e8e:	e017      	b.n	8012ec0 <handle_mqtt_conf+0x1fc>
						case -3:
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8012e90:	4b45      	ldr	r3, [pc, #276]	@ (8012fa8 <handle_mqtt_conf+0x2e4>)
 8012e92:	4a39      	ldr	r2, [pc, #228]	@ (8012f78 <handle_mqtt_conf+0x2b4>)
 8012e94:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012e98:	6878      	ldr	r0, [r7, #4]
 8012e9a:	f015 f9f7 	bl	802828c <mg_http_reply>
									"{\"status\":\"error\",\"message\":\"Invalid domain or IP address\"}\r\n");
							break;
 8012e9e:	e00f      	b.n	8012ec0 <handle_mqtt_conf+0x1fc>
						case -4:
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8012ea0:	4b42      	ldr	r3, [pc, #264]	@ (8012fac <handle_mqtt_conf+0x2e8>)
 8012ea2:	4a35      	ldr	r2, [pc, #212]	@ (8012f78 <handle_mqtt_conf+0x2b4>)
 8012ea4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012ea8:	6878      	ldr	r0, [r7, #4]
 8012eaa:	f015 f9ef 	bl	802828c <mg_http_reply>
									"{\"status\":\"error\",\"message\":\"Invalid port number\"}\r\n");
							break;
 8012eae:	e007      	b.n	8012ec0 <handle_mqtt_conf+0x1fc>
						default:
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8012eb0:	4b3f      	ldr	r3, [pc, #252]	@ (8012fb0 <handle_mqtt_conf+0x2ec>)
 8012eb2:	4a31      	ldr	r2, [pc, #196]	@ (8012f78 <handle_mqtt_conf+0x2b4>)
 8012eb4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012eb8:	6878      	ldr	r0, [r7, #4]
 8012eba:	f015 f9e7 	bl	802828c <mg_http_reply>
									"{\"status\":\"error\",\"message\":\"Invalid MQTT_URI\"}\r\n");

							break;
 8012ebe:	bf00      	nop
					}
					free(broker);
 8012ec0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012ec2:	f009 fc51 	bl	801c768 <vPortFree>
					free(mqtt_config);
 8012ec6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8012ec8:	f009 fc4e 	bl	801c768 <vPortFree>
					return;
 8012ecc:	e04c      	b.n	8012f68 <handle_mqtt_conf+0x2a4>
				}

			}
			free(broker);
 8012ece:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012ed0:	f009 fc4a 	bl	801c768 <vPortFree>

			char * username = NULL;
 8012ed4:	2300      	movs	r3, #0
 8012ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
			if((username = mg_json_get_str(hm->body, "$.username"))){
 8012ed8:	683b      	ldr	r3, [r7, #0]
 8012eda:	4a36      	ldr	r2, [pc, #216]	@ (8012fb4 <handle_mqtt_conf+0x2f0>)
 8012edc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8012ee0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012ee4:	f018 f8fd 	bl	802b0e2 <mg_json_get_str>
 8012ee8:	62b8      	str	r0, [r7, #40]	@ 0x28
 8012eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d006      	beq.n	8012efe <handle_mqtt_conf+0x23a>
				strncpy(mqtt_config->login, username, MAX_MQTT_LOGIN_LEN -1);
 8012ef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012ef2:	3384      	adds	r3, #132	@ 0x84
 8012ef4:	2220      	movs	r2, #32
 8012ef6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012ef8:	4618      	mov	r0, r3
 8012efa:	f022 ffc0 	bl	8035e7e <strncpy>
			}
			free(username);
 8012efe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012f00:	f009 fc32 	bl	801c768 <vPortFree>

			char * password = NULL;
 8012f04:	2300      	movs	r3, #0
 8012f06:	627b      	str	r3, [r7, #36]	@ 0x24
			if((password = mg_json_get_str(hm->body, "$.password"))){
 8012f08:	683b      	ldr	r3, [r7, #0]
 8012f0a:	4a2b      	ldr	r2, [pc, #172]	@ (8012fb8 <handle_mqtt_conf+0x2f4>)
 8012f0c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8012f10:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012f14:	f018 f8e5 	bl	802b0e2 <mg_json_get_str>
 8012f18:	6278      	str	r0, [r7, #36]	@ 0x24
 8012f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d006      	beq.n	8012f2e <handle_mqtt_conf+0x26a>
				strncpy(mqtt_config->pass, password, MAX_MQTT_PASS_LEN -1);
 8012f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012f22:	33a5      	adds	r3, #165	@ 0xa5
 8012f24:	2220      	movs	r2, #32
 8012f26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012f28:	4618      	mov	r0, r3
 8012f2a:	f022 ffa8 	bl	8035e7e <strncpy>
			}
			free(password);
 8012f2e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012f30:	f009 fc1a 	bl	801c768 <vPortFree>

			mqtt_config->save = 1;
 8012f34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012f36:	2201      	movs	r2, #1
 8012f38:	701a      	strb	r2, [r3, #0]

			r_w_parameter(mqtt_config, S_MQTT, S_WRITE);
 8012f3a:	4b10      	ldr	r3, [pc, #64]	@ (8012f7c <handle_mqtt_conf+0x2b8>)
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	2201      	movs	r2, #1
 8012f40:	2100      	movs	r1, #0
 8012f42:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8012f44:	4798      	blx	r3

			mg_http_reply(c, 200, headers, //TODO delete for release,
 8012f46:	4b1d      	ldr	r3, [pc, #116]	@ (8012fbc <handle_mqtt_conf+0x2f8>)
 8012f48:	4a0b      	ldr	r2, [pc, #44]	@ (8012f78 <handle_mqtt_conf+0x2b4>)
 8012f4a:	21c8      	movs	r1, #200	@ 0xc8
 8012f4c:	6878      	ldr	r0, [r7, #4]
 8012f4e:	f015 f99d 	bl	802828c <mg_http_reply>
				"{\"status\":\"success\",\"message\":\"MQTT settings updated!\"}\r\n");

		}

		free(mqtt_config);
 8012f52:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8012f54:	f009 fc08 	bl	801c768 <vPortFree>
 8012f58:	e006      	b.n	8012f68 <handle_mqtt_conf+0x2a4>

	}else{//error, unsupported method
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8012f5a:	4b19      	ldr	r3, [pc, #100]	@ (8012fc0 <handle_mqtt_conf+0x2fc>)
 8012f5c:	4a06      	ldr	r2, [pc, #24]	@ (8012f78 <handle_mqtt_conf+0x2b4>)
 8012f5e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012f62:	6878      	ldr	r0, [r7, #4]
 8012f64:	f015 f992 	bl	802828c <mg_http_reply>
				"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET, POST methods\"}\r\n");
	}
}
 8012f68:	3738      	adds	r7, #56	@ 0x38
 8012f6a:	46bd      	mov	sp, r7
 8012f6c:	bd80      	pop	{r7, pc}
 8012f6e:	bf00      	nop
 8012f70:	0803f570 	.word	0x0803f570
 8012f74:	0803f738 	.word	0x0803f738
 8012f78:	0803f5a8 	.word	0x0803f5a8
 8012f7c:	20000b18 	.word	0x20000b18
 8012f80:	0803f774 	.word	0x0803f774
 8012f84:	0803f77c 	.word	0x0803f77c
 8012f88:	0803f784 	.word	0x0803f784
 8012f8c:	0803f618 	.word	0x0803f618
 8012f90:	0803f7cc 	.word	0x0803f7cc
 8012f94:	0803f7d0 	.word	0x0803f7d0
 8012f98:	0803f800 	.word	0x0803f800
 8012f9c:	0803f80c 	.word	0x0803f80c
 8012fa0:	0803f818 	.word	0x0803f818
 8012fa4:	0803f85c 	.word	0x0803f85c
 8012fa8:	0803f8a8 	.word	0x0803f8a8
 8012fac:	0803f8e8 	.word	0x0803f8e8
 8012fb0:	0803f920 	.word	0x0803f920
 8012fb4:	0803f954 	.word	0x0803f954
 8012fb8:	0803f960 	.word	0x0803f960
 8012fbc:	0803f96c 	.word	0x0803f96c
 8012fc0:	0803f6e4 	.word	0x0803f6e4

08012fc4 <handle_dev_status>:

static void handle_dev_status(struct mg_connection *c, struct mg_http_message *hm){
 8012fc4:	b580      	push	{r7, lr}
 8012fc6:	b0d2      	sub	sp, #328	@ 0x148
 8012fc8:	af06      	add	r7, sp, #24
 8012fca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012fce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8012fd2:	6018      	str	r0, [r3, #0]
 8012fd4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012fd8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8012fdc:	6019      	str	r1, [r3, #0]

	char   dev_status_template[] = "{\"mqtt_conn_status\": \"%s\", \"local_addr\": \"%s\", \"server_addr\": \"%s\" , \"pub_topics\": [%s], \"subscr_topics\": [%s]}\r\n";
 8012fde:	4acf      	ldr	r2, [pc, #828]	@ (801331c <handle_dev_status+0x358>)
 8012fe0:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8012fe4:	4611      	mov	r1, r2
 8012fe6:	2272      	movs	r2, #114	@ 0x72
 8012fe8:	4618      	mov	r0, r3
 8012fea:	f024 f93d 	bl	8037268 <memcpy>
	struct mg_connection* mqtt_connection = NULL;
 8012fee:	2300      	movs	r3, #0
 8012ff0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	int    str_part_len = 30;
 8012ff4:	231e      	movs	r3, #30
 8012ff6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	char  *mqtt_status_str   = calloc(str_part_len, sizeof(char));
 8012ffa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012ffe:	2101      	movs	r1, #1
 8013000:	4618      	mov	r0, r3
 8013002:	f7ff fca8 	bl	8012956 <mg_calloc>
 8013006:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
	char  *mqtt_server_addr  = calloc(IP_v6_STR_LEN + IP_PORT_STR_LEN, sizeof(char));
 801300a:	2101      	movs	r1, #1
 801300c:	202e      	movs	r0, #46	@ 0x2e
 801300e:	f7ff fca2 	bl	8012956 <mg_calloc>
 8013012:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
	char  *mqtt_local_addr   = calloc(IP_v6_STR_LEN + IP_PORT_STR_LEN, sizeof(char));
 8013016:	2101      	movs	r1, #1
 8013018:	202e      	movs	r0, #46	@ 0x2e
 801301a:	f7ff fc9c 	bl	8012956 <mg_calloc>
 801301e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
	char  *pub_topics_str    = calloc((OUTPUTS_COUNT+ INPUTS_COUNT) * MQTT_TOPIK_MAX_LEN, sizeof(char));
 8013022:	2101      	movs	r1, #1
 8013024:	f44f 7040 	mov.w	r0, #768	@ 0x300
 8013028:	f7ff fc95 	bl	8012956 <mg_calloc>
 801302c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	char  *subscr_topics_str = calloc(OUTPUTS_COUNT * MQTT_TOPIK_MAX_LEN, sizeof(char));
 8013030:	2101      	movs	r1, #1
 8013032:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8013036:	f7ff fc8e 	bl	8012956 <mg_calloc>
 801303a:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108

	if (mqtt_status_str && mqtt_server_addr && mqtt_local_addr && pub_topics_str && subscr_topics_str){
 801303e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8013042:	2b00      	cmp	r3, #0
 8013044:	f000 8182 	beq.w	801334c <handle_dev_status+0x388>
 8013048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801304c:	2b00      	cmp	r3, #0
 801304e:	f000 817d 	beq.w	801334c <handle_dev_status+0x388>
 8013052:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8013056:	2b00      	cmp	r3, #0
 8013058:	f000 8178 	beq.w	801334c <handle_dev_status+0x388>
 801305c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013060:	2b00      	cmp	r3, #0
 8013062:	f000 8173 	beq.w	801334c <handle_dev_status+0x388>
 8013066:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801306a:	2b00      	cmp	r3, #0
 801306c:	f000 816e 	beq.w	801334c <handle_dev_status+0x388>
		if (mg_match(hm->method, mg_str("GET"), NULL)){
 8013070:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8013074:	49aa      	ldr	r1, [pc, #680]	@ (8013320 <handle_dev_status+0x35c>)
 8013076:	4618      	mov	r0, r3
 8013078:	f01e fdb4 	bl	8031be4 <mg_str_s>
 801307c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013080:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8013084:	6819      	ldr	r1, [r3, #0]
 8013086:	2300      	movs	r3, #0
 8013088:	9300      	str	r3, [sp, #0]
 801308a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 801308e:	cb0c      	ldmia	r3, {r2, r3}
 8013090:	c903      	ldmia	r1, {r0, r1}
 8013092:	f01e fe7a 	bl	8031d8a <mg_match>
 8013096:	4603      	mov	r3, r0
 8013098:	2b00      	cmp	r3, #0
 801309a:	f000 8132 	beq.w	8013302 <handle_dev_status+0x33e>
			mqtt_connection =  get_mqtt_connection();
 801309e:	f001 fa81 	bl	80145a4 <get_mqtt_connection>
 80130a2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

			if(!mqtt_connection){
 80130a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d108      	bne.n	80130c0 <handle_dev_status+0xfc>
				strncpy(mqtt_status_str, "closed", str_part_len);
 80130ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80130b2:	461a      	mov	r2, r3
 80130b4:	499b      	ldr	r1, [pc, #620]	@ (8013324 <handle_dev_status+0x360>)
 80130b6:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 80130ba:	f022 fee0 	bl	8035e7e <strncpy>
 80130be:	e041      	b.n	8013144 <handle_dev_status+0x180>
			}else{
				if (mqtt_connection->is_connecting){
 80130c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80130c4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80130c8:	f003 0320 	and.w	r3, r3, #32
 80130cc:	b2db      	uxtb	r3, r3
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d008      	beq.n	80130e4 <handle_dev_status+0x120>
					strncpy(mqtt_status_str, "connecting", str_part_len);
 80130d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80130d6:	461a      	mov	r2, r3
 80130d8:	4993      	ldr	r1, [pc, #588]	@ (8013328 <handle_dev_status+0x364>)
 80130da:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 80130de:	f022 fece 	bl	8035e7e <strncpy>
 80130e2:	e019      	b.n	8013118 <handle_dev_status+0x154>
				}else if(mqtt_connection->is_closing){
 80130e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80130e8:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80130ec:	f003 0320 	and.w	r3, r3, #32
 80130f0:	b2db      	uxtb	r3, r3
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d008      	beq.n	8013108 <handle_dev_status+0x144>
					strncpy(mqtt_status_str, "closing",str_part_len);
 80130f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80130fa:	461a      	mov	r2, r3
 80130fc:	498b      	ldr	r1, [pc, #556]	@ (801332c <handle_dev_status+0x368>)
 80130fe:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8013102:	f022 febc 	bl	8035e7e <strncpy>
 8013106:	e007      	b.n	8013118 <handle_dev_status+0x154>
				}else{
					strncpy(mqtt_status_str, "established", str_part_len);
 8013108:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801310c:	461a      	mov	r2, r3
 801310e:	4988      	ldr	r1, [pc, #544]	@ (8013330 <handle_dev_status+0x36c>)
 8013110:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8013114:	f022 feb3 	bl	8035e7e <strncpy>
				}

				mg_snprintf(mqtt_local_addr, IP_v6_STR_LEN + IP_PORT_STR_LEN, "%M", mg_print_ip_port, &mqtt_connection->loc);
 8013118:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801311c:	3308      	adds	r3, #8
 801311e:	9300      	str	r3, [sp, #0]
 8013120:	4b84      	ldr	r3, [pc, #528]	@ (8013334 <handle_dev_status+0x370>)
 8013122:	4a85      	ldr	r2, [pc, #532]	@ (8013338 <handle_dev_status+0x374>)
 8013124:	212e      	movs	r1, #46	@ 0x2e
 8013126:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 801312a:	f01e f873 	bl	8031214 <mg_snprintf>
				mg_snprintf(mqtt_server_addr, IP_v6_STR_LEN + IP_PORT_STR_LEN, "%M", mg_print_ip_port, &mqtt_connection->rem);
 801312e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8013132:	331c      	adds	r3, #28
 8013134:	9300      	str	r3, [sp, #0]
 8013136:	4b7f      	ldr	r3, [pc, #508]	@ (8013334 <handle_dev_status+0x370>)
 8013138:	4a7f      	ldr	r2, [pc, #508]	@ (8013338 <handle_dev_status+0x374>)
 801313a:	212e      	movs	r1, #46	@ 0x2e
 801313c:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8013140:	f01e f868 	bl	8031214 <mg_snprintf>

			}

			char topic[MQTT_TOPIK_MAX_LEN];
			strcat(pub_topics_str, "\"");
 8013144:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8013148:	f7fd f8aa 	bl	80102a0 <strlen>
 801314c:	4603      	mov	r3, r0
 801314e:	461a      	mov	r2, r3
 8013150:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013154:	4413      	add	r3, r2
 8013156:	4979      	ldr	r1, [pc, #484]	@ (801333c <handle_dev_status+0x378>)
 8013158:	461a      	mov	r2, r3
 801315a:	460b      	mov	r3, r1
 801315c:	881b      	ldrh	r3, [r3, #0]
 801315e:	8013      	strh	r3, [r2, #0]
			// Формируем список топиков состояний для INPUT_SENSOR
			for (int i = 1; i <= INPUTS_COUNT; i++){
 8013160:	2301      	movs	r3, #1
 8013162:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8013166:	e022      	b.n	80131ae <handle_dev_status+0x1ea>
				generate_status_topik(topic, MQTT_TOPIK_MAX_LEN, INPUT_SENSOR, i);
 8013168:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801316c:	b2db      	uxtb	r3, r3
 801316e:	f107 000c 	add.w	r0, r7, #12
 8013172:	2201      	movs	r2, #1
 8013174:	2180      	movs	r1, #128	@ 0x80
 8013176:	f001 ff2f 	bl	8014fd8 <generate_status_topik>
				strcat(pub_topics_str, topic);
 801317a:	f107 030c 	add.w	r3, r7, #12
 801317e:	4619      	mov	r1, r3
 8013180:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8013184:	f022 fe3c 	bl	8035e00 <strcat>
				strcat(pub_topics_str, "\", \"");
 8013188:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 801318c:	f7fd f888 	bl	80102a0 <strlen>
 8013190:	4603      	mov	r3, r0
 8013192:	461a      	mov	r2, r3
 8013194:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013198:	4413      	add	r3, r2
 801319a:	4a69      	ldr	r2, [pc, #420]	@ (8013340 <handle_dev_status+0x37c>)
 801319c:	6810      	ldr	r0, [r2, #0]
 801319e:	6018      	str	r0, [r3, #0]
 80131a0:	7912      	ldrb	r2, [r2, #4]
 80131a2:	711a      	strb	r2, [r3, #4]
			for (int i = 1; i <= INPUTS_COUNT; i++){
 80131a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80131a8:	3301      	adds	r3, #1
 80131aa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80131ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80131b2:	2b03      	cmp	r3, #3
 80131b4:	ddd8      	ble.n	8013168 <handle_dev_status+0x1a4>
			}

			// Формируем список топиков состояний для OUTPUT_SENSOR
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 80131b6:	2301      	movs	r3, #1
 80131b8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80131bc:	e035      	b.n	801322a <handle_dev_status+0x266>
				generate_status_topik(topic, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i);
 80131be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80131c2:	b2db      	uxtb	r3, r3
 80131c4:	f107 000c 	add.w	r0, r7, #12
 80131c8:	2202      	movs	r2, #2
 80131ca:	2180      	movs	r1, #128	@ 0x80
 80131cc:	f001 ff04 	bl	8014fd8 <generate_status_topik>
				strcat(pub_topics_str, topic);
 80131d0:	f107 030c 	add.w	r3, r7, #12
 80131d4:	4619      	mov	r1, r3
 80131d6:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 80131da:	f022 fe11 	bl	8035e00 <strcat>
				// Добавляем запятую между топиками, кроме последнего
				if (i < OUTPUTS_COUNT) {
 80131de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80131e2:	2b02      	cmp	r3, #2
 80131e4:	dc0e      	bgt.n	8013204 <handle_dev_status+0x240>
					strcat(pub_topics_str, "\", \"");
 80131e6:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 80131ea:	f7fd f859 	bl	80102a0 <strlen>
 80131ee:	4603      	mov	r3, r0
 80131f0:	461a      	mov	r2, r3
 80131f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80131f6:	4413      	add	r3, r2
 80131f8:	4a51      	ldr	r2, [pc, #324]	@ (8013340 <handle_dev_status+0x37c>)
 80131fa:	6810      	ldr	r0, [r2, #0]
 80131fc:	6018      	str	r0, [r3, #0]
 80131fe:	7912      	ldrb	r2, [r2, #4]
 8013200:	711a      	strb	r2, [r3, #4]
 8013202:	e00d      	b.n	8013220 <handle_dev_status+0x25c>
				}else{
					strcat(pub_topics_str, "\"");
 8013204:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8013208:	f7fd f84a 	bl	80102a0 <strlen>
 801320c:	4603      	mov	r3, r0
 801320e:	461a      	mov	r2, r3
 8013210:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013214:	4413      	add	r3, r2
 8013216:	4949      	ldr	r1, [pc, #292]	@ (801333c <handle_dev_status+0x378>)
 8013218:	461a      	mov	r2, r3
 801321a:	460b      	mov	r3, r1
 801321c:	881b      	ldrh	r3, [r3, #0]
 801321e:	8013      	strh	r3, [r2, #0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8013220:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013224:	3301      	adds	r3, #1
 8013226:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 801322a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801322e:	2b03      	cmp	r3, #3
 8013230:	ddc5      	ble.n	80131be <handle_dev_status+0x1fa>
				}
			}

			strcat(subscr_topics_str, "\"");
 8013232:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8013236:	f7fd f833 	bl	80102a0 <strlen>
 801323a:	4603      	mov	r3, r0
 801323c:	461a      	mov	r2, r3
 801323e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8013242:	4413      	add	r3, r2
 8013244:	493d      	ldr	r1, [pc, #244]	@ (801333c <handle_dev_status+0x378>)
 8013246:	461a      	mov	r2, r3
 8013248:	460b      	mov	r3, r1
 801324a:	881b      	ldrh	r3, [r3, #0]
 801324c:	8013      	strh	r3, [r2, #0]
			// Формируем список топиков подписки для OUTPUT_SENSOR
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 801324e:	2301      	movs	r3, #1
 8013250:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8013254:	e035      	b.n	80132c2 <handle_dev_status+0x2fe>
				generate_comand_topik_for_subscrabe(topic, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i);
 8013256:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801325a:	b2db      	uxtb	r3, r3
 801325c:	f107 000c 	add.w	r0, r7, #12
 8013260:	2202      	movs	r2, #2
 8013262:	2180      	movs	r1, #128	@ 0x80
 8013264:	f001 fe8e 	bl	8014f84 <generate_comand_topik_for_subscrabe>
				strcat(subscr_topics_str, topic);
 8013268:	f107 030c 	add.w	r3, r7, #12
 801326c:	4619      	mov	r1, r3
 801326e:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8013272:	f022 fdc5 	bl	8035e00 <strcat>
				// Добавляем запятую между топиками, кроме последнего
				if (i < OUTPUTS_COUNT) {
 8013276:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801327a:	2b02      	cmp	r3, #2
 801327c:	dc0e      	bgt.n	801329c <handle_dev_status+0x2d8>
					strcat(subscr_topics_str, "\", \"");
 801327e:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8013282:	f7fd f80d 	bl	80102a0 <strlen>
 8013286:	4603      	mov	r3, r0
 8013288:	461a      	mov	r2, r3
 801328a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801328e:	4413      	add	r3, r2
 8013290:	4a2b      	ldr	r2, [pc, #172]	@ (8013340 <handle_dev_status+0x37c>)
 8013292:	6810      	ldr	r0, [r2, #0]
 8013294:	6018      	str	r0, [r3, #0]
 8013296:	7912      	ldrb	r2, [r2, #4]
 8013298:	711a      	strb	r2, [r3, #4]
 801329a:	e00d      	b.n	80132b8 <handle_dev_status+0x2f4>
				}else{
					strcat(subscr_topics_str, "\"");
 801329c:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 80132a0:	f7fc fffe 	bl	80102a0 <strlen>
 80132a4:	4603      	mov	r3, r0
 80132a6:	461a      	mov	r2, r3
 80132a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80132ac:	4413      	add	r3, r2
 80132ae:	4923      	ldr	r1, [pc, #140]	@ (801333c <handle_dev_status+0x378>)
 80132b0:	461a      	mov	r2, r3
 80132b2:	460b      	mov	r3, r1
 80132b4:	881b      	ldrh	r3, [r3, #0]
 80132b6:	8013      	strh	r3, [r2, #0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 80132b8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80132bc:	3301      	adds	r3, #1
 80132be:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80132c2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80132c6:	2b03      	cmp	r3, #3
 80132c8:	ddc5      	ble.n	8013256 <handle_dev_status+0x292>
				}
			}


			mg_http_reply(c, 200, headers, //TODO delete for release,
 80132ca:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 80132ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80132d2:	f5a3 7096 	sub.w	r0, r3, #300	@ 0x12c
 80132d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80132da:	9304      	str	r3, [sp, #16]
 80132dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80132e0:	9303      	str	r3, [sp, #12]
 80132e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80132e6:	9302      	str	r3, [sp, #8]
 80132e8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80132ec:	9301      	str	r3, [sp, #4]
 80132ee:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80132f2:	9300      	str	r3, [sp, #0]
 80132f4:	4613      	mov	r3, r2
 80132f6:	4a13      	ldr	r2, [pc, #76]	@ (8013344 <handle_dev_status+0x380>)
 80132f8:	21c8      	movs	r1, #200	@ 0xc8
 80132fa:	6800      	ldr	r0, [r0, #0]
 80132fc:	f014 ffc6 	bl	802828c <mg_http_reply>
		if (mg_match(hm->method, mg_str("GET"), NULL)){
 8013300:	e02f      	b.n	8013362 <handle_dev_status+0x39e>
					dev_status_template, mqtt_status_str, mqtt_local_addr, mqtt_server_addr, pub_topics_str, subscr_topics_str);

		}else{//error, unsupported method
			mg_http_reply(c, 400, headers, //TODO delete for release,
 8013302:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013306:	f5a3 7096 	sub.w	r0, r3, #300	@ 0x12c
 801330a:	4b0f      	ldr	r3, [pc, #60]	@ (8013348 <handle_dev_status+0x384>)
 801330c:	4a0d      	ldr	r2, [pc, #52]	@ (8013344 <handle_dev_status+0x380>)
 801330e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013312:	6800      	ldr	r0, [r0, #0]
 8013314:	f014 ffba 	bl	802828c <mg_http_reply>
		if (mg_match(hm->method, mg_str("GET"), NULL)){
 8013318:	e023      	b.n	8013362 <handle_dev_status+0x39e>
 801331a:	bf00      	nop
 801331c:	0803fa1c 	.word	0x0803fa1c
 8013320:	0803f570 	.word	0x0803f570
 8013324:	0803f9a8 	.word	0x0803f9a8
 8013328:	0803f9b0 	.word	0x0803f9b0
 801332c:	0803f9bc 	.word	0x0803f9bc
 8013330:	0803f9c4 	.word	0x0803f9c4
 8013334:	08031445 	.word	0x08031445
 8013338:	0803f9d0 	.word	0x0803f9d0
 801333c:	0803f9d4 	.word	0x0803f9d4
 8013340:	0803f9d8 	.word	0x0803f9d8
 8013344:	0803f5a8 	.word	0x0803f5a8
 8013348:	0803f6e4 	.word	0x0803f6e4
					"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET, POST methods\"}\r\n");
		}
	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
 801334c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013350:	f5a3 7096 	sub.w	r0, r3, #300	@ 0x12c
 8013354:	4b0f      	ldr	r3, [pc, #60]	@ (8013394 <handle_dev_status+0x3d0>)
 8013356:	4a10      	ldr	r2, [pc, #64]	@ (8013398 <handle_dev_status+0x3d4>)
 8013358:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801335c:	6800      	ldr	r0, [r0, #0]
 801335e:	f014 ff95 	bl	802828c <mg_http_reply>
				"{\"status\":\"error\",\"message\":\"Memory allocation error\"}\r\n");

	}

	free(mqtt_status_str);
 8013362:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8013366:	f009 f9ff 	bl	801c768 <vPortFree>
	free(mqtt_server_addr);
 801336a:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 801336e:	f009 f9fb 	bl	801c768 <vPortFree>
	free(mqtt_local_addr);
 8013372:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8013376:	f009 f9f7 	bl	801c768 <vPortFree>
	free(pub_topics_str);
 801337a:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 801337e:	f009 f9f3 	bl	801c768 <vPortFree>
	free(subscr_topics_str);
 8013382:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8013386:	f009 f9ef 	bl	801c768 <vPortFree>
}
 801338a:	bf00      	nop
 801338c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8013390:	46bd      	mov	sp, r7
 8013392:	bd80      	pop	{r7, pc}
 8013394:	0803f9e0 	.word	0x0803f9e0
 8013398:	0803f5a8 	.word	0x0803f5a8

0801339c <handle_OPTIONS_method>:


static void handle_OPTIONS_method(struct mg_connection *c){
 801339c:	b580      	push	{r7, lr}
 801339e:	b082      	sub	sp, #8
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	6078      	str	r0, [r7, #4]

	mg_http_reply(c, 200,
 80133a4:	4b04      	ldr	r3, [pc, #16]	@ (80133b8 <handle_OPTIONS_method+0x1c>)
 80133a6:	4a05      	ldr	r2, [pc, #20]	@ (80133bc <handle_OPTIONS_method+0x20>)
 80133a8:	21c8      	movs	r1, #200	@ 0xc8
 80133aa:	6878      	ldr	r0, [r7, #4]
 80133ac:	f014 ff6e 	bl	802828c <mg_http_reply>
	    "Access-Control-Allow-Origin: *\r\n"  // Или конкретный домен
	    "Access-Control-Allow-Methods: GET, POST, OPTIONS\r\n"
	    "Access-Control-Allow-Headers: Content-Type\r\n"
	    "Access-Control-Max-Age: 86400\r\n","\r\n");  // Без тела ответа
}
 80133b0:	bf00      	nop
 80133b2:	3708      	adds	r7, #8
 80133b4:	46bd      	mov	sp, r7
 80133b6:	bd80      	pop	{r7, pc}
 80133b8:	0803fa90 	.word	0x0803fa90
 80133bc:	0803fa94 	.word	0x0803fa94

080133c0 <handle_restart_mcu>:

static void handle_restart_mcu(struct mg_connection *c, struct mg_http_message *hm){
 80133c0:	b580      	push	{r7, lr}
 80133c2:	b08a      	sub	sp, #40	@ 0x28
 80133c4:	af04      	add	r7, sp, #16
 80133c6:	6078      	str	r0, [r7, #4]
 80133c8:	6039      	str	r1, [r7, #0]

	//HAL_NVIC_SystemReset();
    if (mg_match(hm->method, mg_str("POST"), NULL)){
 80133ca:	f107 030c 	add.w	r3, r7, #12
 80133ce:	491a      	ldr	r1, [pc, #104]	@ (8013438 <handle_restart_mcu+0x78>)
 80133d0:	4618      	mov	r0, r3
 80133d2:	f01e fc07 	bl	8031be4 <mg_str_s>
 80133d6:	6839      	ldr	r1, [r7, #0]
 80133d8:	2300      	movs	r3, #0
 80133da:	9300      	str	r3, [sp, #0]
 80133dc:	f107 030c 	add.w	r3, r7, #12
 80133e0:	cb0c      	ldmia	r3, {r2, r3}
 80133e2:	c903      	ldmia	r1, {r0, r1}
 80133e4:	f01e fcd1 	bl	8031d8a <mg_match>
 80133e8:	4603      	mov	r3, r0
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d018      	beq.n	8013420 <handle_restart_mcu+0x60>
		struct mg_full_net_info * param = (struct mg_full_net_info *)c->fn_data;
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80133f2:	617b      	str	r3, [r7, #20]


		mg_timer_add(param->mgr, 2000 /* 05 seconds */, MG_TIMER_REPEAT, HAL_NVIC_SystemReset, NULL);
 80133f4:	697b      	ldr	r3, [r7, #20]
 80133f6:	6819      	ldr	r1, [r3, #0]
 80133f8:	2300      	movs	r3, #0
 80133fa:	9302      	str	r3, [sp, #8]
 80133fc:	4b0f      	ldr	r3, [pc, #60]	@ (801343c <handle_restart_mcu+0x7c>)
 80133fe:	9301      	str	r3, [sp, #4]
 8013400:	2301      	movs	r3, #1
 8013402:	9300      	str	r3, [sp, #0]
 8013404:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8013408:	f04f 0300 	mov.w	r3, #0
 801340c:	4608      	mov	r0, r1
 801340e:	f01a fc7f 	bl	802dd10 <mg_timer_add>

		mg_http_reply(c, 200, headers, //TODO delete for release,
 8013412:	4b0b      	ldr	r3, [pc, #44]	@ (8013440 <handle_restart_mcu+0x80>)
 8013414:	4a0b      	ldr	r2, [pc, #44]	@ (8013444 <handle_restart_mcu+0x84>)
 8013416:	21c8      	movs	r1, #200	@ 0xc8
 8013418:	6878      	ldr	r0, [r7, #4]
 801341a:	f014 ff37 	bl	802828c <mg_http_reply>

	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
				"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
	}
}
 801341e:	e006      	b.n	801342e <handle_restart_mcu+0x6e>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8013420:	4b09      	ldr	r3, [pc, #36]	@ (8013448 <handle_restart_mcu+0x88>)
 8013422:	4a08      	ldr	r2, [pc, #32]	@ (8013444 <handle_restart_mcu+0x84>)
 8013424:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013428:	6878      	ldr	r0, [r7, #4]
 801342a:	f014 ff2f 	bl	802828c <mg_http_reply>
}
 801342e:	bf00      	nop
 8013430:	3718      	adds	r7, #24
 8013432:	46bd      	mov	sp, r7
 8013434:	bd80      	pop	{r7, pc}
 8013436:	bf00      	nop
 8013438:	0803f618 	.word	0x0803f618
 801343c:	08015e0b 	.word	0x08015e0b
 8013440:	0803fb34 	.word	0x0803fb34
 8013444:	0803f5a8 	.word	0x0803f5a8
 8013448:	0803fb68 	.word	0x0803fb68

0801344c <handle_firmware_upload>:

static void handle_firmware_upload(struct mg_connection *c, struct mg_http_message *hm){
 801344c:	b580      	push	{r7, lr}
 801344e:	b0a6      	sub	sp, #152	@ 0x98
 8013450:	af02      	add	r7, sp, #8
 8013452:	6078      	str	r0, [r7, #4]
 8013454:	6039      	str	r1, [r7, #0]
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 8013456:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 801345a:	4920      	ldr	r1, [pc, #128]	@ (80134dc <handle_firmware_upload+0x90>)
 801345c:	4618      	mov	r0, r3
 801345e:	f01e fbc1 	bl	8031be4 <mg_str_s>
 8013462:	6839      	ldr	r1, [r7, #0]
 8013464:	2300      	movs	r3, #0
 8013466:	9300      	str	r3, [sp, #0]
 8013468:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 801346c:	cb0c      	ldmia	r3, {r2, r3}
 801346e:	c903      	ldmia	r1, {r0, r1}
 8013470:	f01e fc8b 	bl	8031d8a <mg_match>
 8013474:	4603      	mov	r3, r0
 8013476:	2b00      	cmp	r3, #0
 8013478:	d024      	beq.n	80134c4 <handle_firmware_upload+0x78>
		char file[MG_PATH_MAX];
		mg_http_get_var(&hm->query, "file", file, sizeof(file));
 801347a:	683b      	ldr	r3, [r7, #0]
 801347c:	f103 0010 	add.w	r0, r3, #16
 8013480:	f107 0208 	add.w	r2, r7, #8
 8013484:	2380      	movs	r3, #128	@ 0x80
 8013486:	4916      	ldr	r1, [pc, #88]	@ (80134e0 <handle_firmware_upload+0x94>)
 8013488:	f013 fd72 	bl	8026f70 <mg_http_get_var>
		if(strcmp(file, FIRMWARE_FILE_NAME) == 0){
 801348c:	f107 0308 	add.w	r3, r7, #8
 8013490:	4914      	ldr	r1, [pc, #80]	@ (80134e4 <handle_firmware_upload+0x98>)
 8013492:	4618      	mov	r0, r3
 8013494:	f7fc fea4 	bl	80101e0 <strcmp>
 8013498:	4603      	mov	r3, r0
 801349a:	2b00      	cmp	r3, #0
 801349c:	d108      	bne.n	80134b0 <handle_firmware_upload+0x64>
			mg_http_upload(c, hm, &mg_fs_lfs, "/firmware", FIRMWARE_FILE_MAX_SIZE);
 801349e:	4b12      	ldr	r3, [pc, #72]	@ (80134e8 <handle_firmware_upload+0x9c>)
 80134a0:	9300      	str	r3, [sp, #0]
 80134a2:	4b12      	ldr	r3, [pc, #72]	@ (80134ec <handle_firmware_upload+0xa0>)
 80134a4:	4a12      	ldr	r2, [pc, #72]	@ (80134f0 <handle_firmware_upload+0xa4>)
 80134a6:	6839      	ldr	r1, [r7, #0]
 80134a8:	6878      	ldr	r0, [r7, #4]
 80134aa:	f016 f8ab 	bl	8029604 <mg_http_upload>

	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
	}
}
 80134ae:	e010      	b.n	80134d2 <handle_firmware_upload+0x86>
			mg_http_reply(c, 400, headers, //TODO delete for release,
 80134b0:	4b0c      	ldr	r3, [pc, #48]	@ (80134e4 <handle_firmware_upload+0x98>)
 80134b2:	9300      	str	r3, [sp, #0]
 80134b4:	4b0f      	ldr	r3, [pc, #60]	@ (80134f4 <handle_firmware_upload+0xa8>)
 80134b6:	4a10      	ldr	r2, [pc, #64]	@ (80134f8 <handle_firmware_upload+0xac>)
 80134b8:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80134bc:	6878      	ldr	r0, [r7, #4]
 80134be:	f014 fee5 	bl	802828c <mg_http_reply>
}
 80134c2:	e006      	b.n	80134d2 <handle_firmware_upload+0x86>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 80134c4:	4b0d      	ldr	r3, [pc, #52]	@ (80134fc <handle_firmware_upload+0xb0>)
 80134c6:	4a0c      	ldr	r2, [pc, #48]	@ (80134f8 <handle_firmware_upload+0xac>)
 80134c8:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80134cc:	6878      	ldr	r0, [r7, #4]
 80134ce:	f014 fedd 	bl	802828c <mg_http_reply>
}
 80134d2:	bf00      	nop
 80134d4:	3790      	adds	r7, #144	@ 0x90
 80134d6:	46bd      	mov	sp, r7
 80134d8:	bd80      	pop	{r7, pc}
 80134da:	bf00      	nop
 80134dc:	0803f618 	.word	0x0803f618
 80134e0:	0803fbb8 	.word	0x0803fbb8
 80134e4:	0803fbc0 	.word	0x0803fbc0
 80134e8:	00030d40 	.word	0x00030d40
 80134ec:	0803fbd0 	.word	0x0803fbd0
 80134f0:	2000000c 	.word	0x2000000c
 80134f4:	0803fbdc 	.word	0x0803fbdc
 80134f8:	0803f5a8 	.word	0x0803f5a8
 80134fc:	0803fb68 	.word	0x0803fb68

08013500 <handle_firmware_md5>:

static void handle_firmware_md5(struct mg_connection *c, struct mg_http_message *hm){
 8013500:	b580      	push	{r7, lr}
 8013502:	b088      	sub	sp, #32
 8013504:	af02      	add	r7, sp, #8
 8013506:	6078      	str	r0, [r7, #4]
 8013508:	6039      	str	r1, [r7, #0]
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 801350a:	f107 030c 	add.w	r3, r7, #12
 801350e:	491d      	ldr	r1, [pc, #116]	@ (8013584 <handle_firmware_md5+0x84>)
 8013510:	4618      	mov	r0, r3
 8013512:	f01e fb67 	bl	8031be4 <mg_str_s>
 8013516:	6839      	ldr	r1, [r7, #0]
 8013518:	2300      	movs	r3, #0
 801351a:	9300      	str	r3, [sp, #0]
 801351c:	f107 030c 	add.w	r3, r7, #12
 8013520:	cb0c      	ldmia	r3, {r2, r3}
 8013522:	c903      	ldmia	r1, {r0, r1}
 8013524:	f01e fc31 	bl	8031d8a <mg_match>
 8013528:	4603      	mov	r3, r0
 801352a:	2b00      	cmp	r3, #0
 801352c:	d01f      	beq.n	801356e <handle_firmware_md5+0x6e>
		char * md5_str = calloc(MD5_STR_LEN, sizeof(char));
 801352e:	2101      	movs	r1, #1
 8013530:	2021      	movs	r0, #33	@ 0x21
 8013532:	f7ff fa10 	bl	8012956 <mg_calloc>
 8013536:	6178      	str	r0, [r7, #20]
		if(calc_file_md5sum("/firmware/firmware.bin", md5_str) == 0){
 8013538:	6979      	ldr	r1, [r7, #20]
 801353a:	4813      	ldr	r0, [pc, #76]	@ (8013588 <handle_firmware_md5+0x88>)
 801353c:	f7ff fa56 	bl	80129ec <calc_file_md5sum>
 8013540:	4603      	mov	r3, r0
 8013542:	2b00      	cmp	r3, #0
 8013544:	d108      	bne.n	8013558 <handle_firmware_md5+0x58>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 8013546:	697b      	ldr	r3, [r7, #20]
 8013548:	9300      	str	r3, [sp, #0]
 801354a:	4b10      	ldr	r3, [pc, #64]	@ (801358c <handle_firmware_md5+0x8c>)
 801354c:	4a10      	ldr	r2, [pc, #64]	@ (8013590 <handle_firmware_md5+0x90>)
 801354e:	21c8      	movs	r1, #200	@ 0xc8
 8013550:	6878      	ldr	r0, [r7, #4]
 8013552:	f014 fe9b 	bl	802828c <mg_http_reply>
 8013556:	e006      	b.n	8013566 <handle_firmware_md5+0x66>
						"{\"status\":\"success\",\"md5\":\" %s\"}\r\n", md5_str);
		}else{
			mg_http_reply(c, 404, headers, //TODO delete for release,
 8013558:	4b0e      	ldr	r3, [pc, #56]	@ (8013594 <handle_firmware_md5+0x94>)
 801355a:	4a0d      	ldr	r2, [pc, #52]	@ (8013590 <handle_firmware_md5+0x90>)
 801355c:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8013560:	6878      	ldr	r0, [r7, #4]
 8013562:	f014 fe93 	bl	802828c <mg_http_reply>
							"{\"status\":\"error\",\"message\":\"Firmware update file not found\"}\r\n");
		}

		free(md5_str);
 8013566:	6978      	ldr	r0, [r7, #20]
 8013568:	f009 f8fe 	bl	801c768 <vPortFree>
	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET method\"}\r\n");
	}
}
 801356c:	e006      	b.n	801357c <handle_firmware_md5+0x7c>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 801356e:	4b0a      	ldr	r3, [pc, #40]	@ (8013598 <handle_firmware_md5+0x98>)
 8013570:	4a07      	ldr	r2, [pc, #28]	@ (8013590 <handle_firmware_md5+0x90>)
 8013572:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013576:	6878      	ldr	r0, [r7, #4]
 8013578:	f014 fe88 	bl	802828c <mg_http_reply>
}
 801357c:	bf00      	nop
 801357e:	3718      	adds	r7, #24
 8013580:	46bd      	mov	sp, r7
 8013582:	bd80      	pop	{r7, pc}
 8013584:	0803f570 	.word	0x0803f570
 8013588:	0803fc28 	.word	0x0803fc28
 801358c:	0803fc40 	.word	0x0803fc40
 8013590:	0803f5a8 	.word	0x0803f5a8
 8013594:	0803fc64 	.word	0x0803fc64
 8013598:	0803fca4 	.word	0x0803fca4

0801359c <handle_firmware_activate>:

static void handle_firmware_activate(struct mg_connection *c, struct mg_http_message *hm){
 801359c:	b580      	push	{r7, lr}
 801359e:	b08a      	sub	sp, #40	@ 0x28
 80135a0:	af02      	add	r7, sp, #8
 80135a2:	6078      	str	r0, [r7, #4]
 80135a4:	6039      	str	r1, [r7, #0]
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 80135a6:	f107 0310 	add.w	r3, r7, #16
 80135aa:	492e      	ldr	r1, [pc, #184]	@ (8013664 <handle_firmware_activate+0xc8>)
 80135ac:	4618      	mov	r0, r3
 80135ae:	f01e fb19 	bl	8031be4 <mg_str_s>
 80135b2:	6839      	ldr	r1, [r7, #0]
 80135b4:	2300      	movs	r3, #0
 80135b6:	9300      	str	r3, [sp, #0]
 80135b8:	f107 0310 	add.w	r3, r7, #16
 80135bc:	cb0c      	ldmia	r3, {r2, r3}
 80135be:	c903      	ldmia	r1, {r0, r1}
 80135c0:	f01e fbe3 	bl	8031d8a <mg_match>
 80135c4:	4603      	mov	r3, r0
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d017      	beq.n	80135fa <handle_firmware_activate+0x5e>
		size_t  size;

		if (mg_fs_lfs.st("/firmware.bin", &size, NULL)){ //Check if file exist
 80135ca:	4b27      	ldr	r3, [pc, #156]	@ (8013668 <handle_firmware_activate+0xcc>)
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	f107 010c 	add.w	r1, r7, #12
 80135d2:	2200      	movs	r2, #0
 80135d4:	4825      	ldr	r0, [pc, #148]	@ (801366c <handle_firmware_activate+0xd0>)
 80135d6:	4798      	blx	r3
 80135d8:	4603      	mov	r3, r0
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d006      	beq.n	80135ec <handle_firmware_activate+0x50>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 80135de:	4b24      	ldr	r3, [pc, #144]	@ (8013670 <handle_firmware_activate+0xd4>)
 80135e0:	4a24      	ldr	r2, [pc, #144]	@ (8013674 <handle_firmware_activate+0xd8>)
 80135e2:	21c8      	movs	r1, #200	@ 0xc8
 80135e4:	6878      	ldr	r0, [r7, #4]
 80135e6:	f014 fe51 	bl	802828c <mg_http_reply>
	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET and POST methods\"}\r\n");

	}
}
 80135ea:	e036      	b.n	801365a <handle_firmware_activate+0xbe>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 80135ec:	4b22      	ldr	r3, [pc, #136]	@ (8013678 <handle_firmware_activate+0xdc>)
 80135ee:	4a21      	ldr	r2, [pc, #132]	@ (8013674 <handle_firmware_activate+0xd8>)
 80135f0:	21c8      	movs	r1, #200	@ 0xc8
 80135f2:	6878      	ldr	r0, [r7, #4]
 80135f4:	f014 fe4a 	bl	802828c <mg_http_reply>
}
 80135f8:	e02f      	b.n	801365a <handle_firmware_activate+0xbe>
	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 80135fa:	f107 0318 	add.w	r3, r7, #24
 80135fe:	491f      	ldr	r1, [pc, #124]	@ (801367c <handle_firmware_activate+0xe0>)
 8013600:	4618      	mov	r0, r3
 8013602:	f01e faef 	bl	8031be4 <mg_str_s>
 8013606:	6839      	ldr	r1, [r7, #0]
 8013608:	2300      	movs	r3, #0
 801360a:	9300      	str	r3, [sp, #0]
 801360c:	f107 0318 	add.w	r3, r7, #24
 8013610:	cb0c      	ldmia	r3, {r2, r3}
 8013612:	c903      	ldmia	r1, {r0, r1}
 8013614:	f01e fbb9 	bl	8031d8a <mg_match>
 8013618:	4603      	mov	r3, r0
 801361a:	2b00      	cmp	r3, #0
 801361c:	d016      	beq.n	801364c <handle_firmware_activate+0xb0>
	    if (mg_fs_lfs.mv("/firmware/firmware.bin", "/firmware.bin")){
 801361e:	4b12      	ldr	r3, [pc, #72]	@ (8013668 <handle_firmware_activate+0xcc>)
 8013620:	69db      	ldr	r3, [r3, #28]
 8013622:	4912      	ldr	r1, [pc, #72]	@ (801366c <handle_firmware_activate+0xd0>)
 8013624:	4816      	ldr	r0, [pc, #88]	@ (8013680 <handle_firmware_activate+0xe4>)
 8013626:	4798      	blx	r3
 8013628:	4603      	mov	r3, r0
 801362a:	2b00      	cmp	r3, #0
 801362c:	d006      	beq.n	801363c <handle_firmware_activate+0xa0>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 801362e:	4b10      	ldr	r3, [pc, #64]	@ (8013670 <handle_firmware_activate+0xd4>)
 8013630:	4a10      	ldr	r2, [pc, #64]	@ (8013674 <handle_firmware_activate+0xd8>)
 8013632:	21c8      	movs	r1, #200	@ 0xc8
 8013634:	6878      	ldr	r0, [r7, #4]
 8013636:	f014 fe29 	bl	802828c <mg_http_reply>
}
 801363a:	e00e      	b.n	801365a <handle_firmware_activate+0xbe>
			mg_http_reply(c, 500, headers, //TODO delete for release,
 801363c:	4b11      	ldr	r3, [pc, #68]	@ (8013684 <handle_firmware_activate+0xe8>)
 801363e:	4a0d      	ldr	r2, [pc, #52]	@ (8013674 <handle_firmware_activate+0xd8>)
 8013640:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013644:	6878      	ldr	r0, [r7, #4]
 8013646:	f014 fe21 	bl	802828c <mg_http_reply>
}
 801364a:	e006      	b.n	801365a <handle_firmware_activate+0xbe>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 801364c:	4b0e      	ldr	r3, [pc, #56]	@ (8013688 <handle_firmware_activate+0xec>)
 801364e:	4a09      	ldr	r2, [pc, #36]	@ (8013674 <handle_firmware_activate+0xd8>)
 8013650:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013654:	6878      	ldr	r0, [r7, #4]
 8013656:	f014 fe19 	bl	802828c <mg_http_reply>
}
 801365a:	bf00      	nop
 801365c:	3720      	adds	r7, #32
 801365e:	46bd      	mov	sp, r7
 8013660:	bd80      	pop	{r7, pc}
 8013662:	bf00      	nop
 8013664:	0803f570 	.word	0x0803f570
 8013668:	2000000c 	.word	0x2000000c
 801366c:	0803fcf4 	.word	0x0803fcf4
 8013670:	0803fd04 	.word	0x0803fd04
 8013674:	0803f5a8 	.word	0x0803f5a8
 8013678:	0803fd3c 	.word	0x0803fd3c
 801367c:	0803f618 	.word	0x0803f618
 8013680:	0803fc28 	.word	0x0803fc28
 8013684:	0803fd78 	.word	0x0803fd78
 8013688:	0803fdbc 	.word	0x0803fdbc

0801368c <handle_firmware_deactivate>:

static void handle_firmware_deactivate(struct mg_connection *c, struct mg_http_message *hm){
 801368c:	b580      	push	{r7, lr}
 801368e:	b086      	sub	sp, #24
 8013690:	af02      	add	r7, sp, #8
 8013692:	6078      	str	r0, [r7, #4]
 8013694:	6039      	str	r1, [r7, #0]

	if (mg_match(hm->method, mg_str("POST"), NULL)){
 8013696:	f107 0308 	add.w	r3, r7, #8
 801369a:	4918      	ldr	r1, [pc, #96]	@ (80136fc <handle_firmware_deactivate+0x70>)
 801369c:	4618      	mov	r0, r3
 801369e:	f01e faa1 	bl	8031be4 <mg_str_s>
 80136a2:	6839      	ldr	r1, [r7, #0]
 80136a4:	2300      	movs	r3, #0
 80136a6:	9300      	str	r3, [sp, #0]
 80136a8:	f107 0308 	add.w	r3, r7, #8
 80136ac:	cb0c      	ldmia	r3, {r2, r3}
 80136ae:	c903      	ldmia	r1, {r0, r1}
 80136b0:	f01e fb6b 	bl	8031d8a <mg_match>
 80136b4:	4603      	mov	r3, r0
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d014      	beq.n	80136e4 <handle_firmware_deactivate+0x58>
		if (mg_fs_lfs.rm("/firmware.bin")){ //if firmware delete saccess
 80136ba:	4b11      	ldr	r3, [pc, #68]	@ (8013700 <handle_firmware_deactivate+0x74>)
 80136bc:	6a1b      	ldr	r3, [r3, #32]
 80136be:	4811      	ldr	r0, [pc, #68]	@ (8013704 <handle_firmware_deactivate+0x78>)
 80136c0:	4798      	blx	r3
 80136c2:	4603      	mov	r3, r0
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d006      	beq.n	80136d6 <handle_firmware_deactivate+0x4a>

			mg_http_reply(c, 200, headers, //TODO delete for release,
 80136c8:	4b0f      	ldr	r3, [pc, #60]	@ (8013708 <handle_firmware_deactivate+0x7c>)
 80136ca:	4a10      	ldr	r2, [pc, #64]	@ (801370c <handle_firmware_deactivate+0x80>)
 80136cc:	21c8      	movs	r1, #200	@ 0xc8
 80136ce:	6878      	ldr	r0, [r7, #4]
 80136d0:	f014 fddc 	bl	802828c <mg_http_reply>
				}
	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
	}
}
 80136d4:	e00d      	b.n	80136f2 <handle_firmware_deactivate+0x66>
					mg_http_reply(c, 200, headers, //TODO delete for release,
 80136d6:	4b0e      	ldr	r3, [pc, #56]	@ (8013710 <handle_firmware_deactivate+0x84>)
 80136d8:	4a0c      	ldr	r2, [pc, #48]	@ (801370c <handle_firmware_deactivate+0x80>)
 80136da:	21c8      	movs	r1, #200	@ 0xc8
 80136dc:	6878      	ldr	r0, [r7, #4]
 80136de:	f014 fdd5 	bl	802828c <mg_http_reply>
}
 80136e2:	e006      	b.n	80136f2 <handle_firmware_deactivate+0x66>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 80136e4:	4b0b      	ldr	r3, [pc, #44]	@ (8013714 <handle_firmware_deactivate+0x88>)
 80136e6:	4a09      	ldr	r2, [pc, #36]	@ (801370c <handle_firmware_deactivate+0x80>)
 80136e8:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80136ec:	6878      	ldr	r0, [r7, #4]
 80136ee:	f014 fdcd 	bl	802828c <mg_http_reply>
}
 80136f2:	bf00      	nop
 80136f4:	3710      	adds	r7, #16
 80136f6:	46bd      	mov	sp, r7
 80136f8:	bd80      	pop	{r7, pc}
 80136fa:	bf00      	nop
 80136fc:	0803f618 	.word	0x0803f618
 8013700:	2000000c 	.word	0x2000000c
 8013704:	0803fcf4 	.word	0x0803fcf4
 8013708:	0803fe14 	.word	0x0803fe14
 801370c:	0803f5a8 	.word	0x0803f5a8
 8013710:	0803fe50 	.word	0x0803fe50
 8013714:	0803fb68 	.word	0x0803fb68

08013718 <handle_web_files_remove>:

static void handle_web_files_remove(struct mg_connection *c, struct mg_http_message *hm){
 8013718:	b580      	push	{r7, lr}
 801371a:	b086      	sub	sp, #24
 801371c:	af02      	add	r7, sp, #8
 801371e:	6078      	str	r0, [r7, #4]
 8013720:	6039      	str	r1, [r7, #0]

	if (mg_match(hm->method, mg_str("POST"), NULL)){
 8013722:	f107 0308 	add.w	r3, r7, #8
 8013726:	4915      	ldr	r1, [pc, #84]	@ (801377c <handle_web_files_remove+0x64>)
 8013728:	4618      	mov	r0, r3
 801372a:	f01e fa5b 	bl	8031be4 <mg_str_s>
 801372e:	6839      	ldr	r1, [r7, #0]
 8013730:	2300      	movs	r3, #0
 8013732:	9300      	str	r3, [sp, #0]
 8013734:	f107 0308 	add.w	r3, r7, #8
 8013738:	cb0c      	ldmia	r3, {r2, r3}
 801373a:	c903      	ldmia	r1, {r0, r1}
 801373c:	f01e fb25 	bl	8031d8a <mg_match>
 8013740:	4603      	mov	r3, r0
 8013742:	2b00      	cmp	r3, #0
 8013744:	d00e      	beq.n	8013764 <handle_web_files_remove+0x4c>
			mg_fs_lfs.rm("/web");
 8013746:	4b0e      	ldr	r3, [pc, #56]	@ (8013780 <handle_web_files_remove+0x68>)
 8013748:	6a1b      	ldr	r3, [r3, #32]
 801374a:	480e      	ldr	r0, [pc, #56]	@ (8013784 <handle_web_files_remove+0x6c>)
 801374c:	4798      	blx	r3
	        mg_fs_lfs.mkd("/web");
 801374e:	4b0c      	ldr	r3, [pc, #48]	@ (8013780 <handle_web_files_remove+0x68>)
 8013750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013752:	480c      	ldr	r0, [pc, #48]	@ (8013784 <handle_web_files_remove+0x6c>)
 8013754:	4798      	blx	r3
	        mg_http_reply(c, 200, headers, //TODO delete for release,
 8013756:	4b0c      	ldr	r3, [pc, #48]	@ (8013788 <handle_web_files_remove+0x70>)
 8013758:	4a0c      	ldr	r2, [pc, #48]	@ (801378c <handle_web_files_remove+0x74>)
 801375a:	21c8      	movs	r1, #200	@ 0xc8
 801375c:	6878      	ldr	r0, [r7, #4]
 801375e:	f014 fd95 	bl	802828c <mg_http_reply>
			    "{\"status\":\"success\",\"message\":\"All web interface files are deleted\"}\r\n");
    }else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
    }
}
 8013762:	e006      	b.n	8013772 <handle_web_files_remove+0x5a>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8013764:	4b0a      	ldr	r3, [pc, #40]	@ (8013790 <handle_web_files_remove+0x78>)
 8013766:	4a09      	ldr	r2, [pc, #36]	@ (801378c <handle_web_files_remove+0x74>)
 8013768:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801376c:	6878      	ldr	r0, [r7, #4]
 801376e:	f014 fd8d 	bl	802828c <mg_http_reply>
}
 8013772:	bf00      	nop
 8013774:	3710      	adds	r7, #16
 8013776:	46bd      	mov	sp, r7
 8013778:	bd80      	pop	{r7, pc}
 801377a:	bf00      	nop
 801377c:	0803f618 	.word	0x0803f618
 8013780:	2000000c 	.word	0x2000000c
 8013784:	0803fe94 	.word	0x0803fe94
 8013788:	0803fe9c 	.word	0x0803fe9c
 801378c:	0803f5a8 	.word	0x0803f5a8
 8013790:	0803fb68 	.word	0x0803fb68

08013794 <handle_fs_mkdir>:

// Функция для создания папки
static void handle_fs_mkdir(struct mg_connection *c, struct mg_http_message *hm) {
 8013794:	b580      	push	{r7, lr}
 8013796:	b0c6      	sub	sp, #280	@ 0x118
 8013798:	af02      	add	r7, sp, #8
 801379a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801379e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80137a2:	6018      	str	r0, [r3, #0]
 80137a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80137a8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80137ac:	6019      	str	r1, [r3, #0]
  char name[123];
  char path[MG_PATH_MAX];

  if (mg_match(hm->method, mg_str("POST"), NULL)){
 80137ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80137b2:	4934      	ldr	r1, [pc, #208]	@ (8013884 <handle_fs_mkdir+0xf0>)
 80137b4:	4618      	mov	r0, r3
 80137b6:	f01e fa15 	bl	8031be4 <mg_str_s>
 80137ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80137be:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80137c2:	6819      	ldr	r1, [r3, #0]
 80137c4:	2300      	movs	r3, #0
 80137c6:	9300      	str	r3, [sp, #0]
 80137c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80137cc:	cb0c      	ldmia	r3, {r2, r3}
 80137ce:	c903      	ldmia	r1, {r0, r1}
 80137d0:	f01e fadb 	bl	8031d8a <mg_match>
 80137d4:	4603      	mov	r3, r0
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d043      	beq.n	8013862 <handle_fs_mkdir+0xce>
			// Получаем имя папки из параметра запроса
	  if (mg_http_get_var(&hm->body, "name", name, sizeof(name)) > 0) {
 80137da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80137de:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	f503 7000 	add.w	r0, r3, #512	@ 0x200
 80137e8:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 80137ec:	237b      	movs	r3, #123	@ 0x7b
 80137ee:	4926      	ldr	r1, [pc, #152]	@ (8013888 <handle_fs_mkdir+0xf4>)
 80137f0:	f013 fbbe 	bl	8026f70 <mg_http_get_var>
 80137f4:	4603      	mov	r3, r0
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	dd27      	ble.n	801384a <handle_fs_mkdir+0xb6>
		// Формируем полный путь
		snprintf(path, sizeof(path), "/web/%s", name);
 80137fa:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80137fe:	f107 000c 	add.w	r0, r7, #12
 8013802:	4a22      	ldr	r2, [pc, #136]	@ (801388c <handle_fs_mkdir+0xf8>)
 8013804:	2180      	movs	r1, #128	@ 0x80
 8013806:	f021 fdc9 	bl	803539c <snprintf>

		// Создаем папку
		if (mg_fs_lfs.mkd(path)) {
 801380a:	4b21      	ldr	r3, [pc, #132]	@ (8013890 <handle_fs_mkdir+0xfc>)
 801380c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801380e:	f107 020c 	add.w	r2, r7, #12
 8013812:	4610      	mov	r0, r2
 8013814:	4798      	blx	r3
 8013816:	4603      	mov	r3, r0
 8013818:	2b00      	cmp	r3, #0
 801381a:	d00a      	beq.n	8013832 <handle_fs_mkdir+0x9e>
		  // Если создание успешно, отправляем положительный ответ
		  mg_http_reply(c, 200, headers, //TODO delete for release,
 801381c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013820:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 8013824:	4b1b      	ldr	r3, [pc, #108]	@ (8013894 <handle_fs_mkdir+0x100>)
 8013826:	4a1c      	ldr	r2, [pc, #112]	@ (8013898 <handle_fs_mkdir+0x104>)
 8013828:	21c8      	movs	r1, #200	@ 0xc8
 801382a:	6800      	ldr	r0, [r0, #0]
 801382c:	f014 fd2e 	bl	802828c <mg_http_reply>
	  }
  }else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
  }
}
 8013830:	e022      	b.n	8013878 <handle_fs_mkdir+0xe4>
		  mg_http_reply(c, 500, headers, //TODO delete for release,
 8013832:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013836:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 801383a:	4b18      	ldr	r3, [pc, #96]	@ (801389c <handle_fs_mkdir+0x108>)
 801383c:	4a16      	ldr	r2, [pc, #88]	@ (8013898 <handle_fs_mkdir+0x104>)
 801383e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013842:	6800      	ldr	r0, [r0, #0]
 8013844:	f014 fd22 	bl	802828c <mg_http_reply>
}
 8013848:	e016      	b.n	8013878 <handle_fs_mkdir+0xe4>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 801384a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801384e:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 8013852:	4b13      	ldr	r3, [pc, #76]	@ (80138a0 <handle_fs_mkdir+0x10c>)
 8013854:	4a10      	ldr	r2, [pc, #64]	@ (8013898 <handle_fs_mkdir+0x104>)
 8013856:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801385a:	6800      	ldr	r0, [r0, #0]
 801385c:	f014 fd16 	bl	802828c <mg_http_reply>
}
 8013860:	e00a      	b.n	8013878 <handle_fs_mkdir+0xe4>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8013862:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013866:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 801386a:	4b0e      	ldr	r3, [pc, #56]	@ (80138a4 <handle_fs_mkdir+0x110>)
 801386c:	4a0a      	ldr	r2, [pc, #40]	@ (8013898 <handle_fs_mkdir+0x104>)
 801386e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013872:	6800      	ldr	r0, [r0, #0]
 8013874:	f014 fd0a 	bl	802828c <mg_http_reply>
}
 8013878:	bf00      	nop
 801387a:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 801387e:	46bd      	mov	sp, r7
 8013880:	bd80      	pop	{r7, pc}
 8013882:	bf00      	nop
 8013884:	0803f618 	.word	0x0803f618
 8013888:	0803fee4 	.word	0x0803fee4
 801388c:	0803feec 	.word	0x0803feec
 8013890:	2000000c 	.word	0x2000000c
 8013894:	0803fef4 	.word	0x0803fef4
 8013898:	0803f5a8 	.word	0x0803f5a8
 801389c:	0803ff28 	.word	0x0803ff28
 80138a0:	0803ff64 	.word	0x0803ff64
 80138a4:	0803fb68 	.word	0x0803fb68

080138a8 <handle_fs_get_log>:

// function for show logging
// function for show logging
static void handle_fs_get_log(struct mg_connection *c, struct mg_http_message *hm, int number){
 80138a8:	b580      	push	{r7, lr}
 80138aa:	b090      	sub	sp, #64	@ 0x40
 80138ac:	af02      	add	r7, sp, #8
 80138ae:	60f8      	str	r0, [r7, #12]
 80138b0:	60b9      	str	r1, [r7, #8]
 80138b2:	607a      	str	r2, [r7, #4]

	if (mg_match(hm->method, mg_str("GET"), NULL)){
 80138b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80138b8:	492c      	ldr	r1, [pc, #176]	@ (801396c <handle_fs_get_log+0xc4>)
 80138ba:	4618      	mov	r0, r3
 80138bc:	f01e f992 	bl	8031be4 <mg_str_s>
 80138c0:	68b9      	ldr	r1, [r7, #8]
 80138c2:	2300      	movs	r3, #0
 80138c4:	9300      	str	r3, [sp, #0]
 80138c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80138ca:	cb0c      	ldmia	r3, {r2, r3}
 80138cc:	c903      	ldmia	r1, {r0, r1}
 80138ce:	f01e fa5c 	bl	8031d8a <mg_match>
 80138d2:	4603      	mov	r3, r0
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d02b      	beq.n	8013930 <handle_fs_get_log+0x88>

		struct mg_http_serve_opts opts = {
 80138d8:	f107 0310 	add.w	r3, r7, #16
 80138dc:	2200      	movs	r2, #0
 80138de:	601a      	str	r2, [r3, #0]
 80138e0:	605a      	str	r2, [r3, #4]
 80138e2:	609a      	str	r2, [r3, #8]
 80138e4:	60da      	str	r2, [r3, #12]
 80138e6:	611a      	str	r2, [r3, #16]
 80138e8:	615a      	str	r2, [r3, #20]
 80138ea:	4b21      	ldr	r3, [pc, #132]	@ (8013970 <handle_fs_get_log+0xc8>)
 80138ec:	613b      	str	r3, [r7, #16]
 80138ee:	4b21      	ldr	r3, [pc, #132]	@ (8013974 <handle_fs_get_log+0xcc>)
 80138f0:	627b      	str	r3, [r7, #36]	@ 0x24
			.root_dir = "/log",
			.fs = &mg_fs_lfs
		};

		switch (number) {
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d003      	beq.n	8013900 <handle_fs_get_log+0x58>
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	2b01      	cmp	r3, #1
 80138fc:	d008      	beq.n	8013910 <handle_fs_get_log+0x68>
 80138fe:	e00f      	b.n	8013920 <handle_fs_get_log+0x78>
			case 0:
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION, &opts);
 8013900:	f107 0310 	add.w	r3, r7, #16
 8013904:	4a1c      	ldr	r2, [pc, #112]	@ (8013978 <handle_fs_get_log+0xd0>)
 8013906:	68b9      	ldr	r1, [r7, #8]
 8013908:	68f8      	ldr	r0, [r7, #12]
 801390a:	f014 feb3 	bl	8028674 <mg_http_serve_file>
				break;
 801390e:	e029      	b.n	8013964 <handle_fs_get_log+0xbc>
			case 1:
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION_OLD, &opts);
 8013910:	f107 0310 	add.w	r3, r7, #16
 8013914:	4a19      	ldr	r2, [pc, #100]	@ (801397c <handle_fs_get_log+0xd4>)
 8013916:	68b9      	ldr	r1, [r7, #8]
 8013918:	68f8      	ldr	r0, [r7, #12]
 801391a:	f014 feab 	bl	8028674 <mg_http_serve_file>
				break;
 801391e:	e021      	b.n	8013964 <handle_fs_get_log+0xbc>
			default:
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION, &opts);
 8013920:	f107 0310 	add.w	r3, r7, #16
 8013924:	4a14      	ldr	r2, [pc, #80]	@ (8013978 <handle_fs_get_log+0xd0>)
 8013926:	68b9      	ldr	r1, [r7, #8]
 8013928:	68f8      	ldr	r0, [r7, #12]
 801392a:	f014 fea3 	bl	8028674 <mg_http_serve_file>
				break;
 801392e:	e019      	b.n	8013964 <handle_fs_get_log+0xbc>
		}


	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 8013930:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8013934:	4912      	ldr	r1, [pc, #72]	@ (8013980 <handle_fs_get_log+0xd8>)
 8013936:	4618      	mov	r0, r3
 8013938:	f01e f954 	bl	8031be4 <mg_str_s>
 801393c:	68b9      	ldr	r1, [r7, #8]
 801393e:	2300      	movs	r3, #0
 8013940:	9300      	str	r3, [sp, #0]
 8013942:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8013946:	cb0c      	ldmia	r3, {r2, r3}
 8013948:	c903      	ldmia	r1, {r0, r1}
 801394a:	f01e fa1e 	bl	8031d8a <mg_match>
 801394e:	4603      	mov	r3, r0
 8013950:	2b00      	cmp	r3, #0
 8013952:	d107      	bne.n	8013964 <handle_fs_get_log+0xbc>

	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8013954:	4b0b      	ldr	r3, [pc, #44]	@ (8013984 <handle_fs_get_log+0xdc>)
 8013956:	4a0c      	ldr	r2, [pc, #48]	@ (8013988 <handle_fs_get_log+0xe0>)
 8013958:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801395c:	68f8      	ldr	r0, [r7, #12]
 801395e:	f014 fc95 	bl	802828c <mg_http_reply>
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET and POST methods\"}\r\n");
	}
}
 8013962:	e7ff      	b.n	8013964 <handle_fs_get_log+0xbc>
 8013964:	bf00      	nop
 8013966:	3738      	adds	r7, #56	@ 0x38
 8013968:	46bd      	mov	sp, r7
 801396a:	bd80      	pop	{r7, pc}
 801396c:	0803f570 	.word	0x0803f570
 8013970:	0803ffa0 	.word	0x0803ffa0
 8013974:	2000000c 	.word	0x2000000c
 8013978:	0803ffa8 	.word	0x0803ffa8
 801397c:	0803ffb8 	.word	0x0803ffb8
 8013980:	0803f618 	.word	0x0803f618
 8013984:	0803fdbc 	.word	0x0803fdbc
 8013988:	0803f5a8 	.word	0x0803f5a8

0801398c <dashboard>:

static void dashboard(struct mg_connection *c, int ev, void *ev_data) {
 801398c:	b580      	push	{r7, lr}
 801398e:	b0ac      	sub	sp, #176	@ 0xb0
 8013990:	af02      	add	r7, sp, #8
 8013992:	60f8      	str	r0, [r7, #12]
 8013994:	60b9      	str	r1, [r7, #8]
 8013996:	607a      	str	r2, [r7, #4]

	if (ev == MG_EV_HTTP_MSG) {
 8013998:	68bb      	ldr	r3, [r7, #8]
 801399a:	2b0b      	cmp	r3, #11
 801399c:	f040 81c0 	bne.w	8013d20 <dashboard+0x394>
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

        if (mg_match(hm->method, mg_str("OPTIONS"), NULL)) {
 80139a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80139aa:	49b5      	ldr	r1, [pc, #724]	@ (8013c80 <dashboard+0x2f4>)
 80139ac:	4618      	mov	r0, r3
 80139ae:	f01e f919 	bl	8031be4 <mg_str_s>
 80139b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80139b6:	2300      	movs	r3, #0
 80139b8:	9300      	str	r3, [sp, #0]
 80139ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80139be:	cb0c      	ldmia	r3, {r2, r3}
 80139c0:	c903      	ldmia	r1, {r0, r1}
 80139c2:	f01e f9e2 	bl	8031d8a <mg_match>
 80139c6:	4603      	mov	r3, r0
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d003      	beq.n	80139d4 <dashboard+0x48>
            	handle_OPTIONS_method(c);
 80139cc:	68f8      	ldr	r0, [r7, #12]
 80139ce:	f7ff fce5 	bl	801339c <handle_OPTIONS_method>
				.fs = &mg_fs_lfs
			};
			mg_http_serve_dir(c, ev_data, &opts);
		}
	}
}
 80139d2:	e1a5      	b.n	8013d20 <dashboard+0x394>
        }else if (mg_match(hm->uri, mg_str("/api/ram/status"), NULL)) { // Get free and allocated RAM space
 80139d4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80139d8:	49aa      	ldr	r1, [pc, #680]	@ (8013c84 <dashboard+0x2f8>)
 80139da:	4618      	mov	r0, r3
 80139dc:	f01e f902 	bl	8031be4 <mg_str_s>
 80139e0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80139e4:	2300      	movs	r3, #0
 80139e6:	9300      	str	r3, [sp, #0]
 80139e8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80139ec:	cb0c      	ldmia	r3, {r2, r3}
 80139ee:	3108      	adds	r1, #8
 80139f0:	c903      	ldmia	r1, {r0, r1}
 80139f2:	f01e f9ca 	bl	8031d8a <mg_match>
 80139f6:	4603      	mov	r3, r0
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d003      	beq.n	8013a04 <dashboard+0x78>
			handle_ram_status_get(c);
 80139fc:	68f8      	ldr	r0, [r7, #12]
 80139fe:	f7fe ffc9 	bl	8012994 <handle_ram_status_get>
}
 8013a02:	e18d      	b.n	8013d20 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/io/status"), NULL)){
 8013a04:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8013a08:	499f      	ldr	r1, [pc, #636]	@ (8013c88 <dashboard+0x2fc>)
 8013a0a:	4618      	mov	r0, r3
 8013a0c:	f01e f8ea 	bl	8031be4 <mg_str_s>
 8013a10:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013a14:	2300      	movs	r3, #0
 8013a16:	9300      	str	r3, [sp, #0]
 8013a18:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8013a1c:	cb0c      	ldmia	r3, {r2, r3}
 8013a1e:	3108      	adds	r1, #8
 8013a20:	c903      	ldmia	r1, {r0, r1}
 8013a22:	f01e f9b2 	bl	8031d8a <mg_match>
 8013a26:	4603      	mov	r3, r0
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d005      	beq.n	8013a38 <dashboard+0xac>
			handle_io_status_get(c, hm);
 8013a2c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013a30:	68f8      	ldr	r0, [r7, #12]
 8013a32:	f7ff f869 	bl	8012b08 <handle_io_status_get>
}
 8013a36:	e173      	b.n	8013d20 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/mqtt/settings"), NULL)){
 8013a38:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8013a3c:	4993      	ldr	r1, [pc, #588]	@ (8013c8c <dashboard+0x300>)
 8013a3e:	4618      	mov	r0, r3
 8013a40:	f01e f8d0 	bl	8031be4 <mg_str_s>
 8013a44:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013a48:	2300      	movs	r3, #0
 8013a4a:	9300      	str	r3, [sp, #0]
 8013a4c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8013a50:	cb0c      	ldmia	r3, {r2, r3}
 8013a52:	3108      	adds	r1, #8
 8013a54:	c903      	ldmia	r1, {r0, r1}
 8013a56:	f01e f998 	bl	8031d8a <mg_match>
 8013a5a:	4603      	mov	r3, r0
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d005      	beq.n	8013a6c <dashboard+0xe0>
			handle_mqtt_conf(c, hm);
 8013a60:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013a64:	68f8      	ldr	r0, [r7, #12]
 8013a66:	f7ff f92d 	bl	8012cc4 <handle_mqtt_conf>
}
 8013a6a:	e159      	b.n	8013d20 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/device/status"), NULL)){
 8013a6c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013a70:	4987      	ldr	r1, [pc, #540]	@ (8013c90 <dashboard+0x304>)
 8013a72:	4618      	mov	r0, r3
 8013a74:	f01e f8b6 	bl	8031be4 <mg_str_s>
 8013a78:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013a7c:	2300      	movs	r3, #0
 8013a7e:	9300      	str	r3, [sp, #0]
 8013a80:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013a84:	cb0c      	ldmia	r3, {r2, r3}
 8013a86:	3108      	adds	r1, #8
 8013a88:	c903      	ldmia	r1, {r0, r1}
 8013a8a:	f01e f97e 	bl	8031d8a <mg_match>
 8013a8e:	4603      	mov	r3, r0
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d005      	beq.n	8013aa0 <dashboard+0x114>
			handle_dev_status(c, hm);
 8013a94:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013a98:	68f8      	ldr	r0, [r7, #12]
 8013a9a:	f7ff fa93 	bl	8012fc4 <handle_dev_status>
}
 8013a9e:	e13f      	b.n	8013d20 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/device/log"), NULL)){
 8013aa0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8013aa4:	497b      	ldr	r1, [pc, #492]	@ (8013c94 <dashboard+0x308>)
 8013aa6:	4618      	mov	r0, r3
 8013aa8:	f01e f89c 	bl	8031be4 <mg_str_s>
 8013aac:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013ab0:	2300      	movs	r3, #0
 8013ab2:	9300      	str	r3, [sp, #0]
 8013ab4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8013ab8:	cb0c      	ldmia	r3, {r2, r3}
 8013aba:	3108      	adds	r1, #8
 8013abc:	c903      	ldmia	r1, {r0, r1}
 8013abe:	f01e f964 	bl	8031d8a <mg_match>
 8013ac2:	4603      	mov	r3, r0
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d006      	beq.n	8013ad6 <dashboard+0x14a>
			handle_fs_get_log(c, hm, 0);
 8013ac8:	2200      	movs	r2, #0
 8013aca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013ace:	68f8      	ldr	r0, [r7, #12]
 8013ad0:	f7ff feea 	bl	80138a8 <handle_fs_get_log>
}
 8013ad4:	e124      	b.n	8013d20 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/device/log_old"), NULL)){
 8013ad6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8013ada:	496f      	ldr	r1, [pc, #444]	@ (8013c98 <dashboard+0x30c>)
 8013adc:	4618      	mov	r0, r3
 8013ade:	f01e f881 	bl	8031be4 <mg_str_s>
 8013ae2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013ae6:	2300      	movs	r3, #0
 8013ae8:	9300      	str	r3, [sp, #0]
 8013aea:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8013aee:	cb0c      	ldmia	r3, {r2, r3}
 8013af0:	3108      	adds	r1, #8
 8013af2:	c903      	ldmia	r1, {r0, r1}
 8013af4:	f01e f949 	bl	8031d8a <mg_match>
 8013af8:	4603      	mov	r3, r0
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d006      	beq.n	8013b0c <dashboard+0x180>
			handle_fs_get_log(c, hm, 1);
 8013afe:	2201      	movs	r2, #1
 8013b00:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013b04:	68f8      	ldr	r0, [r7, #12]
 8013b06:	f7ff fecf 	bl	80138a8 <handle_fs_get_log>
}
 8013b0a:	e109      	b.n	8013d20 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/device/restart"), NULL)){
 8013b0c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8013b10:	4962      	ldr	r1, [pc, #392]	@ (8013c9c <dashboard+0x310>)
 8013b12:	4618      	mov	r0, r3
 8013b14:	f01e f866 	bl	8031be4 <mg_str_s>
 8013b18:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013b1c:	2300      	movs	r3, #0
 8013b1e:	9300      	str	r3, [sp, #0]
 8013b20:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8013b24:	cb0c      	ldmia	r3, {r2, r3}
 8013b26:	3108      	adds	r1, #8
 8013b28:	c903      	ldmia	r1, {r0, r1}
 8013b2a:	f01e f92e 	bl	8031d8a <mg_match>
 8013b2e:	4603      	mov	r3, r0
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d005      	beq.n	8013b40 <dashboard+0x1b4>
			handle_restart_mcu(c, hm);
 8013b34:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013b38:	68f8      	ldr	r0, [r7, #12]
 8013b3a:	f7ff fc41 	bl	80133c0 <handle_restart_mcu>
}
 8013b3e:	e0ef      	b.n	8013d20 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/upload"), NULL)){
 8013b40:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8013b44:	4956      	ldr	r1, [pc, #344]	@ (8013ca0 <dashboard+0x314>)
 8013b46:	4618      	mov	r0, r3
 8013b48:	f01e f84c 	bl	8031be4 <mg_str_s>
 8013b4c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013b50:	2300      	movs	r3, #0
 8013b52:	9300      	str	r3, [sp, #0]
 8013b54:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8013b58:	cb0c      	ldmia	r3, {r2, r3}
 8013b5a:	3108      	adds	r1, #8
 8013b5c:	c903      	ldmia	r1, {r0, r1}
 8013b5e:	f01e f914 	bl	8031d8a <mg_match>
 8013b62:	4603      	mov	r3, r0
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d005      	beq.n	8013b74 <dashboard+0x1e8>
			handle_firmware_upload(c, hm);
 8013b68:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013b6c:	68f8      	ldr	r0, [r7, #12]
 8013b6e:	f7ff fc6d 	bl	801344c <handle_firmware_upload>
}
 8013b72:	e0d5      	b.n	8013d20 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/md5"), NULL)){
 8013b74:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8013b78:	494a      	ldr	r1, [pc, #296]	@ (8013ca4 <dashboard+0x318>)
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	f01e f832 	bl	8031be4 <mg_str_s>
 8013b80:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013b84:	2300      	movs	r3, #0
 8013b86:	9300      	str	r3, [sp, #0]
 8013b88:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8013b8c:	cb0c      	ldmia	r3, {r2, r3}
 8013b8e:	3108      	adds	r1, #8
 8013b90:	c903      	ldmia	r1, {r0, r1}
 8013b92:	f01e f8fa 	bl	8031d8a <mg_match>
 8013b96:	4603      	mov	r3, r0
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d005      	beq.n	8013ba8 <dashboard+0x21c>
			handle_firmware_md5(c, hm);
 8013b9c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013ba0:	68f8      	ldr	r0, [r7, #12]
 8013ba2:	f7ff fcad 	bl	8013500 <handle_firmware_md5>
}
 8013ba6:	e0bb      	b.n	8013d20 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/activate_and_reboot"), NULL)){
 8013ba8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8013bac:	493e      	ldr	r1, [pc, #248]	@ (8013ca8 <dashboard+0x31c>)
 8013bae:	4618      	mov	r0, r3
 8013bb0:	f01e f818 	bl	8031be4 <mg_str_s>
 8013bb4:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013bb8:	2300      	movs	r3, #0
 8013bba:	9300      	str	r3, [sp, #0]
 8013bbc:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8013bc0:	cb0c      	ldmia	r3, {r2, r3}
 8013bc2:	3108      	adds	r1, #8
 8013bc4:	c903      	ldmia	r1, {r0, r1}
 8013bc6:	f01e f8e0 	bl	8031d8a <mg_match>
 8013bca:	4603      	mov	r3, r0
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d005      	beq.n	8013bdc <dashboard+0x250>
			handle_firmware_activate(c, hm);
 8013bd0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013bd4:	68f8      	ldr	r0, [r7, #12]
 8013bd6:	f7ff fce1 	bl	801359c <handle_firmware_activate>
}
 8013bda:	e0a1      	b.n	8013d20 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/deactivate"), NULL)){
 8013bdc:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8013be0:	4932      	ldr	r1, [pc, #200]	@ (8013cac <dashboard+0x320>)
 8013be2:	4618      	mov	r0, r3
 8013be4:	f01d fffe 	bl	8031be4 <mg_str_s>
 8013be8:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013bec:	2300      	movs	r3, #0
 8013bee:	9300      	str	r3, [sp, #0]
 8013bf0:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8013bf4:	cb0c      	ldmia	r3, {r2, r3}
 8013bf6:	3108      	adds	r1, #8
 8013bf8:	c903      	ldmia	r1, {r0, r1}
 8013bfa:	f01e f8c6 	bl	8031d8a <mg_match>
 8013bfe:	4603      	mov	r3, r0
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d005      	beq.n	8013c10 <dashboard+0x284>
			handle_firmware_deactivate(c, hm);
 8013c04:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013c08:	68f8      	ldr	r0, [r7, #12]
 8013c0a:	f7ff fd3f 	bl	801368c <handle_firmware_deactivate>
}
 8013c0e:	e087      	b.n	8013d20 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/remove"), NULL)){
 8013c10:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8013c14:	4926      	ldr	r1, [pc, #152]	@ (8013cb0 <dashboard+0x324>)
 8013c16:	4618      	mov	r0, r3
 8013c18:	f01d ffe4 	bl	8031be4 <mg_str_s>
 8013c1c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013c20:	2300      	movs	r3, #0
 8013c22:	9300      	str	r3, [sp, #0]
 8013c24:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8013c28:	cb0c      	ldmia	r3, {r2, r3}
 8013c2a:	3108      	adds	r1, #8
 8013c2c:	c903      	ldmia	r1, {r0, r1}
 8013c2e:	f01e f8ac 	bl	8031d8a <mg_match>
 8013c32:	4603      	mov	r3, r0
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d005      	beq.n	8013c44 <dashboard+0x2b8>
			 handle_web_files_remove(c, hm);
 8013c38:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013c3c:	68f8      	ldr	r0, [r7, #12]
 8013c3e:	f7ff fd6b 	bl	8013718 <handle_web_files_remove>
}
 8013c42:	e06d      	b.n	8013d20 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/upload"), NULL)){
 8013c44:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8013c48:	491a      	ldr	r1, [pc, #104]	@ (8013cb4 <dashboard+0x328>)
 8013c4a:	4618      	mov	r0, r3
 8013c4c:	f01d ffca 	bl	8031be4 <mg_str_s>
 8013c50:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013c54:	2300      	movs	r3, #0
 8013c56:	9300      	str	r3, [sp, #0]
 8013c58:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8013c5c:	cb0c      	ldmia	r3, {r2, r3}
 8013c5e:	3108      	adds	r1, #8
 8013c60:	c903      	ldmia	r1, {r0, r1}
 8013c62:	f01e f892 	bl	8031d8a <mg_match>
 8013c66:	4603      	mov	r3, r0
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d02b      	beq.n	8013cc4 <dashboard+0x338>
			 mg_http_upload(c, hm, &mg_fs_lfs, "/web", 1500000);
 8013c6c:	4b12      	ldr	r3, [pc, #72]	@ (8013cb8 <dashboard+0x32c>)
 8013c6e:	9300      	str	r3, [sp, #0]
 8013c70:	4b12      	ldr	r3, [pc, #72]	@ (8013cbc <dashboard+0x330>)
 8013c72:	4a13      	ldr	r2, [pc, #76]	@ (8013cc0 <dashboard+0x334>)
 8013c74:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013c78:	68f8      	ldr	r0, [r7, #12]
 8013c7a:	f015 fcc3 	bl	8029604 <mg_http_upload>
}
 8013c7e:	e04f      	b.n	8013d20 <dashboard+0x394>
 8013c80:	0803ffc8 	.word	0x0803ffc8
 8013c84:	0803ffd0 	.word	0x0803ffd0
 8013c88:	0803ffe0 	.word	0x0803ffe0
 8013c8c:	0803fff0 	.word	0x0803fff0
 8013c90:	08040004 	.word	0x08040004
 8013c94:	08040018 	.word	0x08040018
 8013c98:	08040028 	.word	0x08040028
 8013c9c:	0804003c 	.word	0x0804003c
 8013ca0:	08040050 	.word	0x08040050
 8013ca4:	08040068 	.word	0x08040068
 8013ca8:	0804007c 	.word	0x0804007c
 8013cac:	080400a0 	.word	0x080400a0
 8013cb0:	080400bc 	.word	0x080400bc
 8013cb4:	080400d8 	.word	0x080400d8
 8013cb8:	0016e360 	.word	0x0016e360
 8013cbc:	0803fe94 	.word	0x0803fe94
 8013cc0:	2000000c 	.word	0x2000000c
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/mkdir"), NULL)){
 8013cc4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8013cc8:	4917      	ldr	r1, [pc, #92]	@ (8013d28 <dashboard+0x39c>)
 8013cca:	4618      	mov	r0, r3
 8013ccc:	f01d ff8a 	bl	8031be4 <mg_str_s>
 8013cd0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013cd4:	2300      	movs	r3, #0
 8013cd6:	9300      	str	r3, [sp, #0]
 8013cd8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8013cdc:	cb0c      	ldmia	r3, {r2, r3}
 8013cde:	3108      	adds	r1, #8
 8013ce0:	c903      	ldmia	r1, {r0, r1}
 8013ce2:	f01e f852 	bl	8031d8a <mg_match>
 8013ce6:	4603      	mov	r3, r0
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d005      	beq.n	8013cf8 <dashboard+0x36c>
			 handle_fs_mkdir(c, hm);
 8013cec:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013cf0:	68f8      	ldr	r0, [r7, #12]
 8013cf2:	f7ff fd4f 	bl	8013794 <handle_fs_mkdir>
}
 8013cf6:	e013      	b.n	8013d20 <dashboard+0x394>
			struct mg_http_serve_opts opts = {
 8013cf8:	f107 0314 	add.w	r3, r7, #20
 8013cfc:	2200      	movs	r2, #0
 8013cfe:	601a      	str	r2, [r3, #0]
 8013d00:	605a      	str	r2, [r3, #4]
 8013d02:	609a      	str	r2, [r3, #8]
 8013d04:	60da      	str	r2, [r3, #12]
 8013d06:	611a      	str	r2, [r3, #16]
 8013d08:	615a      	str	r2, [r3, #20]
 8013d0a:	4b08      	ldr	r3, [pc, #32]	@ (8013d2c <dashboard+0x3a0>)
 8013d0c:	617b      	str	r3, [r7, #20]
 8013d0e:	4b08      	ldr	r3, [pc, #32]	@ (8013d30 <dashboard+0x3a4>)
 8013d10:	62bb      	str	r3, [r7, #40]	@ 0x28
			mg_http_serve_dir(c, ev_data, &opts);
 8013d12:	f107 0314 	add.w	r3, r7, #20
 8013d16:	461a      	mov	r2, r3
 8013d18:	6879      	ldr	r1, [r7, #4]
 8013d1a:	68f8      	ldr	r0, [r7, #12]
 8013d1c:	f015 fb84 	bl	8029428 <mg_http_serve_dir>
}
 8013d20:	bf00      	nop
 8013d22:	37a8      	adds	r7, #168	@ 0xa8
 8013d24:	46bd      	mov	sp, r7
 8013d26:	bd80      	pop	{r7, pc}
 8013d28:	080400f4 	.word	0x080400f4
 8013d2c:	0803fe94 	.word	0x0803fe94
 8013d30:	2000000c 	.word	0x2000000c

08013d34 <dash_hdl>:

void * dash_hdl (void){
 8013d34:	b480      	push	{r7}
 8013d36:	af00      	add	r7, sp, #0
	return &dashboard;
 8013d38:	4b02      	ldr	r3, [pc, #8]	@ (8013d44 <dash_hdl+0x10>)
}
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	46bd      	mov	sp, r7
 8013d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d42:	4770      	bx	lr
 8013d44:	0801398d 	.word	0x0801398d

08013d48 <reg_parameter_handler>:

// Реализация функции, которая принимает указатель на функцию чтения и записи параметров
void reg_parameter_handler(void (*func)(void * parameter, sett_type_t parameter_type,  sett_direction_t direction)) {
 8013d48:	b480      	push	{r7}
 8013d4a:	b083      	sub	sp, #12
 8013d4c:	af00      	add	r7, sp, #0
 8013d4e:	6078      	str	r0, [r7, #4]
    r_w_parameter = func;
 8013d50:	4a04      	ldr	r2, [pc, #16]	@ (8013d64 <reg_parameter_handler+0x1c>)
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	6013      	str	r3, [r2, #0]
}
 8013d56:	bf00      	nop
 8013d58:	370c      	adds	r7, #12
 8013d5a:	46bd      	mov	sp, r7
 8013d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d60:	4770      	bx	lr
 8013d62:	bf00      	nop
 8013d64:	20000b18 	.word	0x20000b18

08013d68 <_ZL9my_callocjj>:
#define calloc(a, b) my_calloc(a, b)
#define free(a) vPortFree(a)
#define malloc(a) pvPortMalloc(a)

// Re-route calloc/free to the FreeRTOS's functions, don't use stdlib
static inline void *my_calloc(size_t cnt, size_t size) {
 8013d68:	b580      	push	{r7, lr}
 8013d6a:	b084      	sub	sp, #16
 8013d6c:	af00      	add	r7, sp, #0
 8013d6e:	6078      	str	r0, [r7, #4]
 8013d70:	6039      	str	r1, [r7, #0]
  void *p = pvPortMalloc(cnt * size);
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	683a      	ldr	r2, [r7, #0]
 8013d76:	fb02 f303 	mul.w	r3, r2, r3
 8013d7a:	4618      	mov	r0, r3
 8013d7c:	f008 fc26 	bl	801c5cc <pvPortMalloc>
 8013d80:	60f8      	str	r0, [r7, #12]
  if (p != NULL) memset(p, 0, size * cnt);
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d008      	beq.n	8013d9a <_ZL9my_callocjj+0x32>
 8013d88:	683b      	ldr	r3, [r7, #0]
 8013d8a:	687a      	ldr	r2, [r7, #4]
 8013d8c:	fb02 f303 	mul.w	r3, r2, r3
 8013d90:	461a      	mov	r2, r3
 8013d92:	2100      	movs	r1, #0
 8013d94:	68f8      	ldr	r0, [r7, #12]
 8013d96:	f022 f82b 	bl	8035df0 <memset>
  return p;
 8013d9a:	68fb      	ldr	r3, [r7, #12]
}
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	3710      	adds	r7, #16
 8013da0:	46bd      	mov	sp, r7
 8013da2:	bd80      	pop	{r7, pc}

08013da4 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj>:
		{OUTPUT_SENSOR, 3}
    };

static void (*r_w_parameter)(void * parameter, sett_type_t parameter_type,  sett_direction_t direction) = NULL;

static void mqtt_send_registration_data(struct mg_connection * arg, const SensorInfo * sensors, const size_t sensor_count){
 8013da4:	b590      	push	{r4, r7, lr}
 8013da6:	b08d      	sub	sp, #52	@ 0x34
 8013da8:	af02      	add	r7, sp, #8
 8013daa:	6178      	str	r0, [r7, #20]
 8013dac:	6139      	str	r1, [r7, #16]
 8013dae:	60fa      	str	r2, [r7, #12]

	mg_snprintf(ip_addr_str, sizeof(char) * IP_v6_STR_LEN, "%M", mg_print_ip, &arg->loc);
 8013db0:	4b3a      	ldr	r3, [pc, #232]	@ (8013e9c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xf8>)
 8013db2:	6818      	ldr	r0, [r3, #0]
 8013db4:	697b      	ldr	r3, [r7, #20]
 8013db6:	3308      	adds	r3, #8
 8013db8:	9300      	str	r3, [sp, #0]
 8013dba:	4b39      	ldr	r3, [pc, #228]	@ (8013ea0 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xfc>)
 8013dbc:	4a39      	ldr	r2, [pc, #228]	@ (8013ea4 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x100>)
 8013dbe:	2128      	movs	r1, #40	@ 0x28
 8013dc0:	f01d fa28 	bl	8031214 <mg_snprintf>
	set_device_conf_ip(ip_addr_str, strlen(ip_addr_str));
 8013dc4:	4b35      	ldr	r3, [pc, #212]	@ (8013e9c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xf8>)
 8013dc6:	681c      	ldr	r4, [r3, #0]
 8013dc8:	4b34      	ldr	r3, [pc, #208]	@ (8013e9c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xf8>)
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	4618      	mov	r0, r3
 8013dce:	f7fc fa67 	bl	80102a0 <strlen>
 8013dd2:	4603      	mov	r3, r0
 8013dd4:	4619      	mov	r1, r3
 8013dd6:	4620      	mov	r0, r4
 8013dd8:	f000 fd26 	bl	8014828 <set_device_conf_ip>


	for (size_t i = 0; i < sensor_count; i++) {
 8013ddc:	2300      	movs	r3, #0
 8013dde:	627b      	str	r3, [r7, #36]	@ 0x24
 8013de0:	e052      	b.n	8013e88 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xe4>
	        int sensor_type = sensors[i].sensor_type;
 8013de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013de4:	00db      	lsls	r3, r3, #3
 8013de6:	693a      	ldr	r2, [r7, #16]
 8013de8:	4413      	add	r3, r2
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	623b      	str	r3, [r7, #32]
	        int sensor_number = sensors[i].sensor_number;
 8013dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013df0:	00db      	lsls	r3, r3, #3
 8013df2:	693a      	ldr	r2, [r7, #16]
 8013df4:	4413      	add	r3, r2
 8013df6:	685b      	ldr	r3, [r3, #4]
 8013df8:	61fb      	str	r3, [r7, #28]
			get_config_topik_string(topik_buff, MQTT_TOPIK_MAX_LEN, sensor_type, sensor_number);
 8013dfa:	4b2b      	ldr	r3, [pc, #172]	@ (8013ea8 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x104>)
 8013dfc:	6818      	ldr	r0, [r3, #0]
 8013dfe:	6a3b      	ldr	r3, [r7, #32]
 8013e00:	b2da      	uxtb	r2, r3
 8013e02:	69fb      	ldr	r3, [r7, #28]
 8013e04:	b2db      	uxtb	r3, r3
 8013e06:	2180      	movs	r1, #128	@ 0x80
 8013e08:	f000 fd40 	bl	801488c <get_config_topik_string>

			get_config_payload_string(payload_buff, MQTT_PAYLOAD_MAX_LEN, sensor_type, sensor_number);
 8013e0c:	4b27      	ldr	r3, [pc, #156]	@ (8013eac <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x108>)
 8013e0e:	6818      	ldr	r0, [r3, #0]
 8013e10:	6a3b      	ldr	r3, [r7, #32]
 8013e12:	b2da      	uxtb	r2, r3
 8013e14:	69fb      	ldr	r3, [r7, #28]
 8013e16:	b2db      	uxtb	r3, r3
 8013e18:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8013e1c:	f000 fe10 	bl	8014a40 <get_config_payload_string>
			mqtt_opts.topic = mg_str(topik_buff);
 8013e20:	4b21      	ldr	r3, [pc, #132]	@ (8013ea8 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x104>)
 8013e22:	681a      	ldr	r2, [r3, #0]
 8013e24:	4c22      	ldr	r4, [pc, #136]	@ (8013eb0 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x10c>)
 8013e26:	463b      	mov	r3, r7
 8013e28:	4611      	mov	r1, r2
 8013e2a:	4618      	mov	r0, r3
 8013e2c:	f01d feda 	bl	8031be4 <mg_str_s>
 8013e30:	f104 0318 	add.w	r3, r4, #24
 8013e34:	463a      	mov	r2, r7
 8013e36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013e3a:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload_buff);
 8013e3e:	4b1b      	ldr	r3, [pc, #108]	@ (8013eac <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x108>)
 8013e40:	681a      	ldr	r2, [r3, #0]
 8013e42:	4c1b      	ldr	r4, [pc, #108]	@ (8013eb0 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x10c>)
 8013e44:	463b      	mov	r3, r7
 8013e46:	4611      	mov	r1, r2
 8013e48:	4618      	mov	r0, r3
 8013e4a:	f01d fecb 	bl	8031be4 <mg_str_s>
 8013e4e:	f104 0320 	add.w	r3, r4, #32
 8013e52:	463a      	mov	r2, r7
 8013e54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013e58:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 1;
 8013e5c:	4b14      	ldr	r3, [pc, #80]	@ (8013eb0 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x10c>)
 8013e5e:	2201      	movs	r2, #1
 8013e60:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			mqtt_opts.retain = 1;
 8013e64:	4b12      	ldr	r3, [pc, #72]	@ (8013eb0 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x10c>)
 8013e66:	2201      	movs	r2, #1
 8013e68:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8013e6c:	4910      	ldr	r1, [pc, #64]	@ (8013eb0 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x10c>)
 8013e6e:	6978      	ldr	r0, [r7, #20]
 8013e70:	f018 ff0a 	bl	802cc88 <mg_mqtt_pub>

			logging(L_INFO, "Sending registration data to: %s", topik_buff);
 8013e74:	4b0c      	ldr	r3, [pc, #48]	@ (8013ea8 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x104>)
 8013e76:	681b      	ldr	r3, [r3, #0]
 8013e78:	461a      	mov	r2, r3
 8013e7a:	490e      	ldr	r1, [pc, #56]	@ (8013eb4 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x110>)
 8013e7c:	2001      	movs	r0, #1
 8013e7e:	f7fe f965 	bl	801214c <logging>
	for (size_t i = 0; i < sensor_count; i++) {
 8013e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e84:	3301      	adds	r3, #1
 8013e86:	627b      	str	r3, [r7, #36]	@ 0x24
 8013e88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	429a      	cmp	r2, r3
 8013e8e:	d3a8      	bcc.n	8013de2 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x3e>

	}
}
 8013e90:	bf00      	nop
 8013e92:	bf00      	nop
 8013e94:	372c      	adds	r7, #44	@ 0x2c
 8013e96:	46bd      	mov	sp, r7
 8013e98:	bd90      	pop	{r4, r7, pc}
 8013e9a:	bf00      	nop
 8013e9c:	20000b7c 	.word	0x20000b7c
 8013ea0:	080313fb 	.word	0x080313fb
 8013ea4:	08040110 	.word	0x08040110
 8013ea8:	20000b28 	.word	0x20000b28
 8013eac:	20000b2c 	.word	0x20000b2c
 8013eb0:	20000b38 	.word	0x20000b38
 8013eb4:	08040114 	.word	0x08040114

08013eb8 <_ZL19mqtt_send_io_statusP13mg_connectionb>:


static void mqtt_send_io_status(struct mg_connection * arg, bool force_update){
 8013eb8:	b590      	push	{r4, r7, lr}
 8013eba:	b08d      	sub	sp, #52	@ 0x34
 8013ebc:	af02      	add	r7, sp, #8
 8013ebe:	60f8      	str	r0, [r7, #12]
 8013ec0:	460b      	mov	r3, r1
 8013ec2:	72fb      	strb	r3, [r7, #11]

	struct   DeviceStatus status;
	static struct DeviceStatus prev_status;
	uint8_t  i;
	char *   payload = NULL;
 8013ec4:	2300      	movs	r3, #0
 8013ec6:	623b      	str	r3, [r7, #32]
	char *   topik = NULL;
 8013ec8:	2300      	movs	r3, #0
 8013eca:	61fb      	str	r3, [r7, #28]

	r_w_parameter(status.inputs,  (sett_type_t)INPUT_SENSOR,  S_READ);
 8013ecc:	4b70      	ldr	r3, [pc, #448]	@ (8014090 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1d8>)
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	f107 0014 	add.w	r0, r7, #20
 8013ed4:	2200      	movs	r2, #0
 8013ed6:	2101      	movs	r1, #1
 8013ed8:	4798      	blx	r3
	r_w_parameter(status.outputs, (sett_type_t)OUTPUT_SENSOR, S_READ);
 8013eda:	4b6d      	ldr	r3, [pc, #436]	@ (8014090 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1d8>)
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	f107 0214 	add.w	r2, r7, #20
 8013ee2:	1cd0      	adds	r0, r2, #3
 8013ee4:	2200      	movs	r2, #0
 8013ee6:	2102      	movs	r1, #2
 8013ee8:	4798      	blx	r3

	if (memcmp(status.inputs, prev_status.inputs, sizeof(inputs_state_t)) != 0 ||
 8013eea:	f107 0314 	add.w	r3, r7, #20
 8013eee:	2203      	movs	r2, #3
 8013ef0:	4968      	ldr	r1, [pc, #416]	@ (8014094 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1dc>)
 8013ef2:	4618      	mov	r0, r3
 8013ef4:	f021 fee8 	bl	8035cc8 <memcmp>
 8013ef8:	4603      	mov	r3, r0
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d10e      	bne.n	8013f1c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x64>
	    memcmp(status.outputs, prev_status.outputs, sizeof(outputs_state_t)) != 0 || force_update) {
 8013efe:	f107 0314 	add.w	r3, r7, #20
 8013f02:	3303      	adds	r3, #3
 8013f04:	2203      	movs	r2, #3
 8013f06:	4964      	ldr	r1, [pc, #400]	@ (8014098 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e0>)
 8013f08:	4618      	mov	r0, r3
 8013f0a:	f021 fedd 	bl	8035cc8 <memcmp>
 8013f0e:	4603      	mov	r3, r0
	if (memcmp(status.inputs, prev_status.inputs, sizeof(inputs_state_t)) != 0 ||
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d103      	bne.n	8013f1c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x64>
	    memcmp(status.outputs, prev_status.outputs, sizeof(outputs_state_t)) != 0 || force_update) {
 8013f14:	7afb      	ldrb	r3, [r7, #11]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	f000 80b5 	beq.w	8014086 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1ce>
	    // Состояние изменилось, продолжаем
		memcpy(&prev_status, &status, sizeof(status));
 8013f1c:	4b5d      	ldr	r3, [pc, #372]	@ (8014094 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1dc>)
 8013f1e:	f107 0214 	add.w	r2, r7, #20
 8013f22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013f26:	6018      	str	r0, [r3, #0]
 8013f28:	3304      	adds	r3, #4
 8013f2a:	8019      	strh	r1, [r3, #0]

		//logging(L_INFO, "Send io status data to MQTT server");

		payload = (char * )calloc(MQTT_PAYLOAD_MAX_LEN, sizeof(char));
 8013f2c:	2101      	movs	r1, #1
 8013f2e:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8013f32:	f7ff ff19 	bl	8013d68 <_ZL9my_callocjj>
 8013f36:	6238      	str	r0, [r7, #32]
		topik   = (char * )calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 8013f38:	2101      	movs	r1, #1
 8013f3a:	2080      	movs	r0, #128	@ 0x80
 8013f3c:	f7ff ff14 	bl	8013d68 <_ZL9my_callocjj>
 8013f40:	61f8      	str	r0, [r7, #28]

		for (i = 0; i < INPUTS_COUNT; i++){
 8013f42:	2300      	movs	r3, #0
 8013f44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013f48:	e045      	b.n	8013fd6 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x11e>
			gen_bin_sensor_status_payload_JSON(payload, MQTT_PAYLOAD_MAX_LEN, INPUT_SENSOR, i+1, status.inputs[i]);
 8013f4a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013f4e:	3301      	adds	r3, #1
 8013f50:	b2da      	uxtb	r2, r3
 8013f52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013f56:	3328      	adds	r3, #40	@ 0x28
 8013f58:	443b      	add	r3, r7
 8013f5a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8013f5e:	9300      	str	r3, [sp, #0]
 8013f60:	4613      	mov	r3, r2
 8013f62:	2201      	movs	r2, #1
 8013f64:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8013f68:	6a38      	ldr	r0, [r7, #32]
 8013f6a:	f000 ffc7 	bl	8014efc <gen_bin_sensor_status_payload_JSON>
			generate_status_topik(topik,   MQTT_TOPIK_MAX_LEN, INPUT_SENSOR, i+1);
 8013f6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013f72:	3301      	adds	r3, #1
 8013f74:	b2db      	uxtb	r3, r3
 8013f76:	2201      	movs	r2, #1
 8013f78:	2180      	movs	r1, #128	@ 0x80
 8013f7a:	69f8      	ldr	r0, [r7, #28]
 8013f7c:	f001 f82c 	bl	8014fd8 <generate_status_topik>
			mqtt_opts.topic = mg_str(topik);
 8013f80:	4c46      	ldr	r4, [pc, #280]	@ (801409c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 8013f82:	463b      	mov	r3, r7
 8013f84:	69f9      	ldr	r1, [r7, #28]
 8013f86:	4618      	mov	r0, r3
 8013f88:	f01d fe2c 	bl	8031be4 <mg_str_s>
 8013f8c:	f104 0318 	add.w	r3, r4, #24
 8013f90:	463a      	mov	r2, r7
 8013f92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013f96:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload);
 8013f9a:	4c40      	ldr	r4, [pc, #256]	@ (801409c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 8013f9c:	463b      	mov	r3, r7
 8013f9e:	6a39      	ldr	r1, [r7, #32]
 8013fa0:	4618      	mov	r0, r3
 8013fa2:	f01d fe1f 	bl	8031be4 <mg_str_s>
 8013fa6:	f104 0320 	add.w	r3, r4, #32
 8013faa:	463a      	mov	r2, r7
 8013fac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013fb0:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 0;
 8013fb4:	4b39      	ldr	r3, [pc, #228]	@ (801409c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 8013fb6:	2200      	movs	r2, #0
 8013fb8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			mqtt_opts.retain = 0;
 8013fbc:	4b37      	ldr	r3, [pc, #220]	@ (801409c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 8013fbe:	2200      	movs	r2, #0
 8013fc0:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8013fc4:	4935      	ldr	r1, [pc, #212]	@ (801409c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 8013fc6:	68f8      	ldr	r0, [r7, #12]
 8013fc8:	f018 fe5e 	bl	802cc88 <mg_mqtt_pub>
		for (i = 0; i < INPUTS_COUNT; i++){
 8013fcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013fd0:	3301      	adds	r3, #1
 8013fd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013fd6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013fda:	2b02      	cmp	r3, #2
 8013fdc:	d9b5      	bls.n	8013f4a <_ZL19mqtt_send_io_statusP13mg_connectionb+0x92>
			//strcpy(payload, "\0");
			//strcpy(topik, "\0");
		}

		for (i = 0; i < OUTPUTS_COUNT; i++){
 8013fde:	2300      	movs	r3, #0
 8013fe0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013fe4:	e045      	b.n	8014072 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1ba>
			gen_bin_sensor_status_payload_JSON(payload, MQTT_PAYLOAD_MAX_LEN, OUTPUT_SENSOR, i+1, status.outputs[i]);
 8013fe6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013fea:	3301      	adds	r3, #1
 8013fec:	b2da      	uxtb	r2, r3
 8013fee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013ff2:	3328      	adds	r3, #40	@ 0x28
 8013ff4:	443b      	add	r3, r7
 8013ff6:	f813 3c11 	ldrb.w	r3, [r3, #-17]
 8013ffa:	9300      	str	r3, [sp, #0]
 8013ffc:	4613      	mov	r3, r2
 8013ffe:	2202      	movs	r2, #2
 8014000:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8014004:	6a38      	ldr	r0, [r7, #32]
 8014006:	f000 ff79 	bl	8014efc <gen_bin_sensor_status_payload_JSON>
			generate_status_topik(topik,   MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i+1);
 801400a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801400e:	3301      	adds	r3, #1
 8014010:	b2db      	uxtb	r3, r3
 8014012:	2202      	movs	r2, #2
 8014014:	2180      	movs	r1, #128	@ 0x80
 8014016:	69f8      	ldr	r0, [r7, #28]
 8014018:	f000 ffde 	bl	8014fd8 <generate_status_topik>
			mqtt_opts.topic = mg_str(topik);
 801401c:	4c1f      	ldr	r4, [pc, #124]	@ (801409c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 801401e:	463b      	mov	r3, r7
 8014020:	69f9      	ldr	r1, [r7, #28]
 8014022:	4618      	mov	r0, r3
 8014024:	f01d fdde 	bl	8031be4 <mg_str_s>
 8014028:	f104 0318 	add.w	r3, r4, #24
 801402c:	463a      	mov	r2, r7
 801402e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014032:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload);
 8014036:	4c19      	ldr	r4, [pc, #100]	@ (801409c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 8014038:	463b      	mov	r3, r7
 801403a:	6a39      	ldr	r1, [r7, #32]
 801403c:	4618      	mov	r0, r3
 801403e:	f01d fdd1 	bl	8031be4 <mg_str_s>
 8014042:	f104 0320 	add.w	r3, r4, #32
 8014046:	463a      	mov	r2, r7
 8014048:	e892 0003 	ldmia.w	r2, {r0, r1}
 801404c:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 0;
 8014050:	4b12      	ldr	r3, [pc, #72]	@ (801409c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 8014052:	2200      	movs	r2, #0
 8014054:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			mqtt_opts.retain = 0;
 8014058:	4b10      	ldr	r3, [pc, #64]	@ (801409c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 801405a:	2200      	movs	r2, #0
 801405c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8014060:	490e      	ldr	r1, [pc, #56]	@ (801409c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 8014062:	68f8      	ldr	r0, [r7, #12]
 8014064:	f018 fe10 	bl	802cc88 <mg_mqtt_pub>
		for (i = 0; i < OUTPUTS_COUNT; i++){
 8014068:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801406c:	3301      	adds	r3, #1
 801406e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014072:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014076:	2b02      	cmp	r3, #2
 8014078:	d9b5      	bls.n	8013fe6 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x12e>
			//strcpy(payload, "\0");
			//strcpy(topik, "\0");
		}


		free(payload);
 801407a:	6a38      	ldr	r0, [r7, #32]
 801407c:	f008 fb74 	bl	801c768 <vPortFree>
		free(topik);
 8014080:	69f8      	ldr	r0, [r7, #28]
 8014082:	f008 fb71 	bl	801c768 <vPortFree>
	}
}
 8014086:	bf00      	nop
 8014088:	372c      	adds	r7, #44	@ 0x2c
 801408a:	46bd      	mov	sp, r7
 801408c:	bd90      	pop	{r4, r7, pc}
 801408e:	bf00      	nop
 8014090:	20000b90 	.word	0x20000b90
 8014094:	20000b94 	.word	0x20000b94
 8014098:	20000b97 	.word	0x20000b97
 801409c:	20000b38 	.word	0x20000b38

080140a0 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj>:

static void mqtt_subscrabe_on_sw(struct mg_connection *conn, const SensorInfo * sensors, const size_t sensor_count){
 80140a0:	b590      	push	{r4, r7, lr}
 80140a2:	b089      	sub	sp, #36	@ 0x24
 80140a4:	af00      	add	r7, sp, #0
 80140a6:	6178      	str	r0, [r7, #20]
 80140a8:	6139      	str	r1, [r7, #16]
 80140aa:	60fa      	str	r2, [r7, #12]

	char * topik = NULL;
 80140ac:	2300      	movs	r3, #0
 80140ae:	61bb      	str	r3, [r7, #24]

	for (size_t i = 0; i < sensor_count; i++) {
 80140b0:	2300      	movs	r3, #0
 80140b2:	61fb      	str	r3, [r7, #28]
 80140b4:	e036      	b.n	8014124 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x84>
		if(sensors[i].sensor_type == OUTPUT_SENSOR){
 80140b6:	69fb      	ldr	r3, [r7, #28]
 80140b8:	00db      	lsls	r3, r3, #3
 80140ba:	693a      	ldr	r2, [r7, #16]
 80140bc:	4413      	add	r3, r2
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	2b02      	cmp	r3, #2
 80140c2:	d12c      	bne.n	801411e <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x7e>
			topik = (char * )calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 80140c4:	2101      	movs	r1, #1
 80140c6:	2080      	movs	r0, #128	@ 0x80
 80140c8:	f7ff fe4e 	bl	8013d68 <_ZL9my_callocjj>
 80140cc:	61b8      	str	r0, [r7, #24]
			generate_comand_topik_for_subscrabe(topik, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, sensors[i].sensor_number);
 80140ce:	69fb      	ldr	r3, [r7, #28]
 80140d0:	00db      	lsls	r3, r3, #3
 80140d2:	693a      	ldr	r2, [r7, #16]
 80140d4:	4413      	add	r3, r2
 80140d6:	685b      	ldr	r3, [r3, #4]
 80140d8:	b2db      	uxtb	r3, r3
 80140da:	2202      	movs	r2, #2
 80140dc:	2180      	movs	r1, #128	@ 0x80
 80140de:	69b8      	ldr	r0, [r7, #24]
 80140e0:	f000 ff50 	bl	8014f84 <generate_comand_topik_for_subscrabe>

			mqtt_opts.qos = 1;
 80140e4:	4b14      	ldr	r3, [pc, #80]	@ (8014138 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x98>)
 80140e6:	2201      	movs	r2, #1
 80140e8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			mqtt_opts.topic = mg_str(topik);
 80140ec:	4c12      	ldr	r4, [pc, #72]	@ (8014138 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x98>)
 80140ee:	463b      	mov	r3, r7
 80140f0:	69b9      	ldr	r1, [r7, #24]
 80140f2:	4618      	mov	r0, r3
 80140f4:	f01d fd76 	bl	8031be4 <mg_str_s>
 80140f8:	f104 0318 	add.w	r3, r4, #24
 80140fc:	463a      	mov	r2, r7
 80140fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014102:	e883 0003 	stmia.w	r3, {r0, r1}
			mg_mqtt_sub(conn, &mqtt_opts);
 8014106:	490c      	ldr	r1, [pc, #48]	@ (8014138 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x98>)
 8014108:	6978      	ldr	r0, [r7, #20]
 801410a:	f018 fe8b 	bl	802ce24 <mg_mqtt_sub>

			logging(L_INFO, "Subscribe on MQTT topik: %s", topik);
 801410e:	69ba      	ldr	r2, [r7, #24]
 8014110:	490a      	ldr	r1, [pc, #40]	@ (801413c <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x9c>)
 8014112:	2001      	movs	r0, #1
 8014114:	f7fe f81a 	bl	801214c <logging>
			free(topik);
 8014118:	69b8      	ldr	r0, [r7, #24]
 801411a:	f008 fb25 	bl	801c768 <vPortFree>
	for (size_t i = 0; i < sensor_count; i++) {
 801411e:	69fb      	ldr	r3, [r7, #28]
 8014120:	3301      	adds	r3, #1
 8014122:	61fb      	str	r3, [r7, #28]
 8014124:	69fa      	ldr	r2, [r7, #28]
 8014126:	68fb      	ldr	r3, [r7, #12]
 8014128:	429a      	cmp	r2, r3
 801412a:	d3c4      	bcc.n	80140b6 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x16>
		}
	}
}
 801412c:	bf00      	nop
 801412e:	bf00      	nop
 8014130:	3724      	adds	r7, #36	@ 0x24
 8014132:	46bd      	mov	sp, r7
 8014134:	bd90      	pop	{r4, r7, pc}
 8014136:	bf00      	nop
 8014138:	20000b38 	.word	0x20000b38
 801413c:	08040138 	.word	0x08040138

08014140 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message>:

static void mqtt_subscrabe_recv_cmd_parce(mg_mqtt_message * mess){
 8014140:	b580      	push	{r7, lr}
 8014142:	b088      	sub	sp, #32
 8014144:	af00      	add	r7, sp, #0
 8014146:	6078      	str	r0, [r7, #4]

	inputs_state_t  sw_r, sw_w;
	int relay_number = 0;  // Переменная для хранения номера реле
 8014148:	2300      	movs	r3, #0
 801414a:	60bb      	str	r3, [r7, #8]
    //char *state = NULL;  // Строка для хранения состояния (ON/OFF)

    //Топик выглядит как "cedar_4022422E1436/switch0/set"
    const char *topic = mess->topic.buf;
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	681b      	ldr	r3, [r3, #0]
 8014150:	61fb      	str	r3, [r7, #28]
    const char *message = mess->data.buf;
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	689b      	ldr	r3, [r3, #8]
 8014156:	61bb      	str	r3, [r7, #24]

    if(message == NULL || topic == NULL){
 8014158:	69bb      	ldr	r3, [r7, #24]
 801415a:	2b00      	cmp	r3, #0
 801415c:	d002      	beq.n	8014164 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x24>
 801415e:	69fb      	ldr	r3, [r7, #28]
 8014160:	2b00      	cmp	r3, #0
 8014162:	d10e      	bne.n	8014182 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x42>
    	MG_ERROR(("Error: topik or message id NULL.\n"));
 8014164:	4b7e      	ldr	r3, [pc, #504]	@ (8014360 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	2b00      	cmp	r3, #0
 801416a:	f340 80f5 	ble.w	8014358 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x218>
 801416e:	4b7d      	ldr	r3, [pc, #500]	@ (8014364 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 8014170:	2292      	movs	r2, #146	@ 0x92
 8014172:	497d      	ldr	r1, [pc, #500]	@ (8014368 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 8014174:	2001      	movs	r0, #1
 8014176:	f017 f831 	bl	802b1dc <mg_log_prefix>
 801417a:	487c      	ldr	r0, [pc, #496]	@ (801436c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x22c>)
 801417c:	f017 f87e 	bl	802b27c <mg_log>
    	return;
 8014180:	e0ea      	b.n	8014358 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x218>
    }

    r_w_parameter(sw_r, (sett_type_t)OUTPUT_SENSOR, S_READ);
 8014182:	4b7b      	ldr	r3, [pc, #492]	@ (8014370 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x230>)
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	f107 0010 	add.w	r0, r7, #16
 801418a:	2200      	movs	r2, #0
 801418c:	2102      	movs	r1, #2
 801418e:	4798      	blx	r3
    memcpy(sw_w, sw_r, sizeof(sw_r));
 8014190:	f107 030c 	add.w	r3, r7, #12
 8014194:	f107 0210 	add.w	r2, r7, #16
 8014198:	6812      	ldr	r2, [r2, #0]
 801419a:	4611      	mov	r1, r2
 801419c:	8019      	strh	r1, [r3, #0]
 801419e:	3302      	adds	r3, #2
 80141a0:	0c12      	lsrs	r2, r2, #16
 80141a2:	701a      	strb	r2, [r3, #0]

    // Ищем "switch" в топике и затем извлекаем номер реле
    const char *switch_position = strstr(topic, "switch");
 80141a4:	4973      	ldr	r1, [pc, #460]	@ (8014374 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x234>)
 80141a6:	69f8      	ldr	r0, [r7, #28]
 80141a8:	f021 fea2 	bl	8035ef0 <strstr>
 80141ac:	6178      	str	r0, [r7, #20]

    if (switch_position != NULL) {
 80141ae:	697b      	ldr	r3, [r7, #20]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	f000 80bd 	beq.w	8014330 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>
    	// Извлекаем номер реле (например, "3" из "switch3")
    	if (sscanf(switch_position, "switch%d", &relay_number) == 1){
 80141b6:	f107 0308 	add.w	r3, r7, #8
 80141ba:	461a      	mov	r2, r3
 80141bc:	496e      	ldr	r1, [pc, #440]	@ (8014378 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x238>)
 80141be:	6978      	ldr	r0, [r7, #20]
 80141c0:	f021 fa74 	bl	80356ac <sscanf>
 80141c4:	4603      	mov	r3, r0
 80141c6:	2b01      	cmp	r3, #1
 80141c8:	bf0c      	ite	eq
 80141ca:	2301      	moveq	r3, #1
 80141cc:	2300      	movne	r3, #0
 80141ce:	b2db      	uxtb	r3, r3
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	f000 809b 	beq.w	801430c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1cc>
    		MG_INFO(("Getting relay number %d, from topik %s.\n", relay_number, topic));
 80141d6:	4b62      	ldr	r3, [pc, #392]	@ (8014360 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	2b01      	cmp	r3, #1
 80141dc:	dd0b      	ble.n	80141f6 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xb6>
 80141de:	4b61      	ldr	r3, [pc, #388]	@ (8014364 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 80141e0:	229f      	movs	r2, #159	@ 0x9f
 80141e2:	4961      	ldr	r1, [pc, #388]	@ (8014368 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 80141e4:	2002      	movs	r0, #2
 80141e6:	f016 fff9 	bl	802b1dc <mg_log_prefix>
 80141ea:	68bb      	ldr	r3, [r7, #8]
 80141ec:	69fa      	ldr	r2, [r7, #28]
 80141ee:	4619      	mov	r1, r3
 80141f0:	4862      	ldr	r0, [pc, #392]	@ (801437c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x23c>)
 80141f2:	f017 f843 	bl	802b27c <mg_log>

    		logging(L_INFO, "Getting relay number %d, from topik %s.", relay_number, topic);
 80141f6:	68ba      	ldr	r2, [r7, #8]
 80141f8:	69fb      	ldr	r3, [r7, #28]
 80141fa:	4961      	ldr	r1, [pc, #388]	@ (8014380 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x240>)
 80141fc:	2001      	movs	r0, #1
 80141fe:	f7fd ffa5 	bl	801214c <logging>

    		if(relay_number < 1 || relay_number > OUTPUTS_COUNT){
 8014202:	68bb      	ldr	r3, [r7, #8]
 8014204:	2b00      	cmp	r3, #0
 8014206:	dd02      	ble.n	801420e <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xce>
 8014208:	68bb      	ldr	r3, [r7, #8]
 801420a:	2b03      	cmp	r3, #3
 801420c:	dd16      	ble.n	801423c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xfc>
    			MG_ERROR(("Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number));
 801420e:	4b54      	ldr	r3, [pc, #336]	@ (8014360 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	2b00      	cmp	r3, #0
 8014214:	dd0b      	ble.n	801422e <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xee>
 8014216:	4b53      	ldr	r3, [pc, #332]	@ (8014364 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 8014218:	22a4      	movs	r2, #164	@ 0xa4
 801421a:	4953      	ldr	r1, [pc, #332]	@ (8014368 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 801421c:	2001      	movs	r0, #1
 801421e:	f016 ffdd 	bl	802b1dc <mg_log_prefix>
 8014222:	68bb      	ldr	r3, [r7, #8]
 8014224:	461a      	mov	r2, r3
 8014226:	2103      	movs	r1, #3
 8014228:	4856      	ldr	r0, [pc, #344]	@ (8014384 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x244>)
 801422a:	f017 f827 	bl	802b27c <mg_log>

    			logging(L_ERR, "Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number);
 801422e:	68bb      	ldr	r3, [r7, #8]
 8014230:	2203      	movs	r2, #3
 8014232:	4954      	ldr	r1, [pc, #336]	@ (8014384 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x244>)
 8014234:	2003      	movs	r0, #3
 8014236:	f7fd ff89 	bl	801214c <logging>

    			return;
 801423a:	e08e      	b.n	801435a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21a>
    		}

    		// Получаем состояние реле (ON или OFF) из данных сообщения
			if (mess->data.len == 2 && strncmp(message, "ON", 2) == 0) {
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	68db      	ldr	r3, [r3, #12]
 8014240:	2b02      	cmp	r3, #2
 8014242:	d125      	bne.n	8014290 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x150>
 8014244:	2202      	movs	r2, #2
 8014246:	4950      	ldr	r1, [pc, #320]	@ (8014388 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x248>)
 8014248:	69b8      	ldr	r0, [r7, #24]
 801424a:	f021 fe06 	bl	8035e5a <strncmp>
 801424e:	4603      	mov	r3, r0
 8014250:	2b00      	cmp	r3, #0
 8014252:	d11d      	bne.n	8014290 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x150>
				sw_w[relay_number-1] = 1;
 8014254:	68bb      	ldr	r3, [r7, #8]
 8014256:	3b01      	subs	r3, #1
 8014258:	3320      	adds	r3, #32
 801425a:	443b      	add	r3, r7
 801425c:	2201      	movs	r2, #1
 801425e:	f803 2c14 	strb.w	r2, [r3, #-20]
				MG_INFO(("Relay %d is ON.\n", relay_number));
 8014262:	4b3f      	ldr	r3, [pc, #252]	@ (8014360 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	2b01      	cmp	r3, #1
 8014268:	dd0a      	ble.n	8014280 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x140>
 801426a:	4b3e      	ldr	r3, [pc, #248]	@ (8014364 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 801426c:	22ae      	movs	r2, #174	@ 0xae
 801426e:	493e      	ldr	r1, [pc, #248]	@ (8014368 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 8014270:	2002      	movs	r0, #2
 8014272:	f016 ffb3 	bl	802b1dc <mg_log_prefix>
 8014276:	68bb      	ldr	r3, [r7, #8]
 8014278:	4619      	mov	r1, r3
 801427a:	4844      	ldr	r0, [pc, #272]	@ (801438c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x24c>)
 801427c:	f016 fffe 	bl	802b27c <mg_log>
				r_w_parameter(sw_w, (sett_type_t)OUTPUT_SENSOR, S_WRITE);
 8014280:	4b3b      	ldr	r3, [pc, #236]	@ (8014370 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x230>)
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	f107 000c 	add.w	r0, r7, #12
 8014288:	2201      	movs	r2, #1
 801428a:	2102      	movs	r1, #2
 801428c:	4798      	blx	r3
 801428e:	e064      	b.n	801435a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21a>
			} else if (mess->data.len == 3 && strncmp(message, "OFF", 3) == 0) {
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	68db      	ldr	r3, [r3, #12]
 8014294:	2b03      	cmp	r3, #3
 8014296:	d125      	bne.n	80142e4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1a4>
 8014298:	2203      	movs	r2, #3
 801429a:	493d      	ldr	r1, [pc, #244]	@ (8014390 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 801429c:	69b8      	ldr	r0, [r7, #24]
 801429e:	f021 fddc 	bl	8035e5a <strncmp>
 80142a2:	4603      	mov	r3, r0
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d11d      	bne.n	80142e4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1a4>
				sw_w[relay_number-1] = 0;
 80142a8:	68bb      	ldr	r3, [r7, #8]
 80142aa:	3b01      	subs	r3, #1
 80142ac:	3320      	adds	r3, #32
 80142ae:	443b      	add	r3, r7
 80142b0:	2200      	movs	r2, #0
 80142b2:	f803 2c14 	strb.w	r2, [r3, #-20]
				MG_INFO(("Relay %d is OFF.\n", relay_number));
 80142b6:	4b2a      	ldr	r3, [pc, #168]	@ (8014360 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	2b01      	cmp	r3, #1
 80142bc:	dd0a      	ble.n	80142d4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x194>
 80142be:	4b29      	ldr	r3, [pc, #164]	@ (8014364 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 80142c0:	22b2      	movs	r2, #178	@ 0xb2
 80142c2:	4929      	ldr	r1, [pc, #164]	@ (8014368 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 80142c4:	2002      	movs	r0, #2
 80142c6:	f016 ff89 	bl	802b1dc <mg_log_prefix>
 80142ca:	68bb      	ldr	r3, [r7, #8]
 80142cc:	4619      	mov	r1, r3
 80142ce:	4831      	ldr	r0, [pc, #196]	@ (8014394 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 80142d0:	f016 ffd4 	bl	802b27c <mg_log>
				r_w_parameter(sw_w, (sett_type_t)OUTPUT_SENSOR, S_WRITE);
 80142d4:	4b26      	ldr	r3, [pc, #152]	@ (8014370 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x230>)
 80142d6:	681b      	ldr	r3, [r3, #0]
 80142d8:	f107 000c 	add.w	r0, r7, #12
 80142dc:	2201      	movs	r2, #1
 80142de:	2102      	movs	r1, #2
 80142e0:	4798      	blx	r3
 80142e2:	e03a      	b.n	801435a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21a>

			}else{
				MG_ERROR(("Error: expected message \"ON\" or \"OFF\" but got message: %s \n", message));
 80142e4:	4b1e      	ldr	r3, [pc, #120]	@ (8014360 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 80142e6:	681b      	ldr	r3, [r3, #0]
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	dd09      	ble.n	8014300 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1c0>
 80142ec:	4b1d      	ldr	r3, [pc, #116]	@ (8014364 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 80142ee:	22b6      	movs	r2, #182	@ 0xb6
 80142f0:	491d      	ldr	r1, [pc, #116]	@ (8014368 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 80142f2:	2001      	movs	r0, #1
 80142f4:	f016 ff72 	bl	802b1dc <mg_log_prefix>
 80142f8:	69b9      	ldr	r1, [r7, #24]
 80142fa:	4827      	ldr	r0, [pc, #156]	@ (8014398 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 80142fc:	f016 ffbe 	bl	802b27c <mg_log>
				logging(L_ERR, "Error: expected message \"ON\" or \"OFF\" but got message: %s \n", message);
 8014300:	69ba      	ldr	r2, [r7, #24]
 8014302:	4925      	ldr	r1, [pc, #148]	@ (8014398 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 8014304:	2003      	movs	r0, #3
 8014306:	f7fd ff21 	bl	801214c <logging>
 801430a:	e026      	b.n	801435a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21a>
			}

    	}else{
    		MG_ERROR(("Error: relay number is not found, or incorrect format.\n"));
 801430c:	4b14      	ldr	r3, [pc, #80]	@ (8014360 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	2b00      	cmp	r3, #0
 8014312:	dd08      	ble.n	8014326 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e6>
 8014314:	4b13      	ldr	r3, [pc, #76]	@ (8014364 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 8014316:	22bb      	movs	r2, #187	@ 0xbb
 8014318:	4913      	ldr	r1, [pc, #76]	@ (8014368 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 801431a:	2001      	movs	r0, #1
 801431c:	f016 ff5e 	bl	802b1dc <mg_log_prefix>
 8014320:	481e      	ldr	r0, [pc, #120]	@ (801439c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x25c>)
 8014322:	f016 ffab 	bl	802b27c <mg_log>
			logging(L_ERR, "Error: relay number is not found, or incorrect format.");
 8014326:	491e      	ldr	r1, [pc, #120]	@ (80143a0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x260>)
 8014328:	2003      	movs	r0, #3
 801432a:	f7fd ff0f 	bl	801214c <logging>
 801432e:	e014      	b.n	801435a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21a>
    	}
    }else{
    	MG_ERROR(("Substring \"switch\" is not fount in topik %s. \n", topic));
 8014330:	4b0b      	ldr	r3, [pc, #44]	@ (8014360 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	2b00      	cmp	r3, #0
 8014336:	dd09      	ble.n	801434c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x20c>
 8014338:	4b0a      	ldr	r3, [pc, #40]	@ (8014364 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 801433a:	22bf      	movs	r2, #191	@ 0xbf
 801433c:	490a      	ldr	r1, [pc, #40]	@ (8014368 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 801433e:	2001      	movs	r0, #1
 8014340:	f016 ff4c 	bl	802b1dc <mg_log_prefix>
 8014344:	69f9      	ldr	r1, [r7, #28]
 8014346:	4817      	ldr	r0, [pc, #92]	@ (80143a4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x264>)
 8014348:	f016 ff98 	bl	802b27c <mg_log>
    	logging(L_ERR, "Substring \"switch\" is not fount in topik %s. \n", topic);
 801434c:	69fa      	ldr	r2, [r7, #28]
 801434e:	4915      	ldr	r1, [pc, #84]	@ (80143a4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x264>)
 8014350:	2003      	movs	r0, #3
 8014352:	f7fd fefb 	bl	801214c <logging>
 8014356:	e000      	b.n	801435a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21a>
    	return;
 8014358:	bf00      	nop
    }
}
 801435a:	3720      	adds	r7, #32
 801435c:	46bd      	mov	sp, r7
 801435e:	bd80      	pop	{r7, pc}
 8014360:	20000298 	.word	0x20000298
 8014364:	08040154 	.word	0x08040154
 8014368:	08040174 	.word	0x08040174
 801436c:	080401a0 	.word	0x080401a0
 8014370:	20000b90 	.word	0x20000b90
 8014374:	080401c4 	.word	0x080401c4
 8014378:	080401cc 	.word	0x080401cc
 801437c:	080401d8 	.word	0x080401d8
 8014380:	08040204 	.word	0x08040204
 8014384:	0804022c 	.word	0x0804022c
 8014388:	0804027c 	.word	0x0804027c
 801438c:	08040280 	.word	0x08040280
 8014390:	08040294 	.word	0x08040294
 8014394:	08040298 	.word	0x08040298
 8014398:	080402ac 	.word	0x080402ac
 801439c:	080402e8 	.word	0x080402e8
 80143a0:	08040320 	.word	0x08040320
 80143a4:	08040358 	.word	0x08040358

080143a8 <_ZL39mqtt_pereodic_status_send_timer_handlerPv>:


static void mqtt_pereodic_status_send_timer_handler(void *arg){
 80143a8:	b580      	push	{r7, lr}
 80143aa:	b082      	sub	sp, #8
 80143ac:	af00      	add	r7, sp, #0
 80143ae:	6078      	str	r0, [r7, #4]
	if(is_registered){
 80143b0:	4b06      	ldr	r3, [pc, #24]	@ (80143cc <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x24>)
 80143b2:	781b      	ldrb	r3, [r3, #0]
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d005      	beq.n	80143c4 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x1c>
		mqtt_send_io_status(mqtt_conn, 1);
 80143b8:	4b05      	ldr	r3, [pc, #20]	@ (80143d0 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x28>)
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	2101      	movs	r1, #1
 80143be:	4618      	mov	r0, r3
 80143c0:	f7ff fd7a 	bl	8013eb8 <_ZL19mqtt_send_io_statusP13mg_connectionb>
	}
}
 80143c4:	bf00      	nop
 80143c6:	3708      	adds	r7, #8
 80143c8:	46bd      	mov	sp, r7
 80143ca:	bd80      	pop	{r7, pc}
 80143cc:	20000b8c 	.word	0x20000b8c
 80143d0:	20000b78 	.word	0x20000b78

080143d4 <_ZL18mqtt_event_handlerP13mg_connectioniPv>:

static void mqtt_event_handler(struct mg_connection *conn, int ev, void *ev_data){
 80143d4:	b580      	push	{r7, lr}
 80143d6:	b086      	sub	sp, #24
 80143d8:	af00      	add	r7, sp, #0
 80143da:	60f8      	str	r0, [r7, #12]
 80143dc:	60b9      	str	r1, [r7, #8]
 80143de:	607a      	str	r2, [r7, #4]
	if (ev == MG_EV_MQTT_OPEN) {// MQTT connect is successful
 80143e0:	68bb      	ldr	r3, [r7, #8]
 80143e2:	2b11      	cmp	r3, #17
 80143e4:	d132      	bne.n	801444c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x78>
		MG_DEBUG(("MQTT_open_connection"));
 80143e6:	4b2d      	ldr	r3, [pc, #180]	@ (801449c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xc8>)
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	2b02      	cmp	r3, #2
 80143ec:	dd08      	ble.n	8014400 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x2c>
 80143ee:	4b2c      	ldr	r3, [pc, #176]	@ (80144a0 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xcc>)
 80143f0:	22cd      	movs	r2, #205	@ 0xcd
 80143f2:	492c      	ldr	r1, [pc, #176]	@ (80144a4 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xd0>)
 80143f4:	2003      	movs	r0, #3
 80143f6:	f016 fef1 	bl	802b1dc <mg_log_prefix>
 80143fa:	482b      	ldr	r0, [pc, #172]	@ (80144a8 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xd4>)
 80143fc:	f016 ff3e 	bl	802b27c <mg_log>
		logging(L_INFO, "MQTT Open connection");
 8014400:	492a      	ldr	r1, [pc, #168]	@ (80144ac <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xd8>)
 8014402:	2001      	movs	r0, #1
 8014404:	f7fd fea2 	bl	801214c <logging>
		mqtt_conn = conn;
 8014408:	4a29      	ldr	r2, [pc, #164]	@ (80144b0 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xdc>)
 801440a:	68fb      	ldr	r3, [r7, #12]
 801440c:	6013      	str	r3, [r2, #0]
		if(!is_registered){
 801440e:	4b29      	ldr	r3, [pc, #164]	@ (80144b4 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xe0>)
 8014410:	781b      	ldrb	r3, [r3, #0]
 8014412:	f083 0301 	eor.w	r3, r3, #1
 8014416:	b2db      	uxtb	r3, r3
 8014418:	2b00      	cmp	r3, #0
 801441a:	d03a      	beq.n	8014492 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xbe>
			mqtt_send_registration_data(mqtt_conn, sensors, sizeof(sensors)/sizeof(SensorInfo));
 801441c:	4b24      	ldr	r3, [pc, #144]	@ (80144b0 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xdc>)
 801441e:	681b      	ldr	r3, [r3, #0]
 8014420:	2206      	movs	r2, #6
 8014422:	4925      	ldr	r1, [pc, #148]	@ (80144b8 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xe4>)
 8014424:	4618      	mov	r0, r3
 8014426:	f7ff fcbd 	bl	8013da4 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj>
			mqtt_send_io_status(mqtt_conn, 1);
 801442a:	4b21      	ldr	r3, [pc, #132]	@ (80144b0 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xdc>)
 801442c:	681b      	ldr	r3, [r3, #0]
 801442e:	2101      	movs	r1, #1
 8014430:	4618      	mov	r0, r3
 8014432:	f7ff fd41 	bl	8013eb8 <_ZL19mqtt_send_io_statusP13mg_connectionb>
			mqtt_subscrabe_on_sw(mqtt_conn, sensors, sizeof(sensors)/sizeof(SensorInfo));
 8014436:	4b1e      	ldr	r3, [pc, #120]	@ (80144b0 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xdc>)
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	2206      	movs	r2, #6
 801443c:	491e      	ldr	r1, [pc, #120]	@ (80144b8 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xe4>)
 801443e:	4618      	mov	r0, r3
 8014440:	f7ff fe2e 	bl	80140a0 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj>
			is_registered = true;
 8014444:	4b1b      	ldr	r3, [pc, #108]	@ (80144b4 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xe0>)
 8014446:	2201      	movs	r2, #1
 8014448:	701a      	strb	r2, [r3, #0]
	}else if (ev == MG_EV_CLOSE){
		logging(L_INFO, "MQTT Close connection");
		mqtt_conn     = NULL;
		is_registered = false;
	}
}
 801444a:	e022      	b.n	8014492 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xbe>
	}else if (ev == MG_EV_MQTT_MSG){
 801444c:	68bb      	ldr	r3, [r7, #8]
 801444e:	2b10      	cmp	r3, #16
 8014450:	d10f      	bne.n	8014472 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x9e>
		logging(L_INFO, "Receive message from MQTT server");
 8014452:	491a      	ldr	r1, [pc, #104]	@ (80144bc <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xe8>)
 8014454:	2001      	movs	r0, #1
 8014456:	f7fd fe79 	bl	801214c <logging>
		 struct mg_mqtt_message *mm = (struct mg_mqtt_message *) ev_data;
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	617b      	str	r3, [r7, #20]
		 mqtt_subscrabe_recv_cmd_parce(mm);
 801445e:	6978      	ldr	r0, [r7, #20]
 8014460:	f7ff fe6e 	bl	8014140 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message>
		 mqtt_send_io_status(mqtt_conn, 0);
 8014464:	4b12      	ldr	r3, [pc, #72]	@ (80144b0 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xdc>)
 8014466:	681b      	ldr	r3, [r3, #0]
 8014468:	2100      	movs	r1, #0
 801446a:	4618      	mov	r0, r3
 801446c:	f7ff fd24 	bl	8013eb8 <_ZL19mqtt_send_io_statusP13mg_connectionb>
}
 8014470:	e00f      	b.n	8014492 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xbe>
	}else if (ev == MG_EV_MQTT_CMD){
 8014472:	68bb      	ldr	r3, [r7, #8]
 8014474:	2b0f      	cmp	r3, #15
 8014476:	d00c      	beq.n	8014492 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xbe>
	}else if (ev == MG_EV_CLOSE){
 8014478:	68bb      	ldr	r3, [r7, #8]
 801447a:	2b09      	cmp	r3, #9
 801447c:	d109      	bne.n	8014492 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xbe>
		logging(L_INFO, "MQTT Close connection");
 801447e:	4910      	ldr	r1, [pc, #64]	@ (80144c0 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xec>)
 8014480:	2001      	movs	r0, #1
 8014482:	f7fd fe63 	bl	801214c <logging>
		mqtt_conn     = NULL;
 8014486:	4b0a      	ldr	r3, [pc, #40]	@ (80144b0 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xdc>)
 8014488:	2200      	movs	r2, #0
 801448a:	601a      	str	r2, [r3, #0]
		is_registered = false;
 801448c:	4b09      	ldr	r3, [pc, #36]	@ (80144b4 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xe0>)
 801448e:	2200      	movs	r2, #0
 8014490:	701a      	strb	r2, [r3, #0]
}
 8014492:	bf00      	nop
 8014494:	3718      	adds	r7, #24
 8014496:	46bd      	mov	sp, r7
 8014498:	bd80      	pop	{r7, pc}
 801449a:	bf00      	nop
 801449c:	20000298 	.word	0x20000298
 80144a0:	08040388 	.word	0x08040388
 80144a4:	08040174 	.word	0x08040174
 80144a8:	0804039c 	.word	0x0804039c
 80144ac:	080403b4 	.word	0x080403b4
 80144b0:	20000b78 	.word	0x20000b78
 80144b4:	20000b8c 	.word	0x20000b8c
 80144b8:	20000034 	.word	0x20000034
 80144bc:	080403cc 	.word	0x080403cc
 80144c0:	080403f0 	.word	0x080403f0

080144c4 <_ZL18mqtt_timer_handlerPv>:

// Таймер для установления и поддержания соединения.
static void mqtt_timer_handler(void *arg){
 80144c4:	b590      	push	{r4, r7, lr}
 80144c6:	b087      	sub	sp, #28
 80144c8:	af02      	add	r7, sp, #8
 80144ca:	60f8      	str	r0, [r7, #12]
	if (!mqtt_conn){
 80144cc:	4b20      	ldr	r3, [pc, #128]	@ (8014550 <_ZL18mqtt_timer_handlerPv+0x8c>)
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d136      	bne.n	8014542 <_ZL18mqtt_timer_handlerPv+0x7e>
		logging(L_INFO, "Try to connect to MQTT server");
 80144d4:	491f      	ldr	r1, [pc, #124]	@ (8014554 <_ZL18mqtt_timer_handlerPv+0x90>)
 80144d6:	2001      	movs	r0, #1
 80144d8:	f7fd fe38 	bl	801214c <logging>
		memset(&mqtt_opts, 0, sizeof(mqtt_opts));
 80144dc:	2240      	movs	r2, #64	@ 0x40
 80144de:	2100      	movs	r1, #0
 80144e0:	481d      	ldr	r0, [pc, #116]	@ (8014558 <_ZL18mqtt_timer_handlerPv+0x94>)
 80144e2:	f021 fc85 	bl	8035df0 <memset>
		mqtt_opts.user 		    = mg_str(mqtt_username);
 80144e6:	4b1d      	ldr	r3, [pc, #116]	@ (801455c <_ZL18mqtt_timer_handlerPv+0x98>)
 80144e8:	681a      	ldr	r2, [r3, #0]
 80144ea:	4c1b      	ldr	r4, [pc, #108]	@ (8014558 <_ZL18mqtt_timer_handlerPv+0x94>)
 80144ec:	463b      	mov	r3, r7
 80144ee:	4611      	mov	r1, r2
 80144f0:	4618      	mov	r0, r3
 80144f2:	f01d fb77 	bl	8031be4 <mg_str_s>
 80144f6:	4622      	mov	r2, r4
 80144f8:	463b      	mov	r3, r7
 80144fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80144fe:	e882 0003 	stmia.w	r2, {r0, r1}
		mqtt_opts.pass		    = mg_str(mqtt_password);
 8014502:	4b17      	ldr	r3, [pc, #92]	@ (8014560 <_ZL18mqtt_timer_handlerPv+0x9c>)
 8014504:	681a      	ldr	r2, [r3, #0]
 8014506:	4c14      	ldr	r4, [pc, #80]	@ (8014558 <_ZL18mqtt_timer_handlerPv+0x94>)
 8014508:	463b      	mov	r3, r7
 801450a:	4611      	mov	r1, r2
 801450c:	4618      	mov	r0, r3
 801450e:	f01d fb69 	bl	8031be4 <mg_str_s>
 8014512:	f104 0308 	add.w	r3, r4, #8
 8014516:	463a      	mov	r2, r7
 8014518:	e892 0003 	ldmia.w	r2, {r0, r1}
 801451c:	e883 0003 	stmia.w	r3, {r0, r1}
		mqtt_opts.keepalive 	= 60;
 8014520:	4b0d      	ldr	r3, [pc, #52]	@ (8014558 <_ZL18mqtt_timer_handlerPv+0x94>)
 8014522:	223c      	movs	r2, #60	@ 0x3c
 8014524:	855a      	strh	r2, [r3, #42]	@ 0x2a
		mqtt_conn = mg_mqtt_connect(mgr, mqtt_broker_url, &mqtt_opts, mqtt_event_handler, NULL);
 8014526:	4b0f      	ldr	r3, [pc, #60]	@ (8014564 <_ZL18mqtt_timer_handlerPv+0xa0>)
 8014528:	6818      	ldr	r0, [r3, #0]
 801452a:	4b0f      	ldr	r3, [pc, #60]	@ (8014568 <_ZL18mqtt_timer_handlerPv+0xa4>)
 801452c:	6819      	ldr	r1, [r3, #0]
 801452e:	2300      	movs	r3, #0
 8014530:	9300      	str	r3, [sp, #0]
 8014532:	4b0e      	ldr	r3, [pc, #56]	@ (801456c <_ZL18mqtt_timer_handlerPv+0xa8>)
 8014534:	4a08      	ldr	r2, [pc, #32]	@ (8014558 <_ZL18mqtt_timer_handlerPv+0x94>)
 8014536:	f018 ff4f 	bl	802d3d8 <mg_mqtt_connect>
 801453a:	4603      	mov	r3, r0
 801453c:	4a04      	ldr	r2, [pc, #16]	@ (8014550 <_ZL18mqtt_timer_handlerPv+0x8c>)
 801453e:	6013      	str	r3, [r2, #0]
		//is_registered = true;
		//SEND REG DATA
	    //mqtt_send_registration_data(mqtt_conn);
	}

}//void * param, sett_type_t param_type,  sett_direction_t direction
 8014540:	e002      	b.n	8014548 <_ZL18mqtt_timer_handlerPv+0x84>
	}else if(mqtt_conn && is_registered){ //connection established and registered sensors
 8014542:	4b03      	ldr	r3, [pc, #12]	@ (8014550 <_ZL18mqtt_timer_handlerPv+0x8c>)
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	2b00      	cmp	r3, #0
}//void * param, sett_type_t param_type,  sett_direction_t direction
 8014548:	bf00      	nop
 801454a:	3714      	adds	r7, #20
 801454c:	46bd      	mov	sp, r7
 801454e:	bd90      	pop	{r4, r7, pc}
 8014550:	20000b78 	.word	0x20000b78
 8014554:	08040408 	.word	0x08040408
 8014558:	20000b38 	.word	0x20000b38
 801455c:	20000b20 	.word	0x20000b20
 8014560:	20000b24 	.word	0x20000b24
 8014564:	20000b30 	.word	0x20000b30
 8014568:	20000b1c 	.word	0x20000b1c
 801456c:	080143d5 	.word	0x080143d5

08014570 <_ZL33mqtt_timer_handler_cher_io_statusPv>:

static void mqtt_timer_handler_cher_io_status(void *arg){
 8014570:	b580      	push	{r7, lr}
 8014572:	b082      	sub	sp, #8
 8014574:	af00      	add	r7, sp, #0
 8014576:	6078      	str	r0, [r7, #4]
	if(mqtt_conn && is_registered){
 8014578:	4b08      	ldr	r3, [pc, #32]	@ (801459c <_ZL33mqtt_timer_handler_cher_io_statusPv+0x2c>)
 801457a:	681b      	ldr	r3, [r3, #0]
 801457c:	2b00      	cmp	r3, #0
 801457e:	d009      	beq.n	8014594 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x24>
 8014580:	4b07      	ldr	r3, [pc, #28]	@ (80145a0 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x30>)
 8014582:	781b      	ldrb	r3, [r3, #0]
 8014584:	2b00      	cmp	r3, #0
 8014586:	d005      	beq.n	8014594 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x24>
		mqtt_send_io_status(mqtt_conn, 0);
 8014588:	4b04      	ldr	r3, [pc, #16]	@ (801459c <_ZL33mqtt_timer_handler_cher_io_statusPv+0x2c>)
 801458a:	681b      	ldr	r3, [r3, #0]
 801458c:	2100      	movs	r1, #0
 801458e:	4618      	mov	r0, r3
 8014590:	f7ff fc92 	bl	8013eb8 <_ZL19mqtt_send_io_statusP13mg_connectionb>
	}
}
 8014594:	bf00      	nop
 8014596:	3708      	adds	r7, #8
 8014598:	46bd      	mov	sp, r7
 801459a:	bd80      	pop	{r7, pc}
 801459c:	20000b78 	.word	0x20000b78
 80145a0:	20000b8c 	.word	0x20000b8c

080145a4 <get_mqtt_connection>:

// Getter для mqtt_conn
struct mg_connection* get_mqtt_connection(void){
 80145a4:	b480      	push	{r7}
 80145a6:	af00      	add	r7, sp, #0
    return mqtt_conn;
 80145a8:	4b03      	ldr	r3, [pc, #12]	@ (80145b8 <get_mqtt_connection+0x14>)
 80145aa:	681b      	ldr	r3, [r3, #0]
}
 80145ac:	4618      	mov	r0, r3
 80145ae:	46bd      	mov	sp, r7
 80145b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145b4:	4770      	bx	lr
 80145b6:	bf00      	nop
 80145b8:	20000b78 	.word	0x20000b78

080145bc <mqtt_init>:


void mqtt_init(void *mgr_parameter, void * mif_parameter, void * broker_url, void *username, void *password, void (*fn)(void*, sett_type_t, sett_direction_t)){
 80145bc:	b590      	push	{r4, r7, lr}
 80145be:	b08b      	sub	sp, #44	@ 0x2c
 80145c0:	af04      	add	r7, sp, #16
 80145c2:	6178      	str	r0, [r7, #20]
 80145c4:	6139      	str	r1, [r7, #16]
 80145c6:	60fa      	str	r2, [r7, #12]
 80145c8:	60bb      	str	r3, [r7, #8]

	mqtt_broker_url = (char *) calloc(MAX_MQTT_URL_LEN,     sizeof(char));
 80145ca:	2101      	movs	r1, #1
 80145cc:	2080      	movs	r0, #128	@ 0x80
 80145ce:	f7ff fbcb 	bl	8013d68 <_ZL9my_callocjj>
 80145d2:	4603      	mov	r3, r0
 80145d4:	4a54      	ldr	r2, [pc, #336]	@ (8014728 <mqtt_init+0x16c>)
 80145d6:	6013      	str	r3, [r2, #0]
	mqtt_username   = (char *) calloc(MAX_MQTT_LOGIN_LEN,   sizeof(char));
 80145d8:	2101      	movs	r1, #1
 80145da:	2021      	movs	r0, #33	@ 0x21
 80145dc:	f7ff fbc4 	bl	8013d68 <_ZL9my_callocjj>
 80145e0:	4603      	mov	r3, r0
 80145e2:	4a52      	ldr	r2, [pc, #328]	@ (801472c <mqtt_init+0x170>)
 80145e4:	6013      	str	r3, [r2, #0]
	mqtt_password   = (char *) calloc(MAX_MQTT_PASS_LEN,    sizeof(char));
 80145e6:	2101      	movs	r1, #1
 80145e8:	2021      	movs	r0, #33	@ 0x21
 80145ea:	f7ff fbbd 	bl	8013d68 <_ZL9my_callocjj>
 80145ee:	4603      	mov	r3, r0
 80145f0:	4a4f      	ldr	r2, [pc, #316]	@ (8014730 <mqtt_init+0x174>)
 80145f2:	6013      	str	r3, [r2, #0]
	topik_buff      = (char *) calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 80145f4:	2101      	movs	r1, #1
 80145f6:	2080      	movs	r0, #128	@ 0x80
 80145f8:	f7ff fbb6 	bl	8013d68 <_ZL9my_callocjj>
 80145fc:	4603      	mov	r3, r0
 80145fe:	4a4d      	ldr	r2, [pc, #308]	@ (8014734 <mqtt_init+0x178>)
 8014600:	6013      	str	r3, [r2, #0]
	payload_buff    = (char *) calloc(MQTT_PAYLOAD_MAX_LEN, sizeof(char));
 8014602:	2101      	movs	r1, #1
 8014604:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8014608:	f7ff fbae 	bl	8013d68 <_ZL9my_callocjj>
 801460c:	4603      	mov	r3, r0
 801460e:	4a4a      	ldr	r2, [pc, #296]	@ (8014738 <mqtt_init+0x17c>)
 8014610:	6013      	str	r3, [r2, #0]
	ip_addr_str     = (char *) calloc(IP_v6_STR_LEN,        sizeof(char));
 8014612:	2101      	movs	r1, #1
 8014614:	2028      	movs	r0, #40	@ 0x28
 8014616:	f7ff fba7 	bl	8013d68 <_ZL9my_callocjj>
 801461a:	4603      	mov	r3, r0
 801461c:	4a47      	ldr	r2, [pc, #284]	@ (801473c <mqtt_init+0x180>)
 801461e:	6013      	str	r3, [r2, #0]
	r_w_parameter   = fn;
 8014620:	4a47      	ldr	r2, [pc, #284]	@ (8014740 <mqtt_init+0x184>)
 8014622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014624:	6013      	str	r3, [r2, #0]

	strcpy(mqtt_broker_url, (char *)broker_url);
 8014626:	4b40      	ldr	r3, [pc, #256]	@ (8014728 <mqtt_init+0x16c>)
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	68f9      	ldr	r1, [r7, #12]
 801462c:	4618      	mov	r0, r3
 801462e:	f022 fde9 	bl	8037204 <strcpy>
	strcpy(mqtt_username,   (char *)username);
 8014632:	4b3e      	ldr	r3, [pc, #248]	@ (801472c <mqtt_init+0x170>)
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	68b9      	ldr	r1, [r7, #8]
 8014638:	4618      	mov	r0, r3
 801463a:	f022 fde3 	bl	8037204 <strcpy>
	strcpy(mqtt_password,   (char *)password);
 801463e:	4b3c      	ldr	r3, [pc, #240]	@ (8014730 <mqtt_init+0x174>)
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014644:	4618      	mov	r0, r3
 8014646:	f022 fddd 	bl	8037204 <strcpy>

	logging(L_INFO, "Start MQTT task, server: %s, username: %s", mqtt_broker_url, mqtt_username);
 801464a:	4b37      	ldr	r3, [pc, #220]	@ (8014728 <mqtt_init+0x16c>)
 801464c:	681a      	ldr	r2, [r3, #0]
 801464e:	4b37      	ldr	r3, [pc, #220]	@ (801472c <mqtt_init+0x170>)
 8014650:	681b      	ldr	r3, [r3, #0]
 8014652:	493c      	ldr	r1, [pc, #240]	@ (8014744 <mqtt_init+0x188>)
 8014654:	2001      	movs	r0, #1
 8014656:	f7fd fd79 	bl	801214c <logging>

	mgr = (struct mg_mgr *)     mgr_parameter;
 801465a:	4a3b      	ldr	r2, [pc, #236]	@ (8014748 <mqtt_init+0x18c>)
 801465c:	697b      	ldr	r3, [r7, #20]
 801465e:	6013      	str	r3, [r2, #0]
	mif = (struct mg_tcpip_if*) mif_parameter;
 8014660:	4a3a      	ldr	r2, [pc, #232]	@ (801474c <mqtt_init+0x190>)
 8014662:	693b      	ldr	r3, [r7, #16]
 8014664:	6013      	str	r3, [r2, #0]

	set_device_id(mif->mac, sizeof(mif->mac));
 8014666:	4b39      	ldr	r3, [pc, #228]	@ (801474c <mqtt_init+0x190>)
 8014668:	681b      	ldr	r3, [r3, #0]
 801466a:	2106      	movs	r1, #6
 801466c:	4618      	mov	r0, r3
 801466e:	f000 f89b 	bl	80147a8 <set_device_id>

	mqtt_opts.user 		    = mg_str(mqtt_username);
 8014672:	4b2e      	ldr	r3, [pc, #184]	@ (801472c <mqtt_init+0x170>)
 8014674:	681a      	ldr	r2, [r3, #0]
 8014676:	4c36      	ldr	r4, [pc, #216]	@ (8014750 <mqtt_init+0x194>)
 8014678:	463b      	mov	r3, r7
 801467a:	4611      	mov	r1, r2
 801467c:	4618      	mov	r0, r3
 801467e:	f01d fab1 	bl	8031be4 <mg_str_s>
 8014682:	4622      	mov	r2, r4
 8014684:	463b      	mov	r3, r7
 8014686:	e893 0003 	ldmia.w	r3, {r0, r1}
 801468a:	e882 0003 	stmia.w	r2, {r0, r1}
	mqtt_opts.pass		    = mg_str(mqtt_password);
 801468e:	4b28      	ldr	r3, [pc, #160]	@ (8014730 <mqtt_init+0x174>)
 8014690:	681a      	ldr	r2, [r3, #0]
 8014692:	4c2f      	ldr	r4, [pc, #188]	@ (8014750 <mqtt_init+0x194>)
 8014694:	463b      	mov	r3, r7
 8014696:	4611      	mov	r1, r2
 8014698:	4618      	mov	r0, r3
 801469a:	f01d faa3 	bl	8031be4 <mg_str_s>
 801469e:	f104 0308 	add.w	r3, r4, #8
 80146a2:	463a      	mov	r2, r7
 80146a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80146a8:	e883 0003 	stmia.w	r3, {r0, r1}
	mqtt_opts.keepalive 	= 60;
 80146ac:	4b28      	ldr	r3, [pc, #160]	@ (8014750 <mqtt_init+0x194>)
 80146ae:	223c      	movs	r2, #60	@ 0x3c
 80146b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

	mqtt_timer =                      mg_timer_add(mgr, 10000 /* 10 seconds */, MG_TIMER_REPEAT | MG_TIMER_RUN_NOW, mqtt_timer_handler,                      NULL); // Timer for following connection and reconnect every 10 seconds if needed
 80146b2:	4b25      	ldr	r3, [pc, #148]	@ (8014748 <mqtt_init+0x18c>)
 80146b4:	6819      	ldr	r1, [r3, #0]
 80146b6:	2300      	movs	r3, #0
 80146b8:	9302      	str	r3, [sp, #8]
 80146ba:	4b26      	ldr	r3, [pc, #152]	@ (8014754 <mqtt_init+0x198>)
 80146bc:	9301      	str	r3, [sp, #4]
 80146be:	2303      	movs	r3, #3
 80146c0:	9300      	str	r3, [sp, #0]
 80146c2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80146c6:	f04f 0300 	mov.w	r3, #0
 80146ca:	4608      	mov	r0, r1
 80146cc:	f019 fb20 	bl	802dd10 <mg_timer_add>
 80146d0:	4603      	mov	r3, r0
 80146d2:	4a21      	ldr	r2, [pc, #132]	@ (8014758 <mqtt_init+0x19c>)
 80146d4:	6013      	str	r3, [r2, #0]
	mqtt_timer_periodic_status_send = mg_timer_add(mgr, 15000 /* 15 seconds */, MG_TIMER_REPEAT,                mqtt_pereodic_status_send_timer_handler, NULL); // Timer for send io statuses every ~150 seconds
 80146d6:	4b1c      	ldr	r3, [pc, #112]	@ (8014748 <mqtt_init+0x18c>)
 80146d8:	6819      	ldr	r1, [r3, #0]
 80146da:	2300      	movs	r3, #0
 80146dc:	9302      	str	r3, [sp, #8]
 80146de:	4b1f      	ldr	r3, [pc, #124]	@ (801475c <mqtt_init+0x1a0>)
 80146e0:	9301      	str	r3, [sp, #4]
 80146e2:	2301      	movs	r3, #1
 80146e4:	9300      	str	r3, [sp, #0]
 80146e6:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80146ea:	f04f 0300 	mov.w	r3, #0
 80146ee:	4608      	mov	r0, r1
 80146f0:	f019 fb0e 	bl	802dd10 <mg_timer_add>
 80146f4:	4603      	mov	r3, r0
 80146f6:	4a1a      	ldr	r2, [pc, #104]	@ (8014760 <mqtt_init+0x1a4>)
 80146f8:	6013      	str	r3, [r2, #0]
	mqtt_timer_io_sheck	=             mg_timer_add(mgr,	500 /* 0.5 seconds */, MG_TIMER_REPEAT,                    mqtt_timer_handler_cher_io_status,       NULL); // timer for follow io status every 0.5 seconds
 80146fa:	4b13      	ldr	r3, [pc, #76]	@ (8014748 <mqtt_init+0x18c>)
 80146fc:	6819      	ldr	r1, [r3, #0]
 80146fe:	2300      	movs	r3, #0
 8014700:	9302      	str	r3, [sp, #8]
 8014702:	4b18      	ldr	r3, [pc, #96]	@ (8014764 <mqtt_init+0x1a8>)
 8014704:	9301      	str	r3, [sp, #4]
 8014706:	2301      	movs	r3, #1
 8014708:	9300      	str	r3, [sp, #0]
 801470a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 801470e:	f04f 0300 	mov.w	r3, #0
 8014712:	4608      	mov	r0, r1
 8014714:	f019 fafc 	bl	802dd10 <mg_timer_add>
 8014718:	4603      	mov	r3, r0
 801471a:	4a13      	ldr	r2, [pc, #76]	@ (8014768 <mqtt_init+0x1ac>)
 801471c:	6013      	str	r3, [r2, #0]

}
 801471e:	bf00      	nop
 8014720:	371c      	adds	r7, #28
 8014722:	46bd      	mov	sp, r7
 8014724:	bd90      	pop	{r4, r7, pc}
 8014726:	bf00      	nop
 8014728:	20000b1c 	.word	0x20000b1c
 801472c:	20000b20 	.word	0x20000b20
 8014730:	20000b24 	.word	0x20000b24
 8014734:	20000b28 	.word	0x20000b28
 8014738:	20000b2c 	.word	0x20000b2c
 801473c:	20000b7c 	.word	0x20000b7c
 8014740:	20000b90 	.word	0x20000b90
 8014744:	08040428 	.word	0x08040428
 8014748:	20000b30 	.word	0x20000b30
 801474c:	20000b34 	.word	0x20000b34
 8014750:	20000b38 	.word	0x20000b38
 8014754:	080144c5 	.word	0x080144c5
 8014758:	20000b80 	.word	0x20000b80
 801475c:	080143a9 	.word	0x080143a9
 8014760:	20000b84 	.word	0x20000b84
 8014764:	08014571 	.word	0x08014571
 8014768:	20000b88 	.word	0x20000b88

0801476c <_ZL9my_callocjj>:
static inline void *my_calloc(size_t cnt, size_t size) {
 801476c:	b580      	push	{r7, lr}
 801476e:	b084      	sub	sp, #16
 8014770:	af00      	add	r7, sp, #0
 8014772:	6078      	str	r0, [r7, #4]
 8014774:	6039      	str	r1, [r7, #0]
  void *p = pvPortMalloc(cnt * size);
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	683a      	ldr	r2, [r7, #0]
 801477a:	fb02 f303 	mul.w	r3, r2, r3
 801477e:	4618      	mov	r0, r3
 8014780:	f007 ff24 	bl	801c5cc <pvPortMalloc>
 8014784:	60f8      	str	r0, [r7, #12]
  if (p != NULL) memset(p, 0, size * cnt);
 8014786:	68fb      	ldr	r3, [r7, #12]
 8014788:	2b00      	cmp	r3, #0
 801478a:	d008      	beq.n	801479e <_ZL9my_callocjj+0x32>
 801478c:	683b      	ldr	r3, [r7, #0]
 801478e:	687a      	ldr	r2, [r7, #4]
 8014790:	fb02 f303 	mul.w	r3, r2, r3
 8014794:	461a      	mov	r2, r3
 8014796:	2100      	movs	r1, #0
 8014798:	68f8      	ldr	r0, [r7, #12]
 801479a:	f021 fb29 	bl	8035df0 <memset>
  return p;
 801479e:	68fb      	ldr	r3, [r7, #12]
}
 80147a0:	4618      	mov	r0, r3
 80147a2:	3710      	adds	r7, #16
 80147a4:	46bd      	mov	sp, r7
 80147a6:	bd80      	pop	{r7, pc}

080147a8 <set_device_id>:
//char subscr_topik_template[] 	= {"%s_%s/sw%u/set"	};
char input_status_topik_temp[] 	= {"%s_%s/inputs"	};
char switch_status_topik_temp[] = {"%s_%s/switches"	};
const char io_template[] = {"{\"%s%u\" : \"%s\"}"};

mqtt_config_error set_device_id(const uint8_t* id, unsigned const int id_len){
 80147a8:	b580      	push	{r7, lr}
 80147aa:	b084      	sub	sp, #16
 80147ac:	af00      	add	r7, sp, #0
 80147ae:	6078      	str	r0, [r7, #4]
 80147b0:	6039      	str	r1, [r7, #0]

	if ( unical_id){
 80147b2:	4b1b      	ldr	r3, [pc, #108]	@ (8014820 <set_device_id+0x78>)
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d004      	beq.n	80147c4 <set_device_id+0x1c>
		free(unical_id);
 80147ba:	4b19      	ldr	r3, [pc, #100]	@ (8014820 <set_device_id+0x78>)
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	4618      	mov	r0, r3
 80147c0:	f007 ffd2 	bl	801c768 <vPortFree>
	}
    // Каждый байт будет преобразован в два символа + 1 символ для окончания строки
    unical_id = (char *) calloc(id_len * 2 + 1, sizeof(char));  // +1 для '\0'
 80147c4:	683b      	ldr	r3, [r7, #0]
 80147c6:	005b      	lsls	r3, r3, #1
 80147c8:	3301      	adds	r3, #1
 80147ca:	2101      	movs	r1, #1
 80147cc:	4618      	mov	r0, r3
 80147ce:	f7ff ffcd 	bl	801476c <_ZL9my_callocjj>
 80147d2:	4603      	mov	r3, r0
 80147d4:	4a12      	ldr	r2, [pc, #72]	@ (8014820 <set_device_id+0x78>)
 80147d6:	6013      	str	r3, [r2, #0]


	if (unical_id){
 80147d8:	4b11      	ldr	r3, [pc, #68]	@ (8014820 <set_device_id+0x78>)
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d017      	beq.n	8014810 <set_device_id+0x68>
        // Проходим по каждому байту идентификатора
        for (unsigned int i = 0; i < id_len; i++) {
 80147e0:	2300      	movs	r3, #0
 80147e2:	60fb      	str	r3, [r7, #12]
 80147e4:	e00f      	b.n	8014806 <set_device_id+0x5e>
            // Конвертируем каждый байт в два символа и добавляем в строку
            sprintf(&unical_id[i * 2], "%02X", id[i]);
 80147e6:	4b0e      	ldr	r3, [pc, #56]	@ (8014820 <set_device_id+0x78>)
 80147e8:	681a      	ldr	r2, [r3, #0]
 80147ea:	68fb      	ldr	r3, [r7, #12]
 80147ec:	005b      	lsls	r3, r3, #1
 80147ee:	18d0      	adds	r0, r2, r3
 80147f0:	687a      	ldr	r2, [r7, #4]
 80147f2:	68fb      	ldr	r3, [r7, #12]
 80147f4:	4413      	add	r3, r2
 80147f6:	781b      	ldrb	r3, [r3, #0]
 80147f8:	461a      	mov	r2, r3
 80147fa:	490a      	ldr	r1, [pc, #40]	@ (8014824 <set_device_id+0x7c>)
 80147fc:	f020 ff36 	bl	803566c <sprintf>
        for (unsigned int i = 0; i < id_len; i++) {
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	3301      	adds	r3, #1
 8014804:	60fb      	str	r3, [r7, #12]
 8014806:	68fa      	ldr	r2, [r7, #12]
 8014808:	683b      	ldr	r3, [r7, #0]
 801480a:	429a      	cmp	r2, r3
 801480c:	d3eb      	bcc.n	80147e6 <set_device_id+0x3e>
 801480e:	e002      	b.n	8014816 <set_device_id+0x6e>
        }
	}else{
        return MEM_ALLOC_ERR; // Ошибка выделения памяти
 8014810:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014814:	e000      	b.n	8014818 <set_device_id+0x70>
	}

	return NO_ERR; // Успешно
 8014816:	2300      	movs	r3, #0
}
 8014818:	4618      	mov	r0, r3
 801481a:	3710      	adds	r7, #16
 801481c:	46bd      	mov	sp, r7
 801481e:	bd80      	pop	{r7, pc}
 8014820:	20000b9c 	.word	0x20000b9c
 8014824:	08040454 	.word	0x08040454

08014828 <set_device_conf_ip>:

mqtt_config_error set_device_conf_ip(char * chr_ip, unsigned int ip_len){
 8014828:	b580      	push	{r7, lr}
 801482a:	b082      	sub	sp, #8
 801482c:	af00      	add	r7, sp, #0
 801482e:	6078      	str	r0, [r7, #4]
 8014830:	6039      	str	r1, [r7, #0]

	if(dev_conf_ip){
 8014832:	4b15      	ldr	r3, [pc, #84]	@ (8014888 <set_device_conf_ip+0x60>)
 8014834:	681b      	ldr	r3, [r3, #0]
 8014836:	2b00      	cmp	r3, #0
 8014838:	d004      	beq.n	8014844 <set_device_conf_ip+0x1c>
		free(dev_conf_ip);
 801483a:	4b13      	ldr	r3, [pc, #76]	@ (8014888 <set_device_conf_ip+0x60>)
 801483c:	681b      	ldr	r3, [r3, #0]
 801483e:	4618      	mov	r0, r3
 8014840:	f007 ff92 	bl	801c768 <vPortFree>
	}

	dev_conf_ip = (char *)calloc(ip_len+1, sizeof(char)); // +1 для нулевого символа
 8014844:	683b      	ldr	r3, [r7, #0]
 8014846:	3301      	adds	r3, #1
 8014848:	2101      	movs	r1, #1
 801484a:	4618      	mov	r0, r3
 801484c:	f7ff ff8e 	bl	801476c <_ZL9my_callocjj>
 8014850:	4603      	mov	r3, r0
 8014852:	4a0d      	ldr	r2, [pc, #52]	@ (8014888 <set_device_conf_ip+0x60>)
 8014854:	6013      	str	r3, [r2, #0]

	if(dev_conf_ip){
 8014856:	4b0c      	ldr	r3, [pc, #48]	@ (8014888 <set_device_conf_ip+0x60>)
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	2b00      	cmp	r3, #0
 801485c:	d00e      	beq.n	801487c <set_device_conf_ip+0x54>
		strncpy(dev_conf_ip, chr_ip, ip_len);
 801485e:	4b0a      	ldr	r3, [pc, #40]	@ (8014888 <set_device_conf_ip+0x60>)
 8014860:	681b      	ldr	r3, [r3, #0]
 8014862:	683a      	ldr	r2, [r7, #0]
 8014864:	6879      	ldr	r1, [r7, #4]
 8014866:	4618      	mov	r0, r3
 8014868:	f021 fb09 	bl	8035e7e <strncpy>
		dev_conf_ip[ip_len] = '\0'; // Явно добавляем нулевой символ
 801486c:	4b06      	ldr	r3, [pc, #24]	@ (8014888 <set_device_conf_ip+0x60>)
 801486e:	681a      	ldr	r2, [r3, #0]
 8014870:	683b      	ldr	r3, [r7, #0]
 8014872:	4413      	add	r3, r2
 8014874:	2200      	movs	r2, #0
 8014876:	701a      	strb	r2, [r3, #0]
	}else{
		return MEM_ALLOC_ERR; // Ошибка выделения памяти
	}

	return NO_ERR; // Успешно
 8014878:	2300      	movs	r3, #0
 801487a:	e001      	b.n	8014880 <set_device_conf_ip+0x58>
		return MEM_ALLOC_ERR; // Ошибка выделения памяти
 801487c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8014880:	4618      	mov	r0, r3
 8014882:	3708      	adds	r7, #8
 8014884:	46bd      	mov	sp, r7
 8014886:	bd80      	pop	{r7, pc}
 8014888:	20000ba0 	.word	0x20000ba0

0801488c <get_config_topik_string>:
 	strncpy(home_assistant_prefix, prefix_string, prefix_len);

	return 0;
}

int get_config_topik_string (char * buff, uint32_t buff_len, uint8_t topik_type, uint8_t obj_number){
 801488c:	b580      	push	{r7, lr}
 801488e:	b08a      	sub	sp, #40	@ 0x28
 8014890:	af06      	add	r7, sp, #24
 8014892:	60f8      	str	r0, [r7, #12]
 8014894:	60b9      	str	r1, [r7, #8]
 8014896:	4611      	mov	r1, r2
 8014898:	461a      	mov	r2, r3
 801489a:	460b      	mov	r3, r1
 801489c:	71fb      	strb	r3, [r7, #7]
 801489e:	4613      	mov	r3, r2
 80148a0:	71bb      	strb	r3, [r7, #6]

	strcpy(buff, "");
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	2200      	movs	r2, #0
 80148a6:	701a      	strb	r2, [r3, #0]
	switch (topik_type) {//%s/%s/%s_%s/%s%u/config
 80148a8:	79fb      	ldrb	r3, [r7, #7]
 80148aa:	3b01      	subs	r3, #1
 80148ac:	2b07      	cmp	r3, #7
 80148ae:	f200 80a3 	bhi.w	80149f8 <get_config_topik_string+0x16c>
 80148b2:	a201      	add	r2, pc, #4	@ (adr r2, 80148b8 <get_config_topik_string+0x2c>)
 80148b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148b8:	080148d9 	.word	0x080148d9
 80148bc:	080148fd 	.word	0x080148fd
 80148c0:	08014921 	.word	0x08014921
 80148c4:	08014969 	.word	0x08014969
 80148c8:	08014945 	.word	0x08014945
 80148cc:	080149b1 	.word	0x080149b1
 80148d0:	080149d5 	.word	0x080149d5
 80148d4:	0801498d 	.word	0x0801498d
		case INPUT_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_binary_sensor, dev_system, unical_id, component_input, obj_number);
 80148d8:	4b4b      	ldr	r3, [pc, #300]	@ (8014a08 <get_config_topik_string+0x17c>)
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	79ba      	ldrb	r2, [r7, #6]
 80148de:	9204      	str	r2, [sp, #16]
 80148e0:	4a4a      	ldr	r2, [pc, #296]	@ (8014a0c <get_config_topik_string+0x180>)
 80148e2:	9203      	str	r2, [sp, #12]
 80148e4:	9302      	str	r3, [sp, #8]
 80148e6:	4b4a      	ldr	r3, [pc, #296]	@ (8014a10 <get_config_topik_string+0x184>)
 80148e8:	9301      	str	r3, [sp, #4]
 80148ea:	4b4a      	ldr	r3, [pc, #296]	@ (8014a14 <get_config_topik_string+0x188>)
 80148ec:	9300      	str	r3, [sp, #0]
 80148ee:	4b4a      	ldr	r3, [pc, #296]	@ (8014a18 <get_config_topik_string+0x18c>)
 80148f0:	4a4a      	ldr	r2, [pc, #296]	@ (8014a1c <get_config_topik_string+0x190>)
 80148f2:	68b9      	ldr	r1, [r7, #8]
 80148f4:	68f8      	ldr	r0, [r7, #12]
 80148f6:	f020 fd51 	bl	803539c <snprintf>
			break;
 80148fa:	e080      	b.n	80149fe <get_config_topik_string+0x172>
		case OUTPUT_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_switch, dev_system, unical_id, dev_class_switch, obj_number);
 80148fc:	4b42      	ldr	r3, [pc, #264]	@ (8014a08 <get_config_topik_string+0x17c>)
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	79ba      	ldrb	r2, [r7, #6]
 8014902:	9204      	str	r2, [sp, #16]
 8014904:	4a46      	ldr	r2, [pc, #280]	@ (8014a20 <get_config_topik_string+0x194>)
 8014906:	9203      	str	r2, [sp, #12]
 8014908:	9302      	str	r3, [sp, #8]
 801490a:	4b41      	ldr	r3, [pc, #260]	@ (8014a10 <get_config_topik_string+0x184>)
 801490c:	9301      	str	r3, [sp, #4]
 801490e:	4b44      	ldr	r3, [pc, #272]	@ (8014a20 <get_config_topik_string+0x194>)
 8014910:	9300      	str	r3, [sp, #0]
 8014912:	4b41      	ldr	r3, [pc, #260]	@ (8014a18 <get_config_topik_string+0x18c>)
 8014914:	4a41      	ldr	r2, [pc, #260]	@ (8014a1c <get_config_topik_string+0x190>)
 8014916:	68b9      	ldr	r1, [r7, #8]
 8014918:	68f8      	ldr	r0, [r7, #12]
 801491a:	f020 fd3f 	bl	803539c <snprintf>
			break;
 801491e:	e06e      	b.n	80149fe <get_config_topik_string+0x172>
		case ENERGY_SENSOR_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_energy, obj_number);
 8014920:	4b39      	ldr	r3, [pc, #228]	@ (8014a08 <get_config_topik_string+0x17c>)
 8014922:	681b      	ldr	r3, [r3, #0]
 8014924:	79ba      	ldrb	r2, [r7, #6]
 8014926:	9204      	str	r2, [sp, #16]
 8014928:	4a3e      	ldr	r2, [pc, #248]	@ (8014a24 <get_config_topik_string+0x198>)
 801492a:	9203      	str	r2, [sp, #12]
 801492c:	9302      	str	r3, [sp, #8]
 801492e:	4b38      	ldr	r3, [pc, #224]	@ (8014a10 <get_config_topik_string+0x184>)
 8014930:	9301      	str	r3, [sp, #4]
 8014932:	4b3d      	ldr	r3, [pc, #244]	@ (8014a28 <get_config_topik_string+0x19c>)
 8014934:	9300      	str	r3, [sp, #0]
 8014936:	4b38      	ldr	r3, [pc, #224]	@ (8014a18 <get_config_topik_string+0x18c>)
 8014938:	4a38      	ldr	r2, [pc, #224]	@ (8014a1c <get_config_topik_string+0x190>)
 801493a:	68b9      	ldr	r1, [r7, #8]
 801493c:	68f8      	ldr	r0, [r7, #12]
 801493e:	f020 fd2d 	bl	803539c <snprintf>
			break;
 8014942:	e05c      	b.n	80149fe <get_config_topik_string+0x172>
		case VOLTAGE_SENSOR_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_voltage, obj_number);
 8014944:	4b30      	ldr	r3, [pc, #192]	@ (8014a08 <get_config_topik_string+0x17c>)
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	79ba      	ldrb	r2, [r7, #6]
 801494a:	9204      	str	r2, [sp, #16]
 801494c:	4a37      	ldr	r2, [pc, #220]	@ (8014a2c <get_config_topik_string+0x1a0>)
 801494e:	9203      	str	r2, [sp, #12]
 8014950:	9302      	str	r3, [sp, #8]
 8014952:	4b2f      	ldr	r3, [pc, #188]	@ (8014a10 <get_config_topik_string+0x184>)
 8014954:	9301      	str	r3, [sp, #4]
 8014956:	4b34      	ldr	r3, [pc, #208]	@ (8014a28 <get_config_topik_string+0x19c>)
 8014958:	9300      	str	r3, [sp, #0]
 801495a:	4b2f      	ldr	r3, [pc, #188]	@ (8014a18 <get_config_topik_string+0x18c>)
 801495c:	4a2f      	ldr	r2, [pc, #188]	@ (8014a1c <get_config_topik_string+0x190>)
 801495e:	68b9      	ldr	r1, [r7, #8]
 8014960:	68f8      	ldr	r0, [r7, #12]
 8014962:	f020 fd1b 	bl	803539c <snprintf>
			break;
 8014966:	e04a      	b.n	80149fe <get_config_topik_string+0x172>
		case POWER_SENSOR_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power, obj_number);
 8014968:	4b27      	ldr	r3, [pc, #156]	@ (8014a08 <get_config_topik_string+0x17c>)
 801496a:	681b      	ldr	r3, [r3, #0]
 801496c:	79ba      	ldrb	r2, [r7, #6]
 801496e:	9204      	str	r2, [sp, #16]
 8014970:	4a2f      	ldr	r2, [pc, #188]	@ (8014a30 <get_config_topik_string+0x1a4>)
 8014972:	9203      	str	r2, [sp, #12]
 8014974:	9302      	str	r3, [sp, #8]
 8014976:	4b26      	ldr	r3, [pc, #152]	@ (8014a10 <get_config_topik_string+0x184>)
 8014978:	9301      	str	r3, [sp, #4]
 801497a:	4b2b      	ldr	r3, [pc, #172]	@ (8014a28 <get_config_topik_string+0x19c>)
 801497c:	9300      	str	r3, [sp, #0]
 801497e:	4b26      	ldr	r3, [pc, #152]	@ (8014a18 <get_config_topik_string+0x18c>)
 8014980:	4a26      	ldr	r2, [pc, #152]	@ (8014a1c <get_config_topik_string+0x190>)
 8014982:	68b9      	ldr	r1, [r7, #8]
 8014984:	68f8      	ldr	r0, [r7, #12]
 8014986:	f020 fd09 	bl	803539c <snprintf>
			break;
 801498a:	e038      	b.n	80149fe <get_config_topik_string+0x172>
		case APPARENT_POWER_SENSOR_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_apparent_power, obj_number);
 801498c:	4b1e      	ldr	r3, [pc, #120]	@ (8014a08 <get_config_topik_string+0x17c>)
 801498e:	681b      	ldr	r3, [r3, #0]
 8014990:	79ba      	ldrb	r2, [r7, #6]
 8014992:	9204      	str	r2, [sp, #16]
 8014994:	4a27      	ldr	r2, [pc, #156]	@ (8014a34 <get_config_topik_string+0x1a8>)
 8014996:	9203      	str	r2, [sp, #12]
 8014998:	9302      	str	r3, [sp, #8]
 801499a:	4b1d      	ldr	r3, [pc, #116]	@ (8014a10 <get_config_topik_string+0x184>)
 801499c:	9301      	str	r3, [sp, #4]
 801499e:	4b22      	ldr	r3, [pc, #136]	@ (8014a28 <get_config_topik_string+0x19c>)
 80149a0:	9300      	str	r3, [sp, #0]
 80149a2:	4b1d      	ldr	r3, [pc, #116]	@ (8014a18 <get_config_topik_string+0x18c>)
 80149a4:	4a1d      	ldr	r2, [pc, #116]	@ (8014a1c <get_config_topik_string+0x190>)
 80149a6:	68b9      	ldr	r1, [r7, #8]
 80149a8:	68f8      	ldr	r0, [r7, #12]
 80149aa:	f020 fcf7 	bl	803539c <snprintf>
			break;
 80149ae:	e026      	b.n	80149fe <get_config_topik_string+0x172>
		case POWER_FACTOR_SENSOR_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power_factor, obj_number);
 80149b0:	4b15      	ldr	r3, [pc, #84]	@ (8014a08 <get_config_topik_string+0x17c>)
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	79ba      	ldrb	r2, [r7, #6]
 80149b6:	9204      	str	r2, [sp, #16]
 80149b8:	4a1f      	ldr	r2, [pc, #124]	@ (8014a38 <get_config_topik_string+0x1ac>)
 80149ba:	9203      	str	r2, [sp, #12]
 80149bc:	9302      	str	r3, [sp, #8]
 80149be:	4b14      	ldr	r3, [pc, #80]	@ (8014a10 <get_config_topik_string+0x184>)
 80149c0:	9301      	str	r3, [sp, #4]
 80149c2:	4b19      	ldr	r3, [pc, #100]	@ (8014a28 <get_config_topik_string+0x19c>)
 80149c4:	9300      	str	r3, [sp, #0]
 80149c6:	4b14      	ldr	r3, [pc, #80]	@ (8014a18 <get_config_topik_string+0x18c>)
 80149c8:	4a14      	ldr	r2, [pc, #80]	@ (8014a1c <get_config_topik_string+0x190>)
 80149ca:	68b9      	ldr	r1, [r7, #8]
 80149cc:	68f8      	ldr	r0, [r7, #12]
 80149ce:	f020 fce5 	bl	803539c <snprintf>
			break;
 80149d2:	e014      	b.n	80149fe <get_config_topik_string+0x172>
		case CURRENT_SENSOR_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_current, obj_number);
 80149d4:	4b0c      	ldr	r3, [pc, #48]	@ (8014a08 <get_config_topik_string+0x17c>)
 80149d6:	681b      	ldr	r3, [r3, #0]
 80149d8:	79ba      	ldrb	r2, [r7, #6]
 80149da:	9204      	str	r2, [sp, #16]
 80149dc:	4a17      	ldr	r2, [pc, #92]	@ (8014a3c <get_config_topik_string+0x1b0>)
 80149de:	9203      	str	r2, [sp, #12]
 80149e0:	9302      	str	r3, [sp, #8]
 80149e2:	4b0b      	ldr	r3, [pc, #44]	@ (8014a10 <get_config_topik_string+0x184>)
 80149e4:	9301      	str	r3, [sp, #4]
 80149e6:	4b10      	ldr	r3, [pc, #64]	@ (8014a28 <get_config_topik_string+0x19c>)
 80149e8:	9300      	str	r3, [sp, #0]
 80149ea:	4b0b      	ldr	r3, [pc, #44]	@ (8014a18 <get_config_topik_string+0x18c>)
 80149ec:	4a0b      	ldr	r2, [pc, #44]	@ (8014a1c <get_config_topik_string+0x190>)
 80149ee:	68b9      	ldr	r1, [r7, #8]
 80149f0:	68f8      	ldr	r0, [r7, #12]
 80149f2:	f020 fcd3 	bl	803539c <snprintf>
			break;
 80149f6:	e002      	b.n	80149fe <get_config_topik_string+0x172>
		default:
			return -1;
 80149f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80149fc:	e000      	b.n	8014a00 <get_config_topik_string+0x174>
			break;
	}


	return 0;
 80149fe:	2300      	movs	r3, #0
}
 8014a00:	4618      	mov	r0, r3
 8014a02:	3710      	adds	r7, #16
 8014a04:	46bd      	mov	sp, r7
 8014a06:	bd80      	pop	{r7, pc}
 8014a08:	20000b9c 	.word	0x20000b9c
 8014a0c:	08040474 	.word	0x08040474
 8014a10:	0804047c 	.word	0x0804047c
 8014a14:	08040484 	.word	0x08040484
 8014a18:	20000064 	.word	0x20000064
 8014a1c:	0804045c 	.word	0x0804045c
 8014a20:	08040494 	.word	0x08040494
 8014a24:	0804049c 	.word	0x0804049c
 8014a28:	080404a4 	.word	0x080404a4
 8014a2c:	080404ac 	.word	0x080404ac
 8014a30:	080404b4 	.word	0x080404b4
 8014a34:	080404bc 	.word	0x080404bc
 8014a38:	080404cc 	.word	0x080404cc
 8014a3c:	080404dc 	.word	0x080404dc

08014a40 <get_config_payload_string>:

int get_config_payload_string( char * payload, uint32_t payload_len, uint8_t payload_type, uint8_t obj_number){
 8014a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a42:	b09f      	sub	sp, #124	@ 0x7c
 8014a44:	af16      	add	r7, sp, #88	@ 0x58
 8014a46:	60f8      	str	r0, [r7, #12]
 8014a48:	60b9      	str	r1, [r7, #8]
 8014a4a:	4611      	mov	r1, r2
 8014a4c:	461a      	mov	r2, r3
 8014a4e:	460b      	mov	r3, r1
 8014a50:	71fb      	strb	r3, [r7, #7]
 8014a52:	4613      	mov	r3, r2
 8014a54:	71bb      	strb	r3, [r7, #6]

	uint8_t len = 0;
 8014a56:	2300      	movs	r3, #0
 8014a58:	77fb      	strb	r3, [r7, #31]
	char * name      = NULL;
 8014a5a:	2300      	movs	r3, #0
 8014a5c:	61bb      	str	r3, [r7, #24]
	char * com_topik = NULL;
 8014a5e:	2300      	movs	r3, #0
 8014a60:	617b      	str	r3, [r7, #20]
	memset(payload, 0, payload_len * sizeof(char));
 8014a62:	68ba      	ldr	r2, [r7, #8]
 8014a64:	2100      	movs	r1, #0
 8014a66:	68f8      	ldr	r0, [r7, #12]
 8014a68:	f021 f9c2 	bl	8035df0 <memset>

	switch (payload_type) {
 8014a6c:	79fb      	ldrb	r3, [r7, #7]
 8014a6e:	3b01      	subs	r3, #1
 8014a70:	2b07      	cmp	r3, #7
 8014a72:	f200 820f 	bhi.w	8014e94 <get_config_payload_string+0x454>
 8014a76:	a201      	add	r2, pc, #4	@ (adr r2, 8014a7c <get_config_payload_string+0x3c>)
 8014a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a7c:	08014a9d 	.word	0x08014a9d
 8014a80:	08014b2d 	.word	0x08014b2d
 8014a84:	08014bf7 	.word	0x08014bf7
 8014a88:	08014d1d 	.word	0x08014d1d
 8014a8c:	08014c55 	.word	0x08014c55
 8014a90:	08014dd9 	.word	0x08014dd9
 8014a94:	08014e37 	.word	0x08014e37
 8014a98:	08014d7b 	.word	0x08014d7b

		case INP_CONF_PAYLOAD:

			name = (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 8014a9c:	2101      	movs	r1, #1
 8014a9e:	2080      	movs	r0, #128	@ 0x80
 8014aa0:	f7ff fe64 	bl	801476c <_ZL9my_callocjj>
 8014aa4:	61b8      	str	r0, [r7, #24]
			snprintf(name, MQTT_TOPIK_MAX_LEN, "%s %u", component_input_human, obj_number);
 8014aa6:	79bb      	ldrb	r3, [r7, #6]
 8014aa8:	9300      	str	r3, [sp, #0]
 8014aaa:	4b82      	ldr	r3, [pc, #520]	@ (8014cb4 <get_config_payload_string+0x274>)
 8014aac:	4a82      	ldr	r2, [pc, #520]	@ (8014cb8 <get_config_payload_string+0x278>)
 8014aae:	2180      	movs	r1, #128	@ 0x80
 8014ab0:	69b8      	ldr	r0, [r7, #24]
 8014ab2:	f020 fc73 	bl	803539c <snprintf>

		    len = snprintf(payload, payload_len, universal_conf_template, dev_class_power, dev_system, \
 8014ab6:	4b81      	ldr	r3, [pc, #516]	@ (8014cbc <get_config_payload_string+0x27c>)
 8014ab8:	681b      	ldr	r3, [r3, #0]
 8014aba:	79ba      	ldrb	r2, [r7, #6]
 8014abc:	79b9      	ldrb	r1, [r7, #6]
 8014abe:	487f      	ldr	r0, [pc, #508]	@ (8014cbc <get_config_payload_string+0x27c>)
 8014ac0:	6800      	ldr	r0, [r0, #0]
 8014ac2:	79bc      	ldrb	r4, [r7, #6]
 8014ac4:	4d7d      	ldr	r5, [pc, #500]	@ (8014cbc <get_config_payload_string+0x27c>)
 8014ac6:	682d      	ldr	r5, [r5, #0]
 8014ac8:	4e7d      	ldr	r6, [pc, #500]	@ (8014cc0 <get_config_payload_string+0x280>)
 8014aca:	6836      	ldr	r6, [r6, #0]
 8014acc:	9614      	str	r6, [sp, #80]	@ 0x50
 8014ace:	4e7d      	ldr	r6, [pc, #500]	@ (8014cc4 <get_config_payload_string+0x284>)
 8014ad0:	9613      	str	r6, [sp, #76]	@ 0x4c
 8014ad2:	4e7c      	ldr	r6, [pc, #496]	@ (8014cc4 <get_config_payload_string+0x284>)
 8014ad4:	9612      	str	r6, [sp, #72]	@ 0x48
 8014ad6:	4e7c      	ldr	r6, [pc, #496]	@ (8014cc8 <get_config_payload_string+0x288>)
 8014ad8:	9611      	str	r6, [sp, #68]	@ 0x44
 8014ada:	4e7c      	ldr	r6, [pc, #496]	@ (8014ccc <get_config_payload_string+0x28c>)
 8014adc:	9610      	str	r6, [sp, #64]	@ 0x40
 8014ade:	4e7c      	ldr	r6, [pc, #496]	@ (8014cd0 <get_config_payload_string+0x290>)
 8014ae0:	960f      	str	r6, [sp, #60]	@ 0x3c
 8014ae2:	950e      	str	r5, [sp, #56]	@ 0x38
 8014ae4:	4d7b      	ldr	r5, [pc, #492]	@ (8014cd4 <get_config_payload_string+0x294>)
 8014ae6:	950d      	str	r5, [sp, #52]	@ 0x34
 8014ae8:	4d7b      	ldr	r5, [pc, #492]	@ (8014cd8 <get_config_payload_string+0x298>)
 8014aea:	950c      	str	r5, [sp, #48]	@ 0x30
 8014aec:	940b      	str	r4, [sp, #44]	@ 0x2c
 8014aee:	4c7b      	ldr	r4, [pc, #492]	@ (8014cdc <get_config_payload_string+0x29c>)
 8014af0:	940a      	str	r4, [sp, #40]	@ 0x28
 8014af2:	9009      	str	r0, [sp, #36]	@ 0x24
 8014af4:	4877      	ldr	r0, [pc, #476]	@ (8014cd4 <get_config_payload_string+0x294>)
 8014af6:	9008      	str	r0, [sp, #32]
 8014af8:	69b8      	ldr	r0, [r7, #24]
 8014afa:	9007      	str	r0, [sp, #28]
 8014afc:	4878      	ldr	r0, [pc, #480]	@ (8014ce0 <get_config_payload_string+0x2a0>)
 8014afe:	9006      	str	r0, [sp, #24]
 8014b00:	9105      	str	r1, [sp, #20]
 8014b02:	4976      	ldr	r1, [pc, #472]	@ (8014cdc <get_config_payload_string+0x29c>)
 8014b04:	9104      	str	r1, [sp, #16]
 8014b06:	9203      	str	r2, [sp, #12]
 8014b08:	4a74      	ldr	r2, [pc, #464]	@ (8014cdc <get_config_payload_string+0x29c>)
 8014b0a:	9202      	str	r2, [sp, #8]
 8014b0c:	9301      	str	r3, [sp, #4]
 8014b0e:	4b71      	ldr	r3, [pc, #452]	@ (8014cd4 <get_config_payload_string+0x294>)
 8014b10:	9300      	str	r3, [sp, #0]
 8014b12:	4b74      	ldr	r3, [pc, #464]	@ (8014ce4 <get_config_payload_string+0x2a4>)
 8014b14:	4a74      	ldr	r2, [pc, #464]	@ (8014ce8 <get_config_payload_string+0x2a8>)
 8014b16:	68b9      	ldr	r1, [r7, #8]
 8014b18:	68f8      	ldr	r0, [r7, #12]
 8014b1a:	f020 fc3f 	bl	803539c <snprintf>
 8014b1e:	4603      	mov	r3, r0
 8014b20:	77fb      	strb	r3, [r7, #31]
							unical_id, component_input, obj_number, component_input, obj_number, "\n", \
							name, dev_system, unical_id, \
		                    component_input, obj_number,"",dev_system, unical_id, dev_common_name, dev_model_name, \
		                    dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
		    free(name);
 8014b22:	69b8      	ldr	r0, [r7, #24]
 8014b24:	f007 fe20 	bl	801c768 <vPortFree>

			return len;
 8014b28:	7ffb      	ldrb	r3, [r7, #31]
 8014b2a:	e1b6      	b.n	8014e9a <get_config_payload_string+0x45a>
			break;

		case OUT_CONF_PAYLOAD:

			name =      (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 8014b2c:	2101      	movs	r1, #1
 8014b2e:	2080      	movs	r0, #128	@ 0x80
 8014b30:	f7ff fe1c 	bl	801476c <_ZL9my_callocjj>
 8014b34:	61b8      	str	r0, [r7, #24]
			com_topik = (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 8014b36:	2101      	movs	r1, #1
 8014b38:	2080      	movs	r0, #128	@ 0x80
 8014b3a:	f7ff fe17 	bl	801476c <_ZL9my_callocjj>
 8014b3e:	6178      	str	r0, [r7, #20]

			snprintf(name,      MQTT_TOPIK_MAX_LEN, "%s%u", component_switch, obj_number);
 8014b40:	79bb      	ldrb	r3, [r7, #6]
 8014b42:	9300      	str	r3, [sp, #0]
 8014b44:	4b69      	ldr	r3, [pc, #420]	@ (8014cec <get_config_payload_string+0x2ac>)
 8014b46:	4a6a      	ldr	r2, [pc, #424]	@ (8014cf0 <get_config_payload_string+0x2b0>)
 8014b48:	2180      	movs	r1, #128	@ 0x80
 8014b4a:	69b8      	ldr	r0, [r7, #24]
 8014b4c:	f020 fc26 	bl	803539c <snprintf>
			snprintf(com_topik, MQTT_TOPIK_MAX_LEN, universal_conf_template_comand_topik_part, dev_system, unical_id, name, "");
 8014b50:	4b5a      	ldr	r3, [pc, #360]	@ (8014cbc <get_config_payload_string+0x27c>)
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	4a60      	ldr	r2, [pc, #384]	@ (8014cd8 <get_config_payload_string+0x298>)
 8014b56:	9202      	str	r2, [sp, #8]
 8014b58:	69ba      	ldr	r2, [r7, #24]
 8014b5a:	9201      	str	r2, [sp, #4]
 8014b5c:	9300      	str	r3, [sp, #0]
 8014b5e:	4b5d      	ldr	r3, [pc, #372]	@ (8014cd4 <get_config_payload_string+0x294>)
 8014b60:	4a64      	ldr	r2, [pc, #400]	@ (8014cf4 <get_config_payload_string+0x2b4>)
 8014b62:	2180      	movs	r1, #128	@ 0x80
 8014b64:	6978      	ldr	r0, [r7, #20]
 8014b66:	f020 fc19 	bl	803539c <snprintf>
			snprintf(name,      MQTT_TOPIK_MAX_LEN, "%s %u", dev_class_switch_human, obj_number);
 8014b6a:	79bb      	ldrb	r3, [r7, #6]
 8014b6c:	9300      	str	r3, [sp, #0]
 8014b6e:	4b62      	ldr	r3, [pc, #392]	@ (8014cf8 <get_config_payload_string+0x2b8>)
 8014b70:	4a51      	ldr	r2, [pc, #324]	@ (8014cb8 <get_config_payload_string+0x278>)
 8014b72:	2180      	movs	r1, #128	@ 0x80
 8014b74:	69b8      	ldr	r0, [r7, #24]
 8014b76:	f020 fc11 	bl	803539c <snprintf>

			len = snprintf(payload, payload_len, universal_conf_template, dev_class_switch, dev_system, \
 8014b7a:	4b50      	ldr	r3, [pc, #320]	@ (8014cbc <get_config_payload_string+0x27c>)
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	79ba      	ldrb	r2, [r7, #6]
 8014b80:	79b9      	ldrb	r1, [r7, #6]
 8014b82:	484e      	ldr	r0, [pc, #312]	@ (8014cbc <get_config_payload_string+0x27c>)
 8014b84:	6800      	ldr	r0, [r0, #0]
 8014b86:	79bc      	ldrb	r4, [r7, #6]
 8014b88:	4d4c      	ldr	r5, [pc, #304]	@ (8014cbc <get_config_payload_string+0x27c>)
 8014b8a:	682d      	ldr	r5, [r5, #0]
 8014b8c:	4e4c      	ldr	r6, [pc, #304]	@ (8014cc0 <get_config_payload_string+0x280>)
 8014b8e:	6836      	ldr	r6, [r6, #0]
 8014b90:	9614      	str	r6, [sp, #80]	@ 0x50
 8014b92:	4e4c      	ldr	r6, [pc, #304]	@ (8014cc4 <get_config_payload_string+0x284>)
 8014b94:	9613      	str	r6, [sp, #76]	@ 0x4c
 8014b96:	4e4b      	ldr	r6, [pc, #300]	@ (8014cc4 <get_config_payload_string+0x284>)
 8014b98:	9612      	str	r6, [sp, #72]	@ 0x48
 8014b9a:	4e4b      	ldr	r6, [pc, #300]	@ (8014cc8 <get_config_payload_string+0x288>)
 8014b9c:	9611      	str	r6, [sp, #68]	@ 0x44
 8014b9e:	4e4b      	ldr	r6, [pc, #300]	@ (8014ccc <get_config_payload_string+0x28c>)
 8014ba0:	9610      	str	r6, [sp, #64]	@ 0x40
 8014ba2:	4e4b      	ldr	r6, [pc, #300]	@ (8014cd0 <get_config_payload_string+0x290>)
 8014ba4:	960f      	str	r6, [sp, #60]	@ 0x3c
 8014ba6:	950e      	str	r5, [sp, #56]	@ 0x38
 8014ba8:	4d4a      	ldr	r5, [pc, #296]	@ (8014cd4 <get_config_payload_string+0x294>)
 8014baa:	950d      	str	r5, [sp, #52]	@ 0x34
 8014bac:	4d4a      	ldr	r5, [pc, #296]	@ (8014cd8 <get_config_payload_string+0x298>)
 8014bae:	950c      	str	r5, [sp, #48]	@ 0x30
 8014bb0:	940b      	str	r4, [sp, #44]	@ 0x2c
 8014bb2:	4c4e      	ldr	r4, [pc, #312]	@ (8014cec <get_config_payload_string+0x2ac>)
 8014bb4:	940a      	str	r4, [sp, #40]	@ 0x28
 8014bb6:	9009      	str	r0, [sp, #36]	@ 0x24
 8014bb8:	4846      	ldr	r0, [pc, #280]	@ (8014cd4 <get_config_payload_string+0x294>)
 8014bba:	9008      	str	r0, [sp, #32]
 8014bbc:	69b8      	ldr	r0, [r7, #24]
 8014bbe:	9007      	str	r0, [sp, #28]
 8014bc0:	6978      	ldr	r0, [r7, #20]
 8014bc2:	9006      	str	r0, [sp, #24]
 8014bc4:	9105      	str	r1, [sp, #20]
 8014bc6:	4949      	ldr	r1, [pc, #292]	@ (8014cec <get_config_payload_string+0x2ac>)
 8014bc8:	9104      	str	r1, [sp, #16]
 8014bca:	9203      	str	r2, [sp, #12]
 8014bcc:	4a47      	ldr	r2, [pc, #284]	@ (8014cec <get_config_payload_string+0x2ac>)
 8014bce:	9202      	str	r2, [sp, #8]
 8014bd0:	9301      	str	r3, [sp, #4]
 8014bd2:	4b40      	ldr	r3, [pc, #256]	@ (8014cd4 <get_config_payload_string+0x294>)
 8014bd4:	9300      	str	r3, [sp, #0]
 8014bd6:	4b45      	ldr	r3, [pc, #276]	@ (8014cec <get_config_payload_string+0x2ac>)
 8014bd8:	4a43      	ldr	r2, [pc, #268]	@ (8014ce8 <get_config_payload_string+0x2a8>)
 8014bda:	68b9      	ldr	r1, [r7, #8]
 8014bdc:	68f8      	ldr	r0, [r7, #12]
 8014bde:	f020 fbdd 	bl	803539c <snprintf>
 8014be2:	4603      	mov	r3, r0
 8014be4:	77fb      	strb	r3, [r7, #31]
							unical_id, component_switch, obj_number, component_switch, obj_number, com_topik, \
							name, dev_system, unical_id, \
							component_switch, obj_number,"",dev_system, unical_id, dev_common_name, dev_model_name, \
							dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			//len = sprintf(payload, switch_conf_payload_templ, unical_id, unical_id, obj_number, obj_number, obj_number, unical_id, obj_number, unical_id, unical_id, dev_conf_ip);
			free(name);
 8014be6:	69b8      	ldr	r0, [r7, #24]
 8014be8:	f007 fdbe 	bl	801c768 <vPortFree>
			free(com_topik);
 8014bec:	6978      	ldr	r0, [r7, #20]
 8014bee:	f007 fdbb 	bl	801c768 <vPortFree>

			return len;
 8014bf2:	7ffb      	ldrb	r3, [r7, #31]
 8014bf4:	e151      	b.n	8014e9a <get_config_payload_string+0x45a>
			break;

		case ENERGY_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_energy, dev_system, \
 8014bf6:	4b31      	ldr	r3, [pc, #196]	@ (8014cbc <get_config_payload_string+0x27c>)
 8014bf8:	681b      	ldr	r3, [r3, #0]
 8014bfa:	4a30      	ldr	r2, [pc, #192]	@ (8014cbc <get_config_payload_string+0x27c>)
 8014bfc:	6812      	ldr	r2, [r2, #0]
 8014bfe:	492f      	ldr	r1, [pc, #188]	@ (8014cbc <get_config_payload_string+0x27c>)
 8014c00:	6809      	ldr	r1, [r1, #0]
 8014c02:	482f      	ldr	r0, [pc, #188]	@ (8014cc0 <get_config_payload_string+0x280>)
 8014c04:	6800      	ldr	r0, [r0, #0]
 8014c06:	9010      	str	r0, [sp, #64]	@ 0x40
 8014c08:	482e      	ldr	r0, [pc, #184]	@ (8014cc4 <get_config_payload_string+0x284>)
 8014c0a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8014c0c:	482d      	ldr	r0, [pc, #180]	@ (8014cc4 <get_config_payload_string+0x284>)
 8014c0e:	900e      	str	r0, [sp, #56]	@ 0x38
 8014c10:	482d      	ldr	r0, [pc, #180]	@ (8014cc8 <get_config_payload_string+0x288>)
 8014c12:	900d      	str	r0, [sp, #52]	@ 0x34
 8014c14:	482d      	ldr	r0, [pc, #180]	@ (8014ccc <get_config_payload_string+0x28c>)
 8014c16:	900c      	str	r0, [sp, #48]	@ 0x30
 8014c18:	482d      	ldr	r0, [pc, #180]	@ (8014cd0 <get_config_payload_string+0x290>)
 8014c1a:	900b      	str	r0, [sp, #44]	@ 0x2c
 8014c1c:	910a      	str	r1, [sp, #40]	@ 0x28
 8014c1e:	492d      	ldr	r1, [pc, #180]	@ (8014cd4 <get_config_payload_string+0x294>)
 8014c20:	9109      	str	r1, [sp, #36]	@ 0x24
 8014c22:	4936      	ldr	r1, [pc, #216]	@ (8014cfc <get_config_payload_string+0x2bc>)
 8014c24:	9108      	str	r1, [sp, #32]
 8014c26:	4936      	ldr	r1, [pc, #216]	@ (8014d00 <get_config_payload_string+0x2c0>)
 8014c28:	9107      	str	r1, [sp, #28]
 8014c2a:	9206      	str	r2, [sp, #24]
 8014c2c:	4a29      	ldr	r2, [pc, #164]	@ (8014cd4 <get_config_payload_string+0x294>)
 8014c2e:	9205      	str	r2, [sp, #20]
 8014c30:	4a34      	ldr	r2, [pc, #208]	@ (8014d04 <get_config_payload_string+0x2c4>)
 8014c32:	9204      	str	r2, [sp, #16]
 8014c34:	4a34      	ldr	r2, [pc, #208]	@ (8014d08 <get_config_payload_string+0x2c8>)
 8014c36:	9203      	str	r2, [sp, #12]
 8014c38:	4a31      	ldr	r2, [pc, #196]	@ (8014d00 <get_config_payload_string+0x2c0>)
 8014c3a:	9202      	str	r2, [sp, #8]
 8014c3c:	4a33      	ldr	r2, [pc, #204]	@ (8014d0c <get_config_payload_string+0x2cc>)
 8014c3e:	9201      	str	r2, [sp, #4]
 8014c40:	9300      	str	r3, [sp, #0]
 8014c42:	4b24      	ldr	r3, [pc, #144]	@ (8014cd4 <get_config_payload_string+0x294>)
 8014c44:	4a2e      	ldr	r2, [pc, #184]	@ (8014d00 <get_config_payload_string+0x2c0>)
 8014c46:	4928      	ldr	r1, [pc, #160]	@ (8014ce8 <get_config_payload_string+0x2a8>)
 8014c48:	68f8      	ldr	r0, [r7, #12]
 8014c4a:	f020 fd0f 	bl	803566c <sprintf>
 8014c4e:	4603      	mov	r3, r0
 8014c50:	77fb      	strb	r3, [r7, #31]
					unical_id, state_topik, dev_class_energy, dev_class_energy_state, dev_class_energy_human, dev_system, unical_id, \
					dev_class_energy, dev_class_energy_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8014c52:	e122      	b.n	8014e9a <get_config_payload_string+0x45a>
		case VOLTAGE_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_voltage, dev_system, \
 8014c54:	4b19      	ldr	r3, [pc, #100]	@ (8014cbc <get_config_payload_string+0x27c>)
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	4a18      	ldr	r2, [pc, #96]	@ (8014cbc <get_config_payload_string+0x27c>)
 8014c5a:	6812      	ldr	r2, [r2, #0]
 8014c5c:	4917      	ldr	r1, [pc, #92]	@ (8014cbc <get_config_payload_string+0x27c>)
 8014c5e:	6809      	ldr	r1, [r1, #0]
 8014c60:	4817      	ldr	r0, [pc, #92]	@ (8014cc0 <get_config_payload_string+0x280>)
 8014c62:	6800      	ldr	r0, [r0, #0]
 8014c64:	9010      	str	r0, [sp, #64]	@ 0x40
 8014c66:	4817      	ldr	r0, [pc, #92]	@ (8014cc4 <get_config_payload_string+0x284>)
 8014c68:	900f      	str	r0, [sp, #60]	@ 0x3c
 8014c6a:	4816      	ldr	r0, [pc, #88]	@ (8014cc4 <get_config_payload_string+0x284>)
 8014c6c:	900e      	str	r0, [sp, #56]	@ 0x38
 8014c6e:	4816      	ldr	r0, [pc, #88]	@ (8014cc8 <get_config_payload_string+0x288>)
 8014c70:	900d      	str	r0, [sp, #52]	@ 0x34
 8014c72:	4816      	ldr	r0, [pc, #88]	@ (8014ccc <get_config_payload_string+0x28c>)
 8014c74:	900c      	str	r0, [sp, #48]	@ 0x30
 8014c76:	4816      	ldr	r0, [pc, #88]	@ (8014cd0 <get_config_payload_string+0x290>)
 8014c78:	900b      	str	r0, [sp, #44]	@ 0x2c
 8014c7a:	910a      	str	r1, [sp, #40]	@ 0x28
 8014c7c:	4915      	ldr	r1, [pc, #84]	@ (8014cd4 <get_config_payload_string+0x294>)
 8014c7e:	9109      	str	r1, [sp, #36]	@ 0x24
 8014c80:	4923      	ldr	r1, [pc, #140]	@ (8014d10 <get_config_payload_string+0x2d0>)
 8014c82:	9108      	str	r1, [sp, #32]
 8014c84:	4923      	ldr	r1, [pc, #140]	@ (8014d14 <get_config_payload_string+0x2d4>)
 8014c86:	9107      	str	r1, [sp, #28]
 8014c88:	9206      	str	r2, [sp, #24]
 8014c8a:	4a12      	ldr	r2, [pc, #72]	@ (8014cd4 <get_config_payload_string+0x294>)
 8014c8c:	9205      	str	r2, [sp, #20]
 8014c8e:	4a22      	ldr	r2, [pc, #136]	@ (8014d18 <get_config_payload_string+0x2d8>)
 8014c90:	9204      	str	r2, [sp, #16]
 8014c92:	4a13      	ldr	r2, [pc, #76]	@ (8014ce0 <get_config_payload_string+0x2a0>)
 8014c94:	9203      	str	r2, [sp, #12]
 8014c96:	4a1f      	ldr	r2, [pc, #124]	@ (8014d14 <get_config_payload_string+0x2d4>)
 8014c98:	9202      	str	r2, [sp, #8]
 8014c9a:	4a1c      	ldr	r2, [pc, #112]	@ (8014d0c <get_config_payload_string+0x2cc>)
 8014c9c:	9201      	str	r2, [sp, #4]
 8014c9e:	9300      	str	r3, [sp, #0]
 8014ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8014cd4 <get_config_payload_string+0x294>)
 8014ca2:	4a1c      	ldr	r2, [pc, #112]	@ (8014d14 <get_config_payload_string+0x2d4>)
 8014ca4:	4910      	ldr	r1, [pc, #64]	@ (8014ce8 <get_config_payload_string+0x2a8>)
 8014ca6:	68f8      	ldr	r0, [r7, #12]
 8014ca8:	f020 fce0 	bl	803566c <sprintf>
 8014cac:	4603      	mov	r3, r0
 8014cae:	77fb      	strb	r3, [r7, #31]
					unical_id, state_topik, dev_class_voltage, "\n", dev_class_voltage_human, dev_system, unical_id, \
					dev_class_voltage, dev_class_voltage_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8014cb0:	e0f3      	b.n	8014e9a <get_config_payload_string+0x45a>
 8014cb2:	bf00      	nop
 8014cb4:	080404e4 	.word	0x080404e4
 8014cb8:	080404f0 	.word	0x080404f0
 8014cbc:	20000b9c 	.word	0x20000b9c
 8014cc0:	20000ba0 	.word	0x20000ba0
 8014cc4:	080404f8 	.word	0x080404f8
 8014cc8:	080404fc 	.word	0x080404fc
 8014ccc:	0804050c 	.word	0x0804050c
 8014cd0:	08040520 	.word	0x08040520
 8014cd4:	0804047c 	.word	0x0804047c
 8014cd8:	0804052c 	.word	0x0804052c
 8014cdc:	08040474 	.word	0x08040474
 8014ce0:	08040530 	.word	0x08040530
 8014ce4:	080404b4 	.word	0x080404b4
 8014ce8:	08043740 	.word	0x08043740
 8014cec:	08040494 	.word	0x08040494
 8014cf0:	08040534 	.word	0x08040534
 8014cf4:	080438c0 	.word	0x080438c0
 8014cf8:	0804053c 	.word	0x0804053c
 8014cfc:	08040550 	.word	0x08040550
 8014d00:	0804049c 	.word	0x0804049c
 8014d04:	08040554 	.word	0x08040554
 8014d08:	08040564 	.word	0x08040564
 8014d0c:	08040588 	.word	0x08040588
 8014d10:	08040590 	.word	0x08040590
 8014d14:	080404ac 	.word	0x080404ac
 8014d18:	08040594 	.word	0x08040594
		case POWER_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_power, dev_system, \
 8014d1c:	4b61      	ldr	r3, [pc, #388]	@ (8014ea4 <get_config_payload_string+0x464>)
 8014d1e:	681b      	ldr	r3, [r3, #0]
 8014d20:	4a60      	ldr	r2, [pc, #384]	@ (8014ea4 <get_config_payload_string+0x464>)
 8014d22:	6812      	ldr	r2, [r2, #0]
 8014d24:	495f      	ldr	r1, [pc, #380]	@ (8014ea4 <get_config_payload_string+0x464>)
 8014d26:	6809      	ldr	r1, [r1, #0]
 8014d28:	485f      	ldr	r0, [pc, #380]	@ (8014ea8 <get_config_payload_string+0x468>)
 8014d2a:	6800      	ldr	r0, [r0, #0]
 8014d2c:	9010      	str	r0, [sp, #64]	@ 0x40
 8014d2e:	485f      	ldr	r0, [pc, #380]	@ (8014eac <get_config_payload_string+0x46c>)
 8014d30:	900f      	str	r0, [sp, #60]	@ 0x3c
 8014d32:	485e      	ldr	r0, [pc, #376]	@ (8014eac <get_config_payload_string+0x46c>)
 8014d34:	900e      	str	r0, [sp, #56]	@ 0x38
 8014d36:	485e      	ldr	r0, [pc, #376]	@ (8014eb0 <get_config_payload_string+0x470>)
 8014d38:	900d      	str	r0, [sp, #52]	@ 0x34
 8014d3a:	485e      	ldr	r0, [pc, #376]	@ (8014eb4 <get_config_payload_string+0x474>)
 8014d3c:	900c      	str	r0, [sp, #48]	@ 0x30
 8014d3e:	485e      	ldr	r0, [pc, #376]	@ (8014eb8 <get_config_payload_string+0x478>)
 8014d40:	900b      	str	r0, [sp, #44]	@ 0x2c
 8014d42:	910a      	str	r1, [sp, #40]	@ 0x28
 8014d44:	495d      	ldr	r1, [pc, #372]	@ (8014ebc <get_config_payload_string+0x47c>)
 8014d46:	9109      	str	r1, [sp, #36]	@ 0x24
 8014d48:	495d      	ldr	r1, [pc, #372]	@ (8014ec0 <get_config_payload_string+0x480>)
 8014d4a:	9108      	str	r1, [sp, #32]
 8014d4c:	495d      	ldr	r1, [pc, #372]	@ (8014ec4 <get_config_payload_string+0x484>)
 8014d4e:	9107      	str	r1, [sp, #28]
 8014d50:	9206      	str	r2, [sp, #24]
 8014d52:	4a5a      	ldr	r2, [pc, #360]	@ (8014ebc <get_config_payload_string+0x47c>)
 8014d54:	9205      	str	r2, [sp, #20]
 8014d56:	4a5c      	ldr	r2, [pc, #368]	@ (8014ec8 <get_config_payload_string+0x488>)
 8014d58:	9204      	str	r2, [sp, #16]
 8014d5a:	4a5c      	ldr	r2, [pc, #368]	@ (8014ecc <get_config_payload_string+0x48c>)
 8014d5c:	9203      	str	r2, [sp, #12]
 8014d5e:	4a59      	ldr	r2, [pc, #356]	@ (8014ec4 <get_config_payload_string+0x484>)
 8014d60:	9202      	str	r2, [sp, #8]
 8014d62:	4a5b      	ldr	r2, [pc, #364]	@ (8014ed0 <get_config_payload_string+0x490>)
 8014d64:	9201      	str	r2, [sp, #4]
 8014d66:	9300      	str	r3, [sp, #0]
 8014d68:	4b54      	ldr	r3, [pc, #336]	@ (8014ebc <get_config_payload_string+0x47c>)
 8014d6a:	4a56      	ldr	r2, [pc, #344]	@ (8014ec4 <get_config_payload_string+0x484>)
 8014d6c:	4959      	ldr	r1, [pc, #356]	@ (8014ed4 <get_config_payload_string+0x494>)
 8014d6e:	68f8      	ldr	r0, [r7, #12]
 8014d70:	f020 fc7c 	bl	803566c <sprintf>
 8014d74:	4603      	mov	r3, r0
 8014d76:	77fb      	strb	r3, [r7, #31]
					unical_id, state_topik, dev_class_power, "\n", dev_class_power_human, dev_system, unical_id, \
					dev_class_power, dev_class_power_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8014d78:	e08f      	b.n	8014e9a <get_config_payload_string+0x45a>
		case APPARENT_POWER_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_apparent_power, dev_system, \
 8014d7a:	4b4a      	ldr	r3, [pc, #296]	@ (8014ea4 <get_config_payload_string+0x464>)
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	4a49      	ldr	r2, [pc, #292]	@ (8014ea4 <get_config_payload_string+0x464>)
 8014d80:	6812      	ldr	r2, [r2, #0]
 8014d82:	4948      	ldr	r1, [pc, #288]	@ (8014ea4 <get_config_payload_string+0x464>)
 8014d84:	6809      	ldr	r1, [r1, #0]
 8014d86:	4848      	ldr	r0, [pc, #288]	@ (8014ea8 <get_config_payload_string+0x468>)
 8014d88:	6800      	ldr	r0, [r0, #0]
 8014d8a:	9010      	str	r0, [sp, #64]	@ 0x40
 8014d8c:	4847      	ldr	r0, [pc, #284]	@ (8014eac <get_config_payload_string+0x46c>)
 8014d8e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8014d90:	4846      	ldr	r0, [pc, #280]	@ (8014eac <get_config_payload_string+0x46c>)
 8014d92:	900e      	str	r0, [sp, #56]	@ 0x38
 8014d94:	4846      	ldr	r0, [pc, #280]	@ (8014eb0 <get_config_payload_string+0x470>)
 8014d96:	900d      	str	r0, [sp, #52]	@ 0x34
 8014d98:	4846      	ldr	r0, [pc, #280]	@ (8014eb4 <get_config_payload_string+0x474>)
 8014d9a:	900c      	str	r0, [sp, #48]	@ 0x30
 8014d9c:	4846      	ldr	r0, [pc, #280]	@ (8014eb8 <get_config_payload_string+0x478>)
 8014d9e:	900b      	str	r0, [sp, #44]	@ 0x2c
 8014da0:	910a      	str	r1, [sp, #40]	@ 0x28
 8014da2:	4946      	ldr	r1, [pc, #280]	@ (8014ebc <get_config_payload_string+0x47c>)
 8014da4:	9109      	str	r1, [sp, #36]	@ 0x24
 8014da6:	494c      	ldr	r1, [pc, #304]	@ (8014ed8 <get_config_payload_string+0x498>)
 8014da8:	9108      	str	r1, [sp, #32]
 8014daa:	494c      	ldr	r1, [pc, #304]	@ (8014edc <get_config_payload_string+0x49c>)
 8014dac:	9107      	str	r1, [sp, #28]
 8014dae:	9206      	str	r2, [sp, #24]
 8014db0:	4a42      	ldr	r2, [pc, #264]	@ (8014ebc <get_config_payload_string+0x47c>)
 8014db2:	9205      	str	r2, [sp, #20]
 8014db4:	4a4a      	ldr	r2, [pc, #296]	@ (8014ee0 <get_config_payload_string+0x4a0>)
 8014db6:	9204      	str	r2, [sp, #16]
 8014db8:	4a44      	ldr	r2, [pc, #272]	@ (8014ecc <get_config_payload_string+0x48c>)
 8014dba:	9203      	str	r2, [sp, #12]
 8014dbc:	4a47      	ldr	r2, [pc, #284]	@ (8014edc <get_config_payload_string+0x49c>)
 8014dbe:	9202      	str	r2, [sp, #8]
 8014dc0:	4a43      	ldr	r2, [pc, #268]	@ (8014ed0 <get_config_payload_string+0x490>)
 8014dc2:	9201      	str	r2, [sp, #4]
 8014dc4:	9300      	str	r3, [sp, #0]
 8014dc6:	4b3d      	ldr	r3, [pc, #244]	@ (8014ebc <get_config_payload_string+0x47c>)
 8014dc8:	4a44      	ldr	r2, [pc, #272]	@ (8014edc <get_config_payload_string+0x49c>)
 8014dca:	4942      	ldr	r1, [pc, #264]	@ (8014ed4 <get_config_payload_string+0x494>)
 8014dcc:	68f8      	ldr	r0, [r7, #12]
 8014dce:	f020 fc4d 	bl	803566c <sprintf>
 8014dd2:	4603      	mov	r3, r0
 8014dd4:	77fb      	strb	r3, [r7, #31]
					unical_id, state_topik, dev_class_apparent_power, "\n", dev_class_apparent_power_human, dev_system, unical_id, \
					dev_class_apparent_power, dev_class_apparent_power_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8014dd6:	e060      	b.n	8014e9a <get_config_payload_string+0x45a>

		case POWER_FACTOR_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_power_factor, dev_system, \
 8014dd8:	4b32      	ldr	r3, [pc, #200]	@ (8014ea4 <get_config_payload_string+0x464>)
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	4a31      	ldr	r2, [pc, #196]	@ (8014ea4 <get_config_payload_string+0x464>)
 8014dde:	6812      	ldr	r2, [r2, #0]
 8014de0:	4930      	ldr	r1, [pc, #192]	@ (8014ea4 <get_config_payload_string+0x464>)
 8014de2:	6809      	ldr	r1, [r1, #0]
 8014de4:	4830      	ldr	r0, [pc, #192]	@ (8014ea8 <get_config_payload_string+0x468>)
 8014de6:	6800      	ldr	r0, [r0, #0]
 8014de8:	9010      	str	r0, [sp, #64]	@ 0x40
 8014dea:	4830      	ldr	r0, [pc, #192]	@ (8014eac <get_config_payload_string+0x46c>)
 8014dec:	900f      	str	r0, [sp, #60]	@ 0x3c
 8014dee:	482f      	ldr	r0, [pc, #188]	@ (8014eac <get_config_payload_string+0x46c>)
 8014df0:	900e      	str	r0, [sp, #56]	@ 0x38
 8014df2:	482f      	ldr	r0, [pc, #188]	@ (8014eb0 <get_config_payload_string+0x470>)
 8014df4:	900d      	str	r0, [sp, #52]	@ 0x34
 8014df6:	482f      	ldr	r0, [pc, #188]	@ (8014eb4 <get_config_payload_string+0x474>)
 8014df8:	900c      	str	r0, [sp, #48]	@ 0x30
 8014dfa:	482f      	ldr	r0, [pc, #188]	@ (8014eb8 <get_config_payload_string+0x478>)
 8014dfc:	900b      	str	r0, [sp, #44]	@ 0x2c
 8014dfe:	910a      	str	r1, [sp, #40]	@ 0x28
 8014e00:	492e      	ldr	r1, [pc, #184]	@ (8014ebc <get_config_payload_string+0x47c>)
 8014e02:	9109      	str	r1, [sp, #36]	@ 0x24
 8014e04:	4937      	ldr	r1, [pc, #220]	@ (8014ee4 <get_config_payload_string+0x4a4>)
 8014e06:	9108      	str	r1, [sp, #32]
 8014e08:	4937      	ldr	r1, [pc, #220]	@ (8014ee8 <get_config_payload_string+0x4a8>)
 8014e0a:	9107      	str	r1, [sp, #28]
 8014e0c:	9206      	str	r2, [sp, #24]
 8014e0e:	4a2b      	ldr	r2, [pc, #172]	@ (8014ebc <get_config_payload_string+0x47c>)
 8014e10:	9205      	str	r2, [sp, #20]
 8014e12:	4a36      	ldr	r2, [pc, #216]	@ (8014eec <get_config_payload_string+0x4ac>)
 8014e14:	9204      	str	r2, [sp, #16]
 8014e16:	4a2d      	ldr	r2, [pc, #180]	@ (8014ecc <get_config_payload_string+0x48c>)
 8014e18:	9203      	str	r2, [sp, #12]
 8014e1a:	4a33      	ldr	r2, [pc, #204]	@ (8014ee8 <get_config_payload_string+0x4a8>)
 8014e1c:	9202      	str	r2, [sp, #8]
 8014e1e:	4a2c      	ldr	r2, [pc, #176]	@ (8014ed0 <get_config_payload_string+0x490>)
 8014e20:	9201      	str	r2, [sp, #4]
 8014e22:	9300      	str	r3, [sp, #0]
 8014e24:	4b25      	ldr	r3, [pc, #148]	@ (8014ebc <get_config_payload_string+0x47c>)
 8014e26:	4a30      	ldr	r2, [pc, #192]	@ (8014ee8 <get_config_payload_string+0x4a8>)
 8014e28:	492a      	ldr	r1, [pc, #168]	@ (8014ed4 <get_config_payload_string+0x494>)
 8014e2a:	68f8      	ldr	r0, [r7, #12]
 8014e2c:	f020 fc1e 	bl	803566c <sprintf>
 8014e30:	4603      	mov	r3, r0
 8014e32:	77fb      	strb	r3, [r7, #31]
					unical_id, state_topik, dev_class_power_factor, "\n", dev_class_power_factor_human, dev_system, unical_id, \
					dev_class_power_factor, dev_class_power_factor_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8014e34:	e031      	b.n	8014e9a <get_config_payload_string+0x45a>
		case CURRENT_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_current, dev_system, \
 8014e36:	4b1b      	ldr	r3, [pc, #108]	@ (8014ea4 <get_config_payload_string+0x464>)
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	4a1a      	ldr	r2, [pc, #104]	@ (8014ea4 <get_config_payload_string+0x464>)
 8014e3c:	6812      	ldr	r2, [r2, #0]
 8014e3e:	4919      	ldr	r1, [pc, #100]	@ (8014ea4 <get_config_payload_string+0x464>)
 8014e40:	6809      	ldr	r1, [r1, #0]
 8014e42:	4819      	ldr	r0, [pc, #100]	@ (8014ea8 <get_config_payload_string+0x468>)
 8014e44:	6800      	ldr	r0, [r0, #0]
 8014e46:	9010      	str	r0, [sp, #64]	@ 0x40
 8014e48:	4818      	ldr	r0, [pc, #96]	@ (8014eac <get_config_payload_string+0x46c>)
 8014e4a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8014e4c:	4817      	ldr	r0, [pc, #92]	@ (8014eac <get_config_payload_string+0x46c>)
 8014e4e:	900e      	str	r0, [sp, #56]	@ 0x38
 8014e50:	4817      	ldr	r0, [pc, #92]	@ (8014eb0 <get_config_payload_string+0x470>)
 8014e52:	900d      	str	r0, [sp, #52]	@ 0x34
 8014e54:	4817      	ldr	r0, [pc, #92]	@ (8014eb4 <get_config_payload_string+0x474>)
 8014e56:	900c      	str	r0, [sp, #48]	@ 0x30
 8014e58:	4817      	ldr	r0, [pc, #92]	@ (8014eb8 <get_config_payload_string+0x478>)
 8014e5a:	900b      	str	r0, [sp, #44]	@ 0x2c
 8014e5c:	910a      	str	r1, [sp, #40]	@ 0x28
 8014e5e:	4917      	ldr	r1, [pc, #92]	@ (8014ebc <get_config_payload_string+0x47c>)
 8014e60:	9109      	str	r1, [sp, #36]	@ 0x24
 8014e62:	4923      	ldr	r1, [pc, #140]	@ (8014ef0 <get_config_payload_string+0x4b0>)
 8014e64:	9108      	str	r1, [sp, #32]
 8014e66:	4923      	ldr	r1, [pc, #140]	@ (8014ef4 <get_config_payload_string+0x4b4>)
 8014e68:	9107      	str	r1, [sp, #28]
 8014e6a:	9206      	str	r2, [sp, #24]
 8014e6c:	4a13      	ldr	r2, [pc, #76]	@ (8014ebc <get_config_payload_string+0x47c>)
 8014e6e:	9205      	str	r2, [sp, #20]
 8014e70:	4a21      	ldr	r2, [pc, #132]	@ (8014ef8 <get_config_payload_string+0x4b8>)
 8014e72:	9204      	str	r2, [sp, #16]
 8014e74:	4a15      	ldr	r2, [pc, #84]	@ (8014ecc <get_config_payload_string+0x48c>)
 8014e76:	9203      	str	r2, [sp, #12]
 8014e78:	4a1e      	ldr	r2, [pc, #120]	@ (8014ef4 <get_config_payload_string+0x4b4>)
 8014e7a:	9202      	str	r2, [sp, #8]
 8014e7c:	4a14      	ldr	r2, [pc, #80]	@ (8014ed0 <get_config_payload_string+0x490>)
 8014e7e:	9201      	str	r2, [sp, #4]
 8014e80:	9300      	str	r3, [sp, #0]
 8014e82:	4b0e      	ldr	r3, [pc, #56]	@ (8014ebc <get_config_payload_string+0x47c>)
 8014e84:	4a1b      	ldr	r2, [pc, #108]	@ (8014ef4 <get_config_payload_string+0x4b4>)
 8014e86:	4913      	ldr	r1, [pc, #76]	@ (8014ed4 <get_config_payload_string+0x494>)
 8014e88:	68f8      	ldr	r0, [r7, #12]
 8014e8a:	f020 fbef 	bl	803566c <sprintf>
 8014e8e:	4603      	mov	r3, r0
 8014e90:	77fb      	strb	r3, [r7, #31]
					unical_id, state_topik, dev_class_current, "\n", dev_class_current_human, dev_system, unical_id, \
					dev_class_current, dev_class_current_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8014e92:	e002      	b.n	8014e9a <get_config_payload_string+0x45a>

		default:
			return -1;
 8014e94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014e98:	e7ff      	b.n	8014e9a <get_config_payload_string+0x45a>
			break;
	}
}
 8014e9a:	4618      	mov	r0, r3
 8014e9c:	3724      	adds	r7, #36	@ 0x24
 8014e9e:	46bd      	mov	sp, r7
 8014ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ea2:	bf00      	nop
 8014ea4:	20000b9c 	.word	0x20000b9c
 8014ea8:	20000ba0 	.word	0x20000ba0
 8014eac:	080404f8 	.word	0x080404f8
 8014eb0:	080404fc 	.word	0x080404fc
 8014eb4:	0804050c 	.word	0x0804050c
 8014eb8:	08040520 	.word	0x08040520
 8014ebc:	0804047c 	.word	0x0804047c
 8014ec0:	080405a4 	.word	0x080405a4
 8014ec4:	080404b4 	.word	0x080404b4
 8014ec8:	080405a8 	.word	0x080405a8
 8014ecc:	08040530 	.word	0x08040530
 8014ed0:	08040588 	.word	0x08040588
 8014ed4:	08043740 	.word	0x08043740
 8014ed8:	080405cc 	.word	0x080405cc
 8014edc:	080404bc 	.word	0x080404bc
 8014ee0:	080405d0 	.word	0x080405d0
 8014ee4:	080405f0 	.word	0x080405f0
 8014ee8:	080404cc 	.word	0x080404cc
 8014eec:	080405f4 	.word	0x080405f4
 8014ef0:	08040620 	.word	0x08040620
 8014ef4:	080404dc 	.word	0x080404dc
 8014ef8:	08040624 	.word	0x08040624

08014efc <gen_bin_sensor_status_payload_JSON>:


int gen_bin_sensor_status_payload_JSON(char * payload, uint32_t payload_len, uint8_t sensor_type, uint8_t sensor_number, uint8_t state){
 8014efc:	b580      	push	{r7, lr}
 8014efe:	b088      	sub	sp, #32
 8014f00:	af02      	add	r7, sp, #8
 8014f02:	60f8      	str	r0, [r7, #12]
 8014f04:	60b9      	str	r1, [r7, #8]
 8014f06:	4611      	mov	r1, r2
 8014f08:	461a      	mov	r2, r3
 8014f0a:	460b      	mov	r3, r1
 8014f0c:	71fb      	strb	r3, [r7, #7]
 8014f0e:	4613      	mov	r3, r2
 8014f10:	71bb      	strb	r3, [r7, #6]

	char * sens_name = NULL;
 8014f12:	2300      	movs	r3, #0
 8014f14:	617b      	str	r3, [r7, #20]
	switch (sensor_type) {
 8014f16:	79fb      	ldrb	r3, [r7, #7]
 8014f18:	2b01      	cmp	r3, #1
 8014f1a:	d002      	beq.n	8014f22 <gen_bin_sensor_status_payload_JSON+0x26>
 8014f1c:	2b02      	cmp	r3, #2
 8014f1e:	d003      	beq.n	8014f28 <gen_bin_sensor_status_payload_JSON+0x2c>
			break;
		case OUTPUT_SENSOR:
			sens_name = (char *)dev_class_switch;
			break;
		default:
			break;
 8014f20:	e005      	b.n	8014f2e <gen_bin_sensor_status_payload_JSON+0x32>
			sens_name = (char *)component_input;
 8014f22:	4b13      	ldr	r3, [pc, #76]	@ (8014f70 <gen_bin_sensor_status_payload_JSON+0x74>)
 8014f24:	617b      	str	r3, [r7, #20]
			break;
 8014f26:	e002      	b.n	8014f2e <gen_bin_sensor_status_payload_JSON+0x32>
			sens_name = (char *)dev_class_switch;
 8014f28:	4b12      	ldr	r3, [pc, #72]	@ (8014f74 <gen_bin_sensor_status_payload_JSON+0x78>)
 8014f2a:	617b      	str	r3, [r7, #20]
			break;
 8014f2c:	bf00      	nop
	}

	if (state){
 8014f2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d00b      	beq.n	8014f4e <gen_bin_sensor_status_payload_JSON+0x52>
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_on);
 8014f36:	79bb      	ldrb	r3, [r7, #6]
 8014f38:	4a0f      	ldr	r2, [pc, #60]	@ (8014f78 <gen_bin_sensor_status_payload_JSON+0x7c>)
 8014f3a:	9201      	str	r2, [sp, #4]
 8014f3c:	9300      	str	r3, [sp, #0]
 8014f3e:	697b      	ldr	r3, [r7, #20]
 8014f40:	4a0e      	ldr	r2, [pc, #56]	@ (8014f7c <gen_bin_sensor_status_payload_JSON+0x80>)
 8014f42:	68b9      	ldr	r1, [r7, #8]
 8014f44:	68f8      	ldr	r0, [r7, #12]
 8014f46:	f020 fa29 	bl	803539c <snprintf>
 8014f4a:	4603      	mov	r3, r0
 8014f4c:	e00b      	b.n	8014f66 <gen_bin_sensor_status_payload_JSON+0x6a>
	}else{
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_off);
 8014f4e:	79bb      	ldrb	r3, [r7, #6]
 8014f50:	4a0b      	ldr	r2, [pc, #44]	@ (8014f80 <gen_bin_sensor_status_payload_JSON+0x84>)
 8014f52:	9201      	str	r2, [sp, #4]
 8014f54:	9300      	str	r3, [sp, #0]
 8014f56:	697b      	ldr	r3, [r7, #20]
 8014f58:	4a08      	ldr	r2, [pc, #32]	@ (8014f7c <gen_bin_sensor_status_payload_JSON+0x80>)
 8014f5a:	68b9      	ldr	r1, [r7, #8]
 8014f5c:	68f8      	ldr	r0, [r7, #12]
 8014f5e:	f020 fa1d 	bl	803539c <snprintf>
 8014f62:	4603      	mov	r3, r0
 8014f64:	bf00      	nop
	}
}
 8014f66:	4618      	mov	r0, r3
 8014f68:	3718      	adds	r7, #24
 8014f6a:	46bd      	mov	sp, r7
 8014f6c:	bd80      	pop	{r7, pc}
 8014f6e:	bf00      	nop
 8014f70:	08040474 	.word	0x08040474
 8014f74:	08040494 	.word	0x08040494
 8014f78:	08040630 	.word	0x08040630
 8014f7c:	080438e8 	.word	0x080438e8
 8014f80:	08040634 	.word	0x08040634

08014f84 <generate_comand_topik_for_subscrabe>:
//	strcat(buff, "\n}");
//
//	return 0;
//}

int generate_comand_topik_for_subscrabe(char * topik, uint32_t topik_len, uint8_t sensor_type, uint8_t sensor_number){
 8014f84:	b580      	push	{r7, lr}
 8014f86:	b088      	sub	sp, #32
 8014f88:	af04      	add	r7, sp, #16
 8014f8a:	60f8      	str	r0, [r7, #12]
 8014f8c:	60b9      	str	r1, [r7, #8]
 8014f8e:	4611      	mov	r1, r2
 8014f90:	461a      	mov	r2, r3
 8014f92:	460b      	mov	r3, r1
 8014f94:	71fb      	strb	r3, [r7, #7]
 8014f96:	4613      	mov	r3, r2
 8014f98:	71bb      	strb	r3, [r7, #6]

	switch(sensor_type){
 8014f9a:	79fb      	ldrb	r3, [r7, #7]
 8014f9c:	2b02      	cmp	r3, #2
 8014f9e:	d10e      	bne.n	8014fbe <generate_comand_topik_for_subscrabe+0x3a>

		case OUTPUT_SENSOR:
			return snprintf(topik, topik_len, universal_control_topik_template, dev_system, unical_id, dev_class_switch, sensor_number );
 8014fa0:	4b09      	ldr	r3, [pc, #36]	@ (8014fc8 <generate_comand_topik_for_subscrabe+0x44>)
 8014fa2:	681b      	ldr	r3, [r3, #0]
 8014fa4:	79ba      	ldrb	r2, [r7, #6]
 8014fa6:	9202      	str	r2, [sp, #8]
 8014fa8:	4a08      	ldr	r2, [pc, #32]	@ (8014fcc <generate_comand_topik_for_subscrabe+0x48>)
 8014faa:	9201      	str	r2, [sp, #4]
 8014fac:	9300      	str	r3, [sp, #0]
 8014fae:	4b08      	ldr	r3, [pc, #32]	@ (8014fd0 <generate_comand_topik_for_subscrabe+0x4c>)
 8014fb0:	4a08      	ldr	r2, [pc, #32]	@ (8014fd4 <generate_comand_topik_for_subscrabe+0x50>)
 8014fb2:	68b9      	ldr	r1, [r7, #8]
 8014fb4:	68f8      	ldr	r0, [r7, #12]
 8014fb6:	f020 f9f1 	bl	803539c <snprintf>
 8014fba:	4603      	mov	r3, r0
 8014fbc:	e7ff      	b.n	8014fbe <generate_comand_topik_for_subscrabe+0x3a>
			break;
	}
}
 8014fbe:	4618      	mov	r0, r3
 8014fc0:	3710      	adds	r7, #16
 8014fc2:	46bd      	mov	sp, r7
 8014fc4:	bd80      	pop	{r7, pc}
 8014fc6:	bf00      	nop
 8014fc8:	20000b9c 	.word	0x20000b9c
 8014fcc:	08040494 	.word	0x08040494
 8014fd0:	0804047c 	.word	0x0804047c
 8014fd4:	08040638 	.word	0x08040638

08014fd8 <generate_status_topik>:

int generate_status_topik(char * topik, const uint32_t topik_len, const mqtt_sensor_type_t sensor_type, const uint8_t sensor_number){
 8014fd8:	b580      	push	{r7, lr}
 8014fda:	b088      	sub	sp, #32
 8014fdc:	af04      	add	r7, sp, #16
 8014fde:	60f8      	str	r0, [r7, #12]
 8014fe0:	60b9      	str	r1, [r7, #8]
 8014fe2:	4611      	mov	r1, r2
 8014fe4:	461a      	mov	r2, r3
 8014fe6:	460b      	mov	r3, r1
 8014fe8:	71fb      	strb	r3, [r7, #7]
 8014fea:	4613      	mov	r3, r2
 8014fec:	71bb      	strb	r3, [r7, #6]

	strcpy(topik, "\0");
 8014fee:	68fb      	ldr	r3, [r7, #12]
 8014ff0:	2200      	movs	r2, #0
 8014ff2:	701a      	strb	r2, [r3, #0]

	switch (sensor_type) {
 8014ff4:	79fb      	ldrb	r3, [r7, #7]
 8014ff6:	2b01      	cmp	r3, #1
 8014ff8:	d002      	beq.n	8015000 <generate_status_topik+0x28>
 8014ffa:	2b02      	cmp	r3, #2
 8014ffc:	d00f      	beq.n	801501e <generate_status_topik+0x46>
 8014ffe:	e01d      	b.n	801503c <generate_status_topik+0x64>
		case INPUT_SENSOR:
			return snprintf(topik, topik_len, universal_status_topik_template, dev_system, unical_id, component_input, sensor_number);
 8015000:	4b11      	ldr	r3, [pc, #68]	@ (8015048 <generate_status_topik+0x70>)
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	79ba      	ldrb	r2, [r7, #6]
 8015006:	9202      	str	r2, [sp, #8]
 8015008:	4a10      	ldr	r2, [pc, #64]	@ (801504c <generate_status_topik+0x74>)
 801500a:	9201      	str	r2, [sp, #4]
 801500c:	9300      	str	r3, [sp, #0]
 801500e:	4b10      	ldr	r3, [pc, #64]	@ (8015050 <generate_status_topik+0x78>)
 8015010:	4a10      	ldr	r2, [pc, #64]	@ (8015054 <generate_status_topik+0x7c>)
 8015012:	68b9      	ldr	r1, [r7, #8]
 8015014:	68f8      	ldr	r0, [r7, #12]
 8015016:	f020 f9c1 	bl	803539c <snprintf>
 801501a:	4603      	mov	r3, r0
 801501c:	e010      	b.n	8015040 <generate_status_topik+0x68>
			break;

		case OUTPUT_SENSOR:
			return snprintf(topik, topik_len, universal_status_topik_template, dev_system, unical_id, dev_class_switch, sensor_number);
 801501e:	4b0a      	ldr	r3, [pc, #40]	@ (8015048 <generate_status_topik+0x70>)
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	79ba      	ldrb	r2, [r7, #6]
 8015024:	9202      	str	r2, [sp, #8]
 8015026:	4a0c      	ldr	r2, [pc, #48]	@ (8015058 <generate_status_topik+0x80>)
 8015028:	9201      	str	r2, [sp, #4]
 801502a:	9300      	str	r3, [sp, #0]
 801502c:	4b08      	ldr	r3, [pc, #32]	@ (8015050 <generate_status_topik+0x78>)
 801502e:	4a09      	ldr	r2, [pc, #36]	@ (8015054 <generate_status_topik+0x7c>)
 8015030:	68b9      	ldr	r1, [r7, #8]
 8015032:	68f8      	ldr	r0, [r7, #12]
 8015034:	f020 f9b2 	bl	803539c <snprintf>
 8015038:	4603      	mov	r3, r0
 801503a:	e001      	b.n	8015040 <generate_status_topik+0x68>
			break;

		default:
			return -1;
 801503c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
			break;
	}

	return 0;
}
 8015040:	4618      	mov	r0, r3
 8015042:	3710      	adds	r7, #16
 8015044:	46bd      	mov	sp, r7
 8015046:	bd80      	pop	{r7, pc}
 8015048:	20000b9c 	.word	0x20000b9c
 801504c:	08040474 	.word	0x08040474
 8015050:	0804047c 	.word	0x0804047c
 8015054:	08040648 	.word	0x08040648
 8015058:	08040494 	.word	0x08040494

0801505c <sfn>:

// SNTP client connection
static struct mg_connection *s_sntp_conn = NULL;

// SNTP client callback
static void sfn(struct mg_connection *c, int ev, void *ev_data) {
 801505c:	b5b0      	push	{r4, r5, r7, lr}
 801505e:	b088      	sub	sp, #32
 8015060:	af00      	add	r7, sp, #0
 8015062:	60f8      	str	r0, [r7, #12]
 8015064:	60b9      	str	r1, [r7, #8]
 8015066:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_SNTP_TIME) {
 8015068:	68bb      	ldr	r3, [r7, #8]
 801506a:	2b12      	cmp	r3, #18
 801506c:	d14b      	bne.n	8015106 <sfn+0xaa>
	  logging(L_INFO, "Response from NTP server received");
 801506e:	492d      	ldr	r1, [pc, #180]	@ (8015124 <sfn+0xc8>)
 8015070:	2001      	movs	r0, #1
 8015072:	f7fd f86b 	bl	801214c <logging>
    // Time received, the internal protocol handler updates what mg_now() returns
    uint64_t curtime = mg_now();
 8015076:	f01c fadf 	bl	8031638 <mg_now>
 801507a:	e9c7 0106 	strd	r0, r1, [r7, #24]
    MG_INFO(("SNTP-updated current time is: %llu ms from epoch", curtime));
 801507e:	4b2a      	ldr	r3, [pc, #168]	@ (8015128 <sfn+0xcc>)
 8015080:	681b      	ldr	r3, [r3, #0]
 8015082:	2b01      	cmp	r3, #1
 8015084:	dd0a      	ble.n	801509c <sfn+0x40>
 8015086:	4b29      	ldr	r3, [pc, #164]	@ (801512c <sfn+0xd0>)
 8015088:	221b      	movs	r2, #27
 801508a:	4929      	ldr	r1, [pc, #164]	@ (8015130 <sfn+0xd4>)
 801508c:	2002      	movs	r0, #2
 801508e:	f016 f8a5 	bl	802b1dc <mg_log_prefix>
 8015092:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8015096:	4827      	ldr	r0, [pc, #156]	@ (8015134 <sfn+0xd8>)
 8015098:	f016 f8f0 	bl	802b27c <mg_log>
    logging(L_INFO,"SNTP-updated current time is: %" PRIu64 " ms from epoch", curtime);
 801509c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80150a0:	4924      	ldr	r1, [pc, #144]	@ (8015134 <sfn+0xd8>)
 80150a2:	2001      	movs	r0, #1
 80150a4:	f7fd f852 	bl	801214c <logging>
    // otherwise, you can process the server returned data yourself
    {
      uint64_t t = *(uint64_t *) ev_data;
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150ae:	e9c7 2304 	strd	r2, r3, [r7, #16]
      s_boot_timestamp = (time_t) ((t - mg_millis()) / 1000);
 80150b2:	f01d fdcb 	bl	8032c4c <mg_millis>
 80150b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80150ba:	1a14      	subs	r4, r2, r0
 80150bc:	eb63 0501 	sbc.w	r5, r3, r1
 80150c0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80150c4:	f04f 0300 	mov.w	r3, #0
 80150c8:	4620      	mov	r0, r4
 80150ca:	4629      	mov	r1, r5
 80150cc:	f7fb fe44 	bl	8010d58 <__aeabi_uldivmod>
 80150d0:	4602      	mov	r2, r0
 80150d2:	460b      	mov	r3, r1
 80150d4:	4918      	ldr	r1, [pc, #96]	@ (8015138 <sfn+0xdc>)
 80150d6:	e9c1 2300 	strd	r2, r3, [r1]
      MG_INFO(("Got SNTP time: %llu ms from epoch, ", t));
 80150da:	4b13      	ldr	r3, [pc, #76]	@ (8015128 <sfn+0xcc>)
 80150dc:	681b      	ldr	r3, [r3, #0]
 80150de:	2b01      	cmp	r3, #1
 80150e0:	dd0a      	ble.n	80150f8 <sfn+0x9c>
 80150e2:	4b12      	ldr	r3, [pc, #72]	@ (801512c <sfn+0xd0>)
 80150e4:	2221      	movs	r2, #33	@ 0x21
 80150e6:	4912      	ldr	r1, [pc, #72]	@ (8015130 <sfn+0xd4>)
 80150e8:	2002      	movs	r0, #2
 80150ea:	f016 f877 	bl	802b1dc <mg_log_prefix>
 80150ee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80150f2:	4812      	ldr	r0, [pc, #72]	@ (801513c <sfn+0xe0>)
 80150f4:	f016 f8c2 	bl	802b27c <mg_log>
      logging(L_INFO,"Got SNTP time: %" PRIu64 " ms from epoch", t);
 80150f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80150fc:	4910      	ldr	r1, [pc, #64]	@ (8015140 <sfn+0xe4>)
 80150fe:	2001      	movs	r0, #1
 8015100:	f7fd f824 	bl	801214c <logging>
  } else if (ev == MG_EV_CLOSE) {
	  logging(L_ERR, "NTP connection is closed");
    s_sntp_conn = NULL;
  }
  (void) c;
}
 8015104:	e009      	b.n	801511a <sfn+0xbe>
  } else if (ev == MG_EV_CLOSE) {
 8015106:	68bb      	ldr	r3, [r7, #8]
 8015108:	2b09      	cmp	r3, #9
 801510a:	d106      	bne.n	801511a <sfn+0xbe>
	  logging(L_ERR, "NTP connection is closed");
 801510c:	490d      	ldr	r1, [pc, #52]	@ (8015144 <sfn+0xe8>)
 801510e:	2003      	movs	r0, #3
 8015110:	f7fd f81c 	bl	801214c <logging>
    s_sntp_conn = NULL;
 8015114:	4b0c      	ldr	r3, [pc, #48]	@ (8015148 <sfn+0xec>)
 8015116:	2200      	movs	r2, #0
 8015118:	601a      	str	r2, [r3, #0]
}
 801511a:	bf00      	nop
 801511c:	3720      	adds	r7, #32
 801511e:	46bd      	mov	sp, r7
 8015120:	bdb0      	pop	{r4, r5, r7, pc}
 8015122:	bf00      	nop
 8015124:	0804066c 	.word	0x0804066c
 8015128:	20000298 	.word	0x20000298
 801512c:	080438f8 	.word	0x080438f8
 8015130:	08040690 	.word	0x08040690
 8015134:	080406b0 	.word	0x080406b0
 8015138:	20000ba8 	.word	0x20000ba8
 801513c:	080406e4 	.word	0x080406e4
 8015140:	08040708 	.word	0x08040708
 8015144:	0804072c 	.word	0x0804072c
 8015148:	20000bb0 	.word	0x20000bb0

0801514c <timer_fn>:


void timer_fn(void *arg) {
 801514c:	b580      	push	{r7, lr}
 801514e:	b084      	sub	sp, #16
 8015150:	af00      	add	r7, sp, #0
 8015152:	6078      	str	r0, [r7, #4]
  struct mg_mgr *mgr = (struct mg_mgr *) arg;
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	60fb      	str	r3, [r7, #12]
  if (s_sntp_conn == NULL) s_sntp_conn = mg_sntp_connect(mgr, NULL, sfn, NULL);
 8015158:	4b0c      	ldr	r3, [pc, #48]	@ (801518c <timer_fn+0x40>)
 801515a:	681b      	ldr	r3, [r3, #0]
 801515c:	2b00      	cmp	r3, #0
 801515e:	d108      	bne.n	8015172 <timer_fn+0x26>
 8015160:	2300      	movs	r3, #0
 8015162:	4a0b      	ldr	r2, [pc, #44]	@ (8015190 <timer_fn+0x44>)
 8015164:	2100      	movs	r1, #0
 8015166:	68f8      	ldr	r0, [r7, #12]
 8015168:	f01c fcfe 	bl	8031b68 <mg_sntp_connect>
 801516c:	4603      	mov	r3, r0
 801516e:	4a07      	ldr	r2, [pc, #28]	@ (801518c <timer_fn+0x40>)
 8015170:	6013      	str	r3, [r2, #0]
  if (s_sntp_conn != NULL) mg_sntp_request(s_sntp_conn);
 8015172:	4b06      	ldr	r3, [pc, #24]	@ (801518c <timer_fn+0x40>)
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	2b00      	cmp	r3, #0
 8015178:	d004      	beq.n	8015184 <timer_fn+0x38>
 801517a:	4b04      	ldr	r3, [pc, #16]	@ (801518c <timer_fn+0x40>)
 801517c:	681b      	ldr	r3, [r3, #0]
 801517e:	4618      	mov	r0, r3
 8015180:	f01c fc66 	bl	8031a50 <mg_sntp_request>
}
 8015184:	bf00      	nop
 8015186:	3710      	adds	r7, #16
 8015188:	46bd      	mov	sp, r7
 801518a:	bd80      	pop	{r7, pc}
 801518c:	20000bb0 	.word	0x20000bb0
 8015190:	0801505d 	.word	0x0801505d

08015194 <start_sntp>:

void start_sntp(void *arg){
 8015194:	b580      	push	{r7, lr}
 8015196:	b088      	sub	sp, #32
 8015198:	af04      	add	r7, sp, #16
 801519a:	6078      	str	r0, [r7, #4]
	logging(L_INFO, "starting NTP client service");
 801519c:	4911      	ldr	r1, [pc, #68]	@ (80151e4 <start_sntp+0x50>)
 801519e:	2001      	movs	r0, #1
 80151a0:	f7fc ffd4 	bl	801214c <logging>
	struct mg_mgr *mgr = (struct mg_mgr*)arg;
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	60fb      	str	r3, [r7, #12]

	mg_timer_add(mgr, 20000,  MG_TIMER_ONCE, timer_fn, mgr); //Run once with delay 20 seconds
 80151a8:	68fb      	ldr	r3, [r7, #12]
 80151aa:	9302      	str	r3, [sp, #8]
 80151ac:	4b0e      	ldr	r3, [pc, #56]	@ (80151e8 <start_sntp+0x54>)
 80151ae:	9301      	str	r3, [sp, #4]
 80151b0:	2300      	movs	r3, #0
 80151b2:	9300      	str	r3, [sp, #0]
 80151b4:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80151b8:	f04f 0300 	mov.w	r3, #0
 80151bc:	68f8      	ldr	r0, [r7, #12]
 80151be:	f018 fda7 	bl	802dd10 <mg_timer_add>
	mg_timer_add(mgr, 1080000, MG_TIMER_REPEAT, timer_fn, mgr); //Repeat every 30 minutes 1080 seconds
 80151c2:	68fb      	ldr	r3, [r7, #12]
 80151c4:	9302      	str	r3, [sp, #8]
 80151c6:	4b08      	ldr	r3, [pc, #32]	@ (80151e8 <start_sntp+0x54>)
 80151c8:	9301      	str	r3, [sp, #4]
 80151ca:	2301      	movs	r3, #1
 80151cc:	9300      	str	r3, [sp, #0]
 80151ce:	4a07      	ldr	r2, [pc, #28]	@ (80151ec <start_sntp+0x58>)
 80151d0:	f04f 0300 	mov.w	r3, #0
 80151d4:	68f8      	ldr	r0, [r7, #12]
 80151d6:	f018 fd9b 	bl	802dd10 <mg_timer_add>

}
 80151da:	bf00      	nop
 80151dc:	3710      	adds	r7, #16
 80151de:	46bd      	mov	sp, r7
 80151e0:	bd80      	pop	{r7, pc}
 80151e2:	bf00      	nop
 80151e4:	08040748 	.word	0x08040748
 80151e8:	0801514d 	.word	0x0801514d
 80151ec:	00107ac0 	.word	0x00107ac0

080151f0 <my_calloc>:
static inline void *my_calloc(size_t cnt, size_t size) {
 80151f0:	b580      	push	{r7, lr}
 80151f2:	b084      	sub	sp, #16
 80151f4:	af00      	add	r7, sp, #0
 80151f6:	6078      	str	r0, [r7, #4]
 80151f8:	6039      	str	r1, [r7, #0]
  void *p = pvPortMalloc(cnt * size);
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	683a      	ldr	r2, [r7, #0]
 80151fe:	fb02 f303 	mul.w	r3, r2, r3
 8015202:	4618      	mov	r0, r3
 8015204:	f007 f9e2 	bl	801c5cc <pvPortMalloc>
 8015208:	60f8      	str	r0, [r7, #12]
  if (p != NULL) memset(p, 0, size * cnt);
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	2b00      	cmp	r3, #0
 801520e:	d008      	beq.n	8015222 <my_calloc+0x32>
 8015210:	683b      	ldr	r3, [r7, #0]
 8015212:	687a      	ldr	r2, [r7, #4]
 8015214:	fb02 f303 	mul.w	r3, r2, r3
 8015218:	461a      	mov	r2, r3
 801521a:	2100      	movs	r1, #0
 801521c:	68f8      	ldr	r0, [r7, #12]
 801521e:	f020 fde7 	bl	8035df0 <memset>
  return p;
 8015222:	68fb      	ldr	r3, [r7, #12]
}
 8015224:	4618      	mov	r0, r3
 8015226:	3710      	adds	r7, #16
 8015228:	46bd      	mov	sp, r7
 801522a:	bd80      	pop	{r7, pc}

0801522c <send_ssdp_notify>:
    "\r\n";



// Функция отправки SSDP NOTIFY
static void send_ssdp_notify(void *param) {
 801522c:	b590      	push	{r4, r7, lr}
 801522e:	b08b      	sub	sp, #44	@ 0x2c
 8015230:	af04      	add	r7, sp, #16
 8015232:	6078      	str	r0, [r7, #4]

	struct mg_mgr *mgr = (struct mg_mgr *)param;
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	617b      	str	r3, [r7, #20]
	struct mg_connection *udp_conn = mg_connect(mgr, ssdp_addr, NULL, NULL);
 8015238:	2300      	movs	r3, #0
 801523a:	2200      	movs	r2, #0
 801523c:	4924      	ldr	r1, [pc, #144]	@ (80152d0 <send_ssdp_notify+0xa4>)
 801523e:	6978      	ldr	r0, [r7, #20]
 8015240:	f018 fc36 	bl	802dab0 <mg_connect>
 8015244:	6138      	str	r0, [r7, #16]

	size_t buff_len = (strlen(ssdp_notify_template) + IP_v6_STR_LEN  + strlen(ssdp_web_port) + 200);
 8015246:	f240 13e9 	movw	r3, #489	@ 0x1e9
 801524a:	60fb      	str	r3, [r7, #12]
	buff = calloc(buff_len, sizeof(char));  // +1 для '\0'
 801524c:	2101      	movs	r1, #1
 801524e:	68f8      	ldr	r0, [r7, #12]
 8015250:	f7ff ffce 	bl	80151f0 <my_calloc>
 8015254:	4603      	mov	r3, r0
 8015256:	4a1f      	ldr	r2, [pc, #124]	@ (80152d4 <send_ssdp_notify+0xa8>)
 8015258:	6013      	str	r3, [r2, #0]
	if (!buff) return; //TODO add log
 801525a:	4b1e      	ldr	r3, [pc, #120]	@ (80152d4 <send_ssdp_notify+0xa8>)
 801525c:	681b      	ldr	r3, [r3, #0]
 801525e:	2b00      	cmp	r3, #0
 8015260:	d032      	beq.n	80152c8 <send_ssdp_notify+0x9c>
	mg_snprintf(ip_addr_str, sizeof(char) * IP_v6_STR_LEN, "%M", mg_print_ip, &udp_conn->loc);
 8015262:	4b1d      	ldr	r3, [pc, #116]	@ (80152d8 <send_ssdp_notify+0xac>)
 8015264:	6818      	ldr	r0, [r3, #0]
 8015266:	693b      	ldr	r3, [r7, #16]
 8015268:	3308      	adds	r3, #8
 801526a:	9300      	str	r3, [sp, #0]
 801526c:	4b1b      	ldr	r3, [pc, #108]	@ (80152dc <send_ssdp_notify+0xb0>)
 801526e:	4a1c      	ldr	r2, [pc, #112]	@ (80152e0 <send_ssdp_notify+0xb4>)
 8015270:	2128      	movs	r1, #40	@ 0x28
 8015272:	f01b ffcf 	bl	8031214 <mg_snprintf>

	snprintf(buff, buff_len-1, ssdp_notify_template, MG_VERSION, ip_addr_str, ssdp_web_port, dev_id);
 8015276:	4b17      	ldr	r3, [pc, #92]	@ (80152d4 <send_ssdp_notify+0xa8>)
 8015278:	6818      	ldr	r0, [r3, #0]
 801527a:	68fb      	ldr	r3, [r7, #12]
 801527c:	1e59      	subs	r1, r3, #1
 801527e:	4b16      	ldr	r3, [pc, #88]	@ (80152d8 <send_ssdp_notify+0xac>)
 8015280:	681b      	ldr	r3, [r3, #0]
 8015282:	4a18      	ldr	r2, [pc, #96]	@ (80152e4 <send_ssdp_notify+0xb8>)
 8015284:	6812      	ldr	r2, [r2, #0]
 8015286:	9202      	str	r2, [sp, #8]
 8015288:	4a17      	ldr	r2, [pc, #92]	@ (80152e8 <send_ssdp_notify+0xbc>)
 801528a:	9201      	str	r2, [sp, #4]
 801528c:	9300      	str	r3, [sp, #0]
 801528e:	4b17      	ldr	r3, [pc, #92]	@ (80152ec <send_ssdp_notify+0xc0>)
 8015290:	4a17      	ldr	r2, [pc, #92]	@ (80152f0 <send_ssdp_notify+0xc4>)
 8015292:	f020 f883 	bl	803539c <snprintf>

    if (udp_conn != NULL) {
 8015296:	693b      	ldr	r3, [r7, #16]
 8015298:	2b00      	cmp	r3, #0
 801529a:	d00f      	beq.n	80152bc <send_ssdp_notify+0x90>
        mg_send(udp_conn, buff, strlen(buff));
 801529c:	4b0d      	ldr	r3, [pc, #52]	@ (80152d4 <send_ssdp_notify+0xa8>)
 801529e:	681c      	ldr	r4, [r3, #0]
 80152a0:	4b0c      	ldr	r3, [pc, #48]	@ (80152d4 <send_ssdp_notify+0xa8>)
 80152a2:	681b      	ldr	r3, [r3, #0]
 80152a4:	4618      	mov	r0, r3
 80152a6:	f7fa fffb 	bl	80102a0 <strlen>
 80152aa:	4603      	mov	r3, r0
 80152ac:	461a      	mov	r2, r3
 80152ae:	4621      	mov	r1, r4
 80152b0:	6938      	ldr	r0, [r7, #16]
 80152b2:	f01b fec1 	bl	8031038 <mg_send>
        mg_close_conn(udp_conn);
 80152b6:	6938      	ldr	r0, [r7, #16]
 80152b8:	f018 fb92 	bl	802d9e0 <mg_close_conn>
    }
    free(buff);
 80152bc:	4b05      	ldr	r3, [pc, #20]	@ (80152d4 <send_ssdp_notify+0xa8>)
 80152be:	681b      	ldr	r3, [r3, #0]
 80152c0:	4618      	mov	r0, r3
 80152c2:	f007 fa51 	bl	801c768 <vPortFree>
 80152c6:	e000      	b.n	80152ca <send_ssdp_notify+0x9e>
	if (!buff) return; //TODO add log
 80152c8:	bf00      	nop
}
 80152ca:	371c      	adds	r7, #28
 80152cc:	46bd      	mov	sp, r7
 80152ce:	bd90      	pop	{r4, r7, pc}
 80152d0:	080438fc 	.word	0x080438fc
 80152d4:	20000bb8 	.word	0x20000bb8
 80152d8:	20000bbc 	.word	0x20000bbc
 80152dc:	080313fb 	.word	0x080313fb
 80152e0:	08040764 	.word	0x08040764
 80152e4:	20000bb4 	.word	0x20000bb4
 80152e8:	08040770 	.word	0x08040770
 80152ec:	08040768 	.word	0x08040768
 80152f0:	08043abc 	.word	0x08043abc

080152f4 <ssdp_set_id>:

void ssdp_set_id(const uint8_t* id, uint8_t id_len){
 80152f4:	b580      	push	{r7, lr}
 80152f6:	b084      	sub	sp, #16
 80152f8:	af00      	add	r7, sp, #0
 80152fa:	6078      	str	r0, [r7, #4]
 80152fc:	460b      	mov	r3, r1
 80152fe:	70fb      	strb	r3, [r7, #3]

	if (id && (id_len > 0)){
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	2b00      	cmp	r3, #0
 8015304:	d032      	beq.n	801536c <ssdp_set_id+0x78>
 8015306:	78fb      	ldrb	r3, [r7, #3]
 8015308:	2b00      	cmp	r3, #0
 801530a:	d02f      	beq.n	801536c <ssdp_set_id+0x78>
		if(dev_id) free(dev_id);
 801530c:	4b19      	ldr	r3, [pc, #100]	@ (8015374 <ssdp_set_id+0x80>)
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	2b00      	cmp	r3, #0
 8015312:	d004      	beq.n	801531e <ssdp_set_id+0x2a>
 8015314:	4b17      	ldr	r3, [pc, #92]	@ (8015374 <ssdp_set_id+0x80>)
 8015316:	681b      	ldr	r3, [r3, #0]
 8015318:	4618      	mov	r0, r3
 801531a:	f007 fa25 	bl	801c768 <vPortFree>
		dev_id = (char *) calloc(id_len * 2 + 1, sizeof(char));  // +1 для '\0'
 801531e:	78fb      	ldrb	r3, [r7, #3]
 8015320:	005b      	lsls	r3, r3, #1
 8015322:	3301      	adds	r3, #1
 8015324:	2101      	movs	r1, #1
 8015326:	4618      	mov	r0, r3
 8015328:	f7ff ff62 	bl	80151f0 <my_calloc>
 801532c:	4603      	mov	r3, r0
 801532e:	4a11      	ldr	r2, [pc, #68]	@ (8015374 <ssdp_set_id+0x80>)
 8015330:	6013      	str	r3, [r2, #0]
		if (dev_id ){
 8015332:	4b10      	ldr	r3, [pc, #64]	@ (8015374 <ssdp_set_id+0x80>)
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	2b00      	cmp	r3, #0
 8015338:	d017      	beq.n	801536a <ssdp_set_id+0x76>
	        // Проходим по каждому байту идентификатора
	        for (unsigned int i = 0; i < id_len; i++) {
 801533a:	2300      	movs	r3, #0
 801533c:	60fb      	str	r3, [r7, #12]
 801533e:	e00f      	b.n	8015360 <ssdp_set_id+0x6c>
	            // Конвертируем каждый байт в два символа и добавляем в строку
	            sprintf(&dev_id[i * 2], "%02X", id[i]);
 8015340:	4b0c      	ldr	r3, [pc, #48]	@ (8015374 <ssdp_set_id+0x80>)
 8015342:	681a      	ldr	r2, [r3, #0]
 8015344:	68fb      	ldr	r3, [r7, #12]
 8015346:	005b      	lsls	r3, r3, #1
 8015348:	18d0      	adds	r0, r2, r3
 801534a:	687a      	ldr	r2, [r7, #4]
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	4413      	add	r3, r2
 8015350:	781b      	ldrb	r3, [r3, #0]
 8015352:	461a      	mov	r2, r3
 8015354:	4908      	ldr	r1, [pc, #32]	@ (8015378 <ssdp_set_id+0x84>)
 8015356:	f020 f989 	bl	803566c <sprintf>
	        for (unsigned int i = 0; i < id_len; i++) {
 801535a:	68fb      	ldr	r3, [r7, #12]
 801535c:	3301      	adds	r3, #1
 801535e:	60fb      	str	r3, [r7, #12]
 8015360:	78fb      	ldrb	r3, [r7, #3]
 8015362:	68fa      	ldr	r2, [r7, #12]
 8015364:	429a      	cmp	r2, r3
 8015366:	d3eb      	bcc.n	8015340 <ssdp_set_id+0x4c>
 8015368:	e000      	b.n	801536c <ssdp_set_id+0x78>
	        }
		}else{
			return ;
 801536a:	bf00      	nop
		}
	}
}
 801536c:	3710      	adds	r7, #16
 801536e:	46bd      	mov	sp, r7
 8015370:	bd80      	pop	{r7, pc}
 8015372:	bf00      	nop
 8015374:	20000bb4 	.word	0x20000bb4
 8015378:	08040778 	.word	0x08040778

0801537c <dev_description_handler>:


static void dev_description_handler(struct mg_connection *c, struct mg_http_message *hm){
 801537c:	b580      	push	{r7, lr}
 801537e:	b08a      	sub	sp, #40	@ 0x28
 8015380:	af06      	add	r7, sp, #24
 8015382:	6078      	str	r0, [r7, #4]
 8015384:	6039      	str	r1, [r7, #0]
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8015386:	f107 0308 	add.w	r3, r7, #8
 801538a:	4918      	ldr	r1, [pc, #96]	@ (80153ec <dev_description_handler+0x70>)
 801538c:	4618      	mov	r0, r3
 801538e:	f01c fc29 	bl	8031be4 <mg_str_s>
 8015392:	6839      	ldr	r1, [r7, #0]
 8015394:	2300      	movs	r3, #0
 8015396:	9300      	str	r3, [sp, #0]
 8015398:	f107 0308 	add.w	r3, r7, #8
 801539c:	cb0c      	ldmia	r3, {r2, r3}
 801539e:	c903      	ldmia	r1, {r0, r1}
 80153a0:	f01c fcf3 	bl	8031d8a <mg_match>
 80153a4:	4603      	mov	r3, r0
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d014      	beq.n	80153d4 <dev_description_handler+0x58>
		mg_http_reply(c, 200, "", device_description, ssdp_dev_name, ssdp_dev_manufacturer_name, ssdp_dev_model_name, ssdp_dev_ver, dev_id, ip_addr_str);
 80153aa:	4b11      	ldr	r3, [pc, #68]	@ (80153f0 <dev_description_handler+0x74>)
 80153ac:	681b      	ldr	r3, [r3, #0]
 80153ae:	4a11      	ldr	r2, [pc, #68]	@ (80153f4 <dev_description_handler+0x78>)
 80153b0:	6812      	ldr	r2, [r2, #0]
 80153b2:	9205      	str	r2, [sp, #20]
 80153b4:	9304      	str	r3, [sp, #16]
 80153b6:	4b10      	ldr	r3, [pc, #64]	@ (80153f8 <dev_description_handler+0x7c>)
 80153b8:	9303      	str	r3, [sp, #12]
 80153ba:	4b10      	ldr	r3, [pc, #64]	@ (80153fc <dev_description_handler+0x80>)
 80153bc:	9302      	str	r3, [sp, #8]
 80153be:	4b10      	ldr	r3, [pc, #64]	@ (8015400 <dev_description_handler+0x84>)
 80153c0:	9301      	str	r3, [sp, #4]
 80153c2:	4b10      	ldr	r3, [pc, #64]	@ (8015404 <dev_description_handler+0x88>)
 80153c4:	9300      	str	r3, [sp, #0]
 80153c6:	4b10      	ldr	r3, [pc, #64]	@ (8015408 <dev_description_handler+0x8c>)
 80153c8:	4a10      	ldr	r2, [pc, #64]	@ (801540c <dev_description_handler+0x90>)
 80153ca:	21c8      	movs	r1, #200	@ 0xc8
 80153cc:	6878      	ldr	r0, [r7, #4]
 80153ce:	f012 ff5d 	bl	802828c <mg_http_reply>
	}else{
		mg_http_reply(c, 400, "", //TODO delete for release,
								"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET and POST methods\"}\r\n");
	}

}
 80153d2:	e006      	b.n	80153e2 <dev_description_handler+0x66>
		mg_http_reply(c, 400, "", //TODO delete for release,
 80153d4:	4b0e      	ldr	r3, [pc, #56]	@ (8015410 <dev_description_handler+0x94>)
 80153d6:	4a0d      	ldr	r2, [pc, #52]	@ (801540c <dev_description_handler+0x90>)
 80153d8:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80153dc:	6878      	ldr	r0, [r7, #4]
 80153de:	f012 ff55 	bl	802828c <mg_http_reply>
}
 80153e2:	bf00      	nop
 80153e4:	3710      	adds	r7, #16
 80153e6:	46bd      	mov	sp, r7
 80153e8:	bd80      	pop	{r7, pc}
 80153ea:	bf00      	nop
 80153ec:	08040780 	.word	0x08040780
 80153f0:	20000bb4 	.word	0x20000bb4
 80153f4:	20000bbc 	.word	0x20000bbc
 80153f8:	08040788 	.word	0x08040788
 80153fc:	0804078c 	.word	0x0804078c
 8015400:	080407a0 	.word	0x080407a0
 8015404:	080407b0 	.word	0x080407b0
 8015408:	08043918 	.word	0x08043918
 801540c:	08040784 	.word	0x08040784
 8015410:	080407bc 	.word	0x080407bc

08015414 <dev_404_handler>:


static void dev_404_handler(struct mg_connection *c, struct mg_http_message *hm){
 8015414:	b580      	push	{r7, lr}
 8015416:	b082      	sub	sp, #8
 8015418:	af00      	add	r7, sp, #0
 801541a:	6078      	str	r0, [r7, #4]
 801541c:	6039      	str	r1, [r7, #0]
	mg_http_reply(c, 404, "", //TODO delete for release,
 801541e:	4b05      	ldr	r3, [pc, #20]	@ (8015434 <dev_404_handler+0x20>)
 8015420:	4a05      	ldr	r2, [pc, #20]	@ (8015438 <dev_404_handler+0x24>)
 8015422:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8015426:	6878      	ldr	r0, [r7, #4]
 8015428:	f012 ff30 	bl	802828c <mg_http_reply>
							"{\"status\":\"error\",\"message\":\"Not found\"}\r\n");

}
 801542c:	bf00      	nop
 801542e:	3708      	adds	r7, #8
 8015430:	46bd      	mov	sp, r7
 8015432:	bd80      	pop	{r7, pc}
 8015434:	08040814 	.word	0x08040814
 8015438:	08040784 	.word	0x08040784

0801543c <ssdp_web_handler>:


static void ssdp_web_handler(struct mg_connection *c, int ev, void *ev_data){
 801543c:	b580      	push	{r7, lr}
 801543e:	b08c      	sub	sp, #48	@ 0x30
 8015440:	af02      	add	r7, sp, #8
 8015442:	60f8      	str	r0, [r7, #12]
 8015444:	60b9      	str	r1, [r7, #8]
 8015446:	607a      	str	r2, [r7, #4]

	if (ev == MG_EV_HTTP_MSG) {
 8015448:	68bb      	ldr	r3, [r7, #8]
 801544a:	2b0b      	cmp	r3, #11
 801544c:	d130      	bne.n	80154b0 <ssdp_web_handler+0x74>
		struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	627b      	str	r3, [r7, #36]	@ 0x24

		if (mg_match(hm->uri, mg_str("/device_description.xml"), NULL)) {
 8015452:	f107 0314 	add.w	r3, r7, #20
 8015456:	4918      	ldr	r1, [pc, #96]	@ (80154b8 <ssdp_web_handler+0x7c>)
 8015458:	4618      	mov	r0, r3
 801545a:	f01c fbc3 	bl	8031be4 <mg_str_s>
 801545e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015460:	2300      	movs	r3, #0
 8015462:	9300      	str	r3, [sp, #0]
 8015464:	f107 0314 	add.w	r3, r7, #20
 8015468:	cb0c      	ldmia	r3, {r2, r3}
 801546a:	3108      	adds	r1, #8
 801546c:	c903      	ldmia	r1, {r0, r1}
 801546e:	f01c fc8c 	bl	8031d8a <mg_match>
 8015472:	4603      	mov	r3, r0
 8015474:	2b00      	cmp	r3, #0
 8015476:	d004      	beq.n	8015482 <ssdp_web_handler+0x46>
			dev_description_handler(c, hm);
 8015478:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801547a:	68f8      	ldr	r0, [r7, #12]
 801547c:	f7ff ff7e 	bl	801537c <dev_description_handler>
		}else if (mg_match(hm->uri, mg_str("/*"), NULL)) {
			dev_404_handler(c, hm);
		}
	}
}
 8015480:	e016      	b.n	80154b0 <ssdp_web_handler+0x74>
		}else if (mg_match(hm->uri, mg_str("/*"), NULL)) {
 8015482:	f107 031c 	add.w	r3, r7, #28
 8015486:	490d      	ldr	r1, [pc, #52]	@ (80154bc <ssdp_web_handler+0x80>)
 8015488:	4618      	mov	r0, r3
 801548a:	f01c fbab 	bl	8031be4 <mg_str_s>
 801548e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015490:	2300      	movs	r3, #0
 8015492:	9300      	str	r3, [sp, #0]
 8015494:	f107 031c 	add.w	r3, r7, #28
 8015498:	cb0c      	ldmia	r3, {r2, r3}
 801549a:	3108      	adds	r1, #8
 801549c:	c903      	ldmia	r1, {r0, r1}
 801549e:	f01c fc74 	bl	8031d8a <mg_match>
 80154a2:	4603      	mov	r3, r0
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d003      	beq.n	80154b0 <ssdp_web_handler+0x74>
			dev_404_handler(c, hm);
 80154a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80154aa:	68f8      	ldr	r0, [r7, #12]
 80154ac:	f7ff ffb2 	bl	8015414 <dev_404_handler>
}
 80154b0:	bf00      	nop
 80154b2:	3728      	adds	r7, #40	@ 0x28
 80154b4:	46bd      	mov	sp, r7
 80154b6:	bd80      	pop	{r7, pc}
 80154b8:	08040840 	.word	0x08040840
 80154bc:	08040858 	.word	0x08040858

080154c0 <ssdp_start_server>:


void ssdp_start_server(void * param_mgr, void * param_mif){
 80154c0:	b580      	push	{r7, lr}
 80154c2:	b086      	sub	sp, #24
 80154c4:	af04      	add	r7, sp, #16
 80154c6:	6078      	str	r0, [r7, #4]
 80154c8:	6039      	str	r1, [r7, #0]
	mgr 		= (struct mg_mgr *)param_mgr;
 80154ca:	4a1a      	ldr	r2, [pc, #104]	@ (8015534 <ssdp_start_server+0x74>)
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	6013      	str	r3, [r2, #0]
	mif			= (struct mg_tcpip_if *)param_mif;
 80154d0:	4a19      	ldr	r2, [pc, #100]	@ (8015538 <ssdp_start_server+0x78>)
 80154d2:	683b      	ldr	r3, [r7, #0]
 80154d4:	6013      	str	r3, [r2, #0]
	ip_addr_str = (char *) calloc(IP_v6_STR_LEN, sizeof(char));
 80154d6:	2101      	movs	r1, #1
 80154d8:	2028      	movs	r0, #40	@ 0x28
 80154da:	f7ff fe89 	bl	80151f0 <my_calloc>
 80154de:	4603      	mov	r3, r0
 80154e0:	4a16      	ldr	r2, [pc, #88]	@ (801553c <ssdp_start_server+0x7c>)
 80154e2:	6013      	str	r3, [r2, #0]
	if (!ip_addr_str) return; //TODO add logging
 80154e4:	4b15      	ldr	r3, [pc, #84]	@ (801553c <ssdp_start_server+0x7c>)
 80154e6:	681b      	ldr	r3, [r3, #0]
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d01e      	beq.n	801552a <ssdp_start_server+0x6a>

	ssdp_set_id(mif->mac, mac_len);
 80154ec:	4b12      	ldr	r3, [pc, #72]	@ (8015538 <ssdp_start_server+0x78>)
 80154ee:	681b      	ldr	r3, [r3, #0]
 80154f0:	2106      	movs	r1, #6
 80154f2:	4618      	mov	r0, r3
 80154f4:	f7ff fefe 	bl	80152f4 <ssdp_set_id>

	mg_timer_add(mgr, 30000, MG_TIMER_REPEAT | MG_TIMER_RUN_NOW, send_ssdp_notify, mgr);
 80154f8:	4b0e      	ldr	r3, [pc, #56]	@ (8015534 <ssdp_start_server+0x74>)
 80154fa:	6819      	ldr	r1, [r3, #0]
 80154fc:	4b0d      	ldr	r3, [pc, #52]	@ (8015534 <ssdp_start_server+0x74>)
 80154fe:	681b      	ldr	r3, [r3, #0]
 8015500:	9302      	str	r3, [sp, #8]
 8015502:	4b0f      	ldr	r3, [pc, #60]	@ (8015540 <ssdp_start_server+0x80>)
 8015504:	9301      	str	r3, [sp, #4]
 8015506:	2303      	movs	r3, #3
 8015508:	9300      	str	r3, [sp, #0]
 801550a:	f247 5230 	movw	r2, #30000	@ 0x7530
 801550e:	f04f 0300 	mov.w	r3, #0
 8015512:	4608      	mov	r0, r1
 8015514:	f018 fbfc 	bl	802dd10 <mg_timer_add>
	mg_http_listen(mgr, "http://0.0.0.0:40000", ssdp_web_handler, mif);
 8015518:	4b06      	ldr	r3, [pc, #24]	@ (8015534 <ssdp_start_server+0x74>)
 801551a:	6818      	ldr	r0, [r3, #0]
 801551c:	4b06      	ldr	r3, [pc, #24]	@ (8015538 <ssdp_start_server+0x78>)
 801551e:	681b      	ldr	r3, [r3, #0]
 8015520:	4a08      	ldr	r2, [pc, #32]	@ (8015544 <ssdp_start_server+0x84>)
 8015522:	4909      	ldr	r1, [pc, #36]	@ (8015548 <ssdp_start_server+0x88>)
 8015524:	f014 fe34 	bl	802a190 <mg_http_listen>
 8015528:	e000      	b.n	801552c <ssdp_start_server+0x6c>
	if (!ip_addr_str) return; //TODO add logging
 801552a:	bf00      	nop
}
 801552c:	3708      	adds	r7, #8
 801552e:	46bd      	mov	sp, r7
 8015530:	bd80      	pop	{r7, pc}
 8015532:	bf00      	nop
 8015534:	20000bc0 	.word	0x20000bc0
 8015538:	20000bc4 	.word	0x20000bc4
 801553c:	20000bbc 	.word	0x20000bbc
 8015540:	0801522d 	.word	0x0801522d
 8015544:	0801543d 	.word	0x0801543d
 8015548:	0804085c 	.word	0x0804085c

0801554c <function_prototype>:
static void sFLASH_SPI_ReadBuffer(uint8_t * buffer, uint16_t size);
void sFLASH_SendByte(uint8_t byte);
void sFLASH_CS_LOW(void);
void sFLASH_CS_HIGH(void);

void function_prototype(void){};
 801554c:	b480      	push	{r7}
 801554e:	af00      	add	r7, sp, #0
 8015550:	bf00      	nop
 8015552:	46bd      	mov	sp, r7
 8015554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015558:	4770      	bx	lr
	...

0801555c <SPI_flash_reg_cb>:

//void (*flash_conf.select_chip)() = &function_prototype;

/* Private functions ---------------------------------------------------------*/
void SPI_flash_reg_cb(void (*chip_select)(void), void (*chip_deselect)(void), int (*receive_buffer)(uint8_t * buffer, uint16_t size), void (*send_byte)(uint8_t)){
 801555c:	b480      	push	{r7}
 801555e:	b085      	sub	sp, #20
 8015560:	af00      	add	r7, sp, #0
 8015562:	60f8      	str	r0, [r7, #12]
 8015564:	60b9      	str	r1, [r7, #8]
 8015566:	607a      	str	r2, [r7, #4]
 8015568:	603b      	str	r3, [r7, #0]

	if (chip_select){
 801556a:	68fb      	ldr	r3, [r7, #12]
 801556c:	2b00      	cmp	r3, #0
 801556e:	d003      	beq.n	8015578 <SPI_flash_reg_cb+0x1c>
		flash_conf.select_chip		= chip_select;
 8015570:	4a0e      	ldr	r2, [pc, #56]	@ (80155ac <SPI_flash_reg_cb+0x50>)
 8015572:	68fb      	ldr	r3, [r7, #12]
 8015574:	60d3      	str	r3, [r2, #12]
 8015576:	e002      	b.n	801557e <SPI_flash_reg_cb+0x22>
	}else{
		flash_conf.select_chip		= function_prototype;
 8015578:	4b0c      	ldr	r3, [pc, #48]	@ (80155ac <SPI_flash_reg_cb+0x50>)
 801557a:	4a0d      	ldr	r2, [pc, #52]	@ (80155b0 <SPI_flash_reg_cb+0x54>)
 801557c:	60da      	str	r2, [r3, #12]
	}
	if (chip_deselect){
 801557e:	68bb      	ldr	r3, [r7, #8]
 8015580:	2b00      	cmp	r3, #0
 8015582:	d003      	beq.n	801558c <SPI_flash_reg_cb+0x30>
		flash_conf.deselect_chip	= chip_deselect;
 8015584:	4a09      	ldr	r2, [pc, #36]	@ (80155ac <SPI_flash_reg_cb+0x50>)
 8015586:	68bb      	ldr	r3, [r7, #8]
 8015588:	6113      	str	r3, [r2, #16]
 801558a:	e002      	b.n	8015592 <SPI_flash_reg_cb+0x36>
	}else{
		flash_conf.deselect_chip	= function_prototype;
 801558c:	4b07      	ldr	r3, [pc, #28]	@ (80155ac <SPI_flash_reg_cb+0x50>)
 801558e:	4a08      	ldr	r2, [pc, #32]	@ (80155b0 <SPI_flash_reg_cb+0x54>)
 8015590:	611a      	str	r2, [r3, #16]
	}

	flash_conf.receive_buffer	= receive_buffer;
 8015592:	4a06      	ldr	r2, [pc, #24]	@ (80155ac <SPI_flash_reg_cb+0x50>)
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	6053      	str	r3, [r2, #4]
	flash_conf.send_byte		= send_byte;
 8015598:	4a04      	ldr	r2, [pc, #16]	@ (80155ac <SPI_flash_reg_cb+0x50>)
 801559a:	683b      	ldr	r3, [r7, #0]
 801559c:	6093      	str	r3, [r2, #8]

}
 801559e:	bf00      	nop
 80155a0:	3714      	adds	r7, #20
 80155a2:	46bd      	mov	sp, r7
 80155a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155a8:	4770      	bx	lr
 80155aa:	bf00      	nop
 80155ac:	20000bc8 	.word	0x20000bc8
 80155b0:	0801554d 	.word	0x0801554d

080155b4 <sFLASH_Reset>:

void SPI_flash_io_init(void){

}

void sFLASH_Reset(void){
 80155b4:	b580      	push	{r7, lr}
 80155b6:	af00      	add	r7, sp, #0
    sFLASH_CS_LOW();
 80155b8:	f000 f8d2 	bl	8015760 <sFLASH_CS_LOW>
    sFLASH_SendByte(sFLASH_CMD_ENABLE_RESET);
 80155bc:	2066      	movs	r0, #102	@ 0x66
 80155be:	f000 fa8d 	bl	8015adc <sFLASH_SendByte>
    sFLASH_SendByte(sFLASH_CMD_RESET);
 80155c2:	2099      	movs	r0, #153	@ 0x99
 80155c4:	f000 fa8a 	bl	8015adc <sFLASH_SendByte>
    sFLASH_CS_HIGH();
 80155c8:	f000 f8d4 	bl	8015774 <sFLASH_CS_HIGH>
}
 80155cc:	bf00      	nop
 80155ce:	bd80      	pop	{r7, pc}

080155d0 <sFLASH_Init>:

void sFLASH_Init(void){
 80155d0:	b580      	push	{r7, lr}
 80155d2:	af00      	add	r7, sp, #0

    HAL_Delay(100);
 80155d4:	2064      	movs	r0, #100	@ 0x64
 80155d6:	f000 fafb 	bl	8015bd0 <HAL_Delay>
    sFLASH_Reset();
 80155da:	f7ff ffeb 	bl	80155b4 <sFLASH_Reset>
    HAL_Delay(100);
 80155de:	2064      	movs	r0, #100	@ 0x64
 80155e0:	f000 faf6 	bl	8015bd0 <HAL_Delay>
    HAL_Delay(100);
 80155e4:	2064      	movs	r0, #100	@ 0x64
 80155e6:	f000 faf3 	bl	8015bd0 <HAL_Delay>
}
 80155ea:	bf00      	nop
 80155ec:	bd80      	pop	{r7, pc}
	...

080155f0 <sFLASH_GetInfo>:

struct SPI_flash_info sFLASH_GetInfo(void){
 80155f0:	b590      	push	{r4, r7, lr}
 80155f2:	b085      	sub	sp, #20
 80155f4:	af00      	add	r7, sp, #0
 80155f6:	6078      	str	r0, [r7, #4]
	uint32_t flash_id;

	sFLASH_Init();
 80155f8:	f7ff ffea 	bl	80155d0 <sFLASH_Init>

	flash_id = sFLASH_ReadID();
 80155fc:	f000 fa18 	bl	8015a30 <sFLASH_ReadID>
 8015600:	60f8      	str	r0, [r7, #12]

	switch (flash_id) {
 8015602:	68fb      	ldr	r3, [r7, #12]
 8015604:	4a4f      	ldr	r2, [pc, #316]	@ (8015744 <sFLASH_GetInfo+0x154>)
 8015606:	4293      	cmp	r3, r2
 8015608:	d076      	beq.n	80156f8 <sFLASH_GetInfo+0x108>
 801560a:	68fb      	ldr	r3, [r7, #12]
 801560c:	4a4d      	ldr	r2, [pc, #308]	@ (8015744 <sFLASH_GetInfo+0x154>)
 801560e:	4293      	cmp	r3, r2
 8015610:	f0c0 8088 	bcc.w	8015724 <sFLASH_GetInfo+0x134>
 8015614:	68fb      	ldr	r3, [r7, #12]
 8015616:	4a4c      	ldr	r2, [pc, #304]	@ (8015748 <sFLASH_GetInfo+0x158>)
 8015618:	4293      	cmp	r3, r2
 801561a:	f200 8083 	bhi.w	8015724 <sFLASH_GetInfo+0x134>
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	4a4a      	ldr	r2, [pc, #296]	@ (801574c <sFLASH_GetInfo+0x15c>)
 8015622:	4293      	cmp	r3, r2
 8015624:	d37e      	bcc.n	8015724 <sFLASH_GetInfo+0x134>
 8015626:	68fa      	ldr	r2, [r7, #12]
 8015628:	4b49      	ldr	r3, [pc, #292]	@ (8015750 <sFLASH_GetInfo+0x160>)
 801562a:	4413      	add	r3, r2
 801562c:	2b03      	cmp	r3, #3
 801562e:	d879      	bhi.n	8015724 <sFLASH_GetInfo+0x134>
 8015630:	a201      	add	r2, pc, #4	@ (adr r2, 8015638 <sFLASH_GetInfo+0x48>)
 8015632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015636:	bf00      	nop
 8015638:	08015649 	.word	0x08015649
 801563c:	08015675 	.word	0x08015675
 8015640:	080156a1 	.word	0x080156a1
 8015644:	080156cd 	.word	0x080156cd
		case sFLASH_W25Q16BV_ID:
			flash_info.flash_id = sFLASH_W25Q16BV_ID;
 8015648:	4b42      	ldr	r3, [pc, #264]	@ (8015754 <sFLASH_GetInfo+0x164>)
 801564a:	4a40      	ldr	r2, [pc, #256]	@ (801574c <sFLASH_GetInfo+0x15c>)
 801564c:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 801564e:	4b41      	ldr	r3, [pc, #260]	@ (8015754 <sFLASH_GetInfo+0x164>)
 8015650:	2201      	movs	r2, #1
 8015652:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 8015654:	4b3f      	ldr	r3, [pc, #252]	@ (8015754 <sFLASH_GetInfo+0x164>)
 8015656:	2201      	movs	r2, #1
 8015658:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 801565a:	4b3e      	ldr	r3, [pc, #248]	@ (8015754 <sFLASH_GetInfo+0x164>)
 801565c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8015660:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 8015662:	4b3c      	ldr	r3, [pc, #240]	@ (8015754 <sFLASH_GetInfo+0x164>)
 8015664:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015668:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 512;
 801566a:	4b3a      	ldr	r3, [pc, #232]	@ (8015754 <sFLASH_GetInfo+0x164>)
 801566c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015670:	819a      	strh	r2, [r3, #12]
			break;
 8015672:	e05b      	b.n	801572c <sFLASH_GetInfo+0x13c>
		case sFLASH_W25Q32BV_ID:
			flash_info.flash_id = sFLASH_W25Q32BV_ID;
 8015674:	4b37      	ldr	r3, [pc, #220]	@ (8015754 <sFLASH_GetInfo+0x164>)
 8015676:	4a38      	ldr	r2, [pc, #224]	@ (8015758 <sFLASH_GetInfo+0x168>)
 8015678:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 801567a:	4b36      	ldr	r3, [pc, #216]	@ (8015754 <sFLASH_GetInfo+0x164>)
 801567c:	2201      	movs	r2, #1
 801567e:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 8015680:	4b34      	ldr	r3, [pc, #208]	@ (8015754 <sFLASH_GetInfo+0x164>)
 8015682:	2201      	movs	r2, #1
 8015684:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 8015686:	4b33      	ldr	r3, [pc, #204]	@ (8015754 <sFLASH_GetInfo+0x164>)
 8015688:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801568c:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 801568e:	4b31      	ldr	r3, [pc, #196]	@ (8015754 <sFLASH_GetInfo+0x164>)
 8015690:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015694:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 1024;
 8015696:	4b2f      	ldr	r3, [pc, #188]	@ (8015754 <sFLASH_GetInfo+0x164>)
 8015698:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801569c:	819a      	strh	r2, [r3, #12]
			break;
 801569e:	e045      	b.n	801572c <sFLASH_GetInfo+0x13c>
		case sFLASH_W25Q64BV_ID:
			flash_info.flash_id = sFLASH_W25Q64BV_ID;
 80156a0:	4b2c      	ldr	r3, [pc, #176]	@ (8015754 <sFLASH_GetInfo+0x164>)
 80156a2:	4a2e      	ldr	r2, [pc, #184]	@ (801575c <sFLASH_GetInfo+0x16c>)
 80156a4:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 80156a6:	4b2b      	ldr	r3, [pc, #172]	@ (8015754 <sFLASH_GetInfo+0x164>)
 80156a8:	2201      	movs	r2, #1
 80156aa:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 80156ac:	4b29      	ldr	r3, [pc, #164]	@ (8015754 <sFLASH_GetInfo+0x164>)
 80156ae:	2201      	movs	r2, #1
 80156b0:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 80156b2:	4b28      	ldr	r3, [pc, #160]	@ (8015754 <sFLASH_GetInfo+0x164>)
 80156b4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80156b8:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 80156ba:	4b26      	ldr	r3, [pc, #152]	@ (8015754 <sFLASH_GetInfo+0x164>)
 80156bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80156c0:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 2048;
 80156c2:	4b24      	ldr	r3, [pc, #144]	@ (8015754 <sFLASH_GetInfo+0x164>)
 80156c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80156c8:	819a      	strh	r2, [r3, #12]
			break;
 80156ca:	e02f      	b.n	801572c <sFLASH_GetInfo+0x13c>
		case sFLASH_W25Q128BV_ID:
			flash_info.flash_id = sFLASH_W25Q128BV_ID;
 80156cc:	4b21      	ldr	r3, [pc, #132]	@ (8015754 <sFLASH_GetInfo+0x164>)
 80156ce:	4a1e      	ldr	r2, [pc, #120]	@ (8015748 <sFLASH_GetInfo+0x158>)
 80156d0:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 80156d2:	4b20      	ldr	r3, [pc, #128]	@ (8015754 <sFLASH_GetInfo+0x164>)
 80156d4:	2201      	movs	r2, #1
 80156d6:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 80156d8:	4b1e      	ldr	r3, [pc, #120]	@ (8015754 <sFLASH_GetInfo+0x164>)
 80156da:	2201      	movs	r2, #1
 80156dc:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 80156de:	4b1d      	ldr	r3, [pc, #116]	@ (8015754 <sFLASH_GetInfo+0x164>)
 80156e0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80156e4:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 80156e6:	4b1b      	ldr	r3, [pc, #108]	@ (8015754 <sFLASH_GetInfo+0x164>)
 80156e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80156ec:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 4096;
 80156ee:	4b19      	ldr	r3, [pc, #100]	@ (8015754 <sFLASH_GetInfo+0x164>)
 80156f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80156f4:	819a      	strh	r2, [r3, #12]
			break;
 80156f6:	e019      	b.n	801572c <sFLASH_GetInfo+0x13c>
		case sFLASH_MX25L32xxx_ID:
			flash_info.flash_id = sFLASH_MX25L32xxx_ID;
 80156f8:	4b16      	ldr	r3, [pc, #88]	@ (8015754 <sFLASH_GetInfo+0x164>)
 80156fa:	4a12      	ldr	r2, [pc, #72]	@ (8015744 <sFLASH_GetInfo+0x154>)
 80156fc:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 80156fe:	4b15      	ldr	r3, [pc, #84]	@ (8015754 <sFLASH_GetInfo+0x164>)
 8015700:	2201      	movs	r2, #1
 8015702:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 8015704:	4b13      	ldr	r3, [pc, #76]	@ (8015754 <sFLASH_GetInfo+0x164>)
 8015706:	2201      	movs	r2, #1
 8015708:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 801570a:	4b12      	ldr	r3, [pc, #72]	@ (8015754 <sFLASH_GetInfo+0x164>)
 801570c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8015710:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 8015712:	4b10      	ldr	r3, [pc, #64]	@ (8015754 <sFLASH_GetInfo+0x164>)
 8015714:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015718:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 1024;
 801571a:	4b0e      	ldr	r3, [pc, #56]	@ (8015754 <sFLASH_GetInfo+0x164>)
 801571c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8015720:	819a      	strh	r2, [r3, #12]
			break;
 8015722:	e003      	b.n	801572c <sFLASH_GetInfo+0x13c>

		default:
			flash_info.flash_id = sFLASH_UNNOUN_ID;
 8015724:	4b0b      	ldr	r3, [pc, #44]	@ (8015754 <sFLASH_GetInfo+0x164>)
 8015726:	2200      	movs	r2, #0
 8015728:	601a      	str	r2, [r3, #0]
			break;
 801572a:	bf00      	nop
	}

	return flash_info;
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	4a09      	ldr	r2, [pc, #36]	@ (8015754 <sFLASH_GetInfo+0x164>)
 8015730:	461c      	mov	r4, r3
 8015732:	4613      	mov	r3, r2
 8015734:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015736:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

}
 801573a:	6878      	ldr	r0, [r7, #4]
 801573c:	3714      	adds	r7, #20
 801573e:	46bd      	mov	sp, r7
 8015740:	bd90      	pop	{r4, r7, pc}
 8015742:	bf00      	nop
 8015744:	00c22016 	.word	0x00c22016
 8015748:	00ef4018 	.word	0x00ef4018
 801574c:	00ef4015 	.word	0x00ef4015
 8015750:	ff10bfeb 	.word	0xff10bfeb
 8015754:	20000bdc 	.word	0x20000bdc
 8015758:	00ef4016 	.word	0x00ef4016
 801575c:	00ef4017 	.word	0x00ef4017

08015760 <sFLASH_CS_LOW>:

void sFLASH_CS_LOW(void){ //select chip
 8015760:	b580      	push	{r7, lr}
 8015762:	af00      	add	r7, sp, #0

	flash_conf.select_chip();
 8015764:	4b02      	ldr	r3, [pc, #8]	@ (8015770 <sFLASH_CS_LOW+0x10>)
 8015766:	68db      	ldr	r3, [r3, #12]
 8015768:	4798      	blx	r3

}
 801576a:	bf00      	nop
 801576c:	bd80      	pop	{r7, pc}
 801576e:	bf00      	nop
 8015770:	20000bc8 	.word	0x20000bc8

08015774 <sFLASH_CS_HIGH>:

void sFLASH_CS_HIGH(void){ //deselect chip
 8015774:	b580      	push	{r7, lr}
 8015776:	af00      	add	r7, sp, #0

	flash_conf.deselect_chip();
 8015778:	4b02      	ldr	r3, [pc, #8]	@ (8015784 <sFLASH_CS_HIGH+0x10>)
 801577a:	691b      	ldr	r3, [r3, #16]
 801577c:	4798      	blx	r3
}
 801577e:	bf00      	nop
 8015780:	bd80      	pop	{r7, pc}
 8015782:	bf00      	nop
 8015784:	20000bc8 	.word	0x20000bc8

08015788 <sFLASH_EraseSector>:
  * @brief  Erases the specified FLASH sector.
  * @param  SectorAddr: address of the sector to erase.
  * @retval None
  */
void sFLASH_EraseSector(uint32_t SectorAddr)
{
 8015788:	b580      	push	{r7, lr}
 801578a:	b082      	sub	sp, #8
 801578c:	af00      	add	r7, sp, #0
 801578e:	6078      	str	r0, [r7, #4]
  /*!< Send write enable instruction */
  sFLASH_WriteEnable();
 8015790:	f000 f9b4 	bl	8015afc <sFLASH_WriteEnable>

  /*!< Sector Erase */
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8015794:	f7ff ffe4 	bl	8015760 <sFLASH_CS_LOW>
  /*!< Send Sector Erase instruction */
  sFLASH_SendByte(sFLASH_CMD_SE);
 8015798:	2020      	movs	r0, #32
 801579a:	f000 f99f 	bl	8015adc <sFLASH_SendByte>
  /*!< Send SectorAddr high nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	0c1b      	lsrs	r3, r3, #16
 80157a2:	b2db      	uxtb	r3, r3
 80157a4:	4618      	mov	r0, r3
 80157a6:	f000 f999 	bl	8015adc <sFLASH_SendByte>
  /*!< Send SectorAddr medium nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF00) >> 8);
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	0a1b      	lsrs	r3, r3, #8
 80157ae:	b2db      	uxtb	r3, r3
 80157b0:	4618      	mov	r0, r3
 80157b2:	f000 f993 	bl	8015adc <sFLASH_SendByte>
  /*!< Send SectorAddr low nibble address byte */
  sFLASH_SendByte(SectorAddr & 0xFF);
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	b2db      	uxtb	r3, r3
 80157ba:	4618      	mov	r0, r3
 80157bc:	f000 f98e 	bl	8015adc <sFLASH_SendByte>
  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 80157c0:	f7ff ffd8 	bl	8015774 <sFLASH_CS_HIGH>

  /*!< Wait the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 80157c4:	f000 f9a5 	bl	8015b12 <sFLASH_WaitForWriteEnd>
}
 80157c8:	bf00      	nop
 80157ca:	3708      	adds	r7, #8
 80157cc:	46bd      	mov	sp, r7
 80157ce:	bd80      	pop	{r7, pc}

080157d0 <sFLASH_WritePage>:
  * @param  NumByteToWrite: number of bytes to write to the FLASH, must be equal
  *         or less than "sFLASH_PAGESIZE" value.
  * @retval None
  */
void sFLASH_WritePage(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 80157d0:	b580      	push	{r7, lr}
 80157d2:	b084      	sub	sp, #16
 80157d4:	af00      	add	r7, sp, #0
 80157d6:	60f8      	str	r0, [r7, #12]
 80157d8:	60b9      	str	r1, [r7, #8]
 80157da:	4613      	mov	r3, r2
 80157dc:	80fb      	strh	r3, [r7, #6]
  /*!< Enable the write access to the FLASH */
  sFLASH_WriteEnable();
 80157de:	f000 f98d 	bl	8015afc <sFLASH_WriteEnable>

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 80157e2:	f7ff ffbd 	bl	8015760 <sFLASH_CS_LOW>
  /*!< Send "Write to Memory " instruction */
  sFLASH_SendByte(sFLASH_CMD_WRITE);
 80157e6:	2002      	movs	r0, #2
 80157e8:	f000 f978 	bl	8015adc <sFLASH_SendByte>
  /*!< Send WriteAddr high nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
 80157ec:	68bb      	ldr	r3, [r7, #8]
 80157ee:	0c1b      	lsrs	r3, r3, #16
 80157f0:	b2db      	uxtb	r3, r3
 80157f2:	4618      	mov	r0, r3
 80157f4:	f000 f972 	bl	8015adc <sFLASH_SendByte>
  /*!< Send WriteAddr medium nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF00) >> 8);
 80157f8:	68bb      	ldr	r3, [r7, #8]
 80157fa:	0a1b      	lsrs	r3, r3, #8
 80157fc:	b2db      	uxtb	r3, r3
 80157fe:	4618      	mov	r0, r3
 8015800:	f000 f96c 	bl	8015adc <sFLASH_SendByte>
  /*!< Send WriteAddr low nibble address byte to write to */
  sFLASH_SendByte(WriteAddr & 0xFF);
 8015804:	68bb      	ldr	r3, [r7, #8]
 8015806:	b2db      	uxtb	r3, r3
 8015808:	4618      	mov	r0, r3
 801580a:	f000 f967 	bl	8015adc <sFLASH_SendByte>

  /*!< while there is data to be written on the FLASH */
  while (NumByteToWrite--)
 801580e:	e007      	b.n	8015820 <sFLASH_WritePage+0x50>
  {
    /*!< Send the current byte */
    sFLASH_SendByte(*pBuffer);
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	781b      	ldrb	r3, [r3, #0]
 8015814:	4618      	mov	r0, r3
 8015816:	f000 f961 	bl	8015adc <sFLASH_SendByte>
    /*!< Point on the next byte to be written */
    pBuffer++;
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	3301      	adds	r3, #1
 801581e:	60fb      	str	r3, [r7, #12]
  while (NumByteToWrite--)
 8015820:	88fb      	ldrh	r3, [r7, #6]
 8015822:	1e5a      	subs	r2, r3, #1
 8015824:	80fa      	strh	r2, [r7, #6]
 8015826:	2b00      	cmp	r3, #0
 8015828:	d1f2      	bne.n	8015810 <sFLASH_WritePage+0x40>
  }

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 801582a:	f7ff ffa3 	bl	8015774 <sFLASH_CS_HIGH>

  /*!< Wait the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 801582e:	f000 f970 	bl	8015b12 <sFLASH_WaitForWriteEnd>
}
 8015832:	bf00      	nop
 8015834:	3710      	adds	r7, #16
 8015836:	46bd      	mov	sp, r7
 8015838:	bd80      	pop	{r7, pc}

0801583a <sFLASH_WriteBuffer>:
  * @param  WriteAddr: FLASH's internal address to write to.
  * @param  NumByteToWrite: number of bytes to write to the FLASH.
  * @retval None
  */
void sFLASH_WriteBuffer(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 801583a:	b580      	push	{r7, lr}
 801583c:	b086      	sub	sp, #24
 801583e:	af00      	add	r7, sp, #0
 8015840:	60f8      	str	r0, [r7, #12]
 8015842:	60b9      	str	r1, [r7, #8]
 8015844:	4613      	mov	r3, r2
 8015846:	80fb      	strh	r3, [r7, #6]
  uint8_t NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
 8015848:	2300      	movs	r3, #0
 801584a:	75fb      	strb	r3, [r7, #23]
 801584c:	2300      	movs	r3, #0
 801584e:	75bb      	strb	r3, [r7, #22]
 8015850:	2300      	movs	r3, #0
 8015852:	757b      	strb	r3, [r7, #21]
 8015854:	2300      	movs	r3, #0
 8015856:	753b      	strb	r3, [r7, #20]
 8015858:	2300      	movs	r3, #0
 801585a:	74fb      	strb	r3, [r7, #19]

  Addr = WriteAddr % sFLASH_SPI_PAGESIZE;
 801585c:	68bb      	ldr	r3, [r7, #8]
 801585e:	757b      	strb	r3, [r7, #21]
  count = sFLASH_SPI_PAGESIZE - Addr;
 8015860:	7d7b      	ldrb	r3, [r7, #21]
 8015862:	425b      	negs	r3, r3
 8015864:	753b      	strb	r3, [r7, #20]
  NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 8015866:	88fb      	ldrh	r3, [r7, #6]
 8015868:	0a1b      	lsrs	r3, r3, #8
 801586a:	b29b      	uxth	r3, r3
 801586c:	75fb      	strb	r3, [r7, #23]
  NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 801586e:	88fb      	ldrh	r3, [r7, #6]
 8015870:	75bb      	strb	r3, [r7, #22]

  if (Addr == 0) /*!< WriteAddr is sFLASH_PAGESIZE aligned  */
 8015872:	7d7b      	ldrb	r3, [r7, #21]
 8015874:	2b00      	cmp	r3, #0
 8015876:	d124      	bne.n	80158c2 <sFLASH_WriteBuffer+0x88>
  {
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 8015878:	7dfb      	ldrb	r3, [r7, #23]
 801587a:	2b00      	cmp	r3, #0
 801587c:	d114      	bne.n	80158a8 <sFLASH_WriteBuffer+0x6e>
    {
      sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 801587e:	88fb      	ldrh	r3, [r7, #6]
 8015880:	461a      	mov	r2, r3
 8015882:	68b9      	ldr	r1, [r7, #8]
 8015884:	68f8      	ldr	r0, [r7, #12]
 8015886:	f7ff ffa3 	bl	80157d0 <sFLASH_WritePage>
      {
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
      }
    }
  }
}
 801588a:	e07b      	b.n	8015984 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 801588c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015890:	68b9      	ldr	r1, [r7, #8]
 8015892:	68f8      	ldr	r0, [r7, #12]
 8015894:	f7ff ff9c 	bl	80157d0 <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 8015898:	68bb      	ldr	r3, [r7, #8]
 801589a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 801589e:	60bb      	str	r3, [r7, #8]
        pBuffer += sFLASH_SPI_PAGESIZE;
 80158a0:	68fb      	ldr	r3, [r7, #12]
 80158a2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80158a6:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 80158a8:	7dfb      	ldrb	r3, [r7, #23]
 80158aa:	1e5a      	subs	r2, r3, #1
 80158ac:	75fa      	strb	r2, [r7, #23]
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	d1ec      	bne.n	801588c <sFLASH_WriteBuffer+0x52>
      sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 80158b2:	7dbb      	ldrb	r3, [r7, #22]
 80158b4:	b29b      	uxth	r3, r3
 80158b6:	461a      	mov	r2, r3
 80158b8:	68b9      	ldr	r1, [r7, #8]
 80158ba:	68f8      	ldr	r0, [r7, #12]
 80158bc:	f7ff ff88 	bl	80157d0 <sFLASH_WritePage>
}
 80158c0:	e060      	b.n	8015984 <sFLASH_WriteBuffer+0x14a>
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 80158c2:	7dfb      	ldrb	r3, [r7, #23]
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d125      	bne.n	8015914 <sFLASH_WriteBuffer+0xda>
      if (NumOfSingle > count) /*!< (NumByteToWrite + WriteAddr) > sFLASH_PAGESIZE */
 80158c8:	7dba      	ldrb	r2, [r7, #22]
 80158ca:	7d3b      	ldrb	r3, [r7, #20]
 80158cc:	429a      	cmp	r2, r3
 80158ce:	d91a      	bls.n	8015906 <sFLASH_WriteBuffer+0xcc>
        temp = NumOfSingle - count;
 80158d0:	7dba      	ldrb	r2, [r7, #22]
 80158d2:	7d3b      	ldrb	r3, [r7, #20]
 80158d4:	1ad3      	subs	r3, r2, r3
 80158d6:	74fb      	strb	r3, [r7, #19]
        sFLASH_WritePage(pBuffer, WriteAddr, count);
 80158d8:	7d3b      	ldrb	r3, [r7, #20]
 80158da:	b29b      	uxth	r3, r3
 80158dc:	461a      	mov	r2, r3
 80158de:	68b9      	ldr	r1, [r7, #8]
 80158e0:	68f8      	ldr	r0, [r7, #12]
 80158e2:	f7ff ff75 	bl	80157d0 <sFLASH_WritePage>
        WriteAddr +=  count;
 80158e6:	7d3b      	ldrb	r3, [r7, #20]
 80158e8:	68ba      	ldr	r2, [r7, #8]
 80158ea:	4413      	add	r3, r2
 80158ec:	60bb      	str	r3, [r7, #8]
        pBuffer += count;
 80158ee:	7d3b      	ldrb	r3, [r7, #20]
 80158f0:	68fa      	ldr	r2, [r7, #12]
 80158f2:	4413      	add	r3, r2
 80158f4:	60fb      	str	r3, [r7, #12]
        sFLASH_WritePage(pBuffer, WriteAddr, temp);
 80158f6:	7cfb      	ldrb	r3, [r7, #19]
 80158f8:	b29b      	uxth	r3, r3
 80158fa:	461a      	mov	r2, r3
 80158fc:	68b9      	ldr	r1, [r7, #8]
 80158fe:	68f8      	ldr	r0, [r7, #12]
 8015900:	f7ff ff66 	bl	80157d0 <sFLASH_WritePage>
}
 8015904:	e03e      	b.n	8015984 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 8015906:	88fb      	ldrh	r3, [r7, #6]
 8015908:	461a      	mov	r2, r3
 801590a:	68b9      	ldr	r1, [r7, #8]
 801590c:	68f8      	ldr	r0, [r7, #12]
 801590e:	f7ff ff5f 	bl	80157d0 <sFLASH_WritePage>
}
 8015912:	e037      	b.n	8015984 <sFLASH_WriteBuffer+0x14a>
      NumByteToWrite -= count;
 8015914:	7d3b      	ldrb	r3, [r7, #20]
 8015916:	b29b      	uxth	r3, r3
 8015918:	88fa      	ldrh	r2, [r7, #6]
 801591a:	1ad3      	subs	r3, r2, r3
 801591c:	80fb      	strh	r3, [r7, #6]
      NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 801591e:	88fb      	ldrh	r3, [r7, #6]
 8015920:	0a1b      	lsrs	r3, r3, #8
 8015922:	b29b      	uxth	r3, r3
 8015924:	75fb      	strb	r3, [r7, #23]
      NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 8015926:	88fb      	ldrh	r3, [r7, #6]
 8015928:	75bb      	strb	r3, [r7, #22]
      sFLASH_WritePage(pBuffer, WriteAddr, count);
 801592a:	7d3b      	ldrb	r3, [r7, #20]
 801592c:	b29b      	uxth	r3, r3
 801592e:	461a      	mov	r2, r3
 8015930:	68b9      	ldr	r1, [r7, #8]
 8015932:	68f8      	ldr	r0, [r7, #12]
 8015934:	f7ff ff4c 	bl	80157d0 <sFLASH_WritePage>
      WriteAddr +=  count;
 8015938:	7d3b      	ldrb	r3, [r7, #20]
 801593a:	68ba      	ldr	r2, [r7, #8]
 801593c:	4413      	add	r3, r2
 801593e:	60bb      	str	r3, [r7, #8]
      pBuffer += count;
 8015940:	7d3b      	ldrb	r3, [r7, #20]
 8015942:	68fa      	ldr	r2, [r7, #12]
 8015944:	4413      	add	r3, r2
 8015946:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 8015948:	e00d      	b.n	8015966 <sFLASH_WriteBuffer+0x12c>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 801594a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801594e:	68b9      	ldr	r1, [r7, #8]
 8015950:	68f8      	ldr	r0, [r7, #12]
 8015952:	f7ff ff3d 	bl	80157d0 <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 8015956:	68bb      	ldr	r3, [r7, #8]
 8015958:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 801595c:	60bb      	str	r3, [r7, #8]
        pBuffer += sFLASH_SPI_PAGESIZE;
 801595e:	68fb      	ldr	r3, [r7, #12]
 8015960:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8015964:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 8015966:	7dfb      	ldrb	r3, [r7, #23]
 8015968:	1e5a      	subs	r2, r3, #1
 801596a:	75fa      	strb	r2, [r7, #23]
 801596c:	2b00      	cmp	r3, #0
 801596e:	d1ec      	bne.n	801594a <sFLASH_WriteBuffer+0x110>
      if (NumOfSingle != 0)
 8015970:	7dbb      	ldrb	r3, [r7, #22]
 8015972:	2b00      	cmp	r3, #0
 8015974:	d006      	beq.n	8015984 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 8015976:	7dbb      	ldrb	r3, [r7, #22]
 8015978:	b29b      	uxth	r3, r3
 801597a:	461a      	mov	r2, r3
 801597c:	68b9      	ldr	r1, [r7, #8]
 801597e:	68f8      	ldr	r0, [r7, #12]
 8015980:	f7ff ff26 	bl	80157d0 <sFLASH_WritePage>
}
 8015984:	bf00      	nop
 8015986:	3718      	adds	r7, #24
 8015988:	46bd      	mov	sp, r7
 801598a:	bd80      	pop	{r7, pc}

0801598c <sFLASH_ReadBuffer>:
  * @param  ReadAddr: FLASH's internal address to read from.
  * @param  NumByteToRead: number of bytes to read from the FLASH.
  * @retval None
  */
void sFLASH_ReadBuffer(uint8_t* pBuffer, uint32_t ReadAddr, uint16_t NumByteToRead)
{
 801598c:	b580      	push	{r7, lr}
 801598e:	b084      	sub	sp, #16
 8015990:	af00      	add	r7, sp, #0
 8015992:	60f8      	str	r0, [r7, #12]
 8015994:	60b9      	str	r1, [r7, #8]
 8015996:	4613      	mov	r3, r2
 8015998:	80fb      	strh	r3, [r7, #6]
//#include "cmsis_os.h"
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 801599a:	f7ff fee1 	bl	8015760 <sFLASH_CS_LOW>

  if (NumByteToRead > 16){
 801599e:	88fb      	ldrh	r3, [r7, #6]
 80159a0:	2b10      	cmp	r3, #16
 80159a2:	d91c      	bls.n	80159de <sFLASH_ReadBuffer+0x52>
	  //Send "Fast read" inctruction
	  sFLASH_SendByte(sFLASH_CMD_FAST_READ);
 80159a4:	200b      	movs	r0, #11
 80159a6:	f000 f899 	bl	8015adc <sFLASH_SendByte>
	  /*!< Send ReadAddr high nibble address byte to read from */
	  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 80159aa:	68bb      	ldr	r3, [r7, #8]
 80159ac:	0c1b      	lsrs	r3, r3, #16
 80159ae:	b2db      	uxtb	r3, r3
 80159b0:	4618      	mov	r0, r3
 80159b2:	f000 f893 	bl	8015adc <sFLASH_SendByte>
	  /*!< Send ReadAddr medium nibble address byte to read from */
	  sFLASH_SendByte((ReadAddr & 0xFF00) >> 8);
 80159b6:	68bb      	ldr	r3, [r7, #8]
 80159b8:	0a1b      	lsrs	r3, r3, #8
 80159ba:	b2db      	uxtb	r3, r3
 80159bc:	4618      	mov	r0, r3
 80159be:	f000 f88d 	bl	8015adc <sFLASH_SendByte>
	  /*!< Send ReadAddr low nibble address byte to read from */
	  sFLASH_SendByte(ReadAddr & 0xFF);
 80159c2:	68bb      	ldr	r3, [r7, #8]
 80159c4:	b2db      	uxtb	r3, r3
 80159c6:	4618      	mov	r0, r3
 80159c8:	f000 f888 	bl	8015adc <sFLASH_SendByte>

	  sFLASH_SendByte(0x00);
 80159cc:	2000      	movs	r0, #0
 80159ce:	f000 f885 	bl	8015adc <sFLASH_SendByte>
	  sFLASH_SPI_ReadBuffer(pBuffer, NumByteToRead);
 80159d2:	88fb      	ldrh	r3, [r7, #6]
 80159d4:	4619      	mov	r1, r3
 80159d6:	68f8      	ldr	r0, [r7, #12]
 80159d8:	f000 f86e 	bl	8015ab8 <sFLASH_SPI_ReadBuffer>
 80159dc:	e022      	b.n	8015a24 <sFLASH_ReadBuffer+0x98>


  }else{
	  /*!< Send "Read from Memory " instruction */
	  sFLASH_SendByte(sFLASH_CMD_READ);
 80159de:	2003      	movs	r0, #3
 80159e0:	f000 f87c 	bl	8015adc <sFLASH_SendByte>

	  /*!< Send ReadAddr high nibble address byte to read from */
	  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 80159e4:	68bb      	ldr	r3, [r7, #8]
 80159e6:	0c1b      	lsrs	r3, r3, #16
 80159e8:	b2db      	uxtb	r3, r3
 80159ea:	4618      	mov	r0, r3
 80159ec:	f000 f876 	bl	8015adc <sFLASH_SendByte>
	  /*!< Send ReadAddr medium nibble address byte to read from */
	  sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
 80159f0:	68bb      	ldr	r3, [r7, #8]
 80159f2:	0a1b      	lsrs	r3, r3, #8
 80159f4:	b2db      	uxtb	r3, r3
 80159f6:	4618      	mov	r0, r3
 80159f8:	f000 f870 	bl	8015adc <sFLASH_SendByte>
	  /*!< Send ReadAddr low nibble address byte to read from */
	  sFLASH_SendByte(ReadAddr & 0xFF);
 80159fc:	68bb      	ldr	r3, [r7, #8]
 80159fe:	b2db      	uxtb	r3, r3
 8015a00:	4618      	mov	r0, r3
 8015a02:	f000 f86b 	bl	8015adc <sFLASH_SendByte>

	  while (NumByteToRead--) /*!< while there is data to be read */
 8015a06:	e008      	b.n	8015a1a <sFLASH_ReadBuffer+0x8e>
	  {
		/*!< Read a byte from the FLASH */
		//*pBuffer = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
		  *pBuffer = sFLASH_ReadByte();
 8015a08:	f000 f846 	bl	8015a98 <sFLASH_ReadByte>
 8015a0c:	4603      	mov	r3, r0
 8015a0e:	461a      	mov	r2, r3
 8015a10:	68fb      	ldr	r3, [r7, #12]
 8015a12:	701a      	strb	r2, [r3, #0]
		/*!< Point to the next location where the byte read will be saved */
		pBuffer++;
 8015a14:	68fb      	ldr	r3, [r7, #12]
 8015a16:	3301      	adds	r3, #1
 8015a18:	60fb      	str	r3, [r7, #12]
	  while (NumByteToRead--) /*!< while there is data to be read */
 8015a1a:	88fb      	ldrh	r3, [r7, #6]
 8015a1c:	1e5a      	subs	r2, r3, #1
 8015a1e:	80fa      	strh	r2, [r7, #6]
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d1f1      	bne.n	8015a08 <sFLASH_ReadBuffer+0x7c>
	  }
  }
  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8015a24:	f7ff fea6 	bl	8015774 <sFLASH_CS_HIGH>
}
 8015a28:	bf00      	nop
 8015a2a:	3710      	adds	r7, #16
 8015a2c:	46bd      	mov	sp, r7
 8015a2e:	bd80      	pop	{r7, pc}

08015a30 <sFLASH_ReadID>:
  * @brief  Reads FLASH identification.
  * @param  None
  * @retval FLASH identification
  */
uint32_t sFLASH_ReadID(void)
{
 8015a30:	b580      	push	{r7, lr}
 8015a32:	b084      	sub	sp, #16
 8015a34:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8015a36:	2300      	movs	r3, #0
 8015a38:	60fb      	str	r3, [r7, #12]
 8015a3a:	2300      	movs	r3, #0
 8015a3c:	60bb      	str	r3, [r7, #8]
 8015a3e:	2300      	movs	r3, #0
 8015a40:	607b      	str	r3, [r7, #4]
 8015a42:	2300      	movs	r3, #0
 8015a44:	603b      	str	r3, [r7, #0]

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8015a46:	f7ff fe8b 	bl	8015760 <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 8015a4a:	f7ff fe93 	bl	8015774 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 8015a4e:	f7ff fe87 	bl	8015760 <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 8015a52:	f7ff fe8f 	bl	8015774 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 8015a56:	f7ff fe83 	bl	8015760 <sFLASH_CS_LOW>


  /*!< Send "RDID " instruction */
  sFLASH_SendByte(sFLASH_CMD_RDID);
 8015a5a:	209f      	movs	r0, #159	@ 0x9f
 8015a5c:	f000 f83e 	bl	8015adc <sFLASH_SendByte>

  /*!< Read a byte from the FLASH */
  Temp0 = sFLASH_ReadByte();
 8015a60:	f000 f81a 	bl	8015a98 <sFLASH_ReadByte>
 8015a64:	4603      	mov	r3, r0
 8015a66:	60bb      	str	r3, [r7, #8]

  /*!< Read a byte from the FLASH */
  Temp1 = sFLASH_ReadByte();
 8015a68:	f000 f816 	bl	8015a98 <sFLASH_ReadByte>
 8015a6c:	4603      	mov	r3, r0
 8015a6e:	607b      	str	r3, [r7, #4]

  /*!< Read a byte from the FLASH */
  Temp2 = sFLASH_ReadByte();
 8015a70:	f000 f812 	bl	8015a98 <sFLASH_ReadByte>
 8015a74:	4603      	mov	r3, r0
 8015a76:	603b      	str	r3, [r7, #0]

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8015a78:	f7ff fe7c 	bl	8015774 <sFLASH_CS_HIGH>

  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8015a7c:	68bb      	ldr	r3, [r7, #8]
 8015a7e:	041a      	lsls	r2, r3, #16
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	021b      	lsls	r3, r3, #8
 8015a84:	4313      	orrs	r3, r2
 8015a86:	683a      	ldr	r2, [r7, #0]
 8015a88:	4313      	orrs	r3, r2
 8015a8a:	60fb      	str	r3, [r7, #12]

  return Temp;
 8015a8c:	68fb      	ldr	r3, [r7, #12]
}
 8015a8e:	4618      	mov	r0, r3
 8015a90:	3710      	adds	r7, #16
 8015a92:	46bd      	mov	sp, r7
 8015a94:	bd80      	pop	{r7, pc}
	...

08015a98 <sFLASH_ReadByte>:
  *         has been previously called.
  * @param  None
  * @retval Byte Read from the SPI Flash.
  */
uint8_t sFLASH_ReadByte(void)
{
 8015a98:	b580      	push	{r7, lr}
 8015a9a:	b082      	sub	sp, #8
 8015a9c:	af00      	add	r7, sp, #0
	uint8_t byte;
	flash_conf.receive_buffer(&byte, 1);
 8015a9e:	4b05      	ldr	r3, [pc, #20]	@ (8015ab4 <sFLASH_ReadByte+0x1c>)
 8015aa0:	685b      	ldr	r3, [r3, #4]
 8015aa2:	1dfa      	adds	r2, r7, #7
 8015aa4:	2101      	movs	r1, #1
 8015aa6:	4610      	mov	r0, r2
 8015aa8:	4798      	blx	r3
	return byte;
 8015aaa:	79fb      	ldrb	r3, [r7, #7]
}
 8015aac:	4618      	mov	r0, r3
 8015aae:	3708      	adds	r7, #8
 8015ab0:	46bd      	mov	sp, r7
 8015ab2:	bd80      	pop	{r7, pc}
 8015ab4:	20000bc8 	.word	0x20000bc8

08015ab8 <sFLASH_SPI_ReadBuffer>:


static void sFLASH_SPI_ReadBuffer(uint8_t * buffer, uint16_t size){
 8015ab8:	b580      	push	{r7, lr}
 8015aba:	b082      	sub	sp, #8
 8015abc:	af00      	add	r7, sp, #0
 8015abe:	6078      	str	r0, [r7, #4]
 8015ac0:	460b      	mov	r3, r1
 8015ac2:	807b      	strh	r3, [r7, #2]
	flash_conf.receive_buffer(buffer, size);
 8015ac4:	4b04      	ldr	r3, [pc, #16]	@ (8015ad8 <sFLASH_SPI_ReadBuffer+0x20>)
 8015ac6:	685b      	ldr	r3, [r3, #4]
 8015ac8:	887a      	ldrh	r2, [r7, #2]
 8015aca:	4611      	mov	r1, r2
 8015acc:	6878      	ldr	r0, [r7, #4]
 8015ace:	4798      	blx	r3
}
 8015ad0:	bf00      	nop
 8015ad2:	3708      	adds	r7, #8
 8015ad4:	46bd      	mov	sp, r7
 8015ad6:	bd80      	pop	{r7, pc}
 8015ad8:	20000bc8 	.word	0x20000bc8

08015adc <sFLASH_SendByte>:
  *         from the SPI bus.
  * @param  byte: byte to send.
  * @retval The value of the received byte.
  */
void sFLASH_SendByte(uint8_t byte)
{
 8015adc:	b580      	push	{r7, lr}
 8015ade:	b082      	sub	sp, #8
 8015ae0:	af00      	add	r7, sp, #0
 8015ae2:	4603      	mov	r3, r0
 8015ae4:	71fb      	strb	r3, [r7, #7]
	flash_conf.send_byte(byte);
 8015ae6:	4b04      	ldr	r3, [pc, #16]	@ (8015af8 <sFLASH_SendByte+0x1c>)
 8015ae8:	689b      	ldr	r3, [r3, #8]
 8015aea:	79fa      	ldrb	r2, [r7, #7]
 8015aec:	4610      	mov	r0, r2
 8015aee:	4798      	blx	r3
}
 8015af0:	bf00      	nop
 8015af2:	3708      	adds	r7, #8
 8015af4:	46bd      	mov	sp, r7
 8015af6:	bd80      	pop	{r7, pc}
 8015af8:	20000bc8 	.word	0x20000bc8

08015afc <sFLASH_WriteEnable>:
  * @brief  Enables the write access to the FLASH.
  * @param  None
  * @retval None
  */
void sFLASH_WriteEnable(void)
{
 8015afc:	b580      	push	{r7, lr}
 8015afe:	af00      	add	r7, sp, #0
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8015b00:	f7ff fe2e 	bl	8015760 <sFLASH_CS_LOW>

  /*!< Send "Write Enable" instruction */
  sFLASH_SendByte(sFLASH_CMD_WREN);
 8015b04:	2006      	movs	r0, #6
 8015b06:	f7ff ffe9 	bl	8015adc <sFLASH_SendByte>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8015b0a:	f7ff fe33 	bl	8015774 <sFLASH_CS_HIGH>
}
 8015b0e:	bf00      	nop
 8015b10:	bd80      	pop	{r7, pc}

08015b12 <sFLASH_WaitForWriteEnd>:
  *         status register and loop until write opertaion has completed.
  * @param  None
  * @retval None
  */
void sFLASH_WaitForWriteEnd(void)
{
 8015b12:	b580      	push	{r7, lr}
 8015b14:	b082      	sub	sp, #8
 8015b16:	af00      	add	r7, sp, #0
  uint8_t flashstatus = 0;
 8015b18:	2300      	movs	r3, #0
 8015b1a:	71fb      	strb	r3, [r7, #7]

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8015b1c:	f7ff fe20 	bl	8015760 <sFLASH_CS_LOW>

  /*!< Send "Read Status Register" instruction */
  sFLASH_SendByte(sFLASH_CMD_RDSR);
 8015b20:	2005      	movs	r0, #5
 8015b22:	f7ff ffdb 	bl	8015adc <sFLASH_SendByte>

  /*!< Loop as long as the memory is busy with a write cycle */
  do
  {
	  /*!< Send "Read Status Register" instruction */
	  sFLASH_SendByte(sFLASH_CMD_RDSR);
 8015b26:	2005      	movs	r0, #5
 8015b28:	f7ff ffd8 	bl	8015adc <sFLASH_SendByte>

	  /*!< Send a dummy byte to generate the clock needed by the FLASH
	  and put the value of the status register in FLASH_Status variable */
	  flashstatus = sFLASH_ReadByte();
 8015b2c:	f7ff ffb4 	bl	8015a98 <sFLASH_ReadByte>
 8015b30:	4603      	mov	r3, r0
 8015b32:	71fb      	strb	r3, [r7, #7]

  }
  while ((flashstatus & sFLASH_WIP_FLAG) == SET); /* Write in progress */
 8015b34:	79fb      	ldrb	r3, [r7, #7]
 8015b36:	f003 0301 	and.w	r3, r3, #1
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d1f3      	bne.n	8015b26 <sFLASH_WaitForWriteEnd+0x14>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8015b3e:	f7ff fe19 	bl	8015774 <sFLASH_CS_HIGH>
}
 8015b42:	bf00      	nop
 8015b44:	3708      	adds	r7, #8
 8015b46:	46bd      	mov	sp, r7
 8015b48:	bd80      	pop	{r7, pc}
	...

08015b4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8015b4c:	b580      	push	{r7, lr}
 8015b4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8015b50:	4b0e      	ldr	r3, [pc, #56]	@ (8015b8c <HAL_Init+0x40>)
 8015b52:	681b      	ldr	r3, [r3, #0]
 8015b54:	4a0d      	ldr	r2, [pc, #52]	@ (8015b8c <HAL_Init+0x40>)
 8015b56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8015b5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8015b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8015b8c <HAL_Init+0x40>)
 8015b5e:	681b      	ldr	r3, [r3, #0]
 8015b60:	4a0a      	ldr	r2, [pc, #40]	@ (8015b8c <HAL_Init+0x40>)
 8015b62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8015b66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8015b68:	4b08      	ldr	r3, [pc, #32]	@ (8015b8c <HAL_Init+0x40>)
 8015b6a:	681b      	ldr	r3, [r3, #0]
 8015b6c:	4a07      	ldr	r2, [pc, #28]	@ (8015b8c <HAL_Init+0x40>)
 8015b6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015b72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8015b74:	2003      	movs	r0, #3
 8015b76:	f000 f913 	bl	8015da0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8015b7a:	200f      	movs	r0, #15
 8015b7c:	f7fc fd52 	bl	8012624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8015b80:	f7fc fd24 	bl	80125cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8015b84:	2300      	movs	r3, #0
}
 8015b86:	4618      	mov	r0, r3
 8015b88:	bd80      	pop	{r7, pc}
 8015b8a:	bf00      	nop
 8015b8c:	40023c00 	.word	0x40023c00

08015b90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8015b90:	b480      	push	{r7}
 8015b92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8015b94:	4b06      	ldr	r3, [pc, #24]	@ (8015bb0 <HAL_IncTick+0x20>)
 8015b96:	781b      	ldrb	r3, [r3, #0]
 8015b98:	461a      	mov	r2, r3
 8015b9a:	4b06      	ldr	r3, [pc, #24]	@ (8015bb4 <HAL_IncTick+0x24>)
 8015b9c:	681b      	ldr	r3, [r3, #0]
 8015b9e:	4413      	add	r3, r2
 8015ba0:	4a04      	ldr	r2, [pc, #16]	@ (8015bb4 <HAL_IncTick+0x24>)
 8015ba2:	6013      	str	r3, [r2, #0]
}
 8015ba4:	bf00      	nop
 8015ba6:	46bd      	mov	sp, r7
 8015ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bac:	4770      	bx	lr
 8015bae:	bf00      	nop
 8015bb0:	20000078 	.word	0x20000078
 8015bb4:	20000bec 	.word	0x20000bec

08015bb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8015bb8:	b480      	push	{r7}
 8015bba:	af00      	add	r7, sp, #0
  return uwTick;
 8015bbc:	4b03      	ldr	r3, [pc, #12]	@ (8015bcc <HAL_GetTick+0x14>)
 8015bbe:	681b      	ldr	r3, [r3, #0]
}
 8015bc0:	4618      	mov	r0, r3
 8015bc2:	46bd      	mov	sp, r7
 8015bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bc8:	4770      	bx	lr
 8015bca:	bf00      	nop
 8015bcc:	20000bec 	.word	0x20000bec

08015bd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8015bd0:	b580      	push	{r7, lr}
 8015bd2:	b084      	sub	sp, #16
 8015bd4:	af00      	add	r7, sp, #0
 8015bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8015bd8:	f7ff ffee 	bl	8015bb8 <HAL_GetTick>
 8015bdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8015be8:	d005      	beq.n	8015bf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8015bea:	4b0a      	ldr	r3, [pc, #40]	@ (8015c14 <HAL_Delay+0x44>)
 8015bec:	781b      	ldrb	r3, [r3, #0]
 8015bee:	461a      	mov	r2, r3
 8015bf0:	68fb      	ldr	r3, [r7, #12]
 8015bf2:	4413      	add	r3, r2
 8015bf4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8015bf6:	bf00      	nop
 8015bf8:	f7ff ffde 	bl	8015bb8 <HAL_GetTick>
 8015bfc:	4602      	mov	r2, r0
 8015bfe:	68bb      	ldr	r3, [r7, #8]
 8015c00:	1ad3      	subs	r3, r2, r3
 8015c02:	68fa      	ldr	r2, [r7, #12]
 8015c04:	429a      	cmp	r2, r3
 8015c06:	d8f7      	bhi.n	8015bf8 <HAL_Delay+0x28>
  {
  }
}
 8015c08:	bf00      	nop
 8015c0a:	bf00      	nop
 8015c0c:	3710      	adds	r7, #16
 8015c0e:	46bd      	mov	sp, r7
 8015c10:	bd80      	pop	{r7, pc}
 8015c12:	bf00      	nop
 8015c14:	20000078 	.word	0x20000078

08015c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8015c18:	b480      	push	{r7}
 8015c1a:	b085      	sub	sp, #20
 8015c1c:	af00      	add	r7, sp, #0
 8015c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	f003 0307 	and.w	r3, r3, #7
 8015c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8015c28:	4b0c      	ldr	r3, [pc, #48]	@ (8015c5c <__NVIC_SetPriorityGrouping+0x44>)
 8015c2a:	68db      	ldr	r3, [r3, #12]
 8015c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8015c2e:	68ba      	ldr	r2, [r7, #8]
 8015c30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8015c34:	4013      	ands	r3, r2
 8015c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8015c38:	68fb      	ldr	r3, [r7, #12]
 8015c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8015c3c:	68bb      	ldr	r3, [r7, #8]
 8015c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8015c40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8015c44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8015c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8015c4a:	4a04      	ldr	r2, [pc, #16]	@ (8015c5c <__NVIC_SetPriorityGrouping+0x44>)
 8015c4c:	68bb      	ldr	r3, [r7, #8]
 8015c4e:	60d3      	str	r3, [r2, #12]
}
 8015c50:	bf00      	nop
 8015c52:	3714      	adds	r7, #20
 8015c54:	46bd      	mov	sp, r7
 8015c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c5a:	4770      	bx	lr
 8015c5c:	e000ed00 	.word	0xe000ed00

08015c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8015c60:	b480      	push	{r7}
 8015c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8015c64:	4b04      	ldr	r3, [pc, #16]	@ (8015c78 <__NVIC_GetPriorityGrouping+0x18>)
 8015c66:	68db      	ldr	r3, [r3, #12]
 8015c68:	0a1b      	lsrs	r3, r3, #8
 8015c6a:	f003 0307 	and.w	r3, r3, #7
}
 8015c6e:	4618      	mov	r0, r3
 8015c70:	46bd      	mov	sp, r7
 8015c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c76:	4770      	bx	lr
 8015c78:	e000ed00 	.word	0xe000ed00

08015c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8015c7c:	b480      	push	{r7}
 8015c7e:	b083      	sub	sp, #12
 8015c80:	af00      	add	r7, sp, #0
 8015c82:	4603      	mov	r3, r0
 8015c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	db0b      	blt.n	8015ca6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015c8e:	79fb      	ldrb	r3, [r7, #7]
 8015c90:	f003 021f 	and.w	r2, r3, #31
 8015c94:	4907      	ldr	r1, [pc, #28]	@ (8015cb4 <__NVIC_EnableIRQ+0x38>)
 8015c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015c9a:	095b      	lsrs	r3, r3, #5
 8015c9c:	2001      	movs	r0, #1
 8015c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8015ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8015ca6:	bf00      	nop
 8015ca8:	370c      	adds	r7, #12
 8015caa:	46bd      	mov	sp, r7
 8015cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cb0:	4770      	bx	lr
 8015cb2:	bf00      	nop
 8015cb4:	e000e100 	.word	0xe000e100

08015cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8015cb8:	b480      	push	{r7}
 8015cba:	b083      	sub	sp, #12
 8015cbc:	af00      	add	r7, sp, #0
 8015cbe:	4603      	mov	r3, r0
 8015cc0:	6039      	str	r1, [r7, #0]
 8015cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	db0a      	blt.n	8015ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015ccc:	683b      	ldr	r3, [r7, #0]
 8015cce:	b2da      	uxtb	r2, r3
 8015cd0:	490c      	ldr	r1, [pc, #48]	@ (8015d04 <__NVIC_SetPriority+0x4c>)
 8015cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015cd6:	0112      	lsls	r2, r2, #4
 8015cd8:	b2d2      	uxtb	r2, r2
 8015cda:	440b      	add	r3, r1
 8015cdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8015ce0:	e00a      	b.n	8015cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015ce2:	683b      	ldr	r3, [r7, #0]
 8015ce4:	b2da      	uxtb	r2, r3
 8015ce6:	4908      	ldr	r1, [pc, #32]	@ (8015d08 <__NVIC_SetPriority+0x50>)
 8015ce8:	79fb      	ldrb	r3, [r7, #7]
 8015cea:	f003 030f 	and.w	r3, r3, #15
 8015cee:	3b04      	subs	r3, #4
 8015cf0:	0112      	lsls	r2, r2, #4
 8015cf2:	b2d2      	uxtb	r2, r2
 8015cf4:	440b      	add	r3, r1
 8015cf6:	761a      	strb	r2, [r3, #24]
}
 8015cf8:	bf00      	nop
 8015cfa:	370c      	adds	r7, #12
 8015cfc:	46bd      	mov	sp, r7
 8015cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d02:	4770      	bx	lr
 8015d04:	e000e100 	.word	0xe000e100
 8015d08:	e000ed00 	.word	0xe000ed00

08015d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8015d0c:	b480      	push	{r7}
 8015d0e:	b089      	sub	sp, #36	@ 0x24
 8015d10:	af00      	add	r7, sp, #0
 8015d12:	60f8      	str	r0, [r7, #12]
 8015d14:	60b9      	str	r1, [r7, #8]
 8015d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8015d18:	68fb      	ldr	r3, [r7, #12]
 8015d1a:	f003 0307 	and.w	r3, r3, #7
 8015d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8015d20:	69fb      	ldr	r3, [r7, #28]
 8015d22:	f1c3 0307 	rsb	r3, r3, #7
 8015d26:	2b04      	cmp	r3, #4
 8015d28:	bf28      	it	cs
 8015d2a:	2304      	movcs	r3, #4
 8015d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8015d2e:	69fb      	ldr	r3, [r7, #28]
 8015d30:	3304      	adds	r3, #4
 8015d32:	2b06      	cmp	r3, #6
 8015d34:	d902      	bls.n	8015d3c <NVIC_EncodePriority+0x30>
 8015d36:	69fb      	ldr	r3, [r7, #28]
 8015d38:	3b03      	subs	r3, #3
 8015d3a:	e000      	b.n	8015d3e <NVIC_EncodePriority+0x32>
 8015d3c:	2300      	movs	r3, #0
 8015d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8015d40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015d44:	69bb      	ldr	r3, [r7, #24]
 8015d46:	fa02 f303 	lsl.w	r3, r2, r3
 8015d4a:	43da      	mvns	r2, r3
 8015d4c:	68bb      	ldr	r3, [r7, #8]
 8015d4e:	401a      	ands	r2, r3
 8015d50:	697b      	ldr	r3, [r7, #20]
 8015d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8015d54:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8015d58:	697b      	ldr	r3, [r7, #20]
 8015d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8015d5e:	43d9      	mvns	r1, r3
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8015d64:	4313      	orrs	r3, r2
         );
}
 8015d66:	4618      	mov	r0, r3
 8015d68:	3724      	adds	r7, #36	@ 0x24
 8015d6a:	46bd      	mov	sp, r7
 8015d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d70:	4770      	bx	lr
	...

08015d74 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8015d74:	b480      	push	{r7}
 8015d76:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8015d78:	f3bf 8f4f 	dsb	sy
}
 8015d7c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8015d7e:	4b06      	ldr	r3, [pc, #24]	@ (8015d98 <__NVIC_SystemReset+0x24>)
 8015d80:	68db      	ldr	r3, [r3, #12]
 8015d82:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8015d86:	4904      	ldr	r1, [pc, #16]	@ (8015d98 <__NVIC_SystemReset+0x24>)
 8015d88:	4b04      	ldr	r3, [pc, #16]	@ (8015d9c <__NVIC_SystemReset+0x28>)
 8015d8a:	4313      	orrs	r3, r2
 8015d8c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8015d8e:	f3bf 8f4f 	dsb	sy
}
 8015d92:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8015d94:	bf00      	nop
 8015d96:	e7fd      	b.n	8015d94 <__NVIC_SystemReset+0x20>
 8015d98:	e000ed00 	.word	0xe000ed00
 8015d9c:	05fa0004 	.word	0x05fa0004

08015da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8015da0:	b580      	push	{r7, lr}
 8015da2:	b082      	sub	sp, #8
 8015da4:	af00      	add	r7, sp, #0
 8015da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8015da8:	6878      	ldr	r0, [r7, #4]
 8015daa:	f7ff ff35 	bl	8015c18 <__NVIC_SetPriorityGrouping>
}
 8015dae:	bf00      	nop
 8015db0:	3708      	adds	r7, #8
 8015db2:	46bd      	mov	sp, r7
 8015db4:	bd80      	pop	{r7, pc}

08015db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8015db6:	b580      	push	{r7, lr}
 8015db8:	b086      	sub	sp, #24
 8015dba:	af00      	add	r7, sp, #0
 8015dbc:	4603      	mov	r3, r0
 8015dbe:	60b9      	str	r1, [r7, #8]
 8015dc0:	607a      	str	r2, [r7, #4]
 8015dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8015dc4:	2300      	movs	r3, #0
 8015dc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8015dc8:	f7ff ff4a 	bl	8015c60 <__NVIC_GetPriorityGrouping>
 8015dcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8015dce:	687a      	ldr	r2, [r7, #4]
 8015dd0:	68b9      	ldr	r1, [r7, #8]
 8015dd2:	6978      	ldr	r0, [r7, #20]
 8015dd4:	f7ff ff9a 	bl	8015d0c <NVIC_EncodePriority>
 8015dd8:	4602      	mov	r2, r0
 8015dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015dde:	4611      	mov	r1, r2
 8015de0:	4618      	mov	r0, r3
 8015de2:	f7ff ff69 	bl	8015cb8 <__NVIC_SetPriority>
}
 8015de6:	bf00      	nop
 8015de8:	3718      	adds	r7, #24
 8015dea:	46bd      	mov	sp, r7
 8015dec:	bd80      	pop	{r7, pc}

08015dee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8015dee:	b580      	push	{r7, lr}
 8015df0:	b082      	sub	sp, #8
 8015df2:	af00      	add	r7, sp, #0
 8015df4:	4603      	mov	r3, r0
 8015df6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8015df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015dfc:	4618      	mov	r0, r3
 8015dfe:	f7ff ff3d 	bl	8015c7c <__NVIC_EnableIRQ>
}
 8015e02:	bf00      	nop
 8015e04:	3708      	adds	r7, #8
 8015e06:	46bd      	mov	sp, r7
 8015e08:	bd80      	pop	{r7, pc}

08015e0a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8015e0a:	b580      	push	{r7, lr}
 8015e0c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8015e0e:	f7ff ffb1 	bl	8015d74 <__NVIC_SystemReset>
	...

08015e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8015e14:	b480      	push	{r7}
 8015e16:	b089      	sub	sp, #36	@ 0x24
 8015e18:	af00      	add	r7, sp, #0
 8015e1a:	6078      	str	r0, [r7, #4]
 8015e1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8015e1e:	2300      	movs	r3, #0
 8015e20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8015e22:	2300      	movs	r3, #0
 8015e24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8015e26:	2300      	movs	r3, #0
 8015e28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8015e2a:	2300      	movs	r3, #0
 8015e2c:	61fb      	str	r3, [r7, #28]
 8015e2e:	e159      	b.n	80160e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8015e30:	2201      	movs	r2, #1
 8015e32:	69fb      	ldr	r3, [r7, #28]
 8015e34:	fa02 f303 	lsl.w	r3, r2, r3
 8015e38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8015e3a:	683b      	ldr	r3, [r7, #0]
 8015e3c:	681b      	ldr	r3, [r3, #0]
 8015e3e:	697a      	ldr	r2, [r7, #20]
 8015e40:	4013      	ands	r3, r2
 8015e42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8015e44:	693a      	ldr	r2, [r7, #16]
 8015e46:	697b      	ldr	r3, [r7, #20]
 8015e48:	429a      	cmp	r2, r3
 8015e4a:	f040 8148 	bne.w	80160de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8015e4e:	683b      	ldr	r3, [r7, #0]
 8015e50:	685b      	ldr	r3, [r3, #4]
 8015e52:	f003 0303 	and.w	r3, r3, #3
 8015e56:	2b01      	cmp	r3, #1
 8015e58:	d005      	beq.n	8015e66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8015e5a:	683b      	ldr	r3, [r7, #0]
 8015e5c:	685b      	ldr	r3, [r3, #4]
 8015e5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8015e62:	2b02      	cmp	r3, #2
 8015e64:	d130      	bne.n	8015ec8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	689b      	ldr	r3, [r3, #8]
 8015e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8015e6c:	69fb      	ldr	r3, [r7, #28]
 8015e6e:	005b      	lsls	r3, r3, #1
 8015e70:	2203      	movs	r2, #3
 8015e72:	fa02 f303 	lsl.w	r3, r2, r3
 8015e76:	43db      	mvns	r3, r3
 8015e78:	69ba      	ldr	r2, [r7, #24]
 8015e7a:	4013      	ands	r3, r2
 8015e7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8015e7e:	683b      	ldr	r3, [r7, #0]
 8015e80:	68da      	ldr	r2, [r3, #12]
 8015e82:	69fb      	ldr	r3, [r7, #28]
 8015e84:	005b      	lsls	r3, r3, #1
 8015e86:	fa02 f303 	lsl.w	r3, r2, r3
 8015e8a:	69ba      	ldr	r2, [r7, #24]
 8015e8c:	4313      	orrs	r3, r2
 8015e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	69ba      	ldr	r2, [r7, #24]
 8015e94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	685b      	ldr	r3, [r3, #4]
 8015e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8015e9c:	2201      	movs	r2, #1
 8015e9e:	69fb      	ldr	r3, [r7, #28]
 8015ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8015ea4:	43db      	mvns	r3, r3
 8015ea6:	69ba      	ldr	r2, [r7, #24]
 8015ea8:	4013      	ands	r3, r2
 8015eaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8015eac:	683b      	ldr	r3, [r7, #0]
 8015eae:	685b      	ldr	r3, [r3, #4]
 8015eb0:	091b      	lsrs	r3, r3, #4
 8015eb2:	f003 0201 	and.w	r2, r3, #1
 8015eb6:	69fb      	ldr	r3, [r7, #28]
 8015eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8015ebc:	69ba      	ldr	r2, [r7, #24]
 8015ebe:	4313      	orrs	r3, r2
 8015ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	69ba      	ldr	r2, [r7, #24]
 8015ec6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8015ec8:	683b      	ldr	r3, [r7, #0]
 8015eca:	685b      	ldr	r3, [r3, #4]
 8015ecc:	f003 0303 	and.w	r3, r3, #3
 8015ed0:	2b03      	cmp	r3, #3
 8015ed2:	d017      	beq.n	8015f04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	68db      	ldr	r3, [r3, #12]
 8015ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8015eda:	69fb      	ldr	r3, [r7, #28]
 8015edc:	005b      	lsls	r3, r3, #1
 8015ede:	2203      	movs	r2, #3
 8015ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8015ee4:	43db      	mvns	r3, r3
 8015ee6:	69ba      	ldr	r2, [r7, #24]
 8015ee8:	4013      	ands	r3, r2
 8015eea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8015eec:	683b      	ldr	r3, [r7, #0]
 8015eee:	689a      	ldr	r2, [r3, #8]
 8015ef0:	69fb      	ldr	r3, [r7, #28]
 8015ef2:	005b      	lsls	r3, r3, #1
 8015ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8015ef8:	69ba      	ldr	r2, [r7, #24]
 8015efa:	4313      	orrs	r3, r2
 8015efc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	69ba      	ldr	r2, [r7, #24]
 8015f02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8015f04:	683b      	ldr	r3, [r7, #0]
 8015f06:	685b      	ldr	r3, [r3, #4]
 8015f08:	f003 0303 	and.w	r3, r3, #3
 8015f0c:	2b02      	cmp	r3, #2
 8015f0e:	d123      	bne.n	8015f58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8015f10:	69fb      	ldr	r3, [r7, #28]
 8015f12:	08da      	lsrs	r2, r3, #3
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	3208      	adds	r2, #8
 8015f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8015f1e:	69fb      	ldr	r3, [r7, #28]
 8015f20:	f003 0307 	and.w	r3, r3, #7
 8015f24:	009b      	lsls	r3, r3, #2
 8015f26:	220f      	movs	r2, #15
 8015f28:	fa02 f303 	lsl.w	r3, r2, r3
 8015f2c:	43db      	mvns	r3, r3
 8015f2e:	69ba      	ldr	r2, [r7, #24]
 8015f30:	4013      	ands	r3, r2
 8015f32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8015f34:	683b      	ldr	r3, [r7, #0]
 8015f36:	691a      	ldr	r2, [r3, #16]
 8015f38:	69fb      	ldr	r3, [r7, #28]
 8015f3a:	f003 0307 	and.w	r3, r3, #7
 8015f3e:	009b      	lsls	r3, r3, #2
 8015f40:	fa02 f303 	lsl.w	r3, r2, r3
 8015f44:	69ba      	ldr	r2, [r7, #24]
 8015f46:	4313      	orrs	r3, r2
 8015f48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8015f4a:	69fb      	ldr	r3, [r7, #28]
 8015f4c:	08da      	lsrs	r2, r3, #3
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	3208      	adds	r2, #8
 8015f52:	69b9      	ldr	r1, [r7, #24]
 8015f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	681b      	ldr	r3, [r3, #0]
 8015f5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8015f5e:	69fb      	ldr	r3, [r7, #28]
 8015f60:	005b      	lsls	r3, r3, #1
 8015f62:	2203      	movs	r2, #3
 8015f64:	fa02 f303 	lsl.w	r3, r2, r3
 8015f68:	43db      	mvns	r3, r3
 8015f6a:	69ba      	ldr	r2, [r7, #24]
 8015f6c:	4013      	ands	r3, r2
 8015f6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8015f70:	683b      	ldr	r3, [r7, #0]
 8015f72:	685b      	ldr	r3, [r3, #4]
 8015f74:	f003 0203 	and.w	r2, r3, #3
 8015f78:	69fb      	ldr	r3, [r7, #28]
 8015f7a:	005b      	lsls	r3, r3, #1
 8015f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8015f80:	69ba      	ldr	r2, [r7, #24]
 8015f82:	4313      	orrs	r3, r2
 8015f84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	69ba      	ldr	r2, [r7, #24]
 8015f8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8015f8c:	683b      	ldr	r3, [r7, #0]
 8015f8e:	685b      	ldr	r3, [r3, #4]
 8015f90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	f000 80a2 	beq.w	80160de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8015f9a:	2300      	movs	r3, #0
 8015f9c:	60fb      	str	r3, [r7, #12]
 8015f9e:	4b57      	ldr	r3, [pc, #348]	@ (80160fc <HAL_GPIO_Init+0x2e8>)
 8015fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015fa2:	4a56      	ldr	r2, [pc, #344]	@ (80160fc <HAL_GPIO_Init+0x2e8>)
 8015fa4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8015fa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8015faa:	4b54      	ldr	r3, [pc, #336]	@ (80160fc <HAL_GPIO_Init+0x2e8>)
 8015fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015fae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8015fb2:	60fb      	str	r3, [r7, #12]
 8015fb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8015fb6:	4a52      	ldr	r2, [pc, #328]	@ (8016100 <HAL_GPIO_Init+0x2ec>)
 8015fb8:	69fb      	ldr	r3, [r7, #28]
 8015fba:	089b      	lsrs	r3, r3, #2
 8015fbc:	3302      	adds	r3, #2
 8015fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8015fc4:	69fb      	ldr	r3, [r7, #28]
 8015fc6:	f003 0303 	and.w	r3, r3, #3
 8015fca:	009b      	lsls	r3, r3, #2
 8015fcc:	220f      	movs	r2, #15
 8015fce:	fa02 f303 	lsl.w	r3, r2, r3
 8015fd2:	43db      	mvns	r3, r3
 8015fd4:	69ba      	ldr	r2, [r7, #24]
 8015fd6:	4013      	ands	r3, r2
 8015fd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	4a49      	ldr	r2, [pc, #292]	@ (8016104 <HAL_GPIO_Init+0x2f0>)
 8015fde:	4293      	cmp	r3, r2
 8015fe0:	d019      	beq.n	8016016 <HAL_GPIO_Init+0x202>
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	4a48      	ldr	r2, [pc, #288]	@ (8016108 <HAL_GPIO_Init+0x2f4>)
 8015fe6:	4293      	cmp	r3, r2
 8015fe8:	d013      	beq.n	8016012 <HAL_GPIO_Init+0x1fe>
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	4a47      	ldr	r2, [pc, #284]	@ (801610c <HAL_GPIO_Init+0x2f8>)
 8015fee:	4293      	cmp	r3, r2
 8015ff0:	d00d      	beq.n	801600e <HAL_GPIO_Init+0x1fa>
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	4a46      	ldr	r2, [pc, #280]	@ (8016110 <HAL_GPIO_Init+0x2fc>)
 8015ff6:	4293      	cmp	r3, r2
 8015ff8:	d007      	beq.n	801600a <HAL_GPIO_Init+0x1f6>
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	4a45      	ldr	r2, [pc, #276]	@ (8016114 <HAL_GPIO_Init+0x300>)
 8015ffe:	4293      	cmp	r3, r2
 8016000:	d101      	bne.n	8016006 <HAL_GPIO_Init+0x1f2>
 8016002:	2304      	movs	r3, #4
 8016004:	e008      	b.n	8016018 <HAL_GPIO_Init+0x204>
 8016006:	2307      	movs	r3, #7
 8016008:	e006      	b.n	8016018 <HAL_GPIO_Init+0x204>
 801600a:	2303      	movs	r3, #3
 801600c:	e004      	b.n	8016018 <HAL_GPIO_Init+0x204>
 801600e:	2302      	movs	r3, #2
 8016010:	e002      	b.n	8016018 <HAL_GPIO_Init+0x204>
 8016012:	2301      	movs	r3, #1
 8016014:	e000      	b.n	8016018 <HAL_GPIO_Init+0x204>
 8016016:	2300      	movs	r3, #0
 8016018:	69fa      	ldr	r2, [r7, #28]
 801601a:	f002 0203 	and.w	r2, r2, #3
 801601e:	0092      	lsls	r2, r2, #2
 8016020:	4093      	lsls	r3, r2
 8016022:	69ba      	ldr	r2, [r7, #24]
 8016024:	4313      	orrs	r3, r2
 8016026:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8016028:	4935      	ldr	r1, [pc, #212]	@ (8016100 <HAL_GPIO_Init+0x2ec>)
 801602a:	69fb      	ldr	r3, [r7, #28]
 801602c:	089b      	lsrs	r3, r3, #2
 801602e:	3302      	adds	r3, #2
 8016030:	69ba      	ldr	r2, [r7, #24]
 8016032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8016036:	4b38      	ldr	r3, [pc, #224]	@ (8016118 <HAL_GPIO_Init+0x304>)
 8016038:	689b      	ldr	r3, [r3, #8]
 801603a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801603c:	693b      	ldr	r3, [r7, #16]
 801603e:	43db      	mvns	r3, r3
 8016040:	69ba      	ldr	r2, [r7, #24]
 8016042:	4013      	ands	r3, r2
 8016044:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8016046:	683b      	ldr	r3, [r7, #0]
 8016048:	685b      	ldr	r3, [r3, #4]
 801604a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801604e:	2b00      	cmp	r3, #0
 8016050:	d003      	beq.n	801605a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8016052:	69ba      	ldr	r2, [r7, #24]
 8016054:	693b      	ldr	r3, [r7, #16]
 8016056:	4313      	orrs	r3, r2
 8016058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801605a:	4a2f      	ldr	r2, [pc, #188]	@ (8016118 <HAL_GPIO_Init+0x304>)
 801605c:	69bb      	ldr	r3, [r7, #24]
 801605e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8016060:	4b2d      	ldr	r3, [pc, #180]	@ (8016118 <HAL_GPIO_Init+0x304>)
 8016062:	68db      	ldr	r3, [r3, #12]
 8016064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8016066:	693b      	ldr	r3, [r7, #16]
 8016068:	43db      	mvns	r3, r3
 801606a:	69ba      	ldr	r2, [r7, #24]
 801606c:	4013      	ands	r3, r2
 801606e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8016070:	683b      	ldr	r3, [r7, #0]
 8016072:	685b      	ldr	r3, [r3, #4]
 8016074:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8016078:	2b00      	cmp	r3, #0
 801607a:	d003      	beq.n	8016084 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 801607c:	69ba      	ldr	r2, [r7, #24]
 801607e:	693b      	ldr	r3, [r7, #16]
 8016080:	4313      	orrs	r3, r2
 8016082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8016084:	4a24      	ldr	r2, [pc, #144]	@ (8016118 <HAL_GPIO_Init+0x304>)
 8016086:	69bb      	ldr	r3, [r7, #24]
 8016088:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 801608a:	4b23      	ldr	r3, [pc, #140]	@ (8016118 <HAL_GPIO_Init+0x304>)
 801608c:	685b      	ldr	r3, [r3, #4]
 801608e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8016090:	693b      	ldr	r3, [r7, #16]
 8016092:	43db      	mvns	r3, r3
 8016094:	69ba      	ldr	r2, [r7, #24]
 8016096:	4013      	ands	r3, r2
 8016098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801609a:	683b      	ldr	r3, [r7, #0]
 801609c:	685b      	ldr	r3, [r3, #4]
 801609e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d003      	beq.n	80160ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80160a6:	69ba      	ldr	r2, [r7, #24]
 80160a8:	693b      	ldr	r3, [r7, #16]
 80160aa:	4313      	orrs	r3, r2
 80160ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80160ae:	4a1a      	ldr	r2, [pc, #104]	@ (8016118 <HAL_GPIO_Init+0x304>)
 80160b0:	69bb      	ldr	r3, [r7, #24]
 80160b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80160b4:	4b18      	ldr	r3, [pc, #96]	@ (8016118 <HAL_GPIO_Init+0x304>)
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80160ba:	693b      	ldr	r3, [r7, #16]
 80160bc:	43db      	mvns	r3, r3
 80160be:	69ba      	ldr	r2, [r7, #24]
 80160c0:	4013      	ands	r3, r2
 80160c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80160c4:	683b      	ldr	r3, [r7, #0]
 80160c6:	685b      	ldr	r3, [r3, #4]
 80160c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d003      	beq.n	80160d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80160d0:	69ba      	ldr	r2, [r7, #24]
 80160d2:	693b      	ldr	r3, [r7, #16]
 80160d4:	4313      	orrs	r3, r2
 80160d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80160d8:	4a0f      	ldr	r2, [pc, #60]	@ (8016118 <HAL_GPIO_Init+0x304>)
 80160da:	69bb      	ldr	r3, [r7, #24]
 80160dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80160de:	69fb      	ldr	r3, [r7, #28]
 80160e0:	3301      	adds	r3, #1
 80160e2:	61fb      	str	r3, [r7, #28]
 80160e4:	69fb      	ldr	r3, [r7, #28]
 80160e6:	2b0f      	cmp	r3, #15
 80160e8:	f67f aea2 	bls.w	8015e30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80160ec:	bf00      	nop
 80160ee:	bf00      	nop
 80160f0:	3724      	adds	r7, #36	@ 0x24
 80160f2:	46bd      	mov	sp, r7
 80160f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160f8:	4770      	bx	lr
 80160fa:	bf00      	nop
 80160fc:	40023800 	.word	0x40023800
 8016100:	40013800 	.word	0x40013800
 8016104:	40020000 	.word	0x40020000
 8016108:	40020400 	.word	0x40020400
 801610c:	40020800 	.word	0x40020800
 8016110:	40020c00 	.word	0x40020c00
 8016114:	40021000 	.word	0x40021000
 8016118:	40013c00 	.word	0x40013c00

0801611c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 801611c:	b480      	push	{r7}
 801611e:	b087      	sub	sp, #28
 8016120:	af00      	add	r7, sp, #0
 8016122:	6078      	str	r0, [r7, #4]
 8016124:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8016126:	2300      	movs	r3, #0
 8016128:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 801612a:	2300      	movs	r3, #0
 801612c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 801612e:	2300      	movs	r3, #0
 8016130:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8016132:	2300      	movs	r3, #0
 8016134:	617b      	str	r3, [r7, #20]
 8016136:	e0bb      	b.n	80162b0 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8016138:	2201      	movs	r2, #1
 801613a:	697b      	ldr	r3, [r7, #20]
 801613c:	fa02 f303 	lsl.w	r3, r2, r3
 8016140:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8016142:	683a      	ldr	r2, [r7, #0]
 8016144:	693b      	ldr	r3, [r7, #16]
 8016146:	4013      	ands	r3, r2
 8016148:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 801614a:	68fa      	ldr	r2, [r7, #12]
 801614c:	693b      	ldr	r3, [r7, #16]
 801614e:	429a      	cmp	r2, r3
 8016150:	f040 80ab 	bne.w	80162aa <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8016154:	4a5c      	ldr	r2, [pc, #368]	@ (80162c8 <HAL_GPIO_DeInit+0x1ac>)
 8016156:	697b      	ldr	r3, [r7, #20]
 8016158:	089b      	lsrs	r3, r3, #2
 801615a:	3302      	adds	r3, #2
 801615c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016160:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8016162:	697b      	ldr	r3, [r7, #20]
 8016164:	f003 0303 	and.w	r3, r3, #3
 8016168:	009b      	lsls	r3, r3, #2
 801616a:	220f      	movs	r2, #15
 801616c:	fa02 f303 	lsl.w	r3, r2, r3
 8016170:	68ba      	ldr	r2, [r7, #8]
 8016172:	4013      	ands	r3, r2
 8016174:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	4a54      	ldr	r2, [pc, #336]	@ (80162cc <HAL_GPIO_DeInit+0x1b0>)
 801617a:	4293      	cmp	r3, r2
 801617c:	d019      	beq.n	80161b2 <HAL_GPIO_DeInit+0x96>
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	4a53      	ldr	r2, [pc, #332]	@ (80162d0 <HAL_GPIO_DeInit+0x1b4>)
 8016182:	4293      	cmp	r3, r2
 8016184:	d013      	beq.n	80161ae <HAL_GPIO_DeInit+0x92>
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	4a52      	ldr	r2, [pc, #328]	@ (80162d4 <HAL_GPIO_DeInit+0x1b8>)
 801618a:	4293      	cmp	r3, r2
 801618c:	d00d      	beq.n	80161aa <HAL_GPIO_DeInit+0x8e>
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	4a51      	ldr	r2, [pc, #324]	@ (80162d8 <HAL_GPIO_DeInit+0x1bc>)
 8016192:	4293      	cmp	r3, r2
 8016194:	d007      	beq.n	80161a6 <HAL_GPIO_DeInit+0x8a>
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	4a50      	ldr	r2, [pc, #320]	@ (80162dc <HAL_GPIO_DeInit+0x1c0>)
 801619a:	4293      	cmp	r3, r2
 801619c:	d101      	bne.n	80161a2 <HAL_GPIO_DeInit+0x86>
 801619e:	2304      	movs	r3, #4
 80161a0:	e008      	b.n	80161b4 <HAL_GPIO_DeInit+0x98>
 80161a2:	2307      	movs	r3, #7
 80161a4:	e006      	b.n	80161b4 <HAL_GPIO_DeInit+0x98>
 80161a6:	2303      	movs	r3, #3
 80161a8:	e004      	b.n	80161b4 <HAL_GPIO_DeInit+0x98>
 80161aa:	2302      	movs	r3, #2
 80161ac:	e002      	b.n	80161b4 <HAL_GPIO_DeInit+0x98>
 80161ae:	2301      	movs	r3, #1
 80161b0:	e000      	b.n	80161b4 <HAL_GPIO_DeInit+0x98>
 80161b2:	2300      	movs	r3, #0
 80161b4:	697a      	ldr	r2, [r7, #20]
 80161b6:	f002 0203 	and.w	r2, r2, #3
 80161ba:	0092      	lsls	r2, r2, #2
 80161bc:	4093      	lsls	r3, r2
 80161be:	68ba      	ldr	r2, [r7, #8]
 80161c0:	429a      	cmp	r2, r3
 80161c2:	d132      	bne.n	801622a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80161c4:	4b46      	ldr	r3, [pc, #280]	@ (80162e0 <HAL_GPIO_DeInit+0x1c4>)
 80161c6:	681a      	ldr	r2, [r3, #0]
 80161c8:	68fb      	ldr	r3, [r7, #12]
 80161ca:	43db      	mvns	r3, r3
 80161cc:	4944      	ldr	r1, [pc, #272]	@ (80162e0 <HAL_GPIO_DeInit+0x1c4>)
 80161ce:	4013      	ands	r3, r2
 80161d0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80161d2:	4b43      	ldr	r3, [pc, #268]	@ (80162e0 <HAL_GPIO_DeInit+0x1c4>)
 80161d4:	685a      	ldr	r2, [r3, #4]
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	43db      	mvns	r3, r3
 80161da:	4941      	ldr	r1, [pc, #260]	@ (80162e0 <HAL_GPIO_DeInit+0x1c4>)
 80161dc:	4013      	ands	r3, r2
 80161de:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80161e0:	4b3f      	ldr	r3, [pc, #252]	@ (80162e0 <HAL_GPIO_DeInit+0x1c4>)
 80161e2:	68da      	ldr	r2, [r3, #12]
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	43db      	mvns	r3, r3
 80161e8:	493d      	ldr	r1, [pc, #244]	@ (80162e0 <HAL_GPIO_DeInit+0x1c4>)
 80161ea:	4013      	ands	r3, r2
 80161ec:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80161ee:	4b3c      	ldr	r3, [pc, #240]	@ (80162e0 <HAL_GPIO_DeInit+0x1c4>)
 80161f0:	689a      	ldr	r2, [r3, #8]
 80161f2:	68fb      	ldr	r3, [r7, #12]
 80161f4:	43db      	mvns	r3, r3
 80161f6:	493a      	ldr	r1, [pc, #232]	@ (80162e0 <HAL_GPIO_DeInit+0x1c4>)
 80161f8:	4013      	ands	r3, r2
 80161fa:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80161fc:	697b      	ldr	r3, [r7, #20]
 80161fe:	f003 0303 	and.w	r3, r3, #3
 8016202:	009b      	lsls	r3, r3, #2
 8016204:	220f      	movs	r2, #15
 8016206:	fa02 f303 	lsl.w	r3, r2, r3
 801620a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 801620c:	4a2e      	ldr	r2, [pc, #184]	@ (80162c8 <HAL_GPIO_DeInit+0x1ac>)
 801620e:	697b      	ldr	r3, [r7, #20]
 8016210:	089b      	lsrs	r3, r3, #2
 8016212:	3302      	adds	r3, #2
 8016214:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8016218:	68bb      	ldr	r3, [r7, #8]
 801621a:	43da      	mvns	r2, r3
 801621c:	482a      	ldr	r0, [pc, #168]	@ (80162c8 <HAL_GPIO_DeInit+0x1ac>)
 801621e:	697b      	ldr	r3, [r7, #20]
 8016220:	089b      	lsrs	r3, r3, #2
 8016222:	400a      	ands	r2, r1
 8016224:	3302      	adds	r3, #2
 8016226:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	681a      	ldr	r2, [r3, #0]
 801622e:	697b      	ldr	r3, [r7, #20]
 8016230:	005b      	lsls	r3, r3, #1
 8016232:	2103      	movs	r1, #3
 8016234:	fa01 f303 	lsl.w	r3, r1, r3
 8016238:	43db      	mvns	r3, r3
 801623a:	401a      	ands	r2, r3
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8016240:	697b      	ldr	r3, [r7, #20]
 8016242:	08da      	lsrs	r2, r3, #3
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	3208      	adds	r2, #8
 8016248:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801624c:	697b      	ldr	r3, [r7, #20]
 801624e:	f003 0307 	and.w	r3, r3, #7
 8016252:	009b      	lsls	r3, r3, #2
 8016254:	220f      	movs	r2, #15
 8016256:	fa02 f303 	lsl.w	r3, r2, r3
 801625a:	43db      	mvns	r3, r3
 801625c:	697a      	ldr	r2, [r7, #20]
 801625e:	08d2      	lsrs	r2, r2, #3
 8016260:	4019      	ands	r1, r3
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	3208      	adds	r2, #8
 8016266:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	68da      	ldr	r2, [r3, #12]
 801626e:	697b      	ldr	r3, [r7, #20]
 8016270:	005b      	lsls	r3, r3, #1
 8016272:	2103      	movs	r1, #3
 8016274:	fa01 f303 	lsl.w	r3, r1, r3
 8016278:	43db      	mvns	r3, r3
 801627a:	401a      	ands	r2, r3
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	685a      	ldr	r2, [r3, #4]
 8016284:	2101      	movs	r1, #1
 8016286:	697b      	ldr	r3, [r7, #20]
 8016288:	fa01 f303 	lsl.w	r3, r1, r3
 801628c:	43db      	mvns	r3, r3
 801628e:	401a      	ands	r2, r3
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	689a      	ldr	r2, [r3, #8]
 8016298:	697b      	ldr	r3, [r7, #20]
 801629a:	005b      	lsls	r3, r3, #1
 801629c:	2103      	movs	r1, #3
 801629e:	fa01 f303 	lsl.w	r3, r1, r3
 80162a2:	43db      	mvns	r3, r3
 80162a4:	401a      	ands	r2, r3
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80162aa:	697b      	ldr	r3, [r7, #20]
 80162ac:	3301      	adds	r3, #1
 80162ae:	617b      	str	r3, [r7, #20]
 80162b0:	697b      	ldr	r3, [r7, #20]
 80162b2:	2b0f      	cmp	r3, #15
 80162b4:	f67f af40 	bls.w	8016138 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80162b8:	bf00      	nop
 80162ba:	bf00      	nop
 80162bc:	371c      	adds	r7, #28
 80162be:	46bd      	mov	sp, r7
 80162c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162c4:	4770      	bx	lr
 80162c6:	bf00      	nop
 80162c8:	40013800 	.word	0x40013800
 80162cc:	40020000 	.word	0x40020000
 80162d0:	40020400 	.word	0x40020400
 80162d4:	40020800 	.word	0x40020800
 80162d8:	40020c00 	.word	0x40020c00
 80162dc:	40021000 	.word	0x40021000
 80162e0:	40013c00 	.word	0x40013c00

080162e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80162e4:	b480      	push	{r7}
 80162e6:	b085      	sub	sp, #20
 80162e8:	af00      	add	r7, sp, #0
 80162ea:	6078      	str	r0, [r7, #4]
 80162ec:	460b      	mov	r3, r1
 80162ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	691a      	ldr	r2, [r3, #16]
 80162f4:	887b      	ldrh	r3, [r7, #2]
 80162f6:	4013      	ands	r3, r2
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d002      	beq.n	8016302 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80162fc:	2301      	movs	r3, #1
 80162fe:	73fb      	strb	r3, [r7, #15]
 8016300:	e001      	b.n	8016306 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8016302:	2300      	movs	r3, #0
 8016304:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8016306:	7bfb      	ldrb	r3, [r7, #15]
}
 8016308:	4618      	mov	r0, r3
 801630a:	3714      	adds	r7, #20
 801630c:	46bd      	mov	sp, r7
 801630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016312:	4770      	bx	lr

08016314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8016314:	b480      	push	{r7}
 8016316:	b083      	sub	sp, #12
 8016318:	af00      	add	r7, sp, #0
 801631a:	6078      	str	r0, [r7, #4]
 801631c:	460b      	mov	r3, r1
 801631e:	807b      	strh	r3, [r7, #2]
 8016320:	4613      	mov	r3, r2
 8016322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8016324:	787b      	ldrb	r3, [r7, #1]
 8016326:	2b00      	cmp	r3, #0
 8016328:	d003      	beq.n	8016332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801632a:	887a      	ldrh	r2, [r7, #2]
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8016330:	e003      	b.n	801633a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8016332:	887b      	ldrh	r3, [r7, #2]
 8016334:	041a      	lsls	r2, r3, #16
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	619a      	str	r2, [r3, #24]
}
 801633a:	bf00      	nop
 801633c:	370c      	adds	r7, #12
 801633e:	46bd      	mov	sp, r7
 8016340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016344:	4770      	bx	lr
	...

08016348 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8016348:	b580      	push	{r7, lr}
 801634a:	b084      	sub	sp, #16
 801634c:	af00      	add	r7, sp, #0
 801634e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	2b00      	cmp	r3, #0
 8016354:	d101      	bne.n	801635a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8016356:	2301      	movs	r3, #1
 8016358:	e12b      	b.n	80165b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8016360:	b2db      	uxtb	r3, r3
 8016362:	2b00      	cmp	r3, #0
 8016364:	d106      	bne.n	8016374 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	2200      	movs	r2, #0
 801636a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 801636e:	6878      	ldr	r0, [r7, #4]
 8016370:	f7fb fe44 	bl	8011ffc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	2224      	movs	r2, #36	@ 0x24
 8016378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	681a      	ldr	r2, [r3, #0]
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	681b      	ldr	r3, [r3, #0]
 8016386:	f022 0201 	bic.w	r2, r2, #1
 801638a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	681b      	ldr	r3, [r3, #0]
 8016390:	681a      	ldr	r2, [r3, #0]
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	681b      	ldr	r3, [r3, #0]
 8016396:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801639a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	681b      	ldr	r3, [r3, #0]
 80163a0:	681a      	ldr	r2, [r3, #0]
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	681b      	ldr	r3, [r3, #0]
 80163a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80163aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80163ac:	f001 fa38 	bl	8017820 <HAL_RCC_GetPCLK1Freq>
 80163b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	685b      	ldr	r3, [r3, #4]
 80163b6:	4a81      	ldr	r2, [pc, #516]	@ (80165bc <HAL_I2C_Init+0x274>)
 80163b8:	4293      	cmp	r3, r2
 80163ba:	d807      	bhi.n	80163cc <HAL_I2C_Init+0x84>
 80163bc:	68fb      	ldr	r3, [r7, #12]
 80163be:	4a80      	ldr	r2, [pc, #512]	@ (80165c0 <HAL_I2C_Init+0x278>)
 80163c0:	4293      	cmp	r3, r2
 80163c2:	bf94      	ite	ls
 80163c4:	2301      	movls	r3, #1
 80163c6:	2300      	movhi	r3, #0
 80163c8:	b2db      	uxtb	r3, r3
 80163ca:	e006      	b.n	80163da <HAL_I2C_Init+0x92>
 80163cc:	68fb      	ldr	r3, [r7, #12]
 80163ce:	4a7d      	ldr	r2, [pc, #500]	@ (80165c4 <HAL_I2C_Init+0x27c>)
 80163d0:	4293      	cmp	r3, r2
 80163d2:	bf94      	ite	ls
 80163d4:	2301      	movls	r3, #1
 80163d6:	2300      	movhi	r3, #0
 80163d8:	b2db      	uxtb	r3, r3
 80163da:	2b00      	cmp	r3, #0
 80163dc:	d001      	beq.n	80163e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80163de:	2301      	movs	r3, #1
 80163e0:	e0e7      	b.n	80165b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80163e2:	68fb      	ldr	r3, [r7, #12]
 80163e4:	4a78      	ldr	r2, [pc, #480]	@ (80165c8 <HAL_I2C_Init+0x280>)
 80163e6:	fba2 2303 	umull	r2, r3, r2, r3
 80163ea:	0c9b      	lsrs	r3, r3, #18
 80163ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	681b      	ldr	r3, [r3, #0]
 80163f2:	685b      	ldr	r3, [r3, #4]
 80163f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	681b      	ldr	r3, [r3, #0]
 80163fc:	68ba      	ldr	r2, [r7, #8]
 80163fe:	430a      	orrs	r2, r1
 8016400:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	681b      	ldr	r3, [r3, #0]
 8016406:	6a1b      	ldr	r3, [r3, #32]
 8016408:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	685b      	ldr	r3, [r3, #4]
 8016410:	4a6a      	ldr	r2, [pc, #424]	@ (80165bc <HAL_I2C_Init+0x274>)
 8016412:	4293      	cmp	r3, r2
 8016414:	d802      	bhi.n	801641c <HAL_I2C_Init+0xd4>
 8016416:	68bb      	ldr	r3, [r7, #8]
 8016418:	3301      	adds	r3, #1
 801641a:	e009      	b.n	8016430 <HAL_I2C_Init+0xe8>
 801641c:	68bb      	ldr	r3, [r7, #8]
 801641e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8016422:	fb02 f303 	mul.w	r3, r2, r3
 8016426:	4a69      	ldr	r2, [pc, #420]	@ (80165cc <HAL_I2C_Init+0x284>)
 8016428:	fba2 2303 	umull	r2, r3, r2, r3
 801642c:	099b      	lsrs	r3, r3, #6
 801642e:	3301      	adds	r3, #1
 8016430:	687a      	ldr	r2, [r7, #4]
 8016432:	6812      	ldr	r2, [r2, #0]
 8016434:	430b      	orrs	r3, r1
 8016436:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	681b      	ldr	r3, [r3, #0]
 801643c:	69db      	ldr	r3, [r3, #28]
 801643e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8016442:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	685b      	ldr	r3, [r3, #4]
 801644a:	495c      	ldr	r1, [pc, #368]	@ (80165bc <HAL_I2C_Init+0x274>)
 801644c:	428b      	cmp	r3, r1
 801644e:	d819      	bhi.n	8016484 <HAL_I2C_Init+0x13c>
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	1e59      	subs	r1, r3, #1
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	685b      	ldr	r3, [r3, #4]
 8016458:	005b      	lsls	r3, r3, #1
 801645a:	fbb1 f3f3 	udiv	r3, r1, r3
 801645e:	1c59      	adds	r1, r3, #1
 8016460:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8016464:	400b      	ands	r3, r1
 8016466:	2b00      	cmp	r3, #0
 8016468:	d00a      	beq.n	8016480 <HAL_I2C_Init+0x138>
 801646a:	68fb      	ldr	r3, [r7, #12]
 801646c:	1e59      	subs	r1, r3, #1
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	685b      	ldr	r3, [r3, #4]
 8016472:	005b      	lsls	r3, r3, #1
 8016474:	fbb1 f3f3 	udiv	r3, r1, r3
 8016478:	3301      	adds	r3, #1
 801647a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801647e:	e051      	b.n	8016524 <HAL_I2C_Init+0x1dc>
 8016480:	2304      	movs	r3, #4
 8016482:	e04f      	b.n	8016524 <HAL_I2C_Init+0x1dc>
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	689b      	ldr	r3, [r3, #8]
 8016488:	2b00      	cmp	r3, #0
 801648a:	d111      	bne.n	80164b0 <HAL_I2C_Init+0x168>
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	1e58      	subs	r0, r3, #1
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	6859      	ldr	r1, [r3, #4]
 8016494:	460b      	mov	r3, r1
 8016496:	005b      	lsls	r3, r3, #1
 8016498:	440b      	add	r3, r1
 801649a:	fbb0 f3f3 	udiv	r3, r0, r3
 801649e:	3301      	adds	r3, #1
 80164a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	bf0c      	ite	eq
 80164a8:	2301      	moveq	r3, #1
 80164aa:	2300      	movne	r3, #0
 80164ac:	b2db      	uxtb	r3, r3
 80164ae:	e012      	b.n	80164d6 <HAL_I2C_Init+0x18e>
 80164b0:	68fb      	ldr	r3, [r7, #12]
 80164b2:	1e58      	subs	r0, r3, #1
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	6859      	ldr	r1, [r3, #4]
 80164b8:	460b      	mov	r3, r1
 80164ba:	009b      	lsls	r3, r3, #2
 80164bc:	440b      	add	r3, r1
 80164be:	0099      	lsls	r1, r3, #2
 80164c0:	440b      	add	r3, r1
 80164c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80164c6:	3301      	adds	r3, #1
 80164c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	bf0c      	ite	eq
 80164d0:	2301      	moveq	r3, #1
 80164d2:	2300      	movne	r3, #0
 80164d4:	b2db      	uxtb	r3, r3
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d001      	beq.n	80164de <HAL_I2C_Init+0x196>
 80164da:	2301      	movs	r3, #1
 80164dc:	e022      	b.n	8016524 <HAL_I2C_Init+0x1dc>
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	689b      	ldr	r3, [r3, #8]
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	d10e      	bne.n	8016504 <HAL_I2C_Init+0x1bc>
 80164e6:	68fb      	ldr	r3, [r7, #12]
 80164e8:	1e58      	subs	r0, r3, #1
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	6859      	ldr	r1, [r3, #4]
 80164ee:	460b      	mov	r3, r1
 80164f0:	005b      	lsls	r3, r3, #1
 80164f2:	440b      	add	r3, r1
 80164f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80164f8:	3301      	adds	r3, #1
 80164fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80164fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8016502:	e00f      	b.n	8016524 <HAL_I2C_Init+0x1dc>
 8016504:	68fb      	ldr	r3, [r7, #12]
 8016506:	1e58      	subs	r0, r3, #1
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	6859      	ldr	r1, [r3, #4]
 801650c:	460b      	mov	r3, r1
 801650e:	009b      	lsls	r3, r3, #2
 8016510:	440b      	add	r3, r1
 8016512:	0099      	lsls	r1, r3, #2
 8016514:	440b      	add	r3, r1
 8016516:	fbb0 f3f3 	udiv	r3, r0, r3
 801651a:	3301      	adds	r3, #1
 801651c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016520:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8016524:	6879      	ldr	r1, [r7, #4]
 8016526:	6809      	ldr	r1, [r1, #0]
 8016528:	4313      	orrs	r3, r2
 801652a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	681b      	ldr	r3, [r3, #0]
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	69da      	ldr	r2, [r3, #28]
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	6a1b      	ldr	r3, [r3, #32]
 801653e:	431a      	orrs	r2, r3
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	681b      	ldr	r3, [r3, #0]
 8016544:	430a      	orrs	r2, r1
 8016546:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	681b      	ldr	r3, [r3, #0]
 801654c:	689b      	ldr	r3, [r3, #8]
 801654e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8016552:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8016556:	687a      	ldr	r2, [r7, #4]
 8016558:	6911      	ldr	r1, [r2, #16]
 801655a:	687a      	ldr	r2, [r7, #4]
 801655c:	68d2      	ldr	r2, [r2, #12]
 801655e:	4311      	orrs	r1, r2
 8016560:	687a      	ldr	r2, [r7, #4]
 8016562:	6812      	ldr	r2, [r2, #0]
 8016564:	430b      	orrs	r3, r1
 8016566:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	681b      	ldr	r3, [r3, #0]
 801656c:	68db      	ldr	r3, [r3, #12]
 801656e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	695a      	ldr	r2, [r3, #20]
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	699b      	ldr	r3, [r3, #24]
 801657a:	431a      	orrs	r2, r3
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	430a      	orrs	r2, r1
 8016582:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	681b      	ldr	r3, [r3, #0]
 8016588:	681a      	ldr	r2, [r3, #0]
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	681b      	ldr	r3, [r3, #0]
 801658e:	f042 0201 	orr.w	r2, r2, #1
 8016592:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	2200      	movs	r2, #0
 8016598:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	2220      	movs	r2, #32
 801659e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	2200      	movs	r2, #0
 80165a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	2200      	movs	r2, #0
 80165ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80165b0:	2300      	movs	r3, #0
}
 80165b2:	4618      	mov	r0, r3
 80165b4:	3710      	adds	r7, #16
 80165b6:	46bd      	mov	sp, r7
 80165b8:	bd80      	pop	{r7, pc}
 80165ba:	bf00      	nop
 80165bc:	000186a0 	.word	0x000186a0
 80165c0:	001e847f 	.word	0x001e847f
 80165c4:	003d08ff 	.word	0x003d08ff
 80165c8:	431bde83 	.word	0x431bde83
 80165cc:	10624dd3 	.word	0x10624dd3

080165d0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80165d0:	b580      	push	{r7, lr}
 80165d2:	b082      	sub	sp, #8
 80165d4:	af00      	add	r7, sp, #0
 80165d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	2b00      	cmp	r3, #0
 80165dc:	d101      	bne.n	80165e2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80165de:	2301      	movs	r3, #1
 80165e0:	e021      	b.n	8016626 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	2224      	movs	r2, #36	@ 0x24
 80165e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	681b      	ldr	r3, [r3, #0]
 80165ee:	681a      	ldr	r2, [r3, #0]
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	f022 0201 	bic.w	r2, r2, #1
 80165f8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80165fa:	6878      	ldr	r0, [r7, #4]
 80165fc:	f7fb fd46 	bl	801208c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	2200      	movs	r2, #0
 8016604:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	2200      	movs	r2, #0
 801660a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	2200      	movs	r2, #0
 8016612:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	2200      	movs	r2, #0
 8016618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	2200      	movs	r2, #0
 8016620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8016624:	2300      	movs	r3, #0
}
 8016626:	4618      	mov	r0, r3
 8016628:	3708      	adds	r7, #8
 801662a:	46bd      	mov	sp, r7
 801662c:	bd80      	pop	{r7, pc}
	...

08016630 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016630:	b580      	push	{r7, lr}
 8016632:	b088      	sub	sp, #32
 8016634:	af02      	add	r7, sp, #8
 8016636:	60f8      	str	r0, [r7, #12]
 8016638:	607a      	str	r2, [r7, #4]
 801663a:	461a      	mov	r2, r3
 801663c:	460b      	mov	r3, r1
 801663e:	817b      	strh	r3, [r7, #10]
 8016640:	4613      	mov	r3, r2
 8016642:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8016644:	f7ff fab8 	bl	8015bb8 <HAL_GetTick>
 8016648:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 801664a:	68fb      	ldr	r3, [r7, #12]
 801664c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8016650:	b2db      	uxtb	r3, r3
 8016652:	2b20      	cmp	r3, #32
 8016654:	f040 80e0 	bne.w	8016818 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8016658:	697b      	ldr	r3, [r7, #20]
 801665a:	9300      	str	r3, [sp, #0]
 801665c:	2319      	movs	r3, #25
 801665e:	2201      	movs	r2, #1
 8016660:	4970      	ldr	r1, [pc, #448]	@ (8016824 <HAL_I2C_Master_Transmit+0x1f4>)
 8016662:	68f8      	ldr	r0, [r7, #12]
 8016664:	f000 fa92 	bl	8016b8c <I2C_WaitOnFlagUntilTimeout>
 8016668:	4603      	mov	r3, r0
 801666a:	2b00      	cmp	r3, #0
 801666c:	d001      	beq.n	8016672 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 801666e:	2302      	movs	r3, #2
 8016670:	e0d3      	b.n	801681a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016672:	68fb      	ldr	r3, [r7, #12]
 8016674:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016678:	2b01      	cmp	r3, #1
 801667a:	d101      	bne.n	8016680 <HAL_I2C_Master_Transmit+0x50>
 801667c:	2302      	movs	r3, #2
 801667e:	e0cc      	b.n	801681a <HAL_I2C_Master_Transmit+0x1ea>
 8016680:	68fb      	ldr	r3, [r7, #12]
 8016682:	2201      	movs	r2, #1
 8016684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8016688:	68fb      	ldr	r3, [r7, #12]
 801668a:	681b      	ldr	r3, [r3, #0]
 801668c:	681b      	ldr	r3, [r3, #0]
 801668e:	f003 0301 	and.w	r3, r3, #1
 8016692:	2b01      	cmp	r3, #1
 8016694:	d007      	beq.n	80166a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8016696:	68fb      	ldr	r3, [r7, #12]
 8016698:	681b      	ldr	r3, [r3, #0]
 801669a:	681a      	ldr	r2, [r3, #0]
 801669c:	68fb      	ldr	r3, [r7, #12]
 801669e:	681b      	ldr	r3, [r3, #0]
 80166a0:	f042 0201 	orr.w	r2, r2, #1
 80166a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80166a6:	68fb      	ldr	r3, [r7, #12]
 80166a8:	681b      	ldr	r3, [r3, #0]
 80166aa:	681a      	ldr	r2, [r3, #0]
 80166ac:	68fb      	ldr	r3, [r7, #12]
 80166ae:	681b      	ldr	r3, [r3, #0]
 80166b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80166b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80166b6:	68fb      	ldr	r3, [r7, #12]
 80166b8:	2221      	movs	r2, #33	@ 0x21
 80166ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80166be:	68fb      	ldr	r3, [r7, #12]
 80166c0:	2210      	movs	r2, #16
 80166c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80166c6:	68fb      	ldr	r3, [r7, #12]
 80166c8:	2200      	movs	r2, #0
 80166ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80166cc:	68fb      	ldr	r3, [r7, #12]
 80166ce:	687a      	ldr	r2, [r7, #4]
 80166d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80166d2:	68fb      	ldr	r3, [r7, #12]
 80166d4:	893a      	ldrh	r2, [r7, #8]
 80166d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80166d8:	68fb      	ldr	r3, [r7, #12]
 80166da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80166dc:	b29a      	uxth	r2, r3
 80166de:	68fb      	ldr	r3, [r7, #12]
 80166e0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80166e2:	68fb      	ldr	r3, [r7, #12]
 80166e4:	4a50      	ldr	r2, [pc, #320]	@ (8016828 <HAL_I2C_Master_Transmit+0x1f8>)
 80166e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80166e8:	8979      	ldrh	r1, [r7, #10]
 80166ea:	697b      	ldr	r3, [r7, #20]
 80166ec:	6a3a      	ldr	r2, [r7, #32]
 80166ee:	68f8      	ldr	r0, [r7, #12]
 80166f0:	f000 f9ca 	bl	8016a88 <I2C_MasterRequestWrite>
 80166f4:	4603      	mov	r3, r0
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d001      	beq.n	80166fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80166fa:	2301      	movs	r3, #1
 80166fc:	e08d      	b.n	801681a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80166fe:	2300      	movs	r3, #0
 8016700:	613b      	str	r3, [r7, #16]
 8016702:	68fb      	ldr	r3, [r7, #12]
 8016704:	681b      	ldr	r3, [r3, #0]
 8016706:	695b      	ldr	r3, [r3, #20]
 8016708:	613b      	str	r3, [r7, #16]
 801670a:	68fb      	ldr	r3, [r7, #12]
 801670c:	681b      	ldr	r3, [r3, #0]
 801670e:	699b      	ldr	r3, [r3, #24]
 8016710:	613b      	str	r3, [r7, #16]
 8016712:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8016714:	e066      	b.n	80167e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016716:	697a      	ldr	r2, [r7, #20]
 8016718:	6a39      	ldr	r1, [r7, #32]
 801671a:	68f8      	ldr	r0, [r7, #12]
 801671c:	f000 fb50 	bl	8016dc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8016720:	4603      	mov	r3, r0
 8016722:	2b00      	cmp	r3, #0
 8016724:	d00d      	beq.n	8016742 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8016726:	68fb      	ldr	r3, [r7, #12]
 8016728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801672a:	2b04      	cmp	r3, #4
 801672c:	d107      	bne.n	801673e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801672e:	68fb      	ldr	r3, [r7, #12]
 8016730:	681b      	ldr	r3, [r3, #0]
 8016732:	681a      	ldr	r2, [r3, #0]
 8016734:	68fb      	ldr	r3, [r7, #12]
 8016736:	681b      	ldr	r3, [r3, #0]
 8016738:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801673c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 801673e:	2301      	movs	r3, #1
 8016740:	e06b      	b.n	801681a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8016742:	68fb      	ldr	r3, [r7, #12]
 8016744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016746:	781a      	ldrb	r2, [r3, #0]
 8016748:	68fb      	ldr	r3, [r7, #12]
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801674e:	68fb      	ldr	r3, [r7, #12]
 8016750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016752:	1c5a      	adds	r2, r3, #1
 8016754:	68fb      	ldr	r3, [r7, #12]
 8016756:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8016758:	68fb      	ldr	r3, [r7, #12]
 801675a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801675c:	b29b      	uxth	r3, r3
 801675e:	3b01      	subs	r3, #1
 8016760:	b29a      	uxth	r2, r3
 8016762:	68fb      	ldr	r3, [r7, #12]
 8016764:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8016766:	68fb      	ldr	r3, [r7, #12]
 8016768:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801676a:	3b01      	subs	r3, #1
 801676c:	b29a      	uxth	r2, r3
 801676e:	68fb      	ldr	r3, [r7, #12]
 8016770:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8016772:	68fb      	ldr	r3, [r7, #12]
 8016774:	681b      	ldr	r3, [r3, #0]
 8016776:	695b      	ldr	r3, [r3, #20]
 8016778:	f003 0304 	and.w	r3, r3, #4
 801677c:	2b04      	cmp	r3, #4
 801677e:	d11b      	bne.n	80167b8 <HAL_I2C_Master_Transmit+0x188>
 8016780:	68fb      	ldr	r3, [r7, #12]
 8016782:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016784:	2b00      	cmp	r3, #0
 8016786:	d017      	beq.n	80167b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8016788:	68fb      	ldr	r3, [r7, #12]
 801678a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801678c:	781a      	ldrb	r2, [r3, #0]
 801678e:	68fb      	ldr	r3, [r7, #12]
 8016790:	681b      	ldr	r3, [r3, #0]
 8016792:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8016794:	68fb      	ldr	r3, [r7, #12]
 8016796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016798:	1c5a      	adds	r2, r3, #1
 801679a:	68fb      	ldr	r3, [r7, #12]
 801679c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 801679e:	68fb      	ldr	r3, [r7, #12]
 80167a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80167a2:	b29b      	uxth	r3, r3
 80167a4:	3b01      	subs	r3, #1
 80167a6:	b29a      	uxth	r2, r3
 80167a8:	68fb      	ldr	r3, [r7, #12]
 80167aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80167ac:	68fb      	ldr	r3, [r7, #12]
 80167ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80167b0:	3b01      	subs	r3, #1
 80167b2:	b29a      	uxth	r2, r3
 80167b4:	68fb      	ldr	r3, [r7, #12]
 80167b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80167b8:	697a      	ldr	r2, [r7, #20]
 80167ba:	6a39      	ldr	r1, [r7, #32]
 80167bc:	68f8      	ldr	r0, [r7, #12]
 80167be:	f000 fb47 	bl	8016e50 <I2C_WaitOnBTFFlagUntilTimeout>
 80167c2:	4603      	mov	r3, r0
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	d00d      	beq.n	80167e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80167c8:	68fb      	ldr	r3, [r7, #12]
 80167ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80167cc:	2b04      	cmp	r3, #4
 80167ce:	d107      	bne.n	80167e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80167d0:	68fb      	ldr	r3, [r7, #12]
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	681a      	ldr	r2, [r3, #0]
 80167d6:	68fb      	ldr	r3, [r7, #12]
 80167d8:	681b      	ldr	r3, [r3, #0]
 80167da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80167de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80167e0:	2301      	movs	r3, #1
 80167e2:	e01a      	b.n	801681a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80167e4:	68fb      	ldr	r3, [r7, #12]
 80167e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d194      	bne.n	8016716 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80167ec:	68fb      	ldr	r3, [r7, #12]
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	681a      	ldr	r2, [r3, #0]
 80167f2:	68fb      	ldr	r3, [r7, #12]
 80167f4:	681b      	ldr	r3, [r3, #0]
 80167f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80167fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80167fc:	68fb      	ldr	r3, [r7, #12]
 80167fe:	2220      	movs	r2, #32
 8016800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8016804:	68fb      	ldr	r3, [r7, #12]
 8016806:	2200      	movs	r2, #0
 8016808:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801680c:	68fb      	ldr	r3, [r7, #12]
 801680e:	2200      	movs	r2, #0
 8016810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8016814:	2300      	movs	r3, #0
 8016816:	e000      	b.n	801681a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8016818:	2302      	movs	r3, #2
  }
}
 801681a:	4618      	mov	r0, r3
 801681c:	3718      	adds	r7, #24
 801681e:	46bd      	mov	sp, r7
 8016820:	bd80      	pop	{r7, pc}
 8016822:	bf00      	nop
 8016824:	00100002 	.word	0x00100002
 8016828:	ffff0000 	.word	0xffff0000

0801682c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 801682c:	b580      	push	{r7, lr}
 801682e:	b08a      	sub	sp, #40	@ 0x28
 8016830:	af02      	add	r7, sp, #8
 8016832:	60f8      	str	r0, [r7, #12]
 8016834:	607a      	str	r2, [r7, #4]
 8016836:	603b      	str	r3, [r7, #0]
 8016838:	460b      	mov	r3, r1
 801683a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 801683c:	f7ff f9bc 	bl	8015bb8 <HAL_GetTick>
 8016840:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8016842:	2300      	movs	r3, #0
 8016844:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016846:	68fb      	ldr	r3, [r7, #12]
 8016848:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801684c:	b2db      	uxtb	r3, r3
 801684e:	2b20      	cmp	r3, #32
 8016850:	f040 8111 	bne.w	8016a76 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8016854:	69fb      	ldr	r3, [r7, #28]
 8016856:	9300      	str	r3, [sp, #0]
 8016858:	2319      	movs	r3, #25
 801685a:	2201      	movs	r2, #1
 801685c:	4988      	ldr	r1, [pc, #544]	@ (8016a80 <HAL_I2C_IsDeviceReady+0x254>)
 801685e:	68f8      	ldr	r0, [r7, #12]
 8016860:	f000 f994 	bl	8016b8c <I2C_WaitOnFlagUntilTimeout>
 8016864:	4603      	mov	r3, r0
 8016866:	2b00      	cmp	r3, #0
 8016868:	d001      	beq.n	801686e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 801686a:	2302      	movs	r3, #2
 801686c:	e104      	b.n	8016a78 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801686e:	68fb      	ldr	r3, [r7, #12]
 8016870:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016874:	2b01      	cmp	r3, #1
 8016876:	d101      	bne.n	801687c <HAL_I2C_IsDeviceReady+0x50>
 8016878:	2302      	movs	r3, #2
 801687a:	e0fd      	b.n	8016a78 <HAL_I2C_IsDeviceReady+0x24c>
 801687c:	68fb      	ldr	r3, [r7, #12]
 801687e:	2201      	movs	r2, #1
 8016880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	681b      	ldr	r3, [r3, #0]
 8016888:	681b      	ldr	r3, [r3, #0]
 801688a:	f003 0301 	and.w	r3, r3, #1
 801688e:	2b01      	cmp	r3, #1
 8016890:	d007      	beq.n	80168a2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8016892:	68fb      	ldr	r3, [r7, #12]
 8016894:	681b      	ldr	r3, [r3, #0]
 8016896:	681a      	ldr	r2, [r3, #0]
 8016898:	68fb      	ldr	r3, [r7, #12]
 801689a:	681b      	ldr	r3, [r3, #0]
 801689c:	f042 0201 	orr.w	r2, r2, #1
 80168a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80168a2:	68fb      	ldr	r3, [r7, #12]
 80168a4:	681b      	ldr	r3, [r3, #0]
 80168a6:	681a      	ldr	r2, [r3, #0]
 80168a8:	68fb      	ldr	r3, [r7, #12]
 80168aa:	681b      	ldr	r3, [r3, #0]
 80168ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80168b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80168b2:	68fb      	ldr	r3, [r7, #12]
 80168b4:	2224      	movs	r2, #36	@ 0x24
 80168b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80168ba:	68fb      	ldr	r3, [r7, #12]
 80168bc:	2200      	movs	r2, #0
 80168be:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80168c0:	68fb      	ldr	r3, [r7, #12]
 80168c2:	4a70      	ldr	r2, [pc, #448]	@ (8016a84 <HAL_I2C_IsDeviceReady+0x258>)
 80168c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80168c6:	68fb      	ldr	r3, [r7, #12]
 80168c8:	681b      	ldr	r3, [r3, #0]
 80168ca:	681a      	ldr	r2, [r3, #0]
 80168cc:	68fb      	ldr	r3, [r7, #12]
 80168ce:	681b      	ldr	r3, [r3, #0]
 80168d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80168d4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80168d6:	69fb      	ldr	r3, [r7, #28]
 80168d8:	9300      	str	r3, [sp, #0]
 80168da:	683b      	ldr	r3, [r7, #0]
 80168dc:	2200      	movs	r2, #0
 80168de:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80168e2:	68f8      	ldr	r0, [r7, #12]
 80168e4:	f000 f952 	bl	8016b8c <I2C_WaitOnFlagUntilTimeout>
 80168e8:	4603      	mov	r3, r0
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d00d      	beq.n	801690a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80168ee:	68fb      	ldr	r3, [r7, #12]
 80168f0:	681b      	ldr	r3, [r3, #0]
 80168f2:	681b      	ldr	r3, [r3, #0]
 80168f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80168f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80168fc:	d103      	bne.n	8016906 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80168fe:	68fb      	ldr	r3, [r7, #12]
 8016900:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016904:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8016906:	2303      	movs	r3, #3
 8016908:	e0b6      	b.n	8016a78 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801690a:	897b      	ldrh	r3, [r7, #10]
 801690c:	b2db      	uxtb	r3, r3
 801690e:	461a      	mov	r2, r3
 8016910:	68fb      	ldr	r3, [r7, #12]
 8016912:	681b      	ldr	r3, [r3, #0]
 8016914:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8016918:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 801691a:	f7ff f94d 	bl	8015bb8 <HAL_GetTick>
 801691e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8016920:	68fb      	ldr	r3, [r7, #12]
 8016922:	681b      	ldr	r3, [r3, #0]
 8016924:	695b      	ldr	r3, [r3, #20]
 8016926:	f003 0302 	and.w	r3, r3, #2
 801692a:	2b02      	cmp	r3, #2
 801692c:	bf0c      	ite	eq
 801692e:	2301      	moveq	r3, #1
 8016930:	2300      	movne	r3, #0
 8016932:	b2db      	uxtb	r3, r3
 8016934:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8016936:	68fb      	ldr	r3, [r7, #12]
 8016938:	681b      	ldr	r3, [r3, #0]
 801693a:	695b      	ldr	r3, [r3, #20]
 801693c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8016940:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016944:	bf0c      	ite	eq
 8016946:	2301      	moveq	r3, #1
 8016948:	2300      	movne	r3, #0
 801694a:	b2db      	uxtb	r3, r3
 801694c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 801694e:	e025      	b.n	801699c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8016950:	f7ff f932 	bl	8015bb8 <HAL_GetTick>
 8016954:	4602      	mov	r2, r0
 8016956:	69fb      	ldr	r3, [r7, #28]
 8016958:	1ad3      	subs	r3, r2, r3
 801695a:	683a      	ldr	r2, [r7, #0]
 801695c:	429a      	cmp	r2, r3
 801695e:	d302      	bcc.n	8016966 <HAL_I2C_IsDeviceReady+0x13a>
 8016960:	683b      	ldr	r3, [r7, #0]
 8016962:	2b00      	cmp	r3, #0
 8016964:	d103      	bne.n	801696e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8016966:	68fb      	ldr	r3, [r7, #12]
 8016968:	22a0      	movs	r2, #160	@ 0xa0
 801696a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 801696e:	68fb      	ldr	r3, [r7, #12]
 8016970:	681b      	ldr	r3, [r3, #0]
 8016972:	695b      	ldr	r3, [r3, #20]
 8016974:	f003 0302 	and.w	r3, r3, #2
 8016978:	2b02      	cmp	r3, #2
 801697a:	bf0c      	ite	eq
 801697c:	2301      	moveq	r3, #1
 801697e:	2300      	movne	r3, #0
 8016980:	b2db      	uxtb	r3, r3
 8016982:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8016984:	68fb      	ldr	r3, [r7, #12]
 8016986:	681b      	ldr	r3, [r3, #0]
 8016988:	695b      	ldr	r3, [r3, #20]
 801698a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801698e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016992:	bf0c      	ite	eq
 8016994:	2301      	moveq	r3, #1
 8016996:	2300      	movne	r3, #0
 8016998:	b2db      	uxtb	r3, r3
 801699a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 801699c:	68fb      	ldr	r3, [r7, #12]
 801699e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80169a2:	b2db      	uxtb	r3, r3
 80169a4:	2ba0      	cmp	r3, #160	@ 0xa0
 80169a6:	d005      	beq.n	80169b4 <HAL_I2C_IsDeviceReady+0x188>
 80169a8:	7dfb      	ldrb	r3, [r7, #23]
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	d102      	bne.n	80169b4 <HAL_I2C_IsDeviceReady+0x188>
 80169ae:	7dbb      	ldrb	r3, [r7, #22]
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d0cd      	beq.n	8016950 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80169b4:	68fb      	ldr	r3, [r7, #12]
 80169b6:	2220      	movs	r2, #32
 80169b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80169bc:	68fb      	ldr	r3, [r7, #12]
 80169be:	681b      	ldr	r3, [r3, #0]
 80169c0:	695b      	ldr	r3, [r3, #20]
 80169c2:	f003 0302 	and.w	r3, r3, #2
 80169c6:	2b02      	cmp	r3, #2
 80169c8:	d129      	bne.n	8016a1e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80169ca:	68fb      	ldr	r3, [r7, #12]
 80169cc:	681b      	ldr	r3, [r3, #0]
 80169ce:	681a      	ldr	r2, [r3, #0]
 80169d0:	68fb      	ldr	r3, [r7, #12]
 80169d2:	681b      	ldr	r3, [r3, #0]
 80169d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80169d8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80169da:	2300      	movs	r3, #0
 80169dc:	613b      	str	r3, [r7, #16]
 80169de:	68fb      	ldr	r3, [r7, #12]
 80169e0:	681b      	ldr	r3, [r3, #0]
 80169e2:	695b      	ldr	r3, [r3, #20]
 80169e4:	613b      	str	r3, [r7, #16]
 80169e6:	68fb      	ldr	r3, [r7, #12]
 80169e8:	681b      	ldr	r3, [r3, #0]
 80169ea:	699b      	ldr	r3, [r3, #24]
 80169ec:	613b      	str	r3, [r7, #16]
 80169ee:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80169f0:	69fb      	ldr	r3, [r7, #28]
 80169f2:	9300      	str	r3, [sp, #0]
 80169f4:	2319      	movs	r3, #25
 80169f6:	2201      	movs	r2, #1
 80169f8:	4921      	ldr	r1, [pc, #132]	@ (8016a80 <HAL_I2C_IsDeviceReady+0x254>)
 80169fa:	68f8      	ldr	r0, [r7, #12]
 80169fc:	f000 f8c6 	bl	8016b8c <I2C_WaitOnFlagUntilTimeout>
 8016a00:	4603      	mov	r3, r0
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	d001      	beq.n	8016a0a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8016a06:	2301      	movs	r3, #1
 8016a08:	e036      	b.n	8016a78 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8016a0a:	68fb      	ldr	r3, [r7, #12]
 8016a0c:	2220      	movs	r2, #32
 8016a0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016a12:	68fb      	ldr	r3, [r7, #12]
 8016a14:	2200      	movs	r2, #0
 8016a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8016a1a:	2300      	movs	r3, #0
 8016a1c:	e02c      	b.n	8016a78 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016a1e:	68fb      	ldr	r3, [r7, #12]
 8016a20:	681b      	ldr	r3, [r3, #0]
 8016a22:	681a      	ldr	r2, [r3, #0]
 8016a24:	68fb      	ldr	r3, [r7, #12]
 8016a26:	681b      	ldr	r3, [r3, #0]
 8016a28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016a2c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016a2e:	68fb      	ldr	r3, [r7, #12]
 8016a30:	681b      	ldr	r3, [r3, #0]
 8016a32:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8016a36:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8016a38:	69fb      	ldr	r3, [r7, #28]
 8016a3a:	9300      	str	r3, [sp, #0]
 8016a3c:	2319      	movs	r3, #25
 8016a3e:	2201      	movs	r2, #1
 8016a40:	490f      	ldr	r1, [pc, #60]	@ (8016a80 <HAL_I2C_IsDeviceReady+0x254>)
 8016a42:	68f8      	ldr	r0, [r7, #12]
 8016a44:	f000 f8a2 	bl	8016b8c <I2C_WaitOnFlagUntilTimeout>
 8016a48:	4603      	mov	r3, r0
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d001      	beq.n	8016a52 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8016a4e:	2301      	movs	r3, #1
 8016a50:	e012      	b.n	8016a78 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8016a52:	69bb      	ldr	r3, [r7, #24]
 8016a54:	3301      	adds	r3, #1
 8016a56:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8016a58:	69ba      	ldr	r2, [r7, #24]
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	429a      	cmp	r2, r3
 8016a5e:	f4ff af32 	bcc.w	80168c6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8016a62:	68fb      	ldr	r3, [r7, #12]
 8016a64:	2220      	movs	r2, #32
 8016a66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016a6a:	68fb      	ldr	r3, [r7, #12]
 8016a6c:	2200      	movs	r2, #0
 8016a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8016a72:	2301      	movs	r3, #1
 8016a74:	e000      	b.n	8016a78 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8016a76:	2302      	movs	r3, #2
  }
}
 8016a78:	4618      	mov	r0, r3
 8016a7a:	3720      	adds	r7, #32
 8016a7c:	46bd      	mov	sp, r7
 8016a7e:	bd80      	pop	{r7, pc}
 8016a80:	00100002 	.word	0x00100002
 8016a84:	ffff0000 	.word	0xffff0000

08016a88 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8016a88:	b580      	push	{r7, lr}
 8016a8a:	b088      	sub	sp, #32
 8016a8c:	af02      	add	r7, sp, #8
 8016a8e:	60f8      	str	r0, [r7, #12]
 8016a90:	607a      	str	r2, [r7, #4]
 8016a92:	603b      	str	r3, [r7, #0]
 8016a94:	460b      	mov	r3, r1
 8016a96:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8016a98:	68fb      	ldr	r3, [r7, #12]
 8016a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016a9c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8016a9e:	697b      	ldr	r3, [r7, #20]
 8016aa0:	2b08      	cmp	r3, #8
 8016aa2:	d006      	beq.n	8016ab2 <I2C_MasterRequestWrite+0x2a>
 8016aa4:	697b      	ldr	r3, [r7, #20]
 8016aa6:	2b01      	cmp	r3, #1
 8016aa8:	d003      	beq.n	8016ab2 <I2C_MasterRequestWrite+0x2a>
 8016aaa:	697b      	ldr	r3, [r7, #20]
 8016aac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8016ab0:	d108      	bne.n	8016ac4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8016ab2:	68fb      	ldr	r3, [r7, #12]
 8016ab4:	681b      	ldr	r3, [r3, #0]
 8016ab6:	681a      	ldr	r2, [r3, #0]
 8016ab8:	68fb      	ldr	r3, [r7, #12]
 8016aba:	681b      	ldr	r3, [r3, #0]
 8016abc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8016ac0:	601a      	str	r2, [r3, #0]
 8016ac2:	e00b      	b.n	8016adc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8016ac4:	68fb      	ldr	r3, [r7, #12]
 8016ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016ac8:	2b12      	cmp	r3, #18
 8016aca:	d107      	bne.n	8016adc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8016acc:	68fb      	ldr	r3, [r7, #12]
 8016ace:	681b      	ldr	r3, [r3, #0]
 8016ad0:	681a      	ldr	r2, [r3, #0]
 8016ad2:	68fb      	ldr	r3, [r7, #12]
 8016ad4:	681b      	ldr	r3, [r3, #0]
 8016ad6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8016ada:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8016adc:	683b      	ldr	r3, [r7, #0]
 8016ade:	9300      	str	r3, [sp, #0]
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	2200      	movs	r2, #0
 8016ae4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8016ae8:	68f8      	ldr	r0, [r7, #12]
 8016aea:	f000 f84f 	bl	8016b8c <I2C_WaitOnFlagUntilTimeout>
 8016aee:	4603      	mov	r3, r0
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d00d      	beq.n	8016b10 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8016af4:	68fb      	ldr	r3, [r7, #12]
 8016af6:	681b      	ldr	r3, [r3, #0]
 8016af8:	681b      	ldr	r3, [r3, #0]
 8016afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016afe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016b02:	d103      	bne.n	8016b0c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8016b04:	68fb      	ldr	r3, [r7, #12]
 8016b06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016b0a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8016b0c:	2303      	movs	r3, #3
 8016b0e:	e035      	b.n	8016b7c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8016b10:	68fb      	ldr	r3, [r7, #12]
 8016b12:	691b      	ldr	r3, [r3, #16]
 8016b14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8016b18:	d108      	bne.n	8016b2c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8016b1a:	897b      	ldrh	r3, [r7, #10]
 8016b1c:	b2db      	uxtb	r3, r3
 8016b1e:	461a      	mov	r2, r3
 8016b20:	68fb      	ldr	r3, [r7, #12]
 8016b22:	681b      	ldr	r3, [r3, #0]
 8016b24:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8016b28:	611a      	str	r2, [r3, #16]
 8016b2a:	e01b      	b.n	8016b64 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8016b2c:	897b      	ldrh	r3, [r7, #10]
 8016b2e:	11db      	asrs	r3, r3, #7
 8016b30:	b2db      	uxtb	r3, r3
 8016b32:	f003 0306 	and.w	r3, r3, #6
 8016b36:	b2db      	uxtb	r3, r3
 8016b38:	f063 030f 	orn	r3, r3, #15
 8016b3c:	b2da      	uxtb	r2, r3
 8016b3e:	68fb      	ldr	r3, [r7, #12]
 8016b40:	681b      	ldr	r3, [r3, #0]
 8016b42:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8016b44:	683b      	ldr	r3, [r7, #0]
 8016b46:	687a      	ldr	r2, [r7, #4]
 8016b48:	490e      	ldr	r1, [pc, #56]	@ (8016b84 <I2C_MasterRequestWrite+0xfc>)
 8016b4a:	68f8      	ldr	r0, [r7, #12]
 8016b4c:	f000 f898 	bl	8016c80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8016b50:	4603      	mov	r3, r0
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d001      	beq.n	8016b5a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8016b56:	2301      	movs	r3, #1
 8016b58:	e010      	b.n	8016b7c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8016b5a:	897b      	ldrh	r3, [r7, #10]
 8016b5c:	b2da      	uxtb	r2, r3
 8016b5e:	68fb      	ldr	r3, [r7, #12]
 8016b60:	681b      	ldr	r3, [r3, #0]
 8016b62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8016b64:	683b      	ldr	r3, [r7, #0]
 8016b66:	687a      	ldr	r2, [r7, #4]
 8016b68:	4907      	ldr	r1, [pc, #28]	@ (8016b88 <I2C_MasterRequestWrite+0x100>)
 8016b6a:	68f8      	ldr	r0, [r7, #12]
 8016b6c:	f000 f888 	bl	8016c80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8016b70:	4603      	mov	r3, r0
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	d001      	beq.n	8016b7a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8016b76:	2301      	movs	r3, #1
 8016b78:	e000      	b.n	8016b7c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8016b7a:	2300      	movs	r3, #0
}
 8016b7c:	4618      	mov	r0, r3
 8016b7e:	3718      	adds	r7, #24
 8016b80:	46bd      	mov	sp, r7
 8016b82:	bd80      	pop	{r7, pc}
 8016b84:	00010008 	.word	0x00010008
 8016b88:	00010002 	.word	0x00010002

08016b8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8016b8c:	b580      	push	{r7, lr}
 8016b8e:	b084      	sub	sp, #16
 8016b90:	af00      	add	r7, sp, #0
 8016b92:	60f8      	str	r0, [r7, #12]
 8016b94:	60b9      	str	r1, [r7, #8]
 8016b96:	603b      	str	r3, [r7, #0]
 8016b98:	4613      	mov	r3, r2
 8016b9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8016b9c:	e048      	b.n	8016c30 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8016b9e:	683b      	ldr	r3, [r7, #0]
 8016ba0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8016ba4:	d044      	beq.n	8016c30 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016ba6:	f7ff f807 	bl	8015bb8 <HAL_GetTick>
 8016baa:	4602      	mov	r2, r0
 8016bac:	69bb      	ldr	r3, [r7, #24]
 8016bae:	1ad3      	subs	r3, r2, r3
 8016bb0:	683a      	ldr	r2, [r7, #0]
 8016bb2:	429a      	cmp	r2, r3
 8016bb4:	d302      	bcc.n	8016bbc <I2C_WaitOnFlagUntilTimeout+0x30>
 8016bb6:	683b      	ldr	r3, [r7, #0]
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	d139      	bne.n	8016c30 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8016bbc:	68bb      	ldr	r3, [r7, #8]
 8016bbe:	0c1b      	lsrs	r3, r3, #16
 8016bc0:	b2db      	uxtb	r3, r3
 8016bc2:	2b01      	cmp	r3, #1
 8016bc4:	d10d      	bne.n	8016be2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8016bc6:	68fb      	ldr	r3, [r7, #12]
 8016bc8:	681b      	ldr	r3, [r3, #0]
 8016bca:	695b      	ldr	r3, [r3, #20]
 8016bcc:	43da      	mvns	r2, r3
 8016bce:	68bb      	ldr	r3, [r7, #8]
 8016bd0:	4013      	ands	r3, r2
 8016bd2:	b29b      	uxth	r3, r3
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	bf0c      	ite	eq
 8016bd8:	2301      	moveq	r3, #1
 8016bda:	2300      	movne	r3, #0
 8016bdc:	b2db      	uxtb	r3, r3
 8016bde:	461a      	mov	r2, r3
 8016be0:	e00c      	b.n	8016bfc <I2C_WaitOnFlagUntilTimeout+0x70>
 8016be2:	68fb      	ldr	r3, [r7, #12]
 8016be4:	681b      	ldr	r3, [r3, #0]
 8016be6:	699b      	ldr	r3, [r3, #24]
 8016be8:	43da      	mvns	r2, r3
 8016bea:	68bb      	ldr	r3, [r7, #8]
 8016bec:	4013      	ands	r3, r2
 8016bee:	b29b      	uxth	r3, r3
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	bf0c      	ite	eq
 8016bf4:	2301      	moveq	r3, #1
 8016bf6:	2300      	movne	r3, #0
 8016bf8:	b2db      	uxtb	r3, r3
 8016bfa:	461a      	mov	r2, r3
 8016bfc:	79fb      	ldrb	r3, [r7, #7]
 8016bfe:	429a      	cmp	r2, r3
 8016c00:	d116      	bne.n	8016c30 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8016c02:	68fb      	ldr	r3, [r7, #12]
 8016c04:	2200      	movs	r2, #0
 8016c06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8016c08:	68fb      	ldr	r3, [r7, #12]
 8016c0a:	2220      	movs	r2, #32
 8016c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8016c10:	68fb      	ldr	r3, [r7, #12]
 8016c12:	2200      	movs	r2, #0
 8016c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8016c18:	68fb      	ldr	r3, [r7, #12]
 8016c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016c1c:	f043 0220 	orr.w	r2, r3, #32
 8016c20:	68fb      	ldr	r3, [r7, #12]
 8016c22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8016c24:	68fb      	ldr	r3, [r7, #12]
 8016c26:	2200      	movs	r2, #0
 8016c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8016c2c:	2301      	movs	r3, #1
 8016c2e:	e023      	b.n	8016c78 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8016c30:	68bb      	ldr	r3, [r7, #8]
 8016c32:	0c1b      	lsrs	r3, r3, #16
 8016c34:	b2db      	uxtb	r3, r3
 8016c36:	2b01      	cmp	r3, #1
 8016c38:	d10d      	bne.n	8016c56 <I2C_WaitOnFlagUntilTimeout+0xca>
 8016c3a:	68fb      	ldr	r3, [r7, #12]
 8016c3c:	681b      	ldr	r3, [r3, #0]
 8016c3e:	695b      	ldr	r3, [r3, #20]
 8016c40:	43da      	mvns	r2, r3
 8016c42:	68bb      	ldr	r3, [r7, #8]
 8016c44:	4013      	ands	r3, r2
 8016c46:	b29b      	uxth	r3, r3
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	bf0c      	ite	eq
 8016c4c:	2301      	moveq	r3, #1
 8016c4e:	2300      	movne	r3, #0
 8016c50:	b2db      	uxtb	r3, r3
 8016c52:	461a      	mov	r2, r3
 8016c54:	e00c      	b.n	8016c70 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8016c56:	68fb      	ldr	r3, [r7, #12]
 8016c58:	681b      	ldr	r3, [r3, #0]
 8016c5a:	699b      	ldr	r3, [r3, #24]
 8016c5c:	43da      	mvns	r2, r3
 8016c5e:	68bb      	ldr	r3, [r7, #8]
 8016c60:	4013      	ands	r3, r2
 8016c62:	b29b      	uxth	r3, r3
 8016c64:	2b00      	cmp	r3, #0
 8016c66:	bf0c      	ite	eq
 8016c68:	2301      	moveq	r3, #1
 8016c6a:	2300      	movne	r3, #0
 8016c6c:	b2db      	uxtb	r3, r3
 8016c6e:	461a      	mov	r2, r3
 8016c70:	79fb      	ldrb	r3, [r7, #7]
 8016c72:	429a      	cmp	r2, r3
 8016c74:	d093      	beq.n	8016b9e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8016c76:	2300      	movs	r3, #0
}
 8016c78:	4618      	mov	r0, r3
 8016c7a:	3710      	adds	r7, #16
 8016c7c:	46bd      	mov	sp, r7
 8016c7e:	bd80      	pop	{r7, pc}

08016c80 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8016c80:	b580      	push	{r7, lr}
 8016c82:	b084      	sub	sp, #16
 8016c84:	af00      	add	r7, sp, #0
 8016c86:	60f8      	str	r0, [r7, #12]
 8016c88:	60b9      	str	r1, [r7, #8]
 8016c8a:	607a      	str	r2, [r7, #4]
 8016c8c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8016c8e:	e071      	b.n	8016d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8016c90:	68fb      	ldr	r3, [r7, #12]
 8016c92:	681b      	ldr	r3, [r3, #0]
 8016c94:	695b      	ldr	r3, [r3, #20]
 8016c96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8016c9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016c9e:	d123      	bne.n	8016ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016ca0:	68fb      	ldr	r3, [r7, #12]
 8016ca2:	681b      	ldr	r3, [r3, #0]
 8016ca4:	681a      	ldr	r2, [r3, #0]
 8016ca6:	68fb      	ldr	r3, [r7, #12]
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016cae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016cb0:	68fb      	ldr	r3, [r7, #12]
 8016cb2:	681b      	ldr	r3, [r3, #0]
 8016cb4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8016cb8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8016cba:	68fb      	ldr	r3, [r7, #12]
 8016cbc:	2200      	movs	r2, #0
 8016cbe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8016cc0:	68fb      	ldr	r3, [r7, #12]
 8016cc2:	2220      	movs	r2, #32
 8016cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8016cc8:	68fb      	ldr	r3, [r7, #12]
 8016cca:	2200      	movs	r2, #0
 8016ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8016cd0:	68fb      	ldr	r3, [r7, #12]
 8016cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016cd4:	f043 0204 	orr.w	r2, r3, #4
 8016cd8:	68fb      	ldr	r3, [r7, #12]
 8016cda:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016cdc:	68fb      	ldr	r3, [r7, #12]
 8016cde:	2200      	movs	r2, #0
 8016ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8016ce4:	2301      	movs	r3, #1
 8016ce6:	e067      	b.n	8016db8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8016cee:	d041      	beq.n	8016d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016cf0:	f7fe ff62 	bl	8015bb8 <HAL_GetTick>
 8016cf4:	4602      	mov	r2, r0
 8016cf6:	683b      	ldr	r3, [r7, #0]
 8016cf8:	1ad3      	subs	r3, r2, r3
 8016cfa:	687a      	ldr	r2, [r7, #4]
 8016cfc:	429a      	cmp	r2, r3
 8016cfe:	d302      	bcc.n	8016d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d136      	bne.n	8016d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8016d06:	68bb      	ldr	r3, [r7, #8]
 8016d08:	0c1b      	lsrs	r3, r3, #16
 8016d0a:	b2db      	uxtb	r3, r3
 8016d0c:	2b01      	cmp	r3, #1
 8016d0e:	d10c      	bne.n	8016d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8016d10:	68fb      	ldr	r3, [r7, #12]
 8016d12:	681b      	ldr	r3, [r3, #0]
 8016d14:	695b      	ldr	r3, [r3, #20]
 8016d16:	43da      	mvns	r2, r3
 8016d18:	68bb      	ldr	r3, [r7, #8]
 8016d1a:	4013      	ands	r3, r2
 8016d1c:	b29b      	uxth	r3, r3
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	bf14      	ite	ne
 8016d22:	2301      	movne	r3, #1
 8016d24:	2300      	moveq	r3, #0
 8016d26:	b2db      	uxtb	r3, r3
 8016d28:	e00b      	b.n	8016d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8016d2a:	68fb      	ldr	r3, [r7, #12]
 8016d2c:	681b      	ldr	r3, [r3, #0]
 8016d2e:	699b      	ldr	r3, [r3, #24]
 8016d30:	43da      	mvns	r2, r3
 8016d32:	68bb      	ldr	r3, [r7, #8]
 8016d34:	4013      	ands	r3, r2
 8016d36:	b29b      	uxth	r3, r3
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	bf14      	ite	ne
 8016d3c:	2301      	movne	r3, #1
 8016d3e:	2300      	moveq	r3, #0
 8016d40:	b2db      	uxtb	r3, r3
 8016d42:	2b00      	cmp	r3, #0
 8016d44:	d016      	beq.n	8016d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8016d46:	68fb      	ldr	r3, [r7, #12]
 8016d48:	2200      	movs	r2, #0
 8016d4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8016d4c:	68fb      	ldr	r3, [r7, #12]
 8016d4e:	2220      	movs	r2, #32
 8016d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8016d54:	68fb      	ldr	r3, [r7, #12]
 8016d56:	2200      	movs	r2, #0
 8016d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8016d5c:	68fb      	ldr	r3, [r7, #12]
 8016d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016d60:	f043 0220 	orr.w	r2, r3, #32
 8016d64:	68fb      	ldr	r3, [r7, #12]
 8016d66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8016d68:	68fb      	ldr	r3, [r7, #12]
 8016d6a:	2200      	movs	r2, #0
 8016d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8016d70:	2301      	movs	r3, #1
 8016d72:	e021      	b.n	8016db8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8016d74:	68bb      	ldr	r3, [r7, #8]
 8016d76:	0c1b      	lsrs	r3, r3, #16
 8016d78:	b2db      	uxtb	r3, r3
 8016d7a:	2b01      	cmp	r3, #1
 8016d7c:	d10c      	bne.n	8016d98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8016d7e:	68fb      	ldr	r3, [r7, #12]
 8016d80:	681b      	ldr	r3, [r3, #0]
 8016d82:	695b      	ldr	r3, [r3, #20]
 8016d84:	43da      	mvns	r2, r3
 8016d86:	68bb      	ldr	r3, [r7, #8]
 8016d88:	4013      	ands	r3, r2
 8016d8a:	b29b      	uxth	r3, r3
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	bf14      	ite	ne
 8016d90:	2301      	movne	r3, #1
 8016d92:	2300      	moveq	r3, #0
 8016d94:	b2db      	uxtb	r3, r3
 8016d96:	e00b      	b.n	8016db0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8016d98:	68fb      	ldr	r3, [r7, #12]
 8016d9a:	681b      	ldr	r3, [r3, #0]
 8016d9c:	699b      	ldr	r3, [r3, #24]
 8016d9e:	43da      	mvns	r2, r3
 8016da0:	68bb      	ldr	r3, [r7, #8]
 8016da2:	4013      	ands	r3, r2
 8016da4:	b29b      	uxth	r3, r3
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	bf14      	ite	ne
 8016daa:	2301      	movne	r3, #1
 8016dac:	2300      	moveq	r3, #0
 8016dae:	b2db      	uxtb	r3, r3
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	f47f af6d 	bne.w	8016c90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8016db6:	2300      	movs	r3, #0
}
 8016db8:	4618      	mov	r0, r3
 8016dba:	3710      	adds	r7, #16
 8016dbc:	46bd      	mov	sp, r7
 8016dbe:	bd80      	pop	{r7, pc}

08016dc0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8016dc0:	b580      	push	{r7, lr}
 8016dc2:	b084      	sub	sp, #16
 8016dc4:	af00      	add	r7, sp, #0
 8016dc6:	60f8      	str	r0, [r7, #12]
 8016dc8:	60b9      	str	r1, [r7, #8]
 8016dca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8016dcc:	e034      	b.n	8016e38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8016dce:	68f8      	ldr	r0, [r7, #12]
 8016dd0:	f000 f886 	bl	8016ee0 <I2C_IsAcknowledgeFailed>
 8016dd4:	4603      	mov	r3, r0
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	d001      	beq.n	8016dde <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8016dda:	2301      	movs	r3, #1
 8016ddc:	e034      	b.n	8016e48 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8016dde:	68bb      	ldr	r3, [r7, #8]
 8016de0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8016de4:	d028      	beq.n	8016e38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016de6:	f7fe fee7 	bl	8015bb8 <HAL_GetTick>
 8016dea:	4602      	mov	r2, r0
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	1ad3      	subs	r3, r2, r3
 8016df0:	68ba      	ldr	r2, [r7, #8]
 8016df2:	429a      	cmp	r2, r3
 8016df4:	d302      	bcc.n	8016dfc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8016df6:	68bb      	ldr	r3, [r7, #8]
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	d11d      	bne.n	8016e38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8016dfc:	68fb      	ldr	r3, [r7, #12]
 8016dfe:	681b      	ldr	r3, [r3, #0]
 8016e00:	695b      	ldr	r3, [r3, #20]
 8016e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016e06:	2b80      	cmp	r3, #128	@ 0x80
 8016e08:	d016      	beq.n	8016e38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8016e0a:	68fb      	ldr	r3, [r7, #12]
 8016e0c:	2200      	movs	r2, #0
 8016e0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8016e10:	68fb      	ldr	r3, [r7, #12]
 8016e12:	2220      	movs	r2, #32
 8016e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8016e18:	68fb      	ldr	r3, [r7, #12]
 8016e1a:	2200      	movs	r2, #0
 8016e1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8016e20:	68fb      	ldr	r3, [r7, #12]
 8016e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016e24:	f043 0220 	orr.w	r2, r3, #32
 8016e28:	68fb      	ldr	r3, [r7, #12]
 8016e2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8016e2c:	68fb      	ldr	r3, [r7, #12]
 8016e2e:	2200      	movs	r2, #0
 8016e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8016e34:	2301      	movs	r3, #1
 8016e36:	e007      	b.n	8016e48 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8016e38:	68fb      	ldr	r3, [r7, #12]
 8016e3a:	681b      	ldr	r3, [r3, #0]
 8016e3c:	695b      	ldr	r3, [r3, #20]
 8016e3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016e42:	2b80      	cmp	r3, #128	@ 0x80
 8016e44:	d1c3      	bne.n	8016dce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8016e46:	2300      	movs	r3, #0
}
 8016e48:	4618      	mov	r0, r3
 8016e4a:	3710      	adds	r7, #16
 8016e4c:	46bd      	mov	sp, r7
 8016e4e:	bd80      	pop	{r7, pc}

08016e50 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8016e50:	b580      	push	{r7, lr}
 8016e52:	b084      	sub	sp, #16
 8016e54:	af00      	add	r7, sp, #0
 8016e56:	60f8      	str	r0, [r7, #12]
 8016e58:	60b9      	str	r1, [r7, #8]
 8016e5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8016e5c:	e034      	b.n	8016ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8016e5e:	68f8      	ldr	r0, [r7, #12]
 8016e60:	f000 f83e 	bl	8016ee0 <I2C_IsAcknowledgeFailed>
 8016e64:	4603      	mov	r3, r0
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	d001      	beq.n	8016e6e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8016e6a:	2301      	movs	r3, #1
 8016e6c:	e034      	b.n	8016ed8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8016e6e:	68bb      	ldr	r3, [r7, #8]
 8016e70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8016e74:	d028      	beq.n	8016ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016e76:	f7fe fe9f 	bl	8015bb8 <HAL_GetTick>
 8016e7a:	4602      	mov	r2, r0
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	1ad3      	subs	r3, r2, r3
 8016e80:	68ba      	ldr	r2, [r7, #8]
 8016e82:	429a      	cmp	r2, r3
 8016e84:	d302      	bcc.n	8016e8c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8016e86:	68bb      	ldr	r3, [r7, #8]
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	d11d      	bne.n	8016ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8016e8c:	68fb      	ldr	r3, [r7, #12]
 8016e8e:	681b      	ldr	r3, [r3, #0]
 8016e90:	695b      	ldr	r3, [r3, #20]
 8016e92:	f003 0304 	and.w	r3, r3, #4
 8016e96:	2b04      	cmp	r3, #4
 8016e98:	d016      	beq.n	8016ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8016e9a:	68fb      	ldr	r3, [r7, #12]
 8016e9c:	2200      	movs	r2, #0
 8016e9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8016ea0:	68fb      	ldr	r3, [r7, #12]
 8016ea2:	2220      	movs	r2, #32
 8016ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8016ea8:	68fb      	ldr	r3, [r7, #12]
 8016eaa:	2200      	movs	r2, #0
 8016eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8016eb0:	68fb      	ldr	r3, [r7, #12]
 8016eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016eb4:	f043 0220 	orr.w	r2, r3, #32
 8016eb8:	68fb      	ldr	r3, [r7, #12]
 8016eba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8016ebc:	68fb      	ldr	r3, [r7, #12]
 8016ebe:	2200      	movs	r2, #0
 8016ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8016ec4:	2301      	movs	r3, #1
 8016ec6:	e007      	b.n	8016ed8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8016ec8:	68fb      	ldr	r3, [r7, #12]
 8016eca:	681b      	ldr	r3, [r3, #0]
 8016ecc:	695b      	ldr	r3, [r3, #20]
 8016ece:	f003 0304 	and.w	r3, r3, #4
 8016ed2:	2b04      	cmp	r3, #4
 8016ed4:	d1c3      	bne.n	8016e5e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8016ed6:	2300      	movs	r3, #0
}
 8016ed8:	4618      	mov	r0, r3
 8016eda:	3710      	adds	r7, #16
 8016edc:	46bd      	mov	sp, r7
 8016ede:	bd80      	pop	{r7, pc}

08016ee0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8016ee0:	b480      	push	{r7}
 8016ee2:	b083      	sub	sp, #12
 8016ee4:	af00      	add	r7, sp, #0
 8016ee6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	681b      	ldr	r3, [r3, #0]
 8016eec:	695b      	ldr	r3, [r3, #20]
 8016eee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8016ef2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016ef6:	d11b      	bne.n	8016f30 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	681b      	ldr	r3, [r3, #0]
 8016efc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8016f00:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	2200      	movs	r2, #0
 8016f06:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	2220      	movs	r2, #32
 8016f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	2200      	movs	r2, #0
 8016f14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016f1c:	f043 0204 	orr.w	r2, r3, #4
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	2200      	movs	r2, #0
 8016f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8016f2c:	2301      	movs	r3, #1
 8016f2e:	e000      	b.n	8016f32 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8016f30:	2300      	movs	r3, #0
}
 8016f32:	4618      	mov	r0, r3
 8016f34:	370c      	adds	r7, #12
 8016f36:	46bd      	mov	sp, r7
 8016f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f3c:	4770      	bx	lr
	...

08016f40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8016f40:	b580      	push	{r7, lr}
 8016f42:	b086      	sub	sp, #24
 8016f44:	af00      	add	r7, sp, #0
 8016f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	d101      	bne.n	8016f52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8016f4e:	2301      	movs	r3, #1
 8016f50:	e267      	b.n	8017422 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	f003 0301 	and.w	r3, r3, #1
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	d075      	beq.n	801704a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8016f5e:	4b88      	ldr	r3, [pc, #544]	@ (8017180 <HAL_RCC_OscConfig+0x240>)
 8016f60:	689b      	ldr	r3, [r3, #8]
 8016f62:	f003 030c 	and.w	r3, r3, #12
 8016f66:	2b04      	cmp	r3, #4
 8016f68:	d00c      	beq.n	8016f84 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8016f6a:	4b85      	ldr	r3, [pc, #532]	@ (8017180 <HAL_RCC_OscConfig+0x240>)
 8016f6c:	689b      	ldr	r3, [r3, #8]
 8016f6e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8016f72:	2b08      	cmp	r3, #8
 8016f74:	d112      	bne.n	8016f9c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8016f76:	4b82      	ldr	r3, [pc, #520]	@ (8017180 <HAL_RCC_OscConfig+0x240>)
 8016f78:	685b      	ldr	r3, [r3, #4]
 8016f7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8016f7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8016f82:	d10b      	bne.n	8016f9c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8016f84:	4b7e      	ldr	r3, [pc, #504]	@ (8017180 <HAL_RCC_OscConfig+0x240>)
 8016f86:	681b      	ldr	r3, [r3, #0]
 8016f88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	d05b      	beq.n	8017048 <HAL_RCC_OscConfig+0x108>
 8016f90:	687b      	ldr	r3, [r7, #4]
 8016f92:	685b      	ldr	r3, [r3, #4]
 8016f94:	2b00      	cmp	r3, #0
 8016f96:	d157      	bne.n	8017048 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8016f98:	2301      	movs	r3, #1
 8016f9a:	e242      	b.n	8017422 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	685b      	ldr	r3, [r3, #4]
 8016fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016fa4:	d106      	bne.n	8016fb4 <HAL_RCC_OscConfig+0x74>
 8016fa6:	4b76      	ldr	r3, [pc, #472]	@ (8017180 <HAL_RCC_OscConfig+0x240>)
 8016fa8:	681b      	ldr	r3, [r3, #0]
 8016faa:	4a75      	ldr	r2, [pc, #468]	@ (8017180 <HAL_RCC_OscConfig+0x240>)
 8016fac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8016fb0:	6013      	str	r3, [r2, #0]
 8016fb2:	e01d      	b.n	8016ff0 <HAL_RCC_OscConfig+0xb0>
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	685b      	ldr	r3, [r3, #4]
 8016fb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8016fbc:	d10c      	bne.n	8016fd8 <HAL_RCC_OscConfig+0x98>
 8016fbe:	4b70      	ldr	r3, [pc, #448]	@ (8017180 <HAL_RCC_OscConfig+0x240>)
 8016fc0:	681b      	ldr	r3, [r3, #0]
 8016fc2:	4a6f      	ldr	r2, [pc, #444]	@ (8017180 <HAL_RCC_OscConfig+0x240>)
 8016fc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8016fc8:	6013      	str	r3, [r2, #0]
 8016fca:	4b6d      	ldr	r3, [pc, #436]	@ (8017180 <HAL_RCC_OscConfig+0x240>)
 8016fcc:	681b      	ldr	r3, [r3, #0]
 8016fce:	4a6c      	ldr	r2, [pc, #432]	@ (8017180 <HAL_RCC_OscConfig+0x240>)
 8016fd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8016fd4:	6013      	str	r3, [r2, #0]
 8016fd6:	e00b      	b.n	8016ff0 <HAL_RCC_OscConfig+0xb0>
 8016fd8:	4b69      	ldr	r3, [pc, #420]	@ (8017180 <HAL_RCC_OscConfig+0x240>)
 8016fda:	681b      	ldr	r3, [r3, #0]
 8016fdc:	4a68      	ldr	r2, [pc, #416]	@ (8017180 <HAL_RCC_OscConfig+0x240>)
 8016fde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8016fe2:	6013      	str	r3, [r2, #0]
 8016fe4:	4b66      	ldr	r3, [pc, #408]	@ (8017180 <HAL_RCC_OscConfig+0x240>)
 8016fe6:	681b      	ldr	r3, [r3, #0]
 8016fe8:	4a65      	ldr	r2, [pc, #404]	@ (8017180 <HAL_RCC_OscConfig+0x240>)
 8016fea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8016fee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	685b      	ldr	r3, [r3, #4]
 8016ff4:	2b00      	cmp	r3, #0
 8016ff6:	d013      	beq.n	8017020 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8016ff8:	f7fe fdde 	bl	8015bb8 <HAL_GetTick>
 8016ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8016ffe:	e008      	b.n	8017012 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8017000:	f7fe fdda 	bl	8015bb8 <HAL_GetTick>
 8017004:	4602      	mov	r2, r0
 8017006:	693b      	ldr	r3, [r7, #16]
 8017008:	1ad3      	subs	r3, r2, r3
 801700a:	2b64      	cmp	r3, #100	@ 0x64
 801700c:	d901      	bls.n	8017012 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801700e:	2303      	movs	r3, #3
 8017010:	e207      	b.n	8017422 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8017012:	4b5b      	ldr	r3, [pc, #364]	@ (8017180 <HAL_RCC_OscConfig+0x240>)
 8017014:	681b      	ldr	r3, [r3, #0]
 8017016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801701a:	2b00      	cmp	r3, #0
 801701c:	d0f0      	beq.n	8017000 <HAL_RCC_OscConfig+0xc0>
 801701e:	e014      	b.n	801704a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017020:	f7fe fdca 	bl	8015bb8 <HAL_GetTick>
 8017024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8017026:	e008      	b.n	801703a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8017028:	f7fe fdc6 	bl	8015bb8 <HAL_GetTick>
 801702c:	4602      	mov	r2, r0
 801702e:	693b      	ldr	r3, [r7, #16]
 8017030:	1ad3      	subs	r3, r2, r3
 8017032:	2b64      	cmp	r3, #100	@ 0x64
 8017034:	d901      	bls.n	801703a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8017036:	2303      	movs	r3, #3
 8017038:	e1f3      	b.n	8017422 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801703a:	4b51      	ldr	r3, [pc, #324]	@ (8017180 <HAL_RCC_OscConfig+0x240>)
 801703c:	681b      	ldr	r3, [r3, #0]
 801703e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8017042:	2b00      	cmp	r3, #0
 8017044:	d1f0      	bne.n	8017028 <HAL_RCC_OscConfig+0xe8>
 8017046:	e000      	b.n	801704a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8017048:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	681b      	ldr	r3, [r3, #0]
 801704e:	f003 0302 	and.w	r3, r3, #2
 8017052:	2b00      	cmp	r3, #0
 8017054:	d063      	beq.n	801711e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8017056:	4b4a      	ldr	r3, [pc, #296]	@ (8017180 <HAL_RCC_OscConfig+0x240>)
 8017058:	689b      	ldr	r3, [r3, #8]
 801705a:	f003 030c 	and.w	r3, r3, #12
 801705e:	2b00      	cmp	r3, #0
 8017060:	d00b      	beq.n	801707a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8017062:	4b47      	ldr	r3, [pc, #284]	@ (8017180 <HAL_RCC_OscConfig+0x240>)
 8017064:	689b      	ldr	r3, [r3, #8]
 8017066:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 801706a:	2b08      	cmp	r3, #8
 801706c:	d11c      	bne.n	80170a8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801706e:	4b44      	ldr	r3, [pc, #272]	@ (8017180 <HAL_RCC_OscConfig+0x240>)
 8017070:	685b      	ldr	r3, [r3, #4]
 8017072:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8017076:	2b00      	cmp	r3, #0
 8017078:	d116      	bne.n	80170a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801707a:	4b41      	ldr	r3, [pc, #260]	@ (8017180 <HAL_RCC_OscConfig+0x240>)
 801707c:	681b      	ldr	r3, [r3, #0]
 801707e:	f003 0302 	and.w	r3, r3, #2
 8017082:	2b00      	cmp	r3, #0
 8017084:	d005      	beq.n	8017092 <HAL_RCC_OscConfig+0x152>
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	68db      	ldr	r3, [r3, #12]
 801708a:	2b01      	cmp	r3, #1
 801708c:	d001      	beq.n	8017092 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801708e:	2301      	movs	r3, #1
 8017090:	e1c7      	b.n	8017422 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8017092:	4b3b      	ldr	r3, [pc, #236]	@ (8017180 <HAL_RCC_OscConfig+0x240>)
 8017094:	681b      	ldr	r3, [r3, #0]
 8017096:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	691b      	ldr	r3, [r3, #16]
 801709e:	00db      	lsls	r3, r3, #3
 80170a0:	4937      	ldr	r1, [pc, #220]	@ (8017180 <HAL_RCC_OscConfig+0x240>)
 80170a2:	4313      	orrs	r3, r2
 80170a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80170a6:	e03a      	b.n	801711e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	68db      	ldr	r3, [r3, #12]
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	d020      	beq.n	80170f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80170b0:	4b34      	ldr	r3, [pc, #208]	@ (8017184 <HAL_RCC_OscConfig+0x244>)
 80170b2:	2201      	movs	r2, #1
 80170b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80170b6:	f7fe fd7f 	bl	8015bb8 <HAL_GetTick>
 80170ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80170bc:	e008      	b.n	80170d0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80170be:	f7fe fd7b 	bl	8015bb8 <HAL_GetTick>
 80170c2:	4602      	mov	r2, r0
 80170c4:	693b      	ldr	r3, [r7, #16]
 80170c6:	1ad3      	subs	r3, r2, r3
 80170c8:	2b02      	cmp	r3, #2
 80170ca:	d901      	bls.n	80170d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80170cc:	2303      	movs	r3, #3
 80170ce:	e1a8      	b.n	8017422 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80170d0:	4b2b      	ldr	r3, [pc, #172]	@ (8017180 <HAL_RCC_OscConfig+0x240>)
 80170d2:	681b      	ldr	r3, [r3, #0]
 80170d4:	f003 0302 	and.w	r3, r3, #2
 80170d8:	2b00      	cmp	r3, #0
 80170da:	d0f0      	beq.n	80170be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80170dc:	4b28      	ldr	r3, [pc, #160]	@ (8017180 <HAL_RCC_OscConfig+0x240>)
 80170de:	681b      	ldr	r3, [r3, #0]
 80170e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80170e4:	687b      	ldr	r3, [r7, #4]
 80170e6:	691b      	ldr	r3, [r3, #16]
 80170e8:	00db      	lsls	r3, r3, #3
 80170ea:	4925      	ldr	r1, [pc, #148]	@ (8017180 <HAL_RCC_OscConfig+0x240>)
 80170ec:	4313      	orrs	r3, r2
 80170ee:	600b      	str	r3, [r1, #0]
 80170f0:	e015      	b.n	801711e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80170f2:	4b24      	ldr	r3, [pc, #144]	@ (8017184 <HAL_RCC_OscConfig+0x244>)
 80170f4:	2200      	movs	r2, #0
 80170f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80170f8:	f7fe fd5e 	bl	8015bb8 <HAL_GetTick>
 80170fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80170fe:	e008      	b.n	8017112 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8017100:	f7fe fd5a 	bl	8015bb8 <HAL_GetTick>
 8017104:	4602      	mov	r2, r0
 8017106:	693b      	ldr	r3, [r7, #16]
 8017108:	1ad3      	subs	r3, r2, r3
 801710a:	2b02      	cmp	r3, #2
 801710c:	d901      	bls.n	8017112 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801710e:	2303      	movs	r3, #3
 8017110:	e187      	b.n	8017422 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8017112:	4b1b      	ldr	r3, [pc, #108]	@ (8017180 <HAL_RCC_OscConfig+0x240>)
 8017114:	681b      	ldr	r3, [r3, #0]
 8017116:	f003 0302 	and.w	r3, r3, #2
 801711a:	2b00      	cmp	r3, #0
 801711c:	d1f0      	bne.n	8017100 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801711e:	687b      	ldr	r3, [r7, #4]
 8017120:	681b      	ldr	r3, [r3, #0]
 8017122:	f003 0308 	and.w	r3, r3, #8
 8017126:	2b00      	cmp	r3, #0
 8017128:	d036      	beq.n	8017198 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	695b      	ldr	r3, [r3, #20]
 801712e:	2b00      	cmp	r3, #0
 8017130:	d016      	beq.n	8017160 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8017132:	4b15      	ldr	r3, [pc, #84]	@ (8017188 <HAL_RCC_OscConfig+0x248>)
 8017134:	2201      	movs	r2, #1
 8017136:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017138:	f7fe fd3e 	bl	8015bb8 <HAL_GetTick>
 801713c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801713e:	e008      	b.n	8017152 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8017140:	f7fe fd3a 	bl	8015bb8 <HAL_GetTick>
 8017144:	4602      	mov	r2, r0
 8017146:	693b      	ldr	r3, [r7, #16]
 8017148:	1ad3      	subs	r3, r2, r3
 801714a:	2b02      	cmp	r3, #2
 801714c:	d901      	bls.n	8017152 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801714e:	2303      	movs	r3, #3
 8017150:	e167      	b.n	8017422 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8017152:	4b0b      	ldr	r3, [pc, #44]	@ (8017180 <HAL_RCC_OscConfig+0x240>)
 8017154:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017156:	f003 0302 	and.w	r3, r3, #2
 801715a:	2b00      	cmp	r3, #0
 801715c:	d0f0      	beq.n	8017140 <HAL_RCC_OscConfig+0x200>
 801715e:	e01b      	b.n	8017198 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8017160:	4b09      	ldr	r3, [pc, #36]	@ (8017188 <HAL_RCC_OscConfig+0x248>)
 8017162:	2200      	movs	r2, #0
 8017164:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8017166:	f7fe fd27 	bl	8015bb8 <HAL_GetTick>
 801716a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801716c:	e00e      	b.n	801718c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801716e:	f7fe fd23 	bl	8015bb8 <HAL_GetTick>
 8017172:	4602      	mov	r2, r0
 8017174:	693b      	ldr	r3, [r7, #16]
 8017176:	1ad3      	subs	r3, r2, r3
 8017178:	2b02      	cmp	r3, #2
 801717a:	d907      	bls.n	801718c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 801717c:	2303      	movs	r3, #3
 801717e:	e150      	b.n	8017422 <HAL_RCC_OscConfig+0x4e2>
 8017180:	40023800 	.word	0x40023800
 8017184:	42470000 	.word	0x42470000
 8017188:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801718c:	4b88      	ldr	r3, [pc, #544]	@ (80173b0 <HAL_RCC_OscConfig+0x470>)
 801718e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017190:	f003 0302 	and.w	r3, r3, #2
 8017194:	2b00      	cmp	r3, #0
 8017196:	d1ea      	bne.n	801716e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	681b      	ldr	r3, [r3, #0]
 801719c:	f003 0304 	and.w	r3, r3, #4
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	f000 8097 	beq.w	80172d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80171a6:	2300      	movs	r3, #0
 80171a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80171aa:	4b81      	ldr	r3, [pc, #516]	@ (80173b0 <HAL_RCC_OscConfig+0x470>)
 80171ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80171ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	d10f      	bne.n	80171d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80171b6:	2300      	movs	r3, #0
 80171b8:	60bb      	str	r3, [r7, #8]
 80171ba:	4b7d      	ldr	r3, [pc, #500]	@ (80173b0 <HAL_RCC_OscConfig+0x470>)
 80171bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80171be:	4a7c      	ldr	r2, [pc, #496]	@ (80173b0 <HAL_RCC_OscConfig+0x470>)
 80171c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80171c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80171c6:	4b7a      	ldr	r3, [pc, #488]	@ (80173b0 <HAL_RCC_OscConfig+0x470>)
 80171c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80171ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80171ce:	60bb      	str	r3, [r7, #8]
 80171d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80171d2:	2301      	movs	r3, #1
 80171d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80171d6:	4b77      	ldr	r3, [pc, #476]	@ (80173b4 <HAL_RCC_OscConfig+0x474>)
 80171d8:	681b      	ldr	r3, [r3, #0]
 80171da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80171de:	2b00      	cmp	r3, #0
 80171e0:	d118      	bne.n	8017214 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80171e2:	4b74      	ldr	r3, [pc, #464]	@ (80173b4 <HAL_RCC_OscConfig+0x474>)
 80171e4:	681b      	ldr	r3, [r3, #0]
 80171e6:	4a73      	ldr	r2, [pc, #460]	@ (80173b4 <HAL_RCC_OscConfig+0x474>)
 80171e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80171ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80171ee:	f7fe fce3 	bl	8015bb8 <HAL_GetTick>
 80171f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80171f4:	e008      	b.n	8017208 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80171f6:	f7fe fcdf 	bl	8015bb8 <HAL_GetTick>
 80171fa:	4602      	mov	r2, r0
 80171fc:	693b      	ldr	r3, [r7, #16]
 80171fe:	1ad3      	subs	r3, r2, r3
 8017200:	2b02      	cmp	r3, #2
 8017202:	d901      	bls.n	8017208 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8017204:	2303      	movs	r3, #3
 8017206:	e10c      	b.n	8017422 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8017208:	4b6a      	ldr	r3, [pc, #424]	@ (80173b4 <HAL_RCC_OscConfig+0x474>)
 801720a:	681b      	ldr	r3, [r3, #0]
 801720c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017210:	2b00      	cmp	r3, #0
 8017212:	d0f0      	beq.n	80171f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	689b      	ldr	r3, [r3, #8]
 8017218:	2b01      	cmp	r3, #1
 801721a:	d106      	bne.n	801722a <HAL_RCC_OscConfig+0x2ea>
 801721c:	4b64      	ldr	r3, [pc, #400]	@ (80173b0 <HAL_RCC_OscConfig+0x470>)
 801721e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017220:	4a63      	ldr	r2, [pc, #396]	@ (80173b0 <HAL_RCC_OscConfig+0x470>)
 8017222:	f043 0301 	orr.w	r3, r3, #1
 8017226:	6713      	str	r3, [r2, #112]	@ 0x70
 8017228:	e01c      	b.n	8017264 <HAL_RCC_OscConfig+0x324>
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	689b      	ldr	r3, [r3, #8]
 801722e:	2b05      	cmp	r3, #5
 8017230:	d10c      	bne.n	801724c <HAL_RCC_OscConfig+0x30c>
 8017232:	4b5f      	ldr	r3, [pc, #380]	@ (80173b0 <HAL_RCC_OscConfig+0x470>)
 8017234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017236:	4a5e      	ldr	r2, [pc, #376]	@ (80173b0 <HAL_RCC_OscConfig+0x470>)
 8017238:	f043 0304 	orr.w	r3, r3, #4
 801723c:	6713      	str	r3, [r2, #112]	@ 0x70
 801723e:	4b5c      	ldr	r3, [pc, #368]	@ (80173b0 <HAL_RCC_OscConfig+0x470>)
 8017240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017242:	4a5b      	ldr	r2, [pc, #364]	@ (80173b0 <HAL_RCC_OscConfig+0x470>)
 8017244:	f043 0301 	orr.w	r3, r3, #1
 8017248:	6713      	str	r3, [r2, #112]	@ 0x70
 801724a:	e00b      	b.n	8017264 <HAL_RCC_OscConfig+0x324>
 801724c:	4b58      	ldr	r3, [pc, #352]	@ (80173b0 <HAL_RCC_OscConfig+0x470>)
 801724e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017250:	4a57      	ldr	r2, [pc, #348]	@ (80173b0 <HAL_RCC_OscConfig+0x470>)
 8017252:	f023 0301 	bic.w	r3, r3, #1
 8017256:	6713      	str	r3, [r2, #112]	@ 0x70
 8017258:	4b55      	ldr	r3, [pc, #340]	@ (80173b0 <HAL_RCC_OscConfig+0x470>)
 801725a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801725c:	4a54      	ldr	r2, [pc, #336]	@ (80173b0 <HAL_RCC_OscConfig+0x470>)
 801725e:	f023 0304 	bic.w	r3, r3, #4
 8017262:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	689b      	ldr	r3, [r3, #8]
 8017268:	2b00      	cmp	r3, #0
 801726a:	d015      	beq.n	8017298 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801726c:	f7fe fca4 	bl	8015bb8 <HAL_GetTick>
 8017270:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8017272:	e00a      	b.n	801728a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8017274:	f7fe fca0 	bl	8015bb8 <HAL_GetTick>
 8017278:	4602      	mov	r2, r0
 801727a:	693b      	ldr	r3, [r7, #16]
 801727c:	1ad3      	subs	r3, r2, r3
 801727e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8017282:	4293      	cmp	r3, r2
 8017284:	d901      	bls.n	801728a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8017286:	2303      	movs	r3, #3
 8017288:	e0cb      	b.n	8017422 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801728a:	4b49      	ldr	r3, [pc, #292]	@ (80173b0 <HAL_RCC_OscConfig+0x470>)
 801728c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801728e:	f003 0302 	and.w	r3, r3, #2
 8017292:	2b00      	cmp	r3, #0
 8017294:	d0ee      	beq.n	8017274 <HAL_RCC_OscConfig+0x334>
 8017296:	e014      	b.n	80172c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8017298:	f7fe fc8e 	bl	8015bb8 <HAL_GetTick>
 801729c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801729e:	e00a      	b.n	80172b6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80172a0:	f7fe fc8a 	bl	8015bb8 <HAL_GetTick>
 80172a4:	4602      	mov	r2, r0
 80172a6:	693b      	ldr	r3, [r7, #16]
 80172a8:	1ad3      	subs	r3, r2, r3
 80172aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80172ae:	4293      	cmp	r3, r2
 80172b0:	d901      	bls.n	80172b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80172b2:	2303      	movs	r3, #3
 80172b4:	e0b5      	b.n	8017422 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80172b6:	4b3e      	ldr	r3, [pc, #248]	@ (80173b0 <HAL_RCC_OscConfig+0x470>)
 80172b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80172ba:	f003 0302 	and.w	r3, r3, #2
 80172be:	2b00      	cmp	r3, #0
 80172c0:	d1ee      	bne.n	80172a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80172c2:	7dfb      	ldrb	r3, [r7, #23]
 80172c4:	2b01      	cmp	r3, #1
 80172c6:	d105      	bne.n	80172d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80172c8:	4b39      	ldr	r3, [pc, #228]	@ (80173b0 <HAL_RCC_OscConfig+0x470>)
 80172ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80172cc:	4a38      	ldr	r2, [pc, #224]	@ (80173b0 <HAL_RCC_OscConfig+0x470>)
 80172ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80172d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	699b      	ldr	r3, [r3, #24]
 80172d8:	2b00      	cmp	r3, #0
 80172da:	f000 80a1 	beq.w	8017420 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80172de:	4b34      	ldr	r3, [pc, #208]	@ (80173b0 <HAL_RCC_OscConfig+0x470>)
 80172e0:	689b      	ldr	r3, [r3, #8]
 80172e2:	f003 030c 	and.w	r3, r3, #12
 80172e6:	2b08      	cmp	r3, #8
 80172e8:	d05c      	beq.n	80173a4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	699b      	ldr	r3, [r3, #24]
 80172ee:	2b02      	cmp	r3, #2
 80172f0:	d141      	bne.n	8017376 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80172f2:	4b31      	ldr	r3, [pc, #196]	@ (80173b8 <HAL_RCC_OscConfig+0x478>)
 80172f4:	2200      	movs	r2, #0
 80172f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80172f8:	f7fe fc5e 	bl	8015bb8 <HAL_GetTick>
 80172fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80172fe:	e008      	b.n	8017312 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8017300:	f7fe fc5a 	bl	8015bb8 <HAL_GetTick>
 8017304:	4602      	mov	r2, r0
 8017306:	693b      	ldr	r3, [r7, #16]
 8017308:	1ad3      	subs	r3, r2, r3
 801730a:	2b02      	cmp	r3, #2
 801730c:	d901      	bls.n	8017312 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 801730e:	2303      	movs	r3, #3
 8017310:	e087      	b.n	8017422 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8017312:	4b27      	ldr	r3, [pc, #156]	@ (80173b0 <HAL_RCC_OscConfig+0x470>)
 8017314:	681b      	ldr	r3, [r3, #0]
 8017316:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801731a:	2b00      	cmp	r3, #0
 801731c:	d1f0      	bne.n	8017300 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	69da      	ldr	r2, [r3, #28]
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	6a1b      	ldr	r3, [r3, #32]
 8017326:	431a      	orrs	r2, r3
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801732c:	019b      	lsls	r3, r3, #6
 801732e:	431a      	orrs	r2, r3
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017334:	085b      	lsrs	r3, r3, #1
 8017336:	3b01      	subs	r3, #1
 8017338:	041b      	lsls	r3, r3, #16
 801733a:	431a      	orrs	r2, r3
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017340:	061b      	lsls	r3, r3, #24
 8017342:	491b      	ldr	r1, [pc, #108]	@ (80173b0 <HAL_RCC_OscConfig+0x470>)
 8017344:	4313      	orrs	r3, r2
 8017346:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8017348:	4b1b      	ldr	r3, [pc, #108]	@ (80173b8 <HAL_RCC_OscConfig+0x478>)
 801734a:	2201      	movs	r2, #1
 801734c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801734e:	f7fe fc33 	bl	8015bb8 <HAL_GetTick>
 8017352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8017354:	e008      	b.n	8017368 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8017356:	f7fe fc2f 	bl	8015bb8 <HAL_GetTick>
 801735a:	4602      	mov	r2, r0
 801735c:	693b      	ldr	r3, [r7, #16]
 801735e:	1ad3      	subs	r3, r2, r3
 8017360:	2b02      	cmp	r3, #2
 8017362:	d901      	bls.n	8017368 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8017364:	2303      	movs	r3, #3
 8017366:	e05c      	b.n	8017422 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8017368:	4b11      	ldr	r3, [pc, #68]	@ (80173b0 <HAL_RCC_OscConfig+0x470>)
 801736a:	681b      	ldr	r3, [r3, #0]
 801736c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8017370:	2b00      	cmp	r3, #0
 8017372:	d0f0      	beq.n	8017356 <HAL_RCC_OscConfig+0x416>
 8017374:	e054      	b.n	8017420 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8017376:	4b10      	ldr	r3, [pc, #64]	@ (80173b8 <HAL_RCC_OscConfig+0x478>)
 8017378:	2200      	movs	r2, #0
 801737a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801737c:	f7fe fc1c 	bl	8015bb8 <HAL_GetTick>
 8017380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8017382:	e008      	b.n	8017396 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8017384:	f7fe fc18 	bl	8015bb8 <HAL_GetTick>
 8017388:	4602      	mov	r2, r0
 801738a:	693b      	ldr	r3, [r7, #16]
 801738c:	1ad3      	subs	r3, r2, r3
 801738e:	2b02      	cmp	r3, #2
 8017390:	d901      	bls.n	8017396 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8017392:	2303      	movs	r3, #3
 8017394:	e045      	b.n	8017422 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8017396:	4b06      	ldr	r3, [pc, #24]	@ (80173b0 <HAL_RCC_OscConfig+0x470>)
 8017398:	681b      	ldr	r3, [r3, #0]
 801739a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801739e:	2b00      	cmp	r3, #0
 80173a0:	d1f0      	bne.n	8017384 <HAL_RCC_OscConfig+0x444>
 80173a2:	e03d      	b.n	8017420 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	699b      	ldr	r3, [r3, #24]
 80173a8:	2b01      	cmp	r3, #1
 80173aa:	d107      	bne.n	80173bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80173ac:	2301      	movs	r3, #1
 80173ae:	e038      	b.n	8017422 <HAL_RCC_OscConfig+0x4e2>
 80173b0:	40023800 	.word	0x40023800
 80173b4:	40007000 	.word	0x40007000
 80173b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80173bc:	4b1b      	ldr	r3, [pc, #108]	@ (801742c <HAL_RCC_OscConfig+0x4ec>)
 80173be:	685b      	ldr	r3, [r3, #4]
 80173c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	699b      	ldr	r3, [r3, #24]
 80173c6:	2b01      	cmp	r3, #1
 80173c8:	d028      	beq.n	801741c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80173ca:	68fb      	ldr	r3, [r7, #12]
 80173cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80173d4:	429a      	cmp	r2, r3
 80173d6:	d121      	bne.n	801741c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80173d8:	68fb      	ldr	r3, [r7, #12]
 80173da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80173e2:	429a      	cmp	r2, r3
 80173e4:	d11a      	bne.n	801741c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80173e6:	68fa      	ldr	r2, [r7, #12]
 80173e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80173ec:	4013      	ands	r3, r2
 80173ee:	687a      	ldr	r2, [r7, #4]
 80173f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80173f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80173f4:	4293      	cmp	r3, r2
 80173f6:	d111      	bne.n	801741c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80173f8:	68fb      	ldr	r3, [r7, #12]
 80173fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80173fe:	687b      	ldr	r3, [r7, #4]
 8017400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017402:	085b      	lsrs	r3, r3, #1
 8017404:	3b01      	subs	r3, #1
 8017406:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8017408:	429a      	cmp	r2, r3
 801740a:	d107      	bne.n	801741c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 801740c:	68fb      	ldr	r3, [r7, #12]
 801740e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8017412:	687b      	ldr	r3, [r7, #4]
 8017414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017416:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8017418:	429a      	cmp	r2, r3
 801741a:	d001      	beq.n	8017420 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 801741c:	2301      	movs	r3, #1
 801741e:	e000      	b.n	8017422 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8017420:	2300      	movs	r3, #0
}
 8017422:	4618      	mov	r0, r3
 8017424:	3718      	adds	r7, #24
 8017426:	46bd      	mov	sp, r7
 8017428:	bd80      	pop	{r7, pc}
 801742a:	bf00      	nop
 801742c:	40023800 	.word	0x40023800

08017430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8017430:	b580      	push	{r7, lr}
 8017432:	b084      	sub	sp, #16
 8017434:	af00      	add	r7, sp, #0
 8017436:	6078      	str	r0, [r7, #4]
 8017438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	2b00      	cmp	r3, #0
 801743e:	d101      	bne.n	8017444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8017440:	2301      	movs	r3, #1
 8017442:	e0cc      	b.n	80175de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8017444:	4b68      	ldr	r3, [pc, #416]	@ (80175e8 <HAL_RCC_ClockConfig+0x1b8>)
 8017446:	681b      	ldr	r3, [r3, #0]
 8017448:	f003 0307 	and.w	r3, r3, #7
 801744c:	683a      	ldr	r2, [r7, #0]
 801744e:	429a      	cmp	r2, r3
 8017450:	d90c      	bls.n	801746c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8017452:	4b65      	ldr	r3, [pc, #404]	@ (80175e8 <HAL_RCC_ClockConfig+0x1b8>)
 8017454:	683a      	ldr	r2, [r7, #0]
 8017456:	b2d2      	uxtb	r2, r2
 8017458:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801745a:	4b63      	ldr	r3, [pc, #396]	@ (80175e8 <HAL_RCC_ClockConfig+0x1b8>)
 801745c:	681b      	ldr	r3, [r3, #0]
 801745e:	f003 0307 	and.w	r3, r3, #7
 8017462:	683a      	ldr	r2, [r7, #0]
 8017464:	429a      	cmp	r2, r3
 8017466:	d001      	beq.n	801746c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8017468:	2301      	movs	r3, #1
 801746a:	e0b8      	b.n	80175de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	681b      	ldr	r3, [r3, #0]
 8017470:	f003 0302 	and.w	r3, r3, #2
 8017474:	2b00      	cmp	r3, #0
 8017476:	d020      	beq.n	80174ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	681b      	ldr	r3, [r3, #0]
 801747c:	f003 0304 	and.w	r3, r3, #4
 8017480:	2b00      	cmp	r3, #0
 8017482:	d005      	beq.n	8017490 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8017484:	4b59      	ldr	r3, [pc, #356]	@ (80175ec <HAL_RCC_ClockConfig+0x1bc>)
 8017486:	689b      	ldr	r3, [r3, #8]
 8017488:	4a58      	ldr	r2, [pc, #352]	@ (80175ec <HAL_RCC_ClockConfig+0x1bc>)
 801748a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 801748e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8017490:	687b      	ldr	r3, [r7, #4]
 8017492:	681b      	ldr	r3, [r3, #0]
 8017494:	f003 0308 	and.w	r3, r3, #8
 8017498:	2b00      	cmp	r3, #0
 801749a:	d005      	beq.n	80174a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801749c:	4b53      	ldr	r3, [pc, #332]	@ (80175ec <HAL_RCC_ClockConfig+0x1bc>)
 801749e:	689b      	ldr	r3, [r3, #8]
 80174a0:	4a52      	ldr	r2, [pc, #328]	@ (80175ec <HAL_RCC_ClockConfig+0x1bc>)
 80174a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80174a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80174a8:	4b50      	ldr	r3, [pc, #320]	@ (80175ec <HAL_RCC_ClockConfig+0x1bc>)
 80174aa:	689b      	ldr	r3, [r3, #8]
 80174ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80174b0:	687b      	ldr	r3, [r7, #4]
 80174b2:	689b      	ldr	r3, [r3, #8]
 80174b4:	494d      	ldr	r1, [pc, #308]	@ (80175ec <HAL_RCC_ClockConfig+0x1bc>)
 80174b6:	4313      	orrs	r3, r2
 80174b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80174ba:	687b      	ldr	r3, [r7, #4]
 80174bc:	681b      	ldr	r3, [r3, #0]
 80174be:	f003 0301 	and.w	r3, r3, #1
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	d044      	beq.n	8017550 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	685b      	ldr	r3, [r3, #4]
 80174ca:	2b01      	cmp	r3, #1
 80174cc:	d107      	bne.n	80174de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80174ce:	4b47      	ldr	r3, [pc, #284]	@ (80175ec <HAL_RCC_ClockConfig+0x1bc>)
 80174d0:	681b      	ldr	r3, [r3, #0]
 80174d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d119      	bne.n	801750e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80174da:	2301      	movs	r3, #1
 80174dc:	e07f      	b.n	80175de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	685b      	ldr	r3, [r3, #4]
 80174e2:	2b02      	cmp	r3, #2
 80174e4:	d003      	beq.n	80174ee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80174ea:	2b03      	cmp	r3, #3
 80174ec:	d107      	bne.n	80174fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80174ee:	4b3f      	ldr	r3, [pc, #252]	@ (80175ec <HAL_RCC_ClockConfig+0x1bc>)
 80174f0:	681b      	ldr	r3, [r3, #0]
 80174f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	d109      	bne.n	801750e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80174fa:	2301      	movs	r3, #1
 80174fc:	e06f      	b.n	80175de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80174fe:	4b3b      	ldr	r3, [pc, #236]	@ (80175ec <HAL_RCC_ClockConfig+0x1bc>)
 8017500:	681b      	ldr	r3, [r3, #0]
 8017502:	f003 0302 	and.w	r3, r3, #2
 8017506:	2b00      	cmp	r3, #0
 8017508:	d101      	bne.n	801750e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801750a:	2301      	movs	r3, #1
 801750c:	e067      	b.n	80175de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801750e:	4b37      	ldr	r3, [pc, #220]	@ (80175ec <HAL_RCC_ClockConfig+0x1bc>)
 8017510:	689b      	ldr	r3, [r3, #8]
 8017512:	f023 0203 	bic.w	r2, r3, #3
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	685b      	ldr	r3, [r3, #4]
 801751a:	4934      	ldr	r1, [pc, #208]	@ (80175ec <HAL_RCC_ClockConfig+0x1bc>)
 801751c:	4313      	orrs	r3, r2
 801751e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8017520:	f7fe fb4a 	bl	8015bb8 <HAL_GetTick>
 8017524:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8017526:	e00a      	b.n	801753e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8017528:	f7fe fb46 	bl	8015bb8 <HAL_GetTick>
 801752c:	4602      	mov	r2, r0
 801752e:	68fb      	ldr	r3, [r7, #12]
 8017530:	1ad3      	subs	r3, r2, r3
 8017532:	f241 3288 	movw	r2, #5000	@ 0x1388
 8017536:	4293      	cmp	r3, r2
 8017538:	d901      	bls.n	801753e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801753a:	2303      	movs	r3, #3
 801753c:	e04f      	b.n	80175de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801753e:	4b2b      	ldr	r3, [pc, #172]	@ (80175ec <HAL_RCC_ClockConfig+0x1bc>)
 8017540:	689b      	ldr	r3, [r3, #8]
 8017542:	f003 020c 	and.w	r2, r3, #12
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	685b      	ldr	r3, [r3, #4]
 801754a:	009b      	lsls	r3, r3, #2
 801754c:	429a      	cmp	r2, r3
 801754e:	d1eb      	bne.n	8017528 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8017550:	4b25      	ldr	r3, [pc, #148]	@ (80175e8 <HAL_RCC_ClockConfig+0x1b8>)
 8017552:	681b      	ldr	r3, [r3, #0]
 8017554:	f003 0307 	and.w	r3, r3, #7
 8017558:	683a      	ldr	r2, [r7, #0]
 801755a:	429a      	cmp	r2, r3
 801755c:	d20c      	bcs.n	8017578 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801755e:	4b22      	ldr	r3, [pc, #136]	@ (80175e8 <HAL_RCC_ClockConfig+0x1b8>)
 8017560:	683a      	ldr	r2, [r7, #0]
 8017562:	b2d2      	uxtb	r2, r2
 8017564:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017566:	4b20      	ldr	r3, [pc, #128]	@ (80175e8 <HAL_RCC_ClockConfig+0x1b8>)
 8017568:	681b      	ldr	r3, [r3, #0]
 801756a:	f003 0307 	and.w	r3, r3, #7
 801756e:	683a      	ldr	r2, [r7, #0]
 8017570:	429a      	cmp	r2, r3
 8017572:	d001      	beq.n	8017578 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8017574:	2301      	movs	r3, #1
 8017576:	e032      	b.n	80175de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	681b      	ldr	r3, [r3, #0]
 801757c:	f003 0304 	and.w	r3, r3, #4
 8017580:	2b00      	cmp	r3, #0
 8017582:	d008      	beq.n	8017596 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8017584:	4b19      	ldr	r3, [pc, #100]	@ (80175ec <HAL_RCC_ClockConfig+0x1bc>)
 8017586:	689b      	ldr	r3, [r3, #8]
 8017588:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	68db      	ldr	r3, [r3, #12]
 8017590:	4916      	ldr	r1, [pc, #88]	@ (80175ec <HAL_RCC_ClockConfig+0x1bc>)
 8017592:	4313      	orrs	r3, r2
 8017594:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	681b      	ldr	r3, [r3, #0]
 801759a:	f003 0308 	and.w	r3, r3, #8
 801759e:	2b00      	cmp	r3, #0
 80175a0:	d009      	beq.n	80175b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80175a2:	4b12      	ldr	r3, [pc, #72]	@ (80175ec <HAL_RCC_ClockConfig+0x1bc>)
 80175a4:	689b      	ldr	r3, [r3, #8]
 80175a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	691b      	ldr	r3, [r3, #16]
 80175ae:	00db      	lsls	r3, r3, #3
 80175b0:	490e      	ldr	r1, [pc, #56]	@ (80175ec <HAL_RCC_ClockConfig+0x1bc>)
 80175b2:	4313      	orrs	r3, r2
 80175b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80175b6:	f000 f821 	bl	80175fc <HAL_RCC_GetSysClockFreq>
 80175ba:	4602      	mov	r2, r0
 80175bc:	4b0b      	ldr	r3, [pc, #44]	@ (80175ec <HAL_RCC_ClockConfig+0x1bc>)
 80175be:	689b      	ldr	r3, [r3, #8]
 80175c0:	091b      	lsrs	r3, r3, #4
 80175c2:	f003 030f 	and.w	r3, r3, #15
 80175c6:	490a      	ldr	r1, [pc, #40]	@ (80175f0 <HAL_RCC_ClockConfig+0x1c0>)
 80175c8:	5ccb      	ldrb	r3, [r1, r3]
 80175ca:	fa22 f303 	lsr.w	r3, r2, r3
 80175ce:	4a09      	ldr	r2, [pc, #36]	@ (80175f4 <HAL_RCC_ClockConfig+0x1c4>)
 80175d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80175d2:	4b09      	ldr	r3, [pc, #36]	@ (80175f8 <HAL_RCC_ClockConfig+0x1c8>)
 80175d4:	681b      	ldr	r3, [r3, #0]
 80175d6:	4618      	mov	r0, r3
 80175d8:	f7fb f824 	bl	8012624 <HAL_InitTick>

  return HAL_OK;
 80175dc:	2300      	movs	r3, #0
}
 80175de:	4618      	mov	r0, r3
 80175e0:	3710      	adds	r7, #16
 80175e2:	46bd      	mov	sp, r7
 80175e4:	bd80      	pop	{r7, pc}
 80175e6:	bf00      	nop
 80175e8:	40023c00 	.word	0x40023c00
 80175ec:	40023800 	.word	0x40023800
 80175f0:	08043728 	.word	0x08043728
 80175f4:	20000008 	.word	0x20000008
 80175f8:	20000074 	.word	0x20000074

080175fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80175fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8017600:	b094      	sub	sp, #80	@ 0x50
 8017602:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8017604:	2300      	movs	r3, #0
 8017606:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8017608:	2300      	movs	r3, #0
 801760a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 801760c:	2300      	movs	r3, #0
 801760e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8017610:	2300      	movs	r3, #0
 8017612:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8017614:	4b79      	ldr	r3, [pc, #484]	@ (80177fc <HAL_RCC_GetSysClockFreq+0x200>)
 8017616:	689b      	ldr	r3, [r3, #8]
 8017618:	f003 030c 	and.w	r3, r3, #12
 801761c:	2b08      	cmp	r3, #8
 801761e:	d00d      	beq.n	801763c <HAL_RCC_GetSysClockFreq+0x40>
 8017620:	2b08      	cmp	r3, #8
 8017622:	f200 80e1 	bhi.w	80177e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8017626:	2b00      	cmp	r3, #0
 8017628:	d002      	beq.n	8017630 <HAL_RCC_GetSysClockFreq+0x34>
 801762a:	2b04      	cmp	r3, #4
 801762c:	d003      	beq.n	8017636 <HAL_RCC_GetSysClockFreq+0x3a>
 801762e:	e0db      	b.n	80177e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8017630:	4b73      	ldr	r3, [pc, #460]	@ (8017800 <HAL_RCC_GetSysClockFreq+0x204>)
 8017632:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8017634:	e0db      	b.n	80177ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8017636:	4b73      	ldr	r3, [pc, #460]	@ (8017804 <HAL_RCC_GetSysClockFreq+0x208>)
 8017638:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 801763a:	e0d8      	b.n	80177ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801763c:	4b6f      	ldr	r3, [pc, #444]	@ (80177fc <HAL_RCC_GetSysClockFreq+0x200>)
 801763e:	685b      	ldr	r3, [r3, #4]
 8017640:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8017644:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8017646:	4b6d      	ldr	r3, [pc, #436]	@ (80177fc <HAL_RCC_GetSysClockFreq+0x200>)
 8017648:	685b      	ldr	r3, [r3, #4]
 801764a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801764e:	2b00      	cmp	r3, #0
 8017650:	d063      	beq.n	801771a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8017652:	4b6a      	ldr	r3, [pc, #424]	@ (80177fc <HAL_RCC_GetSysClockFreq+0x200>)
 8017654:	685b      	ldr	r3, [r3, #4]
 8017656:	099b      	lsrs	r3, r3, #6
 8017658:	2200      	movs	r2, #0
 801765a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801765c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 801765e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017664:	633b      	str	r3, [r7, #48]	@ 0x30
 8017666:	2300      	movs	r3, #0
 8017668:	637b      	str	r3, [r7, #52]	@ 0x34
 801766a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 801766e:	4622      	mov	r2, r4
 8017670:	462b      	mov	r3, r5
 8017672:	f04f 0000 	mov.w	r0, #0
 8017676:	f04f 0100 	mov.w	r1, #0
 801767a:	0159      	lsls	r1, r3, #5
 801767c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8017680:	0150      	lsls	r0, r2, #5
 8017682:	4602      	mov	r2, r0
 8017684:	460b      	mov	r3, r1
 8017686:	4621      	mov	r1, r4
 8017688:	1a51      	subs	r1, r2, r1
 801768a:	6139      	str	r1, [r7, #16]
 801768c:	4629      	mov	r1, r5
 801768e:	eb63 0301 	sbc.w	r3, r3, r1
 8017692:	617b      	str	r3, [r7, #20]
 8017694:	f04f 0200 	mov.w	r2, #0
 8017698:	f04f 0300 	mov.w	r3, #0
 801769c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80176a0:	4659      	mov	r1, fp
 80176a2:	018b      	lsls	r3, r1, #6
 80176a4:	4651      	mov	r1, sl
 80176a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80176aa:	4651      	mov	r1, sl
 80176ac:	018a      	lsls	r2, r1, #6
 80176ae:	4651      	mov	r1, sl
 80176b0:	ebb2 0801 	subs.w	r8, r2, r1
 80176b4:	4659      	mov	r1, fp
 80176b6:	eb63 0901 	sbc.w	r9, r3, r1
 80176ba:	f04f 0200 	mov.w	r2, #0
 80176be:	f04f 0300 	mov.w	r3, #0
 80176c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80176c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80176ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80176ce:	4690      	mov	r8, r2
 80176d0:	4699      	mov	r9, r3
 80176d2:	4623      	mov	r3, r4
 80176d4:	eb18 0303 	adds.w	r3, r8, r3
 80176d8:	60bb      	str	r3, [r7, #8]
 80176da:	462b      	mov	r3, r5
 80176dc:	eb49 0303 	adc.w	r3, r9, r3
 80176e0:	60fb      	str	r3, [r7, #12]
 80176e2:	f04f 0200 	mov.w	r2, #0
 80176e6:	f04f 0300 	mov.w	r3, #0
 80176ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80176ee:	4629      	mov	r1, r5
 80176f0:	024b      	lsls	r3, r1, #9
 80176f2:	4621      	mov	r1, r4
 80176f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80176f8:	4621      	mov	r1, r4
 80176fa:	024a      	lsls	r2, r1, #9
 80176fc:	4610      	mov	r0, r2
 80176fe:	4619      	mov	r1, r3
 8017700:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017702:	2200      	movs	r2, #0
 8017704:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017706:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8017708:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801770c:	f7f9 fb24 	bl	8010d58 <__aeabi_uldivmod>
 8017710:	4602      	mov	r2, r0
 8017712:	460b      	mov	r3, r1
 8017714:	4613      	mov	r3, r2
 8017716:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8017718:	e058      	b.n	80177cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801771a:	4b38      	ldr	r3, [pc, #224]	@ (80177fc <HAL_RCC_GetSysClockFreq+0x200>)
 801771c:	685b      	ldr	r3, [r3, #4]
 801771e:	099b      	lsrs	r3, r3, #6
 8017720:	2200      	movs	r2, #0
 8017722:	4618      	mov	r0, r3
 8017724:	4611      	mov	r1, r2
 8017726:	f3c0 0308 	ubfx	r3, r0, #0, #9
 801772a:	623b      	str	r3, [r7, #32]
 801772c:	2300      	movs	r3, #0
 801772e:	627b      	str	r3, [r7, #36]	@ 0x24
 8017730:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8017734:	4642      	mov	r2, r8
 8017736:	464b      	mov	r3, r9
 8017738:	f04f 0000 	mov.w	r0, #0
 801773c:	f04f 0100 	mov.w	r1, #0
 8017740:	0159      	lsls	r1, r3, #5
 8017742:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8017746:	0150      	lsls	r0, r2, #5
 8017748:	4602      	mov	r2, r0
 801774a:	460b      	mov	r3, r1
 801774c:	4641      	mov	r1, r8
 801774e:	ebb2 0a01 	subs.w	sl, r2, r1
 8017752:	4649      	mov	r1, r9
 8017754:	eb63 0b01 	sbc.w	fp, r3, r1
 8017758:	f04f 0200 	mov.w	r2, #0
 801775c:	f04f 0300 	mov.w	r3, #0
 8017760:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8017764:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8017768:	ea4f 128a 	mov.w	r2, sl, lsl #6
 801776c:	ebb2 040a 	subs.w	r4, r2, sl
 8017770:	eb63 050b 	sbc.w	r5, r3, fp
 8017774:	f04f 0200 	mov.w	r2, #0
 8017778:	f04f 0300 	mov.w	r3, #0
 801777c:	00eb      	lsls	r3, r5, #3
 801777e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8017782:	00e2      	lsls	r2, r4, #3
 8017784:	4614      	mov	r4, r2
 8017786:	461d      	mov	r5, r3
 8017788:	4643      	mov	r3, r8
 801778a:	18e3      	adds	r3, r4, r3
 801778c:	603b      	str	r3, [r7, #0]
 801778e:	464b      	mov	r3, r9
 8017790:	eb45 0303 	adc.w	r3, r5, r3
 8017794:	607b      	str	r3, [r7, #4]
 8017796:	f04f 0200 	mov.w	r2, #0
 801779a:	f04f 0300 	mov.w	r3, #0
 801779e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80177a2:	4629      	mov	r1, r5
 80177a4:	028b      	lsls	r3, r1, #10
 80177a6:	4621      	mov	r1, r4
 80177a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80177ac:	4621      	mov	r1, r4
 80177ae:	028a      	lsls	r2, r1, #10
 80177b0:	4610      	mov	r0, r2
 80177b2:	4619      	mov	r1, r3
 80177b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80177b6:	2200      	movs	r2, #0
 80177b8:	61bb      	str	r3, [r7, #24]
 80177ba:	61fa      	str	r2, [r7, #28]
 80177bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80177c0:	f7f9 faca 	bl	8010d58 <__aeabi_uldivmod>
 80177c4:	4602      	mov	r2, r0
 80177c6:	460b      	mov	r3, r1
 80177c8:	4613      	mov	r3, r2
 80177ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80177cc:	4b0b      	ldr	r3, [pc, #44]	@ (80177fc <HAL_RCC_GetSysClockFreq+0x200>)
 80177ce:	685b      	ldr	r3, [r3, #4]
 80177d0:	0c1b      	lsrs	r3, r3, #16
 80177d2:	f003 0303 	and.w	r3, r3, #3
 80177d6:	3301      	adds	r3, #1
 80177d8:	005b      	lsls	r3, r3, #1
 80177da:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80177dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80177de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80177e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80177e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80177e6:	e002      	b.n	80177ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80177e8:	4b05      	ldr	r3, [pc, #20]	@ (8017800 <HAL_RCC_GetSysClockFreq+0x204>)
 80177ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80177ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80177ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80177f0:	4618      	mov	r0, r3
 80177f2:	3750      	adds	r7, #80	@ 0x50
 80177f4:	46bd      	mov	sp, r7
 80177f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80177fa:	bf00      	nop
 80177fc:	40023800 	.word	0x40023800
 8017800:	00f42400 	.word	0x00f42400
 8017804:	007a1200 	.word	0x007a1200

08017808 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8017808:	b480      	push	{r7}
 801780a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801780c:	4b03      	ldr	r3, [pc, #12]	@ (801781c <HAL_RCC_GetHCLKFreq+0x14>)
 801780e:	681b      	ldr	r3, [r3, #0]
}
 8017810:	4618      	mov	r0, r3
 8017812:	46bd      	mov	sp, r7
 8017814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017818:	4770      	bx	lr
 801781a:	bf00      	nop
 801781c:	20000008 	.word	0x20000008

08017820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8017820:	b580      	push	{r7, lr}
 8017822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8017824:	f7ff fff0 	bl	8017808 <HAL_RCC_GetHCLKFreq>
 8017828:	4602      	mov	r2, r0
 801782a:	4b05      	ldr	r3, [pc, #20]	@ (8017840 <HAL_RCC_GetPCLK1Freq+0x20>)
 801782c:	689b      	ldr	r3, [r3, #8]
 801782e:	0a9b      	lsrs	r3, r3, #10
 8017830:	f003 0307 	and.w	r3, r3, #7
 8017834:	4903      	ldr	r1, [pc, #12]	@ (8017844 <HAL_RCC_GetPCLK1Freq+0x24>)
 8017836:	5ccb      	ldrb	r3, [r1, r3]
 8017838:	fa22 f303 	lsr.w	r3, r2, r3
}
 801783c:	4618      	mov	r0, r3
 801783e:	bd80      	pop	{r7, pc}
 8017840:	40023800 	.word	0x40023800
 8017844:	08043738 	.word	0x08043738

08017848 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8017848:	b580      	push	{r7, lr}
 801784a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801784c:	f7ff ffdc 	bl	8017808 <HAL_RCC_GetHCLKFreq>
 8017850:	4602      	mov	r2, r0
 8017852:	4b05      	ldr	r3, [pc, #20]	@ (8017868 <HAL_RCC_GetPCLK2Freq+0x20>)
 8017854:	689b      	ldr	r3, [r3, #8]
 8017856:	0b5b      	lsrs	r3, r3, #13
 8017858:	f003 0307 	and.w	r3, r3, #7
 801785c:	4903      	ldr	r1, [pc, #12]	@ (801786c <HAL_RCC_GetPCLK2Freq+0x24>)
 801785e:	5ccb      	ldrb	r3, [r1, r3]
 8017860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8017864:	4618      	mov	r0, r3
 8017866:	bd80      	pop	{r7, pc}
 8017868:	40023800 	.word	0x40023800
 801786c:	08043738 	.word	0x08043738

08017870 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8017870:	b480      	push	{r7}
 8017872:	b083      	sub	sp, #12
 8017874:	af00      	add	r7, sp, #0
 8017876:	6078      	str	r0, [r7, #4]
 8017878:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	220f      	movs	r2, #15
 801787e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8017880:	4b12      	ldr	r3, [pc, #72]	@ (80178cc <HAL_RCC_GetClockConfig+0x5c>)
 8017882:	689b      	ldr	r3, [r3, #8]
 8017884:	f003 0203 	and.w	r2, r3, #3
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 801788c:	4b0f      	ldr	r3, [pc, #60]	@ (80178cc <HAL_RCC_GetClockConfig+0x5c>)
 801788e:	689b      	ldr	r3, [r3, #8]
 8017890:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8017898:	4b0c      	ldr	r3, [pc, #48]	@ (80178cc <HAL_RCC_GetClockConfig+0x5c>)
 801789a:	689b      	ldr	r3, [r3, #8]
 801789c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80178a4:	4b09      	ldr	r3, [pc, #36]	@ (80178cc <HAL_RCC_GetClockConfig+0x5c>)
 80178a6:	689b      	ldr	r3, [r3, #8]
 80178a8:	08db      	lsrs	r3, r3, #3
 80178aa:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80178b2:	4b07      	ldr	r3, [pc, #28]	@ (80178d0 <HAL_RCC_GetClockConfig+0x60>)
 80178b4:	681b      	ldr	r3, [r3, #0]
 80178b6:	f003 0207 	and.w	r2, r3, #7
 80178ba:	683b      	ldr	r3, [r7, #0]
 80178bc:	601a      	str	r2, [r3, #0]
}
 80178be:	bf00      	nop
 80178c0:	370c      	adds	r7, #12
 80178c2:	46bd      	mov	sp, r7
 80178c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178c8:	4770      	bx	lr
 80178ca:	bf00      	nop
 80178cc:	40023800 	.word	0x40023800
 80178d0:	40023c00 	.word	0x40023c00

080178d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80178d4:	b580      	push	{r7, lr}
 80178d6:	b082      	sub	sp, #8
 80178d8:	af00      	add	r7, sp, #0
 80178da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	2b00      	cmp	r3, #0
 80178e0:	d101      	bne.n	80178e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80178e2:	2301      	movs	r3, #1
 80178e4:	e07b      	b.n	80179de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	d108      	bne.n	8017900 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	685b      	ldr	r3, [r3, #4]
 80178f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80178f6:	d009      	beq.n	801790c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	2200      	movs	r2, #0
 80178fc:	61da      	str	r2, [r3, #28]
 80178fe:	e005      	b.n	801790c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	2200      	movs	r2, #0
 8017904:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	2200      	movs	r2, #0
 801790a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	2200      	movs	r2, #0
 8017910:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8017912:	687b      	ldr	r3, [r7, #4]
 8017914:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8017918:	b2db      	uxtb	r3, r3
 801791a:	2b00      	cmp	r3, #0
 801791c:	d106      	bne.n	801792c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	2200      	movs	r2, #0
 8017922:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8017926:	6878      	ldr	r0, [r7, #4]
 8017928:	f7fa fe08 	bl	801253c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	2202      	movs	r2, #2
 8017930:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	681b      	ldr	r3, [r3, #0]
 8017938:	681a      	ldr	r2, [r3, #0]
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	681b      	ldr	r3, [r3, #0]
 801793e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8017942:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	685b      	ldr	r3, [r3, #4]
 8017948:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	689b      	ldr	r3, [r3, #8]
 8017950:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8017954:	431a      	orrs	r2, r3
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	68db      	ldr	r3, [r3, #12]
 801795a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801795e:	431a      	orrs	r2, r3
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	691b      	ldr	r3, [r3, #16]
 8017964:	f003 0302 	and.w	r3, r3, #2
 8017968:	431a      	orrs	r2, r3
 801796a:	687b      	ldr	r3, [r7, #4]
 801796c:	695b      	ldr	r3, [r3, #20]
 801796e:	f003 0301 	and.w	r3, r3, #1
 8017972:	431a      	orrs	r2, r3
 8017974:	687b      	ldr	r3, [r7, #4]
 8017976:	699b      	ldr	r3, [r3, #24]
 8017978:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801797c:	431a      	orrs	r2, r3
 801797e:	687b      	ldr	r3, [r7, #4]
 8017980:	69db      	ldr	r3, [r3, #28]
 8017982:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8017986:	431a      	orrs	r2, r3
 8017988:	687b      	ldr	r3, [r7, #4]
 801798a:	6a1b      	ldr	r3, [r3, #32]
 801798c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8017990:	ea42 0103 	orr.w	r1, r2, r3
 8017994:	687b      	ldr	r3, [r7, #4]
 8017996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017998:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 801799c:	687b      	ldr	r3, [r7, #4]
 801799e:	681b      	ldr	r3, [r3, #0]
 80179a0:	430a      	orrs	r2, r1
 80179a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	699b      	ldr	r3, [r3, #24]
 80179a8:	0c1b      	lsrs	r3, r3, #16
 80179aa:	f003 0104 	and.w	r1, r3, #4
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80179b2:	f003 0210 	and.w	r2, r3, #16
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	681b      	ldr	r3, [r3, #0]
 80179ba:	430a      	orrs	r2, r1
 80179bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	681b      	ldr	r3, [r3, #0]
 80179c2:	69da      	ldr	r2, [r3, #28]
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	681b      	ldr	r3, [r3, #0]
 80179c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80179cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	2200      	movs	r2, #0
 80179d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	2201      	movs	r2, #1
 80179d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80179dc:	2300      	movs	r3, #0
}
 80179de:	4618      	mov	r0, r3
 80179e0:	3708      	adds	r7, #8
 80179e2:	46bd      	mov	sp, r7
 80179e4:	bd80      	pop	{r7, pc}

080179e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80179e6:	b580      	push	{r7, lr}
 80179e8:	b088      	sub	sp, #32
 80179ea:	af00      	add	r7, sp, #0
 80179ec:	60f8      	str	r0, [r7, #12]
 80179ee:	60b9      	str	r1, [r7, #8]
 80179f0:	603b      	str	r3, [r7, #0]
 80179f2:	4613      	mov	r3, r2
 80179f4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80179f6:	f7fe f8df 	bl	8015bb8 <HAL_GetTick>
 80179fa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80179fc:	88fb      	ldrh	r3, [r7, #6]
 80179fe:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8017a00:	68fb      	ldr	r3, [r7, #12]
 8017a02:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8017a06:	b2db      	uxtb	r3, r3
 8017a08:	2b01      	cmp	r3, #1
 8017a0a:	d001      	beq.n	8017a10 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8017a0c:	2302      	movs	r3, #2
 8017a0e:	e12a      	b.n	8017c66 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8017a10:	68bb      	ldr	r3, [r7, #8]
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	d002      	beq.n	8017a1c <HAL_SPI_Transmit+0x36>
 8017a16:	88fb      	ldrh	r3, [r7, #6]
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	d101      	bne.n	8017a20 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8017a1c:	2301      	movs	r3, #1
 8017a1e:	e122      	b.n	8017c66 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8017a20:	68fb      	ldr	r3, [r7, #12]
 8017a22:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8017a26:	2b01      	cmp	r3, #1
 8017a28:	d101      	bne.n	8017a2e <HAL_SPI_Transmit+0x48>
 8017a2a:	2302      	movs	r3, #2
 8017a2c:	e11b      	b.n	8017c66 <HAL_SPI_Transmit+0x280>
 8017a2e:	68fb      	ldr	r3, [r7, #12]
 8017a30:	2201      	movs	r2, #1
 8017a32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8017a36:	68fb      	ldr	r3, [r7, #12]
 8017a38:	2203      	movs	r2, #3
 8017a3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8017a3e:	68fb      	ldr	r3, [r7, #12]
 8017a40:	2200      	movs	r2, #0
 8017a42:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8017a44:	68fb      	ldr	r3, [r7, #12]
 8017a46:	68ba      	ldr	r2, [r7, #8]
 8017a48:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8017a4a:	68fb      	ldr	r3, [r7, #12]
 8017a4c:	88fa      	ldrh	r2, [r7, #6]
 8017a4e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8017a50:	68fb      	ldr	r3, [r7, #12]
 8017a52:	88fa      	ldrh	r2, [r7, #6]
 8017a54:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8017a56:	68fb      	ldr	r3, [r7, #12]
 8017a58:	2200      	movs	r2, #0
 8017a5a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8017a5c:	68fb      	ldr	r3, [r7, #12]
 8017a5e:	2200      	movs	r2, #0
 8017a60:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8017a62:	68fb      	ldr	r3, [r7, #12]
 8017a64:	2200      	movs	r2, #0
 8017a66:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8017a68:	68fb      	ldr	r3, [r7, #12]
 8017a6a:	2200      	movs	r2, #0
 8017a6c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8017a6e:	68fb      	ldr	r3, [r7, #12]
 8017a70:	2200      	movs	r2, #0
 8017a72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8017a74:	68fb      	ldr	r3, [r7, #12]
 8017a76:	689b      	ldr	r3, [r3, #8]
 8017a78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8017a7c:	d10f      	bne.n	8017a9e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8017a7e:	68fb      	ldr	r3, [r7, #12]
 8017a80:	681b      	ldr	r3, [r3, #0]
 8017a82:	681a      	ldr	r2, [r3, #0]
 8017a84:	68fb      	ldr	r3, [r7, #12]
 8017a86:	681b      	ldr	r3, [r3, #0]
 8017a88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8017a8c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8017a8e:	68fb      	ldr	r3, [r7, #12]
 8017a90:	681b      	ldr	r3, [r3, #0]
 8017a92:	681a      	ldr	r2, [r3, #0]
 8017a94:	68fb      	ldr	r3, [r7, #12]
 8017a96:	681b      	ldr	r3, [r3, #0]
 8017a98:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8017a9c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8017a9e:	68fb      	ldr	r3, [r7, #12]
 8017aa0:	681b      	ldr	r3, [r3, #0]
 8017aa2:	681b      	ldr	r3, [r3, #0]
 8017aa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017aa8:	2b40      	cmp	r3, #64	@ 0x40
 8017aaa:	d007      	beq.n	8017abc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8017aac:	68fb      	ldr	r3, [r7, #12]
 8017aae:	681b      	ldr	r3, [r3, #0]
 8017ab0:	681a      	ldr	r2, [r3, #0]
 8017ab2:	68fb      	ldr	r3, [r7, #12]
 8017ab4:	681b      	ldr	r3, [r3, #0]
 8017ab6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8017aba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8017abc:	68fb      	ldr	r3, [r7, #12]
 8017abe:	68db      	ldr	r3, [r3, #12]
 8017ac0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017ac4:	d152      	bne.n	8017b6c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8017ac6:	68fb      	ldr	r3, [r7, #12]
 8017ac8:	685b      	ldr	r3, [r3, #4]
 8017aca:	2b00      	cmp	r3, #0
 8017acc:	d002      	beq.n	8017ad4 <HAL_SPI_Transmit+0xee>
 8017ace:	8b7b      	ldrh	r3, [r7, #26]
 8017ad0:	2b01      	cmp	r3, #1
 8017ad2:	d145      	bne.n	8017b60 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8017ad4:	68fb      	ldr	r3, [r7, #12]
 8017ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017ad8:	881a      	ldrh	r2, [r3, #0]
 8017ada:	68fb      	ldr	r3, [r7, #12]
 8017adc:	681b      	ldr	r3, [r3, #0]
 8017ade:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8017ae0:	68fb      	ldr	r3, [r7, #12]
 8017ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017ae4:	1c9a      	adds	r2, r3, #2
 8017ae6:	68fb      	ldr	r3, [r7, #12]
 8017ae8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8017aea:	68fb      	ldr	r3, [r7, #12]
 8017aec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8017aee:	b29b      	uxth	r3, r3
 8017af0:	3b01      	subs	r3, #1
 8017af2:	b29a      	uxth	r2, r3
 8017af4:	68fb      	ldr	r3, [r7, #12]
 8017af6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8017af8:	e032      	b.n	8017b60 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8017afa:	68fb      	ldr	r3, [r7, #12]
 8017afc:	681b      	ldr	r3, [r3, #0]
 8017afe:	689b      	ldr	r3, [r3, #8]
 8017b00:	f003 0302 	and.w	r3, r3, #2
 8017b04:	2b02      	cmp	r3, #2
 8017b06:	d112      	bne.n	8017b2e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8017b08:	68fb      	ldr	r3, [r7, #12]
 8017b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017b0c:	881a      	ldrh	r2, [r3, #0]
 8017b0e:	68fb      	ldr	r3, [r7, #12]
 8017b10:	681b      	ldr	r3, [r3, #0]
 8017b12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8017b14:	68fb      	ldr	r3, [r7, #12]
 8017b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017b18:	1c9a      	adds	r2, r3, #2
 8017b1a:	68fb      	ldr	r3, [r7, #12]
 8017b1c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8017b1e:	68fb      	ldr	r3, [r7, #12]
 8017b20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8017b22:	b29b      	uxth	r3, r3
 8017b24:	3b01      	subs	r3, #1
 8017b26:	b29a      	uxth	r2, r3
 8017b28:	68fb      	ldr	r3, [r7, #12]
 8017b2a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8017b2c:	e018      	b.n	8017b60 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8017b2e:	f7fe f843 	bl	8015bb8 <HAL_GetTick>
 8017b32:	4602      	mov	r2, r0
 8017b34:	69fb      	ldr	r3, [r7, #28]
 8017b36:	1ad3      	subs	r3, r2, r3
 8017b38:	683a      	ldr	r2, [r7, #0]
 8017b3a:	429a      	cmp	r2, r3
 8017b3c:	d803      	bhi.n	8017b46 <HAL_SPI_Transmit+0x160>
 8017b3e:	683b      	ldr	r3, [r7, #0]
 8017b40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8017b44:	d102      	bne.n	8017b4c <HAL_SPI_Transmit+0x166>
 8017b46:	683b      	ldr	r3, [r7, #0]
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	d109      	bne.n	8017b60 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8017b4c:	68fb      	ldr	r3, [r7, #12]
 8017b4e:	2201      	movs	r2, #1
 8017b50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8017b54:	68fb      	ldr	r3, [r7, #12]
 8017b56:	2200      	movs	r2, #0
 8017b58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8017b5c:	2303      	movs	r3, #3
 8017b5e:	e082      	b.n	8017c66 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8017b60:	68fb      	ldr	r3, [r7, #12]
 8017b62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8017b64:	b29b      	uxth	r3, r3
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	d1c7      	bne.n	8017afa <HAL_SPI_Transmit+0x114>
 8017b6a:	e053      	b.n	8017c14 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8017b6c:	68fb      	ldr	r3, [r7, #12]
 8017b6e:	685b      	ldr	r3, [r3, #4]
 8017b70:	2b00      	cmp	r3, #0
 8017b72:	d002      	beq.n	8017b7a <HAL_SPI_Transmit+0x194>
 8017b74:	8b7b      	ldrh	r3, [r7, #26]
 8017b76:	2b01      	cmp	r3, #1
 8017b78:	d147      	bne.n	8017c0a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8017b7a:	68fb      	ldr	r3, [r7, #12]
 8017b7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8017b7e:	68fb      	ldr	r3, [r7, #12]
 8017b80:	681b      	ldr	r3, [r3, #0]
 8017b82:	330c      	adds	r3, #12
 8017b84:	7812      	ldrb	r2, [r2, #0]
 8017b86:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8017b88:	68fb      	ldr	r3, [r7, #12]
 8017b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017b8c:	1c5a      	adds	r2, r3, #1
 8017b8e:	68fb      	ldr	r3, [r7, #12]
 8017b90:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8017b92:	68fb      	ldr	r3, [r7, #12]
 8017b94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8017b96:	b29b      	uxth	r3, r3
 8017b98:	3b01      	subs	r3, #1
 8017b9a:	b29a      	uxth	r2, r3
 8017b9c:	68fb      	ldr	r3, [r7, #12]
 8017b9e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8017ba0:	e033      	b.n	8017c0a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8017ba2:	68fb      	ldr	r3, [r7, #12]
 8017ba4:	681b      	ldr	r3, [r3, #0]
 8017ba6:	689b      	ldr	r3, [r3, #8]
 8017ba8:	f003 0302 	and.w	r3, r3, #2
 8017bac:	2b02      	cmp	r3, #2
 8017bae:	d113      	bne.n	8017bd8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8017bb0:	68fb      	ldr	r3, [r7, #12]
 8017bb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8017bb4:	68fb      	ldr	r3, [r7, #12]
 8017bb6:	681b      	ldr	r3, [r3, #0]
 8017bb8:	330c      	adds	r3, #12
 8017bba:	7812      	ldrb	r2, [r2, #0]
 8017bbc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8017bbe:	68fb      	ldr	r3, [r7, #12]
 8017bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017bc2:	1c5a      	adds	r2, r3, #1
 8017bc4:	68fb      	ldr	r3, [r7, #12]
 8017bc6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8017bc8:	68fb      	ldr	r3, [r7, #12]
 8017bca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8017bcc:	b29b      	uxth	r3, r3
 8017bce:	3b01      	subs	r3, #1
 8017bd0:	b29a      	uxth	r2, r3
 8017bd2:	68fb      	ldr	r3, [r7, #12]
 8017bd4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8017bd6:	e018      	b.n	8017c0a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8017bd8:	f7fd ffee 	bl	8015bb8 <HAL_GetTick>
 8017bdc:	4602      	mov	r2, r0
 8017bde:	69fb      	ldr	r3, [r7, #28]
 8017be0:	1ad3      	subs	r3, r2, r3
 8017be2:	683a      	ldr	r2, [r7, #0]
 8017be4:	429a      	cmp	r2, r3
 8017be6:	d803      	bhi.n	8017bf0 <HAL_SPI_Transmit+0x20a>
 8017be8:	683b      	ldr	r3, [r7, #0]
 8017bea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8017bee:	d102      	bne.n	8017bf6 <HAL_SPI_Transmit+0x210>
 8017bf0:	683b      	ldr	r3, [r7, #0]
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	d109      	bne.n	8017c0a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8017bf6:	68fb      	ldr	r3, [r7, #12]
 8017bf8:	2201      	movs	r2, #1
 8017bfa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8017bfe:	68fb      	ldr	r3, [r7, #12]
 8017c00:	2200      	movs	r2, #0
 8017c02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8017c06:	2303      	movs	r3, #3
 8017c08:	e02d      	b.n	8017c66 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8017c0a:	68fb      	ldr	r3, [r7, #12]
 8017c0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8017c0e:	b29b      	uxth	r3, r3
 8017c10:	2b00      	cmp	r3, #0
 8017c12:	d1c6      	bne.n	8017ba2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8017c14:	69fa      	ldr	r2, [r7, #28]
 8017c16:	6839      	ldr	r1, [r7, #0]
 8017c18:	68f8      	ldr	r0, [r7, #12]
 8017c1a:	f000 fbd9 	bl	80183d0 <SPI_EndRxTxTransaction>
 8017c1e:	4603      	mov	r3, r0
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	d002      	beq.n	8017c2a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8017c24:	68fb      	ldr	r3, [r7, #12]
 8017c26:	2220      	movs	r2, #32
 8017c28:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8017c2a:	68fb      	ldr	r3, [r7, #12]
 8017c2c:	689b      	ldr	r3, [r3, #8]
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	d10a      	bne.n	8017c48 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8017c32:	2300      	movs	r3, #0
 8017c34:	617b      	str	r3, [r7, #20]
 8017c36:	68fb      	ldr	r3, [r7, #12]
 8017c38:	681b      	ldr	r3, [r3, #0]
 8017c3a:	68db      	ldr	r3, [r3, #12]
 8017c3c:	617b      	str	r3, [r7, #20]
 8017c3e:	68fb      	ldr	r3, [r7, #12]
 8017c40:	681b      	ldr	r3, [r3, #0]
 8017c42:	689b      	ldr	r3, [r3, #8]
 8017c44:	617b      	str	r3, [r7, #20]
 8017c46:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8017c48:	68fb      	ldr	r3, [r7, #12]
 8017c4a:	2201      	movs	r2, #1
 8017c4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8017c50:	68fb      	ldr	r3, [r7, #12]
 8017c52:	2200      	movs	r2, #0
 8017c54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8017c58:	68fb      	ldr	r3, [r7, #12]
 8017c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	d001      	beq.n	8017c64 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8017c60:	2301      	movs	r3, #1
 8017c62:	e000      	b.n	8017c66 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8017c64:	2300      	movs	r3, #0
  }
}
 8017c66:	4618      	mov	r0, r3
 8017c68:	3720      	adds	r7, #32
 8017c6a:	46bd      	mov	sp, r7
 8017c6c:	bd80      	pop	{r7, pc}

08017c6e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017c6e:	b580      	push	{r7, lr}
 8017c70:	b088      	sub	sp, #32
 8017c72:	af02      	add	r7, sp, #8
 8017c74:	60f8      	str	r0, [r7, #12]
 8017c76:	60b9      	str	r1, [r7, #8]
 8017c78:	603b      	str	r3, [r7, #0]
 8017c7a:	4613      	mov	r3, r2
 8017c7c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8017c7e:	68fb      	ldr	r3, [r7, #12]
 8017c80:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8017c84:	b2db      	uxtb	r3, r3
 8017c86:	2b01      	cmp	r3, #1
 8017c88:	d001      	beq.n	8017c8e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8017c8a:	2302      	movs	r3, #2
 8017c8c:	e104      	b.n	8017e98 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8017c8e:	68fb      	ldr	r3, [r7, #12]
 8017c90:	685b      	ldr	r3, [r3, #4]
 8017c92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8017c96:	d112      	bne.n	8017cbe <HAL_SPI_Receive+0x50>
 8017c98:	68fb      	ldr	r3, [r7, #12]
 8017c9a:	689b      	ldr	r3, [r3, #8]
 8017c9c:	2b00      	cmp	r3, #0
 8017c9e:	d10e      	bne.n	8017cbe <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8017ca0:	68fb      	ldr	r3, [r7, #12]
 8017ca2:	2204      	movs	r2, #4
 8017ca4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8017ca8:	88fa      	ldrh	r2, [r7, #6]
 8017caa:	683b      	ldr	r3, [r7, #0]
 8017cac:	9300      	str	r3, [sp, #0]
 8017cae:	4613      	mov	r3, r2
 8017cb0:	68ba      	ldr	r2, [r7, #8]
 8017cb2:	68b9      	ldr	r1, [r7, #8]
 8017cb4:	68f8      	ldr	r0, [r7, #12]
 8017cb6:	f000 f8f3 	bl	8017ea0 <HAL_SPI_TransmitReceive>
 8017cba:	4603      	mov	r3, r0
 8017cbc:	e0ec      	b.n	8017e98 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8017cbe:	f7fd ff7b 	bl	8015bb8 <HAL_GetTick>
 8017cc2:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8017cc4:	68bb      	ldr	r3, [r7, #8]
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d002      	beq.n	8017cd0 <HAL_SPI_Receive+0x62>
 8017cca:	88fb      	ldrh	r3, [r7, #6]
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	d101      	bne.n	8017cd4 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8017cd0:	2301      	movs	r3, #1
 8017cd2:	e0e1      	b.n	8017e98 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8017cd4:	68fb      	ldr	r3, [r7, #12]
 8017cd6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8017cda:	2b01      	cmp	r3, #1
 8017cdc:	d101      	bne.n	8017ce2 <HAL_SPI_Receive+0x74>
 8017cde:	2302      	movs	r3, #2
 8017ce0:	e0da      	b.n	8017e98 <HAL_SPI_Receive+0x22a>
 8017ce2:	68fb      	ldr	r3, [r7, #12]
 8017ce4:	2201      	movs	r2, #1
 8017ce6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8017cea:	68fb      	ldr	r3, [r7, #12]
 8017cec:	2204      	movs	r2, #4
 8017cee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8017cf2:	68fb      	ldr	r3, [r7, #12]
 8017cf4:	2200      	movs	r2, #0
 8017cf6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8017cf8:	68fb      	ldr	r3, [r7, #12]
 8017cfa:	68ba      	ldr	r2, [r7, #8]
 8017cfc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8017cfe:	68fb      	ldr	r3, [r7, #12]
 8017d00:	88fa      	ldrh	r2, [r7, #6]
 8017d02:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8017d04:	68fb      	ldr	r3, [r7, #12]
 8017d06:	88fa      	ldrh	r2, [r7, #6]
 8017d08:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8017d0a:	68fb      	ldr	r3, [r7, #12]
 8017d0c:	2200      	movs	r2, #0
 8017d0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8017d10:	68fb      	ldr	r3, [r7, #12]
 8017d12:	2200      	movs	r2, #0
 8017d14:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8017d16:	68fb      	ldr	r3, [r7, #12]
 8017d18:	2200      	movs	r2, #0
 8017d1a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8017d1c:	68fb      	ldr	r3, [r7, #12]
 8017d1e:	2200      	movs	r2, #0
 8017d20:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8017d22:	68fb      	ldr	r3, [r7, #12]
 8017d24:	2200      	movs	r2, #0
 8017d26:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8017d28:	68fb      	ldr	r3, [r7, #12]
 8017d2a:	689b      	ldr	r3, [r3, #8]
 8017d2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8017d30:	d10f      	bne.n	8017d52 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8017d32:	68fb      	ldr	r3, [r7, #12]
 8017d34:	681b      	ldr	r3, [r3, #0]
 8017d36:	681a      	ldr	r2, [r3, #0]
 8017d38:	68fb      	ldr	r3, [r7, #12]
 8017d3a:	681b      	ldr	r3, [r3, #0]
 8017d3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8017d40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8017d42:	68fb      	ldr	r3, [r7, #12]
 8017d44:	681b      	ldr	r3, [r3, #0]
 8017d46:	681a      	ldr	r2, [r3, #0]
 8017d48:	68fb      	ldr	r3, [r7, #12]
 8017d4a:	681b      	ldr	r3, [r3, #0]
 8017d4c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8017d50:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8017d52:	68fb      	ldr	r3, [r7, #12]
 8017d54:	681b      	ldr	r3, [r3, #0]
 8017d56:	681b      	ldr	r3, [r3, #0]
 8017d58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017d5c:	2b40      	cmp	r3, #64	@ 0x40
 8017d5e:	d007      	beq.n	8017d70 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8017d60:	68fb      	ldr	r3, [r7, #12]
 8017d62:	681b      	ldr	r3, [r3, #0]
 8017d64:	681a      	ldr	r2, [r3, #0]
 8017d66:	68fb      	ldr	r3, [r7, #12]
 8017d68:	681b      	ldr	r3, [r3, #0]
 8017d6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8017d6e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8017d70:	68fb      	ldr	r3, [r7, #12]
 8017d72:	68db      	ldr	r3, [r3, #12]
 8017d74:	2b00      	cmp	r3, #0
 8017d76:	d170      	bne.n	8017e5a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8017d78:	e035      	b.n	8017de6 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8017d7a:	68fb      	ldr	r3, [r7, #12]
 8017d7c:	681b      	ldr	r3, [r3, #0]
 8017d7e:	689b      	ldr	r3, [r3, #8]
 8017d80:	f003 0301 	and.w	r3, r3, #1
 8017d84:	2b01      	cmp	r3, #1
 8017d86:	d115      	bne.n	8017db4 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8017d88:	68fb      	ldr	r3, [r7, #12]
 8017d8a:	681b      	ldr	r3, [r3, #0]
 8017d8c:	f103 020c 	add.w	r2, r3, #12
 8017d90:	68fb      	ldr	r3, [r7, #12]
 8017d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017d94:	7812      	ldrb	r2, [r2, #0]
 8017d96:	b2d2      	uxtb	r2, r2
 8017d98:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8017d9a:	68fb      	ldr	r3, [r7, #12]
 8017d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017d9e:	1c5a      	adds	r2, r3, #1
 8017da0:	68fb      	ldr	r3, [r7, #12]
 8017da2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8017da4:	68fb      	ldr	r3, [r7, #12]
 8017da6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8017da8:	b29b      	uxth	r3, r3
 8017daa:	3b01      	subs	r3, #1
 8017dac:	b29a      	uxth	r2, r3
 8017dae:	68fb      	ldr	r3, [r7, #12]
 8017db0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8017db2:	e018      	b.n	8017de6 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8017db4:	f7fd ff00 	bl	8015bb8 <HAL_GetTick>
 8017db8:	4602      	mov	r2, r0
 8017dba:	697b      	ldr	r3, [r7, #20]
 8017dbc:	1ad3      	subs	r3, r2, r3
 8017dbe:	683a      	ldr	r2, [r7, #0]
 8017dc0:	429a      	cmp	r2, r3
 8017dc2:	d803      	bhi.n	8017dcc <HAL_SPI_Receive+0x15e>
 8017dc4:	683b      	ldr	r3, [r7, #0]
 8017dc6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8017dca:	d102      	bne.n	8017dd2 <HAL_SPI_Receive+0x164>
 8017dcc:	683b      	ldr	r3, [r7, #0]
 8017dce:	2b00      	cmp	r3, #0
 8017dd0:	d109      	bne.n	8017de6 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8017dd2:	68fb      	ldr	r3, [r7, #12]
 8017dd4:	2201      	movs	r2, #1
 8017dd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8017dda:	68fb      	ldr	r3, [r7, #12]
 8017ddc:	2200      	movs	r2, #0
 8017dde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8017de2:	2303      	movs	r3, #3
 8017de4:	e058      	b.n	8017e98 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8017de6:	68fb      	ldr	r3, [r7, #12]
 8017de8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8017dea:	b29b      	uxth	r3, r3
 8017dec:	2b00      	cmp	r3, #0
 8017dee:	d1c4      	bne.n	8017d7a <HAL_SPI_Receive+0x10c>
 8017df0:	e038      	b.n	8017e64 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8017df2:	68fb      	ldr	r3, [r7, #12]
 8017df4:	681b      	ldr	r3, [r3, #0]
 8017df6:	689b      	ldr	r3, [r3, #8]
 8017df8:	f003 0301 	and.w	r3, r3, #1
 8017dfc:	2b01      	cmp	r3, #1
 8017dfe:	d113      	bne.n	8017e28 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8017e00:	68fb      	ldr	r3, [r7, #12]
 8017e02:	681b      	ldr	r3, [r3, #0]
 8017e04:	68da      	ldr	r2, [r3, #12]
 8017e06:	68fb      	ldr	r3, [r7, #12]
 8017e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017e0a:	b292      	uxth	r2, r2
 8017e0c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8017e0e:	68fb      	ldr	r3, [r7, #12]
 8017e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017e12:	1c9a      	adds	r2, r3, #2
 8017e14:	68fb      	ldr	r3, [r7, #12]
 8017e16:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8017e18:	68fb      	ldr	r3, [r7, #12]
 8017e1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8017e1c:	b29b      	uxth	r3, r3
 8017e1e:	3b01      	subs	r3, #1
 8017e20:	b29a      	uxth	r2, r3
 8017e22:	68fb      	ldr	r3, [r7, #12]
 8017e24:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8017e26:	e018      	b.n	8017e5a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8017e28:	f7fd fec6 	bl	8015bb8 <HAL_GetTick>
 8017e2c:	4602      	mov	r2, r0
 8017e2e:	697b      	ldr	r3, [r7, #20]
 8017e30:	1ad3      	subs	r3, r2, r3
 8017e32:	683a      	ldr	r2, [r7, #0]
 8017e34:	429a      	cmp	r2, r3
 8017e36:	d803      	bhi.n	8017e40 <HAL_SPI_Receive+0x1d2>
 8017e38:	683b      	ldr	r3, [r7, #0]
 8017e3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8017e3e:	d102      	bne.n	8017e46 <HAL_SPI_Receive+0x1d8>
 8017e40:	683b      	ldr	r3, [r7, #0]
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	d109      	bne.n	8017e5a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8017e46:	68fb      	ldr	r3, [r7, #12]
 8017e48:	2201      	movs	r2, #1
 8017e4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8017e4e:	68fb      	ldr	r3, [r7, #12]
 8017e50:	2200      	movs	r2, #0
 8017e52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8017e56:	2303      	movs	r3, #3
 8017e58:	e01e      	b.n	8017e98 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8017e5a:	68fb      	ldr	r3, [r7, #12]
 8017e5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8017e5e:	b29b      	uxth	r3, r3
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	d1c6      	bne.n	8017df2 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8017e64:	697a      	ldr	r2, [r7, #20]
 8017e66:	6839      	ldr	r1, [r7, #0]
 8017e68:	68f8      	ldr	r0, [r7, #12]
 8017e6a:	f000 fa4b 	bl	8018304 <SPI_EndRxTransaction>
 8017e6e:	4603      	mov	r3, r0
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	d002      	beq.n	8017e7a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8017e74:	68fb      	ldr	r3, [r7, #12]
 8017e76:	2220      	movs	r2, #32
 8017e78:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8017e7a:	68fb      	ldr	r3, [r7, #12]
 8017e7c:	2201      	movs	r2, #1
 8017e7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8017e82:	68fb      	ldr	r3, [r7, #12]
 8017e84:	2200      	movs	r2, #0
 8017e86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8017e8a:	68fb      	ldr	r3, [r7, #12]
 8017e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017e8e:	2b00      	cmp	r3, #0
 8017e90:	d001      	beq.n	8017e96 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8017e92:	2301      	movs	r3, #1
 8017e94:	e000      	b.n	8017e98 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8017e96:	2300      	movs	r3, #0
  }
}
 8017e98:	4618      	mov	r0, r3
 8017e9a:	3718      	adds	r7, #24
 8017e9c:	46bd      	mov	sp, r7
 8017e9e:	bd80      	pop	{r7, pc}

08017ea0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8017ea0:	b580      	push	{r7, lr}
 8017ea2:	b08a      	sub	sp, #40	@ 0x28
 8017ea4:	af00      	add	r7, sp, #0
 8017ea6:	60f8      	str	r0, [r7, #12]
 8017ea8:	60b9      	str	r1, [r7, #8]
 8017eaa:	607a      	str	r2, [r7, #4]
 8017eac:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8017eae:	2301      	movs	r3, #1
 8017eb0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8017eb2:	f7fd fe81 	bl	8015bb8 <HAL_GetTick>
 8017eb6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8017eb8:	68fb      	ldr	r3, [r7, #12]
 8017eba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8017ebe:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8017ec0:	68fb      	ldr	r3, [r7, #12]
 8017ec2:	685b      	ldr	r3, [r3, #4]
 8017ec4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8017ec6:	887b      	ldrh	r3, [r7, #2]
 8017ec8:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8017eca:	7ffb      	ldrb	r3, [r7, #31]
 8017ecc:	2b01      	cmp	r3, #1
 8017ece:	d00c      	beq.n	8017eea <HAL_SPI_TransmitReceive+0x4a>
 8017ed0:	69bb      	ldr	r3, [r7, #24]
 8017ed2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8017ed6:	d106      	bne.n	8017ee6 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8017ed8:	68fb      	ldr	r3, [r7, #12]
 8017eda:	689b      	ldr	r3, [r3, #8]
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	d102      	bne.n	8017ee6 <HAL_SPI_TransmitReceive+0x46>
 8017ee0:	7ffb      	ldrb	r3, [r7, #31]
 8017ee2:	2b04      	cmp	r3, #4
 8017ee4:	d001      	beq.n	8017eea <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8017ee6:	2302      	movs	r3, #2
 8017ee8:	e17f      	b.n	80181ea <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8017eea:	68bb      	ldr	r3, [r7, #8]
 8017eec:	2b00      	cmp	r3, #0
 8017eee:	d005      	beq.n	8017efc <HAL_SPI_TransmitReceive+0x5c>
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	2b00      	cmp	r3, #0
 8017ef4:	d002      	beq.n	8017efc <HAL_SPI_TransmitReceive+0x5c>
 8017ef6:	887b      	ldrh	r3, [r7, #2]
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	d101      	bne.n	8017f00 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8017efc:	2301      	movs	r3, #1
 8017efe:	e174      	b.n	80181ea <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8017f00:	68fb      	ldr	r3, [r7, #12]
 8017f02:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8017f06:	2b01      	cmp	r3, #1
 8017f08:	d101      	bne.n	8017f0e <HAL_SPI_TransmitReceive+0x6e>
 8017f0a:	2302      	movs	r3, #2
 8017f0c:	e16d      	b.n	80181ea <HAL_SPI_TransmitReceive+0x34a>
 8017f0e:	68fb      	ldr	r3, [r7, #12]
 8017f10:	2201      	movs	r2, #1
 8017f12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8017f16:	68fb      	ldr	r3, [r7, #12]
 8017f18:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8017f1c:	b2db      	uxtb	r3, r3
 8017f1e:	2b04      	cmp	r3, #4
 8017f20:	d003      	beq.n	8017f2a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8017f22:	68fb      	ldr	r3, [r7, #12]
 8017f24:	2205      	movs	r2, #5
 8017f26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8017f2a:	68fb      	ldr	r3, [r7, #12]
 8017f2c:	2200      	movs	r2, #0
 8017f2e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8017f30:	68fb      	ldr	r3, [r7, #12]
 8017f32:	687a      	ldr	r2, [r7, #4]
 8017f34:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8017f36:	68fb      	ldr	r3, [r7, #12]
 8017f38:	887a      	ldrh	r2, [r7, #2]
 8017f3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8017f3c:	68fb      	ldr	r3, [r7, #12]
 8017f3e:	887a      	ldrh	r2, [r7, #2]
 8017f40:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8017f42:	68fb      	ldr	r3, [r7, #12]
 8017f44:	68ba      	ldr	r2, [r7, #8]
 8017f46:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8017f48:	68fb      	ldr	r3, [r7, #12]
 8017f4a:	887a      	ldrh	r2, [r7, #2]
 8017f4c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8017f4e:	68fb      	ldr	r3, [r7, #12]
 8017f50:	887a      	ldrh	r2, [r7, #2]
 8017f52:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8017f54:	68fb      	ldr	r3, [r7, #12]
 8017f56:	2200      	movs	r2, #0
 8017f58:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8017f5a:	68fb      	ldr	r3, [r7, #12]
 8017f5c:	2200      	movs	r2, #0
 8017f5e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8017f60:	68fb      	ldr	r3, [r7, #12]
 8017f62:	681b      	ldr	r3, [r3, #0]
 8017f64:	681b      	ldr	r3, [r3, #0]
 8017f66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017f6a:	2b40      	cmp	r3, #64	@ 0x40
 8017f6c:	d007      	beq.n	8017f7e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8017f6e:	68fb      	ldr	r3, [r7, #12]
 8017f70:	681b      	ldr	r3, [r3, #0]
 8017f72:	681a      	ldr	r2, [r3, #0]
 8017f74:	68fb      	ldr	r3, [r7, #12]
 8017f76:	681b      	ldr	r3, [r3, #0]
 8017f78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8017f7c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8017f7e:	68fb      	ldr	r3, [r7, #12]
 8017f80:	68db      	ldr	r3, [r3, #12]
 8017f82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017f86:	d17e      	bne.n	8018086 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8017f88:	68fb      	ldr	r3, [r7, #12]
 8017f8a:	685b      	ldr	r3, [r3, #4]
 8017f8c:	2b00      	cmp	r3, #0
 8017f8e:	d002      	beq.n	8017f96 <HAL_SPI_TransmitReceive+0xf6>
 8017f90:	8afb      	ldrh	r3, [r7, #22]
 8017f92:	2b01      	cmp	r3, #1
 8017f94:	d16c      	bne.n	8018070 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8017f96:	68fb      	ldr	r3, [r7, #12]
 8017f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017f9a:	881a      	ldrh	r2, [r3, #0]
 8017f9c:	68fb      	ldr	r3, [r7, #12]
 8017f9e:	681b      	ldr	r3, [r3, #0]
 8017fa0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8017fa2:	68fb      	ldr	r3, [r7, #12]
 8017fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017fa6:	1c9a      	adds	r2, r3, #2
 8017fa8:	68fb      	ldr	r3, [r7, #12]
 8017faa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8017fac:	68fb      	ldr	r3, [r7, #12]
 8017fae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8017fb0:	b29b      	uxth	r3, r3
 8017fb2:	3b01      	subs	r3, #1
 8017fb4:	b29a      	uxth	r2, r3
 8017fb6:	68fb      	ldr	r3, [r7, #12]
 8017fb8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8017fba:	e059      	b.n	8018070 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8017fbc:	68fb      	ldr	r3, [r7, #12]
 8017fbe:	681b      	ldr	r3, [r3, #0]
 8017fc0:	689b      	ldr	r3, [r3, #8]
 8017fc2:	f003 0302 	and.w	r3, r3, #2
 8017fc6:	2b02      	cmp	r3, #2
 8017fc8:	d11b      	bne.n	8018002 <HAL_SPI_TransmitReceive+0x162>
 8017fca:	68fb      	ldr	r3, [r7, #12]
 8017fcc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8017fce:	b29b      	uxth	r3, r3
 8017fd0:	2b00      	cmp	r3, #0
 8017fd2:	d016      	beq.n	8018002 <HAL_SPI_TransmitReceive+0x162>
 8017fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fd6:	2b01      	cmp	r3, #1
 8017fd8:	d113      	bne.n	8018002 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8017fda:	68fb      	ldr	r3, [r7, #12]
 8017fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017fde:	881a      	ldrh	r2, [r3, #0]
 8017fe0:	68fb      	ldr	r3, [r7, #12]
 8017fe2:	681b      	ldr	r3, [r3, #0]
 8017fe4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8017fe6:	68fb      	ldr	r3, [r7, #12]
 8017fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017fea:	1c9a      	adds	r2, r3, #2
 8017fec:	68fb      	ldr	r3, [r7, #12]
 8017fee:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8017ff0:	68fb      	ldr	r3, [r7, #12]
 8017ff2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8017ff4:	b29b      	uxth	r3, r3
 8017ff6:	3b01      	subs	r3, #1
 8017ff8:	b29a      	uxth	r2, r3
 8017ffa:	68fb      	ldr	r3, [r7, #12]
 8017ffc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8017ffe:	2300      	movs	r3, #0
 8018000:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8018002:	68fb      	ldr	r3, [r7, #12]
 8018004:	681b      	ldr	r3, [r3, #0]
 8018006:	689b      	ldr	r3, [r3, #8]
 8018008:	f003 0301 	and.w	r3, r3, #1
 801800c:	2b01      	cmp	r3, #1
 801800e:	d119      	bne.n	8018044 <HAL_SPI_TransmitReceive+0x1a4>
 8018010:	68fb      	ldr	r3, [r7, #12]
 8018012:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8018014:	b29b      	uxth	r3, r3
 8018016:	2b00      	cmp	r3, #0
 8018018:	d014      	beq.n	8018044 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801801a:	68fb      	ldr	r3, [r7, #12]
 801801c:	681b      	ldr	r3, [r3, #0]
 801801e:	68da      	ldr	r2, [r3, #12]
 8018020:	68fb      	ldr	r3, [r7, #12]
 8018022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018024:	b292      	uxth	r2, r2
 8018026:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8018028:	68fb      	ldr	r3, [r7, #12]
 801802a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801802c:	1c9a      	adds	r2, r3, #2
 801802e:	68fb      	ldr	r3, [r7, #12]
 8018030:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8018032:	68fb      	ldr	r3, [r7, #12]
 8018034:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8018036:	b29b      	uxth	r3, r3
 8018038:	3b01      	subs	r3, #1
 801803a:	b29a      	uxth	r2, r3
 801803c:	68fb      	ldr	r3, [r7, #12]
 801803e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8018040:	2301      	movs	r3, #1
 8018042:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8018044:	f7fd fdb8 	bl	8015bb8 <HAL_GetTick>
 8018048:	4602      	mov	r2, r0
 801804a:	6a3b      	ldr	r3, [r7, #32]
 801804c:	1ad3      	subs	r3, r2, r3
 801804e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018050:	429a      	cmp	r2, r3
 8018052:	d80d      	bhi.n	8018070 <HAL_SPI_TransmitReceive+0x1d0>
 8018054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018056:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801805a:	d009      	beq.n	8018070 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 801805c:	68fb      	ldr	r3, [r7, #12]
 801805e:	2201      	movs	r2, #1
 8018060:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8018064:	68fb      	ldr	r3, [r7, #12]
 8018066:	2200      	movs	r2, #0
 8018068:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 801806c:	2303      	movs	r3, #3
 801806e:	e0bc      	b.n	80181ea <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8018070:	68fb      	ldr	r3, [r7, #12]
 8018072:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8018074:	b29b      	uxth	r3, r3
 8018076:	2b00      	cmp	r3, #0
 8018078:	d1a0      	bne.n	8017fbc <HAL_SPI_TransmitReceive+0x11c>
 801807a:	68fb      	ldr	r3, [r7, #12]
 801807c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801807e:	b29b      	uxth	r3, r3
 8018080:	2b00      	cmp	r3, #0
 8018082:	d19b      	bne.n	8017fbc <HAL_SPI_TransmitReceive+0x11c>
 8018084:	e082      	b.n	801818c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8018086:	68fb      	ldr	r3, [r7, #12]
 8018088:	685b      	ldr	r3, [r3, #4]
 801808a:	2b00      	cmp	r3, #0
 801808c:	d002      	beq.n	8018094 <HAL_SPI_TransmitReceive+0x1f4>
 801808e:	8afb      	ldrh	r3, [r7, #22]
 8018090:	2b01      	cmp	r3, #1
 8018092:	d171      	bne.n	8018178 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8018094:	68fb      	ldr	r3, [r7, #12]
 8018096:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8018098:	68fb      	ldr	r3, [r7, #12]
 801809a:	681b      	ldr	r3, [r3, #0]
 801809c:	330c      	adds	r3, #12
 801809e:	7812      	ldrb	r2, [r2, #0]
 80180a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80180a2:	68fb      	ldr	r3, [r7, #12]
 80180a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80180a6:	1c5a      	adds	r2, r3, #1
 80180a8:	68fb      	ldr	r3, [r7, #12]
 80180aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80180ac:	68fb      	ldr	r3, [r7, #12]
 80180ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80180b0:	b29b      	uxth	r3, r3
 80180b2:	3b01      	subs	r3, #1
 80180b4:	b29a      	uxth	r2, r3
 80180b6:	68fb      	ldr	r3, [r7, #12]
 80180b8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80180ba:	e05d      	b.n	8018178 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80180bc:	68fb      	ldr	r3, [r7, #12]
 80180be:	681b      	ldr	r3, [r3, #0]
 80180c0:	689b      	ldr	r3, [r3, #8]
 80180c2:	f003 0302 	and.w	r3, r3, #2
 80180c6:	2b02      	cmp	r3, #2
 80180c8:	d11c      	bne.n	8018104 <HAL_SPI_TransmitReceive+0x264>
 80180ca:	68fb      	ldr	r3, [r7, #12]
 80180cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80180ce:	b29b      	uxth	r3, r3
 80180d0:	2b00      	cmp	r3, #0
 80180d2:	d017      	beq.n	8018104 <HAL_SPI_TransmitReceive+0x264>
 80180d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80180d6:	2b01      	cmp	r3, #1
 80180d8:	d114      	bne.n	8018104 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80180da:	68fb      	ldr	r3, [r7, #12]
 80180dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80180de:	68fb      	ldr	r3, [r7, #12]
 80180e0:	681b      	ldr	r3, [r3, #0]
 80180e2:	330c      	adds	r3, #12
 80180e4:	7812      	ldrb	r2, [r2, #0]
 80180e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80180e8:	68fb      	ldr	r3, [r7, #12]
 80180ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80180ec:	1c5a      	adds	r2, r3, #1
 80180ee:	68fb      	ldr	r3, [r7, #12]
 80180f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80180f2:	68fb      	ldr	r3, [r7, #12]
 80180f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80180f6:	b29b      	uxth	r3, r3
 80180f8:	3b01      	subs	r3, #1
 80180fa:	b29a      	uxth	r2, r3
 80180fc:	68fb      	ldr	r3, [r7, #12]
 80180fe:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8018100:	2300      	movs	r3, #0
 8018102:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8018104:	68fb      	ldr	r3, [r7, #12]
 8018106:	681b      	ldr	r3, [r3, #0]
 8018108:	689b      	ldr	r3, [r3, #8]
 801810a:	f003 0301 	and.w	r3, r3, #1
 801810e:	2b01      	cmp	r3, #1
 8018110:	d119      	bne.n	8018146 <HAL_SPI_TransmitReceive+0x2a6>
 8018112:	68fb      	ldr	r3, [r7, #12]
 8018114:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8018116:	b29b      	uxth	r3, r3
 8018118:	2b00      	cmp	r3, #0
 801811a:	d014      	beq.n	8018146 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 801811c:	68fb      	ldr	r3, [r7, #12]
 801811e:	681b      	ldr	r3, [r3, #0]
 8018120:	68da      	ldr	r2, [r3, #12]
 8018122:	68fb      	ldr	r3, [r7, #12]
 8018124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018126:	b2d2      	uxtb	r2, r2
 8018128:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 801812a:	68fb      	ldr	r3, [r7, #12]
 801812c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801812e:	1c5a      	adds	r2, r3, #1
 8018130:	68fb      	ldr	r3, [r7, #12]
 8018132:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8018134:	68fb      	ldr	r3, [r7, #12]
 8018136:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8018138:	b29b      	uxth	r3, r3
 801813a:	3b01      	subs	r3, #1
 801813c:	b29a      	uxth	r2, r3
 801813e:	68fb      	ldr	r3, [r7, #12]
 8018140:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8018142:	2301      	movs	r3, #1
 8018144:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8018146:	f7fd fd37 	bl	8015bb8 <HAL_GetTick>
 801814a:	4602      	mov	r2, r0
 801814c:	6a3b      	ldr	r3, [r7, #32]
 801814e:	1ad3      	subs	r3, r2, r3
 8018150:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018152:	429a      	cmp	r2, r3
 8018154:	d803      	bhi.n	801815e <HAL_SPI_TransmitReceive+0x2be>
 8018156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018158:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801815c:	d102      	bne.n	8018164 <HAL_SPI_TransmitReceive+0x2c4>
 801815e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018160:	2b00      	cmp	r3, #0
 8018162:	d109      	bne.n	8018178 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8018164:	68fb      	ldr	r3, [r7, #12]
 8018166:	2201      	movs	r2, #1
 8018168:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 801816c:	68fb      	ldr	r3, [r7, #12]
 801816e:	2200      	movs	r2, #0
 8018170:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8018174:	2303      	movs	r3, #3
 8018176:	e038      	b.n	80181ea <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8018178:	68fb      	ldr	r3, [r7, #12]
 801817a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801817c:	b29b      	uxth	r3, r3
 801817e:	2b00      	cmp	r3, #0
 8018180:	d19c      	bne.n	80180bc <HAL_SPI_TransmitReceive+0x21c>
 8018182:	68fb      	ldr	r3, [r7, #12]
 8018184:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8018186:	b29b      	uxth	r3, r3
 8018188:	2b00      	cmp	r3, #0
 801818a:	d197      	bne.n	80180bc <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801818c:	6a3a      	ldr	r2, [r7, #32]
 801818e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8018190:	68f8      	ldr	r0, [r7, #12]
 8018192:	f000 f91d 	bl	80183d0 <SPI_EndRxTxTransaction>
 8018196:	4603      	mov	r3, r0
 8018198:	2b00      	cmp	r3, #0
 801819a:	d008      	beq.n	80181ae <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801819c:	68fb      	ldr	r3, [r7, #12]
 801819e:	2220      	movs	r2, #32
 80181a0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80181a2:	68fb      	ldr	r3, [r7, #12]
 80181a4:	2200      	movs	r2, #0
 80181a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80181aa:	2301      	movs	r3, #1
 80181ac:	e01d      	b.n	80181ea <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80181ae:	68fb      	ldr	r3, [r7, #12]
 80181b0:	689b      	ldr	r3, [r3, #8]
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	d10a      	bne.n	80181cc <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80181b6:	2300      	movs	r3, #0
 80181b8:	613b      	str	r3, [r7, #16]
 80181ba:	68fb      	ldr	r3, [r7, #12]
 80181bc:	681b      	ldr	r3, [r3, #0]
 80181be:	68db      	ldr	r3, [r3, #12]
 80181c0:	613b      	str	r3, [r7, #16]
 80181c2:	68fb      	ldr	r3, [r7, #12]
 80181c4:	681b      	ldr	r3, [r3, #0]
 80181c6:	689b      	ldr	r3, [r3, #8]
 80181c8:	613b      	str	r3, [r7, #16]
 80181ca:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80181cc:	68fb      	ldr	r3, [r7, #12]
 80181ce:	2201      	movs	r2, #1
 80181d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80181d4:	68fb      	ldr	r3, [r7, #12]
 80181d6:	2200      	movs	r2, #0
 80181d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80181dc:	68fb      	ldr	r3, [r7, #12]
 80181de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80181e0:	2b00      	cmp	r3, #0
 80181e2:	d001      	beq.n	80181e8 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80181e4:	2301      	movs	r3, #1
 80181e6:	e000      	b.n	80181ea <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80181e8:	2300      	movs	r3, #0
  }
}
 80181ea:	4618      	mov	r0, r3
 80181ec:	3728      	adds	r7, #40	@ 0x28
 80181ee:	46bd      	mov	sp, r7
 80181f0:	bd80      	pop	{r7, pc}
	...

080181f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80181f4:	b580      	push	{r7, lr}
 80181f6:	b088      	sub	sp, #32
 80181f8:	af00      	add	r7, sp, #0
 80181fa:	60f8      	str	r0, [r7, #12]
 80181fc:	60b9      	str	r1, [r7, #8]
 80181fe:	603b      	str	r3, [r7, #0]
 8018200:	4613      	mov	r3, r2
 8018202:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8018204:	f7fd fcd8 	bl	8015bb8 <HAL_GetTick>
 8018208:	4602      	mov	r2, r0
 801820a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801820c:	1a9b      	subs	r3, r3, r2
 801820e:	683a      	ldr	r2, [r7, #0]
 8018210:	4413      	add	r3, r2
 8018212:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8018214:	f7fd fcd0 	bl	8015bb8 <HAL_GetTick>
 8018218:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801821a:	4b39      	ldr	r3, [pc, #228]	@ (8018300 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801821c:	681b      	ldr	r3, [r3, #0]
 801821e:	015b      	lsls	r3, r3, #5
 8018220:	0d1b      	lsrs	r3, r3, #20
 8018222:	69fa      	ldr	r2, [r7, #28]
 8018224:	fb02 f303 	mul.w	r3, r2, r3
 8018228:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801822a:	e054      	b.n	80182d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801822c:	683b      	ldr	r3, [r7, #0]
 801822e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8018232:	d050      	beq.n	80182d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8018234:	f7fd fcc0 	bl	8015bb8 <HAL_GetTick>
 8018238:	4602      	mov	r2, r0
 801823a:	69bb      	ldr	r3, [r7, #24]
 801823c:	1ad3      	subs	r3, r2, r3
 801823e:	69fa      	ldr	r2, [r7, #28]
 8018240:	429a      	cmp	r2, r3
 8018242:	d902      	bls.n	801824a <SPI_WaitFlagStateUntilTimeout+0x56>
 8018244:	69fb      	ldr	r3, [r7, #28]
 8018246:	2b00      	cmp	r3, #0
 8018248:	d13d      	bne.n	80182c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801824a:	68fb      	ldr	r3, [r7, #12]
 801824c:	681b      	ldr	r3, [r3, #0]
 801824e:	685a      	ldr	r2, [r3, #4]
 8018250:	68fb      	ldr	r3, [r7, #12]
 8018252:	681b      	ldr	r3, [r3, #0]
 8018254:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8018258:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801825a:	68fb      	ldr	r3, [r7, #12]
 801825c:	685b      	ldr	r3, [r3, #4]
 801825e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8018262:	d111      	bne.n	8018288 <SPI_WaitFlagStateUntilTimeout+0x94>
 8018264:	68fb      	ldr	r3, [r7, #12]
 8018266:	689b      	ldr	r3, [r3, #8]
 8018268:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801826c:	d004      	beq.n	8018278 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801826e:	68fb      	ldr	r3, [r7, #12]
 8018270:	689b      	ldr	r3, [r3, #8]
 8018272:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8018276:	d107      	bne.n	8018288 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8018278:	68fb      	ldr	r3, [r7, #12]
 801827a:	681b      	ldr	r3, [r3, #0]
 801827c:	681a      	ldr	r2, [r3, #0]
 801827e:	68fb      	ldr	r3, [r7, #12]
 8018280:	681b      	ldr	r3, [r3, #0]
 8018282:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8018286:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8018288:	68fb      	ldr	r3, [r7, #12]
 801828a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801828c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8018290:	d10f      	bne.n	80182b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8018292:	68fb      	ldr	r3, [r7, #12]
 8018294:	681b      	ldr	r3, [r3, #0]
 8018296:	681a      	ldr	r2, [r3, #0]
 8018298:	68fb      	ldr	r3, [r7, #12]
 801829a:	681b      	ldr	r3, [r3, #0]
 801829c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80182a0:	601a      	str	r2, [r3, #0]
 80182a2:	68fb      	ldr	r3, [r7, #12]
 80182a4:	681b      	ldr	r3, [r3, #0]
 80182a6:	681a      	ldr	r2, [r3, #0]
 80182a8:	68fb      	ldr	r3, [r7, #12]
 80182aa:	681b      	ldr	r3, [r3, #0]
 80182ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80182b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80182b2:	68fb      	ldr	r3, [r7, #12]
 80182b4:	2201      	movs	r2, #1
 80182b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80182ba:	68fb      	ldr	r3, [r7, #12]
 80182bc:	2200      	movs	r2, #0
 80182be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80182c2:	2303      	movs	r3, #3
 80182c4:	e017      	b.n	80182f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80182c6:	697b      	ldr	r3, [r7, #20]
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	d101      	bne.n	80182d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80182cc:	2300      	movs	r3, #0
 80182ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80182d0:	697b      	ldr	r3, [r7, #20]
 80182d2:	3b01      	subs	r3, #1
 80182d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80182d6:	68fb      	ldr	r3, [r7, #12]
 80182d8:	681b      	ldr	r3, [r3, #0]
 80182da:	689a      	ldr	r2, [r3, #8]
 80182dc:	68bb      	ldr	r3, [r7, #8]
 80182de:	4013      	ands	r3, r2
 80182e0:	68ba      	ldr	r2, [r7, #8]
 80182e2:	429a      	cmp	r2, r3
 80182e4:	bf0c      	ite	eq
 80182e6:	2301      	moveq	r3, #1
 80182e8:	2300      	movne	r3, #0
 80182ea:	b2db      	uxtb	r3, r3
 80182ec:	461a      	mov	r2, r3
 80182ee:	79fb      	ldrb	r3, [r7, #7]
 80182f0:	429a      	cmp	r2, r3
 80182f2:	d19b      	bne.n	801822c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80182f4:	2300      	movs	r3, #0
}
 80182f6:	4618      	mov	r0, r3
 80182f8:	3720      	adds	r7, #32
 80182fa:	46bd      	mov	sp, r7
 80182fc:	bd80      	pop	{r7, pc}
 80182fe:	bf00      	nop
 8018300:	20000008 	.word	0x20000008

08018304 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8018304:	b580      	push	{r7, lr}
 8018306:	b086      	sub	sp, #24
 8018308:	af02      	add	r7, sp, #8
 801830a:	60f8      	str	r0, [r7, #12]
 801830c:	60b9      	str	r1, [r7, #8]
 801830e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8018310:	68fb      	ldr	r3, [r7, #12]
 8018312:	685b      	ldr	r3, [r3, #4]
 8018314:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8018318:	d111      	bne.n	801833e <SPI_EndRxTransaction+0x3a>
 801831a:	68fb      	ldr	r3, [r7, #12]
 801831c:	689b      	ldr	r3, [r3, #8]
 801831e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8018322:	d004      	beq.n	801832e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8018324:	68fb      	ldr	r3, [r7, #12]
 8018326:	689b      	ldr	r3, [r3, #8]
 8018328:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801832c:	d107      	bne.n	801833e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801832e:	68fb      	ldr	r3, [r7, #12]
 8018330:	681b      	ldr	r3, [r3, #0]
 8018332:	681a      	ldr	r2, [r3, #0]
 8018334:	68fb      	ldr	r3, [r7, #12]
 8018336:	681b      	ldr	r3, [r3, #0]
 8018338:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801833c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801833e:	68fb      	ldr	r3, [r7, #12]
 8018340:	685b      	ldr	r3, [r3, #4]
 8018342:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8018346:	d12a      	bne.n	801839e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8018348:	68fb      	ldr	r3, [r7, #12]
 801834a:	689b      	ldr	r3, [r3, #8]
 801834c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8018350:	d012      	beq.n	8018378 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	9300      	str	r3, [sp, #0]
 8018356:	68bb      	ldr	r3, [r7, #8]
 8018358:	2200      	movs	r2, #0
 801835a:	2180      	movs	r1, #128	@ 0x80
 801835c:	68f8      	ldr	r0, [r7, #12]
 801835e:	f7ff ff49 	bl	80181f4 <SPI_WaitFlagStateUntilTimeout>
 8018362:	4603      	mov	r3, r0
 8018364:	2b00      	cmp	r3, #0
 8018366:	d02d      	beq.n	80183c4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8018368:	68fb      	ldr	r3, [r7, #12]
 801836a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801836c:	f043 0220 	orr.w	r2, r3, #32
 8018370:	68fb      	ldr	r3, [r7, #12]
 8018372:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8018374:	2303      	movs	r3, #3
 8018376:	e026      	b.n	80183c6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	9300      	str	r3, [sp, #0]
 801837c:	68bb      	ldr	r3, [r7, #8]
 801837e:	2200      	movs	r2, #0
 8018380:	2101      	movs	r1, #1
 8018382:	68f8      	ldr	r0, [r7, #12]
 8018384:	f7ff ff36 	bl	80181f4 <SPI_WaitFlagStateUntilTimeout>
 8018388:	4603      	mov	r3, r0
 801838a:	2b00      	cmp	r3, #0
 801838c:	d01a      	beq.n	80183c4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801838e:	68fb      	ldr	r3, [r7, #12]
 8018390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018392:	f043 0220 	orr.w	r2, r3, #32
 8018396:	68fb      	ldr	r3, [r7, #12]
 8018398:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 801839a:	2303      	movs	r3, #3
 801839c:	e013      	b.n	80183c6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	9300      	str	r3, [sp, #0]
 80183a2:	68bb      	ldr	r3, [r7, #8]
 80183a4:	2200      	movs	r2, #0
 80183a6:	2101      	movs	r1, #1
 80183a8:	68f8      	ldr	r0, [r7, #12]
 80183aa:	f7ff ff23 	bl	80181f4 <SPI_WaitFlagStateUntilTimeout>
 80183ae:	4603      	mov	r3, r0
 80183b0:	2b00      	cmp	r3, #0
 80183b2:	d007      	beq.n	80183c4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80183b4:	68fb      	ldr	r3, [r7, #12]
 80183b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80183b8:	f043 0220 	orr.w	r2, r3, #32
 80183bc:	68fb      	ldr	r3, [r7, #12]
 80183be:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80183c0:	2303      	movs	r3, #3
 80183c2:	e000      	b.n	80183c6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80183c4:	2300      	movs	r3, #0
}
 80183c6:	4618      	mov	r0, r3
 80183c8:	3710      	adds	r7, #16
 80183ca:	46bd      	mov	sp, r7
 80183cc:	bd80      	pop	{r7, pc}
	...

080183d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80183d0:	b580      	push	{r7, lr}
 80183d2:	b088      	sub	sp, #32
 80183d4:	af02      	add	r7, sp, #8
 80183d6:	60f8      	str	r0, [r7, #12]
 80183d8:	60b9      	str	r1, [r7, #8]
 80183da:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	9300      	str	r3, [sp, #0]
 80183e0:	68bb      	ldr	r3, [r7, #8]
 80183e2:	2201      	movs	r2, #1
 80183e4:	2102      	movs	r1, #2
 80183e6:	68f8      	ldr	r0, [r7, #12]
 80183e8:	f7ff ff04 	bl	80181f4 <SPI_WaitFlagStateUntilTimeout>
 80183ec:	4603      	mov	r3, r0
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	d007      	beq.n	8018402 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80183f2:	68fb      	ldr	r3, [r7, #12]
 80183f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80183f6:	f043 0220 	orr.w	r2, r3, #32
 80183fa:	68fb      	ldr	r3, [r7, #12]
 80183fc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80183fe:	2303      	movs	r3, #3
 8018400:	e032      	b.n	8018468 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8018402:	4b1b      	ldr	r3, [pc, #108]	@ (8018470 <SPI_EndRxTxTransaction+0xa0>)
 8018404:	681b      	ldr	r3, [r3, #0]
 8018406:	4a1b      	ldr	r2, [pc, #108]	@ (8018474 <SPI_EndRxTxTransaction+0xa4>)
 8018408:	fba2 2303 	umull	r2, r3, r2, r3
 801840c:	0d5b      	lsrs	r3, r3, #21
 801840e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8018412:	fb02 f303 	mul.w	r3, r2, r3
 8018416:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8018418:	68fb      	ldr	r3, [r7, #12]
 801841a:	685b      	ldr	r3, [r3, #4]
 801841c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8018420:	d112      	bne.n	8018448 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8018422:	687b      	ldr	r3, [r7, #4]
 8018424:	9300      	str	r3, [sp, #0]
 8018426:	68bb      	ldr	r3, [r7, #8]
 8018428:	2200      	movs	r2, #0
 801842a:	2180      	movs	r1, #128	@ 0x80
 801842c:	68f8      	ldr	r0, [r7, #12]
 801842e:	f7ff fee1 	bl	80181f4 <SPI_WaitFlagStateUntilTimeout>
 8018432:	4603      	mov	r3, r0
 8018434:	2b00      	cmp	r3, #0
 8018436:	d016      	beq.n	8018466 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8018438:	68fb      	ldr	r3, [r7, #12]
 801843a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801843c:	f043 0220 	orr.w	r2, r3, #32
 8018440:	68fb      	ldr	r3, [r7, #12]
 8018442:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8018444:	2303      	movs	r3, #3
 8018446:	e00f      	b.n	8018468 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8018448:	697b      	ldr	r3, [r7, #20]
 801844a:	2b00      	cmp	r3, #0
 801844c:	d00a      	beq.n	8018464 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 801844e:	697b      	ldr	r3, [r7, #20]
 8018450:	3b01      	subs	r3, #1
 8018452:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8018454:	68fb      	ldr	r3, [r7, #12]
 8018456:	681b      	ldr	r3, [r3, #0]
 8018458:	689b      	ldr	r3, [r3, #8]
 801845a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801845e:	2b80      	cmp	r3, #128	@ 0x80
 8018460:	d0f2      	beq.n	8018448 <SPI_EndRxTxTransaction+0x78>
 8018462:	e000      	b.n	8018466 <SPI_EndRxTxTransaction+0x96>
        break;
 8018464:	bf00      	nop
  }

  return HAL_OK;
 8018466:	2300      	movs	r3, #0
}
 8018468:	4618      	mov	r0, r3
 801846a:	3718      	adds	r7, #24
 801846c:	46bd      	mov	sp, r7
 801846e:	bd80      	pop	{r7, pc}
 8018470:	20000008 	.word	0x20000008
 8018474:	165e9f81 	.word	0x165e9f81

08018478 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8018478:	b580      	push	{r7, lr}
 801847a:	b082      	sub	sp, #8
 801847c:	af00      	add	r7, sp, #0
 801847e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	2b00      	cmp	r3, #0
 8018484:	d101      	bne.n	801848a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8018486:	2301      	movs	r3, #1
 8018488:	e041      	b.n	801850e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8018490:	b2db      	uxtb	r3, r3
 8018492:	2b00      	cmp	r3, #0
 8018494:	d106      	bne.n	80184a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	2200      	movs	r2, #0
 801849a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801849e:	6878      	ldr	r0, [r7, #4]
 80184a0:	f000 f839 	bl	8018516 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80184a4:	687b      	ldr	r3, [r7, #4]
 80184a6:	2202      	movs	r2, #2
 80184a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	681a      	ldr	r2, [r3, #0]
 80184b0:	687b      	ldr	r3, [r7, #4]
 80184b2:	3304      	adds	r3, #4
 80184b4:	4619      	mov	r1, r3
 80184b6:	4610      	mov	r0, r2
 80184b8:	f000 f9b2 	bl	8018820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	2201      	movs	r2, #1
 80184c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	2201      	movs	r2, #1
 80184c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	2201      	movs	r2, #1
 80184d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	2201      	movs	r2, #1
 80184d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	2201      	movs	r2, #1
 80184e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80184e4:	687b      	ldr	r3, [r7, #4]
 80184e6:	2201      	movs	r2, #1
 80184e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80184ec:	687b      	ldr	r3, [r7, #4]
 80184ee:	2201      	movs	r2, #1
 80184f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	2201      	movs	r2, #1
 80184f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80184fc:	687b      	ldr	r3, [r7, #4]
 80184fe:	2201      	movs	r2, #1
 8018500:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	2201      	movs	r2, #1
 8018508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801850c:	2300      	movs	r3, #0
}
 801850e:	4618      	mov	r0, r3
 8018510:	3708      	adds	r7, #8
 8018512:	46bd      	mov	sp, r7
 8018514:	bd80      	pop	{r7, pc}

08018516 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8018516:	b480      	push	{r7}
 8018518:	b083      	sub	sp, #12
 801851a:	af00      	add	r7, sp, #0
 801851c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 801851e:	bf00      	nop
 8018520:	370c      	adds	r7, #12
 8018522:	46bd      	mov	sp, r7
 8018524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018528:	4770      	bx	lr
	...

0801852c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801852c:	b480      	push	{r7}
 801852e:	b085      	sub	sp, #20
 8018530:	af00      	add	r7, sp, #0
 8018532:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801853a:	b2db      	uxtb	r3, r3
 801853c:	2b01      	cmp	r3, #1
 801853e:	d001      	beq.n	8018544 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8018540:	2301      	movs	r3, #1
 8018542:	e044      	b.n	80185ce <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8018544:	687b      	ldr	r3, [r7, #4]
 8018546:	2202      	movs	r2, #2
 8018548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	681b      	ldr	r3, [r3, #0]
 8018550:	68da      	ldr	r2, [r3, #12]
 8018552:	687b      	ldr	r3, [r7, #4]
 8018554:	681b      	ldr	r3, [r3, #0]
 8018556:	f042 0201 	orr.w	r2, r2, #1
 801855a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	681b      	ldr	r3, [r3, #0]
 8018560:	4a1e      	ldr	r2, [pc, #120]	@ (80185dc <HAL_TIM_Base_Start_IT+0xb0>)
 8018562:	4293      	cmp	r3, r2
 8018564:	d018      	beq.n	8018598 <HAL_TIM_Base_Start_IT+0x6c>
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	681b      	ldr	r3, [r3, #0]
 801856a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801856e:	d013      	beq.n	8018598 <HAL_TIM_Base_Start_IT+0x6c>
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	681b      	ldr	r3, [r3, #0]
 8018574:	4a1a      	ldr	r2, [pc, #104]	@ (80185e0 <HAL_TIM_Base_Start_IT+0xb4>)
 8018576:	4293      	cmp	r3, r2
 8018578:	d00e      	beq.n	8018598 <HAL_TIM_Base_Start_IT+0x6c>
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	681b      	ldr	r3, [r3, #0]
 801857e:	4a19      	ldr	r2, [pc, #100]	@ (80185e4 <HAL_TIM_Base_Start_IT+0xb8>)
 8018580:	4293      	cmp	r3, r2
 8018582:	d009      	beq.n	8018598 <HAL_TIM_Base_Start_IT+0x6c>
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	681b      	ldr	r3, [r3, #0]
 8018588:	4a17      	ldr	r2, [pc, #92]	@ (80185e8 <HAL_TIM_Base_Start_IT+0xbc>)
 801858a:	4293      	cmp	r3, r2
 801858c:	d004      	beq.n	8018598 <HAL_TIM_Base_Start_IT+0x6c>
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	681b      	ldr	r3, [r3, #0]
 8018592:	4a16      	ldr	r2, [pc, #88]	@ (80185ec <HAL_TIM_Base_Start_IT+0xc0>)
 8018594:	4293      	cmp	r3, r2
 8018596:	d111      	bne.n	80185bc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8018598:	687b      	ldr	r3, [r7, #4]
 801859a:	681b      	ldr	r3, [r3, #0]
 801859c:	689b      	ldr	r3, [r3, #8]
 801859e:	f003 0307 	and.w	r3, r3, #7
 80185a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80185a4:	68fb      	ldr	r3, [r7, #12]
 80185a6:	2b06      	cmp	r3, #6
 80185a8:	d010      	beq.n	80185cc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	681b      	ldr	r3, [r3, #0]
 80185ae:	681a      	ldr	r2, [r3, #0]
 80185b0:	687b      	ldr	r3, [r7, #4]
 80185b2:	681b      	ldr	r3, [r3, #0]
 80185b4:	f042 0201 	orr.w	r2, r2, #1
 80185b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80185ba:	e007      	b.n	80185cc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	681b      	ldr	r3, [r3, #0]
 80185c0:	681a      	ldr	r2, [r3, #0]
 80185c2:	687b      	ldr	r3, [r7, #4]
 80185c4:	681b      	ldr	r3, [r3, #0]
 80185c6:	f042 0201 	orr.w	r2, r2, #1
 80185ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80185cc:	2300      	movs	r3, #0
}
 80185ce:	4618      	mov	r0, r3
 80185d0:	3714      	adds	r7, #20
 80185d2:	46bd      	mov	sp, r7
 80185d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185d8:	4770      	bx	lr
 80185da:	bf00      	nop
 80185dc:	40010000 	.word	0x40010000
 80185e0:	40000400 	.word	0x40000400
 80185e4:	40000800 	.word	0x40000800
 80185e8:	40000c00 	.word	0x40000c00
 80185ec:	40014000 	.word	0x40014000

080185f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80185f0:	b580      	push	{r7, lr}
 80185f2:	b084      	sub	sp, #16
 80185f4:	af00      	add	r7, sp, #0
 80185f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	681b      	ldr	r3, [r3, #0]
 80185fc:	68db      	ldr	r3, [r3, #12]
 80185fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8018600:	687b      	ldr	r3, [r7, #4]
 8018602:	681b      	ldr	r3, [r3, #0]
 8018604:	691b      	ldr	r3, [r3, #16]
 8018606:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8018608:	68bb      	ldr	r3, [r7, #8]
 801860a:	f003 0302 	and.w	r3, r3, #2
 801860e:	2b00      	cmp	r3, #0
 8018610:	d020      	beq.n	8018654 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8018612:	68fb      	ldr	r3, [r7, #12]
 8018614:	f003 0302 	and.w	r3, r3, #2
 8018618:	2b00      	cmp	r3, #0
 801861a:	d01b      	beq.n	8018654 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 801861c:	687b      	ldr	r3, [r7, #4]
 801861e:	681b      	ldr	r3, [r3, #0]
 8018620:	f06f 0202 	mvn.w	r2, #2
 8018624:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8018626:	687b      	ldr	r3, [r7, #4]
 8018628:	2201      	movs	r2, #1
 801862a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	681b      	ldr	r3, [r3, #0]
 8018630:	699b      	ldr	r3, [r3, #24]
 8018632:	f003 0303 	and.w	r3, r3, #3
 8018636:	2b00      	cmp	r3, #0
 8018638:	d003      	beq.n	8018642 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801863a:	6878      	ldr	r0, [r7, #4]
 801863c:	f000 f8d2 	bl	80187e4 <HAL_TIM_IC_CaptureCallback>
 8018640:	e005      	b.n	801864e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8018642:	6878      	ldr	r0, [r7, #4]
 8018644:	f000 f8c4 	bl	80187d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018648:	6878      	ldr	r0, [r7, #4]
 801864a:	f000 f8d5 	bl	80187f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801864e:	687b      	ldr	r3, [r7, #4]
 8018650:	2200      	movs	r2, #0
 8018652:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8018654:	68bb      	ldr	r3, [r7, #8]
 8018656:	f003 0304 	and.w	r3, r3, #4
 801865a:	2b00      	cmp	r3, #0
 801865c:	d020      	beq.n	80186a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 801865e:	68fb      	ldr	r3, [r7, #12]
 8018660:	f003 0304 	and.w	r3, r3, #4
 8018664:	2b00      	cmp	r3, #0
 8018666:	d01b      	beq.n	80186a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8018668:	687b      	ldr	r3, [r7, #4]
 801866a:	681b      	ldr	r3, [r3, #0]
 801866c:	f06f 0204 	mvn.w	r2, #4
 8018670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	2202      	movs	r2, #2
 8018676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8018678:	687b      	ldr	r3, [r7, #4]
 801867a:	681b      	ldr	r3, [r3, #0]
 801867c:	699b      	ldr	r3, [r3, #24]
 801867e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8018682:	2b00      	cmp	r3, #0
 8018684:	d003      	beq.n	801868e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8018686:	6878      	ldr	r0, [r7, #4]
 8018688:	f000 f8ac 	bl	80187e4 <HAL_TIM_IC_CaptureCallback>
 801868c:	e005      	b.n	801869a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801868e:	6878      	ldr	r0, [r7, #4]
 8018690:	f000 f89e 	bl	80187d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018694:	6878      	ldr	r0, [r7, #4]
 8018696:	f000 f8af 	bl	80187f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	2200      	movs	r2, #0
 801869e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80186a0:	68bb      	ldr	r3, [r7, #8]
 80186a2:	f003 0308 	and.w	r3, r3, #8
 80186a6:	2b00      	cmp	r3, #0
 80186a8:	d020      	beq.n	80186ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80186aa:	68fb      	ldr	r3, [r7, #12]
 80186ac:	f003 0308 	and.w	r3, r3, #8
 80186b0:	2b00      	cmp	r3, #0
 80186b2:	d01b      	beq.n	80186ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80186b4:	687b      	ldr	r3, [r7, #4]
 80186b6:	681b      	ldr	r3, [r3, #0]
 80186b8:	f06f 0208 	mvn.w	r2, #8
 80186bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80186be:	687b      	ldr	r3, [r7, #4]
 80186c0:	2204      	movs	r2, #4
 80186c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80186c4:	687b      	ldr	r3, [r7, #4]
 80186c6:	681b      	ldr	r3, [r3, #0]
 80186c8:	69db      	ldr	r3, [r3, #28]
 80186ca:	f003 0303 	and.w	r3, r3, #3
 80186ce:	2b00      	cmp	r3, #0
 80186d0:	d003      	beq.n	80186da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80186d2:	6878      	ldr	r0, [r7, #4]
 80186d4:	f000 f886 	bl	80187e4 <HAL_TIM_IC_CaptureCallback>
 80186d8:	e005      	b.n	80186e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80186da:	6878      	ldr	r0, [r7, #4]
 80186dc:	f000 f878 	bl	80187d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80186e0:	6878      	ldr	r0, [r7, #4]
 80186e2:	f000 f889 	bl	80187f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80186e6:	687b      	ldr	r3, [r7, #4]
 80186e8:	2200      	movs	r2, #0
 80186ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80186ec:	68bb      	ldr	r3, [r7, #8]
 80186ee:	f003 0310 	and.w	r3, r3, #16
 80186f2:	2b00      	cmp	r3, #0
 80186f4:	d020      	beq.n	8018738 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80186f6:	68fb      	ldr	r3, [r7, #12]
 80186f8:	f003 0310 	and.w	r3, r3, #16
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	d01b      	beq.n	8018738 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	681b      	ldr	r3, [r3, #0]
 8018704:	f06f 0210 	mvn.w	r2, #16
 8018708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	2208      	movs	r2, #8
 801870e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8018710:	687b      	ldr	r3, [r7, #4]
 8018712:	681b      	ldr	r3, [r3, #0]
 8018714:	69db      	ldr	r3, [r3, #28]
 8018716:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801871a:	2b00      	cmp	r3, #0
 801871c:	d003      	beq.n	8018726 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801871e:	6878      	ldr	r0, [r7, #4]
 8018720:	f000 f860 	bl	80187e4 <HAL_TIM_IC_CaptureCallback>
 8018724:	e005      	b.n	8018732 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8018726:	6878      	ldr	r0, [r7, #4]
 8018728:	f000 f852 	bl	80187d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801872c:	6878      	ldr	r0, [r7, #4]
 801872e:	f000 f863 	bl	80187f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	2200      	movs	r2, #0
 8018736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8018738:	68bb      	ldr	r3, [r7, #8]
 801873a:	f003 0301 	and.w	r3, r3, #1
 801873e:	2b00      	cmp	r3, #0
 8018740:	d00c      	beq.n	801875c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8018742:	68fb      	ldr	r3, [r7, #12]
 8018744:	f003 0301 	and.w	r3, r3, #1
 8018748:	2b00      	cmp	r3, #0
 801874a:	d007      	beq.n	801875c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	681b      	ldr	r3, [r3, #0]
 8018750:	f06f 0201 	mvn.w	r2, #1
 8018754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8018756:	6878      	ldr	r0, [r7, #4]
 8018758:	f7f9 fea2 	bl	80124a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 801875c:	68bb      	ldr	r3, [r7, #8]
 801875e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018762:	2b00      	cmp	r3, #0
 8018764:	d00c      	beq.n	8018780 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8018766:	68fb      	ldr	r3, [r7, #12]
 8018768:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801876c:	2b00      	cmp	r3, #0
 801876e:	d007      	beq.n	8018780 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	681b      	ldr	r3, [r3, #0]
 8018774:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8018778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801877a:	6878      	ldr	r0, [r7, #4]
 801877c:	f000 f8e6 	bl	801894c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8018780:	68bb      	ldr	r3, [r7, #8]
 8018782:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018786:	2b00      	cmp	r3, #0
 8018788:	d00c      	beq.n	80187a4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 801878a:	68fb      	ldr	r3, [r7, #12]
 801878c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018790:	2b00      	cmp	r3, #0
 8018792:	d007      	beq.n	80187a4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	681b      	ldr	r3, [r3, #0]
 8018798:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 801879c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801879e:	6878      	ldr	r0, [r7, #4]
 80187a0:	f000 f834 	bl	801880c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80187a4:	68bb      	ldr	r3, [r7, #8]
 80187a6:	f003 0320 	and.w	r3, r3, #32
 80187aa:	2b00      	cmp	r3, #0
 80187ac:	d00c      	beq.n	80187c8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80187ae:	68fb      	ldr	r3, [r7, #12]
 80187b0:	f003 0320 	and.w	r3, r3, #32
 80187b4:	2b00      	cmp	r3, #0
 80187b6:	d007      	beq.n	80187c8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	681b      	ldr	r3, [r3, #0]
 80187bc:	f06f 0220 	mvn.w	r2, #32
 80187c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80187c2:	6878      	ldr	r0, [r7, #4]
 80187c4:	f000 f8b8 	bl	8018938 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80187c8:	bf00      	nop
 80187ca:	3710      	adds	r7, #16
 80187cc:	46bd      	mov	sp, r7
 80187ce:	bd80      	pop	{r7, pc}

080187d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80187d0:	b480      	push	{r7}
 80187d2:	b083      	sub	sp, #12
 80187d4:	af00      	add	r7, sp, #0
 80187d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80187d8:	bf00      	nop
 80187da:	370c      	adds	r7, #12
 80187dc:	46bd      	mov	sp, r7
 80187de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187e2:	4770      	bx	lr

080187e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80187e4:	b480      	push	{r7}
 80187e6:	b083      	sub	sp, #12
 80187e8:	af00      	add	r7, sp, #0
 80187ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80187ec:	bf00      	nop
 80187ee:	370c      	adds	r7, #12
 80187f0:	46bd      	mov	sp, r7
 80187f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187f6:	4770      	bx	lr

080187f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80187f8:	b480      	push	{r7}
 80187fa:	b083      	sub	sp, #12
 80187fc:	af00      	add	r7, sp, #0
 80187fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8018800:	bf00      	nop
 8018802:	370c      	adds	r7, #12
 8018804:	46bd      	mov	sp, r7
 8018806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801880a:	4770      	bx	lr

0801880c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801880c:	b480      	push	{r7}
 801880e:	b083      	sub	sp, #12
 8018810:	af00      	add	r7, sp, #0
 8018812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8018814:	bf00      	nop
 8018816:	370c      	adds	r7, #12
 8018818:	46bd      	mov	sp, r7
 801881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801881e:	4770      	bx	lr

08018820 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8018820:	b480      	push	{r7}
 8018822:	b085      	sub	sp, #20
 8018824:	af00      	add	r7, sp, #0
 8018826:	6078      	str	r0, [r7, #4]
 8018828:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	681b      	ldr	r3, [r3, #0]
 801882e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	4a3a      	ldr	r2, [pc, #232]	@ (801891c <TIM_Base_SetConfig+0xfc>)
 8018834:	4293      	cmp	r3, r2
 8018836:	d00f      	beq.n	8018858 <TIM_Base_SetConfig+0x38>
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801883e:	d00b      	beq.n	8018858 <TIM_Base_SetConfig+0x38>
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	4a37      	ldr	r2, [pc, #220]	@ (8018920 <TIM_Base_SetConfig+0x100>)
 8018844:	4293      	cmp	r3, r2
 8018846:	d007      	beq.n	8018858 <TIM_Base_SetConfig+0x38>
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	4a36      	ldr	r2, [pc, #216]	@ (8018924 <TIM_Base_SetConfig+0x104>)
 801884c:	4293      	cmp	r3, r2
 801884e:	d003      	beq.n	8018858 <TIM_Base_SetConfig+0x38>
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	4a35      	ldr	r2, [pc, #212]	@ (8018928 <TIM_Base_SetConfig+0x108>)
 8018854:	4293      	cmp	r3, r2
 8018856:	d108      	bne.n	801886a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8018858:	68fb      	ldr	r3, [r7, #12]
 801885a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801885e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8018860:	683b      	ldr	r3, [r7, #0]
 8018862:	685b      	ldr	r3, [r3, #4]
 8018864:	68fa      	ldr	r2, [r7, #12]
 8018866:	4313      	orrs	r3, r2
 8018868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801886a:	687b      	ldr	r3, [r7, #4]
 801886c:	4a2b      	ldr	r2, [pc, #172]	@ (801891c <TIM_Base_SetConfig+0xfc>)
 801886e:	4293      	cmp	r3, r2
 8018870:	d01b      	beq.n	80188aa <TIM_Base_SetConfig+0x8a>
 8018872:	687b      	ldr	r3, [r7, #4]
 8018874:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8018878:	d017      	beq.n	80188aa <TIM_Base_SetConfig+0x8a>
 801887a:	687b      	ldr	r3, [r7, #4]
 801887c:	4a28      	ldr	r2, [pc, #160]	@ (8018920 <TIM_Base_SetConfig+0x100>)
 801887e:	4293      	cmp	r3, r2
 8018880:	d013      	beq.n	80188aa <TIM_Base_SetConfig+0x8a>
 8018882:	687b      	ldr	r3, [r7, #4]
 8018884:	4a27      	ldr	r2, [pc, #156]	@ (8018924 <TIM_Base_SetConfig+0x104>)
 8018886:	4293      	cmp	r3, r2
 8018888:	d00f      	beq.n	80188aa <TIM_Base_SetConfig+0x8a>
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	4a26      	ldr	r2, [pc, #152]	@ (8018928 <TIM_Base_SetConfig+0x108>)
 801888e:	4293      	cmp	r3, r2
 8018890:	d00b      	beq.n	80188aa <TIM_Base_SetConfig+0x8a>
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	4a25      	ldr	r2, [pc, #148]	@ (801892c <TIM_Base_SetConfig+0x10c>)
 8018896:	4293      	cmp	r3, r2
 8018898:	d007      	beq.n	80188aa <TIM_Base_SetConfig+0x8a>
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	4a24      	ldr	r2, [pc, #144]	@ (8018930 <TIM_Base_SetConfig+0x110>)
 801889e:	4293      	cmp	r3, r2
 80188a0:	d003      	beq.n	80188aa <TIM_Base_SetConfig+0x8a>
 80188a2:	687b      	ldr	r3, [r7, #4]
 80188a4:	4a23      	ldr	r2, [pc, #140]	@ (8018934 <TIM_Base_SetConfig+0x114>)
 80188a6:	4293      	cmp	r3, r2
 80188a8:	d108      	bne.n	80188bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80188aa:	68fb      	ldr	r3, [r7, #12]
 80188ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80188b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80188b2:	683b      	ldr	r3, [r7, #0]
 80188b4:	68db      	ldr	r3, [r3, #12]
 80188b6:	68fa      	ldr	r2, [r7, #12]
 80188b8:	4313      	orrs	r3, r2
 80188ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80188bc:	68fb      	ldr	r3, [r7, #12]
 80188be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80188c2:	683b      	ldr	r3, [r7, #0]
 80188c4:	695b      	ldr	r3, [r3, #20]
 80188c6:	4313      	orrs	r3, r2
 80188c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80188ca:	687b      	ldr	r3, [r7, #4]
 80188cc:	68fa      	ldr	r2, [r7, #12]
 80188ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80188d0:	683b      	ldr	r3, [r7, #0]
 80188d2:	689a      	ldr	r2, [r3, #8]
 80188d4:	687b      	ldr	r3, [r7, #4]
 80188d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80188d8:	683b      	ldr	r3, [r7, #0]
 80188da:	681a      	ldr	r2, [r3, #0]
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80188e0:	687b      	ldr	r3, [r7, #4]
 80188e2:	4a0e      	ldr	r2, [pc, #56]	@ (801891c <TIM_Base_SetConfig+0xfc>)
 80188e4:	4293      	cmp	r3, r2
 80188e6:	d103      	bne.n	80188f0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80188e8:	683b      	ldr	r3, [r7, #0]
 80188ea:	691a      	ldr	r2, [r3, #16]
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	2201      	movs	r2, #1
 80188f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80188f6:	687b      	ldr	r3, [r7, #4]
 80188f8:	691b      	ldr	r3, [r3, #16]
 80188fa:	f003 0301 	and.w	r3, r3, #1
 80188fe:	2b01      	cmp	r3, #1
 8018900:	d105      	bne.n	801890e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8018902:	687b      	ldr	r3, [r7, #4]
 8018904:	691b      	ldr	r3, [r3, #16]
 8018906:	f023 0201 	bic.w	r2, r3, #1
 801890a:	687b      	ldr	r3, [r7, #4]
 801890c:	611a      	str	r2, [r3, #16]
  }
}
 801890e:	bf00      	nop
 8018910:	3714      	adds	r7, #20
 8018912:	46bd      	mov	sp, r7
 8018914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018918:	4770      	bx	lr
 801891a:	bf00      	nop
 801891c:	40010000 	.word	0x40010000
 8018920:	40000400 	.word	0x40000400
 8018924:	40000800 	.word	0x40000800
 8018928:	40000c00 	.word	0x40000c00
 801892c:	40014000 	.word	0x40014000
 8018930:	40014400 	.word	0x40014400
 8018934:	40014800 	.word	0x40014800

08018938 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8018938:	b480      	push	{r7}
 801893a:	b083      	sub	sp, #12
 801893c:	af00      	add	r7, sp, #0
 801893e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8018940:	bf00      	nop
 8018942:	370c      	adds	r7, #12
 8018944:	46bd      	mov	sp, r7
 8018946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801894a:	4770      	bx	lr

0801894c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801894c:	b480      	push	{r7}
 801894e:	b083      	sub	sp, #12
 8018950:	af00      	add	r7, sp, #0
 8018952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8018954:	bf00      	nop
 8018956:	370c      	adds	r7, #12
 8018958:	46bd      	mov	sp, r7
 801895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801895e:	4770      	bx	lr

08018960 <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 8018960:	b580      	push	{r7, lr}
 8018962:	b082      	sub	sp, #8
 8018964:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8018966:	f000 fa15 	bl	8018d94 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 801896a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 801896e:	2201      	movs	r2, #1
 8018970:	2178      	movs	r1, #120	@ 0x78
 8018972:	4856      	ldr	r0, [pc, #344]	@ (8018acc <SSD1306_Init+0x16c>)
 8018974:	f7fd ff5a 	bl	801682c <HAL_I2C_IsDeviceReady>
 8018978:	4603      	mov	r3, r0
 801897a:	2b00      	cmp	r3, #0
 801897c:	d001      	beq.n	8018982 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 801897e:	2300      	movs	r3, #0
 8018980:	e09f      	b.n	8018ac2 <SSD1306_Init+0x162>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8018982:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8018986:	607b      	str	r3, [r7, #4]
	while(p>0)
 8018988:	e002      	b.n	8018990 <SSD1306_Init+0x30>
		p--;
 801898a:	687b      	ldr	r3, [r7, #4]
 801898c:	3b01      	subs	r3, #1
 801898e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	2b00      	cmp	r3, #0
 8018994:	d1f9      	bne.n	801898a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8018996:	22ae      	movs	r2, #174	@ 0xae
 8018998:	2100      	movs	r1, #0
 801899a:	2078      	movs	r0, #120	@ 0x78
 801899c:	f000 fa76 	bl	8018e8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80189a0:	2220      	movs	r2, #32
 80189a2:	2100      	movs	r1, #0
 80189a4:	2078      	movs	r0, #120	@ 0x78
 80189a6:	f000 fa71 	bl	8018e8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80189aa:	2210      	movs	r2, #16
 80189ac:	2100      	movs	r1, #0
 80189ae:	2078      	movs	r0, #120	@ 0x78
 80189b0:	f000 fa6c 	bl	8018e8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80189b4:	22b0      	movs	r2, #176	@ 0xb0
 80189b6:	2100      	movs	r1, #0
 80189b8:	2078      	movs	r0, #120	@ 0x78
 80189ba:	f000 fa67 	bl	8018e8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80189be:	22c8      	movs	r2, #200	@ 0xc8
 80189c0:	2100      	movs	r1, #0
 80189c2:	2078      	movs	r0, #120	@ 0x78
 80189c4:	f000 fa62 	bl	8018e8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80189c8:	2200      	movs	r2, #0
 80189ca:	2100      	movs	r1, #0
 80189cc:	2078      	movs	r0, #120	@ 0x78
 80189ce:	f000 fa5d 	bl	8018e8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80189d2:	2210      	movs	r2, #16
 80189d4:	2100      	movs	r1, #0
 80189d6:	2078      	movs	r0, #120	@ 0x78
 80189d8:	f000 fa58 	bl	8018e8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80189dc:	2240      	movs	r2, #64	@ 0x40
 80189de:	2100      	movs	r1, #0
 80189e0:	2078      	movs	r0, #120	@ 0x78
 80189e2:	f000 fa53 	bl	8018e8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80189e6:	2281      	movs	r2, #129	@ 0x81
 80189e8:	2100      	movs	r1, #0
 80189ea:	2078      	movs	r0, #120	@ 0x78
 80189ec:	f000 fa4e 	bl	8018e8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80189f0:	22ff      	movs	r2, #255	@ 0xff
 80189f2:	2100      	movs	r1, #0
 80189f4:	2078      	movs	r0, #120	@ 0x78
 80189f6:	f000 fa49 	bl	8018e8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80189fa:	22a1      	movs	r2, #161	@ 0xa1
 80189fc:	2100      	movs	r1, #0
 80189fe:	2078      	movs	r0, #120	@ 0x78
 8018a00:	f000 fa44 	bl	8018e8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8018a04:	22a6      	movs	r2, #166	@ 0xa6
 8018a06:	2100      	movs	r1, #0
 8018a08:	2078      	movs	r0, #120	@ 0x78
 8018a0a:	f000 fa3f 	bl	8018e8c <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8018a0e:	22a8      	movs	r2, #168	@ 0xa8
 8018a10:	2100      	movs	r1, #0
 8018a12:	2078      	movs	r0, #120	@ 0x78
 8018a14:	f000 fa3a 	bl	8018e8c <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 8018a18:	223f      	movs	r2, #63	@ 0x3f
 8018a1a:	2100      	movs	r1, #0
 8018a1c:	2078      	movs	r0, #120	@ 0x78
 8018a1e:	f000 fa35 	bl	8018e8c <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8018a22:	22a4      	movs	r2, #164	@ 0xa4
 8018a24:	2100      	movs	r1, #0
 8018a26:	2078      	movs	r0, #120	@ 0x78
 8018a28:	f000 fa30 	bl	8018e8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8018a2c:	22d3      	movs	r2, #211	@ 0xd3
 8018a2e:	2100      	movs	r1, #0
 8018a30:	2078      	movs	r0, #120	@ 0x78
 8018a32:	f000 fa2b 	bl	8018e8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8018a36:	2200      	movs	r2, #0
 8018a38:	2100      	movs	r1, #0
 8018a3a:	2078      	movs	r0, #120	@ 0x78
 8018a3c:	f000 fa26 	bl	8018e8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8018a40:	22d5      	movs	r2, #213	@ 0xd5
 8018a42:	2100      	movs	r1, #0
 8018a44:	2078      	movs	r0, #120	@ 0x78
 8018a46:	f000 fa21 	bl	8018e8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8018a4a:	22f0      	movs	r2, #240	@ 0xf0
 8018a4c:	2100      	movs	r1, #0
 8018a4e:	2078      	movs	r0, #120	@ 0x78
 8018a50:	f000 fa1c 	bl	8018e8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8018a54:	22d9      	movs	r2, #217	@ 0xd9
 8018a56:	2100      	movs	r1, #0
 8018a58:	2078      	movs	r0, #120	@ 0x78
 8018a5a:	f000 fa17 	bl	8018e8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8018a5e:	2222      	movs	r2, #34	@ 0x22
 8018a60:	2100      	movs	r1, #0
 8018a62:	2078      	movs	r0, #120	@ 0x78
 8018a64:	f000 fa12 	bl	8018e8c <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8018a68:	22da      	movs	r2, #218	@ 0xda
 8018a6a:	2100      	movs	r1, #0
 8018a6c:	2078      	movs	r0, #120	@ 0x78
 8018a6e:	f000 fa0d 	bl	8018e8c <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 8018a72:	2212      	movs	r2, #18
 8018a74:	2100      	movs	r1, #0
 8018a76:	2078      	movs	r0, #120	@ 0x78
 8018a78:	f000 fa08 	bl	8018e8c <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8018a7c:	22db      	movs	r2, #219	@ 0xdb
 8018a7e:	2100      	movs	r1, #0
 8018a80:	2078      	movs	r0, #120	@ 0x78
 8018a82:	f000 fa03 	bl	8018e8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8018a86:	2220      	movs	r2, #32
 8018a88:	2100      	movs	r1, #0
 8018a8a:	2078      	movs	r0, #120	@ 0x78
 8018a8c:	f000 f9fe 	bl	8018e8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8018a90:	228d      	movs	r2, #141	@ 0x8d
 8018a92:	2100      	movs	r1, #0
 8018a94:	2078      	movs	r0, #120	@ 0x78
 8018a96:	f000 f9f9 	bl	8018e8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8018a9a:	2214      	movs	r2, #20
 8018a9c:	2100      	movs	r1, #0
 8018a9e:	2078      	movs	r0, #120	@ 0x78
 8018aa0:	f000 f9f4 	bl	8018e8c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8018aa4:	22af      	movs	r2, #175	@ 0xaf
 8018aa6:	2100      	movs	r1, #0
 8018aa8:	2078      	movs	r0, #120	@ 0x78
 8018aaa:	f000 f9ef 	bl	8018e8c <ssd1306_I2C_Write>
	
	/* Update screen */
	//SSD1306_UpdateScreen();
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8018aae:	4b08      	ldr	r3, [pc, #32]	@ (8018ad0 <SSD1306_Init+0x170>)
 8018ab0:	2200      	movs	r2, #0
 8018ab2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8018ab4:	4b06      	ldr	r3, [pc, #24]	@ (8018ad0 <SSD1306_Init+0x170>)
 8018ab6:	2200      	movs	r2, #0
 8018ab8:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8018aba:	4b05      	ldr	r3, [pc, #20]	@ (8018ad0 <SSD1306_Init+0x170>)
 8018abc:	2201      	movs	r2, #1
 8018abe:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8018ac0:	2301      	movs	r3, #1
}
 8018ac2:	4618      	mov	r0, r3
 8018ac4:	3708      	adds	r7, #8
 8018ac6:	46bd      	mov	sp, r7
 8018ac8:	bd80      	pop	{r7, pc}
 8018aca:	bf00      	nop
 8018acc:	20000a1c 	.word	0x20000a1c
 8018ad0:	20000ff0 	.word	0x20000ff0

08018ad4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8018ad4:	b580      	push	{r7, lr}
 8018ad6:	b082      	sub	sp, #8
 8018ad8:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8018ada:	2300      	movs	r3, #0
 8018adc:	71fb      	strb	r3, [r7, #7]
 8018ade:	e01d      	b.n	8018b1c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8018ae0:	79fb      	ldrb	r3, [r7, #7]
 8018ae2:	3b50      	subs	r3, #80	@ 0x50
 8018ae4:	b2db      	uxtb	r3, r3
 8018ae6:	461a      	mov	r2, r3
 8018ae8:	2100      	movs	r1, #0
 8018aea:	2078      	movs	r0, #120	@ 0x78
 8018aec:	f000 f9ce 	bl	8018e8c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8018af0:	2200      	movs	r2, #0
 8018af2:	2100      	movs	r1, #0
 8018af4:	2078      	movs	r0, #120	@ 0x78
 8018af6:	f000 f9c9 	bl	8018e8c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8018afa:	2210      	movs	r2, #16
 8018afc:	2100      	movs	r1, #0
 8018afe:	2078      	movs	r0, #120	@ 0x78
 8018b00:	f000 f9c4 	bl	8018e8c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8018b04:	79fb      	ldrb	r3, [r7, #7]
 8018b06:	01db      	lsls	r3, r3, #7
 8018b08:	4a08      	ldr	r2, [pc, #32]	@ (8018b2c <SSD1306_UpdateScreen+0x58>)
 8018b0a:	441a      	add	r2, r3
 8018b0c:	2380      	movs	r3, #128	@ 0x80
 8018b0e:	2140      	movs	r1, #64	@ 0x40
 8018b10:	2078      	movs	r0, #120	@ 0x78
 8018b12:	f000 f955 	bl	8018dc0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8018b16:	79fb      	ldrb	r3, [r7, #7]
 8018b18:	3301      	adds	r3, #1
 8018b1a:	71fb      	strb	r3, [r7, #7]
 8018b1c:	79fb      	ldrb	r3, [r7, #7]
 8018b1e:	2b07      	cmp	r3, #7
 8018b20:	d9de      	bls.n	8018ae0 <SSD1306_UpdateScreen+0xc>
	}
}
 8018b22:	bf00      	nop
 8018b24:	bf00      	nop
 8018b26:	3708      	adds	r7, #8
 8018b28:	46bd      	mov	sp, r7
 8018b2a:	bd80      	pop	{r7, pc}
 8018b2c:	20000bf0 	.word	0x20000bf0

08018b30 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8018b30:	b580      	push	{r7, lr}
 8018b32:	b082      	sub	sp, #8
 8018b34:	af00      	add	r7, sp, #0
 8018b36:	4603      	mov	r3, r0
 8018b38:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8018b3a:	79fb      	ldrb	r3, [r7, #7]
 8018b3c:	2b00      	cmp	r3, #0
 8018b3e:	d101      	bne.n	8018b44 <SSD1306_Fill+0x14>
 8018b40:	2300      	movs	r3, #0
 8018b42:	e000      	b.n	8018b46 <SSD1306_Fill+0x16>
 8018b44:	23ff      	movs	r3, #255	@ 0xff
 8018b46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8018b4a:	4619      	mov	r1, r3
 8018b4c:	4803      	ldr	r0, [pc, #12]	@ (8018b5c <SSD1306_Fill+0x2c>)
 8018b4e:	f01d f94f 	bl	8035df0 <memset>
}
 8018b52:	bf00      	nop
 8018b54:	3708      	adds	r7, #8
 8018b56:	46bd      	mov	sp, r7
 8018b58:	bd80      	pop	{r7, pc}
 8018b5a:	bf00      	nop
 8018b5c:	20000bf0 	.word	0x20000bf0

08018b60 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8018b60:	b480      	push	{r7}
 8018b62:	b083      	sub	sp, #12
 8018b64:	af00      	add	r7, sp, #0
 8018b66:	4603      	mov	r3, r0
 8018b68:	80fb      	strh	r3, [r7, #6]
 8018b6a:	460b      	mov	r3, r1
 8018b6c:	80bb      	strh	r3, [r7, #4]
 8018b6e:	4613      	mov	r3, r2
 8018b70:	70fb      	strb	r3, [r7, #3]
	if (
 8018b72:	88fb      	ldrh	r3, [r7, #6]
 8018b74:	2b7f      	cmp	r3, #127	@ 0x7f
 8018b76:	d848      	bhi.n	8018c0a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8018b78:	88bb      	ldrh	r3, [r7, #4]
 8018b7a:	2b3f      	cmp	r3, #63	@ 0x3f
 8018b7c:	d845      	bhi.n	8018c0a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8018b7e:	4b26      	ldr	r3, [pc, #152]	@ (8018c18 <SSD1306_DrawPixel+0xb8>)
 8018b80:	791b      	ldrb	r3, [r3, #4]
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	d006      	beq.n	8018b94 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8018b86:	78fb      	ldrb	r3, [r7, #3]
 8018b88:	2b00      	cmp	r3, #0
 8018b8a:	bf0c      	ite	eq
 8018b8c:	2301      	moveq	r3, #1
 8018b8e:	2300      	movne	r3, #0
 8018b90:	b2db      	uxtb	r3, r3
 8018b92:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8018b94:	78fb      	ldrb	r3, [r7, #3]
 8018b96:	2b01      	cmp	r3, #1
 8018b98:	d11a      	bne.n	8018bd0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8018b9a:	88fa      	ldrh	r2, [r7, #6]
 8018b9c:	88bb      	ldrh	r3, [r7, #4]
 8018b9e:	08db      	lsrs	r3, r3, #3
 8018ba0:	b298      	uxth	r0, r3
 8018ba2:	4603      	mov	r3, r0
 8018ba4:	01db      	lsls	r3, r3, #7
 8018ba6:	4413      	add	r3, r2
 8018ba8:	4a1c      	ldr	r2, [pc, #112]	@ (8018c1c <SSD1306_DrawPixel+0xbc>)
 8018baa:	5cd3      	ldrb	r3, [r2, r3]
 8018bac:	b25a      	sxtb	r2, r3
 8018bae:	88bb      	ldrh	r3, [r7, #4]
 8018bb0:	f003 0307 	and.w	r3, r3, #7
 8018bb4:	2101      	movs	r1, #1
 8018bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8018bba:	b25b      	sxtb	r3, r3
 8018bbc:	4313      	orrs	r3, r2
 8018bbe:	b259      	sxtb	r1, r3
 8018bc0:	88fa      	ldrh	r2, [r7, #6]
 8018bc2:	4603      	mov	r3, r0
 8018bc4:	01db      	lsls	r3, r3, #7
 8018bc6:	4413      	add	r3, r2
 8018bc8:	b2c9      	uxtb	r1, r1
 8018bca:	4a14      	ldr	r2, [pc, #80]	@ (8018c1c <SSD1306_DrawPixel+0xbc>)
 8018bcc:	54d1      	strb	r1, [r2, r3]
 8018bce:	e01d      	b.n	8018c0c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8018bd0:	88fa      	ldrh	r2, [r7, #6]
 8018bd2:	88bb      	ldrh	r3, [r7, #4]
 8018bd4:	08db      	lsrs	r3, r3, #3
 8018bd6:	b298      	uxth	r0, r3
 8018bd8:	4603      	mov	r3, r0
 8018bda:	01db      	lsls	r3, r3, #7
 8018bdc:	4413      	add	r3, r2
 8018bde:	4a0f      	ldr	r2, [pc, #60]	@ (8018c1c <SSD1306_DrawPixel+0xbc>)
 8018be0:	5cd3      	ldrb	r3, [r2, r3]
 8018be2:	b25a      	sxtb	r2, r3
 8018be4:	88bb      	ldrh	r3, [r7, #4]
 8018be6:	f003 0307 	and.w	r3, r3, #7
 8018bea:	2101      	movs	r1, #1
 8018bec:	fa01 f303 	lsl.w	r3, r1, r3
 8018bf0:	b25b      	sxtb	r3, r3
 8018bf2:	43db      	mvns	r3, r3
 8018bf4:	b25b      	sxtb	r3, r3
 8018bf6:	4013      	ands	r3, r2
 8018bf8:	b259      	sxtb	r1, r3
 8018bfa:	88fa      	ldrh	r2, [r7, #6]
 8018bfc:	4603      	mov	r3, r0
 8018bfe:	01db      	lsls	r3, r3, #7
 8018c00:	4413      	add	r3, r2
 8018c02:	b2c9      	uxtb	r1, r1
 8018c04:	4a05      	ldr	r2, [pc, #20]	@ (8018c1c <SSD1306_DrawPixel+0xbc>)
 8018c06:	54d1      	strb	r1, [r2, r3]
 8018c08:	e000      	b.n	8018c0c <SSD1306_DrawPixel+0xac>
		return;
 8018c0a:	bf00      	nop
	}
}
 8018c0c:	370c      	adds	r7, #12
 8018c0e:	46bd      	mov	sp, r7
 8018c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c14:	4770      	bx	lr
 8018c16:	bf00      	nop
 8018c18:	20000ff0 	.word	0x20000ff0
 8018c1c:	20000bf0 	.word	0x20000bf0

08018c20 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8018c20:	b480      	push	{r7}
 8018c22:	b083      	sub	sp, #12
 8018c24:	af00      	add	r7, sp, #0
 8018c26:	4603      	mov	r3, r0
 8018c28:	460a      	mov	r2, r1
 8018c2a:	80fb      	strh	r3, [r7, #6]
 8018c2c:	4613      	mov	r3, r2
 8018c2e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8018c30:	4a05      	ldr	r2, [pc, #20]	@ (8018c48 <SSD1306_GotoXY+0x28>)
 8018c32:	88fb      	ldrh	r3, [r7, #6]
 8018c34:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8018c36:	4a04      	ldr	r2, [pc, #16]	@ (8018c48 <SSD1306_GotoXY+0x28>)
 8018c38:	88bb      	ldrh	r3, [r7, #4]
 8018c3a:	8053      	strh	r3, [r2, #2]
}
 8018c3c:	bf00      	nop
 8018c3e:	370c      	adds	r7, #12
 8018c40:	46bd      	mov	sp, r7
 8018c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c46:	4770      	bx	lr
 8018c48:	20000ff0 	.word	0x20000ff0

08018c4c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8018c4c:	b580      	push	{r7, lr}
 8018c4e:	b086      	sub	sp, #24
 8018c50:	af00      	add	r7, sp, #0
 8018c52:	4603      	mov	r3, r0
 8018c54:	6039      	str	r1, [r7, #0]
 8018c56:	71fb      	strb	r3, [r7, #7]
 8018c58:	4613      	mov	r3, r2
 8018c5a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8018c5c:	4b39      	ldr	r3, [pc, #228]	@ (8018d44 <SSD1306_Putc+0xf8>)
 8018c5e:	881b      	ldrh	r3, [r3, #0]
 8018c60:	461a      	mov	r2, r3
 8018c62:	683b      	ldr	r3, [r7, #0]
 8018c64:	781b      	ldrb	r3, [r3, #0]
 8018c66:	4413      	add	r3, r2
	if (
 8018c68:	2b7f      	cmp	r3, #127	@ 0x7f
 8018c6a:	dc07      	bgt.n	8018c7c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8018c6c:	4b35      	ldr	r3, [pc, #212]	@ (8018d44 <SSD1306_Putc+0xf8>)
 8018c6e:	885b      	ldrh	r3, [r3, #2]
 8018c70:	461a      	mov	r2, r3
 8018c72:	683b      	ldr	r3, [r7, #0]
 8018c74:	785b      	ldrb	r3, [r3, #1]
 8018c76:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8018c78:	2b3f      	cmp	r3, #63	@ 0x3f
 8018c7a:	dd01      	ble.n	8018c80 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8018c7c:	2300      	movs	r3, #0
 8018c7e:	e05d      	b.n	8018d3c <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8018c80:	2300      	movs	r3, #0
 8018c82:	617b      	str	r3, [r7, #20]
 8018c84:	e04b      	b.n	8018d1e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8018c86:	683b      	ldr	r3, [r7, #0]
 8018c88:	685a      	ldr	r2, [r3, #4]
 8018c8a:	79fb      	ldrb	r3, [r7, #7]
 8018c8c:	3b20      	subs	r3, #32
 8018c8e:	6839      	ldr	r1, [r7, #0]
 8018c90:	7849      	ldrb	r1, [r1, #1]
 8018c92:	fb01 f303 	mul.w	r3, r1, r3
 8018c96:	4619      	mov	r1, r3
 8018c98:	697b      	ldr	r3, [r7, #20]
 8018c9a:	440b      	add	r3, r1
 8018c9c:	005b      	lsls	r3, r3, #1
 8018c9e:	4413      	add	r3, r2
 8018ca0:	881b      	ldrh	r3, [r3, #0]
 8018ca2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8018ca4:	2300      	movs	r3, #0
 8018ca6:	613b      	str	r3, [r7, #16]
 8018ca8:	e030      	b.n	8018d0c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8018caa:	68fa      	ldr	r2, [r7, #12]
 8018cac:	693b      	ldr	r3, [r7, #16]
 8018cae:	fa02 f303 	lsl.w	r3, r2, r3
 8018cb2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8018cb6:	2b00      	cmp	r3, #0
 8018cb8:	d010      	beq.n	8018cdc <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8018cba:	4b22      	ldr	r3, [pc, #136]	@ (8018d44 <SSD1306_Putc+0xf8>)
 8018cbc:	881a      	ldrh	r2, [r3, #0]
 8018cbe:	693b      	ldr	r3, [r7, #16]
 8018cc0:	b29b      	uxth	r3, r3
 8018cc2:	4413      	add	r3, r2
 8018cc4:	b298      	uxth	r0, r3
 8018cc6:	4b1f      	ldr	r3, [pc, #124]	@ (8018d44 <SSD1306_Putc+0xf8>)
 8018cc8:	885a      	ldrh	r2, [r3, #2]
 8018cca:	697b      	ldr	r3, [r7, #20]
 8018ccc:	b29b      	uxth	r3, r3
 8018cce:	4413      	add	r3, r2
 8018cd0:	b29b      	uxth	r3, r3
 8018cd2:	79ba      	ldrb	r2, [r7, #6]
 8018cd4:	4619      	mov	r1, r3
 8018cd6:	f7ff ff43 	bl	8018b60 <SSD1306_DrawPixel>
 8018cda:	e014      	b.n	8018d06 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8018cdc:	4b19      	ldr	r3, [pc, #100]	@ (8018d44 <SSD1306_Putc+0xf8>)
 8018cde:	881a      	ldrh	r2, [r3, #0]
 8018ce0:	693b      	ldr	r3, [r7, #16]
 8018ce2:	b29b      	uxth	r3, r3
 8018ce4:	4413      	add	r3, r2
 8018ce6:	b298      	uxth	r0, r3
 8018ce8:	4b16      	ldr	r3, [pc, #88]	@ (8018d44 <SSD1306_Putc+0xf8>)
 8018cea:	885a      	ldrh	r2, [r3, #2]
 8018cec:	697b      	ldr	r3, [r7, #20]
 8018cee:	b29b      	uxth	r3, r3
 8018cf0:	4413      	add	r3, r2
 8018cf2:	b299      	uxth	r1, r3
 8018cf4:	79bb      	ldrb	r3, [r7, #6]
 8018cf6:	2b00      	cmp	r3, #0
 8018cf8:	bf0c      	ite	eq
 8018cfa:	2301      	moveq	r3, #1
 8018cfc:	2300      	movne	r3, #0
 8018cfe:	b2db      	uxtb	r3, r3
 8018d00:	461a      	mov	r2, r3
 8018d02:	f7ff ff2d 	bl	8018b60 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8018d06:	693b      	ldr	r3, [r7, #16]
 8018d08:	3301      	adds	r3, #1
 8018d0a:	613b      	str	r3, [r7, #16]
 8018d0c:	683b      	ldr	r3, [r7, #0]
 8018d0e:	781b      	ldrb	r3, [r3, #0]
 8018d10:	461a      	mov	r2, r3
 8018d12:	693b      	ldr	r3, [r7, #16]
 8018d14:	4293      	cmp	r3, r2
 8018d16:	d3c8      	bcc.n	8018caa <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8018d18:	697b      	ldr	r3, [r7, #20]
 8018d1a:	3301      	adds	r3, #1
 8018d1c:	617b      	str	r3, [r7, #20]
 8018d1e:	683b      	ldr	r3, [r7, #0]
 8018d20:	785b      	ldrb	r3, [r3, #1]
 8018d22:	461a      	mov	r2, r3
 8018d24:	697b      	ldr	r3, [r7, #20]
 8018d26:	4293      	cmp	r3, r2
 8018d28:	d3ad      	bcc.n	8018c86 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8018d2a:	4b06      	ldr	r3, [pc, #24]	@ (8018d44 <SSD1306_Putc+0xf8>)
 8018d2c:	881b      	ldrh	r3, [r3, #0]
 8018d2e:	683a      	ldr	r2, [r7, #0]
 8018d30:	7812      	ldrb	r2, [r2, #0]
 8018d32:	4413      	add	r3, r2
 8018d34:	b29a      	uxth	r2, r3
 8018d36:	4b03      	ldr	r3, [pc, #12]	@ (8018d44 <SSD1306_Putc+0xf8>)
 8018d38:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8018d3a:	79fb      	ldrb	r3, [r7, #7]
}
 8018d3c:	4618      	mov	r0, r3
 8018d3e:	3718      	adds	r7, #24
 8018d40:	46bd      	mov	sp, r7
 8018d42:	bd80      	pop	{r7, pc}
 8018d44:	20000ff0 	.word	0x20000ff0

08018d48 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8018d48:	b580      	push	{r7, lr}
 8018d4a:	b084      	sub	sp, #16
 8018d4c:	af00      	add	r7, sp, #0
 8018d4e:	60f8      	str	r0, [r7, #12]
 8018d50:	60b9      	str	r1, [r7, #8]
 8018d52:	4613      	mov	r3, r2
 8018d54:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8018d56:	e012      	b.n	8018d7e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8018d58:	68fb      	ldr	r3, [r7, #12]
 8018d5a:	781b      	ldrb	r3, [r3, #0]
 8018d5c:	79fa      	ldrb	r2, [r7, #7]
 8018d5e:	68b9      	ldr	r1, [r7, #8]
 8018d60:	4618      	mov	r0, r3
 8018d62:	f7ff ff73 	bl	8018c4c <SSD1306_Putc>
 8018d66:	4603      	mov	r3, r0
 8018d68:	461a      	mov	r2, r3
 8018d6a:	68fb      	ldr	r3, [r7, #12]
 8018d6c:	781b      	ldrb	r3, [r3, #0]
 8018d6e:	429a      	cmp	r2, r3
 8018d70:	d002      	beq.n	8018d78 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8018d72:	68fb      	ldr	r3, [r7, #12]
 8018d74:	781b      	ldrb	r3, [r3, #0]
 8018d76:	e008      	b.n	8018d8a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8018d78:	68fb      	ldr	r3, [r7, #12]
 8018d7a:	3301      	adds	r3, #1
 8018d7c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8018d7e:	68fb      	ldr	r3, [r7, #12]
 8018d80:	781b      	ldrb	r3, [r3, #0]
 8018d82:	2b00      	cmp	r3, #0
 8018d84:	d1e8      	bne.n	8018d58 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8018d86:	68fb      	ldr	r3, [r7, #12]
 8018d88:	781b      	ldrb	r3, [r3, #0]
}
 8018d8a:	4618      	mov	r0, r3
 8018d8c:	3710      	adds	r7, #16
 8018d8e:	46bd      	mov	sp, r7
 8018d90:	bd80      	pop	{r7, pc}
	...

08018d94 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8018d94:	b480      	push	{r7}
 8018d96:	b083      	sub	sp, #12
 8018d98:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8018d9a:	4b08      	ldr	r3, [pc, #32]	@ (8018dbc <ssd1306_I2C_Init+0x28>)
 8018d9c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8018d9e:	e002      	b.n	8018da6 <ssd1306_I2C_Init+0x12>
		p--;
 8018da0:	687b      	ldr	r3, [r7, #4]
 8018da2:	3b01      	subs	r3, #1
 8018da4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8018da6:	687b      	ldr	r3, [r7, #4]
 8018da8:	2b00      	cmp	r3, #0
 8018daa:	d1f9      	bne.n	8018da0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8018dac:	bf00      	nop
 8018dae:	bf00      	nop
 8018db0:	370c      	adds	r7, #12
 8018db2:	46bd      	mov	sp, r7
 8018db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018db8:	4770      	bx	lr
 8018dba:	bf00      	nop
 8018dbc:	0003d090 	.word	0x0003d090

08018dc0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8018dc0:	b590      	push	{r4, r7, lr}
 8018dc2:	b0c7      	sub	sp, #284	@ 0x11c
 8018dc4:	af02      	add	r7, sp, #8
 8018dc6:	4604      	mov	r4, r0
 8018dc8:	4608      	mov	r0, r1
 8018dca:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8018dce:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8018dd2:	600a      	str	r2, [r1, #0]
 8018dd4:	4619      	mov	r1, r3
 8018dd6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8018dda:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8018dde:	4622      	mov	r2, r4
 8018de0:	701a      	strb	r2, [r3, #0]
 8018de2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8018de6:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8018dea:	4602      	mov	r2, r0
 8018dec:	701a      	strb	r2, [r3, #0]
 8018dee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8018df2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8018df6:	460a      	mov	r2, r1
 8018df8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8018dfa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8018dfe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8018e02:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8018e06:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8018e0a:	7812      	ldrb	r2, [r2, #0]
 8018e0c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8018e0e:	2300      	movs	r3, #0
 8018e10:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8018e14:	e015      	b.n	8018e42 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8018e16:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8018e1a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8018e1e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8018e22:	6812      	ldr	r2, [r2, #0]
 8018e24:	441a      	add	r2, r3
 8018e26:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8018e2a:	3301      	adds	r3, #1
 8018e2c:	7811      	ldrb	r1, [r2, #0]
 8018e2e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8018e32:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8018e36:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8018e38:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8018e3c:	3301      	adds	r3, #1
 8018e3e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8018e42:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8018e46:	b29b      	uxth	r3, r3
 8018e48:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8018e4c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8018e50:	8812      	ldrh	r2, [r2, #0]
 8018e52:	429a      	cmp	r2, r3
 8018e54:	d8df      	bhi.n	8018e16 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 8018e56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8018e5a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8018e5e:	781b      	ldrb	r3, [r3, #0]
 8018e60:	b299      	uxth	r1, r3
 8018e62:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8018e66:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8018e6a:	881b      	ldrh	r3, [r3, #0]
 8018e6c:	3301      	adds	r3, #1
 8018e6e:	b29b      	uxth	r3, r3
 8018e70:	f107 020c 	add.w	r2, r7, #12
 8018e74:	200a      	movs	r0, #10
 8018e76:	9000      	str	r0, [sp, #0]
 8018e78:	4803      	ldr	r0, [pc, #12]	@ (8018e88 <ssd1306_I2C_WriteMulti+0xc8>)
 8018e7a:	f7fd fbd9 	bl	8016630 <HAL_I2C_Master_Transmit>
}
 8018e7e:	bf00      	nop
 8018e80:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8018e84:	46bd      	mov	sp, r7
 8018e86:	bd90      	pop	{r4, r7, pc}
 8018e88:	20000a1c 	.word	0x20000a1c

08018e8c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8018e8c:	b580      	push	{r7, lr}
 8018e8e:	b086      	sub	sp, #24
 8018e90:	af02      	add	r7, sp, #8
 8018e92:	4603      	mov	r3, r0
 8018e94:	71fb      	strb	r3, [r7, #7]
 8018e96:	460b      	mov	r3, r1
 8018e98:	71bb      	strb	r3, [r7, #6]
 8018e9a:	4613      	mov	r3, r2
 8018e9c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8018e9e:	79bb      	ldrb	r3, [r7, #6]
 8018ea0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8018ea2:	797b      	ldrb	r3, [r7, #5]
 8018ea4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8018ea6:	79fb      	ldrb	r3, [r7, #7]
 8018ea8:	b299      	uxth	r1, r3
 8018eaa:	f107 020c 	add.w	r2, r7, #12
 8018eae:	230a      	movs	r3, #10
 8018eb0:	9300      	str	r3, [sp, #0]
 8018eb2:	2302      	movs	r3, #2
 8018eb4:	4803      	ldr	r0, [pc, #12]	@ (8018ec4 <ssd1306_I2C_Write+0x38>)
 8018eb6:	f7fd fbbb 	bl	8016630 <HAL_I2C_Master_Transmit>
}
 8018eba:	bf00      	nop
 8018ebc:	3710      	adds	r7, #16
 8018ebe:	46bd      	mov	sp, r7
 8018ec0:	bd80      	pop	{r7, pc}
 8018ec2:	bf00      	nop
 8018ec4:	20000a1c 	.word	0x20000a1c

08018ec8 <__NVIC_SetPriority>:
{
 8018ec8:	b480      	push	{r7}
 8018eca:	b083      	sub	sp, #12
 8018ecc:	af00      	add	r7, sp, #0
 8018ece:	4603      	mov	r3, r0
 8018ed0:	6039      	str	r1, [r7, #0]
 8018ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8018ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018ed8:	2b00      	cmp	r3, #0
 8018eda:	db0a      	blt.n	8018ef2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8018edc:	683b      	ldr	r3, [r7, #0]
 8018ede:	b2da      	uxtb	r2, r3
 8018ee0:	490c      	ldr	r1, [pc, #48]	@ (8018f14 <__NVIC_SetPriority+0x4c>)
 8018ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018ee6:	0112      	lsls	r2, r2, #4
 8018ee8:	b2d2      	uxtb	r2, r2
 8018eea:	440b      	add	r3, r1
 8018eec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8018ef0:	e00a      	b.n	8018f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8018ef2:	683b      	ldr	r3, [r7, #0]
 8018ef4:	b2da      	uxtb	r2, r3
 8018ef6:	4908      	ldr	r1, [pc, #32]	@ (8018f18 <__NVIC_SetPriority+0x50>)
 8018ef8:	79fb      	ldrb	r3, [r7, #7]
 8018efa:	f003 030f 	and.w	r3, r3, #15
 8018efe:	3b04      	subs	r3, #4
 8018f00:	0112      	lsls	r2, r2, #4
 8018f02:	b2d2      	uxtb	r2, r2
 8018f04:	440b      	add	r3, r1
 8018f06:	761a      	strb	r2, [r3, #24]
}
 8018f08:	bf00      	nop
 8018f0a:	370c      	adds	r7, #12
 8018f0c:	46bd      	mov	sp, r7
 8018f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f12:	4770      	bx	lr
 8018f14:	e000e100 	.word	0xe000e100
 8018f18:	e000ed00 	.word	0xe000ed00

08018f1c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8018f1c:	b580      	push	{r7, lr}
 8018f1e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8018f20:	4b05      	ldr	r3, [pc, #20]	@ (8018f38 <SysTick_Handler+0x1c>)
 8018f22:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8018f24:	f002 fbc2 	bl	801b6ac <xTaskGetSchedulerState>
 8018f28:	4603      	mov	r3, r0
 8018f2a:	2b01      	cmp	r3, #1
 8018f2c:	d001      	beq.n	8018f32 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8018f2e:	f003 fabb 	bl	801c4a8 <xPortSysTickHandler>
  }
}
 8018f32:	bf00      	nop
 8018f34:	bd80      	pop	{r7, pc}
 8018f36:	bf00      	nop
 8018f38:	e000e010 	.word	0xe000e010

08018f3c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8018f3c:	b580      	push	{r7, lr}
 8018f3e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8018f40:	2100      	movs	r1, #0
 8018f42:	f06f 0004 	mvn.w	r0, #4
 8018f46:	f7ff ffbf 	bl	8018ec8 <__NVIC_SetPriority>
#endif
}
 8018f4a:	bf00      	nop
 8018f4c:	bd80      	pop	{r7, pc}
	...

08018f50 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8018f50:	b480      	push	{r7}
 8018f52:	b083      	sub	sp, #12
 8018f54:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018f56:	f3ef 8305 	mrs	r3, IPSR
 8018f5a:	603b      	str	r3, [r7, #0]
  return(result);
 8018f5c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8018f5e:	2b00      	cmp	r3, #0
 8018f60:	d003      	beq.n	8018f6a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8018f62:	f06f 0305 	mvn.w	r3, #5
 8018f66:	607b      	str	r3, [r7, #4]
 8018f68:	e00c      	b.n	8018f84 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8018f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8018f94 <osKernelInitialize+0x44>)
 8018f6c:	681b      	ldr	r3, [r3, #0]
 8018f6e:	2b00      	cmp	r3, #0
 8018f70:	d105      	bne.n	8018f7e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8018f72:	4b08      	ldr	r3, [pc, #32]	@ (8018f94 <osKernelInitialize+0x44>)
 8018f74:	2201      	movs	r2, #1
 8018f76:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8018f78:	2300      	movs	r3, #0
 8018f7a:	607b      	str	r3, [r7, #4]
 8018f7c:	e002      	b.n	8018f84 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8018f7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018f82:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8018f84:	687b      	ldr	r3, [r7, #4]
}
 8018f86:	4618      	mov	r0, r3
 8018f88:	370c      	adds	r7, #12
 8018f8a:	46bd      	mov	sp, r7
 8018f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f90:	4770      	bx	lr
 8018f92:	bf00      	nop
 8018f94:	20000ff8 	.word	0x20000ff8

08018f98 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8018f98:	b580      	push	{r7, lr}
 8018f9a:	b082      	sub	sp, #8
 8018f9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018f9e:	f3ef 8305 	mrs	r3, IPSR
 8018fa2:	603b      	str	r3, [r7, #0]
  return(result);
 8018fa4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8018fa6:	2b00      	cmp	r3, #0
 8018fa8:	d003      	beq.n	8018fb2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8018faa:	f06f 0305 	mvn.w	r3, #5
 8018fae:	607b      	str	r3, [r7, #4]
 8018fb0:	e010      	b.n	8018fd4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8018fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8018fe0 <osKernelStart+0x48>)
 8018fb4:	681b      	ldr	r3, [r3, #0]
 8018fb6:	2b01      	cmp	r3, #1
 8018fb8:	d109      	bne.n	8018fce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8018fba:	f7ff ffbf 	bl	8018f3c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8018fbe:	4b08      	ldr	r3, [pc, #32]	@ (8018fe0 <osKernelStart+0x48>)
 8018fc0:	2202      	movs	r2, #2
 8018fc2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8018fc4:	f001 fefe 	bl	801adc4 <vTaskStartScheduler>
      stat = osOK;
 8018fc8:	2300      	movs	r3, #0
 8018fca:	607b      	str	r3, [r7, #4]
 8018fcc:	e002      	b.n	8018fd4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8018fce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018fd2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8018fd4:	687b      	ldr	r3, [r7, #4]
}
 8018fd6:	4618      	mov	r0, r3
 8018fd8:	3708      	adds	r7, #8
 8018fda:	46bd      	mov	sp, r7
 8018fdc:	bd80      	pop	{r7, pc}
 8018fde:	bf00      	nop
 8018fe0:	20000ff8 	.word	0x20000ff8

08018fe4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8018fe4:	b580      	push	{r7, lr}
 8018fe6:	b08e      	sub	sp, #56	@ 0x38
 8018fe8:	af04      	add	r7, sp, #16
 8018fea:	60f8      	str	r0, [r7, #12]
 8018fec:	60b9      	str	r1, [r7, #8]
 8018fee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8018ff0:	2300      	movs	r3, #0
 8018ff2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018ff4:	f3ef 8305 	mrs	r3, IPSR
 8018ff8:	617b      	str	r3, [r7, #20]
  return(result);
 8018ffa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8018ffc:	2b00      	cmp	r3, #0
 8018ffe:	d17f      	bne.n	8019100 <osThreadNew+0x11c>
 8019000:	68fb      	ldr	r3, [r7, #12]
 8019002:	2b00      	cmp	r3, #0
 8019004:	d07c      	beq.n	8019100 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8019006:	2380      	movs	r3, #128	@ 0x80
 8019008:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801900a:	2318      	movs	r3, #24
 801900c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801900e:	2300      	movs	r3, #0
 8019010:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8019012:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019016:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8019018:	687b      	ldr	r3, [r7, #4]
 801901a:	2b00      	cmp	r3, #0
 801901c:	d046      	beq.n	80190ac <osThreadNew+0xc8>
      if (attr->name != NULL) {
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	681b      	ldr	r3, [r3, #0]
 8019022:	2b00      	cmp	r3, #0
 8019024:	d002      	beq.n	801902c <osThreadNew+0x48>
        name = attr->name;
 8019026:	687b      	ldr	r3, [r7, #4]
 8019028:	681b      	ldr	r3, [r3, #0]
 801902a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 801902c:	687b      	ldr	r3, [r7, #4]
 801902e:	699b      	ldr	r3, [r3, #24]
 8019030:	2b00      	cmp	r3, #0
 8019032:	d002      	beq.n	801903a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	699b      	ldr	r3, [r3, #24]
 8019038:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801903a:	69fb      	ldr	r3, [r7, #28]
 801903c:	2b00      	cmp	r3, #0
 801903e:	d008      	beq.n	8019052 <osThreadNew+0x6e>
 8019040:	69fb      	ldr	r3, [r7, #28]
 8019042:	2b38      	cmp	r3, #56	@ 0x38
 8019044:	d805      	bhi.n	8019052 <osThreadNew+0x6e>
 8019046:	687b      	ldr	r3, [r7, #4]
 8019048:	685b      	ldr	r3, [r3, #4]
 801904a:	f003 0301 	and.w	r3, r3, #1
 801904e:	2b00      	cmp	r3, #0
 8019050:	d001      	beq.n	8019056 <osThreadNew+0x72>
        return (NULL);
 8019052:	2300      	movs	r3, #0
 8019054:	e055      	b.n	8019102 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	695b      	ldr	r3, [r3, #20]
 801905a:	2b00      	cmp	r3, #0
 801905c:	d003      	beq.n	8019066 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801905e:	687b      	ldr	r3, [r7, #4]
 8019060:	695b      	ldr	r3, [r3, #20]
 8019062:	089b      	lsrs	r3, r3, #2
 8019064:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	689b      	ldr	r3, [r3, #8]
 801906a:	2b00      	cmp	r3, #0
 801906c:	d00f      	beq.n	801908e <osThreadNew+0xaa>
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	68db      	ldr	r3, [r3, #12]
 8019072:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8019076:	d30a      	bcc.n	801908e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8019078:	687b      	ldr	r3, [r7, #4]
 801907a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801907c:	2b00      	cmp	r3, #0
 801907e:	d006      	beq.n	801908e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	695b      	ldr	r3, [r3, #20]
 8019084:	2b00      	cmp	r3, #0
 8019086:	d002      	beq.n	801908e <osThreadNew+0xaa>
        mem = 1;
 8019088:	2301      	movs	r3, #1
 801908a:	61bb      	str	r3, [r7, #24]
 801908c:	e010      	b.n	80190b0 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801908e:	687b      	ldr	r3, [r7, #4]
 8019090:	689b      	ldr	r3, [r3, #8]
 8019092:	2b00      	cmp	r3, #0
 8019094:	d10c      	bne.n	80190b0 <osThreadNew+0xcc>
 8019096:	687b      	ldr	r3, [r7, #4]
 8019098:	68db      	ldr	r3, [r3, #12]
 801909a:	2b00      	cmp	r3, #0
 801909c:	d108      	bne.n	80190b0 <osThreadNew+0xcc>
 801909e:	687b      	ldr	r3, [r7, #4]
 80190a0:	691b      	ldr	r3, [r3, #16]
 80190a2:	2b00      	cmp	r3, #0
 80190a4:	d104      	bne.n	80190b0 <osThreadNew+0xcc>
          mem = 0;
 80190a6:	2300      	movs	r3, #0
 80190a8:	61bb      	str	r3, [r7, #24]
 80190aa:	e001      	b.n	80190b0 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 80190ac:	2300      	movs	r3, #0
 80190ae:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80190b0:	69bb      	ldr	r3, [r7, #24]
 80190b2:	2b01      	cmp	r3, #1
 80190b4:	d110      	bne.n	80190d8 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80190b6:	687b      	ldr	r3, [r7, #4]
 80190b8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80190ba:	687a      	ldr	r2, [r7, #4]
 80190bc:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80190be:	9202      	str	r2, [sp, #8]
 80190c0:	9301      	str	r3, [sp, #4]
 80190c2:	69fb      	ldr	r3, [r7, #28]
 80190c4:	9300      	str	r3, [sp, #0]
 80190c6:	68bb      	ldr	r3, [r7, #8]
 80190c8:	6a3a      	ldr	r2, [r7, #32]
 80190ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80190cc:	68f8      	ldr	r0, [r7, #12]
 80190ce:	f001 fc5b 	bl	801a988 <xTaskCreateStatic>
 80190d2:	4603      	mov	r3, r0
 80190d4:	613b      	str	r3, [r7, #16]
 80190d6:	e013      	b.n	8019100 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 80190d8:	69bb      	ldr	r3, [r7, #24]
 80190da:	2b00      	cmp	r3, #0
 80190dc:	d110      	bne.n	8019100 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80190de:	6a3b      	ldr	r3, [r7, #32]
 80190e0:	b29a      	uxth	r2, r3
 80190e2:	f107 0310 	add.w	r3, r7, #16
 80190e6:	9301      	str	r3, [sp, #4]
 80190e8:	69fb      	ldr	r3, [r7, #28]
 80190ea:	9300      	str	r3, [sp, #0]
 80190ec:	68bb      	ldr	r3, [r7, #8]
 80190ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80190f0:	68f8      	ldr	r0, [r7, #12]
 80190f2:	f001 fcab 	bl	801aa4c <xTaskCreate>
 80190f6:	4603      	mov	r3, r0
 80190f8:	2b01      	cmp	r3, #1
 80190fa:	d001      	beq.n	8019100 <osThreadNew+0x11c>
            hTask = NULL;
 80190fc:	2300      	movs	r3, #0
 80190fe:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8019100:	693b      	ldr	r3, [r7, #16]
}
 8019102:	4618      	mov	r0, r3
 8019104:	3728      	adds	r7, #40	@ 0x28
 8019106:	46bd      	mov	sp, r7
 8019108:	bd80      	pop	{r7, pc}

0801910a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801910a:	b580      	push	{r7, lr}
 801910c:	b084      	sub	sp, #16
 801910e:	af00      	add	r7, sp, #0
 8019110:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019112:	f3ef 8305 	mrs	r3, IPSR
 8019116:	60bb      	str	r3, [r7, #8]
  return(result);
 8019118:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801911a:	2b00      	cmp	r3, #0
 801911c:	d003      	beq.n	8019126 <osDelay+0x1c>
    stat = osErrorISR;
 801911e:	f06f 0305 	mvn.w	r3, #5
 8019122:	60fb      	str	r3, [r7, #12]
 8019124:	e007      	b.n	8019136 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8019126:	2300      	movs	r3, #0
 8019128:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	2b00      	cmp	r3, #0
 801912e:	d002      	beq.n	8019136 <osDelay+0x2c>
      vTaskDelay(ticks);
 8019130:	6878      	ldr	r0, [r7, #4]
 8019132:	f001 fe11 	bl	801ad58 <vTaskDelay>
    }
  }

  return (stat);
 8019136:	68fb      	ldr	r3, [r7, #12]
}
 8019138:	4618      	mov	r0, r3
 801913a:	3710      	adds	r7, #16
 801913c:	46bd      	mov	sp, r7
 801913e:	bd80      	pop	{r7, pc}

08019140 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8019140:	b580      	push	{r7, lr}
 8019142:	b088      	sub	sp, #32
 8019144:	af00      	add	r7, sp, #0
 8019146:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8019148:	2300      	movs	r3, #0
 801914a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801914c:	f3ef 8305 	mrs	r3, IPSR
 8019150:	60bb      	str	r3, [r7, #8]
  return(result);
 8019152:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8019154:	2b00      	cmp	r3, #0
 8019156:	d174      	bne.n	8019242 <osMutexNew+0x102>
    if (attr != NULL) {
 8019158:	687b      	ldr	r3, [r7, #4]
 801915a:	2b00      	cmp	r3, #0
 801915c:	d003      	beq.n	8019166 <osMutexNew+0x26>
      type = attr->attr_bits;
 801915e:	687b      	ldr	r3, [r7, #4]
 8019160:	685b      	ldr	r3, [r3, #4]
 8019162:	61bb      	str	r3, [r7, #24]
 8019164:	e001      	b.n	801916a <osMutexNew+0x2a>
    } else {
      type = 0U;
 8019166:	2300      	movs	r3, #0
 8019168:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 801916a:	69bb      	ldr	r3, [r7, #24]
 801916c:	f003 0301 	and.w	r3, r3, #1
 8019170:	2b00      	cmp	r3, #0
 8019172:	d002      	beq.n	801917a <osMutexNew+0x3a>
      rmtx = 1U;
 8019174:	2301      	movs	r3, #1
 8019176:	617b      	str	r3, [r7, #20]
 8019178:	e001      	b.n	801917e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 801917a:	2300      	movs	r3, #0
 801917c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 801917e:	69bb      	ldr	r3, [r7, #24]
 8019180:	f003 0308 	and.w	r3, r3, #8
 8019184:	2b00      	cmp	r3, #0
 8019186:	d15c      	bne.n	8019242 <osMutexNew+0x102>
      mem = -1;
 8019188:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801918c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 801918e:	687b      	ldr	r3, [r7, #4]
 8019190:	2b00      	cmp	r3, #0
 8019192:	d015      	beq.n	80191c0 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	689b      	ldr	r3, [r3, #8]
 8019198:	2b00      	cmp	r3, #0
 801919a:	d006      	beq.n	80191aa <osMutexNew+0x6a>
 801919c:	687b      	ldr	r3, [r7, #4]
 801919e:	68db      	ldr	r3, [r3, #12]
 80191a0:	2b4f      	cmp	r3, #79	@ 0x4f
 80191a2:	d902      	bls.n	80191aa <osMutexNew+0x6a>
          mem = 1;
 80191a4:	2301      	movs	r3, #1
 80191a6:	613b      	str	r3, [r7, #16]
 80191a8:	e00c      	b.n	80191c4 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80191aa:	687b      	ldr	r3, [r7, #4]
 80191ac:	689b      	ldr	r3, [r3, #8]
 80191ae:	2b00      	cmp	r3, #0
 80191b0:	d108      	bne.n	80191c4 <osMutexNew+0x84>
 80191b2:	687b      	ldr	r3, [r7, #4]
 80191b4:	68db      	ldr	r3, [r3, #12]
 80191b6:	2b00      	cmp	r3, #0
 80191b8:	d104      	bne.n	80191c4 <osMutexNew+0x84>
            mem = 0;
 80191ba:	2300      	movs	r3, #0
 80191bc:	613b      	str	r3, [r7, #16]
 80191be:	e001      	b.n	80191c4 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80191c0:	2300      	movs	r3, #0
 80191c2:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80191c4:	693b      	ldr	r3, [r7, #16]
 80191c6:	2b01      	cmp	r3, #1
 80191c8:	d112      	bne.n	80191f0 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80191ca:	697b      	ldr	r3, [r7, #20]
 80191cc:	2b00      	cmp	r3, #0
 80191ce:	d007      	beq.n	80191e0 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	689b      	ldr	r3, [r3, #8]
 80191d4:	4619      	mov	r1, r3
 80191d6:	2004      	movs	r0, #4
 80191d8:	f000 fc93 	bl	8019b02 <xQueueCreateMutexStatic>
 80191dc:	61f8      	str	r0, [r7, #28]
 80191de:	e016      	b.n	801920e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	689b      	ldr	r3, [r3, #8]
 80191e4:	4619      	mov	r1, r3
 80191e6:	2001      	movs	r0, #1
 80191e8:	f000 fc8b 	bl	8019b02 <xQueueCreateMutexStatic>
 80191ec:	61f8      	str	r0, [r7, #28]
 80191ee:	e00e      	b.n	801920e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80191f0:	693b      	ldr	r3, [r7, #16]
 80191f2:	2b00      	cmp	r3, #0
 80191f4:	d10b      	bne.n	801920e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80191f6:	697b      	ldr	r3, [r7, #20]
 80191f8:	2b00      	cmp	r3, #0
 80191fa:	d004      	beq.n	8019206 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80191fc:	2004      	movs	r0, #4
 80191fe:	f000 fc68 	bl	8019ad2 <xQueueCreateMutex>
 8019202:	61f8      	str	r0, [r7, #28]
 8019204:	e003      	b.n	801920e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8019206:	2001      	movs	r0, #1
 8019208:	f000 fc63 	bl	8019ad2 <xQueueCreateMutex>
 801920c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 801920e:	69fb      	ldr	r3, [r7, #28]
 8019210:	2b00      	cmp	r3, #0
 8019212:	d00c      	beq.n	801922e <osMutexNew+0xee>
        if (attr != NULL) {
 8019214:	687b      	ldr	r3, [r7, #4]
 8019216:	2b00      	cmp	r3, #0
 8019218:	d003      	beq.n	8019222 <osMutexNew+0xe2>
          name = attr->name;
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	681b      	ldr	r3, [r3, #0]
 801921e:	60fb      	str	r3, [r7, #12]
 8019220:	e001      	b.n	8019226 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8019222:	2300      	movs	r3, #0
 8019224:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8019226:	68f9      	ldr	r1, [r7, #12]
 8019228:	69f8      	ldr	r0, [r7, #28]
 801922a:	f001 fb4f 	bl	801a8cc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 801922e:	69fb      	ldr	r3, [r7, #28]
 8019230:	2b00      	cmp	r3, #0
 8019232:	d006      	beq.n	8019242 <osMutexNew+0x102>
 8019234:	697b      	ldr	r3, [r7, #20]
 8019236:	2b00      	cmp	r3, #0
 8019238:	d003      	beq.n	8019242 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 801923a:	69fb      	ldr	r3, [r7, #28]
 801923c:	f043 0301 	orr.w	r3, r3, #1
 8019240:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8019242:	69fb      	ldr	r3, [r7, #28]
}
 8019244:	4618      	mov	r0, r3
 8019246:	3720      	adds	r7, #32
 8019248:	46bd      	mov	sp, r7
 801924a:	bd80      	pop	{r7, pc}

0801924c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 801924c:	b580      	push	{r7, lr}
 801924e:	b086      	sub	sp, #24
 8019250:	af00      	add	r7, sp, #0
 8019252:	6078      	str	r0, [r7, #4]
 8019254:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8019256:	687b      	ldr	r3, [r7, #4]
 8019258:	f023 0301 	bic.w	r3, r3, #1
 801925c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 801925e:	687b      	ldr	r3, [r7, #4]
 8019260:	f003 0301 	and.w	r3, r3, #1
 8019264:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8019266:	2300      	movs	r3, #0
 8019268:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801926a:	f3ef 8305 	mrs	r3, IPSR
 801926e:	60bb      	str	r3, [r7, #8]
  return(result);
 8019270:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8019272:	2b00      	cmp	r3, #0
 8019274:	d003      	beq.n	801927e <osMutexAcquire+0x32>
    stat = osErrorISR;
 8019276:	f06f 0305 	mvn.w	r3, #5
 801927a:	617b      	str	r3, [r7, #20]
 801927c:	e02c      	b.n	80192d8 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 801927e:	693b      	ldr	r3, [r7, #16]
 8019280:	2b00      	cmp	r3, #0
 8019282:	d103      	bne.n	801928c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8019284:	f06f 0303 	mvn.w	r3, #3
 8019288:	617b      	str	r3, [r7, #20]
 801928a:	e025      	b.n	80192d8 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 801928c:	68fb      	ldr	r3, [r7, #12]
 801928e:	2b00      	cmp	r3, #0
 8019290:	d011      	beq.n	80192b6 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8019292:	6839      	ldr	r1, [r7, #0]
 8019294:	6938      	ldr	r0, [r7, #16]
 8019296:	f000 fc84 	bl	8019ba2 <xQueueTakeMutexRecursive>
 801929a:	4603      	mov	r3, r0
 801929c:	2b01      	cmp	r3, #1
 801929e:	d01b      	beq.n	80192d8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80192a0:	683b      	ldr	r3, [r7, #0]
 80192a2:	2b00      	cmp	r3, #0
 80192a4:	d003      	beq.n	80192ae <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80192a6:	f06f 0301 	mvn.w	r3, #1
 80192aa:	617b      	str	r3, [r7, #20]
 80192ac:	e014      	b.n	80192d8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80192ae:	f06f 0302 	mvn.w	r3, #2
 80192b2:	617b      	str	r3, [r7, #20]
 80192b4:	e010      	b.n	80192d8 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80192b6:	6839      	ldr	r1, [r7, #0]
 80192b8:	6938      	ldr	r0, [r7, #16]
 80192ba:	f000 ff2b 	bl	801a114 <xQueueSemaphoreTake>
 80192be:	4603      	mov	r3, r0
 80192c0:	2b01      	cmp	r3, #1
 80192c2:	d009      	beq.n	80192d8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80192c4:	683b      	ldr	r3, [r7, #0]
 80192c6:	2b00      	cmp	r3, #0
 80192c8:	d003      	beq.n	80192d2 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80192ca:	f06f 0301 	mvn.w	r3, #1
 80192ce:	617b      	str	r3, [r7, #20]
 80192d0:	e002      	b.n	80192d8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80192d2:	f06f 0302 	mvn.w	r3, #2
 80192d6:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80192d8:	697b      	ldr	r3, [r7, #20]
}
 80192da:	4618      	mov	r0, r3
 80192dc:	3718      	adds	r7, #24
 80192de:	46bd      	mov	sp, r7
 80192e0:	bd80      	pop	{r7, pc}

080192e2 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80192e2:	b580      	push	{r7, lr}
 80192e4:	b086      	sub	sp, #24
 80192e6:	af00      	add	r7, sp, #0
 80192e8:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	f023 0301 	bic.w	r3, r3, #1
 80192f0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80192f2:	687b      	ldr	r3, [r7, #4]
 80192f4:	f003 0301 	and.w	r3, r3, #1
 80192f8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80192fa:	2300      	movs	r3, #0
 80192fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80192fe:	f3ef 8305 	mrs	r3, IPSR
 8019302:	60bb      	str	r3, [r7, #8]
  return(result);
 8019304:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8019306:	2b00      	cmp	r3, #0
 8019308:	d003      	beq.n	8019312 <osMutexRelease+0x30>
    stat = osErrorISR;
 801930a:	f06f 0305 	mvn.w	r3, #5
 801930e:	617b      	str	r3, [r7, #20]
 8019310:	e01f      	b.n	8019352 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8019312:	693b      	ldr	r3, [r7, #16]
 8019314:	2b00      	cmp	r3, #0
 8019316:	d103      	bne.n	8019320 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8019318:	f06f 0303 	mvn.w	r3, #3
 801931c:	617b      	str	r3, [r7, #20]
 801931e:	e018      	b.n	8019352 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8019320:	68fb      	ldr	r3, [r7, #12]
 8019322:	2b00      	cmp	r3, #0
 8019324:	d009      	beq.n	801933a <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8019326:	6938      	ldr	r0, [r7, #16]
 8019328:	f000 fc06 	bl	8019b38 <xQueueGiveMutexRecursive>
 801932c:	4603      	mov	r3, r0
 801932e:	2b01      	cmp	r3, #1
 8019330:	d00f      	beq.n	8019352 <osMutexRelease+0x70>
        stat = osErrorResource;
 8019332:	f06f 0302 	mvn.w	r3, #2
 8019336:	617b      	str	r3, [r7, #20]
 8019338:	e00b      	b.n	8019352 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 801933a:	2300      	movs	r3, #0
 801933c:	2200      	movs	r2, #0
 801933e:	2100      	movs	r1, #0
 8019340:	6938      	ldr	r0, [r7, #16]
 8019342:	f000 fc65 	bl	8019c10 <xQueueGenericSend>
 8019346:	4603      	mov	r3, r0
 8019348:	2b01      	cmp	r3, #1
 801934a:	d002      	beq.n	8019352 <osMutexRelease+0x70>
        stat = osErrorResource;
 801934c:	f06f 0302 	mvn.w	r3, #2
 8019350:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8019352:	697b      	ldr	r3, [r7, #20]
}
 8019354:	4618      	mov	r0, r3
 8019356:	3718      	adds	r7, #24
 8019358:	46bd      	mov	sp, r7
 801935a:	bd80      	pop	{r7, pc}

0801935c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 801935c:	b580      	push	{r7, lr}
 801935e:	b08a      	sub	sp, #40	@ 0x28
 8019360:	af02      	add	r7, sp, #8
 8019362:	60f8      	str	r0, [r7, #12]
 8019364:	60b9      	str	r1, [r7, #8]
 8019366:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8019368:	2300      	movs	r3, #0
 801936a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801936c:	f3ef 8305 	mrs	r3, IPSR
 8019370:	613b      	str	r3, [r7, #16]
  return(result);
 8019372:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8019374:	2b00      	cmp	r3, #0
 8019376:	d15f      	bne.n	8019438 <osMessageQueueNew+0xdc>
 8019378:	68fb      	ldr	r3, [r7, #12]
 801937a:	2b00      	cmp	r3, #0
 801937c:	d05c      	beq.n	8019438 <osMessageQueueNew+0xdc>
 801937e:	68bb      	ldr	r3, [r7, #8]
 8019380:	2b00      	cmp	r3, #0
 8019382:	d059      	beq.n	8019438 <osMessageQueueNew+0xdc>
    mem = -1;
 8019384:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019388:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	2b00      	cmp	r3, #0
 801938e:	d029      	beq.n	80193e4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8019390:	687b      	ldr	r3, [r7, #4]
 8019392:	689b      	ldr	r3, [r3, #8]
 8019394:	2b00      	cmp	r3, #0
 8019396:	d012      	beq.n	80193be <osMessageQueueNew+0x62>
 8019398:	687b      	ldr	r3, [r7, #4]
 801939a:	68db      	ldr	r3, [r3, #12]
 801939c:	2b4f      	cmp	r3, #79	@ 0x4f
 801939e:	d90e      	bls.n	80193be <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80193a0:	687b      	ldr	r3, [r7, #4]
 80193a2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80193a4:	2b00      	cmp	r3, #0
 80193a6:	d00a      	beq.n	80193be <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80193a8:	687b      	ldr	r3, [r7, #4]
 80193aa:	695a      	ldr	r2, [r3, #20]
 80193ac:	68fb      	ldr	r3, [r7, #12]
 80193ae:	68b9      	ldr	r1, [r7, #8]
 80193b0:	fb01 f303 	mul.w	r3, r1, r3
 80193b4:	429a      	cmp	r2, r3
 80193b6:	d302      	bcc.n	80193be <osMessageQueueNew+0x62>
        mem = 1;
 80193b8:	2301      	movs	r3, #1
 80193ba:	61bb      	str	r3, [r7, #24]
 80193bc:	e014      	b.n	80193e8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80193be:	687b      	ldr	r3, [r7, #4]
 80193c0:	689b      	ldr	r3, [r3, #8]
 80193c2:	2b00      	cmp	r3, #0
 80193c4:	d110      	bne.n	80193e8 <osMessageQueueNew+0x8c>
 80193c6:	687b      	ldr	r3, [r7, #4]
 80193c8:	68db      	ldr	r3, [r3, #12]
 80193ca:	2b00      	cmp	r3, #0
 80193cc:	d10c      	bne.n	80193e8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80193ce:	687b      	ldr	r3, [r7, #4]
 80193d0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80193d2:	2b00      	cmp	r3, #0
 80193d4:	d108      	bne.n	80193e8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80193d6:	687b      	ldr	r3, [r7, #4]
 80193d8:	695b      	ldr	r3, [r3, #20]
 80193da:	2b00      	cmp	r3, #0
 80193dc:	d104      	bne.n	80193e8 <osMessageQueueNew+0x8c>
          mem = 0;
 80193de:	2300      	movs	r3, #0
 80193e0:	61bb      	str	r3, [r7, #24]
 80193e2:	e001      	b.n	80193e8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80193e4:	2300      	movs	r3, #0
 80193e6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80193e8:	69bb      	ldr	r3, [r7, #24]
 80193ea:	2b01      	cmp	r3, #1
 80193ec:	d10b      	bne.n	8019406 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80193ee:	687b      	ldr	r3, [r7, #4]
 80193f0:	691a      	ldr	r2, [r3, #16]
 80193f2:	687b      	ldr	r3, [r7, #4]
 80193f4:	689b      	ldr	r3, [r3, #8]
 80193f6:	2100      	movs	r1, #0
 80193f8:	9100      	str	r1, [sp, #0]
 80193fa:	68b9      	ldr	r1, [r7, #8]
 80193fc:	68f8      	ldr	r0, [r7, #12]
 80193fe:	f000 fa73 	bl	80198e8 <xQueueGenericCreateStatic>
 8019402:	61f8      	str	r0, [r7, #28]
 8019404:	e008      	b.n	8019418 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8019406:	69bb      	ldr	r3, [r7, #24]
 8019408:	2b00      	cmp	r3, #0
 801940a:	d105      	bne.n	8019418 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 801940c:	2200      	movs	r2, #0
 801940e:	68b9      	ldr	r1, [r7, #8]
 8019410:	68f8      	ldr	r0, [r7, #12]
 8019412:	f000 fae6 	bl	80199e2 <xQueueGenericCreate>
 8019416:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8019418:	69fb      	ldr	r3, [r7, #28]
 801941a:	2b00      	cmp	r3, #0
 801941c:	d00c      	beq.n	8019438 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 801941e:	687b      	ldr	r3, [r7, #4]
 8019420:	2b00      	cmp	r3, #0
 8019422:	d003      	beq.n	801942c <osMessageQueueNew+0xd0>
        name = attr->name;
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	681b      	ldr	r3, [r3, #0]
 8019428:	617b      	str	r3, [r7, #20]
 801942a:	e001      	b.n	8019430 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 801942c:	2300      	movs	r3, #0
 801942e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8019430:	6979      	ldr	r1, [r7, #20]
 8019432:	69f8      	ldr	r0, [r7, #28]
 8019434:	f001 fa4a 	bl	801a8cc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8019438:	69fb      	ldr	r3, [r7, #28]
}
 801943a:	4618      	mov	r0, r3
 801943c:	3720      	adds	r7, #32
 801943e:	46bd      	mov	sp, r7
 8019440:	bd80      	pop	{r7, pc}
	...

08019444 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8019444:	b580      	push	{r7, lr}
 8019446:	b088      	sub	sp, #32
 8019448:	af00      	add	r7, sp, #0
 801944a:	60f8      	str	r0, [r7, #12]
 801944c:	60b9      	str	r1, [r7, #8]
 801944e:	603b      	str	r3, [r7, #0]
 8019450:	4613      	mov	r3, r2
 8019452:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8019454:	68fb      	ldr	r3, [r7, #12]
 8019456:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8019458:	2300      	movs	r3, #0
 801945a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801945c:	f3ef 8305 	mrs	r3, IPSR
 8019460:	617b      	str	r3, [r7, #20]
  return(result);
 8019462:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8019464:	2b00      	cmp	r3, #0
 8019466:	d028      	beq.n	80194ba <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8019468:	69bb      	ldr	r3, [r7, #24]
 801946a:	2b00      	cmp	r3, #0
 801946c:	d005      	beq.n	801947a <osMessageQueuePut+0x36>
 801946e:	68bb      	ldr	r3, [r7, #8]
 8019470:	2b00      	cmp	r3, #0
 8019472:	d002      	beq.n	801947a <osMessageQueuePut+0x36>
 8019474:	683b      	ldr	r3, [r7, #0]
 8019476:	2b00      	cmp	r3, #0
 8019478:	d003      	beq.n	8019482 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 801947a:	f06f 0303 	mvn.w	r3, #3
 801947e:	61fb      	str	r3, [r7, #28]
 8019480:	e038      	b.n	80194f4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8019482:	2300      	movs	r3, #0
 8019484:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8019486:	f107 0210 	add.w	r2, r7, #16
 801948a:	2300      	movs	r3, #0
 801948c:	68b9      	ldr	r1, [r7, #8]
 801948e:	69b8      	ldr	r0, [r7, #24]
 8019490:	f000 fcc0 	bl	8019e14 <xQueueGenericSendFromISR>
 8019494:	4603      	mov	r3, r0
 8019496:	2b01      	cmp	r3, #1
 8019498:	d003      	beq.n	80194a2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 801949a:	f06f 0302 	mvn.w	r3, #2
 801949e:	61fb      	str	r3, [r7, #28]
 80194a0:	e028      	b.n	80194f4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80194a2:	693b      	ldr	r3, [r7, #16]
 80194a4:	2b00      	cmp	r3, #0
 80194a6:	d025      	beq.n	80194f4 <osMessageQueuePut+0xb0>
 80194a8:	4b15      	ldr	r3, [pc, #84]	@ (8019500 <osMessageQueuePut+0xbc>)
 80194aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80194ae:	601a      	str	r2, [r3, #0]
 80194b0:	f3bf 8f4f 	dsb	sy
 80194b4:	f3bf 8f6f 	isb	sy
 80194b8:	e01c      	b.n	80194f4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80194ba:	69bb      	ldr	r3, [r7, #24]
 80194bc:	2b00      	cmp	r3, #0
 80194be:	d002      	beq.n	80194c6 <osMessageQueuePut+0x82>
 80194c0:	68bb      	ldr	r3, [r7, #8]
 80194c2:	2b00      	cmp	r3, #0
 80194c4:	d103      	bne.n	80194ce <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80194c6:	f06f 0303 	mvn.w	r3, #3
 80194ca:	61fb      	str	r3, [r7, #28]
 80194cc:	e012      	b.n	80194f4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80194ce:	2300      	movs	r3, #0
 80194d0:	683a      	ldr	r2, [r7, #0]
 80194d2:	68b9      	ldr	r1, [r7, #8]
 80194d4:	69b8      	ldr	r0, [r7, #24]
 80194d6:	f000 fb9b 	bl	8019c10 <xQueueGenericSend>
 80194da:	4603      	mov	r3, r0
 80194dc:	2b01      	cmp	r3, #1
 80194de:	d009      	beq.n	80194f4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80194e0:	683b      	ldr	r3, [r7, #0]
 80194e2:	2b00      	cmp	r3, #0
 80194e4:	d003      	beq.n	80194ee <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80194e6:	f06f 0301 	mvn.w	r3, #1
 80194ea:	61fb      	str	r3, [r7, #28]
 80194ec:	e002      	b.n	80194f4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80194ee:	f06f 0302 	mvn.w	r3, #2
 80194f2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80194f4:	69fb      	ldr	r3, [r7, #28]
}
 80194f6:	4618      	mov	r0, r3
 80194f8:	3720      	adds	r7, #32
 80194fa:	46bd      	mov	sp, r7
 80194fc:	bd80      	pop	{r7, pc}
 80194fe:	bf00      	nop
 8019500:	e000ed04 	.word	0xe000ed04

08019504 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8019504:	b580      	push	{r7, lr}
 8019506:	b088      	sub	sp, #32
 8019508:	af00      	add	r7, sp, #0
 801950a:	60f8      	str	r0, [r7, #12]
 801950c:	60b9      	str	r1, [r7, #8]
 801950e:	607a      	str	r2, [r7, #4]
 8019510:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8019512:	68fb      	ldr	r3, [r7, #12]
 8019514:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8019516:	2300      	movs	r3, #0
 8019518:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801951a:	f3ef 8305 	mrs	r3, IPSR
 801951e:	617b      	str	r3, [r7, #20]
  return(result);
 8019520:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8019522:	2b00      	cmp	r3, #0
 8019524:	d028      	beq.n	8019578 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8019526:	69bb      	ldr	r3, [r7, #24]
 8019528:	2b00      	cmp	r3, #0
 801952a:	d005      	beq.n	8019538 <osMessageQueueGet+0x34>
 801952c:	68bb      	ldr	r3, [r7, #8]
 801952e:	2b00      	cmp	r3, #0
 8019530:	d002      	beq.n	8019538 <osMessageQueueGet+0x34>
 8019532:	683b      	ldr	r3, [r7, #0]
 8019534:	2b00      	cmp	r3, #0
 8019536:	d003      	beq.n	8019540 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8019538:	f06f 0303 	mvn.w	r3, #3
 801953c:	61fb      	str	r3, [r7, #28]
 801953e:	e037      	b.n	80195b0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8019540:	2300      	movs	r3, #0
 8019542:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8019544:	f107 0310 	add.w	r3, r7, #16
 8019548:	461a      	mov	r2, r3
 801954a:	68b9      	ldr	r1, [r7, #8]
 801954c:	69b8      	ldr	r0, [r7, #24]
 801954e:	f000 ffd5 	bl	801a4fc <xQueueReceiveFromISR>
 8019552:	4603      	mov	r3, r0
 8019554:	2b01      	cmp	r3, #1
 8019556:	d003      	beq.n	8019560 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8019558:	f06f 0302 	mvn.w	r3, #2
 801955c:	61fb      	str	r3, [r7, #28]
 801955e:	e027      	b.n	80195b0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8019560:	693b      	ldr	r3, [r7, #16]
 8019562:	2b00      	cmp	r3, #0
 8019564:	d024      	beq.n	80195b0 <osMessageQueueGet+0xac>
 8019566:	4b15      	ldr	r3, [pc, #84]	@ (80195bc <osMessageQueueGet+0xb8>)
 8019568:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801956c:	601a      	str	r2, [r3, #0]
 801956e:	f3bf 8f4f 	dsb	sy
 8019572:	f3bf 8f6f 	isb	sy
 8019576:	e01b      	b.n	80195b0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8019578:	69bb      	ldr	r3, [r7, #24]
 801957a:	2b00      	cmp	r3, #0
 801957c:	d002      	beq.n	8019584 <osMessageQueueGet+0x80>
 801957e:	68bb      	ldr	r3, [r7, #8]
 8019580:	2b00      	cmp	r3, #0
 8019582:	d103      	bne.n	801958c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8019584:	f06f 0303 	mvn.w	r3, #3
 8019588:	61fb      	str	r3, [r7, #28]
 801958a:	e011      	b.n	80195b0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801958c:	683a      	ldr	r2, [r7, #0]
 801958e:	68b9      	ldr	r1, [r7, #8]
 8019590:	69b8      	ldr	r0, [r7, #24]
 8019592:	f000 fcdd 	bl	8019f50 <xQueueReceive>
 8019596:	4603      	mov	r3, r0
 8019598:	2b01      	cmp	r3, #1
 801959a:	d009      	beq.n	80195b0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 801959c:	683b      	ldr	r3, [r7, #0]
 801959e:	2b00      	cmp	r3, #0
 80195a0:	d003      	beq.n	80195aa <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80195a2:	f06f 0301 	mvn.w	r3, #1
 80195a6:	61fb      	str	r3, [r7, #28]
 80195a8:	e002      	b.n	80195b0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80195aa:	f06f 0302 	mvn.w	r3, #2
 80195ae:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80195b0:	69fb      	ldr	r3, [r7, #28]
}
 80195b2:	4618      	mov	r0, r3
 80195b4:	3720      	adds	r7, #32
 80195b6:	46bd      	mov	sp, r7
 80195b8:	bd80      	pop	{r7, pc}
 80195ba:	bf00      	nop
 80195bc:	e000ed04 	.word	0xe000ed04

080195c0 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80195c0:	b580      	push	{r7, lr}
 80195c2:	b086      	sub	sp, #24
 80195c4:	af00      	add	r7, sp, #0
 80195c6:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80195c8:	687b      	ldr	r3, [r7, #4]
 80195ca:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 80195cc:	693b      	ldr	r3, [r7, #16]
 80195ce:	2b00      	cmp	r3, #0
 80195d0:	d102      	bne.n	80195d8 <osMessageQueueGetCount+0x18>
    count = 0U;
 80195d2:	2300      	movs	r3, #0
 80195d4:	617b      	str	r3, [r7, #20]
 80195d6:	e00e      	b.n	80195f6 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80195d8:	f3ef 8305 	mrs	r3, IPSR
 80195dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80195de:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80195e0:	2b00      	cmp	r3, #0
 80195e2:	d004      	beq.n	80195ee <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80195e4:	6938      	ldr	r0, [r7, #16]
 80195e6:	f001 f82a 	bl	801a63e <uxQueueMessagesWaitingFromISR>
 80195ea:	6178      	str	r0, [r7, #20]
 80195ec:	e003      	b.n	80195f6 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80195ee:	6938      	ldr	r0, [r7, #16]
 80195f0:	f001 f806 	bl	801a600 <uxQueueMessagesWaiting>
 80195f4:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 80195f6:	697b      	ldr	r3, [r7, #20]
}
 80195f8:	4618      	mov	r0, r3
 80195fa:	3718      	adds	r7, #24
 80195fc:	46bd      	mov	sp, r7
 80195fe:	bd80      	pop	{r7, pc}

08019600 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 8019600:	b580      	push	{r7, lr}
 8019602:	b086      	sub	sp, #24
 8019604:	af00      	add	r7, sp, #0
 8019606:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8019608:	687b      	ldr	r3, [r7, #4]
 801960a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801960c:	f3ef 8305 	mrs	r3, IPSR
 8019610:	60fb      	str	r3, [r7, #12]
  return(result);
 8019612:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8019614:	2b00      	cmp	r3, #0
 8019616:	d003      	beq.n	8019620 <osMessageQueueReset+0x20>
    stat = osErrorISR;
 8019618:	f06f 0305 	mvn.w	r3, #5
 801961c:	617b      	str	r3, [r7, #20]
 801961e:	e00c      	b.n	801963a <osMessageQueueReset+0x3a>
  }
  else if (hQueue == NULL) {
 8019620:	693b      	ldr	r3, [r7, #16]
 8019622:	2b00      	cmp	r3, #0
 8019624:	d103      	bne.n	801962e <osMessageQueueReset+0x2e>
    stat = osErrorParameter;
 8019626:	f06f 0303 	mvn.w	r3, #3
 801962a:	617b      	str	r3, [r7, #20]
 801962c:	e005      	b.n	801963a <osMessageQueueReset+0x3a>
  }
  else {
    stat = osOK;
 801962e:	2300      	movs	r3, #0
 8019630:	617b      	str	r3, [r7, #20]
    (void)xQueueReset (hQueue);
 8019632:	2100      	movs	r1, #0
 8019634:	6938      	ldr	r0, [r7, #16]
 8019636:	f000 f8ed 	bl	8019814 <xQueueGenericReset>
  }

  return (stat);
 801963a:	697b      	ldr	r3, [r7, #20]
}
 801963c:	4618      	mov	r0, r3
 801963e:	3718      	adds	r7, #24
 8019640:	46bd      	mov	sp, r7
 8019642:	bd80      	pop	{r7, pc}

08019644 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8019644:	b480      	push	{r7}
 8019646:	b085      	sub	sp, #20
 8019648:	af00      	add	r7, sp, #0
 801964a:	60f8      	str	r0, [r7, #12]
 801964c:	60b9      	str	r1, [r7, #8]
 801964e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8019650:	68fb      	ldr	r3, [r7, #12]
 8019652:	4a07      	ldr	r2, [pc, #28]	@ (8019670 <vApplicationGetIdleTaskMemory+0x2c>)
 8019654:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8019656:	68bb      	ldr	r3, [r7, #8]
 8019658:	4a06      	ldr	r2, [pc, #24]	@ (8019674 <vApplicationGetIdleTaskMemory+0x30>)
 801965a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801965c:	687b      	ldr	r3, [r7, #4]
 801965e:	2280      	movs	r2, #128	@ 0x80
 8019660:	601a      	str	r2, [r3, #0]
}
 8019662:	bf00      	nop
 8019664:	3714      	adds	r7, #20
 8019666:	46bd      	mov	sp, r7
 8019668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801966c:	4770      	bx	lr
 801966e:	bf00      	nop
 8019670:	20001000 	.word	0x20001000
 8019674:	20001180 	.word	0x20001180

08019678 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8019678:	b480      	push	{r7}
 801967a:	b085      	sub	sp, #20
 801967c:	af00      	add	r7, sp, #0
 801967e:	60f8      	str	r0, [r7, #12]
 8019680:	60b9      	str	r1, [r7, #8]
 8019682:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8019684:	68fb      	ldr	r3, [r7, #12]
 8019686:	4a07      	ldr	r2, [pc, #28]	@ (80196a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8019688:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801968a:	68bb      	ldr	r3, [r7, #8]
 801968c:	4a06      	ldr	r2, [pc, #24]	@ (80196a8 <vApplicationGetTimerTaskMemory+0x30>)
 801968e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8019690:	687b      	ldr	r3, [r7, #4]
 8019692:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8019696:	601a      	str	r2, [r3, #0]
}
 8019698:	bf00      	nop
 801969a:	3714      	adds	r7, #20
 801969c:	46bd      	mov	sp, r7
 801969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196a2:	4770      	bx	lr
 80196a4:	20001380 	.word	0x20001380
 80196a8:	20001500 	.word	0x20001500

080196ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80196ac:	b480      	push	{r7}
 80196ae:	b083      	sub	sp, #12
 80196b0:	af00      	add	r7, sp, #0
 80196b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80196b4:	687b      	ldr	r3, [r7, #4]
 80196b6:	f103 0208 	add.w	r2, r3, #8
 80196ba:	687b      	ldr	r3, [r7, #4]
 80196bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80196be:	687b      	ldr	r3, [r7, #4]
 80196c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80196c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80196c6:	687b      	ldr	r3, [r7, #4]
 80196c8:	f103 0208 	add.w	r2, r3, #8
 80196cc:	687b      	ldr	r3, [r7, #4]
 80196ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80196d0:	687b      	ldr	r3, [r7, #4]
 80196d2:	f103 0208 	add.w	r2, r3, #8
 80196d6:	687b      	ldr	r3, [r7, #4]
 80196d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80196da:	687b      	ldr	r3, [r7, #4]
 80196dc:	2200      	movs	r2, #0
 80196de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80196e0:	bf00      	nop
 80196e2:	370c      	adds	r7, #12
 80196e4:	46bd      	mov	sp, r7
 80196e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196ea:	4770      	bx	lr

080196ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80196ec:	b480      	push	{r7}
 80196ee:	b083      	sub	sp, #12
 80196f0:	af00      	add	r7, sp, #0
 80196f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80196f4:	687b      	ldr	r3, [r7, #4]
 80196f6:	2200      	movs	r2, #0
 80196f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80196fa:	bf00      	nop
 80196fc:	370c      	adds	r7, #12
 80196fe:	46bd      	mov	sp, r7
 8019700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019704:	4770      	bx	lr

08019706 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8019706:	b480      	push	{r7}
 8019708:	b085      	sub	sp, #20
 801970a:	af00      	add	r7, sp, #0
 801970c:	6078      	str	r0, [r7, #4]
 801970e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8019710:	687b      	ldr	r3, [r7, #4]
 8019712:	685b      	ldr	r3, [r3, #4]
 8019714:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8019716:	683b      	ldr	r3, [r7, #0]
 8019718:	68fa      	ldr	r2, [r7, #12]
 801971a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801971c:	68fb      	ldr	r3, [r7, #12]
 801971e:	689a      	ldr	r2, [r3, #8]
 8019720:	683b      	ldr	r3, [r7, #0]
 8019722:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8019724:	68fb      	ldr	r3, [r7, #12]
 8019726:	689b      	ldr	r3, [r3, #8]
 8019728:	683a      	ldr	r2, [r7, #0]
 801972a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801972c:	68fb      	ldr	r3, [r7, #12]
 801972e:	683a      	ldr	r2, [r7, #0]
 8019730:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8019732:	683b      	ldr	r3, [r7, #0]
 8019734:	687a      	ldr	r2, [r7, #4]
 8019736:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8019738:	687b      	ldr	r3, [r7, #4]
 801973a:	681b      	ldr	r3, [r3, #0]
 801973c:	1c5a      	adds	r2, r3, #1
 801973e:	687b      	ldr	r3, [r7, #4]
 8019740:	601a      	str	r2, [r3, #0]
}
 8019742:	bf00      	nop
 8019744:	3714      	adds	r7, #20
 8019746:	46bd      	mov	sp, r7
 8019748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801974c:	4770      	bx	lr

0801974e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801974e:	b480      	push	{r7}
 8019750:	b085      	sub	sp, #20
 8019752:	af00      	add	r7, sp, #0
 8019754:	6078      	str	r0, [r7, #4]
 8019756:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8019758:	683b      	ldr	r3, [r7, #0]
 801975a:	681b      	ldr	r3, [r3, #0]
 801975c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801975e:	68bb      	ldr	r3, [r7, #8]
 8019760:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019764:	d103      	bne.n	801976e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8019766:	687b      	ldr	r3, [r7, #4]
 8019768:	691b      	ldr	r3, [r3, #16]
 801976a:	60fb      	str	r3, [r7, #12]
 801976c:	e00c      	b.n	8019788 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801976e:	687b      	ldr	r3, [r7, #4]
 8019770:	3308      	adds	r3, #8
 8019772:	60fb      	str	r3, [r7, #12]
 8019774:	e002      	b.n	801977c <vListInsert+0x2e>
 8019776:	68fb      	ldr	r3, [r7, #12]
 8019778:	685b      	ldr	r3, [r3, #4]
 801977a:	60fb      	str	r3, [r7, #12]
 801977c:	68fb      	ldr	r3, [r7, #12]
 801977e:	685b      	ldr	r3, [r3, #4]
 8019780:	681b      	ldr	r3, [r3, #0]
 8019782:	68ba      	ldr	r2, [r7, #8]
 8019784:	429a      	cmp	r2, r3
 8019786:	d2f6      	bcs.n	8019776 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8019788:	68fb      	ldr	r3, [r7, #12]
 801978a:	685a      	ldr	r2, [r3, #4]
 801978c:	683b      	ldr	r3, [r7, #0]
 801978e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8019790:	683b      	ldr	r3, [r7, #0]
 8019792:	685b      	ldr	r3, [r3, #4]
 8019794:	683a      	ldr	r2, [r7, #0]
 8019796:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8019798:	683b      	ldr	r3, [r7, #0]
 801979a:	68fa      	ldr	r2, [r7, #12]
 801979c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801979e:	68fb      	ldr	r3, [r7, #12]
 80197a0:	683a      	ldr	r2, [r7, #0]
 80197a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80197a4:	683b      	ldr	r3, [r7, #0]
 80197a6:	687a      	ldr	r2, [r7, #4]
 80197a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80197aa:	687b      	ldr	r3, [r7, #4]
 80197ac:	681b      	ldr	r3, [r3, #0]
 80197ae:	1c5a      	adds	r2, r3, #1
 80197b0:	687b      	ldr	r3, [r7, #4]
 80197b2:	601a      	str	r2, [r3, #0]
}
 80197b4:	bf00      	nop
 80197b6:	3714      	adds	r7, #20
 80197b8:	46bd      	mov	sp, r7
 80197ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197be:	4770      	bx	lr

080197c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80197c0:	b480      	push	{r7}
 80197c2:	b085      	sub	sp, #20
 80197c4:	af00      	add	r7, sp, #0
 80197c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80197c8:	687b      	ldr	r3, [r7, #4]
 80197ca:	691b      	ldr	r3, [r3, #16]
 80197cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80197ce:	687b      	ldr	r3, [r7, #4]
 80197d0:	685b      	ldr	r3, [r3, #4]
 80197d2:	687a      	ldr	r2, [r7, #4]
 80197d4:	6892      	ldr	r2, [r2, #8]
 80197d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80197d8:	687b      	ldr	r3, [r7, #4]
 80197da:	689b      	ldr	r3, [r3, #8]
 80197dc:	687a      	ldr	r2, [r7, #4]
 80197de:	6852      	ldr	r2, [r2, #4]
 80197e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80197e2:	68fb      	ldr	r3, [r7, #12]
 80197e4:	685b      	ldr	r3, [r3, #4]
 80197e6:	687a      	ldr	r2, [r7, #4]
 80197e8:	429a      	cmp	r2, r3
 80197ea:	d103      	bne.n	80197f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80197ec:	687b      	ldr	r3, [r7, #4]
 80197ee:	689a      	ldr	r2, [r3, #8]
 80197f0:	68fb      	ldr	r3, [r7, #12]
 80197f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80197f4:	687b      	ldr	r3, [r7, #4]
 80197f6:	2200      	movs	r2, #0
 80197f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80197fa:	68fb      	ldr	r3, [r7, #12]
 80197fc:	681b      	ldr	r3, [r3, #0]
 80197fe:	1e5a      	subs	r2, r3, #1
 8019800:	68fb      	ldr	r3, [r7, #12]
 8019802:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8019804:	68fb      	ldr	r3, [r7, #12]
 8019806:	681b      	ldr	r3, [r3, #0]
}
 8019808:	4618      	mov	r0, r3
 801980a:	3714      	adds	r7, #20
 801980c:	46bd      	mov	sp, r7
 801980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019812:	4770      	bx	lr

08019814 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8019814:	b580      	push	{r7, lr}
 8019816:	b084      	sub	sp, #16
 8019818:	af00      	add	r7, sp, #0
 801981a:	6078      	str	r0, [r7, #4]
 801981c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8019822:	68fb      	ldr	r3, [r7, #12]
 8019824:	2b00      	cmp	r3, #0
 8019826:	d10b      	bne.n	8019840 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8019828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801982c:	f383 8811 	msr	BASEPRI, r3
 8019830:	f3bf 8f6f 	isb	sy
 8019834:	f3bf 8f4f 	dsb	sy
 8019838:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801983a:	bf00      	nop
 801983c:	bf00      	nop
 801983e:	e7fd      	b.n	801983c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8019840:	f002 fda2 	bl	801c388 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8019844:	68fb      	ldr	r3, [r7, #12]
 8019846:	681a      	ldr	r2, [r3, #0]
 8019848:	68fb      	ldr	r3, [r7, #12]
 801984a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801984c:	68f9      	ldr	r1, [r7, #12]
 801984e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8019850:	fb01 f303 	mul.w	r3, r1, r3
 8019854:	441a      	add	r2, r3
 8019856:	68fb      	ldr	r3, [r7, #12]
 8019858:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801985a:	68fb      	ldr	r3, [r7, #12]
 801985c:	2200      	movs	r2, #0
 801985e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8019860:	68fb      	ldr	r3, [r7, #12]
 8019862:	681a      	ldr	r2, [r3, #0]
 8019864:	68fb      	ldr	r3, [r7, #12]
 8019866:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8019868:	68fb      	ldr	r3, [r7, #12]
 801986a:	681a      	ldr	r2, [r3, #0]
 801986c:	68fb      	ldr	r3, [r7, #12]
 801986e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019870:	3b01      	subs	r3, #1
 8019872:	68f9      	ldr	r1, [r7, #12]
 8019874:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8019876:	fb01 f303 	mul.w	r3, r1, r3
 801987a:	441a      	add	r2, r3
 801987c:	68fb      	ldr	r3, [r7, #12]
 801987e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8019880:	68fb      	ldr	r3, [r7, #12]
 8019882:	22ff      	movs	r2, #255	@ 0xff
 8019884:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8019888:	68fb      	ldr	r3, [r7, #12]
 801988a:	22ff      	movs	r2, #255	@ 0xff
 801988c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8019890:	683b      	ldr	r3, [r7, #0]
 8019892:	2b00      	cmp	r3, #0
 8019894:	d114      	bne.n	80198c0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019896:	68fb      	ldr	r3, [r7, #12]
 8019898:	691b      	ldr	r3, [r3, #16]
 801989a:	2b00      	cmp	r3, #0
 801989c:	d01a      	beq.n	80198d4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801989e:	68fb      	ldr	r3, [r7, #12]
 80198a0:	3310      	adds	r3, #16
 80198a2:	4618      	mov	r0, r3
 80198a4:	f001 fd2c 	bl	801b300 <xTaskRemoveFromEventList>
 80198a8:	4603      	mov	r3, r0
 80198aa:	2b00      	cmp	r3, #0
 80198ac:	d012      	beq.n	80198d4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80198ae:	4b0d      	ldr	r3, [pc, #52]	@ (80198e4 <xQueueGenericReset+0xd0>)
 80198b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80198b4:	601a      	str	r2, [r3, #0]
 80198b6:	f3bf 8f4f 	dsb	sy
 80198ba:	f3bf 8f6f 	isb	sy
 80198be:	e009      	b.n	80198d4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80198c0:	68fb      	ldr	r3, [r7, #12]
 80198c2:	3310      	adds	r3, #16
 80198c4:	4618      	mov	r0, r3
 80198c6:	f7ff fef1 	bl	80196ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80198ca:	68fb      	ldr	r3, [r7, #12]
 80198cc:	3324      	adds	r3, #36	@ 0x24
 80198ce:	4618      	mov	r0, r3
 80198d0:	f7ff feec 	bl	80196ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80198d4:	f002 fd8a 	bl	801c3ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80198d8:	2301      	movs	r3, #1
}
 80198da:	4618      	mov	r0, r3
 80198dc:	3710      	adds	r7, #16
 80198de:	46bd      	mov	sp, r7
 80198e0:	bd80      	pop	{r7, pc}
 80198e2:	bf00      	nop
 80198e4:	e000ed04 	.word	0xe000ed04

080198e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80198e8:	b580      	push	{r7, lr}
 80198ea:	b08e      	sub	sp, #56	@ 0x38
 80198ec:	af02      	add	r7, sp, #8
 80198ee:	60f8      	str	r0, [r7, #12]
 80198f0:	60b9      	str	r1, [r7, #8]
 80198f2:	607a      	str	r2, [r7, #4]
 80198f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80198f6:	68fb      	ldr	r3, [r7, #12]
 80198f8:	2b00      	cmp	r3, #0
 80198fa:	d10b      	bne.n	8019914 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80198fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019900:	f383 8811 	msr	BASEPRI, r3
 8019904:	f3bf 8f6f 	isb	sy
 8019908:	f3bf 8f4f 	dsb	sy
 801990c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801990e:	bf00      	nop
 8019910:	bf00      	nop
 8019912:	e7fd      	b.n	8019910 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8019914:	683b      	ldr	r3, [r7, #0]
 8019916:	2b00      	cmp	r3, #0
 8019918:	d10b      	bne.n	8019932 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 801991a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801991e:	f383 8811 	msr	BASEPRI, r3
 8019922:	f3bf 8f6f 	isb	sy
 8019926:	f3bf 8f4f 	dsb	sy
 801992a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801992c:	bf00      	nop
 801992e:	bf00      	nop
 8019930:	e7fd      	b.n	801992e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8019932:	687b      	ldr	r3, [r7, #4]
 8019934:	2b00      	cmp	r3, #0
 8019936:	d002      	beq.n	801993e <xQueueGenericCreateStatic+0x56>
 8019938:	68bb      	ldr	r3, [r7, #8]
 801993a:	2b00      	cmp	r3, #0
 801993c:	d001      	beq.n	8019942 <xQueueGenericCreateStatic+0x5a>
 801993e:	2301      	movs	r3, #1
 8019940:	e000      	b.n	8019944 <xQueueGenericCreateStatic+0x5c>
 8019942:	2300      	movs	r3, #0
 8019944:	2b00      	cmp	r3, #0
 8019946:	d10b      	bne.n	8019960 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8019948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801994c:	f383 8811 	msr	BASEPRI, r3
 8019950:	f3bf 8f6f 	isb	sy
 8019954:	f3bf 8f4f 	dsb	sy
 8019958:	623b      	str	r3, [r7, #32]
}
 801995a:	bf00      	nop
 801995c:	bf00      	nop
 801995e:	e7fd      	b.n	801995c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8019960:	687b      	ldr	r3, [r7, #4]
 8019962:	2b00      	cmp	r3, #0
 8019964:	d102      	bne.n	801996c <xQueueGenericCreateStatic+0x84>
 8019966:	68bb      	ldr	r3, [r7, #8]
 8019968:	2b00      	cmp	r3, #0
 801996a:	d101      	bne.n	8019970 <xQueueGenericCreateStatic+0x88>
 801996c:	2301      	movs	r3, #1
 801996e:	e000      	b.n	8019972 <xQueueGenericCreateStatic+0x8a>
 8019970:	2300      	movs	r3, #0
 8019972:	2b00      	cmp	r3, #0
 8019974:	d10b      	bne.n	801998e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8019976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801997a:	f383 8811 	msr	BASEPRI, r3
 801997e:	f3bf 8f6f 	isb	sy
 8019982:	f3bf 8f4f 	dsb	sy
 8019986:	61fb      	str	r3, [r7, #28]
}
 8019988:	bf00      	nop
 801998a:	bf00      	nop
 801998c:	e7fd      	b.n	801998a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801998e:	2350      	movs	r3, #80	@ 0x50
 8019990:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8019992:	697b      	ldr	r3, [r7, #20]
 8019994:	2b50      	cmp	r3, #80	@ 0x50
 8019996:	d00b      	beq.n	80199b0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8019998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801999c:	f383 8811 	msr	BASEPRI, r3
 80199a0:	f3bf 8f6f 	isb	sy
 80199a4:	f3bf 8f4f 	dsb	sy
 80199a8:	61bb      	str	r3, [r7, #24]
}
 80199aa:	bf00      	nop
 80199ac:	bf00      	nop
 80199ae:	e7fd      	b.n	80199ac <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80199b0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80199b2:	683b      	ldr	r3, [r7, #0]
 80199b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80199b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80199b8:	2b00      	cmp	r3, #0
 80199ba:	d00d      	beq.n	80199d8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80199bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80199be:	2201      	movs	r2, #1
 80199c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80199c4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80199c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80199ca:	9300      	str	r3, [sp, #0]
 80199cc:	4613      	mov	r3, r2
 80199ce:	687a      	ldr	r2, [r7, #4]
 80199d0:	68b9      	ldr	r1, [r7, #8]
 80199d2:	68f8      	ldr	r0, [r7, #12]
 80199d4:	f000 f840 	bl	8019a58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80199d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80199da:	4618      	mov	r0, r3
 80199dc:	3730      	adds	r7, #48	@ 0x30
 80199de:	46bd      	mov	sp, r7
 80199e0:	bd80      	pop	{r7, pc}

080199e2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80199e2:	b580      	push	{r7, lr}
 80199e4:	b08a      	sub	sp, #40	@ 0x28
 80199e6:	af02      	add	r7, sp, #8
 80199e8:	60f8      	str	r0, [r7, #12]
 80199ea:	60b9      	str	r1, [r7, #8]
 80199ec:	4613      	mov	r3, r2
 80199ee:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80199f0:	68fb      	ldr	r3, [r7, #12]
 80199f2:	2b00      	cmp	r3, #0
 80199f4:	d10b      	bne.n	8019a0e <xQueueGenericCreate+0x2c>
	__asm volatile
 80199f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80199fa:	f383 8811 	msr	BASEPRI, r3
 80199fe:	f3bf 8f6f 	isb	sy
 8019a02:	f3bf 8f4f 	dsb	sy
 8019a06:	613b      	str	r3, [r7, #16]
}
 8019a08:	bf00      	nop
 8019a0a:	bf00      	nop
 8019a0c:	e7fd      	b.n	8019a0a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019a0e:	68fb      	ldr	r3, [r7, #12]
 8019a10:	68ba      	ldr	r2, [r7, #8]
 8019a12:	fb02 f303 	mul.w	r3, r2, r3
 8019a16:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8019a18:	69fb      	ldr	r3, [r7, #28]
 8019a1a:	3350      	adds	r3, #80	@ 0x50
 8019a1c:	4618      	mov	r0, r3
 8019a1e:	f002 fdd5 	bl	801c5cc <pvPortMalloc>
 8019a22:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8019a24:	69bb      	ldr	r3, [r7, #24]
 8019a26:	2b00      	cmp	r3, #0
 8019a28:	d011      	beq.n	8019a4e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8019a2a:	69bb      	ldr	r3, [r7, #24]
 8019a2c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8019a2e:	697b      	ldr	r3, [r7, #20]
 8019a30:	3350      	adds	r3, #80	@ 0x50
 8019a32:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8019a34:	69bb      	ldr	r3, [r7, #24]
 8019a36:	2200      	movs	r2, #0
 8019a38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8019a3c:	79fa      	ldrb	r2, [r7, #7]
 8019a3e:	69bb      	ldr	r3, [r7, #24]
 8019a40:	9300      	str	r3, [sp, #0]
 8019a42:	4613      	mov	r3, r2
 8019a44:	697a      	ldr	r2, [r7, #20]
 8019a46:	68b9      	ldr	r1, [r7, #8]
 8019a48:	68f8      	ldr	r0, [r7, #12]
 8019a4a:	f000 f805 	bl	8019a58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8019a4e:	69bb      	ldr	r3, [r7, #24]
	}
 8019a50:	4618      	mov	r0, r3
 8019a52:	3720      	adds	r7, #32
 8019a54:	46bd      	mov	sp, r7
 8019a56:	bd80      	pop	{r7, pc}

08019a58 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8019a58:	b580      	push	{r7, lr}
 8019a5a:	b084      	sub	sp, #16
 8019a5c:	af00      	add	r7, sp, #0
 8019a5e:	60f8      	str	r0, [r7, #12]
 8019a60:	60b9      	str	r1, [r7, #8]
 8019a62:	607a      	str	r2, [r7, #4]
 8019a64:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8019a66:	68bb      	ldr	r3, [r7, #8]
 8019a68:	2b00      	cmp	r3, #0
 8019a6a:	d103      	bne.n	8019a74 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8019a6c:	69bb      	ldr	r3, [r7, #24]
 8019a6e:	69ba      	ldr	r2, [r7, #24]
 8019a70:	601a      	str	r2, [r3, #0]
 8019a72:	e002      	b.n	8019a7a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8019a74:	69bb      	ldr	r3, [r7, #24]
 8019a76:	687a      	ldr	r2, [r7, #4]
 8019a78:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8019a7a:	69bb      	ldr	r3, [r7, #24]
 8019a7c:	68fa      	ldr	r2, [r7, #12]
 8019a7e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8019a80:	69bb      	ldr	r3, [r7, #24]
 8019a82:	68ba      	ldr	r2, [r7, #8]
 8019a84:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8019a86:	2101      	movs	r1, #1
 8019a88:	69b8      	ldr	r0, [r7, #24]
 8019a8a:	f7ff fec3 	bl	8019814 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8019a8e:	69bb      	ldr	r3, [r7, #24]
 8019a90:	78fa      	ldrb	r2, [r7, #3]
 8019a92:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8019a96:	bf00      	nop
 8019a98:	3710      	adds	r7, #16
 8019a9a:	46bd      	mov	sp, r7
 8019a9c:	bd80      	pop	{r7, pc}

08019a9e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8019a9e:	b580      	push	{r7, lr}
 8019aa0:	b082      	sub	sp, #8
 8019aa2:	af00      	add	r7, sp, #0
 8019aa4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8019aa6:	687b      	ldr	r3, [r7, #4]
 8019aa8:	2b00      	cmp	r3, #0
 8019aaa:	d00e      	beq.n	8019aca <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8019aac:	687b      	ldr	r3, [r7, #4]
 8019aae:	2200      	movs	r2, #0
 8019ab0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8019ab2:	687b      	ldr	r3, [r7, #4]
 8019ab4:	2200      	movs	r2, #0
 8019ab6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8019ab8:	687b      	ldr	r3, [r7, #4]
 8019aba:	2200      	movs	r2, #0
 8019abc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8019abe:	2300      	movs	r3, #0
 8019ac0:	2200      	movs	r2, #0
 8019ac2:	2100      	movs	r1, #0
 8019ac4:	6878      	ldr	r0, [r7, #4]
 8019ac6:	f000 f8a3 	bl	8019c10 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8019aca:	bf00      	nop
 8019acc:	3708      	adds	r7, #8
 8019ace:	46bd      	mov	sp, r7
 8019ad0:	bd80      	pop	{r7, pc}

08019ad2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8019ad2:	b580      	push	{r7, lr}
 8019ad4:	b086      	sub	sp, #24
 8019ad6:	af00      	add	r7, sp, #0
 8019ad8:	4603      	mov	r3, r0
 8019ada:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8019adc:	2301      	movs	r3, #1
 8019ade:	617b      	str	r3, [r7, #20]
 8019ae0:	2300      	movs	r3, #0
 8019ae2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8019ae4:	79fb      	ldrb	r3, [r7, #7]
 8019ae6:	461a      	mov	r2, r3
 8019ae8:	6939      	ldr	r1, [r7, #16]
 8019aea:	6978      	ldr	r0, [r7, #20]
 8019aec:	f7ff ff79 	bl	80199e2 <xQueueGenericCreate>
 8019af0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8019af2:	68f8      	ldr	r0, [r7, #12]
 8019af4:	f7ff ffd3 	bl	8019a9e <prvInitialiseMutex>

		return xNewQueue;
 8019af8:	68fb      	ldr	r3, [r7, #12]
	}
 8019afa:	4618      	mov	r0, r3
 8019afc:	3718      	adds	r7, #24
 8019afe:	46bd      	mov	sp, r7
 8019b00:	bd80      	pop	{r7, pc}

08019b02 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8019b02:	b580      	push	{r7, lr}
 8019b04:	b088      	sub	sp, #32
 8019b06:	af02      	add	r7, sp, #8
 8019b08:	4603      	mov	r3, r0
 8019b0a:	6039      	str	r1, [r7, #0]
 8019b0c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8019b0e:	2301      	movs	r3, #1
 8019b10:	617b      	str	r3, [r7, #20]
 8019b12:	2300      	movs	r3, #0
 8019b14:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8019b16:	79fb      	ldrb	r3, [r7, #7]
 8019b18:	9300      	str	r3, [sp, #0]
 8019b1a:	683b      	ldr	r3, [r7, #0]
 8019b1c:	2200      	movs	r2, #0
 8019b1e:	6939      	ldr	r1, [r7, #16]
 8019b20:	6978      	ldr	r0, [r7, #20]
 8019b22:	f7ff fee1 	bl	80198e8 <xQueueGenericCreateStatic>
 8019b26:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8019b28:	68f8      	ldr	r0, [r7, #12]
 8019b2a:	f7ff ffb8 	bl	8019a9e <prvInitialiseMutex>

		return xNewQueue;
 8019b2e:	68fb      	ldr	r3, [r7, #12]
	}
 8019b30:	4618      	mov	r0, r3
 8019b32:	3718      	adds	r7, #24
 8019b34:	46bd      	mov	sp, r7
 8019b36:	bd80      	pop	{r7, pc}

08019b38 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8019b38:	b590      	push	{r4, r7, lr}
 8019b3a:	b087      	sub	sp, #28
 8019b3c:	af00      	add	r7, sp, #0
 8019b3e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8019b40:	687b      	ldr	r3, [r7, #4]
 8019b42:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8019b44:	693b      	ldr	r3, [r7, #16]
 8019b46:	2b00      	cmp	r3, #0
 8019b48:	d10b      	bne.n	8019b62 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8019b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019b4e:	f383 8811 	msr	BASEPRI, r3
 8019b52:	f3bf 8f6f 	isb	sy
 8019b56:	f3bf 8f4f 	dsb	sy
 8019b5a:	60fb      	str	r3, [r7, #12]
}
 8019b5c:	bf00      	nop
 8019b5e:	bf00      	nop
 8019b60:	e7fd      	b.n	8019b5e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8019b62:	693b      	ldr	r3, [r7, #16]
 8019b64:	689c      	ldr	r4, [r3, #8]
 8019b66:	f001 fd91 	bl	801b68c <xTaskGetCurrentTaskHandle>
 8019b6a:	4603      	mov	r3, r0
 8019b6c:	429c      	cmp	r4, r3
 8019b6e:	d111      	bne.n	8019b94 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8019b70:	693b      	ldr	r3, [r7, #16]
 8019b72:	68db      	ldr	r3, [r3, #12]
 8019b74:	1e5a      	subs	r2, r3, #1
 8019b76:	693b      	ldr	r3, [r7, #16]
 8019b78:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8019b7a:	693b      	ldr	r3, [r7, #16]
 8019b7c:	68db      	ldr	r3, [r3, #12]
 8019b7e:	2b00      	cmp	r3, #0
 8019b80:	d105      	bne.n	8019b8e <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8019b82:	2300      	movs	r3, #0
 8019b84:	2200      	movs	r2, #0
 8019b86:	2100      	movs	r1, #0
 8019b88:	6938      	ldr	r0, [r7, #16]
 8019b8a:	f000 f841 	bl	8019c10 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8019b8e:	2301      	movs	r3, #1
 8019b90:	617b      	str	r3, [r7, #20]
 8019b92:	e001      	b.n	8019b98 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8019b94:	2300      	movs	r3, #0
 8019b96:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8019b98:	697b      	ldr	r3, [r7, #20]
	}
 8019b9a:	4618      	mov	r0, r3
 8019b9c:	371c      	adds	r7, #28
 8019b9e:	46bd      	mov	sp, r7
 8019ba0:	bd90      	pop	{r4, r7, pc}

08019ba2 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8019ba2:	b590      	push	{r4, r7, lr}
 8019ba4:	b087      	sub	sp, #28
 8019ba6:	af00      	add	r7, sp, #0
 8019ba8:	6078      	str	r0, [r7, #4]
 8019baa:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8019bac:	687b      	ldr	r3, [r7, #4]
 8019bae:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8019bb0:	693b      	ldr	r3, [r7, #16]
 8019bb2:	2b00      	cmp	r3, #0
 8019bb4:	d10b      	bne.n	8019bce <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8019bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019bba:	f383 8811 	msr	BASEPRI, r3
 8019bbe:	f3bf 8f6f 	isb	sy
 8019bc2:	f3bf 8f4f 	dsb	sy
 8019bc6:	60fb      	str	r3, [r7, #12]
}
 8019bc8:	bf00      	nop
 8019bca:	bf00      	nop
 8019bcc:	e7fd      	b.n	8019bca <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8019bce:	693b      	ldr	r3, [r7, #16]
 8019bd0:	689c      	ldr	r4, [r3, #8]
 8019bd2:	f001 fd5b 	bl	801b68c <xTaskGetCurrentTaskHandle>
 8019bd6:	4603      	mov	r3, r0
 8019bd8:	429c      	cmp	r4, r3
 8019bda:	d107      	bne.n	8019bec <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8019bdc:	693b      	ldr	r3, [r7, #16]
 8019bde:	68db      	ldr	r3, [r3, #12]
 8019be0:	1c5a      	adds	r2, r3, #1
 8019be2:	693b      	ldr	r3, [r7, #16]
 8019be4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8019be6:	2301      	movs	r3, #1
 8019be8:	617b      	str	r3, [r7, #20]
 8019bea:	e00c      	b.n	8019c06 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8019bec:	6839      	ldr	r1, [r7, #0]
 8019bee:	6938      	ldr	r0, [r7, #16]
 8019bf0:	f000 fa90 	bl	801a114 <xQueueSemaphoreTake>
 8019bf4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8019bf6:	697b      	ldr	r3, [r7, #20]
 8019bf8:	2b00      	cmp	r3, #0
 8019bfa:	d004      	beq.n	8019c06 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8019bfc:	693b      	ldr	r3, [r7, #16]
 8019bfe:	68db      	ldr	r3, [r3, #12]
 8019c00:	1c5a      	adds	r2, r3, #1
 8019c02:	693b      	ldr	r3, [r7, #16]
 8019c04:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8019c06:	697b      	ldr	r3, [r7, #20]
	}
 8019c08:	4618      	mov	r0, r3
 8019c0a:	371c      	adds	r7, #28
 8019c0c:	46bd      	mov	sp, r7
 8019c0e:	bd90      	pop	{r4, r7, pc}

08019c10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8019c10:	b580      	push	{r7, lr}
 8019c12:	b08e      	sub	sp, #56	@ 0x38
 8019c14:	af00      	add	r7, sp, #0
 8019c16:	60f8      	str	r0, [r7, #12]
 8019c18:	60b9      	str	r1, [r7, #8]
 8019c1a:	607a      	str	r2, [r7, #4]
 8019c1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8019c1e:	2300      	movs	r3, #0
 8019c20:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8019c22:	68fb      	ldr	r3, [r7, #12]
 8019c24:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8019c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c28:	2b00      	cmp	r3, #0
 8019c2a:	d10b      	bne.n	8019c44 <xQueueGenericSend+0x34>
	__asm volatile
 8019c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019c30:	f383 8811 	msr	BASEPRI, r3
 8019c34:	f3bf 8f6f 	isb	sy
 8019c38:	f3bf 8f4f 	dsb	sy
 8019c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8019c3e:	bf00      	nop
 8019c40:	bf00      	nop
 8019c42:	e7fd      	b.n	8019c40 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019c44:	68bb      	ldr	r3, [r7, #8]
 8019c46:	2b00      	cmp	r3, #0
 8019c48:	d103      	bne.n	8019c52 <xQueueGenericSend+0x42>
 8019c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019c4e:	2b00      	cmp	r3, #0
 8019c50:	d101      	bne.n	8019c56 <xQueueGenericSend+0x46>
 8019c52:	2301      	movs	r3, #1
 8019c54:	e000      	b.n	8019c58 <xQueueGenericSend+0x48>
 8019c56:	2300      	movs	r3, #0
 8019c58:	2b00      	cmp	r3, #0
 8019c5a:	d10b      	bne.n	8019c74 <xQueueGenericSend+0x64>
	__asm volatile
 8019c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019c60:	f383 8811 	msr	BASEPRI, r3
 8019c64:	f3bf 8f6f 	isb	sy
 8019c68:	f3bf 8f4f 	dsb	sy
 8019c6c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8019c6e:	bf00      	nop
 8019c70:	bf00      	nop
 8019c72:	e7fd      	b.n	8019c70 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8019c74:	683b      	ldr	r3, [r7, #0]
 8019c76:	2b02      	cmp	r3, #2
 8019c78:	d103      	bne.n	8019c82 <xQueueGenericSend+0x72>
 8019c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019c7e:	2b01      	cmp	r3, #1
 8019c80:	d101      	bne.n	8019c86 <xQueueGenericSend+0x76>
 8019c82:	2301      	movs	r3, #1
 8019c84:	e000      	b.n	8019c88 <xQueueGenericSend+0x78>
 8019c86:	2300      	movs	r3, #0
 8019c88:	2b00      	cmp	r3, #0
 8019c8a:	d10b      	bne.n	8019ca4 <xQueueGenericSend+0x94>
	__asm volatile
 8019c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019c90:	f383 8811 	msr	BASEPRI, r3
 8019c94:	f3bf 8f6f 	isb	sy
 8019c98:	f3bf 8f4f 	dsb	sy
 8019c9c:	623b      	str	r3, [r7, #32]
}
 8019c9e:	bf00      	nop
 8019ca0:	bf00      	nop
 8019ca2:	e7fd      	b.n	8019ca0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019ca4:	f001 fd02 	bl	801b6ac <xTaskGetSchedulerState>
 8019ca8:	4603      	mov	r3, r0
 8019caa:	2b00      	cmp	r3, #0
 8019cac:	d102      	bne.n	8019cb4 <xQueueGenericSend+0xa4>
 8019cae:	687b      	ldr	r3, [r7, #4]
 8019cb0:	2b00      	cmp	r3, #0
 8019cb2:	d101      	bne.n	8019cb8 <xQueueGenericSend+0xa8>
 8019cb4:	2301      	movs	r3, #1
 8019cb6:	e000      	b.n	8019cba <xQueueGenericSend+0xaa>
 8019cb8:	2300      	movs	r3, #0
 8019cba:	2b00      	cmp	r3, #0
 8019cbc:	d10b      	bne.n	8019cd6 <xQueueGenericSend+0xc6>
	__asm volatile
 8019cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019cc2:	f383 8811 	msr	BASEPRI, r3
 8019cc6:	f3bf 8f6f 	isb	sy
 8019cca:	f3bf 8f4f 	dsb	sy
 8019cce:	61fb      	str	r3, [r7, #28]
}
 8019cd0:	bf00      	nop
 8019cd2:	bf00      	nop
 8019cd4:	e7fd      	b.n	8019cd2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8019cd6:	f002 fb57 	bl	801c388 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8019cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019cdc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019ce2:	429a      	cmp	r2, r3
 8019ce4:	d302      	bcc.n	8019cec <xQueueGenericSend+0xdc>
 8019ce6:	683b      	ldr	r3, [r7, #0]
 8019ce8:	2b02      	cmp	r3, #2
 8019cea:	d129      	bne.n	8019d40 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8019cec:	683a      	ldr	r2, [r7, #0]
 8019cee:	68b9      	ldr	r1, [r7, #8]
 8019cf0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019cf2:	f000 fcdb 	bl	801a6ac <prvCopyDataToQueue>
 8019cf6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019cfc:	2b00      	cmp	r3, #0
 8019cfe:	d010      	beq.n	8019d22 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d02:	3324      	adds	r3, #36	@ 0x24
 8019d04:	4618      	mov	r0, r3
 8019d06:	f001 fafb 	bl	801b300 <xTaskRemoveFromEventList>
 8019d0a:	4603      	mov	r3, r0
 8019d0c:	2b00      	cmp	r3, #0
 8019d0e:	d013      	beq.n	8019d38 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8019d10:	4b3f      	ldr	r3, [pc, #252]	@ (8019e10 <xQueueGenericSend+0x200>)
 8019d12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019d16:	601a      	str	r2, [r3, #0]
 8019d18:	f3bf 8f4f 	dsb	sy
 8019d1c:	f3bf 8f6f 	isb	sy
 8019d20:	e00a      	b.n	8019d38 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8019d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019d24:	2b00      	cmp	r3, #0
 8019d26:	d007      	beq.n	8019d38 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8019d28:	4b39      	ldr	r3, [pc, #228]	@ (8019e10 <xQueueGenericSend+0x200>)
 8019d2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019d2e:	601a      	str	r2, [r3, #0]
 8019d30:	f3bf 8f4f 	dsb	sy
 8019d34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8019d38:	f002 fb58 	bl	801c3ec <vPortExitCritical>
				return pdPASS;
 8019d3c:	2301      	movs	r3, #1
 8019d3e:	e063      	b.n	8019e08 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8019d40:	687b      	ldr	r3, [r7, #4]
 8019d42:	2b00      	cmp	r3, #0
 8019d44:	d103      	bne.n	8019d4e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8019d46:	f002 fb51 	bl	801c3ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8019d4a:	2300      	movs	r3, #0
 8019d4c:	e05c      	b.n	8019e08 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8019d4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019d50:	2b00      	cmp	r3, #0
 8019d52:	d106      	bne.n	8019d62 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8019d54:	f107 0314 	add.w	r3, r7, #20
 8019d58:	4618      	mov	r0, r3
 8019d5a:	f001 fb35 	bl	801b3c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8019d5e:	2301      	movs	r3, #1
 8019d60:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8019d62:	f002 fb43 	bl	801c3ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8019d66:	f001 f89d 	bl	801aea4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8019d6a:	f002 fb0d 	bl	801c388 <vPortEnterCritical>
 8019d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8019d74:	b25b      	sxtb	r3, r3
 8019d76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019d7a:	d103      	bne.n	8019d84 <xQueueGenericSend+0x174>
 8019d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d7e:	2200      	movs	r2, #0
 8019d80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8019d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8019d8a:	b25b      	sxtb	r3, r3
 8019d8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019d90:	d103      	bne.n	8019d9a <xQueueGenericSend+0x18a>
 8019d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d94:	2200      	movs	r2, #0
 8019d96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8019d9a:	f002 fb27 	bl	801c3ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019d9e:	1d3a      	adds	r2, r7, #4
 8019da0:	f107 0314 	add.w	r3, r7, #20
 8019da4:	4611      	mov	r1, r2
 8019da6:	4618      	mov	r0, r3
 8019da8:	f001 fb24 	bl	801b3f4 <xTaskCheckForTimeOut>
 8019dac:	4603      	mov	r3, r0
 8019dae:	2b00      	cmp	r3, #0
 8019db0:	d124      	bne.n	8019dfc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8019db2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019db4:	f000 fd72 	bl	801a89c <prvIsQueueFull>
 8019db8:	4603      	mov	r3, r0
 8019dba:	2b00      	cmp	r3, #0
 8019dbc:	d018      	beq.n	8019df0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8019dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019dc0:	3310      	adds	r3, #16
 8019dc2:	687a      	ldr	r2, [r7, #4]
 8019dc4:	4611      	mov	r1, r2
 8019dc6:	4618      	mov	r0, r3
 8019dc8:	f001 fa48 	bl	801b25c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8019dcc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019dce:	f000 fcfd 	bl	801a7cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8019dd2:	f001 f875 	bl	801aec0 <xTaskResumeAll>
 8019dd6:	4603      	mov	r3, r0
 8019dd8:	2b00      	cmp	r3, #0
 8019dda:	f47f af7c 	bne.w	8019cd6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8019dde:	4b0c      	ldr	r3, [pc, #48]	@ (8019e10 <xQueueGenericSend+0x200>)
 8019de0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019de4:	601a      	str	r2, [r3, #0]
 8019de6:	f3bf 8f4f 	dsb	sy
 8019dea:	f3bf 8f6f 	isb	sy
 8019dee:	e772      	b.n	8019cd6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8019df0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019df2:	f000 fceb 	bl	801a7cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019df6:	f001 f863 	bl	801aec0 <xTaskResumeAll>
 8019dfa:	e76c      	b.n	8019cd6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8019dfc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019dfe:	f000 fce5 	bl	801a7cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8019e02:	f001 f85d 	bl	801aec0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8019e06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8019e08:	4618      	mov	r0, r3
 8019e0a:	3738      	adds	r7, #56	@ 0x38
 8019e0c:	46bd      	mov	sp, r7
 8019e0e:	bd80      	pop	{r7, pc}
 8019e10:	e000ed04 	.word	0xe000ed04

08019e14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8019e14:	b580      	push	{r7, lr}
 8019e16:	b090      	sub	sp, #64	@ 0x40
 8019e18:	af00      	add	r7, sp, #0
 8019e1a:	60f8      	str	r0, [r7, #12]
 8019e1c:	60b9      	str	r1, [r7, #8]
 8019e1e:	607a      	str	r2, [r7, #4]
 8019e20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8019e22:	68fb      	ldr	r3, [r7, #12]
 8019e24:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8019e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019e28:	2b00      	cmp	r3, #0
 8019e2a:	d10b      	bne.n	8019e44 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8019e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019e30:	f383 8811 	msr	BASEPRI, r3
 8019e34:	f3bf 8f6f 	isb	sy
 8019e38:	f3bf 8f4f 	dsb	sy
 8019e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8019e3e:	bf00      	nop
 8019e40:	bf00      	nop
 8019e42:	e7fd      	b.n	8019e40 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019e44:	68bb      	ldr	r3, [r7, #8]
 8019e46:	2b00      	cmp	r3, #0
 8019e48:	d103      	bne.n	8019e52 <xQueueGenericSendFromISR+0x3e>
 8019e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019e4e:	2b00      	cmp	r3, #0
 8019e50:	d101      	bne.n	8019e56 <xQueueGenericSendFromISR+0x42>
 8019e52:	2301      	movs	r3, #1
 8019e54:	e000      	b.n	8019e58 <xQueueGenericSendFromISR+0x44>
 8019e56:	2300      	movs	r3, #0
 8019e58:	2b00      	cmp	r3, #0
 8019e5a:	d10b      	bne.n	8019e74 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8019e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019e60:	f383 8811 	msr	BASEPRI, r3
 8019e64:	f3bf 8f6f 	isb	sy
 8019e68:	f3bf 8f4f 	dsb	sy
 8019e6c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8019e6e:	bf00      	nop
 8019e70:	bf00      	nop
 8019e72:	e7fd      	b.n	8019e70 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8019e74:	683b      	ldr	r3, [r7, #0]
 8019e76:	2b02      	cmp	r3, #2
 8019e78:	d103      	bne.n	8019e82 <xQueueGenericSendFromISR+0x6e>
 8019e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019e7e:	2b01      	cmp	r3, #1
 8019e80:	d101      	bne.n	8019e86 <xQueueGenericSendFromISR+0x72>
 8019e82:	2301      	movs	r3, #1
 8019e84:	e000      	b.n	8019e88 <xQueueGenericSendFromISR+0x74>
 8019e86:	2300      	movs	r3, #0
 8019e88:	2b00      	cmp	r3, #0
 8019e8a:	d10b      	bne.n	8019ea4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8019e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019e90:	f383 8811 	msr	BASEPRI, r3
 8019e94:	f3bf 8f6f 	isb	sy
 8019e98:	f3bf 8f4f 	dsb	sy
 8019e9c:	623b      	str	r3, [r7, #32]
}
 8019e9e:	bf00      	nop
 8019ea0:	bf00      	nop
 8019ea2:	e7fd      	b.n	8019ea0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8019ea4:	f002 fb50 	bl	801c548 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8019ea8:	f3ef 8211 	mrs	r2, BASEPRI
 8019eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019eb0:	f383 8811 	msr	BASEPRI, r3
 8019eb4:	f3bf 8f6f 	isb	sy
 8019eb8:	f3bf 8f4f 	dsb	sy
 8019ebc:	61fa      	str	r2, [r7, #28]
 8019ebe:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8019ec0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8019ec2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8019ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ec6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019ecc:	429a      	cmp	r2, r3
 8019ece:	d302      	bcc.n	8019ed6 <xQueueGenericSendFromISR+0xc2>
 8019ed0:	683b      	ldr	r3, [r7, #0]
 8019ed2:	2b02      	cmp	r3, #2
 8019ed4:	d12f      	bne.n	8019f36 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8019ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ed8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8019edc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8019ee6:	683a      	ldr	r2, [r7, #0]
 8019ee8:	68b9      	ldr	r1, [r7, #8]
 8019eea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8019eec:	f000 fbde 	bl	801a6ac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8019ef0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8019ef4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019ef8:	d112      	bne.n	8019f20 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019efe:	2b00      	cmp	r3, #0
 8019f00:	d016      	beq.n	8019f30 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f04:	3324      	adds	r3, #36	@ 0x24
 8019f06:	4618      	mov	r0, r3
 8019f08:	f001 f9fa 	bl	801b300 <xTaskRemoveFromEventList>
 8019f0c:	4603      	mov	r3, r0
 8019f0e:	2b00      	cmp	r3, #0
 8019f10:	d00e      	beq.n	8019f30 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8019f12:	687b      	ldr	r3, [r7, #4]
 8019f14:	2b00      	cmp	r3, #0
 8019f16:	d00b      	beq.n	8019f30 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8019f18:	687b      	ldr	r3, [r7, #4]
 8019f1a:	2201      	movs	r2, #1
 8019f1c:	601a      	str	r2, [r3, #0]
 8019f1e:	e007      	b.n	8019f30 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8019f20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8019f24:	3301      	adds	r3, #1
 8019f26:	b2db      	uxtb	r3, r3
 8019f28:	b25a      	sxtb	r2, r3
 8019f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8019f30:	2301      	movs	r3, #1
 8019f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8019f34:	e001      	b.n	8019f3a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8019f36:	2300      	movs	r3, #0
 8019f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019f3c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8019f3e:	697b      	ldr	r3, [r7, #20]
 8019f40:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8019f44:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8019f46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8019f48:	4618      	mov	r0, r3
 8019f4a:	3740      	adds	r7, #64	@ 0x40
 8019f4c:	46bd      	mov	sp, r7
 8019f4e:	bd80      	pop	{r7, pc}

08019f50 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8019f50:	b580      	push	{r7, lr}
 8019f52:	b08c      	sub	sp, #48	@ 0x30
 8019f54:	af00      	add	r7, sp, #0
 8019f56:	60f8      	str	r0, [r7, #12]
 8019f58:	60b9      	str	r1, [r7, #8]
 8019f5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8019f5c:	2300      	movs	r3, #0
 8019f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8019f60:	68fb      	ldr	r3, [r7, #12]
 8019f62:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8019f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019f66:	2b00      	cmp	r3, #0
 8019f68:	d10b      	bne.n	8019f82 <xQueueReceive+0x32>
	__asm volatile
 8019f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019f6e:	f383 8811 	msr	BASEPRI, r3
 8019f72:	f3bf 8f6f 	isb	sy
 8019f76:	f3bf 8f4f 	dsb	sy
 8019f7a:	623b      	str	r3, [r7, #32]
}
 8019f7c:	bf00      	nop
 8019f7e:	bf00      	nop
 8019f80:	e7fd      	b.n	8019f7e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019f82:	68bb      	ldr	r3, [r7, #8]
 8019f84:	2b00      	cmp	r3, #0
 8019f86:	d103      	bne.n	8019f90 <xQueueReceive+0x40>
 8019f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019f8c:	2b00      	cmp	r3, #0
 8019f8e:	d101      	bne.n	8019f94 <xQueueReceive+0x44>
 8019f90:	2301      	movs	r3, #1
 8019f92:	e000      	b.n	8019f96 <xQueueReceive+0x46>
 8019f94:	2300      	movs	r3, #0
 8019f96:	2b00      	cmp	r3, #0
 8019f98:	d10b      	bne.n	8019fb2 <xQueueReceive+0x62>
	__asm volatile
 8019f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019f9e:	f383 8811 	msr	BASEPRI, r3
 8019fa2:	f3bf 8f6f 	isb	sy
 8019fa6:	f3bf 8f4f 	dsb	sy
 8019faa:	61fb      	str	r3, [r7, #28]
}
 8019fac:	bf00      	nop
 8019fae:	bf00      	nop
 8019fb0:	e7fd      	b.n	8019fae <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019fb2:	f001 fb7b 	bl	801b6ac <xTaskGetSchedulerState>
 8019fb6:	4603      	mov	r3, r0
 8019fb8:	2b00      	cmp	r3, #0
 8019fba:	d102      	bne.n	8019fc2 <xQueueReceive+0x72>
 8019fbc:	687b      	ldr	r3, [r7, #4]
 8019fbe:	2b00      	cmp	r3, #0
 8019fc0:	d101      	bne.n	8019fc6 <xQueueReceive+0x76>
 8019fc2:	2301      	movs	r3, #1
 8019fc4:	e000      	b.n	8019fc8 <xQueueReceive+0x78>
 8019fc6:	2300      	movs	r3, #0
 8019fc8:	2b00      	cmp	r3, #0
 8019fca:	d10b      	bne.n	8019fe4 <xQueueReceive+0x94>
	__asm volatile
 8019fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019fd0:	f383 8811 	msr	BASEPRI, r3
 8019fd4:	f3bf 8f6f 	isb	sy
 8019fd8:	f3bf 8f4f 	dsb	sy
 8019fdc:	61bb      	str	r3, [r7, #24]
}
 8019fde:	bf00      	nop
 8019fe0:	bf00      	nop
 8019fe2:	e7fd      	b.n	8019fe0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8019fe4:	f002 f9d0 	bl	801c388 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019fec:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8019fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ff0:	2b00      	cmp	r3, #0
 8019ff2:	d01f      	beq.n	801a034 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8019ff4:	68b9      	ldr	r1, [r7, #8]
 8019ff6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019ff8:	f000 fbc2 	bl	801a780 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8019ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ffe:	1e5a      	subs	r2, r3, #1
 801a000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a002:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a006:	691b      	ldr	r3, [r3, #16]
 801a008:	2b00      	cmp	r3, #0
 801a00a:	d00f      	beq.n	801a02c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a00c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a00e:	3310      	adds	r3, #16
 801a010:	4618      	mov	r0, r3
 801a012:	f001 f975 	bl	801b300 <xTaskRemoveFromEventList>
 801a016:	4603      	mov	r3, r0
 801a018:	2b00      	cmp	r3, #0
 801a01a:	d007      	beq.n	801a02c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801a01c:	4b3c      	ldr	r3, [pc, #240]	@ (801a110 <xQueueReceive+0x1c0>)
 801a01e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a022:	601a      	str	r2, [r3, #0]
 801a024:	f3bf 8f4f 	dsb	sy
 801a028:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801a02c:	f002 f9de 	bl	801c3ec <vPortExitCritical>
				return pdPASS;
 801a030:	2301      	movs	r3, #1
 801a032:	e069      	b.n	801a108 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801a034:	687b      	ldr	r3, [r7, #4]
 801a036:	2b00      	cmp	r3, #0
 801a038:	d103      	bne.n	801a042 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801a03a:	f002 f9d7 	bl	801c3ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801a03e:	2300      	movs	r3, #0
 801a040:	e062      	b.n	801a108 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801a042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a044:	2b00      	cmp	r3, #0
 801a046:	d106      	bne.n	801a056 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a048:	f107 0310 	add.w	r3, r7, #16
 801a04c:	4618      	mov	r0, r3
 801a04e:	f001 f9bb 	bl	801b3c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a052:	2301      	movs	r3, #1
 801a054:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801a056:	f002 f9c9 	bl	801c3ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801a05a:	f000 ff23 	bl	801aea4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a05e:	f002 f993 	bl	801c388 <vPortEnterCritical>
 801a062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a064:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801a068:	b25b      	sxtb	r3, r3
 801a06a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a06e:	d103      	bne.n	801a078 <xQueueReceive+0x128>
 801a070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a072:	2200      	movs	r2, #0
 801a074:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801a078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a07a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801a07e:	b25b      	sxtb	r3, r3
 801a080:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a084:	d103      	bne.n	801a08e <xQueueReceive+0x13e>
 801a086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a088:	2200      	movs	r2, #0
 801a08a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801a08e:	f002 f9ad 	bl	801c3ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a092:	1d3a      	adds	r2, r7, #4
 801a094:	f107 0310 	add.w	r3, r7, #16
 801a098:	4611      	mov	r1, r2
 801a09a:	4618      	mov	r0, r3
 801a09c:	f001 f9aa 	bl	801b3f4 <xTaskCheckForTimeOut>
 801a0a0:	4603      	mov	r3, r0
 801a0a2:	2b00      	cmp	r3, #0
 801a0a4:	d123      	bne.n	801a0ee <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a0a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a0a8:	f000 fbe2 	bl	801a870 <prvIsQueueEmpty>
 801a0ac:	4603      	mov	r3, r0
 801a0ae:	2b00      	cmp	r3, #0
 801a0b0:	d017      	beq.n	801a0e2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801a0b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a0b4:	3324      	adds	r3, #36	@ 0x24
 801a0b6:	687a      	ldr	r2, [r7, #4]
 801a0b8:	4611      	mov	r1, r2
 801a0ba:	4618      	mov	r0, r3
 801a0bc:	f001 f8ce 	bl	801b25c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801a0c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a0c2:	f000 fb83 	bl	801a7cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801a0c6:	f000 fefb 	bl	801aec0 <xTaskResumeAll>
 801a0ca:	4603      	mov	r3, r0
 801a0cc:	2b00      	cmp	r3, #0
 801a0ce:	d189      	bne.n	8019fe4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 801a0d0:	4b0f      	ldr	r3, [pc, #60]	@ (801a110 <xQueueReceive+0x1c0>)
 801a0d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a0d6:	601a      	str	r2, [r3, #0]
 801a0d8:	f3bf 8f4f 	dsb	sy
 801a0dc:	f3bf 8f6f 	isb	sy
 801a0e0:	e780      	b.n	8019fe4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801a0e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a0e4:	f000 fb72 	bl	801a7cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a0e8:	f000 feea 	bl	801aec0 <xTaskResumeAll>
 801a0ec:	e77a      	b.n	8019fe4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801a0ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a0f0:	f000 fb6c 	bl	801a7cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a0f4:	f000 fee4 	bl	801aec0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a0f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a0fa:	f000 fbb9 	bl	801a870 <prvIsQueueEmpty>
 801a0fe:	4603      	mov	r3, r0
 801a100:	2b00      	cmp	r3, #0
 801a102:	f43f af6f 	beq.w	8019fe4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801a106:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801a108:	4618      	mov	r0, r3
 801a10a:	3730      	adds	r7, #48	@ 0x30
 801a10c:	46bd      	mov	sp, r7
 801a10e:	bd80      	pop	{r7, pc}
 801a110:	e000ed04 	.word	0xe000ed04

0801a114 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801a114:	b580      	push	{r7, lr}
 801a116:	b08e      	sub	sp, #56	@ 0x38
 801a118:	af00      	add	r7, sp, #0
 801a11a:	6078      	str	r0, [r7, #4]
 801a11c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801a11e:	2300      	movs	r3, #0
 801a120:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801a122:	687b      	ldr	r3, [r7, #4]
 801a124:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801a126:	2300      	movs	r3, #0
 801a128:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801a12a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a12c:	2b00      	cmp	r3, #0
 801a12e:	d10b      	bne.n	801a148 <xQueueSemaphoreTake+0x34>
	__asm volatile
 801a130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a134:	f383 8811 	msr	BASEPRI, r3
 801a138:	f3bf 8f6f 	isb	sy
 801a13c:	f3bf 8f4f 	dsb	sy
 801a140:	623b      	str	r3, [r7, #32]
}
 801a142:	bf00      	nop
 801a144:	bf00      	nop
 801a146:	e7fd      	b.n	801a144 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801a148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a14a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a14c:	2b00      	cmp	r3, #0
 801a14e:	d00b      	beq.n	801a168 <xQueueSemaphoreTake+0x54>
	__asm volatile
 801a150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a154:	f383 8811 	msr	BASEPRI, r3
 801a158:	f3bf 8f6f 	isb	sy
 801a15c:	f3bf 8f4f 	dsb	sy
 801a160:	61fb      	str	r3, [r7, #28]
}
 801a162:	bf00      	nop
 801a164:	bf00      	nop
 801a166:	e7fd      	b.n	801a164 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801a168:	f001 faa0 	bl	801b6ac <xTaskGetSchedulerState>
 801a16c:	4603      	mov	r3, r0
 801a16e:	2b00      	cmp	r3, #0
 801a170:	d102      	bne.n	801a178 <xQueueSemaphoreTake+0x64>
 801a172:	683b      	ldr	r3, [r7, #0]
 801a174:	2b00      	cmp	r3, #0
 801a176:	d101      	bne.n	801a17c <xQueueSemaphoreTake+0x68>
 801a178:	2301      	movs	r3, #1
 801a17a:	e000      	b.n	801a17e <xQueueSemaphoreTake+0x6a>
 801a17c:	2300      	movs	r3, #0
 801a17e:	2b00      	cmp	r3, #0
 801a180:	d10b      	bne.n	801a19a <xQueueSemaphoreTake+0x86>
	__asm volatile
 801a182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a186:	f383 8811 	msr	BASEPRI, r3
 801a18a:	f3bf 8f6f 	isb	sy
 801a18e:	f3bf 8f4f 	dsb	sy
 801a192:	61bb      	str	r3, [r7, #24]
}
 801a194:	bf00      	nop
 801a196:	bf00      	nop
 801a198:	e7fd      	b.n	801a196 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801a19a:	f002 f8f5 	bl	801c388 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801a19e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a1a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a1a2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801a1a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a1a6:	2b00      	cmp	r3, #0
 801a1a8:	d024      	beq.n	801a1f4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801a1aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a1ac:	1e5a      	subs	r2, r3, #1
 801a1ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a1b0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801a1b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a1b4:	681b      	ldr	r3, [r3, #0]
 801a1b6:	2b00      	cmp	r3, #0
 801a1b8:	d104      	bne.n	801a1c4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801a1ba:	f001 fbf1 	bl	801b9a0 <pvTaskIncrementMutexHeldCount>
 801a1be:	4602      	mov	r2, r0
 801a1c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a1c2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a1c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a1c6:	691b      	ldr	r3, [r3, #16]
 801a1c8:	2b00      	cmp	r3, #0
 801a1ca:	d00f      	beq.n	801a1ec <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a1cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a1ce:	3310      	adds	r3, #16
 801a1d0:	4618      	mov	r0, r3
 801a1d2:	f001 f895 	bl	801b300 <xTaskRemoveFromEventList>
 801a1d6:	4603      	mov	r3, r0
 801a1d8:	2b00      	cmp	r3, #0
 801a1da:	d007      	beq.n	801a1ec <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801a1dc:	4b54      	ldr	r3, [pc, #336]	@ (801a330 <xQueueSemaphoreTake+0x21c>)
 801a1de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a1e2:	601a      	str	r2, [r3, #0]
 801a1e4:	f3bf 8f4f 	dsb	sy
 801a1e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801a1ec:	f002 f8fe 	bl	801c3ec <vPortExitCritical>
				return pdPASS;
 801a1f0:	2301      	movs	r3, #1
 801a1f2:	e098      	b.n	801a326 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801a1f4:	683b      	ldr	r3, [r7, #0]
 801a1f6:	2b00      	cmp	r3, #0
 801a1f8:	d112      	bne.n	801a220 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801a1fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a1fc:	2b00      	cmp	r3, #0
 801a1fe:	d00b      	beq.n	801a218 <xQueueSemaphoreTake+0x104>
	__asm volatile
 801a200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a204:	f383 8811 	msr	BASEPRI, r3
 801a208:	f3bf 8f6f 	isb	sy
 801a20c:	f3bf 8f4f 	dsb	sy
 801a210:	617b      	str	r3, [r7, #20]
}
 801a212:	bf00      	nop
 801a214:	bf00      	nop
 801a216:	e7fd      	b.n	801a214 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801a218:	f002 f8e8 	bl	801c3ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801a21c:	2300      	movs	r3, #0
 801a21e:	e082      	b.n	801a326 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 801a220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a222:	2b00      	cmp	r3, #0
 801a224:	d106      	bne.n	801a234 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a226:	f107 030c 	add.w	r3, r7, #12
 801a22a:	4618      	mov	r0, r3
 801a22c:	f001 f8cc 	bl	801b3c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a230:	2301      	movs	r3, #1
 801a232:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801a234:	f002 f8da 	bl	801c3ec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801a238:	f000 fe34 	bl	801aea4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a23c:	f002 f8a4 	bl	801c388 <vPortEnterCritical>
 801a240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a242:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801a246:	b25b      	sxtb	r3, r3
 801a248:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a24c:	d103      	bne.n	801a256 <xQueueSemaphoreTake+0x142>
 801a24e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a250:	2200      	movs	r2, #0
 801a252:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801a256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a258:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801a25c:	b25b      	sxtb	r3, r3
 801a25e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a262:	d103      	bne.n	801a26c <xQueueSemaphoreTake+0x158>
 801a264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a266:	2200      	movs	r2, #0
 801a268:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801a26c:	f002 f8be 	bl	801c3ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a270:	463a      	mov	r2, r7
 801a272:	f107 030c 	add.w	r3, r7, #12
 801a276:	4611      	mov	r1, r2
 801a278:	4618      	mov	r0, r3
 801a27a:	f001 f8bb 	bl	801b3f4 <xTaskCheckForTimeOut>
 801a27e:	4603      	mov	r3, r0
 801a280:	2b00      	cmp	r3, #0
 801a282:	d132      	bne.n	801a2ea <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a284:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a286:	f000 faf3 	bl	801a870 <prvIsQueueEmpty>
 801a28a:	4603      	mov	r3, r0
 801a28c:	2b00      	cmp	r3, #0
 801a28e:	d026      	beq.n	801a2de <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801a290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a292:	681b      	ldr	r3, [r3, #0]
 801a294:	2b00      	cmp	r3, #0
 801a296:	d109      	bne.n	801a2ac <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 801a298:	f002 f876 	bl	801c388 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801a29c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a29e:	689b      	ldr	r3, [r3, #8]
 801a2a0:	4618      	mov	r0, r3
 801a2a2:	f001 fa21 	bl	801b6e8 <xTaskPriorityInherit>
 801a2a6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 801a2a8:	f002 f8a0 	bl	801c3ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801a2ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a2ae:	3324      	adds	r3, #36	@ 0x24
 801a2b0:	683a      	ldr	r2, [r7, #0]
 801a2b2:	4611      	mov	r1, r2
 801a2b4:	4618      	mov	r0, r3
 801a2b6:	f000 ffd1 	bl	801b25c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801a2ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a2bc:	f000 fa86 	bl	801a7cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801a2c0:	f000 fdfe 	bl	801aec0 <xTaskResumeAll>
 801a2c4:	4603      	mov	r3, r0
 801a2c6:	2b00      	cmp	r3, #0
 801a2c8:	f47f af67 	bne.w	801a19a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 801a2cc:	4b18      	ldr	r3, [pc, #96]	@ (801a330 <xQueueSemaphoreTake+0x21c>)
 801a2ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a2d2:	601a      	str	r2, [r3, #0]
 801a2d4:	f3bf 8f4f 	dsb	sy
 801a2d8:	f3bf 8f6f 	isb	sy
 801a2dc:	e75d      	b.n	801a19a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801a2de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a2e0:	f000 fa74 	bl	801a7cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a2e4:	f000 fdec 	bl	801aec0 <xTaskResumeAll>
 801a2e8:	e757      	b.n	801a19a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801a2ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a2ec:	f000 fa6e 	bl	801a7cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a2f0:	f000 fde6 	bl	801aec0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a2f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a2f6:	f000 fabb 	bl	801a870 <prvIsQueueEmpty>
 801a2fa:	4603      	mov	r3, r0
 801a2fc:	2b00      	cmp	r3, #0
 801a2fe:	f43f af4c 	beq.w	801a19a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801a302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a304:	2b00      	cmp	r3, #0
 801a306:	d00d      	beq.n	801a324 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 801a308:	f002 f83e 	bl	801c388 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801a30c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a30e:	f000 f9b5 	bl	801a67c <prvGetDisinheritPriorityAfterTimeout>
 801a312:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801a314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a316:	689b      	ldr	r3, [r3, #8]
 801a318:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801a31a:	4618      	mov	r0, r3
 801a31c:	f001 fabc 	bl	801b898 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801a320:	f002 f864 	bl	801c3ec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801a324:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801a326:	4618      	mov	r0, r3
 801a328:	3738      	adds	r7, #56	@ 0x38
 801a32a:	46bd      	mov	sp, r7
 801a32c:	bd80      	pop	{r7, pc}
 801a32e:	bf00      	nop
 801a330:	e000ed04 	.word	0xe000ed04

0801a334 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801a334:	b580      	push	{r7, lr}
 801a336:	b08e      	sub	sp, #56	@ 0x38
 801a338:	af00      	add	r7, sp, #0
 801a33a:	60f8      	str	r0, [r7, #12]
 801a33c:	60b9      	str	r1, [r7, #8]
 801a33e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801a340:	2300      	movs	r3, #0
 801a342:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 801a344:	68fb      	ldr	r3, [r7, #12]
 801a346:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801a348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a34a:	2b00      	cmp	r3, #0
 801a34c:	d10b      	bne.n	801a366 <xQueuePeek+0x32>
	__asm volatile
 801a34e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a352:	f383 8811 	msr	BASEPRI, r3
 801a356:	f3bf 8f6f 	isb	sy
 801a35a:	f3bf 8f4f 	dsb	sy
 801a35e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801a360:	bf00      	nop
 801a362:	bf00      	nop
 801a364:	e7fd      	b.n	801a362 <xQueuePeek+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a366:	68bb      	ldr	r3, [r7, #8]
 801a368:	2b00      	cmp	r3, #0
 801a36a:	d103      	bne.n	801a374 <xQueuePeek+0x40>
 801a36c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a36e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a370:	2b00      	cmp	r3, #0
 801a372:	d101      	bne.n	801a378 <xQueuePeek+0x44>
 801a374:	2301      	movs	r3, #1
 801a376:	e000      	b.n	801a37a <xQueuePeek+0x46>
 801a378:	2300      	movs	r3, #0
 801a37a:	2b00      	cmp	r3, #0
 801a37c:	d10b      	bne.n	801a396 <xQueuePeek+0x62>
	__asm volatile
 801a37e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a382:	f383 8811 	msr	BASEPRI, r3
 801a386:	f3bf 8f6f 	isb	sy
 801a38a:	f3bf 8f4f 	dsb	sy
 801a38e:	623b      	str	r3, [r7, #32]
}
 801a390:	bf00      	nop
 801a392:	bf00      	nop
 801a394:	e7fd      	b.n	801a392 <xQueuePeek+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801a396:	f001 f989 	bl	801b6ac <xTaskGetSchedulerState>
 801a39a:	4603      	mov	r3, r0
 801a39c:	2b00      	cmp	r3, #0
 801a39e:	d102      	bne.n	801a3a6 <xQueuePeek+0x72>
 801a3a0:	687b      	ldr	r3, [r7, #4]
 801a3a2:	2b00      	cmp	r3, #0
 801a3a4:	d101      	bne.n	801a3aa <xQueuePeek+0x76>
 801a3a6:	2301      	movs	r3, #1
 801a3a8:	e000      	b.n	801a3ac <xQueuePeek+0x78>
 801a3aa:	2300      	movs	r3, #0
 801a3ac:	2b00      	cmp	r3, #0
 801a3ae:	d10b      	bne.n	801a3c8 <xQueuePeek+0x94>
	__asm volatile
 801a3b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a3b4:	f383 8811 	msr	BASEPRI, r3
 801a3b8:	f3bf 8f6f 	isb	sy
 801a3bc:	f3bf 8f4f 	dsb	sy
 801a3c0:	61fb      	str	r3, [r7, #28]
}
 801a3c2:	bf00      	nop
 801a3c4:	bf00      	nop
 801a3c6:	e7fd      	b.n	801a3c4 <xQueuePeek+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801a3c8:	f001 ffde 	bl	801c388 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a3cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a3ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a3d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a3d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3d4:	2b00      	cmp	r3, #0
 801a3d6:	d021      	beq.n	801a41c <xQueuePeek+0xe8>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 801a3d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a3da:	68db      	ldr	r3, [r3, #12]
 801a3dc:	62bb      	str	r3, [r7, #40]	@ 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801a3de:	68b9      	ldr	r1, [r7, #8]
 801a3e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a3e2:	f000 f9cd 	bl	801a780 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 801a3e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a3e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a3ea:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a3ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a3ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a3f0:	2b00      	cmp	r3, #0
 801a3f2:	d00f      	beq.n	801a414 <xQueuePeek+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a3f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a3f6:	3324      	adds	r3, #36	@ 0x24
 801a3f8:	4618      	mov	r0, r3
 801a3fa:	f000 ff81 	bl	801b300 <xTaskRemoveFromEventList>
 801a3fe:	4603      	mov	r3, r0
 801a400:	2b00      	cmp	r3, #0
 801a402:	d007      	beq.n	801a414 <xQueuePeek+0xe0>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 801a404:	4b3c      	ldr	r3, [pc, #240]	@ (801a4f8 <xQueuePeek+0x1c4>)
 801a406:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a40a:	601a      	str	r2, [r3, #0]
 801a40c:	f3bf 8f4f 	dsb	sy
 801a410:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801a414:	f001 ffea 	bl	801c3ec <vPortExitCritical>
				return pdPASS;
 801a418:	2301      	movs	r3, #1
 801a41a:	e069      	b.n	801a4f0 <xQueuePeek+0x1bc>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801a41c:	687b      	ldr	r3, [r7, #4]
 801a41e:	2b00      	cmp	r3, #0
 801a420:	d103      	bne.n	801a42a <xQueuePeek+0xf6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801a422:	f001 ffe3 	bl	801c3ec <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801a426:	2300      	movs	r3, #0
 801a428:	e062      	b.n	801a4f0 <xQueuePeek+0x1bc>
				}
				else if( xEntryTimeSet == pdFALSE )
 801a42a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a42c:	2b00      	cmp	r3, #0
 801a42e:	d106      	bne.n	801a43e <xQueuePeek+0x10a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a430:	f107 0314 	add.w	r3, r7, #20
 801a434:	4618      	mov	r0, r3
 801a436:	f000 ffc7 	bl	801b3c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a43a:	2301      	movs	r3, #1
 801a43c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801a43e:	f001 ffd5 	bl	801c3ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801a442:	f000 fd2f 	bl	801aea4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a446:	f001 ff9f 	bl	801c388 <vPortEnterCritical>
 801a44a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a44c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801a450:	b25b      	sxtb	r3, r3
 801a452:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a456:	d103      	bne.n	801a460 <xQueuePeek+0x12c>
 801a458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a45a:	2200      	movs	r2, #0
 801a45c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801a460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a462:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801a466:	b25b      	sxtb	r3, r3
 801a468:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a46c:	d103      	bne.n	801a476 <xQueuePeek+0x142>
 801a46e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a470:	2200      	movs	r2, #0
 801a472:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801a476:	f001 ffb9 	bl	801c3ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a47a:	1d3a      	adds	r2, r7, #4
 801a47c:	f107 0314 	add.w	r3, r7, #20
 801a480:	4611      	mov	r1, r2
 801a482:	4618      	mov	r0, r3
 801a484:	f000 ffb6 	bl	801b3f4 <xTaskCheckForTimeOut>
 801a488:	4603      	mov	r3, r0
 801a48a:	2b00      	cmp	r3, #0
 801a48c:	d123      	bne.n	801a4d6 <xQueuePeek+0x1a2>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a48e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a490:	f000 f9ee 	bl	801a870 <prvIsQueueEmpty>
 801a494:	4603      	mov	r3, r0
 801a496:	2b00      	cmp	r3, #0
 801a498:	d017      	beq.n	801a4ca <xQueuePeek+0x196>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801a49a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a49c:	3324      	adds	r3, #36	@ 0x24
 801a49e:	687a      	ldr	r2, [r7, #4]
 801a4a0:	4611      	mov	r1, r2
 801a4a2:	4618      	mov	r0, r3
 801a4a4:	f000 feda 	bl	801b25c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801a4a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a4aa:	f000 f98f 	bl	801a7cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801a4ae:	f000 fd07 	bl	801aec0 <xTaskResumeAll>
 801a4b2:	4603      	mov	r3, r0
 801a4b4:	2b00      	cmp	r3, #0
 801a4b6:	d187      	bne.n	801a3c8 <xQueuePeek+0x94>
				{
					portYIELD_WITHIN_API();
 801a4b8:	4b0f      	ldr	r3, [pc, #60]	@ (801a4f8 <xQueuePeek+0x1c4>)
 801a4ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a4be:	601a      	str	r2, [r3, #0]
 801a4c0:	f3bf 8f4f 	dsb	sy
 801a4c4:	f3bf 8f6f 	isb	sy
 801a4c8:	e77e      	b.n	801a3c8 <xQueuePeek+0x94>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 801a4ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a4cc:	f000 f97e 	bl	801a7cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a4d0:	f000 fcf6 	bl	801aec0 <xTaskResumeAll>
 801a4d4:	e778      	b.n	801a3c8 <xQueuePeek+0x94>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 801a4d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a4d8:	f000 f978 	bl	801a7cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a4dc:	f000 fcf0 	bl	801aec0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a4e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a4e2:	f000 f9c5 	bl	801a870 <prvIsQueueEmpty>
 801a4e6:	4603      	mov	r3, r0
 801a4e8:	2b00      	cmp	r3, #0
 801a4ea:	f43f af6d 	beq.w	801a3c8 <xQueuePeek+0x94>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801a4ee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801a4f0:	4618      	mov	r0, r3
 801a4f2:	3738      	adds	r7, #56	@ 0x38
 801a4f4:	46bd      	mov	sp, r7
 801a4f6:	bd80      	pop	{r7, pc}
 801a4f8:	e000ed04 	.word	0xe000ed04

0801a4fc <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801a4fc:	b580      	push	{r7, lr}
 801a4fe:	b08e      	sub	sp, #56	@ 0x38
 801a500:	af00      	add	r7, sp, #0
 801a502:	60f8      	str	r0, [r7, #12]
 801a504:	60b9      	str	r1, [r7, #8]
 801a506:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801a508:	68fb      	ldr	r3, [r7, #12]
 801a50a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801a50c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a50e:	2b00      	cmp	r3, #0
 801a510:	d10b      	bne.n	801a52a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 801a512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a516:	f383 8811 	msr	BASEPRI, r3
 801a51a:	f3bf 8f6f 	isb	sy
 801a51e:	f3bf 8f4f 	dsb	sy
 801a522:	623b      	str	r3, [r7, #32]
}
 801a524:	bf00      	nop
 801a526:	bf00      	nop
 801a528:	e7fd      	b.n	801a526 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a52a:	68bb      	ldr	r3, [r7, #8]
 801a52c:	2b00      	cmp	r3, #0
 801a52e:	d103      	bne.n	801a538 <xQueueReceiveFromISR+0x3c>
 801a530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a534:	2b00      	cmp	r3, #0
 801a536:	d101      	bne.n	801a53c <xQueueReceiveFromISR+0x40>
 801a538:	2301      	movs	r3, #1
 801a53a:	e000      	b.n	801a53e <xQueueReceiveFromISR+0x42>
 801a53c:	2300      	movs	r3, #0
 801a53e:	2b00      	cmp	r3, #0
 801a540:	d10b      	bne.n	801a55a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 801a542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a546:	f383 8811 	msr	BASEPRI, r3
 801a54a:	f3bf 8f6f 	isb	sy
 801a54e:	f3bf 8f4f 	dsb	sy
 801a552:	61fb      	str	r3, [r7, #28]
}
 801a554:	bf00      	nop
 801a556:	bf00      	nop
 801a558:	e7fd      	b.n	801a556 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801a55a:	f001 fff5 	bl	801c548 <vPortValidateInterruptPriority>
	__asm volatile
 801a55e:	f3ef 8211 	mrs	r2, BASEPRI
 801a562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a566:	f383 8811 	msr	BASEPRI, r3
 801a56a:	f3bf 8f6f 	isb	sy
 801a56e:	f3bf 8f4f 	dsb	sy
 801a572:	61ba      	str	r2, [r7, #24]
 801a574:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801a576:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801a578:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a57a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a57c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a57e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a582:	2b00      	cmp	r3, #0
 801a584:	d02f      	beq.n	801a5e6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801a586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a588:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801a58c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801a590:	68b9      	ldr	r1, [r7, #8]
 801a592:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a594:	f000 f8f4 	bl	801a780 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801a598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a59a:	1e5a      	subs	r2, r3, #1
 801a59c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a59e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801a5a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801a5a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a5a8:	d112      	bne.n	801a5d0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a5aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a5ac:	691b      	ldr	r3, [r3, #16]
 801a5ae:	2b00      	cmp	r3, #0
 801a5b0:	d016      	beq.n	801a5e0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a5b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a5b4:	3310      	adds	r3, #16
 801a5b6:	4618      	mov	r0, r3
 801a5b8:	f000 fea2 	bl	801b300 <xTaskRemoveFromEventList>
 801a5bc:	4603      	mov	r3, r0
 801a5be:	2b00      	cmp	r3, #0
 801a5c0:	d00e      	beq.n	801a5e0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801a5c2:	687b      	ldr	r3, [r7, #4]
 801a5c4:	2b00      	cmp	r3, #0
 801a5c6:	d00b      	beq.n	801a5e0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801a5c8:	687b      	ldr	r3, [r7, #4]
 801a5ca:	2201      	movs	r2, #1
 801a5cc:	601a      	str	r2, [r3, #0]
 801a5ce:	e007      	b.n	801a5e0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801a5d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a5d4:	3301      	adds	r3, #1
 801a5d6:	b2db      	uxtb	r3, r3
 801a5d8:	b25a      	sxtb	r2, r3
 801a5da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a5dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 801a5e0:	2301      	movs	r3, #1
 801a5e2:	637b      	str	r3, [r7, #52]	@ 0x34
 801a5e4:	e001      	b.n	801a5ea <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 801a5e6:	2300      	movs	r3, #0
 801a5e8:	637b      	str	r3, [r7, #52]	@ 0x34
 801a5ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a5ec:	613b      	str	r3, [r7, #16]
	__asm volatile
 801a5ee:	693b      	ldr	r3, [r7, #16]
 801a5f0:	f383 8811 	msr	BASEPRI, r3
}
 801a5f4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801a5f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 801a5f8:	4618      	mov	r0, r3
 801a5fa:	3738      	adds	r7, #56	@ 0x38
 801a5fc:	46bd      	mov	sp, r7
 801a5fe:	bd80      	pop	{r7, pc}

0801a600 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 801a600:	b580      	push	{r7, lr}
 801a602:	b084      	sub	sp, #16
 801a604:	af00      	add	r7, sp, #0
 801a606:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 801a608:	687b      	ldr	r3, [r7, #4]
 801a60a:	2b00      	cmp	r3, #0
 801a60c:	d10b      	bne.n	801a626 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 801a60e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a612:	f383 8811 	msr	BASEPRI, r3
 801a616:	f3bf 8f6f 	isb	sy
 801a61a:	f3bf 8f4f 	dsb	sy
 801a61e:	60bb      	str	r3, [r7, #8]
}
 801a620:	bf00      	nop
 801a622:	bf00      	nop
 801a624:	e7fd      	b.n	801a622 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 801a626:	f001 feaf 	bl	801c388 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 801a62a:	687b      	ldr	r3, [r7, #4]
 801a62c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a62e:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 801a630:	f001 fedc 	bl	801c3ec <vPortExitCritical>

	return uxReturn;
 801a634:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801a636:	4618      	mov	r0, r3
 801a638:	3710      	adds	r7, #16
 801a63a:	46bd      	mov	sp, r7
 801a63c:	bd80      	pop	{r7, pc}

0801a63e <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 801a63e:	b480      	push	{r7}
 801a640:	b087      	sub	sp, #28
 801a642:	af00      	add	r7, sp, #0
 801a644:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 801a646:	687b      	ldr	r3, [r7, #4]
 801a648:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 801a64a:	697b      	ldr	r3, [r7, #20]
 801a64c:	2b00      	cmp	r3, #0
 801a64e:	d10b      	bne.n	801a668 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 801a650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a654:	f383 8811 	msr	BASEPRI, r3
 801a658:	f3bf 8f6f 	isb	sy
 801a65c:	f3bf 8f4f 	dsb	sy
 801a660:	60fb      	str	r3, [r7, #12]
}
 801a662:	bf00      	nop
 801a664:	bf00      	nop
 801a666:	e7fd      	b.n	801a664 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 801a668:	697b      	ldr	r3, [r7, #20]
 801a66a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a66c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 801a66e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801a670:	4618      	mov	r0, r3
 801a672:	371c      	adds	r7, #28
 801a674:	46bd      	mov	sp, r7
 801a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a67a:	4770      	bx	lr

0801a67c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801a67c:	b480      	push	{r7}
 801a67e:	b085      	sub	sp, #20
 801a680:	af00      	add	r7, sp, #0
 801a682:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801a684:	687b      	ldr	r3, [r7, #4]
 801a686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a688:	2b00      	cmp	r3, #0
 801a68a:	d006      	beq.n	801a69a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801a68c:	687b      	ldr	r3, [r7, #4]
 801a68e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a690:	681b      	ldr	r3, [r3, #0]
 801a692:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 801a696:	60fb      	str	r3, [r7, #12]
 801a698:	e001      	b.n	801a69e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801a69a:	2300      	movs	r3, #0
 801a69c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801a69e:	68fb      	ldr	r3, [r7, #12]
	}
 801a6a0:	4618      	mov	r0, r3
 801a6a2:	3714      	adds	r7, #20
 801a6a4:	46bd      	mov	sp, r7
 801a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6aa:	4770      	bx	lr

0801a6ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801a6ac:	b580      	push	{r7, lr}
 801a6ae:	b086      	sub	sp, #24
 801a6b0:	af00      	add	r7, sp, #0
 801a6b2:	60f8      	str	r0, [r7, #12]
 801a6b4:	60b9      	str	r1, [r7, #8]
 801a6b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801a6b8:	2300      	movs	r3, #0
 801a6ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a6bc:	68fb      	ldr	r3, [r7, #12]
 801a6be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a6c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801a6c2:	68fb      	ldr	r3, [r7, #12]
 801a6c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a6c6:	2b00      	cmp	r3, #0
 801a6c8:	d10d      	bne.n	801a6e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801a6ca:	68fb      	ldr	r3, [r7, #12]
 801a6cc:	681b      	ldr	r3, [r3, #0]
 801a6ce:	2b00      	cmp	r3, #0
 801a6d0:	d14d      	bne.n	801a76e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801a6d2:	68fb      	ldr	r3, [r7, #12]
 801a6d4:	689b      	ldr	r3, [r3, #8]
 801a6d6:	4618      	mov	r0, r3
 801a6d8:	f001 f86e 	bl	801b7b8 <xTaskPriorityDisinherit>
 801a6dc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801a6de:	68fb      	ldr	r3, [r7, #12]
 801a6e0:	2200      	movs	r2, #0
 801a6e2:	609a      	str	r2, [r3, #8]
 801a6e4:	e043      	b.n	801a76e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801a6e6:	687b      	ldr	r3, [r7, #4]
 801a6e8:	2b00      	cmp	r3, #0
 801a6ea:	d119      	bne.n	801a720 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801a6ec:	68fb      	ldr	r3, [r7, #12]
 801a6ee:	6858      	ldr	r0, [r3, #4]
 801a6f0:	68fb      	ldr	r3, [r7, #12]
 801a6f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a6f4:	461a      	mov	r2, r3
 801a6f6:	68b9      	ldr	r1, [r7, #8]
 801a6f8:	f01c fdb6 	bl	8037268 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801a6fc:	68fb      	ldr	r3, [r7, #12]
 801a6fe:	685a      	ldr	r2, [r3, #4]
 801a700:	68fb      	ldr	r3, [r7, #12]
 801a702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a704:	441a      	add	r2, r3
 801a706:	68fb      	ldr	r3, [r7, #12]
 801a708:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801a70a:	68fb      	ldr	r3, [r7, #12]
 801a70c:	685a      	ldr	r2, [r3, #4]
 801a70e:	68fb      	ldr	r3, [r7, #12]
 801a710:	689b      	ldr	r3, [r3, #8]
 801a712:	429a      	cmp	r2, r3
 801a714:	d32b      	bcc.n	801a76e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801a716:	68fb      	ldr	r3, [r7, #12]
 801a718:	681a      	ldr	r2, [r3, #0]
 801a71a:	68fb      	ldr	r3, [r7, #12]
 801a71c:	605a      	str	r2, [r3, #4]
 801a71e:	e026      	b.n	801a76e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801a720:	68fb      	ldr	r3, [r7, #12]
 801a722:	68d8      	ldr	r0, [r3, #12]
 801a724:	68fb      	ldr	r3, [r7, #12]
 801a726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a728:	461a      	mov	r2, r3
 801a72a:	68b9      	ldr	r1, [r7, #8]
 801a72c:	f01c fd9c 	bl	8037268 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801a730:	68fb      	ldr	r3, [r7, #12]
 801a732:	68da      	ldr	r2, [r3, #12]
 801a734:	68fb      	ldr	r3, [r7, #12]
 801a736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a738:	425b      	negs	r3, r3
 801a73a:	441a      	add	r2, r3
 801a73c:	68fb      	ldr	r3, [r7, #12]
 801a73e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801a740:	68fb      	ldr	r3, [r7, #12]
 801a742:	68da      	ldr	r2, [r3, #12]
 801a744:	68fb      	ldr	r3, [r7, #12]
 801a746:	681b      	ldr	r3, [r3, #0]
 801a748:	429a      	cmp	r2, r3
 801a74a:	d207      	bcs.n	801a75c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801a74c:	68fb      	ldr	r3, [r7, #12]
 801a74e:	689a      	ldr	r2, [r3, #8]
 801a750:	68fb      	ldr	r3, [r7, #12]
 801a752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a754:	425b      	negs	r3, r3
 801a756:	441a      	add	r2, r3
 801a758:	68fb      	ldr	r3, [r7, #12]
 801a75a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801a75c:	687b      	ldr	r3, [r7, #4]
 801a75e:	2b02      	cmp	r3, #2
 801a760:	d105      	bne.n	801a76e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a762:	693b      	ldr	r3, [r7, #16]
 801a764:	2b00      	cmp	r3, #0
 801a766:	d002      	beq.n	801a76e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801a768:	693b      	ldr	r3, [r7, #16]
 801a76a:	3b01      	subs	r3, #1
 801a76c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801a76e:	693b      	ldr	r3, [r7, #16]
 801a770:	1c5a      	adds	r2, r3, #1
 801a772:	68fb      	ldr	r3, [r7, #12]
 801a774:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 801a776:	697b      	ldr	r3, [r7, #20]
}
 801a778:	4618      	mov	r0, r3
 801a77a:	3718      	adds	r7, #24
 801a77c:	46bd      	mov	sp, r7
 801a77e:	bd80      	pop	{r7, pc}

0801a780 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801a780:	b580      	push	{r7, lr}
 801a782:	b082      	sub	sp, #8
 801a784:	af00      	add	r7, sp, #0
 801a786:	6078      	str	r0, [r7, #4]
 801a788:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801a78a:	687b      	ldr	r3, [r7, #4]
 801a78c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a78e:	2b00      	cmp	r3, #0
 801a790:	d018      	beq.n	801a7c4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801a792:	687b      	ldr	r3, [r7, #4]
 801a794:	68da      	ldr	r2, [r3, #12]
 801a796:	687b      	ldr	r3, [r7, #4]
 801a798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a79a:	441a      	add	r2, r3
 801a79c:	687b      	ldr	r3, [r7, #4]
 801a79e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801a7a0:	687b      	ldr	r3, [r7, #4]
 801a7a2:	68da      	ldr	r2, [r3, #12]
 801a7a4:	687b      	ldr	r3, [r7, #4]
 801a7a6:	689b      	ldr	r3, [r3, #8]
 801a7a8:	429a      	cmp	r2, r3
 801a7aa:	d303      	bcc.n	801a7b4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801a7ac:	687b      	ldr	r3, [r7, #4]
 801a7ae:	681a      	ldr	r2, [r3, #0]
 801a7b0:	687b      	ldr	r3, [r7, #4]
 801a7b2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801a7b4:	687b      	ldr	r3, [r7, #4]
 801a7b6:	68d9      	ldr	r1, [r3, #12]
 801a7b8:	687b      	ldr	r3, [r7, #4]
 801a7ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a7bc:	461a      	mov	r2, r3
 801a7be:	6838      	ldr	r0, [r7, #0]
 801a7c0:	f01c fd52 	bl	8037268 <memcpy>
	}
}
 801a7c4:	bf00      	nop
 801a7c6:	3708      	adds	r7, #8
 801a7c8:	46bd      	mov	sp, r7
 801a7ca:	bd80      	pop	{r7, pc}

0801a7cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801a7cc:	b580      	push	{r7, lr}
 801a7ce:	b084      	sub	sp, #16
 801a7d0:	af00      	add	r7, sp, #0
 801a7d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801a7d4:	f001 fdd8 	bl	801c388 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801a7d8:	687b      	ldr	r3, [r7, #4]
 801a7da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801a7de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801a7e0:	e011      	b.n	801a806 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a7e2:	687b      	ldr	r3, [r7, #4]
 801a7e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a7e6:	2b00      	cmp	r3, #0
 801a7e8:	d012      	beq.n	801a810 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a7ea:	687b      	ldr	r3, [r7, #4]
 801a7ec:	3324      	adds	r3, #36	@ 0x24
 801a7ee:	4618      	mov	r0, r3
 801a7f0:	f000 fd86 	bl	801b300 <xTaskRemoveFromEventList>
 801a7f4:	4603      	mov	r3, r0
 801a7f6:	2b00      	cmp	r3, #0
 801a7f8:	d001      	beq.n	801a7fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801a7fa:	f000 fe5f 	bl	801b4bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801a7fe:	7bfb      	ldrb	r3, [r7, #15]
 801a800:	3b01      	subs	r3, #1
 801a802:	b2db      	uxtb	r3, r3
 801a804:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801a806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a80a:	2b00      	cmp	r3, #0
 801a80c:	dce9      	bgt.n	801a7e2 <prvUnlockQueue+0x16>
 801a80e:	e000      	b.n	801a812 <prvUnlockQueue+0x46>
					break;
 801a810:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801a812:	687b      	ldr	r3, [r7, #4]
 801a814:	22ff      	movs	r2, #255	@ 0xff
 801a816:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 801a81a:	f001 fde7 	bl	801c3ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801a81e:	f001 fdb3 	bl	801c388 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801a822:	687b      	ldr	r3, [r7, #4]
 801a824:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801a828:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801a82a:	e011      	b.n	801a850 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a82c:	687b      	ldr	r3, [r7, #4]
 801a82e:	691b      	ldr	r3, [r3, #16]
 801a830:	2b00      	cmp	r3, #0
 801a832:	d012      	beq.n	801a85a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a834:	687b      	ldr	r3, [r7, #4]
 801a836:	3310      	adds	r3, #16
 801a838:	4618      	mov	r0, r3
 801a83a:	f000 fd61 	bl	801b300 <xTaskRemoveFromEventList>
 801a83e:	4603      	mov	r3, r0
 801a840:	2b00      	cmp	r3, #0
 801a842:	d001      	beq.n	801a848 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801a844:	f000 fe3a 	bl	801b4bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801a848:	7bbb      	ldrb	r3, [r7, #14]
 801a84a:	3b01      	subs	r3, #1
 801a84c:	b2db      	uxtb	r3, r3
 801a84e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801a850:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a854:	2b00      	cmp	r3, #0
 801a856:	dce9      	bgt.n	801a82c <prvUnlockQueue+0x60>
 801a858:	e000      	b.n	801a85c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801a85a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801a85c:	687b      	ldr	r3, [r7, #4]
 801a85e:	22ff      	movs	r2, #255	@ 0xff
 801a860:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 801a864:	f001 fdc2 	bl	801c3ec <vPortExitCritical>
}
 801a868:	bf00      	nop
 801a86a:	3710      	adds	r7, #16
 801a86c:	46bd      	mov	sp, r7
 801a86e:	bd80      	pop	{r7, pc}

0801a870 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801a870:	b580      	push	{r7, lr}
 801a872:	b084      	sub	sp, #16
 801a874:	af00      	add	r7, sp, #0
 801a876:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801a878:	f001 fd86 	bl	801c388 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801a87c:	687b      	ldr	r3, [r7, #4]
 801a87e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a880:	2b00      	cmp	r3, #0
 801a882:	d102      	bne.n	801a88a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801a884:	2301      	movs	r3, #1
 801a886:	60fb      	str	r3, [r7, #12]
 801a888:	e001      	b.n	801a88e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801a88a:	2300      	movs	r3, #0
 801a88c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801a88e:	f001 fdad 	bl	801c3ec <vPortExitCritical>

	return xReturn;
 801a892:	68fb      	ldr	r3, [r7, #12]
}
 801a894:	4618      	mov	r0, r3
 801a896:	3710      	adds	r7, #16
 801a898:	46bd      	mov	sp, r7
 801a89a:	bd80      	pop	{r7, pc}

0801a89c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801a89c:	b580      	push	{r7, lr}
 801a89e:	b084      	sub	sp, #16
 801a8a0:	af00      	add	r7, sp, #0
 801a8a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801a8a4:	f001 fd70 	bl	801c388 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801a8a8:	687b      	ldr	r3, [r7, #4]
 801a8aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801a8ac:	687b      	ldr	r3, [r7, #4]
 801a8ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a8b0:	429a      	cmp	r2, r3
 801a8b2:	d102      	bne.n	801a8ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801a8b4:	2301      	movs	r3, #1
 801a8b6:	60fb      	str	r3, [r7, #12]
 801a8b8:	e001      	b.n	801a8be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801a8ba:	2300      	movs	r3, #0
 801a8bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801a8be:	f001 fd95 	bl	801c3ec <vPortExitCritical>

	return xReturn;
 801a8c2:	68fb      	ldr	r3, [r7, #12]
}
 801a8c4:	4618      	mov	r0, r3
 801a8c6:	3710      	adds	r7, #16
 801a8c8:	46bd      	mov	sp, r7
 801a8ca:	bd80      	pop	{r7, pc}

0801a8cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801a8cc:	b480      	push	{r7}
 801a8ce:	b085      	sub	sp, #20
 801a8d0:	af00      	add	r7, sp, #0
 801a8d2:	6078      	str	r0, [r7, #4]
 801a8d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801a8d6:	2300      	movs	r3, #0
 801a8d8:	60fb      	str	r3, [r7, #12]
 801a8da:	e014      	b.n	801a906 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801a8dc:	4a0f      	ldr	r2, [pc, #60]	@ (801a91c <vQueueAddToRegistry+0x50>)
 801a8de:	68fb      	ldr	r3, [r7, #12]
 801a8e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801a8e4:	2b00      	cmp	r3, #0
 801a8e6:	d10b      	bne.n	801a900 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801a8e8:	490c      	ldr	r1, [pc, #48]	@ (801a91c <vQueueAddToRegistry+0x50>)
 801a8ea:	68fb      	ldr	r3, [r7, #12]
 801a8ec:	683a      	ldr	r2, [r7, #0]
 801a8ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801a8f2:	4a0a      	ldr	r2, [pc, #40]	@ (801a91c <vQueueAddToRegistry+0x50>)
 801a8f4:	68fb      	ldr	r3, [r7, #12]
 801a8f6:	00db      	lsls	r3, r3, #3
 801a8f8:	4413      	add	r3, r2
 801a8fa:	687a      	ldr	r2, [r7, #4]
 801a8fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801a8fe:	e006      	b.n	801a90e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801a900:	68fb      	ldr	r3, [r7, #12]
 801a902:	3301      	adds	r3, #1
 801a904:	60fb      	str	r3, [r7, #12]
 801a906:	68fb      	ldr	r3, [r7, #12]
 801a908:	2b07      	cmp	r3, #7
 801a90a:	d9e7      	bls.n	801a8dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801a90c:	bf00      	nop
 801a90e:	bf00      	nop
 801a910:	3714      	adds	r7, #20
 801a912:	46bd      	mov	sp, r7
 801a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a918:	4770      	bx	lr
 801a91a:	bf00      	nop
 801a91c:	20001900 	.word	0x20001900

0801a920 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801a920:	b580      	push	{r7, lr}
 801a922:	b086      	sub	sp, #24
 801a924:	af00      	add	r7, sp, #0
 801a926:	60f8      	str	r0, [r7, #12]
 801a928:	60b9      	str	r1, [r7, #8]
 801a92a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801a92c:	68fb      	ldr	r3, [r7, #12]
 801a92e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801a930:	f001 fd2a 	bl	801c388 <vPortEnterCritical>
 801a934:	697b      	ldr	r3, [r7, #20]
 801a936:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801a93a:	b25b      	sxtb	r3, r3
 801a93c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a940:	d103      	bne.n	801a94a <vQueueWaitForMessageRestricted+0x2a>
 801a942:	697b      	ldr	r3, [r7, #20]
 801a944:	2200      	movs	r2, #0
 801a946:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801a94a:	697b      	ldr	r3, [r7, #20]
 801a94c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801a950:	b25b      	sxtb	r3, r3
 801a952:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a956:	d103      	bne.n	801a960 <vQueueWaitForMessageRestricted+0x40>
 801a958:	697b      	ldr	r3, [r7, #20]
 801a95a:	2200      	movs	r2, #0
 801a95c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801a960:	f001 fd44 	bl	801c3ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801a964:	697b      	ldr	r3, [r7, #20]
 801a966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a968:	2b00      	cmp	r3, #0
 801a96a:	d106      	bne.n	801a97a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801a96c:	697b      	ldr	r3, [r7, #20]
 801a96e:	3324      	adds	r3, #36	@ 0x24
 801a970:	687a      	ldr	r2, [r7, #4]
 801a972:	68b9      	ldr	r1, [r7, #8]
 801a974:	4618      	mov	r0, r3
 801a976:	f000 fc97 	bl	801b2a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801a97a:	6978      	ldr	r0, [r7, #20]
 801a97c:	f7ff ff26 	bl	801a7cc <prvUnlockQueue>
	}
 801a980:	bf00      	nop
 801a982:	3718      	adds	r7, #24
 801a984:	46bd      	mov	sp, r7
 801a986:	bd80      	pop	{r7, pc}

0801a988 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801a988:	b580      	push	{r7, lr}
 801a98a:	b08e      	sub	sp, #56	@ 0x38
 801a98c:	af04      	add	r7, sp, #16
 801a98e:	60f8      	str	r0, [r7, #12]
 801a990:	60b9      	str	r1, [r7, #8]
 801a992:	607a      	str	r2, [r7, #4]
 801a994:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801a996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a998:	2b00      	cmp	r3, #0
 801a99a:	d10b      	bne.n	801a9b4 <xTaskCreateStatic+0x2c>
	__asm volatile
 801a99c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a9a0:	f383 8811 	msr	BASEPRI, r3
 801a9a4:	f3bf 8f6f 	isb	sy
 801a9a8:	f3bf 8f4f 	dsb	sy
 801a9ac:	623b      	str	r3, [r7, #32]
}
 801a9ae:	bf00      	nop
 801a9b0:	bf00      	nop
 801a9b2:	e7fd      	b.n	801a9b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801a9b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a9b6:	2b00      	cmp	r3, #0
 801a9b8:	d10b      	bne.n	801a9d2 <xTaskCreateStatic+0x4a>
	__asm volatile
 801a9ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a9be:	f383 8811 	msr	BASEPRI, r3
 801a9c2:	f3bf 8f6f 	isb	sy
 801a9c6:	f3bf 8f4f 	dsb	sy
 801a9ca:	61fb      	str	r3, [r7, #28]
}
 801a9cc:	bf00      	nop
 801a9ce:	bf00      	nop
 801a9d0:	e7fd      	b.n	801a9ce <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801a9d2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 801a9d6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801a9d8:	693b      	ldr	r3, [r7, #16]
 801a9da:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 801a9de:	d00b      	beq.n	801a9f8 <xTaskCreateStatic+0x70>
	__asm volatile
 801a9e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a9e4:	f383 8811 	msr	BASEPRI, r3
 801a9e8:	f3bf 8f6f 	isb	sy
 801a9ec:	f3bf 8f4f 	dsb	sy
 801a9f0:	61bb      	str	r3, [r7, #24]
}
 801a9f2:	bf00      	nop
 801a9f4:	bf00      	nop
 801a9f6:	e7fd      	b.n	801a9f4 <xTaskCreateStatic+0x6c>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801a9f8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801a9fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a9fc:	2b00      	cmp	r3, #0
 801a9fe:	d01e      	beq.n	801aa3e <xTaskCreateStatic+0xb6>
 801aa00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801aa02:	2b00      	cmp	r3, #0
 801aa04:	d01b      	beq.n	801aa3e <xTaskCreateStatic+0xb6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801aa06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aa08:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801aa0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801aa0e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801aa10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa12:	2202      	movs	r2, #2
 801aa14:	f883 217d 	strb.w	r2, [r3, #381]	@ 0x17d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801aa18:	2300      	movs	r3, #0
 801aa1a:	9303      	str	r3, [sp, #12]
 801aa1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa1e:	9302      	str	r3, [sp, #8]
 801aa20:	f107 0314 	add.w	r3, r7, #20
 801aa24:	9301      	str	r3, [sp, #4]
 801aa26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aa28:	9300      	str	r3, [sp, #0]
 801aa2a:	683b      	ldr	r3, [r7, #0]
 801aa2c:	687a      	ldr	r2, [r7, #4]
 801aa2e:	68b9      	ldr	r1, [r7, #8]
 801aa30:	68f8      	ldr	r0, [r7, #12]
 801aa32:	f000 f851 	bl	801aad8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801aa36:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801aa38:	f000 f91e 	bl	801ac78 <prvAddNewTaskToReadyList>
 801aa3c:	e001      	b.n	801aa42 <xTaskCreateStatic+0xba>
		}
		else
		{
			xReturn = NULL;
 801aa3e:	2300      	movs	r3, #0
 801aa40:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801aa42:	697b      	ldr	r3, [r7, #20]
	}
 801aa44:	4618      	mov	r0, r3
 801aa46:	3728      	adds	r7, #40	@ 0x28
 801aa48:	46bd      	mov	sp, r7
 801aa4a:	bd80      	pop	{r7, pc}

0801aa4c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801aa4c:	b580      	push	{r7, lr}
 801aa4e:	b08c      	sub	sp, #48	@ 0x30
 801aa50:	af04      	add	r7, sp, #16
 801aa52:	60f8      	str	r0, [r7, #12]
 801aa54:	60b9      	str	r1, [r7, #8]
 801aa56:	603b      	str	r3, [r7, #0]
 801aa58:	4613      	mov	r3, r2
 801aa5a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801aa5c:	88fb      	ldrh	r3, [r7, #6]
 801aa5e:	009b      	lsls	r3, r3, #2
 801aa60:	4618      	mov	r0, r3
 801aa62:	f001 fdb3 	bl	801c5cc <pvPortMalloc>
 801aa66:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801aa68:	697b      	ldr	r3, [r7, #20]
 801aa6a:	2b00      	cmp	r3, #0
 801aa6c:	d00f      	beq.n	801aa8e <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801aa6e:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 801aa72:	f001 fdab 	bl	801c5cc <pvPortMalloc>
 801aa76:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801aa78:	69fb      	ldr	r3, [r7, #28]
 801aa7a:	2b00      	cmp	r3, #0
 801aa7c:	d003      	beq.n	801aa86 <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801aa7e:	69fb      	ldr	r3, [r7, #28]
 801aa80:	697a      	ldr	r2, [r7, #20]
 801aa82:	631a      	str	r2, [r3, #48]	@ 0x30
 801aa84:	e005      	b.n	801aa92 <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801aa86:	6978      	ldr	r0, [r7, #20]
 801aa88:	f001 fe6e 	bl	801c768 <vPortFree>
 801aa8c:	e001      	b.n	801aa92 <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801aa8e:	2300      	movs	r3, #0
 801aa90:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801aa92:	69fb      	ldr	r3, [r7, #28]
 801aa94:	2b00      	cmp	r3, #0
 801aa96:	d017      	beq.n	801aac8 <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801aa98:	69fb      	ldr	r3, [r7, #28]
 801aa9a:	2200      	movs	r2, #0
 801aa9c:	f883 217d 	strb.w	r2, [r3, #381]	@ 0x17d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801aaa0:	88fa      	ldrh	r2, [r7, #6]
 801aaa2:	2300      	movs	r3, #0
 801aaa4:	9303      	str	r3, [sp, #12]
 801aaa6:	69fb      	ldr	r3, [r7, #28]
 801aaa8:	9302      	str	r3, [sp, #8]
 801aaaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aaac:	9301      	str	r3, [sp, #4]
 801aaae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aab0:	9300      	str	r3, [sp, #0]
 801aab2:	683b      	ldr	r3, [r7, #0]
 801aab4:	68b9      	ldr	r1, [r7, #8]
 801aab6:	68f8      	ldr	r0, [r7, #12]
 801aab8:	f000 f80e 	bl	801aad8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801aabc:	69f8      	ldr	r0, [r7, #28]
 801aabe:	f000 f8db 	bl	801ac78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801aac2:	2301      	movs	r3, #1
 801aac4:	61bb      	str	r3, [r7, #24]
 801aac6:	e002      	b.n	801aace <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801aac8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801aacc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801aace:	69bb      	ldr	r3, [r7, #24]
	}
 801aad0:	4618      	mov	r0, r3
 801aad2:	3720      	adds	r7, #32
 801aad4:	46bd      	mov	sp, r7
 801aad6:	bd80      	pop	{r7, pc}

0801aad8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801aad8:	b580      	push	{r7, lr}
 801aada:	b088      	sub	sp, #32
 801aadc:	af00      	add	r7, sp, #0
 801aade:	60f8      	str	r0, [r7, #12]
 801aae0:	60b9      	str	r1, [r7, #8]
 801aae2:	607a      	str	r2, [r7, #4]
 801aae4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801aae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aae8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801aaea:	687b      	ldr	r3, [r7, #4]
 801aaec:	009b      	lsls	r3, r3, #2
 801aaee:	461a      	mov	r2, r3
 801aaf0:	21a5      	movs	r1, #165	@ 0xa5
 801aaf2:	f01b f97d 	bl	8035df0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801aaf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aaf8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801aafa:	687b      	ldr	r3, [r7, #4]
 801aafc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801ab00:	3b01      	subs	r3, #1
 801ab02:	009b      	lsls	r3, r3, #2
 801ab04:	4413      	add	r3, r2
 801ab06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801ab08:	69bb      	ldr	r3, [r7, #24]
 801ab0a:	f023 0307 	bic.w	r3, r3, #7
 801ab0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801ab10:	69bb      	ldr	r3, [r7, #24]
 801ab12:	f003 0307 	and.w	r3, r3, #7
 801ab16:	2b00      	cmp	r3, #0
 801ab18:	d00b      	beq.n	801ab32 <prvInitialiseNewTask+0x5a>
	__asm volatile
 801ab1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ab1e:	f383 8811 	msr	BASEPRI, r3
 801ab22:	f3bf 8f6f 	isb	sy
 801ab26:	f3bf 8f4f 	dsb	sy
 801ab2a:	617b      	str	r3, [r7, #20]
}
 801ab2c:	bf00      	nop
 801ab2e:	bf00      	nop
 801ab30:	e7fd      	b.n	801ab2e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801ab32:	68bb      	ldr	r3, [r7, #8]
 801ab34:	2b00      	cmp	r3, #0
 801ab36:	d01f      	beq.n	801ab78 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801ab38:	2300      	movs	r3, #0
 801ab3a:	61fb      	str	r3, [r7, #28]
 801ab3c:	e012      	b.n	801ab64 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801ab3e:	68ba      	ldr	r2, [r7, #8]
 801ab40:	69fb      	ldr	r3, [r7, #28]
 801ab42:	4413      	add	r3, r2
 801ab44:	7819      	ldrb	r1, [r3, #0]
 801ab46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801ab48:	69fb      	ldr	r3, [r7, #28]
 801ab4a:	4413      	add	r3, r2
 801ab4c:	3334      	adds	r3, #52	@ 0x34
 801ab4e:	460a      	mov	r2, r1
 801ab50:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801ab52:	68ba      	ldr	r2, [r7, #8]
 801ab54:	69fb      	ldr	r3, [r7, #28]
 801ab56:	4413      	add	r3, r2
 801ab58:	781b      	ldrb	r3, [r3, #0]
 801ab5a:	2b00      	cmp	r3, #0
 801ab5c:	d006      	beq.n	801ab6c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801ab5e:	69fb      	ldr	r3, [r7, #28]
 801ab60:	3301      	adds	r3, #1
 801ab62:	61fb      	str	r3, [r7, #28]
 801ab64:	69fb      	ldr	r3, [r7, #28]
 801ab66:	2b0f      	cmp	r3, #15
 801ab68:	d9e9      	bls.n	801ab3e <prvInitialiseNewTask+0x66>
 801ab6a:	e000      	b.n	801ab6e <prvInitialiseNewTask+0x96>
			{
				break;
 801ab6c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801ab6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ab70:	2200      	movs	r2, #0
 801ab72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801ab76:	e003      	b.n	801ab80 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801ab78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ab7a:	2200      	movs	r2, #0
 801ab7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801ab80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ab82:	2b37      	cmp	r3, #55	@ 0x37
 801ab84:	d901      	bls.n	801ab8a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801ab86:	2337      	movs	r3, #55	@ 0x37
 801ab88:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801ab8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ab8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ab8e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801ab90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ab92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ab94:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801ab96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ab98:	2200      	movs	r2, #0
 801ab9a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801ab9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ab9e:	3304      	adds	r3, #4
 801aba0:	4618      	mov	r0, r3
 801aba2:	f7fe fda3 	bl	80196ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801aba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aba8:	3318      	adds	r3, #24
 801abaa:	4618      	mov	r0, r3
 801abac:	f7fe fd9e 	bl	80196ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801abb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801abb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801abb4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801abb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801abb8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801abbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801abbe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801abc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801abc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801abc4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801abc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801abc8:	2200      	movs	r2, #0
 801abca:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801abce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801abd0:	2200      	movs	r2, #0
 801abd2:	f883 217c 	strb.w	r2, [r3, #380]	@ 0x17c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801abd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801abd8:	3358      	adds	r3, #88	@ 0x58
 801abda:	f44f 7290 	mov.w	r2, #288	@ 0x120
 801abde:	2100      	movs	r1, #0
 801abe0:	4618      	mov	r0, r3
 801abe2:	f01b f905 	bl	8035df0 <memset>
 801abe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801abe8:	4a20      	ldr	r2, [pc, #128]	@ (801ac6c <prvInitialiseNewTask+0x194>)
 801abea:	65da      	str	r2, [r3, #92]	@ 0x5c
 801abec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801abee:	4a20      	ldr	r2, [pc, #128]	@ (801ac70 <prvInitialiseNewTask+0x198>)
 801abf0:	661a      	str	r2, [r3, #96]	@ 0x60
 801abf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801abf4:	4a1f      	ldr	r2, [pc, #124]	@ (801ac74 <prvInitialiseNewTask+0x19c>)
 801abf6:	665a      	str	r2, [r3, #100]	@ 0x64
 801abf8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801abfa:	f04f 0201 	mov.w	r2, #1
 801abfe:	f04f 0300 	mov.w	r3, #0
 801ac02:	e9c1 233c 	strd	r2, r3, [r1, #240]	@ 0xf0
 801ac06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ac08:	f243 320e 	movw	r2, #13070	@ 0x330e
 801ac0c:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
 801ac10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ac12:	f64a 32cd 	movw	r2, #43981	@ 0xabcd
 801ac16:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
 801ac1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ac1c:	f241 2234 	movw	r2, #4660	@ 0x1234
 801ac20:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc
 801ac24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ac26:	f24e 626d 	movw	r2, #58989	@ 0xe66d
 801ac2a:	f8a3 20fe 	strh.w	r2, [r3, #254]	@ 0xfe
 801ac2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ac30:	f64d 62ec 	movw	r2, #57068	@ 0xdeec
 801ac34:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
 801ac38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ac3a:	2205      	movs	r2, #5
 801ac3c:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
 801ac40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ac42:	220b      	movs	r2, #11
 801ac44:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801ac48:	683a      	ldr	r2, [r7, #0]
 801ac4a:	68f9      	ldr	r1, [r7, #12]
 801ac4c:	69b8      	ldr	r0, [r7, #24]
 801ac4e:	f001 fa69 	bl	801c124 <pxPortInitialiseStack>
 801ac52:	4602      	mov	r2, r0
 801ac54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ac56:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801ac58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ac5a:	2b00      	cmp	r3, #0
 801ac5c:	d002      	beq.n	801ac64 <prvInitialiseNewTask+0x18c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801ac5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ac60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801ac62:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801ac64:	bf00      	nop
 801ac66:	3720      	adds	r7, #32
 801ac68:	46bd      	mov	sp, r7
 801ac6a:	bd80      	pop	{r7, pc}
 801ac6c:	20018178 	.word	0x20018178
 801ac70:	200181e0 	.word	0x200181e0
 801ac74:	20018248 	.word	0x20018248

0801ac78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801ac78:	b580      	push	{r7, lr}
 801ac7a:	b082      	sub	sp, #8
 801ac7c:	af00      	add	r7, sp, #0
 801ac7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801ac80:	f001 fb82 	bl	801c388 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801ac84:	4b2d      	ldr	r3, [pc, #180]	@ (801ad3c <prvAddNewTaskToReadyList+0xc4>)
 801ac86:	681b      	ldr	r3, [r3, #0]
 801ac88:	3301      	adds	r3, #1
 801ac8a:	4a2c      	ldr	r2, [pc, #176]	@ (801ad3c <prvAddNewTaskToReadyList+0xc4>)
 801ac8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801ac8e:	4b2c      	ldr	r3, [pc, #176]	@ (801ad40 <prvAddNewTaskToReadyList+0xc8>)
 801ac90:	681b      	ldr	r3, [r3, #0]
 801ac92:	2b00      	cmp	r3, #0
 801ac94:	d109      	bne.n	801acaa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801ac96:	4a2a      	ldr	r2, [pc, #168]	@ (801ad40 <prvAddNewTaskToReadyList+0xc8>)
 801ac98:	687b      	ldr	r3, [r7, #4]
 801ac9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801ac9c:	4b27      	ldr	r3, [pc, #156]	@ (801ad3c <prvAddNewTaskToReadyList+0xc4>)
 801ac9e:	681b      	ldr	r3, [r3, #0]
 801aca0:	2b01      	cmp	r3, #1
 801aca2:	d110      	bne.n	801acc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801aca4:	f000 fc2e 	bl	801b504 <prvInitialiseTaskLists>
 801aca8:	e00d      	b.n	801acc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801acaa:	4b26      	ldr	r3, [pc, #152]	@ (801ad44 <prvAddNewTaskToReadyList+0xcc>)
 801acac:	681b      	ldr	r3, [r3, #0]
 801acae:	2b00      	cmp	r3, #0
 801acb0:	d109      	bne.n	801acc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801acb2:	4b23      	ldr	r3, [pc, #140]	@ (801ad40 <prvAddNewTaskToReadyList+0xc8>)
 801acb4:	681b      	ldr	r3, [r3, #0]
 801acb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801acb8:	687b      	ldr	r3, [r7, #4]
 801acba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801acbc:	429a      	cmp	r2, r3
 801acbe:	d802      	bhi.n	801acc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801acc0:	4a1f      	ldr	r2, [pc, #124]	@ (801ad40 <prvAddNewTaskToReadyList+0xc8>)
 801acc2:	687b      	ldr	r3, [r7, #4]
 801acc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801acc6:	4b20      	ldr	r3, [pc, #128]	@ (801ad48 <prvAddNewTaskToReadyList+0xd0>)
 801acc8:	681b      	ldr	r3, [r3, #0]
 801acca:	3301      	adds	r3, #1
 801accc:	4a1e      	ldr	r2, [pc, #120]	@ (801ad48 <prvAddNewTaskToReadyList+0xd0>)
 801acce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801acd0:	4b1d      	ldr	r3, [pc, #116]	@ (801ad48 <prvAddNewTaskToReadyList+0xd0>)
 801acd2:	681a      	ldr	r2, [r3, #0]
 801acd4:	687b      	ldr	r3, [r7, #4]
 801acd6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801acd8:	687b      	ldr	r3, [r7, #4]
 801acda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801acdc:	4b1b      	ldr	r3, [pc, #108]	@ (801ad4c <prvAddNewTaskToReadyList+0xd4>)
 801acde:	681b      	ldr	r3, [r3, #0]
 801ace0:	429a      	cmp	r2, r3
 801ace2:	d903      	bls.n	801acec <prvAddNewTaskToReadyList+0x74>
 801ace4:	687b      	ldr	r3, [r7, #4]
 801ace6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ace8:	4a18      	ldr	r2, [pc, #96]	@ (801ad4c <prvAddNewTaskToReadyList+0xd4>)
 801acea:	6013      	str	r3, [r2, #0]
 801acec:	687b      	ldr	r3, [r7, #4]
 801acee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801acf0:	4613      	mov	r3, r2
 801acf2:	009b      	lsls	r3, r3, #2
 801acf4:	4413      	add	r3, r2
 801acf6:	009b      	lsls	r3, r3, #2
 801acf8:	4a15      	ldr	r2, [pc, #84]	@ (801ad50 <prvAddNewTaskToReadyList+0xd8>)
 801acfa:	441a      	add	r2, r3
 801acfc:	687b      	ldr	r3, [r7, #4]
 801acfe:	3304      	adds	r3, #4
 801ad00:	4619      	mov	r1, r3
 801ad02:	4610      	mov	r0, r2
 801ad04:	f7fe fcff 	bl	8019706 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801ad08:	f001 fb70 	bl	801c3ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801ad0c:	4b0d      	ldr	r3, [pc, #52]	@ (801ad44 <prvAddNewTaskToReadyList+0xcc>)
 801ad0e:	681b      	ldr	r3, [r3, #0]
 801ad10:	2b00      	cmp	r3, #0
 801ad12:	d00e      	beq.n	801ad32 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801ad14:	4b0a      	ldr	r3, [pc, #40]	@ (801ad40 <prvAddNewTaskToReadyList+0xc8>)
 801ad16:	681b      	ldr	r3, [r3, #0]
 801ad18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ad1a:	687b      	ldr	r3, [r7, #4]
 801ad1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ad1e:	429a      	cmp	r2, r3
 801ad20:	d207      	bcs.n	801ad32 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801ad22:	4b0c      	ldr	r3, [pc, #48]	@ (801ad54 <prvAddNewTaskToReadyList+0xdc>)
 801ad24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801ad28:	601a      	str	r2, [r3, #0]
 801ad2a:	f3bf 8f4f 	dsb	sy
 801ad2e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801ad32:	bf00      	nop
 801ad34:	3708      	adds	r7, #8
 801ad36:	46bd      	mov	sp, r7
 801ad38:	bd80      	pop	{r7, pc}
 801ad3a:	bf00      	nop
 801ad3c:	20001e14 	.word	0x20001e14
 801ad40:	20001940 	.word	0x20001940
 801ad44:	20001e20 	.word	0x20001e20
 801ad48:	20001e30 	.word	0x20001e30
 801ad4c:	20001e1c 	.word	0x20001e1c
 801ad50:	20001944 	.word	0x20001944
 801ad54:	e000ed04 	.word	0xe000ed04

0801ad58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801ad58:	b580      	push	{r7, lr}
 801ad5a:	b084      	sub	sp, #16
 801ad5c:	af00      	add	r7, sp, #0
 801ad5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801ad60:	2300      	movs	r3, #0
 801ad62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801ad64:	687b      	ldr	r3, [r7, #4]
 801ad66:	2b00      	cmp	r3, #0
 801ad68:	d018      	beq.n	801ad9c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801ad6a:	4b14      	ldr	r3, [pc, #80]	@ (801adbc <vTaskDelay+0x64>)
 801ad6c:	681b      	ldr	r3, [r3, #0]
 801ad6e:	2b00      	cmp	r3, #0
 801ad70:	d00b      	beq.n	801ad8a <vTaskDelay+0x32>
	__asm volatile
 801ad72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ad76:	f383 8811 	msr	BASEPRI, r3
 801ad7a:	f3bf 8f6f 	isb	sy
 801ad7e:	f3bf 8f4f 	dsb	sy
 801ad82:	60bb      	str	r3, [r7, #8]
}
 801ad84:	bf00      	nop
 801ad86:	bf00      	nop
 801ad88:	e7fd      	b.n	801ad86 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801ad8a:	f000 f88b 	bl	801aea4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801ad8e:	2100      	movs	r1, #0
 801ad90:	6878      	ldr	r0, [r7, #4]
 801ad92:	f000 fe19 	bl	801b9c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801ad96:	f000 f893 	bl	801aec0 <xTaskResumeAll>
 801ad9a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801ad9c:	68fb      	ldr	r3, [r7, #12]
 801ad9e:	2b00      	cmp	r3, #0
 801ada0:	d107      	bne.n	801adb2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801ada2:	4b07      	ldr	r3, [pc, #28]	@ (801adc0 <vTaskDelay+0x68>)
 801ada4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801ada8:	601a      	str	r2, [r3, #0]
 801adaa:	f3bf 8f4f 	dsb	sy
 801adae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801adb2:	bf00      	nop
 801adb4:	3710      	adds	r7, #16
 801adb6:	46bd      	mov	sp, r7
 801adb8:	bd80      	pop	{r7, pc}
 801adba:	bf00      	nop
 801adbc:	20001e3c 	.word	0x20001e3c
 801adc0:	e000ed04 	.word	0xe000ed04

0801adc4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801adc4:	b580      	push	{r7, lr}
 801adc6:	b08a      	sub	sp, #40	@ 0x28
 801adc8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801adca:	2300      	movs	r3, #0
 801adcc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801adce:	2300      	movs	r3, #0
 801add0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801add2:	463a      	mov	r2, r7
 801add4:	1d39      	adds	r1, r7, #4
 801add6:	f107 0308 	add.w	r3, r7, #8
 801adda:	4618      	mov	r0, r3
 801addc:	f7fe fc32 	bl	8019644 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801ade0:	6839      	ldr	r1, [r7, #0]
 801ade2:	687b      	ldr	r3, [r7, #4]
 801ade4:	68ba      	ldr	r2, [r7, #8]
 801ade6:	9202      	str	r2, [sp, #8]
 801ade8:	9301      	str	r3, [sp, #4]
 801adea:	2300      	movs	r3, #0
 801adec:	9300      	str	r3, [sp, #0]
 801adee:	2300      	movs	r3, #0
 801adf0:	460a      	mov	r2, r1
 801adf2:	4924      	ldr	r1, [pc, #144]	@ (801ae84 <vTaskStartScheduler+0xc0>)
 801adf4:	4824      	ldr	r0, [pc, #144]	@ (801ae88 <vTaskStartScheduler+0xc4>)
 801adf6:	f7ff fdc7 	bl	801a988 <xTaskCreateStatic>
 801adfa:	4603      	mov	r3, r0
 801adfc:	4a23      	ldr	r2, [pc, #140]	@ (801ae8c <vTaskStartScheduler+0xc8>)
 801adfe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801ae00:	4b22      	ldr	r3, [pc, #136]	@ (801ae8c <vTaskStartScheduler+0xc8>)
 801ae02:	681b      	ldr	r3, [r3, #0]
 801ae04:	2b00      	cmp	r3, #0
 801ae06:	d002      	beq.n	801ae0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801ae08:	2301      	movs	r3, #1
 801ae0a:	617b      	str	r3, [r7, #20]
 801ae0c:	e001      	b.n	801ae12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801ae0e:	2300      	movs	r3, #0
 801ae10:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801ae12:	697b      	ldr	r3, [r7, #20]
 801ae14:	2b01      	cmp	r3, #1
 801ae16:	d102      	bne.n	801ae1e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801ae18:	f000 fe2a 	bl	801ba70 <xTimerCreateTimerTask>
 801ae1c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801ae1e:	697b      	ldr	r3, [r7, #20]
 801ae20:	2b01      	cmp	r3, #1
 801ae22:	d11b      	bne.n	801ae5c <vTaskStartScheduler+0x98>
	__asm volatile
 801ae24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ae28:	f383 8811 	msr	BASEPRI, r3
 801ae2c:	f3bf 8f6f 	isb	sy
 801ae30:	f3bf 8f4f 	dsb	sy
 801ae34:	613b      	str	r3, [r7, #16]
}
 801ae36:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801ae38:	4b15      	ldr	r3, [pc, #84]	@ (801ae90 <vTaskStartScheduler+0xcc>)
 801ae3a:	681b      	ldr	r3, [r3, #0]
 801ae3c:	3358      	adds	r3, #88	@ 0x58
 801ae3e:	4a15      	ldr	r2, [pc, #84]	@ (801ae94 <vTaskStartScheduler+0xd0>)
 801ae40:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801ae42:	4b15      	ldr	r3, [pc, #84]	@ (801ae98 <vTaskStartScheduler+0xd4>)
 801ae44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801ae48:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801ae4a:	4b14      	ldr	r3, [pc, #80]	@ (801ae9c <vTaskStartScheduler+0xd8>)
 801ae4c:	2201      	movs	r2, #1
 801ae4e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801ae50:	4b13      	ldr	r3, [pc, #76]	@ (801aea0 <vTaskStartScheduler+0xdc>)
 801ae52:	2200      	movs	r2, #0
 801ae54:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801ae56:	f001 f9f3 	bl	801c240 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801ae5a:	e00f      	b.n	801ae7c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801ae5c:	697b      	ldr	r3, [r7, #20]
 801ae5e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801ae62:	d10b      	bne.n	801ae7c <vTaskStartScheduler+0xb8>
	__asm volatile
 801ae64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ae68:	f383 8811 	msr	BASEPRI, r3
 801ae6c:	f3bf 8f6f 	isb	sy
 801ae70:	f3bf 8f4f 	dsb	sy
 801ae74:	60fb      	str	r3, [r7, #12]
}
 801ae76:	bf00      	nop
 801ae78:	bf00      	nop
 801ae7a:	e7fd      	b.n	801ae78 <vTaskStartScheduler+0xb4>
}
 801ae7c:	bf00      	nop
 801ae7e:	3718      	adds	r7, #24
 801ae80:	46bd      	mov	sp, r7
 801ae82:	bd80      	pop	{r7, pc}
 801ae84:	08040874 	.word	0x08040874
 801ae88:	0801b4d5 	.word	0x0801b4d5
 801ae8c:	20001e38 	.word	0x20001e38
 801ae90:	20001940 	.word	0x20001940
 801ae94:	20000430 	.word	0x20000430
 801ae98:	20001e34 	.word	0x20001e34
 801ae9c:	20001e20 	.word	0x20001e20
 801aea0:	20001e18 	.word	0x20001e18

0801aea4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801aea4:	b480      	push	{r7}
 801aea6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801aea8:	4b04      	ldr	r3, [pc, #16]	@ (801aebc <vTaskSuspendAll+0x18>)
 801aeaa:	681b      	ldr	r3, [r3, #0]
 801aeac:	3301      	adds	r3, #1
 801aeae:	4a03      	ldr	r2, [pc, #12]	@ (801aebc <vTaskSuspendAll+0x18>)
 801aeb0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801aeb2:	bf00      	nop
 801aeb4:	46bd      	mov	sp, r7
 801aeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aeba:	4770      	bx	lr
 801aebc:	20001e3c 	.word	0x20001e3c

0801aec0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801aec0:	b580      	push	{r7, lr}
 801aec2:	b084      	sub	sp, #16
 801aec4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801aec6:	2300      	movs	r3, #0
 801aec8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801aeca:	2300      	movs	r3, #0
 801aecc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801aece:	4b42      	ldr	r3, [pc, #264]	@ (801afd8 <xTaskResumeAll+0x118>)
 801aed0:	681b      	ldr	r3, [r3, #0]
 801aed2:	2b00      	cmp	r3, #0
 801aed4:	d10b      	bne.n	801aeee <xTaskResumeAll+0x2e>
	__asm volatile
 801aed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801aeda:	f383 8811 	msr	BASEPRI, r3
 801aede:	f3bf 8f6f 	isb	sy
 801aee2:	f3bf 8f4f 	dsb	sy
 801aee6:	603b      	str	r3, [r7, #0]
}
 801aee8:	bf00      	nop
 801aeea:	bf00      	nop
 801aeec:	e7fd      	b.n	801aeea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801aeee:	f001 fa4b 	bl	801c388 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801aef2:	4b39      	ldr	r3, [pc, #228]	@ (801afd8 <xTaskResumeAll+0x118>)
 801aef4:	681b      	ldr	r3, [r3, #0]
 801aef6:	3b01      	subs	r3, #1
 801aef8:	4a37      	ldr	r2, [pc, #220]	@ (801afd8 <xTaskResumeAll+0x118>)
 801aefa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801aefc:	4b36      	ldr	r3, [pc, #216]	@ (801afd8 <xTaskResumeAll+0x118>)
 801aefe:	681b      	ldr	r3, [r3, #0]
 801af00:	2b00      	cmp	r3, #0
 801af02:	d162      	bne.n	801afca <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801af04:	4b35      	ldr	r3, [pc, #212]	@ (801afdc <xTaskResumeAll+0x11c>)
 801af06:	681b      	ldr	r3, [r3, #0]
 801af08:	2b00      	cmp	r3, #0
 801af0a:	d05e      	beq.n	801afca <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801af0c:	e02f      	b.n	801af6e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801af0e:	4b34      	ldr	r3, [pc, #208]	@ (801afe0 <xTaskResumeAll+0x120>)
 801af10:	68db      	ldr	r3, [r3, #12]
 801af12:	68db      	ldr	r3, [r3, #12]
 801af14:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801af16:	68fb      	ldr	r3, [r7, #12]
 801af18:	3318      	adds	r3, #24
 801af1a:	4618      	mov	r0, r3
 801af1c:	f7fe fc50 	bl	80197c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801af20:	68fb      	ldr	r3, [r7, #12]
 801af22:	3304      	adds	r3, #4
 801af24:	4618      	mov	r0, r3
 801af26:	f7fe fc4b 	bl	80197c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801af2a:	68fb      	ldr	r3, [r7, #12]
 801af2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801af2e:	4b2d      	ldr	r3, [pc, #180]	@ (801afe4 <xTaskResumeAll+0x124>)
 801af30:	681b      	ldr	r3, [r3, #0]
 801af32:	429a      	cmp	r2, r3
 801af34:	d903      	bls.n	801af3e <xTaskResumeAll+0x7e>
 801af36:	68fb      	ldr	r3, [r7, #12]
 801af38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801af3a:	4a2a      	ldr	r2, [pc, #168]	@ (801afe4 <xTaskResumeAll+0x124>)
 801af3c:	6013      	str	r3, [r2, #0]
 801af3e:	68fb      	ldr	r3, [r7, #12]
 801af40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801af42:	4613      	mov	r3, r2
 801af44:	009b      	lsls	r3, r3, #2
 801af46:	4413      	add	r3, r2
 801af48:	009b      	lsls	r3, r3, #2
 801af4a:	4a27      	ldr	r2, [pc, #156]	@ (801afe8 <xTaskResumeAll+0x128>)
 801af4c:	441a      	add	r2, r3
 801af4e:	68fb      	ldr	r3, [r7, #12]
 801af50:	3304      	adds	r3, #4
 801af52:	4619      	mov	r1, r3
 801af54:	4610      	mov	r0, r2
 801af56:	f7fe fbd6 	bl	8019706 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801af5a:	68fb      	ldr	r3, [r7, #12]
 801af5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801af5e:	4b23      	ldr	r3, [pc, #140]	@ (801afec <xTaskResumeAll+0x12c>)
 801af60:	681b      	ldr	r3, [r3, #0]
 801af62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801af64:	429a      	cmp	r2, r3
 801af66:	d302      	bcc.n	801af6e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 801af68:	4b21      	ldr	r3, [pc, #132]	@ (801aff0 <xTaskResumeAll+0x130>)
 801af6a:	2201      	movs	r2, #1
 801af6c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801af6e:	4b1c      	ldr	r3, [pc, #112]	@ (801afe0 <xTaskResumeAll+0x120>)
 801af70:	681b      	ldr	r3, [r3, #0]
 801af72:	2b00      	cmp	r3, #0
 801af74:	d1cb      	bne.n	801af0e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801af76:	68fb      	ldr	r3, [r7, #12]
 801af78:	2b00      	cmp	r3, #0
 801af7a:	d001      	beq.n	801af80 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801af7c:	f000 fb66 	bl	801b64c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801af80:	4b1c      	ldr	r3, [pc, #112]	@ (801aff4 <xTaskResumeAll+0x134>)
 801af82:	681b      	ldr	r3, [r3, #0]
 801af84:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801af86:	687b      	ldr	r3, [r7, #4]
 801af88:	2b00      	cmp	r3, #0
 801af8a:	d010      	beq.n	801afae <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801af8c:	f000 f846 	bl	801b01c <xTaskIncrementTick>
 801af90:	4603      	mov	r3, r0
 801af92:	2b00      	cmp	r3, #0
 801af94:	d002      	beq.n	801af9c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 801af96:	4b16      	ldr	r3, [pc, #88]	@ (801aff0 <xTaskResumeAll+0x130>)
 801af98:	2201      	movs	r2, #1
 801af9a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801af9c:	687b      	ldr	r3, [r7, #4]
 801af9e:	3b01      	subs	r3, #1
 801afa0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801afa2:	687b      	ldr	r3, [r7, #4]
 801afa4:	2b00      	cmp	r3, #0
 801afa6:	d1f1      	bne.n	801af8c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 801afa8:	4b12      	ldr	r3, [pc, #72]	@ (801aff4 <xTaskResumeAll+0x134>)
 801afaa:	2200      	movs	r2, #0
 801afac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801afae:	4b10      	ldr	r3, [pc, #64]	@ (801aff0 <xTaskResumeAll+0x130>)
 801afb0:	681b      	ldr	r3, [r3, #0]
 801afb2:	2b00      	cmp	r3, #0
 801afb4:	d009      	beq.n	801afca <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801afb6:	2301      	movs	r3, #1
 801afb8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801afba:	4b0f      	ldr	r3, [pc, #60]	@ (801aff8 <xTaskResumeAll+0x138>)
 801afbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801afc0:	601a      	str	r2, [r3, #0]
 801afc2:	f3bf 8f4f 	dsb	sy
 801afc6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801afca:	f001 fa0f 	bl	801c3ec <vPortExitCritical>

	return xAlreadyYielded;
 801afce:	68bb      	ldr	r3, [r7, #8]
}
 801afd0:	4618      	mov	r0, r3
 801afd2:	3710      	adds	r7, #16
 801afd4:	46bd      	mov	sp, r7
 801afd6:	bd80      	pop	{r7, pc}
 801afd8:	20001e3c 	.word	0x20001e3c
 801afdc:	20001e14 	.word	0x20001e14
 801afe0:	20001dd4 	.word	0x20001dd4
 801afe4:	20001e1c 	.word	0x20001e1c
 801afe8:	20001944 	.word	0x20001944
 801afec:	20001940 	.word	0x20001940
 801aff0:	20001e28 	.word	0x20001e28
 801aff4:	20001e24 	.word	0x20001e24
 801aff8:	e000ed04 	.word	0xe000ed04

0801affc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801affc:	b480      	push	{r7}
 801affe:	b083      	sub	sp, #12
 801b000:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801b002:	4b05      	ldr	r3, [pc, #20]	@ (801b018 <xTaskGetTickCount+0x1c>)
 801b004:	681b      	ldr	r3, [r3, #0]
 801b006:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801b008:	687b      	ldr	r3, [r7, #4]
}
 801b00a:	4618      	mov	r0, r3
 801b00c:	370c      	adds	r7, #12
 801b00e:	46bd      	mov	sp, r7
 801b010:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b014:	4770      	bx	lr
 801b016:	bf00      	nop
 801b018:	20001e18 	.word	0x20001e18

0801b01c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801b01c:	b580      	push	{r7, lr}
 801b01e:	b086      	sub	sp, #24
 801b020:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801b022:	2300      	movs	r3, #0
 801b024:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b026:	4b4f      	ldr	r3, [pc, #316]	@ (801b164 <xTaskIncrementTick+0x148>)
 801b028:	681b      	ldr	r3, [r3, #0]
 801b02a:	2b00      	cmp	r3, #0
 801b02c:	f040 8090 	bne.w	801b150 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801b030:	4b4d      	ldr	r3, [pc, #308]	@ (801b168 <xTaskIncrementTick+0x14c>)
 801b032:	681b      	ldr	r3, [r3, #0]
 801b034:	3301      	adds	r3, #1
 801b036:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801b038:	4a4b      	ldr	r2, [pc, #300]	@ (801b168 <xTaskIncrementTick+0x14c>)
 801b03a:	693b      	ldr	r3, [r7, #16]
 801b03c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801b03e:	693b      	ldr	r3, [r7, #16]
 801b040:	2b00      	cmp	r3, #0
 801b042:	d121      	bne.n	801b088 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 801b044:	4b49      	ldr	r3, [pc, #292]	@ (801b16c <xTaskIncrementTick+0x150>)
 801b046:	681b      	ldr	r3, [r3, #0]
 801b048:	681b      	ldr	r3, [r3, #0]
 801b04a:	2b00      	cmp	r3, #0
 801b04c:	d00b      	beq.n	801b066 <xTaskIncrementTick+0x4a>
	__asm volatile
 801b04e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b052:	f383 8811 	msr	BASEPRI, r3
 801b056:	f3bf 8f6f 	isb	sy
 801b05a:	f3bf 8f4f 	dsb	sy
 801b05e:	603b      	str	r3, [r7, #0]
}
 801b060:	bf00      	nop
 801b062:	bf00      	nop
 801b064:	e7fd      	b.n	801b062 <xTaskIncrementTick+0x46>
 801b066:	4b41      	ldr	r3, [pc, #260]	@ (801b16c <xTaskIncrementTick+0x150>)
 801b068:	681b      	ldr	r3, [r3, #0]
 801b06a:	60fb      	str	r3, [r7, #12]
 801b06c:	4b40      	ldr	r3, [pc, #256]	@ (801b170 <xTaskIncrementTick+0x154>)
 801b06e:	681b      	ldr	r3, [r3, #0]
 801b070:	4a3e      	ldr	r2, [pc, #248]	@ (801b16c <xTaskIncrementTick+0x150>)
 801b072:	6013      	str	r3, [r2, #0]
 801b074:	4a3e      	ldr	r2, [pc, #248]	@ (801b170 <xTaskIncrementTick+0x154>)
 801b076:	68fb      	ldr	r3, [r7, #12]
 801b078:	6013      	str	r3, [r2, #0]
 801b07a:	4b3e      	ldr	r3, [pc, #248]	@ (801b174 <xTaskIncrementTick+0x158>)
 801b07c:	681b      	ldr	r3, [r3, #0]
 801b07e:	3301      	adds	r3, #1
 801b080:	4a3c      	ldr	r2, [pc, #240]	@ (801b174 <xTaskIncrementTick+0x158>)
 801b082:	6013      	str	r3, [r2, #0]
 801b084:	f000 fae2 	bl	801b64c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801b088:	4b3b      	ldr	r3, [pc, #236]	@ (801b178 <xTaskIncrementTick+0x15c>)
 801b08a:	681b      	ldr	r3, [r3, #0]
 801b08c:	693a      	ldr	r2, [r7, #16]
 801b08e:	429a      	cmp	r2, r3
 801b090:	d349      	bcc.n	801b126 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b092:	4b36      	ldr	r3, [pc, #216]	@ (801b16c <xTaskIncrementTick+0x150>)
 801b094:	681b      	ldr	r3, [r3, #0]
 801b096:	681b      	ldr	r3, [r3, #0]
 801b098:	2b00      	cmp	r3, #0
 801b09a:	d104      	bne.n	801b0a6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b09c:	4b36      	ldr	r3, [pc, #216]	@ (801b178 <xTaskIncrementTick+0x15c>)
 801b09e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801b0a2:	601a      	str	r2, [r3, #0]
					break;
 801b0a4:	e03f      	b.n	801b126 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b0a6:	4b31      	ldr	r3, [pc, #196]	@ (801b16c <xTaskIncrementTick+0x150>)
 801b0a8:	681b      	ldr	r3, [r3, #0]
 801b0aa:	68db      	ldr	r3, [r3, #12]
 801b0ac:	68db      	ldr	r3, [r3, #12]
 801b0ae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801b0b0:	68bb      	ldr	r3, [r7, #8]
 801b0b2:	685b      	ldr	r3, [r3, #4]
 801b0b4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801b0b6:	693a      	ldr	r2, [r7, #16]
 801b0b8:	687b      	ldr	r3, [r7, #4]
 801b0ba:	429a      	cmp	r2, r3
 801b0bc:	d203      	bcs.n	801b0c6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801b0be:	4a2e      	ldr	r2, [pc, #184]	@ (801b178 <xTaskIncrementTick+0x15c>)
 801b0c0:	687b      	ldr	r3, [r7, #4]
 801b0c2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801b0c4:	e02f      	b.n	801b126 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b0c6:	68bb      	ldr	r3, [r7, #8]
 801b0c8:	3304      	adds	r3, #4
 801b0ca:	4618      	mov	r0, r3
 801b0cc:	f7fe fb78 	bl	80197c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801b0d0:	68bb      	ldr	r3, [r7, #8]
 801b0d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b0d4:	2b00      	cmp	r3, #0
 801b0d6:	d004      	beq.n	801b0e2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801b0d8:	68bb      	ldr	r3, [r7, #8]
 801b0da:	3318      	adds	r3, #24
 801b0dc:	4618      	mov	r0, r3
 801b0de:	f7fe fb6f 	bl	80197c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801b0e2:	68bb      	ldr	r3, [r7, #8]
 801b0e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b0e6:	4b25      	ldr	r3, [pc, #148]	@ (801b17c <xTaskIncrementTick+0x160>)
 801b0e8:	681b      	ldr	r3, [r3, #0]
 801b0ea:	429a      	cmp	r2, r3
 801b0ec:	d903      	bls.n	801b0f6 <xTaskIncrementTick+0xda>
 801b0ee:	68bb      	ldr	r3, [r7, #8]
 801b0f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b0f2:	4a22      	ldr	r2, [pc, #136]	@ (801b17c <xTaskIncrementTick+0x160>)
 801b0f4:	6013      	str	r3, [r2, #0]
 801b0f6:	68bb      	ldr	r3, [r7, #8]
 801b0f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b0fa:	4613      	mov	r3, r2
 801b0fc:	009b      	lsls	r3, r3, #2
 801b0fe:	4413      	add	r3, r2
 801b100:	009b      	lsls	r3, r3, #2
 801b102:	4a1f      	ldr	r2, [pc, #124]	@ (801b180 <xTaskIncrementTick+0x164>)
 801b104:	441a      	add	r2, r3
 801b106:	68bb      	ldr	r3, [r7, #8]
 801b108:	3304      	adds	r3, #4
 801b10a:	4619      	mov	r1, r3
 801b10c:	4610      	mov	r0, r2
 801b10e:	f7fe fafa 	bl	8019706 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801b112:	68bb      	ldr	r3, [r7, #8]
 801b114:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b116:	4b1b      	ldr	r3, [pc, #108]	@ (801b184 <xTaskIncrementTick+0x168>)
 801b118:	681b      	ldr	r3, [r3, #0]
 801b11a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b11c:	429a      	cmp	r2, r3
 801b11e:	d3b8      	bcc.n	801b092 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 801b120:	2301      	movs	r3, #1
 801b122:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b124:	e7b5      	b.n	801b092 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801b126:	4b17      	ldr	r3, [pc, #92]	@ (801b184 <xTaskIncrementTick+0x168>)
 801b128:	681b      	ldr	r3, [r3, #0]
 801b12a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b12c:	4914      	ldr	r1, [pc, #80]	@ (801b180 <xTaskIncrementTick+0x164>)
 801b12e:	4613      	mov	r3, r2
 801b130:	009b      	lsls	r3, r3, #2
 801b132:	4413      	add	r3, r2
 801b134:	009b      	lsls	r3, r3, #2
 801b136:	440b      	add	r3, r1
 801b138:	681b      	ldr	r3, [r3, #0]
 801b13a:	2b01      	cmp	r3, #1
 801b13c:	d901      	bls.n	801b142 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 801b13e:	2301      	movs	r3, #1
 801b140:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801b142:	4b11      	ldr	r3, [pc, #68]	@ (801b188 <xTaskIncrementTick+0x16c>)
 801b144:	681b      	ldr	r3, [r3, #0]
 801b146:	2b00      	cmp	r3, #0
 801b148:	d007      	beq.n	801b15a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 801b14a:	2301      	movs	r3, #1
 801b14c:	617b      	str	r3, [r7, #20]
 801b14e:	e004      	b.n	801b15a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801b150:	4b0e      	ldr	r3, [pc, #56]	@ (801b18c <xTaskIncrementTick+0x170>)
 801b152:	681b      	ldr	r3, [r3, #0]
 801b154:	3301      	adds	r3, #1
 801b156:	4a0d      	ldr	r2, [pc, #52]	@ (801b18c <xTaskIncrementTick+0x170>)
 801b158:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801b15a:	697b      	ldr	r3, [r7, #20]
}
 801b15c:	4618      	mov	r0, r3
 801b15e:	3718      	adds	r7, #24
 801b160:	46bd      	mov	sp, r7
 801b162:	bd80      	pop	{r7, pc}
 801b164:	20001e3c 	.word	0x20001e3c
 801b168:	20001e18 	.word	0x20001e18
 801b16c:	20001dcc 	.word	0x20001dcc
 801b170:	20001dd0 	.word	0x20001dd0
 801b174:	20001e2c 	.word	0x20001e2c
 801b178:	20001e34 	.word	0x20001e34
 801b17c:	20001e1c 	.word	0x20001e1c
 801b180:	20001944 	.word	0x20001944
 801b184:	20001940 	.word	0x20001940
 801b188:	20001e28 	.word	0x20001e28
 801b18c:	20001e24 	.word	0x20001e24

0801b190 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801b190:	b480      	push	{r7}
 801b192:	b085      	sub	sp, #20
 801b194:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801b196:	4b2b      	ldr	r3, [pc, #172]	@ (801b244 <vTaskSwitchContext+0xb4>)
 801b198:	681b      	ldr	r3, [r3, #0]
 801b19a:	2b00      	cmp	r3, #0
 801b19c:	d003      	beq.n	801b1a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801b19e:	4b2a      	ldr	r3, [pc, #168]	@ (801b248 <vTaskSwitchContext+0xb8>)
 801b1a0:	2201      	movs	r2, #1
 801b1a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801b1a4:	e047      	b.n	801b236 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 801b1a6:	4b28      	ldr	r3, [pc, #160]	@ (801b248 <vTaskSwitchContext+0xb8>)
 801b1a8:	2200      	movs	r2, #0
 801b1aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b1ac:	4b27      	ldr	r3, [pc, #156]	@ (801b24c <vTaskSwitchContext+0xbc>)
 801b1ae:	681b      	ldr	r3, [r3, #0]
 801b1b0:	60fb      	str	r3, [r7, #12]
 801b1b2:	e011      	b.n	801b1d8 <vTaskSwitchContext+0x48>
 801b1b4:	68fb      	ldr	r3, [r7, #12]
 801b1b6:	2b00      	cmp	r3, #0
 801b1b8:	d10b      	bne.n	801b1d2 <vTaskSwitchContext+0x42>
	__asm volatile
 801b1ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b1be:	f383 8811 	msr	BASEPRI, r3
 801b1c2:	f3bf 8f6f 	isb	sy
 801b1c6:	f3bf 8f4f 	dsb	sy
 801b1ca:	607b      	str	r3, [r7, #4]
}
 801b1cc:	bf00      	nop
 801b1ce:	bf00      	nop
 801b1d0:	e7fd      	b.n	801b1ce <vTaskSwitchContext+0x3e>
 801b1d2:	68fb      	ldr	r3, [r7, #12]
 801b1d4:	3b01      	subs	r3, #1
 801b1d6:	60fb      	str	r3, [r7, #12]
 801b1d8:	491d      	ldr	r1, [pc, #116]	@ (801b250 <vTaskSwitchContext+0xc0>)
 801b1da:	68fa      	ldr	r2, [r7, #12]
 801b1dc:	4613      	mov	r3, r2
 801b1de:	009b      	lsls	r3, r3, #2
 801b1e0:	4413      	add	r3, r2
 801b1e2:	009b      	lsls	r3, r3, #2
 801b1e4:	440b      	add	r3, r1
 801b1e6:	681b      	ldr	r3, [r3, #0]
 801b1e8:	2b00      	cmp	r3, #0
 801b1ea:	d0e3      	beq.n	801b1b4 <vTaskSwitchContext+0x24>
 801b1ec:	68fa      	ldr	r2, [r7, #12]
 801b1ee:	4613      	mov	r3, r2
 801b1f0:	009b      	lsls	r3, r3, #2
 801b1f2:	4413      	add	r3, r2
 801b1f4:	009b      	lsls	r3, r3, #2
 801b1f6:	4a16      	ldr	r2, [pc, #88]	@ (801b250 <vTaskSwitchContext+0xc0>)
 801b1f8:	4413      	add	r3, r2
 801b1fa:	60bb      	str	r3, [r7, #8]
 801b1fc:	68bb      	ldr	r3, [r7, #8]
 801b1fe:	685b      	ldr	r3, [r3, #4]
 801b200:	685a      	ldr	r2, [r3, #4]
 801b202:	68bb      	ldr	r3, [r7, #8]
 801b204:	605a      	str	r2, [r3, #4]
 801b206:	68bb      	ldr	r3, [r7, #8]
 801b208:	685a      	ldr	r2, [r3, #4]
 801b20a:	68bb      	ldr	r3, [r7, #8]
 801b20c:	3308      	adds	r3, #8
 801b20e:	429a      	cmp	r2, r3
 801b210:	d104      	bne.n	801b21c <vTaskSwitchContext+0x8c>
 801b212:	68bb      	ldr	r3, [r7, #8]
 801b214:	685b      	ldr	r3, [r3, #4]
 801b216:	685a      	ldr	r2, [r3, #4]
 801b218:	68bb      	ldr	r3, [r7, #8]
 801b21a:	605a      	str	r2, [r3, #4]
 801b21c:	68bb      	ldr	r3, [r7, #8]
 801b21e:	685b      	ldr	r3, [r3, #4]
 801b220:	68db      	ldr	r3, [r3, #12]
 801b222:	4a0c      	ldr	r2, [pc, #48]	@ (801b254 <vTaskSwitchContext+0xc4>)
 801b224:	6013      	str	r3, [r2, #0]
 801b226:	4a09      	ldr	r2, [pc, #36]	@ (801b24c <vTaskSwitchContext+0xbc>)
 801b228:	68fb      	ldr	r3, [r7, #12]
 801b22a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801b22c:	4b09      	ldr	r3, [pc, #36]	@ (801b254 <vTaskSwitchContext+0xc4>)
 801b22e:	681b      	ldr	r3, [r3, #0]
 801b230:	3358      	adds	r3, #88	@ 0x58
 801b232:	4a09      	ldr	r2, [pc, #36]	@ (801b258 <vTaskSwitchContext+0xc8>)
 801b234:	6013      	str	r3, [r2, #0]
}
 801b236:	bf00      	nop
 801b238:	3714      	adds	r7, #20
 801b23a:	46bd      	mov	sp, r7
 801b23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b240:	4770      	bx	lr
 801b242:	bf00      	nop
 801b244:	20001e3c 	.word	0x20001e3c
 801b248:	20001e28 	.word	0x20001e28
 801b24c:	20001e1c 	.word	0x20001e1c
 801b250:	20001944 	.word	0x20001944
 801b254:	20001940 	.word	0x20001940
 801b258:	20000430 	.word	0x20000430

0801b25c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801b25c:	b580      	push	{r7, lr}
 801b25e:	b084      	sub	sp, #16
 801b260:	af00      	add	r7, sp, #0
 801b262:	6078      	str	r0, [r7, #4]
 801b264:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801b266:	687b      	ldr	r3, [r7, #4]
 801b268:	2b00      	cmp	r3, #0
 801b26a:	d10b      	bne.n	801b284 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 801b26c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b270:	f383 8811 	msr	BASEPRI, r3
 801b274:	f3bf 8f6f 	isb	sy
 801b278:	f3bf 8f4f 	dsb	sy
 801b27c:	60fb      	str	r3, [r7, #12]
}
 801b27e:	bf00      	nop
 801b280:	bf00      	nop
 801b282:	e7fd      	b.n	801b280 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801b284:	4b07      	ldr	r3, [pc, #28]	@ (801b2a4 <vTaskPlaceOnEventList+0x48>)
 801b286:	681b      	ldr	r3, [r3, #0]
 801b288:	3318      	adds	r3, #24
 801b28a:	4619      	mov	r1, r3
 801b28c:	6878      	ldr	r0, [r7, #4]
 801b28e:	f7fe fa5e 	bl	801974e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801b292:	2101      	movs	r1, #1
 801b294:	6838      	ldr	r0, [r7, #0]
 801b296:	f000 fb97 	bl	801b9c8 <prvAddCurrentTaskToDelayedList>
}
 801b29a:	bf00      	nop
 801b29c:	3710      	adds	r7, #16
 801b29e:	46bd      	mov	sp, r7
 801b2a0:	bd80      	pop	{r7, pc}
 801b2a2:	bf00      	nop
 801b2a4:	20001940 	.word	0x20001940

0801b2a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801b2a8:	b580      	push	{r7, lr}
 801b2aa:	b086      	sub	sp, #24
 801b2ac:	af00      	add	r7, sp, #0
 801b2ae:	60f8      	str	r0, [r7, #12]
 801b2b0:	60b9      	str	r1, [r7, #8]
 801b2b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801b2b4:	68fb      	ldr	r3, [r7, #12]
 801b2b6:	2b00      	cmp	r3, #0
 801b2b8:	d10b      	bne.n	801b2d2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 801b2ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b2be:	f383 8811 	msr	BASEPRI, r3
 801b2c2:	f3bf 8f6f 	isb	sy
 801b2c6:	f3bf 8f4f 	dsb	sy
 801b2ca:	617b      	str	r3, [r7, #20]
}
 801b2cc:	bf00      	nop
 801b2ce:	bf00      	nop
 801b2d0:	e7fd      	b.n	801b2ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801b2d2:	4b0a      	ldr	r3, [pc, #40]	@ (801b2fc <vTaskPlaceOnEventListRestricted+0x54>)
 801b2d4:	681b      	ldr	r3, [r3, #0]
 801b2d6:	3318      	adds	r3, #24
 801b2d8:	4619      	mov	r1, r3
 801b2da:	68f8      	ldr	r0, [r7, #12]
 801b2dc:	f7fe fa13 	bl	8019706 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801b2e0:	687b      	ldr	r3, [r7, #4]
 801b2e2:	2b00      	cmp	r3, #0
 801b2e4:	d002      	beq.n	801b2ec <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 801b2e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b2ea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801b2ec:	6879      	ldr	r1, [r7, #4]
 801b2ee:	68b8      	ldr	r0, [r7, #8]
 801b2f0:	f000 fb6a 	bl	801b9c8 <prvAddCurrentTaskToDelayedList>
	}
 801b2f4:	bf00      	nop
 801b2f6:	3718      	adds	r7, #24
 801b2f8:	46bd      	mov	sp, r7
 801b2fa:	bd80      	pop	{r7, pc}
 801b2fc:	20001940 	.word	0x20001940

0801b300 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801b300:	b580      	push	{r7, lr}
 801b302:	b086      	sub	sp, #24
 801b304:	af00      	add	r7, sp, #0
 801b306:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b308:	687b      	ldr	r3, [r7, #4]
 801b30a:	68db      	ldr	r3, [r3, #12]
 801b30c:	68db      	ldr	r3, [r3, #12]
 801b30e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801b310:	693b      	ldr	r3, [r7, #16]
 801b312:	2b00      	cmp	r3, #0
 801b314:	d10b      	bne.n	801b32e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 801b316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b31a:	f383 8811 	msr	BASEPRI, r3
 801b31e:	f3bf 8f6f 	isb	sy
 801b322:	f3bf 8f4f 	dsb	sy
 801b326:	60fb      	str	r3, [r7, #12]
}
 801b328:	bf00      	nop
 801b32a:	bf00      	nop
 801b32c:	e7fd      	b.n	801b32a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801b32e:	693b      	ldr	r3, [r7, #16]
 801b330:	3318      	adds	r3, #24
 801b332:	4618      	mov	r0, r3
 801b334:	f7fe fa44 	bl	80197c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b338:	4b1d      	ldr	r3, [pc, #116]	@ (801b3b0 <xTaskRemoveFromEventList+0xb0>)
 801b33a:	681b      	ldr	r3, [r3, #0]
 801b33c:	2b00      	cmp	r3, #0
 801b33e:	d11d      	bne.n	801b37c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801b340:	693b      	ldr	r3, [r7, #16]
 801b342:	3304      	adds	r3, #4
 801b344:	4618      	mov	r0, r3
 801b346:	f7fe fa3b 	bl	80197c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801b34a:	693b      	ldr	r3, [r7, #16]
 801b34c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b34e:	4b19      	ldr	r3, [pc, #100]	@ (801b3b4 <xTaskRemoveFromEventList+0xb4>)
 801b350:	681b      	ldr	r3, [r3, #0]
 801b352:	429a      	cmp	r2, r3
 801b354:	d903      	bls.n	801b35e <xTaskRemoveFromEventList+0x5e>
 801b356:	693b      	ldr	r3, [r7, #16]
 801b358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b35a:	4a16      	ldr	r2, [pc, #88]	@ (801b3b4 <xTaskRemoveFromEventList+0xb4>)
 801b35c:	6013      	str	r3, [r2, #0]
 801b35e:	693b      	ldr	r3, [r7, #16]
 801b360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b362:	4613      	mov	r3, r2
 801b364:	009b      	lsls	r3, r3, #2
 801b366:	4413      	add	r3, r2
 801b368:	009b      	lsls	r3, r3, #2
 801b36a:	4a13      	ldr	r2, [pc, #76]	@ (801b3b8 <xTaskRemoveFromEventList+0xb8>)
 801b36c:	441a      	add	r2, r3
 801b36e:	693b      	ldr	r3, [r7, #16]
 801b370:	3304      	adds	r3, #4
 801b372:	4619      	mov	r1, r3
 801b374:	4610      	mov	r0, r2
 801b376:	f7fe f9c6 	bl	8019706 <vListInsertEnd>
 801b37a:	e005      	b.n	801b388 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801b37c:	693b      	ldr	r3, [r7, #16]
 801b37e:	3318      	adds	r3, #24
 801b380:	4619      	mov	r1, r3
 801b382:	480e      	ldr	r0, [pc, #56]	@ (801b3bc <xTaskRemoveFromEventList+0xbc>)
 801b384:	f7fe f9bf 	bl	8019706 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801b388:	693b      	ldr	r3, [r7, #16]
 801b38a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b38c:	4b0c      	ldr	r3, [pc, #48]	@ (801b3c0 <xTaskRemoveFromEventList+0xc0>)
 801b38e:	681b      	ldr	r3, [r3, #0]
 801b390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b392:	429a      	cmp	r2, r3
 801b394:	d905      	bls.n	801b3a2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801b396:	2301      	movs	r3, #1
 801b398:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801b39a:	4b0a      	ldr	r3, [pc, #40]	@ (801b3c4 <xTaskRemoveFromEventList+0xc4>)
 801b39c:	2201      	movs	r2, #1
 801b39e:	601a      	str	r2, [r3, #0]
 801b3a0:	e001      	b.n	801b3a6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 801b3a2:	2300      	movs	r3, #0
 801b3a4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801b3a6:	697b      	ldr	r3, [r7, #20]
}
 801b3a8:	4618      	mov	r0, r3
 801b3aa:	3718      	adds	r7, #24
 801b3ac:	46bd      	mov	sp, r7
 801b3ae:	bd80      	pop	{r7, pc}
 801b3b0:	20001e3c 	.word	0x20001e3c
 801b3b4:	20001e1c 	.word	0x20001e1c
 801b3b8:	20001944 	.word	0x20001944
 801b3bc:	20001dd4 	.word	0x20001dd4
 801b3c0:	20001940 	.word	0x20001940
 801b3c4:	20001e28 	.word	0x20001e28

0801b3c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801b3c8:	b480      	push	{r7}
 801b3ca:	b083      	sub	sp, #12
 801b3cc:	af00      	add	r7, sp, #0
 801b3ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801b3d0:	4b06      	ldr	r3, [pc, #24]	@ (801b3ec <vTaskInternalSetTimeOutState+0x24>)
 801b3d2:	681a      	ldr	r2, [r3, #0]
 801b3d4:	687b      	ldr	r3, [r7, #4]
 801b3d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801b3d8:	4b05      	ldr	r3, [pc, #20]	@ (801b3f0 <vTaskInternalSetTimeOutState+0x28>)
 801b3da:	681a      	ldr	r2, [r3, #0]
 801b3dc:	687b      	ldr	r3, [r7, #4]
 801b3de:	605a      	str	r2, [r3, #4]
}
 801b3e0:	bf00      	nop
 801b3e2:	370c      	adds	r7, #12
 801b3e4:	46bd      	mov	sp, r7
 801b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3ea:	4770      	bx	lr
 801b3ec:	20001e2c 	.word	0x20001e2c
 801b3f0:	20001e18 	.word	0x20001e18

0801b3f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801b3f4:	b580      	push	{r7, lr}
 801b3f6:	b088      	sub	sp, #32
 801b3f8:	af00      	add	r7, sp, #0
 801b3fa:	6078      	str	r0, [r7, #4]
 801b3fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801b3fe:	687b      	ldr	r3, [r7, #4]
 801b400:	2b00      	cmp	r3, #0
 801b402:	d10b      	bne.n	801b41c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 801b404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b408:	f383 8811 	msr	BASEPRI, r3
 801b40c:	f3bf 8f6f 	isb	sy
 801b410:	f3bf 8f4f 	dsb	sy
 801b414:	613b      	str	r3, [r7, #16]
}
 801b416:	bf00      	nop
 801b418:	bf00      	nop
 801b41a:	e7fd      	b.n	801b418 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801b41c:	683b      	ldr	r3, [r7, #0]
 801b41e:	2b00      	cmp	r3, #0
 801b420:	d10b      	bne.n	801b43a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 801b422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b426:	f383 8811 	msr	BASEPRI, r3
 801b42a:	f3bf 8f6f 	isb	sy
 801b42e:	f3bf 8f4f 	dsb	sy
 801b432:	60fb      	str	r3, [r7, #12]
}
 801b434:	bf00      	nop
 801b436:	bf00      	nop
 801b438:	e7fd      	b.n	801b436 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 801b43a:	f000 ffa5 	bl	801c388 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801b43e:	4b1d      	ldr	r3, [pc, #116]	@ (801b4b4 <xTaskCheckForTimeOut+0xc0>)
 801b440:	681b      	ldr	r3, [r3, #0]
 801b442:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801b444:	687b      	ldr	r3, [r7, #4]
 801b446:	685b      	ldr	r3, [r3, #4]
 801b448:	69ba      	ldr	r2, [r7, #24]
 801b44a:	1ad3      	subs	r3, r2, r3
 801b44c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801b44e:	683b      	ldr	r3, [r7, #0]
 801b450:	681b      	ldr	r3, [r3, #0]
 801b452:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801b456:	d102      	bne.n	801b45e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801b458:	2300      	movs	r3, #0
 801b45a:	61fb      	str	r3, [r7, #28]
 801b45c:	e023      	b.n	801b4a6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801b45e:	687b      	ldr	r3, [r7, #4]
 801b460:	681a      	ldr	r2, [r3, #0]
 801b462:	4b15      	ldr	r3, [pc, #84]	@ (801b4b8 <xTaskCheckForTimeOut+0xc4>)
 801b464:	681b      	ldr	r3, [r3, #0]
 801b466:	429a      	cmp	r2, r3
 801b468:	d007      	beq.n	801b47a <xTaskCheckForTimeOut+0x86>
 801b46a:	687b      	ldr	r3, [r7, #4]
 801b46c:	685b      	ldr	r3, [r3, #4]
 801b46e:	69ba      	ldr	r2, [r7, #24]
 801b470:	429a      	cmp	r2, r3
 801b472:	d302      	bcc.n	801b47a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801b474:	2301      	movs	r3, #1
 801b476:	61fb      	str	r3, [r7, #28]
 801b478:	e015      	b.n	801b4a6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801b47a:	683b      	ldr	r3, [r7, #0]
 801b47c:	681b      	ldr	r3, [r3, #0]
 801b47e:	697a      	ldr	r2, [r7, #20]
 801b480:	429a      	cmp	r2, r3
 801b482:	d20b      	bcs.n	801b49c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801b484:	683b      	ldr	r3, [r7, #0]
 801b486:	681a      	ldr	r2, [r3, #0]
 801b488:	697b      	ldr	r3, [r7, #20]
 801b48a:	1ad2      	subs	r2, r2, r3
 801b48c:	683b      	ldr	r3, [r7, #0]
 801b48e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801b490:	6878      	ldr	r0, [r7, #4]
 801b492:	f7ff ff99 	bl	801b3c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801b496:	2300      	movs	r3, #0
 801b498:	61fb      	str	r3, [r7, #28]
 801b49a:	e004      	b.n	801b4a6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 801b49c:	683b      	ldr	r3, [r7, #0]
 801b49e:	2200      	movs	r2, #0
 801b4a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801b4a2:	2301      	movs	r3, #1
 801b4a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801b4a6:	f000 ffa1 	bl	801c3ec <vPortExitCritical>

	return xReturn;
 801b4aa:	69fb      	ldr	r3, [r7, #28]
}
 801b4ac:	4618      	mov	r0, r3
 801b4ae:	3720      	adds	r7, #32
 801b4b0:	46bd      	mov	sp, r7
 801b4b2:	bd80      	pop	{r7, pc}
 801b4b4:	20001e18 	.word	0x20001e18
 801b4b8:	20001e2c 	.word	0x20001e2c

0801b4bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801b4bc:	b480      	push	{r7}
 801b4be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801b4c0:	4b03      	ldr	r3, [pc, #12]	@ (801b4d0 <vTaskMissedYield+0x14>)
 801b4c2:	2201      	movs	r2, #1
 801b4c4:	601a      	str	r2, [r3, #0]
}
 801b4c6:	bf00      	nop
 801b4c8:	46bd      	mov	sp, r7
 801b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4ce:	4770      	bx	lr
 801b4d0:	20001e28 	.word	0x20001e28

0801b4d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801b4d4:	b580      	push	{r7, lr}
 801b4d6:	b082      	sub	sp, #8
 801b4d8:	af00      	add	r7, sp, #0
 801b4da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801b4dc:	f000 f852 	bl	801b584 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801b4e0:	4b06      	ldr	r3, [pc, #24]	@ (801b4fc <prvIdleTask+0x28>)
 801b4e2:	681b      	ldr	r3, [r3, #0]
 801b4e4:	2b01      	cmp	r3, #1
 801b4e6:	d9f9      	bls.n	801b4dc <prvIdleTask+0x8>
			{
				taskYIELD();
 801b4e8:	4b05      	ldr	r3, [pc, #20]	@ (801b500 <prvIdleTask+0x2c>)
 801b4ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801b4ee:	601a      	str	r2, [r3, #0]
 801b4f0:	f3bf 8f4f 	dsb	sy
 801b4f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801b4f8:	e7f0      	b.n	801b4dc <prvIdleTask+0x8>
 801b4fa:	bf00      	nop
 801b4fc:	20001944 	.word	0x20001944
 801b500:	e000ed04 	.word	0xe000ed04

0801b504 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801b504:	b580      	push	{r7, lr}
 801b506:	b082      	sub	sp, #8
 801b508:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801b50a:	2300      	movs	r3, #0
 801b50c:	607b      	str	r3, [r7, #4]
 801b50e:	e00c      	b.n	801b52a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801b510:	687a      	ldr	r2, [r7, #4]
 801b512:	4613      	mov	r3, r2
 801b514:	009b      	lsls	r3, r3, #2
 801b516:	4413      	add	r3, r2
 801b518:	009b      	lsls	r3, r3, #2
 801b51a:	4a12      	ldr	r2, [pc, #72]	@ (801b564 <prvInitialiseTaskLists+0x60>)
 801b51c:	4413      	add	r3, r2
 801b51e:	4618      	mov	r0, r3
 801b520:	f7fe f8c4 	bl	80196ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801b524:	687b      	ldr	r3, [r7, #4]
 801b526:	3301      	adds	r3, #1
 801b528:	607b      	str	r3, [r7, #4]
 801b52a:	687b      	ldr	r3, [r7, #4]
 801b52c:	2b37      	cmp	r3, #55	@ 0x37
 801b52e:	d9ef      	bls.n	801b510 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801b530:	480d      	ldr	r0, [pc, #52]	@ (801b568 <prvInitialiseTaskLists+0x64>)
 801b532:	f7fe f8bb 	bl	80196ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801b536:	480d      	ldr	r0, [pc, #52]	@ (801b56c <prvInitialiseTaskLists+0x68>)
 801b538:	f7fe f8b8 	bl	80196ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801b53c:	480c      	ldr	r0, [pc, #48]	@ (801b570 <prvInitialiseTaskLists+0x6c>)
 801b53e:	f7fe f8b5 	bl	80196ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801b542:	480c      	ldr	r0, [pc, #48]	@ (801b574 <prvInitialiseTaskLists+0x70>)
 801b544:	f7fe f8b2 	bl	80196ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801b548:	480b      	ldr	r0, [pc, #44]	@ (801b578 <prvInitialiseTaskLists+0x74>)
 801b54a:	f7fe f8af 	bl	80196ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801b54e:	4b0b      	ldr	r3, [pc, #44]	@ (801b57c <prvInitialiseTaskLists+0x78>)
 801b550:	4a05      	ldr	r2, [pc, #20]	@ (801b568 <prvInitialiseTaskLists+0x64>)
 801b552:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801b554:	4b0a      	ldr	r3, [pc, #40]	@ (801b580 <prvInitialiseTaskLists+0x7c>)
 801b556:	4a05      	ldr	r2, [pc, #20]	@ (801b56c <prvInitialiseTaskLists+0x68>)
 801b558:	601a      	str	r2, [r3, #0]
}
 801b55a:	bf00      	nop
 801b55c:	3708      	adds	r7, #8
 801b55e:	46bd      	mov	sp, r7
 801b560:	bd80      	pop	{r7, pc}
 801b562:	bf00      	nop
 801b564:	20001944 	.word	0x20001944
 801b568:	20001da4 	.word	0x20001da4
 801b56c:	20001db8 	.word	0x20001db8
 801b570:	20001dd4 	.word	0x20001dd4
 801b574:	20001de8 	.word	0x20001de8
 801b578:	20001e00 	.word	0x20001e00
 801b57c:	20001dcc 	.word	0x20001dcc
 801b580:	20001dd0 	.word	0x20001dd0

0801b584 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801b584:	b580      	push	{r7, lr}
 801b586:	b082      	sub	sp, #8
 801b588:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801b58a:	e019      	b.n	801b5c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801b58c:	f000 fefc 	bl	801c388 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b590:	4b10      	ldr	r3, [pc, #64]	@ (801b5d4 <prvCheckTasksWaitingTermination+0x50>)
 801b592:	68db      	ldr	r3, [r3, #12]
 801b594:	68db      	ldr	r3, [r3, #12]
 801b596:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b598:	687b      	ldr	r3, [r7, #4]
 801b59a:	3304      	adds	r3, #4
 801b59c:	4618      	mov	r0, r3
 801b59e:	f7fe f90f 	bl	80197c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801b5a2:	4b0d      	ldr	r3, [pc, #52]	@ (801b5d8 <prvCheckTasksWaitingTermination+0x54>)
 801b5a4:	681b      	ldr	r3, [r3, #0]
 801b5a6:	3b01      	subs	r3, #1
 801b5a8:	4a0b      	ldr	r2, [pc, #44]	@ (801b5d8 <prvCheckTasksWaitingTermination+0x54>)
 801b5aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801b5ac:	4b0b      	ldr	r3, [pc, #44]	@ (801b5dc <prvCheckTasksWaitingTermination+0x58>)
 801b5ae:	681b      	ldr	r3, [r3, #0]
 801b5b0:	3b01      	subs	r3, #1
 801b5b2:	4a0a      	ldr	r2, [pc, #40]	@ (801b5dc <prvCheckTasksWaitingTermination+0x58>)
 801b5b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801b5b6:	f000 ff19 	bl	801c3ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801b5ba:	6878      	ldr	r0, [r7, #4]
 801b5bc:	f000 f810 	bl	801b5e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801b5c0:	4b06      	ldr	r3, [pc, #24]	@ (801b5dc <prvCheckTasksWaitingTermination+0x58>)
 801b5c2:	681b      	ldr	r3, [r3, #0]
 801b5c4:	2b00      	cmp	r3, #0
 801b5c6:	d1e1      	bne.n	801b58c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801b5c8:	bf00      	nop
 801b5ca:	bf00      	nop
 801b5cc:	3708      	adds	r7, #8
 801b5ce:	46bd      	mov	sp, r7
 801b5d0:	bd80      	pop	{r7, pc}
 801b5d2:	bf00      	nop
 801b5d4:	20001de8 	.word	0x20001de8
 801b5d8:	20001e14 	.word	0x20001e14
 801b5dc:	20001dfc 	.word	0x20001dfc

0801b5e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801b5e0:	b580      	push	{r7, lr}
 801b5e2:	b084      	sub	sp, #16
 801b5e4:	af00      	add	r7, sp, #0
 801b5e6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801b5e8:	687b      	ldr	r3, [r7, #4]
 801b5ea:	3358      	adds	r3, #88	@ 0x58
 801b5ec:	4618      	mov	r0, r3
 801b5ee:	f01b fda1 	bl	8037134 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801b5f2:	687b      	ldr	r3, [r7, #4]
 801b5f4:	f893 317d 	ldrb.w	r3, [r3, #381]	@ 0x17d
 801b5f8:	2b00      	cmp	r3, #0
 801b5fa:	d108      	bne.n	801b60e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801b5fc:	687b      	ldr	r3, [r7, #4]
 801b5fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b600:	4618      	mov	r0, r3
 801b602:	f001 f8b1 	bl	801c768 <vPortFree>
				vPortFree( pxTCB );
 801b606:	6878      	ldr	r0, [r7, #4]
 801b608:	f001 f8ae 	bl	801c768 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801b60c:	e019      	b.n	801b642 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801b60e:	687b      	ldr	r3, [r7, #4]
 801b610:	f893 317d 	ldrb.w	r3, [r3, #381]	@ 0x17d
 801b614:	2b01      	cmp	r3, #1
 801b616:	d103      	bne.n	801b620 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801b618:	6878      	ldr	r0, [r7, #4]
 801b61a:	f001 f8a5 	bl	801c768 <vPortFree>
	}
 801b61e:	e010      	b.n	801b642 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801b620:	687b      	ldr	r3, [r7, #4]
 801b622:	f893 317d 	ldrb.w	r3, [r3, #381]	@ 0x17d
 801b626:	2b02      	cmp	r3, #2
 801b628:	d00b      	beq.n	801b642 <prvDeleteTCB+0x62>
	__asm volatile
 801b62a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b62e:	f383 8811 	msr	BASEPRI, r3
 801b632:	f3bf 8f6f 	isb	sy
 801b636:	f3bf 8f4f 	dsb	sy
 801b63a:	60fb      	str	r3, [r7, #12]
}
 801b63c:	bf00      	nop
 801b63e:	bf00      	nop
 801b640:	e7fd      	b.n	801b63e <prvDeleteTCB+0x5e>
	}
 801b642:	bf00      	nop
 801b644:	3710      	adds	r7, #16
 801b646:	46bd      	mov	sp, r7
 801b648:	bd80      	pop	{r7, pc}
	...

0801b64c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801b64c:	b480      	push	{r7}
 801b64e:	b083      	sub	sp, #12
 801b650:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b652:	4b0c      	ldr	r3, [pc, #48]	@ (801b684 <prvResetNextTaskUnblockTime+0x38>)
 801b654:	681b      	ldr	r3, [r3, #0]
 801b656:	681b      	ldr	r3, [r3, #0]
 801b658:	2b00      	cmp	r3, #0
 801b65a:	d104      	bne.n	801b666 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801b65c:	4b0a      	ldr	r3, [pc, #40]	@ (801b688 <prvResetNextTaskUnblockTime+0x3c>)
 801b65e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801b662:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801b664:	e008      	b.n	801b678 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b666:	4b07      	ldr	r3, [pc, #28]	@ (801b684 <prvResetNextTaskUnblockTime+0x38>)
 801b668:	681b      	ldr	r3, [r3, #0]
 801b66a:	68db      	ldr	r3, [r3, #12]
 801b66c:	68db      	ldr	r3, [r3, #12]
 801b66e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801b670:	687b      	ldr	r3, [r7, #4]
 801b672:	685b      	ldr	r3, [r3, #4]
 801b674:	4a04      	ldr	r2, [pc, #16]	@ (801b688 <prvResetNextTaskUnblockTime+0x3c>)
 801b676:	6013      	str	r3, [r2, #0]
}
 801b678:	bf00      	nop
 801b67a:	370c      	adds	r7, #12
 801b67c:	46bd      	mov	sp, r7
 801b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b682:	4770      	bx	lr
 801b684:	20001dcc 	.word	0x20001dcc
 801b688:	20001e34 	.word	0x20001e34

0801b68c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 801b68c:	b480      	push	{r7}
 801b68e:	b083      	sub	sp, #12
 801b690:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801b692:	4b05      	ldr	r3, [pc, #20]	@ (801b6a8 <xTaskGetCurrentTaskHandle+0x1c>)
 801b694:	681b      	ldr	r3, [r3, #0]
 801b696:	607b      	str	r3, [r7, #4]

		return xReturn;
 801b698:	687b      	ldr	r3, [r7, #4]
	}
 801b69a:	4618      	mov	r0, r3
 801b69c:	370c      	adds	r7, #12
 801b69e:	46bd      	mov	sp, r7
 801b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6a4:	4770      	bx	lr
 801b6a6:	bf00      	nop
 801b6a8:	20001940 	.word	0x20001940

0801b6ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801b6ac:	b480      	push	{r7}
 801b6ae:	b083      	sub	sp, #12
 801b6b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801b6b2:	4b0b      	ldr	r3, [pc, #44]	@ (801b6e0 <xTaskGetSchedulerState+0x34>)
 801b6b4:	681b      	ldr	r3, [r3, #0]
 801b6b6:	2b00      	cmp	r3, #0
 801b6b8:	d102      	bne.n	801b6c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801b6ba:	2301      	movs	r3, #1
 801b6bc:	607b      	str	r3, [r7, #4]
 801b6be:	e008      	b.n	801b6d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b6c0:	4b08      	ldr	r3, [pc, #32]	@ (801b6e4 <xTaskGetSchedulerState+0x38>)
 801b6c2:	681b      	ldr	r3, [r3, #0]
 801b6c4:	2b00      	cmp	r3, #0
 801b6c6:	d102      	bne.n	801b6ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801b6c8:	2302      	movs	r3, #2
 801b6ca:	607b      	str	r3, [r7, #4]
 801b6cc:	e001      	b.n	801b6d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801b6ce:	2300      	movs	r3, #0
 801b6d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801b6d2:	687b      	ldr	r3, [r7, #4]
	}
 801b6d4:	4618      	mov	r0, r3
 801b6d6:	370c      	adds	r7, #12
 801b6d8:	46bd      	mov	sp, r7
 801b6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6de:	4770      	bx	lr
 801b6e0:	20001e20 	.word	0x20001e20
 801b6e4:	20001e3c 	.word	0x20001e3c

0801b6e8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801b6e8:	b580      	push	{r7, lr}
 801b6ea:	b084      	sub	sp, #16
 801b6ec:	af00      	add	r7, sp, #0
 801b6ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801b6f0:	687b      	ldr	r3, [r7, #4]
 801b6f2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801b6f4:	2300      	movs	r3, #0
 801b6f6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801b6f8:	687b      	ldr	r3, [r7, #4]
 801b6fa:	2b00      	cmp	r3, #0
 801b6fc:	d051      	beq.n	801b7a2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801b6fe:	68bb      	ldr	r3, [r7, #8]
 801b700:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b702:	4b2a      	ldr	r3, [pc, #168]	@ (801b7ac <xTaskPriorityInherit+0xc4>)
 801b704:	681b      	ldr	r3, [r3, #0]
 801b706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b708:	429a      	cmp	r2, r3
 801b70a:	d241      	bcs.n	801b790 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801b70c:	68bb      	ldr	r3, [r7, #8]
 801b70e:	699b      	ldr	r3, [r3, #24]
 801b710:	2b00      	cmp	r3, #0
 801b712:	db06      	blt.n	801b722 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b714:	4b25      	ldr	r3, [pc, #148]	@ (801b7ac <xTaskPriorityInherit+0xc4>)
 801b716:	681b      	ldr	r3, [r3, #0]
 801b718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b71a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801b71e:	68bb      	ldr	r3, [r7, #8]
 801b720:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801b722:	68bb      	ldr	r3, [r7, #8]
 801b724:	6959      	ldr	r1, [r3, #20]
 801b726:	68bb      	ldr	r3, [r7, #8]
 801b728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b72a:	4613      	mov	r3, r2
 801b72c:	009b      	lsls	r3, r3, #2
 801b72e:	4413      	add	r3, r2
 801b730:	009b      	lsls	r3, r3, #2
 801b732:	4a1f      	ldr	r2, [pc, #124]	@ (801b7b0 <xTaskPriorityInherit+0xc8>)
 801b734:	4413      	add	r3, r2
 801b736:	4299      	cmp	r1, r3
 801b738:	d122      	bne.n	801b780 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b73a:	68bb      	ldr	r3, [r7, #8]
 801b73c:	3304      	adds	r3, #4
 801b73e:	4618      	mov	r0, r3
 801b740:	f7fe f83e 	bl	80197c0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801b744:	4b19      	ldr	r3, [pc, #100]	@ (801b7ac <xTaskPriorityInherit+0xc4>)
 801b746:	681b      	ldr	r3, [r3, #0]
 801b748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b74a:	68bb      	ldr	r3, [r7, #8]
 801b74c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801b74e:	68bb      	ldr	r3, [r7, #8]
 801b750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b752:	4b18      	ldr	r3, [pc, #96]	@ (801b7b4 <xTaskPriorityInherit+0xcc>)
 801b754:	681b      	ldr	r3, [r3, #0]
 801b756:	429a      	cmp	r2, r3
 801b758:	d903      	bls.n	801b762 <xTaskPriorityInherit+0x7a>
 801b75a:	68bb      	ldr	r3, [r7, #8]
 801b75c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b75e:	4a15      	ldr	r2, [pc, #84]	@ (801b7b4 <xTaskPriorityInherit+0xcc>)
 801b760:	6013      	str	r3, [r2, #0]
 801b762:	68bb      	ldr	r3, [r7, #8]
 801b764:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b766:	4613      	mov	r3, r2
 801b768:	009b      	lsls	r3, r3, #2
 801b76a:	4413      	add	r3, r2
 801b76c:	009b      	lsls	r3, r3, #2
 801b76e:	4a10      	ldr	r2, [pc, #64]	@ (801b7b0 <xTaskPriorityInherit+0xc8>)
 801b770:	441a      	add	r2, r3
 801b772:	68bb      	ldr	r3, [r7, #8]
 801b774:	3304      	adds	r3, #4
 801b776:	4619      	mov	r1, r3
 801b778:	4610      	mov	r0, r2
 801b77a:	f7fd ffc4 	bl	8019706 <vListInsertEnd>
 801b77e:	e004      	b.n	801b78a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801b780:	4b0a      	ldr	r3, [pc, #40]	@ (801b7ac <xTaskPriorityInherit+0xc4>)
 801b782:	681b      	ldr	r3, [r3, #0]
 801b784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b786:	68bb      	ldr	r3, [r7, #8]
 801b788:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801b78a:	2301      	movs	r3, #1
 801b78c:	60fb      	str	r3, [r7, #12]
 801b78e:	e008      	b.n	801b7a2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801b790:	68bb      	ldr	r3, [r7, #8]
 801b792:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801b794:	4b05      	ldr	r3, [pc, #20]	@ (801b7ac <xTaskPriorityInherit+0xc4>)
 801b796:	681b      	ldr	r3, [r3, #0]
 801b798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b79a:	429a      	cmp	r2, r3
 801b79c:	d201      	bcs.n	801b7a2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801b79e:	2301      	movs	r3, #1
 801b7a0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801b7a2:	68fb      	ldr	r3, [r7, #12]
	}
 801b7a4:	4618      	mov	r0, r3
 801b7a6:	3710      	adds	r7, #16
 801b7a8:	46bd      	mov	sp, r7
 801b7aa:	bd80      	pop	{r7, pc}
 801b7ac:	20001940 	.word	0x20001940
 801b7b0:	20001944 	.word	0x20001944
 801b7b4:	20001e1c 	.word	0x20001e1c

0801b7b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801b7b8:	b580      	push	{r7, lr}
 801b7ba:	b086      	sub	sp, #24
 801b7bc:	af00      	add	r7, sp, #0
 801b7be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801b7c0:	687b      	ldr	r3, [r7, #4]
 801b7c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801b7c4:	2300      	movs	r3, #0
 801b7c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801b7c8:	687b      	ldr	r3, [r7, #4]
 801b7ca:	2b00      	cmp	r3, #0
 801b7cc:	d058      	beq.n	801b880 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801b7ce:	4b2f      	ldr	r3, [pc, #188]	@ (801b88c <xTaskPriorityDisinherit+0xd4>)
 801b7d0:	681b      	ldr	r3, [r3, #0]
 801b7d2:	693a      	ldr	r2, [r7, #16]
 801b7d4:	429a      	cmp	r2, r3
 801b7d6:	d00b      	beq.n	801b7f0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 801b7d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b7dc:	f383 8811 	msr	BASEPRI, r3
 801b7e0:	f3bf 8f6f 	isb	sy
 801b7e4:	f3bf 8f4f 	dsb	sy
 801b7e8:	60fb      	str	r3, [r7, #12]
}
 801b7ea:	bf00      	nop
 801b7ec:	bf00      	nop
 801b7ee:	e7fd      	b.n	801b7ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801b7f0:	693b      	ldr	r3, [r7, #16]
 801b7f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b7f4:	2b00      	cmp	r3, #0
 801b7f6:	d10b      	bne.n	801b810 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 801b7f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b7fc:	f383 8811 	msr	BASEPRI, r3
 801b800:	f3bf 8f6f 	isb	sy
 801b804:	f3bf 8f4f 	dsb	sy
 801b808:	60bb      	str	r3, [r7, #8]
}
 801b80a:	bf00      	nop
 801b80c:	bf00      	nop
 801b80e:	e7fd      	b.n	801b80c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 801b810:	693b      	ldr	r3, [r7, #16]
 801b812:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b814:	1e5a      	subs	r2, r3, #1
 801b816:	693b      	ldr	r3, [r7, #16]
 801b818:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801b81a:	693b      	ldr	r3, [r7, #16]
 801b81c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b81e:	693b      	ldr	r3, [r7, #16]
 801b820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b822:	429a      	cmp	r2, r3
 801b824:	d02c      	beq.n	801b880 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801b826:	693b      	ldr	r3, [r7, #16]
 801b828:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b82a:	2b00      	cmp	r3, #0
 801b82c:	d128      	bne.n	801b880 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b82e:	693b      	ldr	r3, [r7, #16]
 801b830:	3304      	adds	r3, #4
 801b832:	4618      	mov	r0, r3
 801b834:	f7fd ffc4 	bl	80197c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801b838:	693b      	ldr	r3, [r7, #16]
 801b83a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801b83c:	693b      	ldr	r3, [r7, #16]
 801b83e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b840:	693b      	ldr	r3, [r7, #16]
 801b842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b844:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801b848:	693b      	ldr	r3, [r7, #16]
 801b84a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801b84c:	693b      	ldr	r3, [r7, #16]
 801b84e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b850:	4b0f      	ldr	r3, [pc, #60]	@ (801b890 <xTaskPriorityDisinherit+0xd8>)
 801b852:	681b      	ldr	r3, [r3, #0]
 801b854:	429a      	cmp	r2, r3
 801b856:	d903      	bls.n	801b860 <xTaskPriorityDisinherit+0xa8>
 801b858:	693b      	ldr	r3, [r7, #16]
 801b85a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b85c:	4a0c      	ldr	r2, [pc, #48]	@ (801b890 <xTaskPriorityDisinherit+0xd8>)
 801b85e:	6013      	str	r3, [r2, #0]
 801b860:	693b      	ldr	r3, [r7, #16]
 801b862:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b864:	4613      	mov	r3, r2
 801b866:	009b      	lsls	r3, r3, #2
 801b868:	4413      	add	r3, r2
 801b86a:	009b      	lsls	r3, r3, #2
 801b86c:	4a09      	ldr	r2, [pc, #36]	@ (801b894 <xTaskPriorityDisinherit+0xdc>)
 801b86e:	441a      	add	r2, r3
 801b870:	693b      	ldr	r3, [r7, #16]
 801b872:	3304      	adds	r3, #4
 801b874:	4619      	mov	r1, r3
 801b876:	4610      	mov	r0, r2
 801b878:	f7fd ff45 	bl	8019706 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801b87c:	2301      	movs	r3, #1
 801b87e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801b880:	697b      	ldr	r3, [r7, #20]
	}
 801b882:	4618      	mov	r0, r3
 801b884:	3718      	adds	r7, #24
 801b886:	46bd      	mov	sp, r7
 801b888:	bd80      	pop	{r7, pc}
 801b88a:	bf00      	nop
 801b88c:	20001940 	.word	0x20001940
 801b890:	20001e1c 	.word	0x20001e1c
 801b894:	20001944 	.word	0x20001944

0801b898 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801b898:	b580      	push	{r7, lr}
 801b89a:	b088      	sub	sp, #32
 801b89c:	af00      	add	r7, sp, #0
 801b89e:	6078      	str	r0, [r7, #4]
 801b8a0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801b8a2:	687b      	ldr	r3, [r7, #4]
 801b8a4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801b8a6:	2301      	movs	r3, #1
 801b8a8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801b8aa:	687b      	ldr	r3, [r7, #4]
 801b8ac:	2b00      	cmp	r3, #0
 801b8ae:	d06c      	beq.n	801b98a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801b8b0:	69bb      	ldr	r3, [r7, #24]
 801b8b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b8b4:	2b00      	cmp	r3, #0
 801b8b6:	d10b      	bne.n	801b8d0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 801b8b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b8bc:	f383 8811 	msr	BASEPRI, r3
 801b8c0:	f3bf 8f6f 	isb	sy
 801b8c4:	f3bf 8f4f 	dsb	sy
 801b8c8:	60fb      	str	r3, [r7, #12]
}
 801b8ca:	bf00      	nop
 801b8cc:	bf00      	nop
 801b8ce:	e7fd      	b.n	801b8cc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801b8d0:	69bb      	ldr	r3, [r7, #24]
 801b8d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b8d4:	683a      	ldr	r2, [r7, #0]
 801b8d6:	429a      	cmp	r2, r3
 801b8d8:	d902      	bls.n	801b8e0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801b8da:	683b      	ldr	r3, [r7, #0]
 801b8dc:	61fb      	str	r3, [r7, #28]
 801b8de:	e002      	b.n	801b8e6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801b8e0:	69bb      	ldr	r3, [r7, #24]
 801b8e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b8e4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801b8e6:	69bb      	ldr	r3, [r7, #24]
 801b8e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b8ea:	69fa      	ldr	r2, [r7, #28]
 801b8ec:	429a      	cmp	r2, r3
 801b8ee:	d04c      	beq.n	801b98a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801b8f0:	69bb      	ldr	r3, [r7, #24]
 801b8f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b8f4:	697a      	ldr	r2, [r7, #20]
 801b8f6:	429a      	cmp	r2, r3
 801b8f8:	d147      	bne.n	801b98a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801b8fa:	4b26      	ldr	r3, [pc, #152]	@ (801b994 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801b8fc:	681b      	ldr	r3, [r3, #0]
 801b8fe:	69ba      	ldr	r2, [r7, #24]
 801b900:	429a      	cmp	r2, r3
 801b902:	d10b      	bne.n	801b91c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 801b904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b908:	f383 8811 	msr	BASEPRI, r3
 801b90c:	f3bf 8f6f 	isb	sy
 801b910:	f3bf 8f4f 	dsb	sy
 801b914:	60bb      	str	r3, [r7, #8]
}
 801b916:	bf00      	nop
 801b918:	bf00      	nop
 801b91a:	e7fd      	b.n	801b918 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801b91c:	69bb      	ldr	r3, [r7, #24]
 801b91e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b920:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801b922:	69bb      	ldr	r3, [r7, #24]
 801b924:	69fa      	ldr	r2, [r7, #28]
 801b926:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801b928:	69bb      	ldr	r3, [r7, #24]
 801b92a:	699b      	ldr	r3, [r3, #24]
 801b92c:	2b00      	cmp	r3, #0
 801b92e:	db04      	blt.n	801b93a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b930:	69fb      	ldr	r3, [r7, #28]
 801b932:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801b936:	69bb      	ldr	r3, [r7, #24]
 801b938:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801b93a:	69bb      	ldr	r3, [r7, #24]
 801b93c:	6959      	ldr	r1, [r3, #20]
 801b93e:	693a      	ldr	r2, [r7, #16]
 801b940:	4613      	mov	r3, r2
 801b942:	009b      	lsls	r3, r3, #2
 801b944:	4413      	add	r3, r2
 801b946:	009b      	lsls	r3, r3, #2
 801b948:	4a13      	ldr	r2, [pc, #76]	@ (801b998 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801b94a:	4413      	add	r3, r2
 801b94c:	4299      	cmp	r1, r3
 801b94e:	d11c      	bne.n	801b98a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b950:	69bb      	ldr	r3, [r7, #24]
 801b952:	3304      	adds	r3, #4
 801b954:	4618      	mov	r0, r3
 801b956:	f7fd ff33 	bl	80197c0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801b95a:	69bb      	ldr	r3, [r7, #24]
 801b95c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b95e:	4b0f      	ldr	r3, [pc, #60]	@ (801b99c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801b960:	681b      	ldr	r3, [r3, #0]
 801b962:	429a      	cmp	r2, r3
 801b964:	d903      	bls.n	801b96e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 801b966:	69bb      	ldr	r3, [r7, #24]
 801b968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b96a:	4a0c      	ldr	r2, [pc, #48]	@ (801b99c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801b96c:	6013      	str	r3, [r2, #0]
 801b96e:	69bb      	ldr	r3, [r7, #24]
 801b970:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b972:	4613      	mov	r3, r2
 801b974:	009b      	lsls	r3, r3, #2
 801b976:	4413      	add	r3, r2
 801b978:	009b      	lsls	r3, r3, #2
 801b97a:	4a07      	ldr	r2, [pc, #28]	@ (801b998 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801b97c:	441a      	add	r2, r3
 801b97e:	69bb      	ldr	r3, [r7, #24]
 801b980:	3304      	adds	r3, #4
 801b982:	4619      	mov	r1, r3
 801b984:	4610      	mov	r0, r2
 801b986:	f7fd febe 	bl	8019706 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801b98a:	bf00      	nop
 801b98c:	3720      	adds	r7, #32
 801b98e:	46bd      	mov	sp, r7
 801b990:	bd80      	pop	{r7, pc}
 801b992:	bf00      	nop
 801b994:	20001940 	.word	0x20001940
 801b998:	20001944 	.word	0x20001944
 801b99c:	20001e1c 	.word	0x20001e1c

0801b9a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801b9a0:	b480      	push	{r7}
 801b9a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801b9a4:	4b07      	ldr	r3, [pc, #28]	@ (801b9c4 <pvTaskIncrementMutexHeldCount+0x24>)
 801b9a6:	681b      	ldr	r3, [r3, #0]
 801b9a8:	2b00      	cmp	r3, #0
 801b9aa:	d004      	beq.n	801b9b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801b9ac:	4b05      	ldr	r3, [pc, #20]	@ (801b9c4 <pvTaskIncrementMutexHeldCount+0x24>)
 801b9ae:	681b      	ldr	r3, [r3, #0]
 801b9b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b9b2:	3201      	adds	r2, #1
 801b9b4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 801b9b6:	4b03      	ldr	r3, [pc, #12]	@ (801b9c4 <pvTaskIncrementMutexHeldCount+0x24>)
 801b9b8:	681b      	ldr	r3, [r3, #0]
	}
 801b9ba:	4618      	mov	r0, r3
 801b9bc:	46bd      	mov	sp, r7
 801b9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9c2:	4770      	bx	lr
 801b9c4:	20001940 	.word	0x20001940

0801b9c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801b9c8:	b580      	push	{r7, lr}
 801b9ca:	b084      	sub	sp, #16
 801b9cc:	af00      	add	r7, sp, #0
 801b9ce:	6078      	str	r0, [r7, #4]
 801b9d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801b9d2:	4b21      	ldr	r3, [pc, #132]	@ (801ba58 <prvAddCurrentTaskToDelayedList+0x90>)
 801b9d4:	681b      	ldr	r3, [r3, #0]
 801b9d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b9d8:	4b20      	ldr	r3, [pc, #128]	@ (801ba5c <prvAddCurrentTaskToDelayedList+0x94>)
 801b9da:	681b      	ldr	r3, [r3, #0]
 801b9dc:	3304      	adds	r3, #4
 801b9de:	4618      	mov	r0, r3
 801b9e0:	f7fd feee 	bl	80197c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801b9e4:	687b      	ldr	r3, [r7, #4]
 801b9e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801b9ea:	d10a      	bne.n	801ba02 <prvAddCurrentTaskToDelayedList+0x3a>
 801b9ec:	683b      	ldr	r3, [r7, #0]
 801b9ee:	2b00      	cmp	r3, #0
 801b9f0:	d007      	beq.n	801ba02 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801b9f2:	4b1a      	ldr	r3, [pc, #104]	@ (801ba5c <prvAddCurrentTaskToDelayedList+0x94>)
 801b9f4:	681b      	ldr	r3, [r3, #0]
 801b9f6:	3304      	adds	r3, #4
 801b9f8:	4619      	mov	r1, r3
 801b9fa:	4819      	ldr	r0, [pc, #100]	@ (801ba60 <prvAddCurrentTaskToDelayedList+0x98>)
 801b9fc:	f7fd fe83 	bl	8019706 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801ba00:	e026      	b.n	801ba50 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801ba02:	68fa      	ldr	r2, [r7, #12]
 801ba04:	687b      	ldr	r3, [r7, #4]
 801ba06:	4413      	add	r3, r2
 801ba08:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801ba0a:	4b14      	ldr	r3, [pc, #80]	@ (801ba5c <prvAddCurrentTaskToDelayedList+0x94>)
 801ba0c:	681b      	ldr	r3, [r3, #0]
 801ba0e:	68ba      	ldr	r2, [r7, #8]
 801ba10:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801ba12:	68ba      	ldr	r2, [r7, #8]
 801ba14:	68fb      	ldr	r3, [r7, #12]
 801ba16:	429a      	cmp	r2, r3
 801ba18:	d209      	bcs.n	801ba2e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801ba1a:	4b12      	ldr	r3, [pc, #72]	@ (801ba64 <prvAddCurrentTaskToDelayedList+0x9c>)
 801ba1c:	681a      	ldr	r2, [r3, #0]
 801ba1e:	4b0f      	ldr	r3, [pc, #60]	@ (801ba5c <prvAddCurrentTaskToDelayedList+0x94>)
 801ba20:	681b      	ldr	r3, [r3, #0]
 801ba22:	3304      	adds	r3, #4
 801ba24:	4619      	mov	r1, r3
 801ba26:	4610      	mov	r0, r2
 801ba28:	f7fd fe91 	bl	801974e <vListInsert>
}
 801ba2c:	e010      	b.n	801ba50 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801ba2e:	4b0e      	ldr	r3, [pc, #56]	@ (801ba68 <prvAddCurrentTaskToDelayedList+0xa0>)
 801ba30:	681a      	ldr	r2, [r3, #0]
 801ba32:	4b0a      	ldr	r3, [pc, #40]	@ (801ba5c <prvAddCurrentTaskToDelayedList+0x94>)
 801ba34:	681b      	ldr	r3, [r3, #0]
 801ba36:	3304      	adds	r3, #4
 801ba38:	4619      	mov	r1, r3
 801ba3a:	4610      	mov	r0, r2
 801ba3c:	f7fd fe87 	bl	801974e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801ba40:	4b0a      	ldr	r3, [pc, #40]	@ (801ba6c <prvAddCurrentTaskToDelayedList+0xa4>)
 801ba42:	681b      	ldr	r3, [r3, #0]
 801ba44:	68ba      	ldr	r2, [r7, #8]
 801ba46:	429a      	cmp	r2, r3
 801ba48:	d202      	bcs.n	801ba50 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801ba4a:	4a08      	ldr	r2, [pc, #32]	@ (801ba6c <prvAddCurrentTaskToDelayedList+0xa4>)
 801ba4c:	68bb      	ldr	r3, [r7, #8]
 801ba4e:	6013      	str	r3, [r2, #0]
}
 801ba50:	bf00      	nop
 801ba52:	3710      	adds	r7, #16
 801ba54:	46bd      	mov	sp, r7
 801ba56:	bd80      	pop	{r7, pc}
 801ba58:	20001e18 	.word	0x20001e18
 801ba5c:	20001940 	.word	0x20001940
 801ba60:	20001e00 	.word	0x20001e00
 801ba64:	20001dd0 	.word	0x20001dd0
 801ba68:	20001dcc 	.word	0x20001dcc
 801ba6c:	20001e34 	.word	0x20001e34

0801ba70 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801ba70:	b580      	push	{r7, lr}
 801ba72:	b08a      	sub	sp, #40	@ 0x28
 801ba74:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801ba76:	2300      	movs	r3, #0
 801ba78:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801ba7a:	f000 fb13 	bl	801c0a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801ba7e:	4b1d      	ldr	r3, [pc, #116]	@ (801baf4 <xTimerCreateTimerTask+0x84>)
 801ba80:	681b      	ldr	r3, [r3, #0]
 801ba82:	2b00      	cmp	r3, #0
 801ba84:	d021      	beq.n	801baca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801ba86:	2300      	movs	r3, #0
 801ba88:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801ba8a:	2300      	movs	r3, #0
 801ba8c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801ba8e:	1d3a      	adds	r2, r7, #4
 801ba90:	f107 0108 	add.w	r1, r7, #8
 801ba94:	f107 030c 	add.w	r3, r7, #12
 801ba98:	4618      	mov	r0, r3
 801ba9a:	f7fd fded 	bl	8019678 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801ba9e:	6879      	ldr	r1, [r7, #4]
 801baa0:	68bb      	ldr	r3, [r7, #8]
 801baa2:	68fa      	ldr	r2, [r7, #12]
 801baa4:	9202      	str	r2, [sp, #8]
 801baa6:	9301      	str	r3, [sp, #4]
 801baa8:	2302      	movs	r3, #2
 801baaa:	9300      	str	r3, [sp, #0]
 801baac:	2300      	movs	r3, #0
 801baae:	460a      	mov	r2, r1
 801bab0:	4911      	ldr	r1, [pc, #68]	@ (801baf8 <xTimerCreateTimerTask+0x88>)
 801bab2:	4812      	ldr	r0, [pc, #72]	@ (801bafc <xTimerCreateTimerTask+0x8c>)
 801bab4:	f7fe ff68 	bl	801a988 <xTaskCreateStatic>
 801bab8:	4603      	mov	r3, r0
 801baba:	4a11      	ldr	r2, [pc, #68]	@ (801bb00 <xTimerCreateTimerTask+0x90>)
 801babc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801babe:	4b10      	ldr	r3, [pc, #64]	@ (801bb00 <xTimerCreateTimerTask+0x90>)
 801bac0:	681b      	ldr	r3, [r3, #0]
 801bac2:	2b00      	cmp	r3, #0
 801bac4:	d001      	beq.n	801baca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801bac6:	2301      	movs	r3, #1
 801bac8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801baca:	697b      	ldr	r3, [r7, #20]
 801bacc:	2b00      	cmp	r3, #0
 801bace:	d10b      	bne.n	801bae8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 801bad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bad4:	f383 8811 	msr	BASEPRI, r3
 801bad8:	f3bf 8f6f 	isb	sy
 801badc:	f3bf 8f4f 	dsb	sy
 801bae0:	613b      	str	r3, [r7, #16]
}
 801bae2:	bf00      	nop
 801bae4:	bf00      	nop
 801bae6:	e7fd      	b.n	801bae4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801bae8:	697b      	ldr	r3, [r7, #20]
}
 801baea:	4618      	mov	r0, r3
 801baec:	3718      	adds	r7, #24
 801baee:	46bd      	mov	sp, r7
 801baf0:	bd80      	pop	{r7, pc}
 801baf2:	bf00      	nop
 801baf4:	20001e70 	.word	0x20001e70
 801baf8:	0804087c 	.word	0x0804087c
 801bafc:	0801bc3d 	.word	0x0801bc3d
 801bb00:	20001e74 	.word	0x20001e74

0801bb04 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801bb04:	b580      	push	{r7, lr}
 801bb06:	b08a      	sub	sp, #40	@ 0x28
 801bb08:	af00      	add	r7, sp, #0
 801bb0a:	60f8      	str	r0, [r7, #12]
 801bb0c:	60b9      	str	r1, [r7, #8]
 801bb0e:	607a      	str	r2, [r7, #4]
 801bb10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801bb12:	2300      	movs	r3, #0
 801bb14:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801bb16:	68fb      	ldr	r3, [r7, #12]
 801bb18:	2b00      	cmp	r3, #0
 801bb1a:	d10b      	bne.n	801bb34 <xTimerGenericCommand+0x30>
	__asm volatile
 801bb1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bb20:	f383 8811 	msr	BASEPRI, r3
 801bb24:	f3bf 8f6f 	isb	sy
 801bb28:	f3bf 8f4f 	dsb	sy
 801bb2c:	623b      	str	r3, [r7, #32]
}
 801bb2e:	bf00      	nop
 801bb30:	bf00      	nop
 801bb32:	e7fd      	b.n	801bb30 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801bb34:	4b19      	ldr	r3, [pc, #100]	@ (801bb9c <xTimerGenericCommand+0x98>)
 801bb36:	681b      	ldr	r3, [r3, #0]
 801bb38:	2b00      	cmp	r3, #0
 801bb3a:	d02a      	beq.n	801bb92 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801bb3c:	68bb      	ldr	r3, [r7, #8]
 801bb3e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801bb40:	687b      	ldr	r3, [r7, #4]
 801bb42:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801bb44:	68fb      	ldr	r3, [r7, #12]
 801bb46:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801bb48:	68bb      	ldr	r3, [r7, #8]
 801bb4a:	2b05      	cmp	r3, #5
 801bb4c:	dc18      	bgt.n	801bb80 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801bb4e:	f7ff fdad 	bl	801b6ac <xTaskGetSchedulerState>
 801bb52:	4603      	mov	r3, r0
 801bb54:	2b02      	cmp	r3, #2
 801bb56:	d109      	bne.n	801bb6c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801bb58:	4b10      	ldr	r3, [pc, #64]	@ (801bb9c <xTimerGenericCommand+0x98>)
 801bb5a:	6818      	ldr	r0, [r3, #0]
 801bb5c:	f107 0110 	add.w	r1, r7, #16
 801bb60:	2300      	movs	r3, #0
 801bb62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801bb64:	f7fe f854 	bl	8019c10 <xQueueGenericSend>
 801bb68:	6278      	str	r0, [r7, #36]	@ 0x24
 801bb6a:	e012      	b.n	801bb92 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801bb6c:	4b0b      	ldr	r3, [pc, #44]	@ (801bb9c <xTimerGenericCommand+0x98>)
 801bb6e:	6818      	ldr	r0, [r3, #0]
 801bb70:	f107 0110 	add.w	r1, r7, #16
 801bb74:	2300      	movs	r3, #0
 801bb76:	2200      	movs	r2, #0
 801bb78:	f7fe f84a 	bl	8019c10 <xQueueGenericSend>
 801bb7c:	6278      	str	r0, [r7, #36]	@ 0x24
 801bb7e:	e008      	b.n	801bb92 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801bb80:	4b06      	ldr	r3, [pc, #24]	@ (801bb9c <xTimerGenericCommand+0x98>)
 801bb82:	6818      	ldr	r0, [r3, #0]
 801bb84:	f107 0110 	add.w	r1, r7, #16
 801bb88:	2300      	movs	r3, #0
 801bb8a:	683a      	ldr	r2, [r7, #0]
 801bb8c:	f7fe f942 	bl	8019e14 <xQueueGenericSendFromISR>
 801bb90:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801bb92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801bb94:	4618      	mov	r0, r3
 801bb96:	3728      	adds	r7, #40	@ 0x28
 801bb98:	46bd      	mov	sp, r7
 801bb9a:	bd80      	pop	{r7, pc}
 801bb9c:	20001e70 	.word	0x20001e70

0801bba0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801bba0:	b580      	push	{r7, lr}
 801bba2:	b088      	sub	sp, #32
 801bba4:	af02      	add	r7, sp, #8
 801bba6:	6078      	str	r0, [r7, #4]
 801bba8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801bbaa:	4b23      	ldr	r3, [pc, #140]	@ (801bc38 <prvProcessExpiredTimer+0x98>)
 801bbac:	681b      	ldr	r3, [r3, #0]
 801bbae:	68db      	ldr	r3, [r3, #12]
 801bbb0:	68db      	ldr	r3, [r3, #12]
 801bbb2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801bbb4:	697b      	ldr	r3, [r7, #20]
 801bbb6:	3304      	adds	r3, #4
 801bbb8:	4618      	mov	r0, r3
 801bbba:	f7fd fe01 	bl	80197c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801bbbe:	697b      	ldr	r3, [r7, #20]
 801bbc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801bbc4:	f003 0304 	and.w	r3, r3, #4
 801bbc8:	2b00      	cmp	r3, #0
 801bbca:	d023      	beq.n	801bc14 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801bbcc:	697b      	ldr	r3, [r7, #20]
 801bbce:	699a      	ldr	r2, [r3, #24]
 801bbd0:	687b      	ldr	r3, [r7, #4]
 801bbd2:	18d1      	adds	r1, r2, r3
 801bbd4:	687b      	ldr	r3, [r7, #4]
 801bbd6:	683a      	ldr	r2, [r7, #0]
 801bbd8:	6978      	ldr	r0, [r7, #20]
 801bbda:	f000 f8d5 	bl	801bd88 <prvInsertTimerInActiveList>
 801bbde:	4603      	mov	r3, r0
 801bbe0:	2b00      	cmp	r3, #0
 801bbe2:	d020      	beq.n	801bc26 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801bbe4:	2300      	movs	r3, #0
 801bbe6:	9300      	str	r3, [sp, #0]
 801bbe8:	2300      	movs	r3, #0
 801bbea:	687a      	ldr	r2, [r7, #4]
 801bbec:	2100      	movs	r1, #0
 801bbee:	6978      	ldr	r0, [r7, #20]
 801bbf0:	f7ff ff88 	bl	801bb04 <xTimerGenericCommand>
 801bbf4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801bbf6:	693b      	ldr	r3, [r7, #16]
 801bbf8:	2b00      	cmp	r3, #0
 801bbfa:	d114      	bne.n	801bc26 <prvProcessExpiredTimer+0x86>
	__asm volatile
 801bbfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bc00:	f383 8811 	msr	BASEPRI, r3
 801bc04:	f3bf 8f6f 	isb	sy
 801bc08:	f3bf 8f4f 	dsb	sy
 801bc0c:	60fb      	str	r3, [r7, #12]
}
 801bc0e:	bf00      	nop
 801bc10:	bf00      	nop
 801bc12:	e7fd      	b.n	801bc10 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801bc14:	697b      	ldr	r3, [r7, #20]
 801bc16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801bc1a:	f023 0301 	bic.w	r3, r3, #1
 801bc1e:	b2da      	uxtb	r2, r3
 801bc20:	697b      	ldr	r3, [r7, #20]
 801bc22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801bc26:	697b      	ldr	r3, [r7, #20]
 801bc28:	6a1b      	ldr	r3, [r3, #32]
 801bc2a:	6978      	ldr	r0, [r7, #20]
 801bc2c:	4798      	blx	r3
}
 801bc2e:	bf00      	nop
 801bc30:	3718      	adds	r7, #24
 801bc32:	46bd      	mov	sp, r7
 801bc34:	bd80      	pop	{r7, pc}
 801bc36:	bf00      	nop
 801bc38:	20001e68 	.word	0x20001e68

0801bc3c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801bc3c:	b580      	push	{r7, lr}
 801bc3e:	b084      	sub	sp, #16
 801bc40:	af00      	add	r7, sp, #0
 801bc42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801bc44:	f107 0308 	add.w	r3, r7, #8
 801bc48:	4618      	mov	r0, r3
 801bc4a:	f000 f859 	bl	801bd00 <prvGetNextExpireTime>
 801bc4e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801bc50:	68bb      	ldr	r3, [r7, #8]
 801bc52:	4619      	mov	r1, r3
 801bc54:	68f8      	ldr	r0, [r7, #12]
 801bc56:	f000 f805 	bl	801bc64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801bc5a:	f000 f8d7 	bl	801be0c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801bc5e:	bf00      	nop
 801bc60:	e7f0      	b.n	801bc44 <prvTimerTask+0x8>
	...

0801bc64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801bc64:	b580      	push	{r7, lr}
 801bc66:	b084      	sub	sp, #16
 801bc68:	af00      	add	r7, sp, #0
 801bc6a:	6078      	str	r0, [r7, #4]
 801bc6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801bc6e:	f7ff f919 	bl	801aea4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801bc72:	f107 0308 	add.w	r3, r7, #8
 801bc76:	4618      	mov	r0, r3
 801bc78:	f000 f866 	bl	801bd48 <prvSampleTimeNow>
 801bc7c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801bc7e:	68bb      	ldr	r3, [r7, #8]
 801bc80:	2b00      	cmp	r3, #0
 801bc82:	d130      	bne.n	801bce6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801bc84:	683b      	ldr	r3, [r7, #0]
 801bc86:	2b00      	cmp	r3, #0
 801bc88:	d10a      	bne.n	801bca0 <prvProcessTimerOrBlockTask+0x3c>
 801bc8a:	687a      	ldr	r2, [r7, #4]
 801bc8c:	68fb      	ldr	r3, [r7, #12]
 801bc8e:	429a      	cmp	r2, r3
 801bc90:	d806      	bhi.n	801bca0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801bc92:	f7ff f915 	bl	801aec0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801bc96:	68f9      	ldr	r1, [r7, #12]
 801bc98:	6878      	ldr	r0, [r7, #4]
 801bc9a:	f7ff ff81 	bl	801bba0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801bc9e:	e024      	b.n	801bcea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801bca0:	683b      	ldr	r3, [r7, #0]
 801bca2:	2b00      	cmp	r3, #0
 801bca4:	d008      	beq.n	801bcb8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801bca6:	4b13      	ldr	r3, [pc, #76]	@ (801bcf4 <prvProcessTimerOrBlockTask+0x90>)
 801bca8:	681b      	ldr	r3, [r3, #0]
 801bcaa:	681b      	ldr	r3, [r3, #0]
 801bcac:	2b00      	cmp	r3, #0
 801bcae:	d101      	bne.n	801bcb4 <prvProcessTimerOrBlockTask+0x50>
 801bcb0:	2301      	movs	r3, #1
 801bcb2:	e000      	b.n	801bcb6 <prvProcessTimerOrBlockTask+0x52>
 801bcb4:	2300      	movs	r3, #0
 801bcb6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801bcb8:	4b0f      	ldr	r3, [pc, #60]	@ (801bcf8 <prvProcessTimerOrBlockTask+0x94>)
 801bcba:	6818      	ldr	r0, [r3, #0]
 801bcbc:	687a      	ldr	r2, [r7, #4]
 801bcbe:	68fb      	ldr	r3, [r7, #12]
 801bcc0:	1ad3      	subs	r3, r2, r3
 801bcc2:	683a      	ldr	r2, [r7, #0]
 801bcc4:	4619      	mov	r1, r3
 801bcc6:	f7fe fe2b 	bl	801a920 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801bcca:	f7ff f8f9 	bl	801aec0 <xTaskResumeAll>
 801bcce:	4603      	mov	r3, r0
 801bcd0:	2b00      	cmp	r3, #0
 801bcd2:	d10a      	bne.n	801bcea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801bcd4:	4b09      	ldr	r3, [pc, #36]	@ (801bcfc <prvProcessTimerOrBlockTask+0x98>)
 801bcd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801bcda:	601a      	str	r2, [r3, #0]
 801bcdc:	f3bf 8f4f 	dsb	sy
 801bce0:	f3bf 8f6f 	isb	sy
}
 801bce4:	e001      	b.n	801bcea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801bce6:	f7ff f8eb 	bl	801aec0 <xTaskResumeAll>
}
 801bcea:	bf00      	nop
 801bcec:	3710      	adds	r7, #16
 801bcee:	46bd      	mov	sp, r7
 801bcf0:	bd80      	pop	{r7, pc}
 801bcf2:	bf00      	nop
 801bcf4:	20001e6c 	.word	0x20001e6c
 801bcf8:	20001e70 	.word	0x20001e70
 801bcfc:	e000ed04 	.word	0xe000ed04

0801bd00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801bd00:	b480      	push	{r7}
 801bd02:	b085      	sub	sp, #20
 801bd04:	af00      	add	r7, sp, #0
 801bd06:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801bd08:	4b0e      	ldr	r3, [pc, #56]	@ (801bd44 <prvGetNextExpireTime+0x44>)
 801bd0a:	681b      	ldr	r3, [r3, #0]
 801bd0c:	681b      	ldr	r3, [r3, #0]
 801bd0e:	2b00      	cmp	r3, #0
 801bd10:	d101      	bne.n	801bd16 <prvGetNextExpireTime+0x16>
 801bd12:	2201      	movs	r2, #1
 801bd14:	e000      	b.n	801bd18 <prvGetNextExpireTime+0x18>
 801bd16:	2200      	movs	r2, #0
 801bd18:	687b      	ldr	r3, [r7, #4]
 801bd1a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801bd1c:	687b      	ldr	r3, [r7, #4]
 801bd1e:	681b      	ldr	r3, [r3, #0]
 801bd20:	2b00      	cmp	r3, #0
 801bd22:	d105      	bne.n	801bd30 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801bd24:	4b07      	ldr	r3, [pc, #28]	@ (801bd44 <prvGetNextExpireTime+0x44>)
 801bd26:	681b      	ldr	r3, [r3, #0]
 801bd28:	68db      	ldr	r3, [r3, #12]
 801bd2a:	681b      	ldr	r3, [r3, #0]
 801bd2c:	60fb      	str	r3, [r7, #12]
 801bd2e:	e001      	b.n	801bd34 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801bd30:	2300      	movs	r3, #0
 801bd32:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801bd34:	68fb      	ldr	r3, [r7, #12]
}
 801bd36:	4618      	mov	r0, r3
 801bd38:	3714      	adds	r7, #20
 801bd3a:	46bd      	mov	sp, r7
 801bd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd40:	4770      	bx	lr
 801bd42:	bf00      	nop
 801bd44:	20001e68 	.word	0x20001e68

0801bd48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801bd48:	b580      	push	{r7, lr}
 801bd4a:	b084      	sub	sp, #16
 801bd4c:	af00      	add	r7, sp, #0
 801bd4e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801bd50:	f7ff f954 	bl	801affc <xTaskGetTickCount>
 801bd54:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801bd56:	4b0b      	ldr	r3, [pc, #44]	@ (801bd84 <prvSampleTimeNow+0x3c>)
 801bd58:	681b      	ldr	r3, [r3, #0]
 801bd5a:	68fa      	ldr	r2, [r7, #12]
 801bd5c:	429a      	cmp	r2, r3
 801bd5e:	d205      	bcs.n	801bd6c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801bd60:	f000 f93a 	bl	801bfd8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801bd64:	687b      	ldr	r3, [r7, #4]
 801bd66:	2201      	movs	r2, #1
 801bd68:	601a      	str	r2, [r3, #0]
 801bd6a:	e002      	b.n	801bd72 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801bd6c:	687b      	ldr	r3, [r7, #4]
 801bd6e:	2200      	movs	r2, #0
 801bd70:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801bd72:	4a04      	ldr	r2, [pc, #16]	@ (801bd84 <prvSampleTimeNow+0x3c>)
 801bd74:	68fb      	ldr	r3, [r7, #12]
 801bd76:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801bd78:	68fb      	ldr	r3, [r7, #12]
}
 801bd7a:	4618      	mov	r0, r3
 801bd7c:	3710      	adds	r7, #16
 801bd7e:	46bd      	mov	sp, r7
 801bd80:	bd80      	pop	{r7, pc}
 801bd82:	bf00      	nop
 801bd84:	20001e78 	.word	0x20001e78

0801bd88 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801bd88:	b580      	push	{r7, lr}
 801bd8a:	b086      	sub	sp, #24
 801bd8c:	af00      	add	r7, sp, #0
 801bd8e:	60f8      	str	r0, [r7, #12]
 801bd90:	60b9      	str	r1, [r7, #8]
 801bd92:	607a      	str	r2, [r7, #4]
 801bd94:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801bd96:	2300      	movs	r3, #0
 801bd98:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801bd9a:	68fb      	ldr	r3, [r7, #12]
 801bd9c:	68ba      	ldr	r2, [r7, #8]
 801bd9e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801bda0:	68fb      	ldr	r3, [r7, #12]
 801bda2:	68fa      	ldr	r2, [r7, #12]
 801bda4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801bda6:	68ba      	ldr	r2, [r7, #8]
 801bda8:	687b      	ldr	r3, [r7, #4]
 801bdaa:	429a      	cmp	r2, r3
 801bdac:	d812      	bhi.n	801bdd4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801bdae:	687a      	ldr	r2, [r7, #4]
 801bdb0:	683b      	ldr	r3, [r7, #0]
 801bdb2:	1ad2      	subs	r2, r2, r3
 801bdb4:	68fb      	ldr	r3, [r7, #12]
 801bdb6:	699b      	ldr	r3, [r3, #24]
 801bdb8:	429a      	cmp	r2, r3
 801bdba:	d302      	bcc.n	801bdc2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801bdbc:	2301      	movs	r3, #1
 801bdbe:	617b      	str	r3, [r7, #20]
 801bdc0:	e01b      	b.n	801bdfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801bdc2:	4b10      	ldr	r3, [pc, #64]	@ (801be04 <prvInsertTimerInActiveList+0x7c>)
 801bdc4:	681a      	ldr	r2, [r3, #0]
 801bdc6:	68fb      	ldr	r3, [r7, #12]
 801bdc8:	3304      	adds	r3, #4
 801bdca:	4619      	mov	r1, r3
 801bdcc:	4610      	mov	r0, r2
 801bdce:	f7fd fcbe 	bl	801974e <vListInsert>
 801bdd2:	e012      	b.n	801bdfa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801bdd4:	687a      	ldr	r2, [r7, #4]
 801bdd6:	683b      	ldr	r3, [r7, #0]
 801bdd8:	429a      	cmp	r2, r3
 801bdda:	d206      	bcs.n	801bdea <prvInsertTimerInActiveList+0x62>
 801bddc:	68ba      	ldr	r2, [r7, #8]
 801bdde:	683b      	ldr	r3, [r7, #0]
 801bde0:	429a      	cmp	r2, r3
 801bde2:	d302      	bcc.n	801bdea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801bde4:	2301      	movs	r3, #1
 801bde6:	617b      	str	r3, [r7, #20]
 801bde8:	e007      	b.n	801bdfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801bdea:	4b07      	ldr	r3, [pc, #28]	@ (801be08 <prvInsertTimerInActiveList+0x80>)
 801bdec:	681a      	ldr	r2, [r3, #0]
 801bdee:	68fb      	ldr	r3, [r7, #12]
 801bdf0:	3304      	adds	r3, #4
 801bdf2:	4619      	mov	r1, r3
 801bdf4:	4610      	mov	r0, r2
 801bdf6:	f7fd fcaa 	bl	801974e <vListInsert>
		}
	}

	return xProcessTimerNow;
 801bdfa:	697b      	ldr	r3, [r7, #20]
}
 801bdfc:	4618      	mov	r0, r3
 801bdfe:	3718      	adds	r7, #24
 801be00:	46bd      	mov	sp, r7
 801be02:	bd80      	pop	{r7, pc}
 801be04:	20001e6c 	.word	0x20001e6c
 801be08:	20001e68 	.word	0x20001e68

0801be0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801be0c:	b580      	push	{r7, lr}
 801be0e:	b08e      	sub	sp, #56	@ 0x38
 801be10:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801be12:	e0ce      	b.n	801bfb2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801be14:	687b      	ldr	r3, [r7, #4]
 801be16:	2b00      	cmp	r3, #0
 801be18:	da19      	bge.n	801be4e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801be1a:	1d3b      	adds	r3, r7, #4
 801be1c:	3304      	adds	r3, #4
 801be1e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801be20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be22:	2b00      	cmp	r3, #0
 801be24:	d10b      	bne.n	801be3e <prvProcessReceivedCommands+0x32>
	__asm volatile
 801be26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801be2a:	f383 8811 	msr	BASEPRI, r3
 801be2e:	f3bf 8f6f 	isb	sy
 801be32:	f3bf 8f4f 	dsb	sy
 801be36:	61fb      	str	r3, [r7, #28]
}
 801be38:	bf00      	nop
 801be3a:	bf00      	nop
 801be3c:	e7fd      	b.n	801be3a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801be3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be40:	681b      	ldr	r3, [r3, #0]
 801be42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801be44:	6850      	ldr	r0, [r2, #4]
 801be46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801be48:	6892      	ldr	r2, [r2, #8]
 801be4a:	4611      	mov	r1, r2
 801be4c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801be4e:	687b      	ldr	r3, [r7, #4]
 801be50:	2b00      	cmp	r3, #0
 801be52:	f2c0 80ae 	blt.w	801bfb2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801be56:	68fb      	ldr	r3, [r7, #12]
 801be58:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801be5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be5c:	695b      	ldr	r3, [r3, #20]
 801be5e:	2b00      	cmp	r3, #0
 801be60:	d004      	beq.n	801be6c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801be62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be64:	3304      	adds	r3, #4
 801be66:	4618      	mov	r0, r3
 801be68:	f7fd fcaa 	bl	80197c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801be6c:	463b      	mov	r3, r7
 801be6e:	4618      	mov	r0, r3
 801be70:	f7ff ff6a 	bl	801bd48 <prvSampleTimeNow>
 801be74:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 801be76:	687b      	ldr	r3, [r7, #4]
 801be78:	2b09      	cmp	r3, #9
 801be7a:	f200 8097 	bhi.w	801bfac <prvProcessReceivedCommands+0x1a0>
 801be7e:	a201      	add	r2, pc, #4	@ (adr r2, 801be84 <prvProcessReceivedCommands+0x78>)
 801be80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801be84:	0801bead 	.word	0x0801bead
 801be88:	0801bead 	.word	0x0801bead
 801be8c:	0801bead 	.word	0x0801bead
 801be90:	0801bf23 	.word	0x0801bf23
 801be94:	0801bf37 	.word	0x0801bf37
 801be98:	0801bf83 	.word	0x0801bf83
 801be9c:	0801bead 	.word	0x0801bead
 801bea0:	0801bead 	.word	0x0801bead
 801bea4:	0801bf23 	.word	0x0801bf23
 801bea8:	0801bf37 	.word	0x0801bf37
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801beac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801beae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801beb2:	f043 0301 	orr.w	r3, r3, #1
 801beb6:	b2da      	uxtb	r2, r3
 801beb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801beba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801bebe:	68ba      	ldr	r2, [r7, #8]
 801bec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bec2:	699b      	ldr	r3, [r3, #24]
 801bec4:	18d1      	adds	r1, r2, r3
 801bec6:	68bb      	ldr	r3, [r7, #8]
 801bec8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801beca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801becc:	f7ff ff5c 	bl	801bd88 <prvInsertTimerInActiveList>
 801bed0:	4603      	mov	r3, r0
 801bed2:	2b00      	cmp	r3, #0
 801bed4:	d06c      	beq.n	801bfb0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801bed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bed8:	6a1b      	ldr	r3, [r3, #32]
 801beda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801bedc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801bede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bee0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801bee4:	f003 0304 	and.w	r3, r3, #4
 801bee8:	2b00      	cmp	r3, #0
 801beea:	d061      	beq.n	801bfb0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801beec:	68ba      	ldr	r2, [r7, #8]
 801beee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bef0:	699b      	ldr	r3, [r3, #24]
 801bef2:	441a      	add	r2, r3
 801bef4:	2300      	movs	r3, #0
 801bef6:	9300      	str	r3, [sp, #0]
 801bef8:	2300      	movs	r3, #0
 801befa:	2100      	movs	r1, #0
 801befc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801befe:	f7ff fe01 	bl	801bb04 <xTimerGenericCommand>
 801bf02:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801bf04:	6a3b      	ldr	r3, [r7, #32]
 801bf06:	2b00      	cmp	r3, #0
 801bf08:	d152      	bne.n	801bfb0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 801bf0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bf0e:	f383 8811 	msr	BASEPRI, r3
 801bf12:	f3bf 8f6f 	isb	sy
 801bf16:	f3bf 8f4f 	dsb	sy
 801bf1a:	61bb      	str	r3, [r7, #24]
}
 801bf1c:	bf00      	nop
 801bf1e:	bf00      	nop
 801bf20:	e7fd      	b.n	801bf1e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801bf22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801bf28:	f023 0301 	bic.w	r3, r3, #1
 801bf2c:	b2da      	uxtb	r2, r3
 801bf2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf30:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801bf34:	e03d      	b.n	801bfb2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801bf36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801bf3c:	f043 0301 	orr.w	r3, r3, #1
 801bf40:	b2da      	uxtb	r2, r3
 801bf42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf44:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801bf48:	68ba      	ldr	r2, [r7, #8]
 801bf4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf4c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801bf4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf50:	699b      	ldr	r3, [r3, #24]
 801bf52:	2b00      	cmp	r3, #0
 801bf54:	d10b      	bne.n	801bf6e <prvProcessReceivedCommands+0x162>
	__asm volatile
 801bf56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bf5a:	f383 8811 	msr	BASEPRI, r3
 801bf5e:	f3bf 8f6f 	isb	sy
 801bf62:	f3bf 8f4f 	dsb	sy
 801bf66:	617b      	str	r3, [r7, #20]
}
 801bf68:	bf00      	nop
 801bf6a:	bf00      	nop
 801bf6c:	e7fd      	b.n	801bf6a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801bf6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf70:	699a      	ldr	r2, [r3, #24]
 801bf72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bf74:	18d1      	adds	r1, r2, r3
 801bf76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bf78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bf7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801bf7c:	f7ff ff04 	bl	801bd88 <prvInsertTimerInActiveList>
					break;
 801bf80:	e017      	b.n	801bfb2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801bf82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801bf88:	f003 0302 	and.w	r3, r3, #2
 801bf8c:	2b00      	cmp	r3, #0
 801bf8e:	d103      	bne.n	801bf98 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 801bf90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801bf92:	f000 fbe9 	bl	801c768 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801bf96:	e00c      	b.n	801bfb2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801bf98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf9a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801bf9e:	f023 0301 	bic.w	r3, r3, #1
 801bfa2:	b2da      	uxtb	r2, r3
 801bfa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bfa6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801bfaa:	e002      	b.n	801bfb2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 801bfac:	bf00      	nop
 801bfae:	e000      	b.n	801bfb2 <prvProcessReceivedCommands+0x1a6>
					break;
 801bfb0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801bfb2:	4b08      	ldr	r3, [pc, #32]	@ (801bfd4 <prvProcessReceivedCommands+0x1c8>)
 801bfb4:	681b      	ldr	r3, [r3, #0]
 801bfb6:	1d39      	adds	r1, r7, #4
 801bfb8:	2200      	movs	r2, #0
 801bfba:	4618      	mov	r0, r3
 801bfbc:	f7fd ffc8 	bl	8019f50 <xQueueReceive>
 801bfc0:	4603      	mov	r3, r0
 801bfc2:	2b00      	cmp	r3, #0
 801bfc4:	f47f af26 	bne.w	801be14 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 801bfc8:	bf00      	nop
 801bfca:	bf00      	nop
 801bfcc:	3730      	adds	r7, #48	@ 0x30
 801bfce:	46bd      	mov	sp, r7
 801bfd0:	bd80      	pop	{r7, pc}
 801bfd2:	bf00      	nop
 801bfd4:	20001e70 	.word	0x20001e70

0801bfd8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801bfd8:	b580      	push	{r7, lr}
 801bfda:	b088      	sub	sp, #32
 801bfdc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801bfde:	e049      	b.n	801c074 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801bfe0:	4b2e      	ldr	r3, [pc, #184]	@ (801c09c <prvSwitchTimerLists+0xc4>)
 801bfe2:	681b      	ldr	r3, [r3, #0]
 801bfe4:	68db      	ldr	r3, [r3, #12]
 801bfe6:	681b      	ldr	r3, [r3, #0]
 801bfe8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801bfea:	4b2c      	ldr	r3, [pc, #176]	@ (801c09c <prvSwitchTimerLists+0xc4>)
 801bfec:	681b      	ldr	r3, [r3, #0]
 801bfee:	68db      	ldr	r3, [r3, #12]
 801bff0:	68db      	ldr	r3, [r3, #12]
 801bff2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801bff4:	68fb      	ldr	r3, [r7, #12]
 801bff6:	3304      	adds	r3, #4
 801bff8:	4618      	mov	r0, r3
 801bffa:	f7fd fbe1 	bl	80197c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801bffe:	68fb      	ldr	r3, [r7, #12]
 801c000:	6a1b      	ldr	r3, [r3, #32]
 801c002:	68f8      	ldr	r0, [r7, #12]
 801c004:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801c006:	68fb      	ldr	r3, [r7, #12]
 801c008:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801c00c:	f003 0304 	and.w	r3, r3, #4
 801c010:	2b00      	cmp	r3, #0
 801c012:	d02f      	beq.n	801c074 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801c014:	68fb      	ldr	r3, [r7, #12]
 801c016:	699b      	ldr	r3, [r3, #24]
 801c018:	693a      	ldr	r2, [r7, #16]
 801c01a:	4413      	add	r3, r2
 801c01c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801c01e:	68ba      	ldr	r2, [r7, #8]
 801c020:	693b      	ldr	r3, [r7, #16]
 801c022:	429a      	cmp	r2, r3
 801c024:	d90e      	bls.n	801c044 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801c026:	68fb      	ldr	r3, [r7, #12]
 801c028:	68ba      	ldr	r2, [r7, #8]
 801c02a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801c02c:	68fb      	ldr	r3, [r7, #12]
 801c02e:	68fa      	ldr	r2, [r7, #12]
 801c030:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801c032:	4b1a      	ldr	r3, [pc, #104]	@ (801c09c <prvSwitchTimerLists+0xc4>)
 801c034:	681a      	ldr	r2, [r3, #0]
 801c036:	68fb      	ldr	r3, [r7, #12]
 801c038:	3304      	adds	r3, #4
 801c03a:	4619      	mov	r1, r3
 801c03c:	4610      	mov	r0, r2
 801c03e:	f7fd fb86 	bl	801974e <vListInsert>
 801c042:	e017      	b.n	801c074 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801c044:	2300      	movs	r3, #0
 801c046:	9300      	str	r3, [sp, #0]
 801c048:	2300      	movs	r3, #0
 801c04a:	693a      	ldr	r2, [r7, #16]
 801c04c:	2100      	movs	r1, #0
 801c04e:	68f8      	ldr	r0, [r7, #12]
 801c050:	f7ff fd58 	bl	801bb04 <xTimerGenericCommand>
 801c054:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801c056:	687b      	ldr	r3, [r7, #4]
 801c058:	2b00      	cmp	r3, #0
 801c05a:	d10b      	bne.n	801c074 <prvSwitchTimerLists+0x9c>
	__asm volatile
 801c05c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c060:	f383 8811 	msr	BASEPRI, r3
 801c064:	f3bf 8f6f 	isb	sy
 801c068:	f3bf 8f4f 	dsb	sy
 801c06c:	603b      	str	r3, [r7, #0]
}
 801c06e:	bf00      	nop
 801c070:	bf00      	nop
 801c072:	e7fd      	b.n	801c070 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801c074:	4b09      	ldr	r3, [pc, #36]	@ (801c09c <prvSwitchTimerLists+0xc4>)
 801c076:	681b      	ldr	r3, [r3, #0]
 801c078:	681b      	ldr	r3, [r3, #0]
 801c07a:	2b00      	cmp	r3, #0
 801c07c:	d1b0      	bne.n	801bfe0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801c07e:	4b07      	ldr	r3, [pc, #28]	@ (801c09c <prvSwitchTimerLists+0xc4>)
 801c080:	681b      	ldr	r3, [r3, #0]
 801c082:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801c084:	4b06      	ldr	r3, [pc, #24]	@ (801c0a0 <prvSwitchTimerLists+0xc8>)
 801c086:	681b      	ldr	r3, [r3, #0]
 801c088:	4a04      	ldr	r2, [pc, #16]	@ (801c09c <prvSwitchTimerLists+0xc4>)
 801c08a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801c08c:	4a04      	ldr	r2, [pc, #16]	@ (801c0a0 <prvSwitchTimerLists+0xc8>)
 801c08e:	697b      	ldr	r3, [r7, #20]
 801c090:	6013      	str	r3, [r2, #0]
}
 801c092:	bf00      	nop
 801c094:	3718      	adds	r7, #24
 801c096:	46bd      	mov	sp, r7
 801c098:	bd80      	pop	{r7, pc}
 801c09a:	bf00      	nop
 801c09c:	20001e68 	.word	0x20001e68
 801c0a0:	20001e6c 	.word	0x20001e6c

0801c0a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801c0a4:	b580      	push	{r7, lr}
 801c0a6:	b082      	sub	sp, #8
 801c0a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801c0aa:	f000 f96d 	bl	801c388 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801c0ae:	4b15      	ldr	r3, [pc, #84]	@ (801c104 <prvCheckForValidListAndQueue+0x60>)
 801c0b0:	681b      	ldr	r3, [r3, #0]
 801c0b2:	2b00      	cmp	r3, #0
 801c0b4:	d120      	bne.n	801c0f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801c0b6:	4814      	ldr	r0, [pc, #80]	@ (801c108 <prvCheckForValidListAndQueue+0x64>)
 801c0b8:	f7fd faf8 	bl	80196ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801c0bc:	4813      	ldr	r0, [pc, #76]	@ (801c10c <prvCheckForValidListAndQueue+0x68>)
 801c0be:	f7fd faf5 	bl	80196ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801c0c2:	4b13      	ldr	r3, [pc, #76]	@ (801c110 <prvCheckForValidListAndQueue+0x6c>)
 801c0c4:	4a10      	ldr	r2, [pc, #64]	@ (801c108 <prvCheckForValidListAndQueue+0x64>)
 801c0c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801c0c8:	4b12      	ldr	r3, [pc, #72]	@ (801c114 <prvCheckForValidListAndQueue+0x70>)
 801c0ca:	4a10      	ldr	r2, [pc, #64]	@ (801c10c <prvCheckForValidListAndQueue+0x68>)
 801c0cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801c0ce:	2300      	movs	r3, #0
 801c0d0:	9300      	str	r3, [sp, #0]
 801c0d2:	4b11      	ldr	r3, [pc, #68]	@ (801c118 <prvCheckForValidListAndQueue+0x74>)
 801c0d4:	4a11      	ldr	r2, [pc, #68]	@ (801c11c <prvCheckForValidListAndQueue+0x78>)
 801c0d6:	2110      	movs	r1, #16
 801c0d8:	200a      	movs	r0, #10
 801c0da:	f7fd fc05 	bl	80198e8 <xQueueGenericCreateStatic>
 801c0de:	4603      	mov	r3, r0
 801c0e0:	4a08      	ldr	r2, [pc, #32]	@ (801c104 <prvCheckForValidListAndQueue+0x60>)
 801c0e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801c0e4:	4b07      	ldr	r3, [pc, #28]	@ (801c104 <prvCheckForValidListAndQueue+0x60>)
 801c0e6:	681b      	ldr	r3, [r3, #0]
 801c0e8:	2b00      	cmp	r3, #0
 801c0ea:	d005      	beq.n	801c0f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801c0ec:	4b05      	ldr	r3, [pc, #20]	@ (801c104 <prvCheckForValidListAndQueue+0x60>)
 801c0ee:	681b      	ldr	r3, [r3, #0]
 801c0f0:	490b      	ldr	r1, [pc, #44]	@ (801c120 <prvCheckForValidListAndQueue+0x7c>)
 801c0f2:	4618      	mov	r0, r3
 801c0f4:	f7fe fbea 	bl	801a8cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801c0f8:	f000 f978 	bl	801c3ec <vPortExitCritical>
}
 801c0fc:	bf00      	nop
 801c0fe:	46bd      	mov	sp, r7
 801c100:	bd80      	pop	{r7, pc}
 801c102:	bf00      	nop
 801c104:	20001e70 	.word	0x20001e70
 801c108:	20001e40 	.word	0x20001e40
 801c10c:	20001e54 	.word	0x20001e54
 801c110:	20001e68 	.word	0x20001e68
 801c114:	20001e6c 	.word	0x20001e6c
 801c118:	20001f1c 	.word	0x20001f1c
 801c11c:	20001e7c 	.word	0x20001e7c
 801c120:	08040884 	.word	0x08040884

0801c124 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801c124:	b480      	push	{r7}
 801c126:	b085      	sub	sp, #20
 801c128:	af00      	add	r7, sp, #0
 801c12a:	60f8      	str	r0, [r7, #12]
 801c12c:	60b9      	str	r1, [r7, #8]
 801c12e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801c130:	68fb      	ldr	r3, [r7, #12]
 801c132:	3b04      	subs	r3, #4
 801c134:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801c136:	68fb      	ldr	r3, [r7, #12]
 801c138:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801c13c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801c13e:	68fb      	ldr	r3, [r7, #12]
 801c140:	3b04      	subs	r3, #4
 801c142:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801c144:	68bb      	ldr	r3, [r7, #8]
 801c146:	f023 0201 	bic.w	r2, r3, #1
 801c14a:	68fb      	ldr	r3, [r7, #12]
 801c14c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801c14e:	68fb      	ldr	r3, [r7, #12]
 801c150:	3b04      	subs	r3, #4
 801c152:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801c154:	4a0c      	ldr	r2, [pc, #48]	@ (801c188 <pxPortInitialiseStack+0x64>)
 801c156:	68fb      	ldr	r3, [r7, #12]
 801c158:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801c15a:	68fb      	ldr	r3, [r7, #12]
 801c15c:	3b14      	subs	r3, #20
 801c15e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801c160:	687a      	ldr	r2, [r7, #4]
 801c162:	68fb      	ldr	r3, [r7, #12]
 801c164:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801c166:	68fb      	ldr	r3, [r7, #12]
 801c168:	3b04      	subs	r3, #4
 801c16a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801c16c:	68fb      	ldr	r3, [r7, #12]
 801c16e:	f06f 0202 	mvn.w	r2, #2
 801c172:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801c174:	68fb      	ldr	r3, [r7, #12]
 801c176:	3b20      	subs	r3, #32
 801c178:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801c17a:	68fb      	ldr	r3, [r7, #12]
}
 801c17c:	4618      	mov	r0, r3
 801c17e:	3714      	adds	r7, #20
 801c180:	46bd      	mov	sp, r7
 801c182:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c186:	4770      	bx	lr
 801c188:	0801c18d 	.word	0x0801c18d

0801c18c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801c18c:	b480      	push	{r7}
 801c18e:	b085      	sub	sp, #20
 801c190:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801c192:	2300      	movs	r3, #0
 801c194:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801c196:	4b13      	ldr	r3, [pc, #76]	@ (801c1e4 <prvTaskExitError+0x58>)
 801c198:	681b      	ldr	r3, [r3, #0]
 801c19a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c19e:	d00b      	beq.n	801c1b8 <prvTaskExitError+0x2c>
	__asm volatile
 801c1a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c1a4:	f383 8811 	msr	BASEPRI, r3
 801c1a8:	f3bf 8f6f 	isb	sy
 801c1ac:	f3bf 8f4f 	dsb	sy
 801c1b0:	60fb      	str	r3, [r7, #12]
}
 801c1b2:	bf00      	nop
 801c1b4:	bf00      	nop
 801c1b6:	e7fd      	b.n	801c1b4 <prvTaskExitError+0x28>
	__asm volatile
 801c1b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c1bc:	f383 8811 	msr	BASEPRI, r3
 801c1c0:	f3bf 8f6f 	isb	sy
 801c1c4:	f3bf 8f4f 	dsb	sy
 801c1c8:	60bb      	str	r3, [r7, #8]
}
 801c1ca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801c1cc:	bf00      	nop
 801c1ce:	687b      	ldr	r3, [r7, #4]
 801c1d0:	2b00      	cmp	r3, #0
 801c1d2:	d0fc      	beq.n	801c1ce <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801c1d4:	bf00      	nop
 801c1d6:	bf00      	nop
 801c1d8:	3714      	adds	r7, #20
 801c1da:	46bd      	mov	sp, r7
 801c1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1e0:	4770      	bx	lr
 801c1e2:	bf00      	nop
 801c1e4:	20000084 	.word	0x20000084
	...

0801c1f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801c1f0:	4b07      	ldr	r3, [pc, #28]	@ (801c210 <pxCurrentTCBConst2>)
 801c1f2:	6819      	ldr	r1, [r3, #0]
 801c1f4:	6808      	ldr	r0, [r1, #0]
 801c1f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1fa:	f380 8809 	msr	PSP, r0
 801c1fe:	f3bf 8f6f 	isb	sy
 801c202:	f04f 0000 	mov.w	r0, #0
 801c206:	f380 8811 	msr	BASEPRI, r0
 801c20a:	4770      	bx	lr
 801c20c:	f3af 8000 	nop.w

0801c210 <pxCurrentTCBConst2>:
 801c210:	20001940 	.word	0x20001940
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801c214:	bf00      	nop
 801c216:	bf00      	nop

0801c218 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801c218:	4808      	ldr	r0, [pc, #32]	@ (801c23c <prvPortStartFirstTask+0x24>)
 801c21a:	6800      	ldr	r0, [r0, #0]
 801c21c:	6800      	ldr	r0, [r0, #0]
 801c21e:	f380 8808 	msr	MSP, r0
 801c222:	f04f 0000 	mov.w	r0, #0
 801c226:	f380 8814 	msr	CONTROL, r0
 801c22a:	b662      	cpsie	i
 801c22c:	b661      	cpsie	f
 801c22e:	f3bf 8f4f 	dsb	sy
 801c232:	f3bf 8f6f 	isb	sy
 801c236:	df00      	svc	0
 801c238:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801c23a:	bf00      	nop
 801c23c:	e000ed08 	.word	0xe000ed08

0801c240 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801c240:	b580      	push	{r7, lr}
 801c242:	b086      	sub	sp, #24
 801c244:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801c246:	4b47      	ldr	r3, [pc, #284]	@ (801c364 <xPortStartScheduler+0x124>)
 801c248:	681b      	ldr	r3, [r3, #0]
 801c24a:	4a47      	ldr	r2, [pc, #284]	@ (801c368 <xPortStartScheduler+0x128>)
 801c24c:	4293      	cmp	r3, r2
 801c24e:	d10b      	bne.n	801c268 <xPortStartScheduler+0x28>
	__asm volatile
 801c250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c254:	f383 8811 	msr	BASEPRI, r3
 801c258:	f3bf 8f6f 	isb	sy
 801c25c:	f3bf 8f4f 	dsb	sy
 801c260:	613b      	str	r3, [r7, #16]
}
 801c262:	bf00      	nop
 801c264:	bf00      	nop
 801c266:	e7fd      	b.n	801c264 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801c268:	4b3e      	ldr	r3, [pc, #248]	@ (801c364 <xPortStartScheduler+0x124>)
 801c26a:	681b      	ldr	r3, [r3, #0]
 801c26c:	4a3f      	ldr	r2, [pc, #252]	@ (801c36c <xPortStartScheduler+0x12c>)
 801c26e:	4293      	cmp	r3, r2
 801c270:	d10b      	bne.n	801c28a <xPortStartScheduler+0x4a>
	__asm volatile
 801c272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c276:	f383 8811 	msr	BASEPRI, r3
 801c27a:	f3bf 8f6f 	isb	sy
 801c27e:	f3bf 8f4f 	dsb	sy
 801c282:	60fb      	str	r3, [r7, #12]
}
 801c284:	bf00      	nop
 801c286:	bf00      	nop
 801c288:	e7fd      	b.n	801c286 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801c28a:	4b39      	ldr	r3, [pc, #228]	@ (801c370 <xPortStartScheduler+0x130>)
 801c28c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801c28e:	697b      	ldr	r3, [r7, #20]
 801c290:	781b      	ldrb	r3, [r3, #0]
 801c292:	b2db      	uxtb	r3, r3
 801c294:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801c296:	697b      	ldr	r3, [r7, #20]
 801c298:	22ff      	movs	r2, #255	@ 0xff
 801c29a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801c29c:	697b      	ldr	r3, [r7, #20]
 801c29e:	781b      	ldrb	r3, [r3, #0]
 801c2a0:	b2db      	uxtb	r3, r3
 801c2a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801c2a4:	78fb      	ldrb	r3, [r7, #3]
 801c2a6:	b2db      	uxtb	r3, r3
 801c2a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801c2ac:	b2da      	uxtb	r2, r3
 801c2ae:	4b31      	ldr	r3, [pc, #196]	@ (801c374 <xPortStartScheduler+0x134>)
 801c2b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801c2b2:	4b31      	ldr	r3, [pc, #196]	@ (801c378 <xPortStartScheduler+0x138>)
 801c2b4:	2207      	movs	r2, #7
 801c2b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801c2b8:	e009      	b.n	801c2ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801c2ba:	4b2f      	ldr	r3, [pc, #188]	@ (801c378 <xPortStartScheduler+0x138>)
 801c2bc:	681b      	ldr	r3, [r3, #0]
 801c2be:	3b01      	subs	r3, #1
 801c2c0:	4a2d      	ldr	r2, [pc, #180]	@ (801c378 <xPortStartScheduler+0x138>)
 801c2c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801c2c4:	78fb      	ldrb	r3, [r7, #3]
 801c2c6:	b2db      	uxtb	r3, r3
 801c2c8:	005b      	lsls	r3, r3, #1
 801c2ca:	b2db      	uxtb	r3, r3
 801c2cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801c2ce:	78fb      	ldrb	r3, [r7, #3]
 801c2d0:	b2db      	uxtb	r3, r3
 801c2d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801c2d6:	2b80      	cmp	r3, #128	@ 0x80
 801c2d8:	d0ef      	beq.n	801c2ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801c2da:	4b27      	ldr	r3, [pc, #156]	@ (801c378 <xPortStartScheduler+0x138>)
 801c2dc:	681b      	ldr	r3, [r3, #0]
 801c2de:	f1c3 0307 	rsb	r3, r3, #7
 801c2e2:	2b04      	cmp	r3, #4
 801c2e4:	d00b      	beq.n	801c2fe <xPortStartScheduler+0xbe>
	__asm volatile
 801c2e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c2ea:	f383 8811 	msr	BASEPRI, r3
 801c2ee:	f3bf 8f6f 	isb	sy
 801c2f2:	f3bf 8f4f 	dsb	sy
 801c2f6:	60bb      	str	r3, [r7, #8]
}
 801c2f8:	bf00      	nop
 801c2fa:	bf00      	nop
 801c2fc:	e7fd      	b.n	801c2fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801c2fe:	4b1e      	ldr	r3, [pc, #120]	@ (801c378 <xPortStartScheduler+0x138>)
 801c300:	681b      	ldr	r3, [r3, #0]
 801c302:	021b      	lsls	r3, r3, #8
 801c304:	4a1c      	ldr	r2, [pc, #112]	@ (801c378 <xPortStartScheduler+0x138>)
 801c306:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801c308:	4b1b      	ldr	r3, [pc, #108]	@ (801c378 <xPortStartScheduler+0x138>)
 801c30a:	681b      	ldr	r3, [r3, #0]
 801c30c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801c310:	4a19      	ldr	r2, [pc, #100]	@ (801c378 <xPortStartScheduler+0x138>)
 801c312:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801c314:	687b      	ldr	r3, [r7, #4]
 801c316:	b2da      	uxtb	r2, r3
 801c318:	697b      	ldr	r3, [r7, #20]
 801c31a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801c31c:	4b17      	ldr	r3, [pc, #92]	@ (801c37c <xPortStartScheduler+0x13c>)
 801c31e:	681b      	ldr	r3, [r3, #0]
 801c320:	4a16      	ldr	r2, [pc, #88]	@ (801c37c <xPortStartScheduler+0x13c>)
 801c322:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801c326:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801c328:	4b14      	ldr	r3, [pc, #80]	@ (801c37c <xPortStartScheduler+0x13c>)
 801c32a:	681b      	ldr	r3, [r3, #0]
 801c32c:	4a13      	ldr	r2, [pc, #76]	@ (801c37c <xPortStartScheduler+0x13c>)
 801c32e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 801c332:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801c334:	f000 f8da 	bl	801c4ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801c338:	4b11      	ldr	r3, [pc, #68]	@ (801c380 <xPortStartScheduler+0x140>)
 801c33a:	2200      	movs	r2, #0
 801c33c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801c33e:	f000 f8f9 	bl	801c534 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801c342:	4b10      	ldr	r3, [pc, #64]	@ (801c384 <xPortStartScheduler+0x144>)
 801c344:	681b      	ldr	r3, [r3, #0]
 801c346:	4a0f      	ldr	r2, [pc, #60]	@ (801c384 <xPortStartScheduler+0x144>)
 801c348:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801c34c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801c34e:	f7ff ff63 	bl	801c218 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801c352:	f7fe ff1d 	bl	801b190 <vTaskSwitchContext>
	prvTaskExitError();
 801c356:	f7ff ff19 	bl	801c18c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801c35a:	2300      	movs	r3, #0
}
 801c35c:	4618      	mov	r0, r3
 801c35e:	3718      	adds	r7, #24
 801c360:	46bd      	mov	sp, r7
 801c362:	bd80      	pop	{r7, pc}
 801c364:	e000ed00 	.word	0xe000ed00
 801c368:	410fc271 	.word	0x410fc271
 801c36c:	410fc270 	.word	0x410fc270
 801c370:	e000e400 	.word	0xe000e400
 801c374:	20001f6c 	.word	0x20001f6c
 801c378:	20001f70 	.word	0x20001f70
 801c37c:	e000ed20 	.word	0xe000ed20
 801c380:	20000084 	.word	0x20000084
 801c384:	e000ef34 	.word	0xe000ef34

0801c388 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801c388:	b480      	push	{r7}
 801c38a:	b083      	sub	sp, #12
 801c38c:	af00      	add	r7, sp, #0
	__asm volatile
 801c38e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c392:	f383 8811 	msr	BASEPRI, r3
 801c396:	f3bf 8f6f 	isb	sy
 801c39a:	f3bf 8f4f 	dsb	sy
 801c39e:	607b      	str	r3, [r7, #4]
}
 801c3a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801c3a2:	4b10      	ldr	r3, [pc, #64]	@ (801c3e4 <vPortEnterCritical+0x5c>)
 801c3a4:	681b      	ldr	r3, [r3, #0]
 801c3a6:	3301      	adds	r3, #1
 801c3a8:	4a0e      	ldr	r2, [pc, #56]	@ (801c3e4 <vPortEnterCritical+0x5c>)
 801c3aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801c3ac:	4b0d      	ldr	r3, [pc, #52]	@ (801c3e4 <vPortEnterCritical+0x5c>)
 801c3ae:	681b      	ldr	r3, [r3, #0]
 801c3b0:	2b01      	cmp	r3, #1
 801c3b2:	d110      	bne.n	801c3d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801c3b4:	4b0c      	ldr	r3, [pc, #48]	@ (801c3e8 <vPortEnterCritical+0x60>)
 801c3b6:	681b      	ldr	r3, [r3, #0]
 801c3b8:	b2db      	uxtb	r3, r3
 801c3ba:	2b00      	cmp	r3, #0
 801c3bc:	d00b      	beq.n	801c3d6 <vPortEnterCritical+0x4e>
	__asm volatile
 801c3be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c3c2:	f383 8811 	msr	BASEPRI, r3
 801c3c6:	f3bf 8f6f 	isb	sy
 801c3ca:	f3bf 8f4f 	dsb	sy
 801c3ce:	603b      	str	r3, [r7, #0]
}
 801c3d0:	bf00      	nop
 801c3d2:	bf00      	nop
 801c3d4:	e7fd      	b.n	801c3d2 <vPortEnterCritical+0x4a>
	}
}
 801c3d6:	bf00      	nop
 801c3d8:	370c      	adds	r7, #12
 801c3da:	46bd      	mov	sp, r7
 801c3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3e0:	4770      	bx	lr
 801c3e2:	bf00      	nop
 801c3e4:	20000084 	.word	0x20000084
 801c3e8:	e000ed04 	.word	0xe000ed04

0801c3ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801c3ec:	b480      	push	{r7}
 801c3ee:	b083      	sub	sp, #12
 801c3f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801c3f2:	4b12      	ldr	r3, [pc, #72]	@ (801c43c <vPortExitCritical+0x50>)
 801c3f4:	681b      	ldr	r3, [r3, #0]
 801c3f6:	2b00      	cmp	r3, #0
 801c3f8:	d10b      	bne.n	801c412 <vPortExitCritical+0x26>
	__asm volatile
 801c3fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c3fe:	f383 8811 	msr	BASEPRI, r3
 801c402:	f3bf 8f6f 	isb	sy
 801c406:	f3bf 8f4f 	dsb	sy
 801c40a:	607b      	str	r3, [r7, #4]
}
 801c40c:	bf00      	nop
 801c40e:	bf00      	nop
 801c410:	e7fd      	b.n	801c40e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801c412:	4b0a      	ldr	r3, [pc, #40]	@ (801c43c <vPortExitCritical+0x50>)
 801c414:	681b      	ldr	r3, [r3, #0]
 801c416:	3b01      	subs	r3, #1
 801c418:	4a08      	ldr	r2, [pc, #32]	@ (801c43c <vPortExitCritical+0x50>)
 801c41a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801c41c:	4b07      	ldr	r3, [pc, #28]	@ (801c43c <vPortExitCritical+0x50>)
 801c41e:	681b      	ldr	r3, [r3, #0]
 801c420:	2b00      	cmp	r3, #0
 801c422:	d105      	bne.n	801c430 <vPortExitCritical+0x44>
 801c424:	2300      	movs	r3, #0
 801c426:	603b      	str	r3, [r7, #0]
	__asm volatile
 801c428:	683b      	ldr	r3, [r7, #0]
 801c42a:	f383 8811 	msr	BASEPRI, r3
}
 801c42e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801c430:	bf00      	nop
 801c432:	370c      	adds	r7, #12
 801c434:	46bd      	mov	sp, r7
 801c436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c43a:	4770      	bx	lr
 801c43c:	20000084 	.word	0x20000084

0801c440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801c440:	f3ef 8009 	mrs	r0, PSP
 801c444:	f3bf 8f6f 	isb	sy
 801c448:	4b15      	ldr	r3, [pc, #84]	@ (801c4a0 <pxCurrentTCBConst>)
 801c44a:	681a      	ldr	r2, [r3, #0]
 801c44c:	f01e 0f10 	tst.w	lr, #16
 801c450:	bf08      	it	eq
 801c452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801c456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c45a:	6010      	str	r0, [r2, #0]
 801c45c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801c460:	f04f 0050 	mov.w	r0, #80	@ 0x50
 801c464:	f380 8811 	msr	BASEPRI, r0
 801c468:	f3bf 8f4f 	dsb	sy
 801c46c:	f3bf 8f6f 	isb	sy
 801c470:	f7fe fe8e 	bl	801b190 <vTaskSwitchContext>
 801c474:	f04f 0000 	mov.w	r0, #0
 801c478:	f380 8811 	msr	BASEPRI, r0
 801c47c:	bc09      	pop	{r0, r3}
 801c47e:	6819      	ldr	r1, [r3, #0]
 801c480:	6808      	ldr	r0, [r1, #0]
 801c482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c486:	f01e 0f10 	tst.w	lr, #16
 801c48a:	bf08      	it	eq
 801c48c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801c490:	f380 8809 	msr	PSP, r0
 801c494:	f3bf 8f6f 	isb	sy
 801c498:	4770      	bx	lr
 801c49a:	bf00      	nop
 801c49c:	f3af 8000 	nop.w

0801c4a0 <pxCurrentTCBConst>:
 801c4a0:	20001940 	.word	0x20001940
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801c4a4:	bf00      	nop
 801c4a6:	bf00      	nop

0801c4a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801c4a8:	b580      	push	{r7, lr}
 801c4aa:	b082      	sub	sp, #8
 801c4ac:	af00      	add	r7, sp, #0
	__asm volatile
 801c4ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c4b2:	f383 8811 	msr	BASEPRI, r3
 801c4b6:	f3bf 8f6f 	isb	sy
 801c4ba:	f3bf 8f4f 	dsb	sy
 801c4be:	607b      	str	r3, [r7, #4]
}
 801c4c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801c4c2:	f7fe fdab 	bl	801b01c <xTaskIncrementTick>
 801c4c6:	4603      	mov	r3, r0
 801c4c8:	2b00      	cmp	r3, #0
 801c4ca:	d003      	beq.n	801c4d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801c4cc:	4b06      	ldr	r3, [pc, #24]	@ (801c4e8 <xPortSysTickHandler+0x40>)
 801c4ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801c4d2:	601a      	str	r2, [r3, #0]
 801c4d4:	2300      	movs	r3, #0
 801c4d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 801c4d8:	683b      	ldr	r3, [r7, #0]
 801c4da:	f383 8811 	msr	BASEPRI, r3
}
 801c4de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801c4e0:	bf00      	nop
 801c4e2:	3708      	adds	r7, #8
 801c4e4:	46bd      	mov	sp, r7
 801c4e6:	bd80      	pop	{r7, pc}
 801c4e8:	e000ed04 	.word	0xe000ed04

0801c4ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801c4ec:	b480      	push	{r7}
 801c4ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801c4f0:	4b0b      	ldr	r3, [pc, #44]	@ (801c520 <vPortSetupTimerInterrupt+0x34>)
 801c4f2:	2200      	movs	r2, #0
 801c4f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801c4f6:	4b0b      	ldr	r3, [pc, #44]	@ (801c524 <vPortSetupTimerInterrupt+0x38>)
 801c4f8:	2200      	movs	r2, #0
 801c4fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801c4fc:	4b0a      	ldr	r3, [pc, #40]	@ (801c528 <vPortSetupTimerInterrupt+0x3c>)
 801c4fe:	681b      	ldr	r3, [r3, #0]
 801c500:	4a0a      	ldr	r2, [pc, #40]	@ (801c52c <vPortSetupTimerInterrupt+0x40>)
 801c502:	fba2 2303 	umull	r2, r3, r2, r3
 801c506:	099b      	lsrs	r3, r3, #6
 801c508:	4a09      	ldr	r2, [pc, #36]	@ (801c530 <vPortSetupTimerInterrupt+0x44>)
 801c50a:	3b01      	subs	r3, #1
 801c50c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801c50e:	4b04      	ldr	r3, [pc, #16]	@ (801c520 <vPortSetupTimerInterrupt+0x34>)
 801c510:	2207      	movs	r2, #7
 801c512:	601a      	str	r2, [r3, #0]
}
 801c514:	bf00      	nop
 801c516:	46bd      	mov	sp, r7
 801c518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c51c:	4770      	bx	lr
 801c51e:	bf00      	nop
 801c520:	e000e010 	.word	0xe000e010
 801c524:	e000e018 	.word	0xe000e018
 801c528:	20000008 	.word	0x20000008
 801c52c:	10624dd3 	.word	0x10624dd3
 801c530:	e000e014 	.word	0xe000e014

0801c534 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801c534:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 801c544 <vPortEnableVFP+0x10>
 801c538:	6801      	ldr	r1, [r0, #0]
 801c53a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801c53e:	6001      	str	r1, [r0, #0]
 801c540:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801c542:	bf00      	nop
 801c544:	e000ed88 	.word	0xe000ed88

0801c548 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801c548:	b480      	push	{r7}
 801c54a:	b085      	sub	sp, #20
 801c54c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801c54e:	f3ef 8305 	mrs	r3, IPSR
 801c552:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801c554:	68fb      	ldr	r3, [r7, #12]
 801c556:	2b0f      	cmp	r3, #15
 801c558:	d915      	bls.n	801c586 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801c55a:	4a18      	ldr	r2, [pc, #96]	@ (801c5bc <vPortValidateInterruptPriority+0x74>)
 801c55c:	68fb      	ldr	r3, [r7, #12]
 801c55e:	4413      	add	r3, r2
 801c560:	781b      	ldrb	r3, [r3, #0]
 801c562:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801c564:	4b16      	ldr	r3, [pc, #88]	@ (801c5c0 <vPortValidateInterruptPriority+0x78>)
 801c566:	781b      	ldrb	r3, [r3, #0]
 801c568:	7afa      	ldrb	r2, [r7, #11]
 801c56a:	429a      	cmp	r2, r3
 801c56c:	d20b      	bcs.n	801c586 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801c56e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c572:	f383 8811 	msr	BASEPRI, r3
 801c576:	f3bf 8f6f 	isb	sy
 801c57a:	f3bf 8f4f 	dsb	sy
 801c57e:	607b      	str	r3, [r7, #4]
}
 801c580:	bf00      	nop
 801c582:	bf00      	nop
 801c584:	e7fd      	b.n	801c582 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801c586:	4b0f      	ldr	r3, [pc, #60]	@ (801c5c4 <vPortValidateInterruptPriority+0x7c>)
 801c588:	681b      	ldr	r3, [r3, #0]
 801c58a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801c58e:	4b0e      	ldr	r3, [pc, #56]	@ (801c5c8 <vPortValidateInterruptPriority+0x80>)
 801c590:	681b      	ldr	r3, [r3, #0]
 801c592:	429a      	cmp	r2, r3
 801c594:	d90b      	bls.n	801c5ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 801c596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c59a:	f383 8811 	msr	BASEPRI, r3
 801c59e:	f3bf 8f6f 	isb	sy
 801c5a2:	f3bf 8f4f 	dsb	sy
 801c5a6:	603b      	str	r3, [r7, #0]
}
 801c5a8:	bf00      	nop
 801c5aa:	bf00      	nop
 801c5ac:	e7fd      	b.n	801c5aa <vPortValidateInterruptPriority+0x62>
	}
 801c5ae:	bf00      	nop
 801c5b0:	3714      	adds	r7, #20
 801c5b2:	46bd      	mov	sp, r7
 801c5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5b8:	4770      	bx	lr
 801c5ba:	bf00      	nop
 801c5bc:	e000e3f0 	.word	0xe000e3f0
 801c5c0:	20001f6c 	.word	0x20001f6c
 801c5c4:	e000ed0c 	.word	0xe000ed0c
 801c5c8:	20001f70 	.word	0x20001f70

0801c5cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801c5cc:	b580      	push	{r7, lr}
 801c5ce:	b08a      	sub	sp, #40	@ 0x28
 801c5d0:	af00      	add	r7, sp, #0
 801c5d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801c5d4:	2300      	movs	r3, #0
 801c5d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801c5d8:	f7fe fc64 	bl	801aea4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801c5dc:	4b5c      	ldr	r3, [pc, #368]	@ (801c750 <pvPortMalloc+0x184>)
 801c5de:	681b      	ldr	r3, [r3, #0]
 801c5e0:	2b00      	cmp	r3, #0
 801c5e2:	d101      	bne.n	801c5e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801c5e4:	f000 f924 	bl	801c830 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801c5e8:	4b5a      	ldr	r3, [pc, #360]	@ (801c754 <pvPortMalloc+0x188>)
 801c5ea:	681a      	ldr	r2, [r3, #0]
 801c5ec:	687b      	ldr	r3, [r7, #4]
 801c5ee:	4013      	ands	r3, r2
 801c5f0:	2b00      	cmp	r3, #0
 801c5f2:	f040 8095 	bne.w	801c720 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801c5f6:	687b      	ldr	r3, [r7, #4]
 801c5f8:	2b00      	cmp	r3, #0
 801c5fa:	d01e      	beq.n	801c63a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801c5fc:	2208      	movs	r2, #8
 801c5fe:	687b      	ldr	r3, [r7, #4]
 801c600:	4413      	add	r3, r2
 801c602:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801c604:	687b      	ldr	r3, [r7, #4]
 801c606:	f003 0307 	and.w	r3, r3, #7
 801c60a:	2b00      	cmp	r3, #0
 801c60c:	d015      	beq.n	801c63a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801c60e:	687b      	ldr	r3, [r7, #4]
 801c610:	f023 0307 	bic.w	r3, r3, #7
 801c614:	3308      	adds	r3, #8
 801c616:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801c618:	687b      	ldr	r3, [r7, #4]
 801c61a:	f003 0307 	and.w	r3, r3, #7
 801c61e:	2b00      	cmp	r3, #0
 801c620:	d00b      	beq.n	801c63a <pvPortMalloc+0x6e>
	__asm volatile
 801c622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c626:	f383 8811 	msr	BASEPRI, r3
 801c62a:	f3bf 8f6f 	isb	sy
 801c62e:	f3bf 8f4f 	dsb	sy
 801c632:	617b      	str	r3, [r7, #20]
}
 801c634:	bf00      	nop
 801c636:	bf00      	nop
 801c638:	e7fd      	b.n	801c636 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801c63a:	687b      	ldr	r3, [r7, #4]
 801c63c:	2b00      	cmp	r3, #0
 801c63e:	d06f      	beq.n	801c720 <pvPortMalloc+0x154>
 801c640:	4b45      	ldr	r3, [pc, #276]	@ (801c758 <pvPortMalloc+0x18c>)
 801c642:	681b      	ldr	r3, [r3, #0]
 801c644:	687a      	ldr	r2, [r7, #4]
 801c646:	429a      	cmp	r2, r3
 801c648:	d86a      	bhi.n	801c720 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801c64a:	4b44      	ldr	r3, [pc, #272]	@ (801c75c <pvPortMalloc+0x190>)
 801c64c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801c64e:	4b43      	ldr	r3, [pc, #268]	@ (801c75c <pvPortMalloc+0x190>)
 801c650:	681b      	ldr	r3, [r3, #0]
 801c652:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801c654:	e004      	b.n	801c660 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 801c656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c658:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801c65a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c65c:	681b      	ldr	r3, [r3, #0]
 801c65e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801c660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c662:	685b      	ldr	r3, [r3, #4]
 801c664:	687a      	ldr	r2, [r7, #4]
 801c666:	429a      	cmp	r2, r3
 801c668:	d903      	bls.n	801c672 <pvPortMalloc+0xa6>
 801c66a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c66c:	681b      	ldr	r3, [r3, #0]
 801c66e:	2b00      	cmp	r3, #0
 801c670:	d1f1      	bne.n	801c656 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801c672:	4b37      	ldr	r3, [pc, #220]	@ (801c750 <pvPortMalloc+0x184>)
 801c674:	681b      	ldr	r3, [r3, #0]
 801c676:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c678:	429a      	cmp	r2, r3
 801c67a:	d051      	beq.n	801c720 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801c67c:	6a3b      	ldr	r3, [r7, #32]
 801c67e:	681b      	ldr	r3, [r3, #0]
 801c680:	2208      	movs	r2, #8
 801c682:	4413      	add	r3, r2
 801c684:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801c686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c688:	681a      	ldr	r2, [r3, #0]
 801c68a:	6a3b      	ldr	r3, [r7, #32]
 801c68c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801c68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c690:	685a      	ldr	r2, [r3, #4]
 801c692:	687b      	ldr	r3, [r7, #4]
 801c694:	1ad2      	subs	r2, r2, r3
 801c696:	2308      	movs	r3, #8
 801c698:	005b      	lsls	r3, r3, #1
 801c69a:	429a      	cmp	r2, r3
 801c69c:	d920      	bls.n	801c6e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801c69e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c6a0:	687b      	ldr	r3, [r7, #4]
 801c6a2:	4413      	add	r3, r2
 801c6a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801c6a6:	69bb      	ldr	r3, [r7, #24]
 801c6a8:	f003 0307 	and.w	r3, r3, #7
 801c6ac:	2b00      	cmp	r3, #0
 801c6ae:	d00b      	beq.n	801c6c8 <pvPortMalloc+0xfc>
	__asm volatile
 801c6b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c6b4:	f383 8811 	msr	BASEPRI, r3
 801c6b8:	f3bf 8f6f 	isb	sy
 801c6bc:	f3bf 8f4f 	dsb	sy
 801c6c0:	613b      	str	r3, [r7, #16]
}
 801c6c2:	bf00      	nop
 801c6c4:	bf00      	nop
 801c6c6:	e7fd      	b.n	801c6c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801c6c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c6ca:	685a      	ldr	r2, [r3, #4]
 801c6cc:	687b      	ldr	r3, [r7, #4]
 801c6ce:	1ad2      	subs	r2, r2, r3
 801c6d0:	69bb      	ldr	r3, [r7, #24]
 801c6d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801c6d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c6d6:	687a      	ldr	r2, [r7, #4]
 801c6d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801c6da:	69b8      	ldr	r0, [r7, #24]
 801c6dc:	f000 f90c 	bl	801c8f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801c6e0:	4b1d      	ldr	r3, [pc, #116]	@ (801c758 <pvPortMalloc+0x18c>)
 801c6e2:	681a      	ldr	r2, [r3, #0]
 801c6e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c6e6:	685b      	ldr	r3, [r3, #4]
 801c6e8:	1ad3      	subs	r3, r2, r3
 801c6ea:	4a1b      	ldr	r2, [pc, #108]	@ (801c758 <pvPortMalloc+0x18c>)
 801c6ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801c6ee:	4b1a      	ldr	r3, [pc, #104]	@ (801c758 <pvPortMalloc+0x18c>)
 801c6f0:	681a      	ldr	r2, [r3, #0]
 801c6f2:	4b1b      	ldr	r3, [pc, #108]	@ (801c760 <pvPortMalloc+0x194>)
 801c6f4:	681b      	ldr	r3, [r3, #0]
 801c6f6:	429a      	cmp	r2, r3
 801c6f8:	d203      	bcs.n	801c702 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801c6fa:	4b17      	ldr	r3, [pc, #92]	@ (801c758 <pvPortMalloc+0x18c>)
 801c6fc:	681b      	ldr	r3, [r3, #0]
 801c6fe:	4a18      	ldr	r2, [pc, #96]	@ (801c760 <pvPortMalloc+0x194>)
 801c700:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801c702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c704:	685a      	ldr	r2, [r3, #4]
 801c706:	4b13      	ldr	r3, [pc, #76]	@ (801c754 <pvPortMalloc+0x188>)
 801c708:	681b      	ldr	r3, [r3, #0]
 801c70a:	431a      	orrs	r2, r3
 801c70c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c70e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801c710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c712:	2200      	movs	r2, #0
 801c714:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801c716:	4b13      	ldr	r3, [pc, #76]	@ (801c764 <pvPortMalloc+0x198>)
 801c718:	681b      	ldr	r3, [r3, #0]
 801c71a:	3301      	adds	r3, #1
 801c71c:	4a11      	ldr	r2, [pc, #68]	@ (801c764 <pvPortMalloc+0x198>)
 801c71e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801c720:	f7fe fbce 	bl	801aec0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801c724:	69fb      	ldr	r3, [r7, #28]
 801c726:	f003 0307 	and.w	r3, r3, #7
 801c72a:	2b00      	cmp	r3, #0
 801c72c:	d00b      	beq.n	801c746 <pvPortMalloc+0x17a>
	__asm volatile
 801c72e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c732:	f383 8811 	msr	BASEPRI, r3
 801c736:	f3bf 8f6f 	isb	sy
 801c73a:	f3bf 8f4f 	dsb	sy
 801c73e:	60fb      	str	r3, [r7, #12]
}
 801c740:	bf00      	nop
 801c742:	bf00      	nop
 801c744:	e7fd      	b.n	801c742 <pvPortMalloc+0x176>
	return pvReturn;
 801c746:	69fb      	ldr	r3, [r7, #28]
}
 801c748:	4618      	mov	r0, r3
 801c74a:	3728      	adds	r7, #40	@ 0x28
 801c74c:	46bd      	mov	sp, r7
 801c74e:	bd80      	pop	{r7, pc}
 801c750:	20018074 	.word	0x20018074
 801c754:	20018088 	.word	0x20018088
 801c758:	20018078 	.word	0x20018078
 801c75c:	2001806c 	.word	0x2001806c
 801c760:	2001807c 	.word	0x2001807c
 801c764:	20018080 	.word	0x20018080

0801c768 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801c768:	b580      	push	{r7, lr}
 801c76a:	b086      	sub	sp, #24
 801c76c:	af00      	add	r7, sp, #0
 801c76e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801c770:	687b      	ldr	r3, [r7, #4]
 801c772:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801c774:	687b      	ldr	r3, [r7, #4]
 801c776:	2b00      	cmp	r3, #0
 801c778:	d04f      	beq.n	801c81a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801c77a:	2308      	movs	r3, #8
 801c77c:	425b      	negs	r3, r3
 801c77e:	697a      	ldr	r2, [r7, #20]
 801c780:	4413      	add	r3, r2
 801c782:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801c784:	697b      	ldr	r3, [r7, #20]
 801c786:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801c788:	693b      	ldr	r3, [r7, #16]
 801c78a:	685a      	ldr	r2, [r3, #4]
 801c78c:	4b25      	ldr	r3, [pc, #148]	@ (801c824 <vPortFree+0xbc>)
 801c78e:	681b      	ldr	r3, [r3, #0]
 801c790:	4013      	ands	r3, r2
 801c792:	2b00      	cmp	r3, #0
 801c794:	d10b      	bne.n	801c7ae <vPortFree+0x46>
	__asm volatile
 801c796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c79a:	f383 8811 	msr	BASEPRI, r3
 801c79e:	f3bf 8f6f 	isb	sy
 801c7a2:	f3bf 8f4f 	dsb	sy
 801c7a6:	60fb      	str	r3, [r7, #12]
}
 801c7a8:	bf00      	nop
 801c7aa:	bf00      	nop
 801c7ac:	e7fd      	b.n	801c7aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801c7ae:	693b      	ldr	r3, [r7, #16]
 801c7b0:	681b      	ldr	r3, [r3, #0]
 801c7b2:	2b00      	cmp	r3, #0
 801c7b4:	d00b      	beq.n	801c7ce <vPortFree+0x66>
	__asm volatile
 801c7b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c7ba:	f383 8811 	msr	BASEPRI, r3
 801c7be:	f3bf 8f6f 	isb	sy
 801c7c2:	f3bf 8f4f 	dsb	sy
 801c7c6:	60bb      	str	r3, [r7, #8]
}
 801c7c8:	bf00      	nop
 801c7ca:	bf00      	nop
 801c7cc:	e7fd      	b.n	801c7ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801c7ce:	693b      	ldr	r3, [r7, #16]
 801c7d0:	685a      	ldr	r2, [r3, #4]
 801c7d2:	4b14      	ldr	r3, [pc, #80]	@ (801c824 <vPortFree+0xbc>)
 801c7d4:	681b      	ldr	r3, [r3, #0]
 801c7d6:	4013      	ands	r3, r2
 801c7d8:	2b00      	cmp	r3, #0
 801c7da:	d01e      	beq.n	801c81a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801c7dc:	693b      	ldr	r3, [r7, #16]
 801c7de:	681b      	ldr	r3, [r3, #0]
 801c7e0:	2b00      	cmp	r3, #0
 801c7e2:	d11a      	bne.n	801c81a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801c7e4:	693b      	ldr	r3, [r7, #16]
 801c7e6:	685a      	ldr	r2, [r3, #4]
 801c7e8:	4b0e      	ldr	r3, [pc, #56]	@ (801c824 <vPortFree+0xbc>)
 801c7ea:	681b      	ldr	r3, [r3, #0]
 801c7ec:	43db      	mvns	r3, r3
 801c7ee:	401a      	ands	r2, r3
 801c7f0:	693b      	ldr	r3, [r7, #16]
 801c7f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801c7f4:	f7fe fb56 	bl	801aea4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801c7f8:	693b      	ldr	r3, [r7, #16]
 801c7fa:	685a      	ldr	r2, [r3, #4]
 801c7fc:	4b0a      	ldr	r3, [pc, #40]	@ (801c828 <vPortFree+0xc0>)
 801c7fe:	681b      	ldr	r3, [r3, #0]
 801c800:	4413      	add	r3, r2
 801c802:	4a09      	ldr	r2, [pc, #36]	@ (801c828 <vPortFree+0xc0>)
 801c804:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801c806:	6938      	ldr	r0, [r7, #16]
 801c808:	f000 f876 	bl	801c8f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801c80c:	4b07      	ldr	r3, [pc, #28]	@ (801c82c <vPortFree+0xc4>)
 801c80e:	681b      	ldr	r3, [r3, #0]
 801c810:	3301      	adds	r3, #1
 801c812:	4a06      	ldr	r2, [pc, #24]	@ (801c82c <vPortFree+0xc4>)
 801c814:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801c816:	f7fe fb53 	bl	801aec0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801c81a:	bf00      	nop
 801c81c:	3718      	adds	r7, #24
 801c81e:	46bd      	mov	sp, r7
 801c820:	bd80      	pop	{r7, pc}
 801c822:	bf00      	nop
 801c824:	20018088 	.word	0x20018088
 801c828:	20018078 	.word	0x20018078
 801c82c:	20018084 	.word	0x20018084

0801c830 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801c830:	b480      	push	{r7}
 801c832:	b085      	sub	sp, #20
 801c834:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801c836:	4b29      	ldr	r3, [pc, #164]	@ (801c8dc <prvHeapInit+0xac>)
 801c838:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801c83a:	4b29      	ldr	r3, [pc, #164]	@ (801c8e0 <prvHeapInit+0xb0>)
 801c83c:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801c83e:	68fb      	ldr	r3, [r7, #12]
 801c840:	f003 0307 	and.w	r3, r3, #7
 801c844:	2b00      	cmp	r3, #0
 801c846:	d00c      	beq.n	801c862 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801c848:	68fb      	ldr	r3, [r7, #12]
 801c84a:	3307      	adds	r3, #7
 801c84c:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801c84e:	68fb      	ldr	r3, [r7, #12]
 801c850:	f023 0307 	bic.w	r3, r3, #7
 801c854:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801c856:	68ba      	ldr	r2, [r7, #8]
 801c858:	68fb      	ldr	r3, [r7, #12]
 801c85a:	1ad3      	subs	r3, r2, r3
 801c85c:	4a20      	ldr	r2, [pc, #128]	@ (801c8e0 <prvHeapInit+0xb0>)
 801c85e:	4413      	add	r3, r2
 801c860:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801c862:	68fb      	ldr	r3, [r7, #12]
 801c864:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801c866:	4a1f      	ldr	r2, [pc, #124]	@ (801c8e4 <prvHeapInit+0xb4>)
 801c868:	687b      	ldr	r3, [r7, #4]
 801c86a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801c86c:	4b1d      	ldr	r3, [pc, #116]	@ (801c8e4 <prvHeapInit+0xb4>)
 801c86e:	2200      	movs	r2, #0
 801c870:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801c872:	687b      	ldr	r3, [r7, #4]
 801c874:	68ba      	ldr	r2, [r7, #8]
 801c876:	4413      	add	r3, r2
 801c878:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801c87a:	2208      	movs	r2, #8
 801c87c:	68fb      	ldr	r3, [r7, #12]
 801c87e:	1a9b      	subs	r3, r3, r2
 801c880:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801c882:	68fb      	ldr	r3, [r7, #12]
 801c884:	f023 0307 	bic.w	r3, r3, #7
 801c888:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801c88a:	68fb      	ldr	r3, [r7, #12]
 801c88c:	4a16      	ldr	r2, [pc, #88]	@ (801c8e8 <prvHeapInit+0xb8>)
 801c88e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801c890:	4b15      	ldr	r3, [pc, #84]	@ (801c8e8 <prvHeapInit+0xb8>)
 801c892:	681b      	ldr	r3, [r3, #0]
 801c894:	2200      	movs	r2, #0
 801c896:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801c898:	4b13      	ldr	r3, [pc, #76]	@ (801c8e8 <prvHeapInit+0xb8>)
 801c89a:	681b      	ldr	r3, [r3, #0]
 801c89c:	2200      	movs	r2, #0
 801c89e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801c8a0:	687b      	ldr	r3, [r7, #4]
 801c8a2:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801c8a4:	683b      	ldr	r3, [r7, #0]
 801c8a6:	68fa      	ldr	r2, [r7, #12]
 801c8a8:	1ad2      	subs	r2, r2, r3
 801c8aa:	683b      	ldr	r3, [r7, #0]
 801c8ac:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801c8ae:	4b0e      	ldr	r3, [pc, #56]	@ (801c8e8 <prvHeapInit+0xb8>)
 801c8b0:	681a      	ldr	r2, [r3, #0]
 801c8b2:	683b      	ldr	r3, [r7, #0]
 801c8b4:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801c8b6:	683b      	ldr	r3, [r7, #0]
 801c8b8:	685b      	ldr	r3, [r3, #4]
 801c8ba:	4a0c      	ldr	r2, [pc, #48]	@ (801c8ec <prvHeapInit+0xbc>)
 801c8bc:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801c8be:	683b      	ldr	r3, [r7, #0]
 801c8c0:	685b      	ldr	r3, [r3, #4]
 801c8c2:	4a0b      	ldr	r2, [pc, #44]	@ (801c8f0 <prvHeapInit+0xc0>)
 801c8c4:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801c8c6:	4b0b      	ldr	r3, [pc, #44]	@ (801c8f4 <prvHeapInit+0xc4>)
 801c8c8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801c8cc:	601a      	str	r2, [r3, #0]
}
 801c8ce:	bf00      	nop
 801c8d0:	3714      	adds	r7, #20
 801c8d2:	46bd      	mov	sp, r7
 801c8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8d8:	4770      	bx	lr
 801c8da:	bf00      	nop
 801c8dc:	000160f8 	.word	0x000160f8
 801c8e0:	20001f74 	.word	0x20001f74
 801c8e4:	2001806c 	.word	0x2001806c
 801c8e8:	20018074 	.word	0x20018074
 801c8ec:	2001807c 	.word	0x2001807c
 801c8f0:	20018078 	.word	0x20018078
 801c8f4:	20018088 	.word	0x20018088

0801c8f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801c8f8:	b480      	push	{r7}
 801c8fa:	b085      	sub	sp, #20
 801c8fc:	af00      	add	r7, sp, #0
 801c8fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801c900:	4b28      	ldr	r3, [pc, #160]	@ (801c9a4 <prvInsertBlockIntoFreeList+0xac>)
 801c902:	60fb      	str	r3, [r7, #12]
 801c904:	e002      	b.n	801c90c <prvInsertBlockIntoFreeList+0x14>
 801c906:	68fb      	ldr	r3, [r7, #12]
 801c908:	681b      	ldr	r3, [r3, #0]
 801c90a:	60fb      	str	r3, [r7, #12]
 801c90c:	68fb      	ldr	r3, [r7, #12]
 801c90e:	681b      	ldr	r3, [r3, #0]
 801c910:	687a      	ldr	r2, [r7, #4]
 801c912:	429a      	cmp	r2, r3
 801c914:	d8f7      	bhi.n	801c906 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801c916:	68fb      	ldr	r3, [r7, #12]
 801c918:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801c91a:	68fb      	ldr	r3, [r7, #12]
 801c91c:	685b      	ldr	r3, [r3, #4]
 801c91e:	68ba      	ldr	r2, [r7, #8]
 801c920:	4413      	add	r3, r2
 801c922:	687a      	ldr	r2, [r7, #4]
 801c924:	429a      	cmp	r2, r3
 801c926:	d108      	bne.n	801c93a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801c928:	68fb      	ldr	r3, [r7, #12]
 801c92a:	685a      	ldr	r2, [r3, #4]
 801c92c:	687b      	ldr	r3, [r7, #4]
 801c92e:	685b      	ldr	r3, [r3, #4]
 801c930:	441a      	add	r2, r3
 801c932:	68fb      	ldr	r3, [r7, #12]
 801c934:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801c936:	68fb      	ldr	r3, [r7, #12]
 801c938:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801c93a:	687b      	ldr	r3, [r7, #4]
 801c93c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801c93e:	687b      	ldr	r3, [r7, #4]
 801c940:	685b      	ldr	r3, [r3, #4]
 801c942:	68ba      	ldr	r2, [r7, #8]
 801c944:	441a      	add	r2, r3
 801c946:	68fb      	ldr	r3, [r7, #12]
 801c948:	681b      	ldr	r3, [r3, #0]
 801c94a:	429a      	cmp	r2, r3
 801c94c:	d118      	bne.n	801c980 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801c94e:	68fb      	ldr	r3, [r7, #12]
 801c950:	681a      	ldr	r2, [r3, #0]
 801c952:	4b15      	ldr	r3, [pc, #84]	@ (801c9a8 <prvInsertBlockIntoFreeList+0xb0>)
 801c954:	681b      	ldr	r3, [r3, #0]
 801c956:	429a      	cmp	r2, r3
 801c958:	d00d      	beq.n	801c976 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801c95a:	687b      	ldr	r3, [r7, #4]
 801c95c:	685a      	ldr	r2, [r3, #4]
 801c95e:	68fb      	ldr	r3, [r7, #12]
 801c960:	681b      	ldr	r3, [r3, #0]
 801c962:	685b      	ldr	r3, [r3, #4]
 801c964:	441a      	add	r2, r3
 801c966:	687b      	ldr	r3, [r7, #4]
 801c968:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801c96a:	68fb      	ldr	r3, [r7, #12]
 801c96c:	681b      	ldr	r3, [r3, #0]
 801c96e:	681a      	ldr	r2, [r3, #0]
 801c970:	687b      	ldr	r3, [r7, #4]
 801c972:	601a      	str	r2, [r3, #0]
 801c974:	e008      	b.n	801c988 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801c976:	4b0c      	ldr	r3, [pc, #48]	@ (801c9a8 <prvInsertBlockIntoFreeList+0xb0>)
 801c978:	681a      	ldr	r2, [r3, #0]
 801c97a:	687b      	ldr	r3, [r7, #4]
 801c97c:	601a      	str	r2, [r3, #0]
 801c97e:	e003      	b.n	801c988 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801c980:	68fb      	ldr	r3, [r7, #12]
 801c982:	681a      	ldr	r2, [r3, #0]
 801c984:	687b      	ldr	r3, [r7, #4]
 801c986:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801c988:	68fa      	ldr	r2, [r7, #12]
 801c98a:	687b      	ldr	r3, [r7, #4]
 801c98c:	429a      	cmp	r2, r3
 801c98e:	d002      	beq.n	801c996 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801c990:	68fb      	ldr	r3, [r7, #12]
 801c992:	687a      	ldr	r2, [r7, #4]
 801c994:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801c996:	bf00      	nop
 801c998:	3714      	adds	r7, #20
 801c99a:	46bd      	mov	sp, r7
 801c99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9a0:	4770      	bx	lr
 801c9a2:	bf00      	nop
 801c9a4:	2001806c 	.word	0x2001806c
 801c9a8:	20018074 	.word	0x20018074

0801c9ac <vPortGetHeapStats>:
/*-----------------------------------------------------------*/

void vPortGetHeapStats( HeapStats_t *pxHeapStats )
{
 801c9ac:	b580      	push	{r7, lr}
 801c9ae:	b086      	sub	sp, #24
 801c9b0:	af00      	add	r7, sp, #0
 801c9b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock;
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */
 801c9b4:	2300      	movs	r3, #0
 801c9b6:	613b      	str	r3, [r7, #16]
 801c9b8:	2300      	movs	r3, #0
 801c9ba:	60fb      	str	r3, [r7, #12]
 801c9bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c9c0:	60bb      	str	r3, [r7, #8]

	vTaskSuspendAll();
 801c9c2:	f7fe fa6f 	bl	801aea4 <vTaskSuspendAll>
	{
		pxBlock = xStart.pxNextFreeBlock;
 801c9c6:	4b22      	ldr	r3, [pc, #136]	@ (801ca50 <vPortGetHeapStats+0xa4>)
 801c9c8:	681b      	ldr	r3, [r3, #0]
 801c9ca:	617b      	str	r3, [r7, #20]

		/* pxBlock will be NULL if the heap has not been initialised.  The heap
		is initialised automatically when the first allocation is made. */
		if( pxBlock != NULL )
 801c9cc:	697b      	ldr	r3, [r7, #20]
 801c9ce:	2b00      	cmp	r3, #0
 801c9d0:	d01a      	beq.n	801ca08 <vPortGetHeapStats+0x5c>
		{
			do
			{
				/* Increment the number of blocks and record the largest block seen
				so far. */
				xBlocks++;
 801c9d2:	693b      	ldr	r3, [r7, #16]
 801c9d4:	3301      	adds	r3, #1
 801c9d6:	613b      	str	r3, [r7, #16]

				if( pxBlock->xBlockSize > xMaxSize )
 801c9d8:	697b      	ldr	r3, [r7, #20]
 801c9da:	685b      	ldr	r3, [r3, #4]
 801c9dc:	68fa      	ldr	r2, [r7, #12]
 801c9de:	429a      	cmp	r2, r3
 801c9e0:	d202      	bcs.n	801c9e8 <vPortGetHeapStats+0x3c>
				{
					xMaxSize = pxBlock->xBlockSize;
 801c9e2:	697b      	ldr	r3, [r7, #20]
 801c9e4:	685b      	ldr	r3, [r3, #4]
 801c9e6:	60fb      	str	r3, [r7, #12]
				}

				if( pxBlock->xBlockSize < xMinSize )
 801c9e8:	697b      	ldr	r3, [r7, #20]
 801c9ea:	685b      	ldr	r3, [r3, #4]
 801c9ec:	68ba      	ldr	r2, [r7, #8]
 801c9ee:	429a      	cmp	r2, r3
 801c9f0:	d902      	bls.n	801c9f8 <vPortGetHeapStats+0x4c>
				{
					xMinSize = pxBlock->xBlockSize;
 801c9f2:	697b      	ldr	r3, [r7, #20]
 801c9f4:	685b      	ldr	r3, [r3, #4]
 801c9f6:	60bb      	str	r3, [r7, #8]
				}

				/* Move to the next block in the chain until the last block is
				reached. */
				pxBlock = pxBlock->pxNextFreeBlock;
 801c9f8:	697b      	ldr	r3, [r7, #20]
 801c9fa:	681b      	ldr	r3, [r3, #0]
 801c9fc:	617b      	str	r3, [r7, #20]
			} while( pxBlock != pxEnd );
 801c9fe:	4b15      	ldr	r3, [pc, #84]	@ (801ca54 <vPortGetHeapStats+0xa8>)
 801ca00:	681b      	ldr	r3, [r3, #0]
 801ca02:	697a      	ldr	r2, [r7, #20]
 801ca04:	429a      	cmp	r2, r3
 801ca06:	d1e4      	bne.n	801c9d2 <vPortGetHeapStats+0x26>
		}
	}
	xTaskResumeAll();
 801ca08:	f7fe fa5a 	bl	801aec0 <xTaskResumeAll>

	pxHeapStats->xSizeOfLargestFreeBlockInBytes = xMaxSize;
 801ca0c:	687b      	ldr	r3, [r7, #4]
 801ca0e:	68fa      	ldr	r2, [r7, #12]
 801ca10:	605a      	str	r2, [r3, #4]
	pxHeapStats->xSizeOfSmallestFreeBlockInBytes = xMinSize;
 801ca12:	687b      	ldr	r3, [r7, #4]
 801ca14:	68ba      	ldr	r2, [r7, #8]
 801ca16:	609a      	str	r2, [r3, #8]
	pxHeapStats->xNumberOfFreeBlocks = xBlocks;
 801ca18:	687b      	ldr	r3, [r7, #4]
 801ca1a:	693a      	ldr	r2, [r7, #16]
 801ca1c:	60da      	str	r2, [r3, #12]

	taskENTER_CRITICAL();
 801ca1e:	f7ff fcb3 	bl	801c388 <vPortEnterCritical>
	{
		pxHeapStats->xAvailableHeapSpaceInBytes = xFreeBytesRemaining;
 801ca22:	4b0d      	ldr	r3, [pc, #52]	@ (801ca58 <vPortGetHeapStats+0xac>)
 801ca24:	681a      	ldr	r2, [r3, #0]
 801ca26:	687b      	ldr	r3, [r7, #4]
 801ca28:	601a      	str	r2, [r3, #0]
		pxHeapStats->xNumberOfSuccessfulAllocations = xNumberOfSuccessfulAllocations;
 801ca2a:	4b0c      	ldr	r3, [pc, #48]	@ (801ca5c <vPortGetHeapStats+0xb0>)
 801ca2c:	681a      	ldr	r2, [r3, #0]
 801ca2e:	687b      	ldr	r3, [r7, #4]
 801ca30:	615a      	str	r2, [r3, #20]
		pxHeapStats->xNumberOfSuccessfulFrees = xNumberOfSuccessfulFrees;
 801ca32:	4b0b      	ldr	r3, [pc, #44]	@ (801ca60 <vPortGetHeapStats+0xb4>)
 801ca34:	681a      	ldr	r2, [r3, #0]
 801ca36:	687b      	ldr	r3, [r7, #4]
 801ca38:	619a      	str	r2, [r3, #24]
		pxHeapStats->xMinimumEverFreeBytesRemaining = xMinimumEverFreeBytesRemaining;
 801ca3a:	4b0a      	ldr	r3, [pc, #40]	@ (801ca64 <vPortGetHeapStats+0xb8>)
 801ca3c:	681a      	ldr	r2, [r3, #0]
 801ca3e:	687b      	ldr	r3, [r7, #4]
 801ca40:	611a      	str	r2, [r3, #16]
	}
	taskEXIT_CRITICAL();
 801ca42:	f7ff fcd3 	bl	801c3ec <vPortExitCritical>
}
 801ca46:	bf00      	nop
 801ca48:	3718      	adds	r7, #24
 801ca4a:	46bd      	mov	sp, r7
 801ca4c:	bd80      	pop	{r7, pc}
 801ca4e:	bf00      	nop
 801ca50:	2001806c 	.word	0x2001806c
 801ca54:	20018074 	.word	0x20018074
 801ca58:	20018078 	.word	0x20018078
 801ca5c:	20018080 	.word	0x20018080
 801ca60:	20018084 	.word	0x20018084
 801ca64:	2001807c 	.word	0x2001807c

0801ca68 <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 801ca68:	b580      	push	{r7, lr}
 801ca6a:	b084      	sub	sp, #16
 801ca6c:	af00      	add	r7, sp, #0
 801ca6e:	6078      	str	r0, [r7, #4]
 801ca70:	6039      	str	r1, [r7, #0]
  void *p = pvPortMalloc(cnt * size);
 801ca72:	687b      	ldr	r3, [r7, #4]
 801ca74:	683a      	ldr	r2, [r7, #0]
 801ca76:	fb02 f303 	mul.w	r3, r2, r3
 801ca7a:	4618      	mov	r0, r3
 801ca7c:	f7ff fda6 	bl	801c5cc <pvPortMalloc>
 801ca80:	4603      	mov	r3, r0
 801ca82:	60fb      	str	r3, [r7, #12]
  if (p != NULL) memset(p, 0, size * cnt);
 801ca84:	68fb      	ldr	r3, [r7, #12]
 801ca86:	2b00      	cmp	r3, #0
 801ca88:	d008      	beq.n	801ca9c <mg_calloc+0x34>
 801ca8a:	683b      	ldr	r3, [r7, #0]
 801ca8c:	687a      	ldr	r2, [r7, #4]
 801ca8e:	fb02 f303 	mul.w	r3, r2, r3
 801ca92:	461a      	mov	r2, r3
 801ca94:	2100      	movs	r1, #0
 801ca96:	68f8      	ldr	r0, [r7, #12]
 801ca98:	f019 f9aa 	bl	8035df0 <memset>
  return p;
 801ca9c:	68fb      	ldr	r3, [r7, #12]
}
 801ca9e:	4618      	mov	r0, r3
 801caa0:	3710      	adds	r7, #16
 801caa2:	46bd      	mov	sp, r7
 801caa4:	bd80      	pop	{r7, pc}
	...

0801caa8 <mg_fs_lfs_status>:
//struct mg_fs *mg_fs;

void fs_proto(void){}; //function prototype

// Получение информации о файле
int mg_fs_lfs_status(const char *path, size_t *size, time_t *mtime) {
 801caa8:	b580      	push	{r7, lr}
 801caaa:	b0c6      	sub	sp, #280	@ 0x118
 801caac:	af00      	add	r7, sp, #0
 801caae:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801cab2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801cab6:	6018      	str	r0, [r3, #0]
 801cab8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801cabc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801cac0:	6019      	str	r1, [r3, #0]
 801cac2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801cac6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801caca:	601a      	str	r2, [r3, #0]
    struct lfs_info info;
    if (lfs_stat(&lfs, path, &info) == 0) {
 801cacc:	f107 0210 	add.w	r2, r7, #16
 801cad0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801cad4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801cad8:	6819      	ldr	r1, [r3, #0]
 801cada:	481d      	ldr	r0, [pc, #116]	@ (801cb50 <mg_fs_lfs_status+0xa8>)
 801cadc:	f007 ff3c 	bl	8024958 <lfs_stat>
 801cae0:	4603      	mov	r3, r0
 801cae2:	2b00      	cmp	r3, #0
 801cae4:	d12e      	bne.n	801cb44 <mg_fs_lfs_status+0x9c>
        if (size) *size = info.size;
 801cae6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801caea:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801caee:	681b      	ldr	r3, [r3, #0]
 801caf0:	2b00      	cmp	r3, #0
 801caf2:	d00a      	beq.n	801cb0a <mg_fs_lfs_status+0x62>
 801caf4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801caf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801cafc:	685a      	ldr	r2, [r3, #4]
 801cafe:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801cb02:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801cb06:	681b      	ldr	r3, [r3, #0]
 801cb08:	601a      	str	r2, [r3, #0]
        if (mtime) *mtime = 0;  // LittleFS не поддерживает время модификации
 801cb0a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801cb0e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801cb12:	681b      	ldr	r3, [r3, #0]
 801cb14:	2b00      	cmp	r3, #0
 801cb16:	d00a      	beq.n	801cb2e <mg_fs_lfs_status+0x86>
 801cb18:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801cb1c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801cb20:	6819      	ldr	r1, [r3, #0]
 801cb22:	f04f 0200 	mov.w	r2, #0
 801cb26:	f04f 0300 	mov.w	r3, #0
 801cb2a:	e9c1 2300 	strd	r2, r3, [r1]
        return (info.type == LFS_TYPE_DIR) ? MG_FS_DIR : MG_FS_READ;
 801cb2e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801cb32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801cb36:	781b      	ldrb	r3, [r3, #0]
 801cb38:	2b02      	cmp	r3, #2
 801cb3a:	d101      	bne.n	801cb40 <mg_fs_lfs_status+0x98>
 801cb3c:	2304      	movs	r3, #4
 801cb3e:	e002      	b.n	801cb46 <mg_fs_lfs_status+0x9e>
 801cb40:	2301      	movs	r3, #1
 801cb42:	e000      	b.n	801cb46 <mg_fs_lfs_status+0x9e>
    }
    return 0;
 801cb44:	2300      	movs	r3, #0
}
 801cb46:	4618      	mov	r0, r3
 801cb48:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 801cb4c:	46bd      	mov	sp, r7
 801cb4e:	bd80      	pop	{r7, pc}
 801cb50:	2001808c 	.word	0x2001808c

0801cb54 <mg_fs_lfs_list>:

// Список файлов в директории
void mg_fs_lfs_list(const char *path, void (*fn)(const char *, void *), void *userdata) {
 801cb54:	b580      	push	{r7, lr}
 801cb56:	b0d4      	sub	sp, #336	@ 0x150
 801cb58:	af00      	add	r7, sp, #0
 801cb5a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801cb5e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801cb62:	6018      	str	r0, [r3, #0]
 801cb64:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801cb68:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801cb6c:	6019      	str	r1, [r3, #0]
 801cb6e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801cb72:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 801cb76:	601a      	str	r2, [r3, #0]
    struct lfs_info info;
    lfs_dir_t dir;
    if (lfs_dir_open(&lfs, &dir, path) == 0) {
 801cb78:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801cb7c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801cb80:	f107 0114 	add.w	r1, r7, #20
 801cb84:	681a      	ldr	r2, [r3, #0]
 801cb86:	4816      	ldr	r0, [pc, #88]	@ (801cbe0 <mg_fs_lfs_list+0x8c>)
 801cb88:	f008 f89e 	bl	8024cc8 <lfs_dir_open>
 801cb8c:	4603      	mov	r3, r0
 801cb8e:	2b00      	cmp	r3, #0
 801cb90:	d120      	bne.n	801cbd4 <mg_fs_lfs_list+0x80>
        while (lfs_dir_read(&lfs, &dir, &info) > 0) {
 801cb92:	e00e      	b.n	801cbb2 <mg_fs_lfs_list+0x5e>
            fn(info.name, userdata);
 801cb94:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801cb98:	f5a3 72a6 	sub.w	r2, r3, #332	@ 0x14c
 801cb9c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801cba0:	f103 0008 	add.w	r0, r3, #8
 801cba4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801cba8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801cbac:	681b      	ldr	r3, [r3, #0]
 801cbae:	6811      	ldr	r1, [r2, #0]
 801cbb0:	4798      	blx	r3
        while (lfs_dir_read(&lfs, &dir, &info) > 0) {
 801cbb2:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 801cbb6:	f107 0314 	add.w	r3, r7, #20
 801cbba:	4619      	mov	r1, r3
 801cbbc:	4808      	ldr	r0, [pc, #32]	@ (801cbe0 <mg_fs_lfs_list+0x8c>)
 801cbbe:	f008 f8e4 	bl	8024d8a <lfs_dir_read>
 801cbc2:	4603      	mov	r3, r0
 801cbc4:	2b00      	cmp	r3, #0
 801cbc6:	dce5      	bgt.n	801cb94 <mg_fs_lfs_list+0x40>
        }
        lfs_dir_close(&lfs, &dir);
 801cbc8:	f107 0314 	add.w	r3, r7, #20
 801cbcc:	4619      	mov	r1, r3
 801cbce:	4804      	ldr	r0, [pc, #16]	@ (801cbe0 <mg_fs_lfs_list+0x8c>)
 801cbd0:	f008 f8b8 	bl	8024d44 <lfs_dir_close>
    }
}
 801cbd4:	bf00      	nop
 801cbd6:	f507 77a8 	add.w	r7, r7, #336	@ 0x150
 801cbda:	46bd      	mov	sp, r7
 801cbdc:	bd80      	pop	{r7, pc}
 801cbde:	bf00      	nop
 801cbe0:	2001808c 	.word	0x2001808c

0801cbe4 <mg_fs_lfs_open>:

// Открытие файла
void *mg_fs_lfs_open(const char *path, int flags) {
 801cbe4:	b580      	push	{r7, lr}
 801cbe6:	b084      	sub	sp, #16
 801cbe8:	af00      	add	r7, sp, #0
 801cbea:	6078      	str	r0, [r7, #4]
 801cbec:	6039      	str	r1, [r7, #0]
    struct lfs_file_data *fd = (struct lfs_file_data *) malloc(sizeof(struct lfs_file_data));
 801cbee:	2054      	movs	r0, #84	@ 0x54
 801cbf0:	f7ff fcec 	bl	801c5cc <pvPortMalloc>
 801cbf4:	4603      	mov	r3, r0
 801cbf6:	60bb      	str	r3, [r7, #8]
    if (fd == NULL) return NULL;
 801cbf8:	68bb      	ldr	r3, [r7, #8]
 801cbfa:	2b00      	cmp	r3, #0
 801cbfc:	d101      	bne.n	801cc02 <mg_fs_lfs_open+0x1e>
 801cbfe:	2300      	movs	r3, #0
 801cc00:	e024      	b.n	801cc4c <mg_fs_lfs_open+0x68>

    int lfs_flags = 0;
 801cc02:	2300      	movs	r3, #0
 801cc04:	60fb      	str	r3, [r7, #12]
    if (flags & MG_FS_READ) lfs_flags |= LFS_O_RDONLY;
 801cc06:	683b      	ldr	r3, [r7, #0]
 801cc08:	f003 0301 	and.w	r3, r3, #1
 801cc0c:	2b00      	cmp	r3, #0
 801cc0e:	d003      	beq.n	801cc18 <mg_fs_lfs_open+0x34>
 801cc10:	68fb      	ldr	r3, [r7, #12]
 801cc12:	f043 0301 	orr.w	r3, r3, #1
 801cc16:	60fb      	str	r3, [r7, #12]
    if (flags & MG_FS_WRITE) lfs_flags |= LFS_O_WRONLY | LFS_O_CREAT | LFS_O_APPEND;
 801cc18:	683b      	ldr	r3, [r7, #0]
 801cc1a:	f003 0302 	and.w	r3, r3, #2
 801cc1e:	2b00      	cmp	r3, #0
 801cc20:	d005      	beq.n	801cc2e <mg_fs_lfs_open+0x4a>
 801cc22:	68fb      	ldr	r3, [r7, #12]
 801cc24:	f443 6310 	orr.w	r3, r3, #2304	@ 0x900
 801cc28:	f043 0302 	orr.w	r3, r3, #2
 801cc2c:	60fb      	str	r3, [r7, #12]

    if (lfs_file_open(&lfs, &fd->file, path, lfs_flags) < 0) {
 801cc2e:	68b9      	ldr	r1, [r7, #8]
 801cc30:	68fb      	ldr	r3, [r7, #12]
 801cc32:	687a      	ldr	r2, [r7, #4]
 801cc34:	4807      	ldr	r0, [pc, #28]	@ (801cc54 <mg_fs_lfs_open+0x70>)
 801cc36:	f007 feb5 	bl	80249a4 <lfs_file_open>
 801cc3a:	4603      	mov	r3, r0
 801cc3c:	2b00      	cmp	r3, #0
 801cc3e:	da04      	bge.n	801cc4a <mg_fs_lfs_open+0x66>
        free(fd);
 801cc40:	68b8      	ldr	r0, [r7, #8]
 801cc42:	f7ff fd91 	bl	801c768 <vPortFree>
        return NULL;
 801cc46:	2300      	movs	r3, #0
 801cc48:	e000      	b.n	801cc4c <mg_fs_lfs_open+0x68>
    }
    return fd;
 801cc4a:	68bb      	ldr	r3, [r7, #8]
}
 801cc4c:	4618      	mov	r0, r3
 801cc4e:	3710      	adds	r7, #16
 801cc50:	46bd      	mov	sp, r7
 801cc52:	bd80      	pop	{r7, pc}
 801cc54:	2001808c 	.word	0x2001808c

0801cc58 <mg_fs_lfs_close>:

// Закрытие файла
void mg_fs_lfs_close(void *fd) {
 801cc58:	b580      	push	{r7, lr}
 801cc5a:	b084      	sub	sp, #16
 801cc5c:	af00      	add	r7, sp, #0
 801cc5e:	6078      	str	r0, [r7, #4]
    struct lfs_file_data *file = (struct lfs_file_data *) fd;
 801cc60:	687b      	ldr	r3, [r7, #4]
 801cc62:	60fb      	str	r3, [r7, #12]
    lfs_file_close(&lfs, &file->file);
 801cc64:	68fb      	ldr	r3, [r7, #12]
 801cc66:	4619      	mov	r1, r3
 801cc68:	4804      	ldr	r0, [pc, #16]	@ (801cc7c <mg_fs_lfs_close+0x24>)
 801cc6a:	f007 fedb 	bl	8024a24 <lfs_file_close>
    free(file);
 801cc6e:	68f8      	ldr	r0, [r7, #12]
 801cc70:	f7ff fd7a 	bl	801c768 <vPortFree>
}
 801cc74:	bf00      	nop
 801cc76:	3710      	adds	r7, #16
 801cc78:	46bd      	mov	sp, r7
 801cc7a:	bd80      	pop	{r7, pc}
 801cc7c:	2001808c 	.word	0x2001808c

0801cc80 <mg_fs_lfs_read>:

// Чтение из файла
size_t mg_fs_lfs_read(void *fd, void *buf, size_t len) {
 801cc80:	b580      	push	{r7, lr}
 801cc82:	b086      	sub	sp, #24
 801cc84:	af00      	add	r7, sp, #0
 801cc86:	60f8      	str	r0, [r7, #12]
 801cc88:	60b9      	str	r1, [r7, #8]
 801cc8a:	607a      	str	r2, [r7, #4]
    struct lfs_file_data *file = (struct lfs_file_data *) fd;
 801cc8c:	68fb      	ldr	r3, [r7, #12]
 801cc8e:	617b      	str	r3, [r7, #20]
    int res = lfs_file_read(&lfs, &file->file, buf, len);
 801cc90:	6979      	ldr	r1, [r7, #20]
 801cc92:	687b      	ldr	r3, [r7, #4]
 801cc94:	68ba      	ldr	r2, [r7, #8]
 801cc96:	4805      	ldr	r0, [pc, #20]	@ (801ccac <mg_fs_lfs_read+0x2c>)
 801cc98:	f007 fefe 	bl	8024a98 <lfs_file_read>
 801cc9c:	6138      	str	r0, [r7, #16]
    return res < 0 ? 0 : res;
 801cc9e:	693b      	ldr	r3, [r7, #16]
 801cca0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 801cca4:	4618      	mov	r0, r3
 801cca6:	3718      	adds	r7, #24
 801cca8:	46bd      	mov	sp, r7
 801ccaa:	bd80      	pop	{r7, pc}
 801ccac:	2001808c 	.word	0x2001808c

0801ccb0 <mg_fs_lfs_write>:

// Запись в файл
size_t mg_fs_lfs_write(void *fd, const void *buf, size_t len) {
 801ccb0:	b580      	push	{r7, lr}
 801ccb2:	b086      	sub	sp, #24
 801ccb4:	af00      	add	r7, sp, #0
 801ccb6:	60f8      	str	r0, [r7, #12]
 801ccb8:	60b9      	str	r1, [r7, #8]
 801ccba:	607a      	str	r2, [r7, #4]
    struct lfs_file_data *file = (struct lfs_file_data *) fd;
 801ccbc:	68fb      	ldr	r3, [r7, #12]
 801ccbe:	617b      	str	r3, [r7, #20]
    int res = lfs_file_write(&lfs, &file->file, buf, len);
 801ccc0:	6979      	ldr	r1, [r7, #20]
 801ccc2:	687b      	ldr	r3, [r7, #4]
 801ccc4:	68ba      	ldr	r2, [r7, #8]
 801ccc6:	4805      	ldr	r0, [pc, #20]	@ (801ccdc <mg_fs_lfs_write+0x2c>)
 801ccc8:	f007 ff24 	bl	8024b14 <lfs_file_write>
 801cccc:	6138      	str	r0, [r7, #16]
    return res < 0 ? 0 : res;
 801ccce:	693b      	ldr	r3, [r7, #16]
 801ccd0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 801ccd4:	4618      	mov	r0, r3
 801ccd6:	3718      	adds	r7, #24
 801ccd8:	46bd      	mov	sp, r7
 801ccda:	bd80      	pop	{r7, pc}
 801ccdc:	2001808c 	.word	0x2001808c

0801cce0 <mg_fs_lfs_seek>:

// Установка позиции в файле
size_t mg_fs_lfs_seek(void *fd, size_t offset) {
 801cce0:	b580      	push	{r7, lr}
 801cce2:	b084      	sub	sp, #16
 801cce4:	af00      	add	r7, sp, #0
 801cce6:	6078      	str	r0, [r7, #4]
 801cce8:	6039      	str	r1, [r7, #0]
    struct lfs_file_data *file = (struct lfs_file_data *) fd;
 801ccea:	687b      	ldr	r3, [r7, #4]
 801ccec:	60fb      	str	r3, [r7, #12]

    // Попытка установить позицию в файле
    if (lfs_file_seek(&lfs, &file->file, offset, LFS_SEEK_SET) < 0) {
 801ccee:	68f9      	ldr	r1, [r7, #12]
 801ccf0:	683a      	ldr	r2, [r7, #0]
 801ccf2:	2300      	movs	r3, #0
 801ccf4:	480c      	ldr	r0, [pc, #48]	@ (801cd28 <mg_fs_lfs_seek+0x48>)
 801ccf6:	f007 ff4b 	bl	8024b90 <lfs_file_seek>
 801ccfa:	4603      	mov	r3, r0
 801ccfc:	2b00      	cmp	r3, #0
 801ccfe:	da02      	bge.n	801cd06 <mg_fs_lfs_seek+0x26>
        return (size_t)-1;  // Ошибка при перемещении
 801cd00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cd04:	e00c      	b.n	801cd20 <mg_fs_lfs_seek+0x40>
    }

    // Получение текущей позиции в файле
    lfs_soff_t pos = lfs_file_tell(&lfs, &file->file);
 801cd06:	68fb      	ldr	r3, [r7, #12]
 801cd08:	4619      	mov	r1, r3
 801cd0a:	4807      	ldr	r0, [pc, #28]	@ (801cd28 <mg_fs_lfs_seek+0x48>)
 801cd0c:	f007 ff7e 	bl	8024c0c <lfs_file_tell>
 801cd10:	60b8      	str	r0, [r7, #8]

    // Проверка ошибки
     if (pos < 0) {
 801cd12:	68bb      	ldr	r3, [r7, #8]
 801cd14:	2b00      	cmp	r3, #0
 801cd16:	da02      	bge.n	801cd1e <mg_fs_lfs_seek+0x3e>
         return (size_t)-1;  // Ошибка при получении позиции
 801cd18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cd1c:	e000      	b.n	801cd20 <mg_fs_lfs_seek+0x40>
     }

     return (size_t)pos;  // Возвращаем текущую позицию
 801cd1e:	68bb      	ldr	r3, [r7, #8]

}
 801cd20:	4618      	mov	r0, r3
 801cd22:	3710      	adds	r7, #16
 801cd24:	46bd      	mov	sp, r7
 801cd26:	bd80      	pop	{r7, pc}
 801cd28:	2001808c 	.word	0x2001808c

0801cd2c <mg_fs_lfs_rename>:

// Переименование файла
bool mg_fs_lfs_rename(const char *from, const char *to) {
 801cd2c:	b580      	push	{r7, lr}
 801cd2e:	b082      	sub	sp, #8
 801cd30:	af00      	add	r7, sp, #0
 801cd32:	6078      	str	r0, [r7, #4]
 801cd34:	6039      	str	r1, [r7, #0]
    return lfs_rename(&lfs, from, to) == 0;
 801cd36:	683a      	ldr	r2, [r7, #0]
 801cd38:	6879      	ldr	r1, [r7, #4]
 801cd3a:	4806      	ldr	r0, [pc, #24]	@ (801cd54 <mg_fs_lfs_rename+0x28>)
 801cd3c:	f007 fde7 	bl	802490e <lfs_rename>
 801cd40:	4603      	mov	r3, r0
 801cd42:	2b00      	cmp	r3, #0
 801cd44:	bf0c      	ite	eq
 801cd46:	2301      	moveq	r3, #1
 801cd48:	2300      	movne	r3, #0
 801cd4a:	b2db      	uxtb	r3, r3
}
 801cd4c:	4618      	mov	r0, r3
 801cd4e:	3708      	adds	r7, #8
 801cd50:	46bd      	mov	sp, r7
 801cd52:	bd80      	pop	{r7, pc}
 801cd54:	2001808c 	.word	0x2001808c

0801cd58 <mg_fs_lfs_remove>:

// Удаление файла
bool mg_fs_lfs_remove(const char *path) {
 801cd58:	b580      	push	{r7, lr}
 801cd5a:	b082      	sub	sp, #8
 801cd5c:	af00      	add	r7, sp, #0
 801cd5e:	6078      	str	r0, [r7, #4]
    return lfs_remove(&lfs, path) == 0;
 801cd60:	6879      	ldr	r1, [r7, #4]
 801cd62:	4806      	ldr	r0, [pc, #24]	@ (801cd7c <mg_fs_lfs_remove+0x24>)
 801cd64:	f007 fdb0 	bl	80248c8 <lfs_remove>
 801cd68:	4603      	mov	r3, r0
 801cd6a:	2b00      	cmp	r3, #0
 801cd6c:	bf0c      	ite	eq
 801cd6e:	2301      	moveq	r3, #1
 801cd70:	2300      	movne	r3, #0
 801cd72:	b2db      	uxtb	r3, r3
}
 801cd74:	4618      	mov	r0, r3
 801cd76:	3708      	adds	r7, #8
 801cd78:	46bd      	mov	sp, r7
 801cd7a:	bd80      	pop	{r7, pc}
 801cd7c:	2001808c 	.word	0x2001808c

0801cd80 <mg_fs_lfs_mkdir>:
    // Удаление пустой директории
    return lfs_remove(&lfs, path);
}

// Создание директории
bool mg_fs_lfs_mkdir(const char *path) {
 801cd80:	b580      	push	{r7, lr}
 801cd82:	b082      	sub	sp, #8
 801cd84:	af00      	add	r7, sp, #0
 801cd86:	6078      	str	r0, [r7, #4]
    return lfs_mkdir(&lfs, path) == 0;
 801cd88:	6879      	ldr	r1, [r7, #4]
 801cd8a:	4806      	ldr	r0, [pc, #24]	@ (801cda4 <mg_fs_lfs_mkdir+0x24>)
 801cd8c:	f007 ff78 	bl	8024c80 <lfs_mkdir>
 801cd90:	4603      	mov	r3, r0
 801cd92:	2b00      	cmp	r3, #0
 801cd94:	bf0c      	ite	eq
 801cd96:	2301      	moveq	r3, #1
 801cd98:	2300      	movne	r3, #0
 801cd9a:	b2db      	uxtb	r3, r3
}
 801cd9c:	4618      	mov	r0, r3
 801cd9e:	3708      	adds	r7, #8
 801cda0:	46bd      	mov	sp, r7
 801cda2:	bd80      	pop	{r7, pc}
 801cda4:	2001808c 	.word	0x2001808c

0801cda8 <lfs_fs_ll_init>:
int block_device_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size);
int block_device_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size);
int block_device_erase(const struct lfs_config *c, lfs_block_t block);
int block_device_sync(const struct lfs_config *c);

int lfs_fs_ll_init(void (*lock)(void *), void (*unlock)(void *)){
 801cda8:	b580      	push	{r7, lr}
 801cdaa:	b08a      	sub	sp, #40	@ 0x28
 801cdac:	af00      	add	r7, sp, #0
 801cdae:	6078      	str	r0, [r7, #4]
 801cdb0:	6039      	str	r1, [r7, #0]

	struct SPI_flash_info	flash_info;

	flash_info = sFLASH_GetInfo();
 801cdb2:	f107 030c 	add.w	r3, r7, #12
 801cdb6:	4618      	mov	r0, r3
 801cdb8:	f7f8 fc1a 	bl	80155f0 <sFLASH_GetInfo>
	if (flash_info.flash_id == 0x0) return -1;
 801cdbc:	68fb      	ldr	r3, [r7, #12]
 801cdbe:	2b00      	cmp	r3, #0
 801cdc0:	d102      	bne.n	801cdc8 <lfs_fs_ll_init+0x20>
 801cdc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cdc6:	e066      	b.n	801ce96 <lfs_fs_ll_init+0xee>

	uint8_t *read_buff   = calloc(1, flash_info.page_size);
 801cdc8:	8afb      	ldrh	r3, [r7, #22]
 801cdca:	4619      	mov	r1, r3
 801cdcc:	2001      	movs	r0, #1
 801cdce:	f7ff fe4b 	bl	801ca68 <mg_calloc>
 801cdd2:	6278      	str	r0, [r7, #36]	@ 0x24
	uint8_t *write_buff  = calloc(1, flash_info.page_size);
 801cdd4:	8afb      	ldrh	r3, [r7, #22]
 801cdd6:	4619      	mov	r1, r3
 801cdd8:	2001      	movs	r0, #1
 801cdda:	f7ff fe45 	bl	801ca68 <mg_calloc>
 801cdde:	6238      	str	r0, [r7, #32]
	void * lookahead_buff = calloc(1, flash_info.page_size);
 801cde0:	8afb      	ldrh	r3, [r7, #22]
 801cde2:	4619      	mov	r1, r3
 801cde4:	2001      	movs	r0, #1
 801cde6:	f7ff fe3f 	bl	801ca68 <mg_calloc>
 801cdea:	61f8      	str	r0, [r7, #28]

	if (!(read_buff || write_buff || lookahead_buff)){
 801cdec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cdee:	2b00      	cmp	r3, #0
 801cdf0:	d108      	bne.n	801ce04 <lfs_fs_ll_init+0x5c>
 801cdf2:	6a3b      	ldr	r3, [r7, #32]
 801cdf4:	2b00      	cmp	r3, #0
 801cdf6:	d105      	bne.n	801ce04 <lfs_fs_ll_init+0x5c>
 801cdf8:	69fb      	ldr	r3, [r7, #28]
 801cdfa:	2b00      	cmp	r3, #0
 801cdfc:	d102      	bne.n	801ce04 <lfs_fs_ll_init+0x5c>
		return -2;
 801cdfe:	f06f 0301 	mvn.w	r3, #1
 801ce02:	e048      	b.n	801ce96 <lfs_fs_ll_init+0xee>
	}

	cfg.read_size         = flash_info.read_size;
 801ce04:	8a3b      	ldrh	r3, [r7, #16]
 801ce06:	461a      	mov	r2, r3
 801ce08:	4b25      	ldr	r3, [pc, #148]	@ (801cea0 <lfs_fs_ll_init+0xf8>)
 801ce0a:	61da      	str	r2, [r3, #28]
	cfg.prog_size         = flash_info.write_size;
 801ce0c:	8a7b      	ldrh	r3, [r7, #18]
 801ce0e:	461a      	mov	r2, r3
 801ce10:	4b23      	ldr	r3, [pc, #140]	@ (801cea0 <lfs_fs_ll_init+0xf8>)
 801ce12:	621a      	str	r2, [r3, #32]
    cfg.block_size        = flash_info.erase_size;
 801ce14:	8abb      	ldrh	r3, [r7, #20]
 801ce16:	461a      	mov	r2, r3
 801ce18:	4b21      	ldr	r3, [pc, #132]	@ (801cea0 <lfs_fs_ll_init+0xf8>)
 801ce1a:	625a      	str	r2, [r3, #36]	@ 0x24
    cfg.block_count       = flash_info.block_count;
 801ce1c:	8b3b      	ldrh	r3, [r7, #24]
 801ce1e:	461a      	mov	r2, r3
 801ce20:	4b1f      	ldr	r3, [pc, #124]	@ (801cea0 <lfs_fs_ll_init+0xf8>)
 801ce22:	629a      	str	r2, [r3, #40]	@ 0x28

    cfg.lookahead_size    = flash_info.page_size;
 801ce24:	8afb      	ldrh	r3, [r7, #22]
 801ce26:	461a      	mov	r2, r3
 801ce28:	4b1d      	ldr	r3, [pc, #116]	@ (801cea0 <lfs_fs_ll_init+0xf8>)
 801ce2a:	635a      	str	r2, [r3, #52]	@ 0x34
    cfg.cache_size        = flash_info.page_size;
 801ce2c:	8afb      	ldrh	r3, [r7, #22]
 801ce2e:	461a      	mov	r2, r3
 801ce30:	4b1b      	ldr	r3, [pc, #108]	@ (801cea0 <lfs_fs_ll_init+0xf8>)
 801ce32:	631a      	str	r2, [r3, #48]	@ 0x30

    cfg.read_buffer       = read_buff;
 801ce34:	4a1a      	ldr	r2, [pc, #104]	@ (801cea0 <lfs_fs_ll_init+0xf8>)
 801ce36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce38:	63d3      	str	r3, [r2, #60]	@ 0x3c
    cfg.prog_buffer       = write_buff;
 801ce3a:	4a19      	ldr	r2, [pc, #100]	@ (801cea0 <lfs_fs_ll_init+0xf8>)
 801ce3c:	6a3b      	ldr	r3, [r7, #32]
 801ce3e:	6413      	str	r3, [r2, #64]	@ 0x40
    cfg.lookahead_buffer  = lookahead_buff;
 801ce40:	4a17      	ldr	r2, [pc, #92]	@ (801cea0 <lfs_fs_ll_init+0xf8>)
 801ce42:	69fb      	ldr	r3, [r7, #28]
 801ce44:	6453      	str	r3, [r2, #68]	@ 0x44

    cfg.read   = block_device_read;
 801ce46:	4b16      	ldr	r3, [pc, #88]	@ (801cea0 <lfs_fs_ll_init+0xf8>)
 801ce48:	4a16      	ldr	r2, [pc, #88]	@ (801cea4 <lfs_fs_ll_init+0xfc>)
 801ce4a:	605a      	str	r2, [r3, #4]
    cfg.prog   = block_device_prog;
 801ce4c:	4b14      	ldr	r3, [pc, #80]	@ (801cea0 <lfs_fs_ll_init+0xf8>)
 801ce4e:	4a16      	ldr	r2, [pc, #88]	@ (801cea8 <lfs_fs_ll_init+0x100>)
 801ce50:	609a      	str	r2, [r3, #8]
    cfg.erase  = block_device_erase;
 801ce52:	4b13      	ldr	r3, [pc, #76]	@ (801cea0 <lfs_fs_ll_init+0xf8>)
 801ce54:	4a15      	ldr	r2, [pc, #84]	@ (801ceac <lfs_fs_ll_init+0x104>)
 801ce56:	60da      	str	r2, [r3, #12]
    cfg.sync   = block_device_sync;
 801ce58:	4b11      	ldr	r3, [pc, #68]	@ (801cea0 <lfs_fs_ll_init+0xf8>)
 801ce5a:	4a15      	ldr	r2, [pc, #84]	@ (801ceb0 <lfs_fs_ll_init+0x108>)
 801ce5c:	611a      	str	r2, [r3, #16]

    cfg.lock 	= lock;
 801ce5e:	4a10      	ldr	r2, [pc, #64]	@ (801cea0 <lfs_fs_ll_init+0xf8>)
 801ce60:	687b      	ldr	r3, [r7, #4]
 801ce62:	6153      	str	r3, [r2, #20]
	cfg.unlock	= unlock;
 801ce64:	4a0e      	ldr	r2, [pc, #56]	@ (801cea0 <lfs_fs_ll_init+0xf8>)
 801ce66:	683b      	ldr	r3, [r7, #0]
 801ce68:	6193      	str	r3, [r2, #24]

#ifdef LFS_THREADSAFE
#endif

    cfg.block_cycles 	= FLASH_BLOCK_CYCLES;
 801ce6a:	4b0d      	ldr	r3, [pc, #52]	@ (801cea0 <lfs_fs_ll_init+0xf8>)
 801ce6c:	f242 7210 	movw	r2, #10000	@ 0x2710
 801ce70:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (lfs_mount(&lfs, &cfg)< 0){
 801ce72:	490b      	ldr	r1, [pc, #44]	@ (801cea0 <lfs_fs_ll_init+0xf8>)
 801ce74:	480f      	ldr	r0, [pc, #60]	@ (801ceb4 <lfs_fs_ll_init+0x10c>)
 801ce76:	f007 fd0a 	bl	802488e <lfs_mount>
 801ce7a:	4603      	mov	r3, r0
 801ce7c:	2b00      	cmp	r3, #0
 801ce7e:	da09      	bge.n	801ce94 <lfs_fs_ll_init+0xec>
    	lfs_format(&lfs, &cfg);
 801ce80:	4907      	ldr	r1, [pc, #28]	@ (801cea0 <lfs_fs_ll_init+0xf8>)
 801ce82:	480c      	ldr	r0, [pc, #48]	@ (801ceb4 <lfs_fs_ll_init+0x10c>)
 801ce84:	f007 fce6 	bl	8024854 <lfs_format>
    	return lfs_mount(&lfs, &cfg);
 801ce88:	4905      	ldr	r1, [pc, #20]	@ (801cea0 <lfs_fs_ll_init+0xf8>)
 801ce8a:	480a      	ldr	r0, [pc, #40]	@ (801ceb4 <lfs_fs_ll_init+0x10c>)
 801ce8c:	f007 fcff 	bl	802488e <lfs_mount>
 801ce90:	4603      	mov	r3, r0
 801ce92:	e000      	b.n	801ce96 <lfs_fs_ll_init+0xee>
    }

	return 0;
 801ce94:	2300      	movs	r3, #0
}
 801ce96:	4618      	mov	r0, r3
 801ce98:	3728      	adds	r7, #40	@ 0x28
 801ce9a:	46bd      	mov	sp, r7
 801ce9c:	bd80      	pop	{r7, pc}
 801ce9e:	bf00      	nop
 801cea0:	2001810c 	.word	0x2001810c
 801cea4:	0801ceb9 	.word	0x0801ceb9
 801cea8:	0801cf59 	.word	0x0801cf59
 801ceac:	0801cf11 	.word	0x0801cf11
 801ceb0:	0801cfb1 	.word	0x0801cfb1
 801ceb4:	2001808c 	.word	0x2001808c

0801ceb8 <block_device_read>:

int block_device_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size){
 801ceb8:	b580      	push	{r7, lr}
 801ceba:	b084      	sub	sp, #16
 801cebc:	af00      	add	r7, sp, #0
 801cebe:	60f8      	str	r0, [r7, #12]
 801cec0:	60b9      	str	r1, [r7, #8]
 801cec2:	607a      	str	r2, [r7, #4]
 801cec4:	603b      	str	r3, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 801cec6:	68fb      	ldr	r3, [r7, #12]
 801cec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ceca:	68ba      	ldr	r2, [r7, #8]
 801cecc:	429a      	cmp	r2, r3
 801cece:	d306      	bcc.n	801cede <block_device_read+0x26>
 801ced0:	4b0c      	ldr	r3, [pc, #48]	@ (801cf04 <block_device_read+0x4c>)
 801ced2:	4a0d      	ldr	r2, [pc, #52]	@ (801cf08 <block_device_read+0x50>)
 801ced4:	f240 1111 	movw	r1, #273	@ 0x111
 801ced8:	480c      	ldr	r0, [pc, #48]	@ (801cf0c <block_device_read+0x54>)
 801ceda:	f016 fa35 	bl	8033348 <__assert_func>
#endif
	sFLASH_ReadBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 801cede:	68fb      	ldr	r3, [r7, #12]
 801cee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cee2:	68ba      	ldr	r2, [r7, #8]
 801cee4:	fb03 f202 	mul.w	r2, r3, r2
 801cee8:	687b      	ldr	r3, [r7, #4]
 801ceea:	4413      	add	r3, r2
 801ceec:	69ba      	ldr	r2, [r7, #24]
 801ceee:	b292      	uxth	r2, r2
 801cef0:	4619      	mov	r1, r3
 801cef2:	6838      	ldr	r0, [r7, #0]
 801cef4:	f7f8 fd4a 	bl	801598c <sFLASH_ReadBuffer>
	return 0;
 801cef8:	2300      	movs	r3, #0
}
 801cefa:	4618      	mov	r0, r3
 801cefc:	3710      	adds	r7, #16
 801cefe:	46bd      	mov	sp, r7
 801cf00:	bd80      	pop	{r7, pc}
 801cf02:	bf00      	nop
 801cf04:	0804089c 	.word	0x0804089c
 801cf08:	08044320 	.word	0x08044320
 801cf0c:	080408b4 	.word	0x080408b4

0801cf10 <block_device_erase>:

int block_device_erase(const struct lfs_config *c, lfs_block_t block){
 801cf10:	b580      	push	{r7, lr}
 801cf12:	b082      	sub	sp, #8
 801cf14:	af00      	add	r7, sp, #0
 801cf16:	6078      	str	r0, [r7, #4]
 801cf18:	6039      	str	r1, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 801cf1a:	687b      	ldr	r3, [r7, #4]
 801cf1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cf1e:	683a      	ldr	r2, [r7, #0]
 801cf20:	429a      	cmp	r2, r3
 801cf22:	d306      	bcc.n	801cf32 <block_device_erase+0x22>
 801cf24:	4b09      	ldr	r3, [pc, #36]	@ (801cf4c <block_device_erase+0x3c>)
 801cf26:	4a0a      	ldr	r2, [pc, #40]	@ (801cf50 <block_device_erase+0x40>)
 801cf28:	f240 1119 	movw	r1, #281	@ 0x119
 801cf2c:	4809      	ldr	r0, [pc, #36]	@ (801cf54 <block_device_erase+0x44>)
 801cf2e:	f016 fa0b 	bl	8033348 <__assert_func>
#endif
	sFLASH_EraseSector(block * (c -> block_size));
 801cf32:	687b      	ldr	r3, [r7, #4]
 801cf34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cf36:	683a      	ldr	r2, [r7, #0]
 801cf38:	fb02 f303 	mul.w	r3, r2, r3
 801cf3c:	4618      	mov	r0, r3
 801cf3e:	f7f8 fc23 	bl	8015788 <sFLASH_EraseSector>
	return 0;
 801cf42:	2300      	movs	r3, #0
}
 801cf44:	4618      	mov	r0, r3
 801cf46:	3708      	adds	r7, #8
 801cf48:	46bd      	mov	sp, r7
 801cf4a:	bd80      	pop	{r7, pc}
 801cf4c:	0804089c 	.word	0x0804089c
 801cf50:	08044334 	.word	0x08044334
 801cf54:	080408b4 	.word	0x080408b4

0801cf58 <block_device_prog>:

int block_device_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size){
 801cf58:	b580      	push	{r7, lr}
 801cf5a:	b084      	sub	sp, #16
 801cf5c:	af00      	add	r7, sp, #0
 801cf5e:	60f8      	str	r0, [r7, #12]
 801cf60:	60b9      	str	r1, [r7, #8]
 801cf62:	607a      	str	r2, [r7, #4]
 801cf64:	603b      	str	r3, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 801cf66:	68fb      	ldr	r3, [r7, #12]
 801cf68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cf6a:	68ba      	ldr	r2, [r7, #8]
 801cf6c:	429a      	cmp	r2, r3
 801cf6e:	d306      	bcc.n	801cf7e <block_device_prog+0x26>
 801cf70:	4b0c      	ldr	r3, [pc, #48]	@ (801cfa4 <block_device_prog+0x4c>)
 801cf72:	4a0d      	ldr	r2, [pc, #52]	@ (801cfa8 <block_device_prog+0x50>)
 801cf74:	f240 1121 	movw	r1, #289	@ 0x121
 801cf78:	480c      	ldr	r0, [pc, #48]	@ (801cfac <block_device_prog+0x54>)
 801cf7a:	f016 f9e5 	bl	8033348 <__assert_func>
#endif
	sFLASH_WriteBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 801cf7e:	68fb      	ldr	r3, [r7, #12]
 801cf80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cf82:	68ba      	ldr	r2, [r7, #8]
 801cf84:	fb03 f202 	mul.w	r2, r3, r2
 801cf88:	687b      	ldr	r3, [r7, #4]
 801cf8a:	4413      	add	r3, r2
 801cf8c:	69ba      	ldr	r2, [r7, #24]
 801cf8e:	b292      	uxth	r2, r2
 801cf90:	4619      	mov	r1, r3
 801cf92:	6838      	ldr	r0, [r7, #0]
 801cf94:	f7f8 fc51 	bl	801583a <sFLASH_WriteBuffer>
	return 0;
 801cf98:	2300      	movs	r3, #0
}
 801cf9a:	4618      	mov	r0, r3
 801cf9c:	3710      	adds	r7, #16
 801cf9e:	46bd      	mov	sp, r7
 801cfa0:	bd80      	pop	{r7, pc}
 801cfa2:	bf00      	nop
 801cfa4:	0804089c 	.word	0x0804089c
 801cfa8:	08044348 	.word	0x08044348
 801cfac:	080408b4 	.word	0x080408b4

0801cfb0 <block_device_sync>:

int block_device_sync(const struct lfs_config *c){
 801cfb0:	b480      	push	{r7}
 801cfb2:	b083      	sub	sp, #12
 801cfb4:	af00      	add	r7, sp, #0
 801cfb6:	6078      	str	r0, [r7, #4]
	return 0;
 801cfb8:	2300      	movs	r3, #0
}
 801cfba:	4618      	mov	r0, r3
 801cfbc:	370c      	adds	r7, #12
 801cfbe:	46bd      	mov	sp, r7
 801cfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfc4:	4770      	bx	lr

0801cfc6 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 801cfc6:	b480      	push	{r7}
 801cfc8:	b083      	sub	sp, #12
 801cfca:	af00      	add	r7, sp, #0
 801cfcc:	6078      	str	r0, [r7, #4]
 801cfce:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 801cfd0:	683a      	ldr	r2, [r7, #0]
 801cfd2:	687b      	ldr	r3, [r7, #4]
 801cfd4:	4293      	cmp	r3, r2
 801cfd6:	bf38      	it	cc
 801cfd8:	4613      	movcc	r3, r2
}
 801cfda:	4618      	mov	r0, r3
 801cfdc:	370c      	adds	r7, #12
 801cfde:	46bd      	mov	sp, r7
 801cfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfe4:	4770      	bx	lr

0801cfe6 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 801cfe6:	b480      	push	{r7}
 801cfe8:	b083      	sub	sp, #12
 801cfea:	af00      	add	r7, sp, #0
 801cfec:	6078      	str	r0, [r7, #4]
 801cfee:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 801cff0:	683a      	ldr	r2, [r7, #0]
 801cff2:	687b      	ldr	r3, [r7, #4]
 801cff4:	4293      	cmp	r3, r2
 801cff6:	bf28      	it	cs
 801cff8:	4613      	movcs	r3, r2
}
 801cffa:	4618      	mov	r0, r3
 801cffc:	370c      	adds	r7, #12
 801cffe:	46bd      	mov	sp, r7
 801d000:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d004:	4770      	bx	lr

0801d006 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 801d006:	b480      	push	{r7}
 801d008:	b083      	sub	sp, #12
 801d00a:	af00      	add	r7, sp, #0
 801d00c:	6078      	str	r0, [r7, #4]
 801d00e:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 801d010:	687b      	ldr	r3, [r7, #4]
 801d012:	683a      	ldr	r2, [r7, #0]
 801d014:	fbb3 f2f2 	udiv	r2, r3, r2
 801d018:	6839      	ldr	r1, [r7, #0]
 801d01a:	fb01 f202 	mul.w	r2, r1, r2
 801d01e:	1a9b      	subs	r3, r3, r2
 801d020:	687a      	ldr	r2, [r7, #4]
 801d022:	1ad3      	subs	r3, r2, r3
}
 801d024:	4618      	mov	r0, r3
 801d026:	370c      	adds	r7, #12
 801d028:	46bd      	mov	sp, r7
 801d02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d02e:	4770      	bx	lr

0801d030 <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 801d030:	b580      	push	{r7, lr}
 801d032:	b082      	sub	sp, #8
 801d034:	af00      	add	r7, sp, #0
 801d036:	6078      	str	r0, [r7, #4]
 801d038:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 801d03a:	687a      	ldr	r2, [r7, #4]
 801d03c:	683b      	ldr	r3, [r7, #0]
 801d03e:	4413      	add	r3, r2
 801d040:	3b01      	subs	r3, #1
 801d042:	6839      	ldr	r1, [r7, #0]
 801d044:	4618      	mov	r0, r3
 801d046:	f7ff ffde 	bl	801d006 <lfs_aligndown>
 801d04a:	4603      	mov	r3, r0
}
 801d04c:	4618      	mov	r0, r3
 801d04e:	3708      	adds	r7, #8
 801d050:	46bd      	mov	sp, r7
 801d052:	bd80      	pop	{r7, pc}

0801d054 <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 801d054:	b480      	push	{r7}
 801d056:	b083      	sub	sp, #12
 801d058:	af00      	add	r7, sp, #0
 801d05a:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 801d05c:	687b      	ldr	r3, [r7, #4]
 801d05e:	3b01      	subs	r3, #1
 801d060:	fab3 f383 	clz	r3, r3
 801d064:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 801d068:	4618      	mov	r0, r3
 801d06a:	370c      	adds	r7, #12
 801d06c:	46bd      	mov	sp, r7
 801d06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d072:	4770      	bx	lr

0801d074 <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 801d074:	b480      	push	{r7}
 801d076:	b083      	sub	sp, #12
 801d078:	af00      	add	r7, sp, #0
 801d07a:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 801d07c:	687b      	ldr	r3, [r7, #4]
 801d07e:	fa93 f3a3 	rbit	r3, r3
 801d082:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 801d086:	4618      	mov	r0, r3
 801d088:	370c      	adds	r7, #12
 801d08a:	46bd      	mov	sp, r7
 801d08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d090:	4770      	bx	lr

0801d092 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 801d092:	b580      	push	{r7, lr}
 801d094:	b082      	sub	sp, #8
 801d096:	af00      	add	r7, sp, #0
 801d098:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 801d09a:	6878      	ldr	r0, [r7, #4]
 801d09c:	f7f3 fe74 	bl	8010d88 <__popcountsi2>
 801d0a0:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 801d0a2:	4618      	mov	r0, r3
 801d0a4:	3708      	adds	r7, #8
 801d0a6:	46bd      	mov	sp, r7
 801d0a8:	bd80      	pop	{r7, pc}

0801d0aa <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 801d0aa:	b480      	push	{r7}
 801d0ac:	b083      	sub	sp, #12
 801d0ae:	af00      	add	r7, sp, #0
 801d0b0:	6078      	str	r0, [r7, #4]
 801d0b2:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 801d0b4:	687a      	ldr	r2, [r7, #4]
 801d0b6:	683b      	ldr	r3, [r7, #0]
 801d0b8:	1ad3      	subs	r3, r2, r3
}
 801d0ba:	4618      	mov	r0, r3
 801d0bc:	370c      	adds	r7, #12
 801d0be:	46bd      	mov	sp, r7
 801d0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0c4:	4770      	bx	lr

0801d0c6 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 801d0c6:	b480      	push	{r7}
 801d0c8:	b083      	sub	sp, #12
 801d0ca:	af00      	add	r7, sp, #0
 801d0cc:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 801d0ce:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 801d0d0:	4618      	mov	r0, r3
 801d0d2:	370c      	adds	r7, #12
 801d0d4:	46bd      	mov	sp, r7
 801d0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0da:	4770      	bx	lr

0801d0dc <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 801d0dc:	b580      	push	{r7, lr}
 801d0de:	b082      	sub	sp, #8
 801d0e0:	af00      	add	r7, sp, #0
 801d0e2:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 801d0e4:	6878      	ldr	r0, [r7, #4]
 801d0e6:	f7ff ffee 	bl	801d0c6 <lfs_fromle32>
 801d0ea:	4603      	mov	r3, r0
}
 801d0ec:	4618      	mov	r0, r3
 801d0ee:	3708      	adds	r7, #8
 801d0f0:	46bd      	mov	sp, r7
 801d0f2:	bd80      	pop	{r7, pc}

0801d0f4 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 801d0f4:	b480      	push	{r7}
 801d0f6:	b083      	sub	sp, #12
 801d0f8:	af00      	add	r7, sp, #0
 801d0fa:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 801d0fc:	687b      	ldr	r3, [r7, #4]
 801d0fe:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 801d100:	4618      	mov	r0, r3
 801d102:	370c      	adds	r7, #12
 801d104:	46bd      	mov	sp, r7
 801d106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d10a:	4770      	bx	lr

0801d10c <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 801d10c:	b580      	push	{r7, lr}
 801d10e:	b082      	sub	sp, #8
 801d110:	af00      	add	r7, sp, #0
 801d112:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 801d114:	6878      	ldr	r0, [r7, #4]
 801d116:	f7ff ffed 	bl	801d0f4 <lfs_frombe32>
 801d11a:	4603      	mov	r3, r0
}
 801d11c:	4618      	mov	r0, r3
 801d11e:	3708      	adds	r7, #8
 801d120:	46bd      	mov	sp, r7
 801d122:	bd80      	pop	{r7, pc}

0801d124 <lfs_malloc>:

// Allocate memory, only used if buffers are not provided to littlefs
//
// littlefs current has no alignment requirements, as it only allocates
// byte-level buffers.
static inline void *lfs_malloc(size_t size) {
 801d124:	b580      	push	{r7, lr}
 801d126:	b082      	sub	sp, #8
 801d128:	af00      	add	r7, sp, #0
 801d12a:	6078      	str	r0, [r7, #4]
#if defined(LFS_MALLOC)
    return LFS_MALLOC(size);
#elif !defined(LFS_NO_MALLOC)
    return malloc(size);
 801d12c:	6878      	ldr	r0, [r7, #4]
 801d12e:	f7ff fa4d 	bl	801c5cc <pvPortMalloc>
 801d132:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 801d134:	4618      	mov	r0, r3
 801d136:	3708      	adds	r7, #8
 801d138:	46bd      	mov	sp, r7
 801d13a:	bd80      	pop	{r7, pc}

0801d13c <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 801d13c:	b580      	push	{r7, lr}
 801d13e:	b082      	sub	sp, #8
 801d140:	af00      	add	r7, sp, #0
 801d142:	6078      	str	r0, [r7, #4]
#if defined(LFS_FREE)
    LFS_FREE(p);
#elif !defined(LFS_NO_MALLOC)
    free(p);
 801d144:	6878      	ldr	r0, [r7, #4]
 801d146:	f7ff fb0f 	bl	801c768 <vPortFree>
#else
    (void)p;
#endif
}
 801d14a:	bf00      	nop
 801d14c:	3708      	adds	r7, #8
 801d14e:	46bd      	mov	sp, r7
 801d150:	bd80      	pop	{r7, pc}

0801d152 <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 801d152:	b480      	push	{r7}
 801d154:	b083      	sub	sp, #12
 801d156:	af00      	add	r7, sp, #0
 801d158:	6078      	str	r0, [r7, #4]
 801d15a:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 801d15c:	683b      	ldr	r3, [r7, #0]
 801d15e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d162:	601a      	str	r2, [r3, #0]
}
 801d164:	bf00      	nop
 801d166:	370c      	adds	r7, #12
 801d168:	46bd      	mov	sp, r7
 801d16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d16e:	4770      	bx	lr

0801d170 <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 801d170:	b580      	push	{r7, lr}
 801d172:	b082      	sub	sp, #8
 801d174:	af00      	add	r7, sp, #0
 801d176:	6078      	str	r0, [r7, #4]
 801d178:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 801d17a:	683b      	ldr	r3, [r7, #0]
 801d17c:	68d8      	ldr	r0, [r3, #12]
 801d17e:	687b      	ldr	r3, [r7, #4]
 801d180:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d184:	461a      	mov	r2, r3
 801d186:	21ff      	movs	r1, #255	@ 0xff
 801d188:	f018 fe32 	bl	8035df0 <memset>
    pcache->block = LFS_BLOCK_NULL;
 801d18c:	683b      	ldr	r3, [r7, #0]
 801d18e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d192:	601a      	str	r2, [r3, #0]
}
 801d194:	bf00      	nop
 801d196:	3708      	adds	r7, #8
 801d198:	46bd      	mov	sp, r7
 801d19a:	bd80      	pop	{r7, pc}

0801d19c <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 801d19c:	b5b0      	push	{r4, r5, r7, lr}
 801d19e:	b08a      	sub	sp, #40	@ 0x28
 801d1a0:	af02      	add	r7, sp, #8
 801d1a2:	60f8      	str	r0, [r7, #12]
 801d1a4:	60b9      	str	r1, [r7, #8]
 801d1a6:	607a      	str	r2, [r7, #4]
 801d1a8:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 801d1aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1ac:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size
 801d1ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d1b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d1b2:	441a      	add	r2, r3
 801d1b4:	68fb      	ldr	r3, [r7, #12]
 801d1b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d1b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d1ba:	429a      	cmp	r2, r3
 801d1bc:	d80a      	bhi.n	801d1d4 <lfs_bd_read+0x38>
            || (lfs->block_count && block >= lfs->block_count)) {
 801d1be:	68fb      	ldr	r3, [r7, #12]
 801d1c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d1c2:	2b00      	cmp	r3, #0
 801d1c4:	f000 8124 	beq.w	801d410 <lfs_bd_read+0x274>
 801d1c8:	68fb      	ldr	r3, [r7, #12]
 801d1ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d1cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801d1ce:	429a      	cmp	r2, r3
 801d1d0:	f0c0 811e 	bcc.w	801d410 <lfs_bd_read+0x274>
        return LFS_ERR_CORRUPT;
 801d1d4:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801d1d8:	e11f      	b.n	801d41a <lfs_bd_read+0x27e>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 801d1da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d1dc:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 801d1de:	68bb      	ldr	r3, [r7, #8]
 801d1e0:	2b00      	cmp	r3, #0
 801d1e2:	d03f      	beq.n	801d264 <lfs_bd_read+0xc8>
 801d1e4:	68bb      	ldr	r3, [r7, #8]
 801d1e6:	681b      	ldr	r3, [r3, #0]
 801d1e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801d1ea:	429a      	cmp	r2, r3
 801d1ec:	d13a      	bne.n	801d264 <lfs_bd_read+0xc8>
                off < pcache->off + pcache->size) {
 801d1ee:	68bb      	ldr	r3, [r7, #8]
 801d1f0:	685a      	ldr	r2, [r3, #4]
 801d1f2:	68bb      	ldr	r3, [r7, #8]
 801d1f4:	689b      	ldr	r3, [r3, #8]
 801d1f6:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 801d1f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d1fa:	429a      	cmp	r2, r3
 801d1fc:	d232      	bcs.n	801d264 <lfs_bd_read+0xc8>
            if (off >= pcache->off) {
 801d1fe:	68bb      	ldr	r3, [r7, #8]
 801d200:	685b      	ldr	r3, [r3, #4]
 801d202:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d204:	429a      	cmp	r2, r3
 801d206:	d324      	bcc.n	801d252 <lfs_bd_read+0xb6>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 801d208:	68bb      	ldr	r3, [r7, #8]
 801d20a:	689a      	ldr	r2, [r3, #8]
 801d20c:	68bb      	ldr	r3, [r7, #8]
 801d20e:	6859      	ldr	r1, [r3, #4]
 801d210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d212:	1acb      	subs	r3, r1, r3
 801d214:	4413      	add	r3, r2
 801d216:	4619      	mov	r1, r3
 801d218:	69b8      	ldr	r0, [r7, #24]
 801d21a:	f7ff fee4 	bl	801cfe6 <lfs_min>
 801d21e:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 801d220:	68bb      	ldr	r3, [r7, #8]
 801d222:	68da      	ldr	r2, [r3, #12]
 801d224:	68bb      	ldr	r3, [r7, #8]
 801d226:	685b      	ldr	r3, [r3, #4]
 801d228:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801d22a:	1acb      	subs	r3, r1, r3
 801d22c:	4413      	add	r3, r2
 801d22e:	69ba      	ldr	r2, [r7, #24]
 801d230:	4619      	mov	r1, r3
 801d232:	69f8      	ldr	r0, [r7, #28]
 801d234:	f01a f818 	bl	8037268 <memcpy>

                data += diff;
 801d238:	69fa      	ldr	r2, [r7, #28]
 801d23a:	69bb      	ldr	r3, [r7, #24]
 801d23c:	4413      	add	r3, r2
 801d23e:	61fb      	str	r3, [r7, #28]
                off += diff;
 801d240:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d242:	69bb      	ldr	r3, [r7, #24]
 801d244:	4413      	add	r3, r2
 801d246:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 801d248:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801d24a:	69bb      	ldr	r3, [r7, #24]
 801d24c:	1ad3      	subs	r3, r2, r3
 801d24e:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 801d250:	e0de      	b.n	801d410 <lfs_bd_read+0x274>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 801d252:	68bb      	ldr	r3, [r7, #8]
 801d254:	685a      	ldr	r2, [r3, #4]
 801d256:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d258:	1ad3      	subs	r3, r2, r3
 801d25a:	4619      	mov	r1, r3
 801d25c:	69b8      	ldr	r0, [r7, #24]
 801d25e:	f7ff fec2 	bl	801cfe6 <lfs_min>
 801d262:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 801d264:	687b      	ldr	r3, [r7, #4]
 801d266:	681b      	ldr	r3, [r3, #0]
 801d268:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801d26a:	429a      	cmp	r2, r3
 801d26c:	d13a      	bne.n	801d2e4 <lfs_bd_read+0x148>
                off < rcache->off + rcache->size) {
 801d26e:	687b      	ldr	r3, [r7, #4]
 801d270:	685a      	ldr	r2, [r3, #4]
 801d272:	687b      	ldr	r3, [r7, #4]
 801d274:	689b      	ldr	r3, [r3, #8]
 801d276:	4413      	add	r3, r2
        if (block == rcache->block &&
 801d278:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d27a:	429a      	cmp	r2, r3
 801d27c:	d232      	bcs.n	801d2e4 <lfs_bd_read+0x148>
            if (off >= rcache->off) {
 801d27e:	687b      	ldr	r3, [r7, #4]
 801d280:	685b      	ldr	r3, [r3, #4]
 801d282:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d284:	429a      	cmp	r2, r3
 801d286:	d324      	bcc.n	801d2d2 <lfs_bd_read+0x136>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 801d288:	687b      	ldr	r3, [r7, #4]
 801d28a:	689a      	ldr	r2, [r3, #8]
 801d28c:	687b      	ldr	r3, [r7, #4]
 801d28e:	6859      	ldr	r1, [r3, #4]
 801d290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d292:	1acb      	subs	r3, r1, r3
 801d294:	4413      	add	r3, r2
 801d296:	4619      	mov	r1, r3
 801d298:	69b8      	ldr	r0, [r7, #24]
 801d29a:	f7ff fea4 	bl	801cfe6 <lfs_min>
 801d29e:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 801d2a0:	687b      	ldr	r3, [r7, #4]
 801d2a2:	68da      	ldr	r2, [r3, #12]
 801d2a4:	687b      	ldr	r3, [r7, #4]
 801d2a6:	685b      	ldr	r3, [r3, #4]
 801d2a8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801d2aa:	1acb      	subs	r3, r1, r3
 801d2ac:	4413      	add	r3, r2
 801d2ae:	69ba      	ldr	r2, [r7, #24]
 801d2b0:	4619      	mov	r1, r3
 801d2b2:	69f8      	ldr	r0, [r7, #28]
 801d2b4:	f019 ffd8 	bl	8037268 <memcpy>

                data += diff;
 801d2b8:	69fa      	ldr	r2, [r7, #28]
 801d2ba:	69bb      	ldr	r3, [r7, #24]
 801d2bc:	4413      	add	r3, r2
 801d2be:	61fb      	str	r3, [r7, #28]
                off += diff;
 801d2c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d2c2:	69bb      	ldr	r3, [r7, #24]
 801d2c4:	4413      	add	r3, r2
 801d2c6:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 801d2c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801d2ca:	69bb      	ldr	r3, [r7, #24]
 801d2cc:	1ad3      	subs	r3, r2, r3
 801d2ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 801d2d0:	e09e      	b.n	801d410 <lfs_bd_read+0x274>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 801d2d2:	687b      	ldr	r3, [r7, #4]
 801d2d4:	685a      	ldr	r2, [r3, #4]
 801d2d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d2d8:	1ad3      	subs	r3, r2, r3
 801d2da:	4619      	mov	r1, r3
 801d2dc:	69b8      	ldr	r0, [r7, #24]
 801d2de:	f7ff fe82 	bl	801cfe6 <lfs_min>
 801d2e2:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 801d2e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801d2e6:	683b      	ldr	r3, [r7, #0]
 801d2e8:	429a      	cmp	r2, r3
 801d2ea:	d336      	bcc.n	801d35a <lfs_bd_read+0x1be>
 801d2ec:	68fb      	ldr	r3, [r7, #12]
 801d2ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d2f0:	69da      	ldr	r2, [r3, #28]
 801d2f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d2f4:	fbb3 f1f2 	udiv	r1, r3, r2
 801d2f8:	fb01 f202 	mul.w	r2, r1, r2
 801d2fc:	1a9b      	subs	r3, r3, r2
 801d2fe:	2b00      	cmp	r3, #0
 801d300:	d12b      	bne.n	801d35a <lfs_bd_read+0x1be>
                size >= lfs->cfg->read_size) {
 801d302:	68fb      	ldr	r3, [r7, #12]
 801d304:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d306:	69db      	ldr	r3, [r3, #28]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 801d308:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801d30a:	429a      	cmp	r2, r3
 801d30c:	d325      	bcc.n	801d35a <lfs_bd_read+0x1be>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 801d30e:	68fb      	ldr	r3, [r7, #12]
 801d310:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d312:	69db      	ldr	r3, [r3, #28]
 801d314:	4619      	mov	r1, r3
 801d316:	69b8      	ldr	r0, [r7, #24]
 801d318:	f7ff fe75 	bl	801d006 <lfs_aligndown>
 801d31c:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 801d31e:	68fb      	ldr	r3, [r7, #12]
 801d320:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d322:	685c      	ldr	r4, [r3, #4]
 801d324:	68fb      	ldr	r3, [r7, #12]
 801d326:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801d328:	69bb      	ldr	r3, [r7, #24]
 801d32a:	9300      	str	r3, [sp, #0]
 801d32c:	69fb      	ldr	r3, [r7, #28]
 801d32e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d330:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801d332:	47a0      	blx	r4
 801d334:	6178      	str	r0, [r7, #20]
            if (err) {
 801d336:	697b      	ldr	r3, [r7, #20]
 801d338:	2b00      	cmp	r3, #0
 801d33a:	d001      	beq.n	801d340 <lfs_bd_read+0x1a4>
                return err;
 801d33c:	697b      	ldr	r3, [r7, #20]
 801d33e:	e06c      	b.n	801d41a <lfs_bd_read+0x27e>
            }

            data += diff;
 801d340:	69fa      	ldr	r2, [r7, #28]
 801d342:	69bb      	ldr	r3, [r7, #24]
 801d344:	4413      	add	r3, r2
 801d346:	61fb      	str	r3, [r7, #28]
            off += diff;
 801d348:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d34a:	69bb      	ldr	r3, [r7, #24]
 801d34c:	4413      	add	r3, r2
 801d34e:	637b      	str	r3, [r7, #52]	@ 0x34
            size -= diff;
 801d350:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801d352:	69bb      	ldr	r3, [r7, #24]
 801d354:	1ad3      	subs	r3, r2, r3
 801d356:	63fb      	str	r3, [r7, #60]	@ 0x3c
            continue;
 801d358:	e05a      	b.n	801d410 <lfs_bd_read+0x274>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 801d35a:	68fb      	ldr	r3, [r7, #12]
 801d35c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d35e:	2b00      	cmp	r3, #0
 801d360:	d00a      	beq.n	801d378 <lfs_bd_read+0x1dc>
 801d362:	68fb      	ldr	r3, [r7, #12]
 801d364:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d366:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801d368:	429a      	cmp	r2, r3
 801d36a:	d305      	bcc.n	801d378 <lfs_bd_read+0x1dc>
 801d36c:	4b2d      	ldr	r3, [pc, #180]	@ (801d424 <lfs_bd_read+0x288>)
 801d36e:	4a2e      	ldr	r2, [pc, #184]	@ (801d428 <lfs_bd_read+0x28c>)
 801d370:	216b      	movs	r1, #107	@ 0x6b
 801d372:	482e      	ldr	r0, [pc, #184]	@ (801d42c <lfs_bd_read+0x290>)
 801d374:	f015 ffe8 	bl	8033348 <__assert_func>
        rcache->block = block;
 801d378:	687b      	ldr	r3, [r7, #4]
 801d37a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801d37c:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 801d37e:	68fb      	ldr	r3, [r7, #12]
 801d380:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d382:	69db      	ldr	r3, [r3, #28]
 801d384:	4619      	mov	r1, r3
 801d386:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801d388:	f7ff fe3d 	bl	801d006 <lfs_aligndown>
 801d38c:	4602      	mov	r2, r0
 801d38e:	687b      	ldr	r3, [r7, #4]
 801d390:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 801d392:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d394:	683b      	ldr	r3, [r7, #0]
 801d396:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 801d398:	68fb      	ldr	r3, [r7, #12]
 801d39a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d39c:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 801d39e:	4619      	mov	r1, r3
 801d3a0:	4610      	mov	r0, r2
 801d3a2:	f7ff fe45 	bl	801d030 <lfs_alignup>
 801d3a6:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 801d3a8:	68fb      	ldr	r3, [r7, #12]
 801d3aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d3ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                lfs_min(
 801d3ae:	4619      	mov	r1, r3
 801d3b0:	4610      	mov	r0, r2
 801d3b2:	f7ff fe18 	bl	801cfe6 <lfs_min>
 801d3b6:	4602      	mov	r2, r0
                - rcache->off,
 801d3b8:	687b      	ldr	r3, [r7, #4]
 801d3ba:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 801d3bc:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 801d3be:	68fb      	ldr	r3, [r7, #12]
 801d3c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d3c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        rcache->size = lfs_min(
 801d3c4:	4619      	mov	r1, r3
 801d3c6:	4610      	mov	r0, r2
 801d3c8:	f7ff fe0d 	bl	801cfe6 <lfs_min>
 801d3cc:	4602      	mov	r2, r0
 801d3ce:	687b      	ldr	r3, [r7, #4]
 801d3d0:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 801d3d2:	68fb      	ldr	r3, [r7, #12]
 801d3d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d3d6:	685c      	ldr	r4, [r3, #4]
 801d3d8:	68fb      	ldr	r3, [r7, #12]
 801d3da:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801d3dc:	687b      	ldr	r3, [r7, #4]
 801d3de:	6819      	ldr	r1, [r3, #0]
 801d3e0:	687b      	ldr	r3, [r7, #4]
 801d3e2:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 801d3e4:	687b      	ldr	r3, [r7, #4]
 801d3e6:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 801d3e8:	687b      	ldr	r3, [r7, #4]
 801d3ea:	689b      	ldr	r3, [r3, #8]
 801d3ec:	9300      	str	r3, [sp, #0]
 801d3ee:	462b      	mov	r3, r5
 801d3f0:	47a0      	blx	r4
 801d3f2:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 801d3f4:	693b      	ldr	r3, [r7, #16]
 801d3f6:	2b00      	cmp	r3, #0
 801d3f8:	dd05      	ble.n	801d406 <lfs_bd_read+0x26a>
 801d3fa:	4b0d      	ldr	r3, [pc, #52]	@ (801d430 <lfs_bd_read+0x294>)
 801d3fc:	4a0a      	ldr	r2, [pc, #40]	@ (801d428 <lfs_bd_read+0x28c>)
 801d3fe:	2176      	movs	r1, #118	@ 0x76
 801d400:	480a      	ldr	r0, [pc, #40]	@ (801d42c <lfs_bd_read+0x290>)
 801d402:	f015 ffa1 	bl	8033348 <__assert_func>
        if (err) {
 801d406:	693b      	ldr	r3, [r7, #16]
 801d408:	2b00      	cmp	r3, #0
 801d40a:	d001      	beq.n	801d410 <lfs_bd_read+0x274>
            return err;
 801d40c:	693b      	ldr	r3, [r7, #16]
 801d40e:	e004      	b.n	801d41a <lfs_bd_read+0x27e>
    while (size > 0) {
 801d410:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d412:	2b00      	cmp	r3, #0
 801d414:	f47f aee1 	bne.w	801d1da <lfs_bd_read+0x3e>
        }
    }

    return 0;
 801d418:	2300      	movs	r3, #0
}
 801d41a:	4618      	mov	r0, r3
 801d41c:	3720      	adds	r7, #32
 801d41e:	46bd      	mov	sp, r7
 801d420:	bdb0      	pop	{r4, r5, r7, pc}
 801d422:	bf00      	nop
 801d424:	080408f0 	.word	0x080408f0
 801d428:	0804435c 	.word	0x0804435c
 801d42c:	08040920 	.word	0x08040920
 801d430:	08040950 	.word	0x08040950

0801d434 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 801d434:	b580      	push	{r7, lr}
 801d436:	b090      	sub	sp, #64	@ 0x40
 801d438:	af04      	add	r7, sp, #16
 801d43a:	60f8      	str	r0, [r7, #12]
 801d43c:	60b9      	str	r1, [r7, #8]
 801d43e:	607a      	str	r2, [r7, #4]
 801d440:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 801d442:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d444:	62bb      	str	r3, [r7, #40]	@ 0x28
    lfs_size_t diff = 0;
 801d446:	2300      	movs	r3, #0
 801d448:	627b      	str	r3, [r7, #36]	@ 0x24

    for (lfs_off_t i = 0; i < size; i += diff) {
 801d44a:	2300      	movs	r3, #0
 801d44c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801d44e:	e039      	b.n	801d4c4 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 801d450:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801d452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d454:	1ad3      	subs	r3, r2, r3
 801d456:	2108      	movs	r1, #8
 801d458:	4618      	mov	r0, r3
 801d45a:	f7ff fdc4 	bl	801cfe6 <lfs_min>
 801d45e:	6278      	str	r0, [r7, #36]	@ 0x24
        int err = lfs_bd_read(lfs,
 801d460:	683a      	ldr	r2, [r7, #0]
 801d462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d464:	1ad1      	subs	r1, r2, r3
 801d466:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801d468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d46a:	4413      	add	r3, r2
 801d46c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d46e:	9203      	str	r2, [sp, #12]
 801d470:	f107 0214 	add.w	r2, r7, #20
 801d474:	9202      	str	r2, [sp, #8]
 801d476:	9301      	str	r3, [sp, #4]
 801d478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d47a:	9300      	str	r3, [sp, #0]
 801d47c:	460b      	mov	r3, r1
 801d47e:	687a      	ldr	r2, [r7, #4]
 801d480:	68b9      	ldr	r1, [r7, #8]
 801d482:	68f8      	ldr	r0, [r7, #12]
 801d484:	f7ff fe8a 	bl	801d19c <lfs_bd_read>
 801d488:	6238      	str	r0, [r7, #32]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 801d48a:	6a3b      	ldr	r3, [r7, #32]
 801d48c:	2b00      	cmp	r3, #0
 801d48e:	d001      	beq.n	801d494 <lfs_bd_cmp+0x60>
            return err;
 801d490:	6a3b      	ldr	r3, [r7, #32]
 801d492:	e01c      	b.n	801d4ce <lfs_bd_cmp+0x9a>
        }

        int res = memcmp(dat, data + i, diff);
 801d494:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d498:	18d1      	adds	r1, r2, r3
 801d49a:	f107 0314 	add.w	r3, r7, #20
 801d49e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d4a0:	4618      	mov	r0, r3
 801d4a2:	f018 fc11 	bl	8035cc8 <memcmp>
 801d4a6:	61f8      	str	r0, [r7, #28]
        if (res) {
 801d4a8:	69fb      	ldr	r3, [r7, #28]
 801d4aa:	2b00      	cmp	r3, #0
 801d4ac:	d006      	beq.n	801d4bc <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 801d4ae:	69fb      	ldr	r3, [r7, #28]
 801d4b0:	2b00      	cmp	r3, #0
 801d4b2:	da01      	bge.n	801d4b8 <lfs_bd_cmp+0x84>
 801d4b4:	2301      	movs	r3, #1
 801d4b6:	e00a      	b.n	801d4ce <lfs_bd_cmp+0x9a>
 801d4b8:	2302      	movs	r3, #2
 801d4ba:	e008      	b.n	801d4ce <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 801d4bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d4be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d4c0:	4413      	add	r3, r2
 801d4c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801d4c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d4c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d4c8:	429a      	cmp	r2, r3
 801d4ca:	d3c1      	bcc.n	801d450 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 801d4cc:	2300      	movs	r3, #0
}
 801d4ce:	4618      	mov	r0, r3
 801d4d0:	3730      	adds	r7, #48	@ 0x30
 801d4d2:	46bd      	mov	sp, r7
 801d4d4:	bd80      	pop	{r7, pc}

0801d4d6 <lfs_bd_crc>:

static int lfs_bd_crc(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 801d4d6:	b580      	push	{r7, lr}
 801d4d8:	b08e      	sub	sp, #56	@ 0x38
 801d4da:	af04      	add	r7, sp, #16
 801d4dc:	60f8      	str	r0, [r7, #12]
 801d4de:	60b9      	str	r1, [r7, #8]
 801d4e0:	607a      	str	r2, [r7, #4]
 801d4e2:	603b      	str	r3, [r7, #0]
    lfs_size_t diff = 0;
 801d4e4:	2300      	movs	r3, #0
 801d4e6:	623b      	str	r3, [r7, #32]

    for (lfs_off_t i = 0; i < size; i += diff) {
 801d4e8:	2300      	movs	r3, #0
 801d4ea:	627b      	str	r3, [r7, #36]	@ 0x24
 801d4ec:	e030      	b.n	801d550 <lfs_bd_crc+0x7a>
        uint8_t dat[8];
        diff = lfs_min(size-i, sizeof(dat));
 801d4ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d4f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d4f2:	1ad3      	subs	r3, r2, r3
 801d4f4:	2108      	movs	r1, #8
 801d4f6:	4618      	mov	r0, r3
 801d4f8:	f7ff fd75 	bl	801cfe6 <lfs_min>
 801d4fc:	6238      	str	r0, [r7, #32]
        int err = lfs_bd_read(lfs,
 801d4fe:	683a      	ldr	r2, [r7, #0]
 801d500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d502:	1ad1      	subs	r1, r2, r3
 801d504:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d508:	4413      	add	r3, r2
 801d50a:	6a3a      	ldr	r2, [r7, #32]
 801d50c:	9203      	str	r2, [sp, #12]
 801d50e:	f107 0214 	add.w	r2, r7, #20
 801d512:	9202      	str	r2, [sp, #8]
 801d514:	9301      	str	r3, [sp, #4]
 801d516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d518:	9300      	str	r3, [sp, #0]
 801d51a:	460b      	mov	r3, r1
 801d51c:	687a      	ldr	r2, [r7, #4]
 801d51e:	68b9      	ldr	r1, [r7, #8]
 801d520:	68f8      	ldr	r0, [r7, #12]
 801d522:	f7ff fe3b 	bl	801d19c <lfs_bd_read>
 801d526:	61f8      	str	r0, [r7, #28]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 801d528:	69fb      	ldr	r3, [r7, #28]
 801d52a:	2b00      	cmp	r3, #0
 801d52c:	d001      	beq.n	801d532 <lfs_bd_crc+0x5c>
            return err;
 801d52e:	69fb      	ldr	r3, [r7, #28]
 801d530:	e013      	b.n	801d55a <lfs_bd_crc+0x84>
        }

        *crc = lfs_crc(*crc, &dat, diff);
 801d532:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d534:	681b      	ldr	r3, [r3, #0]
 801d536:	f107 0114 	add.w	r1, r7, #20
 801d53a:	6a3a      	ldr	r2, [r7, #32]
 801d53c:	4618      	mov	r0, r3
 801d53e:	f007 fc49 	bl	8024dd4 <lfs_crc>
 801d542:	4602      	mov	r2, r0
 801d544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d546:	601a      	str	r2, [r3, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 801d548:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d54a:	6a3b      	ldr	r3, [r7, #32]
 801d54c:	4413      	add	r3, r2
 801d54e:	627b      	str	r3, [r7, #36]	@ 0x24
 801d550:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d554:	429a      	cmp	r2, r3
 801d556:	d3ca      	bcc.n	801d4ee <lfs_bd_crc+0x18>
    }

    return 0;
 801d558:	2300      	movs	r3, #0
}
 801d55a:	4618      	mov	r0, r3
 801d55c:	3728      	adds	r7, #40	@ 0x28
 801d55e:	46bd      	mov	sp, r7
 801d560:	bd80      	pop	{r7, pc}
	...

0801d564 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 801d564:	b5b0      	push	{r4, r5, r7, lr}
 801d566:	b08c      	sub	sp, #48	@ 0x30
 801d568:	af04      	add	r7, sp, #16
 801d56a:	60f8      	str	r0, [r7, #12]
 801d56c:	60b9      	str	r1, [r7, #8]
 801d56e:	607a      	str	r2, [r7, #4]
 801d570:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 801d572:	68bb      	ldr	r3, [r7, #8]
 801d574:	681b      	ldr	r3, [r3, #0]
 801d576:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801d57a:	d060      	beq.n	801d63e <lfs_bd_flush+0xda>
 801d57c:	68bb      	ldr	r3, [r7, #8]
 801d57e:	681b      	ldr	r3, [r3, #0]
 801d580:	f113 0f02 	cmn.w	r3, #2
 801d584:	d05b      	beq.n	801d63e <lfs_bd_flush+0xda>
        LFS_ASSERT(pcache->block < lfs->block_count);
 801d586:	68bb      	ldr	r3, [r7, #8]
 801d588:	681a      	ldr	r2, [r3, #0]
 801d58a:	68fb      	ldr	r3, [r7, #12]
 801d58c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d58e:	429a      	cmp	r2, r3
 801d590:	d305      	bcc.n	801d59e <lfs_bd_flush+0x3a>
 801d592:	4b2d      	ldr	r3, [pc, #180]	@ (801d648 <lfs_bd_flush+0xe4>)
 801d594:	4a2d      	ldr	r2, [pc, #180]	@ (801d64c <lfs_bd_flush+0xe8>)
 801d596:	21b3      	movs	r1, #179	@ 0xb3
 801d598:	482d      	ldr	r0, [pc, #180]	@ (801d650 <lfs_bd_flush+0xec>)
 801d59a:	f015 fed5 	bl	8033348 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 801d59e:	68bb      	ldr	r3, [r7, #8]
 801d5a0:	689a      	ldr	r2, [r3, #8]
 801d5a2:	68fb      	ldr	r3, [r7, #12]
 801d5a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d5a6:	6a1b      	ldr	r3, [r3, #32]
 801d5a8:	4619      	mov	r1, r3
 801d5aa:	4610      	mov	r0, r2
 801d5ac:	f7ff fd40 	bl	801d030 <lfs_alignup>
 801d5b0:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 801d5b2:	68fb      	ldr	r3, [r7, #12]
 801d5b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d5b6:	689c      	ldr	r4, [r3, #8]
 801d5b8:	68fb      	ldr	r3, [r7, #12]
 801d5ba:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801d5bc:	68bb      	ldr	r3, [r7, #8]
 801d5be:	6819      	ldr	r1, [r3, #0]
 801d5c0:	68bb      	ldr	r3, [r7, #8]
 801d5c2:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 801d5c4:	68bb      	ldr	r3, [r7, #8]
 801d5c6:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 801d5c8:	69fb      	ldr	r3, [r7, #28]
 801d5ca:	9300      	str	r3, [sp, #0]
 801d5cc:	462b      	mov	r3, r5
 801d5ce:	47a0      	blx	r4
 801d5d0:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 801d5d2:	69bb      	ldr	r3, [r7, #24]
 801d5d4:	2b00      	cmp	r3, #0
 801d5d6:	dd05      	ble.n	801d5e4 <lfs_bd_flush+0x80>
 801d5d8:	4b1e      	ldr	r3, [pc, #120]	@ (801d654 <lfs_bd_flush+0xf0>)
 801d5da:	4a1c      	ldr	r2, [pc, #112]	@ (801d64c <lfs_bd_flush+0xe8>)
 801d5dc:	21b7      	movs	r1, #183	@ 0xb7
 801d5de:	481c      	ldr	r0, [pc, #112]	@ (801d650 <lfs_bd_flush+0xec>)
 801d5e0:	f015 feb2 	bl	8033348 <__assert_func>
        if (err) {
 801d5e4:	69bb      	ldr	r3, [r7, #24]
 801d5e6:	2b00      	cmp	r3, #0
 801d5e8:	d001      	beq.n	801d5ee <lfs_bd_flush+0x8a>
            return err;
 801d5ea:	69bb      	ldr	r3, [r7, #24]
 801d5ec:	e028      	b.n	801d640 <lfs_bd_flush+0xdc>
        }

        if (validate) {
 801d5ee:	78fb      	ldrb	r3, [r7, #3]
 801d5f0:	2b00      	cmp	r3, #0
 801d5f2:	d020      	beq.n	801d636 <lfs_bd_flush+0xd2>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 801d5f4:	6879      	ldr	r1, [r7, #4]
 801d5f6:	68f8      	ldr	r0, [r7, #12]
 801d5f8:	f7ff fdab 	bl	801d152 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 801d5fc:	68bb      	ldr	r3, [r7, #8]
 801d5fe:	681b      	ldr	r3, [r3, #0]
 801d600:	68ba      	ldr	r2, [r7, #8]
 801d602:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 801d604:	68b9      	ldr	r1, [r7, #8]
 801d606:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 801d608:	69f8      	ldr	r0, [r7, #28]
 801d60a:	9003      	str	r0, [sp, #12]
 801d60c:	9102      	str	r1, [sp, #8]
 801d60e:	9201      	str	r2, [sp, #4]
 801d610:	9300      	str	r3, [sp, #0]
 801d612:	69fb      	ldr	r3, [r7, #28]
 801d614:	687a      	ldr	r2, [r7, #4]
 801d616:	2100      	movs	r1, #0
 801d618:	68f8      	ldr	r0, [r7, #12]
 801d61a:	f7ff ff0b 	bl	801d434 <lfs_bd_cmp>
 801d61e:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 801d620:	697b      	ldr	r3, [r7, #20]
 801d622:	2b00      	cmp	r3, #0
 801d624:	da01      	bge.n	801d62a <lfs_bd_flush+0xc6>
                return res;
 801d626:	697b      	ldr	r3, [r7, #20]
 801d628:	e00a      	b.n	801d640 <lfs_bd_flush+0xdc>
            }

            if (res != LFS_CMP_EQ) {
 801d62a:	697b      	ldr	r3, [r7, #20]
 801d62c:	2b00      	cmp	r3, #0
 801d62e:	d002      	beq.n	801d636 <lfs_bd_flush+0xd2>
                return LFS_ERR_CORRUPT;
 801d630:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801d634:	e004      	b.n	801d640 <lfs_bd_flush+0xdc>
            }
        }

        lfs_cache_zero(lfs, pcache);
 801d636:	68b9      	ldr	r1, [r7, #8]
 801d638:	68f8      	ldr	r0, [r7, #12]
 801d63a:	f7ff fd99 	bl	801d170 <lfs_cache_zero>
    }

    return 0;
 801d63e:	2300      	movs	r3, #0
}
 801d640:	4618      	mov	r0, r3
 801d642:	3720      	adds	r7, #32
 801d644:	46bd      	mov	sp, r7
 801d646:	bdb0      	pop	{r4, r5, r7, pc}
 801d648:	0804095c 	.word	0x0804095c
 801d64c:	08044368 	.word	0x08044368
 801d650:	08040920 	.word	0x08040920
 801d654:	08040950 	.word	0x08040950

0801d658 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 801d658:	b580      	push	{r7, lr}
 801d65a:	b086      	sub	sp, #24
 801d65c:	af00      	add	r7, sp, #0
 801d65e:	60f8      	str	r0, [r7, #12]
 801d660:	60b9      	str	r1, [r7, #8]
 801d662:	607a      	str	r2, [r7, #4]
 801d664:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 801d666:	6879      	ldr	r1, [r7, #4]
 801d668:	68f8      	ldr	r0, [r7, #12]
 801d66a:	f7ff fd72 	bl	801d152 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 801d66e:	78fb      	ldrb	r3, [r7, #3]
 801d670:	687a      	ldr	r2, [r7, #4]
 801d672:	68b9      	ldr	r1, [r7, #8]
 801d674:	68f8      	ldr	r0, [r7, #12]
 801d676:	f7ff ff75 	bl	801d564 <lfs_bd_flush>
 801d67a:	6178      	str	r0, [r7, #20]
    if (err) {
 801d67c:	697b      	ldr	r3, [r7, #20]
 801d67e:	2b00      	cmp	r3, #0
 801d680:	d001      	beq.n	801d686 <lfs_bd_sync+0x2e>
        return err;
 801d682:	697b      	ldr	r3, [r7, #20]
 801d684:	e011      	b.n	801d6aa <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 801d686:	68fb      	ldr	r3, [r7, #12]
 801d688:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d68a:	691b      	ldr	r3, [r3, #16]
 801d68c:	68fa      	ldr	r2, [r7, #12]
 801d68e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801d690:	4610      	mov	r0, r2
 801d692:	4798      	blx	r3
 801d694:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 801d696:	697b      	ldr	r3, [r7, #20]
 801d698:	2b00      	cmp	r3, #0
 801d69a:	dd05      	ble.n	801d6a8 <lfs_bd_sync+0x50>
 801d69c:	4b05      	ldr	r3, [pc, #20]	@ (801d6b4 <lfs_bd_sync+0x5c>)
 801d69e:	4a06      	ldr	r2, [pc, #24]	@ (801d6b8 <lfs_bd_sync+0x60>)
 801d6a0:	21dd      	movs	r1, #221	@ 0xdd
 801d6a2:	4806      	ldr	r0, [pc, #24]	@ (801d6bc <lfs_bd_sync+0x64>)
 801d6a4:	f015 fe50 	bl	8033348 <__assert_func>
    return err;
 801d6a8:	697b      	ldr	r3, [r7, #20]
}
 801d6aa:	4618      	mov	r0, r3
 801d6ac:	3718      	adds	r7, #24
 801d6ae:	46bd      	mov	sp, r7
 801d6b0:	bd80      	pop	{r7, pc}
 801d6b2:	bf00      	nop
 801d6b4:	08040950 	.word	0x08040950
 801d6b8:	08044378 	.word	0x08044378
 801d6bc:	08040920 	.word	0x08040920

0801d6c0 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 801d6c0:	b580      	push	{r7, lr}
 801d6c2:	b088      	sub	sp, #32
 801d6c4:	af00      	add	r7, sp, #0
 801d6c6:	60f8      	str	r0, [r7, #12]
 801d6c8:	60b9      	str	r1, [r7, #8]
 801d6ca:	607a      	str	r2, [r7, #4]
 801d6cc:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 801d6ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d6d0:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 801d6d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d6d4:	f113 0f02 	cmn.w	r3, #2
 801d6d8:	d00a      	beq.n	801d6f0 <lfs_bd_prog+0x30>
 801d6da:	68fb      	ldr	r3, [r7, #12]
 801d6dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d6de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d6e0:	429a      	cmp	r2, r3
 801d6e2:	d305      	bcc.n	801d6f0 <lfs_bd_prog+0x30>
 801d6e4:	4b48      	ldr	r3, [pc, #288]	@ (801d808 <lfs_bd_prog+0x148>)
 801d6e6:	4a49      	ldr	r2, [pc, #292]	@ (801d80c <lfs_bd_prog+0x14c>)
 801d6e8:	21e8      	movs	r1, #232	@ 0xe8
 801d6ea:	4849      	ldr	r0, [pc, #292]	@ (801d810 <lfs_bd_prog+0x150>)
 801d6ec:	f015 fe2c 	bl	8033348 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 801d6f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d6f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d6f4:	441a      	add	r2, r3
 801d6f6:	68fb      	ldr	r3, [r7, #12]
 801d6f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d6fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d6fc:	429a      	cmp	r2, r3
 801d6fe:	d97a      	bls.n	801d7f6 <lfs_bd_prog+0x136>
 801d700:	4b44      	ldr	r3, [pc, #272]	@ (801d814 <lfs_bd_prog+0x154>)
 801d702:	4a42      	ldr	r2, [pc, #264]	@ (801d80c <lfs_bd_prog+0x14c>)
 801d704:	21e9      	movs	r1, #233	@ 0xe9
 801d706:	4842      	ldr	r0, [pc, #264]	@ (801d810 <lfs_bd_prog+0x150>)
 801d708:	f015 fe1e 	bl	8033348 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 801d70c:	68bb      	ldr	r3, [r7, #8]
 801d70e:	681b      	ldr	r3, [r3, #0]
 801d710:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d712:	429a      	cmp	r2, r3
 801d714:	d151      	bne.n	801d7ba <lfs_bd_prog+0xfa>
                off >= pcache->off &&
 801d716:	68bb      	ldr	r3, [r7, #8]
 801d718:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 801d71a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d71c:	429a      	cmp	r2, r3
 801d71e:	d34c      	bcc.n	801d7ba <lfs_bd_prog+0xfa>
                off < pcache->off + lfs->cfg->cache_size) {
 801d720:	68bb      	ldr	r3, [r7, #8]
 801d722:	685a      	ldr	r2, [r3, #4]
 801d724:	68fb      	ldr	r3, [r7, #12]
 801d726:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d72a:	4413      	add	r3, r2
                off >= pcache->off &&
 801d72c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d72e:	429a      	cmp	r2, r3
 801d730:	d243      	bcs.n	801d7ba <lfs_bd_prog+0xfa>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 801d732:	68fb      	ldr	r3, [r7, #12]
 801d734:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d736:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801d738:	68bb      	ldr	r3, [r7, #8]
 801d73a:	6859      	ldr	r1, [r3, #4]
 801d73c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d73e:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 801d740:	4413      	add	r3, r2
 801d742:	4619      	mov	r1, r3
 801d744:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801d746:	f7ff fc4e 	bl	801cfe6 <lfs_min>
 801d74a:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 801d74c:	68bb      	ldr	r3, [r7, #8]
 801d74e:	68da      	ldr	r2, [r3, #12]
 801d750:	68bb      	ldr	r3, [r7, #8]
 801d752:	685b      	ldr	r3, [r3, #4]
 801d754:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801d756:	1acb      	subs	r3, r1, r3
 801d758:	4413      	add	r3, r2
 801d75a:	69ba      	ldr	r2, [r7, #24]
 801d75c:	69f9      	ldr	r1, [r7, #28]
 801d75e:	4618      	mov	r0, r3
 801d760:	f019 fd82 	bl	8037268 <memcpy>

            data += diff;
 801d764:	69fa      	ldr	r2, [r7, #28]
 801d766:	69bb      	ldr	r3, [r7, #24]
 801d768:	4413      	add	r3, r2
 801d76a:	61fb      	str	r3, [r7, #28]
            off += diff;
 801d76c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d76e:	69bb      	ldr	r3, [r7, #24]
 801d770:	4413      	add	r3, r2
 801d772:	62fb      	str	r3, [r7, #44]	@ 0x2c
            size -= diff;
 801d774:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d776:	69bb      	ldr	r3, [r7, #24]
 801d778:	1ad3      	subs	r3, r2, r3
 801d77a:	637b      	str	r3, [r7, #52]	@ 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 801d77c:	68bb      	ldr	r3, [r7, #8]
 801d77e:	6898      	ldr	r0, [r3, #8]
 801d780:	68bb      	ldr	r3, [r7, #8]
 801d782:	685b      	ldr	r3, [r3, #4]
 801d784:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d786:	1ad3      	subs	r3, r2, r3
 801d788:	4619      	mov	r1, r3
 801d78a:	f7ff fc1c 	bl	801cfc6 <lfs_max>
 801d78e:	4602      	mov	r2, r0
 801d790:	68bb      	ldr	r3, [r7, #8]
 801d792:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 801d794:	68bb      	ldr	r3, [r7, #8]
 801d796:	689a      	ldr	r2, [r3, #8]
 801d798:	68fb      	ldr	r3, [r7, #12]
 801d79a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d79c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d79e:	429a      	cmp	r2, r3
 801d7a0:	d128      	bne.n	801d7f4 <lfs_bd_prog+0x134>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 801d7a2:	78fb      	ldrb	r3, [r7, #3]
 801d7a4:	687a      	ldr	r2, [r7, #4]
 801d7a6:	68b9      	ldr	r1, [r7, #8]
 801d7a8:	68f8      	ldr	r0, [r7, #12]
 801d7aa:	f7ff fedb 	bl	801d564 <lfs_bd_flush>
 801d7ae:	6178      	str	r0, [r7, #20]
                if (err) {
 801d7b0:	697b      	ldr	r3, [r7, #20]
 801d7b2:	2b00      	cmp	r3, #0
 801d7b4:	d01e      	beq.n	801d7f4 <lfs_bd_prog+0x134>
                    return err;
 801d7b6:	697b      	ldr	r3, [r7, #20]
 801d7b8:	e021      	b.n	801d7fe <lfs_bd_prog+0x13e>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 801d7ba:	68bb      	ldr	r3, [r7, #8]
 801d7bc:	681b      	ldr	r3, [r3, #0]
 801d7be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801d7c2:	d006      	beq.n	801d7d2 <lfs_bd_prog+0x112>
 801d7c4:	4b14      	ldr	r3, [pc, #80]	@ (801d818 <lfs_bd_prog+0x158>)
 801d7c6:	4a11      	ldr	r2, [pc, #68]	@ (801d80c <lfs_bd_prog+0x14c>)
 801d7c8:	f44f 7183 	mov.w	r1, #262	@ 0x106
 801d7cc:	4810      	ldr	r0, [pc, #64]	@ (801d810 <lfs_bd_prog+0x150>)
 801d7ce:	f015 fdbb 	bl	8033348 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 801d7d2:	68bb      	ldr	r3, [r7, #8]
 801d7d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d7d6:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 801d7d8:	68fb      	ldr	r3, [r7, #12]
 801d7da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d7dc:	6a1b      	ldr	r3, [r3, #32]
 801d7de:	4619      	mov	r1, r3
 801d7e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801d7e2:	f7ff fc10 	bl	801d006 <lfs_aligndown>
 801d7e6:	4602      	mov	r2, r0
 801d7e8:	68bb      	ldr	r3, [r7, #8]
 801d7ea:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 801d7ec:	68bb      	ldr	r3, [r7, #8]
 801d7ee:	2200      	movs	r2, #0
 801d7f0:	609a      	str	r2, [r3, #8]
 801d7f2:	e000      	b.n	801d7f6 <lfs_bd_prog+0x136>
            continue;
 801d7f4:	bf00      	nop
    while (size > 0) {
 801d7f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d7f8:	2b00      	cmp	r3, #0
 801d7fa:	d187      	bne.n	801d70c <lfs_bd_prog+0x4c>
    }

    return 0;
 801d7fc:	2300      	movs	r3, #0
}
 801d7fe:	4618      	mov	r0, r3
 801d800:	3720      	adds	r7, #32
 801d802:	46bd      	mov	sp, r7
 801d804:	bd80      	pop	{r7, pc}
 801d806:	bf00      	nop
 801d808:	08040980 	.word	0x08040980
 801d80c:	08044384 	.word	0x08044384
 801d810:	08040920 	.word	0x08040920
 801d814:	080409b8 	.word	0x080409b8
 801d818:	080409dc 	.word	0x080409dc

0801d81c <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 801d81c:	b580      	push	{r7, lr}
 801d81e:	b084      	sub	sp, #16
 801d820:	af00      	add	r7, sp, #0
 801d822:	6078      	str	r0, [r7, #4]
 801d824:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->block_count);
 801d826:	687b      	ldr	r3, [r7, #4]
 801d828:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d82a:	683a      	ldr	r2, [r7, #0]
 801d82c:	429a      	cmp	r2, r3
 801d82e:	d306      	bcc.n	801d83e <lfs_bd_erase+0x22>
 801d830:	4b0f      	ldr	r3, [pc, #60]	@ (801d870 <lfs_bd_erase+0x54>)
 801d832:	4a10      	ldr	r2, [pc, #64]	@ (801d874 <lfs_bd_erase+0x58>)
 801d834:	f44f 718a 	mov.w	r1, #276	@ 0x114
 801d838:	480f      	ldr	r0, [pc, #60]	@ (801d878 <lfs_bd_erase+0x5c>)
 801d83a:	f015 fd85 	bl	8033348 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 801d83e:	687b      	ldr	r3, [r7, #4]
 801d840:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d842:	68db      	ldr	r3, [r3, #12]
 801d844:	687a      	ldr	r2, [r7, #4]
 801d846:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801d848:	6839      	ldr	r1, [r7, #0]
 801d84a:	4610      	mov	r0, r2
 801d84c:	4798      	blx	r3
 801d84e:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 801d850:	68fb      	ldr	r3, [r7, #12]
 801d852:	2b00      	cmp	r3, #0
 801d854:	dd06      	ble.n	801d864 <lfs_bd_erase+0x48>
 801d856:	4b09      	ldr	r3, [pc, #36]	@ (801d87c <lfs_bd_erase+0x60>)
 801d858:	4a06      	ldr	r2, [pc, #24]	@ (801d874 <lfs_bd_erase+0x58>)
 801d85a:	f44f 718b 	mov.w	r1, #278	@ 0x116
 801d85e:	4806      	ldr	r0, [pc, #24]	@ (801d878 <lfs_bd_erase+0x5c>)
 801d860:	f015 fd72 	bl	8033348 <__assert_func>
    return err;
 801d864:	68fb      	ldr	r3, [r7, #12]
}
 801d866:	4618      	mov	r0, r3
 801d868:	3710      	adds	r7, #16
 801d86a:	46bd      	mov	sp, r7
 801d86c:	bd80      	pop	{r7, pc}
 801d86e:	bf00      	nop
 801d870:	08040a00 	.word	0x08040a00
 801d874:	08044390 	.word	0x08044390
 801d878:	08040920 	.word	0x08040920
 801d87c:	08040950 	.word	0x08040950

0801d880 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 801d880:	b480      	push	{r7}
 801d882:	b085      	sub	sp, #20
 801d884:	af00      	add	r7, sp, #0
 801d886:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 801d888:	687b      	ldr	r3, [r7, #4]
 801d88a:	681b      	ldr	r3, [r3, #0]
 801d88c:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 801d88e:	687b      	ldr	r3, [r7, #4]
 801d890:	685a      	ldr	r2, [r3, #4]
 801d892:	687b      	ldr	r3, [r7, #4]
 801d894:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 801d896:	687b      	ldr	r3, [r7, #4]
 801d898:	3304      	adds	r3, #4
 801d89a:	68fa      	ldr	r2, [r7, #12]
 801d89c:	601a      	str	r2, [r3, #0]
}
 801d89e:	bf00      	nop
 801d8a0:	3714      	adds	r7, #20
 801d8a2:	46bd      	mov	sp, r7
 801d8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8a8:	4770      	bx	lr

0801d8aa <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 801d8aa:	b480      	push	{r7}
 801d8ac:	b083      	sub	sp, #12
 801d8ae:	af00      	add	r7, sp, #0
 801d8b0:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801d8b2:	687b      	ldr	r3, [r7, #4]
 801d8b4:	681b      	ldr	r3, [r3, #0]
 801d8b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801d8ba:	d005      	beq.n	801d8c8 <lfs_pair_isnull+0x1e>
 801d8bc:	687b      	ldr	r3, [r7, #4]
 801d8be:	3304      	adds	r3, #4
 801d8c0:	681b      	ldr	r3, [r3, #0]
 801d8c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801d8c6:	d101      	bne.n	801d8cc <lfs_pair_isnull+0x22>
 801d8c8:	2301      	movs	r3, #1
 801d8ca:	e000      	b.n	801d8ce <lfs_pair_isnull+0x24>
 801d8cc:	2300      	movs	r3, #0
 801d8ce:	f003 0301 	and.w	r3, r3, #1
 801d8d2:	b2db      	uxtb	r3, r3
}
 801d8d4:	4618      	mov	r0, r3
 801d8d6:	370c      	adds	r7, #12
 801d8d8:	46bd      	mov	sp, r7
 801d8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8de:	4770      	bx	lr

0801d8e0 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 801d8e0:	b480      	push	{r7}
 801d8e2:	b083      	sub	sp, #12
 801d8e4:	af00      	add	r7, sp, #0
 801d8e6:	6078      	str	r0, [r7, #4]
 801d8e8:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801d8ea:	687b      	ldr	r3, [r7, #4]
 801d8ec:	681a      	ldr	r2, [r3, #0]
 801d8ee:	683b      	ldr	r3, [r7, #0]
 801d8f0:	681b      	ldr	r3, [r3, #0]
 801d8f2:	429a      	cmp	r2, r3
 801d8f4:	d017      	beq.n	801d926 <lfs_pair_cmp+0x46>
 801d8f6:	687b      	ldr	r3, [r7, #4]
 801d8f8:	3304      	adds	r3, #4
 801d8fa:	681a      	ldr	r2, [r3, #0]
 801d8fc:	683b      	ldr	r3, [r7, #0]
 801d8fe:	3304      	adds	r3, #4
 801d900:	681b      	ldr	r3, [r3, #0]
 801d902:	429a      	cmp	r2, r3
 801d904:	d00f      	beq.n	801d926 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 801d906:	687b      	ldr	r3, [r7, #4]
 801d908:	681a      	ldr	r2, [r3, #0]
 801d90a:	683b      	ldr	r3, [r7, #0]
 801d90c:	3304      	adds	r3, #4
 801d90e:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801d910:	429a      	cmp	r2, r3
 801d912:	d008      	beq.n	801d926 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 801d914:	687b      	ldr	r3, [r7, #4]
 801d916:	3304      	adds	r3, #4
 801d918:	681a      	ldr	r2, [r3, #0]
 801d91a:	683b      	ldr	r3, [r7, #0]
 801d91c:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801d91e:	429a      	cmp	r2, r3
 801d920:	d001      	beq.n	801d926 <lfs_pair_cmp+0x46>
 801d922:	2301      	movs	r3, #1
 801d924:	e000      	b.n	801d928 <lfs_pair_cmp+0x48>
 801d926:	2300      	movs	r3, #0
}
 801d928:	4618      	mov	r0, r3
 801d92a:	370c      	adds	r7, #12
 801d92c:	46bd      	mov	sp, r7
 801d92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d932:	4770      	bx	lr

0801d934 <lfs_pair_issync>:

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 801d934:	b480      	push	{r7}
 801d936:	b083      	sub	sp, #12
 801d938:	af00      	add	r7, sp, #0
 801d93a:	6078      	str	r0, [r7, #4]
 801d93c:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801d93e:	687b      	ldr	r3, [r7, #4]
 801d940:	681a      	ldr	r2, [r3, #0]
 801d942:	683b      	ldr	r3, [r7, #0]
 801d944:	681b      	ldr	r3, [r3, #0]
 801d946:	429a      	cmp	r2, r3
 801d948:	d107      	bne.n	801d95a <lfs_pair_issync+0x26>
 801d94a:	687b      	ldr	r3, [r7, #4]
 801d94c:	3304      	adds	r3, #4
 801d94e:	681a      	ldr	r2, [r3, #0]
 801d950:	683b      	ldr	r3, [r7, #0]
 801d952:	3304      	adds	r3, #4
 801d954:	681b      	ldr	r3, [r3, #0]
 801d956:	429a      	cmp	r2, r3
 801d958:	d00d      	beq.n	801d976 <lfs_pair_issync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801d95a:	687b      	ldr	r3, [r7, #4]
 801d95c:	681a      	ldr	r2, [r3, #0]
 801d95e:	683b      	ldr	r3, [r7, #0]
 801d960:	3304      	adds	r3, #4
 801d962:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801d964:	429a      	cmp	r2, r3
 801d966:	d108      	bne.n	801d97a <lfs_pair_issync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801d968:	687b      	ldr	r3, [r7, #4]
 801d96a:	3304      	adds	r3, #4
 801d96c:	681a      	ldr	r2, [r3, #0]
 801d96e:	683b      	ldr	r3, [r7, #0]
 801d970:	681b      	ldr	r3, [r3, #0]
 801d972:	429a      	cmp	r2, r3
 801d974:	d101      	bne.n	801d97a <lfs_pair_issync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801d976:	2301      	movs	r3, #1
 801d978:	e000      	b.n	801d97c <lfs_pair_issync+0x48>
 801d97a:	2300      	movs	r3, #0
 801d97c:	f003 0301 	and.w	r3, r3, #1
 801d980:	b2db      	uxtb	r3, r3
}
 801d982:	4618      	mov	r0, r3
 801d984:	370c      	adds	r7, #12
 801d986:	46bd      	mov	sp, r7
 801d988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d98c:	4770      	bx	lr

0801d98e <lfs_pair_fromle32>:

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 801d98e:	b590      	push	{r4, r7, lr}
 801d990:	b083      	sub	sp, #12
 801d992:	af00      	add	r7, sp, #0
 801d994:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 801d996:	687b      	ldr	r3, [r7, #4]
 801d998:	681b      	ldr	r3, [r3, #0]
 801d99a:	4618      	mov	r0, r3
 801d99c:	f7ff fb93 	bl	801d0c6 <lfs_fromle32>
 801d9a0:	4602      	mov	r2, r0
 801d9a2:	687b      	ldr	r3, [r7, #4]
 801d9a4:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 801d9a6:	687b      	ldr	r3, [r7, #4]
 801d9a8:	3304      	adds	r3, #4
 801d9aa:	681a      	ldr	r2, [r3, #0]
 801d9ac:	687b      	ldr	r3, [r7, #4]
 801d9ae:	1d1c      	adds	r4, r3, #4
 801d9b0:	4610      	mov	r0, r2
 801d9b2:	f7ff fb88 	bl	801d0c6 <lfs_fromle32>
 801d9b6:	4603      	mov	r3, r0
 801d9b8:	6023      	str	r3, [r4, #0]
}
 801d9ba:	bf00      	nop
 801d9bc:	370c      	adds	r7, #12
 801d9be:	46bd      	mov	sp, r7
 801d9c0:	bd90      	pop	{r4, r7, pc}

0801d9c2 <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 801d9c2:	b590      	push	{r4, r7, lr}
 801d9c4:	b083      	sub	sp, #12
 801d9c6:	af00      	add	r7, sp, #0
 801d9c8:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 801d9ca:	687b      	ldr	r3, [r7, #4]
 801d9cc:	681b      	ldr	r3, [r3, #0]
 801d9ce:	4618      	mov	r0, r3
 801d9d0:	f7ff fb84 	bl	801d0dc <lfs_tole32>
 801d9d4:	4602      	mov	r2, r0
 801d9d6:	687b      	ldr	r3, [r7, #4]
 801d9d8:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 801d9da:	687b      	ldr	r3, [r7, #4]
 801d9dc:	3304      	adds	r3, #4
 801d9de:	681a      	ldr	r2, [r3, #0]
 801d9e0:	687b      	ldr	r3, [r7, #4]
 801d9e2:	1d1c      	adds	r4, r3, #4
 801d9e4:	4610      	mov	r0, r2
 801d9e6:	f7ff fb79 	bl	801d0dc <lfs_tole32>
 801d9ea:	4603      	mov	r3, r0
 801d9ec:	6023      	str	r3, [r4, #0]
}
 801d9ee:	bf00      	nop
 801d9f0:	370c      	adds	r7, #12
 801d9f2:	46bd      	mov	sp, r7
 801d9f4:	bd90      	pop	{r4, r7, pc}

0801d9f6 <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 801d9f6:	b480      	push	{r7}
 801d9f8:	b083      	sub	sp, #12
 801d9fa:	af00      	add	r7, sp, #0
 801d9fc:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 801d9fe:	687b      	ldr	r3, [r7, #4]
 801da00:	43db      	mvns	r3, r3
 801da02:	0fdb      	lsrs	r3, r3, #31
 801da04:	b2db      	uxtb	r3, r3
}
 801da06:	4618      	mov	r0, r3
 801da08:	370c      	adds	r7, #12
 801da0a:	46bd      	mov	sp, r7
 801da0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da10:	4770      	bx	lr

0801da12 <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 801da12:	b480      	push	{r7}
 801da14:	b083      	sub	sp, #12
 801da16:	af00      	add	r7, sp, #0
 801da18:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 801da1a:	687b      	ldr	r3, [r7, #4]
 801da1c:	059b      	lsls	r3, r3, #22
 801da1e:	159b      	asrs	r3, r3, #22
 801da20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801da24:	bf0c      	ite	eq
 801da26:	2301      	moveq	r3, #1
 801da28:	2300      	movne	r3, #0
 801da2a:	b2db      	uxtb	r3, r3
}
 801da2c:	4618      	mov	r0, r3
 801da2e:	370c      	adds	r7, #12
 801da30:	46bd      	mov	sp, r7
 801da32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da36:	4770      	bx	lr

0801da38 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 801da38:	b480      	push	{r7}
 801da3a:	b083      	sub	sp, #12
 801da3c:	af00      	add	r7, sp, #0
 801da3e:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 801da40:	687b      	ldr	r3, [r7, #4]
 801da42:	0d1b      	lsrs	r3, r3, #20
 801da44:	b29b      	uxth	r3, r3
 801da46:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801da4a:	b29b      	uxth	r3, r3
}
 801da4c:	4618      	mov	r0, r3
 801da4e:	370c      	adds	r7, #12
 801da50:	46bd      	mov	sp, r7
 801da52:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da56:	4770      	bx	lr

0801da58 <lfs_tag_type2>:

static inline uint16_t lfs_tag_type2(lfs_tag_t tag) {
 801da58:	b480      	push	{r7}
 801da5a:	b083      	sub	sp, #12
 801da5c:	af00      	add	r7, sp, #0
 801da5e:	6078      	str	r0, [r7, #4]
    return (tag & 0x78000000) >> 20;
 801da60:	687b      	ldr	r3, [r7, #4]
 801da62:	0d1b      	lsrs	r3, r3, #20
 801da64:	b29b      	uxth	r3, r3
 801da66:	f403 63f0 	and.w	r3, r3, #1920	@ 0x780
 801da6a:	b29b      	uxth	r3, r3
}
 801da6c:	4618      	mov	r0, r3
 801da6e:	370c      	adds	r7, #12
 801da70:	46bd      	mov	sp, r7
 801da72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da76:	4770      	bx	lr

0801da78 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 801da78:	b480      	push	{r7}
 801da7a:	b083      	sub	sp, #12
 801da7c:	af00      	add	r7, sp, #0
 801da7e:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 801da80:	687b      	ldr	r3, [r7, #4]
 801da82:	0d1b      	lsrs	r3, r3, #20
 801da84:	b29b      	uxth	r3, r3
 801da86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801da8a:	b29b      	uxth	r3, r3
}
 801da8c:	4618      	mov	r0, r3
 801da8e:	370c      	adds	r7, #12
 801da90:	46bd      	mov	sp, r7
 801da92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da96:	4770      	bx	lr

0801da98 <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 801da98:	b480      	push	{r7}
 801da9a:	b083      	sub	sp, #12
 801da9c:	af00      	add	r7, sp, #0
 801da9e:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 801daa0:	687b      	ldr	r3, [r7, #4]
 801daa2:	0d1b      	lsrs	r3, r3, #20
 801daa4:	b2db      	uxtb	r3, r3
}
 801daa6:	4618      	mov	r0, r3
 801daa8:	370c      	adds	r7, #12
 801daaa:	46bd      	mov	sp, r7
 801daac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dab0:	4770      	bx	lr

0801dab2 <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 801dab2:	b580      	push	{r7, lr}
 801dab4:	b082      	sub	sp, #8
 801dab6:	af00      	add	r7, sp, #0
 801dab8:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 801daba:	6878      	ldr	r0, [r7, #4]
 801dabc:	f7ff ffec 	bl	801da98 <lfs_tag_chunk>
 801dac0:	4603      	mov	r3, r0
 801dac2:	b25b      	sxtb	r3, r3
}
 801dac4:	4618      	mov	r0, r3
 801dac6:	3708      	adds	r7, #8
 801dac8:	46bd      	mov	sp, r7
 801daca:	bd80      	pop	{r7, pc}

0801dacc <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 801dacc:	b480      	push	{r7}
 801dace:	b083      	sub	sp, #12
 801dad0:	af00      	add	r7, sp, #0
 801dad2:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 801dad4:	687b      	ldr	r3, [r7, #4]
 801dad6:	0a9b      	lsrs	r3, r3, #10
 801dad8:	b29b      	uxth	r3, r3
 801dada:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801dade:	b29b      	uxth	r3, r3
}
 801dae0:	4618      	mov	r0, r3
 801dae2:	370c      	adds	r7, #12
 801dae4:	46bd      	mov	sp, r7
 801dae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801daea:	4770      	bx	lr

0801daec <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 801daec:	b480      	push	{r7}
 801daee:	b083      	sub	sp, #12
 801daf0:	af00      	add	r7, sp, #0
 801daf2:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 801daf4:	687b      	ldr	r3, [r7, #4]
 801daf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 801dafa:	4618      	mov	r0, r3
 801dafc:	370c      	adds	r7, #12
 801dafe:	46bd      	mov	sp, r7
 801db00:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db04:	4770      	bx	lr

0801db06 <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 801db06:	b580      	push	{r7, lr}
 801db08:	b082      	sub	sp, #8
 801db0a:	af00      	add	r7, sp, #0
 801db0c:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801db0e:	6878      	ldr	r0, [r7, #4]
 801db10:	f7ff ff7f 	bl	801da12 <lfs_tag_isdelete>
 801db14:	4603      	mov	r3, r0
 801db16:	461a      	mov	r2, r3
 801db18:	687b      	ldr	r3, [r7, #4]
 801db1a:	4413      	add	r3, r2
 801db1c:	4618      	mov	r0, r3
 801db1e:	f7ff ffe5 	bl	801daec <lfs_tag_size>
 801db22:	4603      	mov	r3, r0
 801db24:	3304      	adds	r3, #4
}
 801db26:	4618      	mov	r0, r3
 801db28:	3708      	adds	r7, #8
 801db2a:	46bd      	mov	sp, r7
 801db2c:	bd80      	pop	{r7, pc}

0801db2e <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 801db2e:	b480      	push	{r7}
 801db30:	b085      	sub	sp, #20
 801db32:	af00      	add	r7, sp, #0
 801db34:	6078      	str	r0, [r7, #4]
 801db36:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 801db38:	2300      	movs	r3, #0
 801db3a:	60fb      	str	r3, [r7, #12]
 801db3c:	e012      	b.n	801db64 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 801db3e:	68fb      	ldr	r3, [r7, #12]
 801db40:	009b      	lsls	r3, r3, #2
 801db42:	687a      	ldr	r2, [r7, #4]
 801db44:	4413      	add	r3, r2
 801db46:	6819      	ldr	r1, [r3, #0]
 801db48:	68fb      	ldr	r3, [r7, #12]
 801db4a:	009b      	lsls	r3, r3, #2
 801db4c:	683a      	ldr	r2, [r7, #0]
 801db4e:	4413      	add	r3, r2
 801db50:	681a      	ldr	r2, [r3, #0]
 801db52:	68fb      	ldr	r3, [r7, #12]
 801db54:	009b      	lsls	r3, r3, #2
 801db56:	6878      	ldr	r0, [r7, #4]
 801db58:	4403      	add	r3, r0
 801db5a:	404a      	eors	r2, r1
 801db5c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 801db5e:	68fb      	ldr	r3, [r7, #12]
 801db60:	3301      	adds	r3, #1
 801db62:	60fb      	str	r3, [r7, #12]
 801db64:	68fb      	ldr	r3, [r7, #12]
 801db66:	2b02      	cmp	r3, #2
 801db68:	dde9      	ble.n	801db3e <lfs_gstate_xor+0x10>
    }
}
 801db6a:	bf00      	nop
 801db6c:	bf00      	nop
 801db6e:	3714      	adds	r7, #20
 801db70:	46bd      	mov	sp, r7
 801db72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db76:	4770      	bx	lr

0801db78 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 801db78:	b480      	push	{r7}
 801db7a:	b085      	sub	sp, #20
 801db7c:	af00      	add	r7, sp, #0
 801db7e:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 801db80:	2300      	movs	r3, #0
 801db82:	60fb      	str	r3, [r7, #12]
 801db84:	e00b      	b.n	801db9e <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 801db86:	68fb      	ldr	r3, [r7, #12]
 801db88:	009b      	lsls	r3, r3, #2
 801db8a:	687a      	ldr	r2, [r7, #4]
 801db8c:	4413      	add	r3, r2
 801db8e:	681b      	ldr	r3, [r3, #0]
 801db90:	2b00      	cmp	r3, #0
 801db92:	d001      	beq.n	801db98 <lfs_gstate_iszero+0x20>
            return false;
 801db94:	2300      	movs	r3, #0
 801db96:	e006      	b.n	801dba6 <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 801db98:	68fb      	ldr	r3, [r7, #12]
 801db9a:	3301      	adds	r3, #1
 801db9c:	60fb      	str	r3, [r7, #12]
 801db9e:	68fb      	ldr	r3, [r7, #12]
 801dba0:	2b02      	cmp	r3, #2
 801dba2:	ddf0      	ble.n	801db86 <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 801dba4:	2301      	movs	r3, #1
}
 801dba6:	4618      	mov	r0, r3
 801dba8:	3714      	adds	r7, #20
 801dbaa:	46bd      	mov	sp, r7
 801dbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbb0:	4770      	bx	lr

0801dbb2 <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 801dbb2:	b580      	push	{r7, lr}
 801dbb4:	b082      	sub	sp, #8
 801dbb6:	af00      	add	r7, sp, #0
 801dbb8:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 801dbba:	687b      	ldr	r3, [r7, #4]
 801dbbc:	681b      	ldr	r3, [r3, #0]
 801dbbe:	4618      	mov	r0, r3
 801dbc0:	f7ff ff94 	bl	801daec <lfs_tag_size>
 801dbc4:	4603      	mov	r3, r0
 801dbc6:	2b00      	cmp	r3, #0
 801dbc8:	bf14      	ite	ne
 801dbca:	2301      	movne	r3, #1
 801dbcc:	2300      	moveq	r3, #0
 801dbce:	b2db      	uxtb	r3, r3
}
 801dbd0:	4618      	mov	r0, r3
 801dbd2:	3708      	adds	r7, #8
 801dbd4:	46bd      	mov	sp, r7
 801dbd6:	bd80      	pop	{r7, pc}

0801dbd8 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 801dbd8:	b580      	push	{r7, lr}
 801dbda:	b082      	sub	sp, #8
 801dbdc:	af00      	add	r7, sp, #0
 801dbde:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) & 0x1ff;
 801dbe0:	687b      	ldr	r3, [r7, #4]
 801dbe2:	681b      	ldr	r3, [r3, #0]
 801dbe4:	4618      	mov	r0, r3
 801dbe6:	f7ff ff81 	bl	801daec <lfs_tag_size>
 801dbea:	4603      	mov	r3, r0
 801dbec:	b2db      	uxtb	r3, r3
}
 801dbee:	4618      	mov	r0, r3
 801dbf0:	3708      	adds	r7, #8
 801dbf2:	46bd      	mov	sp, r7
 801dbf4:	bd80      	pop	{r7, pc}

0801dbf6 <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 801dbf6:	b580      	push	{r7, lr}
 801dbf8:	b082      	sub	sp, #8
 801dbfa:	af00      	add	r7, sp, #0
 801dbfc:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 801dbfe:	687b      	ldr	r3, [r7, #4]
 801dc00:	681b      	ldr	r3, [r3, #0]
 801dc02:	4618      	mov	r0, r3
 801dc04:	f7ff ff18 	bl	801da38 <lfs_tag_type1>
 801dc08:	4603      	mov	r3, r0
 801dc0a:	2b00      	cmp	r3, #0
 801dc0c:	bf14      	ite	ne
 801dc0e:	2301      	movne	r3, #1
 801dc10:	2300      	moveq	r3, #0
 801dc12:	b2db      	uxtb	r3, r3
}
 801dc14:	4618      	mov	r0, r3
 801dc16:	3708      	adds	r7, #8
 801dc18:	46bd      	mov	sp, r7
 801dc1a:	bd80      	pop	{r7, pc}

0801dc1c <lfs_gstate_needssuperblock>:
#endif

static inline bool lfs_gstate_needssuperblock(const lfs_gstate_t *a) {
 801dc1c:	b580      	push	{r7, lr}
 801dc1e:	b082      	sub	sp, #8
 801dc20:	af00      	add	r7, sp, #0
 801dc22:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) >> 9;
 801dc24:	687b      	ldr	r3, [r7, #4]
 801dc26:	681b      	ldr	r3, [r3, #0]
 801dc28:	4618      	mov	r0, r3
 801dc2a:	f7ff ff5f 	bl	801daec <lfs_tag_size>
 801dc2e:	4603      	mov	r3, r0
 801dc30:	0a5b      	lsrs	r3, r3, #9
 801dc32:	2b00      	cmp	r3, #0
 801dc34:	bf14      	ite	ne
 801dc36:	2301      	movne	r3, #1
 801dc38:	2300      	moveq	r3, #0
 801dc3a:	b2db      	uxtb	r3, r3
}
 801dc3c:	4618      	mov	r0, r3
 801dc3e:	3708      	adds	r7, #8
 801dc40:	46bd      	mov	sp, r7
 801dc42:	bd80      	pop	{r7, pc}

0801dc44 <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 801dc44:	b580      	push	{r7, lr}
 801dc46:	b082      	sub	sp, #8
 801dc48:	af00      	add	r7, sp, #0
 801dc4a:	6078      	str	r0, [r7, #4]
 801dc4c:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801dc4e:	687b      	ldr	r3, [r7, #4]
 801dc50:	681b      	ldr	r3, [r3, #0]
 801dc52:	4618      	mov	r0, r3
 801dc54:	f7ff fef0 	bl	801da38 <lfs_tag_type1>
 801dc58:	4603      	mov	r3, r0
 801dc5a:	2b00      	cmp	r3, #0
 801dc5c:	d00a      	beq.n	801dc74 <lfs_gstate_hasmovehere+0x30>
 801dc5e:	687b      	ldr	r3, [r7, #4]
 801dc60:	3304      	adds	r3, #4
 801dc62:	6839      	ldr	r1, [r7, #0]
 801dc64:	4618      	mov	r0, r3
 801dc66:	f7ff fe3b 	bl	801d8e0 <lfs_pair_cmp>
 801dc6a:	4603      	mov	r3, r0
 801dc6c:	2b00      	cmp	r3, #0
 801dc6e:	d101      	bne.n	801dc74 <lfs_gstate_hasmovehere+0x30>
 801dc70:	2301      	movs	r3, #1
 801dc72:	e000      	b.n	801dc76 <lfs_gstate_hasmovehere+0x32>
 801dc74:	2300      	movs	r3, #0
 801dc76:	f003 0301 	and.w	r3, r3, #1
 801dc7a:	b2db      	uxtb	r3, r3
}
 801dc7c:	4618      	mov	r0, r3
 801dc7e:	3708      	adds	r7, #8
 801dc80:	46bd      	mov	sp, r7
 801dc82:	bd80      	pop	{r7, pc}

0801dc84 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 801dc84:	b580      	push	{r7, lr}
 801dc86:	b082      	sub	sp, #8
 801dc88:	af00      	add	r7, sp, #0
 801dc8a:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 801dc8c:	687b      	ldr	r3, [r7, #4]
 801dc8e:	681b      	ldr	r3, [r3, #0]
 801dc90:	4618      	mov	r0, r3
 801dc92:	f7ff fa18 	bl	801d0c6 <lfs_fromle32>
 801dc96:	4602      	mov	r2, r0
 801dc98:	687b      	ldr	r3, [r7, #4]
 801dc9a:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 801dc9c:	687b      	ldr	r3, [r7, #4]
 801dc9e:	685b      	ldr	r3, [r3, #4]
 801dca0:	4618      	mov	r0, r3
 801dca2:	f7ff fa10 	bl	801d0c6 <lfs_fromle32>
 801dca6:	4602      	mov	r2, r0
 801dca8:	687b      	ldr	r3, [r7, #4]
 801dcaa:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 801dcac:	687b      	ldr	r3, [r7, #4]
 801dcae:	689b      	ldr	r3, [r3, #8]
 801dcb0:	4618      	mov	r0, r3
 801dcb2:	f7ff fa08 	bl	801d0c6 <lfs_fromle32>
 801dcb6:	4602      	mov	r2, r0
 801dcb8:	687b      	ldr	r3, [r7, #4]
 801dcba:	609a      	str	r2, [r3, #8]
}
 801dcbc:	bf00      	nop
 801dcbe:	3708      	adds	r7, #8
 801dcc0:	46bd      	mov	sp, r7
 801dcc2:	bd80      	pop	{r7, pc}

0801dcc4 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 801dcc4:	b580      	push	{r7, lr}
 801dcc6:	b082      	sub	sp, #8
 801dcc8:	af00      	add	r7, sp, #0
 801dcca:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 801dccc:	687b      	ldr	r3, [r7, #4]
 801dcce:	681b      	ldr	r3, [r3, #0]
 801dcd0:	4618      	mov	r0, r3
 801dcd2:	f7ff fa03 	bl	801d0dc <lfs_tole32>
 801dcd6:	4602      	mov	r2, r0
 801dcd8:	687b      	ldr	r3, [r7, #4]
 801dcda:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 801dcdc:	687b      	ldr	r3, [r7, #4]
 801dcde:	685b      	ldr	r3, [r3, #4]
 801dce0:	4618      	mov	r0, r3
 801dce2:	f7ff f9fb 	bl	801d0dc <lfs_tole32>
 801dce6:	4602      	mov	r2, r0
 801dce8:	687b      	ldr	r3, [r7, #4]
 801dcea:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 801dcec:	687b      	ldr	r3, [r7, #4]
 801dcee:	689b      	ldr	r3, [r3, #8]
 801dcf0:	4618      	mov	r0, r3
 801dcf2:	f7ff f9f3 	bl	801d0dc <lfs_tole32>
 801dcf6:	4602      	mov	r2, r0
 801dcf8:	687b      	ldr	r3, [r7, #4]
 801dcfa:	609a      	str	r2, [r3, #8]
}
 801dcfc:	bf00      	nop
 801dcfe:	3708      	adds	r7, #8
 801dd00:	46bd      	mov	sp, r7
 801dd02:	bd80      	pop	{r7, pc}

0801dd04 <lfs_fcrc_fromle32>:
struct lfs_fcrc {
    lfs_size_t size;
    uint32_t crc;
};

static void lfs_fcrc_fromle32(struct lfs_fcrc *fcrc) {
 801dd04:	b580      	push	{r7, lr}
 801dd06:	b082      	sub	sp, #8
 801dd08:	af00      	add	r7, sp, #0
 801dd0a:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_fromle32(fcrc->size);
 801dd0c:	687b      	ldr	r3, [r7, #4]
 801dd0e:	681b      	ldr	r3, [r3, #0]
 801dd10:	4618      	mov	r0, r3
 801dd12:	f7ff f9d8 	bl	801d0c6 <lfs_fromle32>
 801dd16:	4602      	mov	r2, r0
 801dd18:	687b      	ldr	r3, [r7, #4]
 801dd1a:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_fromle32(fcrc->crc);
 801dd1c:	687b      	ldr	r3, [r7, #4]
 801dd1e:	685b      	ldr	r3, [r3, #4]
 801dd20:	4618      	mov	r0, r3
 801dd22:	f7ff f9d0 	bl	801d0c6 <lfs_fromle32>
 801dd26:	4602      	mov	r2, r0
 801dd28:	687b      	ldr	r3, [r7, #4]
 801dd2a:	605a      	str	r2, [r3, #4]
}
 801dd2c:	bf00      	nop
 801dd2e:	3708      	adds	r7, #8
 801dd30:	46bd      	mov	sp, r7
 801dd32:	bd80      	pop	{r7, pc}

0801dd34 <lfs_fcrc_tole32>:

#ifndef LFS_READONLY
static void lfs_fcrc_tole32(struct lfs_fcrc *fcrc) {
 801dd34:	b580      	push	{r7, lr}
 801dd36:	b082      	sub	sp, #8
 801dd38:	af00      	add	r7, sp, #0
 801dd3a:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_tole32(fcrc->size);
 801dd3c:	687b      	ldr	r3, [r7, #4]
 801dd3e:	681b      	ldr	r3, [r3, #0]
 801dd40:	4618      	mov	r0, r3
 801dd42:	f7ff f9cb 	bl	801d0dc <lfs_tole32>
 801dd46:	4602      	mov	r2, r0
 801dd48:	687b      	ldr	r3, [r7, #4]
 801dd4a:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_tole32(fcrc->crc);
 801dd4c:	687b      	ldr	r3, [r7, #4]
 801dd4e:	685b      	ldr	r3, [r3, #4]
 801dd50:	4618      	mov	r0, r3
 801dd52:	f7ff f9c3 	bl	801d0dc <lfs_tole32>
 801dd56:	4602      	mov	r2, r0
 801dd58:	687b      	ldr	r3, [r7, #4]
 801dd5a:	605a      	str	r2, [r3, #4]
}
 801dd5c:	bf00      	nop
 801dd5e:	3708      	adds	r7, #8
 801dd60:	46bd      	mov	sp, r7
 801dd62:	bd80      	pop	{r7, pc}

0801dd64 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 801dd64:	b580      	push	{r7, lr}
 801dd66:	b082      	sub	sp, #8
 801dd68:	af00      	add	r7, sp, #0
 801dd6a:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 801dd6c:	687b      	ldr	r3, [r7, #4]
 801dd6e:	681b      	ldr	r3, [r3, #0]
 801dd70:	4618      	mov	r0, r3
 801dd72:	f7ff f9a8 	bl	801d0c6 <lfs_fromle32>
 801dd76:	4602      	mov	r2, r0
 801dd78:	687b      	ldr	r3, [r7, #4]
 801dd7a:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 801dd7c:	687b      	ldr	r3, [r7, #4]
 801dd7e:	685b      	ldr	r3, [r3, #4]
 801dd80:	4618      	mov	r0, r3
 801dd82:	f7ff f9a0 	bl	801d0c6 <lfs_fromle32>
 801dd86:	4602      	mov	r2, r0
 801dd88:	687b      	ldr	r3, [r7, #4]
 801dd8a:	605a      	str	r2, [r3, #4]
}
 801dd8c:	bf00      	nop
 801dd8e:	3708      	adds	r7, #8
 801dd90:	46bd      	mov	sp, r7
 801dd92:	bd80      	pop	{r7, pc}

0801dd94 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 801dd94:	b580      	push	{r7, lr}
 801dd96:	b082      	sub	sp, #8
 801dd98:	af00      	add	r7, sp, #0
 801dd9a:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 801dd9c:	687b      	ldr	r3, [r7, #4]
 801dd9e:	681b      	ldr	r3, [r3, #0]
 801dda0:	4618      	mov	r0, r3
 801dda2:	f7ff f99b 	bl	801d0dc <lfs_tole32>
 801dda6:	4602      	mov	r2, r0
 801dda8:	687b      	ldr	r3, [r7, #4]
 801ddaa:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 801ddac:	687b      	ldr	r3, [r7, #4]
 801ddae:	685b      	ldr	r3, [r3, #4]
 801ddb0:	4618      	mov	r0, r3
 801ddb2:	f7ff f993 	bl	801d0dc <lfs_tole32>
 801ddb6:	4602      	mov	r2, r0
 801ddb8:	687b      	ldr	r3, [r7, #4]
 801ddba:	605a      	str	r2, [r3, #4]
}
 801ddbc:	bf00      	nop
 801ddbe:	3708      	adds	r7, #8
 801ddc0:	46bd      	mov	sp, r7
 801ddc2:	bd80      	pop	{r7, pc}

0801ddc4 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 801ddc4:	b580      	push	{r7, lr}
 801ddc6:	b082      	sub	sp, #8
 801ddc8:	af00      	add	r7, sp, #0
 801ddca:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 801ddcc:	687b      	ldr	r3, [r7, #4]
 801ddce:	681b      	ldr	r3, [r3, #0]
 801ddd0:	4618      	mov	r0, r3
 801ddd2:	f7ff f978 	bl	801d0c6 <lfs_fromle32>
 801ddd6:	4602      	mov	r2, r0
 801ddd8:	687b      	ldr	r3, [r7, #4]
 801ddda:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 801dddc:	687b      	ldr	r3, [r7, #4]
 801ddde:	685b      	ldr	r3, [r3, #4]
 801dde0:	4618      	mov	r0, r3
 801dde2:	f7ff f970 	bl	801d0c6 <lfs_fromle32>
 801dde6:	4602      	mov	r2, r0
 801dde8:	687b      	ldr	r3, [r7, #4]
 801ddea:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 801ddec:	687b      	ldr	r3, [r7, #4]
 801ddee:	689b      	ldr	r3, [r3, #8]
 801ddf0:	4618      	mov	r0, r3
 801ddf2:	f7ff f968 	bl	801d0c6 <lfs_fromle32>
 801ddf6:	4602      	mov	r2, r0
 801ddf8:	687b      	ldr	r3, [r7, #4]
 801ddfa:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 801ddfc:	687b      	ldr	r3, [r7, #4]
 801ddfe:	68db      	ldr	r3, [r3, #12]
 801de00:	4618      	mov	r0, r3
 801de02:	f7ff f960 	bl	801d0c6 <lfs_fromle32>
 801de06:	4602      	mov	r2, r0
 801de08:	687b      	ldr	r3, [r7, #4]
 801de0a:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 801de0c:	687b      	ldr	r3, [r7, #4]
 801de0e:	691b      	ldr	r3, [r3, #16]
 801de10:	4618      	mov	r0, r3
 801de12:	f7ff f958 	bl	801d0c6 <lfs_fromle32>
 801de16:	4602      	mov	r2, r0
 801de18:	687b      	ldr	r3, [r7, #4]
 801de1a:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 801de1c:	687b      	ldr	r3, [r7, #4]
 801de1e:	695b      	ldr	r3, [r3, #20]
 801de20:	4618      	mov	r0, r3
 801de22:	f7ff f950 	bl	801d0c6 <lfs_fromle32>
 801de26:	4602      	mov	r2, r0
 801de28:	687b      	ldr	r3, [r7, #4]
 801de2a:	615a      	str	r2, [r3, #20]
}
 801de2c:	bf00      	nop
 801de2e:	3708      	adds	r7, #8
 801de30:	46bd      	mov	sp, r7
 801de32:	bd80      	pop	{r7, pc}

0801de34 <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 801de34:	b580      	push	{r7, lr}
 801de36:	b082      	sub	sp, #8
 801de38:	af00      	add	r7, sp, #0
 801de3a:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 801de3c:	687b      	ldr	r3, [r7, #4]
 801de3e:	681b      	ldr	r3, [r3, #0]
 801de40:	4618      	mov	r0, r3
 801de42:	f7ff f94b 	bl	801d0dc <lfs_tole32>
 801de46:	4602      	mov	r2, r0
 801de48:	687b      	ldr	r3, [r7, #4]
 801de4a:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 801de4c:	687b      	ldr	r3, [r7, #4]
 801de4e:	685b      	ldr	r3, [r3, #4]
 801de50:	4618      	mov	r0, r3
 801de52:	f7ff f943 	bl	801d0dc <lfs_tole32>
 801de56:	4602      	mov	r2, r0
 801de58:	687b      	ldr	r3, [r7, #4]
 801de5a:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 801de5c:	687b      	ldr	r3, [r7, #4]
 801de5e:	689b      	ldr	r3, [r3, #8]
 801de60:	4618      	mov	r0, r3
 801de62:	f7ff f93b 	bl	801d0dc <lfs_tole32>
 801de66:	4602      	mov	r2, r0
 801de68:	687b      	ldr	r3, [r7, #4]
 801de6a:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 801de6c:	687b      	ldr	r3, [r7, #4]
 801de6e:	68db      	ldr	r3, [r3, #12]
 801de70:	4618      	mov	r0, r3
 801de72:	f7ff f933 	bl	801d0dc <lfs_tole32>
 801de76:	4602      	mov	r2, r0
 801de78:	687b      	ldr	r3, [r7, #4]
 801de7a:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 801de7c:	687b      	ldr	r3, [r7, #4]
 801de7e:	691b      	ldr	r3, [r3, #16]
 801de80:	4618      	mov	r0, r3
 801de82:	f7ff f92b 	bl	801d0dc <lfs_tole32>
 801de86:	4602      	mov	r2, r0
 801de88:	687b      	ldr	r3, [r7, #4]
 801de8a:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 801de8c:	687b      	ldr	r3, [r7, #4]
 801de8e:	695b      	ldr	r3, [r3, #20]
 801de90:	4618      	mov	r0, r3
 801de92:	f7ff f923 	bl	801d0dc <lfs_tole32>
 801de96:	4602      	mov	r2, r0
 801de98:	687b      	ldr	r3, [r7, #4]
 801de9a:	615a      	str	r2, [r3, #20]
}
 801de9c:	bf00      	nop
 801de9e:	3708      	adds	r7, #8
 801dea0:	46bd      	mov	sp, r7
 801dea2:	bd80      	pop	{r7, pc}

0801dea4 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 801dea4:	b480      	push	{r7}
 801dea6:	b085      	sub	sp, #20
 801dea8:	af00      	add	r7, sp, #0
 801deaa:	6078      	str	r0, [r7, #4]
 801deac:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 801deae:	1d3b      	adds	r3, r7, #4
 801deb0:	60fb      	str	r3, [r7, #12]
 801deb2:	e009      	b.n	801dec8 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 801deb4:	68fb      	ldr	r3, [r7, #12]
 801deb6:	681b      	ldr	r3, [r3, #0]
 801deb8:	683a      	ldr	r2, [r7, #0]
 801deba:	429a      	cmp	r2, r3
 801debc:	d101      	bne.n	801dec2 <lfs_mlist_isopen+0x1e>
            return true;
 801debe:	2301      	movs	r3, #1
 801dec0:	e007      	b.n	801ded2 <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 801dec2:	68fb      	ldr	r3, [r7, #12]
 801dec4:	681b      	ldr	r3, [r3, #0]
 801dec6:	60fb      	str	r3, [r7, #12]
 801dec8:	68fb      	ldr	r3, [r7, #12]
 801deca:	681b      	ldr	r3, [r3, #0]
 801decc:	2b00      	cmp	r3, #0
 801dece:	d1f1      	bne.n	801deb4 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 801ded0:	2300      	movs	r3, #0
}
 801ded2:	4618      	mov	r0, r3
 801ded4:	3714      	adds	r7, #20
 801ded6:	46bd      	mov	sp, r7
 801ded8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dedc:	4770      	bx	lr

0801dede <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 801dede:	b480      	push	{r7}
 801dee0:	b085      	sub	sp, #20
 801dee2:	af00      	add	r7, sp, #0
 801dee4:	6078      	str	r0, [r7, #4]
 801dee6:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 801dee8:	687b      	ldr	r3, [r7, #4]
 801deea:	3328      	adds	r3, #40	@ 0x28
 801deec:	60fb      	str	r3, [r7, #12]
 801deee:	e00d      	b.n	801df0c <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 801def0:	68fb      	ldr	r3, [r7, #12]
 801def2:	681b      	ldr	r3, [r3, #0]
 801def4:	683a      	ldr	r2, [r7, #0]
 801def6:	429a      	cmp	r2, r3
 801def8:	d105      	bne.n	801df06 <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 801defa:	68fb      	ldr	r3, [r7, #12]
 801defc:	681b      	ldr	r3, [r3, #0]
 801defe:	681a      	ldr	r2, [r3, #0]
 801df00:	68fb      	ldr	r3, [r7, #12]
 801df02:	601a      	str	r2, [r3, #0]
            break;
 801df04:	e007      	b.n	801df16 <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 801df06:	68fb      	ldr	r3, [r7, #12]
 801df08:	681b      	ldr	r3, [r3, #0]
 801df0a:	60fb      	str	r3, [r7, #12]
 801df0c:	68fb      	ldr	r3, [r7, #12]
 801df0e:	681b      	ldr	r3, [r3, #0]
 801df10:	2b00      	cmp	r3, #0
 801df12:	d1ed      	bne.n	801def0 <lfs_mlist_remove+0x12>
        }
    }
}
 801df14:	bf00      	nop
 801df16:	bf00      	nop
 801df18:	3714      	adds	r7, #20
 801df1a:	46bd      	mov	sp, r7
 801df1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df20:	4770      	bx	lr

0801df22 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 801df22:	b480      	push	{r7}
 801df24:	b083      	sub	sp, #12
 801df26:	af00      	add	r7, sp, #0
 801df28:	6078      	str	r0, [r7, #4]
 801df2a:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 801df2c:	687b      	ldr	r3, [r7, #4]
 801df2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801df30:	683b      	ldr	r3, [r7, #0]
 801df32:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 801df34:	687b      	ldr	r3, [r7, #4]
 801df36:	683a      	ldr	r2, [r7, #0]
 801df38:	629a      	str	r2, [r3, #40]	@ 0x28
}
 801df3a:	bf00      	nop
 801df3c:	370c      	adds	r7, #12
 801df3e:	46bd      	mov	sp, r7
 801df40:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df44:	4770      	bx	lr
	...

0801df48 <lfs_fs_disk_version>:

// some other filesystem operations
static uint32_t lfs_fs_disk_version(lfs_t *lfs) {
 801df48:	b480      	push	{r7}
 801df4a:	b083      	sub	sp, #12
 801df4c:	af00      	add	r7, sp, #0
 801df4e:	6078      	str	r0, [r7, #4]
    if (lfs->cfg->disk_version) {
        return lfs->cfg->disk_version;
    } else
#endif
    {
        return LFS_DISK_VERSION;
 801df50:	4b03      	ldr	r3, [pc, #12]	@ (801df60 <lfs_fs_disk_version+0x18>)
    }
}
 801df52:	4618      	mov	r0, r3
 801df54:	370c      	adds	r7, #12
 801df56:	46bd      	mov	sp, r7
 801df58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df5c:	4770      	bx	lr
 801df5e:	bf00      	nop
 801df60:	00020001 	.word	0x00020001

0801df64 <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 801df64:	b580      	push	{r7, lr}
 801df66:	b082      	sub	sp, #8
 801df68:	af00      	add	r7, sp, #0
 801df6a:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 801df6c:	6878      	ldr	r0, [r7, #4]
 801df6e:	f7ff ffeb 	bl	801df48 <lfs_fs_disk_version>
 801df72:	4603      	mov	r3, r0
 801df74:	0c1b      	lsrs	r3, r3, #16
 801df76:	b29b      	uxth	r3, r3

}
 801df78:	4618      	mov	r0, r3
 801df7a:	3708      	adds	r7, #8
 801df7c:	46bd      	mov	sp, r7
 801df7e:	bd80      	pop	{r7, pc}

0801df80 <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 801df80:	b580      	push	{r7, lr}
 801df82:	b082      	sub	sp, #8
 801df84:	af00      	add	r7, sp, #0
 801df86:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 801df88:	6878      	ldr	r0, [r7, #4]
 801df8a:	f7ff ffdd 	bl	801df48 <lfs_fs_disk_version>
 801df8e:	4603      	mov	r3, r0
 801df90:	b29b      	uxth	r3, r3
}
 801df92:	4618      	mov	r0, r3
 801df94:	3708      	adds	r7, #8
 801df96:	46bd      	mov	sp, r7
 801df98:	bd80      	pop	{r7, pc}

0801df9a <lfs_alloc_ckpoint>:

// allocations should call this when all allocated blocks are committed to
// the filesystem
//
// after a checkpoint, the block allocator may realloc any untracked blocks
static void lfs_alloc_ckpoint(lfs_t *lfs) {
 801df9a:	b480      	push	{r7}
 801df9c:	b083      	sub	sp, #12
 801df9e:	af00      	add	r7, sp, #0
 801dfa0:	6078      	str	r0, [r7, #4]
    lfs->lookahead.ckpoint = lfs->block_count;
 801dfa2:	687b      	ldr	r3, [r7, #4]
 801dfa4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801dfa6:	687b      	ldr	r3, [r7, #4]
 801dfa8:	661a      	str	r2, [r3, #96]	@ 0x60
}
 801dfaa:	bf00      	nop
 801dfac:	370c      	adds	r7, #12
 801dfae:	46bd      	mov	sp, r7
 801dfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dfb4:	4770      	bx	lr

0801dfb6 <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 801dfb6:	b580      	push	{r7, lr}
 801dfb8:	b082      	sub	sp, #8
 801dfba:	af00      	add	r7, sp, #0
 801dfbc:	6078      	str	r0, [r7, #4]
    lfs->lookahead.size = 0;
 801dfbe:	687b      	ldr	r3, [r7, #4]
 801dfc0:	2200      	movs	r2, #0
 801dfc2:	659a      	str	r2, [r3, #88]	@ 0x58
    lfs->lookahead.next = 0;
 801dfc4:	687b      	ldr	r3, [r7, #4]
 801dfc6:	2200      	movs	r2, #0
 801dfc8:	65da      	str	r2, [r3, #92]	@ 0x5c
    lfs_alloc_ckpoint(lfs);
 801dfca:	6878      	ldr	r0, [r7, #4]
 801dfcc:	f7ff ffe5 	bl	801df9a <lfs_alloc_ckpoint>
}
 801dfd0:	bf00      	nop
 801dfd2:	3708      	adds	r7, #8
 801dfd4:	46bd      	mov	sp, r7
 801dfd6:	bd80      	pop	{r7, pc}

0801dfd8 <lfs_alloc_lookahead>:

#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 801dfd8:	b480      	push	{r7}
 801dfda:	b085      	sub	sp, #20
 801dfdc:	af00      	add	r7, sp, #0
 801dfde:	6078      	str	r0, [r7, #4]
 801dfe0:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 801dfe2:	687b      	ldr	r3, [r7, #4]
 801dfe4:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->lookahead.start)
 801dfe6:	68fb      	ldr	r3, [r7, #12]
 801dfe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801dfea:	683a      	ldr	r2, [r7, #0]
 801dfec:	1ad2      	subs	r2, r2, r3
            + lfs->block_count) % lfs->block_count;
 801dfee:	68fb      	ldr	r3, [r7, #12]
 801dff0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801dff2:	4413      	add	r3, r2
 801dff4:	68fa      	ldr	r2, [r7, #12]
 801dff6:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
    lfs_block_t off = ((block - lfs->lookahead.start)
 801dff8:	fbb3 f1f2 	udiv	r1, r3, r2
 801dffc:	fb01 f202 	mul.w	r2, r1, r2
 801e000:	1a9b      	subs	r3, r3, r2
 801e002:	60bb      	str	r3, [r7, #8]

    if (off < lfs->lookahead.size) {
 801e004:	68fb      	ldr	r3, [r7, #12]
 801e006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e008:	68ba      	ldr	r2, [r7, #8]
 801e00a:	429a      	cmp	r2, r3
 801e00c:	d212      	bcs.n	801e034 <lfs_alloc_lookahead+0x5c>
        lfs->lookahead.buffer[off / 8] |= 1U << (off % 8);
 801e00e:	68fb      	ldr	r3, [r7, #12]
 801e010:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 801e012:	68bb      	ldr	r3, [r7, #8]
 801e014:	08db      	lsrs	r3, r3, #3
 801e016:	441a      	add	r2, r3
 801e018:	7811      	ldrb	r1, [r2, #0]
 801e01a:	68ba      	ldr	r2, [r7, #8]
 801e01c:	f002 0207 	and.w	r2, r2, #7
 801e020:	2001      	movs	r0, #1
 801e022:	fa00 f202 	lsl.w	r2, r0, r2
 801e026:	b2d2      	uxtb	r2, r2
 801e028:	68f8      	ldr	r0, [r7, #12]
 801e02a:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801e02c:	4403      	add	r3, r0
 801e02e:	430a      	orrs	r2, r1
 801e030:	b2d2      	uxtb	r2, r2
 801e032:	701a      	strb	r2, [r3, #0]
    }

    return 0;
 801e034:	2300      	movs	r3, #0
}
 801e036:	4618      	mov	r0, r3
 801e038:	3714      	adds	r7, #20
 801e03a:	46bd      	mov	sp, r7
 801e03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e040:	4770      	bx	lr
	...

0801e044 <lfs_alloc_scan>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc_scan(lfs_t *lfs) {
 801e044:	b580      	push	{r7, lr}
 801e046:	b084      	sub	sp, #16
 801e048:	af00      	add	r7, sp, #0
 801e04a:	6078      	str	r0, [r7, #4]
    // move lookahead buffer to the first unused block
    //
    // note we limit the lookahead buffer to at most the amount of blocks
    // checkpointed, this prevents the math in lfs_alloc from underflowing
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 801e04c:	687b      	ldr	r3, [r7, #4]
 801e04e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801e050:	687b      	ldr	r3, [r7, #4]
 801e052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801e054:	4413      	add	r3, r2
            % lfs->block_count;
 801e056:	687a      	ldr	r2, [r7, #4]
 801e058:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 801e05a:	fbb3 f1f2 	udiv	r1, r3, r2
 801e05e:	fb01 f202 	mul.w	r2, r1, r2
 801e062:	1a9a      	subs	r2, r3, r2
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 801e064:	687b      	ldr	r3, [r7, #4]
 801e066:	655a      	str	r2, [r3, #84]	@ 0x54
    lfs->lookahead.next = 0;
 801e068:	687b      	ldr	r3, [r7, #4]
 801e06a:	2200      	movs	r2, #0
 801e06c:	65da      	str	r2, [r3, #92]	@ 0x5c
    lfs->lookahead.size = lfs_min(
            8*lfs->cfg->lookahead_size,
 801e06e:	687b      	ldr	r3, [r7, #4]
 801e070:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801e072:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    lfs->lookahead.size = lfs_min(
 801e074:	00da      	lsls	r2, r3, #3
 801e076:	687b      	ldr	r3, [r7, #4]
 801e078:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e07a:	4619      	mov	r1, r3
 801e07c:	4610      	mov	r0, r2
 801e07e:	f7fe ffb2 	bl	801cfe6 <lfs_min>
 801e082:	4602      	mov	r2, r0
 801e084:	687b      	ldr	r3, [r7, #4]
 801e086:	659a      	str	r2, [r3, #88]	@ 0x58
            lfs->lookahead.ckpoint);

    // find mask of free blocks from tree
    memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 801e088:	687b      	ldr	r3, [r7, #4]
 801e08a:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 801e08c:	687b      	ldr	r3, [r7, #4]
 801e08e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801e090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e092:	461a      	mov	r2, r3
 801e094:	2100      	movs	r1, #0
 801e096:	f017 feab 	bl	8035df0 <memset>
    int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, true);
 801e09a:	2301      	movs	r3, #1
 801e09c:	687a      	ldr	r2, [r7, #4]
 801e09e:	4909      	ldr	r1, [pc, #36]	@ (801e0c4 <lfs_alloc_scan+0x80>)
 801e0a0:	6878      	ldr	r0, [r7, #4]
 801e0a2:	f005 fdc9 	bl	8023c38 <lfs_fs_traverse_>
 801e0a6:	60f8      	str	r0, [r7, #12]
    if (err) {
 801e0a8:	68fb      	ldr	r3, [r7, #12]
 801e0aa:	2b00      	cmp	r3, #0
 801e0ac:	d004      	beq.n	801e0b8 <lfs_alloc_scan+0x74>
        lfs_alloc_drop(lfs);
 801e0ae:	6878      	ldr	r0, [r7, #4]
 801e0b0:	f7ff ff81 	bl	801dfb6 <lfs_alloc_drop>
        return err;
 801e0b4:	68fb      	ldr	r3, [r7, #12]
 801e0b6:	e000      	b.n	801e0ba <lfs_alloc_scan+0x76>
    }

    return 0;
 801e0b8:	2300      	movs	r3, #0
}
 801e0ba:	4618      	mov	r0, r3
 801e0bc:	3710      	adds	r7, #16
 801e0be:	46bd      	mov	sp, r7
 801e0c0:	bd80      	pop	{r7, pc}
 801e0c2:	bf00      	nop
 801e0c4:	0801dfd9 	.word	0x0801dfd9

0801e0c8 <lfs_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 801e0c8:	b580      	push	{r7, lr}
 801e0ca:	b086      	sub	sp, #24
 801e0cc:	af02      	add	r7, sp, #8
 801e0ce:	6078      	str	r0, [r7, #4]
 801e0d0:	6039      	str	r1, [r7, #0]
    while (true) {
        // scan our lookahead buffer for free blocks
        while (lfs->lookahead.next < lfs->lookahead.size) {
 801e0d2:	e04d      	b.n	801e170 <lfs_alloc+0xa8>
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801e0d4:	687b      	ldr	r3, [r7, #4]
 801e0d6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 801e0d8:	687b      	ldr	r3, [r7, #4]
 801e0da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801e0dc:	08db      	lsrs	r3, r3, #3
 801e0de:	4413      	add	r3, r2
 801e0e0:	781b      	ldrb	r3, [r3, #0]
 801e0e2:	461a      	mov	r2, r3
                    & (1U << (lfs->lookahead.next % 8)))) {
 801e0e4:	687b      	ldr	r3, [r7, #4]
 801e0e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801e0e8:	f003 0307 	and.w	r3, r3, #7
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801e0ec:	fa22 f303 	lsr.w	r3, r2, r3
 801e0f0:	f003 0301 	and.w	r3, r3, #1
 801e0f4:	2b00      	cmp	r3, #0
 801e0f6:	d131      	bne.n	801e15c <lfs_alloc+0x94>
                // found a free block
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 801e0f8:	687b      	ldr	r3, [r7, #4]
 801e0fa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801e0fc:	687b      	ldr	r3, [r7, #4]
 801e0fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801e100:	4413      	add	r3, r2
                        % lfs->block_count;
 801e102:	687a      	ldr	r2, [r7, #4]
 801e104:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 801e106:	fbb3 f1f2 	udiv	r1, r3, r2
 801e10a:	fb01 f202 	mul.w	r2, r1, r2
 801e10e:	1a9a      	subs	r2, r3, r2
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 801e110:	683b      	ldr	r3, [r7, #0]
 801e112:	601a      	str	r2, [r3, #0]

                // eagerly find next free block to maximize how many blocks
                // lfs_alloc_ckpoint makes available for scanning
                while (true) {
                    lfs->lookahead.next += 1;
 801e114:	687b      	ldr	r3, [r7, #4]
 801e116:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801e118:	1c5a      	adds	r2, r3, #1
 801e11a:	687b      	ldr	r3, [r7, #4]
 801e11c:	65da      	str	r2, [r3, #92]	@ 0x5c
                    lfs->lookahead.ckpoint -= 1;
 801e11e:	687b      	ldr	r3, [r7, #4]
 801e120:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e122:	1e5a      	subs	r2, r3, #1
 801e124:	687b      	ldr	r3, [r7, #4]
 801e126:	661a      	str	r2, [r3, #96]	@ 0x60

                    if (lfs->lookahead.next >= lfs->lookahead.size
 801e128:	687b      	ldr	r3, [r7, #4]
 801e12a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801e12c:	687b      	ldr	r3, [r7, #4]
 801e12e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e130:	429a      	cmp	r2, r3
 801e132:	d211      	bcs.n	801e158 <lfs_alloc+0x90>
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801e134:	687b      	ldr	r3, [r7, #4]
 801e136:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 801e138:	687b      	ldr	r3, [r7, #4]
 801e13a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801e13c:	08db      	lsrs	r3, r3, #3
 801e13e:	4413      	add	r3, r2
 801e140:	781b      	ldrb	r3, [r3, #0]
 801e142:	461a      	mov	r2, r3
                                & (1U << (lfs->lookahead.next % 8)))) {
 801e144:	687b      	ldr	r3, [r7, #4]
 801e146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801e148:	f003 0307 	and.w	r3, r3, #7
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801e14c:	fa22 f303 	lsr.w	r3, r2, r3
 801e150:	f003 0301 	and.w	r3, r3, #1
 801e154:	2b00      	cmp	r3, #0
 801e156:	d1dd      	bne.n	801e114 <lfs_alloc+0x4c>
                        return 0;
 801e158:	2300      	movs	r3, #0
 801e15a:	e032      	b.n	801e1c2 <lfs_alloc+0xfa>
                    }
                }
            }

            lfs->lookahead.next += 1;
 801e15c:	687b      	ldr	r3, [r7, #4]
 801e15e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801e160:	1c5a      	adds	r2, r3, #1
 801e162:	687b      	ldr	r3, [r7, #4]
 801e164:	65da      	str	r2, [r3, #92]	@ 0x5c
            lfs->lookahead.ckpoint -= 1;
 801e166:	687b      	ldr	r3, [r7, #4]
 801e168:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e16a:	1e5a      	subs	r2, r3, #1
 801e16c:	687b      	ldr	r3, [r7, #4]
 801e16e:	661a      	str	r2, [r3, #96]	@ 0x60
        while (lfs->lookahead.next < lfs->lookahead.size) {
 801e170:	687b      	ldr	r3, [r7, #4]
 801e172:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801e174:	687b      	ldr	r3, [r7, #4]
 801e176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e178:	429a      	cmp	r2, r3
 801e17a:	d3ab      	bcc.n	801e0d4 <lfs_alloc+0xc>
        // allocations with a checkpoint before starting a set of allocations.
        //
        // If we've looked at all blocks since the last checkpoint, we report
        // the filesystem as out of storage.
        //
        if (lfs->lookahead.ckpoint <= 0) {
 801e17c:	687b      	ldr	r3, [r7, #4]
 801e17e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e180:	2b00      	cmp	r3, #0
 801e182:	d116      	bne.n	801e1b2 <lfs_alloc+0xea>
            LFS_ERROR("No more free space 0x%"PRIx32,
 801e184:	687b      	ldr	r3, [r7, #4]
 801e186:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801e188:	687b      	ldr	r3, [r7, #4]
 801e18a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801e18c:	4413      	add	r3, r2
 801e18e:	687a      	ldr	r2, [r7, #4]
 801e190:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 801e192:	fbb3 f1f2 	udiv	r1, r3, r2
 801e196:	fb01 f202 	mul.w	r2, r1, r2
 801e19a:	1a9b      	subs	r3, r3, r2
 801e19c:	4a0b      	ldr	r2, [pc, #44]	@ (801e1cc <lfs_alloc+0x104>)
 801e19e:	9200      	str	r2, [sp, #0]
 801e1a0:	f240 22b1 	movw	r2, #689	@ 0x2b1
 801e1a4:	490a      	ldr	r1, [pc, #40]	@ (801e1d0 <lfs_alloc+0x108>)
 801e1a6:	480b      	ldr	r0, [pc, #44]	@ (801e1d4 <lfs_alloc+0x10c>)
 801e1a8:	f015 f902 	bl	80333b0 <printf>
                    (lfs->lookahead.start + lfs->lookahead.next)
                        % lfs->block_count);
            return LFS_ERR_NOSPC;
 801e1ac:	f06f 031b 	mvn.w	r3, #27
 801e1b0:	e007      	b.n	801e1c2 <lfs_alloc+0xfa>
        }

        // No blocks in our lookahead buffer, we need to scan the filesystem for
        // unused blocks in the next lookahead window.
        int err = lfs_alloc_scan(lfs);
 801e1b2:	6878      	ldr	r0, [r7, #4]
 801e1b4:	f7ff ff46 	bl	801e044 <lfs_alloc_scan>
 801e1b8:	60f8      	str	r0, [r7, #12]
        if(err) {
 801e1ba:	68fb      	ldr	r3, [r7, #12]
 801e1bc:	2b00      	cmp	r3, #0
 801e1be:	d088      	beq.n	801e0d2 <lfs_alloc+0xa>
            return err;
 801e1c0:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 801e1c2:	4618      	mov	r0, r3
 801e1c4:	3710      	adds	r7, #16
 801e1c6:	46bd      	mov	sp, r7
 801e1c8:	bd80      	pop	{r7, pc}
 801e1ca:	bf00      	nop
 801e1cc:	08040a48 	.word	0x08040a48
 801e1d0:	08040920 	.word	0x08040920
 801e1d4:	08040a1c 	.word	0x08040a1c

0801e1d8 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 801e1d8:	b590      	push	{r4, r7, lr}
 801e1da:	b08f      	sub	sp, #60	@ 0x3c
 801e1dc:	af04      	add	r7, sp, #16
 801e1de:	60f8      	str	r0, [r7, #12]
 801e1e0:	60b9      	str	r1, [r7, #8]
 801e1e2:	607a      	str	r2, [r7, #4]
 801e1e4:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 801e1e6:	68bb      	ldr	r3, [r7, #8]
 801e1e8:	68db      	ldr	r3, [r3, #12]
 801e1ea:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_tag_t ntag = dir->etag;
 801e1ec:	68bb      	ldr	r3, [r7, #8]
 801e1ee:	691b      	ldr	r3, [r3, #16]
 801e1f0:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 801e1f2:	2300      	movs	r3, #0
 801e1f4:	623b      	str	r3, [r7, #32]

    // synthetic moves
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 801e1f6:	68fb      	ldr	r3, [r7, #12]
 801e1f8:	333c      	adds	r3, #60	@ 0x3c
 801e1fa:	68ba      	ldr	r2, [r7, #8]
 801e1fc:	4611      	mov	r1, r2
 801e1fe:	4618      	mov	r0, r3
 801e200:	f7ff fd20 	bl	801dc44 <lfs_gstate_hasmovehere>
 801e204:	4603      	mov	r3, r0
 801e206:	2b00      	cmp	r3, #0
 801e208:	f000 80ca 	beq.w	801e3a0 <lfs_dir_getslice+0x1c8>
            lfs_tag_id(gmask) != 0) {
 801e20c:	6878      	ldr	r0, [r7, #4]
 801e20e:	f7ff fc5d 	bl	801dacc <lfs_tag_id>
 801e212:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 801e214:	2b00      	cmp	r3, #0
 801e216:	f000 80c3 	beq.w	801e3a0 <lfs_dir_getslice+0x1c8>
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 801e21a:	68fb      	ldr	r3, [r7, #12]
 801e21c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801e21e:	4618      	mov	r0, r3
 801e220:	f7ff fc54 	bl	801dacc <lfs_tag_id>
 801e224:	4603      	mov	r3, r0
 801e226:	461c      	mov	r4, r3
 801e228:	6838      	ldr	r0, [r7, #0]
 801e22a:	f7ff fc4f 	bl	801dacc <lfs_tag_id>
 801e22e:	4603      	mov	r3, r0
 801e230:	429c      	cmp	r4, r3
 801e232:	d102      	bne.n	801e23a <lfs_dir_getslice+0x62>
            return LFS_ERR_NOENT;
 801e234:	f06f 0301 	mvn.w	r3, #1
 801e238:	e0be      	b.n	801e3b8 <lfs_dir_getslice+0x1e0>
        } else if (lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(gtag)) {
 801e23a:	68fb      	ldr	r3, [r7, #12]
 801e23c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801e23e:	4618      	mov	r0, r3
 801e240:	f7ff fc44 	bl	801dacc <lfs_tag_id>
 801e244:	4603      	mov	r3, r0
 801e246:	461c      	mov	r4, r3
 801e248:	6838      	ldr	r0, [r7, #0]
 801e24a:	f7ff fc3f 	bl	801dacc <lfs_tag_id>
 801e24e:	4603      	mov	r3, r0
 801e250:	429c      	cmp	r4, r3
 801e252:	f080 80a5 	bcs.w	801e3a0 <lfs_dir_getslice+0x1c8>
            gdiff -= LFS_MKTAG(0, 1, 0);
 801e256:	6a3b      	ldr	r3, [r7, #32]
 801e258:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 801e25c:	623b      	str	r3, [r7, #32]
        }
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 801e25e:	e09f      	b.n	801e3a0 <lfs_dir_getslice+0x1c8>
        off -= lfs_tag_dsize(ntag);
 801e260:	693b      	ldr	r3, [r7, #16]
 801e262:	4618      	mov	r0, r3
 801e264:	f7ff fc4f 	bl	801db06 <lfs_tag_dsize>
 801e268:	4602      	mov	r2, r0
 801e26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e26c:	1a9b      	subs	r3, r3, r2
 801e26e:	627b      	str	r3, [r7, #36]	@ 0x24
        lfs_tag_t tag = ntag;
 801e270:	693b      	ldr	r3, [r7, #16]
 801e272:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 801e274:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 801e276:	68bb      	ldr	r3, [r7, #8]
 801e278:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 801e27a:	2204      	movs	r2, #4
 801e27c:	9203      	str	r2, [sp, #12]
 801e27e:	f107 0210 	add.w	r2, r7, #16
 801e282:	9202      	str	r2, [sp, #8]
 801e284:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801e286:	9201      	str	r2, [sp, #4]
 801e288:	9300      	str	r3, [sp, #0]
 801e28a:	2304      	movs	r3, #4
 801e28c:	460a      	mov	r2, r1
 801e28e:	2100      	movs	r1, #0
 801e290:	68f8      	ldr	r0, [r7, #12]
 801e292:	f7fe ff83 	bl	801d19c <lfs_bd_read>
 801e296:	61b8      	str	r0, [r7, #24]
        if (err) {
 801e298:	69bb      	ldr	r3, [r7, #24]
 801e29a:	2b00      	cmp	r3, #0
 801e29c:	d001      	beq.n	801e2a2 <lfs_dir_getslice+0xca>
            return err;
 801e29e:	69bb      	ldr	r3, [r7, #24]
 801e2a0:	e08a      	b.n	801e3b8 <lfs_dir_getslice+0x1e0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 801e2a2:	693b      	ldr	r3, [r7, #16]
 801e2a4:	4618      	mov	r0, r3
 801e2a6:	f7fe ff25 	bl	801d0f4 <lfs_frombe32>
 801e2aa:	4602      	mov	r2, r0
 801e2ac:	69fb      	ldr	r3, [r7, #28]
 801e2ae:	4053      	eors	r3, r2
 801e2b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801e2b4:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 801e2b6:	6878      	ldr	r0, [r7, #4]
 801e2b8:	f7ff fc08 	bl	801dacc <lfs_tag_id>
 801e2bc:	4603      	mov	r3, r0
 801e2be:	2b00      	cmp	r3, #0
 801e2c0:	d02b      	beq.n	801e31a <lfs_dir_getslice+0x142>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 801e2c2:	69f8      	ldr	r0, [r7, #28]
 801e2c4:	f7ff fbb8 	bl	801da38 <lfs_tag_type1>
 801e2c8:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 801e2ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801e2ce:	d124      	bne.n	801e31a <lfs_dir_getslice+0x142>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 801e2d0:	69f8      	ldr	r0, [r7, #28]
 801e2d2:	f7ff fbfb 	bl	801dacc <lfs_tag_id>
 801e2d6:	4603      	mov	r3, r0
 801e2d8:	461c      	mov	r4, r3
 801e2da:	6a3b      	ldr	r3, [r7, #32]
 801e2dc:	683a      	ldr	r2, [r7, #0]
 801e2de:	1ad3      	subs	r3, r2, r3
 801e2e0:	4618      	mov	r0, r3
 801e2e2:	f7ff fbf3 	bl	801dacc <lfs_tag_id>
 801e2e6:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 801e2e8:	429c      	cmp	r4, r3
 801e2ea:	d816      	bhi.n	801e31a <lfs_dir_getslice+0x142>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 801e2ec:	6a3b      	ldr	r3, [r7, #32]
 801e2ee:	683a      	ldr	r2, [r7, #0]
 801e2f0:	1ad2      	subs	r2, r2, r3
 801e2f2:	4b33      	ldr	r3, [pc, #204]	@ (801e3c0 <lfs_dir_getslice+0x1e8>)
 801e2f4:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 801e2f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801e2fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801e2fe:	69fa      	ldr	r2, [r7, #28]
 801e300:	429a      	cmp	r2, r3
 801e302:	d102      	bne.n	801e30a <lfs_dir_getslice+0x132>
                // found where we were created
                return LFS_ERR_NOENT;
 801e304:	f06f 0301 	mvn.w	r3, #1
 801e308:	e056      	b.n	801e3b8 <lfs_dir_getslice+0x1e0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 801e30a:	69f8      	ldr	r0, [r7, #28]
 801e30c:	f7ff fbd1 	bl	801dab2 <lfs_tag_splice>
 801e310:	4603      	mov	r3, r0
 801e312:	029a      	lsls	r2, r3, #10
 801e314:	6a3b      	ldr	r3, [r7, #32]
 801e316:	4413      	add	r3, r2
 801e318:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 801e31a:	687a      	ldr	r2, [r7, #4]
 801e31c:	69fb      	ldr	r3, [r7, #28]
 801e31e:	401a      	ands	r2, r3
 801e320:	6a3b      	ldr	r3, [r7, #32]
 801e322:	6839      	ldr	r1, [r7, #0]
 801e324:	1ac9      	subs	r1, r1, r3
 801e326:	687b      	ldr	r3, [r7, #4]
 801e328:	400b      	ands	r3, r1
 801e32a:	429a      	cmp	r2, r3
 801e32c:	d138      	bne.n	801e3a0 <lfs_dir_getslice+0x1c8>
            if (lfs_tag_isdelete(tag)) {
 801e32e:	69f8      	ldr	r0, [r7, #28]
 801e330:	f7ff fb6f 	bl	801da12 <lfs_tag_isdelete>
 801e334:	4603      	mov	r3, r0
 801e336:	2b00      	cmp	r3, #0
 801e338:	d002      	beq.n	801e340 <lfs_dir_getslice+0x168>
                return LFS_ERR_NOENT;
 801e33a:	f06f 0301 	mvn.w	r3, #1
 801e33e:	e03b      	b.n	801e3b8 <lfs_dir_getslice+0x1e0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 801e340:	69f8      	ldr	r0, [r7, #28]
 801e342:	f7ff fbd3 	bl	801daec <lfs_tag_size>
 801e346:	4603      	mov	r3, r0
 801e348:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801e34a:	4618      	mov	r0, r3
 801e34c:	f7fe fe4b 	bl	801cfe6 <lfs_min>
 801e350:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 801e352:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 801e354:	68bb      	ldr	r3, [r7, #8]
 801e356:	681b      	ldr	r3, [r3, #0]
 801e358:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801e35a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801e35c:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 801e35e:	3204      	adds	r2, #4
 801e360:	6979      	ldr	r1, [r7, #20]
 801e362:	9103      	str	r1, [sp, #12]
 801e364:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801e366:	9102      	str	r1, [sp, #8]
 801e368:	9201      	str	r2, [sp, #4]
 801e36a:	9300      	str	r3, [sp, #0]
 801e36c:	697b      	ldr	r3, [r7, #20]
 801e36e:	4602      	mov	r2, r0
 801e370:	2100      	movs	r1, #0
 801e372:	68f8      	ldr	r0, [r7, #12]
 801e374:	f7fe ff12 	bl	801d19c <lfs_bd_read>
 801e378:	61b8      	str	r0, [r7, #24]
            if (err) {
 801e37a:	69bb      	ldr	r3, [r7, #24]
 801e37c:	2b00      	cmp	r3, #0
 801e37e:	d001      	beq.n	801e384 <lfs_dir_getslice+0x1ac>
                return err;
 801e380:	69bb      	ldr	r3, [r7, #24]
 801e382:	e019      	b.n	801e3b8 <lfs_dir_getslice+0x1e0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 801e384:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e386:	697b      	ldr	r3, [r7, #20]
 801e388:	18d0      	adds	r0, r2, r3
 801e38a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801e38c:	697b      	ldr	r3, [r7, #20]
 801e38e:	1ad3      	subs	r3, r2, r3
 801e390:	461a      	mov	r2, r3
 801e392:	2100      	movs	r1, #0
 801e394:	f017 fd2c 	bl	8035df0 <memset>

            return tag + gdiff;
 801e398:	6a3a      	ldr	r2, [r7, #32]
 801e39a:	69fb      	ldr	r3, [r7, #28]
 801e39c:	4413      	add	r3, r2
 801e39e:	e00b      	b.n	801e3b8 <lfs_dir_getslice+0x1e0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 801e3a0:	693b      	ldr	r3, [r7, #16]
 801e3a2:	4618      	mov	r0, r3
 801e3a4:	f7ff fbaf 	bl	801db06 <lfs_tag_dsize>
 801e3a8:	4603      	mov	r3, r0
 801e3aa:	3304      	adds	r3, #4
 801e3ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801e3ae:	429a      	cmp	r2, r3
 801e3b0:	f4bf af56 	bcs.w	801e260 <lfs_dir_getslice+0x88>
        }
    }

    return LFS_ERR_NOENT;
 801e3b4:	f06f 0301 	mvn.w	r3, #1
}
 801e3b8:	4618      	mov	r0, r3
 801e3ba:	372c      	adds	r7, #44	@ 0x2c
 801e3bc:	46bd      	mov	sp, r7
 801e3be:	bd90      	pop	{r4, r7, pc}
 801e3c0:	000ffc00 	.word	0x000ffc00

0801e3c4 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 801e3c4:	b580      	push	{r7, lr}
 801e3c6:	b088      	sub	sp, #32
 801e3c8:	af04      	add	r7, sp, #16
 801e3ca:	60f8      	str	r0, [r7, #12]
 801e3cc:	60b9      	str	r1, [r7, #8]
 801e3ce:	607a      	str	r2, [r7, #4]
 801e3d0:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 801e3d2:	6838      	ldr	r0, [r7, #0]
 801e3d4:	f7ff fb8a 	bl	801daec <lfs_tag_size>
 801e3d8:	4603      	mov	r3, r0
 801e3da:	9302      	str	r3, [sp, #8]
 801e3dc:	69bb      	ldr	r3, [r7, #24]
 801e3de:	9301      	str	r3, [sp, #4]
 801e3e0:	2300      	movs	r3, #0
 801e3e2:	9300      	str	r3, [sp, #0]
 801e3e4:	683b      	ldr	r3, [r7, #0]
 801e3e6:	687a      	ldr	r2, [r7, #4]
 801e3e8:	68b9      	ldr	r1, [r7, #8]
 801e3ea:	68f8      	ldr	r0, [r7, #12]
 801e3ec:	f7ff fef4 	bl	801e1d8 <lfs_dir_getslice>
 801e3f0:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 801e3f2:	4618      	mov	r0, r3
 801e3f4:	3710      	adds	r7, #16
 801e3f6:	46bd      	mov	sp, r7
 801e3f8:	bd80      	pop	{r7, pc}

0801e3fa <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 801e3fa:	b580      	push	{r7, lr}
 801e3fc:	b08c      	sub	sp, #48	@ 0x30
 801e3fe:	af04      	add	r7, sp, #16
 801e400:	60f8      	str	r0, [r7, #12]
 801e402:	60b9      	str	r1, [r7, #8]
 801e404:	607a      	str	r2, [r7, #4]
 801e406:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 801e408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e40a:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 801e40c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e40e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e410:	441a      	add	r2, r3
 801e412:	68fb      	ldr	r3, [r7, #12]
 801e414:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801e416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e418:	429a      	cmp	r2, r3
 801e41a:	f240 80c0 	bls.w	801e59e <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 801e41e:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801e422:	e0c1      	b.n	801e5a8 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 801e424:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e426:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 801e428:	687b      	ldr	r3, [r7, #4]
 801e42a:	2b00      	cmp	r3, #0
 801e42c:	d03f      	beq.n	801e4ae <lfs_dir_getread+0xb4>
 801e42e:	687b      	ldr	r3, [r7, #4]
 801e430:	681b      	ldr	r3, [r3, #0]
 801e432:	f113 0f02 	cmn.w	r3, #2
 801e436:	d13a      	bne.n	801e4ae <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 801e438:	687b      	ldr	r3, [r7, #4]
 801e43a:	685a      	ldr	r2, [r3, #4]
 801e43c:	687b      	ldr	r3, [r7, #4]
 801e43e:	689b      	ldr	r3, [r3, #8]
 801e440:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 801e442:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e444:	429a      	cmp	r2, r3
 801e446:	d232      	bcs.n	801e4ae <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 801e448:	687b      	ldr	r3, [r7, #4]
 801e44a:	685b      	ldr	r3, [r3, #4]
 801e44c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e44e:	429a      	cmp	r2, r3
 801e450:	d324      	bcc.n	801e49c <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 801e452:	687b      	ldr	r3, [r7, #4]
 801e454:	689a      	ldr	r2, [r3, #8]
 801e456:	687b      	ldr	r3, [r7, #4]
 801e458:	6859      	ldr	r1, [r3, #4]
 801e45a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e45c:	1acb      	subs	r3, r1, r3
 801e45e:	4413      	add	r3, r2
 801e460:	4619      	mov	r1, r3
 801e462:	69b8      	ldr	r0, [r7, #24]
 801e464:	f7fe fdbf 	bl	801cfe6 <lfs_min>
 801e468:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 801e46a:	687b      	ldr	r3, [r7, #4]
 801e46c:	68da      	ldr	r2, [r3, #12]
 801e46e:	687b      	ldr	r3, [r7, #4]
 801e470:	685b      	ldr	r3, [r3, #4]
 801e472:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801e474:	1acb      	subs	r3, r1, r3
 801e476:	4413      	add	r3, r2
 801e478:	69ba      	ldr	r2, [r7, #24]
 801e47a:	4619      	mov	r1, r3
 801e47c:	69f8      	ldr	r0, [r7, #28]
 801e47e:	f018 fef3 	bl	8037268 <memcpy>

                data += diff;
 801e482:	69fa      	ldr	r2, [r7, #28]
 801e484:	69bb      	ldr	r3, [r7, #24]
 801e486:	4413      	add	r3, r2
 801e488:	61fb      	str	r3, [r7, #28]
                off += diff;
 801e48a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e48c:	69bb      	ldr	r3, [r7, #24]
 801e48e:	4413      	add	r3, r2
 801e490:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 801e492:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e494:	69bb      	ldr	r3, [r7, #24]
 801e496:	1ad3      	subs	r3, r2, r3
 801e498:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 801e49a:	e080      	b.n	801e59e <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 801e49c:	687b      	ldr	r3, [r7, #4]
 801e49e:	685a      	ldr	r2, [r3, #4]
 801e4a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e4a2:	1ad3      	subs	r3, r2, r3
 801e4a4:	4619      	mov	r1, r3
 801e4a6:	69b8      	ldr	r0, [r7, #24]
 801e4a8:	f7fe fd9d 	bl	801cfe6 <lfs_min>
 801e4ac:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 801e4ae:	683b      	ldr	r3, [r7, #0]
 801e4b0:	681b      	ldr	r3, [r3, #0]
 801e4b2:	f113 0f02 	cmn.w	r3, #2
 801e4b6:	d13a      	bne.n	801e52e <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 801e4b8:	683b      	ldr	r3, [r7, #0]
 801e4ba:	685a      	ldr	r2, [r3, #4]
 801e4bc:	683b      	ldr	r3, [r7, #0]
 801e4be:	689b      	ldr	r3, [r3, #8]
 801e4c0:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 801e4c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e4c4:	429a      	cmp	r2, r3
 801e4c6:	d232      	bcs.n	801e52e <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 801e4c8:	683b      	ldr	r3, [r7, #0]
 801e4ca:	685b      	ldr	r3, [r3, #4]
 801e4cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e4ce:	429a      	cmp	r2, r3
 801e4d0:	d324      	bcc.n	801e51c <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 801e4d2:	683b      	ldr	r3, [r7, #0]
 801e4d4:	689a      	ldr	r2, [r3, #8]
 801e4d6:	683b      	ldr	r3, [r7, #0]
 801e4d8:	6859      	ldr	r1, [r3, #4]
 801e4da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e4dc:	1acb      	subs	r3, r1, r3
 801e4de:	4413      	add	r3, r2
 801e4e0:	4619      	mov	r1, r3
 801e4e2:	69b8      	ldr	r0, [r7, #24]
 801e4e4:	f7fe fd7f 	bl	801cfe6 <lfs_min>
 801e4e8:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 801e4ea:	683b      	ldr	r3, [r7, #0]
 801e4ec:	68da      	ldr	r2, [r3, #12]
 801e4ee:	683b      	ldr	r3, [r7, #0]
 801e4f0:	685b      	ldr	r3, [r3, #4]
 801e4f2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801e4f4:	1acb      	subs	r3, r1, r3
 801e4f6:	4413      	add	r3, r2
 801e4f8:	69ba      	ldr	r2, [r7, #24]
 801e4fa:	4619      	mov	r1, r3
 801e4fc:	69f8      	ldr	r0, [r7, #28]
 801e4fe:	f018 feb3 	bl	8037268 <memcpy>

                data += diff;
 801e502:	69fa      	ldr	r2, [r7, #28]
 801e504:	69bb      	ldr	r3, [r7, #24]
 801e506:	4413      	add	r3, r2
 801e508:	61fb      	str	r3, [r7, #28]
                off += diff;
 801e50a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e50c:	69bb      	ldr	r3, [r7, #24]
 801e50e:	4413      	add	r3, r2
 801e510:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 801e512:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e514:	69bb      	ldr	r3, [r7, #24]
 801e516:	1ad3      	subs	r3, r2, r3
 801e518:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 801e51a:	e040      	b.n	801e59e <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 801e51c:	683b      	ldr	r3, [r7, #0]
 801e51e:	685a      	ldr	r2, [r3, #4]
 801e520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e522:	1ad3      	subs	r3, r2, r3
 801e524:	4619      	mov	r1, r3
 801e526:	69b8      	ldr	r0, [r7, #24]
 801e528:	f7fe fd5d 	bl	801cfe6 <lfs_min>
 801e52c:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 801e52e:	683b      	ldr	r3, [r7, #0]
 801e530:	f06f 0201 	mvn.w	r2, #1
 801e534:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 801e536:	68fb      	ldr	r3, [r7, #12]
 801e538:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801e53a:	69db      	ldr	r3, [r3, #28]
 801e53c:	4619      	mov	r1, r3
 801e53e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801e540:	f7fe fd61 	bl	801d006 <lfs_aligndown>
 801e544:	4602      	mov	r2, r0
 801e546:	683b      	ldr	r3, [r7, #0]
 801e548:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 801e54a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e54c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e54e:	441a      	add	r2, r3
 801e550:	68fb      	ldr	r3, [r7, #12]
 801e552:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801e554:	69db      	ldr	r3, [r3, #28]
 801e556:	4619      	mov	r1, r3
 801e558:	4610      	mov	r0, r2
 801e55a:	f7fe fd69 	bl	801d030 <lfs_alignup>
 801e55e:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 801e560:	68fb      	ldr	r3, [r7, #12]
 801e562:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801e564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 801e566:	4619      	mov	r1, r3
 801e568:	4610      	mov	r0, r2
 801e56a:	f7fe fd3c 	bl	801cfe6 <lfs_min>
 801e56e:	4602      	mov	r2, r0
 801e570:	683b      	ldr	r3, [r7, #0]
 801e572:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 801e574:	683b      	ldr	r3, [r7, #0]
 801e576:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 801e578:	683a      	ldr	r2, [r7, #0]
 801e57a:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 801e57c:	6839      	ldr	r1, [r7, #0]
 801e57e:	6889      	ldr	r1, [r1, #8]
 801e580:	9102      	str	r1, [sp, #8]
 801e582:	9201      	str	r2, [sp, #4]
 801e584:	9300      	str	r3, [sp, #0]
 801e586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e588:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e58a:	68b9      	ldr	r1, [r7, #8]
 801e58c:	68f8      	ldr	r0, [r7, #12]
 801e58e:	f7ff fe23 	bl	801e1d8 <lfs_dir_getslice>
 801e592:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 801e594:	697b      	ldr	r3, [r7, #20]
 801e596:	2b00      	cmp	r3, #0
 801e598:	da01      	bge.n	801e59e <lfs_dir_getread+0x1a4>
            return err;
 801e59a:	697b      	ldr	r3, [r7, #20]
 801e59c:	e004      	b.n	801e5a8 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 801e59e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e5a0:	2b00      	cmp	r3, #0
 801e5a2:	f47f af3f 	bne.w	801e424 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 801e5a6:	2300      	movs	r3, #0
}
 801e5a8:	4618      	mov	r0, r3
 801e5aa:	3720      	adds	r7, #32
 801e5ac:	46bd      	mov	sp, r7
 801e5ae:	bd80      	pop	{r7, pc}

0801e5b0 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 801e5b0:	b590      	push	{r4, r7, lr}
 801e5b2:	b087      	sub	sp, #28
 801e5b4:	af00      	add	r7, sp, #0
 801e5b6:	60f8      	str	r0, [r7, #12]
 801e5b8:	60b9      	str	r1, [r7, #8]
 801e5ba:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 801e5bc:	68fb      	ldr	r3, [r7, #12]
 801e5be:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 801e5c0:	68bb      	ldr	r3, [r7, #8]
 801e5c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 801e5c6:	2b00      	cmp	r3, #0
 801e5c8:	d001      	beq.n	801e5ce <lfs_dir_traverse_filter+0x1e>
 801e5ca:	4b24      	ldr	r3, [pc, #144]	@ (801e65c <lfs_dir_traverse_filter+0xac>)
 801e5cc:	e000      	b.n	801e5d0 <lfs_dir_traverse_filter+0x20>
 801e5ce:	4b24      	ldr	r3, [pc, #144]	@ (801e660 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 801e5d0:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 801e5d2:	697b      	ldr	r3, [r7, #20]
 801e5d4:	681a      	ldr	r2, [r3, #0]
 801e5d6:	68bb      	ldr	r3, [r7, #8]
 801e5d8:	405a      	eors	r2, r3
 801e5da:	693b      	ldr	r3, [r7, #16]
 801e5dc:	4013      	ands	r3, r2
 801e5de:	2b00      	cmp	r3, #0
 801e5e0:	d014      	beq.n	801e60c <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 801e5e2:	697b      	ldr	r3, [r7, #20]
 801e5e4:	681b      	ldr	r3, [r3, #0]
 801e5e6:	4618      	mov	r0, r3
 801e5e8:	f7ff fa13 	bl	801da12 <lfs_tag_isdelete>
 801e5ec:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 801e5ee:	2b00      	cmp	r3, #0
 801e5f0:	d10c      	bne.n	801e60c <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 801e5f2:	68bb      	ldr	r3, [r7, #8]
 801e5f4:	4a19      	ldr	r2, [pc, #100]	@ (801e65c <lfs_dir_traverse_filter+0xac>)
 801e5f6:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 801e5f8:	697b      	ldr	r3, [r7, #20]
 801e5fa:	6819      	ldr	r1, [r3, #0]
 801e5fc:	4b19      	ldr	r3, [pc, #100]	@ (801e664 <lfs_dir_traverse_filter+0xb4>)
 801e5fe:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 801e600:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801e604:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
            lfs_tag_isdelete(*filtertag) ||
 801e608:	429a      	cmp	r2, r3
 801e60a:	d104      	bne.n	801e616 <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 801e60c:	697b      	ldr	r3, [r7, #20]
 801e60e:	2200      	movs	r2, #0
 801e610:	601a      	str	r2, [r3, #0]
        return true;
 801e612:	2301      	movs	r3, #1
 801e614:	e01e      	b.n	801e654 <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 801e616:	68b8      	ldr	r0, [r7, #8]
 801e618:	f7ff fa0e 	bl	801da38 <lfs_tag_type1>
 801e61c:	4603      	mov	r3, r0
 801e61e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801e622:	d116      	bne.n	801e652 <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 801e624:	68b8      	ldr	r0, [r7, #8]
 801e626:	f7ff fa51 	bl	801dacc <lfs_tag_id>
 801e62a:	4603      	mov	r3, r0
 801e62c:	461c      	mov	r4, r3
 801e62e:	697b      	ldr	r3, [r7, #20]
 801e630:	681b      	ldr	r3, [r3, #0]
 801e632:	4618      	mov	r0, r3
 801e634:	f7ff fa4a 	bl	801dacc <lfs_tag_id>
 801e638:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 801e63a:	429c      	cmp	r4, r3
 801e63c:	d809      	bhi.n	801e652 <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 801e63e:	68b8      	ldr	r0, [r7, #8]
 801e640:	f7ff fa37 	bl	801dab2 <lfs_tag_splice>
 801e644:	4603      	mov	r3, r0
 801e646:	029a      	lsls	r2, r3, #10
 801e648:	697b      	ldr	r3, [r7, #20]
 801e64a:	681b      	ldr	r3, [r3, #0]
 801e64c:	441a      	add	r2, r3
 801e64e:	697b      	ldr	r3, [r7, #20]
 801e650:	601a      	str	r2, [r3, #0]
    }

    return false;
 801e652:	2300      	movs	r3, #0
}
 801e654:	4618      	mov	r0, r3
 801e656:	371c      	adds	r7, #28
 801e658:	46bd      	mov	sp, r7
 801e65a:	bd90      	pop	{r4, r7, pc}
 801e65c:	7ffffc00 	.word	0x7ffffc00
 801e660:	700ffc00 	.word	0x700ffc00
 801e664:	000ffc00 	.word	0x000ffc00

0801e668 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 801e668:	b590      	push	{r4, r7, lr}
 801e66a:	b0c1      	sub	sp, #260	@ 0x104
 801e66c:	af04      	add	r7, sp, #16
 801e66e:	60f8      	str	r0, [r7, #12]
 801e670:	60b9      	str	r1, [r7, #8]
 801e672:	607a      	str	r2, [r7, #4]
 801e674:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 801e676:	2300      	movs	r3, #0
 801e678:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    int res;

    // iterate over directory and attrs
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk = {0};
 801e67c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801e680:	2200      	movs	r2, #0
 801e682:	601a      	str	r2, [r3, #0]
 801e684:	605a      	str	r2, [r3, #4]
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 801e686:	6838      	ldr	r0, [r7, #0]
 801e688:	f7ff fa3d 	bl	801db06 <lfs_tag_dsize>
 801e68c:	4602      	mov	r2, r0
 801e68e:	687b      	ldr	r3, [r7, #4]
 801e690:	441a      	add	r2, r3
 801e692:	68bb      	ldr	r3, [r7, #8]
 801e694:	68db      	ldr	r3, [r3, #12]
 801e696:	429a      	cmp	r2, r3
 801e698:	d237      	bcs.n	801e70a <lfs_dir_traverse+0xa2>
                off += lfs_tag_dsize(ptag);
 801e69a:	6838      	ldr	r0, [r7, #0]
 801e69c:	f7ff fa33 	bl	801db06 <lfs_tag_dsize>
 801e6a0:	4602      	mov	r2, r0
 801e6a2:	687b      	ldr	r3, [r7, #4]
 801e6a4:	4413      	add	r3, r2
 801e6a6:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 801e6a8:	68f9      	ldr	r1, [r7, #12]
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
 801e6aa:	68bb      	ldr	r3, [r7, #8]
 801e6ac:	681b      	ldr	r3, [r3, #0]
                int err = lfs_bd_read(lfs,
 801e6ae:	2204      	movs	r2, #4
 801e6b0:	9203      	str	r2, [sp, #12]
 801e6b2:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 801e6b6:	9202      	str	r2, [sp, #8]
 801e6b8:	687a      	ldr	r2, [r7, #4]
 801e6ba:	9201      	str	r2, [sp, #4]
 801e6bc:	9300      	str	r3, [sp, #0]
 801e6be:	2304      	movs	r3, #4
 801e6c0:	460a      	mov	r2, r1
 801e6c2:	2100      	movs	r1, #0
 801e6c4:	68f8      	ldr	r0, [r7, #12]
 801e6c6:	f7fe fd69 	bl	801d19c <lfs_bd_read>
 801e6ca:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
                if (err) {
 801e6ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801e6d2:	2b00      	cmp	r3, #0
 801e6d4:	d002      	beq.n	801e6dc <lfs_dir_traverse+0x74>
                    return err;
 801e6d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801e6da:	e3a5      	b.n	801ee28 <lfs_dir_traverse+0x7c0>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 801e6dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e6de:	4618      	mov	r0, r3
 801e6e0:	f7fe fd08 	bl	801d0f4 <lfs_frombe32>
 801e6e4:	4602      	mov	r2, r0
 801e6e6:	683b      	ldr	r3, [r7, #0]
 801e6e8:	4053      	eors	r3, r2
 801e6ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801e6ee:	657b      	str	r3, [r7, #84]	@ 0x54
                disk.block = dir->pair[0];
 801e6f0:	68bb      	ldr	r3, [r7, #8]
 801e6f2:	681b      	ldr	r3, [r3, #0]
 801e6f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 801e6f6:	687b      	ldr	r3, [r7, #4]
 801e6f8:	3304      	adds	r3, #4
 801e6fa:	653b      	str	r3, [r7, #80]	@ 0x50
                buffer = &disk;
 801e6fc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801e700:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                ptag = tag;
 801e704:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e706:	603b      	str	r3, [r7, #0]
 801e708:	e01b      	b.n	801e742 <lfs_dir_traverse+0xda>
            } else if (attrcount > 0) {
 801e70a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801e70e:	2b00      	cmp	r3, #0
 801e710:	dd13      	ble.n	801e73a <lfs_dir_traverse+0xd2>
                tag = attrs[0].tag;
 801e712:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 801e716:	681b      	ldr	r3, [r3, #0]
 801e718:	657b      	str	r3, [r7, #84]	@ 0x54
                buffer = attrs[0].buffer;
 801e71a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 801e71e:	685b      	ldr	r3, [r3, #4]
 801e720:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                attrs += 1;
 801e724:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 801e728:	3308      	adds	r3, #8
 801e72a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
                attrcount -= 1;
 801e72e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801e732:	3b01      	subs	r3, #1
 801e734:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 801e738:	e003      	b.n	801e742 <lfs_dir_traverse+0xda>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 801e73a:	2300      	movs	r3, #0
 801e73c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
                break;
 801e740:	e2a1      	b.n	801ec86 <lfs_dir_traverse+0x61e>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 801e742:	4b7e      	ldr	r3, [pc, #504]	@ (801e93c <lfs_dir_traverse+0x2d4>)
 801e744:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 801e748:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801e74a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801e74e:	405a      	eors	r2, r3
 801e750:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 801e754:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801e758:	400b      	ands	r3, r1
 801e75a:	4013      	ands	r3, r2
 801e75c:	2b00      	cmp	r3, #0
 801e75e:	f040 8284 	bne.w	801ec6a <lfs_dir_traverse+0x602>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 801e762:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 801e766:	f7ff f9b1 	bl	801dacc <lfs_tag_id>
 801e76a:	4603      	mov	r3, r0
 801e76c:	2b00      	cmp	r3, #0
 801e76e:	f000 80ef 	beq.w	801e950 <lfs_dir_traverse+0x2e8>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 801e772:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801e776:	2b02      	cmp	r3, #2
 801e778:	d906      	bls.n	801e788 <lfs_dir_traverse+0x120>
 801e77a:	4b71      	ldr	r3, [pc, #452]	@ (801e940 <lfs_dir_traverse+0x2d8>)
 801e77c:	4a71      	ldr	r2, [pc, #452]	@ (801e944 <lfs_dir_traverse+0x2dc>)
 801e77e:	f240 31b6 	movw	r1, #950	@ 0x3b6
 801e782:	4871      	ldr	r0, [pc, #452]	@ (801e948 <lfs_dir_traverse+0x2e0>)
 801e784:	f014 fde0 	bl	8033348 <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 801e788:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801e78a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801e78e:	4613      	mov	r3, r2
 801e790:	011b      	lsls	r3, r3, #4
 801e792:	1a9b      	subs	r3, r3, r2
 801e794:	009b      	lsls	r3, r3, #2
 801e796:	33f0      	adds	r3, #240	@ 0xf0
 801e798:	443b      	add	r3, r7
 801e79a:	3b98      	subs	r3, #152	@ 0x98
 801e79c:	68ba      	ldr	r2, [r7, #8]
 801e79e:	601a      	str	r2, [r3, #0]
 801e7a0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801e7a4:	4613      	mov	r3, r2
 801e7a6:	011b      	lsls	r3, r3, #4
 801e7a8:	1a9b      	subs	r3, r3, r2
 801e7aa:	009b      	lsls	r3, r3, #2
 801e7ac:	33f0      	adds	r3, #240	@ 0xf0
 801e7ae:	443b      	add	r3, r7
 801e7b0:	3b94      	subs	r3, #148	@ 0x94
 801e7b2:	687a      	ldr	r2, [r7, #4]
 801e7b4:	601a      	str	r2, [r3, #0]
 801e7b6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801e7ba:	4613      	mov	r3, r2
 801e7bc:	011b      	lsls	r3, r3, #4
 801e7be:	1a9b      	subs	r3, r3, r2
 801e7c0:	009b      	lsls	r3, r3, #2
 801e7c2:	33f0      	adds	r3, #240	@ 0xf0
 801e7c4:	443b      	add	r3, r7
 801e7c6:	3b90      	subs	r3, #144	@ 0x90
 801e7c8:	683a      	ldr	r2, [r7, #0]
 801e7ca:	601a      	str	r2, [r3, #0]
 801e7cc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801e7d0:	4613      	mov	r3, r2
 801e7d2:	011b      	lsls	r3, r3, #4
 801e7d4:	1a9b      	subs	r3, r3, r2
 801e7d6:	009b      	lsls	r3, r3, #2
 801e7d8:	33f0      	adds	r3, #240	@ 0xf0
 801e7da:	443b      	add	r3, r7
 801e7dc:	3b8c      	subs	r3, #140	@ 0x8c
 801e7de:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 801e7e2:	601a      	str	r2, [r3, #0]
 801e7e4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801e7e8:	4613      	mov	r3, r2
 801e7ea:	011b      	lsls	r3, r3, #4
 801e7ec:	1a9b      	subs	r3, r3, r2
 801e7ee:	009b      	lsls	r3, r3, #2
 801e7f0:	33f0      	adds	r3, #240	@ 0xf0
 801e7f2:	443b      	add	r3, r7
 801e7f4:	3b88      	subs	r3, #136	@ 0x88
 801e7f6:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 801e7fa:	601a      	str	r2, [r3, #0]
 801e7fc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801e800:	4613      	mov	r3, r2
 801e802:	011b      	lsls	r3, r3, #4
 801e804:	1a9b      	subs	r3, r3, r2
 801e806:	009b      	lsls	r3, r3, #2
 801e808:	33f0      	adds	r3, #240	@ 0xf0
 801e80a:	443b      	add	r3, r7
 801e80c:	3b84      	subs	r3, #132	@ 0x84
 801e80e:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 801e812:	601a      	str	r2, [r3, #0]
 801e814:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801e818:	4613      	mov	r3, r2
 801e81a:	011b      	lsls	r3, r3, #4
 801e81c:	1a9b      	subs	r3, r3, r2
 801e81e:	009b      	lsls	r3, r3, #2
 801e820:	33f0      	adds	r3, #240	@ 0xf0
 801e822:	443b      	add	r3, r7
 801e824:	3b80      	subs	r3, #128	@ 0x80
 801e826:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 801e82a:	601a      	str	r2, [r3, #0]
 801e82c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801e830:	4613      	mov	r3, r2
 801e832:	011b      	lsls	r3, r3, #4
 801e834:	1a9b      	subs	r3, r3, r2
 801e836:	009b      	lsls	r3, r3, #2
 801e838:	33f0      	adds	r3, #240	@ 0xf0
 801e83a:	443b      	add	r3, r7
 801e83c:	3b7c      	subs	r3, #124	@ 0x7c
 801e83e:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 801e842:	801a      	strh	r2, [r3, #0]
 801e844:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801e848:	4613      	mov	r3, r2
 801e84a:	011b      	lsls	r3, r3, #4
 801e84c:	1a9b      	subs	r3, r3, r2
 801e84e:	009b      	lsls	r3, r3, #2
 801e850:	33f0      	adds	r3, #240	@ 0xf0
 801e852:	443b      	add	r3, r7
 801e854:	3b7a      	subs	r3, #122	@ 0x7a
 801e856:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 801e85a:	801a      	strh	r2, [r3, #0]
 801e85c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801e860:	4613      	mov	r3, r2
 801e862:	011b      	lsls	r3, r3, #4
 801e864:	1a9b      	subs	r3, r3, r2
 801e866:	009b      	lsls	r3, r3, #2
 801e868:	33f0      	adds	r3, #240	@ 0xf0
 801e86a:	443b      	add	r3, r7
 801e86c:	3b78      	subs	r3, #120	@ 0x78
 801e86e:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 801e872:	801a      	strh	r2, [r3, #0]
 801e874:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801e878:	4613      	mov	r3, r2
 801e87a:	011b      	lsls	r3, r3, #4
 801e87c:	1a9b      	subs	r3, r3, r2
 801e87e:	009b      	lsls	r3, r3, #2
 801e880:	33f0      	adds	r3, #240	@ 0xf0
 801e882:	443b      	add	r3, r7
 801e884:	3b74      	subs	r3, #116	@ 0x74
 801e886:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 801e88a:	601a      	str	r2, [r3, #0]
 801e88c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801e890:	4613      	mov	r3, r2
 801e892:	011b      	lsls	r3, r3, #4
 801e894:	1a9b      	subs	r3, r3, r2
 801e896:	009b      	lsls	r3, r3, #2
 801e898:	33f0      	adds	r3, #240	@ 0xf0
 801e89a:	443b      	add	r3, r7
 801e89c:	3b70      	subs	r3, #112	@ 0x70
 801e89e:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 801e8a2:	601a      	str	r2, [r3, #0]
 801e8a4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801e8a8:	4613      	mov	r3, r2
 801e8aa:	011b      	lsls	r3, r3, #4
 801e8ac:	1a9b      	subs	r3, r3, r2
 801e8ae:	009b      	lsls	r3, r3, #2
 801e8b0:	33f0      	adds	r3, #240	@ 0xf0
 801e8b2:	443b      	add	r3, r7
 801e8b4:	3b6c      	subs	r3, #108	@ 0x6c
 801e8b6:	6019      	str	r1, [r3, #0]
 801e8b8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801e8bc:	4613      	mov	r3, r2
 801e8be:	011b      	lsls	r3, r3, #4
 801e8c0:	1a9b      	subs	r3, r3, r2
 801e8c2:	009b      	lsls	r3, r3, #2
 801e8c4:	33f0      	adds	r3, #240	@ 0xf0
 801e8c6:	443b      	add	r3, r7
 801e8c8:	3b68      	subs	r3, #104	@ 0x68
 801e8ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801e8ce:	601a      	str	r2, [r3, #0]
 801e8d0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801e8d4:	4613      	mov	r3, r2
 801e8d6:	011b      	lsls	r3, r3, #4
 801e8d8:	1a9b      	subs	r3, r3, r2
 801e8da:	009b      	lsls	r3, r3, #2
 801e8dc:	33f0      	adds	r3, #240	@ 0xf0
 801e8de:	443b      	add	r3, r7
 801e8e0:	3b68      	subs	r3, #104	@ 0x68
 801e8e2:	3304      	adds	r3, #4
 801e8e4:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 801e8e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 801e8ec:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 801e8f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801e8f4:	3301      	adds	r3, #1
 801e8f6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

                tmask = 0;
 801e8fa:	2300      	movs	r3, #0
 801e8fc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
                ttag = 0;
 801e900:	2300      	movs	r3, #0
 801e902:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
                begin = 0;
 801e906:	2300      	movs	r3, #0
 801e908:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
                end = 0;
 801e90c:	2300      	movs	r3, #0
 801e90e:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
                diff = 0;
 801e912:	2300      	movs	r3, #0
 801e914:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
                cb = lfs_dir_traverse_filter;
 801e918:	4b0c      	ldr	r3, [pc, #48]	@ (801e94c <lfs_dir_traverse+0x2e4>)
 801e91a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
                data = &stack[sp-1].tag;
 801e91e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801e922:	1e5a      	subs	r2, r3, #1
 801e924:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 801e928:	4613      	mov	r3, r2
 801e92a:	011b      	lsls	r3, r3, #4
 801e92c:	1a9b      	subs	r3, r3, r2
 801e92e:	009b      	lsls	r3, r3, #2
 801e930:	3328      	adds	r3, #40	@ 0x28
 801e932:	440b      	add	r3, r1
 801e934:	3304      	adds	r3, #4
 801e936:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
                continue;
 801e93a:	e19d      	b.n	801ec78 <lfs_dir_traverse+0x610>
 801e93c:	7ff00000 	.word	0x7ff00000
 801e940:	08040a4c 	.word	0x08040a4c
 801e944:	080443a0 	.word	0x080443a0
 801e948:	08040920 	.word	0x08040920
 801e94c:	0801e5b1 	.word	0x0801e5b1
            }
        }

popped:
 801e950:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 801e952:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 801e956:	f7ff f8b9 	bl	801dacc <lfs_tag_id>
 801e95a:	4603      	mov	r3, r0
 801e95c:	2b00      	cmp	r3, #0
 801e95e:	d015      	beq.n	801e98c <lfs_dir_traverse+0x324>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 801e960:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e962:	4618      	mov	r0, r3
 801e964:	f7ff f8b2 	bl	801dacc <lfs_tag_id>
 801e968:	4603      	mov	r3, r0
 801e96a:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 801e96c:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 801e970:	4293      	cmp	r3, r2
 801e972:	f200 817c 	bhi.w	801ec6e <lfs_dir_traverse+0x606>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 801e976:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e978:	4618      	mov	r0, r3
 801e97a:	f7ff f8a7 	bl	801dacc <lfs_tag_id>
 801e97e:	4603      	mov	r3, r0
 801e980:	461a      	mov	r2, r3
 801e982:	f8b7 3114 	ldrh.w	r3, [r7, #276]	@ 0x114
 801e986:	4293      	cmp	r3, r2
 801e988:	f240 8171 	bls.w	801ec6e <lfs_dir_traverse+0x606>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 801e98c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e98e:	4618      	mov	r0, r3
 801e990:	f7ff f872 	bl	801da78 <lfs_tag_type3>
 801e994:	4603      	mov	r3, r0
 801e996:	2b00      	cmp	r3, #0
 801e998:	f43f ae75 	beq.w	801e686 <lfs_dir_traverse+0x1e>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 801e99c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e99e:	4618      	mov	r0, r3
 801e9a0:	f7ff f86a 	bl	801da78 <lfs_tag_type3>
 801e9a4:	4603      	mov	r3, r0
 801e9a6:	461a      	mov	r2, r3
 801e9a8:	f240 1301 	movw	r3, #257	@ 0x101
 801e9ac:	429a      	cmp	r2, r3
 801e9ae:	f040 80e0 	bne.w	801eb72 <lfs_dir_traverse+0x50a>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 801e9b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801e9b6:	4ab1      	ldr	r2, [pc, #708]	@ (801ec7c <lfs_dir_traverse+0x614>)
 801e9b8:	4293      	cmp	r3, r2
 801e9ba:	f000 815a 	beq.w	801ec72 <lfs_dir_traverse+0x60a>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 801e9be:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801e9c2:	4613      	mov	r3, r2
 801e9c4:	011b      	lsls	r3, r3, #4
 801e9c6:	1a9b      	subs	r3, r3, r2
 801e9c8:	009b      	lsls	r3, r3, #2
 801e9ca:	33f0      	adds	r3, #240	@ 0xf0
 801e9cc:	443b      	add	r3, r7
 801e9ce:	3b98      	subs	r3, #152	@ 0x98
 801e9d0:	4618      	mov	r0, r3
 801e9d2:	233c      	movs	r3, #60	@ 0x3c
 801e9d4:	461a      	mov	r2, r3
 801e9d6:	2100      	movs	r1, #0
 801e9d8:	f017 fa0a 	bl	8035df0 <memset>
 801e9dc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801e9e0:	4613      	mov	r3, r2
 801e9e2:	011b      	lsls	r3, r3, #4
 801e9e4:	1a9b      	subs	r3, r3, r2
 801e9e6:	009b      	lsls	r3, r3, #2
 801e9e8:	33f0      	adds	r3, #240	@ 0xf0
 801e9ea:	443b      	add	r3, r7
 801e9ec:	3b98      	subs	r3, #152	@ 0x98
 801e9ee:	68ba      	ldr	r2, [r7, #8]
 801e9f0:	601a      	str	r2, [r3, #0]
 801e9f2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801e9f6:	4613      	mov	r3, r2
 801e9f8:	011b      	lsls	r3, r3, #4
 801e9fa:	1a9b      	subs	r3, r3, r2
 801e9fc:	009b      	lsls	r3, r3, #2
 801e9fe:	33f0      	adds	r3, #240	@ 0xf0
 801ea00:	443b      	add	r3, r7
 801ea02:	3b94      	subs	r3, #148	@ 0x94
 801ea04:	687a      	ldr	r2, [r7, #4]
 801ea06:	601a      	str	r2, [r3, #0]
 801ea08:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801ea0c:	4613      	mov	r3, r2
 801ea0e:	011b      	lsls	r3, r3, #4
 801ea10:	1a9b      	subs	r3, r3, r2
 801ea12:	009b      	lsls	r3, r3, #2
 801ea14:	33f0      	adds	r3, #240	@ 0xf0
 801ea16:	443b      	add	r3, r7
 801ea18:	3b90      	subs	r3, #144	@ 0x90
 801ea1a:	683a      	ldr	r2, [r7, #0]
 801ea1c:	601a      	str	r2, [r3, #0]
 801ea1e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801ea22:	4613      	mov	r3, r2
 801ea24:	011b      	lsls	r3, r3, #4
 801ea26:	1a9b      	subs	r3, r3, r2
 801ea28:	009b      	lsls	r3, r3, #2
 801ea2a:	33f0      	adds	r3, #240	@ 0xf0
 801ea2c:	443b      	add	r3, r7
 801ea2e:	3b8c      	subs	r3, #140	@ 0x8c
 801ea30:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 801ea34:	601a      	str	r2, [r3, #0]
 801ea36:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801ea3a:	4613      	mov	r3, r2
 801ea3c:	011b      	lsls	r3, r3, #4
 801ea3e:	1a9b      	subs	r3, r3, r2
 801ea40:	009b      	lsls	r3, r3, #2
 801ea42:	33f0      	adds	r3, #240	@ 0xf0
 801ea44:	443b      	add	r3, r7
 801ea46:	3b88      	subs	r3, #136	@ 0x88
 801ea48:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 801ea4c:	601a      	str	r2, [r3, #0]
 801ea4e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801ea52:	4613      	mov	r3, r2
 801ea54:	011b      	lsls	r3, r3, #4
 801ea56:	1a9b      	subs	r3, r3, r2
 801ea58:	009b      	lsls	r3, r3, #2
 801ea5a:	33f0      	adds	r3, #240	@ 0xf0
 801ea5c:	443b      	add	r3, r7
 801ea5e:	3b84      	subs	r3, #132	@ 0x84
 801ea60:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 801ea64:	601a      	str	r2, [r3, #0]
 801ea66:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801ea6a:	4613      	mov	r3, r2
 801ea6c:	011b      	lsls	r3, r3, #4
 801ea6e:	1a9b      	subs	r3, r3, r2
 801ea70:	009b      	lsls	r3, r3, #2
 801ea72:	33f0      	adds	r3, #240	@ 0xf0
 801ea74:	443b      	add	r3, r7
 801ea76:	3b80      	subs	r3, #128	@ 0x80
 801ea78:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 801ea7c:	601a      	str	r2, [r3, #0]
 801ea7e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801ea82:	4613      	mov	r3, r2
 801ea84:	011b      	lsls	r3, r3, #4
 801ea86:	1a9b      	subs	r3, r3, r2
 801ea88:	009b      	lsls	r3, r3, #2
 801ea8a:	33f0      	adds	r3, #240	@ 0xf0
 801ea8c:	443b      	add	r3, r7
 801ea8e:	3b7c      	subs	r3, #124	@ 0x7c
 801ea90:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 801ea94:	801a      	strh	r2, [r3, #0]
 801ea96:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801ea9a:	4613      	mov	r3, r2
 801ea9c:	011b      	lsls	r3, r3, #4
 801ea9e:	1a9b      	subs	r3, r3, r2
 801eaa0:	009b      	lsls	r3, r3, #2
 801eaa2:	33f0      	adds	r3, #240	@ 0xf0
 801eaa4:	443b      	add	r3, r7
 801eaa6:	3b7a      	subs	r3, #122	@ 0x7a
 801eaa8:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 801eaac:	801a      	strh	r2, [r3, #0]
 801eaae:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801eab2:	4613      	mov	r3, r2
 801eab4:	011b      	lsls	r3, r3, #4
 801eab6:	1a9b      	subs	r3, r3, r2
 801eab8:	009b      	lsls	r3, r3, #2
 801eaba:	33f0      	adds	r3, #240	@ 0xf0
 801eabc:	443b      	add	r3, r7
 801eabe:	3b78      	subs	r3, #120	@ 0x78
 801eac0:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 801eac4:	801a      	strh	r2, [r3, #0]
 801eac6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801eaca:	4613      	mov	r3, r2
 801eacc:	011b      	lsls	r3, r3, #4
 801eace:	1a9b      	subs	r3, r3, r2
 801ead0:	009b      	lsls	r3, r3, #2
 801ead2:	33f0      	adds	r3, #240	@ 0xf0
 801ead4:	443b      	add	r3, r7
 801ead6:	3b74      	subs	r3, #116	@ 0x74
 801ead8:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 801eadc:	601a      	str	r2, [r3, #0]
 801eade:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801eae2:	4613      	mov	r3, r2
 801eae4:	011b      	lsls	r3, r3, #4
 801eae6:	1a9b      	subs	r3, r3, r2
 801eae8:	009b      	lsls	r3, r3, #2
 801eaea:	33f0      	adds	r3, #240	@ 0xf0
 801eaec:	443b      	add	r3, r7
 801eaee:	3b70      	subs	r3, #112	@ 0x70
 801eaf0:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 801eaf4:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 801eaf6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801eafa:	3301      	adds	r3, #1
 801eafc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

            uint16_t fromid = lfs_tag_size(tag);
 801eb00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801eb02:	4618      	mov	r0, r3
 801eb04:	f7fe fff2 	bl	801daec <lfs_tag_size>
 801eb08:	4603      	mov	r3, r0
 801eb0a:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
            uint16_t toid = lfs_tag_id(tag);
 801eb0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801eb10:	4618      	mov	r0, r3
 801eb12:	f7fe ffdb 	bl	801dacc <lfs_tag_id>
 801eb16:	4603      	mov	r3, r0
 801eb18:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
            dir = buffer;
 801eb1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801eb20:	60bb      	str	r3, [r7, #8]
            off = 0;
 801eb22:	2300      	movs	r3, #0
 801eb24:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 801eb26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801eb2a:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 801eb2c:	2300      	movs	r3, #0
 801eb2e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
            attrcount = 0;
 801eb32:	2300      	movs	r3, #0
 801eb34:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 801eb38:	4b51      	ldr	r3, [pc, #324]	@ (801ec80 <lfs_dir_traverse+0x618>)
 801eb3a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 801eb3e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 801eb42:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            begin = fromid;
 801eb46:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 801eb4a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
            end = fromid+1;
 801eb4e:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 801eb52:	3301      	adds	r3, #1
 801eb54:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
            diff = toid-fromid+diff;
 801eb58:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	@ 0xd0
 801eb5c:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 801eb60:	1ad3      	subs	r3, r2, r3
 801eb62:	b29a      	uxth	r2, r3
 801eb64:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 801eb68:	4413      	add	r3, r2
 801eb6a:	b29b      	uxth	r3, r3
 801eb6c:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
 801eb70:	e589      	b.n	801e686 <lfs_dir_traverse+0x1e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 801eb72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801eb74:	4618      	mov	r0, r3
 801eb76:	f7fe ff7f 	bl	801da78 <lfs_tag_type3>
 801eb7a:	4603      	mov	r3, r0
 801eb7c:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 801eb80:	d159      	bne.n	801ec36 <lfs_dir_traverse+0x5ce>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 801eb82:	2300      	movs	r3, #0
 801eb84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801eb88:	e04b      	b.n	801ec22 <lfs_dir_traverse+0x5ba>
                const struct lfs_attr *a = buffer;
 801eb8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801eb8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 801eb92:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801eb96:	4613      	mov	r3, r2
 801eb98:	005b      	lsls	r3, r3, #1
 801eb9a:	4413      	add	r3, r2
 801eb9c:	009b      	lsls	r3, r3, #2
 801eb9e:	461a      	mov	r2, r3
 801eba0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801eba4:	4413      	add	r3, r2
 801eba6:	781b      	ldrb	r3, [r3, #0]
 801eba8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 801ebac:	051c      	lsls	r4, r3, #20
 801ebae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ebb0:	4618      	mov	r0, r3
 801ebb2:	f7fe ff8b 	bl	801dacc <lfs_tag_id>
 801ebb6:	4603      	mov	r3, r0
 801ebb8:	461a      	mov	r2, r3
 801ebba:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 801ebbe:	4413      	add	r3, r2
 801ebc0:	029b      	lsls	r3, r3, #10
 801ebc2:	ea44 0103 	orr.w	r1, r4, r3
 801ebc6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801ebca:	4613      	mov	r3, r2
 801ebcc:	005b      	lsls	r3, r3, #1
 801ebce:	4413      	add	r3, r2
 801ebd0:	009b      	lsls	r3, r3, #2
 801ebd2:	461a      	mov	r2, r3
 801ebd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801ebd8:	4413      	add	r3, r2
 801ebda:	689b      	ldr	r3, [r3, #8]
 801ebdc:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 801ebde:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801ebe2:	4613      	mov	r3, r2
 801ebe4:	005b      	lsls	r3, r3, #1
 801ebe6:	4413      	add	r3, r2
 801ebe8:	009b      	lsls	r3, r3, #2
 801ebea:	461a      	mov	r2, r3
 801ebec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801ebf0:	4413      	add	r3, r2
 801ebf2:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 801ebf4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801ebf8:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 801ebfc:	4798      	blx	r3
 801ebfe:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
                if (res < 0) {
 801ec02:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801ec06:	2b00      	cmp	r3, #0
 801ec08:	da02      	bge.n	801ec10 <lfs_dir_traverse+0x5a8>
                    return res;
 801ec0a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801ec0e:	e10b      	b.n	801ee28 <lfs_dir_traverse+0x7c0>
                }

                if (res) {
 801ec10:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801ec14:	2b00      	cmp	r3, #0
 801ec16:	d12e      	bne.n	801ec76 <lfs_dir_traverse+0x60e>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 801ec18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801ec1c:	3301      	adds	r3, #1
 801ec1e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801ec22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ec24:	4618      	mov	r0, r3
 801ec26:	f7fe ff61 	bl	801daec <lfs_tag_size>
 801ec2a:	4602      	mov	r2, r0
 801ec2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801ec30:	4293      	cmp	r3, r2
 801ec32:	d3aa      	bcc.n	801eb8a <lfs_dir_traverse+0x522>
 801ec34:	e527      	b.n	801e686 <lfs_dir_traverse+0x1e>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 801ec36:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 801ec3a:	029a      	lsls	r2, r3, #10
 801ec3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ec3e:	18d1      	adds	r1, r2, r3
 801ec40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801ec44:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801ec48:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 801ec4c:	4798      	blx	r3
 801ec4e:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
            if (res < 0) {
 801ec52:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801ec56:	2b00      	cmp	r3, #0
 801ec58:	da02      	bge.n	801ec60 <lfs_dir_traverse+0x5f8>
                return res;
 801ec5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801ec5e:	e0e3      	b.n	801ee28 <lfs_dir_traverse+0x7c0>
            }

            if (res) {
 801ec60:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801ec64:	2b00      	cmp	r3, #0
 801ec66:	d10d      	bne.n	801ec84 <lfs_dir_traverse+0x61c>
 801ec68:	e50d      	b.n	801e686 <lfs_dir_traverse+0x1e>
                continue;
 801ec6a:	bf00      	nop
 801ec6c:	e50b      	b.n	801e686 <lfs_dir_traverse+0x1e>
            continue;
 801ec6e:	bf00      	nop
 801ec70:	e509      	b.n	801e686 <lfs_dir_traverse+0x1e>
                continue;
 801ec72:	bf00      	nop
 801ec74:	e507      	b.n	801e686 <lfs_dir_traverse+0x1e>
                    break;
 801ec76:	bf00      	nop
        {
 801ec78:	e505      	b.n	801e686 <lfs_dir_traverse+0x1e>
 801ec7a:	bf00      	nop
 801ec7c:	0801e5b1 	.word	0x0801e5b1
 801ec80:	600ffc00 	.word	0x600ffc00
                break;
 801ec84:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 801ec86:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801ec8a:	2b00      	cmp	r3, #0
 801ec8c:	f000 80ca 	beq.w	801ee24 <lfs_dir_traverse+0x7bc>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 801ec90:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801ec94:	1e5a      	subs	r2, r3, #1
 801ec96:	4613      	mov	r3, r2
 801ec98:	011b      	lsls	r3, r3, #4
 801ec9a:	1a9b      	subs	r3, r3, r2
 801ec9c:	009b      	lsls	r3, r3, #2
 801ec9e:	33f0      	adds	r3, #240	@ 0xf0
 801eca0:	443b      	add	r3, r7
 801eca2:	3b98      	subs	r3, #152	@ 0x98
 801eca4:	681b      	ldr	r3, [r3, #0]
 801eca6:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 801eca8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801ecac:	1e5a      	subs	r2, r3, #1
 801ecae:	4613      	mov	r3, r2
 801ecb0:	011b      	lsls	r3, r3, #4
 801ecb2:	1a9b      	subs	r3, r3, r2
 801ecb4:	009b      	lsls	r3, r3, #2
 801ecb6:	33f0      	adds	r3, #240	@ 0xf0
 801ecb8:	443b      	add	r3, r7
 801ecba:	3b94      	subs	r3, #148	@ 0x94
 801ecbc:	681b      	ldr	r3, [r3, #0]
 801ecbe:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 801ecc0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801ecc4:	1e5a      	subs	r2, r3, #1
 801ecc6:	4613      	mov	r3, r2
 801ecc8:	011b      	lsls	r3, r3, #4
 801ecca:	1a9b      	subs	r3, r3, r2
 801eccc:	009b      	lsls	r3, r3, #2
 801ecce:	33f0      	adds	r3, #240	@ 0xf0
 801ecd0:	443b      	add	r3, r7
 801ecd2:	3b90      	subs	r3, #144	@ 0x90
 801ecd4:	681b      	ldr	r3, [r3, #0]
 801ecd6:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 801ecd8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801ecdc:	1e5a      	subs	r2, r3, #1
 801ecde:	4613      	mov	r3, r2
 801ece0:	011b      	lsls	r3, r3, #4
 801ece2:	1a9b      	subs	r3, r3, r2
 801ece4:	009b      	lsls	r3, r3, #2
 801ece6:	33f0      	adds	r3, #240	@ 0xf0
 801ece8:	443b      	add	r3, r7
 801ecea:	3b8c      	subs	r3, #140	@ 0x8c
 801ecec:	681b      	ldr	r3, [r3, #0]
 801ecee:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
        attrcount   = stack[sp-1].attrcount;
 801ecf2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801ecf6:	1e5a      	subs	r2, r3, #1
 801ecf8:	4613      	mov	r3, r2
 801ecfa:	011b      	lsls	r3, r3, #4
 801ecfc:	1a9b      	subs	r3, r3, r2
 801ecfe:	009b      	lsls	r3, r3, #2
 801ed00:	33f0      	adds	r3, #240	@ 0xf0
 801ed02:	443b      	add	r3, r7
 801ed04:	3b88      	subs	r3, #136	@ 0x88
 801ed06:	681b      	ldr	r3, [r3, #0]
 801ed08:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        tmask       = stack[sp-1].tmask;
 801ed0c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801ed10:	1e5a      	subs	r2, r3, #1
 801ed12:	4613      	mov	r3, r2
 801ed14:	011b      	lsls	r3, r3, #4
 801ed16:	1a9b      	subs	r3, r3, r2
 801ed18:	009b      	lsls	r3, r3, #2
 801ed1a:	33f0      	adds	r3, #240	@ 0xf0
 801ed1c:	443b      	add	r3, r7
 801ed1e:	3b84      	subs	r3, #132	@ 0x84
 801ed20:	681b      	ldr	r3, [r3, #0]
 801ed22:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        ttag        = stack[sp-1].ttag;
 801ed26:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801ed2a:	1e5a      	subs	r2, r3, #1
 801ed2c:	4613      	mov	r3, r2
 801ed2e:	011b      	lsls	r3, r3, #4
 801ed30:	1a9b      	subs	r3, r3, r2
 801ed32:	009b      	lsls	r3, r3, #2
 801ed34:	33f0      	adds	r3, #240	@ 0xf0
 801ed36:	443b      	add	r3, r7
 801ed38:	3b80      	subs	r3, #128	@ 0x80
 801ed3a:	681b      	ldr	r3, [r3, #0]
 801ed3c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        begin       = stack[sp-1].begin;
 801ed40:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801ed44:	1e5a      	subs	r2, r3, #1
 801ed46:	4613      	mov	r3, r2
 801ed48:	011b      	lsls	r3, r3, #4
 801ed4a:	1a9b      	subs	r3, r3, r2
 801ed4c:	009b      	lsls	r3, r3, #2
 801ed4e:	33f0      	adds	r3, #240	@ 0xf0
 801ed50:	443b      	add	r3, r7
 801ed52:	3b7c      	subs	r3, #124	@ 0x7c
 801ed54:	881b      	ldrh	r3, [r3, #0]
 801ed56:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
        end         = stack[sp-1].end;
 801ed5a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801ed5e:	1e5a      	subs	r2, r3, #1
 801ed60:	4613      	mov	r3, r2
 801ed62:	011b      	lsls	r3, r3, #4
 801ed64:	1a9b      	subs	r3, r3, r2
 801ed66:	009b      	lsls	r3, r3, #2
 801ed68:	33f0      	adds	r3, #240	@ 0xf0
 801ed6a:	443b      	add	r3, r7
 801ed6c:	3b7a      	subs	r3, #122	@ 0x7a
 801ed6e:	881b      	ldrh	r3, [r3, #0]
 801ed70:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
        diff        = stack[sp-1].diff;
 801ed74:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801ed78:	1e5a      	subs	r2, r3, #1
 801ed7a:	4613      	mov	r3, r2
 801ed7c:	011b      	lsls	r3, r3, #4
 801ed7e:	1a9b      	subs	r3, r3, r2
 801ed80:	009b      	lsls	r3, r3, #2
 801ed82:	33f0      	adds	r3, #240	@ 0xf0
 801ed84:	443b      	add	r3, r7
 801ed86:	3b78      	subs	r3, #120	@ 0x78
 801ed88:	881b      	ldrh	r3, [r3, #0]
 801ed8a:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
        cb          = stack[sp-1].cb;
 801ed8e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801ed92:	1e5a      	subs	r2, r3, #1
 801ed94:	4613      	mov	r3, r2
 801ed96:	011b      	lsls	r3, r3, #4
 801ed98:	1a9b      	subs	r3, r3, r2
 801ed9a:	009b      	lsls	r3, r3, #2
 801ed9c:	33f0      	adds	r3, #240	@ 0xf0
 801ed9e:	443b      	add	r3, r7
 801eda0:	3b74      	subs	r3, #116	@ 0x74
 801eda2:	681b      	ldr	r3, [r3, #0]
 801eda4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        data        = stack[sp-1].data;
 801eda8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801edac:	1e5a      	subs	r2, r3, #1
 801edae:	4613      	mov	r3, r2
 801edb0:	011b      	lsls	r3, r3, #4
 801edb2:	1a9b      	subs	r3, r3, r2
 801edb4:	009b      	lsls	r3, r3, #2
 801edb6:	33f0      	adds	r3, #240	@ 0xf0
 801edb8:	443b      	add	r3, r7
 801edba:	3b70      	subs	r3, #112	@ 0x70
 801edbc:	681b      	ldr	r3, [r3, #0]
 801edbe:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        tag         = stack[sp-1].tag;
 801edc2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801edc6:	1e5a      	subs	r2, r3, #1
 801edc8:	4613      	mov	r3, r2
 801edca:	011b      	lsls	r3, r3, #4
 801edcc:	1a9b      	subs	r3, r3, r2
 801edce:	009b      	lsls	r3, r3, #2
 801edd0:	33f0      	adds	r3, #240	@ 0xf0
 801edd2:	443b      	add	r3, r7
 801edd4:	3b6c      	subs	r3, #108	@ 0x6c
 801edd6:	681b      	ldr	r3, [r3, #0]
 801edd8:	657b      	str	r3, [r7, #84]	@ 0x54
        buffer      = stack[sp-1].buffer;
 801edda:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801edde:	1e5a      	subs	r2, r3, #1
 801ede0:	4613      	mov	r3, r2
 801ede2:	011b      	lsls	r3, r3, #4
 801ede4:	1a9b      	subs	r3, r3, r2
 801ede6:	009b      	lsls	r3, r3, #2
 801ede8:	33f0      	adds	r3, #240	@ 0xf0
 801edea:	443b      	add	r3, r7
 801edec:	3b68      	subs	r3, #104	@ 0x68
 801edee:	681b      	ldr	r3, [r3, #0]
 801edf0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        disk        = stack[sp-1].disk;
 801edf4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801edf8:	1e5a      	subs	r2, r3, #1
 801edfa:	4613      	mov	r3, r2
 801edfc:	011b      	lsls	r3, r3, #4
 801edfe:	1a9b      	subs	r3, r3, r2
 801ee00:	009b      	lsls	r3, r3, #2
 801ee02:	33f0      	adds	r3, #240	@ 0xf0
 801ee04:	443b      	add	r3, r7
 801ee06:	f1a3 0268 	sub.w	r2, r3, #104	@ 0x68
 801ee0a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801ee0e:	3204      	adds	r2, #4
 801ee10:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ee14:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 801ee18:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801ee1c:	3b01      	subs	r3, #1
 801ee1e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
        goto popped;
 801ee22:	e596      	b.n	801e952 <lfs_dir_traverse+0x2ea>
    } else {
        return res;
 801ee24:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
    }
}
 801ee28:	4618      	mov	r0, r3
 801ee2a:	37f4      	adds	r7, #244	@ 0xf4
 801ee2c:	46bd      	mov	sp, r7
 801ee2e:	bd90      	pop	{r4, r7, pc}

0801ee30 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 801ee30:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ee32:	b0a5      	sub	sp, #148	@ 0x94
 801ee34:	af04      	add	r7, sp, #16
 801ee36:	6178      	str	r0, [r7, #20]
 801ee38:	6139      	str	r1, [r7, #16]
 801ee3a:	60fa      	str	r2, [r7, #12]
 801ee3c:	60bb      	str	r3, [r7, #8]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 801ee3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ee42:	67fb      	str	r3, [r7, #124]	@ 0x7c

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (lfs->block_count 
 801ee44:	697b      	ldr	r3, [r7, #20]
 801ee46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ee48:	2b00      	cmp	r3, #0
 801ee4a:	d00f      	beq.n	801ee6c <lfs_dir_fetchmatch+0x3c>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 801ee4c:	68fb      	ldr	r3, [r7, #12]
 801ee4e:	681a      	ldr	r2, [r3, #0]
 801ee50:	697b      	ldr	r3, [r7, #20]
 801ee52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ee54:	429a      	cmp	r2, r3
 801ee56:	d206      	bcs.n	801ee66 <lfs_dir_fetchmatch+0x36>
 801ee58:	68fb      	ldr	r3, [r7, #12]
 801ee5a:	3304      	adds	r3, #4
 801ee5c:	681a      	ldr	r2, [r3, #0]
 801ee5e:	697b      	ldr	r3, [r7, #20]
 801ee60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ee62:	429a      	cmp	r2, r3
 801ee64:	d302      	bcc.n	801ee6c <lfs_dir_fetchmatch+0x3c>
        return LFS_ERR_CORRUPT;
 801ee66:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801ee6a:	e3a4      	b.n	801f5b6 <lfs_dir_fetchmatch+0x786>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 801ee6c:	2300      	movs	r3, #0
 801ee6e:	647b      	str	r3, [r7, #68]	@ 0x44
 801ee70:	2300      	movs	r3, #0
 801ee72:	64bb      	str	r3, [r7, #72]	@ 0x48
    int r = 0;
 801ee74:	2300      	movs	r3, #0
 801ee76:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0; i < 2; i++) {
 801ee78:	2300      	movs	r3, #0
 801ee7a:	677b      	str	r3, [r7, #116]	@ 0x74
 801ee7c:	e05a      	b.n	801ef34 <lfs_dir_fetchmatch+0x104>
        int err = lfs_bd_read(lfs,
 801ee7e:	6978      	ldr	r0, [r7, #20]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 801ee80:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801ee82:	009b      	lsls	r3, r3, #2
 801ee84:	68fa      	ldr	r2, [r7, #12]
 801ee86:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 801ee88:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 801ee8a:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 801ee8e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801ee90:	0092      	lsls	r2, r2, #2
 801ee92:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 801ee94:	2104      	movs	r1, #4
 801ee96:	9103      	str	r1, [sp, #12]
 801ee98:	9202      	str	r2, [sp, #8]
 801ee9a:	2200      	movs	r2, #0
 801ee9c:	9201      	str	r2, [sp, #4]
 801ee9e:	9300      	str	r3, [sp, #0]
 801eea0:	2304      	movs	r3, #4
 801eea2:	4602      	mov	r2, r0
 801eea4:	2100      	movs	r1, #0
 801eea6:	6978      	ldr	r0, [r7, #20]
 801eea8:	f7fe f978 	bl	801d19c <lfs_bd_read>
 801eeac:	64f8      	str	r0, [r7, #76]	@ 0x4c
        revs[i] = lfs_fromle32(revs[i]);
 801eeae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801eeb0:	009b      	lsls	r3, r3, #2
 801eeb2:	3378      	adds	r3, #120	@ 0x78
 801eeb4:	f107 0208 	add.w	r2, r7, #8
 801eeb8:	4413      	add	r3, r2
 801eeba:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 801eebe:	4618      	mov	r0, r3
 801eec0:	f7fe f901 	bl	801d0c6 <lfs_fromle32>
 801eec4:	4602      	mov	r2, r0
 801eec6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801eec8:	009b      	lsls	r3, r3, #2
 801eeca:	3378      	adds	r3, #120	@ 0x78
 801eecc:	f107 0108 	add.w	r1, r7, #8
 801eed0:	440b      	add	r3, r1
 801eed2:	f843 2c3c 	str.w	r2, [r3, #-60]
        if (err && err != LFS_ERR_CORRUPT) {
 801eed6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801eed8:	2b00      	cmp	r3, #0
 801eeda:	d005      	beq.n	801eee8 <lfs_dir_fetchmatch+0xb8>
 801eedc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801eede:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 801eee2:	d001      	beq.n	801eee8 <lfs_dir_fetchmatch+0xb8>
            return err;
 801eee4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801eee6:	e366      	b.n	801f5b6 <lfs_dir_fetchmatch+0x786>
        }

        if (err != LFS_ERR_CORRUPT &&
 801eee8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801eeea:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 801eeee:	d01e      	beq.n	801ef2e <lfs_dir_fetchmatch+0xfe>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 801eef0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801eef2:	009b      	lsls	r3, r3, #2
 801eef4:	3378      	adds	r3, #120	@ 0x78
 801eef6:	f107 0208 	add.w	r2, r7, #8
 801eefa:	4413      	add	r3, r2
 801eefc:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 801ef00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801ef02:	3301      	adds	r3, #1
 801ef04:	2b00      	cmp	r3, #0
 801ef06:	f003 0301 	and.w	r3, r3, #1
 801ef0a:	bfb8      	it	lt
 801ef0c:	425b      	neglt	r3, r3
 801ef0e:	009b      	lsls	r3, r3, #2
 801ef10:	3378      	adds	r3, #120	@ 0x78
 801ef12:	f107 0108 	add.w	r1, r7, #8
 801ef16:	440b      	add	r3, r1
 801ef18:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 801ef1c:	4619      	mov	r1, r3
 801ef1e:	4610      	mov	r0, r2
 801ef20:	f7fe f8c3 	bl	801d0aa <lfs_scmp>
 801ef24:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 801ef26:	2b00      	cmp	r3, #0
 801ef28:	dd01      	ble.n	801ef2e <lfs_dir_fetchmatch+0xfe>
            r = i;
 801ef2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801ef2c:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0; i < 2; i++) {
 801ef2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801ef30:	3301      	adds	r3, #1
 801ef32:	677b      	str	r3, [r7, #116]	@ 0x74
 801ef34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801ef36:	2b01      	cmp	r3, #1
 801ef38:	dda1      	ble.n	801ee7e <lfs_dir_fetchmatch+0x4e>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 801ef3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ef3c:	2b00      	cmp	r3, #0
 801ef3e:	f003 0301 	and.w	r3, r3, #1
 801ef42:	bfb8      	it	lt
 801ef44:	425b      	neglt	r3, r3
 801ef46:	009b      	lsls	r3, r3, #2
 801ef48:	68fa      	ldr	r2, [r7, #12]
 801ef4a:	4413      	add	r3, r2
 801ef4c:	681a      	ldr	r2, [r3, #0]
 801ef4e:	693b      	ldr	r3, [r7, #16]
 801ef50:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 801ef52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ef54:	3301      	adds	r3, #1
 801ef56:	2b00      	cmp	r3, #0
 801ef58:	f003 0301 	and.w	r3, r3, #1
 801ef5c:	bfb8      	it	lt
 801ef5e:	425b      	neglt	r3, r3
 801ef60:	009b      	lsls	r3, r3, #2
 801ef62:	68fa      	ldr	r2, [r7, #12]
 801ef64:	4413      	add	r3, r2
 801ef66:	681a      	ldr	r2, [r3, #0]
 801ef68:	693b      	ldr	r3, [r7, #16]
 801ef6a:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 801ef6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ef6e:	2b00      	cmp	r3, #0
 801ef70:	f003 0301 	and.w	r3, r3, #1
 801ef74:	bfb8      	it	lt
 801ef76:	425b      	neglt	r3, r3
 801ef78:	009b      	lsls	r3, r3, #2
 801ef7a:	3378      	adds	r3, #120	@ 0x78
 801ef7c:	f107 0208 	add.w	r2, r7, #8
 801ef80:	4413      	add	r3, r2
 801ef82:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 801ef86:	693b      	ldr	r3, [r7, #16]
 801ef88:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 801ef8a:	693b      	ldr	r3, [r7, #16]
 801ef8c:	2200      	movs	r2, #0
 801ef8e:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 801ef90:	2300      	movs	r3, #0
 801ef92:	673b      	str	r3, [r7, #112]	@ 0x70
 801ef94:	e2fb      	b.n	801f58e <lfs_dir_fetchmatch+0x75e>
        lfs_off_t off = 0;
 801ef96:	2300      	movs	r3, #0
 801ef98:	66fb      	str	r3, [r7, #108]	@ 0x6c
        lfs_tag_t ptag = 0xffffffff;
 801ef9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ef9e:	66bb      	str	r3, [r7, #104]	@ 0x68

        uint16_t tempcount = 0;
 801efa0:	2300      	movs	r3, #0
 801efa2:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801efa6:	4aa9      	ldr	r2, [pc, #676]	@ (801f24c <lfs_dir_fetchmatch+0x41c>)
 801efa8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801efac:	e892 0003 	ldmia.w	r2, {r0, r1}
 801efb0:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 801efb4:	2300      	movs	r3, #0
 801efb6:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
        lfs_stag_t tempbesttag = besttag;
 801efba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801efbc:	663b      	str	r3, [r7, #96]	@ 0x60

        // assume not erased until proven otherwise
        bool maybeerased = false;
 801efbe:	2300      	movs	r3, #0
 801efc0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
        bool hasfcrc = false;
 801efc4:	2300      	movs	r3, #0
 801efc6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
        struct lfs_fcrc fcrc;

        dir->rev = lfs_tole32(dir->rev);
 801efca:	693b      	ldr	r3, [r7, #16]
 801efcc:	689b      	ldr	r3, [r3, #8]
 801efce:	4618      	mov	r0, r3
 801efd0:	f7fe f884 	bl	801d0dc <lfs_tole32>
 801efd4:	4602      	mov	r2, r0
 801efd6:	693b      	ldr	r3, [r7, #16]
 801efd8:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 801efda:	693b      	ldr	r3, [r7, #16]
 801efdc:	3308      	adds	r3, #8
 801efde:	2204      	movs	r2, #4
 801efe0:	4619      	mov	r1, r3
 801efe2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801efe6:	f005 fef5 	bl	8024dd4 <lfs_crc>
 801efea:	4603      	mov	r3, r0
 801efec:	633b      	str	r3, [r7, #48]	@ 0x30
        dir->rev = lfs_fromle32(dir->rev);
 801efee:	693b      	ldr	r3, [r7, #16]
 801eff0:	689b      	ldr	r3, [r3, #8]
 801eff2:	4618      	mov	r0, r3
 801eff4:	f7fe f867 	bl	801d0c6 <lfs_fromle32>
 801eff8:	4602      	mov	r2, r0
 801effa:	693b      	ldr	r3, [r7, #16]
 801effc:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 801effe:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 801f000:	f7fe fd81 	bl	801db06 <lfs_tag_dsize>
 801f004:	4602      	mov	r2, r0
 801f006:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801f008:	4413      	add	r3, r2
 801f00a:	66fb      	str	r3, [r7, #108]	@ 0x6c
            int err = lfs_bd_read(lfs,
 801f00c:	6979      	ldr	r1, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 801f00e:	697b      	ldr	r3, [r7, #20]
 801f010:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801f012:	6a58      	ldr	r0, [r3, #36]	@ 0x24
            int err = lfs_bd_read(lfs,
 801f014:	693b      	ldr	r3, [r7, #16]
 801f016:	681b      	ldr	r3, [r3, #0]
 801f018:	2204      	movs	r2, #4
 801f01a:	9203      	str	r2, [sp, #12]
 801f01c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801f020:	9202      	str	r2, [sp, #8]
 801f022:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801f024:	9201      	str	r2, [sp, #4]
 801f026:	9300      	str	r3, [sp, #0]
 801f028:	4603      	mov	r3, r0
 801f02a:	460a      	mov	r2, r1
 801f02c:	2100      	movs	r1, #0
 801f02e:	6978      	ldr	r0, [r7, #20]
 801f030:	f7fe f8b4 	bl	801d19c <lfs_bd_read>
 801f034:	65b8      	str	r0, [r7, #88]	@ 0x58
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 801f036:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f038:	2b00      	cmp	r3, #0
 801f03a:	d006      	beq.n	801f04a <lfs_dir_fetchmatch+0x21a>
                if (err == LFS_ERR_CORRUPT) {
 801f03c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f03e:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 801f042:	f000 81d6 	beq.w	801f3f2 <lfs_dir_fetchmatch+0x5c2>
                    // can't continue?
                    break;
                }
                return err;
 801f046:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f048:	e2b5      	b.n	801f5b6 <lfs_dir_fetchmatch+0x786>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 801f04a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f04c:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 801f050:	2204      	movs	r2, #4
 801f052:	4618      	mov	r0, r3
 801f054:	f005 febe 	bl	8024dd4 <lfs_crc>
 801f058:	4603      	mov	r3, r0
 801f05a:	633b      	str	r3, [r7, #48]	@ 0x30
            tag = lfs_frombe32(tag) ^ ptag;
 801f05c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f05e:	4618      	mov	r0, r3
 801f060:	f7fe f848 	bl	801d0f4 <lfs_frombe32>
 801f064:	4602      	mov	r2, r0
 801f066:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f068:	4053      	eors	r3, r2
 801f06a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            // next commit not yet programmed?
            if (!lfs_tag_isvalid(tag)) {
 801f06c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f06e:	4618      	mov	r0, r3
 801f070:	f7fe fcc1 	bl	801d9f6 <lfs_tag_isvalid>
 801f074:	4603      	mov	r3, r0
 801f076:	f083 0301 	eor.w	r3, r3, #1
 801f07a:	b2db      	uxtb	r3, r3
 801f07c:	2b00      	cmp	r3, #0
 801f07e:	d00b      	beq.n	801f098 <lfs_dir_fetchmatch+0x268>
                // we only might be erased if the last tag was a crc
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 801f080:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 801f082:	f7fe fce9 	bl	801da58 <lfs_tag_type2>
 801f086:	4603      	mov	r3, r0
 801f088:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 801f08c:	bf0c      	ite	eq
 801f08e:	2301      	moveq	r3, #1
 801f090:	2300      	movne	r3, #0
 801f092:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                break;
 801f096:	e1bb      	b.n	801f410 <lfs_dir_fetchmatch+0x5e0>
            // out of range?
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 801f098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f09a:	4618      	mov	r0, r3
 801f09c:	f7fe fd33 	bl	801db06 <lfs_tag_dsize>
 801f0a0:	4602      	mov	r2, r0
 801f0a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801f0a4:	441a      	add	r2, r3
 801f0a6:	697b      	ldr	r3, [r7, #20]
 801f0a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801f0aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f0ac:	429a      	cmp	r2, r3
 801f0ae:	f200 81a2 	bhi.w	801f3f6 <lfs_dir_fetchmatch+0x5c6>
                break;
            }

            ptag = tag;
 801f0b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f0b4:	66bb      	str	r3, [r7, #104]	@ 0x68

            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 801f0b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f0b8:	4618      	mov	r0, r3
 801f0ba:	f7fe fccd 	bl	801da58 <lfs_tag_type2>
 801f0be:	4603      	mov	r3, r0
 801f0c0:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 801f0c4:	d15e      	bne.n	801f184 <lfs_dir_fetchmatch+0x354>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 801f0c6:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801f0c8:	697b      	ldr	r3, [r7, #20]
 801f0ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801f0cc:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 801f0ce:	693b      	ldr	r3, [r7, #16]
 801f0d0:	681b      	ldr	r3, [r3, #0]
 801f0d2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801f0d4:	3204      	adds	r2, #4
 801f0d6:	2104      	movs	r1, #4
 801f0d8:	9103      	str	r1, [sp, #12]
 801f0da:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 801f0de:	9102      	str	r1, [sp, #8]
 801f0e0:	9201      	str	r2, [sp, #4]
 801f0e2:	9300      	str	r3, [sp, #0]
 801f0e4:	4623      	mov	r3, r4
 801f0e6:	4602      	mov	r2, r0
 801f0e8:	2100      	movs	r1, #0
 801f0ea:	6978      	ldr	r0, [r7, #20]
 801f0ec:	f7fe f856 	bl	801d19c <lfs_bd_read>
 801f0f0:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 801f0f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f0f4:	2b00      	cmp	r3, #0
 801f0f6:	d006      	beq.n	801f106 <lfs_dir_fetchmatch+0x2d6>
                    if (err == LFS_ERR_CORRUPT) {
 801f0f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f0fa:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 801f0fe:	f000 817c 	beq.w	801f3fa <lfs_dir_fetchmatch+0x5ca>
                        break;
                    }
                    return err;
 801f102:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
                return err;
 801f104:	e257      	b.n	801f5b6 <lfs_dir_fetchmatch+0x786>
                }
                dcrc = lfs_fromle32(dcrc);
 801f106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f108:	4618      	mov	r0, r3
 801f10a:	f7fd ffdc 	bl	801d0c6 <lfs_fromle32>
 801f10e:	4603      	mov	r3, r0
 801f110:	62bb      	str	r3, [r7, #40]	@ 0x28

                if (crc != dcrc) {
 801f112:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801f114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f116:	429a      	cmp	r2, r3
 801f118:	f040 8171 	bne.w	801f3fe <lfs_dir_fetchmatch+0x5ce>
                    break;
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 801f11c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f11e:	4618      	mov	r0, r3
 801f120:	f7fe fcba 	bl	801da98 <lfs_tag_chunk>
 801f124:	4603      	mov	r3, r0
 801f126:	07db      	lsls	r3, r3, #31
 801f128:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801f12a:	4053      	eors	r3, r2
 801f12c:	66bb      	str	r3, [r7, #104]	@ 0x68

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 801f12e:	697b      	ldr	r3, [r7, #20]
 801f130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f132:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801f136:	2204      	movs	r2, #4
 801f138:	4618      	mov	r0, r3
 801f13a:	f005 fe4b 	bl	8024dd4 <lfs_crc>
 801f13e:	4602      	mov	r2, r0
 801f140:	697b      	ldr	r3, [r7, #20]
 801f142:	62da      	str	r2, [r3, #44]	@ 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 801f144:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801f146:	67fb      	str	r3, [r7, #124]	@ 0x7c
                dir->off = off + lfs_tag_dsize(tag);
 801f148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f14a:	4618      	mov	r0, r3
 801f14c:	f7fe fcdb 	bl	801db06 <lfs_tag_dsize>
 801f150:	4602      	mov	r2, r0
 801f152:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801f154:	441a      	add	r2, r3
 801f156:	693b      	ldr	r3, [r7, #16]
 801f158:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 801f15a:	693b      	ldr	r3, [r7, #16]
 801f15c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801f15e:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 801f160:	693b      	ldr	r3, [r7, #16]
 801f162:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 801f166:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 801f168:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801f16a:	693b      	ldr	r3, [r7, #16]
 801f16c:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 801f16e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801f170:	693b      	ldr	r3, [r7, #16]
 801f172:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 801f174:	693b      	ldr	r3, [r7, #16]
 801f176:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 801f17a:	75da      	strb	r2, [r3, #23]

                // reset crc, hasfcrc
                crc = 0xffffffff;
 801f17c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f180:	633b      	str	r3, [r7, #48]	@ 0x30
 801f182:	e73c      	b.n	801effe <lfs_dir_fetchmatch+0x1ce>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            err = lfs_bd_crc(lfs,
 801f184:	697e      	ldr	r6, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 801f186:	697b      	ldr	r3, [r7, #20]
 801f188:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801f18a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f18c:	607b      	str	r3, [r7, #4]
            err = lfs_bd_crc(lfs,
 801f18e:	693b      	ldr	r3, [r7, #16]
 801f190:	681c      	ldr	r4, [r3, #0]
 801f192:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801f194:	1d1d      	adds	r5, r3, #4
                    dir->pair[0], off+sizeof(tag),
                    lfs_tag_dsize(tag)-sizeof(tag), &crc);
 801f196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f198:	4618      	mov	r0, r3
 801f19a:	f7fe fcb4 	bl	801db06 <lfs_tag_dsize>
 801f19e:	4603      	mov	r3, r0
            err = lfs_bd_crc(lfs,
 801f1a0:	3b04      	subs	r3, #4
 801f1a2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801f1a6:	9203      	str	r2, [sp, #12]
 801f1a8:	9302      	str	r3, [sp, #8]
 801f1aa:	9501      	str	r5, [sp, #4]
 801f1ac:	9400      	str	r4, [sp, #0]
 801f1ae:	687b      	ldr	r3, [r7, #4]
 801f1b0:	4632      	mov	r2, r6
 801f1b2:	2100      	movs	r1, #0
 801f1b4:	6978      	ldr	r0, [r7, #20]
 801f1b6:	f7fe f98e 	bl	801d4d6 <lfs_bd_crc>
 801f1ba:	65b8      	str	r0, [r7, #88]	@ 0x58
            if (err) {
 801f1bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f1be:	2b00      	cmp	r3, #0
 801f1c0:	d006      	beq.n	801f1d0 <lfs_dir_fetchmatch+0x3a0>
                if (err == LFS_ERR_CORRUPT) {
 801f1c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f1c4:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 801f1c8:	f000 811b 	beq.w	801f402 <lfs_dir_fetchmatch+0x5d2>
                    break;
                }
                return err;
 801f1cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f1ce:	e1f2      	b.n	801f5b6 <lfs_dir_fetchmatch+0x786>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 801f1d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f1d2:	4618      	mov	r0, r3
 801f1d4:	f7fe fc30 	bl	801da38 <lfs_tag_type1>
 801f1d8:	4603      	mov	r3, r0
 801f1da:	2b00      	cmp	r3, #0
 801f1dc:	d113      	bne.n	801f206 <lfs_dir_fetchmatch+0x3d6>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 801f1de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f1e0:	4618      	mov	r0, r3
 801f1e2:	f7fe fc73 	bl	801dacc <lfs_tag_id>
 801f1e6:	4603      	mov	r3, r0
 801f1e8:	461a      	mov	r2, r3
 801f1ea:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 801f1ee:	4293      	cmp	r3, r2
 801f1f0:	f200 80b6 	bhi.w	801f360 <lfs_dir_fetchmatch+0x530>
                    tempcount = lfs_tag_id(tag) + 1;
 801f1f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f1f6:	4618      	mov	r0, r3
 801f1f8:	f7fe fc68 	bl	801dacc <lfs_tag_id>
 801f1fc:	4603      	mov	r3, r0
 801f1fe:	3301      	adds	r3, #1
 801f200:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 801f204:	e0ac      	b.n	801f360 <lfs_dir_fetchmatch+0x530>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 801f206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f208:	4618      	mov	r0, r3
 801f20a:	f7fe fc15 	bl	801da38 <lfs_tag_type1>
 801f20e:	4603      	mov	r3, r0
 801f210:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801f214:	d13a      	bne.n	801f28c <lfs_dir_fetchmatch+0x45c>
                tempcount += lfs_tag_splice(tag);
 801f216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f218:	4618      	mov	r0, r3
 801f21a:	f7fe fc4a 	bl	801dab2 <lfs_tag_splice>
 801f21e:	4603      	mov	r3, r0
 801f220:	b29a      	uxth	r2, r3
 801f222:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 801f226:	4413      	add	r3, r2
 801f228:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 801f22c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801f22e:	4b08      	ldr	r3, [pc, #32]	@ (801f250 <lfs_dir_fetchmatch+0x420>)
 801f230:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 801f232:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801f236:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801f23a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801f23c:	4293      	cmp	r3, r2
 801f23e:	d109      	bne.n	801f254 <lfs_dir_fetchmatch+0x424>
                    tempbesttag |= 0x80000000;
 801f240:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801f242:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801f246:	663b      	str	r3, [r7, #96]	@ 0x60
 801f248:	e08a      	b.n	801f360 <lfs_dir_fetchmatch+0x530>
 801f24a:	bf00      	nop
 801f24c:	08040a8c 	.word	0x08040a8c
 801f250:	000ffc00 	.word	0x000ffc00
                } else if (tempbesttag != -1 &&
 801f254:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801f256:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801f25a:	f000 8081 	beq.w	801f360 <lfs_dir_fetchmatch+0x530>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 801f25e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f260:	4618      	mov	r0, r3
 801f262:	f7fe fc33 	bl	801dacc <lfs_tag_id>
 801f266:	4603      	mov	r3, r0
 801f268:	461c      	mov	r4, r3
 801f26a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801f26c:	4618      	mov	r0, r3
 801f26e:	f7fe fc2d 	bl	801dacc <lfs_tag_id>
 801f272:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 801f274:	429c      	cmp	r4, r3
 801f276:	d873      	bhi.n	801f360 <lfs_dir_fetchmatch+0x530>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 801f278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f27a:	4618      	mov	r0, r3
 801f27c:	f7fe fc19 	bl	801dab2 <lfs_tag_splice>
 801f280:	4603      	mov	r3, r0
 801f282:	029a      	lsls	r2, r3, #10
 801f284:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801f286:	4413      	add	r3, r2
 801f288:	663b      	str	r3, [r7, #96]	@ 0x60
 801f28a:	e069      	b.n	801f360 <lfs_dir_fetchmatch+0x530>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 801f28c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f28e:	4618      	mov	r0, r3
 801f290:	f7fe fbd2 	bl	801da38 <lfs_tag_type1>
 801f294:	4603      	mov	r3, r0
 801f296:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 801f29a:	d132      	bne.n	801f302 <lfs_dir_fetchmatch+0x4d2>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 801f29c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f29e:	4618      	mov	r0, r3
 801f2a0:	f7fe fbfa 	bl	801da98 <lfs_tag_chunk>
 801f2a4:	4603      	mov	r3, r0
 801f2a6:	f003 0301 	and.w	r3, r3, #1
 801f2aa:	2b00      	cmp	r3, #0
 801f2ac:	bf14      	ite	ne
 801f2ae:	2301      	movne	r3, #1
 801f2b0:	2300      	moveq	r3, #0
 801f2b2:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

                err = lfs_bd_read(lfs,
 801f2b6:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801f2b8:	697b      	ldr	r3, [r7, #20]
 801f2ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801f2bc:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 801f2be:	693b      	ldr	r3, [r7, #16]
 801f2c0:	681b      	ldr	r3, [r3, #0]
 801f2c2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801f2c4:	3204      	adds	r2, #4
 801f2c6:	2108      	movs	r1, #8
 801f2c8:	9103      	str	r1, [sp, #12]
 801f2ca:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 801f2ce:	9102      	str	r1, [sp, #8]
 801f2d0:	9201      	str	r2, [sp, #4]
 801f2d2:	9300      	str	r3, [sp, #0]
 801f2d4:	4623      	mov	r3, r4
 801f2d6:	4602      	mov	r2, r0
 801f2d8:	2100      	movs	r1, #0
 801f2da:	6978      	ldr	r0, [r7, #20]
 801f2dc:	f7fd ff5e 	bl	801d19c <lfs_bd_read>
 801f2e0:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 801f2e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f2e4:	2b00      	cmp	r3, #0
 801f2e6:	d006      	beq.n	801f2f6 <lfs_dir_fetchmatch+0x4c6>
                    if (err == LFS_ERR_CORRUPT) {
 801f2e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f2ea:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 801f2ee:	f000 808a 	beq.w	801f406 <lfs_dir_fetchmatch+0x5d6>
                        break;
                    }
                    return err;
 801f2f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f2f4:	e15f      	b.n	801f5b6 <lfs_dir_fetchmatch+0x786>
                }
                lfs_pair_fromle32(temptail);
 801f2f6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801f2fa:	4618      	mov	r0, r3
 801f2fc:	f7fe fb47 	bl	801d98e <lfs_pair_fromle32>
 801f300:	e02e      	b.n	801f360 <lfs_dir_fetchmatch+0x530>
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 801f302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f304:	4618      	mov	r0, r3
 801f306:	f7fe fbb7 	bl	801da78 <lfs_tag_type3>
 801f30a:	4603      	mov	r3, r0
 801f30c:	461a      	mov	r2, r3
 801f30e:	f240 53ff 	movw	r3, #1535	@ 0x5ff
 801f312:	429a      	cmp	r2, r3
 801f314:	d124      	bne.n	801f360 <lfs_dir_fetchmatch+0x530>
                err = lfs_bd_read(lfs,
 801f316:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801f318:	697b      	ldr	r3, [r7, #20]
 801f31a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801f31c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 801f31e:	693b      	ldr	r3, [r7, #16]
 801f320:	681b      	ldr	r3, [r3, #0]
 801f322:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801f324:	3204      	adds	r2, #4
 801f326:	2108      	movs	r1, #8
 801f328:	9103      	str	r1, [sp, #12]
 801f32a:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801f32e:	9102      	str	r1, [sp, #8]
 801f330:	9201      	str	r2, [sp, #4]
 801f332:	9300      	str	r3, [sp, #0]
 801f334:	4623      	mov	r3, r4
 801f336:	4602      	mov	r2, r0
 801f338:	2100      	movs	r1, #0
 801f33a:	6978      	ldr	r0, [r7, #20]
 801f33c:	f7fd ff2e 	bl	801d19c <lfs_bd_read>
 801f340:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag),
                        &fcrc, sizeof(fcrc));
                if (err) {
 801f342:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f344:	2b00      	cmp	r3, #0
 801f346:	d003      	beq.n	801f350 <lfs_dir_fetchmatch+0x520>
                    if (err == LFS_ERR_CORRUPT) {
 801f348:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f34a:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 801f34e:	d05c      	beq.n	801f40a <lfs_dir_fetchmatch+0x5da>
                        break;
                    }
                }

                lfs_fcrc_fromle32(&fcrc);
 801f350:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801f354:	4618      	mov	r0, r3
 801f356:	f7fe fcd5 	bl	801dd04 <lfs_fcrc_fromle32>
                hasfcrc = true;
 801f35a:	2301      	movs	r3, #1
 801f35c:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 801f360:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801f362:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801f366:	405a      	eors	r2, r3
 801f368:	68bb      	ldr	r3, [r7, #8]
 801f36a:	4013      	ands	r3, r2
 801f36c:	2b00      	cmp	r3, #0
 801f36e:	f47f ae46 	bne.w	801effe <lfs_dir_fetchmatch+0x1ce>
                int res = cb(data, tag, &(struct lfs_diskoff){
 801f372:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
                        dir->pair[0], off+sizeof(tag)});
 801f374:	693b      	ldr	r3, [r7, #16]
 801f376:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 801f378:	623b      	str	r3, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 801f37a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801f37c:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 801f37e:	627b      	str	r3, [r7, #36]	@ 0x24
 801f380:	f107 0220 	add.w	r2, r7, #32
 801f384:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801f388:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 801f38c:	4798      	blx	r3
 801f38e:	6578      	str	r0, [r7, #84]	@ 0x54
                if (res < 0) {
 801f390:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f392:	2b00      	cmp	r3, #0
 801f394:	da05      	bge.n	801f3a2 <lfs_dir_fetchmatch+0x572>
                    if (res == LFS_ERR_CORRUPT) {
 801f396:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f398:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 801f39c:	d037      	beq.n	801f40e <lfs_dir_fetchmatch+0x5de>
                        break;
                    }
                    return res;
 801f39e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
                return err;
 801f3a0:	e109      	b.n	801f5b6 <lfs_dir_fetchmatch+0x786>
                }

                if (res == LFS_CMP_EQ) {
 801f3a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f3a4:	2b00      	cmp	r3, #0
 801f3a6:	d102      	bne.n	801f3ae <lfs_dir_fetchmatch+0x57e>
                    // found a match
                    tempbesttag = tag;
 801f3a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f3aa:	663b      	str	r3, [r7, #96]	@ 0x60
 801f3ac:	e627      	b.n	801effe <lfs_dir_fetchmatch+0x1ce>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 801f3ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801f3b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801f3b2:	405a      	eors	r2, r3
 801f3b4:	4b82      	ldr	r3, [pc, #520]	@ (801f5c0 <lfs_dir_fetchmatch+0x790>)
 801f3b6:	4013      	ands	r3, r2
 801f3b8:	2b00      	cmp	r3, #0
 801f3ba:	d103      	bne.n	801f3c4 <lfs_dir_fetchmatch+0x594>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 801f3bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f3c0:	663b      	str	r3, [r7, #96]	@ 0x60
 801f3c2:	e61c      	b.n	801effe <lfs_dir_fetchmatch+0x1ce>
                } else if (res == LFS_CMP_GT &&
 801f3c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f3c6:	2b02      	cmp	r3, #2
 801f3c8:	f47f ae19 	bne.w	801effe <lfs_dir_fetchmatch+0x1ce>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 801f3cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f3ce:	4618      	mov	r0, r3
 801f3d0:	f7fe fb7c 	bl	801dacc <lfs_tag_id>
 801f3d4:	4603      	mov	r3, r0
 801f3d6:	461c      	mov	r4, r3
 801f3d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801f3da:	4618      	mov	r0, r3
 801f3dc:	f7fe fb76 	bl	801dacc <lfs_tag_id>
 801f3e0:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 801f3e2:	429c      	cmp	r4, r3
 801f3e4:	f63f ae0b 	bhi.w	801effe <lfs_dir_fetchmatch+0x1ce>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 801f3e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f3ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801f3ee:	663b      	str	r3, [r7, #96]	@ 0x60
 801f3f0:	e605      	b.n	801effe <lfs_dir_fetchmatch+0x1ce>
                    break;
 801f3f2:	bf00      	nop
 801f3f4:	e00c      	b.n	801f410 <lfs_dir_fetchmatch+0x5e0>
                break;
 801f3f6:	bf00      	nop
 801f3f8:	e00a      	b.n	801f410 <lfs_dir_fetchmatch+0x5e0>
                        break;
 801f3fa:	bf00      	nop
 801f3fc:	e008      	b.n	801f410 <lfs_dir_fetchmatch+0x5e0>
                    break;
 801f3fe:	bf00      	nop
 801f400:	e006      	b.n	801f410 <lfs_dir_fetchmatch+0x5e0>
                    break;
 801f402:	bf00      	nop
 801f404:	e004      	b.n	801f410 <lfs_dir_fetchmatch+0x5e0>
                        break;
 801f406:	bf00      	nop
 801f408:	e002      	b.n	801f410 <lfs_dir_fetchmatch+0x5e0>
                        break;
 801f40a:	bf00      	nop
 801f40c:	e000      	b.n	801f410 <lfs_dir_fetchmatch+0x5e0>
                        break;
 801f40e:	bf00      	nop
                }
            }
        }

        // found no valid commits?
        if (dir->off == 0) {
 801f410:	693b      	ldr	r3, [r7, #16]
 801f412:	68db      	ldr	r3, [r3, #12]
 801f414:	2b00      	cmp	r3, #0
 801f416:	d000      	beq.n	801f41a <lfs_dir_fetchmatch+0x5ea>
 801f418:	e017      	b.n	801f44a <lfs_dir_fetchmatch+0x61a>
            // try the other block?
            lfs_pair_swap(dir->pair);
 801f41a:	693b      	ldr	r3, [r7, #16]
 801f41c:	4618      	mov	r0, r3
 801f41e:	f7fe fa2f 	bl	801d880 <lfs_pair_swap>
            dir->rev = revs[(r+1)%2];
 801f422:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801f424:	3301      	adds	r3, #1
 801f426:	2b00      	cmp	r3, #0
 801f428:	f003 0301 	and.w	r3, r3, #1
 801f42c:	bfb8      	it	lt
 801f42e:	425b      	neglt	r3, r3
 801f430:	009b      	lsls	r3, r3, #2
 801f432:	3378      	adds	r3, #120	@ 0x78
 801f434:	f107 0208 	add.w	r2, r7, #8
 801f438:	4413      	add	r3, r2
 801f43a:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 801f43e:	693b      	ldr	r3, [r7, #16]
 801f440:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 801f442:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801f444:	3301      	adds	r3, #1
 801f446:	673b      	str	r3, [r7, #112]	@ 0x70
 801f448:	e0a1      	b.n	801f58e <lfs_dir_fetchmatch+0x75e>
            continue;
        }

        // did we end on a valid commit? we may have an erased block
        dir->erased = false;
 801f44a:	693b      	ldr	r3, [r7, #16]
 801f44c:	2200      	movs	r2, #0
 801f44e:	759a      	strb	r2, [r3, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 801f450:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801f454:	2b00      	cmp	r3, #0
 801f456:	d03a      	beq.n	801f4ce <lfs_dir_fetchmatch+0x69e>
 801f458:	693b      	ldr	r3, [r7, #16]
 801f45a:	68db      	ldr	r3, [r3, #12]
 801f45c:	697a      	ldr	r2, [r7, #20]
 801f45e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801f460:	6a12      	ldr	r2, [r2, #32]
 801f462:	fbb3 f1f2 	udiv	r1, r3, r2
 801f466:	fb01 f202 	mul.w	r2, r1, r2
 801f46a:	1a9b      	subs	r3, r3, r2
 801f46c:	2b00      	cmp	r3, #0
 801f46e:	d12e      	bne.n	801f4ce <lfs_dir_fetchmatch+0x69e>
            if (lfs_fs_disk_version(lfs) < 0x00020001) {
                dir->erased = true;

            } else
        #endif
            if (hasfcrc) {
 801f470:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 801f474:	2b00      	cmp	r3, #0
 801f476:	d02a      	beq.n	801f4ce <lfs_dir_fetchmatch+0x69e>
                // check for an fcrc matching the next prog's erased state, if
                // this failed most likely a previous prog was interrupted, we
                // need a new erase
                uint32_t fcrc_ = 0xffffffff;
 801f478:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f47c:	61fb      	str	r3, [r7, #28]
                int err = lfs_bd_crc(lfs,
 801f47e:	697c      	ldr	r4, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801f480:	697b      	ldr	r3, [r7, #20]
 801f482:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801f484:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
                int err = lfs_bd_crc(lfs,
 801f486:	693b      	ldr	r3, [r7, #16]
 801f488:	681b      	ldr	r3, [r3, #0]
 801f48a:	693a      	ldr	r2, [r7, #16]
 801f48c:	68d2      	ldr	r2, [r2, #12]
 801f48e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801f490:	f107 001c 	add.w	r0, r7, #28
 801f494:	9003      	str	r0, [sp, #12]
 801f496:	9102      	str	r1, [sp, #8]
 801f498:	9201      	str	r2, [sp, #4]
 801f49a:	9300      	str	r3, [sp, #0]
 801f49c:	462b      	mov	r3, r5
 801f49e:	4622      	mov	r2, r4
 801f4a0:	2100      	movs	r1, #0
 801f4a2:	6978      	ldr	r0, [r7, #20]
 801f4a4:	f7fe f817 	bl	801d4d6 <lfs_bd_crc>
 801f4a8:	6538      	str	r0, [r7, #80]	@ 0x50
                        dir->pair[0], dir->off, fcrc.size, &fcrc_);
                if (err && err != LFS_ERR_CORRUPT) {
 801f4aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f4ac:	2b00      	cmp	r3, #0
 801f4ae:	d005      	beq.n	801f4bc <lfs_dir_fetchmatch+0x68c>
 801f4b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f4b2:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 801f4b6:	d001      	beq.n	801f4bc <lfs_dir_fetchmatch+0x68c>
                    return err;
 801f4b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f4ba:	e07c      	b.n	801f5b6 <lfs_dir_fetchmatch+0x786>
                }

                // found beginning of erased part?
                dir->erased = (fcrc_ == fcrc.crc);
 801f4bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801f4be:	69fb      	ldr	r3, [r7, #28]
 801f4c0:	429a      	cmp	r2, r3
 801f4c2:	bf0c      	ite	eq
 801f4c4:	2301      	moveq	r3, #1
 801f4c6:	2300      	movne	r3, #0
 801f4c8:	b2da      	uxtb	r2, r3
 801f4ca:	693b      	ldr	r3, [r7, #16]
 801f4cc:	759a      	strb	r2, [r3, #22]
            }
        }

        // synthetic move
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 801f4ce:	697b      	ldr	r3, [r7, #20]
 801f4d0:	333c      	adds	r3, #60	@ 0x3c
 801f4d2:	693a      	ldr	r2, [r7, #16]
 801f4d4:	4611      	mov	r1, r2
 801f4d6:	4618      	mov	r0, r3
 801f4d8:	f7fe fbb4 	bl	801dc44 <lfs_gstate_hasmovehere>
 801f4dc:	4603      	mov	r3, r0
 801f4de:	2b00      	cmp	r3, #0
 801f4e0:	d028      	beq.n	801f534 <lfs_dir_fetchmatch+0x704>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 801f4e2:	697b      	ldr	r3, [r7, #20]
 801f4e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f4e6:	4618      	mov	r0, r3
 801f4e8:	f7fe faf0 	bl	801dacc <lfs_tag_id>
 801f4ec:	4603      	mov	r3, r0
 801f4ee:	461c      	mov	r4, r3
 801f4f0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801f4f2:	4618      	mov	r0, r3
 801f4f4:	f7fe faea 	bl	801dacc <lfs_tag_id>
 801f4f8:	4603      	mov	r3, r0
 801f4fa:	429c      	cmp	r4, r3
 801f4fc:	d104      	bne.n	801f508 <lfs_dir_fetchmatch+0x6d8>
                besttag |= 0x80000000;
 801f4fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801f500:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801f504:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801f506:	e015      	b.n	801f534 <lfs_dir_fetchmatch+0x704>
            } else if (besttag != -1 &&
 801f508:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801f50a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801f50e:	d011      	beq.n	801f534 <lfs_dir_fetchmatch+0x704>
                    lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 801f510:	697b      	ldr	r3, [r7, #20]
 801f512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f514:	4618      	mov	r0, r3
 801f516:	f7fe fad9 	bl	801dacc <lfs_tag_id>
 801f51a:	4603      	mov	r3, r0
 801f51c:	461c      	mov	r4, r3
 801f51e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801f520:	4618      	mov	r0, r3
 801f522:	f7fe fad3 	bl	801dacc <lfs_tag_id>
 801f526:	4603      	mov	r3, r0
            } else if (besttag != -1 &&
 801f528:	429c      	cmp	r4, r3
 801f52a:	d203      	bcs.n	801f534 <lfs_dir_fetchmatch+0x704>
                besttag -= LFS_MKTAG(0, 1, 0);
 801f52c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801f52e:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 801f532:	67fb      	str	r3, [r7, #124]	@ 0x7c
            }
        }

        // found tag? or found best id?
        if (id) {
 801f534:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801f538:	2b00      	cmp	r3, #0
 801f53a:	d010      	beq.n	801f55e <lfs_dir_fetchmatch+0x72e>
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 801f53c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801f53e:	4618      	mov	r0, r3
 801f540:	f7fe fac4 	bl	801dacc <lfs_tag_id>
 801f544:	4603      	mov	r3, r0
 801f546:	461a      	mov	r2, r3
 801f548:	693b      	ldr	r3, [r7, #16]
 801f54a:	8a9b      	ldrh	r3, [r3, #20]
 801f54c:	4619      	mov	r1, r3
 801f54e:	4610      	mov	r0, r2
 801f550:	f7fd fd49 	bl	801cfe6 <lfs_min>
 801f554:	4603      	mov	r3, r0
 801f556:	b29a      	uxth	r2, r3
 801f558:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801f55c:	801a      	strh	r2, [r3, #0]
        }

        if (lfs_tag_isvalid(besttag)) {
 801f55e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801f560:	4618      	mov	r0, r3
 801f562:	f7fe fa48 	bl	801d9f6 <lfs_tag_isvalid>
 801f566:	4603      	mov	r3, r0
 801f568:	2b00      	cmp	r3, #0
 801f56a:	d001      	beq.n	801f570 <lfs_dir_fetchmatch+0x740>
            return besttag;
 801f56c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801f56e:	e022      	b.n	801f5b6 <lfs_dir_fetchmatch+0x786>
        } else if (lfs_tag_id(besttag) < dir->count) {
 801f570:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801f572:	4618      	mov	r0, r3
 801f574:	f7fe faaa 	bl	801dacc <lfs_tag_id>
 801f578:	4603      	mov	r3, r0
 801f57a:	461a      	mov	r2, r3
 801f57c:	693b      	ldr	r3, [r7, #16]
 801f57e:	8a9b      	ldrh	r3, [r3, #20]
 801f580:	429a      	cmp	r2, r3
 801f582:	d202      	bcs.n	801f58a <lfs_dir_fetchmatch+0x75a>
            return LFS_ERR_NOENT;
 801f584:	f06f 0301 	mvn.w	r3, #1
 801f588:	e015      	b.n	801f5b6 <lfs_dir_fetchmatch+0x786>
        } else {
            return 0;
 801f58a:	2300      	movs	r3, #0
 801f58c:	e013      	b.n	801f5b6 <lfs_dir_fetchmatch+0x786>
    for (int i = 0; i < 2; i++) {
 801f58e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801f590:	2b01      	cmp	r3, #1
 801f592:	f77f ad00 	ble.w	801ef96 <lfs_dir_fetchmatch+0x166>
        }
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 801f596:	693b      	ldr	r3, [r7, #16]
 801f598:	681a      	ldr	r2, [r3, #0]
 801f59a:	693b      	ldr	r3, [r7, #16]
 801f59c:	685b      	ldr	r3, [r3, #4]
 801f59e:	4909      	ldr	r1, [pc, #36]	@ (801f5c4 <lfs_dir_fetchmatch+0x794>)
 801f5a0:	9101      	str	r1, [sp, #4]
 801f5a2:	9300      	str	r3, [sp, #0]
 801f5a4:	4613      	mov	r3, r2
 801f5a6:	f240 5259 	movw	r2, #1369	@ 0x559
 801f5aa:	4907      	ldr	r1, [pc, #28]	@ (801f5c8 <lfs_dir_fetchmatch+0x798>)
 801f5ac:	4807      	ldr	r0, [pc, #28]	@ (801f5cc <lfs_dir_fetchmatch+0x79c>)
 801f5ae:	f013 feff 	bl	80333b0 <printf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 801f5b2:	f06f 0353 	mvn.w	r3, #83	@ 0x53
}
 801f5b6:	4618      	mov	r0, r3
 801f5b8:	3784      	adds	r7, #132	@ 0x84
 801f5ba:	46bd      	mov	sp, r7
 801f5bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f5be:	bf00      	nop
 801f5c0:	7ffffc00 	.word	0x7ffffc00
 801f5c4:	08040a48 	.word	0x08040a48
 801f5c8:	08040920 	.word	0x08040920
 801f5cc:	08040a54 	.word	0x08040a54

0801f5d0 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 801f5d0:	b580      	push	{r7, lr}
 801f5d2:	b088      	sub	sp, #32
 801f5d4:	af04      	add	r7, sp, #16
 801f5d6:	60f8      	str	r0, [r7, #12]
 801f5d8:	60b9      	str	r1, [r7, #8]
 801f5da:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 801f5dc:	2300      	movs	r3, #0
 801f5de:	9303      	str	r3, [sp, #12]
 801f5e0:	2300      	movs	r3, #0
 801f5e2:	9302      	str	r3, [sp, #8]
 801f5e4:	2300      	movs	r3, #0
 801f5e6:	9301      	str	r3, [sp, #4]
 801f5e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f5ec:	9300      	str	r3, [sp, #0]
 801f5ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f5f2:	687a      	ldr	r2, [r7, #4]
 801f5f4:	68b9      	ldr	r1, [r7, #8]
 801f5f6:	68f8      	ldr	r0, [r7, #12]
 801f5f8:	f7ff fc1a 	bl	801ee30 <lfs_dir_fetchmatch>
 801f5fc:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 801f5fe:	4618      	mov	r0, r3
 801f600:	3710      	adds	r7, #16
 801f602:	46bd      	mov	sp, r7
 801f604:	bd80      	pop	{r7, pc}
	...

0801f608 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 801f608:	b580      	push	{r7, lr}
 801f60a:	b08a      	sub	sp, #40	@ 0x28
 801f60c:	af02      	add	r7, sp, #8
 801f60e:	60f8      	str	r0, [r7, #12]
 801f610:	60b9      	str	r1, [r7, #8]
 801f612:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 801f614:	f107 0310 	add.w	r3, r7, #16
 801f618:	9300      	str	r3, [sp, #0]
 801f61a:	4b12      	ldr	r3, [pc, #72]	@ (801f664 <lfs_dir_getgstate+0x5c>)
 801f61c:	4a12      	ldr	r2, [pc, #72]	@ (801f668 <lfs_dir_getgstate+0x60>)
 801f61e:	68b9      	ldr	r1, [r7, #8]
 801f620:	68f8      	ldr	r0, [r7, #12]
 801f622:	f7fe fecf 	bl	801e3c4 <lfs_dir_get>
 801f626:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 801f628:	69fb      	ldr	r3, [r7, #28]
 801f62a:	2b00      	cmp	r3, #0
 801f62c:	da05      	bge.n	801f63a <lfs_dir_getgstate+0x32>
 801f62e:	69fb      	ldr	r3, [r7, #28]
 801f630:	f113 0f02 	cmn.w	r3, #2
 801f634:	d001      	beq.n	801f63a <lfs_dir_getgstate+0x32>
        return res;
 801f636:	69fb      	ldr	r3, [r7, #28]
 801f638:	e00f      	b.n	801f65a <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 801f63a:	69fb      	ldr	r3, [r7, #28]
 801f63c:	f113 0f02 	cmn.w	r3, #2
 801f640:	d00a      	beq.n	801f658 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 801f642:	f107 0310 	add.w	r3, r7, #16
 801f646:	4618      	mov	r0, r3
 801f648:	f7fe fb1c 	bl	801dc84 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 801f64c:	f107 0310 	add.w	r3, r7, #16
 801f650:	4619      	mov	r1, r3
 801f652:	6878      	ldr	r0, [r7, #4]
 801f654:	f7fe fa6b 	bl	801db2e <lfs_gstate_xor>
    }

    return 0;
 801f658:	2300      	movs	r3, #0
}
 801f65a:	4618      	mov	r0, r3
 801f65c:	3720      	adds	r7, #32
 801f65e:	46bd      	mov	sp, r7
 801f660:	bd80      	pop	{r7, pc}
 801f662:	bf00      	nop
 801f664:	7ff0000c 	.word	0x7ff0000c
 801f668:	7ff00000 	.word	0x7ff00000

0801f66c <lfs_dir_getinfo>:

static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,
        uint16_t id, struct lfs_info *info) {
 801f66c:	b580      	push	{r7, lr}
 801f66e:	b08a      	sub	sp, #40	@ 0x28
 801f670:	af02      	add	r7, sp, #8
 801f672:	60f8      	str	r0, [r7, #12]
 801f674:	60b9      	str	r1, [r7, #8]
 801f676:	603b      	str	r3, [r7, #0]
 801f678:	4613      	mov	r3, r2
 801f67a:	80fb      	strh	r3, [r7, #6]
    if (id == 0x3ff) {
 801f67c:	88fb      	ldrh	r3, [r7, #6]
 801f67e:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 801f682:	4293      	cmp	r3, r2
 801f684:	d10b      	bne.n	801f69e <lfs_dir_getinfo+0x32>
        // special case for root
        strcpy(info->name, "/");
 801f686:	683b      	ldr	r3, [r7, #0]
 801f688:	3308      	adds	r3, #8
 801f68a:	4932      	ldr	r1, [pc, #200]	@ (801f754 <lfs_dir_getinfo+0xe8>)
 801f68c:	461a      	mov	r2, r3
 801f68e:	460b      	mov	r3, r1
 801f690:	881b      	ldrh	r3, [r3, #0]
 801f692:	8013      	strh	r3, [r2, #0]
        info->type = LFS_TYPE_DIR;
 801f694:	683b      	ldr	r3, [r7, #0]
 801f696:	2202      	movs	r2, #2
 801f698:	701a      	strb	r2, [r3, #0]
        return 0;
 801f69a:	2300      	movs	r3, #0
 801f69c:	e055      	b.n	801f74a <lfs_dir_getinfo+0xde>
    }

    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 801f69e:	88fb      	ldrh	r3, [r7, #6]
 801f6a0:	029a      	lsls	r2, r3, #10
 801f6a2:	68fb      	ldr	r3, [r7, #12]
 801f6a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f6a6:	3301      	adds	r3, #1
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 801f6a8:	431a      	orrs	r2, r3
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 801f6aa:	683b      	ldr	r3, [r7, #0]
 801f6ac:	3308      	adds	r3, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 801f6ae:	9300      	str	r3, [sp, #0]
 801f6b0:	4613      	mov	r3, r2
 801f6b2:	4a29      	ldr	r2, [pc, #164]	@ (801f758 <lfs_dir_getinfo+0xec>)
 801f6b4:	68b9      	ldr	r1, [r7, #8]
 801f6b6:	68f8      	ldr	r0, [r7, #12]
 801f6b8:	f7fe fe84 	bl	801e3c4 <lfs_dir_get>
 801f6bc:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 801f6be:	69fb      	ldr	r3, [r7, #28]
 801f6c0:	2b00      	cmp	r3, #0
 801f6c2:	da01      	bge.n	801f6c8 <lfs_dir_getinfo+0x5c>
        return (int)tag;
 801f6c4:	69fb      	ldr	r3, [r7, #28]
 801f6c6:	e040      	b.n	801f74a <lfs_dir_getinfo+0xde>
    }

    info->type = lfs_tag_type3(tag);
 801f6c8:	69fb      	ldr	r3, [r7, #28]
 801f6ca:	4618      	mov	r0, r3
 801f6cc:	f7fe f9d4 	bl	801da78 <lfs_tag_type3>
 801f6d0:	4603      	mov	r3, r0
 801f6d2:	b2da      	uxtb	r2, r3
 801f6d4:	683b      	ldr	r3, [r7, #0]
 801f6d6:	701a      	strb	r2, [r3, #0]

    struct lfs_ctz ctz;
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 801f6d8:	88fb      	ldrh	r3, [r7, #6]
 801f6da:	029b      	lsls	r3, r3, #10
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801f6dc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801f6e0:	f043 0308 	orr.w	r3, r3, #8
 801f6e4:	f107 0214 	add.w	r2, r7, #20
 801f6e8:	9200      	str	r2, [sp, #0]
 801f6ea:	4a1c      	ldr	r2, [pc, #112]	@ (801f75c <lfs_dir_getinfo+0xf0>)
 801f6ec:	68b9      	ldr	r1, [r7, #8]
 801f6ee:	68f8      	ldr	r0, [r7, #12]
 801f6f0:	f7fe fe68 	bl	801e3c4 <lfs_dir_get>
 801f6f4:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 801f6f6:	69fb      	ldr	r3, [r7, #28]
 801f6f8:	2b00      	cmp	r3, #0
 801f6fa:	da01      	bge.n	801f700 <lfs_dir_getinfo+0x94>
        return (int)tag;
 801f6fc:	69fb      	ldr	r3, [r7, #28]
 801f6fe:	e024      	b.n	801f74a <lfs_dir_getinfo+0xde>
    }
    lfs_ctz_fromle32(&ctz);
 801f700:	f107 0314 	add.w	r3, r7, #20
 801f704:	4618      	mov	r0, r3
 801f706:	f7fe fb2d 	bl	801dd64 <lfs_ctz_fromle32>

    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 801f70a:	69fb      	ldr	r3, [r7, #28]
 801f70c:	4618      	mov	r0, r3
 801f70e:	f7fe f9b3 	bl	801da78 <lfs_tag_type3>
 801f712:	4603      	mov	r3, r0
 801f714:	461a      	mov	r2, r3
 801f716:	f240 2302 	movw	r3, #514	@ 0x202
 801f71a:	429a      	cmp	r2, r3
 801f71c:	d103      	bne.n	801f726 <lfs_dir_getinfo+0xba>
        info->size = ctz.size;
 801f71e:	69ba      	ldr	r2, [r7, #24]
 801f720:	683b      	ldr	r3, [r7, #0]
 801f722:	605a      	str	r2, [r3, #4]
 801f724:	e010      	b.n	801f748 <lfs_dir_getinfo+0xdc>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 801f726:	69fb      	ldr	r3, [r7, #28]
 801f728:	4618      	mov	r0, r3
 801f72a:	f7fe f9a5 	bl	801da78 <lfs_tag_type3>
 801f72e:	4603      	mov	r3, r0
 801f730:	461a      	mov	r2, r3
 801f732:	f240 2301 	movw	r3, #513	@ 0x201
 801f736:	429a      	cmp	r2, r3
 801f738:	d106      	bne.n	801f748 <lfs_dir_getinfo+0xdc>
        info->size = lfs_tag_size(tag);
 801f73a:	69fb      	ldr	r3, [r7, #28]
 801f73c:	4618      	mov	r0, r3
 801f73e:	f7fe f9d5 	bl	801daec <lfs_tag_size>
 801f742:	4602      	mov	r2, r0
 801f744:	683b      	ldr	r3, [r7, #0]
 801f746:	605a      	str	r2, [r3, #4]
    }

    return 0;
 801f748:	2300      	movs	r3, #0
}
 801f74a:	4618      	mov	r0, r3
 801f74c:	3720      	adds	r7, #32
 801f74e:	46bd      	mov	sp, r7
 801f750:	bd80      	pop	{r7, pc}
 801f752:	bf00      	nop
 801f754:	08040a94 	.word	0x08040a94
 801f758:	780ffc00 	.word	0x780ffc00
 801f75c:	700ffc00 	.word	0x700ffc00

0801f760 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 801f760:	b590      	push	{r4, r7, lr}
 801f762:	b08f      	sub	sp, #60	@ 0x3c
 801f764:	af04      	add	r7, sp, #16
 801f766:	60f8      	str	r0, [r7, #12]
 801f768:	60b9      	str	r1, [r7, #8]
 801f76a:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 801f76c:	68fb      	ldr	r3, [r7, #12]
 801f76e:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_t *lfs = name->lfs;
 801f770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f772:	681b      	ldr	r3, [r3, #0]
 801f774:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 801f776:	687b      	ldr	r3, [r7, #4]
 801f778:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 801f77a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f77c:	689c      	ldr	r4, [r3, #8]
 801f77e:	68b8      	ldr	r0, [r7, #8]
 801f780:	f7fe f9b4 	bl	801daec <lfs_tag_size>
 801f784:	4603      	mov	r3, r0
 801f786:	4619      	mov	r1, r3
 801f788:	4620      	mov	r0, r4
 801f78a:	f7fd fc2c 	bl	801cfe6 <lfs_min>
 801f78e:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 801f790:	6a3c      	ldr	r4, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 801f792:	69fb      	ldr	r3, [r7, #28]
 801f794:	681b      	ldr	r3, [r3, #0]
 801f796:	69fa      	ldr	r2, [r7, #28]
 801f798:	6852      	ldr	r2, [r2, #4]
    int res = lfs_bd_cmp(lfs,
 801f79a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801f79c:	6849      	ldr	r1, [r1, #4]
 801f79e:	69b8      	ldr	r0, [r7, #24]
 801f7a0:	9003      	str	r0, [sp, #12]
 801f7a2:	9102      	str	r1, [sp, #8]
 801f7a4:	9201      	str	r2, [sp, #4]
 801f7a6:	9300      	str	r3, [sp, #0]
 801f7a8:	69bb      	ldr	r3, [r7, #24]
 801f7aa:	4622      	mov	r2, r4
 801f7ac:	2100      	movs	r1, #0
 801f7ae:	6a38      	ldr	r0, [r7, #32]
 801f7b0:	f7fd fe40 	bl	801d434 <lfs_bd_cmp>
 801f7b4:	6178      	str	r0, [r7, #20]
    if (res != LFS_CMP_EQ) {
 801f7b6:	697b      	ldr	r3, [r7, #20]
 801f7b8:	2b00      	cmp	r3, #0
 801f7ba:	d001      	beq.n	801f7c0 <lfs_dir_find_match+0x60>
        return res;
 801f7bc:	697b      	ldr	r3, [r7, #20]
 801f7be:	e014      	b.n	801f7ea <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 801f7c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f7c2:	689c      	ldr	r4, [r3, #8]
 801f7c4:	68b8      	ldr	r0, [r7, #8]
 801f7c6:	f7fe f991 	bl	801daec <lfs_tag_size>
 801f7ca:	4603      	mov	r3, r0
 801f7cc:	429c      	cmp	r4, r3
 801f7ce:	d00b      	beq.n	801f7e8 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 801f7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f7d2:	689c      	ldr	r4, [r3, #8]
 801f7d4:	68b8      	ldr	r0, [r7, #8]
 801f7d6:	f7fe f989 	bl	801daec <lfs_tag_size>
 801f7da:	4603      	mov	r3, r0
 801f7dc:	429c      	cmp	r4, r3
 801f7de:	d201      	bcs.n	801f7e4 <lfs_dir_find_match+0x84>
 801f7e0:	2301      	movs	r3, #1
 801f7e2:	e002      	b.n	801f7ea <lfs_dir_find_match+0x8a>
 801f7e4:	2302      	movs	r3, #2
 801f7e6:	e000      	b.n	801f7ea <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 801f7e8:	2300      	movs	r3, #0
}
 801f7ea:	4618      	mov	r0, r3
 801f7ec:	372c      	adds	r7, #44	@ 0x2c
 801f7ee:	46bd      	mov	sp, r7
 801f7f0:	bd90      	pop	{r4, r7, pc}
	...

0801f7f4 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 801f7f4:	b590      	push	{r4, r7, lr}
 801f7f6:	b093      	sub	sp, #76	@ 0x4c
 801f7f8:	af04      	add	r7, sp, #16
 801f7fa:	60f8      	str	r0, [r7, #12]
 801f7fc:	60b9      	str	r1, [r7, #8]
 801f7fe:	607a      	str	r2, [r7, #4]
 801f800:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 801f802:	687b      	ldr	r3, [r7, #4]
 801f804:	681b      	ldr	r3, [r3, #0]
 801f806:	637b      	str	r3, [r7, #52]	@ 0x34
    if (id) {
 801f808:	683b      	ldr	r3, [r7, #0]
 801f80a:	2b00      	cmp	r3, #0
 801f80c:	d003      	beq.n	801f816 <lfs_dir_find+0x22>
        *id = 0x3ff;
 801f80e:	683b      	ldr	r3, [r7, #0]
 801f810:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 801f814:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 801f816:	4b6e      	ldr	r3, [pc, #440]	@ (801f9d0 <lfs_dir_find+0x1dc>)
 801f818:	633b      	str	r3, [r7, #48]	@ 0x30
    dir->tail[0] = lfs->root[0];
 801f81a:	68fb      	ldr	r3, [r7, #12]
 801f81c:	6a1a      	ldr	r2, [r3, #32]
 801f81e:	68bb      	ldr	r3, [r7, #8]
 801f820:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 801f822:	68fb      	ldr	r3, [r7, #12]
 801f824:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801f826:	68bb      	ldr	r3, [r7, #8]
 801f828:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 801f82a:	496a      	ldr	r1, [pc, #424]	@ (801f9d4 <lfs_dir_find+0x1e0>)
 801f82c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801f82e:	f016 fb4f 	bl	8035ed0 <strspn>
 801f832:	4602      	mov	r2, r0
 801f834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f836:	4413      	add	r3, r2
 801f838:	637b      	str	r3, [r7, #52]	@ 0x34
        lfs_size_t namelen = strcspn(name, "/");
 801f83a:	4966      	ldr	r1, [pc, #408]	@ (801f9d4 <lfs_dir_find+0x1e0>)
 801f83c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801f83e:	f016 fafb 	bl	8035e38 <strcspn>
 801f842:	6278      	str	r0, [r7, #36]	@ 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 801f844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f846:	2b01      	cmp	r3, #1
 801f848:	d105      	bne.n	801f856 <lfs_dir_find+0x62>
 801f84a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f84c:	781a      	ldrb	r2, [r3, #0]
 801f84e:	4b62      	ldr	r3, [pc, #392]	@ (801f9d8 <lfs_dir_find+0x1e4>)
 801f850:	781b      	ldrb	r3, [r3, #0]
 801f852:	429a      	cmp	r2, r3
 801f854:	d00a      	beq.n	801f86c <lfs_dir_find+0x78>
 801f856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f858:	2b02      	cmp	r3, #2
 801f85a:	d10c      	bne.n	801f876 <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 801f85c:	2202      	movs	r2, #2
 801f85e:	495f      	ldr	r1, [pc, #380]	@ (801f9dc <lfs_dir_find+0x1e8>)
 801f860:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801f862:	f016 fa31 	bl	8035cc8 <memcmp>
 801f866:	4603      	mov	r3, r0
 801f868:	2b00      	cmp	r3, #0
 801f86a:	d104      	bne.n	801f876 <lfs_dir_find+0x82>
            name += namelen;
 801f86c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801f86e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f870:	4413      	add	r3, r2
 801f872:	637b      	str	r3, [r7, #52]	@ 0x34
            goto nextname;
 801f874:	e7d9      	b.n	801f82a <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 801f876:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801f878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f87a:	4413      	add	r3, r2
 801f87c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 801f87e:	2301      	movs	r3, #1
 801f880:	62bb      	str	r3, [r7, #40]	@ 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 801f882:	4954      	ldr	r1, [pc, #336]	@ (801f9d4 <lfs_dir_find+0x1e0>)
 801f884:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801f886:	f016 fb23 	bl	8035ed0 <strspn>
 801f88a:	4602      	mov	r2, r0
 801f88c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f88e:	4413      	add	r3, r2
 801f890:	62fb      	str	r3, [r7, #44]	@ 0x2c
            sufflen = strcspn(suffix, "/");
 801f892:	4950      	ldr	r1, [pc, #320]	@ (801f9d4 <lfs_dir_find+0x1e0>)
 801f894:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801f896:	f016 facf 	bl	8035e38 <strcspn>
 801f89a:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 801f89c:	6a3b      	ldr	r3, [r7, #32]
 801f89e:	2b00      	cmp	r3, #0
 801f8a0:	d01d      	beq.n	801f8de <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 801f8a2:	6a3b      	ldr	r3, [r7, #32]
 801f8a4:	2b02      	cmp	r3, #2
 801f8a6:	d112      	bne.n	801f8ce <lfs_dir_find+0xda>
 801f8a8:	2202      	movs	r2, #2
 801f8aa:	494c      	ldr	r1, [pc, #304]	@ (801f9dc <lfs_dir_find+0x1e8>)
 801f8ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801f8ae:	f016 fa0b 	bl	8035cc8 <memcmp>
 801f8b2:	4603      	mov	r3, r0
 801f8b4:	2b00      	cmp	r3, #0
 801f8b6:	d10a      	bne.n	801f8ce <lfs_dir_find+0xda>
                depth -= 1;
 801f8b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f8ba:	3b01      	subs	r3, #1
 801f8bc:	62bb      	str	r3, [r7, #40]	@ 0x28
                if (depth == 0) {
 801f8be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f8c0:	2b00      	cmp	r3, #0
 801f8c2:	d107      	bne.n	801f8d4 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 801f8c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801f8c6:	6a3b      	ldr	r3, [r7, #32]
 801f8c8:	4413      	add	r3, r2
 801f8ca:	637b      	str	r3, [r7, #52]	@ 0x34
                    goto nextname;
 801f8cc:	e7ad      	b.n	801f82a <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 801f8ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f8d0:	3301      	adds	r3, #1
 801f8d2:	62bb      	str	r3, [r7, #40]	@ 0x28
            }

            suffix += sufflen;
 801f8d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801f8d6:	6a3b      	ldr	r3, [r7, #32]
 801f8d8:	4413      	add	r3, r2
 801f8da:	62fb      	str	r3, [r7, #44]	@ 0x2c
            suffix += strspn(suffix, "/");
 801f8dc:	e7d1      	b.n	801f882 <lfs_dir_find+0x8e>
                break;
 801f8de:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 801f8e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f8e2:	781b      	ldrb	r3, [r3, #0]
 801f8e4:	2b00      	cmp	r3, #0
 801f8e6:	d101      	bne.n	801f8ec <lfs_dir_find+0xf8>
            return tag;
 801f8e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f8ea:	e06c      	b.n	801f9c6 <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 801f8ec:	687b      	ldr	r3, [r7, #4]
 801f8ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801f8f0:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 801f8f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f8f4:	4618      	mov	r0, r3
 801f8f6:	f7fe f8bf 	bl	801da78 <lfs_tag_type3>
 801f8fa:	4603      	mov	r3, r0
 801f8fc:	2b02      	cmp	r3, #2
 801f8fe:	d002      	beq.n	801f906 <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 801f900:	f06f 0313 	mvn.w	r3, #19
 801f904:	e05f      	b.n	801f9c6 <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 801f906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f908:	4618      	mov	r0, r3
 801f90a:	f7fe f8df 	bl	801dacc <lfs_tag_id>
 801f90e:	4603      	mov	r3, r0
 801f910:	461a      	mov	r2, r3
 801f912:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801f916:	429a      	cmp	r2, r3
 801f918:	d01c      	beq.n	801f954 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 801f91a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f91c:	4618      	mov	r0, r3
 801f91e:	f7fe f8d5 	bl	801dacc <lfs_tag_id>
 801f922:	4603      	mov	r3, r0
 801f924:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801f926:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801f92a:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 801f92e:	68ba      	ldr	r2, [r7, #8]
 801f930:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801f932:	9200      	str	r2, [sp, #0]
 801f934:	4a2a      	ldr	r2, [pc, #168]	@ (801f9e0 <lfs_dir_find+0x1ec>)
 801f936:	68b9      	ldr	r1, [r7, #8]
 801f938:	68f8      	ldr	r0, [r7, #12]
 801f93a:	f7fe fd43 	bl	801e3c4 <lfs_dir_get>
 801f93e:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 801f940:	69fb      	ldr	r3, [r7, #28]
 801f942:	2b00      	cmp	r3, #0
 801f944:	da01      	bge.n	801f94a <lfs_dir_find+0x156>
                return res;
 801f946:	69fb      	ldr	r3, [r7, #28]
 801f948:	e03d      	b.n	801f9c6 <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 801f94a:	68bb      	ldr	r3, [r7, #8]
 801f94c:	3318      	adds	r3, #24
 801f94e:	4618      	mov	r0, r3
 801f950:	f7fe f81d 	bl	801d98e <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801f954:	68bb      	ldr	r3, [r7, #8]
 801f956:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 801f95a:	212f      	movs	r1, #47	@ 0x2f
 801f95c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801f95e:	f016 fa5e 	bl	8035e1e <strchr>
 801f962:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801f964:	2b00      	cmp	r3, #0
 801f966:	d101      	bne.n	801f96c <lfs_dir_find+0x178>
 801f968:	683b      	ldr	r3, [r7, #0]
 801f96a:	e000      	b.n	801f96e <lfs_dir_find+0x17a>
 801f96c:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 801f96e:	68fa      	ldr	r2, [r7, #12]
 801f970:	613a      	str	r2, [r7, #16]
 801f972:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801f974:	617a      	str	r2, [r7, #20]
 801f976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801f978:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801f97a:	f107 0210 	add.w	r2, r7, #16
 801f97e:	9203      	str	r2, [sp, #12]
 801f980:	4a18      	ldr	r2, [pc, #96]	@ (801f9e4 <lfs_dir_find+0x1f0>)
 801f982:	9202      	str	r2, [sp, #8]
 801f984:	9301      	str	r3, [sp, #4]
 801f986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f988:	9300      	str	r3, [sp, #0]
 801f98a:	f04f 43f0 	mov.w	r3, #2013265920	@ 0x78000000
 801f98e:	4622      	mov	r2, r4
 801f990:	68b9      	ldr	r1, [r7, #8]
 801f992:	68f8      	ldr	r0, [r7, #12]
 801f994:	f7ff fa4c 	bl	801ee30 <lfs_dir_fetchmatch>
 801f998:	6338      	str	r0, [r7, #48]	@ 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 801f99a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f99c:	2b00      	cmp	r3, #0
 801f99e:	da01      	bge.n	801f9a4 <lfs_dir_find+0x1b0>
                return tag;
 801f9a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f9a2:	e010      	b.n	801f9c6 <lfs_dir_find+0x1d2>
            }

            if (tag) {
 801f9a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f9a6:	2b00      	cmp	r3, #0
 801f9a8:	d004      	beq.n	801f9b4 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 801f9aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801f9ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f9ae:	4413      	add	r3, r2
 801f9b0:	637b      	str	r3, [r7, #52]	@ 0x34
    while (true) {
 801f9b2:	e73a      	b.n	801f82a <lfs_dir_find+0x36>
            if (!dir->split) {
 801f9b4:	68bb      	ldr	r3, [r7, #8]
 801f9b6:	7ddb      	ldrb	r3, [r3, #23]
 801f9b8:	f083 0301 	eor.w	r3, r3, #1
 801f9bc:	b2db      	uxtb	r3, r3
 801f9be:	2b00      	cmp	r3, #0
 801f9c0:	d0c8      	beq.n	801f954 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 801f9c2:	f06f 0301 	mvn.w	r3, #1
    }
}
 801f9c6:	4618      	mov	r0, r3
 801f9c8:	373c      	adds	r7, #60	@ 0x3c
 801f9ca:	46bd      	mov	sp, r7
 801f9cc:	bd90      	pop	{r4, r7, pc}
 801f9ce:	bf00      	nop
 801f9d0:	002ffc00 	.word	0x002ffc00
 801f9d4:	08040a94 	.word	0x08040a94
 801f9d8:	08040a98 	.word	0x08040a98
 801f9dc:	08040a9c 	.word	0x08040a9c
 801f9e0:	700ffc00 	.word	0x700ffc00
 801f9e4:	0801f761 	.word	0x0801f761

0801f9e8 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 801f9e8:	b590      	push	{r4, r7, lr}
 801f9ea:	b08b      	sub	sp, #44	@ 0x2c
 801f9ec:	af04      	add	r7, sp, #16
 801f9ee:	60f8      	str	r0, [r7, #12]
 801f9f0:	60b9      	str	r1, [r7, #8]
 801f9f2:	607a      	str	r2, [r7, #4]
 801f9f4:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 801f9f6:	68fb      	ldr	r3, [r7, #12]
 801f9f8:	f103 0010 	add.w	r0, r3, #16
 801f9fc:	68fc      	ldr	r4, [r7, #12]
 801f9fe:	68bb      	ldr	r3, [r7, #8]
 801fa00:	681b      	ldr	r3, [r3, #0]
 801fa02:	68ba      	ldr	r2, [r7, #8]
 801fa04:	6852      	ldr	r2, [r2, #4]
 801fa06:	6839      	ldr	r1, [r7, #0]
 801fa08:	9103      	str	r1, [sp, #12]
 801fa0a:	6879      	ldr	r1, [r7, #4]
 801fa0c:	9102      	str	r1, [sp, #8]
 801fa0e:	9201      	str	r2, [sp, #4]
 801fa10:	9300      	str	r3, [sp, #0]
 801fa12:	2300      	movs	r3, #0
 801fa14:	4622      	mov	r2, r4
 801fa16:	4601      	mov	r1, r0
 801fa18:	68f8      	ldr	r0, [r7, #12]
 801fa1a:	f7fd fe51 	bl	801d6c0 <lfs_bd_prog>
 801fa1e:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 801fa20:	697b      	ldr	r3, [r7, #20]
 801fa22:	2b00      	cmp	r3, #0
 801fa24:	d001      	beq.n	801fa2a <lfs_dir_commitprog+0x42>
        return err;
 801fa26:	697b      	ldr	r3, [r7, #20]
 801fa28:	e010      	b.n	801fa4c <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 801fa2a:	68bb      	ldr	r3, [r7, #8]
 801fa2c:	68db      	ldr	r3, [r3, #12]
 801fa2e:	683a      	ldr	r2, [r7, #0]
 801fa30:	6879      	ldr	r1, [r7, #4]
 801fa32:	4618      	mov	r0, r3
 801fa34:	f005 f9ce 	bl	8024dd4 <lfs_crc>
 801fa38:	4602      	mov	r2, r0
 801fa3a:	68bb      	ldr	r3, [r7, #8]
 801fa3c:	60da      	str	r2, [r3, #12]
    commit->off += size;
 801fa3e:	68bb      	ldr	r3, [r7, #8]
 801fa40:	685a      	ldr	r2, [r3, #4]
 801fa42:	683b      	ldr	r3, [r7, #0]
 801fa44:	441a      	add	r2, r3
 801fa46:	68bb      	ldr	r3, [r7, #8]
 801fa48:	605a      	str	r2, [r3, #4]
    return 0;
 801fa4a:	2300      	movs	r3, #0
}
 801fa4c:	4618      	mov	r0, r3
 801fa4e:	371c      	adds	r7, #28
 801fa50:	46bd      	mov	sp, r7
 801fa52:	bd90      	pop	{r4, r7, pc}

0801fa54 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 801fa54:	b590      	push	{r4, r7, lr}
 801fa56:	b08f      	sub	sp, #60	@ 0x3c
 801fa58:	af04      	add	r7, sp, #16
 801fa5a:	60f8      	str	r0, [r7, #12]
 801fa5c:	60b9      	str	r1, [r7, #8]
 801fa5e:	607a      	str	r2, [r7, #4]
 801fa60:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 801fa62:	6878      	ldr	r0, [r7, #4]
 801fa64:	f7fe f84f 	bl	801db06 <lfs_tag_dsize>
 801fa68:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 801fa6a:	68bb      	ldr	r3, [r7, #8]
 801fa6c:	685a      	ldr	r2, [r3, #4]
 801fa6e:	6a3b      	ldr	r3, [r7, #32]
 801fa70:	441a      	add	r2, r3
 801fa72:	68bb      	ldr	r3, [r7, #8]
 801fa74:	695b      	ldr	r3, [r3, #20]
 801fa76:	429a      	cmp	r2, r3
 801fa78:	d902      	bls.n	801fa80 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 801fa7a:	f06f 031b 	mvn.w	r3, #27
 801fa7e:	e065      	b.n	801fb4c <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 801fa80:	687b      	ldr	r3, [r7, #4]
 801fa82:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801fa86:	68bb      	ldr	r3, [r7, #8]
 801fa88:	689b      	ldr	r3, [r3, #8]
 801fa8a:	4053      	eors	r3, r2
 801fa8c:	4618      	mov	r0, r3
 801fa8e:	f7fd fb3d 	bl	801d10c <lfs_tobe32>
 801fa92:	4603      	mov	r3, r0
 801fa94:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 801fa96:	f107 0214 	add.w	r2, r7, #20
 801fa9a:	2304      	movs	r3, #4
 801fa9c:	68b9      	ldr	r1, [r7, #8]
 801fa9e:	68f8      	ldr	r0, [r7, #12]
 801faa0:	f7ff ffa2 	bl	801f9e8 <lfs_dir_commitprog>
 801faa4:	61f8      	str	r0, [r7, #28]
    if (err) {
 801faa6:	69fb      	ldr	r3, [r7, #28]
 801faa8:	2b00      	cmp	r3, #0
 801faaa:	d001      	beq.n	801fab0 <lfs_dir_commitattr+0x5c>
        return err;
 801faac:	69fb      	ldr	r3, [r7, #28]
 801faae:	e04d      	b.n	801fb4c <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 801fab0:	687b      	ldr	r3, [r7, #4]
 801fab2:	2b00      	cmp	r3, #0
 801fab4:	db0c      	blt.n	801fad0 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 801fab6:	6a3b      	ldr	r3, [r7, #32]
 801fab8:	3b04      	subs	r3, #4
 801faba:	683a      	ldr	r2, [r7, #0]
 801fabc:	68b9      	ldr	r1, [r7, #8]
 801fabe:	68f8      	ldr	r0, [r7, #12]
 801fac0:	f7ff ff92 	bl	801f9e8 <lfs_dir_commitprog>
 801fac4:	61f8      	str	r0, [r7, #28]
        if (err) {
 801fac6:	69fb      	ldr	r3, [r7, #28]
 801fac8:	2b00      	cmp	r3, #0
 801faca:	d039      	beq.n	801fb40 <lfs_dir_commitattr+0xec>
            return err;
 801facc:	69fb      	ldr	r3, [r7, #28]
 801face:	e03d      	b.n	801fb4c <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 801fad0:	683b      	ldr	r3, [r7, #0]
 801fad2:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 801fad4:	2300      	movs	r3, #0
 801fad6:	627b      	str	r3, [r7, #36]	@ 0x24
 801fad8:	e02d      	b.n	801fb36 <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 801fada:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 801fadc:	6a3a      	ldr	r2, [r7, #32]
 801fade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fae0:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 801fae2:	1f1c      	subs	r4, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 801fae4:	69bb      	ldr	r3, [r7, #24]
 801fae6:	681b      	ldr	r3, [r3, #0]
 801fae8:	69ba      	ldr	r2, [r7, #24]
 801faea:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 801faec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801faee:	440a      	add	r2, r1
 801faf0:	2101      	movs	r1, #1
 801faf2:	9103      	str	r1, [sp, #12]
 801faf4:	f107 0113 	add.w	r1, r7, #19
 801faf8:	9102      	str	r1, [sp, #8]
 801fafa:	9201      	str	r2, [sp, #4]
 801fafc:	9300      	str	r3, [sp, #0]
 801fafe:	4623      	mov	r3, r4
 801fb00:	4602      	mov	r2, r0
 801fb02:	2100      	movs	r1, #0
 801fb04:	68f8      	ldr	r0, [r7, #12]
 801fb06:	f7fd fb49 	bl	801d19c <lfs_bd_read>
 801fb0a:	61f8      	str	r0, [r7, #28]
            if (err) {
 801fb0c:	69fb      	ldr	r3, [r7, #28]
 801fb0e:	2b00      	cmp	r3, #0
 801fb10:	d001      	beq.n	801fb16 <lfs_dir_commitattr+0xc2>
                return err;
 801fb12:	69fb      	ldr	r3, [r7, #28]
 801fb14:	e01a      	b.n	801fb4c <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 801fb16:	f107 0213 	add.w	r2, r7, #19
 801fb1a:	2301      	movs	r3, #1
 801fb1c:	68b9      	ldr	r1, [r7, #8]
 801fb1e:	68f8      	ldr	r0, [r7, #12]
 801fb20:	f7ff ff62 	bl	801f9e8 <lfs_dir_commitprog>
 801fb24:	61f8      	str	r0, [r7, #28]
            if (err) {
 801fb26:	69fb      	ldr	r3, [r7, #28]
 801fb28:	2b00      	cmp	r3, #0
 801fb2a:	d001      	beq.n	801fb30 <lfs_dir_commitattr+0xdc>
                return err;
 801fb2c:	69fb      	ldr	r3, [r7, #28]
 801fb2e:	e00d      	b.n	801fb4c <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 801fb30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fb32:	3301      	adds	r3, #1
 801fb34:	627b      	str	r3, [r7, #36]	@ 0x24
 801fb36:	6a3b      	ldr	r3, [r7, #32]
 801fb38:	3b04      	subs	r3, #4
 801fb3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801fb3c:	429a      	cmp	r2, r3
 801fb3e:	d3cc      	bcc.n	801fada <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 801fb40:	687b      	ldr	r3, [r7, #4]
 801fb42:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801fb46:	68bb      	ldr	r3, [r7, #8]
 801fb48:	609a      	str	r2, [r3, #8]
    return 0;
 801fb4a:	2300      	movs	r3, #0
}
 801fb4c:	4618      	mov	r0, r3
 801fb4e:	372c      	adds	r7, #44	@ 0x2c
 801fb50:	46bd      	mov	sp, r7
 801fb52:	bd90      	pop	{r4, r7, pc}

0801fb54 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 801fb54:	b590      	push	{r4, r7, lr}
 801fb56:	b097      	sub	sp, #92	@ 0x5c
 801fb58:	af04      	add	r7, sp, #16
 801fb5a:	6078      	str	r0, [r7, #4]
 801fb5c:	6039      	str	r1, [r7, #0]
    //
    // this gets a bit complex as we have two types of crcs:
    // - 5-word crc with fcrc to check following prog (middle of block)
    // - 2-word crc with no following prog (end of block)
    const lfs_off_t end = lfs_alignup(
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 801fb5e:	683b      	ldr	r3, [r7, #0]
 801fb60:	685b      	ldr	r3, [r3, #4]
    const lfs_off_t end = lfs_alignup(
 801fb62:	f103 0214 	add.w	r2, r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 801fb66:	687b      	ldr	r3, [r7, #4]
 801fb68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801fb6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    const lfs_off_t end = lfs_alignup(
 801fb6c:	4619      	mov	r1, r3
 801fb6e:	4610      	mov	r0, r2
 801fb70:	f7fd fa39 	bl	801cfe6 <lfs_min>
 801fb74:	4602      	mov	r2, r0
            lfs->cfg->prog_size);
 801fb76:	687b      	ldr	r3, [r7, #4]
 801fb78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801fb7a:	6a1b      	ldr	r3, [r3, #32]
    const lfs_off_t end = lfs_alignup(
 801fb7c:	4619      	mov	r1, r3
 801fb7e:	4610      	mov	r0, r2
 801fb80:	f7fd fa56 	bl	801d030 <lfs_alignup>
 801fb84:	63b8      	str	r0, [r7, #56]	@ 0x38

    lfs_off_t off1 = 0;
 801fb86:	2300      	movs	r3, #0
 801fb88:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t crc1 = 0;
 801fb8a:	2300      	movs	r3, #0
 801fb8c:	643b      	str	r3, [r7, #64]	@ 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 801fb8e:	e0fe      	b.n	801fd8e <lfs_dir_commitcrc+0x23a>
        lfs_off_t noff = (
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 801fb90:	683b      	ldr	r3, [r7, #0]
 801fb92:	685b      	ldr	r3, [r3, #4]
 801fb94:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801fb96:	1ad3      	subs	r3, r2, r3
 801fb98:	3b04      	subs	r3, #4
 801fb9a:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 801fb9e:	4618      	mov	r0, r3
 801fba0:	f7fd fa21 	bl	801cfe6 <lfs_min>
 801fba4:	4602      	mov	r2, r0
                + (commit->off+sizeof(lfs_tag_t)));
 801fba6:	683b      	ldr	r3, [r7, #0]
 801fba8:	685b      	ldr	r3, [r3, #4]
 801fbaa:	4413      	add	r3, r2
        lfs_off_t noff = (
 801fbac:	3304      	adds	r3, #4
 801fbae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        // too large for crc tag? need padding commits
        if (noff < end) {
 801fbb0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801fbb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801fbb4:	429a      	cmp	r2, r3
 801fbb6:	d206      	bcs.n	801fbc6 <lfs_dir_commitcrc+0x72>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 801fbb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801fbba:	3b14      	subs	r3, #20
 801fbbc:	4619      	mov	r1, r3
 801fbbe:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801fbc0:	f7fd fa11 	bl	801cfe6 <lfs_min>
 801fbc4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        }

        // space for fcrc?
        uint8_t eperturb = (uint8_t)-1;
 801fbc6:	23ff      	movs	r3, #255	@ 0xff
 801fbc8:	76fb      	strb	r3, [r7, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 801fbca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801fbcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801fbce:	429a      	cmp	r2, r3
 801fbd0:	d35f      	bcc.n	801fc92 <lfs_dir_commitcrc+0x13e>
 801fbd2:	687b      	ldr	r3, [r7, #4]
 801fbd4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801fbd6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801fbd8:	687b      	ldr	r3, [r7, #4]
 801fbda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801fbdc:	6a1b      	ldr	r3, [r3, #32]
 801fbde:	1ad3      	subs	r3, r2, r3
 801fbe0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801fbe2:	429a      	cmp	r2, r3
 801fbe4:	d855      	bhi.n	801fc92 <lfs_dir_commitcrc+0x13e>
            // first read the leading byte, this always contains a bit
            // we can perturb to avoid writes that don't change the fcrc
            int err = lfs_bd_read(lfs,
 801fbe6:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, lfs->cfg->prog_size,
 801fbe8:	687b      	ldr	r3, [r7, #4]
 801fbea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801fbec:	6a18      	ldr	r0, [r3, #32]
            int err = lfs_bd_read(lfs,
 801fbee:	683b      	ldr	r3, [r7, #0]
 801fbf0:	681b      	ldr	r3, [r3, #0]
 801fbf2:	2201      	movs	r2, #1
 801fbf4:	9203      	str	r2, [sp, #12]
 801fbf6:	f107 021b 	add.w	r2, r7, #27
 801fbfa:	9202      	str	r2, [sp, #8]
 801fbfc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801fbfe:	9201      	str	r2, [sp, #4]
 801fc00:	9300      	str	r3, [sp, #0]
 801fc02:	4603      	mov	r3, r0
 801fc04:	460a      	mov	r2, r1
 801fc06:	2100      	movs	r1, #0
 801fc08:	6878      	ldr	r0, [r7, #4]
 801fc0a:	f7fd fac7 	bl	801d19c <lfs_bd_read>
 801fc0e:	62f8      	str	r0, [r7, #44]	@ 0x2c
                    commit->block, noff, &eperturb, 1);
            if (err && err != LFS_ERR_CORRUPT) {
 801fc10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fc12:	2b00      	cmp	r3, #0
 801fc14:	d005      	beq.n	801fc22 <lfs_dir_commitcrc+0xce>
 801fc16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fc18:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 801fc1c:	d001      	beq.n	801fc22 <lfs_dir_commitcrc+0xce>
                return err;
 801fc1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fc20:	e101      	b.n	801fe26 <lfs_dir_commitcrc+0x2d2>
        #endif
            {
                // find the expected fcrc, don't bother avoiding a reread
                // of the eperturb, it should still be in our cache
                struct lfs_fcrc fcrc = {
                    .size = lfs->cfg->prog_size,
 801fc22:	687b      	ldr	r3, [r7, #4]
 801fc24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801fc26:	6a1b      	ldr	r3, [r3, #32]
                struct lfs_fcrc fcrc = {
 801fc28:	60bb      	str	r3, [r7, #8]
 801fc2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801fc2e:	60fb      	str	r3, [r7, #12]
                    .crc = 0xffffffff
                };
                err = lfs_bd_crc(lfs,
 801fc30:	6878      	ldr	r0, [r7, #4]
                        NULL, &lfs->rcache, lfs->cfg->prog_size,
 801fc32:	687b      	ldr	r3, [r7, #4]
 801fc34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801fc36:	6a1c      	ldr	r4, [r3, #32]
                err = lfs_bd_crc(lfs,
 801fc38:	683b      	ldr	r3, [r7, #0]
 801fc3a:	681b      	ldr	r3, [r3, #0]
 801fc3c:	68ba      	ldr	r2, [r7, #8]
 801fc3e:	f107 0108 	add.w	r1, r7, #8
 801fc42:	3104      	adds	r1, #4
 801fc44:	9103      	str	r1, [sp, #12]
 801fc46:	9202      	str	r2, [sp, #8]
 801fc48:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801fc4a:	9201      	str	r2, [sp, #4]
 801fc4c:	9300      	str	r3, [sp, #0]
 801fc4e:	4623      	mov	r3, r4
 801fc50:	4602      	mov	r2, r0
 801fc52:	2100      	movs	r1, #0
 801fc54:	6878      	ldr	r0, [r7, #4]
 801fc56:	f7fd fc3e 	bl	801d4d6 <lfs_bd_crc>
 801fc5a:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        commit->block, noff, fcrc.size, &fcrc.crc);
                if (err && err != LFS_ERR_CORRUPT) {
 801fc5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fc5e:	2b00      	cmp	r3, #0
 801fc60:	d005      	beq.n	801fc6e <lfs_dir_commitcrc+0x11a>
 801fc62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fc64:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 801fc68:	d001      	beq.n	801fc6e <lfs_dir_commitcrc+0x11a>
                    return err;
 801fc6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fc6c:	e0db      	b.n	801fe26 <lfs_dir_commitcrc+0x2d2>
                }

                lfs_fcrc_tole32(&fcrc);
 801fc6e:	f107 0308 	add.w	r3, r7, #8
 801fc72:	4618      	mov	r0, r3
 801fc74:	f7fe f85e 	bl	801dd34 <lfs_fcrc_tole32>
                err = lfs_dir_commitattr(lfs, commit,
 801fc78:	f107 0308 	add.w	r3, r7, #8
 801fc7c:	4a6c      	ldr	r2, [pc, #432]	@ (801fe30 <lfs_dir_commitcrc+0x2dc>)
 801fc7e:	6839      	ldr	r1, [r7, #0]
 801fc80:	6878      	ldr	r0, [r7, #4]
 801fc82:	f7ff fee7 	bl	801fa54 <lfs_dir_commitattr>
 801fc86:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        LFS_MKTAG(LFS_TYPE_FCRC, 0x3ff, sizeof(struct lfs_fcrc)),
                        &fcrc);
                if (err) {
 801fc88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fc8a:	2b00      	cmp	r3, #0
 801fc8c:	d001      	beq.n	801fc92 <lfs_dir_commitcrc+0x13e>
                    return err;
 801fc8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fc90:	e0c9      	b.n	801fe26 <lfs_dir_commitcrc+0x2d2>
        // build commit crc
        struct {
            lfs_tag_t tag;
            uint32_t crc;
        } ccrc;
        lfs_tag_t ntag = LFS_MKTAG(
 801fc92:	7efb      	ldrb	r3, [r7, #27]
 801fc94:	43db      	mvns	r3, r3
 801fc96:	b2db      	uxtb	r3, r3
 801fc98:	09db      	lsrs	r3, r3, #7
 801fc9a:	b2db      	uxtb	r3, r3
 801fc9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801fca0:	051a      	lsls	r2, r3, #20
 801fca2:	683b      	ldr	r3, [r7, #0]
 801fca4:	685b      	ldr	r3, [r3, #4]
 801fca6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801fca8:	1acb      	subs	r3, r1, r3
 801fcaa:	3b04      	subs	r3, #4
 801fcac:	4313      	orrs	r3, r2
 801fcae:	f443 237f 	orr.w	r3, r3, #1044480	@ 0xff000
 801fcb2:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 801fcb6:	62bb      	str	r3, [r7, #40]	@ 0x28
                LFS_TYPE_CCRC + (((uint8_t)~eperturb) >> 7), 0x3ff,
                noff - (commit->off+sizeof(lfs_tag_t)));
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 801fcb8:	683b      	ldr	r3, [r7, #0]
 801fcba:	689a      	ldr	r2, [r3, #8]
 801fcbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fcbe:	4053      	eors	r3, r2
 801fcc0:	4618      	mov	r0, r3
 801fcc2:	f7fd fa23 	bl	801d10c <lfs_tobe32>
 801fcc6:	4603      	mov	r3, r0
 801fcc8:	613b      	str	r3, [r7, #16]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 801fcca:	683b      	ldr	r3, [r7, #0]
 801fccc:	68db      	ldr	r3, [r3, #12]
 801fcce:	f107 0110 	add.w	r1, r7, #16
 801fcd2:	2204      	movs	r2, #4
 801fcd4:	4618      	mov	r0, r3
 801fcd6:	f005 f87d 	bl	8024dd4 <lfs_crc>
 801fcda:	4602      	mov	r2, r0
 801fcdc:	683b      	ldr	r3, [r7, #0]
 801fcde:	60da      	str	r2, [r3, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 801fce0:	683b      	ldr	r3, [r7, #0]
 801fce2:	68db      	ldr	r3, [r3, #12]
 801fce4:	4618      	mov	r0, r3
 801fce6:	f7fd f9f9 	bl	801d0dc <lfs_tole32>
 801fcea:	4603      	mov	r3, r0
 801fcec:	617b      	str	r3, [r7, #20]

        int err = lfs_bd_prog(lfs,
 801fcee:	687b      	ldr	r3, [r7, #4]
 801fcf0:	f103 0010 	add.w	r0, r3, #16
 801fcf4:	687c      	ldr	r4, [r7, #4]
 801fcf6:	683b      	ldr	r3, [r7, #0]
 801fcf8:	681b      	ldr	r3, [r3, #0]
 801fcfa:	683a      	ldr	r2, [r7, #0]
 801fcfc:	6852      	ldr	r2, [r2, #4]
 801fcfe:	2108      	movs	r1, #8
 801fd00:	9103      	str	r1, [sp, #12]
 801fd02:	f107 0110 	add.w	r1, r7, #16
 801fd06:	9102      	str	r1, [sp, #8]
 801fd08:	9201      	str	r2, [sp, #4]
 801fd0a:	9300      	str	r3, [sp, #0]
 801fd0c:	2300      	movs	r3, #0
 801fd0e:	4622      	mov	r2, r4
 801fd10:	4601      	mov	r1, r0
 801fd12:	6878      	ldr	r0, [r7, #4]
 801fd14:	f7fd fcd4 	bl	801d6c0 <lfs_bd_prog>
 801fd18:	6278      	str	r0, [r7, #36]	@ 0x24
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &ccrc, sizeof(ccrc));
        if (err) {
 801fd1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fd1c:	2b00      	cmp	r3, #0
 801fd1e:	d001      	beq.n	801fd24 <lfs_dir_commitcrc+0x1d0>
            return err;
 801fd20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fd22:	e080      	b.n	801fe26 <lfs_dir_commitcrc+0x2d2>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 801fd24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801fd26:	2b00      	cmp	r3, #0
 801fd28:	d106      	bne.n	801fd38 <lfs_dir_commitcrc+0x1e4>
            off1 = commit->off + sizeof(lfs_tag_t);
 801fd2a:	683b      	ldr	r3, [r7, #0]
 801fd2c:	685b      	ldr	r3, [r3, #4]
 801fd2e:	3304      	adds	r3, #4
 801fd30:	647b      	str	r3, [r7, #68]	@ 0x44
            crc1 = commit->crc;
 801fd32:	683b      	ldr	r3, [r7, #0]
 801fd34:	68db      	ldr	r3, [r3, #12]
 801fd36:	643b      	str	r3, [r7, #64]	@ 0x40
        }

        commit->off = noff;
 801fd38:	683b      	ldr	r3, [r7, #0]
 801fd3a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801fd3c:	605a      	str	r2, [r3, #4]
        // perturb valid bit?
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 801fd3e:	7efb      	ldrb	r3, [r7, #27]
 801fd40:	43db      	mvns	r3, r3
 801fd42:	061b      	lsls	r3, r3, #24
 801fd44:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 801fd48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fd4a:	405a      	eors	r2, r3
 801fd4c:	683b      	ldr	r3, [r7, #0]
 801fd4e:	609a      	str	r2, [r3, #8]
        // reset crc for next commit
        commit->crc = 0xffffffff;
 801fd50:	683b      	ldr	r3, [r7, #0]
 801fd52:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801fd56:	60da      	str	r2, [r3, #12]

        // manually flush here since we don't prog the padding, this confuses
        // the caching layer
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 801fd58:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801fd5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801fd5c:	429a      	cmp	r2, r3
 801fd5e:	d208      	bcs.n	801fd72 <lfs_dir_commitcrc+0x21e>
 801fd60:	687b      	ldr	r3, [r7, #4]
 801fd62:	695a      	ldr	r2, [r3, #20]
 801fd64:	687b      	ldr	r3, [r7, #4]
 801fd66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801fd68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801fd6a:	4413      	add	r3, r2
 801fd6c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801fd6e:	429a      	cmp	r2, r3
 801fd70:	d30d      	bcc.n	801fd8e <lfs_dir_commitcrc+0x23a>
            // flush buffers
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 801fd72:	687b      	ldr	r3, [r7, #4]
 801fd74:	f103 0110 	add.w	r1, r3, #16
 801fd78:	687a      	ldr	r2, [r7, #4]
 801fd7a:	2300      	movs	r3, #0
 801fd7c:	6878      	ldr	r0, [r7, #4]
 801fd7e:	f7fd fc6b 	bl	801d658 <lfs_bd_sync>
 801fd82:	6238      	str	r0, [r7, #32]
            if (err) {
 801fd84:	6a3b      	ldr	r3, [r7, #32]
 801fd86:	2b00      	cmp	r3, #0
 801fd88:	d001      	beq.n	801fd8e <lfs_dir_commitcrc+0x23a>
                return err;
 801fd8a:	6a3b      	ldr	r3, [r7, #32]
 801fd8c:	e04b      	b.n	801fe26 <lfs_dir_commitcrc+0x2d2>
    while (commit->off < end) {
 801fd8e:	683b      	ldr	r3, [r7, #0]
 801fd90:	685b      	ldr	r3, [r3, #4]
 801fd92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801fd94:	429a      	cmp	r2, r3
 801fd96:	f63f aefb 	bhi.w	801fb90 <lfs_dir_commitcrc+0x3c>

    // successful commit, check checksums to make sure
    //
    // note that we don't need to check padding commits, worst
    // case if they are corrupted we would have had to compact anyways
    lfs_off_t off = commit->begin;
 801fd9a:	683b      	ldr	r3, [r7, #0]
 801fd9c:	691b      	ldr	r3, [r3, #16]
 801fd9e:	637b      	str	r3, [r7, #52]	@ 0x34
    uint32_t crc = 0xffffffff;
 801fda0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801fda4:	61fb      	str	r3, [r7, #28]
    int err = lfs_bd_crc(lfs,
 801fda6:	6878      	ldr	r0, [r7, #4]
 801fda8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801fdaa:	1d1c      	adds	r4, r3, #4
 801fdac:	683b      	ldr	r3, [r7, #0]
 801fdae:	681b      	ldr	r3, [r3, #0]
 801fdb0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801fdb2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801fdb4:	1a8a      	subs	r2, r1, r2
 801fdb6:	f107 011c 	add.w	r1, r7, #28
 801fdba:	9103      	str	r1, [sp, #12]
 801fdbc:	9202      	str	r2, [sp, #8]
 801fdbe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801fdc0:	9201      	str	r2, [sp, #4]
 801fdc2:	9300      	str	r3, [sp, #0]
 801fdc4:	4623      	mov	r3, r4
 801fdc6:	4602      	mov	r2, r0
 801fdc8:	2100      	movs	r1, #0
 801fdca:	6878      	ldr	r0, [r7, #4]
 801fdcc:	f7fd fb83 	bl	801d4d6 <lfs_bd_crc>
 801fdd0:	6338      	str	r0, [r7, #48]	@ 0x30
            NULL, &lfs->rcache, off1+sizeof(uint32_t),
            commit->block, off, off1-off, &crc);
    if (err) {
 801fdd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fdd4:	2b00      	cmp	r3, #0
 801fdd6:	d001      	beq.n	801fddc <lfs_dir_commitcrc+0x288>
        return err;
 801fdd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fdda:	e024      	b.n	801fe26 <lfs_dir_commitcrc+0x2d2>
    }

    // check non-padding commits against known crc
    if (crc != crc1) {
 801fddc:	69fb      	ldr	r3, [r7, #28]
 801fdde:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801fde0:	429a      	cmp	r2, r3
 801fde2:	d002      	beq.n	801fdea <lfs_dir_commitcrc+0x296>
        return LFS_ERR_CORRUPT;
 801fde4:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801fde8:	e01d      	b.n	801fe26 <lfs_dir_commitcrc+0x2d2>
    }

    // make sure to check crc in case we happen to pick
    // up an unrelated crc (frozen block?)
    err = lfs_bd_crc(lfs,
 801fdea:	6879      	ldr	r1, [r7, #4]
 801fdec:	683b      	ldr	r3, [r7, #0]
 801fdee:	681b      	ldr	r3, [r3, #0]
 801fdf0:	f107 021c 	add.w	r2, r7, #28
 801fdf4:	9203      	str	r2, [sp, #12]
 801fdf6:	2204      	movs	r2, #4
 801fdf8:	9202      	str	r2, [sp, #8]
 801fdfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801fdfc:	9201      	str	r2, [sp, #4]
 801fdfe:	9300      	str	r3, [sp, #0]
 801fe00:	2304      	movs	r3, #4
 801fe02:	460a      	mov	r2, r1
 801fe04:	2100      	movs	r1, #0
 801fe06:	6878      	ldr	r0, [r7, #4]
 801fe08:	f7fd fb65 	bl	801d4d6 <lfs_bd_crc>
 801fe0c:	6338      	str	r0, [r7, #48]	@ 0x30
            NULL, &lfs->rcache, sizeof(uint32_t),
            commit->block, off1, sizeof(uint32_t), &crc);
    if (err) {
 801fe0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fe10:	2b00      	cmp	r3, #0
 801fe12:	d001      	beq.n	801fe18 <lfs_dir_commitcrc+0x2c4>
        return err;
 801fe14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fe16:	e006      	b.n	801fe26 <lfs_dir_commitcrc+0x2d2>
    }

    if (crc != 0) {
 801fe18:	69fb      	ldr	r3, [r7, #28]
 801fe1a:	2b00      	cmp	r3, #0
 801fe1c:	d002      	beq.n	801fe24 <lfs_dir_commitcrc+0x2d0>
        return LFS_ERR_CORRUPT;
 801fe1e:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801fe22:	e000      	b.n	801fe26 <lfs_dir_commitcrc+0x2d2>
    }

    return 0;
 801fe24:	2300      	movs	r3, #0
}
 801fe26:	4618      	mov	r0, r3
 801fe28:	374c      	adds	r7, #76	@ 0x4c
 801fe2a:	46bd      	mov	sp, r7
 801fe2c:	bd90      	pop	{r4, r7, pc}
 801fe2e:	bf00      	nop
 801fe30:	5ffffc08 	.word	0x5ffffc08

0801fe34 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 801fe34:	b580      	push	{r7, lr}
 801fe36:	b08a      	sub	sp, #40	@ 0x28
 801fe38:	af04      	add	r7, sp, #16
 801fe3a:	6078      	str	r0, [r7, #4]
 801fe3c:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 801fe3e:	2300      	movs	r3, #0
 801fe40:	617b      	str	r3, [r7, #20]
 801fe42:	e016      	b.n	801fe72 <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 801fe44:	697b      	ldr	r3, [r7, #20]
 801fe46:	3301      	adds	r3, #1
 801fe48:	2b00      	cmp	r3, #0
 801fe4a:	f003 0301 	and.w	r3, r3, #1
 801fe4e:	bfb8      	it	lt
 801fe50:	425b      	neglt	r3, r3
 801fe52:	009b      	lsls	r3, r3, #2
 801fe54:	683a      	ldr	r2, [r7, #0]
 801fe56:	4413      	add	r3, r2
 801fe58:	4619      	mov	r1, r3
 801fe5a:	6878      	ldr	r0, [r7, #4]
 801fe5c:	f7fe f934 	bl	801e0c8 <lfs_alloc>
 801fe60:	60f8      	str	r0, [r7, #12]
        if (err) {
 801fe62:	68fb      	ldr	r3, [r7, #12]
 801fe64:	2b00      	cmp	r3, #0
 801fe66:	d001      	beq.n	801fe6c <lfs_dir_alloc+0x38>
            return err;
 801fe68:	68fb      	ldr	r3, [r7, #12]
 801fe6a:	e058      	b.n	801ff1e <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 801fe6c:	697b      	ldr	r3, [r7, #20]
 801fe6e:	3301      	adds	r3, #1
 801fe70:	617b      	str	r3, [r7, #20]
 801fe72:	697b      	ldr	r3, [r7, #20]
 801fe74:	2b01      	cmp	r3, #1
 801fe76:	dde5      	ble.n	801fe44 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 801fe78:	683b      	ldr	r3, [r7, #0]
 801fe7a:	2200      	movs	r2, #0
 801fe7c:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 801fe7e:	6879      	ldr	r1, [r7, #4]
 801fe80:	683b      	ldr	r3, [r7, #0]
 801fe82:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 801fe84:	683a      	ldr	r2, [r7, #0]
 801fe86:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 801fe88:	2004      	movs	r0, #4
 801fe8a:	9003      	str	r0, [sp, #12]
 801fe8c:	9202      	str	r2, [sp, #8]
 801fe8e:	2200      	movs	r2, #0
 801fe90:	9201      	str	r2, [sp, #4]
 801fe92:	9300      	str	r3, [sp, #0]
 801fe94:	2304      	movs	r3, #4
 801fe96:	460a      	mov	r2, r1
 801fe98:	2100      	movs	r1, #0
 801fe9a:	6878      	ldr	r0, [r7, #4]
 801fe9c:	f7fd f97e 	bl	801d19c <lfs_bd_read>
 801fea0:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 801fea2:	683b      	ldr	r3, [r7, #0]
 801fea4:	689b      	ldr	r3, [r3, #8]
 801fea6:	4618      	mov	r0, r3
 801fea8:	f7fd f90d 	bl	801d0c6 <lfs_fromle32>
 801feac:	4602      	mov	r2, r0
 801feae:	683b      	ldr	r3, [r7, #0]
 801feb0:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 801feb2:	693b      	ldr	r3, [r7, #16]
 801feb4:	2b00      	cmp	r3, #0
 801feb6:	d005      	beq.n	801fec4 <lfs_dir_alloc+0x90>
 801feb8:	693b      	ldr	r3, [r7, #16]
 801feba:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 801febe:	d001      	beq.n	801fec4 <lfs_dir_alloc+0x90>
        return err;
 801fec0:	693b      	ldr	r3, [r7, #16]
 801fec2:	e02c      	b.n	801ff1e <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 801fec4:	687b      	ldr	r3, [r7, #4]
 801fec6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801fec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801feca:	2b00      	cmp	r3, #0
 801fecc:	dd0e      	ble.n	801feec <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 801fece:	683b      	ldr	r3, [r7, #0]
 801fed0:	689a      	ldr	r2, [r3, #8]
 801fed2:	687b      	ldr	r3, [r7, #4]
 801fed4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801fed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fed8:	3301      	adds	r3, #1
 801feda:	f043 0301 	orr.w	r3, r3, #1
 801fede:	4619      	mov	r1, r3
 801fee0:	4610      	mov	r0, r2
 801fee2:	f7fd f8a5 	bl	801d030 <lfs_alignup>
 801fee6:	4602      	mov	r2, r0
 801fee8:	683b      	ldr	r3, [r7, #0]
 801feea:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 801feec:	683b      	ldr	r3, [r7, #0]
 801feee:	2204      	movs	r2, #4
 801fef0:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 801fef2:	683b      	ldr	r3, [r7, #0]
 801fef4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801fef8:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 801fefa:	683b      	ldr	r3, [r7, #0]
 801fefc:	2200      	movs	r2, #0
 801fefe:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 801ff00:	683b      	ldr	r3, [r7, #0]
 801ff02:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801ff06:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 801ff08:	683b      	ldr	r3, [r7, #0]
 801ff0a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801ff0e:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 801ff10:	683b      	ldr	r3, [r7, #0]
 801ff12:	2200      	movs	r2, #0
 801ff14:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 801ff16:	683b      	ldr	r3, [r7, #0]
 801ff18:	2200      	movs	r2, #0
 801ff1a:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 801ff1c:	2300      	movs	r3, #0
}
 801ff1e:	4618      	mov	r0, r3
 801ff20:	3718      	adds	r7, #24
 801ff22:	46bd      	mov	sp, r7
 801ff24:	bd80      	pop	{r7, pc}
	...

0801ff28 <lfs_dir_drop>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 801ff28:	b580      	push	{r7, lr}
 801ff2a:	b08a      	sub	sp, #40	@ 0x28
 801ff2c:	af00      	add	r7, sp, #0
 801ff2e:	60f8      	str	r0, [r7, #12]
 801ff30:	60b9      	str	r1, [r7, #8]
 801ff32:	607a      	str	r2, [r7, #4]
    // steal state
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 801ff34:	68fb      	ldr	r3, [r7, #12]
 801ff36:	3348      	adds	r3, #72	@ 0x48
 801ff38:	461a      	mov	r2, r3
 801ff3a:	6879      	ldr	r1, [r7, #4]
 801ff3c:	68f8      	ldr	r0, [r7, #12]
 801ff3e:	f7ff fb63 	bl	801f608 <lfs_dir_getgstate>
 801ff42:	6278      	str	r0, [r7, #36]	@ 0x24
    if (err) {
 801ff44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff46:	2b00      	cmp	r3, #0
 801ff48:	d001      	beq.n	801ff4e <lfs_dir_drop+0x26>
        return err;
 801ff4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff4c:	e022      	b.n	801ff94 <lfs_dir_drop+0x6c>
    }

    // steal tail
    lfs_pair_tole32(tail->tail);
 801ff4e:	687b      	ldr	r3, [r7, #4]
 801ff50:	3318      	adds	r3, #24
 801ff52:	4618      	mov	r0, r3
 801ff54:	f7fd fd35 	bl	801d9c2 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 801ff58:	687b      	ldr	r3, [r7, #4]
 801ff5a:	7ddb      	ldrb	r3, [r3, #23]
 801ff5c:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 801ff60:	051a      	lsls	r2, r3, #20
 801ff62:	4b0e      	ldr	r3, [pc, #56]	@ (801ff9c <lfs_dir_drop+0x74>)
 801ff64:	4313      	orrs	r3, r2
 801ff66:	61fb      	str	r3, [r7, #28]
 801ff68:	687b      	ldr	r3, [r7, #4]
 801ff6a:	3318      	adds	r3, #24
 801ff6c:	623b      	str	r3, [r7, #32]
 801ff6e:	f107 021c 	add.w	r2, r7, #28
 801ff72:	2301      	movs	r3, #1
 801ff74:	68b9      	ldr	r1, [r7, #8]
 801ff76:	68f8      	ldr	r0, [r7, #12]
 801ff78:	f001 f984 	bl	8021284 <lfs_dir_commit>
 801ff7c:	6278      	str	r0, [r7, #36]	@ 0x24
            {LFS_MKTAG(LFS_TYPE_TAIL + tail->split, 0x3ff, 8), tail->tail}));
    lfs_pair_fromle32(tail->tail);
 801ff7e:	687b      	ldr	r3, [r7, #4]
 801ff80:	3318      	adds	r3, #24
 801ff82:	4618      	mov	r0, r3
 801ff84:	f7fd fd03 	bl	801d98e <lfs_pair_fromle32>
    if (err) {
 801ff88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff8a:	2b00      	cmp	r3, #0
 801ff8c:	d001      	beq.n	801ff92 <lfs_dir_drop+0x6a>
        return err;
 801ff8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff90:	e000      	b.n	801ff94 <lfs_dir_drop+0x6c>
    }

    return 0;
 801ff92:	2300      	movs	r3, #0
}
 801ff94:	4618      	mov	r0, r3
 801ff96:	3728      	adds	r7, #40	@ 0x28
 801ff98:	46bd      	mov	sp, r7
 801ff9a:	bd80      	pop	{r7, pc}
 801ff9c:	000ffc08 	.word	0x000ffc08

0801ffa0 <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 801ffa0:	b580      	push	{r7, lr}
 801ffa2:	b092      	sub	sp, #72	@ 0x48
 801ffa4:	af04      	add	r7, sp, #16
 801ffa6:	60f8      	str	r0, [r7, #12]
 801ffa8:	60b9      	str	r1, [r7, #8]
 801ffaa:	607a      	str	r2, [r7, #4]
 801ffac:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 801ffae:	f107 0310 	add.w	r3, r7, #16
 801ffb2:	4619      	mov	r1, r3
 801ffb4:	68f8      	ldr	r0, [r7, #12]
 801ffb6:	f7ff ff3d 	bl	801fe34 <lfs_dir_alloc>
 801ffba:	6378      	str	r0, [r7, #52]	@ 0x34
    if (err) {
 801ffbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ffbe:	2b00      	cmp	r3, #0
 801ffc0:	d001      	beq.n	801ffc6 <lfs_dir_split+0x26>
        return err;
 801ffc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ffc4:	e03c      	b.n	8020040 <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 801ffc6:	68bb      	ldr	r3, [r7, #8]
 801ffc8:	7ddb      	ldrb	r3, [r3, #23]
 801ffca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    tail.tail[0] = dir->tail[0];
 801ffce:	68bb      	ldr	r3, [r7, #8]
 801ffd0:	699b      	ldr	r3, [r3, #24]
 801ffd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    tail.tail[1] = dir->tail[1];
 801ffd4:	68bb      	ldr	r3, [r7, #8]
 801ffd6:	69db      	ldr	r3, [r3, #28]
 801ffd8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 801ffda:	f107 0110 	add.w	r1, r7, #16
 801ffde:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 801ffe2:	9302      	str	r3, [sp, #8]
 801ffe4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801ffe8:	9301      	str	r3, [sp, #4]
 801ffea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ffec:	9300      	str	r3, [sp, #0]
 801ffee:	683b      	ldr	r3, [r7, #0]
 801fff0:	687a      	ldr	r2, [r7, #4]
 801fff2:	68f8      	ldr	r0, [r7, #12]
 801fff4:	f000 f87a 	bl	80200ec <lfs_dir_compact>
 801fff8:	6338      	str	r0, [r7, #48]	@ 0x30
    if (res < 0) {
 801fffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fffc:	2b00      	cmp	r3, #0
 801fffe:	da01      	bge.n	8020004 <lfs_dir_split+0x64>
        return res;
 8020000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020002:	e01d      	b.n	8020040 <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 8020004:	693a      	ldr	r2, [r7, #16]
 8020006:	68bb      	ldr	r3, [r7, #8]
 8020008:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 802000a:	697a      	ldr	r2, [r7, #20]
 802000c:	68bb      	ldr	r3, [r7, #8]
 802000e:	61da      	str	r2, [r3, #28]
    dir->split = true;
 8020010:	68bb      	ldr	r3, [r7, #8]
 8020012:	2201      	movs	r2, #1
 8020014:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 8020016:	68ba      	ldr	r2, [r7, #8]
 8020018:	68fb      	ldr	r3, [r7, #12]
 802001a:	3320      	adds	r3, #32
 802001c:	4619      	mov	r1, r3
 802001e:	4610      	mov	r0, r2
 8020020:	f7fd fc5e 	bl	801d8e0 <lfs_pair_cmp>
 8020024:	4603      	mov	r3, r0
 8020026:	2b00      	cmp	r3, #0
 8020028:	d109      	bne.n	802003e <lfs_dir_split+0x9e>
 802002a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 802002e:	2b00      	cmp	r3, #0
 8020030:	d105      	bne.n	802003e <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 8020032:	693a      	ldr	r2, [r7, #16]
 8020034:	68fb      	ldr	r3, [r7, #12]
 8020036:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 8020038:	697a      	ldr	r2, [r7, #20]
 802003a:	68fb      	ldr	r3, [r7, #12]
 802003c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    return 0;
 802003e:	2300      	movs	r3, #0
}
 8020040:	4618      	mov	r0, r3
 8020042:	3738      	adds	r7, #56	@ 0x38
 8020044:	46bd      	mov	sp, r7
 8020046:	bd80      	pop	{r7, pc}

08020048 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 8020048:	b580      	push	{r7, lr}
 802004a:	b086      	sub	sp, #24
 802004c:	af00      	add	r7, sp, #0
 802004e:	60f8      	str	r0, [r7, #12]
 8020050:	60b9      	str	r1, [r7, #8]
 8020052:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 8020054:	68fb      	ldr	r3, [r7, #12]
 8020056:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 8020058:	68b8      	ldr	r0, [r7, #8]
 802005a:	f7fd fd54 	bl	801db06 <lfs_tag_dsize>
 802005e:	4602      	mov	r2, r0
 8020060:	697b      	ldr	r3, [r7, #20]
 8020062:	681b      	ldr	r3, [r3, #0]
 8020064:	441a      	add	r2, r3
 8020066:	697b      	ldr	r3, [r7, #20]
 8020068:	601a      	str	r2, [r3, #0]
    return 0;
 802006a:	2300      	movs	r3, #0
}
 802006c:	4618      	mov	r0, r3
 802006e:	3718      	adds	r7, #24
 8020070:	46bd      	mov	sp, r7
 8020072:	bd80      	pop	{r7, pc}

08020074 <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 8020074:	b580      	push	{r7, lr}
 8020076:	b086      	sub	sp, #24
 8020078:	af00      	add	r7, sp, #0
 802007a:	60f8      	str	r0, [r7, #12]
 802007c:	60b9      	str	r1, [r7, #8]
 802007e:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 8020080:	68fb      	ldr	r3, [r7, #12]
 8020082:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 8020084:	697b      	ldr	r3, [r7, #20]
 8020086:	6818      	ldr	r0, [r3, #0]
 8020088:	697b      	ldr	r3, [r7, #20]
 802008a:	6859      	ldr	r1, [r3, #4]
 802008c:	687b      	ldr	r3, [r7, #4]
 802008e:	68ba      	ldr	r2, [r7, #8]
 8020090:	f7ff fce0 	bl	801fa54 <lfs_dir_commitattr>
 8020094:	4603      	mov	r3, r0
}
 8020096:	4618      	mov	r0, r3
 8020098:	3718      	adds	r7, #24
 802009a:	46bd      	mov	sp, r7
 802009c:	bd80      	pop	{r7, pc}

0802009e <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 802009e:	b480      	push	{r7}
 80200a0:	b083      	sub	sp, #12
 80200a2:	af00      	add	r7, sp, #0
 80200a4:	6078      	str	r0, [r7, #4]
 80200a6:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 80200a8:	687b      	ldr	r3, [r7, #4]
 80200aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80200ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 80200ae:	2b00      	cmp	r3, #0
 80200b0:	dd11      	ble.n	80200d6 <lfs_dir_needsrelocation+0x38>
 80200b2:	683b      	ldr	r3, [r7, #0]
 80200b4:	689b      	ldr	r3, [r3, #8]
 80200b6:	3301      	adds	r3, #1
 80200b8:	687a      	ldr	r2, [r7, #4]
 80200ba:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80200bc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80200be:	3201      	adds	r2, #1
 80200c0:	f042 0201 	orr.w	r2, r2, #1
 80200c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80200c8:	fb01 f202 	mul.w	r2, r1, r2
 80200cc:	1a9b      	subs	r3, r3, r2
 80200ce:	2b00      	cmp	r3, #0
 80200d0:	d101      	bne.n	80200d6 <lfs_dir_needsrelocation+0x38>
 80200d2:	2301      	movs	r3, #1
 80200d4:	e000      	b.n	80200d8 <lfs_dir_needsrelocation+0x3a>
 80200d6:	2300      	movs	r3, #0
 80200d8:	f003 0301 	and.w	r3, r3, #1
 80200dc:	b2db      	uxtb	r3, r3
}
 80200de:	4618      	mov	r0, r3
 80200e0:	370c      	adds	r7, #12
 80200e2:	46bd      	mov	sp, r7
 80200e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80200e8:	4770      	bx	lr
	...

080200ec <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 80200ec:	b580      	push	{r7, lr}
 80200ee:	b0a4      	sub	sp, #144	@ 0x90
 80200f0:	af0a      	add	r7, sp, #40	@ 0x28
 80200f2:	60f8      	str	r0, [r7, #12]
 80200f4:	60b9      	str	r1, [r7, #8]
 80200f6:	607a      	str	r2, [r7, #4]
 80200f8:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 80200fa:	2300      	movs	r3, #0
 80200fc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 8020100:	68b9      	ldr	r1, [r7, #8]
 8020102:	68f8      	ldr	r0, [r7, #12]
 8020104:	f7ff ffcb 	bl	802009e <lfs_dir_needsrelocation>
 8020108:	4603      	mov	r3, r0
 802010a:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

    // increment revision count
    dir->rev += 1;
 802010e:	68bb      	ldr	r3, [r7, #8]
 8020110:	689b      	ldr	r3, [r3, #8]
 8020112:	1c5a      	adds	r2, r3, #1
 8020114:	68bb      	ldr	r3, [r7, #8]
 8020116:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 8020118:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 802011c:	2b00      	cmp	r3, #0
 802011e:	d00e      	beq.n	802013e <lfs_dir_compact+0x52>
 8020120:	68bb      	ldr	r3, [r7, #8]
 8020122:	2200      	movs	r2, #0
 8020124:	657a      	str	r2, [r7, #84]	@ 0x54
 8020126:	2201      	movs	r2, #1
 8020128:	65ba      	str	r2, [r7, #88]	@ 0x58
 802012a:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 802012e:	4611      	mov	r1, r2
 8020130:	4618      	mov	r0, r3
 8020132:	f7fd fbd5 	bl	801d8e0 <lfs_pair_cmp>
 8020136:	4603      	mov	r3, r0
 8020138:	2b00      	cmp	r3, #0
 802013a:	f040 8155 	bne.w	80203e8 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 802013e:	68bb      	ldr	r3, [r7, #8]
 8020140:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 8020142:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8020144:	2300      	movs	r3, #0
 8020146:	643b      	str	r3, [r7, #64]	@ 0x40
 8020148:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802014c:	647b      	str	r3, [r7, #68]	@ 0x44
 802014e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020152:	64bb      	str	r3, [r7, #72]	@ 0x48
 8020154:	2300      	movs	r3, #0
 8020156:	64fb      	str	r3, [r7, #76]	@ 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 8020158:	68fb      	ldr	r3, [r7, #12]
 802015a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802015c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 802015e:	2b00      	cmp	r3, #0
 8020160:	d004      	beq.n	802016c <lfs_dir_compact+0x80>
 8020162:	68fb      	ldr	r3, [r7, #12]
 8020164:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8020166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020168:	3b08      	subs	r3, #8
 802016a:	e003      	b.n	8020174 <lfs_dir_compact+0x88>
 802016c:	68fb      	ldr	r3, [r7, #12]
 802016e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8020170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020172:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 8020174:	653b      	str	r3, [r7, #80]	@ 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 8020176:	68bb      	ldr	r3, [r7, #8]
 8020178:	685b      	ldr	r3, [r3, #4]
 802017a:	4619      	mov	r1, r3
 802017c:	68f8      	ldr	r0, [r7, #12]
 802017e:	f7fd fb4d 	bl	801d81c <lfs_bd_erase>
 8020182:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 8020184:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020186:	2b00      	cmp	r3, #0
 8020188:	d006      	beq.n	8020198 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 802018a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802018c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8020190:	f000 812c 	beq.w	80203ec <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 8020194:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020196:	e188      	b.n	80204aa <lfs_dir_compact+0x3be>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 8020198:	68bb      	ldr	r3, [r7, #8]
 802019a:	689b      	ldr	r3, [r3, #8]
 802019c:	4618      	mov	r0, r3
 802019e:	f7fc ff9d 	bl	801d0dc <lfs_tole32>
 80201a2:	4602      	mov	r2, r0
 80201a4:	68bb      	ldr	r3, [r7, #8]
 80201a6:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 80201a8:	68bb      	ldr	r3, [r7, #8]
 80201aa:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 80201ae:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80201b2:	2304      	movs	r3, #4
 80201b4:	68f8      	ldr	r0, [r7, #12]
 80201b6:	f7ff fc17 	bl	801f9e8 <lfs_dir_commitprog>
 80201ba:	65f8      	str	r0, [r7, #92]	@ 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 80201bc:	68bb      	ldr	r3, [r7, #8]
 80201be:	689b      	ldr	r3, [r3, #8]
 80201c0:	4618      	mov	r0, r3
 80201c2:	f7fc ff80 	bl	801d0c6 <lfs_fromle32>
 80201c6:	4602      	mov	r2, r0
 80201c8:	68bb      	ldr	r3, [r7, #8]
 80201ca:	609a      	str	r2, [r3, #8]
            if (err) {
 80201cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80201ce:	2b00      	cmp	r3, #0
 80201d0:	d006      	beq.n	80201e0 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 80201d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80201d4:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80201d8:	f000 810a 	beq.w	80203f0 <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 80201dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80201de:	e164      	b.n	80204aa <lfs_dir_compact+0x3be>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 80201e0:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 80201e4:	425b      	negs	r3, r3
 80201e6:	b29b      	uxth	r3, r3
 80201e8:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 80201ea:	68fa      	ldr	r2, [r7, #12]
 80201ec:	637a      	str	r2, [r7, #52]	@ 0x34
 80201ee:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80201f2:	63ba      	str	r2, [r7, #56]	@ 0x38
            err = lfs_dir_traverse(lfs,
 80201f4:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80201f8:	9208      	str	r2, [sp, #32]
 80201fa:	4aae      	ldr	r2, [pc, #696]	@ (80204b4 <lfs_dir_compact+0x3c8>)
 80201fc:	9207      	str	r2, [sp, #28]
 80201fe:	9306      	str	r3, [sp, #24]
 8020200:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8020204:	9305      	str	r3, [sp, #20]
 8020206:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 802020a:	9304      	str	r3, [sp, #16]
 802020c:	2300      	movs	r3, #0
 802020e:	9303      	str	r3, [sp, #12]
 8020210:	4ba9      	ldr	r3, [pc, #676]	@ (80204b8 <lfs_dir_compact+0x3cc>)
 8020212:	9302      	str	r3, [sp, #8]
 8020214:	683b      	ldr	r3, [r7, #0]
 8020216:	9301      	str	r3, [sp, #4]
 8020218:	687b      	ldr	r3, [r7, #4]
 802021a:	9300      	str	r3, [sp, #0]
 802021c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020220:	2200      	movs	r2, #0
 8020222:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8020224:	68f8      	ldr	r0, [r7, #12]
 8020226:	f7fe fa1f 	bl	801e668 <lfs_dir_traverse>
 802022a:	65f8      	str	r0, [r7, #92]	@ 0x5c
                        lfs, &commit});
            if (err) {
 802022c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802022e:	2b00      	cmp	r3, #0
 8020230:	d006      	beq.n	8020240 <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 8020232:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020234:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8020238:	f000 80dc 	beq.w	80203f4 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 802023c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802023e:	e134      	b.n	80204aa <lfs_dir_compact+0x3be>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 8020240:	68bb      	ldr	r3, [r7, #8]
 8020242:	3318      	adds	r3, #24
 8020244:	4618      	mov	r0, r3
 8020246:	f7fd fb30 	bl	801d8aa <lfs_pair_isnull>
 802024a:	4603      	mov	r3, r0
 802024c:	f083 0301 	eor.w	r3, r3, #1
 8020250:	b2db      	uxtb	r3, r3
 8020252:	2b00      	cmp	r3, #0
 8020254:	d022      	beq.n	802029c <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 8020256:	68bb      	ldr	r3, [r7, #8]
 8020258:	3318      	adds	r3, #24
 802025a:	4618      	mov	r0, r3
 802025c:	f7fd fbb1 	bl	801d9c2 <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 8020260:	68bb      	ldr	r3, [r7, #8]
 8020262:	7ddb      	ldrb	r3, [r3, #23]
 8020264:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8020268:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 802026a:	4a94      	ldr	r2, [pc, #592]	@ (80204bc <lfs_dir_compact+0x3d0>)
 802026c:	431a      	orrs	r2, r3
                        dir->tail);
 802026e:	68bb      	ldr	r3, [r7, #8]
 8020270:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 8020272:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8020276:	68f8      	ldr	r0, [r7, #12]
 8020278:	f7ff fbec 	bl	801fa54 <lfs_dir_commitattr>
 802027c:	65f8      	str	r0, [r7, #92]	@ 0x5c
                lfs_pair_fromle32(dir->tail);
 802027e:	68bb      	ldr	r3, [r7, #8]
 8020280:	3318      	adds	r3, #24
 8020282:	4618      	mov	r0, r3
 8020284:	f7fd fb83 	bl	801d98e <lfs_pair_fromle32>
                if (err) {
 8020288:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802028a:	2b00      	cmp	r3, #0
 802028c:	d006      	beq.n	802029c <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 802028e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020290:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8020294:	f000 80b0 	beq.w	80203f8 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 8020298:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802029a:	e106      	b.n	80204aa <lfs_dir_compact+0x3be>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 802029c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80202a0:	2200      	movs	r2, #0
 80202a2:	601a      	str	r2, [r3, #0]
 80202a4:	605a      	str	r2, [r3, #4]
 80202a6:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 80202a8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80202ac:	f083 0301 	eor.w	r3, r3, #1
 80202b0:	b2db      	uxtb	r3, r3
 80202b2:	2b00      	cmp	r3, #0
 80202b4:	d011      	beq.n	80202da <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 80202b6:	68fb      	ldr	r3, [r7, #12]
 80202b8:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80202bc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80202c0:	4611      	mov	r1, r2
 80202c2:	4618      	mov	r0, r3
 80202c4:	f7fd fc33 	bl	801db2e <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 80202c8:	68fb      	ldr	r3, [r7, #12]
 80202ca:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80202ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80202d2:	4611      	mov	r1, r2
 80202d4:	4618      	mov	r0, r3
 80202d6:	f7fd fc2a 	bl	801db2e <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 80202da:	68fb      	ldr	r3, [r7, #12]
 80202dc:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80202e0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80202e4:	4611      	mov	r1, r2
 80202e6:	4618      	mov	r0, r3
 80202e8:	f7fd fc21 	bl	801db2e <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 80202ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80202ee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80202f2:	f023 0303 	bic.w	r3, r3, #3
 80202f6:	62bb      	str	r3, [r7, #40]	@ 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 80202f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80202fc:	461a      	mov	r2, r3
 80202fe:	68b9      	ldr	r1, [r7, #8]
 8020300:	68f8      	ldr	r0, [r7, #12]
 8020302:	f7ff f981 	bl	801f608 <lfs_dir_getgstate>
 8020306:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 8020308:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802030a:	2b00      	cmp	r3, #0
 802030c:	d001      	beq.n	8020312 <lfs_dir_compact+0x226>
                return err;
 802030e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020310:	e0cb      	b.n	80204aa <lfs_dir_compact+0x3be>
            }

            if (!lfs_gstate_iszero(&delta)) {
 8020312:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8020316:	4618      	mov	r0, r3
 8020318:	f7fd fc2e 	bl	801db78 <lfs_gstate_iszero>
 802031c:	4603      	mov	r3, r0
 802031e:	f083 0301 	eor.w	r3, r3, #1
 8020322:	b2db      	uxtb	r3, r3
 8020324:	2b00      	cmp	r3, #0
 8020326:	d016      	beq.n	8020356 <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 8020328:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 802032c:	4618      	mov	r0, r3
 802032e:	f7fd fcc9 	bl	801dcc4 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 8020332:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8020336:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 802033a:	4a61      	ldr	r2, [pc, #388]	@ (80204c0 <lfs_dir_compact+0x3d4>)
 802033c:	68f8      	ldr	r0, [r7, #12]
 802033e:	f7ff fb89 	bl	801fa54 <lfs_dir_commitattr>
 8020342:	65f8      	str	r0, [r7, #92]	@ 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 8020344:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020346:	2b00      	cmp	r3, #0
 8020348:	d005      	beq.n	8020356 <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 802034a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802034c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8020350:	d054      	beq.n	80203fc <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 8020352:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020354:	e0a9      	b.n	80204aa <lfs_dir_compact+0x3be>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 8020356:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 802035a:	4619      	mov	r1, r3
 802035c:	68f8      	ldr	r0, [r7, #12]
 802035e:	f7ff fbf9 	bl	801fb54 <lfs_dir_commitcrc>
 8020362:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 8020364:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020366:	2b00      	cmp	r3, #0
 8020368:	d005      	beq.n	8020376 <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 802036a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802036c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8020370:	d046      	beq.n	8020400 <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 8020372:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020374:	e099      	b.n	80204aa <lfs_dir_compact+0x3be>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8020376:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8020378:	68fa      	ldr	r2, [r7, #12]
 802037a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 802037c:	6a12      	ldr	r2, [r2, #32]
 802037e:	fbb3 f1f2 	udiv	r1, r3, r2
 8020382:	fb01 f202 	mul.w	r2, r1, r2
 8020386:	1a9b      	subs	r3, r3, r2
 8020388:	2b00      	cmp	r3, #0
 802038a:	d006      	beq.n	802039a <lfs_dir_compact+0x2ae>
 802038c:	4b4d      	ldr	r3, [pc, #308]	@ (80204c4 <lfs_dir_compact+0x3d8>)
 802038e:	4a4e      	ldr	r2, [pc, #312]	@ (80204c8 <lfs_dir_compact+0x3dc>)
 8020390:	f640 0106 	movw	r1, #2054	@ 0x806
 8020394:	484d      	ldr	r0, [pc, #308]	@ (80204cc <lfs_dir_compact+0x3e0>)
 8020396:	f012 ffd7 	bl	8033348 <__assert_func>
            lfs_pair_swap(dir->pair);
 802039a:	68bb      	ldr	r3, [r7, #8]
 802039c:	4618      	mov	r0, r3
 802039e:	f7fd fa6f 	bl	801d880 <lfs_pair_swap>
            dir->count = end - begin;
 80203a2:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 80203a6:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 80203aa:	1ad3      	subs	r3, r2, r3
 80203ac:	b29a      	uxth	r2, r3
 80203ae:	68bb      	ldr	r3, [r7, #8]
 80203b0:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 80203b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80203b4:	68bb      	ldr	r3, [r7, #8]
 80203b6:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 80203b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80203ba:	68bb      	ldr	r3, [r7, #8]
 80203bc:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 80203be:	68fb      	ldr	r3, [r7, #12]
 80203c0:	3348      	adds	r3, #72	@ 0x48
 80203c2:	2200      	movs	r2, #0
 80203c4:	601a      	str	r2, [r3, #0]
 80203c6:	605a      	str	r2, [r3, #4]
 80203c8:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 80203ca:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80203ce:	f083 0301 	eor.w	r3, r3, #1
 80203d2:	b2db      	uxtb	r3, r3
 80203d4:	2b00      	cmp	r3, #0
 80203d6:	d065      	beq.n	80204a4 <lfs_dir_compact+0x3b8>
                lfs->gdisk = lfs->gstate;
 80203d8:	68fb      	ldr	r3, [r7, #12]
 80203da:	68fa      	ldr	r2, [r7, #12]
 80203dc:	333c      	adds	r3, #60	@ 0x3c
 80203de:	3230      	adds	r2, #48	@ 0x30
 80203e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80203e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 80203e6:	e05d      	b.n	80204a4 <lfs_dir_compact+0x3b8>
        goto relocate;
 80203e8:	bf00      	nop
 80203ea:	e00a      	b.n	8020402 <lfs_dir_compact+0x316>
                    goto relocate;
 80203ec:	bf00      	nop
 80203ee:	e008      	b.n	8020402 <lfs_dir_compact+0x316>
                    goto relocate;
 80203f0:	bf00      	nop
 80203f2:	e006      	b.n	8020402 <lfs_dir_compact+0x316>
                    goto relocate;
 80203f4:	bf00      	nop
 80203f6:	e004      	b.n	8020402 <lfs_dir_compact+0x316>
                        goto relocate;
 80203f8:	bf00      	nop
 80203fa:	e002      	b.n	8020402 <lfs_dir_compact+0x316>
                        goto relocate;
 80203fc:	bf00      	nop
 80203fe:	e000      	b.n	8020402 <lfs_dir_compact+0x316>
                    goto relocate;
 8020400:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 8020402:	2301      	movs	r3, #1
 8020404:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 8020408:	68fb      	ldr	r3, [r7, #12]
 802040a:	3310      	adds	r3, #16
 802040c:	4619      	mov	r1, r3
 802040e:	68f8      	ldr	r0, [r7, #12]
 8020410:	f7fc fe9f 	bl	801d152 <lfs_cache_drop>
        if (!tired) {
 8020414:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8020418:	f083 0301 	eor.w	r3, r3, #1
 802041c:	b2db      	uxtb	r3, r3
 802041e:	2b00      	cmp	r3, #0
 8020420:	d009      	beq.n	8020436 <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 8020422:	68bb      	ldr	r3, [r7, #8]
 8020424:	685b      	ldr	r3, [r3, #4]
 8020426:	4a2a      	ldr	r2, [pc, #168]	@ (80204d0 <lfs_dir_compact+0x3e4>)
 8020428:	9200      	str	r2, [sp, #0]
 802042a:	f640 0218 	movw	r2, #2072	@ 0x818
 802042e:	4927      	ldr	r1, [pc, #156]	@ (80204cc <lfs_dir_compact+0x3e0>)
 8020430:	4828      	ldr	r0, [pc, #160]	@ (80204d4 <lfs_dir_compact+0x3e8>)
 8020432:	f012 ffbd 	bl	80333b0 <printf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8020436:	68bb      	ldr	r3, [r7, #8]
 8020438:	2200      	movs	r2, #0
 802043a:	617a      	str	r2, [r7, #20]
 802043c:	2201      	movs	r2, #1
 802043e:	61ba      	str	r2, [r7, #24]
 8020440:	f107 0214 	add.w	r2, r7, #20
 8020444:	4611      	mov	r1, r2
 8020446:	4618      	mov	r0, r3
 8020448:	f7fd fa4a 	bl	801d8e0 <lfs_pair_cmp>
 802044c:	4603      	mov	r3, r0
 802044e:	2b00      	cmp	r3, #0
 8020450:	d10c      	bne.n	802046c <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 8020452:	68bb      	ldr	r3, [r7, #8]
 8020454:	685b      	ldr	r3, [r3, #4]
 8020456:	4a1e      	ldr	r2, [pc, #120]	@ (80204d0 <lfs_dir_compact+0x3e4>)
 8020458:	9200      	str	r2, [sp, #0]
 802045a:	f640 021d 	movw	r2, #2077	@ 0x81d
 802045e:	491b      	ldr	r1, [pc, #108]	@ (80204cc <lfs_dir_compact+0x3e0>)
 8020460:	481d      	ldr	r0, [pc, #116]	@ (80204d8 <lfs_dir_compact+0x3ec>)
 8020462:	f012 ffa5 	bl	80333b0 <printf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 8020466:	f06f 031b 	mvn.w	r3, #27
 802046a:	e01e      	b.n	80204aa <lfs_dir_compact+0x3be>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 802046c:	68bb      	ldr	r3, [r7, #8]
 802046e:	3304      	adds	r3, #4
 8020470:	4619      	mov	r1, r3
 8020472:	68f8      	ldr	r0, [r7, #12]
 8020474:	f7fd fe28 	bl	801e0c8 <lfs_alloc>
 8020478:	6638      	str	r0, [r7, #96]	@ 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 802047a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802047c:	2b00      	cmp	r3, #0
 802047e:	d00c      	beq.n	802049a <lfs_dir_compact+0x3ae>
 8020480:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020482:	f113 0f1c 	cmn.w	r3, #28
 8020486:	d106      	bne.n	8020496 <lfs_dir_compact+0x3aa>
 8020488:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 802048c:	f083 0301 	eor.w	r3, r3, #1
 8020490:	b2db      	uxtb	r3, r3
 8020492:	2b00      	cmp	r3, #0
 8020494:	d001      	beq.n	802049a <lfs_dir_compact+0x3ae>
            return err;
 8020496:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020498:	e007      	b.n	80204aa <lfs_dir_compact+0x3be>
        }

        tired = false;
 802049a:	2300      	movs	r3, #0
 802049c:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
        continue;
 80204a0:	bf00      	nop
    while (true) {
 80204a2:	e64c      	b.n	802013e <lfs_dir_compact+0x52>
        break;
 80204a4:	bf00      	nop
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 80204a6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80204aa:	4618      	mov	r0, r3
 80204ac:	3768      	adds	r7, #104	@ 0x68
 80204ae:	46bd      	mov	sp, r7
 80204b0:	bd80      	pop	{r7, pc}
 80204b2:	bf00      	nop
 80204b4:	08020075 	.word	0x08020075
 80204b8:	400ffc00 	.word	0x400ffc00
 80204bc:	000ffc08 	.word	0x000ffc08
 80204c0:	7ffffc0c 	.word	0x7ffffc0c
 80204c4:	08040aa0 	.word	0x08040aa0
 80204c8:	080443b4 	.word	0x080443b4
 80204cc:	08040920 	.word	0x08040920
 80204d0:	08040a48 	.word	0x08040a48
 80204d4:	08040ac8 	.word	0x08040ac8
 80204d8:	08040aec 	.word	0x08040aec

080204dc <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 80204dc:	b590      	push	{r4, r7, lr}
 80204de:	b097      	sub	sp, #92	@ 0x5c
 80204e0:	af0a      	add	r7, sp, #40	@ 0x28
 80204e2:	60f8      	str	r0, [r7, #12]
 80204e4:	60b9      	str	r1, [r7, #8]
 80204e6:	607a      	str	r2, [r7, #4]
 80204e8:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 80204ea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80204ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (end - split > 1) {
 80204f0:	e058      	b.n	80205a4 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 80204f2:	2300      	movs	r3, #0
 80204f4:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 80204f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80204f8:	b29b      	uxth	r3, r3
 80204fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80204fc:	b292      	uxth	r2, r2
 80204fe:	4252      	negs	r2, r2
 8020500:	b292      	uxth	r2, r2
 8020502:	b212      	sxth	r2, r2
 8020504:	f107 0118 	add.w	r1, r7, #24
 8020508:	9108      	str	r1, [sp, #32]
 802050a:	4979      	ldr	r1, [pc, #484]	@ (80206f0 <lfs_dir_splittingcompact+0x214>)
 802050c:	9107      	str	r1, [sp, #28]
 802050e:	9206      	str	r2, [sp, #24]
 8020510:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8020514:	9205      	str	r2, [sp, #20]
 8020516:	9304      	str	r3, [sp, #16]
 8020518:	2300      	movs	r3, #0
 802051a:	9303      	str	r3, [sp, #12]
 802051c:	4b75      	ldr	r3, [pc, #468]	@ (80206f4 <lfs_dir_splittingcompact+0x218>)
 802051e:	9302      	str	r3, [sp, #8]
 8020520:	683b      	ldr	r3, [r7, #0]
 8020522:	9301      	str	r3, [sp, #4]
 8020524:	687b      	ldr	r3, [r7, #4]
 8020526:	9300      	str	r3, [sp, #0]
 8020528:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802052c:	2200      	movs	r2, #0
 802052e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8020530:	68f8      	ldr	r0, [r7, #12]
 8020532:	f7fe f899 	bl	801e668 <lfs_dir_traverse>
 8020536:	62b8      	str	r0, [r7, #40]	@ 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 8020538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802053a:	2b00      	cmp	r3, #0
 802053c:	d001      	beq.n	8020542 <lfs_dir_splittingcompact+0x66>
                return err;
 802053e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020540:	e0d2      	b.n	80206e8 <lfs_dir_splittingcompact+0x20c>
            //                 total = 40 bytes
            //
            // And we cap at half a block to avoid degenerate cases with
            // nearly-full metadata blocks.
            //
            if (end - split < 0xff
 8020542:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8020546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020548:	1ad3      	subs	r3, r2, r3
 802054a:	2bfe      	cmp	r3, #254	@ 0xfe
 802054c:	d822      	bhi.n	8020594 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(
                        lfs->cfg->block_size - 40,
 802054e:	68fb      	ldr	r3, [r7, #12]
 8020550:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8020552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                    && size <= lfs_min(
 8020554:	f1a3 0428 	sub.w	r4, r3, #40	@ 0x28
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 8020558:	68fb      	ldr	r3, [r7, #12]
 802055a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802055c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                    && size <= lfs_min(
 802055e:	2b00      	cmp	r3, #0
 8020560:	d004      	beq.n	802056c <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 8020562:	68fb      	ldr	r3, [r7, #12]
 8020564:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8020566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                    && size <= lfs_min(
 8020568:	085b      	lsrs	r3, r3, #1
 802056a:	e003      	b.n	8020574 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 802056c:	68fb      	ldr	r3, [r7, #12]
 802056e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8020570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                    && size <= lfs_min(
 8020572:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 8020574:	68fa      	ldr	r2, [r7, #12]
 8020576:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8020578:	6a12      	ldr	r2, [r2, #32]
                    && size <= lfs_min(
 802057a:	4611      	mov	r1, r2
 802057c:	4618      	mov	r0, r3
 802057e:	f7fc fd57 	bl	801d030 <lfs_alignup>
 8020582:	4603      	mov	r3, r0
 8020584:	4619      	mov	r1, r3
 8020586:	4620      	mov	r0, r4
 8020588:	f7fc fd2d 	bl	801cfe6 <lfs_min>
 802058c:	4602      	mov	r2, r0
 802058e:	69bb      	ldr	r3, [r7, #24]
 8020590:	429a      	cmp	r2, r3
 8020592:	d20e      	bcs.n	80205b2 <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 8020594:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8020598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802059a:	1ad3      	subs	r3, r2, r3
 802059c:	085b      	lsrs	r3, r3, #1
 802059e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80205a0:	4413      	add	r3, r2
 80205a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (end - split > 1) {
 80205a4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80205a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80205aa:	1ad3      	subs	r3, r2, r3
 80205ac:	2b01      	cmp	r3, #1
 80205ae:	d8a0      	bhi.n	80204f2 <lfs_dir_splittingcompact+0x16>
 80205b0:	e000      	b.n	80205b4 <lfs_dir_splittingcompact+0xd8>
                break;
 80205b2:	bf00      	nop
        }

        if (split == begin) {
 80205b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80205b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80205ba:	429a      	cmp	r2, r3
 80205bc:	d02d      	beq.n	802061a <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 80205be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80205c0:	b29b      	uxth	r3, r3
 80205c2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80205c6:	9202      	str	r2, [sp, #8]
 80205c8:	9301      	str	r3, [sp, #4]
 80205ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80205cc:	9300      	str	r3, [sp, #0]
 80205ce:	683b      	ldr	r3, [r7, #0]
 80205d0:	687a      	ldr	r2, [r7, #4]
 80205d2:	68b9      	ldr	r1, [r7, #8]
 80205d4:	68f8      	ldr	r0, [r7, #12]
 80205d6:	f7ff fce3 	bl	801ffa0 <lfs_dir_split>
 80205da:	6278      	str	r0, [r7, #36]	@ 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 80205dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80205de:	2b00      	cmp	r3, #0
 80205e0:	d005      	beq.n	80205ee <lfs_dir_splittingcompact+0x112>
 80205e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80205e4:	f113 0f1c 	cmn.w	r3, #28
 80205e8:	d001      	beq.n	80205ee <lfs_dir_splittingcompact+0x112>
            return err;
 80205ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80205ec:	e07c      	b.n	80206e8 <lfs_dir_splittingcompact+0x20c>
        }

        if (err) {
 80205ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80205f0:	2b00      	cmp	r3, #0
 80205f2:	d00e      	beq.n	8020612 <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 80205f4:	68bb      	ldr	r3, [r7, #8]
 80205f6:	681a      	ldr	r2, [r3, #0]
 80205f8:	68bb      	ldr	r3, [r7, #8]
 80205fa:	685b      	ldr	r3, [r3, #4]
 80205fc:	493e      	ldr	r1, [pc, #248]	@ (80206f8 <lfs_dir_splittingcompact+0x21c>)
 80205fe:	9101      	str	r1, [sp, #4]
 8020600:	9300      	str	r3, [sp, #0]
 8020602:	4613      	mov	r3, r2
 8020604:	f44f 6207 	mov.w	r2, #2160	@ 0x870
 8020608:	493c      	ldr	r1, [pc, #240]	@ (80206fc <lfs_dir_splittingcompact+0x220>)
 802060a:	483d      	ldr	r0, [pc, #244]	@ (8020700 <lfs_dir_splittingcompact+0x224>)
 802060c:	f012 fed0 	bl	80333b0 <printf>
                    dir->pair[0], dir->pair[1]);
            break;
 8020610:	e004      	b.n	802061c <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 8020612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020614:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    while (true) {
 8020618:	e767      	b.n	80204ea <lfs_dir_splittingcompact+0xe>
            break;
 802061a:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 802061c:	68b9      	ldr	r1, [r7, #8]
 802061e:	68f8      	ldr	r0, [r7, #12]
 8020620:	f7ff fd3d 	bl	802009e <lfs_dir_needsrelocation>
 8020624:	4603      	mov	r3, r0
 8020626:	2b00      	cmp	r3, #0
 8020628:	d04f      	beq.n	80206ca <lfs_dir_splittingcompact+0x1ee>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 802062a:	68bb      	ldr	r3, [r7, #8]
 802062c:	2200      	movs	r2, #0
 802062e:	613a      	str	r2, [r7, #16]
 8020630:	2201      	movs	r2, #1
 8020632:	617a      	str	r2, [r7, #20]
 8020634:	f107 0210 	add.w	r2, r7, #16
 8020638:	4611      	mov	r1, r2
 802063a:	4618      	mov	r0, r3
 802063c:	f7fd f950 	bl	801d8e0 <lfs_pair_cmp>
 8020640:	4603      	mov	r3, r0
 8020642:	2b00      	cmp	r3, #0
 8020644:	d141      	bne.n	80206ca <lfs_dir_splittingcompact+0x1ee>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_size_(lfs);
 8020646:	68f8      	ldr	r0, [r7, #12]
 8020648:	f004 f8ea 	bl	8024820 <lfs_fs_size_>
 802064c:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 802064e:	6a3b      	ldr	r3, [r7, #32]
 8020650:	2b00      	cmp	r3, #0
 8020652:	da01      	bge.n	8020658 <lfs_dir_splittingcompact+0x17c>
            return size;
 8020654:	6a3b      	ldr	r3, [r7, #32]
 8020656:	e047      	b.n	80206e8 <lfs_dir_splittingcompact+0x20c>

        // littlefs cannot reclaim expanded superblocks, so expand cautiously
        //
        // if our filesystem is more than ~88% full, don't expand, this is
        // somewhat arbitrary
        if (lfs->block_count - size > lfs->block_count/8) {
 8020658:	68fb      	ldr	r3, [r7, #12]
 802065a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 802065c:	6a3b      	ldr	r3, [r7, #32]
 802065e:	1ad2      	subs	r2, r2, r3
 8020660:	68fb      	ldr	r3, [r7, #12]
 8020662:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8020664:	08db      	lsrs	r3, r3, #3
 8020666:	429a      	cmp	r2, r3
 8020668:	d92f      	bls.n	80206ca <lfs_dir_splittingcompact+0x1ee>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 802066a:	68bb      	ldr	r3, [r7, #8]
 802066c:	689b      	ldr	r3, [r3, #8]
 802066e:	4a22      	ldr	r2, [pc, #136]	@ (80206f8 <lfs_dir_splittingcompact+0x21c>)
 8020670:	9200      	str	r2, [sp, #0]
 8020672:	f640 0286 	movw	r2, #2182	@ 0x886
 8020676:	4921      	ldr	r1, [pc, #132]	@ (80206fc <lfs_dir_splittingcompact+0x220>)
 8020678:	4822      	ldr	r0, [pc, #136]	@ (8020704 <lfs_dir_splittingcompact+0x228>)
 802067a:	f012 fe99 	bl	80333b0 <printf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 802067e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8020682:	9302      	str	r3, [sp, #8]
 8020684:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8020688:	9301      	str	r3, [sp, #4]
 802068a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802068c:	9300      	str	r3, [sp, #0]
 802068e:	683b      	ldr	r3, [r7, #0]
 8020690:	687a      	ldr	r2, [r7, #4]
 8020692:	68b9      	ldr	r1, [r7, #8]
 8020694:	68f8      	ldr	r0, [r7, #12]
 8020696:	f7ff fc83 	bl	801ffa0 <lfs_dir_split>
 802069a:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 802069c:	69fb      	ldr	r3, [r7, #28]
 802069e:	2b00      	cmp	r3, #0
 80206a0:	d005      	beq.n	80206ae <lfs_dir_splittingcompact+0x1d2>
 80206a2:	69fb      	ldr	r3, [r7, #28]
 80206a4:	f113 0f1c 	cmn.w	r3, #28
 80206a8:	d001      	beq.n	80206ae <lfs_dir_splittingcompact+0x1d2>
                return err;
 80206aa:	69fb      	ldr	r3, [r7, #28]
 80206ac:	e01c      	b.n	80206e8 <lfs_dir_splittingcompact+0x20c>
            }

            if (err) {
 80206ae:	69fb      	ldr	r3, [r7, #28]
 80206b0:	2b00      	cmp	r3, #0
 80206b2:	d007      	beq.n	80206c4 <lfs_dir_splittingcompact+0x1e8>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 80206b4:	4b10      	ldr	r3, [pc, #64]	@ (80206f8 <lfs_dir_splittingcompact+0x21c>)
 80206b6:	f44f 6209 	mov.w	r2, #2192	@ 0x890
 80206ba:	4910      	ldr	r1, [pc, #64]	@ (80206fc <lfs_dir_splittingcompact+0x220>)
 80206bc:	4812      	ldr	r0, [pc, #72]	@ (8020708 <lfs_dir_splittingcompact+0x22c>)
 80206be:	f012 fe77 	bl	80333b0 <printf>
 80206c2:	e002      	b.n	80206ca <lfs_dir_splittingcompact+0x1ee>
            } else {
                // duplicate the superblock entry into the new superblock
                end = 1;
 80206c4:	2301      	movs	r3, #1
 80206c6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 80206ca:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80206ce:	9302      	str	r3, [sp, #8]
 80206d0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80206d4:	9301      	str	r3, [sp, #4]
 80206d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80206d8:	9300      	str	r3, [sp, #0]
 80206da:	683b      	ldr	r3, [r7, #0]
 80206dc:	687a      	ldr	r2, [r7, #4]
 80206de:	68b9      	ldr	r1, [r7, #8]
 80206e0:	68f8      	ldr	r0, [r7, #12]
 80206e2:	f7ff fd03 	bl	80200ec <lfs_dir_compact>
 80206e6:	4603      	mov	r3, r0
}
 80206e8:	4618      	mov	r0, r3
 80206ea:	3734      	adds	r7, #52	@ 0x34
 80206ec:	46bd      	mov	sp, r7
 80206ee:	bd90      	pop	{r4, r7, pc}
 80206f0:	08020049 	.word	0x08020049
 80206f4:	400ffc00 	.word	0x400ffc00
 80206f8:	08040a48 	.word	0x08040a48
 80206fc:	08040920 	.word	0x08040920
 8020700:	08040b24 	.word	0x08040b24
 8020704:	08040b54 	.word	0x08040b54
 8020708:	08040b84 	.word	0x08040b84

0802070c <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 802070c:	b5b0      	push	{r4, r5, r7, lr}
 802070e:	b0a6      	sub	sp, #152	@ 0x98
 8020710:	af0a      	add	r7, sp, #40	@ 0x28
 8020712:	60f8      	str	r0, [r7, #12]
 8020714:	60b9      	str	r1, [r7, #8]
 8020716:	607a      	str	r2, [r7, #4]
 8020718:	603b      	str	r3, [r7, #0]
    int state = 0;
 802071a:	2300      	movs	r3, #0
 802071c:	66fb      	str	r3, [r7, #108]	@ 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 802071e:	2300      	movs	r3, #0
 8020720:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    for (int i = 0; i < attrcount; i++) {
 8020724:	2300      	movs	r3, #0
 8020726:	667b      	str	r3, [r7, #100]	@ 0x64
 8020728:	e06d      	b.n	8020806 <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 802072a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802072c:	00db      	lsls	r3, r3, #3
 802072e:	683a      	ldr	r2, [r7, #0]
 8020730:	4413      	add	r3, r2
 8020732:	681b      	ldr	r3, [r3, #0]
 8020734:	4618      	mov	r0, r3
 8020736:	f7fd f99f 	bl	801da78 <lfs_tag_type3>
 802073a:	4603      	mov	r3, r0
 802073c:	461a      	mov	r2, r3
 802073e:	f240 4301 	movw	r3, #1025	@ 0x401
 8020742:	429a      	cmp	r2, r3
 8020744:	d106      	bne.n	8020754 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 8020746:	68bb      	ldr	r3, [r7, #8]
 8020748:	8a9b      	ldrh	r3, [r3, #20]
 802074a:	3301      	adds	r3, #1
 802074c:	b29a      	uxth	r2, r3
 802074e:	68bb      	ldr	r3, [r7, #8]
 8020750:	829a      	strh	r2, [r3, #20]
 8020752:	e055      	b.n	8020800 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8020754:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020756:	00db      	lsls	r3, r3, #3
 8020758:	683a      	ldr	r2, [r7, #0]
 802075a:	4413      	add	r3, r2
 802075c:	681b      	ldr	r3, [r3, #0]
 802075e:	4618      	mov	r0, r3
 8020760:	f7fd f98a 	bl	801da78 <lfs_tag_type3>
 8020764:	4603      	mov	r3, r0
 8020766:	461a      	mov	r2, r3
 8020768:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 802076c:	429a      	cmp	r2, r3
 802076e:	d114      	bne.n	802079a <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 8020770:	68bb      	ldr	r3, [r7, #8]
 8020772:	8a9b      	ldrh	r3, [r3, #20]
 8020774:	2b00      	cmp	r3, #0
 8020776:	d106      	bne.n	8020786 <lfs_dir_relocatingcommit+0x7a>
 8020778:	4ba4      	ldr	r3, [pc, #656]	@ (8020a0c <lfs_dir_relocatingcommit+0x300>)
 802077a:	4aa5      	ldr	r2, [pc, #660]	@ (8020a10 <lfs_dir_relocatingcommit+0x304>)
 802077c:	f640 01a9 	movw	r1, #2217	@ 0x8a9
 8020780:	48a4      	ldr	r0, [pc, #656]	@ (8020a14 <lfs_dir_relocatingcommit+0x308>)
 8020782:	f012 fde1 	bl	8033348 <__assert_func>
            dir->count -= 1;
 8020786:	68bb      	ldr	r3, [r7, #8]
 8020788:	8a9b      	ldrh	r3, [r3, #20]
 802078a:	3b01      	subs	r3, #1
 802078c:	b29a      	uxth	r2, r3
 802078e:	68bb      	ldr	r3, [r7, #8]
 8020790:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 8020792:	2301      	movs	r3, #1
 8020794:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 8020798:	e032      	b.n	8020800 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 802079a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802079c:	00db      	lsls	r3, r3, #3
 802079e:	683a      	ldr	r2, [r7, #0]
 80207a0:	4413      	add	r3, r2
 80207a2:	681b      	ldr	r3, [r3, #0]
 80207a4:	4618      	mov	r0, r3
 80207a6:	f7fd f947 	bl	801da38 <lfs_tag_type1>
 80207aa:	4603      	mov	r3, r0
 80207ac:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80207b0:	d126      	bne.n	8020800 <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 80207b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80207b4:	00db      	lsls	r3, r3, #3
 80207b6:	683a      	ldr	r2, [r7, #0]
 80207b8:	4413      	add	r3, r2
 80207ba:	685b      	ldr	r3, [r3, #4]
 80207bc:	681a      	ldr	r2, [r3, #0]
 80207be:	68bb      	ldr	r3, [r7, #8]
 80207c0:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 80207c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80207c4:	00db      	lsls	r3, r3, #3
 80207c6:	683a      	ldr	r2, [r7, #0]
 80207c8:	4413      	add	r3, r2
 80207ca:	685b      	ldr	r3, [r3, #4]
 80207cc:	685a      	ldr	r2, [r3, #4]
 80207ce:	68bb      	ldr	r3, [r7, #8]
 80207d0:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 80207d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80207d4:	00db      	lsls	r3, r3, #3
 80207d6:	683a      	ldr	r2, [r7, #0]
 80207d8:	4413      	add	r3, r2
 80207da:	681b      	ldr	r3, [r3, #0]
 80207dc:	4618      	mov	r0, r3
 80207de:	f7fd f95b 	bl	801da98 <lfs_tag_chunk>
 80207e2:	4603      	mov	r3, r0
 80207e4:	f003 0301 	and.w	r3, r3, #1
 80207e8:	2b00      	cmp	r3, #0
 80207ea:	bf14      	ite	ne
 80207ec:	2301      	movne	r3, #1
 80207ee:	2300      	moveq	r3, #0
 80207f0:	b2da      	uxtb	r2, r3
 80207f2:	68bb      	ldr	r3, [r7, #8]
 80207f4:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 80207f6:	68bb      	ldr	r3, [r7, #8]
 80207f8:	3318      	adds	r3, #24
 80207fa:	4618      	mov	r0, r3
 80207fc:	f7fd f8c7 	bl	801d98e <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 8020800:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020802:	3301      	adds	r3, #1
 8020804:	667b      	str	r3, [r7, #100]	@ 0x64
 8020806:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8020808:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 802080c:	429a      	cmp	r2, r3
 802080e:	db8c      	blt.n	802072a <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 8020810:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8020814:	2b00      	cmp	r3, #0
 8020816:	d02b      	beq.n	8020870 <lfs_dir_relocatingcommit+0x164>
 8020818:	68bb      	ldr	r3, [r7, #8]
 802081a:	8a9b      	ldrh	r3, [r3, #20]
 802081c:	2b00      	cmp	r3, #0
 802081e:	d127      	bne.n	8020870 <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 8020820:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8020824:	2b00      	cmp	r3, #0
 8020826:	d106      	bne.n	8020836 <lfs_dir_relocatingcommit+0x12a>
 8020828:	4b7b      	ldr	r3, [pc, #492]	@ (8020a18 <lfs_dir_relocatingcommit+0x30c>)
 802082a:	4a79      	ldr	r2, [pc, #484]	@ (8020a10 <lfs_dir_relocatingcommit+0x304>)
 802082c:	f640 01b6 	movw	r1, #2230	@ 0x8b6
 8020830:	4878      	ldr	r0, [pc, #480]	@ (8020a14 <lfs_dir_relocatingcommit+0x308>)
 8020832:	f012 fd89 	bl	8033348 <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 8020836:	68bb      	ldr	r3, [r7, #8]
 8020838:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 802083c:	4619      	mov	r1, r3
 802083e:	68f8      	ldr	r0, [r7, #12]
 8020840:	f003 fb4a 	bl	8023ed8 <lfs_fs_pred>
 8020844:	65b8      	str	r0, [r7, #88]	@ 0x58
        if (err && err != LFS_ERR_NOENT) {
 8020846:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8020848:	2b00      	cmp	r3, #0
 802084a:	d005      	beq.n	8020858 <lfs_dir_relocatingcommit+0x14c>
 802084c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802084e:	f113 0f02 	cmn.w	r3, #2
 8020852:	d001      	beq.n	8020858 <lfs_dir_relocatingcommit+0x14c>
            return err;
 8020854:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8020856:	e210      	b.n	8020c7a <lfs_dir_relocatingcommit+0x56e>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 8020858:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802085a:	f113 0f02 	cmn.w	r3, #2
 802085e:	d007      	beq.n	8020870 <lfs_dir_relocatingcommit+0x164>
 8020860:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8020864:	7ddb      	ldrb	r3, [r3, #23]
 8020866:	2b00      	cmp	r3, #0
 8020868:	d002      	beq.n	8020870 <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 802086a:	2302      	movs	r3, #2
 802086c:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto fixmlist;
 802086e:	e121      	b.n	8020ab4 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 8020870:	68bb      	ldr	r3, [r7, #8]
 8020872:	7d9b      	ldrb	r3, [r3, #22]
 8020874:	2b00      	cmp	r3, #0
 8020876:	f000 80fb 	beq.w	8020a70 <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 802087a:	68bb      	ldr	r3, [r7, #8]
 802087c:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 802087e:	633b      	str	r3, [r7, #48]	@ 0x30
            .off = dir->off,
 8020880:	68bb      	ldr	r3, [r7, #8]
 8020882:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8020884:	637b      	str	r3, [r7, #52]	@ 0x34
            .ptag = dir->etag,
 8020886:	68bb      	ldr	r3, [r7, #8]
 8020888:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 802088a:	63bb      	str	r3, [r7, #56]	@ 0x38
 802088c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020890:	63fb      	str	r3, [r7, #60]	@ 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 8020892:	68bb      	ldr	r3, [r7, #8]
 8020894:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8020896:	643b      	str	r3, [r7, #64]	@ 0x40
            .end = (lfs->cfg->metadata_max ?
 8020898:	68fb      	ldr	r3, [r7, #12]
 802089a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802089c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 802089e:	2b00      	cmp	r3, #0
 80208a0:	d004      	beq.n	80208ac <lfs_dir_relocatingcommit+0x1a0>
 80208a2:	68fb      	ldr	r3, [r7, #12]
 80208a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80208a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80208a8:	3b08      	subs	r3, #8
 80208aa:	e003      	b.n	80208b4 <lfs_dir_relocatingcommit+0x1a8>
 80208ac:	68fb      	ldr	r3, [r7, #12]
 80208ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80208b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80208b2:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 80208b4:	647b      	str	r3, [r7, #68]	@ 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 80208b6:	68bb      	ldr	r3, [r7, #8]
 80208b8:	3318      	adds	r3, #24
 80208ba:	4618      	mov	r0, r3
 80208bc:	f7fd f881 	bl	801d9c2 <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 80208c0:	68bb      	ldr	r3, [r7, #8]
 80208c2:	68da      	ldr	r2, [r3, #12]
 80208c4:	68bb      	ldr	r3, [r7, #8]
 80208c6:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 80208c8:	68fb      	ldr	r3, [r7, #12]
 80208ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80208cc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80208d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        int err = lfs_dir_traverse(lfs,
 80208d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80208d6:	9308      	str	r3, [sp, #32]
 80208d8:	4b50      	ldr	r3, [pc, #320]	@ (8020a1c <lfs_dir_relocatingcommit+0x310>)
 80208da:	9307      	str	r3, [sp, #28]
 80208dc:	2300      	movs	r3, #0
 80208de:	9306      	str	r3, [sp, #24]
 80208e0:	2300      	movs	r3, #0
 80208e2:	9305      	str	r3, [sp, #20]
 80208e4:	2300      	movs	r3, #0
 80208e6:	9304      	str	r3, [sp, #16]
 80208e8:	2300      	movs	r3, #0
 80208ea:	9303      	str	r3, [sp, #12]
 80208ec:	2300      	movs	r3, #0
 80208ee:	9302      	str	r3, [sp, #8]
 80208f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80208f4:	9301      	str	r3, [sp, #4]
 80208f6:	683b      	ldr	r3, [r7, #0]
 80208f8:	9300      	str	r3, [sp, #0]
 80208fa:	460b      	mov	r3, r1
 80208fc:	68b9      	ldr	r1, [r7, #8]
 80208fe:	68f8      	ldr	r0, [r7, #12]
 8020900:	f7fd feb2 	bl	801e668 <lfs_dir_traverse>
 8020904:	6578      	str	r0, [r7, #84]	@ 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 8020906:	68bb      	ldr	r3, [r7, #8]
 8020908:	3318      	adds	r3, #24
 802090a:	4618      	mov	r0, r3
 802090c:	f7fd f83f 	bl	801d98e <lfs_pair_fromle32>
        if (err) {
 8020910:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8020912:	2b00      	cmp	r3, #0
 8020914:	d00b      	beq.n	802092e <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8020916:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8020918:	f113 0f1c 	cmn.w	r3, #28
 802091c:	f000 80aa 	beq.w	8020a74 <lfs_dir_relocatingcommit+0x368>
 8020920:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8020922:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8020926:	f000 80a5 	beq.w	8020a74 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 802092a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802092c:	e1a5      	b.n	8020c7a <lfs_dir_relocatingcommit+0x56e>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 802092e:	f107 031c 	add.w	r3, r7, #28
 8020932:	2200      	movs	r2, #0
 8020934:	601a      	str	r2, [r3, #0]
 8020936:	605a      	str	r2, [r3, #4]
 8020938:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 802093a:	68fb      	ldr	r3, [r7, #12]
 802093c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8020940:	f107 031c 	add.w	r3, r7, #28
 8020944:	4611      	mov	r1, r2
 8020946:	4618      	mov	r0, r3
 8020948:	f7fd f8f1 	bl	801db2e <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 802094c:	68fb      	ldr	r3, [r7, #12]
 802094e:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8020952:	f107 031c 	add.w	r3, r7, #28
 8020956:	4611      	mov	r1, r2
 8020958:	4618      	mov	r0, r3
 802095a:	f7fd f8e8 	bl	801db2e <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 802095e:	68fb      	ldr	r3, [r7, #12]
 8020960:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8020964:	f107 031c 	add.w	r3, r7, #28
 8020968:	4611      	mov	r1, r2
 802096a:	4618      	mov	r0, r3
 802096c:	f7fd f8df 	bl	801db2e <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8020970:	69fb      	ldr	r3, [r7, #28]
 8020972:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8020976:	f023 0303 	bic.w	r3, r3, #3
 802097a:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 802097c:	f107 031c 	add.w	r3, r7, #28
 8020980:	4618      	mov	r0, r3
 8020982:	f7fd f8f9 	bl	801db78 <lfs_gstate_iszero>
 8020986:	4603      	mov	r3, r0
 8020988:	f083 0301 	eor.w	r3, r3, #1
 802098c:	b2db      	uxtb	r3, r3
 802098e:	2b00      	cmp	r3, #0
 8020990:	d027      	beq.n	80209e2 <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 8020992:	f107 031c 	add.w	r3, r7, #28
 8020996:	461a      	mov	r2, r3
 8020998:	68b9      	ldr	r1, [r7, #8]
 802099a:	68f8      	ldr	r0, [r7, #12]
 802099c:	f7fe fe34 	bl	801f608 <lfs_dir_getgstate>
 80209a0:	6578      	str	r0, [r7, #84]	@ 0x54
            if (err) {
 80209a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80209a4:	2b00      	cmp	r3, #0
 80209a6:	d001      	beq.n	80209ac <lfs_dir_relocatingcommit+0x2a0>
                return err;
 80209a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80209aa:	e166      	b.n	8020c7a <lfs_dir_relocatingcommit+0x56e>
            }

            lfs_gstate_tole32(&delta);
 80209ac:	f107 031c 	add.w	r3, r7, #28
 80209b0:	4618      	mov	r0, r3
 80209b2:	f7fd f987 	bl	801dcc4 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 80209b6:	f107 031c 	add.w	r3, r7, #28
 80209ba:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80209be:	4a18      	ldr	r2, [pc, #96]	@ (8020a20 <lfs_dir_relocatingcommit+0x314>)
 80209c0:	68f8      	ldr	r0, [r7, #12]
 80209c2:	f7ff f847 	bl	801fa54 <lfs_dir_commitattr>
 80209c6:	6578      	str	r0, [r7, #84]	@ 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 80209c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80209ca:	2b00      	cmp	r3, #0
 80209cc:	d009      	beq.n	80209e2 <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80209ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80209d0:	f113 0f1c 	cmn.w	r3, #28
 80209d4:	d050      	beq.n	8020a78 <lfs_dir_relocatingcommit+0x36c>
 80209d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80209d8:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80209dc:	d04c      	beq.n	8020a78 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 80209de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80209e0:	e14b      	b.n	8020c7a <lfs_dir_relocatingcommit+0x56e>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 80209e2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80209e6:	4619      	mov	r1, r3
 80209e8:	68f8      	ldr	r0, [r7, #12]
 80209ea:	f7ff f8b3 	bl	801fb54 <lfs_dir_commitcrc>
 80209ee:	6578      	str	r0, [r7, #84]	@ 0x54
        if (err) {
 80209f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80209f2:	2b00      	cmp	r3, #0
 80209f4:	d016      	beq.n	8020a24 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80209f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80209f8:	f113 0f1c 	cmn.w	r3, #28
 80209fc:	d03e      	beq.n	8020a7c <lfs_dir_relocatingcommit+0x370>
 80209fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8020a00:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8020a04:	d03a      	beq.n	8020a7c <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 8020a06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8020a08:	e137      	b.n	8020c7a <lfs_dir_relocatingcommit+0x56e>
 8020a0a:	bf00      	nop
 8020a0c:	08040bb0 	.word	0x08040bb0
 8020a10:	080443c4 	.word	0x080443c4
 8020a14:	08040920 	.word	0x08040920
 8020a18:	08040bc0 	.word	0x08040bc0
 8020a1c:	08020075 	.word	0x08020075
 8020a20:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8020a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020a26:	68fa      	ldr	r2, [r7, #12]
 8020a28:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8020a2a:	6a12      	ldr	r2, [r2, #32]
 8020a2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8020a30:	fb01 f202 	mul.w	r2, r1, r2
 8020a34:	1a9b      	subs	r3, r3, r2
 8020a36:	2b00      	cmp	r3, #0
 8020a38:	d006      	beq.n	8020a48 <lfs_dir_relocatingcommit+0x33c>
 8020a3a:	4b92      	ldr	r3, [pc, #584]	@ (8020c84 <lfs_dir_relocatingcommit+0x578>)
 8020a3c:	4a92      	ldr	r2, [pc, #584]	@ (8020c88 <lfs_dir_relocatingcommit+0x57c>)
 8020a3e:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 8020a42:	4892      	ldr	r0, [pc, #584]	@ (8020c8c <lfs_dir_relocatingcommit+0x580>)
 8020a44:	f012 fc80 	bl	8033348 <__assert_func>
        dir->off = commit.off;
 8020a48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8020a4a:	68bb      	ldr	r3, [r7, #8]
 8020a4c:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 8020a4e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8020a50:	68bb      	ldr	r3, [r7, #8]
 8020a52:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 8020a54:	68fb      	ldr	r3, [r7, #12]
 8020a56:	68fa      	ldr	r2, [r7, #12]
 8020a58:	333c      	adds	r3, #60	@ 0x3c
 8020a5a:	3230      	adds	r2, #48	@ 0x30
 8020a5c:	ca07      	ldmia	r2, {r0, r1, r2}
 8020a5e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 8020a62:	68fb      	ldr	r3, [r7, #12]
 8020a64:	3348      	adds	r3, #72	@ 0x48
 8020a66:	2200      	movs	r2, #0
 8020a68:	601a      	str	r2, [r3, #0]
 8020a6a:	605a      	str	r2, [r3, #4]
 8020a6c:	609a      	str	r2, [r3, #8]
 8020a6e:	e021      	b.n	8020ab4 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 8020a70:	bf00      	nop
 8020a72:	e004      	b.n	8020a7e <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8020a74:	bf00      	nop
 8020a76:	e002      	b.n	8020a7e <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 8020a78:	bf00      	nop
 8020a7a:	e000      	b.n	8020a7e <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8020a7c:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 8020a7e:	68fb      	ldr	r3, [r7, #12]
 8020a80:	3310      	adds	r3, #16
 8020a82:	4619      	mov	r1, r3
 8020a84:	68f8      	ldr	r0, [r7, #12]
 8020a86:	f7fc fb64 	bl	801d152 <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 8020a8a:	68bb      	ldr	r3, [r7, #8]
 8020a8c:	8a9b      	ldrh	r3, [r3, #20]
 8020a8e:	9302      	str	r3, [sp, #8]
 8020a90:	2300      	movs	r3, #0
 8020a92:	9301      	str	r3, [sp, #4]
 8020a94:	68bb      	ldr	r3, [r7, #8]
 8020a96:	9300      	str	r3, [sp, #0]
 8020a98:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8020a9c:	683a      	ldr	r2, [r7, #0]
 8020a9e:	68b9      	ldr	r1, [r7, #8]
 8020aa0:	68f8      	ldr	r0, [r7, #12]
 8020aa2:	f7ff fd1b 	bl	80204dc <lfs_dir_splittingcompact>
 8020aa6:	66f8      	str	r0, [r7, #108]	@ 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 8020aa8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8020aaa:	2b00      	cmp	r3, #0
 8020aac:	da01      	bge.n	8020ab2 <lfs_dir_relocatingcommit+0x3a6>
        return state;
 8020aae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8020ab0:	e0e3      	b.n	8020c7a <lfs_dir_relocatingcommit+0x56e>
    }

    goto fixmlist;
 8020ab2:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8020ab4:	687b      	ldr	r3, [r7, #4]
 8020ab6:	681b      	ldr	r3, [r3, #0]
 8020ab8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8020aba:	687b      	ldr	r3, [r7, #4]
 8020abc:	3304      	adds	r3, #4
 8020abe:	681b      	ldr	r3, [r3, #0]
 8020ac0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8020ac2:	68fb      	ldr	r3, [r7, #12]
 8020ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020ac6:	663b      	str	r3, [r7, #96]	@ 0x60
 8020ac8:	e0d2      	b.n	8020c70 <lfs_dir_relocatingcommit+0x564>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 8020aca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020acc:	3308      	adds	r3, #8
 8020ace:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8020ad2:	4611      	mov	r1, r2
 8020ad4:	4618      	mov	r0, r3
 8020ad6:	f7fc ff03 	bl	801d8e0 <lfs_pair_cmp>
 8020ada:	4603      	mov	r3, r0
 8020adc:	2b00      	cmp	r3, #0
 8020ade:	f040 80c4 	bne.w	8020c6a <lfs_dir_relocatingcommit+0x55e>
            d->m = *dir;
 8020ae2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020ae4:	68ba      	ldr	r2, [r7, #8]
 8020ae6:	f103 0408 	add.w	r4, r3, #8
 8020aea:	4615      	mov	r5, r2
 8020aec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8020aee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8020af0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8020af4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 8020af8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020afa:	3308      	adds	r3, #8
 8020afc:	687a      	ldr	r2, [r7, #4]
 8020afe:	429a      	cmp	r2, r3
 8020b00:	f000 80a9 	beq.w	8020c56 <lfs_dir_relocatingcommit+0x54a>
                for (int i = 0; i < attrcount; i++) {
 8020b04:	2300      	movs	r3, #0
 8020b06:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8020b08:	e07b      	b.n	8020c02 <lfs_dir_relocatingcommit+0x4f6>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8020b0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020b0c:	00db      	lsls	r3, r3, #3
 8020b0e:	683a      	ldr	r2, [r7, #0]
 8020b10:	4413      	add	r3, r2
 8020b12:	681b      	ldr	r3, [r3, #0]
 8020b14:	4618      	mov	r0, r3
 8020b16:	f7fc ffaf 	bl	801da78 <lfs_tag_type3>
 8020b1a:	4603      	mov	r3, r0
 8020b1c:	461a      	mov	r2, r3
 8020b1e:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 8020b22:	429a      	cmp	r2, r3
 8020b24:	d115      	bne.n	8020b52 <lfs_dir_relocatingcommit+0x446>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 8020b26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020b28:	889c      	ldrh	r4, [r3, #4]
 8020b2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020b2c:	00db      	lsls	r3, r3, #3
 8020b2e:	683a      	ldr	r2, [r7, #0]
 8020b30:	4413      	add	r3, r2
 8020b32:	681b      	ldr	r3, [r3, #0]
 8020b34:	4618      	mov	r0, r3
 8020b36:	f7fc ffc9 	bl	801dacc <lfs_tag_id>
 8020b3a:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8020b3c:	429c      	cmp	r4, r3
 8020b3e:	d108      	bne.n	8020b52 <lfs_dir_relocatingcommit+0x446>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 8020b40:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020b42:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8020b46:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 8020b48:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020b4a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8020b4e:	60da      	str	r2, [r3, #12]
 8020b50:	e054      	b.n	8020bfc <lfs_dir_relocatingcommit+0x4f0>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8020b52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020b54:	00db      	lsls	r3, r3, #3
 8020b56:	683a      	ldr	r2, [r7, #0]
 8020b58:	4413      	add	r3, r2
 8020b5a:	681b      	ldr	r3, [r3, #0]
 8020b5c:	4618      	mov	r0, r3
 8020b5e:	f7fc ff8b 	bl	801da78 <lfs_tag_type3>
 8020b62:	4603      	mov	r3, r0
 8020b64:	461a      	mov	r2, r3
 8020b66:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 8020b6a:	429a      	cmp	r2, r3
 8020b6c:	d11c      	bne.n	8020ba8 <lfs_dir_relocatingcommit+0x49c>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 8020b6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020b70:	889c      	ldrh	r4, [r3, #4]
 8020b72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020b74:	00db      	lsls	r3, r3, #3
 8020b76:	683a      	ldr	r2, [r7, #0]
 8020b78:	4413      	add	r3, r2
 8020b7a:	681b      	ldr	r3, [r3, #0]
 8020b7c:	4618      	mov	r0, r3
 8020b7e:	f7fc ffa5 	bl	801dacc <lfs_tag_id>
 8020b82:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8020b84:	429c      	cmp	r4, r3
 8020b86:	d90f      	bls.n	8020ba8 <lfs_dir_relocatingcommit+0x49c>
                        d->id -= 1;
 8020b88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020b8a:	889b      	ldrh	r3, [r3, #4]
 8020b8c:	3b01      	subs	r3, #1
 8020b8e:	b29a      	uxth	r2, r3
 8020b90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020b92:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8020b94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020b96:	799b      	ldrb	r3, [r3, #6]
 8020b98:	2b02      	cmp	r3, #2
 8020b9a:	d12f      	bne.n	8020bfc <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos -= 1;
 8020b9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020ba0:	1e5a      	subs	r2, r3, #1
 8020ba2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020ba4:	629a      	str	r2, [r3, #40]	@ 0x28
                        if (d->type == LFS_TYPE_DIR) {
 8020ba6:	e029      	b.n	8020bfc <lfs_dir_relocatingcommit+0x4f0>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8020ba8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020baa:	00db      	lsls	r3, r3, #3
 8020bac:	683a      	ldr	r2, [r7, #0]
 8020bae:	4413      	add	r3, r2
 8020bb0:	681b      	ldr	r3, [r3, #0]
 8020bb2:	4618      	mov	r0, r3
 8020bb4:	f7fc ff60 	bl	801da78 <lfs_tag_type3>
 8020bb8:	4603      	mov	r3, r0
 8020bba:	461a      	mov	r2, r3
 8020bbc:	f240 4301 	movw	r3, #1025	@ 0x401
 8020bc0:	429a      	cmp	r2, r3
 8020bc2:	d11b      	bne.n	8020bfc <lfs_dir_relocatingcommit+0x4f0>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 8020bc4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020bc6:	889c      	ldrh	r4, [r3, #4]
 8020bc8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020bca:	00db      	lsls	r3, r3, #3
 8020bcc:	683a      	ldr	r2, [r7, #0]
 8020bce:	4413      	add	r3, r2
 8020bd0:	681b      	ldr	r3, [r3, #0]
 8020bd2:	4618      	mov	r0, r3
 8020bd4:	f7fc ff7a 	bl	801dacc <lfs_tag_id>
 8020bd8:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8020bda:	429c      	cmp	r4, r3
 8020bdc:	d30e      	bcc.n	8020bfc <lfs_dir_relocatingcommit+0x4f0>
                        d->id += 1;
 8020bde:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020be0:	889b      	ldrh	r3, [r3, #4]
 8020be2:	3301      	adds	r3, #1
 8020be4:	b29a      	uxth	r2, r3
 8020be6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020be8:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8020bea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020bec:	799b      	ldrb	r3, [r3, #6]
 8020bee:	2b02      	cmp	r3, #2
 8020bf0:	d104      	bne.n	8020bfc <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos += 1;
 8020bf2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020bf6:	1c5a      	adds	r2, r3, #1
 8020bf8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020bfa:	629a      	str	r2, [r3, #40]	@ 0x28
                for (int i = 0; i < attrcount; i++) {
 8020bfc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020bfe:	3301      	adds	r3, #1
 8020c00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8020c02:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8020c04:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8020c08:	429a      	cmp	r2, r3
 8020c0a:	f6ff af7e 	blt.w	8020b0a <lfs_dir_relocatingcommit+0x3fe>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 8020c0e:	e022      	b.n	8020c56 <lfs_dir_relocatingcommit+0x54a>
                // we split and id is on tail now
                if (lfs_pair_cmp(d->m.tail, lfs->root) != 0) {
 8020c10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020c12:	f103 0220 	add.w	r2, r3, #32
 8020c16:	68fb      	ldr	r3, [r7, #12]
 8020c18:	3320      	adds	r3, #32
 8020c1a:	4619      	mov	r1, r3
 8020c1c:	4610      	mov	r0, r2
 8020c1e:	f7fc fe5f 	bl	801d8e0 <lfs_pair_cmp>
 8020c22:	4603      	mov	r3, r0
 8020c24:	2b00      	cmp	r3, #0
 8020c26:	d007      	beq.n	8020c38 <lfs_dir_relocatingcommit+0x52c>
                    d->id -= d->m.count;
 8020c28:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020c2a:	889a      	ldrh	r2, [r3, #4]
 8020c2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020c2e:	8b9b      	ldrh	r3, [r3, #28]
 8020c30:	1ad3      	subs	r3, r2, r3
 8020c32:	b29a      	uxth	r2, r3
 8020c34:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020c36:	809a      	strh	r2, [r3, #4]
                }
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 8020c38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020c3a:	f103 0108 	add.w	r1, r3, #8
 8020c3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020c40:	3320      	adds	r3, #32
 8020c42:	461a      	mov	r2, r3
 8020c44:	68f8      	ldr	r0, [r7, #12]
 8020c46:	f7fe fcc3 	bl	801f5d0 <lfs_dir_fetch>
 8020c4a:	6538      	str	r0, [r7, #80]	@ 0x50
                if (err) {
 8020c4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020c4e:	2b00      	cmp	r3, #0
 8020c50:	d001      	beq.n	8020c56 <lfs_dir_relocatingcommit+0x54a>
                    return err;
 8020c52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020c54:	e011      	b.n	8020c7a <lfs_dir_relocatingcommit+0x56e>
            while (d->id >= d->m.count && d->m.split) {
 8020c56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020c58:	889a      	ldrh	r2, [r3, #4]
 8020c5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020c5c:	8b9b      	ldrh	r3, [r3, #28]
 8020c5e:	429a      	cmp	r2, r3
 8020c60:	d303      	bcc.n	8020c6a <lfs_dir_relocatingcommit+0x55e>
 8020c62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020c64:	7fdb      	ldrb	r3, [r3, #31]
 8020c66:	2b00      	cmp	r3, #0
 8020c68:	d1d2      	bne.n	8020c10 <lfs_dir_relocatingcommit+0x504>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8020c6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020c6c:	681b      	ldr	r3, [r3, #0]
 8020c6e:	663b      	str	r3, [r7, #96]	@ 0x60
 8020c70:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020c72:	2b00      	cmp	r3, #0
 8020c74:	f47f af29 	bne.w	8020aca <lfs_dir_relocatingcommit+0x3be>
                }
            }
        }
    }

    return state;
 8020c78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 8020c7a:	4618      	mov	r0, r3
 8020c7c:	3770      	adds	r7, #112	@ 0x70
 8020c7e:	46bd      	mov	sp, r7
 8020c80:	bdb0      	pop	{r4, r5, r7, pc}
 8020c82:	bf00      	nop
 8020c84:	08040aa0 	.word	0x08040aa0
 8020c88:	080443c4 	.word	0x080443c4
 8020c8c:	08040920 	.word	0x08040920

08020c90 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8020c90:	b5b0      	push	{r4, r5, r7, lr}
 8020c92:	b0bc      	sub	sp, #240	@ 0xf0
 8020c94:	af04      	add	r7, sp, #16
 8020c96:	60f8      	str	r0, [r7, #12]
 8020c98:	60b9      	str	r1, [r7, #8]
 8020c9a:	607a      	str	r2, [r7, #4]
 8020c9c:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8020c9e:	68fb      	ldr	r3, [r7, #12]
 8020ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020ca2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8020ca6:	e045      	b.n	8020d34 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8020ca8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8020cac:	3308      	adds	r3, #8
 8020cae:	68ba      	ldr	r2, [r7, #8]
 8020cb0:	429a      	cmp	r2, r3
 8020cb2:	d03a      	beq.n	8020d2a <lfs_dir_orphaningcommit+0x9a>
 8020cb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8020cb8:	3308      	adds	r3, #8
 8020cba:	68ba      	ldr	r2, [r7, #8]
 8020cbc:	4611      	mov	r1, r2
 8020cbe:	4618      	mov	r0, r3
 8020cc0:	f7fc fe0e 	bl	801d8e0 <lfs_pair_cmp>
 8020cc4:	4603      	mov	r3, r0
 8020cc6:	2b00      	cmp	r3, #0
 8020cc8:	d12f      	bne.n	8020d2a <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8020cca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8020cce:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8020cd0:	2b01      	cmp	r3, #1
 8020cd2:	d12a      	bne.n	8020d2a <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8020cd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8020cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020cda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8020cde:	2b00      	cmp	r3, #0
 8020ce0:	d023      	beq.n	8020d2a <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 8020ce2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8020ce6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8020ce8:	68fb      	ldr	r3, [r7, #12]
 8020cea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8020cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8020cee:	429a      	cmp	r2, r3
 8020cf0:	d91b      	bls.n	8020d2a <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 8020cf2:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8020cf6:	68f8      	ldr	r0, [r7, #12]
 8020cf8:	f001 fa3e 	bl	8022178 <lfs_file_outline>
 8020cfc:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
            if (err) {
 8020d00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8020d04:	2b00      	cmp	r3, #0
 8020d06:	d002      	beq.n	8020d0e <lfs_dir_orphaningcommit+0x7e>
                return err;
 8020d08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8020d0c:	e2ad      	b.n	802126a <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 8020d0e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8020d12:	68f8      	ldr	r0, [r7, #12]
 8020d14:	f001 fa52 	bl	80221bc <lfs_file_flush>
 8020d18:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
            if (err) {
 8020d1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8020d20:	2b00      	cmp	r3, #0
 8020d22:	d002      	beq.n	8020d2a <lfs_dir_orphaningcommit+0x9a>
                return err;
 8020d24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8020d28:	e29f      	b.n	802126a <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8020d2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8020d2e:	681b      	ldr	r3, [r3, #0]
 8020d30:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8020d34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8020d38:	2b00      	cmp	r3, #0
 8020d3a:	d1b5      	bne.n	8020ca8 <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 8020d3c:	68bb      	ldr	r3, [r7, #8]
 8020d3e:	681b      	ldr	r3, [r3, #0]
 8020d40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8020d44:	68bb      	ldr	r3, [r7, #8]
 8020d46:	685b      	ldr	r3, [r3, #4]
 8020d48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    lfs_mdir_t ldir = *dir;
 8020d4c:	68bb      	ldr	r3, [r7, #8]
 8020d4e:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8020d52:	461d      	mov	r5, r3
 8020d54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8020d56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8020d58:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8020d5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 8020d60:	68ba      	ldr	r2, [r7, #8]
 8020d62:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 8020d66:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8020d6a:	9301      	str	r3, [sp, #4]
 8020d6c:	683b      	ldr	r3, [r7, #0]
 8020d6e:	9300      	str	r3, [sp, #0]
 8020d70:	687b      	ldr	r3, [r7, #4]
 8020d72:	68f8      	ldr	r0, [r7, #12]
 8020d74:	f7ff fcca 	bl	802070c <lfs_dir_relocatingcommit>
 8020d78:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 8020d7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8020d80:	2b00      	cmp	r3, #0
 8020d82:	da02      	bge.n	8020d8a <lfs_dir_orphaningcommit+0xfa>
        return state;
 8020d84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8020d88:	e26f      	b.n	802126a <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 8020d8a:	68bb      	ldr	r3, [r7, #8]
 8020d8c:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8020d90:	4611      	mov	r1, r2
 8020d92:	4618      	mov	r0, r3
 8020d94:	f7fc fda4 	bl	801d8e0 <lfs_pair_cmp>
 8020d98:	4603      	mov	r3, r0
 8020d9a:	2b00      	cmp	r3, #0
 8020d9c:	d109      	bne.n	8020db2 <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 8020d9e:	68bb      	ldr	r3, [r7, #8]
 8020da0:	461d      	mov	r5, r3
 8020da2:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8020da6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8020da8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8020daa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8020dae:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 8020db2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8020db6:	2b02      	cmp	r3, #2
 8020db8:	d14a      	bne.n	8020e50 <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 8020dba:	68fb      	ldr	r3, [r7, #12]
 8020dbc:	3348      	adds	r3, #72	@ 0x48
 8020dbe:	461a      	mov	r2, r3
 8020dc0:	68b9      	ldr	r1, [r7, #8]
 8020dc2:	68f8      	ldr	r0, [r7, #12]
 8020dc4:	f7fe fc20 	bl	801f608 <lfs_dir_getgstate>
 8020dc8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
        if (err) {
 8020dcc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8020dd0:	2b00      	cmp	r3, #0
 8020dd2:	d002      	beq.n	8020dda <lfs_dir_orphaningcommit+0x14a>
            return err;
 8020dd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8020dd8:	e247      	b.n	802126a <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 8020dda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8020ddc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        lpair[1] = pdir.pair[1];
 8020de0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8020de2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        lfs_pair_tole32(dir->tail);
 8020de6:	68bb      	ldr	r3, [r7, #8]
 8020de8:	3318      	adds	r3, #24
 8020dea:	4618      	mov	r0, r3
 8020dec:	f7fc fde9 	bl	801d9c2 <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8020df0:	68bb      	ldr	r3, [r7, #8]
 8020df2:	7ddb      	ldrb	r3, [r3, #23]
 8020df4:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8020df8:	051a      	lsls	r2, r3, #20
 8020dfa:	4bc2      	ldr	r3, [pc, #776]	@ (8021104 <lfs_dir_orphaningcommit+0x474>)
 8020dfc:	4313      	orrs	r3, r2
 8020dfe:	667b      	str	r3, [r7, #100]	@ 0x64
 8020e00:	68bb      	ldr	r3, [r7, #8]
 8020e02:	3318      	adds	r3, #24
 8020e04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8020e06:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8020e0a:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8020e0e:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8020e12:	2000      	movs	r0, #0
 8020e14:	9001      	str	r0, [sp, #4]
 8020e16:	2001      	movs	r0, #1
 8020e18:	9000      	str	r0, [sp, #0]
 8020e1a:	68f8      	ldr	r0, [r7, #12]
 8020e1c:	f7ff fc76 	bl	802070c <lfs_dir_relocatingcommit>
 8020e20:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 8020e24:	68bb      	ldr	r3, [r7, #8]
 8020e26:	3318      	adds	r3, #24
 8020e28:	4618      	mov	r0, r3
 8020e2a:	f7fc fdb0 	bl	801d98e <lfs_pair_fromle32>
        if (state < 0) {
 8020e2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8020e32:	2b00      	cmp	r3, #0
 8020e34:	da02      	bge.n	8020e3c <lfs_dir_orphaningcommit+0x1ac>
            return state;
 8020e36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8020e3a:	e216      	b.n	802126a <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 8020e3c:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8020e40:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 8020e44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8020e46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8020e48:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8020e4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 8020e50:	2300      	movs	r3, #0
 8020e52:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
    while (state == LFS_OK_RELOCATED) {
 8020e56:	e1fc      	b.n	8021252 <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 8020e58:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8020e5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8020e60:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8020e64:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8020e68:	4ca7      	ldr	r4, [pc, #668]	@ (8021108 <lfs_dir_orphaningcommit+0x478>)
 8020e6a:	9403      	str	r4, [sp, #12]
 8020e6c:	9102      	str	r1, [sp, #8]
 8020e6e:	9201      	str	r2, [sp, #4]
 8020e70:	9300      	str	r3, [sp, #0]
 8020e72:	4603      	mov	r3, r0
 8020e74:	f640 128c 	movw	r2, #2444	@ 0x98c
 8020e78:	49a4      	ldr	r1, [pc, #656]	@ (802110c <lfs_dir_orphaningcommit+0x47c>)
 8020e7a:	48a5      	ldr	r0, [pc, #660]	@ (8021110 <lfs_dir_orphaningcommit+0x480>)
 8020e7c:	f012 fa98 	bl	80333b0 <printf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 8020e80:	2300      	movs	r3, #0
 8020e82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 8020e86:	68fb      	ldr	r3, [r7, #12]
 8020e88:	f103 0220 	add.w	r2, r3, #32
 8020e8c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8020e90:	4611      	mov	r1, r2
 8020e92:	4618      	mov	r0, r3
 8020e94:	f7fc fd24 	bl	801d8e0 <lfs_pair_cmp>
 8020e98:	4603      	mov	r3, r0
 8020e9a:	2b00      	cmp	r3, #0
 8020e9c:	d107      	bne.n	8020eae <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 8020e9e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8020ea2:	68fb      	ldr	r3, [r7, #12]
 8020ea4:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 8020ea6:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8020eaa:	68fb      	ldr	r3, [r7, #12]
 8020eac:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8020eae:	68fb      	ldr	r3, [r7, #12]
 8020eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020eb2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8020eb6:	e037      	b.n	8020f28 <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 8020eb8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8020ebc:	f103 0208 	add.w	r2, r3, #8
 8020ec0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8020ec4:	4611      	mov	r1, r2
 8020ec6:	4618      	mov	r0, r3
 8020ec8:	f7fc fd0a 	bl	801d8e0 <lfs_pair_cmp>
 8020ecc:	4603      	mov	r3, r0
 8020ece:	2b00      	cmp	r3, #0
 8020ed0:	d109      	bne.n	8020ee6 <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 8020ed2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8020ed6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8020eda:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 8020edc:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8020ee0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8020ee4:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 8020ee6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8020eea:	799b      	ldrb	r3, [r3, #6]
 8020eec:	2b02      	cmp	r3, #2
 8020eee:	d116      	bne.n	8020f1e <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 8020ef0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8020ef4:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8020ef8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8020efc:	4611      	mov	r1, r2
 8020efe:	4618      	mov	r0, r3
 8020f00:	f7fc fcee 	bl	801d8e0 <lfs_pair_cmp>
 8020f04:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 8020f06:	2b00      	cmp	r3, #0
 8020f08:	d109      	bne.n	8020f1e <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 8020f0a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8020f0e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8020f12:	62da      	str	r2, [r3, #44]	@ 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 8020f14:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8020f18:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8020f1c:	631a      	str	r2, [r3, #48]	@ 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8020f1e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8020f22:	681b      	ldr	r3, [r3, #0]
 8020f24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8020f28:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8020f2c:	2b00      	cmp	r3, #0
 8020f2e:	d1c3      	bne.n	8020eb8 <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 8020f30:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8020f34:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8020f38:	4619      	mov	r1, r3
 8020f3a:	68f8      	ldr	r0, [r7, #12]
 8020f3c:	f003 f87e 	bl	802403c <lfs_fs_parent>
 8020f40:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 8020f44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8020f48:	2b00      	cmp	r3, #0
 8020f4a:	da07      	bge.n	8020f5c <lfs_dir_orphaningcommit+0x2cc>
 8020f4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8020f50:	f113 0f02 	cmn.w	r3, #2
 8020f54:	d002      	beq.n	8020f5c <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 8020f56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8020f5a:	e186      	b.n	802126a <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 8020f5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8020f60:	f113 0f02 	cmn.w	r3, #2
 8020f64:	bf14      	ite	ne
 8020f66:	2301      	movne	r3, #1
 8020f68:	2300      	moveq	r3, #0
 8020f6a:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
        if (tag != LFS_ERR_NOENT) {
 8020f6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8020f72:	f113 0f02 	cmn.w	r3, #2
 8020f76:	f000 809e 	beq.w	80210b6 <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 8020f7a:	2101      	movs	r1, #1
 8020f7c:	68f8      	ldr	r0, [r7, #12]
 8020f7e:	f003 f8f5 	bl	802416c <lfs_fs_preporphans>
 8020f82:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
            if (err) {
 8020f86:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8020f8a:	2b00      	cmp	r3, #0
 8020f8c:	d002      	beq.n	8020f94 <lfs_dir_orphaningcommit+0x304>
                return err;
 8020f8e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8020f92:	e16a      	b.n	802126a <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8020f94:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8020f98:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8020f9c:	68fb      	ldr	r3, [r7, #12]
 8020f9e:	3330      	adds	r3, #48	@ 0x30
 8020fa0:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8020fa4:	4611      	mov	r1, r2
 8020fa6:	4618      	mov	r0, r3
 8020fa8:	f7fc fe4c 	bl	801dc44 <lfs_gstate_hasmovehere>
 8020fac:	4603      	mov	r3, r0
 8020fae:	2b00      	cmp	r3, #0
 8020fb0:	d02d      	beq.n	802100e <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8020fb2:	68fb      	ldr	r3, [r7, #12]
 8020fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020fb6:	4618      	mov	r0, r3
 8020fb8:	f7fc fd88 	bl	801dacc <lfs_tag_id>
 8020fbc:	4603      	mov	r3, r0
 8020fbe:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
                LFS_DEBUG("Fixing move while relocating "
 8020fc2:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8020fc4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8020fc6:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	@ 0xca
 8020fca:	484f      	ldr	r0, [pc, #316]	@ (8021108 <lfs_dir_orphaningcommit+0x478>)
 8020fcc:	9002      	str	r0, [sp, #8]
 8020fce:	9201      	str	r2, [sp, #4]
 8020fd0:	9300      	str	r3, [sp, #0]
 8020fd2:	460b      	mov	r3, r1
 8020fd4:	f640 12b9 	movw	r2, #2489	@ 0x9b9
 8020fd8:	494c      	ldr	r1, [pc, #304]	@ (802110c <lfs_dir_orphaningcommit+0x47c>)
 8020fda:	484e      	ldr	r0, [pc, #312]	@ (8021114 <lfs_dir_orphaningcommit+0x484>)
 8020fdc:	f012 f9e8 	bl	80333b0 <printf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8020fe0:	2200      	movs	r2, #0
 8020fe2:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8020fe6:	68f8      	ldr	r0, [r7, #12]
 8020fe8:	f003 f910 	bl	802420c <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 8020fec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8020ff0:	4618      	mov	r0, r3
 8020ff2:	f7fc fd6b 	bl	801dacc <lfs_tag_id>
 8020ff6:	4603      	mov	r3, r0
 8020ff8:	461a      	mov	r2, r3
 8020ffa:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8020ffe:	4293      	cmp	r3, r2
 8021000:	d205      	bcs.n	802100e <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 8021002:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8021006:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 802100a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 802100e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8021010:	657b      	str	r3, [r7, #84]	@ 0x54
 8021012:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8021014:	65bb      	str	r3, [r7, #88]	@ 0x58
            lfs_pair_tole32(ldir.pair);
 8021016:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 802101a:	4618      	mov	r0, r3
 802101c:	f7fc fcd1 	bl	801d9c2 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 8021020:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8021024:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8021028:	4293      	cmp	r3, r2
 802102a:	d007      	beq.n	802103c <lfs_dir_orphaningcommit+0x3ac>
 802102c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8021030:	029b      	lsls	r3, r3, #10
 8021032:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8021036:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 802103a:	e000      	b.n	802103e <lfs_dir_orphaningcommit+0x3ae>
 802103c:	2300      	movs	r3, #0
 802103e:	647b      	str	r3, [r7, #68]	@ 0x44
 8021040:	2300      	movs	r3, #0
 8021042:	64bb      	str	r3, [r7, #72]	@ 0x48
 8021044:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8021048:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802104a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 802104e:	653b      	str	r3, [r7, #80]	@ 0x50
 8021050:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8021054:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8021058:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 802105c:	2000      	movs	r0, #0
 802105e:	9001      	str	r0, [sp, #4]
 8021060:	2002      	movs	r0, #2
 8021062:	9000      	str	r0, [sp, #0]
 8021064:	68f8      	ldr	r0, [r7, #12]
 8021066:	f7ff fb51 	bl	802070c <lfs_dir_relocatingcommit>
 802106a:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 802106e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8021072:	4618      	mov	r0, r3
 8021074:	f7fc fc8b 	bl	801d98e <lfs_pair_fromle32>
            if (state < 0) {
 8021078:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 802107c:	2b00      	cmp	r3, #0
 802107e:	da02      	bge.n	8021086 <lfs_dir_orphaningcommit+0x3f6>
                return state;
 8021080:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8021084:	e0f1      	b.n	802126a <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 8021086:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 802108a:	2b01      	cmp	r3, #1
 802108c:	d113      	bne.n	80210b6 <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 802108e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8021090:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                lpair[1] = ppair[1];
 8021094:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8021096:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
                ldir = pdir;
 802109a:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 802109e:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 80210a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80210a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80210a6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80210aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 80210ae:	2301      	movs	r3, #1
 80210b0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80210b4:	e0cd      	b.n	8021252 <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 80210b6:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80210ba:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80210be:	4619      	mov	r1, r3
 80210c0:	68f8      	ldr	r0, [r7, #12]
 80210c2:	f002 ff09 	bl	8023ed8 <lfs_fs_pred>
 80210c6:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
        if (err && err != LFS_ERR_NOENT) {
 80210ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80210ce:	2b00      	cmp	r3, #0
 80210d0:	d007      	beq.n	80210e2 <lfs_dir_orphaningcommit+0x452>
 80210d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80210d6:	f113 0f02 	cmn.w	r3, #2
 80210da:	d002      	beq.n	80210e2 <lfs_dir_orphaningcommit+0x452>
            return err;
 80210dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80210e0:	e0c3      	b.n	802126a <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 80210e2:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 80210e6:	2b00      	cmp	r3, #0
 80210e8:	d01a      	beq.n	8021120 <lfs_dir_orphaningcommit+0x490>
 80210ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80210ee:	f113 0f02 	cmn.w	r3, #2
 80210f2:	d115      	bne.n	8021120 <lfs_dir_orphaningcommit+0x490>
 80210f4:	4b08      	ldr	r3, [pc, #32]	@ (8021118 <lfs_dir_orphaningcommit+0x488>)
 80210f6:	4a09      	ldr	r2, [pc, #36]	@ (802111c <lfs_dir_orphaningcommit+0x48c>)
 80210f8:	f640 11dc 	movw	r1, #2524	@ 0x9dc
 80210fc:	4803      	ldr	r0, [pc, #12]	@ (802110c <lfs_dir_orphaningcommit+0x47c>)
 80210fe:	f012 f923 	bl	8033348 <__assert_func>
 8021102:	bf00      	nop
 8021104:	000ffc08 	.word	0x000ffc08
 8021108:	08040a48 	.word	0x08040a48
 802110c:	08040920 	.word	0x08040920
 8021110:	08040bc8 	.word	0x08040bc8
 8021114:	08040c04 	.word	0x08040c04
 8021118:	08040c48 	.word	0x08040c48
 802111c:	080443e0 	.word	0x080443e0

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 8021120:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8021124:	f113 0f02 	cmn.w	r3, #2
 8021128:	f000 8093 	beq.w	8021252 <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 802112c:	68fb      	ldr	r3, [r7, #12]
 802112e:	3330      	adds	r3, #48	@ 0x30
 8021130:	4618      	mov	r0, r3
 8021132:	f7fc fd3e 	bl	801dbb2 <lfs_gstate_hasorphans>
 8021136:	4603      	mov	r3, r0
 8021138:	2b00      	cmp	r3, #0
 802113a:	d011      	beq.n	8021160 <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 802113c:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8021140:	425b      	negs	r3, r3
 8021142:	b2db      	uxtb	r3, r3
 8021144:	b25b      	sxtb	r3, r3
 8021146:	4619      	mov	r1, r3
 8021148:	68f8      	ldr	r0, [r7, #12]
 802114a:	f003 f80f 	bl	802416c <lfs_fs_preporphans>
 802114e:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
                if (err) {
 8021152:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8021156:	2b00      	cmp	r3, #0
 8021158:	d002      	beq.n	8021160 <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 802115a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 802115e:	e084      	b.n	802126a <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8021160:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8021164:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8021168:	68fb      	ldr	r3, [r7, #12]
 802116a:	3330      	adds	r3, #48	@ 0x30
 802116c:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8021170:	4611      	mov	r1, r2
 8021172:	4618      	mov	r0, r3
 8021174:	f7fc fd66 	bl	801dc44 <lfs_gstate_hasmovehere>
 8021178:	4603      	mov	r3, r0
 802117a:	2b00      	cmp	r3, #0
 802117c:	d01c      	beq.n	80211b8 <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 802117e:	68fb      	ldr	r3, [r7, #12]
 8021180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021182:	4618      	mov	r0, r3
 8021184:	f7fc fca2 	bl	801dacc <lfs_tag_id>
 8021188:	4603      	mov	r3, r0
 802118a:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
                LFS_DEBUG("Fixing move while relocating "
 802118e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8021190:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8021192:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	@ 0xc8
 8021196:	4837      	ldr	r0, [pc, #220]	@ (8021274 <lfs_dir_orphaningcommit+0x5e4>)
 8021198:	9002      	str	r0, [sp, #8]
 802119a:	9201      	str	r2, [sp, #4]
 802119c:	9300      	str	r3, [sp, #0]
 802119e:	460b      	mov	r3, r1
 80211a0:	f640 12ed 	movw	r2, #2541	@ 0x9ed
 80211a4:	4934      	ldr	r1, [pc, #208]	@ (8021278 <lfs_dir_orphaningcommit+0x5e8>)
 80211a6:	4835      	ldr	r0, [pc, #212]	@ (802127c <lfs_dir_orphaningcommit+0x5ec>)
 80211a8:	f012 f902 	bl	80333b0 <printf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80211ac:	2200      	movs	r2, #0
 80211ae:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80211b2:	68f8      	ldr	r0, [r7, #12]
 80211b4:	f003 f82a 	bl	802420c <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 80211b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80211ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
            lpair[1] = pdir.pair[1];
 80211be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80211c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            lfs_pair_tole32(ldir.pair);
 80211c4:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80211c8:	4618      	mov	r0, r3
 80211ca:	f7fc fbfa 	bl	801d9c2 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 80211ce:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 80211d2:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80211d6:	4293      	cmp	r3, r2
 80211d8:	d007      	beq.n	80211ea <lfs_dir_orphaningcommit+0x55a>
 80211da:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 80211de:	029b      	lsls	r3, r3, #10
 80211e0:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 80211e4:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 80211e8:	e000      	b.n	80211ec <lfs_dir_orphaningcommit+0x55c>
 80211ea:	2300      	movs	r3, #0
 80211ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80211ee:	2300      	movs	r3, #0
 80211f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80211f2:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80211f6:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80211fa:	051a      	lsls	r2, r3, #20
 80211fc:	4b20      	ldr	r3, [pc, #128]	@ (8021280 <lfs_dir_orphaningcommit+0x5f0>)
 80211fe:	4313      	orrs	r3, r2
 8021200:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8021202:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8021206:	633b      	str	r3, [r7, #48]	@ 0x30
 8021208:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 802120c:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8021210:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8021214:	2000      	movs	r0, #0
 8021216:	9001      	str	r0, [sp, #4]
 8021218:	2002      	movs	r0, #2
 802121a:	9000      	str	r0, [sp, #0]
 802121c:	68f8      	ldr	r0, [r7, #12]
 802121e:	f7ff fa75 	bl	802070c <lfs_dir_relocatingcommit>
 8021222:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8021226:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 802122a:	4618      	mov	r0, r3
 802122c:	f7fc fbaf 	bl	801d98e <lfs_pair_fromle32>
            if (state < 0) {
 8021230:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8021234:	2b00      	cmp	r3, #0
 8021236:	da02      	bge.n	802123e <lfs_dir_orphaningcommit+0x5ae>
                return state;
 8021238:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 802123c:	e015      	b.n	802126a <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 802123e:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8021242:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 8021246:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8021248:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802124a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802124e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 8021252:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8021256:	2b01      	cmp	r3, #1
 8021258:	f43f adfe 	beq.w	8020e58 <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 802125c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8021260:	2b00      	cmp	r3, #0
 8021262:	d001      	beq.n	8021268 <lfs_dir_orphaningcommit+0x5d8>
 8021264:	2303      	movs	r3, #3
 8021266:	e000      	b.n	802126a <lfs_dir_orphaningcommit+0x5da>
 8021268:	2300      	movs	r3, #0
}
 802126a:	4618      	mov	r0, r3
 802126c:	37e0      	adds	r7, #224	@ 0xe0
 802126e:	46bd      	mov	sp, r7
 8021270:	bdb0      	pop	{r4, r5, r7, pc}
 8021272:	bf00      	nop
 8021274:	08040a48 	.word	0x08040a48
 8021278:	08040920 	.word	0x08040920
 802127c:	08040c04 	.word	0x08040c04
 8021280:	000ffc08 	.word	0x000ffc08

08021284 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8021284:	b580      	push	{r7, lr}
 8021286:	b086      	sub	sp, #24
 8021288:	af00      	add	r7, sp, #0
 802128a:	60f8      	str	r0, [r7, #12]
 802128c:	60b9      	str	r1, [r7, #8]
 802128e:	607a      	str	r2, [r7, #4]
 8021290:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 8021292:	683b      	ldr	r3, [r7, #0]
 8021294:	687a      	ldr	r2, [r7, #4]
 8021296:	68b9      	ldr	r1, [r7, #8]
 8021298:	68f8      	ldr	r0, [r7, #12]
 802129a:	f7ff fcf9 	bl	8020c90 <lfs_dir_orphaningcommit>
 802129e:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 80212a0:	697b      	ldr	r3, [r7, #20]
 80212a2:	2b00      	cmp	r3, #0
 80212a4:	da01      	bge.n	80212aa <lfs_dir_commit+0x26>
        return orphans;
 80212a6:	697b      	ldr	r3, [r7, #20]
 80212a8:	e00d      	b.n	80212c6 <lfs_dir_commit+0x42>
    }

    if (orphans) {
 80212aa:	697b      	ldr	r3, [r7, #20]
 80212ac:	2b00      	cmp	r3, #0
 80212ae:	d009      	beq.n	80212c4 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 80212b0:	2100      	movs	r1, #0
 80212b2:	68f8      	ldr	r0, [r7, #12]
 80212b4:	f003 f8cc 	bl	8024450 <lfs_fs_deorphan>
 80212b8:	6138      	str	r0, [r7, #16]
        if (err) {
 80212ba:	693b      	ldr	r3, [r7, #16]
 80212bc:	2b00      	cmp	r3, #0
 80212be:	d001      	beq.n	80212c4 <lfs_dir_commit+0x40>
            return err;
 80212c0:	693b      	ldr	r3, [r7, #16]
 80212c2:	e000      	b.n	80212c6 <lfs_dir_commit+0x42>
        }
    }

    return 0;
 80212c4:	2300      	movs	r3, #0
}
 80212c6:	4618      	mov	r0, r3
 80212c8:	3718      	adds	r7, #24
 80212ca:	46bd      	mov	sp, r7
 80212cc:	bd80      	pop	{r7, pc}
	...

080212d0 <lfs_mkdir_>:
#endif


/// Top level directory operations ///
#ifndef LFS_READONLY
static int lfs_mkdir_(lfs_t *lfs, const char *path) {
 80212d0:	b5b0      	push	{r4, r5, r7, lr}
 80212d2:	b0b8      	sub	sp, #224	@ 0xe0
 80212d4:	af00      	add	r7, sp, #0
 80212d6:	6078      	str	r0, [r7, #4]
 80212d8:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 80212da:	6878      	ldr	r0, [r7, #4]
 80212dc:	f003 fa68 	bl	80247b0 <lfs_fs_forceconsistency>
 80212e0:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
    if (err) {
 80212e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80212e8:	2b00      	cmp	r3, #0
 80212ea:	d002      	beq.n	80212f2 <lfs_mkdir_+0x22>
        return err;
 80212ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80212f0:	e128      	b.n	8021544 <lfs_mkdir_+0x274>
    }

    struct lfs_mlist cwd;
    cwd.next = lfs->mlist;
 80212f2:	687b      	ldr	r3, [r7, #4]
 80212f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80212f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    uint16_t id;
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
 80212fa:	f107 00ae 	add.w	r0, r7, #174	@ 0xae
 80212fe:	463a      	mov	r2, r7
 8021300:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8021304:	f103 0108 	add.w	r1, r3, #8
 8021308:	4603      	mov	r3, r0
 802130a:	6878      	ldr	r0, [r7, #4]
 802130c:	f7fe fa72 	bl	801f7f4 <lfs_dir_find>
 8021310:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
 8021314:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8021318:	f113 0f02 	cmn.w	r3, #2
 802131c:	d105      	bne.n	802132a <lfs_mkdir_+0x5a>
 802131e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8021322:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8021326:	4293      	cmp	r3, r2
 8021328:	d109      	bne.n	802133e <lfs_mkdir_+0x6e>
        return (err < 0) ? err : LFS_ERR_EXIST;
 802132a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 802132e:	2b00      	cmp	r3, #0
 8021330:	da02      	bge.n	8021338 <lfs_mkdir_+0x68>
 8021332:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8021336:	e105      	b.n	8021544 <lfs_mkdir_+0x274>
 8021338:	f06f 0310 	mvn.w	r3, #16
 802133c:	e102      	b.n	8021544 <lfs_mkdir_+0x274>
    }

    // check that name fits
    lfs_size_t nlen = strlen(path);
 802133e:	683b      	ldr	r3, [r7, #0]
 8021340:	4618      	mov	r0, r3
 8021342:	f7ee ffad 	bl	80102a0 <strlen>
 8021346:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
    if (nlen > lfs->name_max) {
 802134a:	687b      	ldr	r3, [r7, #4]
 802134c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802134e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8021352:	429a      	cmp	r2, r3
 8021354:	d902      	bls.n	802135c <lfs_mkdir_+0x8c>
        return LFS_ERR_NAMETOOLONG;
 8021356:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 802135a:	e0f3      	b.n	8021544 <lfs_mkdir_+0x274>
    }

    // build up new directory
    lfs_alloc_ckpoint(lfs);
 802135c:	6878      	ldr	r0, [r7, #4]
 802135e:	f7fc fe1c 	bl	801df9a <lfs_alloc_ckpoint>
    lfs_mdir_t dir;
    err = lfs_dir_alloc(lfs, &dir);
 8021362:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8021366:	4619      	mov	r1, r3
 8021368:	6878      	ldr	r0, [r7, #4]
 802136a:	f7fe fd63 	bl	801fe34 <lfs_dir_alloc>
 802136e:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
    if (err) {
 8021372:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8021376:	2b00      	cmp	r3, #0
 8021378:	d002      	beq.n	8021380 <lfs_mkdir_+0xb0>
        return err;
 802137a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 802137e:	e0e1      	b.n	8021544 <lfs_mkdir_+0x274>
    }

    // find end of list
    lfs_mdir_t pred = cwd.m;
 8021380:	f107 046c 	add.w	r4, r7, #108	@ 0x6c
 8021384:	f107 05b8 	add.w	r5, r7, #184	@ 0xb8
 8021388:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802138a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802138c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8021390:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (pred.split) {
 8021394:	e012      	b.n	80213bc <lfs_mkdir_+0xec>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
 8021396:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 802139a:	f103 0218 	add.w	r2, r3, #24
 802139e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80213a2:	4619      	mov	r1, r3
 80213a4:	6878      	ldr	r0, [r7, #4]
 80213a6:	f7fe f913 	bl	801f5d0 <lfs_dir_fetch>
 80213aa:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
        if (err) {
 80213ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80213b2:	2b00      	cmp	r3, #0
 80213b4:	d002      	beq.n	80213bc <lfs_mkdir_+0xec>
            return err;
 80213b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80213ba:	e0c3      	b.n	8021544 <lfs_mkdir_+0x274>
    while (pred.split) {
 80213bc:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80213c0:	2b00      	cmp	r3, #0
 80213c2:	d1e8      	bne.n	8021396 <lfs_mkdir_+0xc6>
        }
    }

    // setup dir
    lfs_pair_tole32(pred.tail);
 80213c4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80213c8:	3318      	adds	r3, #24
 80213ca:	4618      	mov	r0, r3
 80213cc:	f7fc faf9 	bl	801d9c2 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
 80213d0:	4b5e      	ldr	r3, [pc, #376]	@ (802154c <lfs_mkdir_+0x27c>)
 80213d2:	667b      	str	r3, [r7, #100]	@ 0x64
 80213d4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80213d8:	3318      	adds	r3, #24
 80213da:	66bb      	str	r3, [r7, #104]	@ 0x68
 80213dc:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 80213e0:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 80213e4:	2301      	movs	r3, #1
 80213e6:	6878      	ldr	r0, [r7, #4]
 80213e8:	f7ff ff4c 	bl	8021284 <lfs_dir_commit>
 80213ec:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
            {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), pred.tail}));
    lfs_pair_fromle32(pred.tail);
 80213f0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80213f4:	3318      	adds	r3, #24
 80213f6:	4618      	mov	r0, r3
 80213f8:	f7fc fac9 	bl	801d98e <lfs_pair_fromle32>
    if (err) {
 80213fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8021400:	2b00      	cmp	r3, #0
 8021402:	d002      	beq.n	802140a <lfs_mkdir_+0x13a>
        return err;
 8021404:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8021408:	e09c      	b.n	8021544 <lfs_mkdir_+0x274>
    }

    // current block not end of list?
    if (cwd.m.split) {
 802140a:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 802140e:	2b00      	cmp	r3, #0
 8021410:	d04c      	beq.n	80214ac <lfs_mkdir_+0x1dc>
        // update tails, this creates a desync
        err = lfs_fs_preporphans(lfs, +1);
 8021412:	2101      	movs	r1, #1
 8021414:	6878      	ldr	r0, [r7, #4]
 8021416:	f002 fea9 	bl	802416c <lfs_fs_preporphans>
 802141a:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
        if (err) {
 802141e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8021422:	2b00      	cmp	r3, #0
 8021424:	d002      	beq.n	802142c <lfs_mkdir_+0x15c>
            return err;
 8021426:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 802142a:	e08b      	b.n	8021544 <lfs_mkdir_+0x274>

        // it's possible our predecessor has to be relocated, and if
        // our parent is our predecessor's predecessor, this could have
        // caused our parent to go out of date, fortunately we can hook
        // ourselves into littlefs to catch this
        cwd.type = 0;
 802142c:	2300      	movs	r3, #0
 802142e:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
        cwd.id = 0;
 8021432:	2300      	movs	r3, #0
 8021434:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
        lfs->mlist = &cwd;
 8021438:	687b      	ldr	r3, [r7, #4]
 802143a:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 802143e:	629a      	str	r2, [r3, #40]	@ 0x28

        lfs_pair_tole32(dir.pair);
 8021440:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8021444:	4618      	mov	r0, r3
 8021446:	f7fc fabc 	bl	801d9c2 <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
 802144a:	4b40      	ldr	r3, [pc, #256]	@ (802154c <lfs_mkdir_+0x27c>)
 802144c:	617b      	str	r3, [r7, #20]
 802144e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8021452:	61bb      	str	r3, [r7, #24]
 8021454:	f107 0214 	add.w	r2, r7, #20
 8021458:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 802145c:	2301      	movs	r3, #1
 802145e:	6878      	ldr	r0, [r7, #4]
 8021460:	f7ff ff10 	bl	8021284 <lfs_dir_commit>
 8021464:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
        lfs_pair_fromle32(dir.pair);
 8021468:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 802146c:	4618      	mov	r0, r3
 802146e:	f7fc fa8e 	bl	801d98e <lfs_pair_fromle32>
        if (err) {
 8021472:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8021476:	2b00      	cmp	r3, #0
 8021478:	d006      	beq.n	8021488 <lfs_mkdir_+0x1b8>
            lfs->mlist = cwd.next;
 802147a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 802147e:	687b      	ldr	r3, [r7, #4]
 8021480:	629a      	str	r2, [r3, #40]	@ 0x28
            return err;
 8021482:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8021486:	e05d      	b.n	8021544 <lfs_mkdir_+0x274>
        }

        lfs->mlist = cwd.next;
 8021488:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 802148c:	687b      	ldr	r3, [r7, #4]
 802148e:	629a      	str	r2, [r3, #40]	@ 0x28
        err = lfs_fs_preporphans(lfs, -1);
 8021490:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8021494:	6878      	ldr	r0, [r7, #4]
 8021496:	f002 fe69 	bl	802416c <lfs_fs_preporphans>
 802149a:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
        if (err) {
 802149e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80214a2:	2b00      	cmp	r3, #0
 80214a4:	d002      	beq.n	80214ac <lfs_mkdir_+0x1dc>
            return err;
 80214a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80214aa:	e04b      	b.n	8021544 <lfs_mkdir_+0x274>
        }
    }

    // now insert into our parent block
    lfs_pair_tole32(dir.pair);
 80214ac:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80214b0:	4618      	mov	r0, r3
 80214b2:	f7fc fa86 	bl	801d9c2 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 80214b6:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 80214ba:	029b      	lsls	r3, r3, #10
 80214bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80214c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80214c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80214c6:	2300      	movs	r3, #0
 80214c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80214ca:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 80214ce:	029a      	lsls	r2, r3, #10
 80214d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80214d4:	4313      	orrs	r3, r2
 80214d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80214da:	647b      	str	r3, [r7, #68]	@ 0x44
 80214dc:	683b      	ldr	r3, [r7, #0]
 80214de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80214e0:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 80214e4:	029b      	lsls	r3, r3, #10
 80214e6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80214ea:	f043 0308 	orr.w	r3, r3, #8
 80214ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80214f0:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80214f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80214f6:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 80214fa:	f083 0301 	eor.w	r3, r3, #1
 80214fe:	b2db      	uxtb	r3, r3
 8021500:	2b00      	cmp	r3, #0
 8021502:	d001      	beq.n	8021508 <lfs_mkdir_+0x238>
 8021504:	4b11      	ldr	r3, [pc, #68]	@ (802154c <lfs_mkdir_+0x27c>)
 8021506:	e000      	b.n	802150a <lfs_mkdir_+0x23a>
 8021508:	2300      	movs	r3, #0
 802150a:	657b      	str	r3, [r7, #84]	@ 0x54
 802150c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8021510:	65bb      	str	r3, [r7, #88]	@ 0x58
 8021512:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8021516:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 802151a:	f103 0108 	add.w	r1, r3, #8
 802151e:	2304      	movs	r3, #4
 8021520:	6878      	ldr	r0, [r7, #4]
 8021522:	f7ff feaf 	bl	8021284 <lfs_dir_commit>
 8021526:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
            {LFS_MKTAG(LFS_TYPE_CREATE, id, 0), NULL},
            {LFS_MKTAG(LFS_TYPE_DIR, id, nlen), path},
            {LFS_MKTAG(LFS_TYPE_DIRSTRUCT, id, 8), dir.pair},
            {LFS_MKTAG_IF(!cwd.m.split,
                LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
    lfs_pair_fromle32(dir.pair);
 802152a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 802152e:	4618      	mov	r0, r3
 8021530:	f7fc fa2d 	bl	801d98e <lfs_pair_fromle32>
    if (err) {
 8021534:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8021538:	2b00      	cmp	r3, #0
 802153a:	d002      	beq.n	8021542 <lfs_mkdir_+0x272>
        return err;
 802153c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8021540:	e000      	b.n	8021544 <lfs_mkdir_+0x274>
    }

    return 0;
 8021542:	2300      	movs	r3, #0
}
 8021544:	4618      	mov	r0, r3
 8021546:	37e0      	adds	r7, #224	@ 0xe0
 8021548:	46bd      	mov	sp, r7
 802154a:	bdb0      	pop	{r4, r5, r7, pc}
 802154c:	600ffc08 	.word	0x600ffc08

08021550 <lfs_dir_open_>:
#endif

static int lfs_dir_open_(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 8021550:	b590      	push	{r4, r7, lr}
 8021552:	b08d      	sub	sp, #52	@ 0x34
 8021554:	af02      	add	r7, sp, #8
 8021556:	60f8      	str	r0, [r7, #12]
 8021558:	60b9      	str	r1, [r7, #8]
 802155a:	607a      	str	r2, [r7, #4]
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
 802155c:	68bb      	ldr	r3, [r7, #8]
 802155e:	f103 0108 	add.w	r1, r3, #8
 8021562:	1d3a      	adds	r2, r7, #4
 8021564:	2300      	movs	r3, #0
 8021566:	68f8      	ldr	r0, [r7, #12]
 8021568:	f7fe f944 	bl	801f7f4 <lfs_dir_find>
 802156c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (tag < 0) {
 802156e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021570:	2b00      	cmp	r3, #0
 8021572:	da01      	bge.n	8021578 <lfs_dir_open_+0x28>
        return tag;
 8021574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021576:	e05e      	b.n	8021636 <lfs_dir_open_+0xe6>
    }

    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8021578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802157a:	4618      	mov	r0, r3
 802157c:	f7fc fa7c 	bl	801da78 <lfs_tag_type3>
 8021580:	4603      	mov	r3, r0
 8021582:	2b02      	cmp	r3, #2
 8021584:	d002      	beq.n	802158c <lfs_dir_open_+0x3c>
        return LFS_ERR_NOTDIR;
 8021586:	f06f 0313 	mvn.w	r3, #19
 802158a:	e054      	b.n	8021636 <lfs_dir_open_+0xe6>
    }

    lfs_block_t pair[2];
    if (lfs_tag_id(tag) == 0x3ff) {
 802158c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802158e:	4618      	mov	r0, r3
 8021590:	f7fc fa9c 	bl	801dacc <lfs_tag_id>
 8021594:	4603      	mov	r3, r0
 8021596:	461a      	mov	r2, r3
 8021598:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 802159c:	429a      	cmp	r2, r3
 802159e:	d106      	bne.n	80215ae <lfs_dir_open_+0x5e>
        // handle root dir separately
        pair[0] = lfs->root[0];
 80215a0:	68fb      	ldr	r3, [r7, #12]
 80215a2:	6a1b      	ldr	r3, [r3, #32]
 80215a4:	617b      	str	r3, [r7, #20]
        pair[1] = lfs->root[1];
 80215a6:	68fb      	ldr	r3, [r7, #12]
 80215a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80215aa:	61bb      	str	r3, [r7, #24]
 80215ac:	e01f      	b.n	80215ee <lfs_dir_open_+0x9e>
    } else {
        // get dir pair from parent
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80215ae:	68bb      	ldr	r3, [r7, #8]
 80215b0:	f103 0408 	add.w	r4, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 80215b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80215b6:	4618      	mov	r0, r3
 80215b8:	f7fc fa88 	bl	801dacc <lfs_tag_id>
 80215bc:	4603      	mov	r3, r0
 80215be:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80215c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80215c4:	f043 0308 	orr.w	r3, r3, #8
 80215c8:	f107 0214 	add.w	r2, r7, #20
 80215cc:	9200      	str	r2, [sp, #0]
 80215ce:	4a1c      	ldr	r2, [pc, #112]	@ (8021640 <lfs_dir_open_+0xf0>)
 80215d0:	4621      	mov	r1, r4
 80215d2:	68f8      	ldr	r0, [r7, #12]
 80215d4:	f7fc fef6 	bl	801e3c4 <lfs_dir_get>
 80215d8:	6238      	str	r0, [r7, #32]
        if (res < 0) {
 80215da:	6a3b      	ldr	r3, [r7, #32]
 80215dc:	2b00      	cmp	r3, #0
 80215de:	da01      	bge.n	80215e4 <lfs_dir_open_+0x94>
            return res;
 80215e0:	6a3b      	ldr	r3, [r7, #32]
 80215e2:	e028      	b.n	8021636 <lfs_dir_open_+0xe6>
        }
        lfs_pair_fromle32(pair);
 80215e4:	f107 0314 	add.w	r3, r7, #20
 80215e8:	4618      	mov	r0, r3
 80215ea:	f7fc f9d0 	bl	801d98e <lfs_pair_fromle32>
    }

    // fetch first pair
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
 80215ee:	68bb      	ldr	r3, [r7, #8]
 80215f0:	3308      	adds	r3, #8
 80215f2:	f107 0214 	add.w	r2, r7, #20
 80215f6:	4619      	mov	r1, r3
 80215f8:	68f8      	ldr	r0, [r7, #12]
 80215fa:	f7fd ffe9 	bl	801f5d0 <lfs_dir_fetch>
 80215fe:	61f8      	str	r0, [r7, #28]
    if (err) {
 8021600:	69fb      	ldr	r3, [r7, #28]
 8021602:	2b00      	cmp	r3, #0
 8021604:	d001      	beq.n	802160a <lfs_dir_open_+0xba>
        return err;
 8021606:	69fb      	ldr	r3, [r7, #28]
 8021608:	e015      	b.n	8021636 <lfs_dir_open_+0xe6>
    }

    // setup entry
    dir->head[0] = dir->m.pair[0];
 802160a:	68bb      	ldr	r3, [r7, #8]
 802160c:	689a      	ldr	r2, [r3, #8]
 802160e:	68bb      	ldr	r3, [r7, #8]
 8021610:	62da      	str	r2, [r3, #44]	@ 0x2c
    dir->head[1] = dir->m.pair[1];
 8021612:	68bb      	ldr	r3, [r7, #8]
 8021614:	68da      	ldr	r2, [r3, #12]
 8021616:	68bb      	ldr	r3, [r7, #8]
 8021618:	631a      	str	r2, [r3, #48]	@ 0x30
    dir->id = 0;
 802161a:	68bb      	ldr	r3, [r7, #8]
 802161c:	2200      	movs	r2, #0
 802161e:	809a      	strh	r2, [r3, #4]
    dir->pos = 0;
 8021620:	68bb      	ldr	r3, [r7, #8]
 8021622:	2200      	movs	r2, #0
 8021624:	629a      	str	r2, [r3, #40]	@ 0x28

    // add to list of mdirs
    dir->type = LFS_TYPE_DIR;
 8021626:	68bb      	ldr	r3, [r7, #8]
 8021628:	2202      	movs	r2, #2
 802162a:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);
 802162c:	68b9      	ldr	r1, [r7, #8]
 802162e:	68f8      	ldr	r0, [r7, #12]
 8021630:	f7fc fc77 	bl	801df22 <lfs_mlist_append>

    return 0;
 8021634:	2300      	movs	r3, #0
}
 8021636:	4618      	mov	r0, r3
 8021638:	372c      	adds	r7, #44	@ 0x2c
 802163a:	46bd      	mov	sp, r7
 802163c:	bd90      	pop	{r4, r7, pc}
 802163e:	bf00      	nop
 8021640:	700ffc00 	.word	0x700ffc00

08021644 <lfs_dir_close_>:

static int lfs_dir_close_(lfs_t *lfs, lfs_dir_t *dir) {
 8021644:	b580      	push	{r7, lr}
 8021646:	b082      	sub	sp, #8
 8021648:	af00      	add	r7, sp, #0
 802164a:	6078      	str	r0, [r7, #4]
 802164c:	6039      	str	r1, [r7, #0]
    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist *)dir);
 802164e:	6839      	ldr	r1, [r7, #0]
 8021650:	6878      	ldr	r0, [r7, #4]
 8021652:	f7fc fc44 	bl	801dede <lfs_mlist_remove>

    return 0;
 8021656:	2300      	movs	r3, #0
}
 8021658:	4618      	mov	r0, r3
 802165a:	3708      	adds	r7, #8
 802165c:	46bd      	mov	sp, r7
 802165e:	bd80      	pop	{r7, pc}

08021660 <lfs_dir_read_>:

static int lfs_dir_read_(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 8021660:	b580      	push	{r7, lr}
 8021662:	b086      	sub	sp, #24
 8021664:	af00      	add	r7, sp, #0
 8021666:	60f8      	str	r0, [r7, #12]
 8021668:	60b9      	str	r1, [r7, #8]
 802166a:	607a      	str	r2, [r7, #4]
    memset(info, 0, sizeof(*info));
 802166c:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8021670:	2100      	movs	r1, #0
 8021672:	6878      	ldr	r0, [r7, #4]
 8021674:	f014 fbbc 	bl	8035df0 <memset>

    // special offset for '.' and '..'
    if (dir->pos == 0) {
 8021678:	68bb      	ldr	r3, [r7, #8]
 802167a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802167c:	2b00      	cmp	r3, #0
 802167e:	d110      	bne.n	80216a2 <lfs_dir_read_+0x42>
        info->type = LFS_TYPE_DIR;
 8021680:	687b      	ldr	r3, [r7, #4]
 8021682:	2202      	movs	r2, #2
 8021684:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, ".");
 8021686:	687b      	ldr	r3, [r7, #4]
 8021688:	3308      	adds	r3, #8
 802168a:	4935      	ldr	r1, [pc, #212]	@ (8021760 <lfs_dir_read_+0x100>)
 802168c:	461a      	mov	r2, r3
 802168e:	460b      	mov	r3, r1
 8021690:	881b      	ldrh	r3, [r3, #0]
 8021692:	8013      	strh	r3, [r2, #0]
        dir->pos += 1;
 8021694:	68bb      	ldr	r3, [r7, #8]
 8021696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021698:	1c5a      	adds	r2, r3, #1
 802169a:	68bb      	ldr	r3, [r7, #8]
 802169c:	629a      	str	r2, [r3, #40]	@ 0x28
        return true;
 802169e:	2301      	movs	r3, #1
 80216a0:	e05a      	b.n	8021758 <lfs_dir_read_+0xf8>
    } else if (dir->pos == 1) {
 80216a2:	68bb      	ldr	r3, [r7, #8]
 80216a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80216a6:	2b01      	cmp	r3, #1
 80216a8:	d110      	bne.n	80216cc <lfs_dir_read_+0x6c>
        info->type = LFS_TYPE_DIR;
 80216aa:	687b      	ldr	r3, [r7, #4]
 80216ac:	2202      	movs	r2, #2
 80216ae:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, "..");
 80216b0:	687b      	ldr	r3, [r7, #4]
 80216b2:	3308      	adds	r3, #8
 80216b4:	4a2b      	ldr	r2, [pc, #172]	@ (8021764 <lfs_dir_read_+0x104>)
 80216b6:	8811      	ldrh	r1, [r2, #0]
 80216b8:	7892      	ldrb	r2, [r2, #2]
 80216ba:	8019      	strh	r1, [r3, #0]
 80216bc:	709a      	strb	r2, [r3, #2]
        dir->pos += 1;
 80216be:	68bb      	ldr	r3, [r7, #8]
 80216c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80216c2:	1c5a      	adds	r2, r3, #1
 80216c4:	68bb      	ldr	r3, [r7, #8]
 80216c6:	629a      	str	r2, [r3, #40]	@ 0x28
        return true;
 80216c8:	2301      	movs	r3, #1
 80216ca:	e045      	b.n	8021758 <lfs_dir_read_+0xf8>
    }

    while (true) {
        if (dir->id == dir->m.count) {
 80216cc:	68bb      	ldr	r3, [r7, #8]
 80216ce:	889a      	ldrh	r2, [r3, #4]
 80216d0:	68bb      	ldr	r3, [r7, #8]
 80216d2:	8b9b      	ldrh	r3, [r3, #28]
 80216d4:	429a      	cmp	r2, r3
 80216d6:	d11a      	bne.n	802170e <lfs_dir_read_+0xae>
            if (!dir->m.split) {
 80216d8:	68bb      	ldr	r3, [r7, #8]
 80216da:	7fdb      	ldrb	r3, [r3, #31]
 80216dc:	f083 0301 	eor.w	r3, r3, #1
 80216e0:	b2db      	uxtb	r3, r3
 80216e2:	2b00      	cmp	r3, #0
 80216e4:	d001      	beq.n	80216ea <lfs_dir_read_+0x8a>
                return false;
 80216e6:	2300      	movs	r3, #0
 80216e8:	e036      	b.n	8021758 <lfs_dir_read_+0xf8>
            }

            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
 80216ea:	68bb      	ldr	r3, [r7, #8]
 80216ec:	f103 0108 	add.w	r1, r3, #8
 80216f0:	68bb      	ldr	r3, [r7, #8]
 80216f2:	3320      	adds	r3, #32
 80216f4:	461a      	mov	r2, r3
 80216f6:	68f8      	ldr	r0, [r7, #12]
 80216f8:	f7fd ff6a 	bl	801f5d0 <lfs_dir_fetch>
 80216fc:	6178      	str	r0, [r7, #20]
            if (err) {
 80216fe:	697b      	ldr	r3, [r7, #20]
 8021700:	2b00      	cmp	r3, #0
 8021702:	d001      	beq.n	8021708 <lfs_dir_read_+0xa8>
                return err;
 8021704:	697b      	ldr	r3, [r7, #20]
 8021706:	e027      	b.n	8021758 <lfs_dir_read_+0xf8>
            }

            dir->id = 0;
 8021708:	68bb      	ldr	r3, [r7, #8]
 802170a:	2200      	movs	r2, #0
 802170c:	809a      	strh	r2, [r3, #4]
        }

        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
 802170e:	68bb      	ldr	r3, [r7, #8]
 8021710:	f103 0108 	add.w	r1, r3, #8
 8021714:	68bb      	ldr	r3, [r7, #8]
 8021716:	889a      	ldrh	r2, [r3, #4]
 8021718:	687b      	ldr	r3, [r7, #4]
 802171a:	68f8      	ldr	r0, [r7, #12]
 802171c:	f7fd ffa6 	bl	801f66c <lfs_dir_getinfo>
 8021720:	6138      	str	r0, [r7, #16]
        if (err && err != LFS_ERR_NOENT) {
 8021722:	693b      	ldr	r3, [r7, #16]
 8021724:	2b00      	cmp	r3, #0
 8021726:	d005      	beq.n	8021734 <lfs_dir_read_+0xd4>
 8021728:	693b      	ldr	r3, [r7, #16]
 802172a:	f113 0f02 	cmn.w	r3, #2
 802172e:	d001      	beq.n	8021734 <lfs_dir_read_+0xd4>
            return err;
 8021730:	693b      	ldr	r3, [r7, #16]
 8021732:	e011      	b.n	8021758 <lfs_dir_read_+0xf8>
        }

        dir->id += 1;
 8021734:	68bb      	ldr	r3, [r7, #8]
 8021736:	889b      	ldrh	r3, [r3, #4]
 8021738:	3301      	adds	r3, #1
 802173a:	b29a      	uxth	r2, r3
 802173c:	68bb      	ldr	r3, [r7, #8]
 802173e:	809a      	strh	r2, [r3, #4]
        if (err != LFS_ERR_NOENT) {
 8021740:	693b      	ldr	r3, [r7, #16]
 8021742:	f113 0f02 	cmn.w	r3, #2
 8021746:	d100      	bne.n	802174a <lfs_dir_read_+0xea>
    while (true) {
 8021748:	e7c0      	b.n	80216cc <lfs_dir_read_+0x6c>
            break;
 802174a:	bf00      	nop
        }
    }

    dir->pos += 1;
 802174c:	68bb      	ldr	r3, [r7, #8]
 802174e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021750:	1c5a      	adds	r2, r3, #1
 8021752:	68bb      	ldr	r3, [r7, #8]
 8021754:	629a      	str	r2, [r3, #40]	@ 0x28
    return true;
 8021756:	2301      	movs	r3, #1
}
 8021758:	4618      	mov	r0, r3
 802175a:	3718      	adds	r7, #24
 802175c:	46bd      	mov	sp, r7
 802175e:	bd80      	pop	{r7, pc}
 8021760:	08040a98 	.word	0x08040a98
 8021764:	08040a9c 	.word	0x08040a9c

08021768 <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8021768:	b590      	push	{r4, r7, lr}
 802176a:	b087      	sub	sp, #28
 802176c:	af00      	add	r7, sp, #0
 802176e:	6078      	str	r0, [r7, #4]
 8021770:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 8021772:	683b      	ldr	r3, [r7, #0]
 8021774:	681b      	ldr	r3, [r3, #0]
 8021776:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 8021778:	687b      	ldr	r3, [r7, #4]
 802177a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802177c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802177e:	3b08      	subs	r3, #8
 8021780:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 8021782:	697a      	ldr	r2, [r7, #20]
 8021784:	693b      	ldr	r3, [r7, #16]
 8021786:	fbb2 f3f3 	udiv	r3, r2, r3
 802178a:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 802178c:	68fb      	ldr	r3, [r7, #12]
 802178e:	2b00      	cmp	r3, #0
 8021790:	d101      	bne.n	8021796 <lfs_ctz_index+0x2e>
        return 0;
 8021792:	2300      	movs	r3, #0
 8021794:	e01c      	b.n	80217d0 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8021796:	68fb      	ldr	r3, [r7, #12]
 8021798:	3b01      	subs	r3, #1
 802179a:	4618      	mov	r0, r3
 802179c:	f7fb fc79 	bl	801d092 <lfs_popc>
 80217a0:	4603      	mov	r3, r0
 80217a2:	3302      	adds	r3, #2
 80217a4:	009b      	lsls	r3, r3, #2
 80217a6:	697a      	ldr	r2, [r7, #20]
 80217a8:	1ad2      	subs	r2, r2, r3
 80217aa:	693b      	ldr	r3, [r7, #16]
 80217ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80217b0:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 80217b2:	693b      	ldr	r3, [r7, #16]
 80217b4:	68fa      	ldr	r2, [r7, #12]
 80217b6:	fb02 f303 	mul.w	r3, r2, r3
 80217ba:	697a      	ldr	r2, [r7, #20]
 80217bc:	1ad4      	subs	r4, r2, r3
 80217be:	68f8      	ldr	r0, [r7, #12]
 80217c0:	f7fb fc67 	bl	801d092 <lfs_popc>
 80217c4:	4603      	mov	r3, r0
 80217c6:	009b      	lsls	r3, r3, #2
 80217c8:	1ae2      	subs	r2, r4, r3
 80217ca:	683b      	ldr	r3, [r7, #0]
 80217cc:	601a      	str	r2, [r3, #0]
    return i;
 80217ce:	68fb      	ldr	r3, [r7, #12]
}
 80217d0:	4618      	mov	r0, r3
 80217d2:	371c      	adds	r7, #28
 80217d4:	46bd      	mov	sp, r7
 80217d6:	bd90      	pop	{r4, r7, pc}

080217d8 <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 80217d8:	b590      	push	{r4, r7, lr}
 80217da:	b08f      	sub	sp, #60	@ 0x3c
 80217dc:	af04      	add	r7, sp, #16
 80217de:	60f8      	str	r0, [r7, #12]
 80217e0:	60b9      	str	r1, [r7, #8]
 80217e2:	607a      	str	r2, [r7, #4]
 80217e4:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 80217e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80217e8:	2b00      	cmp	r3, #0
 80217ea:	d108      	bne.n	80217fe <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 80217ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80217ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80217f2:	601a      	str	r2, [r3, #0]
        *off = 0;
 80217f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80217f6:	2200      	movs	r2, #0
 80217f8:	601a      	str	r2, [r3, #0]
        return 0;
 80217fa:	2300      	movs	r3, #0
 80217fc:	e053      	b.n	80218a6 <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 80217fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021800:	3b01      	subs	r3, #1
 8021802:	617b      	str	r3, [r7, #20]
 8021804:	f107 0314 	add.w	r3, r7, #20
 8021808:	4619      	mov	r1, r3
 802180a:	68f8      	ldr	r0, [r7, #12]
 802180c:	f7ff ffac 	bl	8021768 <lfs_ctz_index>
 8021810:	4603      	mov	r3, r0
 8021812:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8021814:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8021818:	4619      	mov	r1, r3
 802181a:	68f8      	ldr	r0, [r7, #12]
 802181c:	f7ff ffa4 	bl	8021768 <lfs_ctz_index>
 8021820:	4603      	mov	r3, r0
 8021822:	623b      	str	r3, [r7, #32]

    while (current > target) {
 8021824:	e034      	b.n	8021890 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 8021826:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8021828:	6a3b      	ldr	r3, [r7, #32]
 802182a:	1ad3      	subs	r3, r2, r3
 802182c:	3301      	adds	r3, #1
 802182e:	4618      	mov	r0, r3
 8021830:	f7fb fc10 	bl	801d054 <lfs_npw2>
 8021834:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 8021836:	1e5c      	subs	r4, r3, #1
 8021838:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802183a:	f7fb fc1b 	bl	801d074 <lfs_ctz>
 802183e:	4603      	mov	r3, r0
 8021840:	4619      	mov	r1, r3
 8021842:	4620      	mov	r0, r4
 8021844:	f7fb fbcf 	bl	801cfe6 <lfs_min>
 8021848:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 802184a:	683b      	ldr	r3, [r7, #0]
 802184c:	69fa      	ldr	r2, [r7, #28]
 802184e:	0092      	lsls	r2, r2, #2
 8021850:	2104      	movs	r1, #4
 8021852:	9103      	str	r1, [sp, #12]
 8021854:	4639      	mov	r1, r7
 8021856:	9102      	str	r1, [sp, #8]
 8021858:	9201      	str	r2, [sp, #4]
 802185a:	9300      	str	r3, [sp, #0]
 802185c:	2304      	movs	r3, #4
 802185e:	687a      	ldr	r2, [r7, #4]
 8021860:	68b9      	ldr	r1, [r7, #8]
 8021862:	68f8      	ldr	r0, [r7, #12]
 8021864:	f7fb fc9a 	bl	801d19c <lfs_bd_read>
 8021868:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 802186a:	683b      	ldr	r3, [r7, #0]
 802186c:	4618      	mov	r0, r3
 802186e:	f7fb fc2a 	bl	801d0c6 <lfs_fromle32>
 8021872:	4603      	mov	r3, r0
 8021874:	603b      	str	r3, [r7, #0]
        if (err) {
 8021876:	69bb      	ldr	r3, [r7, #24]
 8021878:	2b00      	cmp	r3, #0
 802187a:	d001      	beq.n	8021880 <lfs_ctz_find+0xa8>
            return err;
 802187c:	69bb      	ldr	r3, [r7, #24]
 802187e:	e012      	b.n	80218a6 <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 8021880:	2201      	movs	r2, #1
 8021882:	69fb      	ldr	r3, [r7, #28]
 8021884:	fa02 f303 	lsl.w	r3, r2, r3
 8021888:	461a      	mov	r2, r3
 802188a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802188c:	1a9b      	subs	r3, r3, r2
 802188e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (current > target) {
 8021890:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8021892:	6a3b      	ldr	r3, [r7, #32]
 8021894:	429a      	cmp	r2, r3
 8021896:	d8c6      	bhi.n	8021826 <lfs_ctz_find+0x4e>
    }

    *block = head;
 8021898:	683a      	ldr	r2, [r7, #0]
 802189a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802189c:	601a      	str	r2, [r3, #0]
    *off = pos;
 802189e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80218a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80218a2:	601a      	str	r2, [r3, #0]
    return 0;
 80218a4:	2300      	movs	r3, #0
}
 80218a6:	4618      	mov	r0, r3
 80218a8:	372c      	adds	r7, #44	@ 0x2c
 80218aa:	46bd      	mov	sp, r7
 80218ac:	bd90      	pop	{r4, r7, pc}
	...

080218b0 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 80218b0:	b580      	push	{r7, lr}
 80218b2:	b092      	sub	sp, #72	@ 0x48
 80218b4:	af04      	add	r7, sp, #16
 80218b6:	60f8      	str	r0, [r7, #12]
 80218b8:	60b9      	str	r1, [r7, #8]
 80218ba:	607a      	str	r2, [r7, #4]
 80218bc:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 80218be:	f107 0320 	add.w	r3, r7, #32
 80218c2:	4619      	mov	r1, r3
 80218c4:	68f8      	ldr	r0, [r7, #12]
 80218c6:	f7fc fbff 	bl	801e0c8 <lfs_alloc>
 80218ca:	62f8      	str	r0, [r7, #44]	@ 0x2c
        if (err) {
 80218cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80218ce:	2b00      	cmp	r3, #0
 80218d0:	d001      	beq.n	80218d6 <lfs_ctz_extend+0x26>
            return err;
 80218d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80218d4:	e0e9      	b.n	8021aaa <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 80218d6:	6a3b      	ldr	r3, [r7, #32]
 80218d8:	4619      	mov	r1, r3
 80218da:	68f8      	ldr	r0, [r7, #12]
 80218dc:	f7fb ff9e 	bl	801d81c <lfs_bd_erase>
 80218e0:	62f8      	str	r0, [r7, #44]	@ 0x2c
            if (err) {
 80218e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80218e4:	2b00      	cmp	r3, #0
 80218e6:	d006      	beq.n	80218f6 <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 80218e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80218ea:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80218ee:	f000 80cb 	beq.w	8021a88 <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 80218f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80218f4:	e0d9      	b.n	8021aaa <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 80218f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80218f8:	2b00      	cmp	r3, #0
 80218fa:	d107      	bne.n	802190c <lfs_ctz_extend+0x5c>
                *block = nblock;
 80218fc:	6a3a      	ldr	r2, [r7, #32]
 80218fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8021900:	601a      	str	r2, [r3, #0]
                *off = 0;
 8021902:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8021904:	2200      	movs	r2, #0
 8021906:	601a      	str	r2, [r3, #0]
                return 0;
 8021908:	2300      	movs	r3, #0
 802190a:	e0ce      	b.n	8021aaa <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 802190c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802190e:	3b01      	subs	r3, #1
 8021910:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8021912:	f107 031c 	add.w	r3, r7, #28
 8021916:	4619      	mov	r1, r3
 8021918:	68f8      	ldr	r0, [r7, #12]
 802191a:	f7ff ff25 	bl	8021768 <lfs_ctz_index>
 802191e:	4603      	mov	r3, r0
 8021920:	62bb      	str	r3, [r7, #40]	@ 0x28
            noff = noff + 1;
 8021922:	69fb      	ldr	r3, [r7, #28]
 8021924:	3301      	adds	r3, #1
 8021926:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8021928:	68fb      	ldr	r3, [r7, #12]
 802192a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802192c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 802192e:	69fb      	ldr	r3, [r7, #28]
 8021930:	429a      	cmp	r2, r3
 8021932:	d044      	beq.n	80219be <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 8021934:	2300      	movs	r3, #0
 8021936:	637b      	str	r3, [r7, #52]	@ 0x34
 8021938:	e035      	b.n	80219a6 <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 802193a:	69fa      	ldr	r2, [r7, #28]
 802193c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802193e:	1ad2      	subs	r2, r2, r3
 8021940:	2301      	movs	r3, #1
 8021942:	9303      	str	r3, [sp, #12]
 8021944:	f107 0317 	add.w	r3, r7, #23
 8021948:	9302      	str	r3, [sp, #8]
 802194a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802194c:	9301      	str	r3, [sp, #4]
 802194e:	683b      	ldr	r3, [r7, #0]
 8021950:	9300      	str	r3, [sp, #0]
 8021952:	4613      	mov	r3, r2
 8021954:	687a      	ldr	r2, [r7, #4]
 8021956:	2100      	movs	r1, #0
 8021958:	68f8      	ldr	r0, [r7, #12]
 802195a:	f7fb fc1f 	bl	801d19c <lfs_bd_read>
 802195e:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 8021960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021962:	2b00      	cmp	r3, #0
 8021964:	d001      	beq.n	802196a <lfs_ctz_extend+0xba>
                        return err;
 8021966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021968:	e09f      	b.n	8021aaa <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 802196a:	6a3b      	ldr	r3, [r7, #32]
 802196c:	2201      	movs	r2, #1
 802196e:	9203      	str	r2, [sp, #12]
 8021970:	f107 0217 	add.w	r2, r7, #23
 8021974:	9202      	str	r2, [sp, #8]
 8021976:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8021978:	9201      	str	r2, [sp, #4]
 802197a:	9300      	str	r3, [sp, #0]
 802197c:	2301      	movs	r3, #1
 802197e:	687a      	ldr	r2, [r7, #4]
 8021980:	68b9      	ldr	r1, [r7, #8]
 8021982:	68f8      	ldr	r0, [r7, #12]
 8021984:	f7fb fe9c 	bl	801d6c0 <lfs_bd_prog>
 8021988:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 802198a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802198c:	2b00      	cmp	r3, #0
 802198e:	d007      	beq.n	80219a0 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 8021990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021992:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8021996:	d101      	bne.n	802199c <lfs_ctz_extend+0xec>
                            goto relocate;
 8021998:	bf00      	nop
                    goto relocate;
 802199a:	e075      	b.n	8021a88 <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 802199c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
                return err;
 802199e:	e084      	b.n	8021aaa <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 80219a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80219a2:	3301      	adds	r3, #1
 80219a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80219a6:	69fb      	ldr	r3, [r7, #28]
 80219a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80219aa:	429a      	cmp	r2, r3
 80219ac:	d3c5      	bcc.n	802193a <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 80219ae:	6a3a      	ldr	r2, [r7, #32]
 80219b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80219b2:	601a      	str	r2, [r3, #0]
                *off = noff;
 80219b4:	69fa      	ldr	r2, [r7, #28]
 80219b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80219b8:	601a      	str	r2, [r3, #0]
                return 0;
 80219ba:	2300      	movs	r3, #0
 80219bc:	e075      	b.n	8021aaa <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 80219be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80219c0:	3301      	adds	r3, #1
 80219c2:	62bb      	str	r3, [r7, #40]	@ 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 80219c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80219c6:	f7fb fb55 	bl	801d074 <lfs_ctz>
 80219ca:	4603      	mov	r3, r0
 80219cc:	3301      	adds	r3, #1
 80219ce:	627b      	str	r3, [r7, #36]	@ 0x24
            lfs_block_t nhead = head;
 80219d0:	683b      	ldr	r3, [r7, #0]
 80219d2:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 80219d4:	2300      	movs	r3, #0
 80219d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80219d8:	e049      	b.n	8021a6e <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 80219da:	69bb      	ldr	r3, [r7, #24]
 80219dc:	4618      	mov	r0, r3
 80219de:	f7fb fb7d 	bl	801d0dc <lfs_tole32>
 80219e2:	4603      	mov	r3, r0
 80219e4:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 80219e6:	6a3b      	ldr	r3, [r7, #32]
 80219e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80219ea:	0092      	lsls	r2, r2, #2
 80219ec:	2104      	movs	r1, #4
 80219ee:	9103      	str	r1, [sp, #12]
 80219f0:	f107 0118 	add.w	r1, r7, #24
 80219f4:	9102      	str	r1, [sp, #8]
 80219f6:	9201      	str	r2, [sp, #4]
 80219f8:	9300      	str	r3, [sp, #0]
 80219fa:	2301      	movs	r3, #1
 80219fc:	687a      	ldr	r2, [r7, #4]
 80219fe:	68b9      	ldr	r1, [r7, #8]
 8021a00:	68f8      	ldr	r0, [r7, #12]
 8021a02:	f7fb fe5d 	bl	801d6c0 <lfs_bd_prog>
 8021a06:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8021a08:	69bb      	ldr	r3, [r7, #24]
 8021a0a:	4618      	mov	r0, r3
 8021a0c:	f7fb fb5b 	bl	801d0c6 <lfs_fromle32>
 8021a10:	4603      	mov	r3, r0
 8021a12:	61bb      	str	r3, [r7, #24]
                if (err) {
 8021a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021a16:	2b00      	cmp	r3, #0
 8021a18:	d005      	beq.n	8021a26 <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 8021a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021a1c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8021a20:	d034      	beq.n	8021a8c <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 8021a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021a24:	e041      	b.n	8021aaa <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 8021a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021a28:	3b01      	subs	r3, #1
 8021a2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8021a2c:	429a      	cmp	r2, r3
 8021a2e:	d01b      	beq.n	8021a68 <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 8021a30:	69bb      	ldr	r3, [r7, #24]
 8021a32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8021a34:	0092      	lsls	r2, r2, #2
 8021a36:	2104      	movs	r1, #4
 8021a38:	9103      	str	r1, [sp, #12]
 8021a3a:	f107 0118 	add.w	r1, r7, #24
 8021a3e:	9102      	str	r1, [sp, #8]
 8021a40:	9201      	str	r2, [sp, #4]
 8021a42:	9300      	str	r3, [sp, #0]
 8021a44:	2304      	movs	r3, #4
 8021a46:	687a      	ldr	r2, [r7, #4]
 8021a48:	2100      	movs	r1, #0
 8021a4a:	68f8      	ldr	r0, [r7, #12]
 8021a4c:	f7fb fba6 	bl	801d19c <lfs_bd_read>
 8021a50:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 8021a52:	69bb      	ldr	r3, [r7, #24]
 8021a54:	4618      	mov	r0, r3
 8021a56:	f7fb fb36 	bl	801d0c6 <lfs_fromle32>
 8021a5a:	4603      	mov	r3, r0
 8021a5c:	61bb      	str	r3, [r7, #24]
                    if (err) {
 8021a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021a60:	2b00      	cmp	r3, #0
 8021a62:	d001      	beq.n	8021a68 <lfs_ctz_extend+0x1b8>
                        return err;
 8021a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021a66:	e020      	b.n	8021aaa <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 8021a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021a6a:	3301      	adds	r3, #1
 8021a6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8021a6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8021a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021a72:	429a      	cmp	r2, r3
 8021a74:	d3b1      	bcc.n	80219da <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 8021a76:	6a3a      	ldr	r2, [r7, #32]
 8021a78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8021a7a:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 8021a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021a7e:	009a      	lsls	r2, r3, #2
 8021a80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8021a82:	601a      	str	r2, [r3, #0]
            return 0;
 8021a84:	2300      	movs	r3, #0
 8021a86:	e010      	b.n	8021aaa <lfs_ctz_extend+0x1fa>
                    goto relocate;
 8021a88:	bf00      	nop
 8021a8a:	e000      	b.n	8021a8e <lfs_ctz_extend+0x1de>
                        goto relocate;
 8021a8c:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8021a8e:	6a3b      	ldr	r3, [r7, #32]
 8021a90:	4a08      	ldr	r2, [pc, #32]	@ (8021ab4 <lfs_ctz_extend+0x204>)
 8021a92:	9200      	str	r2, [sp, #0]
 8021a94:	f640 32a6 	movw	r2, #2982	@ 0xba6
 8021a98:	4907      	ldr	r1, [pc, #28]	@ (8021ab8 <lfs_ctz_extend+0x208>)
 8021a9a:	4808      	ldr	r0, [pc, #32]	@ (8021abc <lfs_ctz_extend+0x20c>)
 8021a9c:	f011 fc88 	bl	80333b0 <printf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8021aa0:	68b9      	ldr	r1, [r7, #8]
 8021aa2:	68f8      	ldr	r0, [r7, #12]
 8021aa4:	f7fb fb55 	bl	801d152 <lfs_cache_drop>
    while (true) {
 8021aa8:	e709      	b.n	80218be <lfs_ctz_extend+0xe>
    }
}
 8021aaa:	4618      	mov	r0, r3
 8021aac:	3738      	adds	r7, #56	@ 0x38
 8021aae:	46bd      	mov	sp, r7
 8021ab0:	bd80      	pop	{r7, pc}
 8021ab2:	bf00      	nop
 8021ab4:	08040a48 	.word	0x08040a48
 8021ab8:	08040920 	.word	0x08040920
 8021abc:	08040ac8 	.word	0x08040ac8

08021ac0 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8021ac0:	b580      	push	{r7, lr}
 8021ac2:	b090      	sub	sp, #64	@ 0x40
 8021ac4:	af04      	add	r7, sp, #16
 8021ac6:	60f8      	str	r0, [r7, #12]
 8021ac8:	60b9      	str	r1, [r7, #8]
 8021aca:	607a      	str	r2, [r7, #4]
 8021acc:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8021ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021ad0:	2b00      	cmp	r3, #0
 8021ad2:	d101      	bne.n	8021ad8 <lfs_ctz_traverse+0x18>
        return 0;
 8021ad4:	2300      	movs	r3, #0
 8021ad6:	e06b      	b.n	8021bb0 <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8021ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021ada:	3b01      	subs	r3, #1
 8021adc:	61fb      	str	r3, [r7, #28]
 8021ade:	f107 031c 	add.w	r3, r7, #28
 8021ae2:	4619      	mov	r1, r3
 8021ae4:	68f8      	ldr	r0, [r7, #12]
 8021ae6:	f7ff fe3f 	bl	8021768 <lfs_ctz_index>
 8021aea:	4603      	mov	r3, r0
 8021aec:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while (true) {
        int err = cb(data, head);
 8021aee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021af0:	6839      	ldr	r1, [r7, #0]
 8021af2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8021af4:	4798      	blx	r3
 8021af6:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 8021af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021afa:	2b00      	cmp	r3, #0
 8021afc:	d001      	beq.n	8021b02 <lfs_ctz_traverse+0x42>
            return err;
 8021afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021b00:	e056      	b.n	8021bb0 <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 8021b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021b04:	2b00      	cmp	r3, #0
 8021b06:	d101      	bne.n	8021b0c <lfs_ctz_traverse+0x4c>
            return 0;
 8021b08:	2300      	movs	r3, #0
 8021b0a:	e051      	b.n	8021bb0 <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8021b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021b0e:	f003 0301 	and.w	r3, r3, #1
 8021b12:	f1c3 0302 	rsb	r3, r3, #2
 8021b16:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8021b18:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 8021b1a:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 8021b1c:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 8021b1e:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8021b20:	9303      	str	r3, [sp, #12]
 8021b22:	f107 0314 	add.w	r3, r7, #20
 8021b26:	9302      	str	r3, [sp, #8]
 8021b28:	2300      	movs	r3, #0
 8021b2a:	9301      	str	r3, [sp, #4]
 8021b2c:	683b      	ldr	r3, [r7, #0]
 8021b2e:	9300      	str	r3, [sp, #0]
 8021b30:	4613      	mov	r3, r2
 8021b32:	687a      	ldr	r2, [r7, #4]
 8021b34:	68b9      	ldr	r1, [r7, #8]
 8021b36:	68f8      	ldr	r0, [r7, #12]
 8021b38:	f7fb fb30 	bl	801d19c <lfs_bd_read>
 8021b3c:	6278      	str	r0, [r7, #36]	@ 0x24
        heads[0] = lfs_fromle32(heads[0]);
 8021b3e:	697b      	ldr	r3, [r7, #20]
 8021b40:	4618      	mov	r0, r3
 8021b42:	f7fb fac0 	bl	801d0c6 <lfs_fromle32>
 8021b46:	4603      	mov	r3, r0
 8021b48:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 8021b4a:	69bb      	ldr	r3, [r7, #24]
 8021b4c:	4618      	mov	r0, r3
 8021b4e:	f7fb faba 	bl	801d0c6 <lfs_fromle32>
 8021b52:	4603      	mov	r3, r0
 8021b54:	61bb      	str	r3, [r7, #24]
        if (err) {
 8021b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021b58:	2b00      	cmp	r3, #0
 8021b5a:	d001      	beq.n	8021b60 <lfs_ctz_traverse+0xa0>
            return err;
 8021b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021b5e:	e027      	b.n	8021bb0 <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 8021b60:	2300      	movs	r3, #0
 8021b62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8021b64:	e012      	b.n	8021b8c <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 8021b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021b68:	009b      	lsls	r3, r3, #2
 8021b6a:	3330      	adds	r3, #48	@ 0x30
 8021b6c:	443b      	add	r3, r7
 8021b6e:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8021b72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021b74:	4611      	mov	r1, r2
 8021b76:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8021b78:	4798      	blx	r3
 8021b7a:	6278      	str	r0, [r7, #36]	@ 0x24
            if (err) {
 8021b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021b7e:	2b00      	cmp	r3, #0
 8021b80:	d001      	beq.n	8021b86 <lfs_ctz_traverse+0xc6>
                return err;
 8021b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021b84:	e014      	b.n	8021bb0 <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 8021b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021b88:	3301      	adds	r3, #1
 8021b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8021b8c:	6a3b      	ldr	r3, [r7, #32]
 8021b8e:	3b01      	subs	r3, #1
 8021b90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8021b92:	429a      	cmp	r2, r3
 8021b94:	dbe7      	blt.n	8021b66 <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 8021b96:	6a3b      	ldr	r3, [r7, #32]
 8021b98:	3b01      	subs	r3, #1
 8021b9a:	009b      	lsls	r3, r3, #2
 8021b9c:	3330      	adds	r3, #48	@ 0x30
 8021b9e:	443b      	add	r3, r7
 8021ba0:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8021ba4:	603b      	str	r3, [r7, #0]
        index -= count;
 8021ba6:	6a3b      	ldr	r3, [r7, #32]
 8021ba8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8021baa:	1ad3      	subs	r3, r2, r3
 8021bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (true) {
 8021bae:	e79e      	b.n	8021aee <lfs_ctz_traverse+0x2e>
    }
}
 8021bb0:	4618      	mov	r0, r3
 8021bb2:	3730      	adds	r7, #48	@ 0x30
 8021bb4:	46bd      	mov	sp, r7
 8021bb6:	bd80      	pop	{r7, pc}

08021bb8 <lfs_file_opencfg_>:


/// Top level file operations ///
static int lfs_file_opencfg_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8021bb8:	b5b0      	push	{r4, r5, r7, lr}
 8021bba:	b09a      	sub	sp, #104	@ 0x68
 8021bbc:	af02      	add	r7, sp, #8
 8021bbe:	60f8      	str	r0, [r7, #12]
 8021bc0:	60b9      	str	r1, [r7, #8]
 8021bc2:	607a      	str	r2, [r7, #4]
 8021bc4:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8021bc6:	683b      	ldr	r3, [r7, #0]
 8021bc8:	f003 0302 	and.w	r3, r3, #2
 8021bcc:	2b00      	cmp	r3, #0
 8021bce:	d008      	beq.n	8021be2 <lfs_file_opencfg_+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 8021bd0:	68f8      	ldr	r0, [r7, #12]
 8021bd2:	f002 fded 	bl	80247b0 <lfs_fs_forceconsistency>
 8021bd6:	6538      	str	r0, [r7, #80]	@ 0x50
        if (err) {
 8021bd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8021bda:	2b00      	cmp	r3, #0
 8021bdc:	d001      	beq.n	8021be2 <lfs_file_opencfg_+0x2a>
            return err;
 8021bde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8021be0:	e1b0      	b.n	8021f44 <lfs_file_opencfg_+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 8021be2:	68bb      	ldr	r3, [r7, #8]
 8021be4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8021be6:	651a      	str	r2, [r3, #80]	@ 0x50
    file->flags = flags;
 8021be8:	683a      	ldr	r2, [r7, #0]
 8021bea:	68bb      	ldr	r3, [r7, #8]
 8021bec:	631a      	str	r2, [r3, #48]	@ 0x30
    file->pos = 0;
 8021bee:	68bb      	ldr	r3, [r7, #8]
 8021bf0:	2200      	movs	r2, #0
 8021bf2:	635a      	str	r2, [r3, #52]	@ 0x34
    file->off = 0;
 8021bf4:	68bb      	ldr	r3, [r7, #8]
 8021bf6:	2200      	movs	r2, #0
 8021bf8:	63da      	str	r2, [r3, #60]	@ 0x3c
    file->cache.buffer = NULL;
 8021bfa:	68bb      	ldr	r3, [r7, #8]
 8021bfc:	2200      	movs	r2, #0
 8021bfe:	64da      	str	r2, [r3, #76]	@ 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8021c00:	68bb      	ldr	r3, [r7, #8]
 8021c02:	f103 0108 	add.w	r1, r3, #8
 8021c06:	68bb      	ldr	r3, [r7, #8]
 8021c08:	3304      	adds	r3, #4
 8021c0a:	1d3a      	adds	r2, r7, #4
 8021c0c:	68f8      	ldr	r0, [r7, #12]
 8021c0e:	f7fd fdf1 	bl	801f7f4 <lfs_dir_find>
 8021c12:	65b8      	str	r0, [r7, #88]	@ 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 8021c14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8021c16:	2b00      	cmp	r3, #0
 8021c18:	da0c      	bge.n	8021c34 <lfs_file_opencfg_+0x7c>
 8021c1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8021c1c:	f113 0f02 	cmn.w	r3, #2
 8021c20:	d105      	bne.n	8021c2e <lfs_file_opencfg_+0x76>
 8021c22:	68bb      	ldr	r3, [r7, #8]
 8021c24:	889b      	ldrh	r3, [r3, #4]
 8021c26:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8021c2a:	4293      	cmp	r3, r2
 8021c2c:	d102      	bne.n	8021c34 <lfs_file_opencfg_+0x7c>
        err = tag;
 8021c2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8021c30:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 8021c32:	e17c      	b.n	8021f2e <lfs_file_opencfg_+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8021c34:	68bb      	ldr	r3, [r7, #8]
 8021c36:	2201      	movs	r2, #1
 8021c38:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 8021c3a:	68b9      	ldr	r1, [r7, #8]
 8021c3c:	68f8      	ldr	r0, [r7, #12]
 8021c3e:	f7fc f970 	bl	801df22 <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 8021c42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8021c44:	f113 0f02 	cmn.w	r3, #2
 8021c48:	d14e      	bne.n	8021ce8 <lfs_file_opencfg_+0x130>
        if (!(flags & LFS_O_CREAT)) {
 8021c4a:	683b      	ldr	r3, [r7, #0]
 8021c4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8021c50:	2b00      	cmp	r3, #0
 8021c52:	d103      	bne.n	8021c5c <lfs_file_opencfg_+0xa4>
            err = LFS_ERR_NOENT;
 8021c54:	f06f 0301 	mvn.w	r3, #1
 8021c58:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8021c5a:	e168      	b.n	8021f2e <lfs_file_opencfg_+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 8021c5c:	687b      	ldr	r3, [r7, #4]
 8021c5e:	4618      	mov	r0, r3
 8021c60:	f7ee fb1e 	bl	80102a0 <strlen>
 8021c64:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (nlen > lfs->name_max) {
 8021c66:	68fb      	ldr	r3, [r7, #12]
 8021c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8021c6a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8021c6c:	429a      	cmp	r2, r3
 8021c6e:	d903      	bls.n	8021c78 <lfs_file_opencfg_+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 8021c70:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8021c74:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8021c76:	e15a      	b.n	8021f2e <lfs_file_opencfg_+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8021c78:	68bb      	ldr	r3, [r7, #8]
 8021c7a:	f103 0108 	add.w	r1, r3, #8
 8021c7e:	68bb      	ldr	r3, [r7, #8]
 8021c80:	889b      	ldrh	r3, [r3, #4]
 8021c82:	029b      	lsls	r3, r3, #10
 8021c84:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8021c88:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8021c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8021c8e:	2300      	movs	r3, #0
 8021c90:	633b      	str	r3, [r7, #48]	@ 0x30
 8021c92:	68bb      	ldr	r3, [r7, #8]
 8021c94:	889b      	ldrh	r3, [r3, #4]
 8021c96:	029a      	lsls	r2, r3, #10
 8021c98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021c9a:	4313      	orrs	r3, r2
 8021c9c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8021ca0:	637b      	str	r3, [r7, #52]	@ 0x34
 8021ca2:	687b      	ldr	r3, [r7, #4]
 8021ca4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8021ca6:	68bb      	ldr	r3, [r7, #8]
 8021ca8:	889b      	ldrh	r3, [r3, #4]
 8021caa:	029b      	lsls	r3, r3, #10
 8021cac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8021cb0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8021cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8021cb6:	2300      	movs	r3, #0
 8021cb8:	643b      	str	r3, [r7, #64]	@ 0x40
 8021cba:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8021cbe:	2303      	movs	r3, #3
 8021cc0:	68f8      	ldr	r0, [r7, #12]
 8021cc2:	f7ff fadf 	bl	8021284 <lfs_dir_commit>
 8021cc6:	65f8      	str	r0, [r7, #92]	@ 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 8021cc8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8021cca:	f113 0f1c 	cmn.w	r3, #28
 8021cce:	d001      	beq.n	8021cd4 <lfs_file_opencfg_+0x11c>
 8021cd0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8021cd2:	e001      	b.n	8021cd8 <lfs_file_opencfg_+0x120>
 8021cd4:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8021cd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (err) {
 8021cda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8021cdc:	2b00      	cmp	r3, #0
 8021cde:	f040 8125 	bne.w	8021f2c <lfs_file_opencfg_+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 8021ce2:	4b9a      	ldr	r3, [pc, #616]	@ (8021f4c <lfs_file_opencfg_+0x394>)
 8021ce4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8021ce6:	e044      	b.n	8021d72 <lfs_file_opencfg_+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 8021ce8:	683b      	ldr	r3, [r7, #0]
 8021cea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8021cee:	2b00      	cmp	r3, #0
 8021cf0:	d003      	beq.n	8021cfa <lfs_file_opencfg_+0x142>
        err = LFS_ERR_EXIST;
 8021cf2:	f06f 0310 	mvn.w	r3, #16
 8021cf6:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 8021cf8:	e119      	b.n	8021f2e <lfs_file_opencfg_+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 8021cfa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8021cfc:	4618      	mov	r0, r3
 8021cfe:	f7fb febb 	bl	801da78 <lfs_tag_type3>
 8021d02:	4603      	mov	r3, r0
 8021d04:	2b01      	cmp	r3, #1
 8021d06:	d003      	beq.n	8021d10 <lfs_file_opencfg_+0x158>
        err = LFS_ERR_ISDIR;
 8021d08:	f06f 0314 	mvn.w	r3, #20
 8021d0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 8021d0e:	e10e      	b.n	8021f2e <lfs_file_opencfg_+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 8021d10:	683b      	ldr	r3, [r7, #0]
 8021d12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8021d16:	2b00      	cmp	r3, #0
 8021d18:	d00e      	beq.n	8021d38 <lfs_file_opencfg_+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 8021d1a:	68bb      	ldr	r3, [r7, #8]
 8021d1c:	889b      	ldrh	r3, [r3, #4]
 8021d1e:	029b      	lsls	r3, r3, #10
 8021d20:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8021d24:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8021d28:	65bb      	str	r3, [r7, #88]	@ 0x58
        file->flags |= LFS_F_DIRTY;
 8021d2a:	68bb      	ldr	r3, [r7, #8]
 8021d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021d2e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8021d32:	68bb      	ldr	r3, [r7, #8]
 8021d34:	631a      	str	r2, [r3, #48]	@ 0x30
 8021d36:	e01c      	b.n	8021d72 <lfs_file_opencfg_+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8021d38:	68bb      	ldr	r3, [r7, #8]
 8021d3a:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8021d3e:	68bb      	ldr	r3, [r7, #8]
 8021d40:	889b      	ldrh	r3, [r3, #4]
 8021d42:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8021d44:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8021d48:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8021d4c:	68ba      	ldr	r2, [r7, #8]
 8021d4e:	3228      	adds	r2, #40	@ 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8021d50:	9200      	str	r2, [sp, #0]
 8021d52:	4a7f      	ldr	r2, [pc, #508]	@ (8021f50 <lfs_file_opencfg_+0x398>)
 8021d54:	68f8      	ldr	r0, [r7, #12]
 8021d56:	f7fc fb35 	bl	801e3c4 <lfs_dir_get>
 8021d5a:	65b8      	str	r0, [r7, #88]	@ 0x58
        if (tag < 0) {
 8021d5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8021d5e:	2b00      	cmp	r3, #0
 8021d60:	da02      	bge.n	8021d68 <lfs_file_opencfg_+0x1b0>
            err = tag;
 8021d62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8021d64:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8021d66:	e0e2      	b.n	8021f2e <lfs_file_opencfg_+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 8021d68:	68bb      	ldr	r3, [r7, #8]
 8021d6a:	3328      	adds	r3, #40	@ 0x28
 8021d6c:	4618      	mov	r0, r3
 8021d6e:	f7fb fff9 	bl	801dd64 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8021d72:	2300      	movs	r3, #0
 8021d74:	657b      	str	r3, [r7, #84]	@ 0x54
 8021d76:	e063      	b.n	8021e40 <lfs_file_opencfg_+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 8021d78:	68bb      	ldr	r3, [r7, #8]
 8021d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021d7c:	f003 0301 	and.w	r3, r3, #1
 8021d80:	2b00      	cmp	r3, #0
 8021d82:	d03c      	beq.n	8021dfe <lfs_file_opencfg_+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8021d84:	68bb      	ldr	r3, [r7, #8]
 8021d86:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 8021d8a:	68bb      	ldr	r3, [r7, #8]
 8021d8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8021d8e:	6859      	ldr	r1, [r3, #4]
 8021d90:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8021d92:	4613      	mov	r3, r2
 8021d94:	005b      	lsls	r3, r3, #1
 8021d96:	4413      	add	r3, r2
 8021d98:	009b      	lsls	r3, r3, #2
 8021d9a:	440b      	add	r3, r1
 8021d9c:	781b      	ldrb	r3, [r3, #0]
 8021d9e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8021da2:	051a      	lsls	r2, r3, #20
 8021da4:	68bb      	ldr	r3, [r7, #8]
 8021da6:	889b      	ldrh	r3, [r3, #4]
 8021da8:	029b      	lsls	r3, r3, #10
 8021daa:	ea42 0103 	orr.w	r1, r2, r3
 8021dae:	68bb      	ldr	r3, [r7, #8]
 8021db0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8021db2:	6858      	ldr	r0, [r3, #4]
 8021db4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8021db6:	4613      	mov	r3, r2
 8021db8:	005b      	lsls	r3, r3, #1
 8021dba:	4413      	add	r3, r2
 8021dbc:	009b      	lsls	r3, r3, #2
 8021dbe:	4403      	add	r3, r0
 8021dc0:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8021dc2:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 8021dc6:	68bb      	ldr	r3, [r7, #8]
 8021dc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8021dca:	6859      	ldr	r1, [r3, #4]
 8021dcc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8021dce:	4613      	mov	r3, r2
 8021dd0:	005b      	lsls	r3, r3, #1
 8021dd2:	4413      	add	r3, r2
 8021dd4:	009b      	lsls	r3, r3, #2
 8021dd6:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8021dd8:	685b      	ldr	r3, [r3, #4]
 8021dda:	9300      	str	r3, [sp, #0]
 8021ddc:	4603      	mov	r3, r0
 8021dde:	4a5d      	ldr	r2, [pc, #372]	@ (8021f54 <lfs_file_opencfg_+0x39c>)
 8021de0:	4621      	mov	r1, r4
 8021de2:	68f8      	ldr	r0, [r7, #12]
 8021de4:	f7fc faee 	bl	801e3c4 <lfs_dir_get>
 8021de8:	6478      	str	r0, [r7, #68]	@ 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 8021dea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8021dec:	2b00      	cmp	r3, #0
 8021dee:	da06      	bge.n	8021dfe <lfs_file_opencfg_+0x246>
 8021df0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8021df2:	f113 0f02 	cmn.w	r3, #2
 8021df6:	d002      	beq.n	8021dfe <lfs_file_opencfg_+0x246>
                err = res;
 8021df8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8021dfa:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 8021dfc:	e097      	b.n	8021f2e <lfs_file_opencfg_+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8021dfe:	68bb      	ldr	r3, [r7, #8]
 8021e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021e02:	f003 0302 	and.w	r3, r3, #2
 8021e06:	2b00      	cmp	r3, #0
 8021e08:	d017      	beq.n	8021e3a <lfs_file_opencfg_+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 8021e0a:	68bb      	ldr	r3, [r7, #8]
 8021e0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8021e0e:	6859      	ldr	r1, [r3, #4]
 8021e10:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8021e12:	4613      	mov	r3, r2
 8021e14:	005b      	lsls	r3, r3, #1
 8021e16:	4413      	add	r3, r2
 8021e18:	009b      	lsls	r3, r3, #2
 8021e1a:	440b      	add	r3, r1
 8021e1c:	689a      	ldr	r2, [r3, #8]
 8021e1e:	68fb      	ldr	r3, [r7, #12]
 8021e20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8021e22:	429a      	cmp	r2, r3
 8021e24:	d903      	bls.n	8021e2e <lfs_file_opencfg_+0x276>
                err = LFS_ERR_NOSPC;
 8021e26:	f06f 031b 	mvn.w	r3, #27
 8021e2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 8021e2c:	e07f      	b.n	8021f2e <lfs_file_opencfg_+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 8021e2e:	68bb      	ldr	r3, [r7, #8]
 8021e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021e32:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8021e36:	68bb      	ldr	r3, [r7, #8]
 8021e38:	631a      	str	r2, [r3, #48]	@ 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8021e3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8021e3c:	3301      	adds	r3, #1
 8021e3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8021e40:	68bb      	ldr	r3, [r7, #8]
 8021e42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8021e44:	689b      	ldr	r3, [r3, #8]
 8021e46:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8021e48:	429a      	cmp	r2, r3
 8021e4a:	d395      	bcc.n	8021d78 <lfs_file_opencfg_+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 8021e4c:	68bb      	ldr	r3, [r7, #8]
 8021e4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8021e50:	681b      	ldr	r3, [r3, #0]
 8021e52:	2b00      	cmp	r3, #0
 8021e54:	d005      	beq.n	8021e62 <lfs_file_opencfg_+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 8021e56:	68bb      	ldr	r3, [r7, #8]
 8021e58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8021e5a:	681a      	ldr	r2, [r3, #0]
 8021e5c:	68bb      	ldr	r3, [r7, #8]
 8021e5e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8021e60:	e010      	b.n	8021e84 <lfs_file_opencfg_+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8021e62:	68fb      	ldr	r3, [r7, #12]
 8021e64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8021e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021e68:	4618      	mov	r0, r3
 8021e6a:	f7fb f95b 	bl	801d124 <lfs_malloc>
 8021e6e:	4602      	mov	r2, r0
 8021e70:	68bb      	ldr	r3, [r7, #8]
 8021e72:	64da      	str	r2, [r3, #76]	@ 0x4c
        if (!file->cache.buffer) {
 8021e74:	68bb      	ldr	r3, [r7, #8]
 8021e76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8021e78:	2b00      	cmp	r3, #0
 8021e7a:	d103      	bne.n	8021e84 <lfs_file_opencfg_+0x2cc>
            err = LFS_ERR_NOMEM;
 8021e7c:	f06f 030b 	mvn.w	r3, #11
 8021e80:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8021e82:	e054      	b.n	8021f2e <lfs_file_opencfg_+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 8021e84:	68bb      	ldr	r3, [r7, #8]
 8021e86:	3340      	adds	r3, #64	@ 0x40
 8021e88:	4619      	mov	r1, r3
 8021e8a:	68f8      	ldr	r0, [r7, #12]
 8021e8c:	f7fb f970 	bl	801d170 <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8021e90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8021e92:	4618      	mov	r0, r3
 8021e94:	f7fb fdf0 	bl	801da78 <lfs_tag_type3>
 8021e98:	4603      	mov	r3, r0
 8021e9a:	461a      	mov	r2, r3
 8021e9c:	f240 2301 	movw	r3, #513	@ 0x201
 8021ea0:	429a      	cmp	r2, r3
 8021ea2:	d141      	bne.n	8021f28 <lfs_file_opencfg_+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 8021ea4:	68bb      	ldr	r3, [r7, #8]
 8021ea6:	f06f 0201 	mvn.w	r2, #1
 8021eaa:	629a      	str	r2, [r3, #40]	@ 0x28
        file->ctz.size = lfs_tag_size(tag);
 8021eac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8021eae:	4618      	mov	r0, r3
 8021eb0:	f7fb fe1c 	bl	801daec <lfs_tag_size>
 8021eb4:	4602      	mov	r2, r0
 8021eb6:	68bb      	ldr	r3, [r7, #8]
 8021eb8:	62da      	str	r2, [r3, #44]	@ 0x2c
        file->flags |= LFS_F_INLINE;
 8021eba:	68bb      	ldr	r3, [r7, #8]
 8021ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021ebe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8021ec2:	68bb      	ldr	r3, [r7, #8]
 8021ec4:	631a      	str	r2, [r3, #48]	@ 0x30
        file->cache.block = file->ctz.head;
 8021ec6:	68bb      	ldr	r3, [r7, #8]
 8021ec8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8021eca:	68bb      	ldr	r3, [r7, #8]
 8021ecc:	641a      	str	r2, [r3, #64]	@ 0x40
        file->cache.off = 0;
 8021ece:	68bb      	ldr	r3, [r7, #8]
 8021ed0:	2200      	movs	r2, #0
 8021ed2:	645a      	str	r2, [r3, #68]	@ 0x44
        file->cache.size = lfs->cfg->cache_size;
 8021ed4:	68fb      	ldr	r3, [r7, #12]
 8021ed6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8021ed8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8021eda:	68bb      	ldr	r3, [r7, #8]
 8021edc:	649a      	str	r2, [r3, #72]	@ 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 8021ede:	68bb      	ldr	r3, [r7, #8]
 8021ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021ee2:	2b00      	cmp	r3, #0
 8021ee4:	d020      	beq.n	8021f28 <lfs_file_opencfg_+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8021ee6:	68bb      	ldr	r3, [r7, #8]
 8021ee8:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 8021eec:	68bb      	ldr	r3, [r7, #8]
 8021eee:	889b      	ldrh	r3, [r3, #4]
 8021ef0:	029c      	lsls	r4, r3, #10
 8021ef2:	68bb      	ldr	r3, [r7, #8]
 8021ef4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8021ef6:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 8021efa:	4618      	mov	r0, r3
 8021efc:	f7fb f873 	bl	801cfe6 <lfs_min>
 8021f00:	4603      	mov	r3, r0
 8021f02:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8021f04:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 8021f08:	68bb      	ldr	r3, [r7, #8]
 8021f0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8021f0c:	9300      	str	r3, [sp, #0]
 8021f0e:	4613      	mov	r3, r2
 8021f10:	4a0f      	ldr	r2, [pc, #60]	@ (8021f50 <lfs_file_opencfg_+0x398>)
 8021f12:	4629      	mov	r1, r5
 8021f14:	68f8      	ldr	r0, [r7, #12]
 8021f16:	f7fc fa55 	bl	801e3c4 <lfs_dir_get>
 8021f1a:	64b8      	str	r0, [r7, #72]	@ 0x48
            if (res < 0) {
 8021f1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8021f1e:	2b00      	cmp	r3, #0
 8021f20:	da02      	bge.n	8021f28 <lfs_file_opencfg_+0x370>
                err = res;
 8021f22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8021f24:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 8021f26:	e002      	b.n	8021f2e <lfs_file_opencfg_+0x376>
            }
        }
    }

    return 0;
 8021f28:	2300      	movs	r3, #0
 8021f2a:	e00b      	b.n	8021f44 <lfs_file_opencfg_+0x38c>
            goto cleanup;
 8021f2c:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 8021f2e:	68bb      	ldr	r3, [r7, #8]
 8021f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021f32:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8021f36:	68bb      	ldr	r3, [r7, #8]
 8021f38:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
    lfs_file_close_(lfs, file);
 8021f3a:	68b9      	ldr	r1, [r7, #8]
 8021f3c:	68f8      	ldr	r0, [r7, #12]
 8021f3e:	f000 f823 	bl	8021f88 <lfs_file_close_>
    return err;
 8021f42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8021f44:	4618      	mov	r0, r3
 8021f46:	3760      	adds	r7, #96	@ 0x60
 8021f48:	46bd      	mov	sp, r7
 8021f4a:	bdb0      	pop	{r4, r5, r7, pc}
 8021f4c:	20100000 	.word	0x20100000
 8021f50:	700ffc00 	.word	0x700ffc00
 8021f54:	7ffffc00 	.word	0x7ffffc00

08021f58 <lfs_file_open_>:

#ifndef LFS_NO_MALLOC
static int lfs_file_open_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 8021f58:	b580      	push	{r7, lr}
 8021f5a:	b088      	sub	sp, #32
 8021f5c:	af02      	add	r7, sp, #8
 8021f5e:	60f8      	str	r0, [r7, #12]
 8021f60:	60b9      	str	r1, [r7, #8]
 8021f62:	607a      	str	r2, [r7, #4]
 8021f64:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_opencfg_(lfs, file, path, flags, &defaults);
 8021f66:	4b07      	ldr	r3, [pc, #28]	@ (8021f84 <lfs_file_open_+0x2c>)
 8021f68:	9300      	str	r3, [sp, #0]
 8021f6a:	683b      	ldr	r3, [r7, #0]
 8021f6c:	687a      	ldr	r2, [r7, #4]
 8021f6e:	68b9      	ldr	r1, [r7, #8]
 8021f70:	68f8      	ldr	r0, [r7, #12]
 8021f72:	f7ff fe21 	bl	8021bb8 <lfs_file_opencfg_>
 8021f76:	6178      	str	r0, [r7, #20]
    return err;
 8021f78:	697b      	ldr	r3, [r7, #20]
}
 8021f7a:	4618      	mov	r0, r3
 8021f7c:	3718      	adds	r7, #24
 8021f7e:	46bd      	mov	sp, r7
 8021f80:	bd80      	pop	{r7, pc}
 8021f82:	bf00      	nop
 8021f84:	080443f8 	.word	0x080443f8

08021f88 <lfs_file_close_>:
#endif

static int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {
 8021f88:	b580      	push	{r7, lr}
 8021f8a:	b084      	sub	sp, #16
 8021f8c:	af00      	add	r7, sp, #0
 8021f8e:	6078      	str	r0, [r7, #4]
 8021f90:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_sync_(lfs, file);
 8021f92:	6839      	ldr	r1, [r7, #0]
 8021f94:	6878      	ldr	r0, [r7, #4]
 8021f96:	f000 f9e5 	bl	8022364 <lfs_file_sync_>
 8021f9a:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 8021f9c:	6839      	ldr	r1, [r7, #0]
 8021f9e:	6878      	ldr	r0, [r7, #4]
 8021fa0:	f7fb ff9d 	bl	801dede <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 8021fa4:	683b      	ldr	r3, [r7, #0]
 8021fa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8021fa8:	681b      	ldr	r3, [r3, #0]
 8021faa:	2b00      	cmp	r3, #0
 8021fac:	d104      	bne.n	8021fb8 <lfs_file_close_+0x30>
        lfs_free(file->cache.buffer);
 8021fae:	683b      	ldr	r3, [r7, #0]
 8021fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8021fb2:	4618      	mov	r0, r3
 8021fb4:	f7fb f8c2 	bl	801d13c <lfs_free>
    }

    return err;
 8021fb8:	68fb      	ldr	r3, [r7, #12]
}
 8021fba:	4618      	mov	r0, r3
 8021fbc:	3710      	adds	r7, #16
 8021fbe:	46bd      	mov	sp, r7
 8021fc0:	bd80      	pop	{r7, pc}
	...

08021fc4 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8021fc4:	b590      	push	{r4, r7, lr}
 8021fc6:	b08d      	sub	sp, #52	@ 0x34
 8021fc8:	af06      	add	r7, sp, #24
 8021fca:	6078      	str	r0, [r7, #4]
 8021fcc:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8021fce:	f107 030c 	add.w	r3, r7, #12
 8021fd2:	4619      	mov	r1, r3
 8021fd4:	6878      	ldr	r0, [r7, #4]
 8021fd6:	f7fc f877 	bl	801e0c8 <lfs_alloc>
 8021fda:	6138      	str	r0, [r7, #16]
        if (err) {
 8021fdc:	693b      	ldr	r3, [r7, #16]
 8021fde:	2b00      	cmp	r3, #0
 8021fe0:	d001      	beq.n	8021fe6 <lfs_file_relocate+0x22>
            return err;
 8021fe2:	693b      	ldr	r3, [r7, #16]
 8021fe4:	e0bb      	b.n	802215e <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 8021fe6:	68fb      	ldr	r3, [r7, #12]
 8021fe8:	4619      	mov	r1, r3
 8021fea:	6878      	ldr	r0, [r7, #4]
 8021fec:	f7fb fc16 	bl	801d81c <lfs_bd_erase>
 8021ff0:	6138      	str	r0, [r7, #16]
        if (err) {
 8021ff2:	693b      	ldr	r3, [r7, #16]
 8021ff4:	2b00      	cmp	r3, #0
 8021ff6:	d006      	beq.n	8022006 <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 8021ff8:	693b      	ldr	r3, [r7, #16]
 8021ffa:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8021ffe:	f000 809b 	beq.w	8022138 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 8022002:	693b      	ldr	r3, [r7, #16]
 8022004:	e0ab      	b.n	802215e <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 8022006:	2300      	movs	r3, #0
 8022008:	617b      	str	r3, [r7, #20]
 802200a:	e069      	b.n	80220e0 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 802200c:	683b      	ldr	r3, [r7, #0]
 802200e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022010:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8022014:	2b00      	cmp	r3, #0
 8022016:	d027      	beq.n	8022068 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 8022018:	683b      	ldr	r3, [r7, #0]
 802201a:	f103 0008 	add.w	r0, r3, #8
 802201e:	683b      	ldr	r3, [r7, #0]
 8022020:	f103 0440 	add.w	r4, r3, #64	@ 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 8022024:	683b      	ldr	r3, [r7, #0]
 8022026:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 8022028:	697b      	ldr	r3, [r7, #20]
 802202a:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 802202c:	683b      	ldr	r3, [r7, #0]
 802202e:	889b      	ldrh	r3, [r3, #4]
 8022030:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 8022032:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8022036:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 802203a:	2101      	movs	r1, #1
 802203c:	9105      	str	r1, [sp, #20]
 802203e:	f107 010b 	add.w	r1, r7, #11
 8022042:	9104      	str	r1, [sp, #16]
 8022044:	6979      	ldr	r1, [r7, #20]
 8022046:	9103      	str	r1, [sp, #12]
 8022048:	9302      	str	r3, [sp, #8]
 802204a:	4b47      	ldr	r3, [pc, #284]	@ (8022168 <lfs_file_relocate+0x1a4>)
 802204c:	9301      	str	r3, [sp, #4]
 802204e:	9200      	str	r2, [sp, #0]
 8022050:	4623      	mov	r3, r4
 8022052:	2200      	movs	r2, #0
 8022054:	4601      	mov	r1, r0
 8022056:	6878      	ldr	r0, [r7, #4]
 8022058:	f7fc f9cf 	bl	801e3fa <lfs_dir_getread>
 802205c:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 802205e:	693b      	ldr	r3, [r7, #16]
 8022060:	2b00      	cmp	r3, #0
 8022062:	d01e      	beq.n	80220a2 <lfs_file_relocate+0xde>
                    return err;
 8022064:	693b      	ldr	r3, [r7, #16]
 8022066:	e07a      	b.n	802215e <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 8022068:	683b      	ldr	r3, [r7, #0]
 802206a:	f103 0140 	add.w	r1, r3, #64	@ 0x40
                err = lfs_bd_read(lfs,
 802206e:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 8022070:	683b      	ldr	r3, [r7, #0]
 8022072:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                err = lfs_bd_read(lfs,
 8022074:	697b      	ldr	r3, [r7, #20]
 8022076:	1ad4      	subs	r4, r2, r3
 8022078:	683b      	ldr	r3, [r7, #0]
 802207a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802207c:	2201      	movs	r2, #1
 802207e:	9203      	str	r2, [sp, #12]
 8022080:	f107 020b 	add.w	r2, r7, #11
 8022084:	9202      	str	r2, [sp, #8]
 8022086:	697a      	ldr	r2, [r7, #20]
 8022088:	9201      	str	r2, [sp, #4]
 802208a:	9300      	str	r3, [sp, #0]
 802208c:	4623      	mov	r3, r4
 802208e:	4602      	mov	r2, r0
 8022090:	6878      	ldr	r0, [r7, #4]
 8022092:	f7fb f883 	bl	801d19c <lfs_bd_read>
 8022096:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 8022098:	693b      	ldr	r3, [r7, #16]
 802209a:	2b00      	cmp	r3, #0
 802209c:	d001      	beq.n	80220a2 <lfs_file_relocate+0xde>
                    return err;
 802209e:	693b      	ldr	r3, [r7, #16]
 80220a0:	e05d      	b.n	802215e <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 80220a2:	687b      	ldr	r3, [r7, #4]
 80220a4:	f103 0110 	add.w	r1, r3, #16
 80220a8:	6878      	ldr	r0, [r7, #4]
 80220aa:	68fb      	ldr	r3, [r7, #12]
 80220ac:	2201      	movs	r2, #1
 80220ae:	9203      	str	r2, [sp, #12]
 80220b0:	f107 020b 	add.w	r2, r7, #11
 80220b4:	9202      	str	r2, [sp, #8]
 80220b6:	697a      	ldr	r2, [r7, #20]
 80220b8:	9201      	str	r2, [sp, #4]
 80220ba:	9300      	str	r3, [sp, #0]
 80220bc:	2301      	movs	r3, #1
 80220be:	4602      	mov	r2, r0
 80220c0:	6878      	ldr	r0, [r7, #4]
 80220c2:	f7fb fafd 	bl	801d6c0 <lfs_bd_prog>
 80220c6:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 80220c8:	693b      	ldr	r3, [r7, #16]
 80220ca:	2b00      	cmp	r3, #0
 80220cc:	d005      	beq.n	80220da <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 80220ce:	693b      	ldr	r3, [r7, #16]
 80220d0:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80220d4:	d032      	beq.n	802213c <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 80220d6:	693b      	ldr	r3, [r7, #16]
 80220d8:	e041      	b.n	802215e <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 80220da:	697b      	ldr	r3, [r7, #20]
 80220dc:	3301      	adds	r3, #1
 80220de:	617b      	str	r3, [r7, #20]
 80220e0:	683b      	ldr	r3, [r7, #0]
 80220e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80220e4:	697a      	ldr	r2, [r7, #20]
 80220e6:	429a      	cmp	r2, r3
 80220e8:	d390      	bcc.n	802200c <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 80220ea:	683b      	ldr	r3, [r7, #0]
 80220ec:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80220ee:	687b      	ldr	r3, [r7, #4]
 80220f0:	69d9      	ldr	r1, [r3, #28]
 80220f2:	687b      	ldr	r3, [r7, #4]
 80220f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80220f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80220f8:	461a      	mov	r2, r3
 80220fa:	f015 f8b5 	bl	8037268 <memcpy>
        file->cache.block = lfs->pcache.block;
 80220fe:	687b      	ldr	r3, [r7, #4]
 8022100:	691a      	ldr	r2, [r3, #16]
 8022102:	683b      	ldr	r3, [r7, #0]
 8022104:	641a      	str	r2, [r3, #64]	@ 0x40
        file->cache.off = lfs->pcache.off;
 8022106:	687b      	ldr	r3, [r7, #4]
 8022108:	695a      	ldr	r2, [r3, #20]
 802210a:	683b      	ldr	r3, [r7, #0]
 802210c:	645a      	str	r2, [r3, #68]	@ 0x44
        file->cache.size = lfs->pcache.size;
 802210e:	687b      	ldr	r3, [r7, #4]
 8022110:	699a      	ldr	r2, [r3, #24]
 8022112:	683b      	ldr	r3, [r7, #0]
 8022114:	649a      	str	r2, [r3, #72]	@ 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 8022116:	687b      	ldr	r3, [r7, #4]
 8022118:	3310      	adds	r3, #16
 802211a:	4619      	mov	r1, r3
 802211c:	6878      	ldr	r0, [r7, #4]
 802211e:	f7fb f827 	bl	801d170 <lfs_cache_zero>

        file->block = nblock;
 8022122:	68fa      	ldr	r2, [r7, #12]
 8022124:	683b      	ldr	r3, [r7, #0]
 8022126:	639a      	str	r2, [r3, #56]	@ 0x38
        file->flags |= LFS_F_WRITING;
 8022128:	683b      	ldr	r3, [r7, #0]
 802212a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802212c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8022130:	683b      	ldr	r3, [r7, #0]
 8022132:	631a      	str	r2, [r3, #48]	@ 0x30
        return 0;
 8022134:	2300      	movs	r3, #0
 8022136:	e012      	b.n	802215e <lfs_file_relocate+0x19a>
                goto relocate;
 8022138:	bf00      	nop
 802213a:	e000      	b.n	802213e <lfs_file_relocate+0x17a>
                    goto relocate;
 802213c:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 802213e:	68fb      	ldr	r3, [r7, #12]
 8022140:	4a0a      	ldr	r2, [pc, #40]	@ (802216c <lfs_file_relocate+0x1a8>)
 8022142:	9200      	str	r2, [sp, #0]
 8022144:	f640 42dc 	movw	r2, #3292	@ 0xcdc
 8022148:	4909      	ldr	r1, [pc, #36]	@ (8022170 <lfs_file_relocate+0x1ac>)
 802214a:	480a      	ldr	r0, [pc, #40]	@ (8022174 <lfs_file_relocate+0x1b0>)
 802214c:	f011 f930 	bl	80333b0 <printf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 8022150:	687b      	ldr	r3, [r7, #4]
 8022152:	3310      	adds	r3, #16
 8022154:	4619      	mov	r1, r3
 8022156:	6878      	ldr	r0, [r7, #4]
 8022158:	f7fa fffb 	bl	801d152 <lfs_cache_drop>
    while (true) {
 802215c:	e737      	b.n	8021fce <lfs_file_relocate+0xa>
    }
}
 802215e:	4618      	mov	r0, r3
 8022160:	371c      	adds	r7, #28
 8022162:	46bd      	mov	sp, r7
 8022164:	bd90      	pop	{r4, r7, pc}
 8022166:	bf00      	nop
 8022168:	fff7fc00 	.word	0xfff7fc00
 802216c:	08040a48 	.word	0x08040a48
 8022170:	08040920 	.word	0x08040920
 8022174:	08040ac8 	.word	0x08040ac8

08022178 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 8022178:	b580      	push	{r7, lr}
 802217a:	b084      	sub	sp, #16
 802217c:	af00      	add	r7, sp, #0
 802217e:	6078      	str	r0, [r7, #4]
 8022180:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 8022182:	683b      	ldr	r3, [r7, #0]
 8022184:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8022186:	683b      	ldr	r3, [r7, #0]
 8022188:	63da      	str	r2, [r3, #60]	@ 0x3c
    lfs_alloc_ckpoint(lfs);
 802218a:	6878      	ldr	r0, [r7, #4]
 802218c:	f7fb ff05 	bl	801df9a <lfs_alloc_ckpoint>
    int err = lfs_file_relocate(lfs, file);
 8022190:	6839      	ldr	r1, [r7, #0]
 8022192:	6878      	ldr	r0, [r7, #4]
 8022194:	f7ff ff16 	bl	8021fc4 <lfs_file_relocate>
 8022198:	60f8      	str	r0, [r7, #12]
    if (err) {
 802219a:	68fb      	ldr	r3, [r7, #12]
 802219c:	2b00      	cmp	r3, #0
 802219e:	d001      	beq.n	80221a4 <lfs_file_outline+0x2c>
        return err;
 80221a0:	68fb      	ldr	r3, [r7, #12]
 80221a2:	e006      	b.n	80221b2 <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 80221a4:	683b      	ldr	r3, [r7, #0]
 80221a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80221a8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80221ac:	683b      	ldr	r3, [r7, #0]
 80221ae:	631a      	str	r2, [r3, #48]	@ 0x30
    return 0;
 80221b0:	2300      	movs	r3, #0
}
 80221b2:	4618      	mov	r0, r3
 80221b4:	3710      	adds	r7, #16
 80221b6:	46bd      	mov	sp, r7
 80221b8:	bd80      	pop	{r7, pc}
	...

080221bc <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 80221bc:	b590      	push	{r4, r7, lr}
 80221be:	b09f      	sub	sp, #124	@ 0x7c
 80221c0:	af02      	add	r7, sp, #8
 80221c2:	6078      	str	r0, [r7, #4]
 80221c4:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 80221c6:	683b      	ldr	r3, [r7, #0]
 80221c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80221ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80221ce:	2b00      	cmp	r3, #0
 80221d0:	d011      	beq.n	80221f6 <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 80221d2:	683b      	ldr	r3, [r7, #0]
 80221d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80221d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80221da:	2b00      	cmp	r3, #0
 80221dc:	d105      	bne.n	80221ea <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 80221de:	683b      	ldr	r3, [r7, #0]
 80221e0:	3340      	adds	r3, #64	@ 0x40
 80221e2:	4619      	mov	r1, r3
 80221e4:	6878      	ldr	r0, [r7, #4]
 80221e6:	f7fa ffb4 	bl	801d152 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 80221ea:	683b      	ldr	r3, [r7, #0]
 80221ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80221ee:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80221f2:	683b      	ldr	r3, [r7, #0]
 80221f4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 80221f6:	683b      	ldr	r3, [r7, #0]
 80221f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80221fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80221fe:	2b00      	cmp	r3, #0
 8022200:	f000 80a4 	beq.w	802234c <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 8022204:	683b      	ldr	r3, [r7, #0]
 8022206:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022208:	66fb      	str	r3, [r7, #108]	@ 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 802220a:	683b      	ldr	r3, [r7, #0]
 802220c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802220e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8022212:	2b00      	cmp	r3, #0
 8022214:	d176      	bne.n	8022304 <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 8022216:	f107 030c 	add.w	r3, r7, #12
 802221a:	2254      	movs	r2, #84	@ 0x54
 802221c:	2100      	movs	r1, #0
 802221e:	4618      	mov	r0, r3
 8022220:	f013 fde6 	bl	8035df0 <memset>
                .ctz.head = file->ctz.head,
 8022224:	683b      	ldr	r3, [r7, #0]
 8022226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
            lfs_file_t orig = {
 8022228:	637b      	str	r3, [r7, #52]	@ 0x34
                .ctz.size = file->ctz.size,
 802222a:	683b      	ldr	r3, [r7, #0]
 802222c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            lfs_file_t orig = {
 802222e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8022230:	2301      	movs	r3, #1
 8022232:	63fb      	str	r3, [r7, #60]	@ 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 8022234:	683b      	ldr	r3, [r7, #0]
 8022236:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            lfs_file_t orig = {
 8022238:	643b      	str	r3, [r7, #64]	@ 0x40
 802223a:	687b      	ldr	r3, [r7, #4]
 802223c:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8022240:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8022242:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 8022246:	687b      	ldr	r3, [r7, #4]
 8022248:	4619      	mov	r1, r3
 802224a:	6878      	ldr	r0, [r7, #4]
 802224c:	f7fa ff81 	bl	801d152 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 8022250:	e02b      	b.n	80222aa <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 8022252:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 8022256:	f107 010c 	add.w	r1, r7, #12
 802225a:	2301      	movs	r3, #1
 802225c:	6878      	ldr	r0, [r7, #4]
 802225e:	f000 f921 	bl	80224a4 <lfs_file_flushedread>
 8022262:	6678      	str	r0, [r7, #100]	@ 0x64
                if (res < 0) {
 8022264:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8022266:	2b00      	cmp	r3, #0
 8022268:	da01      	bge.n	802226e <lfs_file_flush+0xb2>
                    return res;
 802226a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802226c:	e06f      	b.n	802234e <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 802226e:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 8022272:	2301      	movs	r3, #1
 8022274:	6839      	ldr	r1, [r7, #0]
 8022276:	6878      	ldr	r0, [r7, #4]
 8022278:	f000 fa1c 	bl	80226b4 <lfs_file_flushedwrite>
 802227c:	6678      	str	r0, [r7, #100]	@ 0x64
                if (res < 0) {
 802227e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8022280:	2b00      	cmp	r3, #0
 8022282:	da01      	bge.n	8022288 <lfs_file_flush+0xcc>
                    return res;
 8022284:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8022286:	e062      	b.n	802234e <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 8022288:	687b      	ldr	r3, [r7, #4]
 802228a:	681b      	ldr	r3, [r3, #0]
 802228c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8022290:	d00b      	beq.n	80222aa <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 8022292:	f107 030c 	add.w	r3, r7, #12
 8022296:	3340      	adds	r3, #64	@ 0x40
 8022298:	4619      	mov	r1, r3
 802229a:	6878      	ldr	r0, [r7, #4]
 802229c:	f7fa ff59 	bl	801d152 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 80222a0:	687b      	ldr	r3, [r7, #4]
 80222a2:	4619      	mov	r1, r3
 80222a4:	6878      	ldr	r0, [r7, #4]
 80222a6:	f7fa ff54 	bl	801d152 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 80222aa:	683b      	ldr	r3, [r7, #0]
 80222ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80222ae:	683b      	ldr	r3, [r7, #0]
 80222b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80222b2:	429a      	cmp	r2, r3
 80222b4:	d3cd      	bcc.n	8022252 <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 80222b6:	683b      	ldr	r3, [r7, #0]
 80222b8:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80222bc:	687a      	ldr	r2, [r7, #4]
 80222be:	2301      	movs	r3, #1
 80222c0:	6878      	ldr	r0, [r7, #4]
 80222c2:	f7fb f94f 	bl	801d564 <lfs_bd_flush>
 80222c6:	66b8      	str	r0, [r7, #104]	@ 0x68
                if (err) {
 80222c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80222ca:	2b00      	cmp	r3, #0
 80222cc:	d026      	beq.n	802231c <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 80222ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80222d0:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80222d4:	d001      	beq.n	80222da <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 80222d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80222d8:	e039      	b.n	802234e <lfs_file_flush+0x192>
                        goto relocate;
 80222da:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 80222dc:	683b      	ldr	r3, [r7, #0]
 80222de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80222e0:	4a1d      	ldr	r2, [pc, #116]	@ (8022358 <lfs_file_flush+0x19c>)
 80222e2:	9200      	str	r2, [sp, #0]
 80222e4:	f640 522b 	movw	r2, #3371	@ 0xd2b
 80222e8:	491c      	ldr	r1, [pc, #112]	@ (802235c <lfs_file_flush+0x1a0>)
 80222ea:	481d      	ldr	r0, [pc, #116]	@ (8022360 <lfs_file_flush+0x1a4>)
 80222ec:	f011 f860 	bl	80333b0 <printf>
                err = lfs_file_relocate(lfs, file);
 80222f0:	6839      	ldr	r1, [r7, #0]
 80222f2:	6878      	ldr	r0, [r7, #4]
 80222f4:	f7ff fe66 	bl	8021fc4 <lfs_file_relocate>
 80222f8:	66b8      	str	r0, [r7, #104]	@ 0x68
                if (err) {
 80222fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80222fc:	2b00      	cmp	r3, #0
 80222fe:	d0da      	beq.n	80222b6 <lfs_file_flush+0xfa>
                    return err;
 8022300:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8022302:	e024      	b.n	802234e <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 8022304:	683b      	ldr	r3, [r7, #0]
 8022306:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8022308:	683b      	ldr	r3, [r7, #0]
 802230a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802230c:	4619      	mov	r1, r3
 802230e:	4610      	mov	r0, r2
 8022310:	f7fa fe59 	bl	801cfc6 <lfs_max>
 8022314:	4602      	mov	r2, r0
 8022316:	683b      	ldr	r3, [r7, #0]
 8022318:	635a      	str	r2, [r3, #52]	@ 0x34
 802231a:	e000      	b.n	802231e <lfs_file_flush+0x162>
                break;
 802231c:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 802231e:	683b      	ldr	r3, [r7, #0]
 8022320:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8022322:	683b      	ldr	r3, [r7, #0]
 8022324:	629a      	str	r2, [r3, #40]	@ 0x28
        file->ctz.size = file->pos;
 8022326:	683b      	ldr	r3, [r7, #0]
 8022328:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 802232a:	683b      	ldr	r3, [r7, #0]
 802232c:	62da      	str	r2, [r3, #44]	@ 0x2c
        file->flags &= ~LFS_F_WRITING;
 802232e:	683b      	ldr	r3, [r7, #0]
 8022330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022332:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8022336:	683b      	ldr	r3, [r7, #0]
 8022338:	631a      	str	r2, [r3, #48]	@ 0x30
        file->flags |= LFS_F_DIRTY;
 802233a:	683b      	ldr	r3, [r7, #0]
 802233c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802233e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8022342:	683b      	ldr	r3, [r7, #0]
 8022344:	631a      	str	r2, [r3, #48]	@ 0x30

        file->pos = pos;
 8022346:	683b      	ldr	r3, [r7, #0]
 8022348:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 802234a:	635a      	str	r2, [r3, #52]	@ 0x34
    }
#endif

    return 0;
 802234c:	2300      	movs	r3, #0
}
 802234e:	4618      	mov	r0, r3
 8022350:	3774      	adds	r7, #116	@ 0x74
 8022352:	46bd      	mov	sp, r7
 8022354:	bd90      	pop	{r4, r7, pc}
 8022356:	bf00      	nop
 8022358:	08040a48 	.word	0x08040a48
 802235c:	08040920 	.word	0x08040920
 8022360:	08040ac8 	.word	0x08040ac8

08022364 <lfs_file_sync_>:

#ifndef LFS_READONLY
static int lfs_file_sync_(lfs_t *lfs, lfs_file_t *file) {
 8022364:	b580      	push	{r7, lr}
 8022366:	b090      	sub	sp, #64	@ 0x40
 8022368:	af00      	add	r7, sp, #0
 802236a:	6078      	str	r0, [r7, #4]
 802236c:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 802236e:	683b      	ldr	r3, [r7, #0]
 8022370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022372:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8022376:	2b00      	cmp	r3, #0
 8022378:	d001      	beq.n	802237e <lfs_file_sync_+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 802237a:	2300      	movs	r3, #0
 802237c:	e08e      	b.n	802249c <lfs_file_sync_+0x138>
    }

    int err = lfs_file_flush(lfs, file);
 802237e:	6839      	ldr	r1, [r7, #0]
 8022380:	6878      	ldr	r0, [r7, #4]
 8022382:	f7ff ff1b 	bl	80221bc <lfs_file_flush>
 8022386:	6338      	str	r0, [r7, #48]	@ 0x30
    if (err) {
 8022388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802238a:	2b00      	cmp	r3, #0
 802238c:	d007      	beq.n	802239e <lfs_file_sync_+0x3a>
        file->flags |= LFS_F_ERRED;
 802238e:	683b      	ldr	r3, [r7, #0]
 8022390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022392:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8022396:	683b      	ldr	r3, [r7, #0]
 8022398:	631a      	str	r2, [r3, #48]	@ 0x30
        return err;
 802239a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802239c:	e07e      	b.n	802249c <lfs_file_sync_+0x138>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 802239e:	683b      	ldr	r3, [r7, #0]
 80223a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80223a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80223a6:	2b00      	cmp	r3, #0
 80223a8:	d077      	beq.n	802249a <lfs_file_sync_+0x136>
            !lfs_pair_isnull(file->m.pair)) {
 80223aa:	683b      	ldr	r3, [r7, #0]
 80223ac:	3308      	adds	r3, #8
 80223ae:	4618      	mov	r0, r3
 80223b0:	f7fb fa7b 	bl	801d8aa <lfs_pair_isnull>
 80223b4:	4603      	mov	r3, r0
 80223b6:	f083 0301 	eor.w	r3, r3, #1
 80223ba:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 80223bc:	2b00      	cmp	r3, #0
 80223be:	d06c      	beq.n	802249a <lfs_file_sync_+0x136>
        // before we commit metadata, we need sync the disk to make sure
        // data writes don't complete after metadata writes
        if (!(file->flags & LFS_F_INLINE)) {
 80223c0:	683b      	ldr	r3, [r7, #0]
 80223c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80223c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80223c8:	2b00      	cmp	r3, #0
 80223ca:	d10d      	bne.n	80223e8 <lfs_file_sync_+0x84>
            err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 80223cc:	687b      	ldr	r3, [r7, #4]
 80223ce:	f103 0110 	add.w	r1, r3, #16
 80223d2:	687a      	ldr	r2, [r7, #4]
 80223d4:	2300      	movs	r3, #0
 80223d6:	6878      	ldr	r0, [r7, #4]
 80223d8:	f7fb f93e 	bl	801d658 <lfs_bd_sync>
 80223dc:	6338      	str	r0, [r7, #48]	@ 0x30
            if (err) {
 80223de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80223e0:	2b00      	cmp	r3, #0
 80223e2:	d001      	beq.n	80223e8 <lfs_file_sync_+0x84>
                return err;
 80223e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80223e6:	e059      	b.n	802249c <lfs_file_sync_+0x138>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 80223e8:	683b      	ldr	r3, [r7, #0]
 80223ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80223ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80223f0:	2b00      	cmp	r3, #0
 80223f2:	d009      	beq.n	8022408 <lfs_file_sync_+0xa4>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 80223f4:	f240 2301 	movw	r3, #513	@ 0x201
 80223f8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            buffer = file->cache.buffer;
 80223fa:	683b      	ldr	r3, [r7, #0]
 80223fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80223fe:	63bb      	str	r3, [r7, #56]	@ 0x38
            size = file->ctz.size;
 8022400:	683b      	ldr	r3, [r7, #0]
 8022402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022404:	637b      	str	r3, [r7, #52]	@ 0x34
 8022406:	e014      	b.n	8022432 <lfs_file_sync_+0xce>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 8022408:	f240 2302 	movw	r3, #514	@ 0x202
 802240c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 802240e:	683a      	ldr	r2, [r7, #0]
 8022410:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8022414:	3228      	adds	r2, #40	@ 0x28
 8022416:	e892 0003 	ldmia.w	r2, {r0, r1}
 802241a:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 802241e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8022422:	4618      	mov	r0, r3
 8022424:	f7fb fcb6 	bl	801dd94 <lfs_ctz_tole32>
            buffer = &ctz;
 8022428:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 802242c:	63bb      	str	r3, [r7, #56]	@ 0x38
            size = sizeof(ctz);
 802242e:	2308      	movs	r3, #8
 8022430:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8022432:	683b      	ldr	r3, [r7, #0]
 8022434:	f103 0108 	add.w	r1, r3, #8
 8022438:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 802243a:	051a      	lsls	r2, r3, #20
 802243c:	683b      	ldr	r3, [r7, #0]
 802243e:	889b      	ldrh	r3, [r3, #4]
 8022440:	029b      	lsls	r3, r3, #10
 8022442:	431a      	orrs	r2, r3
 8022444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8022446:	4313      	orrs	r3, r2
 8022448:	61bb      	str	r3, [r7, #24]
 802244a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802244c:	61fb      	str	r3, [r7, #28]
 802244e:	683b      	ldr	r3, [r7, #0]
 8022450:	889b      	ldrh	r3, [r3, #4]
 8022452:	029a      	lsls	r2, r3, #10
 8022454:	683b      	ldr	r3, [r7, #0]
 8022456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8022458:	689b      	ldr	r3, [r3, #8]
 802245a:	4313      	orrs	r3, r2
 802245c:	f043 5381 	orr.w	r3, r3, #270532608	@ 0x10200000
 8022460:	623b      	str	r3, [r7, #32]
 8022462:	683b      	ldr	r3, [r7, #0]
 8022464:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8022466:	685b      	ldr	r3, [r3, #4]
 8022468:	627b      	str	r3, [r7, #36]	@ 0x24
 802246a:	f107 0218 	add.w	r2, r7, #24
 802246e:	2302      	movs	r3, #2
 8022470:	6878      	ldr	r0, [r7, #4]
 8022472:	f7fe ff07 	bl	8021284 <lfs_dir_commit>
 8022476:	6338      	str	r0, [r7, #48]	@ 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 8022478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802247a:	2b00      	cmp	r3, #0
 802247c:	d007      	beq.n	802248e <lfs_file_sync_+0x12a>
            file->flags |= LFS_F_ERRED;
 802247e:	683b      	ldr	r3, [r7, #0]
 8022480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022482:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8022486:	683b      	ldr	r3, [r7, #0]
 8022488:	631a      	str	r2, [r3, #48]	@ 0x30
            return err;
 802248a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802248c:	e006      	b.n	802249c <lfs_file_sync_+0x138>
        }

        file->flags &= ~LFS_F_DIRTY;
 802248e:	683b      	ldr	r3, [r7, #0]
 8022490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022492:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8022496:	683b      	ldr	r3, [r7, #0]
 8022498:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    return 0;
 802249a:	2300      	movs	r3, #0
}
 802249c:	4618      	mov	r0, r3
 802249e:	3740      	adds	r7, #64	@ 0x40
 80224a0:	46bd      	mov	sp, r7
 80224a2:	bd80      	pop	{r7, pc}

080224a4 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80224a4:	b5b0      	push	{r4, r5, r7, lr}
 80224a6:	b090      	sub	sp, #64	@ 0x40
 80224a8:	af06      	add	r7, sp, #24
 80224aa:	60f8      	str	r0, [r7, #12]
 80224ac:	60b9      	str	r1, [r7, #8]
 80224ae:	607a      	str	r2, [r7, #4]
 80224b0:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 80224b2:	687b      	ldr	r3, [r7, #4]
 80224b4:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_size_t nsize = size;
 80224b6:	683b      	ldr	r3, [r7, #0]
 80224b8:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 80224ba:	68bb      	ldr	r3, [r7, #8]
 80224bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80224be:	68bb      	ldr	r3, [r7, #8]
 80224c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80224c2:	429a      	cmp	r2, r3
 80224c4:	d301      	bcc.n	80224ca <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 80224c6:	2300      	movs	r3, #0
 80224c8:	e0b7      	b.n	802263a <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 80224ca:	68bb      	ldr	r3, [r7, #8]
 80224cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80224ce:	68bb      	ldr	r3, [r7, #8]
 80224d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80224d2:	1ad3      	subs	r3, r2, r3
 80224d4:	4619      	mov	r1, r3
 80224d6:	6838      	ldr	r0, [r7, #0]
 80224d8:	f7fa fd85 	bl	801cfe6 <lfs_min>
 80224dc:	6038      	str	r0, [r7, #0]
    nsize = size;
 80224de:	683b      	ldr	r3, [r7, #0]
 80224e0:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 80224e2:	e0a5      	b.n	8022630 <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 80224e4:	68bb      	ldr	r3, [r7, #8]
 80224e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80224e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80224ec:	2b00      	cmp	r3, #0
 80224ee:	d006      	beq.n	80224fe <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 80224f0:	68bb      	ldr	r3, [r7, #8]
 80224f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80224f4:	68fb      	ldr	r3, [r7, #12]
 80224f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80224f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if (!(file->flags & LFS_F_READING) ||
 80224fa:	429a      	cmp	r2, r3
 80224fc:	d130      	bne.n	8022560 <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 80224fe:	68bb      	ldr	r3, [r7, #8]
 8022500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022502:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8022506:	2b00      	cmp	r3, #0
 8022508:	d11c      	bne.n	8022544 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 802250a:	68bb      	ldr	r3, [r7, #8]
 802250c:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8022510:	68bb      	ldr	r3, [r7, #8]
 8022512:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8022514:	68bb      	ldr	r3, [r7, #8]
 8022516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022518:	68ba      	ldr	r2, [r7, #8]
 802251a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 802251c:	68b9      	ldr	r1, [r7, #8]
 802251e:	3138      	adds	r1, #56	@ 0x38
 8022520:	68b8      	ldr	r0, [r7, #8]
 8022522:	303c      	adds	r0, #60	@ 0x3c
 8022524:	9003      	str	r0, [sp, #12]
 8022526:	9102      	str	r1, [sp, #8]
 8022528:	9201      	str	r2, [sp, #4]
 802252a:	9300      	str	r3, [sp, #0]
 802252c:	462b      	mov	r3, r5
 802252e:	4622      	mov	r2, r4
 8022530:	2100      	movs	r1, #0
 8022532:	68f8      	ldr	r0, [r7, #12]
 8022534:	f7ff f950 	bl	80217d8 <lfs_ctz_find>
 8022538:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 802253a:	69fb      	ldr	r3, [r7, #28]
 802253c:	2b00      	cmp	r3, #0
 802253e:	d009      	beq.n	8022554 <lfs_file_flushedread+0xb0>
                    return err;
 8022540:	69fb      	ldr	r3, [r7, #28]
 8022542:	e07a      	b.n	802263a <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8022544:	68bb      	ldr	r3, [r7, #8]
 8022546:	f06f 0201 	mvn.w	r2, #1
 802254a:	639a      	str	r2, [r3, #56]	@ 0x38
                file->off = file->pos;
 802254c:	68bb      	ldr	r3, [r7, #8]
 802254e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8022550:	68bb      	ldr	r3, [r7, #8]
 8022552:	63da      	str	r2, [r3, #60]	@ 0x3c
            }

            file->flags |= LFS_F_READING;
 8022554:	68bb      	ldr	r3, [r7, #8]
 8022556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022558:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 802255c:	68bb      	ldr	r3, [r7, #8]
 802255e:	631a      	str	r2, [r3, #48]	@ 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8022560:	68fb      	ldr	r3, [r7, #12]
 8022562:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022564:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8022566:	68bb      	ldr	r3, [r7, #8]
 8022568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802256a:	1ad3      	subs	r3, r2, r3
 802256c:	4619      	mov	r1, r3
 802256e:	6a38      	ldr	r0, [r7, #32]
 8022570:	f7fa fd39 	bl	801cfe6 <lfs_min>
 8022574:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 8022576:	68bb      	ldr	r3, [r7, #8]
 8022578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802257a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 802257e:	2b00      	cmp	r3, #0
 8022580:	d026      	beq.n	80225d0 <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 8022582:	68bb      	ldr	r3, [r7, #8]
 8022584:	f103 0408 	add.w	r4, r3, #8
 8022588:	68bb      	ldr	r3, [r7, #8]
 802258a:	f103 0540 	add.w	r5, r3, #64	@ 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 802258e:	68fb      	ldr	r3, [r7, #12]
 8022590:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022592:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8022594:	68bb      	ldr	r3, [r7, #8]
 8022596:	889b      	ldrh	r3, [r3, #4]
 8022598:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 802259a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 802259e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80225a2:	68b9      	ldr	r1, [r7, #8]
 80225a4:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 80225a6:	69b8      	ldr	r0, [r7, #24]
 80225a8:	9005      	str	r0, [sp, #20]
 80225aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80225ac:	9004      	str	r0, [sp, #16]
 80225ae:	9103      	str	r1, [sp, #12]
 80225b0:	9302      	str	r3, [sp, #8]
 80225b2:	4b24      	ldr	r3, [pc, #144]	@ (8022644 <lfs_file_flushedread+0x1a0>)
 80225b4:	9301      	str	r3, [sp, #4]
 80225b6:	9200      	str	r2, [sp, #0]
 80225b8:	462b      	mov	r3, r5
 80225ba:	2200      	movs	r2, #0
 80225bc:	4621      	mov	r1, r4
 80225be:	68f8      	ldr	r0, [r7, #12]
 80225c0:	f7fb ff1b 	bl	801e3fa <lfs_dir_getread>
 80225c4:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 80225c6:	693b      	ldr	r3, [r7, #16]
 80225c8:	2b00      	cmp	r3, #0
 80225ca:	d01d      	beq.n	8022608 <lfs_file_flushedread+0x164>
                return err;
 80225cc:	693b      	ldr	r3, [r7, #16]
 80225ce:	e034      	b.n	802263a <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 80225d0:	68bb      	ldr	r3, [r7, #8]
 80225d2:	f103 0040 	add.w	r0, r3, #64	@ 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 80225d6:	68fb      	ldr	r3, [r7, #12]
 80225d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80225da:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
            int err = lfs_bd_read(lfs,
 80225dc:	68bb      	ldr	r3, [r7, #8]
 80225de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80225e0:	68ba      	ldr	r2, [r7, #8]
 80225e2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80225e4:	69b9      	ldr	r1, [r7, #24]
 80225e6:	9103      	str	r1, [sp, #12]
 80225e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80225ea:	9102      	str	r1, [sp, #8]
 80225ec:	9201      	str	r2, [sp, #4]
 80225ee:	9300      	str	r3, [sp, #0]
 80225f0:	4623      	mov	r3, r4
 80225f2:	4602      	mov	r2, r0
 80225f4:	2100      	movs	r1, #0
 80225f6:	68f8      	ldr	r0, [r7, #12]
 80225f8:	f7fa fdd0 	bl	801d19c <lfs_bd_read>
 80225fc:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 80225fe:	697b      	ldr	r3, [r7, #20]
 8022600:	2b00      	cmp	r3, #0
 8022602:	d001      	beq.n	8022608 <lfs_file_flushedread+0x164>
                return err;
 8022604:	697b      	ldr	r3, [r7, #20]
 8022606:	e018      	b.n	802263a <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 8022608:	68bb      	ldr	r3, [r7, #8]
 802260a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 802260c:	69bb      	ldr	r3, [r7, #24]
 802260e:	441a      	add	r2, r3
 8022610:	68bb      	ldr	r3, [r7, #8]
 8022612:	635a      	str	r2, [r3, #52]	@ 0x34
        file->off += diff;
 8022614:	68bb      	ldr	r3, [r7, #8]
 8022616:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8022618:	69bb      	ldr	r3, [r7, #24]
 802261a:	441a      	add	r2, r3
 802261c:	68bb      	ldr	r3, [r7, #8]
 802261e:	63da      	str	r2, [r3, #60]	@ 0x3c
        data += diff;
 8022620:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8022622:	69bb      	ldr	r3, [r7, #24]
 8022624:	4413      	add	r3, r2
 8022626:	627b      	str	r3, [r7, #36]	@ 0x24
        nsize -= diff;
 8022628:	6a3a      	ldr	r2, [r7, #32]
 802262a:	69bb      	ldr	r3, [r7, #24]
 802262c:	1ad3      	subs	r3, r2, r3
 802262e:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 8022630:	6a3b      	ldr	r3, [r7, #32]
 8022632:	2b00      	cmp	r3, #0
 8022634:	f47f af56 	bne.w	80224e4 <lfs_file_flushedread+0x40>
    }

    return size;
 8022638:	683b      	ldr	r3, [r7, #0]
}
 802263a:	4618      	mov	r0, r3
 802263c:	3728      	adds	r7, #40	@ 0x28
 802263e:	46bd      	mov	sp, r7
 8022640:	bdb0      	pop	{r4, r5, r7, pc}
 8022642:	bf00      	nop
 8022644:	fff7fc00 	.word	0xfff7fc00

08022648 <lfs_file_read_>:

static lfs_ssize_t lfs_file_read_(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8022648:	b580      	push	{r7, lr}
 802264a:	b086      	sub	sp, #24
 802264c:	af00      	add	r7, sp, #0
 802264e:	60f8      	str	r0, [r7, #12]
 8022650:	60b9      	str	r1, [r7, #8]
 8022652:	607a      	str	r2, [r7, #4]
 8022654:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 8022656:	68bb      	ldr	r3, [r7, #8]
 8022658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802265a:	f003 0301 	and.w	r3, r3, #1
 802265e:	2b00      	cmp	r3, #0
 8022660:	d106      	bne.n	8022670 <lfs_file_read_+0x28>
 8022662:	4b11      	ldr	r3, [pc, #68]	@ (80226a8 <lfs_file_read_+0x60>)
 8022664:	4a11      	ldr	r2, [pc, #68]	@ (80226ac <lfs_file_read_+0x64>)
 8022666:	f640 51bf 	movw	r1, #3519	@ 0xdbf
 802266a:	4811      	ldr	r0, [pc, #68]	@ (80226b0 <lfs_file_read_+0x68>)
 802266c:	f010 fe6c 	bl	8033348 <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8022670:	68bb      	ldr	r3, [r7, #8]
 8022672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022674:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8022678:	2b00      	cmp	r3, #0
 802267a:	d009      	beq.n	8022690 <lfs_file_read_+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 802267c:	68b9      	ldr	r1, [r7, #8]
 802267e:	68f8      	ldr	r0, [r7, #12]
 8022680:	f7ff fd9c 	bl	80221bc <lfs_file_flush>
 8022684:	6178      	str	r0, [r7, #20]
        if (err) {
 8022686:	697b      	ldr	r3, [r7, #20]
 8022688:	2b00      	cmp	r3, #0
 802268a:	d001      	beq.n	8022690 <lfs_file_read_+0x48>
            return err;
 802268c:	697b      	ldr	r3, [r7, #20]
 802268e:	e006      	b.n	802269e <lfs_file_read_+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 8022690:	683b      	ldr	r3, [r7, #0]
 8022692:	687a      	ldr	r2, [r7, #4]
 8022694:	68b9      	ldr	r1, [r7, #8]
 8022696:	68f8      	ldr	r0, [r7, #12]
 8022698:	f7ff ff04 	bl	80224a4 <lfs_file_flushedread>
 802269c:	4603      	mov	r3, r0
}
 802269e:	4618      	mov	r0, r3
 80226a0:	3718      	adds	r7, #24
 80226a2:	46bd      	mov	sp, r7
 80226a4:	bd80      	pop	{r7, pc}
 80226a6:	bf00      	nop
 80226a8:	08040c70 	.word	0x08040c70
 80226ac:	08044404 	.word	0x08044404
 80226b0:	08040920 	.word	0x08040920

080226b4 <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 80226b4:	b5b0      	push	{r4, r5, r7, lr}
 80226b6:	b090      	sub	sp, #64	@ 0x40
 80226b8:	af04      	add	r7, sp, #16
 80226ba:	60f8      	str	r0, [r7, #12]
 80226bc:	60b9      	str	r1, [r7, #8]
 80226be:	607a      	str	r2, [r7, #4]
 80226c0:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 80226c2:	687b      	ldr	r3, [r7, #4]
 80226c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lfs_size_t nsize = size;
 80226c6:	683b      	ldr	r3, [r7, #0]
 80226c8:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((file->flags & LFS_F_INLINE) &&
 80226ca:	68bb      	ldr	r3, [r7, #8]
 80226cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80226ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80226d2:	2b00      	cmp	r3, #0
 80226d4:	f000 80f4 	beq.w	80228c0 <lfs_file_flushedwrite+0x20c>
            lfs_max(file->pos+nsize, file->ctz.size) > lfs->inline_max) {
 80226d8:	68bb      	ldr	r3, [r7, #8]
 80226da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80226dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80226de:	441a      	add	r2, r3
 80226e0:	68bb      	ldr	r3, [r7, #8]
 80226e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80226e4:	4619      	mov	r1, r3
 80226e6:	4610      	mov	r0, r2
 80226e8:	f7fa fc6d 	bl	801cfc6 <lfs_max>
 80226ec:	4602      	mov	r2, r0
 80226ee:	68fb      	ldr	r3, [r7, #12]
 80226f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
    if ((file->flags & LFS_F_INLINE) &&
 80226f2:	429a      	cmp	r2, r3
 80226f4:	f240 80e4 	bls.w	80228c0 <lfs_file_flushedwrite+0x20c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 80226f8:	68b9      	ldr	r1, [r7, #8]
 80226fa:	68f8      	ldr	r0, [r7, #12]
 80226fc:	f7ff fd3c 	bl	8022178 <lfs_file_outline>
 8022700:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 8022702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022704:	2b00      	cmp	r3, #0
 8022706:	f000 80db 	beq.w	80228c0 <lfs_file_flushedwrite+0x20c>
            file->flags |= LFS_F_ERRED;
 802270a:	68bb      	ldr	r3, [r7, #8]
 802270c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802270e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8022712:	68bb      	ldr	r3, [r7, #8]
 8022714:	631a      	str	r2, [r3, #48]	@ 0x30
            return err;
 8022716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022718:	e0d7      	b.n	80228ca <lfs_file_flushedwrite+0x216>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 802271a:	68bb      	ldr	r3, [r7, #8]
 802271c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802271e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8022722:	2b00      	cmp	r3, #0
 8022724:	d006      	beq.n	8022734 <lfs_file_flushedwrite+0x80>
                file->off == lfs->cfg->block_size) {
 8022726:	68bb      	ldr	r3, [r7, #8]
 8022728:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 802272a:	68fb      	ldr	r3, [r7, #12]
 802272c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802272e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if (!(file->flags & LFS_F_WRITING) ||
 8022730:	429a      	cmp	r2, r3
 8022732:	d16d      	bne.n	8022810 <lfs_file_flushedwrite+0x15c>
            if (!(file->flags & LFS_F_INLINE)) {
 8022734:	68bb      	ldr	r3, [r7, #8]
 8022736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022738:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 802273c:	2b00      	cmp	r3, #0
 802273e:	d159      	bne.n	80227f4 <lfs_file_flushedwrite+0x140>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8022740:	68bb      	ldr	r3, [r7, #8]
 8022742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022744:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8022748:	2b00      	cmp	r3, #0
 802274a:	d12f      	bne.n	80227ac <lfs_file_flushedwrite+0xf8>
 802274c:	68bb      	ldr	r3, [r7, #8]
 802274e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022750:	2b00      	cmp	r3, #0
 8022752:	d02b      	beq.n	80227ac <lfs_file_flushedwrite+0xf8>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8022754:	68bb      	ldr	r3, [r7, #8]
 8022756:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 802275a:	68bb      	ldr	r3, [r7, #8]
 802275c:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 802275e:	68bb      	ldr	r3, [r7, #8]
 8022760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8022762:	68ba      	ldr	r2, [r7, #8]
 8022764:	6b52      	ldr	r2, [r2, #52]	@ 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8022766:	3a01      	subs	r2, #1
 8022768:	68b9      	ldr	r1, [r7, #8]
 802276a:	3138      	adds	r1, #56	@ 0x38
                            file->pos-1, &file->block, &(lfs_off_t){0});
 802276c:	2000      	movs	r0, #0
 802276e:	6138      	str	r0, [r7, #16]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8022770:	f107 0010 	add.w	r0, r7, #16
 8022774:	9003      	str	r0, [sp, #12]
 8022776:	9102      	str	r1, [sp, #8]
 8022778:	9201      	str	r2, [sp, #4]
 802277a:	9300      	str	r3, [sp, #0]
 802277c:	462b      	mov	r3, r5
 802277e:	4622      	mov	r2, r4
 8022780:	2100      	movs	r1, #0
 8022782:	68f8      	ldr	r0, [r7, #12]
 8022784:	f7ff f828 	bl	80217d8 <lfs_ctz_find>
 8022788:	6238      	str	r0, [r7, #32]
                    if (err) {
 802278a:	6a3b      	ldr	r3, [r7, #32]
 802278c:	2b00      	cmp	r3, #0
 802278e:	d007      	beq.n	80227a0 <lfs_file_flushedwrite+0xec>
                        file->flags |= LFS_F_ERRED;
 8022790:	68bb      	ldr	r3, [r7, #8]
 8022792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022794:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8022798:	68bb      	ldr	r3, [r7, #8]
 802279a:	631a      	str	r2, [r3, #48]	@ 0x30
                        return err;
 802279c:	6a3b      	ldr	r3, [r7, #32]
 802279e:	e094      	b.n	80228ca <lfs_file_flushedwrite+0x216>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 80227a0:	68bb      	ldr	r3, [r7, #8]
 80227a2:	3340      	adds	r3, #64	@ 0x40
 80227a4:	4619      	mov	r1, r3
 80227a6:	68f8      	ldr	r0, [r7, #12]
 80227a8:	f7fa fce2 	bl	801d170 <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ckpoint(lfs);
 80227ac:	68f8      	ldr	r0, [r7, #12]
 80227ae:	f7fb fbf4 	bl	801df9a <lfs_alloc_ckpoint>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 80227b2:	68bb      	ldr	r3, [r7, #8]
 80227b4:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 80227b8:	68fc      	ldr	r4, [r7, #12]
 80227ba:	68bb      	ldr	r3, [r7, #8]
 80227bc:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
 80227be:	68bb      	ldr	r3, [r7, #8]
 80227c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80227c2:	68ba      	ldr	r2, [r7, #8]
 80227c4:	3238      	adds	r2, #56	@ 0x38
 80227c6:	68b9      	ldr	r1, [r7, #8]
 80227c8:	313c      	adds	r1, #60	@ 0x3c
 80227ca:	9102      	str	r1, [sp, #8]
 80227cc:	9201      	str	r2, [sp, #4]
 80227ce:	9300      	str	r3, [sp, #0]
 80227d0:	462b      	mov	r3, r5
 80227d2:	4622      	mov	r2, r4
 80227d4:	4601      	mov	r1, r0
 80227d6:	68f8      	ldr	r0, [r7, #12]
 80227d8:	f7ff f86a 	bl	80218b0 <lfs_ctz_extend>
 80227dc:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 80227de:	69fb      	ldr	r3, [r7, #28]
 80227e0:	2b00      	cmp	r3, #0
 80227e2:	d00f      	beq.n	8022804 <lfs_file_flushedwrite+0x150>
                    file->flags |= LFS_F_ERRED;
 80227e4:	68bb      	ldr	r3, [r7, #8]
 80227e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80227e8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80227ec:	68bb      	ldr	r3, [r7, #8]
 80227ee:	631a      	str	r2, [r3, #48]	@ 0x30
                    return err;
 80227f0:	69fb      	ldr	r3, [r7, #28]
 80227f2:	e06a      	b.n	80228ca <lfs_file_flushedwrite+0x216>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 80227f4:	68bb      	ldr	r3, [r7, #8]
 80227f6:	f06f 0201 	mvn.w	r2, #1
 80227fa:	639a      	str	r2, [r3, #56]	@ 0x38
                file->off = file->pos;
 80227fc:	68bb      	ldr	r3, [r7, #8]
 80227fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8022800:	68bb      	ldr	r3, [r7, #8]
 8022802:	63da      	str	r2, [r3, #60]	@ 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8022804:	68bb      	ldr	r3, [r7, #8]
 8022806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022808:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 802280c:	68bb      	ldr	r3, [r7, #8]
 802280e:	631a      	str	r2, [r3, #48]	@ 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8022810:	68fb      	ldr	r3, [r7, #12]
 8022812:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022814:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8022816:	68bb      	ldr	r3, [r7, #8]
 8022818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802281a:	1ad3      	subs	r3, r2, r3
 802281c:	4619      	mov	r1, r3
 802281e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8022820:	f7fa fbe1 	bl	801cfe6 <lfs_min>
 8022824:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8022826:	68bb      	ldr	r3, [r7, #8]
 8022828:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 802282c:	68fc      	ldr	r4, [r7, #12]
 802282e:	68bb      	ldr	r3, [r7, #8]
 8022830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022832:	68ba      	ldr	r2, [r7, #8]
 8022834:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8022836:	69b9      	ldr	r1, [r7, #24]
 8022838:	9103      	str	r1, [sp, #12]
 802283a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802283c:	9102      	str	r1, [sp, #8]
 802283e:	9201      	str	r2, [sp, #4]
 8022840:	9300      	str	r3, [sp, #0]
 8022842:	2301      	movs	r3, #1
 8022844:	4622      	mov	r2, r4
 8022846:	4601      	mov	r1, r0
 8022848:	68f8      	ldr	r0, [r7, #12]
 802284a:	f7fa ff39 	bl	801d6c0 <lfs_bd_prog>
 802284e:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8022850:	697b      	ldr	r3, [r7, #20]
 8022852:	2b00      	cmp	r3, #0
 8022854:	d01c      	beq.n	8022890 <lfs_file_flushedwrite+0x1dc>
                if (err == LFS_ERR_CORRUPT) {
 8022856:	697b      	ldr	r3, [r7, #20]
 8022858:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 802285c:	d007      	beq.n	802286e <lfs_file_flushedwrite+0x1ba>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 802285e:	68bb      	ldr	r3, [r7, #8]
 8022860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022862:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8022866:	68bb      	ldr	r3, [r7, #8]
 8022868:	631a      	str	r2, [r3, #48]	@ 0x30
                return err;
 802286a:	697b      	ldr	r3, [r7, #20]
 802286c:	e02d      	b.n	80228ca <lfs_file_flushedwrite+0x216>
                    goto relocate;
 802286e:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8022870:	68b9      	ldr	r1, [r7, #8]
 8022872:	68f8      	ldr	r0, [r7, #12]
 8022874:	f7ff fba6 	bl	8021fc4 <lfs_file_relocate>
 8022878:	6178      	str	r0, [r7, #20]
            if (err) {
 802287a:	697b      	ldr	r3, [r7, #20]
 802287c:	2b00      	cmp	r3, #0
 802287e:	d0d2      	beq.n	8022826 <lfs_file_flushedwrite+0x172>
                file->flags |= LFS_F_ERRED;
 8022880:	68bb      	ldr	r3, [r7, #8]
 8022882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022884:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8022888:	68bb      	ldr	r3, [r7, #8]
 802288a:	631a      	str	r2, [r3, #48]	@ 0x30
                return err;
 802288c:	697b      	ldr	r3, [r7, #20]
 802288e:	e01c      	b.n	80228ca <lfs_file_flushedwrite+0x216>
            break;
 8022890:	bf00      	nop
            }
        }

        file->pos += diff;
 8022892:	68bb      	ldr	r3, [r7, #8]
 8022894:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8022896:	69bb      	ldr	r3, [r7, #24]
 8022898:	441a      	add	r2, r3
 802289a:	68bb      	ldr	r3, [r7, #8]
 802289c:	635a      	str	r2, [r3, #52]	@ 0x34
        file->off += diff;
 802289e:	68bb      	ldr	r3, [r7, #8]
 80228a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80228a2:	69bb      	ldr	r3, [r7, #24]
 80228a4:	441a      	add	r2, r3
 80228a6:	68bb      	ldr	r3, [r7, #8]
 80228a8:	63da      	str	r2, [r3, #60]	@ 0x3c
        data += diff;
 80228aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80228ac:	69bb      	ldr	r3, [r7, #24]
 80228ae:	4413      	add	r3, r2
 80228b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        nsize -= diff;
 80228b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80228b4:	69bb      	ldr	r3, [r7, #24]
 80228b6:	1ad3      	subs	r3, r2, r3
 80228b8:	62bb      	str	r3, [r7, #40]	@ 0x28

        lfs_alloc_ckpoint(lfs);
 80228ba:	68f8      	ldr	r0, [r7, #12]
 80228bc:	f7fb fb6d 	bl	801df9a <lfs_alloc_ckpoint>
    while (nsize > 0) {
 80228c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80228c2:	2b00      	cmp	r3, #0
 80228c4:	f47f af29 	bne.w	802271a <lfs_file_flushedwrite+0x66>
    }

    return size;
 80228c8:	683b      	ldr	r3, [r7, #0]
}
 80228ca:	4618      	mov	r0, r3
 80228cc:	3730      	adds	r7, #48	@ 0x30
 80228ce:	46bd      	mov	sp, r7
 80228d0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080228d4 <lfs_file_write_>:

static lfs_ssize_t lfs_file_write_(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 80228d4:	b580      	push	{r7, lr}
 80228d6:	b08a      	sub	sp, #40	@ 0x28
 80228d8:	af00      	add	r7, sp, #0
 80228da:	60f8      	str	r0, [r7, #12]
 80228dc:	60b9      	str	r1, [r7, #8]
 80228de:	607a      	str	r2, [r7, #4]
 80228e0:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 80228e2:	68bb      	ldr	r3, [r7, #8]
 80228e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80228e6:	f003 0302 	and.w	r3, r3, #2
 80228ea:	2b00      	cmp	r3, #0
 80228ec:	d106      	bne.n	80228fc <lfs_file_write_+0x28>
 80228ee:	4b38      	ldr	r3, [pc, #224]	@ (80229d0 <lfs_file_write_+0xfc>)
 80228f0:	4a38      	ldr	r2, [pc, #224]	@ (80229d4 <lfs_file_write_+0x100>)
 80228f2:	f640 6126 	movw	r1, #3622	@ 0xe26
 80228f6:	4838      	ldr	r0, [pc, #224]	@ (80229d8 <lfs_file_write_+0x104>)
 80228f8:	f010 fd26 	bl	8033348 <__assert_func>

    if (file->flags & LFS_F_READING) {
 80228fc:	68bb      	ldr	r3, [r7, #8]
 80228fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022900:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8022904:	2b00      	cmp	r3, #0
 8022906:	d009      	beq.n	802291c <lfs_file_write_+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8022908:	68b9      	ldr	r1, [r7, #8]
 802290a:	68f8      	ldr	r0, [r7, #12]
 802290c:	f7ff fc56 	bl	80221bc <lfs_file_flush>
 8022910:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 8022912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022914:	2b00      	cmp	r3, #0
 8022916:	d001      	beq.n	802291c <lfs_file_write_+0x48>
            return err;
 8022918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802291a:	e055      	b.n	80229c8 <lfs_file_write_+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 802291c:	68bb      	ldr	r3, [r7, #8]
 802291e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022920:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8022924:	2b00      	cmp	r3, #0
 8022926:	d009      	beq.n	802293c <lfs_file_write_+0x68>
 8022928:	68bb      	ldr	r3, [r7, #8]
 802292a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 802292c:	68bb      	ldr	r3, [r7, #8]
 802292e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022930:	429a      	cmp	r2, r3
 8022932:	d203      	bcs.n	802293c <lfs_file_write_+0x68>
        file->pos = file->ctz.size;
 8022934:	68bb      	ldr	r3, [r7, #8]
 8022936:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8022938:	68bb      	ldr	r3, [r7, #8]
 802293a:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    if (file->pos + size > lfs->file_max) {
 802293c:	68bb      	ldr	r3, [r7, #8]
 802293e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8022940:	683b      	ldr	r3, [r7, #0]
 8022942:	441a      	add	r2, r3
 8022944:	68fb      	ldr	r3, [r7, #12]
 8022946:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8022948:	429a      	cmp	r2, r3
 802294a:	d902      	bls.n	8022952 <lfs_file_write_+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 802294c:	f06f 031a 	mvn.w	r3, #26
 8022950:	e03a      	b.n	80229c8 <lfs_file_write_+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8022952:	68bb      	ldr	r3, [r7, #8]
 8022954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 802295a:	2b00      	cmp	r3, #0
 802295c:	d121      	bne.n	80229a2 <lfs_file_write_+0xce>
 802295e:	68bb      	ldr	r3, [r7, #8]
 8022960:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8022962:	68bb      	ldr	r3, [r7, #8]
 8022964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022966:	429a      	cmp	r2, r3
 8022968:	d91b      	bls.n	80229a2 <lfs_file_write_+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 802296a:	68bb      	ldr	r3, [r7, #8]
 802296c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802296e:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 8022970:	68bb      	ldr	r3, [r7, #8]
 8022972:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8022974:	68bb      	ldr	r3, [r7, #8]
 8022976:	635a      	str	r2, [r3, #52]	@ 0x34

        while (file->pos < pos) {
 8022978:	e00e      	b.n	8022998 <lfs_file_write_+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 802297a:	2300      	movs	r3, #0
 802297c:	75fb      	strb	r3, [r7, #23]
 802297e:	f107 0217 	add.w	r2, r7, #23
 8022982:	2301      	movs	r3, #1
 8022984:	68b9      	ldr	r1, [r7, #8]
 8022986:	68f8      	ldr	r0, [r7, #12]
 8022988:	f7ff fe94 	bl	80226b4 <lfs_file_flushedwrite>
 802298c:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 802298e:	69fb      	ldr	r3, [r7, #28]
 8022990:	2b00      	cmp	r3, #0
 8022992:	da01      	bge.n	8022998 <lfs_file_write_+0xc4>
                return res;
 8022994:	69fb      	ldr	r3, [r7, #28]
 8022996:	e017      	b.n	80229c8 <lfs_file_write_+0xf4>
        while (file->pos < pos) {
 8022998:	68bb      	ldr	r3, [r7, #8]
 802299a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802299c:	6a3a      	ldr	r2, [r7, #32]
 802299e:	429a      	cmp	r2, r3
 80229a0:	d8eb      	bhi.n	802297a <lfs_file_write_+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 80229a2:	683b      	ldr	r3, [r7, #0]
 80229a4:	687a      	ldr	r2, [r7, #4]
 80229a6:	68b9      	ldr	r1, [r7, #8]
 80229a8:	68f8      	ldr	r0, [r7, #12]
 80229aa:	f7ff fe83 	bl	80226b4 <lfs_file_flushedwrite>
 80229ae:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 80229b0:	69bb      	ldr	r3, [r7, #24]
 80229b2:	2b00      	cmp	r3, #0
 80229b4:	da01      	bge.n	80229ba <lfs_file_write_+0xe6>
        return nsize;
 80229b6:	69bb      	ldr	r3, [r7, #24]
 80229b8:	e006      	b.n	80229c8 <lfs_file_write_+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 80229ba:	68bb      	ldr	r3, [r7, #8]
 80229bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80229be:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80229c2:	68bb      	ldr	r3, [r7, #8]
 80229c4:	631a      	str	r2, [r3, #48]	@ 0x30
    return nsize;
 80229c6:	69bb      	ldr	r3, [r7, #24]
}
 80229c8:	4618      	mov	r0, r3
 80229ca:	3728      	adds	r7, #40	@ 0x28
 80229cc:	46bd      	mov	sp, r7
 80229ce:	bd80      	pop	{r7, pc}
 80229d0:	08040ca0 	.word	0x08040ca0
 80229d4:	08044414 	.word	0x08044414
 80229d8:	08040920 	.word	0x08040920

080229dc <lfs_file_seek_>:
#endif

static lfs_soff_t lfs_file_seek_(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 80229dc:	b580      	push	{r7, lr}
 80229de:	b08c      	sub	sp, #48	@ 0x30
 80229e0:	af00      	add	r7, sp, #0
 80229e2:	60f8      	str	r0, [r7, #12]
 80229e4:	60b9      	str	r1, [r7, #8]
 80229e6:	607a      	str	r2, [r7, #4]
 80229e8:	603b      	str	r3, [r7, #0]
    // find new pos
    lfs_off_t npos = file->pos;
 80229ea:	68bb      	ldr	r3, [r7, #8]
 80229ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80229ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (whence == LFS_SEEK_SET) {
 80229f0:	683b      	ldr	r3, [r7, #0]
 80229f2:	2b00      	cmp	r3, #0
 80229f4:	d102      	bne.n	80229fc <lfs_file_seek_+0x20>
        npos = off;
 80229f6:	687b      	ldr	r3, [r7, #4]
 80229f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80229fa:	e025      	b.n	8022a48 <lfs_file_seek_+0x6c>
    } else if (whence == LFS_SEEK_CUR) {
 80229fc:	683b      	ldr	r3, [r7, #0]
 80229fe:	2b01      	cmp	r3, #1
 8022a00:	d10f      	bne.n	8022a22 <lfs_file_seek_+0x46>
        if ((lfs_soff_t)file->pos + off < 0) {
 8022a02:	68bb      	ldr	r3, [r7, #8]
 8022a04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022a06:	461a      	mov	r2, r3
 8022a08:	687b      	ldr	r3, [r7, #4]
 8022a0a:	4413      	add	r3, r2
 8022a0c:	2b00      	cmp	r3, #0
 8022a0e:	da02      	bge.n	8022a16 <lfs_file_seek_+0x3a>
            return LFS_ERR_INVAL;
 8022a10:	f06f 0315 	mvn.w	r3, #21
 8022a14:	e067      	b.n	8022ae6 <lfs_file_seek_+0x10a>
        } else {
            npos = file->pos + off;
 8022a16:	68bb      	ldr	r3, [r7, #8]
 8022a18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8022a1a:	687b      	ldr	r3, [r7, #4]
 8022a1c:	4413      	add	r3, r2
 8022a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8022a20:	e012      	b.n	8022a48 <lfs_file_seek_+0x6c>
        }
    } else if (whence == LFS_SEEK_END) {
 8022a22:	683b      	ldr	r3, [r7, #0]
 8022a24:	2b02      	cmp	r3, #2
 8022a26:	d10f      	bne.n	8022a48 <lfs_file_seek_+0x6c>
        lfs_soff_t res = lfs_file_size_(lfs, file) + off;
 8022a28:	68b9      	ldr	r1, [r7, #8]
 8022a2a:	68f8      	ldr	r0, [r7, #12]
 8022a2c:	f000 f86c 	bl	8022b08 <lfs_file_size_>
 8022a30:	4602      	mov	r2, r0
 8022a32:	687b      	ldr	r3, [r7, #4]
 8022a34:	4413      	add	r3, r2
 8022a36:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (res < 0) {
 8022a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022a3a:	2b00      	cmp	r3, #0
 8022a3c:	da02      	bge.n	8022a44 <lfs_file_seek_+0x68>
            return LFS_ERR_INVAL;
 8022a3e:	f06f 0315 	mvn.w	r3, #21
 8022a42:	e050      	b.n	8022ae6 <lfs_file_seek_+0x10a>
        } else {
            npos = res;
 8022a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    if (npos > lfs->file_max) {
 8022a48:	68fb      	ldr	r3, [r7, #12]
 8022a4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8022a4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8022a4e:	429a      	cmp	r2, r3
 8022a50:	d902      	bls.n	8022a58 <lfs_file_seek_+0x7c>
        // file position out of range
        return LFS_ERR_INVAL;
 8022a52:	f06f 0315 	mvn.w	r3, #21
 8022a56:	e046      	b.n	8022ae6 <lfs_file_seek_+0x10a>
    }

    if (file->pos == npos) {
 8022a58:	68bb      	ldr	r3, [r7, #8]
 8022a5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022a5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8022a5e:	429a      	cmp	r2, r3
 8022a60:	d101      	bne.n	8022a66 <lfs_file_seek_+0x8a>
        // noop - position has not changed
        return npos;
 8022a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8022a64:	e03f      	b.n	8022ae6 <lfs_file_seek_+0x10a>

    // if we're only reading and our new offset is still in the file's cache
    // we can avoid flushing and needing to reread the data
    if (
#ifndef LFS_READONLY
        !(file->flags & LFS_F_WRITING)
 8022a66:	68bb      	ldr	r3, [r7, #8]
 8022a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
    if (
 8022a6e:	2b00      	cmp	r3, #0
 8022a70:	d12b      	bne.n	8022aca <lfs_file_seek_+0xee>
#else
        true
#endif
            ) {
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 8022a72:	68bb      	ldr	r3, [r7, #8]
 8022a74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022a76:	61bb      	str	r3, [r7, #24]
 8022a78:	f107 0318 	add.w	r3, r7, #24
 8022a7c:	4619      	mov	r1, r3
 8022a7e:	68f8      	ldr	r0, [r7, #12]
 8022a80:	f7fe fe72 	bl	8021768 <lfs_ctz_index>
 8022a84:	6278      	str	r0, [r7, #36]	@ 0x24
        lfs_off_t noff = npos;
 8022a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8022a88:	617b      	str	r3, [r7, #20]
        int nindex = lfs_ctz_index(lfs, &noff);
 8022a8a:	f107 0314 	add.w	r3, r7, #20
 8022a8e:	4619      	mov	r1, r3
 8022a90:	68f8      	ldr	r0, [r7, #12]
 8022a92:	f7fe fe69 	bl	8021768 <lfs_ctz_index>
 8022a96:	6238      	str	r0, [r7, #32]
        if (oindex == nindex
 8022a98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8022a9a:	6a3b      	ldr	r3, [r7, #32]
 8022a9c:	429a      	cmp	r2, r3
 8022a9e:	d114      	bne.n	8022aca <lfs_file_seek_+0xee>
                && noff >= file->cache.off
 8022aa0:	68bb      	ldr	r3, [r7, #8]
 8022aa2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8022aa4:	697b      	ldr	r3, [r7, #20]
 8022aa6:	429a      	cmp	r2, r3
 8022aa8:	d80f      	bhi.n	8022aca <lfs_file_seek_+0xee>
                && noff < file->cache.off + file->cache.size) {
 8022aaa:	68bb      	ldr	r3, [r7, #8]
 8022aac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8022aae:	68bb      	ldr	r3, [r7, #8]
 8022ab0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8022ab2:	441a      	add	r2, r3
 8022ab4:	697b      	ldr	r3, [r7, #20]
 8022ab6:	429a      	cmp	r2, r3
 8022ab8:	d907      	bls.n	8022aca <lfs_file_seek_+0xee>
            file->pos = npos;
 8022aba:	68bb      	ldr	r3, [r7, #8]
 8022abc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8022abe:	635a      	str	r2, [r3, #52]	@ 0x34
            file->off = noff;
 8022ac0:	697a      	ldr	r2, [r7, #20]
 8022ac2:	68bb      	ldr	r3, [r7, #8]
 8022ac4:	63da      	str	r2, [r3, #60]	@ 0x3c
            return npos;
 8022ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8022ac8:	e00d      	b.n	8022ae6 <lfs_file_seek_+0x10a>
        }
    }

    // write out everything beforehand, may be noop if rdonly
    int err = lfs_file_flush(lfs, file);
 8022aca:	68b9      	ldr	r1, [r7, #8]
 8022acc:	68f8      	ldr	r0, [r7, #12]
 8022ace:	f7ff fb75 	bl	80221bc <lfs_file_flush>
 8022ad2:	61f8      	str	r0, [r7, #28]
    if (err) {
 8022ad4:	69fb      	ldr	r3, [r7, #28]
 8022ad6:	2b00      	cmp	r3, #0
 8022ad8:	d001      	beq.n	8022ade <lfs_file_seek_+0x102>
        return err;
 8022ada:	69fb      	ldr	r3, [r7, #28]
 8022adc:	e003      	b.n	8022ae6 <lfs_file_seek_+0x10a>
    }

    // update pos
    file->pos = npos;
 8022ade:	68bb      	ldr	r3, [r7, #8]
 8022ae0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8022ae2:	635a      	str	r2, [r3, #52]	@ 0x34
    return npos;
 8022ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8022ae6:	4618      	mov	r0, r3
 8022ae8:	3730      	adds	r7, #48	@ 0x30
 8022aea:	46bd      	mov	sp, r7
 8022aec:	bd80      	pop	{r7, pc}

08022aee <lfs_file_tell_>:

    return 0;
}
#endif

static lfs_soff_t lfs_file_tell_(lfs_t *lfs, lfs_file_t *file) {
 8022aee:	b480      	push	{r7}
 8022af0:	b083      	sub	sp, #12
 8022af2:	af00      	add	r7, sp, #0
 8022af4:	6078      	str	r0, [r7, #4]
 8022af6:	6039      	str	r1, [r7, #0]
    (void)lfs;
    return file->pos;
 8022af8:	683b      	ldr	r3, [r7, #0]
 8022afa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
}
 8022afc:	4618      	mov	r0, r3
 8022afe:	370c      	adds	r7, #12
 8022b00:	46bd      	mov	sp, r7
 8022b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b06:	4770      	bx	lr

08022b08 <lfs_file_size_>:
    }

    return 0;
}

static lfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file) {
 8022b08:	b580      	push	{r7, lr}
 8022b0a:	b082      	sub	sp, #8
 8022b0c:	af00      	add	r7, sp, #0
 8022b0e:	6078      	str	r0, [r7, #4]
 8022b10:	6039      	str	r1, [r7, #0]
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8022b12:	683b      	ldr	r3, [r7, #0]
 8022b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8022b1a:	2b00      	cmp	r3, #0
 8022b1c:	d009      	beq.n	8022b32 <lfs_file_size_+0x2a>
        return lfs_max(file->pos, file->ctz.size);
 8022b1e:	683b      	ldr	r3, [r7, #0]
 8022b20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8022b22:	683b      	ldr	r3, [r7, #0]
 8022b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022b26:	4619      	mov	r1, r3
 8022b28:	4610      	mov	r0, r2
 8022b2a:	f7fa fa4c 	bl	801cfc6 <lfs_max>
 8022b2e:	4603      	mov	r3, r0
 8022b30:	e001      	b.n	8022b36 <lfs_file_size_+0x2e>
    }
#endif

    return file->ctz.size;
 8022b32:	683b      	ldr	r3, [r7, #0]
 8022b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
 8022b36:	4618      	mov	r0, r3
 8022b38:	3708      	adds	r7, #8
 8022b3a:	46bd      	mov	sp, r7
 8022b3c:	bd80      	pop	{r7, pc}

08022b3e <lfs_stat_>:


/// General fs operations ///
static int lfs_stat_(lfs_t *lfs, const char *path, struct lfs_info *info) {
 8022b3e:	b580      	push	{r7, lr}
 8022b40:	b08e      	sub	sp, #56	@ 0x38
 8022b42:	af00      	add	r7, sp, #0
 8022b44:	60f8      	str	r0, [r7, #12]
 8022b46:	60b9      	str	r1, [r7, #8]
 8022b48:	607a      	str	r2, [r7, #4]
    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 8022b4a:	f107 0208 	add.w	r2, r7, #8
 8022b4e:	f107 0114 	add.w	r1, r7, #20
 8022b52:	2300      	movs	r3, #0
 8022b54:	68f8      	ldr	r0, [r7, #12]
 8022b56:	f7fc fe4d 	bl	801f7f4 <lfs_dir_find>
 8022b5a:	6378      	str	r0, [r7, #52]	@ 0x34
    if (tag < 0) {
 8022b5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8022b5e:	2b00      	cmp	r3, #0
 8022b60:	da01      	bge.n	8022b66 <lfs_stat_+0x28>
        return (int)tag;
 8022b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8022b64:	e00c      	b.n	8022b80 <lfs_stat_+0x42>
    }

    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
 8022b66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8022b68:	4618      	mov	r0, r3
 8022b6a:	f7fa ffaf 	bl	801dacc <lfs_tag_id>
 8022b6e:	4603      	mov	r3, r0
 8022b70:	461a      	mov	r2, r3
 8022b72:	f107 0114 	add.w	r1, r7, #20
 8022b76:	687b      	ldr	r3, [r7, #4]
 8022b78:	68f8      	ldr	r0, [r7, #12]
 8022b7a:	f7fc fd77 	bl	801f66c <lfs_dir_getinfo>
 8022b7e:	4603      	mov	r3, r0
}
 8022b80:	4618      	mov	r0, r3
 8022b82:	3738      	adds	r7, #56	@ 0x38
 8022b84:	46bd      	mov	sp, r7
 8022b86:	bd80      	pop	{r7, pc}

08022b88 <lfs_remove_>:

#ifndef LFS_READONLY
static int lfs_remove_(lfs_t *lfs, const char *path) {
 8022b88:	b580      	push	{r7, lr}
 8022b8a:	b0a0      	sub	sp, #128	@ 0x80
 8022b8c:	af02      	add	r7, sp, #8
 8022b8e:	6078      	str	r0, [r7, #4]
 8022b90:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 8022b92:	6878      	ldr	r0, [r7, #4]
 8022b94:	f001 fe0c 	bl	80247b0 <lfs_fs_forceconsistency>
 8022b98:	6778      	str	r0, [r7, #116]	@ 0x74
    if (err) {
 8022b9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8022b9c:	2b00      	cmp	r3, #0
 8022b9e:	d001      	beq.n	8022ba4 <lfs_remove_+0x1c>
        return err;
 8022ba0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8022ba2:	e0bc      	b.n	8022d1e <lfs_remove_+0x196>
    }

    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 8022ba4:	463a      	mov	r2, r7
 8022ba6:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8022baa:	2300      	movs	r3, #0
 8022bac:	6878      	ldr	r0, [r7, #4]
 8022bae:	f7fc fe21 	bl	801f7f4 <lfs_dir_find>
 8022bb2:	6738      	str	r0, [r7, #112]	@ 0x70
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 8022bb4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8022bb6:	2b00      	cmp	r3, #0
 8022bb8:	db09      	blt.n	8022bce <lfs_remove_+0x46>
 8022bba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8022bbc:	4618      	mov	r0, r3
 8022bbe:	f7fa ff85 	bl	801dacc <lfs_tag_id>
 8022bc2:	4603      	mov	r3, r0
 8022bc4:	461a      	mov	r2, r3
 8022bc6:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8022bca:	429a      	cmp	r2, r3
 8022bcc:	d107      	bne.n	8022bde <lfs_remove_+0x56>
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
 8022bce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8022bd0:	2b00      	cmp	r3, #0
 8022bd2:	da01      	bge.n	8022bd8 <lfs_remove_+0x50>
 8022bd4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8022bd6:	e0a2      	b.n	8022d1e <lfs_remove_+0x196>
 8022bd8:	f06f 0315 	mvn.w	r3, #21
 8022bdc:	e09f      	b.n	8022d1e <lfs_remove_+0x196>
    }

    struct lfs_mlist dir;
    dir.next = lfs->mlist;
 8022bde:	687b      	ldr	r3, [r7, #4]
 8022be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022be2:	627b      	str	r3, [r7, #36]	@ 0x24
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 8022be4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8022be6:	4618      	mov	r0, r3
 8022be8:	f7fa ff46 	bl	801da78 <lfs_tag_type3>
 8022bec:	4603      	mov	r3, r0
 8022bee:	2b02      	cmp	r3, #2
 8022bf0:	d142      	bne.n	8022c78 <lfs_remove_+0xf0>
        // must be empty before removal
        lfs_block_t pair[2];
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 8022bf2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8022bf4:	4618      	mov	r0, r3
 8022bf6:	f7fa ff69 	bl	801dacc <lfs_tag_id>
 8022bfa:	4603      	mov	r3, r0
 8022bfc:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
 8022bfe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8022c02:	f043 0308 	orr.w	r3, r3, #8
 8022c06:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8022c0a:	f107 020c 	add.w	r2, r7, #12
 8022c0e:	9200      	str	r2, [sp, #0]
 8022c10:	4a45      	ldr	r2, [pc, #276]	@ (8022d28 <lfs_remove_+0x1a0>)
 8022c12:	6878      	ldr	r0, [r7, #4]
 8022c14:	f7fb fbd6 	bl	801e3c4 <lfs_dir_get>
 8022c18:	66f8      	str	r0, [r7, #108]	@ 0x6c
        if (res < 0) {
 8022c1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8022c1c:	2b00      	cmp	r3, #0
 8022c1e:	da01      	bge.n	8022c24 <lfs_remove_+0x9c>
            return (int)res;
 8022c20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8022c22:	e07c      	b.n	8022d1e <lfs_remove_+0x196>
        }
        lfs_pair_fromle32(pair);
 8022c24:	f107 030c 	add.w	r3, r7, #12
 8022c28:	4618      	mov	r0, r3
 8022c2a:	f7fa feb0 	bl	801d98e <lfs_pair_fromle32>

        err = lfs_dir_fetch(lfs, &dir.m, pair);
 8022c2e:	f107 020c 	add.w	r2, r7, #12
 8022c32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8022c36:	3308      	adds	r3, #8
 8022c38:	4619      	mov	r1, r3
 8022c3a:	6878      	ldr	r0, [r7, #4]
 8022c3c:	f7fc fcc8 	bl	801f5d0 <lfs_dir_fetch>
 8022c40:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 8022c42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8022c44:	2b00      	cmp	r3, #0
 8022c46:	d001      	beq.n	8022c4c <lfs_remove_+0xc4>
            return err;
 8022c48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8022c4a:	e068      	b.n	8022d1e <lfs_remove_+0x196>
        }

        if (dir.m.count > 0 || dir.m.split) {
 8022c4c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8022c50:	2b00      	cmp	r3, #0
//            return LFS_ERR_NOTEMPTY;  COMMENT make possible to remove directory iven if not epty.
        }

        // mark fs as orphaned
        err = lfs_fs_preporphans(lfs, +1);
 8022c52:	2101      	movs	r1, #1
 8022c54:	6878      	ldr	r0, [r7, #4]
 8022c56:	f001 fa89 	bl	802416c <lfs_fs_preporphans>
 8022c5a:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 8022c5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8022c5e:	2b00      	cmp	r3, #0
 8022c60:	d001      	beq.n	8022c66 <lfs_remove_+0xde>
            return err;
 8022c62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8022c64:	e05b      	b.n	8022d1e <lfs_remove_+0x196>
        }

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        dir.type = 0;
 8022c66:	2300      	movs	r3, #0
 8022c68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        dir.id = 0;
 8022c6c:	2300      	movs	r3, #0
 8022c6e:	853b      	strh	r3, [r7, #40]	@ 0x28
        lfs->mlist = &dir;
 8022c70:	687b      	ldr	r3, [r7, #4]
 8022c72:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8022c76:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    // delete the entry
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
 8022c78:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8022c7a:	4618      	mov	r0, r3
 8022c7c:	f7fa ff26 	bl	801dacc <lfs_tag_id>
 8022c80:	4603      	mov	r3, r0
 8022c82:	029b      	lsls	r3, r3, #10
 8022c84:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8022c88:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8022c8c:	61fb      	str	r3, [r7, #28]
 8022c8e:	2300      	movs	r3, #0
 8022c90:	623b      	str	r3, [r7, #32]
 8022c92:	f107 021c 	add.w	r2, r7, #28
 8022c96:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8022c9a:	2301      	movs	r3, #1
 8022c9c:	6878      	ldr	r0, [r7, #4]
 8022c9e:	f7fe faf1 	bl	8021284 <lfs_dir_commit>
 8022ca2:	6778      	str	r0, [r7, #116]	@ 0x74
            {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(tag), 0), NULL}));
    if (err) {
 8022ca4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8022ca6:	2b00      	cmp	r3, #0
 8022ca8:	d004      	beq.n	8022cb4 <lfs_remove_+0x12c>
        lfs->mlist = dir.next;
 8022caa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8022cac:	687b      	ldr	r3, [r7, #4]
 8022cae:	629a      	str	r2, [r3, #40]	@ 0x28
        return err;
 8022cb0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8022cb2:	e034      	b.n	8022d1e <lfs_remove_+0x196>
    }

    lfs->mlist = dir.next;
 8022cb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8022cb6:	687b      	ldr	r3, [r7, #4]
 8022cb8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 8022cba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8022cbc:	4618      	mov	r0, r3
 8022cbe:	f7fa fedb 	bl	801da78 <lfs_tag_type3>
 8022cc2:	4603      	mov	r3, r0
 8022cc4:	2b02      	cmp	r3, #2
 8022cc6:	d129      	bne.n	8022d1c <lfs_remove_+0x194>
        // fix orphan
        err = lfs_fs_preporphans(lfs, -1);
 8022cc8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8022ccc:	6878      	ldr	r0, [r7, #4]
 8022cce:	f001 fa4d 	bl	802416c <lfs_fs_preporphans>
 8022cd2:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 8022cd4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8022cd6:	2b00      	cmp	r3, #0
 8022cd8:	d001      	beq.n	8022cde <lfs_remove_+0x156>
            return err;
 8022cda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8022cdc:	e01f      	b.n	8022d1e <lfs_remove_+0x196>
        }

        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
 8022cde:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8022ce2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8022ce6:	3308      	adds	r3, #8
 8022ce8:	4619      	mov	r1, r3
 8022cea:	6878      	ldr	r0, [r7, #4]
 8022cec:	f001 f8f4 	bl	8023ed8 <lfs_fs_pred>
 8022cf0:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 8022cf2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8022cf4:	2b00      	cmp	r3, #0
 8022cf6:	d001      	beq.n	8022cfc <lfs_remove_+0x174>
            return err;
 8022cf8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8022cfa:	e010      	b.n	8022d1e <lfs_remove_+0x196>
        }

        err = lfs_dir_drop(lfs, &cwd, &dir.m);
 8022cfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8022d00:	f103 0208 	add.w	r2, r3, #8
 8022d04:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8022d08:	4619      	mov	r1, r3
 8022d0a:	6878      	ldr	r0, [r7, #4]
 8022d0c:	f7fd f90c 	bl	801ff28 <lfs_dir_drop>
 8022d10:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 8022d12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8022d14:	2b00      	cmp	r3, #0
 8022d16:	d001      	beq.n	8022d1c <lfs_remove_+0x194>
            return err;
 8022d18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8022d1a:	e000      	b.n	8022d1e <lfs_remove_+0x196>
        }
    }

    return 0;
 8022d1c:	2300      	movs	r3, #0
}
 8022d1e:	4618      	mov	r0, r3
 8022d20:	3778      	adds	r7, #120	@ 0x78
 8022d22:	46bd      	mov	sp, r7
 8022d24:	bd80      	pop	{r7, pc}
 8022d26:	bf00      	nop
 8022d28:	700ffc00 	.word	0x700ffc00

08022d2c <lfs_rename_>:
#endif

#ifndef LFS_READONLY
static int lfs_rename_(lfs_t *lfs, const char *oldpath, const char *newpath) {
 8022d2c:	b590      	push	{r4, r7, lr}
 8022d2e:	b0c3      	sub	sp, #268	@ 0x10c
 8022d30:	af02      	add	r7, sp, #8
 8022d32:	60f8      	str	r0, [r7, #12]
 8022d34:	60b9      	str	r1, [r7, #8]
 8022d36:	607a      	str	r2, [r7, #4]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 8022d38:	68f8      	ldr	r0, [r7, #12]
 8022d3a:	f001 fd39 	bl	80247b0 <lfs_fs_forceconsistency>
 8022d3e:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
    if (err) {
 8022d42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8022d46:	2b00      	cmp	r3, #0
 8022d48:	d002      	beq.n	8022d50 <lfs_rename_+0x24>
        return err;
 8022d4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8022d4e:	e203      	b.n	8023158 <lfs_rename_+0x42c>
    }

    // find old entry
    lfs_mdir_t oldcwd;
    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);
 8022d50:	f107 0208 	add.w	r2, r7, #8
 8022d54:	f107 01c4 	add.w	r1, r7, #196	@ 0xc4
 8022d58:	2300      	movs	r3, #0
 8022d5a:	68f8      	ldr	r0, [r7, #12]
 8022d5c:	f7fc fd4a 	bl	801f7f4 <lfs_dir_find>
 8022d60:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
 8022d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8022d68:	2b00      	cmp	r3, #0
 8022d6a:	db0a      	blt.n	8022d82 <lfs_rename_+0x56>
 8022d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8022d70:	4618      	mov	r0, r3
 8022d72:	f7fa feab 	bl	801dacc <lfs_tag_id>
 8022d76:	4603      	mov	r3, r0
 8022d78:	461a      	mov	r2, r3
 8022d7a:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8022d7e:	429a      	cmp	r2, r3
 8022d80:	d109      	bne.n	8022d96 <lfs_rename_+0x6a>
        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;
 8022d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8022d86:	2b00      	cmp	r3, #0
 8022d88:	da02      	bge.n	8022d90 <lfs_rename_+0x64>
 8022d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8022d8e:	e1e3      	b.n	8023158 <lfs_rename_+0x42c>
 8022d90:	f06f 0315 	mvn.w	r3, #21
 8022d94:	e1e0      	b.n	8023158 <lfs_rename_+0x42c>
    }

    // find new entry
    lfs_mdir_t newcwd;
    uint16_t newid;
    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);
 8022d96:	f107 03a2 	add.w	r3, r7, #162	@ 0xa2
 8022d9a:	1d3a      	adds	r2, r7, #4
 8022d9c:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8022da0:	68f8      	ldr	r0, [r7, #12]
 8022da2:	f7fc fd27 	bl	801f7f4 <lfs_dir_find>
 8022da6:	f8c7 00f0 	str.w	r0, [r7, #240]	@ 0xf0
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 8022daa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8022dae:	2b00      	cmp	r3, #0
 8022db0:	db0a      	blt.n	8022dc8 <lfs_rename_+0x9c>
 8022db2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8022db6:	4618      	mov	r0, r3
 8022db8:	f7fa fe88 	bl	801dacc <lfs_tag_id>
 8022dbc:	4603      	mov	r3, r0
 8022dbe:	461a      	mov	r2, r3
 8022dc0:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8022dc4:	429a      	cmp	r2, r3
 8022dc6:	d114      	bne.n	8022df2 <lfs_rename_+0xc6>
 8022dc8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8022dcc:	f113 0f02 	cmn.w	r3, #2
 8022dd0:	d105      	bne.n	8022dde <lfs_rename_+0xb2>
            !(prevtag == LFS_ERR_NOENT && newid != 0x3ff)) {
 8022dd2:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8022dd6:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8022dda:	4293      	cmp	r3, r2
 8022ddc:	d109      	bne.n	8022df2 <lfs_rename_+0xc6>
        return (prevtag < 0) ? (int)prevtag : LFS_ERR_INVAL;
 8022dde:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8022de2:	2b00      	cmp	r3, #0
 8022de4:	da02      	bge.n	8022dec <lfs_rename_+0xc0>
 8022de6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8022dea:	e1b5      	b.n	8023158 <lfs_rename_+0x42c>
 8022dec:	f06f 0315 	mvn.w	r3, #21
 8022df0:	e1b2      	b.n	8023158 <lfs_rename_+0x42c>
    }

    // if we're in the same pair there's a few special cases...
    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);
 8022df2:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 8022df6:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8022dfa:	4611      	mov	r1, r2
 8022dfc:	4618      	mov	r0, r3
 8022dfe:	f7fa fd6f 	bl	801d8e0 <lfs_pair_cmp>
 8022e02:	4603      	mov	r3, r0
 8022e04:	2b00      	cmp	r3, #0
 8022e06:	bf0c      	ite	eq
 8022e08:	2301      	moveq	r3, #1
 8022e0a:	2300      	movne	r3, #0
 8022e0c:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
    uint16_t newoldid = lfs_tag_id(oldtag);
 8022e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8022e14:	4618      	mov	r0, r3
 8022e16:	f7fa fe59 	bl	801dacc <lfs_tag_id>
 8022e1a:	4603      	mov	r3, r0
 8022e1c:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe

    struct lfs_mlist prevdir;
    prevdir.next = lfs->mlist;
 8022e20:	68fb      	ldr	r3, [r7, #12]
 8022e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022e24:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (prevtag == LFS_ERR_NOENT) {
 8022e26:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8022e2a:	f113 0f02 	cmn.w	r3, #2
 8022e2e:	d120      	bne.n	8022e72 <lfs_rename_+0x146>
        // check that name fits
        lfs_size_t nlen = strlen(newpath);
 8022e30:	687b      	ldr	r3, [r7, #4]
 8022e32:	4618      	mov	r0, r3
 8022e34:	f7ed fa34 	bl	80102a0 <strlen>
 8022e38:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
        if (nlen > lfs->name_max) {
 8022e3c:	68fb      	ldr	r3, [r7, #12]
 8022e3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8022e40:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8022e44:	429a      	cmp	r2, r3
 8022e46:	d902      	bls.n	8022e4e <lfs_rename_+0x122>
            return LFS_ERR_NAMETOOLONG;
 8022e48:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8022e4c:	e184      	b.n	8023158 <lfs_rename_+0x42c>
        }

        // there is a small chance we are being renamed in the same
        // directory/ to an id less than our old id, the global update
        // to handle this is a bit messy
        if (samepair && newid <= newoldid) {
 8022e4e:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8022e52:	2b00      	cmp	r3, #0
 8022e54:	f000 8090 	beq.w	8022f78 <lfs_rename_+0x24c>
 8022e58:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8022e5c:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	@ 0xfe
 8022e60:	429a      	cmp	r2, r3
 8022e62:	f0c0 8089 	bcc.w	8022f78 <lfs_rename_+0x24c>
            newoldid += 1;
 8022e66:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 8022e6a:	3301      	adds	r3, #1
 8022e6c:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
 8022e70:	e082      	b.n	8022f78 <lfs_rename_+0x24c>
        }
    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {
 8022e72:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8022e76:	4618      	mov	r0, r3
 8022e78:	f7fa fdfe 	bl	801da78 <lfs_tag_type3>
 8022e7c:	4603      	mov	r3, r0
 8022e7e:	461c      	mov	r4, r3
 8022e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8022e84:	4618      	mov	r0, r3
 8022e86:	f7fa fdf7 	bl	801da78 <lfs_tag_type3>
 8022e8a:	4603      	mov	r3, r0
 8022e8c:	429c      	cmp	r4, r3
 8022e8e:	d00d      	beq.n	8022eac <lfs_rename_+0x180>
        return (lfs_tag_type3(prevtag) == LFS_TYPE_DIR)
 8022e90:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8022e94:	4618      	mov	r0, r3
 8022e96:	f7fa fdef 	bl	801da78 <lfs_tag_type3>
 8022e9a:	4603      	mov	r3, r0
                ? LFS_ERR_ISDIR
                : LFS_ERR_NOTDIR;
 8022e9c:	2b02      	cmp	r3, #2
 8022e9e:	d102      	bne.n	8022ea6 <lfs_rename_+0x17a>
 8022ea0:	f06f 0314 	mvn.w	r3, #20
 8022ea4:	e158      	b.n	8023158 <lfs_rename_+0x42c>
 8022ea6:	f06f 0313 	mvn.w	r3, #19
 8022eaa:	e155      	b.n	8023158 <lfs_rename_+0x42c>
    } else if (samepair && newid == newoldid) {
 8022eac:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8022eb0:	2b00      	cmp	r3, #0
 8022eb2:	d007      	beq.n	8022ec4 <lfs_rename_+0x198>
 8022eb4:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8022eb8:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	@ 0xfe
 8022ebc:	429a      	cmp	r2, r3
 8022ebe:	d101      	bne.n	8022ec4 <lfs_rename_+0x198>
        // we're renaming to ourselves??
        return 0;
 8022ec0:	2300      	movs	r3, #0
 8022ec2:	e149      	b.n	8023158 <lfs_rename_+0x42c>
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 8022ec4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8022ec8:	4618      	mov	r0, r3
 8022eca:	f7fa fdd5 	bl	801da78 <lfs_tag_type3>
 8022ece:	4603      	mov	r3, r0
 8022ed0:	2b02      	cmp	r3, #2
 8022ed2:	d151      	bne.n	8022f78 <lfs_rename_+0x24c>
        // must be empty before removal
        lfs_block_t prevpair[2];
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, newid, 8), prevpair);
 8022ed4:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8022ed8:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
 8022eda:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8022ede:	f043 0308 	orr.w	r3, r3, #8
 8022ee2:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8022ee6:	f107 0220 	add.w	r2, r7, #32
 8022eea:	9200      	str	r2, [sp, #0]
 8022eec:	4a9d      	ldr	r2, [pc, #628]	@ (8023164 <lfs_rename_+0x438>)
 8022eee:	68f8      	ldr	r0, [r7, #12]
 8022ef0:	f7fb fa68 	bl	801e3c4 <lfs_dir_get>
 8022ef4:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
        if (res < 0) {
 8022ef8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8022efc:	2b00      	cmp	r3, #0
 8022efe:	da02      	bge.n	8022f06 <lfs_rename_+0x1da>
            return (int)res;
 8022f00:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8022f04:	e128      	b.n	8023158 <lfs_rename_+0x42c>
        }
        lfs_pair_fromle32(prevpair);
 8022f06:	f107 0320 	add.w	r3, r7, #32
 8022f0a:	4618      	mov	r0, r3
 8022f0c:	f7fa fd3f 	bl	801d98e <lfs_pair_fromle32>

        // must be empty before removal
        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);
 8022f10:	f107 0220 	add.w	r2, r7, #32
 8022f14:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8022f18:	3308      	adds	r3, #8
 8022f1a:	4619      	mov	r1, r3
 8022f1c:	68f8      	ldr	r0, [r7, #12]
 8022f1e:	f7fc fb57 	bl	801f5d0 <lfs_dir_fetch>
 8022f22:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
        if (err) {
 8022f26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8022f2a:	2b00      	cmp	r3, #0
 8022f2c:	d002      	beq.n	8022f34 <lfs_rename_+0x208>
            return err;
 8022f2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8022f32:	e111      	b.n	8023158 <lfs_rename_+0x42c>
        }

        if (prevdir.m.count > 0 || prevdir.m.split) {
 8022f34:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8022f38:	2b00      	cmp	r3, #0
 8022f3a:	d103      	bne.n	8022f44 <lfs_rename_+0x218>
 8022f3c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8022f40:	2b00      	cmp	r3, #0
 8022f42:	d002      	beq.n	8022f4a <lfs_rename_+0x21e>
            return LFS_ERR_NOTEMPTY;
 8022f44:	f06f 0326 	mvn.w	r3, #38	@ 0x26
 8022f48:	e106      	b.n	8023158 <lfs_rename_+0x42c>
        }

        // mark fs as orphaned
        err = lfs_fs_preporphans(lfs, +1);
 8022f4a:	2101      	movs	r1, #1
 8022f4c:	68f8      	ldr	r0, [r7, #12]
 8022f4e:	f001 f90d 	bl	802416c <lfs_fs_preporphans>
 8022f52:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
        if (err) {
 8022f56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8022f5a:	2b00      	cmp	r3, #0
 8022f5c:	d002      	beq.n	8022f64 <lfs_rename_+0x238>
            return err;
 8022f5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8022f62:	e0f9      	b.n	8023158 <lfs_rename_+0x42c>
        }

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        prevdir.type = 0;
 8022f64:	2300      	movs	r3, #0
 8022f66:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
        prevdir.id = 0;
 8022f6a:	2300      	movs	r3, #0
 8022f6c:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
        lfs->mlist = &prevdir;
 8022f70:	68fb      	ldr	r3, [r7, #12]
 8022f72:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8022f76:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (!samepair) {
 8022f78:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8022f7c:	f083 0301 	eor.w	r3, r3, #1
 8022f80:	b2db      	uxtb	r3, r3
 8022f82:	2b00      	cmp	r3, #0
 8022f84:	d007      	beq.n	8022f96 <lfs_rename_+0x26a>
        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);
 8022f86:	f107 02c4 	add.w	r2, r7, #196	@ 0xc4
 8022f8a:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 8022f8e:	4619      	mov	r1, r3
 8022f90:	68f8      	ldr	r0, [r7, #12]
 8022f92:	f001 f93b 	bl	802420c <lfs_fs_prepmove>
    }

    // move over all attributes
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 8022f96:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8022f9a:	f113 0f02 	cmn.w	r3, #2
 8022f9e:	d007      	beq.n	8022fb0 <lfs_rename_+0x284>
 8022fa0:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8022fa4:	029b      	lsls	r3, r3, #10
 8022fa6:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8022faa:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8022fae:	e000      	b.n	8022fb2 <lfs_rename_+0x286>
 8022fb0:	2300      	movs	r3, #0
 8022fb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8022fb4:	2300      	movs	r3, #0
 8022fb6:	657b      	str	r3, [r7, #84]	@ 0x54
 8022fb8:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8022fbc:	029b      	lsls	r3, r3, #10
 8022fbe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8022fc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8022fc6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8022fc8:	2300      	movs	r3, #0
 8022fca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8022fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8022fd0:	4618      	mov	r0, r3
 8022fd2:	f7fa fd51 	bl	801da78 <lfs_tag_type3>
 8022fd6:	4603      	mov	r3, r0
 8022fd8:	051a      	lsls	r2, r3, #20
 8022fda:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8022fde:	029b      	lsls	r3, r3, #10
 8022fe0:	ea42 0403 	orr.w	r4, r2, r3
 8022fe4:	687b      	ldr	r3, [r7, #4]
 8022fe6:	4618      	mov	r0, r3
 8022fe8:	f7ed f95a 	bl	80102a0 <strlen>
 8022fec:	4603      	mov	r3, r0
 8022fee:	4323      	orrs	r3, r4
 8022ff0:	663b      	str	r3, [r7, #96]	@ 0x60
 8022ff2:	687b      	ldr	r3, [r7, #4]
 8022ff4:	667b      	str	r3, [r7, #100]	@ 0x64
 8022ff6:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8022ffa:	029c      	lsls	r4, r3, #10
 8022ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8023000:	4618      	mov	r0, r3
 8023002:	f7fa fd63 	bl	801dacc <lfs_tag_id>
 8023006:	4603      	mov	r3, r0
 8023008:	4323      	orrs	r3, r4
 802300a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 802300e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8023012:	66bb      	str	r3, [r7, #104]	@ 0x68
 8023014:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8023018:	66fb      	str	r3, [r7, #108]	@ 0x6c
 802301a:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 802301e:	2b00      	cmp	r3, #0
 8023020:	d007      	beq.n	8023032 <lfs_rename_+0x306>
 8023022:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 8023026:	029b      	lsls	r3, r3, #10
 8023028:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 802302c:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8023030:	e000      	b.n	8023034 <lfs_rename_+0x308>
 8023032:	2300      	movs	r3, #0
 8023034:	673b      	str	r3, [r7, #112]	@ 0x70
 8023036:	2300      	movs	r3, #0
 8023038:	677b      	str	r3, [r7, #116]	@ 0x74
 802303a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 802303e:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8023042:	2305      	movs	r3, #5
 8023044:	68f8      	ldr	r0, [r7, #12]
 8023046:	f7fe f91d 	bl	8021284 <lfs_dir_commit>
 802304a:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
            {LFS_MKTAG(LFS_TYPE_CREATE, newid, 0), NULL},
            {LFS_MKTAG(lfs_tag_type3(oldtag), newid, strlen(newpath)), newpath},
            {LFS_MKTAG(LFS_FROM_MOVE, newid, lfs_tag_id(oldtag)), &oldcwd},
            {LFS_MKTAG_IF(samepair,
                LFS_TYPE_DELETE, newoldid, 0), NULL}));
    if (err) {
 802304e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8023052:	2b00      	cmp	r3, #0
 8023054:	d005      	beq.n	8023062 <lfs_rename_+0x336>
        lfs->mlist = prevdir.next;
 8023056:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8023058:	68fb      	ldr	r3, [r7, #12]
 802305a:	629a      	str	r2, [r3, #40]	@ 0x28
        return err;
 802305c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8023060:	e07a      	b.n	8023158 <lfs_rename_+0x42c>
    }

    // let commit clean up after move (if we're different! otherwise move
    // logic already fixed it for us)
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
 8023062:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8023066:	f083 0301 	eor.w	r3, r3, #1
 802306a:	b2db      	uxtb	r3, r3
 802306c:	2b00      	cmp	r3, #0
 802306e:	d02f      	beq.n	80230d0 <lfs_rename_+0x3a4>
 8023070:	68fb      	ldr	r3, [r7, #12]
 8023072:	3330      	adds	r3, #48	@ 0x30
 8023074:	4618      	mov	r0, r3
 8023076:	f7fa fdbe 	bl	801dbf6 <lfs_gstate_hasmove>
 802307a:	4603      	mov	r3, r0
 802307c:	2b00      	cmp	r3, #0
 802307e:	d027      	beq.n	80230d0 <lfs_rename_+0x3a4>
        // prep gstate and delete move id
        lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8023080:	2200      	movs	r2, #0
 8023082:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8023086:	68f8      	ldr	r0, [r7, #12]
 8023088:	f001 f8c0 	bl	802420c <lfs_fs_prepmove>
        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(
 802308c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8023090:	4618      	mov	r0, r3
 8023092:	f7fa fd1b 	bl	801dacc <lfs_tag_id>
 8023096:	4603      	mov	r3, r0
 8023098:	029b      	lsls	r3, r3, #10
 802309a:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 802309e:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 80230a2:	61bb      	str	r3, [r7, #24]
 80230a4:	2300      	movs	r3, #0
 80230a6:	61fb      	str	r3, [r7, #28]
 80230a8:	f107 0218 	add.w	r2, r7, #24
 80230ac:	f107 01c4 	add.w	r1, r7, #196	@ 0xc4
 80230b0:	2301      	movs	r3, #1
 80230b2:	68f8      	ldr	r0, [r7, #12]
 80230b4:	f7fe f8e6 	bl	8021284 <lfs_dir_commit>
 80230b8:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
                {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(oldtag), 0), NULL}));
        if (err) {
 80230bc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80230c0:	2b00      	cmp	r3, #0
 80230c2:	d005      	beq.n	80230d0 <lfs_rename_+0x3a4>
            lfs->mlist = prevdir.next;
 80230c4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80230c6:	68fb      	ldr	r3, [r7, #12]
 80230c8:	629a      	str	r2, [r3, #40]	@ 0x28
            return err;
 80230ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80230ce:	e043      	b.n	8023158 <lfs_rename_+0x42c>
        }
    }

    lfs->mlist = prevdir.next;
 80230d0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80230d2:	68fb      	ldr	r3, [r7, #12]
 80230d4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (prevtag != LFS_ERR_NOENT
 80230d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80230da:	f113 0f02 	cmn.w	r3, #2
 80230de:	d03a      	beq.n	8023156 <lfs_rename_+0x42a>
            && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 80230e0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80230e4:	4618      	mov	r0, r3
 80230e6:	f7fa fcc7 	bl	801da78 <lfs_tag_type3>
 80230ea:	4603      	mov	r3, r0
 80230ec:	2b02      	cmp	r3, #2
 80230ee:	d132      	bne.n	8023156 <lfs_rename_+0x42a>
        // fix orphan
        err = lfs_fs_preporphans(lfs, -1);
 80230f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80230f4:	68f8      	ldr	r0, [r7, #12]
 80230f6:	f001 f839 	bl	802416c <lfs_fs_preporphans>
 80230fa:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
        if (err) {
 80230fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8023102:	2b00      	cmp	r3, #0
 8023104:	d002      	beq.n	802310c <lfs_rename_+0x3e0>
            return err;
 8023106:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 802310a:	e025      	b.n	8023158 <lfs_rename_+0x42c>
        }

        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);
 802310c:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 8023110:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8023114:	3308      	adds	r3, #8
 8023116:	4619      	mov	r1, r3
 8023118:	68f8      	ldr	r0, [r7, #12]
 802311a:	f000 fedd 	bl	8023ed8 <lfs_fs_pred>
 802311e:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
        if (err) {
 8023122:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8023126:	2b00      	cmp	r3, #0
 8023128:	d002      	beq.n	8023130 <lfs_rename_+0x404>
            return err;
 802312a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 802312e:	e013      	b.n	8023158 <lfs_rename_+0x42c>
        }

        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);
 8023130:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8023134:	f103 0208 	add.w	r2, r3, #8
 8023138:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 802313c:	4619      	mov	r1, r3
 802313e:	68f8      	ldr	r0, [r7, #12]
 8023140:	f7fc fef2 	bl	801ff28 <lfs_dir_drop>
 8023144:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
        if (err) {
 8023148:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 802314c:	2b00      	cmp	r3, #0
 802314e:	d002      	beq.n	8023156 <lfs_rename_+0x42a>
            return err;
 8023150:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8023154:	e000      	b.n	8023158 <lfs_rename_+0x42c>
        }
    }

    return 0;
 8023156:	2300      	movs	r3, #0
}
 8023158:	4618      	mov	r0, r3
 802315a:	f507 7782 	add.w	r7, r7, #260	@ 0x104
 802315e:	46bd      	mov	sp, r7
 8023160:	bd90      	pop	{r4, r7, pc}
 8023162:	bf00      	nop
 8023164:	700ffc00 	.word	0x700ffc00

08023168 <lfs_init>:
#if LFS_ATTR_MAX > 1022
#error "Invalid LFS_ATTR_MAX, must be <= 1022"
#endif

// common filesystem initialization
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8023168:	b590      	push	{r4, r7, lr}
 802316a:	b08d      	sub	sp, #52	@ 0x34
 802316c:	af00      	add	r7, sp, #0
 802316e:	6078      	str	r0, [r7, #4]
 8023170:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 8023172:	687b      	ldr	r3, [r7, #4]
 8023174:	683a      	ldr	r2, [r7, #0]
 8023176:	669a      	str	r2, [r3, #104]	@ 0x68
    lfs->block_count = cfg->block_count;  // May be 0
 8023178:	683b      	ldr	r3, [r7, #0]
 802317a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 802317c:	687b      	ldr	r3, [r7, #4]
 802317e:	66da      	str	r2, [r3, #108]	@ 0x6c
    int err = 0;
 8023180:	2300      	movs	r3, #0
 8023182:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // which littlefs currently does not support
    LFS_ASSERT((bool)0x80000000);

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8023184:	687b      	ldr	r3, [r7, #4]
 8023186:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023188:	69db      	ldr	r3, [r3, #28]
 802318a:	2b00      	cmp	r3, #0
 802318c:	d106      	bne.n	802319c <lfs_init+0x34>
 802318e:	4b96      	ldr	r3, [pc, #600]	@ (80233e8 <lfs_init+0x280>)
 8023190:	4a96      	ldr	r2, [pc, #600]	@ (80233ec <lfs_init+0x284>)
 8023192:	f241 0152 	movw	r1, #4178	@ 0x1052
 8023196:	4896      	ldr	r0, [pc, #600]	@ (80233f0 <lfs_init+0x288>)
 8023198:	f010 f8d6 	bl	8033348 <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 802319c:	687b      	ldr	r3, [r7, #4]
 802319e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80231a0:	6a1b      	ldr	r3, [r3, #32]
 80231a2:	2b00      	cmp	r3, #0
 80231a4:	d106      	bne.n	80231b4 <lfs_init+0x4c>
 80231a6:	4b93      	ldr	r3, [pc, #588]	@ (80233f4 <lfs_init+0x28c>)
 80231a8:	4a90      	ldr	r2, [pc, #576]	@ (80233ec <lfs_init+0x284>)
 80231aa:	f241 0153 	movw	r1, #4179	@ 0x1053
 80231ae:	4890      	ldr	r0, [pc, #576]	@ (80233f0 <lfs_init+0x288>)
 80231b0:	f010 f8ca 	bl	8033348 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 80231b4:	687b      	ldr	r3, [r7, #4]
 80231b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80231b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80231ba:	2b00      	cmp	r3, #0
 80231bc:	d106      	bne.n	80231cc <lfs_init+0x64>
 80231be:	4b8e      	ldr	r3, [pc, #568]	@ (80233f8 <lfs_init+0x290>)
 80231c0:	4a8a      	ldr	r2, [pc, #552]	@ (80233ec <lfs_init+0x284>)
 80231c2:	f241 0154 	movw	r1, #4180	@ 0x1054
 80231c6:	488a      	ldr	r0, [pc, #552]	@ (80233f0 <lfs_init+0x288>)
 80231c8:	f010 f8be 	bl	8033348 <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 80231cc:	687b      	ldr	r3, [r7, #4]
 80231ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80231d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80231d2:	687a      	ldr	r2, [r7, #4]
 80231d4:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80231d6:	69d2      	ldr	r2, [r2, #28]
 80231d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80231dc:	fb01 f202 	mul.w	r2, r1, r2
 80231e0:	1a9b      	subs	r3, r3, r2
 80231e2:	2b00      	cmp	r3, #0
 80231e4:	d006      	beq.n	80231f4 <lfs_init+0x8c>
 80231e6:	4b85      	ldr	r3, [pc, #532]	@ (80233fc <lfs_init+0x294>)
 80231e8:	4a80      	ldr	r2, [pc, #512]	@ (80233ec <lfs_init+0x284>)
 80231ea:	f241 0158 	movw	r1, #4184	@ 0x1058
 80231ee:	4880      	ldr	r0, [pc, #512]	@ (80233f0 <lfs_init+0x288>)
 80231f0:	f010 f8aa 	bl	8033348 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 80231f4:	687b      	ldr	r3, [r7, #4]
 80231f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80231f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80231fa:	687a      	ldr	r2, [r7, #4]
 80231fc:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80231fe:	6a12      	ldr	r2, [r2, #32]
 8023200:	fbb3 f1f2 	udiv	r1, r3, r2
 8023204:	fb01 f202 	mul.w	r2, r1, r2
 8023208:	1a9b      	subs	r3, r3, r2
 802320a:	2b00      	cmp	r3, #0
 802320c:	d006      	beq.n	802321c <lfs_init+0xb4>
 802320e:	4b7c      	ldr	r3, [pc, #496]	@ (8023400 <lfs_init+0x298>)
 8023210:	4a76      	ldr	r2, [pc, #472]	@ (80233ec <lfs_init+0x284>)
 8023212:	f241 0159 	movw	r1, #4185	@ 0x1059
 8023216:	4876      	ldr	r0, [pc, #472]	@ (80233f0 <lfs_init+0x288>)
 8023218:	f010 f896 	bl	8033348 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 802321c:	687b      	ldr	r3, [r7, #4]
 802321e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023222:	687a      	ldr	r2, [r7, #4]
 8023224:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8023226:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8023228:	fbb3 f1f2 	udiv	r1, r3, r2
 802322c:	fb01 f202 	mul.w	r2, r1, r2
 8023230:	1a9b      	subs	r3, r3, r2
 8023232:	2b00      	cmp	r3, #0
 8023234:	d006      	beq.n	8023244 <lfs_init+0xdc>
 8023236:	4b73      	ldr	r3, [pc, #460]	@ (8023404 <lfs_init+0x29c>)
 8023238:	4a6c      	ldr	r2, [pc, #432]	@ (80233ec <lfs_init+0x284>)
 802323a:	f241 015a 	movw	r1, #4186	@ 0x105a
 802323e:	486c      	ldr	r0, [pc, #432]	@ (80233f0 <lfs_init+0x288>)
 8023240:	f010 f882 	bl	8033348 <__assert_func>

    // check that the block size is large enough to fit all ctz pointers
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 8023244:	687b      	ldr	r3, [r7, #4]
 8023246:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802324a:	2b7f      	cmp	r3, #127	@ 0x7f
 802324c:	d806      	bhi.n	802325c <lfs_init+0xf4>
 802324e:	4b6e      	ldr	r3, [pc, #440]	@ (8023408 <lfs_init+0x2a0>)
 8023250:	4a66      	ldr	r2, [pc, #408]	@ (80233ec <lfs_init+0x284>)
 8023252:	f241 015d 	movw	r1, #4189	@ 0x105d
 8023256:	4866      	ldr	r0, [pc, #408]	@ (80233f0 <lfs_init+0x288>)
 8023258:	f010 f876 	bl	8033348 <__assert_func>
    // this is the exact calculation for all ctz pointers, if this fails
    // and the simpler assert above does not, math must be broken
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 802325c:	687b      	ldr	r3, [r7, #4]
 802325e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023262:	3b08      	subs	r3, #8
 8023264:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8023268:	fbb2 f3f3 	udiv	r3, r2, r3
 802326c:	4618      	mov	r0, r3
 802326e:	f7f9 fef1 	bl	801d054 <lfs_npw2>
 8023272:	4603      	mov	r3, r0
 8023274:	009a      	lsls	r2, r3, #2
 8023276:	687b      	ldr	r3, [r7, #4]
 8023278:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802327a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802327c:	429a      	cmp	r2, r3
 802327e:	d906      	bls.n	802328e <lfs_init+0x126>
 8023280:	4b62      	ldr	r3, [pc, #392]	@ (802340c <lfs_init+0x2a4>)
 8023282:	4a5a      	ldr	r2, [pc, #360]	@ (80233ec <lfs_init+0x284>)
 8023284:	f44f 5183 	mov.w	r1, #4192	@ 0x1060
 8023288:	4859      	ldr	r0, [pc, #356]	@ (80233f0 <lfs_init+0x288>)
 802328a:	f010 f85d 	bl	8033348 <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 802328e:	687b      	ldr	r3, [r7, #4]
 8023290:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023294:	2b00      	cmp	r3, #0
 8023296:	d106      	bne.n	80232a6 <lfs_init+0x13e>
 8023298:	4b5d      	ldr	r3, [pc, #372]	@ (8023410 <lfs_init+0x2a8>)
 802329a:	4a54      	ldr	r2, [pc, #336]	@ (80233ec <lfs_init+0x284>)
 802329c:	f241 0169 	movw	r1, #4201	@ 0x1069
 80232a0:	4853      	ldr	r0, [pc, #332]	@ (80233f0 <lfs_init+0x288>)
 80232a2:	f010 f851 	bl	8033348 <__assert_func>

    // check that compact_thresh makes sense
    //
    // metadata can't be compacted below block_size/2, and metadata can't
    // exceed a block_size
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 80232a6:	687b      	ldr	r3, [r7, #4]
 80232a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80232aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80232ac:	2b00      	cmp	r3, #0
 80232ae:	d00f      	beq.n	80232d0 <lfs_init+0x168>
 80232b0:	687b      	ldr	r3, [r7, #4]
 80232b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80232b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80232b6:	687b      	ldr	r3, [r7, #4]
 80232b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80232ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80232bc:	085b      	lsrs	r3, r3, #1
 80232be:	429a      	cmp	r2, r3
 80232c0:	d206      	bcs.n	80232d0 <lfs_init+0x168>
 80232c2:	4b54      	ldr	r3, [pc, #336]	@ (8023414 <lfs_init+0x2ac>)
 80232c4:	4a49      	ldr	r2, [pc, #292]	@ (80233ec <lfs_init+0x284>)
 80232c6:	f241 016f 	movw	r1, #4207	@ 0x106f
 80232ca:	4849      	ldr	r0, [pc, #292]	@ (80233f0 <lfs_init+0x288>)
 80232cc:	f010 f83c 	bl	8033348 <__assert_func>
            || lfs->cfg->compact_thresh >= lfs->cfg->block_size/2);
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 80232d0:	687b      	ldr	r3, [r7, #4]
 80232d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80232d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80232d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80232da:	d00e      	beq.n	80232fa <lfs_init+0x192>
 80232dc:	687b      	ldr	r3, [r7, #4]
 80232de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80232e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80232e2:	687b      	ldr	r3, [r7, #4]
 80232e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80232e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80232e8:	429a      	cmp	r2, r3
 80232ea:	d906      	bls.n	80232fa <lfs_init+0x192>
 80232ec:	4b4a      	ldr	r3, [pc, #296]	@ (8023418 <lfs_init+0x2b0>)
 80232ee:	4a3f      	ldr	r2, [pc, #252]	@ (80233ec <lfs_init+0x284>)
 80232f0:	f241 0171 	movw	r1, #4209	@ 0x1071
 80232f4:	483e      	ldr	r0, [pc, #248]	@ (80233f0 <lfs_init+0x288>)
 80232f6:	f010 f827 	bl	8033348 <__assert_func>
            || lfs->cfg->compact_thresh <= lfs->cfg->block_size);

    // setup read cache
    if (lfs->cfg->read_buffer) {
 80232fa:	687b      	ldr	r3, [r7, #4]
 80232fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80232fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8023300:	2b00      	cmp	r3, #0
 8023302:	d005      	beq.n	8023310 <lfs_init+0x1a8>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8023304:	687b      	ldr	r3, [r7, #4]
 8023306:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023308:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 802330a:	687b      	ldr	r3, [r7, #4]
 802330c:	60da      	str	r2, [r3, #12]
 802330e:	e010      	b.n	8023332 <lfs_init+0x1ca>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8023310:	687b      	ldr	r3, [r7, #4]
 8023312:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8023316:	4618      	mov	r0, r3
 8023318:	f7f9 ff04 	bl	801d124 <lfs_malloc>
 802331c:	4602      	mov	r2, r0
 802331e:	687b      	ldr	r3, [r7, #4]
 8023320:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 8023322:	687b      	ldr	r3, [r7, #4]
 8023324:	68db      	ldr	r3, [r3, #12]
 8023326:	2b00      	cmp	r3, #0
 8023328:	d103      	bne.n	8023332 <lfs_init+0x1ca>
            err = LFS_ERR_NOMEM;
 802332a:	f06f 030b 	mvn.w	r3, #11
 802332e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 8023330:	e163      	b.n	80235fa <lfs_init+0x492>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 8023332:	687b      	ldr	r3, [r7, #4]
 8023334:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8023338:	2b00      	cmp	r3, #0
 802333a:	d005      	beq.n	8023348 <lfs_init+0x1e0>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 802333c:	687b      	ldr	r3, [r7, #4]
 802333e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023340:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8023342:	687b      	ldr	r3, [r7, #4]
 8023344:	61da      	str	r2, [r3, #28]
 8023346:	e010      	b.n	802336a <lfs_init+0x202>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8023348:	687b      	ldr	r3, [r7, #4]
 802334a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802334c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802334e:	4618      	mov	r0, r3
 8023350:	f7f9 fee8 	bl	801d124 <lfs_malloc>
 8023354:	4602      	mov	r2, r0
 8023356:	687b      	ldr	r3, [r7, #4]
 8023358:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 802335a:	687b      	ldr	r3, [r7, #4]
 802335c:	69db      	ldr	r3, [r3, #28]
 802335e:	2b00      	cmp	r3, #0
 8023360:	d103      	bne.n	802336a <lfs_init+0x202>
            err = LFS_ERR_NOMEM;
 8023362:	f06f 030b 	mvn.w	r3, #11
 8023366:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 8023368:	e147      	b.n	80235fa <lfs_init+0x492>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 802336a:	687b      	ldr	r3, [r7, #4]
 802336c:	4619      	mov	r1, r3
 802336e:	6878      	ldr	r0, [r7, #4]
 8023370:	f7f9 fefe 	bl	801d170 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 8023374:	687b      	ldr	r3, [r7, #4]
 8023376:	3310      	adds	r3, #16
 8023378:	4619      	mov	r1, r3
 802337a:	6878      	ldr	r0, [r7, #4]
 802337c:	f7f9 fef8 	bl	801d170 <lfs_cache_zero>

    // setup lookahead buffer, note mount finishes initializing this after
    // we establish a decent pseudo-random seed
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 8023380:	687b      	ldr	r3, [r7, #4]
 8023382:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8023386:	2b00      	cmp	r3, #0
 8023388:	d106      	bne.n	8023398 <lfs_init+0x230>
 802338a:	4b24      	ldr	r3, [pc, #144]	@ (802341c <lfs_init+0x2b4>)
 802338c:	4a17      	ldr	r2, [pc, #92]	@ (80233ec <lfs_init+0x284>)
 802338e:	f241 0190 	movw	r1, #4240	@ 0x1090
 8023392:	4817      	ldr	r0, [pc, #92]	@ (80233f0 <lfs_init+0x288>)
 8023394:	f00f ffd8 	bl	8033348 <__assert_func>
    if (lfs->cfg->lookahead_buffer) {
 8023398:	687b      	ldr	r3, [r7, #4]
 802339a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802339c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802339e:	2b00      	cmp	r3, #0
 80233a0:	d005      	beq.n	80233ae <lfs_init+0x246>
        lfs->lookahead.buffer = lfs->cfg->lookahead_buffer;
 80233a2:	687b      	ldr	r3, [r7, #4]
 80233a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80233a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80233a8:	687b      	ldr	r3, [r7, #4]
 80233aa:	665a      	str	r2, [r3, #100]	@ 0x64
 80233ac:	e010      	b.n	80233d0 <lfs_init+0x268>
    } else {
        lfs->lookahead.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 80233ae:	687b      	ldr	r3, [r7, #4]
 80233b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80233b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80233b4:	4618      	mov	r0, r3
 80233b6:	f7f9 feb5 	bl	801d124 <lfs_malloc>
 80233ba:	4602      	mov	r2, r0
 80233bc:	687b      	ldr	r3, [r7, #4]
 80233be:	665a      	str	r2, [r3, #100]	@ 0x64
        if (!lfs->lookahead.buffer) {
 80233c0:	687b      	ldr	r3, [r7, #4]
 80233c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80233c4:	2b00      	cmp	r3, #0
 80233c6:	d103      	bne.n	80233d0 <lfs_init+0x268>
            err = LFS_ERR_NOMEM;
 80233c8:	f06f 030b 	mvn.w	r3, #11
 80233cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 80233ce:	e114      	b.n	80235fa <lfs_init+0x492>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 80233d0:	687b      	ldr	r3, [r7, #4]
 80233d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80233d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80233d6:	2bff      	cmp	r3, #255	@ 0xff
 80233d8:	d924      	bls.n	8023424 <lfs_init+0x2bc>
 80233da:	4b11      	ldr	r3, [pc, #68]	@ (8023420 <lfs_init+0x2b8>)
 80233dc:	4a03      	ldr	r2, [pc, #12]	@ (80233ec <lfs_init+0x284>)
 80233de:	f241 019c 	movw	r1, #4252	@ 0x109c
 80233e2:	4803      	ldr	r0, [pc, #12]	@ (80233f0 <lfs_init+0x288>)
 80233e4:	f00f ffb0 	bl	8033348 <__assert_func>
 80233e8:	08040cd0 	.word	0x08040cd0
 80233ec:	08044424 	.word	0x08044424
 80233f0:	08040920 	.word	0x08040920
 80233f4:	08040cec 	.word	0x08040cec
 80233f8:	08040d08 	.word	0x08040d08
 80233fc:	08040d24 	.word	0x08040d24
 8023400:	08040d54 	.word	0x08040d54
 8023404:	08040d84 	.word	0x08040d84
 8023408:	08040db8 	.word	0x08040db8
 802340c:	08040dd4 	.word	0x08040dd4
 8023410:	08040e20 	.word	0x08040e20
 8023414:	08040e3c 	.word	0x08040e3c
 8023418:	08040e90 	.word	0x08040e90
 802341c:	08040ef0 	.word	0x08040ef0
 8023420:	08040f10 	.word	0x08040f10
    lfs->name_max = lfs->cfg->name_max;
 8023424:	687b      	ldr	r3, [r7, #4]
 8023426:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023428:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 802342a:	687b      	ldr	r3, [r7, #4]
 802342c:	671a      	str	r2, [r3, #112]	@ 0x70
    if (!lfs->name_max) {
 802342e:	687b      	ldr	r3, [r7, #4]
 8023430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8023432:	2b00      	cmp	r3, #0
 8023434:	d102      	bne.n	802343c <lfs_init+0x2d4>
        lfs->name_max = LFS_NAME_MAX;
 8023436:	687b      	ldr	r3, [r7, #4]
 8023438:	22ff      	movs	r2, #255	@ 0xff
 802343a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 802343c:	687b      	ldr	r3, [r7, #4]
 802343e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8023442:	2b00      	cmp	r3, #0
 8023444:	da06      	bge.n	8023454 <lfs_init+0x2ec>
 8023446:	4b71      	ldr	r3, [pc, #452]	@ (802360c <lfs_init+0x4a4>)
 8023448:	4a71      	ldr	r2, [pc, #452]	@ (8023610 <lfs_init+0x4a8>)
 802344a:	f241 01a2 	movw	r1, #4258	@ 0x10a2
 802344e:	4871      	ldr	r0, [pc, #452]	@ (8023614 <lfs_init+0x4ac>)
 8023450:	f00f ff7a 	bl	8033348 <__assert_func>
    lfs->file_max = lfs->cfg->file_max;
 8023454:	687b      	ldr	r3, [r7, #4]
 8023456:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023458:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 802345a:	687b      	ldr	r3, [r7, #4]
 802345c:	675a      	str	r2, [r3, #116]	@ 0x74
    if (!lfs->file_max) {
 802345e:	687b      	ldr	r3, [r7, #4]
 8023460:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8023462:	2b00      	cmp	r3, #0
 8023464:	d103      	bne.n	802346e <lfs_init+0x306>
        lfs->file_max = LFS_FILE_MAX;
 8023466:	687b      	ldr	r3, [r7, #4]
 8023468:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 802346c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 802346e:	687b      	ldr	r3, [r7, #4]
 8023470:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023472:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8023474:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8023478:	4293      	cmp	r3, r2
 802347a:	d906      	bls.n	802348a <lfs_init+0x322>
 802347c:	4b66      	ldr	r3, [pc, #408]	@ (8023618 <lfs_init+0x4b0>)
 802347e:	4a64      	ldr	r2, [pc, #400]	@ (8023610 <lfs_init+0x4a8>)
 8023480:	f241 01a8 	movw	r1, #4264	@ 0x10a8
 8023484:	4863      	ldr	r0, [pc, #396]	@ (8023614 <lfs_init+0x4ac>)
 8023486:	f00f ff5f 	bl	8033348 <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 802348a:	687b      	ldr	r3, [r7, #4]
 802348c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802348e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8023490:	687b      	ldr	r3, [r7, #4]
 8023492:	679a      	str	r2, [r3, #120]	@ 0x78
    if (!lfs->attr_max) {
 8023494:	687b      	ldr	r3, [r7, #4]
 8023496:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8023498:	2b00      	cmp	r3, #0
 802349a:	d103      	bne.n	80234a4 <lfs_init+0x33c>
        lfs->attr_max = LFS_ATTR_MAX;
 802349c:	687b      	ldr	r3, [r7, #4]
 802349e:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 80234a2:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 80234a4:	687b      	ldr	r3, [r7, #4]
 80234a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80234a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80234aa:	687b      	ldr	r3, [r7, #4]
 80234ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80234ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80234b0:	429a      	cmp	r2, r3
 80234b2:	d906      	bls.n	80234c2 <lfs_init+0x35a>
 80234b4:	4b59      	ldr	r3, [pc, #356]	@ (802361c <lfs_init+0x4b4>)
 80234b6:	4a56      	ldr	r2, [pc, #344]	@ (8023610 <lfs_init+0x4a8>)
 80234b8:	f241 01ae 	movw	r1, #4270	@ 0x10ae
 80234bc:	4855      	ldr	r0, [pc, #340]	@ (8023614 <lfs_init+0x4ac>)
 80234be:	f00f ff43 	bl	8033348 <__assert_func>

    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 80234c2:	687b      	ldr	r3, [r7, #4]
 80234c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80234c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80234c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80234cc:	d00e      	beq.n	80234ec <lfs_init+0x384>
 80234ce:	687b      	ldr	r3, [r7, #4]
 80234d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80234d2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80234d4:	687b      	ldr	r3, [r7, #4]
 80234d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80234d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80234da:	429a      	cmp	r2, r3
 80234dc:	d906      	bls.n	80234ec <lfs_init+0x384>
 80234de:	4b50      	ldr	r3, [pc, #320]	@ (8023620 <lfs_init+0x4b8>)
 80234e0:	4a4b      	ldr	r2, [pc, #300]	@ (8023610 <lfs_init+0x4a8>)
 80234e2:	f241 01b0 	movw	r1, #4272	@ 0x10b0
 80234e6:	484b      	ldr	r0, [pc, #300]	@ (8023614 <lfs_init+0x4ac>)
 80234e8:	f00f ff2e 	bl	8033348 <__assert_func>
            || lfs->cfg->inline_max <= lfs->cfg->cache_size);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 80234ec:	687b      	ldr	r3, [r7, #4]
 80234ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80234f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80234f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80234f6:	d00d      	beq.n	8023514 <lfs_init+0x3ac>
 80234f8:	687b      	ldr	r3, [r7, #4]
 80234fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80234fc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80234fe:	687b      	ldr	r3, [r7, #4]
 8023500:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8023502:	429a      	cmp	r2, r3
 8023504:	d906      	bls.n	8023514 <lfs_init+0x3ac>
 8023506:	4b47      	ldr	r3, [pc, #284]	@ (8023624 <lfs_init+0x4bc>)
 8023508:	4a41      	ldr	r2, [pc, #260]	@ (8023610 <lfs_init+0x4a8>)
 802350a:	f241 01b2 	movw	r1, #4274	@ 0x10b2
 802350e:	4841      	ldr	r0, [pc, #260]	@ (8023614 <lfs_init+0x4ac>)
 8023510:	f00f ff1a 	bl	8033348 <__assert_func>
            || lfs->cfg->inline_max <= lfs->attr_max);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 8023514:	687b      	ldr	r3, [r7, #4]
 8023516:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802351a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 802351e:	d019      	beq.n	8023554 <lfs_init+0x3ec>
 8023520:	687b      	ldr	r3, [r7, #4]
 8023522:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023524:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8023526:	687b      	ldr	r3, [r7, #4]
 8023528:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802352a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802352c:	2b00      	cmp	r3, #0
 802352e:	d004      	beq.n	802353a <lfs_init+0x3d2>
 8023530:	687b      	ldr	r3, [r7, #4]
 8023532:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8023536:	08db      	lsrs	r3, r3, #3
 8023538:	e003      	b.n	8023542 <lfs_init+0x3da>
 802353a:	687b      	ldr	r3, [r7, #4]
 802353c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802353e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023540:	08db      	lsrs	r3, r3, #3
 8023542:	4293      	cmp	r3, r2
 8023544:	d206      	bcs.n	8023554 <lfs_init+0x3ec>
 8023546:	4b38      	ldr	r3, [pc, #224]	@ (8023628 <lfs_init+0x4c0>)
 8023548:	4a31      	ldr	r2, [pc, #196]	@ (8023610 <lfs_init+0x4a8>)
 802354a:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 802354e:	4831      	ldr	r0, [pc, #196]	@ (8023614 <lfs_init+0x4ac>)
 8023550:	f00f fefa 	bl	8033348 <__assert_func>
            || lfs->cfg->inline_max <= ((lfs->cfg->metadata_max)
                ? lfs->cfg->metadata_max
                : lfs->cfg->block_size)/8);
    lfs->inline_max = lfs->cfg->inline_max;
 8023554:	687b      	ldr	r3, [r7, #4]
 8023556:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023558:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 802355a:	687b      	ldr	r3, [r7, #4]
 802355c:	67da      	str	r2, [r3, #124]	@ 0x7c
    if (lfs->inline_max == (lfs_size_t)-1) {
 802355e:	687b      	ldr	r3, [r7, #4]
 8023560:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8023562:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8023566:	d103      	bne.n	8023570 <lfs_init+0x408>
        lfs->inline_max = 0;
 8023568:	687b      	ldr	r3, [r7, #4]
 802356a:	2200      	movs	r2, #0
 802356c:	67da      	str	r2, [r3, #124]	@ 0x7c
 802356e:	e022      	b.n	80235b6 <lfs_init+0x44e>
    } else if (lfs->inline_max == 0) {
 8023570:	687b      	ldr	r3, [r7, #4]
 8023572:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8023574:	2b00      	cmp	r3, #0
 8023576:	d11e      	bne.n	80235b6 <lfs_init+0x44e>
        lfs->inline_max = lfs_min(
                lfs->cfg->cache_size,
 8023578:	687b      	ldr	r3, [r7, #4]
 802357a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802357c:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
        lfs->inline_max = lfs_min(
 802357e:	687b      	ldr	r3, [r7, #4]
 8023580:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                lfs_min(
                    lfs->attr_max,
                    ((lfs->cfg->metadata_max)
 8023582:	687b      	ldr	r3, [r7, #4]
 8023584:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
        lfs->inline_max = lfs_min(
 8023588:	2b00      	cmp	r3, #0
 802358a:	d004      	beq.n	8023596 <lfs_init+0x42e>
                        ? lfs->cfg->metadata_max
 802358c:	687b      	ldr	r3, [r7, #4]
 802358e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
        lfs->inline_max = lfs_min(
 8023592:	08db      	lsrs	r3, r3, #3
 8023594:	e003      	b.n	802359e <lfs_init+0x436>
                        : lfs->cfg->block_size)/8));
 8023596:	687b      	ldr	r3, [r7, #4]
 8023598:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802359a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        lfs->inline_max = lfs_min(
 802359c:	08db      	lsrs	r3, r3, #3
 802359e:	4619      	mov	r1, r3
 80235a0:	4610      	mov	r0, r2
 80235a2:	f7f9 fd20 	bl	801cfe6 <lfs_min>
 80235a6:	4603      	mov	r3, r0
 80235a8:	4619      	mov	r1, r3
 80235aa:	4620      	mov	r0, r4
 80235ac:	f7f9 fd1b 	bl	801cfe6 <lfs_min>
 80235b0:	4602      	mov	r2, r0
 80235b2:	687b      	ldr	r3, [r7, #4]
 80235b4:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 80235b6:	687b      	ldr	r3, [r7, #4]
 80235b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80235bc:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 80235be:	687b      	ldr	r3, [r7, #4]
 80235c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80235c4:	625a      	str	r2, [r3, #36]	@ 0x24
    lfs->mlist = NULL;
 80235c6:	687b      	ldr	r3, [r7, #4]
 80235c8:	2200      	movs	r2, #0
 80235ca:	629a      	str	r2, [r3, #40]	@ 0x28
    lfs->seed = 0;
 80235cc:	687b      	ldr	r3, [r7, #4]
 80235ce:	2200      	movs	r2, #0
 80235d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 80235d2:	687b      	ldr	r3, [r7, #4]
 80235d4:	333c      	adds	r3, #60	@ 0x3c
 80235d6:	2200      	movs	r2, #0
 80235d8:	601a      	str	r2, [r3, #0]
 80235da:	605a      	str	r2, [r3, #4]
 80235dc:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 80235de:	687b      	ldr	r3, [r7, #4]
 80235e0:	3330      	adds	r3, #48	@ 0x30
 80235e2:	2200      	movs	r2, #0
 80235e4:	601a      	str	r2, [r3, #0]
 80235e6:	605a      	str	r2, [r3, #4]
 80235e8:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 80235ea:	687b      	ldr	r3, [r7, #4]
 80235ec:	3348      	adds	r3, #72	@ 0x48
 80235ee:	2200      	movs	r2, #0
 80235f0:	601a      	str	r2, [r3, #0]
 80235f2:	605a      	str	r2, [r3, #4]
 80235f4:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 80235f6:	2300      	movs	r3, #0
 80235f8:	e003      	b.n	8023602 <lfs_init+0x49a>

cleanup:
    lfs_deinit(lfs);
 80235fa:	6878      	ldr	r0, [r7, #4]
 80235fc:	f000 f816 	bl	802362c <lfs_deinit>
    return err;
 8023600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8023602:	4618      	mov	r0, r3
 8023604:	3734      	adds	r7, #52	@ 0x34
 8023606:	46bd      	mov	sp, r7
 8023608:	bd90      	pop	{r4, r7, pc}
 802360a:	bf00      	nop
 802360c:	08040f2c 	.word	0x08040f2c
 8023610:	08044424 	.word	0x08044424
 8023614:	08040920 	.word	0x08040920
 8023618:	08040f50 	.word	0x08040f50
 802361c:	08040f6c 	.word	0x08040f6c
 8023620:	08040f9c 	.word	0x08040f9c
 8023624:	08040ff4 	.word	0x08040ff4
 8023628:	08041044 	.word	0x08041044

0802362c <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 802362c:	b580      	push	{r7, lr}
 802362e:	b082      	sub	sp, #8
 8023630:	af00      	add	r7, sp, #0
 8023632:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8023634:	687b      	ldr	r3, [r7, #4]
 8023636:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802363a:	2b00      	cmp	r3, #0
 802363c:	d104      	bne.n	8023648 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 802363e:	687b      	ldr	r3, [r7, #4]
 8023640:	68db      	ldr	r3, [r3, #12]
 8023642:	4618      	mov	r0, r3
 8023644:	f7f9 fd7a 	bl	801d13c <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 8023648:	687b      	ldr	r3, [r7, #4]
 802364a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802364c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802364e:	2b00      	cmp	r3, #0
 8023650:	d104      	bne.n	802365c <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 8023652:	687b      	ldr	r3, [r7, #4]
 8023654:	69db      	ldr	r3, [r3, #28]
 8023656:	4618      	mov	r0, r3
 8023658:	f7f9 fd70 	bl	801d13c <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 802365c:	687b      	ldr	r3, [r7, #4]
 802365e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8023662:	2b00      	cmp	r3, #0
 8023664:	d104      	bne.n	8023670 <lfs_deinit+0x44>
        lfs_free(lfs->lookahead.buffer);
 8023666:	687b      	ldr	r3, [r7, #4]
 8023668:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 802366a:	4618      	mov	r0, r3
 802366c:	f7f9 fd66 	bl	801d13c <lfs_free>
    }

    return 0;
 8023670:	2300      	movs	r3, #0
}
 8023672:	4618      	mov	r0, r3
 8023674:	3708      	adds	r7, #8
 8023676:	46bd      	mov	sp, r7
 8023678:	bd80      	pop	{r7, pc}
	...

0802367c <lfs_format_>:



#ifndef LFS_READONLY
static int lfs_format_(lfs_t *lfs, const struct lfs_config *cfg) {
 802367c:	b580      	push	{r7, lr}
 802367e:	b0a0      	sub	sp, #128	@ 0x80
 8023680:	af00      	add	r7, sp, #0
 8023682:	6078      	str	r0, [r7, #4]
 8023684:	6039      	str	r1, [r7, #0]
    int err = 0;
 8023686:	2300      	movs	r3, #0
 8023688:	67fb      	str	r3, [r7, #124]	@ 0x7c
    {
        err = lfs_init(lfs, cfg);
 802368a:	6839      	ldr	r1, [r7, #0]
 802368c:	6878      	ldr	r0, [r7, #4]
 802368e:	f7ff fd6b 	bl	8023168 <lfs_init>
 8023692:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 8023694:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8023696:	2b00      	cmp	r3, #0
 8023698:	d001      	beq.n	802369e <lfs_format_+0x22>
            return err;
 802369a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 802369c:	e08d      	b.n	80237ba <lfs_format_+0x13e>
        }

        LFS_ASSERT(cfg->block_count != 0);
 802369e:	683b      	ldr	r3, [r7, #0]
 80236a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80236a2:	2b00      	cmp	r3, #0
 80236a4:	d106      	bne.n	80236b4 <lfs_format_+0x38>
 80236a6:	4b47      	ldr	r3, [pc, #284]	@ (80237c4 <lfs_format_+0x148>)
 80236a8:	4a47      	ldr	r2, [pc, #284]	@ (80237c8 <lfs_format_+0x14c>)
 80236aa:	f241 01f4 	movw	r1, #4340	@ 0x10f4
 80236ae:	4847      	ldr	r0, [pc, #284]	@ (80237cc <lfs_format_+0x150>)
 80236b0:	f00f fe4a 	bl	8033348 <__assert_func>

        // create free lookahead
        memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 80236b4:	687b      	ldr	r3, [r7, #4]
 80236b6:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 80236b8:	687b      	ldr	r3, [r7, #4]
 80236ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80236bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80236be:	461a      	mov	r2, r3
 80236c0:	2100      	movs	r1, #0
 80236c2:	f012 fb95 	bl	8035df0 <memset>
        lfs->lookahead.start = 0;
 80236c6:	687b      	ldr	r3, [r7, #4]
 80236c8:	2200      	movs	r2, #0
 80236ca:	655a      	str	r2, [r3, #84]	@ 0x54
        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,
 80236cc:	687b      	ldr	r3, [r7, #4]
 80236ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80236d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80236d2:	00da      	lsls	r2, r3, #3
 80236d4:	687b      	ldr	r3, [r7, #4]
 80236d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80236d8:	4619      	mov	r1, r3
 80236da:	4610      	mov	r0, r2
 80236dc:	f7f9 fc83 	bl	801cfe6 <lfs_min>
 80236e0:	4602      	mov	r2, r0
 80236e2:	687b      	ldr	r3, [r7, #4]
 80236e4:	659a      	str	r2, [r3, #88]	@ 0x58
                lfs->block_count);
        lfs->lookahead.next = 0;
 80236e6:	687b      	ldr	r3, [r7, #4]
 80236e8:	2200      	movs	r2, #0
 80236ea:	65da      	str	r2, [r3, #92]	@ 0x5c
        lfs_alloc_ckpoint(lfs);
 80236ec:	6878      	ldr	r0, [r7, #4]
 80236ee:	f7fa fc54 	bl	801df9a <lfs_alloc_ckpoint>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 80236f2:	f107 030c 	add.w	r3, r7, #12
 80236f6:	4619      	mov	r1, r3
 80236f8:	6878      	ldr	r0, [r7, #4]
 80236fa:	f7fc fb9b 	bl	801fe34 <lfs_dir_alloc>
 80236fe:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 8023700:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8023702:	2b00      	cmp	r3, #0
 8023704:	d150      	bne.n	80237a8 <lfs_format_+0x12c>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
            .version     = lfs_fs_disk_version(lfs),
 8023706:	6878      	ldr	r0, [r7, #4]
 8023708:	f7fa fc1e 	bl	801df48 <lfs_fs_disk_version>
 802370c:	4603      	mov	r3, r0
        lfs_superblock_t superblock = {
 802370e:	667b      	str	r3, [r7, #100]	@ 0x64
            .block_size  = lfs->cfg->block_size,
 8023710:	687b      	ldr	r3, [r7, #4]
 8023712:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        lfs_superblock_t superblock = {
 8023716:	66bb      	str	r3, [r7, #104]	@ 0x68
            .block_count = lfs->block_count,
 8023718:	687b      	ldr	r3, [r7, #4]
 802371a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        lfs_superblock_t superblock = {
 802371c:	66fb      	str	r3, [r7, #108]	@ 0x6c
            .name_max    = lfs->name_max,
 802371e:	687b      	ldr	r3, [r7, #4]
 8023720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
        lfs_superblock_t superblock = {
 8023722:	673b      	str	r3, [r7, #112]	@ 0x70
            .file_max    = lfs->file_max,
 8023724:	687b      	ldr	r3, [r7, #4]
 8023726:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
        lfs_superblock_t superblock = {
 8023728:	677b      	str	r3, [r7, #116]	@ 0x74
            .attr_max    = lfs->attr_max,
 802372a:	687b      	ldr	r3, [r7, #4]
 802372c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
        lfs_superblock_t superblock = {
 802372e:	67bb      	str	r3, [r7, #120]	@ 0x78
        };

        lfs_superblock_tole32(&superblock);
 8023730:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8023734:	4618      	mov	r0, r3
 8023736:	f7fa fb7d 	bl	801de34 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 802373a:	4b25      	ldr	r3, [pc, #148]	@ (80237d0 <lfs_format_+0x154>)
 802373c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802373e:	2300      	movs	r3, #0
 8023740:	653b      	str	r3, [r7, #80]	@ 0x50
 8023742:	4b24      	ldr	r3, [pc, #144]	@ (80237d4 <lfs_format_+0x158>)
 8023744:	657b      	str	r3, [r7, #84]	@ 0x54
 8023746:	4b24      	ldr	r3, [pc, #144]	@ (80237d8 <lfs_format_+0x15c>)
 8023748:	65bb      	str	r3, [r7, #88]	@ 0x58
 802374a:	4b24      	ldr	r3, [pc, #144]	@ (80237dc <lfs_format_+0x160>)
 802374c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 802374e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8023752:	663b      	str	r3, [r7, #96]	@ 0x60
 8023754:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8023758:	f107 010c 	add.w	r1, r7, #12
 802375c:	2303      	movs	r3, #3
 802375e:	6878      	ldr	r0, [r7, #4]
 8023760:	f7fd fd90 	bl	8021284 <lfs_dir_commit>
 8023764:	67f8      	str	r0, [r7, #124]	@ 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 8023766:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8023768:	2b00      	cmp	r3, #0
 802376a:	d11f      	bne.n	80237ac <lfs_format_+0x130>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 802376c:	2300      	movs	r3, #0
 802376e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 8023772:	f107 010c 	add.w	r1, r7, #12
 8023776:	2300      	movs	r3, #0
 8023778:	2200      	movs	r2, #0
 802377a:	6878      	ldr	r0, [r7, #4]
 802377c:	f7fd fd82 	bl	8021284 <lfs_dir_commit>
 8023780:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 8023782:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8023784:	2b00      	cmp	r3, #0
 8023786:	d113      	bne.n	80237b0 <lfs_format_+0x134>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 8023788:	2300      	movs	r3, #0
 802378a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802378c:	2301      	movs	r3, #1
 802378e:	633b      	str	r3, [r7, #48]	@ 0x30
 8023790:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8023794:	f107 030c 	add.w	r3, r7, #12
 8023798:	4619      	mov	r1, r3
 802379a:	6878      	ldr	r0, [r7, #4]
 802379c:	f7fb ff18 	bl	801f5d0 <lfs_dir_fetch>
 80237a0:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 80237a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80237a4:	2b00      	cmp	r3, #0
 80237a6:	e004      	b.n	80237b2 <lfs_format_+0x136>
            goto cleanup;
 80237a8:	bf00      	nop
 80237aa:	e002      	b.n	80237b2 <lfs_format_+0x136>
            goto cleanup;
 80237ac:	bf00      	nop
 80237ae:	e000      	b.n	80237b2 <lfs_format_+0x136>
            goto cleanup;
 80237b0:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 80237b2:	6878      	ldr	r0, [r7, #4]
 80237b4:	f7ff ff3a 	bl	802362c <lfs_deinit>
    return err;
 80237b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c

}
 80237ba:	4618      	mov	r0, r3
 80237bc:	3780      	adds	r7, #128	@ 0x80
 80237be:	46bd      	mov	sp, r7
 80237c0:	bd80      	pop	{r7, pc}
 80237c2:	bf00      	nop
 80237c4:	080410d4 	.word	0x080410d4
 80237c8:	08044430 	.word	0x08044430
 80237cc:	08040920 	.word	0x08040920
 80237d0:	40100000 	.word	0x40100000
 80237d4:	0ff00008 	.word	0x0ff00008
 80237d8:	080410ec 	.word	0x080410ec
 80237dc:	20100018 	.word	0x20100018

080237e0 <lfs_mount_>:
#endif

static int lfs_mount_(lfs_t *lfs, const struct lfs_config *cfg) {
 80237e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80237e2:	b0a1      	sub	sp, #132	@ 0x84
 80237e4:	af04      	add	r7, sp, #16
 80237e6:	6078      	str	r0, [r7, #4]
 80237e8:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 80237ea:	6839      	ldr	r1, [r7, #0]
 80237ec:	6878      	ldr	r0, [r7, #4]
 80237ee:	f7ff fcbb 	bl	8023168 <lfs_init>
 80237f2:	66f8      	str	r0, [r7, #108]	@ 0x6c
    if (err) {
 80237f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80237f6:	2b00      	cmp	r3, #0
 80237f8:	d001      	beq.n	80237fe <lfs_mount_+0x1e>
        return err;
 80237fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80237fc:	e202      	b.n	8023c04 <lfs_mount_+0x424>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 80237fe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8023802:	2220      	movs	r2, #32
 8023804:	2100      	movs	r1, #0
 8023806:	4618      	mov	r0, r3
 8023808:	f012 faf2 	bl	8035df0 <memset>
 802380c:	2301      	movs	r3, #1
 802380e:	657b      	str	r3, [r7, #84]	@ 0x54
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8023810:	4a9a      	ldr	r2, [pc, #616]	@ (8023a7c <lfs_mount_+0x29c>)
 8023812:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8023816:	e892 0003 	ldmia.w	r2, {r0, r1}
 802381a:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 802381e:	2301      	movs	r3, #1
 8023820:	66bb      	str	r3, [r7, #104]	@ 0x68
    lfs_size_t tortoise_period = 1;
 8023822:	2301      	movs	r3, #1
 8023824:	667b      	str	r3, [r7, #100]	@ 0x64
    while (!lfs_pair_isnull(dir.tail)) {
 8023826:	e199      	b.n	8023b5c <lfs_mount_+0x37c>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 8023828:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 802382c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8023830:	3318      	adds	r3, #24
 8023832:	4611      	mov	r1, r2
 8023834:	4618      	mov	r0, r3
 8023836:	f7fa f87d 	bl	801d934 <lfs_pair_issync>
 802383a:	4603      	mov	r3, r0
 802383c:	2b00      	cmp	r3, #0
 802383e:	d00a      	beq.n	8023856 <lfs_mount_+0x76>
            LFS_WARN("Cycle detected in tail list");
 8023840:	4b8f      	ldr	r3, [pc, #572]	@ (8023a80 <lfs_mount_+0x2a0>)
 8023842:	f241 123d 	movw	r2, #4413	@ 0x113d
 8023846:	498f      	ldr	r1, [pc, #572]	@ (8023a84 <lfs_mount_+0x2a4>)
 8023848:	488f      	ldr	r0, [pc, #572]	@ (8023a88 <lfs_mount_+0x2a8>)
 802384a:	f00f fdb1 	bl	80333b0 <printf>
            err = LFS_ERR_CORRUPT;
 802384e:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8023852:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto cleanup;
 8023854:	e1d2      	b.n	8023bfc <lfs_mount_+0x41c>
        }
        if (tortoise_i == tortoise_period) {
 8023856:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8023858:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802385a:	429a      	cmp	r2, r3
 802385c:	d108      	bne.n	8023870 <lfs_mount_+0x90>
            tortoise[0] = dir.tail[0];
 802385e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8023860:	633b      	str	r3, [r7, #48]	@ 0x30
            tortoise[1] = dir.tail[1];
 8023862:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8023864:	637b      	str	r3, [r7, #52]	@ 0x34
            tortoise_i = 0;
 8023866:	2300      	movs	r3, #0
 8023868:	66bb      	str	r3, [r7, #104]	@ 0x68
            tortoise_period *= 2;
 802386a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802386c:	005b      	lsls	r3, r3, #1
 802386e:	667b      	str	r3, [r7, #100]	@ 0x64
        }
        tortoise_i += 1;
 8023870:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8023872:	3301      	adds	r3, #1
 8023874:	66bb      	str	r3, [r7, #104]	@ 0x68
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 8023876:	687b      	ldr	r3, [r7, #4]
 8023878:	627b      	str	r3, [r7, #36]	@ 0x24
 802387a:	4b84      	ldr	r3, [pc, #528]	@ (8023a8c <lfs_mount_+0x2ac>)
 802387c:	62bb      	str	r3, [r7, #40]	@ 0x28
 802387e:	2308      	movs	r3, #8
 8023880:	62fb      	str	r3, [r7, #44]	@ 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 8023882:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8023886:	f103 0218 	add.w	r2, r3, #24
 802388a:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 802388e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8023892:	9303      	str	r3, [sp, #12]
 8023894:	4b7e      	ldr	r3, [pc, #504]	@ (8023a90 <lfs_mount_+0x2b0>)
 8023896:	9302      	str	r3, [sp, #8]
 8023898:	2300      	movs	r3, #0
 802389a:	9301      	str	r3, [sp, #4]
 802389c:	4b7d      	ldr	r3, [pc, #500]	@ (8023a94 <lfs_mount_+0x2b4>)
 802389e:	9300      	str	r3, [sp, #0]
 80238a0:	4b7d      	ldr	r3, [pc, #500]	@ (8023a98 <lfs_mount_+0x2b8>)
 80238a2:	6878      	ldr	r0, [r7, #4]
 80238a4:	f7fb fac4 	bl	801ee30 <lfs_dir_fetchmatch>
 80238a8:	65f8      	str	r0, [r7, #92]	@ 0x5c
                    lfs, "littlefs", 8});
        if (tag < 0) {
 80238aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80238ac:	2b00      	cmp	r3, #0
 80238ae:	da02      	bge.n	80238b6 <lfs_mount_+0xd6>
            err = tag;
 80238b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80238b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto cleanup;
 80238b4:	e1a2      	b.n	8023bfc <lfs_mount_+0x41c>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 80238b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80238b8:	2b00      	cmp	r3, #0
 80238ba:	f000 8142 	beq.w	8023b42 <lfs_mount_+0x362>
 80238be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80238c0:	4618      	mov	r0, r3
 80238c2:	f7fa f8a6 	bl	801da12 <lfs_tag_isdelete>
 80238c6:	4603      	mov	r3, r0
 80238c8:	f083 0301 	eor.w	r3, r3, #1
 80238cc:	b2db      	uxtb	r3, r3
 80238ce:	2b00      	cmp	r3, #0
 80238d0:	f000 8137 	beq.w	8023b42 <lfs_mount_+0x362>
            // update root
            lfs->root[0] = dir.pair[0];
 80238d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80238d6:	687b      	ldr	r3, [r7, #4]
 80238d8:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 80238da:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80238dc:	687b      	ldr	r3, [r7, #4]
 80238de:	625a      	str	r2, [r3, #36]	@ 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 80238e0:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80238e4:	f107 030c 	add.w	r3, r7, #12
 80238e8:	9300      	str	r3, [sp, #0]
 80238ea:	4b6c      	ldr	r3, [pc, #432]	@ (8023a9c <lfs_mount_+0x2bc>)
 80238ec:	4a6a      	ldr	r2, [pc, #424]	@ (8023a98 <lfs_mount_+0x2b8>)
 80238ee:	6878      	ldr	r0, [r7, #4]
 80238f0:	f7fa fd68 	bl	801e3c4 <lfs_dir_get>
 80238f4:	65f8      	str	r0, [r7, #92]	@ 0x5c
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 80238f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80238f8:	2b00      	cmp	r3, #0
 80238fa:	da02      	bge.n	8023902 <lfs_mount_+0x122>
                err = tag;
 80238fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80238fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 8023900:	e17c      	b.n	8023bfc <lfs_mount_+0x41c>
            }
            lfs_superblock_fromle32(&superblock);
 8023902:	f107 030c 	add.w	r3, r7, #12
 8023906:	4618      	mov	r0, r3
 8023908:	f7fa fa5c 	bl	801ddc4 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 802390c:	68fb      	ldr	r3, [r7, #12]
 802390e:	0c1b      	lsrs	r3, r3, #16
 8023910:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 8023914:	68fb      	ldr	r3, [r7, #12]
 8023916:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
            if (major_version != lfs_fs_disk_version_major(lfs)
 802391a:	6878      	ldr	r0, [r7, #4]
 802391c:	f7fa fb22 	bl	801df64 <lfs_fs_disk_version_major>
 8023920:	4603      	mov	r3, r0
 8023922:	461a      	mov	r2, r3
 8023924:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8023928:	4293      	cmp	r3, r2
 802392a:	d108      	bne.n	802393e <lfs_mount_+0x15e>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 802392c:	6878      	ldr	r0, [r7, #4]
 802392e:	f7fa fb27 	bl	801df80 <lfs_fs_disk_version_minor>
 8023932:	4603      	mov	r3, r0
 8023934:	461a      	mov	r2, r3
 8023936:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 802393a:	4293      	cmp	r3, r2
 802393c:	d91d      	bls.n	802397a <lfs_mount_+0x19a>
                LFS_ERROR("Invalid version "
 802393e:	f8b7 505a 	ldrh.w	r5, [r7, #90]	@ 0x5a
 8023942:	f8b7 4058 	ldrh.w	r4, [r7, #88]	@ 0x58
 8023946:	6878      	ldr	r0, [r7, #4]
 8023948:	f7fa fb0c 	bl	801df64 <lfs_fs_disk_version_major>
 802394c:	4603      	mov	r3, r0
 802394e:	461e      	mov	r6, r3
 8023950:	6878      	ldr	r0, [r7, #4]
 8023952:	f7fa fb15 	bl	801df80 <lfs_fs_disk_version_minor>
 8023956:	4603      	mov	r3, r0
 8023958:	461a      	mov	r2, r3
 802395a:	4b49      	ldr	r3, [pc, #292]	@ (8023a80 <lfs_mount_+0x2a0>)
 802395c:	9303      	str	r3, [sp, #12]
 802395e:	9202      	str	r2, [sp, #8]
 8023960:	9601      	str	r6, [sp, #4]
 8023962:	9400      	str	r4, [sp, #0]
 8023964:	462b      	mov	r3, r5
 8023966:	f241 126b 	movw	r2, #4459	@ 0x116b
 802396a:	4946      	ldr	r1, [pc, #280]	@ (8023a84 <lfs_mount_+0x2a4>)
 802396c:	484c      	ldr	r0, [pc, #304]	@ (8023aa0 <lfs_mount_+0x2c0>)
 802396e:	f00f fd1f 	bl	80333b0 <printf>
                        "v%"PRIu16".%"PRIu16" != v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                err = LFS_ERR_INVAL;
 8023972:	f06f 0315 	mvn.w	r3, #21
 8023976:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 8023978:	e0e2      	b.n	8023b40 <lfs_mount_+0x360>
            }

            // found older minor version? set an in-device only bit in the
            // gstate so we know we need to rewrite the superblock before
            // the first write
            bool needssuperblock = false;
 802397a:	2300      	movs	r3, #0
 802397c:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 8023980:	6878      	ldr	r0, [r7, #4]
 8023982:	f7fa fafd 	bl	801df80 <lfs_fs_disk_version_minor>
 8023986:	4603      	mov	r3, r0
 8023988:	461a      	mov	r2, r3
 802398a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 802398e:	4293      	cmp	r3, r2
 8023990:	d21c      	bcs.n	80239cc <lfs_mount_+0x1ec>
                LFS_DEBUG("Found older minor version "
 8023992:	f8b7 505a 	ldrh.w	r5, [r7, #90]	@ 0x5a
 8023996:	f8b7 4058 	ldrh.w	r4, [r7, #88]	@ 0x58
 802399a:	6878      	ldr	r0, [r7, #4]
 802399c:	f7fa fae2 	bl	801df64 <lfs_fs_disk_version_major>
 80239a0:	4603      	mov	r3, r0
 80239a2:	461e      	mov	r6, r3
 80239a4:	6878      	ldr	r0, [r7, #4]
 80239a6:	f7fa faeb 	bl	801df80 <lfs_fs_disk_version_minor>
 80239aa:	4603      	mov	r3, r0
 80239ac:	461a      	mov	r2, r3
 80239ae:	4b34      	ldr	r3, [pc, #208]	@ (8023a80 <lfs_mount_+0x2a0>)
 80239b0:	9303      	str	r3, [sp, #12]
 80239b2:	9202      	str	r2, [sp, #8]
 80239b4:	9601      	str	r6, [sp, #4]
 80239b6:	9400      	str	r4, [sp, #0]
 80239b8:	462b      	mov	r3, r5
 80239ba:	f241 127a 	movw	r2, #4474	@ 0x117a
 80239be:	4931      	ldr	r1, [pc, #196]	@ (8023a84 <lfs_mount_+0x2a4>)
 80239c0:	4838      	ldr	r0, [pc, #224]	@ (8023aa4 <lfs_mount_+0x2c4>)
 80239c2:	f00f fcf5 	bl	80333b0 <printf>
                        "v%"PRIu16".%"PRIu16" < v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                needssuperblock = true;
 80239c6:	2301      	movs	r3, #1
 80239c8:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
            }
            // note this bit is reserved on disk, so fetching more gstate
            // will not interfere here
            lfs_fs_prepsuperblock(lfs, needssuperblock);
 80239cc:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80239d0:	4619      	mov	r1, r3
 80239d2:	6878      	ldr	r0, [r7, #4]
 80239d4:	f000 fbb4 	bl	8024140 <lfs_fs_prepsuperblock>

            // check superblock configuration
            if (superblock.name_max) {
 80239d8:	69bb      	ldr	r3, [r7, #24]
 80239da:	2b00      	cmp	r3, #0
 80239dc:	d018      	beq.n	8023a10 <lfs_mount_+0x230>
                if (superblock.name_max > lfs->name_max) {
 80239de:	69ba      	ldr	r2, [r7, #24]
 80239e0:	687b      	ldr	r3, [r7, #4]
 80239e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80239e4:	429a      	cmp	r2, r3
 80239e6:	d910      	bls.n	8023a0a <lfs_mount_+0x22a>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 80239e8:	69ba      	ldr	r2, [r7, #24]
 80239ea:	687b      	ldr	r3, [r7, #4]
 80239ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80239ee:	4924      	ldr	r1, [pc, #144]	@ (8023a80 <lfs_mount_+0x2a0>)
 80239f0:	9101      	str	r1, [sp, #4]
 80239f2:	9300      	str	r3, [sp, #0]
 80239f4:	4613      	mov	r3, r2
 80239f6:	f241 1289 	movw	r2, #4489	@ 0x1189
 80239fa:	4922      	ldr	r1, [pc, #136]	@ (8023a84 <lfs_mount_+0x2a4>)
 80239fc:	482a      	ldr	r0, [pc, #168]	@ (8023aa8 <lfs_mount_+0x2c8>)
 80239fe:	f00f fcd7 	bl	80333b0 <printf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 8023a02:	f06f 0315 	mvn.w	r3, #21
 8023a06:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 8023a08:	e09a      	b.n	8023b40 <lfs_mount_+0x360>
                }

                lfs->name_max = superblock.name_max;
 8023a0a:	69ba      	ldr	r2, [r7, #24]
 8023a0c:	687b      	ldr	r3, [r7, #4]
 8023a0e:	671a      	str	r2, [r3, #112]	@ 0x70
            }

            if (superblock.file_max) {
 8023a10:	69fb      	ldr	r3, [r7, #28]
 8023a12:	2b00      	cmp	r3, #0
 8023a14:	d018      	beq.n	8023a48 <lfs_mount_+0x268>
                if (superblock.file_max > lfs->file_max) {
 8023a16:	69fa      	ldr	r2, [r7, #28]
 8023a18:	687b      	ldr	r3, [r7, #4]
 8023a1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8023a1c:	429a      	cmp	r2, r3
 8023a1e:	d910      	bls.n	8023a42 <lfs_mount_+0x262>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 8023a20:	69fa      	ldr	r2, [r7, #28]
 8023a22:	687b      	ldr	r3, [r7, #4]
 8023a24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8023a26:	4916      	ldr	r1, [pc, #88]	@ (8023a80 <lfs_mount_+0x2a0>)
 8023a28:	9101      	str	r1, [sp, #4]
 8023a2a:	9300      	str	r3, [sp, #0]
 8023a2c:	4613      	mov	r3, r2
 8023a2e:	f241 1294 	movw	r2, #4500	@ 0x1194
 8023a32:	4914      	ldr	r1, [pc, #80]	@ (8023a84 <lfs_mount_+0x2a4>)
 8023a34:	481d      	ldr	r0, [pc, #116]	@ (8023aac <lfs_mount_+0x2cc>)
 8023a36:	f00f fcbb 	bl	80333b0 <printf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 8023a3a:	f06f 0315 	mvn.w	r3, #21
 8023a3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 8023a40:	e07e      	b.n	8023b40 <lfs_mount_+0x360>
                }

                lfs->file_max = superblock.file_max;
 8023a42:	69fa      	ldr	r2, [r7, #28]
 8023a44:	687b      	ldr	r3, [r7, #4]
 8023a46:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            if (superblock.attr_max) {
 8023a48:	6a3b      	ldr	r3, [r7, #32]
 8023a4a:	2b00      	cmp	r3, #0
 8023a4c:	d040      	beq.n	8023ad0 <lfs_mount_+0x2f0>
                if (superblock.attr_max > lfs->attr_max) {
 8023a4e:	6a3a      	ldr	r2, [r7, #32]
 8023a50:	687b      	ldr	r3, [r7, #4]
 8023a52:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8023a54:	429a      	cmp	r2, r3
 8023a56:	d92d      	bls.n	8023ab4 <lfs_mount_+0x2d4>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 8023a58:	6a3a      	ldr	r2, [r7, #32]
 8023a5a:	687b      	ldr	r3, [r7, #4]
 8023a5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8023a5e:	4908      	ldr	r1, [pc, #32]	@ (8023a80 <lfs_mount_+0x2a0>)
 8023a60:	9101      	str	r1, [sp, #4]
 8023a62:	9300      	str	r3, [sp, #0]
 8023a64:	4613      	mov	r3, r2
 8023a66:	f241 129f 	movw	r2, #4511	@ 0x119f
 8023a6a:	4906      	ldr	r1, [pc, #24]	@ (8023a84 <lfs_mount_+0x2a4>)
 8023a6c:	4810      	ldr	r0, [pc, #64]	@ (8023ab0 <lfs_mount_+0x2d0>)
 8023a6e:	f00f fc9f 	bl	80333b0 <printf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 8023a72:	f06f 0315 	mvn.w	r3, #21
 8023a76:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 8023a78:	e062      	b.n	8023b40 <lfs_mount_+0x360>
 8023a7a:	bf00      	nop
 8023a7c:	08040a8c 	.word	0x08040a8c
 8023a80:	08040a48 	.word	0x08040a48
 8023a84:	08040920 	.word	0x08040920
 8023a88:	080410f8 	.word	0x080410f8
 8023a8c:	080410ec 	.word	0x080410ec
 8023a90:	0801f761 	.word	0x0801f761
 8023a94:	0ff00008 	.word	0x0ff00008
 8023a98:	7ffffc00 	.word	0x7ffffc00
 8023a9c:	20100018 	.word	0x20100018
 8023aa0:	08041124 	.word	0x08041124
 8023aa4:	0804115c 	.word	0x0804115c
 8023aa8:	0804119c 	.word	0x0804119c
 8023aac:	080411d0 	.word	0x080411d0
 8023ab0:	08041204 	.word	0x08041204
                }

                lfs->attr_max = superblock.attr_max;
 8023ab4:	6a3a      	ldr	r2, [r7, #32]
 8023ab6:	687b      	ldr	r3, [r7, #4]
 8023ab8:	679a      	str	r2, [r3, #120]	@ 0x78

                // we also need to update inline_max in case attr_max changed
                lfs->inline_max = lfs_min(lfs->inline_max, lfs->attr_max);
 8023aba:	687b      	ldr	r3, [r7, #4]
 8023abc:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8023abe:	687b      	ldr	r3, [r7, #4]
 8023ac0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8023ac2:	4619      	mov	r1, r3
 8023ac4:	4610      	mov	r0, r2
 8023ac6:	f7f9 fa8e 	bl	801cfe6 <lfs_min>
 8023aca:	4602      	mov	r2, r0
 8023acc:	687b      	ldr	r3, [r7, #4]
 8023ace:	67da      	str	r2, [r3, #124]	@ 0x7c
            }

            // this is where we get the block_count from disk if block_count=0
            if (lfs->cfg->block_count
 8023ad0:	687b      	ldr	r3, [r7, #4]
 8023ad2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023ad6:	2b00      	cmp	r3, #0
 8023ad8:	d017      	beq.n	8023b0a <lfs_mount_+0x32a>
                    && superblock.block_count != lfs->cfg->block_count) {
 8023ada:	697a      	ldr	r2, [r7, #20]
 8023adc:	687b      	ldr	r3, [r7, #4]
 8023ade:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023ae2:	429a      	cmp	r2, r3
 8023ae4:	d011      	beq.n	8023b0a <lfs_mount_+0x32a>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 8023ae6:	697a      	ldr	r2, [r7, #20]
 8023ae8:	687b      	ldr	r3, [r7, #4]
 8023aea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023aee:	4947      	ldr	r1, [pc, #284]	@ (8023c0c <lfs_mount_+0x42c>)
 8023af0:	9101      	str	r1, [sp, #4]
 8023af2:	9300      	str	r3, [sp, #0]
 8023af4:	4613      	mov	r3, r2
 8023af6:	f241 12ae 	movw	r2, #4526	@ 0x11ae
 8023afa:	4945      	ldr	r1, [pc, #276]	@ (8023c10 <lfs_mount_+0x430>)
 8023afc:	4845      	ldr	r0, [pc, #276]	@ (8023c14 <lfs_mount_+0x434>)
 8023afe:	f00f fc57 	bl	80333b0 <printf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 8023b02:	f06f 0315 	mvn.w	r3, #21
 8023b06:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 8023b08:	e01a      	b.n	8023b40 <lfs_mount_+0x360>
            }

            lfs->block_count = superblock.block_count;
 8023b0a:	697a      	ldr	r2, [r7, #20]
 8023b0c:	687b      	ldr	r3, [r7, #4]
 8023b0e:	66da      	str	r2, [r3, #108]	@ 0x6c

            if (superblock.block_size != lfs->cfg->block_size) {
 8023b10:	693a      	ldr	r2, [r7, #16]
 8023b12:	687b      	ldr	r3, [r7, #4]
 8023b14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023b18:	429a      	cmp	r2, r3
 8023b1a:	d012      	beq.n	8023b42 <lfs_mount_+0x362>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 8023b1c:	693a      	ldr	r2, [r7, #16]
 8023b1e:	687b      	ldr	r3, [r7, #4]
 8023b20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023b24:	4939      	ldr	r1, [pc, #228]	@ (8023c0c <lfs_mount_+0x42c>)
 8023b26:	9101      	str	r1, [sp, #4]
 8023b28:	9300      	str	r3, [sp, #0]
 8023b2a:	4613      	mov	r3, r2
 8023b2c:	f241 12b7 	movw	r2, #4535	@ 0x11b7
 8023b30:	4937      	ldr	r1, [pc, #220]	@ (8023c10 <lfs_mount_+0x430>)
 8023b32:	4839      	ldr	r0, [pc, #228]	@ (8023c18 <lfs_mount_+0x438>)
 8023b34:	f00f fc3c 	bl	80333b0 <printf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 8023b38:	f06f 0315 	mvn.w	r3, #21
 8023b3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 8023b3e:	bf00      	nop
            goto cleanup;
 8023b40:	e05c      	b.n	8023bfc <lfs_mount_+0x41c>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 8023b42:	687b      	ldr	r3, [r7, #4]
 8023b44:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8023b48:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8023b4c:	4619      	mov	r1, r3
 8023b4e:	6878      	ldr	r0, [r7, #4]
 8023b50:	f7fb fd5a 	bl	801f608 <lfs_dir_getgstate>
 8023b54:	66f8      	str	r0, [r7, #108]	@ 0x6c
        if (err) {
 8023b56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8023b58:	2b00      	cmp	r3, #0
 8023b5a:	d14e      	bne.n	8023bfa <lfs_mount_+0x41a>
    while (!lfs_pair_isnull(dir.tail)) {
 8023b5c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8023b60:	3318      	adds	r3, #24
 8023b62:	4618      	mov	r0, r3
 8023b64:	f7f9 fea1 	bl	801d8aa <lfs_pair_isnull>
 8023b68:	4603      	mov	r3, r0
 8023b6a:	f083 0301 	eor.w	r3, r3, #1
 8023b6e:	b2db      	uxtb	r3, r3
 8023b70:	2b00      	cmp	r3, #0
 8023b72:	f47f ae59 	bne.w	8023828 <lfs_mount_+0x48>
            goto cleanup;
        }
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8023b76:	687b      	ldr	r3, [r7, #4]
 8023b78:	3330      	adds	r3, #48	@ 0x30
 8023b7a:	4618      	mov	r0, r3
 8023b7c:	f7f9 fffc 	bl	801db78 <lfs_gstate_iszero>
 8023b80:	4603      	mov	r3, r0
 8023b82:	f083 0301 	eor.w	r3, r3, #1
 8023b86:	b2db      	uxtb	r3, r3
 8023b88:	2b00      	cmp	r3, #0
 8023b8a:	d010      	beq.n	8023bae <lfs_mount_+0x3ce>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 8023b8c:	687b      	ldr	r3, [r7, #4]
 8023b8e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8023b90:	687b      	ldr	r3, [r7, #4]
 8023b92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8023b94:	687a      	ldr	r2, [r7, #4]
 8023b96:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8023b98:	481c      	ldr	r0, [pc, #112]	@ (8023c0c <lfs_mount_+0x42c>)
 8023b9a:	9002      	str	r0, [sp, #8]
 8023b9c:	9201      	str	r2, [sp, #4]
 8023b9e:	9300      	str	r3, [sp, #0]
 8023ba0:	460b      	mov	r3, r1
 8023ba2:	f241 12c7 	movw	r2, #4551	@ 0x11c7
 8023ba6:	491a      	ldr	r1, [pc, #104]	@ (8023c10 <lfs_mount_+0x430>)
 8023ba8:	481c      	ldr	r0, [pc, #112]	@ (8023c1c <lfs_mount_+0x43c>)
 8023baa:	f00f fc01 	bl	80333b0 <printf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 8023bae:	687b      	ldr	r3, [r7, #4]
 8023bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8023bb2:	4618      	mov	r0, r3
 8023bb4:	f7f9 ff1f 	bl	801d9f6 <lfs_tag_isvalid>
 8023bb8:	4603      	mov	r3, r0
 8023bba:	f083 0301 	eor.w	r3, r3, #1
 8023bbe:	b2db      	uxtb	r3, r3
 8023bc0:	461a      	mov	r2, r3
 8023bc2:	687b      	ldr	r3, [r7, #4]
 8023bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8023bc6:	441a      	add	r2, r3
 8023bc8:	687b      	ldr	r3, [r7, #4]
 8023bca:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gdisk = lfs->gstate;
 8023bcc:	687b      	ldr	r3, [r7, #4]
 8023bce:	687a      	ldr	r2, [r7, #4]
 8023bd0:	333c      	adds	r3, #60	@ 0x3c
 8023bd2:	3230      	adds	r2, #48	@ 0x30
 8023bd4:	ca07      	ldmia	r2, {r0, r1, r2}
 8023bd6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->lookahead.start = lfs->seed % lfs->block_count;
 8023bda:	687b      	ldr	r3, [r7, #4]
 8023bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023bde:	687a      	ldr	r2, [r7, #4]
 8023be0:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8023be2:	fbb3 f1f2 	udiv	r1, r3, r2
 8023be6:	fb01 f202 	mul.w	r2, r1, r2
 8023bea:	1a9a      	subs	r2, r3, r2
 8023bec:	687b      	ldr	r3, [r7, #4]
 8023bee:	655a      	str	r2, [r3, #84]	@ 0x54
    lfs_alloc_drop(lfs);
 8023bf0:	6878      	ldr	r0, [r7, #4]
 8023bf2:	f7fa f9e0 	bl	801dfb6 <lfs_alloc_drop>

    return 0;
 8023bf6:	2300      	movs	r3, #0
 8023bf8:	e004      	b.n	8023c04 <lfs_mount_+0x424>
            goto cleanup;
 8023bfa:	bf00      	nop

cleanup:
    lfs_unmount_(lfs);
 8023bfc:	6878      	ldr	r0, [r7, #4]
 8023bfe:	f000 f80f 	bl	8023c20 <lfs_unmount_>
    return err;
 8023c02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 8023c04:	4618      	mov	r0, r3
 8023c06:	3774      	adds	r7, #116	@ 0x74
 8023c08:	46bd      	mov	sp, r7
 8023c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023c0c:	08040a48 	.word	0x08040a48
 8023c10:	08040920 	.word	0x08040920
 8023c14:	08041238 	.word	0x08041238
 8023c18:	0804126c 	.word	0x0804126c
 8023c1c:	0804129c 	.word	0x0804129c

08023c20 <lfs_unmount_>:

static int lfs_unmount_(lfs_t *lfs) {
 8023c20:	b580      	push	{r7, lr}
 8023c22:	b082      	sub	sp, #8
 8023c24:	af00      	add	r7, sp, #0
 8023c26:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 8023c28:	6878      	ldr	r0, [r7, #4]
 8023c2a:	f7ff fcff 	bl	802362c <lfs_deinit>
 8023c2e:	4603      	mov	r3, r0
}
 8023c30:	4618      	mov	r0, r3
 8023c32:	3708      	adds	r7, #8
 8023c34:	46bd      	mov	sp, r7
 8023c36:	bd80      	pop	{r7, pc}

08023c38 <lfs_fs_traverse_>:
    return 0;
}

int lfs_fs_traverse_(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 8023c38:	b590      	push	{r4, r7, lr}
 8023c3a:	b0a1      	sub	sp, #132	@ 0x84
 8023c3c:	af04      	add	r7, sp, #16
 8023c3e:	60f8      	str	r0, [r7, #12]
 8023c40:	60b9      	str	r1, [r7, #8]
 8023c42:	607a      	str	r2, [r7, #4]
 8023c44:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 8023c46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8023c4a:	2220      	movs	r2, #32
 8023c4c:	2100      	movs	r1, #0
 8023c4e:	4618      	mov	r0, r3
 8023c50:	f012 f8ce 	bl	8035df0 <memset>
 8023c54:	2301      	movs	r3, #1
 8023c56:	643b      	str	r3, [r7, #64]	@ 0x40
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8023c58:	4a9a      	ldr	r2, [pc, #616]	@ (8023ec4 <lfs_fs_traverse_+0x28c>)
 8023c5a:	f107 031c 	add.w	r3, r7, #28
 8023c5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8023c62:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8023c66:	2301      	movs	r3, #1
 8023c68:	66fb      	str	r3, [r7, #108]	@ 0x6c
    lfs_size_t tortoise_period = 1;
 8023c6a:	2301      	movs	r3, #1
 8023c6c:	66bb      	str	r3, [r7, #104]	@ 0x68
    while (!lfs_pair_isnull(dir.tail)) {
 8023c6e:	e0c0      	b.n	8023df2 <lfs_fs_traverse_+0x1ba>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 8023c70:	f107 021c 	add.w	r2, r7, #28
 8023c74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8023c78:	3318      	adds	r3, #24
 8023c7a:	4611      	mov	r1, r2
 8023c7c:	4618      	mov	r0, r3
 8023c7e:	f7f9 fe59 	bl	801d934 <lfs_pair_issync>
 8023c82:	4603      	mov	r3, r0
 8023c84:	2b00      	cmp	r3, #0
 8023c86:	d009      	beq.n	8023c9c <lfs_fs_traverse_+0x64>
            LFS_WARN("Cycle detected in tail list");
 8023c88:	4b8f      	ldr	r3, [pc, #572]	@ (8023ec8 <lfs_fs_traverse_+0x290>)
 8023c8a:	f241 2222 	movw	r2, #4642	@ 0x1222
 8023c8e:	498f      	ldr	r1, [pc, #572]	@ (8023ecc <lfs_fs_traverse_+0x294>)
 8023c90:	488f      	ldr	r0, [pc, #572]	@ (8023ed0 <lfs_fs_traverse_+0x298>)
 8023c92:	f00f fb8d 	bl	80333b0 <printf>
            return LFS_ERR_CORRUPT;
 8023c96:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8023c9a:	e10f      	b.n	8023ebc <lfs_fs_traverse_+0x284>
        }
        if (tortoise_i == tortoise_period) {
 8023c9c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8023c9e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8023ca0:	429a      	cmp	r2, r3
 8023ca2:	d108      	bne.n	8023cb6 <lfs_fs_traverse_+0x7e>
            tortoise[0] = dir.tail[0];
 8023ca4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8023ca6:	61fb      	str	r3, [r7, #28]
            tortoise[1] = dir.tail[1];
 8023ca8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8023caa:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 8023cac:	2300      	movs	r3, #0
 8023cae:	66fb      	str	r3, [r7, #108]	@ 0x6c
            tortoise_period *= 2;
 8023cb0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8023cb2:	005b      	lsls	r3, r3, #1
 8023cb4:	66bb      	str	r3, [r7, #104]	@ 0x68
        }
        tortoise_i += 1;
 8023cb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8023cb8:	3301      	adds	r3, #1
 8023cba:	66fb      	str	r3, [r7, #108]	@ 0x6c

        for (int i = 0; i < 2; i++) {
 8023cbc:	2300      	movs	r3, #0
 8023cbe:	667b      	str	r3, [r7, #100]	@ 0x64
 8023cc0:	e013      	b.n	8023cea <lfs_fs_traverse_+0xb2>
            int err = cb(data, dir.tail[i]);
 8023cc2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8023cc4:	3306      	adds	r3, #6
 8023cc6:	009b      	lsls	r3, r3, #2
 8023cc8:	3370      	adds	r3, #112	@ 0x70
 8023cca:	443b      	add	r3, r7
 8023ccc:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8023cd0:	68bb      	ldr	r3, [r7, #8]
 8023cd2:	4611      	mov	r1, r2
 8023cd4:	6878      	ldr	r0, [r7, #4]
 8023cd6:	4798      	blx	r3
 8023cd8:	6478      	str	r0, [r7, #68]	@ 0x44
            if (err) {
 8023cda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8023cdc:	2b00      	cmp	r3, #0
 8023cde:	d001      	beq.n	8023ce4 <lfs_fs_traverse_+0xac>
                return err;
 8023ce0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8023ce2:	e0eb      	b.n	8023ebc <lfs_fs_traverse_+0x284>
        for (int i = 0; i < 2; i++) {
 8023ce4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8023ce6:	3301      	adds	r3, #1
 8023ce8:	667b      	str	r3, [r7, #100]	@ 0x64
 8023cea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8023cec:	2b01      	cmp	r3, #1
 8023cee:	dde8      	ble.n	8023cc2 <lfs_fs_traverse_+0x8a>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 8023cf0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8023cf4:	f103 0218 	add.w	r2, r3, #24
 8023cf8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8023cfc:	4619      	mov	r1, r3
 8023cfe:	68f8      	ldr	r0, [r7, #12]
 8023d00:	f7fb fc66 	bl	801f5d0 <lfs_dir_fetch>
 8023d04:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (err) {
 8023d06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8023d08:	2b00      	cmp	r3, #0
 8023d0a:	d001      	beq.n	8023d10 <lfs_fs_traverse_+0xd8>
            return err;
 8023d0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8023d0e:	e0d5      	b.n	8023ebc <lfs_fs_traverse_+0x284>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 8023d10:	2300      	movs	r3, #0
 8023d12:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8023d16:	e067      	b.n	8023de8 <lfs_fs_traverse_+0x1b0>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8023d18:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8023d1c:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8023d1e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8023d22:	f043 0308 	orr.w	r3, r3, #8
 8023d26:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8023d2a:	f107 0214 	add.w	r2, r7, #20
 8023d2e:	9200      	str	r2, [sp, #0]
 8023d30:	4a68      	ldr	r2, [pc, #416]	@ (8023ed4 <lfs_fs_traverse_+0x29c>)
 8023d32:	68f8      	ldr	r0, [r7, #12]
 8023d34:	f7fa fb46 	bl	801e3c4 <lfs_dir_get>
 8023d38:	64b8      	str	r0, [r7, #72]	@ 0x48
            if (tag < 0) {
 8023d3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8023d3c:	2b00      	cmp	r3, #0
 8023d3e:	da05      	bge.n	8023d4c <lfs_fs_traverse_+0x114>
                if (tag == LFS_ERR_NOENT) {
 8023d40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8023d42:	f113 0f02 	cmn.w	r3, #2
 8023d46:	d049      	beq.n	8023ddc <lfs_fs_traverse_+0x1a4>
                    continue;
                }
                return tag;
 8023d48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8023d4a:	e0b7      	b.n	8023ebc <lfs_fs_traverse_+0x284>
            }
            lfs_ctz_fromle32(&ctz);
 8023d4c:	f107 0314 	add.w	r3, r7, #20
 8023d50:	4618      	mov	r0, r3
 8023d52:	f7fa f807 	bl	801dd64 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8023d56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8023d58:	4618      	mov	r0, r3
 8023d5a:	f7f9 fe8d 	bl	801da78 <lfs_tag_type3>
 8023d5e:	4603      	mov	r3, r0
 8023d60:	461a      	mov	r2, r3
 8023d62:	f240 2302 	movw	r3, #514	@ 0x202
 8023d66:	429a      	cmp	r2, r3
 8023d68:	d113      	bne.n	8023d92 <lfs_fs_traverse_+0x15a>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 8023d6a:	68f9      	ldr	r1, [r7, #12]
 8023d6c:	6978      	ldr	r0, [r7, #20]
 8023d6e:	69bb      	ldr	r3, [r7, #24]
 8023d70:	687a      	ldr	r2, [r7, #4]
 8023d72:	9202      	str	r2, [sp, #8]
 8023d74:	68ba      	ldr	r2, [r7, #8]
 8023d76:	9201      	str	r2, [sp, #4]
 8023d78:	9300      	str	r3, [sp, #0]
 8023d7a:	4603      	mov	r3, r0
 8023d7c:	460a      	mov	r2, r1
 8023d7e:	2100      	movs	r1, #0
 8023d80:	68f8      	ldr	r0, [r7, #12]
 8023d82:	f7fd fe9d 	bl	8021ac0 <lfs_ctz_traverse>
 8023d86:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        ctz.head, ctz.size, cb, data);
                if (err) {
 8023d88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8023d8a:	2b00      	cmp	r3, #0
 8023d8c:	d027      	beq.n	8023dde <lfs_fs_traverse_+0x1a6>
                    return err;
 8023d8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8023d90:	e094      	b.n	8023ebc <lfs_fs_traverse_+0x284>
                }
            } else if (includeorphans &&
 8023d92:	78fb      	ldrb	r3, [r7, #3]
 8023d94:	2b00      	cmp	r3, #0
 8023d96:	d022      	beq.n	8023dde <lfs_fs_traverse_+0x1a6>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 8023d98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8023d9a:	4618      	mov	r0, r3
 8023d9c:	f7f9 fe6c 	bl	801da78 <lfs_tag_type3>
 8023da0:	4603      	mov	r3, r0
            } else if (includeorphans &&
 8023da2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8023da6:	d11a      	bne.n	8023dde <lfs_fs_traverse_+0x1a6>
                for (int i = 0; i < 2; i++) {
 8023da8:	2300      	movs	r3, #0
 8023daa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8023dac:	e012      	b.n	8023dd4 <lfs_fs_traverse_+0x19c>
                    err = cb(data, (&ctz.head)[i]);
 8023dae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8023db0:	009b      	lsls	r3, r3, #2
 8023db2:	f107 0214 	add.w	r2, r7, #20
 8023db6:	4413      	add	r3, r2
 8023db8:	681a      	ldr	r2, [r3, #0]
 8023dba:	68bb      	ldr	r3, [r7, #8]
 8023dbc:	4611      	mov	r1, r2
 8023dbe:	6878      	ldr	r0, [r7, #4]
 8023dc0:	4798      	blx	r3
 8023dc2:	64f8      	str	r0, [r7, #76]	@ 0x4c
                    if (err) {
 8023dc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8023dc6:	2b00      	cmp	r3, #0
 8023dc8:	d001      	beq.n	8023dce <lfs_fs_traverse_+0x196>
                        return err;
 8023dca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8023dcc:	e076      	b.n	8023ebc <lfs_fs_traverse_+0x284>
                for (int i = 0; i < 2; i++) {
 8023dce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8023dd0:	3301      	adds	r3, #1
 8023dd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8023dd4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8023dd6:	2b01      	cmp	r3, #1
 8023dd8:	dde9      	ble.n	8023dae <lfs_fs_traverse_+0x176>
 8023dda:	e000      	b.n	8023dde <lfs_fs_traverse_+0x1a6>
                    continue;
 8023ddc:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 8023dde:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8023de2:	3301      	adds	r3, #1
 8023de4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8023de8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8023dea:	f8b7 2062 	ldrh.w	r2, [r7, #98]	@ 0x62
 8023dee:	429a      	cmp	r2, r3
 8023df0:	d392      	bcc.n	8023d18 <lfs_fs_traverse_+0xe0>
    while (!lfs_pair_isnull(dir.tail)) {
 8023df2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8023df6:	3318      	adds	r3, #24
 8023df8:	4618      	mov	r0, r3
 8023dfa:	f7f9 fd56 	bl	801d8aa <lfs_pair_isnull>
 8023dfe:	4603      	mov	r3, r0
 8023e00:	f083 0301 	eor.w	r3, r3, #1
 8023e04:	b2db      	uxtb	r3, r3
 8023e06:	2b00      	cmp	r3, #0
 8023e08:	f47f af32 	bne.w	8023c70 <lfs_fs_traverse_+0x38>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8023e0c:	68fb      	ldr	r3, [r7, #12]
 8023e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023e10:	65bb      	str	r3, [r7, #88]	@ 0x58
 8023e12:	e04f      	b.n	8023eb4 <lfs_fs_traverse_+0x27c>
        if (f->type != LFS_TYPE_REG) {
 8023e14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8023e16:	799b      	ldrb	r3, [r3, #6]
 8023e18:	2b01      	cmp	r3, #1
 8023e1a:	d147      	bne.n	8023eac <lfs_fs_traverse_+0x274>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8023e1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8023e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8023e20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8023e24:	2b00      	cmp	r3, #0
 8023e26:	d01d      	beq.n	8023e64 <lfs_fs_traverse_+0x22c>
 8023e28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8023e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8023e2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8023e30:	2b00      	cmp	r3, #0
 8023e32:	d117      	bne.n	8023e64 <lfs_fs_traverse_+0x22c>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8023e34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8023e36:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8023e3a:	68f8      	ldr	r0, [r7, #12]
 8023e3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8023e3e:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8023e40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8023e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023e44:	687a      	ldr	r2, [r7, #4]
 8023e46:	9202      	str	r2, [sp, #8]
 8023e48:	68ba      	ldr	r2, [r7, #8]
 8023e4a:	9201      	str	r2, [sp, #4]
 8023e4c:	9300      	str	r3, [sp, #0]
 8023e4e:	4623      	mov	r3, r4
 8023e50:	4602      	mov	r2, r0
 8023e52:	68f8      	ldr	r0, [r7, #12]
 8023e54:	f7fd fe34 	bl	8021ac0 <lfs_ctz_traverse>
 8023e58:	6578      	str	r0, [r7, #84]	@ 0x54
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 8023e5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8023e5c:	2b00      	cmp	r3, #0
 8023e5e:	d001      	beq.n	8023e64 <lfs_fs_traverse_+0x22c>
                return err;
 8023e60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8023e62:	e02b      	b.n	8023ebc <lfs_fs_traverse_+0x284>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 8023e64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8023e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8023e68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8023e6c:	2b00      	cmp	r3, #0
 8023e6e:	d01e      	beq.n	8023eae <lfs_fs_traverse_+0x276>
 8023e70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8023e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8023e74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8023e78:	2b00      	cmp	r3, #0
 8023e7a:	d118      	bne.n	8023eae <lfs_fs_traverse_+0x276>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8023e7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8023e7e:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8023e82:	68f8      	ldr	r0, [r7, #12]
 8023e84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8023e86:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8023e88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8023e8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8023e8c:	687a      	ldr	r2, [r7, #4]
 8023e8e:	9202      	str	r2, [sp, #8]
 8023e90:	68ba      	ldr	r2, [r7, #8]
 8023e92:	9201      	str	r2, [sp, #4]
 8023e94:	9300      	str	r3, [sp, #0]
 8023e96:	4623      	mov	r3, r4
 8023e98:	4602      	mov	r2, r0
 8023e9a:	68f8      	ldr	r0, [r7, #12]
 8023e9c:	f7fd fe10 	bl	8021ac0 <lfs_ctz_traverse>
 8023ea0:	6538      	str	r0, [r7, #80]	@ 0x50
                    f->block, f->pos, cb, data);
            if (err) {
 8023ea2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8023ea4:	2b00      	cmp	r3, #0
 8023ea6:	d002      	beq.n	8023eae <lfs_fs_traverse_+0x276>
                return err;
 8023ea8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8023eaa:	e007      	b.n	8023ebc <lfs_fs_traverse_+0x284>
            continue;
 8023eac:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8023eae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8023eb0:	681b      	ldr	r3, [r3, #0]
 8023eb2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8023eb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8023eb6:	2b00      	cmp	r3, #0
 8023eb8:	d1ac      	bne.n	8023e14 <lfs_fs_traverse_+0x1dc>
            }
        }
    }
#endif

    return 0;
 8023eba:	2300      	movs	r3, #0
}
 8023ebc:	4618      	mov	r0, r3
 8023ebe:	3774      	adds	r7, #116	@ 0x74
 8023ec0:	46bd      	mov	sp, r7
 8023ec2:	bd90      	pop	{r4, r7, pc}
 8023ec4:	08040a8c 	.word	0x08040a8c
 8023ec8:	08040a48 	.word	0x08040a48
 8023ecc:	08040920 	.word	0x08040920
 8023ed0:	080410f8 	.word	0x080410f8
 8023ed4:	700ffc00 	.word	0x700ffc00

08023ed8 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8023ed8:	b580      	push	{r7, lr}
 8023eda:	b08a      	sub	sp, #40	@ 0x28
 8023edc:	af00      	add	r7, sp, #0
 8023ede:	60f8      	str	r0, [r7, #12]
 8023ee0:	60b9      	str	r1, [r7, #8]
 8023ee2:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 8023ee4:	687b      	ldr	r3, [r7, #4]
 8023ee6:	2200      	movs	r2, #0
 8023ee8:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 8023eea:	687b      	ldr	r3, [r7, #4]
 8023eec:	2201      	movs	r2, #1
 8023eee:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8023ef0:	4a2d      	ldr	r2, [pc, #180]	@ (8023fa8 <lfs_fs_pred+0xd0>)
 8023ef2:	f107 0314 	add.w	r3, r7, #20
 8023ef6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8023efa:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8023efe:	2301      	movs	r3, #1
 8023f00:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_size_t tortoise_period = 1;
 8023f02:	2301      	movs	r3, #1
 8023f04:	623b      	str	r3, [r7, #32]
    while (!lfs_pair_isnull(pdir->tail)) {
 8023f06:	e03e      	b.n	8023f86 <lfs_fs_pred+0xae>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 8023f08:	687b      	ldr	r3, [r7, #4]
 8023f0a:	3318      	adds	r3, #24
 8023f0c:	f107 0214 	add.w	r2, r7, #20
 8023f10:	4611      	mov	r1, r2
 8023f12:	4618      	mov	r0, r3
 8023f14:	f7f9 fd0e 	bl	801d934 <lfs_pair_issync>
 8023f18:	4603      	mov	r3, r0
 8023f1a:	2b00      	cmp	r3, #0
 8023f1c:	d009      	beq.n	8023f32 <lfs_fs_pred+0x5a>
            LFS_WARN("Cycle detected in tail list");
 8023f1e:	4b23      	ldr	r3, [pc, #140]	@ (8023fac <lfs_fs_pred+0xd4>)
 8023f20:	f44f 5294 	mov.w	r2, #4736	@ 0x1280
 8023f24:	4922      	ldr	r1, [pc, #136]	@ (8023fb0 <lfs_fs_pred+0xd8>)
 8023f26:	4823      	ldr	r0, [pc, #140]	@ (8023fb4 <lfs_fs_pred+0xdc>)
 8023f28:	f00f fa42 	bl	80333b0 <printf>
            return LFS_ERR_CORRUPT;
 8023f2c:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8023f30:	e036      	b.n	8023fa0 <lfs_fs_pred+0xc8>
        }
        if (tortoise_i == tortoise_period) {
 8023f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8023f34:	6a3b      	ldr	r3, [r7, #32]
 8023f36:	429a      	cmp	r2, r3
 8023f38:	d10a      	bne.n	8023f50 <lfs_fs_pred+0x78>
            tortoise[0] = pdir->tail[0];
 8023f3a:	687b      	ldr	r3, [r7, #4]
 8023f3c:	699b      	ldr	r3, [r3, #24]
 8023f3e:	617b      	str	r3, [r7, #20]
            tortoise[1] = pdir->tail[1];
 8023f40:	687b      	ldr	r3, [r7, #4]
 8023f42:	69db      	ldr	r3, [r3, #28]
 8023f44:	61bb      	str	r3, [r7, #24]
            tortoise_i = 0;
 8023f46:	2300      	movs	r3, #0
 8023f48:	627b      	str	r3, [r7, #36]	@ 0x24
            tortoise_period *= 2;
 8023f4a:	6a3b      	ldr	r3, [r7, #32]
 8023f4c:	005b      	lsls	r3, r3, #1
 8023f4e:	623b      	str	r3, [r7, #32]
        }
        tortoise_i += 1;
 8023f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023f52:	3301      	adds	r3, #1
 8023f54:	627b      	str	r3, [r7, #36]	@ 0x24

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8023f56:	687b      	ldr	r3, [r7, #4]
 8023f58:	3318      	adds	r3, #24
 8023f5a:	68b9      	ldr	r1, [r7, #8]
 8023f5c:	4618      	mov	r0, r3
 8023f5e:	f7f9 fcbf 	bl	801d8e0 <lfs_pair_cmp>
 8023f62:	4603      	mov	r3, r0
 8023f64:	2b00      	cmp	r3, #0
 8023f66:	d101      	bne.n	8023f6c <lfs_fs_pred+0x94>
            return 0;
 8023f68:	2300      	movs	r3, #0
 8023f6a:	e019      	b.n	8023fa0 <lfs_fs_pred+0xc8>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 8023f6c:	687b      	ldr	r3, [r7, #4]
 8023f6e:	3318      	adds	r3, #24
 8023f70:	461a      	mov	r2, r3
 8023f72:	6879      	ldr	r1, [r7, #4]
 8023f74:	68f8      	ldr	r0, [r7, #12]
 8023f76:	f7fb fb2b 	bl	801f5d0 <lfs_dir_fetch>
 8023f7a:	61f8      	str	r0, [r7, #28]
        if (err) {
 8023f7c:	69fb      	ldr	r3, [r7, #28]
 8023f7e:	2b00      	cmp	r3, #0
 8023f80:	d001      	beq.n	8023f86 <lfs_fs_pred+0xae>
            return err;
 8023f82:	69fb      	ldr	r3, [r7, #28]
 8023f84:	e00c      	b.n	8023fa0 <lfs_fs_pred+0xc8>
    while (!lfs_pair_isnull(pdir->tail)) {
 8023f86:	687b      	ldr	r3, [r7, #4]
 8023f88:	3318      	adds	r3, #24
 8023f8a:	4618      	mov	r0, r3
 8023f8c:	f7f9 fc8d 	bl	801d8aa <lfs_pair_isnull>
 8023f90:	4603      	mov	r3, r0
 8023f92:	f083 0301 	eor.w	r3, r3, #1
 8023f96:	b2db      	uxtb	r3, r3
 8023f98:	2b00      	cmp	r3, #0
 8023f9a:	d1b5      	bne.n	8023f08 <lfs_fs_pred+0x30>
        }
    }

    return LFS_ERR_NOENT;
 8023f9c:	f06f 0301 	mvn.w	r3, #1
}
 8023fa0:	4618      	mov	r0, r3
 8023fa2:	3728      	adds	r7, #40	@ 0x28
 8023fa4:	46bd      	mov	sp, r7
 8023fa6:	bd80      	pop	{r7, pc}
 8023fa8:	08040a8c 	.word	0x08040a8c
 8023fac:	08040a48 	.word	0x08040a48
 8023fb0:	08040920 	.word	0x08040920
 8023fb4:	080410f8 	.word	0x080410f8

08023fb8 <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8023fb8:	b5b0      	push	{r4, r5, r7, lr}
 8023fba:	b08e      	sub	sp, #56	@ 0x38
 8023fbc:	af04      	add	r7, sp, #16
 8023fbe:	60f8      	str	r0, [r7, #12]
 8023fc0:	60b9      	str	r1, [r7, #8]
 8023fc2:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 8023fc4:	68fb      	ldr	r3, [r7, #12]
 8023fc6:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_t *lfs = find->lfs;
 8023fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023fca:	681b      	ldr	r3, [r3, #0]
 8023fcc:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8023fce:	687b      	ldr	r3, [r7, #4]
 8023fd0:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8023fd2:	6a3b      	ldr	r3, [r7, #32]
 8023fd4:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 8023fd8:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8023fda:	6a3b      	ldr	r3, [r7, #32]
 8023fdc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023fde:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
            disk->block, disk->off, &child, sizeof(child));
 8023fe0:	69fb      	ldr	r3, [r7, #28]
 8023fe2:	681b      	ldr	r3, [r3, #0]
 8023fe4:	69fa      	ldr	r2, [r7, #28]
 8023fe6:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 8023fe8:	2108      	movs	r1, #8
 8023fea:	9103      	str	r1, [sp, #12]
 8023fec:	f107 0110 	add.w	r1, r7, #16
 8023ff0:	9102      	str	r1, [sp, #8]
 8023ff2:	9201      	str	r2, [sp, #4]
 8023ff4:	9300      	str	r3, [sp, #0]
 8023ff6:	462b      	mov	r3, r5
 8023ff8:	4622      	mov	r2, r4
 8023ffa:	4601      	mov	r1, r0
 8023ffc:	6a38      	ldr	r0, [r7, #32]
 8023ffe:	f7f9 f8cd 	bl	801d19c <lfs_bd_read>
 8024002:	61b8      	str	r0, [r7, #24]
    if (err) {
 8024004:	69bb      	ldr	r3, [r7, #24]
 8024006:	2b00      	cmp	r3, #0
 8024008:	d001      	beq.n	802400e <lfs_fs_parent_match+0x56>
        return err;
 802400a:	69bb      	ldr	r3, [r7, #24]
 802400c:	e012      	b.n	8024034 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 802400e:	f107 0310 	add.w	r3, r7, #16
 8024012:	4618      	mov	r0, r3
 8024014:	f7f9 fcbb 	bl	801d98e <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8024018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802401a:	1d1a      	adds	r2, r3, #4
 802401c:	f107 0310 	add.w	r3, r7, #16
 8024020:	4611      	mov	r1, r2
 8024022:	4618      	mov	r0, r3
 8024024:	f7f9 fc5c 	bl	801d8e0 <lfs_pair_cmp>
 8024028:	4603      	mov	r3, r0
 802402a:	2b00      	cmp	r3, #0
 802402c:	bf14      	ite	ne
 802402e:	2301      	movne	r3, #1
 8024030:	2300      	moveq	r3, #0
 8024032:	b2db      	uxtb	r3, r3
}
 8024034:	4618      	mov	r0, r3
 8024036:	3728      	adds	r7, #40	@ 0x28
 8024038:	46bd      	mov	sp, r7
 802403a:	bdb0      	pop	{r4, r5, r7, pc}

0802403c <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 802403c:	b580      	push	{r7, lr}
 802403e:	b090      	sub	sp, #64	@ 0x40
 8024040:	af04      	add	r7, sp, #16
 8024042:	60f8      	str	r0, [r7, #12]
 8024044:	60b9      	str	r1, [r7, #8]
 8024046:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 8024048:	687b      	ldr	r3, [r7, #4]
 802404a:	2200      	movs	r2, #0
 802404c:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 802404e:	687b      	ldr	r3, [r7, #4]
 8024050:	2201      	movs	r2, #1
 8024052:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8024054:	4a33      	ldr	r2, [pc, #204]	@ (8024124 <lfs_fs_parent+0xe8>)
 8024056:	f107 031c 	add.w	r3, r7, #28
 802405a:	e892 0003 	ldmia.w	r2, {r0, r1}
 802405e:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8024062:	2301      	movs	r3, #1
 8024064:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lfs_size_t tortoise_period = 1;
 8024066:	2301      	movs	r3, #1
 8024068:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (!lfs_pair_isnull(parent->tail)) {
 802406a:	e04a      	b.n	8024102 <lfs_fs_parent+0xc6>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(parent->tail, tortoise)) {
 802406c:	687b      	ldr	r3, [r7, #4]
 802406e:	3318      	adds	r3, #24
 8024070:	f107 021c 	add.w	r2, r7, #28
 8024074:	4611      	mov	r1, r2
 8024076:	4618      	mov	r0, r3
 8024078:	f7f9 fc5c 	bl	801d934 <lfs_pair_issync>
 802407c:	4603      	mov	r3, r0
 802407e:	2b00      	cmp	r3, #0
 8024080:	d009      	beq.n	8024096 <lfs_fs_parent+0x5a>
            LFS_WARN("Cycle detected in tail list");
 8024082:	4b29      	ldr	r3, [pc, #164]	@ (8024128 <lfs_fs_parent+0xec>)
 8024084:	f241 22c1 	movw	r2, #4801	@ 0x12c1
 8024088:	4928      	ldr	r1, [pc, #160]	@ (802412c <lfs_fs_parent+0xf0>)
 802408a:	4829      	ldr	r0, [pc, #164]	@ (8024130 <lfs_fs_parent+0xf4>)
 802408c:	f00f f990 	bl	80333b0 <printf>
            return LFS_ERR_CORRUPT;
 8024090:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8024094:	e042      	b.n	802411c <lfs_fs_parent+0xe0>
        }
        if (tortoise_i == tortoise_period) {
 8024096:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8024098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802409a:	429a      	cmp	r2, r3
 802409c:	d10a      	bne.n	80240b4 <lfs_fs_parent+0x78>
            tortoise[0] = parent->tail[0];
 802409e:	687b      	ldr	r3, [r7, #4]
 80240a0:	699b      	ldr	r3, [r3, #24]
 80240a2:	61fb      	str	r3, [r7, #28]
            tortoise[1] = parent->tail[1];
 80240a4:	687b      	ldr	r3, [r7, #4]
 80240a6:	69db      	ldr	r3, [r3, #28]
 80240a8:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 80240aa:	2300      	movs	r3, #0
 80240ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
            tortoise_period *= 2;
 80240ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80240b0:	005b      	lsls	r3, r3, #1
 80240b2:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
        tortoise_i += 1;
 80240b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80240b6:	3301      	adds	r3, #1
 80240b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 80240ba:	687b      	ldr	r3, [r7, #4]
 80240bc:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 80240c0:	68fb      	ldr	r3, [r7, #12]
 80240c2:	613b      	str	r3, [r7, #16]
                    lfs, {pair[0], pair[1]}});
 80240c4:	68bb      	ldr	r3, [r7, #8]
 80240c6:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 80240c8:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 80240ca:	68bb      	ldr	r3, [r7, #8]
 80240cc:	3304      	adds	r3, #4
 80240ce:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 80240d0:	61bb      	str	r3, [r7, #24]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 80240d2:	f107 0310 	add.w	r3, r7, #16
 80240d6:	9303      	str	r3, [sp, #12]
 80240d8:	4b16      	ldr	r3, [pc, #88]	@ (8024134 <lfs_fs_parent+0xf8>)
 80240da:	9302      	str	r3, [sp, #8]
 80240dc:	2300      	movs	r3, #0
 80240de:	9301      	str	r3, [sp, #4]
 80240e0:	4b15      	ldr	r3, [pc, #84]	@ (8024138 <lfs_fs_parent+0xfc>)
 80240e2:	9300      	str	r3, [sp, #0]
 80240e4:	4b15      	ldr	r3, [pc, #84]	@ (802413c <lfs_fs_parent+0x100>)
 80240e6:	6879      	ldr	r1, [r7, #4]
 80240e8:	68f8      	ldr	r0, [r7, #12]
 80240ea:	f7fa fea1 	bl	801ee30 <lfs_dir_fetchmatch>
 80240ee:	6278      	str	r0, [r7, #36]	@ 0x24
        if (tag && tag != LFS_ERR_NOENT) {
 80240f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80240f2:	2b00      	cmp	r3, #0
 80240f4:	d005      	beq.n	8024102 <lfs_fs_parent+0xc6>
 80240f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80240f8:	f113 0f02 	cmn.w	r3, #2
 80240fc:	d001      	beq.n	8024102 <lfs_fs_parent+0xc6>
            return tag;
 80240fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024100:	e00c      	b.n	802411c <lfs_fs_parent+0xe0>
    while (!lfs_pair_isnull(parent->tail)) {
 8024102:	687b      	ldr	r3, [r7, #4]
 8024104:	3318      	adds	r3, #24
 8024106:	4618      	mov	r0, r3
 8024108:	f7f9 fbcf 	bl	801d8aa <lfs_pair_isnull>
 802410c:	4603      	mov	r3, r0
 802410e:	f083 0301 	eor.w	r3, r3, #1
 8024112:	b2db      	uxtb	r3, r3
 8024114:	2b00      	cmp	r3, #0
 8024116:	d1a9      	bne.n	802406c <lfs_fs_parent+0x30>
        }
    }

    return LFS_ERR_NOENT;
 8024118:	f06f 0301 	mvn.w	r3, #1
}
 802411c:	4618      	mov	r0, r3
 802411e:	3730      	adds	r7, #48	@ 0x30
 8024120:	46bd      	mov	sp, r7
 8024122:	bd80      	pop	{r7, pc}
 8024124:	08040a8c 	.word	0x08040a8c
 8024128:	08040a48 	.word	0x08040a48
 802412c:	08040920 	.word	0x08040920
 8024130:	080410f8 	.word	0x080410f8
 8024134:	08023fb9 	.word	0x08023fb9
 8024138:	20000008 	.word	0x20000008
 802413c:	7ff003ff 	.word	0x7ff003ff

08024140 <lfs_fs_prepsuperblock>:
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
 8024140:	b480      	push	{r7}
 8024142:	b083      	sub	sp, #12
 8024144:	af00      	add	r7, sp, #0
 8024146:	6078      	str	r0, [r7, #4]
 8024148:	460b      	mov	r3, r1
 802414a:	70fb      	strb	r3, [r7, #3]
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 802414c:	687b      	ldr	r3, [r7, #4]
 802414e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8024150:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
            | (uint32_t)needssuperblock << 9;
 8024154:	78fb      	ldrb	r3, [r7, #3]
 8024156:	025b      	lsls	r3, r3, #9
 8024158:	431a      	orrs	r2, r3
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 802415a:	687b      	ldr	r3, [r7, #4]
 802415c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 802415e:	bf00      	nop
 8024160:	370c      	adds	r7, #12
 8024162:	46bd      	mov	sp, r7
 8024164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024168:	4770      	bx	lr
	...

0802416c <lfs_fs_preporphans>:

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 802416c:	b590      	push	{r4, r7, lr}
 802416e:	b083      	sub	sp, #12
 8024170:	af00      	add	r7, sp, #0
 8024172:	6078      	str	r0, [r7, #4]
 8024174:	460b      	mov	r3, r1
 8024176:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 8024178:	687b      	ldr	r3, [r7, #4]
 802417a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802417c:	4618      	mov	r0, r3
 802417e:	f7f9 fcb5 	bl	801daec <lfs_tag_size>
 8024182:	4603      	mov	r3, r0
 8024184:	2b00      	cmp	r3, #0
 8024186:	d10a      	bne.n	802419e <lfs_fs_preporphans+0x32>
 8024188:	f997 3003 	ldrsb.w	r3, [r7, #3]
 802418c:	2b00      	cmp	r3, #0
 802418e:	da06      	bge.n	802419e <lfs_fs_preporphans+0x32>
 8024190:	4b1a      	ldr	r3, [pc, #104]	@ (80241fc <lfs_fs_preporphans+0x90>)
 8024192:	4a1b      	ldr	r2, [pc, #108]	@ (8024200 <lfs_fs_preporphans+0x94>)
 8024194:	f241 21e2 	movw	r1, #4834	@ 0x12e2
 8024198:	481a      	ldr	r0, [pc, #104]	@ (8024204 <lfs_fs_preporphans+0x98>)
 802419a:	f00f f8d5 	bl	8033348 <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 802419e:	687b      	ldr	r3, [r7, #4]
 80241a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80241a2:	4618      	mov	r0, r3
 80241a4:	f7f9 fca2 	bl	801daec <lfs_tag_size>
 80241a8:	4603      	mov	r3, r0
 80241aa:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 80241ae:	d90a      	bls.n	80241c6 <lfs_fs_preporphans+0x5a>
 80241b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80241b4:	2b00      	cmp	r3, #0
 80241b6:	dd06      	ble.n	80241c6 <lfs_fs_preporphans+0x5a>
 80241b8:	4b13      	ldr	r3, [pc, #76]	@ (8024208 <lfs_fs_preporphans+0x9c>)
 80241ba:	4a11      	ldr	r2, [pc, #68]	@ (8024200 <lfs_fs_preporphans+0x94>)
 80241bc:	f241 21e3 	movw	r1, #4835	@ 0x12e3
 80241c0:	4810      	ldr	r0, [pc, #64]	@ (8024204 <lfs_fs_preporphans+0x98>)
 80241c2:	f00f f8c1 	bl	8033348 <__assert_func>
    lfs->gstate.tag += orphans;
 80241c6:	687b      	ldr	r3, [r7, #4]
 80241c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80241ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80241ce:	441a      	add	r2, r3
 80241d0:	687b      	ldr	r3, [r7, #4]
 80241d2:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 80241d4:	687b      	ldr	r3, [r7, #4]
 80241d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80241d8:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 80241dc:	687b      	ldr	r3, [r7, #4]
 80241de:	3330      	adds	r3, #48	@ 0x30
 80241e0:	4618      	mov	r0, r3
 80241e2:	f7f9 fce6 	bl	801dbb2 <lfs_gstate_hasorphans>
 80241e6:	4603      	mov	r3, r0
 80241e8:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 80241ea:	ea44 0203 	orr.w	r2, r4, r3
 80241ee:	687b      	ldr	r3, [r7, #4]
 80241f0:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 80241f2:	2300      	movs	r3, #0
}
 80241f4:	4618      	mov	r0, r3
 80241f6:	370c      	adds	r7, #12
 80241f8:	46bd      	mov	sp, r7
 80241fa:	bd90      	pop	{r4, r7, pc}
 80241fc:	080412d4 	.word	0x080412d4
 8024200:	0804443c 	.word	0x0804443c
 8024204:	08040920 	.word	0x08040920
 8024208:	0804130c 	.word	0x0804130c

0802420c <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 802420c:	b480      	push	{r7}
 802420e:	b085      	sub	sp, #20
 8024210:	af00      	add	r7, sp, #0
 8024212:	60f8      	str	r0, [r7, #12]
 8024214:	460b      	mov	r3, r1
 8024216:	607a      	str	r2, [r7, #4]
 8024218:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 802421a:	68fb      	ldr	r3, [r7, #12]
 802421c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802421e:	4a17      	ldr	r2, [pc, #92]	@ (802427c <lfs_fs_prepmove+0x70>)
 8024220:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 8024222:	897b      	ldrh	r3, [r7, #10]
 8024224:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8024228:	428b      	cmp	r3, r1
 802422a:	d006      	beq.n	802423a <lfs_fs_prepmove+0x2e>
 802422c:	897b      	ldrh	r3, [r7, #10]
 802422e:	029b      	lsls	r3, r3, #10
 8024230:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8024234:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8024238:	e000      	b.n	802423c <lfs_fs_prepmove+0x30>
 802423a:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 802423c:	431a      	orrs	r2, r3
 802423e:	68fb      	ldr	r3, [r7, #12]
 8024240:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 8024242:	897b      	ldrh	r3, [r7, #10]
 8024244:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8024248:	4293      	cmp	r3, r2
 802424a:	d002      	beq.n	8024252 <lfs_fs_prepmove+0x46>
 802424c:	687b      	ldr	r3, [r7, #4]
 802424e:	681b      	ldr	r3, [r3, #0]
 8024250:	e000      	b.n	8024254 <lfs_fs_prepmove+0x48>
 8024252:	2300      	movs	r3, #0
 8024254:	68fa      	ldr	r2, [r7, #12]
 8024256:	6353      	str	r3, [r2, #52]	@ 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8024258:	897b      	ldrh	r3, [r7, #10]
 802425a:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 802425e:	4293      	cmp	r3, r2
 8024260:	d003      	beq.n	802426a <lfs_fs_prepmove+0x5e>
 8024262:	687b      	ldr	r3, [r7, #4]
 8024264:	3304      	adds	r3, #4
 8024266:	681b      	ldr	r3, [r3, #0]
 8024268:	e000      	b.n	802426c <lfs_fs_prepmove+0x60>
 802426a:	2300      	movs	r3, #0
 802426c:	68fa      	ldr	r2, [r7, #12]
 802426e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8024270:	bf00      	nop
 8024272:	3714      	adds	r7, #20
 8024274:	46bd      	mov	sp, r7
 8024276:	f85d 7b04 	ldr.w	r7, [sp], #4
 802427a:	4770      	bx	lr
 802427c:	800003ff 	.word	0x800003ff

08024280 <lfs_fs_desuperblock>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_desuperblock(lfs_t *lfs) {
 8024280:	b580      	push	{r7, lr}
 8024282:	b098      	sub	sp, #96	@ 0x60
 8024284:	af02      	add	r7, sp, #8
 8024286:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 8024288:	687b      	ldr	r3, [r7, #4]
 802428a:	3330      	adds	r3, #48	@ 0x30
 802428c:	4618      	mov	r0, r3
 802428e:	f7f9 fcc5 	bl	801dc1c <lfs_gstate_needssuperblock>
 8024292:	4603      	mov	r3, r0
 8024294:	f083 0301 	eor.w	r3, r3, #1
 8024298:	b2db      	uxtb	r3, r3
 802429a:	2b00      	cmp	r3, #0
 802429c:	d001      	beq.n	80242a2 <lfs_fs_desuperblock+0x22>
        return 0;
 802429e:	2300      	movs	r3, #0
 80242a0:	e04e      	b.n	8024340 <lfs_fs_desuperblock+0xc0>
    }

    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 80242a2:	687b      	ldr	r3, [r7, #4]
 80242a4:	6a1a      	ldr	r2, [r3, #32]
 80242a6:	687b      	ldr	r3, [r7, #4]
 80242a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80242aa:	4927      	ldr	r1, [pc, #156]	@ (8024348 <lfs_fs_desuperblock+0xc8>)
 80242ac:	9101      	str	r1, [sp, #4]
 80242ae:	9300      	str	r3, [sp, #0]
 80242b0:	4613      	mov	r3, r2
 80242b2:	f241 22fc 	movw	r2, #4860	@ 0x12fc
 80242b6:	4925      	ldr	r1, [pc, #148]	@ (802434c <lfs_fs_desuperblock+0xcc>)
 80242b8:	4825      	ldr	r0, [pc, #148]	@ (8024350 <lfs_fs_desuperblock+0xd0>)
 80242ba:	f00f f879 	bl	80333b0 <printf>
            lfs->root[0],
            lfs->root[1]);

    lfs_mdir_t root;
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 80242be:	687b      	ldr	r3, [r7, #4]
 80242c0:	f103 0220 	add.w	r2, r3, #32
 80242c4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80242c8:	4619      	mov	r1, r3
 80242ca:	6878      	ldr	r0, [r7, #4]
 80242cc:	f7fb f980 	bl	801f5d0 <lfs_dir_fetch>
 80242d0:	6578      	str	r0, [r7, #84]	@ 0x54
    if (err) {
 80242d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80242d4:	2b00      	cmp	r3, #0
 80242d6:	d001      	beq.n	80242dc <lfs_fs_desuperblock+0x5c>
        return err;
 80242d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80242da:	e031      	b.n	8024340 <lfs_fs_desuperblock+0xc0>
    }

    // write a new superblock
    lfs_superblock_t superblock = {
        .version     = lfs_fs_disk_version(lfs),
 80242dc:	6878      	ldr	r0, [r7, #4]
 80242de:	f7f9 fe33 	bl	801df48 <lfs_fs_disk_version>
 80242e2:	4603      	mov	r3, r0
    lfs_superblock_t superblock = {
 80242e4:	61fb      	str	r3, [r7, #28]
        .block_size  = lfs->cfg->block_size,
 80242e6:	687b      	ldr	r3, [r7, #4]
 80242e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80242ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    lfs_superblock_t superblock = {
 80242ec:	623b      	str	r3, [r7, #32]
        .block_count = lfs->block_count,
 80242ee:	687b      	ldr	r3, [r7, #4]
 80242f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
    lfs_superblock_t superblock = {
 80242f2:	627b      	str	r3, [r7, #36]	@ 0x24
        .name_max    = lfs->name_max,
 80242f4:	687b      	ldr	r3, [r7, #4]
 80242f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
    lfs_superblock_t superblock = {
 80242f8:	62bb      	str	r3, [r7, #40]	@ 0x28
        .file_max    = lfs->file_max,
 80242fa:	687b      	ldr	r3, [r7, #4]
 80242fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
    lfs_superblock_t superblock = {
 80242fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        .attr_max    = lfs->attr_max,
 8024300:	687b      	ldr	r3, [r7, #4]
 8024302:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
    lfs_superblock_t superblock = {
 8024304:	633b      	str	r3, [r7, #48]	@ 0x30
    };

    lfs_superblock_tole32(&superblock);
 8024306:	f107 031c 	add.w	r3, r7, #28
 802430a:	4618      	mov	r0, r3
 802430c:	f7f9 fd92 	bl	801de34 <lfs_superblock_tole32>
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8024310:	4b10      	ldr	r3, [pc, #64]	@ (8024354 <lfs_fs_desuperblock+0xd4>)
 8024312:	617b      	str	r3, [r7, #20]
 8024314:	f107 031c 	add.w	r3, r7, #28
 8024318:	61bb      	str	r3, [r7, #24]
 802431a:	f107 0214 	add.w	r2, r7, #20
 802431e:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8024322:	2301      	movs	r3, #1
 8024324:	6878      	ldr	r0, [r7, #4]
 8024326:	f7fc ffad 	bl	8021284 <lfs_dir_commit>
 802432a:	6578      	str	r0, [r7, #84]	@ 0x54
            {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                &superblock}));
    if (err) {
 802432c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802432e:	2b00      	cmp	r3, #0
 8024330:	d001      	beq.n	8024336 <lfs_fs_desuperblock+0xb6>
        return err;
 8024332:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8024334:	e004      	b.n	8024340 <lfs_fs_desuperblock+0xc0>
    }

    lfs_fs_prepsuperblock(lfs, false);
 8024336:	2100      	movs	r1, #0
 8024338:	6878      	ldr	r0, [r7, #4]
 802433a:	f7ff ff01 	bl	8024140 <lfs_fs_prepsuperblock>
    return 0;
 802433e:	2300      	movs	r3, #0
}
 8024340:	4618      	mov	r0, r3
 8024342:	3758      	adds	r7, #88	@ 0x58
 8024344:	46bd      	mov	sp, r7
 8024346:	bd80      	pop	{r7, pc}
 8024348:	08040a48 	.word	0x08040a48
 802434c:	08040920 	.word	0x08040920
 8024350:	08041344 	.word	0x08041344
 8024354:	20100018 	.word	0x20100018

08024358 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 8024358:	b5b0      	push	{r4, r5, r7, lr}
 802435a:	b094      	sub	sp, #80	@ 0x50
 802435c:	af04      	add	r7, sp, #16
 802435e:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 8024360:	687b      	ldr	r3, [r7, #4]
 8024362:	333c      	adds	r3, #60	@ 0x3c
 8024364:	4618      	mov	r0, r3
 8024366:	f7f9 fc46 	bl	801dbf6 <lfs_gstate_hasmove>
 802436a:	4603      	mov	r3, r0
 802436c:	f083 0301 	eor.w	r3, r3, #1
 8024370:	b2db      	uxtb	r3, r3
 8024372:	2b00      	cmp	r3, #0
 8024374:	d001      	beq.n	802437a <lfs_fs_demove+0x22>
        return 0;
 8024376:	2300      	movs	r3, #0
 8024378:	e05b      	b.n	8024432 <lfs_fs_demove+0xda>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 802437a:	687b      	ldr	r3, [r7, #4]
 802437c:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 802437e:	687b      	ldr	r3, [r7, #4]
 8024380:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8024382:	687b      	ldr	r3, [r7, #4]
 8024384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8024386:	4618      	mov	r0, r3
 8024388:	f7f9 fba0 	bl	801dacc <lfs_tag_id>
 802438c:	4603      	mov	r3, r0
 802438e:	461a      	mov	r2, r3
 8024390:	4b2a      	ldr	r3, [pc, #168]	@ (802443c <lfs_fs_demove+0xe4>)
 8024392:	9302      	str	r3, [sp, #8]
 8024394:	9201      	str	r2, [sp, #4]
 8024396:	9400      	str	r4, [sp, #0]
 8024398:	462b      	mov	r3, r5
 802439a:	f241 3224 	movw	r2, #4900	@ 0x1324
 802439e:	4928      	ldr	r1, [pc, #160]	@ (8024440 <lfs_fs_demove+0xe8>)
 80243a0:	4828      	ldr	r0, [pc, #160]	@ (8024444 <lfs_fs_demove+0xec>)
 80243a2:	f00f f805 	bl	80333b0 <printf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // no other gstate is supported at this time, so if we found something else
    // something most likely went wrong in gstate calculation
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 80243a6:	687b      	ldr	r3, [r7, #4]
 80243a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80243aa:	4618      	mov	r0, r3
 80243ac:	f7f9 fb64 	bl	801da78 <lfs_tag_type3>
 80243b0:	4603      	mov	r3, r0
 80243b2:	461a      	mov	r2, r3
 80243b4:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 80243b8:	429a      	cmp	r2, r3
 80243ba:	d006      	beq.n	80243ca <lfs_fs_demove+0x72>
 80243bc:	4b22      	ldr	r3, [pc, #136]	@ (8024448 <lfs_fs_demove+0xf0>)
 80243be:	4a23      	ldr	r2, [pc, #140]	@ (802444c <lfs_fs_demove+0xf4>)
 80243c0:	f241 312b 	movw	r1, #4907	@ 0x132b
 80243c4:	481e      	ldr	r0, [pc, #120]	@ (8024440 <lfs_fs_demove+0xe8>)
 80243c6:	f00e ffbf 	bl	8033348 <__assert_func>

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 80243ca:	687b      	ldr	r3, [r7, #4]
 80243cc:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 80243d0:	f107 0318 	add.w	r3, r7, #24
 80243d4:	4619      	mov	r1, r3
 80243d6:	6878      	ldr	r0, [r7, #4]
 80243d8:	f7fb f8fa 	bl	801f5d0 <lfs_dir_fetch>
 80243dc:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (err) {
 80243de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80243e0:	2b00      	cmp	r3, #0
 80243e2:	d001      	beq.n	80243e8 <lfs_fs_demove+0x90>
        return err;
 80243e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80243e6:	e024      	b.n	8024432 <lfs_fs_demove+0xda>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 80243e8:	687b      	ldr	r3, [r7, #4]
 80243ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80243ec:	4618      	mov	r0, r3
 80243ee:	f7f9 fb6d 	bl	801dacc <lfs_tag_id>
 80243f2:	4603      	mov	r3, r0
 80243f4:	877b      	strh	r3, [r7, #58]	@ 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80243f6:	2200      	movs	r2, #0
 80243f8:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80243fc:	6878      	ldr	r0, [r7, #4]
 80243fe:	f7ff ff05 	bl	802420c <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 8024402:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8024404:	029b      	lsls	r3, r3, #10
 8024406:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 802440a:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 802440e:	613b      	str	r3, [r7, #16]
 8024410:	2300      	movs	r3, #0
 8024412:	617b      	str	r3, [r7, #20]
 8024414:	f107 0210 	add.w	r2, r7, #16
 8024418:	f107 0118 	add.w	r1, r7, #24
 802441c:	2301      	movs	r3, #1
 802441e:	6878      	ldr	r0, [r7, #4]
 8024420:	f7fc ff30 	bl	8021284 <lfs_dir_commit>
 8024424:	63f8      	str	r0, [r7, #60]	@ 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 8024426:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024428:	2b00      	cmp	r3, #0
 802442a:	d001      	beq.n	8024430 <lfs_fs_demove+0xd8>
        return err;
 802442c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802442e:	e000      	b.n	8024432 <lfs_fs_demove+0xda>
    }

    return 0;
 8024430:	2300      	movs	r3, #0
}
 8024432:	4618      	mov	r0, r3
 8024434:	3740      	adds	r7, #64	@ 0x40
 8024436:	46bd      	mov	sp, r7
 8024438:	bdb0      	pop	{r4, r5, r7, pc}
 802443a:	bf00      	nop
 802443c:	08040a48 	.word	0x08040a48
 8024440:	08040920 	.word	0x08040920
 8024444:	08041378 	.word	0x08041378
 8024448:	080413ac 	.word	0x080413ac
 802444c:	08044450 	.word	0x08044450

08024450 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 8024450:	b5b0      	push	{r4, r5, r7, lr}
 8024452:	b0b2      	sub	sp, #200	@ 0xc8
 8024454:	af04      	add	r7, sp, #16
 8024456:	6078      	str	r0, [r7, #4]
 8024458:	460b      	mov	r3, r1
 802445a:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 802445c:	687b      	ldr	r3, [r7, #4]
 802445e:	3330      	adds	r3, #48	@ 0x30
 8024460:	4618      	mov	r0, r3
 8024462:	f7f9 fba6 	bl	801dbb2 <lfs_gstate_hasorphans>
 8024466:	4603      	mov	r3, r0
 8024468:	f083 0301 	eor.w	r3, r3, #1
 802446c:	b2db      	uxtb	r3, r3
 802446e:	2b00      	cmp	r3, #0
 8024470:	d001      	beq.n	8024476 <lfs_fs_deorphan+0x26>
        return 0;
 8024472:	2300      	movs	r3, #0
 8024474:	e187      	b.n	8024786 <lfs_fs_deorphan+0x336>
    //
    // Two separate passes are needed as half-orphans can contain outdated
    // references to full-orphans, effectively hiding them from the deorphan
    // search.
    //
    int pass = 0;
 8024476:	2300      	movs	r3, #0
 8024478:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    while (pass < 2) {
 802447c:	e170      	b.n	8024760 <lfs_fs_deorphan+0x310>
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 802447e:	f107 0308 	add.w	r3, r7, #8
 8024482:	2220      	movs	r2, #32
 8024484:	2100      	movs	r1, #0
 8024486:	4618      	mov	r0, r3
 8024488:	f011 fcb2 	bl	8035df0 <memset>
 802448c:	2301      	movs	r3, #1
 802448e:	77fb      	strb	r3, [r7, #31]
 8024490:	2301      	movs	r3, #1
 8024492:	627b      	str	r3, [r7, #36]	@ 0x24
        lfs_mdir_t dir;
        bool moreorphans = false;
 8024494:	2300      	movs	r3, #0
 8024496:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 802449a:	e149      	b.n	8024730 <lfs_fs_deorphan+0x2e0>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 802449c:	f107 0308 	add.w	r3, r7, #8
 80244a0:	f103 0218 	add.w	r2, r3, #24
 80244a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80244a8:	4619      	mov	r1, r3
 80244aa:	6878      	ldr	r0, [r7, #4]
 80244ac:	f7fb f890 	bl	801f5d0 <lfs_dir_fetch>
 80244b0:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
            if (err) {
 80244b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80244b8:	2b00      	cmp	r3, #0
 80244ba:	d002      	beq.n	80244c2 <lfs_fs_deorphan+0x72>
                return err;
 80244bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80244c0:	e161      	b.n	8024786 <lfs_fs_deorphan+0x336>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 80244c2:	7ffb      	ldrb	r3, [r7, #31]
 80244c4:	f083 0301 	eor.w	r3, r3, #1
 80244c8:	b2db      	uxtb	r3, r3
 80244ca:	2b00      	cmp	r3, #0
 80244cc:	f000 8124 	beq.w	8024718 <lfs_fs_deorphan+0x2c8>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 80244d0:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80244d4:	f107 0308 	add.w	r3, r7, #8
 80244d8:	3318      	adds	r3, #24
 80244da:	4619      	mov	r1, r3
 80244dc:	6878      	ldr	r0, [r7, #4]
 80244de:	f7ff fdad 	bl	802403c <lfs_fs_parent>
 80244e2:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 80244e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80244ea:	2b00      	cmp	r3, #0
 80244ec:	da07      	bge.n	80244fe <lfs_fs_deorphan+0xae>
 80244ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80244f2:	f113 0f02 	cmn.w	r3, #2
 80244f6:	d002      	beq.n	80244fe <lfs_fs_deorphan+0xae>
                    return tag;
 80244f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80244fc:	e143      	b.n	8024786 <lfs_fs_deorphan+0x336>
                }

                if (pass == 0 && tag != LFS_ERR_NOENT) {
 80244fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8024502:	2b00      	cmp	r3, #0
 8024504:	f040 80ac 	bne.w	8024660 <lfs_fs_deorphan+0x210>
 8024508:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 802450c:	f113 0f02 	cmn.w	r3, #2
 8024510:	f000 80a6 	beq.w	8024660 <lfs_fs_deorphan+0x210>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 8024514:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8024518:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 802451c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8024520:	9300      	str	r3, [sp, #0]
 8024522:	4613      	mov	r3, r2
 8024524:	4a9a      	ldr	r2, [pc, #616]	@ (8024790 <lfs_fs_deorphan+0x340>)
 8024526:	6878      	ldr	r0, [r7, #4]
 8024528:	f7f9 ff4c 	bl	801e3c4 <lfs_dir_get>
 802452c:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 8024530:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8024534:	2b00      	cmp	r3, #0
 8024536:	da02      	bge.n	802453e <lfs_fs_deorphan+0xee>
                        return state;
 8024538:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 802453c:	e0eb      	b.n	8024716 <lfs_fs_deorphan+0x2c6>
                    }
                    lfs_pair_fromle32(pair);
 802453e:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8024542:	4618      	mov	r0, r3
 8024544:	f7f9 fa23 	bl	801d98e <lfs_pair_fromle32>

                    if (!lfs_pair_issync(pair, pdir.tail)) {
 8024548:	f107 0308 	add.w	r3, r7, #8
 802454c:	f103 0218 	add.w	r2, r3, #24
 8024550:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8024554:	4611      	mov	r1, r2
 8024556:	4618      	mov	r0, r3
 8024558:	f7f9 f9ec 	bl	801d934 <lfs_pair_issync>
 802455c:	4603      	mov	r3, r0
 802455e:	f083 0301 	eor.w	r3, r3, #1
 8024562:	b2db      	uxtb	r3, r3
 8024564:	2b00      	cmp	r3, #0
 8024566:	d07b      	beq.n	8024660 <lfs_fs_deorphan+0x210>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 8024568:	6a38      	ldr	r0, [r7, #32]
 802456a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802456c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8024570:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8024574:	4c87      	ldr	r4, [pc, #540]	@ (8024794 <lfs_fs_deorphan+0x344>)
 8024576:	9403      	str	r4, [sp, #12]
 8024578:	9102      	str	r1, [sp, #8]
 802457a:	9201      	str	r2, [sp, #4]
 802457c:	9300      	str	r3, [sp, #0]
 802457e:	4603      	mov	r3, r0
 8024580:	f241 3271 	movw	r2, #4977	@ 0x1371
 8024584:	4984      	ldr	r1, [pc, #528]	@ (8024798 <lfs_fs_deorphan+0x348>)
 8024586:	4885      	ldr	r0, [pc, #532]	@ (802479c <lfs_fs_deorphan+0x34c>)
 8024588:	f00e ff12 	bl	80333b0 <printf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 802458c:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8024590:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8024594:	687b      	ldr	r3, [r7, #4]
 8024596:	3330      	adds	r3, #48	@ 0x30
 8024598:	f107 0208 	add.w	r2, r7, #8
 802459c:	4611      	mov	r1, r2
 802459e:	4618      	mov	r0, r3
 80245a0:	f7f9 fb50 	bl	801dc44 <lfs_gstate_hasmovehere>
 80245a4:	4603      	mov	r3, r0
 80245a6:	2b00      	cmp	r3, #0
 80245a8:	d01c      	beq.n	80245e4 <lfs_fs_deorphan+0x194>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 80245aa:	687b      	ldr	r3, [r7, #4]
 80245ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80245ae:	4618      	mov	r0, r3
 80245b0:	f7f9 fa8c 	bl	801dacc <lfs_tag_id>
 80245b4:	4603      	mov	r3, r0
 80245b6:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
                            LFS_DEBUG("Fixing move while fixing orphans "
 80245ba:	68b9      	ldr	r1, [r7, #8]
 80245bc:	68fb      	ldr	r3, [r7, #12]
 80245be:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	@ 0xb0
 80245c2:	4874      	ldr	r0, [pc, #464]	@ (8024794 <lfs_fs_deorphan+0x344>)
 80245c4:	9002      	str	r0, [sp, #8]
 80245c6:	9201      	str	r2, [sp, #4]
 80245c8:	9300      	str	r3, [sp, #0]
 80245ca:	460b      	mov	r3, r1
 80245cc:	f241 327c 	movw	r2, #4988	@ 0x137c
 80245d0:	4971      	ldr	r1, [pc, #452]	@ (8024798 <lfs_fs_deorphan+0x348>)
 80245d2:	4873      	ldr	r0, [pc, #460]	@ (80247a0 <lfs_fs_deorphan+0x350>)
 80245d4:	f00e feec 	bl	80333b0 <printf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80245d8:	2200      	movs	r2, #0
 80245da:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80245de:	6878      	ldr	r0, [r7, #4]
 80245e0:	f7ff fe14 	bl	802420c <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 80245e4:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80245e8:	4618      	mov	r0, r3
 80245ea:	f7f9 f9ea 	bl	801d9c2 <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 80245ee:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 80245f2:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80245f6:	4293      	cmp	r3, r2
 80245f8:	d007      	beq.n	802460a <lfs_fs_deorphan+0x1ba>
 80245fa:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 80245fe:	029b      	lsls	r3, r3, #10
 8024600:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8024604:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8024608:	e000      	b.n	802460c <lfs_fs_deorphan+0x1bc>
 802460a:	2300      	movs	r3, #0
 802460c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8024610:	2300      	movs	r3, #0
 8024612:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8024616:	4b63      	ldr	r3, [pc, #396]	@ (80247a4 <lfs_fs_deorphan+0x354>)
 8024618:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 802461c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8024620:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8024624:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 8024628:	f107 0108 	add.w	r1, r7, #8
 802462c:	2302      	movs	r3, #2
 802462e:	6878      	ldr	r0, [r7, #4]
 8024630:	f7fc fb2e 	bl	8020c90 <lfs_dir_orphaningcommit>
 8024634:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 8024638:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 802463c:	4618      	mov	r0, r3
 802463e:	f7f9 f9a6 	bl	801d98e <lfs_pair_fromle32>
                        if (state < 0) {
 8024642:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8024646:	2b00      	cmp	r3, #0
 8024648:	da02      	bge.n	8024650 <lfs_fs_deorphan+0x200>
                            return state;
 802464a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                        return state;
 802464e:	e062      	b.n	8024716 <lfs_fs_deorphan+0x2c6>
                        }

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 8024650:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8024654:	2b03      	cmp	r3, #3
 8024656:	d16b      	bne.n	8024730 <lfs_fs_deorphan+0x2e0>
                            moreorphans = true;
 8024658:	2301      	movs	r3, #1
 802465a:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 802465e:	e067      	b.n	8024730 <lfs_fs_deorphan+0x2e0>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 8024660:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8024664:	2b01      	cmp	r3, #1
 8024666:	d157      	bne.n	8024718 <lfs_fs_deorphan+0x2c8>
 8024668:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 802466c:	f113 0f02 	cmn.w	r3, #2
 8024670:	d152      	bne.n	8024718 <lfs_fs_deorphan+0x2c8>
 8024672:	78fb      	ldrb	r3, [r7, #3]
 8024674:	2b00      	cmp	r3, #0
 8024676:	d04f      	beq.n	8024718 <lfs_fs_deorphan+0x2c8>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 8024678:	6a3a      	ldr	r2, [r7, #32]
 802467a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802467c:	4945      	ldr	r1, [pc, #276]	@ (8024794 <lfs_fs_deorphan+0x344>)
 802467e:	9101      	str	r1, [sp, #4]
 8024680:	9300      	str	r3, [sp, #0]
 8024682:	4613      	mov	r3, r2
 8024684:	f241 329c 	movw	r2, #5020	@ 0x139c
 8024688:	4943      	ldr	r1, [pc, #268]	@ (8024798 <lfs_fs_deorphan+0x348>)
 802468a:	4847      	ldr	r0, [pc, #284]	@ (80247a8 <lfs_fs_deorphan+0x358>)
 802468c:	f00e fe90 	bl	80333b0 <printf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 8024690:	687b      	ldr	r3, [r7, #4]
 8024692:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8024696:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 802469a:	4619      	mov	r1, r3
 802469c:	6878      	ldr	r0, [r7, #4]
 802469e:	f7fa ffb3 	bl	801f608 <lfs_dir_getgstate>
 80246a2:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
                    if (err) {
 80246a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80246aa:	2b00      	cmp	r3, #0
 80246ac:	d002      	beq.n	80246b4 <lfs_fs_deorphan+0x264>
                        return err;
 80246ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80246b2:	e030      	b.n	8024716 <lfs_fs_deorphan+0x2c6>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 80246b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80246b8:	3318      	adds	r3, #24
 80246ba:	4618      	mov	r0, r3
 80246bc:	f7f9 f981 	bl	801d9c2 <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 80246c0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80246c4:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80246c8:	051a      	lsls	r2, r3, #20
 80246ca:	4b38      	ldr	r3, [pc, #224]	@ (80247ac <lfs_fs_deorphan+0x35c>)
 80246cc:	4313      	orrs	r3, r2
 80246ce:	673b      	str	r3, [r7, #112]	@ 0x70
 80246d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80246d4:	3318      	adds	r3, #24
 80246d6:	677b      	str	r3, [r7, #116]	@ 0x74
 80246d8:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80246dc:	f107 0108 	add.w	r1, r7, #8
 80246e0:	2301      	movs	r3, #1
 80246e2:	6878      	ldr	r0, [r7, #4]
 80246e4:	f7fc fad4 	bl	8020c90 <lfs_dir_orphaningcommit>
 80246e8:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 80246ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80246f0:	3318      	adds	r3, #24
 80246f2:	4618      	mov	r0, r3
 80246f4:	f7f9 f94b 	bl	801d98e <lfs_pair_fromle32>
                    if (state < 0) {
 80246f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80246fc:	2b00      	cmp	r3, #0
 80246fe:	da02      	bge.n	8024706 <lfs_fs_deorphan+0x2b6>
                        return state;
 8024700:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
                    return tag;
 8024704:	e03f      	b.n	8024786 <lfs_fs_deorphan+0x336>
                    }

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 8024706:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 802470a:	2b03      	cmp	r3, #3
 802470c:	d10f      	bne.n	802472e <lfs_fs_deorphan+0x2de>
                        moreorphans = true;
 802470e:	2301      	movs	r3, #1
 8024710:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 8024714:	e00c      	b.n	8024730 <lfs_fs_deorphan+0x2e0>
                return err;
 8024716:	e036      	b.n	8024786 <lfs_fs_deorphan+0x336>
                    // refetch tail
                    continue;
                }
            }

            pdir = dir;
 8024718:	f107 0408 	add.w	r4, r7, #8
 802471c:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 8024720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8024722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8024724:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8024728:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 802472c:	e000      	b.n	8024730 <lfs_fs_deorphan+0x2e0>
                    continue;
 802472e:	bf00      	nop
        while (!lfs_pair_isnull(pdir.tail)) {
 8024730:	f107 0308 	add.w	r3, r7, #8
 8024734:	3318      	adds	r3, #24
 8024736:	4618      	mov	r0, r3
 8024738:	f7f9 f8b7 	bl	801d8aa <lfs_pair_isnull>
 802473c:	4603      	mov	r3, r0
 802473e:	f083 0301 	eor.w	r3, r3, #1
 8024742:	b2db      	uxtb	r3, r3
 8024744:	2b00      	cmp	r3, #0
 8024746:	f47f aea9 	bne.w	802449c <lfs_fs_deorphan+0x4c>
        }

        pass = moreorphans ? 0 : pass+1;
 802474a:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 802474e:	2b00      	cmp	r3, #0
 8024750:	d001      	beq.n	8024756 <lfs_fs_deorphan+0x306>
 8024752:	2300      	movs	r3, #0
 8024754:	e002      	b.n	802475c <lfs_fs_deorphan+0x30c>
 8024756:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 802475a:	3301      	adds	r3, #1
 802475c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    while (pass < 2) {
 8024760:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8024764:	2b01      	cmp	r3, #1
 8024766:	f77f ae8a 	ble.w	802447e <lfs_fs_deorphan+0x2e>
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 802476a:	687b      	ldr	r3, [r7, #4]
 802476c:	3330      	adds	r3, #48	@ 0x30
 802476e:	4618      	mov	r0, r3
 8024770:	f7f9 fa32 	bl	801dbd8 <lfs_gstate_getorphans>
 8024774:	4603      	mov	r3, r0
 8024776:	425b      	negs	r3, r3
 8024778:	b2db      	uxtb	r3, r3
 802477a:	b25b      	sxtb	r3, r3
 802477c:	4619      	mov	r1, r3
 802477e:	6878      	ldr	r0, [r7, #4]
 8024780:	f7ff fcf4 	bl	802416c <lfs_fs_preporphans>
 8024784:	4603      	mov	r3, r0
}
 8024786:	4618      	mov	r0, r3
 8024788:	37b8      	adds	r7, #184	@ 0xb8
 802478a:	46bd      	mov	sp, r7
 802478c:	bdb0      	pop	{r4, r5, r7, pc}
 802478e:	bf00      	nop
 8024790:	7ffffc00 	.word	0x7ffffc00
 8024794:	08040a48 	.word	0x08040a48
 8024798:	08040920 	.word	0x08040920
 802479c:	080413e0 	.word	0x080413e0
 80247a0:	08041424 	.word	0x08041424
 80247a4:	600ffc08 	.word	0x600ffc08
 80247a8:	0804146c 	.word	0x0804146c
 80247ac:	000ffc08 	.word	0x000ffc08

080247b0 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 80247b0:	b580      	push	{r7, lr}
 80247b2:	b084      	sub	sp, #16
 80247b4:	af00      	add	r7, sp, #0
 80247b6:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_desuperblock(lfs);
 80247b8:	6878      	ldr	r0, [r7, #4]
 80247ba:	f7ff fd61 	bl	8024280 <lfs_fs_desuperblock>
 80247be:	60f8      	str	r0, [r7, #12]
    if (err) {
 80247c0:	68fb      	ldr	r3, [r7, #12]
 80247c2:	2b00      	cmp	r3, #0
 80247c4:	d001      	beq.n	80247ca <lfs_fs_forceconsistency+0x1a>
        return err;
 80247c6:	68fb      	ldr	r3, [r7, #12]
 80247c8:	e013      	b.n	80247f2 <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_demove(lfs);
 80247ca:	6878      	ldr	r0, [r7, #4]
 80247cc:	f7ff fdc4 	bl	8024358 <lfs_fs_demove>
 80247d0:	60f8      	str	r0, [r7, #12]
    if (err) {
 80247d2:	68fb      	ldr	r3, [r7, #12]
 80247d4:	2b00      	cmp	r3, #0
 80247d6:	d001      	beq.n	80247dc <lfs_fs_forceconsistency+0x2c>
        return err;
 80247d8:	68fb      	ldr	r3, [r7, #12]
 80247da:	e00a      	b.n	80247f2 <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_deorphan(lfs, true);
 80247dc:	2101      	movs	r1, #1
 80247de:	6878      	ldr	r0, [r7, #4]
 80247e0:	f7ff fe36 	bl	8024450 <lfs_fs_deorphan>
 80247e4:	60f8      	str	r0, [r7, #12]
    if (err) {
 80247e6:	68fb      	ldr	r3, [r7, #12]
 80247e8:	2b00      	cmp	r3, #0
 80247ea:	d001      	beq.n	80247f0 <lfs_fs_forceconsistency+0x40>
        return err;
 80247ec:	68fb      	ldr	r3, [r7, #12]
 80247ee:	e000      	b.n	80247f2 <lfs_fs_forceconsistency+0x42>
    }

    return 0;
 80247f0:	2300      	movs	r3, #0
}
 80247f2:	4618      	mov	r0, r3
 80247f4:	3710      	adds	r7, #16
 80247f6:	46bd      	mov	sp, r7
 80247f8:	bd80      	pop	{r7, pc}

080247fa <lfs_fs_size_count>:

    return 0;
}
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 80247fa:	b480      	push	{r7}
 80247fc:	b085      	sub	sp, #20
 80247fe:	af00      	add	r7, sp, #0
 8024800:	6078      	str	r0, [r7, #4]
 8024802:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 8024804:	687b      	ldr	r3, [r7, #4]
 8024806:	60fb      	str	r3, [r7, #12]
    *size += 1;
 8024808:	68fb      	ldr	r3, [r7, #12]
 802480a:	681b      	ldr	r3, [r3, #0]
 802480c:	1c5a      	adds	r2, r3, #1
 802480e:	68fb      	ldr	r3, [r7, #12]
 8024810:	601a      	str	r2, [r3, #0]
    return 0;
 8024812:	2300      	movs	r3, #0
}
 8024814:	4618      	mov	r0, r3
 8024816:	3714      	adds	r7, #20
 8024818:	46bd      	mov	sp, r7
 802481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802481e:	4770      	bx	lr

08024820 <lfs_fs_size_>:

static lfs_ssize_t lfs_fs_size_(lfs_t *lfs) {
 8024820:	b580      	push	{r7, lr}
 8024822:	b084      	sub	sp, #16
 8024824:	af00      	add	r7, sp, #0
 8024826:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 8024828:	2300      	movs	r3, #0
 802482a:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_traverse_(lfs, lfs_fs_size_count, &size, false);
 802482c:	f107 0208 	add.w	r2, r7, #8
 8024830:	2300      	movs	r3, #0
 8024832:	4907      	ldr	r1, [pc, #28]	@ (8024850 <lfs_fs_size_+0x30>)
 8024834:	6878      	ldr	r0, [r7, #4]
 8024836:	f7ff f9ff 	bl	8023c38 <lfs_fs_traverse_>
 802483a:	60f8      	str	r0, [r7, #12]
    if (err) {
 802483c:	68fb      	ldr	r3, [r7, #12]
 802483e:	2b00      	cmp	r3, #0
 8024840:	d001      	beq.n	8024846 <lfs_fs_size_+0x26>
        return err;
 8024842:	68fb      	ldr	r3, [r7, #12]
 8024844:	e000      	b.n	8024848 <lfs_fs_size_+0x28>
    }

    return size;
 8024846:	68bb      	ldr	r3, [r7, #8]
}
 8024848:	4618      	mov	r0, r3
 802484a:	3710      	adds	r7, #16
 802484c:	46bd      	mov	sp, r7
 802484e:	bd80      	pop	{r7, pc}
 8024850:	080247fb 	.word	0x080247fb

08024854 <lfs_format>:
//#define LFS_UNLOCK(cfg) ((void)cfg)
//#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 8024854:	b580      	push	{r7, lr}
 8024856:	b084      	sub	sp, #16
 8024858:	af00      	add	r7, sp, #0
 802485a:	6078      	str	r0, [r7, #4]
 802485c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 802485e:	683b      	ldr	r3, [r7, #0]
 8024860:	695b      	ldr	r3, [r3, #20]
 8024862:	6838      	ldr	r0, [r7, #0]
 8024864:	4798      	blx	r3
 8024866:	60f8      	str	r0, [r7, #12]
    if (err) {
 8024868:	68fb      	ldr	r3, [r7, #12]
 802486a:	2b00      	cmp	r3, #0
 802486c:	d001      	beq.n	8024872 <lfs_format+0x1e>
        return err;
 802486e:	68fb      	ldr	r3, [r7, #12]
 8024870:	e009      	b.n	8024886 <lfs_format+0x32>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_format_(lfs, cfg);
 8024872:	6839      	ldr	r1, [r7, #0]
 8024874:	6878      	ldr	r0, [r7, #4]
 8024876:	f7fe ff01 	bl	802367c <lfs_format_>
 802487a:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
 802487c:	683b      	ldr	r3, [r7, #0]
 802487e:	699b      	ldr	r3, [r3, #24]
 8024880:	6838      	ldr	r0, [r7, #0]
 8024882:	4798      	blx	r3
    return err;
 8024884:	68fb      	ldr	r3, [r7, #12]
}
 8024886:	4618      	mov	r0, r3
 8024888:	3710      	adds	r7, #16
 802488a:	46bd      	mov	sp, r7
 802488c:	bd80      	pop	{r7, pc}

0802488e <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 802488e:	b580      	push	{r7, lr}
 8024890:	b084      	sub	sp, #16
 8024892:	af00      	add	r7, sp, #0
 8024894:	6078      	str	r0, [r7, #4]
 8024896:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 8024898:	683b      	ldr	r3, [r7, #0]
 802489a:	695b      	ldr	r3, [r3, #20]
 802489c:	6838      	ldr	r0, [r7, #0]
 802489e:	4798      	blx	r3
 80248a0:	60f8      	str	r0, [r7, #12]
    if (err) {
 80248a2:	68fb      	ldr	r3, [r7, #12]
 80248a4:	2b00      	cmp	r3, #0
 80248a6:	d001      	beq.n	80248ac <lfs_mount+0x1e>
        return err;
 80248a8:	68fb      	ldr	r3, [r7, #12]
 80248aa:	e009      	b.n	80248c0 <lfs_mount+0x32>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_mount_(lfs, cfg);
 80248ac:	6839      	ldr	r1, [r7, #0]
 80248ae:	6878      	ldr	r0, [r7, #4]
 80248b0:	f7fe ff96 	bl	80237e0 <lfs_mount_>
 80248b4:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
 80248b6:	683b      	ldr	r3, [r7, #0]
 80248b8:	699b      	ldr	r3, [r3, #24]
 80248ba:	6838      	ldr	r0, [r7, #0]
 80248bc:	4798      	blx	r3
    return err;
 80248be:	68fb      	ldr	r3, [r7, #12]
}
 80248c0:	4618      	mov	r0, r3
 80248c2:	3710      	adds	r7, #16
 80248c4:	46bd      	mov	sp, r7
 80248c6:	bd80      	pop	{r7, pc}

080248c8 <lfs_remove>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}

#ifndef LFS_READONLY
int lfs_remove(lfs_t *lfs, const char *path) {
 80248c8:	b580      	push	{r7, lr}
 80248ca:	b084      	sub	sp, #16
 80248cc:	af00      	add	r7, sp, #0
 80248ce:	6078      	str	r0, [r7, #4]
 80248d0:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80248d2:	687b      	ldr	r3, [r7, #4]
 80248d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80248d6:	695b      	ldr	r3, [r3, #20]
 80248d8:	687a      	ldr	r2, [r7, #4]
 80248da:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80248dc:	4610      	mov	r0, r2
 80248de:	4798      	blx	r3
 80248e0:	60f8      	str	r0, [r7, #12]
    if (err) {
 80248e2:	68fb      	ldr	r3, [r7, #12]
 80248e4:	2b00      	cmp	r3, #0
 80248e6:	d001      	beq.n	80248ec <lfs_remove+0x24>
        return err;
 80248e8:	68fb      	ldr	r3, [r7, #12]
 80248ea:	e00c      	b.n	8024906 <lfs_remove+0x3e>
    }
    LFS_TRACE("lfs_remove(%p, \"%s\")", (void*)lfs, path);

    err = lfs_remove_(lfs, path);
 80248ec:	6839      	ldr	r1, [r7, #0]
 80248ee:	6878      	ldr	r0, [r7, #4]
 80248f0:	f7fe f94a 	bl	8022b88 <lfs_remove_>
 80248f4:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_remove -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 80248f6:	687b      	ldr	r3, [r7, #4]
 80248f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80248fa:	699b      	ldr	r3, [r3, #24]
 80248fc:	687a      	ldr	r2, [r7, #4]
 80248fe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8024900:	4610      	mov	r0, r2
 8024902:	4798      	blx	r3
    return err;
 8024904:	68fb      	ldr	r3, [r7, #12]
}
 8024906:	4618      	mov	r0, r3
 8024908:	3710      	adds	r7, #16
 802490a:	46bd      	mov	sp, r7
 802490c:	bd80      	pop	{r7, pc}

0802490e <lfs_rename>:
#endif

#ifndef LFS_READONLY
int lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {
 802490e:	b580      	push	{r7, lr}
 8024910:	b086      	sub	sp, #24
 8024912:	af00      	add	r7, sp, #0
 8024914:	60f8      	str	r0, [r7, #12]
 8024916:	60b9      	str	r1, [r7, #8]
 8024918:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 802491a:	68fb      	ldr	r3, [r7, #12]
 802491c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802491e:	695b      	ldr	r3, [r3, #20]
 8024920:	68fa      	ldr	r2, [r7, #12]
 8024922:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8024924:	4610      	mov	r0, r2
 8024926:	4798      	blx	r3
 8024928:	6178      	str	r0, [r7, #20]
    if (err) {
 802492a:	697b      	ldr	r3, [r7, #20]
 802492c:	2b00      	cmp	r3, #0
 802492e:	d001      	beq.n	8024934 <lfs_rename+0x26>
        return err;
 8024930:	697b      	ldr	r3, [r7, #20]
 8024932:	e00d      	b.n	8024950 <lfs_rename+0x42>
    }
    LFS_TRACE("lfs_rename(%p, \"%s\", \"%s\")", (void*)lfs, oldpath, newpath);

    err = lfs_rename_(lfs, oldpath, newpath);
 8024934:	687a      	ldr	r2, [r7, #4]
 8024936:	68b9      	ldr	r1, [r7, #8]
 8024938:	68f8      	ldr	r0, [r7, #12]
 802493a:	f7fe f9f7 	bl	8022d2c <lfs_rename_>
 802493e:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_rename -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 8024940:	68fb      	ldr	r3, [r7, #12]
 8024942:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024944:	699b      	ldr	r3, [r3, #24]
 8024946:	68fa      	ldr	r2, [r7, #12]
 8024948:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 802494a:	4610      	mov	r0, r2
 802494c:	4798      	blx	r3
    return err;
 802494e:	697b      	ldr	r3, [r7, #20]
}
 8024950:	4618      	mov	r0, r3
 8024952:	3718      	adds	r7, #24
 8024954:	46bd      	mov	sp, r7
 8024956:	bd80      	pop	{r7, pc}

08024958 <lfs_stat>:
#endif

int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 8024958:	b580      	push	{r7, lr}
 802495a:	b086      	sub	sp, #24
 802495c:	af00      	add	r7, sp, #0
 802495e:	60f8      	str	r0, [r7, #12]
 8024960:	60b9      	str	r1, [r7, #8]
 8024962:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 8024964:	68fb      	ldr	r3, [r7, #12]
 8024966:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024968:	695b      	ldr	r3, [r3, #20]
 802496a:	68fa      	ldr	r2, [r7, #12]
 802496c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 802496e:	4610      	mov	r0, r2
 8024970:	4798      	blx	r3
 8024972:	6178      	str	r0, [r7, #20]
    if (err) {
 8024974:	697b      	ldr	r3, [r7, #20]
 8024976:	2b00      	cmp	r3, #0
 8024978:	d001      	beq.n	802497e <lfs_stat+0x26>
        return err;
 802497a:	697b      	ldr	r3, [r7, #20]
 802497c:	e00d      	b.n	802499a <lfs_stat+0x42>
    }
    LFS_TRACE("lfs_stat(%p, \"%s\", %p)", (void*)lfs, path, (void*)info);

    err = lfs_stat_(lfs, path, info);
 802497e:	687a      	ldr	r2, [r7, #4]
 8024980:	68b9      	ldr	r1, [r7, #8]
 8024982:	68f8      	ldr	r0, [r7, #12]
 8024984:	f7fe f8db 	bl	8022b3e <lfs_stat_>
 8024988:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_stat -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 802498a:	68fb      	ldr	r3, [r7, #12]
 802498c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802498e:	699b      	ldr	r3, [r3, #24]
 8024990:	68fa      	ldr	r2, [r7, #12]
 8024992:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8024994:	4610      	mov	r0, r2
 8024996:	4798      	blx	r3
    return err;
 8024998:	697b      	ldr	r3, [r7, #20]
}
 802499a:	4618      	mov	r0, r3
 802499c:	3718      	adds	r7, #24
 802499e:	46bd      	mov	sp, r7
 80249a0:	bd80      	pop	{r7, pc}
	...

080249a4 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 80249a4:	b580      	push	{r7, lr}
 80249a6:	b086      	sub	sp, #24
 80249a8:	af00      	add	r7, sp, #0
 80249aa:	60f8      	str	r0, [r7, #12]
 80249ac:	60b9      	str	r1, [r7, #8]
 80249ae:	607a      	str	r2, [r7, #4]
 80249b0:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80249b2:	68fb      	ldr	r3, [r7, #12]
 80249b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80249b6:	695b      	ldr	r3, [r3, #20]
 80249b8:	68fa      	ldr	r2, [r7, #12]
 80249ba:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80249bc:	4610      	mov	r0, r2
 80249be:	4798      	blx	r3
 80249c0:	6178      	str	r0, [r7, #20]
    if (err) {
 80249c2:	697b      	ldr	r3, [r7, #20]
 80249c4:	2b00      	cmp	r3, #0
 80249c6:	d001      	beq.n	80249cc <lfs_file_open+0x28>
        return err;
 80249c8:	697b      	ldr	r3, [r7, #20]
 80249ca:	e021      	b.n	8024a10 <lfs_file_open+0x6c>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80249cc:	68fb      	ldr	r3, [r7, #12]
 80249ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80249d0:	68b9      	ldr	r1, [r7, #8]
 80249d2:	4618      	mov	r0, r3
 80249d4:	f7f9 fa66 	bl	801dea4 <lfs_mlist_isopen>
 80249d8:	4603      	mov	r3, r0
 80249da:	f083 0301 	eor.w	r3, r3, #1
 80249de:	b2db      	uxtb	r3, r3
 80249e0:	2b00      	cmp	r3, #0
 80249e2:	d106      	bne.n	80249f2 <lfs_file_open+0x4e>
 80249e4:	4b0c      	ldr	r3, [pc, #48]	@ (8024a18 <lfs_file_open+0x74>)
 80249e6:	4a0d      	ldr	r2, [pc, #52]	@ (8024a1c <lfs_file_open+0x78>)
 80249e8:	f241 71ad 	movw	r1, #6061	@ 0x17ad
 80249ec:	480c      	ldr	r0, [pc, #48]	@ (8024a20 <lfs_file_open+0x7c>)
 80249ee:	f00e fcab 	bl	8033348 <__assert_func>

    err = lfs_file_open_(lfs, file, path, flags);
 80249f2:	683b      	ldr	r3, [r7, #0]
 80249f4:	687a      	ldr	r2, [r7, #4]
 80249f6:	68b9      	ldr	r1, [r7, #8]
 80249f8:	68f8      	ldr	r0, [r7, #12]
 80249fa:	f7fd faad 	bl	8021f58 <lfs_file_open_>
 80249fe:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 8024a00:	68fb      	ldr	r3, [r7, #12]
 8024a02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024a04:	699b      	ldr	r3, [r3, #24]
 8024a06:	68fa      	ldr	r2, [r7, #12]
 8024a08:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8024a0a:	4610      	mov	r0, r2
 8024a0c:	4798      	blx	r3
    return err;
 8024a0e:	697b      	ldr	r3, [r7, #20]
}
 8024a10:	4618      	mov	r0, r3
 8024a12:	3718      	adds	r7, #24
 8024a14:	46bd      	mov	sp, r7
 8024a16:	bd80      	pop	{r7, pc}
 8024a18:	080414bc 	.word	0x080414bc
 8024a1c:	08044460 	.word	0x08044460
 8024a20:	08040920 	.word	0x08040920

08024a24 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 8024a24:	b580      	push	{r7, lr}
 8024a26:	b084      	sub	sp, #16
 8024a28:	af00      	add	r7, sp, #0
 8024a2a:	6078      	str	r0, [r7, #4]
 8024a2c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8024a2e:	687b      	ldr	r3, [r7, #4]
 8024a30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024a32:	695b      	ldr	r3, [r3, #20]
 8024a34:	687a      	ldr	r2, [r7, #4]
 8024a36:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8024a38:	4610      	mov	r0, r2
 8024a3a:	4798      	blx	r3
 8024a3c:	60f8      	str	r0, [r7, #12]
    if (err) {
 8024a3e:	68fb      	ldr	r3, [r7, #12]
 8024a40:	2b00      	cmp	r3, #0
 8024a42:	d001      	beq.n	8024a48 <lfs_file_close+0x24>
        return err;
 8024a44:	68fb      	ldr	r3, [r7, #12]
 8024a46:	e01c      	b.n	8024a82 <lfs_file_close+0x5e>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8024a48:	687b      	ldr	r3, [r7, #4]
 8024a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024a4c:	6839      	ldr	r1, [r7, #0]
 8024a4e:	4618      	mov	r0, r3
 8024a50:	f7f9 fa28 	bl	801dea4 <lfs_mlist_isopen>
 8024a54:	4603      	mov	r3, r0
 8024a56:	2b00      	cmp	r3, #0
 8024a58:	d106      	bne.n	8024a68 <lfs_file_close+0x44>
 8024a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8024a8c <lfs_file_close+0x68>)
 8024a5c:	4a0c      	ldr	r2, [pc, #48]	@ (8024a90 <lfs_file_close+0x6c>)
 8024a5e:	f241 71d1 	movw	r1, #6097	@ 0x17d1
 8024a62:	480c      	ldr	r0, [pc, #48]	@ (8024a94 <lfs_file_close+0x70>)
 8024a64:	f00e fc70 	bl	8033348 <__assert_func>

    err = lfs_file_close_(lfs, file);
 8024a68:	6839      	ldr	r1, [r7, #0]
 8024a6a:	6878      	ldr	r0, [r7, #4]
 8024a6c:	f7fd fa8c 	bl	8021f88 <lfs_file_close_>
 8024a70:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 8024a72:	687b      	ldr	r3, [r7, #4]
 8024a74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024a76:	699b      	ldr	r3, [r3, #24]
 8024a78:	687a      	ldr	r2, [r7, #4]
 8024a7a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8024a7c:	4610      	mov	r0, r2
 8024a7e:	4798      	blx	r3
    return err;
 8024a80:	68fb      	ldr	r3, [r7, #12]
}
 8024a82:	4618      	mov	r0, r3
 8024a84:	3710      	adds	r7, #16
 8024a86:	46bd      	mov	sp, r7
 8024a88:	bd80      	pop	{r7, pc}
 8024a8a:	bf00      	nop
 8024a8c:	080414f4 	.word	0x080414f4
 8024a90:	08044470 	.word	0x08044470
 8024a94:	08040920 	.word	0x08040920

08024a98 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8024a98:	b580      	push	{r7, lr}
 8024a9a:	b086      	sub	sp, #24
 8024a9c:	af00      	add	r7, sp, #0
 8024a9e:	60f8      	str	r0, [r7, #12]
 8024aa0:	60b9      	str	r1, [r7, #8]
 8024aa2:	607a      	str	r2, [r7, #4]
 8024aa4:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8024aa6:	68fb      	ldr	r3, [r7, #12]
 8024aa8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024aaa:	695b      	ldr	r3, [r3, #20]
 8024aac:	68fa      	ldr	r2, [r7, #12]
 8024aae:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8024ab0:	4610      	mov	r0, r2
 8024ab2:	4798      	blx	r3
 8024ab4:	6178      	str	r0, [r7, #20]
    if (err) {
 8024ab6:	697b      	ldr	r3, [r7, #20]
 8024ab8:	2b00      	cmp	r3, #0
 8024aba:	d001      	beq.n	8024ac0 <lfs_file_read+0x28>
        return err;
 8024abc:	697b      	ldr	r3, [r7, #20]
 8024abe:	e01e      	b.n	8024afe <lfs_file_read+0x66>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8024ac0:	68fb      	ldr	r3, [r7, #12]
 8024ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024ac4:	68b9      	ldr	r1, [r7, #8]
 8024ac6:	4618      	mov	r0, r3
 8024ac8:	f7f9 f9ec 	bl	801dea4 <lfs_mlist_isopen>
 8024acc:	4603      	mov	r3, r0
 8024ace:	2b00      	cmp	r3, #0
 8024ad0:	d106      	bne.n	8024ae0 <lfs_file_read+0x48>
 8024ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8024b08 <lfs_file_read+0x70>)
 8024ad4:	4a0d      	ldr	r2, [pc, #52]	@ (8024b0c <lfs_file_read+0x74>)
 8024ad6:	f241 71f3 	movw	r1, #6131	@ 0x17f3
 8024ada:	480d      	ldr	r0, [pc, #52]	@ (8024b10 <lfs_file_read+0x78>)
 8024adc:	f00e fc34 	bl	8033348 <__assert_func>

    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);
 8024ae0:	683b      	ldr	r3, [r7, #0]
 8024ae2:	687a      	ldr	r2, [r7, #4]
 8024ae4:	68b9      	ldr	r1, [r7, #8]
 8024ae6:	68f8      	ldr	r0, [r7, #12]
 8024ae8:	f7fd fdae 	bl	8022648 <lfs_file_read_>
 8024aec:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
 8024aee:	68fb      	ldr	r3, [r7, #12]
 8024af0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024af2:	699b      	ldr	r3, [r3, #24]
 8024af4:	68fa      	ldr	r2, [r7, #12]
 8024af6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8024af8:	4610      	mov	r0, r2
 8024afa:	4798      	blx	r3
    return res;
 8024afc:	693b      	ldr	r3, [r7, #16]
}
 8024afe:	4618      	mov	r0, r3
 8024b00:	3718      	adds	r7, #24
 8024b02:	46bd      	mov	sp, r7
 8024b04:	bd80      	pop	{r7, pc}
 8024b06:	bf00      	nop
 8024b08:	080414f4 	.word	0x080414f4
 8024b0c:	08044480 	.word	0x08044480
 8024b10:	08040920 	.word	0x08040920

08024b14 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8024b14:	b580      	push	{r7, lr}
 8024b16:	b086      	sub	sp, #24
 8024b18:	af00      	add	r7, sp, #0
 8024b1a:	60f8      	str	r0, [r7, #12]
 8024b1c:	60b9      	str	r1, [r7, #8]
 8024b1e:	607a      	str	r2, [r7, #4]
 8024b20:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8024b22:	68fb      	ldr	r3, [r7, #12]
 8024b24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024b26:	695b      	ldr	r3, [r3, #20]
 8024b28:	68fa      	ldr	r2, [r7, #12]
 8024b2a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8024b2c:	4610      	mov	r0, r2
 8024b2e:	4798      	blx	r3
 8024b30:	6178      	str	r0, [r7, #20]
    if (err) {
 8024b32:	697b      	ldr	r3, [r7, #20]
 8024b34:	2b00      	cmp	r3, #0
 8024b36:	d001      	beq.n	8024b3c <lfs_file_write+0x28>
        return err;
 8024b38:	697b      	ldr	r3, [r7, #20]
 8024b3a:	e01e      	b.n	8024b7a <lfs_file_write+0x66>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8024b3c:	68fb      	ldr	r3, [r7, #12]
 8024b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024b40:	68b9      	ldr	r1, [r7, #8]
 8024b42:	4618      	mov	r0, r3
 8024b44:	f7f9 f9ae 	bl	801dea4 <lfs_mlist_isopen>
 8024b48:	4603      	mov	r3, r0
 8024b4a:	2b00      	cmp	r3, #0
 8024b4c:	d106      	bne.n	8024b5c <lfs_file_write+0x48>
 8024b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8024b84 <lfs_file_write+0x70>)
 8024b50:	4a0d      	ldr	r2, [pc, #52]	@ (8024b88 <lfs_file_write+0x74>)
 8024b52:	f641 0105 	movw	r1, #6149	@ 0x1805
 8024b56:	480d      	ldr	r0, [pc, #52]	@ (8024b8c <lfs_file_write+0x78>)
 8024b58:	f00e fbf6 	bl	8033348 <__assert_func>

    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);
 8024b5c:	683b      	ldr	r3, [r7, #0]
 8024b5e:	687a      	ldr	r2, [r7, #4]
 8024b60:	68b9      	ldr	r1, [r7, #8]
 8024b62:	68f8      	ldr	r0, [r7, #12]
 8024b64:	f7fd feb6 	bl	80228d4 <lfs_file_write_>
 8024b68:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
 8024b6a:	68fb      	ldr	r3, [r7, #12]
 8024b6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024b6e:	699b      	ldr	r3, [r3, #24]
 8024b70:	68fa      	ldr	r2, [r7, #12]
 8024b72:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8024b74:	4610      	mov	r0, r2
 8024b76:	4798      	blx	r3
    return res;
 8024b78:	693b      	ldr	r3, [r7, #16]
}
 8024b7a:	4618      	mov	r0, r3
 8024b7c:	3718      	adds	r7, #24
 8024b7e:	46bd      	mov	sp, r7
 8024b80:	bd80      	pop	{r7, pc}
 8024b82:	bf00      	nop
 8024b84:	080414f4 	.word	0x080414f4
 8024b88:	08044490 	.word	0x08044490
 8024b8c:	08040920 	.word	0x08040920

08024b90 <lfs_file_seek>:
#endif

lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 8024b90:	b580      	push	{r7, lr}
 8024b92:	b086      	sub	sp, #24
 8024b94:	af00      	add	r7, sp, #0
 8024b96:	60f8      	str	r0, [r7, #12]
 8024b98:	60b9      	str	r1, [r7, #8]
 8024b9a:	607a      	str	r2, [r7, #4]
 8024b9c:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8024b9e:	68fb      	ldr	r3, [r7, #12]
 8024ba0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024ba2:	695b      	ldr	r3, [r3, #20]
 8024ba4:	68fa      	ldr	r2, [r7, #12]
 8024ba6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8024ba8:	4610      	mov	r0, r2
 8024baa:	4798      	blx	r3
 8024bac:	6178      	str	r0, [r7, #20]
    if (err) {
 8024bae:	697b      	ldr	r3, [r7, #20]
 8024bb0:	2b00      	cmp	r3, #0
 8024bb2:	d001      	beq.n	8024bb8 <lfs_file_seek+0x28>
        return err;
 8024bb4:	697b      	ldr	r3, [r7, #20]
 8024bb6:	e01e      	b.n	8024bf6 <lfs_file_seek+0x66>
    }
    LFS_TRACE("lfs_file_seek(%p, %p, %"PRId32", %d)",
            (void*)lfs, (void*)file, off, whence);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8024bb8:	68fb      	ldr	r3, [r7, #12]
 8024bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024bbc:	68b9      	ldr	r1, [r7, #8]
 8024bbe:	4618      	mov	r0, r3
 8024bc0:	f7f9 f970 	bl	801dea4 <lfs_mlist_isopen>
 8024bc4:	4603      	mov	r3, r0
 8024bc6:	2b00      	cmp	r3, #0
 8024bc8:	d106      	bne.n	8024bd8 <lfs_file_seek+0x48>
 8024bca:	4b0d      	ldr	r3, [pc, #52]	@ (8024c00 <lfs_file_seek+0x70>)
 8024bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8024c04 <lfs_file_seek+0x74>)
 8024bce:	f641 0117 	movw	r1, #6167	@ 0x1817
 8024bd2:	480d      	ldr	r0, [pc, #52]	@ (8024c08 <lfs_file_seek+0x78>)
 8024bd4:	f00e fbb8 	bl	8033348 <__assert_func>

    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);
 8024bd8:	683b      	ldr	r3, [r7, #0]
 8024bda:	687a      	ldr	r2, [r7, #4]
 8024bdc:	68b9      	ldr	r1, [r7, #8]
 8024bde:	68f8      	ldr	r0, [r7, #12]
 8024be0:	f7fd fefc 	bl	80229dc <lfs_file_seek_>
 8024be4:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_seek -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
 8024be6:	68fb      	ldr	r3, [r7, #12]
 8024be8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024bea:	699b      	ldr	r3, [r3, #24]
 8024bec:	68fa      	ldr	r2, [r7, #12]
 8024bee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8024bf0:	4610      	mov	r0, r2
 8024bf2:	4798      	blx	r3
    return res;
 8024bf4:	693b      	ldr	r3, [r7, #16]
}
 8024bf6:	4618      	mov	r0, r3
 8024bf8:	3718      	adds	r7, #24
 8024bfa:	46bd      	mov	sp, r7
 8024bfc:	bd80      	pop	{r7, pc}
 8024bfe:	bf00      	nop
 8024c00:	080414f4 	.word	0x080414f4
 8024c04:	080444a0 	.word	0x080444a0
 8024c08:	08040920 	.word	0x08040920

08024c0c <lfs_file_tell>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}
#endif

lfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {
 8024c0c:	b580      	push	{r7, lr}
 8024c0e:	b084      	sub	sp, #16
 8024c10:	af00      	add	r7, sp, #0
 8024c12:	6078      	str	r0, [r7, #4]
 8024c14:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8024c16:	687b      	ldr	r3, [r7, #4]
 8024c18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024c1a:	695b      	ldr	r3, [r3, #20]
 8024c1c:	687a      	ldr	r2, [r7, #4]
 8024c1e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8024c20:	4610      	mov	r0, r2
 8024c22:	4798      	blx	r3
 8024c24:	60f8      	str	r0, [r7, #12]
    if (err) {
 8024c26:	68fb      	ldr	r3, [r7, #12]
 8024c28:	2b00      	cmp	r3, #0
 8024c2a:	d001      	beq.n	8024c30 <lfs_file_tell+0x24>
        return err;
 8024c2c:	68fb      	ldr	r3, [r7, #12]
 8024c2e:	e01c      	b.n	8024c6a <lfs_file_tell+0x5e>
    }
    LFS_TRACE("lfs_file_tell(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8024c30:	687b      	ldr	r3, [r7, #4]
 8024c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024c34:	6839      	ldr	r1, [r7, #0]
 8024c36:	4618      	mov	r0, r3
 8024c38:	f7f9 f934 	bl	801dea4 <lfs_mlist_isopen>
 8024c3c:	4603      	mov	r3, r0
 8024c3e:	2b00      	cmp	r3, #0
 8024c40:	d106      	bne.n	8024c50 <lfs_file_tell+0x44>
 8024c42:	4b0c      	ldr	r3, [pc, #48]	@ (8024c74 <lfs_file_tell+0x68>)
 8024c44:	4a0c      	ldr	r2, [pc, #48]	@ (8024c78 <lfs_file_tell+0x6c>)
 8024c46:	f641 0138 	movw	r1, #6200	@ 0x1838
 8024c4a:	480c      	ldr	r0, [pc, #48]	@ (8024c7c <lfs_file_tell+0x70>)
 8024c4c:	f00e fb7c 	bl	8033348 <__assert_func>

    lfs_soff_t res = lfs_file_tell_(lfs, file);
 8024c50:	6839      	ldr	r1, [r7, #0]
 8024c52:	6878      	ldr	r0, [r7, #4]
 8024c54:	f7fd ff4b 	bl	8022aee <lfs_file_tell_>
 8024c58:	60b8      	str	r0, [r7, #8]

    LFS_TRACE("lfs_file_tell -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
 8024c5a:	687b      	ldr	r3, [r7, #4]
 8024c5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024c5e:	699b      	ldr	r3, [r3, #24]
 8024c60:	687a      	ldr	r2, [r7, #4]
 8024c62:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8024c64:	4610      	mov	r0, r2
 8024c66:	4798      	blx	r3
    return res;
 8024c68:	68bb      	ldr	r3, [r7, #8]
}
 8024c6a:	4618      	mov	r0, r3
 8024c6c:	3710      	adds	r7, #16
 8024c6e:	46bd      	mov	sp, r7
 8024c70:	bd80      	pop	{r7, pc}
 8024c72:	bf00      	nop
 8024c74:	080414f4 	.word	0x080414f4
 8024c78:	080444b0 	.word	0x080444b0
 8024c7c:	08040920 	.word	0x08040920

08024c80 <lfs_mkdir>:
    LFS_UNLOCK(lfs->cfg);
    return res;
}

#ifndef LFS_READONLY
int lfs_mkdir(lfs_t *lfs, const char *path) {
 8024c80:	b580      	push	{r7, lr}
 8024c82:	b084      	sub	sp, #16
 8024c84:	af00      	add	r7, sp, #0
 8024c86:	6078      	str	r0, [r7, #4]
 8024c88:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8024c8a:	687b      	ldr	r3, [r7, #4]
 8024c8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024c8e:	695b      	ldr	r3, [r3, #20]
 8024c90:	687a      	ldr	r2, [r7, #4]
 8024c92:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8024c94:	4610      	mov	r0, r2
 8024c96:	4798      	blx	r3
 8024c98:	60f8      	str	r0, [r7, #12]
    if (err) {
 8024c9a:	68fb      	ldr	r3, [r7, #12]
 8024c9c:	2b00      	cmp	r3, #0
 8024c9e:	d001      	beq.n	8024ca4 <lfs_mkdir+0x24>
        return err;
 8024ca0:	68fb      	ldr	r3, [r7, #12]
 8024ca2:	e00c      	b.n	8024cbe <lfs_mkdir+0x3e>
    }
    LFS_TRACE("lfs_mkdir(%p, \"%s\")", (void*)lfs, path);

    err = lfs_mkdir_(lfs, path);
 8024ca4:	6839      	ldr	r1, [r7, #0]
 8024ca6:	6878      	ldr	r0, [r7, #4]
 8024ca8:	f7fc fb12 	bl	80212d0 <lfs_mkdir_>
 8024cac:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mkdir -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 8024cae:	687b      	ldr	r3, [r7, #4]
 8024cb0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024cb2:	699b      	ldr	r3, [r3, #24]
 8024cb4:	687a      	ldr	r2, [r7, #4]
 8024cb6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8024cb8:	4610      	mov	r0, r2
 8024cba:	4798      	blx	r3
    return err;
 8024cbc:	68fb      	ldr	r3, [r7, #12]
}
 8024cbe:	4618      	mov	r0, r3
 8024cc0:	3710      	adds	r7, #16
 8024cc2:	46bd      	mov	sp, r7
 8024cc4:	bd80      	pop	{r7, pc}
	...

08024cc8 <lfs_dir_open>:
#endif

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 8024cc8:	b580      	push	{r7, lr}
 8024cca:	b086      	sub	sp, #24
 8024ccc:	af00      	add	r7, sp, #0
 8024cce:	60f8      	str	r0, [r7, #12]
 8024cd0:	60b9      	str	r1, [r7, #8]
 8024cd2:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 8024cd4:	68fb      	ldr	r3, [r7, #12]
 8024cd6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024cd8:	695b      	ldr	r3, [r3, #20]
 8024cda:	68fa      	ldr	r2, [r7, #12]
 8024cdc:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8024cde:	4610      	mov	r0, r2
 8024ce0:	4798      	blx	r3
 8024ce2:	6178      	str	r0, [r7, #20]
    if (err) {
 8024ce4:	697b      	ldr	r3, [r7, #20]
 8024ce6:	2b00      	cmp	r3, #0
 8024ce8:	d001      	beq.n	8024cee <lfs_dir_open+0x26>
        return err;
 8024cea:	697b      	ldr	r3, [r7, #20]
 8024cec:	e020      	b.n	8024d30 <lfs_dir_open+0x68>
    }
    LFS_TRACE("lfs_dir_open(%p, %p, \"%s\")", (void*)lfs, (void*)dir, path);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 8024cee:	68fb      	ldr	r3, [r7, #12]
 8024cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024cf2:	68b9      	ldr	r1, [r7, #8]
 8024cf4:	4618      	mov	r0, r3
 8024cf6:	f7f9 f8d5 	bl	801dea4 <lfs_mlist_isopen>
 8024cfa:	4603      	mov	r3, r0
 8024cfc:	f083 0301 	eor.w	r3, r3, #1
 8024d00:	b2db      	uxtb	r3, r3
 8024d02:	2b00      	cmp	r3, #0
 8024d04:	d106      	bne.n	8024d14 <lfs_dir_open+0x4c>
 8024d06:	4b0c      	ldr	r3, [pc, #48]	@ (8024d38 <lfs_dir_open+0x70>)
 8024d08:	4a0c      	ldr	r2, [pc, #48]	@ (8024d3c <lfs_dir_open+0x74>)
 8024d0a:	f641 0174 	movw	r1, #6260	@ 0x1874
 8024d0e:	480c      	ldr	r0, [pc, #48]	@ (8024d40 <lfs_dir_open+0x78>)
 8024d10:	f00e fb1a 	bl	8033348 <__assert_func>

    err = lfs_dir_open_(lfs, dir, path);
 8024d14:	687a      	ldr	r2, [r7, #4]
 8024d16:	68b9      	ldr	r1, [r7, #8]
 8024d18:	68f8      	ldr	r0, [r7, #12]
 8024d1a:	f7fc fc19 	bl	8021550 <lfs_dir_open_>
 8024d1e:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 8024d20:	68fb      	ldr	r3, [r7, #12]
 8024d22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024d24:	699b      	ldr	r3, [r3, #24]
 8024d26:	68fa      	ldr	r2, [r7, #12]
 8024d28:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8024d2a:	4610      	mov	r0, r2
 8024d2c:	4798      	blx	r3
    return err;
 8024d2e:	697b      	ldr	r3, [r7, #20]
}
 8024d30:	4618      	mov	r0, r3
 8024d32:	3718      	adds	r7, #24
 8024d34:	46bd      	mov	sp, r7
 8024d36:	bd80      	pop	{r7, pc}
 8024d38:	0804152c 	.word	0x0804152c
 8024d3c:	080444c0 	.word	0x080444c0
 8024d40:	08040920 	.word	0x08040920

08024d44 <lfs_dir_close>:

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
 8024d44:	b580      	push	{r7, lr}
 8024d46:	b084      	sub	sp, #16
 8024d48:	af00      	add	r7, sp, #0
 8024d4a:	6078      	str	r0, [r7, #4]
 8024d4c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8024d4e:	687b      	ldr	r3, [r7, #4]
 8024d50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024d52:	695b      	ldr	r3, [r3, #20]
 8024d54:	687a      	ldr	r2, [r7, #4]
 8024d56:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8024d58:	4610      	mov	r0, r2
 8024d5a:	4798      	blx	r3
 8024d5c:	60f8      	str	r0, [r7, #12]
    if (err) {
 8024d5e:	68fb      	ldr	r3, [r7, #12]
 8024d60:	2b00      	cmp	r3, #0
 8024d62:	d001      	beq.n	8024d68 <lfs_dir_close+0x24>
        return err;
 8024d64:	68fb      	ldr	r3, [r7, #12]
 8024d66:	e00c      	b.n	8024d82 <lfs_dir_close+0x3e>
    }
    LFS_TRACE("lfs_dir_close(%p, %p)", (void*)lfs, (void*)dir);

    err = lfs_dir_close_(lfs, dir);
 8024d68:	6839      	ldr	r1, [r7, #0]
 8024d6a:	6878      	ldr	r0, [r7, #4]
 8024d6c:	f7fc fc6a 	bl	8021644 <lfs_dir_close_>
 8024d70:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_dir_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 8024d72:	687b      	ldr	r3, [r7, #4]
 8024d74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024d76:	699b      	ldr	r3, [r3, #24]
 8024d78:	687a      	ldr	r2, [r7, #4]
 8024d7a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8024d7c:	4610      	mov	r0, r2
 8024d7e:	4798      	blx	r3
    return err;
 8024d80:	68fb      	ldr	r3, [r7, #12]
}
 8024d82:	4618      	mov	r0, r3
 8024d84:	3710      	adds	r7, #16
 8024d86:	46bd      	mov	sp, r7
 8024d88:	bd80      	pop	{r7, pc}

08024d8a <lfs_dir_read>:

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 8024d8a:	b580      	push	{r7, lr}
 8024d8c:	b086      	sub	sp, #24
 8024d8e:	af00      	add	r7, sp, #0
 8024d90:	60f8      	str	r0, [r7, #12]
 8024d92:	60b9      	str	r1, [r7, #8]
 8024d94:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 8024d96:	68fb      	ldr	r3, [r7, #12]
 8024d98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024d9a:	695b      	ldr	r3, [r3, #20]
 8024d9c:	68fa      	ldr	r2, [r7, #12]
 8024d9e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8024da0:	4610      	mov	r0, r2
 8024da2:	4798      	blx	r3
 8024da4:	6178      	str	r0, [r7, #20]
    if (err) {
 8024da6:	697b      	ldr	r3, [r7, #20]
 8024da8:	2b00      	cmp	r3, #0
 8024daa:	d001      	beq.n	8024db0 <lfs_dir_read+0x26>
        return err;
 8024dac:	697b      	ldr	r3, [r7, #20]
 8024dae:	e00d      	b.n	8024dcc <lfs_dir_read+0x42>
    }
    LFS_TRACE("lfs_dir_read(%p, %p, %p)",
            (void*)lfs, (void*)dir, (void*)info);

    err = lfs_dir_read_(lfs, dir, info);
 8024db0:	687a      	ldr	r2, [r7, #4]
 8024db2:	68b9      	ldr	r1, [r7, #8]
 8024db4:	68f8      	ldr	r0, [r7, #12]
 8024db6:	f7fc fc53 	bl	8021660 <lfs_dir_read_>
 8024dba:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_read -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 8024dbc:	68fb      	ldr	r3, [r7, #12]
 8024dbe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024dc0:	699b      	ldr	r3, [r3, #24]
 8024dc2:	68fa      	ldr	r2, [r7, #12]
 8024dc4:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8024dc6:	4610      	mov	r0, r2
 8024dc8:	4798      	blx	r3
    return err;
 8024dca:	697b      	ldr	r3, [r7, #20]
}
 8024dcc:	4618      	mov	r0, r3
 8024dce:	3718      	adds	r7, #24
 8024dd0:	46bd      	mov	sp, r7
 8024dd2:	bd80      	pop	{r7, pc}

08024dd4 <lfs_crc>:


// If user provides their own CRC impl we don't need this
#ifndef LFS_CRC
// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 8024dd4:	b480      	push	{r7}
 8024dd6:	b087      	sub	sp, #28
 8024dd8:	af00      	add	r7, sp, #0
 8024dda:	60f8      	str	r0, [r7, #12]
 8024ddc:	60b9      	str	r1, [r7, #8]
 8024dde:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 8024de0:	68bb      	ldr	r3, [r7, #8]
 8024de2:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 8024de4:	2300      	movs	r3, #0
 8024de6:	617b      	str	r3, [r7, #20]
 8024de8:	e024      	b.n	8024e34 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 8024dea:	68fb      	ldr	r3, [r7, #12]
 8024dec:	091a      	lsrs	r2, r3, #4
 8024dee:	6939      	ldr	r1, [r7, #16]
 8024df0:	697b      	ldr	r3, [r7, #20]
 8024df2:	440b      	add	r3, r1
 8024df4:	781b      	ldrb	r3, [r3, #0]
 8024df6:	4619      	mov	r1, r3
 8024df8:	68fb      	ldr	r3, [r7, #12]
 8024dfa:	404b      	eors	r3, r1
 8024dfc:	f003 030f 	and.w	r3, r3, #15
 8024e00:	4912      	ldr	r1, [pc, #72]	@ (8024e4c <lfs_crc+0x78>)
 8024e02:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8024e06:	4053      	eors	r3, r2
 8024e08:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 8024e0a:	68fb      	ldr	r3, [r7, #12]
 8024e0c:	091a      	lsrs	r2, r3, #4
 8024e0e:	6939      	ldr	r1, [r7, #16]
 8024e10:	697b      	ldr	r3, [r7, #20]
 8024e12:	440b      	add	r3, r1
 8024e14:	781b      	ldrb	r3, [r3, #0]
 8024e16:	091b      	lsrs	r3, r3, #4
 8024e18:	b2db      	uxtb	r3, r3
 8024e1a:	4619      	mov	r1, r3
 8024e1c:	68fb      	ldr	r3, [r7, #12]
 8024e1e:	404b      	eors	r3, r1
 8024e20:	f003 030f 	and.w	r3, r3, #15
 8024e24:	4909      	ldr	r1, [pc, #36]	@ (8024e4c <lfs_crc+0x78>)
 8024e26:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8024e2a:	4053      	eors	r3, r2
 8024e2c:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 8024e2e:	697b      	ldr	r3, [r7, #20]
 8024e30:	3301      	adds	r3, #1
 8024e32:	617b      	str	r3, [r7, #20]
 8024e34:	697a      	ldr	r2, [r7, #20]
 8024e36:	687b      	ldr	r3, [r7, #4]
 8024e38:	429a      	cmp	r2, r3
 8024e3a:	d3d6      	bcc.n	8024dea <lfs_crc+0x16>
    }

    return crc;
 8024e3c:	68fb      	ldr	r3, [r7, #12]
}
 8024e3e:	4618      	mov	r0, r3
 8024e40:	371c      	adds	r7, #28
 8024e42:	46bd      	mov	sp, r7
 8024e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e48:	4770      	bx	lr
 8024e4a:	bf00      	nop
 8024e4c:	080444d0 	.word	0x080444d0

08024e50 <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 8024e50:	b580      	push	{r7, lr}
 8024e52:	b084      	sub	sp, #16
 8024e54:	af00      	add	r7, sp, #0
 8024e56:	6078      	str	r0, [r7, #4]
 8024e58:	6039      	str	r1, [r7, #0]
  void *p = pvPortMalloc(cnt * size);
 8024e5a:	687b      	ldr	r3, [r7, #4]
 8024e5c:	683a      	ldr	r2, [r7, #0]
 8024e5e:	fb02 f303 	mul.w	r3, r2, r3
 8024e62:	4618      	mov	r0, r3
 8024e64:	f7f7 fbb2 	bl	801c5cc <pvPortMalloc>
 8024e68:	60f8      	str	r0, [r7, #12]
  if (p != NULL) memset(p, 0, size * cnt);
 8024e6a:	68fb      	ldr	r3, [r7, #12]
 8024e6c:	2b00      	cmp	r3, #0
 8024e6e:	d008      	beq.n	8024e82 <mg_calloc+0x32>
 8024e70:	683b      	ldr	r3, [r7, #0]
 8024e72:	687a      	ldr	r2, [r7, #4]
 8024e74:	fb02 f303 	mul.w	r3, r2, r3
 8024e78:	461a      	mov	r2, r3
 8024e7a:	2100      	movs	r1, #0
 8024e7c:	68f8      	ldr	r0, [r7, #12]
 8024e7e:	f010 ffb7 	bl	8035df0 <memset>
  return p;
 8024e82:	68fb      	ldr	r3, [r7, #12]
}
 8024e84:	4618      	mov	r0, r3
 8024e86:	3710      	adds	r7, #16
 8024e88:	46bd      	mov	sp, r7
 8024e8a:	bd80      	pop	{r7, pc}

08024e8c <mg_dns_free>:
};

static void mg_sendnsreq(struct mg_connection *, struct mg_str *, int,
                         struct mg_dns *, bool);

static void mg_dns_free(struct dns_data **head, struct dns_data *d) {
 8024e8c:	b580      	push	{r7, lr}
 8024e8e:	b084      	sub	sp, #16
 8024e90:	af00      	add	r7, sp, #0
 8024e92:	6078      	str	r0, [r7, #4]
 8024e94:	6039      	str	r1, [r7, #0]
  LIST_DELETE(struct dns_data, head, d);
 8024e96:	687b      	ldr	r3, [r7, #4]
 8024e98:	60fb      	str	r3, [r7, #12]
 8024e9a:	e002      	b.n	8024ea2 <mg_dns_free+0x16>
 8024e9c:	68fb      	ldr	r3, [r7, #12]
 8024e9e:	681b      	ldr	r3, [r3, #0]
 8024ea0:	60fb      	str	r3, [r7, #12]
 8024ea2:	68fb      	ldr	r3, [r7, #12]
 8024ea4:	681b      	ldr	r3, [r3, #0]
 8024ea6:	683a      	ldr	r2, [r7, #0]
 8024ea8:	429a      	cmp	r2, r3
 8024eaa:	d1f7      	bne.n	8024e9c <mg_dns_free+0x10>
 8024eac:	683b      	ldr	r3, [r7, #0]
 8024eae:	681a      	ldr	r2, [r3, #0]
 8024eb0:	68fb      	ldr	r3, [r7, #12]
 8024eb2:	601a      	str	r2, [r3, #0]
  free(d);
 8024eb4:	6838      	ldr	r0, [r7, #0]
 8024eb6:	f7f7 fc57 	bl	801c768 <vPortFree>
}
 8024eba:	bf00      	nop
 8024ebc:	3710      	adds	r7, #16
 8024ebe:	46bd      	mov	sp, r7
 8024ec0:	bd80      	pop	{r7, pc}

08024ec2 <mg_resolve_cancel>:

void mg_resolve_cancel(struct mg_connection *c) {
 8024ec2:	b580      	push	{r7, lr}
 8024ec4:	b086      	sub	sp, #24
 8024ec6:	af00      	add	r7, sp, #0
 8024ec8:	6078      	str	r0, [r7, #4]
  struct dns_data *tmp, *d;
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 8024eca:	687b      	ldr	r3, [r7, #4]
 8024ecc:	685b      	ldr	r3, [r3, #4]
 8024ece:	3330      	adds	r3, #48	@ 0x30
 8024ed0:	613b      	str	r3, [r7, #16]
  for (d = *head; d != NULL; d = tmp) {
 8024ed2:	693b      	ldr	r3, [r7, #16]
 8024ed4:	681b      	ldr	r3, [r3, #0]
 8024ed6:	617b      	str	r3, [r7, #20]
 8024ed8:	e00d      	b.n	8024ef6 <mg_resolve_cancel+0x34>
    tmp = d->next;
 8024eda:	697b      	ldr	r3, [r7, #20]
 8024edc:	681b      	ldr	r3, [r3, #0]
 8024ede:	60fb      	str	r3, [r7, #12]
    if (d->c == c) mg_dns_free(head, d);
 8024ee0:	697b      	ldr	r3, [r7, #20]
 8024ee2:	685b      	ldr	r3, [r3, #4]
 8024ee4:	687a      	ldr	r2, [r7, #4]
 8024ee6:	429a      	cmp	r2, r3
 8024ee8:	d103      	bne.n	8024ef2 <mg_resolve_cancel+0x30>
 8024eea:	6979      	ldr	r1, [r7, #20]
 8024eec:	6938      	ldr	r0, [r7, #16]
 8024eee:	f7ff ffcd 	bl	8024e8c <mg_dns_free>
  for (d = *head; d != NULL; d = tmp) {
 8024ef2:	68fb      	ldr	r3, [r7, #12]
 8024ef4:	617b      	str	r3, [r7, #20]
 8024ef6:	697b      	ldr	r3, [r7, #20]
 8024ef8:	2b00      	cmp	r3, #0
 8024efa:	d1ee      	bne.n	8024eda <mg_resolve_cancel+0x18>
  }
}
 8024efc:	bf00      	nop
 8024efe:	bf00      	nop
 8024f00:	3718      	adds	r7, #24
 8024f02:	46bd      	mov	sp, r7
 8024f04:	bd80      	pop	{r7, pc}

08024f06 <mg_dns_parse_name_depth>:

static size_t mg_dns_parse_name_depth(const uint8_t *s, size_t len, size_t ofs,
                                      char *to, size_t tolen, size_t j,
                                      int depth) {
 8024f06:	b580      	push	{r7, lr}
 8024f08:	b08c      	sub	sp, #48	@ 0x30
 8024f0a:	af04      	add	r7, sp, #16
 8024f0c:	60f8      	str	r0, [r7, #12]
 8024f0e:	60b9      	str	r1, [r7, #8]
 8024f10:	607a      	str	r2, [r7, #4]
 8024f12:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 8024f14:	2300      	movs	r3, #0
 8024f16:	61fb      	str	r3, [r7, #28]
  if (tolen > 0 && depth == 0) to[0] = '\0';
 8024f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024f1a:	2b00      	cmp	r3, #0
 8024f1c:	d005      	beq.n	8024f2a <mg_dns_parse_name_depth+0x24>
 8024f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024f20:	2b00      	cmp	r3, #0
 8024f22:	d102      	bne.n	8024f2a <mg_dns_parse_name_depth+0x24>
 8024f24:	683b      	ldr	r3, [r7, #0]
 8024f26:	2200      	movs	r2, #0
 8024f28:	701a      	strb	r2, [r3, #0]
  if (depth > 5) return 0;
 8024f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024f2c:	2b05      	cmp	r3, #5
 8024f2e:	f340 8084 	ble.w	802503a <mg_dns_parse_name_depth+0x134>
 8024f32:	2300      	movs	r3, #0
 8024f34:	e093      	b.n	802505e <mg_dns_parse_name_depth+0x158>
  // MG_INFO(("ofs %lx %x %x", (unsigned long) ofs, s[ofs], s[ofs + 1]));
  while (ofs + i + 1 < len) {
    size_t n = s[ofs + i];
 8024f36:	687a      	ldr	r2, [r7, #4]
 8024f38:	69fb      	ldr	r3, [r7, #28]
 8024f3a:	4413      	add	r3, r2
 8024f3c:	68fa      	ldr	r2, [r7, #12]
 8024f3e:	4413      	add	r3, r2
 8024f40:	781b      	ldrb	r3, [r3, #0]
 8024f42:	61bb      	str	r3, [r7, #24]
    if (n == 0) {
 8024f44:	69bb      	ldr	r3, [r7, #24]
 8024f46:	2b00      	cmp	r3, #0
 8024f48:	d103      	bne.n	8024f52 <mg_dns_parse_name_depth+0x4c>
      i++;
 8024f4a:	69fb      	ldr	r3, [r7, #28]
 8024f4c:	3301      	adds	r3, #1
 8024f4e:	61fb      	str	r3, [r7, #28]
      break;
 8024f50:	e07b      	b.n	802504a <mg_dns_parse_name_depth+0x144>
    }
    if (n & 0xc0) {
 8024f52:	69bb      	ldr	r3, [r7, #24]
 8024f54:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8024f58:	2b00      	cmp	r3, #0
 8024f5a:	d02f      	beq.n	8024fbc <mg_dns_parse_name_depth+0xb6>
      size_t ptr = (((n & 0x3f) << 8) | s[ofs + i + 1]);  // 12 is hdr len
 8024f5c:	69bb      	ldr	r3, [r7, #24]
 8024f5e:	021b      	lsls	r3, r3, #8
 8024f60:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8024f64:	6879      	ldr	r1, [r7, #4]
 8024f66:	69fa      	ldr	r2, [r7, #28]
 8024f68:	440a      	add	r2, r1
 8024f6a:	3201      	adds	r2, #1
 8024f6c:	68f9      	ldr	r1, [r7, #12]
 8024f6e:	440a      	add	r2, r1
 8024f70:	7812      	ldrb	r2, [r2, #0]
 8024f72:	4313      	orrs	r3, r2
 8024f74:	617b      	str	r3, [r7, #20]
      // MG_INFO(("PTR %lx", (unsigned long) ptr));
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8024f76:	697b      	ldr	r3, [r7, #20]
 8024f78:	3301      	adds	r3, #1
 8024f7a:	68ba      	ldr	r2, [r7, #8]
 8024f7c:	429a      	cmp	r2, r3
 8024f7e:	d919      	bls.n	8024fb4 <mg_dns_parse_name_depth+0xae>
 8024f80:	68fa      	ldr	r2, [r7, #12]
 8024f82:	697b      	ldr	r3, [r7, #20]
 8024f84:	4413      	add	r3, r2
 8024f86:	781b      	ldrb	r3, [r3, #0]
 8024f88:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8024f8c:	2b00      	cmp	r3, #0
 8024f8e:	d111      	bne.n	8024fb4 <mg_dns_parse_name_depth+0xae>
          mg_dns_parse_name_depth(s, len, ptr, to, tolen, j, depth + 1) == 0)
 8024f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024f92:	3301      	adds	r3, #1
 8024f94:	9302      	str	r3, [sp, #8]
 8024f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024f98:	9301      	str	r3, [sp, #4]
 8024f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024f9c:	9300      	str	r3, [sp, #0]
 8024f9e:	683b      	ldr	r3, [r7, #0]
 8024fa0:	697a      	ldr	r2, [r7, #20]
 8024fa2:	68b9      	ldr	r1, [r7, #8]
 8024fa4:	68f8      	ldr	r0, [r7, #12]
 8024fa6:	f7ff ffae 	bl	8024f06 <mg_dns_parse_name_depth>
 8024faa:	4603      	mov	r3, r0
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8024fac:	2b00      	cmp	r3, #0
 8024fae:	d101      	bne.n	8024fb4 <mg_dns_parse_name_depth+0xae>
        return 0;
 8024fb0:	2300      	movs	r3, #0
 8024fb2:	e054      	b.n	802505e <mg_dns_parse_name_depth+0x158>
      i += 2;
 8024fb4:	69fb      	ldr	r3, [r7, #28]
 8024fb6:	3302      	adds	r3, #2
 8024fb8:	61fb      	str	r3, [r7, #28]
      break;
 8024fba:	e046      	b.n	802504a <mg_dns_parse_name_depth+0x144>
    }
    if (ofs + i + n + 1 >= len) return 0;
 8024fbc:	687a      	ldr	r2, [r7, #4]
 8024fbe:	69fb      	ldr	r3, [r7, #28]
 8024fc0:	441a      	add	r2, r3
 8024fc2:	69bb      	ldr	r3, [r7, #24]
 8024fc4:	4413      	add	r3, r2
 8024fc6:	3301      	adds	r3, #1
 8024fc8:	68ba      	ldr	r2, [r7, #8]
 8024fca:	429a      	cmp	r2, r3
 8024fcc:	d801      	bhi.n	8024fd2 <mg_dns_parse_name_depth+0xcc>
 8024fce:	2300      	movs	r3, #0
 8024fd0:	e045      	b.n	802505e <mg_dns_parse_name_depth+0x158>
    if (j > 0) {
 8024fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024fd4:	2b00      	cmp	r3, #0
 8024fd6:	d00b      	beq.n	8024ff0 <mg_dns_parse_name_depth+0xea>
      if (j < tolen) to[j] = '.';
 8024fd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8024fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024fdc:	429a      	cmp	r2, r3
 8024fde:	d204      	bcs.n	8024fea <mg_dns_parse_name_depth+0xe4>
 8024fe0:	683a      	ldr	r2, [r7, #0]
 8024fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024fe4:	4413      	add	r3, r2
 8024fe6:	222e      	movs	r2, #46	@ 0x2e
 8024fe8:	701a      	strb	r2, [r3, #0]
      j++;
 8024fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024fec:	3301      	adds	r3, #1
 8024fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 8024ff0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8024ff2:	69bb      	ldr	r3, [r7, #24]
 8024ff4:	4413      	add	r3, r2
 8024ff6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8024ff8:	429a      	cmp	r2, r3
 8024ffa:	d90c      	bls.n	8025016 <mg_dns_parse_name_depth+0x110>
 8024ffc:	683a      	ldr	r2, [r7, #0]
 8024ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8025000:	18d0      	adds	r0, r2, r3
 8025002:	687a      	ldr	r2, [r7, #4]
 8025004:	69fb      	ldr	r3, [r7, #28]
 8025006:	4413      	add	r3, r2
 8025008:	3301      	adds	r3, #1
 802500a:	68fa      	ldr	r2, [r7, #12]
 802500c:	4413      	add	r3, r2
 802500e:	69ba      	ldr	r2, [r7, #24]
 8025010:	4619      	mov	r1, r3
 8025012:	f012 f929 	bl	8037268 <memcpy>
    j += n;
 8025016:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8025018:	69bb      	ldr	r3, [r7, #24]
 802501a:	4413      	add	r3, r2
 802501c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    i += n + 1;
 802501e:	69ba      	ldr	r2, [r7, #24]
 8025020:	69fb      	ldr	r3, [r7, #28]
 8025022:	4413      	add	r3, r2
 8025024:	3301      	adds	r3, #1
 8025026:	61fb      	str	r3, [r7, #28]
    if (j < tolen) to[j] = '\0';  // Zero-terminate this chunk
 8025028:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802502a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802502c:	429a      	cmp	r2, r3
 802502e:	d204      	bcs.n	802503a <mg_dns_parse_name_depth+0x134>
 8025030:	683a      	ldr	r2, [r7, #0]
 8025032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8025034:	4413      	add	r3, r2
 8025036:	2200      	movs	r2, #0
 8025038:	701a      	strb	r2, [r3, #0]
  while (ofs + i + 1 < len) {
 802503a:	687a      	ldr	r2, [r7, #4]
 802503c:	69fb      	ldr	r3, [r7, #28]
 802503e:	4413      	add	r3, r2
 8025040:	3301      	adds	r3, #1
 8025042:	68ba      	ldr	r2, [r7, #8]
 8025044:	429a      	cmp	r2, r3
 8025046:	f63f af76 	bhi.w	8024f36 <mg_dns_parse_name_depth+0x30>
    // MG_INFO(("--> [%s]", to));
  }
  if (tolen > 0) to[tolen - 1] = '\0';  // Make sure make sure it is nul-term
 802504a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802504c:	2b00      	cmp	r3, #0
 802504e:	d005      	beq.n	802505c <mg_dns_parse_name_depth+0x156>
 8025050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025052:	3b01      	subs	r3, #1
 8025054:	683a      	ldr	r2, [r7, #0]
 8025056:	4413      	add	r3, r2
 8025058:	2200      	movs	r2, #0
 802505a:	701a      	strb	r2, [r3, #0]
  return i;
 802505c:	69fb      	ldr	r3, [r7, #28]
}
 802505e:	4618      	mov	r0, r3
 8025060:	3720      	adds	r7, #32
 8025062:	46bd      	mov	sp, r7
 8025064:	bd80      	pop	{r7, pc}

08025066 <mg_dns_parse_name>:

static size_t mg_dns_parse_name(const uint8_t *s, size_t n, size_t ofs,
                                char *dst, size_t dstlen) {
 8025066:	b580      	push	{r7, lr}
 8025068:	b088      	sub	sp, #32
 802506a:	af04      	add	r7, sp, #16
 802506c:	60f8      	str	r0, [r7, #12]
 802506e:	60b9      	str	r1, [r7, #8]
 8025070:	607a      	str	r2, [r7, #4]
 8025072:	603b      	str	r3, [r7, #0]
  return mg_dns_parse_name_depth(s, n, ofs, dst, dstlen, 0, 0);
 8025074:	2300      	movs	r3, #0
 8025076:	9302      	str	r3, [sp, #8]
 8025078:	2300      	movs	r3, #0
 802507a:	9301      	str	r3, [sp, #4]
 802507c:	69bb      	ldr	r3, [r7, #24]
 802507e:	9300      	str	r3, [sp, #0]
 8025080:	683b      	ldr	r3, [r7, #0]
 8025082:	687a      	ldr	r2, [r7, #4]
 8025084:	68b9      	ldr	r1, [r7, #8]
 8025086:	68f8      	ldr	r0, [r7, #12]
 8025088:	f7ff ff3d 	bl	8024f06 <mg_dns_parse_name_depth>
 802508c:	4603      	mov	r3, r0
}
 802508e:	4618      	mov	r0, r3
 8025090:	3710      	adds	r7, #16
 8025092:	46bd      	mov	sp, r7
 8025094:	bd80      	pop	{r7, pc}

08025096 <mg_dns_parse_rr>:

size_t mg_dns_parse_rr(const uint8_t *buf, size_t len, size_t ofs,
                       bool is_question, struct mg_dns_rr *rr) {
 8025096:	b580      	push	{r7, lr}
 8025098:	b088      	sub	sp, #32
 802509a:	af02      	add	r7, sp, #8
 802509c:	60f8      	str	r0, [r7, #12]
 802509e:	60b9      	str	r1, [r7, #8]
 80250a0:	607a      	str	r2, [r7, #4]
 80250a2:	70fb      	strb	r3, [r7, #3]
  const uint8_t *s = buf + ofs, *e = &buf[len];
 80250a4:	68fa      	ldr	r2, [r7, #12]
 80250a6:	687b      	ldr	r3, [r7, #4]
 80250a8:	4413      	add	r3, r2
 80250aa:	617b      	str	r3, [r7, #20]
 80250ac:	68fa      	ldr	r2, [r7, #12]
 80250ae:	68bb      	ldr	r3, [r7, #8]
 80250b0:	4413      	add	r3, r2
 80250b2:	613b      	str	r3, [r7, #16]

  memset(rr, 0, sizeof(*rr));
 80250b4:	2208      	movs	r2, #8
 80250b6:	2100      	movs	r1, #0
 80250b8:	6a38      	ldr	r0, [r7, #32]
 80250ba:	f010 fe99 	bl	8035df0 <memset>
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 80250be:	68bb      	ldr	r3, [r7, #8]
 80250c0:	2b0b      	cmp	r3, #11
 80250c2:	d801      	bhi.n	80250c8 <mg_dns_parse_rr+0x32>
 80250c4:	2300      	movs	r3, #0
 80250c6:	e074      	b.n	80251b2 <mg_dns_parse_rr+0x11c>
  if (len > 512) return 0;  //  Too large, we don't expect that
 80250c8:	68bb      	ldr	r3, [r7, #8]
 80250ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80250ce:	d901      	bls.n	80250d4 <mg_dns_parse_rr+0x3e>
 80250d0:	2300      	movs	r3, #0
 80250d2:	e06e      	b.n	80251b2 <mg_dns_parse_rr+0x11c>
  if (s >= e) return 0;     //  Overflow
 80250d4:	697a      	ldr	r2, [r7, #20]
 80250d6:	693b      	ldr	r3, [r7, #16]
 80250d8:	429a      	cmp	r2, r3
 80250da:	d301      	bcc.n	80250e0 <mg_dns_parse_rr+0x4a>
 80250dc:	2300      	movs	r3, #0
 80250de:	e068      	b.n	80251b2 <mg_dns_parse_rr+0x11c>

  if ((rr->nlen = (uint16_t) mg_dns_parse_name(buf, len, ofs, NULL, 0)) == 0)
 80250e0:	2300      	movs	r3, #0
 80250e2:	9300      	str	r3, [sp, #0]
 80250e4:	2300      	movs	r3, #0
 80250e6:	687a      	ldr	r2, [r7, #4]
 80250e8:	68b9      	ldr	r1, [r7, #8]
 80250ea:	68f8      	ldr	r0, [r7, #12]
 80250ec:	f7ff ffbb 	bl	8025066 <mg_dns_parse_name>
 80250f0:	4603      	mov	r3, r0
 80250f2:	b29a      	uxth	r2, r3
 80250f4:	6a3b      	ldr	r3, [r7, #32]
 80250f6:	801a      	strh	r2, [r3, #0]
 80250f8:	6a3b      	ldr	r3, [r7, #32]
 80250fa:	881b      	ldrh	r3, [r3, #0]
 80250fc:	2b00      	cmp	r3, #0
 80250fe:	d101      	bne.n	8025104 <mg_dns_parse_rr+0x6e>
    return 0;
 8025100:	2300      	movs	r3, #0
 8025102:	e056      	b.n	80251b2 <mg_dns_parse_rr+0x11c>
  s += rr->nlen + 4;
 8025104:	6a3b      	ldr	r3, [r7, #32]
 8025106:	881b      	ldrh	r3, [r3, #0]
 8025108:	3304      	adds	r3, #4
 802510a:	697a      	ldr	r2, [r7, #20]
 802510c:	4413      	add	r3, r2
 802510e:	617b      	str	r3, [r7, #20]
  if (s > e) return 0;
 8025110:	697a      	ldr	r2, [r7, #20]
 8025112:	693b      	ldr	r3, [r7, #16]
 8025114:	429a      	cmp	r2, r3
 8025116:	d901      	bls.n	802511c <mg_dns_parse_rr+0x86>
 8025118:	2300      	movs	r3, #0
 802511a:	e04a      	b.n	80251b2 <mg_dns_parse_rr+0x11c>
  rr->atype = (uint16_t) (((uint16_t) s[-4] << 8) | s[-3]);
 802511c:	697b      	ldr	r3, [r7, #20]
 802511e:	3b04      	subs	r3, #4
 8025120:	781b      	ldrb	r3, [r3, #0]
 8025122:	021b      	lsls	r3, r3, #8
 8025124:	b21a      	sxth	r2, r3
 8025126:	697b      	ldr	r3, [r7, #20]
 8025128:	3b03      	subs	r3, #3
 802512a:	781b      	ldrb	r3, [r3, #0]
 802512c:	b21b      	sxth	r3, r3
 802512e:	4313      	orrs	r3, r2
 8025130:	b21b      	sxth	r3, r3
 8025132:	b29a      	uxth	r2, r3
 8025134:	6a3b      	ldr	r3, [r7, #32]
 8025136:	805a      	strh	r2, [r3, #2]
  rr->aclass = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 8025138:	697b      	ldr	r3, [r7, #20]
 802513a:	3b02      	subs	r3, #2
 802513c:	781b      	ldrb	r3, [r3, #0]
 802513e:	021b      	lsls	r3, r3, #8
 8025140:	b21a      	sxth	r2, r3
 8025142:	697b      	ldr	r3, [r7, #20]
 8025144:	3b01      	subs	r3, #1
 8025146:	781b      	ldrb	r3, [r3, #0]
 8025148:	b21b      	sxth	r3, r3
 802514a:	4313      	orrs	r3, r2
 802514c:	b21b      	sxth	r3, r3
 802514e:	b29a      	uxth	r2, r3
 8025150:	6a3b      	ldr	r3, [r7, #32]
 8025152:	809a      	strh	r2, [r3, #4]
  if (is_question) return (size_t) (rr->nlen + 4);
 8025154:	78fb      	ldrb	r3, [r7, #3]
 8025156:	2b00      	cmp	r3, #0
 8025158:	d003      	beq.n	8025162 <mg_dns_parse_rr+0xcc>
 802515a:	6a3b      	ldr	r3, [r7, #32]
 802515c:	881b      	ldrh	r3, [r3, #0]
 802515e:	3304      	adds	r3, #4
 8025160:	e027      	b.n	80251b2 <mg_dns_parse_rr+0x11c>

  s += 6;
 8025162:	697b      	ldr	r3, [r7, #20]
 8025164:	3306      	adds	r3, #6
 8025166:	617b      	str	r3, [r7, #20]
  if (s > e) return 0;
 8025168:	697a      	ldr	r2, [r7, #20]
 802516a:	693b      	ldr	r3, [r7, #16]
 802516c:	429a      	cmp	r2, r3
 802516e:	d901      	bls.n	8025174 <mg_dns_parse_rr+0xde>
 8025170:	2300      	movs	r3, #0
 8025172:	e01e      	b.n	80251b2 <mg_dns_parse_rr+0x11c>
  rr->alen = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 8025174:	697b      	ldr	r3, [r7, #20]
 8025176:	3b02      	subs	r3, #2
 8025178:	781b      	ldrb	r3, [r3, #0]
 802517a:	021b      	lsls	r3, r3, #8
 802517c:	b21a      	sxth	r2, r3
 802517e:	697b      	ldr	r3, [r7, #20]
 8025180:	3b01      	subs	r3, #1
 8025182:	781b      	ldrb	r3, [r3, #0]
 8025184:	b21b      	sxth	r3, r3
 8025186:	4313      	orrs	r3, r2
 8025188:	b21b      	sxth	r3, r3
 802518a:	b29a      	uxth	r2, r3
 802518c:	6a3b      	ldr	r3, [r7, #32]
 802518e:	80da      	strh	r2, [r3, #6]
  if (s + rr->alen > e) return 0;
 8025190:	6a3b      	ldr	r3, [r7, #32]
 8025192:	88db      	ldrh	r3, [r3, #6]
 8025194:	461a      	mov	r2, r3
 8025196:	697b      	ldr	r3, [r7, #20]
 8025198:	4413      	add	r3, r2
 802519a:	693a      	ldr	r2, [r7, #16]
 802519c:	429a      	cmp	r2, r3
 802519e:	d201      	bcs.n	80251a4 <mg_dns_parse_rr+0x10e>
 80251a0:	2300      	movs	r3, #0
 80251a2:	e006      	b.n	80251b2 <mg_dns_parse_rr+0x11c>
  return (size_t) (rr->nlen + rr->alen + 10);
 80251a4:	6a3b      	ldr	r3, [r7, #32]
 80251a6:	881b      	ldrh	r3, [r3, #0]
 80251a8:	461a      	mov	r2, r3
 80251aa:	6a3b      	ldr	r3, [r7, #32]
 80251ac:	88db      	ldrh	r3, [r3, #6]
 80251ae:	4413      	add	r3, r2
 80251b0:	330a      	adds	r3, #10
}
 80251b2:	4618      	mov	r0, r3
 80251b4:	3718      	adds	r7, #24
 80251b6:	46bd      	mov	sp, r7
 80251b8:	bd80      	pop	{r7, pc}
	...

080251bc <mg_dns_parse>:

bool mg_dns_parse(const uint8_t *buf, size_t len, struct mg_dns_message *dm) {
 80251bc:	b580      	push	{r7, lr}
 80251be:	b08e      	sub	sp, #56	@ 0x38
 80251c0:	af02      	add	r7, sp, #8
 80251c2:	60f8      	str	r0, [r7, #12]
 80251c4:	60b9      	str	r1, [r7, #8]
 80251c6:	607a      	str	r2, [r7, #4]
  const struct mg_dns_header *h = (struct mg_dns_header *) buf;
 80251c8:	68fb      	ldr	r3, [r7, #12]
 80251ca:	623b      	str	r3, [r7, #32]
  struct mg_dns_rr rr;
  size_t i, n, num_answers, ofs = sizeof(*h);
 80251cc:	230c      	movs	r3, #12
 80251ce:	627b      	str	r3, [r7, #36]	@ 0x24
  memset(dm, 0, sizeof(*dm));
 80251d0:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80251d4:	2100      	movs	r1, #0
 80251d6:	6878      	ldr	r0, [r7, #4]
 80251d8:	f010 fe0a 	bl	8035df0 <memset>

  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 80251dc:	68bb      	ldr	r3, [r7, #8]
 80251de:	2b0b      	cmp	r3, #11
 80251e0:	d801      	bhi.n	80251e6 <mg_dns_parse+0x2a>
 80251e2:	2300      	movs	r3, #0
 80251e4:	e0aa      	b.n	802533c <mg_dns_parse+0x180>
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 80251e6:	6a3b      	ldr	r3, [r7, #32]
 80251e8:	889b      	ldrh	r3, [r3, #4]
 80251ea:	4618      	mov	r0, r3
 80251ec:	f00d fc9d 	bl	8032b2a <mg_ntohs>
 80251f0:	4603      	mov	r3, r0
 80251f2:	2b01      	cmp	r3, #1
 80251f4:	d901      	bls.n	80251fa <mg_dns_parse+0x3e>
 80251f6:	2300      	movs	r3, #0
 80251f8:	e0a0      	b.n	802533c <mg_dns_parse+0x180>
  num_answers = mg_ntohs(h->num_answers);
 80251fa:	6a3b      	ldr	r3, [r7, #32]
 80251fc:	88db      	ldrh	r3, [r3, #6]
 80251fe:	4618      	mov	r0, r3
 8025200:	f00d fc93 	bl	8032b2a <mg_ntohs>
 8025204:	4603      	mov	r3, r0
 8025206:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (num_answers > 10) {
 8025208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802520a:	2b0a      	cmp	r3, #10
 802520c:	d910      	bls.n	8025230 <mg_dns_parse+0x74>
    MG_DEBUG(("Got %u answers, ignoring beyond 10th one", num_answers));
 802520e:	4b4d      	ldr	r3, [pc, #308]	@ (8025344 <mg_dns_parse+0x188>)
 8025210:	681b      	ldr	r3, [r3, #0]
 8025212:	2b02      	cmp	r3, #2
 8025214:	dd0a      	ble.n	802522c <mg_dns_parse+0x70>
 8025216:	4b4c      	ldr	r3, [pc, #304]	@ (8025348 <mg_dns_parse+0x18c>)
 8025218:	f240 4293 	movw	r2, #1171	@ 0x493
 802521c:	494b      	ldr	r1, [pc, #300]	@ (802534c <mg_dns_parse+0x190>)
 802521e:	2003      	movs	r0, #3
 8025220:	f005 ffdc 	bl	802b1dc <mg_log_prefix>
 8025224:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8025226:	484a      	ldr	r0, [pc, #296]	@ (8025350 <mg_dns_parse+0x194>)
 8025228:	f006 f828 	bl	802b27c <mg_log>
    num_answers = 10;  // Sanity cap
 802522c:	230a      	movs	r3, #10
 802522e:	62bb      	str	r3, [r7, #40]	@ 0x28
  }
  dm->txnid = mg_ntohs(h->txnid);
 8025230:	6a3b      	ldr	r3, [r7, #32]
 8025232:	881b      	ldrh	r3, [r3, #0]
 8025234:	4618      	mov	r0, r3
 8025236:	f00d fc78 	bl	8032b2a <mg_ntohs>
 802523a:	4603      	mov	r3, r0
 802523c:	461a      	mov	r2, r3
 802523e:	687b      	ldr	r3, [r7, #4]
 8025240:	801a      	strh	r2, [r3, #0]

  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 8025242:	2300      	movs	r3, #0
 8025244:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8025246:	e015      	b.n	8025274 <mg_dns_parse+0xb8>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 8025248:	f107 0314 	add.w	r3, r7, #20
 802524c:	9300      	str	r3, [sp, #0]
 802524e:	2301      	movs	r3, #1
 8025250:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8025252:	68b9      	ldr	r1, [r7, #8]
 8025254:	68f8      	ldr	r0, [r7, #12]
 8025256:	f7ff ff1e 	bl	8025096 <mg_dns_parse_rr>
 802525a:	61f8      	str	r0, [r7, #28]
 802525c:	69fb      	ldr	r3, [r7, #28]
 802525e:	2b00      	cmp	r3, #0
 8025260:	d101      	bne.n	8025266 <mg_dns_parse+0xaa>
 8025262:	2300      	movs	r3, #0
 8025264:	e06a      	b.n	802533c <mg_dns_parse+0x180>
    // MG_INFO(("Q %lu %lu %hu/%hu", ofs, n, rr.atype, rr.aclass));
    ofs += n;
 8025266:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8025268:	69fb      	ldr	r3, [r7, #28]
 802526a:	4413      	add	r3, r2
 802526c:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 802526e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8025270:	3301      	adds	r3, #1
 8025272:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8025274:	6a3b      	ldr	r3, [r7, #32]
 8025276:	889b      	ldrh	r3, [r3, #4]
 8025278:	4618      	mov	r0, r3
 802527a:	f00d fc56 	bl	8032b2a <mg_ntohs>
 802527e:	4603      	mov	r3, r0
 8025280:	461a      	mov	r2, r3
 8025282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8025284:	4293      	cmp	r3, r2
 8025286:	d3df      	bcc.n	8025248 <mg_dns_parse+0x8c>
  }
  for (i = 0; i < num_answers; i++) {
 8025288:	2300      	movs	r3, #0
 802528a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802528c:	e051      	b.n	8025332 <mg_dns_parse+0x176>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 802528e:	f107 0314 	add.w	r3, r7, #20
 8025292:	9300      	str	r3, [sp, #0]
 8025294:	2300      	movs	r3, #0
 8025296:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8025298:	68b9      	ldr	r1, [r7, #8]
 802529a:	68f8      	ldr	r0, [r7, #12]
 802529c:	f7ff fefb 	bl	8025096 <mg_dns_parse_rr>
 80252a0:	61f8      	str	r0, [r7, #28]
 80252a2:	69fb      	ldr	r3, [r7, #28]
 80252a4:	2b00      	cmp	r3, #0
 80252a6:	d101      	bne.n	80252ac <mg_dns_parse+0xf0>
 80252a8:	2300      	movs	r3, #0
 80252aa:	e047      	b.n	802533c <mg_dns_parse+0x180>
    // MG_INFO(("A -- %lu %lu %hu/%hu %s", ofs, n, rr.atype, rr.aclass,
    // dm->name));
    mg_dns_parse_name(buf, len, ofs, dm->name, sizeof(dm->name));
 80252ac:	687b      	ldr	r3, [r7, #4]
 80252ae:	3318      	adds	r3, #24
 80252b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80252b4:	9200      	str	r2, [sp, #0]
 80252b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80252b8:	68b9      	ldr	r1, [r7, #8]
 80252ba:	68f8      	ldr	r0, [r7, #12]
 80252bc:	f7ff fed3 	bl	8025066 <mg_dns_parse_name>
    ofs += n;
 80252c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80252c2:	69fb      	ldr	r3, [r7, #28]
 80252c4:	4413      	add	r3, r2
 80252c6:	627b      	str	r3, [r7, #36]	@ 0x24

    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 80252c8:	8b7b      	ldrh	r3, [r7, #26]
 80252ca:	2b04      	cmp	r3, #4
 80252cc:	d114      	bne.n	80252f8 <mg_dns_parse+0x13c>
 80252ce:	8afb      	ldrh	r3, [r7, #22]
 80252d0:	2b01      	cmp	r3, #1
 80252d2:	d111      	bne.n	80252f8 <mg_dns_parse+0x13c>
 80252d4:	8b3b      	ldrh	r3, [r7, #24]
 80252d6:	2b01      	cmp	r3, #1
 80252d8:	d10e      	bne.n	80252f8 <mg_dns_parse+0x13c>
      dm->addr.is_ip6 = false;
 80252da:	687b      	ldr	r3, [r7, #4]
 80252dc:	2200      	movs	r2, #0
 80252de:	75da      	strb	r2, [r3, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 4], 4);
 80252e0:	687b      	ldr	r3, [r7, #4]
 80252e2:	3304      	adds	r3, #4
 80252e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80252e6:	3a04      	subs	r2, #4
 80252e8:	68f9      	ldr	r1, [r7, #12]
 80252ea:	440a      	add	r2, r1
 80252ec:	6812      	ldr	r2, [r2, #0]
 80252ee:	601a      	str	r2, [r3, #0]
      dm->resolved = true;
 80252f0:	687b      	ldr	r3, [r7, #4]
 80252f2:	2201      	movs	r2, #1
 80252f4:	709a      	strb	r2, [r3, #2]
      break;  // Return success
 80252f6:	e020      	b.n	802533a <mg_dns_parse+0x17e>
    } else if (rr.alen == 16 && rr.atype == 28 && rr.aclass == 1) {
 80252f8:	8b7b      	ldrh	r3, [r7, #26]
 80252fa:	2b10      	cmp	r3, #16
 80252fc:	d116      	bne.n	802532c <mg_dns_parse+0x170>
 80252fe:	8afb      	ldrh	r3, [r7, #22]
 8025300:	2b1c      	cmp	r3, #28
 8025302:	d113      	bne.n	802532c <mg_dns_parse+0x170>
 8025304:	8b3b      	ldrh	r3, [r7, #24]
 8025306:	2b01      	cmp	r3, #1
 8025308:	d110      	bne.n	802532c <mg_dns_parse+0x170>
      dm->addr.is_ip6 = true;
 802530a:	687b      	ldr	r3, [r7, #4]
 802530c:	2201      	movs	r2, #1
 802530e:	75da      	strb	r2, [r3, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 16], 16);
 8025310:	687b      	ldr	r3, [r7, #4]
 8025312:	1d18      	adds	r0, r3, #4
 8025314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025316:	3b10      	subs	r3, #16
 8025318:	68fa      	ldr	r2, [r7, #12]
 802531a:	4413      	add	r3, r2
 802531c:	2210      	movs	r2, #16
 802531e:	4619      	mov	r1, r3
 8025320:	f011 ffa2 	bl	8037268 <memcpy>
      dm->resolved = true;
 8025324:	687b      	ldr	r3, [r7, #4]
 8025326:	2201      	movs	r2, #1
 8025328:	709a      	strb	r2, [r3, #2]
      break;  // Return success
 802532a:	e006      	b.n	802533a <mg_dns_parse+0x17e>
  for (i = 0; i < num_answers; i++) {
 802532c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802532e:	3301      	adds	r3, #1
 8025330:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8025332:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8025334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025336:	429a      	cmp	r2, r3
 8025338:	d3a9      	bcc.n	802528e <mg_dns_parse+0xd2>
    }
  }
  return true;
 802533a:	2301      	movs	r3, #1
}
 802533c:	4618      	mov	r0, r3
 802533e:	3730      	adds	r7, #48	@ 0x30
 8025340:	46bd      	mov	sp, r7
 8025342:	bd80      	pop	{r7, pc}
 8025344:	20000298 	.word	0x20000298
 8025348:	08044550 	.word	0x08044550
 802534c:	08041564 	.word	0x08041564
 8025350:	08041594 	.word	0x08041594

08025354 <dns_cb>:

static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {
 8025354:	b5b0      	push	{r4, r5, r7, lr}
 8025356:	b0d2      	sub	sp, #328	@ 0x148
 8025358:	af02      	add	r7, sp, #8
 802535a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 802535e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8025362:	6018      	str	r0, [r3, #0]
 8025364:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8025368:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 802536c:	6019      	str	r1, [r3, #0]
 802536e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8025372:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8025376:	601a      	str	r2, [r3, #0]
  struct dns_data *d, *tmp;
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 8025378:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 802537c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8025380:	681b      	ldr	r3, [r3, #0]
 8025382:	685b      	ldr	r3, [r3, #4]
 8025384:	3330      	adds	r3, #48	@ 0x30
 8025386:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  if (ev == MG_EV_POLL) {
 802538a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 802538e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8025392:	681b      	ldr	r3, [r3, #0]
 8025394:	2b02      	cmp	r3, #2
 8025396:	d12d      	bne.n	80253f4 <dns_cb+0xa0>
    uint64_t now = *(uint64_t *) ev_data;
 8025398:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 802539c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80253a0:	681b      	ldr	r3, [r3, #0]
 80253a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80253a6:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
    for (d = *head; d != NULL; d = tmp) {
 80253aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80253ae:	681b      	ldr	r3, [r3, #0]
 80253b0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80253b4:	e019      	b.n	80253ea <dns_cb+0x96>
      tmp = d->next;
 80253b6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80253ba:	681b      	ldr	r3, [r3, #0]
 80253bc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
      // MG_DEBUG ("%lu %lu dns poll", d->expire, now));
      if (now > d->expire) mg_error(d->c, "DNS timeout");
 80253c0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80253c4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80253c8:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80253cc:	4290      	cmp	r0, r2
 80253ce:	eb71 0303 	sbcs.w	r3, r1, r3
 80253d2:	d206      	bcs.n	80253e2 <dns_cb+0x8e>
 80253d4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80253d8:	685b      	ldr	r3, [r3, #4]
 80253da:	4992      	ldr	r1, [pc, #584]	@ (8025624 <dns_cb+0x2d0>)
 80253dc:	4618      	mov	r0, r3
 80253de:	f000 fb37 	bl	8025a50 <mg_error>
    for (d = *head; d != NULL; d = tmp) {
 80253e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80253e6:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80253ea:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80253ee:	2b00      	cmp	r3, #0
 80253f0:	d1e1      	bne.n	80253b6 <dns_cb+0x62>
      tmp = d->next;
      mg_error(d->c, "DNS error");
      mg_dns_free(head, d);
    }
  }
}
 80253f2:	e112      	b.n	802561a <dns_cb+0x2c6>
  } else if (ev == MG_EV_READ) {
 80253f4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80253f8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80253fc:	681b      	ldr	r3, [r3, #0]
 80253fe:	2b07      	cmp	r3, #7
 8025400:	f040 80e4 	bne.w	80255cc <dns_cb+0x278>
    int resolved = 0;
 8025404:	2300      	movs	r3, #0
 8025406:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    if (mg_dns_parse(c->recv.buf, c->recv.len, &dm) == false) {
 802540a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 802540e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8025412:	681b      	ldr	r3, [r3, #0]
 8025414:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8025416:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 802541a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 802541e:	681b      	ldr	r3, [r3, #0]
 8025420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8025422:	f107 0210 	add.w	r2, r7, #16
 8025426:	4619      	mov	r1, r3
 8025428:	f7ff fec8 	bl	80251bc <mg_dns_parse>
 802542c:	4603      	mov	r3, r0
 802542e:	f083 0301 	eor.w	r3, r3, #1
 8025432:	b2db      	uxtb	r3, r3
 8025434:	2b00      	cmp	r3, #0
 8025436:	d01e      	beq.n	8025476 <dns_cb+0x122>
      MG_ERROR(("Unexpected DNS response:"));
 8025438:	4b7b      	ldr	r3, [pc, #492]	@ (8025628 <dns_cb+0x2d4>)
 802543a:	681b      	ldr	r3, [r3, #0]
 802543c:	2b00      	cmp	r3, #0
 802543e:	dd09      	ble.n	8025454 <dns_cb+0x100>
 8025440:	4b7a      	ldr	r3, [pc, #488]	@ (802562c <dns_cb+0x2d8>)
 8025442:	f240 42c1 	movw	r2, #1217	@ 0x4c1
 8025446:	497a      	ldr	r1, [pc, #488]	@ (8025630 <dns_cb+0x2dc>)
 8025448:	2001      	movs	r0, #1
 802544a:	f005 fec7 	bl	802b1dc <mg_log_prefix>
 802544e:	4879      	ldr	r0, [pc, #484]	@ (8025634 <dns_cb+0x2e0>)
 8025450:	f005 ff14 	bl	802b27c <mg_log>
      mg_hexdump(c->recv.buf, c->recv.len);
 8025454:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8025458:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 802545c:	681b      	ldr	r3, [r3, #0]
 802545e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8025460:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8025464:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8025468:	681b      	ldr	r3, [r3, #0]
 802546a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802546c:	4619      	mov	r1, r3
 802546e:	4610      	mov	r0, r2
 8025470:	f005 ff3a 	bl	802b2e8 <mg_hexdump>
 8025474:	e090      	b.n	8025598 <dns_cb+0x244>
      for (d = *head; d != NULL; d = tmp) {
 8025476:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 802547a:	681b      	ldr	r3, [r3, #0]
 802547c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8025480:	e085      	b.n	802558e <dns_cb+0x23a>
        tmp = d->next;
 8025482:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8025486:	681b      	ldr	r3, [r3, #0]
 8025488:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
        if (dm.txnid != d->txnid) continue;
 802548c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8025490:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8025494:	881a      	ldrh	r2, [r3, #0]
 8025496:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 802549a:	8a1b      	ldrh	r3, [r3, #16]
 802549c:	429a      	cmp	r2, r3
 802549e:	d171      	bne.n	8025584 <dns_cb+0x230>
        if (d->c->is_resolving) {
 80254a0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80254a4:	685b      	ldr	r3, [r3, #4]
 80254a6:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80254aa:	f003 0308 	and.w	r3, r3, #8
 80254ae:	b2db      	uxtb	r3, r3
 80254b0:	2b00      	cmp	r3, #0
 80254b2:	d04a      	beq.n	802554a <dns_cb+0x1f6>
          if (dm.resolved) {
 80254b4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80254b8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80254bc:	789b      	ldrb	r3, [r3, #2]
 80254be:	2b00      	cmp	r3, #0
 80254c0:	d038      	beq.n	8025534 <dns_cb+0x1e0>
            dm.addr.port = d->c->rem.port;  // Save port
 80254c2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80254c6:	685b      	ldr	r3, [r3, #4]
 80254c8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80254ca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80254ce:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80254d2:	829a      	strh	r2, [r3, #20]
            d->c->rem = dm.addr;            // Copy resolved address
 80254d4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80254d8:	685a      	ldr	r2, [r3, #4]
 80254da:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80254de:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80254e2:	f102 041c 	add.w	r4, r2, #28
 80254e6:	1d1d      	adds	r5, r3, #4
 80254e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80254ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80254ec:	682b      	ldr	r3, [r5, #0]
 80254ee:	6023      	str	r3, [r4, #0]
            MG_DEBUG(
 80254f0:	4b4d      	ldr	r3, [pc, #308]	@ (8025628 <dns_cb+0x2d4>)
 80254f2:	681b      	ldr	r3, [r3, #0]
 80254f4:	2b02      	cmp	r3, #2
 80254f6:	dd16      	ble.n	8025526 <dns_cb+0x1d2>
 80254f8:	4b4c      	ldr	r3, [pc, #304]	@ (802562c <dns_cb+0x2d8>)
 80254fa:	f240 42cd 	movw	r2, #1229	@ 0x4cd
 80254fe:	494c      	ldr	r1, [pc, #304]	@ (8025630 <dns_cb+0x2dc>)
 8025500:	2003      	movs	r0, #3
 8025502:	f005 fe6b 	bl	802b1dc <mg_log_prefix>
 8025506:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 802550a:	685b      	ldr	r3, [r3, #4]
 802550c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 802550e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8025512:	685b      	ldr	r3, [r3, #4]
 8025514:	331c      	adds	r3, #28
 8025516:	f107 0210 	add.w	r2, r7, #16
 802551a:	3218      	adds	r2, #24
 802551c:	9300      	str	r3, [sp, #0]
 802551e:	4b46      	ldr	r3, [pc, #280]	@ (8025638 <dns_cb+0x2e4>)
 8025520:	4846      	ldr	r0, [pc, #280]	@ (802563c <dns_cb+0x2e8>)
 8025522:	f005 feab 	bl	802b27c <mg_log>
            mg_connect_resolved(d->c);
 8025526:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 802552a:	685b      	ldr	r3, [r3, #4]
 802552c:	4618      	mov	r0, r3
 802552e:	f00b faad 	bl	8030a8c <mg_connect_resolved>
 8025532:	e01d      	b.n	8025570 <dns_cb+0x21c>
            mg_error(d->c, "%s DNS lookup failed", dm.name);
 8025534:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8025538:	6858      	ldr	r0, [r3, #4]
 802553a:	f107 0310 	add.w	r3, r7, #16
 802553e:	3318      	adds	r3, #24
 8025540:	461a      	mov	r2, r3
 8025542:	493f      	ldr	r1, [pc, #252]	@ (8025640 <dns_cb+0x2ec>)
 8025544:	f000 fa84 	bl	8025a50 <mg_error>
 8025548:	e012      	b.n	8025570 <dns_cb+0x21c>
          MG_ERROR(("%lu already resolved", d->c->id));
 802554a:	4b37      	ldr	r3, [pc, #220]	@ (8025628 <dns_cb+0x2d4>)
 802554c:	681b      	ldr	r3, [r3, #0]
 802554e:	2b00      	cmp	r3, #0
 8025550:	dd0e      	ble.n	8025570 <dns_cb+0x21c>
 8025552:	4b36      	ldr	r3, [pc, #216]	@ (802562c <dns_cb+0x2d8>)
 8025554:	f240 42da 	movw	r2, #1242	@ 0x4da
 8025558:	4935      	ldr	r1, [pc, #212]	@ (8025630 <dns_cb+0x2dc>)
 802555a:	2001      	movs	r0, #1
 802555c:	f005 fe3e 	bl	802b1dc <mg_log_prefix>
 8025560:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8025564:	685b      	ldr	r3, [r3, #4]
 8025566:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025568:	4619      	mov	r1, r3
 802556a:	4836      	ldr	r0, [pc, #216]	@ (8025644 <dns_cb+0x2f0>)
 802556c:	f005 fe86 	bl	802b27c <mg_log>
        mg_dns_free(head, d);
 8025570:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8025574:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8025578:	f7ff fc88 	bl	8024e8c <mg_dns_free>
        resolved = 1;
 802557c:	2301      	movs	r3, #1
 802557e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8025582:	e000      	b.n	8025586 <dns_cb+0x232>
        if (dm.txnid != d->txnid) continue;
 8025584:	bf00      	nop
      for (d = *head; d != NULL; d = tmp) {
 8025586:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 802558a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 802558e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8025592:	2b00      	cmp	r3, #0
 8025594:	f47f af75 	bne.w	8025482 <dns_cb+0x12e>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 8025598:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 802559c:	2b00      	cmp	r3, #0
 802559e:	d10d      	bne.n	80255bc <dns_cb+0x268>
 80255a0:	4b21      	ldr	r3, [pc, #132]	@ (8025628 <dns_cb+0x2d4>)
 80255a2:	681b      	ldr	r3, [r3, #0]
 80255a4:	2b00      	cmp	r3, #0
 80255a6:	dd09      	ble.n	80255bc <dns_cb+0x268>
 80255a8:	4b20      	ldr	r3, [pc, #128]	@ (802562c <dns_cb+0x2d8>)
 80255aa:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 80255ae:	4920      	ldr	r1, [pc, #128]	@ (8025630 <dns_cb+0x2dc>)
 80255b0:	2001      	movs	r0, #1
 80255b2:	f005 fe13 	bl	802b1dc <mg_log_prefix>
 80255b6:	4824      	ldr	r0, [pc, #144]	@ (8025648 <dns_cb+0x2f4>)
 80255b8:	f005 fe60 	bl	802b27c <mg_log>
    c->recv.len = 0;
 80255bc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80255c0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80255c4:	681b      	ldr	r3, [r3, #0]
 80255c6:	2200      	movs	r2, #0
 80255c8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80255ca:	e026      	b.n	802561a <dns_cb+0x2c6>
  } else if (ev == MG_EV_CLOSE) {
 80255cc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80255d0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80255d4:	681b      	ldr	r3, [r3, #0]
 80255d6:	2b09      	cmp	r3, #9
 80255d8:	d11f      	bne.n	802561a <dns_cb+0x2c6>
    for (d = *head; d != NULL; d = tmp) {
 80255da:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80255de:	681b      	ldr	r3, [r3, #0]
 80255e0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80255e4:	e015      	b.n	8025612 <dns_cb+0x2be>
      tmp = d->next;
 80255e6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80255ea:	681b      	ldr	r3, [r3, #0]
 80255ec:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
      mg_error(d->c, "DNS error");
 80255f0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80255f4:	685b      	ldr	r3, [r3, #4]
 80255f6:	4915      	ldr	r1, [pc, #84]	@ (802564c <dns_cb+0x2f8>)
 80255f8:	4618      	mov	r0, r3
 80255fa:	f000 fa29 	bl	8025a50 <mg_error>
      mg_dns_free(head, d);
 80255fe:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8025602:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8025606:	f7ff fc41 	bl	8024e8c <mg_dns_free>
    for (d = *head; d != NULL; d = tmp) {
 802560a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 802560e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8025612:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8025616:	2b00      	cmp	r3, #0
 8025618:	d1e5      	bne.n	80255e6 <dns_cb+0x292>
}
 802561a:	bf00      	nop
 802561c:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8025620:	46bd      	mov	sp, r7
 8025622:	bdb0      	pop	{r4, r5, r7, pc}
 8025624:	080415c0 	.word	0x080415c0
 8025628:	20000298 	.word	0x20000298
 802562c:	08044560 	.word	0x08044560
 8025630:	08041564 	.word	0x08041564
 8025634:	080415cc 	.word	0x080415cc
 8025638:	080313fb 	.word	0x080313fb
 802563c:	080415e8 	.word	0x080415e8
 8025640:	080415f8 	.word	0x080415f8
 8025644:	08041610 	.word	0x08041610
 8025648:	08041628 	.word	0x08041628
 802564c:	08041638 	.word	0x08041638

08025650 <mg_dns_send>:

static bool mg_dns_send(struct mg_connection *c, const struct mg_str *name,
                        uint16_t txnid, bool ipv6) {
 8025650:	b590      	push	{r4, r7, lr}
 8025652:	b0cb      	sub	sp, #300	@ 0x12c
 8025654:	af00      	add	r7, sp, #0
 8025656:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 802565a:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 802565e:	6020      	str	r0, [r4, #0]
 8025660:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 8025664:	f5a0 7090 	sub.w	r0, r0, #288	@ 0x120
 8025668:	6001      	str	r1, [r0, #0]
 802566a:	4619      	mov	r1, r3
 802566c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8025670:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 8025674:	801a      	strh	r2, [r3, #0]
 8025676:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802567a:	f2a3 1323 	subw	r3, r3, #291	@ 0x123
 802567e:	460a      	mov	r2, r1
 8025680:	701a      	strb	r2, [r3, #0]
  struct {
    struct mg_dns_header header;
    uint8_t data[256];
  } pkt;
  size_t i, n;
  memset(&pkt, 0, sizeof(pkt));
 8025682:	f107 0314 	add.w	r3, r7, #20
 8025686:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 802568a:	2100      	movs	r1, #0
 802568c:	4618      	mov	r0, r3
 802568e:	f010 fbaf 	bl	8035df0 <memset>
  pkt.header.txnid = mg_htons(txnid);
 8025692:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8025696:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 802569a:	881b      	ldrh	r3, [r3, #0]
 802569c:	4618      	mov	r0, r3
 802569e:	f00d fa44 	bl	8032b2a <mg_ntohs>
 80256a2:	4603      	mov	r3, r0
 80256a4:	461a      	mov	r2, r3
 80256a6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80256aa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80256ae:	801a      	strh	r2, [r3, #0]
  pkt.header.flags = mg_htons(0x100);
 80256b0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80256b4:	f00d fa39 	bl	8032b2a <mg_ntohs>
 80256b8:	4603      	mov	r3, r0
 80256ba:	461a      	mov	r2, r3
 80256bc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80256c0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80256c4:	805a      	strh	r2, [r3, #2]
  pkt.header.num_questions = mg_htons(1);
 80256c6:	2001      	movs	r0, #1
 80256c8:	f00d fa2f 	bl	8032b2a <mg_ntohs>
 80256cc:	4603      	mov	r3, r0
 80256ce:	461a      	mov	r2, r3
 80256d0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80256d4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80256d8:	809a      	strh	r2, [r3, #4]
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 80256da:	2300      	movs	r3, #0
 80256dc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80256e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80256e4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80256e8:	e054      	b.n	8025794 <mg_dns_send+0x144>
    if (name->buf[i] == '.' || i >= name->len) {
 80256ea:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80256ee:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80256f2:	681b      	ldr	r3, [r3, #0]
 80256f4:	681a      	ldr	r2, [r3, #0]
 80256f6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80256fa:	4413      	add	r3, r2
 80256fc:	781b      	ldrb	r3, [r3, #0]
 80256fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8025700:	d009      	beq.n	8025716 <mg_dns_send+0xc6>
 8025702:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8025706:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 802570a:	681b      	ldr	r3, [r3, #0]
 802570c:	685b      	ldr	r3, [r3, #4]
 802570e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8025712:	429a      	cmp	r2, r3
 8025714:	d32f      	bcc.n	8025776 <mg_dns_send+0x126>
      pkt.data[n] = (uint8_t) (i - n);
 8025716:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 802571a:	b2da      	uxtb	r2, r3
 802571c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8025720:	b2db      	uxtb	r3, r3
 8025722:	1ad3      	subs	r3, r2, r3
 8025724:	b2d9      	uxtb	r1, r3
 8025726:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802572a:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 802572e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8025732:	4413      	add	r3, r2
 8025734:	330c      	adds	r3, #12
 8025736:	460a      	mov	r2, r1
 8025738:	701a      	strb	r2, [r3, #0]
      memcpy(&pkt.data[n + 1], name->buf + n, i - n);
 802573a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 802573e:	3301      	adds	r3, #1
 8025740:	f107 0214 	add.w	r2, r7, #20
 8025744:	3308      	adds	r3, #8
 8025746:	4413      	add	r3, r2
 8025748:	1d18      	adds	r0, r3, #4
 802574a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802574e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8025752:	681b      	ldr	r3, [r3, #0]
 8025754:	681a      	ldr	r2, [r3, #0]
 8025756:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 802575a:	18d1      	adds	r1, r2, r3
 802575c:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8025760:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8025764:	1ad3      	subs	r3, r2, r3
 8025766:	461a      	mov	r2, r3
 8025768:	f011 fd7e 	bl	8037268 <memcpy>
      n = i + 1;
 802576c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8025770:	3301      	adds	r3, #1
 8025772:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    }
    if (i >= name->len) break;
 8025776:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802577a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 802577e:	681b      	ldr	r3, [r3, #0]
 8025780:	685b      	ldr	r3, [r3, #4]
 8025782:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8025786:	429a      	cmp	r2, r3
 8025788:	d209      	bcs.n	802579e <mg_dns_send+0x14e>
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 802578a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 802578e:	3301      	adds	r3, #1
 8025790:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8025794:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8025798:	2bfa      	cmp	r3, #250	@ 0xfa
 802579a:	d9a6      	bls.n	80256ea <mg_dns_send+0x9a>
 802579c:	e000      	b.n	80257a0 <mg_dns_send+0x150>
    if (i >= name->len) break;
 802579e:	bf00      	nop
  }
  memcpy(&pkt.data[n], "\x00\x00\x01\x00\x01", 5);  // A query
 80257a0:	f107 0214 	add.w	r2, r7, #20
 80257a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80257a8:	3308      	adds	r3, #8
 80257aa:	4413      	add	r3, r2
 80257ac:	3304      	adds	r3, #4
 80257ae:	2205      	movs	r2, #5
 80257b0:	4916      	ldr	r1, [pc, #88]	@ (802580c <mg_dns_send+0x1bc>)
 80257b2:	4618      	mov	r0, r3
 80257b4:	f011 fd58 	bl	8037268 <memcpy>
  n += 5;
 80257b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80257bc:	3305      	adds	r3, #5
 80257be:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  if (ipv6) pkt.data[n - 3] = 0x1c;  // AAAA query
 80257c2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80257c6:	f2a3 1323 	subw	r3, r3, #291	@ 0x123
 80257ca:	781b      	ldrb	r3, [r3, #0]
 80257cc:	2b00      	cmp	r3, #0
 80257ce:	d009      	beq.n	80257e4 <mg_dns_send+0x194>
 80257d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80257d4:	3b03      	subs	r3, #3
 80257d6:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 80257da:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 80257de:	4413      	add	r3, r2
 80257e0:	221c      	movs	r2, #28
 80257e2:	731a      	strb	r2, [r3, #12]
  // memcpy(&pkt.data[n], "\xc0\x0c\x00\x1c\x00\x01", 6);  // AAAA query
  // n += 6;
  return mg_send(c, &pkt, sizeof(pkt.header) + n);
 80257e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80257e8:	f103 020c 	add.w	r2, r3, #12
 80257ec:	f107 0114 	add.w	r1, r7, #20
 80257f0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80257f4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80257f8:	6818      	ldr	r0, [r3, #0]
 80257fa:	f00b fc1d 	bl	8031038 <mg_send>
 80257fe:	4603      	mov	r3, r0
}
 8025800:	4618      	mov	r0, r3
 8025802:	f507 7796 	add.w	r7, r7, #300	@ 0x12c
 8025806:	46bd      	mov	sp, r7
 8025808:	bd90      	pop	{r4, r7, pc}
 802580a:	bf00      	nop
 802580c:	08041644 	.word	0x08041644

08025810 <mg_sendnsreq>:

static void mg_sendnsreq(struct mg_connection *c, struct mg_str *name, int ms,
                         struct mg_dns *dnsc, bool ipv6) {
 8025810:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8025814:	b088      	sub	sp, #32
 8025816:	af02      	add	r7, sp, #8
 8025818:	60f8      	str	r0, [r7, #12]
 802581a:	60b9      	str	r1, [r7, #8]
 802581c:	607a      	str	r2, [r7, #4]
 802581e:	603b      	str	r3, [r7, #0]
  struct dns_data *d = NULL;
 8025820:	2300      	movs	r3, #0
 8025822:	617b      	str	r3, [r7, #20]
  if (dnsc->url == NULL) {
 8025824:	683b      	ldr	r3, [r7, #0]
 8025826:	681b      	ldr	r3, [r3, #0]
 8025828:	2b00      	cmp	r3, #0
 802582a:	d104      	bne.n	8025836 <mg_sendnsreq+0x26>
    mg_error(c, "DNS server URL is NULL. Call mg_mgr_init()");
 802582c:	494d      	ldr	r1, [pc, #308]	@ (8025964 <mg_sendnsreq+0x154>)
 802582e:	68f8      	ldr	r0, [r7, #12]
 8025830:	f000 f90e 	bl	8025a50 <mg_error>
 8025834:	e017      	b.n	8025866 <mg_sendnsreq+0x56>
  } else if (dnsc->c == NULL) {
 8025836:	683b      	ldr	r3, [r7, #0]
 8025838:	685b      	ldr	r3, [r3, #4]
 802583a:	2b00      	cmp	r3, #0
 802583c:	d113      	bne.n	8025866 <mg_sendnsreq+0x56>
    dnsc->c = mg_connect(c->mgr, dnsc->url, NULL, NULL);
 802583e:	68fb      	ldr	r3, [r7, #12]
 8025840:	6858      	ldr	r0, [r3, #4]
 8025842:	683b      	ldr	r3, [r7, #0]
 8025844:	6819      	ldr	r1, [r3, #0]
 8025846:	2300      	movs	r3, #0
 8025848:	2200      	movs	r2, #0
 802584a:	f008 f931 	bl	802dab0 <mg_connect>
 802584e:	4602      	mov	r2, r0
 8025850:	683b      	ldr	r3, [r7, #0]
 8025852:	605a      	str	r2, [r3, #4]
    if (dnsc->c != NULL) {
 8025854:	683b      	ldr	r3, [r7, #0]
 8025856:	685b      	ldr	r3, [r3, #4]
 8025858:	2b00      	cmp	r3, #0
 802585a:	d004      	beq.n	8025866 <mg_sendnsreq+0x56>
      dnsc->c->pfn = dns_cb;
 802585c:	683b      	ldr	r3, [r7, #0]
 802585e:	685b      	ldr	r3, [r3, #4]
 8025860:	4a41      	ldr	r2, [pc, #260]	@ (8025968 <mg_sendnsreq+0x158>)
 8025862:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      // dnsc->c->is_hexdumping = 1;
    }
  }
  if (dnsc->c == NULL) {
 8025866:	683b      	ldr	r3, [r7, #0]
 8025868:	685b      	ldr	r3, [r3, #4]
 802586a:	2b00      	cmp	r3, #0
 802586c:	d104      	bne.n	8025878 <mg_sendnsreq+0x68>
    mg_error(c, "resolver");
 802586e:	493f      	ldr	r1, [pc, #252]	@ (802596c <mg_sendnsreq+0x15c>)
 8025870:	68f8      	ldr	r0, [r7, #12]
 8025872:	f000 f8ed 	bl	8025a50 <mg_error>
                name->buf, dnsc->url, d->txnid));
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
      mg_error(dnsc->c, "DNS send");
    }
  }
}
 8025876:	e06f      	b.n	8025958 <mg_sendnsreq+0x148>
  } else if ((d = (struct dns_data *) calloc(1, sizeof(*d))) == NULL) {
 8025878:	2118      	movs	r1, #24
 802587a:	2001      	movs	r0, #1
 802587c:	f7ff fae8 	bl	8024e50 <mg_calloc>
 8025880:	6178      	str	r0, [r7, #20]
 8025882:	697b      	ldr	r3, [r7, #20]
 8025884:	2b00      	cmp	r3, #0
 8025886:	d104      	bne.n	8025892 <mg_sendnsreq+0x82>
    mg_error(c, "resolve OOM");
 8025888:	4939      	ldr	r1, [pc, #228]	@ (8025970 <mg_sendnsreq+0x160>)
 802588a:	68f8      	ldr	r0, [r7, #12]
 802588c:	f000 f8e0 	bl	8025a50 <mg_error>
}
 8025890:	e062      	b.n	8025958 <mg_sendnsreq+0x148>
    struct dns_data *reqs = (struct dns_data *) c->mgr->active_dns_requests;
 8025892:	68fb      	ldr	r3, [r7, #12]
 8025894:	685b      	ldr	r3, [r3, #4]
 8025896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8025898:	613b      	str	r3, [r7, #16]
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 802589a:	693b      	ldr	r3, [r7, #16]
 802589c:	2b00      	cmp	r3, #0
 802589e:	d004      	beq.n	80258aa <mg_sendnsreq+0x9a>
 80258a0:	693b      	ldr	r3, [r7, #16]
 80258a2:	8a1b      	ldrh	r3, [r3, #16]
 80258a4:	3301      	adds	r3, #1
 80258a6:	b29a      	uxth	r2, r3
 80258a8:	e000      	b.n	80258ac <mg_sendnsreq+0x9c>
 80258aa:	2201      	movs	r2, #1
 80258ac:	697b      	ldr	r3, [r7, #20]
 80258ae:	821a      	strh	r2, [r3, #16]
    d->next = (struct dns_data *) c->mgr->active_dns_requests;
 80258b0:	68fb      	ldr	r3, [r7, #12]
 80258b2:	685b      	ldr	r3, [r3, #4]
 80258b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80258b6:	697b      	ldr	r3, [r7, #20]
 80258b8:	601a      	str	r2, [r3, #0]
    c->mgr->active_dns_requests = d;
 80258ba:	68fb      	ldr	r3, [r7, #12]
 80258bc:	685b      	ldr	r3, [r3, #4]
 80258be:	697a      	ldr	r2, [r7, #20]
 80258c0:	631a      	str	r2, [r3, #48]	@ 0x30
    d->expire = mg_millis() + (uint64_t) ms;
 80258c2:	f00d f9c3 	bl	8032c4c <mg_millis>
 80258c6:	4602      	mov	r2, r0
 80258c8:	460b      	mov	r3, r1
 80258ca:	6879      	ldr	r1, [r7, #4]
 80258cc:	17c8      	asrs	r0, r1, #31
 80258ce:	460c      	mov	r4, r1
 80258d0:	4605      	mov	r5, r0
 80258d2:	eb12 0804 	adds.w	r8, r2, r4
 80258d6:	eb43 0905 	adc.w	r9, r3, r5
 80258da:	697b      	ldr	r3, [r7, #20]
 80258dc:	e9c3 8902 	strd	r8, r9, [r3, #8]
    d->c = c;
 80258e0:	697b      	ldr	r3, [r7, #20]
 80258e2:	68fa      	ldr	r2, [r7, #12]
 80258e4:	605a      	str	r2, [r3, #4]
    c->is_resolving = 1;
 80258e6:	68fa      	ldr	r2, [r7, #12]
 80258e8:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 80258ec:	f043 0308 	orr.w	r3, r3, #8
 80258f0:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 80258f4:	4b1f      	ldr	r3, [pc, #124]	@ (8025974 <mg_sendnsreq+0x164>)
 80258f6:	681b      	ldr	r3, [r3, #0]
 80258f8:	2b03      	cmp	r3, #3
 80258fa:	dd18      	ble.n	802592e <mg_sendnsreq+0x11e>
 80258fc:	4b1e      	ldr	r3, [pc, #120]	@ (8025978 <mg_sendnsreq+0x168>)
 80258fe:	f240 521e 	movw	r2, #1310	@ 0x51e
 8025902:	491e      	ldr	r1, [pc, #120]	@ (802597c <mg_sendnsreq+0x16c>)
 8025904:	2004      	movs	r0, #4
 8025906:	f005 fc69 	bl	802b1dc <mg_log_prefix>
 802590a:	68fb      	ldr	r3, [r7, #12]
 802590c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 802590e:	68bb      	ldr	r3, [r7, #8]
 8025910:	685b      	ldr	r3, [r3, #4]
 8025912:	461c      	mov	r4, r3
 8025914:	68bb      	ldr	r3, [r7, #8]
 8025916:	6818      	ldr	r0, [r3, #0]
 8025918:	683b      	ldr	r3, [r7, #0]
 802591a:	681b      	ldr	r3, [r3, #0]
 802591c:	697a      	ldr	r2, [r7, #20]
 802591e:	8a12      	ldrh	r2, [r2, #16]
 8025920:	9201      	str	r2, [sp, #4]
 8025922:	9300      	str	r3, [sp, #0]
 8025924:	4603      	mov	r3, r0
 8025926:	4622      	mov	r2, r4
 8025928:	4815      	ldr	r0, [pc, #84]	@ (8025980 <mg_sendnsreq+0x170>)
 802592a:	f005 fca7 	bl	802b27c <mg_log>
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
 802592e:	683b      	ldr	r3, [r7, #0]
 8025930:	6858      	ldr	r0, [r3, #4]
 8025932:	697b      	ldr	r3, [r7, #20]
 8025934:	8a1a      	ldrh	r2, [r3, #16]
 8025936:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 802593a:	68b9      	ldr	r1, [r7, #8]
 802593c:	f7ff fe88 	bl	8025650 <mg_dns_send>
 8025940:	4603      	mov	r3, r0
 8025942:	f083 0301 	eor.w	r3, r3, #1
 8025946:	b2db      	uxtb	r3, r3
 8025948:	2b00      	cmp	r3, #0
 802594a:	d005      	beq.n	8025958 <mg_sendnsreq+0x148>
      mg_error(dnsc->c, "DNS send");
 802594c:	683b      	ldr	r3, [r7, #0]
 802594e:	685b      	ldr	r3, [r3, #4]
 8025950:	490c      	ldr	r1, [pc, #48]	@ (8025984 <mg_sendnsreq+0x174>)
 8025952:	4618      	mov	r0, r3
 8025954:	f000 f87c 	bl	8025a50 <mg_error>
}
 8025958:	bf00      	nop
 802595a:	3718      	adds	r7, #24
 802595c:	46bd      	mov	sp, r7
 802595e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8025962:	bf00      	nop
 8025964:	0804164c 	.word	0x0804164c
 8025968:	08025355 	.word	0x08025355
 802596c:	08041678 	.word	0x08041678
 8025970:	08041684 	.word	0x08041684
 8025974:	20000298 	.word	0x20000298
 8025978:	08044568 	.word	0x08044568
 802597c:	08041564 	.word	0x08041564
 8025980:	08041690 	.word	0x08041690
 8025984:	080416b4 	.word	0x080416b4

08025988 <mg_resolve>:

void mg_resolve(struct mg_connection *c, const char *url) {
 8025988:	b580      	push	{r7, lr}
 802598a:	b088      	sub	sp, #32
 802598c:	af02      	add	r7, sp, #8
 802598e:	6078      	str	r0, [r7, #4]
 8025990:	6039      	str	r1, [r7, #0]
  struct mg_str host = mg_url_host(url);
 8025992:	f107 030c 	add.w	r3, r7, #12
 8025996:	6839      	ldr	r1, [r7, #0]
 8025998:	4618      	mov	r0, r3
 802599a:	f00c ff96 	bl	80328ca <mg_url_host>
  c->rem.port = mg_htons(mg_url_port(url));
 802599e:	6838      	ldr	r0, [r7, #0]
 80259a0:	f00c ffc6 	bl	8032930 <mg_url_port>
 80259a4:	4603      	mov	r3, r0
 80259a6:	4618      	mov	r0, r3
 80259a8:	f00d f8bf 	bl	8032b2a <mg_ntohs>
 80259ac:	4603      	mov	r3, r0
 80259ae:	461a      	mov	r2, r3
 80259b0:	687b      	ldr	r3, [r7, #4]
 80259b2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  if (mg_aton(host, &c->rem)) {
 80259b4:	687b      	ldr	r3, [r7, #4]
 80259b6:	331c      	adds	r3, #28
 80259b8:	461a      	mov	r2, r3
 80259ba:	f107 030c 	add.w	r3, r7, #12
 80259be:	e893 0003 	ldmia.w	r3, {r0, r1}
 80259c2:	f007 ffa6 	bl	802d912 <mg_aton>
 80259c6:	4603      	mov	r3, r0
 80259c8:	2b00      	cmp	r3, #0
 80259ca:	d003      	beq.n	80259d4 <mg_resolve+0x4c>
    // host is an IP address, do not fire name resolution
    mg_connect_resolved(c);
 80259cc:	6878      	ldr	r0, [r7, #4]
 80259ce:	f00b f85d 	bl	8030a8c <mg_connect_resolved>
  } else {
    // host is not an IP, send DNS resolution request
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
  }
}
 80259d2:	e019      	b.n	8025a08 <mg_resolve+0x80>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 80259d4:	687b      	ldr	r3, [r7, #4]
 80259d6:	685b      	ldr	r3, [r3, #4]
 80259d8:	7e1b      	ldrb	r3, [r3, #24]
 80259da:	2b00      	cmp	r3, #0
 80259dc:	d003      	beq.n	80259e6 <mg_resolve+0x5e>
 80259de:	687b      	ldr	r3, [r7, #4]
 80259e0:	685b      	ldr	r3, [r3, #4]
 80259e2:	330c      	adds	r3, #12
 80259e4:	e002      	b.n	80259ec <mg_resolve+0x64>
 80259e6:	687b      	ldr	r3, [r7, #4]
 80259e8:	685b      	ldr	r3, [r3, #4]
 80259ea:	3304      	adds	r3, #4
 80259ec:	617b      	str	r3, [r7, #20]
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
 80259ee:	687b      	ldr	r3, [r7, #4]
 80259f0:	685b      	ldr	r3, [r3, #4]
 80259f2:	695a      	ldr	r2, [r3, #20]
 80259f4:	687b      	ldr	r3, [r7, #4]
 80259f6:	685b      	ldr	r3, [r3, #4]
 80259f8:	7e1b      	ldrb	r3, [r3, #24]
 80259fa:	f107 010c 	add.w	r1, r7, #12
 80259fe:	9300      	str	r3, [sp, #0]
 8025a00:	697b      	ldr	r3, [r7, #20]
 8025a02:	6878      	ldr	r0, [r7, #4]
 8025a04:	f7ff ff04 	bl	8025810 <mg_sendnsreq>
}
 8025a08:	bf00      	nop
 8025a0a:	3718      	adds	r7, #24
 8025a0c:	46bd      	mov	sp, r7
 8025a0e:	bd80      	pop	{r7, pc}

08025a10 <mg_call>:





void mg_call(struct mg_connection *c, int ev, void *ev_data) {
 8025a10:	b580      	push	{r7, lr}
 8025a12:	b084      	sub	sp, #16
 8025a14:	af00      	add	r7, sp, #0
 8025a16:	60f8      	str	r0, [r7, #12]
 8025a18:	60b9      	str	r1, [r7, #8]
 8025a1a:	607a      	str	r2, [r7, #4]
  if (ev != MG_EV_POLL && ev < (int) (sizeof(names) / sizeof(names[0]))) {
    MG_PROF_ADD(c, names[ev]);
  }
#endif
  // Fire protocol handler first, user handler second. See #2559
  if (c->pfn != NULL) c->pfn(c, ev, ev_data);
 8025a1c:	68fb      	ldr	r3, [r7, #12]
 8025a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8025a22:	2b00      	cmp	r3, #0
 8025a24:	d006      	beq.n	8025a34 <mg_call+0x24>
 8025a26:	68fb      	ldr	r3, [r7, #12]
 8025a28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8025a2c:	687a      	ldr	r2, [r7, #4]
 8025a2e:	68b9      	ldr	r1, [r7, #8]
 8025a30:	68f8      	ldr	r0, [r7, #12]
 8025a32:	4798      	blx	r3
  if (c->fn != NULL) c->fn(c, ev, ev_data);
 8025a34:	68fb      	ldr	r3, [r7, #12]
 8025a36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8025a38:	2b00      	cmp	r3, #0
 8025a3a:	d005      	beq.n	8025a48 <mg_call+0x38>
 8025a3c:	68fb      	ldr	r3, [r7, #12]
 8025a3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8025a40:	687a      	ldr	r2, [r7, #4]
 8025a42:	68b9      	ldr	r1, [r7, #8]
 8025a44:	68f8      	ldr	r0, [r7, #12]
 8025a46:	4798      	blx	r3
}
 8025a48:	bf00      	nop
 8025a4a:	3710      	adds	r7, #16
 8025a4c:	46bd      	mov	sp, r7
 8025a4e:	bd80      	pop	{r7, pc}

08025a50 <mg_error>:

void mg_error(struct mg_connection *c, const char *fmt, ...) {
 8025a50:	b40e      	push	{r1, r2, r3}
 8025a52:	b580      	push	{r7, lr}
 8025a54:	b095      	sub	sp, #84	@ 0x54
 8025a56:	af00      	add	r7, sp, #0
 8025a58:	6078      	str	r0, [r7, #4]
  char buf[64];
  va_list ap;
  va_start(ap, fmt);
 8025a5a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8025a5e:	60fb      	str	r3, [r7, #12]
  mg_vsnprintf(buf, sizeof(buf), fmt, &ap);
 8025a60:	f107 030c 	add.w	r3, r7, #12
 8025a64:	f107 0010 	add.w	r0, r7, #16
 8025a68:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8025a6a:	2140      	movs	r1, #64	@ 0x40
 8025a6c:	f00b fbaa 	bl	80311c4 <mg_vsnprintf>
  va_end(ap);
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 8025a70:	4b14      	ldr	r3, [pc, #80]	@ (8025ac4 <mg_error+0x74>)
 8025a72:	681b      	ldr	r3, [r3, #0]
 8025a74:	2b00      	cmp	r3, #0
 8025a76:	dd0f      	ble.n	8025a98 <mg_error+0x48>
 8025a78:	4b13      	ldr	r3, [pc, #76]	@ (8025ac8 <mg_error+0x78>)
 8025a7a:	f240 5253 	movw	r2, #1363	@ 0x553
 8025a7e:	4913      	ldr	r1, [pc, #76]	@ (8025acc <mg_error+0x7c>)
 8025a80:	2001      	movs	r0, #1
 8025a82:	f005 fbab 	bl	802b1dc <mg_log_prefix>
 8025a86:	687b      	ldr	r3, [r7, #4]
 8025a88:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8025a8a:	687b      	ldr	r3, [r7, #4]
 8025a8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8025a8e:	f107 0310 	add.w	r3, r7, #16
 8025a92:	480f      	ldr	r0, [pc, #60]	@ (8025ad0 <mg_error+0x80>)
 8025a94:	f005 fbf2 	bl	802b27c <mg_log>
  c->is_closing = 1;             // Set is_closing before sending MG_EV_CALL
 8025a98:	687a      	ldr	r2, [r7, #4]
 8025a9a:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8025a9e:	f043 0320 	orr.w	r3, r3, #32
 8025aa2:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  mg_call(c, MG_EV_ERROR, buf);  // Let user handler override it
 8025aa6:	f107 0310 	add.w	r3, r7, #16
 8025aaa:	461a      	mov	r2, r3
 8025aac:	2100      	movs	r1, #0
 8025aae:	6878      	ldr	r0, [r7, #4]
 8025ab0:	f7ff ffae 	bl	8025a10 <mg_call>
}
 8025ab4:	bf00      	nop
 8025ab6:	3754      	adds	r7, #84	@ 0x54
 8025ab8:	46bd      	mov	sp, r7
 8025aba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8025abe:	b003      	add	sp, #12
 8025ac0:	4770      	bx	lr
 8025ac2:	bf00      	nop
 8025ac4:	20000298 	.word	0x20000298
 8025ac8:	08044578 	.word	0x08044578
 8025acc:	08041564 	.word	0x08041564
 8025ad0:	080416c0 	.word	0x080416c0

08025ad4 <is_digit>:
#endif




static bool is_digit(int c) {
 8025ad4:	b480      	push	{r7}
 8025ad6:	b083      	sub	sp, #12
 8025ad8:	af00      	add	r7, sp, #0
 8025ada:	6078      	str	r0, [r7, #4]
  return c >= '0' && c <= '9';
 8025adc:	687b      	ldr	r3, [r7, #4]
 8025ade:	2b2f      	cmp	r3, #47	@ 0x2f
 8025ae0:	dd04      	ble.n	8025aec <is_digit+0x18>
 8025ae2:	687b      	ldr	r3, [r7, #4]
 8025ae4:	2b39      	cmp	r3, #57	@ 0x39
 8025ae6:	dc01      	bgt.n	8025aec <is_digit+0x18>
 8025ae8:	2301      	movs	r3, #1
 8025aea:	e000      	b.n	8025aee <is_digit+0x1a>
 8025aec:	2300      	movs	r3, #0
 8025aee:	f003 0301 	and.w	r3, r3, #1
 8025af2:	b2db      	uxtb	r3, r3
}
 8025af4:	4618      	mov	r0, r3
 8025af6:	370c      	adds	r7, #12
 8025af8:	46bd      	mov	sp, r7
 8025afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025afe:	4770      	bx	lr

08025b00 <addexp>:

static int addexp(char *buf, int e, int sign) {
 8025b00:	b480      	push	{r7}
 8025b02:	b087      	sub	sp, #28
 8025b04:	af00      	add	r7, sp, #0
 8025b06:	60f8      	str	r0, [r7, #12]
 8025b08:	60b9      	str	r1, [r7, #8]
 8025b0a:	607a      	str	r2, [r7, #4]
  int n = 0;
 8025b0c:	2300      	movs	r3, #0
 8025b0e:	617b      	str	r3, [r7, #20]
  buf[n++] = 'e';
 8025b10:	697b      	ldr	r3, [r7, #20]
 8025b12:	1c5a      	adds	r2, r3, #1
 8025b14:	617a      	str	r2, [r7, #20]
 8025b16:	461a      	mov	r2, r3
 8025b18:	68fb      	ldr	r3, [r7, #12]
 8025b1a:	4413      	add	r3, r2
 8025b1c:	2265      	movs	r2, #101	@ 0x65
 8025b1e:	701a      	strb	r2, [r3, #0]
  buf[n++] = (char) sign;
 8025b20:	697b      	ldr	r3, [r7, #20]
 8025b22:	1c5a      	adds	r2, r3, #1
 8025b24:	617a      	str	r2, [r7, #20]
 8025b26:	461a      	mov	r2, r3
 8025b28:	68fb      	ldr	r3, [r7, #12]
 8025b2a:	4413      	add	r3, r2
 8025b2c:	687a      	ldr	r2, [r7, #4]
 8025b2e:	b2d2      	uxtb	r2, r2
 8025b30:	701a      	strb	r2, [r3, #0]
  if (e > 400) return 0;
 8025b32:	68bb      	ldr	r3, [r7, #8]
 8025b34:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8025b38:	dd01      	ble.n	8025b3e <addexp+0x3e>
 8025b3a:	2300      	movs	r3, #0
 8025b3c:	e057      	b.n	8025bee <addexp+0xee>
  if (e < 10) buf[n++] = '0';
 8025b3e:	68bb      	ldr	r3, [r7, #8]
 8025b40:	2b09      	cmp	r3, #9
 8025b42:	dc07      	bgt.n	8025b54 <addexp+0x54>
 8025b44:	697b      	ldr	r3, [r7, #20]
 8025b46:	1c5a      	adds	r2, r3, #1
 8025b48:	617a      	str	r2, [r7, #20]
 8025b4a:	461a      	mov	r2, r3
 8025b4c:	68fb      	ldr	r3, [r7, #12]
 8025b4e:	4413      	add	r3, r2
 8025b50:	2230      	movs	r2, #48	@ 0x30
 8025b52:	701a      	strb	r2, [r3, #0]
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
 8025b54:	68bb      	ldr	r3, [r7, #8]
 8025b56:	2b63      	cmp	r3, #99	@ 0x63
 8025b58:	dd1c      	ble.n	8025b94 <addexp+0x94>
 8025b5a:	68bb      	ldr	r3, [r7, #8]
 8025b5c:	4a27      	ldr	r2, [pc, #156]	@ (8025bfc <addexp+0xfc>)
 8025b5e:	fb82 1203 	smull	r1, r2, r2, r3
 8025b62:	1152      	asrs	r2, r2, #5
 8025b64:	17db      	asrs	r3, r3, #31
 8025b66:	1ad3      	subs	r3, r2, r3
 8025b68:	b2da      	uxtb	r2, r3
 8025b6a:	697b      	ldr	r3, [r7, #20]
 8025b6c:	1c59      	adds	r1, r3, #1
 8025b6e:	6179      	str	r1, [r7, #20]
 8025b70:	4619      	mov	r1, r3
 8025b72:	68fb      	ldr	r3, [r7, #12]
 8025b74:	440b      	add	r3, r1
 8025b76:	3230      	adds	r2, #48	@ 0x30
 8025b78:	b2d2      	uxtb	r2, r2
 8025b7a:	701a      	strb	r2, [r3, #0]
 8025b7c:	68bb      	ldr	r3, [r7, #8]
 8025b7e:	4a1f      	ldr	r2, [pc, #124]	@ (8025bfc <addexp+0xfc>)
 8025b80:	fb82 1203 	smull	r1, r2, r2, r3
 8025b84:	1151      	asrs	r1, r2, #5
 8025b86:	17da      	asrs	r2, r3, #31
 8025b88:	1a8a      	subs	r2, r1, r2
 8025b8a:	2164      	movs	r1, #100	@ 0x64
 8025b8c:	fb01 f202 	mul.w	r2, r1, r2
 8025b90:	1a9b      	subs	r3, r3, r2
 8025b92:	60bb      	str	r3, [r7, #8]
  if (e >= 10) buf[n++] = (char) (e / 10 + '0'), e -= 10 * (e / 10);
 8025b94:	68bb      	ldr	r3, [r7, #8]
 8025b96:	2b09      	cmp	r3, #9
 8025b98:	dd1d      	ble.n	8025bd6 <addexp+0xd6>
 8025b9a:	68bb      	ldr	r3, [r7, #8]
 8025b9c:	4a18      	ldr	r2, [pc, #96]	@ (8025c00 <addexp+0x100>)
 8025b9e:	fb82 1203 	smull	r1, r2, r2, r3
 8025ba2:	1092      	asrs	r2, r2, #2
 8025ba4:	17db      	asrs	r3, r3, #31
 8025ba6:	1ad3      	subs	r3, r2, r3
 8025ba8:	b2da      	uxtb	r2, r3
 8025baa:	697b      	ldr	r3, [r7, #20]
 8025bac:	1c59      	adds	r1, r3, #1
 8025bae:	6179      	str	r1, [r7, #20]
 8025bb0:	4619      	mov	r1, r3
 8025bb2:	68fb      	ldr	r3, [r7, #12]
 8025bb4:	440b      	add	r3, r1
 8025bb6:	3230      	adds	r2, #48	@ 0x30
 8025bb8:	b2d2      	uxtb	r2, r2
 8025bba:	701a      	strb	r2, [r3, #0]
 8025bbc:	68ba      	ldr	r2, [r7, #8]
 8025bbe:	4b10      	ldr	r3, [pc, #64]	@ (8025c00 <addexp+0x100>)
 8025bc0:	fb83 1302 	smull	r1, r3, r3, r2
 8025bc4:	1099      	asrs	r1, r3, #2
 8025bc6:	17d3      	asrs	r3, r2, #31
 8025bc8:	1ac9      	subs	r1, r1, r3
 8025bca:	460b      	mov	r3, r1
 8025bcc:	009b      	lsls	r3, r3, #2
 8025bce:	440b      	add	r3, r1
 8025bd0:	005b      	lsls	r3, r3, #1
 8025bd2:	1ad3      	subs	r3, r2, r3
 8025bd4:	60bb      	str	r3, [r7, #8]
  buf[n++] = (char) (e + '0');
 8025bd6:	68bb      	ldr	r3, [r7, #8]
 8025bd8:	b2da      	uxtb	r2, r3
 8025bda:	697b      	ldr	r3, [r7, #20]
 8025bdc:	1c59      	adds	r1, r3, #1
 8025bde:	6179      	str	r1, [r7, #20]
 8025be0:	4619      	mov	r1, r3
 8025be2:	68fb      	ldr	r3, [r7, #12]
 8025be4:	440b      	add	r3, r1
 8025be6:	3230      	adds	r2, #48	@ 0x30
 8025be8:	b2d2      	uxtb	r2, r2
 8025bea:	701a      	strb	r2, [r3, #0]
  return n;
 8025bec:	697b      	ldr	r3, [r7, #20]
}
 8025bee:	4618      	mov	r0, r3
 8025bf0:	371c      	adds	r7, #28
 8025bf2:	46bd      	mov	sp, r7
 8025bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025bf8:	4770      	bx	lr
 8025bfa:	bf00      	nop
 8025bfc:	51eb851f 	.word	0x51eb851f
 8025c00:	66666667 	.word	0x66666667

08025c04 <xisinf>:

static int xisinf(double x) {
 8025c04:	b480      	push	{r7}
 8025c06:	b085      	sub	sp, #20
 8025c08:	af00      	add	r7, sp, #0
 8025c0a:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 8025c0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8025c12:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 8025c16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8025c1a:	f04f 0200 	mov.w	r2, #0
 8025c1e:	f04f 0300 	mov.w	r3, #0
 8025c22:	000a      	movs	r2, r1
 8025c24:	2300      	movs	r3, #0
 8025c26:	4613      	mov	r3, r2
 8025c28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8025c2c:	4a08      	ldr	r2, [pc, #32]	@ (8025c50 <xisinf+0x4c>)
 8025c2e:	4293      	cmp	r3, r2
 8025c30:	d106      	bne.n	8025c40 <xisinf+0x3c>
         ((unsigned) ieee754.u == 0);
 8025c32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8025c36:	4613      	mov	r3, r2
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 8025c38:	2b00      	cmp	r3, #0
 8025c3a:	d101      	bne.n	8025c40 <xisinf+0x3c>
 8025c3c:	2301      	movs	r3, #1
 8025c3e:	e000      	b.n	8025c42 <xisinf+0x3e>
 8025c40:	2300      	movs	r3, #0
}
 8025c42:	4618      	mov	r0, r3
 8025c44:	3714      	adds	r7, #20
 8025c46:	46bd      	mov	sp, r7
 8025c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025c4c:	4770      	bx	lr
 8025c4e:	bf00      	nop
 8025c50:	7ff00000 	.word	0x7ff00000

08025c54 <xisnan>:

static int xisnan(double x) {
 8025c54:	b480      	push	{r7}
 8025c56:	b085      	sub	sp, #20
 8025c58:	af00      	add	r7, sp, #0
 8025c5a:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 8025c5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8025c62:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 8025c66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8025c6a:	f04f 0200 	mov.w	r2, #0
 8025c6e:	f04f 0300 	mov.w	r3, #0
 8025c72:	000a      	movs	r2, r1
 8025c74:	2300      	movs	r3, #0
 8025c76:	4613      	mov	r3, r2
 8025c78:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
             ((unsigned) ieee754.u != 0) >
 8025c7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8025c80:	4613      	mov	r3, r2
 8025c82:	2b00      	cmp	r3, #0
 8025c84:	bf14      	ite	ne
 8025c86:	2301      	movne	r3, #1
 8025c88:	2300      	moveq	r3, #0
 8025c8a:	b2db      	uxtb	r3, r3
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 8025c8c:	440b      	add	r3, r1
             ((unsigned) ieee754.u != 0) >
 8025c8e:	4a06      	ldr	r2, [pc, #24]	@ (8025ca8 <xisnan+0x54>)
 8025c90:	4293      	cmp	r3, r2
 8025c92:	bf8c      	ite	hi
 8025c94:	2301      	movhi	r3, #1
 8025c96:	2300      	movls	r3, #0
 8025c98:	b2db      	uxtb	r3, r3
         0x7ff00000;
}
 8025c9a:	4618      	mov	r0, r3
 8025c9c:	3714      	adds	r7, #20
 8025c9e:	46bd      	mov	sp, r7
 8025ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025ca4:	4770      	bx	lr
 8025ca6:	bf00      	nop
 8025ca8:	7ff00000 	.word	0x7ff00000
 8025cac:	00000000 	.word	0x00000000

08025cb0 <mg_dtoa>:

static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {
 8025cb0:	b5b0      	push	{r4, r5, r7, lr}
 8025cb2:	b09e      	sub	sp, #120	@ 0x78
 8025cb4:	af02      	add	r7, sp, #8
 8025cb6:	6178      	str	r0, [r7, #20]
 8025cb8:	6139      	str	r1, [r7, #16]
 8025cba:	ed87 0b02 	vstr	d0, [r7, #8]
 8025cbe:	607a      	str	r2, [r7, #4]
 8025cc0:	70fb      	strb	r3, [r7, #3]
  char buf[40];
  int i, s = 0, n = 0, e = 0;
 8025cc2:	2300      	movs	r3, #0
 8025cc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8025cc6:	2300      	movs	r3, #0
 8025cc8:	667b      	str	r3, [r7, #100]	@ 0x64
 8025cca:	2300      	movs	r3, #0
 8025ccc:	663b      	str	r3, [r7, #96]	@ 0x60
  double t, mul, saved;
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 8025cce:	f04f 0200 	mov.w	r2, #0
 8025cd2:	f04f 0300 	mov.w	r3, #0
 8025cd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8025cda:	f7ea ff0d 	bl	8010af8 <__aeabi_dcmpeq>
 8025cde:	4603      	mov	r3, r0
 8025ce0:	2b00      	cmp	r3, #0
 8025ce2:	d007      	beq.n	8025cf4 <mg_dtoa+0x44>
 8025ce4:	4b7f      	ldr	r3, [pc, #508]	@ (8025ee4 <mg_dtoa+0x234>)
 8025ce6:	4a80      	ldr	r2, [pc, #512]	@ (8025ee8 <mg_dtoa+0x238>)
 8025ce8:	6939      	ldr	r1, [r7, #16]
 8025cea:	6978      	ldr	r0, [r7, #20]
 8025cec:	f00b fa92 	bl	8031214 <mg_snprintf>
 8025cf0:	4603      	mov	r3, r0
 8025cf2:	e2c9      	b.n	8026288 <mg_dtoa+0x5d8>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 8025cf4:	ed97 0b02 	vldr	d0, [r7, #8]
 8025cf8:	f7ff ff84 	bl	8025c04 <xisinf>
 8025cfc:	4603      	mov	r3, r0
 8025cfe:	2b00      	cmp	r3, #0
 8025d00:	d014      	beq.n	8025d2c <mg_dtoa+0x7c>
 8025d02:	f04f 0200 	mov.w	r2, #0
 8025d06:	f04f 0300 	mov.w	r3, #0
 8025d0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8025d0e:	f7ea ff1b 	bl	8010b48 <__aeabi_dcmpgt>
 8025d12:	4603      	mov	r3, r0
 8025d14:	2b00      	cmp	r3, #0
 8025d16:	d001      	beq.n	8025d1c <mg_dtoa+0x6c>
 8025d18:	4b74      	ldr	r3, [pc, #464]	@ (8025eec <mg_dtoa+0x23c>)
 8025d1a:	e000      	b.n	8025d1e <mg_dtoa+0x6e>
 8025d1c:	4b74      	ldr	r3, [pc, #464]	@ (8025ef0 <mg_dtoa+0x240>)
 8025d1e:	4a72      	ldr	r2, [pc, #456]	@ (8025ee8 <mg_dtoa+0x238>)
 8025d20:	6939      	ldr	r1, [r7, #16]
 8025d22:	6978      	ldr	r0, [r7, #20]
 8025d24:	f00b fa76 	bl	8031214 <mg_snprintf>
 8025d28:	4603      	mov	r3, r0
 8025d2a:	e2ad      	b.n	8026288 <mg_dtoa+0x5d8>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 8025d2c:	ed97 0b02 	vldr	d0, [r7, #8]
 8025d30:	f7ff ff90 	bl	8025c54 <xisnan>
 8025d34:	4603      	mov	r3, r0
 8025d36:	2b00      	cmp	r3, #0
 8025d38:	d007      	beq.n	8025d4a <mg_dtoa+0x9a>
 8025d3a:	4b6e      	ldr	r3, [pc, #440]	@ (8025ef4 <mg_dtoa+0x244>)
 8025d3c:	4a6a      	ldr	r2, [pc, #424]	@ (8025ee8 <mg_dtoa+0x238>)
 8025d3e:	6939      	ldr	r1, [r7, #16]
 8025d40:	6978      	ldr	r0, [r7, #20]
 8025d42:	f00b fa67 	bl	8031214 <mg_snprintf>
 8025d46:	4603      	mov	r3, r0
 8025d48:	e29e      	b.n	8026288 <mg_dtoa+0x5d8>
  if (d < 0.0) d = -d, buf[s++] = '-';
 8025d4a:	f04f 0200 	mov.w	r2, #0
 8025d4e:	f04f 0300 	mov.w	r3, #0
 8025d52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8025d56:	f7ea fed9 	bl	8010b0c <__aeabi_dcmplt>
 8025d5a:	4603      	mov	r3, r0
 8025d5c:	2b00      	cmp	r3, #0
 8025d5e:	d00d      	beq.n	8025d7c <mg_dtoa+0xcc>
 8025d60:	68bc      	ldr	r4, [r7, #8]
 8025d62:	68fb      	ldr	r3, [r7, #12]
 8025d64:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8025d68:	e9c7 4502 	strd	r4, r5, [r7, #8]
 8025d6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8025d6e:	1c5a      	adds	r2, r3, #1
 8025d70:	66ba      	str	r2, [r7, #104]	@ 0x68
 8025d72:	3370      	adds	r3, #112	@ 0x70
 8025d74:	443b      	add	r3, r7
 8025d76:	222d      	movs	r2, #45	@ 0x2d
 8025d78:	f803 2c58 	strb.w	r2, [r3, #-88]

  // Round
  saved = d;
 8025d7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8025d80:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  mul = 1.0;
 8025d84:	f04f 0200 	mov.w	r2, #0
 8025d88:	4b5b      	ldr	r3, [pc, #364]	@ (8025ef8 <mg_dtoa+0x248>)
 8025d8a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 8025d8e:	e00a      	b.n	8025da6 <mg_dtoa+0xf6>
 8025d90:	f04f 0200 	mov.w	r2, #0
 8025d94:	4b59      	ldr	r3, [pc, #356]	@ (8025efc <mg_dtoa+0x24c>)
 8025d96:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8025d9a:	f7ea fc45 	bl	8010628 <__aeabi_dmul>
 8025d9e:	4602      	mov	r2, r0
 8025da0:	460b      	mov	r3, r1
 8025da2:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8025da6:	f04f 0200 	mov.w	r2, #0
 8025daa:	4b54      	ldr	r3, [pc, #336]	@ (8025efc <mg_dtoa+0x24c>)
 8025dac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8025db0:	f7ea fec0 	bl	8010b34 <__aeabi_dcmpge>
 8025db4:	4603      	mov	r3, r0
 8025db6:	2b00      	cmp	r3, #0
 8025db8:	d011      	beq.n	8025dde <mg_dtoa+0x12e>
 8025dba:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8025dbe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8025dc2:	f7ea fd5b 	bl	801087c <__aeabi_ddiv>
 8025dc6:	4602      	mov	r2, r0
 8025dc8:	460b      	mov	r3, r1
 8025dca:	4610      	mov	r0, r2
 8025dcc:	4619      	mov	r1, r3
 8025dce:	f04f 0200 	mov.w	r2, #0
 8025dd2:	4b4a      	ldr	r3, [pc, #296]	@ (8025efc <mg_dtoa+0x24c>)
 8025dd4:	f7ea feae 	bl	8010b34 <__aeabi_dcmpge>
 8025dd8:	4603      	mov	r3, r0
 8025dda:	2b00      	cmp	r3, #0
 8025ddc:	d1d8      	bne.n	8025d90 <mg_dtoa+0xe0>
  while (d <= 1.0 && d / mul <= 1.0) mul /= 10.0;
 8025dde:	e00a      	b.n	8025df6 <mg_dtoa+0x146>
 8025de0:	f04f 0200 	mov.w	r2, #0
 8025de4:	4b45      	ldr	r3, [pc, #276]	@ (8025efc <mg_dtoa+0x24c>)
 8025de6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8025dea:	f7ea fd47 	bl	801087c <__aeabi_ddiv>
 8025dee:	4602      	mov	r2, r0
 8025df0:	460b      	mov	r3, r1
 8025df2:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8025df6:	f04f 0200 	mov.w	r2, #0
 8025dfa:	4b3f      	ldr	r3, [pc, #252]	@ (8025ef8 <mg_dtoa+0x248>)
 8025dfc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8025e00:	f7ea fe8e 	bl	8010b20 <__aeabi_dcmple>
 8025e04:	4603      	mov	r3, r0
 8025e06:	2b00      	cmp	r3, #0
 8025e08:	d011      	beq.n	8025e2e <mg_dtoa+0x17e>
 8025e0a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8025e0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8025e12:	f7ea fd33 	bl	801087c <__aeabi_ddiv>
 8025e16:	4602      	mov	r2, r0
 8025e18:	460b      	mov	r3, r1
 8025e1a:	4610      	mov	r0, r2
 8025e1c:	4619      	mov	r1, r3
 8025e1e:	f04f 0200 	mov.w	r2, #0
 8025e22:	4b35      	ldr	r3, [pc, #212]	@ (8025ef8 <mg_dtoa+0x248>)
 8025e24:	f7ea fe7c 	bl	8010b20 <__aeabi_dcmple>
 8025e28:	4603      	mov	r3, r0
 8025e2a:	2b00      	cmp	r3, #0
 8025e2c:	d1d8      	bne.n	8025de0 <mg_dtoa+0x130>
  for (i = 0, t = mul * 5; i < width; i++) t /= 10.0;
 8025e2e:	2300      	movs	r3, #0
 8025e30:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8025e32:	f04f 0200 	mov.w	r2, #0
 8025e36:	4b32      	ldr	r3, [pc, #200]	@ (8025f00 <mg_dtoa+0x250>)
 8025e38:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8025e3c:	f7ea fbf4 	bl	8010628 <__aeabi_dmul>
 8025e40:	4602      	mov	r2, r0
 8025e42:	460b      	mov	r3, r1
 8025e44:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8025e48:	e00d      	b.n	8025e66 <mg_dtoa+0x1b6>
 8025e4a:	f04f 0200 	mov.w	r2, #0
 8025e4e:	4b2b      	ldr	r3, [pc, #172]	@ (8025efc <mg_dtoa+0x24c>)
 8025e50:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8025e54:	f7ea fd12 	bl	801087c <__aeabi_ddiv>
 8025e58:	4602      	mov	r2, r0
 8025e5a:	460b      	mov	r3, r1
 8025e5c:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8025e60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8025e62:	3301      	adds	r3, #1
 8025e64:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8025e66:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8025e68:	687b      	ldr	r3, [r7, #4]
 8025e6a:	429a      	cmp	r2, r3
 8025e6c:	dbed      	blt.n	8025e4a <mg_dtoa+0x19a>
  d += t;
 8025e6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8025e72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8025e76:	f7ea fa21 	bl	80102bc <__adddf3>
 8025e7a:	4602      	mov	r2, r0
 8025e7c:	460b      	mov	r3, r1
 8025e7e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  // Calculate exponent, and 'mul' for scientific representation
  mul = 1.0;
 8025e82:	f04f 0200 	mov.w	r2, #0
 8025e86:	4b1c      	ldr	r3, [pc, #112]	@ (8025ef8 <mg_dtoa+0x248>)
 8025e88:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0, e++;
 8025e8c:	e00d      	b.n	8025eaa <mg_dtoa+0x1fa>
 8025e8e:	f04f 0200 	mov.w	r2, #0
 8025e92:	4b1a      	ldr	r3, [pc, #104]	@ (8025efc <mg_dtoa+0x24c>)
 8025e94:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8025e98:	f7ea fbc6 	bl	8010628 <__aeabi_dmul>
 8025e9c:	4602      	mov	r2, r0
 8025e9e:	460b      	mov	r3, r1
 8025ea0:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8025ea4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8025ea6:	3301      	adds	r3, #1
 8025ea8:	663b      	str	r3, [r7, #96]	@ 0x60
 8025eaa:	f04f 0200 	mov.w	r2, #0
 8025eae:	4b13      	ldr	r3, [pc, #76]	@ (8025efc <mg_dtoa+0x24c>)
 8025eb0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8025eb4:	f7ea fe3e 	bl	8010b34 <__aeabi_dcmpge>
 8025eb8:	4603      	mov	r3, r0
 8025eba:	2b00      	cmp	r3, #0
 8025ebc:	d011      	beq.n	8025ee2 <mg_dtoa+0x232>
 8025ebe:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8025ec2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8025ec6:	f7ea fcd9 	bl	801087c <__aeabi_ddiv>
 8025eca:	4602      	mov	r2, r0
 8025ecc:	460b      	mov	r3, r1
 8025ece:	4610      	mov	r0, r2
 8025ed0:	4619      	mov	r1, r3
 8025ed2:	f04f 0200 	mov.w	r2, #0
 8025ed6:	4b09      	ldr	r3, [pc, #36]	@ (8025efc <mg_dtoa+0x24c>)
 8025ed8:	f7ea fe2c 	bl	8010b34 <__aeabi_dcmpge>
 8025edc:	4603      	mov	r3, r0
 8025ede:	2b00      	cmp	r3, #0
 8025ee0:	d1d5      	bne.n	8025e8e <mg_dtoa+0x1de>
  while (d < 1.0 && d / mul < 1.0) mul /= 10.0, e--;
 8025ee2:	e01d      	b.n	8025f20 <mg_dtoa+0x270>
 8025ee4:	080416cc 	.word	0x080416cc
 8025ee8:	080416d0 	.word	0x080416d0
 8025eec:	080416d4 	.word	0x080416d4
 8025ef0:	080416d8 	.word	0x080416d8
 8025ef4:	080416e0 	.word	0x080416e0
 8025ef8:	3ff00000 	.word	0x3ff00000
 8025efc:	40240000 	.word	0x40240000
 8025f00:	40140000 	.word	0x40140000
 8025f04:	f04f 0200 	mov.w	r2, #0
 8025f08:	4b9d      	ldr	r3, [pc, #628]	@ (8026180 <mg_dtoa+0x4d0>)
 8025f0a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8025f0e:	f7ea fcb5 	bl	801087c <__aeabi_ddiv>
 8025f12:	4602      	mov	r2, r0
 8025f14:	460b      	mov	r3, r1
 8025f16:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8025f1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8025f1c:	3b01      	subs	r3, #1
 8025f1e:	663b      	str	r3, [r7, #96]	@ 0x60
 8025f20:	f04f 0200 	mov.w	r2, #0
 8025f24:	4b97      	ldr	r3, [pc, #604]	@ (8026184 <mg_dtoa+0x4d4>)
 8025f26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8025f2a:	f7ea fdef 	bl	8010b0c <__aeabi_dcmplt>
 8025f2e:	4603      	mov	r3, r0
 8025f30:	2b00      	cmp	r3, #0
 8025f32:	d011      	beq.n	8025f58 <mg_dtoa+0x2a8>
 8025f34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8025f38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8025f3c:	f7ea fc9e 	bl	801087c <__aeabi_ddiv>
 8025f40:	4602      	mov	r2, r0
 8025f42:	460b      	mov	r3, r1
 8025f44:	4610      	mov	r0, r2
 8025f46:	4619      	mov	r1, r3
 8025f48:	f04f 0200 	mov.w	r2, #0
 8025f4c:	4b8d      	ldr	r3, [pc, #564]	@ (8026184 <mg_dtoa+0x4d4>)
 8025f4e:	f7ea fddd 	bl	8010b0c <__aeabi_dcmplt>
 8025f52:	4603      	mov	r3, r0
 8025f54:	2b00      	cmp	r3, #0
 8025f56:	d1d5      	bne.n	8025f04 <mg_dtoa+0x254>
  // printf(" --> %g %d %g %g\n", saved, e, t, mul);

  if (e >= width && width > 1) {
 8025f58:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8025f5a:	687b      	ldr	r3, [r7, #4]
 8025f5c:	429a      	cmp	r2, r3
 8025f5e:	db33      	blt.n	8025fc8 <mg_dtoa+0x318>
 8025f60:	687b      	ldr	r3, [r7, #4]
 8025f62:	2b01      	cmp	r3, #1
 8025f64:	dd30      	ble.n	8025fc8 <mg_dtoa+0x318>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8025f66:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8025f6a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8025f6e:	f7ea fc85 	bl	801087c <__aeabi_ddiv>
 8025f72:	4602      	mov	r2, r0
 8025f74:	460b      	mov	r3, r1
 8025f76:	ec43 2b17 	vmov	d7, r2, r3
 8025f7a:	78fb      	ldrb	r3, [r7, #3]
 8025f7c:	f107 0018 	add.w	r0, r7, #24
 8025f80:	687a      	ldr	r2, [r7, #4]
 8025f82:	eeb0 0a47 	vmov.f32	s0, s14
 8025f86:	eef0 0a67 	vmov.f32	s1, s15
 8025f8a:	2128      	movs	r1, #40	@ 0x28
 8025f8c:	f7ff fe90 	bl	8025cb0 <mg_dtoa>
 8025f90:	4603      	mov	r3, r0
 8025f92:	667b      	str	r3, [r7, #100]	@ 0x64
    // printf(" --> %.*g %d [%.*s]\n", 10, d / t, e, n, buf);
    n += addexp(buf + s + n, e, '+');
 8025f94:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8025f96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8025f98:	4413      	add	r3, r2
 8025f9a:	f107 0218 	add.w	r2, r7, #24
 8025f9e:	4413      	add	r3, r2
 8025fa0:	222b      	movs	r2, #43	@ 0x2b
 8025fa2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8025fa4:	4618      	mov	r0, r3
 8025fa6:	f7ff fdab 	bl	8025b00 <addexp>
 8025faa:	4602      	mov	r2, r0
 8025fac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8025fae:	4413      	add	r3, r2
 8025fb0:	667b      	str	r3, [r7, #100]	@ 0x64
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8025fb2:	f107 0318 	add.w	r3, r7, #24
 8025fb6:	9300      	str	r3, [sp, #0]
 8025fb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8025fba:	4a73      	ldr	r2, [pc, #460]	@ (8026188 <mg_dtoa+0x4d8>)
 8025fbc:	6939      	ldr	r1, [r7, #16]
 8025fbe:	6978      	ldr	r0, [r7, #20]
 8025fc0:	f00b f928 	bl	8031214 <mg_snprintf>
 8025fc4:	4603      	mov	r3, r0
 8025fc6:	e15f      	b.n	8026288 <mg_dtoa+0x5d8>
  } else if (e <= -width && width > 1) {
 8025fc8:	687b      	ldr	r3, [r7, #4]
 8025fca:	425b      	negs	r3, r3
 8025fcc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8025fce:	429a      	cmp	r2, r3
 8025fd0:	dc34      	bgt.n	802603c <mg_dtoa+0x38c>
 8025fd2:	687b      	ldr	r3, [r7, #4]
 8025fd4:	2b01      	cmp	r3, #1
 8025fd6:	dd31      	ble.n	802603c <mg_dtoa+0x38c>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8025fd8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8025fdc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8025fe0:	f7ea fc4c 	bl	801087c <__aeabi_ddiv>
 8025fe4:	4602      	mov	r2, r0
 8025fe6:	460b      	mov	r3, r1
 8025fe8:	ec43 2b17 	vmov	d7, r2, r3
 8025fec:	78fb      	ldrb	r3, [r7, #3]
 8025fee:	f107 0018 	add.w	r0, r7, #24
 8025ff2:	687a      	ldr	r2, [r7, #4]
 8025ff4:	eeb0 0a47 	vmov.f32	s0, s14
 8025ff8:	eef0 0a67 	vmov.f32	s1, s15
 8025ffc:	2128      	movs	r1, #40	@ 0x28
 8025ffe:	f7ff fe57 	bl	8025cb0 <mg_dtoa>
 8026002:	4603      	mov	r3, r0
 8026004:	667b      	str	r3, [r7, #100]	@ 0x64
    // printf(" --> %.*g %d [%.*s]\n", 10, d / mul, e, n, buf);
    n += addexp(buf + s + n, -e, '-');
 8026006:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8026008:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802600a:	4413      	add	r3, r2
 802600c:	f107 0218 	add.w	r2, r7, #24
 8026010:	18d0      	adds	r0, r2, r3
 8026012:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8026014:	425b      	negs	r3, r3
 8026016:	222d      	movs	r2, #45	@ 0x2d
 8026018:	4619      	mov	r1, r3
 802601a:	f7ff fd71 	bl	8025b00 <addexp>
 802601e:	4602      	mov	r2, r0
 8026020:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8026022:	4413      	add	r3, r2
 8026024:	667b      	str	r3, [r7, #100]	@ 0x64
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8026026:	f107 0318 	add.w	r3, r7, #24
 802602a:	9300      	str	r3, [sp, #0]
 802602c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802602e:	4a56      	ldr	r2, [pc, #344]	@ (8026188 <mg_dtoa+0x4d8>)
 8026030:	6939      	ldr	r1, [r7, #16]
 8026032:	6978      	ldr	r0, [r7, #20]
 8026034:	f00b f8ee 	bl	8031214 <mg_snprintf>
 8026038:	4603      	mov	r3, r0
 802603a:	e125      	b.n	8026288 <mg_dtoa+0x5d8>
  } else {
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 802603c:	2300      	movs	r3, #0
 802603e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8026040:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8026044:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8026048:	e03f      	b.n	80260ca <mg_dtoa+0x41a>
      int ch = (int) (d / t);
 802604a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 802604e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8026052:	f7ea fc13 	bl	801087c <__aeabi_ddiv>
 8026056:	4602      	mov	r2, r0
 8026058:	460b      	mov	r3, r1
 802605a:	4610      	mov	r0, r2
 802605c:	4619      	mov	r1, r3
 802605e:	f7ea fd93 	bl	8010b88 <__aeabi_d2iz>
 8026062:	4603      	mov	r3, r0
 8026064:	647b      	str	r3, [r7, #68]	@ 0x44
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 8026066:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8026068:	2b00      	cmp	r3, #0
 802606a:	dc02      	bgt.n	8026072 <mg_dtoa+0x3c2>
 802606c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802606e:	2b00      	cmp	r3, #0
 8026070:	dd0c      	ble.n	802608c <mg_dtoa+0x3dc>
 8026072:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8026074:	b2da      	uxtb	r2, r3
 8026076:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8026078:	1c59      	adds	r1, r3, #1
 802607a:	6679      	str	r1, [r7, #100]	@ 0x64
 802607c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 802607e:	440b      	add	r3, r1
 8026080:	3230      	adds	r2, #48	@ 0x30
 8026082:	b2d2      	uxtb	r2, r2
 8026084:	3370      	adds	r3, #112	@ 0x70
 8026086:	443b      	add	r3, r7
 8026088:	f803 2c58 	strb.w	r2, [r3, #-88]
      d -= ch * t;
 802608c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 802608e:	f7ea fa61 	bl	8010554 <__aeabi_i2d>
 8026092:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8026096:	f7ea fac7 	bl	8010628 <__aeabi_dmul>
 802609a:	4602      	mov	r2, r0
 802609c:	460b      	mov	r3, r1
 802609e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80260a2:	f7ea f909 	bl	80102b8 <__aeabi_dsub>
 80260a6:	4602      	mov	r2, r0
 80260a8:	460b      	mov	r3, r1
 80260aa:	e9c7 2302 	strd	r2, r3, [r7, #8]
      t /= 10.0;
 80260ae:	f04f 0200 	mov.w	r2, #0
 80260b2:	4b33      	ldr	r3, [pc, #204]	@ (8026180 <mg_dtoa+0x4d0>)
 80260b4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80260b8:	f7ea fbe0 	bl	801087c <__aeabi_ddiv>
 80260bc:	4602      	mov	r2, r0
 80260be:	460b      	mov	r3, r1
 80260c0:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 80260c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80260c6:	3301      	adds	r3, #1
 80260c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80260ca:	f04f 0200 	mov.w	r2, #0
 80260ce:	4b2d      	ldr	r3, [pc, #180]	@ (8026184 <mg_dtoa+0x4d4>)
 80260d0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80260d4:	f7ea fd2e 	bl	8010b34 <__aeabi_dcmpge>
 80260d8:	4603      	mov	r3, r0
 80260da:	2b00      	cmp	r3, #0
 80260dc:	d004      	beq.n	80260e8 <mg_dtoa+0x438>
 80260de:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80260e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80260e2:	4413      	add	r3, r2
 80260e4:	2b27      	cmp	r3, #39	@ 0x27
 80260e6:	ddb0      	ble.n	802604a <mg_dtoa+0x39a>
    }
    // printf(" --> [%g] -> %g %g (%d) [%.*s]\n", saved, d, t, n, s + n, buf);
    if (n == 0) buf[s++] = '0';
 80260e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80260ea:	2b00      	cmp	r3, #0
 80260ec:	d11b      	bne.n	8026126 <mg_dtoa+0x476>
 80260ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80260f0:	1c5a      	adds	r2, r3, #1
 80260f2:	66ba      	str	r2, [r7, #104]	@ 0x68
 80260f4:	3370      	adds	r3, #112	@ 0x70
 80260f6:	443b      	add	r3, r7
 80260f8:	2230      	movs	r2, #48	@ 0x30
 80260fa:	f803 2c58 	strb.w	r2, [r3, #-88]
    while (t >= 1.0 && n + s < (int) sizeof(buf)) buf[n++] = '0', t /= 10.0;
 80260fe:	e012      	b.n	8026126 <mg_dtoa+0x476>
 8026100:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8026102:	1c5a      	adds	r2, r3, #1
 8026104:	667a      	str	r2, [r7, #100]	@ 0x64
 8026106:	3370      	adds	r3, #112	@ 0x70
 8026108:	443b      	add	r3, r7
 802610a:	2230      	movs	r2, #48	@ 0x30
 802610c:	f803 2c58 	strb.w	r2, [r3, #-88]
 8026110:	f04f 0200 	mov.w	r2, #0
 8026114:	4b1a      	ldr	r3, [pc, #104]	@ (8026180 <mg_dtoa+0x4d0>)
 8026116:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 802611a:	f7ea fbaf 	bl	801087c <__aeabi_ddiv>
 802611e:	4602      	mov	r2, r0
 8026120:	460b      	mov	r3, r1
 8026122:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8026126:	f04f 0200 	mov.w	r2, #0
 802612a:	4b16      	ldr	r3, [pc, #88]	@ (8026184 <mg_dtoa+0x4d4>)
 802612c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8026130:	f7ea fd00 	bl	8010b34 <__aeabi_dcmpge>
 8026134:	4603      	mov	r3, r0
 8026136:	2b00      	cmp	r3, #0
 8026138:	d004      	beq.n	8026144 <mg_dtoa+0x494>
 802613a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 802613c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 802613e:	4413      	add	r3, r2
 8026140:	2b27      	cmp	r3, #39	@ 0x27
 8026142:	dddd      	ble.n	8026100 <mg_dtoa+0x450>
    if (s + n < (int) sizeof(buf)) buf[n + s++] = '.';
 8026144:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8026146:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8026148:	4413      	add	r3, r2
 802614a:	2b27      	cmp	r3, #39	@ 0x27
 802614c:	dc09      	bgt.n	8026162 <mg_dtoa+0x4b2>
 802614e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8026150:	1c5a      	adds	r2, r3, #1
 8026152:	66ba      	str	r2, [r7, #104]	@ 0x68
 8026154:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8026156:	4413      	add	r3, r2
 8026158:	3370      	adds	r3, #112	@ 0x70
 802615a:	443b      	add	r3, r7
 802615c:	222e      	movs	r2, #46	@ 0x2e
 802615e:	f803 2c58 	strb.w	r2, [r3, #-88]
    // printf(" 1--> [%g] -> [%.*s]\n", saved, s + n, buf);
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 8026162:	2300      	movs	r3, #0
 8026164:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8026166:	a304      	add	r3, pc, #16	@ (adr r3, 8026178 <mg_dtoa+0x4c8>)
 8026168:	e9d3 2300 	ldrd	r2, r3, [r3]
 802616c:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8026170:	e046      	b.n	8026200 <mg_dtoa+0x550>
 8026172:	bf00      	nop
 8026174:	f3af 8000 	nop.w
 8026178:	9999999a 	.word	0x9999999a
 802617c:	3fb99999 	.word	0x3fb99999
 8026180:	40240000 	.word	0x40240000
 8026184:	3ff00000 	.word	0x3ff00000
 8026188:	080416e4 	.word	0x080416e4
      int ch = (int) (d / t);
 802618c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8026190:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8026194:	f7ea fb72 	bl	801087c <__aeabi_ddiv>
 8026198:	4602      	mov	r2, r0
 802619a:	460b      	mov	r3, r1
 802619c:	4610      	mov	r0, r2
 802619e:	4619      	mov	r1, r3
 80261a0:	f7ea fcf2 	bl	8010b88 <__aeabi_d2iz>
 80261a4:	4603      	mov	r3, r0
 80261a6:	643b      	str	r3, [r7, #64]	@ 0x40
      buf[s + n++] = (char) (ch + '0');
 80261a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80261aa:	b2da      	uxtb	r2, r3
 80261ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80261ae:	1c59      	adds	r1, r3, #1
 80261b0:	6679      	str	r1, [r7, #100]	@ 0x64
 80261b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80261b4:	440b      	add	r3, r1
 80261b6:	3230      	adds	r2, #48	@ 0x30
 80261b8:	b2d2      	uxtb	r2, r2
 80261ba:	3370      	adds	r3, #112	@ 0x70
 80261bc:	443b      	add	r3, r7
 80261be:	f803 2c58 	strb.w	r2, [r3, #-88]
      d -= ch * t;
 80261c2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80261c4:	f7ea f9c6 	bl	8010554 <__aeabi_i2d>
 80261c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80261cc:	f7ea fa2c 	bl	8010628 <__aeabi_dmul>
 80261d0:	4602      	mov	r2, r0
 80261d2:	460b      	mov	r3, r1
 80261d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80261d8:	f7ea f86e 	bl	80102b8 <__aeabi_dsub>
 80261dc:	4602      	mov	r2, r0
 80261de:	460b      	mov	r3, r1
 80261e0:	e9c7 2302 	strd	r2, r3, [r7, #8]
      t /= 10.0;
 80261e4:	f04f 0200 	mov.w	r2, #0
 80261e8:	4b29      	ldr	r3, [pc, #164]	@ (8026290 <mg_dtoa+0x5e0>)
 80261ea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80261ee:	f7ea fb45 	bl	801087c <__aeabi_ddiv>
 80261f2:	4602      	mov	r2, r0
 80261f4:	460b      	mov	r3, r1
 80261f6:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 80261fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80261fc:	3301      	adds	r3, #1
 80261fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8026200:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8026202:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8026204:	4413      	add	r3, r2
 8026206:	2b27      	cmp	r3, #39	@ 0x27
 8026208:	dc07      	bgt.n	802621a <mg_dtoa+0x56a>
 802620a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 802620c:	687b      	ldr	r3, [r7, #4]
 802620e:	429a      	cmp	r2, r3
 8026210:	dbbc      	blt.n	802618c <mg_dtoa+0x4dc>
    }
  }
  while (tz && n > 0 && buf[s + n - 1] == '0') n--;  // Trim trailing zeroes
 8026212:	e002      	b.n	802621a <mg_dtoa+0x56a>
 8026214:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8026216:	3b01      	subs	r3, #1
 8026218:	667b      	str	r3, [r7, #100]	@ 0x64
 802621a:	78fb      	ldrb	r3, [r7, #3]
 802621c:	2b00      	cmp	r3, #0
 802621e:	d00c      	beq.n	802623a <mg_dtoa+0x58a>
 8026220:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8026222:	2b00      	cmp	r3, #0
 8026224:	dd09      	ble.n	802623a <mg_dtoa+0x58a>
 8026226:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8026228:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802622a:	4413      	add	r3, r2
 802622c:	3b01      	subs	r3, #1
 802622e:	3370      	adds	r3, #112	@ 0x70
 8026230:	443b      	add	r3, r7
 8026232:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8026236:	2b30      	cmp	r3, #48	@ 0x30
 8026238:	d0ec      	beq.n	8026214 <mg_dtoa+0x564>
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 802623a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802623c:	2b00      	cmp	r3, #0
 802623e:	dd0c      	ble.n	802625a <mg_dtoa+0x5aa>
 8026240:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8026242:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8026244:	4413      	add	r3, r2
 8026246:	3b01      	subs	r3, #1
 8026248:	3370      	adds	r3, #112	@ 0x70
 802624a:	443b      	add	r3, r7
 802624c:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8026250:	2b2e      	cmp	r3, #46	@ 0x2e
 8026252:	d102      	bne.n	802625a <mg_dtoa+0x5aa>
 8026254:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8026256:	3b01      	subs	r3, #1
 8026258:	667b      	str	r3, [r7, #100]	@ 0x64
  n += s;
 802625a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 802625c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 802625e:	4413      	add	r3, r2
 8026260:	667b      	str	r3, [r7, #100]	@ 0x64
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
 8026262:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8026264:	2b27      	cmp	r3, #39	@ 0x27
 8026266:	dd01      	ble.n	802626c <mg_dtoa+0x5bc>
 8026268:	2327      	movs	r3, #39	@ 0x27
 802626a:	667b      	str	r3, [r7, #100]	@ 0x64
  buf[n] = '\0';
 802626c:	f107 0218 	add.w	r2, r7, #24
 8026270:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8026272:	4413      	add	r3, r2
 8026274:	2200      	movs	r2, #0
 8026276:	701a      	strb	r2, [r3, #0]
  return mg_snprintf(dst, dstlen, "%s", buf);
 8026278:	f107 0318 	add.w	r3, r7, #24
 802627c:	4a05      	ldr	r2, [pc, #20]	@ (8026294 <mg_dtoa+0x5e4>)
 802627e:	6939      	ldr	r1, [r7, #16]
 8026280:	6978      	ldr	r0, [r7, #20]
 8026282:	f00a ffc7 	bl	8031214 <mg_snprintf>
 8026286:	4603      	mov	r3, r0
}
 8026288:	4618      	mov	r0, r3
 802628a:	3770      	adds	r7, #112	@ 0x70
 802628c:	46bd      	mov	sp, r7
 802628e:	bdb0      	pop	{r4, r5, r7, pc}
 8026290:	40240000 	.word	0x40240000
 8026294:	080416d0 	.word	0x080416d0

08026298 <mg_lld>:

static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {
 8026298:	b5b0      	push	{r4, r5, r7, lr}
 802629a:	b08c      	sub	sp, #48	@ 0x30
 802629c:	af00      	add	r7, sp, #0
 802629e:	60f8      	str	r0, [r7, #12]
 80262a0:	e9c7 2300 	strd	r2, r3, [r7]
  const char *letters = "0123456789abcdef";
 80262a4:	4b53      	ldr	r3, [pc, #332]	@ (80263f4 <mg_lld+0x15c>)
 80262a6:	61bb      	str	r3, [r7, #24]
  uint64_t v = (uint64_t) val;
 80262a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80262ac:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  size_t s = 0, n, i;
 80262b0:	2300      	movs	r3, #0
 80262b2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 80262b4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80262b8:	2b00      	cmp	r3, #0
 80262ba:	d012      	beq.n	80262e2 <mg_lld+0x4a>
 80262bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80262c0:	2b00      	cmp	r3, #0
 80262c2:	da0e      	bge.n	80262e2 <mg_lld+0x4a>
 80262c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80262c6:	1c5a      	adds	r2, r3, #1
 80262c8:	627a      	str	r2, [r7, #36]	@ 0x24
 80262ca:	68fa      	ldr	r2, [r7, #12]
 80262cc:	4413      	add	r3, r2
 80262ce:	222d      	movs	r2, #45	@ 0x2d
 80262d0:	701a      	strb	r2, [r3, #0]
 80262d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80262d6:	2100      	movs	r1, #0
 80262d8:	4254      	negs	r4, r2
 80262da:	eb61 0503 	sbc.w	r5, r1, r3
 80262de:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
  // This loop prints a number in reverse order. I guess this is because we
  // write numbers from right to left: least significant digit comes last.
  // Maybe because we use Arabic numbers, and Arabs write RTL?
  if (is_hex) {
 80262e2:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80262e6:	2b00      	cmp	r3, #0
 80262e8:	d021      	beq.n	802632e <mg_lld+0x96>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
 80262ea:	2300      	movs	r3, #0
 80262ec:	623b      	str	r3, [r7, #32]
 80262ee:	e019      	b.n	8026324 <mg_lld+0x8c>
 80262f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80262f2:	f003 030f 	and.w	r3, r3, #15
 80262f6:	69ba      	ldr	r2, [r7, #24]
 80262f8:	441a      	add	r2, r3
 80262fa:	6a3b      	ldr	r3, [r7, #32]
 80262fc:	1c59      	adds	r1, r3, #1
 80262fe:	6239      	str	r1, [r7, #32]
 8026300:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8026302:	440b      	add	r3, r1
 8026304:	68f9      	ldr	r1, [r7, #12]
 8026306:	440b      	add	r3, r1
 8026308:	7812      	ldrb	r2, [r2, #0]
 802630a:	701a      	strb	r2, [r3, #0]
 802630c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8026310:	f04f 0200 	mov.w	r2, #0
 8026314:	f04f 0300 	mov.w	r3, #0
 8026318:	0902      	lsrs	r2, r0, #4
 802631a:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 802631e:	090b      	lsrs	r3, r1, #4
 8026320:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8026324:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8026328:	4313      	orrs	r3, r2
 802632a:	d1e1      	bne.n	80262f0 <mg_lld+0x58>
 802632c:	e025      	b.n	802637a <mg_lld+0xe2>
  } else {
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 802632e:	2300      	movs	r3, #0
 8026330:	623b      	str	r3, [r7, #32]
 8026332:	e01e      	b.n	8026372 <mg_lld+0xda>
 8026334:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8026338:	f04f 020a 	mov.w	r2, #10
 802633c:	f04f 0300 	mov.w	r3, #0
 8026340:	f7ea fd0a 	bl	8010d58 <__aeabi_uldivmod>
 8026344:	69bb      	ldr	r3, [r7, #24]
 8026346:	441a      	add	r2, r3
 8026348:	6a3b      	ldr	r3, [r7, #32]
 802634a:	1c59      	adds	r1, r3, #1
 802634c:	6239      	str	r1, [r7, #32]
 802634e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8026350:	440b      	add	r3, r1
 8026352:	68f9      	ldr	r1, [r7, #12]
 8026354:	440b      	add	r3, r1
 8026356:	7812      	ldrb	r2, [r2, #0]
 8026358:	701a      	strb	r2, [r3, #0]
 802635a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 802635e:	f04f 020a 	mov.w	r2, #10
 8026362:	f04f 0300 	mov.w	r3, #0
 8026366:	f7ea fcf7 	bl	8010d58 <__aeabi_uldivmod>
 802636a:	4602      	mov	r2, r0
 802636c:	460b      	mov	r3, r1
 802636e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8026372:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8026376:	4313      	orrs	r3, r2
 8026378:	d1dc      	bne.n	8026334 <mg_lld+0x9c>
  }
  // Reverse a string
  for (i = 0; i < n / 2; i++) {
 802637a:	2300      	movs	r3, #0
 802637c:	61fb      	str	r3, [r7, #28]
 802637e:	e022      	b.n	80263c6 <mg_lld+0x12e>
    char t = buf[s + i];
 8026380:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8026382:	69fb      	ldr	r3, [r7, #28]
 8026384:	4413      	add	r3, r2
 8026386:	68fa      	ldr	r2, [r7, #12]
 8026388:	4413      	add	r3, r2
 802638a:	781b      	ldrb	r3, [r3, #0]
 802638c:	75fb      	strb	r3, [r7, #23]
    buf[s + i] = buf[s + n - i - 1], buf[s + n - i - 1] = t;
 802638e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8026390:	6a3b      	ldr	r3, [r7, #32]
 8026392:	441a      	add	r2, r3
 8026394:	69fb      	ldr	r3, [r7, #28]
 8026396:	1ad3      	subs	r3, r2, r3
 8026398:	3b01      	subs	r3, #1
 802639a:	68fa      	ldr	r2, [r7, #12]
 802639c:	441a      	add	r2, r3
 802639e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80263a0:	69fb      	ldr	r3, [r7, #28]
 80263a2:	440b      	add	r3, r1
 80263a4:	68f9      	ldr	r1, [r7, #12]
 80263a6:	440b      	add	r3, r1
 80263a8:	7812      	ldrb	r2, [r2, #0]
 80263aa:	701a      	strb	r2, [r3, #0]
 80263ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80263ae:	6a3b      	ldr	r3, [r7, #32]
 80263b0:	441a      	add	r2, r3
 80263b2:	69fb      	ldr	r3, [r7, #28]
 80263b4:	1ad3      	subs	r3, r2, r3
 80263b6:	3b01      	subs	r3, #1
 80263b8:	68fa      	ldr	r2, [r7, #12]
 80263ba:	4413      	add	r3, r2
 80263bc:	7dfa      	ldrb	r2, [r7, #23]
 80263be:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < n / 2; i++) {
 80263c0:	69fb      	ldr	r3, [r7, #28]
 80263c2:	3301      	adds	r3, #1
 80263c4:	61fb      	str	r3, [r7, #28]
 80263c6:	6a3b      	ldr	r3, [r7, #32]
 80263c8:	085b      	lsrs	r3, r3, #1
 80263ca:	69fa      	ldr	r2, [r7, #28]
 80263cc:	429a      	cmp	r2, r3
 80263ce:	d3d7      	bcc.n	8026380 <mg_lld+0xe8>
  }
  if (val == 0) buf[n++] = '0';  // Handle special case
 80263d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80263d4:	4313      	orrs	r3, r2
 80263d6:	d106      	bne.n	80263e6 <mg_lld+0x14e>
 80263d8:	6a3b      	ldr	r3, [r7, #32]
 80263da:	1c5a      	adds	r2, r3, #1
 80263dc:	623a      	str	r2, [r7, #32]
 80263de:	68fa      	ldr	r2, [r7, #12]
 80263e0:	4413      	add	r3, r2
 80263e2:	2230      	movs	r2, #48	@ 0x30
 80263e4:	701a      	strb	r2, [r3, #0]
  return n + s;
 80263e6:	6a3a      	ldr	r2, [r7, #32]
 80263e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80263ea:	4413      	add	r3, r2
}
 80263ec:	4618      	mov	r0, r3
 80263ee:	3730      	adds	r7, #48	@ 0x30
 80263f0:	46bd      	mov	sp, r7
 80263f2:	bdb0      	pop	{r4, r5, r7, pc}
 80263f4:	080416ec 	.word	0x080416ec

080263f8 <scpy>:

static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,
                          size_t len) {
 80263f8:	b580      	push	{r7, lr}
 80263fa:	b086      	sub	sp, #24
 80263fc:	af00      	add	r7, sp, #0
 80263fe:	60f8      	str	r0, [r7, #12]
 8026400:	60b9      	str	r1, [r7, #8]
 8026402:	607a      	str	r2, [r7, #4]
 8026404:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 8026406:	2300      	movs	r3, #0
 8026408:	617b      	str	r3, [r7, #20]
  while (i < len && buf[i] != '\0') out(buf[i++], ptr);
 802640a:	e009      	b.n	8026420 <scpy+0x28>
 802640c:	697b      	ldr	r3, [r7, #20]
 802640e:	1c5a      	adds	r2, r3, #1
 8026410:	617a      	str	r2, [r7, #20]
 8026412:	687a      	ldr	r2, [r7, #4]
 8026414:	4413      	add	r3, r2
 8026416:	781a      	ldrb	r2, [r3, #0]
 8026418:	68fb      	ldr	r3, [r7, #12]
 802641a:	68b9      	ldr	r1, [r7, #8]
 802641c:	4610      	mov	r0, r2
 802641e:	4798      	blx	r3
 8026420:	697a      	ldr	r2, [r7, #20]
 8026422:	683b      	ldr	r3, [r7, #0]
 8026424:	429a      	cmp	r2, r3
 8026426:	d205      	bcs.n	8026434 <scpy+0x3c>
 8026428:	687a      	ldr	r2, [r7, #4]
 802642a:	697b      	ldr	r3, [r7, #20]
 802642c:	4413      	add	r3, r2
 802642e:	781b      	ldrb	r3, [r3, #0]
 8026430:	2b00      	cmp	r3, #0
 8026432:	d1eb      	bne.n	802640c <scpy+0x14>
  return i;
 8026434:	697b      	ldr	r3, [r7, #20]
}
 8026436:	4618      	mov	r0, r3
 8026438:	3718      	adds	r7, #24
 802643a:	46bd      	mov	sp, r7
 802643c:	bd80      	pop	{r7, pc}

0802643e <mg_xprintf>:

size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {
 802643e:	b40c      	push	{r2, r3}
 8026440:	b580      	push	{r7, lr}
 8026442:	b084      	sub	sp, #16
 8026444:	af00      	add	r7, sp, #0
 8026446:	6078      	str	r0, [r7, #4]
 8026448:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 802644a:	2300      	movs	r3, #0
 802644c:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 802644e:	f107 031c 	add.w	r3, r7, #28
 8026452:	60bb      	str	r3, [r7, #8]
  len = mg_vxprintf(out, ptr, fmt, &ap);
 8026454:	f107 0308 	add.w	r3, r7, #8
 8026458:	69ba      	ldr	r2, [r7, #24]
 802645a:	6839      	ldr	r1, [r7, #0]
 802645c:	6878      	ldr	r0, [r7, #4]
 802645e:	f000 f809 	bl	8026474 <mg_vxprintf>
 8026462:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 8026464:	68fb      	ldr	r3, [r7, #12]
}
 8026466:	4618      	mov	r0, r3
 8026468:	3710      	adds	r7, #16
 802646a:	46bd      	mov	sp, r7
 802646c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8026470:	b002      	add	sp, #8
 8026472:	4770      	bx	lr

08026474 <mg_vxprintf>:

size_t mg_vxprintf(void (*out)(char, void *), void *param, const char *fmt,
                   va_list *ap) {
 8026474:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8026478:	b0a6      	sub	sp, #152	@ 0x98
 802647a:	af02      	add	r7, sp, #8
 802647c:	60f8      	str	r0, [r7, #12]
 802647e:	60b9      	str	r1, [r7, #8]
 8026480:	607a      	str	r2, [r7, #4]
 8026482:	603b      	str	r3, [r7, #0]
  size_t i = 0, n = 0;
 8026484:	2300      	movs	r3, #0
 8026486:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 802648a:	2300      	movs	r3, #0
 802648c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  while (fmt[i] != '\0') {
 8026490:	e383      	b.n	8026b9a <mg_vxprintf+0x726>
    if (fmt[i] == '%') {
 8026492:	687a      	ldr	r2, [r7, #4]
 8026494:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8026498:	4413      	add	r3, r2
 802649a:	781b      	ldrb	r3, [r3, #0]
 802649c:	2b25      	cmp	r3, #37	@ 0x25
 802649e:	f040 8369 	bne.w	8026b74 <mg_vxprintf+0x700>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 80264a2:	2300      	movs	r3, #0
 80264a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80264a6:	2300      	movs	r3, #0
 80264a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80264aa:	2300      	movs	r3, #0
 80264ac:	677b      	str	r3, [r7, #116]	@ 0x74
 80264ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80264b2:	673b      	str	r3, [r7, #112]	@ 0x70
      char pad = ' ', minus = 0, c = fmt[++i];
 80264b4:	2320      	movs	r3, #32
 80264b6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80264ba:	2300      	movs	r3, #0
 80264bc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 80264c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80264c4:	3301      	adds	r3, #1
 80264c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80264ca:	687a      	ldr	r2, [r7, #4]
 80264cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80264d0:	4413      	add	r3, r2
 80264d2:	781b      	ldrb	r3, [r3, #0]
 80264d4:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '#') x++, c = fmt[++i];
 80264d8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80264dc:	2b23      	cmp	r3, #35	@ 0x23
 80264de:	d10e      	bne.n	80264fe <mg_vxprintf+0x8a>
 80264e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80264e2:	3301      	adds	r3, #1
 80264e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80264e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80264ea:	3301      	adds	r3, #1
 80264ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80264f0:	687a      	ldr	r2, [r7, #4]
 80264f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80264f6:	4413      	add	r3, r2
 80264f8:	781b      	ldrb	r3, [r3, #0]
 80264fa:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '-') minus++, c = fmt[++i];
 80264fe:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8026502:	2b2d      	cmp	r3, #45	@ 0x2d
 8026504:	d110      	bne.n	8026528 <mg_vxprintf+0xb4>
 8026506:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 802650a:	3301      	adds	r3, #1
 802650c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8026510:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8026514:	3301      	adds	r3, #1
 8026516:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 802651a:	687a      	ldr	r2, [r7, #4]
 802651c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8026520:	4413      	add	r3, r2
 8026522:	781b      	ldrb	r3, [r3, #0]
 8026524:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '0') pad = '0', c = fmt[++i];
 8026528:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 802652c:	2b30      	cmp	r3, #48	@ 0x30
 802652e:	d127      	bne.n	8026580 <mg_vxprintf+0x10c>
 8026530:	2330      	movs	r3, #48	@ 0x30
 8026532:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8026536:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 802653a:	3301      	adds	r3, #1
 802653c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8026540:	687a      	ldr	r2, [r7, #4]
 8026542:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8026546:	4413      	add	r3, r2
 8026548:	781b      	ldrb	r3, [r3, #0]
 802654a:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      while (is_digit(c)) w *= 10, w += (size_t) (c - '0'), c = fmt[++i];
 802654e:	e017      	b.n	8026580 <mg_vxprintf+0x10c>
 8026550:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8026552:	4613      	mov	r3, r2
 8026554:	009b      	lsls	r3, r3, #2
 8026556:	4413      	add	r3, r2
 8026558:	005b      	lsls	r3, r3, #1
 802655a:	677b      	str	r3, [r7, #116]	@ 0x74
 802655c:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 8026560:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8026562:	4413      	add	r3, r2
 8026564:	3b30      	subs	r3, #48	@ 0x30
 8026566:	677b      	str	r3, [r7, #116]	@ 0x74
 8026568:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 802656c:	3301      	adds	r3, #1
 802656e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8026572:	687a      	ldr	r2, [r7, #4]
 8026574:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8026578:	4413      	add	r3, r2
 802657a:	781b      	ldrb	r3, [r3, #0]
 802657c:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8026580:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8026584:	4618      	mov	r0, r3
 8026586:	f7ff faa5 	bl	8025ad4 <is_digit>
 802658a:	4603      	mov	r3, r0
 802658c:	2b00      	cmp	r3, #0
 802658e:	d1df      	bne.n	8026550 <mg_vxprintf+0xdc>
      if (c == '.') {
 8026590:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8026594:	2b2e      	cmp	r3, #46	@ 0x2e
 8026596:	d153      	bne.n	8026640 <mg_vxprintf+0x1cc>
        c = fmt[++i];
 8026598:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 802659c:	3301      	adds	r3, #1
 802659e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80265a2:	687a      	ldr	r2, [r7, #4]
 80265a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80265a8:	4413      	add	r3, r2
 80265aa:	781b      	ldrb	r3, [r3, #0]
 80265ac:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
        if (c == '*') {
 80265b0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80265b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80265b6:	d113      	bne.n	80265e0 <mg_vxprintf+0x16c>
          pr = (size_t) va_arg(*ap, int);
 80265b8:	683b      	ldr	r3, [r7, #0]
 80265ba:	681b      	ldr	r3, [r3, #0]
 80265bc:	1d19      	adds	r1, r3, #4
 80265be:	683a      	ldr	r2, [r7, #0]
 80265c0:	6011      	str	r1, [r2, #0]
 80265c2:	681b      	ldr	r3, [r3, #0]
 80265c4:	673b      	str	r3, [r7, #112]	@ 0x70
          c = fmt[++i];
 80265c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80265ca:	3301      	adds	r3, #1
 80265cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80265d0:	687a      	ldr	r2, [r7, #4]
 80265d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80265d6:	4413      	add	r3, r2
 80265d8:	781b      	ldrb	r3, [r3, #0]
 80265da:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 80265de:	e02f      	b.n	8026640 <mg_vxprintf+0x1cc>
        } else {
          pr = 0;
 80265e0:	2300      	movs	r3, #0
 80265e2:	673b      	str	r3, [r7, #112]	@ 0x70
          while (is_digit(c)) pr *= 10, pr += (size_t) (c - '0'), c = fmt[++i];
 80265e4:	e017      	b.n	8026616 <mg_vxprintf+0x1a2>
 80265e6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80265e8:	4613      	mov	r3, r2
 80265ea:	009b      	lsls	r3, r3, #2
 80265ec:	4413      	add	r3, r2
 80265ee:	005b      	lsls	r3, r3, #1
 80265f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80265f2:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 80265f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80265f8:	4413      	add	r3, r2
 80265fa:	3b30      	subs	r3, #48	@ 0x30
 80265fc:	673b      	str	r3, [r7, #112]	@ 0x70
 80265fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8026602:	3301      	adds	r3, #1
 8026604:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8026608:	687a      	ldr	r2, [r7, #4]
 802660a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 802660e:	4413      	add	r3, r2
 8026610:	781b      	ldrb	r3, [r3, #0]
 8026612:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8026616:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 802661a:	4618      	mov	r0, r3
 802661c:	f7ff fa5a 	bl	8025ad4 <is_digit>
 8026620:	4603      	mov	r3, r0
 8026622:	2b00      	cmp	r3, #0
 8026624:	d1df      	bne.n	80265e6 <mg_vxprintf+0x172>
        }
      }
      while (c == 'h') c = fmt[++i];  // Treat h and hh as int
 8026626:	e00b      	b.n	8026640 <mg_vxprintf+0x1cc>
 8026628:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 802662c:	3301      	adds	r3, #1
 802662e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8026632:	687a      	ldr	r2, [r7, #4]
 8026634:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8026638:	4413      	add	r3, r2
 802663a:	781b      	ldrb	r3, [r3, #0]
 802663c:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8026640:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8026644:	2b68      	cmp	r3, #104	@ 0x68
 8026646:	d0ef      	beq.n	8026628 <mg_vxprintf+0x1b4>
      if (c == 'l') {
 8026648:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 802664c:	2b6c      	cmp	r3, #108	@ 0x6c
 802664e:	d121      	bne.n	8026694 <mg_vxprintf+0x220>
        is_long++, c = fmt[++i];
 8026650:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8026652:	3301      	adds	r3, #1
 8026654:	67bb      	str	r3, [r7, #120]	@ 0x78
 8026656:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 802665a:	3301      	adds	r3, #1
 802665c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8026660:	687a      	ldr	r2, [r7, #4]
 8026662:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8026666:	4413      	add	r3, r2
 8026668:	781b      	ldrb	r3, [r3, #0]
 802666a:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
        if (c == 'l') is_long++, c = fmt[++i];
 802666e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8026672:	2b6c      	cmp	r3, #108	@ 0x6c
 8026674:	d10e      	bne.n	8026694 <mg_vxprintf+0x220>
 8026676:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8026678:	3301      	adds	r3, #1
 802667a:	67bb      	str	r3, [r7, #120]	@ 0x78
 802667c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8026680:	3301      	adds	r3, #1
 8026682:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8026686:	687a      	ldr	r2, [r7, #4]
 8026688:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 802668c:	4413      	add	r3, r2
 802668e:	781b      	ldrb	r3, [r3, #0]
 8026690:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      }
      if (c == 'p') x = 1, is_long = 1;
 8026694:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8026698:	2b70      	cmp	r3, #112	@ 0x70
 802669a:	d103      	bne.n	80266a4 <mg_vxprintf+0x230>
 802669c:	2301      	movs	r3, #1
 802669e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80266a0:	2301      	movs	r3, #1
 80266a2:	67bb      	str	r3, [r7, #120]	@ 0x78
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 80266a4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80266a8:	2b64      	cmp	r3, #100	@ 0x64
 80266aa:	d018      	beq.n	80266de <mg_vxprintf+0x26a>
 80266ac:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80266b0:	2b75      	cmp	r3, #117	@ 0x75
 80266b2:	d014      	beq.n	80266de <mg_vxprintf+0x26a>
 80266b4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80266b8:	2b78      	cmp	r3, #120	@ 0x78
 80266ba:	d010      	beq.n	80266de <mg_vxprintf+0x26a>
 80266bc:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80266c0:	2b58      	cmp	r3, #88	@ 0x58
 80266c2:	d00c      	beq.n	80266de <mg_vxprintf+0x26a>
 80266c4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80266c8:	2b70      	cmp	r3, #112	@ 0x70
 80266ca:	d008      	beq.n	80266de <mg_vxprintf+0x26a>
 80266cc:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80266d0:	2b67      	cmp	r3, #103	@ 0x67
 80266d2:	d004      	beq.n	80266de <mg_vxprintf+0x26a>
          c == 'g' || c == 'f') {
 80266d4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80266d8:	2b66      	cmp	r3, #102	@ 0x66
 80266da:	f040 816c 	bne.w	80269b6 <mg_vxprintf+0x542>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 80266de:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80266e2:	2b64      	cmp	r3, #100	@ 0x64
 80266e4:	bf0c      	ite	eq
 80266e6:	2301      	moveq	r3, #1
 80266e8:	2300      	movne	r3, #0
 80266ea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80266ee:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80266f2:	2b78      	cmp	r3, #120	@ 0x78
 80266f4:	d007      	beq.n	8026706 <mg_vxprintf+0x292>
 80266f6:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80266fa:	2b58      	cmp	r3, #88	@ 0x58
 80266fc:	d003      	beq.n	8026706 <mg_vxprintf+0x292>
 80266fe:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8026702:	2b70      	cmp	r3, #112	@ 0x70
 8026704:	d101      	bne.n	802670a <mg_vxprintf+0x296>
 8026706:	2301      	movs	r3, #1
 8026708:	e000      	b.n	802670c <mg_vxprintf+0x298>
 802670a:	2300      	movs	r3, #0
 802670c:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 8026710:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8026714:	f003 0301 	and.w	r3, r3, #1
 8026718:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
        char tmp[40];
        size_t xl = x ? 2 : 0;
 802671c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 802671e:	2b00      	cmp	r3, #0
 8026720:	d001      	beq.n	8026726 <mg_vxprintf+0x2b2>
 8026722:	2302      	movs	r3, #2
 8026724:	e000      	b.n	8026728 <mg_vxprintf+0x2b4>
 8026726:	2300      	movs	r3, #0
 8026728:	65bb      	str	r3, [r7, #88]	@ 0x58
        if (c == 'g' || c == 'f') {
 802672a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 802672e:	2b67      	cmp	r3, #103	@ 0x67
 8026730:	d003      	beq.n	802673a <mg_vxprintf+0x2c6>
 8026732:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8026736:	2b66      	cmp	r3, #102	@ 0x66
 8026738:	d124      	bne.n	8026784 <mg_vxprintf+0x310>
          double v = va_arg(*ap, double);
 802673a:	683b      	ldr	r3, [r7, #0]
 802673c:	681b      	ldr	r3, [r3, #0]
 802673e:	3307      	adds	r3, #7
 8026740:	f023 0307 	bic.w	r3, r3, #7
 8026744:	f103 0108 	add.w	r1, r3, #8
 8026748:	683a      	ldr	r2, [r7, #0]
 802674a:	6011      	str	r1, [r2, #0]
 802674c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026750:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
          if (pr == ~0U) pr = 6;
 8026754:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8026756:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 802675a:	d101      	bne.n	8026760 <mg_vxprintf+0x2ec>
 802675c:	2306      	movs	r3, #6
 802675e:	673b      	str	r3, [r7, #112]	@ 0x70
          k = mg_dtoa(tmp, sizeof(tmp), v, (int) pr, c == 'g');
 8026760:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8026762:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8026766:	2b67      	cmp	r3, #103	@ 0x67
 8026768:	bf0c      	ite	eq
 802676a:	2301      	moveq	r3, #1
 802676c:	2300      	movne	r3, #0
 802676e:	b2db      	uxtb	r3, r3
 8026770:	f107 0014 	add.w	r0, r7, #20
 8026774:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 8026778:	2128      	movs	r1, #40	@ 0x28
 802677a:	f7ff fa99 	bl	8025cb0 <mg_dtoa>
 802677e:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        if (c == 'g' || c == 'f') {
 8026782:	e069      	b.n	8026858 <mg_vxprintf+0x3e4>
        } else if (is_long == 2) {
 8026784:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8026786:	2b02      	cmp	r3, #2
 8026788:	d11c      	bne.n	80267c4 <mg_vxprintf+0x350>
          int64_t v = va_arg(*ap, int64_t);
 802678a:	683b      	ldr	r3, [r7, #0]
 802678c:	681b      	ldr	r3, [r3, #0]
 802678e:	3307      	adds	r3, #7
 8026790:	f023 0307 	bic.w	r3, r3, #7
 8026794:	f103 0108 	add.w	r1, r3, #8
 8026798:	683a      	ldr	r2, [r7, #0]
 802679a:	6011      	str	r1, [r2, #0]
 802679c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80267a0:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
          k = mg_lld(tmp, v, s, h);
 80267a4:	f107 0114 	add.w	r1, r7, #20
 80267a8:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80267ac:	9301      	str	r3, [sp, #4]
 80267ae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80267b2:	9300      	str	r3, [sp, #0]
 80267b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80267b8:	4608      	mov	r0, r1
 80267ba:	f7ff fd6d 	bl	8026298 <mg_lld>
 80267be:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 80267c2:	e049      	b.n	8026858 <mg_vxprintf+0x3e4>
        } else if (is_long == 1) {
 80267c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80267c6:	2b01      	cmp	r3, #1
 80267c8:	d123      	bne.n	8026812 <mg_vxprintf+0x39e>
          long v = va_arg(*ap, long);
 80267ca:	683b      	ldr	r3, [r7, #0]
 80267cc:	681b      	ldr	r3, [r3, #0]
 80267ce:	1d19      	adds	r1, r3, #4
 80267d0:	683a      	ldr	r2, [r7, #0]
 80267d2:	6011      	str	r1, [r2, #0]
 80267d4:	681b      	ldr	r3, [r3, #0]
 80267d6:	653b      	str	r3, [r7, #80]	@ 0x50
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned long) v, s, h);
 80267d8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80267dc:	2b00      	cmp	r3, #0
 80267de:	d004      	beq.n	80267ea <mg_vxprintf+0x376>
 80267e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80267e2:	17da      	asrs	r2, r3, #31
 80267e4:	461c      	mov	r4, r3
 80267e6:	4615      	mov	r5, r2
 80267e8:	e003      	b.n	80267f2 <mg_vxprintf+0x37e>
 80267ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80267ec:	2200      	movs	r2, #0
 80267ee:	461c      	mov	r4, r3
 80267f0:	4615      	mov	r5, r2
 80267f2:	f107 0114 	add.w	r1, r7, #20
 80267f6:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80267fa:	9301      	str	r3, [sp, #4]
 80267fc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8026800:	9300      	str	r3, [sp, #0]
 8026802:	4622      	mov	r2, r4
 8026804:	462b      	mov	r3, r5
 8026806:	4608      	mov	r0, r1
 8026808:	f7ff fd46 	bl	8026298 <mg_lld>
 802680c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 8026810:	e022      	b.n	8026858 <mg_vxprintf+0x3e4>
        } else {
          int v = va_arg(*ap, int);
 8026812:	683b      	ldr	r3, [r7, #0]
 8026814:	681b      	ldr	r3, [r3, #0]
 8026816:	1d19      	adds	r1, r3, #4
 8026818:	683a      	ldr	r2, [r7, #0]
 802681a:	6011      	str	r1, [r2, #0]
 802681c:	681b      	ldr	r3, [r3, #0]
 802681e:	657b      	str	r3, [r7, #84]	@ 0x54
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 8026820:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8026824:	2b00      	cmp	r3, #0
 8026826:	d004      	beq.n	8026832 <mg_vxprintf+0x3be>
 8026828:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802682a:	17da      	asrs	r2, r3, #31
 802682c:	4698      	mov	r8, r3
 802682e:	4691      	mov	r9, r2
 8026830:	e003      	b.n	802683a <mg_vxprintf+0x3c6>
 8026832:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8026834:	2200      	movs	r2, #0
 8026836:	4698      	mov	r8, r3
 8026838:	4691      	mov	r9, r2
 802683a:	f107 0114 	add.w	r1, r7, #20
 802683e:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8026842:	9301      	str	r3, [sp, #4]
 8026844:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8026848:	9300      	str	r3, [sp, #0]
 802684a:	4642      	mov	r2, r8
 802684c:	464b      	mov	r3, r9
 802684e:	4608      	mov	r0, r1
 8026850:	f7ff fd22 	bl	8026298 <mg_lld>
 8026854:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        }
        for (j = 0; j < xl && w > 0; j++) w--;
 8026858:	2300      	movs	r3, #0
 802685a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 802685e:	e007      	b.n	8026870 <mg_vxprintf+0x3fc>
 8026860:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8026862:	3b01      	subs	r3, #1
 8026864:	677b      	str	r3, [r7, #116]	@ 0x74
 8026866:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 802686a:	3301      	adds	r3, #1
 802686c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8026870:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8026874:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8026876:	429a      	cmp	r2, r3
 8026878:	d202      	bcs.n	8026880 <mg_vxprintf+0x40c>
 802687a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 802687c:	2b00      	cmp	r3, #0
 802687e:	d1ef      	bne.n	8026860 <mg_vxprintf+0x3ec>
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8026880:	2300      	movs	r3, #0
 8026882:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8026886:	e011      	b.n	80268ac <mg_vxprintf+0x438>
          n += scpy(out, param, &pad, 1);
 8026888:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 802688c:	2301      	movs	r3, #1
 802688e:	68b9      	ldr	r1, [r7, #8]
 8026890:	68f8      	ldr	r0, [r7, #12]
 8026892:	f7ff fdb1 	bl	80263f8 <scpy>
 8026896:	4602      	mov	r2, r0
 8026898:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 802689c:	4413      	add	r3, r2
 802689e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 80268a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80268a6:	3301      	adds	r3, #1
 80268a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80268ac:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80268b0:	2b20      	cmp	r3, #32
 80268b2:	d110      	bne.n	80268d6 <mg_vxprintf+0x462>
 80268b4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80268b8:	2b00      	cmp	r3, #0
 80268ba:	d10c      	bne.n	80268d6 <mg_vxprintf+0x462>
 80268bc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80268c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80268c2:	429a      	cmp	r2, r3
 80268c4:	d207      	bcs.n	80268d6 <mg_vxprintf+0x462>
 80268c6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80268ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80268ce:	4413      	add	r3, r2
 80268d0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80268d2:	429a      	cmp	r2, r3
 80268d4:	d8d8      	bhi.n	8026888 <mg_vxprintf+0x414>
        n += scpy(out, param, (char *) "0x", xl);
 80268d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80268d8:	4ab7      	ldr	r2, [pc, #732]	@ (8026bb8 <mg_vxprintf+0x744>)
 80268da:	68b9      	ldr	r1, [r7, #8]
 80268dc:	68f8      	ldr	r0, [r7, #12]
 80268de:	f7ff fd8b 	bl	80263f8 <scpy>
 80268e2:	4602      	mov	r2, r0
 80268e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80268e8:	4413      	add	r3, r2
 80268ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 80268ee:	2300      	movs	r3, #0
 80268f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80268f4:	e011      	b.n	802691a <mg_vxprintf+0x4a6>
          n += scpy(out, param, &pad, 1);
 80268f6:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 80268fa:	2301      	movs	r3, #1
 80268fc:	68b9      	ldr	r1, [r7, #8]
 80268fe:	68f8      	ldr	r0, [r7, #12]
 8026900:	f7ff fd7a 	bl	80263f8 <scpy>
 8026904:	4602      	mov	r2, r0
 8026906:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 802690a:	4413      	add	r3, r2
 802690c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8026910:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8026914:	3301      	adds	r3, #1
 8026916:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 802691a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802691e:	2b30      	cmp	r3, #48	@ 0x30
 8026920:	d10c      	bne.n	802693c <mg_vxprintf+0x4c8>
 8026922:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8026926:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8026928:	429a      	cmp	r2, r3
 802692a:	d207      	bcs.n	802693c <mg_vxprintf+0x4c8>
 802692c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8026930:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8026934:	4413      	add	r3, r2
 8026936:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8026938:	429a      	cmp	r2, r3
 802693a:	d8dc      	bhi.n	80268f6 <mg_vxprintf+0x482>
        n += scpy(out, param, tmp, k);
 802693c:	f107 0214 	add.w	r2, r7, #20
 8026940:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8026944:	68b9      	ldr	r1, [r7, #8]
 8026946:	68f8      	ldr	r0, [r7, #12]
 8026948:	f7ff fd56 	bl	80263f8 <scpy>
 802694c:	4602      	mov	r2, r0
 802694e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8026952:	4413      	add	r3, r2
 8026954:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8026958:	2300      	movs	r3, #0
 802695a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 802695e:	e011      	b.n	8026984 <mg_vxprintf+0x510>
          n += scpy(out, param, &pad, 1);
 8026960:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8026964:	2301      	movs	r3, #1
 8026966:	68b9      	ldr	r1, [r7, #8]
 8026968:	68f8      	ldr	r0, [r7, #12]
 802696a:	f7ff fd45 	bl	80263f8 <scpy>
 802696e:	4602      	mov	r2, r0
 8026970:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8026974:	4413      	add	r3, r2
 8026976:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 802697a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 802697e:	3301      	adds	r3, #1
 8026980:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8026984:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8026988:	2b20      	cmp	r3, #32
 802698a:	f040 80ea 	bne.w	8026b62 <mg_vxprintf+0x6ee>
 802698e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8026992:	2b00      	cmp	r3, #0
 8026994:	f000 80e5 	beq.w	8026b62 <mg_vxprintf+0x6ee>
 8026998:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 802699c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 802699e:	429a      	cmp	r2, r3
 80269a0:	f080 80df 	bcs.w	8026b62 <mg_vxprintf+0x6ee>
 80269a4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80269a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80269ac:	4413      	add	r3, r2
 80269ae:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80269b0:	429a      	cmp	r2, r3
 80269b2:	d8d5      	bhi.n	8026960 <mg_vxprintf+0x4ec>
          c == 'g' || c == 'f') {
 80269b4:	e0d5      	b.n	8026b62 <mg_vxprintf+0x6ee>
      } else if (c == 'm' || c == 'M') {
 80269b6:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80269ba:	2b6d      	cmp	r3, #109	@ 0x6d
 80269bc:	d003      	beq.n	80269c6 <mg_vxprintf+0x552>
 80269be:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80269c2:	2b4d      	cmp	r3, #77	@ 0x4d
 80269c4:	d128      	bne.n	8026a18 <mg_vxprintf+0x5a4>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 80269c6:	683b      	ldr	r3, [r7, #0]
 80269c8:	681b      	ldr	r3, [r3, #0]
 80269ca:	1d19      	adds	r1, r3, #4
 80269cc:	683a      	ldr	r2, [r7, #0]
 80269ce:	6011      	str	r1, [r2, #0]
 80269d0:	681b      	ldr	r3, [r3, #0]
 80269d2:	663b      	str	r3, [r7, #96]	@ 0x60
        if (c == 'm') out('"', param);
 80269d4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80269d8:	2b6d      	cmp	r3, #109	@ 0x6d
 80269da:	d103      	bne.n	80269e4 <mg_vxprintf+0x570>
 80269dc:	68fb      	ldr	r3, [r7, #12]
 80269de:	68b9      	ldr	r1, [r7, #8]
 80269e0:	2022      	movs	r0, #34	@ 0x22
 80269e2:	4798      	blx	r3
        n += f(out, param, ap);
 80269e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80269e6:	683a      	ldr	r2, [r7, #0]
 80269e8:	68b9      	ldr	r1, [r7, #8]
 80269ea:	68f8      	ldr	r0, [r7, #12]
 80269ec:	4798      	blx	r3
 80269ee:	4602      	mov	r2, r0
 80269f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80269f4:	4413      	add	r3, r2
 80269f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        if (c == 'm') n += 2, out('"', param);
 80269fa:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80269fe:	2b6d      	cmp	r3, #109	@ 0x6d
 8026a00:	f040 80b1 	bne.w	8026b66 <mg_vxprintf+0x6f2>
 8026a04:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8026a08:	3302      	adds	r3, #2
 8026a0a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8026a0e:	68fb      	ldr	r3, [r7, #12]
 8026a10:	68b9      	ldr	r1, [r7, #8]
 8026a12:	2022      	movs	r0, #34	@ 0x22
 8026a14:	4798      	blx	r3
      } else if (c == 'm' || c == 'M') {
 8026a16:	e0a6      	b.n	8026b66 <mg_vxprintf+0x6f2>
      } else if (c == 'c') {
 8026a18:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8026a1c:	2b63      	cmp	r3, #99	@ 0x63
 8026a1e:	d112      	bne.n	8026a46 <mg_vxprintf+0x5d2>
        int ch = va_arg(*ap, int);
 8026a20:	683b      	ldr	r3, [r7, #0]
 8026a22:	681b      	ldr	r3, [r3, #0]
 8026a24:	1d19      	adds	r1, r3, #4
 8026a26:	683a      	ldr	r2, [r7, #0]
 8026a28:	6011      	str	r1, [r2, #0]
 8026a2a:	681b      	ldr	r3, [r3, #0]
 8026a2c:	667b      	str	r3, [r7, #100]	@ 0x64
        out((char) ch, param);
 8026a2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8026a30:	b2da      	uxtb	r2, r3
 8026a32:	68fb      	ldr	r3, [r7, #12]
 8026a34:	68b9      	ldr	r1, [r7, #8]
 8026a36:	4610      	mov	r0, r2
 8026a38:	4798      	blx	r3
        n++;
 8026a3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8026a3e:	3301      	adds	r3, #1
 8026a40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8026a44:	e090      	b.n	8026b68 <mg_vxprintf+0x6f4>
      } else if (c == 's') {
 8026a46:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8026a4a:	2b73      	cmp	r3, #115	@ 0x73
 8026a4c:	d16b      	bne.n	8026b26 <mg_vxprintf+0x6b2>
        char *p = va_arg(*ap, char *);
 8026a4e:	683b      	ldr	r3, [r7, #0]
 8026a50:	681b      	ldr	r3, [r3, #0]
 8026a52:	1d19      	adds	r1, r3, #4
 8026a54:	683a      	ldr	r2, [r7, #0]
 8026a56:	6011      	str	r1, [r2, #0]
 8026a58:	681b      	ldr	r3, [r3, #0]
 8026a5a:	66bb      	str	r3, [r7, #104]	@ 0x68
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 8026a5c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8026a5e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8026a62:	d109      	bne.n	8026a78 <mg_vxprintf+0x604>
 8026a64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8026a66:	2b00      	cmp	r3, #0
 8026a68:	d004      	beq.n	8026a74 <mg_vxprintf+0x600>
 8026a6a:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8026a6c:	f7e9 fc18 	bl	80102a0 <strlen>
 8026a70:	4603      	mov	r3, r0
 8026a72:	e000      	b.n	8026a76 <mg_vxprintf+0x602>
 8026a74:	2300      	movs	r3, #0
 8026a76:	673b      	str	r3, [r7, #112]	@ 0x70
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8026a78:	2300      	movs	r3, #0
 8026a7a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8026a7e:	e011      	b.n	8026aa4 <mg_vxprintf+0x630>
          n += scpy(out, param, &pad, 1);
 8026a80:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8026a84:	2301      	movs	r3, #1
 8026a86:	68b9      	ldr	r1, [r7, #8]
 8026a88:	68f8      	ldr	r0, [r7, #12]
 8026a8a:	f7ff fcb5 	bl	80263f8 <scpy>
 8026a8e:	4602      	mov	r2, r0
 8026a90:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8026a94:	4413      	add	r3, r2
 8026a96:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8026a9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8026a9e:	3301      	adds	r3, #1
 8026aa0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8026aa4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8026aa8:	2b00      	cmp	r3, #0
 8026aaa:	d10a      	bne.n	8026ac2 <mg_vxprintf+0x64e>
 8026aac:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8026aae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8026ab0:	429a      	cmp	r2, r3
 8026ab2:	d206      	bcs.n	8026ac2 <mg_vxprintf+0x64e>
 8026ab4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8026ab8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8026aba:	4413      	add	r3, r2
 8026abc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8026abe:	429a      	cmp	r2, r3
 8026ac0:	d8de      	bhi.n	8026a80 <mg_vxprintf+0x60c>
        n += scpy(out, param, p, pr);
 8026ac2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8026ac4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8026ac6:	68b9      	ldr	r1, [r7, #8]
 8026ac8:	68f8      	ldr	r0, [r7, #12]
 8026aca:	f7ff fc95 	bl	80263f8 <scpy>
 8026ace:	4602      	mov	r2, r0
 8026ad0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8026ad4:	4413      	add	r3, r2
 8026ad6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8026ada:	2300      	movs	r3, #0
 8026adc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8026ae0:	e011      	b.n	8026b06 <mg_vxprintf+0x692>
          n += scpy(out, param, &pad, 1);
 8026ae2:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8026ae6:	2301      	movs	r3, #1
 8026ae8:	68b9      	ldr	r1, [r7, #8]
 8026aea:	68f8      	ldr	r0, [r7, #12]
 8026aec:	f7ff fc84 	bl	80263f8 <scpy>
 8026af0:	4602      	mov	r2, r0
 8026af2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8026af6:	4413      	add	r3, r2
 8026af8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8026afc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8026b00:	3301      	adds	r3, #1
 8026b02:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8026b06:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8026b0a:	2b00      	cmp	r3, #0
 8026b0c:	d02c      	beq.n	8026b68 <mg_vxprintf+0x6f4>
 8026b0e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8026b10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8026b12:	429a      	cmp	r2, r3
 8026b14:	d228      	bcs.n	8026b68 <mg_vxprintf+0x6f4>
 8026b16:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8026b1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8026b1c:	4413      	add	r3, r2
 8026b1e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8026b20:	429a      	cmp	r2, r3
 8026b22:	d8de      	bhi.n	8026ae2 <mg_vxprintf+0x66e>
 8026b24:	e020      	b.n	8026b68 <mg_vxprintf+0x6f4>
      } else if (c == '%') {
 8026b26:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8026b2a:	2b25      	cmp	r3, #37	@ 0x25
 8026b2c:	d109      	bne.n	8026b42 <mg_vxprintf+0x6ce>
        out('%', param);
 8026b2e:	68fb      	ldr	r3, [r7, #12]
 8026b30:	68b9      	ldr	r1, [r7, #8]
 8026b32:	2025      	movs	r0, #37	@ 0x25
 8026b34:	4798      	blx	r3
        n++;
 8026b36:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8026b3a:	3301      	adds	r3, #1
 8026b3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8026b40:	e012      	b.n	8026b68 <mg_vxprintf+0x6f4>
      } else {
        out('%', param);
 8026b42:	68fb      	ldr	r3, [r7, #12]
 8026b44:	68b9      	ldr	r1, [r7, #8]
 8026b46:	2025      	movs	r0, #37	@ 0x25
 8026b48:	4798      	blx	r3
        out(c, param);
 8026b4a:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 8026b4e:	68fb      	ldr	r3, [r7, #12]
 8026b50:	68b9      	ldr	r1, [r7, #8]
 8026b52:	4610      	mov	r0, r2
 8026b54:	4798      	blx	r3
        n += 2;
 8026b56:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8026b5a:	3302      	adds	r3, #2
 8026b5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8026b60:	e002      	b.n	8026b68 <mg_vxprintf+0x6f4>
          c == 'g' || c == 'f') {
 8026b62:	bf00      	nop
 8026b64:	e000      	b.n	8026b68 <mg_vxprintf+0x6f4>
      } else if (c == 'm' || c == 'M') {
 8026b66:	bf00      	nop
      }
      i++;
 8026b68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8026b6c:	3301      	adds	r3, #1
 8026b6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8026b72:	e012      	b.n	8026b9a <mg_vxprintf+0x726>
    } else {
      out(fmt[i], param), n++, i++;
 8026b74:	687a      	ldr	r2, [r7, #4]
 8026b76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8026b7a:	4413      	add	r3, r2
 8026b7c:	781a      	ldrb	r2, [r3, #0]
 8026b7e:	68fb      	ldr	r3, [r7, #12]
 8026b80:	68b9      	ldr	r1, [r7, #8]
 8026b82:	4610      	mov	r0, r2
 8026b84:	4798      	blx	r3
 8026b86:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8026b8a:	3301      	adds	r3, #1
 8026b8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8026b90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8026b94:	3301      	adds	r3, #1
 8026b96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  while (fmt[i] != '\0') {
 8026b9a:	687a      	ldr	r2, [r7, #4]
 8026b9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8026ba0:	4413      	add	r3, r2
 8026ba2:	781b      	ldrb	r3, [r3, #0]
 8026ba4:	2b00      	cmp	r3, #0
 8026ba6:	f47f ac74 	bne.w	8026492 <mg_vxprintf+0x1e>
    }
  }
  return n;
 8026baa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
}
 8026bae:	4618      	mov	r0, r3
 8026bb0:	3790      	adds	r7, #144	@ 0x90
 8026bb2:	46bd      	mov	sp, r7
 8026bb4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8026bb8:	08041700 	.word	0x08041700

08026bbc <mg_fs_open>:
#endif




struct mg_fd *mg_fs_open(struct mg_fs *fs, const char *path, int flags) {
 8026bbc:	b580      	push	{r7, lr}
 8026bbe:	b086      	sub	sp, #24
 8026bc0:	af00      	add	r7, sp, #0
 8026bc2:	60f8      	str	r0, [r7, #12]
 8026bc4:	60b9      	str	r1, [r7, #8]
 8026bc6:	607a      	str	r2, [r7, #4]
  struct mg_fd *fd = (struct mg_fd *) calloc(1, sizeof(*fd));
 8026bc8:	2108      	movs	r1, #8
 8026bca:	2001      	movs	r0, #1
 8026bcc:	f7fe f940 	bl	8024e50 <mg_calloc>
 8026bd0:	6178      	str	r0, [r7, #20]
  if (fd != NULL) {
 8026bd2:	697b      	ldr	r3, [r7, #20]
 8026bd4:	2b00      	cmp	r3, #0
 8026bd6:	d013      	beq.n	8026c00 <mg_fs_open+0x44>
    fd->fd = fs->op(path, flags);
 8026bd8:	68fb      	ldr	r3, [r7, #12]
 8026bda:	689b      	ldr	r3, [r3, #8]
 8026bdc:	6879      	ldr	r1, [r7, #4]
 8026bde:	68b8      	ldr	r0, [r7, #8]
 8026be0:	4798      	blx	r3
 8026be2:	4602      	mov	r2, r0
 8026be4:	697b      	ldr	r3, [r7, #20]
 8026be6:	601a      	str	r2, [r3, #0]
    fd->fs = fs;
 8026be8:	697b      	ldr	r3, [r7, #20]
 8026bea:	68fa      	ldr	r2, [r7, #12]
 8026bec:	605a      	str	r2, [r3, #4]
    if (fd->fd == NULL) {
 8026bee:	697b      	ldr	r3, [r7, #20]
 8026bf0:	681b      	ldr	r3, [r3, #0]
 8026bf2:	2b00      	cmp	r3, #0
 8026bf4:	d104      	bne.n	8026c00 <mg_fs_open+0x44>
      free(fd);
 8026bf6:	6978      	ldr	r0, [r7, #20]
 8026bf8:	f7f5 fdb6 	bl	801c768 <vPortFree>
      fd = NULL;
 8026bfc:	2300      	movs	r3, #0
 8026bfe:	617b      	str	r3, [r7, #20]
    }
  }
  return fd;
 8026c00:	697b      	ldr	r3, [r7, #20]
}
 8026c02:	4618      	mov	r0, r3
 8026c04:	3718      	adds	r7, #24
 8026c06:	46bd      	mov	sp, r7
 8026c08:	bd80      	pop	{r7, pc}

08026c0a <mg_fs_close>:

void mg_fs_close(struct mg_fd *fd) {
 8026c0a:	b580      	push	{r7, lr}
 8026c0c:	b082      	sub	sp, #8
 8026c0e:	af00      	add	r7, sp, #0
 8026c10:	6078      	str	r0, [r7, #4]
  if (fd != NULL) {
 8026c12:	687b      	ldr	r3, [r7, #4]
 8026c14:	2b00      	cmp	r3, #0
 8026c16:	d009      	beq.n	8026c2c <mg_fs_close+0x22>
    fd->fs->cl(fd->fd);
 8026c18:	687b      	ldr	r3, [r7, #4]
 8026c1a:	685b      	ldr	r3, [r3, #4]
 8026c1c:	68db      	ldr	r3, [r3, #12]
 8026c1e:	687a      	ldr	r2, [r7, #4]
 8026c20:	6812      	ldr	r2, [r2, #0]
 8026c22:	4610      	mov	r0, r2
 8026c24:	4798      	blx	r3
    free(fd);
 8026c26:	6878      	ldr	r0, [r7, #4]
 8026c28:	f7f5 fd9e 	bl	801c768 <vPortFree>
  }
}
 8026c2c:	bf00      	nop
 8026c2e:	3708      	adds	r7, #8
 8026c30:	46bd      	mov	sp, r7
 8026c32:	bd80      	pop	{r7, pc}

08026c34 <p_stat>:
  return mkdir(path, 0775) == 0;
}

#else

static int p_stat(const char *path, size_t *size, time_t *mtime) {
 8026c34:	b480      	push	{r7}
 8026c36:	b085      	sub	sp, #20
 8026c38:	af00      	add	r7, sp, #0
 8026c3a:	60f8      	str	r0, [r7, #12]
 8026c3c:	60b9      	str	r1, [r7, #8]
 8026c3e:	607a      	str	r2, [r7, #4]
  (void) path, (void) size, (void) mtime;
  return 0;
 8026c40:	2300      	movs	r3, #0
}
 8026c42:	4618      	mov	r0, r3
 8026c44:	3714      	adds	r7, #20
 8026c46:	46bd      	mov	sp, r7
 8026c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c4c:	4770      	bx	lr

08026c4e <p_list>:
static void p_list(const char *path, void (*fn)(const char *, void *),
                   void *userdata) {
 8026c4e:	b480      	push	{r7}
 8026c50:	b085      	sub	sp, #20
 8026c52:	af00      	add	r7, sp, #0
 8026c54:	60f8      	str	r0, [r7, #12]
 8026c56:	60b9      	str	r1, [r7, #8]
 8026c58:	607a      	str	r2, [r7, #4]
  (void) path, (void) fn, (void) userdata;
}
 8026c5a:	bf00      	nop
 8026c5c:	3714      	adds	r7, #20
 8026c5e:	46bd      	mov	sp, r7
 8026c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c64:	4770      	bx	lr

08026c66 <p_open>:
static void *p_open(const char *path, int flags) {
 8026c66:	b480      	push	{r7}
 8026c68:	b083      	sub	sp, #12
 8026c6a:	af00      	add	r7, sp, #0
 8026c6c:	6078      	str	r0, [r7, #4]
 8026c6e:	6039      	str	r1, [r7, #0]
  (void) path, (void) flags;
  return NULL;
 8026c70:	2300      	movs	r3, #0
}
 8026c72:	4618      	mov	r0, r3
 8026c74:	370c      	adds	r7, #12
 8026c76:	46bd      	mov	sp, r7
 8026c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c7c:	4770      	bx	lr

08026c7e <p_close>:
static void p_close(void *fp) {
 8026c7e:	b480      	push	{r7}
 8026c80:	b083      	sub	sp, #12
 8026c82:	af00      	add	r7, sp, #0
 8026c84:	6078      	str	r0, [r7, #4]
  (void) fp;
}
 8026c86:	bf00      	nop
 8026c88:	370c      	adds	r7, #12
 8026c8a:	46bd      	mov	sp, r7
 8026c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c90:	4770      	bx	lr

08026c92 <p_read>:
static size_t p_read(void *fd, void *buf, size_t len) {
 8026c92:	b480      	push	{r7}
 8026c94:	b085      	sub	sp, #20
 8026c96:	af00      	add	r7, sp, #0
 8026c98:	60f8      	str	r0, [r7, #12]
 8026c9a:	60b9      	str	r1, [r7, #8]
 8026c9c:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8026c9e:	2300      	movs	r3, #0
}
 8026ca0:	4618      	mov	r0, r3
 8026ca2:	3714      	adds	r7, #20
 8026ca4:	46bd      	mov	sp, r7
 8026ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026caa:	4770      	bx	lr

08026cac <p_write>:
static size_t p_write(void *fd, const void *buf, size_t len) {
 8026cac:	b480      	push	{r7}
 8026cae:	b085      	sub	sp, #20
 8026cb0:	af00      	add	r7, sp, #0
 8026cb2:	60f8      	str	r0, [r7, #12]
 8026cb4:	60b9      	str	r1, [r7, #8]
 8026cb6:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8026cb8:	2300      	movs	r3, #0
}
 8026cba:	4618      	mov	r0, r3
 8026cbc:	3714      	adds	r7, #20
 8026cbe:	46bd      	mov	sp, r7
 8026cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026cc4:	4770      	bx	lr

08026cc6 <p_seek>:
static size_t p_seek(void *fd, size_t offset) {
 8026cc6:	b480      	push	{r7}
 8026cc8:	b083      	sub	sp, #12
 8026cca:	af00      	add	r7, sp, #0
 8026ccc:	6078      	str	r0, [r7, #4]
 8026cce:	6039      	str	r1, [r7, #0]
  (void) fd, (void) offset;
  return (size_t) ~0;
 8026cd0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8026cd4:	4618      	mov	r0, r3
 8026cd6:	370c      	adds	r7, #12
 8026cd8:	46bd      	mov	sp, r7
 8026cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026cde:	4770      	bx	lr

08026ce0 <p_rename>:
static bool p_rename(const char *from, const char *to) {
 8026ce0:	b480      	push	{r7}
 8026ce2:	b083      	sub	sp, #12
 8026ce4:	af00      	add	r7, sp, #0
 8026ce6:	6078      	str	r0, [r7, #4]
 8026ce8:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 8026cea:	2300      	movs	r3, #0
}
 8026cec:	4618      	mov	r0, r3
 8026cee:	370c      	adds	r7, #12
 8026cf0:	46bd      	mov	sp, r7
 8026cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026cf6:	4770      	bx	lr

08026cf8 <p_remove>:
static bool p_remove(const char *path) {
 8026cf8:	b480      	push	{r7}
 8026cfa:	b083      	sub	sp, #12
 8026cfc:	af00      	add	r7, sp, #0
 8026cfe:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8026d00:	2300      	movs	r3, #0
}
 8026d02:	4618      	mov	r0, r3
 8026d04:	370c      	adds	r7, #12
 8026d06:	46bd      	mov	sp, r7
 8026d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026d0c:	4770      	bx	lr

08026d0e <p_mkdir>:
static bool p_mkdir(const char *path) {
 8026d0e:	b480      	push	{r7}
 8026d10:	b083      	sub	sp, #12
 8026d12:	af00      	add	r7, sp, #0
 8026d14:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8026d16:	2300      	movs	r3, #0
}
 8026d18:	4618      	mov	r0, r3
 8026d1a:	370c      	adds	r7, #12
 8026d1c:	46bd      	mov	sp, r7
 8026d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026d22:	4770      	bx	lr

08026d24 <mg_ncasecmp>:





static int mg_ncasecmp(const char *s1, const char *s2, size_t len) {
 8026d24:	b480      	push	{r7}
 8026d26:	b089      	sub	sp, #36	@ 0x24
 8026d28:	af00      	add	r7, sp, #0
 8026d2a:	60f8      	str	r0, [r7, #12]
 8026d2c:	60b9      	str	r1, [r7, #8]
 8026d2e:	607a      	str	r2, [r7, #4]
  int diff = 0;
 8026d30:	2300      	movs	r3, #0
 8026d32:	61fb      	str	r3, [r7, #28]
  if (len > 0) do {
 8026d34:	687b      	ldr	r3, [r7, #4]
 8026d36:	2b00      	cmp	r3, #0
 8026d38:	d02d      	beq.n	8026d96 <mg_ncasecmp+0x72>
      int c = *s1++, d = *s2++;
 8026d3a:	68fb      	ldr	r3, [r7, #12]
 8026d3c:	1c5a      	adds	r2, r3, #1
 8026d3e:	60fa      	str	r2, [r7, #12]
 8026d40:	781b      	ldrb	r3, [r3, #0]
 8026d42:	61bb      	str	r3, [r7, #24]
 8026d44:	68bb      	ldr	r3, [r7, #8]
 8026d46:	1c5a      	adds	r2, r3, #1
 8026d48:	60ba      	str	r2, [r7, #8]
 8026d4a:	781b      	ldrb	r3, [r3, #0]
 8026d4c:	617b      	str	r3, [r7, #20]
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
 8026d4e:	69bb      	ldr	r3, [r7, #24]
 8026d50:	2b40      	cmp	r3, #64	@ 0x40
 8026d52:	dd05      	ble.n	8026d60 <mg_ncasecmp+0x3c>
 8026d54:	69bb      	ldr	r3, [r7, #24]
 8026d56:	2b5a      	cmp	r3, #90	@ 0x5a
 8026d58:	dc02      	bgt.n	8026d60 <mg_ncasecmp+0x3c>
 8026d5a:	69bb      	ldr	r3, [r7, #24]
 8026d5c:	3320      	adds	r3, #32
 8026d5e:	61bb      	str	r3, [r7, #24]
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 8026d60:	697b      	ldr	r3, [r7, #20]
 8026d62:	2b40      	cmp	r3, #64	@ 0x40
 8026d64:	dd05      	ble.n	8026d72 <mg_ncasecmp+0x4e>
 8026d66:	697b      	ldr	r3, [r7, #20]
 8026d68:	2b5a      	cmp	r3, #90	@ 0x5a
 8026d6a:	dc02      	bgt.n	8026d72 <mg_ncasecmp+0x4e>
 8026d6c:	697b      	ldr	r3, [r7, #20]
 8026d6e:	3320      	adds	r3, #32
 8026d70:	617b      	str	r3, [r7, #20]
      diff = c - d;
 8026d72:	69ba      	ldr	r2, [r7, #24]
 8026d74:	697b      	ldr	r3, [r7, #20]
 8026d76:	1ad3      	subs	r3, r2, r3
 8026d78:	61fb      	str	r3, [r7, #28]
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
 8026d7a:	69fb      	ldr	r3, [r7, #28]
 8026d7c:	2b00      	cmp	r3, #0
 8026d7e:	d10a      	bne.n	8026d96 <mg_ncasecmp+0x72>
 8026d80:	68fb      	ldr	r3, [r7, #12]
 8026d82:	3b01      	subs	r3, #1
 8026d84:	781b      	ldrb	r3, [r3, #0]
 8026d86:	2b00      	cmp	r3, #0
 8026d88:	d005      	beq.n	8026d96 <mg_ncasecmp+0x72>
 8026d8a:	687b      	ldr	r3, [r7, #4]
 8026d8c:	3b01      	subs	r3, #1
 8026d8e:	607b      	str	r3, [r7, #4]
 8026d90:	687b      	ldr	r3, [r7, #4]
 8026d92:	2b00      	cmp	r3, #0
 8026d94:	d1d1      	bne.n	8026d3a <mg_ncasecmp+0x16>
  return diff;
 8026d96:	69fb      	ldr	r3, [r7, #28]
}
 8026d98:	4618      	mov	r0, r3
 8026d9a:	3724      	adds	r7, #36	@ 0x24
 8026d9c:	46bd      	mov	sp, r7
 8026d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026da2:	4770      	bx	lr

08026da4 <mg_to_size_t>:

bool mg_to_size_t(struct mg_str str, size_t *val);
bool mg_to_size_t(struct mg_str str, size_t *val) {
 8026da4:	b480      	push	{r7}
 8026da6:	b08b      	sub	sp, #44	@ 0x2c
 8026da8:	af00      	add	r7, sp, #0
 8026daa:	f107 0308 	add.w	r3, r7, #8
 8026dae:	e883 0003 	stmia.w	r3, {r0, r1}
 8026db2:	607a      	str	r2, [r7, #4]
  size_t i = 0, max = (size_t) -1, max2 = max / 10, result = 0, ndigits = 0;
 8026db4:	2300      	movs	r3, #0
 8026db6:	627b      	str	r3, [r7, #36]	@ 0x24
 8026db8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8026dbc:	61bb      	str	r3, [r7, #24]
 8026dbe:	69bb      	ldr	r3, [r7, #24]
 8026dc0:	4a42      	ldr	r2, [pc, #264]	@ (8026ecc <mg_to_size_t+0x128>)
 8026dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8026dc6:	08db      	lsrs	r3, r3, #3
 8026dc8:	617b      	str	r3, [r7, #20]
 8026dca:	2300      	movs	r3, #0
 8026dcc:	623b      	str	r3, [r7, #32]
 8026dce:	2300      	movs	r3, #0
 8026dd0:	61fb      	str	r3, [r7, #28]
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 8026dd2:	e002      	b.n	8026dda <mg_to_size_t+0x36>
 8026dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026dd6:	3301      	adds	r3, #1
 8026dd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8026dda:	68fb      	ldr	r3, [r7, #12]
 8026ddc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8026dde:	429a      	cmp	r2, r3
 8026de0:	d20b      	bcs.n	8026dfa <mg_to_size_t+0x56>
 8026de2:	68ba      	ldr	r2, [r7, #8]
 8026de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026de6:	4413      	add	r3, r2
 8026de8:	781b      	ldrb	r3, [r3, #0]
 8026dea:	2b20      	cmp	r3, #32
 8026dec:	d0f2      	beq.n	8026dd4 <mg_to_size_t+0x30>
 8026dee:	68ba      	ldr	r2, [r7, #8]
 8026df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026df2:	4413      	add	r3, r2
 8026df4:	781b      	ldrb	r3, [r3, #0]
 8026df6:	2b09      	cmp	r3, #9
 8026df8:	d0ec      	beq.n	8026dd4 <mg_to_size_t+0x30>
  if (i < str.len && str.buf[i] == '-') return false;
 8026dfa:	68fb      	ldr	r3, [r7, #12]
 8026dfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8026dfe:	429a      	cmp	r2, r3
 8026e00:	d22b      	bcs.n	8026e5a <mg_to_size_t+0xb6>
 8026e02:	68ba      	ldr	r2, [r7, #8]
 8026e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026e06:	4413      	add	r3, r2
 8026e08:	781b      	ldrb	r3, [r3, #0]
 8026e0a:	2b2d      	cmp	r3, #45	@ 0x2d
 8026e0c:	d125      	bne.n	8026e5a <mg_to_size_t+0xb6>
 8026e0e:	2300      	movs	r3, #0
 8026e10:	e056      	b.n	8026ec0 <mg_to_size_t+0x11c>
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
    size_t digit = (size_t) (str.buf[i] - '0');
 8026e12:	68ba      	ldr	r2, [r7, #8]
 8026e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026e16:	4413      	add	r3, r2
 8026e18:	781b      	ldrb	r3, [r3, #0]
 8026e1a:	3b30      	subs	r3, #48	@ 0x30
 8026e1c:	613b      	str	r3, [r7, #16]
    if (result > max2) return false;  // Overflow
 8026e1e:	6a3a      	ldr	r2, [r7, #32]
 8026e20:	697b      	ldr	r3, [r7, #20]
 8026e22:	429a      	cmp	r2, r3
 8026e24:	d901      	bls.n	8026e2a <mg_to_size_t+0x86>
 8026e26:	2300      	movs	r3, #0
 8026e28:	e04a      	b.n	8026ec0 <mg_to_size_t+0x11c>
    result *= 10;
 8026e2a:	6a3a      	ldr	r2, [r7, #32]
 8026e2c:	4613      	mov	r3, r2
 8026e2e:	009b      	lsls	r3, r3, #2
 8026e30:	4413      	add	r3, r2
 8026e32:	005b      	lsls	r3, r3, #1
 8026e34:	623b      	str	r3, [r7, #32]
    if (result > max - digit) return false;  // Overflow
 8026e36:	69ba      	ldr	r2, [r7, #24]
 8026e38:	693b      	ldr	r3, [r7, #16]
 8026e3a:	1ad3      	subs	r3, r2, r3
 8026e3c:	6a3a      	ldr	r2, [r7, #32]
 8026e3e:	429a      	cmp	r2, r3
 8026e40:	d901      	bls.n	8026e46 <mg_to_size_t+0xa2>
 8026e42:	2300      	movs	r3, #0
 8026e44:	e03c      	b.n	8026ec0 <mg_to_size_t+0x11c>
    result += digit;
 8026e46:	6a3a      	ldr	r2, [r7, #32]
 8026e48:	693b      	ldr	r3, [r7, #16]
 8026e4a:	4413      	add	r3, r2
 8026e4c:	623b      	str	r3, [r7, #32]
    i++, ndigits++;
 8026e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026e50:	3301      	adds	r3, #1
 8026e52:	627b      	str	r3, [r7, #36]	@ 0x24
 8026e54:	69fb      	ldr	r3, [r7, #28]
 8026e56:	3301      	adds	r3, #1
 8026e58:	61fb      	str	r3, [r7, #28]
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 8026e5a:	68fb      	ldr	r3, [r7, #12]
 8026e5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8026e5e:	429a      	cmp	r2, r3
 8026e60:	d20f      	bcs.n	8026e82 <mg_to_size_t+0xde>
 8026e62:	68ba      	ldr	r2, [r7, #8]
 8026e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026e66:	4413      	add	r3, r2
 8026e68:	781b      	ldrb	r3, [r3, #0]
 8026e6a:	2b2f      	cmp	r3, #47	@ 0x2f
 8026e6c:	d909      	bls.n	8026e82 <mg_to_size_t+0xde>
 8026e6e:	68ba      	ldr	r2, [r7, #8]
 8026e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026e72:	4413      	add	r3, r2
 8026e74:	781b      	ldrb	r3, [r3, #0]
 8026e76:	2b39      	cmp	r3, #57	@ 0x39
 8026e78:	d9cb      	bls.n	8026e12 <mg_to_size_t+0x6e>
  }
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 8026e7a:	e002      	b.n	8026e82 <mg_to_size_t+0xde>
 8026e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026e7e:	3301      	adds	r3, #1
 8026e80:	627b      	str	r3, [r7, #36]	@ 0x24
 8026e82:	68fb      	ldr	r3, [r7, #12]
 8026e84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8026e86:	429a      	cmp	r2, r3
 8026e88:	d20b      	bcs.n	8026ea2 <mg_to_size_t+0xfe>
 8026e8a:	68ba      	ldr	r2, [r7, #8]
 8026e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026e8e:	4413      	add	r3, r2
 8026e90:	781b      	ldrb	r3, [r3, #0]
 8026e92:	2b20      	cmp	r3, #32
 8026e94:	d0f2      	beq.n	8026e7c <mg_to_size_t+0xd8>
 8026e96:	68ba      	ldr	r2, [r7, #8]
 8026e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026e9a:	4413      	add	r3, r2
 8026e9c:	781b      	ldrb	r3, [r3, #0]
 8026e9e:	2b09      	cmp	r3, #9
 8026ea0:	d0ec      	beq.n	8026e7c <mg_to_size_t+0xd8>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 8026ea2:	69fb      	ldr	r3, [r7, #28]
 8026ea4:	2b00      	cmp	r3, #0
 8026ea6:	d101      	bne.n	8026eac <mg_to_size_t+0x108>
 8026ea8:	2300      	movs	r3, #0
 8026eaa:	e009      	b.n	8026ec0 <mg_to_size_t+0x11c>
  if (i != str.len) return false;  // Ditto
 8026eac:	68fb      	ldr	r3, [r7, #12]
 8026eae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8026eb0:	429a      	cmp	r2, r3
 8026eb2:	d001      	beq.n	8026eb8 <mg_to_size_t+0x114>
 8026eb4:	2300      	movs	r3, #0
 8026eb6:	e003      	b.n	8026ec0 <mg_to_size_t+0x11c>
  *val = (size_t) result;
 8026eb8:	687b      	ldr	r3, [r7, #4]
 8026eba:	6a3a      	ldr	r2, [r7, #32]
 8026ebc:	601a      	str	r2, [r3, #0]
  return true;
 8026ebe:	2301      	movs	r3, #1
}
 8026ec0:	4618      	mov	r0, r3
 8026ec2:	372c      	adds	r7, #44	@ 0x2c
 8026ec4:	46bd      	mov	sp, r7
 8026ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026eca:	4770      	bx	lr
 8026ecc:	cccccccd 	.word	0xcccccccd

08026ed0 <mg_http_var>:
  } else {
    MG_ERROR(("%lu oom %d->%d ", c->id, (int) c->send.size, (int) need));
  }
}

struct mg_str mg_http_var(struct mg_str buf, struct mg_str name) {
 8026ed0:	b082      	sub	sp, #8
 8026ed2:	b580      	push	{r7, lr}
 8026ed4:	b08e      	sub	sp, #56	@ 0x38
 8026ed6:	af02      	add	r7, sp, #8
 8026ed8:	60f8      	str	r0, [r7, #12]
 8026eda:	1d38      	adds	r0, r7, #4
 8026edc:	e880 0006 	stmia.w	r0, {r1, r2}
 8026ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct mg_str entry, k, v, result = mg_str_n(NULL, 0);
 8026ee2:	f107 0310 	add.w	r3, r7, #16
 8026ee6:	2200      	movs	r2, #0
 8026ee8:	2100      	movs	r1, #0
 8026eea:	4618      	mov	r0, r3
 8026eec:	f00a fe97 	bl	8031c1e <mg_str_n>
  while (mg_span(buf, &entry, &buf, '&')) {
 8026ef0:	e023      	b.n	8026f3a <mg_http_var+0x6a>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 8026ef2:	f107 0318 	add.w	r3, r7, #24
 8026ef6:	f107 0220 	add.w	r2, r7, #32
 8026efa:	213d      	movs	r1, #61	@ 0x3d
 8026efc:	9100      	str	r1, [sp, #0]
 8026efe:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8026f02:	c903      	ldmia	r1, {r0, r1}
 8026f04:	f00b f835 	bl	8031f72 <mg_span>
 8026f08:	4603      	mov	r3, r0
 8026f0a:	2b00      	cmp	r3, #0
 8026f0c:	d015      	beq.n	8026f3a <mg_http_var+0x6a>
 8026f0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8026f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026f12:	429a      	cmp	r2, r3
 8026f14:	d111      	bne.n	8026f3a <mg_http_var+0x6a>
        mg_ncasecmp(name.buf, k.buf, k.len) == 0) {
 8026f16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8026f18:	6a39      	ldr	r1, [r7, #32]
 8026f1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8026f1c:	4618      	mov	r0, r3
 8026f1e:	f7ff ff01 	bl	8026d24 <mg_ncasecmp>
 8026f22:	4603      	mov	r3, r0
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 8026f24:	2b00      	cmp	r3, #0
 8026f26:	d108      	bne.n	8026f3a <mg_http_var+0x6a>
      result = v;
 8026f28:	f107 0310 	add.w	r3, r7, #16
 8026f2c:	f107 0218 	add.w	r2, r7, #24
 8026f30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8026f34:	e883 0003 	stmia.w	r3, {r0, r1}
      break;
 8026f38:	e00b      	b.n	8026f52 <mg_http_var+0x82>
  while (mg_span(buf, &entry, &buf, '&')) {
 8026f3a:	1d3b      	adds	r3, r7, #4
 8026f3c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8026f40:	2126      	movs	r1, #38	@ 0x26
 8026f42:	9100      	str	r1, [sp, #0]
 8026f44:	1d39      	adds	r1, r7, #4
 8026f46:	c903      	ldmia	r1, {r0, r1}
 8026f48:	f00b f813 	bl	8031f72 <mg_span>
 8026f4c:	4603      	mov	r3, r0
 8026f4e:	2b00      	cmp	r3, #0
 8026f50:	d1cf      	bne.n	8026ef2 <mg_http_var+0x22>
    }
  }
  return result;
 8026f52:	68fb      	ldr	r3, [r7, #12]
 8026f54:	461a      	mov	r2, r3
 8026f56:	f107 0310 	add.w	r3, r7, #16
 8026f5a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8026f5e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8026f62:	68f8      	ldr	r0, [r7, #12]
 8026f64:	3730      	adds	r7, #48	@ 0x30
 8026f66:	46bd      	mov	sp, r7
 8026f68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8026f6c:	b002      	add	sp, #8
 8026f6e:	4770      	bx	lr

08026f70 <mg_http_get_var>:

int mg_http_get_var(const struct mg_str *buf, const char *name, char *dst,
                    size_t dst_len) {
 8026f70:	b580      	push	{r7, lr}
 8026f72:	b08c      	sub	sp, #48	@ 0x30
 8026f74:	af02      	add	r7, sp, #8
 8026f76:	60f8      	str	r0, [r7, #12]
 8026f78:	60b9      	str	r1, [r7, #8]
 8026f7a:	607a      	str	r2, [r7, #4]
 8026f7c:	603b      	str	r3, [r7, #0]
  int len;
  if (dst != NULL && dst_len > 0) {
 8026f7e:	687b      	ldr	r3, [r7, #4]
 8026f80:	2b00      	cmp	r3, #0
 8026f82:	d005      	beq.n	8026f90 <mg_http_get_var+0x20>
 8026f84:	683b      	ldr	r3, [r7, #0]
 8026f86:	2b00      	cmp	r3, #0
 8026f88:	d002      	beq.n	8026f90 <mg_http_get_var+0x20>
    dst[0] = '\0';  // If destination buffer is valid, always nul-terminate it
 8026f8a:	687b      	ldr	r3, [r7, #4]
 8026f8c:	2200      	movs	r2, #0
 8026f8e:	701a      	strb	r2, [r3, #0]
  }
  if (dst == NULL || dst_len == 0) {
 8026f90:	687b      	ldr	r3, [r7, #4]
 8026f92:	2b00      	cmp	r3, #0
 8026f94:	d002      	beq.n	8026f9c <mg_http_get_var+0x2c>
 8026f96:	683b      	ldr	r3, [r7, #0]
 8026f98:	2b00      	cmp	r3, #0
 8026f9a:	d103      	bne.n	8026fa4 <mg_http_get_var+0x34>
    len = -2;  // Bad destination
 8026f9c:	f06f 0301 	mvn.w	r3, #1
 8026fa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8026fa2:	e033      	b.n	802700c <mg_http_get_var+0x9c>
  } else if (buf->buf == NULL || name == NULL || buf->len == 0) {
 8026fa4:	68fb      	ldr	r3, [r7, #12]
 8026fa6:	681b      	ldr	r3, [r3, #0]
 8026fa8:	2b00      	cmp	r3, #0
 8026faa:	d006      	beq.n	8026fba <mg_http_get_var+0x4a>
 8026fac:	68bb      	ldr	r3, [r7, #8]
 8026fae:	2b00      	cmp	r3, #0
 8026fb0:	d003      	beq.n	8026fba <mg_http_get_var+0x4a>
 8026fb2:	68fb      	ldr	r3, [r7, #12]
 8026fb4:	685b      	ldr	r3, [r3, #4]
 8026fb6:	2b00      	cmp	r3, #0
 8026fb8:	d103      	bne.n	8026fc2 <mg_http_get_var+0x52>
    len = -1;  // Bad source
 8026fba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8026fbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8026fc0:	e024      	b.n	802700c <mg_http_get_var+0x9c>
  } else {
    struct mg_str v = mg_http_var(*buf, mg_str(name));
 8026fc2:	f107 031c 	add.w	r3, r7, #28
 8026fc6:	68b9      	ldr	r1, [r7, #8]
 8026fc8:	4618      	mov	r0, r3
 8026fca:	f00a fe0b 	bl	8031be4 <mg_str_s>
 8026fce:	f107 0014 	add.w	r0, r7, #20
 8026fd2:	68fa      	ldr	r2, [r7, #12]
 8026fd4:	6a3b      	ldr	r3, [r7, #32]
 8026fd6:	9300      	str	r3, [sp, #0]
 8026fd8:	69fb      	ldr	r3, [r7, #28]
 8026fda:	ca06      	ldmia	r2, {r1, r2}
 8026fdc:	f7ff ff78 	bl	8026ed0 <mg_http_var>
    if (v.buf == NULL) {
 8026fe0:	697b      	ldr	r3, [r7, #20]
 8026fe2:	2b00      	cmp	r3, #0
 8026fe4:	d103      	bne.n	8026fee <mg_http_get_var+0x7e>
      len = -4;  // Name does not exist
 8026fe6:	f06f 0303 	mvn.w	r3, #3
 8026fea:	627b      	str	r3, [r7, #36]	@ 0x24
 8026fec:	e00e      	b.n	802700c <mg_http_get_var+0x9c>
    } else {
      len = mg_url_decode(v.buf, v.len, dst, dst_len, 1);
 8026fee:	6978      	ldr	r0, [r7, #20]
 8026ff0:	69b9      	ldr	r1, [r7, #24]
 8026ff2:	2301      	movs	r3, #1
 8026ff4:	9300      	str	r3, [sp, #0]
 8026ff6:	683b      	ldr	r3, [r7, #0]
 8026ff8:	687a      	ldr	r2, [r7, #4]
 8026ffa:	f000 f82e 	bl	802705a <mg_url_decode>
 8026ffe:	6278      	str	r0, [r7, #36]	@ 0x24
      if (len < 0) len = -3;  // Failed to decode
 8027000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027002:	2b00      	cmp	r3, #0
 8027004:	da02      	bge.n	802700c <mg_http_get_var+0x9c>
 8027006:	f06f 0302 	mvn.w	r3, #2
 802700a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  return len;
 802700c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 802700e:	4618      	mov	r0, r3
 8027010:	3728      	adds	r7, #40	@ 0x28
 8027012:	46bd      	mov	sp, r7
 8027014:	bd80      	pop	{r7, pc}

08027016 <isx>:

static bool isx(int c) {
 8027016:	b480      	push	{r7}
 8027018:	b083      	sub	sp, #12
 802701a:	af00      	add	r7, sp, #0
 802701c:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 802701e:	687b      	ldr	r3, [r7, #4]
 8027020:	2b2f      	cmp	r3, #47	@ 0x2f
 8027022:	dd02      	ble.n	802702a <isx+0x14>
 8027024:	687b      	ldr	r3, [r7, #4]
 8027026:	2b39      	cmp	r3, #57	@ 0x39
 8027028:	dd0b      	ble.n	8027042 <isx+0x2c>
 802702a:	687b      	ldr	r3, [r7, #4]
 802702c:	2b60      	cmp	r3, #96	@ 0x60
 802702e:	dd02      	ble.n	8027036 <isx+0x20>
 8027030:	687b      	ldr	r3, [r7, #4]
 8027032:	2b66      	cmp	r3, #102	@ 0x66
 8027034:	dd05      	ble.n	8027042 <isx+0x2c>
 8027036:	687b      	ldr	r3, [r7, #4]
 8027038:	2b40      	cmp	r3, #64	@ 0x40
 802703a:	dd04      	ble.n	8027046 <isx+0x30>
         (c >= 'A' && c <= 'F');
 802703c:	687b      	ldr	r3, [r7, #4]
 802703e:	2b46      	cmp	r3, #70	@ 0x46
 8027040:	dc01      	bgt.n	8027046 <isx+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8027042:	2301      	movs	r3, #1
 8027044:	e000      	b.n	8027048 <isx+0x32>
 8027046:	2300      	movs	r3, #0
 8027048:	f003 0301 	and.w	r3, r3, #1
 802704c:	b2db      	uxtb	r3, r3
}
 802704e:	4618      	mov	r0, r3
 8027050:	370c      	adds	r7, #12
 8027052:	46bd      	mov	sp, r7
 8027054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027058:	4770      	bx	lr

0802705a <mg_url_decode>:

int mg_url_decode(const char *src, size_t src_len, char *dst, size_t dst_len,
                  int is_form_url_encoded) {
 802705a:	b580      	push	{r7, lr}
 802705c:	b08a      	sub	sp, #40	@ 0x28
 802705e:	af02      	add	r7, sp, #8
 8027060:	60f8      	str	r0, [r7, #12]
 8027062:	60b9      	str	r1, [r7, #8]
 8027064:	607a      	str	r2, [r7, #4]
 8027066:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8027068:	2300      	movs	r3, #0
 802706a:	61bb      	str	r3, [r7, #24]
 802706c:	69bb      	ldr	r3, [r7, #24]
 802706e:	61fb      	str	r3, [r7, #28]
 8027070:	e059      	b.n	8027126 <mg_url_decode+0xcc>
    if (src[i] == '%') {
 8027072:	68fa      	ldr	r2, [r7, #12]
 8027074:	69fb      	ldr	r3, [r7, #28]
 8027076:	4413      	add	r3, r2
 8027078:	781b      	ldrb	r3, [r3, #0]
 802707a:	2b25      	cmp	r3, #37	@ 0x25
 802707c:	d136      	bne.n	80270ec <mg_url_decode+0x92>
      // Use `i + 2 < src_len`, not `i < src_len - 2`, note small src_len
      if (i + 2 < src_len && isx(src[i + 1]) && isx(src[i + 2])) {
 802707e:	69fb      	ldr	r3, [r7, #28]
 8027080:	3302      	adds	r3, #2
 8027082:	68ba      	ldr	r2, [r7, #8]
 8027084:	429a      	cmp	r2, r3
 8027086:	d92e      	bls.n	80270e6 <mg_url_decode+0x8c>
 8027088:	69fb      	ldr	r3, [r7, #28]
 802708a:	3301      	adds	r3, #1
 802708c:	68fa      	ldr	r2, [r7, #12]
 802708e:	4413      	add	r3, r2
 8027090:	781b      	ldrb	r3, [r3, #0]
 8027092:	4618      	mov	r0, r3
 8027094:	f7ff ffbf 	bl	8027016 <isx>
 8027098:	4603      	mov	r3, r0
 802709a:	2b00      	cmp	r3, #0
 802709c:	d023      	beq.n	80270e6 <mg_url_decode+0x8c>
 802709e:	69fb      	ldr	r3, [r7, #28]
 80270a0:	3302      	adds	r3, #2
 80270a2:	68fa      	ldr	r2, [r7, #12]
 80270a4:	4413      	add	r3, r2
 80270a6:	781b      	ldrb	r3, [r3, #0]
 80270a8:	4618      	mov	r0, r3
 80270aa:	f7ff ffb4 	bl	8027016 <isx>
 80270ae:	4603      	mov	r3, r0
 80270b0:	2b00      	cmp	r3, #0
 80270b2:	d018      	beq.n	80270e6 <mg_url_decode+0x8c>
        mg_str_to_num(mg_str_n(src + i + 1, 2), 16, &dst[j], sizeof(uint8_t));
 80270b4:	69fb      	ldr	r3, [r7, #28]
 80270b6:	3301      	adds	r3, #1
 80270b8:	68fa      	ldr	r2, [r7, #12]
 80270ba:	18d1      	adds	r1, r2, r3
 80270bc:	f107 0310 	add.w	r3, r7, #16
 80270c0:	2202      	movs	r2, #2
 80270c2:	4618      	mov	r0, r3
 80270c4:	f00a fdab 	bl	8031c1e <mg_str_n>
 80270c8:	687a      	ldr	r2, [r7, #4]
 80270ca:	69bb      	ldr	r3, [r7, #24]
 80270cc:	4413      	add	r3, r2
 80270ce:	2201      	movs	r2, #1
 80270d0:	9200      	str	r2, [sp, #0]
 80270d2:	2210      	movs	r2, #16
 80270d4:	f107 0110 	add.w	r1, r7, #16
 80270d8:	c903      	ldmia	r1, {r0, r1}
 80270da:	f00a ffa7 	bl	803202c <mg_str_to_num>
        i += 2;
 80270de:	69fb      	ldr	r3, [r7, #28]
 80270e0:	3302      	adds	r3, #2
 80270e2:	61fb      	str	r3, [r7, #28]
 80270e4:	e019      	b.n	802711a <mg_url_decode+0xc0>
      } else {
        return -1;
 80270e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80270ea:	e03a      	b.n	8027162 <mg_url_decode+0x108>
      }
    } else if (is_form_url_encoded && src[i] == '+') {
 80270ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80270ee:	2b00      	cmp	r3, #0
 80270f0:	d00b      	beq.n	802710a <mg_url_decode+0xb0>
 80270f2:	68fa      	ldr	r2, [r7, #12]
 80270f4:	69fb      	ldr	r3, [r7, #28]
 80270f6:	4413      	add	r3, r2
 80270f8:	781b      	ldrb	r3, [r3, #0]
 80270fa:	2b2b      	cmp	r3, #43	@ 0x2b
 80270fc:	d105      	bne.n	802710a <mg_url_decode+0xb0>
      dst[j] = ' ';
 80270fe:	687a      	ldr	r2, [r7, #4]
 8027100:	69bb      	ldr	r3, [r7, #24]
 8027102:	4413      	add	r3, r2
 8027104:	2220      	movs	r2, #32
 8027106:	701a      	strb	r2, [r3, #0]
 8027108:	e007      	b.n	802711a <mg_url_decode+0xc0>
    } else {
      dst[j] = src[i];
 802710a:	68fa      	ldr	r2, [r7, #12]
 802710c:	69fb      	ldr	r3, [r7, #28]
 802710e:	441a      	add	r2, r3
 8027110:	6879      	ldr	r1, [r7, #4]
 8027112:	69bb      	ldr	r3, [r7, #24]
 8027114:	440b      	add	r3, r1
 8027116:	7812      	ldrb	r2, [r2, #0]
 8027118:	701a      	strb	r2, [r3, #0]
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 802711a:	69fb      	ldr	r3, [r7, #28]
 802711c:	3301      	adds	r3, #1
 802711e:	61fb      	str	r3, [r7, #28]
 8027120:	69bb      	ldr	r3, [r7, #24]
 8027122:	3301      	adds	r3, #1
 8027124:	61bb      	str	r3, [r7, #24]
 8027126:	69fa      	ldr	r2, [r7, #28]
 8027128:	68bb      	ldr	r3, [r7, #8]
 802712a:	429a      	cmp	r2, r3
 802712c:	d204      	bcs.n	8027138 <mg_url_decode+0xde>
 802712e:	69bb      	ldr	r3, [r7, #24]
 8027130:	3301      	adds	r3, #1
 8027132:	683a      	ldr	r2, [r7, #0]
 8027134:	429a      	cmp	r2, r3
 8027136:	d89c      	bhi.n	8027072 <mg_url_decode+0x18>
    }
  }
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
 8027138:	69ba      	ldr	r2, [r7, #24]
 802713a:	683b      	ldr	r3, [r7, #0]
 802713c:	429a      	cmp	r2, r3
 802713e:	d204      	bcs.n	802714a <mg_url_decode+0xf0>
 8027140:	687a      	ldr	r2, [r7, #4]
 8027142:	69bb      	ldr	r3, [r7, #24]
 8027144:	4413      	add	r3, r2
 8027146:	2200      	movs	r2, #0
 8027148:	701a      	strb	r2, [r3, #0]
  return i >= src_len && j < dst_len ? (int) j : -1;
 802714a:	69fa      	ldr	r2, [r7, #28]
 802714c:	68bb      	ldr	r3, [r7, #8]
 802714e:	429a      	cmp	r2, r3
 8027150:	d305      	bcc.n	802715e <mg_url_decode+0x104>
 8027152:	69ba      	ldr	r2, [r7, #24]
 8027154:	683b      	ldr	r3, [r7, #0]
 8027156:	429a      	cmp	r2, r3
 8027158:	d201      	bcs.n	802715e <mg_url_decode+0x104>
 802715a:	69bb      	ldr	r3, [r7, #24]
 802715c:	e001      	b.n	8027162 <mg_url_decode+0x108>
 802715e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8027162:	4618      	mov	r0, r3
 8027164:	3720      	adds	r7, #32
 8027166:	46bd      	mov	sp, r7
 8027168:	bd80      	pop	{r7, pc}

0802716a <isok>:

static bool isok(uint8_t c) {
 802716a:	b480      	push	{r7}
 802716c:	b083      	sub	sp, #12
 802716e:	af00      	add	r7, sp, #0
 8027170:	4603      	mov	r3, r0
 8027172:	71fb      	strb	r3, [r7, #7]
  return c == '\n' || c == '\r' || c == '\t' || c >= ' ';
 8027174:	79fb      	ldrb	r3, [r7, #7]
 8027176:	2b0a      	cmp	r3, #10
 8027178:	d008      	beq.n	802718c <isok+0x22>
 802717a:	79fb      	ldrb	r3, [r7, #7]
 802717c:	2b0d      	cmp	r3, #13
 802717e:	d005      	beq.n	802718c <isok+0x22>
 8027180:	79fb      	ldrb	r3, [r7, #7]
 8027182:	2b09      	cmp	r3, #9
 8027184:	d002      	beq.n	802718c <isok+0x22>
 8027186:	79fb      	ldrb	r3, [r7, #7]
 8027188:	2b1f      	cmp	r3, #31
 802718a:	d901      	bls.n	8027190 <isok+0x26>
 802718c:	2301      	movs	r3, #1
 802718e:	e000      	b.n	8027192 <isok+0x28>
 8027190:	2300      	movs	r3, #0
 8027192:	f003 0301 	and.w	r3, r3, #1
 8027196:	b2db      	uxtb	r3, r3
}
 8027198:	4618      	mov	r0, r3
 802719a:	370c      	adds	r7, #12
 802719c:	46bd      	mov	sp, r7
 802719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80271a2:	4770      	bx	lr

080271a4 <mg_http_get_request_len>:

int mg_http_get_request_len(const unsigned char *buf, size_t buf_len) {
 80271a4:	b580      	push	{r7, lr}
 80271a6:	b084      	sub	sp, #16
 80271a8:	af00      	add	r7, sp, #0
 80271aa:	6078      	str	r0, [r7, #4]
 80271ac:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < buf_len; i++) {
 80271ae:	2300      	movs	r3, #0
 80271b0:	60fb      	str	r3, [r7, #12]
 80271b2:	e03c      	b.n	802722e <mg_http_get_request_len+0x8a>
    if (!isok(buf[i])) return -1;
 80271b4:	687a      	ldr	r2, [r7, #4]
 80271b6:	68fb      	ldr	r3, [r7, #12]
 80271b8:	4413      	add	r3, r2
 80271ba:	781b      	ldrb	r3, [r3, #0]
 80271bc:	4618      	mov	r0, r3
 80271be:	f7ff ffd4 	bl	802716a <isok>
 80271c2:	4603      	mov	r3, r0
 80271c4:	f083 0301 	eor.w	r3, r3, #1
 80271c8:	b2db      	uxtb	r3, r3
 80271ca:	2b00      	cmp	r3, #0
 80271cc:	d002      	beq.n	80271d4 <mg_http_get_request_len+0x30>
 80271ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80271d2:	e031      	b.n	8027238 <mg_http_get_request_len+0x94>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 80271d4:	68fb      	ldr	r3, [r7, #12]
 80271d6:	2b00      	cmp	r3, #0
 80271d8:	d00c      	beq.n	80271f4 <mg_http_get_request_len+0x50>
 80271da:	687a      	ldr	r2, [r7, #4]
 80271dc:	68fb      	ldr	r3, [r7, #12]
 80271de:	4413      	add	r3, r2
 80271e0:	781b      	ldrb	r3, [r3, #0]
 80271e2:	2b0a      	cmp	r3, #10
 80271e4:	d106      	bne.n	80271f4 <mg_http_get_request_len+0x50>
 80271e6:	68fb      	ldr	r3, [r7, #12]
 80271e8:	3b01      	subs	r3, #1
 80271ea:	687a      	ldr	r2, [r7, #4]
 80271ec:	4413      	add	r3, r2
 80271ee:	781b      	ldrb	r3, [r3, #0]
 80271f0:	2b0a      	cmp	r3, #10
 80271f2:	d016      	beq.n	8027222 <mg_http_get_request_len+0x7e>
 80271f4:	68fb      	ldr	r3, [r7, #12]
 80271f6:	2b03      	cmp	r3, #3
 80271f8:	d916      	bls.n	8027228 <mg_http_get_request_len+0x84>
        (i > 3 && buf[i] == '\n' && buf[i - 1] == '\r' && buf[i - 2] == '\n'))
 80271fa:	687a      	ldr	r2, [r7, #4]
 80271fc:	68fb      	ldr	r3, [r7, #12]
 80271fe:	4413      	add	r3, r2
 8027200:	781b      	ldrb	r3, [r3, #0]
 8027202:	2b0a      	cmp	r3, #10
 8027204:	d110      	bne.n	8027228 <mg_http_get_request_len+0x84>
 8027206:	68fb      	ldr	r3, [r7, #12]
 8027208:	3b01      	subs	r3, #1
 802720a:	687a      	ldr	r2, [r7, #4]
 802720c:	4413      	add	r3, r2
 802720e:	781b      	ldrb	r3, [r3, #0]
 8027210:	2b0d      	cmp	r3, #13
 8027212:	d109      	bne.n	8027228 <mg_http_get_request_len+0x84>
 8027214:	68fb      	ldr	r3, [r7, #12]
 8027216:	3b02      	subs	r3, #2
 8027218:	687a      	ldr	r2, [r7, #4]
 802721a:	4413      	add	r3, r2
 802721c:	781b      	ldrb	r3, [r3, #0]
 802721e:	2b0a      	cmp	r3, #10
 8027220:	d102      	bne.n	8027228 <mg_http_get_request_len+0x84>
      return (int) i + 1;
 8027222:	68fb      	ldr	r3, [r7, #12]
 8027224:	3301      	adds	r3, #1
 8027226:	e007      	b.n	8027238 <mg_http_get_request_len+0x94>
  for (i = 0; i < buf_len; i++) {
 8027228:	68fb      	ldr	r3, [r7, #12]
 802722a:	3301      	adds	r3, #1
 802722c:	60fb      	str	r3, [r7, #12]
 802722e:	68fa      	ldr	r2, [r7, #12]
 8027230:	683b      	ldr	r3, [r7, #0]
 8027232:	429a      	cmp	r2, r3
 8027234:	d3be      	bcc.n	80271b4 <mg_http_get_request_len+0x10>
  }
  return 0;
 8027236:	2300      	movs	r3, #0
}
 8027238:	4618      	mov	r0, r3
 802723a:	3710      	adds	r7, #16
 802723c:	46bd      	mov	sp, r7
 802723e:	bd80      	pop	{r7, pc}

08027240 <mg_http_get_header>:
struct mg_str *mg_http_get_header(struct mg_http_message *h, const char *name) {
 8027240:	b580      	push	{r7, lr}
 8027242:	b088      	sub	sp, #32
 8027244:	af00      	add	r7, sp, #0
 8027246:	6078      	str	r0, [r7, #4]
 8027248:	6039      	str	r1, [r7, #0]
  size_t i, n = strlen(name), max = sizeof(h->headers) / sizeof(h->headers[0]);
 802724a:	6838      	ldr	r0, [r7, #0]
 802724c:	f7e9 f828 	bl	80102a0 <strlen>
 8027250:	61b8      	str	r0, [r7, #24]
 8027252:	231e      	movs	r3, #30
 8027254:	617b      	str	r3, [r7, #20]
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 8027256:	2300      	movs	r3, #0
 8027258:	61fb      	str	r3, [r7, #28]
 802725a:	e01f      	b.n	802729c <mg_http_get_header+0x5c>
    struct mg_str *k = &h->headers[i].name, *v = &h->headers[i].value;
 802725c:	69fb      	ldr	r3, [r7, #28]
 802725e:	3302      	adds	r3, #2
 8027260:	011b      	lsls	r3, r3, #4
 8027262:	687a      	ldr	r2, [r7, #4]
 8027264:	4413      	add	r3, r2
 8027266:	613b      	str	r3, [r7, #16]
 8027268:	69fb      	ldr	r3, [r7, #28]
 802726a:	011b      	lsls	r3, r3, #4
 802726c:	3328      	adds	r3, #40	@ 0x28
 802726e:	687a      	ldr	r2, [r7, #4]
 8027270:	4413      	add	r3, r2
 8027272:	60fb      	str	r3, [r7, #12]
    if (n == k->len && mg_ncasecmp(k->buf, name, n) == 0) return v;
 8027274:	693b      	ldr	r3, [r7, #16]
 8027276:	685b      	ldr	r3, [r3, #4]
 8027278:	69ba      	ldr	r2, [r7, #24]
 802727a:	429a      	cmp	r2, r3
 802727c:	d10b      	bne.n	8027296 <mg_http_get_header+0x56>
 802727e:	693b      	ldr	r3, [r7, #16]
 8027280:	681b      	ldr	r3, [r3, #0]
 8027282:	69ba      	ldr	r2, [r7, #24]
 8027284:	6839      	ldr	r1, [r7, #0]
 8027286:	4618      	mov	r0, r3
 8027288:	f7ff fd4c 	bl	8026d24 <mg_ncasecmp>
 802728c:	4603      	mov	r3, r0
 802728e:	2b00      	cmp	r3, #0
 8027290:	d101      	bne.n	8027296 <mg_http_get_header+0x56>
 8027292:	68fb      	ldr	r3, [r7, #12]
 8027294:	e010      	b.n	80272b8 <mg_http_get_header+0x78>
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 8027296:	69fb      	ldr	r3, [r7, #28]
 8027298:	3301      	adds	r3, #1
 802729a:	61fb      	str	r3, [r7, #28]
 802729c:	69fa      	ldr	r2, [r7, #28]
 802729e:	697b      	ldr	r3, [r7, #20]
 80272a0:	429a      	cmp	r2, r3
 80272a2:	d208      	bcs.n	80272b6 <mg_http_get_header+0x76>
 80272a4:	687a      	ldr	r2, [r7, #4]
 80272a6:	69fb      	ldr	r3, [r7, #28]
 80272a8:	3302      	adds	r3, #2
 80272aa:	011b      	lsls	r3, r3, #4
 80272ac:	4413      	add	r3, r2
 80272ae:	3304      	adds	r3, #4
 80272b0:	681b      	ldr	r3, [r3, #0]
 80272b2:	2b00      	cmp	r3, #0
 80272b4:	d1d2      	bne.n	802725c <mg_http_get_header+0x1c>
  }
  return NULL;
 80272b6:	2300      	movs	r3, #0
}
 80272b8:	4618      	mov	r0, r3
 80272ba:	3720      	adds	r7, #32
 80272bc:	46bd      	mov	sp, r7
 80272be:	bd80      	pop	{r7, pc}

080272c0 <vcb>:

// Is it a valid utf-8 continuation byte
static bool vcb(uint8_t c) {
 80272c0:	b480      	push	{r7}
 80272c2:	b083      	sub	sp, #12
 80272c4:	af00      	add	r7, sp, #0
 80272c6:	4603      	mov	r3, r0
 80272c8:	71fb      	strb	r3, [r7, #7]
  return (c & 0xc0) == 0x80;
 80272ca:	79fb      	ldrb	r3, [r7, #7]
 80272cc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80272d0:	2b80      	cmp	r3, #128	@ 0x80
 80272d2:	bf0c      	ite	eq
 80272d4:	2301      	moveq	r3, #1
 80272d6:	2300      	movne	r3, #0
 80272d8:	b2db      	uxtb	r3, r3
}
 80272da:	4618      	mov	r0, r3
 80272dc:	370c      	adds	r7, #12
 80272de:	46bd      	mov	sp, r7
 80272e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80272e4:	4770      	bx	lr

080272e6 <clen>:

// Get character length (valid utf-8). Used to parse method, URI, headers
static size_t clen(const char *s, const char *end) {
 80272e6:	b580      	push	{r7, lr}
 80272e8:	b086      	sub	sp, #24
 80272ea:	af00      	add	r7, sp, #0
 80272ec:	6078      	str	r0, [r7, #4]
 80272ee:	6039      	str	r1, [r7, #0]
  const unsigned char *u = (unsigned char *) s, c = *u;
 80272f0:	687b      	ldr	r3, [r7, #4]
 80272f2:	617b      	str	r3, [r7, #20]
 80272f4:	697b      	ldr	r3, [r7, #20]
 80272f6:	781b      	ldrb	r3, [r3, #0]
 80272f8:	74fb      	strb	r3, [r7, #19]
  long n = (long) (end - s);
 80272fa:	683a      	ldr	r2, [r7, #0]
 80272fc:	687b      	ldr	r3, [r7, #4]
 80272fe:	1ad3      	subs	r3, r2, r3
 8027300:	60fb      	str	r3, [r7, #12]
  if (c > ' ' && c < '~') return 1;  // Usual ascii printed char
 8027302:	7cfb      	ldrb	r3, [r7, #19]
 8027304:	2b20      	cmp	r3, #32
 8027306:	d904      	bls.n	8027312 <clen+0x2c>
 8027308:	7cfb      	ldrb	r3, [r7, #19]
 802730a:	2b7d      	cmp	r3, #125	@ 0x7d
 802730c:	d801      	bhi.n	8027312 <clen+0x2c>
 802730e:	2301      	movs	r3, #1
 8027310:	e054      	b.n	80273bc <clen+0xd6>
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 8027312:	7cfb      	ldrb	r3, [r7, #19]
 8027314:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8027318:	2bc0      	cmp	r3, #192	@ 0xc0
 802731a:	d10d      	bne.n	8027338 <clen+0x52>
 802731c:	68fb      	ldr	r3, [r7, #12]
 802731e:	2b01      	cmp	r3, #1
 8027320:	dd0a      	ble.n	8027338 <clen+0x52>
 8027322:	697b      	ldr	r3, [r7, #20]
 8027324:	3301      	adds	r3, #1
 8027326:	781b      	ldrb	r3, [r3, #0]
 8027328:	4618      	mov	r0, r3
 802732a:	f7ff ffc9 	bl	80272c0 <vcb>
 802732e:	4603      	mov	r3, r0
 8027330:	2b00      	cmp	r3, #0
 8027332:	d001      	beq.n	8027338 <clen+0x52>
 8027334:	2302      	movs	r3, #2
 8027336:	e041      	b.n	80273bc <clen+0xd6>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 8027338:	7cfb      	ldrb	r3, [r7, #19]
 802733a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 802733e:	2be0      	cmp	r3, #224	@ 0xe0
 8027340:	d116      	bne.n	8027370 <clen+0x8a>
 8027342:	68fb      	ldr	r3, [r7, #12]
 8027344:	2b02      	cmp	r3, #2
 8027346:	dd13      	ble.n	8027370 <clen+0x8a>
 8027348:	697b      	ldr	r3, [r7, #20]
 802734a:	3301      	adds	r3, #1
 802734c:	781b      	ldrb	r3, [r3, #0]
 802734e:	4618      	mov	r0, r3
 8027350:	f7ff ffb6 	bl	80272c0 <vcb>
 8027354:	4603      	mov	r3, r0
 8027356:	2b00      	cmp	r3, #0
 8027358:	d00a      	beq.n	8027370 <clen+0x8a>
 802735a:	697b      	ldr	r3, [r7, #20]
 802735c:	3302      	adds	r3, #2
 802735e:	781b      	ldrb	r3, [r3, #0]
 8027360:	4618      	mov	r0, r3
 8027362:	f7ff ffad 	bl	80272c0 <vcb>
 8027366:	4603      	mov	r3, r0
 8027368:	2b00      	cmp	r3, #0
 802736a:	d001      	beq.n	8027370 <clen+0x8a>
 802736c:	2303      	movs	r3, #3
 802736e:	e025      	b.n	80273bc <clen+0xd6>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 8027370:	7cfb      	ldrb	r3, [r7, #19]
 8027372:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8027376:	2bf0      	cmp	r3, #240	@ 0xf0
 8027378:	d11f      	bne.n	80273ba <clen+0xd4>
 802737a:	68fb      	ldr	r3, [r7, #12]
 802737c:	2b03      	cmp	r3, #3
 802737e:	dd1c      	ble.n	80273ba <clen+0xd4>
 8027380:	697b      	ldr	r3, [r7, #20]
 8027382:	3301      	adds	r3, #1
 8027384:	781b      	ldrb	r3, [r3, #0]
 8027386:	4618      	mov	r0, r3
 8027388:	f7ff ff9a 	bl	80272c0 <vcb>
 802738c:	4603      	mov	r3, r0
 802738e:	2b00      	cmp	r3, #0
 8027390:	d013      	beq.n	80273ba <clen+0xd4>
 8027392:	697b      	ldr	r3, [r7, #20]
 8027394:	3302      	adds	r3, #2
 8027396:	781b      	ldrb	r3, [r3, #0]
 8027398:	4618      	mov	r0, r3
 802739a:	f7ff ff91 	bl	80272c0 <vcb>
 802739e:	4603      	mov	r3, r0
 80273a0:	2b00      	cmp	r3, #0
 80273a2:	d00a      	beq.n	80273ba <clen+0xd4>
 80273a4:	697b      	ldr	r3, [r7, #20]
 80273a6:	3303      	adds	r3, #3
 80273a8:	781b      	ldrb	r3, [r3, #0]
 80273aa:	4618      	mov	r0, r3
 80273ac:	f7ff ff88 	bl	80272c0 <vcb>
 80273b0:	4603      	mov	r3, r0
 80273b2:	2b00      	cmp	r3, #0
 80273b4:	d001      	beq.n	80273ba <clen+0xd4>
    return 4;
 80273b6:	2304      	movs	r3, #4
 80273b8:	e000      	b.n	80273bc <clen+0xd6>
  return 0;
 80273ba:	2300      	movs	r3, #0
}
 80273bc:	4618      	mov	r0, r3
 80273be:	3718      	adds	r7, #24
 80273c0:	46bd      	mov	sp, r7
 80273c2:	bd80      	pop	{r7, pc}

080273c4 <skiptorn>:

// Skip until the newline. Return advanced `s`, or NULL on error
static const char *skiptorn(const char *s, const char *end, struct mg_str *v) {
 80273c4:	b480      	push	{r7}
 80273c6:	b085      	sub	sp, #20
 80273c8:	af00      	add	r7, sp, #0
 80273ca:	60f8      	str	r0, [r7, #12]
 80273cc:	60b9      	str	r1, [r7, #8]
 80273ce:	607a      	str	r2, [r7, #4]
  v->buf = (char *) s;
 80273d0:	687b      	ldr	r3, [r7, #4]
 80273d2:	68fa      	ldr	r2, [r7, #12]
 80273d4:	601a      	str	r2, [r3, #0]
  while (s < end && s[0] != '\n' && s[0] != '\r') s++, v->len++;  // To newline
 80273d6:	e007      	b.n	80273e8 <skiptorn+0x24>
 80273d8:	68fb      	ldr	r3, [r7, #12]
 80273da:	3301      	adds	r3, #1
 80273dc:	60fb      	str	r3, [r7, #12]
 80273de:	687b      	ldr	r3, [r7, #4]
 80273e0:	685b      	ldr	r3, [r3, #4]
 80273e2:	1c5a      	adds	r2, r3, #1
 80273e4:	687b      	ldr	r3, [r7, #4]
 80273e6:	605a      	str	r2, [r3, #4]
 80273e8:	68fa      	ldr	r2, [r7, #12]
 80273ea:	68bb      	ldr	r3, [r7, #8]
 80273ec:	429a      	cmp	r2, r3
 80273ee:	d207      	bcs.n	8027400 <skiptorn+0x3c>
 80273f0:	68fb      	ldr	r3, [r7, #12]
 80273f2:	781b      	ldrb	r3, [r3, #0]
 80273f4:	2b0a      	cmp	r3, #10
 80273f6:	d003      	beq.n	8027400 <skiptorn+0x3c>
 80273f8:	68fb      	ldr	r3, [r7, #12]
 80273fa:	781b      	ldrb	r3, [r3, #0]
 80273fc:	2b0d      	cmp	r3, #13
 80273fe:	d1eb      	bne.n	80273d8 <skiptorn+0x14>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 8027400:	68fa      	ldr	r2, [r7, #12]
 8027402:	68bb      	ldr	r3, [r7, #8]
 8027404:	429a      	cmp	r2, r3
 8027406:	d208      	bcs.n	802741a <skiptorn+0x56>
 8027408:	68fb      	ldr	r3, [r7, #12]
 802740a:	781b      	ldrb	r3, [r3, #0]
 802740c:	2b0d      	cmp	r3, #13
 802740e:	d106      	bne.n	802741e <skiptorn+0x5a>
 8027410:	68fb      	ldr	r3, [r7, #12]
 8027412:	3301      	adds	r3, #1
 8027414:	781b      	ldrb	r3, [r3, #0]
 8027416:	2b0a      	cmp	r3, #10
 8027418:	d001      	beq.n	802741e <skiptorn+0x5a>
 802741a:	2300      	movs	r3, #0
 802741c:	e017      	b.n	802744e <skiptorn+0x8a>
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 802741e:	68fa      	ldr	r2, [r7, #12]
 8027420:	68bb      	ldr	r3, [r7, #8]
 8027422:	429a      	cmp	r2, r3
 8027424:	d206      	bcs.n	8027434 <skiptorn+0x70>
 8027426:	68fb      	ldr	r3, [r7, #12]
 8027428:	781b      	ldrb	r3, [r3, #0]
 802742a:	2b0d      	cmp	r3, #13
 802742c:	d102      	bne.n	8027434 <skiptorn+0x70>
 802742e:	68fb      	ldr	r3, [r7, #12]
 8027430:	3301      	adds	r3, #1
 8027432:	60fb      	str	r3, [r7, #12]
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 8027434:	68fa      	ldr	r2, [r7, #12]
 8027436:	68bb      	ldr	r3, [r7, #8]
 8027438:	429a      	cmp	r2, r3
 802743a:	d205      	bcs.n	8027448 <skiptorn+0x84>
 802743c:	68fb      	ldr	r3, [r7, #12]
 802743e:	1c5a      	adds	r2, r3, #1
 8027440:	60fa      	str	r2, [r7, #12]
 8027442:	781b      	ldrb	r3, [r3, #0]
 8027444:	2b0a      	cmp	r3, #10
 8027446:	d001      	beq.n	802744c <skiptorn+0x88>
 8027448:	2300      	movs	r3, #0
 802744a:	e000      	b.n	802744e <skiptorn+0x8a>
  return s;
 802744c:	68fb      	ldr	r3, [r7, #12]
}
 802744e:	4618      	mov	r0, r3
 8027450:	3714      	adds	r7, #20
 8027452:	46bd      	mov	sp, r7
 8027454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027458:	4770      	bx	lr

0802745a <mg_http_parse_headers>:

static bool mg_http_parse_headers(const char *s, const char *end,
                                  struct mg_http_header *h, size_t max_hdrs) {
 802745a:	b580      	push	{r7, lr}
 802745c:	b08a      	sub	sp, #40	@ 0x28
 802745e:	af00      	add	r7, sp, #0
 8027460:	60f8      	str	r0, [r7, #12]
 8027462:	60b9      	str	r1, [r7, #8]
 8027464:	607a      	str	r2, [r7, #4]
 8027466:	603b      	str	r3, [r7, #0]
  size_t i, n;
  for (i = 0; i < max_hdrs; i++) {
 8027468:	2300      	movs	r3, #0
 802746a:	627b      	str	r3, [r7, #36]	@ 0x24
 802746c:	e09a      	b.n	80275a4 <mg_http_parse_headers+0x14a>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
 802746e:	2300      	movs	r3, #0
 8027470:	61bb      	str	r3, [r7, #24]
 8027472:	2300      	movs	r3, #0
 8027474:	61fb      	str	r3, [r7, #28]
 8027476:	2300      	movs	r3, #0
 8027478:	613b      	str	r3, [r7, #16]
 802747a:	2300      	movs	r3, #0
 802747c:	617b      	str	r3, [r7, #20]
    if (s >= end) return false;
 802747e:	68fa      	ldr	r2, [r7, #12]
 8027480:	68bb      	ldr	r3, [r7, #8]
 8027482:	429a      	cmp	r2, r3
 8027484:	d301      	bcc.n	802748a <mg_http_parse_headers+0x30>
 8027486:	2300      	movs	r3, #0
 8027488:	e092      	b.n	80275b0 <mg_http_parse_headers+0x156>
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 802748a:	68fb      	ldr	r3, [r7, #12]
 802748c:	781b      	ldrb	r3, [r3, #0]
 802748e:	2b0a      	cmp	r3, #10
 8027490:	f000 808d 	beq.w	80275ae <mg_http_parse_headers+0x154>
 8027494:	68fb      	ldr	r3, [r7, #12]
 8027496:	781b      	ldrb	r3, [r3, #0]
 8027498:	2b0d      	cmp	r3, #13
 802749a:	d105      	bne.n	80274a8 <mg_http_parse_headers+0x4e>
 802749c:	68fb      	ldr	r3, [r7, #12]
 802749e:	3301      	adds	r3, #1
 80274a0:	781b      	ldrb	r3, [r3, #0]
 80274a2:	2b0a      	cmp	r3, #10
 80274a4:	f000 8083 	beq.w	80275ae <mg_http_parse_headers+0x154>
    k.buf = (char *) s;
 80274a8:	68fb      	ldr	r3, [r7, #12]
 80274aa:	61bb      	str	r3, [r7, #24]
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 80274ac:	e007      	b.n	80274be <mg_http_parse_headers+0x64>
 80274ae:	68fa      	ldr	r2, [r7, #12]
 80274b0:	6a3b      	ldr	r3, [r7, #32]
 80274b2:	4413      	add	r3, r2
 80274b4:	60fb      	str	r3, [r7, #12]
 80274b6:	69fa      	ldr	r2, [r7, #28]
 80274b8:	6a3b      	ldr	r3, [r7, #32]
 80274ba:	4413      	add	r3, r2
 80274bc:	61fb      	str	r3, [r7, #28]
 80274be:	68fa      	ldr	r2, [r7, #12]
 80274c0:	68bb      	ldr	r3, [r7, #8]
 80274c2:	429a      	cmp	r2, r3
 80274c4:	d20b      	bcs.n	80274de <mg_http_parse_headers+0x84>
 80274c6:	68fb      	ldr	r3, [r7, #12]
 80274c8:	781b      	ldrb	r3, [r3, #0]
 80274ca:	2b3a      	cmp	r3, #58	@ 0x3a
 80274cc:	d007      	beq.n	80274de <mg_http_parse_headers+0x84>
 80274ce:	68b9      	ldr	r1, [r7, #8]
 80274d0:	68f8      	ldr	r0, [r7, #12]
 80274d2:	f7ff ff08 	bl	80272e6 <clen>
 80274d6:	6238      	str	r0, [r7, #32]
 80274d8:	6a3b      	ldr	r3, [r7, #32]
 80274da:	2b00      	cmp	r3, #0
 80274dc:	d1e7      	bne.n	80274ae <mg_http_parse_headers+0x54>
    if (k.len == 0) return false;                     // Empty name
 80274de:	69fb      	ldr	r3, [r7, #28]
 80274e0:	2b00      	cmp	r3, #0
 80274e2:	d101      	bne.n	80274e8 <mg_http_parse_headers+0x8e>
 80274e4:	2300      	movs	r3, #0
 80274e6:	e063      	b.n	80275b0 <mg_http_parse_headers+0x156>
    if (s >= end || clen(s, end) == 0) return false;  // Invalid UTF-8
 80274e8:	68fa      	ldr	r2, [r7, #12]
 80274ea:	68bb      	ldr	r3, [r7, #8]
 80274ec:	429a      	cmp	r2, r3
 80274ee:	d206      	bcs.n	80274fe <mg_http_parse_headers+0xa4>
 80274f0:	68b9      	ldr	r1, [r7, #8]
 80274f2:	68f8      	ldr	r0, [r7, #12]
 80274f4:	f7ff fef7 	bl	80272e6 <clen>
 80274f8:	4603      	mov	r3, r0
 80274fa:	2b00      	cmp	r3, #0
 80274fc:	d101      	bne.n	8027502 <mg_http_parse_headers+0xa8>
 80274fe:	2300      	movs	r3, #0
 8027500:	e056      	b.n	80275b0 <mg_http_parse_headers+0x156>
    if (*s++ != ':') return false;  // Invalid, not followed by :
 8027502:	68fb      	ldr	r3, [r7, #12]
 8027504:	1c5a      	adds	r2, r3, #1
 8027506:	60fa      	str	r2, [r7, #12]
 8027508:	781b      	ldrb	r3, [r3, #0]
 802750a:	2b3a      	cmp	r3, #58	@ 0x3a
 802750c:	d004      	beq.n	8027518 <mg_http_parse_headers+0xbe>
 802750e:	2300      	movs	r3, #0
 8027510:	e04e      	b.n	80275b0 <mg_http_parse_headers+0x156>
    // if (clen(s, end) == 0) return false;        // Invalid UTF-8
    while (s < end && (s[0] == ' ' || s[0] == '\t')) s++;  // Skip spaces
 8027512:	68fb      	ldr	r3, [r7, #12]
 8027514:	3301      	adds	r3, #1
 8027516:	60fb      	str	r3, [r7, #12]
 8027518:	68fa      	ldr	r2, [r7, #12]
 802751a:	68bb      	ldr	r3, [r7, #8]
 802751c:	429a      	cmp	r2, r3
 802751e:	d207      	bcs.n	8027530 <mg_http_parse_headers+0xd6>
 8027520:	68fb      	ldr	r3, [r7, #12]
 8027522:	781b      	ldrb	r3, [r3, #0]
 8027524:	2b20      	cmp	r3, #32
 8027526:	d0f4      	beq.n	8027512 <mg_http_parse_headers+0xb8>
 8027528:	68fb      	ldr	r3, [r7, #12]
 802752a:	781b      	ldrb	r3, [r3, #0]
 802752c:	2b09      	cmp	r3, #9
 802752e:	d0f0      	beq.n	8027512 <mg_http_parse_headers+0xb8>
    if ((s = skiptorn(s, end, &v)) == NULL) return false;
 8027530:	f107 0310 	add.w	r3, r7, #16
 8027534:	461a      	mov	r2, r3
 8027536:	68b9      	ldr	r1, [r7, #8]
 8027538:	68f8      	ldr	r0, [r7, #12]
 802753a:	f7ff ff43 	bl	80273c4 <skiptorn>
 802753e:	60f8      	str	r0, [r7, #12]
 8027540:	68fb      	ldr	r3, [r7, #12]
 8027542:	2b00      	cmp	r3, #0
 8027544:	d104      	bne.n	8027550 <mg_http_parse_headers+0xf6>
 8027546:	2300      	movs	r3, #0
 8027548:	e032      	b.n	80275b0 <mg_http_parse_headers+0x156>
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
      v.len--;  // Trim spaces
 802754a:	697b      	ldr	r3, [r7, #20]
 802754c:	3b01      	subs	r3, #1
 802754e:	617b      	str	r3, [r7, #20]
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
 8027550:	697b      	ldr	r3, [r7, #20]
 8027552:	2b00      	cmp	r3, #0
 8027554:	d00d      	beq.n	8027572 <mg_http_parse_headers+0x118>
 8027556:	693a      	ldr	r2, [r7, #16]
 8027558:	697b      	ldr	r3, [r7, #20]
 802755a:	3b01      	subs	r3, #1
 802755c:	4413      	add	r3, r2
 802755e:	781b      	ldrb	r3, [r3, #0]
 8027560:	2b20      	cmp	r3, #32
 8027562:	d0f2      	beq.n	802754a <mg_http_parse_headers+0xf0>
 8027564:	693a      	ldr	r2, [r7, #16]
 8027566:	697b      	ldr	r3, [r7, #20]
 8027568:	3b01      	subs	r3, #1
 802756a:	4413      	add	r3, r2
 802756c:	781b      	ldrb	r3, [r3, #0]
 802756e:	2b09      	cmp	r3, #9
 8027570:	d0eb      	beq.n	802754a <mg_http_parse_headers+0xf0>
    }
    // MG_INFO(("--HH [%.*s] [%.*s]", (int) k.len, k.buf, (int) v.len, v.buf));
    h[i].name = k, h[i].value = v;  // Success. Assign values
 8027572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027574:	011b      	lsls	r3, r3, #4
 8027576:	687a      	ldr	r2, [r7, #4]
 8027578:	4413      	add	r3, r2
 802757a:	461a      	mov	r2, r3
 802757c:	f107 0318 	add.w	r3, r7, #24
 8027580:	e893 0003 	ldmia.w	r3, {r0, r1}
 8027584:	e882 0003 	stmia.w	r2, {r0, r1}
 8027588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802758a:	011b      	lsls	r3, r3, #4
 802758c:	687a      	ldr	r2, [r7, #4]
 802758e:	4413      	add	r3, r2
 8027590:	3308      	adds	r3, #8
 8027592:	f107 0210 	add.w	r2, r7, #16
 8027596:	e892 0003 	ldmia.w	r2, {r0, r1}
 802759a:	e883 0003 	stmia.w	r3, {r0, r1}
  for (i = 0; i < max_hdrs; i++) {
 802759e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80275a0:	3301      	adds	r3, #1
 80275a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80275a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80275a6:	683b      	ldr	r3, [r7, #0]
 80275a8:	429a      	cmp	r2, r3
 80275aa:	f4ff af60 	bcc.w	802746e <mg_http_parse_headers+0x14>
  }
  return true;
 80275ae:	2301      	movs	r3, #1
}
 80275b0:	4618      	mov	r0, r3
 80275b2:	3728      	adds	r7, #40	@ 0x28
 80275b4:	46bd      	mov	sp, r7
 80275b6:	bd80      	pop	{r7, pc}

080275b8 <mg_http_parse>:

int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {
 80275b8:	b580      	push	{r7, lr}
 80275ba:	b090      	sub	sp, #64	@ 0x40
 80275bc:	af00      	add	r7, sp, #0
 80275be:	60f8      	str	r0, [r7, #12]
 80275c0:	60b9      	str	r1, [r7, #8]
 80275c2:	607a      	str	r2, [r7, #4]
  int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);
 80275c4:	68b9      	ldr	r1, [r7, #8]
 80275c6:	68f8      	ldr	r0, [r7, #12]
 80275c8:	f7ff fdec 	bl	80271a4 <mg_http_get_request_len>
 80275cc:	63f8      	str	r0, [r7, #60]	@ 0x3c
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 80275ce:	68fb      	ldr	r3, [r7, #12]
 80275d0:	2b00      	cmp	r3, #0
 80275d2:	d003      	beq.n	80275dc <mg_http_parse+0x24>
 80275d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80275d6:	68fa      	ldr	r2, [r7, #12]
 80275d8:	4413      	add	r3, r2
 80275da:	e000      	b.n	80275de <mg_http_parse+0x26>
 80275dc:	2300      	movs	r3, #0
 80275de:	63bb      	str	r3, [r7, #56]	@ 0x38
  const struct mg_str *cl;
  size_t n;

  memset(hm, 0, sizeof(*hm));
 80275e0:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80275e4:	2100      	movs	r1, #0
 80275e6:	6878      	ldr	r0, [r7, #4]
 80275e8:	f00e fc02 	bl	8035df0 <memset>
  if (req_len <= 0) return req_len;
 80275ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80275ee:	2b00      	cmp	r3, #0
 80275f0:	dc01      	bgt.n	80275f6 <mg_http_parse+0x3e>
 80275f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80275f4:	e13f      	b.n	8027876 <mg_http_parse+0x2be>

  hm->message.buf = hm->head.buf = (char *) s;
 80275f6:	687b      	ldr	r3, [r7, #4]
 80275f8:	68fa      	ldr	r2, [r7, #12]
 80275fa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 80275fe:	687b      	ldr	r3, [r7, #4]
 8027600:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8027604:	687b      	ldr	r3, [r7, #4]
 8027606:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
  hm->body.buf = (char *) end;
 802760a:	687b      	ldr	r3, [r7, #4]
 802760c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 802760e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  hm->head.len = (size_t) req_len;
 8027612:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8027614:	687b      	ldr	r3, [r7, #4]
 8027616:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
  hm->message.len = hm->body.len = (size_t) -1;  // Set body length to infinite
 802761a:	687b      	ldr	r3, [r7, #4]
 802761c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8027620:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8027624:	687b      	ldr	r3, [r7, #4]
 8027626:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 802762a:	687b      	ldr	r3, [r7, #4]
 802762c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

  // Parse request line
  hm->method.buf = (char *) s;
 8027630:	687b      	ldr	r3, [r7, #4]
 8027632:	68fa      	ldr	r2, [r7, #12]
 8027634:	601a      	str	r2, [r3, #0]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 8027636:	e009      	b.n	802764c <mg_http_parse+0x94>
 8027638:	68fa      	ldr	r2, [r7, #12]
 802763a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802763c:	4413      	add	r3, r2
 802763e:	60fb      	str	r3, [r7, #12]
 8027640:	687b      	ldr	r3, [r7, #4]
 8027642:	685a      	ldr	r2, [r3, #4]
 8027644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8027646:	441a      	add	r2, r3
 8027648:	687b      	ldr	r3, [r7, #4]
 802764a:	605a      	str	r2, [r3, #4]
 802764c:	68fa      	ldr	r2, [r7, #12]
 802764e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027650:	429a      	cmp	r2, r3
 8027652:	d20b      	bcs.n	802766c <mg_http_parse+0xb4>
 8027654:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8027656:	68f8      	ldr	r0, [r7, #12]
 8027658:	f7ff fe45 	bl	80272e6 <clen>
 802765c:	6378      	str	r0, [r7, #52]	@ 0x34
 802765e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8027660:	2b00      	cmp	r3, #0
 8027662:	d1e9      	bne.n	8027638 <mg_http_parse+0x80>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 8027664:	e002      	b.n	802766c <mg_http_parse+0xb4>
 8027666:	68fb      	ldr	r3, [r7, #12]
 8027668:	3301      	adds	r3, #1
 802766a:	60fb      	str	r3, [r7, #12]
 802766c:	68fa      	ldr	r2, [r7, #12]
 802766e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027670:	429a      	cmp	r2, r3
 8027672:	d203      	bcs.n	802767c <mg_http_parse+0xc4>
 8027674:	68fb      	ldr	r3, [r7, #12]
 8027676:	781b      	ldrb	r3, [r3, #0]
 8027678:	2b20      	cmp	r3, #32
 802767a:	d0f4      	beq.n	8027666 <mg_http_parse+0xae>
  hm->uri.buf = (char *) s;
 802767c:	687b      	ldr	r3, [r7, #4]
 802767e:	68fa      	ldr	r2, [r7, #12]
 8027680:	609a      	str	r2, [r3, #8]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->uri.len += n;
 8027682:	e009      	b.n	8027698 <mg_http_parse+0xe0>
 8027684:	68fa      	ldr	r2, [r7, #12]
 8027686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8027688:	4413      	add	r3, r2
 802768a:	60fb      	str	r3, [r7, #12]
 802768c:	687b      	ldr	r3, [r7, #4]
 802768e:	68da      	ldr	r2, [r3, #12]
 8027690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8027692:	441a      	add	r2, r3
 8027694:	687b      	ldr	r3, [r7, #4]
 8027696:	60da      	str	r2, [r3, #12]
 8027698:	68fa      	ldr	r2, [r7, #12]
 802769a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802769c:	429a      	cmp	r2, r3
 802769e:	d20b      	bcs.n	80276b8 <mg_http_parse+0x100>
 80276a0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80276a2:	68f8      	ldr	r0, [r7, #12]
 80276a4:	f7ff fe1f 	bl	80272e6 <clen>
 80276a8:	6378      	str	r0, [r7, #52]	@ 0x34
 80276aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80276ac:	2b00      	cmp	r3, #0
 80276ae:	d1e9      	bne.n	8027684 <mg_http_parse+0xcc>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 80276b0:	e002      	b.n	80276b8 <mg_http_parse+0x100>
 80276b2:	68fb      	ldr	r3, [r7, #12]
 80276b4:	3301      	adds	r3, #1
 80276b6:	60fb      	str	r3, [r7, #12]
 80276b8:	68fa      	ldr	r2, [r7, #12]
 80276ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80276bc:	429a      	cmp	r2, r3
 80276be:	d203      	bcs.n	80276c8 <mg_http_parse+0x110>
 80276c0:	68fb      	ldr	r3, [r7, #12]
 80276c2:	781b      	ldrb	r3, [r3, #0]
 80276c4:	2b20      	cmp	r3, #32
 80276c6:	d0f4      	beq.n	80276b2 <mg_http_parse+0xfa>
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 80276c8:	687b      	ldr	r3, [r7, #4]
 80276ca:	3318      	adds	r3, #24
 80276cc:	461a      	mov	r2, r3
 80276ce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80276d0:	68f8      	ldr	r0, [r7, #12]
 80276d2:	f7ff fe77 	bl	80273c4 <skiptorn>
 80276d6:	60f8      	str	r0, [r7, #12]
 80276d8:	68fb      	ldr	r3, [r7, #12]
 80276da:	2b00      	cmp	r3, #0
 80276dc:	d101      	bne.n	80276e2 <mg_http_parse+0x12a>
 80276de:	2300      	movs	r3, #0
 80276e0:	e0c9      	b.n	8027876 <mg_http_parse+0x2be>

  // If URI contains '?' character, setup query string
  if ((qs = (const char *) memchr(hm->uri.buf, '?', hm->uri.len)) != NULL) {
 80276e2:	687b      	ldr	r3, [r7, #4]
 80276e4:	6898      	ldr	r0, [r3, #8]
 80276e6:	687b      	ldr	r3, [r7, #4]
 80276e8:	68db      	ldr	r3, [r3, #12]
 80276ea:	461a      	mov	r2, r3
 80276ec:	213f      	movs	r1, #63	@ 0x3f
 80276ee:	f7e8 fd87 	bl	8010200 <memchr>
 80276f2:	6338      	str	r0, [r7, #48]	@ 0x30
 80276f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80276f6:	2b00      	cmp	r3, #0
 80276f8:	d015      	beq.n	8027726 <mg_http_parse+0x16e>
    hm->query.buf = (char *) qs + 1;
 80276fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80276fc:	1c5a      	adds	r2, r3, #1
 80276fe:	687b      	ldr	r3, [r7, #4]
 8027700:	611a      	str	r2, [r3, #16]
    hm->query.len = (size_t) (&hm->uri.buf[hm->uri.len] - (qs + 1));
 8027702:	687b      	ldr	r3, [r7, #4]
 8027704:	689a      	ldr	r2, [r3, #8]
 8027706:	687b      	ldr	r3, [r7, #4]
 8027708:	68db      	ldr	r3, [r3, #12]
 802770a:	441a      	add	r2, r3
 802770c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802770e:	3301      	adds	r3, #1
 8027710:	1ad3      	subs	r3, r2, r3
 8027712:	461a      	mov	r2, r3
 8027714:	687b      	ldr	r3, [r7, #4]
 8027716:	615a      	str	r2, [r3, #20]
    hm->uri.len = (size_t) (qs - hm->uri.buf);
 8027718:	687b      	ldr	r3, [r7, #4]
 802771a:	689b      	ldr	r3, [r3, #8]
 802771c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802771e:	1ad3      	subs	r3, r2, r3
 8027720:	461a      	mov	r2, r3
 8027722:	687b      	ldr	r3, [r7, #4]
 8027724:	60da      	str	r2, [r3, #12]
  }

  // Sanity check. Allow protocol/reason to be empty
  // Do this check after hm->method.len and hm->uri.len are finalised
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 8027726:	687b      	ldr	r3, [r7, #4]
 8027728:	685b      	ldr	r3, [r3, #4]
 802772a:	2b00      	cmp	r3, #0
 802772c:	d003      	beq.n	8027736 <mg_http_parse+0x17e>
 802772e:	687b      	ldr	r3, [r7, #4]
 8027730:	68db      	ldr	r3, [r3, #12]
 8027732:	2b00      	cmp	r3, #0
 8027734:	d102      	bne.n	802773c <mg_http_parse+0x184>
 8027736:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802773a:	e09c      	b.n	8027876 <mg_http_parse+0x2be>

  if (!mg_http_parse_headers(s, end, hm->headers,
 802773c:	687b      	ldr	r3, [r7, #4]
 802773e:	f103 0220 	add.w	r2, r3, #32
 8027742:	231e      	movs	r3, #30
 8027744:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8027746:	68f8      	ldr	r0, [r7, #12]
 8027748:	f7ff fe87 	bl	802745a <mg_http_parse_headers>
 802774c:	4603      	mov	r3, r0
 802774e:	f083 0301 	eor.w	r3, r3, #1
 8027752:	b2db      	uxtb	r3, r3
 8027754:	2b00      	cmp	r3, #0
 8027756:	d002      	beq.n	802775e <mg_http_parse+0x1a6>
                             sizeof(hm->headers) / sizeof(hm->headers[0])))
    return -1;  // error when parsing
 8027758:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802775c:	e08b      	b.n	8027876 <mg_http_parse+0x2be>
  if ((cl = mg_http_get_header(hm, "Content-Length")) != NULL) {
 802775e:	4948      	ldr	r1, [pc, #288]	@ (8027880 <mg_http_parse+0x2c8>)
 8027760:	6878      	ldr	r0, [r7, #4]
 8027762:	f7ff fd6d 	bl	8027240 <mg_http_get_header>
 8027766:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8027768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802776a:	2b00      	cmp	r3, #0
 802776c:	d018      	beq.n	80277a0 <mg_http_parse+0x1e8>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 802776e:	687b      	ldr	r3, [r7, #4]
 8027770:	f503 7201 	add.w	r2, r3, #516	@ 0x204
 8027774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027776:	e893 0003 	ldmia.w	r3, {r0, r1}
 802777a:	f7ff fb13 	bl	8026da4 <mg_to_size_t>
 802777e:	4603      	mov	r3, r0
 8027780:	f083 0301 	eor.w	r3, r3, #1
 8027784:	b2db      	uxtb	r3, r3
 8027786:	2b00      	cmp	r3, #0
 8027788:	d002      	beq.n	8027790 <mg_http_parse+0x1d8>
 802778a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802778e:	e072      	b.n	8027876 <mg_http_parse+0x2be>
    hm->message.len = (size_t) req_len + hm->body.len;
 8027790:	687b      	ldr	r3, [r7, #4]
 8027792:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8027796:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8027798:	441a      	add	r2, r3
 802779a:	687b      	ldr	r3, [r7, #4]
 802779c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  // Therefore, if Content-Length is not specified and methods are
  // not one of PUT or POST, set body length to 0.
  //
  // So, if it is HTTP request, and Content-Length is not set,
  // and method is not (PUT or POST) then reset body length to zero.
  is_response = mg_ncasecmp(hm->method.buf, "HTTP/", 5) == 0;
 80277a0:	687b      	ldr	r3, [r7, #4]
 80277a2:	681b      	ldr	r3, [r3, #0]
 80277a4:	2205      	movs	r2, #5
 80277a6:	4937      	ldr	r1, [pc, #220]	@ (8027884 <mg_http_parse+0x2cc>)
 80277a8:	4618      	mov	r0, r3
 80277aa:	f7ff fabb 	bl	8026d24 <mg_ncasecmp>
 80277ae:	4603      	mov	r3, r0
 80277b0:	2b00      	cmp	r3, #0
 80277b2:	bf0c      	ite	eq
 80277b4:	2301      	moveq	r3, #1
 80277b6:	2300      	movne	r3, #0
 80277b8:	b2db      	uxtb	r3, r3
 80277ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (hm->body.len == (size_t) ~0 && !is_response &&
 80277bc:	687b      	ldr	r3, [r7, #4]
 80277be:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80277c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80277c6:	d12a      	bne.n	802781e <mg_http_parse+0x266>
 80277c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80277ca:	2b00      	cmp	r3, #0
 80277cc:	d127      	bne.n	802781e <mg_http_parse+0x266>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 80277ce:	f107 0310 	add.w	r3, r7, #16
 80277d2:	492d      	ldr	r1, [pc, #180]	@ (8027888 <mg_http_parse+0x2d0>)
 80277d4:	4618      	mov	r0, r3
 80277d6:	f00a fa05 	bl	8031be4 <mg_str_s>
 80277da:	6879      	ldr	r1, [r7, #4]
 80277dc:	f107 0310 	add.w	r3, r7, #16
 80277e0:	cb0c      	ldmia	r3, {r2, r3}
 80277e2:	c903      	ldmia	r1, {r0, r1}
 80277e4:	f00a fa8a 	bl	8031cfc <mg_strcasecmp>
 80277e8:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && !is_response &&
 80277ea:	2b00      	cmp	r3, #0
 80277ec:	d017      	beq.n	802781e <mg_http_parse+0x266>
      mg_strcasecmp(hm->method, mg_str("POST")) != 0) {
 80277ee:	f107 0318 	add.w	r3, r7, #24
 80277f2:	4926      	ldr	r1, [pc, #152]	@ (802788c <mg_http_parse+0x2d4>)
 80277f4:	4618      	mov	r0, r3
 80277f6:	f00a f9f5 	bl	8031be4 <mg_str_s>
 80277fa:	6879      	ldr	r1, [r7, #4]
 80277fc:	f107 0318 	add.w	r3, r7, #24
 8027800:	cb0c      	ldmia	r3, {r2, r3}
 8027802:	c903      	ldmia	r1, {r0, r1}
 8027804:	f00a fa7a 	bl	8031cfc <mg_strcasecmp>
 8027808:	4603      	mov	r3, r0
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 802780a:	2b00      	cmp	r3, #0
 802780c:	d007      	beq.n	802781e <mg_http_parse+0x266>
    hm->body.len = 0;
 802780e:	687b      	ldr	r3, [r7, #4]
 8027810:	2200      	movs	r2, #0
 8027812:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 8027816:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8027818:	687b      	ldr	r3, [r7, #4]
 802781a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }

  // The 204 (No content) responses also have 0 body length
  if (hm->body.len == (size_t) ~0 && is_response &&
 802781e:	687b      	ldr	r3, [r7, #4]
 8027820:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8027824:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8027828:	d11b      	bne.n	8027862 <mg_http_parse+0x2aa>
 802782a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802782c:	2b00      	cmp	r3, #0
 802782e:	d018      	beq.n	8027862 <mg_http_parse+0x2aa>
      mg_strcasecmp(hm->uri, mg_str("204")) == 0) {
 8027830:	f107 0320 	add.w	r3, r7, #32
 8027834:	4916      	ldr	r1, [pc, #88]	@ (8027890 <mg_http_parse+0x2d8>)
 8027836:	4618      	mov	r0, r3
 8027838:	f00a f9d4 	bl	8031be4 <mg_str_s>
 802783c:	6879      	ldr	r1, [r7, #4]
 802783e:	f107 0320 	add.w	r3, r7, #32
 8027842:	cb0c      	ldmia	r3, {r2, r3}
 8027844:	3108      	adds	r1, #8
 8027846:	c903      	ldmia	r1, {r0, r1}
 8027848:	f00a fa58 	bl	8031cfc <mg_strcasecmp>
 802784c:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && is_response &&
 802784e:	2b00      	cmp	r3, #0
 8027850:	d107      	bne.n	8027862 <mg_http_parse+0x2aa>
    hm->body.len = 0;
 8027852:	687b      	ldr	r3, [r7, #4]
 8027854:	2200      	movs	r2, #0
 8027856:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 802785a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 802785c:	687b      	ldr	r3, [r7, #4]
 802785e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 8027862:	687b      	ldr	r3, [r7, #4]
 8027864:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8027868:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802786a:	429a      	cmp	r2, r3
 802786c:	d202      	bcs.n	8027874 <mg_http_parse+0x2bc>
 802786e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8027872:	e000      	b.n	8027876 <mg_http_parse+0x2be>

  return req_len;
 8027874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8027876:	4618      	mov	r0, r3
 8027878:	3740      	adds	r7, #64	@ 0x40
 802787a:	46bd      	mov	sp, r7
 802787c:	bd80      	pop	{r7, pc}
 802787e:	bf00      	nop
 8027880:	08041760 	.word	0x08041760
 8027884:	08041770 	.word	0x08041770
 8027888:	08041778 	.word	0x08041778
 802788c:	0804177c 	.word	0x0804177c
 8027890:	08041784 	.word	0x08041784

08027894 <mg_http_status_code_str>:
  mg_send(c, "\r\n", 2);
  if (len == 0) c->is_resp = 0;
}

// clang-format off
static const char *mg_http_status_code_str(int status_code) {
 8027894:	b480      	push	{r7}
 8027896:	b083      	sub	sp, #12
 8027898:	af00      	add	r7, sp, #0
 802789a:	6078      	str	r0, [r7, #4]
  switch (status_code) {
 802789c:	687b      	ldr	r3, [r7, #4]
 802789e:	3b64      	subs	r3, #100	@ 0x64
 80278a0:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80278a4:	4293      	cmp	r3, r2
 80278a6:	f200 8469 	bhi.w	802817c <mg_http_status_code_str+0x8e8>
 80278aa:	a101      	add	r1, pc, #4	@ (adr r1, 80278b0 <mg_http_status_code_str+0x1c>)
 80278ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80278b0:	08028081 	.word	0x08028081
 80278b4:	08028085 	.word	0x08028085
 80278b8:	08028089 	.word	0x08028089
 80278bc:	0802817d 	.word	0x0802817d
 80278c0:	0802817d 	.word	0x0802817d
 80278c4:	0802817d 	.word	0x0802817d
 80278c8:	0802817d 	.word	0x0802817d
 80278cc:	0802817d 	.word	0x0802817d
 80278d0:	0802817d 	.word	0x0802817d
 80278d4:	0802817d 	.word	0x0802817d
 80278d8:	0802817d 	.word	0x0802817d
 80278dc:	0802817d 	.word	0x0802817d
 80278e0:	0802817d 	.word	0x0802817d
 80278e4:	0802817d 	.word	0x0802817d
 80278e8:	0802817d 	.word	0x0802817d
 80278ec:	0802817d 	.word	0x0802817d
 80278f0:	0802817d 	.word	0x0802817d
 80278f4:	0802817d 	.word	0x0802817d
 80278f8:	0802817d 	.word	0x0802817d
 80278fc:	0802817d 	.word	0x0802817d
 8027900:	0802817d 	.word	0x0802817d
 8027904:	0802817d 	.word	0x0802817d
 8027908:	0802817d 	.word	0x0802817d
 802790c:	0802817d 	.word	0x0802817d
 8027910:	0802817d 	.word	0x0802817d
 8027914:	0802817d 	.word	0x0802817d
 8027918:	0802817d 	.word	0x0802817d
 802791c:	0802817d 	.word	0x0802817d
 8027920:	0802817d 	.word	0x0802817d
 8027924:	0802817d 	.word	0x0802817d
 8027928:	0802817d 	.word	0x0802817d
 802792c:	0802817d 	.word	0x0802817d
 8027930:	0802817d 	.word	0x0802817d
 8027934:	0802817d 	.word	0x0802817d
 8027938:	0802817d 	.word	0x0802817d
 802793c:	0802817d 	.word	0x0802817d
 8027940:	0802817d 	.word	0x0802817d
 8027944:	0802817d 	.word	0x0802817d
 8027948:	0802817d 	.word	0x0802817d
 802794c:	0802817d 	.word	0x0802817d
 8027950:	0802817d 	.word	0x0802817d
 8027954:	0802817d 	.word	0x0802817d
 8027958:	0802817d 	.word	0x0802817d
 802795c:	0802817d 	.word	0x0802817d
 8027960:	0802817d 	.word	0x0802817d
 8027964:	0802817d 	.word	0x0802817d
 8027968:	0802817d 	.word	0x0802817d
 802796c:	0802817d 	.word	0x0802817d
 8027970:	0802817d 	.word	0x0802817d
 8027974:	0802817d 	.word	0x0802817d
 8027978:	0802817d 	.word	0x0802817d
 802797c:	0802817d 	.word	0x0802817d
 8027980:	0802817d 	.word	0x0802817d
 8027984:	0802817d 	.word	0x0802817d
 8027988:	0802817d 	.word	0x0802817d
 802798c:	0802817d 	.word	0x0802817d
 8027990:	0802817d 	.word	0x0802817d
 8027994:	0802817d 	.word	0x0802817d
 8027998:	0802817d 	.word	0x0802817d
 802799c:	0802817d 	.word	0x0802817d
 80279a0:	0802817d 	.word	0x0802817d
 80279a4:	0802817d 	.word	0x0802817d
 80279a8:	0802817d 	.word	0x0802817d
 80279ac:	0802817d 	.word	0x0802817d
 80279b0:	0802817d 	.word	0x0802817d
 80279b4:	0802817d 	.word	0x0802817d
 80279b8:	0802817d 	.word	0x0802817d
 80279bc:	0802817d 	.word	0x0802817d
 80279c0:	0802817d 	.word	0x0802817d
 80279c4:	0802817d 	.word	0x0802817d
 80279c8:	0802817d 	.word	0x0802817d
 80279cc:	0802817d 	.word	0x0802817d
 80279d0:	0802817d 	.word	0x0802817d
 80279d4:	0802817d 	.word	0x0802817d
 80279d8:	0802817d 	.word	0x0802817d
 80279dc:	0802817d 	.word	0x0802817d
 80279e0:	0802817d 	.word	0x0802817d
 80279e4:	0802817d 	.word	0x0802817d
 80279e8:	0802817d 	.word	0x0802817d
 80279ec:	0802817d 	.word	0x0802817d
 80279f0:	0802817d 	.word	0x0802817d
 80279f4:	0802817d 	.word	0x0802817d
 80279f8:	0802817d 	.word	0x0802817d
 80279fc:	0802817d 	.word	0x0802817d
 8027a00:	0802817d 	.word	0x0802817d
 8027a04:	0802817d 	.word	0x0802817d
 8027a08:	0802817d 	.word	0x0802817d
 8027a0c:	0802817d 	.word	0x0802817d
 8027a10:	0802817d 	.word	0x0802817d
 8027a14:	0802817d 	.word	0x0802817d
 8027a18:	0802817d 	.word	0x0802817d
 8027a1c:	0802817d 	.word	0x0802817d
 8027a20:	0802817d 	.word	0x0802817d
 8027a24:	0802817d 	.word	0x0802817d
 8027a28:	0802817d 	.word	0x0802817d
 8027a2c:	0802817d 	.word	0x0802817d
 8027a30:	0802817d 	.word	0x0802817d
 8027a34:	0802817d 	.word	0x0802817d
 8027a38:	0802817d 	.word	0x0802817d
 8027a3c:	0802817d 	.word	0x0802817d
 8027a40:	0802808d 	.word	0x0802808d
 8027a44:	08028091 	.word	0x08028091
 8027a48:	08028095 	.word	0x08028095
 8027a4c:	08028099 	.word	0x08028099
 8027a50:	0802809d 	.word	0x0802809d
 8027a54:	080280a1 	.word	0x080280a1
 8027a58:	080280a5 	.word	0x080280a5
 8027a5c:	080280a9 	.word	0x080280a9
 8027a60:	080280ad 	.word	0x080280ad
 8027a64:	0802817d 	.word	0x0802817d
 8027a68:	0802817d 	.word	0x0802817d
 8027a6c:	0802817d 	.word	0x0802817d
 8027a70:	0802817d 	.word	0x0802817d
 8027a74:	0802817d 	.word	0x0802817d
 8027a78:	0802817d 	.word	0x0802817d
 8027a7c:	0802817d 	.word	0x0802817d
 8027a80:	0802817d 	.word	0x0802817d
 8027a84:	0802817d 	.word	0x0802817d
 8027a88:	0802817d 	.word	0x0802817d
 8027a8c:	0802817d 	.word	0x0802817d
 8027a90:	0802817d 	.word	0x0802817d
 8027a94:	0802817d 	.word	0x0802817d
 8027a98:	0802817d 	.word	0x0802817d
 8027a9c:	0802817d 	.word	0x0802817d
 8027aa0:	0802817d 	.word	0x0802817d
 8027aa4:	0802817d 	.word	0x0802817d
 8027aa8:	080280b1 	.word	0x080280b1
 8027aac:	0802817d 	.word	0x0802817d
 8027ab0:	0802817d 	.word	0x0802817d
 8027ab4:	0802817d 	.word	0x0802817d
 8027ab8:	0802817d 	.word	0x0802817d
 8027abc:	0802817d 	.word	0x0802817d
 8027ac0:	0802817d 	.word	0x0802817d
 8027ac4:	0802817d 	.word	0x0802817d
 8027ac8:	0802817d 	.word	0x0802817d
 8027acc:	0802817d 	.word	0x0802817d
 8027ad0:	0802817d 	.word	0x0802817d
 8027ad4:	0802817d 	.word	0x0802817d
 8027ad8:	0802817d 	.word	0x0802817d
 8027adc:	0802817d 	.word	0x0802817d
 8027ae0:	0802817d 	.word	0x0802817d
 8027ae4:	0802817d 	.word	0x0802817d
 8027ae8:	0802817d 	.word	0x0802817d
 8027aec:	0802817d 	.word	0x0802817d
 8027af0:	0802817d 	.word	0x0802817d
 8027af4:	0802817d 	.word	0x0802817d
 8027af8:	0802817d 	.word	0x0802817d
 8027afc:	0802817d 	.word	0x0802817d
 8027b00:	0802817d 	.word	0x0802817d
 8027b04:	0802817d 	.word	0x0802817d
 8027b08:	0802817d 	.word	0x0802817d
 8027b0c:	0802817d 	.word	0x0802817d
 8027b10:	0802817d 	.word	0x0802817d
 8027b14:	0802817d 	.word	0x0802817d
 8027b18:	0802817d 	.word	0x0802817d
 8027b1c:	0802817d 	.word	0x0802817d
 8027b20:	0802817d 	.word	0x0802817d
 8027b24:	0802817d 	.word	0x0802817d
 8027b28:	0802817d 	.word	0x0802817d
 8027b2c:	0802817d 	.word	0x0802817d
 8027b30:	0802817d 	.word	0x0802817d
 8027b34:	0802817d 	.word	0x0802817d
 8027b38:	0802817d 	.word	0x0802817d
 8027b3c:	0802817d 	.word	0x0802817d
 8027b40:	0802817d 	.word	0x0802817d
 8027b44:	0802817d 	.word	0x0802817d
 8027b48:	0802817d 	.word	0x0802817d
 8027b4c:	0802817d 	.word	0x0802817d
 8027b50:	0802817d 	.word	0x0802817d
 8027b54:	0802817d 	.word	0x0802817d
 8027b58:	0802817d 	.word	0x0802817d
 8027b5c:	0802817d 	.word	0x0802817d
 8027b60:	0802817d 	.word	0x0802817d
 8027b64:	0802817d 	.word	0x0802817d
 8027b68:	0802817d 	.word	0x0802817d
 8027b6c:	0802817d 	.word	0x0802817d
 8027b70:	0802817d 	.word	0x0802817d
 8027b74:	0802817d 	.word	0x0802817d
 8027b78:	0802817d 	.word	0x0802817d
 8027b7c:	0802817d 	.word	0x0802817d
 8027b80:	0802817d 	.word	0x0802817d
 8027b84:	0802817d 	.word	0x0802817d
 8027b88:	0802817d 	.word	0x0802817d
 8027b8c:	0802817d 	.word	0x0802817d
 8027b90:	0802817d 	.word	0x0802817d
 8027b94:	0802817d 	.word	0x0802817d
 8027b98:	0802817d 	.word	0x0802817d
 8027b9c:	0802817d 	.word	0x0802817d
 8027ba0:	0802817d 	.word	0x0802817d
 8027ba4:	0802817d 	.word	0x0802817d
 8027ba8:	0802817d 	.word	0x0802817d
 8027bac:	0802817d 	.word	0x0802817d
 8027bb0:	0802817d 	.word	0x0802817d
 8027bb4:	0802817d 	.word	0x0802817d
 8027bb8:	0802817d 	.word	0x0802817d
 8027bbc:	0802817d 	.word	0x0802817d
 8027bc0:	0802817d 	.word	0x0802817d
 8027bc4:	0802817d 	.word	0x0802817d
 8027bc8:	0802817d 	.word	0x0802817d
 8027bcc:	0802817d 	.word	0x0802817d
 8027bd0:	080280b5 	.word	0x080280b5
 8027bd4:	080280b9 	.word	0x080280b9
 8027bd8:	080280bd 	.word	0x080280bd
 8027bdc:	080280c1 	.word	0x080280c1
 8027be0:	080280c5 	.word	0x080280c5
 8027be4:	080280c9 	.word	0x080280c9
 8027be8:	0802817d 	.word	0x0802817d
 8027bec:	080280cd 	.word	0x080280cd
 8027bf0:	080280d1 	.word	0x080280d1
 8027bf4:	0802817d 	.word	0x0802817d
 8027bf8:	0802817d 	.word	0x0802817d
 8027bfc:	0802817d 	.word	0x0802817d
 8027c00:	0802817d 	.word	0x0802817d
 8027c04:	0802817d 	.word	0x0802817d
 8027c08:	0802817d 	.word	0x0802817d
 8027c0c:	0802817d 	.word	0x0802817d
 8027c10:	0802817d 	.word	0x0802817d
 8027c14:	0802817d 	.word	0x0802817d
 8027c18:	0802817d 	.word	0x0802817d
 8027c1c:	0802817d 	.word	0x0802817d
 8027c20:	0802817d 	.word	0x0802817d
 8027c24:	0802817d 	.word	0x0802817d
 8027c28:	0802817d 	.word	0x0802817d
 8027c2c:	0802817d 	.word	0x0802817d
 8027c30:	0802817d 	.word	0x0802817d
 8027c34:	0802817d 	.word	0x0802817d
 8027c38:	0802817d 	.word	0x0802817d
 8027c3c:	0802817d 	.word	0x0802817d
 8027c40:	0802817d 	.word	0x0802817d
 8027c44:	0802817d 	.word	0x0802817d
 8027c48:	0802817d 	.word	0x0802817d
 8027c4c:	0802817d 	.word	0x0802817d
 8027c50:	0802817d 	.word	0x0802817d
 8027c54:	0802817d 	.word	0x0802817d
 8027c58:	0802817d 	.word	0x0802817d
 8027c5c:	0802817d 	.word	0x0802817d
 8027c60:	0802817d 	.word	0x0802817d
 8027c64:	0802817d 	.word	0x0802817d
 8027c68:	0802817d 	.word	0x0802817d
 8027c6c:	0802817d 	.word	0x0802817d
 8027c70:	0802817d 	.word	0x0802817d
 8027c74:	0802817d 	.word	0x0802817d
 8027c78:	0802817d 	.word	0x0802817d
 8027c7c:	0802817d 	.word	0x0802817d
 8027c80:	0802817d 	.word	0x0802817d
 8027c84:	0802817d 	.word	0x0802817d
 8027c88:	0802817d 	.word	0x0802817d
 8027c8c:	0802817d 	.word	0x0802817d
 8027c90:	0802817d 	.word	0x0802817d
 8027c94:	0802817d 	.word	0x0802817d
 8027c98:	0802817d 	.word	0x0802817d
 8027c9c:	0802817d 	.word	0x0802817d
 8027ca0:	0802817d 	.word	0x0802817d
 8027ca4:	0802817d 	.word	0x0802817d
 8027ca8:	0802817d 	.word	0x0802817d
 8027cac:	0802817d 	.word	0x0802817d
 8027cb0:	0802817d 	.word	0x0802817d
 8027cb4:	0802817d 	.word	0x0802817d
 8027cb8:	0802817d 	.word	0x0802817d
 8027cbc:	0802817d 	.word	0x0802817d
 8027cc0:	0802817d 	.word	0x0802817d
 8027cc4:	0802817d 	.word	0x0802817d
 8027cc8:	0802817d 	.word	0x0802817d
 8027ccc:	0802817d 	.word	0x0802817d
 8027cd0:	0802817d 	.word	0x0802817d
 8027cd4:	0802817d 	.word	0x0802817d
 8027cd8:	0802817d 	.word	0x0802817d
 8027cdc:	0802817d 	.word	0x0802817d
 8027ce0:	0802817d 	.word	0x0802817d
 8027ce4:	0802817d 	.word	0x0802817d
 8027ce8:	0802817d 	.word	0x0802817d
 8027cec:	0802817d 	.word	0x0802817d
 8027cf0:	0802817d 	.word	0x0802817d
 8027cf4:	0802817d 	.word	0x0802817d
 8027cf8:	0802817d 	.word	0x0802817d
 8027cfc:	0802817d 	.word	0x0802817d
 8027d00:	0802817d 	.word	0x0802817d
 8027d04:	0802817d 	.word	0x0802817d
 8027d08:	0802817d 	.word	0x0802817d
 8027d0c:	0802817d 	.word	0x0802817d
 8027d10:	0802817d 	.word	0x0802817d
 8027d14:	0802817d 	.word	0x0802817d
 8027d18:	0802817d 	.word	0x0802817d
 8027d1c:	0802817d 	.word	0x0802817d
 8027d20:	0802817d 	.word	0x0802817d
 8027d24:	0802817d 	.word	0x0802817d
 8027d28:	0802817d 	.word	0x0802817d
 8027d2c:	0802817d 	.word	0x0802817d
 8027d30:	0802817d 	.word	0x0802817d
 8027d34:	0802817d 	.word	0x0802817d
 8027d38:	0802817d 	.word	0x0802817d
 8027d3c:	0802817d 	.word	0x0802817d
 8027d40:	0802817d 	.word	0x0802817d
 8027d44:	0802817d 	.word	0x0802817d
 8027d48:	0802817d 	.word	0x0802817d
 8027d4c:	0802817d 	.word	0x0802817d
 8027d50:	0802817d 	.word	0x0802817d
 8027d54:	0802817d 	.word	0x0802817d
 8027d58:	0802817d 	.word	0x0802817d
 8027d5c:	0802817d 	.word	0x0802817d
 8027d60:	080280d5 	.word	0x080280d5
 8027d64:	080280d9 	.word	0x080280d9
 8027d68:	080280dd 	.word	0x080280dd
 8027d6c:	080280e1 	.word	0x080280e1
 8027d70:	080280e5 	.word	0x080280e5
 8027d74:	080280e9 	.word	0x080280e9
 8027d78:	080280ed 	.word	0x080280ed
 8027d7c:	080280f1 	.word	0x080280f1
 8027d80:	080280f5 	.word	0x080280f5
 8027d84:	080280f9 	.word	0x080280f9
 8027d88:	080280fd 	.word	0x080280fd
 8027d8c:	08028101 	.word	0x08028101
 8027d90:	08028105 	.word	0x08028105
 8027d94:	08028109 	.word	0x08028109
 8027d98:	0802810d 	.word	0x0802810d
 8027d9c:	08028111 	.word	0x08028111
 8027da0:	08028115 	.word	0x08028115
 8027da4:	08028119 	.word	0x08028119
 8027da8:	0802811d 	.word	0x0802811d
 8027dac:	0802817d 	.word	0x0802817d
 8027db0:	0802817d 	.word	0x0802817d
 8027db4:	08028121 	.word	0x08028121
 8027db8:	08028125 	.word	0x08028125
 8027dbc:	08028129 	.word	0x08028129
 8027dc0:	0802812d 	.word	0x0802812d
 8027dc4:	0802817d 	.word	0x0802817d
 8027dc8:	08028131 	.word	0x08028131
 8027dcc:	0802817d 	.word	0x0802817d
 8027dd0:	08028135 	.word	0x08028135
 8027dd4:	08028139 	.word	0x08028139
 8027dd8:	0802817d 	.word	0x0802817d
 8027ddc:	0802813d 	.word	0x0802813d
 8027de0:	0802817d 	.word	0x0802817d
 8027de4:	0802817d 	.word	0x0802817d
 8027de8:	0802817d 	.word	0x0802817d
 8027dec:	0802817d 	.word	0x0802817d
 8027df0:	0802817d 	.word	0x0802817d
 8027df4:	0802817d 	.word	0x0802817d
 8027df8:	0802817d 	.word	0x0802817d
 8027dfc:	0802817d 	.word	0x0802817d
 8027e00:	0802817d 	.word	0x0802817d
 8027e04:	0802817d 	.word	0x0802817d
 8027e08:	0802817d 	.word	0x0802817d
 8027e0c:	0802817d 	.word	0x0802817d
 8027e10:	08028141 	.word	0x08028141
 8027e14:	0802817d 	.word	0x0802817d
 8027e18:	0802817d 	.word	0x0802817d
 8027e1c:	0802817d 	.word	0x0802817d
 8027e20:	0802817d 	.word	0x0802817d
 8027e24:	0802817d 	.word	0x0802817d
 8027e28:	0802817d 	.word	0x0802817d
 8027e2c:	08028145 	.word	0x08028145
 8027e30:	0802817d 	.word	0x0802817d
 8027e34:	0802817d 	.word	0x0802817d
 8027e38:	0802817d 	.word	0x0802817d
 8027e3c:	0802817d 	.word	0x0802817d
 8027e40:	0802817d 	.word	0x0802817d
 8027e44:	0802817d 	.word	0x0802817d
 8027e48:	0802817d 	.word	0x0802817d
 8027e4c:	0802817d 	.word	0x0802817d
 8027e50:	0802817d 	.word	0x0802817d
 8027e54:	0802817d 	.word	0x0802817d
 8027e58:	0802817d 	.word	0x0802817d
 8027e5c:	0802817d 	.word	0x0802817d
 8027e60:	0802817d 	.word	0x0802817d
 8027e64:	0802817d 	.word	0x0802817d
 8027e68:	0802817d 	.word	0x0802817d
 8027e6c:	0802817d 	.word	0x0802817d
 8027e70:	0802817d 	.word	0x0802817d
 8027e74:	0802817d 	.word	0x0802817d
 8027e78:	0802817d 	.word	0x0802817d
 8027e7c:	0802817d 	.word	0x0802817d
 8027e80:	0802817d 	.word	0x0802817d
 8027e84:	0802817d 	.word	0x0802817d
 8027e88:	0802817d 	.word	0x0802817d
 8027e8c:	0802817d 	.word	0x0802817d
 8027e90:	0802817d 	.word	0x0802817d
 8027e94:	0802817d 	.word	0x0802817d
 8027e98:	0802817d 	.word	0x0802817d
 8027e9c:	0802817d 	.word	0x0802817d
 8027ea0:	0802817d 	.word	0x0802817d
 8027ea4:	0802817d 	.word	0x0802817d
 8027ea8:	0802817d 	.word	0x0802817d
 8027eac:	0802817d 	.word	0x0802817d
 8027eb0:	0802817d 	.word	0x0802817d
 8027eb4:	0802817d 	.word	0x0802817d
 8027eb8:	0802817d 	.word	0x0802817d
 8027ebc:	0802817d 	.word	0x0802817d
 8027ec0:	0802817d 	.word	0x0802817d
 8027ec4:	0802817d 	.word	0x0802817d
 8027ec8:	0802817d 	.word	0x0802817d
 8027ecc:	0802817d 	.word	0x0802817d
 8027ed0:	0802817d 	.word	0x0802817d
 8027ed4:	0802817d 	.word	0x0802817d
 8027ed8:	0802817d 	.word	0x0802817d
 8027edc:	0802817d 	.word	0x0802817d
 8027ee0:	0802817d 	.word	0x0802817d
 8027ee4:	0802817d 	.word	0x0802817d
 8027ee8:	0802817d 	.word	0x0802817d
 8027eec:	08028149 	.word	0x08028149
 8027ef0:	0802814d 	.word	0x0802814d
 8027ef4:	08028151 	.word	0x08028151
 8027ef8:	08028155 	.word	0x08028155
 8027efc:	08028159 	.word	0x08028159
 8027f00:	0802815d 	.word	0x0802815d
 8027f04:	08028161 	.word	0x08028161
 8027f08:	08028165 	.word	0x08028165
 8027f0c:	08028169 	.word	0x08028169
 8027f10:	0802816d 	.word	0x0802816d
 8027f14:	0802817d 	.word	0x0802817d
 8027f18:	08028171 	.word	0x08028171
 8027f1c:	08028175 	.word	0x08028175
 8027f20:	0802817d 	.word	0x0802817d
 8027f24:	0802817d 	.word	0x0802817d
 8027f28:	0802817d 	.word	0x0802817d
 8027f2c:	0802817d 	.word	0x0802817d
 8027f30:	0802817d 	.word	0x0802817d
 8027f34:	0802817d 	.word	0x0802817d
 8027f38:	0802817d 	.word	0x0802817d
 8027f3c:	0802817d 	.word	0x0802817d
 8027f40:	0802817d 	.word	0x0802817d
 8027f44:	0802817d 	.word	0x0802817d
 8027f48:	0802817d 	.word	0x0802817d
 8027f4c:	0802817d 	.word	0x0802817d
 8027f50:	0802817d 	.word	0x0802817d
 8027f54:	0802817d 	.word	0x0802817d
 8027f58:	0802817d 	.word	0x0802817d
 8027f5c:	0802817d 	.word	0x0802817d
 8027f60:	0802817d 	.word	0x0802817d
 8027f64:	0802817d 	.word	0x0802817d
 8027f68:	0802817d 	.word	0x0802817d
 8027f6c:	0802817d 	.word	0x0802817d
 8027f70:	0802817d 	.word	0x0802817d
 8027f74:	0802817d 	.word	0x0802817d
 8027f78:	0802817d 	.word	0x0802817d
 8027f7c:	0802817d 	.word	0x0802817d
 8027f80:	0802817d 	.word	0x0802817d
 8027f84:	0802817d 	.word	0x0802817d
 8027f88:	0802817d 	.word	0x0802817d
 8027f8c:	0802817d 	.word	0x0802817d
 8027f90:	0802817d 	.word	0x0802817d
 8027f94:	0802817d 	.word	0x0802817d
 8027f98:	0802817d 	.word	0x0802817d
 8027f9c:	0802817d 	.word	0x0802817d
 8027fa0:	0802817d 	.word	0x0802817d
 8027fa4:	0802817d 	.word	0x0802817d
 8027fa8:	0802817d 	.word	0x0802817d
 8027fac:	0802817d 	.word	0x0802817d
 8027fb0:	0802817d 	.word	0x0802817d
 8027fb4:	0802817d 	.word	0x0802817d
 8027fb8:	0802817d 	.word	0x0802817d
 8027fbc:	0802817d 	.word	0x0802817d
 8027fc0:	0802817d 	.word	0x0802817d
 8027fc4:	0802817d 	.word	0x0802817d
 8027fc8:	0802817d 	.word	0x0802817d
 8027fcc:	0802817d 	.word	0x0802817d
 8027fd0:	0802817d 	.word	0x0802817d
 8027fd4:	0802817d 	.word	0x0802817d
 8027fd8:	0802817d 	.word	0x0802817d
 8027fdc:	0802817d 	.word	0x0802817d
 8027fe0:	0802817d 	.word	0x0802817d
 8027fe4:	0802817d 	.word	0x0802817d
 8027fe8:	0802817d 	.word	0x0802817d
 8027fec:	0802817d 	.word	0x0802817d
 8027ff0:	0802817d 	.word	0x0802817d
 8027ff4:	0802817d 	.word	0x0802817d
 8027ff8:	0802817d 	.word	0x0802817d
 8027ffc:	0802817d 	.word	0x0802817d
 8028000:	0802817d 	.word	0x0802817d
 8028004:	0802817d 	.word	0x0802817d
 8028008:	0802817d 	.word	0x0802817d
 802800c:	0802817d 	.word	0x0802817d
 8028010:	0802817d 	.word	0x0802817d
 8028014:	0802817d 	.word	0x0802817d
 8028018:	0802817d 	.word	0x0802817d
 802801c:	0802817d 	.word	0x0802817d
 8028020:	0802817d 	.word	0x0802817d
 8028024:	0802817d 	.word	0x0802817d
 8028028:	0802817d 	.word	0x0802817d
 802802c:	0802817d 	.word	0x0802817d
 8028030:	0802817d 	.word	0x0802817d
 8028034:	0802817d 	.word	0x0802817d
 8028038:	0802817d 	.word	0x0802817d
 802803c:	0802817d 	.word	0x0802817d
 8028040:	0802817d 	.word	0x0802817d
 8028044:	0802817d 	.word	0x0802817d
 8028048:	0802817d 	.word	0x0802817d
 802804c:	0802817d 	.word	0x0802817d
 8028050:	0802817d 	.word	0x0802817d
 8028054:	0802817d 	.word	0x0802817d
 8028058:	0802817d 	.word	0x0802817d
 802805c:	0802817d 	.word	0x0802817d
 8028060:	0802817d 	.word	0x0802817d
 8028064:	0802817d 	.word	0x0802817d
 8028068:	0802817d 	.word	0x0802817d
 802806c:	0802817d 	.word	0x0802817d
 8028070:	0802817d 	.word	0x0802817d
 8028074:	0802817d 	.word	0x0802817d
 8028078:	0802817d 	.word	0x0802817d
 802807c:	08028179 	.word	0x08028179
    case 100: return "Continue";
 8028080:	4b42      	ldr	r3, [pc, #264]	@ (802818c <mg_http_status_code_str+0x8f8>)
 8028082:	e07c      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 101: return "Switching Protocols";
 8028084:	4b42      	ldr	r3, [pc, #264]	@ (8028190 <mg_http_status_code_str+0x8fc>)
 8028086:	e07a      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 102: return "Processing";
 8028088:	4b42      	ldr	r3, [pc, #264]	@ (8028194 <mg_http_status_code_str+0x900>)
 802808a:	e078      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 200: return "OK";
 802808c:	4b42      	ldr	r3, [pc, #264]	@ (8028198 <mg_http_status_code_str+0x904>)
 802808e:	e076      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 201: return "Created";
 8028090:	4b42      	ldr	r3, [pc, #264]	@ (802819c <mg_http_status_code_str+0x908>)
 8028092:	e074      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 202: return "Accepted";
 8028094:	4b42      	ldr	r3, [pc, #264]	@ (80281a0 <mg_http_status_code_str+0x90c>)
 8028096:	e072      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 203: return "Non-authoritative Information";
 8028098:	4b42      	ldr	r3, [pc, #264]	@ (80281a4 <mg_http_status_code_str+0x910>)
 802809a:	e070      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 204: return "No Content";
 802809c:	4b42      	ldr	r3, [pc, #264]	@ (80281a8 <mg_http_status_code_str+0x914>)
 802809e:	e06e      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 205: return "Reset Content";
 80280a0:	4b42      	ldr	r3, [pc, #264]	@ (80281ac <mg_http_status_code_str+0x918>)
 80280a2:	e06c      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 206: return "Partial Content";
 80280a4:	4b42      	ldr	r3, [pc, #264]	@ (80281b0 <mg_http_status_code_str+0x91c>)
 80280a6:	e06a      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 207: return "Multi-Status";
 80280a8:	4b42      	ldr	r3, [pc, #264]	@ (80281b4 <mg_http_status_code_str+0x920>)
 80280aa:	e068      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 208: return "Already Reported";
 80280ac:	4b42      	ldr	r3, [pc, #264]	@ (80281b8 <mg_http_status_code_str+0x924>)
 80280ae:	e066      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 226: return "IM Used";
 80280b0:	4b42      	ldr	r3, [pc, #264]	@ (80281bc <mg_http_status_code_str+0x928>)
 80280b2:	e064      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 300: return "Multiple Choices";
 80280b4:	4b42      	ldr	r3, [pc, #264]	@ (80281c0 <mg_http_status_code_str+0x92c>)
 80280b6:	e062      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 301: return "Moved Permanently";
 80280b8:	4b42      	ldr	r3, [pc, #264]	@ (80281c4 <mg_http_status_code_str+0x930>)
 80280ba:	e060      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 302: return "Found";
 80280bc:	4b42      	ldr	r3, [pc, #264]	@ (80281c8 <mg_http_status_code_str+0x934>)
 80280be:	e05e      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 303: return "See Other";
 80280c0:	4b42      	ldr	r3, [pc, #264]	@ (80281cc <mg_http_status_code_str+0x938>)
 80280c2:	e05c      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 304: return "Not Modified";
 80280c4:	4b42      	ldr	r3, [pc, #264]	@ (80281d0 <mg_http_status_code_str+0x93c>)
 80280c6:	e05a      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 305: return "Use Proxy";
 80280c8:	4b42      	ldr	r3, [pc, #264]	@ (80281d4 <mg_http_status_code_str+0x940>)
 80280ca:	e058      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 307: return "Temporary Redirect";
 80280cc:	4b42      	ldr	r3, [pc, #264]	@ (80281d8 <mg_http_status_code_str+0x944>)
 80280ce:	e056      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 308: return "Permanent Redirect";
 80280d0:	4b42      	ldr	r3, [pc, #264]	@ (80281dc <mg_http_status_code_str+0x948>)
 80280d2:	e054      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 400: return "Bad Request";
 80280d4:	4b42      	ldr	r3, [pc, #264]	@ (80281e0 <mg_http_status_code_str+0x94c>)
 80280d6:	e052      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 401: return "Unauthorized";
 80280d8:	4b42      	ldr	r3, [pc, #264]	@ (80281e4 <mg_http_status_code_str+0x950>)
 80280da:	e050      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 402: return "Payment Required";
 80280dc:	4b42      	ldr	r3, [pc, #264]	@ (80281e8 <mg_http_status_code_str+0x954>)
 80280de:	e04e      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 403: return "Forbidden";
 80280e0:	4b42      	ldr	r3, [pc, #264]	@ (80281ec <mg_http_status_code_str+0x958>)
 80280e2:	e04c      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 404: return "Not Found";
 80280e4:	4b42      	ldr	r3, [pc, #264]	@ (80281f0 <mg_http_status_code_str+0x95c>)
 80280e6:	e04a      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 405: return "Method Not Allowed";
 80280e8:	4b42      	ldr	r3, [pc, #264]	@ (80281f4 <mg_http_status_code_str+0x960>)
 80280ea:	e048      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 406: return "Not Acceptable";
 80280ec:	4b42      	ldr	r3, [pc, #264]	@ (80281f8 <mg_http_status_code_str+0x964>)
 80280ee:	e046      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 407: return "Proxy Authentication Required";
 80280f0:	4b42      	ldr	r3, [pc, #264]	@ (80281fc <mg_http_status_code_str+0x968>)
 80280f2:	e044      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 408: return "Request Timeout";
 80280f4:	4b42      	ldr	r3, [pc, #264]	@ (8028200 <mg_http_status_code_str+0x96c>)
 80280f6:	e042      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 409: return "Conflict";
 80280f8:	4b42      	ldr	r3, [pc, #264]	@ (8028204 <mg_http_status_code_str+0x970>)
 80280fa:	e040      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 410: return "Gone";
 80280fc:	4b42      	ldr	r3, [pc, #264]	@ (8028208 <mg_http_status_code_str+0x974>)
 80280fe:	e03e      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 411: return "Length Required";
 8028100:	4b42      	ldr	r3, [pc, #264]	@ (802820c <mg_http_status_code_str+0x978>)
 8028102:	e03c      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 412: return "Precondition Failed";
 8028104:	4b42      	ldr	r3, [pc, #264]	@ (8028210 <mg_http_status_code_str+0x97c>)
 8028106:	e03a      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 413: return "Payload Too Large";
 8028108:	4b42      	ldr	r3, [pc, #264]	@ (8028214 <mg_http_status_code_str+0x980>)
 802810a:	e038      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 414: return "Request-URI Too Long";
 802810c:	4b42      	ldr	r3, [pc, #264]	@ (8028218 <mg_http_status_code_str+0x984>)
 802810e:	e036      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 415: return "Unsupported Media Type";
 8028110:	4b42      	ldr	r3, [pc, #264]	@ (802821c <mg_http_status_code_str+0x988>)
 8028112:	e034      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 416: return "Requested Range Not Satisfiable";
 8028114:	4b42      	ldr	r3, [pc, #264]	@ (8028220 <mg_http_status_code_str+0x98c>)
 8028116:	e032      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 417: return "Expectation Failed";
 8028118:	4b42      	ldr	r3, [pc, #264]	@ (8028224 <mg_http_status_code_str+0x990>)
 802811a:	e030      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 418: return "I'm a teapot";
 802811c:	4b42      	ldr	r3, [pc, #264]	@ (8028228 <mg_http_status_code_str+0x994>)
 802811e:	e02e      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 421: return "Misdirected Request";
 8028120:	4b42      	ldr	r3, [pc, #264]	@ (802822c <mg_http_status_code_str+0x998>)
 8028122:	e02c      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 422: return "Unprocessable Entity";
 8028124:	4b42      	ldr	r3, [pc, #264]	@ (8028230 <mg_http_status_code_str+0x99c>)
 8028126:	e02a      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 423: return "Locked";
 8028128:	4b42      	ldr	r3, [pc, #264]	@ (8028234 <mg_http_status_code_str+0x9a0>)
 802812a:	e028      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 424: return "Failed Dependency";
 802812c:	4b42      	ldr	r3, [pc, #264]	@ (8028238 <mg_http_status_code_str+0x9a4>)
 802812e:	e026      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 426: return "Upgrade Required";
 8028130:	4b42      	ldr	r3, [pc, #264]	@ (802823c <mg_http_status_code_str+0x9a8>)
 8028132:	e024      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 428: return "Precondition Required";
 8028134:	4b42      	ldr	r3, [pc, #264]	@ (8028240 <mg_http_status_code_str+0x9ac>)
 8028136:	e022      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 429: return "Too Many Requests";
 8028138:	4b42      	ldr	r3, [pc, #264]	@ (8028244 <mg_http_status_code_str+0x9b0>)
 802813a:	e020      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 431: return "Request Header Fields Too Large";
 802813c:	4b42      	ldr	r3, [pc, #264]	@ (8028248 <mg_http_status_code_str+0x9b4>)
 802813e:	e01e      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 444: return "Connection Closed Without Response";
 8028140:	4b42      	ldr	r3, [pc, #264]	@ (802824c <mg_http_status_code_str+0x9b8>)
 8028142:	e01c      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 451: return "Unavailable For Legal Reasons";
 8028144:	4b42      	ldr	r3, [pc, #264]	@ (8028250 <mg_http_status_code_str+0x9bc>)
 8028146:	e01a      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 499: return "Client Closed Request";
 8028148:	4b42      	ldr	r3, [pc, #264]	@ (8028254 <mg_http_status_code_str+0x9c0>)
 802814a:	e018      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 500: return "Internal Server Error";
 802814c:	4b42      	ldr	r3, [pc, #264]	@ (8028258 <mg_http_status_code_str+0x9c4>)
 802814e:	e016      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 501: return "Not Implemented";
 8028150:	4b42      	ldr	r3, [pc, #264]	@ (802825c <mg_http_status_code_str+0x9c8>)
 8028152:	e014      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 502: return "Bad Gateway";
 8028154:	4b42      	ldr	r3, [pc, #264]	@ (8028260 <mg_http_status_code_str+0x9cc>)
 8028156:	e012      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 503: return "Service Unavailable";
 8028158:	4b42      	ldr	r3, [pc, #264]	@ (8028264 <mg_http_status_code_str+0x9d0>)
 802815a:	e010      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 504: return "Gateway Timeout";
 802815c:	4b42      	ldr	r3, [pc, #264]	@ (8028268 <mg_http_status_code_str+0x9d4>)
 802815e:	e00e      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 505: return "HTTP Version Not Supported";
 8028160:	4b42      	ldr	r3, [pc, #264]	@ (802826c <mg_http_status_code_str+0x9d8>)
 8028162:	e00c      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 506: return "Variant Also Negotiates";
 8028164:	4b42      	ldr	r3, [pc, #264]	@ (8028270 <mg_http_status_code_str+0x9dc>)
 8028166:	e00a      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 507: return "Insufficient Storage";
 8028168:	4b42      	ldr	r3, [pc, #264]	@ (8028274 <mg_http_status_code_str+0x9e0>)
 802816a:	e008      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 508: return "Loop Detected";
 802816c:	4b42      	ldr	r3, [pc, #264]	@ (8028278 <mg_http_status_code_str+0x9e4>)
 802816e:	e006      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 510: return "Not Extended";
 8028170:	4b42      	ldr	r3, [pc, #264]	@ (802827c <mg_http_status_code_str+0x9e8>)
 8028172:	e004      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 511: return "Network Authentication Required";
 8028174:	4b42      	ldr	r3, [pc, #264]	@ (8028280 <mg_http_status_code_str+0x9ec>)
 8028176:	e002      	b.n	802817e <mg_http_status_code_str+0x8ea>
    case 599: return "Network Connect Timeout Error";
 8028178:	4b42      	ldr	r3, [pc, #264]	@ (8028284 <mg_http_status_code_str+0x9f0>)
 802817a:	e000      	b.n	802817e <mg_http_status_code_str+0x8ea>
    default: return "";
 802817c:	4b42      	ldr	r3, [pc, #264]	@ (8028288 <mg_http_status_code_str+0x9f4>)
  }
}
 802817e:	4618      	mov	r0, r3
 8028180:	370c      	adds	r7, #12
 8028182:	46bd      	mov	sp, r7
 8028184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028188:	4770      	bx	lr
 802818a:	bf00      	nop
 802818c:	080417a4 	.word	0x080417a4
 8028190:	080417b0 	.word	0x080417b0
 8028194:	080417c4 	.word	0x080417c4
 8028198:	080417d0 	.word	0x080417d0
 802819c:	080417d4 	.word	0x080417d4
 80281a0:	080417dc 	.word	0x080417dc
 80281a4:	080417e8 	.word	0x080417e8
 80281a8:	08041808 	.word	0x08041808
 80281ac:	08041814 	.word	0x08041814
 80281b0:	08041824 	.word	0x08041824
 80281b4:	08041834 	.word	0x08041834
 80281b8:	08041844 	.word	0x08041844
 80281bc:	08041858 	.word	0x08041858
 80281c0:	08041860 	.word	0x08041860
 80281c4:	08041874 	.word	0x08041874
 80281c8:	08041888 	.word	0x08041888
 80281cc:	08041890 	.word	0x08041890
 80281d0:	0804189c 	.word	0x0804189c
 80281d4:	080418ac 	.word	0x080418ac
 80281d8:	080418b8 	.word	0x080418b8
 80281dc:	080418cc 	.word	0x080418cc
 80281e0:	080418e0 	.word	0x080418e0
 80281e4:	080418ec 	.word	0x080418ec
 80281e8:	080418fc 	.word	0x080418fc
 80281ec:	08041910 	.word	0x08041910
 80281f0:	0804191c 	.word	0x0804191c
 80281f4:	08041928 	.word	0x08041928
 80281f8:	0804193c 	.word	0x0804193c
 80281fc:	0804194c 	.word	0x0804194c
 8028200:	0804196c 	.word	0x0804196c
 8028204:	0804197c 	.word	0x0804197c
 8028208:	08041988 	.word	0x08041988
 802820c:	08041990 	.word	0x08041990
 8028210:	080419a0 	.word	0x080419a0
 8028214:	080419b4 	.word	0x080419b4
 8028218:	080419c8 	.word	0x080419c8
 802821c:	080419e0 	.word	0x080419e0
 8028220:	080419f8 	.word	0x080419f8
 8028224:	08041a18 	.word	0x08041a18
 8028228:	08041a2c 	.word	0x08041a2c
 802822c:	08041a3c 	.word	0x08041a3c
 8028230:	08041a50 	.word	0x08041a50
 8028234:	08041a68 	.word	0x08041a68
 8028238:	08041a70 	.word	0x08041a70
 802823c:	08041a84 	.word	0x08041a84
 8028240:	08041a98 	.word	0x08041a98
 8028244:	08041ab0 	.word	0x08041ab0
 8028248:	08041ac4 	.word	0x08041ac4
 802824c:	08041ae4 	.word	0x08041ae4
 8028250:	08041b08 	.word	0x08041b08
 8028254:	08041b28 	.word	0x08041b28
 8028258:	08041b40 	.word	0x08041b40
 802825c:	08041b58 	.word	0x08041b58
 8028260:	08041b68 	.word	0x08041b68
 8028264:	08041b74 	.word	0x08041b74
 8028268:	08041b88 	.word	0x08041b88
 802826c:	08041b98 	.word	0x08041b98
 8028270:	08041bb4 	.word	0x08041bb4
 8028274:	08041bcc 	.word	0x08041bcc
 8028278:	08041be4 	.word	0x08041be4
 802827c:	08041bf4 	.word	0x08041bf4
 8028280:	08041c04 	.word	0x08041c04
 8028284:	08041c24 	.word	0x08041c24
 8028288:	08041c44 	.word	0x08041c44

0802828c <mg_http_reply>:
// clang-format on

void mg_http_reply(struct mg_connection *c, int code, const char *headers,
                   const char *fmt, ...) {
 802828c:	b408      	push	{r3}
 802828e:	b580      	push	{r7, lr}
 8028290:	b08b      	sub	sp, #44	@ 0x2c
 8028292:	af02      	add	r7, sp, #8
 8028294:	60f8      	str	r0, [r7, #12]
 8028296:	60b9      	str	r1, [r7, #8]
 8028298:	607a      	str	r2, [r7, #4]
  va_list ap;
  size_t len;
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 802829a:	68b8      	ldr	r0, [r7, #8]
 802829c:	f7ff fafa 	bl	8027894 <mg_http_status_code_str>
 80282a0:	4602      	mov	r2, r0
 80282a2:	687b      	ldr	r3, [r7, #4]
 80282a4:	2b00      	cmp	r3, #0
 80282a6:	d001      	beq.n	80282ac <mg_http_reply+0x20>
 80282a8:	687b      	ldr	r3, [r7, #4]
 80282aa:	e000      	b.n	80282ae <mg_http_reply+0x22>
 80282ac:	4b1f      	ldr	r3, [pc, #124]	@ (802832c <mg_http_reply+0xa0>)
 80282ae:	9300      	str	r3, [sp, #0]
 80282b0:	4613      	mov	r3, r2
 80282b2:	68ba      	ldr	r2, [r7, #8]
 80282b4:	491e      	ldr	r1, [pc, #120]	@ (8028330 <mg_http_reply+0xa4>)
 80282b6:	68f8      	ldr	r0, [r7, #12]
 80282b8:	f005 f8d8 	bl	802d46c <mg_printf>
            mg_http_status_code_str(code), headers == NULL ? "" : headers);
  len = c->send.len;
 80282bc:	68fb      	ldr	r3, [r7, #12]
 80282be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80282c0:	61fb      	str	r3, [r7, #28]
  va_start(ap, fmt);
 80282c2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80282c6:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, &ap);
 80282c8:	68fb      	ldr	r3, [r7, #12]
 80282ca:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 80282ce:	f107 0314 	add.w	r3, r7, #20
 80282d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80282d4:	4817      	ldr	r0, [pc, #92]	@ (8028334 <mg_http_reply+0xa8>)
 80282d6:	f7fe f8cd 	bl	8026474 <mg_vxprintf>
  va_end(ap);
  if (c->send.len > 16) {
 80282da:	68fb      	ldr	r3, [r7, #12]
 80282dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80282de:	2b10      	cmp	r3, #16
 80282e0:	d916      	bls.n	8028310 <mg_http_reply+0x84>
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 80282e2:	68fb      	ldr	r3, [r7, #12]
 80282e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80282e6:	69fb      	ldr	r3, [r7, #28]
 80282e8:	3b0f      	subs	r3, #15
 80282ea:	18d0      	adds	r0, r2, r3
                           (unsigned long) (c->send.len - len));
 80282ec:	68fb      	ldr	r3, [r7, #12]
 80282ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80282f0:	69fb      	ldr	r3, [r7, #28]
 80282f2:	1ad3      	subs	r3, r2, r3
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 80282f4:	4a10      	ldr	r2, [pc, #64]	@ (8028338 <mg_http_reply+0xac>)
 80282f6:	210b      	movs	r1, #11
 80282f8:	f008 ff8c 	bl	8031214 <mg_snprintf>
 80282fc:	61b8      	str	r0, [r7, #24]
    c->send.buf[len - 15 + n] = ' ';  // Change ending 0 to space
 80282fe:	68fb      	ldr	r3, [r7, #12]
 8028300:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8028302:	69f9      	ldr	r1, [r7, #28]
 8028304:	69bb      	ldr	r3, [r7, #24]
 8028306:	440b      	add	r3, r1
 8028308:	3b0f      	subs	r3, #15
 802830a:	4413      	add	r3, r2
 802830c:	2220      	movs	r2, #32
 802830e:	701a      	strb	r2, [r3, #0]
  }
  c->is_resp = 0;
 8028310:	68fa      	ldr	r2, [r7, #12]
 8028312:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8028316:	f36f 13c7 	bfc	r3, #7, #1
 802831a:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 802831e:	bf00      	nop
 8028320:	3724      	adds	r7, #36	@ 0x24
 8028322:	46bd      	mov	sp, r7
 8028324:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8028328:	b001      	add	sp, #4
 802832a:	4770      	bx	lr
 802832c:	08041c44 	.word	0x08041c44
 8028330:	08041c48 	.word	0x08041c48
 8028334:	080311a5 	.word	0x080311a5
 8028338:	08041c7c 	.word	0x08041c7c

0802833c <restore_http_cb>:

static void http_cb(struct mg_connection *, int, void *);
static void restore_http_cb(struct mg_connection *c) {
 802833c:	b580      	push	{r7, lr}
 802833e:	b082      	sub	sp, #8
 8028340:	af00      	add	r7, sp, #0
 8028342:	6078      	str	r0, [r7, #4]
  mg_fs_close((struct mg_fd *) c->pfn_data);
 8028344:	687b      	ldr	r3, [r7, #4]
 8028346:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 802834a:	4618      	mov	r0, r3
 802834c:	f7fe fc5d 	bl	8026c0a <mg_fs_close>
  c->pfn_data = NULL;
 8028350:	687b      	ldr	r3, [r7, #4]
 8028352:	2200      	movs	r2, #0
 8028354:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  c->pfn = http_cb;
 8028358:	687b      	ldr	r3, [r7, #4]
 802835a:	4a07      	ldr	r2, [pc, #28]	@ (8028378 <restore_http_cb+0x3c>)
 802835c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->is_resp = 0;
 8028360:	687a      	ldr	r2, [r7, #4]
 8028362:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8028366:	f36f 13c7 	bfc	r3, #7, #1
 802836a:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 802836e:	bf00      	nop
 8028370:	3708      	adds	r7, #8
 8028372:	46bd      	mov	sp, r7
 8028374:	bd80      	pop	{r7, pc}
 8028376:	bf00      	nop
 8028378:	08029af9 	.word	0x08029af9

0802837c <mg_http_etag>:

char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime);
char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {
 802837c:	b5b0      	push	{r4, r5, r7, lr}
 802837e:	b088      	sub	sp, #32
 8028380:	af04      	add	r7, sp, #16
 8028382:	60f8      	str	r0, [r7, #12]
 8028384:	60b9      	str	r1, [r7, #8]
 8028386:	607a      	str	r2, [r7, #4]
  mg_snprintf(buf, len, "\"%lld.%lld\"", (int64_t) mtime, (int64_t) size);
 8028388:	687b      	ldr	r3, [r7, #4]
 802838a:	2200      	movs	r2, #0
 802838c:	461c      	mov	r4, r3
 802838e:	4615      	mov	r5, r2
 8028390:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8028394:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8028398:	e9cd 2300 	strd	r2, r3, [sp]
 802839c:	4a04      	ldr	r2, [pc, #16]	@ (80283b0 <mg_http_etag+0x34>)
 802839e:	68b9      	ldr	r1, [r7, #8]
 80283a0:	68f8      	ldr	r0, [r7, #12]
 80283a2:	f008 ff37 	bl	8031214 <mg_snprintf>
  return buf;
 80283a6:	68fb      	ldr	r3, [r7, #12]
}
 80283a8:	4618      	mov	r0, r3
 80283aa:	3710      	adds	r7, #16
 80283ac:	46bd      	mov	sp, r7
 80283ae:	bdb0      	pop	{r4, r5, r7, pc}
 80283b0:	08041c84 	.word	0x08041c84

080283b4 <static_cb>:

static void static_cb(struct mg_connection *c, int ev, void *ev_data) {
 80283b4:	b580      	push	{r7, lr}
 80283b6:	b08a      	sub	sp, #40	@ 0x28
 80283b8:	af00      	add	r7, sp, #0
 80283ba:	60f8      	str	r0, [r7, #12]
 80283bc:	60b9      	str	r1, [r7, #8]
 80283be:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 80283c0:	68bb      	ldr	r3, [r7, #8]
 80283c2:	2b08      	cmp	r3, #8
 80283c4:	d002      	beq.n	80283cc <static_cb+0x18>
 80283c6:	68bb      	ldr	r3, [r7, #8]
 80283c8:	2b02      	cmp	r3, #2
 80283ca:	d148      	bne.n	802845e <static_cb+0xaa>
    struct mg_fd *fd = (struct mg_fd *) c->pfn_data;
 80283cc:	68fb      	ldr	r3, [r7, #12]
 80283ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80283d2:	623b      	str	r3, [r7, #32]
    // Read to send IO buffer directly, avoid extra on-stack buffer
    size_t n, max = MG_IO_SIZE, space;
 80283d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80283d8:	61fb      	str	r3, [r7, #28]
    size_t *cl = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 80283da:	68fb      	ldr	r3, [r7, #12]
 80283dc:	33a4      	adds	r3, #164	@ 0xa4
 80283de:	61bb      	str	r3, [r7, #24]
                                     sizeof(size_t) * sizeof(size_t)];
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 80283e0:	68fb      	ldr	r3, [r7, #12]
 80283e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80283e4:	69fa      	ldr	r2, [r7, #28]
 80283e6:	429a      	cmp	r2, r3
 80283e8:	d905      	bls.n	80283f6 <static_cb+0x42>
 80283ea:	68fb      	ldr	r3, [r7, #12]
 80283ec:	3348      	adds	r3, #72	@ 0x48
 80283ee:	69f9      	ldr	r1, [r7, #28]
 80283f0:	4618      	mov	r0, r3
 80283f2:	f001 ff03 	bl	802a1fc <mg_iobuf_resize>
    if (c->send.len >= c->send.size) return;  // Rate limit
 80283f6:	68fb      	ldr	r3, [r7, #12]
 80283f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80283fa:	68fb      	ldr	r3, [r7, #12]
 80283fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80283fe:	429a      	cmp	r2, r3
 8028400:	d234      	bcs.n	802846c <static_cb+0xb8>
    if ((space = c->send.size - c->send.len) > *cl) space = *cl;
 8028402:	68fb      	ldr	r3, [r7, #12]
 8028404:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8028406:	68fb      	ldr	r3, [r7, #12]
 8028408:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802840a:	1ad3      	subs	r3, r2, r3
 802840c:	627b      	str	r3, [r7, #36]	@ 0x24
 802840e:	69bb      	ldr	r3, [r7, #24]
 8028410:	681b      	ldr	r3, [r3, #0]
 8028412:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8028414:	429a      	cmp	r2, r3
 8028416:	d902      	bls.n	802841e <static_cb+0x6a>
 8028418:	69bb      	ldr	r3, [r7, #24]
 802841a:	681b      	ldr	r3, [r3, #0]
 802841c:	627b      	str	r3, [r7, #36]	@ 0x24
    n = fd->fs->rd(fd->fd, c->send.buf + c->send.len, space);
 802841e:	6a3b      	ldr	r3, [r7, #32]
 8028420:	685b      	ldr	r3, [r3, #4]
 8028422:	691b      	ldr	r3, [r3, #16]
 8028424:	6a3a      	ldr	r2, [r7, #32]
 8028426:	6810      	ldr	r0, [r2, #0]
 8028428:	68fa      	ldr	r2, [r7, #12]
 802842a:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 802842c:	68fa      	ldr	r2, [r7, #12]
 802842e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8028430:	4411      	add	r1, r2
 8028432:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8028434:	4798      	blx	r3
 8028436:	6178      	str	r0, [r7, #20]
    c->send.len += n;
 8028438:	68fb      	ldr	r3, [r7, #12]
 802843a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 802843c:	697b      	ldr	r3, [r7, #20]
 802843e:	441a      	add	r2, r3
 8028440:	68fb      	ldr	r3, [r7, #12]
 8028442:	651a      	str	r2, [r3, #80]	@ 0x50
    *cl -= n;
 8028444:	69bb      	ldr	r3, [r7, #24]
 8028446:	681a      	ldr	r2, [r3, #0]
 8028448:	697b      	ldr	r3, [r7, #20]
 802844a:	1ad2      	subs	r2, r2, r3
 802844c:	69bb      	ldr	r3, [r7, #24]
 802844e:	601a      	str	r2, [r3, #0]
    if (n == 0) restore_http_cb(c);
 8028450:	697b      	ldr	r3, [r7, #20]
 8028452:	2b00      	cmp	r3, #0
 8028454:	d10c      	bne.n	8028470 <static_cb+0xbc>
 8028456:	68f8      	ldr	r0, [r7, #12]
 8028458:	f7ff ff70 	bl	802833c <restore_http_cb>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 802845c:	e008      	b.n	8028470 <static_cb+0xbc>
  } else if (ev == MG_EV_CLOSE) {
 802845e:	68bb      	ldr	r3, [r7, #8]
 8028460:	2b09      	cmp	r3, #9
 8028462:	d106      	bne.n	8028472 <static_cb+0xbe>
    restore_http_cb(c);
 8028464:	68f8      	ldr	r0, [r7, #12]
 8028466:	f7ff ff69 	bl	802833c <restore_http_cb>
 802846a:	e002      	b.n	8028472 <static_cb+0xbe>
    if (c->send.len >= c->send.size) return;  // Rate limit
 802846c:	bf00      	nop
 802846e:	e000      	b.n	8028472 <static_cb+0xbe>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8028470:	bf00      	nop
  }
  (void) ev_data;
}
 8028472:	3728      	adds	r7, #40	@ 0x28
 8028474:	46bd      	mov	sp, r7
 8028476:	bd80      	pop	{r7, pc}

08028478 <guess_content_type>:
    MG_C_STR("3gp"), MG_C_STR("video/3gpp"),
    {0, 0},
};
// clang-format on

static struct mg_str guess_content_type(struct mg_str path, const char *extra) {
 8028478:	b590      	push	{r4, r7, lr}
 802847a:	b091      	sub	sp, #68	@ 0x44
 802847c:	af02      	add	r7, sp, #8
 802847e:	60f8      	str	r0, [r7, #12]
 8028480:	1d38      	adds	r0, r7, #4
 8028482:	e880 0006 	stmia.w	r0, {r1, r2}
 8028486:	603b      	str	r3, [r7, #0]
  struct mg_str entry, k, v, s = mg_str(extra);
 8028488:	f107 0314 	add.w	r3, r7, #20
 802848c:	6839      	ldr	r1, [r7, #0]
 802848e:	4618      	mov	r0, r3
 8028490:	f009 fba8 	bl	8031be4 <mg_str_s>
  size_t i = 0;
 8028494:	2300      	movs	r3, #0
 8028496:	637b      	str	r3, [r7, #52]	@ 0x34

  // Shrink path to its extension only
  while (i < path.len && path.buf[path.len - i - 1] != '.') i++;
 8028498:	e002      	b.n	80284a0 <guess_content_type+0x28>
 802849a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802849c:	3301      	adds	r3, #1
 802849e:	637b      	str	r3, [r7, #52]	@ 0x34
 80284a0:	68bb      	ldr	r3, [r7, #8]
 80284a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80284a4:	429a      	cmp	r2, r3
 80284a6:	d208      	bcs.n	80284ba <guess_content_type+0x42>
 80284a8:	687a      	ldr	r2, [r7, #4]
 80284aa:	68b9      	ldr	r1, [r7, #8]
 80284ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80284ae:	1acb      	subs	r3, r1, r3
 80284b0:	3b01      	subs	r3, #1
 80284b2:	4413      	add	r3, r2
 80284b4:	781b      	ldrb	r3, [r3, #0]
 80284b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80284b8:	d1ef      	bne.n	802849a <guess_content_type+0x22>
  path.buf += path.len - i;
 80284ba:	687a      	ldr	r2, [r7, #4]
 80284bc:	68b9      	ldr	r1, [r7, #8]
 80284be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80284c0:	1acb      	subs	r3, r1, r3
 80284c2:	4413      	add	r3, r2
 80284c4:	607b      	str	r3, [r7, #4]
  path.len = i;
 80284c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80284c8:	60bb      	str	r3, [r7, #8]

  // Process user-provided mime type overrides, if any
  while (mg_span(s, &entry, &s, ',')) {
 80284ca:	e020      	b.n	802850e <guess_content_type+0x96>
    if (mg_span(entry, &k, &v, '=') && mg_strcmp(path, k) == 0) return v;
 80284cc:	f107 031c 	add.w	r3, r7, #28
 80284d0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80284d4:	213d      	movs	r1, #61	@ 0x3d
 80284d6:	9100      	str	r1, [sp, #0]
 80284d8:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80284dc:	c903      	ldmia	r1, {r0, r1}
 80284de:	f009 fd48 	bl	8031f72 <mg_span>
 80284e2:	4603      	mov	r3, r0
 80284e4:	2b00      	cmp	r3, #0
 80284e6:	d012      	beq.n	802850e <guess_content_type+0x96>
 80284e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80284ec:	cb0c      	ldmia	r3, {r2, r3}
 80284ee:	1d39      	adds	r1, r7, #4
 80284f0:	c903      	ldmia	r1, {r0, r1}
 80284f2:	f009 fbc1 	bl	8031c78 <mg_strcmp>
 80284f6:	4603      	mov	r3, r0
 80284f8:	2b00      	cmp	r3, #0
 80284fa:	d108      	bne.n	802850e <guess_content_type+0x96>
 80284fc:	68fb      	ldr	r3, [r7, #12]
 80284fe:	461a      	mov	r2, r3
 8028500:	f107 031c 	add.w	r3, r7, #28
 8028504:	e893 0003 	ldmia.w	r3, {r0, r1}
 8028508:	e882 0003 	stmia.w	r2, {r0, r1}
 802850c:	e036      	b.n	802857c <guess_content_type+0x104>
  while (mg_span(s, &entry, &s, ',')) {
 802850e:	f107 0314 	add.w	r3, r7, #20
 8028512:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8028516:	212c      	movs	r1, #44	@ 0x2c
 8028518:	9100      	str	r1, [sp, #0]
 802851a:	f107 0114 	add.w	r1, r7, #20
 802851e:	c903      	ldmia	r1, {r0, r1}
 8028520:	f009 fd27 	bl	8031f72 <mg_span>
 8028524:	4603      	mov	r3, r0
 8028526:	2b00      	cmp	r3, #0
 8028528:	d1d0      	bne.n	80284cc <guess_content_type+0x54>
  }

  // Process built-in mime types
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 802852a:	2300      	movs	r3, #0
 802852c:	637b      	str	r3, [r7, #52]	@ 0x34
 802852e:	e01a      	b.n	8028566 <guess_content_type+0xee>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 8028530:	4a14      	ldr	r2, [pc, #80]	@ (8028584 <guess_content_type+0x10c>)
 8028532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8028534:	00db      	lsls	r3, r3, #3
 8028536:	4413      	add	r3, r2
 8028538:	cb0c      	ldmia	r3, {r2, r3}
 802853a:	1d39      	adds	r1, r7, #4
 802853c:	c903      	ldmia	r1, {r0, r1}
 802853e:	f009 fb9b 	bl	8031c78 <mg_strcmp>
 8028542:	4603      	mov	r3, r0
 8028544:	2b00      	cmp	r3, #0
 8028546:	d10b      	bne.n	8028560 <guess_content_type+0xe8>
 8028548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802854a:	3301      	adds	r3, #1
 802854c:	68f9      	ldr	r1, [r7, #12]
 802854e:	4a0d      	ldr	r2, [pc, #52]	@ (8028584 <guess_content_type+0x10c>)
 8028550:	460c      	mov	r4, r1
 8028552:	00db      	lsls	r3, r3, #3
 8028554:	4413      	add	r3, r2
 8028556:	e893 0003 	ldmia.w	r3, {r0, r1}
 802855a:	e884 0003 	stmia.w	r4, {r0, r1}
 802855e:	e00d      	b.n	802857c <guess_content_type+0x104>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 8028560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8028562:	3302      	adds	r3, #2
 8028564:	637b      	str	r3, [r7, #52]	@ 0x34
 8028566:	4a07      	ldr	r2, [pc, #28]	@ (8028584 <guess_content_type+0x10c>)
 8028568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802856a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 802856e:	2b00      	cmp	r3, #0
 8028570:	d1de      	bne.n	8028530 <guess_content_type+0xb8>
  }

  return mg_str("text/plain; charset=utf-8");
 8028572:	68fb      	ldr	r3, [r7, #12]
 8028574:	4904      	ldr	r1, [pc, #16]	@ (8028588 <guess_content_type+0x110>)
 8028576:	4618      	mov	r0, r3
 8028578:	f009 fb34 	bl	8031be4 <mg_str_s>
}
 802857c:	68f8      	ldr	r0, [r7, #12]
 802857e:	373c      	adds	r7, #60	@ 0x3c
 8028580:	46bd      	mov	sp, r7
 8028582:	bd90      	pop	{r4, r7, pc}
 8028584:	200000b0 	.word	0x200000b0
 8028588:	08041d6c 	.word	0x08041d6c

0802858c <getrange>:

static int getrange(struct mg_str *s, size_t *a, size_t *b) {
 802858c:	b580      	push	{r7, lr}
 802858e:	b08c      	sub	sp, #48	@ 0x30
 8028590:	af02      	add	r7, sp, #8
 8028592:	60f8      	str	r0, [r7, #12]
 8028594:	60b9      	str	r1, [r7, #8]
 8028596:	607a      	str	r2, [r7, #4]
  size_t i, numparsed = 0;
 8028598:	2300      	movs	r3, #0
 802859a:	623b      	str	r3, [r7, #32]
  for (i = 0; i + 6 < s->len; i++) {
 802859c:	2300      	movs	r3, #0
 802859e:	627b      	str	r3, [r7, #36]	@ 0x24
 80285a0:	e058      	b.n	8028654 <getrange+0xc8>
    struct mg_str k, v = mg_str_n(s->buf + i + 6, s->len - i - 6);
 80285a2:	68fb      	ldr	r3, [r7, #12]
 80285a4:	681a      	ldr	r2, [r3, #0]
 80285a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80285a8:	3306      	adds	r3, #6
 80285aa:	18d1      	adds	r1, r2, r3
 80285ac:	68fb      	ldr	r3, [r7, #12]
 80285ae:	685a      	ldr	r2, [r3, #4]
 80285b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80285b2:	1ad3      	subs	r3, r2, r3
 80285b4:	1f9a      	subs	r2, r3, #6
 80285b6:	f107 0310 	add.w	r3, r7, #16
 80285ba:	4618      	mov	r0, r3
 80285bc:	f009 fb2f 	bl	8031c1e <mg_str_n>
    if (memcmp(&s->buf[i], "bytes=", 6) != 0) continue;
 80285c0:	68fb      	ldr	r3, [r7, #12]
 80285c2:	681a      	ldr	r2, [r3, #0]
 80285c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80285c6:	4413      	add	r3, r2
 80285c8:	2206      	movs	r2, #6
 80285ca:	4929      	ldr	r1, [pc, #164]	@ (8028670 <getrange+0xe4>)
 80285cc:	4618      	mov	r0, r3
 80285ce:	f00d fb7b 	bl	8035cc8 <memcmp>
 80285d2:	4603      	mov	r3, r0
 80285d4:	2b00      	cmp	r3, #0
 80285d6:	d003      	beq.n	80285e0 <getrange+0x54>
  for (i = 0; i + 6 < s->len; i++) {
 80285d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80285da:	3301      	adds	r3, #1
 80285dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80285de:	e039      	b.n	8028654 <getrange+0xc8>
    if (mg_span(v, &k, &v, '-')) {
 80285e0:	f107 0310 	add.w	r3, r7, #16
 80285e4:	f107 0218 	add.w	r2, r7, #24
 80285e8:	212d      	movs	r1, #45	@ 0x2d
 80285ea:	9100      	str	r1, [sp, #0]
 80285ec:	f107 0110 	add.w	r1, r7, #16
 80285f0:	c903      	ldmia	r1, {r0, r1}
 80285f2:	f009 fcbe 	bl	8031f72 <mg_span>
 80285f6:	4603      	mov	r3, r0
 80285f8:	2b00      	cmp	r3, #0
 80285fa:	d01d      	beq.n	8028638 <getrange+0xac>
      if (mg_to_size_t(k, a)) numparsed++;
 80285fc:	68ba      	ldr	r2, [r7, #8]
 80285fe:	f107 0318 	add.w	r3, r7, #24
 8028602:	e893 0003 	ldmia.w	r3, {r0, r1}
 8028606:	f7fe fbcd 	bl	8026da4 <mg_to_size_t>
 802860a:	4603      	mov	r3, r0
 802860c:	2b00      	cmp	r3, #0
 802860e:	d002      	beq.n	8028616 <getrange+0x8a>
 8028610:	6a3b      	ldr	r3, [r7, #32]
 8028612:	3301      	adds	r3, #1
 8028614:	623b      	str	r3, [r7, #32]
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 8028616:	697b      	ldr	r3, [r7, #20]
 8028618:	2b00      	cmp	r3, #0
 802861a:	d022      	beq.n	8028662 <getrange+0xd6>
 802861c:	687a      	ldr	r2, [r7, #4]
 802861e:	f107 0310 	add.w	r3, r7, #16
 8028622:	e893 0003 	ldmia.w	r3, {r0, r1}
 8028626:	f7fe fbbd 	bl	8026da4 <mg_to_size_t>
 802862a:	4603      	mov	r3, r0
 802862c:	2b00      	cmp	r3, #0
 802862e:	d018      	beq.n	8028662 <getrange+0xd6>
 8028630:	6a3b      	ldr	r3, [r7, #32]
 8028632:	3301      	adds	r3, #1
 8028634:	623b      	str	r3, [r7, #32]
    } else {
      if (mg_to_size_t(v, a)) numparsed++;
    }
    break;
 8028636:	e014      	b.n	8028662 <getrange+0xd6>
      if (mg_to_size_t(v, a)) numparsed++;
 8028638:	68ba      	ldr	r2, [r7, #8]
 802863a:	f107 0310 	add.w	r3, r7, #16
 802863e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8028642:	f7fe fbaf 	bl	8026da4 <mg_to_size_t>
 8028646:	4603      	mov	r3, r0
 8028648:	2b00      	cmp	r3, #0
 802864a:	d00a      	beq.n	8028662 <getrange+0xd6>
 802864c:	6a3b      	ldr	r3, [r7, #32]
 802864e:	3301      	adds	r3, #1
 8028650:	623b      	str	r3, [r7, #32]
 8028652:	e007      	b.n	8028664 <getrange+0xd8>
  for (i = 0; i + 6 < s->len; i++) {
 8028654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8028656:	1d9a      	adds	r2, r3, #6
 8028658:	68fb      	ldr	r3, [r7, #12]
 802865a:	685b      	ldr	r3, [r3, #4]
 802865c:	429a      	cmp	r2, r3
 802865e:	d3a0      	bcc.n	80285a2 <getrange+0x16>
 8028660:	e000      	b.n	8028664 <getrange+0xd8>
    break;
 8028662:	bf00      	nop
  }
  return (int) numparsed;
 8028664:	6a3b      	ldr	r3, [r7, #32]
}
 8028666:	4618      	mov	r0, r3
 8028668:	3728      	adds	r7, #40	@ 0x28
 802866a:	46bd      	mov	sp, r7
 802866c:	bd80      	pop	{r7, pc}
 802866e:	bf00      	nop
 8028670:	08041ef0 	.word	0x08041ef0

08028674 <mg_http_serve_file>:

void mg_http_serve_file(struct mg_connection *c, struct mg_http_message *hm,
                        const char *path,
                        const struct mg_http_serve_opts *opts) {
 8028674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028678:	b0f9      	sub	sp, #484	@ 0x1e4
 802867a:	af0a      	add	r7, sp, #40	@ 0x28
 802867c:	f507 74dc 	add.w	r4, r7, #440	@ 0x1b8
 8028680:	f5a4 74ca 	sub.w	r4, r4, #404	@ 0x194
 8028684:	6020      	str	r0, [r4, #0]
 8028686:	f507 70dc 	add.w	r0, r7, #440	@ 0x1b8
 802868a:	f5a0 70cc 	sub.w	r0, r0, #408	@ 0x198
 802868e:	6001      	str	r1, [r0, #0]
 8028690:	f507 71dc 	add.w	r1, r7, #440	@ 0x1b8
 8028694:	f5a1 71ce 	sub.w	r1, r1, #412	@ 0x19c
 8028698:	600a      	str	r2, [r1, #0]
 802869a:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 802869e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80286a2:	6013      	str	r3, [r2, #0]
  char etag[64], tmp[MG_PATH_MAX];
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 80286a4:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80286a8:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80286ac:	681b      	ldr	r3, [r3, #0]
 80286ae:	695b      	ldr	r3, [r3, #20]
 80286b0:	2b00      	cmp	r3, #0
 80286b2:	d006      	beq.n	80286c2 <mg_http_serve_file+0x4e>
 80286b4:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80286b8:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80286bc:	681b      	ldr	r3, [r3, #0]
 80286be:	695b      	ldr	r3, [r3, #20]
 80286c0:	e000      	b.n	80286c4 <mg_http_serve_file+0x50>
 80286c2:	4ba7      	ldr	r3, [pc, #668]	@ (8028960 <mg_http_serve_file+0x2ec>)
 80286c4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
  struct mg_fd *fd = NULL;
 80286c8:	2300      	movs	r3, #0
 80286ca:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
  size_t size = 0;
 80286ce:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80286d2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80286d6:	2200      	movs	r2, #0
 80286d8:	601a      	str	r2, [r3, #0]
  time_t mtime = 0;
 80286da:	f04f 0200 	mov.w	r2, #0
 80286de:	f04f 0300 	mov.w	r3, #0
 80286e2:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
  struct mg_str *inm = NULL;
 80286e6:	2300      	movs	r3, #0
 80286e8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
  struct mg_str mime = guess_content_type(mg_str(path), opts->mime_types);
 80286ec:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 80286f0:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80286f4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80286f8:	6819      	ldr	r1, [r3, #0]
 80286fa:	4610      	mov	r0, r2
 80286fc:	f009 fa72 	bl	8031be4 <mg_str_s>
 8028700:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028704:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8028708:	681b      	ldr	r3, [r3, #0]
 802870a:	68db      	ldr	r3, [r3, #12]
 802870c:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 8028710:	f5a2 7090 	sub.w	r0, r2, #288	@ 0x120
 8028714:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8028718:	ca06      	ldmia	r2, {r1, r2}
 802871a:	f7ff fead 	bl	8028478 <guess_content_type>
  bool gzip = false;
 802871e:	2300      	movs	r3, #0
 8028720:	f887 31b3 	strb.w	r3, [r7, #435]	@ 0x1b3

  if (path != NULL) {
 8028724:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028728:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 802872c:	681b      	ldr	r3, [r3, #0]
 802872e:	2b00      	cmp	r3, #0
 8028730:	d05c      	beq.n	80287ec <mg_http_serve_file+0x178>
    // If a browser sends us "Accept-Encoding: gzip", try to open .gz first
    struct mg_str *ae = mg_http_get_header(hm, "Accept-Encoding");
 8028732:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028736:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 802873a:	498a      	ldr	r1, [pc, #552]	@ (8028964 <mg_http_serve_file+0x2f0>)
 802873c:	6818      	ldr	r0, [r3, #0]
 802873e:	f7fe fd7f 	bl	8027240 <mg_http_get_header>
 8028742:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
    if (ae != NULL) {
 8028746:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 802874a:	2b00      	cmp	r3, #0
 802874c:	d03e      	beq.n	80287cc <mg_http_serve_file+0x158>
      char *ae_ = mg_mprintf("%.*s", ae->len, ae->buf);
 802874e:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8028752:	6859      	ldr	r1, [r3, #4]
 8028754:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8028758:	681b      	ldr	r3, [r3, #0]
 802875a:	461a      	mov	r2, r3
 802875c:	4882      	ldr	r0, [pc, #520]	@ (8028968 <mg_http_serve_file+0x2f4>)
 802875e:	f008 fd8f 	bl	8031280 <mg_mprintf>
 8028762:	f8c7 0198 	str.w	r0, [r7, #408]	@ 0x198
      if (ae_ != NULL && strstr(ae_, "gzip") != NULL) {
 8028766:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 802876a:	2b00      	cmp	r3, #0
 802876c:	d02a      	beq.n	80287c4 <mg_http_serve_file+0x150>
 802876e:	497f      	ldr	r1, [pc, #508]	@ (802896c <mg_http_serve_file+0x2f8>)
 8028770:	f8d7 0198 	ldr.w	r0, [r7, #408]	@ 0x198
 8028774:	f00d fbbc 	bl	8035ef0 <strstr>
 8028778:	4603      	mov	r3, r0
 802877a:	2b00      	cmp	r3, #0
 802877c:	d022      	beq.n	80287c4 <mg_http_serve_file+0x150>
        mg_snprintf(tmp, sizeof(tmp), "%s.gz", path);
 802877e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028782:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8028786:	f107 00ac 	add.w	r0, r7, #172	@ 0xac
 802878a:	681b      	ldr	r3, [r3, #0]
 802878c:	4a78      	ldr	r2, [pc, #480]	@ (8028970 <mg_http_serve_file+0x2fc>)
 802878e:	2180      	movs	r1, #128	@ 0x80
 8028790:	f008 fd40 	bl	8031214 <mg_snprintf>
        fd = mg_fs_open(fs, tmp, MG_FS_READ);
 8028794:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8028798:	2201      	movs	r2, #1
 802879a:	4619      	mov	r1, r3
 802879c:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
 80287a0:	f7fe fa0c 	bl	8026bbc <mg_fs_open>
 80287a4:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
        if (fd != NULL) gzip = true, path = tmp;
 80287a8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80287ac:	2b00      	cmp	r3, #0
 80287ae:	d009      	beq.n	80287c4 <mg_http_serve_file+0x150>
 80287b0:	2301      	movs	r3, #1
 80287b2:	f887 31b3 	strb.w	r3, [r7, #435]	@ 0x1b3
 80287b6:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80287ba:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80287be:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 80287c2:	601a      	str	r2, [r3, #0]
      }
      free(ae_);
 80287c4:	f8d7 0198 	ldr.w	r0, [r7, #408]	@ 0x198
 80287c8:	f7f3 ffce 	bl	801c768 <vPortFree>
    }
    // No luck opening .gz? Open what we've told to open
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 80287cc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80287d0:	2b00      	cmp	r3, #0
 80287d2:	d10b      	bne.n	80287ec <mg_http_serve_file+0x178>
 80287d4:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80287d8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80287dc:	2201      	movs	r2, #1
 80287de:	6819      	ldr	r1, [r3, #0]
 80287e0:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
 80287e4:	f7fe f9ea 	bl	8026bbc <mg_fs_open>
 80287e8:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
  }

  // Failed to open, and page404 is configured? Open it, then
  if (fd == NULL && opts->page404 != NULL) {
 80287ec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80287f0:	2b00      	cmp	r3, #0
 80287f2:	d144      	bne.n	802887e <mg_http_serve_file+0x20a>
 80287f4:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80287f8:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80287fc:	681b      	ldr	r3, [r3, #0]
 80287fe:	691b      	ldr	r3, [r3, #16]
 8028800:	2b00      	cmp	r3, #0
 8028802:	d03c      	beq.n	802887e <mg_http_serve_file+0x20a>
    fd = mg_fs_open(fs, opts->page404, MG_FS_READ);
 8028804:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028808:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 802880c:	681b      	ldr	r3, [r3, #0]
 802880e:	691b      	ldr	r3, [r3, #16]
 8028810:	2201      	movs	r2, #1
 8028812:	4619      	mov	r1, r3
 8028814:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
 8028818:	f7fe f9d0 	bl	8026bbc <mg_fs_open>
 802881c:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
    path = opts->page404;
 8028820:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028824:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8028828:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 802882c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8028830:	6812      	ldr	r2, [r2, #0]
 8028832:	6912      	ldr	r2, [r2, #16]
 8028834:	601a      	str	r2, [r3, #0]
    mime = guess_content_type(mg_str(path), opts->mime_types);
 8028836:	f507 72ba 	add.w	r2, r7, #372	@ 0x174
 802883a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 802883e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8028842:	6819      	ldr	r1, [r3, #0]
 8028844:	4610      	mov	r0, r2
 8028846:	f009 f9cd 	bl	8031be4 <mg_str_s>
 802884a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 802884e:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8028852:	681b      	ldr	r3, [r3, #0]
 8028854:	68db      	ldr	r3, [r3, #12]
 8028856:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 802885a:	f5a2 7490 	sub.w	r4, r2, #288	@ 0x120
 802885e:	f107 0010 	add.w	r0, r7, #16
 8028862:	f507 72ba 	add.w	r2, r7, #372	@ 0x174
 8028866:	ca06      	ldmia	r2, {r1, r2}
 8028868:	f7ff fe06 	bl	8028478 <guess_content_type>
 802886c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028870:	f5a3 72d4 	sub.w	r2, r3, #424	@ 0x1a8
 8028874:	4623      	mov	r3, r4
 8028876:	e892 0003 	ldmia.w	r2, {r0, r1}
 802887a:	e883 0003 	stmia.w	r3, {r0, r1}
  }

  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 802887e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8028882:	2b00      	cmp	r3, #0
 8028884:	d00f      	beq.n	80288a6 <mg_http_serve_file+0x232>
 8028886:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 802888a:	681c      	ldr	r4, [r3, #0]
 802888c:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8028890:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8028894:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028898:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 802889c:	6818      	ldr	r0, [r3, #0]
 802889e:	47a0      	blx	r4
 80288a0:	4603      	mov	r3, r0
 80288a2:	2b00      	cmp	r3, #0
 80288a4:	d114      	bne.n	80288d0 <mg_http_serve_file+0x25c>
    mg_http_reply(c, 404, opts->extra_headers, "Not found\n");
 80288a6:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80288aa:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80288ae:	681b      	ldr	r3, [r3, #0]
 80288b0:	689a      	ldr	r2, [r3, #8]
 80288b2:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80288b6:	f5a3 70ca 	sub.w	r0, r3, #404	@ 0x194
 80288ba:	4b2e      	ldr	r3, [pc, #184]	@ (8028974 <mg_http_serve_file+0x300>)
 80288bc:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 80288c0:	6800      	ldr	r0, [r0, #0]
 80288c2:	f7ff fce3 	bl	802828c <mg_http_reply>
    mg_fs_close(fd);
 80288c6:	f8d7 01b4 	ldr.w	r0, [r7, #436]	@ 0x1b4
 80288ca:	f7fe f99e 	bl	8026c0a <mg_fs_close>
 80288ce:	e19d      	b.n	8028c0c <mg_http_serve_file+0x598>
    // NOTE: mg_http_etag() call should go first!
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 80288d0:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80288d4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80288d8:	6819      	ldr	r1, [r3, #0]
 80288da:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 80288de:	f507 7096 	add.w	r0, r7, #300	@ 0x12c
 80288e2:	e9cd 2300 	strd	r2, r3, [sp]
 80288e6:	460a      	mov	r2, r1
 80288e8:	2140      	movs	r1, #64	@ 0x40
 80288ea:	f7ff fd47 	bl	802837c <mg_http_etag>
 80288ee:	4603      	mov	r3, r0
 80288f0:	2b00      	cmp	r3, #0
 80288f2:	d045      	beq.n	8028980 <mg_http_serve_file+0x30c>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 80288f4:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80288f8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80288fc:	491e      	ldr	r1, [pc, #120]	@ (8028978 <mg_http_serve_file+0x304>)
 80288fe:	6818      	ldr	r0, [r3, #0]
 8028900:	f7fe fc9e 	bl	8027240 <mg_http_get_header>
 8028904:	f8c7 01a0 	str.w	r0, [r7, #416]	@ 0x1a0
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8028908:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 802890c:	2b00      	cmp	r3, #0
 802890e:	d037      	beq.n	8028980 <mg_http_serve_file+0x30c>
             mg_strcasecmp(*inm, mg_str(etag)) == 0) {
 8028910:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8028914:	f507 7296 	add.w	r2, r7, #300	@ 0x12c
 8028918:	4611      	mov	r1, r2
 802891a:	4618      	mov	r0, r3
 802891c:	f009 f962 	bl	8031be4 <mg_str_s>
 8028920:	f8d7 11a0 	ldr.w	r1, [r7, #416]	@ 0x1a0
 8028924:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8028928:	cb0c      	ldmia	r3, {r2, r3}
 802892a:	c903      	ldmia	r1, {r0, r1}
 802892c:	f009 f9e6 	bl	8031cfc <mg_strcasecmp>
 8028930:	4603      	mov	r3, r0
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8028932:	2b00      	cmp	r3, #0
 8028934:	d124      	bne.n	8028980 <mg_http_serve_file+0x30c>
    mg_fs_close(fd);
 8028936:	f8d7 01b4 	ldr.w	r0, [r7, #436]	@ 0x1b4
 802893a:	f7fe f966 	bl	8026c0a <mg_fs_close>
    mg_http_reply(c, 304, opts->extra_headers, "");
 802893e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028942:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8028946:	681b      	ldr	r3, [r3, #0]
 8028948:	689a      	ldr	r2, [r3, #8]
 802894a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 802894e:	f5a3 70ca 	sub.w	r0, r3, #404	@ 0x194
 8028952:	4b0a      	ldr	r3, [pc, #40]	@ (802897c <mg_http_serve_file+0x308>)
 8028954:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8028958:	6800      	ldr	r0, [r0, #0]
 802895a:	f7ff fc97 	bl	802828c <mg_http_reply>
 802895e:	e155      	b.n	8028c0c <mg_http_serve_file+0x598>
 8028960:	20000088 	.word	0x20000088
 8028964:	08041ef8 	.word	0x08041ef8
 8028968:	080416e4 	.word	0x080416e4
 802896c:	08041f08 	.word	0x08041f08
 8028970:	08041f10 	.word	0x08041f10
 8028974:	08041f18 	.word	0x08041f18
 8028978:	08041f24 	.word	0x08041f24
 802897c:	08041c44 	.word	0x08041c44
  } else {
    int n, status = 200;
 8028980:	23c8      	movs	r3, #200	@ 0xc8
 8028982:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    char range[100];
    size_t r1 = 0, r2 = 0, cl = size;
 8028986:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 802898a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802898e:	2200      	movs	r2, #0
 8028990:	601a      	str	r2, [r3, #0]
 8028992:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028996:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 802899a:	2200      	movs	r2, #0
 802899c:	601a      	str	r2, [r3, #0]
 802899e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80289a2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80289a6:	681b      	ldr	r3, [r3, #0]
 80289a8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8

    // Handle Range header
    struct mg_str *rh = mg_http_get_header(hm, "Range");
 80289ac:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80289b0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80289b4:	4998      	ldr	r1, [pc, #608]	@ (8028c18 <mg_http_serve_file+0x5a4>)
 80289b6:	6818      	ldr	r0, [r3, #0]
 80289b8:	f7fe fc42 	bl	8027240 <mg_http_get_header>
 80289bc:	f8c7 0194 	str.w	r0, [r7, #404]	@ 0x194
    range[0] = '\0';
 80289c0:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80289c4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80289c8:	2200      	movs	r2, #0
 80289ca:	701a      	strb	r2, [r3, #0]
    if (rh != NULL && (n = getrange(rh, &r1, &r2)) > 0) {
 80289cc:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80289d0:	2b00      	cmp	r3, #0
 80289d2:	f000 8095 	beq.w	8028b00 <mg_http_serve_file+0x48c>
 80289d6:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 80289da:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80289de:	4619      	mov	r1, r3
 80289e0:	f8d7 0194 	ldr.w	r0, [r7, #404]	@ 0x194
 80289e4:	f7ff fdd2 	bl	802858c <getrange>
 80289e8:	f8c7 0190 	str.w	r0, [r7, #400]	@ 0x190
 80289ec:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80289f0:	2b00      	cmp	r3, #0
 80289f2:	f340 8085 	ble.w	8028b00 <mg_http_serve_file+0x48c>
      // If range is specified like "400-", set second limit to content len
      if (n == 1) r2 = cl - 1;
 80289f6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80289fa:	2b01      	cmp	r3, #1
 80289fc:	d107      	bne.n	8028a0e <mg_http_serve_file+0x39a>
 80289fe:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8028a02:	1e5a      	subs	r2, r3, #1
 8028a04:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028a08:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8028a0c:	601a      	str	r2, [r3, #0]
      if (r1 > r2 || r2 >= cl) {
 8028a0e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028a12:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8028a16:	681a      	ldr	r2, [r3, #0]
 8028a18:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028a1c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8028a20:	681b      	ldr	r3, [r3, #0]
 8028a22:	429a      	cmp	r2, r3
 8028a24:	d808      	bhi.n	8028a38 <mg_http_serve_file+0x3c4>
 8028a26:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028a2a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8028a2e:	681b      	ldr	r3, [r3, #0]
 8028a30:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8028a34:	429a      	cmp	r2, r3
 8028a36:	d81a      	bhi.n	8028a6e <mg_http_serve_file+0x3fa>
        status = 416;
 8028a38:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8028a3c:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
        cl = 0;
 8028a40:	2300      	movs	r3, #0
 8028a42:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 8028a46:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028a4a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8028a4e:	681b      	ldr	r3, [r3, #0]
 8028a50:	2200      	movs	r2, #0
 8028a52:	60bb      	str	r3, [r7, #8]
 8028a54:	60fa      	str	r2, [r7, #12]
 8028a56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8028a5a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8028a5e:	e9cd 1200 	strd	r1, r2, [sp]
 8028a62:	4a6e      	ldr	r2, [pc, #440]	@ (8028c1c <mg_http_serve_file+0x5a8>)
 8028a64:	2164      	movs	r1, #100	@ 0x64
 8028a66:	4618      	mov	r0, r3
 8028a68:	f008 fbd4 	bl	8031214 <mg_snprintf>
 8028a6c:	e048      	b.n	8028b00 <mg_http_serve_file+0x48c>
                    (int64_t) size);
      } else {
        status = 206;
 8028a6e:	23ce      	movs	r3, #206	@ 0xce
 8028a70:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
        cl = r2 - r1 + 1;
 8028a74:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028a78:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8028a7c:	681a      	ldr	r2, [r3, #0]
 8028a7e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028a82:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8028a86:	681b      	ldr	r3, [r3, #0]
 8028a88:	1ad3      	subs	r3, r2, r3
 8028a8a:	3301      	adds	r3, #1
 8028a8c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
        mg_snprintf(range, sizeof(range),
 8028a90:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028a94:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8028a98:	681b      	ldr	r3, [r3, #0]
 8028a9a:	2200      	movs	r2, #0
 8028a9c:	469a      	mov	sl, r3
 8028a9e:	4693      	mov	fp, r2
                    "Content-Range: bytes %llu-%llu/%llu\r\n", (uint64_t) r1,
                    (uint64_t) (r1 + cl - 1), (uint64_t) size);
 8028aa0:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028aa4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8028aa8:	681a      	ldr	r2, [r3, #0]
 8028aaa:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8028aae:	4413      	add	r3, r2
 8028ab0:	3b01      	subs	r3, #1
        mg_snprintf(range, sizeof(range),
 8028ab2:	2200      	movs	r2, #0
 8028ab4:	461d      	mov	r5, r3
 8028ab6:	4616      	mov	r6, r2
 8028ab8:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028abc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8028ac0:	681b      	ldr	r3, [r3, #0]
 8028ac2:	2200      	movs	r2, #0
 8028ac4:	603b      	str	r3, [r7, #0]
 8028ac6:	607a      	str	r2, [r7, #4]
 8028ac8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8028acc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8028ad0:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8028ad4:	e9cd 5602 	strd	r5, r6, [sp, #8]
 8028ad8:	e9cd ab00 	strd	sl, fp, [sp]
 8028adc:	4a50      	ldr	r2, [pc, #320]	@ (8028c20 <mg_http_serve_file+0x5ac>)
 8028ade:	2164      	movs	r1, #100	@ 0x64
 8028ae0:	4618      	mov	r0, r3
 8028ae2:	f008 fb97 	bl	8031214 <mg_snprintf>
        fs->sk(fd->fd, r1);
 8028ae6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8028aea:	699b      	ldr	r3, [r3, #24]
 8028aec:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8028af0:	6810      	ldr	r0, [r2, #0]
 8028af2:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 8028af6:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 8028afa:	6812      	ldr	r2, [r2, #0]
 8028afc:	4611      	mov	r1, r2
 8028afe:	4798      	blx	r3
      }
    }
    mg_printf(c,
 8028b00:	f8d7 01ac 	ldr.w	r0, [r7, #428]	@ 0x1ac
 8028b04:	f7fe fec6 	bl	8027894 <mg_http_status_code_str>
 8028b08:	4604      	mov	r4, r0
              "HTTP/1.1 %d %s\r\n"
              "Content-Type: %.*s\r\n"
              "Etag: %s\r\n"
              "Content-Length: %llu\r\n"
              "%s%s%s\r\n",
              status, mg_http_status_code_str(status), (int) mime.len, mime.buf,
 8028b0a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028b0e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8028b12:	685b      	ldr	r3, [r3, #4]
    mg_printf(c,
 8028b14:	461d      	mov	r5, r3
 8028b16:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028b1a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8028b1e:	681a      	ldr	r2, [r3, #0]
 8028b20:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8028b24:	2100      	movs	r1, #0
 8028b26:	4698      	mov	r8, r3
 8028b28:	4689      	mov	r9, r1
 8028b2a:	f897 31b3 	ldrb.w	r3, [r7, #435]	@ 0x1b3
 8028b2e:	2b00      	cmp	r3, #0
 8028b30:	d001      	beq.n	8028b36 <mg_http_serve_file+0x4c2>
 8028b32:	493c      	ldr	r1, [pc, #240]	@ (8028c24 <mg_http_serve_file+0x5b0>)
 8028b34:	e000      	b.n	8028b38 <mg_http_serve_file+0x4c4>
 8028b36:	493c      	ldr	r1, [pc, #240]	@ (8028c28 <mg_http_serve_file+0x5b4>)
              etag, (uint64_t) cl, gzip ? "Content-Encoding: gzip\r\n" : "",
              range, opts->extra_headers ? opts->extra_headers : "");
 8028b38:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028b3c:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8028b40:	681b      	ldr	r3, [r3, #0]
 8028b42:	689b      	ldr	r3, [r3, #8]
    mg_printf(c,
 8028b44:	2b00      	cmp	r3, #0
 8028b46:	d006      	beq.n	8028b56 <mg_http_serve_file+0x4e2>
 8028b48:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028b4c:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8028b50:	681b      	ldr	r3, [r3, #0]
 8028b52:	689b      	ldr	r3, [r3, #8]
 8028b54:	e000      	b.n	8028b58 <mg_http_serve_file+0x4e4>
 8028b56:	4b34      	ldr	r3, [pc, #208]	@ (8028c28 <mg_http_serve_file+0x5b4>)
 8028b58:	f507 70dc 	add.w	r0, r7, #440	@ 0x1b8
 8028b5c:	f5a0 70ca 	sub.w	r0, r0, #404	@ 0x194
 8028b60:	9308      	str	r3, [sp, #32]
 8028b62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8028b66:	9307      	str	r3, [sp, #28]
 8028b68:	9106      	str	r1, [sp, #24]
 8028b6a:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8028b6e:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8028b72:	9302      	str	r3, [sp, #8]
 8028b74:	9201      	str	r2, [sp, #4]
 8028b76:	9500      	str	r5, [sp, #0]
 8028b78:	4623      	mov	r3, r4
 8028b7a:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8028b7e:	492b      	ldr	r1, [pc, #172]	@ (8028c2c <mg_http_serve_file+0x5b8>)
 8028b80:	6800      	ldr	r0, [r0, #0]
 8028b82:	f004 fc73 	bl	802d46c <mg_printf>
    if (mg_strcasecmp(hm->method, mg_str("HEAD")) == 0) {
 8028b86:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 8028b8a:	4929      	ldr	r1, [pc, #164]	@ (8028c30 <mg_http_serve_file+0x5bc>)
 8028b8c:	4618      	mov	r0, r3
 8028b8e:	f009 f829 	bl	8031be4 <mg_str_s>
 8028b92:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028b96:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8028b9a:	6819      	ldr	r1, [r3, #0]
 8028b9c:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 8028ba0:	cb0c      	ldmia	r3, {r2, r3}
 8028ba2:	c903      	ldmia	r1, {r0, r1}
 8028ba4:	f009 f8aa 	bl	8031cfc <mg_strcasecmp>
 8028ba8:	4603      	mov	r3, r0
 8028baa:	2b00      	cmp	r3, #0
 8028bac:	d10f      	bne.n	8028bce <mg_http_serve_file+0x55a>
      c->is_resp = 0;
 8028bae:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028bb2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8028bb6:	681a      	ldr	r2, [r3, #0]
 8028bb8:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8028bbc:	f36f 13c7 	bfc	r3, #7, #1
 8028bc0:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
      mg_fs_close(fd);
 8028bc4:	f8d7 01b4 	ldr.w	r0, [r7, #436]	@ 0x1b4
 8028bc8:	f7fe f81f 	bl	8026c0a <mg_fs_close>
      c->pfn = static_cb;
      c->pfn_data = fd;
      *clp = cl;
    }
  }
}
 8028bcc:	e01e      	b.n	8028c0c <mg_http_serve_file+0x598>
      size_t *clp = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 8028bce:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028bd2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8028bd6:	681b      	ldr	r3, [r3, #0]
 8028bd8:	33a4      	adds	r3, #164	@ 0xa4
 8028bda:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
      c->pfn = static_cb;
 8028bde:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028be2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8028be6:	681b      	ldr	r3, [r3, #0]
 8028be8:	4a12      	ldr	r2, [pc, #72]	@ (8028c34 <mg_http_serve_file+0x5c0>)
 8028bea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      c->pfn_data = fd;
 8028bee:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028bf2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8028bf6:	681b      	ldr	r3, [r3, #0]
 8028bf8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8028bfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      *clp = cl;
 8028c00:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8028c04:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8028c08:	601a      	str	r2, [r3, #0]
}
 8028c0a:	e7ff      	b.n	8028c0c <mg_http_serve_file+0x598>
 8028c0c:	bf00      	nop
 8028c0e:	f507 77de 	add.w	r7, r7, #444	@ 0x1bc
 8028c12:	46bd      	mov	sp, r7
 8028c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028c18:	08041f34 	.word	0x08041f34
 8028c1c:	08041f3c 	.word	0x08041f3c
 8028c20:	08041f5c 	.word	0x08041f5c
 8028c24:	08041f84 	.word	0x08041f84
 8028c28:	08041c44 	.word	0x08041c44
 8028c2c:	08041fa0 	.word	0x08041fa0
 8028c30:	08041ff0 	.word	0x08041ff0
 8028c34:	080283b5 	.word	0x080283b5

08028c38 <printdirentry>:
  const struct mg_http_serve_opts *opts;
  const char *dir;
};

#if MG_ENABLE_DIRLIST
static void printdirentry(const char *name, void *userdata) {
 8028c38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8028c3c:	b0c8      	sub	sp, #288	@ 0x120
 8028c3e:	af0a      	add	r7, sp, #40	@ 0x28
 8028c40:	6078      	str	r0, [r7, #4]
 8028c42:	6039      	str	r1, [r7, #0]
  struct printdirentrydata *d = (struct printdirentrydata *) userdata;
 8028c44:	683b      	ldr	r3, [r7, #0]
 8028c46:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  struct mg_fs *fs = d->opts->fs == NULL ? &mg_fs_posix : d->opts->fs;
 8028c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8028c4e:	689b      	ldr	r3, [r3, #8]
 8028c50:	695b      	ldr	r3, [r3, #20]
 8028c52:	2b00      	cmp	r3, #0
 8028c54:	d004      	beq.n	8028c60 <printdirentry+0x28>
 8028c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8028c5a:	689b      	ldr	r3, [r3, #8]
 8028c5c:	695b      	ldr	r3, [r3, #20]
 8028c5e:	e000      	b.n	8028c62 <printdirentry+0x2a>
 8028c60:	4b66      	ldr	r3, [pc, #408]	@ (8028dfc <printdirentry+0x1c4>)
 8028c62:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  size_t size = 0;
 8028c66:	2300      	movs	r3, #0
 8028c68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  time_t t = 0;
 8028c6c:	f04f 0200 	mov.w	r2, #0
 8028c70:	f04f 0300 	mov.w	r3, #0
 8028c74:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
  char path[MG_PATH_MAX], sz[40], mod[40];
  int flags, n = 0;
 8028c78:	2300      	movs	r3, #0
 8028c7a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

  // MG_DEBUG(("[%s] [%s]", d->dir, name));
  if (mg_snprintf(path, sizeof(path), "%s%c%s", d->dir, '/', name) >
 8028c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8028c82:	68da      	ldr	r2, [r3, #12]
 8028c84:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8028c88:	687b      	ldr	r3, [r7, #4]
 8028c8a:	9301      	str	r3, [sp, #4]
 8028c8c:	232f      	movs	r3, #47	@ 0x2f
 8028c8e:	9300      	str	r3, [sp, #0]
 8028c90:	4613      	mov	r3, r2
 8028c92:	4a5b      	ldr	r2, [pc, #364]	@ (8028e00 <printdirentry+0x1c8>)
 8028c94:	2180      	movs	r1, #128	@ 0x80
 8028c96:	f008 fabd 	bl	8031214 <mg_snprintf>
 8028c9a:	4603      	mov	r3, r0
 8028c9c:	2b80      	cmp	r3, #128	@ 0x80
 8028c9e:	d910      	bls.n	8028cc2 <printdirentry+0x8a>
      sizeof(path)) {
    MG_ERROR(("%s truncated", name));
 8028ca0:	4b58      	ldr	r3, [pc, #352]	@ (8028e04 <printdirentry+0x1cc>)
 8028ca2:	681b      	ldr	r3, [r3, #0]
 8028ca4:	2b00      	cmp	r3, #0
 8028ca6:	f340 80a3 	ble.w	8028df0 <printdirentry+0x1b8>
 8028caa:	4b57      	ldr	r3, [pc, #348]	@ (8028e08 <printdirentry+0x1d0>)
 8028cac:	f640 3248 	movw	r2, #2888	@ 0xb48
 8028cb0:	4956      	ldr	r1, [pc, #344]	@ (8028e0c <printdirentry+0x1d4>)
 8028cb2:	2001      	movs	r0, #1
 8028cb4:	f002 fa92 	bl	802b1dc <mg_log_prefix>
 8028cb8:	6879      	ldr	r1, [r7, #4]
 8028cba:	4855      	ldr	r0, [pc, #340]	@ (8028e10 <printdirentry+0x1d8>)
 8028cbc:	f002 fade 	bl	802b27c <mg_log>
              "  <tr><td><a href=\"%.*s%s\">%s%s</a></td>"
              "<td name=%lu>%s</td><td name=%lld>%s</td></tr>\n",
              n, path, slash, name, slash, (unsigned long) t, mod,
              flags & MG_FS_DIR ? (int64_t) -1 : (int64_t) size, sz);
  }
}
 8028cc0:	e096      	b.n	8028df0 <printdirentry+0x1b8>
  } else if ((flags = fs->st(path, &size, &t)) == 0) {
 8028cc2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8028cc6:	681b      	ldr	r3, [r3, #0]
 8028cc8:	f107 02d8 	add.w	r2, r7, #216	@ 0xd8
 8028ccc:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 8028cd0:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8028cd4:	4798      	blx	r3
 8028cd6:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
 8028cda:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8028cde:	2b00      	cmp	r3, #0
 8028ce0:	d11a      	bne.n	8028d18 <printdirentry+0xe0>
    MG_ERROR(("%lu stat(%s): %d", d->c->id, path, errno));
 8028ce2:	4b48      	ldr	r3, [pc, #288]	@ (8028e04 <printdirentry+0x1cc>)
 8028ce4:	681b      	ldr	r3, [r3, #0]
 8028ce6:	2b00      	cmp	r3, #0
 8028ce8:	f340 8082 	ble.w	8028df0 <printdirentry+0x1b8>
 8028cec:	4b46      	ldr	r3, [pc, #280]	@ (8028e08 <printdirentry+0x1d0>)
 8028cee:	f640 324a 	movw	r2, #2890	@ 0xb4a
 8028cf2:	4946      	ldr	r1, [pc, #280]	@ (8028e0c <printdirentry+0x1d4>)
 8028cf4:	2001      	movs	r0, #1
 8028cf6:	f002 fa71 	bl	802b1dc <mg_log_prefix>
 8028cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8028cfe:	681b      	ldr	r3, [r3, #0]
 8028d00:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8028d02:	f00e fa79 	bl	80371f8 <__errno>
 8028d06:	4603      	mov	r3, r0
 8028d08:	681b      	ldr	r3, [r3, #0]
 8028d0a:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8028d0e:	4621      	mov	r1, r4
 8028d10:	4840      	ldr	r0, [pc, #256]	@ (8028e14 <printdirentry+0x1dc>)
 8028d12:	f002 fab3 	bl	802b27c <mg_log>
}
 8028d16:	e06b      	b.n	8028df0 <printdirentry+0x1b8>
    const char *slash = flags & MG_FS_DIR ? "/" : "";
 8028d18:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8028d1c:	f003 0304 	and.w	r3, r3, #4
 8028d20:	2b00      	cmp	r3, #0
 8028d22:	d001      	beq.n	8028d28 <printdirentry+0xf0>
 8028d24:	4b3c      	ldr	r3, [pc, #240]	@ (8028e18 <printdirentry+0x1e0>)
 8028d26:	e000      	b.n	8028d2a <printdirentry+0xf2>
 8028d28:	4b3c      	ldr	r3, [pc, #240]	@ (8028e1c <printdirentry+0x1e4>)
 8028d2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    if (flags & MG_FS_DIR) {
 8028d2e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8028d32:	f003 0304 	and.w	r3, r3, #4
 8028d36:	2b00      	cmp	r3, #0
 8028d38:	d007      	beq.n	8028d4a <printdirentry+0x112>
      mg_snprintf(sz, sizeof(sz), "%s", "[DIR]");
 8028d3a:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8028d3e:	4b38      	ldr	r3, [pc, #224]	@ (8028e20 <printdirentry+0x1e8>)
 8028d40:	4a38      	ldr	r2, [pc, #224]	@ (8028e24 <printdirentry+0x1ec>)
 8028d42:	2128      	movs	r1, #40	@ 0x28
 8028d44:	f008 fa66 	bl	8031214 <mg_snprintf>
 8028d48:	e00d      	b.n	8028d66 <printdirentry+0x12e>
      mg_snprintf(sz, sizeof(sz), "%lld", (uint64_t) size);
 8028d4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8028d4e:	2200      	movs	r2, #0
 8028d50:	4698      	mov	r8, r3
 8028d52:	4691      	mov	r9, r2
 8028d54:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8028d58:	e9cd 8900 	strd	r8, r9, [sp]
 8028d5c:	4a32      	ldr	r2, [pc, #200]	@ (8028e28 <printdirentry+0x1f0>)
 8028d5e:	2128      	movs	r1, #40	@ 0x28
 8028d60:	4618      	mov	r0, r3
 8028d62:	f008 fa57 	bl	8031214 <mg_snprintf>
    mg_snprintf(mod, sizeof(mod), "%lu", (unsigned long) t);
 8028d66:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8028d6a:	4613      	mov	r3, r2
 8028d6c:	f107 0008 	add.w	r0, r7, #8
 8028d70:	4a2e      	ldr	r2, [pc, #184]	@ (8028e2c <printdirentry+0x1f4>)
 8028d72:	2128      	movs	r1, #40	@ 0x28
 8028d74:	f008 fa4e 	bl	8031214 <mg_snprintf>
    n = (int) mg_url_encode(name, strlen(name), path, sizeof(path));
 8028d78:	6878      	ldr	r0, [r7, #4]
 8028d7a:	f7e7 fa91 	bl	80102a0 <strlen>
 8028d7e:	4601      	mov	r1, r0
 8028d80:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8028d84:	2380      	movs	r3, #128	@ 0x80
 8028d86:	6878      	ldr	r0, [r7, #4]
 8028d88:	f000 fbdc 	bl	8029544 <mg_url_encode>
 8028d8c:	4603      	mov	r3, r0
 8028d8e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    mg_printf(d->c,
 8028d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8028d96:	6818      	ldr	r0, [r3, #0]
 8028d98:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8028d9c:	4611      	mov	r1, r2
              flags & MG_FS_DIR ? (int64_t) -1 : (int64_t) size, sz);
 8028d9e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8028da2:	f003 0304 	and.w	r3, r3, #4
    mg_printf(d->c,
 8028da6:	2b00      	cmp	r3, #0
 8028da8:	d105      	bne.n	8028db6 <printdirentry+0x17e>
              flags & MG_FS_DIR ? (int64_t) -1 : (int64_t) size, sz);
 8028daa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
    mg_printf(d->c,
 8028dae:	2200      	movs	r2, #0
 8028db0:	461c      	mov	r4, r3
 8028db2:	4615      	mov	r5, r2
 8028db4:	e003      	b.n	8028dbe <printdirentry+0x186>
 8028db6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8028dba:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8028dbe:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8028dc2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8028dc6:	9308      	str	r3, [sp, #32]
 8028dc8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8028dcc:	f107 0308 	add.w	r3, r7, #8
 8028dd0:	9304      	str	r3, [sp, #16]
 8028dd2:	9103      	str	r1, [sp, #12]
 8028dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8028dd8:	9302      	str	r3, [sp, #8]
 8028dda:	687b      	ldr	r3, [r7, #4]
 8028ddc:	9301      	str	r3, [sp, #4]
 8028dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8028de2:	9300      	str	r3, [sp, #0]
 8028de4:	4613      	mov	r3, r2
 8028de6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8028dea:	4911      	ldr	r1, [pc, #68]	@ (8028e30 <printdirentry+0x1f8>)
 8028dec:	f004 fb3e 	bl	802d46c <mg_printf>
}
 8028df0:	bf00      	nop
 8028df2:	37f8      	adds	r7, #248	@ 0xf8
 8028df4:	46bd      	mov	sp, r7
 8028df6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8028dfa:	bf00      	nop
 8028dfc:	20000088 	.word	0x20000088
 8028e00:	08041ff8 	.word	0x08041ff8
 8028e04:	20000298 	.word	0x20000298
 8028e08:	08044584 	.word	0x08044584
 8028e0c:	08041564 	.word	0x08041564
 8028e10:	08042000 	.word	0x08042000
 8028e14:	08042010 	.word	0x08042010
 8028e18:	08042024 	.word	0x08042024
 8028e1c:	08041c44 	.word	0x08041c44
 8028e20:	08042028 	.word	0x08042028
 8028e24:	080416d0 	.word	0x080416d0
 8028e28:	08042030 	.word	0x08042030
 8028e2c:	08042038 	.word	0x08042038
 8028e30:	0804203c 	.word	0x0804203c

08028e34 <listdir>:

static void listdir(struct mg_connection *c, struct mg_http_message *hm,
                    const struct mg_http_serve_opts *opts, char *dir) {
 8028e34:	b580      	push	{r7, lr}
 8028e36:	b0b8      	sub	sp, #224	@ 0xe0
 8028e38:	af04      	add	r7, sp, #16
 8028e3a:	60f8      	str	r0, [r7, #12]
 8028e3c:	60b9      	str	r1, [r7, #8]
 8028e3e:	607a      	str	r2, [r7, #4]
 8028e40:	603b      	str	r3, [r7, #0]
  const char *sort_js_code =
 8028e42:	4b51      	ldr	r3, [pc, #324]	@ (8028f88 <listdir+0x154>)
 8028e44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      "t1 = a.cells[2].getAttribute('name'), "
      "t2 = b.cells[2].getAttribute('name'); "
      "return so * (t1 < 0 && t2 >= 0 ? -1 : t2 < 0 && t1 >= 0 ? 1 : "
      "n1 ? parseInt(n2) - parseInt(n1) : "
      "c1.textContent.trim().localeCompare(c2.textContent.trim())); });";
  const char *sort_js_code2 =
 8028e48:	4b50      	ldr	r3, [pc, #320]	@ (8028f8c <listdir+0x158>)
 8028e4a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
      "var c = ev.target.rel; if (c) {if (c == sc) so *= -1; srt(tb, c, so); "
      "sc = c; ev.preventDefault();}};"
      "srt(tb, sc, so, true);"
      "}"
      "</script>";
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8028e4e:	687b      	ldr	r3, [r7, #4]
 8028e50:	695b      	ldr	r3, [r3, #20]
 8028e52:	2b00      	cmp	r3, #0
 8028e54:	d002      	beq.n	8028e5c <listdir+0x28>
 8028e56:	687b      	ldr	r3, [r7, #4]
 8028e58:	695b      	ldr	r3, [r3, #20]
 8028e5a:	e000      	b.n	8028e5e <listdir+0x2a>
 8028e5c:	4b4c      	ldr	r3, [pc, #304]	@ (8028f90 <listdir+0x15c>)
 8028e5e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  struct printdirentrydata d = {c, hm, opts, dir};
 8028e62:	68fb      	ldr	r3, [r7, #12]
 8028e64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8028e68:	68bb      	ldr	r3, [r7, #8]
 8028e6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8028e6e:	687b      	ldr	r3, [r7, #4]
 8028e70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8028e74:	683b      	ldr	r3, [r7, #0]
 8028e76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  char tmp[10], buf[MG_PATH_MAX];
  size_t off, n;
  int len = mg_url_decode(hm->uri.buf, hm->uri.len, buf, sizeof(buf), 0);
 8028e7a:	68bb      	ldr	r3, [r7, #8]
 8028e7c:	6898      	ldr	r0, [r3, #8]
 8028e7e:	68bb      	ldr	r3, [r7, #8]
 8028e80:	68d9      	ldr	r1, [r3, #12]
 8028e82:	f107 021c 	add.w	r2, r7, #28
 8028e86:	2300      	movs	r3, #0
 8028e88:	9300      	str	r3, [sp, #0]
 8028e8a:	2380      	movs	r3, #128	@ 0x80
 8028e8c:	f7fe f8e5 	bl	802705a <mg_url_decode>
 8028e90:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
  struct mg_str uri = len > 0 ? mg_str_n(buf, (size_t) len) : hm->uri;
 8028e94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8028e98:	2b00      	cmp	r3, #0
 8028e9a:	dd09      	ble.n	8028eb0 <listdir+0x7c>
 8028e9c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8028ea0:	f107 0314 	add.w	r3, r7, #20
 8028ea4:	f107 011c 	add.w	r1, r7, #28
 8028ea8:	4618      	mov	r0, r3
 8028eaa:	f008 feb8 	bl	8031c1e <mg_str_n>
 8028eae:	e007      	b.n	8028ec0 <listdir+0x8c>
 8028eb0:	68ba      	ldr	r2, [r7, #8]
 8028eb2:	f107 0314 	add.w	r3, r7, #20
 8028eb6:	3208      	adds	r2, #8
 8028eb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8028ebc:	e883 0003 	stmia.w	r3, {r0, r1}
  mg_printf(c,
            "HTTP/1.1 200 OK\r\n"
            "Content-Type: text/html; charset=utf-8\r\n"
            "%s"
            "Content-Length:         \r\n\r\n",
            opts->extra_headers == NULL ? "" : opts->extra_headers);
 8028ec0:	687b      	ldr	r3, [r7, #4]
 8028ec2:	689b      	ldr	r3, [r3, #8]
  mg_printf(c,
 8028ec4:	2b00      	cmp	r3, #0
 8028ec6:	d002      	beq.n	8028ece <listdir+0x9a>
 8028ec8:	687b      	ldr	r3, [r7, #4]
 8028eca:	689b      	ldr	r3, [r3, #8]
 8028ecc:	e000      	b.n	8028ed0 <listdir+0x9c>
 8028ece:	4b31      	ldr	r3, [pc, #196]	@ (8028f94 <listdir+0x160>)
 8028ed0:	461a      	mov	r2, r3
 8028ed2:	4931      	ldr	r1, [pc, #196]	@ (8028f98 <listdir+0x164>)
 8028ed4:	68f8      	ldr	r0, [r7, #12]
 8028ed6:	f004 fac9 	bl	802d46c <mg_printf>
  off = c->send.len;  // Start of body
 8028eda:	68fb      	ldr	r3, [r7, #12]
 8028edc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8028ede:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
            "<a href=\"#\" rel=\"1\">Modified</a></th>"
            "<th><a href=\"#\" rel=\"2\">Size</a></th></tr>"
            "<tr><td colspan=\"3\"><hr></td></tr>"
            "</thead>"
            "<tbody id=\"tb\">\n",
            (int) uri.len, uri.buf, sort_js_code, sort_js_code2, (int) uri.len,
 8028ee2:	69bb      	ldr	r3, [r7, #24]
  mg_printf(c,
 8028ee4:	4618      	mov	r0, r3
 8028ee6:	697a      	ldr	r2, [r7, #20]
            (int) uri.len, uri.buf, sort_js_code, sort_js_code2, (int) uri.len,
 8028ee8:	69bb      	ldr	r3, [r7, #24]
  mg_printf(c,
 8028eea:	4619      	mov	r1, r3
 8028eec:	697b      	ldr	r3, [r7, #20]
 8028eee:	9303      	str	r3, [sp, #12]
 8028ef0:	9102      	str	r1, [sp, #8]
 8028ef2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8028ef6:	9301      	str	r3, [sp, #4]
 8028ef8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8028efc:	9300      	str	r3, [sp, #0]
 8028efe:	4613      	mov	r3, r2
 8028f00:	4602      	mov	r2, r0
 8028f02:	4926      	ldr	r1, [pc, #152]	@ (8028f9c <listdir+0x168>)
 8028f04:	68f8      	ldr	r0, [r7, #12]
 8028f06:	f004 fab1 	bl	802d46c <mg_printf>
            uri.buf);
  mg_printf(c, "%s",
 8028f0a:	4a25      	ldr	r2, [pc, #148]	@ (8028fa0 <listdir+0x16c>)
 8028f0c:	4925      	ldr	r1, [pc, #148]	@ (8028fa4 <listdir+0x170>)
 8028f0e:	68f8      	ldr	r0, [r7, #12]
 8028f10:	f004 faac 	bl	802d46c <mg_printf>
            "  <tr><td><a href=\"..\">..</a></td>"
            "<td name=-1></td><td name=-1>[DIR]</td></tr>\n");

  fs->ls(dir, printdirentry, &d);
 8028f14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8028f18:	685b      	ldr	r3, [r3, #4]
 8028f1a:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8028f1e:	4922      	ldr	r1, [pc, #136]	@ (8028fa8 <listdir+0x174>)
 8028f20:	6838      	ldr	r0, [r7, #0]
 8028f22:	4798      	blx	r3
  mg_printf(c,
 8028f24:	4a21      	ldr	r2, [pc, #132]	@ (8028fac <listdir+0x178>)
 8028f26:	4922      	ldr	r1, [pc, #136]	@ (8028fb0 <listdir+0x17c>)
 8028f28:	68f8      	ldr	r0, [r7, #12]
 8028f2a:	f004 fa9f 	bl	802d46c <mg_printf>
            "</tbody><tfoot><tr><td colspan=\"3\"><hr></td></tr></tfoot>"
            "</table><address>Mongoose v.%s</address></body></html>\n",
            MG_VERSION);
  n = mg_snprintf(tmp, sizeof(tmp), "%lu", (unsigned long) (c->send.len - off));
 8028f2e:	68fb      	ldr	r3, [r7, #12]
 8028f30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8028f32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8028f36:	1ad3      	subs	r3, r2, r3
 8028f38:	f107 009c 	add.w	r0, r7, #156	@ 0x9c
 8028f3c:	4a1d      	ldr	r2, [pc, #116]	@ (8028fb4 <listdir+0x180>)
 8028f3e:	210a      	movs	r1, #10
 8028f40:	f008 f968 	bl	8031214 <mg_snprintf>
 8028f44:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  if (n > sizeof(tmp)) n = 0;
 8028f48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8028f4c:	2b0a      	cmp	r3, #10
 8028f4e:	d902      	bls.n	8028f56 <listdir+0x122>
 8028f50:	2300      	movs	r3, #0
 8028f52:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  memcpy(c->send.buf + off - 12, tmp, n);  // Set content length
 8028f56:	68fb      	ldr	r3, [r7, #12]
 8028f58:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8028f5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8028f5e:	3b0c      	subs	r3, #12
 8028f60:	4413      	add	r3, r2
 8028f62:	f107 019c 	add.w	r1, r7, #156	@ 0x9c
 8028f66:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8028f6a:	4618      	mov	r0, r3
 8028f6c:	f00e f97c 	bl	8037268 <memcpy>
  c->is_resp = 0;                          // Mark response end
 8028f70:	68fa      	ldr	r2, [r7, #12]
 8028f72:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8028f76:	f36f 13c7 	bfc	r3, #7, #1
 8028f7a:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 8028f7e:	bf00      	nop
 8028f80:	37d0      	adds	r7, #208	@ 0xd0
 8028f82:	46bd      	mov	sp, r7
 8028f84:	bd80      	pop	{r7, pc}
 8028f86:	bf00      	nop
 8028f88:	08042094 	.word	0x08042094
 8028f8c:	0804225c 	.word	0x0804225c
 8028f90:	20000088 	.word	0x20000088
 8028f94:	08041c44 	.word	0x08041c44
 8028f98:	08042420 	.word	0x08042420
 8028f9c:	08042478 	.word	0x08042478
 8028fa0:	08042600 	.word	0x08042600
 8028fa4:	080416d0 	.word	0x080416d0
 8028fa8:	08028c39 	.word	0x08028c39
 8028fac:	08042650 	.word	0x08042650
 8028fb0:	08042658 	.word	0x08042658
 8028fb4:	08042038 	.word	0x08042038

08028fb8 <uri_to_path2>:
#endif

// Resolve requested file into `path` and return its fs->st() result
static int uri_to_path2(struct mg_connection *c, struct mg_http_message *hm,
                        struct mg_fs *fs, struct mg_str url, struct mg_str dir,
                        char *path, size_t path_size) {
 8028fb8:	b082      	sub	sp, #8
 8028fba:	b590      	push	{r4, r7, lr}
 8028fbc:	b08f      	sub	sp, #60	@ 0x3c
 8028fbe:	af02      	add	r7, sp, #8
 8028fc0:	60f8      	str	r0, [r7, #12]
 8028fc2:	60b9      	str	r1, [r7, #8]
 8028fc4:	607a      	str	r2, [r7, #4]
 8028fc6:	647b      	str	r3, [r7, #68]	@ 0x44
  int flags, tmp;
  // Append URI to the root_dir, and sanitize it
  size_t n = mg_snprintf(path, path_size, "%.*s", (int) dir.len, dir.buf);
 8028fc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8028fca:	461a      	mov	r2, r3
 8028fcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8028fce:	9300      	str	r3, [sp, #0]
 8028fd0:	4613      	mov	r3, r2
 8028fd2:	4a9c      	ldr	r2, [pc, #624]	@ (8029244 <uri_to_path2+0x28c>)
 8028fd4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8028fd6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8028fd8:	f008 f91c 	bl	8031214 <mg_snprintf>
 8028fdc:	6278      	str	r0, [r7, #36]	@ 0x24
  if (n + 2 >= path_size) {
 8028fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8028fe0:	3302      	adds	r3, #2
 8028fe2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8028fe4:	429a      	cmp	r2, r3
 8028fe6:	d809      	bhi.n	8028ffc <uri_to_path2+0x44>
    mg_http_reply(c, 400, "", "Exceeded path size");
 8028fe8:	4b97      	ldr	r3, [pc, #604]	@ (8029248 <uri_to_path2+0x290>)
 8028fea:	4a98      	ldr	r2, [pc, #608]	@ (802924c <uri_to_path2+0x294>)
 8028fec:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8028ff0:	68f8      	ldr	r0, [r7, #12]
 8028ff2:	f7ff f94b 	bl	802828c <mg_http_reply>
    return -1;
 8028ff6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8028ffa:	e143      	b.n	8029284 <uri_to_path2+0x2cc>
  }
  path[path_size - 1] = '\0';
 8028ffc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8028ffe:	3b01      	subs	r3, #1
 8029000:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8029002:	4413      	add	r3, r2
 8029004:	2200      	movs	r2, #0
 8029006:	701a      	strb	r2, [r3, #0]
  // Terminate root dir with slash
  if (n > 0 && path[n - 1] != '/') path[n++] = '/', path[n] = '\0';
 8029008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802900a:	2b00      	cmp	r3, #0
 802900c:	d012      	beq.n	8029034 <uri_to_path2+0x7c>
 802900e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8029010:	3b01      	subs	r3, #1
 8029012:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8029014:	4413      	add	r3, r2
 8029016:	781b      	ldrb	r3, [r3, #0]
 8029018:	2b2f      	cmp	r3, #47	@ 0x2f
 802901a:	d00b      	beq.n	8029034 <uri_to_path2+0x7c>
 802901c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802901e:	1c5a      	adds	r2, r3, #1
 8029020:	627a      	str	r2, [r7, #36]	@ 0x24
 8029022:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8029024:	4413      	add	r3, r2
 8029026:	222f      	movs	r2, #47	@ 0x2f
 8029028:	701a      	strb	r2, [r3, #0]
 802902a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802902c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802902e:	4413      	add	r3, r2
 8029030:	2200      	movs	r2, #0
 8029032:	701a      	strb	r2, [r3, #0]
  if (url.len < hm->uri.len) {
 8029034:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8029036:	68bb      	ldr	r3, [r7, #8]
 8029038:	68db      	ldr	r3, [r3, #12]
 802903a:	429a      	cmp	r2, r3
 802903c:	d212      	bcs.n	8029064 <uri_to_path2+0xac>
    mg_url_decode(hm->uri.buf + url.len, hm->uri.len - url.len, path + n,
 802903e:	68bb      	ldr	r3, [r7, #8]
 8029040:	689a      	ldr	r2, [r3, #8]
 8029042:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8029044:	18d0      	adds	r0, r2, r3
 8029046:	68bb      	ldr	r3, [r7, #8]
 8029048:	68da      	ldr	r2, [r3, #12]
 802904a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802904c:	1ad1      	subs	r1, r2, r3
 802904e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8029050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8029052:	18d4      	adds	r4, r2, r3
 8029054:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8029056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8029058:	1ad3      	subs	r3, r2, r3
 802905a:	2200      	movs	r2, #0
 802905c:	9200      	str	r2, [sp, #0]
 802905e:	4622      	mov	r2, r4
 8029060:	f7fd fffb 	bl	802705a <mg_url_decode>
                  path_size - n, 0);
  }
  path[path_size - 1] = '\0';  // Double-check
 8029064:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8029066:	3b01      	subs	r3, #1
 8029068:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802906a:	4413      	add	r3, r2
 802906c:	2200      	movs	r2, #0
 802906e:	701a      	strb	r2, [r3, #0]
  if (!mg_path_is_sane(mg_str_n(path, path_size))) {
 8029070:	f107 0314 	add.w	r3, r7, #20
 8029074:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8029076:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8029078:	4618      	mov	r0, r3
 802907a:	f008 fdd0 	bl	8031c1e <mg_str_n>
 802907e:	f107 0314 	add.w	r3, r7, #20
 8029082:	e893 0003 	ldmia.w	r3, {r0, r1}
 8029086:	f009 fda1 	bl	8032bcc <mg_path_is_sane>
 802908a:	4603      	mov	r3, r0
 802908c:	f083 0301 	eor.w	r3, r3, #1
 8029090:	b2db      	uxtb	r3, r3
 8029092:	2b00      	cmp	r3, #0
 8029094:	d009      	beq.n	80290aa <uri_to_path2+0xf2>
    mg_http_reply(c, 400, "", "Invalid path");
 8029096:	4b6e      	ldr	r3, [pc, #440]	@ (8029250 <uri_to_path2+0x298>)
 8029098:	4a6c      	ldr	r2, [pc, #432]	@ (802924c <uri_to_path2+0x294>)
 802909a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 802909e:	68f8      	ldr	r0, [r7, #12]
 80290a0:	f7ff f8f4 	bl	802828c <mg_http_reply>
    return -1;
 80290a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80290a8:	e0ec      	b.n	8029284 <uri_to_path2+0x2cc>
  }
  n = strlen(path);
 80290aa:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80290ac:	f7e7 f8f8 	bl	80102a0 <strlen>
 80290b0:	6278      	str	r0, [r7, #36]	@ 0x24
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 80290b2:	e007      	b.n	80290c4 <uri_to_path2+0x10c>
 80290b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80290b6:	3b01      	subs	r3, #1
 80290b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80290ba:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80290bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80290be:	4413      	add	r3, r2
 80290c0:	2200      	movs	r2, #0
 80290c2:	701a      	strb	r2, [r3, #0]
 80290c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80290c6:	2b01      	cmp	r3, #1
 80290c8:	d906      	bls.n	80290d8 <uri_to_path2+0x120>
 80290ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80290cc:	3b01      	subs	r3, #1
 80290ce:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80290d0:	4413      	add	r3, r2
 80290d2:	781b      	ldrb	r3, [r3, #0]
 80290d4:	2b2f      	cmp	r3, #47	@ 0x2f
 80290d6:	d0ed      	beq.n	80290b4 <uri_to_path2+0xfc>
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 80290d8:	f107 031c 	add.w	r3, r7, #28
 80290dc:	495d      	ldr	r1, [pc, #372]	@ (8029254 <uri_to_path2+0x29c>)
 80290de:	4618      	mov	r0, r3
 80290e0:	f008 fd80 	bl	8031be4 <mg_str_s>
 80290e4:	68b9      	ldr	r1, [r7, #8]
 80290e6:	f107 031c 	add.w	r3, r7, #28
 80290ea:	cb0c      	ldmia	r3, {r2, r3}
 80290ec:	3108      	adds	r1, #8
 80290ee:	c903      	ldmia	r1, {r0, r1}
 80290f0:	f008 fdc2 	bl	8031c78 <mg_strcmp>
 80290f4:	4603      	mov	r3, r0
                                               : fs->st(path, NULL, NULL);
 80290f6:	2b00      	cmp	r3, #0
 80290f8:	d007      	beq.n	802910a <uri_to_path2+0x152>
 80290fa:	687b      	ldr	r3, [r7, #4]
 80290fc:	681b      	ldr	r3, [r3, #0]
 80290fe:	2200      	movs	r2, #0
 8029100:	2100      	movs	r1, #0
 8029102:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8029104:	4798      	blx	r3
 8029106:	4603      	mov	r3, r0
 8029108:	e000      	b.n	802910c <uri_to_path2+0x154>
 802910a:	2304      	movs	r3, #4
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 802910c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
 802910e:	4b52      	ldr	r3, [pc, #328]	@ (8029258 <uri_to_path2+0x2a0>)
 8029110:	681b      	ldr	r3, [r3, #0]
 8029112:	2b03      	cmp	r3, #3
 8029114:	dd16      	ble.n	8029144 <uri_to_path2+0x18c>
 8029116:	4b51      	ldr	r3, [pc, #324]	@ (802925c <uri_to_path2+0x2a4>)
 8029118:	f640 32c4 	movw	r2, #3012	@ 0xbc4
 802911c:	4950      	ldr	r1, [pc, #320]	@ (8029260 <uri_to_path2+0x2a8>)
 802911e:	2004      	movs	r0, #4
 8029120:	f002 f85c 	bl	802b1dc <mg_log_prefix>
 8029124:	68fb      	ldr	r3, [r7, #12]
 8029126:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8029128:	68bb      	ldr	r3, [r7, #8]
 802912a:	68db      	ldr	r3, [r3, #12]
 802912c:	4618      	mov	r0, r3
 802912e:	68bb      	ldr	r3, [r7, #8]
 8029130:	689a      	ldr	r2, [r3, #8]
 8029132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8029134:	9301      	str	r3, [sp, #4]
 8029136:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8029138:	9300      	str	r3, [sp, #0]
 802913a:	4613      	mov	r3, r2
 802913c:	4602      	mov	r2, r0
 802913e:	4849      	ldr	r0, [pc, #292]	@ (8029264 <uri_to_path2+0x2ac>)
 8029140:	f002 f89c 	bl	802b27c <mg_log>
              flags));
  if (flags == 0) {
 8029144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8029146:	2b00      	cmp	r3, #0
 8029148:	f000 809b 	beq.w	8029282 <uri_to_path2+0x2ca>
    // Do nothing - let's caller decide
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 802914c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802914e:	f003 0304 	and.w	r3, r3, #4
 8029152:	2b00      	cmp	r3, #0
 8029154:	d020      	beq.n	8029198 <uri_to_path2+0x1e0>
 8029156:	68bb      	ldr	r3, [r7, #8]
 8029158:	68db      	ldr	r3, [r3, #12]
 802915a:	2b00      	cmp	r3, #0
 802915c:	d01c      	beq.n	8029198 <uri_to_path2+0x1e0>
             hm->uri.buf[hm->uri.len - 1] != '/') {
 802915e:	68bb      	ldr	r3, [r7, #8]
 8029160:	689a      	ldr	r2, [r3, #8]
 8029162:	68bb      	ldr	r3, [r7, #8]
 8029164:	68db      	ldr	r3, [r3, #12]
 8029166:	3b01      	subs	r3, #1
 8029168:	4413      	add	r3, r2
 802916a:	781b      	ldrb	r3, [r3, #0]
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 802916c:	2b2f      	cmp	r3, #47	@ 0x2f
 802916e:	d013      	beq.n	8029198 <uri_to_path2+0x1e0>
    mg_printf(c,
              "HTTP/1.1 301 Moved\r\n"
              "Location: %.*s/\r\n"
              "Content-Length: 0\r\n"
              "\r\n",
              (int) hm->uri.len, hm->uri.buf);
 8029170:	68bb      	ldr	r3, [r7, #8]
 8029172:	68db      	ldr	r3, [r3, #12]
    mg_printf(c,
 8029174:	461a      	mov	r2, r3
 8029176:	68bb      	ldr	r3, [r7, #8]
 8029178:	689b      	ldr	r3, [r3, #8]
 802917a:	493b      	ldr	r1, [pc, #236]	@ (8029268 <uri_to_path2+0x2b0>)
 802917c:	68f8      	ldr	r0, [r7, #12]
 802917e:	f004 f975 	bl	802d46c <mg_printf>
    c->is_resp = 0;
 8029182:	68fa      	ldr	r2, [r7, #12]
 8029184:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8029188:	f36f 13c7 	bfc	r3, #7, #1
 802918c:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    flags = -1;
 8029190:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8029194:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8029196:	e074      	b.n	8029282 <uri_to_path2+0x2ca>
  } else if (flags & MG_FS_DIR) {
 8029198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802919a:	f003 0304 	and.w	r3, r3, #4
 802919e:	2b00      	cmp	r3, #0
 80291a0:	d06f      	beq.n	8029282 <uri_to_path2+0x2ca>
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 80291a2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80291a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80291a6:	18d0      	adds	r0, r2, r3
 80291a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80291aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80291ac:	1ad3      	subs	r3, r2, r3
 80291ae:	4a2f      	ldr	r2, [pc, #188]	@ (802926c <uri_to_path2+0x2b4>)
 80291b0:	4619      	mov	r1, r3
 80291b2:	f008 f82f 	bl	8031214 <mg_snprintf>
 80291b6:	4603      	mov	r3, r0
 80291b8:	2b00      	cmp	r3, #0
 80291ba:	d009      	beq.n	80291d0 <uri_to_path2+0x218>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 80291bc:	687b      	ldr	r3, [r7, #4]
 80291be:	681b      	ldr	r3, [r3, #0]
 80291c0:	2200      	movs	r2, #0
 80291c2:	2100      	movs	r1, #0
 80291c4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80291c6:	4798      	blx	r3
 80291c8:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 80291ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80291cc:	2b00      	cmp	r3, #0
 80291ce:	d116      	bne.n	80291fe <uri_to_path2+0x246>
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 80291d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80291d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80291d4:	18d0      	adds	r0, r2, r3
 80291d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80291d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80291da:	1ad3      	subs	r3, r2, r3
 80291dc:	4a24      	ldr	r2, [pc, #144]	@ (8029270 <uri_to_path2+0x2b8>)
 80291de:	4619      	mov	r1, r3
 80291e0:	f008 f818 	bl	8031214 <mg_snprintf>
 80291e4:	4603      	mov	r3, r0
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 80291e6:	2b00      	cmp	r3, #0
 80291e8:	d00c      	beq.n	8029204 <uri_to_path2+0x24c>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 80291ea:	687b      	ldr	r3, [r7, #4]
 80291ec:	681b      	ldr	r3, [r3, #0]
 80291ee:	2200      	movs	r2, #0
 80291f0:	2100      	movs	r1, #0
 80291f2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80291f4:	4798      	blx	r3
 80291f6:	62b8      	str	r0, [r7, #40]	@ 0x28
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 80291f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80291fa:	2b00      	cmp	r3, #0
 80291fc:	d002      	beq.n	8029204 <uri_to_path2+0x24c>
      flags = tmp;
 80291fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8029200:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8029202:	e03e      	b.n	8029282 <uri_to_path2+0x2ca>
    } else if ((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX ".gz") >
 8029204:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8029206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8029208:	18d0      	adds	r0, r2, r3
 802920a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802920c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802920e:	1ad3      	subs	r3, r2, r3
 8029210:	4a18      	ldr	r2, [pc, #96]	@ (8029274 <uri_to_path2+0x2bc>)
 8029212:	4619      	mov	r1, r3
 8029214:	f007 fffe 	bl	8031214 <mg_snprintf>
 8029218:	4603      	mov	r3, r0
 802921a:	2b00      	cmp	r3, #0
 802921c:	d02c      	beq.n	8029278 <uri_to_path2+0x2c0>
                    0 &&
                (tmp = fs->st(path, NULL, NULL)) !=
 802921e:	687b      	ldr	r3, [r7, #4]
 8029220:	681b      	ldr	r3, [r3, #0]
 8029222:	2200      	movs	r2, #0
 8029224:	2100      	movs	r1, #0
 8029226:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8029228:	4798      	blx	r3
 802922a:	62b8      	str	r0, [r7, #40]	@ 0x28
                    0 &&
 802922c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802922e:	2b00      	cmp	r3, #0
 8029230:	d022      	beq.n	8029278 <uri_to_path2+0x2c0>
                    0)) {  // check for gzipped index
      flags = tmp;
 8029232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8029234:	62fb      	str	r3, [r7, #44]	@ 0x2c
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 8029236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8029238:	330b      	adds	r3, #11
 802923a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802923c:	4413      	add	r3, r2
 802923e:	2200      	movs	r2, #0
 8029240:	701a      	strb	r2, [r3, #0]
 8029242:	e01e      	b.n	8029282 <uri_to_path2+0x2ca>
 8029244:	080416e4 	.word	0x080416e4
 8029248:	080426cc 	.word	0x080426cc
 802924c:	08041c44 	.word	0x08041c44
 8029250:	080426e0 	.word	0x080426e0
 8029254:	08042024 	.word	0x08042024
 8029258:	20000298 	.word	0x20000298
 802925c:	08044594 	.word	0x08044594
 8029260:	08041564 	.word	0x08041564
 8029264:	080426f0 	.word	0x080426f0
 8029268:	08042704 	.word	0x08042704
 802926c:	08042740 	.word	0x08042740
 8029270:	0804274c 	.word	0x0804274c
 8029274:	0804275c 	.word	0x0804275c
          '\0';  // Remove appended .gz in index file name
    } else {
      path[n] = '\0';  // Remove appended index file name
 8029278:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802927a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802927c:	4413      	add	r3, r2
 802927e:	2200      	movs	r2, #0
 8029280:	701a      	strb	r2, [r3, #0]
    }
  }
  return flags;
 8029282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8029284:	4618      	mov	r0, r3
 8029286:	3734      	adds	r7, #52	@ 0x34
 8029288:	46bd      	mov	sp, r7
 802928a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 802928e:	b002      	add	sp, #8
 8029290:	4770      	bx	lr
 8029292:	bf00      	nop

08029294 <uri_to_path>:

static int uri_to_path(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts, char *path,
                       size_t path_size) {
 8029294:	b580      	push	{r7, lr}
 8029296:	b09c      	sub	sp, #112	@ 0x70
 8029298:	af06      	add	r7, sp, #24
 802929a:	6178      	str	r0, [r7, #20]
 802929c:	6139      	str	r1, [r7, #16]
 802929e:	60fa      	str	r2, [r7, #12]
 80292a0:	60bb      	str	r3, [r7, #8]
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 80292a2:	68fb      	ldr	r3, [r7, #12]
 80292a4:	695b      	ldr	r3, [r3, #20]
 80292a6:	2b00      	cmp	r3, #0
 80292a8:	d002      	beq.n	80292b0 <uri_to_path+0x1c>
 80292aa:	68fb      	ldr	r3, [r7, #12]
 80292ac:	695b      	ldr	r3, [r3, #20]
 80292ae:	e000      	b.n	80292b2 <uri_to_path+0x1e>
 80292b0:	4b5b      	ldr	r3, [pc, #364]	@ (8029420 <uri_to_path+0x18c>)
 80292b2:	657b      	str	r3, [r7, #84]	@ 0x54
  struct mg_str k, v, part, s = mg_str(opts->root_dir), u = {NULL, 0}, p = u;
 80292b4:	68fb      	ldr	r3, [r7, #12]
 80292b6:	681a      	ldr	r2, [r3, #0]
 80292b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80292bc:	4611      	mov	r1, r2
 80292be:	4618      	mov	r0, r3
 80292c0:	f008 fc90 	bl	8031be4 <mg_str_s>
 80292c4:	2300      	movs	r3, #0
 80292c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80292c8:	2300      	movs	r3, #0
 80292ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80292cc:	f107 031c 	add.w	r3, r7, #28
 80292d0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80292d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80292d8:	e883 0003 	stmia.w	r3, {r0, r1}
  while (mg_span(s, &part, &s, ',')) {
 80292dc:	e078      	b.n	80293d0 <uri_to_path+0x13c>
    if (!mg_span(part, &k, &v, '=')) k = part, v = mg_str_n(NULL, 0);
 80292de:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80292e2:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80292e6:	213d      	movs	r1, #61	@ 0x3d
 80292e8:	9100      	str	r1, [sp, #0]
 80292ea:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80292ee:	c903      	ldmia	r1, {r0, r1}
 80292f0:	f008 fe3f 	bl	8031f72 <mg_span>
 80292f4:	4603      	mov	r3, r0
 80292f6:	f083 0301 	eor.w	r3, r3, #1
 80292fa:	b2db      	uxtb	r3, r3
 80292fc:	2b00      	cmp	r3, #0
 80292fe:	d014      	beq.n	802932a <uri_to_path+0x96>
 8029300:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8029304:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8029308:	e892 0003 	ldmia.w	r2, {r0, r1}
 802930c:	e883 0003 	stmia.w	r3, {r0, r1}
 8029310:	463b      	mov	r3, r7
 8029312:	2200      	movs	r2, #0
 8029314:	2100      	movs	r1, #0
 8029316:	4618      	mov	r0, r3
 8029318:	f008 fc81 	bl	8031c1e <mg_str_n>
 802931c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8029320:	463a      	mov	r2, r7
 8029322:	e892 0003 	ldmia.w	r2, {r0, r1}
 8029326:	e883 0003 	stmia.w	r3, {r0, r1}
    if (v.len == 0) v = k, k = mg_str("/"), u = k, p = v;
 802932a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802932c:	2b00      	cmp	r3, #0
 802932e:	d123      	bne.n	8029378 <uri_to_path+0xe4>
 8029330:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8029334:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8029338:	e892 0003 	ldmia.w	r2, {r0, r1}
 802933c:	e883 0003 	stmia.w	r3, {r0, r1}
 8029340:	463b      	mov	r3, r7
 8029342:	4938      	ldr	r1, [pc, #224]	@ (8029424 <uri_to_path+0x190>)
 8029344:	4618      	mov	r0, r3
 8029346:	f008 fc4d 	bl	8031be4 <mg_str_s>
 802934a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 802934e:	463a      	mov	r2, r7
 8029350:	e892 0003 	ldmia.w	r2, {r0, r1}
 8029354:	e883 0003 	stmia.w	r3, {r0, r1}
 8029358:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 802935c:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8029360:	e892 0003 	ldmia.w	r2, {r0, r1}
 8029364:	e883 0003 	stmia.w	r3, {r0, r1}
 8029368:	f107 031c 	add.w	r3, r7, #28
 802936c:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8029370:	e892 0003 	ldmia.w	r2, {r0, r1}
 8029374:	e883 0003 	stmia.w	r3, {r0, r1}
    if (hm->uri.len < k.len) continue;
 8029378:	693b      	ldr	r3, [r7, #16]
 802937a:	68da      	ldr	r2, [r3, #12]
 802937c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802937e:	429a      	cmp	r2, r3
 8029380:	d323      	bcc.n	80293ca <uri_to_path+0x136>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 8029382:	693b      	ldr	r3, [r7, #16]
 8029384:	6899      	ldr	r1, [r3, #8]
 8029386:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8029388:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 802938c:	4618      	mov	r0, r3
 802938e:	f008 fc46 	bl	8031c1e <mg_str_n>
 8029392:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8029396:	cb0c      	ldmia	r3, {r2, r3}
 8029398:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 802939c:	c903      	ldmia	r1, {r0, r1}
 802939e:	f008 fc6b 	bl	8031c78 <mg_strcmp>
 80293a2:	4603      	mov	r3, r0
 80293a4:	2b00      	cmp	r3, #0
 80293a6:	d112      	bne.n	80293ce <uri_to_path+0x13a>
    u = k, p = v;
 80293a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80293ac:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80293b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80293b4:	e883 0003 	stmia.w	r3, {r0, r1}
 80293b8:	f107 031c 	add.w	r3, r7, #28
 80293bc:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80293c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80293c4:	e883 0003 	stmia.w	r3, {r0, r1}
 80293c8:	e002      	b.n	80293d0 <uri_to_path+0x13c>
    if (hm->uri.len < k.len) continue;
 80293ca:	bf00      	nop
 80293cc:	e000      	b.n	80293d0 <uri_to_path+0x13c>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 80293ce:	bf00      	nop
  while (mg_span(s, &part, &s, ',')) {
 80293d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80293d4:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80293d8:	212c      	movs	r1, #44	@ 0x2c
 80293da:	9100      	str	r1, [sp, #0]
 80293dc:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80293e0:	c903      	ldmia	r1, {r0, r1}
 80293e2:	f008 fdc6 	bl	8031f72 <mg_span>
 80293e6:	4603      	mov	r3, r0
 80293e8:	2b00      	cmp	r3, #0
 80293ea:	f47f af78 	bne.w	80292de <uri_to_path+0x4a>
  }
  return uri_to_path2(c, hm, fs, u, p, path, path_size);
 80293ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80293f0:	9304      	str	r3, [sp, #16]
 80293f2:	68bb      	ldr	r3, [r7, #8]
 80293f4:	9303      	str	r3, [sp, #12]
 80293f6:	aa01      	add	r2, sp, #4
 80293f8:	f107 031c 	add.w	r3, r7, #28
 80293fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8029400:	e882 0003 	stmia.w	r2, {r0, r1}
 8029404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8029406:	9300      	str	r3, [sp, #0]
 8029408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802940a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802940c:	6939      	ldr	r1, [r7, #16]
 802940e:	6978      	ldr	r0, [r7, #20]
 8029410:	f7ff fdd2 	bl	8028fb8 <uri_to_path2>
 8029414:	4603      	mov	r3, r0
}
 8029416:	4618      	mov	r0, r3
 8029418:	3758      	adds	r7, #88	@ 0x58
 802941a:	46bd      	mov	sp, r7
 802941c:	bd80      	pop	{r7, pc}
 802941e:	bf00      	nop
 8029420:	20000088 	.word	0x20000088
 8029424:	08042024 	.word	0x08042024

08029428 <mg_http_serve_dir>:

void mg_http_serve_dir(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts) {
 8029428:	b580      	push	{r7, lr}
 802942a:	b0ac      	sub	sp, #176	@ 0xb0
 802942c:	af02      	add	r7, sp, #8
 802942e:	60f8      	str	r0, [r7, #12]
 8029430:	60b9      	str	r1, [r7, #8]
 8029432:	607a      	str	r2, [r7, #4]
  char path[MG_PATH_MAX];
  const char *sp = opts->ssi_pattern;
 8029434:	687b      	ldr	r3, [r7, #4]
 8029436:	685b      	ldr	r3, [r3, #4]
 8029438:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  int flags = uri_to_path(c, hm, opts, path, sizeof(path));
 802943c:	f107 0310 	add.w	r3, r7, #16
 8029440:	2280      	movs	r2, #128	@ 0x80
 8029442:	9200      	str	r2, [sp, #0]
 8029444:	687a      	ldr	r2, [r7, #4]
 8029446:	68b9      	ldr	r1, [r7, #8]
 8029448:	68f8      	ldr	r0, [r7, #12]
 802944a:	f7ff ff23 	bl	8029294 <uri_to_path>
 802944e:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
  if (flags < 0) {
 8029452:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8029456:	2b00      	cmp	r3, #0
 8029458:	db41      	blt.n	80294de <mg_http_serve_dir+0xb6>
    // Do nothing: the response has already been sent by uri_to_path()
  } else if (flags & MG_FS_DIR) {
 802945a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 802945e:	f003 0304 	and.w	r3, r3, #4
 8029462:	2b00      	cmp	r3, #0
 8029464:	d007      	beq.n	8029476 <mg_http_serve_dir+0x4e>
#if MG_ENABLE_DIRLIST
    listdir(c, hm, opts, path);
 8029466:	f107 0310 	add.w	r3, r7, #16
 802946a:	687a      	ldr	r2, [r7, #4]
 802946c:	68b9      	ldr	r1, [r7, #8]
 802946e:	68f8      	ldr	r0, [r7, #12]
 8029470:	f7ff fce0 	bl	8028e34 <listdir>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
    mg_http_serve_ssi(c, opts->root_dir, path);
  } else {
    mg_http_serve_file(c, hm, path, opts);
  }
}
 8029474:	e033      	b.n	80294de <mg_http_serve_dir+0xb6>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
 8029476:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 802947a:	2b00      	cmp	r3, #0
 802947c:	d028      	beq.n	80294d0 <mg_http_serve_dir+0xa8>
 802947e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8029482:	2b00      	cmp	r3, #0
 8029484:	d024      	beq.n	80294d0 <mg_http_serve_dir+0xa8>
 8029486:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 802948a:	f107 0210 	add.w	r2, r7, #16
 802948e:	4611      	mov	r1, r2
 8029490:	4618      	mov	r0, r3
 8029492:	f008 fba7 	bl	8031be4 <mg_str_s>
 8029496:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 802949a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 802949e:	4618      	mov	r0, r3
 80294a0:	f008 fba0 	bl	8031be4 <mg_str_s>
 80294a4:	2300      	movs	r3, #0
 80294a6:	9300      	str	r3, [sp, #0]
 80294a8:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80294ac:	cb0c      	ldmia	r3, {r2, r3}
 80294ae:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80294b2:	c903      	ldmia	r1, {r0, r1}
 80294b4:	f008 fc69 	bl	8031d8a <mg_match>
 80294b8:	4603      	mov	r3, r0
 80294ba:	2b00      	cmp	r3, #0
 80294bc:	d008      	beq.n	80294d0 <mg_http_serve_dir+0xa8>
    mg_http_serve_ssi(c, opts->root_dir, path);
 80294be:	687b      	ldr	r3, [r7, #4]
 80294c0:	681b      	ldr	r3, [r3, #0]
 80294c2:	f107 0210 	add.w	r2, r7, #16
 80294c6:	4619      	mov	r1, r3
 80294c8:	68f8      	ldr	r0, [r7, #12]
 80294ca:	f008 fb77 	bl	8031bbc <mg_http_serve_ssi>
}
 80294ce:	e006      	b.n	80294de <mg_http_serve_dir+0xb6>
    mg_http_serve_file(c, hm, path, opts);
 80294d0:	f107 0210 	add.w	r2, r7, #16
 80294d4:	687b      	ldr	r3, [r7, #4]
 80294d6:	68b9      	ldr	r1, [r7, #8]
 80294d8:	68f8      	ldr	r0, [r7, #12]
 80294da:	f7ff f8cb 	bl	8028674 <mg_http_serve_file>
}
 80294de:	bf00      	nop
 80294e0:	37a8      	adds	r7, #168	@ 0xa8
 80294e2:	46bd      	mov	sp, r7
 80294e4:	bd80      	pop	{r7, pc}

080294e6 <mg_is_url_safe>:

static bool mg_is_url_safe(int c) {
 80294e6:	b480      	push	{r7}
 80294e8:	b083      	sub	sp, #12
 80294ea:	af00      	add	r7, sp, #0
 80294ec:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') ||
         (c >= 'A' && c <= 'Z') || c == '.' || c == '_' || c == '-' || c == '~';
 80294ee:	687b      	ldr	r3, [r7, #4]
 80294f0:	2b2f      	cmp	r3, #47	@ 0x2f
 80294f2:	dd02      	ble.n	80294fa <mg_is_url_safe+0x14>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') ||
 80294f4:	687b      	ldr	r3, [r7, #4]
 80294f6:	2b39      	cmp	r3, #57	@ 0x39
 80294f8:	dd17      	ble.n	802952a <mg_is_url_safe+0x44>
 80294fa:	687b      	ldr	r3, [r7, #4]
 80294fc:	2b60      	cmp	r3, #96	@ 0x60
 80294fe:	dd02      	ble.n	8029506 <mg_is_url_safe+0x20>
 8029500:	687b      	ldr	r3, [r7, #4]
 8029502:	2b7a      	cmp	r3, #122	@ 0x7a
 8029504:	dd11      	ble.n	802952a <mg_is_url_safe+0x44>
 8029506:	687b      	ldr	r3, [r7, #4]
 8029508:	2b40      	cmp	r3, #64	@ 0x40
 802950a:	dd02      	ble.n	8029512 <mg_is_url_safe+0x2c>
         (c >= 'A' && c <= 'Z') || c == '.' || c == '_' || c == '-' || c == '~';
 802950c:	687b      	ldr	r3, [r7, #4]
 802950e:	2b5a      	cmp	r3, #90	@ 0x5a
 8029510:	dd0b      	ble.n	802952a <mg_is_url_safe+0x44>
 8029512:	687b      	ldr	r3, [r7, #4]
 8029514:	2b2e      	cmp	r3, #46	@ 0x2e
 8029516:	d008      	beq.n	802952a <mg_is_url_safe+0x44>
 8029518:	687b      	ldr	r3, [r7, #4]
 802951a:	2b5f      	cmp	r3, #95	@ 0x5f
 802951c:	d005      	beq.n	802952a <mg_is_url_safe+0x44>
 802951e:	687b      	ldr	r3, [r7, #4]
 8029520:	2b2d      	cmp	r3, #45	@ 0x2d
 8029522:	d002      	beq.n	802952a <mg_is_url_safe+0x44>
 8029524:	687b      	ldr	r3, [r7, #4]
 8029526:	2b7e      	cmp	r3, #126	@ 0x7e
 8029528:	d101      	bne.n	802952e <mg_is_url_safe+0x48>
 802952a:	2301      	movs	r3, #1
 802952c:	e000      	b.n	8029530 <mg_is_url_safe+0x4a>
 802952e:	2300      	movs	r3, #0
 8029530:	f003 0301 	and.w	r3, r3, #1
 8029534:	b2db      	uxtb	r3, r3
}
 8029536:	4618      	mov	r0, r3
 8029538:	370c      	adds	r7, #12
 802953a:	46bd      	mov	sp, r7
 802953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029540:	4770      	bx	lr
	...

08029544 <mg_url_encode>:

size_t mg_url_encode(const char *s, size_t sl, char *buf, size_t len) {
 8029544:	b580      	push	{r7, lr}
 8029546:	b08a      	sub	sp, #40	@ 0x28
 8029548:	af02      	add	r7, sp, #8
 802954a:	60f8      	str	r0, [r7, #12]
 802954c:	60b9      	str	r1, [r7, #8]
 802954e:	607a      	str	r2, [r7, #4]
 8029550:	603b      	str	r3, [r7, #0]
  size_t i, n = 0;
 8029552:	2300      	movs	r3, #0
 8029554:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < sl; i++) {
 8029556:	2300      	movs	r3, #0
 8029558:	61fb      	str	r3, [r7, #28]
 802955a:	e030      	b.n	80295be <mg_url_encode+0x7a>
    int c = *(unsigned char *) &s[i];
 802955c:	68fa      	ldr	r2, [r7, #12]
 802955e:	69fb      	ldr	r3, [r7, #28]
 8029560:	4413      	add	r3, r2
 8029562:	781b      	ldrb	r3, [r3, #0]
 8029564:	617b      	str	r3, [r7, #20]
    if (n + 4 >= len) return 0;
 8029566:	69bb      	ldr	r3, [r7, #24]
 8029568:	3304      	adds	r3, #4
 802956a:	683a      	ldr	r2, [r7, #0]
 802956c:	429a      	cmp	r2, r3
 802956e:	d801      	bhi.n	8029574 <mg_url_encode+0x30>
 8029570:	2300      	movs	r3, #0
 8029572:	e03f      	b.n	80295f4 <mg_url_encode+0xb0>
    if (mg_is_url_safe(c)) {
 8029574:	6978      	ldr	r0, [r7, #20]
 8029576:	f7ff ffb6 	bl	80294e6 <mg_is_url_safe>
 802957a:	4603      	mov	r3, r0
 802957c:	2b00      	cmp	r3, #0
 802957e:	d00a      	beq.n	8029596 <mg_url_encode+0x52>
      buf[n++] = s[i];
 8029580:	68fa      	ldr	r2, [r7, #12]
 8029582:	69fb      	ldr	r3, [r7, #28]
 8029584:	441a      	add	r2, r3
 8029586:	69bb      	ldr	r3, [r7, #24]
 8029588:	1c59      	adds	r1, r3, #1
 802958a:	61b9      	str	r1, [r7, #24]
 802958c:	6879      	ldr	r1, [r7, #4]
 802958e:	440b      	add	r3, r1
 8029590:	7812      	ldrb	r2, [r2, #0]
 8029592:	701a      	strb	r2, [r3, #0]
 8029594:	e010      	b.n	80295b8 <mg_url_encode+0x74>
    } else {
      mg_snprintf(&buf[n], 4, "%%%M", mg_print_hex, 1, &s[i]);
 8029596:	687a      	ldr	r2, [r7, #4]
 8029598:	69bb      	ldr	r3, [r7, #24]
 802959a:	18d0      	adds	r0, r2, r3
 802959c:	68fa      	ldr	r2, [r7, #12]
 802959e:	69fb      	ldr	r3, [r7, #28]
 80295a0:	4413      	add	r3, r2
 80295a2:	9301      	str	r3, [sp, #4]
 80295a4:	2301      	movs	r3, #1
 80295a6:	9300      	str	r3, [sp, #0]
 80295a8:	4b14      	ldr	r3, [pc, #80]	@ (80295fc <mg_url_encode+0xb8>)
 80295aa:	4a15      	ldr	r2, [pc, #84]	@ (8029600 <mg_url_encode+0xbc>)
 80295ac:	2104      	movs	r1, #4
 80295ae:	f007 fe31 	bl	8031214 <mg_snprintf>
      n += 3;
 80295b2:	69bb      	ldr	r3, [r7, #24]
 80295b4:	3303      	adds	r3, #3
 80295b6:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < sl; i++) {
 80295b8:	69fb      	ldr	r3, [r7, #28]
 80295ba:	3301      	adds	r3, #1
 80295bc:	61fb      	str	r3, [r7, #28]
 80295be:	69fa      	ldr	r2, [r7, #28]
 80295c0:	68bb      	ldr	r3, [r7, #8]
 80295c2:	429a      	cmp	r2, r3
 80295c4:	d3ca      	bcc.n	802955c <mg_url_encode+0x18>
    }
  }
  if (len > 0 && n < len - 1) buf[n] = '\0';  // Null-terminate the destination
 80295c6:	683b      	ldr	r3, [r7, #0]
 80295c8:	2b00      	cmp	r3, #0
 80295ca:	d009      	beq.n	80295e0 <mg_url_encode+0x9c>
 80295cc:	683b      	ldr	r3, [r7, #0]
 80295ce:	3b01      	subs	r3, #1
 80295d0:	69ba      	ldr	r2, [r7, #24]
 80295d2:	429a      	cmp	r2, r3
 80295d4:	d204      	bcs.n	80295e0 <mg_url_encode+0x9c>
 80295d6:	687a      	ldr	r2, [r7, #4]
 80295d8:	69bb      	ldr	r3, [r7, #24]
 80295da:	4413      	add	r3, r2
 80295dc:	2200      	movs	r2, #0
 80295de:	701a      	strb	r2, [r3, #0]
  if (len > 0) buf[len - 1] = '\0';           // Always.
 80295e0:	683b      	ldr	r3, [r7, #0]
 80295e2:	2b00      	cmp	r3, #0
 80295e4:	d005      	beq.n	80295f2 <mg_url_encode+0xae>
 80295e6:	683b      	ldr	r3, [r7, #0]
 80295e8:	3b01      	subs	r3, #1
 80295ea:	687a      	ldr	r2, [r7, #4]
 80295ec:	4413      	add	r3, r2
 80295ee:	2200      	movs	r2, #0
 80295f0:	701a      	strb	r2, [r3, #0]
  return n;
 80295f2:	69bb      	ldr	r3, [r7, #24]
}
 80295f4:	4618      	mov	r0, r3
 80295f6:	3720      	adds	r7, #32
 80295f8:	46bd      	mov	sp, r7
 80295fa:	bd80      	pop	{r7, pc}
 80295fc:	080314fd 	.word	0x080314fd
 8029600:	0804276c 	.word	0x0804276c

08029604 <mg_http_upload>:
#define headers_tmp     "Content-Type: application/json\r\n" "Access-Control-Allow-Origin: *\r\n" "Access-Control-Allow-Headers: Content-Type\r\n"



long mg_http_upload(struct mg_connection *c, struct mg_http_message *hm,
                    struct mg_fs *fs, const char *dir, size_t max_size) {
 8029604:	b590      	push	{r4, r7, lr}
 8029606:	b0d3      	sub	sp, #332	@ 0x14c
 8029608:	af02      	add	r7, sp, #8
 802960a:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 802960e:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 8029612:	6020      	str	r0, [r4, #0]
 8029614:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8029618:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 802961c:	6001      	str	r1, [r0, #0]
 802961e:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8029622:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 8029626:	600a      	str	r2, [r1, #0]
 8029628:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 802962c:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 8029630:	6013      	str	r3, [r2, #0]
  char buf[20] = "0", file[MG_PATH_MAX], path[MG_PATH_MAX];
 8029632:	2330      	movs	r3, #48	@ 0x30
 8029634:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8029638:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 802963c:	2200      	movs	r2, #0
 802963e:	601a      	str	r2, [r3, #0]
 8029640:	605a      	str	r2, [r3, #4]
 8029642:	609a      	str	r2, [r3, #8]
 8029644:	60da      	str	r2, [r3, #12]
  long res = 0, offset;
 8029646:	2300      	movs	r3, #0
 8029648:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  mg_http_get_var(&hm->query, "offset", buf, sizeof(buf));
 802964c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8029650:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8029654:	681b      	ldr	r3, [r3, #0]
 8029656:	f103 0010 	add.w	r0, r3, #16
 802965a:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 802965e:	2314      	movs	r3, #20
 8029660:	49b5      	ldr	r1, [pc, #724]	@ (8029938 <mg_http_upload+0x334>)
 8029662:	f7fd fc85 	bl	8026f70 <mg_http_get_var>
  mg_http_get_var(&hm->query, "file", file, sizeof(file));
 8029666:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 802966a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 802966e:	681b      	ldr	r3, [r3, #0]
 8029670:	f103 0010 	add.w	r0, r3, #16
 8029674:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8029678:	2380      	movs	r3, #128	@ 0x80
 802967a:	49b0      	ldr	r1, [pc, #704]	@ (802993c <mg_http_upload+0x338>)
 802967c:	f7fd fc78 	bl	8026f70 <mg_http_get_var>
  offset = strtol(buf, NULL, 0);
 8029680:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8029684:	2200      	movs	r2, #0
 8029686:	2100      	movs	r1, #0
 8029688:	4618      	mov	r0, r3
 802968a:	f00b ff37 	bl	80354fc <strtol>
 802968e:	f8c7 0138 	str.w	r0, [r7, #312]	@ 0x138
  mg_snprintf(path, sizeof(path), "%s%c%s", dir, MG_DIRSEP, file);
 8029692:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8029696:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 802969a:	f107 0018 	add.w	r0, r7, #24
 802969e:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 80296a2:	9201      	str	r2, [sp, #4]
 80296a4:	222f      	movs	r2, #47	@ 0x2f
 80296a6:	9200      	str	r2, [sp, #0]
 80296a8:	681b      	ldr	r3, [r3, #0]
 80296aa:	4aa5      	ldr	r2, [pc, #660]	@ (8029940 <mg_http_upload+0x33c>)
 80296ac:	2180      	movs	r1, #128	@ 0x80
 80296ae:	f007 fdb1 	bl	8031214 <mg_snprintf>
  if (hm->body.len == 0) {
 80296b2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80296b6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80296ba:	681b      	ldr	r3, [r3, #0]
 80296bc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80296c0:	2b00      	cmp	r3, #0
 80296c2:	d10d      	bne.n	80296e0 <mg_http_upload+0xdc>
    mg_http_reply(c, 200, headers_tmp, "%ld", res);  // Nothing to write  //TODO DELETE HEADERS!!!!!
 80296c4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80296c8:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 80296cc:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80296d0:	9300      	str	r3, [sp, #0]
 80296d2:	4b9c      	ldr	r3, [pc, #624]	@ (8029944 <mg_http_upload+0x340>)
 80296d4:	4a9c      	ldr	r2, [pc, #624]	@ (8029948 <mg_http_upload+0x344>)
 80296d6:	21c8      	movs	r1, #200	@ 0xc8
 80296d8:	6800      	ldr	r0, [r0, #0]
 80296da:	f7fe fdd7 	bl	802828c <mg_http_reply>
 80296de:	e123      	b.n	8029928 <mg_http_upload+0x324>
  } else if (file[0] == '\0') {
 80296e0:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 80296e4:	2b00      	cmp	r3, #0
 80296e6:	d10f      	bne.n	8029708 <mg_http_upload+0x104>
    mg_http_reply(c, 400, "", "file required");
 80296e8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80296ec:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 80296f0:	4b96      	ldr	r3, [pc, #600]	@ (802994c <mg_http_upload+0x348>)
 80296f2:	4a97      	ldr	r2, [pc, #604]	@ (8029950 <mg_http_upload+0x34c>)
 80296f4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80296f8:	6800      	ldr	r0, [r0, #0]
 80296fa:	f7fe fdc7 	bl	802828c <mg_http_reply>
    res = -1;
 80296fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8029702:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8029706:	e10f      	b.n	8029928 <mg_http_upload+0x324>
  } else if (mg_path_is_sane(mg_str(file)) == false) {
 8029708:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 802970c:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8029710:	4611      	mov	r1, r2
 8029712:	4618      	mov	r0, r3
 8029714:	f008 fa66 	bl	8031be4 <mg_str_s>
 8029718:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 802971c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8029720:	f009 fa54 	bl	8032bcc <mg_path_is_sane>
 8029724:	4603      	mov	r3, r0
 8029726:	f083 0301 	eor.w	r3, r3, #1
 802972a:	b2db      	uxtb	r3, r3
 802972c:	2b00      	cmp	r3, #0
 802972e:	d012      	beq.n	8029756 <mg_http_upload+0x152>
    mg_http_reply(c, 400, "", "%s: invalid file", file);
 8029730:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8029734:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 8029738:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 802973c:	9300      	str	r3, [sp, #0]
 802973e:	4b85      	ldr	r3, [pc, #532]	@ (8029954 <mg_http_upload+0x350>)
 8029740:	4a83      	ldr	r2, [pc, #524]	@ (8029950 <mg_http_upload+0x34c>)
 8029742:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8029746:	6800      	ldr	r0, [r0, #0]
 8029748:	f7fe fda0 	bl	802828c <mg_http_reply>
    res = -2;
 802974c:	f06f 0301 	mvn.w	r3, #1
 8029750:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8029754:	e0e8      	b.n	8029928 <mg_http_upload+0x324>
  } else if (offset < 0) {
 8029756:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 802975a:	2b00      	cmp	r3, #0
 802975c:	da0f      	bge.n	802977e <mg_http_upload+0x17a>
    mg_http_reply(c, 400, "", "offset required");
 802975e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8029762:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 8029766:	4b7c      	ldr	r3, [pc, #496]	@ (8029958 <mg_http_upload+0x354>)
 8029768:	4a79      	ldr	r2, [pc, #484]	@ (8029950 <mg_http_upload+0x34c>)
 802976a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 802976e:	6800      	ldr	r0, [r0, #0]
 8029770:	f7fe fd8c 	bl	802828c <mg_http_reply>
    res = -3;
 8029774:	f06f 0302 	mvn.w	r3, #2
 8029778:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 802977c:	e0d4      	b.n	8029928 <mg_http_upload+0x324>
  } else if ((size_t) offset + hm->body.len > max_size) {
 802977e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8029782:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8029786:	681b      	ldr	r3, [r3, #0]
 8029788:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 802978c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8029790:	4413      	add	r3, r2
 8029792:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8029796:	429a      	cmp	r2, r3
 8029798:	d215      	bcs.n	80297c6 <mg_http_upload+0x1c2>
    mg_http_reply(c, 400, "", "%s: over max size of %lu", path,
 802979a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 802979e:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 80297a2:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80297a6:	9301      	str	r3, [sp, #4]
 80297a8:	f107 0318 	add.w	r3, r7, #24
 80297ac:	9300      	str	r3, [sp, #0]
 80297ae:	4b6b      	ldr	r3, [pc, #428]	@ (802995c <mg_http_upload+0x358>)
 80297b0:	4a67      	ldr	r2, [pc, #412]	@ (8029950 <mg_http_upload+0x34c>)
 80297b2:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80297b6:	6800      	ldr	r0, [r0, #0]
 80297b8:	f7fe fd68 	bl	802828c <mg_http_reply>
                  (unsigned long) max_size);
    res = -4;
 80297bc:	f06f 0303 	mvn.w	r3, #3
 80297c0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80297c4:	e0b0      	b.n	8029928 <mg_http_upload+0x324>
  } else {
    struct mg_fd *fd;
    size_t current_size = 0;
 80297c6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80297ca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80297ce:	2200      	movs	r2, #0
 80297d0:	601a      	str	r2, [r3, #0]
    MG_DEBUG(("%s -> %lu bytes @ %ld", path, hm->body.len, offset));
 80297d2:	4b63      	ldr	r3, [pc, #396]	@ (8029960 <mg_http_upload+0x35c>)
 80297d4:	681b      	ldr	r3, [r3, #0]
 80297d6:	2b02      	cmp	r3, #2
 80297d8:	dd14      	ble.n	8029804 <mg_http_upload+0x200>
 80297da:	4b62      	ldr	r3, [pc, #392]	@ (8029964 <mg_http_upload+0x360>)
 80297dc:	f640 426a 	movw	r2, #3178	@ 0xc6a
 80297e0:	4961      	ldr	r1, [pc, #388]	@ (8029968 <mg_http_upload+0x364>)
 80297e2:	2003      	movs	r0, #3
 80297e4:	f001 fcfa 	bl	802b1dc <mg_log_prefix>
 80297e8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80297ec:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80297f0:	681b      	ldr	r3, [r3, #0]
 80297f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80297f6:	f107 0118 	add.w	r1, r7, #24
 80297fa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80297fe:	485b      	ldr	r0, [pc, #364]	@ (802996c <mg_http_upload+0x368>)
 8029800:	f001 fd3c 	bl	802b27c <mg_log>
    if (offset == 0) fs->rm(path);  // If offset if 0, truncate file
 8029804:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8029808:	2b00      	cmp	r3, #0
 802980a:	d109      	bne.n	8029820 <mg_http_upload+0x21c>
 802980c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8029810:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8029814:	681b      	ldr	r3, [r3, #0]
 8029816:	6a1b      	ldr	r3, [r3, #32]
 8029818:	f107 0218 	add.w	r2, r7, #24
 802981c:	4610      	mov	r0, r2
 802981e:	4798      	blx	r3
    fs->st(path, &current_size, NULL);
 8029820:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8029824:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8029828:	681b      	ldr	r3, [r3, #0]
 802982a:	681b      	ldr	r3, [r3, #0]
 802982c:	f107 0114 	add.w	r1, r7, #20
 8029830:	f107 0018 	add.w	r0, r7, #24
 8029834:	2200      	movs	r2, #0
 8029836:	4798      	blx	r3
    if (offset > 0 && current_size != (size_t) offset) {
 8029838:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 802983c:	2b00      	cmp	r3, #0
 802983e:	dd1b      	ble.n	8029878 <mg_http_upload+0x274>
 8029840:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8029844:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8029848:	681a      	ldr	r2, [r3, #0]
 802984a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 802984e:	429a      	cmp	r2, r3
 8029850:	d012      	beq.n	8029878 <mg_http_upload+0x274>
      mg_http_reply(c, 400, "", "%s: offset mismatch", path);
 8029852:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8029856:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 802985a:	f107 0318 	add.w	r3, r7, #24
 802985e:	9300      	str	r3, [sp, #0]
 8029860:	4b43      	ldr	r3, [pc, #268]	@ (8029970 <mg_http_upload+0x36c>)
 8029862:	4a3b      	ldr	r2, [pc, #236]	@ (8029950 <mg_http_upload+0x34c>)
 8029864:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8029868:	6800      	ldr	r0, [r0, #0]
 802986a:	f7fe fd0f 	bl	802828c <mg_http_reply>
      res = -5;
 802986e:	f06f 0304 	mvn.w	r3, #4
 8029872:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8029876:	e057      	b.n	8029928 <mg_http_upload+0x324>
    } else if ((fd = mg_fs_open(fs, path, MG_FS_WRITE)) == NULL) {
 8029878:	f107 0118 	add.w	r1, r7, #24
 802987c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8029880:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8029884:	2202      	movs	r2, #2
 8029886:	6818      	ldr	r0, [r3, #0]
 8029888:	f7fd f998 	bl	8026bbc <mg_fs_open>
 802988c:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
 8029890:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8029894:	2b00      	cmp	r3, #0
 8029896:	d117      	bne.n	80298c8 <mg_http_upload+0x2c4>
      mg_http_reply(c, 400, "", "open(%s): %d", path, errno);
 8029898:	f00d fcae 	bl	80371f8 <__errno>
 802989c:	4603      	mov	r3, r0
 802989e:	681b      	ldr	r3, [r3, #0]
 80298a0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80298a4:	f5a2 709a 	sub.w	r0, r2, #308	@ 0x134
 80298a8:	9301      	str	r3, [sp, #4]
 80298aa:	f107 0318 	add.w	r3, r7, #24
 80298ae:	9300      	str	r3, [sp, #0]
 80298b0:	4b30      	ldr	r3, [pc, #192]	@ (8029974 <mg_http_upload+0x370>)
 80298b2:	4a27      	ldr	r2, [pc, #156]	@ (8029950 <mg_http_upload+0x34c>)
 80298b4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80298b8:	6800      	ldr	r0, [r0, #0]
 80298ba:	f7fe fce7 	bl	802828c <mg_http_reply>
      res = -6;
 80298be:	f06f 0305 	mvn.w	r3, #5
 80298c2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80298c6:	e02f      	b.n	8029928 <mg_http_upload+0x324>
    } else {
      res = offset + (long) fs->wr(fd->fd, hm->body.buf, hm->body.len);
 80298c8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80298cc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80298d0:	681b      	ldr	r3, [r3, #0]
 80298d2:	695b      	ldr	r3, [r3, #20]
 80298d4:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80298d8:	6810      	ldr	r0, [r2, #0]
 80298da:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80298de:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 80298e2:	6812      	ldr	r2, [r2, #0]
 80298e4:	f8d2 1200 	ldr.w	r1, [r2, #512]	@ 0x200
 80298e8:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80298ec:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 80298f0:	6812      	ldr	r2, [r2, #0]
 80298f2:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 80298f6:	4798      	blx	r3
 80298f8:	4603      	mov	r3, r0
 80298fa:	461a      	mov	r2, r3
 80298fc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8029900:	4413      	add	r3, r2
 8029902:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
      mg_fs_close(fd);
 8029906:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 802990a:	f7fd f97e 	bl	8026c0a <mg_fs_close>
      mg_http_reply(c, 200, headers_tmp, "%ld", res);  //TODO DELETE HEADERS!!!!!
 802990e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8029912:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 8029916:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 802991a:	9300      	str	r3, [sp, #0]
 802991c:	4b09      	ldr	r3, [pc, #36]	@ (8029944 <mg_http_upload+0x340>)
 802991e:	4a0a      	ldr	r2, [pc, #40]	@ (8029948 <mg_http_upload+0x344>)
 8029920:	21c8      	movs	r1, #200	@ 0xc8
 8029922:	6800      	ldr	r0, [r0, #0]
 8029924:	f7fe fcb2 	bl	802828c <mg_http_reply>
    }
  }
  return res;
 8029928:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
}
 802992c:	4618      	mov	r0, r3
 802992e:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8029932:	46bd      	mov	sp, r7
 8029934:	bd90      	pop	{r4, r7, pc}
 8029936:	bf00      	nop
 8029938:	080427ac 	.word	0x080427ac
 802993c:	080427b4 	.word	0x080427b4
 8029940:	08041ff8 	.word	0x08041ff8
 8029944:	080427bc 	.word	0x080427bc
 8029948:	080427c0 	.word	0x080427c0
 802994c:	08042830 	.word	0x08042830
 8029950:	08041c44 	.word	0x08041c44
 8029954:	08042840 	.word	0x08042840
 8029958:	08042854 	.word	0x08042854
 802995c:	08042864 	.word	0x08042864
 8029960:	20000298 	.word	0x20000298
 8029964:	080445a4 	.word	0x080445a4
 8029968:	08041564 	.word	0x08041564
 802996c:	08042880 	.word	0x08042880
 8029970:	08042898 	.word	0x08042898
 8029974:	080428ac 	.word	0x080428ac

08029978 <mg_http_status>:

int mg_http_status(const struct mg_http_message *hm) {
 8029978:	b580      	push	{r7, lr}
 802997a:	b082      	sub	sp, #8
 802997c:	af00      	add	r7, sp, #0
 802997e:	6078      	str	r0, [r7, #4]
  return atoi(hm->uri.buf);
 8029980:	687b      	ldr	r3, [r7, #4]
 8029982:	689b      	ldr	r3, [r3, #8]
 8029984:	4618      	mov	r0, r3
 8029986:	f009 fcfd 	bl	8033384 <atoi>
 802998a:	4603      	mov	r3, r0
}
 802998c:	4618      	mov	r0, r3
 802998e:	3708      	adds	r7, #8
 8029990:	46bd      	mov	sp, r7
 8029992:	bd80      	pop	{r7, pc}

08029994 <is_hex_digit>:

static bool is_hex_digit(int c) {
 8029994:	b480      	push	{r7}
 8029996:	b083      	sub	sp, #12
 8029998:	af00      	add	r7, sp, #0
 802999a:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 802999c:	687b      	ldr	r3, [r7, #4]
 802999e:	2b2f      	cmp	r3, #47	@ 0x2f
 80299a0:	dd02      	ble.n	80299a8 <is_hex_digit+0x14>
 80299a2:	687b      	ldr	r3, [r7, #4]
 80299a4:	2b39      	cmp	r3, #57	@ 0x39
 80299a6:	dd0b      	ble.n	80299c0 <is_hex_digit+0x2c>
 80299a8:	687b      	ldr	r3, [r7, #4]
 80299aa:	2b60      	cmp	r3, #96	@ 0x60
 80299ac:	dd02      	ble.n	80299b4 <is_hex_digit+0x20>
 80299ae:	687b      	ldr	r3, [r7, #4]
 80299b0:	2b66      	cmp	r3, #102	@ 0x66
 80299b2:	dd05      	ble.n	80299c0 <is_hex_digit+0x2c>
 80299b4:	687b      	ldr	r3, [r7, #4]
 80299b6:	2b40      	cmp	r3, #64	@ 0x40
 80299b8:	dd04      	ble.n	80299c4 <is_hex_digit+0x30>
         (c >= 'A' && c <= 'F');
 80299ba:	687b      	ldr	r3, [r7, #4]
 80299bc:	2b46      	cmp	r3, #70	@ 0x46
 80299be:	dc01      	bgt.n	80299c4 <is_hex_digit+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 80299c0:	2301      	movs	r3, #1
 80299c2:	e000      	b.n	80299c6 <is_hex_digit+0x32>
 80299c4:	2300      	movs	r3, #0
 80299c6:	f003 0301 	and.w	r3, r3, #1
 80299ca:	b2db      	uxtb	r3, r3
}
 80299cc:	4618      	mov	r0, r3
 80299ce:	370c      	adds	r7, #12
 80299d0:	46bd      	mov	sp, r7
 80299d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80299d6:	4770      	bx	lr

080299d8 <skip_chunk>:

static int skip_chunk(const char *buf, int len, int *pl, int *dl) {
 80299d8:	b580      	push	{r7, lr}
 80299da:	b08a      	sub	sp, #40	@ 0x28
 80299dc:	af02      	add	r7, sp, #8
 80299de:	60f8      	str	r0, [r7, #12]
 80299e0:	60b9      	str	r1, [r7, #8]
 80299e2:	607a      	str	r2, [r7, #4]
 80299e4:	603b      	str	r3, [r7, #0]
  int i = 0, n = 0;
 80299e6:	2300      	movs	r3, #0
 80299e8:	61fb      	str	r3, [r7, #28]
 80299ea:	2300      	movs	r3, #0
 80299ec:	613b      	str	r3, [r7, #16]
  if (len < 3) return 0;
 80299ee:	68bb      	ldr	r3, [r7, #8]
 80299f0:	2b02      	cmp	r3, #2
 80299f2:	dc04      	bgt.n	80299fe <skip_chunk+0x26>
 80299f4:	2300      	movs	r3, #0
 80299f6:	e07a      	b.n	8029aee <skip_chunk+0x116>
  while (i < len && is_hex_digit(buf[i])) i++;
 80299f8:	69fb      	ldr	r3, [r7, #28]
 80299fa:	3301      	adds	r3, #1
 80299fc:	61fb      	str	r3, [r7, #28]
 80299fe:	69fa      	ldr	r2, [r7, #28]
 8029a00:	68bb      	ldr	r3, [r7, #8]
 8029a02:	429a      	cmp	r2, r3
 8029a04:	da09      	bge.n	8029a1a <skip_chunk+0x42>
 8029a06:	69fb      	ldr	r3, [r7, #28]
 8029a08:	68fa      	ldr	r2, [r7, #12]
 8029a0a:	4413      	add	r3, r2
 8029a0c:	781b      	ldrb	r3, [r3, #0]
 8029a0e:	4618      	mov	r0, r3
 8029a10:	f7ff ffc0 	bl	8029994 <is_hex_digit>
 8029a14:	4603      	mov	r3, r0
 8029a16:	2b00      	cmp	r3, #0
 8029a18:	d1ee      	bne.n	80299f8 <skip_chunk+0x20>
  if (i == 0) return -1;                     // Error, no length specified
 8029a1a:	69fb      	ldr	r3, [r7, #28]
 8029a1c:	2b00      	cmp	r3, #0
 8029a1e:	d102      	bne.n	8029a26 <skip_chunk+0x4e>
 8029a20:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8029a24:	e063      	b.n	8029aee <skip_chunk+0x116>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 8029a26:	69fb      	ldr	r3, [r7, #28]
 8029a28:	2b08      	cmp	r3, #8
 8029a2a:	dd02      	ble.n	8029a32 <skip_chunk+0x5a>
 8029a2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8029a30:	e05d      	b.n	8029aee <skip_chunk+0x116>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 8029a32:	69fa      	ldr	r2, [r7, #28]
 8029a34:	68bb      	ldr	r3, [r7, #8]
 8029a36:	429a      	cmp	r2, r3
 8029a38:	da0c      	bge.n	8029a54 <skip_chunk+0x7c>
 8029a3a:	69fb      	ldr	r3, [r7, #28]
 8029a3c:	68fa      	ldr	r2, [r7, #12]
 8029a3e:	4413      	add	r3, r2
 8029a40:	781b      	ldrb	r3, [r3, #0]
 8029a42:	2b0d      	cmp	r3, #13
 8029a44:	d106      	bne.n	8029a54 <skip_chunk+0x7c>
 8029a46:	69fb      	ldr	r3, [r7, #28]
 8029a48:	3301      	adds	r3, #1
 8029a4a:	68fa      	ldr	r2, [r7, #12]
 8029a4c:	4413      	add	r3, r2
 8029a4e:	781b      	ldrb	r3, [r3, #0]
 8029a50:	2b0a      	cmp	r3, #10
 8029a52:	d002      	beq.n	8029a5a <skip_chunk+0x82>
 8029a54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8029a58:	e049      	b.n	8029aee <skip_chunk+0x116>
  if (mg_str_to_num(mg_str_n(buf, (size_t) i), 16, &n, sizeof(int)) == false)
 8029a5a:	69fa      	ldr	r2, [r7, #28]
 8029a5c:	f107 0314 	add.w	r3, r7, #20
 8029a60:	68f9      	ldr	r1, [r7, #12]
 8029a62:	4618      	mov	r0, r3
 8029a64:	f008 f8db 	bl	8031c1e <mg_str_n>
 8029a68:	f107 0310 	add.w	r3, r7, #16
 8029a6c:	2204      	movs	r2, #4
 8029a6e:	9200      	str	r2, [sp, #0]
 8029a70:	2210      	movs	r2, #16
 8029a72:	f107 0114 	add.w	r1, r7, #20
 8029a76:	c903      	ldmia	r1, {r0, r1}
 8029a78:	f008 fad8 	bl	803202c <mg_str_to_num>
 8029a7c:	4603      	mov	r3, r0
 8029a7e:	f083 0301 	eor.w	r3, r3, #1
 8029a82:	b2db      	uxtb	r3, r3
 8029a84:	2b00      	cmp	r3, #0
 8029a86:	d002      	beq.n	8029a8e <skip_chunk+0xb6>
    return -1;                    // Decode chunk length, overflow
 8029a88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8029a8c:	e02f      	b.n	8029aee <skip_chunk+0x116>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 8029a8e:	693b      	ldr	r3, [r7, #16]
 8029a90:	2b00      	cmp	r3, #0
 8029a92:	da02      	bge.n	8029a9a <skip_chunk+0xc2>
 8029a94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8029a98:	e029      	b.n	8029aee <skip_chunk+0x116>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 8029a9a:	68ba      	ldr	r2, [r7, #8]
 8029a9c:	69fb      	ldr	r3, [r7, #28]
 8029a9e:	1ad3      	subs	r3, r2, r3
 8029aa0:	1eda      	subs	r2, r3, #3
 8029aa2:	693b      	ldr	r3, [r7, #16]
 8029aa4:	429a      	cmp	r2, r3
 8029aa6:	dc01      	bgt.n	8029aac <skip_chunk+0xd4>
 8029aa8:	2300      	movs	r3, #0
 8029aaa:	e020      	b.n	8029aee <skip_chunk+0x116>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 8029aac:	693a      	ldr	r2, [r7, #16]
 8029aae:	69fb      	ldr	r3, [r7, #28]
 8029ab0:	4413      	add	r3, r2
 8029ab2:	3302      	adds	r3, #2
 8029ab4:	68fa      	ldr	r2, [r7, #12]
 8029ab6:	4413      	add	r3, r2
 8029ab8:	781b      	ldrb	r3, [r3, #0]
 8029aba:	2b0d      	cmp	r3, #13
 8029abc:	d108      	bne.n	8029ad0 <skip_chunk+0xf8>
 8029abe:	693a      	ldr	r2, [r7, #16]
 8029ac0:	69fb      	ldr	r3, [r7, #28]
 8029ac2:	4413      	add	r3, r2
 8029ac4:	3303      	adds	r3, #3
 8029ac6:	68fa      	ldr	r2, [r7, #12]
 8029ac8:	4413      	add	r3, r2
 8029aca:	781b      	ldrb	r3, [r3, #0]
 8029acc:	2b0a      	cmp	r3, #10
 8029ace:	d002      	beq.n	8029ad6 <skip_chunk+0xfe>
 8029ad0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8029ad4:	e00b      	b.n	8029aee <skip_chunk+0x116>
  *pl = i + 2, *dl = n;
 8029ad6:	69fb      	ldr	r3, [r7, #28]
 8029ad8:	1c9a      	adds	r2, r3, #2
 8029ada:	687b      	ldr	r3, [r7, #4]
 8029adc:	601a      	str	r2, [r3, #0]
 8029ade:	693a      	ldr	r2, [r7, #16]
 8029ae0:	683b      	ldr	r3, [r7, #0]
 8029ae2:	601a      	str	r2, [r3, #0]
  return i + 2 + n + 2;
 8029ae4:	69fb      	ldr	r3, [r7, #28]
 8029ae6:	1c9a      	adds	r2, r3, #2
 8029ae8:	693b      	ldr	r3, [r7, #16]
 8029aea:	4413      	add	r3, r2
 8029aec:	3302      	adds	r3, #2
}
 8029aee:	4618      	mov	r0, r3
 8029af0:	3720      	adds	r7, #32
 8029af2:	46bd      	mov	sp, r7
 8029af4:	bd80      	pop	{r7, pc}
	...

08029af8 <http_cb>:

static void http_cb(struct mg_connection *c, int ev, void *ev_data) {
 8029af8:	b580      	push	{r7, lr}
 8029afa:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8029afe:	af00      	add	r7, sp, #0
 8029b00:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029b04:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8029b08:	6018      	str	r0, [r3, #0]
 8029b0a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029b0e:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8029b12:	6019      	str	r1, [r3, #0]
 8029b14:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029b18:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8029b1c:	601a      	str	r2, [r3, #0]
  if (ev == MG_EV_READ || ev == MG_EV_CLOSE ||
 8029b1e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029b22:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8029b26:	681b      	ldr	r3, [r3, #0]
 8029b28:	2b07      	cmp	r3, #7
 8029b2a:	d031      	beq.n	8029b90 <http_cb+0x98>
 8029b2c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029b30:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8029b34:	681b      	ldr	r3, [r3, #0]
 8029b36:	2b09      	cmp	r3, #9
 8029b38:	d02a      	beq.n	8029b90 <http_cb+0x98>
 8029b3a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029b3e:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8029b42:	681b      	ldr	r3, [r3, #0]
 8029b44:	2b02      	cmp	r3, #2
 8029b46:	f040 831a 	bne.w	802a17e <http_cb+0x686>
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 8029b4a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029b4e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8029b52:	681b      	ldr	r3, [r3, #0]
 8029b54:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8029b58:	f003 0304 	and.w	r3, r3, #4
 8029b5c:	b2db      	uxtb	r3, r3
 8029b5e:	2b00      	cmp	r3, #0
 8029b60:	f000 830d 	beq.w	802a17e <http_cb+0x686>
 8029b64:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029b68:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8029b6c:	681b      	ldr	r3, [r3, #0]
 8029b6e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8029b72:	f003 0310 	and.w	r3, r3, #16
 8029b76:	b2db      	uxtb	r3, r3
 8029b78:	2b00      	cmp	r3, #0
 8029b7a:	f040 8300 	bne.w	802a17e <http_cb+0x686>
       c->recv.len > 0)) {  // see #2796
 8029b7e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029b82:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8029b86:	681b      	ldr	r3, [r3, #0]
 8029b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 8029b8a:	2b00      	cmp	r3, #0
 8029b8c:	f000 82f7 	beq.w	802a17e <http_cb+0x686>
    struct mg_http_message hm;
    size_t ofs = 0;  // Parsing offset
 8029b90:	2300      	movs	r3, #0
 8029b92:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
    while (c->is_resp == 0 && ofs < c->recv.len) {
 8029b96:	e2c5      	b.n	802a124 <http_cb+0x62c>
      const char *buf = (char *) c->recv.buf + ofs;
 8029b98:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029b9c:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8029ba0:	681b      	ldr	r3, [r3, #0]
 8029ba2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8029ba4:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8029ba8:	4413      	add	r3, r2
 8029baa:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
      int n = mg_http_parse(buf, c->recv.len - ofs, &hm);
 8029bae:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029bb2:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8029bb6:	681b      	ldr	r3, [r3, #0]
 8029bb8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8029bba:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8029bbe:	1ad3      	subs	r3, r2, r3
 8029bc0:	f107 0214 	add.w	r2, r7, #20
 8029bc4:	4619      	mov	r1, r3
 8029bc6:	f8d7 0278 	ldr.w	r0, [r7, #632]	@ 0x278
 8029bca:	f7fd fcf5 	bl	80275b8 <mg_http_parse>
 8029bce:	f8c7 0274 	str.w	r0, [r7, #628]	@ 0x274
      struct mg_str *te;  // Transfer - encoding header
      bool is_chunked = false;
 8029bd2:	2300      	movs	r3, #0
 8029bd4:	f887 3283 	strb.w	r3, [r7, #643]	@ 0x283
      if (n < 0) {
 8029bd8:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8029bdc:	2b00      	cmp	r3, #0
 8029bde:	da38      	bge.n	8029c52 <http_cb+0x15a>
        // We don't use mg_error() here, to avoid closing pipelined requests
        // prematurely, see #2592
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 8029be0:	4bc8      	ldr	r3, [pc, #800]	@ (8029f04 <http_cb+0x40c>)
 8029be2:	681b      	ldr	r3, [r3, #0]
 8029be4:	2b00      	cmp	r3, #0
 8029be6:	dd10      	ble.n	8029c0a <http_cb+0x112>
 8029be8:	4bc7      	ldr	r3, [pc, #796]	@ (8029f08 <http_cb+0x410>)
 8029bea:	f640 42a3 	movw	r2, #3235	@ 0xca3
 8029bee:	49c7      	ldr	r1, [pc, #796]	@ (8029f0c <http_cb+0x414>)
 8029bf0:	2001      	movs	r0, #1
 8029bf2:	f001 faf3 	bl	802b1dc <mg_log_prefix>
 8029bf6:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029bfa:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8029bfe:	681b      	ldr	r3, [r3, #0]
 8029c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8029c02:	4619      	mov	r1, r3
 8029c04:	48c2      	ldr	r0, [pc, #776]	@ (8029f10 <http_cb+0x418>)
 8029c06:	f001 fb39 	bl	802b27c <mg_log>
        c->is_draining = 1;
 8029c0a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029c0e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8029c12:	681a      	ldr	r2, [r3, #0]
 8029c14:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8029c18:	f043 0310 	orr.w	r3, r3, #16
 8029c1c:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        mg_hexdump(buf, c->recv.len - ofs > 16 ? 16 : c->recv.len - ofs);
 8029c20:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029c24:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8029c28:	681b      	ldr	r3, [r3, #0]
 8029c2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8029c2c:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8029c30:	1ad3      	subs	r3, r2, r3
 8029c32:	2b10      	cmp	r3, #16
 8029c34:	bf28      	it	cs
 8029c36:	2310      	movcs	r3, #16
 8029c38:	4619      	mov	r1, r3
 8029c3a:	f8d7 0278 	ldr.w	r0, [r7, #632]	@ 0x278
 8029c3e:	f001 fb53 	bl	802b2e8 <mg_hexdump>
        c->recv.len = 0;
 8029c42:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029c46:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8029c4a:	681b      	ldr	r3, [r3, #0]
 8029c4c:	2200      	movs	r2, #0
 8029c4e:	641a      	str	r2, [r3, #64]	@ 0x40
        return;
 8029c50:	e295      	b.n	802a17e <http_cb+0x686>
      }
      if (n == 0) break;                 // Request is not buffered yet
 8029c52:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8029c56:	2b00      	cmp	r3, #0
 8029c58:	f000 827c 	beq.w	802a154 <http_cb+0x65c>
      mg_call(c, MG_EV_HTTP_HDRS, &hm);  // Got all HTTP headers
 8029c5c:	f107 0214 	add.w	r2, r7, #20
 8029c60:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029c64:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8029c68:	210a      	movs	r1, #10
 8029c6a:	6818      	ldr	r0, [r3, #0]
 8029c6c:	f7fb fed0 	bl	8025a10 <mg_call>
      if (ev == MG_EV_CLOSE) {           // If client did not set Content-Length
 8029c70:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029c74:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8029c78:	681b      	ldr	r3, [r3, #0]
 8029c7a:	2b09      	cmp	r3, #9
 8029c7c:	d128      	bne.n	8029cd0 <http_cb+0x1d8>
        hm.message.len = c->recv.len - ofs;  // and closes now, deliver MSG
 8029c7e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029c82:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8029c86:	681b      	ldr	r3, [r3, #0]
 8029c88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8029c8a:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8029c8e:	1ad2      	subs	r2, r2, r3
 8029c90:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029c94:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8029c98:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
        hm.body.len = hm.message.len - (size_t) (hm.body.buf - hm.message.buf);
 8029c9c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029ca0:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8029ca4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8029ca8:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 8029cac:	f5a2 721d 	sub.w	r2, r2, #628	@ 0x274
 8029cb0:	f8d2 1200 	ldr.w	r1, [r2, #512]	@ 0x200
 8029cb4:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 8029cb8:	f5a2 721d 	sub.w	r2, r2, #628	@ 0x274
 8029cbc:	f8d2 2210 	ldr.w	r2, [r2, #528]	@ 0x210
 8029cc0:	1a8a      	subs	r2, r1, r2
 8029cc2:	1a9a      	subs	r2, r3, r2
 8029cc4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029cc8:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8029ccc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
      }
      if ((te = mg_http_get_header(&hm, "Transfer-Encoding")) != NULL) {
 8029cd0:	f107 0314 	add.w	r3, r7, #20
 8029cd4:	498f      	ldr	r1, [pc, #572]	@ (8029f14 <http_cb+0x41c>)
 8029cd6:	4618      	mov	r0, r3
 8029cd8:	f7fd fab2 	bl	8027240 <mg_http_get_header>
 8029cdc:	f8c7 0270 	str.w	r0, [r7, #624]	@ 0x270
 8029ce0:	f8d7 3270 	ldr.w	r3, [r7, #624]	@ 0x270
 8029ce4:	2b00      	cmp	r3, #0
 8029ce6:	d01d      	beq.n	8029d24 <http_cb+0x22c>
        if (mg_strcasecmp(*te, mg_str("chunked")) == 0) {
 8029ce8:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 8029cec:	498a      	ldr	r1, [pc, #552]	@ (8029f18 <http_cb+0x420>)
 8029cee:	4618      	mov	r0, r3
 8029cf0:	f007 ff78 	bl	8031be4 <mg_str_s>
 8029cf4:	f8d7 1270 	ldr.w	r1, [r7, #624]	@ 0x270
 8029cf8:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 8029cfc:	cb0c      	ldmia	r3, {r2, r3}
 8029cfe:	c903      	ldmia	r1, {r0, r1}
 8029d00:	f007 fffc 	bl	8031cfc <mg_strcasecmp>
 8029d04:	4603      	mov	r3, r0
 8029d06:	2b00      	cmp	r3, #0
 8029d08:	d103      	bne.n	8029d12 <http_cb+0x21a>
          is_chunked = true;
 8029d0a:	2301      	movs	r3, #1
 8029d0c:	f887 3283 	strb.w	r3, [r7, #643]	@ 0x283
 8029d10:	e09f      	b.n	8029e52 <http_cb+0x35a>
        } else {
          mg_error(c, "Invalid Transfer-Encoding");  // See #2460
 8029d12:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029d16:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8029d1a:	4980      	ldr	r1, [pc, #512]	@ (8029f1c <http_cb+0x424>)
 8029d1c:	6818      	ldr	r0, [r3, #0]
 8029d1e:	f7fb fe97 	bl	8025a50 <mg_error>
          return;
 8029d22:	e22c      	b.n	802a17e <http_cb+0x686>
        }
      } else if (mg_http_get_header(&hm, "Content-length") == NULL) {
 8029d24:	f107 0314 	add.w	r3, r7, #20
 8029d28:	497d      	ldr	r1, [pc, #500]	@ (8029f20 <http_cb+0x428>)
 8029d2a:	4618      	mov	r0, r3
 8029d2c:	f7fd fa88 	bl	8027240 <mg_http_get_header>
 8029d30:	4603      	mov	r3, r0
 8029d32:	2b00      	cmp	r3, #0
 8029d34:	f040 808d 	bne.w	8029e52 <http_cb+0x35a>
        // #2593: HTTP packets must contain either Transfer-Encoding or
        // Content-length
        bool is_response = mg_ncasecmp(hm.method.buf, "HTTP/", 5) == 0;
 8029d38:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029d3c:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8029d40:	681b      	ldr	r3, [r3, #0]
 8029d42:	2205      	movs	r2, #5
 8029d44:	4977      	ldr	r1, [pc, #476]	@ (8029f24 <http_cb+0x42c>)
 8029d46:	4618      	mov	r0, r3
 8029d48:	f7fc ffec 	bl	8026d24 <mg_ncasecmp>
 8029d4c:	4603      	mov	r3, r0
 8029d4e:	2b00      	cmp	r3, #0
 8029d50:	bf0c      	ite	eq
 8029d52:	2301      	moveq	r3, #1
 8029d54:	2300      	movne	r3, #0
 8029d56:	f887 326f 	strb.w	r3, [r7, #623]	@ 0x26f
        bool require_content_len = false;
 8029d5a:	2300      	movs	r3, #0
 8029d5c:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 8029d60:	f897 326f 	ldrb.w	r3, [r7, #623]	@ 0x26f
 8029d64:	f083 0301 	eor.w	r3, r3, #1
 8029d68:	b2db      	uxtb	r3, r3
 8029d6a:	2b00      	cmp	r3, #0
 8029d6c:	d030      	beq.n	8029dd0 <http_cb+0x2d8>
 8029d6e:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 8029d72:	496d      	ldr	r1, [pc, #436]	@ (8029f28 <http_cb+0x430>)
 8029d74:	4618      	mov	r0, r3
 8029d76:	f007 ff35 	bl	8031be4 <mg_str_s>
 8029d7a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029d7e:	f5a3 711d 	sub.w	r1, r3, #628	@ 0x274
 8029d82:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 8029d86:	cb0c      	ldmia	r3, {r2, r3}
 8029d88:	c903      	ldmia	r1, {r0, r1}
 8029d8a:	f007 ffb7 	bl	8031cfc <mg_strcasecmp>
 8029d8e:	4603      	mov	r3, r0
 8029d90:	2b00      	cmp	r3, #0
 8029d92:	d012      	beq.n	8029dba <http_cb+0x2c2>
                             mg_strcasecmp(hm.method, mg_str("PUT")) == 0)) {
 8029d94:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8029d98:	4964      	ldr	r1, [pc, #400]	@ (8029f2c <http_cb+0x434>)
 8029d9a:	4618      	mov	r0, r3
 8029d9c:	f007 ff22 	bl	8031be4 <mg_str_s>
 8029da0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029da4:	f5a3 711d 	sub.w	r1, r3, #628	@ 0x274
 8029da8:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8029dac:	cb0c      	ldmia	r3, {r2, r3}
 8029dae:	c903      	ldmia	r1, {r0, r1}
 8029db0:	f007 ffa4 	bl	8031cfc <mg_strcasecmp>
 8029db4:	4603      	mov	r3, r0
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 8029db6:	2b00      	cmp	r3, #0
 8029db8:	d10a      	bne.n	8029dd0 <http_cb+0x2d8>
          // POST and PUT should include an entity body. Therefore, they should
          // contain a Content-length header. Other requests can also contain a
          // body, but their content has no defined semantics (RFC 7231)
          require_content_len = true;
 8029dba:	2301      	movs	r3, #1
 8029dbc:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
          ofs += (size_t) n;  // this request has been processed
 8029dc0:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8029dc4:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 8029dc8:	4413      	add	r3, r2
 8029dca:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 8029dce:	e022      	b.n	8029e16 <http_cb+0x31e>
        } else if (is_response) {
 8029dd0:	f897 326f 	ldrb.w	r3, [r7, #623]	@ 0x26f
 8029dd4:	2b00      	cmp	r3, #0
 8029dd6:	d01e      	beq.n	8029e16 <http_cb+0x31e>
          // HTTP spec 7.2 Entity body: All other responses must include a body
          // or Content-Length header field defined with a value of 0.
          int status = mg_http_status(&hm);
 8029dd8:	f107 0314 	add.w	r3, r7, #20
 8029ddc:	4618      	mov	r0, r3
 8029dde:	f7ff fdcb 	bl	8029978 <mg_http_status>
 8029de2:	f8c7 0268 	str.w	r0, [r7, #616]	@ 0x268
          require_content_len = status >= 200 && status != 204 && status != 304;
 8029de6:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 8029dea:	2bc7      	cmp	r3, #199	@ 0xc7
 8029dec:	dd0a      	ble.n	8029e04 <http_cb+0x30c>
 8029dee:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 8029df2:	2bcc      	cmp	r3, #204	@ 0xcc
 8029df4:	d006      	beq.n	8029e04 <http_cb+0x30c>
 8029df6:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 8029dfa:	f5b3 7f98 	cmp.w	r3, #304	@ 0x130
 8029dfe:	d001      	beq.n	8029e04 <http_cb+0x30c>
 8029e00:	2301      	movs	r3, #1
 8029e02:	e000      	b.n	8029e06 <http_cb+0x30e>
 8029e04:	2300      	movs	r3, #0
 8029e06:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
 8029e0a:	f897 3282 	ldrb.w	r3, [r7, #642]	@ 0x282
 8029e0e:	f003 0301 	and.w	r3, r3, #1
 8029e12:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
        }
        if (require_content_len) {
 8029e16:	f897 3282 	ldrb.w	r3, [r7, #642]	@ 0x282
 8029e1a:	2b00      	cmp	r3, #0
 8029e1c:	d019      	beq.n	8029e52 <http_cb+0x35a>
          mg_http_reply(c, 411, "", "");
 8029e1e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029e22:	f5a3 701f 	sub.w	r0, r3, #636	@ 0x27c
 8029e26:	4b42      	ldr	r3, [pc, #264]	@ (8029f30 <http_cb+0x438>)
 8029e28:	4a41      	ldr	r2, [pc, #260]	@ (8029f30 <http_cb+0x438>)
 8029e2a:	f240 119b 	movw	r1, #411	@ 0x19b
 8029e2e:	6800      	ldr	r0, [r0, #0]
 8029e30:	f7fe fa2c 	bl	802828c <mg_http_reply>
          MG_ERROR(("%s", "Content length missing from request"));
 8029e34:	4b33      	ldr	r3, [pc, #204]	@ (8029f04 <http_cb+0x40c>)
 8029e36:	681b      	ldr	r3, [r3, #0]
 8029e38:	2b00      	cmp	r3, #0
 8029e3a:	dd0a      	ble.n	8029e52 <http_cb+0x35a>
 8029e3c:	4b32      	ldr	r3, [pc, #200]	@ (8029f08 <http_cb+0x410>)
 8029e3e:	f640 42ca 	movw	r2, #3274	@ 0xcca
 8029e42:	4932      	ldr	r1, [pc, #200]	@ (8029f0c <http_cb+0x414>)
 8029e44:	2001      	movs	r0, #1
 8029e46:	f001 f9c9 	bl	802b1dc <mg_log_prefix>
 8029e4a:	493a      	ldr	r1, [pc, #232]	@ (8029f34 <http_cb+0x43c>)
 8029e4c:	483a      	ldr	r0, [pc, #232]	@ (8029f38 <http_cb+0x440>)
 8029e4e:	f001 fa15 	bl	802b27c <mg_log>
        }
      }

      if (is_chunked) {
 8029e52:	f897 3283 	ldrb.w	r3, [r7, #643]	@ 0x283
 8029e56:	2b00      	cmp	r3, #0
 8029e58:	f000 80e8 	beq.w	802a02c <http_cb+0x534>
        // For chunked data, strip off prefixes and suffixes from chunks
        // and relocate them right after the headers, then report a message
        char *s = (char *) c->recv.buf + ofs + n;
 8029e5c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029e60:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8029e64:	681b      	ldr	r3, [r3, #0]
 8029e66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8029e68:	f8d7 1274 	ldr.w	r1, [r7, #628]	@ 0x274
 8029e6c:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8029e70:	440b      	add	r3, r1
 8029e72:	4413      	add	r3, r2
 8029e74:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
        int o = 0, pl, dl, cl, len = (int) (c->recv.len - ofs - (size_t) n);
 8029e78:	2300      	movs	r3, #0
 8029e7a:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8029e7e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029e82:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8029e86:	681b      	ldr	r3, [r3, #0]
 8029e88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8029e8a:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8029e8e:	1ad2      	subs	r2, r2, r3
 8029e90:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8029e94:	1ad3      	subs	r3, r2, r3
 8029e96:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c

        // Find zero-length chunk (the end of the body)
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 8029e9a:	e006      	b.n	8029eaa <http_cb+0x3b2>
 8029e9c:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 8029ea0:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8029ea4:	4413      	add	r3, r2
 8029ea6:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8029eaa:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8029eae:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 8029eb2:	18d0      	adds	r0, r2, r3
 8029eb4:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8029eb8:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8029ebc:	1ad1      	subs	r1, r2, r3
 8029ebe:	f507 730b 	add.w	r3, r7, #556	@ 0x22c
 8029ec2:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8029ec6:	f7ff fd87 	bl	80299d8 <skip_chunk>
 8029eca:	f8c7 0258 	str.w	r0, [r7, #600]	@ 0x258
 8029ece:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8029ed2:	2b00      	cmp	r3, #0
 8029ed4:	dd03      	ble.n	8029ede <http_cb+0x3e6>
 8029ed6:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8029eda:	2b00      	cmp	r3, #0
 8029edc:	d1de      	bne.n	8029e9c <http_cb+0x3a4>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 8029ede:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8029ee2:	2b00      	cmp	r3, #0
 8029ee4:	f000 8138 	beq.w	802a158 <http_cb+0x660>
        if (cl < 0) {
 8029ee8:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8029eec:	2b00      	cmp	r3, #0
 8029eee:	da27      	bge.n	8029f40 <http_cb+0x448>
          mg_error(c, "Invalid chunk");
 8029ef0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029ef4:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8029ef8:	4910      	ldr	r1, [pc, #64]	@ (8029f3c <http_cb+0x444>)
 8029efa:	6818      	ldr	r0, [r3, #0]
 8029efc:	f7fb fda8 	bl	8025a50 <mg_error>
          break;
 8029f00:	e12d      	b.n	802a15e <http_cb+0x666>
 8029f02:	bf00      	nop
 8029f04:	20000298 	.word	0x20000298
 8029f08:	080445b4 	.word	0x080445b4
 8029f0c:	08041564 	.word	0x08041564
 8029f10:	080428bc 	.word	0x080428bc
 8029f14:	080428d4 	.word	0x080428d4
 8029f18:	080428e8 	.word	0x080428e8
 8029f1c:	080428f0 	.word	0x080428f0
 8029f20:	0804290c 	.word	0x0804290c
 8029f24:	08041770 	.word	0x08041770
 8029f28:	0804177c 	.word	0x0804177c
 8029f2c:	08041778 	.word	0x08041778
 8029f30:	08041c44 	.word	0x08041c44
 8029f34:	0804291c 	.word	0x0804291c
 8029f38:	080416d0 	.word	0x080416d0
 8029f3c:	08042940 	.word	0x08042940
        }

        // Zero chunk found. Second pass: strip + relocate
        o = 0, hm.body.len = 0, hm.message.len = (size_t) n;
 8029f40:	2300      	movs	r3, #0
 8029f42:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8029f46:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029f4a:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8029f4e:	2200      	movs	r2, #0
 8029f50:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8029f54:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
 8029f58:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029f5c:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8029f60:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 8029f64:	e03e      	b.n	8029fe4 <http_cb+0x4ec>
          memmove(s + hm.body.len, s + o + pl, (size_t) dl);
 8029f66:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029f6a:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8029f6e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8029f72:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 8029f76:	18d0      	adds	r0, r2, r3
 8029f78:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8029f7c:	f8d7 2230 	ldr.w	r2, [r7, #560]	@ 0x230
 8029f80:	4413      	add	r3, r2
 8029f82:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 8029f86:	4413      	add	r3, r2
 8029f88:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8029f8c:	4619      	mov	r1, r3
 8029f8e:	f00b ff15 	bl	8035dbc <memmove>
          o += cl, hm.body.len += (size_t) dl, hm.message.len += (size_t) dl;
 8029f92:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 8029f96:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8029f9a:	4413      	add	r3, r2
 8029f9c:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8029fa0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029fa4:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8029fa8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8029fac:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8029fb0:	441a      	add	r2, r3
 8029fb2:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029fb6:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8029fba:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8029fbe:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029fc2:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8029fc6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8029fca:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8029fce:	441a      	add	r2, r3
 8029fd0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029fd4:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8029fd8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
          if (dl == 0) break;
 8029fdc:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8029fe0:	2b00      	cmp	r3, #0
 8029fe2:	d016      	beq.n	802a012 <http_cb+0x51a>
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 8029fe4:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8029fe8:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 8029fec:	18d0      	adds	r0, r2, r3
 8029fee:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8029ff2:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8029ff6:	1ad1      	subs	r1, r2, r3
 8029ff8:	f507 730b 	add.w	r3, r7, #556	@ 0x22c
 8029ffc:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 802a000:	f7ff fcea 	bl	80299d8 <skip_chunk>
 802a004:	f8c7 0258 	str.w	r0, [r7, #600]	@ 0x258
 802a008:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 802a00c:	2b00      	cmp	r3, #0
 802a00e:	dcaa      	bgt.n	8029f66 <http_cb+0x46e>
 802a010:	e000      	b.n	802a014 <http_cb+0x51c>
          if (dl == 0) break;
 802a012:	bf00      	nop
        }
        ofs += (size_t) (n + o);
 802a014:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
 802a018:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 802a01c:	4413      	add	r3, r2
 802a01e:	461a      	mov	r2, r3
 802a020:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 802a024:	4413      	add	r3, r2
 802a026:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 802a02a:	e025      	b.n	802a078 <http_cb+0x580>
      } else {  // Normal, non-chunked data
        size_t len = c->recv.len - ofs - (size_t) n;
 802a02c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 802a030:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 802a034:	681b      	ldr	r3, [r3, #0]
 802a036:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 802a038:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 802a03c:	1ad2      	subs	r2, r2, r3
 802a03e:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 802a042:	1ad3      	subs	r3, r2, r3
 802a044:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
        if (hm.body.len > len) break;  // Buffer more data
 802a048:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 802a04c:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 802a050:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 802a054:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 802a058:	429a      	cmp	r2, r3
 802a05a:	d37f      	bcc.n	802a15c <http_cb+0x664>
        ofs += (size_t) n + hm.body.len;
 802a05c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 802a060:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 802a064:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 802a068:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 802a06c:	4413      	add	r3, r2
 802a06e:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 802a072:	4413      	add	r3, r2
 802a074:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
      }

      if (c->is_accepted) c->is_resp = 1;  // Start generating response
 802a078:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 802a07c:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 802a080:	681b      	ldr	r3, [r3, #0]
 802a082:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 802a086:	f003 0304 	and.w	r3, r3, #4
 802a08a:	b2db      	uxtb	r3, r3
 802a08c:	2b00      	cmp	r3, #0
 802a08e:	d00a      	beq.n	802a0a6 <http_cb+0x5ae>
 802a090:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 802a094:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 802a098:	681a      	ldr	r2, [r3, #0]
 802a09a:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 802a09e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802a0a2:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
 802a0a6:	f107 0214 	add.w	r2, r7, #20
 802a0aa:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 802a0ae:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 802a0b2:	210b      	movs	r1, #11
 802a0b4:	6818      	ldr	r0, [r3, #0]
 802a0b6:	f7fb fcab 	bl	8025a10 <mg_call>
      if (c->is_accepted) {
 802a0ba:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 802a0be:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 802a0c2:	681b      	ldr	r3, [r3, #0]
 802a0c4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 802a0c8:	f003 0304 	and.w	r3, r3, #4
 802a0cc:	b2db      	uxtb	r3, r3
 802a0ce:	2b00      	cmp	r3, #0
 802a0d0:	d028      	beq.n	802a124 <http_cb+0x62c>
        struct mg_str *cc = mg_http_get_header(&hm, "Connection");
 802a0d2:	f107 0314 	add.w	r3, r7, #20
 802a0d6:	492c      	ldr	r1, [pc, #176]	@ (802a188 <http_cb+0x690>)
 802a0d8:	4618      	mov	r0, r3
 802a0da:	f7fd f8b1 	bl	8027240 <mg_http_get_header>
 802a0de:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
        if (cc != NULL && mg_strcasecmp(*cc, mg_str("close")) == 0) {
 802a0e2:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 802a0e6:	2b00      	cmp	r3, #0
 802a0e8:	d01c      	beq.n	802a124 <http_cb+0x62c>
 802a0ea:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 802a0ee:	4927      	ldr	r1, [pc, #156]	@ (802a18c <http_cb+0x694>)
 802a0f0:	4618      	mov	r0, r3
 802a0f2:	f007 fd77 	bl	8031be4 <mg_str_s>
 802a0f6:	f8d7 1254 	ldr.w	r1, [r7, #596]	@ 0x254
 802a0fa:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 802a0fe:	cb0c      	ldmia	r3, {r2, r3}
 802a100:	c903      	ldmia	r1, {r0, r1}
 802a102:	f007 fdfb 	bl	8031cfc <mg_strcasecmp>
 802a106:	4603      	mov	r3, r0
 802a108:	2b00      	cmp	r3, #0
 802a10a:	d10b      	bne.n	802a124 <http_cb+0x62c>
          c->is_draining = 1;  // honor "Connection: close"
 802a10c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 802a110:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 802a114:	681a      	ldr	r2, [r3, #0]
 802a116:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 802a11a:	f043 0310 	orr.w	r3, r3, #16
 802a11e:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
          break;
 802a122:	e01c      	b.n	802a15e <http_cb+0x666>
    while (c->is_resp == 0 && ofs < c->recv.len) {
 802a124:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 802a128:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 802a12c:	681b      	ldr	r3, [r3, #0]
 802a12e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 802a132:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 802a136:	b2db      	uxtb	r3, r3
 802a138:	2b00      	cmp	r3, #0
 802a13a:	d110      	bne.n	802a15e <http_cb+0x666>
 802a13c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 802a140:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 802a144:	681b      	ldr	r3, [r3, #0]
 802a146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802a148:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 802a14c:	429a      	cmp	r2, r3
 802a14e:	f4ff ad23 	bcc.w	8029b98 <http_cb+0xa0>
 802a152:	e004      	b.n	802a15e <http_cb+0x666>
      if (n == 0) break;                 // Request is not buffered yet
 802a154:	bf00      	nop
 802a156:	e002      	b.n	802a15e <http_cb+0x666>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 802a158:	bf00      	nop
 802a15a:	e000      	b.n	802a15e <http_cb+0x666>
        if (hm.body.len > len) break;  // Buffer more data
 802a15c:	bf00      	nop
        }
      }
    }
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 802a15e:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 802a162:	2b00      	cmp	r3, #0
 802a164:	d00b      	beq.n	802a17e <http_cb+0x686>
 802a166:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 802a16a:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 802a16e:	681b      	ldr	r3, [r3, #0]
 802a170:	3338      	adds	r3, #56	@ 0x38
 802a172:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 802a176:	2100      	movs	r1, #0
 802a178:	4618      	mov	r0, r3
 802a17a:	f000 f91d 	bl	802a3b8 <mg_iobuf_del>
  }
  (void) ev_data;
}
 802a17e:	f507 7722 	add.w	r7, r7, #648	@ 0x288
 802a182:	46bd      	mov	sp, r7
 802a184:	bd80      	pop	{r7, pc}
 802a186:	bf00      	nop
 802a188:	08042950 	.word	0x08042950
 802a18c:	0804295c 	.word	0x0804295c

0802a190 <mg_http_listen>:
  if (c != NULL) c->pfn = http_cb;
  return c;
}

struct mg_connection *mg_http_listen(struct mg_mgr *mgr, const char *url,
                                     mg_event_handler_t fn, void *fn_data) {
 802a190:	b580      	push	{r7, lr}
 802a192:	b086      	sub	sp, #24
 802a194:	af00      	add	r7, sp, #0
 802a196:	60f8      	str	r0, [r7, #12]
 802a198:	60b9      	str	r1, [r7, #8]
 802a19a:	607a      	str	r2, [r7, #4]
 802a19c:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_listen(mgr, url, fn, fn_data);
 802a19e:	683b      	ldr	r3, [r7, #0]
 802a1a0:	687a      	ldr	r2, [r7, #4]
 802a1a2:	68b9      	ldr	r1, [r7, #8]
 802a1a4:	68f8      	ldr	r0, [r7, #12]
 802a1a6:	f003 fd11 	bl	802dbcc <mg_listen>
 802a1aa:	6178      	str	r0, [r7, #20]
  if (c != NULL) c->pfn = http_cb;
 802a1ac:	697b      	ldr	r3, [r7, #20]
 802a1ae:	2b00      	cmp	r3, #0
 802a1b0:	d003      	beq.n	802a1ba <mg_http_listen+0x2a>
 802a1b2:	697b      	ldr	r3, [r7, #20]
 802a1b4:	4a03      	ldr	r2, [pc, #12]	@ (802a1c4 <mg_http_listen+0x34>)
 802a1b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  return c;
 802a1ba:	697b      	ldr	r3, [r7, #20]
}
 802a1bc:	4618      	mov	r0, r3
 802a1be:	3718      	adds	r7, #24
 802a1c0:	46bd      	mov	sp, r7
 802a1c2:	bd80      	pop	{r7, pc}
 802a1c4:	08029af9 	.word	0x08029af9

0802a1c8 <roundup>:





static size_t roundup(size_t size, size_t align) {
 802a1c8:	b480      	push	{r7}
 802a1ca:	b083      	sub	sp, #12
 802a1cc:	af00      	add	r7, sp, #0
 802a1ce:	6078      	str	r0, [r7, #4]
 802a1d0:	6039      	str	r1, [r7, #0]
  return align == 0 ? size : (size + align - 1) / align * align;
 802a1d2:	683b      	ldr	r3, [r7, #0]
 802a1d4:	2b00      	cmp	r3, #0
 802a1d6:	d00a      	beq.n	802a1ee <roundup+0x26>
 802a1d8:	687a      	ldr	r2, [r7, #4]
 802a1da:	683b      	ldr	r3, [r7, #0]
 802a1dc:	4413      	add	r3, r2
 802a1de:	1e5a      	subs	r2, r3, #1
 802a1e0:	683b      	ldr	r3, [r7, #0]
 802a1e2:	fbb2 f3f3 	udiv	r3, r2, r3
 802a1e6:	683a      	ldr	r2, [r7, #0]
 802a1e8:	fb02 f303 	mul.w	r3, r2, r3
 802a1ec:	e000      	b.n	802a1f0 <roundup+0x28>
 802a1ee:	687b      	ldr	r3, [r7, #4]
}
 802a1f0:	4618      	mov	r0, r3
 802a1f2:	370c      	adds	r7, #12
 802a1f4:	46bd      	mov	sp, r7
 802a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a1fa:	4770      	bx	lr

0802a1fc <mg_iobuf_resize>:

int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {
 802a1fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 802a200:	b088      	sub	sp, #32
 802a202:	af02      	add	r7, sp, #8
 802a204:	6078      	str	r0, [r7, #4]
 802a206:	6039      	str	r1, [r7, #0]
  int ok = 1;
 802a208:	2301      	movs	r3, #1
 802a20a:	617b      	str	r3, [r7, #20]
  new_size = roundup(new_size, io->align);
 802a20c:	687b      	ldr	r3, [r7, #4]
 802a20e:	68db      	ldr	r3, [r3, #12]
 802a210:	4619      	mov	r1, r3
 802a212:	6838      	ldr	r0, [r7, #0]
 802a214:	f7ff ffd8 	bl	802a1c8 <roundup>
 802a218:	6038      	str	r0, [r7, #0]
  if (new_size == 0) {
 802a21a:	683b      	ldr	r3, [r7, #0]
 802a21c:	2b00      	cmp	r3, #0
 802a21e:	d117      	bne.n	802a250 <mg_iobuf_resize+0x54>
    mg_bzero(io->buf, io->size);
 802a220:	687b      	ldr	r3, [r7, #4]
 802a222:	681a      	ldr	r2, [r3, #0]
 802a224:	687b      	ldr	r3, [r7, #4]
 802a226:	685b      	ldr	r3, [r3, #4]
 802a228:	4619      	mov	r1, r3
 802a22a:	4610      	mov	r0, r2
 802a22c:	f008 fbe4 	bl	80329f8 <mg_bzero>
    free(io->buf);
 802a230:	687b      	ldr	r3, [r7, #4]
 802a232:	681b      	ldr	r3, [r3, #0]
 802a234:	4618      	mov	r0, r3
 802a236:	f7f2 fa97 	bl	801c768 <vPortFree>
    io->buf = NULL;
 802a23a:	687b      	ldr	r3, [r7, #4]
 802a23c:	2200      	movs	r2, #0
 802a23e:	601a      	str	r2, [r3, #0]
    io->len = io->size = 0;
 802a240:	687b      	ldr	r3, [r7, #4]
 802a242:	2200      	movs	r2, #0
 802a244:	605a      	str	r2, [r3, #4]
 802a246:	687b      	ldr	r3, [r7, #4]
 802a248:	685a      	ldr	r2, [r3, #4]
 802a24a:	687b      	ldr	r3, [r7, #4]
 802a24c:	609a      	str	r2, [r3, #8]
 802a24e:	e052      	b.n	802a2f6 <mg_iobuf_resize+0xfa>
  } else if (new_size != io->size) {
 802a250:	687b      	ldr	r3, [r7, #4]
 802a252:	685b      	ldr	r3, [r3, #4]
 802a254:	683a      	ldr	r2, [r7, #0]
 802a256:	429a      	cmp	r2, r3
 802a258:	d04d      	beq.n	802a2f6 <mg_iobuf_resize+0xfa>
    // NOTE(lsm): do not use realloc here. Use calloc/free only, to ease the
    // porting to some obscure platforms like FreeRTOS
    void *p = calloc(1, new_size);
 802a25a:	6839      	ldr	r1, [r7, #0]
 802a25c:	2001      	movs	r0, #1
 802a25e:	f7fa fdf7 	bl	8024e50 <mg_calloc>
 802a262:	6138      	str	r0, [r7, #16]
    if (p != NULL) {
 802a264:	693b      	ldr	r3, [r7, #16]
 802a266:	2b00      	cmp	r3, #0
 802a268:	d028      	beq.n	802a2bc <mg_iobuf_resize+0xc0>
      size_t len = new_size < io->len ? new_size : io->len;
 802a26a:	687b      	ldr	r3, [r7, #4]
 802a26c:	689b      	ldr	r3, [r3, #8]
 802a26e:	683a      	ldr	r2, [r7, #0]
 802a270:	4293      	cmp	r3, r2
 802a272:	bf28      	it	cs
 802a274:	4613      	movcs	r3, r2
 802a276:	60fb      	str	r3, [r7, #12]
      if (len > 0 && io->buf != NULL) memmove(p, io->buf, len);
 802a278:	68fb      	ldr	r3, [r7, #12]
 802a27a:	2b00      	cmp	r3, #0
 802a27c:	d00a      	beq.n	802a294 <mg_iobuf_resize+0x98>
 802a27e:	687b      	ldr	r3, [r7, #4]
 802a280:	681b      	ldr	r3, [r3, #0]
 802a282:	2b00      	cmp	r3, #0
 802a284:	d006      	beq.n	802a294 <mg_iobuf_resize+0x98>
 802a286:	687b      	ldr	r3, [r7, #4]
 802a288:	681b      	ldr	r3, [r3, #0]
 802a28a:	68fa      	ldr	r2, [r7, #12]
 802a28c:	4619      	mov	r1, r3
 802a28e:	6938      	ldr	r0, [r7, #16]
 802a290:	f00b fd94 	bl	8035dbc <memmove>
      mg_bzero(io->buf, io->size);
 802a294:	687b      	ldr	r3, [r7, #4]
 802a296:	681a      	ldr	r2, [r3, #0]
 802a298:	687b      	ldr	r3, [r7, #4]
 802a29a:	685b      	ldr	r3, [r3, #4]
 802a29c:	4619      	mov	r1, r3
 802a29e:	4610      	mov	r0, r2
 802a2a0:	f008 fbaa 	bl	80329f8 <mg_bzero>
      free(io->buf);
 802a2a4:	687b      	ldr	r3, [r7, #4]
 802a2a6:	681b      	ldr	r3, [r3, #0]
 802a2a8:	4618      	mov	r0, r3
 802a2aa:	f7f2 fa5d 	bl	801c768 <vPortFree>
      io->buf = (unsigned char *) p;
 802a2ae:	687b      	ldr	r3, [r7, #4]
 802a2b0:	693a      	ldr	r2, [r7, #16]
 802a2b2:	601a      	str	r2, [r3, #0]
      io->size = new_size;
 802a2b4:	687b      	ldr	r3, [r7, #4]
 802a2b6:	683a      	ldr	r2, [r7, #0]
 802a2b8:	605a      	str	r2, [r3, #4]
 802a2ba:	e01c      	b.n	802a2f6 <mg_iobuf_resize+0xfa>
    } else {
      ok = 0;
 802a2bc:	2300      	movs	r3, #0
 802a2be:	617b      	str	r3, [r7, #20]
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 802a2c0:	4b10      	ldr	r3, [pc, #64]	@ (802a304 <mg_iobuf_resize+0x108>)
 802a2c2:	681b      	ldr	r3, [r3, #0]
 802a2c4:	2b00      	cmp	r3, #0
 802a2c6:	dd16      	ble.n	802a2f6 <mg_iobuf_resize+0xfa>
 802a2c8:	4b0f      	ldr	r3, [pc, #60]	@ (802a308 <mg_iobuf_resize+0x10c>)
 802a2ca:	f640 5244 	movw	r2, #3396	@ 0xd44
 802a2ce:	490f      	ldr	r1, [pc, #60]	@ (802a30c <mg_iobuf_resize+0x110>)
 802a2d0:	2001      	movs	r0, #1
 802a2d2:	f000 ff83 	bl	802b1dc <mg_log_prefix>
 802a2d6:	687b      	ldr	r3, [r7, #4]
 802a2d8:	685b      	ldr	r3, [r3, #4]
 802a2da:	2200      	movs	r2, #0
 802a2dc:	4698      	mov	r8, r3
 802a2de:	4691      	mov	r9, r2
 802a2e0:	683b      	ldr	r3, [r7, #0]
 802a2e2:	2200      	movs	r2, #0
 802a2e4:	461c      	mov	r4, r3
 802a2e6:	4615      	mov	r5, r2
 802a2e8:	e9cd 4500 	strd	r4, r5, [sp]
 802a2ec:	4642      	mov	r2, r8
 802a2ee:	464b      	mov	r3, r9
 802a2f0:	4807      	ldr	r0, [pc, #28]	@ (802a310 <mg_iobuf_resize+0x114>)
 802a2f2:	f000 ffc3 	bl	802b27c <mg_log>
    }
  }
  return ok;
 802a2f6:	697b      	ldr	r3, [r7, #20]
}
 802a2f8:	4618      	mov	r0, r3
 802a2fa:	3718      	adds	r7, #24
 802a2fc:	46bd      	mov	sp, r7
 802a2fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 802a302:	bf00      	nop
 802a304:	20000298 	.word	0x20000298
 802a308:	080445bc 	.word	0x080445bc
 802a30c:	08041564 	.word	0x08041564
 802a310:	0804299c 	.word	0x0804299c

0802a314 <mg_iobuf_add>:
  io->size = io->len = 0;
  return mg_iobuf_resize(io, size);
}

size_t mg_iobuf_add(struct mg_iobuf *io, size_t ofs, const void *buf,
                    size_t len) {
 802a314:	b580      	push	{r7, lr}
 802a316:	b086      	sub	sp, #24
 802a318:	af00      	add	r7, sp, #0
 802a31a:	60f8      	str	r0, [r7, #12]
 802a31c:	60b9      	str	r1, [r7, #8]
 802a31e:	607a      	str	r2, [r7, #4]
 802a320:	603b      	str	r3, [r7, #0]
  size_t new_size = roundup(io->len + len, io->align);
 802a322:	68fb      	ldr	r3, [r7, #12]
 802a324:	689a      	ldr	r2, [r3, #8]
 802a326:	683b      	ldr	r3, [r7, #0]
 802a328:	441a      	add	r2, r3
 802a32a:	68fb      	ldr	r3, [r7, #12]
 802a32c:	68db      	ldr	r3, [r3, #12]
 802a32e:	4619      	mov	r1, r3
 802a330:	4610      	mov	r0, r2
 802a332:	f7ff ff49 	bl	802a1c8 <roundup>
 802a336:	6178      	str	r0, [r7, #20]
  mg_iobuf_resize(io, new_size);      // Attempt to resize
 802a338:	6979      	ldr	r1, [r7, #20]
 802a33a:	68f8      	ldr	r0, [r7, #12]
 802a33c:	f7ff ff5e 	bl	802a1fc <mg_iobuf_resize>
  if (new_size != io->size) len = 0;  // Resize failure, append nothing
 802a340:	68fb      	ldr	r3, [r7, #12]
 802a342:	685b      	ldr	r3, [r3, #4]
 802a344:	697a      	ldr	r2, [r7, #20]
 802a346:	429a      	cmp	r2, r3
 802a348:	d001      	beq.n	802a34e <mg_iobuf_add+0x3a>
 802a34a:	2300      	movs	r3, #0
 802a34c:	603b      	str	r3, [r7, #0]
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 802a34e:	68fb      	ldr	r3, [r7, #12]
 802a350:	689b      	ldr	r3, [r3, #8]
 802a352:	68ba      	ldr	r2, [r7, #8]
 802a354:	429a      	cmp	r2, r3
 802a356:	d210      	bcs.n	802a37a <mg_iobuf_add+0x66>
 802a358:	68fb      	ldr	r3, [r7, #12]
 802a35a:	681a      	ldr	r2, [r3, #0]
 802a35c:	68b9      	ldr	r1, [r7, #8]
 802a35e:	683b      	ldr	r3, [r7, #0]
 802a360:	440b      	add	r3, r1
 802a362:	18d0      	adds	r0, r2, r3
 802a364:	68fb      	ldr	r3, [r7, #12]
 802a366:	681a      	ldr	r2, [r3, #0]
 802a368:	68bb      	ldr	r3, [r7, #8]
 802a36a:	18d1      	adds	r1, r2, r3
 802a36c:	68fb      	ldr	r3, [r7, #12]
 802a36e:	689a      	ldr	r2, [r3, #8]
 802a370:	68bb      	ldr	r3, [r7, #8]
 802a372:	1ad3      	subs	r3, r2, r3
 802a374:	461a      	mov	r2, r3
 802a376:	f00b fd21 	bl	8035dbc <memmove>
  if (buf != NULL) memmove(io->buf + ofs, buf, len);
 802a37a:	687b      	ldr	r3, [r7, #4]
 802a37c:	2b00      	cmp	r3, #0
 802a37e:	d008      	beq.n	802a392 <mg_iobuf_add+0x7e>
 802a380:	68fb      	ldr	r3, [r7, #12]
 802a382:	681a      	ldr	r2, [r3, #0]
 802a384:	68bb      	ldr	r3, [r7, #8]
 802a386:	4413      	add	r3, r2
 802a388:	683a      	ldr	r2, [r7, #0]
 802a38a:	6879      	ldr	r1, [r7, #4]
 802a38c:	4618      	mov	r0, r3
 802a38e:	f00b fd15 	bl	8035dbc <memmove>
  if (ofs > io->len) io->len += ofs - io->len;
 802a392:	68fb      	ldr	r3, [r7, #12]
 802a394:	689b      	ldr	r3, [r3, #8]
 802a396:	68ba      	ldr	r2, [r7, #8]
 802a398:	429a      	cmp	r2, r3
 802a39a:	d902      	bls.n	802a3a2 <mg_iobuf_add+0x8e>
 802a39c:	68fb      	ldr	r3, [r7, #12]
 802a39e:	68ba      	ldr	r2, [r7, #8]
 802a3a0:	609a      	str	r2, [r3, #8]
  io->len += len;
 802a3a2:	68fb      	ldr	r3, [r7, #12]
 802a3a4:	689a      	ldr	r2, [r3, #8]
 802a3a6:	683b      	ldr	r3, [r7, #0]
 802a3a8:	441a      	add	r2, r3
 802a3aa:	68fb      	ldr	r3, [r7, #12]
 802a3ac:	609a      	str	r2, [r3, #8]
  return len;
 802a3ae:	683b      	ldr	r3, [r7, #0]
}
 802a3b0:	4618      	mov	r0, r3
 802a3b2:	3718      	adds	r7, #24
 802a3b4:	46bd      	mov	sp, r7
 802a3b6:	bd80      	pop	{r7, pc}

0802a3b8 <mg_iobuf_del>:

size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {
 802a3b8:	b580      	push	{r7, lr}
 802a3ba:	b084      	sub	sp, #16
 802a3bc:	af00      	add	r7, sp, #0
 802a3be:	60f8      	str	r0, [r7, #12]
 802a3c0:	60b9      	str	r1, [r7, #8]
 802a3c2:	607a      	str	r2, [r7, #4]
  if (ofs > io->len) ofs = io->len;
 802a3c4:	68fb      	ldr	r3, [r7, #12]
 802a3c6:	689b      	ldr	r3, [r3, #8]
 802a3c8:	68ba      	ldr	r2, [r7, #8]
 802a3ca:	429a      	cmp	r2, r3
 802a3cc:	d902      	bls.n	802a3d4 <mg_iobuf_del+0x1c>
 802a3ce:	68fb      	ldr	r3, [r7, #12]
 802a3d0:	689b      	ldr	r3, [r3, #8]
 802a3d2:	60bb      	str	r3, [r7, #8]
  if (ofs + len > io->len) len = io->len - ofs;
 802a3d4:	68ba      	ldr	r2, [r7, #8]
 802a3d6:	687b      	ldr	r3, [r7, #4]
 802a3d8:	441a      	add	r2, r3
 802a3da:	68fb      	ldr	r3, [r7, #12]
 802a3dc:	689b      	ldr	r3, [r3, #8]
 802a3de:	429a      	cmp	r2, r3
 802a3e0:	d904      	bls.n	802a3ec <mg_iobuf_del+0x34>
 802a3e2:	68fb      	ldr	r3, [r7, #12]
 802a3e4:	689a      	ldr	r2, [r3, #8]
 802a3e6:	68bb      	ldr	r3, [r7, #8]
 802a3e8:	1ad3      	subs	r3, r2, r3
 802a3ea:	607b      	str	r3, [r7, #4]
  if (io->buf) memmove(io->buf + ofs, io->buf + ofs + len, io->len - ofs - len);
 802a3ec:	68fb      	ldr	r3, [r7, #12]
 802a3ee:	681b      	ldr	r3, [r3, #0]
 802a3f0:	2b00      	cmp	r3, #0
 802a3f2:	d012      	beq.n	802a41a <mg_iobuf_del+0x62>
 802a3f4:	68fb      	ldr	r3, [r7, #12]
 802a3f6:	681a      	ldr	r2, [r3, #0]
 802a3f8:	68bb      	ldr	r3, [r7, #8]
 802a3fa:	18d0      	adds	r0, r2, r3
 802a3fc:	68fb      	ldr	r3, [r7, #12]
 802a3fe:	681a      	ldr	r2, [r3, #0]
 802a400:	68b9      	ldr	r1, [r7, #8]
 802a402:	687b      	ldr	r3, [r7, #4]
 802a404:	440b      	add	r3, r1
 802a406:	18d1      	adds	r1, r2, r3
 802a408:	68fb      	ldr	r3, [r7, #12]
 802a40a:	689a      	ldr	r2, [r3, #8]
 802a40c:	68bb      	ldr	r3, [r7, #8]
 802a40e:	1ad2      	subs	r2, r2, r3
 802a410:	687b      	ldr	r3, [r7, #4]
 802a412:	1ad3      	subs	r3, r2, r3
 802a414:	461a      	mov	r2, r3
 802a416:	f00b fcd1 	bl	8035dbc <memmove>
  if (io->buf) mg_bzero(io->buf + io->len - len, len);
 802a41a:	68fb      	ldr	r3, [r7, #12]
 802a41c:	681b      	ldr	r3, [r3, #0]
 802a41e:	2b00      	cmp	r3, #0
 802a420:	d00a      	beq.n	802a438 <mg_iobuf_del+0x80>
 802a422:	68fb      	ldr	r3, [r7, #12]
 802a424:	681a      	ldr	r2, [r3, #0]
 802a426:	68fb      	ldr	r3, [r7, #12]
 802a428:	6899      	ldr	r1, [r3, #8]
 802a42a:	687b      	ldr	r3, [r7, #4]
 802a42c:	1acb      	subs	r3, r1, r3
 802a42e:	4413      	add	r3, r2
 802a430:	6879      	ldr	r1, [r7, #4]
 802a432:	4618      	mov	r0, r3
 802a434:	f008 fae0 	bl	80329f8 <mg_bzero>
  io->len -= len;
 802a438:	68fb      	ldr	r3, [r7, #12]
 802a43a:	689a      	ldr	r2, [r3, #8]
 802a43c:	687b      	ldr	r3, [r7, #4]
 802a43e:	1ad2      	subs	r2, r2, r3
 802a440:	68fb      	ldr	r3, [r7, #12]
 802a442:	609a      	str	r2, [r3, #8]
  return len;
 802a444:	687b      	ldr	r3, [r7, #4]
}
 802a446:	4618      	mov	r0, r3
 802a448:	3710      	adds	r7, #16
 802a44a:	46bd      	mov	sp, r7
 802a44c:	bd80      	pop	{r7, pc}

0802a44e <mg_iobuf_free>:

void mg_iobuf_free(struct mg_iobuf *io) {
 802a44e:	b580      	push	{r7, lr}
 802a450:	b082      	sub	sp, #8
 802a452:	af00      	add	r7, sp, #0
 802a454:	6078      	str	r0, [r7, #4]
  mg_iobuf_resize(io, 0);
 802a456:	2100      	movs	r1, #0
 802a458:	6878      	ldr	r0, [r7, #4]
 802a45a:	f7ff fecf 	bl	802a1fc <mg_iobuf_resize>
}
 802a45e:	bf00      	nop
 802a460:	3708      	adds	r7, #8
 802a462:	46bd      	mov	sp, r7
 802a464:	bd80      	pop	{r7, pc}
	...

0802a468 <escapeseq>:
#endif




static const char *escapeseq(int esc) {
 802a468:	b480      	push	{r7}
 802a46a:	b083      	sub	sp, #12
 802a46c:	af00      	add	r7, sp, #0
 802a46e:	6078      	str	r0, [r7, #4]
  return esc ? "\b\f\n\r\t\\\"" : "bfnrt\\\"";
 802a470:	687b      	ldr	r3, [r7, #4]
 802a472:	2b00      	cmp	r3, #0
 802a474:	d001      	beq.n	802a47a <escapeseq+0x12>
 802a476:	4b04      	ldr	r3, [pc, #16]	@ (802a488 <escapeseq+0x20>)
 802a478:	e000      	b.n	802a47c <escapeseq+0x14>
 802a47a:	4b04      	ldr	r3, [pc, #16]	@ (802a48c <escapeseq+0x24>)
}
 802a47c:	4618      	mov	r0, r3
 802a47e:	370c      	adds	r7, #12
 802a480:	46bd      	mov	sp, r7
 802a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a486:	4770      	bx	lr
 802a488:	080429a8 	.word	0x080429a8
 802a48c:	080429b0 	.word	0x080429b0

0802a490 <json_esc>:

static char json_esc(int c, int esc) {
 802a490:	b580      	push	{r7, lr}
 802a492:	b086      	sub	sp, #24
 802a494:	af00      	add	r7, sp, #0
 802a496:	6078      	str	r0, [r7, #4]
 802a498:	6039      	str	r1, [r7, #0]
  const char *p, *esc1 = escapeseq(esc), *esc2 = escapeseq(!esc);
 802a49a:	6838      	ldr	r0, [r7, #0]
 802a49c:	f7ff ffe4 	bl	802a468 <escapeseq>
 802a4a0:	6138      	str	r0, [r7, #16]
 802a4a2:	683b      	ldr	r3, [r7, #0]
 802a4a4:	2b00      	cmp	r3, #0
 802a4a6:	bf0c      	ite	eq
 802a4a8:	2301      	moveq	r3, #1
 802a4aa:	2300      	movne	r3, #0
 802a4ac:	b2db      	uxtb	r3, r3
 802a4ae:	4618      	mov	r0, r3
 802a4b0:	f7ff ffda 	bl	802a468 <escapeseq>
 802a4b4:	60f8      	str	r0, [r7, #12]
  for (p = esc1; *p != '\0'; p++) {
 802a4b6:	693b      	ldr	r3, [r7, #16]
 802a4b8:	617b      	str	r3, [r7, #20]
 802a4ba:	e010      	b.n	802a4de <json_esc+0x4e>
    if (*p == c) return esc2[p - esc1];
 802a4bc:	697b      	ldr	r3, [r7, #20]
 802a4be:	781b      	ldrb	r3, [r3, #0]
 802a4c0:	461a      	mov	r2, r3
 802a4c2:	687b      	ldr	r3, [r7, #4]
 802a4c4:	4293      	cmp	r3, r2
 802a4c6:	d107      	bne.n	802a4d8 <json_esc+0x48>
 802a4c8:	697a      	ldr	r2, [r7, #20]
 802a4ca:	693b      	ldr	r3, [r7, #16]
 802a4cc:	1ad3      	subs	r3, r2, r3
 802a4ce:	461a      	mov	r2, r3
 802a4d0:	68fb      	ldr	r3, [r7, #12]
 802a4d2:	4413      	add	r3, r2
 802a4d4:	781b      	ldrb	r3, [r3, #0]
 802a4d6:	e007      	b.n	802a4e8 <json_esc+0x58>
  for (p = esc1; *p != '\0'; p++) {
 802a4d8:	697b      	ldr	r3, [r7, #20]
 802a4da:	3301      	adds	r3, #1
 802a4dc:	617b      	str	r3, [r7, #20]
 802a4de:	697b      	ldr	r3, [r7, #20]
 802a4e0:	781b      	ldrb	r3, [r3, #0]
 802a4e2:	2b00      	cmp	r3, #0
 802a4e4:	d1ea      	bne.n	802a4bc <json_esc+0x2c>
  }
  return 0;
 802a4e6:	2300      	movs	r3, #0
}
 802a4e8:	4618      	mov	r0, r3
 802a4ea:	3718      	adds	r7, #24
 802a4ec:	46bd      	mov	sp, r7
 802a4ee:	bd80      	pop	{r7, pc}

0802a4f0 <mg_pass_string>:

static int mg_pass_string(const char *s, int len) {
 802a4f0:	b580      	push	{r7, lr}
 802a4f2:	b084      	sub	sp, #16
 802a4f4:	af00      	add	r7, sp, #0
 802a4f6:	6078      	str	r0, [r7, #4]
 802a4f8:	6039      	str	r1, [r7, #0]
  int i;
  for (i = 0; i < len; i++) {
 802a4fa:	2300      	movs	r3, #0
 802a4fc:	60fb      	str	r3, [r7, #12]
 802a4fe:	e02e      	b.n	802a55e <mg_pass_string+0x6e>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
 802a500:	68fb      	ldr	r3, [r7, #12]
 802a502:	687a      	ldr	r2, [r7, #4]
 802a504:	4413      	add	r3, r2
 802a506:	781b      	ldrb	r3, [r3, #0]
 802a508:	2b5c      	cmp	r3, #92	@ 0x5c
 802a50a:	d114      	bne.n	802a536 <mg_pass_string+0x46>
 802a50c:	68fb      	ldr	r3, [r7, #12]
 802a50e:	3301      	adds	r3, #1
 802a510:	683a      	ldr	r2, [r7, #0]
 802a512:	429a      	cmp	r2, r3
 802a514:	dd0f      	ble.n	802a536 <mg_pass_string+0x46>
 802a516:	68fb      	ldr	r3, [r7, #12]
 802a518:	3301      	adds	r3, #1
 802a51a:	687a      	ldr	r2, [r7, #4]
 802a51c:	4413      	add	r3, r2
 802a51e:	781b      	ldrb	r3, [r3, #0]
 802a520:	2101      	movs	r1, #1
 802a522:	4618      	mov	r0, r3
 802a524:	f7ff ffb4 	bl	802a490 <json_esc>
 802a528:	4603      	mov	r3, r0
 802a52a:	2b00      	cmp	r3, #0
 802a52c:	d003      	beq.n	802a536 <mg_pass_string+0x46>
      i++;
 802a52e:	68fb      	ldr	r3, [r7, #12]
 802a530:	3301      	adds	r3, #1
 802a532:	60fb      	str	r3, [r7, #12]
 802a534:	e010      	b.n	802a558 <mg_pass_string+0x68>
    } else if (s[i] == '\0') {
 802a536:	68fb      	ldr	r3, [r7, #12]
 802a538:	687a      	ldr	r2, [r7, #4]
 802a53a:	4413      	add	r3, r2
 802a53c:	781b      	ldrb	r3, [r3, #0]
 802a53e:	2b00      	cmp	r3, #0
 802a540:	d102      	bne.n	802a548 <mg_pass_string+0x58>
      return MG_JSON_INVALID;
 802a542:	f06f 0301 	mvn.w	r3, #1
 802a546:	e010      	b.n	802a56a <mg_pass_string+0x7a>
    } else if (s[i] == '"') {
 802a548:	68fb      	ldr	r3, [r7, #12]
 802a54a:	687a      	ldr	r2, [r7, #4]
 802a54c:	4413      	add	r3, r2
 802a54e:	781b      	ldrb	r3, [r3, #0]
 802a550:	2b22      	cmp	r3, #34	@ 0x22
 802a552:	d101      	bne.n	802a558 <mg_pass_string+0x68>
      return i;
 802a554:	68fb      	ldr	r3, [r7, #12]
 802a556:	e008      	b.n	802a56a <mg_pass_string+0x7a>
  for (i = 0; i < len; i++) {
 802a558:	68fb      	ldr	r3, [r7, #12]
 802a55a:	3301      	adds	r3, #1
 802a55c:	60fb      	str	r3, [r7, #12]
 802a55e:	68fa      	ldr	r2, [r7, #12]
 802a560:	683b      	ldr	r3, [r7, #0]
 802a562:	429a      	cmp	r2, r3
 802a564:	dbcc      	blt.n	802a500 <mg_pass_string+0x10>
    }
  }
  return MG_JSON_INVALID;
 802a566:	f06f 0301 	mvn.w	r3, #1
}
 802a56a:	4618      	mov	r0, r3
 802a56c:	3710      	adds	r7, #16
 802a56e:	46bd      	mov	sp, r7
 802a570:	bd80      	pop	{r7, pc}
 802a572:	0000      	movs	r0, r0
 802a574:	0000      	movs	r0, r0
	...

0802a578 <mg_atod>:

static double mg_atod(const char *p, int len, int *numlen) {
 802a578:	b580      	push	{r7, lr}
 802a57a:	b090      	sub	sp, #64	@ 0x40
 802a57c:	af00      	add	r7, sp, #0
 802a57e:	60f8      	str	r0, [r7, #12]
 802a580:	60b9      	str	r1, [r7, #8]
 802a582:	607a      	str	r2, [r7, #4]
  double d = 0.0;
 802a584:	f04f 0200 	mov.w	r2, #0
 802a588:	f04f 0300 	mov.w	r3, #0
 802a58c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  int i = 0, sign = 1;
 802a590:	2300      	movs	r3, #0
 802a592:	637b      	str	r3, [r7, #52]	@ 0x34
 802a594:	2301      	movs	r3, #1
 802a596:	633b      	str	r3, [r7, #48]	@ 0x30

  // Sign
  if (i < len && *p == '-') {
 802a598:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802a59a:	68bb      	ldr	r3, [r7, #8]
 802a59c:	429a      	cmp	r2, r3
 802a59e:	da0a      	bge.n	802a5b6 <mg_atod+0x3e>
 802a5a0:	68fb      	ldr	r3, [r7, #12]
 802a5a2:	781b      	ldrb	r3, [r3, #0]
 802a5a4:	2b2d      	cmp	r3, #45	@ 0x2d
 802a5a6:	d106      	bne.n	802a5b6 <mg_atod+0x3e>
    sign = -1, i++;
 802a5a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802a5ac:	633b      	str	r3, [r7, #48]	@ 0x30
 802a5ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802a5b0:	3301      	adds	r3, #1
 802a5b2:	637b      	str	r3, [r7, #52]	@ 0x34
 802a5b4:	e00a      	b.n	802a5cc <mg_atod+0x54>
  } else if (i < len && *p == '+') {
 802a5b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802a5b8:	68bb      	ldr	r3, [r7, #8]
 802a5ba:	429a      	cmp	r2, r3
 802a5bc:	da27      	bge.n	802a60e <mg_atod+0x96>
 802a5be:	68fb      	ldr	r3, [r7, #12]
 802a5c0:	781b      	ldrb	r3, [r3, #0]
 802a5c2:	2b2b      	cmp	r3, #43	@ 0x2b
 802a5c4:	d123      	bne.n	802a60e <mg_atod+0x96>
    i++;
 802a5c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802a5c8:	3301      	adds	r3, #1
 802a5ca:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  // Decimal
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 802a5cc:	e01f      	b.n	802a60e <mg_atod+0x96>
    d *= 10.0;
 802a5ce:	f04f 0200 	mov.w	r2, #0
 802a5d2:	4b9d      	ldr	r3, [pc, #628]	@ (802a848 <mg_atod+0x2d0>)
 802a5d4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 802a5d8:	f7e6 f826 	bl	8010628 <__aeabi_dmul>
 802a5dc:	4602      	mov	r2, r0
 802a5de:	460b      	mov	r3, r1
 802a5e0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    d += p[i] - '0';
 802a5e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802a5e6:	68fa      	ldr	r2, [r7, #12]
 802a5e8:	4413      	add	r3, r2
 802a5ea:	781b      	ldrb	r3, [r3, #0]
 802a5ec:	3b30      	subs	r3, #48	@ 0x30
 802a5ee:	4618      	mov	r0, r3
 802a5f0:	f7e5 ffb0 	bl	8010554 <__aeabi_i2d>
 802a5f4:	4602      	mov	r2, r0
 802a5f6:	460b      	mov	r3, r1
 802a5f8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 802a5fc:	f7e5 fe5e 	bl	80102bc <__adddf3>
 802a600:	4602      	mov	r2, r0
 802a602:	460b      	mov	r3, r1
 802a604:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 802a608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802a60a:	3301      	adds	r3, #1
 802a60c:	637b      	str	r3, [r7, #52]	@ 0x34
 802a60e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802a610:	68bb      	ldr	r3, [r7, #8]
 802a612:	429a      	cmp	r2, r3
 802a614:	da0b      	bge.n	802a62e <mg_atod+0xb6>
 802a616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802a618:	68fa      	ldr	r2, [r7, #12]
 802a61a:	4413      	add	r3, r2
 802a61c:	781b      	ldrb	r3, [r3, #0]
 802a61e:	2b2f      	cmp	r3, #47	@ 0x2f
 802a620:	d905      	bls.n	802a62e <mg_atod+0xb6>
 802a622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802a624:	68fa      	ldr	r2, [r7, #12]
 802a626:	4413      	add	r3, r2
 802a628:	781b      	ldrb	r3, [r3, #0]
 802a62a:	2b39      	cmp	r3, #57	@ 0x39
 802a62c:	d9cf      	bls.n	802a5ce <mg_atod+0x56>
  }
  d *= sign;
 802a62e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 802a630:	f7e5 ff90 	bl	8010554 <__aeabi_i2d>
 802a634:	4602      	mov	r2, r0
 802a636:	460b      	mov	r3, r1
 802a638:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 802a63c:	f7e5 fff4 	bl	8010628 <__aeabi_dmul>
 802a640:	4602      	mov	r2, r0
 802a642:	460b      	mov	r3, r1
 802a644:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

  // Fractional
  if (i < len && p[i] == '.') {
 802a648:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802a64a:	68bb      	ldr	r3, [r7, #8]
 802a64c:	429a      	cmp	r2, r3
 802a64e:	da59      	bge.n	802a704 <mg_atod+0x18c>
 802a650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802a652:	68fa      	ldr	r2, [r7, #12]
 802a654:	4413      	add	r3, r2
 802a656:	781b      	ldrb	r3, [r3, #0]
 802a658:	2b2e      	cmp	r3, #46	@ 0x2e
 802a65a:	d153      	bne.n	802a704 <mg_atod+0x18c>
    double frac = 0.0, base = 0.1;
 802a65c:	f04f 0200 	mov.w	r2, #0
 802a660:	f04f 0300 	mov.w	r3, #0
 802a664:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 802a668:	a375      	add	r3, pc, #468	@ (adr r3, 802a840 <mg_atod+0x2c8>)
 802a66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802a66e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    i++;
 802a672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802a674:	3301      	adds	r3, #1
 802a676:	637b      	str	r3, [r7, #52]	@ 0x34
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 802a678:	e023      	b.n	802a6c2 <mg_atod+0x14a>
      frac += base * (p[i] - '0');
 802a67a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802a67c:	68fa      	ldr	r2, [r7, #12]
 802a67e:	4413      	add	r3, r2
 802a680:	781b      	ldrb	r3, [r3, #0]
 802a682:	3b30      	subs	r3, #48	@ 0x30
 802a684:	4618      	mov	r0, r3
 802a686:	f7e5 ff65 	bl	8010554 <__aeabi_i2d>
 802a68a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 802a68e:	f7e5 ffcb 	bl	8010628 <__aeabi_dmul>
 802a692:	4602      	mov	r2, r0
 802a694:	460b      	mov	r3, r1
 802a696:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 802a69a:	f7e5 fe0f 	bl	80102bc <__adddf3>
 802a69e:	4602      	mov	r2, r0
 802a6a0:	460b      	mov	r3, r1
 802a6a2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
      base /= 10.0;
 802a6a6:	f04f 0200 	mov.w	r2, #0
 802a6aa:	4b67      	ldr	r3, [pc, #412]	@ (802a848 <mg_atod+0x2d0>)
 802a6ac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 802a6b0:	f7e6 f8e4 	bl	801087c <__aeabi_ddiv>
 802a6b4:	4602      	mov	r2, r0
 802a6b6:	460b      	mov	r3, r1
 802a6b8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 802a6bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802a6be:	3301      	adds	r3, #1
 802a6c0:	637b      	str	r3, [r7, #52]	@ 0x34
 802a6c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802a6c4:	68bb      	ldr	r3, [r7, #8]
 802a6c6:	429a      	cmp	r2, r3
 802a6c8:	da0b      	bge.n	802a6e2 <mg_atod+0x16a>
 802a6ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802a6cc:	68fa      	ldr	r2, [r7, #12]
 802a6ce:	4413      	add	r3, r2
 802a6d0:	781b      	ldrb	r3, [r3, #0]
 802a6d2:	2b2f      	cmp	r3, #47	@ 0x2f
 802a6d4:	d905      	bls.n	802a6e2 <mg_atod+0x16a>
 802a6d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802a6d8:	68fa      	ldr	r2, [r7, #12]
 802a6da:	4413      	add	r3, r2
 802a6dc:	781b      	ldrb	r3, [r3, #0]
 802a6de:	2b39      	cmp	r3, #57	@ 0x39
 802a6e0:	d9cb      	bls.n	802a67a <mg_atod+0x102>
    }
    d += frac * sign;
 802a6e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 802a6e4:	f7e5 ff36 	bl	8010554 <__aeabi_i2d>
 802a6e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 802a6ec:	f7e5 ff9c 	bl	8010628 <__aeabi_dmul>
 802a6f0:	4602      	mov	r2, r0
 802a6f2:	460b      	mov	r3, r1
 802a6f4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 802a6f8:	f7e5 fde0 	bl	80102bc <__adddf3>
 802a6fc:	4602      	mov	r2, r0
 802a6fe:	460b      	mov	r3, r1
 802a700:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  }

  // Exponential
  if (i < len && (p[i] == 'e' || p[i] == 'E')) {
 802a704:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802a706:	68bb      	ldr	r3, [r7, #8]
 802a708:	429a      	cmp	r2, r3
 802a70a:	f280 8085 	bge.w	802a818 <mg_atod+0x2a0>
 802a70e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802a710:	68fa      	ldr	r2, [r7, #12]
 802a712:	4413      	add	r3, r2
 802a714:	781b      	ldrb	r3, [r3, #0]
 802a716:	2b65      	cmp	r3, #101	@ 0x65
 802a718:	d005      	beq.n	802a726 <mg_atod+0x1ae>
 802a71a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802a71c:	68fa      	ldr	r2, [r7, #12]
 802a71e:	4413      	add	r3, r2
 802a720:	781b      	ldrb	r3, [r3, #0]
 802a722:	2b45      	cmp	r3, #69	@ 0x45
 802a724:	d178      	bne.n	802a818 <mg_atod+0x2a0>
    int j, exp = 0, minus = 0;
 802a726:	2300      	movs	r3, #0
 802a728:	61bb      	str	r3, [r7, #24]
 802a72a:	2300      	movs	r3, #0
 802a72c:	617b      	str	r3, [r7, #20]
    i++;
 802a72e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802a730:	3301      	adds	r3, #1
 802a732:	637b      	str	r3, [r7, #52]	@ 0x34
    if (i < len && p[i] == '-') minus = 1, i++;
 802a734:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802a736:	68bb      	ldr	r3, [r7, #8]
 802a738:	429a      	cmp	r2, r3
 802a73a:	da0a      	bge.n	802a752 <mg_atod+0x1da>
 802a73c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802a73e:	68fa      	ldr	r2, [r7, #12]
 802a740:	4413      	add	r3, r2
 802a742:	781b      	ldrb	r3, [r3, #0]
 802a744:	2b2d      	cmp	r3, #45	@ 0x2d
 802a746:	d104      	bne.n	802a752 <mg_atod+0x1da>
 802a748:	2301      	movs	r3, #1
 802a74a:	617b      	str	r3, [r7, #20]
 802a74c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802a74e:	3301      	adds	r3, #1
 802a750:	637b      	str	r3, [r7, #52]	@ 0x34
    if (i < len && p[i] == '+') i++;
 802a752:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802a754:	68bb      	ldr	r3, [r7, #8]
 802a756:	429a      	cmp	r2, r3
 802a758:	da19      	bge.n	802a78e <mg_atod+0x216>
 802a75a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802a75c:	68fa      	ldr	r2, [r7, #12]
 802a75e:	4413      	add	r3, r2
 802a760:	781b      	ldrb	r3, [r3, #0]
 802a762:	2b2b      	cmp	r3, #43	@ 0x2b
 802a764:	d113      	bne.n	802a78e <mg_atod+0x216>
 802a766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802a768:	3301      	adds	r3, #1
 802a76a:	637b      	str	r3, [r7, #52]	@ 0x34
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 802a76c:	e00f      	b.n	802a78e <mg_atod+0x216>
      exp = exp * 10 + (p[i++] - '0');
 802a76e:	69ba      	ldr	r2, [r7, #24]
 802a770:	4613      	mov	r3, r2
 802a772:	009b      	lsls	r3, r3, #2
 802a774:	4413      	add	r3, r2
 802a776:	005b      	lsls	r3, r3, #1
 802a778:	4619      	mov	r1, r3
 802a77a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802a77c:	1c5a      	adds	r2, r3, #1
 802a77e:	637a      	str	r2, [r7, #52]	@ 0x34
 802a780:	461a      	mov	r2, r3
 802a782:	68fb      	ldr	r3, [r7, #12]
 802a784:	4413      	add	r3, r2
 802a786:	781b      	ldrb	r3, [r3, #0]
 802a788:	3b30      	subs	r3, #48	@ 0x30
 802a78a:	440b      	add	r3, r1
 802a78c:	61bb      	str	r3, [r7, #24]
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 802a78e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802a790:	68bb      	ldr	r3, [r7, #8]
 802a792:	429a      	cmp	r2, r3
 802a794:	da0f      	bge.n	802a7b6 <mg_atod+0x23e>
 802a796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802a798:	68fa      	ldr	r2, [r7, #12]
 802a79a:	4413      	add	r3, r2
 802a79c:	781b      	ldrb	r3, [r3, #0]
 802a79e:	2b2f      	cmp	r3, #47	@ 0x2f
 802a7a0:	d909      	bls.n	802a7b6 <mg_atod+0x23e>
 802a7a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802a7a4:	68fa      	ldr	r2, [r7, #12]
 802a7a6:	4413      	add	r3, r2
 802a7a8:	781b      	ldrb	r3, [r3, #0]
 802a7aa:	2b39      	cmp	r3, #57	@ 0x39
 802a7ac:	d803      	bhi.n	802a7b6 <mg_atod+0x23e>
 802a7ae:	69bb      	ldr	r3, [r7, #24]
 802a7b0:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 802a7b4:	dbdb      	blt.n	802a76e <mg_atod+0x1f6>
    if (minus) exp = -exp;
 802a7b6:	697b      	ldr	r3, [r7, #20]
 802a7b8:	2b00      	cmp	r3, #0
 802a7ba:	d002      	beq.n	802a7c2 <mg_atod+0x24a>
 802a7bc:	69bb      	ldr	r3, [r7, #24]
 802a7be:	425b      	negs	r3, r3
 802a7c0:	61bb      	str	r3, [r7, #24]
    for (j = 0; j < exp; j++) d *= 10.0;
 802a7c2:	2300      	movs	r3, #0
 802a7c4:	61fb      	str	r3, [r7, #28]
 802a7c6:	e00d      	b.n	802a7e4 <mg_atod+0x26c>
 802a7c8:	f04f 0200 	mov.w	r2, #0
 802a7cc:	4b1e      	ldr	r3, [pc, #120]	@ (802a848 <mg_atod+0x2d0>)
 802a7ce:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 802a7d2:	f7e5 ff29 	bl	8010628 <__aeabi_dmul>
 802a7d6:	4602      	mov	r2, r0
 802a7d8:	460b      	mov	r3, r1
 802a7da:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 802a7de:	69fb      	ldr	r3, [r7, #28]
 802a7e0:	3301      	adds	r3, #1
 802a7e2:	61fb      	str	r3, [r7, #28]
 802a7e4:	69fa      	ldr	r2, [r7, #28]
 802a7e6:	69bb      	ldr	r3, [r7, #24]
 802a7e8:	429a      	cmp	r2, r3
 802a7ea:	dbed      	blt.n	802a7c8 <mg_atod+0x250>
    for (j = 0; j < -exp; j++) d /= 10.0;
 802a7ec:	2300      	movs	r3, #0
 802a7ee:	61fb      	str	r3, [r7, #28]
 802a7f0:	e00d      	b.n	802a80e <mg_atod+0x296>
 802a7f2:	f04f 0200 	mov.w	r2, #0
 802a7f6:	4b14      	ldr	r3, [pc, #80]	@ (802a848 <mg_atod+0x2d0>)
 802a7f8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 802a7fc:	f7e6 f83e 	bl	801087c <__aeabi_ddiv>
 802a800:	4602      	mov	r2, r0
 802a802:	460b      	mov	r3, r1
 802a804:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 802a808:	69fb      	ldr	r3, [r7, #28]
 802a80a:	3301      	adds	r3, #1
 802a80c:	61fb      	str	r3, [r7, #28]
 802a80e:	69bb      	ldr	r3, [r7, #24]
 802a810:	425b      	negs	r3, r3
 802a812:	69fa      	ldr	r2, [r7, #28]
 802a814:	429a      	cmp	r2, r3
 802a816:	dbec      	blt.n	802a7f2 <mg_atod+0x27a>
  }

  if (numlen != NULL) *numlen = i;
 802a818:	687b      	ldr	r3, [r7, #4]
 802a81a:	2b00      	cmp	r3, #0
 802a81c:	d002      	beq.n	802a824 <mg_atod+0x2ac>
 802a81e:	687b      	ldr	r3, [r7, #4]
 802a820:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802a822:	601a      	str	r2, [r3, #0]
  return d;
 802a824:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 802a828:	ec43 2b17 	vmov	d7, r2, r3
}
 802a82c:	eeb0 0a47 	vmov.f32	s0, s14
 802a830:	eef0 0a67 	vmov.f32	s1, s15
 802a834:	3740      	adds	r7, #64	@ 0x40
 802a836:	46bd      	mov	sp, r7
 802a838:	bd80      	pop	{r7, pc}
 802a83a:	bf00      	nop
 802a83c:	f3af 8000 	nop.w
 802a840:	9999999a 	.word	0x9999999a
 802a844:	3fb99999 	.word	0x3fb99999
 802a848:	40240000 	.word	0x40240000

0802a84c <mg_json_get>:
    if (ofs > obj.len) ofs = 0;
  }
  return ofs;
}

int mg_json_get(struct mg_str json, const char *path, int *toklen) {
 802a84c:	b590      	push	{r4, r7, lr}
 802a84e:	b09b      	sub	sp, #108	@ 0x6c
 802a850:	af00      	add	r7, sp, #0
 802a852:	f107 0408 	add.w	r4, r7, #8
 802a856:	e884 0003 	stmia.w	r4, {r0, r1}
 802a85a:	607a      	str	r2, [r7, #4]
 802a85c:	603b      	str	r3, [r7, #0]
  const char *s = json.buf;
 802a85e:	68bb      	ldr	r3, [r7, #8]
 802a860:	647b      	str	r3, [r7, #68]	@ 0x44
  int len = (int) json.len;
 802a862:	68fb      	ldr	r3, [r7, #12]
 802a864:	643b      	str	r3, [r7, #64]	@ 0x40
  enum { S_VALUE, S_KEY, S_COLON, S_COMMA_OR_EOO } expecting = S_VALUE;
 802a866:	2300      	movs	r3, #0
 802a868:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  unsigned char nesting[MG_JSON_MAX_DEPTH];
  int i = 0;             // Current offset in `s`
 802a86c:	2300      	movs	r3, #0
 802a86e:	663b      	str	r3, [r7, #96]	@ 0x60
  int j = 0;             // Offset in `s` we're looking for (return value)
 802a870:	2300      	movs	r3, #0
 802a872:	65fb      	str	r3, [r7, #92]	@ 0x5c
  int depth = 0;         // Current depth (nesting level)
 802a874:	2300      	movs	r3, #0
 802a876:	65bb      	str	r3, [r7, #88]	@ 0x58
  int ed = 0;            // Expected depth
 802a878:	2300      	movs	r3, #0
 802a87a:	657b      	str	r3, [r7, #84]	@ 0x54
  int pos = 1;           // Current position in `path`
 802a87c:	2301      	movs	r3, #1
 802a87e:	653b      	str	r3, [r7, #80]	@ 0x50
  int ci = -1, ei = -1;  // Current and expected index in array
 802a880:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802a884:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802a886:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802a88a:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (toklen) *toklen = 0;
 802a88c:	683b      	ldr	r3, [r7, #0]
 802a88e:	2b00      	cmp	r3, #0
 802a890:	d002      	beq.n	802a898 <mg_json_get+0x4c>
 802a892:	683b      	ldr	r3, [r7, #0]
 802a894:	2200      	movs	r2, #0
 802a896:	601a      	str	r2, [r3, #0]
  if (path[0] != '$') return MG_JSON_INVALID;
 802a898:	687b      	ldr	r3, [r7, #4]
 802a89a:	781b      	ldrb	r3, [r3, #0]
 802a89c:	2b24      	cmp	r3, #36	@ 0x24
 802a89e:	d002      	beq.n	802a8a6 <mg_json_get+0x5a>
 802a8a0:	f06f 0301 	mvn.w	r3, #1
 802a8a4:	e308      	b.n	802aeb8 <mg_json_get+0x66c>
    if (c != nesting[depth - 1] + 2) return MG_JSON_INVALID; \
    depth--;                                                 \
    MG_CHECKRET(x);                                          \
  } while (0)

  for (i = 0; i < len; i++) {
 802a8a6:	2300      	movs	r3, #0
 802a8a8:	663b      	str	r3, [r7, #96]	@ 0x60
 802a8aa:	e2fe      	b.n	802aeaa <mg_json_get+0x65e>
    unsigned char c = ((unsigned char *) s)[i];
 802a8ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802a8ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 802a8b0:	4413      	add	r3, r2
 802a8b2:	781b      	ldrb	r3, [r3, #0]
 802a8b4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 802a8b8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802a8bc:	2b20      	cmp	r3, #32
 802a8be:	f000 82ee 	beq.w	802ae9e <mg_json_get+0x652>
 802a8c2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802a8c6:	2b09      	cmp	r3, #9
 802a8c8:	f000 82e9 	beq.w	802ae9e <mg_json_get+0x652>
 802a8cc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802a8d0:	2b0a      	cmp	r3, #10
 802a8d2:	f000 82e4 	beq.w	802ae9e <mg_json_get+0x652>
 802a8d6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802a8da:	2b0d      	cmp	r3, #13
 802a8dc:	f000 82df 	beq.w	802ae9e <mg_json_get+0x652>
    switch (expecting) {
 802a8e0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 802a8e4:	2b03      	cmp	r3, #3
 802a8e6:	f200 82dd 	bhi.w	802aea4 <mg_json_get+0x658>
 802a8ea:	a201      	add	r2, pc, #4	@ (adr r2, 802a8f0 <mg_json_get+0xa4>)
 802a8ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a8f0:	0802a901 	.word	0x0802a901
 802a8f4:	0802abe9 	.word	0x0802abe9
 802a8f8:	0802ad77 	.word	0x0802ad77
 802a8fc:	0802ad8d 	.word	0x0802ad8d
      case S_VALUE:
        // p("V %s [%.*s] %d %d %d %d\n", path, pos, path, depth, ed, ci, ei);
        if (depth == ed) j = i;
 802a900:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802a902:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802a904:	429a      	cmp	r2, r3
 802a906:	d101      	bne.n	802a90c <mg_json_get+0xc0>
 802a908:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802a90a:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (c == '{') {
 802a90c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802a910:	2b7b      	cmp	r3, #123	@ 0x7b
 802a912:	d12b      	bne.n	802a96c <mg_json_get+0x120>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 802a914:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802a916:	2b1d      	cmp	r3, #29
 802a918:	dd02      	ble.n	802a920 <mg_json_get+0xd4>
 802a91a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802a91e:	e2cb      	b.n	802aeb8 <mg_json_get+0x66c>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 802a920:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802a922:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802a924:	429a      	cmp	r2, r3
 802a926:	d114      	bne.n	802a952 <mg_json_get+0x106>
 802a928:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802a92a:	687a      	ldr	r2, [r7, #4]
 802a92c:	4413      	add	r3, r2
 802a92e:	781b      	ldrb	r3, [r3, #0]
 802a930:	2b2e      	cmp	r3, #46	@ 0x2e
 802a932:	d10e      	bne.n	802a952 <mg_json_get+0x106>
 802a934:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802a936:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802a938:	429a      	cmp	r2, r3
 802a93a:	d10a      	bne.n	802a952 <mg_json_get+0x106>
            // If we start the object, reset array indices
            ed++, pos++, ci = ei = -1;
 802a93c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802a93e:	3301      	adds	r3, #1
 802a940:	657b      	str	r3, [r7, #84]	@ 0x54
 802a942:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802a944:	3301      	adds	r3, #1
 802a946:	653b      	str	r3, [r7, #80]	@ 0x50
 802a948:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802a94c:	64bb      	str	r3, [r7, #72]	@ 0x48
 802a94e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802a950:	64fb      	str	r3, [r7, #76]	@ 0x4c
          }
          nesting[depth++] = c;
 802a952:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802a954:	1c5a      	adds	r2, r3, #1
 802a956:	65ba      	str	r2, [r7, #88]	@ 0x58
 802a958:	3368      	adds	r3, #104	@ 0x68
 802a95a:	443b      	add	r3, r7
 802a95c:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 802a960:	f803 2c54 	strb.w	r2, [r3, #-84]
          expecting = S_KEY;
 802a964:	2301      	movs	r3, #1
 802a966:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          break;
 802a96a:	e29b      	b.n	802aea4 <mg_json_get+0x658>
        } else if (c == '[') {
 802a96c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802a970:	2b5b      	cmp	r3, #91	@ 0x5b
 802a972:	d14e      	bne.n	802aa12 <mg_json_get+0x1c6>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 802a974:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802a976:	2b1d      	cmp	r3, #29
 802a978:	dd02      	ble.n	802a980 <mg_json_get+0x134>
 802a97a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802a97e:	e29b      	b.n	802aeb8 <mg_json_get+0x66c>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 802a980:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802a982:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802a984:	429a      	cmp	r2, r3
 802a986:	d13a      	bne.n	802a9fe <mg_json_get+0x1b2>
 802a988:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802a98a:	687a      	ldr	r2, [r7, #4]
 802a98c:	4413      	add	r3, r2
 802a98e:	781b      	ldrb	r3, [r3, #0]
 802a990:	2b5b      	cmp	r3, #91	@ 0x5b
 802a992:	d134      	bne.n	802a9fe <mg_json_get+0x1b2>
 802a994:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802a996:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802a998:	429a      	cmp	r2, r3
 802a99a:	d130      	bne.n	802a9fe <mg_json_get+0x1b2>
            ed++, pos++, ci = 0;
 802a99c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802a99e:	3301      	adds	r3, #1
 802a9a0:	657b      	str	r3, [r7, #84]	@ 0x54
 802a9a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802a9a4:	3301      	adds	r3, #1
 802a9a6:	653b      	str	r3, [r7, #80]	@ 0x50
 802a9a8:	2300      	movs	r3, #0
 802a9aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 802a9ac:	2300      	movs	r3, #0
 802a9ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 802a9b0:	e010      	b.n	802a9d4 <mg_json_get+0x188>
              ei *= 10;
 802a9b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802a9b4:	4613      	mov	r3, r2
 802a9b6:	009b      	lsls	r3, r3, #2
 802a9b8:	4413      	add	r3, r2
 802a9ba:	005b      	lsls	r3, r3, #1
 802a9bc:	64bb      	str	r3, [r7, #72]	@ 0x48
              ei += path[pos] - '0';
 802a9be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802a9c0:	687a      	ldr	r2, [r7, #4]
 802a9c2:	4413      	add	r3, r2
 802a9c4:	781b      	ldrb	r3, [r3, #0]
 802a9c6:	3b30      	subs	r3, #48	@ 0x30
 802a9c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802a9ca:	4413      	add	r3, r2
 802a9cc:	64bb      	str	r3, [r7, #72]	@ 0x48
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 802a9ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802a9d0:	3301      	adds	r3, #1
 802a9d2:	653b      	str	r3, [r7, #80]	@ 0x50
 802a9d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802a9d6:	687a      	ldr	r2, [r7, #4]
 802a9d8:	4413      	add	r3, r2
 802a9da:	781b      	ldrb	r3, [r3, #0]
 802a9dc:	2b5d      	cmp	r3, #93	@ 0x5d
 802a9de:	d005      	beq.n	802a9ec <mg_json_get+0x1a0>
 802a9e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802a9e2:	687a      	ldr	r2, [r7, #4]
 802a9e4:	4413      	add	r3, r2
 802a9e6:	781b      	ldrb	r3, [r3, #0]
 802a9e8:	2b00      	cmp	r3, #0
 802a9ea:	d1e2      	bne.n	802a9b2 <mg_json_get+0x166>
            }
            if (path[pos] != 0) pos++;
 802a9ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802a9ee:	687a      	ldr	r2, [r7, #4]
 802a9f0:	4413      	add	r3, r2
 802a9f2:	781b      	ldrb	r3, [r3, #0]
 802a9f4:	2b00      	cmp	r3, #0
 802a9f6:	d002      	beq.n	802a9fe <mg_json_get+0x1b2>
 802a9f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802a9fa:	3301      	adds	r3, #1
 802a9fc:	653b      	str	r3, [r7, #80]	@ 0x50
          }
          nesting[depth++] = c;
 802a9fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802aa00:	1c5a      	adds	r2, r3, #1
 802aa02:	65ba      	str	r2, [r7, #88]	@ 0x58
 802aa04:	3368      	adds	r3, #104	@ 0x68
 802aa06:	443b      	add	r3, r7
 802aa08:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 802aa0c:	f803 2c54 	strb.w	r2, [r3, #-84]
          break;
 802aa10:	e248      	b.n	802aea4 <mg_json_get+0x658>
        } else if (c == ']' && depth > 0) {  // Empty array
 802aa12:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802aa16:	2b5d      	cmp	r3, #93	@ 0x5d
 802aa18:	d13a      	bne.n	802aa90 <mg_json_get+0x244>
 802aa1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802aa1c:	2b00      	cmp	r3, #0
 802aa1e:	dd37      	ble.n	802aa90 <mg_json_get+0x244>
          MG_EOO(']');
 802aa20:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802aa22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802aa24:	429a      	cmp	r2, r3
 802aa26:	d106      	bne.n	802aa36 <mg_json_get+0x1ea>
 802aa28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802aa2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802aa2c:	429a      	cmp	r2, r3
 802aa2e:	d002      	beq.n	802aa36 <mg_json_get+0x1ea>
 802aa30:	f06f 0302 	mvn.w	r3, #2
 802aa34:	e240      	b.n	802aeb8 <mg_json_get+0x66c>
 802aa36:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 802aa3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802aa3c:	3b01      	subs	r3, #1
 802aa3e:	3368      	adds	r3, #104	@ 0x68
 802aa40:	443b      	add	r3, r7
 802aa42:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 802aa46:	3302      	adds	r3, #2
 802aa48:	429a      	cmp	r2, r3
 802aa4a:	d002      	beq.n	802aa52 <mg_json_get+0x206>
 802aa4c:	f06f 0301 	mvn.w	r3, #1
 802aa50:	e232      	b.n	802aeb8 <mg_json_get+0x66c>
 802aa52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802aa54:	3b01      	subs	r3, #1
 802aa56:	65bb      	str	r3, [r7, #88]	@ 0x58
 802aa58:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802aa5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802aa5c:	429a      	cmp	r2, r3
 802aa5e:	f040 809c 	bne.w	802ab9a <mg_json_get+0x34e>
 802aa62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802aa64:	687a      	ldr	r2, [r7, #4]
 802aa66:	4413      	add	r3, r2
 802aa68:	781b      	ldrb	r3, [r3, #0]
 802aa6a:	2b00      	cmp	r3, #0
 802aa6c:	f040 8095 	bne.w	802ab9a <mg_json_get+0x34e>
 802aa70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802aa72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802aa74:	429a      	cmp	r2, r3
 802aa76:	f040 8090 	bne.w	802ab9a <mg_json_get+0x34e>
 802aa7a:	683b      	ldr	r3, [r7, #0]
 802aa7c:	2b00      	cmp	r3, #0
 802aa7e:	d005      	beq.n	802aa8c <mg_json_get+0x240>
 802aa80:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 802aa82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802aa84:	1ad3      	subs	r3, r2, r3
 802aa86:	1c5a      	adds	r2, r3, #1
 802aa88:	683b      	ldr	r3, [r7, #0]
 802aa8a:	601a      	str	r2, [r3, #0]
 802aa8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802aa8e:	e213      	b.n	802aeb8 <mg_json_get+0x66c>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 802aa90:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802aa94:	2b74      	cmp	r3, #116	@ 0x74
 802aa96:	d113      	bne.n	802aac0 <mg_json_get+0x274>
 802aa98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802aa9a:	3303      	adds	r3, #3
 802aa9c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802aa9e:	429a      	cmp	r2, r3
 802aaa0:	dd0e      	ble.n	802aac0 <mg_json_get+0x274>
 802aaa2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802aaa4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 802aaa6:	4413      	add	r3, r2
 802aaa8:	2204      	movs	r2, #4
 802aaaa:	4998      	ldr	r1, [pc, #608]	@ (802ad0c <mg_json_get+0x4c0>)
 802aaac:	4618      	mov	r0, r3
 802aaae:	f00b f90b 	bl	8035cc8 <memcmp>
 802aab2:	4603      	mov	r3, r0
 802aab4:	2b00      	cmp	r3, #0
 802aab6:	d103      	bne.n	802aac0 <mg_json_get+0x274>
          i += 3;
 802aab8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802aaba:	3303      	adds	r3, #3
 802aabc:	663b      	str	r3, [r7, #96]	@ 0x60
 802aabe:	e06c      	b.n	802ab9a <mg_json_get+0x34e>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 802aac0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802aac4:	2b6e      	cmp	r3, #110	@ 0x6e
 802aac6:	d113      	bne.n	802aaf0 <mg_json_get+0x2a4>
 802aac8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802aaca:	3303      	adds	r3, #3
 802aacc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802aace:	429a      	cmp	r2, r3
 802aad0:	dd0e      	ble.n	802aaf0 <mg_json_get+0x2a4>
 802aad2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802aad4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 802aad6:	4413      	add	r3, r2
 802aad8:	2204      	movs	r2, #4
 802aada:	498d      	ldr	r1, [pc, #564]	@ (802ad10 <mg_json_get+0x4c4>)
 802aadc:	4618      	mov	r0, r3
 802aade:	f00b f8f3 	bl	8035cc8 <memcmp>
 802aae2:	4603      	mov	r3, r0
 802aae4:	2b00      	cmp	r3, #0
 802aae6:	d103      	bne.n	802aaf0 <mg_json_get+0x2a4>
          i += 3;
 802aae8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802aaea:	3303      	adds	r3, #3
 802aaec:	663b      	str	r3, [r7, #96]	@ 0x60
 802aaee:	e054      	b.n	802ab9a <mg_json_get+0x34e>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 802aaf0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802aaf4:	2b66      	cmp	r3, #102	@ 0x66
 802aaf6:	d113      	bne.n	802ab20 <mg_json_get+0x2d4>
 802aaf8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802aafa:	3304      	adds	r3, #4
 802aafc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802aafe:	429a      	cmp	r2, r3
 802ab00:	dd0e      	ble.n	802ab20 <mg_json_get+0x2d4>
 802ab02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802ab04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 802ab06:	4413      	add	r3, r2
 802ab08:	2205      	movs	r2, #5
 802ab0a:	4982      	ldr	r1, [pc, #520]	@ (802ad14 <mg_json_get+0x4c8>)
 802ab0c:	4618      	mov	r0, r3
 802ab0e:	f00b f8db 	bl	8035cc8 <memcmp>
 802ab12:	4603      	mov	r3, r0
 802ab14:	2b00      	cmp	r3, #0
 802ab16:	d103      	bne.n	802ab20 <mg_json_get+0x2d4>
          i += 4;
 802ab18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802ab1a:	3304      	adds	r3, #4
 802ab1c:	663b      	str	r3, [r7, #96]	@ 0x60
 802ab1e:	e03c      	b.n	802ab9a <mg_json_get+0x34e>
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 802ab20:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802ab24:	2b2d      	cmp	r3, #45	@ 0x2d
 802ab26:	d007      	beq.n	802ab38 <mg_json_get+0x2ec>
 802ab28:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802ab2c:	2b2f      	cmp	r3, #47	@ 0x2f
 802ab2e:	d916      	bls.n	802ab5e <mg_json_get+0x312>
 802ab30:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802ab34:	2b39      	cmp	r3, #57	@ 0x39
 802ab36:	d812      	bhi.n	802ab5e <mg_json_get+0x312>
          int numlen = 0;
 802ab38:	2300      	movs	r3, #0
 802ab3a:	613b      	str	r3, [r7, #16]
          mg_atod(&s[i], len - i, &numlen);
 802ab3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802ab3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 802ab40:	18d0      	adds	r0, r2, r3
 802ab42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802ab44:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802ab46:	1ad3      	subs	r3, r2, r3
 802ab48:	f107 0210 	add.w	r2, r7, #16
 802ab4c:	4619      	mov	r1, r3
 802ab4e:	f7ff fd13 	bl	802a578 <mg_atod>
          i += numlen - 1;
 802ab52:	693b      	ldr	r3, [r7, #16]
 802ab54:	3b01      	subs	r3, #1
 802ab56:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 802ab58:	4413      	add	r3, r2
 802ab5a:	663b      	str	r3, [r7, #96]	@ 0x60
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 802ab5c:	e01d      	b.n	802ab9a <mg_json_get+0x34e>
        } else if (c == '"') {
 802ab5e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802ab62:	2b22      	cmp	r3, #34	@ 0x22
 802ab64:	d116      	bne.n	802ab94 <mg_json_get+0x348>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 802ab66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802ab68:	3301      	adds	r3, #1
 802ab6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 802ab6c:	18d0      	adds	r0, r2, r3
 802ab6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802ab70:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802ab72:	1ad3      	subs	r3, r2, r3
 802ab74:	3b01      	subs	r3, #1
 802ab76:	4619      	mov	r1, r3
 802ab78:	f7ff fcba 	bl	802a4f0 <mg_pass_string>
 802ab7c:	6378      	str	r0, [r7, #52]	@ 0x34
          if (n < 0) return n;
 802ab7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ab80:	2b00      	cmp	r3, #0
 802ab82:	da01      	bge.n	802ab88 <mg_json_get+0x33c>
 802ab84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ab86:	e197      	b.n	802aeb8 <mg_json_get+0x66c>
          i += n + 1;
 802ab88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ab8a:	3301      	adds	r3, #1
 802ab8c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 802ab8e:	4413      	add	r3, r2
 802ab90:	663b      	str	r3, [r7, #96]	@ 0x60
 802ab92:	e002      	b.n	802ab9a <mg_json_get+0x34e>
        } else {
          return MG_JSON_INVALID;
 802ab94:	f06f 0301 	mvn.w	r3, #1
 802ab98:	e18e      	b.n	802aeb8 <mg_json_get+0x66c>
        }
        MG_CHECKRET('V');
 802ab9a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802ab9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802ab9e:	429a      	cmp	r2, r3
 802aba0:	d114      	bne.n	802abcc <mg_json_get+0x380>
 802aba2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802aba4:	687a      	ldr	r2, [r7, #4]
 802aba6:	4413      	add	r3, r2
 802aba8:	781b      	ldrb	r3, [r3, #0]
 802abaa:	2b00      	cmp	r3, #0
 802abac:	d10e      	bne.n	802abcc <mg_json_get+0x380>
 802abae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802abb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802abb2:	429a      	cmp	r2, r3
 802abb4:	d10a      	bne.n	802abcc <mg_json_get+0x380>
 802abb6:	683b      	ldr	r3, [r7, #0]
 802abb8:	2b00      	cmp	r3, #0
 802abba:	d005      	beq.n	802abc8 <mg_json_get+0x37c>
 802abbc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 802abbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802abc0:	1ad3      	subs	r3, r2, r3
 802abc2:	1c5a      	adds	r2, r3, #1
 802abc4:	683b      	ldr	r3, [r7, #0]
 802abc6:	601a      	str	r2, [r3, #0]
 802abc8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802abca:	e175      	b.n	802aeb8 <mg_json_get+0x66c>
        if (depth == ed && ei >= 0) ci++;
 802abcc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802abce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802abd0:	429a      	cmp	r2, r3
 802abd2:	d105      	bne.n	802abe0 <mg_json_get+0x394>
 802abd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802abd6:	2b00      	cmp	r3, #0
 802abd8:	db02      	blt.n	802abe0 <mg_json_get+0x394>
 802abda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802abdc:	3301      	adds	r3, #1
 802abde:	64fb      	str	r3, [r7, #76]	@ 0x4c
        expecting = S_COMMA_OR_EOO;
 802abe0:	2303      	movs	r3, #3
 802abe2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        break;
 802abe6:	e15d      	b.n	802aea4 <mg_json_get+0x658>

      case S_KEY:
        if (c == '"') {
 802abe8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802abec:	2b22      	cmp	r3, #34	@ 0x22
 802abee:	d170      	bne.n	802acd2 <mg_json_get+0x486>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 802abf0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802abf2:	3301      	adds	r3, #1
 802abf4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 802abf6:	18d0      	adds	r0, r2, r3
 802abf8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802abfa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802abfc:	1ad3      	subs	r3, r2, r3
 802abfe:	3b01      	subs	r3, #1
 802ac00:	4619      	mov	r1, r3
 802ac02:	f7ff fc75 	bl	802a4f0 <mg_pass_string>
 802ac06:	63b8      	str	r0, [r7, #56]	@ 0x38
          if (n < 0) return n;
 802ac08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802ac0a:	2b00      	cmp	r3, #0
 802ac0c:	da01      	bge.n	802ac12 <mg_json_get+0x3c6>
 802ac0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802ac10:	e152      	b.n	802aeb8 <mg_json_get+0x66c>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 802ac12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802ac14:	1c5a      	adds	r2, r3, #1
 802ac16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802ac18:	4413      	add	r3, r2
 802ac1a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802ac1c:	429a      	cmp	r2, r3
 802ac1e:	dc02      	bgt.n	802ac26 <mg_json_get+0x3da>
 802ac20:	f06f 0302 	mvn.w	r3, #2
 802ac24:	e148      	b.n	802aeb8 <mg_json_get+0x66c>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 802ac26:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802ac28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802ac2a:	429a      	cmp	r2, r3
 802ac2c:	da02      	bge.n	802ac34 <mg_json_get+0x3e8>
 802ac2e:	f06f 0302 	mvn.w	r3, #2
 802ac32:	e141      	b.n	802aeb8 <mg_json_get+0x66c>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 802ac34:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802ac36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802ac38:	429a      	cmp	r2, r3
 802ac3a:	d109      	bne.n	802ac50 <mg_json_get+0x404>
 802ac3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802ac3e:	3b01      	subs	r3, #1
 802ac40:	687a      	ldr	r2, [r7, #4]
 802ac42:	4413      	add	r3, r2
 802ac44:	781b      	ldrb	r3, [r3, #0]
 802ac46:	2b2e      	cmp	r3, #46	@ 0x2e
 802ac48:	d002      	beq.n	802ac50 <mg_json_get+0x404>
 802ac4a:	f06f 0302 	mvn.w	r3, #2
 802ac4e:	e133      	b.n	802aeb8 <mg_json_get+0x66c>
          // printf("K %s [%.*s] [%.*s] %d %d %d %d %d\n", path, pos, path, n,
          //        &s[i + 1], n, depth, ed, ci, ei);
          //  NOTE(cpq): in the check sequence below is important.
          //  strncmp() must go first: it fails fast if the remaining length
          //  of the path is smaller than `n`.
          if (depth == ed && path[pos - 1] == '.' &&
 802ac50:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802ac52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802ac54:	429a      	cmp	r2, r3
 802ac56:	d133      	bne.n	802acc0 <mg_json_get+0x474>
 802ac58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802ac5a:	3b01      	subs	r3, #1
 802ac5c:	687a      	ldr	r2, [r7, #4]
 802ac5e:	4413      	add	r3, r2
 802ac60:	781b      	ldrb	r3, [r3, #0]
 802ac62:	2b2e      	cmp	r3, #46	@ 0x2e
 802ac64:	d12c      	bne.n	802acc0 <mg_json_get+0x474>
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 802ac66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802ac68:	3301      	adds	r3, #1
 802ac6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 802ac6c:	18d0      	adds	r0, r2, r3
 802ac6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802ac70:	687a      	ldr	r2, [r7, #4]
 802ac72:	4413      	add	r3, r2
 802ac74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 802ac76:	4619      	mov	r1, r3
 802ac78:	f00b f8ef 	bl	8035e5a <strncmp>
 802ac7c:	4603      	mov	r3, r0
          if (depth == ed && path[pos - 1] == '.' &&
 802ac7e:	2b00      	cmp	r3, #0
 802ac80:	d11e      	bne.n	802acc0 <mg_json_get+0x474>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 802ac82:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802ac84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802ac86:	4413      	add	r3, r2
 802ac88:	461a      	mov	r2, r3
 802ac8a:	687b      	ldr	r3, [r7, #4]
 802ac8c:	4413      	add	r3, r2
 802ac8e:	781b      	ldrb	r3, [r3, #0]
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 802ac90:	2b00      	cmp	r3, #0
 802ac92:	d011      	beq.n	802acb8 <mg_json_get+0x46c>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 802ac94:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802ac96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802ac98:	4413      	add	r3, r2
 802ac9a:	461a      	mov	r2, r3
 802ac9c:	687b      	ldr	r3, [r7, #4]
 802ac9e:	4413      	add	r3, r2
 802aca0:	781b      	ldrb	r3, [r3, #0]
 802aca2:	2b2e      	cmp	r3, #46	@ 0x2e
 802aca4:	d008      	beq.n	802acb8 <mg_json_get+0x46c>
               path[pos + n] == '[')) {
 802aca6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802aca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802acaa:	4413      	add	r3, r2
 802acac:	461a      	mov	r2, r3
 802acae:	687b      	ldr	r3, [r7, #4]
 802acb0:	4413      	add	r3, r2
 802acb2:	781b      	ldrb	r3, [r3, #0]
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 802acb4:	2b5b      	cmp	r3, #91	@ 0x5b
 802acb6:	d103      	bne.n	802acc0 <mg_json_get+0x474>
            pos += n;
 802acb8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802acba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802acbc:	4413      	add	r3, r2
 802acbe:	653b      	str	r3, [r7, #80]	@ 0x50
          }
          i += n + 1;
 802acc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802acc2:	3301      	adds	r3, #1
 802acc4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 802acc6:	4413      	add	r3, r2
 802acc8:	663b      	str	r3, [r7, #96]	@ 0x60
          expecting = S_COLON;
 802acca:	2302      	movs	r3, #2
 802accc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          expecting = S_COMMA_OR_EOO;
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 802acd0:	e0e7      	b.n	802aea2 <mg_json_get+0x656>
        } else if (c == '}') {  // Empty object
 802acd2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802acd6:	2b7d      	cmp	r3, #125	@ 0x7d
 802acd8:	d14a      	bne.n	802ad70 <mg_json_get+0x524>
          MG_EOO('}');
 802acda:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802acdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802acde:	429a      	cmp	r2, r3
 802ace0:	d106      	bne.n	802acf0 <mg_json_get+0x4a4>
 802ace2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802ace4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802ace6:	429a      	cmp	r2, r3
 802ace8:	d002      	beq.n	802acf0 <mg_json_get+0x4a4>
 802acea:	f06f 0302 	mvn.w	r3, #2
 802acee:	e0e3      	b.n	802aeb8 <mg_json_get+0x66c>
 802acf0:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 802acf4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802acf6:	3b01      	subs	r3, #1
 802acf8:	3368      	adds	r3, #104	@ 0x68
 802acfa:	443b      	add	r3, r7
 802acfc:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 802ad00:	3302      	adds	r3, #2
 802ad02:	429a      	cmp	r2, r3
 802ad04:	d008      	beq.n	802ad18 <mg_json_get+0x4cc>
 802ad06:	f06f 0301 	mvn.w	r3, #1
 802ad0a:	e0d5      	b.n	802aeb8 <mg_json_get+0x66c>
 802ad0c:	080429bc 	.word	0x080429bc
 802ad10:	080429c4 	.word	0x080429c4
 802ad14:	080429cc 	.word	0x080429cc
 802ad18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802ad1a:	3b01      	subs	r3, #1
 802ad1c:	65bb      	str	r3, [r7, #88]	@ 0x58
 802ad1e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802ad20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802ad22:	429a      	cmp	r2, r3
 802ad24:	d114      	bne.n	802ad50 <mg_json_get+0x504>
 802ad26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802ad28:	687a      	ldr	r2, [r7, #4]
 802ad2a:	4413      	add	r3, r2
 802ad2c:	781b      	ldrb	r3, [r3, #0]
 802ad2e:	2b00      	cmp	r3, #0
 802ad30:	d10e      	bne.n	802ad50 <mg_json_get+0x504>
 802ad32:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802ad34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802ad36:	429a      	cmp	r2, r3
 802ad38:	d10a      	bne.n	802ad50 <mg_json_get+0x504>
 802ad3a:	683b      	ldr	r3, [r7, #0]
 802ad3c:	2b00      	cmp	r3, #0
 802ad3e:	d005      	beq.n	802ad4c <mg_json_get+0x500>
 802ad40:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 802ad42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802ad44:	1ad3      	subs	r3, r2, r3
 802ad46:	1c5a      	adds	r2, r3, #1
 802ad48:	683b      	ldr	r3, [r7, #0]
 802ad4a:	601a      	str	r2, [r3, #0]
 802ad4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802ad4e:	e0b3      	b.n	802aeb8 <mg_json_get+0x66c>
          expecting = S_COMMA_OR_EOO;
 802ad50:	2303      	movs	r3, #3
 802ad52:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          if (depth == ed && ei >= 0) ci++;
 802ad56:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802ad58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802ad5a:	429a      	cmp	r2, r3
 802ad5c:	f040 80a1 	bne.w	802aea2 <mg_json_get+0x656>
 802ad60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802ad62:	2b00      	cmp	r3, #0
 802ad64:	f2c0 809d 	blt.w	802aea2 <mg_json_get+0x656>
 802ad68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802ad6a:	3301      	adds	r3, #1
 802ad6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
        break;
 802ad6e:	e098      	b.n	802aea2 <mg_json_get+0x656>
          return MG_JSON_INVALID;
 802ad70:	f06f 0301 	mvn.w	r3, #1
 802ad74:	e0a0      	b.n	802aeb8 <mg_json_get+0x66c>

      case S_COLON:
        if (c == ':') {
 802ad76:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802ad7a:	2b3a      	cmp	r3, #58	@ 0x3a
 802ad7c:	d103      	bne.n	802ad86 <mg_json_get+0x53a>
          expecting = S_VALUE;
 802ad7e:	2300      	movs	r3, #0
 802ad80:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        } else {
          return MG_JSON_INVALID;
        }
        break;
 802ad84:	e08e      	b.n	802aea4 <mg_json_get+0x658>
          return MG_JSON_INVALID;
 802ad86:	f06f 0301 	mvn.w	r3, #1
 802ad8a:	e095      	b.n	802aeb8 <mg_json_get+0x66c>

      case S_COMMA_OR_EOO:
        if (depth <= 0) {
 802ad8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802ad8e:	2b00      	cmp	r3, #0
 802ad90:	dc02      	bgt.n	802ad98 <mg_json_get+0x54c>
          return MG_JSON_INVALID;
 802ad92:	f06f 0301 	mvn.w	r3, #1
 802ad96:	e08f      	b.n	802aeb8 <mg_json_get+0x66c>
        } else if (c == ',') {
 802ad98:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802ad9c:	2b2c      	cmp	r3, #44	@ 0x2c
 802ad9e:	d10d      	bne.n	802adbc <mg_json_get+0x570>
          expecting = (nesting[depth - 1] == '{') ? S_KEY : S_VALUE;
 802ada0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802ada2:	3b01      	subs	r3, #1
 802ada4:	3368      	adds	r3, #104	@ 0x68
 802ada6:	443b      	add	r3, r7
 802ada8:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 802adac:	2b7b      	cmp	r3, #123	@ 0x7b
 802adae:	bf0c      	ite	eq
 802adb0:	2301      	moveq	r3, #1
 802adb2:	2300      	movne	r3, #0
 802adb4:	b2db      	uxtb	r3, r3
 802adb6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          MG_EOO('O');
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 802adba:	e073      	b.n	802aea4 <mg_json_get+0x658>
        } else if (c == ']' || c == '}') {
 802adbc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802adc0:	2b5d      	cmp	r3, #93	@ 0x5d
 802adc2:	d003      	beq.n	802adcc <mg_json_get+0x580>
 802adc4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802adc8:	2b7d      	cmp	r3, #125	@ 0x7d
 802adca:	d163      	bne.n	802ae94 <mg_json_get+0x648>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 802adcc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802adce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802add0:	429a      	cmp	r2, r3
 802add2:	d10d      	bne.n	802adf0 <mg_json_get+0x5a4>
 802add4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802add8:	2b7d      	cmp	r3, #125	@ 0x7d
 802adda:	d109      	bne.n	802adf0 <mg_json_get+0x5a4>
 802addc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802adde:	3b01      	subs	r3, #1
 802ade0:	687a      	ldr	r2, [r7, #4]
 802ade2:	4413      	add	r3, r2
 802ade4:	781b      	ldrb	r3, [r3, #0]
 802ade6:	2b2e      	cmp	r3, #46	@ 0x2e
 802ade8:	d102      	bne.n	802adf0 <mg_json_get+0x5a4>
            return MG_JSON_NOT_FOUND;
 802adea:	f06f 0302 	mvn.w	r3, #2
 802adee:	e063      	b.n	802aeb8 <mg_json_get+0x66c>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 802adf0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802adf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802adf4:	429a      	cmp	r2, r3
 802adf6:	d10d      	bne.n	802ae14 <mg_json_get+0x5c8>
 802adf8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802adfc:	2b5d      	cmp	r3, #93	@ 0x5d
 802adfe:	d109      	bne.n	802ae14 <mg_json_get+0x5c8>
 802ae00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802ae02:	3b01      	subs	r3, #1
 802ae04:	687a      	ldr	r2, [r7, #4]
 802ae06:	4413      	add	r3, r2
 802ae08:	781b      	ldrb	r3, [r3, #0]
 802ae0a:	2b2c      	cmp	r3, #44	@ 0x2c
 802ae0c:	d102      	bne.n	802ae14 <mg_json_get+0x5c8>
            return MG_JSON_NOT_FOUND;
 802ae0e:	f06f 0302 	mvn.w	r3, #2
 802ae12:	e051      	b.n	802aeb8 <mg_json_get+0x66c>
          MG_EOO('O');
 802ae14:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802ae16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802ae18:	429a      	cmp	r2, r3
 802ae1a:	d106      	bne.n	802ae2a <mg_json_get+0x5de>
 802ae1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802ae1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802ae20:	429a      	cmp	r2, r3
 802ae22:	d002      	beq.n	802ae2a <mg_json_get+0x5de>
 802ae24:	f06f 0302 	mvn.w	r3, #2
 802ae28:	e046      	b.n	802aeb8 <mg_json_get+0x66c>
 802ae2a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 802ae2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802ae30:	3b01      	subs	r3, #1
 802ae32:	3368      	adds	r3, #104	@ 0x68
 802ae34:	443b      	add	r3, r7
 802ae36:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 802ae3a:	3302      	adds	r3, #2
 802ae3c:	429a      	cmp	r2, r3
 802ae3e:	d002      	beq.n	802ae46 <mg_json_get+0x5fa>
 802ae40:	f06f 0301 	mvn.w	r3, #1
 802ae44:	e038      	b.n	802aeb8 <mg_json_get+0x66c>
 802ae46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802ae48:	3b01      	subs	r3, #1
 802ae4a:	65bb      	str	r3, [r7, #88]	@ 0x58
 802ae4c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802ae4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802ae50:	429a      	cmp	r2, r3
 802ae52:	d114      	bne.n	802ae7e <mg_json_get+0x632>
 802ae54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802ae56:	687a      	ldr	r2, [r7, #4]
 802ae58:	4413      	add	r3, r2
 802ae5a:	781b      	ldrb	r3, [r3, #0]
 802ae5c:	2b00      	cmp	r3, #0
 802ae5e:	d10e      	bne.n	802ae7e <mg_json_get+0x632>
 802ae60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802ae62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802ae64:	429a      	cmp	r2, r3
 802ae66:	d10a      	bne.n	802ae7e <mg_json_get+0x632>
 802ae68:	683b      	ldr	r3, [r7, #0]
 802ae6a:	2b00      	cmp	r3, #0
 802ae6c:	d005      	beq.n	802ae7a <mg_json_get+0x62e>
 802ae6e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 802ae70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802ae72:	1ad3      	subs	r3, r2, r3
 802ae74:	1c5a      	adds	r2, r3, #1
 802ae76:	683b      	ldr	r3, [r7, #0]
 802ae78:	601a      	str	r2, [r3, #0]
 802ae7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802ae7c:	e01c      	b.n	802aeb8 <mg_json_get+0x66c>
          if (depth == ed && ei >= 0) ci++;
 802ae7e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802ae80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802ae82:	429a      	cmp	r2, r3
 802ae84:	d109      	bne.n	802ae9a <mg_json_get+0x64e>
 802ae86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802ae88:	2b00      	cmp	r3, #0
 802ae8a:	db06      	blt.n	802ae9a <mg_json_get+0x64e>
 802ae8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802ae8e:	3301      	adds	r3, #1
 802ae90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802ae92:	e002      	b.n	802ae9a <mg_json_get+0x64e>
          return MG_JSON_INVALID;
 802ae94:	f06f 0301 	mvn.w	r3, #1
 802ae98:	e00e      	b.n	802aeb8 <mg_json_get+0x66c>
          if (depth == ed && ei >= 0) ci++;
 802ae9a:	bf00      	nop
        break;
 802ae9c:	e002      	b.n	802aea4 <mg_json_get+0x658>
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 802ae9e:	bf00      	nop
 802aea0:	e000      	b.n	802aea4 <mg_json_get+0x658>
        break;
 802aea2:	bf00      	nop
  for (i = 0; i < len; i++) {
 802aea4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802aea6:	3301      	adds	r3, #1
 802aea8:	663b      	str	r3, [r7, #96]	@ 0x60
 802aeaa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 802aeac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802aeae:	429a      	cmp	r2, r3
 802aeb0:	f6ff acfc 	blt.w	802a8ac <mg_json_get+0x60>
    }
  }
  return MG_JSON_NOT_FOUND;
 802aeb4:	f06f 0302 	mvn.w	r3, #2
}
 802aeb8:	4618      	mov	r0, r3
 802aeba:	376c      	adds	r7, #108	@ 0x6c
 802aebc:	46bd      	mov	sp, r7
 802aebe:	bd90      	pop	{r4, r7, pc}

0802aec0 <mg_json_get_num>:
  int len = 0, ofs = mg_json_get(json, path, &len);
  return mg_str_n(ofs < 0 ? NULL : json.buf + ofs,
                  (size_t) (len < 0 ? 0 : len));
}

bool mg_json_get_num(struct mg_str json, const char *path, double *v) {
 802aec0:	b590      	push	{r4, r7, lr}
 802aec2:	b089      	sub	sp, #36	@ 0x24
 802aec4:	af00      	add	r7, sp, #0
 802aec6:	f107 0408 	add.w	r4, r7, #8
 802aeca:	e884 0003 	stmia.w	r4, {r0, r1}
 802aece:	607a      	str	r2, [r7, #4]
 802aed0:	603b      	str	r3, [r7, #0]
  int n, toklen, found = 0;
 802aed2:	2300      	movs	r3, #0
 802aed4:	61fb      	str	r3, [r7, #28]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 802aed6:	f107 0314 	add.w	r3, r7, #20
 802aeda:	687a      	ldr	r2, [r7, #4]
 802aedc:	f107 0108 	add.w	r1, r7, #8
 802aee0:	c903      	ldmia	r1, {r0, r1}
 802aee2:	f7ff fcb3 	bl	802a84c <mg_json_get>
 802aee6:	61b8      	str	r0, [r7, #24]
 802aee8:	69bb      	ldr	r3, [r7, #24]
 802aeea:	2b00      	cmp	r3, #0
 802aeec:	db25      	blt.n	802af3a <mg_json_get_num+0x7a>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 802aeee:	68ba      	ldr	r2, [r7, #8]
 802aef0:	69bb      	ldr	r3, [r7, #24]
 802aef2:	4413      	add	r3, r2
 802aef4:	781b      	ldrb	r3, [r3, #0]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 802aef6:	2b2d      	cmp	r3, #45	@ 0x2d
 802aef8:	d00b      	beq.n	802af12 <mg_json_get_num+0x52>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 802aefa:	68ba      	ldr	r2, [r7, #8]
 802aefc:	69bb      	ldr	r3, [r7, #24]
 802aefe:	4413      	add	r3, r2
 802af00:	781b      	ldrb	r3, [r3, #0]
 802af02:	2b2f      	cmp	r3, #47	@ 0x2f
 802af04:	d919      	bls.n	802af3a <mg_json_get_num+0x7a>
 802af06:	68ba      	ldr	r2, [r7, #8]
 802af08:	69bb      	ldr	r3, [r7, #24]
 802af0a:	4413      	add	r3, r2
 802af0c:	781b      	ldrb	r3, [r3, #0]
 802af0e:	2b39      	cmp	r3, #57	@ 0x39
 802af10:	d813      	bhi.n	802af3a <mg_json_get_num+0x7a>
    if (v != NULL) *v = mg_atod(json.buf + n, toklen, NULL);
 802af12:	683b      	ldr	r3, [r7, #0]
 802af14:	2b00      	cmp	r3, #0
 802af16:	d00e      	beq.n	802af36 <mg_json_get_num+0x76>
 802af18:	68ba      	ldr	r2, [r7, #8]
 802af1a:	69bb      	ldr	r3, [r7, #24]
 802af1c:	4413      	add	r3, r2
 802af1e:	6979      	ldr	r1, [r7, #20]
 802af20:	2200      	movs	r2, #0
 802af22:	4618      	mov	r0, r3
 802af24:	f7ff fb28 	bl	802a578 <mg_atod>
 802af28:	eeb0 7a40 	vmov.f32	s14, s0
 802af2c:	eef0 7a60 	vmov.f32	s15, s1
 802af30:	683b      	ldr	r3, [r7, #0]
 802af32:	ed83 7b00 	vstr	d7, [r3]
    found = 1;
 802af36:	2301      	movs	r3, #1
 802af38:	61fb      	str	r3, [r7, #28]
  }
  return found;
 802af3a:	69fb      	ldr	r3, [r7, #28]
 802af3c:	2b00      	cmp	r3, #0
 802af3e:	bf14      	ite	ne
 802af40:	2301      	movne	r3, #1
 802af42:	2300      	moveq	r3, #0
 802af44:	b2db      	uxtb	r3, r3
}
 802af46:	4618      	mov	r0, r3
 802af48:	3724      	adds	r7, #36	@ 0x24
 802af4a:	46bd      	mov	sp, r7
 802af4c:	bd90      	pop	{r4, r7, pc}

0802af4e <mg_json_get_bool>:

bool mg_json_get_bool(struct mg_str json, const char *path, bool *v) {
 802af4e:	b590      	push	{r4, r7, lr}
 802af50:	b087      	sub	sp, #28
 802af52:	af00      	add	r7, sp, #0
 802af54:	f107 0408 	add.w	r4, r7, #8
 802af58:	e884 0003 	stmia.w	r4, {r0, r1}
 802af5c:	607a      	str	r2, [r7, #4]
 802af5e:	603b      	str	r3, [r7, #0]
  int found = 0, off = mg_json_get(json, path, NULL);
 802af60:	2300      	movs	r3, #0
 802af62:	617b      	str	r3, [r7, #20]
 802af64:	2300      	movs	r3, #0
 802af66:	687a      	ldr	r2, [r7, #4]
 802af68:	f107 0108 	add.w	r1, r7, #8
 802af6c:	c903      	ldmia	r1, {r0, r1}
 802af6e:	f7ff fc6d 	bl	802a84c <mg_json_get>
 802af72:	6138      	str	r0, [r7, #16]
  if (off >= 0 && (json.buf[off] == 't' || json.buf[off] == 'f')) {
 802af74:	693b      	ldr	r3, [r7, #16]
 802af76:	2b00      	cmp	r3, #0
 802af78:	db1b      	blt.n	802afb2 <mg_json_get_bool+0x64>
 802af7a:	68ba      	ldr	r2, [r7, #8]
 802af7c:	693b      	ldr	r3, [r7, #16]
 802af7e:	4413      	add	r3, r2
 802af80:	781b      	ldrb	r3, [r3, #0]
 802af82:	2b74      	cmp	r3, #116	@ 0x74
 802af84:	d005      	beq.n	802af92 <mg_json_get_bool+0x44>
 802af86:	68ba      	ldr	r2, [r7, #8]
 802af88:	693b      	ldr	r3, [r7, #16]
 802af8a:	4413      	add	r3, r2
 802af8c:	781b      	ldrb	r3, [r3, #0]
 802af8e:	2b66      	cmp	r3, #102	@ 0x66
 802af90:	d10f      	bne.n	802afb2 <mg_json_get_bool+0x64>
    if (v != NULL) *v = json.buf[off] == 't';
 802af92:	683b      	ldr	r3, [r7, #0]
 802af94:	2b00      	cmp	r3, #0
 802af96:	d00a      	beq.n	802afae <mg_json_get_bool+0x60>
 802af98:	68ba      	ldr	r2, [r7, #8]
 802af9a:	693b      	ldr	r3, [r7, #16]
 802af9c:	4413      	add	r3, r2
 802af9e:	781b      	ldrb	r3, [r3, #0]
 802afa0:	2b74      	cmp	r3, #116	@ 0x74
 802afa2:	bf0c      	ite	eq
 802afa4:	2301      	moveq	r3, #1
 802afa6:	2300      	movne	r3, #0
 802afa8:	b2da      	uxtb	r2, r3
 802afaa:	683b      	ldr	r3, [r7, #0]
 802afac:	701a      	strb	r2, [r3, #0]
    found = 1;
 802afae:	2301      	movs	r3, #1
 802afb0:	617b      	str	r3, [r7, #20]
  }
  return found;
 802afb2:	697b      	ldr	r3, [r7, #20]
 802afb4:	2b00      	cmp	r3, #0
 802afb6:	bf14      	ite	ne
 802afb8:	2301      	movne	r3, #1
 802afba:	2300      	moveq	r3, #0
 802afbc:	b2db      	uxtb	r3, r3
}
 802afbe:	4618      	mov	r0, r3
 802afc0:	371c      	adds	r7, #28
 802afc2:	46bd      	mov	sp, r7
 802afc4:	bd90      	pop	{r4, r7, pc}

0802afc6 <mg_json_unescape>:

bool mg_json_unescape(struct mg_str s, char *to, size_t n) {
 802afc6:	b590      	push	{r4, r7, lr}
 802afc8:	b08d      	sub	sp, #52	@ 0x34
 802afca:	af02      	add	r7, sp, #8
 802afcc:	f107 0408 	add.w	r4, r7, #8
 802afd0:	e884 0003 	stmia.w	r4, {r0, r1}
 802afd4:	607a      	str	r2, [r7, #4]
 802afd6:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 802afd8:	2300      	movs	r3, #0
 802afda:	627b      	str	r3, [r7, #36]	@ 0x24
 802afdc:	2300      	movs	r3, #0
 802afde:	623b      	str	r3, [r7, #32]
 802afe0:	e064      	b.n	802b0ac <mg_json_unescape+0xe6>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 802afe2:	68ba      	ldr	r2, [r7, #8]
 802afe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802afe6:	4413      	add	r3, r2
 802afe8:	781b      	ldrb	r3, [r3, #0]
 802afea:	2b5c      	cmp	r3, #92	@ 0x5c
 802afec:	d12c      	bne.n	802b048 <mg_json_unescape+0x82>
 802afee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802aff0:	1d5a      	adds	r2, r3, #5
 802aff2:	68fb      	ldr	r3, [r7, #12]
 802aff4:	429a      	cmp	r2, r3
 802aff6:	d227      	bcs.n	802b048 <mg_json_unescape+0x82>
 802aff8:	68ba      	ldr	r2, [r7, #8]
 802affa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802affc:	3301      	adds	r3, #1
 802affe:	4413      	add	r3, r2
 802b000:	781b      	ldrb	r3, [r3, #0]
 802b002:	2b75      	cmp	r3, #117	@ 0x75
 802b004:	d120      	bne.n	802b048 <mg_json_unescape+0x82>
      //  \uXXXX escape. We process simple one-byte chars \u00xx within ASCII
      //  range. More complex chars would require dragging in a UTF8 library,
      //  which is too much for us
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 802b006:	68ba      	ldr	r2, [r7, #8]
 802b008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b00a:	3302      	adds	r3, #2
 802b00c:	18d1      	adds	r1, r2, r3
 802b00e:	f107 0314 	add.w	r3, r7, #20
 802b012:	2204      	movs	r2, #4
 802b014:	4618      	mov	r0, r3
 802b016:	f006 fe02 	bl	8031c1e <mg_str_n>
 802b01a:	687a      	ldr	r2, [r7, #4]
 802b01c:	6a3b      	ldr	r3, [r7, #32]
 802b01e:	4413      	add	r3, r2
 802b020:	2201      	movs	r2, #1
 802b022:	9200      	str	r2, [sp, #0]
 802b024:	2210      	movs	r2, #16
 802b026:	f107 0114 	add.w	r1, r7, #20
 802b02a:	c903      	ldmia	r1, {r0, r1}
 802b02c:	f006 fffe 	bl	803202c <mg_str_to_num>
 802b030:	4603      	mov	r3, r0
                        sizeof(uint8_t)) == false)
 802b032:	f083 0301 	eor.w	r3, r3, #1
 802b036:	b2db      	uxtb	r3, r3
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 802b038:	2b00      	cmp	r3, #0
 802b03a:	d001      	beq.n	802b040 <mg_json_unescape+0x7a>
        return false;
 802b03c:	2300      	movs	r3, #0
 802b03e:	e04c      	b.n	802b0da <mg_json_unescape+0x114>
      i += 5;
 802b040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b042:	3305      	adds	r3, #5
 802b044:	627b      	str	r3, [r7, #36]	@ 0x24
 802b046:	e02b      	b.n	802b0a0 <mg_json_unescape+0xda>
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 802b048:	68ba      	ldr	r2, [r7, #8]
 802b04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b04c:	4413      	add	r3, r2
 802b04e:	781b      	ldrb	r3, [r3, #0]
 802b050:	2b5c      	cmp	r3, #92	@ 0x5c
 802b052:	d11d      	bne.n	802b090 <mg_json_unescape+0xca>
 802b054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b056:	1c5a      	adds	r2, r3, #1
 802b058:	68fb      	ldr	r3, [r7, #12]
 802b05a:	429a      	cmp	r2, r3
 802b05c:	d218      	bcs.n	802b090 <mg_json_unescape+0xca>
      char c = json_esc(s.buf[i + 1], 0);
 802b05e:	68ba      	ldr	r2, [r7, #8]
 802b060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b062:	3301      	adds	r3, #1
 802b064:	4413      	add	r3, r2
 802b066:	781b      	ldrb	r3, [r3, #0]
 802b068:	2100      	movs	r1, #0
 802b06a:	4618      	mov	r0, r3
 802b06c:	f7ff fa10 	bl	802a490 <json_esc>
 802b070:	4603      	mov	r3, r0
 802b072:	77fb      	strb	r3, [r7, #31]
      if (c == 0) return false;
 802b074:	7ffb      	ldrb	r3, [r7, #31]
 802b076:	2b00      	cmp	r3, #0
 802b078:	d101      	bne.n	802b07e <mg_json_unescape+0xb8>
 802b07a:	2300      	movs	r3, #0
 802b07c:	e02d      	b.n	802b0da <mg_json_unescape+0x114>
      to[j] = c;
 802b07e:	687a      	ldr	r2, [r7, #4]
 802b080:	6a3b      	ldr	r3, [r7, #32]
 802b082:	4413      	add	r3, r2
 802b084:	7ffa      	ldrb	r2, [r7, #31]
 802b086:	701a      	strb	r2, [r3, #0]
      i++;
 802b088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b08a:	3301      	adds	r3, #1
 802b08c:	627b      	str	r3, [r7, #36]	@ 0x24
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 802b08e:	e007      	b.n	802b0a0 <mg_json_unescape+0xda>
    } else {
      to[j] = s.buf[i];
 802b090:	68ba      	ldr	r2, [r7, #8]
 802b092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b094:	441a      	add	r2, r3
 802b096:	6879      	ldr	r1, [r7, #4]
 802b098:	6a3b      	ldr	r3, [r7, #32]
 802b09a:	440b      	add	r3, r1
 802b09c:	7812      	ldrb	r2, [r2, #0]
 802b09e:	701a      	strb	r2, [r3, #0]
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 802b0a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b0a2:	3301      	adds	r3, #1
 802b0a4:	627b      	str	r3, [r7, #36]	@ 0x24
 802b0a6:	6a3b      	ldr	r3, [r7, #32]
 802b0a8:	3301      	adds	r3, #1
 802b0aa:	623b      	str	r3, [r7, #32]
 802b0ac:	68fb      	ldr	r3, [r7, #12]
 802b0ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802b0b0:	429a      	cmp	r2, r3
 802b0b2:	d203      	bcs.n	802b0bc <mg_json_unescape+0xf6>
 802b0b4:	6a3a      	ldr	r2, [r7, #32]
 802b0b6:	683b      	ldr	r3, [r7, #0]
 802b0b8:	429a      	cmp	r2, r3
 802b0ba:	d392      	bcc.n	802afe2 <mg_json_unescape+0x1c>
    }
  }
  if (j >= n) return false;
 802b0bc:	6a3a      	ldr	r2, [r7, #32]
 802b0be:	683b      	ldr	r3, [r7, #0]
 802b0c0:	429a      	cmp	r2, r3
 802b0c2:	d301      	bcc.n	802b0c8 <mg_json_unescape+0x102>
 802b0c4:	2300      	movs	r3, #0
 802b0c6:	e008      	b.n	802b0da <mg_json_unescape+0x114>
  if (n > 0) to[j] = '\0';
 802b0c8:	683b      	ldr	r3, [r7, #0]
 802b0ca:	2b00      	cmp	r3, #0
 802b0cc:	d004      	beq.n	802b0d8 <mg_json_unescape+0x112>
 802b0ce:	687a      	ldr	r2, [r7, #4]
 802b0d0:	6a3b      	ldr	r3, [r7, #32]
 802b0d2:	4413      	add	r3, r2
 802b0d4:	2200      	movs	r2, #0
 802b0d6:	701a      	strb	r2, [r3, #0]
  return true;
 802b0d8:	2301      	movs	r3, #1
}
 802b0da:	4618      	mov	r0, r3
 802b0dc:	372c      	adds	r7, #44	@ 0x2c
 802b0de:	46bd      	mov	sp, r7
 802b0e0:	bd90      	pop	{r4, r7, pc}

0802b0e2 <mg_json_get_str>:

char *mg_json_get_str(struct mg_str json, const char *path) {
 802b0e2:	b580      	push	{r7, lr}
 802b0e4:	b08a      	sub	sp, #40	@ 0x28
 802b0e6:	af00      	add	r7, sp, #0
 802b0e8:	f107 0308 	add.w	r3, r7, #8
 802b0ec:	e883 0003 	stmia.w	r3, {r0, r1}
 802b0f0:	607a      	str	r2, [r7, #4]
  char *result = NULL;
 802b0f2:	2300      	movs	r3, #0
 802b0f4:	627b      	str	r3, [r7, #36]	@ 0x24
  int len = 0, off = mg_json_get(json, path, &len);
 802b0f6:	2300      	movs	r3, #0
 802b0f8:	617b      	str	r3, [r7, #20]
 802b0fa:	f107 0314 	add.w	r3, r7, #20
 802b0fe:	687a      	ldr	r2, [r7, #4]
 802b100:	f107 0108 	add.w	r1, r7, #8
 802b104:	c903      	ldmia	r1, {r0, r1}
 802b106:	f7ff fba1 	bl	802a84c <mg_json_get>
 802b10a:	6238      	str	r0, [r7, #32]
  if (off >= 0 && len > 1 && json.buf[off] == '"') {
 802b10c:	6a3b      	ldr	r3, [r7, #32]
 802b10e:	2b00      	cmp	r3, #0
 802b110:	db2f      	blt.n	802b172 <mg_json_get_str+0x90>
 802b112:	697b      	ldr	r3, [r7, #20]
 802b114:	2b01      	cmp	r3, #1
 802b116:	dd2c      	ble.n	802b172 <mg_json_get_str+0x90>
 802b118:	68ba      	ldr	r2, [r7, #8]
 802b11a:	6a3b      	ldr	r3, [r7, #32]
 802b11c:	4413      	add	r3, r2
 802b11e:	781b      	ldrb	r3, [r3, #0]
 802b120:	2b22      	cmp	r3, #34	@ 0x22
 802b122:	d126      	bne.n	802b172 <mg_json_get_str+0x90>
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 802b124:	697b      	ldr	r3, [r7, #20]
 802b126:	4619      	mov	r1, r3
 802b128:	2001      	movs	r0, #1
 802b12a:	f7f9 fe91 	bl	8024e50 <mg_calloc>
 802b12e:	6278      	str	r0, [r7, #36]	@ 0x24
 802b130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b132:	2b00      	cmp	r3, #0
 802b134:	d01d      	beq.n	802b172 <mg_json_get_str+0x90>
        !mg_json_unescape(mg_str_n(json.buf + off + 1, (size_t) (len - 2)),
 802b136:	68ba      	ldr	r2, [r7, #8]
 802b138:	6a3b      	ldr	r3, [r7, #32]
 802b13a:	3301      	adds	r3, #1
 802b13c:	18d1      	adds	r1, r2, r3
 802b13e:	697b      	ldr	r3, [r7, #20]
 802b140:	3b02      	subs	r3, #2
 802b142:	461a      	mov	r2, r3
 802b144:	f107 0318 	add.w	r3, r7, #24
 802b148:	4618      	mov	r0, r3
 802b14a:	f006 fd68 	bl	8031c1e <mg_str_n>
 802b14e:	697b      	ldr	r3, [r7, #20]
 802b150:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802b152:	f107 0118 	add.w	r1, r7, #24
 802b156:	c903      	ldmia	r1, {r0, r1}
 802b158:	f7ff ff35 	bl	802afc6 <mg_json_unescape>
 802b15c:	4603      	mov	r3, r0
 802b15e:	f083 0301 	eor.w	r3, r3, #1
 802b162:	b2db      	uxtb	r3, r3
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 802b164:	2b00      	cmp	r3, #0
 802b166:	d004      	beq.n	802b172 <mg_json_get_str+0x90>
                          result, (size_t) len)) {
      free(result);
 802b168:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802b16a:	f7f1 fafd 	bl	801c768 <vPortFree>
      result = NULL;
 802b16e:	2300      	movs	r3, #0
 802b170:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  return result;
 802b172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 802b174:	4618      	mov	r0, r3
 802b176:	3728      	adds	r7, #40	@ 0x28
 802b178:	46bd      	mov	sp, r7
 802b17a:	bd80      	pop	{r7, pc}

0802b17c <logc>:
void mg_log_set_fn(mg_pfn_t fn, void *param) {
  s_log_func = fn;
  s_log_func_param = param;
}

static void logc(unsigned char c) {
 802b17c:	b580      	push	{r7, lr}
 802b17e:	b082      	sub	sp, #8
 802b180:	af00      	add	r7, sp, #0
 802b182:	4603      	mov	r3, r0
 802b184:	71fb      	strb	r3, [r7, #7]
  s_log_func((char) c, s_log_func_param);
 802b186:	4b05      	ldr	r3, [pc, #20]	@ (802b19c <logc+0x20>)
 802b188:	681b      	ldr	r3, [r3, #0]
 802b18a:	4a05      	ldr	r2, [pc, #20]	@ (802b1a0 <logc+0x24>)
 802b18c:	6811      	ldr	r1, [r2, #0]
 802b18e:	79fa      	ldrb	r2, [r7, #7]
 802b190:	4610      	mov	r0, r2
 802b192:	4798      	blx	r3
}
 802b194:	bf00      	nop
 802b196:	3708      	adds	r7, #8
 802b198:	46bd      	mov	sp, r7
 802b19a:	bd80      	pop	{r7, pc}
 802b19c:	2000029c 	.word	0x2000029c
 802b1a0:	20018168 	.word	0x20018168

0802b1a4 <logs>:

static void logs(const char *buf, size_t len) {
 802b1a4:	b580      	push	{r7, lr}
 802b1a6:	b084      	sub	sp, #16
 802b1a8:	af00      	add	r7, sp, #0
 802b1aa:	6078      	str	r0, [r7, #4]
 802b1ac:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < len; i++) logc(((unsigned char *) buf)[i]);
 802b1ae:	2300      	movs	r3, #0
 802b1b0:	60fb      	str	r3, [r7, #12]
 802b1b2:	e009      	b.n	802b1c8 <logs+0x24>
 802b1b4:	687a      	ldr	r2, [r7, #4]
 802b1b6:	68fb      	ldr	r3, [r7, #12]
 802b1b8:	4413      	add	r3, r2
 802b1ba:	781b      	ldrb	r3, [r3, #0]
 802b1bc:	4618      	mov	r0, r3
 802b1be:	f7ff ffdd 	bl	802b17c <logc>
 802b1c2:	68fb      	ldr	r3, [r7, #12]
 802b1c4:	3301      	adds	r3, #1
 802b1c6:	60fb      	str	r3, [r7, #12]
 802b1c8:	68fa      	ldr	r2, [r7, #12]
 802b1ca:	683b      	ldr	r3, [r7, #0]
 802b1cc:	429a      	cmp	r2, r3
 802b1ce:	d3f1      	bcc.n	802b1b4 <logs+0x10>
}
 802b1d0:	bf00      	nop
 802b1d2:	bf00      	nop
 802b1d4:	3710      	adds	r7, #16
 802b1d6:	46bd      	mov	sp, r7
 802b1d8:	bd80      	pop	{r7, pc}
	...

0802b1dc <mg_log_prefix>:

#if MG_ENABLE_CUSTOM_LOG
// Let user define their own mg_log_prefix() and mg_log()
#else
void mg_log_prefix(int level, const char *file, int line, const char *fname) {
 802b1dc:	b590      	push	{r4, r7, lr}
 802b1de:	b099      	sub	sp, #100	@ 0x64
 802b1e0:	af06      	add	r7, sp, #24
 802b1e2:	60f8      	str	r0, [r7, #12]
 802b1e4:	60b9      	str	r1, [r7, #8]
 802b1e6:	607a      	str	r2, [r7, #4]
 802b1e8:	603b      	str	r3, [r7, #0]
  const char *p = strrchr(file, '/');
 802b1ea:	212f      	movs	r1, #47	@ 0x2f
 802b1ec:	68b8      	ldr	r0, [r7, #8]
 802b1ee:	f00a fe59 	bl	8035ea4 <strrchr>
 802b1f2:	6478      	str	r0, [r7, #68]	@ 0x44
  char buf[41];
  size_t n;
  if (p == NULL) p = strrchr(file, '\\');
 802b1f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802b1f6:	2b00      	cmp	r3, #0
 802b1f8:	d104      	bne.n	802b204 <mg_log_prefix+0x28>
 802b1fa:	215c      	movs	r1, #92	@ 0x5c
 802b1fc:	68b8      	ldr	r0, [r7, #8]
 802b1fe:	f00a fe51 	bl	8035ea4 <strrchr>
 802b202:	6478      	str	r0, [r7, #68]	@ 0x44
  n = mg_snprintf(buf, sizeof(buf), "%-6llx %d %s:%d:%s", mg_millis(), level,
 802b204:	f007 fd22 	bl	8032c4c <mg_millis>
 802b208:	4602      	mov	r2, r0
 802b20a:	460b      	mov	r3, r1
 802b20c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 802b20e:	2900      	cmp	r1, #0
 802b210:	d002      	beq.n	802b218 <mg_log_prefix+0x3c>
 802b212:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 802b214:	3101      	adds	r1, #1
 802b216:	e000      	b.n	802b21a <mg_log_prefix+0x3e>
 802b218:	68b9      	ldr	r1, [r7, #8]
 802b21a:	f107 0414 	add.w	r4, r7, #20
 802b21e:	6838      	ldr	r0, [r7, #0]
 802b220:	9005      	str	r0, [sp, #20]
 802b222:	6878      	ldr	r0, [r7, #4]
 802b224:	9004      	str	r0, [sp, #16]
 802b226:	9103      	str	r1, [sp, #12]
 802b228:	68f9      	ldr	r1, [r7, #12]
 802b22a:	9102      	str	r1, [sp, #8]
 802b22c:	e9cd 2300 	strd	r2, r3, [sp]
 802b230:	4a11      	ldr	r2, [pc, #68]	@ (802b278 <mg_log_prefix+0x9c>)
 802b232:	2129      	movs	r1, #41	@ 0x29
 802b234:	4620      	mov	r0, r4
 802b236:	f005 ffed 	bl	8031214 <mg_snprintf>
 802b23a:	6438      	str	r0, [r7, #64]	@ 0x40
                  p == NULL ? file : p + 1, line, fname);
  if (n > sizeof(buf) - 2) n = sizeof(buf) - 2;
 802b23c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802b23e:	2b27      	cmp	r3, #39	@ 0x27
 802b240:	d90a      	bls.n	802b258 <mg_log_prefix+0x7c>
 802b242:	2327      	movs	r3, #39	@ 0x27
 802b244:	643b      	str	r3, [r7, #64]	@ 0x40
  while (n < sizeof(buf)) buf[n++] = ' ';
 802b246:	e007      	b.n	802b258 <mg_log_prefix+0x7c>
 802b248:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802b24a:	1c5a      	adds	r2, r3, #1
 802b24c:	643a      	str	r2, [r7, #64]	@ 0x40
 802b24e:	3348      	adds	r3, #72	@ 0x48
 802b250:	443b      	add	r3, r7
 802b252:	2220      	movs	r2, #32
 802b254:	f803 2c34 	strb.w	r2, [r3, #-52]
 802b258:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802b25a:	2b28      	cmp	r3, #40	@ 0x28
 802b25c:	d9f4      	bls.n	802b248 <mg_log_prefix+0x6c>
  logs(buf, n - 1);
 802b25e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802b260:	1e5a      	subs	r2, r3, #1
 802b262:	f107 0314 	add.w	r3, r7, #20
 802b266:	4611      	mov	r1, r2
 802b268:	4618      	mov	r0, r3
 802b26a:	f7ff ff9b 	bl	802b1a4 <logs>
}
 802b26e:	bf00      	nop
 802b270:	374c      	adds	r7, #76	@ 0x4c
 802b272:	46bd      	mov	sp, r7
 802b274:	bd90      	pop	{r4, r7, pc}
 802b276:	bf00      	nop
 802b278:	080429d4 	.word	0x080429d4

0802b27c <mg_log>:

void mg_log(const char *fmt, ...) {
 802b27c:	b40f      	push	{r0, r1, r2, r3}
 802b27e:	b580      	push	{r7, lr}
 802b280:	b082      	sub	sp, #8
 802b282:	af00      	add	r7, sp, #0
  va_list ap;
  va_start(ap, fmt);
 802b284:	f107 0314 	add.w	r3, r7, #20
 802b288:	607b      	str	r3, [r7, #4]
  mg_vxprintf(s_log_func, s_log_func_param, fmt, &ap);
 802b28a:	4b09      	ldr	r3, [pc, #36]	@ (802b2b0 <mg_log+0x34>)
 802b28c:	6818      	ldr	r0, [r3, #0]
 802b28e:	4b09      	ldr	r3, [pc, #36]	@ (802b2b4 <mg_log+0x38>)
 802b290:	6819      	ldr	r1, [r3, #0]
 802b292:	1d3b      	adds	r3, r7, #4
 802b294:	693a      	ldr	r2, [r7, #16]
 802b296:	f7fb f8ed 	bl	8026474 <mg_vxprintf>
  va_end(ap);
  logs("\r\n", 2);
 802b29a:	2102      	movs	r1, #2
 802b29c:	4806      	ldr	r0, [pc, #24]	@ (802b2b8 <mg_log+0x3c>)
 802b29e:	f7ff ff81 	bl	802b1a4 <logs>
}
 802b2a2:	bf00      	nop
 802b2a4:	3708      	adds	r7, #8
 802b2a6:	46bd      	mov	sp, r7
 802b2a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802b2ac:	b004      	add	sp, #16
 802b2ae:	4770      	bx	lr
 802b2b0:	2000029c 	.word	0x2000029c
 802b2b4:	20018168 	.word	0x20018168
 802b2b8:	0804174c 	.word	0x0804174c

0802b2bc <nibble>:
#endif

static unsigned char nibble(unsigned c) {
 802b2bc:	b480      	push	{r7}
 802b2be:	b083      	sub	sp, #12
 802b2c0:	af00      	add	r7, sp, #0
 802b2c2:	6078      	str	r0, [r7, #4]
  return (unsigned char) (c < 10 ? c + '0' : c + 'W');
 802b2c4:	687b      	ldr	r3, [r7, #4]
 802b2c6:	2b09      	cmp	r3, #9
 802b2c8:	d804      	bhi.n	802b2d4 <nibble+0x18>
 802b2ca:	687b      	ldr	r3, [r7, #4]
 802b2cc:	b2db      	uxtb	r3, r3
 802b2ce:	3330      	adds	r3, #48	@ 0x30
 802b2d0:	b2db      	uxtb	r3, r3
 802b2d2:	e003      	b.n	802b2dc <nibble+0x20>
 802b2d4:	687b      	ldr	r3, [r7, #4]
 802b2d6:	b2db      	uxtb	r3, r3
 802b2d8:	3357      	adds	r3, #87	@ 0x57
 802b2da:	b2db      	uxtb	r3, r3
}
 802b2dc:	4618      	mov	r0, r3
 802b2de:	370c      	adds	r7, #12
 802b2e0:	46bd      	mov	sp, r7
 802b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b2e6:	4770      	bx	lr

0802b2e8 <mg_hexdump>:

#define ISPRINT(x) ((x) >= ' ' && (x) <= '~')
void mg_hexdump(const void *buf, size_t len) {
 802b2e8:	b580      	push	{r7, lr}
 802b2ea:	b08a      	sub	sp, #40	@ 0x28
 802b2ec:	af00      	add	r7, sp, #0
 802b2ee:	6078      	str	r0, [r7, #4]
 802b2f0:	6039      	str	r1, [r7, #0]
  const unsigned char *p = (const unsigned char *) buf;
 802b2f2:	687b      	ldr	r3, [r7, #4]
 802b2f4:	61fb      	str	r3, [r7, #28]
  unsigned char ascii[16], alen = 0;
 802b2f6:	2300      	movs	r3, #0
 802b2f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  size_t i;
  for (i = 0; i < len; i++) {
 802b2fc:	2300      	movs	r3, #0
 802b2fe:	623b      	str	r3, [r7, #32]
 802b300:	e07a      	b.n	802b3f8 <mg_hexdump+0x110>
    if ((i % 16) == 0) {
 802b302:	6a3b      	ldr	r3, [r7, #32]
 802b304:	f003 030f 	and.w	r3, r3, #15
 802b308:	2b00      	cmp	r3, #0
 802b30a:	d13a      	bne.n	802b382 <mg_hexdump+0x9a>
      // Print buffered ascii chars
      if (i > 0) logs("  ", 2), logs((char *) ascii, 16), logc('\n'), alen = 0;
 802b30c:	6a3b      	ldr	r3, [r7, #32]
 802b30e:	2b00      	cmp	r3, #0
 802b310:	d00f      	beq.n	802b332 <mg_hexdump+0x4a>
 802b312:	2102      	movs	r1, #2
 802b314:	484c      	ldr	r0, [pc, #304]	@ (802b448 <mg_hexdump+0x160>)
 802b316:	f7ff ff45 	bl	802b1a4 <logs>
 802b31a:	f107 030c 	add.w	r3, r7, #12
 802b31e:	2110      	movs	r1, #16
 802b320:	4618      	mov	r0, r3
 802b322:	f7ff ff3f 	bl	802b1a4 <logs>
 802b326:	200a      	movs	r0, #10
 802b328:	f7ff ff28 	bl	802b17c <logc>
 802b32c:	2300      	movs	r3, #0
 802b32e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      // Print hex address, then \t
      logc(nibble((i >> 12) & 15)), logc(nibble((i >> 8) & 15)),
 802b332:	6a3b      	ldr	r3, [r7, #32]
 802b334:	0b1b      	lsrs	r3, r3, #12
 802b336:	f003 030f 	and.w	r3, r3, #15
 802b33a:	4618      	mov	r0, r3
 802b33c:	f7ff ffbe 	bl	802b2bc <nibble>
 802b340:	4603      	mov	r3, r0
 802b342:	4618      	mov	r0, r3
 802b344:	f7ff ff1a 	bl	802b17c <logc>
 802b348:	6a3b      	ldr	r3, [r7, #32]
 802b34a:	0a1b      	lsrs	r3, r3, #8
 802b34c:	f003 030f 	and.w	r3, r3, #15
 802b350:	4618      	mov	r0, r3
 802b352:	f7ff ffb3 	bl	802b2bc <nibble>
 802b356:	4603      	mov	r3, r0
 802b358:	4618      	mov	r0, r3
 802b35a:	f7ff ff0f 	bl	802b17c <logc>
          logc(nibble((i >> 4) & 15)), logc('0'), logs("   ", 3);
 802b35e:	6a3b      	ldr	r3, [r7, #32]
 802b360:	091b      	lsrs	r3, r3, #4
 802b362:	f003 030f 	and.w	r3, r3, #15
 802b366:	4618      	mov	r0, r3
 802b368:	f7ff ffa8 	bl	802b2bc <nibble>
 802b36c:	4603      	mov	r3, r0
 802b36e:	4618      	mov	r0, r3
 802b370:	f7ff ff04 	bl	802b17c <logc>
 802b374:	2030      	movs	r0, #48	@ 0x30
 802b376:	f7ff ff01 	bl	802b17c <logc>
 802b37a:	2103      	movs	r1, #3
 802b37c:	4833      	ldr	r0, [pc, #204]	@ (802b44c <mg_hexdump+0x164>)
 802b37e:	f7ff ff11 	bl	802b1a4 <logs>
    }
    logc(nibble(p[i] >> 4)), logc(nibble(p[i] & 15));  // Two nibbles, e.g. c5
 802b382:	69fa      	ldr	r2, [r7, #28]
 802b384:	6a3b      	ldr	r3, [r7, #32]
 802b386:	4413      	add	r3, r2
 802b388:	781b      	ldrb	r3, [r3, #0]
 802b38a:	091b      	lsrs	r3, r3, #4
 802b38c:	b2db      	uxtb	r3, r3
 802b38e:	4618      	mov	r0, r3
 802b390:	f7ff ff94 	bl	802b2bc <nibble>
 802b394:	4603      	mov	r3, r0
 802b396:	4618      	mov	r0, r3
 802b398:	f7ff fef0 	bl	802b17c <logc>
 802b39c:	69fa      	ldr	r2, [r7, #28]
 802b39e:	6a3b      	ldr	r3, [r7, #32]
 802b3a0:	4413      	add	r3, r2
 802b3a2:	781b      	ldrb	r3, [r3, #0]
 802b3a4:	f003 030f 	and.w	r3, r3, #15
 802b3a8:	4618      	mov	r0, r3
 802b3aa:	f7ff ff87 	bl	802b2bc <nibble>
 802b3ae:	4603      	mov	r3, r0
 802b3b0:	4618      	mov	r0, r3
 802b3b2:	f7ff fee3 	bl	802b17c <logc>
    logc(' ');                                         // Space after hex number
 802b3b6:	2020      	movs	r0, #32
 802b3b8:	f7ff fee0 	bl	802b17c <logc>
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 802b3bc:	69fa      	ldr	r2, [r7, #28]
 802b3be:	6a3b      	ldr	r3, [r7, #32]
 802b3c0:	4413      	add	r3, r2
 802b3c2:	781b      	ldrb	r3, [r3, #0]
 802b3c4:	2b1f      	cmp	r3, #31
 802b3c6:	d90a      	bls.n	802b3de <mg_hexdump+0xf6>
 802b3c8:	69fa      	ldr	r2, [r7, #28]
 802b3ca:	6a3b      	ldr	r3, [r7, #32]
 802b3cc:	4413      	add	r3, r2
 802b3ce:	781b      	ldrb	r3, [r3, #0]
 802b3d0:	2b7e      	cmp	r3, #126	@ 0x7e
 802b3d2:	d804      	bhi.n	802b3de <mg_hexdump+0xf6>
 802b3d4:	69fa      	ldr	r2, [r7, #28]
 802b3d6:	6a3b      	ldr	r3, [r7, #32]
 802b3d8:	4413      	add	r3, r2
 802b3da:	781a      	ldrb	r2, [r3, #0]
 802b3dc:	e000      	b.n	802b3e0 <mg_hexdump+0xf8>
 802b3de:	222e      	movs	r2, #46	@ 0x2e
 802b3e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 802b3e4:	1c59      	adds	r1, r3, #1
 802b3e6:	f887 1027 	strb.w	r1, [r7, #39]	@ 0x27
 802b3ea:	3328      	adds	r3, #40	@ 0x28
 802b3ec:	443b      	add	r3, r7
 802b3ee:	f803 2c1c 	strb.w	r2, [r3, #-28]
  for (i = 0; i < len; i++) {
 802b3f2:	6a3b      	ldr	r3, [r7, #32]
 802b3f4:	3301      	adds	r3, #1
 802b3f6:	623b      	str	r3, [r7, #32]
 802b3f8:	6a3a      	ldr	r2, [r7, #32]
 802b3fa:	683b      	ldr	r3, [r7, #0]
 802b3fc:	429a      	cmp	r2, r3
 802b3fe:	d380      	bcc.n	802b302 <mg_hexdump+0x1a>
  }
  while (alen < 16) logs("   ", 3), ascii[alen++] = ' ';
 802b400:	e00d      	b.n	802b41e <mg_hexdump+0x136>
 802b402:	2103      	movs	r1, #3
 802b404:	4811      	ldr	r0, [pc, #68]	@ (802b44c <mg_hexdump+0x164>)
 802b406:	f7ff fecd 	bl	802b1a4 <logs>
 802b40a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 802b40e:	1c5a      	adds	r2, r3, #1
 802b410:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 802b414:	3328      	adds	r3, #40	@ 0x28
 802b416:	443b      	add	r3, r7
 802b418:	2220      	movs	r2, #32
 802b41a:	f803 2c1c 	strb.w	r2, [r3, #-28]
 802b41e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 802b422:	2b0f      	cmp	r3, #15
 802b424:	d9ed      	bls.n	802b402 <mg_hexdump+0x11a>
  logs("  ", 2), logs((char *) ascii, 16), logc('\n');
 802b426:	2102      	movs	r1, #2
 802b428:	4807      	ldr	r0, [pc, #28]	@ (802b448 <mg_hexdump+0x160>)
 802b42a:	f7ff febb 	bl	802b1a4 <logs>
 802b42e:	f107 030c 	add.w	r3, r7, #12
 802b432:	2110      	movs	r1, #16
 802b434:	4618      	mov	r0, r3
 802b436:	f7ff feb5 	bl	802b1a4 <logs>
 802b43a:	200a      	movs	r0, #10
 802b43c:	f7ff fe9e 	bl	802b17c <logc>
}
 802b440:	bf00      	nop
 802b442:	3728      	adds	r7, #40	@ 0x28
 802b444:	46bd      	mov	sp, r7
 802b446:	bd80      	pop	{r7, pc}
 802b448:	080429e8 	.word	0x080429e8
 802b44c:	080429ec 	.word	0x080429ec

0802b450 <mg_byte_reverse>:
//  needed on buffers full of bytes, and then call MD5Final, which
//  will fill a supplied 16-byte array with the digest.

#if defined(MG_ENABLE_MD5) && MG_ENABLE_MD5

static void mg_byte_reverse(unsigned char *buf, unsigned longs) {
 802b450:	b480      	push	{r7}
 802b452:	b085      	sub	sp, #20
 802b454:	af00      	add	r7, sp, #0
 802b456:	6078      	str	r0, [r7, #4]
 802b458:	6039      	str	r1, [r7, #0]
  if (MG_BIG_ENDIAN) {
 802b45a:	4b14      	ldr	r3, [pc, #80]	@ (802b4ac <mg_byte_reverse+0x5c>)
 802b45c:	881b      	ldrh	r3, [r3, #0]
 802b45e:	2bff      	cmp	r3, #255	@ 0xff
 802b460:	d81d      	bhi.n	802b49e <mg_byte_reverse+0x4e>
    do {
      uint32_t t = (uint32_t) ((unsigned) buf[3] << 8 | buf[2]) << 16 |
 802b462:	687b      	ldr	r3, [r7, #4]
 802b464:	3303      	adds	r3, #3
 802b466:	781b      	ldrb	r3, [r3, #0]
 802b468:	021b      	lsls	r3, r3, #8
 802b46a:	687a      	ldr	r2, [r7, #4]
 802b46c:	3202      	adds	r2, #2
 802b46e:	7812      	ldrb	r2, [r2, #0]
 802b470:	4313      	orrs	r3, r2
 802b472:	041a      	lsls	r2, r3, #16
                   ((unsigned) buf[1] << 8 | buf[0]);
 802b474:	687b      	ldr	r3, [r7, #4]
 802b476:	3301      	adds	r3, #1
 802b478:	781b      	ldrb	r3, [r3, #0]
 802b47a:	021b      	lsls	r3, r3, #8
 802b47c:	6879      	ldr	r1, [r7, #4]
 802b47e:	7809      	ldrb	r1, [r1, #0]
 802b480:	430b      	orrs	r3, r1
      uint32_t t = (uint32_t) ((unsigned) buf[3] << 8 | buf[2]) << 16 |
 802b482:	4313      	orrs	r3, r2
 802b484:	60fb      	str	r3, [r7, #12]
      *(uint32_t *) buf = t;
 802b486:	687b      	ldr	r3, [r7, #4]
 802b488:	68fa      	ldr	r2, [r7, #12]
 802b48a:	601a      	str	r2, [r3, #0]
      buf += 4;
 802b48c:	687b      	ldr	r3, [r7, #4]
 802b48e:	3304      	adds	r3, #4
 802b490:	607b      	str	r3, [r7, #4]
    } while (--longs);
 802b492:	683b      	ldr	r3, [r7, #0]
 802b494:	3b01      	subs	r3, #1
 802b496:	603b      	str	r3, [r7, #0]
 802b498:	683b      	ldr	r3, [r7, #0]
 802b49a:	2b00      	cmp	r3, #0
 802b49c:	d1e1      	bne.n	802b462 <mg_byte_reverse+0x12>
  } else {
    (void) buf, (void) longs;  // Little endian. Do nothing
  }
}
 802b49e:	bf00      	nop
 802b4a0:	3714      	adds	r7, #20
 802b4a2:	46bd      	mov	sp, r7
 802b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b4a8:	4770      	bx	lr
 802b4aa:	bf00      	nop
 802b4ac:	080429f0 	.word	0x080429f0

0802b4b0 <mg_md5_init>:

/*
 * Start MD5 accumulation.  Set bit count to 0 and buffer to mysterious
 * initialization constants.
 */
void mg_md5_init(mg_md5_ctx *ctx) {
 802b4b0:	b480      	push	{r7}
 802b4b2:	b083      	sub	sp, #12
 802b4b4:	af00      	add	r7, sp, #0
 802b4b6:	6078      	str	r0, [r7, #4]
  ctx->buf[0] = 0x67452301;
 802b4b8:	687b      	ldr	r3, [r7, #4]
 802b4ba:	4a0b      	ldr	r2, [pc, #44]	@ (802b4e8 <mg_md5_init+0x38>)
 802b4bc:	601a      	str	r2, [r3, #0]
  ctx->buf[1] = 0xefcdab89;
 802b4be:	687b      	ldr	r3, [r7, #4]
 802b4c0:	4a0a      	ldr	r2, [pc, #40]	@ (802b4ec <mg_md5_init+0x3c>)
 802b4c2:	605a      	str	r2, [r3, #4]
  ctx->buf[2] = 0x98badcfe;
 802b4c4:	687b      	ldr	r3, [r7, #4]
 802b4c6:	4a0a      	ldr	r2, [pc, #40]	@ (802b4f0 <mg_md5_init+0x40>)
 802b4c8:	609a      	str	r2, [r3, #8]
  ctx->buf[3] = 0x10325476;
 802b4ca:	687b      	ldr	r3, [r7, #4]
 802b4cc:	4a09      	ldr	r2, [pc, #36]	@ (802b4f4 <mg_md5_init+0x44>)
 802b4ce:	60da      	str	r2, [r3, #12]

  ctx->bits[0] = 0;
 802b4d0:	687b      	ldr	r3, [r7, #4]
 802b4d2:	2200      	movs	r2, #0
 802b4d4:	611a      	str	r2, [r3, #16]
  ctx->bits[1] = 0;
 802b4d6:	687b      	ldr	r3, [r7, #4]
 802b4d8:	2200      	movs	r2, #0
 802b4da:	615a      	str	r2, [r3, #20]
}
 802b4dc:	bf00      	nop
 802b4de:	370c      	adds	r7, #12
 802b4e0:	46bd      	mov	sp, r7
 802b4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b4e6:	4770      	bx	lr
 802b4e8:	67452301 	.word	0x67452301
 802b4ec:	efcdab89 	.word	0xefcdab89
 802b4f0:	98badcfe 	.word	0x98badcfe
 802b4f4:	10325476 	.word	0x10325476

0802b4f8 <mg_md5_transform>:

static void mg_md5_transform(uint32_t buf[4], uint32_t const in[16]) {
 802b4f8:	b480      	push	{r7}
 802b4fa:	b087      	sub	sp, #28
 802b4fc:	af00      	add	r7, sp, #0
 802b4fe:	6078      	str	r0, [r7, #4]
 802b500:	6039      	str	r1, [r7, #0]
  uint32_t a, b, c, d;

  a = buf[0];
 802b502:	687b      	ldr	r3, [r7, #4]
 802b504:	681b      	ldr	r3, [r3, #0]
 802b506:	617b      	str	r3, [r7, #20]
  b = buf[1];
 802b508:	687b      	ldr	r3, [r7, #4]
 802b50a:	685b      	ldr	r3, [r3, #4]
 802b50c:	613b      	str	r3, [r7, #16]
  c = buf[2];
 802b50e:	687b      	ldr	r3, [r7, #4]
 802b510:	689b      	ldr	r3, [r3, #8]
 802b512:	60fb      	str	r3, [r7, #12]
  d = buf[3];
 802b514:	687b      	ldr	r3, [r7, #4]
 802b516:	68db      	ldr	r3, [r3, #12]
 802b518:	60bb      	str	r3, [r7, #8]

  MD5STEP(F1, a, b, c, d, in[0] + 0xd76aa478, 7);
 802b51a:	68fa      	ldr	r2, [r7, #12]
 802b51c:	68bb      	ldr	r3, [r7, #8]
 802b51e:	405a      	eors	r2, r3
 802b520:	693b      	ldr	r3, [r7, #16]
 802b522:	401a      	ands	r2, r3
 802b524:	68bb      	ldr	r3, [r7, #8]
 802b526:	405a      	eors	r2, r3
 802b528:	683b      	ldr	r3, [r7, #0]
 802b52a:	681b      	ldr	r3, [r3, #0]
 802b52c:	441a      	add	r2, r3
 802b52e:	697b      	ldr	r3, [r7, #20]
 802b530:	441a      	add	r2, r3
 802b532:	4ba1      	ldr	r3, [pc, #644]	@ (802b7b8 <mg_md5_transform+0x2c0>)
 802b534:	4413      	add	r3, r2
 802b536:	617b      	str	r3, [r7, #20]
 802b538:	697b      	ldr	r3, [r7, #20]
 802b53a:	ea4f 6373 	mov.w	r3, r3, ror #25
 802b53e:	617b      	str	r3, [r7, #20]
 802b540:	697a      	ldr	r2, [r7, #20]
 802b542:	693b      	ldr	r3, [r7, #16]
 802b544:	4413      	add	r3, r2
 802b546:	617b      	str	r3, [r7, #20]
  MD5STEP(F1, d, a, b, c, in[1] + 0xe8c7b756, 12);
 802b548:	693a      	ldr	r2, [r7, #16]
 802b54a:	68fb      	ldr	r3, [r7, #12]
 802b54c:	405a      	eors	r2, r3
 802b54e:	697b      	ldr	r3, [r7, #20]
 802b550:	401a      	ands	r2, r3
 802b552:	68fb      	ldr	r3, [r7, #12]
 802b554:	405a      	eors	r2, r3
 802b556:	683b      	ldr	r3, [r7, #0]
 802b558:	3304      	adds	r3, #4
 802b55a:	681b      	ldr	r3, [r3, #0]
 802b55c:	441a      	add	r2, r3
 802b55e:	68bb      	ldr	r3, [r7, #8]
 802b560:	441a      	add	r2, r3
 802b562:	4b96      	ldr	r3, [pc, #600]	@ (802b7bc <mg_md5_transform+0x2c4>)
 802b564:	4413      	add	r3, r2
 802b566:	60bb      	str	r3, [r7, #8]
 802b568:	68bb      	ldr	r3, [r7, #8]
 802b56a:	ea4f 5333 	mov.w	r3, r3, ror #20
 802b56e:	60bb      	str	r3, [r7, #8]
 802b570:	68ba      	ldr	r2, [r7, #8]
 802b572:	697b      	ldr	r3, [r7, #20]
 802b574:	4413      	add	r3, r2
 802b576:	60bb      	str	r3, [r7, #8]
  MD5STEP(F1, c, d, a, b, in[2] + 0x242070db, 17);
 802b578:	697a      	ldr	r2, [r7, #20]
 802b57a:	693b      	ldr	r3, [r7, #16]
 802b57c:	405a      	eors	r2, r3
 802b57e:	68bb      	ldr	r3, [r7, #8]
 802b580:	401a      	ands	r2, r3
 802b582:	693b      	ldr	r3, [r7, #16]
 802b584:	405a      	eors	r2, r3
 802b586:	683b      	ldr	r3, [r7, #0]
 802b588:	3308      	adds	r3, #8
 802b58a:	681b      	ldr	r3, [r3, #0]
 802b58c:	441a      	add	r2, r3
 802b58e:	68fb      	ldr	r3, [r7, #12]
 802b590:	441a      	add	r2, r3
 802b592:	4b8b      	ldr	r3, [pc, #556]	@ (802b7c0 <mg_md5_transform+0x2c8>)
 802b594:	4413      	add	r3, r2
 802b596:	60fb      	str	r3, [r7, #12]
 802b598:	68fb      	ldr	r3, [r7, #12]
 802b59a:	ea4f 33f3 	mov.w	r3, r3, ror #15
 802b59e:	60fb      	str	r3, [r7, #12]
 802b5a0:	68fa      	ldr	r2, [r7, #12]
 802b5a2:	68bb      	ldr	r3, [r7, #8]
 802b5a4:	4413      	add	r3, r2
 802b5a6:	60fb      	str	r3, [r7, #12]
  MD5STEP(F1, b, c, d, a, in[3] + 0xc1bdceee, 22);
 802b5a8:	68ba      	ldr	r2, [r7, #8]
 802b5aa:	697b      	ldr	r3, [r7, #20]
 802b5ac:	405a      	eors	r2, r3
 802b5ae:	68fb      	ldr	r3, [r7, #12]
 802b5b0:	401a      	ands	r2, r3
 802b5b2:	697b      	ldr	r3, [r7, #20]
 802b5b4:	405a      	eors	r2, r3
 802b5b6:	683b      	ldr	r3, [r7, #0]
 802b5b8:	330c      	adds	r3, #12
 802b5ba:	681b      	ldr	r3, [r3, #0]
 802b5bc:	441a      	add	r2, r3
 802b5be:	693b      	ldr	r3, [r7, #16]
 802b5c0:	441a      	add	r2, r3
 802b5c2:	4b80      	ldr	r3, [pc, #512]	@ (802b7c4 <mg_md5_transform+0x2cc>)
 802b5c4:	4413      	add	r3, r2
 802b5c6:	613b      	str	r3, [r7, #16]
 802b5c8:	693b      	ldr	r3, [r7, #16]
 802b5ca:	ea4f 23b3 	mov.w	r3, r3, ror #10
 802b5ce:	613b      	str	r3, [r7, #16]
 802b5d0:	693a      	ldr	r2, [r7, #16]
 802b5d2:	68fb      	ldr	r3, [r7, #12]
 802b5d4:	4413      	add	r3, r2
 802b5d6:	613b      	str	r3, [r7, #16]
  MD5STEP(F1, a, b, c, d, in[4] + 0xf57c0faf, 7);
 802b5d8:	68fa      	ldr	r2, [r7, #12]
 802b5da:	68bb      	ldr	r3, [r7, #8]
 802b5dc:	405a      	eors	r2, r3
 802b5de:	693b      	ldr	r3, [r7, #16]
 802b5e0:	401a      	ands	r2, r3
 802b5e2:	68bb      	ldr	r3, [r7, #8]
 802b5e4:	405a      	eors	r2, r3
 802b5e6:	683b      	ldr	r3, [r7, #0]
 802b5e8:	3310      	adds	r3, #16
 802b5ea:	681b      	ldr	r3, [r3, #0]
 802b5ec:	441a      	add	r2, r3
 802b5ee:	697b      	ldr	r3, [r7, #20]
 802b5f0:	441a      	add	r2, r3
 802b5f2:	4b75      	ldr	r3, [pc, #468]	@ (802b7c8 <mg_md5_transform+0x2d0>)
 802b5f4:	4413      	add	r3, r2
 802b5f6:	617b      	str	r3, [r7, #20]
 802b5f8:	697b      	ldr	r3, [r7, #20]
 802b5fa:	ea4f 6373 	mov.w	r3, r3, ror #25
 802b5fe:	617b      	str	r3, [r7, #20]
 802b600:	697a      	ldr	r2, [r7, #20]
 802b602:	693b      	ldr	r3, [r7, #16]
 802b604:	4413      	add	r3, r2
 802b606:	617b      	str	r3, [r7, #20]
  MD5STEP(F1, d, a, b, c, in[5] + 0x4787c62a, 12);
 802b608:	693a      	ldr	r2, [r7, #16]
 802b60a:	68fb      	ldr	r3, [r7, #12]
 802b60c:	405a      	eors	r2, r3
 802b60e:	697b      	ldr	r3, [r7, #20]
 802b610:	401a      	ands	r2, r3
 802b612:	68fb      	ldr	r3, [r7, #12]
 802b614:	405a      	eors	r2, r3
 802b616:	683b      	ldr	r3, [r7, #0]
 802b618:	3314      	adds	r3, #20
 802b61a:	681b      	ldr	r3, [r3, #0]
 802b61c:	441a      	add	r2, r3
 802b61e:	68bb      	ldr	r3, [r7, #8]
 802b620:	441a      	add	r2, r3
 802b622:	4b6a      	ldr	r3, [pc, #424]	@ (802b7cc <mg_md5_transform+0x2d4>)
 802b624:	4413      	add	r3, r2
 802b626:	60bb      	str	r3, [r7, #8]
 802b628:	68bb      	ldr	r3, [r7, #8]
 802b62a:	ea4f 5333 	mov.w	r3, r3, ror #20
 802b62e:	60bb      	str	r3, [r7, #8]
 802b630:	68ba      	ldr	r2, [r7, #8]
 802b632:	697b      	ldr	r3, [r7, #20]
 802b634:	4413      	add	r3, r2
 802b636:	60bb      	str	r3, [r7, #8]
  MD5STEP(F1, c, d, a, b, in[6] + 0xa8304613, 17);
 802b638:	697a      	ldr	r2, [r7, #20]
 802b63a:	693b      	ldr	r3, [r7, #16]
 802b63c:	405a      	eors	r2, r3
 802b63e:	68bb      	ldr	r3, [r7, #8]
 802b640:	401a      	ands	r2, r3
 802b642:	693b      	ldr	r3, [r7, #16]
 802b644:	405a      	eors	r2, r3
 802b646:	683b      	ldr	r3, [r7, #0]
 802b648:	3318      	adds	r3, #24
 802b64a:	681b      	ldr	r3, [r3, #0]
 802b64c:	441a      	add	r2, r3
 802b64e:	68fb      	ldr	r3, [r7, #12]
 802b650:	441a      	add	r2, r3
 802b652:	4b5f      	ldr	r3, [pc, #380]	@ (802b7d0 <mg_md5_transform+0x2d8>)
 802b654:	4413      	add	r3, r2
 802b656:	60fb      	str	r3, [r7, #12]
 802b658:	68fb      	ldr	r3, [r7, #12]
 802b65a:	ea4f 33f3 	mov.w	r3, r3, ror #15
 802b65e:	60fb      	str	r3, [r7, #12]
 802b660:	68fa      	ldr	r2, [r7, #12]
 802b662:	68bb      	ldr	r3, [r7, #8]
 802b664:	4413      	add	r3, r2
 802b666:	60fb      	str	r3, [r7, #12]
  MD5STEP(F1, b, c, d, a, in[7] + 0xfd469501, 22);
 802b668:	68ba      	ldr	r2, [r7, #8]
 802b66a:	697b      	ldr	r3, [r7, #20]
 802b66c:	405a      	eors	r2, r3
 802b66e:	68fb      	ldr	r3, [r7, #12]
 802b670:	401a      	ands	r2, r3
 802b672:	697b      	ldr	r3, [r7, #20]
 802b674:	405a      	eors	r2, r3
 802b676:	683b      	ldr	r3, [r7, #0]
 802b678:	331c      	adds	r3, #28
 802b67a:	681b      	ldr	r3, [r3, #0]
 802b67c:	441a      	add	r2, r3
 802b67e:	693b      	ldr	r3, [r7, #16]
 802b680:	441a      	add	r2, r3
 802b682:	4b54      	ldr	r3, [pc, #336]	@ (802b7d4 <mg_md5_transform+0x2dc>)
 802b684:	4413      	add	r3, r2
 802b686:	613b      	str	r3, [r7, #16]
 802b688:	693b      	ldr	r3, [r7, #16]
 802b68a:	ea4f 23b3 	mov.w	r3, r3, ror #10
 802b68e:	613b      	str	r3, [r7, #16]
 802b690:	693a      	ldr	r2, [r7, #16]
 802b692:	68fb      	ldr	r3, [r7, #12]
 802b694:	4413      	add	r3, r2
 802b696:	613b      	str	r3, [r7, #16]
  MD5STEP(F1, a, b, c, d, in[8] + 0x698098d8, 7);
 802b698:	68fa      	ldr	r2, [r7, #12]
 802b69a:	68bb      	ldr	r3, [r7, #8]
 802b69c:	405a      	eors	r2, r3
 802b69e:	693b      	ldr	r3, [r7, #16]
 802b6a0:	401a      	ands	r2, r3
 802b6a2:	68bb      	ldr	r3, [r7, #8]
 802b6a4:	405a      	eors	r2, r3
 802b6a6:	683b      	ldr	r3, [r7, #0]
 802b6a8:	3320      	adds	r3, #32
 802b6aa:	681b      	ldr	r3, [r3, #0]
 802b6ac:	441a      	add	r2, r3
 802b6ae:	697b      	ldr	r3, [r7, #20]
 802b6b0:	441a      	add	r2, r3
 802b6b2:	4b49      	ldr	r3, [pc, #292]	@ (802b7d8 <mg_md5_transform+0x2e0>)
 802b6b4:	4413      	add	r3, r2
 802b6b6:	617b      	str	r3, [r7, #20]
 802b6b8:	697b      	ldr	r3, [r7, #20]
 802b6ba:	ea4f 6373 	mov.w	r3, r3, ror #25
 802b6be:	617b      	str	r3, [r7, #20]
 802b6c0:	697a      	ldr	r2, [r7, #20]
 802b6c2:	693b      	ldr	r3, [r7, #16]
 802b6c4:	4413      	add	r3, r2
 802b6c6:	617b      	str	r3, [r7, #20]
  MD5STEP(F1, d, a, b, c, in[9] + 0x8b44f7af, 12);
 802b6c8:	693a      	ldr	r2, [r7, #16]
 802b6ca:	68fb      	ldr	r3, [r7, #12]
 802b6cc:	405a      	eors	r2, r3
 802b6ce:	697b      	ldr	r3, [r7, #20]
 802b6d0:	401a      	ands	r2, r3
 802b6d2:	68fb      	ldr	r3, [r7, #12]
 802b6d4:	405a      	eors	r2, r3
 802b6d6:	683b      	ldr	r3, [r7, #0]
 802b6d8:	3324      	adds	r3, #36	@ 0x24
 802b6da:	681b      	ldr	r3, [r3, #0]
 802b6dc:	441a      	add	r2, r3
 802b6de:	68bb      	ldr	r3, [r7, #8]
 802b6e0:	441a      	add	r2, r3
 802b6e2:	4b3e      	ldr	r3, [pc, #248]	@ (802b7dc <mg_md5_transform+0x2e4>)
 802b6e4:	4413      	add	r3, r2
 802b6e6:	60bb      	str	r3, [r7, #8]
 802b6e8:	68bb      	ldr	r3, [r7, #8]
 802b6ea:	ea4f 5333 	mov.w	r3, r3, ror #20
 802b6ee:	60bb      	str	r3, [r7, #8]
 802b6f0:	68ba      	ldr	r2, [r7, #8]
 802b6f2:	697b      	ldr	r3, [r7, #20]
 802b6f4:	4413      	add	r3, r2
 802b6f6:	60bb      	str	r3, [r7, #8]
  MD5STEP(F1, c, d, a, b, in[10] + 0xffff5bb1, 17);
 802b6f8:	697a      	ldr	r2, [r7, #20]
 802b6fa:	693b      	ldr	r3, [r7, #16]
 802b6fc:	405a      	eors	r2, r3
 802b6fe:	68bb      	ldr	r3, [r7, #8]
 802b700:	401a      	ands	r2, r3
 802b702:	693b      	ldr	r3, [r7, #16]
 802b704:	405a      	eors	r2, r3
 802b706:	683b      	ldr	r3, [r7, #0]
 802b708:	3328      	adds	r3, #40	@ 0x28
 802b70a:	681b      	ldr	r3, [r3, #0]
 802b70c:	441a      	add	r2, r3
 802b70e:	68fb      	ldr	r3, [r7, #12]
 802b710:	4413      	add	r3, r2
 802b712:	f5a3 4324 	sub.w	r3, r3, #41984	@ 0xa400
 802b716:	3b4f      	subs	r3, #79	@ 0x4f
 802b718:	60fb      	str	r3, [r7, #12]
 802b71a:	68fb      	ldr	r3, [r7, #12]
 802b71c:	ea4f 33f3 	mov.w	r3, r3, ror #15
 802b720:	60fb      	str	r3, [r7, #12]
 802b722:	68fa      	ldr	r2, [r7, #12]
 802b724:	68bb      	ldr	r3, [r7, #8]
 802b726:	4413      	add	r3, r2
 802b728:	60fb      	str	r3, [r7, #12]
  MD5STEP(F1, b, c, d, a, in[11] + 0x895cd7be, 22);
 802b72a:	68ba      	ldr	r2, [r7, #8]
 802b72c:	697b      	ldr	r3, [r7, #20]
 802b72e:	405a      	eors	r2, r3
 802b730:	68fb      	ldr	r3, [r7, #12]
 802b732:	401a      	ands	r2, r3
 802b734:	697b      	ldr	r3, [r7, #20]
 802b736:	405a      	eors	r2, r3
 802b738:	683b      	ldr	r3, [r7, #0]
 802b73a:	332c      	adds	r3, #44	@ 0x2c
 802b73c:	681b      	ldr	r3, [r3, #0]
 802b73e:	441a      	add	r2, r3
 802b740:	693b      	ldr	r3, [r7, #16]
 802b742:	441a      	add	r2, r3
 802b744:	4b26      	ldr	r3, [pc, #152]	@ (802b7e0 <mg_md5_transform+0x2e8>)
 802b746:	4413      	add	r3, r2
 802b748:	613b      	str	r3, [r7, #16]
 802b74a:	693b      	ldr	r3, [r7, #16]
 802b74c:	ea4f 23b3 	mov.w	r3, r3, ror #10
 802b750:	613b      	str	r3, [r7, #16]
 802b752:	693a      	ldr	r2, [r7, #16]
 802b754:	68fb      	ldr	r3, [r7, #12]
 802b756:	4413      	add	r3, r2
 802b758:	613b      	str	r3, [r7, #16]
  MD5STEP(F1, a, b, c, d, in[12] + 0x6b901122, 7);
 802b75a:	68fa      	ldr	r2, [r7, #12]
 802b75c:	68bb      	ldr	r3, [r7, #8]
 802b75e:	405a      	eors	r2, r3
 802b760:	693b      	ldr	r3, [r7, #16]
 802b762:	401a      	ands	r2, r3
 802b764:	68bb      	ldr	r3, [r7, #8]
 802b766:	405a      	eors	r2, r3
 802b768:	683b      	ldr	r3, [r7, #0]
 802b76a:	3330      	adds	r3, #48	@ 0x30
 802b76c:	681b      	ldr	r3, [r3, #0]
 802b76e:	441a      	add	r2, r3
 802b770:	697b      	ldr	r3, [r7, #20]
 802b772:	441a      	add	r2, r3
 802b774:	4b1b      	ldr	r3, [pc, #108]	@ (802b7e4 <mg_md5_transform+0x2ec>)
 802b776:	4413      	add	r3, r2
 802b778:	617b      	str	r3, [r7, #20]
 802b77a:	697b      	ldr	r3, [r7, #20]
 802b77c:	ea4f 6373 	mov.w	r3, r3, ror #25
 802b780:	617b      	str	r3, [r7, #20]
 802b782:	697a      	ldr	r2, [r7, #20]
 802b784:	693b      	ldr	r3, [r7, #16]
 802b786:	4413      	add	r3, r2
 802b788:	617b      	str	r3, [r7, #20]
  MD5STEP(F1, d, a, b, c, in[13] + 0xfd987193, 12);
 802b78a:	693a      	ldr	r2, [r7, #16]
 802b78c:	68fb      	ldr	r3, [r7, #12]
 802b78e:	405a      	eors	r2, r3
 802b790:	697b      	ldr	r3, [r7, #20]
 802b792:	401a      	ands	r2, r3
 802b794:	68fb      	ldr	r3, [r7, #12]
 802b796:	405a      	eors	r2, r3
 802b798:	683b      	ldr	r3, [r7, #0]
 802b79a:	3334      	adds	r3, #52	@ 0x34
 802b79c:	681b      	ldr	r3, [r3, #0]
 802b79e:	441a      	add	r2, r3
 802b7a0:	68bb      	ldr	r3, [r7, #8]
 802b7a2:	441a      	add	r2, r3
 802b7a4:	4b10      	ldr	r3, [pc, #64]	@ (802b7e8 <mg_md5_transform+0x2f0>)
 802b7a6:	4413      	add	r3, r2
 802b7a8:	60bb      	str	r3, [r7, #8]
 802b7aa:	68bb      	ldr	r3, [r7, #8]
 802b7ac:	ea4f 5333 	mov.w	r3, r3, ror #20
 802b7b0:	60bb      	str	r3, [r7, #8]
 802b7b2:	68ba      	ldr	r2, [r7, #8]
 802b7b4:	e01a      	b.n	802b7ec <mg_md5_transform+0x2f4>
 802b7b6:	bf00      	nop
 802b7b8:	d76aa478 	.word	0xd76aa478
 802b7bc:	e8c7b756 	.word	0xe8c7b756
 802b7c0:	242070db 	.word	0x242070db
 802b7c4:	c1bdceee 	.word	0xc1bdceee
 802b7c8:	f57c0faf 	.word	0xf57c0faf
 802b7cc:	4787c62a 	.word	0x4787c62a
 802b7d0:	a8304613 	.word	0xa8304613
 802b7d4:	fd469501 	.word	0xfd469501
 802b7d8:	698098d8 	.word	0x698098d8
 802b7dc:	8b44f7af 	.word	0x8b44f7af
 802b7e0:	895cd7be 	.word	0x895cd7be
 802b7e4:	6b901122 	.word	0x6b901122
 802b7e8:	fd987193 	.word	0xfd987193
 802b7ec:	697b      	ldr	r3, [r7, #20]
 802b7ee:	4413      	add	r3, r2
 802b7f0:	60bb      	str	r3, [r7, #8]
  MD5STEP(F1, c, d, a, b, in[14] + 0xa679438e, 17);
 802b7f2:	697a      	ldr	r2, [r7, #20]
 802b7f4:	693b      	ldr	r3, [r7, #16]
 802b7f6:	405a      	eors	r2, r3
 802b7f8:	68bb      	ldr	r3, [r7, #8]
 802b7fa:	401a      	ands	r2, r3
 802b7fc:	693b      	ldr	r3, [r7, #16]
 802b7fe:	405a      	eors	r2, r3
 802b800:	683b      	ldr	r3, [r7, #0]
 802b802:	3338      	adds	r3, #56	@ 0x38
 802b804:	681b      	ldr	r3, [r3, #0]
 802b806:	441a      	add	r2, r3
 802b808:	68fb      	ldr	r3, [r7, #12]
 802b80a:	441a      	add	r2, r3
 802b80c:	4ba0      	ldr	r3, [pc, #640]	@ (802ba90 <mg_md5_transform+0x598>)
 802b80e:	4413      	add	r3, r2
 802b810:	60fb      	str	r3, [r7, #12]
 802b812:	68fb      	ldr	r3, [r7, #12]
 802b814:	ea4f 33f3 	mov.w	r3, r3, ror #15
 802b818:	60fb      	str	r3, [r7, #12]
 802b81a:	68fa      	ldr	r2, [r7, #12]
 802b81c:	68bb      	ldr	r3, [r7, #8]
 802b81e:	4413      	add	r3, r2
 802b820:	60fb      	str	r3, [r7, #12]
  MD5STEP(F1, b, c, d, a, in[15] + 0x49b40821, 22);
 802b822:	68ba      	ldr	r2, [r7, #8]
 802b824:	697b      	ldr	r3, [r7, #20]
 802b826:	405a      	eors	r2, r3
 802b828:	68fb      	ldr	r3, [r7, #12]
 802b82a:	401a      	ands	r2, r3
 802b82c:	697b      	ldr	r3, [r7, #20]
 802b82e:	405a      	eors	r2, r3
 802b830:	683b      	ldr	r3, [r7, #0]
 802b832:	333c      	adds	r3, #60	@ 0x3c
 802b834:	681b      	ldr	r3, [r3, #0]
 802b836:	441a      	add	r2, r3
 802b838:	693b      	ldr	r3, [r7, #16]
 802b83a:	441a      	add	r2, r3
 802b83c:	4b95      	ldr	r3, [pc, #596]	@ (802ba94 <mg_md5_transform+0x59c>)
 802b83e:	4413      	add	r3, r2
 802b840:	613b      	str	r3, [r7, #16]
 802b842:	693b      	ldr	r3, [r7, #16]
 802b844:	ea4f 23b3 	mov.w	r3, r3, ror #10
 802b848:	613b      	str	r3, [r7, #16]
 802b84a:	693a      	ldr	r2, [r7, #16]
 802b84c:	68fb      	ldr	r3, [r7, #12]
 802b84e:	4413      	add	r3, r2
 802b850:	613b      	str	r3, [r7, #16]

  MD5STEP(F2, a, b, c, d, in[1] + 0xf61e2562, 5);
 802b852:	693a      	ldr	r2, [r7, #16]
 802b854:	68fb      	ldr	r3, [r7, #12]
 802b856:	405a      	eors	r2, r3
 802b858:	68bb      	ldr	r3, [r7, #8]
 802b85a:	401a      	ands	r2, r3
 802b85c:	68fb      	ldr	r3, [r7, #12]
 802b85e:	405a      	eors	r2, r3
 802b860:	683b      	ldr	r3, [r7, #0]
 802b862:	3304      	adds	r3, #4
 802b864:	681b      	ldr	r3, [r3, #0]
 802b866:	441a      	add	r2, r3
 802b868:	697b      	ldr	r3, [r7, #20]
 802b86a:	441a      	add	r2, r3
 802b86c:	4b8a      	ldr	r3, [pc, #552]	@ (802ba98 <mg_md5_transform+0x5a0>)
 802b86e:	4413      	add	r3, r2
 802b870:	617b      	str	r3, [r7, #20]
 802b872:	697b      	ldr	r3, [r7, #20]
 802b874:	ea4f 63f3 	mov.w	r3, r3, ror #27
 802b878:	617b      	str	r3, [r7, #20]
 802b87a:	697a      	ldr	r2, [r7, #20]
 802b87c:	693b      	ldr	r3, [r7, #16]
 802b87e:	4413      	add	r3, r2
 802b880:	617b      	str	r3, [r7, #20]
  MD5STEP(F2, d, a, b, c, in[6] + 0xc040b340, 9);
 802b882:	697a      	ldr	r2, [r7, #20]
 802b884:	693b      	ldr	r3, [r7, #16]
 802b886:	405a      	eors	r2, r3
 802b888:	68fb      	ldr	r3, [r7, #12]
 802b88a:	401a      	ands	r2, r3
 802b88c:	693b      	ldr	r3, [r7, #16]
 802b88e:	405a      	eors	r2, r3
 802b890:	683b      	ldr	r3, [r7, #0]
 802b892:	3318      	adds	r3, #24
 802b894:	681b      	ldr	r3, [r3, #0]
 802b896:	441a      	add	r2, r3
 802b898:	68bb      	ldr	r3, [r7, #8]
 802b89a:	441a      	add	r2, r3
 802b89c:	4b7f      	ldr	r3, [pc, #508]	@ (802ba9c <mg_md5_transform+0x5a4>)
 802b89e:	4413      	add	r3, r2
 802b8a0:	60bb      	str	r3, [r7, #8]
 802b8a2:	68bb      	ldr	r3, [r7, #8]
 802b8a4:	ea4f 53f3 	mov.w	r3, r3, ror #23
 802b8a8:	60bb      	str	r3, [r7, #8]
 802b8aa:	68ba      	ldr	r2, [r7, #8]
 802b8ac:	697b      	ldr	r3, [r7, #20]
 802b8ae:	4413      	add	r3, r2
 802b8b0:	60bb      	str	r3, [r7, #8]
  MD5STEP(F2, c, d, a, b, in[11] + 0x265e5a51, 14);
 802b8b2:	68ba      	ldr	r2, [r7, #8]
 802b8b4:	697b      	ldr	r3, [r7, #20]
 802b8b6:	405a      	eors	r2, r3
 802b8b8:	693b      	ldr	r3, [r7, #16]
 802b8ba:	401a      	ands	r2, r3
 802b8bc:	697b      	ldr	r3, [r7, #20]
 802b8be:	405a      	eors	r2, r3
 802b8c0:	683b      	ldr	r3, [r7, #0]
 802b8c2:	332c      	adds	r3, #44	@ 0x2c
 802b8c4:	681b      	ldr	r3, [r3, #0]
 802b8c6:	441a      	add	r2, r3
 802b8c8:	68fb      	ldr	r3, [r7, #12]
 802b8ca:	441a      	add	r2, r3
 802b8cc:	4b74      	ldr	r3, [pc, #464]	@ (802baa0 <mg_md5_transform+0x5a8>)
 802b8ce:	4413      	add	r3, r2
 802b8d0:	60fb      	str	r3, [r7, #12]
 802b8d2:	68fb      	ldr	r3, [r7, #12]
 802b8d4:	ea4f 43b3 	mov.w	r3, r3, ror #18
 802b8d8:	60fb      	str	r3, [r7, #12]
 802b8da:	68fa      	ldr	r2, [r7, #12]
 802b8dc:	68bb      	ldr	r3, [r7, #8]
 802b8de:	4413      	add	r3, r2
 802b8e0:	60fb      	str	r3, [r7, #12]
  MD5STEP(F2, b, c, d, a, in[0] + 0xe9b6c7aa, 20);
 802b8e2:	68fa      	ldr	r2, [r7, #12]
 802b8e4:	68bb      	ldr	r3, [r7, #8]
 802b8e6:	405a      	eors	r2, r3
 802b8e8:	697b      	ldr	r3, [r7, #20]
 802b8ea:	401a      	ands	r2, r3
 802b8ec:	68bb      	ldr	r3, [r7, #8]
 802b8ee:	405a      	eors	r2, r3
 802b8f0:	683b      	ldr	r3, [r7, #0]
 802b8f2:	681b      	ldr	r3, [r3, #0]
 802b8f4:	441a      	add	r2, r3
 802b8f6:	693b      	ldr	r3, [r7, #16]
 802b8f8:	441a      	add	r2, r3
 802b8fa:	4b6a      	ldr	r3, [pc, #424]	@ (802baa4 <mg_md5_transform+0x5ac>)
 802b8fc:	4413      	add	r3, r2
 802b8fe:	613b      	str	r3, [r7, #16]
 802b900:	693b      	ldr	r3, [r7, #16]
 802b902:	ea4f 3333 	mov.w	r3, r3, ror #12
 802b906:	613b      	str	r3, [r7, #16]
 802b908:	693a      	ldr	r2, [r7, #16]
 802b90a:	68fb      	ldr	r3, [r7, #12]
 802b90c:	4413      	add	r3, r2
 802b90e:	613b      	str	r3, [r7, #16]
  MD5STEP(F2, a, b, c, d, in[5] + 0xd62f105d, 5);
 802b910:	693a      	ldr	r2, [r7, #16]
 802b912:	68fb      	ldr	r3, [r7, #12]
 802b914:	405a      	eors	r2, r3
 802b916:	68bb      	ldr	r3, [r7, #8]
 802b918:	401a      	ands	r2, r3
 802b91a:	68fb      	ldr	r3, [r7, #12]
 802b91c:	405a      	eors	r2, r3
 802b91e:	683b      	ldr	r3, [r7, #0]
 802b920:	3314      	adds	r3, #20
 802b922:	681b      	ldr	r3, [r3, #0]
 802b924:	441a      	add	r2, r3
 802b926:	697b      	ldr	r3, [r7, #20]
 802b928:	441a      	add	r2, r3
 802b92a:	4b5f      	ldr	r3, [pc, #380]	@ (802baa8 <mg_md5_transform+0x5b0>)
 802b92c:	4413      	add	r3, r2
 802b92e:	617b      	str	r3, [r7, #20]
 802b930:	697b      	ldr	r3, [r7, #20]
 802b932:	ea4f 63f3 	mov.w	r3, r3, ror #27
 802b936:	617b      	str	r3, [r7, #20]
 802b938:	697a      	ldr	r2, [r7, #20]
 802b93a:	693b      	ldr	r3, [r7, #16]
 802b93c:	4413      	add	r3, r2
 802b93e:	617b      	str	r3, [r7, #20]
  MD5STEP(F2, d, a, b, c, in[10] + 0x02441453, 9);
 802b940:	697a      	ldr	r2, [r7, #20]
 802b942:	693b      	ldr	r3, [r7, #16]
 802b944:	405a      	eors	r2, r3
 802b946:	68fb      	ldr	r3, [r7, #12]
 802b948:	401a      	ands	r2, r3
 802b94a:	693b      	ldr	r3, [r7, #16]
 802b94c:	405a      	eors	r2, r3
 802b94e:	683b      	ldr	r3, [r7, #0]
 802b950:	3328      	adds	r3, #40	@ 0x28
 802b952:	681b      	ldr	r3, [r3, #0]
 802b954:	441a      	add	r2, r3
 802b956:	68bb      	ldr	r3, [r7, #8]
 802b958:	441a      	add	r2, r3
 802b95a:	4b54      	ldr	r3, [pc, #336]	@ (802baac <mg_md5_transform+0x5b4>)
 802b95c:	4413      	add	r3, r2
 802b95e:	60bb      	str	r3, [r7, #8]
 802b960:	68bb      	ldr	r3, [r7, #8]
 802b962:	ea4f 53f3 	mov.w	r3, r3, ror #23
 802b966:	60bb      	str	r3, [r7, #8]
 802b968:	68ba      	ldr	r2, [r7, #8]
 802b96a:	697b      	ldr	r3, [r7, #20]
 802b96c:	4413      	add	r3, r2
 802b96e:	60bb      	str	r3, [r7, #8]
  MD5STEP(F2, c, d, a, b, in[15] + 0xd8a1e681, 14);
 802b970:	68ba      	ldr	r2, [r7, #8]
 802b972:	697b      	ldr	r3, [r7, #20]
 802b974:	405a      	eors	r2, r3
 802b976:	693b      	ldr	r3, [r7, #16]
 802b978:	401a      	ands	r2, r3
 802b97a:	697b      	ldr	r3, [r7, #20]
 802b97c:	405a      	eors	r2, r3
 802b97e:	683b      	ldr	r3, [r7, #0]
 802b980:	333c      	adds	r3, #60	@ 0x3c
 802b982:	681b      	ldr	r3, [r3, #0]
 802b984:	441a      	add	r2, r3
 802b986:	68fb      	ldr	r3, [r7, #12]
 802b988:	441a      	add	r2, r3
 802b98a:	4b49      	ldr	r3, [pc, #292]	@ (802bab0 <mg_md5_transform+0x5b8>)
 802b98c:	4413      	add	r3, r2
 802b98e:	60fb      	str	r3, [r7, #12]
 802b990:	68fb      	ldr	r3, [r7, #12]
 802b992:	ea4f 43b3 	mov.w	r3, r3, ror #18
 802b996:	60fb      	str	r3, [r7, #12]
 802b998:	68fa      	ldr	r2, [r7, #12]
 802b99a:	68bb      	ldr	r3, [r7, #8]
 802b99c:	4413      	add	r3, r2
 802b99e:	60fb      	str	r3, [r7, #12]
  MD5STEP(F2, b, c, d, a, in[4] + 0xe7d3fbc8, 20);
 802b9a0:	68fa      	ldr	r2, [r7, #12]
 802b9a2:	68bb      	ldr	r3, [r7, #8]
 802b9a4:	405a      	eors	r2, r3
 802b9a6:	697b      	ldr	r3, [r7, #20]
 802b9a8:	401a      	ands	r2, r3
 802b9aa:	68bb      	ldr	r3, [r7, #8]
 802b9ac:	405a      	eors	r2, r3
 802b9ae:	683b      	ldr	r3, [r7, #0]
 802b9b0:	3310      	adds	r3, #16
 802b9b2:	681b      	ldr	r3, [r3, #0]
 802b9b4:	441a      	add	r2, r3
 802b9b6:	693b      	ldr	r3, [r7, #16]
 802b9b8:	441a      	add	r2, r3
 802b9ba:	4b3e      	ldr	r3, [pc, #248]	@ (802bab4 <mg_md5_transform+0x5bc>)
 802b9bc:	4413      	add	r3, r2
 802b9be:	613b      	str	r3, [r7, #16]
 802b9c0:	693b      	ldr	r3, [r7, #16]
 802b9c2:	ea4f 3333 	mov.w	r3, r3, ror #12
 802b9c6:	613b      	str	r3, [r7, #16]
 802b9c8:	693a      	ldr	r2, [r7, #16]
 802b9ca:	68fb      	ldr	r3, [r7, #12]
 802b9cc:	4413      	add	r3, r2
 802b9ce:	613b      	str	r3, [r7, #16]
  MD5STEP(F2, a, b, c, d, in[9] + 0x21e1cde6, 5);
 802b9d0:	693a      	ldr	r2, [r7, #16]
 802b9d2:	68fb      	ldr	r3, [r7, #12]
 802b9d4:	405a      	eors	r2, r3
 802b9d6:	68bb      	ldr	r3, [r7, #8]
 802b9d8:	401a      	ands	r2, r3
 802b9da:	68fb      	ldr	r3, [r7, #12]
 802b9dc:	405a      	eors	r2, r3
 802b9de:	683b      	ldr	r3, [r7, #0]
 802b9e0:	3324      	adds	r3, #36	@ 0x24
 802b9e2:	681b      	ldr	r3, [r3, #0]
 802b9e4:	441a      	add	r2, r3
 802b9e6:	697b      	ldr	r3, [r7, #20]
 802b9e8:	441a      	add	r2, r3
 802b9ea:	4b33      	ldr	r3, [pc, #204]	@ (802bab8 <mg_md5_transform+0x5c0>)
 802b9ec:	4413      	add	r3, r2
 802b9ee:	617b      	str	r3, [r7, #20]
 802b9f0:	697b      	ldr	r3, [r7, #20]
 802b9f2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 802b9f6:	617b      	str	r3, [r7, #20]
 802b9f8:	697a      	ldr	r2, [r7, #20]
 802b9fa:	693b      	ldr	r3, [r7, #16]
 802b9fc:	4413      	add	r3, r2
 802b9fe:	617b      	str	r3, [r7, #20]
  MD5STEP(F2, d, a, b, c, in[14] + 0xc33707d6, 9);
 802ba00:	697a      	ldr	r2, [r7, #20]
 802ba02:	693b      	ldr	r3, [r7, #16]
 802ba04:	405a      	eors	r2, r3
 802ba06:	68fb      	ldr	r3, [r7, #12]
 802ba08:	401a      	ands	r2, r3
 802ba0a:	693b      	ldr	r3, [r7, #16]
 802ba0c:	405a      	eors	r2, r3
 802ba0e:	683b      	ldr	r3, [r7, #0]
 802ba10:	3338      	adds	r3, #56	@ 0x38
 802ba12:	681b      	ldr	r3, [r3, #0]
 802ba14:	441a      	add	r2, r3
 802ba16:	68bb      	ldr	r3, [r7, #8]
 802ba18:	441a      	add	r2, r3
 802ba1a:	4b28      	ldr	r3, [pc, #160]	@ (802babc <mg_md5_transform+0x5c4>)
 802ba1c:	4413      	add	r3, r2
 802ba1e:	60bb      	str	r3, [r7, #8]
 802ba20:	68bb      	ldr	r3, [r7, #8]
 802ba22:	ea4f 53f3 	mov.w	r3, r3, ror #23
 802ba26:	60bb      	str	r3, [r7, #8]
 802ba28:	68ba      	ldr	r2, [r7, #8]
 802ba2a:	697b      	ldr	r3, [r7, #20]
 802ba2c:	4413      	add	r3, r2
 802ba2e:	60bb      	str	r3, [r7, #8]
  MD5STEP(F2, c, d, a, b, in[3] + 0xf4d50d87, 14);
 802ba30:	68ba      	ldr	r2, [r7, #8]
 802ba32:	697b      	ldr	r3, [r7, #20]
 802ba34:	405a      	eors	r2, r3
 802ba36:	693b      	ldr	r3, [r7, #16]
 802ba38:	401a      	ands	r2, r3
 802ba3a:	697b      	ldr	r3, [r7, #20]
 802ba3c:	405a      	eors	r2, r3
 802ba3e:	683b      	ldr	r3, [r7, #0]
 802ba40:	330c      	adds	r3, #12
 802ba42:	681b      	ldr	r3, [r3, #0]
 802ba44:	441a      	add	r2, r3
 802ba46:	68fb      	ldr	r3, [r7, #12]
 802ba48:	441a      	add	r2, r3
 802ba4a:	4b1d      	ldr	r3, [pc, #116]	@ (802bac0 <mg_md5_transform+0x5c8>)
 802ba4c:	4413      	add	r3, r2
 802ba4e:	60fb      	str	r3, [r7, #12]
 802ba50:	68fb      	ldr	r3, [r7, #12]
 802ba52:	ea4f 43b3 	mov.w	r3, r3, ror #18
 802ba56:	60fb      	str	r3, [r7, #12]
 802ba58:	68fa      	ldr	r2, [r7, #12]
 802ba5a:	68bb      	ldr	r3, [r7, #8]
 802ba5c:	4413      	add	r3, r2
 802ba5e:	60fb      	str	r3, [r7, #12]
  MD5STEP(F2, b, c, d, a, in[8] + 0x455a14ed, 20);
 802ba60:	68fa      	ldr	r2, [r7, #12]
 802ba62:	68bb      	ldr	r3, [r7, #8]
 802ba64:	405a      	eors	r2, r3
 802ba66:	697b      	ldr	r3, [r7, #20]
 802ba68:	401a      	ands	r2, r3
 802ba6a:	68bb      	ldr	r3, [r7, #8]
 802ba6c:	405a      	eors	r2, r3
 802ba6e:	683b      	ldr	r3, [r7, #0]
 802ba70:	3320      	adds	r3, #32
 802ba72:	681b      	ldr	r3, [r3, #0]
 802ba74:	441a      	add	r2, r3
 802ba76:	693b      	ldr	r3, [r7, #16]
 802ba78:	441a      	add	r2, r3
 802ba7a:	4b12      	ldr	r3, [pc, #72]	@ (802bac4 <mg_md5_transform+0x5cc>)
 802ba7c:	4413      	add	r3, r2
 802ba7e:	613b      	str	r3, [r7, #16]
 802ba80:	693b      	ldr	r3, [r7, #16]
 802ba82:	ea4f 3333 	mov.w	r3, r3, ror #12
 802ba86:	613b      	str	r3, [r7, #16]
 802ba88:	693a      	ldr	r2, [r7, #16]
 802ba8a:	68fb      	ldr	r3, [r7, #12]
 802ba8c:	e01c      	b.n	802bac8 <mg_md5_transform+0x5d0>
 802ba8e:	bf00      	nop
 802ba90:	a679438e 	.word	0xa679438e
 802ba94:	49b40821 	.word	0x49b40821
 802ba98:	f61e2562 	.word	0xf61e2562
 802ba9c:	c040b340 	.word	0xc040b340
 802baa0:	265e5a51 	.word	0x265e5a51
 802baa4:	e9b6c7aa 	.word	0xe9b6c7aa
 802baa8:	d62f105d 	.word	0xd62f105d
 802baac:	02441453 	.word	0x02441453
 802bab0:	d8a1e681 	.word	0xd8a1e681
 802bab4:	e7d3fbc8 	.word	0xe7d3fbc8
 802bab8:	21e1cde6 	.word	0x21e1cde6
 802babc:	c33707d6 	.word	0xc33707d6
 802bac0:	f4d50d87 	.word	0xf4d50d87
 802bac4:	455a14ed 	.word	0x455a14ed
 802bac8:	4413      	add	r3, r2
 802baca:	613b      	str	r3, [r7, #16]
  MD5STEP(F2, a, b, c, d, in[13] + 0xa9e3e905, 5);
 802bacc:	693a      	ldr	r2, [r7, #16]
 802bace:	68fb      	ldr	r3, [r7, #12]
 802bad0:	405a      	eors	r2, r3
 802bad2:	68bb      	ldr	r3, [r7, #8]
 802bad4:	401a      	ands	r2, r3
 802bad6:	68fb      	ldr	r3, [r7, #12]
 802bad8:	405a      	eors	r2, r3
 802bada:	683b      	ldr	r3, [r7, #0]
 802badc:	3334      	adds	r3, #52	@ 0x34
 802bade:	681b      	ldr	r3, [r3, #0]
 802bae0:	441a      	add	r2, r3
 802bae2:	697b      	ldr	r3, [r7, #20]
 802bae4:	441a      	add	r2, r3
 802bae6:	4ba1      	ldr	r3, [pc, #644]	@ (802bd6c <mg_md5_transform+0x874>)
 802bae8:	4413      	add	r3, r2
 802baea:	617b      	str	r3, [r7, #20]
 802baec:	697b      	ldr	r3, [r7, #20]
 802baee:	ea4f 63f3 	mov.w	r3, r3, ror #27
 802baf2:	617b      	str	r3, [r7, #20]
 802baf4:	697a      	ldr	r2, [r7, #20]
 802baf6:	693b      	ldr	r3, [r7, #16]
 802baf8:	4413      	add	r3, r2
 802bafa:	617b      	str	r3, [r7, #20]
  MD5STEP(F2, d, a, b, c, in[2] + 0xfcefa3f8, 9);
 802bafc:	697a      	ldr	r2, [r7, #20]
 802bafe:	693b      	ldr	r3, [r7, #16]
 802bb00:	405a      	eors	r2, r3
 802bb02:	68fb      	ldr	r3, [r7, #12]
 802bb04:	401a      	ands	r2, r3
 802bb06:	693b      	ldr	r3, [r7, #16]
 802bb08:	405a      	eors	r2, r3
 802bb0a:	683b      	ldr	r3, [r7, #0]
 802bb0c:	3308      	adds	r3, #8
 802bb0e:	681b      	ldr	r3, [r3, #0]
 802bb10:	441a      	add	r2, r3
 802bb12:	68bb      	ldr	r3, [r7, #8]
 802bb14:	441a      	add	r2, r3
 802bb16:	4b96      	ldr	r3, [pc, #600]	@ (802bd70 <mg_md5_transform+0x878>)
 802bb18:	4413      	add	r3, r2
 802bb1a:	60bb      	str	r3, [r7, #8]
 802bb1c:	68bb      	ldr	r3, [r7, #8]
 802bb1e:	ea4f 53f3 	mov.w	r3, r3, ror #23
 802bb22:	60bb      	str	r3, [r7, #8]
 802bb24:	68ba      	ldr	r2, [r7, #8]
 802bb26:	697b      	ldr	r3, [r7, #20]
 802bb28:	4413      	add	r3, r2
 802bb2a:	60bb      	str	r3, [r7, #8]
  MD5STEP(F2, c, d, a, b, in[7] + 0x676f02d9, 14);
 802bb2c:	68ba      	ldr	r2, [r7, #8]
 802bb2e:	697b      	ldr	r3, [r7, #20]
 802bb30:	405a      	eors	r2, r3
 802bb32:	693b      	ldr	r3, [r7, #16]
 802bb34:	401a      	ands	r2, r3
 802bb36:	697b      	ldr	r3, [r7, #20]
 802bb38:	405a      	eors	r2, r3
 802bb3a:	683b      	ldr	r3, [r7, #0]
 802bb3c:	331c      	adds	r3, #28
 802bb3e:	681b      	ldr	r3, [r3, #0]
 802bb40:	441a      	add	r2, r3
 802bb42:	68fb      	ldr	r3, [r7, #12]
 802bb44:	441a      	add	r2, r3
 802bb46:	4b8b      	ldr	r3, [pc, #556]	@ (802bd74 <mg_md5_transform+0x87c>)
 802bb48:	4413      	add	r3, r2
 802bb4a:	60fb      	str	r3, [r7, #12]
 802bb4c:	68fb      	ldr	r3, [r7, #12]
 802bb4e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 802bb52:	60fb      	str	r3, [r7, #12]
 802bb54:	68fa      	ldr	r2, [r7, #12]
 802bb56:	68bb      	ldr	r3, [r7, #8]
 802bb58:	4413      	add	r3, r2
 802bb5a:	60fb      	str	r3, [r7, #12]
  MD5STEP(F2, b, c, d, a, in[12] + 0x8d2a4c8a, 20);
 802bb5c:	68fa      	ldr	r2, [r7, #12]
 802bb5e:	68bb      	ldr	r3, [r7, #8]
 802bb60:	405a      	eors	r2, r3
 802bb62:	697b      	ldr	r3, [r7, #20]
 802bb64:	401a      	ands	r2, r3
 802bb66:	68bb      	ldr	r3, [r7, #8]
 802bb68:	405a      	eors	r2, r3
 802bb6a:	683b      	ldr	r3, [r7, #0]
 802bb6c:	3330      	adds	r3, #48	@ 0x30
 802bb6e:	681b      	ldr	r3, [r3, #0]
 802bb70:	441a      	add	r2, r3
 802bb72:	693b      	ldr	r3, [r7, #16]
 802bb74:	441a      	add	r2, r3
 802bb76:	4b80      	ldr	r3, [pc, #512]	@ (802bd78 <mg_md5_transform+0x880>)
 802bb78:	4413      	add	r3, r2
 802bb7a:	613b      	str	r3, [r7, #16]
 802bb7c:	693b      	ldr	r3, [r7, #16]
 802bb7e:	ea4f 3333 	mov.w	r3, r3, ror #12
 802bb82:	613b      	str	r3, [r7, #16]
 802bb84:	693a      	ldr	r2, [r7, #16]
 802bb86:	68fb      	ldr	r3, [r7, #12]
 802bb88:	4413      	add	r3, r2
 802bb8a:	613b      	str	r3, [r7, #16]

  MD5STEP(F3, a, b, c, d, in[5] + 0xfffa3942, 4);
 802bb8c:	693a      	ldr	r2, [r7, #16]
 802bb8e:	68fb      	ldr	r3, [r7, #12]
 802bb90:	405a      	eors	r2, r3
 802bb92:	68bb      	ldr	r3, [r7, #8]
 802bb94:	405a      	eors	r2, r3
 802bb96:	683b      	ldr	r3, [r7, #0]
 802bb98:	3314      	adds	r3, #20
 802bb9a:	681b      	ldr	r3, [r3, #0]
 802bb9c:	441a      	add	r2, r3
 802bb9e:	697b      	ldr	r3, [r7, #20]
 802bba0:	4413      	add	r3, r2
 802bba2:	f5a3 23b8 	sub.w	r3, r3, #376832	@ 0x5c000
 802bba6:	f2a3 63be 	subw	r3, r3, #1726	@ 0x6be
 802bbaa:	617b      	str	r3, [r7, #20]
 802bbac:	697b      	ldr	r3, [r7, #20]
 802bbae:	ea4f 7333 	mov.w	r3, r3, ror #28
 802bbb2:	617b      	str	r3, [r7, #20]
 802bbb4:	697a      	ldr	r2, [r7, #20]
 802bbb6:	693b      	ldr	r3, [r7, #16]
 802bbb8:	4413      	add	r3, r2
 802bbba:	617b      	str	r3, [r7, #20]
  MD5STEP(F3, d, a, b, c, in[8] + 0x8771f681, 11);
 802bbbc:	697a      	ldr	r2, [r7, #20]
 802bbbe:	693b      	ldr	r3, [r7, #16]
 802bbc0:	405a      	eors	r2, r3
 802bbc2:	68fb      	ldr	r3, [r7, #12]
 802bbc4:	405a      	eors	r2, r3
 802bbc6:	683b      	ldr	r3, [r7, #0]
 802bbc8:	3320      	adds	r3, #32
 802bbca:	681b      	ldr	r3, [r3, #0]
 802bbcc:	441a      	add	r2, r3
 802bbce:	68bb      	ldr	r3, [r7, #8]
 802bbd0:	441a      	add	r2, r3
 802bbd2:	4b6a      	ldr	r3, [pc, #424]	@ (802bd7c <mg_md5_transform+0x884>)
 802bbd4:	4413      	add	r3, r2
 802bbd6:	60bb      	str	r3, [r7, #8]
 802bbd8:	68bb      	ldr	r3, [r7, #8]
 802bbda:	ea4f 5373 	mov.w	r3, r3, ror #21
 802bbde:	60bb      	str	r3, [r7, #8]
 802bbe0:	68ba      	ldr	r2, [r7, #8]
 802bbe2:	697b      	ldr	r3, [r7, #20]
 802bbe4:	4413      	add	r3, r2
 802bbe6:	60bb      	str	r3, [r7, #8]
  MD5STEP(F3, c, d, a, b, in[11] + 0x6d9d6122, 16);
 802bbe8:	68ba      	ldr	r2, [r7, #8]
 802bbea:	697b      	ldr	r3, [r7, #20]
 802bbec:	405a      	eors	r2, r3
 802bbee:	693b      	ldr	r3, [r7, #16]
 802bbf0:	405a      	eors	r2, r3
 802bbf2:	683b      	ldr	r3, [r7, #0]
 802bbf4:	332c      	adds	r3, #44	@ 0x2c
 802bbf6:	681b      	ldr	r3, [r3, #0]
 802bbf8:	441a      	add	r2, r3
 802bbfa:	68fb      	ldr	r3, [r7, #12]
 802bbfc:	441a      	add	r2, r3
 802bbfe:	4b60      	ldr	r3, [pc, #384]	@ (802bd80 <mg_md5_transform+0x888>)
 802bc00:	4413      	add	r3, r2
 802bc02:	60fb      	str	r3, [r7, #12]
 802bc04:	68fb      	ldr	r3, [r7, #12]
 802bc06:	ea4f 4333 	mov.w	r3, r3, ror #16
 802bc0a:	60fb      	str	r3, [r7, #12]
 802bc0c:	68fa      	ldr	r2, [r7, #12]
 802bc0e:	68bb      	ldr	r3, [r7, #8]
 802bc10:	4413      	add	r3, r2
 802bc12:	60fb      	str	r3, [r7, #12]
  MD5STEP(F3, b, c, d, a, in[14] + 0xfde5380c, 23);
 802bc14:	68fa      	ldr	r2, [r7, #12]
 802bc16:	68bb      	ldr	r3, [r7, #8]
 802bc18:	405a      	eors	r2, r3
 802bc1a:	697b      	ldr	r3, [r7, #20]
 802bc1c:	405a      	eors	r2, r3
 802bc1e:	683b      	ldr	r3, [r7, #0]
 802bc20:	3338      	adds	r3, #56	@ 0x38
 802bc22:	681b      	ldr	r3, [r3, #0]
 802bc24:	441a      	add	r2, r3
 802bc26:	693b      	ldr	r3, [r7, #16]
 802bc28:	441a      	add	r2, r3
 802bc2a:	4b56      	ldr	r3, [pc, #344]	@ (802bd84 <mg_md5_transform+0x88c>)
 802bc2c:	4413      	add	r3, r2
 802bc2e:	613b      	str	r3, [r7, #16]
 802bc30:	693b      	ldr	r3, [r7, #16]
 802bc32:	ea4f 2373 	mov.w	r3, r3, ror #9
 802bc36:	613b      	str	r3, [r7, #16]
 802bc38:	693a      	ldr	r2, [r7, #16]
 802bc3a:	68fb      	ldr	r3, [r7, #12]
 802bc3c:	4413      	add	r3, r2
 802bc3e:	613b      	str	r3, [r7, #16]
  MD5STEP(F3, a, b, c, d, in[1] + 0xa4beea44, 4);
 802bc40:	693a      	ldr	r2, [r7, #16]
 802bc42:	68fb      	ldr	r3, [r7, #12]
 802bc44:	405a      	eors	r2, r3
 802bc46:	68bb      	ldr	r3, [r7, #8]
 802bc48:	405a      	eors	r2, r3
 802bc4a:	683b      	ldr	r3, [r7, #0]
 802bc4c:	3304      	adds	r3, #4
 802bc4e:	681b      	ldr	r3, [r3, #0]
 802bc50:	441a      	add	r2, r3
 802bc52:	697b      	ldr	r3, [r7, #20]
 802bc54:	441a      	add	r2, r3
 802bc56:	4b4c      	ldr	r3, [pc, #304]	@ (802bd88 <mg_md5_transform+0x890>)
 802bc58:	4413      	add	r3, r2
 802bc5a:	617b      	str	r3, [r7, #20]
 802bc5c:	697b      	ldr	r3, [r7, #20]
 802bc5e:	ea4f 7333 	mov.w	r3, r3, ror #28
 802bc62:	617b      	str	r3, [r7, #20]
 802bc64:	697a      	ldr	r2, [r7, #20]
 802bc66:	693b      	ldr	r3, [r7, #16]
 802bc68:	4413      	add	r3, r2
 802bc6a:	617b      	str	r3, [r7, #20]
  MD5STEP(F3, d, a, b, c, in[4] + 0x4bdecfa9, 11);
 802bc6c:	697a      	ldr	r2, [r7, #20]
 802bc6e:	693b      	ldr	r3, [r7, #16]
 802bc70:	405a      	eors	r2, r3
 802bc72:	68fb      	ldr	r3, [r7, #12]
 802bc74:	405a      	eors	r2, r3
 802bc76:	683b      	ldr	r3, [r7, #0]
 802bc78:	3310      	adds	r3, #16
 802bc7a:	681b      	ldr	r3, [r3, #0]
 802bc7c:	441a      	add	r2, r3
 802bc7e:	68bb      	ldr	r3, [r7, #8]
 802bc80:	441a      	add	r2, r3
 802bc82:	4b42      	ldr	r3, [pc, #264]	@ (802bd8c <mg_md5_transform+0x894>)
 802bc84:	4413      	add	r3, r2
 802bc86:	60bb      	str	r3, [r7, #8]
 802bc88:	68bb      	ldr	r3, [r7, #8]
 802bc8a:	ea4f 5373 	mov.w	r3, r3, ror #21
 802bc8e:	60bb      	str	r3, [r7, #8]
 802bc90:	68ba      	ldr	r2, [r7, #8]
 802bc92:	697b      	ldr	r3, [r7, #20]
 802bc94:	4413      	add	r3, r2
 802bc96:	60bb      	str	r3, [r7, #8]
  MD5STEP(F3, c, d, a, b, in[7] + 0xf6bb4b60, 16);
 802bc98:	68ba      	ldr	r2, [r7, #8]
 802bc9a:	697b      	ldr	r3, [r7, #20]
 802bc9c:	405a      	eors	r2, r3
 802bc9e:	693b      	ldr	r3, [r7, #16]
 802bca0:	405a      	eors	r2, r3
 802bca2:	683b      	ldr	r3, [r7, #0]
 802bca4:	331c      	adds	r3, #28
 802bca6:	681b      	ldr	r3, [r3, #0]
 802bca8:	441a      	add	r2, r3
 802bcaa:	68fb      	ldr	r3, [r7, #12]
 802bcac:	441a      	add	r2, r3
 802bcae:	4b38      	ldr	r3, [pc, #224]	@ (802bd90 <mg_md5_transform+0x898>)
 802bcb0:	4413      	add	r3, r2
 802bcb2:	60fb      	str	r3, [r7, #12]
 802bcb4:	68fb      	ldr	r3, [r7, #12]
 802bcb6:	ea4f 4333 	mov.w	r3, r3, ror #16
 802bcba:	60fb      	str	r3, [r7, #12]
 802bcbc:	68fa      	ldr	r2, [r7, #12]
 802bcbe:	68bb      	ldr	r3, [r7, #8]
 802bcc0:	4413      	add	r3, r2
 802bcc2:	60fb      	str	r3, [r7, #12]
  MD5STEP(F3, b, c, d, a, in[10] + 0xbebfbc70, 23);
 802bcc4:	68fa      	ldr	r2, [r7, #12]
 802bcc6:	68bb      	ldr	r3, [r7, #8]
 802bcc8:	405a      	eors	r2, r3
 802bcca:	697b      	ldr	r3, [r7, #20]
 802bccc:	405a      	eors	r2, r3
 802bcce:	683b      	ldr	r3, [r7, #0]
 802bcd0:	3328      	adds	r3, #40	@ 0x28
 802bcd2:	681b      	ldr	r3, [r3, #0]
 802bcd4:	441a      	add	r2, r3
 802bcd6:	693b      	ldr	r3, [r7, #16]
 802bcd8:	441a      	add	r2, r3
 802bcda:	4b2e      	ldr	r3, [pc, #184]	@ (802bd94 <mg_md5_transform+0x89c>)
 802bcdc:	4413      	add	r3, r2
 802bcde:	613b      	str	r3, [r7, #16]
 802bce0:	693b      	ldr	r3, [r7, #16]
 802bce2:	ea4f 2373 	mov.w	r3, r3, ror #9
 802bce6:	613b      	str	r3, [r7, #16]
 802bce8:	693a      	ldr	r2, [r7, #16]
 802bcea:	68fb      	ldr	r3, [r7, #12]
 802bcec:	4413      	add	r3, r2
 802bcee:	613b      	str	r3, [r7, #16]
  MD5STEP(F3, a, b, c, d, in[13] + 0x289b7ec6, 4);
 802bcf0:	693a      	ldr	r2, [r7, #16]
 802bcf2:	68fb      	ldr	r3, [r7, #12]
 802bcf4:	405a      	eors	r2, r3
 802bcf6:	68bb      	ldr	r3, [r7, #8]
 802bcf8:	405a      	eors	r2, r3
 802bcfa:	683b      	ldr	r3, [r7, #0]
 802bcfc:	3334      	adds	r3, #52	@ 0x34
 802bcfe:	681b      	ldr	r3, [r3, #0]
 802bd00:	441a      	add	r2, r3
 802bd02:	697b      	ldr	r3, [r7, #20]
 802bd04:	441a      	add	r2, r3
 802bd06:	4b24      	ldr	r3, [pc, #144]	@ (802bd98 <mg_md5_transform+0x8a0>)
 802bd08:	4413      	add	r3, r2
 802bd0a:	617b      	str	r3, [r7, #20]
 802bd0c:	697b      	ldr	r3, [r7, #20]
 802bd0e:	ea4f 7333 	mov.w	r3, r3, ror #28
 802bd12:	617b      	str	r3, [r7, #20]
 802bd14:	697a      	ldr	r2, [r7, #20]
 802bd16:	693b      	ldr	r3, [r7, #16]
 802bd18:	4413      	add	r3, r2
 802bd1a:	617b      	str	r3, [r7, #20]
  MD5STEP(F3, d, a, b, c, in[0] + 0xeaa127fa, 11);
 802bd1c:	697a      	ldr	r2, [r7, #20]
 802bd1e:	693b      	ldr	r3, [r7, #16]
 802bd20:	405a      	eors	r2, r3
 802bd22:	68fb      	ldr	r3, [r7, #12]
 802bd24:	405a      	eors	r2, r3
 802bd26:	683b      	ldr	r3, [r7, #0]
 802bd28:	681b      	ldr	r3, [r3, #0]
 802bd2a:	441a      	add	r2, r3
 802bd2c:	68bb      	ldr	r3, [r7, #8]
 802bd2e:	441a      	add	r2, r3
 802bd30:	4b1a      	ldr	r3, [pc, #104]	@ (802bd9c <mg_md5_transform+0x8a4>)
 802bd32:	4413      	add	r3, r2
 802bd34:	60bb      	str	r3, [r7, #8]
 802bd36:	68bb      	ldr	r3, [r7, #8]
 802bd38:	ea4f 5373 	mov.w	r3, r3, ror #21
 802bd3c:	60bb      	str	r3, [r7, #8]
 802bd3e:	68ba      	ldr	r2, [r7, #8]
 802bd40:	697b      	ldr	r3, [r7, #20]
 802bd42:	4413      	add	r3, r2
 802bd44:	60bb      	str	r3, [r7, #8]
  MD5STEP(F3, c, d, a, b, in[3] + 0xd4ef3085, 16);
 802bd46:	68ba      	ldr	r2, [r7, #8]
 802bd48:	697b      	ldr	r3, [r7, #20]
 802bd4a:	405a      	eors	r2, r3
 802bd4c:	693b      	ldr	r3, [r7, #16]
 802bd4e:	405a      	eors	r2, r3
 802bd50:	683b      	ldr	r3, [r7, #0]
 802bd52:	330c      	adds	r3, #12
 802bd54:	681b      	ldr	r3, [r3, #0]
 802bd56:	441a      	add	r2, r3
 802bd58:	68fb      	ldr	r3, [r7, #12]
 802bd5a:	441a      	add	r2, r3
 802bd5c:	4b10      	ldr	r3, [pc, #64]	@ (802bda0 <mg_md5_transform+0x8a8>)
 802bd5e:	4413      	add	r3, r2
 802bd60:	60fb      	str	r3, [r7, #12]
 802bd62:	68fb      	ldr	r3, [r7, #12]
 802bd64:	ea4f 4333 	mov.w	r3, r3, ror #16
 802bd68:	e01c      	b.n	802bda4 <mg_md5_transform+0x8ac>
 802bd6a:	bf00      	nop
 802bd6c:	a9e3e905 	.word	0xa9e3e905
 802bd70:	fcefa3f8 	.word	0xfcefa3f8
 802bd74:	676f02d9 	.word	0x676f02d9
 802bd78:	8d2a4c8a 	.word	0x8d2a4c8a
 802bd7c:	8771f681 	.word	0x8771f681
 802bd80:	6d9d6122 	.word	0x6d9d6122
 802bd84:	fde5380c 	.word	0xfde5380c
 802bd88:	a4beea44 	.word	0xa4beea44
 802bd8c:	4bdecfa9 	.word	0x4bdecfa9
 802bd90:	f6bb4b60 	.word	0xf6bb4b60
 802bd94:	bebfbc70 	.word	0xbebfbc70
 802bd98:	289b7ec6 	.word	0x289b7ec6
 802bd9c:	eaa127fa 	.word	0xeaa127fa
 802bda0:	d4ef3085 	.word	0xd4ef3085
 802bda4:	60fb      	str	r3, [r7, #12]
 802bda6:	68fa      	ldr	r2, [r7, #12]
 802bda8:	68bb      	ldr	r3, [r7, #8]
 802bdaa:	4413      	add	r3, r2
 802bdac:	60fb      	str	r3, [r7, #12]
  MD5STEP(F3, b, c, d, a, in[6] + 0x04881d05, 23);
 802bdae:	68fa      	ldr	r2, [r7, #12]
 802bdb0:	68bb      	ldr	r3, [r7, #8]
 802bdb2:	405a      	eors	r2, r3
 802bdb4:	697b      	ldr	r3, [r7, #20]
 802bdb6:	405a      	eors	r2, r3
 802bdb8:	683b      	ldr	r3, [r7, #0]
 802bdba:	3318      	adds	r3, #24
 802bdbc:	681b      	ldr	r3, [r3, #0]
 802bdbe:	441a      	add	r2, r3
 802bdc0:	693b      	ldr	r3, [r7, #16]
 802bdc2:	441a      	add	r2, r3
 802bdc4:	4ba1      	ldr	r3, [pc, #644]	@ (802c04c <mg_md5_transform+0xb54>)
 802bdc6:	4413      	add	r3, r2
 802bdc8:	613b      	str	r3, [r7, #16]
 802bdca:	693b      	ldr	r3, [r7, #16]
 802bdcc:	ea4f 2373 	mov.w	r3, r3, ror #9
 802bdd0:	613b      	str	r3, [r7, #16]
 802bdd2:	693a      	ldr	r2, [r7, #16]
 802bdd4:	68fb      	ldr	r3, [r7, #12]
 802bdd6:	4413      	add	r3, r2
 802bdd8:	613b      	str	r3, [r7, #16]
  MD5STEP(F3, a, b, c, d, in[9] + 0xd9d4d039, 4);
 802bdda:	693a      	ldr	r2, [r7, #16]
 802bddc:	68fb      	ldr	r3, [r7, #12]
 802bdde:	405a      	eors	r2, r3
 802bde0:	68bb      	ldr	r3, [r7, #8]
 802bde2:	405a      	eors	r2, r3
 802bde4:	683b      	ldr	r3, [r7, #0]
 802bde6:	3324      	adds	r3, #36	@ 0x24
 802bde8:	681b      	ldr	r3, [r3, #0]
 802bdea:	441a      	add	r2, r3
 802bdec:	697b      	ldr	r3, [r7, #20]
 802bdee:	441a      	add	r2, r3
 802bdf0:	4b97      	ldr	r3, [pc, #604]	@ (802c050 <mg_md5_transform+0xb58>)
 802bdf2:	4413      	add	r3, r2
 802bdf4:	617b      	str	r3, [r7, #20]
 802bdf6:	697b      	ldr	r3, [r7, #20]
 802bdf8:	ea4f 7333 	mov.w	r3, r3, ror #28
 802bdfc:	617b      	str	r3, [r7, #20]
 802bdfe:	697a      	ldr	r2, [r7, #20]
 802be00:	693b      	ldr	r3, [r7, #16]
 802be02:	4413      	add	r3, r2
 802be04:	617b      	str	r3, [r7, #20]
  MD5STEP(F3, d, a, b, c, in[12] + 0xe6db99e5, 11);
 802be06:	697a      	ldr	r2, [r7, #20]
 802be08:	693b      	ldr	r3, [r7, #16]
 802be0a:	405a      	eors	r2, r3
 802be0c:	68fb      	ldr	r3, [r7, #12]
 802be0e:	405a      	eors	r2, r3
 802be10:	683b      	ldr	r3, [r7, #0]
 802be12:	3330      	adds	r3, #48	@ 0x30
 802be14:	681b      	ldr	r3, [r3, #0]
 802be16:	441a      	add	r2, r3
 802be18:	68bb      	ldr	r3, [r7, #8]
 802be1a:	441a      	add	r2, r3
 802be1c:	4b8d      	ldr	r3, [pc, #564]	@ (802c054 <mg_md5_transform+0xb5c>)
 802be1e:	4413      	add	r3, r2
 802be20:	60bb      	str	r3, [r7, #8]
 802be22:	68bb      	ldr	r3, [r7, #8]
 802be24:	ea4f 5373 	mov.w	r3, r3, ror #21
 802be28:	60bb      	str	r3, [r7, #8]
 802be2a:	68ba      	ldr	r2, [r7, #8]
 802be2c:	697b      	ldr	r3, [r7, #20]
 802be2e:	4413      	add	r3, r2
 802be30:	60bb      	str	r3, [r7, #8]
  MD5STEP(F3, c, d, a, b, in[15] + 0x1fa27cf8, 16);
 802be32:	68ba      	ldr	r2, [r7, #8]
 802be34:	697b      	ldr	r3, [r7, #20]
 802be36:	405a      	eors	r2, r3
 802be38:	693b      	ldr	r3, [r7, #16]
 802be3a:	405a      	eors	r2, r3
 802be3c:	683b      	ldr	r3, [r7, #0]
 802be3e:	333c      	adds	r3, #60	@ 0x3c
 802be40:	681b      	ldr	r3, [r3, #0]
 802be42:	441a      	add	r2, r3
 802be44:	68fb      	ldr	r3, [r7, #12]
 802be46:	441a      	add	r2, r3
 802be48:	4b83      	ldr	r3, [pc, #524]	@ (802c058 <mg_md5_transform+0xb60>)
 802be4a:	4413      	add	r3, r2
 802be4c:	60fb      	str	r3, [r7, #12]
 802be4e:	68fb      	ldr	r3, [r7, #12]
 802be50:	ea4f 4333 	mov.w	r3, r3, ror #16
 802be54:	60fb      	str	r3, [r7, #12]
 802be56:	68fa      	ldr	r2, [r7, #12]
 802be58:	68bb      	ldr	r3, [r7, #8]
 802be5a:	4413      	add	r3, r2
 802be5c:	60fb      	str	r3, [r7, #12]
  MD5STEP(F3, b, c, d, a, in[2] + 0xc4ac5665, 23);
 802be5e:	68fa      	ldr	r2, [r7, #12]
 802be60:	68bb      	ldr	r3, [r7, #8]
 802be62:	405a      	eors	r2, r3
 802be64:	697b      	ldr	r3, [r7, #20]
 802be66:	405a      	eors	r2, r3
 802be68:	683b      	ldr	r3, [r7, #0]
 802be6a:	3308      	adds	r3, #8
 802be6c:	681b      	ldr	r3, [r3, #0]
 802be6e:	441a      	add	r2, r3
 802be70:	693b      	ldr	r3, [r7, #16]
 802be72:	441a      	add	r2, r3
 802be74:	4b79      	ldr	r3, [pc, #484]	@ (802c05c <mg_md5_transform+0xb64>)
 802be76:	4413      	add	r3, r2
 802be78:	613b      	str	r3, [r7, #16]
 802be7a:	693b      	ldr	r3, [r7, #16]
 802be7c:	ea4f 2373 	mov.w	r3, r3, ror #9
 802be80:	613b      	str	r3, [r7, #16]
 802be82:	693a      	ldr	r2, [r7, #16]
 802be84:	68fb      	ldr	r3, [r7, #12]
 802be86:	4413      	add	r3, r2
 802be88:	613b      	str	r3, [r7, #16]

  MD5STEP(F4, a, b, c, d, in[0] + 0xf4292244, 6);
 802be8a:	68bb      	ldr	r3, [r7, #8]
 802be8c:	43da      	mvns	r2, r3
 802be8e:	693b      	ldr	r3, [r7, #16]
 802be90:	431a      	orrs	r2, r3
 802be92:	68fb      	ldr	r3, [r7, #12]
 802be94:	405a      	eors	r2, r3
 802be96:	683b      	ldr	r3, [r7, #0]
 802be98:	681b      	ldr	r3, [r3, #0]
 802be9a:	441a      	add	r2, r3
 802be9c:	697b      	ldr	r3, [r7, #20]
 802be9e:	441a      	add	r2, r3
 802bea0:	4b6f      	ldr	r3, [pc, #444]	@ (802c060 <mg_md5_transform+0xb68>)
 802bea2:	4413      	add	r3, r2
 802bea4:	617b      	str	r3, [r7, #20]
 802bea6:	697b      	ldr	r3, [r7, #20]
 802bea8:	ea4f 63b3 	mov.w	r3, r3, ror #26
 802beac:	617b      	str	r3, [r7, #20]
 802beae:	697a      	ldr	r2, [r7, #20]
 802beb0:	693b      	ldr	r3, [r7, #16]
 802beb2:	4413      	add	r3, r2
 802beb4:	617b      	str	r3, [r7, #20]
  MD5STEP(F4, d, a, b, c, in[7] + 0x432aff97, 10);
 802beb6:	68fb      	ldr	r3, [r7, #12]
 802beb8:	43da      	mvns	r2, r3
 802beba:	697b      	ldr	r3, [r7, #20]
 802bebc:	431a      	orrs	r2, r3
 802bebe:	693b      	ldr	r3, [r7, #16]
 802bec0:	405a      	eors	r2, r3
 802bec2:	683b      	ldr	r3, [r7, #0]
 802bec4:	331c      	adds	r3, #28
 802bec6:	681b      	ldr	r3, [r3, #0]
 802bec8:	441a      	add	r2, r3
 802beca:	68bb      	ldr	r3, [r7, #8]
 802becc:	441a      	add	r2, r3
 802bece:	4b65      	ldr	r3, [pc, #404]	@ (802c064 <mg_md5_transform+0xb6c>)
 802bed0:	4413      	add	r3, r2
 802bed2:	60bb      	str	r3, [r7, #8]
 802bed4:	68bb      	ldr	r3, [r7, #8]
 802bed6:	ea4f 53b3 	mov.w	r3, r3, ror #22
 802beda:	60bb      	str	r3, [r7, #8]
 802bedc:	68ba      	ldr	r2, [r7, #8]
 802bede:	697b      	ldr	r3, [r7, #20]
 802bee0:	4413      	add	r3, r2
 802bee2:	60bb      	str	r3, [r7, #8]
  MD5STEP(F4, c, d, a, b, in[14] + 0xab9423a7, 15);
 802bee4:	693b      	ldr	r3, [r7, #16]
 802bee6:	43da      	mvns	r2, r3
 802bee8:	68bb      	ldr	r3, [r7, #8]
 802beea:	431a      	orrs	r2, r3
 802beec:	697b      	ldr	r3, [r7, #20]
 802beee:	405a      	eors	r2, r3
 802bef0:	683b      	ldr	r3, [r7, #0]
 802bef2:	3338      	adds	r3, #56	@ 0x38
 802bef4:	681b      	ldr	r3, [r3, #0]
 802bef6:	441a      	add	r2, r3
 802bef8:	68fb      	ldr	r3, [r7, #12]
 802befa:	441a      	add	r2, r3
 802befc:	4b5a      	ldr	r3, [pc, #360]	@ (802c068 <mg_md5_transform+0xb70>)
 802befe:	4413      	add	r3, r2
 802bf00:	60fb      	str	r3, [r7, #12]
 802bf02:	68fb      	ldr	r3, [r7, #12]
 802bf04:	ea4f 4373 	mov.w	r3, r3, ror #17
 802bf08:	60fb      	str	r3, [r7, #12]
 802bf0a:	68fa      	ldr	r2, [r7, #12]
 802bf0c:	68bb      	ldr	r3, [r7, #8]
 802bf0e:	4413      	add	r3, r2
 802bf10:	60fb      	str	r3, [r7, #12]
  MD5STEP(F4, b, c, d, a, in[5] + 0xfc93a039, 21);
 802bf12:	697b      	ldr	r3, [r7, #20]
 802bf14:	43da      	mvns	r2, r3
 802bf16:	68fb      	ldr	r3, [r7, #12]
 802bf18:	431a      	orrs	r2, r3
 802bf1a:	68bb      	ldr	r3, [r7, #8]
 802bf1c:	405a      	eors	r2, r3
 802bf1e:	683b      	ldr	r3, [r7, #0]
 802bf20:	3314      	adds	r3, #20
 802bf22:	681b      	ldr	r3, [r3, #0]
 802bf24:	441a      	add	r2, r3
 802bf26:	693b      	ldr	r3, [r7, #16]
 802bf28:	441a      	add	r2, r3
 802bf2a:	4b50      	ldr	r3, [pc, #320]	@ (802c06c <mg_md5_transform+0xb74>)
 802bf2c:	4413      	add	r3, r2
 802bf2e:	613b      	str	r3, [r7, #16]
 802bf30:	693b      	ldr	r3, [r7, #16]
 802bf32:	ea4f 23f3 	mov.w	r3, r3, ror #11
 802bf36:	613b      	str	r3, [r7, #16]
 802bf38:	693a      	ldr	r2, [r7, #16]
 802bf3a:	68fb      	ldr	r3, [r7, #12]
 802bf3c:	4413      	add	r3, r2
 802bf3e:	613b      	str	r3, [r7, #16]
  MD5STEP(F4, a, b, c, d, in[12] + 0x655b59c3, 6);
 802bf40:	68bb      	ldr	r3, [r7, #8]
 802bf42:	43da      	mvns	r2, r3
 802bf44:	693b      	ldr	r3, [r7, #16]
 802bf46:	431a      	orrs	r2, r3
 802bf48:	68fb      	ldr	r3, [r7, #12]
 802bf4a:	405a      	eors	r2, r3
 802bf4c:	683b      	ldr	r3, [r7, #0]
 802bf4e:	3330      	adds	r3, #48	@ 0x30
 802bf50:	681b      	ldr	r3, [r3, #0]
 802bf52:	441a      	add	r2, r3
 802bf54:	697b      	ldr	r3, [r7, #20]
 802bf56:	441a      	add	r2, r3
 802bf58:	4b45      	ldr	r3, [pc, #276]	@ (802c070 <mg_md5_transform+0xb78>)
 802bf5a:	4413      	add	r3, r2
 802bf5c:	617b      	str	r3, [r7, #20]
 802bf5e:	697b      	ldr	r3, [r7, #20]
 802bf60:	ea4f 63b3 	mov.w	r3, r3, ror #26
 802bf64:	617b      	str	r3, [r7, #20]
 802bf66:	697a      	ldr	r2, [r7, #20]
 802bf68:	693b      	ldr	r3, [r7, #16]
 802bf6a:	4413      	add	r3, r2
 802bf6c:	617b      	str	r3, [r7, #20]
  MD5STEP(F4, d, a, b, c, in[3] + 0x8f0ccc92, 10);
 802bf6e:	68fb      	ldr	r3, [r7, #12]
 802bf70:	43da      	mvns	r2, r3
 802bf72:	697b      	ldr	r3, [r7, #20]
 802bf74:	431a      	orrs	r2, r3
 802bf76:	693b      	ldr	r3, [r7, #16]
 802bf78:	405a      	eors	r2, r3
 802bf7a:	683b      	ldr	r3, [r7, #0]
 802bf7c:	330c      	adds	r3, #12
 802bf7e:	681b      	ldr	r3, [r3, #0]
 802bf80:	441a      	add	r2, r3
 802bf82:	68bb      	ldr	r3, [r7, #8]
 802bf84:	441a      	add	r2, r3
 802bf86:	4b3b      	ldr	r3, [pc, #236]	@ (802c074 <mg_md5_transform+0xb7c>)
 802bf88:	4413      	add	r3, r2
 802bf8a:	60bb      	str	r3, [r7, #8]
 802bf8c:	68bb      	ldr	r3, [r7, #8]
 802bf8e:	ea4f 53b3 	mov.w	r3, r3, ror #22
 802bf92:	60bb      	str	r3, [r7, #8]
 802bf94:	68ba      	ldr	r2, [r7, #8]
 802bf96:	697b      	ldr	r3, [r7, #20]
 802bf98:	4413      	add	r3, r2
 802bf9a:	60bb      	str	r3, [r7, #8]
  MD5STEP(F4, c, d, a, b, in[10] + 0xffeff47d, 15);
 802bf9c:	693b      	ldr	r3, [r7, #16]
 802bf9e:	43da      	mvns	r2, r3
 802bfa0:	68bb      	ldr	r3, [r7, #8]
 802bfa2:	431a      	orrs	r2, r3
 802bfa4:	697b      	ldr	r3, [r7, #20]
 802bfa6:	405a      	eors	r2, r3
 802bfa8:	683b      	ldr	r3, [r7, #0]
 802bfaa:	3328      	adds	r3, #40	@ 0x28
 802bfac:	681b      	ldr	r3, [r3, #0]
 802bfae:	441a      	add	r2, r3
 802bfb0:	68fb      	ldr	r3, [r7, #12]
 802bfb2:	4413      	add	r3, r2
 802bfb4:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 802bfb8:	f6a3 3383 	subw	r3, r3, #2947	@ 0xb83
 802bfbc:	60fb      	str	r3, [r7, #12]
 802bfbe:	68fb      	ldr	r3, [r7, #12]
 802bfc0:	ea4f 4373 	mov.w	r3, r3, ror #17
 802bfc4:	60fb      	str	r3, [r7, #12]
 802bfc6:	68fa      	ldr	r2, [r7, #12]
 802bfc8:	68bb      	ldr	r3, [r7, #8]
 802bfca:	4413      	add	r3, r2
 802bfcc:	60fb      	str	r3, [r7, #12]
  MD5STEP(F4, b, c, d, a, in[1] + 0x85845dd1, 21);
 802bfce:	697b      	ldr	r3, [r7, #20]
 802bfd0:	43da      	mvns	r2, r3
 802bfd2:	68fb      	ldr	r3, [r7, #12]
 802bfd4:	431a      	orrs	r2, r3
 802bfd6:	68bb      	ldr	r3, [r7, #8]
 802bfd8:	405a      	eors	r2, r3
 802bfda:	683b      	ldr	r3, [r7, #0]
 802bfdc:	3304      	adds	r3, #4
 802bfde:	681b      	ldr	r3, [r3, #0]
 802bfe0:	441a      	add	r2, r3
 802bfe2:	693b      	ldr	r3, [r7, #16]
 802bfe4:	441a      	add	r2, r3
 802bfe6:	4b24      	ldr	r3, [pc, #144]	@ (802c078 <mg_md5_transform+0xb80>)
 802bfe8:	4413      	add	r3, r2
 802bfea:	613b      	str	r3, [r7, #16]
 802bfec:	693b      	ldr	r3, [r7, #16]
 802bfee:	ea4f 23f3 	mov.w	r3, r3, ror #11
 802bff2:	613b      	str	r3, [r7, #16]
 802bff4:	693a      	ldr	r2, [r7, #16]
 802bff6:	68fb      	ldr	r3, [r7, #12]
 802bff8:	4413      	add	r3, r2
 802bffa:	613b      	str	r3, [r7, #16]
  MD5STEP(F4, a, b, c, d, in[8] + 0x6fa87e4f, 6);
 802bffc:	68bb      	ldr	r3, [r7, #8]
 802bffe:	43da      	mvns	r2, r3
 802c000:	693b      	ldr	r3, [r7, #16]
 802c002:	431a      	orrs	r2, r3
 802c004:	68fb      	ldr	r3, [r7, #12]
 802c006:	405a      	eors	r2, r3
 802c008:	683b      	ldr	r3, [r7, #0]
 802c00a:	3320      	adds	r3, #32
 802c00c:	681b      	ldr	r3, [r3, #0]
 802c00e:	441a      	add	r2, r3
 802c010:	697b      	ldr	r3, [r7, #20]
 802c012:	441a      	add	r2, r3
 802c014:	4b19      	ldr	r3, [pc, #100]	@ (802c07c <mg_md5_transform+0xb84>)
 802c016:	4413      	add	r3, r2
 802c018:	617b      	str	r3, [r7, #20]
 802c01a:	697b      	ldr	r3, [r7, #20]
 802c01c:	ea4f 63b3 	mov.w	r3, r3, ror #26
 802c020:	617b      	str	r3, [r7, #20]
 802c022:	697a      	ldr	r2, [r7, #20]
 802c024:	693b      	ldr	r3, [r7, #16]
 802c026:	4413      	add	r3, r2
 802c028:	617b      	str	r3, [r7, #20]
  MD5STEP(F4, d, a, b, c, in[15] + 0xfe2ce6e0, 10);
 802c02a:	68fb      	ldr	r3, [r7, #12]
 802c02c:	43da      	mvns	r2, r3
 802c02e:	697b      	ldr	r3, [r7, #20]
 802c030:	431a      	orrs	r2, r3
 802c032:	693b      	ldr	r3, [r7, #16]
 802c034:	405a      	eors	r2, r3
 802c036:	683b      	ldr	r3, [r7, #0]
 802c038:	333c      	adds	r3, #60	@ 0x3c
 802c03a:	681b      	ldr	r3, [r3, #0]
 802c03c:	441a      	add	r2, r3
 802c03e:	68bb      	ldr	r3, [r7, #8]
 802c040:	441a      	add	r2, r3
 802c042:	4b0f      	ldr	r3, [pc, #60]	@ (802c080 <mg_md5_transform+0xb88>)
 802c044:	4413      	add	r3, r2
 802c046:	60bb      	str	r3, [r7, #8]
 802c048:	68bb      	ldr	r3, [r7, #8]
 802c04a:	e01b      	b.n	802c084 <mg_md5_transform+0xb8c>
 802c04c:	04881d05 	.word	0x04881d05
 802c050:	d9d4d039 	.word	0xd9d4d039
 802c054:	e6db99e5 	.word	0xe6db99e5
 802c058:	1fa27cf8 	.word	0x1fa27cf8
 802c05c:	c4ac5665 	.word	0xc4ac5665
 802c060:	f4292244 	.word	0xf4292244
 802c064:	432aff97 	.word	0x432aff97
 802c068:	ab9423a7 	.word	0xab9423a7
 802c06c:	fc93a039 	.word	0xfc93a039
 802c070:	655b59c3 	.word	0x655b59c3
 802c074:	8f0ccc92 	.word	0x8f0ccc92
 802c078:	85845dd1 	.word	0x85845dd1
 802c07c:	6fa87e4f 	.word	0x6fa87e4f
 802c080:	fe2ce6e0 	.word	0xfe2ce6e0
 802c084:	ea4f 53b3 	mov.w	r3, r3, ror #22
 802c088:	60bb      	str	r3, [r7, #8]
 802c08a:	68ba      	ldr	r2, [r7, #8]
 802c08c:	697b      	ldr	r3, [r7, #20]
 802c08e:	4413      	add	r3, r2
 802c090:	60bb      	str	r3, [r7, #8]
  MD5STEP(F4, c, d, a, b, in[6] + 0xa3014314, 15);
 802c092:	693b      	ldr	r3, [r7, #16]
 802c094:	43da      	mvns	r2, r3
 802c096:	68bb      	ldr	r3, [r7, #8]
 802c098:	431a      	orrs	r2, r3
 802c09a:	697b      	ldr	r3, [r7, #20]
 802c09c:	405a      	eors	r2, r3
 802c09e:	683b      	ldr	r3, [r7, #0]
 802c0a0:	3318      	adds	r3, #24
 802c0a2:	681b      	ldr	r3, [r3, #0]
 802c0a4:	441a      	add	r2, r3
 802c0a6:	68fb      	ldr	r3, [r7, #12]
 802c0a8:	441a      	add	r2, r3
 802c0aa:	4b51      	ldr	r3, [pc, #324]	@ (802c1f0 <mg_md5_transform+0xcf8>)
 802c0ac:	4413      	add	r3, r2
 802c0ae:	60fb      	str	r3, [r7, #12]
 802c0b0:	68fb      	ldr	r3, [r7, #12]
 802c0b2:	ea4f 4373 	mov.w	r3, r3, ror #17
 802c0b6:	60fb      	str	r3, [r7, #12]
 802c0b8:	68fa      	ldr	r2, [r7, #12]
 802c0ba:	68bb      	ldr	r3, [r7, #8]
 802c0bc:	4413      	add	r3, r2
 802c0be:	60fb      	str	r3, [r7, #12]
  MD5STEP(F4, b, c, d, a, in[13] + 0x4e0811a1, 21);
 802c0c0:	697b      	ldr	r3, [r7, #20]
 802c0c2:	43da      	mvns	r2, r3
 802c0c4:	68fb      	ldr	r3, [r7, #12]
 802c0c6:	431a      	orrs	r2, r3
 802c0c8:	68bb      	ldr	r3, [r7, #8]
 802c0ca:	405a      	eors	r2, r3
 802c0cc:	683b      	ldr	r3, [r7, #0]
 802c0ce:	3334      	adds	r3, #52	@ 0x34
 802c0d0:	681b      	ldr	r3, [r3, #0]
 802c0d2:	441a      	add	r2, r3
 802c0d4:	693b      	ldr	r3, [r7, #16]
 802c0d6:	441a      	add	r2, r3
 802c0d8:	4b46      	ldr	r3, [pc, #280]	@ (802c1f4 <mg_md5_transform+0xcfc>)
 802c0da:	4413      	add	r3, r2
 802c0dc:	613b      	str	r3, [r7, #16]
 802c0de:	693b      	ldr	r3, [r7, #16]
 802c0e0:	ea4f 23f3 	mov.w	r3, r3, ror #11
 802c0e4:	613b      	str	r3, [r7, #16]
 802c0e6:	693a      	ldr	r2, [r7, #16]
 802c0e8:	68fb      	ldr	r3, [r7, #12]
 802c0ea:	4413      	add	r3, r2
 802c0ec:	613b      	str	r3, [r7, #16]
  MD5STEP(F4, a, b, c, d, in[4] + 0xf7537e82, 6);
 802c0ee:	68bb      	ldr	r3, [r7, #8]
 802c0f0:	43da      	mvns	r2, r3
 802c0f2:	693b      	ldr	r3, [r7, #16]
 802c0f4:	431a      	orrs	r2, r3
 802c0f6:	68fb      	ldr	r3, [r7, #12]
 802c0f8:	405a      	eors	r2, r3
 802c0fa:	683b      	ldr	r3, [r7, #0]
 802c0fc:	3310      	adds	r3, #16
 802c0fe:	681b      	ldr	r3, [r3, #0]
 802c100:	441a      	add	r2, r3
 802c102:	697b      	ldr	r3, [r7, #20]
 802c104:	441a      	add	r2, r3
 802c106:	4b3c      	ldr	r3, [pc, #240]	@ (802c1f8 <mg_md5_transform+0xd00>)
 802c108:	4413      	add	r3, r2
 802c10a:	617b      	str	r3, [r7, #20]
 802c10c:	697b      	ldr	r3, [r7, #20]
 802c10e:	ea4f 63b3 	mov.w	r3, r3, ror #26
 802c112:	617b      	str	r3, [r7, #20]
 802c114:	697a      	ldr	r2, [r7, #20]
 802c116:	693b      	ldr	r3, [r7, #16]
 802c118:	4413      	add	r3, r2
 802c11a:	617b      	str	r3, [r7, #20]
  MD5STEP(F4, d, a, b, c, in[11] + 0xbd3af235, 10);
 802c11c:	68fb      	ldr	r3, [r7, #12]
 802c11e:	43da      	mvns	r2, r3
 802c120:	697b      	ldr	r3, [r7, #20]
 802c122:	431a      	orrs	r2, r3
 802c124:	693b      	ldr	r3, [r7, #16]
 802c126:	405a      	eors	r2, r3
 802c128:	683b      	ldr	r3, [r7, #0]
 802c12a:	332c      	adds	r3, #44	@ 0x2c
 802c12c:	681b      	ldr	r3, [r3, #0]
 802c12e:	441a      	add	r2, r3
 802c130:	68bb      	ldr	r3, [r7, #8]
 802c132:	441a      	add	r2, r3
 802c134:	4b31      	ldr	r3, [pc, #196]	@ (802c1fc <mg_md5_transform+0xd04>)
 802c136:	4413      	add	r3, r2
 802c138:	60bb      	str	r3, [r7, #8]
 802c13a:	68bb      	ldr	r3, [r7, #8]
 802c13c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 802c140:	60bb      	str	r3, [r7, #8]
 802c142:	68ba      	ldr	r2, [r7, #8]
 802c144:	697b      	ldr	r3, [r7, #20]
 802c146:	4413      	add	r3, r2
 802c148:	60bb      	str	r3, [r7, #8]
  MD5STEP(F4, c, d, a, b, in[2] + 0x2ad7d2bb, 15);
 802c14a:	693b      	ldr	r3, [r7, #16]
 802c14c:	43da      	mvns	r2, r3
 802c14e:	68bb      	ldr	r3, [r7, #8]
 802c150:	431a      	orrs	r2, r3
 802c152:	697b      	ldr	r3, [r7, #20]
 802c154:	405a      	eors	r2, r3
 802c156:	683b      	ldr	r3, [r7, #0]
 802c158:	3308      	adds	r3, #8
 802c15a:	681b      	ldr	r3, [r3, #0]
 802c15c:	441a      	add	r2, r3
 802c15e:	68fb      	ldr	r3, [r7, #12]
 802c160:	441a      	add	r2, r3
 802c162:	4b27      	ldr	r3, [pc, #156]	@ (802c200 <mg_md5_transform+0xd08>)
 802c164:	4413      	add	r3, r2
 802c166:	60fb      	str	r3, [r7, #12]
 802c168:	68fb      	ldr	r3, [r7, #12]
 802c16a:	ea4f 4373 	mov.w	r3, r3, ror #17
 802c16e:	60fb      	str	r3, [r7, #12]
 802c170:	68fa      	ldr	r2, [r7, #12]
 802c172:	68bb      	ldr	r3, [r7, #8]
 802c174:	4413      	add	r3, r2
 802c176:	60fb      	str	r3, [r7, #12]
  MD5STEP(F4, b, c, d, a, in[9] + 0xeb86d391, 21);
 802c178:	697b      	ldr	r3, [r7, #20]
 802c17a:	43da      	mvns	r2, r3
 802c17c:	68fb      	ldr	r3, [r7, #12]
 802c17e:	431a      	orrs	r2, r3
 802c180:	68bb      	ldr	r3, [r7, #8]
 802c182:	405a      	eors	r2, r3
 802c184:	683b      	ldr	r3, [r7, #0]
 802c186:	3324      	adds	r3, #36	@ 0x24
 802c188:	681b      	ldr	r3, [r3, #0]
 802c18a:	441a      	add	r2, r3
 802c18c:	693b      	ldr	r3, [r7, #16]
 802c18e:	441a      	add	r2, r3
 802c190:	4b1c      	ldr	r3, [pc, #112]	@ (802c204 <mg_md5_transform+0xd0c>)
 802c192:	4413      	add	r3, r2
 802c194:	613b      	str	r3, [r7, #16]
 802c196:	693b      	ldr	r3, [r7, #16]
 802c198:	ea4f 23f3 	mov.w	r3, r3, ror #11
 802c19c:	613b      	str	r3, [r7, #16]
 802c19e:	693a      	ldr	r2, [r7, #16]
 802c1a0:	68fb      	ldr	r3, [r7, #12]
 802c1a2:	4413      	add	r3, r2
 802c1a4:	613b      	str	r3, [r7, #16]

  buf[0] += a;
 802c1a6:	687b      	ldr	r3, [r7, #4]
 802c1a8:	681a      	ldr	r2, [r3, #0]
 802c1aa:	697b      	ldr	r3, [r7, #20]
 802c1ac:	441a      	add	r2, r3
 802c1ae:	687b      	ldr	r3, [r7, #4]
 802c1b0:	601a      	str	r2, [r3, #0]
  buf[1] += b;
 802c1b2:	687b      	ldr	r3, [r7, #4]
 802c1b4:	3304      	adds	r3, #4
 802c1b6:	6819      	ldr	r1, [r3, #0]
 802c1b8:	687b      	ldr	r3, [r7, #4]
 802c1ba:	3304      	adds	r3, #4
 802c1bc:	693a      	ldr	r2, [r7, #16]
 802c1be:	440a      	add	r2, r1
 802c1c0:	601a      	str	r2, [r3, #0]
  buf[2] += c;
 802c1c2:	687b      	ldr	r3, [r7, #4]
 802c1c4:	3308      	adds	r3, #8
 802c1c6:	6819      	ldr	r1, [r3, #0]
 802c1c8:	687b      	ldr	r3, [r7, #4]
 802c1ca:	3308      	adds	r3, #8
 802c1cc:	68fa      	ldr	r2, [r7, #12]
 802c1ce:	440a      	add	r2, r1
 802c1d0:	601a      	str	r2, [r3, #0]
  buf[3] += d;
 802c1d2:	687b      	ldr	r3, [r7, #4]
 802c1d4:	330c      	adds	r3, #12
 802c1d6:	6819      	ldr	r1, [r3, #0]
 802c1d8:	687b      	ldr	r3, [r7, #4]
 802c1da:	330c      	adds	r3, #12
 802c1dc:	68ba      	ldr	r2, [r7, #8]
 802c1de:	440a      	add	r2, r1
 802c1e0:	601a      	str	r2, [r3, #0]
}
 802c1e2:	bf00      	nop
 802c1e4:	371c      	adds	r7, #28
 802c1e6:	46bd      	mov	sp, r7
 802c1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c1ec:	4770      	bx	lr
 802c1ee:	bf00      	nop
 802c1f0:	a3014314 	.word	0xa3014314
 802c1f4:	4e0811a1 	.word	0x4e0811a1
 802c1f8:	f7537e82 	.word	0xf7537e82
 802c1fc:	bd3af235 	.word	0xbd3af235
 802c200:	2ad7d2bb 	.word	0x2ad7d2bb
 802c204:	eb86d391 	.word	0xeb86d391

0802c208 <mg_md5_update>:

void mg_md5_update(mg_md5_ctx *ctx, const unsigned char *buf, size_t len) {
 802c208:	b580      	push	{r7, lr}
 802c20a:	b086      	sub	sp, #24
 802c20c:	af00      	add	r7, sp, #0
 802c20e:	60f8      	str	r0, [r7, #12]
 802c210:	60b9      	str	r1, [r7, #8]
 802c212:	607a      	str	r2, [r7, #4]
  uint32_t t;

  t = ctx->bits[0];
 802c214:	68fb      	ldr	r3, [r7, #12]
 802c216:	691b      	ldr	r3, [r3, #16]
 802c218:	617b      	str	r3, [r7, #20]
  if ((ctx->bits[0] = t + ((uint32_t) len << 3)) < t) ctx->bits[1]++;
 802c21a:	687b      	ldr	r3, [r7, #4]
 802c21c:	00da      	lsls	r2, r3, #3
 802c21e:	697b      	ldr	r3, [r7, #20]
 802c220:	441a      	add	r2, r3
 802c222:	68fb      	ldr	r3, [r7, #12]
 802c224:	611a      	str	r2, [r3, #16]
 802c226:	68fb      	ldr	r3, [r7, #12]
 802c228:	691b      	ldr	r3, [r3, #16]
 802c22a:	697a      	ldr	r2, [r7, #20]
 802c22c:	429a      	cmp	r2, r3
 802c22e:	d904      	bls.n	802c23a <mg_md5_update+0x32>
 802c230:	68fb      	ldr	r3, [r7, #12]
 802c232:	695b      	ldr	r3, [r3, #20]
 802c234:	1c5a      	adds	r2, r3, #1
 802c236:	68fb      	ldr	r3, [r7, #12]
 802c238:	615a      	str	r2, [r3, #20]
  ctx->bits[1] += (uint32_t) len >> 29;
 802c23a:	68fb      	ldr	r3, [r7, #12]
 802c23c:	695a      	ldr	r2, [r3, #20]
 802c23e:	687b      	ldr	r3, [r7, #4]
 802c240:	0f5b      	lsrs	r3, r3, #29
 802c242:	441a      	add	r2, r3
 802c244:	68fb      	ldr	r3, [r7, #12]
 802c246:	615a      	str	r2, [r3, #20]

  t = (t >> 3) & 0x3f;
 802c248:	697b      	ldr	r3, [r7, #20]
 802c24a:	08db      	lsrs	r3, r3, #3
 802c24c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 802c250:	617b      	str	r3, [r7, #20]

  if (t) {
 802c252:	697b      	ldr	r3, [r7, #20]
 802c254:	2b00      	cmp	r3, #0
 802c256:	d048      	beq.n	802c2ea <mg_md5_update+0xe2>
    unsigned char *p = (unsigned char *) ctx->in + t;
 802c258:	68fb      	ldr	r3, [r7, #12]
 802c25a:	f103 0218 	add.w	r2, r3, #24
 802c25e:	697b      	ldr	r3, [r7, #20]
 802c260:	4413      	add	r3, r2
 802c262:	613b      	str	r3, [r7, #16]

    t = 64 - t;
 802c264:	697b      	ldr	r3, [r7, #20]
 802c266:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 802c26a:	617b      	str	r3, [r7, #20]
    if (len < t) {
 802c26c:	687a      	ldr	r2, [r7, #4]
 802c26e:	697b      	ldr	r3, [r7, #20]
 802c270:	429a      	cmp	r2, r3
 802c272:	d205      	bcs.n	802c280 <mg_md5_update+0x78>
      memcpy(p, buf, len);
 802c274:	687a      	ldr	r2, [r7, #4]
 802c276:	68b9      	ldr	r1, [r7, #8]
 802c278:	6938      	ldr	r0, [r7, #16]
 802c27a:	f00a fff5 	bl	8037268 <memcpy>
      return;
 802c27e:	e03e      	b.n	802c2fe <mg_md5_update+0xf6>
    }
    memcpy(p, buf, t);
 802c280:	697a      	ldr	r2, [r7, #20]
 802c282:	68b9      	ldr	r1, [r7, #8]
 802c284:	6938      	ldr	r0, [r7, #16]
 802c286:	f00a ffef 	bl	8037268 <memcpy>
    mg_byte_reverse(ctx->in, 16);
 802c28a:	68fb      	ldr	r3, [r7, #12]
 802c28c:	3318      	adds	r3, #24
 802c28e:	2110      	movs	r1, #16
 802c290:	4618      	mov	r0, r3
 802c292:	f7ff f8dd 	bl	802b450 <mg_byte_reverse>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 802c296:	68fa      	ldr	r2, [r7, #12]
 802c298:	68fb      	ldr	r3, [r7, #12]
 802c29a:	3318      	adds	r3, #24
 802c29c:	4619      	mov	r1, r3
 802c29e:	4610      	mov	r0, r2
 802c2a0:	f7ff f92a 	bl	802b4f8 <mg_md5_transform>
    buf += t;
 802c2a4:	68ba      	ldr	r2, [r7, #8]
 802c2a6:	697b      	ldr	r3, [r7, #20]
 802c2a8:	4413      	add	r3, r2
 802c2aa:	60bb      	str	r3, [r7, #8]
    len -= t;
 802c2ac:	687a      	ldr	r2, [r7, #4]
 802c2ae:	697b      	ldr	r3, [r7, #20]
 802c2b0:	1ad3      	subs	r3, r2, r3
 802c2b2:	607b      	str	r3, [r7, #4]
  }

  while (len >= 64) {
 802c2b4:	e019      	b.n	802c2ea <mg_md5_update+0xe2>
    memcpy(ctx->in, buf, 64);
 802c2b6:	68fb      	ldr	r3, [r7, #12]
 802c2b8:	3318      	adds	r3, #24
 802c2ba:	2240      	movs	r2, #64	@ 0x40
 802c2bc:	68b9      	ldr	r1, [r7, #8]
 802c2be:	4618      	mov	r0, r3
 802c2c0:	f00a ffd2 	bl	8037268 <memcpy>
    mg_byte_reverse(ctx->in, 16);
 802c2c4:	68fb      	ldr	r3, [r7, #12]
 802c2c6:	3318      	adds	r3, #24
 802c2c8:	2110      	movs	r1, #16
 802c2ca:	4618      	mov	r0, r3
 802c2cc:	f7ff f8c0 	bl	802b450 <mg_byte_reverse>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 802c2d0:	68fa      	ldr	r2, [r7, #12]
 802c2d2:	68fb      	ldr	r3, [r7, #12]
 802c2d4:	3318      	adds	r3, #24
 802c2d6:	4619      	mov	r1, r3
 802c2d8:	4610      	mov	r0, r2
 802c2da:	f7ff f90d 	bl	802b4f8 <mg_md5_transform>
    buf += 64;
 802c2de:	68bb      	ldr	r3, [r7, #8]
 802c2e0:	3340      	adds	r3, #64	@ 0x40
 802c2e2:	60bb      	str	r3, [r7, #8]
    len -= 64;
 802c2e4:	687b      	ldr	r3, [r7, #4]
 802c2e6:	3b40      	subs	r3, #64	@ 0x40
 802c2e8:	607b      	str	r3, [r7, #4]
  while (len >= 64) {
 802c2ea:	687b      	ldr	r3, [r7, #4]
 802c2ec:	2b3f      	cmp	r3, #63	@ 0x3f
 802c2ee:	d8e2      	bhi.n	802c2b6 <mg_md5_update+0xae>
  }

  memcpy(ctx->in, buf, len);
 802c2f0:	68fb      	ldr	r3, [r7, #12]
 802c2f2:	3318      	adds	r3, #24
 802c2f4:	687a      	ldr	r2, [r7, #4]
 802c2f6:	68b9      	ldr	r1, [r7, #8]
 802c2f8:	4618      	mov	r0, r3
 802c2fa:	f00a ffb5 	bl	8037268 <memcpy>
}
 802c2fe:	3718      	adds	r7, #24
 802c300:	46bd      	mov	sp, r7
 802c302:	bd80      	pop	{r7, pc}

0802c304 <mg_md5_final>:

void mg_md5_final(mg_md5_ctx *ctx, unsigned char digest[16]) {
 802c304:	b580      	push	{r7, lr}
 802c306:	b086      	sub	sp, #24
 802c308:	af00      	add	r7, sp, #0
 802c30a:	6078      	str	r0, [r7, #4]
 802c30c:	6039      	str	r1, [r7, #0]
  unsigned count;
  unsigned char *p;
  uint32_t *a;

  count = (ctx->bits[0] >> 3) & 0x3F;
 802c30e:	687b      	ldr	r3, [r7, #4]
 802c310:	691b      	ldr	r3, [r3, #16]
 802c312:	08db      	lsrs	r3, r3, #3
 802c314:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 802c318:	617b      	str	r3, [r7, #20]

  p = ctx->in + count;
 802c31a:	687b      	ldr	r3, [r7, #4]
 802c31c:	f103 0218 	add.w	r2, r3, #24
 802c320:	697b      	ldr	r3, [r7, #20]
 802c322:	4413      	add	r3, r2
 802c324:	613b      	str	r3, [r7, #16]
  *p++ = 0x80;
 802c326:	693b      	ldr	r3, [r7, #16]
 802c328:	1c5a      	adds	r2, r3, #1
 802c32a:	613a      	str	r2, [r7, #16]
 802c32c:	2280      	movs	r2, #128	@ 0x80
 802c32e:	701a      	strb	r2, [r3, #0]
  count = 64 - 1 - count;
 802c330:	697b      	ldr	r3, [r7, #20]
 802c332:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 802c336:	617b      	str	r3, [r7, #20]
  if (count < 8) {
 802c338:	697b      	ldr	r3, [r7, #20]
 802c33a:	2b07      	cmp	r3, #7
 802c33c:	d819      	bhi.n	802c372 <mg_md5_final+0x6e>
    memset(p, 0, count);
 802c33e:	697a      	ldr	r2, [r7, #20]
 802c340:	2100      	movs	r1, #0
 802c342:	6938      	ldr	r0, [r7, #16]
 802c344:	f009 fd54 	bl	8035df0 <memset>
    mg_byte_reverse(ctx->in, 16);
 802c348:	687b      	ldr	r3, [r7, #4]
 802c34a:	3318      	adds	r3, #24
 802c34c:	2110      	movs	r1, #16
 802c34e:	4618      	mov	r0, r3
 802c350:	f7ff f87e 	bl	802b450 <mg_byte_reverse>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 802c354:	687a      	ldr	r2, [r7, #4]
 802c356:	687b      	ldr	r3, [r7, #4]
 802c358:	3318      	adds	r3, #24
 802c35a:	4619      	mov	r1, r3
 802c35c:	4610      	mov	r0, r2
 802c35e:	f7ff f8cb 	bl	802b4f8 <mg_md5_transform>
    memset(ctx->in, 0, 56);
 802c362:	687b      	ldr	r3, [r7, #4]
 802c364:	3318      	adds	r3, #24
 802c366:	2238      	movs	r2, #56	@ 0x38
 802c368:	2100      	movs	r1, #0
 802c36a:	4618      	mov	r0, r3
 802c36c:	f009 fd40 	bl	8035df0 <memset>
 802c370:	e006      	b.n	802c380 <mg_md5_final+0x7c>
  } else {
    memset(p, 0, count - 8);
 802c372:	697b      	ldr	r3, [r7, #20]
 802c374:	3b08      	subs	r3, #8
 802c376:	461a      	mov	r2, r3
 802c378:	2100      	movs	r1, #0
 802c37a:	6938      	ldr	r0, [r7, #16]
 802c37c:	f009 fd38 	bl	8035df0 <memset>
  }
  mg_byte_reverse(ctx->in, 14);
 802c380:	687b      	ldr	r3, [r7, #4]
 802c382:	3318      	adds	r3, #24
 802c384:	210e      	movs	r1, #14
 802c386:	4618      	mov	r0, r3
 802c388:	f7ff f862 	bl	802b450 <mg_byte_reverse>

  a = (uint32_t *) ctx->in;
 802c38c:	687b      	ldr	r3, [r7, #4]
 802c38e:	3318      	adds	r3, #24
 802c390:	60fb      	str	r3, [r7, #12]
  a[14] = ctx->bits[0];
 802c392:	68fb      	ldr	r3, [r7, #12]
 802c394:	3338      	adds	r3, #56	@ 0x38
 802c396:	687a      	ldr	r2, [r7, #4]
 802c398:	6912      	ldr	r2, [r2, #16]
 802c39a:	601a      	str	r2, [r3, #0]
  a[15] = ctx->bits[1];
 802c39c:	68fb      	ldr	r3, [r7, #12]
 802c39e:	333c      	adds	r3, #60	@ 0x3c
 802c3a0:	687a      	ldr	r2, [r7, #4]
 802c3a2:	6952      	ldr	r2, [r2, #20]
 802c3a4:	601a      	str	r2, [r3, #0]

  mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 802c3a6:	687a      	ldr	r2, [r7, #4]
 802c3a8:	687b      	ldr	r3, [r7, #4]
 802c3aa:	3318      	adds	r3, #24
 802c3ac:	4619      	mov	r1, r3
 802c3ae:	4610      	mov	r0, r2
 802c3b0:	f7ff f8a2 	bl	802b4f8 <mg_md5_transform>
  mg_byte_reverse((unsigned char *) ctx->buf, 4);
 802c3b4:	687b      	ldr	r3, [r7, #4]
 802c3b6:	2104      	movs	r1, #4
 802c3b8:	4618      	mov	r0, r3
 802c3ba:	f7ff f849 	bl	802b450 <mg_byte_reverse>
  memcpy(digest, ctx->buf, 16);
 802c3be:	687b      	ldr	r3, [r7, #4]
 802c3c0:	2210      	movs	r2, #16
 802c3c2:	4619      	mov	r1, r3
 802c3c4:	6838      	ldr	r0, [r7, #0]
 802c3c6:	f00a ff4f 	bl	8037268 <memcpy>
  memset((char *) ctx, 0, sizeof(*ctx));
 802c3ca:	2258      	movs	r2, #88	@ 0x58
 802c3cc:	2100      	movs	r1, #0
 802c3ce:	6878      	ldr	r0, [r7, #4]
 802c3d0:	f009 fd0e 	bl	8035df0 <memset>
}
 802c3d4:	bf00      	nop
 802c3d6:	3718      	adds	r7, #24
 802c3d8:	46bd      	mov	sp, r7
 802c3da:	bd80      	pop	{r7, pc}

0802c3dc <mg_mqtt_send_header>:
    {MQTT_PROP_WILDCARD_SUBSCRIPTION_AVAILABLE, MQTT_PROP_TYPE_BYTE},
    {MQTT_PROP_SUBSCRIPTION_IDENTIFIER_AVAILABLE, MQTT_PROP_TYPE_BYTE},
    {MQTT_PROP_SHARED_SUBSCRIPTION_AVAILABLE, MQTT_PROP_TYPE_BYTE}};

void mg_mqtt_send_header(struct mg_connection *c, uint8_t cmd, uint8_t flags,
                         uint32_t len) {
 802c3dc:	b580      	push	{r7, lr}
 802c3de:	b088      	sub	sp, #32
 802c3e0:	af00      	add	r7, sp, #0
 802c3e2:	60f8      	str	r0, [r7, #12]
 802c3e4:	607b      	str	r3, [r7, #4]
 802c3e6:	460b      	mov	r3, r1
 802c3e8:	72fb      	strb	r3, [r7, #11]
 802c3ea:	4613      	mov	r3, r2
 802c3ec:	72bb      	strb	r3, [r7, #10]
  uint8_t buf[1 + sizeof(len)], *vlen = &buf[1];
 802c3ee:	f107 0314 	add.w	r3, r7, #20
 802c3f2:	3301      	adds	r3, #1
 802c3f4:	61fb      	str	r3, [r7, #28]
  buf[0] = (uint8_t) ((cmd << 4) | flags);
 802c3f6:	7afb      	ldrb	r3, [r7, #11]
 802c3f8:	011b      	lsls	r3, r3, #4
 802c3fa:	b25a      	sxtb	r2, r3
 802c3fc:	f997 300a 	ldrsb.w	r3, [r7, #10]
 802c400:	4313      	orrs	r3, r2
 802c402:	b25b      	sxtb	r3, r3
 802c404:	b2db      	uxtb	r3, r3
 802c406:	753b      	strb	r3, [r7, #20]
  do {
    *vlen = len % 0x80;
 802c408:	687b      	ldr	r3, [r7, #4]
 802c40a:	b2db      	uxtb	r3, r3
 802c40c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 802c410:	b2da      	uxtb	r2, r3
 802c412:	69fb      	ldr	r3, [r7, #28]
 802c414:	701a      	strb	r2, [r3, #0]
    len /= 0x80;
 802c416:	687b      	ldr	r3, [r7, #4]
 802c418:	09db      	lsrs	r3, r3, #7
 802c41a:	607b      	str	r3, [r7, #4]
    if (len > 0) *vlen |= 0x80;
 802c41c:	687b      	ldr	r3, [r7, #4]
 802c41e:	2b00      	cmp	r3, #0
 802c420:	d006      	beq.n	802c430 <mg_mqtt_send_header+0x54>
 802c422:	69fb      	ldr	r3, [r7, #28]
 802c424:	781b      	ldrb	r3, [r3, #0]
 802c426:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 802c42a:	b2da      	uxtb	r2, r3
 802c42c:	69fb      	ldr	r3, [r7, #28]
 802c42e:	701a      	strb	r2, [r3, #0]
    vlen++;
 802c430:	69fb      	ldr	r3, [r7, #28]
 802c432:	3301      	adds	r3, #1
 802c434:	61fb      	str	r3, [r7, #28]
  } while (len > 0 && vlen < &buf[sizeof(buf)]);
 802c436:	687b      	ldr	r3, [r7, #4]
 802c438:	2b00      	cmp	r3, #0
 802c43a:	d005      	beq.n	802c448 <mg_mqtt_send_header+0x6c>
 802c43c:	f107 0314 	add.w	r3, r7, #20
 802c440:	3305      	adds	r3, #5
 802c442:	69fa      	ldr	r2, [r7, #28]
 802c444:	429a      	cmp	r2, r3
 802c446:	d3df      	bcc.n	802c408 <mg_mqtt_send_header+0x2c>
  mg_send(c, buf, (size_t) (vlen - buf));
 802c448:	f107 0314 	add.w	r3, r7, #20
 802c44c:	69fa      	ldr	r2, [r7, #28]
 802c44e:	1ad3      	subs	r3, r2, r3
 802c450:	461a      	mov	r2, r3
 802c452:	f107 0314 	add.w	r3, r7, #20
 802c456:	4619      	mov	r1, r3
 802c458:	68f8      	ldr	r0, [r7, #12]
 802c45a:	f004 fded 	bl	8031038 <mg_send>
}
 802c45e:	bf00      	nop
 802c460:	3720      	adds	r7, #32
 802c462:	46bd      	mov	sp, r7
 802c464:	bd80      	pop	{r7, pc}

0802c466 <mg_send_u16>:

static void mg_send_u16(struct mg_connection *c, uint16_t value) {
 802c466:	b580      	push	{r7, lr}
 802c468:	b082      	sub	sp, #8
 802c46a:	af00      	add	r7, sp, #0
 802c46c:	6078      	str	r0, [r7, #4]
 802c46e:	460b      	mov	r3, r1
 802c470:	807b      	strh	r3, [r7, #2]
  mg_send(c, &value, sizeof(value));
 802c472:	1cbb      	adds	r3, r7, #2
 802c474:	2202      	movs	r2, #2
 802c476:	4619      	mov	r1, r3
 802c478:	6878      	ldr	r0, [r7, #4]
 802c47a:	f004 fddd 	bl	8031038 <mg_send>
}
 802c47e:	bf00      	nop
 802c480:	3708      	adds	r7, #8
 802c482:	46bd      	mov	sp, r7
 802c484:	bd80      	pop	{r7, pc}

0802c486 <mg_send_u32>:

static void mg_send_u32(struct mg_connection *c, uint32_t value) {
 802c486:	b580      	push	{r7, lr}
 802c488:	b082      	sub	sp, #8
 802c48a:	af00      	add	r7, sp, #0
 802c48c:	6078      	str	r0, [r7, #4]
 802c48e:	6039      	str	r1, [r7, #0]
  mg_send(c, &value, sizeof(value));
 802c490:	463b      	mov	r3, r7
 802c492:	2204      	movs	r2, #4
 802c494:	4619      	mov	r1, r3
 802c496:	6878      	ldr	r0, [r7, #4]
 802c498:	f004 fdce 	bl	8031038 <mg_send>
}
 802c49c:	bf00      	nop
 802c49e:	3708      	adds	r7, #8
 802c4a0:	46bd      	mov	sp, r7
 802c4a2:	bd80      	pop	{r7, pc}

0802c4a4 <varint_size>:

static uint8_t varint_size(size_t length) {
 802c4a4:	b480      	push	{r7}
 802c4a6:	b085      	sub	sp, #20
 802c4a8:	af00      	add	r7, sp, #0
 802c4aa:	6078      	str	r0, [r7, #4]
  uint8_t bytes_needed = 0;
 802c4ac:	2300      	movs	r3, #0
 802c4ae:	73fb      	strb	r3, [r7, #15]
  do {
    bytes_needed++;
 802c4b0:	7bfb      	ldrb	r3, [r7, #15]
 802c4b2:	3301      	adds	r3, #1
 802c4b4:	73fb      	strb	r3, [r7, #15]
    length /= 0x80;
 802c4b6:	687b      	ldr	r3, [r7, #4]
 802c4b8:	09db      	lsrs	r3, r3, #7
 802c4ba:	607b      	str	r3, [r7, #4]
  } while (length > 0);
 802c4bc:	687b      	ldr	r3, [r7, #4]
 802c4be:	2b00      	cmp	r3, #0
 802c4c0:	d1f6      	bne.n	802c4b0 <varint_size+0xc>
  return bytes_needed;
 802c4c2:	7bfb      	ldrb	r3, [r7, #15]
}
 802c4c4:	4618      	mov	r0, r3
 802c4c6:	3714      	adds	r7, #20
 802c4c8:	46bd      	mov	sp, r7
 802c4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c4ce:	4770      	bx	lr

0802c4d0 <encode_varint>:

static size_t encode_varint(uint8_t *buf, size_t value) {
 802c4d0:	b480      	push	{r7}
 802c4d2:	b085      	sub	sp, #20
 802c4d4:	af00      	add	r7, sp, #0
 802c4d6:	6078      	str	r0, [r7, #4]
 802c4d8:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 802c4da:	2300      	movs	r3, #0
 802c4dc:	60fb      	str	r3, [r7, #12]

  do {
    uint8_t b = (uint8_t) (value % 128);
 802c4de:	683b      	ldr	r3, [r7, #0]
 802c4e0:	b2db      	uxtb	r3, r3
 802c4e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 802c4e6:	72fb      	strb	r3, [r7, #11]
    value /= 128;
 802c4e8:	683b      	ldr	r3, [r7, #0]
 802c4ea:	09db      	lsrs	r3, r3, #7
 802c4ec:	603b      	str	r3, [r7, #0]
    if (value > 0) b |= 0x80;
 802c4ee:	683b      	ldr	r3, [r7, #0]
 802c4f0:	2b00      	cmp	r3, #0
 802c4f2:	d003      	beq.n	802c4fc <encode_varint+0x2c>
 802c4f4:	7afb      	ldrb	r3, [r7, #11]
 802c4f6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 802c4fa:	72fb      	strb	r3, [r7, #11]
    buf[len++] = b;
 802c4fc:	68fb      	ldr	r3, [r7, #12]
 802c4fe:	1c5a      	adds	r2, r3, #1
 802c500:	60fa      	str	r2, [r7, #12]
 802c502:	687a      	ldr	r2, [r7, #4]
 802c504:	4413      	add	r3, r2
 802c506:	7afa      	ldrb	r2, [r7, #11]
 802c508:	701a      	strb	r2, [r3, #0]
  } while (value > 0);
 802c50a:	683b      	ldr	r3, [r7, #0]
 802c50c:	2b00      	cmp	r3, #0
 802c50e:	d1e6      	bne.n	802c4de <encode_varint+0xe>

  return len;
 802c510:	68fb      	ldr	r3, [r7, #12]
}
 802c512:	4618      	mov	r0, r3
 802c514:	3714      	adds	r7, #20
 802c516:	46bd      	mov	sp, r7
 802c518:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c51c:	4770      	bx	lr

0802c51e <decode_varint>:

static size_t decode_varint(const uint8_t *buf, size_t len, size_t *value) {
 802c51e:	b480      	push	{r7}
 802c520:	b089      	sub	sp, #36	@ 0x24
 802c522:	af00      	add	r7, sp, #0
 802c524:	60f8      	str	r0, [r7, #12]
 802c526:	60b9      	str	r1, [r7, #8]
 802c528:	607a      	str	r2, [r7, #4]
  size_t multiplier = 1, offset;
 802c52a:	2301      	movs	r3, #1
 802c52c:	61fb      	str	r3, [r7, #28]
  *value = 0;
 802c52e:	687b      	ldr	r3, [r7, #4]
 802c530:	2200      	movs	r2, #0
 802c532:	601a      	str	r2, [r3, #0]

  for (offset = 0; offset < 4 && offset < len; offset++) {
 802c534:	2300      	movs	r3, #0
 802c536:	61bb      	str	r3, [r7, #24]
 802c538:	e01c      	b.n	802c574 <decode_varint+0x56>
    uint8_t encoded_byte = buf[offset];
 802c53a:	68fa      	ldr	r2, [r7, #12]
 802c53c:	69bb      	ldr	r3, [r7, #24]
 802c53e:	4413      	add	r3, r2
 802c540:	781b      	ldrb	r3, [r3, #0]
 802c542:	75fb      	strb	r3, [r7, #23]
    *value += (encoded_byte & 0x7f) * multiplier;
 802c544:	687b      	ldr	r3, [r7, #4]
 802c546:	681a      	ldr	r2, [r3, #0]
 802c548:	7dfb      	ldrb	r3, [r7, #23]
 802c54a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 802c54e:	69f9      	ldr	r1, [r7, #28]
 802c550:	fb01 f303 	mul.w	r3, r1, r3
 802c554:	441a      	add	r2, r3
 802c556:	687b      	ldr	r3, [r7, #4]
 802c558:	601a      	str	r2, [r3, #0]
    multiplier *= 128;
 802c55a:	69fb      	ldr	r3, [r7, #28]
 802c55c:	01db      	lsls	r3, r3, #7
 802c55e:	61fb      	str	r3, [r7, #28]

    if ((encoded_byte & 0x80) == 0) return offset + 1;
 802c560:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802c564:	2b00      	cmp	r3, #0
 802c566:	db02      	blt.n	802c56e <decode_varint+0x50>
 802c568:	69bb      	ldr	r3, [r7, #24]
 802c56a:	3301      	adds	r3, #1
 802c56c:	e00a      	b.n	802c584 <decode_varint+0x66>
  for (offset = 0; offset < 4 && offset < len; offset++) {
 802c56e:	69bb      	ldr	r3, [r7, #24]
 802c570:	3301      	adds	r3, #1
 802c572:	61bb      	str	r3, [r7, #24]
 802c574:	69bb      	ldr	r3, [r7, #24]
 802c576:	2b03      	cmp	r3, #3
 802c578:	d803      	bhi.n	802c582 <decode_varint+0x64>
 802c57a:	69ba      	ldr	r2, [r7, #24]
 802c57c:	68bb      	ldr	r3, [r7, #8]
 802c57e:	429a      	cmp	r2, r3
 802c580:	d3db      	bcc.n	802c53a <decode_varint+0x1c>
  }

  return 0;
 802c582:	2300      	movs	r3, #0
}
 802c584:	4618      	mov	r0, r3
 802c586:	3724      	adds	r7, #36	@ 0x24
 802c588:	46bd      	mov	sp, r7
 802c58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c58e:	4770      	bx	lr

0802c590 <mqtt_prop_type_by_id>:

static int mqtt_prop_type_by_id(uint8_t prop_id) {
 802c590:	b480      	push	{r7}
 802c592:	b085      	sub	sp, #20
 802c594:	af00      	add	r7, sp, #0
 802c596:	4603      	mov	r3, r0
 802c598:	71fb      	strb	r3, [r7, #7]
  size_t i, num_properties = sizeof(s_prop_map) / sizeof(s_prop_map[0]);
 802c59a:	231b      	movs	r3, #27
 802c59c:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < num_properties; ++i) {
 802c59e:	2300      	movs	r3, #0
 802c5a0:	60fb      	str	r3, [r7, #12]
 802c5a2:	e00f      	b.n	802c5c4 <mqtt_prop_type_by_id+0x34>
    if (s_prop_map[i].id == prop_id) return s_prop_map[i].type;
 802c5a4:	4a0d      	ldr	r2, [pc, #52]	@ (802c5dc <mqtt_prop_type_by_id+0x4c>)
 802c5a6:	68fb      	ldr	r3, [r7, #12]
 802c5a8:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 802c5ac:	79fa      	ldrb	r2, [r7, #7]
 802c5ae:	429a      	cmp	r2, r3
 802c5b0:	d105      	bne.n	802c5be <mqtt_prop_type_by_id+0x2e>
 802c5b2:	4a0a      	ldr	r2, [pc, #40]	@ (802c5dc <mqtt_prop_type_by_id+0x4c>)
 802c5b4:	68fb      	ldr	r3, [r7, #12]
 802c5b6:	005b      	lsls	r3, r3, #1
 802c5b8:	4413      	add	r3, r2
 802c5ba:	785b      	ldrb	r3, [r3, #1]
 802c5bc:	e008      	b.n	802c5d0 <mqtt_prop_type_by_id+0x40>
  for (i = 0; i < num_properties; ++i) {
 802c5be:	68fb      	ldr	r3, [r7, #12]
 802c5c0:	3301      	adds	r3, #1
 802c5c2:	60fb      	str	r3, [r7, #12]
 802c5c4:	68fa      	ldr	r2, [r7, #12]
 802c5c6:	68bb      	ldr	r3, [r7, #8]
 802c5c8:	429a      	cmp	r2, r3
 802c5ca:	d3eb      	bcc.n	802c5a4 <mqtt_prop_type_by_id+0x14>
  }
  return -1;  // Property ID not found
 802c5cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 802c5d0:	4618      	mov	r0, r3
 802c5d2:	3714      	adds	r7, #20
 802c5d4:	46bd      	mov	sp, r7
 802c5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c5da:	4770      	bx	lr
 802c5dc:	08044510 	.word	0x08044510

0802c5e0 <get_properties_length>:

// Returns the size of the properties section, without the
// size of the content's length
static size_t get_properties_length(struct mg_mqtt_prop *props, size_t count) {
 802c5e0:	b580      	push	{r7, lr}
 802c5e2:	b084      	sub	sp, #16
 802c5e4:	af00      	add	r7, sp, #0
 802c5e6:	6078      	str	r0, [r7, #4]
 802c5e8:	6039      	str	r1, [r7, #0]
  size_t i, size = 0;
 802c5ea:	2300      	movs	r3, #0
 802c5ec:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < count; i++) {
 802c5ee:	2300      	movs	r3, #0
 802c5f0:	60fb      	str	r3, [r7, #12]
 802c5f2:	e07a      	b.n	802c6ea <get_properties_length+0x10a>
    size++;  // identifier
 802c5f4:	68bb      	ldr	r3, [r7, #8]
 802c5f6:	3301      	adds	r3, #1
 802c5f8:	60bb      	str	r3, [r7, #8]
    switch (mqtt_prop_type_by_id(props[i].id)) {
 802c5fa:	68fa      	ldr	r2, [r7, #12]
 802c5fc:	4613      	mov	r3, r2
 802c5fe:	005b      	lsls	r3, r3, #1
 802c600:	4413      	add	r3, r2
 802c602:	00db      	lsls	r3, r3, #3
 802c604:	461a      	mov	r2, r3
 802c606:	687b      	ldr	r3, [r7, #4]
 802c608:	4413      	add	r3, r2
 802c60a:	781b      	ldrb	r3, [r3, #0]
 802c60c:	4618      	mov	r0, r3
 802c60e:	f7ff ffbf 	bl	802c590 <mqtt_prop_type_by_id>
 802c612:	4603      	mov	r3, r0
 802c614:	2b06      	cmp	r3, #6
 802c616:	d863      	bhi.n	802c6e0 <get_properties_length+0x100>
 802c618:	a201      	add	r2, pc, #4	@ (adr r2, 802c620 <get_properties_length+0x40>)
 802c61a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802c61e:	bf00      	nop
 802c620:	0802c6d9 	.word	0x0802c6d9
 802c624:	0802c66d 	.word	0x0802c66d
 802c628:	0802c63d 	.word	0x0802c63d
 802c62c:	0802c689 	.word	0x0802c689
 802c630:	0802c6a5 	.word	0x0802c6a5
 802c634:	0802c6c9 	.word	0x0802c6c9
 802c638:	0802c6d1 	.word	0x0802c6d1
      case MQTT_PROP_TYPE_STRING_PAIR:
        size += (uint32_t) (props[i].val.len + props[i].key.len +
 802c63c:	68fa      	ldr	r2, [r7, #12]
 802c63e:	4613      	mov	r3, r2
 802c640:	005b      	lsls	r3, r3, #1
 802c642:	4413      	add	r3, r2
 802c644:	00db      	lsls	r3, r3, #3
 802c646:	461a      	mov	r2, r3
 802c648:	687b      	ldr	r3, [r7, #4]
 802c64a:	4413      	add	r3, r2
 802c64c:	6959      	ldr	r1, [r3, #20]
 802c64e:	68fa      	ldr	r2, [r7, #12]
 802c650:	4613      	mov	r3, r2
 802c652:	005b      	lsls	r3, r3, #1
 802c654:	4413      	add	r3, r2
 802c656:	00db      	lsls	r3, r3, #3
 802c658:	461a      	mov	r2, r3
 802c65a:	687b      	ldr	r3, [r7, #4]
 802c65c:	4413      	add	r3, r2
 802c65e:	68db      	ldr	r3, [r3, #12]
 802c660:	18ca      	adds	r2, r1, r3
 802c662:	68bb      	ldr	r3, [r7, #8]
 802c664:	4413      	add	r3, r2
 802c666:	3304      	adds	r3, #4
 802c668:	60bb      	str	r3, [r7, #8]
                            2 * sizeof(uint16_t));
        break;
 802c66a:	e03b      	b.n	802c6e4 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_STRING:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 802c66c:	68fa      	ldr	r2, [r7, #12]
 802c66e:	4613      	mov	r3, r2
 802c670:	005b      	lsls	r3, r3, #1
 802c672:	4413      	add	r3, r2
 802c674:	00db      	lsls	r3, r3, #3
 802c676:	461a      	mov	r2, r3
 802c678:	687b      	ldr	r3, [r7, #4]
 802c67a:	4413      	add	r3, r2
 802c67c:	695a      	ldr	r2, [r3, #20]
 802c67e:	68bb      	ldr	r3, [r7, #8]
 802c680:	4413      	add	r3, r2
 802c682:	3302      	adds	r3, #2
 802c684:	60bb      	str	r3, [r7, #8]
        break;
 802c686:	e02d      	b.n	802c6e4 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_BINARY_DATA:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 802c688:	68fa      	ldr	r2, [r7, #12]
 802c68a:	4613      	mov	r3, r2
 802c68c:	005b      	lsls	r3, r3, #1
 802c68e:	4413      	add	r3, r2
 802c690:	00db      	lsls	r3, r3, #3
 802c692:	461a      	mov	r2, r3
 802c694:	687b      	ldr	r3, [r7, #4]
 802c696:	4413      	add	r3, r2
 802c698:	695a      	ldr	r2, [r3, #20]
 802c69a:	68bb      	ldr	r3, [r7, #8]
 802c69c:	4413      	add	r3, r2
 802c69e:	3302      	adds	r3, #2
 802c6a0:	60bb      	str	r3, [r7, #8]
        break;
 802c6a2:	e01f      	b.n	802c6e4 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_VARIABLE_INT:
        size += varint_size((uint32_t) props[i].iv);
 802c6a4:	68fa      	ldr	r2, [r7, #12]
 802c6a6:	4613      	mov	r3, r2
 802c6a8:	005b      	lsls	r3, r3, #1
 802c6aa:	4413      	add	r3, r2
 802c6ac:	00db      	lsls	r3, r3, #3
 802c6ae:	461a      	mov	r2, r3
 802c6b0:	687b      	ldr	r3, [r7, #4]
 802c6b2:	4413      	add	r3, r2
 802c6b4:	685b      	ldr	r3, [r3, #4]
 802c6b6:	4618      	mov	r0, r3
 802c6b8:	f7ff fef4 	bl	802c4a4 <varint_size>
 802c6bc:	4603      	mov	r3, r0
 802c6be:	461a      	mov	r2, r3
 802c6c0:	68bb      	ldr	r3, [r7, #8]
 802c6c2:	4413      	add	r3, r2
 802c6c4:	60bb      	str	r3, [r7, #8]
        break;
 802c6c6:	e00d      	b.n	802c6e4 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_INT:
        size += (uint32_t) sizeof(uint32_t);
 802c6c8:	68bb      	ldr	r3, [r7, #8]
 802c6ca:	3304      	adds	r3, #4
 802c6cc:	60bb      	str	r3, [r7, #8]
        break;
 802c6ce:	e009      	b.n	802c6e4 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_SHORT:
        size += (uint32_t) sizeof(uint16_t);
 802c6d0:	68bb      	ldr	r3, [r7, #8]
 802c6d2:	3302      	adds	r3, #2
 802c6d4:	60bb      	str	r3, [r7, #8]
        break;
 802c6d6:	e005      	b.n	802c6e4 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_BYTE:
        size += (uint32_t) sizeof(uint8_t);
 802c6d8:	68bb      	ldr	r3, [r7, #8]
 802c6da:	3301      	adds	r3, #1
 802c6dc:	60bb      	str	r3, [r7, #8]
        break;
 802c6de:	e001      	b.n	802c6e4 <get_properties_length+0x104>
      default:
        return size;  // cannot parse further down
 802c6e0:	68bb      	ldr	r3, [r7, #8]
 802c6e2:	e007      	b.n	802c6f4 <get_properties_length+0x114>
  for (i = 0; i < count; i++) {
 802c6e4:	68fb      	ldr	r3, [r7, #12]
 802c6e6:	3301      	adds	r3, #1
 802c6e8:	60fb      	str	r3, [r7, #12]
 802c6ea:	68fa      	ldr	r2, [r7, #12]
 802c6ec:	683b      	ldr	r3, [r7, #0]
 802c6ee:	429a      	cmp	r2, r3
 802c6f0:	d380      	bcc.n	802c5f4 <get_properties_length+0x14>
    }
  }

  return size;
 802c6f2:	68bb      	ldr	r3, [r7, #8]
}
 802c6f4:	4618      	mov	r0, r3
 802c6f6:	3710      	adds	r7, #16
 802c6f8:	46bd      	mov	sp, r7
 802c6fa:	bd80      	pop	{r7, pc}

0802c6fc <get_props_size>:

// returns the entire size of the properties section, including the
// size of the variable length of the content
static size_t get_props_size(struct mg_mqtt_prop *props, size_t count) {
 802c6fc:	b580      	push	{r7, lr}
 802c6fe:	b084      	sub	sp, #16
 802c700:	af00      	add	r7, sp, #0
 802c702:	6078      	str	r0, [r7, #4]
 802c704:	6039      	str	r1, [r7, #0]
  size_t size = get_properties_length(props, count);
 802c706:	6839      	ldr	r1, [r7, #0]
 802c708:	6878      	ldr	r0, [r7, #4]
 802c70a:	f7ff ff69 	bl	802c5e0 <get_properties_length>
 802c70e:	60f8      	str	r0, [r7, #12]
  size += varint_size(size);
 802c710:	68f8      	ldr	r0, [r7, #12]
 802c712:	f7ff fec7 	bl	802c4a4 <varint_size>
 802c716:	4603      	mov	r3, r0
 802c718:	461a      	mov	r2, r3
 802c71a:	68fb      	ldr	r3, [r7, #12]
 802c71c:	4413      	add	r3, r2
 802c71e:	60fb      	str	r3, [r7, #12]
  return size;
 802c720:	68fb      	ldr	r3, [r7, #12]
}
 802c722:	4618      	mov	r0, r3
 802c724:	3710      	adds	r7, #16
 802c726:	46bd      	mov	sp, r7
 802c728:	bd80      	pop	{r7, pc}
	...

0802c72c <mg_send_mqtt_properties>:

static void mg_send_mqtt_properties(struct mg_connection *c,
                                    struct mg_mqtt_prop *props, size_t nprops) {
 802c72c:	b580      	push	{r7, lr}
 802c72e:	b08a      	sub	sp, #40	@ 0x28
 802c730:	af00      	add	r7, sp, #0
 802c732:	60f8      	str	r0, [r7, #12]
 802c734:	60b9      	str	r1, [r7, #8]
 802c736:	607a      	str	r2, [r7, #4]
  size_t total_size = get_properties_length(props, nprops);
 802c738:	6879      	ldr	r1, [r7, #4]
 802c73a:	68b8      	ldr	r0, [r7, #8]
 802c73c:	f7ff ff50 	bl	802c5e0 <get_properties_length>
 802c740:	6238      	str	r0, [r7, #32]
  uint8_t buf_v[4] = {0, 0, 0, 0};
 802c742:	2300      	movs	r3, #0
 802c744:	61bb      	str	r3, [r7, #24]
  uint8_t buf[4] = {0, 0, 0, 0};
 802c746:	2300      	movs	r3, #0
 802c748:	617b      	str	r3, [r7, #20]
  size_t i, len = encode_varint(buf, total_size);
 802c74a:	f107 0314 	add.w	r3, r7, #20
 802c74e:	6a39      	ldr	r1, [r7, #32]
 802c750:	4618      	mov	r0, r3
 802c752:	f7ff febd 	bl	802c4d0 <encode_varint>
 802c756:	61f8      	str	r0, [r7, #28]

  mg_send(c, buf, (size_t) len);
 802c758:	f107 0314 	add.w	r3, r7, #20
 802c75c:	69fa      	ldr	r2, [r7, #28]
 802c75e:	4619      	mov	r1, r3
 802c760:	68f8      	ldr	r0, [r7, #12]
 802c762:	f004 fc69 	bl	8031038 <mg_send>
  for (i = 0; i < nprops; i++) {
 802c766:	2300      	movs	r3, #0
 802c768:	627b      	str	r3, [r7, #36]	@ 0x24
 802c76a:	e11f      	b.n	802c9ac <mg_send_mqtt_properties+0x280>
    mg_send(c, &props[i].id, sizeof(props[i].id));
 802c76c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802c76e:	4613      	mov	r3, r2
 802c770:	005b      	lsls	r3, r3, #1
 802c772:	4413      	add	r3, r2
 802c774:	00db      	lsls	r3, r3, #3
 802c776:	461a      	mov	r2, r3
 802c778:	68bb      	ldr	r3, [r7, #8]
 802c77a:	4413      	add	r3, r2
 802c77c:	2201      	movs	r2, #1
 802c77e:	4619      	mov	r1, r3
 802c780:	68f8      	ldr	r0, [r7, #12]
 802c782:	f004 fc59 	bl	8031038 <mg_send>
    switch (mqtt_prop_type_by_id(props[i].id)) {
 802c786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802c788:	4613      	mov	r3, r2
 802c78a:	005b      	lsls	r3, r3, #1
 802c78c:	4413      	add	r3, r2
 802c78e:	00db      	lsls	r3, r3, #3
 802c790:	461a      	mov	r2, r3
 802c792:	68bb      	ldr	r3, [r7, #8]
 802c794:	4413      	add	r3, r2
 802c796:	781b      	ldrb	r3, [r3, #0]
 802c798:	4618      	mov	r0, r3
 802c79a:	f7ff fef9 	bl	802c590 <mqtt_prop_type_by_id>
 802c79e:	4603      	mov	r3, r0
 802c7a0:	2b06      	cmp	r3, #6
 802c7a2:	f200 8100 	bhi.w	802c9a6 <mg_send_mqtt_properties+0x27a>
 802c7a6:	a201      	add	r2, pc, #4	@ (adr r2, 802c7ac <mg_send_mqtt_properties+0x80>)
 802c7a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802c7ac:	0802c86b 	.word	0x0802c86b
 802c7b0:	0802c8d3 	.word	0x0802c8d3
 802c7b4:	0802c7c9 	.word	0x0802c7c9
 802c7b8:	0802c925 	.word	0x0802c925
 802c7bc:	0802c977 	.word	0x0802c977
 802c7c0:	0802c8af 	.word	0x0802c8af
 802c7c4:	0802c889 	.word	0x0802c889
      case MQTT_PROP_TYPE_STRING_PAIR:
        mg_send_u16(c, mg_htons((uint16_t) props[i].key.len));
 802c7c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802c7ca:	4613      	mov	r3, r2
 802c7cc:	005b      	lsls	r3, r3, #1
 802c7ce:	4413      	add	r3, r2
 802c7d0:	00db      	lsls	r3, r3, #3
 802c7d2:	461a      	mov	r2, r3
 802c7d4:	68bb      	ldr	r3, [r7, #8]
 802c7d6:	4413      	add	r3, r2
 802c7d8:	68db      	ldr	r3, [r3, #12]
 802c7da:	b29b      	uxth	r3, r3
 802c7dc:	4618      	mov	r0, r3
 802c7de:	f006 f9a4 	bl	8032b2a <mg_ntohs>
 802c7e2:	4603      	mov	r3, r0
 802c7e4:	4619      	mov	r1, r3
 802c7e6:	68f8      	ldr	r0, [r7, #12]
 802c7e8:	f7ff fe3d 	bl	802c466 <mg_send_u16>
        mg_send(c, props[i].key.buf, props[i].key.len);
 802c7ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802c7ee:	4613      	mov	r3, r2
 802c7f0:	005b      	lsls	r3, r3, #1
 802c7f2:	4413      	add	r3, r2
 802c7f4:	00db      	lsls	r3, r3, #3
 802c7f6:	461a      	mov	r2, r3
 802c7f8:	68bb      	ldr	r3, [r7, #8]
 802c7fa:	4413      	add	r3, r2
 802c7fc:	6899      	ldr	r1, [r3, #8]
 802c7fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802c800:	4613      	mov	r3, r2
 802c802:	005b      	lsls	r3, r3, #1
 802c804:	4413      	add	r3, r2
 802c806:	00db      	lsls	r3, r3, #3
 802c808:	461a      	mov	r2, r3
 802c80a:	68bb      	ldr	r3, [r7, #8]
 802c80c:	4413      	add	r3, r2
 802c80e:	68db      	ldr	r3, [r3, #12]
 802c810:	461a      	mov	r2, r3
 802c812:	68f8      	ldr	r0, [r7, #12]
 802c814:	f004 fc10 	bl	8031038 <mg_send>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 802c818:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802c81a:	4613      	mov	r3, r2
 802c81c:	005b      	lsls	r3, r3, #1
 802c81e:	4413      	add	r3, r2
 802c820:	00db      	lsls	r3, r3, #3
 802c822:	461a      	mov	r2, r3
 802c824:	68bb      	ldr	r3, [r7, #8]
 802c826:	4413      	add	r3, r2
 802c828:	695b      	ldr	r3, [r3, #20]
 802c82a:	b29b      	uxth	r3, r3
 802c82c:	4618      	mov	r0, r3
 802c82e:	f006 f97c 	bl	8032b2a <mg_ntohs>
 802c832:	4603      	mov	r3, r0
 802c834:	4619      	mov	r1, r3
 802c836:	68f8      	ldr	r0, [r7, #12]
 802c838:	f7ff fe15 	bl	802c466 <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 802c83c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802c83e:	4613      	mov	r3, r2
 802c840:	005b      	lsls	r3, r3, #1
 802c842:	4413      	add	r3, r2
 802c844:	00db      	lsls	r3, r3, #3
 802c846:	461a      	mov	r2, r3
 802c848:	68bb      	ldr	r3, [r7, #8]
 802c84a:	4413      	add	r3, r2
 802c84c:	6919      	ldr	r1, [r3, #16]
 802c84e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802c850:	4613      	mov	r3, r2
 802c852:	005b      	lsls	r3, r3, #1
 802c854:	4413      	add	r3, r2
 802c856:	00db      	lsls	r3, r3, #3
 802c858:	461a      	mov	r2, r3
 802c85a:	68bb      	ldr	r3, [r7, #8]
 802c85c:	4413      	add	r3, r2
 802c85e:	695b      	ldr	r3, [r3, #20]
 802c860:	461a      	mov	r2, r3
 802c862:	68f8      	ldr	r0, [r7, #12]
 802c864:	f004 fbe8 	bl	8031038 <mg_send>
        break;
 802c868:	e09d      	b.n	802c9a6 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_BYTE:
        mg_send(c, &props[i].iv, sizeof(uint8_t));
 802c86a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802c86c:	4613      	mov	r3, r2
 802c86e:	005b      	lsls	r3, r3, #1
 802c870:	4413      	add	r3, r2
 802c872:	00db      	lsls	r3, r3, #3
 802c874:	461a      	mov	r2, r3
 802c876:	68bb      	ldr	r3, [r7, #8]
 802c878:	4413      	add	r3, r2
 802c87a:	3304      	adds	r3, #4
 802c87c:	2201      	movs	r2, #1
 802c87e:	4619      	mov	r1, r3
 802c880:	68f8      	ldr	r0, [r7, #12]
 802c882:	f004 fbd9 	bl	8031038 <mg_send>
        break;
 802c886:	e08e      	b.n	802c9a6 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_SHORT:
        mg_send_u16(c, mg_htons((uint16_t) props[i].iv));
 802c888:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802c88a:	4613      	mov	r3, r2
 802c88c:	005b      	lsls	r3, r3, #1
 802c88e:	4413      	add	r3, r2
 802c890:	00db      	lsls	r3, r3, #3
 802c892:	461a      	mov	r2, r3
 802c894:	68bb      	ldr	r3, [r7, #8]
 802c896:	4413      	add	r3, r2
 802c898:	685b      	ldr	r3, [r3, #4]
 802c89a:	b29b      	uxth	r3, r3
 802c89c:	4618      	mov	r0, r3
 802c89e:	f006 f944 	bl	8032b2a <mg_ntohs>
 802c8a2:	4603      	mov	r3, r0
 802c8a4:	4619      	mov	r1, r3
 802c8a6:	68f8      	ldr	r0, [r7, #12]
 802c8a8:	f7ff fddd 	bl	802c466 <mg_send_u16>
        break;
 802c8ac:	e07b      	b.n	802c9a6 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_INT:
        mg_send_u32(c, mg_htonl((uint32_t) props[i].iv));
 802c8ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802c8b0:	4613      	mov	r3, r2
 802c8b2:	005b      	lsls	r3, r3, #1
 802c8b4:	4413      	add	r3, r2
 802c8b6:	00db      	lsls	r3, r3, #3
 802c8b8:	461a      	mov	r2, r3
 802c8ba:	68bb      	ldr	r3, [r7, #8]
 802c8bc:	4413      	add	r3, r2
 802c8be:	685b      	ldr	r3, [r3, #4]
 802c8c0:	4618      	mov	r0, r3
 802c8c2:	f006 f919 	bl	8032af8 <mg_ntohl>
 802c8c6:	4603      	mov	r3, r0
 802c8c8:	4619      	mov	r1, r3
 802c8ca:	68f8      	ldr	r0, [r7, #12]
 802c8cc:	f7ff fddb 	bl	802c486 <mg_send_u32>
        break;
 802c8d0:	e069      	b.n	802c9a6 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_STRING:
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 802c8d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802c8d4:	4613      	mov	r3, r2
 802c8d6:	005b      	lsls	r3, r3, #1
 802c8d8:	4413      	add	r3, r2
 802c8da:	00db      	lsls	r3, r3, #3
 802c8dc:	461a      	mov	r2, r3
 802c8de:	68bb      	ldr	r3, [r7, #8]
 802c8e0:	4413      	add	r3, r2
 802c8e2:	695b      	ldr	r3, [r3, #20]
 802c8e4:	b29b      	uxth	r3, r3
 802c8e6:	4618      	mov	r0, r3
 802c8e8:	f006 f91f 	bl	8032b2a <mg_ntohs>
 802c8ec:	4603      	mov	r3, r0
 802c8ee:	4619      	mov	r1, r3
 802c8f0:	68f8      	ldr	r0, [r7, #12]
 802c8f2:	f7ff fdb8 	bl	802c466 <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 802c8f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802c8f8:	4613      	mov	r3, r2
 802c8fa:	005b      	lsls	r3, r3, #1
 802c8fc:	4413      	add	r3, r2
 802c8fe:	00db      	lsls	r3, r3, #3
 802c900:	461a      	mov	r2, r3
 802c902:	68bb      	ldr	r3, [r7, #8]
 802c904:	4413      	add	r3, r2
 802c906:	6919      	ldr	r1, [r3, #16]
 802c908:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802c90a:	4613      	mov	r3, r2
 802c90c:	005b      	lsls	r3, r3, #1
 802c90e:	4413      	add	r3, r2
 802c910:	00db      	lsls	r3, r3, #3
 802c912:	461a      	mov	r2, r3
 802c914:	68bb      	ldr	r3, [r7, #8]
 802c916:	4413      	add	r3, r2
 802c918:	695b      	ldr	r3, [r3, #20]
 802c91a:	461a      	mov	r2, r3
 802c91c:	68f8      	ldr	r0, [r7, #12]
 802c91e:	f004 fb8b 	bl	8031038 <mg_send>
        break;
 802c922:	e040      	b.n	802c9a6 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_BINARY_DATA:
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 802c924:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802c926:	4613      	mov	r3, r2
 802c928:	005b      	lsls	r3, r3, #1
 802c92a:	4413      	add	r3, r2
 802c92c:	00db      	lsls	r3, r3, #3
 802c92e:	461a      	mov	r2, r3
 802c930:	68bb      	ldr	r3, [r7, #8]
 802c932:	4413      	add	r3, r2
 802c934:	695b      	ldr	r3, [r3, #20]
 802c936:	b29b      	uxth	r3, r3
 802c938:	4618      	mov	r0, r3
 802c93a:	f006 f8f6 	bl	8032b2a <mg_ntohs>
 802c93e:	4603      	mov	r3, r0
 802c940:	4619      	mov	r1, r3
 802c942:	68f8      	ldr	r0, [r7, #12]
 802c944:	f7ff fd8f 	bl	802c466 <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 802c948:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802c94a:	4613      	mov	r3, r2
 802c94c:	005b      	lsls	r3, r3, #1
 802c94e:	4413      	add	r3, r2
 802c950:	00db      	lsls	r3, r3, #3
 802c952:	461a      	mov	r2, r3
 802c954:	68bb      	ldr	r3, [r7, #8]
 802c956:	4413      	add	r3, r2
 802c958:	6919      	ldr	r1, [r3, #16]
 802c95a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802c95c:	4613      	mov	r3, r2
 802c95e:	005b      	lsls	r3, r3, #1
 802c960:	4413      	add	r3, r2
 802c962:	00db      	lsls	r3, r3, #3
 802c964:	461a      	mov	r2, r3
 802c966:	68bb      	ldr	r3, [r7, #8]
 802c968:	4413      	add	r3, r2
 802c96a:	695b      	ldr	r3, [r3, #20]
 802c96c:	461a      	mov	r2, r3
 802c96e:	68f8      	ldr	r0, [r7, #12]
 802c970:	f004 fb62 	bl	8031038 <mg_send>
        break;
 802c974:	e017      	b.n	802c9a6 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_VARIABLE_INT:
        len = encode_varint(buf_v, props[i].iv);
 802c976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802c978:	4613      	mov	r3, r2
 802c97a:	005b      	lsls	r3, r3, #1
 802c97c:	4413      	add	r3, r2
 802c97e:	00db      	lsls	r3, r3, #3
 802c980:	461a      	mov	r2, r3
 802c982:	68bb      	ldr	r3, [r7, #8]
 802c984:	4413      	add	r3, r2
 802c986:	685a      	ldr	r2, [r3, #4]
 802c988:	f107 0318 	add.w	r3, r7, #24
 802c98c:	4611      	mov	r1, r2
 802c98e:	4618      	mov	r0, r3
 802c990:	f7ff fd9e 	bl	802c4d0 <encode_varint>
 802c994:	61f8      	str	r0, [r7, #28]
        mg_send(c, buf_v, (size_t) len);
 802c996:	f107 0318 	add.w	r3, r7, #24
 802c99a:	69fa      	ldr	r2, [r7, #28]
 802c99c:	4619      	mov	r1, r3
 802c99e:	68f8      	ldr	r0, [r7, #12]
 802c9a0:	f004 fb4a 	bl	8031038 <mg_send>
        break;
 802c9a4:	bf00      	nop
  for (i = 0; i < nprops; i++) {
 802c9a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802c9a8:	3301      	adds	r3, #1
 802c9aa:	627b      	str	r3, [r7, #36]	@ 0x24
 802c9ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802c9ae:	687b      	ldr	r3, [r7, #4]
 802c9b0:	429a      	cmp	r2, r3
 802c9b2:	f4ff aedb 	bcc.w	802c76c <mg_send_mqtt_properties+0x40>
    }
  }
}
 802c9b6:	bf00      	nop
 802c9b8:	bf00      	nop
 802c9ba:	3728      	adds	r7, #40	@ 0x28
 802c9bc:	46bd      	mov	sp, r7
 802c9be:	bd80      	pop	{r7, pc}

0802c9c0 <mg_mqtt_login>:
  }

  return new_pos;
}

void mg_mqtt_login(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 802c9c0:	b580      	push	{r7, lr}
 802c9c2:	b08e      	sub	sp, #56	@ 0x38
 802c9c4:	af00      	add	r7, sp, #0
 802c9c6:	6078      	str	r0, [r7, #4]
 802c9c8:	6039      	str	r1, [r7, #0]
  char client_id[21];
  struct mg_str cid = opts->client_id;
 802c9ca:	683a      	ldr	r2, [r7, #0]
 802c9cc:	f107 0314 	add.w	r3, r7, #20
 802c9d0:	3210      	adds	r2, #16
 802c9d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 802c9d6:	e883 0003 	stmia.w	r3, {r0, r1}
  size_t total_len = 7 + 1 + 2 + 2;
 802c9da:	230c      	movs	r3, #12
 802c9dc:	637b      	str	r3, [r7, #52]	@ 0x34
  uint8_t hdr[8] = {0, 4, 'M', 'Q', 'T', 'T', opts->version, 0};
 802c9de:	2300      	movs	r3, #0
 802c9e0:	733b      	strb	r3, [r7, #12]
 802c9e2:	2304      	movs	r3, #4
 802c9e4:	737b      	strb	r3, [r7, #13]
 802c9e6:	234d      	movs	r3, #77	@ 0x4d
 802c9e8:	73bb      	strb	r3, [r7, #14]
 802c9ea:	2351      	movs	r3, #81	@ 0x51
 802c9ec:	73fb      	strb	r3, [r7, #15]
 802c9ee:	2354      	movs	r3, #84	@ 0x54
 802c9f0:	743b      	strb	r3, [r7, #16]
 802c9f2:	2354      	movs	r3, #84	@ 0x54
 802c9f4:	747b      	strb	r3, [r7, #17]
 802c9f6:	683b      	ldr	r3, [r7, #0]
 802c9f8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 802c9fc:	74bb      	strb	r3, [r7, #18]
 802c9fe:	2300      	movs	r3, #0
 802ca00:	74fb      	strb	r3, [r7, #19]

  if (cid.len == 0) {
 802ca02:	69bb      	ldr	r3, [r7, #24]
 802ca04:	2b00      	cmp	r3, #0
 802ca06:	d110      	bne.n	802ca2a <mg_mqtt_login+0x6a>
    mg_random_str(client_id, sizeof(client_id) - 1);
 802ca08:	f107 031c 	add.w	r3, r7, #28
 802ca0c:	2114      	movs	r1, #20
 802ca0e:	4618      	mov	r0, r3
 802ca10:	f006 f82c 	bl	8032a6c <mg_random_str>
    client_id[sizeof(client_id) - 1] = '\0';
 802ca14:	2300      	movs	r3, #0
 802ca16:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    cid = mg_str(client_id);
 802ca1a:	f107 0314 	add.w	r3, r7, #20
 802ca1e:	f107 021c 	add.w	r2, r7, #28
 802ca22:	4611      	mov	r1, r2
 802ca24:	4618      	mov	r0, r3
 802ca26:	f005 f8dd 	bl	8031be4 <mg_str_s>
  }

  if (hdr[6] == 0) hdr[6] = 4;  // If version is not set, use 4 (3.1.1)
 802ca2a:	7cbb      	ldrb	r3, [r7, #18]
 802ca2c:	2b00      	cmp	r3, #0
 802ca2e:	d101      	bne.n	802ca34 <mg_mqtt_login+0x74>
 802ca30:	2304      	movs	r3, #4
 802ca32:	74bb      	strb	r3, [r7, #18]
  c->is_mqtt5 = hdr[6] == 5;    // Set version 5 flag
 802ca34:	7cbb      	ldrb	r3, [r7, #18]
 802ca36:	2b05      	cmp	r3, #5
 802ca38:	bf0c      	ite	eq
 802ca3a:	2301      	moveq	r3, #1
 802ca3c:	2300      	movne	r3, #0
 802ca3e:	b2d9      	uxtb	r1, r3
 802ca40:	687a      	ldr	r2, [r7, #4]
 802ca42:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 802ca46:	f361 0382 	bfi	r3, r1, #2, #1
 802ca4a:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  hdr[7] = (uint8_t) ((opts->qos & 3) << 3);  // Connection flags
 802ca4e:	683b      	ldr	r3, [r7, #0]
 802ca50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 802ca54:	00db      	lsls	r3, r3, #3
 802ca56:	b2db      	uxtb	r3, r3
 802ca58:	f003 0318 	and.w	r3, r3, #24
 802ca5c:	b2db      	uxtb	r3, r3
 802ca5e:	74fb      	strb	r3, [r7, #19]
  if (opts->user.len > 0) {
 802ca60:	683b      	ldr	r3, [r7, #0]
 802ca62:	685b      	ldr	r3, [r3, #4]
 802ca64:	2b00      	cmp	r3, #0
 802ca66:	d00a      	beq.n	802ca7e <mg_mqtt_login+0xbe>
    total_len += 2 + (uint32_t) opts->user.len;
 802ca68:	683b      	ldr	r3, [r7, #0]
 802ca6a:	685a      	ldr	r2, [r3, #4]
 802ca6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ca6e:	4413      	add	r3, r2
 802ca70:	3302      	adds	r3, #2
 802ca72:	637b      	str	r3, [r7, #52]	@ 0x34
    hdr[7] |= MQTT_HAS_USER_NAME;
 802ca74:	7cfb      	ldrb	r3, [r7, #19]
 802ca76:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 802ca7a:	b2db      	uxtb	r3, r3
 802ca7c:	74fb      	strb	r3, [r7, #19]
  }
  if (opts->pass.len > 0) {
 802ca7e:	683b      	ldr	r3, [r7, #0]
 802ca80:	68db      	ldr	r3, [r3, #12]
 802ca82:	2b00      	cmp	r3, #0
 802ca84:	d00a      	beq.n	802ca9c <mg_mqtt_login+0xdc>
    total_len += 2 + (uint32_t) opts->pass.len;
 802ca86:	683b      	ldr	r3, [r7, #0]
 802ca88:	68da      	ldr	r2, [r3, #12]
 802ca8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ca8c:	4413      	add	r3, r2
 802ca8e:	3302      	adds	r3, #2
 802ca90:	637b      	str	r3, [r7, #52]	@ 0x34
    hdr[7] |= MQTT_HAS_PASSWORD;
 802ca92:	7cfb      	ldrb	r3, [r7, #19]
 802ca94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802ca98:	b2db      	uxtb	r3, r3
 802ca9a:	74fb      	strb	r3, [r7, #19]
  }
  if (opts->topic.len > 0) { // allow zero-length msgs, message.len is size_t
 802ca9c:	683b      	ldr	r3, [r7, #0]
 802ca9e:	69db      	ldr	r3, [r3, #28]
 802caa0:	2b00      	cmp	r3, #0
 802caa2:	d00d      	beq.n	802cac0 <mg_mqtt_login+0x100>
    total_len += 4 + (uint32_t) opts->topic.len + (uint32_t) opts->message.len;
 802caa4:	683b      	ldr	r3, [r7, #0]
 802caa6:	69da      	ldr	r2, [r3, #28]
 802caa8:	683b      	ldr	r3, [r7, #0]
 802caaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802caac:	441a      	add	r2, r3
 802caae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802cab0:	4413      	add	r3, r2
 802cab2:	3304      	adds	r3, #4
 802cab4:	637b      	str	r3, [r7, #52]	@ 0x34
    hdr[7] |= MQTT_HAS_WILL;
 802cab6:	7cfb      	ldrb	r3, [r7, #19]
 802cab8:	f043 0304 	orr.w	r3, r3, #4
 802cabc:	b2db      	uxtb	r3, r3
 802cabe:	74fb      	strb	r3, [r7, #19]
  }
  if (opts->clean || cid.len == 0) hdr[7] |= MQTT_CLEAN_SESSION;
 802cac0:	683b      	ldr	r3, [r7, #0]
 802cac2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 802cac6:	2b00      	cmp	r3, #0
 802cac8:	d102      	bne.n	802cad0 <mg_mqtt_login+0x110>
 802caca:	69bb      	ldr	r3, [r7, #24]
 802cacc:	2b00      	cmp	r3, #0
 802cace:	d104      	bne.n	802cada <mg_mqtt_login+0x11a>
 802cad0:	7cfb      	ldrb	r3, [r7, #19]
 802cad2:	f043 0302 	orr.w	r3, r3, #2
 802cad6:	b2db      	uxtb	r3, r3
 802cad8:	74fb      	strb	r3, [r7, #19]
  if (opts->retain) hdr[7] |= MQTT_WILL_RETAIN;
 802cada:	683b      	ldr	r3, [r7, #0]
 802cadc:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 802cae0:	2b00      	cmp	r3, #0
 802cae2:	d004      	beq.n	802caee <mg_mqtt_login+0x12e>
 802cae4:	7cfb      	ldrb	r3, [r7, #19]
 802cae6:	f043 0320 	orr.w	r3, r3, #32
 802caea:	b2db      	uxtb	r3, r3
 802caec:	74fb      	strb	r3, [r7, #19]
  total_len += (uint32_t) cid.len;
 802caee:	69bb      	ldr	r3, [r7, #24]
 802caf0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802caf2:	4413      	add	r3, r2
 802caf4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (c->is_mqtt5) {
 802caf6:	687b      	ldr	r3, [r7, #4]
 802caf8:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 802cafc:	f003 0304 	and.w	r3, r3, #4
 802cb00:	b2db      	uxtb	r3, r3
 802cb02:	2b00      	cmp	r3, #0
 802cb04:	d01c      	beq.n	802cb40 <mg_mqtt_login+0x180>
    total_len += get_props_size(opts->props, opts->num_props);
 802cb06:	683b      	ldr	r3, [r7, #0]
 802cb08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 802cb0a:	683b      	ldr	r3, [r7, #0]
 802cb0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802cb0e:	4619      	mov	r1, r3
 802cb10:	4610      	mov	r0, r2
 802cb12:	f7ff fdf3 	bl	802c6fc <get_props_size>
 802cb16:	4602      	mov	r2, r0
 802cb18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802cb1a:	4413      	add	r3, r2
 802cb1c:	637b      	str	r3, [r7, #52]	@ 0x34
    if (hdr[7] & MQTT_HAS_WILL)
 802cb1e:	7cfb      	ldrb	r3, [r7, #19]
 802cb20:	f003 0304 	and.w	r3, r3, #4
 802cb24:	2b00      	cmp	r3, #0
 802cb26:	d00b      	beq.n	802cb40 <mg_mqtt_login+0x180>
      total_len += get_props_size(opts->will_props, opts->num_will_props);
 802cb28:	683b      	ldr	r3, [r7, #0]
 802cb2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 802cb2c:	683b      	ldr	r3, [r7, #0]
 802cb2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802cb30:	4619      	mov	r1, r3
 802cb32:	4610      	mov	r0, r2
 802cb34:	f7ff fde2 	bl	802c6fc <get_props_size>
 802cb38:	4602      	mov	r2, r0
 802cb3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802cb3c:	4413      	add	r3, r2
 802cb3e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  mg_mqtt_send_header(c, MQTT_CMD_CONNECT, 0, (uint32_t) total_len);
 802cb40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802cb42:	2200      	movs	r2, #0
 802cb44:	2101      	movs	r1, #1
 802cb46:	6878      	ldr	r0, [r7, #4]
 802cb48:	f7ff fc48 	bl	802c3dc <mg_mqtt_send_header>
  mg_send(c, hdr, sizeof(hdr));
 802cb4c:	f107 030c 	add.w	r3, r7, #12
 802cb50:	2208      	movs	r2, #8
 802cb52:	4619      	mov	r1, r3
 802cb54:	6878      	ldr	r0, [r7, #4]
 802cb56:	f004 fa6f 	bl	8031038 <mg_send>
  // keepalive == 0 means "do not disconnect us!"
  mg_send_u16(c, mg_htons((uint16_t) opts->keepalive));
 802cb5a:	683b      	ldr	r3, [r7, #0]
 802cb5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802cb5e:	4618      	mov	r0, r3
 802cb60:	f005 ffe3 	bl	8032b2a <mg_ntohs>
 802cb64:	4603      	mov	r3, r0
 802cb66:	4619      	mov	r1, r3
 802cb68:	6878      	ldr	r0, [r7, #4]
 802cb6a:	f7ff fc7c 	bl	802c466 <mg_send_u16>

  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 802cb6e:	687b      	ldr	r3, [r7, #4]
 802cb70:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 802cb74:	f003 0304 	and.w	r3, r3, #4
 802cb78:	b2db      	uxtb	r3, r3
 802cb7a:	2b00      	cmp	r3, #0
 802cb7c:	d007      	beq.n	802cb8e <mg_mqtt_login+0x1ce>
 802cb7e:	683b      	ldr	r3, [r7, #0]
 802cb80:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 802cb82:	683b      	ldr	r3, [r7, #0]
 802cb84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802cb86:	461a      	mov	r2, r3
 802cb88:	6878      	ldr	r0, [r7, #4]
 802cb8a:	f7ff fdcf 	bl	802c72c <mg_send_mqtt_properties>

  mg_send_u16(c, mg_htons((uint16_t) cid.len));
 802cb8e:	69bb      	ldr	r3, [r7, #24]
 802cb90:	b29b      	uxth	r3, r3
 802cb92:	4618      	mov	r0, r3
 802cb94:	f005 ffc9 	bl	8032b2a <mg_ntohs>
 802cb98:	4603      	mov	r3, r0
 802cb9a:	4619      	mov	r1, r3
 802cb9c:	6878      	ldr	r0, [r7, #4]
 802cb9e:	f7ff fc62 	bl	802c466 <mg_send_u16>
  mg_send(c, cid.buf, cid.len);
 802cba2:	697b      	ldr	r3, [r7, #20]
 802cba4:	69ba      	ldr	r2, [r7, #24]
 802cba6:	4619      	mov	r1, r3
 802cba8:	6878      	ldr	r0, [r7, #4]
 802cbaa:	f004 fa45 	bl	8031038 <mg_send>

  if (hdr[7] & MQTT_HAS_WILL) {
 802cbae:	7cfb      	ldrb	r3, [r7, #19]
 802cbb0:	f003 0304 	and.w	r3, r3, #4
 802cbb4:	2b00      	cmp	r3, #0
 802cbb6:	d035      	beq.n	802cc24 <mg_mqtt_login+0x264>
    if (c->is_mqtt5)
 802cbb8:	687b      	ldr	r3, [r7, #4]
 802cbba:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 802cbbe:	f003 0304 	and.w	r3, r3, #4
 802cbc2:	b2db      	uxtb	r3, r3
 802cbc4:	2b00      	cmp	r3, #0
 802cbc6:	d007      	beq.n	802cbd8 <mg_mqtt_login+0x218>
      mg_send_mqtt_properties(c, opts->will_props, opts->num_will_props);
 802cbc8:	683b      	ldr	r3, [r7, #0]
 802cbca:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 802cbcc:	683b      	ldr	r3, [r7, #0]
 802cbce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802cbd0:	461a      	mov	r2, r3
 802cbd2:	6878      	ldr	r0, [r7, #4]
 802cbd4:	f7ff fdaa 	bl	802c72c <mg_send_mqtt_properties>

    mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 802cbd8:	683b      	ldr	r3, [r7, #0]
 802cbda:	69db      	ldr	r3, [r3, #28]
 802cbdc:	b29b      	uxth	r3, r3
 802cbde:	4618      	mov	r0, r3
 802cbe0:	f005 ffa3 	bl	8032b2a <mg_ntohs>
 802cbe4:	4603      	mov	r3, r0
 802cbe6:	4619      	mov	r1, r3
 802cbe8:	6878      	ldr	r0, [r7, #4]
 802cbea:	f7ff fc3c 	bl	802c466 <mg_send_u16>
    mg_send(c, opts->topic.buf, opts->topic.len);
 802cbee:	683b      	ldr	r3, [r7, #0]
 802cbf0:	6999      	ldr	r1, [r3, #24]
 802cbf2:	683b      	ldr	r3, [r7, #0]
 802cbf4:	69db      	ldr	r3, [r3, #28]
 802cbf6:	461a      	mov	r2, r3
 802cbf8:	6878      	ldr	r0, [r7, #4]
 802cbfa:	f004 fa1d 	bl	8031038 <mg_send>
    mg_send_u16(c, mg_htons((uint16_t) opts->message.len));
 802cbfe:	683b      	ldr	r3, [r7, #0]
 802cc00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802cc02:	b29b      	uxth	r3, r3
 802cc04:	4618      	mov	r0, r3
 802cc06:	f005 ff90 	bl	8032b2a <mg_ntohs>
 802cc0a:	4603      	mov	r3, r0
 802cc0c:	4619      	mov	r1, r3
 802cc0e:	6878      	ldr	r0, [r7, #4]
 802cc10:	f7ff fc29 	bl	802c466 <mg_send_u16>
    mg_send(c, opts->message.buf, opts->message.len);
 802cc14:	683b      	ldr	r3, [r7, #0]
 802cc16:	6a19      	ldr	r1, [r3, #32]
 802cc18:	683b      	ldr	r3, [r7, #0]
 802cc1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802cc1c:	461a      	mov	r2, r3
 802cc1e:	6878      	ldr	r0, [r7, #4]
 802cc20:	f004 fa0a 	bl	8031038 <mg_send>
  }
  if (opts->user.len > 0) {
 802cc24:	683b      	ldr	r3, [r7, #0]
 802cc26:	685b      	ldr	r3, [r3, #4]
 802cc28:	2b00      	cmp	r3, #0
 802cc2a:	d012      	beq.n	802cc52 <mg_mqtt_login+0x292>
    mg_send_u16(c, mg_htons((uint16_t) opts->user.len));
 802cc2c:	683b      	ldr	r3, [r7, #0]
 802cc2e:	685b      	ldr	r3, [r3, #4]
 802cc30:	b29b      	uxth	r3, r3
 802cc32:	4618      	mov	r0, r3
 802cc34:	f005 ff79 	bl	8032b2a <mg_ntohs>
 802cc38:	4603      	mov	r3, r0
 802cc3a:	4619      	mov	r1, r3
 802cc3c:	6878      	ldr	r0, [r7, #4]
 802cc3e:	f7ff fc12 	bl	802c466 <mg_send_u16>
    mg_send(c, opts->user.buf, opts->user.len);
 802cc42:	683b      	ldr	r3, [r7, #0]
 802cc44:	6819      	ldr	r1, [r3, #0]
 802cc46:	683b      	ldr	r3, [r7, #0]
 802cc48:	685b      	ldr	r3, [r3, #4]
 802cc4a:	461a      	mov	r2, r3
 802cc4c:	6878      	ldr	r0, [r7, #4]
 802cc4e:	f004 f9f3 	bl	8031038 <mg_send>
  }
  if (opts->pass.len > 0) {
 802cc52:	683b      	ldr	r3, [r7, #0]
 802cc54:	68db      	ldr	r3, [r3, #12]
 802cc56:	2b00      	cmp	r3, #0
 802cc58:	d012      	beq.n	802cc80 <mg_mqtt_login+0x2c0>
    mg_send_u16(c, mg_htons((uint16_t) opts->pass.len));
 802cc5a:	683b      	ldr	r3, [r7, #0]
 802cc5c:	68db      	ldr	r3, [r3, #12]
 802cc5e:	b29b      	uxth	r3, r3
 802cc60:	4618      	mov	r0, r3
 802cc62:	f005 ff62 	bl	8032b2a <mg_ntohs>
 802cc66:	4603      	mov	r3, r0
 802cc68:	4619      	mov	r1, r3
 802cc6a:	6878      	ldr	r0, [r7, #4]
 802cc6c:	f7ff fbfb 	bl	802c466 <mg_send_u16>
    mg_send(c, opts->pass.buf, opts->pass.len);
 802cc70:	683b      	ldr	r3, [r7, #0]
 802cc72:	6899      	ldr	r1, [r3, #8]
 802cc74:	683b      	ldr	r3, [r7, #0]
 802cc76:	68db      	ldr	r3, [r3, #12]
 802cc78:	461a      	mov	r2, r3
 802cc7a:	6878      	ldr	r0, [r7, #4]
 802cc7c:	f004 f9dc 	bl	8031038 <mg_send>
  }
}
 802cc80:	bf00      	nop
 802cc82:	3738      	adds	r7, #56	@ 0x38
 802cc84:	46bd      	mov	sp, r7
 802cc86:	bd80      	pop	{r7, pc}

0802cc88 <mg_mqtt_pub>:

uint16_t mg_mqtt_pub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 802cc88:	b590      	push	{r4, r7, lr}
 802cc8a:	b087      	sub	sp, #28
 802cc8c:	af02      	add	r7, sp, #8
 802cc8e:	6078      	str	r0, [r7, #4]
 802cc90:	6039      	str	r1, [r7, #0]
  uint16_t id = opts->retransmit_id;
 802cc92:	683b      	ldr	r3, [r7, #0]
 802cc94:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 802cc96:	81fb      	strh	r3, [r7, #14]
  uint8_t flags = (uint8_t) (((opts->qos & 3) << 1) | (opts->retain ? 1 : 0));
 802cc98:	683b      	ldr	r3, [r7, #0]
 802cc9a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 802cc9e:	005b      	lsls	r3, r3, #1
 802cca0:	b25b      	sxtb	r3, r3
 802cca2:	f003 0306 	and.w	r3, r3, #6
 802cca6:	b25b      	sxtb	r3, r3
 802cca8:	683a      	ldr	r2, [r7, #0]
 802ccaa:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 802ccae:	2a00      	cmp	r2, #0
 802ccb0:	d001      	beq.n	802ccb6 <mg_mqtt_pub+0x2e>
 802ccb2:	2201      	movs	r2, #1
 802ccb4:	e000      	b.n	802ccb8 <mg_mqtt_pub+0x30>
 802ccb6:	2200      	movs	r2, #0
 802ccb8:	4313      	orrs	r3, r2
 802ccba:	b25b      	sxtb	r3, r3
 802ccbc:	737b      	strb	r3, [r7, #13]
  size_t len = 2 + opts->topic.len + opts->message.len;
 802ccbe:	683b      	ldr	r3, [r7, #0]
 802ccc0:	69da      	ldr	r2, [r3, #28]
 802ccc2:	683b      	ldr	r3, [r7, #0]
 802ccc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802ccc6:	4413      	add	r3, r2
 802ccc8:	3302      	adds	r3, #2
 802ccca:	60bb      	str	r3, [r7, #8]
  MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) opts->topic.len,
 802cccc:	4b51      	ldr	r3, [pc, #324]	@ (802ce14 <mg_mqtt_pub+0x18c>)
 802ccce:	681b      	ldr	r3, [r3, #0]
 802ccd0:	2b02      	cmp	r3, #2
 802ccd2:	dd19      	ble.n	802cd08 <mg_mqtt_pub+0x80>
 802ccd4:	4b50      	ldr	r3, [pc, #320]	@ (802ce18 <mg_mqtt_pub+0x190>)
 802ccd6:	f241 123c 	movw	r2, #4412	@ 0x113c
 802ccda:	4950      	ldr	r1, [pc, #320]	@ (802ce1c <mg_mqtt_pub+0x194>)
 802ccdc:	2003      	movs	r0, #3
 802ccde:	f7fe fa7d 	bl	802b1dc <mg_log_prefix>
 802cce2:	687b      	ldr	r3, [r7, #4]
 802cce4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 802cce6:	683b      	ldr	r3, [r7, #0]
 802cce8:	69db      	ldr	r3, [r3, #28]
 802ccea:	461c      	mov	r4, r3
 802ccec:	683b      	ldr	r3, [r7, #0]
 802ccee:	699a      	ldr	r2, [r3, #24]
 802ccf0:	683b      	ldr	r3, [r7, #0]
 802ccf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802ccf4:	4618      	mov	r0, r3
 802ccf6:	683b      	ldr	r3, [r7, #0]
 802ccf8:	6a1b      	ldr	r3, [r3, #32]
 802ccfa:	9301      	str	r3, [sp, #4]
 802ccfc:	9000      	str	r0, [sp, #0]
 802ccfe:	4613      	mov	r3, r2
 802cd00:	4622      	mov	r2, r4
 802cd02:	4847      	ldr	r0, [pc, #284]	@ (802ce20 <mg_mqtt_pub+0x198>)
 802cd04:	f7fe faba 	bl	802b27c <mg_log>
            (char *) opts->topic.buf, (int) opts->message.len,
            (char *) opts->message.buf));
  if (opts->qos > 0) len += 2;
 802cd08:	683b      	ldr	r3, [r7, #0]
 802cd0a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 802cd0e:	2b00      	cmp	r3, #0
 802cd10:	d002      	beq.n	802cd18 <mg_mqtt_pub+0x90>
 802cd12:	68bb      	ldr	r3, [r7, #8]
 802cd14:	3302      	adds	r3, #2
 802cd16:	60bb      	str	r3, [r7, #8]
  if (c->is_mqtt5) len += get_props_size(opts->props, opts->num_props);
 802cd18:	687b      	ldr	r3, [r7, #4]
 802cd1a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 802cd1e:	f003 0304 	and.w	r3, r3, #4
 802cd22:	b2db      	uxtb	r3, r3
 802cd24:	2b00      	cmp	r3, #0
 802cd26:	d00b      	beq.n	802cd40 <mg_mqtt_pub+0xb8>
 802cd28:	683b      	ldr	r3, [r7, #0]
 802cd2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 802cd2c:	683b      	ldr	r3, [r7, #0]
 802cd2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802cd30:	4619      	mov	r1, r3
 802cd32:	4610      	mov	r0, r2
 802cd34:	f7ff fce2 	bl	802c6fc <get_props_size>
 802cd38:	4602      	mov	r2, r0
 802cd3a:	68bb      	ldr	r3, [r7, #8]
 802cd3c:	4413      	add	r3, r2
 802cd3e:	60bb      	str	r3, [r7, #8]

  if (opts->qos > 0 && id != 0) flags |= 1 << 3;
 802cd40:	683b      	ldr	r3, [r7, #0]
 802cd42:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 802cd46:	2b00      	cmp	r3, #0
 802cd48:	d006      	beq.n	802cd58 <mg_mqtt_pub+0xd0>
 802cd4a:	89fb      	ldrh	r3, [r7, #14]
 802cd4c:	2b00      	cmp	r3, #0
 802cd4e:	d003      	beq.n	802cd58 <mg_mqtt_pub+0xd0>
 802cd50:	7b7b      	ldrb	r3, [r7, #13]
 802cd52:	f043 0308 	orr.w	r3, r3, #8
 802cd56:	737b      	strb	r3, [r7, #13]
  mg_mqtt_send_header(c, MQTT_CMD_PUBLISH, flags, (uint32_t) len);
 802cd58:	7b7a      	ldrb	r2, [r7, #13]
 802cd5a:	68bb      	ldr	r3, [r7, #8]
 802cd5c:	2103      	movs	r1, #3
 802cd5e:	6878      	ldr	r0, [r7, #4]
 802cd60:	f7ff fb3c 	bl	802c3dc <mg_mqtt_send_header>
  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 802cd64:	683b      	ldr	r3, [r7, #0]
 802cd66:	69db      	ldr	r3, [r3, #28]
 802cd68:	b29b      	uxth	r3, r3
 802cd6a:	4618      	mov	r0, r3
 802cd6c:	f005 fedd 	bl	8032b2a <mg_ntohs>
 802cd70:	4603      	mov	r3, r0
 802cd72:	4619      	mov	r1, r3
 802cd74:	6878      	ldr	r0, [r7, #4]
 802cd76:	f7ff fb76 	bl	802c466 <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 802cd7a:	683b      	ldr	r3, [r7, #0]
 802cd7c:	6999      	ldr	r1, [r3, #24]
 802cd7e:	683b      	ldr	r3, [r7, #0]
 802cd80:	69db      	ldr	r3, [r3, #28]
 802cd82:	461a      	mov	r2, r3
 802cd84:	6878      	ldr	r0, [r7, #4]
 802cd86:	f004 f957 	bl	8031038 <mg_send>
  if (opts->qos > 0) {    // need to send 'id' field
 802cd8a:	683b      	ldr	r3, [r7, #0]
 802cd8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 802cd90:	2b00      	cmp	r3, #0
 802cd92:	d01e      	beq.n	802cdd2 <mg_mqtt_pub+0x14a>
    if (id == 0) {  // generate new one if not resending
 802cd94:	89fb      	ldrh	r3, [r7, #14]
 802cd96:	2b00      	cmp	r3, #0
 802cd98:	d112      	bne.n	802cdc0 <mg_mqtt_pub+0x138>
      if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 802cd9a:	687b      	ldr	r3, [r7, #4]
 802cd9c:	685b      	ldr	r3, [r3, #4]
 802cd9e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 802cda0:	3201      	adds	r2, #1
 802cda2:	b292      	uxth	r2, r2
 802cda4:	859a      	strh	r2, [r3, #44]	@ 0x2c
 802cda6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 802cda8:	2b00      	cmp	r3, #0
 802cdaa:	d105      	bne.n	802cdb8 <mg_mqtt_pub+0x130>
 802cdac:	687b      	ldr	r3, [r7, #4]
 802cdae:	685b      	ldr	r3, [r3, #4]
 802cdb0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 802cdb2:	3201      	adds	r2, #1
 802cdb4:	b292      	uxth	r2, r2
 802cdb6:	859a      	strh	r2, [r3, #44]	@ 0x2c
      id = c->mgr->mqtt_id;
 802cdb8:	687b      	ldr	r3, [r7, #4]
 802cdba:	685b      	ldr	r3, [r3, #4]
 802cdbc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 802cdbe:	81fb      	strh	r3, [r7, #14]
    }
    mg_send_u16(c, mg_htons(id));
 802cdc0:	89fb      	ldrh	r3, [r7, #14]
 802cdc2:	4618      	mov	r0, r3
 802cdc4:	f005 feb1 	bl	8032b2a <mg_ntohs>
 802cdc8:	4603      	mov	r3, r0
 802cdca:	4619      	mov	r1, r3
 802cdcc:	6878      	ldr	r0, [r7, #4]
 802cdce:	f7ff fb4a 	bl	802c466 <mg_send_u16>
  }

  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 802cdd2:	687b      	ldr	r3, [r7, #4]
 802cdd4:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 802cdd8:	f003 0304 	and.w	r3, r3, #4
 802cddc:	b2db      	uxtb	r3, r3
 802cdde:	2b00      	cmp	r3, #0
 802cde0:	d007      	beq.n	802cdf2 <mg_mqtt_pub+0x16a>
 802cde2:	683b      	ldr	r3, [r7, #0]
 802cde4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 802cde6:	683b      	ldr	r3, [r7, #0]
 802cde8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802cdea:	461a      	mov	r2, r3
 802cdec:	6878      	ldr	r0, [r7, #4]
 802cdee:	f7ff fc9d 	bl	802c72c <mg_send_mqtt_properties>

  if (opts->message.len > 0) mg_send(c, opts->message.buf, opts->message.len);
 802cdf2:	683b      	ldr	r3, [r7, #0]
 802cdf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802cdf6:	2b00      	cmp	r3, #0
 802cdf8:	d007      	beq.n	802ce0a <mg_mqtt_pub+0x182>
 802cdfa:	683b      	ldr	r3, [r7, #0]
 802cdfc:	6a19      	ldr	r1, [r3, #32]
 802cdfe:	683b      	ldr	r3, [r7, #0]
 802ce00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802ce02:	461a      	mov	r2, r3
 802ce04:	6878      	ldr	r0, [r7, #4]
 802ce06:	f004 f917 	bl	8031038 <mg_send>
  return id;
 802ce0a:	89fb      	ldrh	r3, [r7, #14]
}
 802ce0c:	4618      	mov	r0, r3
 802ce0e:	3714      	adds	r7, #20
 802ce10:	46bd      	mov	sp, r7
 802ce12:	bd90      	pop	{r4, r7, pc}
 802ce14:	20000298 	.word	0x20000298
 802ce18:	080445cc 	.word	0x080445cc
 802ce1c:	08041564 	.word	0x08041564
 802ce20:	080429f4 	.word	0x080429f4

0802ce24 <mg_mqtt_sub>:

void mg_mqtt_sub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 802ce24:	b580      	push	{r7, lr}
 802ce26:	b086      	sub	sp, #24
 802ce28:	af00      	add	r7, sp, #0
 802ce2a:	6078      	str	r0, [r7, #4]
 802ce2c:	6039      	str	r1, [r7, #0]
  uint8_t qos_ = opts->qos & 3;
 802ce2e:	683b      	ldr	r3, [r7, #0]
 802ce30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 802ce34:	f003 0303 	and.w	r3, r3, #3
 802ce38:	b2db      	uxtb	r3, r3
 802ce3a:	73fb      	strb	r3, [r7, #15]
  size_t plen = c->is_mqtt5 ? get_props_size(opts->props, opts->num_props) : 0;
 802ce3c:	687b      	ldr	r3, [r7, #4]
 802ce3e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 802ce42:	f003 0304 	and.w	r3, r3, #4
 802ce46:	b2db      	uxtb	r3, r3
 802ce48:	2b00      	cmp	r3, #0
 802ce4a:	d009      	beq.n	802ce60 <mg_mqtt_sub+0x3c>
 802ce4c:	683b      	ldr	r3, [r7, #0]
 802ce4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 802ce50:	683b      	ldr	r3, [r7, #0]
 802ce52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802ce54:	4619      	mov	r1, r3
 802ce56:	4610      	mov	r0, r2
 802ce58:	f7ff fc50 	bl	802c6fc <get_props_size>
 802ce5c:	4603      	mov	r3, r0
 802ce5e:	e000      	b.n	802ce62 <mg_mqtt_sub+0x3e>
 802ce60:	2300      	movs	r3, #0
 802ce62:	617b      	str	r3, [r7, #20]
  size_t len = 2 + opts->topic.len + 2 + 1 + plen;
 802ce64:	683b      	ldr	r3, [r7, #0]
 802ce66:	69da      	ldr	r2, [r3, #28]
 802ce68:	697b      	ldr	r3, [r7, #20]
 802ce6a:	4413      	add	r3, r2
 802ce6c:	3305      	adds	r3, #5
 802ce6e:	613b      	str	r3, [r7, #16]

  mg_mqtt_send_header(c, MQTT_CMD_SUBSCRIBE, 2, (uint32_t) len);
 802ce70:	693b      	ldr	r3, [r7, #16]
 802ce72:	2202      	movs	r2, #2
 802ce74:	2108      	movs	r1, #8
 802ce76:	6878      	ldr	r0, [r7, #4]
 802ce78:	f7ff fab0 	bl	802c3dc <mg_mqtt_send_header>
  if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 802ce7c:	687b      	ldr	r3, [r7, #4]
 802ce7e:	685b      	ldr	r3, [r3, #4]
 802ce80:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 802ce82:	3201      	adds	r2, #1
 802ce84:	b292      	uxth	r2, r2
 802ce86:	859a      	strh	r2, [r3, #44]	@ 0x2c
 802ce88:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 802ce8a:	2b00      	cmp	r3, #0
 802ce8c:	d105      	bne.n	802ce9a <mg_mqtt_sub+0x76>
 802ce8e:	687b      	ldr	r3, [r7, #4]
 802ce90:	685b      	ldr	r3, [r3, #4]
 802ce92:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 802ce94:	3201      	adds	r2, #1
 802ce96:	b292      	uxth	r2, r2
 802ce98:	859a      	strh	r2, [r3, #44]	@ 0x2c
  mg_send_u16(c, mg_htons(c->mgr->mqtt_id));
 802ce9a:	687b      	ldr	r3, [r7, #4]
 802ce9c:	685b      	ldr	r3, [r3, #4]
 802ce9e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 802cea0:	4618      	mov	r0, r3
 802cea2:	f005 fe42 	bl	8032b2a <mg_ntohs>
 802cea6:	4603      	mov	r3, r0
 802cea8:	4619      	mov	r1, r3
 802ceaa:	6878      	ldr	r0, [r7, #4]
 802ceac:	f7ff fadb 	bl	802c466 <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 802ceb0:	687b      	ldr	r3, [r7, #4]
 802ceb2:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 802ceb6:	f003 0304 	and.w	r3, r3, #4
 802ceba:	b2db      	uxtb	r3, r3
 802cebc:	2b00      	cmp	r3, #0
 802cebe:	d007      	beq.n	802ced0 <mg_mqtt_sub+0xac>
 802cec0:	683b      	ldr	r3, [r7, #0]
 802cec2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 802cec4:	683b      	ldr	r3, [r7, #0]
 802cec6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802cec8:	461a      	mov	r2, r3
 802ceca:	6878      	ldr	r0, [r7, #4]
 802cecc:	f7ff fc2e 	bl	802c72c <mg_send_mqtt_properties>

  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 802ced0:	683b      	ldr	r3, [r7, #0]
 802ced2:	69db      	ldr	r3, [r3, #28]
 802ced4:	b29b      	uxth	r3, r3
 802ced6:	4618      	mov	r0, r3
 802ced8:	f005 fe27 	bl	8032b2a <mg_ntohs>
 802cedc:	4603      	mov	r3, r0
 802cede:	4619      	mov	r1, r3
 802cee0:	6878      	ldr	r0, [r7, #4]
 802cee2:	f7ff fac0 	bl	802c466 <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 802cee6:	683b      	ldr	r3, [r7, #0]
 802cee8:	6999      	ldr	r1, [r3, #24]
 802ceea:	683b      	ldr	r3, [r7, #0]
 802ceec:	69db      	ldr	r3, [r3, #28]
 802ceee:	461a      	mov	r2, r3
 802cef0:	6878      	ldr	r0, [r7, #4]
 802cef2:	f004 f8a1 	bl	8031038 <mg_send>
  mg_send(c, &qos_, sizeof(qos_));
 802cef6:	f107 030f 	add.w	r3, r7, #15
 802cefa:	2201      	movs	r2, #1
 802cefc:	4619      	mov	r1, r3
 802cefe:	6878      	ldr	r0, [r7, #4]
 802cf00:	f004 f89a 	bl	8031038 <mg_send>
}
 802cf04:	bf00      	nop
 802cf06:	3718      	adds	r7, #24
 802cf08:	46bd      	mov	sp, r7
 802cf0a:	bd80      	pop	{r7, pc}

0802cf0c <mg_mqtt_parse>:

int mg_mqtt_parse(const uint8_t *buf, size_t len, uint8_t version,
                  struct mg_mqtt_message *m) {
 802cf0c:	b580      	push	{r7, lr}
 802cf0e:	b08a      	sub	sp, #40	@ 0x28
 802cf10:	af00      	add	r7, sp, #0
 802cf12:	60f8      	str	r0, [r7, #12]
 802cf14:	60b9      	str	r1, [r7, #8]
 802cf16:	603b      	str	r3, [r7, #0]
 802cf18:	4613      	mov	r3, r2
 802cf1a:	71fb      	strb	r3, [r7, #7]
  uint8_t lc = 0, *p, *end;
 802cf1c:	2300      	movs	r3, #0
 802cf1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t n = 0, len_len = 0;
 802cf22:	2300      	movs	r3, #0
 802cf24:	61fb      	str	r3, [r7, #28]
 802cf26:	2300      	movs	r3, #0
 802cf28:	61bb      	str	r3, [r7, #24]

  memset(m, 0, sizeof(*m));
 802cf2a:	2228      	movs	r2, #40	@ 0x28
 802cf2c:	2100      	movs	r1, #0
 802cf2e:	6838      	ldr	r0, [r7, #0]
 802cf30:	f008 ff5e 	bl	8035df0 <memset>
  m->dgram.buf = (char *) buf;
 802cf34:	683b      	ldr	r3, [r7, #0]
 802cf36:	68fa      	ldr	r2, [r7, #12]
 802cf38:	611a      	str	r2, [r3, #16]
  if (len < 2) return MQTT_INCOMPLETE;
 802cf3a:	68bb      	ldr	r3, [r7, #8]
 802cf3c:	2b01      	cmp	r3, #1
 802cf3e:	d801      	bhi.n	802cf44 <mg_mqtt_parse+0x38>
 802cf40:	2301      	movs	r3, #1
 802cf42:	e104      	b.n	802d14e <mg_mqtt_parse+0x242>
  m->cmd = (uint8_t) (buf[0] >> 4);
 802cf44:	68fb      	ldr	r3, [r7, #12]
 802cf46:	781b      	ldrb	r3, [r3, #0]
 802cf48:	091b      	lsrs	r3, r3, #4
 802cf4a:	b2da      	uxtb	r2, r3
 802cf4c:	683b      	ldr	r3, [r7, #0]
 802cf4e:	769a      	strb	r2, [r3, #26]
  m->qos = (buf[0] >> 1) & 3;
 802cf50:	68fb      	ldr	r3, [r7, #12]
 802cf52:	781b      	ldrb	r3, [r3, #0]
 802cf54:	085b      	lsrs	r3, r3, #1
 802cf56:	b2db      	uxtb	r3, r3
 802cf58:	f003 0303 	and.w	r3, r3, #3
 802cf5c:	b2da      	uxtb	r2, r3
 802cf5e:	683b      	ldr	r3, [r7, #0]
 802cf60:	76da      	strb	r2, [r3, #27]

  n = len_len = 0;
 802cf62:	2300      	movs	r3, #0
 802cf64:	61bb      	str	r3, [r7, #24]
 802cf66:	69bb      	ldr	r3, [r7, #24]
 802cf68:	61fb      	str	r3, [r7, #28]
  p = (uint8_t *) buf + 1;
 802cf6a:	68fb      	ldr	r3, [r7, #12]
 802cf6c:	3301      	adds	r3, #1
 802cf6e:	623b      	str	r3, [r7, #32]
  while ((size_t) (p - buf) < len) {
 802cf70:	e01f      	b.n	802cfb2 <mg_mqtt_parse+0xa6>
    lc = *((uint8_t *) p++);
 802cf72:	6a3b      	ldr	r3, [r7, #32]
 802cf74:	1c5a      	adds	r2, r3, #1
 802cf76:	623a      	str	r2, [r7, #32]
 802cf78:	781b      	ldrb	r3, [r3, #0]
 802cf7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    n += (uint32_t) ((lc & 0x7f) << 7 * len_len);
 802cf7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 802cf82:	f003 017f 	and.w	r1, r3, #127	@ 0x7f
 802cf86:	69ba      	ldr	r2, [r7, #24]
 802cf88:	4613      	mov	r3, r2
 802cf8a:	00db      	lsls	r3, r3, #3
 802cf8c:	1a9b      	subs	r3, r3, r2
 802cf8e:	fa01 f303 	lsl.w	r3, r1, r3
 802cf92:	461a      	mov	r2, r3
 802cf94:	69fb      	ldr	r3, [r7, #28]
 802cf96:	4413      	add	r3, r2
 802cf98:	61fb      	str	r3, [r7, #28]
    len_len++;
 802cf9a:	69bb      	ldr	r3, [r7, #24]
 802cf9c:	3301      	adds	r3, #1
 802cf9e:	61bb      	str	r3, [r7, #24]
    if (!(lc & 0x80)) break;
 802cfa0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 802cfa4:	2b00      	cmp	r3, #0
 802cfa6:	da0c      	bge.n	802cfc2 <mg_mqtt_parse+0xb6>
    if (len_len >= 4) return MQTT_MALFORMED;
 802cfa8:	69bb      	ldr	r3, [r7, #24]
 802cfaa:	2b03      	cmp	r3, #3
 802cfac:	d901      	bls.n	802cfb2 <mg_mqtt_parse+0xa6>
 802cfae:	2302      	movs	r3, #2
 802cfb0:	e0cd      	b.n	802d14e <mg_mqtt_parse+0x242>
  while ((size_t) (p - buf) < len) {
 802cfb2:	6a3a      	ldr	r2, [r7, #32]
 802cfb4:	68fb      	ldr	r3, [r7, #12]
 802cfb6:	1ad3      	subs	r3, r2, r3
 802cfb8:	461a      	mov	r2, r3
 802cfba:	68bb      	ldr	r3, [r7, #8]
 802cfbc:	4293      	cmp	r3, r2
 802cfbe:	d8d8      	bhi.n	802cf72 <mg_mqtt_parse+0x66>
 802cfc0:	e000      	b.n	802cfc4 <mg_mqtt_parse+0xb8>
    if (!(lc & 0x80)) break;
 802cfc2:	bf00      	nop
  }
  end = p + n;
 802cfc4:	6a3a      	ldr	r2, [r7, #32]
 802cfc6:	69fb      	ldr	r3, [r7, #28]
 802cfc8:	4413      	add	r3, r2
 802cfca:	617b      	str	r3, [r7, #20]
  if ((lc & 0x80) || (end > buf + len)) return MQTT_INCOMPLETE;
 802cfcc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 802cfd0:	2b00      	cmp	r3, #0
 802cfd2:	db05      	blt.n	802cfe0 <mg_mqtt_parse+0xd4>
 802cfd4:	68fa      	ldr	r2, [r7, #12]
 802cfd6:	68bb      	ldr	r3, [r7, #8]
 802cfd8:	4413      	add	r3, r2
 802cfda:	697a      	ldr	r2, [r7, #20]
 802cfdc:	429a      	cmp	r2, r3
 802cfde:	d901      	bls.n	802cfe4 <mg_mqtt_parse+0xd8>
 802cfe0:	2301      	movs	r3, #1
 802cfe2:	e0b4      	b.n	802d14e <mg_mqtt_parse+0x242>
  m->dgram.len = (size_t) (end - buf);
 802cfe4:	697a      	ldr	r2, [r7, #20]
 802cfe6:	68fb      	ldr	r3, [r7, #12]
 802cfe8:	1ad3      	subs	r3, r2, r3
 802cfea:	461a      	mov	r2, r3
 802cfec:	683b      	ldr	r3, [r7, #0]
 802cfee:	615a      	str	r2, [r3, #20]

  switch (m->cmd) {
 802cff0:	683b      	ldr	r3, [r7, #0]
 802cff2:	7e9b      	ldrb	r3, [r3, #26]
 802cff4:	2b0b      	cmp	r3, #11
 802cff6:	f300 80a8 	bgt.w	802d14a <mg_mqtt_parse+0x23e>
 802cffa:	2b04      	cmp	r3, #4
 802cffc:	da10      	bge.n	802d020 <mg_mqtt_parse+0x114>
 802cffe:	2b02      	cmp	r3, #2
 802d000:	d002      	beq.n	802d008 <mg_mqtt_parse+0xfc>
 802d002:	2b03      	cmp	r3, #3
 802d004:	d024      	beq.n	802d050 <mg_mqtt_parse+0x144>
      m->data.buf = (char *) p;
      m->data.len = (size_t) (end - p);
      break;
    }
    default:
      break;
 802d006:	e0a0      	b.n	802d14a <mg_mqtt_parse+0x23e>
      if (end - p < 2) return MQTT_MALFORMED;
 802d008:	697a      	ldr	r2, [r7, #20]
 802d00a:	6a3b      	ldr	r3, [r7, #32]
 802d00c:	1ad3      	subs	r3, r2, r3
 802d00e:	2b01      	cmp	r3, #1
 802d010:	dc01      	bgt.n	802d016 <mg_mqtt_parse+0x10a>
 802d012:	2302      	movs	r3, #2
 802d014:	e09b      	b.n	802d14e <mg_mqtt_parse+0x242>
      m->ack = p[1];
 802d016:	6a3b      	ldr	r3, [r7, #32]
 802d018:	785a      	ldrb	r2, [r3, #1]
 802d01a:	683b      	ldr	r3, [r7, #0]
 802d01c:	771a      	strb	r2, [r3, #28]
      break;
 802d01e:	e095      	b.n	802d14c <mg_mqtt_parse+0x240>
      if (p + 2 > end) return MQTT_MALFORMED;
 802d020:	6a3b      	ldr	r3, [r7, #32]
 802d022:	3302      	adds	r3, #2
 802d024:	697a      	ldr	r2, [r7, #20]
 802d026:	429a      	cmp	r2, r3
 802d028:	d201      	bcs.n	802d02e <mg_mqtt_parse+0x122>
 802d02a:	2302      	movs	r3, #2
 802d02c:	e08f      	b.n	802d14e <mg_mqtt_parse+0x242>
      m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 802d02e:	6a3b      	ldr	r3, [r7, #32]
 802d030:	781b      	ldrb	r3, [r3, #0]
 802d032:	021b      	lsls	r3, r3, #8
 802d034:	b21a      	sxth	r2, r3
 802d036:	6a3b      	ldr	r3, [r7, #32]
 802d038:	3301      	adds	r3, #1
 802d03a:	781b      	ldrb	r3, [r3, #0]
 802d03c:	b21b      	sxth	r3, r3
 802d03e:	4313      	orrs	r3, r2
 802d040:	b21b      	sxth	r3, r3
 802d042:	b29a      	uxth	r2, r3
 802d044:	683b      	ldr	r3, [r7, #0]
 802d046:	831a      	strh	r2, [r3, #24]
      p += 2;
 802d048:	6a3b      	ldr	r3, [r7, #32]
 802d04a:	3302      	adds	r3, #2
 802d04c:	623b      	str	r3, [r7, #32]
      break;
 802d04e:	e07d      	b.n	802d14c <mg_mqtt_parse+0x240>
      if (p + 2 > end) return MQTT_MALFORMED;
 802d050:	6a3b      	ldr	r3, [r7, #32]
 802d052:	3302      	adds	r3, #2
 802d054:	697a      	ldr	r2, [r7, #20]
 802d056:	429a      	cmp	r2, r3
 802d058:	d201      	bcs.n	802d05e <mg_mqtt_parse+0x152>
 802d05a:	2302      	movs	r3, #2
 802d05c:	e077      	b.n	802d14e <mg_mqtt_parse+0x242>
      m->topic.len = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 802d05e:	6a3b      	ldr	r3, [r7, #32]
 802d060:	781b      	ldrb	r3, [r3, #0]
 802d062:	021b      	lsls	r3, r3, #8
 802d064:	b21a      	sxth	r2, r3
 802d066:	6a3b      	ldr	r3, [r7, #32]
 802d068:	3301      	adds	r3, #1
 802d06a:	781b      	ldrb	r3, [r3, #0]
 802d06c:	b21b      	sxth	r3, r3
 802d06e:	4313      	orrs	r3, r2
 802d070:	b21b      	sxth	r3, r3
 802d072:	b29b      	uxth	r3, r3
 802d074:	461a      	mov	r2, r3
 802d076:	683b      	ldr	r3, [r7, #0]
 802d078:	605a      	str	r2, [r3, #4]
      m->topic.buf = (char *) p + 2;
 802d07a:	6a3b      	ldr	r3, [r7, #32]
 802d07c:	1c9a      	adds	r2, r3, #2
 802d07e:	683b      	ldr	r3, [r7, #0]
 802d080:	601a      	str	r2, [r3, #0]
      p += 2 + m->topic.len;
 802d082:	683b      	ldr	r3, [r7, #0]
 802d084:	685b      	ldr	r3, [r3, #4]
 802d086:	3302      	adds	r3, #2
 802d088:	6a3a      	ldr	r2, [r7, #32]
 802d08a:	4413      	add	r3, r2
 802d08c:	623b      	str	r3, [r7, #32]
      if (p > end) return MQTT_MALFORMED;
 802d08e:	6a3a      	ldr	r2, [r7, #32]
 802d090:	697b      	ldr	r3, [r7, #20]
 802d092:	429a      	cmp	r2, r3
 802d094:	d901      	bls.n	802d09a <mg_mqtt_parse+0x18e>
 802d096:	2302      	movs	r3, #2
 802d098:	e059      	b.n	802d14e <mg_mqtt_parse+0x242>
      if (m->qos > 0) {
 802d09a:	683b      	ldr	r3, [r7, #0]
 802d09c:	7edb      	ldrb	r3, [r3, #27]
 802d09e:	2b00      	cmp	r3, #0
 802d0a0:	d016      	beq.n	802d0d0 <mg_mqtt_parse+0x1c4>
        if (p + 2 > end) return MQTT_MALFORMED;
 802d0a2:	6a3b      	ldr	r3, [r7, #32]
 802d0a4:	3302      	adds	r3, #2
 802d0a6:	697a      	ldr	r2, [r7, #20]
 802d0a8:	429a      	cmp	r2, r3
 802d0aa:	d201      	bcs.n	802d0b0 <mg_mqtt_parse+0x1a4>
 802d0ac:	2302      	movs	r3, #2
 802d0ae:	e04e      	b.n	802d14e <mg_mqtt_parse+0x242>
        m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 802d0b0:	6a3b      	ldr	r3, [r7, #32]
 802d0b2:	781b      	ldrb	r3, [r3, #0]
 802d0b4:	021b      	lsls	r3, r3, #8
 802d0b6:	b21a      	sxth	r2, r3
 802d0b8:	6a3b      	ldr	r3, [r7, #32]
 802d0ba:	3301      	adds	r3, #1
 802d0bc:	781b      	ldrb	r3, [r3, #0]
 802d0be:	b21b      	sxth	r3, r3
 802d0c0:	4313      	orrs	r3, r2
 802d0c2:	b21b      	sxth	r3, r3
 802d0c4:	b29a      	uxth	r2, r3
 802d0c6:	683b      	ldr	r3, [r7, #0]
 802d0c8:	831a      	strh	r2, [r3, #24]
        p += 2;
 802d0ca:	6a3b      	ldr	r3, [r7, #32]
 802d0cc:	3302      	adds	r3, #2
 802d0ce:	623b      	str	r3, [r7, #32]
      if (p > end) return MQTT_MALFORMED;
 802d0d0:	6a3a      	ldr	r2, [r7, #32]
 802d0d2:	697b      	ldr	r3, [r7, #20]
 802d0d4:	429a      	cmp	r2, r3
 802d0d6:	d901      	bls.n	802d0dc <mg_mqtt_parse+0x1d0>
 802d0d8:	2302      	movs	r3, #2
 802d0da:	e038      	b.n	802d14e <mg_mqtt_parse+0x242>
      if (version == 5 && p + 2 < end) {
 802d0dc:	79fb      	ldrb	r3, [r7, #7]
 802d0de:	2b05      	cmp	r3, #5
 802d0e0:	d123      	bne.n	802d12a <mg_mqtt_parse+0x21e>
 802d0e2:	6a3b      	ldr	r3, [r7, #32]
 802d0e4:	3302      	adds	r3, #2
 802d0e6:	697a      	ldr	r2, [r7, #20]
 802d0e8:	429a      	cmp	r2, r3
 802d0ea:	d91e      	bls.n	802d12a <mg_mqtt_parse+0x21e>
            (uint32_t) decode_varint(p, (size_t) (end - p), &m->props_size);
 802d0ec:	697a      	ldr	r2, [r7, #20]
 802d0ee:	6a3b      	ldr	r3, [r7, #32]
 802d0f0:	1ad3      	subs	r3, r2, r3
 802d0f2:	4619      	mov	r1, r3
 802d0f4:	683b      	ldr	r3, [r7, #0]
 802d0f6:	3324      	adds	r3, #36	@ 0x24
 802d0f8:	461a      	mov	r2, r3
 802d0fa:	6a38      	ldr	r0, [r7, #32]
 802d0fc:	f7ff fa0f 	bl	802c51e <decode_varint>
 802d100:	61b8      	str	r0, [r7, #24]
        if (!len_len) return MQTT_MALFORMED;
 802d102:	69bb      	ldr	r3, [r7, #24]
 802d104:	2b00      	cmp	r3, #0
 802d106:	d101      	bne.n	802d10c <mg_mqtt_parse+0x200>
 802d108:	2302      	movs	r3, #2
 802d10a:	e020      	b.n	802d14e <mg_mqtt_parse+0x242>
        m->props_start = (size_t) (p + len_len - buf);
 802d10c:	6a3a      	ldr	r2, [r7, #32]
 802d10e:	69bb      	ldr	r3, [r7, #24]
 802d110:	441a      	add	r2, r3
 802d112:	68fb      	ldr	r3, [r7, #12]
 802d114:	1ad3      	subs	r3, r2, r3
 802d116:	461a      	mov	r2, r3
 802d118:	683b      	ldr	r3, [r7, #0]
 802d11a:	621a      	str	r2, [r3, #32]
        p += len_len + m->props_size;
 802d11c:	683b      	ldr	r3, [r7, #0]
 802d11e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 802d120:	69bb      	ldr	r3, [r7, #24]
 802d122:	4413      	add	r3, r2
 802d124:	6a3a      	ldr	r2, [r7, #32]
 802d126:	4413      	add	r3, r2
 802d128:	623b      	str	r3, [r7, #32]
      if (p > end) return MQTT_MALFORMED;
 802d12a:	6a3a      	ldr	r2, [r7, #32]
 802d12c:	697b      	ldr	r3, [r7, #20]
 802d12e:	429a      	cmp	r2, r3
 802d130:	d901      	bls.n	802d136 <mg_mqtt_parse+0x22a>
 802d132:	2302      	movs	r3, #2
 802d134:	e00b      	b.n	802d14e <mg_mqtt_parse+0x242>
      m->data.buf = (char *) p;
 802d136:	683b      	ldr	r3, [r7, #0]
 802d138:	6a3a      	ldr	r2, [r7, #32]
 802d13a:	609a      	str	r2, [r3, #8]
      m->data.len = (size_t) (end - p);
 802d13c:	697a      	ldr	r2, [r7, #20]
 802d13e:	6a3b      	ldr	r3, [r7, #32]
 802d140:	1ad3      	subs	r3, r2, r3
 802d142:	461a      	mov	r2, r3
 802d144:	683b      	ldr	r3, [r7, #0]
 802d146:	60da      	str	r2, [r3, #12]
      break;
 802d148:	e000      	b.n	802d14c <mg_mqtt_parse+0x240>
      break;
 802d14a:	bf00      	nop
  }
  return MQTT_OK;
 802d14c:	2300      	movs	r3, #0
}
 802d14e:	4618      	mov	r0, r3
 802d150:	3728      	adds	r7, #40	@ 0x28
 802d152:	46bd      	mov	sp, r7
 802d154:	bd80      	pop	{r7, pc}
	...

0802d158 <mqtt_cb>:

static void mqtt_cb(struct mg_connection *c, int ev, void *ev_data) {
 802d158:	b590      	push	{r4, r7, lr}
 802d15a:	b099      	sub	sp, #100	@ 0x64
 802d15c:	af02      	add	r7, sp, #8
 802d15e:	60f8      	str	r0, [r7, #12]
 802d160:	60b9      	str	r1, [r7, #8]
 802d162:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_READ) {
 802d164:	68bb      	ldr	r3, [r7, #8]
 802d166:	2b07      	cmp	r3, #7
 802d168:	f040 8124 	bne.w	802d3b4 <mqtt_cb+0x25c>
    for (;;) {
      uint8_t version = c->is_mqtt5 ? 5 : 4;
 802d16c:	68fb      	ldr	r3, [r7, #12]
 802d16e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 802d172:	f003 0304 	and.w	r3, r3, #4
 802d176:	b2db      	uxtb	r3, r3
 802d178:	2b00      	cmp	r3, #0
 802d17a:	d001      	beq.n	802d180 <mqtt_cb+0x28>
 802d17c:	2305      	movs	r3, #5
 802d17e:	e000      	b.n	802d182 <mqtt_cb+0x2a>
 802d180:	2304      	movs	r3, #4
 802d182:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
      struct mg_mqtt_message mm;
      int rc = mg_mqtt_parse(c->recv.buf, c->recv.len, version, &mm);
 802d186:	68fb      	ldr	r3, [r7, #12]
 802d188:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 802d18a:	68fb      	ldr	r3, [r7, #12]
 802d18c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 802d18e:	f107 0314 	add.w	r3, r7, #20
 802d192:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 802d196:	f7ff feb9 	bl	802cf0c <mg_mqtt_parse>
 802d19a:	64f8      	str	r0, [r7, #76]	@ 0x4c
      if (rc == MQTT_MALFORMED) {
 802d19c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802d19e:	2b02      	cmp	r3, #2
 802d1a0:	d118      	bne.n	802d1d4 <mqtt_cb+0x7c>
        MG_ERROR(("%lu MQTT malformed message", c->id));
 802d1a2:	4b86      	ldr	r3, [pc, #536]	@ (802d3bc <mqtt_cb+0x264>)
 802d1a4:	681b      	ldr	r3, [r3, #0]
 802d1a6:	2b00      	cmp	r3, #0
 802d1a8:	dd0c      	ble.n	802d1c4 <mqtt_cb+0x6c>
 802d1aa:	4b85      	ldr	r3, [pc, #532]	@ (802d3c0 <mqtt_cb+0x268>)
 802d1ac:	f241 12b1 	movw	r2, #4529	@ 0x11b1
 802d1b0:	4984      	ldr	r1, [pc, #528]	@ (802d3c4 <mqtt_cb+0x26c>)
 802d1b2:	2001      	movs	r0, #1
 802d1b4:	f7fe f812 	bl	802b1dc <mg_log_prefix>
 802d1b8:	68fb      	ldr	r3, [r7, #12]
 802d1ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802d1bc:	4619      	mov	r1, r3
 802d1be:	4882      	ldr	r0, [pc, #520]	@ (802d3c8 <mqtt_cb+0x270>)
 802d1c0:	f7fe f85c 	bl	802b27c <mg_log>
        c->is_closing = 1;
 802d1c4:	68fa      	ldr	r2, [r7, #12]
 802d1c6:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 802d1ca:	f043 0320 	orr.w	r3, r3, #32
 802d1ce:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        break;
 802d1d2:	e0ef      	b.n	802d3b4 <mqtt_cb+0x25c>
      } else if (rc == MQTT_OK) {
 802d1d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802d1d6:	2b00      	cmp	r3, #0
 802d1d8:	f040 80eb 	bne.w	802d3b2 <mqtt_cb+0x25a>
        MG_VERBOSE(("%lu MQTT CMD %d len %d [%.*s]", c->id, mm.cmd,
 802d1dc:	4b77      	ldr	r3, [pc, #476]	@ (802d3bc <mqtt_cb+0x264>)
 802d1de:	681b      	ldr	r3, [r3, #0]
 802d1e0:	2b03      	cmp	r3, #3
 802d1e2:	dd17      	ble.n	802d214 <mqtt_cb+0xbc>
 802d1e4:	4b76      	ldr	r3, [pc, #472]	@ (802d3c0 <mqtt_cb+0x268>)
 802d1e6:	f241 12b5 	movw	r2, #4533	@ 0x11b5
 802d1ea:	4976      	ldr	r1, [pc, #472]	@ (802d3c4 <mqtt_cb+0x26c>)
 802d1ec:	2004      	movs	r0, #4
 802d1ee:	f7fd fff5 	bl	802b1dc <mg_log_prefix>
 802d1f2:	68fb      	ldr	r3, [r7, #12]
 802d1f4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 802d1f6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 802d1fa:	4618      	mov	r0, r3
 802d1fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802d1fe:	461c      	mov	r4, r3
 802d200:	6a3b      	ldr	r3, [r7, #32]
 802d202:	461a      	mov	r2, r3
 802d204:	69fb      	ldr	r3, [r7, #28]
 802d206:	9301      	str	r3, [sp, #4]
 802d208:	9200      	str	r2, [sp, #0]
 802d20a:	4623      	mov	r3, r4
 802d20c:	4602      	mov	r2, r0
 802d20e:	486f      	ldr	r0, [pc, #444]	@ (802d3cc <mqtt_cb+0x274>)
 802d210:	f7fe f834 	bl	802b27c <mg_log>
                    (int) mm.dgram.len, (int) mm.data.len, mm.data.buf));
        switch (mm.cmd) {
 802d214:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 802d218:	3b02      	subs	r3, #2
 802d21a:	2b04      	cmp	r3, #4
 802d21c:	f200 80ba 	bhi.w	802d394 <mqtt_cb+0x23c>
 802d220:	a201      	add	r2, pc, #4	@ (adr r2, 802d228 <mqtt_cb+0xd0>)
 802d222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802d226:	bf00      	nop
 802d228:	0802d23d 	.word	0x0802d23d
 802d22c:	0802d2b1 	.word	0x0802d2b1
 802d230:	0802d395 	.word	0x0802d395
 802d234:	0802d33b 	.word	0x0802d33b
 802d238:	0802d367 	.word	0x0802d367
          case MQTT_CMD_CONNACK:
            mg_call(c, MG_EV_MQTT_OPEN, &mm.ack);
 802d23c:	f107 0314 	add.w	r3, r7, #20
 802d240:	331c      	adds	r3, #28
 802d242:	461a      	mov	r2, r3
 802d244:	2111      	movs	r1, #17
 802d246:	68f8      	ldr	r0, [r7, #12]
 802d248:	f7f8 fbe2 	bl	8025a10 <mg_call>
            if (mm.ack == 0) {
 802d24c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 802d250:	2b00      	cmp	r3, #0
 802d252:	d112      	bne.n	802d27a <mqtt_cb+0x122>
              MG_DEBUG(("%lu Connected", c->id));
 802d254:	4b59      	ldr	r3, [pc, #356]	@ (802d3bc <mqtt_cb+0x264>)
 802d256:	681b      	ldr	r3, [r3, #0]
 802d258:	2b02      	cmp	r3, #2
 802d25a:	f340 809a 	ble.w	802d392 <mqtt_cb+0x23a>
 802d25e:	4b58      	ldr	r3, [pc, #352]	@ (802d3c0 <mqtt_cb+0x268>)
 802d260:	f241 12bb 	movw	r2, #4539	@ 0x11bb
 802d264:	4957      	ldr	r1, [pc, #348]	@ (802d3c4 <mqtt_cb+0x26c>)
 802d266:	2003      	movs	r0, #3
 802d268:	f7fd ffb8 	bl	802b1dc <mg_log_prefix>
 802d26c:	68fb      	ldr	r3, [r7, #12]
 802d26e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802d270:	4619      	mov	r1, r3
 802d272:	4857      	ldr	r0, [pc, #348]	@ (802d3d0 <mqtt_cb+0x278>)
 802d274:	f7fe f802 	bl	802b27c <mg_log>
            } else {
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
              c->is_closing = 1;
            }
            break;
 802d278:	e08b      	b.n	802d392 <mqtt_cb+0x23a>
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
 802d27a:	4b50      	ldr	r3, [pc, #320]	@ (802d3bc <mqtt_cb+0x264>)
 802d27c:	681b      	ldr	r3, [r3, #0]
 802d27e:	2b00      	cmp	r3, #0
 802d280:	dd0e      	ble.n	802d2a0 <mqtt_cb+0x148>
 802d282:	4b4f      	ldr	r3, [pc, #316]	@ (802d3c0 <mqtt_cb+0x268>)
 802d284:	f241 12bd 	movw	r2, #4541	@ 0x11bd
 802d288:	494e      	ldr	r1, [pc, #312]	@ (802d3c4 <mqtt_cb+0x26c>)
 802d28a:	2001      	movs	r0, #1
 802d28c:	f7fd ffa6 	bl	802b1dc <mg_log_prefix>
 802d290:	68fb      	ldr	r3, [r7, #12]
 802d292:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802d294:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 802d298:	4619      	mov	r1, r3
 802d29a:	484e      	ldr	r0, [pc, #312]	@ (802d3d4 <mqtt_cb+0x27c>)
 802d29c:	f7fd ffee 	bl	802b27c <mg_log>
              c->is_closing = 1;
 802d2a0:	68fa      	ldr	r2, [r7, #12]
 802d2a2:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 802d2a6:	f043 0320 	orr.w	r3, r3, #32
 802d2aa:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
            break;
 802d2ae:	e070      	b.n	802d392 <mqtt_cb+0x23a>
          case MQTT_CMD_PUBLISH: {
            /*MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) mm.topic.len,
                      mm.topic.buf, (int) mm.data.len, mm.data.buf));*/
            if (mm.qos > 0) {
 802d2b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 802d2b4:	2b00      	cmp	r3, #0
 802d2b6:	d038      	beq.n	802d32a <mqtt_cb+0x1d2>
              uint16_t id = mg_ntohs(mm.id);
 802d2b8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 802d2ba:	4618      	mov	r0, r3
 802d2bc:	f005 fc35 	bl	8032b2a <mg_ntohs>
 802d2c0:	4603      	mov	r3, r0
 802d2c2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
              uint32_t remaining_len = sizeof(id);
 802d2c6:	2302      	movs	r3, #2
 802d2c8:	657b      	str	r3, [r7, #84]	@ 0x54
              if (c->is_mqtt5) remaining_len += 2;  // 3.4.2
 802d2ca:	68fb      	ldr	r3, [r7, #12]
 802d2cc:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 802d2d0:	f003 0304 	and.w	r3, r3, #4
 802d2d4:	b2db      	uxtb	r3, r3
 802d2d6:	2b00      	cmp	r3, #0
 802d2d8:	d002      	beq.n	802d2e0 <mqtt_cb+0x188>
 802d2da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802d2dc:	3302      	adds	r3, #2
 802d2de:	657b      	str	r3, [r7, #84]	@ 0x54

              mg_mqtt_send_header(
                  c,
                  (uint8_t) (mm.qos == 2 ? MQTT_CMD_PUBREC : MQTT_CMD_PUBACK),
 802d2e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
              mg_mqtt_send_header(
 802d2e4:	2b02      	cmp	r3, #2
 802d2e6:	d101      	bne.n	802d2ec <mqtt_cb+0x194>
 802d2e8:	2105      	movs	r1, #5
 802d2ea:	e000      	b.n	802d2ee <mqtt_cb+0x196>
 802d2ec:	2104      	movs	r1, #4
 802d2ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802d2f0:	2200      	movs	r2, #0
 802d2f2:	68f8      	ldr	r0, [r7, #12]
 802d2f4:	f7ff f872 	bl	802c3dc <mg_mqtt_send_header>
                  0, remaining_len);
              mg_send(c, &id, sizeof(id));
 802d2f8:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 802d2fc:	2202      	movs	r2, #2
 802d2fe:	4619      	mov	r1, r3
 802d300:	68f8      	ldr	r0, [r7, #12]
 802d302:	f003 fe99 	bl	8031038 <mg_send>

              if (c->is_mqtt5) {
 802d306:	68fb      	ldr	r3, [r7, #12]
 802d308:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 802d30c:	f003 0304 	and.w	r3, r3, #4
 802d310:	b2db      	uxtb	r3, r3
 802d312:	2b00      	cmp	r3, #0
 802d314:	d009      	beq.n	802d32a <mqtt_cb+0x1d2>
                uint16_t zero = 0;
 802d316:	2300      	movs	r3, #0
 802d318:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                mg_send(c, &zero, sizeof(zero));
 802d31c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 802d320:	2202      	movs	r2, #2
 802d322:	4619      	mov	r1, r3
 802d324:	68f8      	ldr	r0, [r7, #12]
 802d326:	f003 fe87 	bl	8031038 <mg_send>
              }
            }
            mg_call(c, MG_EV_MQTT_MSG, &mm);  // let the app handle qos stuff
 802d32a:	f107 0314 	add.w	r3, r7, #20
 802d32e:	461a      	mov	r2, r3
 802d330:	2110      	movs	r1, #16
 802d332:	68f8      	ldr	r0, [r7, #12]
 802d334:	f7f8 fb6c 	bl	8025a10 <mg_call>
            break;
 802d338:	e02c      	b.n	802d394 <mqtt_cb+0x23c>
          }
          case MQTT_CMD_PUBREC: {  // MQTT5: 3.5.2-1 TODO(): variable header rc
            uint16_t id = mg_ntohs(mm.id);
 802d33a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 802d33c:	4618      	mov	r0, r3
 802d33e:	f005 fbf4 	bl	8032b2a <mg_ntohs>
 802d342:	4603      	mov	r3, r0
 802d344:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            uint32_t remaining_len = sizeof(id);  // MQTT5 3.6.2-1
 802d346:	2302      	movs	r3, #2
 802d348:	647b      	str	r3, [r7, #68]	@ 0x44
            mg_mqtt_send_header(c, MQTT_CMD_PUBREL, 2, remaining_len);
 802d34a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802d34c:	2202      	movs	r2, #2
 802d34e:	2106      	movs	r1, #6
 802d350:	68f8      	ldr	r0, [r7, #12]
 802d352:	f7ff f843 	bl	802c3dc <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));  // MQTT5 3.6.1-1, flags = 2
 802d356:	f107 033e 	add.w	r3, r7, #62	@ 0x3e
 802d35a:	2202      	movs	r2, #2
 802d35c:	4619      	mov	r1, r3
 802d35e:	68f8      	ldr	r0, [r7, #12]
 802d360:	f003 fe6a 	bl	8031038 <mg_send>
            break;
 802d364:	e016      	b.n	802d394 <mqtt_cb+0x23c>
          }
          case MQTT_CMD_PUBREL: {  // MQTT5: 3.6.2-1 TODO(): variable header rc
            uint16_t id = mg_ntohs(mm.id);
 802d366:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 802d368:	4618      	mov	r0, r3
 802d36a:	f005 fbde 	bl	8032b2a <mg_ntohs>
 802d36e:	4603      	mov	r3, r0
 802d370:	87bb      	strh	r3, [r7, #60]	@ 0x3c
            uint32_t remaining_len = sizeof(id);  // MQTT5 3.7.2-1
 802d372:	2302      	movs	r3, #2
 802d374:	64bb      	str	r3, [r7, #72]	@ 0x48
            mg_mqtt_send_header(c, MQTT_CMD_PUBCOMP, 0, remaining_len);
 802d376:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802d378:	2200      	movs	r2, #0
 802d37a:	2107      	movs	r1, #7
 802d37c:	68f8      	ldr	r0, [r7, #12]
 802d37e:	f7ff f82d 	bl	802c3dc <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));
 802d382:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 802d386:	2202      	movs	r2, #2
 802d388:	4619      	mov	r1, r3
 802d38a:	68f8      	ldr	r0, [r7, #12]
 802d38c:	f003 fe54 	bl	8031038 <mg_send>
            break;
 802d390:	e000      	b.n	802d394 <mqtt_cb+0x23c>
            break;
 802d392:	bf00      	nop
          }
        }
        mg_call(c, MG_EV_MQTT_CMD, &mm);
 802d394:	f107 0314 	add.w	r3, r7, #20
 802d398:	461a      	mov	r2, r3
 802d39a:	210f      	movs	r1, #15
 802d39c:	68f8      	ldr	r0, [r7, #12]
 802d39e:	f7f8 fb37 	bl	8025a10 <mg_call>
        mg_iobuf_del(&c->recv, 0, mm.dgram.len);
 802d3a2:	68fb      	ldr	r3, [r7, #12]
 802d3a4:	3338      	adds	r3, #56	@ 0x38
 802d3a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 802d3a8:	2100      	movs	r1, #0
 802d3aa:	4618      	mov	r0, r3
 802d3ac:	f7fd f804 	bl	802a3b8 <mg_iobuf_del>
    for (;;) {
 802d3b0:	e6dc      	b.n	802d16c <mqtt_cb+0x14>
      } else {
        break;
 802d3b2:	bf00      	nop
      }
    }
  }
  (void) ev_data;
}
 802d3b4:	bf00      	nop
 802d3b6:	375c      	adds	r7, #92	@ 0x5c
 802d3b8:	46bd      	mov	sp, r7
 802d3ba:	bd90      	pop	{r4, r7, pc}
 802d3bc:	20000298 	.word	0x20000298
 802d3c0:	080445d8 	.word	0x080445d8
 802d3c4:	08041564 	.word	0x08041564
 802d3c8:	08042a0c 	.word	0x08042a0c
 802d3cc:	08042a28 	.word	0x08042a28
 802d3d0:	08042a48 	.word	0x08042a48
 802d3d4:	08042a58 	.word	0x08042a58

0802d3d8 <mg_mqtt_connect>:
  }
}

struct mg_connection *mg_mqtt_connect(struct mg_mgr *mgr, const char *url,
                                      const struct mg_mqtt_opts *opts,
                                      mg_event_handler_t fn, void *fn_data) {
 802d3d8:	b580      	push	{r7, lr}
 802d3da:	b096      	sub	sp, #88	@ 0x58
 802d3dc:	af00      	add	r7, sp, #0
 802d3de:	60f8      	str	r0, [r7, #12]
 802d3e0:	60b9      	str	r1, [r7, #8]
 802d3e2:	607a      	str	r2, [r7, #4]
 802d3e4:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_connect(mgr, url, fn, fn_data);
 802d3e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802d3e8:	683a      	ldr	r2, [r7, #0]
 802d3ea:	68b9      	ldr	r1, [r7, #8]
 802d3ec:	68f8      	ldr	r0, [r7, #12]
 802d3ee:	f000 fb5f 	bl	802dab0 <mg_connect>
 802d3f2:	6578      	str	r0, [r7, #84]	@ 0x54
  if (c != NULL) {
 802d3f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802d3f6:	2b00      	cmp	r3, #0
 802d3f8:	d015      	beq.n	802d426 <mg_mqtt_connect+0x4e>
    struct mg_mqtt_opts empty;
    memset(&empty, 0, sizeof(empty));
 802d3fa:	f107 0314 	add.w	r3, r7, #20
 802d3fe:	2240      	movs	r2, #64	@ 0x40
 802d400:	2100      	movs	r1, #0
 802d402:	4618      	mov	r0, r3
 802d404:	f008 fcf4 	bl	8035df0 <memset>
    mg_mqtt_login(c, opts == NULL ? &empty : opts);
 802d408:	687b      	ldr	r3, [r7, #4]
 802d40a:	2b00      	cmp	r3, #0
 802d40c:	d102      	bne.n	802d414 <mg_mqtt_connect+0x3c>
 802d40e:	f107 0314 	add.w	r3, r7, #20
 802d412:	e000      	b.n	802d416 <mg_mqtt_connect+0x3e>
 802d414:	687b      	ldr	r3, [r7, #4]
 802d416:	4619      	mov	r1, r3
 802d418:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 802d41a:	f7ff fad1 	bl	802c9c0 <mg_mqtt_login>
    c->pfn = mqtt_cb;
 802d41e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802d420:	4a03      	ldr	r2, [pc, #12]	@ (802d430 <mg_mqtt_connect+0x58>)
 802d422:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
  return c;
 802d426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 802d428:	4618      	mov	r0, r3
 802d42a:	3758      	adds	r7, #88	@ 0x58
 802d42c:	46bd      	mov	sp, r7
 802d42e:	bd80      	pop	{r7, pc}
 802d430:	0802d159 	.word	0x0802d159

0802d434 <mg_vprintf>:





size_t mg_vprintf(struct mg_connection *c, const char *fmt, va_list *ap) {
 802d434:	b580      	push	{r7, lr}
 802d436:	b086      	sub	sp, #24
 802d438:	af00      	add	r7, sp, #0
 802d43a:	60f8      	str	r0, [r7, #12]
 802d43c:	60b9      	str	r1, [r7, #8]
 802d43e:	607a      	str	r2, [r7, #4]
  size_t old = c->send.len;
 802d440:	68fb      	ldr	r3, [r7, #12]
 802d442:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802d444:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 802d446:	68fb      	ldr	r3, [r7, #12]
 802d448:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 802d44c:	687b      	ldr	r3, [r7, #4]
 802d44e:	68ba      	ldr	r2, [r7, #8]
 802d450:	4805      	ldr	r0, [pc, #20]	@ (802d468 <mg_vprintf+0x34>)
 802d452:	f7f9 f80f 	bl	8026474 <mg_vxprintf>
  return c->send.len - old;
 802d456:	68fb      	ldr	r3, [r7, #12]
 802d458:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 802d45a:	697b      	ldr	r3, [r7, #20]
 802d45c:	1ad3      	subs	r3, r2, r3
}
 802d45e:	4618      	mov	r0, r3
 802d460:	3718      	adds	r7, #24
 802d462:	46bd      	mov	sp, r7
 802d464:	bd80      	pop	{r7, pc}
 802d466:	bf00      	nop
 802d468:	080311a5 	.word	0x080311a5

0802d46c <mg_printf>:

size_t mg_printf(struct mg_connection *c, const char *fmt, ...) {
 802d46c:	b40e      	push	{r1, r2, r3}
 802d46e:	b580      	push	{r7, lr}
 802d470:	b085      	sub	sp, #20
 802d472:	af00      	add	r7, sp, #0
 802d474:	6078      	str	r0, [r7, #4]
  size_t len = 0;
 802d476:	2300      	movs	r3, #0
 802d478:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 802d47a:	f107 0320 	add.w	r3, r7, #32
 802d47e:	60bb      	str	r3, [r7, #8]
  len = mg_vprintf(c, fmt, &ap);
 802d480:	f107 0308 	add.w	r3, r7, #8
 802d484:	461a      	mov	r2, r3
 802d486:	69f9      	ldr	r1, [r7, #28]
 802d488:	6878      	ldr	r0, [r7, #4]
 802d48a:	f7ff ffd3 	bl	802d434 <mg_vprintf>
 802d48e:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 802d490:	68fb      	ldr	r3, [r7, #12]
}
 802d492:	4618      	mov	r0, r3
 802d494:	3714      	adds	r7, #20
 802d496:	46bd      	mov	sp, r7
 802d498:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802d49c:	b003      	add	sp, #12
 802d49e:	4770      	bx	lr

0802d4a0 <mg_atonl>:

static bool mg_atonl(struct mg_str str, struct mg_addr *addr) {
 802d4a0:	b580      	push	{r7, lr}
 802d4a2:	b088      	sub	sp, #32
 802d4a4:	af00      	add	r7, sp, #0
 802d4a6:	f107 0308 	add.w	r3, r7, #8
 802d4aa:	e883 0003 	stmia.w	r3, {r0, r1}
 802d4ae:	607a      	str	r2, [r7, #4]
  uint32_t localhost = mg_htonl(0x7f000001);
 802d4b0:	4811      	ldr	r0, [pc, #68]	@ (802d4f8 <mg_atonl+0x58>)
 802d4b2:	f005 fb21 	bl	8032af8 <mg_ntohl>
 802d4b6:	4603      	mov	r3, r0
 802d4b8:	617b      	str	r3, [r7, #20]
  if (mg_strcasecmp(str, mg_str("localhost")) != 0) return false;
 802d4ba:	f107 0318 	add.w	r3, r7, #24
 802d4be:	490f      	ldr	r1, [pc, #60]	@ (802d4fc <mg_atonl+0x5c>)
 802d4c0:	4618      	mov	r0, r3
 802d4c2:	f004 fb8f 	bl	8031be4 <mg_str_s>
 802d4c6:	f107 0318 	add.w	r3, r7, #24
 802d4ca:	cb0c      	ldmia	r3, {r2, r3}
 802d4cc:	f107 0108 	add.w	r1, r7, #8
 802d4d0:	c903      	ldmia	r1, {r0, r1}
 802d4d2:	f004 fc13 	bl	8031cfc <mg_strcasecmp>
 802d4d6:	4603      	mov	r3, r0
 802d4d8:	2b00      	cmp	r3, #0
 802d4da:	d001      	beq.n	802d4e0 <mg_atonl+0x40>
 802d4dc:	2300      	movs	r3, #0
 802d4de:	e006      	b.n	802d4ee <mg_atonl+0x4e>
  memcpy(addr->ip, &localhost, sizeof(uint32_t));
 802d4e0:	687b      	ldr	r3, [r7, #4]
 802d4e2:	697a      	ldr	r2, [r7, #20]
 802d4e4:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 802d4e6:	687b      	ldr	r3, [r7, #4]
 802d4e8:	2200      	movs	r2, #0
 802d4ea:	74da      	strb	r2, [r3, #19]
  return true;
 802d4ec:	2301      	movs	r3, #1
}
 802d4ee:	4618      	mov	r0, r3
 802d4f0:	3720      	adds	r7, #32
 802d4f2:	46bd      	mov	sp, r7
 802d4f4:	bd80      	pop	{r7, pc}
 802d4f6:	bf00      	nop
 802d4f8:	7f000001 	.word	0x7f000001
 802d4fc:	08042a78 	.word	0x08042a78

0802d500 <mg_atone>:

static bool mg_atone(struct mg_str str, struct mg_addr *addr) {
 802d500:	b580      	push	{r7, lr}
 802d502:	b084      	sub	sp, #16
 802d504:	af00      	add	r7, sp, #0
 802d506:	f107 0308 	add.w	r3, r7, #8
 802d50a:	e883 0003 	stmia.w	r3, {r0, r1}
 802d50e:	607a      	str	r2, [r7, #4]
  if (str.len > 0) return false;
 802d510:	68fb      	ldr	r3, [r7, #12]
 802d512:	2b00      	cmp	r3, #0
 802d514:	d001      	beq.n	802d51a <mg_atone+0x1a>
 802d516:	2300      	movs	r3, #0
 802d518:	e009      	b.n	802d52e <mg_atone+0x2e>
  memset(addr->ip, 0, sizeof(addr->ip));
 802d51a:	687b      	ldr	r3, [r7, #4]
 802d51c:	2210      	movs	r2, #16
 802d51e:	2100      	movs	r1, #0
 802d520:	4618      	mov	r0, r3
 802d522:	f008 fc65 	bl	8035df0 <memset>
  addr->is_ip6 = false;
 802d526:	687b      	ldr	r3, [r7, #4]
 802d528:	2200      	movs	r2, #0
 802d52a:	74da      	strb	r2, [r3, #19]
  return true;
 802d52c:	2301      	movs	r3, #1
}
 802d52e:	4618      	mov	r0, r3
 802d530:	3710      	adds	r7, #16
 802d532:	46bd      	mov	sp, r7
 802d534:	bd80      	pop	{r7, pc}

0802d536 <mg_aton4>:

static bool mg_aton4(struct mg_str str, struct mg_addr *addr) {
 802d536:	b480      	push	{r7}
 802d538:	b089      	sub	sp, #36	@ 0x24
 802d53a:	af00      	add	r7, sp, #0
 802d53c:	f107 0308 	add.w	r3, r7, #8
 802d540:	e883 0003 	stmia.w	r3, {r0, r1}
 802d544:	607a      	str	r2, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 802d546:	2300      	movs	r3, #0
 802d548:	613b      	str	r3, [r7, #16]
  size_t i, num_dots = 0;
 802d54a:	2300      	movs	r3, #0
 802d54c:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < str.len; i++) {
 802d54e:	2300      	movs	r3, #0
 802d550:	61fb      	str	r3, [r7, #28]
 802d552:	e049      	b.n	802d5e8 <mg_aton4+0xb2>
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 802d554:	68ba      	ldr	r2, [r7, #8]
 802d556:	69fb      	ldr	r3, [r7, #28]
 802d558:	4413      	add	r3, r2
 802d55a:	781b      	ldrb	r3, [r3, #0]
 802d55c:	2b2f      	cmp	r3, #47	@ 0x2f
 802d55e:	d925      	bls.n	802d5ac <mg_aton4+0x76>
 802d560:	68ba      	ldr	r2, [r7, #8]
 802d562:	69fb      	ldr	r3, [r7, #28]
 802d564:	4413      	add	r3, r2
 802d566:	781b      	ldrb	r3, [r3, #0]
 802d568:	2b39      	cmp	r3, #57	@ 0x39
 802d56a:	d81f      	bhi.n	802d5ac <mg_aton4+0x76>
      int octet = data[num_dots] * 10 + (str.buf[i] - '0');
 802d56c:	f107 0210 	add.w	r2, r7, #16
 802d570:	69bb      	ldr	r3, [r7, #24]
 802d572:	4413      	add	r3, r2
 802d574:	781b      	ldrb	r3, [r3, #0]
 802d576:	461a      	mov	r2, r3
 802d578:	4613      	mov	r3, r2
 802d57a:	009b      	lsls	r3, r3, #2
 802d57c:	4413      	add	r3, r2
 802d57e:	005b      	lsls	r3, r3, #1
 802d580:	4619      	mov	r1, r3
 802d582:	68ba      	ldr	r2, [r7, #8]
 802d584:	69fb      	ldr	r3, [r7, #28]
 802d586:	4413      	add	r3, r2
 802d588:	781b      	ldrb	r3, [r3, #0]
 802d58a:	3b30      	subs	r3, #48	@ 0x30
 802d58c:	440b      	add	r3, r1
 802d58e:	617b      	str	r3, [r7, #20]
      if (octet > 255) return false;
 802d590:	697b      	ldr	r3, [r7, #20]
 802d592:	2bff      	cmp	r3, #255	@ 0xff
 802d594:	dd01      	ble.n	802d59a <mg_aton4+0x64>
 802d596:	2300      	movs	r3, #0
 802d598:	e03d      	b.n	802d616 <mg_aton4+0xe0>
      data[num_dots] = (uint8_t) octet;
 802d59a:	697b      	ldr	r3, [r7, #20]
 802d59c:	b2d9      	uxtb	r1, r3
 802d59e:	f107 0210 	add.w	r2, r7, #16
 802d5a2:	69bb      	ldr	r3, [r7, #24]
 802d5a4:	4413      	add	r3, r2
 802d5a6:	460a      	mov	r2, r1
 802d5a8:	701a      	strb	r2, [r3, #0]
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 802d5aa:	e01a      	b.n	802d5e2 <mg_aton4+0xac>
    } else if (str.buf[i] == '.') {
 802d5ac:	68ba      	ldr	r2, [r7, #8]
 802d5ae:	69fb      	ldr	r3, [r7, #28]
 802d5b0:	4413      	add	r3, r2
 802d5b2:	781b      	ldrb	r3, [r3, #0]
 802d5b4:	2b2e      	cmp	r3, #46	@ 0x2e
 802d5b6:	d112      	bne.n	802d5de <mg_aton4+0xa8>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 802d5b8:	69bb      	ldr	r3, [r7, #24]
 802d5ba:	2b02      	cmp	r3, #2
 802d5bc:	d809      	bhi.n	802d5d2 <mg_aton4+0x9c>
 802d5be:	69fb      	ldr	r3, [r7, #28]
 802d5c0:	2b00      	cmp	r3, #0
 802d5c2:	d006      	beq.n	802d5d2 <mg_aton4+0x9c>
 802d5c4:	68ba      	ldr	r2, [r7, #8]
 802d5c6:	69fb      	ldr	r3, [r7, #28]
 802d5c8:	3b01      	subs	r3, #1
 802d5ca:	4413      	add	r3, r2
 802d5cc:	781b      	ldrb	r3, [r3, #0]
 802d5ce:	2b2e      	cmp	r3, #46	@ 0x2e
 802d5d0:	d101      	bne.n	802d5d6 <mg_aton4+0xa0>
 802d5d2:	2300      	movs	r3, #0
 802d5d4:	e01f      	b.n	802d616 <mg_aton4+0xe0>
      num_dots++;
 802d5d6:	69bb      	ldr	r3, [r7, #24]
 802d5d8:	3301      	adds	r3, #1
 802d5da:	61bb      	str	r3, [r7, #24]
 802d5dc:	e001      	b.n	802d5e2 <mg_aton4+0xac>
    } else {
      return false;
 802d5de:	2300      	movs	r3, #0
 802d5e0:	e019      	b.n	802d616 <mg_aton4+0xe0>
  for (i = 0; i < str.len; i++) {
 802d5e2:	69fb      	ldr	r3, [r7, #28]
 802d5e4:	3301      	adds	r3, #1
 802d5e6:	61fb      	str	r3, [r7, #28]
 802d5e8:	68fb      	ldr	r3, [r7, #12]
 802d5ea:	69fa      	ldr	r2, [r7, #28]
 802d5ec:	429a      	cmp	r2, r3
 802d5ee:	d3b1      	bcc.n	802d554 <mg_aton4+0x1e>
    }
  }
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 802d5f0:	69bb      	ldr	r3, [r7, #24]
 802d5f2:	2b03      	cmp	r3, #3
 802d5f4:	d106      	bne.n	802d604 <mg_aton4+0xce>
 802d5f6:	68ba      	ldr	r2, [r7, #8]
 802d5f8:	69fb      	ldr	r3, [r7, #28]
 802d5fa:	3b01      	subs	r3, #1
 802d5fc:	4413      	add	r3, r2
 802d5fe:	781b      	ldrb	r3, [r3, #0]
 802d600:	2b2e      	cmp	r3, #46	@ 0x2e
 802d602:	d101      	bne.n	802d608 <mg_aton4+0xd2>
 802d604:	2300      	movs	r3, #0
 802d606:	e006      	b.n	802d616 <mg_aton4+0xe0>
  memcpy(&addr->ip, data, sizeof(data));
 802d608:	687b      	ldr	r3, [r7, #4]
 802d60a:	693a      	ldr	r2, [r7, #16]
 802d60c:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 802d60e:	687b      	ldr	r3, [r7, #4]
 802d610:	2200      	movs	r2, #0
 802d612:	74da      	strb	r2, [r3, #19]
  return true;
 802d614:	2301      	movs	r3, #1
}
 802d616:	4618      	mov	r0, r3
 802d618:	3724      	adds	r7, #36	@ 0x24
 802d61a:	46bd      	mov	sp, r7
 802d61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d620:	4770      	bx	lr

0802d622 <mg_v4mapped>:

static bool mg_v4mapped(struct mg_str str, struct mg_addr *addr) {
 802d622:	b580      	push	{r7, lr}
 802d624:	b088      	sub	sp, #32
 802d626:	af00      	add	r7, sp, #0
 802d628:	f107 0308 	add.w	r3, r7, #8
 802d62c:	e883 0003 	stmia.w	r3, {r0, r1}
 802d630:	607a      	str	r2, [r7, #4]
  int i;
  uint32_t ipv4;
  if (str.len < 14) return false;
 802d632:	68fb      	ldr	r3, [r7, #12]
 802d634:	2b0d      	cmp	r3, #13
 802d636:	d801      	bhi.n	802d63c <mg_v4mapped+0x1a>
 802d638:	2300      	movs	r3, #0
 802d63a:	e056      	b.n	802d6ea <mg_v4mapped+0xc8>
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 802d63c:	68bb      	ldr	r3, [r7, #8]
 802d63e:	781b      	ldrb	r3, [r3, #0]
 802d640:	2b3a      	cmp	r3, #58	@ 0x3a
 802d642:	d109      	bne.n	802d658 <mg_v4mapped+0x36>
 802d644:	68bb      	ldr	r3, [r7, #8]
 802d646:	3301      	adds	r3, #1
 802d648:	781b      	ldrb	r3, [r3, #0]
 802d64a:	2b3a      	cmp	r3, #58	@ 0x3a
 802d64c:	d104      	bne.n	802d658 <mg_v4mapped+0x36>
 802d64e:	68bb      	ldr	r3, [r7, #8]
 802d650:	3306      	adds	r3, #6
 802d652:	781b      	ldrb	r3, [r3, #0]
 802d654:	2b3a      	cmp	r3, #58	@ 0x3a
 802d656:	d001      	beq.n	802d65c <mg_v4mapped+0x3a>
 802d658:	2300      	movs	r3, #0
 802d65a:	e046      	b.n	802d6ea <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 802d65c:	2302      	movs	r3, #2
 802d65e:	61fb      	str	r3, [r7, #28]
 802d660:	e010      	b.n	802d684 <mg_v4mapped+0x62>
    if (str.buf[i] != 'f' && str.buf[i] != 'F') return false;
 802d662:	68ba      	ldr	r2, [r7, #8]
 802d664:	69fb      	ldr	r3, [r7, #28]
 802d666:	4413      	add	r3, r2
 802d668:	781b      	ldrb	r3, [r3, #0]
 802d66a:	2b66      	cmp	r3, #102	@ 0x66
 802d66c:	d007      	beq.n	802d67e <mg_v4mapped+0x5c>
 802d66e:	68ba      	ldr	r2, [r7, #8]
 802d670:	69fb      	ldr	r3, [r7, #28]
 802d672:	4413      	add	r3, r2
 802d674:	781b      	ldrb	r3, [r3, #0]
 802d676:	2b46      	cmp	r3, #70	@ 0x46
 802d678:	d001      	beq.n	802d67e <mg_v4mapped+0x5c>
 802d67a:	2300      	movs	r3, #0
 802d67c:	e035      	b.n	802d6ea <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 802d67e:	69fb      	ldr	r3, [r7, #28]
 802d680:	3301      	adds	r3, #1
 802d682:	61fb      	str	r3, [r7, #28]
 802d684:	69fb      	ldr	r3, [r7, #28]
 802d686:	2b05      	cmp	r3, #5
 802d688:	ddeb      	ble.n	802d662 <mg_v4mapped+0x40>
  }
  // struct mg_str s = mg_str_n(&str.buf[7], str.len - 7);
  if (!mg_aton4(mg_str_n(&str.buf[7], str.len - 7), addr)) return false;
 802d68a:	68bb      	ldr	r3, [r7, #8]
 802d68c:	1dd9      	adds	r1, r3, #7
 802d68e:	68fb      	ldr	r3, [r7, #12]
 802d690:	1fda      	subs	r2, r3, #7
 802d692:	f107 0314 	add.w	r3, r7, #20
 802d696:	4618      	mov	r0, r3
 802d698:	f004 fac1 	bl	8031c1e <mg_str_n>
 802d69c:	687a      	ldr	r2, [r7, #4]
 802d69e:	f107 0314 	add.w	r3, r7, #20
 802d6a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 802d6a6:	f7ff ff46 	bl	802d536 <mg_aton4>
 802d6aa:	4603      	mov	r3, r0
 802d6ac:	f083 0301 	eor.w	r3, r3, #1
 802d6b0:	b2db      	uxtb	r3, r3
 802d6b2:	2b00      	cmp	r3, #0
 802d6b4:	d001      	beq.n	802d6ba <mg_v4mapped+0x98>
 802d6b6:	2300      	movs	r3, #0
 802d6b8:	e017      	b.n	802d6ea <mg_v4mapped+0xc8>
  memcpy(&ipv4, addr->ip, sizeof(ipv4));
 802d6ba:	687b      	ldr	r3, [r7, #4]
 802d6bc:	681b      	ldr	r3, [r3, #0]
 802d6be:	613b      	str	r3, [r7, #16]
  memset(addr->ip, 0, sizeof(addr->ip));
 802d6c0:	687b      	ldr	r3, [r7, #4]
 802d6c2:	2210      	movs	r2, #16
 802d6c4:	2100      	movs	r1, #0
 802d6c6:	4618      	mov	r0, r3
 802d6c8:	f008 fb92 	bl	8035df0 <memset>
  addr->ip[10] = addr->ip[11] = 255;
 802d6cc:	687b      	ldr	r3, [r7, #4]
 802d6ce:	22ff      	movs	r2, #255	@ 0xff
 802d6d0:	72da      	strb	r2, [r3, #11]
 802d6d2:	687b      	ldr	r3, [r7, #4]
 802d6d4:	7ada      	ldrb	r2, [r3, #11]
 802d6d6:	687b      	ldr	r3, [r7, #4]
 802d6d8:	729a      	strb	r2, [r3, #10]
  memcpy(&addr->ip[12], &ipv4, 4);
 802d6da:	687b      	ldr	r3, [r7, #4]
 802d6dc:	330c      	adds	r3, #12
 802d6de:	693a      	ldr	r2, [r7, #16]
 802d6e0:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = true;
 802d6e2:	687b      	ldr	r3, [r7, #4]
 802d6e4:	2201      	movs	r2, #1
 802d6e6:	74da      	strb	r2, [r3, #19]
  return true;
 802d6e8:	2301      	movs	r3, #1
}
 802d6ea:	4618      	mov	r0, r3
 802d6ec:	3720      	adds	r7, #32
 802d6ee:	46bd      	mov	sp, r7
 802d6f0:	bd80      	pop	{r7, pc}

0802d6f2 <mg_aton6>:

static bool mg_aton6(struct mg_str str, struct mg_addr *addr) {
 802d6f2:	b580      	push	{r7, lr}
 802d6f4:	b090      	sub	sp, #64	@ 0x40
 802d6f6:	af02      	add	r7, sp, #8
 802d6f8:	f107 0308 	add.w	r3, r7, #8
 802d6fc:	e883 0003 	stmia.w	r3, {r0, r1}
 802d700:	607a      	str	r2, [r7, #4]
  size_t i, j = 0, n = 0, dc = 42;
 802d702:	2300      	movs	r3, #0
 802d704:	633b      	str	r3, [r7, #48]	@ 0x30
 802d706:	2300      	movs	r3, #0
 802d708:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802d70a:	232a      	movs	r3, #42	@ 0x2a
 802d70c:	62bb      	str	r3, [r7, #40]	@ 0x28
  addr->scope_id = 0;
 802d70e:	687b      	ldr	r3, [r7, #4]
 802d710:	2200      	movs	r2, #0
 802d712:	749a      	strb	r2, [r3, #18]
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 802d714:	68fb      	ldr	r3, [r7, #12]
 802d716:	2b02      	cmp	r3, #2
 802d718:	d909      	bls.n	802d72e <mg_aton6+0x3c>
 802d71a:	68bb      	ldr	r3, [r7, #8]
 802d71c:	781b      	ldrb	r3, [r3, #0]
 802d71e:	2b5b      	cmp	r3, #91	@ 0x5b
 802d720:	d105      	bne.n	802d72e <mg_aton6+0x3c>
 802d722:	68bb      	ldr	r3, [r7, #8]
 802d724:	3301      	adds	r3, #1
 802d726:	60bb      	str	r3, [r7, #8]
 802d728:	68fb      	ldr	r3, [r7, #12]
 802d72a:	3b02      	subs	r3, #2
 802d72c:	60fb      	str	r3, [r7, #12]
  if (mg_v4mapped(str, addr)) return true;
 802d72e:	687a      	ldr	r2, [r7, #4]
 802d730:	f107 0308 	add.w	r3, r7, #8
 802d734:	e893 0003 	ldmia.w	r3, {r0, r1}
 802d738:	f7ff ff73 	bl	802d622 <mg_v4mapped>
 802d73c:	4603      	mov	r3, r0
 802d73e:	2b00      	cmp	r3, #0
 802d740:	d001      	beq.n	802d746 <mg_aton6+0x54>
 802d742:	2301      	movs	r3, #1
 802d744:	e0e1      	b.n	802d90a <mg_aton6+0x218>
  for (i = 0; i < str.len; i++) {
 802d746:	2300      	movs	r3, #0
 802d748:	637b      	str	r3, [r7, #52]	@ 0x34
 802d74a:	e0b0      	b.n	802d8ae <mg_aton6+0x1bc>
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 802d74c:	68ba      	ldr	r2, [r7, #8]
 802d74e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802d750:	4413      	add	r3, r2
 802d752:	781b      	ldrb	r3, [r3, #0]
 802d754:	2b2f      	cmp	r3, #47	@ 0x2f
 802d756:	d905      	bls.n	802d764 <mg_aton6+0x72>
 802d758:	68ba      	ldr	r2, [r7, #8]
 802d75a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802d75c:	4413      	add	r3, r2
 802d75e:	781b      	ldrb	r3, [r3, #0]
 802d760:	2b39      	cmp	r3, #57	@ 0x39
 802d762:	d917      	bls.n	802d794 <mg_aton6+0xa2>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 802d764:	68ba      	ldr	r2, [r7, #8]
 802d766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802d768:	4413      	add	r3, r2
 802d76a:	781b      	ldrb	r3, [r3, #0]
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 802d76c:	2b60      	cmp	r3, #96	@ 0x60
 802d76e:	d905      	bls.n	802d77c <mg_aton6+0x8a>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 802d770:	68ba      	ldr	r2, [r7, #8]
 802d772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802d774:	4413      	add	r3, r2
 802d776:	781b      	ldrb	r3, [r3, #0]
 802d778:	2b66      	cmp	r3, #102	@ 0x66
 802d77a:	d90b      	bls.n	802d794 <mg_aton6+0xa2>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 802d77c:	68ba      	ldr	r2, [r7, #8]
 802d77e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802d780:	4413      	add	r3, r2
 802d782:	781b      	ldrb	r3, [r3, #0]
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 802d784:	2b40      	cmp	r3, #64	@ 0x40
 802d786:	d933      	bls.n	802d7f0 <mg_aton6+0xfe>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 802d788:	68ba      	ldr	r2, [r7, #8]
 802d78a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802d78c:	4413      	add	r3, r2
 802d78e:	781b      	ldrb	r3, [r3, #0]
 802d790:	2b46      	cmp	r3, #70	@ 0x46
 802d792:	d82d      	bhi.n	802d7f0 <mg_aton6+0xfe>
      unsigned long val = 0;  // TODO(): This loops on chars, refactor
 802d794:	2300      	movs	r3, #0
 802d796:	617b      	str	r3, [r7, #20]
      if (i > j + 3) return false;
 802d798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802d79a:	3303      	adds	r3, #3
 802d79c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802d79e:	429a      	cmp	r2, r3
 802d7a0:	d901      	bls.n	802d7a6 <mg_aton6+0xb4>
 802d7a2:	2300      	movs	r3, #0
 802d7a4:	e0b1      	b.n	802d90a <mg_aton6+0x218>
      // MG_DEBUG(("%lu %lu [%.*s]", i, j, (int) (i - j + 1), &str.buf[j]));
      mg_str_to_num(mg_str_n(&str.buf[j], i - j + 1), 16, &val, sizeof(val));
 802d7a6:	68ba      	ldr	r2, [r7, #8]
 802d7a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802d7aa:	18d1      	adds	r1, r2, r3
 802d7ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802d7ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802d7b0:	1ad3      	subs	r3, r2, r3
 802d7b2:	1c5a      	adds	r2, r3, #1
 802d7b4:	f107 0318 	add.w	r3, r7, #24
 802d7b8:	4618      	mov	r0, r3
 802d7ba:	f004 fa30 	bl	8031c1e <mg_str_n>
 802d7be:	f107 0314 	add.w	r3, r7, #20
 802d7c2:	2204      	movs	r2, #4
 802d7c4:	9200      	str	r2, [sp, #0]
 802d7c6:	2210      	movs	r2, #16
 802d7c8:	f107 0118 	add.w	r1, r7, #24
 802d7cc:	c903      	ldmia	r1, {r0, r1}
 802d7ce:	f004 fc2d 	bl	803202c <mg_str_to_num>
      addr->ip[n] = (uint8_t) ((val >> 8) & 255);
 802d7d2:	697b      	ldr	r3, [r7, #20]
 802d7d4:	0a1b      	lsrs	r3, r3, #8
 802d7d6:	b2d9      	uxtb	r1, r3
 802d7d8:	687a      	ldr	r2, [r7, #4]
 802d7da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802d7dc:	4413      	add	r3, r2
 802d7de:	460a      	mov	r2, r1
 802d7e0:	701a      	strb	r2, [r3, #0]
      addr->ip[n + 1] = (uint8_t) (val & 255);
 802d7e2:	697a      	ldr	r2, [r7, #20]
 802d7e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802d7e6:	3301      	adds	r3, #1
 802d7e8:	b2d1      	uxtb	r1, r2
 802d7ea:	687a      	ldr	r2, [r7, #4]
 802d7ec:	54d1      	strb	r1, [r2, r3]
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 802d7ee:	e05b      	b.n	802d8a8 <mg_aton6+0x1b6>
    } else if (str.buf[i] == ':') {
 802d7f0:	68ba      	ldr	r2, [r7, #8]
 802d7f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802d7f4:	4413      	add	r3, r2
 802d7f6:	781b      	ldrb	r3, [r3, #0]
 802d7f8:	2b3a      	cmp	r3, #58	@ 0x3a
 802d7fa:	d134      	bne.n	802d866 <mg_aton6+0x174>
      j = i + 1;
 802d7fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802d7fe:	3301      	adds	r3, #1
 802d800:	633b      	str	r3, [r7, #48]	@ 0x30
      if (i > 0 && str.buf[i - 1] == ':') {
 802d802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802d804:	2b00      	cmp	r3, #0
 802d806:	d014      	beq.n	802d832 <mg_aton6+0x140>
 802d808:	68ba      	ldr	r2, [r7, #8]
 802d80a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802d80c:	3b01      	subs	r3, #1
 802d80e:	4413      	add	r3, r2
 802d810:	781b      	ldrb	r3, [r3, #0]
 802d812:	2b3a      	cmp	r3, #58	@ 0x3a
 802d814:	d10d      	bne.n	802d832 <mg_aton6+0x140>
        dc = n;  // Double colon
 802d816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802d818:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (i > 1 && str.buf[i - 2] == ':') return false;
 802d81a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802d81c:	2b01      	cmp	r3, #1
 802d81e:	d90f      	bls.n	802d840 <mg_aton6+0x14e>
 802d820:	68ba      	ldr	r2, [r7, #8]
 802d822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802d824:	3b02      	subs	r3, #2
 802d826:	4413      	add	r3, r2
 802d828:	781b      	ldrb	r3, [r3, #0]
 802d82a:	2b3a      	cmp	r3, #58	@ 0x3a
 802d82c:	d108      	bne.n	802d840 <mg_aton6+0x14e>
 802d82e:	2300      	movs	r3, #0
 802d830:	e06b      	b.n	802d90a <mg_aton6+0x218>
      } else if (i > 0) {
 802d832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802d834:	2b00      	cmp	r3, #0
 802d836:	d004      	beq.n	802d842 <mg_aton6+0x150>
        n += 2;
 802d838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802d83a:	3302      	adds	r3, #2
 802d83c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802d83e:	e000      	b.n	802d842 <mg_aton6+0x150>
        if (i > 1 && str.buf[i - 2] == ':') return false;
 802d840:	bf00      	nop
      }
      if (n > 14) return false;
 802d842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802d844:	2b0e      	cmp	r3, #14
 802d846:	d901      	bls.n	802d84c <mg_aton6+0x15a>
 802d848:	2300      	movs	r3, #0
 802d84a:	e05e      	b.n	802d90a <mg_aton6+0x218>
      addr->ip[n] = addr->ip[n + 1] = 0;  // For trailing ::
 802d84c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802d84e:	3301      	adds	r3, #1
 802d850:	687a      	ldr	r2, [r7, #4]
 802d852:	2100      	movs	r1, #0
 802d854:	54d1      	strb	r1, [r2, r3]
 802d856:	687a      	ldr	r2, [r7, #4]
 802d858:	5cd1      	ldrb	r1, [r2, r3]
 802d85a:	687a      	ldr	r2, [r7, #4]
 802d85c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802d85e:	4413      	add	r3, r2
 802d860:	460a      	mov	r2, r1
 802d862:	701a      	strb	r2, [r3, #0]
 802d864:	e020      	b.n	802d8a8 <mg_aton6+0x1b6>
    } else if (str.buf[i] == '%') {       // Scope ID, last in string
 802d866:	68ba      	ldr	r2, [r7, #8]
 802d868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802d86a:	4413      	add	r3, r2
 802d86c:	781b      	ldrb	r3, [r3, #0]
 802d86e:	2b25      	cmp	r3, #37	@ 0x25
 802d870:	d118      	bne.n	802d8a4 <mg_aton6+0x1b2>
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 802d872:	68ba      	ldr	r2, [r7, #8]
 802d874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802d876:	3301      	adds	r3, #1
 802d878:	18d1      	adds	r1, r2, r3
 802d87a:	68fa      	ldr	r2, [r7, #12]
 802d87c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802d87e:	1ad3      	subs	r3, r2, r3
 802d880:	1e5a      	subs	r2, r3, #1
 802d882:	f107 0320 	add.w	r3, r7, #32
 802d886:	4618      	mov	r0, r3
 802d888:	f004 f9c9 	bl	8031c1e <mg_str_n>
                           &addr->scope_id, sizeof(uint8_t));
 802d88c:	687b      	ldr	r3, [r7, #4]
 802d88e:	3312      	adds	r3, #18
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 802d890:	2201      	movs	r2, #1
 802d892:	9200      	str	r2, [sp, #0]
 802d894:	220a      	movs	r2, #10
 802d896:	f107 0120 	add.w	r1, r7, #32
 802d89a:	c903      	ldmia	r1, {r0, r1}
 802d89c:	f004 fbc6 	bl	803202c <mg_str_to_num>
 802d8a0:	4603      	mov	r3, r0
 802d8a2:	e032      	b.n	802d90a <mg_aton6+0x218>
    } else {
      return false;
 802d8a4:	2300      	movs	r3, #0
 802d8a6:	e030      	b.n	802d90a <mg_aton6+0x218>
  for (i = 0; i < str.len; i++) {
 802d8a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802d8aa:	3301      	adds	r3, #1
 802d8ac:	637b      	str	r3, [r7, #52]	@ 0x34
 802d8ae:	68fb      	ldr	r3, [r7, #12]
 802d8b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802d8b2:	429a      	cmp	r2, r3
 802d8b4:	f4ff af4a 	bcc.w	802d74c <mg_aton6+0x5a>
    }
  }
  if (n < 14 && dc == 42) return false;
 802d8b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802d8ba:	2b0d      	cmp	r3, #13
 802d8bc:	d804      	bhi.n	802d8c8 <mg_aton6+0x1d6>
 802d8be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802d8c0:	2b2a      	cmp	r3, #42	@ 0x2a
 802d8c2:	d101      	bne.n	802d8c8 <mg_aton6+0x1d6>
 802d8c4:	2300      	movs	r3, #0
 802d8c6:	e020      	b.n	802d90a <mg_aton6+0x218>
  if (n < 14) {
 802d8c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802d8ca:	2b0d      	cmp	r3, #13
 802d8cc:	d819      	bhi.n	802d902 <mg_aton6+0x210>
    memmove(&addr->ip[dc + (14 - n)], &addr->ip[dc], n - dc + 2);
 802d8ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 802d8d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802d8d2:	1ad3      	subs	r3, r2, r3
 802d8d4:	330e      	adds	r3, #14
 802d8d6:	687a      	ldr	r2, [r7, #4]
 802d8d8:	18d0      	adds	r0, r2, r3
 802d8da:	687a      	ldr	r2, [r7, #4]
 802d8dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802d8de:	18d1      	adds	r1, r2, r3
 802d8e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802d8e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802d8e4:	1ad3      	subs	r3, r2, r3
 802d8e6:	3302      	adds	r3, #2
 802d8e8:	461a      	mov	r2, r3
 802d8ea:	f008 fa67 	bl	8035dbc <memmove>
    memset(&addr->ip[dc], 0, 14 - n);
 802d8ee:	687a      	ldr	r2, [r7, #4]
 802d8f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802d8f2:	18d0      	adds	r0, r2, r3
 802d8f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802d8f6:	f1c3 030e 	rsb	r3, r3, #14
 802d8fa:	461a      	mov	r2, r3
 802d8fc:	2100      	movs	r1, #0
 802d8fe:	f008 fa77 	bl	8035df0 <memset>
  }

  addr->is_ip6 = true;
 802d902:	687b      	ldr	r3, [r7, #4]
 802d904:	2201      	movs	r2, #1
 802d906:	74da      	strb	r2, [r3, #19]
  return true;
 802d908:	2301      	movs	r3, #1
}
 802d90a:	4618      	mov	r0, r3
 802d90c:	3738      	adds	r7, #56	@ 0x38
 802d90e:	46bd      	mov	sp, r7
 802d910:	bd80      	pop	{r7, pc}

0802d912 <mg_aton>:

bool mg_aton(struct mg_str str, struct mg_addr *addr) {
 802d912:	b580      	push	{r7, lr}
 802d914:	b084      	sub	sp, #16
 802d916:	af00      	add	r7, sp, #0
 802d918:	f107 0308 	add.w	r3, r7, #8
 802d91c:	e883 0003 	stmia.w	r3, {r0, r1}
 802d920:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s]", (int) str.len, str.buf));
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 802d922:	687a      	ldr	r2, [r7, #4]
 802d924:	f107 0308 	add.w	r3, r7, #8
 802d928:	e893 0003 	ldmia.w	r3, {r0, r1}
 802d92c:	f7ff fde8 	bl	802d500 <mg_atone>
 802d930:	4603      	mov	r3, r0
 802d932:	2b00      	cmp	r3, #0
 802d934:	d11d      	bne.n	802d972 <mg_aton+0x60>
 802d936:	687a      	ldr	r2, [r7, #4]
 802d938:	f107 0308 	add.w	r3, r7, #8
 802d93c:	e893 0003 	ldmia.w	r3, {r0, r1}
 802d940:	f7ff fdae 	bl	802d4a0 <mg_atonl>
 802d944:	4603      	mov	r3, r0
 802d946:	2b00      	cmp	r3, #0
 802d948:	d113      	bne.n	802d972 <mg_aton+0x60>
 802d94a:	687a      	ldr	r2, [r7, #4]
 802d94c:	f107 0308 	add.w	r3, r7, #8
 802d950:	e893 0003 	ldmia.w	r3, {r0, r1}
 802d954:	f7ff fdef 	bl	802d536 <mg_aton4>
 802d958:	4603      	mov	r3, r0
 802d95a:	2b00      	cmp	r3, #0
 802d95c:	d109      	bne.n	802d972 <mg_aton+0x60>
         mg_aton6(str, addr);
 802d95e:	687a      	ldr	r2, [r7, #4]
 802d960:	f107 0308 	add.w	r3, r7, #8
 802d964:	e893 0003 	ldmia.w	r3, {r0, r1}
 802d968:	f7ff fec3 	bl	802d6f2 <mg_aton6>
 802d96c:	4603      	mov	r3, r0
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 802d96e:	2b00      	cmp	r3, #0
 802d970:	d001      	beq.n	802d976 <mg_aton+0x64>
 802d972:	2301      	movs	r3, #1
 802d974:	e000      	b.n	802d978 <mg_aton+0x66>
 802d976:	2300      	movs	r3, #0
 802d978:	f003 0301 	and.w	r3, r3, #1
 802d97c:	b2db      	uxtb	r3, r3
}
 802d97e:	4618      	mov	r0, r3
 802d980:	3710      	adds	r7, #16
 802d982:	46bd      	mov	sp, r7
 802d984:	bd80      	pop	{r7, pc}

0802d986 <mg_alloc_conn>:

struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {
 802d986:	b580      	push	{r7, lr}
 802d988:	b084      	sub	sp, #16
 802d98a:	af00      	add	r7, sp, #0
 802d98c:	6078      	str	r0, [r7, #4]
  struct mg_connection *c =
      (struct mg_connection *) calloc(1, sizeof(*c) + mgr->extraconnsize);
 802d98e:	687b      	ldr	r3, [r7, #4]
 802d990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802d992:	33b0      	adds	r3, #176	@ 0xb0
 802d994:	4619      	mov	r1, r3
 802d996:	2001      	movs	r0, #1
 802d998:	f7f7 fa5a 	bl	8024e50 <mg_calloc>
 802d99c:	60f8      	str	r0, [r7, #12]
  if (c != NULL) {
 802d99e:	68fb      	ldr	r3, [r7, #12]
 802d9a0:	2b00      	cmp	r3, #0
 802d9a2:	d017      	beq.n	802d9d4 <mg_alloc_conn+0x4e>
    c->mgr = mgr;
 802d9a4:	68fb      	ldr	r3, [r7, #12]
 802d9a6:	687a      	ldr	r2, [r7, #4]
 802d9a8:	605a      	str	r2, [r3, #4]
    c->send.align = c->recv.align = c->rtls.align = MG_IO_SIZE;
 802d9aa:	68fb      	ldr	r3, [r7, #12]
 802d9ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 802d9b0:	675a      	str	r2, [r3, #116]	@ 0x74
 802d9b2:	68fb      	ldr	r3, [r7, #12]
 802d9b4:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 802d9b6:	68fb      	ldr	r3, [r7, #12]
 802d9b8:	645a      	str	r2, [r3, #68]	@ 0x44
 802d9ba:	68fb      	ldr	r3, [r7, #12]
 802d9bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 802d9be:	68fb      	ldr	r3, [r7, #12]
 802d9c0:	655a      	str	r2, [r3, #84]	@ 0x54
    c->id = ++mgr->nextid;
 802d9c2:	687b      	ldr	r3, [r7, #4]
 802d9c4:	69db      	ldr	r3, [r3, #28]
 802d9c6:	1c5a      	adds	r2, r3, #1
 802d9c8:	687b      	ldr	r3, [r7, #4]
 802d9ca:	61da      	str	r2, [r3, #28]
 802d9cc:	687b      	ldr	r3, [r7, #4]
 802d9ce:	69da      	ldr	r2, [r3, #28]
 802d9d0:	68fb      	ldr	r3, [r7, #12]
 802d9d2:	635a      	str	r2, [r3, #52]	@ 0x34
    MG_PROF_INIT(c);
  }
  return c;
 802d9d4:	68fb      	ldr	r3, [r7, #12]
}
 802d9d6:	4618      	mov	r0, r3
 802d9d8:	3710      	adds	r7, #16
 802d9da:	46bd      	mov	sp, r7
 802d9dc:	bd80      	pop	{r7, pc}
	...

0802d9e0 <mg_close_conn>:

void mg_close_conn(struct mg_connection *c) {
 802d9e0:	b580      	push	{r7, lr}
 802d9e2:	b084      	sub	sp, #16
 802d9e4:	af00      	add	r7, sp, #0
 802d9e6:	6078      	str	r0, [r7, #4]
  mg_resolve_cancel(c);  // Close any pending DNS query
 802d9e8:	6878      	ldr	r0, [r7, #4]
 802d9ea:	f7f7 fa6a 	bl	8024ec2 <mg_resolve_cancel>
  LIST_DELETE(struct mg_connection, &c->mgr->conns, c);
 802d9ee:	687b      	ldr	r3, [r7, #4]
 802d9f0:	685b      	ldr	r3, [r3, #4]
 802d9f2:	60fb      	str	r3, [r7, #12]
 802d9f4:	e002      	b.n	802d9fc <mg_close_conn+0x1c>
 802d9f6:	68fb      	ldr	r3, [r7, #12]
 802d9f8:	681b      	ldr	r3, [r3, #0]
 802d9fa:	60fb      	str	r3, [r7, #12]
 802d9fc:	68fb      	ldr	r3, [r7, #12]
 802d9fe:	681b      	ldr	r3, [r3, #0]
 802da00:	687a      	ldr	r2, [r7, #4]
 802da02:	429a      	cmp	r2, r3
 802da04:	d1f7      	bne.n	802d9f6 <mg_close_conn+0x16>
 802da06:	687b      	ldr	r3, [r7, #4]
 802da08:	681a      	ldr	r2, [r3, #0]
 802da0a:	68fb      	ldr	r3, [r7, #12]
 802da0c:	601a      	str	r2, [r3, #0]
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 802da0e:	687b      	ldr	r3, [r7, #4]
 802da10:	685b      	ldr	r3, [r3, #4]
 802da12:	689b      	ldr	r3, [r3, #8]
 802da14:	687a      	ldr	r2, [r7, #4]
 802da16:	429a      	cmp	r2, r3
 802da18:	d103      	bne.n	802da22 <mg_close_conn+0x42>
 802da1a:	687b      	ldr	r3, [r7, #4]
 802da1c:	685b      	ldr	r3, [r3, #4]
 802da1e:	2200      	movs	r2, #0
 802da20:	609a      	str	r2, [r3, #8]
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 802da22:	687b      	ldr	r3, [r7, #4]
 802da24:	685b      	ldr	r3, [r3, #4]
 802da26:	691b      	ldr	r3, [r3, #16]
 802da28:	687a      	ldr	r2, [r7, #4]
 802da2a:	429a      	cmp	r2, r3
 802da2c:	d103      	bne.n	802da36 <mg_close_conn+0x56>
 802da2e:	687b      	ldr	r3, [r7, #4]
 802da30:	685b      	ldr	r3, [r3, #4]
 802da32:	2200      	movs	r2, #0
 802da34:	611a      	str	r2, [r3, #16]
  // Order of operations is important. `MG_EV_CLOSE` event must be fired
  // before we deallocate received data, see #1331
  mg_call(c, MG_EV_CLOSE, NULL);
 802da36:	2200      	movs	r2, #0
 802da38:	2109      	movs	r1, #9
 802da3a:	6878      	ldr	r0, [r7, #4]
 802da3c:	f7f7 ffe8 	bl	8025a10 <mg_call>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 802da40:	4b17      	ldr	r3, [pc, #92]	@ (802daa0 <mg_close_conn+0xc0>)
 802da42:	681b      	ldr	r3, [r3, #0]
 802da44:	2b02      	cmp	r3, #2
 802da46:	dd0e      	ble.n	802da66 <mg_close_conn+0x86>
 802da48:	4b16      	ldr	r3, [pc, #88]	@ (802daa4 <mg_close_conn+0xc4>)
 802da4a:	f241 22ae 	movw	r2, #4782	@ 0x12ae
 802da4e:	4916      	ldr	r1, [pc, #88]	@ (802daa8 <mg_close_conn+0xc8>)
 802da50:	2003      	movs	r0, #3
 802da52:	f7fd fbc3 	bl	802b1dc <mg_log_prefix>
 802da56:	687b      	ldr	r3, [r7, #4]
 802da58:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 802da5a:	687b      	ldr	r3, [r7, #4]
 802da5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802da5e:	461a      	mov	r2, r3
 802da60:	4812      	ldr	r0, [pc, #72]	@ (802daac <mg_close_conn+0xcc>)
 802da62:	f7fd fc0b 	bl	802b27c <mg_log>
  MG_PROF_DUMP(c);
  MG_PROF_FREE(c);

  mg_tls_free(c);
 802da66:	6878      	ldr	r0, [r7, #4]
 802da68:	f004 fe14 	bl	8032694 <mg_tls_free>
  mg_iobuf_free(&c->recv);
 802da6c:	687b      	ldr	r3, [r7, #4]
 802da6e:	3338      	adds	r3, #56	@ 0x38
 802da70:	4618      	mov	r0, r3
 802da72:	f7fc fcec 	bl	802a44e <mg_iobuf_free>
  mg_iobuf_free(&c->send);
 802da76:	687b      	ldr	r3, [r7, #4]
 802da78:	3348      	adds	r3, #72	@ 0x48
 802da7a:	4618      	mov	r0, r3
 802da7c:	f7fc fce7 	bl	802a44e <mg_iobuf_free>
  mg_iobuf_free(&c->rtls);
 802da80:	687b      	ldr	r3, [r7, #4]
 802da82:	3368      	adds	r3, #104	@ 0x68
 802da84:	4618      	mov	r0, r3
 802da86:	f7fc fce2 	bl	802a44e <mg_iobuf_free>
  mg_bzero((unsigned char *) c, sizeof(*c));
 802da8a:	21b0      	movs	r1, #176	@ 0xb0
 802da8c:	6878      	ldr	r0, [r7, #4]
 802da8e:	f004 ffb3 	bl	80329f8 <mg_bzero>
  free(c);
 802da92:	6878      	ldr	r0, [r7, #4]
 802da94:	f7ee fe68 	bl	801c768 <vPortFree>
}
 802da98:	bf00      	nop
 802da9a:	3710      	adds	r7, #16
 802da9c:	46bd      	mov	sp, r7
 802da9e:	bd80      	pop	{r7, pc}
 802daa0:	20000298 	.word	0x20000298
 802daa4:	080445e0 	.word	0x080445e0
 802daa8:	08041564 	.word	0x08041564
 802daac:	08042a84 	.word	0x08042a84

0802dab0 <mg_connect>:

struct mg_connection *mg_connect(struct mg_mgr *mgr, const char *url,
                                 mg_event_handler_t fn, void *fn_data) {
 802dab0:	b580      	push	{r7, lr}
 802dab2:	b086      	sub	sp, #24
 802dab4:	af00      	add	r7, sp, #0
 802dab6:	60f8      	str	r0, [r7, #12]
 802dab8:	60b9      	str	r1, [r7, #8]
 802daba:	607a      	str	r2, [r7, #4]
 802dabc:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 802dabe:	2300      	movs	r3, #0
 802dac0:	617b      	str	r3, [r7, #20]
  if (url == NULL || url[0] == '\0') {
 802dac2:	68bb      	ldr	r3, [r7, #8]
 802dac4:	2b00      	cmp	r3, #0
 802dac6:	d003      	beq.n	802dad0 <mg_connect+0x20>
 802dac8:	68bb      	ldr	r3, [r7, #8]
 802daca:	781b      	ldrb	r3, [r3, #0]
 802dacc:	2b00      	cmp	r3, #0
 802dace:	d10e      	bne.n	802daee <mg_connect+0x3e>
    MG_ERROR(("null url"));
 802dad0:	4b37      	ldr	r3, [pc, #220]	@ (802dbb0 <mg_connect+0x100>)
 802dad2:	681b      	ldr	r3, [r3, #0]
 802dad4:	2b00      	cmp	r3, #0
 802dad6:	dd66      	ble.n	802dba6 <mg_connect+0xf6>
 802dad8:	4b36      	ldr	r3, [pc, #216]	@ (802dbb4 <mg_connect+0x104>)
 802dada:	f241 22be 	movw	r2, #4798	@ 0x12be
 802dade:	4936      	ldr	r1, [pc, #216]	@ (802dbb8 <mg_connect+0x108>)
 802dae0:	2001      	movs	r0, #1
 802dae2:	f7fd fb7b 	bl	802b1dc <mg_log_prefix>
 802dae6:	4835      	ldr	r0, [pc, #212]	@ (802dbbc <mg_connect+0x10c>)
 802dae8:	f7fd fbc8 	bl	802b27c <mg_log>
 802daec:	e05b      	b.n	802dba6 <mg_connect+0xf6>
  } else if ((c = mg_alloc_conn(mgr)) == NULL) {
 802daee:	68f8      	ldr	r0, [r7, #12]
 802daf0:	f7ff ff49 	bl	802d986 <mg_alloc_conn>
 802daf4:	6178      	str	r0, [r7, #20]
 802daf6:	697b      	ldr	r3, [r7, #20]
 802daf8:	2b00      	cmp	r3, #0
 802dafa:	d10e      	bne.n	802db1a <mg_connect+0x6a>
    MG_ERROR(("OOM"));
 802dafc:	4b2c      	ldr	r3, [pc, #176]	@ (802dbb0 <mg_connect+0x100>)
 802dafe:	681b      	ldr	r3, [r3, #0]
 802db00:	2b00      	cmp	r3, #0
 802db02:	dd50      	ble.n	802dba6 <mg_connect+0xf6>
 802db04:	4b2b      	ldr	r3, [pc, #172]	@ (802dbb4 <mg_connect+0x104>)
 802db06:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 802db0a:	492b      	ldr	r1, [pc, #172]	@ (802dbb8 <mg_connect+0x108>)
 802db0c:	2001      	movs	r0, #1
 802db0e:	f7fd fb65 	bl	802b1dc <mg_log_prefix>
 802db12:	482b      	ldr	r0, [pc, #172]	@ (802dbc0 <mg_connect+0x110>)
 802db14:	f7fd fbb2 	bl	802b27c <mg_log>
 802db18:	e045      	b.n	802dba6 <mg_connect+0xf6>
  } else {
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 802db1a:	68fb      	ldr	r3, [r7, #12]
 802db1c:	681a      	ldr	r2, [r3, #0]
 802db1e:	697b      	ldr	r3, [r7, #20]
 802db20:	601a      	str	r2, [r3, #0]
 802db22:	68fb      	ldr	r3, [r7, #12]
 802db24:	697a      	ldr	r2, [r7, #20]
 802db26:	601a      	str	r2, [r3, #0]
    c->is_udp = (strncmp(url, "udp:", 4) == 0);
 802db28:	2204      	movs	r2, #4
 802db2a:	4926      	ldr	r1, [pc, #152]	@ (802dbc4 <mg_connect+0x114>)
 802db2c:	68b8      	ldr	r0, [r7, #8]
 802db2e:	f008 f994 	bl	8035e5a <strncmp>
 802db32:	4603      	mov	r3, r0
 802db34:	2b00      	cmp	r3, #0
 802db36:	bf0c      	ite	eq
 802db38:	2301      	moveq	r3, #1
 802db3a:	2300      	movne	r3, #0
 802db3c:	b2d9      	uxtb	r1, r3
 802db3e:	697a      	ldr	r2, [r7, #20]
 802db40:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 802db44:	f361 0300 	bfi	r3, r1, #0, #1
 802db48:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    c->fd = (void *) (size_t) MG_INVALID_SOCKET;
 802db4c:	697b      	ldr	r3, [r7, #20]
 802db4e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802db52:	631a      	str	r2, [r3, #48]	@ 0x30
    c->fn = fn;
 802db54:	697b      	ldr	r3, [r7, #20]
 802db56:	687a      	ldr	r2, [r7, #4]
 802db58:	679a      	str	r2, [r3, #120]	@ 0x78
    c->is_client = true;
 802db5a:	697a      	ldr	r2, [r7, #20]
 802db5c:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 802db60:	f043 0302 	orr.w	r3, r3, #2
 802db64:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    c->fn_data = fn_data;
 802db68:	697b      	ldr	r3, [r7, #20]
 802db6a:	683a      	ldr	r2, [r7, #0]
 802db6c:	67da      	str	r2, [r3, #124]	@ 0x7c
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 802db6e:	4b10      	ldr	r3, [pc, #64]	@ (802dbb0 <mg_connect+0x100>)
 802db70:	681b      	ldr	r3, [r3, #0]
 802db72:	2b02      	cmp	r3, #2
 802db74:	dd0e      	ble.n	802db94 <mg_connect+0xe4>
 802db76:	4b0f      	ldr	r3, [pc, #60]	@ (802dbb4 <mg_connect+0x104>)
 802db78:	f241 22c8 	movw	r2, #4808	@ 0x12c8
 802db7c:	490e      	ldr	r1, [pc, #56]	@ (802dbb8 <mg_connect+0x108>)
 802db7e:	2003      	movs	r0, #3
 802db80:	f7fd fb2c 	bl	802b1dc <mg_log_prefix>
 802db84:	697b      	ldr	r3, [r7, #20]
 802db86:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 802db88:	697b      	ldr	r3, [r7, #20]
 802db8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 802db8c:	68bb      	ldr	r3, [r7, #8]
 802db8e:	480e      	ldr	r0, [pc, #56]	@ (802dbc8 <mg_connect+0x118>)
 802db90:	f7fd fb74 	bl	802b27c <mg_log>
    mg_call(c, MG_EV_OPEN, (void *) url);
 802db94:	68ba      	ldr	r2, [r7, #8]
 802db96:	2101      	movs	r1, #1
 802db98:	6978      	ldr	r0, [r7, #20]
 802db9a:	f7f7 ff39 	bl	8025a10 <mg_call>
    mg_resolve(c, url);
 802db9e:	68b9      	ldr	r1, [r7, #8]
 802dba0:	6978      	ldr	r0, [r7, #20]
 802dba2:	f7f7 fef1 	bl	8025988 <mg_resolve>
  }
  return c;
 802dba6:	697b      	ldr	r3, [r7, #20]
}
 802dba8:	4618      	mov	r0, r3
 802dbaa:	3718      	adds	r7, #24
 802dbac:	46bd      	mov	sp, r7
 802dbae:	bd80      	pop	{r7, pc}
 802dbb0:	20000298 	.word	0x20000298
 802dbb4:	080445f0 	.word	0x080445f0
 802dbb8:	08041564 	.word	0x08041564
 802dbbc:	08042a94 	.word	0x08042a94
 802dbc0:	08042aa0 	.word	0x08042aa0
 802dbc4:	08042aa4 	.word	0x08042aa4
 802dbc8:	080416c0 	.word	0x080416c0

0802dbcc <mg_listen>:

struct mg_connection *mg_listen(struct mg_mgr *mgr, const char *url,
                                mg_event_handler_t fn, void *fn_data) {
 802dbcc:	b580      	push	{r7, lr}
 802dbce:	b086      	sub	sp, #24
 802dbd0:	af00      	add	r7, sp, #0
 802dbd2:	60f8      	str	r0, [r7, #12]
 802dbd4:	60b9      	str	r1, [r7, #8]
 802dbd6:	607a      	str	r2, [r7, #4]
 802dbd8:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 802dbda:	2300      	movs	r3, #0
 802dbdc:	617b      	str	r3, [r7, #20]
  if ((c = mg_alloc_conn(mgr)) == NULL) {
 802dbde:	68f8      	ldr	r0, [r7, #12]
 802dbe0:	f7ff fed1 	bl	802d986 <mg_alloc_conn>
 802dbe4:	6178      	str	r0, [r7, #20]
 802dbe6:	697b      	ldr	r3, [r7, #20]
 802dbe8:	2b00      	cmp	r3, #0
 802dbea:	d10f      	bne.n	802dc0c <mg_listen+0x40>
    MG_ERROR(("OOM %s", url));
 802dbec:	4b41      	ldr	r3, [pc, #260]	@ (802dcf4 <mg_listen+0x128>)
 802dbee:	681b      	ldr	r3, [r3, #0]
 802dbf0:	2b00      	cmp	r3, #0
 802dbf2:	dd7a      	ble.n	802dcea <mg_listen+0x11e>
 802dbf4:	4b40      	ldr	r3, [pc, #256]	@ (802dcf8 <mg_listen+0x12c>)
 802dbf6:	f241 22d3 	movw	r2, #4819	@ 0x12d3
 802dbfa:	4940      	ldr	r1, [pc, #256]	@ (802dcfc <mg_listen+0x130>)
 802dbfc:	2001      	movs	r0, #1
 802dbfe:	f7fd faed 	bl	802b1dc <mg_log_prefix>
 802dc02:	68b9      	ldr	r1, [r7, #8]
 802dc04:	483e      	ldr	r0, [pc, #248]	@ (802dd00 <mg_listen+0x134>)
 802dc06:	f7fd fb39 	bl	802b27c <mg_log>
 802dc0a:	e06e      	b.n	802dcea <mg_listen+0x11e>
  } else if (!mg_open_listener(c, url)) {
 802dc0c:	68b9      	ldr	r1, [r7, #8]
 802dc0e:	6978      	ldr	r0, [r7, #20]
 802dc10:	f003 f852 	bl	8030cb8 <mg_open_listener>
 802dc14:	4603      	mov	r3, r0
 802dc16:	f083 0301 	eor.w	r3, r3, #1
 802dc1a:	b2db      	uxtb	r3, r3
 802dc1c:	2b00      	cmp	r3, #0
 802dc1e:	d019      	beq.n	802dc54 <mg_listen+0x88>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 802dc20:	4b34      	ldr	r3, [pc, #208]	@ (802dcf4 <mg_listen+0x128>)
 802dc22:	681b      	ldr	r3, [r3, #0]
 802dc24:	2b00      	cmp	r3, #0
 802dc26:	dd0f      	ble.n	802dc48 <mg_listen+0x7c>
 802dc28:	4b33      	ldr	r3, [pc, #204]	@ (802dcf8 <mg_listen+0x12c>)
 802dc2a:	f241 22d5 	movw	r2, #4821	@ 0x12d5
 802dc2e:	4933      	ldr	r1, [pc, #204]	@ (802dcfc <mg_listen+0x130>)
 802dc30:	2001      	movs	r0, #1
 802dc32:	f7fd fad3 	bl	802b1dc <mg_log_prefix>
 802dc36:	f009 fadf 	bl	80371f8 <__errno>
 802dc3a:	4603      	mov	r3, r0
 802dc3c:	681b      	ldr	r3, [r3, #0]
 802dc3e:	461a      	mov	r2, r3
 802dc40:	68b9      	ldr	r1, [r7, #8]
 802dc42:	4830      	ldr	r0, [pc, #192]	@ (802dd04 <mg_listen+0x138>)
 802dc44:	f7fd fb1a 	bl	802b27c <mg_log>
    MG_PROF_FREE(c);
    free(c);
 802dc48:	6978      	ldr	r0, [r7, #20]
 802dc4a:	f7ee fd8d 	bl	801c768 <vPortFree>
    c = NULL;
 802dc4e:	2300      	movs	r3, #0
 802dc50:	617b      	str	r3, [r7, #20]
 802dc52:	e04a      	b.n	802dcea <mg_listen+0x11e>
  } else {
    c->is_listening = 1;
 802dc54:	697a      	ldr	r2, [r7, #20]
 802dc56:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 802dc5a:	f043 0301 	orr.w	r3, r3, #1
 802dc5e:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    c->is_udp = strncmp(url, "udp:", 4) == 0;
 802dc62:	2204      	movs	r2, #4
 802dc64:	4928      	ldr	r1, [pc, #160]	@ (802dd08 <mg_listen+0x13c>)
 802dc66:	68b8      	ldr	r0, [r7, #8]
 802dc68:	f008 f8f7 	bl	8035e5a <strncmp>
 802dc6c:	4603      	mov	r3, r0
 802dc6e:	2b00      	cmp	r3, #0
 802dc70:	bf0c      	ite	eq
 802dc72:	2301      	moveq	r3, #1
 802dc74:	2300      	movne	r3, #0
 802dc76:	b2d9      	uxtb	r1, r3
 802dc78:	697a      	ldr	r2, [r7, #20]
 802dc7a:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 802dc7e:	f361 0300 	bfi	r3, r1, #0, #1
 802dc82:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 802dc86:	68fb      	ldr	r3, [r7, #12]
 802dc88:	681a      	ldr	r2, [r3, #0]
 802dc8a:	697b      	ldr	r3, [r7, #20]
 802dc8c:	601a      	str	r2, [r3, #0]
 802dc8e:	68fb      	ldr	r3, [r7, #12]
 802dc90:	697a      	ldr	r2, [r7, #20]
 802dc92:	601a      	str	r2, [r3, #0]
    c->fn = fn;
 802dc94:	697b      	ldr	r3, [r7, #20]
 802dc96:	687a      	ldr	r2, [r7, #4]
 802dc98:	679a      	str	r2, [r3, #120]	@ 0x78
    c->fn_data = fn_data;
 802dc9a:	697b      	ldr	r3, [r7, #20]
 802dc9c:	683a      	ldr	r2, [r7, #0]
 802dc9e:	67da      	str	r2, [r3, #124]	@ 0x7c
    mg_call(c, MG_EV_OPEN, NULL);
 802dca0:	2200      	movs	r2, #0
 802dca2:	2101      	movs	r1, #1
 802dca4:	6978      	ldr	r0, [r7, #20]
 802dca6:	f7f7 feb3 	bl	8025a10 <mg_call>
    if (mg_url_is_ssl(url)) c->is_tls = 1;  // Accepted connection must
 802dcaa:	68b8      	ldr	r0, [r7, #8]
 802dcac:	f004 fd44 	bl	8032738 <mg_url_is_ssl>
 802dcb0:	4603      	mov	r3, r0
 802dcb2:	2b00      	cmp	r3, #0
 802dcb4:	d006      	beq.n	802dcc4 <mg_listen+0xf8>
 802dcb6:	697a      	ldr	r2, [r7, #20]
 802dcb8:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 802dcbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802dcc0:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 802dcc4:	4b0b      	ldr	r3, [pc, #44]	@ (802dcf4 <mg_listen+0x128>)
 802dcc6:	681b      	ldr	r3, [r3, #0]
 802dcc8:	2b02      	cmp	r3, #2
 802dcca:	dd0e      	ble.n	802dcea <mg_listen+0x11e>
 802dccc:	4b0a      	ldr	r3, [pc, #40]	@ (802dcf8 <mg_listen+0x12c>)
 802dcce:	f241 22e1 	movw	r2, #4833	@ 0x12e1
 802dcd2:	490a      	ldr	r1, [pc, #40]	@ (802dcfc <mg_listen+0x130>)
 802dcd4:	2003      	movs	r0, #3
 802dcd6:	f7fd fa81 	bl	802b1dc <mg_log_prefix>
 802dcda:	697b      	ldr	r3, [r7, #20]
 802dcdc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 802dcde:	697b      	ldr	r3, [r7, #20]
 802dce0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 802dce2:	68bb      	ldr	r3, [r7, #8]
 802dce4:	4809      	ldr	r0, [pc, #36]	@ (802dd0c <mg_listen+0x140>)
 802dce6:	f7fd fac9 	bl	802b27c <mg_log>
  }
  return c;
 802dcea:	697b      	ldr	r3, [r7, #20]
}
 802dcec:	4618      	mov	r0, r3
 802dcee:	3718      	adds	r7, #24
 802dcf0:	46bd      	mov	sp, r7
 802dcf2:	bd80      	pop	{r7, pc}
 802dcf4:	20000298 	.word	0x20000298
 802dcf8:	080445fc 	.word	0x080445fc
 802dcfc:	08041564 	.word	0x08041564
 802dd00:	08042aac 	.word	0x08042aac
 802dd04:	08042ab4 	.word	0x08042ab4
 802dd08:	08042aa4 	.word	0x08042aa4
 802dd0c:	080416c0 	.word	0x080416c0

0802dd10 <mg_timer_add>:
  }
  return c;
}

struct mg_timer *mg_timer_add(struct mg_mgr *mgr, uint64_t milliseconds,
                              unsigned flags, void (*fn)(void *), void *arg) {
 802dd10:	b580      	push	{r7, lr}
 802dd12:	b08a      	sub	sp, #40	@ 0x28
 802dd14:	af04      	add	r7, sp, #16
 802dd16:	60f8      	str	r0, [r7, #12]
 802dd18:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t = (struct mg_timer *) calloc(1, sizeof(*t));
 802dd1c:	2128      	movs	r1, #40	@ 0x28
 802dd1e:	2001      	movs	r0, #1
 802dd20:	f7f7 f896 	bl	8024e50 <mg_calloc>
 802dd24:	6178      	str	r0, [r7, #20]
  if (t != NULL) {
 802dd26:	697b      	ldr	r3, [r7, #20]
 802dd28:	2b00      	cmp	r3, #0
 802dd2a:	d014      	beq.n	802dd56 <mg_timer_add+0x46>
    mg_timer_init(&mgr->timers, t, milliseconds, flags, fn, arg);
 802dd2c:	68fb      	ldr	r3, [r7, #12]
 802dd2e:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 802dd32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802dd34:	9302      	str	r3, [sp, #8]
 802dd36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802dd38:	9301      	str	r3, [sp, #4]
 802dd3a:	6a3b      	ldr	r3, [r7, #32]
 802dd3c:	9300      	str	r3, [sp, #0]
 802dd3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 802dd42:	6979      	ldr	r1, [r7, #20]
 802dd44:	f004 fba5 	bl	8032492 <mg_timer_init>
    t->id = mgr->timerid++;
 802dd48:	68fb      	ldr	r3, [r7, #12]
 802dd4a:	6a1b      	ldr	r3, [r3, #32]
 802dd4c:	1c59      	adds	r1, r3, #1
 802dd4e:	68fa      	ldr	r2, [r7, #12]
 802dd50:	6211      	str	r1, [r2, #32]
 802dd52:	697a      	ldr	r2, [r7, #20]
 802dd54:	6013      	str	r3, [r2, #0]
  }
  return t;
 802dd56:	697b      	ldr	r3, [r7, #20]
}
 802dd58:	4618      	mov	r0, r3
 802dd5a:	3718      	adds	r7, #24
 802dd5c:	46bd      	mov	sp, r7
 802dd5e:	bd80      	pop	{r7, pc}

0802dd60 <mg_mgr_init>:
  if (mgr->epoll_fd >= 0) close(mgr->epoll_fd), mgr->epoll_fd = -1;
#endif
  mg_tls_ctx_free(mgr);
}

void mg_mgr_init(struct mg_mgr *mgr) {
 802dd60:	b580      	push	{r7, lr}
 802dd62:	b082      	sub	sp, #8
 802dd64:	af00      	add	r7, sp, #0
 802dd66:	6078      	str	r0, [r7, #4]
  memset(mgr, 0, sizeof(*mgr));
 802dd68:	2248      	movs	r2, #72	@ 0x48
 802dd6a:	2100      	movs	r1, #0
 802dd6c:	6878      	ldr	r0, [r7, #4]
 802dd6e:	f008 f83f 	bl	8035df0 <memset>
#if MG_ENABLE_EPOLL
  if ((mgr->epoll_fd = epoll_create1(EPOLL_CLOEXEC)) < 0)
    MG_ERROR(("epoll_create1 errno %d", errno));
#else
  mgr->epoll_fd = -1;
 802dd72:	687b      	ldr	r3, [r7, #4]
 802dd74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802dd78:	639a      	str	r2, [r3, #56]	@ 0x38
  // won't kill the whole process.
  signal(SIGPIPE, SIG_IGN);
#elif MG_ENABLE_TCPIP_DRIVER_INIT && defined(MG_TCPIP_DRIVER_INIT)
  MG_TCPIP_DRIVER_INIT(mgr);
#endif
  mgr->pipe = MG_INVALID_SOCKET;
 802dd7a:	687b      	ldr	r3, [r7, #4]
 802dd7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802dd80:	645a      	str	r2, [r3, #68]	@ 0x44
  mgr->dnstimeout = 3000;
 802dd82:	687b      	ldr	r3, [r7, #4]
 802dd84:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 802dd88:	615a      	str	r2, [r3, #20]
  mgr->dns4.url = "udp://8.8.8.8:53";
 802dd8a:	687b      	ldr	r3, [r7, #4]
 802dd8c:	4a05      	ldr	r2, [pc, #20]	@ (802dda4 <mg_mgr_init+0x44>)
 802dd8e:	605a      	str	r2, [r3, #4]
  mgr->dns6.url = "udp://[2001:4860:4860::8888]:53";
 802dd90:	687b      	ldr	r3, [r7, #4]
 802dd92:	4a05      	ldr	r2, [pc, #20]	@ (802dda8 <mg_mgr_init+0x48>)
 802dd94:	60da      	str	r2, [r3, #12]
  mg_tls_ctx_init(mgr);
 802dd96:	6878      	ldr	r0, [r7, #4]
 802dd98:	f004 fcc3 	bl	8032722 <mg_tls_ctx_init>
}
 802dd9c:	bf00      	nop
 802dd9e:	3708      	adds	r7, #8
 802dda0:	46bd      	mov	sp, r7
 802dda2:	bd80      	pop	{r7, pc}
 802dda4:	08042ae4 	.word	0x08042ae4
 802dda8:	08042af8 	.word	0x08042af8

0802ddac <mg_tcpip_call>:
  struct tcp *tcp;
  struct udp *udp;
  struct dhcp *dhcp;
};

static void mg_tcpip_call(struct mg_tcpip_if *ifp, int ev, void *ev_data) {
 802ddac:	b580      	push	{r7, lr}
 802ddae:	b084      	sub	sp, #16
 802ddb0:	af00      	add	r7, sp, #0
 802ddb2:	60f8      	str	r0, [r7, #12]
 802ddb4:	60b9      	str	r1, [r7, #8]
 802ddb6:	607a      	str	r2, [r7, #4]
  if (ifp->fn != NULL) ifp->fn(ifp, ev, ev_data);
 802ddb8:	68fb      	ldr	r3, [r7, #12]
 802ddba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802ddbc:	2b00      	cmp	r3, #0
 802ddbe:	d005      	beq.n	802ddcc <mg_tcpip_call+0x20>
 802ddc0:	68fb      	ldr	r3, [r7, #12]
 802ddc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802ddc4:	687a      	ldr	r2, [r7, #4]
 802ddc6:	68b9      	ldr	r1, [r7, #8]
 802ddc8:	68f8      	ldr	r0, [r7, #12]
 802ddca:	4798      	blx	r3
}
 802ddcc:	bf00      	nop
 802ddce:	3710      	adds	r7, #16
 802ddd0:	46bd      	mov	sp, r7
 802ddd2:	bd80      	pop	{r7, pc}

0802ddd4 <mkpay>:

static void send_syn(struct mg_connection *c);

static void mkpay(struct pkt *pkt, void *p) {
 802ddd4:	b590      	push	{r4, r7, lr}
 802ddd6:	b085      	sub	sp, #20
 802ddd8:	af00      	add	r7, sp, #0
 802ddda:	60f8      	str	r0, [r7, #12]
 802dddc:	60b9      	str	r1, [r7, #8]
  pkt->pay =
      mg_str_n((char *) p, (size_t) (&pkt->raw.buf[pkt->raw.len] - (char *) p));
 802ddde:	68fb      	ldr	r3, [r7, #12]
 802dde0:	681a      	ldr	r2, [r3, #0]
 802dde2:	68fb      	ldr	r3, [r7, #12]
 802dde4:	685b      	ldr	r3, [r3, #4]
 802dde6:	441a      	add	r2, r3
 802dde8:	68bb      	ldr	r3, [r7, #8]
 802ddea:	1ad3      	subs	r3, r2, r3
 802ddec:	461a      	mov	r2, r3
 802ddee:	68fc      	ldr	r4, [r7, #12]
 802ddf0:	463b      	mov	r3, r7
 802ddf2:	68b9      	ldr	r1, [r7, #8]
 802ddf4:	4618      	mov	r0, r3
 802ddf6:	f003 ff12 	bl	8031c1e <mg_str_n>
 802ddfa:	f104 0308 	add.w	r3, r4, #8
 802ddfe:	463a      	mov	r2, r7
 802de00:	e892 0003 	ldmia.w	r2, {r0, r1}
 802de04:	e883 0003 	stmia.w	r3, {r0, r1}
}
 802de08:	bf00      	nop
 802de0a:	3714      	adds	r7, #20
 802de0c:	46bd      	mov	sp, r7
 802de0e:	bd90      	pop	{r4, r7, pc}

0802de10 <csumup>:

static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {
 802de10:	b480      	push	{r7}
 802de12:	b087      	sub	sp, #28
 802de14:	af00      	add	r7, sp, #0
 802de16:	60f8      	str	r0, [r7, #12]
 802de18:	60b9      	str	r1, [r7, #8]
 802de1a:	607a      	str	r2, [r7, #4]
  size_t i;
  const uint8_t *p = (const uint8_t *) buf;
 802de1c:	68bb      	ldr	r3, [r7, #8]
 802de1e:	613b      	str	r3, [r7, #16]
  for (i = 0; i < len; i++) sum += i & 1 ? p[i] : (uint32_t) (p[i] << 8);
 802de20:	2300      	movs	r3, #0
 802de22:	617b      	str	r3, [r7, #20]
 802de24:	e014      	b.n	802de50 <csumup+0x40>
 802de26:	697b      	ldr	r3, [r7, #20]
 802de28:	f003 0301 	and.w	r3, r3, #1
 802de2c:	2b00      	cmp	r3, #0
 802de2e:	d004      	beq.n	802de3a <csumup+0x2a>
 802de30:	693a      	ldr	r2, [r7, #16]
 802de32:	697b      	ldr	r3, [r7, #20]
 802de34:	4413      	add	r3, r2
 802de36:	781b      	ldrb	r3, [r3, #0]
 802de38:	e004      	b.n	802de44 <csumup+0x34>
 802de3a:	693a      	ldr	r2, [r7, #16]
 802de3c:	697b      	ldr	r3, [r7, #20]
 802de3e:	4413      	add	r3, r2
 802de40:	781b      	ldrb	r3, [r3, #0]
 802de42:	021b      	lsls	r3, r3, #8
 802de44:	68fa      	ldr	r2, [r7, #12]
 802de46:	4413      	add	r3, r2
 802de48:	60fb      	str	r3, [r7, #12]
 802de4a:	697b      	ldr	r3, [r7, #20]
 802de4c:	3301      	adds	r3, #1
 802de4e:	617b      	str	r3, [r7, #20]
 802de50:	697a      	ldr	r2, [r7, #20]
 802de52:	687b      	ldr	r3, [r7, #4]
 802de54:	429a      	cmp	r2, r3
 802de56:	d3e6      	bcc.n	802de26 <csumup+0x16>
  return sum;
 802de58:	68fb      	ldr	r3, [r7, #12]
}
 802de5a:	4618      	mov	r0, r3
 802de5c:	371c      	adds	r7, #28
 802de5e:	46bd      	mov	sp, r7
 802de60:	f85d 7b04 	ldr.w	r7, [sp], #4
 802de64:	4770      	bx	lr

0802de66 <csumfin>:

static uint16_t csumfin(uint32_t sum) {
 802de66:	b580      	push	{r7, lr}
 802de68:	b082      	sub	sp, #8
 802de6a:	af00      	add	r7, sp, #0
 802de6c:	6078      	str	r0, [r7, #4]
  while (sum >> 16) sum = (sum & 0xffff) + (sum >> 16);
 802de6e:	e005      	b.n	802de7c <csumfin+0x16>
 802de70:	687b      	ldr	r3, [r7, #4]
 802de72:	b29a      	uxth	r2, r3
 802de74:	687b      	ldr	r3, [r7, #4]
 802de76:	0c1b      	lsrs	r3, r3, #16
 802de78:	4413      	add	r3, r2
 802de7a:	607b      	str	r3, [r7, #4]
 802de7c:	687b      	ldr	r3, [r7, #4]
 802de7e:	0c1b      	lsrs	r3, r3, #16
 802de80:	2b00      	cmp	r3, #0
 802de82:	d1f5      	bne.n	802de70 <csumfin+0xa>
  return mg_htons(~sum & 0xffff);
 802de84:	687b      	ldr	r3, [r7, #4]
 802de86:	b29b      	uxth	r3, r3
 802de88:	43db      	mvns	r3, r3
 802de8a:	b29b      	uxth	r3, r3
 802de8c:	4618      	mov	r0, r3
 802de8e:	f004 fe4c 	bl	8032b2a <mg_ntohs>
 802de92:	4603      	mov	r3, r0
}
 802de94:	4618      	mov	r0, r3
 802de96:	3708      	adds	r7, #8
 802de98:	46bd      	mov	sp, r7
 802de9a:	bd80      	pop	{r7, pc}

0802de9c <ipcsum>:

static uint16_t ipcsum(const void *buf, size_t len) {
 802de9c:	b580      	push	{r7, lr}
 802de9e:	b084      	sub	sp, #16
 802dea0:	af00      	add	r7, sp, #0
 802dea2:	6078      	str	r0, [r7, #4]
 802dea4:	6039      	str	r1, [r7, #0]
  uint32_t sum = csumup(0, buf, len);
 802dea6:	683a      	ldr	r2, [r7, #0]
 802dea8:	6879      	ldr	r1, [r7, #4]
 802deaa:	2000      	movs	r0, #0
 802deac:	f7ff ffb0 	bl	802de10 <csumup>
 802deb0:	60f8      	str	r0, [r7, #12]
  return csumfin(sum);
 802deb2:	68f8      	ldr	r0, [r7, #12]
 802deb4:	f7ff ffd7 	bl	802de66 <csumfin>
 802deb8:	4603      	mov	r3, r0
}
 802deba:	4618      	mov	r0, r3
 802debc:	3710      	adds	r7, #16
 802debe:	46bd      	mov	sp, r7
 802dec0:	bd80      	pop	{r7, pc}
	...

0802dec4 <settmout>:

static void settmout(struct mg_connection *c, uint8_t type) {
 802dec4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 802dec8:	b088      	sub	sp, #32
 802deca:	af02      	add	r7, sp, #8
 802decc:	6078      	str	r0, [r7, #4]
 802dece:	460b      	mov	r3, r1
 802ded0:	70fb      	strb	r3, [r7, #3]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 802ded2:	687b      	ldr	r3, [r7, #4]
 802ded4:	685b      	ldr	r3, [r3, #4]
 802ded6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802ded8:	617b      	str	r3, [r7, #20]
  struct connstate *s = (struct connstate *) (c + 1);
 802deda:	687b      	ldr	r3, [r7, #4]
 802dedc:	33b0      	adds	r3, #176	@ 0xb0
 802dede:	613b      	str	r3, [r7, #16]
  unsigned n = type == MIP_TTYPE_ACK   ? MIP_TCP_ACK_MS
               : type == MIP_TTYPE_ARP ? MIP_TCP_ARP_MS
 802dee0:	78fb      	ldrb	r3, [r7, #3]
 802dee2:	2b01      	cmp	r3, #1
 802dee4:	d013      	beq.n	802df0e <settmout+0x4a>
 802dee6:	78fb      	ldrb	r3, [r7, #3]
 802dee8:	2b02      	cmp	r3, #2
 802deea:	d00e      	beq.n	802df0a <settmout+0x46>
 802deec:	78fb      	ldrb	r3, [r7, #3]
 802deee:	2b03      	cmp	r3, #3
 802def0:	d008      	beq.n	802df04 <settmout+0x40>
 802def2:	78fb      	ldrb	r3, [r7, #3]
 802def4:	2b04      	cmp	r3, #4
 802def6:	d102      	bne.n	802defe <settmout+0x3a>
 802def8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 802defc:	e008      	b.n	802df10 <settmout+0x4c>
 802defe:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
 802df02:	e005      	b.n	802df10 <settmout+0x4c>
 802df04:	f643 2398 	movw	r3, #15000	@ 0x3a98
 802df08:	e002      	b.n	802df10 <settmout+0x4c>
 802df0a:	2364      	movs	r3, #100	@ 0x64
 802df0c:	e000      	b.n	802df10 <settmout+0x4c>
 802df0e:	2396      	movs	r3, #150	@ 0x96
  unsigned n = type == MIP_TTYPE_ACK   ? MIP_TCP_ACK_MS
 802df10:	60fb      	str	r3, [r7, #12]
               : type == MIP_TTYPE_SYN ? MIP_TCP_SYN_MS
               : type == MIP_TTYPE_FIN ? MIP_TCP_FIN_MS
                                       : MIP_TCP_KEEPALIVE_MS;
  s->timer = ifp->now + n;
 802df12:	697b      	ldr	r3, [r7, #20]
 802df14:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 802df18:	68f9      	ldr	r1, [r7, #12]
 802df1a:	2000      	movs	r0, #0
 802df1c:	460c      	mov	r4, r1
 802df1e:	4605      	mov	r5, r0
 802df20:	eb12 0804 	adds.w	r8, r2, r4
 802df24:	eb43 0905 	adc.w	r9, r3, r5
 802df28:	693b      	ldr	r3, [r7, #16]
 802df2a:	e9c3 8902 	strd	r8, r9, [r3, #8]
  s->ttype = type;
 802df2e:	693b      	ldr	r3, [r7, #16]
 802df30:	78fa      	ldrb	r2, [r7, #3]
 802df32:	779a      	strb	r2, [r3, #30]
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 802df34:	4b0d      	ldr	r3, [pc, #52]	@ (802df6c <settmout+0xa8>)
 802df36:	681b      	ldr	r3, [r3, #0]
 802df38:	2b03      	cmp	r3, #3
 802df3a:	dd12      	ble.n	802df62 <settmout+0x9e>
 802df3c:	4b0c      	ldr	r3, [pc, #48]	@ (802df70 <settmout+0xac>)
 802df3e:	f241 32e8 	movw	r2, #5096	@ 0x13e8
 802df42:	490c      	ldr	r1, [pc, #48]	@ (802df74 <settmout+0xb0>)
 802df44:	2004      	movs	r0, #4
 802df46:	f7fd f949 	bl	802b1dc <mg_log_prefix>
 802df4a:	687b      	ldr	r3, [r7, #4]
 802df4c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 802df4e:	78f8      	ldrb	r0, [r7, #3]
 802df50:	693b      	ldr	r3, [r7, #16]
 802df52:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 802df56:	e9cd 2300 	strd	r2, r3, [sp]
 802df5a:	4602      	mov	r2, r0
 802df5c:	4806      	ldr	r0, [pc, #24]	@ (802df78 <settmout+0xb4>)
 802df5e:	f7fd f98d 	bl	802b27c <mg_log>
}
 802df62:	bf00      	nop
 802df64:	3718      	adds	r7, #24
 802df66:	46bd      	mov	sp, r7
 802df68:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 802df6c:	20000298 	.word	0x20000298
 802df70:	08044608 	.word	0x08044608
 802df74:	08041564 	.word	0x08041564
 802df78:	08042b18 	.word	0x08042b18

0802df7c <ether_output>:

static size_t ether_output(struct mg_tcpip_if *ifp, size_t len) {
 802df7c:	b580      	push	{r7, lr}
 802df7e:	b084      	sub	sp, #16
 802df80:	af00      	add	r7, sp, #0
 802df82:	6078      	str	r0, [r7, #4]
 802df84:	6039      	str	r1, [r7, #0]
  size_t n = ifp->driver->tx(ifp->tx.buf, len, ifp);
 802df86:	687b      	ldr	r3, [r7, #4]
 802df88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802df8a:	685b      	ldr	r3, [r3, #4]
 802df8c:	687a      	ldr	r2, [r7, #4]
 802df8e:	6950      	ldr	r0, [r2, #20]
 802df90:	687a      	ldr	r2, [r7, #4]
 802df92:	6839      	ldr	r1, [r7, #0]
 802df94:	4798      	blx	r3
 802df96:	60f8      	str	r0, [r7, #12]
  if (n == len) ifp->nsent++;
 802df98:	68fa      	ldr	r2, [r7, #12]
 802df9a:	683b      	ldr	r3, [r7, #0]
 802df9c:	429a      	cmp	r2, r3
 802df9e:	d104      	bne.n	802dfaa <ether_output+0x2e>
 802dfa0:	687b      	ldr	r3, [r7, #4]
 802dfa2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 802dfa4:	1c5a      	adds	r2, r3, #1
 802dfa6:	687b      	ldr	r3, [r7, #4]
 802dfa8:	675a      	str	r2, [r3, #116]	@ 0x74
  return n;
 802dfaa:	68fb      	ldr	r3, [r7, #12]
}
 802dfac:	4618      	mov	r0, r3
 802dfae:	3710      	adds	r7, #16
 802dfb0:	46bd      	mov	sp, r7
 802dfb2:	bd80      	pop	{r7, pc}

0802dfb4 <arp_ask>:

static void arp_ask(struct mg_tcpip_if *ifp, uint32_t ip) {
 802dfb4:	b580      	push	{r7, lr}
 802dfb6:	b084      	sub	sp, #16
 802dfb8:	af00      	add	r7, sp, #0
 802dfba:	6078      	str	r0, [r7, #4]
 802dfbc:	6039      	str	r1, [r7, #0]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 802dfbe:	687b      	ldr	r3, [r7, #4]
 802dfc0:	695b      	ldr	r3, [r3, #20]
 802dfc2:	60fb      	str	r3, [r7, #12]
  struct arp *arp = (struct arp *) (eth + 1);
 802dfc4:	68fb      	ldr	r3, [r7, #12]
 802dfc6:	330e      	adds	r3, #14
 802dfc8:	60bb      	str	r3, [r7, #8]
  memset(eth->dst, 255, sizeof(eth->dst));
 802dfca:	68fb      	ldr	r3, [r7, #12]
 802dfcc:	2206      	movs	r2, #6
 802dfce:	21ff      	movs	r1, #255	@ 0xff
 802dfd0:	4618      	mov	r0, r3
 802dfd2:	f007 ff0d 	bl	8035df0 <memset>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));
 802dfd6:	68fb      	ldr	r3, [r7, #12]
 802dfd8:	3306      	adds	r3, #6
 802dfda:	6879      	ldr	r1, [r7, #4]
 802dfdc:	2206      	movs	r2, #6
 802dfde:	4618      	mov	r0, r3
 802dfe0:	f009 f942 	bl	8037268 <memcpy>
  eth->type = mg_htons(0x806);
 802dfe4:	f640 0006 	movw	r0, #2054	@ 0x806
 802dfe8:	f004 fd9f 	bl	8032b2a <mg_ntohs>
 802dfec:	4603      	mov	r3, r0
 802dfee:	461a      	mov	r2, r3
 802dff0:	68fb      	ldr	r3, [r7, #12]
 802dff2:	819a      	strh	r2, [r3, #12]
  memset(arp, 0, sizeof(*arp));
 802dff4:	221c      	movs	r2, #28
 802dff6:	2100      	movs	r1, #0
 802dff8:	68b8      	ldr	r0, [r7, #8]
 802dffa:	f007 fef9 	bl	8035df0 <memset>
  arp->fmt = mg_htons(1), arp->pro = mg_htons(0x800), arp->hlen = 6,
 802dffe:	2001      	movs	r0, #1
 802e000:	f004 fd93 	bl	8032b2a <mg_ntohs>
 802e004:	4603      	mov	r3, r0
 802e006:	461a      	mov	r2, r3
 802e008:	68bb      	ldr	r3, [r7, #8]
 802e00a:	801a      	strh	r2, [r3, #0]
 802e00c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 802e010:	f004 fd8b 	bl	8032b2a <mg_ntohs>
 802e014:	4603      	mov	r3, r0
 802e016:	461a      	mov	r2, r3
 802e018:	68bb      	ldr	r3, [r7, #8]
 802e01a:	805a      	strh	r2, [r3, #2]
 802e01c:	68bb      	ldr	r3, [r7, #8]
 802e01e:	2206      	movs	r2, #6
 802e020:	711a      	strb	r2, [r3, #4]
  arp->plen = 4;
 802e022:	68bb      	ldr	r3, [r7, #8]
 802e024:	2204      	movs	r2, #4
 802e026:	715a      	strb	r2, [r3, #5]
  arp->op = mg_htons(1), arp->tpa = ip, arp->spa = ifp->ip;
 802e028:	2001      	movs	r0, #1
 802e02a:	f004 fd7e 	bl	8032b2a <mg_ntohs>
 802e02e:	4603      	mov	r3, r0
 802e030:	461a      	mov	r2, r3
 802e032:	68bb      	ldr	r3, [r7, #8]
 802e034:	80da      	strh	r2, [r3, #6]
 802e036:	68bb      	ldr	r3, [r7, #8]
 802e038:	683a      	ldr	r2, [r7, #0]
 802e03a:	619a      	str	r2, [r3, #24]
 802e03c:	687b      	ldr	r3, [r7, #4]
 802e03e:	689a      	ldr	r2, [r3, #8]
 802e040:	68bb      	ldr	r3, [r7, #8]
 802e042:	f8c3 200e 	str.w	r2, [r3, #14]
  memcpy(arp->sha, ifp->mac, sizeof(arp->sha));
 802e046:	68bb      	ldr	r3, [r7, #8]
 802e048:	3308      	adds	r3, #8
 802e04a:	6879      	ldr	r1, [r7, #4]
 802e04c:	2206      	movs	r2, #6
 802e04e:	4618      	mov	r0, r3
 802e050:	f009 f90a 	bl	8037268 <memcpy>
  ether_output(ifp, PDIFF(eth, arp + 1));
 802e054:	68bb      	ldr	r3, [r7, #8]
 802e056:	f103 021c 	add.w	r2, r3, #28
 802e05a:	68fb      	ldr	r3, [r7, #12]
 802e05c:	1ad3      	subs	r3, r2, r3
 802e05e:	4619      	mov	r1, r3
 802e060:	6878      	ldr	r0, [r7, #4]
 802e062:	f7ff ff8b 	bl	802df7c <ether_output>
}
 802e066:	bf00      	nop
 802e068:	3710      	adds	r7, #16
 802e06a:	46bd      	mov	sp, r7
 802e06c:	bd80      	pop	{r7, pc}
	...

0802e070 <onstatechange>:

static void onstatechange(struct mg_tcpip_if *ifp) {
 802e070:	b580      	push	{r7, lr}
 802e072:	b082      	sub	sp, #8
 802e074:	af00      	add	r7, sp, #0
 802e076:	6078      	str	r0, [r7, #4]
  if (ifp->state == MG_TCPIP_STATE_READY) {
 802e078:	687b      	ldr	r3, [r7, #4]
 802e07a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 802e07e:	2b03      	cmp	r3, #3
 802e080:	d13b      	bne.n	802e0fa <onstatechange+0x8a>
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 802e082:	4b3b      	ldr	r3, [pc, #236]	@ (802e170 <onstatechange+0x100>)
 802e084:	681b      	ldr	r3, [r3, #0]
 802e086:	2b01      	cmp	r3, #1
 802e088:	dd0d      	ble.n	802e0a6 <onstatechange+0x36>
 802e08a:	4b3a      	ldr	r3, [pc, #232]	@ (802e174 <onstatechange+0x104>)
 802e08c:	f241 4201 	movw	r2, #5121	@ 0x1401
 802e090:	4939      	ldr	r1, [pc, #228]	@ (802e178 <onstatechange+0x108>)
 802e092:	2002      	movs	r0, #2
 802e094:	f7fd f8a2 	bl	802b1dc <mg_log_prefix>
 802e098:	687b      	ldr	r3, [r7, #4]
 802e09a:	3308      	adds	r3, #8
 802e09c:	461a      	mov	r2, r3
 802e09e:	4937      	ldr	r1, [pc, #220]	@ (802e17c <onstatechange+0x10c>)
 802e0a0:	4837      	ldr	r0, [pc, #220]	@ (802e180 <onstatechange+0x110>)
 802e0a2:	f7fd f8eb 	bl	802b27c <mg_log>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 802e0a6:	4b32      	ldr	r3, [pc, #200]	@ (802e170 <onstatechange+0x100>)
 802e0a8:	681b      	ldr	r3, [r3, #0]
 802e0aa:	2b01      	cmp	r3, #1
 802e0ac:	dd0d      	ble.n	802e0ca <onstatechange+0x5a>
 802e0ae:	4b31      	ldr	r3, [pc, #196]	@ (802e174 <onstatechange+0x104>)
 802e0b0:	f241 4202 	movw	r2, #5122	@ 0x1402
 802e0b4:	4930      	ldr	r1, [pc, #192]	@ (802e178 <onstatechange+0x108>)
 802e0b6:	2002      	movs	r0, #2
 802e0b8:	f7fd f890 	bl	802b1dc <mg_log_prefix>
 802e0bc:	687b      	ldr	r3, [r7, #4]
 802e0be:	3310      	adds	r3, #16
 802e0c0:	461a      	mov	r2, r3
 802e0c2:	492e      	ldr	r1, [pc, #184]	@ (802e17c <onstatechange+0x10c>)
 802e0c4:	482f      	ldr	r0, [pc, #188]	@ (802e184 <onstatechange+0x114>)
 802e0c6:	f7fd f8d9 	bl	802b27c <mg_log>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 802e0ca:	4b29      	ldr	r3, [pc, #164]	@ (802e170 <onstatechange+0x100>)
 802e0cc:	681b      	ldr	r3, [r3, #0]
 802e0ce:	2b01      	cmp	r3, #1
 802e0d0:	dd0c      	ble.n	802e0ec <onstatechange+0x7c>
 802e0d2:	4b28      	ldr	r3, [pc, #160]	@ (802e174 <onstatechange+0x104>)
 802e0d4:	f241 4203 	movw	r2, #5123	@ 0x1403
 802e0d8:	4927      	ldr	r1, [pc, #156]	@ (802e178 <onstatechange+0x108>)
 802e0da:	2002      	movs	r0, #2
 802e0dc:	f7fd f87e 	bl	802b1dc <mg_log_prefix>
 802e0e0:	687b      	ldr	r3, [r7, #4]
 802e0e2:	461a      	mov	r2, r3
 802e0e4:	4928      	ldr	r1, [pc, #160]	@ (802e188 <onstatechange+0x118>)
 802e0e6:	4829      	ldr	r0, [pc, #164]	@ (802e18c <onstatechange+0x11c>)
 802e0e8:	f7fd f8c8 	bl	802b27c <mg_log>
    arp_ask(ifp, ifp->gw);  // unsolicited GW ARP request
 802e0ec:	687b      	ldr	r3, [r7, #4]
 802e0ee:	691b      	ldr	r3, [r3, #16]
 802e0f0:	4619      	mov	r1, r3
 802e0f2:	6878      	ldr	r0, [r7, #4]
 802e0f4:	f7ff ff5e 	bl	802dfb4 <arp_ask>
 802e0f8:	e02e      	b.n	802e158 <onstatechange+0xe8>
  } else if (ifp->state == MG_TCPIP_STATE_UP) {
 802e0fa:	687b      	ldr	r3, [r7, #4]
 802e0fc:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 802e100:	2b01      	cmp	r3, #1
 802e102:	d116      	bne.n	802e132 <onstatechange+0xc2>
    MG_ERROR(("Link up"));
 802e104:	4b1a      	ldr	r3, [pc, #104]	@ (802e170 <onstatechange+0x100>)
 802e106:	681b      	ldr	r3, [r3, #0]
 802e108:	2b00      	cmp	r3, #0
 802e10a:	dd09      	ble.n	802e120 <onstatechange+0xb0>
 802e10c:	4b19      	ldr	r3, [pc, #100]	@ (802e174 <onstatechange+0x104>)
 802e10e:	f241 4206 	movw	r2, #5126	@ 0x1406
 802e112:	4919      	ldr	r1, [pc, #100]	@ (802e178 <onstatechange+0x108>)
 802e114:	2001      	movs	r0, #1
 802e116:	f7fd f861 	bl	802b1dc <mg_log_prefix>
 802e11a:	481d      	ldr	r0, [pc, #116]	@ (802e190 <onstatechange+0x120>)
 802e11c:	f7fd f8ae 	bl	802b27c <mg_log>
    srand((unsigned int) mg_millis());
 802e120:	f004 fd94 	bl	8032c4c <mg_millis>
 802e124:	4602      	mov	r2, r0
 802e126:	460b      	mov	r3, r1
 802e128:	4613      	mov	r3, r2
 802e12a:	4618      	mov	r0, r3
 802e12c:	f007 f910 	bl	8035350 <srand>
 802e130:	e012      	b.n	802e158 <onstatechange+0xe8>
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
 802e132:	687b      	ldr	r3, [r7, #4]
 802e134:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 802e138:	2b00      	cmp	r3, #0
 802e13a:	d10d      	bne.n	802e158 <onstatechange+0xe8>
    MG_ERROR(("Link down"));
 802e13c:	4b0c      	ldr	r3, [pc, #48]	@ (802e170 <onstatechange+0x100>)
 802e13e:	681b      	ldr	r3, [r3, #0]
 802e140:	2b00      	cmp	r3, #0
 802e142:	dd09      	ble.n	802e158 <onstatechange+0xe8>
 802e144:	4b0b      	ldr	r3, [pc, #44]	@ (802e174 <onstatechange+0x104>)
 802e146:	f241 4209 	movw	r2, #5129	@ 0x1409
 802e14a:	490b      	ldr	r1, [pc, #44]	@ (802e178 <onstatechange+0x108>)
 802e14c:	2001      	movs	r0, #1
 802e14e:	f7fd f845 	bl	802b1dc <mg_log_prefix>
 802e152:	4810      	ldr	r0, [pc, #64]	@ (802e194 <onstatechange+0x124>)
 802e154:	f7fd f892 	bl	802b27c <mg_log>
  }
  mg_tcpip_call(ifp, MG_TCPIP_EV_ST_CHG, &ifp->state);
 802e158:	687b      	ldr	r3, [r7, #4]
 802e15a:	337c      	adds	r3, #124	@ 0x7c
 802e15c:	461a      	mov	r2, r3
 802e15e:	2100      	movs	r1, #0
 802e160:	6878      	ldr	r0, [r7, #4]
 802e162:	f7ff fe23 	bl	802ddac <mg_tcpip_call>
}
 802e166:	bf00      	nop
 802e168:	3708      	adds	r7, #8
 802e16a:	46bd      	mov	sp, r7
 802e16c:	bd80      	pop	{r7, pc}
 802e16e:	bf00      	nop
 802e170:	20000298 	.word	0x20000298
 802e174:	08044614 	.word	0x08044614
 802e178:	08041564 	.word	0x08041564
 802e17c:	080313cd 	.word	0x080313cd
 802e180:	08042b28 	.word	0x08042b28
 802e184:	08042b38 	.word	0x08042b38
 802e188:	08031491 	.word	0x08031491
 802e18c:	08042b48 	.word	0x08042b48
 802e190:	08042b58 	.word	0x08042b58
 802e194:	08042b60 	.word	0x08042b60

0802e198 <tx_ip>:

static struct ip *tx_ip(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                        uint8_t proto, uint32_t ip_src, uint32_t ip_dst,
                        size_t plen) {
 802e198:	b580      	push	{r7, lr}
 802e19a:	b086      	sub	sp, #24
 802e19c:	af00      	add	r7, sp, #0
 802e19e:	60f8      	str	r0, [r7, #12]
 802e1a0:	60b9      	str	r1, [r7, #8]
 802e1a2:	603b      	str	r3, [r7, #0]
 802e1a4:	4613      	mov	r3, r2
 802e1a6:	71fb      	strb	r3, [r7, #7]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 802e1a8:	68fb      	ldr	r3, [r7, #12]
 802e1aa:	695b      	ldr	r3, [r3, #20]
 802e1ac:	617b      	str	r3, [r7, #20]
  struct ip *ip = (struct ip *) (eth + 1);
 802e1ae:	697b      	ldr	r3, [r7, #20]
 802e1b0:	330e      	adds	r3, #14
 802e1b2:	613b      	str	r3, [r7, #16]
  memcpy(eth->dst, mac_dst, sizeof(eth->dst));
 802e1b4:	697b      	ldr	r3, [r7, #20]
 802e1b6:	2206      	movs	r2, #6
 802e1b8:	68b9      	ldr	r1, [r7, #8]
 802e1ba:	4618      	mov	r0, r3
 802e1bc:	f009 f854 	bl	8037268 <memcpy>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));  // Use our MAC
 802e1c0:	697b      	ldr	r3, [r7, #20]
 802e1c2:	3306      	adds	r3, #6
 802e1c4:	68f9      	ldr	r1, [r7, #12]
 802e1c6:	2206      	movs	r2, #6
 802e1c8:	4618      	mov	r0, r3
 802e1ca:	f009 f84d 	bl	8037268 <memcpy>
  eth->type = mg_htons(0x800);
 802e1ce:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 802e1d2:	f004 fcaa 	bl	8032b2a <mg_ntohs>
 802e1d6:	4603      	mov	r3, r0
 802e1d8:	461a      	mov	r2, r3
 802e1da:	697b      	ldr	r3, [r7, #20]
 802e1dc:	819a      	strh	r2, [r3, #12]
  memset(ip, 0, sizeof(*ip));
 802e1de:	2214      	movs	r2, #20
 802e1e0:	2100      	movs	r1, #0
 802e1e2:	6938      	ldr	r0, [r7, #16]
 802e1e4:	f007 fe04 	bl	8035df0 <memset>
  ip->ver = 0x45;   // Version 4, header length 5 words
 802e1e8:	693b      	ldr	r3, [r7, #16]
 802e1ea:	2245      	movs	r2, #69	@ 0x45
 802e1ec:	701a      	strb	r2, [r3, #0]
  ip->frag = 0x40;  // Don't fragment
 802e1ee:	693b      	ldr	r3, [r7, #16]
 802e1f0:	2200      	movs	r2, #0
 802e1f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 802e1f6:	719a      	strb	r2, [r3, #6]
 802e1f8:	2200      	movs	r2, #0
 802e1fa:	71da      	strb	r2, [r3, #7]
  ip->len = mg_htons((uint16_t) (sizeof(*ip) + plen));
 802e1fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802e1fe:	b29b      	uxth	r3, r3
 802e200:	3314      	adds	r3, #20
 802e202:	b29b      	uxth	r3, r3
 802e204:	4618      	mov	r0, r3
 802e206:	f004 fc90 	bl	8032b2a <mg_ntohs>
 802e20a:	4603      	mov	r3, r0
 802e20c:	461a      	mov	r2, r3
 802e20e:	693b      	ldr	r3, [r7, #16]
 802e210:	805a      	strh	r2, [r3, #2]
  ip->ttl = 64;
 802e212:	693b      	ldr	r3, [r7, #16]
 802e214:	2240      	movs	r2, #64	@ 0x40
 802e216:	721a      	strb	r2, [r3, #8]
  ip->proto = proto;
 802e218:	693b      	ldr	r3, [r7, #16]
 802e21a:	79fa      	ldrb	r2, [r7, #7]
 802e21c:	725a      	strb	r2, [r3, #9]
  ip->src = ip_src;
 802e21e:	693b      	ldr	r3, [r7, #16]
 802e220:	683a      	ldr	r2, [r7, #0]
 802e222:	60da      	str	r2, [r3, #12]
  ip->dst = ip_dst;
 802e224:	693b      	ldr	r3, [r7, #16]
 802e226:	6a3a      	ldr	r2, [r7, #32]
 802e228:	611a      	str	r2, [r3, #16]
  ip->csum = ipcsum(ip, sizeof(*ip));
 802e22a:	2114      	movs	r1, #20
 802e22c:	6938      	ldr	r0, [r7, #16]
 802e22e:	f7ff fe35 	bl	802de9c <ipcsum>
 802e232:	4603      	mov	r3, r0
 802e234:	461a      	mov	r2, r3
 802e236:	693b      	ldr	r3, [r7, #16]
 802e238:	815a      	strh	r2, [r3, #10]
  return ip;
 802e23a:	693b      	ldr	r3, [r7, #16]
}
 802e23c:	4618      	mov	r0, r3
 802e23e:	3718      	adds	r7, #24
 802e240:	46bd      	mov	sp, r7
 802e242:	bd80      	pop	{r7, pc}

0802e244 <tx_udp>:

static void tx_udp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                   uint16_t sport, uint32_t ip_dst, uint16_t dport,
                   const void *buf, size_t len) {
 802e244:	b580      	push	{r7, lr}
 802e246:	b08a      	sub	sp, #40	@ 0x28
 802e248:	af02      	add	r7, sp, #8
 802e24a:	60f8      	str	r0, [r7, #12]
 802e24c:	60b9      	str	r1, [r7, #8]
 802e24e:	607a      	str	r2, [r7, #4]
 802e250:	807b      	strh	r3, [r7, #2]
  struct ip *ip =
      tx_ip(ifp, mac_dst, 17, ip_src, ip_dst, len + sizeof(struct udp));
 802e252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802e254:	3308      	adds	r3, #8
 802e256:	9301      	str	r3, [sp, #4]
 802e258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802e25a:	9300      	str	r3, [sp, #0]
 802e25c:	687b      	ldr	r3, [r7, #4]
 802e25e:	2211      	movs	r2, #17
 802e260:	68b9      	ldr	r1, [r7, #8]
 802e262:	68f8      	ldr	r0, [r7, #12]
 802e264:	f7ff ff98 	bl	802e198 <tx_ip>
 802e268:	61f8      	str	r0, [r7, #28]
  struct udp *udp = (struct udp *) (ip + 1);
 802e26a:	69fb      	ldr	r3, [r7, #28]
 802e26c:	3314      	adds	r3, #20
 802e26e:	61bb      	str	r3, [r7, #24]
  // MG_DEBUG(("UDP XX LEN %d %d", (int) len, (int) ifp->tx.len));
  udp->sport = sport;
 802e270:	69bb      	ldr	r3, [r7, #24]
 802e272:	887a      	ldrh	r2, [r7, #2]
 802e274:	801a      	strh	r2, [r3, #0]
  udp->dport = dport;
 802e276:	69bb      	ldr	r3, [r7, #24]
 802e278:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 802e27a:	805a      	strh	r2, [r3, #2]
  udp->len = mg_htons((uint16_t) (sizeof(*udp) + len));
 802e27c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802e27e:	b29b      	uxth	r3, r3
 802e280:	3308      	adds	r3, #8
 802e282:	b29b      	uxth	r3, r3
 802e284:	4618      	mov	r0, r3
 802e286:	f004 fc50 	bl	8032b2a <mg_ntohs>
 802e28a:	4603      	mov	r3, r0
 802e28c:	461a      	mov	r2, r3
 802e28e:	69bb      	ldr	r3, [r7, #24]
 802e290:	809a      	strh	r2, [r3, #4]
  udp->csum = 0;
 802e292:	69bb      	ldr	r3, [r7, #24]
 802e294:	2200      	movs	r2, #0
 802e296:	719a      	strb	r2, [r3, #6]
 802e298:	2200      	movs	r2, #0
 802e29a:	71da      	strb	r2, [r3, #7]
  uint32_t cs = csumup(0, udp, sizeof(*udp));
 802e29c:	2208      	movs	r2, #8
 802e29e:	69b9      	ldr	r1, [r7, #24]
 802e2a0:	2000      	movs	r0, #0
 802e2a2:	f7ff fdb5 	bl	802de10 <csumup>
 802e2a6:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, buf, len);
 802e2a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802e2aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 802e2ac:	6978      	ldr	r0, [r7, #20]
 802e2ae:	f7ff fdaf 	bl	802de10 <csumup>
 802e2b2:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 802e2b4:	69fb      	ldr	r3, [r7, #28]
 802e2b6:	330c      	adds	r3, #12
 802e2b8:	2204      	movs	r2, #4
 802e2ba:	4619      	mov	r1, r3
 802e2bc:	6978      	ldr	r0, [r7, #20]
 802e2be:	f7ff fda7 	bl	802de10 <csumup>
 802e2c2:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 802e2c4:	69fb      	ldr	r3, [r7, #28]
 802e2c6:	3310      	adds	r3, #16
 802e2c8:	2204      	movs	r2, #4
 802e2ca:	4619      	mov	r1, r3
 802e2cc:	6978      	ldr	r0, [r7, #20]
 802e2ce:	f7ff fd9f 	bl	802de10 <csumup>
 802e2d2:	6178      	str	r0, [r7, #20]
  cs += (uint32_t) (ip->proto + sizeof(*udp) + len);
 802e2d4:	69fb      	ldr	r3, [r7, #28]
 802e2d6:	7a5b      	ldrb	r3, [r3, #9]
 802e2d8:	461a      	mov	r2, r3
 802e2da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802e2dc:	441a      	add	r2, r3
 802e2de:	697b      	ldr	r3, [r7, #20]
 802e2e0:	4413      	add	r3, r2
 802e2e2:	3308      	adds	r3, #8
 802e2e4:	617b      	str	r3, [r7, #20]
  udp->csum = csumfin(cs);
 802e2e6:	6978      	ldr	r0, [r7, #20]
 802e2e8:	f7ff fdbd 	bl	802de66 <csumfin>
 802e2ec:	4603      	mov	r3, r0
 802e2ee:	461a      	mov	r2, r3
 802e2f0:	69bb      	ldr	r3, [r7, #24]
 802e2f2:	80da      	strh	r2, [r3, #6]
  memmove(udp + 1, buf, len);
 802e2f4:	69bb      	ldr	r3, [r7, #24]
 802e2f6:	3308      	adds	r3, #8
 802e2f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802e2fa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 802e2fc:	4618      	mov	r0, r3
 802e2fe:	f007 fd5d 	bl	8035dbc <memmove>
  // MG_DEBUG(("UDP LEN %d %d", (int) len, (int) ifp->frame_len));
  ether_output(ifp, sizeof(struct eth) + sizeof(*ip) + sizeof(*udp) + len);
 802e302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802e304:	332a      	adds	r3, #42	@ 0x2a
 802e306:	4619      	mov	r1, r3
 802e308:	68f8      	ldr	r0, [r7, #12]
 802e30a:	f7ff fe37 	bl	802df7c <ether_output>
}
 802e30e:	bf00      	nop
 802e310:	3720      	adds	r7, #32
 802e312:	46bd      	mov	sp, r7
 802e314:	bd80      	pop	{r7, pc}
	...

0802e318 <tx_dhcp>:

static void tx_dhcp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                    uint32_t ip_dst, uint8_t *opts, size_t optslen,
                    bool ciaddr) {
 802e318:	b5b0      	push	{r4, r5, r7, lr}
 802e31a:	b0cc      	sub	sp, #304	@ 0x130
 802e31c:	af04      	add	r7, sp, #16
 802e31e:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 802e322:	f5a4 748a 	sub.w	r4, r4, #276	@ 0x114
 802e326:	6020      	str	r0, [r4, #0]
 802e328:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 802e32c:	f5a0 708c 	sub.w	r0, r0, #280	@ 0x118
 802e330:	6001      	str	r1, [r0, #0]
 802e332:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 802e336:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 802e33a:	600a      	str	r2, [r1, #0]
 802e33c:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 802e340:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 802e344:	6013      	str	r3, [r2, #0]
  // https://datatracker.ietf.org/doc/html/rfc2132#section-9.6
  struct dhcp dhcp = {1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 802e346:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 802e34a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 802e34e:	4a38      	ldr	r2, [pc, #224]	@ (802e430 <tx_dhcp+0x118>)
 802e350:	4618      	mov	r0, r3
 802e352:	4611      	mov	r1, r2
 802e354:	f44f 7388 	mov.w	r3, #272	@ 0x110
 802e358:	461a      	mov	r2, r3
 802e35a:	f008 ff85 	bl	8037268 <memcpy>
  dhcp.magic = mg_htonl(0x63825363);
 802e35e:	4835      	ldr	r0, [pc, #212]	@ (802e434 <tx_dhcp+0x11c>)
 802e360:	f004 fbca 	bl	8032af8 <mg_ntohl>
 802e364:	4602      	mov	r2, r0
 802e366:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 802e36a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 802e36e:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  memcpy(&dhcp.hwaddr, ifp->mac, sizeof(ifp->mac));
 802e372:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 802e376:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 802e37a:	6819      	ldr	r1, [r3, #0]
 802e37c:	f107 0310 	add.w	r3, r7, #16
 802e380:	331c      	adds	r3, #28
 802e382:	2206      	movs	r2, #6
 802e384:	4618      	mov	r0, r3
 802e386:	f008 ff6f 	bl	8037268 <memcpy>
  memcpy(&dhcp.xid, ifp->mac + 2, sizeof(dhcp.xid));
 802e38a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 802e38e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 802e392:	681b      	ldr	r3, [r3, #0]
 802e394:	3302      	adds	r3, #2
 802e396:	681b      	ldr	r3, [r3, #0]
 802e398:	461a      	mov	r2, r3
 802e39a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 802e39e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 802e3a2:	605a      	str	r2, [r3, #4]
  memcpy(&dhcp.options, opts, optslen);
 802e3a4:	f107 0310 	add.w	r3, r7, #16
 802e3a8:	33f0      	adds	r3, #240	@ 0xf0
 802e3aa:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 802e3ae:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 802e3b2:	4618      	mov	r0, r3
 802e3b4:	f008 ff58 	bl	8037268 <memcpy>
  if (ciaddr) dhcp.ciaddr = ip_src;
 802e3b8:	f897 3138 	ldrb.w	r3, [r7, #312]	@ 0x138
 802e3bc:	2b00      	cmp	r3, #0
 802e3be:	d009      	beq.n	802e3d4 <tx_dhcp+0xbc>
 802e3c0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 802e3c4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 802e3c8:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 802e3cc:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 802e3d0:	6812      	ldr	r2, [r2, #0]
 802e3d2:	60da      	str	r2, [r3, #12]
  tx_udp(ifp, mac_dst, ip_src, mg_htons(68), ip_dst, mg_htons(67), &dhcp,
 802e3d4:	2044      	movs	r0, #68	@ 0x44
 802e3d6:	f004 fba8 	bl	8032b2a <mg_ntohs>
 802e3da:	4603      	mov	r3, r0
 802e3dc:	461d      	mov	r5, r3
 802e3de:	2043      	movs	r0, #67	@ 0x43
 802e3e0:	f004 fba3 	bl	8032b2a <mg_ntohs>
 802e3e4:	4603      	mov	r3, r0
 802e3e6:	461c      	mov	r4, r3
 802e3e8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 802e3ec:	f5a3 728e 	sub.w	r2, r3, #284	@ 0x11c
 802e3f0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 802e3f4:	f5a3 718c 	sub.w	r1, r3, #280	@ 0x118
 802e3f8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 802e3fc:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 802e400:	f44f 7388 	mov.w	r3, #272	@ 0x110
 802e404:	9303      	str	r3, [sp, #12]
 802e406:	f107 0310 	add.w	r3, r7, #16
 802e40a:	9302      	str	r3, [sp, #8]
 802e40c:	9401      	str	r4, [sp, #4]
 802e40e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 802e412:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 802e416:	681b      	ldr	r3, [r3, #0]
 802e418:	9300      	str	r3, [sp, #0]
 802e41a:	462b      	mov	r3, r5
 802e41c:	6812      	ldr	r2, [r2, #0]
 802e41e:	6809      	ldr	r1, [r1, #0]
 802e420:	6800      	ldr	r0, [r0, #0]
 802e422:	f7ff ff0f 	bl	802e244 <tx_udp>
         sizeof(dhcp));
}
 802e426:	bf00      	nop
 802e428:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 802e42c:	46bd      	mov	sp, r7
 802e42e:	bdb0      	pop	{r4, r5, r7, pc}
 802e430:	08042b6c 	.word	0x08042b6c
 802e434:	63825363 	.word	0x63825363

0802e438 <tx_dhcp_request_sel>:

static const uint8_t broadcast[] = {255, 255, 255, 255, 255, 255};

// RFC-2131 #4.3.6, #4.4.1; RFC-2132 #9.8
static void tx_dhcp_request_sel(struct mg_tcpip_if *ifp, uint32_t ip_req,
                                uint32_t ip_srv) {
 802e438:	b5b0      	push	{r4, r5, r7, lr}
 802e43a:	b090      	sub	sp, #64	@ 0x40
 802e43c:	af04      	add	r7, sp, #16
 802e43e:	60f8      	str	r0, [r7, #12]
 802e440:	60b9      	str	r1, [r7, #8]
 802e442:	607a      	str	r2, [r7, #4]
  uint8_t opts[] = {
 802e444:	4b31      	ldr	r3, [pc, #196]	@ (802e50c <tx_dhcp_request_sel+0xd4>)
 802e446:	f107 0414 	add.w	r4, r7, #20
 802e44a:	461d      	mov	r5, r3
 802e44c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802e44e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802e450:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 802e454:	c403      	stmia	r4!, {r0, r1}
 802e456:	8022      	strh	r2, [r4, #0]
 802e458:	3402      	adds	r4, #2
 802e45a:	0c13      	lsrs	r3, r2, #16
 802e45c:	7023      	strb	r3, [r4, #0]
      54, 4, 0,   0,   0,   0,    // DHCP server ID
      50, 4, 0,   0,   0,   0,    // Requested IP
      55, 2, 1,   3,   255, 255,  // GW, mask [DNS] [SNTP]
      255                         // End of options
  };
  uint8_t addopts = 0;
 802e45e:	2300      	movs	r3, #0
 802e460:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  memcpy(opts + 10, &ip_srv, sizeof(ip_srv));
 802e464:	f107 0314 	add.w	r3, r7, #20
 802e468:	330a      	adds	r3, #10
 802e46a:	687a      	ldr	r2, [r7, #4]
 802e46c:	601a      	str	r2, [r3, #0]
  memcpy(opts + 16, &ip_req, sizeof(ip_req));
 802e46e:	f107 0314 	add.w	r3, r7, #20
 802e472:	3310      	adds	r3, #16
 802e474:	68ba      	ldr	r2, [r7, #8]
 802e476:	601a      	str	r2, [r3, #0]
  if (ifp->enable_req_dns) opts[24 + addopts++] = 6;    // DNS
 802e478:	68fb      	ldr	r3, [r7, #12]
 802e47a:	7fdb      	ldrb	r3, [r3, #31]
 802e47c:	2b00      	cmp	r3, #0
 802e47e:	d00a      	beq.n	802e496 <tx_dhcp_request_sel+0x5e>
 802e480:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 802e484:	1c5a      	adds	r2, r3, #1
 802e486:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 802e48a:	3318      	adds	r3, #24
 802e48c:	3330      	adds	r3, #48	@ 0x30
 802e48e:	443b      	add	r3, r7
 802e490:	2206      	movs	r2, #6
 802e492:	f803 2c1c 	strb.w	r2, [r3, #-28]
  if (ifp->enable_req_sntp) opts[24 + addopts++] = 42;  // SNTP
 802e496:	68fb      	ldr	r3, [r7, #12]
 802e498:	f893 3020 	ldrb.w	r3, [r3, #32]
 802e49c:	2b00      	cmp	r3, #0
 802e49e:	d00a      	beq.n	802e4b6 <tx_dhcp_request_sel+0x7e>
 802e4a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 802e4a4:	1c5a      	adds	r2, r3, #1
 802e4a6:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 802e4aa:	3318      	adds	r3, #24
 802e4ac:	3330      	adds	r3, #48	@ 0x30
 802e4ae:	443b      	add	r3, r7
 802e4b0:	222a      	movs	r2, #42	@ 0x2a
 802e4b2:	f803 2c1c 	strb.w	r2, [r3, #-28]
  opts[21] += addopts;
 802e4b6:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 802e4ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 802e4be:	4413      	add	r3, r2
 802e4c0:	b2db      	uxtb	r3, r3
 802e4c2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts,
 802e4c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 802e4ca:	3319      	adds	r3, #25
 802e4cc:	2200      	movs	r2, #0
 802e4ce:	9202      	str	r2, [sp, #8]
 802e4d0:	9301      	str	r3, [sp, #4]
 802e4d2:	f107 0314 	add.w	r3, r7, #20
 802e4d6:	9300      	str	r3, [sp, #0]
 802e4d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802e4dc:	2200      	movs	r2, #0
 802e4de:	490c      	ldr	r1, [pc, #48]	@ (802e510 <tx_dhcp_request_sel+0xd8>)
 802e4e0:	68f8      	ldr	r0, [r7, #12]
 802e4e2:	f7ff ff19 	bl	802e318 <tx_dhcp>
          sizeof(opts) + addopts - 2, false);
  MG_DEBUG(("DHCP req sent"));
 802e4e6:	4b0b      	ldr	r3, [pc, #44]	@ (802e514 <tx_dhcp_request_sel+0xdc>)
 802e4e8:	681b      	ldr	r3, [r3, #0]
 802e4ea:	2b02      	cmp	r3, #2
 802e4ec:	dd09      	ble.n	802e502 <tx_dhcp_request_sel+0xca>
 802e4ee:	4b0a      	ldr	r3, [pc, #40]	@ (802e518 <tx_dhcp_request_sel+0xe0>)
 802e4f0:	f241 425b 	movw	r2, #5211	@ 0x145b
 802e4f4:	4909      	ldr	r1, [pc, #36]	@ (802e51c <tx_dhcp_request_sel+0xe4>)
 802e4f6:	2003      	movs	r0, #3
 802e4f8:	f7fc fe70 	bl	802b1dc <mg_log_prefix>
 802e4fc:	4808      	ldr	r0, [pc, #32]	@ (802e520 <tx_dhcp_request_sel+0xe8>)
 802e4fe:	f7fc febd 	bl	802b27c <mg_log>
}
 802e502:	bf00      	nop
 802e504:	3730      	adds	r7, #48	@ 0x30
 802e506:	46bd      	mov	sp, r7
 802e508:	bdb0      	pop	{r4, r5, r7, pc}
 802e50a:	bf00      	nop
 802e50c:	08042c8c 	.word	0x08042c8c
 802e510:	08044548 	.word	0x08044548
 802e514:	20000298 	.word	0x20000298
 802e518:	08044624 	.word	0x08044624
 802e51c:	08041564 	.word	0x08041564
 802e520:	08042c7c 	.word	0x08042c7c

0802e524 <tx_dhcp_request_re>:

// RFC-2131 #4.3.6, #4.4.5 (renewing: unicast, rebinding: bcast)
static void tx_dhcp_request_re(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                               uint32_t ip_src, uint32_t ip_dst) {
 802e524:	b580      	push	{r7, lr}
 802e526:	b08a      	sub	sp, #40	@ 0x28
 802e528:	af04      	add	r7, sp, #16
 802e52a:	60f8      	str	r0, [r7, #12]
 802e52c:	60b9      	str	r1, [r7, #8]
 802e52e:	607a      	str	r2, [r7, #4]
 802e530:	603b      	str	r3, [r7, #0]
  uint8_t opts[] = {
 802e532:	4b10      	ldr	r3, [pc, #64]	@ (802e574 <tx_dhcp_request_re+0x50>)
 802e534:	617b      	str	r3, [r7, #20]
      53, 1, 3,  // Type: DHCP request
      255        // End of options
  };
  tx_dhcp(ifp, mac_dst, ip_src, ip_dst, opts, sizeof(opts), true);
 802e536:	2301      	movs	r3, #1
 802e538:	9302      	str	r3, [sp, #8]
 802e53a:	2304      	movs	r3, #4
 802e53c:	9301      	str	r3, [sp, #4]
 802e53e:	f107 0314 	add.w	r3, r7, #20
 802e542:	9300      	str	r3, [sp, #0]
 802e544:	683b      	ldr	r3, [r7, #0]
 802e546:	687a      	ldr	r2, [r7, #4]
 802e548:	68b9      	ldr	r1, [r7, #8]
 802e54a:	68f8      	ldr	r0, [r7, #12]
 802e54c:	f7ff fee4 	bl	802e318 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 802e550:	4b09      	ldr	r3, [pc, #36]	@ (802e578 <tx_dhcp_request_re+0x54>)
 802e552:	681b      	ldr	r3, [r3, #0]
 802e554:	2b02      	cmp	r3, #2
 802e556:	dd09      	ble.n	802e56c <tx_dhcp_request_re+0x48>
 802e558:	4b08      	ldr	r3, [pc, #32]	@ (802e57c <tx_dhcp_request_re+0x58>)
 802e55a:	f241 4266 	movw	r2, #5222	@ 0x1466
 802e55e:	4908      	ldr	r1, [pc, #32]	@ (802e580 <tx_dhcp_request_re+0x5c>)
 802e560:	2003      	movs	r0, #3
 802e562:	f7fc fe3b 	bl	802b1dc <mg_log_prefix>
 802e566:	4807      	ldr	r0, [pc, #28]	@ (802e584 <tx_dhcp_request_re+0x60>)
 802e568:	f7fc fe88 	bl	802b27c <mg_log>
}
 802e56c:	bf00      	nop
 802e56e:	3718      	adds	r7, #24
 802e570:	46bd      	mov	sp, r7
 802e572:	bd80      	pop	{r7, pc}
 802e574:	ff030135 	.word	0xff030135
 802e578:	20000298 	.word	0x20000298
 802e57c:	08044638 	.word	0x08044638
 802e580:	08041564 	.word	0x08041564
 802e584:	08042c7c 	.word	0x08042c7c

0802e588 <tx_dhcp_discover>:

static void tx_dhcp_discover(struct mg_tcpip_if *ifp) {
 802e588:	b580      	push	{r7, lr}
 802e58a:	b088      	sub	sp, #32
 802e58c:	af04      	add	r7, sp, #16
 802e58e:	6078      	str	r0, [r7, #4]
  uint8_t opts[] = {
 802e590:	4a14      	ldr	r2, [pc, #80]	@ (802e5e4 <tx_dhcp_discover+0x5c>)
 802e592:	f107 0308 	add.w	r3, r7, #8
 802e596:	e892 0003 	ldmia.w	r2, {r0, r1}
 802e59a:	e883 0003 	stmia.w	r3, {r0, r1}
      53, 1, 1,     // Type: DHCP discover
      55, 2, 1, 3,  // Parameters: ip, mask
      255           // End of options
  };
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 802e59e:	2300      	movs	r3, #0
 802e5a0:	9302      	str	r3, [sp, #8]
 802e5a2:	2308      	movs	r3, #8
 802e5a4:	9301      	str	r3, [sp, #4]
 802e5a6:	f107 0308 	add.w	r3, r7, #8
 802e5aa:	9300      	str	r3, [sp, #0]
 802e5ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802e5b0:	2200      	movs	r2, #0
 802e5b2:	490d      	ldr	r1, [pc, #52]	@ (802e5e8 <tx_dhcp_discover+0x60>)
 802e5b4:	6878      	ldr	r0, [r7, #4]
 802e5b6:	f7ff feaf 	bl	802e318 <tx_dhcp>
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 802e5ba:	4b0c      	ldr	r3, [pc, #48]	@ (802e5ec <tx_dhcp_discover+0x64>)
 802e5bc:	681b      	ldr	r3, [r3, #0]
 802e5be:	2b02      	cmp	r3, #2
 802e5c0:	dd0c      	ble.n	802e5dc <tx_dhcp_discover+0x54>
 802e5c2:	4b0b      	ldr	r3, [pc, #44]	@ (802e5f0 <tx_dhcp_discover+0x68>)
 802e5c4:	f241 4270 	movw	r2, #5232	@ 0x1470
 802e5c8:	490a      	ldr	r1, [pc, #40]	@ (802e5f4 <tx_dhcp_discover+0x6c>)
 802e5ca:	2003      	movs	r0, #3
 802e5cc:	f7fc fe06 	bl	802b1dc <mg_log_prefix>
 802e5d0:	687b      	ldr	r3, [r7, #4]
 802e5d2:	461a      	mov	r2, r3
 802e5d4:	4908      	ldr	r1, [pc, #32]	@ (802e5f8 <tx_dhcp_discover+0x70>)
 802e5d6:	4809      	ldr	r0, [pc, #36]	@ (802e5fc <tx_dhcp_discover+0x74>)
 802e5d8:	f7fc fe50 	bl	802b27c <mg_log>
}
 802e5dc:	bf00      	nop
 802e5de:	3710      	adds	r7, #16
 802e5e0:	46bd      	mov	sp, r7
 802e5e2:	bd80      	pop	{r7, pc}
 802e5e4:	08042cc8 	.word	0x08042cc8
 802e5e8:	08044548 	.word	0x08044548
 802e5ec:	20000298 	.word	0x20000298
 802e5f0:	0804464c 	.word	0x0804464c
 802e5f4:	08041564 	.word	0x08041564
 802e5f8:	08031491 	.word	0x08031491
 802e5fc:	08042ca8 	.word	0x08042ca8

0802e600 <getpeer>:

static struct mg_connection *getpeer(struct mg_mgr *mgr, struct pkt *pkt,
                                     bool lsn) {
 802e600:	b580      	push	{r7, lr}
 802e602:	b086      	sub	sp, #24
 802e604:	af00      	add	r7, sp, #0
 802e606:	60f8      	str	r0, [r7, #12]
 802e608:	60b9      	str	r1, [r7, #8]
 802e60a:	4613      	mov	r3, r2
 802e60c:	71fb      	strb	r3, [r7, #7]
  struct mg_connection *c = NULL;
 802e60e:	2300      	movs	r3, #0
 802e610:	617b      	str	r3, [r7, #20]
  for (c = mgr->conns; c != NULL; c = c->next) {
 802e612:	68fb      	ldr	r3, [r7, #12]
 802e614:	681b      	ldr	r3, [r3, #0]
 802e616:	617b      	str	r3, [r7, #20]
 802e618:	e057      	b.n	802e6ca <getpeer+0xca>
    if (c->is_arplooking && pkt->arp &&
 802e61a:	697b      	ldr	r3, [r7, #20]
 802e61c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 802e620:	f003 0310 	and.w	r3, r3, #16
 802e624:	b2db      	uxtb	r3, r3
 802e626:	2b00      	cmp	r3, #0
 802e628:	d010      	beq.n	802e64c <getpeer+0x4c>
 802e62a:	68bb      	ldr	r3, [r7, #8]
 802e62c:	699b      	ldr	r3, [r3, #24]
 802e62e:	2b00      	cmp	r3, #0
 802e630:	d00c      	beq.n	802e64c <getpeer+0x4c>
        memcmp(&pkt->arp->spa, c->rem.ip, sizeof(pkt->arp->spa)) == 0)
 802e632:	68bb      	ldr	r3, [r7, #8]
 802e634:	699b      	ldr	r3, [r3, #24]
 802e636:	f103 000e 	add.w	r0, r3, #14
 802e63a:	697b      	ldr	r3, [r7, #20]
 802e63c:	331c      	adds	r3, #28
 802e63e:	2204      	movs	r2, #4
 802e640:	4619      	mov	r1, r3
 802e642:	f007 fb41 	bl	8035cc8 <memcmp>
 802e646:	4603      	mov	r3, r0
    if (c->is_arplooking && pkt->arp &&
 802e648:	2b00      	cmp	r3, #0
 802e64a:	d042      	beq.n	802e6d2 <getpeer+0xd2>
      break;
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 802e64c:	697b      	ldr	r3, [r7, #20]
 802e64e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 802e652:	f003 0301 	and.w	r3, r3, #1
 802e656:	b2db      	uxtb	r3, r3
 802e658:	2b00      	cmp	r3, #0
 802e65a:	d00b      	beq.n	802e674 <getpeer+0x74>
 802e65c:	68bb      	ldr	r3, [r7, #8]
 802e65e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802e660:	2b00      	cmp	r3, #0
 802e662:	d007      	beq.n	802e674 <getpeer+0x74>
 802e664:	697b      	ldr	r3, [r7, #20]
 802e666:	8b1a      	ldrh	r2, [r3, #24]
 802e668:	68bb      	ldr	r3, [r7, #8]
 802e66a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802e66c:	885b      	ldrh	r3, [r3, #2]
 802e66e:	b29b      	uxth	r3, r3
 802e670:	429a      	cmp	r2, r3
 802e672:	d030      	beq.n	802e6d6 <getpeer+0xd6>
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 802e674:	697b      	ldr	r3, [r7, #20]
 802e676:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 802e67a:	f003 0301 	and.w	r3, r3, #1
 802e67e:	b2db      	uxtb	r3, r3
 802e680:	2b00      	cmp	r3, #0
 802e682:	d11f      	bne.n	802e6c4 <getpeer+0xc4>
 802e684:	68bb      	ldr	r3, [r7, #8]
 802e686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802e688:	2b00      	cmp	r3, #0
 802e68a:	d01b      	beq.n	802e6c4 <getpeer+0xc4>
 802e68c:	697b      	ldr	r3, [r7, #20]
 802e68e:	8b1a      	ldrh	r2, [r3, #24]
 802e690:	68bb      	ldr	r3, [r7, #8]
 802e692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802e694:	885b      	ldrh	r3, [r3, #2]
 802e696:	b29b      	uxth	r3, r3
 802e698:	429a      	cmp	r2, r3
 802e69a:	d113      	bne.n	802e6c4 <getpeer+0xc4>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 802e69c:	697b      	ldr	r3, [r7, #20]
 802e69e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 802e6a2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 802e6a6:	b2db      	uxtb	r3, r3
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 802e6a8:	79fa      	ldrb	r2, [r7, #7]
 802e6aa:	429a      	cmp	r2, r3
 802e6ac:	d10a      	bne.n	802e6c4 <getpeer+0xc4>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 802e6ae:	79fb      	ldrb	r3, [r7, #7]
 802e6b0:	2b00      	cmp	r3, #0
 802e6b2:	d111      	bne.n	802e6d8 <getpeer+0xd8>
 802e6b4:	697b      	ldr	r3, [r7, #20]
 802e6b6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 802e6b8:	68bb      	ldr	r3, [r7, #8]
 802e6ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802e6bc:	881b      	ldrh	r3, [r3, #0]
 802e6be:	b29b      	uxth	r3, r3
 802e6c0:	429a      	cmp	r2, r3
 802e6c2:	d009      	beq.n	802e6d8 <getpeer+0xd8>
  for (c = mgr->conns; c != NULL; c = c->next) {
 802e6c4:	697b      	ldr	r3, [r7, #20]
 802e6c6:	681b      	ldr	r3, [r3, #0]
 802e6c8:	617b      	str	r3, [r7, #20]
 802e6ca:	697b      	ldr	r3, [r7, #20]
 802e6cc:	2b00      	cmp	r3, #0
 802e6ce:	d1a4      	bne.n	802e61a <getpeer+0x1a>
 802e6d0:	e002      	b.n	802e6d8 <getpeer+0xd8>
      break;
 802e6d2:	bf00      	nop
 802e6d4:	e000      	b.n	802e6d8 <getpeer+0xd8>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 802e6d6:	bf00      	nop
      break;
  }
  return c;
 802e6d8:	697b      	ldr	r3, [r7, #20]
}
 802e6da:	4618      	mov	r0, r3
 802e6dc:	3718      	adds	r7, #24
 802e6de:	46bd      	mov	sp, r7
 802e6e0:	bd80      	pop	{r7, pc}
	...

0802e6e4 <rx_arp>:

static void rx_arp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 802e6e4:	b5b0      	push	{r4, r5, r7, lr}
 802e6e6:	b088      	sub	sp, #32
 802e6e8:	af02      	add	r7, sp, #8
 802e6ea:	6078      	str	r0, [r7, #4]
 802e6ec:	6039      	str	r1, [r7, #0]
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 802e6ee:	683b      	ldr	r3, [r7, #0]
 802e6f0:	699b      	ldr	r3, [r3, #24]
 802e6f2:	88db      	ldrh	r3, [r3, #6]
 802e6f4:	b29c      	uxth	r4, r3
 802e6f6:	2001      	movs	r0, #1
 802e6f8:	f004 fa17 	bl	8032b2a <mg_ntohs>
 802e6fc:	4603      	mov	r3, r0
 802e6fe:	429c      	cmp	r4, r3
 802e700:	d176      	bne.n	802e7f0 <rx_arp+0x10c>
 802e702:	683b      	ldr	r3, [r7, #0]
 802e704:	699b      	ldr	r3, [r3, #24]
 802e706:	699a      	ldr	r2, [r3, #24]
 802e708:	687b      	ldr	r3, [r7, #4]
 802e70a:	689b      	ldr	r3, [r3, #8]
 802e70c:	429a      	cmp	r2, r3
 802e70e:	d16f      	bne.n	802e7f0 <rx_arp+0x10c>
    // ARP request. Make a response, then send
    // MG_DEBUG(("ARP op %d %M: %M", mg_ntohs(pkt->arp->op), mg_print_ip4,
    //          &pkt->arp->spa, mg_print_ip4, &pkt->arp->tpa));
    struct eth *eth = (struct eth *) ifp->tx.buf;
 802e710:	687b      	ldr	r3, [r7, #4]
 802e712:	695b      	ldr	r3, [r3, #20]
 802e714:	617b      	str	r3, [r7, #20]
    struct arp *arp = (struct arp *) (eth + 1);
 802e716:	697b      	ldr	r3, [r7, #20]
 802e718:	330e      	adds	r3, #14
 802e71a:	613b      	str	r3, [r7, #16]
    memcpy(eth->dst, pkt->eth->src, sizeof(eth->dst));
 802e71c:	6978      	ldr	r0, [r7, #20]
 802e71e:	683b      	ldr	r3, [r7, #0]
 802e720:	691b      	ldr	r3, [r3, #16]
 802e722:	3306      	adds	r3, #6
 802e724:	2206      	movs	r2, #6
 802e726:	4619      	mov	r1, r3
 802e728:	f008 fd9e 	bl	8037268 <memcpy>
    memcpy(eth->src, ifp->mac, sizeof(eth->src));
 802e72c:	697b      	ldr	r3, [r7, #20]
 802e72e:	3306      	adds	r3, #6
 802e730:	6879      	ldr	r1, [r7, #4]
 802e732:	2206      	movs	r2, #6
 802e734:	4618      	mov	r0, r3
 802e736:	f008 fd97 	bl	8037268 <memcpy>
    eth->type = mg_htons(0x806);
 802e73a:	f640 0006 	movw	r0, #2054	@ 0x806
 802e73e:	f004 f9f4 	bl	8032b2a <mg_ntohs>
 802e742:	4603      	mov	r3, r0
 802e744:	461a      	mov	r2, r3
 802e746:	697b      	ldr	r3, [r7, #20]
 802e748:	819a      	strh	r2, [r3, #12]
    *arp = *pkt->arp;
 802e74a:	683b      	ldr	r3, [r7, #0]
 802e74c:	699a      	ldr	r2, [r3, #24]
 802e74e:	693b      	ldr	r3, [r7, #16]
 802e750:	6814      	ldr	r4, [r2, #0]
 802e752:	6850      	ldr	r0, [r2, #4]
 802e754:	6891      	ldr	r1, [r2, #8]
 802e756:	68d5      	ldr	r5, [r2, #12]
 802e758:	601c      	str	r4, [r3, #0]
 802e75a:	6058      	str	r0, [r3, #4]
 802e75c:	6099      	str	r1, [r3, #8]
 802e75e:	60dd      	str	r5, [r3, #12]
 802e760:	6914      	ldr	r4, [r2, #16]
 802e762:	6950      	ldr	r0, [r2, #20]
 802e764:	6991      	ldr	r1, [r2, #24]
 802e766:	611c      	str	r4, [r3, #16]
 802e768:	6158      	str	r0, [r3, #20]
 802e76a:	6199      	str	r1, [r3, #24]
    arp->op = mg_htons(2);
 802e76c:	2002      	movs	r0, #2
 802e76e:	f004 f9dc 	bl	8032b2a <mg_ntohs>
 802e772:	4603      	mov	r3, r0
 802e774:	461a      	mov	r2, r3
 802e776:	693b      	ldr	r3, [r7, #16]
 802e778:	80da      	strh	r2, [r3, #6]
    memcpy(arp->tha, pkt->arp->sha, sizeof(pkt->arp->tha));
 802e77a:	693b      	ldr	r3, [r7, #16]
 802e77c:	f103 0012 	add.w	r0, r3, #18
 802e780:	683b      	ldr	r3, [r7, #0]
 802e782:	699b      	ldr	r3, [r3, #24]
 802e784:	3308      	adds	r3, #8
 802e786:	2206      	movs	r2, #6
 802e788:	4619      	mov	r1, r3
 802e78a:	f008 fd6d 	bl	8037268 <memcpy>
    memcpy(arp->sha, ifp->mac, sizeof(pkt->arp->sha));
 802e78e:	693b      	ldr	r3, [r7, #16]
 802e790:	3308      	adds	r3, #8
 802e792:	6879      	ldr	r1, [r7, #4]
 802e794:	2206      	movs	r2, #6
 802e796:	4618      	mov	r0, r3
 802e798:	f008 fd66 	bl	8037268 <memcpy>
    arp->tpa = pkt->arp->spa;
 802e79c:	683b      	ldr	r3, [r7, #0]
 802e79e:	699b      	ldr	r3, [r3, #24]
 802e7a0:	f8d3 200e 	ldr.w	r2, [r3, #14]
 802e7a4:	693b      	ldr	r3, [r7, #16]
 802e7a6:	619a      	str	r2, [r3, #24]
    arp->spa = ifp->ip;
 802e7a8:	687b      	ldr	r3, [r7, #4]
 802e7aa:	689a      	ldr	r2, [r3, #8]
 802e7ac:	693b      	ldr	r3, [r7, #16]
 802e7ae:	f8c3 200e 	str.w	r2, [r3, #14]
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 802e7b2:	4b4a      	ldr	r3, [pc, #296]	@ (802e8dc <rx_arp+0x1f8>)
 802e7b4:	681b      	ldr	r3, [r3, #0]
 802e7b6:	2b02      	cmp	r3, #2
 802e7b8:	dd10      	ble.n	802e7dc <rx_arp+0xf8>
 802e7ba:	4b49      	ldr	r3, [pc, #292]	@ (802e8e0 <rx_arp+0x1fc>)
 802e7bc:	f241 4292 	movw	r2, #5266	@ 0x1492
 802e7c0:	4948      	ldr	r1, [pc, #288]	@ (802e8e4 <rx_arp+0x200>)
 802e7c2:	2003      	movs	r0, #3
 802e7c4:	f7fc fd0a 	bl	802b1dc <mg_log_prefix>
 802e7c8:	693b      	ldr	r3, [r7, #16]
 802e7ca:	f103 0218 	add.w	r2, r3, #24
 802e7ce:	687b      	ldr	r3, [r7, #4]
 802e7d0:	9300      	str	r3, [sp, #0]
 802e7d2:	4b45      	ldr	r3, [pc, #276]	@ (802e8e8 <rx_arp+0x204>)
 802e7d4:	4945      	ldr	r1, [pc, #276]	@ (802e8ec <rx_arp+0x208>)
 802e7d6:	4846      	ldr	r0, [pc, #280]	@ (802e8f0 <rx_arp+0x20c>)
 802e7d8:	f7fc fd50 	bl	802b27c <mg_log>
              &ifp->mac));
    ether_output(ifp, PDIFF(eth, arp + 1));
 802e7dc:	693b      	ldr	r3, [r7, #16]
 802e7de:	f103 021c 	add.w	r2, r3, #28
 802e7e2:	697b      	ldr	r3, [r7, #20]
 802e7e4:	1ad3      	subs	r3, r2, r3
 802e7e6:	4619      	mov	r1, r3
 802e7e8:	6878      	ldr	r0, [r7, #4]
 802e7ea:	f7ff fbc7 	bl	802df7c <ether_output>
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 802e7ee:	e071      	b.n	802e8d4 <rx_arp+0x1f0>
  } else if (pkt->arp->op == mg_htons(2)) {
 802e7f0:	683b      	ldr	r3, [r7, #0]
 802e7f2:	699b      	ldr	r3, [r3, #24]
 802e7f4:	88db      	ldrh	r3, [r3, #6]
 802e7f6:	b29c      	uxth	r4, r3
 802e7f8:	2002      	movs	r0, #2
 802e7fa:	f004 f996 	bl	8032b2a <mg_ntohs>
 802e7fe:	4603      	mov	r3, r0
 802e800:	429c      	cmp	r4, r3
 802e802:	d167      	bne.n	802e8d4 <rx_arp+0x1f0>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 802e804:	683b      	ldr	r3, [r7, #0]
 802e806:	699b      	ldr	r3, [r3, #24]
 802e808:	3312      	adds	r3, #18
 802e80a:	6879      	ldr	r1, [r7, #4]
 802e80c:	2206      	movs	r2, #6
 802e80e:	4618      	mov	r0, r3
 802e810:	f007 fa5a 	bl	8035cc8 <memcmp>
 802e814:	4603      	mov	r3, r0
 802e816:	2b00      	cmp	r3, #0
 802e818:	d15b      	bne.n	802e8d2 <rx_arp+0x1ee>
    if (pkt->arp->spa == ifp->gw) {
 802e81a:	683b      	ldr	r3, [r7, #0]
 802e81c:	699b      	ldr	r3, [r3, #24]
 802e81e:	f8d3 200e 	ldr.w	r2, [r3, #14]
 802e822:	687b      	ldr	r3, [r7, #4]
 802e824:	691b      	ldr	r3, [r3, #16]
 802e826:	429a      	cmp	r2, r3
 802e828:	d10a      	bne.n	802e840 <rx_arp+0x15c>
      // Got response for the GW ARP request. Set ifp->gwmac
      memcpy(ifp->gwmac, pkt->arp->sha, sizeof(ifp->gwmac));
 802e82a:	687b      	ldr	r3, [r7, #4]
 802e82c:	f103 0046 	add.w	r0, r3, #70	@ 0x46
 802e830:	683b      	ldr	r3, [r7, #0]
 802e832:	699b      	ldr	r3, [r3, #24]
 802e834:	3308      	adds	r3, #8
 802e836:	2206      	movs	r2, #6
 802e838:	4619      	mov	r1, r3
 802e83a:	f008 fd15 	bl	8037268 <memcpy>
 802e83e:	e049      	b.n	802e8d4 <rx_arp+0x1f0>
    } else {
      struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 802e840:	687b      	ldr	r3, [r7, #4]
 802e842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802e844:	2200      	movs	r2, #0
 802e846:	6839      	ldr	r1, [r7, #0]
 802e848:	4618      	mov	r0, r3
 802e84a:	f7ff fed9 	bl	802e600 <getpeer>
 802e84e:	60f8      	str	r0, [r7, #12]
      if (c != NULL && c->is_arplooking) {
 802e850:	68fb      	ldr	r3, [r7, #12]
 802e852:	2b00      	cmp	r3, #0
 802e854:	d03e      	beq.n	802e8d4 <rx_arp+0x1f0>
 802e856:	68fb      	ldr	r3, [r7, #12]
 802e858:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 802e85c:	f003 0310 	and.w	r3, r3, #16
 802e860:	b2db      	uxtb	r3, r3
 802e862:	2b00      	cmp	r3, #0
 802e864:	d036      	beq.n	802e8d4 <rx_arp+0x1f0>
        struct connstate *s = (struct connstate *) (c + 1);
 802e866:	68fb      	ldr	r3, [r7, #12]
 802e868:	33b0      	adds	r3, #176	@ 0xb0
 802e86a:	60bb      	str	r3, [r7, #8]
        memcpy(s->mac, pkt->arp->sha, sizeof(s->mac));
 802e86c:	68bb      	ldr	r3, [r7, #8]
 802e86e:	f103 0018 	add.w	r0, r3, #24
 802e872:	683b      	ldr	r3, [r7, #0]
 802e874:	699b      	ldr	r3, [r3, #24]
 802e876:	3308      	adds	r3, #8
 802e878:	2206      	movs	r2, #6
 802e87a:	4619      	mov	r1, r3
 802e87c:	f008 fcf4 	bl	8037268 <memcpy>
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 802e880:	4b16      	ldr	r3, [pc, #88]	@ (802e8dc <rx_arp+0x1f8>)
 802e882:	681b      	ldr	r3, [r3, #0]
 802e884:	2b02      	cmp	r3, #2
 802e886:	dd15      	ble.n	802e8b4 <rx_arp+0x1d0>
 802e888:	4b15      	ldr	r3, [pc, #84]	@ (802e8e0 <rx_arp+0x1fc>)
 802e88a:	f241 429f 	movw	r2, #5279	@ 0x149f
 802e88e:	4915      	ldr	r1, [pc, #84]	@ (802e8e4 <rx_arp+0x200>)
 802e890:	2003      	movs	r0, #3
 802e892:	f7fc fca3 	bl	802b1dc <mg_log_prefix>
 802e896:	68fb      	ldr	r3, [r7, #12]
 802e898:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 802e89a:	68fb      	ldr	r3, [r7, #12]
 802e89c:	f103 021c 	add.w	r2, r3, #28
 802e8a0:	68bb      	ldr	r3, [r7, #8]
 802e8a2:	3318      	adds	r3, #24
 802e8a4:	9301      	str	r3, [sp, #4]
 802e8a6:	4b10      	ldr	r3, [pc, #64]	@ (802e8e8 <rx_arp+0x204>)
 802e8a8:	9300      	str	r3, [sp, #0]
 802e8aa:	4613      	mov	r3, r2
 802e8ac:	4a0f      	ldr	r2, [pc, #60]	@ (802e8ec <rx_arp+0x208>)
 802e8ae:	4811      	ldr	r0, [pc, #68]	@ (802e8f4 <rx_arp+0x210>)
 802e8b0:	f7fc fce4 	bl	802b27c <mg_log>
                  mg_print_mac, s->mac));
        c->is_arplooking = 0;
 802e8b4:	68fa      	ldr	r2, [r7, #12]
 802e8b6:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 802e8ba:	f36f 1304 	bfc	r3, #4, #1
 802e8be:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
        send_syn(c);
 802e8c2:	68f8      	ldr	r0, [r7, #12]
 802e8c4:	f002 f8ac 	bl	8030a20 <send_syn>
        settmout(c, MIP_TTYPE_SYN);
 802e8c8:	2103      	movs	r1, #3
 802e8ca:	68f8      	ldr	r0, [r7, #12]
 802e8cc:	f7ff fafa 	bl	802dec4 <settmout>
 802e8d0:	e000      	b.n	802e8d4 <rx_arp+0x1f0>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 802e8d2:	bf00      	nop
      }
    }
  }
}
 802e8d4:	3718      	adds	r7, #24
 802e8d6:	46bd      	mov	sp, r7
 802e8d8:	bdb0      	pop	{r4, r5, r7, pc}
 802e8da:	bf00      	nop
 802e8dc:	20000298 	.word	0x20000298
 802e8e0:	08044660 	.word	0x08044660
 802e8e4:	08041564 	.word	0x08041564
 802e8e8:	08031491 	.word	0x08031491
 802e8ec:	080313cd 	.word	0x080313cd
 802e8f0:	08042cd0 	.word	0x08042cd0
 802e8f4:	08042ce8 	.word	0x08042ce8

0802e8f8 <rx_icmp>:

static void rx_icmp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 802e8f8:	b580      	push	{r7, lr}
 802e8fa:	b08a      	sub	sp, #40	@ 0x28
 802e8fc:	af02      	add	r7, sp, #8
 802e8fe:	6078      	str	r0, [r7, #4]
 802e900:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("ICMP %d", (int) len));
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 802e902:	683b      	ldr	r3, [r7, #0]
 802e904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802e906:	781b      	ldrb	r3, [r3, #0]
 802e908:	2b08      	cmp	r3, #8
 802e90a:	d14d      	bne.n	802e9a8 <rx_icmp+0xb0>
 802e90c:	683b      	ldr	r3, [r7, #0]
 802e90e:	69db      	ldr	r3, [r3, #28]
 802e910:	2b00      	cmp	r3, #0
 802e912:	d049      	beq.n	802e9a8 <rx_icmp+0xb0>
 802e914:	683b      	ldr	r3, [r7, #0]
 802e916:	69db      	ldr	r3, [r3, #28]
 802e918:	691a      	ldr	r2, [r3, #16]
 802e91a:	687b      	ldr	r3, [r7, #4]
 802e91c:	689b      	ldr	r3, [r3, #8]
 802e91e:	429a      	cmp	r2, r3
 802e920:	d142      	bne.n	802e9a8 <rx_icmp+0xb0>
    size_t hlen = sizeof(struct eth) + sizeof(struct ip) + sizeof(struct icmp);
 802e922:	2326      	movs	r3, #38	@ 0x26
 802e924:	61bb      	str	r3, [r7, #24]
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 802e926:	687b      	ldr	r3, [r7, #4]
 802e928:	699a      	ldr	r2, [r3, #24]
 802e92a:	69bb      	ldr	r3, [r7, #24]
 802e92c:	1ad3      	subs	r3, r2, r3
 802e92e:	617b      	str	r3, [r7, #20]
 802e930:	683b      	ldr	r3, [r7, #0]
 802e932:	68db      	ldr	r3, [r3, #12]
 802e934:	61fb      	str	r3, [r7, #28]
    if (plen > space) plen = space;
 802e936:	69fa      	ldr	r2, [r7, #28]
 802e938:	697b      	ldr	r3, [r7, #20]
 802e93a:	429a      	cmp	r2, r3
 802e93c:	d901      	bls.n	802e942 <rx_icmp+0x4a>
 802e93e:	697b      	ldr	r3, [r7, #20]
 802e940:	61fb      	str	r3, [r7, #28]
    struct ip *ip = tx_ip(ifp, pkt->eth->src, 1, ifp->ip, pkt->ip->src,
 802e942:	683b      	ldr	r3, [r7, #0]
 802e944:	691b      	ldr	r3, [r3, #16]
 802e946:	1d99      	adds	r1, r3, #6
 802e948:	687b      	ldr	r3, [r7, #4]
 802e94a:	6898      	ldr	r0, [r3, #8]
 802e94c:	683b      	ldr	r3, [r7, #0]
 802e94e:	69db      	ldr	r3, [r3, #28]
 802e950:	68db      	ldr	r3, [r3, #12]
 802e952:	69fa      	ldr	r2, [r7, #28]
 802e954:	3204      	adds	r2, #4
 802e956:	9201      	str	r2, [sp, #4]
 802e958:	9300      	str	r3, [sp, #0]
 802e95a:	4603      	mov	r3, r0
 802e95c:	2201      	movs	r2, #1
 802e95e:	6878      	ldr	r0, [r7, #4]
 802e960:	f7ff fc1a 	bl	802e198 <tx_ip>
 802e964:	6138      	str	r0, [r7, #16]
                          sizeof(struct icmp) + plen);
    struct icmp *icmp = (struct icmp *) (ip + 1);
 802e966:	693b      	ldr	r3, [r7, #16]
 802e968:	3314      	adds	r3, #20
 802e96a:	60fb      	str	r3, [r7, #12]
    memset(icmp, 0, sizeof(*icmp));        // Set csum to 0
 802e96c:	2204      	movs	r2, #4
 802e96e:	2100      	movs	r1, #0
 802e970:	68f8      	ldr	r0, [r7, #12]
 802e972:	f007 fa3d 	bl	8035df0 <memset>
    memcpy(icmp + 1, pkt->pay.buf, plen);  // Copy RX payload to TX
 802e976:	68fb      	ldr	r3, [r7, #12]
 802e978:	1d18      	adds	r0, r3, #4
 802e97a:	683b      	ldr	r3, [r7, #0]
 802e97c:	689b      	ldr	r3, [r3, #8]
 802e97e:	69fa      	ldr	r2, [r7, #28]
 802e980:	4619      	mov	r1, r3
 802e982:	f008 fc71 	bl	8037268 <memcpy>
    icmp->csum = ipcsum(icmp, sizeof(*icmp) + plen);
 802e986:	69fb      	ldr	r3, [r7, #28]
 802e988:	3304      	adds	r3, #4
 802e98a:	4619      	mov	r1, r3
 802e98c:	68f8      	ldr	r0, [r7, #12]
 802e98e:	f7ff fa85 	bl	802de9c <ipcsum>
 802e992:	4603      	mov	r3, r0
 802e994:	461a      	mov	r2, r3
 802e996:	68fb      	ldr	r3, [r7, #12]
 802e998:	805a      	strh	r2, [r3, #2]
    ether_output(ifp, hlen + plen);
 802e99a:	69ba      	ldr	r2, [r7, #24]
 802e99c:	69fb      	ldr	r3, [r7, #28]
 802e99e:	4413      	add	r3, r2
 802e9a0:	4619      	mov	r1, r3
 802e9a2:	6878      	ldr	r0, [r7, #4]
 802e9a4:	f7ff faea 	bl	802df7c <ether_output>
  }
}
 802e9a8:	bf00      	nop
 802e9aa:	3720      	adds	r7, #32
 802e9ac:	46bd      	mov	sp, r7
 802e9ae:	bd80      	pop	{r7, pc}

0802e9b0 <rx_dhcp_client>:

static void rx_dhcp_client(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 802e9b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802e9b4:	b090      	sub	sp, #64	@ 0x40
 802e9b6:	af00      	add	r7, sp, #0
 802e9b8:	60f8      	str	r0, [r7, #12]
 802e9ba:	60b9      	str	r1, [r7, #8]
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 802e9bc:	2300      	movs	r3, #0
 802e9be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 802e9c0:	2300      	movs	r3, #0
 802e9c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 802e9c4:	2300      	movs	r3, #0
 802e9c6:	627b      	str	r3, [r7, #36]	@ 0x24
 802e9c8:	2300      	movs	r3, #0
 802e9ca:	623b      	str	r3, [r7, #32]
 802e9cc:	2300      	movs	r3, #0
 802e9ce:	61fb      	str	r3, [r7, #28]
 802e9d0:	2300      	movs	r3, #0
 802e9d2:	61bb      	str	r3, [r7, #24]
  uint8_t msgtype = 0, state = ifp->state;
 802e9d4:	2300      	movs	r3, #0
 802e9d6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 802e9da:	68fb      	ldr	r3, [r7, #12]
 802e9dc:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 802e9e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  // perform size check first, then access fields
  uint8_t *p = pkt->dhcp->options,
 802e9e4:	68bb      	ldr	r3, [r7, #8]
 802e9e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802e9e8:	33f0      	adds	r3, #240	@ 0xf0
 802e9ea:	637b      	str	r3, [r7, #52]	@ 0x34
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 802e9ec:	68bb      	ldr	r3, [r7, #8]
 802e9ee:	681a      	ldr	r2, [r3, #0]
 802e9f0:	68bb      	ldr	r3, [r7, #8]
 802e9f2:	685b      	ldr	r3, [r3, #4]
 802e9f4:	4413      	add	r3, r2
 802e9f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 802e9f8:	68bb      	ldr	r3, [r7, #8]
 802e9fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802e9fc:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 802ea00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802ea02:	429a      	cmp	r2, r3
 802ea04:	f0c0 81ac 	bcc.w	802ed60 <rx_dhcp_client+0x3b0>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 802ea08:	68bb      	ldr	r3, [r7, #8]
 802ea0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802ea0c:	1d18      	adds	r0, r3, #4
 802ea0e:	68fb      	ldr	r3, [r7, #12]
 802ea10:	3302      	adds	r3, #2
 802ea12:	2204      	movs	r2, #4
 802ea14:	4619      	mov	r1, r3
 802ea16:	f007 f957 	bl	8035cc8 <memcmp>
 802ea1a:	4603      	mov	r3, r0
 802ea1c:	2b00      	cmp	r3, #0
 802ea1e:	f040 81a1 	bne.w	802ed64 <rx_dhcp_client+0x3b4>
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 802ea22:	e08a      	b.n	802eb3a <rx_dhcp_client+0x18a>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 802ea24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ea26:	781b      	ldrb	r3, [r3, #0]
 802ea28:	2b01      	cmp	r3, #1
 802ea2a:	d10e      	bne.n	802ea4a <rx_dhcp_client+0x9a>
 802ea2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ea2e:	3301      	adds	r3, #1
 802ea30:	781b      	ldrb	r3, [r3, #0]
 802ea32:	2b04      	cmp	r3, #4
 802ea34:	d109      	bne.n	802ea4a <rx_dhcp_client+0x9a>
 802ea36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ea38:	3306      	adds	r3, #6
 802ea3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802ea3c:	429a      	cmp	r2, r3
 802ea3e:	d904      	bls.n	802ea4a <rx_dhcp_client+0x9a>
      memcpy(&mask, p + 2, sizeof(mask));
 802ea40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ea42:	3302      	adds	r3, #2
 802ea44:	681b      	ldr	r3, [r3, #0]
 802ea46:	627b      	str	r3, [r7, #36]	@ 0x24
 802ea48:	e070      	b.n	802eb2c <rx_dhcp_client+0x17c>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 802ea4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ea4c:	781b      	ldrb	r3, [r3, #0]
 802ea4e:	2b03      	cmp	r3, #3
 802ea50:	d112      	bne.n	802ea78 <rx_dhcp_client+0xc8>
 802ea52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ea54:	3301      	adds	r3, #1
 802ea56:	781b      	ldrb	r3, [r3, #0]
 802ea58:	2b04      	cmp	r3, #4
 802ea5a:	d10d      	bne.n	802ea78 <rx_dhcp_client+0xc8>
 802ea5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ea5e:	3306      	adds	r3, #6
 802ea60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802ea62:	429a      	cmp	r2, r3
 802ea64:	d908      	bls.n	802ea78 <rx_dhcp_client+0xc8>
      memcpy(&gw, p + 2, sizeof(gw));
 802ea66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ea68:	3302      	adds	r3, #2
 802ea6a:	681b      	ldr	r3, [r3, #0]
 802ea6c:	62bb      	str	r3, [r7, #40]	@ 0x28
      ip = pkt->dhcp->yiaddr;
 802ea6e:	68bb      	ldr	r3, [r7, #8]
 802ea70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802ea72:	691b      	ldr	r3, [r3, #16]
 802ea74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 802ea76:	e059      	b.n	802eb2c <rx_dhcp_client+0x17c>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 802ea78:	68fb      	ldr	r3, [r7, #12]
 802ea7a:	7fdb      	ldrb	r3, [r3, #31]
 802ea7c:	2b00      	cmp	r3, #0
 802ea7e:	d012      	beq.n	802eaa6 <rx_dhcp_client+0xf6>
 802ea80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ea82:	781b      	ldrb	r3, [r3, #0]
 802ea84:	2b06      	cmp	r3, #6
 802ea86:	d10e      	bne.n	802eaa6 <rx_dhcp_client+0xf6>
 802ea88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ea8a:	3301      	adds	r3, #1
 802ea8c:	781b      	ldrb	r3, [r3, #0]
 802ea8e:	2b04      	cmp	r3, #4
 802ea90:	d109      	bne.n	802eaa6 <rx_dhcp_client+0xf6>
               p + 6 < end) {  // DNS
 802ea92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ea94:	3306      	adds	r3, #6
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 802ea96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802ea98:	429a      	cmp	r2, r3
 802ea9a:	d904      	bls.n	802eaa6 <rx_dhcp_client+0xf6>
      memcpy(&dns, p + 2, sizeof(dns));
 802ea9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ea9e:	3302      	adds	r3, #2
 802eaa0:	681b      	ldr	r3, [r3, #0]
 802eaa2:	61fb      	str	r3, [r7, #28]
 802eaa4:	e042      	b.n	802eb2c <rx_dhcp_client+0x17c>
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 802eaa6:	68fb      	ldr	r3, [r7, #12]
 802eaa8:	f893 3020 	ldrb.w	r3, [r3, #32]
 802eaac:	2b00      	cmp	r3, #0
 802eaae:	d012      	beq.n	802ead6 <rx_dhcp_client+0x126>
 802eab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802eab2:	781b      	ldrb	r3, [r3, #0]
 802eab4:	2b2a      	cmp	r3, #42	@ 0x2a
 802eab6:	d10e      	bne.n	802ead6 <rx_dhcp_client+0x126>
 802eab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802eaba:	3301      	adds	r3, #1
 802eabc:	781b      	ldrb	r3, [r3, #0]
 802eabe:	2b04      	cmp	r3, #4
 802eac0:	d109      	bne.n	802ead6 <rx_dhcp_client+0x126>
               p + 6 < end) {  // SNTP
 802eac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802eac4:	3306      	adds	r3, #6
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 802eac6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802eac8:	429a      	cmp	r2, r3
 802eaca:	d904      	bls.n	802ead6 <rx_dhcp_client+0x126>
      memcpy(&sntp, p + 2, sizeof(sntp));
 802eacc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802eace:	3302      	adds	r3, #2
 802ead0:	681b      	ldr	r3, [r3, #0]
 802ead2:	61bb      	str	r3, [r7, #24]
 802ead4:	e02a      	b.n	802eb2c <rx_dhcp_client+0x17c>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 802ead6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ead8:	781b      	ldrb	r3, [r3, #0]
 802eada:	2b33      	cmp	r3, #51	@ 0x33
 802eadc:	d114      	bne.n	802eb08 <rx_dhcp_client+0x158>
 802eade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802eae0:	3301      	adds	r3, #1
 802eae2:	781b      	ldrb	r3, [r3, #0]
 802eae4:	2b04      	cmp	r3, #4
 802eae6:	d10f      	bne.n	802eb08 <rx_dhcp_client+0x158>
 802eae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802eaea:	3306      	adds	r3, #6
 802eaec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802eaee:	429a      	cmp	r2, r3
 802eaf0:	d90a      	bls.n	802eb08 <rx_dhcp_client+0x158>
      memcpy(&lease, p + 2, sizeof(lease));
 802eaf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802eaf4:	3302      	adds	r3, #2
 802eaf6:	681b      	ldr	r3, [r3, #0]
 802eaf8:	623b      	str	r3, [r7, #32]
      lease = mg_ntohl(lease);
 802eafa:	6a3b      	ldr	r3, [r7, #32]
 802eafc:	4618      	mov	r0, r3
 802eafe:	f003 fffb 	bl	8032af8 <mg_ntohl>
 802eb02:	4603      	mov	r3, r0
 802eb04:	623b      	str	r3, [r7, #32]
 802eb06:	e011      	b.n	802eb2c <rx_dhcp_client+0x17c>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 802eb08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802eb0a:	781b      	ldrb	r3, [r3, #0]
 802eb0c:	2b35      	cmp	r3, #53	@ 0x35
 802eb0e:	d10d      	bne.n	802eb2c <rx_dhcp_client+0x17c>
 802eb10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802eb12:	3301      	adds	r3, #1
 802eb14:	781b      	ldrb	r3, [r3, #0]
 802eb16:	2b01      	cmp	r3, #1
 802eb18:	d108      	bne.n	802eb2c <rx_dhcp_client+0x17c>
 802eb1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802eb1c:	3306      	adds	r3, #6
 802eb1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802eb20:	429a      	cmp	r2, r3
 802eb22:	d903      	bls.n	802eb2c <rx_dhcp_client+0x17c>
      msgtype = p[2];
 802eb24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802eb26:	789b      	ldrb	r3, [r3, #2]
 802eb28:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    }
    p += p[1] + 2;
 802eb2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802eb2e:	3301      	adds	r3, #1
 802eb30:	781b      	ldrb	r3, [r3, #0]
 802eb32:	3302      	adds	r3, #2
 802eb34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802eb36:	4413      	add	r3, r2
 802eb38:	637b      	str	r3, [r7, #52]	@ 0x34
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 802eb3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802eb3c:	3301      	adds	r3, #1
 802eb3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802eb40:	429a      	cmp	r2, r3
 802eb42:	d904      	bls.n	802eb4e <rx_dhcp_client+0x19e>
 802eb44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802eb46:	781b      	ldrb	r3, [r3, #0]
 802eb48:	2bff      	cmp	r3, #255	@ 0xff
 802eb4a:	f47f af6b 	bne.w	802ea24 <rx_dhcp_client+0x74>
  }
  // Process message type, RFC-1533 (9.4); RFC-2131 (3.1, 4)
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 802eb4e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 802eb52:	2b06      	cmp	r3, #6
 802eb54:	d10c      	bne.n	802eb70 <rx_dhcp_client+0x1c0>
 802eb56:	68fb      	ldr	r3, [r7, #12]
 802eb58:	689b      	ldr	r3, [r3, #8]
 802eb5a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 802eb5c:	429a      	cmp	r2, r3
 802eb5e:	d107      	bne.n	802eb70 <rx_dhcp_client+0x1c0>
    ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;
 802eb60:	68fb      	ldr	r3, [r7, #12]
 802eb62:	2201      	movs	r2, #1
 802eb64:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 802eb68:	68fb      	ldr	r3, [r7, #12]
 802eb6a:	2200      	movs	r2, #0
 802eb6c:	609a      	str	r2, [r3, #8]
 802eb6e:	e0ec      	b.n	802ed4a <rx_dhcp_client+0x39a>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 802eb70:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 802eb74:	2b02      	cmp	r3, #2
 802eb76:	d123      	bne.n	802ebc0 <rx_dhcp_client+0x210>
 802eb78:	68fb      	ldr	r3, [r7, #12]
 802eb7a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 802eb7e:	2b01      	cmp	r3, #1
 802eb80:	d11e      	bne.n	802ebc0 <rx_dhcp_client+0x210>
 802eb82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802eb84:	2b00      	cmp	r3, #0
 802eb86:	d01b      	beq.n	802ebc0 <rx_dhcp_client+0x210>
 802eb88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802eb8a:	2b00      	cmp	r3, #0
 802eb8c:	d018      	beq.n	802ebc0 <rx_dhcp_client+0x210>
 802eb8e:	6a3b      	ldr	r3, [r7, #32]
 802eb90:	2b00      	cmp	r3, #0
 802eb92:	d015      	beq.n	802ebc0 <rx_dhcp_client+0x210>
             lease) {  // DHCPOFFER
    // select IP, (4.4.1) (fallback to IP source addr on foul play)
    tx_dhcp_request_sel(ifp, ip,
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 802eb94:	68bb      	ldr	r3, [r7, #8]
 802eb96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802eb98:	695b      	ldr	r3, [r3, #20]
    tx_dhcp_request_sel(ifp, ip,
 802eb9a:	2b00      	cmp	r3, #0
 802eb9c:	d003      	beq.n	802eba6 <rx_dhcp_client+0x1f6>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 802eb9e:	68bb      	ldr	r3, [r7, #8]
 802eba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tx_dhcp_request_sel(ifp, ip,
 802eba2:	695b      	ldr	r3, [r3, #20]
 802eba4:	e002      	b.n	802ebac <rx_dhcp_client+0x1fc>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 802eba6:	68bb      	ldr	r3, [r7, #8]
 802eba8:	69db      	ldr	r3, [r3, #28]
    tx_dhcp_request_sel(ifp, ip,
 802ebaa:	68db      	ldr	r3, [r3, #12]
 802ebac:	461a      	mov	r2, r3
 802ebae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 802ebb0:	68f8      	ldr	r0, [r7, #12]
 802ebb2:	f7ff fc41 	bl	802e438 <tx_dhcp_request_sel>
    ifp->state = MG_TCPIP_STATE_REQ;  // REQUESTING state
 802ebb6:	68fb      	ldr	r3, [r7, #12]
 802ebb8:	2202      	movs	r2, #2
 802ebba:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 802ebbe:	e0c4      	b.n	802ed4a <rx_dhcp_client+0x39a>
  } else if (msgtype == 5) {          // DHCPACK
 802ebc0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 802ebc4:	2b05      	cmp	r3, #5
 802ebc6:	f040 80c0 	bne.w	802ed4a <rx_dhcp_client+0x39a>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 802ebca:	68fb      	ldr	r3, [r7, #12]
 802ebcc:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 802ebd0:	2b02      	cmp	r3, #2
 802ebd2:	f040 8081 	bne.w	802ecd8 <rx_dhcp_client+0x328>
 802ebd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802ebd8:	2b00      	cmp	r3, #0
 802ebda:	d07d      	beq.n	802ecd8 <rx_dhcp_client+0x328>
 802ebdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802ebde:	2b00      	cmp	r3, #0
 802ebe0:	d07a      	beq.n	802ecd8 <rx_dhcp_client+0x328>
 802ebe2:	6a3b      	ldr	r3, [r7, #32]
 802ebe4:	2b00      	cmp	r3, #0
 802ebe6:	d077      	beq.n	802ecd8 <rx_dhcp_client+0x328>
      ifp->lease_expire = ifp->now + lease * 1000;
 802ebe8:	68fb      	ldr	r3, [r7, #12]
 802ebea:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 802ebee:	6a39      	ldr	r1, [r7, #32]
 802ebf0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 802ebf4:	fb00 f101 	mul.w	r1, r0, r1
 802ebf8:	2000      	movs	r0, #0
 802ebfa:	4688      	mov	r8, r1
 802ebfc:	4681      	mov	r9, r0
 802ebfe:	eb12 0108 	adds.w	r1, r2, r8
 802ec02:	6039      	str	r1, [r7, #0]
 802ec04:	eb43 0309 	adc.w	r3, r3, r9
 802ec08:	607b      	str	r3, [r7, #4]
 802ec0a:	68fb      	ldr	r3, [r7, #12]
 802ec0c:	e9d7 1200 	ldrd	r1, r2, [r7]
 802ec10:	e9c3 1218 	strd	r1, r2, [r3, #96]	@ 0x60
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 802ec14:	4b56      	ldr	r3, [pc, #344]	@ (802ed70 <rx_dhcp_client+0x3c0>)
 802ec16:	681b      	ldr	r3, [r3, #0]
 802ec18:	2b01      	cmp	r3, #1
 802ec1a:	dd16      	ble.n	802ec4a <rx_dhcp_client+0x29a>
 802ec1c:	4b55      	ldr	r3, [pc, #340]	@ (802ed74 <rx_dhcp_client+0x3c4>)
 802ec1e:	f241 42e1 	movw	r2, #5345	@ 0x14e1
 802ec22:	4955      	ldr	r1, [pc, #340]	@ (802ed78 <rx_dhcp_client+0x3c8>)
 802ec24:	2002      	movs	r0, #2
 802ec26:	f7fc fad9 	bl	802b1dc <mg_log_prefix>
 802ec2a:	6a3c      	ldr	r4, [r7, #32]
 802ec2c:	68fb      	ldr	r3, [r7, #12]
 802ec2e:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 802ec32:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 802ec36:	f04f 0300 	mov.w	r3, #0
 802ec3a:	f7e2 f88d 	bl	8010d58 <__aeabi_uldivmod>
 802ec3e:	4602      	mov	r2, r0
 802ec40:	460b      	mov	r3, r1
 802ec42:	4621      	mov	r1, r4
 802ec44:	484d      	ldr	r0, [pc, #308]	@ (802ed7c <rx_dhcp_client+0x3cc>)
 802ec46:	f7fc fb19 	bl	802b27c <mg_log>
      // assume DHCP server = router until ARP resolves
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 802ec4a:	68fb      	ldr	r3, [r7, #12]
 802ec4c:	f103 0046 	add.w	r0, r3, #70	@ 0x46
 802ec50:	68bb      	ldr	r3, [r7, #8]
 802ec52:	691b      	ldr	r3, [r3, #16]
 802ec54:	3306      	adds	r3, #6
 802ec56:	2206      	movs	r2, #6
 802ec58:	4619      	mov	r1, r3
 802ec5a:	f008 fb05 	bl	8037268 <memcpy>
      ifp->ip = ip, ifp->gw = gw, ifp->mask = mask;
 802ec5e:	68fb      	ldr	r3, [r7, #12]
 802ec60:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 802ec62:	609a      	str	r2, [r3, #8]
 802ec64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 802ec66:	68fb      	ldr	r3, [r7, #12]
 802ec68:	611a      	str	r2, [r3, #16]
 802ec6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802ec6c:	68fb      	ldr	r3, [r7, #12]
 802ec6e:	60da      	str	r2, [r3, #12]
      ifp->state = MG_TCPIP_STATE_READY;  // BOUND state
 802ec70:	68fb      	ldr	r3, [r7, #12]
 802ec72:	2203      	movs	r2, #3
 802ec74:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      uint64_t rand;
      mg_random(&rand, sizeof(rand));
 802ec78:	f107 0310 	add.w	r3, r7, #16
 802ec7c:	2108      	movs	r1, #8
 802ec7e:	4618      	mov	r0, r3
 802ec80:	f003 fed3 	bl	8032a2a <mg_random>
      srand((unsigned int) (rand + mg_millis()));
 802ec84:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 802ec88:	4614      	mov	r4, r2
 802ec8a:	f003 ffdf 	bl	8032c4c <mg_millis>
 802ec8e:	4602      	mov	r2, r0
 802ec90:	460b      	mov	r3, r1
 802ec92:	4613      	mov	r3, r2
 802ec94:	4423      	add	r3, r4
 802ec96:	4618      	mov	r0, r3
 802ec98:	f006 fb5a 	bl	8035350 <srand>
      if (ifp->enable_req_dns && dns != 0)
 802ec9c:	68fb      	ldr	r3, [r7, #12]
 802ec9e:	7fdb      	ldrb	r3, [r3, #31]
 802eca0:	2b00      	cmp	r3, #0
 802eca2:	d009      	beq.n	802ecb8 <rx_dhcp_client+0x308>
 802eca4:	69fb      	ldr	r3, [r7, #28]
 802eca6:	2b00      	cmp	r3, #0
 802eca8:	d006      	beq.n	802ecb8 <rx_dhcp_client+0x308>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_DNS, &dns);
 802ecaa:	f107 031c 	add.w	r3, r7, #28
 802ecae:	461a      	mov	r2, r3
 802ecb0:	2101      	movs	r1, #1
 802ecb2:	68f8      	ldr	r0, [r7, #12]
 802ecb4:	f7ff f87a 	bl	802ddac <mg_tcpip_call>
      if (ifp->enable_req_sntp && sntp != 0)
 802ecb8:	68fb      	ldr	r3, [r7, #12]
 802ecba:	f893 3020 	ldrb.w	r3, [r3, #32]
 802ecbe:	2b00      	cmp	r3, #0
 802ecc0:	d042      	beq.n	802ed48 <rx_dhcp_client+0x398>
 802ecc2:	69bb      	ldr	r3, [r7, #24]
 802ecc4:	2b00      	cmp	r3, #0
 802ecc6:	d03f      	beq.n	802ed48 <rx_dhcp_client+0x398>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_SNTP, &sntp);
 802ecc8:	f107 0318 	add.w	r3, r7, #24
 802eccc:	461a      	mov	r2, r3
 802ecce:	2102      	movs	r1, #2
 802ecd0:	68f8      	ldr	r0, [r7, #12]
 802ecd2:	f7ff f86b 	bl	802ddac <mg_tcpip_call>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 802ecd6:	e037      	b.n	802ed48 <rx_dhcp_client+0x398>
    } else if (ifp->state == MG_TCPIP_STATE_READY && ifp->ip == ip) {  // renew
 802ecd8:	68fb      	ldr	r3, [r7, #12]
 802ecda:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 802ecde:	2b03      	cmp	r3, #3
 802ece0:	d133      	bne.n	802ed4a <rx_dhcp_client+0x39a>
 802ece2:	68fb      	ldr	r3, [r7, #12]
 802ece4:	689b      	ldr	r3, [r3, #8]
 802ece6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 802ece8:	429a      	cmp	r2, r3
 802ecea:	d12e      	bne.n	802ed4a <rx_dhcp_client+0x39a>
      ifp->lease_expire = ifp->now + lease * 1000;
 802ecec:	68fb      	ldr	r3, [r7, #12]
 802ecee:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 802ecf2:	6a39      	ldr	r1, [r7, #32]
 802ecf4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 802ecf8:	fb00 f101 	mul.w	r1, r0, r1
 802ecfc:	2000      	movs	r0, #0
 802ecfe:	460c      	mov	r4, r1
 802ed00:	4605      	mov	r5, r0
 802ed02:	eb12 0a04 	adds.w	sl, r2, r4
 802ed06:	eb43 0b05 	adc.w	fp, r3, r5
 802ed0a:	68fb      	ldr	r3, [r7, #12]
 802ed0c:	e9c3 ab18 	strd	sl, fp, [r3, #96]	@ 0x60
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 802ed10:	4b17      	ldr	r3, [pc, #92]	@ (802ed70 <rx_dhcp_client+0x3c0>)
 802ed12:	681b      	ldr	r3, [r3, #0]
 802ed14:	2b01      	cmp	r3, #1
 802ed16:	dd18      	ble.n	802ed4a <rx_dhcp_client+0x39a>
 802ed18:	4b16      	ldr	r3, [pc, #88]	@ (802ed74 <rx_dhcp_client+0x3c4>)
 802ed1a:	f241 42ef 	movw	r2, #5359	@ 0x14ef
 802ed1e:	4916      	ldr	r1, [pc, #88]	@ (802ed78 <rx_dhcp_client+0x3c8>)
 802ed20:	2002      	movs	r0, #2
 802ed22:	f7fc fa5b 	bl	802b1dc <mg_log_prefix>
 802ed26:	6a3c      	ldr	r4, [r7, #32]
 802ed28:	68fb      	ldr	r3, [r7, #12]
 802ed2a:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 802ed2e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 802ed32:	f04f 0300 	mov.w	r3, #0
 802ed36:	f7e2 f80f 	bl	8010d58 <__aeabi_uldivmod>
 802ed3a:	4602      	mov	r2, r0
 802ed3c:	460b      	mov	r3, r1
 802ed3e:	4621      	mov	r1, r4
 802ed40:	480e      	ldr	r0, [pc, #56]	@ (802ed7c <rx_dhcp_client+0x3cc>)
 802ed42:	f7fc fa9b 	bl	802b27c <mg_log>
 802ed46:	e000      	b.n	802ed4a <rx_dhcp_client+0x39a>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 802ed48:	bf00      	nop
    }  // TODO(): accept provided T1/T2 and store server IP for renewal (4.4)
  }
  if (ifp->state != state) onstatechange(ifp);
 802ed4a:	68fb      	ldr	r3, [r7, #12]
 802ed4c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 802ed50:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 802ed54:	429a      	cmp	r2, r3
 802ed56:	d006      	beq.n	802ed66 <rx_dhcp_client+0x3b6>
 802ed58:	68f8      	ldr	r0, [r7, #12]
 802ed5a:	f7ff f989 	bl	802e070 <onstatechange>
 802ed5e:	e002      	b.n	802ed66 <rx_dhcp_client+0x3b6>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 802ed60:	bf00      	nop
 802ed62:	e000      	b.n	802ed66 <rx_dhcp_client+0x3b6>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 802ed64:	bf00      	nop
}
 802ed66:	3740      	adds	r7, #64	@ 0x40
 802ed68:	46bd      	mov	sp, r7
 802ed6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802ed6e:	bf00      	nop
 802ed70:	20000298 	.word	0x20000298
 802ed74:	08044668 	.word	0x08044668
 802ed78:	08041564 	.word	0x08041564
 802ed7c:	08042d04 	.word	0x08042d04

0802ed80 <rx_dhcp_server>:

// Simple DHCP server that assigns a next IP address: ifp->ip + 1
static void rx_dhcp_server(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 802ed80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ed84:	b0d6      	sub	sp, #344	@ 0x158
 802ed86:	af04      	add	r7, sp, #16
 802ed88:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802ed8c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 802ed90:	6018      	str	r0, [r3, #0]
 802ed92:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802ed96:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 802ed9a:	6019      	str	r1, [r3, #0]
  uint8_t op = 0, *p = pkt->dhcp->options,
 802ed9c:	2300      	movs	r3, #0
 802ed9e:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
 802eda2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802eda6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 802edaa:	681b      	ldr	r3, [r3, #0]
 802edac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802edae:	33f0      	adds	r3, #240	@ 0xf0
 802edb0:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 802edb4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802edb8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 802edbc:	681b      	ldr	r3, [r3, #0]
 802edbe:	681a      	ldr	r2, [r3, #0]
 802edc0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802edc4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 802edc8:	681b      	ldr	r3, [r3, #0]
 802edca:	685b      	ldr	r3, [r3, #4]
 802edcc:	4413      	add	r3, r2
 802edce:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 802edd2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802edd6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 802edda:	681b      	ldr	r3, [r3, #0]
 802eddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802edde:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 802ede2:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 802ede6:	429a      	cmp	r2, r3
 802ede8:	f0c0 81b0 	bcc.w	802f14c <rx_dhcp_server+0x3cc>
  // struct dhcp *req = pkt->dhcp;
  struct dhcp res = {2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 802edec:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802edf0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 802edf4:	4ad8      	ldr	r2, [pc, #864]	@ (802f158 <rx_dhcp_server+0x3d8>)
 802edf6:	4618      	mov	r0, r3
 802edf8:	4611      	mov	r1, r2
 802edfa:	f44f 7388 	mov.w	r3, #272	@ 0x110
 802edfe:	461a      	mov	r2, r3
 802ee00:	f008 fa32 	bl	8037268 <memcpy>
  res.yiaddr = ifp->ip;
 802ee04:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802ee08:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 802ee0c:	681b      	ldr	r3, [r3, #0]
 802ee0e:	689a      	ldr	r2, [r3, #8]
 802ee10:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802ee14:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 802ee18:	611a      	str	r2, [r3, #16]
  ((uint8_t *) (&res.yiaddr))[3]++;                // Offer our IP + 1
 802ee1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 802ee1e:	3310      	adds	r3, #16
 802ee20:	3303      	adds	r3, #3
 802ee22:	781a      	ldrb	r2, [r3, #0]
 802ee24:	3201      	adds	r2, #1
 802ee26:	b2d2      	uxtb	r2, r2
 802ee28:	701a      	strb	r2, [r3, #0]
  while (p + 1 < end && p[0] != 255) {             // Parse options
 802ee2a:	e020      	b.n	802ee6e <rx_dhcp_server+0xee>
    if (p[0] == 53 && p[1] == 1 && p + 2 < end) {  // Message type
 802ee2c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 802ee30:	781b      	ldrb	r3, [r3, #0]
 802ee32:	2b35      	cmp	r3, #53	@ 0x35
 802ee34:	d111      	bne.n	802ee5a <rx_dhcp_server+0xda>
 802ee36:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 802ee3a:	3301      	adds	r3, #1
 802ee3c:	781b      	ldrb	r3, [r3, #0]
 802ee3e:	2b01      	cmp	r3, #1
 802ee40:	d10b      	bne.n	802ee5a <rx_dhcp_server+0xda>
 802ee42:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 802ee46:	3302      	adds	r3, #2
 802ee48:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 802ee4c:	429a      	cmp	r2, r3
 802ee4e:	d904      	bls.n	802ee5a <rx_dhcp_server+0xda>
      op = p[2];
 802ee50:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 802ee54:	789b      	ldrb	r3, [r3, #2]
 802ee56:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
    }
    p += p[1] + 2;
 802ee5a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 802ee5e:	3301      	adds	r3, #1
 802ee60:	781b      	ldrb	r3, [r3, #0]
 802ee62:	3302      	adds	r3, #2
 802ee64:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 802ee68:	4413      	add	r3, r2
 802ee6a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
  while (p + 1 < end && p[0] != 255) {             // Parse options
 802ee6e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 802ee72:	3301      	adds	r3, #1
 802ee74:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 802ee78:	429a      	cmp	r2, r3
 802ee7a:	d904      	bls.n	802ee86 <rx_dhcp_server+0x106>
 802ee7c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 802ee80:	781b      	ldrb	r3, [r3, #0]
 802ee82:	2bff      	cmp	r3, #255	@ 0xff
 802ee84:	d1d2      	bne.n	802ee2c <rx_dhcp_server+0xac>
  }
  if (op == 1 || op == 3) {         // DHCP Discover or DHCP Request
 802ee86:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 802ee8a:	2b01      	cmp	r3, #1
 802ee8c:	d004      	beq.n	802ee98 <rx_dhcp_server+0x118>
 802ee8e:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 802ee92:	2b03      	cmp	r3, #3
 802ee94:	f040 815b 	bne.w	802f14e <rx_dhcp_server+0x3ce>
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 802ee98:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 802ee9c:	2b01      	cmp	r3, #1
 802ee9e:	d101      	bne.n	802eea4 <rx_dhcp_server+0x124>
 802eea0:	2302      	movs	r3, #2
 802eea2:	e000      	b.n	802eea6 <rx_dhcp_server+0x126>
 802eea4:	2305      	movs	r3, #5
 802eea6:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
    uint8_t opts[] = {
 802eeaa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802eeae:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802eeb2:	2235      	movs	r2, #53	@ 0x35
 802eeb4:	701a      	strb	r2, [r3, #0]
 802eeb6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802eeba:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802eebe:	2201      	movs	r2, #1
 802eec0:	705a      	strb	r2, [r3, #1]
 802eec2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802eec6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802eeca:	f897 213b 	ldrb.w	r2, [r7, #315]	@ 0x13b
 802eece:	709a      	strb	r2, [r3, #2]
 802eed0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802eed4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802eed8:	2201      	movs	r2, #1
 802eeda:	70da      	strb	r2, [r3, #3]
 802eedc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802eee0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802eee4:	2204      	movs	r2, #4
 802eee6:	711a      	strb	r2, [r3, #4]
 802eee8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802eeec:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802eef0:	2200      	movs	r2, #0
 802eef2:	715a      	strb	r2, [r3, #5]
 802eef4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802eef8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802eefc:	2200      	movs	r2, #0
 802eefe:	719a      	strb	r2, [r3, #6]
 802ef00:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802ef04:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802ef08:	2200      	movs	r2, #0
 802ef0a:	71da      	strb	r2, [r3, #7]
 802ef0c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802ef10:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802ef14:	2200      	movs	r2, #0
 802ef16:	721a      	strb	r2, [r3, #8]
 802ef18:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802ef1c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802ef20:	2236      	movs	r2, #54	@ 0x36
 802ef22:	725a      	strb	r2, [r3, #9]
 802ef24:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802ef28:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802ef2c:	2204      	movs	r2, #4
 802ef2e:	729a      	strb	r2, [r3, #10]
 802ef30:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802ef34:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802ef38:	2200      	movs	r2, #0
 802ef3a:	72da      	strb	r2, [r3, #11]
 802ef3c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802ef40:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802ef44:	2200      	movs	r2, #0
 802ef46:	731a      	strb	r2, [r3, #12]
 802ef48:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802ef4c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802ef50:	2200      	movs	r2, #0
 802ef52:	735a      	strb	r2, [r3, #13]
 802ef54:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802ef58:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802ef5c:	2200      	movs	r2, #0
 802ef5e:	739a      	strb	r2, [r3, #14]
 802ef60:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802ef64:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802ef68:	220c      	movs	r2, #12
 802ef6a:	73da      	strb	r2, [r3, #15]
 802ef6c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802ef70:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802ef74:	2203      	movs	r2, #3
 802ef76:	741a      	strb	r2, [r3, #16]
 802ef78:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802ef7c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802ef80:	226d      	movs	r2, #109	@ 0x6d
 802ef82:	745a      	strb	r2, [r3, #17]
 802ef84:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802ef88:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802ef8c:	2269      	movs	r2, #105	@ 0x69
 802ef8e:	749a      	strb	r2, [r3, #18]
 802ef90:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802ef94:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802ef98:	2270      	movs	r2, #112	@ 0x70
 802ef9a:	74da      	strb	r2, [r3, #19]
 802ef9c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802efa0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802efa4:	2233      	movs	r2, #51	@ 0x33
 802efa6:	751a      	strb	r2, [r3, #20]
 802efa8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802efac:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802efb0:	2204      	movs	r2, #4
 802efb2:	755a      	strb	r2, [r3, #21]
 802efb4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802efb8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802efbc:	22ff      	movs	r2, #255	@ 0xff
 802efbe:	759a      	strb	r2, [r3, #22]
 802efc0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802efc4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802efc8:	22ff      	movs	r2, #255	@ 0xff
 802efca:	75da      	strb	r2, [r3, #23]
 802efcc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802efd0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802efd4:	22ff      	movs	r2, #255	@ 0xff
 802efd6:	761a      	strb	r2, [r3, #24]
 802efd8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802efdc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802efe0:	22ff      	movs	r2, #255	@ 0xff
 802efe2:	765a      	strb	r2, [r3, #25]
 802efe4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802efe8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802efec:	22ff      	movs	r2, #255	@ 0xff
 802efee:	769a      	strb	r2, [r3, #26]
        54, 4, 0,   0,   0,   0,    // Server ID
        12, 3, 'm', 'i', 'p',       // Host name: "mip"
        51, 4, 255, 255, 255, 255,  // Lease time
        255                         // End of options
    };
    memcpy(&res.hwaddr, pkt->dhcp->hwaddr, 6);
 802eff0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802eff4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 802eff8:	681b      	ldr	r3, [r3, #0]
 802effa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802effc:	f103 011c 	add.w	r1, r3, #28
 802f000:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 802f004:	331c      	adds	r3, #28
 802f006:	2206      	movs	r2, #6
 802f008:	4618      	mov	r0, r3
 802f00a:	f008 f92d 	bl	8037268 <memcpy>
    memcpy(opts + 5, &ifp->mask, sizeof(ifp->mask));
 802f00e:	f107 030c 	add.w	r3, r7, #12
 802f012:	3305      	adds	r3, #5
 802f014:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 802f018:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 802f01c:	6812      	ldr	r2, [r2, #0]
 802f01e:	320c      	adds	r2, #12
 802f020:	6812      	ldr	r2, [r2, #0]
 802f022:	601a      	str	r2, [r3, #0]
    memcpy(opts + 11, &ifp->ip, sizeof(ifp->ip));
 802f024:	f107 030c 	add.w	r3, r7, #12
 802f028:	330b      	adds	r3, #11
 802f02a:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 802f02e:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 802f032:	6812      	ldr	r2, [r2, #0]
 802f034:	3208      	adds	r2, #8
 802f036:	6812      	ldr	r2, [r2, #0]
 802f038:	601a      	str	r2, [r3, #0]
    memcpy(&res.options, opts, sizeof(opts));
 802f03a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f03e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 802f042:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 802f046:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 802f04a:	f103 04f0 	add.w	r4, r3, #240	@ 0xf0
 802f04e:	4615      	mov	r5, r2
 802f050:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802f052:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802f054:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 802f058:	c403      	stmia	r4!, {r0, r1}
 802f05a:	8022      	strh	r2, [r4, #0]
 802f05c:	3402      	adds	r4, #2
 802f05e:	0c13      	lsrs	r3, r2, #16
 802f060:	7023      	strb	r3, [r4, #0]
    res.magic = pkt->dhcp->magic;
 802f062:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f066:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 802f06a:	681b      	ldr	r3, [r3, #0]
 802f06c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802f06e:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 802f072:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f076:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 802f07a:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
    res.xid = pkt->dhcp->xid;
 802f07e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f082:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 802f086:	681b      	ldr	r3, [r3, #0]
 802f088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802f08a:	685a      	ldr	r2, [r3, #4]
 802f08c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f090:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 802f094:	605a      	str	r2, [r3, #4]
    if (ifp->enable_get_gateway) {
 802f096:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f09a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 802f09e:	681b      	ldr	r3, [r3, #0]
 802f0a0:	7f9b      	ldrb	r3, [r3, #30]
 802f0a2:	2b00      	cmp	r3, #0
 802f0a4:	d01c      	beq.n	802f0e0 <rx_dhcp_server+0x360>
      ifp->gw = res.yiaddr;
 802f0a6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f0aa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 802f0ae:	691a      	ldr	r2, [r3, #16]
 802f0b0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f0b4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 802f0b8:	681b      	ldr	r3, [r3, #0]
 802f0ba:	611a      	str	r2, [r3, #16]
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 802f0bc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f0c0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 802f0c4:	681b      	ldr	r3, [r3, #0]
 802f0c6:	f103 0046 	add.w	r0, r3, #70	@ 0x46
 802f0ca:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f0ce:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 802f0d2:	681b      	ldr	r3, [r3, #0]
 802f0d4:	691b      	ldr	r3, [r3, #16]
 802f0d6:	3306      	adds	r3, #6
 802f0d8:	2206      	movs	r2, #6
 802f0da:	4619      	mov	r1, r3
 802f0dc:	f008 f8c4 	bl	8037268 <memcpy>
    }
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 802f0e0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f0e4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 802f0e8:	681b      	ldr	r3, [r3, #0]
 802f0ea:	691b      	ldr	r3, [r3, #16]
 802f0ec:	1d9d      	adds	r5, r3, #6
 802f0ee:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f0f2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 802f0f6:	681b      	ldr	r3, [r3, #0]
 802f0f8:	689e      	ldr	r6, [r3, #8]
 802f0fa:	2043      	movs	r0, #67	@ 0x43
 802f0fc:	f003 fd15 	bl	8032b2a <mg_ntohs>
 802f100:	4603      	mov	r3, r0
 802f102:	4698      	mov	r8, r3
 802f104:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 802f108:	2b01      	cmp	r3, #1
 802f10a:	d005      	beq.n	802f118 <rx_dhcp_server+0x398>
 802f10c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f110:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 802f114:	691c      	ldr	r4, [r3, #16]
 802f116:	e001      	b.n	802f11c <rx_dhcp_server+0x39c>
 802f118:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 802f11c:	2044      	movs	r0, #68	@ 0x44
 802f11e:	f003 fd04 	bl	8032b2a <mg_ntohs>
 802f122:	4603      	mov	r3, r0
 802f124:	461a      	mov	r2, r3
 802f126:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f12a:	f5a3 70a2 	sub.w	r0, r3, #324	@ 0x144
 802f12e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 802f132:	9303      	str	r3, [sp, #12]
 802f134:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 802f138:	9302      	str	r3, [sp, #8]
 802f13a:	9201      	str	r2, [sp, #4]
 802f13c:	9400      	str	r4, [sp, #0]
 802f13e:	4643      	mov	r3, r8
 802f140:	4632      	mov	r2, r6
 802f142:	4629      	mov	r1, r5
 802f144:	6800      	ldr	r0, [r0, #0]
 802f146:	f7ff f87d 	bl	802e244 <tx_udp>
 802f14a:	e000      	b.n	802f14e <rx_dhcp_server+0x3ce>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 802f14c:	bf00      	nop
           op == 1 ? ~0U : res.yiaddr, mg_htons(68), &res, sizeof(res));
  }
}
 802f14e:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 802f152:	46bd      	mov	sp, r7
 802f154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802f158:	08042d1c 	.word	0x08042d1c

0802f15c <rx_udp>:

static void rx_udp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 802f15c:	b580      	push	{r7, lr}
 802f15e:	b084      	sub	sp, #16
 802f160:	af00      	add	r7, sp, #0
 802f162:	6078      	str	r0, [r7, #4]
 802f164:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, true);
 802f166:	687b      	ldr	r3, [r7, #4]
 802f168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802f16a:	2201      	movs	r2, #1
 802f16c:	6839      	ldr	r1, [r7, #0]
 802f16e:	4618      	mov	r0, r3
 802f170:	f7ff fa46 	bl	802e600 <getpeer>
 802f174:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 802f176:	68fb      	ldr	r3, [r7, #12]
 802f178:	2b00      	cmp	r3, #0
 802f17a:	d059      	beq.n	802f230 <rx_udp+0xd4>
    // No UDP listener on this port. Should send ICMP, but keep silent.
  } else {
    c->rem.port = pkt->udp->sport;
 802f17c:	683b      	ldr	r3, [r7, #0]
 802f17e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802f180:	881b      	ldrh	r3, [r3, #0]
 802f182:	b29a      	uxth	r2, r3
 802f184:	68fb      	ldr	r3, [r7, #12]
 802f186:	859a      	strh	r2, [r3, #44]	@ 0x2c
    memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 802f188:	68fb      	ldr	r3, [r7, #12]
 802f18a:	331c      	adds	r3, #28
 802f18c:	683a      	ldr	r2, [r7, #0]
 802f18e:	69d2      	ldr	r2, [r2, #28]
 802f190:	320c      	adds	r2, #12
 802f192:	6812      	ldr	r2, [r2, #0]
 802f194:	601a      	str	r2, [r3, #0]
    struct connstate *s = (struct connstate *) (c + 1);
 802f196:	68fb      	ldr	r3, [r7, #12]
 802f198:	33b0      	adds	r3, #176	@ 0xb0
 802f19a:	60bb      	str	r3, [r7, #8]
    memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 802f19c:	68bb      	ldr	r3, [r7, #8]
 802f19e:	f103 0018 	add.w	r0, r3, #24
 802f1a2:	683b      	ldr	r3, [r7, #0]
 802f1a4:	691b      	ldr	r3, [r3, #16]
 802f1a6:	3306      	adds	r3, #6
 802f1a8:	2206      	movs	r2, #6
 802f1aa:	4619      	mov	r1, r3
 802f1ac:	f008 f85c 	bl	8037268 <memcpy>
    if (c->recv.len >= MG_MAX_RECV_SIZE) {
 802f1b0:	68fb      	ldr	r3, [r7, #12]
 802f1b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802f1b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 802f1b8:	d304      	bcc.n	802f1c4 <rx_udp+0x68>
      mg_error(c, "max_recv_buf_size reached");
 802f1ba:	491f      	ldr	r1, [pc, #124]	@ (802f238 <rx_udp+0xdc>)
 802f1bc:	68f8      	ldr	r0, [r7, #12]
 802f1be:	f7f6 fc47 	bl	8025a50 <mg_error>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
      c->recv.len += pkt->pay.len;
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 802f1c2:	e035      	b.n	802f230 <rx_udp+0xd4>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 802f1c4:	68fb      	ldr	r3, [r7, #12]
 802f1c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 802f1c8:	68fb      	ldr	r3, [r7, #12]
 802f1ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802f1cc:	1ad2      	subs	r2, r2, r3
 802f1ce:	683b      	ldr	r3, [r7, #0]
 802f1d0:	68db      	ldr	r3, [r3, #12]
 802f1d2:	429a      	cmp	r2, r3
 802f1d4:	d212      	bcs.n	802f1fc <rx_udp+0xa0>
               !mg_iobuf_resize(&c->recv, c->recv.len + pkt->pay.len)) {
 802f1d6:	68fb      	ldr	r3, [r7, #12]
 802f1d8:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 802f1dc:	68fb      	ldr	r3, [r7, #12]
 802f1de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 802f1e0:	683b      	ldr	r3, [r7, #0]
 802f1e2:	68db      	ldr	r3, [r3, #12]
 802f1e4:	4413      	add	r3, r2
 802f1e6:	4619      	mov	r1, r3
 802f1e8:	f7fb f808 	bl	802a1fc <mg_iobuf_resize>
 802f1ec:	4603      	mov	r3, r0
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 802f1ee:	2b00      	cmp	r3, #0
 802f1f0:	d104      	bne.n	802f1fc <rx_udp+0xa0>
      mg_error(c, "oom");
 802f1f2:	4912      	ldr	r1, [pc, #72]	@ (802f23c <rx_udp+0xe0>)
 802f1f4:	68f8      	ldr	r0, [r7, #12]
 802f1f6:	f7f6 fc2b 	bl	8025a50 <mg_error>
}
 802f1fa:	e019      	b.n	802f230 <rx_udp+0xd4>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
 802f1fc:	68fb      	ldr	r3, [r7, #12]
 802f1fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 802f200:	68fb      	ldr	r3, [r7, #12]
 802f202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802f204:	18d0      	adds	r0, r2, r3
 802f206:	683b      	ldr	r3, [r7, #0]
 802f208:	6899      	ldr	r1, [r3, #8]
 802f20a:	683b      	ldr	r3, [r7, #0]
 802f20c:	68db      	ldr	r3, [r3, #12]
 802f20e:	461a      	mov	r2, r3
 802f210:	f008 f82a 	bl	8037268 <memcpy>
      c->recv.len += pkt->pay.len;
 802f214:	68fb      	ldr	r3, [r7, #12]
 802f216:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 802f218:	683b      	ldr	r3, [r7, #0]
 802f21a:	68db      	ldr	r3, [r3, #12]
 802f21c:	441a      	add	r2, r3
 802f21e:	68fb      	ldr	r3, [r7, #12]
 802f220:	641a      	str	r2, [r3, #64]	@ 0x40
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 802f222:	683b      	ldr	r3, [r7, #0]
 802f224:	330c      	adds	r3, #12
 802f226:	461a      	mov	r2, r3
 802f228:	2107      	movs	r1, #7
 802f22a:	68f8      	ldr	r0, [r7, #12]
 802f22c:	f7f6 fbf0 	bl	8025a10 <mg_call>
}
 802f230:	bf00      	nop
 802f232:	3710      	adds	r7, #16
 802f234:	46bd      	mov	sp, r7
 802f236:	bd80      	pop	{r7, pc}
 802f238:	08042e2c 	.word	0x08042e2c
 802f23c:	08042e48 	.word	0x08042e48

0802f240 <tx_tcp>:

static size_t tx_tcp(struct mg_tcpip_if *ifp, uint8_t *dst_mac, uint32_t dst_ip,
                     uint8_t flags, uint16_t sport, uint16_t dport,
                     uint32_t seq, uint32_t ack, const void *buf, size_t len) {
 802f240:	b5f0      	push	{r4, r5, r6, r7, lr}
 802f242:	b091      	sub	sp, #68	@ 0x44
 802f244:	af06      	add	r7, sp, #24
 802f246:	60f8      	str	r0, [r7, #12]
 802f248:	60b9      	str	r1, [r7, #8]
 802f24a:	607a      	str	r2, [r7, #4]
 802f24c:	70fb      	strb	r3, [r7, #3]
    buf = opts;
    len = sizeof(opts);
  }
#endif
  struct ip *ip =
      tx_ip(ifp, dst_mac, 6, ifp->ip, dst_ip, sizeof(struct tcp) + len);
 802f24e:	68fb      	ldr	r3, [r7, #12]
 802f250:	689a      	ldr	r2, [r3, #8]
 802f252:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802f254:	3314      	adds	r3, #20
 802f256:	9301      	str	r3, [sp, #4]
 802f258:	687b      	ldr	r3, [r7, #4]
 802f25a:	9300      	str	r3, [sp, #0]
 802f25c:	4613      	mov	r3, r2
 802f25e:	2206      	movs	r2, #6
 802f260:	68b9      	ldr	r1, [r7, #8]
 802f262:	68f8      	ldr	r0, [r7, #12]
 802f264:	f7fe ff98 	bl	802e198 <tx_ip>
 802f268:	6278      	str	r0, [r7, #36]	@ 0x24
  struct tcp *tcp = (struct tcp *) (ip + 1);
 802f26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802f26c:	3314      	adds	r3, #20
 802f26e:	623b      	str	r3, [r7, #32]
  memset(tcp, 0, sizeof(*tcp));
 802f270:	2214      	movs	r2, #20
 802f272:	2100      	movs	r1, #0
 802f274:	6a38      	ldr	r0, [r7, #32]
 802f276:	f006 fdbb 	bl	8035df0 <memset>
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 802f27a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802f27c:	2b00      	cmp	r3, #0
 802f27e:	d009      	beq.n	802f294 <tx_tcp+0x54>
 802f280:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802f282:	2b00      	cmp	r3, #0
 802f284:	d006      	beq.n	802f294 <tx_tcp+0x54>
 802f286:	6a3b      	ldr	r3, [r7, #32]
 802f288:	3314      	adds	r3, #20
 802f28a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802f28c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 802f28e:	4618      	mov	r0, r3
 802f290:	f006 fd94 	bl	8035dbc <memmove>
  tcp->sport = sport;
 802f294:	6a3b      	ldr	r3, [r7, #32]
 802f296:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 802f29a:	801a      	strh	r2, [r3, #0]
  tcp->dport = dport;
 802f29c:	6a3b      	ldr	r3, [r7, #32]
 802f29e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 802f2a2:	805a      	strh	r2, [r3, #2]
  tcp->seq = seq;
 802f2a4:	6a3b      	ldr	r3, [r7, #32]
 802f2a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802f2a8:	605a      	str	r2, [r3, #4]
  tcp->ack = ack;
 802f2aa:	6a3b      	ldr	r3, [r7, #32]
 802f2ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802f2ae:	609a      	str	r2, [r3, #8]
  tcp->flags = flags;
 802f2b0:	6a3b      	ldr	r3, [r7, #32]
 802f2b2:	78fa      	ldrb	r2, [r7, #3]
 802f2b4:	735a      	strb	r2, [r3, #13]
  tcp->win = mg_htons(MIP_TCP_WIN);
 802f2b6:	f241 7070 	movw	r0, #6000	@ 0x1770
 802f2ba:	f003 fc36 	bl	8032b2a <mg_ntohs>
 802f2be:	4603      	mov	r3, r0
 802f2c0:	461a      	mov	r2, r3
 802f2c2:	6a3b      	ldr	r3, [r7, #32]
 802f2c4:	81da      	strh	r2, [r3, #14]
  tcp->off = (uint8_t) (sizeof(*tcp) / 4 << 4);
 802f2c6:	6a3b      	ldr	r3, [r7, #32]
 802f2c8:	2250      	movs	r2, #80	@ 0x50
 802f2ca:	731a      	strb	r2, [r3, #12]
  // if (flags & TH_SYN) tcp->off = 0x70;  // Handshake? header size 28 bytes

  uint32_t cs = 0;
 802f2cc:	2300      	movs	r3, #0
 802f2ce:	61fb      	str	r3, [r7, #28]
  uint16_t n = (uint16_t) (sizeof(*tcp) + len);
 802f2d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802f2d2:	b29b      	uxth	r3, r3
 802f2d4:	3314      	adds	r3, #20
 802f2d6:	837b      	strh	r3, [r7, #26]
  uint8_t pseudo[] = {0, ip->proto, (uint8_t) (n >> 8), (uint8_t) (n & 255)};
 802f2d8:	2300      	movs	r3, #0
 802f2da:	753b      	strb	r3, [r7, #20]
 802f2dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802f2de:	7a5b      	ldrb	r3, [r3, #9]
 802f2e0:	757b      	strb	r3, [r7, #21]
 802f2e2:	8b7b      	ldrh	r3, [r7, #26]
 802f2e4:	0a1b      	lsrs	r3, r3, #8
 802f2e6:	b29b      	uxth	r3, r3
 802f2e8:	b2db      	uxtb	r3, r3
 802f2ea:	75bb      	strb	r3, [r7, #22]
 802f2ec:	8b7b      	ldrh	r3, [r7, #26]
 802f2ee:	b2db      	uxtb	r3, r3
 802f2f0:	75fb      	strb	r3, [r7, #23]
  cs = csumup(cs, tcp, n);
 802f2f2:	8b7b      	ldrh	r3, [r7, #26]
 802f2f4:	461a      	mov	r2, r3
 802f2f6:	6a39      	ldr	r1, [r7, #32]
 802f2f8:	69f8      	ldr	r0, [r7, #28]
 802f2fa:	f7fe fd89 	bl	802de10 <csumup>
 802f2fe:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 802f300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802f302:	330c      	adds	r3, #12
 802f304:	2204      	movs	r2, #4
 802f306:	4619      	mov	r1, r3
 802f308:	69f8      	ldr	r0, [r7, #28]
 802f30a:	f7fe fd81 	bl	802de10 <csumup>
 802f30e:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 802f310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802f312:	3310      	adds	r3, #16
 802f314:	2204      	movs	r2, #4
 802f316:	4619      	mov	r1, r3
 802f318:	69f8      	ldr	r0, [r7, #28]
 802f31a:	f7fe fd79 	bl	802de10 <csumup>
 802f31e:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, pseudo, sizeof(pseudo));
 802f320:	f107 0314 	add.w	r3, r7, #20
 802f324:	2204      	movs	r2, #4
 802f326:	4619      	mov	r1, r3
 802f328:	69f8      	ldr	r0, [r7, #28]
 802f32a:	f7fe fd71 	bl	802de10 <csumup>
 802f32e:	61f8      	str	r0, [r7, #28]
  tcp->csum = csumfin(cs);
 802f330:	69f8      	ldr	r0, [r7, #28]
 802f332:	f7fe fd98 	bl	802de66 <csumfin>
 802f336:	4603      	mov	r3, r0
 802f338:	461a      	mov	r2, r3
 802f33a:	6a3b      	ldr	r3, [r7, #32]
 802f33c:	821a      	strh	r2, [r3, #16]
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 802f33e:	4b21      	ldr	r3, [pc, #132]	@ (802f3c4 <tx_tcp+0x184>)
 802f340:	681b      	ldr	r3, [r3, #0]
 802f342:	2b03      	cmp	r3, #3
 802f344:	dd2c      	ble.n	802f3a0 <tx_tcp+0x160>
 802f346:	4b20      	ldr	r3, [pc, #128]	@ (802f3c8 <tx_tcp+0x188>)
 802f348:	f241 5254 	movw	r2, #5460	@ 0x1554
 802f34c:	491f      	ldr	r1, [pc, #124]	@ (802f3cc <tx_tcp+0x18c>)
 802f34e:	2004      	movs	r0, #4
 802f350:	f7fb ff44 	bl	802b1dc <mg_log_prefix>
 802f354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802f356:	f103 050c 	add.w	r5, r3, #12
 802f35a:	6a3b      	ldr	r3, [r7, #32]
 802f35c:	881b      	ldrh	r3, [r3, #0]
 802f35e:	b29b      	uxth	r3, r3
 802f360:	4618      	mov	r0, r3
 802f362:	f003 fbe2 	bl	8032b2a <mg_ntohs>
 802f366:	4603      	mov	r3, r0
 802f368:	461e      	mov	r6, r3
 802f36a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802f36c:	f103 0410 	add.w	r4, r3, #16
 802f370:	6a3b      	ldr	r3, [r7, #32]
 802f372:	885b      	ldrh	r3, [r3, #2]
 802f374:	b29b      	uxth	r3, r3
 802f376:	4618      	mov	r0, r3
 802f378:	f003 fbd7 	bl	8032b2a <mg_ntohs>
 802f37c:	4603      	mov	r3, r0
 802f37e:	461a      	mov	r2, r3
 802f380:	6a3b      	ldr	r3, [r7, #32]
 802f382:	7b5b      	ldrb	r3, [r3, #13]
 802f384:	4619      	mov	r1, r3
 802f386:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802f388:	9304      	str	r3, [sp, #16]
 802f38a:	9103      	str	r1, [sp, #12]
 802f38c:	9202      	str	r2, [sp, #8]
 802f38e:	9401      	str	r4, [sp, #4]
 802f390:	4b0f      	ldr	r3, [pc, #60]	@ (802f3d0 <tx_tcp+0x190>)
 802f392:	9300      	str	r3, [sp, #0]
 802f394:	4633      	mov	r3, r6
 802f396:	462a      	mov	r2, r5
 802f398:	490d      	ldr	r1, [pc, #52]	@ (802f3d0 <tx_tcp+0x190>)
 802f39a:	480e      	ldr	r0, [pc, #56]	@ (802f3d4 <tx_tcp+0x194>)
 802f39c:	f7fb ff6e 	bl	802b27c <mg_log>
              mg_ntohs(tcp->sport), mg_print_ip4, &ip->dst,
              mg_ntohs(tcp->dport), tcp->flags, len));
  // mg_hexdump(ifp->tx.buf, PDIFF(ifp->tx.buf, tcp + 1) + len);
  return ether_output(ifp, PDIFF(ifp->tx.buf, tcp + 1) + len);
 802f3a0:	6a3b      	ldr	r3, [r7, #32]
 802f3a2:	f103 0214 	add.w	r2, r3, #20
 802f3a6:	68fb      	ldr	r3, [r7, #12]
 802f3a8:	695b      	ldr	r3, [r3, #20]
 802f3aa:	1ad3      	subs	r3, r2, r3
 802f3ac:	461a      	mov	r2, r3
 802f3ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802f3b0:	4413      	add	r3, r2
 802f3b2:	4619      	mov	r1, r3
 802f3b4:	68f8      	ldr	r0, [r7, #12]
 802f3b6:	f7fe fde1 	bl	802df7c <ether_output>
 802f3ba:	4603      	mov	r3, r0
}
 802f3bc:	4618      	mov	r0, r3
 802f3be:	372c      	adds	r7, #44	@ 0x2c
 802f3c0:	46bd      	mov	sp, r7
 802f3c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802f3c4:	20000298 	.word	0x20000298
 802f3c8:	08044678 	.word	0x08044678
 802f3cc:	08041564 	.word	0x08041564
 802f3d0:	080313cd 	.word	0x080313cd
 802f3d4:	08042e4c 	.word	0x08042e4c

0802f3d8 <tx_tcp_pkt>:

static size_t tx_tcp_pkt(struct mg_tcpip_if *ifp, struct pkt *pkt,
                         uint8_t flags, uint32_t seq, const void *buf,
                         size_t len) {
 802f3d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802f3dc:	b08c      	sub	sp, #48	@ 0x30
 802f3de:	af06      	add	r7, sp, #24
 802f3e0:	60f8      	str	r0, [r7, #12]
 802f3e2:	60b9      	str	r1, [r7, #8]
 802f3e4:	603b      	str	r3, [r7, #0]
 802f3e6:	4613      	mov	r3, r2
 802f3e8:	71fb      	strb	r3, [r7, #7]
  uint32_t delta = (pkt->tcp->flags & (TH_SYN | TH_FIN)) ? 1 : 0;
 802f3ea:	68bb      	ldr	r3, [r7, #8]
 802f3ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802f3ee:	7b5b      	ldrb	r3, [r3, #13]
 802f3f0:	f003 0303 	and.w	r3, r3, #3
 802f3f4:	2b00      	cmp	r3, #0
 802f3f6:	bf14      	ite	ne
 802f3f8:	2301      	movne	r3, #1
 802f3fa:	2300      	moveq	r3, #0
 802f3fc:	b2db      	uxtb	r3, r3
 802f3fe:	617b      	str	r3, [r7, #20]
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 802f400:	68bb      	ldr	r3, [r7, #8]
 802f402:	691b      	ldr	r3, [r3, #16]
 802f404:	1d9e      	adds	r6, r3, #6
 802f406:	68bb      	ldr	r3, [r7, #8]
 802f408:	69db      	ldr	r3, [r3, #28]
 802f40a:	f8d3 800c 	ldr.w	r8, [r3, #12]
 802f40e:	68bb      	ldr	r3, [r7, #8]
 802f410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802f412:	885b      	ldrh	r3, [r3, #2]
 802f414:	b29c      	uxth	r4, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 802f416:	68bb      	ldr	r3, [r7, #8]
 802f418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 802f41a:	881b      	ldrh	r3, [r3, #0]
 802f41c:	b29d      	uxth	r5, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 802f41e:	68bb      	ldr	r3, [r7, #8]
 802f420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802f422:	685b      	ldr	r3, [r3, #4]
 802f424:	4618      	mov	r0, r3
 802f426:	f003 fb67 	bl	8032af8 <mg_ntohl>
 802f42a:	4602      	mov	r2, r0
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 802f42c:	697b      	ldr	r3, [r7, #20]
 802f42e:	4413      	add	r3, r2
 802f430:	4618      	mov	r0, r3
 802f432:	f003 fb61 	bl	8032af8 <mg_ntohl>
 802f436:	4601      	mov	r1, r0
 802f438:	79fa      	ldrb	r2, [r7, #7]
 802f43a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802f43c:	9305      	str	r3, [sp, #20]
 802f43e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802f440:	9304      	str	r3, [sp, #16]
 802f442:	9103      	str	r1, [sp, #12]
 802f444:	683b      	ldr	r3, [r7, #0]
 802f446:	9302      	str	r3, [sp, #8]
 802f448:	9501      	str	r5, [sp, #4]
 802f44a:	9400      	str	r4, [sp, #0]
 802f44c:	4613      	mov	r3, r2
 802f44e:	4642      	mov	r2, r8
 802f450:	4631      	mov	r1, r6
 802f452:	68f8      	ldr	r0, [r7, #12]
 802f454:	f7ff fef4 	bl	802f240 <tx_tcp>
 802f458:	4603      	mov	r3, r0
                buf, len);
}
 802f45a:	4618      	mov	r0, r3
 802f45c:	3718      	adds	r7, #24
 802f45e:	46bd      	mov	sp, r7
 802f460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802f464 <accept_conn>:

static struct mg_connection *accept_conn(struct mg_connection *lsn,
                                         struct pkt *pkt) {
 802f464:	b5b0      	push	{r4, r5, r7, lr}
 802f466:	b084      	sub	sp, #16
 802f468:	af00      	add	r7, sp, #0
 802f46a:	6078      	str	r0, [r7, #4]
 802f46c:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = mg_alloc_conn(lsn->mgr);
 802f46e:	687b      	ldr	r3, [r7, #4]
 802f470:	685b      	ldr	r3, [r3, #4]
 802f472:	4618      	mov	r0, r3
 802f474:	f7fe fa87 	bl	802d986 <mg_alloc_conn>
 802f478:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 802f47a:	68fb      	ldr	r3, [r7, #12]
 802f47c:	2b00      	cmp	r3, #0
 802f47e:	d10f      	bne.n	802f4a0 <accept_conn+0x3c>
    MG_ERROR(("OOM"));
 802f480:	4b4e      	ldr	r3, [pc, #312]	@ (802f5bc <accept_conn+0x158>)
 802f482:	681b      	ldr	r3, [r3, #0]
 802f484:	2b00      	cmp	r3, #0
 802f486:	dd09      	ble.n	802f49c <accept_conn+0x38>
 802f488:	4b4d      	ldr	r3, [pc, #308]	@ (802f5c0 <accept_conn+0x15c>)
 802f48a:	f241 5268 	movw	r2, #5480	@ 0x1568
 802f48e:	494d      	ldr	r1, [pc, #308]	@ (802f5c4 <accept_conn+0x160>)
 802f490:	2001      	movs	r0, #1
 802f492:	f7fb fea3 	bl	802b1dc <mg_log_prefix>
 802f496:	484c      	ldr	r0, [pc, #304]	@ (802f5c8 <accept_conn+0x164>)
 802f498:	f7fb fef0 	bl	802b27c <mg_log>
    return NULL;
 802f49c:	2300      	movs	r3, #0
 802f49e:	e088      	b.n	802f5b2 <accept_conn+0x14e>
  }
  struct connstate *s = (struct connstate *) (c + 1);
 802f4a0:	68fb      	ldr	r3, [r7, #12]
 802f4a2:	33b0      	adds	r3, #176	@ 0xb0
 802f4a4:	60bb      	str	r3, [r7, #8]
  s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq);
 802f4a6:	683b      	ldr	r3, [r7, #0]
 802f4a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802f4aa:	689b      	ldr	r3, [r3, #8]
 802f4ac:	4618      	mov	r0, r3
 802f4ae:	f003 fb23 	bl	8032af8 <mg_ntohl>
 802f4b2:	4602      	mov	r2, r0
 802f4b4:	68bb      	ldr	r3, [r7, #8]
 802f4b6:	601a      	str	r2, [r3, #0]
 802f4b8:	683b      	ldr	r3, [r7, #0]
 802f4ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802f4bc:	685b      	ldr	r3, [r3, #4]
 802f4be:	4618      	mov	r0, r3
 802f4c0:	f003 fb1a 	bl	8032af8 <mg_ntohl>
 802f4c4:	4602      	mov	r2, r0
 802f4c6:	68bb      	ldr	r3, [r7, #8]
 802f4c8:	605a      	str	r2, [r3, #4]
  memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 802f4ca:	68bb      	ldr	r3, [r7, #8]
 802f4cc:	f103 0018 	add.w	r0, r3, #24
 802f4d0:	683b      	ldr	r3, [r7, #0]
 802f4d2:	691b      	ldr	r3, [r3, #16]
 802f4d4:	3306      	adds	r3, #6
 802f4d6:	2206      	movs	r2, #6
 802f4d8:	4619      	mov	r1, r3
 802f4da:	f007 fec5 	bl	8037268 <memcpy>
  settmout(c, MIP_TTYPE_KEEPALIVE);
 802f4de:	2100      	movs	r1, #0
 802f4e0:	68f8      	ldr	r0, [r7, #12]
 802f4e2:	f7fe fcef 	bl	802dec4 <settmout>
  memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 802f4e6:	68fb      	ldr	r3, [r7, #12]
 802f4e8:	331c      	adds	r3, #28
 802f4ea:	683a      	ldr	r2, [r7, #0]
 802f4ec:	69d2      	ldr	r2, [r2, #28]
 802f4ee:	320c      	adds	r2, #12
 802f4f0:	6812      	ldr	r2, [r2, #0]
 802f4f2:	601a      	str	r2, [r3, #0]
  c->rem.port = pkt->tcp->sport;
 802f4f4:	683b      	ldr	r3, [r7, #0]
 802f4f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802f4f8:	881b      	ldrh	r3, [r3, #0]
 802f4fa:	b29a      	uxth	r2, r3
 802f4fc:	68fb      	ldr	r3, [r7, #12]
 802f4fe:	859a      	strh	r2, [r3, #44]	@ 0x2c
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 802f500:	4b2e      	ldr	r3, [pc, #184]	@ (802f5bc <accept_conn+0x158>)
 802f502:	681b      	ldr	r3, [r3, #0]
 802f504:	2b02      	cmp	r3, #2
 802f506:	dd0e      	ble.n	802f526 <accept_conn+0xc2>
 802f508:	4b2d      	ldr	r3, [pc, #180]	@ (802f5c0 <accept_conn+0x15c>)
 802f50a:	f241 5271 	movw	r2, #5489	@ 0x1571
 802f50e:	492d      	ldr	r1, [pc, #180]	@ (802f5c4 <accept_conn+0x160>)
 802f510:	2003      	movs	r0, #3
 802f512:	f7fb fe63 	bl	802b1dc <mg_log_prefix>
 802f516:	68fb      	ldr	r3, [r7, #12]
 802f518:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 802f51a:	68fb      	ldr	r3, [r7, #12]
 802f51c:	331c      	adds	r3, #28
 802f51e:	4a2b      	ldr	r2, [pc, #172]	@ (802f5cc <accept_conn+0x168>)
 802f520:	482b      	ldr	r0, [pc, #172]	@ (802f5d0 <accept_conn+0x16c>)
 802f522:	f7fb feab 	bl	802b27c <mg_log>
  LIST_ADD_HEAD(struct mg_connection, &lsn->mgr->conns, c);
 802f526:	687b      	ldr	r3, [r7, #4]
 802f528:	685b      	ldr	r3, [r3, #4]
 802f52a:	681a      	ldr	r2, [r3, #0]
 802f52c:	68fb      	ldr	r3, [r7, #12]
 802f52e:	601a      	str	r2, [r3, #0]
 802f530:	687b      	ldr	r3, [r7, #4]
 802f532:	685b      	ldr	r3, [r3, #4]
 802f534:	68fa      	ldr	r2, [r7, #12]
 802f536:	601a      	str	r2, [r3, #0]
  c->is_accepted = 1;
 802f538:	68fa      	ldr	r2, [r7, #12]
 802f53a:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 802f53e:	f043 0304 	orr.w	r3, r3, #4
 802f542:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  c->is_hexdumping = lsn->is_hexdumping;
 802f546:	687b      	ldr	r3, [r7, #4]
 802f548:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 802f54c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 802f550:	b2d9      	uxtb	r1, r3
 802f552:	68fa      	ldr	r2, [r7, #12]
 802f554:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 802f558:	f361 03c3 	bfi	r3, r1, #3, #1
 802f55c:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  c->pfn = lsn->pfn;
 802f560:	687b      	ldr	r3, [r7, #4]
 802f562:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 802f566:	68fb      	ldr	r3, [r7, #12]
 802f568:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->loc = lsn->loc;
 802f56c:	68fa      	ldr	r2, [r7, #12]
 802f56e:	687b      	ldr	r3, [r7, #4]
 802f570:	f102 0408 	add.w	r4, r2, #8
 802f574:	f103 0508 	add.w	r5, r3, #8
 802f578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802f57a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802f57c:	682b      	ldr	r3, [r5, #0]
 802f57e:	6023      	str	r3, [r4, #0]
  c->pfn_data = lsn->pfn_data;
 802f580:	687b      	ldr	r3, [r7, #4]
 802f582:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 802f586:	68fb      	ldr	r3, [r7, #12]
 802f588:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  c->fn = lsn->fn;
 802f58c:	687b      	ldr	r3, [r7, #4]
 802f58e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 802f590:	68fb      	ldr	r3, [r7, #12]
 802f592:	679a      	str	r2, [r3, #120]	@ 0x78
  c->fn_data = lsn->fn_data;
 802f594:	687b      	ldr	r3, [r7, #4]
 802f596:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 802f598:	68fb      	ldr	r3, [r7, #12]
 802f59a:	67da      	str	r2, [r3, #124]	@ 0x7c
  mg_call(c, MG_EV_OPEN, NULL);
 802f59c:	2200      	movs	r2, #0
 802f59e:	2101      	movs	r1, #1
 802f5a0:	68f8      	ldr	r0, [r7, #12]
 802f5a2:	f7f6 fa35 	bl	8025a10 <mg_call>
  mg_call(c, MG_EV_ACCEPT, NULL);
 802f5a6:	2200      	movs	r2, #0
 802f5a8:	2105      	movs	r1, #5
 802f5aa:	68f8      	ldr	r0, [r7, #12]
 802f5ac:	f7f6 fa30 	bl	8025a10 <mg_call>
  return c;
 802f5b0:	68fb      	ldr	r3, [r7, #12]
}
 802f5b2:	4618      	mov	r0, r3
 802f5b4:	3710      	adds	r7, #16
 802f5b6:	46bd      	mov	sp, r7
 802f5b8:	bdb0      	pop	{r4, r5, r7, pc}
 802f5ba:	bf00      	nop
 802f5bc:	20000298 	.word	0x20000298
 802f5c0:	08044680 	.word	0x08044680
 802f5c4:	08041564 	.word	0x08041564
 802f5c8:	08042aa0 	.word	0x08042aa0
 802f5cc:	08031445 	.word	0x08031445
 802f5d0:	08042e70 	.word	0x08042e70

0802f5d4 <trim_len>:

static size_t trim_len(struct mg_connection *c, size_t len) {
 802f5d4:	b580      	push	{r7, lr}
 802f5d6:	b08a      	sub	sp, #40	@ 0x28
 802f5d8:	af00      	add	r7, sp, #0
 802f5da:	6078      	str	r0, [r7, #4]
 802f5dc:	6039      	str	r1, [r7, #0]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 802f5de:	687b      	ldr	r3, [r7, #4]
 802f5e0:	685b      	ldr	r3, [r3, #4]
 802f5e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802f5e4:	627b      	str	r3, [r7, #36]	@ 0x24
  size_t eth_h_len = 14, ip_max_h_len = 24, tcp_max_h_len = 60, udp_h_len = 8;
 802f5e6:	230e      	movs	r3, #14
 802f5e8:	623b      	str	r3, [r7, #32]
 802f5ea:	2318      	movs	r3, #24
 802f5ec:	61fb      	str	r3, [r7, #28]
 802f5ee:	233c      	movs	r3, #60	@ 0x3c
 802f5f0:	61bb      	str	r3, [r7, #24]
 802f5f2:	2308      	movs	r3, #8
 802f5f4:	617b      	str	r3, [r7, #20]
  size_t max_headers_len =
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 802f5f6:	6a3a      	ldr	r2, [r7, #32]
 802f5f8:	69fb      	ldr	r3, [r7, #28]
 802f5fa:	441a      	add	r2, r3
 802f5fc:	687b      	ldr	r3, [r7, #4]
 802f5fe:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 802f602:	f003 0301 	and.w	r3, r3, #1
 802f606:	b2db      	uxtb	r3, r3
 802f608:	2b00      	cmp	r3, #0
 802f60a:	d001      	beq.n	802f610 <trim_len+0x3c>
 802f60c:	697b      	ldr	r3, [r7, #20]
 802f60e:	e000      	b.n	802f612 <trim_len+0x3e>
 802f610:	69bb      	ldr	r3, [r7, #24]
  size_t max_headers_len =
 802f612:	4413      	add	r3, r2
 802f614:	613b      	str	r3, [r7, #16]
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 802f616:	687b      	ldr	r3, [r7, #4]
 802f618:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 802f61c:	f003 0301 	and.w	r3, r3, #1
 802f620:	b2db      	uxtb	r3, r3
 802f622:	2b00      	cmp	r3, #0
 802f624:	d103      	bne.n	802f62e <trim_len+0x5a>
 802f626:	693a      	ldr	r2, [r7, #16]
 802f628:	6a3b      	ldr	r3, [r7, #32]
 802f62a:	1ad3      	subs	r3, r2, r3
 802f62c:	e000      	b.n	802f630 <trim_len+0x5c>
 802f62e:	2344      	movs	r3, #68	@ 0x44
 802f630:	60fb      	str	r3, [r7, #12]

  // If the frame exceeds the available buffer, trim the length
  if (len + max_headers_len > ifp->tx.len) {
 802f632:	683a      	ldr	r2, [r7, #0]
 802f634:	693b      	ldr	r3, [r7, #16]
 802f636:	441a      	add	r2, r3
 802f638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802f63a:	699b      	ldr	r3, [r3, #24]
 802f63c:	429a      	cmp	r2, r3
 802f63e:	d904      	bls.n	802f64a <trim_len+0x76>
    len = ifp->tx.len - max_headers_len;
 802f640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802f642:	699a      	ldr	r2, [r3, #24]
 802f644:	693b      	ldr	r3, [r7, #16]
 802f646:	1ad3      	subs	r3, r2, r3
 802f648:	603b      	str	r3, [r7, #0]
  }
  // Ensure the MTU isn't lower than the minimum allowed value
  if (ifp->mtu < min_mtu) {
 802f64a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802f64c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 802f650:	461a      	mov	r2, r3
 802f652:	68fb      	ldr	r3, [r7, #12]
 802f654:	4293      	cmp	r3, r2
 802f656:	d913      	bls.n	802f680 <trim_len+0xac>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 802f658:	4b20      	ldr	r3, [pc, #128]	@ (802f6dc <trim_len+0x108>)
 802f65a:	681b      	ldr	r3, [r3, #0]
 802f65c:	2b00      	cmp	r3, #0
 802f65e:	dd0a      	ble.n	802f676 <trim_len+0xa2>
 802f660:	4b1f      	ldr	r3, [pc, #124]	@ (802f6e0 <trim_len+0x10c>)
 802f662:	f241 528c 	movw	r2, #5516	@ 0x158c
 802f666:	491f      	ldr	r1, [pc, #124]	@ (802f6e4 <trim_len+0x110>)
 802f668:	2001      	movs	r0, #1
 802f66a:	f7fb fdb7 	bl	802b1dc <mg_log_prefix>
 802f66e:	68f9      	ldr	r1, [r7, #12]
 802f670:	481d      	ldr	r0, [pc, #116]	@ (802f6e8 <trim_len+0x114>)
 802f672:	f7fb fe03 	bl	802b27c <mg_log>
    ifp->mtu = (uint16_t) min_mtu;
 802f676:	68fb      	ldr	r3, [r7, #12]
 802f678:	b29a      	uxth	r2, r3
 802f67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802f67c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }
  // If the total packet size exceeds the MTU, trim the length
  if (len + max_headers_len - eth_h_len > ifp->mtu) {
 802f680:	683a      	ldr	r2, [r7, #0]
 802f682:	693b      	ldr	r3, [r7, #16]
 802f684:	441a      	add	r2, r3
 802f686:	6a3b      	ldr	r3, [r7, #32]
 802f688:	1ad3      	subs	r3, r2, r3
 802f68a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802f68c:	f8b2 2044 	ldrh.w	r2, [r2, #68]	@ 0x44
 802f690:	4293      	cmp	r3, r2
 802f692:	d91e      	bls.n	802f6d2 <trim_len+0xfe>
    len = ifp->mtu - max_headers_len + eth_h_len;
 802f694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802f696:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 802f69a:	461a      	mov	r2, r3
 802f69c:	693b      	ldr	r3, [r7, #16]
 802f69e:	1ad3      	subs	r3, r2, r3
 802f6a0:	6a3a      	ldr	r2, [r7, #32]
 802f6a2:	4413      	add	r3, r2
 802f6a4:	603b      	str	r3, [r7, #0]
    if (c->is_udp) {
 802f6a6:	687b      	ldr	r3, [r7, #4]
 802f6a8:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 802f6ac:	f003 0301 	and.w	r3, r3, #1
 802f6b0:	b2db      	uxtb	r3, r3
 802f6b2:	2b00      	cmp	r3, #0
 802f6b4:	d00d      	beq.n	802f6d2 <trim_len+0xfe>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 802f6b6:	4b09      	ldr	r3, [pc, #36]	@ (802f6dc <trim_len+0x108>)
 802f6b8:	681b      	ldr	r3, [r3, #0]
 802f6ba:	2b00      	cmp	r3, #0
 802f6bc:	dd09      	ble.n	802f6d2 <trim_len+0xfe>
 802f6be:	4b08      	ldr	r3, [pc, #32]	@ (802f6e0 <trim_len+0x10c>)
 802f6c0:	f241 5293 	movw	r2, #5523	@ 0x1593
 802f6c4:	4907      	ldr	r1, [pc, #28]	@ (802f6e4 <trim_len+0x110>)
 802f6c6:	2001      	movs	r0, #1
 802f6c8:	f7fb fd88 	bl	802b1dc <mg_log_prefix>
 802f6cc:	4807      	ldr	r0, [pc, #28]	@ (802f6ec <trim_len+0x118>)
 802f6ce:	f7fb fdd5 	bl	802b27c <mg_log>
    }
  }

  return len;
 802f6d2:	683b      	ldr	r3, [r7, #0]
}
 802f6d4:	4618      	mov	r0, r3
 802f6d6:	3728      	adds	r7, #40	@ 0x28
 802f6d8:	46bd      	mov	sp, r7
 802f6da:	bd80      	pop	{r7, pc}
 802f6dc:	20000298 	.word	0x20000298
 802f6e0:	0804468c 	.word	0x0804468c
 802f6e4:	08041564 	.word	0x08041564
 802f6e8:	08042e80 	.word	0x08042e80
 802f6ec:	08042eac 	.word	0x08042eac

0802f6f0 <mg_io_send>:

long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {
 802f6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 802f6f2:	b08f      	sub	sp, #60	@ 0x3c
 802f6f4:	af06      	add	r7, sp, #24
 802f6f6:	60f8      	str	r0, [r7, #12]
 802f6f8:	60b9      	str	r1, [r7, #8]
 802f6fa:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 802f6fc:	68fb      	ldr	r3, [r7, #12]
 802f6fe:	685b      	ldr	r3, [r3, #4]
 802f700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802f702:	61fb      	str	r3, [r7, #28]
  struct connstate *s = (struct connstate *) (c + 1);
 802f704:	68fb      	ldr	r3, [r7, #12]
 802f706:	33b0      	adds	r3, #176	@ 0xb0
 802f708:	61bb      	str	r3, [r7, #24]
  uint32_t dst_ip = *(uint32_t *) c->rem.ip;
 802f70a:	68fb      	ldr	r3, [r7, #12]
 802f70c:	331c      	adds	r3, #28
 802f70e:	681b      	ldr	r3, [r3, #0]
 802f710:	617b      	str	r3, [r7, #20]
  len = trim_len(c, len);
 802f712:	6879      	ldr	r1, [r7, #4]
 802f714:	68f8      	ldr	r0, [r7, #12]
 802f716:	f7ff ff5d 	bl	802f5d4 <trim_len>
 802f71a:	6078      	str	r0, [r7, #4]
  if (c->is_udp) {
 802f71c:	68fb      	ldr	r3, [r7, #12]
 802f71e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 802f722:	f003 0301 	and.w	r3, r3, #1
 802f726:	b2db      	uxtb	r3, r3
 802f728:	2b00      	cmp	r3, #0
 802f72a:	d015      	beq.n	802f758 <mg_io_send+0x68>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, dst_ip, c->rem.port, buf, len);
 802f72c:	69bb      	ldr	r3, [r7, #24]
 802f72e:	f103 0118 	add.w	r1, r3, #24
 802f732:	69fb      	ldr	r3, [r7, #28]
 802f734:	6898      	ldr	r0, [r3, #8]
 802f736:	68fb      	ldr	r3, [r7, #12]
 802f738:	8b1c      	ldrh	r4, [r3, #24]
 802f73a:	68fb      	ldr	r3, [r7, #12]
 802f73c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 802f73e:	687a      	ldr	r2, [r7, #4]
 802f740:	9203      	str	r2, [sp, #12]
 802f742:	68ba      	ldr	r2, [r7, #8]
 802f744:	9202      	str	r2, [sp, #8]
 802f746:	9301      	str	r3, [sp, #4]
 802f748:	697b      	ldr	r3, [r7, #20]
 802f74a:	9300      	str	r3, [sp, #0]
 802f74c:	4623      	mov	r3, r4
 802f74e:	4602      	mov	r2, r0
 802f750:	69f8      	ldr	r0, [r7, #28]
 802f752:	f7fe fd77 	bl	802e244 <tx_udp>
 802f756:	e03d      	b.n	802f7d4 <mg_io_send+0xe4>
  } else {
    size_t sent =
        tx_tcp(ifp, s->mac, dst_ip, TH_PUSH | TH_ACK, c->loc.port, c->rem.port,
 802f758:	69bb      	ldr	r3, [r7, #24]
 802f75a:	f103 0618 	add.w	r6, r3, #24
 802f75e:	68fb      	ldr	r3, [r7, #12]
 802f760:	8b1c      	ldrh	r4, [r3, #24]
 802f762:	68fb      	ldr	r3, [r7, #12]
 802f764:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 802f766:	69bb      	ldr	r3, [r7, #24]
 802f768:	681b      	ldr	r3, [r3, #0]
 802f76a:	4618      	mov	r0, r3
 802f76c:	f003 f9c4 	bl	8032af8 <mg_ntohl>
 802f770:	6038      	str	r0, [r7, #0]
 802f772:	69bb      	ldr	r3, [r7, #24]
 802f774:	685b      	ldr	r3, [r3, #4]
 802f776:	4618      	mov	r0, r3
 802f778:	f003 f9be 	bl	8032af8 <mg_ntohl>
 802f77c:	4602      	mov	r2, r0
 802f77e:	687b      	ldr	r3, [r7, #4]
 802f780:	9305      	str	r3, [sp, #20]
 802f782:	68bb      	ldr	r3, [r7, #8]
 802f784:	9304      	str	r3, [sp, #16]
 802f786:	9203      	str	r2, [sp, #12]
 802f788:	683b      	ldr	r3, [r7, #0]
 802f78a:	9302      	str	r3, [sp, #8]
 802f78c:	9501      	str	r5, [sp, #4]
 802f78e:	9400      	str	r4, [sp, #0]
 802f790:	2318      	movs	r3, #24
 802f792:	697a      	ldr	r2, [r7, #20]
 802f794:	4631      	mov	r1, r6
 802f796:	69f8      	ldr	r0, [r7, #28]
 802f798:	f7ff fd52 	bl	802f240 <tx_tcp>
 802f79c:	6138      	str	r0, [r7, #16]
               mg_htonl(s->seq), mg_htonl(s->ack), buf, len);
    if (sent == 0) {
 802f79e:	693b      	ldr	r3, [r7, #16]
 802f7a0:	2b00      	cmp	r3, #0
 802f7a2:	d102      	bne.n	802f7aa <mg_io_send+0xba>
      return MG_IO_WAIT;
 802f7a4:	f06f 0301 	mvn.w	r3, #1
 802f7a8:	e015      	b.n	802f7d6 <mg_io_send+0xe6>
    } else if (sent == (size_t) -1) {
 802f7aa:	693b      	ldr	r3, [r7, #16]
 802f7ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 802f7b0:	d102      	bne.n	802f7b8 <mg_io_send+0xc8>
      return MG_IO_ERR;
 802f7b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802f7b6:	e00e      	b.n	802f7d6 <mg_io_send+0xe6>
    } else {
      s->seq += (uint32_t) len;
 802f7b8:	69bb      	ldr	r3, [r7, #24]
 802f7ba:	681a      	ldr	r2, [r3, #0]
 802f7bc:	687b      	ldr	r3, [r7, #4]
 802f7be:	441a      	add	r2, r3
 802f7c0:	69bb      	ldr	r3, [r7, #24]
 802f7c2:	601a      	str	r2, [r3, #0]
      if (s->ttype == MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_KEEPALIVE);
 802f7c4:	69bb      	ldr	r3, [r7, #24]
 802f7c6:	7f9b      	ldrb	r3, [r3, #30]
 802f7c8:	2b01      	cmp	r3, #1
 802f7ca:	d103      	bne.n	802f7d4 <mg_io_send+0xe4>
 802f7cc:	2100      	movs	r1, #0
 802f7ce:	68f8      	ldr	r0, [r7, #12]
 802f7d0:	f7fe fb78 	bl	802dec4 <settmout>
    }
  }
  return (long) len;
 802f7d4:	687b      	ldr	r3, [r7, #4]
}
 802f7d6:	4618      	mov	r0, r3
 802f7d8:	3724      	adds	r7, #36	@ 0x24
 802f7da:	46bd      	mov	sp, r7
 802f7dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0802f7e0 <handle_tls_recv>:

static void handle_tls_recv(struct mg_connection *c, struct mg_iobuf *io) {
 802f7e0:	b580      	push	{r7, lr}
 802f7e2:	b084      	sub	sp, #16
 802f7e4:	af00      	add	r7, sp, #0
 802f7e6:	6078      	str	r0, [r7, #4]
 802f7e8:	6039      	str	r1, [r7, #0]
  long n = mg_tls_recv(c, &io->buf[io->len], io->size - io->len);
 802f7ea:	683b      	ldr	r3, [r7, #0]
 802f7ec:	681a      	ldr	r2, [r3, #0]
 802f7ee:	683b      	ldr	r3, [r7, #0]
 802f7f0:	689b      	ldr	r3, [r3, #8]
 802f7f2:	18d1      	adds	r1, r2, r3
 802f7f4:	683b      	ldr	r3, [r7, #0]
 802f7f6:	685a      	ldr	r2, [r3, #4]
 802f7f8:	683b      	ldr	r3, [r7, #0]
 802f7fa:	689b      	ldr	r3, [r3, #8]
 802f7fc:	1ad3      	subs	r3, r2, r3
 802f7fe:	461a      	mov	r2, r3
 802f800:	6878      	ldr	r0, [r7, #4]
 802f802:	f002 ff51 	bl	80326a8 <mg_tls_recv>
 802f806:	4603      	mov	r3, r0
 802f808:	60fb      	str	r3, [r7, #12]
  if (n == MG_IO_ERR) {
 802f80a:	68fb      	ldr	r3, [r7, #12]
 802f80c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 802f810:	d104      	bne.n	802f81c <handle_tls_recv+0x3c>
    mg_error(c, "TLS recv error");
 802f812:	490c      	ldr	r1, [pc, #48]	@ (802f844 <handle_tls_recv+0x64>)
 802f814:	6878      	ldr	r0, [r7, #4]
 802f816:	f7f6 f91b 	bl	8025a50 <mg_error>
  } else if (n > 0) {
    // Decrypted successfully - trigger MG_EV_READ
    io->len += (size_t) n;
    mg_call(c, MG_EV_READ, &n);
  }
}
 802f81a:	e00f      	b.n	802f83c <handle_tls_recv+0x5c>
  } else if (n > 0) {
 802f81c:	68fb      	ldr	r3, [r7, #12]
 802f81e:	2b00      	cmp	r3, #0
 802f820:	dd0c      	ble.n	802f83c <handle_tls_recv+0x5c>
    io->len += (size_t) n;
 802f822:	683b      	ldr	r3, [r7, #0]
 802f824:	689b      	ldr	r3, [r3, #8]
 802f826:	68fa      	ldr	r2, [r7, #12]
 802f828:	441a      	add	r2, r3
 802f82a:	683b      	ldr	r3, [r7, #0]
 802f82c:	609a      	str	r2, [r3, #8]
    mg_call(c, MG_EV_READ, &n);
 802f82e:	f107 030c 	add.w	r3, r7, #12
 802f832:	461a      	mov	r2, r3
 802f834:	2107      	movs	r1, #7
 802f836:	6878      	ldr	r0, [r7, #4]
 802f838:	f7f6 f8ea 	bl	8025a10 <mg_call>
}
 802f83c:	bf00      	nop
 802f83e:	3710      	adds	r7, #16
 802f840:	46bd      	mov	sp, r7
 802f842:	bd80      	pop	{r7, pc}
 802f844:	08042ed8 	.word	0x08042ed8

0802f848 <read_conn>:

static void read_conn(struct mg_connection *c, struct pkt *pkt) {
 802f848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802f84c:	b090      	sub	sp, #64	@ 0x40
 802f84e:	af06      	add	r7, sp, #24
 802f850:	60f8      	str	r0, [r7, #12]
 802f852:	60b9      	str	r1, [r7, #8]
  struct connstate *s = (struct connstate *) (c + 1);
 802f854:	68fb      	ldr	r3, [r7, #12]
 802f856:	33b0      	adds	r3, #176	@ 0xb0
 802f858:	623b      	str	r3, [r7, #32]
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 802f85a:	68fb      	ldr	r3, [r7, #12]
 802f85c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 802f860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802f864:	b2db      	uxtb	r3, r3
 802f866:	2b00      	cmp	r3, #0
 802f868:	d002      	beq.n	802f870 <read_conn+0x28>
 802f86a:	68fb      	ldr	r3, [r7, #12]
 802f86c:	3368      	adds	r3, #104	@ 0x68
 802f86e:	e001      	b.n	802f874 <read_conn+0x2c>
 802f870:	68fb      	ldr	r3, [r7, #12]
 802f872:	3338      	adds	r3, #56	@ 0x38
 802f874:	61fb      	str	r3, [r7, #28]
  uint32_t seq = mg_ntohl(pkt->tcp->seq);
 802f876:	68bb      	ldr	r3, [r7, #8]
 802f878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802f87a:	685b      	ldr	r3, [r3, #4]
 802f87c:	4618      	mov	r0, r3
 802f87e:	f003 f93b 	bl	8032af8 <mg_ntohl>
 802f882:	61b8      	str	r0, [r7, #24]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 802f884:	68fb      	ldr	r3, [r7, #12]
 802f886:	331c      	adds	r3, #28
 802f888:	681b      	ldr	r3, [r3, #0]
 802f88a:	613b      	str	r3, [r7, #16]
  if (pkt->tcp->flags & TH_FIN) {
 802f88c:	68bb      	ldr	r3, [r7, #8]
 802f88e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802f890:	7b5b      	ldrb	r3, [r3, #13]
 802f892:	f003 0301 	and.w	r3, r3, #1
 802f896:	2b00      	cmp	r3, #0
 802f898:	d070      	beq.n	802f97c <read_conn+0x134>
    // If we initiated the closure, we reply with ACK upon receiving FIN
    // If we didn't initiate it, we reply with FIN as part of the normal TCP
    // closure process
    uint8_t flags = TH_ACK;
 802f89a:	2310      	movs	r3, #16
 802f89c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len + 1);
 802f8a0:	68bb      	ldr	r3, [r7, #8]
 802f8a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802f8a4:	685b      	ldr	r3, [r3, #4]
 802f8a6:	4618      	mov	r0, r3
 802f8a8:	f003 f926 	bl	8032af8 <mg_ntohl>
 802f8ac:	4602      	mov	r2, r0
 802f8ae:	68bb      	ldr	r3, [r7, #8]
 802f8b0:	68db      	ldr	r3, [r3, #12]
 802f8b2:	4413      	add	r3, r2
 802f8b4:	1c5a      	adds	r2, r3, #1
 802f8b6:	6a3b      	ldr	r3, [r7, #32]
 802f8b8:	605a      	str	r2, [r3, #4]
    if (c->is_draining && s->ttype == MIP_TTYPE_FIN) {
 802f8ba:	68fb      	ldr	r3, [r7, #12]
 802f8bc:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 802f8c0:	f003 0310 	and.w	r3, r3, #16
 802f8c4:	b2db      	uxtb	r3, r3
 802f8c6:	2b00      	cmp	r3, #0
 802f8c8:	d01e      	beq.n	802f908 <read_conn+0xc0>
 802f8ca:	6a3b      	ldr	r3, [r7, #32]
 802f8cc:	7f9b      	ldrb	r3, [r3, #30]
 802f8ce:	2b04      	cmp	r3, #4
 802f8d0:	d11a      	bne.n	802f908 <read_conn+0xc0>
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 802f8d2:	6a3b      	ldr	r3, [r7, #32]
 802f8d4:	681c      	ldr	r4, [r3, #0]
 802f8d6:	68bb      	ldr	r3, [r7, #8]
 802f8d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802f8da:	689b      	ldr	r3, [r3, #8]
 802f8dc:	4618      	mov	r0, r3
 802f8de:	f003 f90b 	bl	8032af8 <mg_ntohl>
 802f8e2:	4603      	mov	r3, r0
 802f8e4:	429c      	cmp	r4, r3
 802f8e6:	d105      	bne.n	802f8f4 <read_conn+0xac>
        s->seq++;                               // Yes. Increment our SEQ
 802f8e8:	6a3b      	ldr	r3, [r7, #32]
 802f8ea:	681b      	ldr	r3, [r3, #0]
 802f8ec:	1c5a      	adds	r2, r3, #1
 802f8ee:	6a3b      	ldr	r3, [r7, #32]
 802f8f0:	601a      	str	r2, [r3, #0]
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 802f8f2:	e01a      	b.n	802f92a <read_conn+0xe2>
      } else {                                  // Otherwise,
        s->seq = mg_htonl(pkt->tcp->ack);       // Set to peer's ACK
 802f8f4:	68bb      	ldr	r3, [r7, #8]
 802f8f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802f8f8:	689b      	ldr	r3, [r3, #8]
 802f8fa:	4618      	mov	r0, r3
 802f8fc:	f003 f8fc 	bl	8032af8 <mg_ntohl>
 802f900:	4602      	mov	r2, r0
 802f902:	6a3b      	ldr	r3, [r7, #32]
 802f904:	601a      	str	r2, [r3, #0]
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 802f906:	e010      	b.n	802f92a <read_conn+0xe2>
      }
    } else {
      flags |= TH_FIN;
 802f908:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 802f90c:	f043 0301 	orr.w	r3, r3, #1
 802f910:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      c->is_draining = 1;
 802f914:	68fa      	ldr	r2, [r7, #12]
 802f916:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 802f91a:	f043 0310 	orr.w	r3, r3, #16
 802f91e:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
      settmout(c, MIP_TTYPE_FIN);
 802f922:	2104      	movs	r1, #4
 802f924:	68f8      	ldr	r0, [r7, #12]
 802f926:	f7fe facd 	bl	802dec4 <settmout>
    }
    tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, flags,
 802f92a:	68fb      	ldr	r3, [r7, #12]
 802f92c:	685b      	ldr	r3, [r3, #4]
 802f92e:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 802f930:	6a3b      	ldr	r3, [r7, #32]
 802f932:	f103 0818 	add.w	r8, r3, #24
 802f936:	693b      	ldr	r3, [r7, #16]
 802f938:	607b      	str	r3, [r7, #4]
 802f93a:	68fb      	ldr	r3, [r7, #12]
 802f93c:	8b1c      	ldrh	r4, [r3, #24]
 802f93e:	68fb      	ldr	r3, [r7, #12]
 802f940:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 802f942:	6a3b      	ldr	r3, [r7, #32]
 802f944:	681b      	ldr	r3, [r3, #0]
 802f946:	4618      	mov	r0, r3
 802f948:	f003 f8d6 	bl	8032af8 <mg_ntohl>
 802f94c:	6038      	str	r0, [r7, #0]
 802f94e:	6a3b      	ldr	r3, [r7, #32]
 802f950:	685b      	ldr	r3, [r3, #4]
 802f952:	4618      	mov	r0, r3
 802f954:	f003 f8d0 	bl	8032af8 <mg_ntohl>
 802f958:	4602      	mov	r2, r0
 802f95a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 802f95e:	2100      	movs	r1, #0
 802f960:	9105      	str	r1, [sp, #20]
 802f962:	4990      	ldr	r1, [pc, #576]	@ (802fba4 <read_conn+0x35c>)
 802f964:	9104      	str	r1, [sp, #16]
 802f966:	9203      	str	r2, [sp, #12]
 802f968:	6839      	ldr	r1, [r7, #0]
 802f96a:	9102      	str	r1, [sp, #8]
 802f96c:	9501      	str	r5, [sp, #4]
 802f96e:	9400      	str	r4, [sp, #0]
 802f970:	687a      	ldr	r2, [r7, #4]
 802f972:	4641      	mov	r1, r8
 802f974:	4630      	mov	r0, r6
 802f976:	f7ff fc63 	bl	802f240 <tx_tcp>
      // Plain text connection, data is already in c->recv, trigger
      // MG_EV_READ
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 802f97a:	e173      	b.n	802fc64 <read_conn+0x41c>
  } else if (pkt->pay.len == 0) {
 802f97c:	68bb      	ldr	r3, [r7, #8]
 802f97e:	68db      	ldr	r3, [r3, #12]
 802f980:	2b00      	cmp	r3, #0
 802f982:	f000 816f 	beq.w	802fc64 <read_conn+0x41c>
  } else if (seq != s->ack) {
 802f986:	6a3b      	ldr	r3, [r7, #32]
 802f988:	685b      	ldr	r3, [r3, #4]
 802f98a:	69ba      	ldr	r2, [r7, #24]
 802f98c:	429a      	cmp	r2, r3
 802f98e:	d059      	beq.n	802fa44 <read_conn+0x1fc>
    uint32_t ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 802f990:	68bb      	ldr	r3, [r7, #8]
 802f992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802f994:	685b      	ldr	r3, [r3, #4]
 802f996:	4618      	mov	r0, r3
 802f998:	f003 f8ae 	bl	8032af8 <mg_ntohl>
 802f99c:	4602      	mov	r2, r0
 802f99e:	68bb      	ldr	r3, [r7, #8]
 802f9a0:	68db      	ldr	r3, [r3, #12]
 802f9a2:	4413      	add	r3, r2
 802f9a4:	617b      	str	r3, [r7, #20]
    if (s->ack == ack) {
 802f9a6:	6a3b      	ldr	r3, [r7, #32]
 802f9a8:	685b      	ldr	r3, [r3, #4]
 802f9aa:	697a      	ldr	r2, [r7, #20]
 802f9ac:	429a      	cmp	r2, r3
 802f9ae:	d10f      	bne.n	802f9d0 <read_conn+0x188>
      MG_VERBOSE(("ignoring duplicate pkt"));
 802f9b0:	4b7d      	ldr	r3, [pc, #500]	@ (802fba8 <read_conn+0x360>)
 802f9b2:	681b      	ldr	r3, [r3, #0]
 802f9b4:	2b03      	cmp	r3, #3
 802f9b6:	f340 8155 	ble.w	802fc64 <read_conn+0x41c>
 802f9ba:	4b7c      	ldr	r3, [pc, #496]	@ (802fbac <read_conn+0x364>)
 802f9bc:	f241 52da 	movw	r2, #5594	@ 0x15da
 802f9c0:	497b      	ldr	r1, [pc, #492]	@ (802fbb0 <read_conn+0x368>)
 802f9c2:	2004      	movs	r0, #4
 802f9c4:	f7fb fc0a 	bl	802b1dc <mg_log_prefix>
 802f9c8:	487a      	ldr	r0, [pc, #488]	@ (802fbb4 <read_conn+0x36c>)
 802f9ca:	f7fb fc57 	bl	802b27c <mg_log>
}
 802f9ce:	e149      	b.n	802fc64 <read_conn+0x41c>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 802f9d0:	4b75      	ldr	r3, [pc, #468]	@ (802fba8 <read_conn+0x360>)
 802f9d2:	681b      	ldr	r3, [r3, #0]
 802f9d4:	2b03      	cmp	r3, #3
 802f9d6:	dd0d      	ble.n	802f9f4 <read_conn+0x1ac>
 802f9d8:	4b74      	ldr	r3, [pc, #464]	@ (802fbac <read_conn+0x364>)
 802f9da:	f241 52dc 	movw	r2, #5596	@ 0x15dc
 802f9de:	4974      	ldr	r1, [pc, #464]	@ (802fbb0 <read_conn+0x368>)
 802f9e0:	2004      	movs	r0, #4
 802f9e2:	f7fb fbfb 	bl	802b1dc <mg_log_prefix>
 802f9e6:	6a3b      	ldr	r3, [r7, #32]
 802f9e8:	685a      	ldr	r2, [r3, #4]
 802f9ea:	697b      	ldr	r3, [r7, #20]
 802f9ec:	69b9      	ldr	r1, [r7, #24]
 802f9ee:	4872      	ldr	r0, [pc, #456]	@ (802fbb8 <read_conn+0x370>)
 802f9f0:	f7fb fc44 	bl	802b27c <mg_log>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 802f9f4:	68fb      	ldr	r3, [r7, #12]
 802f9f6:	685b      	ldr	r3, [r3, #4]
 802f9f8:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 802f9fa:	6a3b      	ldr	r3, [r7, #32]
 802f9fc:	f103 0818 	add.w	r8, r3, #24
 802fa00:	693b      	ldr	r3, [r7, #16]
 802fa02:	607b      	str	r3, [r7, #4]
 802fa04:	68fb      	ldr	r3, [r7, #12]
 802fa06:	8b1c      	ldrh	r4, [r3, #24]
 802fa08:	68fb      	ldr	r3, [r7, #12]
 802fa0a:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 802fa0c:	6a3b      	ldr	r3, [r7, #32]
 802fa0e:	681b      	ldr	r3, [r3, #0]
 802fa10:	4618      	mov	r0, r3
 802fa12:	f003 f871 	bl	8032af8 <mg_ntohl>
 802fa16:	6038      	str	r0, [r7, #0]
 802fa18:	6a3b      	ldr	r3, [r7, #32]
 802fa1a:	685b      	ldr	r3, [r3, #4]
 802fa1c:	4618      	mov	r0, r3
 802fa1e:	f003 f86b 	bl	8032af8 <mg_ntohl>
 802fa22:	4603      	mov	r3, r0
 802fa24:	2200      	movs	r2, #0
 802fa26:	9205      	str	r2, [sp, #20]
 802fa28:	4a5e      	ldr	r2, [pc, #376]	@ (802fba4 <read_conn+0x35c>)
 802fa2a:	9204      	str	r2, [sp, #16]
 802fa2c:	9303      	str	r3, [sp, #12]
 802fa2e:	6839      	ldr	r1, [r7, #0]
 802fa30:	9102      	str	r1, [sp, #8]
 802fa32:	9501      	str	r5, [sp, #4]
 802fa34:	9400      	str	r4, [sp, #0]
 802fa36:	2310      	movs	r3, #16
 802fa38:	687a      	ldr	r2, [r7, #4]
 802fa3a:	4641      	mov	r1, r8
 802fa3c:	4630      	mov	r0, r6
 802fa3e:	f7ff fbff 	bl	802f240 <tx_tcp>
}
 802fa42:	e10f      	b.n	802fc64 <read_conn+0x41c>
  } else if (io->size - io->len < pkt->pay.len &&
 802fa44:	69fb      	ldr	r3, [r7, #28]
 802fa46:	685a      	ldr	r2, [r3, #4]
 802fa48:	69fb      	ldr	r3, [r7, #28]
 802fa4a:	689b      	ldr	r3, [r3, #8]
 802fa4c:	1ad2      	subs	r2, r2, r3
 802fa4e:	68bb      	ldr	r3, [r7, #8]
 802fa50:	68db      	ldr	r3, [r3, #12]
 802fa52:	429a      	cmp	r2, r3
 802fa54:	d210      	bcs.n	802fa78 <read_conn+0x230>
             !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 802fa56:	69fb      	ldr	r3, [r7, #28]
 802fa58:	689a      	ldr	r2, [r3, #8]
 802fa5a:	68bb      	ldr	r3, [r7, #8]
 802fa5c:	68db      	ldr	r3, [r3, #12]
 802fa5e:	4413      	add	r3, r2
 802fa60:	4619      	mov	r1, r3
 802fa62:	69f8      	ldr	r0, [r7, #28]
 802fa64:	f7fa fbca 	bl	802a1fc <mg_iobuf_resize>
 802fa68:	4603      	mov	r3, r0
  } else if (io->size - io->len < pkt->pay.len &&
 802fa6a:	2b00      	cmp	r3, #0
 802fa6c:	d104      	bne.n	802fa78 <read_conn+0x230>
    mg_error(c, "oom");
 802fa6e:	4953      	ldr	r1, [pc, #332]	@ (802fbbc <read_conn+0x374>)
 802fa70:	68f8      	ldr	r0, [r7, #12]
 802fa72:	f7f5 ffed 	bl	8025a50 <mg_error>
 802fa76:	e0f5      	b.n	802fc64 <read_conn+0x41c>
    memcpy(&io->buf[io->len], pkt->pay.buf, pkt->pay.len);
 802fa78:	69fb      	ldr	r3, [r7, #28]
 802fa7a:	681a      	ldr	r2, [r3, #0]
 802fa7c:	69fb      	ldr	r3, [r7, #28]
 802fa7e:	689b      	ldr	r3, [r3, #8]
 802fa80:	18d0      	adds	r0, r2, r3
 802fa82:	68bb      	ldr	r3, [r7, #8]
 802fa84:	6899      	ldr	r1, [r3, #8]
 802fa86:	68bb      	ldr	r3, [r7, #8]
 802fa88:	68db      	ldr	r3, [r3, #12]
 802fa8a:	461a      	mov	r2, r3
 802fa8c:	f007 fbec 	bl	8037268 <memcpy>
    io->len += pkt->pay.len;
 802fa90:	69fb      	ldr	r3, [r7, #28]
 802fa92:	689a      	ldr	r2, [r3, #8]
 802fa94:	68bb      	ldr	r3, [r7, #8]
 802fa96:	68db      	ldr	r3, [r3, #12]
 802fa98:	441a      	add	r2, r3
 802fa9a:	69fb      	ldr	r3, [r7, #28]
 802fa9c:	609a      	str	r2, [r3, #8]
    MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 802fa9e:	4b42      	ldr	r3, [pc, #264]	@ (802fba8 <read_conn+0x360>)
 802faa0:	681b      	ldr	r3, [r3, #0]
 802faa2:	2b03      	cmp	r3, #3
 802faa4:	dd15      	ble.n	802fad2 <read_conn+0x28a>
 802faa6:	4b41      	ldr	r3, [pc, #260]	@ (802fbac <read_conn+0x364>)
 802faa8:	f241 52ed 	movw	r2, #5613	@ 0x15ed
 802faac:	4940      	ldr	r1, [pc, #256]	@ (802fbb0 <read_conn+0x368>)
 802faae:	2004      	movs	r0, #4
 802fab0:	f7fb fb94 	bl	802b1dc <mg_log_prefix>
 802fab4:	68fb      	ldr	r3, [r7, #12]
 802fab6:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 802fab8:	68bb      	ldr	r3, [r7, #8]
 802faba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802fabc:	685b      	ldr	r3, [r3, #4]
 802fabe:	4618      	mov	r0, r3
 802fac0:	f003 f81a 	bl	8032af8 <mg_ntohl>
 802fac4:	4602      	mov	r2, r0
 802fac6:	6a3b      	ldr	r3, [r7, #32]
 802fac8:	685b      	ldr	r3, [r3, #4]
 802faca:	4621      	mov	r1, r4
 802facc:	483c      	ldr	r0, [pc, #240]	@ (802fbc0 <read_conn+0x378>)
 802face:	f7fb fbd5 	bl	802b27c <mg_log>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 802fad2:	68bb      	ldr	r3, [r7, #8]
 802fad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802fad6:	685b      	ldr	r3, [r3, #4]
 802fad8:	4618      	mov	r0, r3
 802fada:	f003 f80d 	bl	8032af8 <mg_ntohl>
 802fade:	4602      	mov	r2, r0
 802fae0:	68bb      	ldr	r3, [r7, #8]
 802fae2:	68db      	ldr	r3, [r3, #12]
 802fae4:	441a      	add	r2, r3
 802fae6:	6a3b      	ldr	r3, [r7, #32]
 802fae8:	605a      	str	r2, [r3, #4]
    s->unacked += pkt->pay.len;
 802faea:	6a3b      	ldr	r3, [r7, #32]
 802faec:	695a      	ldr	r2, [r3, #20]
 802faee:	68bb      	ldr	r3, [r7, #8]
 802faf0:	68db      	ldr	r3, [r3, #12]
 802faf2:	441a      	add	r2, r3
 802faf4:	6a3b      	ldr	r3, [r7, #32]
 802faf6:	615a      	str	r2, [r3, #20]
    if (s->unacked > MIP_TCP_WIN / 2 && s->acked != s->ack) {
 802faf8:	6a3b      	ldr	r3, [r7, #32]
 802fafa:	695b      	ldr	r3, [r3, #20]
 802fafc:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 802fb00:	4293      	cmp	r3, r2
 802fb02:	d961      	bls.n	802fbc8 <read_conn+0x380>
 802fb04:	6a3b      	ldr	r3, [r7, #32]
 802fb06:	691a      	ldr	r2, [r3, #16]
 802fb08:	6a3b      	ldr	r3, [r7, #32]
 802fb0a:	685b      	ldr	r3, [r3, #4]
 802fb0c:	429a      	cmp	r2, r3
 802fb0e:	d05b      	beq.n	802fbc8 <read_conn+0x380>
      MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 802fb10:	4b25      	ldr	r3, [pc, #148]	@ (802fba8 <read_conn+0x360>)
 802fb12:	681b      	ldr	r3, [r3, #0]
 802fb14:	2b03      	cmp	r3, #3
 802fb16:	dd0e      	ble.n	802fb36 <read_conn+0x2ee>
 802fb18:	4b24      	ldr	r3, [pc, #144]	@ (802fbac <read_conn+0x364>)
 802fb1a:	f241 52f4 	movw	r2, #5620	@ 0x15f4
 802fb1e:	4924      	ldr	r1, [pc, #144]	@ (802fbb0 <read_conn+0x368>)
 802fb20:	2004      	movs	r0, #4
 802fb22:	f7fb fb5b 	bl	802b1dc <mg_log_prefix>
 802fb26:	68fb      	ldr	r3, [r7, #12]
 802fb28:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 802fb2a:	6a3b      	ldr	r3, [r7, #32]
 802fb2c:	691b      	ldr	r3, [r3, #16]
 802fb2e:	461a      	mov	r2, r3
 802fb30:	4824      	ldr	r0, [pc, #144]	@ (802fbc4 <read_conn+0x37c>)
 802fb32:	f7fb fba3 	bl	802b27c <mg_log>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 802fb36:	68fb      	ldr	r3, [r7, #12]
 802fb38:	685b      	ldr	r3, [r3, #4]
 802fb3a:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 802fb3c:	6a3b      	ldr	r3, [r7, #32]
 802fb3e:	f103 0818 	add.w	r8, r3, #24
 802fb42:	693b      	ldr	r3, [r7, #16]
 802fb44:	607b      	str	r3, [r7, #4]
 802fb46:	68fb      	ldr	r3, [r7, #12]
 802fb48:	8b1c      	ldrh	r4, [r3, #24]
 802fb4a:	68fb      	ldr	r3, [r7, #12]
 802fb4c:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 802fb4e:	6a3b      	ldr	r3, [r7, #32]
 802fb50:	681b      	ldr	r3, [r3, #0]
 802fb52:	4618      	mov	r0, r3
 802fb54:	f002 ffd0 	bl	8032af8 <mg_ntohl>
 802fb58:	6038      	str	r0, [r7, #0]
 802fb5a:	6a3b      	ldr	r3, [r7, #32]
 802fb5c:	685b      	ldr	r3, [r3, #4]
 802fb5e:	4618      	mov	r0, r3
 802fb60:	f002 ffca 	bl	8032af8 <mg_ntohl>
 802fb64:	4603      	mov	r3, r0
 802fb66:	2200      	movs	r2, #0
 802fb68:	9205      	str	r2, [sp, #20]
 802fb6a:	2200      	movs	r2, #0
 802fb6c:	9204      	str	r2, [sp, #16]
 802fb6e:	9303      	str	r3, [sp, #12]
 802fb70:	6839      	ldr	r1, [r7, #0]
 802fb72:	9102      	str	r1, [sp, #8]
 802fb74:	9501      	str	r5, [sp, #4]
 802fb76:	9400      	str	r4, [sp, #0]
 802fb78:	2310      	movs	r3, #16
 802fb7a:	687a      	ldr	r2, [r7, #4]
 802fb7c:	4641      	mov	r1, r8
 802fb7e:	4630      	mov	r0, r6
 802fb80:	f7ff fb5e 	bl	802f240 <tx_tcp>
      s->unacked = 0;
 802fb84:	6a3b      	ldr	r3, [r7, #32]
 802fb86:	2200      	movs	r2, #0
 802fb88:	615a      	str	r2, [r3, #20]
      s->acked = s->ack;
 802fb8a:	6a3b      	ldr	r3, [r7, #32]
 802fb8c:	685a      	ldr	r2, [r3, #4]
 802fb8e:	6a3b      	ldr	r3, [r7, #32]
 802fb90:	611a      	str	r2, [r3, #16]
      if (s->ttype != MIP_TTYPE_KEEPALIVE) settmout(c, MIP_TTYPE_KEEPALIVE);
 802fb92:	6a3b      	ldr	r3, [r7, #32]
 802fb94:	7f9b      	ldrb	r3, [r3, #30]
 802fb96:	2b00      	cmp	r3, #0
 802fb98:	d01e      	beq.n	802fbd8 <read_conn+0x390>
 802fb9a:	2100      	movs	r1, #0
 802fb9c:	68f8      	ldr	r0, [r7, #12]
 802fb9e:	f7fe f991 	bl	802dec4 <settmout>
 802fba2:	e019      	b.n	802fbd8 <read_conn+0x390>
 802fba4:	08041c44 	.word	0x08041c44
 802fba8:	20000298 	.word	0x20000298
 802fbac:	08044698 	.word	0x08044698
 802fbb0:	08041564 	.word	0x08041564
 802fbb4:	08042ee8 	.word	0x08042ee8
 802fbb8:	08042f00 	.word	0x08042f00
 802fbbc:	08042e48 	.word	0x08042e48
 802fbc0:	08042f18 	.word	0x08042f18
 802fbc4:	08042f2c 	.word	0x08042f2c
      if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 802fbc8:	6a3b      	ldr	r3, [r7, #32]
 802fbca:	7f9b      	ldrb	r3, [r3, #30]
 802fbcc:	2b01      	cmp	r3, #1
 802fbce:	d003      	beq.n	802fbd8 <read_conn+0x390>
 802fbd0:	2101      	movs	r1, #1
 802fbd2:	68f8      	ldr	r0, [r7, #12]
 802fbd4:	f7fe f976 	bl	802dec4 <settmout>
    if (c->is_tls && c->is_tls_hs) {
 802fbd8:	68fb      	ldr	r3, [r7, #12]
 802fbda:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 802fbde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802fbe2:	b2db      	uxtb	r3, r3
 802fbe4:	2b00      	cmp	r3, #0
 802fbe6:	d00b      	beq.n	802fc00 <read_conn+0x3b8>
 802fbe8:	68fb      	ldr	r3, [r7, #12]
 802fbea:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 802fbee:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 802fbf2:	b2db      	uxtb	r3, r3
 802fbf4:	2b00      	cmp	r3, #0
 802fbf6:	d003      	beq.n	802fc00 <read_conn+0x3b8>
      mg_tls_handshake(c);
 802fbf8:	68f8      	ldr	r0, [r7, #12]
 802fbfa:	f002 fd41 	bl	8032680 <mg_tls_handshake>
 802fbfe:	e031      	b.n	802fc64 <read_conn+0x41c>
    } else if (c->is_tls) {
 802fc00:	68fb      	ldr	r3, [r7, #12]
 802fc02:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 802fc06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802fc0a:	b2db      	uxtb	r3, r3
 802fc0c:	2b00      	cmp	r3, #0
 802fc0e:	d021      	beq.n	802fc54 <read_conn+0x40c>
      io = &c->recv;
 802fc10:	68fb      	ldr	r3, [r7, #12]
 802fc12:	3338      	adds	r3, #56	@ 0x38
 802fc14:	61fb      	str	r3, [r7, #28]
      if (io->size - io->len < pkt->pay.len &&
 802fc16:	69fb      	ldr	r3, [r7, #28]
 802fc18:	685a      	ldr	r2, [r3, #4]
 802fc1a:	69fb      	ldr	r3, [r7, #28]
 802fc1c:	689b      	ldr	r3, [r3, #8]
 802fc1e:	1ad2      	subs	r2, r2, r3
 802fc20:	68bb      	ldr	r3, [r7, #8]
 802fc22:	68db      	ldr	r3, [r3, #12]
 802fc24:	429a      	cmp	r2, r3
 802fc26:	d210      	bcs.n	802fc4a <read_conn+0x402>
          !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 802fc28:	69fb      	ldr	r3, [r7, #28]
 802fc2a:	689a      	ldr	r2, [r3, #8]
 802fc2c:	68bb      	ldr	r3, [r7, #8]
 802fc2e:	68db      	ldr	r3, [r3, #12]
 802fc30:	4413      	add	r3, r2
 802fc32:	4619      	mov	r1, r3
 802fc34:	69f8      	ldr	r0, [r7, #28]
 802fc36:	f7fa fae1 	bl	802a1fc <mg_iobuf_resize>
 802fc3a:	4603      	mov	r3, r0
      if (io->size - io->len < pkt->pay.len &&
 802fc3c:	2b00      	cmp	r3, #0
 802fc3e:	d104      	bne.n	802fc4a <read_conn+0x402>
        mg_error(c, "oom");
 802fc40:	490b      	ldr	r1, [pc, #44]	@ (802fc70 <read_conn+0x428>)
 802fc42:	68f8      	ldr	r0, [r7, #12]
 802fc44:	f7f5 ff04 	bl	8025a50 <mg_error>
 802fc48:	e00c      	b.n	802fc64 <read_conn+0x41c>
        handle_tls_recv(c, io);
 802fc4a:	69f9      	ldr	r1, [r7, #28]
 802fc4c:	68f8      	ldr	r0, [r7, #12]
 802fc4e:	f7ff fdc7 	bl	802f7e0 <handle_tls_recv>
}
 802fc52:	e007      	b.n	802fc64 <read_conn+0x41c>
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 802fc54:	68bb      	ldr	r3, [r7, #8]
 802fc56:	330c      	adds	r3, #12
 802fc58:	461a      	mov	r2, r3
 802fc5a:	2107      	movs	r1, #7
 802fc5c:	68f8      	ldr	r0, [r7, #12]
 802fc5e:	f7f5 fed7 	bl	8025a10 <mg_call>
}
 802fc62:	e7ff      	b.n	802fc64 <read_conn+0x41c>
 802fc64:	bf00      	nop
 802fc66:	3728      	adds	r7, #40	@ 0x28
 802fc68:	46bd      	mov	sp, r7
 802fc6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802fc6e:	bf00      	nop
 802fc70:	08042e48 	.word	0x08042e48

0802fc74 <rx_tcp>:

static void rx_tcp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 802fc74:	b590      	push	{r4, r7, lr}
 802fc76:	b089      	sub	sp, #36	@ 0x24
 802fc78:	af02      	add	r7, sp, #8
 802fc7a:	6078      	str	r0, [r7, #4]
 802fc7c:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 802fc7e:	687b      	ldr	r3, [r7, #4]
 802fc80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802fc82:	2200      	movs	r2, #0
 802fc84:	6839      	ldr	r1, [r7, #0]
 802fc86:	4618      	mov	r0, r3
 802fc88:	f7fe fcba 	bl	802e600 <getpeer>
 802fc8c:	6178      	str	r0, [r7, #20]
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 802fc8e:	697b      	ldr	r3, [r7, #20]
 802fc90:	2b00      	cmp	r3, #0
 802fc92:	d002      	beq.n	802fc9a <rx_tcp+0x26>
 802fc94:	697b      	ldr	r3, [r7, #20]
 802fc96:	33b0      	adds	r3, #176	@ 0xb0
 802fc98:	e000      	b.n	802fc9c <rx_tcp+0x28>
 802fc9a:	2300      	movs	r3, #0
 802fc9c:	613b      	str	r3, [r7, #16]
#if 0
  MG_INFO(("%lu %hhu %d", c ? c->id : 0, pkt->tcp->flags, (int) pkt->pay.len));
#endif
  if (c != NULL && c->is_connecting && pkt->tcp->flags == (TH_SYN | TH_ACK)) {
 802fc9e:	697b      	ldr	r3, [r7, #20]
 802fca0:	2b00      	cmp	r3, #0
 802fca2:	d048      	beq.n	802fd36 <rx_tcp+0xc2>
 802fca4:	697b      	ldr	r3, [r7, #20]
 802fca6:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 802fcaa:	f003 0320 	and.w	r3, r3, #32
 802fcae:	b2db      	uxtb	r3, r3
 802fcb0:	2b00      	cmp	r3, #0
 802fcb2:	d040      	beq.n	802fd36 <rx_tcp+0xc2>
 802fcb4:	683b      	ldr	r3, [r7, #0]
 802fcb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802fcb8:	7b5b      	ldrb	r3, [r3, #13]
 802fcba:	2b12      	cmp	r3, #18
 802fcbc:	d13b      	bne.n	802fd36 <rx_tcp+0xc2>
    s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq) + 1;
 802fcbe:	683b      	ldr	r3, [r7, #0]
 802fcc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802fcc2:	689b      	ldr	r3, [r3, #8]
 802fcc4:	4618      	mov	r0, r3
 802fcc6:	f002 ff17 	bl	8032af8 <mg_ntohl>
 802fcca:	4602      	mov	r2, r0
 802fccc:	693b      	ldr	r3, [r7, #16]
 802fcce:	601a      	str	r2, [r3, #0]
 802fcd0:	683b      	ldr	r3, [r7, #0]
 802fcd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802fcd4:	685b      	ldr	r3, [r3, #4]
 802fcd6:	4618      	mov	r0, r3
 802fcd8:	f002 ff0e 	bl	8032af8 <mg_ntohl>
 802fcdc:	4603      	mov	r3, r0
 802fcde:	1c5a      	adds	r2, r3, #1
 802fce0:	693b      	ldr	r3, [r7, #16]
 802fce2:	605a      	str	r2, [r3, #4]
    tx_tcp_pkt(ifp, pkt, TH_ACK, pkt->tcp->ack, NULL, 0);
 802fce4:	683b      	ldr	r3, [r7, #0]
 802fce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802fce8:	689b      	ldr	r3, [r3, #8]
 802fcea:	2200      	movs	r2, #0
 802fcec:	9201      	str	r2, [sp, #4]
 802fcee:	2200      	movs	r2, #0
 802fcf0:	9200      	str	r2, [sp, #0]
 802fcf2:	2210      	movs	r2, #16
 802fcf4:	6839      	ldr	r1, [r7, #0]
 802fcf6:	6878      	ldr	r0, [r7, #4]
 802fcf8:	f7ff fb6e 	bl	802f3d8 <tx_tcp_pkt>
    c->is_connecting = 0;  // Client connected
 802fcfc:	697a      	ldr	r2, [r7, #20]
 802fcfe:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 802fd02:	f36f 1345 	bfc	r3, #5, #1
 802fd06:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    settmout(c, MIP_TTYPE_KEEPALIVE);
 802fd0a:	2100      	movs	r1, #0
 802fd0c:	6978      	ldr	r0, [r7, #20]
 802fd0e:	f7fe f8d9 	bl	802dec4 <settmout>
    mg_call(c, MG_EV_CONNECT, NULL);  // Let user know
 802fd12:	2200      	movs	r2, #0
 802fd14:	2104      	movs	r1, #4
 802fd16:	6978      	ldr	r0, [r7, #20]
 802fd18:	f7f5 fe7a 	bl	8025a10 <mg_call>
    if (c->is_tls_hs) mg_tls_handshake(c);
 802fd1c:	697b      	ldr	r3, [r7, #20]
 802fd1e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 802fd22:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 802fd26:	b2db      	uxtb	r3, r3
 802fd28:	2b00      	cmp	r3, #0
 802fd2a:	f000 80cd 	beq.w	802fec8 <rx_tcp+0x254>
 802fd2e:	6978      	ldr	r0, [r7, #20]
 802fd30:	f002 fca6 	bl	8032680 <mg_tls_handshake>
 802fd34:	e0c8      	b.n	802fec8 <rx_tcp+0x254>
  } else if (c != NULL && c->is_connecting && pkt->tcp->flags != TH_ACK) {
 802fd36:	697b      	ldr	r3, [r7, #20]
 802fd38:	2b00      	cmp	r3, #0
 802fd3a:	d019      	beq.n	802fd70 <rx_tcp+0xfc>
 802fd3c:	697b      	ldr	r3, [r7, #20]
 802fd3e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 802fd42:	f003 0320 	and.w	r3, r3, #32
 802fd46:	b2db      	uxtb	r3, r3
 802fd48:	2b00      	cmp	r3, #0
 802fd4a:	d011      	beq.n	802fd70 <rx_tcp+0xfc>
 802fd4c:	683b      	ldr	r3, [r7, #0]
 802fd4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802fd50:	7b5b      	ldrb	r3, [r3, #13]
 802fd52:	2b10      	cmp	r3, #16
 802fd54:	d00c      	beq.n	802fd70 <rx_tcp+0xfc>
    // mg_hexdump(pkt->raw.buf, pkt->raw.len);
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 802fd56:	683b      	ldr	r3, [r7, #0]
 802fd58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802fd5a:	689b      	ldr	r3, [r3, #8]
 802fd5c:	2200      	movs	r2, #0
 802fd5e:	9201      	str	r2, [sp, #4]
 802fd60:	2200      	movs	r2, #0
 802fd62:	9200      	str	r2, [sp, #0]
 802fd64:	2214      	movs	r2, #20
 802fd66:	6839      	ldr	r1, [r7, #0]
 802fd68:	6878      	ldr	r0, [r7, #4]
 802fd6a:	f7ff fb35 	bl	802f3d8 <tx_tcp_pkt>
 802fd6e:	e0ab      	b.n	802fec8 <rx_tcp+0x254>
  } else if (c != NULL && pkt->tcp->flags & TH_RST) {
 802fd70:	697b      	ldr	r3, [r7, #20]
 802fd72:	2b00      	cmp	r3, #0
 802fd74:	d00b      	beq.n	802fd8e <rx_tcp+0x11a>
 802fd76:	683b      	ldr	r3, [r7, #0]
 802fd78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802fd7a:	7b5b      	ldrb	r3, [r3, #13]
 802fd7c:	f003 0304 	and.w	r3, r3, #4
 802fd80:	2b00      	cmp	r3, #0
 802fd82:	d004      	beq.n	802fd8e <rx_tcp+0x11a>
    mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 802fd84:	4952      	ldr	r1, [pc, #328]	@ (802fed0 <rx_tcp+0x25c>)
 802fd86:	6978      	ldr	r0, [r7, #20]
 802fd88:	f7f5 fe62 	bl	8025a50 <mg_error>
 802fd8c:	e09c      	b.n	802fec8 <rx_tcp+0x254>
  } else if (c != NULL) {
 802fd8e:	697b      	ldr	r3, [r7, #20]
 802fd90:	2b00      	cmp	r3, #0
 802fd92:	d00f      	beq.n	802fdb4 <rx_tcp+0x140>
    MG_DEBUG(("%lu %d %M:%hu -> %M:%hu", c->id, (int) pkt->raw.len,
              mg_print_ip4, &pkt->ip->src, mg_ntohs(pkt->tcp->sport),
              mg_print_ip4, &pkt->ip->dst, mg_ntohs(pkt->tcp->dport)));
    mg_hexdump(pkt->pay.buf, pkt->pay.len);
#endif
    s->tmiss = 0;                         // Reset missed keep-alive counter
 802fd94:	693b      	ldr	r3, [r7, #16]
 802fd96:	2200      	movs	r2, #0
 802fd98:	77da      	strb	r2, [r3, #31]
    if (s->ttype == MIP_TTYPE_KEEPALIVE)  // Advance keep-alive timer
 802fd9a:	693b      	ldr	r3, [r7, #16]
 802fd9c:	7f9b      	ldrb	r3, [r3, #30]
 802fd9e:	2b00      	cmp	r3, #0
 802fda0:	d103      	bne.n	802fdaa <rx_tcp+0x136>
      settmout(c,
 802fda2:	2100      	movs	r1, #0
 802fda4:	6978      	ldr	r0, [r7, #20]
 802fda6:	f7fe f88d 	bl	802dec4 <settmout>
               MIP_TTYPE_KEEPALIVE);  // unless a former ACK timeout is pending
    read_conn(c, pkt);  // Override timer with ACK timeout if needed
 802fdaa:	6839      	ldr	r1, [r7, #0]
 802fdac:	6978      	ldr	r0, [r7, #20]
 802fdae:	f7ff fd4b 	bl	802f848 <read_conn>
  } else if (!c->is_accepted) {  // no peer
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
  } else {
    // MG_VERBOSE(("dropped silently.."));
  }
}
 802fdb2:	e089      	b.n	802fec8 <rx_tcp+0x254>
  } else if ((c = getpeer(ifp->mgr, pkt, true)) == NULL) {
 802fdb4:	687b      	ldr	r3, [r7, #4]
 802fdb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802fdb8:	2201      	movs	r2, #1
 802fdba:	6839      	ldr	r1, [r7, #0]
 802fdbc:	4618      	mov	r0, r3
 802fdbe:	f7fe fc1f 	bl	802e600 <getpeer>
 802fdc2:	6178      	str	r0, [r7, #20]
 802fdc4:	697b      	ldr	r3, [r7, #20]
 802fdc6:	2b00      	cmp	r3, #0
 802fdc8:	d10c      	bne.n	802fde4 <rx_tcp+0x170>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 802fdca:	683b      	ldr	r3, [r7, #0]
 802fdcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802fdce:	689b      	ldr	r3, [r3, #8]
 802fdd0:	2200      	movs	r2, #0
 802fdd2:	9201      	str	r2, [sp, #4]
 802fdd4:	2200      	movs	r2, #0
 802fdd6:	9200      	str	r2, [sp, #0]
 802fdd8:	2214      	movs	r2, #20
 802fdda:	6839      	ldr	r1, [r7, #0]
 802fddc:	6878      	ldr	r0, [r7, #4]
 802fdde:	f7ff fafb 	bl	802f3d8 <tx_tcp_pkt>
}
 802fde2:	e071      	b.n	802fec8 <rx_tcp+0x254>
  } else if (pkt->tcp->flags & TH_RST) {
 802fde4:	683b      	ldr	r3, [r7, #0]
 802fde6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802fde8:	7b5b      	ldrb	r3, [r3, #13]
 802fdea:	f003 0304 	and.w	r3, r3, #4
 802fdee:	2b00      	cmp	r3, #0
 802fdf0:	d00c      	beq.n	802fe0c <rx_tcp+0x198>
    if (c->is_accepted) mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 802fdf2:	697b      	ldr	r3, [r7, #20]
 802fdf4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 802fdf8:	f003 0304 	and.w	r3, r3, #4
 802fdfc:	b2db      	uxtb	r3, r3
 802fdfe:	2b00      	cmp	r3, #0
 802fe00:	d062      	beq.n	802fec8 <rx_tcp+0x254>
 802fe02:	4933      	ldr	r1, [pc, #204]	@ (802fed0 <rx_tcp+0x25c>)
 802fe04:	6978      	ldr	r0, [r7, #20]
 802fe06:	f7f5 fe23 	bl	8025a50 <mg_error>
}
 802fe0a:	e05d      	b.n	802fec8 <rx_tcp+0x254>
  } else if (pkt->tcp->flags & TH_SYN) {
 802fe0c:	683b      	ldr	r3, [r7, #0]
 802fe0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802fe10:	7b5b      	ldrb	r3, [r3, #13]
 802fe12:	f003 0302 	and.w	r3, r3, #2
 802fe16:	2b00      	cmp	r3, #0
 802fe18:	d016      	beq.n	802fe48 <rx_tcp+0x1d4>
    uint32_t isn = mg_htonl((uint32_t) mg_ntohs(pkt->tcp->sport));
 802fe1a:	683b      	ldr	r3, [r7, #0]
 802fe1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802fe1e:	881b      	ldrh	r3, [r3, #0]
 802fe20:	b29b      	uxth	r3, r3
 802fe22:	4618      	mov	r0, r3
 802fe24:	f002 fe81 	bl	8032b2a <mg_ntohs>
 802fe28:	4603      	mov	r3, r0
 802fe2a:	4618      	mov	r0, r3
 802fe2c:	f002 fe64 	bl	8032af8 <mg_ntohl>
 802fe30:	60f8      	str	r0, [r7, #12]
    tx_tcp_pkt(ifp, pkt, TH_SYN | TH_ACK, isn, NULL, 0);
 802fe32:	2300      	movs	r3, #0
 802fe34:	9301      	str	r3, [sp, #4]
 802fe36:	2300      	movs	r3, #0
 802fe38:	9300      	str	r3, [sp, #0]
 802fe3a:	68fb      	ldr	r3, [r7, #12]
 802fe3c:	2212      	movs	r2, #18
 802fe3e:	6839      	ldr	r1, [r7, #0]
 802fe40:	6878      	ldr	r0, [r7, #4]
 802fe42:	f7ff fac9 	bl	802f3d8 <tx_tcp_pkt>
}
 802fe46:	e03f      	b.n	802fec8 <rx_tcp+0x254>
  } else if (pkt->tcp->flags & TH_FIN) {
 802fe48:	683b      	ldr	r3, [r7, #0]
 802fe4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802fe4c:	7b5b      	ldrb	r3, [r3, #13]
 802fe4e:	f003 0301 	and.w	r3, r3, #1
 802fe52:	2b00      	cmp	r3, #0
 802fe54:	d00c      	beq.n	802fe70 <rx_tcp+0x1fc>
    tx_tcp_pkt(ifp, pkt, TH_FIN | TH_ACK, pkt->tcp->ack, NULL, 0);
 802fe56:	683b      	ldr	r3, [r7, #0]
 802fe58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802fe5a:	689b      	ldr	r3, [r3, #8]
 802fe5c:	2200      	movs	r2, #0
 802fe5e:	9201      	str	r2, [sp, #4]
 802fe60:	2200      	movs	r2, #0
 802fe62:	9200      	str	r2, [sp, #0]
 802fe64:	2211      	movs	r2, #17
 802fe66:	6839      	ldr	r1, [r7, #0]
 802fe68:	6878      	ldr	r0, [r7, #4]
 802fe6a:	f7ff fab5 	bl	802f3d8 <tx_tcp_pkt>
}
 802fe6e:	e02b      	b.n	802fec8 <rx_tcp+0x254>
  } else if (mg_htonl(pkt->tcp->ack) == mg_htons(pkt->tcp->sport) + 1U) {
 802fe70:	683b      	ldr	r3, [r7, #0]
 802fe72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802fe74:	689b      	ldr	r3, [r3, #8]
 802fe76:	4618      	mov	r0, r3
 802fe78:	f002 fe3e 	bl	8032af8 <mg_ntohl>
 802fe7c:	4604      	mov	r4, r0
 802fe7e:	683b      	ldr	r3, [r7, #0]
 802fe80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802fe82:	881b      	ldrh	r3, [r3, #0]
 802fe84:	b29b      	uxth	r3, r3
 802fe86:	4618      	mov	r0, r3
 802fe88:	f002 fe4f 	bl	8032b2a <mg_ntohs>
 802fe8c:	4603      	mov	r3, r0
 802fe8e:	3301      	adds	r3, #1
 802fe90:	429c      	cmp	r4, r3
 802fe92:	d104      	bne.n	802fe9e <rx_tcp+0x22a>
    accept_conn(c, pkt);
 802fe94:	6839      	ldr	r1, [r7, #0]
 802fe96:	6978      	ldr	r0, [r7, #20]
 802fe98:	f7ff fae4 	bl	802f464 <accept_conn>
}
 802fe9c:	e014      	b.n	802fec8 <rx_tcp+0x254>
  } else if (!c->is_accepted) {  // no peer
 802fe9e:	697b      	ldr	r3, [r7, #20]
 802fea0:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 802fea4:	f003 0304 	and.w	r3, r3, #4
 802fea8:	b2db      	uxtb	r3, r3
 802feaa:	2b00      	cmp	r3, #0
 802feac:	d10c      	bne.n	802fec8 <rx_tcp+0x254>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 802feae:	683b      	ldr	r3, [r7, #0]
 802feb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802feb2:	689b      	ldr	r3, [r3, #8]
 802feb4:	2200      	movs	r2, #0
 802feb6:	9201      	str	r2, [sp, #4]
 802feb8:	2200      	movs	r2, #0
 802feba:	9200      	str	r2, [sp, #0]
 802febc:	2214      	movs	r2, #20
 802febe:	6839      	ldr	r1, [r7, #0]
 802fec0:	6878      	ldr	r0, [r7, #4]
 802fec2:	f7ff fa89 	bl	802f3d8 <tx_tcp_pkt>
}
 802fec6:	e7ff      	b.n	802fec8 <rx_tcp+0x254>
 802fec8:	bf00      	nop
 802feca:	371c      	adds	r7, #28
 802fecc:	46bd      	mov	sp, r7
 802fece:	bd90      	pop	{r4, r7, pc}
 802fed0:	08042f3c 	.word	0x08042f3c

0802fed4 <rx_ip>:

static void rx_ip(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 802fed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 802fed6:	b089      	sub	sp, #36	@ 0x24
 802fed8:	af04      	add	r7, sp, #16
 802feda:	6078      	str	r0, [r7, #4]
 802fedc:	6039      	str	r1, [r7, #0]
  if (pkt->ip->frag & IP_MORE_FRAGS_MSK || pkt->ip->frag & IP_FRAG_OFFSET_MSK) {
 802fede:	683b      	ldr	r3, [r7, #0]
 802fee0:	69db      	ldr	r3, [r3, #28]
 802fee2:	88db      	ldrh	r3, [r3, #6]
 802fee4:	b29b      	uxth	r3, r3
 802fee6:	f003 0320 	and.w	r3, r3, #32
 802feea:	2b00      	cmp	r3, #0
 802feec:	d109      	bne.n	802ff02 <rx_ip+0x2e>
 802feee:	683b      	ldr	r3, [r7, #0]
 802fef0:	69db      	ldr	r3, [r3, #28]
 802fef2:	88db      	ldrh	r3, [r3, #6]
 802fef4:	b29b      	uxth	r3, r3
 802fef6:	461a      	mov	r2, r3
 802fef8:	f64f 731f 	movw	r3, #65311	@ 0xff1f
 802fefc:	4013      	ands	r3, r2
 802fefe:	2b00      	cmp	r3, #0
 802ff00:	d026      	beq.n	802ff50 <rx_ip+0x7c>
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 802ff02:	683b      	ldr	r3, [r7, #0]
 802ff04:	69db      	ldr	r3, [r3, #28]
 802ff06:	7a5b      	ldrb	r3, [r3, #9]
 802ff08:	2b11      	cmp	r3, #17
 802ff0a:	d105      	bne.n	802ff18 <rx_ip+0x44>
 802ff0c:	683b      	ldr	r3, [r7, #0]
 802ff0e:	69db      	ldr	r3, [r3, #28]
 802ff10:	f103 0214 	add.w	r2, r3, #20
 802ff14:	683b      	ldr	r3, [r7, #0]
 802ff16:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 802ff18:	683b      	ldr	r3, [r7, #0]
 802ff1a:	69db      	ldr	r3, [r3, #28]
 802ff1c:	7a5b      	ldrb	r3, [r3, #9]
 802ff1e:	2b06      	cmp	r3, #6
 802ff20:	d105      	bne.n	802ff2e <rx_ip+0x5a>
 802ff22:	683b      	ldr	r3, [r7, #0]
 802ff24:	69db      	ldr	r3, [r3, #28]
 802ff26:	f103 0214 	add.w	r2, r3, #20
 802ff2a:	683b      	ldr	r3, [r7, #0]
 802ff2c:	629a      	str	r2, [r3, #40]	@ 0x28
    struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 802ff2e:	687b      	ldr	r3, [r7, #4]
 802ff30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802ff32:	2200      	movs	r2, #0
 802ff34:	6839      	ldr	r1, [r7, #0]
 802ff36:	4618      	mov	r0, r3
 802ff38:	f7fe fb62 	bl	802e600 <getpeer>
 802ff3c:	60b8      	str	r0, [r7, #8]
    if (c) mg_error(c, "Received fragmented packet");
 802ff3e:	68bb      	ldr	r3, [r7, #8]
 802ff40:	2b00      	cmp	r3, #0
 802ff42:	f000 811b 	beq.w	803017c <rx_ip+0x2a8>
 802ff46:	4992      	ldr	r1, [pc, #584]	@ (8030190 <rx_ip+0x2bc>)
 802ff48:	68b8      	ldr	r0, [r7, #8]
 802ff4a:	f7f5 fd81 	bl	8025a50 <mg_error>
  if (pkt->ip->frag & IP_MORE_FRAGS_MSK || pkt->ip->frag & IP_FRAG_OFFSET_MSK) {
 802ff4e:	e115      	b.n	803017c <rx_ip+0x2a8>
  } else if (pkt->ip->proto == 1) {
 802ff50:	683b      	ldr	r3, [r7, #0]
 802ff52:	69db      	ldr	r3, [r3, #28]
 802ff54:	7a5b      	ldrb	r3, [r3, #9]
 802ff56:	2b01      	cmp	r3, #1
 802ff58:	d116      	bne.n	802ff88 <rx_ip+0xb4>
    pkt->icmp = (struct icmp *) (pkt->ip + 1);
 802ff5a:	683b      	ldr	r3, [r7, #0]
 802ff5c:	69db      	ldr	r3, [r3, #28]
 802ff5e:	f103 0214 	add.w	r2, r3, #20
 802ff62:	683b      	ldr	r3, [r7, #0]
 802ff64:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 802ff66:	683b      	ldr	r3, [r7, #0]
 802ff68:	68db      	ldr	r3, [r3, #12]
 802ff6a:	2b03      	cmp	r3, #3
 802ff6c:	f240 8108 	bls.w	8030180 <rx_ip+0x2ac>
    mkpay(pkt, pkt->icmp + 1);
 802ff70:	683b      	ldr	r3, [r7, #0]
 802ff72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802ff74:	3304      	adds	r3, #4
 802ff76:	4619      	mov	r1, r3
 802ff78:	6838      	ldr	r0, [r7, #0]
 802ff7a:	f7fd ff2b 	bl	802ddd4 <mkpay>
    rx_icmp(ifp, pkt);
 802ff7e:	6839      	ldr	r1, [r7, #0]
 802ff80:	6878      	ldr	r0, [r7, #4]
 802ff82:	f7fe fcb9 	bl	802e8f8 <rx_icmp>
 802ff86:	e100      	b.n	803018a <rx_ip+0x2b6>
  } else if (pkt->ip->proto == 17) {
 802ff88:	683b      	ldr	r3, [r7, #0]
 802ff8a:	69db      	ldr	r3, [r3, #28]
 802ff8c:	7a5b      	ldrb	r3, [r3, #9]
 802ff8e:	2b11      	cmp	r3, #17
 802ff90:	f040 808b 	bne.w	80300aa <rx_ip+0x1d6>
    pkt->udp = (struct udp *) (pkt->ip + 1);
 802ff94:	683b      	ldr	r3, [r7, #0]
 802ff96:	69db      	ldr	r3, [r3, #28]
 802ff98:	f103 0214 	add.w	r2, r3, #20
 802ff9c:	683b      	ldr	r3, [r7, #0]
 802ff9e:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 802ffa0:	683b      	ldr	r3, [r7, #0]
 802ffa2:	68db      	ldr	r3, [r3, #12]
 802ffa4:	2b07      	cmp	r3, #7
 802ffa6:	f240 80ed 	bls.w	8030184 <rx_ip+0x2b0>
    mkpay(pkt, pkt->udp + 1);
 802ffaa:	683b      	ldr	r3, [r7, #0]
 802ffac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802ffae:	3308      	adds	r3, #8
 802ffb0:	4619      	mov	r1, r3
 802ffb2:	6838      	ldr	r0, [r7, #0]
 802ffb4:	f7fd ff0e 	bl	802ddd4 <mkpay>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 802ffb8:	4b76      	ldr	r3, [pc, #472]	@ (8030194 <rx_ip+0x2c0>)
 802ffba:	681b      	ldr	r3, [r3, #0]
 802ffbc:	2b03      	cmp	r3, #3
 802ffbe:	dd2d      	ble.n	803001c <rx_ip+0x148>
 802ffc0:	4b75      	ldr	r3, [pc, #468]	@ (8030198 <rx_ip+0x2c4>)
 802ffc2:	f241 6255 	movw	r2, #5717	@ 0x1655
 802ffc6:	4975      	ldr	r1, [pc, #468]	@ (803019c <rx_ip+0x2c8>)
 802ffc8:	2004      	movs	r0, #4
 802ffca:	f7fb f907 	bl	802b1dc <mg_log_prefix>
 802ffce:	683b      	ldr	r3, [r7, #0]
 802ffd0:	69db      	ldr	r3, [r3, #28]
 802ffd2:	f103 050c 	add.w	r5, r3, #12
 802ffd6:	683b      	ldr	r3, [r7, #0]
 802ffd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802ffda:	881b      	ldrh	r3, [r3, #0]
 802ffdc:	b29b      	uxth	r3, r3
 802ffde:	4618      	mov	r0, r3
 802ffe0:	f002 fda3 	bl	8032b2a <mg_ntohs>
 802ffe4:	4603      	mov	r3, r0
 802ffe6:	461e      	mov	r6, r3
 802ffe8:	683b      	ldr	r3, [r7, #0]
 802ffea:	69db      	ldr	r3, [r3, #28]
 802ffec:	f103 0410 	add.w	r4, r3, #16
 802fff0:	683b      	ldr	r3, [r7, #0]
 802fff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802fff4:	885b      	ldrh	r3, [r3, #2]
 802fff6:	b29b      	uxth	r3, r3
 802fff8:	4618      	mov	r0, r3
 802fffa:	f002 fd96 	bl	8032b2a <mg_ntohs>
 802fffe:	4603      	mov	r3, r0
 8030000:	461a      	mov	r2, r3
 8030002:	683b      	ldr	r3, [r7, #0]
 8030004:	68db      	ldr	r3, [r3, #12]
 8030006:	9303      	str	r3, [sp, #12]
 8030008:	9202      	str	r2, [sp, #8]
 803000a:	9401      	str	r4, [sp, #4]
 803000c:	4b64      	ldr	r3, [pc, #400]	@ (80301a0 <rx_ip+0x2cc>)
 803000e:	9300      	str	r3, [sp, #0]
 8030010:	4633      	mov	r3, r6
 8030012:	462a      	mov	r2, r5
 8030014:	4962      	ldr	r1, [pc, #392]	@ (80301a0 <rx_ip+0x2cc>)
 8030016:	4863      	ldr	r0, [pc, #396]	@ (80301a4 <rx_ip+0x2d0>)
 8030018:	f7fb f930 	bl	802b27c <mg_log>
                mg_ntohs(pkt->udp->sport), mg_print_ip4, &pkt->ip->dst,
                mg_ntohs(pkt->udp->dport), (int) pkt->pay.len));
    if (ifp->enable_dhcp_client && pkt->udp->dport == mg_htons(68)) {
 803001c:	687b      	ldr	r3, [r7, #4]
 803001e:	7f1b      	ldrb	r3, [r3, #28]
 8030020:	2b00      	cmp	r3, #0
 8030022:	d01c      	beq.n	803005e <rx_ip+0x18a>
 8030024:	683b      	ldr	r3, [r7, #0]
 8030026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8030028:	885b      	ldrh	r3, [r3, #2]
 803002a:	b29c      	uxth	r4, r3
 803002c:	2044      	movs	r0, #68	@ 0x44
 803002e:	f002 fd7c 	bl	8032b2a <mg_ntohs>
 8030032:	4603      	mov	r3, r0
 8030034:	429c      	cmp	r4, r3
 8030036:	d112      	bne.n	803005e <rx_ip+0x18a>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 8030038:	683b      	ldr	r3, [r7, #0]
 803003a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 803003c:	f103 0208 	add.w	r2, r3, #8
 8030040:	683b      	ldr	r3, [r7, #0]
 8030042:	631a      	str	r2, [r3, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 8030044:	683b      	ldr	r3, [r7, #0]
 8030046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8030048:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 803004c:	4619      	mov	r1, r3
 803004e:	6838      	ldr	r0, [r7, #0]
 8030050:	f7fd fec0 	bl	802ddd4 <mkpay>
      rx_dhcp_client(ifp, pkt);
 8030054:	6839      	ldr	r1, [r7, #0]
 8030056:	6878      	ldr	r0, [r7, #4]
 8030058:	f7fe fcaa 	bl	802e9b0 <rx_dhcp_client>
 803005c:	e095      	b.n	803018a <rx_ip+0x2b6>
    } else if (ifp->enable_dhcp_server && pkt->udp->dport == mg_htons(67)) {
 803005e:	687b      	ldr	r3, [r7, #4]
 8030060:	7f5b      	ldrb	r3, [r3, #29]
 8030062:	2b00      	cmp	r3, #0
 8030064:	d01c      	beq.n	80300a0 <rx_ip+0x1cc>
 8030066:	683b      	ldr	r3, [r7, #0]
 8030068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 803006a:	885b      	ldrh	r3, [r3, #2]
 803006c:	b29c      	uxth	r4, r3
 803006e:	2043      	movs	r0, #67	@ 0x43
 8030070:	f002 fd5b 	bl	8032b2a <mg_ntohs>
 8030074:	4603      	mov	r3, r0
 8030076:	429c      	cmp	r4, r3
 8030078:	d112      	bne.n	80300a0 <rx_ip+0x1cc>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 803007a:	683b      	ldr	r3, [r7, #0]
 803007c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 803007e:	f103 0208 	add.w	r2, r3, #8
 8030082:	683b      	ldr	r3, [r7, #0]
 8030084:	631a      	str	r2, [r3, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 8030086:	683b      	ldr	r3, [r7, #0]
 8030088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 803008a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 803008e:	4619      	mov	r1, r3
 8030090:	6838      	ldr	r0, [r7, #0]
 8030092:	f7fd fe9f 	bl	802ddd4 <mkpay>
      rx_dhcp_server(ifp, pkt);
 8030096:	6839      	ldr	r1, [r7, #0]
 8030098:	6878      	ldr	r0, [r7, #4]
 803009a:	f7fe fe71 	bl	802ed80 <rx_dhcp_server>
 803009e:	e074      	b.n	803018a <rx_ip+0x2b6>
    } else {
      rx_udp(ifp, pkt);
 80300a0:	6839      	ldr	r1, [r7, #0]
 80300a2:	6878      	ldr	r0, [r7, #4]
 80300a4:	f7ff f85a 	bl	802f15c <rx_udp>
 80300a8:	e06f      	b.n	803018a <rx_ip+0x2b6>
    }
  } else if (pkt->ip->proto == 6) {
 80300aa:	683b      	ldr	r3, [r7, #0]
 80300ac:	69db      	ldr	r3, [r3, #28]
 80300ae:	7a5b      	ldrb	r3, [r3, #9]
 80300b0:	2b06      	cmp	r3, #6
 80300b2:	d16a      	bne.n	803018a <rx_ip+0x2b6>
    pkt->tcp = (struct tcp *) (pkt->ip + 1);
 80300b4:	683b      	ldr	r3, [r7, #0]
 80300b6:	69db      	ldr	r3, [r3, #28]
 80300b8:	f103 0214 	add.w	r2, r3, #20
 80300bc:	683b      	ldr	r3, [r7, #0]
 80300be:	629a      	str	r2, [r3, #40]	@ 0x28
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 80300c0:	683b      	ldr	r3, [r7, #0]
 80300c2:	68db      	ldr	r3, [r3, #12]
 80300c4:	2b13      	cmp	r3, #19
 80300c6:	d95f      	bls.n	8030188 <rx_ip+0x2b4>
    mkpay(pkt, pkt->tcp + 1);
 80300c8:	683b      	ldr	r3, [r7, #0]
 80300ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80300cc:	3314      	adds	r3, #20
 80300ce:	4619      	mov	r1, r3
 80300d0:	6838      	ldr	r0, [r7, #0]
 80300d2:	f7fd fe7f 	bl	802ddd4 <mkpay>
    uint16_t iplen = mg_ntohs(pkt->ip->len);
 80300d6:	683b      	ldr	r3, [r7, #0]
 80300d8:	69db      	ldr	r3, [r3, #28]
 80300da:	885b      	ldrh	r3, [r3, #2]
 80300dc:	b29b      	uxth	r3, r3
 80300de:	4618      	mov	r0, r3
 80300e0:	f002 fd23 	bl	8032b2a <mg_ntohs>
 80300e4:	4603      	mov	r3, r0
 80300e6:	81fb      	strh	r3, [r7, #14]
    uint16_t off = (uint16_t) (sizeof(*pkt->ip) + ((pkt->tcp->off >> 4) * 4U));
 80300e8:	683b      	ldr	r3, [r7, #0]
 80300ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80300ec:	7b1b      	ldrb	r3, [r3, #12]
 80300ee:	091b      	lsrs	r3, r3, #4
 80300f0:	b2db      	uxtb	r3, r3
 80300f2:	3305      	adds	r3, #5
 80300f4:	b29b      	uxth	r3, r3
 80300f6:	009b      	lsls	r3, r3, #2
 80300f8:	81bb      	strh	r3, [r7, #12]
    if (iplen >= off) pkt->pay.len = (size_t) (iplen - off);
 80300fa:	89fa      	ldrh	r2, [r7, #14]
 80300fc:	89bb      	ldrh	r3, [r7, #12]
 80300fe:	429a      	cmp	r2, r3
 8030100:	d305      	bcc.n	803010e <rx_ip+0x23a>
 8030102:	89fa      	ldrh	r2, [r7, #14]
 8030104:	89bb      	ldrh	r3, [r7, #12]
 8030106:	1ad3      	subs	r3, r2, r3
 8030108:	461a      	mov	r2, r3
 803010a:	683b      	ldr	r3, [r7, #0]
 803010c:	60da      	str	r2, [r3, #12]
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 803010e:	4b21      	ldr	r3, [pc, #132]	@ (8030194 <rx_ip+0x2c0>)
 8030110:	681b      	ldr	r3, [r3, #0]
 8030112:	2b03      	cmp	r3, #3
 8030114:	dd2d      	ble.n	8030172 <rx_ip+0x29e>
 8030116:	4b20      	ldr	r3, [pc, #128]	@ (8030198 <rx_ip+0x2c4>)
 8030118:	f241 626a 	movw	r2, #5738	@ 0x166a
 803011c:	491f      	ldr	r1, [pc, #124]	@ (803019c <rx_ip+0x2c8>)
 803011e:	2004      	movs	r0, #4
 8030120:	f7fb f85c 	bl	802b1dc <mg_log_prefix>
 8030124:	683b      	ldr	r3, [r7, #0]
 8030126:	69db      	ldr	r3, [r3, #28]
 8030128:	f103 050c 	add.w	r5, r3, #12
 803012c:	683b      	ldr	r3, [r7, #0]
 803012e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8030130:	881b      	ldrh	r3, [r3, #0]
 8030132:	b29b      	uxth	r3, r3
 8030134:	4618      	mov	r0, r3
 8030136:	f002 fcf8 	bl	8032b2a <mg_ntohs>
 803013a:	4603      	mov	r3, r0
 803013c:	461e      	mov	r6, r3
 803013e:	683b      	ldr	r3, [r7, #0]
 8030140:	69db      	ldr	r3, [r3, #28]
 8030142:	f103 0410 	add.w	r4, r3, #16
 8030146:	683b      	ldr	r3, [r7, #0]
 8030148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 803014a:	885b      	ldrh	r3, [r3, #2]
 803014c:	b29b      	uxth	r3, r3
 803014e:	4618      	mov	r0, r3
 8030150:	f002 fceb 	bl	8032b2a <mg_ntohs>
 8030154:	4603      	mov	r3, r0
 8030156:	461a      	mov	r2, r3
 8030158:	683b      	ldr	r3, [r7, #0]
 803015a:	68db      	ldr	r3, [r3, #12]
 803015c:	9303      	str	r3, [sp, #12]
 803015e:	9202      	str	r2, [sp, #8]
 8030160:	9401      	str	r4, [sp, #4]
 8030162:	4b0f      	ldr	r3, [pc, #60]	@ (80301a0 <rx_ip+0x2cc>)
 8030164:	9300      	str	r3, [sp, #0]
 8030166:	4633      	mov	r3, r6
 8030168:	462a      	mov	r2, r5
 803016a:	490d      	ldr	r1, [pc, #52]	@ (80301a0 <rx_ip+0x2cc>)
 803016c:	480e      	ldr	r0, [pc, #56]	@ (80301a8 <rx_ip+0x2d4>)
 803016e:	f7fb f885 	bl	802b27c <mg_log>
                mg_ntohs(pkt->tcp->sport), mg_print_ip4, &pkt->ip->dst,
                mg_ntohs(pkt->tcp->dport), (int) pkt->pay.len));
    rx_tcp(ifp, pkt);
 8030172:	6839      	ldr	r1, [r7, #0]
 8030174:	6878      	ldr	r0, [r7, #4]
 8030176:	f7ff fd7d 	bl	802fc74 <rx_tcp>
 803017a:	e006      	b.n	803018a <rx_ip+0x2b6>
  if (pkt->ip->frag & IP_MORE_FRAGS_MSK || pkt->ip->frag & IP_FRAG_OFFSET_MSK) {
 803017c:	bf00      	nop
 803017e:	e004      	b.n	803018a <rx_ip+0x2b6>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8030180:	bf00      	nop
 8030182:	e002      	b.n	803018a <rx_ip+0x2b6>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8030184:	bf00      	nop
 8030186:	e000      	b.n	803018a <rx_ip+0x2b6>
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 8030188:	bf00      	nop
  }
}
 803018a:	3714      	adds	r7, #20
 803018c:	46bd      	mov	sp, r7
 803018e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8030190:	08042f48 	.word	0x08042f48
 8030194:	20000298 	.word	0x20000298
 8030198:	080446a4 	.word	0x080446a4
 803019c:	08041564 	.word	0x08041564
 80301a0:	080313cd 	.word	0x080313cd
 80301a4:	08042f64 	.word	0x08042f64
 80301a8:	08042f80 	.word	0x08042f80

080301ac <rx_ip6>:

static void rx_ip6(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 80301ac:	b580      	push	{r7, lr}
 80301ae:	b082      	sub	sp, #8
 80301b0:	af00      	add	r7, sp, #0
 80301b2:	6078      	str	r0, [r7, #4]
 80301b4:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("IP %d", (int) len));
  if (pkt->ip6->proto == 1 || pkt->ip6->proto == 58) {
 80301b6:	683b      	ldr	r3, [r7, #0]
 80301b8:	6a1b      	ldr	r3, [r3, #32]
 80301ba:	799b      	ldrb	r3, [r3, #6]
 80301bc:	2b01      	cmp	r3, #1
 80301be:	d004      	beq.n	80301ca <rx_ip6+0x1e>
 80301c0:	683b      	ldr	r3, [r7, #0]
 80301c2:	6a1b      	ldr	r3, [r3, #32]
 80301c4:	799b      	ldrb	r3, [r3, #6]
 80301c6:	2b3a      	cmp	r3, #58	@ 0x3a
 80301c8:	d115      	bne.n	80301f6 <rx_ip6+0x4a>
    pkt->icmp = (struct icmp *) (pkt->ip6 + 1);
 80301ca:	683b      	ldr	r3, [r7, #0]
 80301cc:	6a1b      	ldr	r3, [r3, #32]
 80301ce:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80301d2:	683b      	ldr	r3, [r7, #0]
 80301d4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 80301d6:	683b      	ldr	r3, [r7, #0]
 80301d8:	68db      	ldr	r3, [r3, #12]
 80301da:	2b03      	cmp	r3, #3
 80301dc:	d922      	bls.n	8030224 <rx_ip6+0x78>
    mkpay(pkt, pkt->icmp + 1);
 80301de:	683b      	ldr	r3, [r7, #0]
 80301e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80301e2:	3304      	adds	r3, #4
 80301e4:	4619      	mov	r1, r3
 80301e6:	6838      	ldr	r0, [r7, #0]
 80301e8:	f7fd fdf4 	bl	802ddd4 <mkpay>
    rx_icmp(ifp, pkt);
 80301ec:	6839      	ldr	r1, [r7, #0]
 80301ee:	6878      	ldr	r0, [r7, #4]
 80301f0:	f7fe fb82 	bl	802e8f8 <rx_icmp>
 80301f4:	e019      	b.n	803022a <rx_ip6+0x7e>
  } else if (pkt->ip6->proto == 17) {
 80301f6:	683b      	ldr	r3, [r7, #0]
 80301f8:	6a1b      	ldr	r3, [r3, #32]
 80301fa:	799b      	ldrb	r3, [r3, #6]
 80301fc:	2b11      	cmp	r3, #17
 80301fe:	d114      	bne.n	803022a <rx_ip6+0x7e>
    pkt->udp = (struct udp *) (pkt->ip6 + 1);
 8030200:	683b      	ldr	r3, [r7, #0]
 8030202:	6a1b      	ldr	r3, [r3, #32]
 8030204:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8030208:	683b      	ldr	r3, [r7, #0]
 803020a:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 803020c:	683b      	ldr	r3, [r7, #0]
 803020e:	68db      	ldr	r3, [r3, #12]
 8030210:	2b07      	cmp	r3, #7
 8030212:	d909      	bls.n	8030228 <rx_ip6+0x7c>
    // MG_DEBUG(("  UDP %u %u -> %u", len, mg_htons(udp->sport),
    // mg_htons(udp->dport)));
    mkpay(pkt, pkt->udp + 1);
 8030214:	683b      	ldr	r3, [r7, #0]
 8030216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8030218:	3308      	adds	r3, #8
 803021a:	4619      	mov	r1, r3
 803021c:	6838      	ldr	r0, [r7, #0]
 803021e:	f7fd fdd9 	bl	802ddd4 <mkpay>
 8030222:	e002      	b.n	803022a <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8030224:	bf00      	nop
 8030226:	e000      	b.n	803022a <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8030228:	bf00      	nop
  }
}
 803022a:	3708      	adds	r7, #8
 803022c:	46bd      	mov	sp, r7
 803022e:	bd80      	pop	{r7, pc}

08030230 <mg_tcpip_rx>:

static void mg_tcpip_rx(struct mg_tcpip_if *ifp, void *buf, size_t len) {
 8030230:	b590      	push	{r4, r7, lr}
 8030232:	b093      	sub	sp, #76	@ 0x4c
 8030234:	af00      	add	r7, sp, #0
 8030236:	60f8      	str	r0, [r7, #12]
 8030238:	60b9      	str	r1, [r7, #8]
 803023a:	607a      	str	r2, [r7, #4]
  struct pkt pkt;
  memset(&pkt, 0, sizeof(pkt));
 803023c:	f107 0314 	add.w	r3, r7, #20
 8030240:	2234      	movs	r2, #52	@ 0x34
 8030242:	2100      	movs	r1, #0
 8030244:	4618      	mov	r0, r3
 8030246:	f005 fdd3 	bl	8035df0 <memset>
  pkt.raw.buf = (char *) buf;
 803024a:	68bb      	ldr	r3, [r7, #8]
 803024c:	617b      	str	r3, [r7, #20]
  pkt.raw.len = len;
 803024e:	687b      	ldr	r3, [r7, #4]
 8030250:	61bb      	str	r3, [r7, #24]
  pkt.eth = (struct eth *) buf;
 8030252:	68bb      	ldr	r3, [r7, #8]
 8030254:	627b      	str	r3, [r7, #36]	@ 0x24
  // mg_hexdump(buf, len > 16 ? 16: len);
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 8030256:	69bb      	ldr	r3, [r7, #24]
 8030258:	2b0d      	cmp	r3, #13
 803025a:	f240 80d8 	bls.w	803040e <mg_tcpip_rx+0x1de>
  if (ifp->enable_mac_check &&
 803025e:	68fb      	ldr	r3, [r7, #12]
 8030260:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8030264:	2b00      	cmp	r3, #0
 8030266:	d013      	beq.n	8030290 <mg_tcpip_rx+0x60>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 8030268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803026a:	4618      	mov	r0, r3
 803026c:	68fb      	ldr	r3, [r7, #12]
 803026e:	2206      	movs	r2, #6
 8030270:	4619      	mov	r1, r3
 8030272:	f005 fd29 	bl	8035cc8 <memcmp>
 8030276:	4603      	mov	r3, r0
  if (ifp->enable_mac_check &&
 8030278:	2b00      	cmp	r3, #0
 803027a:	d009      	beq.n	8030290 <mg_tcpip_rx+0x60>
      memcmp(pkt.eth->dst, broadcast, sizeof(pkt.eth->dst)) != 0)
 803027c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803027e:	2206      	movs	r2, #6
 8030280:	496d      	ldr	r1, [pc, #436]	@ (8030438 <mg_tcpip_rx+0x208>)
 8030282:	4618      	mov	r0, r3
 8030284:	f005 fd20 	bl	8035cc8 <memcmp>
 8030288:	4603      	mov	r3, r0
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 803028a:	2b00      	cmp	r3, #0
 803028c:	f040 80c1 	bne.w	8030412 <mg_tcpip_rx+0x1e2>
    return;
  if (ifp->enable_crc32_check && len > 4) {
 8030290:	68fb      	ldr	r3, [r7, #12]
 8030292:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8030296:	2b00      	cmp	r3, #0
 8030298:	d01a      	beq.n	80302d0 <mg_tcpip_rx+0xa0>
 803029a:	687b      	ldr	r3, [r7, #4]
 803029c:	2b04      	cmp	r3, #4
 803029e:	d917      	bls.n	80302d0 <mg_tcpip_rx+0xa0>
    len -= 4;  // TODO(scaprile): check on bigendian
 80302a0:	687b      	ldr	r3, [r7, #4]
 80302a2:	3b04      	subs	r3, #4
 80302a4:	607b      	str	r3, [r7, #4]
    uint32_t crc = mg_crc32(0, (const char *) buf, len);
 80302a6:	687a      	ldr	r2, [r7, #4]
 80302a8:	68b9      	ldr	r1, [r7, #8]
 80302aa:	2000      	movs	r0, #0
 80302ac:	f002 fc54 	bl	8032b58 <mg_crc32>
 80302b0:	4603      	mov	r3, r0
 80302b2:	613b      	str	r3, [r7, #16]
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 80302b4:	68ba      	ldr	r2, [r7, #8]
 80302b6:	687b      	ldr	r3, [r7, #4]
 80302b8:	4413      	add	r3, r2
 80302ba:	4618      	mov	r0, r3
 80302bc:	f107 0310 	add.w	r3, r7, #16
 80302c0:	2204      	movs	r2, #4
 80302c2:	4619      	mov	r1, r3
 80302c4:	f005 fd00 	bl	8035cc8 <memcmp>
 80302c8:	4603      	mov	r3, r0
 80302ca:	2b00      	cmp	r3, #0
 80302cc:	f040 80a3 	bne.w	8030416 <mg_tcpip_rx+0x1e6>
  }
  if (pkt.eth->type == mg_htons(0x806)) {
 80302d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80302d2:	899b      	ldrh	r3, [r3, #12]
 80302d4:	b29c      	uxth	r4, r3
 80302d6:	f640 0006 	movw	r0, #2054	@ 0x806
 80302da:	f002 fc26 	bl	8032b2a <mg_ntohs>
 80302de:	4603      	mov	r3, r0
 80302e0:	429c      	cmp	r4, r3
 80302e2:	d10d      	bne.n	8030300 <mg_tcpip_rx+0xd0>
    pkt.arp = (struct arp *) (pkt.eth + 1);
 80302e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80302e6:	330e      	adds	r3, #14
 80302e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 80302ea:	69bb      	ldr	r3, [r7, #24]
 80302ec:	2b29      	cmp	r3, #41	@ 0x29
 80302ee:	f240 8094 	bls.w	803041a <mg_tcpip_rx+0x1ea>
    rx_arp(ifp, &pkt);
 80302f2:	f107 0314 	add.w	r3, r7, #20
 80302f6:	4619      	mov	r1, r3
 80302f8:	68f8      	ldr	r0, [r7, #12]
 80302fa:	f7fe f9f3 	bl	802e6e4 <rx_arp>
 80302fe:	e097      	b.n	8030430 <mg_tcpip_rx+0x200>
  } else if (pkt.eth->type == mg_htons(0x86dd)) {
 8030300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8030302:	899b      	ldrh	r3, [r3, #12]
 8030304:	b29c      	uxth	r4, r3
 8030306:	f248 60dd 	movw	r0, #34525	@ 0x86dd
 803030a:	f002 fc0e 	bl	8032b2a <mg_ntohs>
 803030e:	4603      	mov	r3, r0
 8030310:	429c      	cmp	r4, r3
 8030312:	d11b      	bne.n	803034c <mg_tcpip_rx+0x11c>
    pkt.ip6 = (struct ip6 *) (pkt.eth + 1);
 8030314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8030316:	330e      	adds	r3, #14
 8030318:	637b      	str	r3, [r7, #52]	@ 0x34
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 803031a:	69bb      	ldr	r3, [r7, #24]
 803031c:	2b35      	cmp	r3, #53	@ 0x35
 803031e:	d97e      	bls.n	803041e <mg_tcpip_rx+0x1ee>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 8030320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8030322:	781b      	ldrb	r3, [r3, #0]
 8030324:	091b      	lsrs	r3, r3, #4
 8030326:	b2db      	uxtb	r3, r3
 8030328:	2b06      	cmp	r3, #6
 803032a:	d17a      	bne.n	8030422 <mg_tcpip_rx+0x1f2>
    mkpay(&pkt, pkt.ip6 + 1);
 803032c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803032e:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8030332:	f107 0314 	add.w	r3, r7, #20
 8030336:	4611      	mov	r1, r2
 8030338:	4618      	mov	r0, r3
 803033a:	f7fd fd4b 	bl	802ddd4 <mkpay>
    rx_ip6(ifp, &pkt);
 803033e:	f107 0314 	add.w	r3, r7, #20
 8030342:	4619      	mov	r1, r3
 8030344:	68f8      	ldr	r0, [r7, #12]
 8030346:	f7ff ff31 	bl	80301ac <rx_ip6>
 803034a:	e071      	b.n	8030430 <mg_tcpip_rx+0x200>
  } else if (pkt.eth->type == mg_htons(0x800)) {
 803034c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803034e:	899b      	ldrh	r3, [r3, #12]
 8030350:	b29c      	uxth	r4, r3
 8030352:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8030356:	f002 fbe8 	bl	8032b2a <mg_ntohs>
 803035a:	4603      	mov	r3, r0
 803035c:	429c      	cmp	r4, r3
 803035e:	d133      	bne.n	80303c8 <mg_tcpip_rx+0x198>
    pkt.ip = (struct ip *) (pkt.eth + 1);
 8030360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8030362:	330e      	adds	r3, #14
 8030364:	633b      	str	r3, [r7, #48]	@ 0x30
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8030366:	69bb      	ldr	r3, [r7, #24]
 8030368:	2b21      	cmp	r3, #33	@ 0x21
 803036a:	d95c      	bls.n	8030426 <mg_tcpip_rx+0x1f6>
    // Truncate frame to what IP header tells us
    if ((size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth) < pkt.raw.len) {
 803036c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 803036e:	885b      	ldrh	r3, [r3, #2]
 8030370:	b29b      	uxth	r3, r3
 8030372:	4618      	mov	r0, r3
 8030374:	f002 fbd9 	bl	8032b2a <mg_ntohs>
 8030378:	4603      	mov	r3, r0
 803037a:	f103 020e 	add.w	r2, r3, #14
 803037e:	69bb      	ldr	r3, [r7, #24]
 8030380:	429a      	cmp	r2, r3
 8030382:	d208      	bcs.n	8030396 <mg_tcpip_rx+0x166>
      pkt.raw.len = (size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth);
 8030384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8030386:	885b      	ldrh	r3, [r3, #2]
 8030388:	b29b      	uxth	r3, r3
 803038a:	4618      	mov	r0, r3
 803038c:	f002 fbcd 	bl	8032b2a <mg_ntohs>
 8030390:	4603      	mov	r3, r0
 8030392:	330e      	adds	r3, #14
 8030394:	61bb      	str	r3, [r7, #24]
    }
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8030396:	69bb      	ldr	r3, [r7, #24]
 8030398:	2b21      	cmp	r3, #33	@ 0x21
 803039a:	d946      	bls.n	803042a <mg_tcpip_rx+0x1fa>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 803039c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 803039e:	781b      	ldrb	r3, [r3, #0]
 80303a0:	091b      	lsrs	r3, r3, #4
 80303a2:	b2db      	uxtb	r3, r3
 80303a4:	2b04      	cmp	r3, #4
 80303a6:	d142      	bne.n	803042e <mg_tcpip_rx+0x1fe>
    mkpay(&pkt, pkt.ip + 1);
 80303a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80303aa:	f103 0214 	add.w	r2, r3, #20
 80303ae:	f107 0314 	add.w	r3, r7, #20
 80303b2:	4611      	mov	r1, r2
 80303b4:	4618      	mov	r0, r3
 80303b6:	f7fd fd0d 	bl	802ddd4 <mkpay>
    rx_ip(ifp, &pkt);
 80303ba:	f107 0314 	add.w	r3, r7, #20
 80303be:	4619      	mov	r1, r3
 80303c0:	68f8      	ldr	r0, [r7, #12]
 80303c2:	f7ff fd87 	bl	802fed4 <rx_ip>
 80303c6:	e033      	b.n	8030430 <mg_tcpip_rx+0x200>
  } else {
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 80303c8:	4b1c      	ldr	r3, [pc, #112]	@ (803043c <mg_tcpip_rx+0x20c>)
 80303ca:	681b      	ldr	r3, [r3, #0]
 80303cc:	2b02      	cmp	r3, #2
 80303ce:	dd11      	ble.n	80303f4 <mg_tcpip_rx+0x1c4>
 80303d0:	4b1b      	ldr	r3, [pc, #108]	@ (8030440 <mg_tcpip_rx+0x210>)
 80303d2:	f241 62a8 	movw	r2, #5800	@ 0x16a8
 80303d6:	491b      	ldr	r1, [pc, #108]	@ (8030444 <mg_tcpip_rx+0x214>)
 80303d8:	2003      	movs	r0, #3
 80303da:	f7fa feff 	bl	802b1dc <mg_log_prefix>
 80303de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80303e0:	899b      	ldrh	r3, [r3, #12]
 80303e2:	b29b      	uxth	r3, r3
 80303e4:	4618      	mov	r0, r3
 80303e6:	f002 fba0 	bl	8032b2a <mg_ntohs>
 80303ea:	4603      	mov	r3, r0
 80303ec:	4619      	mov	r1, r3
 80303ee:	4816      	ldr	r0, [pc, #88]	@ (8030448 <mg_tcpip_rx+0x218>)
 80303f0:	f7fa ff44 	bl	802b27c <mg_log>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 80303f4:	4b11      	ldr	r3, [pc, #68]	@ (803043c <mg_tcpip_rx+0x20c>)
 80303f6:	681b      	ldr	r3, [r3, #0]
 80303f8:	2b03      	cmp	r3, #3
 80303fa:	dd19      	ble.n	8030430 <mg_tcpip_rx+0x200>
 80303fc:	687b      	ldr	r3, [r7, #4]
 80303fe:	2b20      	cmp	r3, #32
 8030400:	bf28      	it	cs
 8030402:	2320      	movcs	r3, #32
 8030404:	4619      	mov	r1, r3
 8030406:	68b8      	ldr	r0, [r7, #8]
 8030408:	f7fa ff6e 	bl	802b2e8 <mg_hexdump>
 803040c:	e010      	b.n	8030430 <mg_tcpip_rx+0x200>
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 803040e:	bf00      	nop
 8030410:	e00e      	b.n	8030430 <mg_tcpip_rx+0x200>
    return;
 8030412:	bf00      	nop
 8030414:	e00c      	b.n	8030430 <mg_tcpip_rx+0x200>
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 8030416:	bf00      	nop
 8030418:	e00a      	b.n	8030430 <mg_tcpip_rx+0x200>
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 803041a:	bf00      	nop
 803041c:	e008      	b.n	8030430 <mg_tcpip_rx+0x200>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 803041e:	bf00      	nop
 8030420:	e006      	b.n	8030430 <mg_tcpip_rx+0x200>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 8030422:	bf00      	nop
 8030424:	e004      	b.n	8030430 <mg_tcpip_rx+0x200>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8030426:	bf00      	nop
 8030428:	e002      	b.n	8030430 <mg_tcpip_rx+0x200>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 803042a:	bf00      	nop
 803042c:	e000      	b.n	8030430 <mg_tcpip_rx+0x200>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 803042e:	bf00      	nop
  }
}
 8030430:	374c      	adds	r7, #76	@ 0x4c
 8030432:	46bd      	mov	sp, r7
 8030434:	bd90      	pop	{r4, r7, pc}
 8030436:	bf00      	nop
 8030438:	08044548 	.word	0x08044548
 803043c:	20000298 	.word	0x20000298
 8030440:	080446ac 	.word	0x080446ac
 8030444:	08041564 	.word	0x08041564
 8030448:	08042f9c 	.word	0x08042f9c

0803044c <mg_tcpip_poll>:

static void mg_tcpip_poll(struct mg_tcpip_if *ifp, uint64_t now) {
 803044c:	b5f0      	push	{r4, r5, r6, r7, lr}
 803044e:	b095      	sub	sp, #84	@ 0x54
 8030450:	af06      	add	r7, sp, #24
 8030452:	6178      	str	r0, [r7, #20]
 8030454:	e9c7 2302 	strd	r2, r3, [r7, #8]
  struct mg_connection *c;
  bool expired_1000ms = mg_timer_expired(&ifp->timer_1000ms, 1000, now);
 8030458:	697b      	ldr	r3, [r7, #20]
 803045a:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 803045e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8030462:	e9cd 2300 	strd	r2, r3, [sp]
 8030466:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 803046a:	f04f 0300 	mov.w	r3, #0
 803046e:	4608      	mov	r0, r1
 8030470:	f002 f83b 	bl	80324ea <mg_timer_expired>
 8030474:	4603      	mov	r3, r0
 8030476:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  ifp->now = now;
 803047a:	6979      	ldr	r1, [r7, #20]
 803047c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8030480:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
             names[ifp->state], mg_print_ip4, &ifp->ip, ifp->nrecv, ifp->nsent,
             ifp->ndrop, ifp->nerr));
  }
#endif
  // Handle physical interface up/down status
  if (expired_1000ms && ifp->driver->up) {
 8030484:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8030488:	2b00      	cmp	r3, #0
 803048a:	d052      	beq.n	8030532 <mg_tcpip_poll+0xe6>
 803048c:	697b      	ldr	r3, [r7, #20]
 803048e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8030490:	68db      	ldr	r3, [r3, #12]
 8030492:	2b00      	cmp	r3, #0
 8030494:	d04d      	beq.n	8030532 <mg_tcpip_poll+0xe6>
    bool up = ifp->driver->up(ifp);
 8030496:	697b      	ldr	r3, [r7, #20]
 8030498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 803049a:	68db      	ldr	r3, [r3, #12]
 803049c:	6978      	ldr	r0, [r7, #20]
 803049e:	4798      	blx	r3
 80304a0:	4603      	mov	r3, r0
 80304a2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    bool current = ifp->state != MG_TCPIP_STATE_DOWN;
 80304a6:	697b      	ldr	r3, [r7, #20]
 80304a8:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80304ac:	2b00      	cmp	r3, #0
 80304ae:	bf14      	ite	ne
 80304b0:	2301      	movne	r3, #1
 80304b2:	2300      	moveq	r3, #0
 80304b4:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    if (up != current) {
 80304b8:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80304bc:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80304c0:	429a      	cmp	r2, r3
 80304c2:	d023      	beq.n	803050c <mg_tcpip_poll+0xc0>
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 80304c4:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80304c8:	f083 0301 	eor.w	r3, r3, #1
 80304cc:	b2db      	uxtb	r3, r3
 80304ce:	2b00      	cmp	r3, #0
 80304d0:	d001      	beq.n	80304d6 <mg_tcpip_poll+0x8a>
 80304d2:	2300      	movs	r3, #0
 80304d4:	e006      	b.n	80304e4 <mg_tcpip_poll+0x98>
                   : ifp->enable_dhcp_client ? MG_TCPIP_STATE_UP
 80304d6:	697b      	ldr	r3, [r7, #20]
 80304d8:	7f1b      	ldrb	r3, [r3, #28]
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 80304da:	2b00      	cmp	r3, #0
 80304dc:	d001      	beq.n	80304e2 <mg_tcpip_poll+0x96>
 80304de:	2301      	movs	r3, #1
 80304e0:	e000      	b.n	80304e4 <mg_tcpip_poll+0x98>
 80304e2:	2303      	movs	r3, #3
 80304e4:	697a      	ldr	r2, [r7, #20]
 80304e6:	f882 307c 	strb.w	r3, [r2, #124]	@ 0x7c
                                             : MG_TCPIP_STATE_READY;
      if (!up && ifp->enable_dhcp_client) ifp->ip = 0;
 80304ea:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80304ee:	f083 0301 	eor.w	r3, r3, #1
 80304f2:	b2db      	uxtb	r3, r3
 80304f4:	2b00      	cmp	r3, #0
 80304f6:	d006      	beq.n	8030506 <mg_tcpip_poll+0xba>
 80304f8:	697b      	ldr	r3, [r7, #20]
 80304fa:	7f1b      	ldrb	r3, [r3, #28]
 80304fc:	2b00      	cmp	r3, #0
 80304fe:	d002      	beq.n	8030506 <mg_tcpip_poll+0xba>
 8030500:	697b      	ldr	r3, [r7, #20]
 8030502:	2200      	movs	r2, #0
 8030504:	609a      	str	r2, [r3, #8]
      onstatechange(ifp);
 8030506:	6978      	ldr	r0, [r7, #20]
 8030508:	f7fd fdb2 	bl	802e070 <onstatechange>
    }
    if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 803050c:	697b      	ldr	r3, [r7, #20]
 803050e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8030512:	2b00      	cmp	r3, #0
 8030514:	d10d      	bne.n	8030532 <mg_tcpip_poll+0xe6>
 8030516:	4ba4      	ldr	r3, [pc, #656]	@ (80307a8 <mg_tcpip_poll+0x35c>)
 8030518:	681b      	ldr	r3, [r3, #0]
 803051a:	2b00      	cmp	r3, #0
 803051c:	dd09      	ble.n	8030532 <mg_tcpip_poll+0xe6>
 803051e:	4ba3      	ldr	r3, [pc, #652]	@ (80307ac <mg_tcpip_poll+0x360>)
 8030520:	f241 62c5 	movw	r2, #5829	@ 0x16c5
 8030524:	49a2      	ldr	r1, [pc, #648]	@ (80307b0 <mg_tcpip_poll+0x364>)
 8030526:	2001      	movs	r0, #1
 8030528:	f7fa fe58 	bl	802b1dc <mg_log_prefix>
 803052c:	48a1      	ldr	r0, [pc, #644]	@ (80307b4 <mg_tcpip_poll+0x368>)
 803052e:	f7fa fea5 	bl	802b27c <mg_log>
  }
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 8030532:	697b      	ldr	r3, [r7, #20]
 8030534:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8030538:	2b00      	cmp	r3, #0
 803053a:	f000 818d 	beq.w	8030858 <mg_tcpip_poll+0x40c>

  // DHCP RFC-2131 (4.4)
  if (ifp->state == MG_TCPIP_STATE_UP && expired_1000ms) {
 803053e:	697b      	ldr	r3, [r7, #20]
 8030540:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8030544:	2b01      	cmp	r3, #1
 8030546:	d107      	bne.n	8030558 <mg_tcpip_poll+0x10c>
 8030548:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 803054c:	2b00      	cmp	r3, #0
 803054e:	d003      	beq.n	8030558 <mg_tcpip_poll+0x10c>
    tx_dhcp_discover(ifp);  // INIT (4.4.1)
 8030550:	6978      	ldr	r0, [r7, #20]
 8030552:	f7fe f819 	bl	802e588 <tx_dhcp_discover>
 8030556:	e04c      	b.n	80305f2 <mg_tcpip_poll+0x1a6>
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 8030558:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 803055c:	2b00      	cmp	r3, #0
 803055e:	d048      	beq.n	80305f2 <mg_tcpip_poll+0x1a6>
 8030560:	697b      	ldr	r3, [r7, #20]
 8030562:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8030566:	2b03      	cmp	r3, #3
 8030568:	d143      	bne.n	80305f2 <mg_tcpip_poll+0x1a6>
             ifp->lease_expire > 0) {  // BOUND / RENEWING / REBINDING
 803056a:	697b      	ldr	r3, [r7, #20]
 803056c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 8030570:	4313      	orrs	r3, r2
 8030572:	d03e      	beq.n	80305f2 <mg_tcpip_poll+0x1a6>
    if (ifp->now >= ifp->lease_expire) {
 8030574:	697b      	ldr	r3, [r7, #20]
 8030576:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 803057a:	697b      	ldr	r3, [r7, #20]
 803057c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8030580:	4290      	cmp	r0, r2
 8030582:	eb71 0303 	sbcs.w	r3, r1, r3
 8030586:	d30a      	bcc.n	803059e <mg_tcpip_poll+0x152>
      ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;  // expired, release IP
 8030588:	697b      	ldr	r3, [r7, #20]
 803058a:	2201      	movs	r2, #1
 803058c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 8030590:	697b      	ldr	r3, [r7, #20]
 8030592:	2200      	movs	r2, #0
 8030594:	609a      	str	r2, [r3, #8]
      onstatechange(ifp);
 8030596:	6978      	ldr	r0, [r7, #20]
 8030598:	f7fd fd6a 	bl	802e070 <onstatechange>
 803059c:	e029      	b.n	80305f2 <mg_tcpip_poll+0x1a6>
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 803059e:	697b      	ldr	r3, [r7, #20]
 80305a0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80305a4:	4984      	ldr	r1, [pc, #528]	@ (80307b8 <mg_tcpip_poll+0x36c>)
 80305a6:	1854      	adds	r4, r2, r1
 80305a8:	f143 0500 	adc.w	r5, r3, #0
 80305ac:	697b      	ldr	r3, [r7, #20]
 80305ae:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80305b2:	42a2      	cmp	r2, r4
 80305b4:	41ab      	sbcs	r3, r5
 80305b6:	d21c      	bcs.n	80305f2 <mg_tcpip_poll+0x1a6>
               ((ifp->now / 1000) % 60) == 0) {
 80305b8:	697b      	ldr	r3, [r7, #20]
 80305ba:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80305be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80305c2:	f04f 0300 	mov.w	r3, #0
 80305c6:	f7e0 fbc7 	bl	8010d58 <__aeabi_uldivmod>
 80305ca:	4602      	mov	r2, r0
 80305cc:	460b      	mov	r3, r1
 80305ce:	4610      	mov	r0, r2
 80305d0:	4619      	mov	r1, r3
 80305d2:	f04f 023c 	mov.w	r2, #60	@ 0x3c
 80305d6:	f04f 0300 	mov.w	r3, #0
 80305da:	f7e0 fbbd 	bl	8010d58 <__aeabi_uldivmod>
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 80305de:	4313      	orrs	r3, r2
 80305e0:	d107      	bne.n	80305f2 <mg_tcpip_poll+0x1a6>
      // hack: 30 min before deadline, try to rebind (4.3.6) every min
      tx_dhcp_request_re(ifp, (uint8_t *) broadcast, ifp->ip, 0xffffffff);
 80305e2:	697b      	ldr	r3, [r7, #20]
 80305e4:	689a      	ldr	r2, [r3, #8]
 80305e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80305ea:	4974      	ldr	r1, [pc, #464]	@ (80307bc <mg_tcpip_poll+0x370>)
 80305ec:	6978      	ldr	r0, [r7, #20]
 80305ee:	f7fd ff99 	bl	802e524 <tx_dhcp_request_re>
    }  // TODO(): Handle T1 (RENEWING) and T2 (REBINDING) (4.4.5)
  }

  // Read data from the network
  if (ifp->driver->rx != NULL) {  // Polling driver. We must call it
 80305f2:	697b      	ldr	r3, [r7, #20]
 80305f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80305f6:	689b      	ldr	r3, [r3, #8]
 80305f8:	2b00      	cmp	r3, #0
 80305fa:	d019      	beq.n	8030630 <mg_tcpip_poll+0x1e4>
    size_t len =
        ifp->driver->rx(ifp->recv_queue.buf, ifp->recv_queue.size, ifp);
 80305fc:	697b      	ldr	r3, [r7, #20]
 80305fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8030600:	689b      	ldr	r3, [r3, #8]
 8030602:	697a      	ldr	r2, [r7, #20]
 8030604:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8030606:	697a      	ldr	r2, [r7, #20]
 8030608:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 803060a:	697a      	ldr	r2, [r7, #20]
 803060c:	4798      	blx	r3
 803060e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (len > 0) {
 8030610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030612:	2b00      	cmp	r3, #0
 8030614:	d024      	beq.n	8030660 <mg_tcpip_poll+0x214>
      ifp->nrecv++;
 8030616:	697b      	ldr	r3, [r7, #20]
 8030618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 803061a:	1c5a      	adds	r2, r3, #1
 803061c:	697b      	ldr	r3, [r7, #20]
 803061e:	671a      	str	r2, [r3, #112]	@ 0x70
      mg_tcpip_rx(ifp, ifp->recv_queue.buf, len);
 8030620:	697b      	ldr	r3, [r7, #20]
 8030622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8030624:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8030626:	4619      	mov	r1, r3
 8030628:	6978      	ldr	r0, [r7, #20]
 803062a:	f7ff fe01 	bl	8030230 <mg_tcpip_rx>
 803062e:	e017      	b.n	8030660 <mg_tcpip_poll+0x214>
    }
  } else {  // Interrupt-based driver. Fills recv queue itself
    char *buf;
    size_t len = mg_queue_next(&ifp->recv_queue, &buf);
 8030630:	697b      	ldr	r3, [r7, #20]
 8030632:	3334      	adds	r3, #52	@ 0x34
 8030634:	f107 0220 	add.w	r2, r7, #32
 8030638:	4611      	mov	r1, r2
 803063a:	4618      	mov	r0, r3
 803063c:	f000 ffb8 	bl	80315b0 <mg_queue_next>
 8030640:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (len > 0) {
 8030642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8030644:	2b00      	cmp	r3, #0
 8030646:	d00b      	beq.n	8030660 <mg_tcpip_poll+0x214>
      mg_tcpip_rx(ifp, buf, len);
 8030648:	6a3b      	ldr	r3, [r7, #32]
 803064a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 803064c:	4619      	mov	r1, r3
 803064e:	6978      	ldr	r0, [r7, #20]
 8030650:	f7ff fdee 	bl	8030230 <mg_tcpip_rx>
      mg_queue_del(&ifp->recv_queue, len);
 8030654:	697b      	ldr	r3, [r7, #20]
 8030656:	3334      	adds	r3, #52	@ 0x34
 8030658:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 803065a:	4618      	mov	r0, r3
 803065c:	f000 ffd9 	bl	8031612 <mg_queue_del>
    }
  }

  // Process timeouts
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 8030660:	697b      	ldr	r3, [r7, #20]
 8030662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8030664:	681b      	ldr	r3, [r3, #0]
 8030666:	637b      	str	r3, [r7, #52]	@ 0x34
 8030668:	e0f1      	b.n	803084e <mg_tcpip_poll+0x402>
    if (c->is_udp || c->is_listening || c->is_resolving) continue;
 803066a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803066c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8030670:	f003 0301 	and.w	r3, r3, #1
 8030674:	b2db      	uxtb	r3, r3
 8030676:	2b00      	cmp	r3, #0
 8030678:	f040 80e5 	bne.w	8030846 <mg_tcpip_poll+0x3fa>
 803067c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803067e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8030682:	f003 0301 	and.w	r3, r3, #1
 8030686:	b2db      	uxtb	r3, r3
 8030688:	2b00      	cmp	r3, #0
 803068a:	f040 80dc 	bne.w	8030846 <mg_tcpip_poll+0x3fa>
 803068e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8030690:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8030694:	f003 0308 	and.w	r3, r3, #8
 8030698:	b2db      	uxtb	r3, r3
 803069a:	2b00      	cmp	r3, #0
 803069c:	f040 80d3 	bne.w	8030846 <mg_tcpip_poll+0x3fa>
    struct connstate *s = (struct connstate *) (c + 1);
 80306a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80306a2:	33b0      	adds	r3, #176	@ 0xb0
 80306a4:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 80306a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80306a8:	331c      	adds	r3, #28
 80306aa:	681b      	ldr	r3, [r3, #0]
 80306ac:	61fb      	str	r3, [r7, #28]
    if (now > s->timer) {
 80306ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80306b0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80306b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80306b8:	4290      	cmp	r0, r2
 80306ba:	eb71 0303 	sbcs.w	r3, r1, r3
 80306be:	f080 80c3 	bcs.w	8030848 <mg_tcpip_poll+0x3fc>
      if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 80306c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80306c4:	7f9b      	ldrb	r3, [r3, #30]
 80306c6:	2b01      	cmp	r3, #1
 80306c8:	d142      	bne.n	8030750 <mg_tcpip_poll+0x304>
 80306ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80306cc:	691a      	ldr	r2, [r3, #16]
 80306ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80306d0:	685b      	ldr	r3, [r3, #4]
 80306d2:	429a      	cmp	r2, r3
 80306d4:	d03c      	beq.n	8030750 <mg_tcpip_poll+0x304>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 80306d6:	4b34      	ldr	r3, [pc, #208]	@ (80307a8 <mg_tcpip_poll+0x35c>)
 80306d8:	681b      	ldr	r3, [r3, #0]
 80306da:	2b03      	cmp	r3, #3
 80306dc:	dd0f      	ble.n	80306fe <mg_tcpip_poll+0x2b2>
 80306de:	4b33      	ldr	r3, [pc, #204]	@ (80307ac <mg_tcpip_poll+0x360>)
 80306e0:	f241 62f1 	movw	r2, #5873	@ 0x16f1
 80306e4:	4932      	ldr	r1, [pc, #200]	@ (80307b0 <mg_tcpip_poll+0x364>)
 80306e6:	2004      	movs	r0, #4
 80306e8:	f7fa fd78 	bl	802b1dc <mg_log_prefix>
 80306ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80306ee:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80306f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80306f2:	681a      	ldr	r2, [r3, #0]
 80306f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80306f6:	685b      	ldr	r3, [r3, #4]
 80306f8:	4831      	ldr	r0, [pc, #196]	@ (80307c0 <mg_tcpip_poll+0x374>)
 80306fa:	f7fa fdbf 	bl	802b27c <mg_log>
        tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 80306fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8030700:	f103 0618 	add.w	r6, r3, #24
 8030704:	69fb      	ldr	r3, [r7, #28]
 8030706:	613b      	str	r3, [r7, #16]
 8030708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803070a:	8b1c      	ldrh	r4, [r3, #24]
 803070c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803070e:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 8030710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8030712:	681b      	ldr	r3, [r3, #0]
 8030714:	4618      	mov	r0, r3
 8030716:	f002 f9ef 	bl	8032af8 <mg_ntohl>
 803071a:	6078      	str	r0, [r7, #4]
 803071c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803071e:	685b      	ldr	r3, [r3, #4]
 8030720:	4618      	mov	r0, r3
 8030722:	f002 f9e9 	bl	8032af8 <mg_ntohl>
 8030726:	4603      	mov	r3, r0
 8030728:	2200      	movs	r2, #0
 803072a:	9205      	str	r2, [sp, #20]
 803072c:	2200      	movs	r2, #0
 803072e:	9204      	str	r2, [sp, #16]
 8030730:	9303      	str	r3, [sp, #12]
 8030732:	6879      	ldr	r1, [r7, #4]
 8030734:	9102      	str	r1, [sp, #8]
 8030736:	9501      	str	r5, [sp, #4]
 8030738:	9400      	str	r4, [sp, #0]
 803073a:	2310      	movs	r3, #16
 803073c:	693a      	ldr	r2, [r7, #16]
 803073e:	4631      	mov	r1, r6
 8030740:	6978      	ldr	r0, [r7, #20]
 8030742:	f7fe fd7d 	bl	802f240 <tx_tcp>
               mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
        s->acked = s->ack;
 8030746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8030748:	685a      	ldr	r2, [r3, #4]
 803074a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803074c:	611a      	str	r2, [r3, #16]
 803074e:	e075      	b.n	803083c <mg_tcpip_poll+0x3f0>
      } else if (s->ttype == MIP_TTYPE_ARP) {
 8030750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8030752:	7f9b      	ldrb	r3, [r3, #30]
 8030754:	2b02      	cmp	r3, #2
 8030756:	d104      	bne.n	8030762 <mg_tcpip_poll+0x316>
        mg_error(c, "ARP timeout");
 8030758:	491a      	ldr	r1, [pc, #104]	@ (80307c4 <mg_tcpip_poll+0x378>)
 803075a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 803075c:	f7f5 f978 	bl	8025a50 <mg_error>
 8030760:	e06c      	b.n	803083c <mg_tcpip_poll+0x3f0>
      } else if (s->ttype == MIP_TTYPE_SYN) {
 8030762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8030764:	7f9b      	ldrb	r3, [r3, #30]
 8030766:	2b03      	cmp	r3, #3
 8030768:	d104      	bne.n	8030774 <mg_tcpip_poll+0x328>
        mg_error(c, "Connection timeout");
 803076a:	4917      	ldr	r1, [pc, #92]	@ (80307c8 <mg_tcpip_poll+0x37c>)
 803076c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 803076e:	f7f5 f96f 	bl	8025a50 <mg_error>
 8030772:	e063      	b.n	803083c <mg_tcpip_poll+0x3f0>
      } else if (s->ttype == MIP_TTYPE_FIN) {
 8030774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8030776:	7f9b      	ldrb	r3, [r3, #30]
 8030778:	2b04      	cmp	r3, #4
 803077a:	d107      	bne.n	803078c <mg_tcpip_poll+0x340>
        c->is_closing = 1;
 803077c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 803077e:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8030782:	f043 0320 	orr.w	r3, r3, #32
 8030786:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        continue;
 803078a:	e05d      	b.n	8030848 <mg_tcpip_poll+0x3fc>
      } else {
        if (s->tmiss++ > 2) {
 803078c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803078e:	7fdb      	ldrb	r3, [r3, #31]
 8030790:	1c5a      	adds	r2, r3, #1
 8030792:	b2d1      	uxtb	r1, r2
 8030794:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8030796:	77d1      	strb	r1, [r2, #31]
 8030798:	2b02      	cmp	r3, #2
 803079a:	d919      	bls.n	80307d0 <mg_tcpip_poll+0x384>
          mg_error(c, "keepalive");
 803079c:	490b      	ldr	r1, [pc, #44]	@ (80307cc <mg_tcpip_poll+0x380>)
 803079e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80307a0:	f7f5 f956 	bl	8025a50 <mg_error>
 80307a4:	e04a      	b.n	803083c <mg_tcpip_poll+0x3f0>
 80307a6:	bf00      	nop
 80307a8:	20000298 	.word	0x20000298
 80307ac:	080446b8 	.word	0x080446b8
 80307b0:	08041564 	.word	0x08041564
 80307b4:	08042fb0 	.word	0x08042fb0
 80307b8:	001b7740 	.word	0x001b7740
 80307bc:	08044548 	.word	0x08044548
 80307c0:	08042fc0 	.word	0x08042fc0
 80307c4:	08042fd0 	.word	0x08042fd0
 80307c8:	08042fdc 	.word	0x08042fdc
 80307cc:	08042ff0 	.word	0x08042ff0
        } else {
          MG_VERBOSE(("%lu keepalive", c->id));
 80307d0:	4b23      	ldr	r3, [pc, #140]	@ (8030860 <mg_tcpip_poll+0x414>)
 80307d2:	681b      	ldr	r3, [r3, #0]
 80307d4:	2b03      	cmp	r3, #3
 80307d6:	dd0c      	ble.n	80307f2 <mg_tcpip_poll+0x3a6>
 80307d8:	4b22      	ldr	r3, [pc, #136]	@ (8030864 <mg_tcpip_poll+0x418>)
 80307da:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 80307de:	4922      	ldr	r1, [pc, #136]	@ (8030868 <mg_tcpip_poll+0x41c>)
 80307e0:	2004      	movs	r0, #4
 80307e2:	f7fa fcfb 	bl	802b1dc <mg_log_prefix>
 80307e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80307e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80307ea:	4619      	mov	r1, r3
 80307ec:	481f      	ldr	r0, [pc, #124]	@ (803086c <mg_tcpip_poll+0x420>)
 80307ee:	f7fa fd45 	bl	802b27c <mg_log>
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 80307f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80307f4:	f103 0618 	add.w	r6, r3, #24
 80307f8:	69fb      	ldr	r3, [r7, #28]
 80307fa:	613b      	str	r3, [r7, #16]
 80307fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80307fe:	8b1c      	ldrh	r4, [r3, #24]
 8030800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8030802:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
                 mg_htonl(s->seq - 1), mg_htonl(s->ack), NULL, 0);
 8030804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8030806:	681b      	ldr	r3, [r3, #0]
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8030808:	3b01      	subs	r3, #1
 803080a:	4618      	mov	r0, r3
 803080c:	f002 f974 	bl	8032af8 <mg_ntohl>
 8030810:	6078      	str	r0, [r7, #4]
 8030812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8030814:	685b      	ldr	r3, [r3, #4]
 8030816:	4618      	mov	r0, r3
 8030818:	f002 f96e 	bl	8032af8 <mg_ntohl>
 803081c:	4603      	mov	r3, r0
 803081e:	2200      	movs	r2, #0
 8030820:	9205      	str	r2, [sp, #20]
 8030822:	2200      	movs	r2, #0
 8030824:	9204      	str	r2, [sp, #16]
 8030826:	9303      	str	r3, [sp, #12]
 8030828:	6879      	ldr	r1, [r7, #4]
 803082a:	9102      	str	r1, [sp, #8]
 803082c:	9501      	str	r5, [sp, #4]
 803082e:	9400      	str	r4, [sp, #0]
 8030830:	2310      	movs	r3, #16
 8030832:	693a      	ldr	r2, [r7, #16]
 8030834:	4631      	mov	r1, r6
 8030836:	6978      	ldr	r0, [r7, #20]
 8030838:	f7fe fd02 	bl	802f240 <tx_tcp>
        }
      }

      settmout(c, MIP_TTYPE_KEEPALIVE);
 803083c:	2100      	movs	r1, #0
 803083e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8030840:	f7fd fb40 	bl	802dec4 <settmout>
 8030844:	e000      	b.n	8030848 <mg_tcpip_poll+0x3fc>
    if (c->is_udp || c->is_listening || c->is_resolving) continue;
 8030846:	bf00      	nop
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 8030848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803084a:	681b      	ldr	r3, [r3, #0]
 803084c:	637b      	str	r3, [r7, #52]	@ 0x34
 803084e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8030850:	2b00      	cmp	r3, #0
 8030852:	f47f af0a 	bne.w	803066a <mg_tcpip_poll+0x21e>
 8030856:	e000      	b.n	803085a <mg_tcpip_poll+0x40e>
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 8030858:	bf00      	nop
    }
  }
}
 803085a:	373c      	adds	r7, #60	@ 0x3c
 803085c:	46bd      	mov	sp, r7
 803085e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8030860:	20000298 	.word	0x20000298
 8030864:	080446b8 	.word	0x080446b8
 8030868:	08041564 	.word	0x08041564
 803086c:	08042ffc 	.word	0x08042ffc

08030870 <mg_tcpip_init>:
  } else {
    ifp->ndrop++;
  }
}

void mg_tcpip_init(struct mg_mgr *mgr, struct mg_tcpip_if *ifp) {
 8030870:	b580      	push	{r7, lr}
 8030872:	b084      	sub	sp, #16
 8030874:	af00      	add	r7, sp, #0
 8030876:	6078      	str	r0, [r7, #4]
 8030878:	6039      	str	r1, [r7, #0]
  // If MAC address is not set, make a random one
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 803087a:	683b      	ldr	r3, [r7, #0]
 803087c:	781b      	ldrb	r3, [r3, #0]
 803087e:	2b00      	cmp	r3, #0
 8030880:	d12d      	bne.n	80308de <mg_tcpip_init+0x6e>
 8030882:	683b      	ldr	r3, [r7, #0]
 8030884:	785b      	ldrb	r3, [r3, #1]
 8030886:	2b00      	cmp	r3, #0
 8030888:	d129      	bne.n	80308de <mg_tcpip_init+0x6e>
 803088a:	683b      	ldr	r3, [r7, #0]
 803088c:	789b      	ldrb	r3, [r3, #2]
 803088e:	2b00      	cmp	r3, #0
 8030890:	d125      	bne.n	80308de <mg_tcpip_init+0x6e>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 8030892:	683b      	ldr	r3, [r7, #0]
 8030894:	78db      	ldrb	r3, [r3, #3]
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 8030896:	2b00      	cmp	r3, #0
 8030898:	d121      	bne.n	80308de <mg_tcpip_init+0x6e>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 803089a:	683b      	ldr	r3, [r7, #0]
 803089c:	791b      	ldrb	r3, [r3, #4]
 803089e:	2b00      	cmp	r3, #0
 80308a0:	d11d      	bne.n	80308de <mg_tcpip_init+0x6e>
 80308a2:	683b      	ldr	r3, [r7, #0]
 80308a4:	795b      	ldrb	r3, [r3, #5]
 80308a6:	2b00      	cmp	r3, #0
 80308a8:	d119      	bne.n	80308de <mg_tcpip_init+0x6e>
    ifp->mac[0] = 0x02;  // Locally administered, unicast
 80308aa:	683b      	ldr	r3, [r7, #0]
 80308ac:	2202      	movs	r2, #2
 80308ae:	701a      	strb	r2, [r3, #0]
    mg_random(&ifp->mac[1], sizeof(ifp->mac) - 1);
 80308b0:	683b      	ldr	r3, [r7, #0]
 80308b2:	3301      	adds	r3, #1
 80308b4:	2105      	movs	r1, #5
 80308b6:	4618      	mov	r0, r3
 80308b8:	f002 f8b7 	bl	8032a2a <mg_random>
    MG_INFO(("MAC not set. Generated random: %M", mg_print_mac, ifp->mac));
 80308bc:	4b51      	ldr	r3, [pc, #324]	@ (8030a04 <mg_tcpip_init+0x194>)
 80308be:	681b      	ldr	r3, [r3, #0]
 80308c0:	2b01      	cmp	r3, #1
 80308c2:	dd0c      	ble.n	80308de <mg_tcpip_init+0x6e>
 80308c4:	4b50      	ldr	r3, [pc, #320]	@ (8030a08 <mg_tcpip_init+0x198>)
 80308c6:	f241 721f 	movw	r2, #5919	@ 0x171f
 80308ca:	4950      	ldr	r1, [pc, #320]	@ (8030a0c <mg_tcpip_init+0x19c>)
 80308cc:	2002      	movs	r0, #2
 80308ce:	f7fa fc85 	bl	802b1dc <mg_log_prefix>
 80308d2:	683b      	ldr	r3, [r7, #0]
 80308d4:	461a      	mov	r2, r3
 80308d6:	494e      	ldr	r1, [pc, #312]	@ (8030a10 <mg_tcpip_init+0x1a0>)
 80308d8:	484e      	ldr	r0, [pc, #312]	@ (8030a14 <mg_tcpip_init+0x1a4>)
 80308da:	f7fa fccf 	bl	802b27c <mg_log>
  }

  if (ifp->driver->init && !ifp->driver->init(ifp)) {
 80308de:	683b      	ldr	r3, [r7, #0]
 80308e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80308e2:	681b      	ldr	r3, [r3, #0]
 80308e4:	2b00      	cmp	r3, #0
 80308e6:	d019      	beq.n	803091c <mg_tcpip_init+0xac>
 80308e8:	683b      	ldr	r3, [r7, #0]
 80308ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80308ec:	681b      	ldr	r3, [r3, #0]
 80308ee:	6838      	ldr	r0, [r7, #0]
 80308f0:	4798      	blx	r3
 80308f2:	4603      	mov	r3, r0
 80308f4:	f083 0301 	eor.w	r3, r3, #1
 80308f8:	b2db      	uxtb	r3, r3
 80308fa:	2b00      	cmp	r3, #0
 80308fc:	d00e      	beq.n	803091c <mg_tcpip_init+0xac>
    MG_ERROR(("driver init failed"));
 80308fe:	4b41      	ldr	r3, [pc, #260]	@ (8030a04 <mg_tcpip_init+0x194>)
 8030900:	681b      	ldr	r3, [r3, #0]
 8030902:	2b00      	cmp	r3, #0
 8030904:	dd7a      	ble.n	80309fc <mg_tcpip_init+0x18c>
 8030906:	4b40      	ldr	r3, [pc, #256]	@ (8030a08 <mg_tcpip_init+0x198>)
 8030908:	f241 7223 	movw	r2, #5923	@ 0x1723
 803090c:	493f      	ldr	r1, [pc, #252]	@ (8030a0c <mg_tcpip_init+0x19c>)
 803090e:	2001      	movs	r0, #1
 8030910:	f7fa fc64 	bl	802b1dc <mg_log_prefix>
 8030914:	4840      	ldr	r0, [pc, #256]	@ (8030a18 <mg_tcpip_init+0x1a8>)
 8030916:	f7fa fcb1 	bl	802b27c <mg_log>
 803091a:	e06f      	b.n	80309fc <mg_tcpip_init+0x18c>
  } else {
    size_t framesize = 1540;
 803091c:	f240 6304 	movw	r3, #1540	@ 0x604
 8030920:	60fb      	str	r3, [r7, #12]
    ifp->tx.buf = (char *) calloc(1, framesize), ifp->tx.len = framesize;
 8030922:	68f9      	ldr	r1, [r7, #12]
 8030924:	2001      	movs	r0, #1
 8030926:	f7f4 fa93 	bl	8024e50 <mg_calloc>
 803092a:	4602      	mov	r2, r0
 803092c:	683b      	ldr	r3, [r7, #0]
 803092e:	615a      	str	r2, [r3, #20]
 8030930:	683b      	ldr	r3, [r7, #0]
 8030932:	68fa      	ldr	r2, [r7, #12]
 8030934:	619a      	str	r2, [r3, #24]
    if (ifp->recv_queue.size == 0)
 8030936:	683b      	ldr	r3, [r7, #0]
 8030938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 803093a:	2b00      	cmp	r3, #0
 803093c:	d10a      	bne.n	8030954 <mg_tcpip_init+0xe4>
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 803093e:	683b      	ldr	r3, [r7, #0]
 8030940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8030942:	689b      	ldr	r3, [r3, #8]
 8030944:	2b00      	cmp	r3, #0
 8030946:	d001      	beq.n	803094c <mg_tcpip_init+0xdc>
 8030948:	68fb      	ldr	r3, [r7, #12]
 803094a:	e001      	b.n	8030950 <mg_tcpip_init+0xe0>
 803094c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8030950:	683a      	ldr	r2, [r7, #0]
 8030952:	6393      	str	r3, [r2, #56]	@ 0x38
    ifp->recv_queue.buf = (char *) calloc(1, ifp->recv_queue.size);
 8030954:	683b      	ldr	r3, [r7, #0]
 8030956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8030958:	4619      	mov	r1, r3
 803095a:	2001      	movs	r0, #1
 803095c:	f7f4 fa78 	bl	8024e50 <mg_calloc>
 8030960:	4602      	mov	r2, r0
 8030962:	683b      	ldr	r3, [r7, #0]
 8030964:	635a      	str	r2, [r3, #52]	@ 0x34
    ifp->timer_1000ms = mg_millis();
 8030966:	f002 f971 	bl	8032c4c <mg_millis>
 803096a:	4602      	mov	r2, r0
 803096c:	460b      	mov	r3, r1
 803096e:	6839      	ldr	r1, [r7, #0]
 8030970:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    mgr->priv = ifp;
 8030974:	687b      	ldr	r3, [r7, #4]
 8030976:	683a      	ldr	r2, [r7, #0]
 8030978:	63da      	str	r2, [r3, #60]	@ 0x3c
    ifp->mgr = mgr;
 803097a:	683b      	ldr	r3, [r7, #0]
 803097c:	687a      	ldr	r2, [r7, #4]
 803097e:	631a      	str	r2, [r3, #48]	@ 0x30
    ifp->mtu = MG_TCPIP_MTU_DEFAULT;
 8030980:	683b      	ldr	r3, [r7, #0]
 8030982:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8030986:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    mgr->extraconnsize = sizeof(struct connstate);
 803098a:	687b      	ldr	r3, [r7, #4]
 803098c:	2230      	movs	r2, #48	@ 0x30
 803098e:	641a      	str	r2, [r3, #64]	@ 0x40
    if (ifp->ip == 0) ifp->enable_dhcp_client = true;
 8030990:	683b      	ldr	r3, [r7, #0]
 8030992:	689b      	ldr	r3, [r3, #8]
 8030994:	2b00      	cmp	r3, #0
 8030996:	d102      	bne.n	803099e <mg_tcpip_init+0x12e>
 8030998:	683b      	ldr	r3, [r7, #0]
 803099a:	2201      	movs	r2, #1
 803099c:	771a      	strb	r2, [r3, #28]
    memset(ifp->gwmac, 255, sizeof(ifp->gwmac));  // Set to broadcast
 803099e:	683b      	ldr	r3, [r7, #0]
 80309a0:	3346      	adds	r3, #70	@ 0x46
 80309a2:	2206      	movs	r2, #6
 80309a4:	21ff      	movs	r1, #255	@ 0xff
 80309a6:	4618      	mov	r0, r3
 80309a8:	f005 fa22 	bl	8035df0 <memset>
    mg_random(&ifp->eport, sizeof(ifp->eport));   // Random from 0 to 65535
 80309ac:	683b      	ldr	r3, [r7, #0]
 80309ae:	3368      	adds	r3, #104	@ 0x68
 80309b0:	2102      	movs	r1, #2
 80309b2:	4618      	mov	r0, r3
 80309b4:	f002 f839 	bl	8032a2a <mg_random>
    ifp->eport |= MG_EPHEMERAL_PORT_BASE;         // Random from
 80309b8:	683b      	ldr	r3, [r7, #0]
 80309ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80309be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80309c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80309c6:	b29a      	uxth	r2, r3
 80309c8:	683b      	ldr	r3, [r7, #0]
 80309ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
                                           // MG_EPHEMERAL_PORT_BASE to 65535
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 80309ce:	683b      	ldr	r3, [r7, #0]
 80309d0:	695b      	ldr	r3, [r3, #20]
 80309d2:	2b00      	cmp	r3, #0
 80309d4:	d003      	beq.n	80309de <mg_tcpip_init+0x16e>
 80309d6:	683b      	ldr	r3, [r7, #0]
 80309d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80309da:	2b00      	cmp	r3, #0
 80309dc:	d10e      	bne.n	80309fc <mg_tcpip_init+0x18c>
 80309de:	4b09      	ldr	r3, [pc, #36]	@ (8030a04 <mg_tcpip_init+0x194>)
 80309e0:	681b      	ldr	r3, [r3, #0]
 80309e2:	2b00      	cmp	r3, #0
 80309e4:	dd0a      	ble.n	80309fc <mg_tcpip_init+0x18c>
 80309e6:	4b08      	ldr	r3, [pc, #32]	@ (8030a08 <mg_tcpip_init+0x198>)
 80309e8:	f241 7234 	movw	r2, #5940	@ 0x1734
 80309ec:	4907      	ldr	r1, [pc, #28]	@ (8030a0c <mg_tcpip_init+0x19c>)
 80309ee:	2001      	movs	r0, #1
 80309f0:	f7fa fbf4 	bl	802b1dc <mg_log_prefix>
 80309f4:	4809      	ldr	r0, [pc, #36]	@ (8030a1c <mg_tcpip_init+0x1ac>)
 80309f6:	f7fa fc41 	bl	802b27c <mg_log>
  }
}
 80309fa:	e7ff      	b.n	80309fc <mg_tcpip_init+0x18c>
 80309fc:	bf00      	nop
 80309fe:	3710      	adds	r7, #16
 8030a00:	46bd      	mov	sp, r7
 8030a02:	bd80      	pop	{r7, pc}
 8030a04:	20000298 	.word	0x20000298
 8030a08:	080446c8 	.word	0x080446c8
 8030a0c:	08041564 	.word	0x08041564
 8030a10:	08031491 	.word	0x08031491
 8030a14:	0804300c 	.word	0x0804300c
 8030a18:	08043030 	.word	0x08043030
 8030a1c:	08042aa0 	.word	0x08042aa0

08030a20 <send_syn>:
void mg_tcpip_free(struct mg_tcpip_if *ifp) {
  free(ifp->recv_queue.buf);
  free(ifp->tx.buf);
}

static void send_syn(struct mg_connection *c) {
 8030a20:	b590      	push	{r4, r7, lr}
 8030a22:	b08d      	sub	sp, #52	@ 0x34
 8030a24:	af06      	add	r7, sp, #24
 8030a26:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 8030a28:	687b      	ldr	r3, [r7, #4]
 8030a2a:	33b0      	adds	r3, #176	@ 0xb0
 8030a2c:	617b      	str	r3, [r7, #20]
  uint32_t isn = mg_htonl((uint32_t) mg_ntohs(c->loc.port));
 8030a2e:	687b      	ldr	r3, [r7, #4]
 8030a30:	8b1b      	ldrh	r3, [r3, #24]
 8030a32:	4618      	mov	r0, r3
 8030a34:	f002 f879 	bl	8032b2a <mg_ntohs>
 8030a38:	4603      	mov	r3, r0
 8030a3a:	4618      	mov	r0, r3
 8030a3c:	f002 f85c 	bl	8032af8 <mg_ntohl>
 8030a40:	6138      	str	r0, [r7, #16]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8030a42:	687b      	ldr	r3, [r7, #4]
 8030a44:	685b      	ldr	r3, [r3, #4]
 8030a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8030a48:	60fb      	str	r3, [r7, #12]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8030a4a:	687b      	ldr	r3, [r7, #4]
 8030a4c:	331c      	adds	r3, #28
 8030a4e:	681b      	ldr	r3, [r3, #0]
 8030a50:	60bb      	str	r3, [r7, #8]
  tx_tcp(ifp, s->mac, rem_ip, TH_SYN, c->loc.port, c->rem.port, isn, 0, NULL,
 8030a52:	697b      	ldr	r3, [r7, #20]
 8030a54:	f103 0018 	add.w	r0, r3, #24
 8030a58:	68bc      	ldr	r4, [r7, #8]
 8030a5a:	687b      	ldr	r3, [r7, #4]
 8030a5c:	8b1b      	ldrh	r3, [r3, #24]
 8030a5e:	687a      	ldr	r2, [r7, #4]
 8030a60:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 8030a62:	2100      	movs	r1, #0
 8030a64:	9105      	str	r1, [sp, #20]
 8030a66:	2100      	movs	r1, #0
 8030a68:	9104      	str	r1, [sp, #16]
 8030a6a:	2100      	movs	r1, #0
 8030a6c:	9103      	str	r1, [sp, #12]
 8030a6e:	6939      	ldr	r1, [r7, #16]
 8030a70:	9102      	str	r1, [sp, #8]
 8030a72:	9201      	str	r2, [sp, #4]
 8030a74:	9300      	str	r3, [sp, #0]
 8030a76:	2302      	movs	r3, #2
 8030a78:	4622      	mov	r2, r4
 8030a7a:	4601      	mov	r1, r0
 8030a7c:	68f8      	ldr	r0, [r7, #12]
 8030a7e:	f7fe fbdf 	bl	802f240 <tx_tcp>
         0);
}
 8030a82:	bf00      	nop
 8030a84:	371c      	adds	r7, #28
 8030a86:	46bd      	mov	sp, r7
 8030a88:	bd90      	pop	{r4, r7, pc}
	...

08030a8c <mg_connect_resolved>:

void mg_connect_resolved(struct mg_connection *c) {
 8030a8c:	b580      	push	{r7, lr}
 8030a8e:	b08a      	sub	sp, #40	@ 0x28
 8030a90:	af02      	add	r7, sp, #8
 8030a92:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8030a94:	687b      	ldr	r3, [r7, #4]
 8030a96:	685b      	ldr	r3, [r3, #4]
 8030a98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8030a9a:	61fb      	str	r3, [r7, #28]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8030a9c:	687b      	ldr	r3, [r7, #4]
 8030a9e:	331c      	adds	r3, #28
 8030aa0:	681b      	ldr	r3, [r3, #0]
 8030aa2:	60fb      	str	r3, [r7, #12]
  c->is_resolving = 0;
 8030aa4:	687a      	ldr	r2, [r7, #4]
 8030aa6:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8030aaa:	f36f 03c3 	bfc	r3, #3, #1
 8030aae:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  if (ifp->eport < MG_EPHEMERAL_PORT_BASE) ifp->eport = MG_EPHEMERAL_PORT_BASE;
 8030ab2:	69fb      	ldr	r3, [r7, #28]
 8030ab4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8030ab8:	b21b      	sxth	r3, r3
 8030aba:	2b00      	cmp	r3, #0
 8030abc:	db04      	blt.n	8030ac8 <mg_connect_resolved+0x3c>
 8030abe:	69fb      	ldr	r3, [r7, #28]
 8030ac0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8030ac4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  memcpy(c->loc.ip, &ifp->ip, sizeof(uint32_t));
 8030ac8:	687b      	ldr	r3, [r7, #4]
 8030aca:	3308      	adds	r3, #8
 8030acc:	69fa      	ldr	r2, [r7, #28]
 8030ace:	3208      	adds	r2, #8
 8030ad0:	6812      	ldr	r2, [r2, #0]
 8030ad2:	601a      	str	r2, [r3, #0]
  c->loc.port = mg_htons(ifp->eport++);
 8030ad4:	69fb      	ldr	r3, [r7, #28]
 8030ad6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8030ada:	1c5a      	adds	r2, r3, #1
 8030adc:	b291      	uxth	r1, r2
 8030ade:	69fa      	ldr	r2, [r7, #28]
 8030ae0:	f8a2 1068 	strh.w	r1, [r2, #104]	@ 0x68
 8030ae4:	4618      	mov	r0, r3
 8030ae6:	f002 f820 	bl	8032b2a <mg_ntohs>
 8030aea:	4603      	mov	r3, r0
 8030aec:	461a      	mov	r2, r3
 8030aee:	687b      	ldr	r3, [r7, #4]
 8030af0:	831a      	strh	r2, [r3, #24]
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 8030af2:	4b6a      	ldr	r3, [pc, #424]	@ (8030c9c <mg_connect_resolved+0x210>)
 8030af4:	681b      	ldr	r3, [r3, #0]
 8030af6:	2b02      	cmp	r3, #2
 8030af8:	dd15      	ble.n	8030b26 <mg_connect_resolved+0x9a>
 8030afa:	4b69      	ldr	r3, [pc, #420]	@ (8030ca0 <mg_connect_resolved+0x214>)
 8030afc:	f241 724f 	movw	r2, #5967	@ 0x174f
 8030b00:	4968      	ldr	r1, [pc, #416]	@ (8030ca4 <mg_connect_resolved+0x218>)
 8030b02:	2003      	movs	r0, #3
 8030b04:	f7fa fb6a 	bl	802b1dc <mg_log_prefix>
 8030b08:	687b      	ldr	r3, [r7, #4]
 8030b0a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8030b0c:	687b      	ldr	r3, [r7, #4]
 8030b0e:	f103 0208 	add.w	r2, r3, #8
 8030b12:	687b      	ldr	r3, [r7, #4]
 8030b14:	331c      	adds	r3, #28
 8030b16:	9301      	str	r3, [sp, #4]
 8030b18:	4b63      	ldr	r3, [pc, #396]	@ (8030ca8 <mg_connect_resolved+0x21c>)
 8030b1a:	9300      	str	r3, [sp, #0]
 8030b1c:	4613      	mov	r3, r2
 8030b1e:	4a62      	ldr	r2, [pc, #392]	@ (8030ca8 <mg_connect_resolved+0x21c>)
 8030b20:	4862      	ldr	r0, [pc, #392]	@ (8030cac <mg_connect_resolved+0x220>)
 8030b22:	f7fa fbab 	bl	802b27c <mg_log>
            &c->rem));
  mg_call(c, MG_EV_RESOLVE, NULL);
 8030b26:	2200      	movs	r2, #0
 8030b28:	2103      	movs	r1, #3
 8030b2a:	6878      	ldr	r0, [r7, #4]
 8030b2c:	f7f4 ff70 	bl	8025a10 <mg_call>
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 8030b30:	687b      	ldr	r3, [r7, #4]
 8030b32:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8030b36:	f003 0301 	and.w	r3, r3, #1
 8030b3a:	b2db      	uxtb	r3, r3
 8030b3c:	2b00      	cmp	r3, #0
 8030b3e:	d017      	beq.n	8030b70 <mg_connect_resolved+0xe4>
 8030b40:	68fb      	ldr	r3, [r7, #12]
 8030b42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8030b46:	d008      	beq.n	8030b5a <mg_connect_resolved+0xce>
 8030b48:	69fb      	ldr	r3, [r7, #28]
 8030b4a:	689a      	ldr	r2, [r3, #8]
 8030b4c:	69fb      	ldr	r3, [r7, #28]
 8030b4e:	68db      	ldr	r3, [r3, #12]
 8030b50:	43db      	mvns	r3, r3
 8030b52:	431a      	orrs	r2, r3
 8030b54:	68fb      	ldr	r3, [r7, #12]
 8030b56:	429a      	cmp	r2, r3
 8030b58:	d10a      	bne.n	8030b70 <mg_connect_resolved+0xe4>
    struct connstate *s = (struct connstate *) (c + 1);
 8030b5a:	687b      	ldr	r3, [r7, #4]
 8030b5c:	33b0      	adds	r3, #176	@ 0xb0
 8030b5e:	61bb      	str	r3, [r7, #24]
    memset(s->mac, 0xFF, sizeof(s->mac));  // global or local broadcast
 8030b60:	69bb      	ldr	r3, [r7, #24]
 8030b62:	3318      	adds	r3, #24
 8030b64:	2206      	movs	r2, #6
 8030b66:	21ff      	movs	r1, #255	@ 0xff
 8030b68:	4618      	mov	r0, r3
 8030b6a:	f005 f941 	bl	8035df0 <memset>
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 8030b6e:	e091      	b.n	8030c94 <mg_connect_resolved+0x208>
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 8030b70:	69fb      	ldr	r3, [r7, #28]
 8030b72:	689b      	ldr	r3, [r3, #8]
 8030b74:	2b00      	cmp	r3, #0
 8030b76:	d036      	beq.n	8030be6 <mg_connect_resolved+0x15a>
 8030b78:	69fb      	ldr	r3, [r7, #28]
 8030b7a:	689a      	ldr	r2, [r3, #8]
 8030b7c:	68fb      	ldr	r3, [r7, #12]
 8030b7e:	405a      	eors	r2, r3
 8030b80:	69fb      	ldr	r3, [r7, #28]
 8030b82:	68db      	ldr	r3, [r3, #12]
 8030b84:	4013      	ands	r3, r2
 8030b86:	2b00      	cmp	r3, #0
 8030b88:	d12d      	bne.n	8030be6 <mg_connect_resolved+0x15a>
             rem_ip != ifp->gw) {  // skip if gw (onstatechange -> READY -> ARP)
 8030b8a:	69fb      	ldr	r3, [r7, #28]
 8030b8c:	691a      	ldr	r2, [r3, #16]
 8030b8e:	68fb      	ldr	r3, [r7, #12]
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 8030b90:	429a      	cmp	r2, r3
 8030b92:	d028      	beq.n	8030be6 <mg_connect_resolved+0x15a>
    // If we're in the same LAN, fire an ARP lookup.
    MG_DEBUG(("%lu ARP lookup...", c->id));
 8030b94:	4b41      	ldr	r3, [pc, #260]	@ (8030c9c <mg_connect_resolved+0x210>)
 8030b96:	681b      	ldr	r3, [r3, #0]
 8030b98:	2b02      	cmp	r3, #2
 8030b9a:	dd0c      	ble.n	8030bb6 <mg_connect_resolved+0x12a>
 8030b9c:	4b40      	ldr	r3, [pc, #256]	@ (8030ca0 <mg_connect_resolved+0x214>)
 8030b9e:	f241 7258 	movw	r2, #5976	@ 0x1758
 8030ba2:	4940      	ldr	r1, [pc, #256]	@ (8030ca4 <mg_connect_resolved+0x218>)
 8030ba4:	2003      	movs	r0, #3
 8030ba6:	f7fa fb19 	bl	802b1dc <mg_log_prefix>
 8030baa:	687b      	ldr	r3, [r7, #4]
 8030bac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8030bae:	4619      	mov	r1, r3
 8030bb0:	483f      	ldr	r0, [pc, #252]	@ (8030cb0 <mg_connect_resolved+0x224>)
 8030bb2:	f7fa fb63 	bl	802b27c <mg_log>
    arp_ask(ifp, rem_ip);
 8030bb6:	68fb      	ldr	r3, [r7, #12]
 8030bb8:	4619      	mov	r1, r3
 8030bba:	69f8      	ldr	r0, [r7, #28]
 8030bbc:	f7fd f9fa 	bl	802dfb4 <arp_ask>
    settmout(c, MIP_TTYPE_ARP);
 8030bc0:	2102      	movs	r1, #2
 8030bc2:	6878      	ldr	r0, [r7, #4]
 8030bc4:	f7fd f97e 	bl	802dec4 <settmout>
    c->is_arplooking = 1;
 8030bc8:	687a      	ldr	r2, [r7, #4]
 8030bca:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8030bce:	f043 0310 	orr.w	r3, r3, #16
 8030bd2:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    c->is_connecting = 1;
 8030bd6:	687a      	ldr	r2, [r7, #4]
 8030bd8:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8030bdc:	f043 0320 	orr.w	r3, r3, #32
 8030be0:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
 8030be4:	e056      	b.n	8030c94 <mg_connect_resolved+0x208>
  } else if ((*((uint8_t *) &rem_ip) & 0xE0) == 0xE0) {
 8030be6:	f107 030c 	add.w	r3, r7, #12
 8030bea:	781b      	ldrb	r3, [r3, #0]
 8030bec:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8030bf0:	2be0      	cmp	r3, #224	@ 0xe0
 8030bf2:	d126      	bne.n	8030c42 <mg_connect_resolved+0x1b6>
    struct connstate *s = (struct connstate *) (c + 1);  // 224 to 239, E0 to EF
 8030bf4:	687b      	ldr	r3, [r7, #4]
 8030bf6:	33b0      	adds	r3, #176	@ 0xb0
 8030bf8:	613b      	str	r3, [r7, #16]
    uint8_t mcastp[3] = {0x01, 0x00, 0x5E};              // multicast group
 8030bfa:	4a2e      	ldr	r2, [pc, #184]	@ (8030cb4 <mg_connect_resolved+0x228>)
 8030bfc:	f107 0308 	add.w	r3, r7, #8
 8030c00:	6812      	ldr	r2, [r2, #0]
 8030c02:	4611      	mov	r1, r2
 8030c04:	8019      	strh	r1, [r3, #0]
 8030c06:	3302      	adds	r3, #2
 8030c08:	0c12      	lsrs	r2, r2, #16
 8030c0a:	701a      	strb	r2, [r3, #0]
    memcpy(s->mac, mcastp, 3);
 8030c0c:	693b      	ldr	r3, [r7, #16]
 8030c0e:	3318      	adds	r3, #24
 8030c10:	461a      	mov	r2, r3
 8030c12:	f107 0308 	add.w	r3, r7, #8
 8030c16:	8819      	ldrh	r1, [r3, #0]
 8030c18:	789b      	ldrb	r3, [r3, #2]
 8030c1a:	8011      	strh	r1, [r2, #0]
 8030c1c:	7093      	strb	r3, [r2, #2]
    memcpy(s->mac + 3, ((uint8_t *) &rem_ip) + 1, 3);  // 23 LSb
 8030c1e:	693b      	ldr	r3, [r7, #16]
 8030c20:	3318      	adds	r3, #24
 8030c22:	1cd8      	adds	r0, r3, #3
 8030c24:	f107 030c 	add.w	r3, r7, #12
 8030c28:	3301      	adds	r3, #1
 8030c2a:	2203      	movs	r2, #3
 8030c2c:	4619      	mov	r1, r3
 8030c2e:	f006 fb1b 	bl	8037268 <memcpy>
    s->mac[3] &= 0x7F;
 8030c32:	693b      	ldr	r3, [r7, #16]
 8030c34:	7edb      	ldrb	r3, [r3, #27]
 8030c36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8030c3a:	b2da      	uxtb	r2, r3
 8030c3c:	693b      	ldr	r3, [r7, #16]
 8030c3e:	76da      	strb	r2, [r3, #27]
      send_syn(c);
      settmout(c, MIP_TTYPE_SYN);
      c->is_connecting = 1;
    }
  }
}
 8030c40:	e028      	b.n	8030c94 <mg_connect_resolved+0x208>
    struct connstate *s = (struct connstate *) (c + 1);
 8030c42:	687b      	ldr	r3, [r7, #4]
 8030c44:	33b0      	adds	r3, #176	@ 0xb0
 8030c46:	617b      	str	r3, [r7, #20]
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
 8030c48:	697b      	ldr	r3, [r7, #20]
 8030c4a:	f103 0018 	add.w	r0, r3, #24
 8030c4e:	69fb      	ldr	r3, [r7, #28]
 8030c50:	3346      	adds	r3, #70	@ 0x46
 8030c52:	2206      	movs	r2, #6
 8030c54:	4619      	mov	r1, r3
 8030c56:	f006 fb07 	bl	8037268 <memcpy>
    if (c->is_udp) {
 8030c5a:	687b      	ldr	r3, [r7, #4]
 8030c5c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8030c60:	f003 0301 	and.w	r3, r3, #1
 8030c64:	b2db      	uxtb	r3, r3
 8030c66:	2b00      	cmp	r3, #0
 8030c68:	d005      	beq.n	8030c76 <mg_connect_resolved+0x1ea>
      mg_call(c, MG_EV_CONNECT, NULL);
 8030c6a:	2200      	movs	r2, #0
 8030c6c:	2104      	movs	r1, #4
 8030c6e:	6878      	ldr	r0, [r7, #4]
 8030c70:	f7f4 fece 	bl	8025a10 <mg_call>
}
 8030c74:	e00e      	b.n	8030c94 <mg_connect_resolved+0x208>
      send_syn(c);
 8030c76:	6878      	ldr	r0, [r7, #4]
 8030c78:	f7ff fed2 	bl	8030a20 <send_syn>
      settmout(c, MIP_TTYPE_SYN);
 8030c7c:	2103      	movs	r1, #3
 8030c7e:	6878      	ldr	r0, [r7, #4]
 8030c80:	f7fd f920 	bl	802dec4 <settmout>
      c->is_connecting = 1;
 8030c84:	687a      	ldr	r2, [r7, #4]
 8030c86:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8030c8a:	f043 0320 	orr.w	r3, r3, #32
 8030c8e:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
}
 8030c92:	e7ff      	b.n	8030c94 <mg_connect_resolved+0x208>
 8030c94:	bf00      	nop
 8030c96:	3720      	adds	r7, #32
 8030c98:	46bd      	mov	sp, r7
 8030c9a:	bd80      	pop	{r7, pc}
 8030c9c:	20000298 	.word	0x20000298
 8030ca0:	080446d8 	.word	0x080446d8
 8030ca4:	08041564 	.word	0x08041564
 8030ca8:	08031445 	.word	0x08031445
 8030cac:	08043044 	.word	0x08043044
 8030cb0:	08043054 	.word	0x08043054
 8030cb4:	08043068 	.word	0x08043068

08030cb8 <mg_open_listener>:

bool mg_open_listener(struct mg_connection *c, const char *url) {
 8030cb8:	b580      	push	{r7, lr}
 8030cba:	b082      	sub	sp, #8
 8030cbc:	af00      	add	r7, sp, #0
 8030cbe:	6078      	str	r0, [r7, #4]
 8030cc0:	6039      	str	r1, [r7, #0]
  c->loc.port = mg_htons(mg_url_port(url));
 8030cc2:	6838      	ldr	r0, [r7, #0]
 8030cc4:	f001 fe34 	bl	8032930 <mg_url_port>
 8030cc8:	4603      	mov	r3, r0
 8030cca:	4618      	mov	r0, r3
 8030ccc:	f001 ff2d 	bl	8032b2a <mg_ntohs>
 8030cd0:	4603      	mov	r3, r0
 8030cd2:	461a      	mov	r2, r3
 8030cd4:	687b      	ldr	r3, [r7, #4]
 8030cd6:	831a      	strh	r2, [r3, #24]
  return true;
 8030cd8:	2301      	movs	r3, #1
}
 8030cda:	4618      	mov	r0, r3
 8030cdc:	3708      	adds	r7, #8
 8030cde:	46bd      	mov	sp, r7
 8030ce0:	bd80      	pop	{r7, pc}
	...

08030ce4 <write_conn>:

static void write_conn(struct mg_connection *c) {
 8030ce4:	b580      	push	{r7, lr}
 8030ce6:	b084      	sub	sp, #16
 8030ce8:	af00      	add	r7, sp, #0
 8030cea:	6078      	str	r0, [r7, #4]
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8030cec:	687b      	ldr	r3, [r7, #4]
 8030cee:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8030cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8030cf6:	b2db      	uxtb	r3, r3
                       : mg_io_send(c, c->send.buf, c->send.len);
 8030cf8:	2b00      	cmp	r3, #0
 8030cfa:	d009      	beq.n	8030d10 <write_conn+0x2c>
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8030cfc:	687b      	ldr	r3, [r7, #4]
 8030cfe:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8030d00:	687b      	ldr	r3, [r7, #4]
 8030d02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8030d04:	461a      	mov	r2, r3
 8030d06:	6878      	ldr	r0, [r7, #4]
 8030d08:	f001 fce7 	bl	80326da <mg_tls_send>
 8030d0c:	4603      	mov	r3, r0
 8030d0e:	e008      	b.n	8030d22 <write_conn+0x3e>
                       : mg_io_send(c, c->send.buf, c->send.len);
 8030d10:	687b      	ldr	r3, [r7, #4]
 8030d12:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8030d14:	687b      	ldr	r3, [r7, #4]
 8030d16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8030d18:	461a      	mov	r2, r3
 8030d1a:	6878      	ldr	r0, [r7, #4]
 8030d1c:	f7fe fce8 	bl	802f6f0 <mg_io_send>
 8030d20:	4603      	mov	r3, r0
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8030d22:	60fb      	str	r3, [r7, #12]
  if (len == MG_IO_ERR) {
 8030d24:	68fb      	ldr	r3, [r7, #12]
 8030d26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8030d2a:	d104      	bne.n	8030d36 <write_conn+0x52>
    mg_error(c, "tx err");
 8030d2c:	490c      	ldr	r1, [pc, #48]	@ (8030d60 <write_conn+0x7c>)
 8030d2e:	6878      	ldr	r0, [r7, #4]
 8030d30:	f7f4 fe8e 	bl	8025a50 <mg_error>
  } else if (len > 0) {
    mg_iobuf_del(&c->send, 0, (size_t) len);
    mg_call(c, MG_EV_WRITE, &len);
  }
}
 8030d34:	e010      	b.n	8030d58 <write_conn+0x74>
  } else if (len > 0) {
 8030d36:	68fb      	ldr	r3, [r7, #12]
 8030d38:	2b00      	cmp	r3, #0
 8030d3a:	dd0d      	ble.n	8030d58 <write_conn+0x74>
    mg_iobuf_del(&c->send, 0, (size_t) len);
 8030d3c:	687b      	ldr	r3, [r7, #4]
 8030d3e:	3348      	adds	r3, #72	@ 0x48
 8030d40:	68fa      	ldr	r2, [r7, #12]
 8030d42:	2100      	movs	r1, #0
 8030d44:	4618      	mov	r0, r3
 8030d46:	f7f9 fb37 	bl	802a3b8 <mg_iobuf_del>
    mg_call(c, MG_EV_WRITE, &len);
 8030d4a:	f107 030c 	add.w	r3, r7, #12
 8030d4e:	461a      	mov	r2, r3
 8030d50:	2108      	movs	r1, #8
 8030d52:	6878      	ldr	r0, [r7, #4]
 8030d54:	f7f4 fe5c 	bl	8025a10 <mg_call>
}
 8030d58:	bf00      	nop
 8030d5a:	3710      	adds	r7, #16
 8030d5c:	46bd      	mov	sp, r7
 8030d5e:	bd80      	pop	{r7, pc}
 8030d60:	0804306c 	.word	0x0804306c

08030d64 <init_closure>:

static void init_closure(struct mg_connection *c) {
 8030d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8030d66:	b08f      	sub	sp, #60	@ 0x3c
 8030d68:	af06      	add	r7, sp, #24
 8030d6a:	60f8      	str	r0, [r7, #12]
  struct connstate *s = (struct connstate *) (c + 1);
 8030d6c:	68fb      	ldr	r3, [r7, #12]
 8030d6e:	33b0      	adds	r3, #176	@ 0xb0
 8030d70:	61fb      	str	r3, [r7, #28]
  if (c->is_udp == false && c->is_listening == false &&
 8030d72:	68fb      	ldr	r3, [r7, #12]
 8030d74:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8030d78:	f003 0301 	and.w	r3, r3, #1
 8030d7c:	b2db      	uxtb	r3, r3
 8030d7e:	2b00      	cmp	r3, #0
 8030d80:	d13f      	bne.n	8030e02 <init_closure+0x9e>
 8030d82:	68fb      	ldr	r3, [r7, #12]
 8030d84:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8030d88:	f003 0301 	and.w	r3, r3, #1
 8030d8c:	b2db      	uxtb	r3, r3
 8030d8e:	2b00      	cmp	r3, #0
 8030d90:	d137      	bne.n	8030e02 <init_closure+0x9e>
      c->is_connecting == false) {  // For TCP conns,
 8030d92:	68fb      	ldr	r3, [r7, #12]
 8030d94:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8030d98:	f003 0320 	and.w	r3, r3, #32
 8030d9c:	b2db      	uxtb	r3, r3
  if (c->is_udp == false && c->is_listening == false &&
 8030d9e:	2b00      	cmp	r3, #0
 8030da0:	d12f      	bne.n	8030e02 <init_closure+0x9e>
    struct mg_tcpip_if *ifp =
        (struct mg_tcpip_if *) c->mgr->priv;  // send TCP FIN
 8030da2:	68fb      	ldr	r3, [r7, #12]
 8030da4:	685b      	ldr	r3, [r3, #4]
    struct mg_tcpip_if *ifp =
 8030da6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8030da8:	61bb      	str	r3, [r7, #24]
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8030daa:	68fb      	ldr	r3, [r7, #12]
 8030dac:	331c      	adds	r3, #28
 8030dae:	681b      	ldr	r3, [r3, #0]
 8030db0:	617b      	str	r3, [r7, #20]
    tx_tcp(ifp, s->mac, rem_ip, TH_FIN | TH_ACK, c->loc.port, c->rem.port,
 8030db2:	69fb      	ldr	r3, [r7, #28]
 8030db4:	f103 0618 	add.w	r6, r3, #24
 8030db8:	697b      	ldr	r3, [r7, #20]
 8030dba:	60bb      	str	r3, [r7, #8]
 8030dbc:	68fb      	ldr	r3, [r7, #12]
 8030dbe:	8b1c      	ldrh	r4, [r3, #24]
 8030dc0:	68fb      	ldr	r3, [r7, #12]
 8030dc2:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 8030dc4:	69fb      	ldr	r3, [r7, #28]
 8030dc6:	681b      	ldr	r3, [r3, #0]
 8030dc8:	4618      	mov	r0, r3
 8030dca:	f001 fe95 	bl	8032af8 <mg_ntohl>
 8030dce:	6078      	str	r0, [r7, #4]
 8030dd0:	69fb      	ldr	r3, [r7, #28]
 8030dd2:	685b      	ldr	r3, [r3, #4]
 8030dd4:	4618      	mov	r0, r3
 8030dd6:	f001 fe8f 	bl	8032af8 <mg_ntohl>
 8030dda:	4603      	mov	r3, r0
 8030ddc:	2200      	movs	r2, #0
 8030dde:	9205      	str	r2, [sp, #20]
 8030de0:	2200      	movs	r2, #0
 8030de2:	9204      	str	r2, [sp, #16]
 8030de4:	9303      	str	r3, [sp, #12]
 8030de6:	6879      	ldr	r1, [r7, #4]
 8030de8:	9102      	str	r1, [sp, #8]
 8030dea:	9501      	str	r5, [sp, #4]
 8030dec:	9400      	str	r4, [sp, #0]
 8030dee:	2311      	movs	r3, #17
 8030df0:	68ba      	ldr	r2, [r7, #8]
 8030df2:	4631      	mov	r1, r6
 8030df4:	69b8      	ldr	r0, [r7, #24]
 8030df6:	f7fe fa23 	bl	802f240 <tx_tcp>
           mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
    settmout(c, MIP_TTYPE_FIN);
 8030dfa:	2104      	movs	r1, #4
 8030dfc:	68f8      	ldr	r0, [r7, #12]
 8030dfe:	f7fd f861 	bl	802dec4 <settmout>
  }
}
 8030e02:	bf00      	nop
 8030e04:	3724      	adds	r7, #36	@ 0x24
 8030e06:	46bd      	mov	sp, r7
 8030e08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08030e0a <close_conn>:

static void close_conn(struct mg_connection *c) {
 8030e0a:	b580      	push	{r7, lr}
 8030e0c:	b084      	sub	sp, #16
 8030e0e:	af00      	add	r7, sp, #0
 8030e10:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 8030e12:	687b      	ldr	r3, [r7, #4]
 8030e14:	33b0      	adds	r3, #176	@ 0xb0
 8030e16:	60fb      	str	r3, [r7, #12]
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
 8030e18:	68fb      	ldr	r3, [r7, #12]
 8030e1a:	3320      	adds	r3, #32
 8030e1c:	4618      	mov	r0, r3
 8030e1e:	f7f9 fb16 	bl	802a44e <mg_iobuf_free>
  mg_close_conn(c);
 8030e22:	6878      	ldr	r0, [r7, #4]
 8030e24:	f7fc fddc 	bl	802d9e0 <mg_close_conn>
}
 8030e28:	bf00      	nop
 8030e2a:	3710      	adds	r7, #16
 8030e2c:	46bd      	mov	sp, r7
 8030e2e:	bd80      	pop	{r7, pc}

08030e30 <can_write>:

static bool can_write(struct mg_connection *c) {
 8030e30:	b480      	push	{r7}
 8030e32:	b083      	sub	sp, #12
 8030e34:	af00      	add	r7, sp, #0
 8030e36:	6078      	str	r0, [r7, #4]
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 8030e38:	687b      	ldr	r3, [r7, #4]
 8030e3a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8030e3e:	f003 0320 	and.w	r3, r3, #32
 8030e42:	b2db      	uxtb	r3, r3
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8030e44:	2b00      	cmp	r3, #0
 8030e46:	d11d      	bne.n	8030e84 <can_write+0x54>
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 8030e48:	687b      	ldr	r3, [r7, #4]
 8030e4a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8030e4e:	f003 0308 	and.w	r3, r3, #8
 8030e52:	b2db      	uxtb	r3, r3
 8030e54:	2b00      	cmp	r3, #0
 8030e56:	d115      	bne.n	8030e84 <can_write+0x54>
 8030e58:	687b      	ldr	r3, [r7, #4]
 8030e5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8030e5c:	2b00      	cmp	r3, #0
 8030e5e:	d011      	beq.n	8030e84 <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8030e60:	687b      	ldr	r3, [r7, #4]
 8030e62:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8030e66:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8030e6a:	b2db      	uxtb	r3, r3
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 8030e6c:	2b00      	cmp	r3, #0
 8030e6e:	d109      	bne.n	8030e84 <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8030e70:	687b      	ldr	r3, [r7, #4]
 8030e72:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8030e76:	f003 0310 	and.w	r3, r3, #16
 8030e7a:	b2db      	uxtb	r3, r3
 8030e7c:	2b00      	cmp	r3, #0
 8030e7e:	d101      	bne.n	8030e84 <can_write+0x54>
 8030e80:	2301      	movs	r3, #1
 8030e82:	e000      	b.n	8030e86 <can_write+0x56>
 8030e84:	2300      	movs	r3, #0
 8030e86:	f003 0301 	and.w	r3, r3, #1
 8030e8a:	b2db      	uxtb	r3, r3
}
 8030e8c:	4618      	mov	r0, r3
 8030e8e:	370c      	adds	r7, #12
 8030e90:	46bd      	mov	sp, r7
 8030e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030e96:	4770      	bx	lr

08030e98 <mg_mgr_poll>:

void mg_mgr_poll(struct mg_mgr *mgr, int ms) {
 8030e98:	b5b0      	push	{r4, r5, r7, lr}
 8030e9a:	b08c      	sub	sp, #48	@ 0x30
 8030e9c:	af04      	add	r7, sp, #16
 8030e9e:	6078      	str	r0, [r7, #4]
 8030ea0:	6039      	str	r1, [r7, #0]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) mgr->priv;
 8030ea2:	687b      	ldr	r3, [r7, #4]
 8030ea4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8030ea6:	61bb      	str	r3, [r7, #24]
  struct mg_connection *c, *tmp;
  uint64_t now = mg_millis();
 8030ea8:	f001 fed0 	bl	8032c4c <mg_millis>
 8030eac:	4602      	mov	r2, r0
 8030eae:	460b      	mov	r3, r1
 8030eb0:	e9c7 2302 	strd	r2, r3, [r7, #8]
  mg_timer_poll(&mgr->timers, now);
 8030eb4:	687b      	ldr	r3, [r7, #4]
 8030eb6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8030eba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8030ebe:	4608      	mov	r0, r1
 8030ec0:	f001 fb77 	bl	80325b2 <mg_timer_poll>
  if (ifp == NULL || ifp->driver == NULL) return;
 8030ec4:	69bb      	ldr	r3, [r7, #24]
 8030ec6:	2b00      	cmp	r3, #0
 8030ec8:	f000 80aa 	beq.w	8031020 <mg_mgr_poll+0x188>
 8030ecc:	69bb      	ldr	r3, [r7, #24]
 8030ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8030ed0:	2b00      	cmp	r3, #0
 8030ed2:	f000 80a5 	beq.w	8031020 <mg_mgr_poll+0x188>
  mg_tcpip_poll(ifp, now);
 8030ed6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8030eda:	69b8      	ldr	r0, [r7, #24]
 8030edc:	f7ff fab6 	bl	803044c <mg_tcpip_poll>
  for (c = mgr->conns; c != NULL; c = tmp) {
 8030ee0:	687b      	ldr	r3, [r7, #4]
 8030ee2:	681b      	ldr	r3, [r3, #0]
 8030ee4:	61fb      	str	r3, [r7, #28]
 8030ee6:	e096      	b.n	8031016 <mg_mgr_poll+0x17e>
    tmp = c->next;
 8030ee8:	69fb      	ldr	r3, [r7, #28]
 8030eea:	681b      	ldr	r3, [r3, #0]
 8030eec:	617b      	str	r3, [r7, #20]
    struct connstate *s = (struct connstate *) (c + 1);
 8030eee:	69fb      	ldr	r3, [r7, #28]
 8030ef0:	33b0      	adds	r3, #176	@ 0xb0
 8030ef2:	613b      	str	r3, [r7, #16]
    mg_call(c, MG_EV_POLL, &now);
 8030ef4:	f107 0308 	add.w	r3, r7, #8
 8030ef8:	461a      	mov	r2, r3
 8030efa:	2102      	movs	r1, #2
 8030efc:	69f8      	ldr	r0, [r7, #28]
 8030efe:	f7f4 fd87 	bl	8025a10 <mg_call>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 8030f02:	4b49      	ldr	r3, [pc, #292]	@ (8031028 <mg_mgr_poll+0x190>)
 8030f04:	681b      	ldr	r3, [r3, #0]
 8030f06:	2b03      	cmp	r3, #3
 8030f08:	dd48      	ble.n	8030f9c <mg_mgr_poll+0x104>
 8030f0a:	4b48      	ldr	r3, [pc, #288]	@ (803102c <mg_mgr_poll+0x194>)
 8030f0c:	f241 72a4 	movw	r2, #6052	@ 0x17a4
 8030f10:	4947      	ldr	r1, [pc, #284]	@ (8031030 <mg_mgr_poll+0x198>)
 8030f12:	2004      	movs	r0, #4
 8030f14:	f7fa f962 	bl	802b1dc <mg_log_prefix>
 8030f18:	69fb      	ldr	r3, [r7, #28]
 8030f1a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8030f1c:	69fb      	ldr	r3, [r7, #28]
 8030f1e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8030f22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8030f26:	b2db      	uxtb	r3, r3
 8030f28:	2b00      	cmp	r3, #0
 8030f2a:	d001      	beq.n	8030f30 <mg_mgr_poll+0x98>
 8030f2c:	2454      	movs	r4, #84	@ 0x54
 8030f2e:	e000      	b.n	8030f32 <mg_mgr_poll+0x9a>
 8030f30:	2474      	movs	r4, #116	@ 0x74
 8030f32:	69fb      	ldr	r3, [r7, #28]
 8030f34:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8030f38:	f003 0320 	and.w	r3, r3, #32
 8030f3c:	b2db      	uxtb	r3, r3
 8030f3e:	2b00      	cmp	r3, #0
 8030f40:	d001      	beq.n	8030f46 <mg_mgr_poll+0xae>
 8030f42:	2543      	movs	r5, #67	@ 0x43
 8030f44:	e000      	b.n	8030f48 <mg_mgr_poll+0xb0>
 8030f46:	2563      	movs	r5, #99	@ 0x63
 8030f48:	69fb      	ldr	r3, [r7, #28]
 8030f4a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8030f4e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8030f52:	b2db      	uxtb	r3, r3
 8030f54:	2b00      	cmp	r3, #0
 8030f56:	d001      	beq.n	8030f5c <mg_mgr_poll+0xc4>
 8030f58:	2348      	movs	r3, #72	@ 0x48
 8030f5a:	e000      	b.n	8030f5e <mg_mgr_poll+0xc6>
 8030f5c:	2368      	movs	r3, #104	@ 0x68
 8030f5e:	69fa      	ldr	r2, [r7, #28]
 8030f60:	f892 20ac 	ldrb.w	r2, [r2, #172]	@ 0xac
 8030f64:	f002 0208 	and.w	r2, r2, #8
 8030f68:	b2d2      	uxtb	r2, r2
 8030f6a:	2a00      	cmp	r2, #0
 8030f6c:	d001      	beq.n	8030f72 <mg_mgr_poll+0xda>
 8030f6e:	2252      	movs	r2, #82	@ 0x52
 8030f70:	e000      	b.n	8030f74 <mg_mgr_poll+0xdc>
 8030f72:	2272      	movs	r2, #114	@ 0x72
 8030f74:	69f9      	ldr	r1, [r7, #28]
 8030f76:	f891 10ad 	ldrb.w	r1, [r1, #173]	@ 0xad
 8030f7a:	f001 0120 	and.w	r1, r1, #32
 8030f7e:	b2c9      	uxtb	r1, r1
 8030f80:	2900      	cmp	r1, #0
 8030f82:	d001      	beq.n	8030f88 <mg_mgr_poll+0xf0>
 8030f84:	2143      	movs	r1, #67	@ 0x43
 8030f86:	e000      	b.n	8030f8a <mg_mgr_poll+0xf2>
 8030f88:	2163      	movs	r1, #99	@ 0x63
 8030f8a:	9102      	str	r1, [sp, #8]
 8030f8c:	9201      	str	r2, [sp, #4]
 8030f8e:	9300      	str	r3, [sp, #0]
 8030f90:	462b      	mov	r3, r5
 8030f92:	4622      	mov	r2, r4
 8030f94:	4601      	mov	r1, r0
 8030f96:	4827      	ldr	r0, [pc, #156]	@ (8031034 <mg_mgr_poll+0x19c>)
 8030f98:	f7fa f970 	bl	802b27c <mg_log>
                c->is_connecting ? 'C' : 'c', c->is_tls_hs ? 'H' : 'h',
                c->is_resolving ? 'R' : 'r', c->is_closing ? 'C' : 'c'));
    if (c->is_tls && mg_tls_pending(c) > 0)
 8030f9c:	69fb      	ldr	r3, [r7, #28]
 8030f9e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8030fa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8030fa6:	b2db      	uxtb	r3, r3
 8030fa8:	2b00      	cmp	r3, #0
 8030faa:	d00b      	beq.n	8030fc4 <mg_mgr_poll+0x12c>
 8030fac:	69f8      	ldr	r0, [r7, #28]
 8030fae:	f001 fbad 	bl	803270c <mg_tls_pending>
 8030fb2:	4603      	mov	r3, r0
 8030fb4:	2b00      	cmp	r3, #0
 8030fb6:	d005      	beq.n	8030fc4 <mg_mgr_poll+0x12c>
      handle_tls_recv(c, (struct mg_iobuf *) &c->rtls);
 8030fb8:	69fb      	ldr	r3, [r7, #28]
 8030fba:	3368      	adds	r3, #104	@ 0x68
 8030fbc:	4619      	mov	r1, r3
 8030fbe:	69f8      	ldr	r0, [r7, #28]
 8030fc0:	f7fe fc0e 	bl	802f7e0 <handle_tls_recv>
    if (can_write(c)) write_conn(c);
 8030fc4:	69f8      	ldr	r0, [r7, #28]
 8030fc6:	f7ff ff33 	bl	8030e30 <can_write>
 8030fca:	4603      	mov	r3, r0
 8030fcc:	2b00      	cmp	r3, #0
 8030fce:	d002      	beq.n	8030fd6 <mg_mgr_poll+0x13e>
 8030fd0:	69f8      	ldr	r0, [r7, #28]
 8030fd2:	f7ff fe87 	bl	8030ce4 <write_conn>
    if (c->is_draining && c->send.len == 0 && s->ttype != MIP_TTYPE_FIN)
 8030fd6:	69fb      	ldr	r3, [r7, #28]
 8030fd8:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8030fdc:	f003 0310 	and.w	r3, r3, #16
 8030fe0:	b2db      	uxtb	r3, r3
 8030fe2:	2b00      	cmp	r3, #0
 8030fe4:	d00a      	beq.n	8030ffc <mg_mgr_poll+0x164>
 8030fe6:	69fb      	ldr	r3, [r7, #28]
 8030fe8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8030fea:	2b00      	cmp	r3, #0
 8030fec:	d106      	bne.n	8030ffc <mg_mgr_poll+0x164>
 8030fee:	693b      	ldr	r3, [r7, #16]
 8030ff0:	7f9b      	ldrb	r3, [r3, #30]
 8030ff2:	2b04      	cmp	r3, #4
 8030ff4:	d002      	beq.n	8030ffc <mg_mgr_poll+0x164>
      init_closure(c);
 8030ff6:	69f8      	ldr	r0, [r7, #28]
 8030ff8:	f7ff feb4 	bl	8030d64 <init_closure>
    if (c->is_closing) close_conn(c);
 8030ffc:	69fb      	ldr	r3, [r7, #28]
 8030ffe:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8031002:	f003 0320 	and.w	r3, r3, #32
 8031006:	b2db      	uxtb	r3, r3
 8031008:	2b00      	cmp	r3, #0
 803100a:	d002      	beq.n	8031012 <mg_mgr_poll+0x17a>
 803100c:	69f8      	ldr	r0, [r7, #28]
 803100e:	f7ff fefc 	bl	8030e0a <close_conn>
  for (c = mgr->conns; c != NULL; c = tmp) {
 8031012:	697b      	ldr	r3, [r7, #20]
 8031014:	61fb      	str	r3, [r7, #28]
 8031016:	69fb      	ldr	r3, [r7, #28]
 8031018:	2b00      	cmp	r3, #0
 803101a:	f47f af65 	bne.w	8030ee8 <mg_mgr_poll+0x50>
 803101e:	e000      	b.n	8031022 <mg_mgr_poll+0x18a>
  if (ifp == NULL || ifp->driver == NULL) return;
 8031020:	bf00      	nop
  }
  (void) ms;
}
 8031022:	3720      	adds	r7, #32
 8031024:	46bd      	mov	sp, r7
 8031026:	bdb0      	pop	{r4, r5, r7, pc}
 8031028:	20000298 	.word	0x20000298
 803102c:	080446ec 	.word	0x080446ec
 8031030:	08041564 	.word	0x08041564
 8031034:	08043074 	.word	0x08043074

08031038 <mg_send>:

bool mg_send(struct mg_connection *c, const void *buf, size_t len) {
 8031038:	b5b0      	push	{r4, r5, r7, lr}
 803103a:	b08c      	sub	sp, #48	@ 0x30
 803103c:	af04      	add	r7, sp, #16
 803103e:	60f8      	str	r0, [r7, #12]
 8031040:	60b9      	str	r1, [r7, #8]
 8031042:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8031044:	68fb      	ldr	r3, [r7, #12]
 8031046:	685b      	ldr	r3, [r3, #4]
 8031048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 803104a:	61bb      	str	r3, [r7, #24]
  bool res = false;
 803104c:	2300      	movs	r3, #0
 803104e:	77fb      	strb	r3, [r7, #31]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8031050:	68fb      	ldr	r3, [r7, #12]
 8031052:	331c      	adds	r3, #28
 8031054:	681b      	ldr	r3, [r3, #0]
 8031056:	613b      	str	r3, [r7, #16]
  if (ifp->ip == 0 || ifp->state != MG_TCPIP_STATE_READY) {
 8031058:	69bb      	ldr	r3, [r7, #24]
 803105a:	689b      	ldr	r3, [r3, #8]
 803105c:	2b00      	cmp	r3, #0
 803105e:	d004      	beq.n	803106a <mg_send+0x32>
 8031060:	69bb      	ldr	r3, [r7, #24]
 8031062:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8031066:	2b03      	cmp	r3, #3
 8031068:	d004      	beq.n	8031074 <mg_send+0x3c>
    mg_error(c, "net down");
 803106a:	4921      	ldr	r1, [pc, #132]	@ (80310f0 <mg_send+0xb8>)
 803106c:	68f8      	ldr	r0, [r7, #12]
 803106e:	f7f4 fcef 	bl	8025a50 <mg_error>
 8031072:	e037      	b.n	80310e4 <mg_send+0xac>
  } else if (c->is_udp) {
 8031074:	68fb      	ldr	r3, [r7, #12]
 8031076:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 803107a:	f003 0301 	and.w	r3, r3, #1
 803107e:	b2db      	uxtb	r3, r3
 8031080:	2b00      	cmp	r3, #0
 8031082:	d020      	beq.n	80310c6 <mg_send+0x8e>
    struct connstate *s = (struct connstate *) (c + 1);
 8031084:	68fb      	ldr	r3, [r7, #12]
 8031086:	33b0      	adds	r3, #176	@ 0xb0
 8031088:	617b      	str	r3, [r7, #20]
    len = trim_len(c, len);  // Trimming length if necessary
 803108a:	6879      	ldr	r1, [r7, #4]
 803108c:	68f8      	ldr	r0, [r7, #12]
 803108e:	f7fe faa1 	bl	802f5d4 <trim_len>
 8031092:	6078      	str	r0, [r7, #4]
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, rem_ip, c->rem.port, buf, len);
 8031094:	697b      	ldr	r3, [r7, #20]
 8031096:	f103 0018 	add.w	r0, r3, #24
 803109a:	69bb      	ldr	r3, [r7, #24]
 803109c:	689c      	ldr	r4, [r3, #8]
 803109e:	68fb      	ldr	r3, [r7, #12]
 80310a0:	8b1d      	ldrh	r5, [r3, #24]
 80310a2:	693b      	ldr	r3, [r7, #16]
 80310a4:	68fa      	ldr	r2, [r7, #12]
 80310a6:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 80310a8:	6879      	ldr	r1, [r7, #4]
 80310aa:	9103      	str	r1, [sp, #12]
 80310ac:	68b9      	ldr	r1, [r7, #8]
 80310ae:	9102      	str	r1, [sp, #8]
 80310b0:	9201      	str	r2, [sp, #4]
 80310b2:	9300      	str	r3, [sp, #0]
 80310b4:	462b      	mov	r3, r5
 80310b6:	4622      	mov	r2, r4
 80310b8:	4601      	mov	r1, r0
 80310ba:	69b8      	ldr	r0, [r7, #24]
 80310bc:	f7fd f8c2 	bl	802e244 <tx_udp>
    res = true;
 80310c0:	2301      	movs	r3, #1
 80310c2:	77fb      	strb	r3, [r7, #31]
 80310c4:	e00e      	b.n	80310e4 <mg_send+0xac>
  } else {
    res = mg_iobuf_add(&c->send, c->send.len, buf, len);
 80310c6:	68fb      	ldr	r3, [r7, #12]
 80310c8:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 80310cc:	68fb      	ldr	r3, [r7, #12]
 80310ce:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80310d0:	687b      	ldr	r3, [r7, #4]
 80310d2:	68ba      	ldr	r2, [r7, #8]
 80310d4:	f7f9 f91e 	bl	802a314 <mg_iobuf_add>
 80310d8:	4603      	mov	r3, r0
 80310da:	2b00      	cmp	r3, #0
 80310dc:	bf14      	ite	ne
 80310de:	2301      	movne	r3, #1
 80310e0:	2300      	moveq	r3, #0
 80310e2:	77fb      	strb	r3, [r7, #31]
  }
  return res;
 80310e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80310e6:	4618      	mov	r0, r3
 80310e8:	3720      	adds	r7, #32
 80310ea:	46bd      	mov	sp, r7
 80310ec:	bdb0      	pop	{r4, r5, r7, pc}
 80310ee:	bf00      	nop
 80310f0:	08043088 	.word	0x08043088

080310f4 <mg_pfn_iobuf_private>:
  len = mg_queue_vprintf(q, fmt, &ap);
  va_end(ap);
  return len;
}

static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {
 80310f4:	b580      	push	{r7, lr}
 80310f6:	b084      	sub	sp, #16
 80310f8:	af00      	add	r7, sp, #0
 80310fa:	4603      	mov	r3, r0
 80310fc:	6039      	str	r1, [r7, #0]
 80310fe:	71fb      	strb	r3, [r7, #7]
 8031100:	4613      	mov	r3, r2
 8031102:	71bb      	strb	r3, [r7, #6]
  struct mg_iobuf *io = (struct mg_iobuf *) param;
 8031104:	683b      	ldr	r3, [r7, #0]
 8031106:	60fb      	str	r3, [r7, #12]
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 8031108:	79bb      	ldrb	r3, [r7, #6]
 803110a:	2b00      	cmp	r3, #0
 803110c:	d00d      	beq.n	803112a <mg_pfn_iobuf_private+0x36>
 803110e:	68fb      	ldr	r3, [r7, #12]
 8031110:	689b      	ldr	r3, [r3, #8]
 8031112:	1c9a      	adds	r2, r3, #2
 8031114:	68fb      	ldr	r3, [r7, #12]
 8031116:	685b      	ldr	r3, [r3, #4]
 8031118:	429a      	cmp	r2, r3
 803111a:	d906      	bls.n	803112a <mg_pfn_iobuf_private+0x36>
 803111c:	68fb      	ldr	r3, [r7, #12]
 803111e:	689b      	ldr	r3, [r3, #8]
 8031120:	3302      	adds	r3, #2
 8031122:	4619      	mov	r1, r3
 8031124:	68f8      	ldr	r0, [r7, #12]
 8031126:	f7f9 f869 	bl	802a1fc <mg_iobuf_resize>
  if (io->len + 2 <= io->size) {
 803112a:	68fb      	ldr	r3, [r7, #12]
 803112c:	689b      	ldr	r3, [r3, #8]
 803112e:	1c9a      	adds	r2, r3, #2
 8031130:	68fb      	ldr	r3, [r7, #12]
 8031132:	685b      	ldr	r3, [r3, #4]
 8031134:	429a      	cmp	r2, r3
 8031136:	d811      	bhi.n	803115c <mg_pfn_iobuf_private+0x68>
    io->buf[io->len++] = (uint8_t) ch;
 8031138:	68fb      	ldr	r3, [r7, #12]
 803113a:	681a      	ldr	r2, [r3, #0]
 803113c:	68fb      	ldr	r3, [r7, #12]
 803113e:	689b      	ldr	r3, [r3, #8]
 8031140:	1c58      	adds	r0, r3, #1
 8031142:	68f9      	ldr	r1, [r7, #12]
 8031144:	6088      	str	r0, [r1, #8]
 8031146:	4413      	add	r3, r2
 8031148:	79fa      	ldrb	r2, [r7, #7]
 803114a:	701a      	strb	r2, [r3, #0]
    io->buf[io->len] = 0;
 803114c:	68fb      	ldr	r3, [r7, #12]
 803114e:	681a      	ldr	r2, [r3, #0]
 8031150:	68fb      	ldr	r3, [r7, #12]
 8031152:	689b      	ldr	r3, [r3, #8]
 8031154:	4413      	add	r3, r2
 8031156:	2200      	movs	r2, #0
 8031158:	701a      	strb	r2, [r3, #0]
  } else if (io->len < io->size) {
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
  }
}
 803115a:	e00f      	b.n	803117c <mg_pfn_iobuf_private+0x88>
  } else if (io->len < io->size) {
 803115c:	68fb      	ldr	r3, [r7, #12]
 803115e:	689a      	ldr	r2, [r3, #8]
 8031160:	68fb      	ldr	r3, [r7, #12]
 8031162:	685b      	ldr	r3, [r3, #4]
 8031164:	429a      	cmp	r2, r3
 8031166:	d209      	bcs.n	803117c <mg_pfn_iobuf_private+0x88>
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
 8031168:	68fb      	ldr	r3, [r7, #12]
 803116a:	681a      	ldr	r2, [r3, #0]
 803116c:	68fb      	ldr	r3, [r7, #12]
 803116e:	689b      	ldr	r3, [r3, #8]
 8031170:	1c58      	adds	r0, r3, #1
 8031172:	68f9      	ldr	r1, [r7, #12]
 8031174:	6088      	str	r0, [r1, #8]
 8031176:	4413      	add	r3, r2
 8031178:	2200      	movs	r2, #0
 803117a:	701a      	strb	r2, [r3, #0]
}
 803117c:	bf00      	nop
 803117e:	3710      	adds	r7, #16
 8031180:	46bd      	mov	sp, r7
 8031182:	bd80      	pop	{r7, pc}

08031184 <mg_putchar_iobuf_static>:

static void mg_putchar_iobuf_static(char ch, void *param) {
 8031184:	b580      	push	{r7, lr}
 8031186:	b082      	sub	sp, #8
 8031188:	af00      	add	r7, sp, #0
 803118a:	4603      	mov	r3, r0
 803118c:	6039      	str	r1, [r7, #0]
 803118e:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, false);
 8031190:	79fb      	ldrb	r3, [r7, #7]
 8031192:	2200      	movs	r2, #0
 8031194:	6839      	ldr	r1, [r7, #0]
 8031196:	4618      	mov	r0, r3
 8031198:	f7ff ffac 	bl	80310f4 <mg_pfn_iobuf_private>
}
 803119c:	bf00      	nop
 803119e:	3708      	adds	r7, #8
 80311a0:	46bd      	mov	sp, r7
 80311a2:	bd80      	pop	{r7, pc}

080311a4 <mg_pfn_iobuf>:

void mg_pfn_iobuf(char ch, void *param) {
 80311a4:	b580      	push	{r7, lr}
 80311a6:	b082      	sub	sp, #8
 80311a8:	af00      	add	r7, sp, #0
 80311aa:	4603      	mov	r3, r0
 80311ac:	6039      	str	r1, [r7, #0]
 80311ae:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, true);
 80311b0:	79fb      	ldrb	r3, [r7, #7]
 80311b2:	2201      	movs	r2, #1
 80311b4:	6839      	ldr	r1, [r7, #0]
 80311b6:	4618      	mov	r0, r3
 80311b8:	f7ff ff9c 	bl	80310f4 <mg_pfn_iobuf_private>
}
 80311bc:	bf00      	nop
 80311be:	3708      	adds	r7, #8
 80311c0:	46bd      	mov	sp, r7
 80311c2:	bd80      	pop	{r7, pc}

080311c4 <mg_vsnprintf>:

size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {
 80311c4:	b580      	push	{r7, lr}
 80311c6:	b08a      	sub	sp, #40	@ 0x28
 80311c8:	af00      	add	r7, sp, #0
 80311ca:	60f8      	str	r0, [r7, #12]
 80311cc:	60b9      	str	r1, [r7, #8]
 80311ce:	607a      	str	r2, [r7, #4]
 80311d0:	603b      	str	r3, [r7, #0]
  struct mg_iobuf io = {(uint8_t *) buf, len, 0, 0};
 80311d2:	68fb      	ldr	r3, [r7, #12]
 80311d4:	617b      	str	r3, [r7, #20]
 80311d6:	68bb      	ldr	r3, [r7, #8]
 80311d8:	61bb      	str	r3, [r7, #24]
 80311da:	2300      	movs	r3, #0
 80311dc:	61fb      	str	r3, [r7, #28]
 80311de:	2300      	movs	r3, #0
 80311e0:	623b      	str	r3, [r7, #32]
  size_t n = mg_vxprintf(mg_putchar_iobuf_static, &io, fmt, ap);
 80311e2:	f107 0114 	add.w	r1, r7, #20
 80311e6:	683b      	ldr	r3, [r7, #0]
 80311e8:	687a      	ldr	r2, [r7, #4]
 80311ea:	4809      	ldr	r0, [pc, #36]	@ (8031210 <mg_vsnprintf+0x4c>)
 80311ec:	f7f5 f942 	bl	8026474 <mg_vxprintf>
 80311f0:	6278      	str	r0, [r7, #36]	@ 0x24
  if (n < len) buf[n] = '\0';
 80311f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80311f4:	68bb      	ldr	r3, [r7, #8]
 80311f6:	429a      	cmp	r2, r3
 80311f8:	d204      	bcs.n	8031204 <mg_vsnprintf+0x40>
 80311fa:	68fa      	ldr	r2, [r7, #12]
 80311fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80311fe:	4413      	add	r3, r2
 8031200:	2200      	movs	r2, #0
 8031202:	701a      	strb	r2, [r3, #0]
  return n;
 8031204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8031206:	4618      	mov	r0, r3
 8031208:	3728      	adds	r7, #40	@ 0x28
 803120a:	46bd      	mov	sp, r7
 803120c:	bd80      	pop	{r7, pc}
 803120e:	bf00      	nop
 8031210:	08031185 	.word	0x08031185

08031214 <mg_snprintf>:

size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {
 8031214:	b40c      	push	{r2, r3}
 8031216:	b580      	push	{r7, lr}
 8031218:	b084      	sub	sp, #16
 803121a:	af00      	add	r7, sp, #0
 803121c:	6078      	str	r0, [r7, #4]
 803121e:	6039      	str	r1, [r7, #0]
  va_list ap;
  size_t n;
  va_start(ap, fmt);
 8031220:	f107 031c 	add.w	r3, r7, #28
 8031224:	60bb      	str	r3, [r7, #8]
  n = mg_vsnprintf(buf, len, fmt, &ap);
 8031226:	f107 0308 	add.w	r3, r7, #8
 803122a:	69ba      	ldr	r2, [r7, #24]
 803122c:	6839      	ldr	r1, [r7, #0]
 803122e:	6878      	ldr	r0, [r7, #4]
 8031230:	f7ff ffc8 	bl	80311c4 <mg_vsnprintf>
 8031234:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return n;
 8031236:	68fb      	ldr	r3, [r7, #12]
}
 8031238:	4618      	mov	r0, r3
 803123a:	3710      	adds	r7, #16
 803123c:	46bd      	mov	sp, r7
 803123e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8031242:	b002      	add	sp, #8
 8031244:	4770      	bx	lr
	...

08031248 <mg_vmprintf>:

char *mg_vmprintf(const char *fmt, va_list *ap) {
 8031248:	b580      	push	{r7, lr}
 803124a:	b086      	sub	sp, #24
 803124c:	af00      	add	r7, sp, #0
 803124e:	6078      	str	r0, [r7, #4]
 8031250:	6039      	str	r1, [r7, #0]
  struct mg_iobuf io = {0, 0, 0, 256};
 8031252:	2300      	movs	r3, #0
 8031254:	60bb      	str	r3, [r7, #8]
 8031256:	2300      	movs	r3, #0
 8031258:	60fb      	str	r3, [r7, #12]
 803125a:	2300      	movs	r3, #0
 803125c:	613b      	str	r3, [r7, #16]
 803125e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8031262:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &io, fmt, ap);
 8031264:	f107 0108 	add.w	r1, r7, #8
 8031268:	683b      	ldr	r3, [r7, #0]
 803126a:	687a      	ldr	r2, [r7, #4]
 803126c:	4803      	ldr	r0, [pc, #12]	@ (803127c <mg_vmprintf+0x34>)
 803126e:	f7f5 f901 	bl	8026474 <mg_vxprintf>
  return (char *) io.buf;
 8031272:	68bb      	ldr	r3, [r7, #8]
}
 8031274:	4618      	mov	r0, r3
 8031276:	3718      	adds	r7, #24
 8031278:	46bd      	mov	sp, r7
 803127a:	bd80      	pop	{r7, pc}
 803127c:	080311a5 	.word	0x080311a5

08031280 <mg_mprintf>:

char *mg_mprintf(const char *fmt, ...) {
 8031280:	b40f      	push	{r0, r1, r2, r3}
 8031282:	b580      	push	{r7, lr}
 8031284:	b082      	sub	sp, #8
 8031286:	af00      	add	r7, sp, #0
  char *s;
  va_list ap;
  va_start(ap, fmt);
 8031288:	f107 0314 	add.w	r3, r7, #20
 803128c:	603b      	str	r3, [r7, #0]
  s = mg_vmprintf(fmt, &ap);
 803128e:	463b      	mov	r3, r7
 8031290:	4619      	mov	r1, r3
 8031292:	6938      	ldr	r0, [r7, #16]
 8031294:	f7ff ffd8 	bl	8031248 <mg_vmprintf>
 8031298:	6078      	str	r0, [r7, #4]
  va_end(ap);
  return s;
 803129a:	687b      	ldr	r3, [r7, #4]
}
 803129c:	4618      	mov	r0, r3
 803129e:	3708      	adds	r7, #8
 80312a0:	46bd      	mov	sp, r7
 80312a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80312a6:	b004      	add	sp, #16
 80312a8:	4770      	bx	lr

080312aa <mg_pfn_stdout>:

void mg_pfn_stdout(char c, void *param) {
 80312aa:	b580      	push	{r7, lr}
 80312ac:	b082      	sub	sp, #8
 80312ae:	af00      	add	r7, sp, #0
 80312b0:	4603      	mov	r3, r0
 80312b2:	6039      	str	r1, [r7, #0]
 80312b4:	71fb      	strb	r3, [r7, #7]
  putchar(c);
 80312b6:	79fb      	ldrb	r3, [r7, #7]
 80312b8:	4618      	mov	r0, r3
 80312ba:	f003 fff3 	bl	80352a4 <putchar>
  (void) param;
}
 80312be:	bf00      	nop
 80312c0:	3708      	adds	r7, #8
 80312c2:	46bd      	mov	sp, r7
 80312c4:	bd80      	pop	{r7, pc}
	...

080312c8 <print_ip4>:

static size_t print_ip4(void (*out)(char, void *), void *arg, uint8_t *p) {
 80312c8:	b580      	push	{r7, lr}
 80312ca:	b088      	sub	sp, #32
 80312cc:	af04      	add	r7, sp, #16
 80312ce:	60f8      	str	r0, [r7, #12]
 80312d0:	60b9      	str	r1, [r7, #8]
 80312d2:	607a      	str	r2, [r7, #4]
  return mg_xprintf(out, arg, "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
 80312d4:	687b      	ldr	r3, [r7, #4]
 80312d6:	781b      	ldrb	r3, [r3, #0]
 80312d8:	4618      	mov	r0, r3
 80312da:	687b      	ldr	r3, [r7, #4]
 80312dc:	3301      	adds	r3, #1
 80312de:	781b      	ldrb	r3, [r3, #0]
 80312e0:	461a      	mov	r2, r3
 80312e2:	687b      	ldr	r3, [r7, #4]
 80312e4:	3302      	adds	r3, #2
 80312e6:	781b      	ldrb	r3, [r3, #0]
 80312e8:	4619      	mov	r1, r3
 80312ea:	687b      	ldr	r3, [r7, #4]
 80312ec:	3303      	adds	r3, #3
 80312ee:	781b      	ldrb	r3, [r3, #0]
 80312f0:	9302      	str	r3, [sp, #8]
 80312f2:	9101      	str	r1, [sp, #4]
 80312f4:	9200      	str	r2, [sp, #0]
 80312f6:	4603      	mov	r3, r0
 80312f8:	4a04      	ldr	r2, [pc, #16]	@ (803130c <print_ip4+0x44>)
 80312fa:	68b9      	ldr	r1, [r7, #8]
 80312fc:	68f8      	ldr	r0, [r7, #12]
 80312fe:	f7f5 f89e 	bl	802643e <mg_xprintf>
 8031302:	4603      	mov	r3, r0
}
 8031304:	4618      	mov	r0, r3
 8031306:	3710      	adds	r7, #16
 8031308:	46bd      	mov	sp, r7
 803130a:	bd80      	pop	{r7, pc}
 803130c:	08043094 	.word	0x08043094

08031310 <print_ip6>:

static size_t print_ip6(void (*out)(char, void *), void *arg, uint16_t *p) {
 8031310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8031314:	b08e      	sub	sp, #56	@ 0x38
 8031316:	af08      	add	r7, sp, #32
 8031318:	6178      	str	r0, [r7, #20]
 803131a:	6139      	str	r1, [r7, #16]
 803131c:	60fa      	str	r2, [r7, #12]
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 803131e:	68fb      	ldr	r3, [r7, #12]
 8031320:	881b      	ldrh	r3, [r3, #0]
 8031322:	4618      	mov	r0, r3
 8031324:	f001 fc01 	bl	8032b2a <mg_ntohs>
 8031328:	4603      	mov	r3, r0
 803132a:	4698      	mov	r8, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 803132c:	68fb      	ldr	r3, [r7, #12]
 803132e:	3302      	adds	r3, #2
 8031330:	881b      	ldrh	r3, [r3, #0]
 8031332:	4618      	mov	r0, r3
 8031334:	f001 fbf9 	bl	8032b2a <mg_ntohs>
 8031338:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 803133a:	461c      	mov	r4, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 803133c:	68fb      	ldr	r3, [r7, #12]
 803133e:	3304      	adds	r3, #4
 8031340:	881b      	ldrh	r3, [r3, #0]
 8031342:	4618      	mov	r0, r3
 8031344:	f001 fbf1 	bl	8032b2a <mg_ntohs>
 8031348:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 803134a:	461d      	mov	r5, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 803134c:	68fb      	ldr	r3, [r7, #12]
 803134e:	3306      	adds	r3, #6
 8031350:	881b      	ldrh	r3, [r3, #0]
 8031352:	4618      	mov	r0, r3
 8031354:	f001 fbe9 	bl	8032b2a <mg_ntohs>
 8031358:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 803135a:	461e      	mov	r6, r3
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 803135c:	68fb      	ldr	r3, [r7, #12]
 803135e:	3308      	adds	r3, #8
 8031360:	881b      	ldrh	r3, [r3, #0]
 8031362:	4618      	mov	r0, r3
 8031364:	f001 fbe1 	bl	8032b2a <mg_ntohs>
 8031368:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 803136a:	60bb      	str	r3, [r7, #8]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 803136c:	68fb      	ldr	r3, [r7, #12]
 803136e:	330a      	adds	r3, #10
 8031370:	881b      	ldrh	r3, [r3, #0]
 8031372:	4618      	mov	r0, r3
 8031374:	f001 fbd9 	bl	8032b2a <mg_ntohs>
 8031378:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 803137a:	607b      	str	r3, [r7, #4]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 803137c:	68fb      	ldr	r3, [r7, #12]
 803137e:	330c      	adds	r3, #12
 8031380:	881b      	ldrh	r3, [r3, #0]
 8031382:	4618      	mov	r0, r3
 8031384:	f001 fbd1 	bl	8032b2a <mg_ntohs>
 8031388:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 803138a:	603b      	str	r3, [r7, #0]
                    mg_ntohs(p[7]));
 803138c:	68fb      	ldr	r3, [r7, #12]
 803138e:	330e      	adds	r3, #14
 8031390:	881b      	ldrh	r3, [r3, #0]
 8031392:	4618      	mov	r0, r3
 8031394:	f001 fbc9 	bl	8032b2a <mg_ntohs>
 8031398:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 803139a:	9306      	str	r3, [sp, #24]
 803139c:	683a      	ldr	r2, [r7, #0]
 803139e:	9205      	str	r2, [sp, #20]
 80313a0:	687a      	ldr	r2, [r7, #4]
 80313a2:	9204      	str	r2, [sp, #16]
 80313a4:	68bb      	ldr	r3, [r7, #8]
 80313a6:	9303      	str	r3, [sp, #12]
 80313a8:	9602      	str	r6, [sp, #8]
 80313aa:	9501      	str	r5, [sp, #4]
 80313ac:	9400      	str	r4, [sp, #0]
 80313ae:	4643      	mov	r3, r8
 80313b0:	4a05      	ldr	r2, [pc, #20]	@ (80313c8 <print_ip6+0xb8>)
 80313b2:	6939      	ldr	r1, [r7, #16]
 80313b4:	6978      	ldr	r0, [r7, #20]
 80313b6:	f7f5 f842 	bl	802643e <mg_xprintf>
 80313ba:	4603      	mov	r3, r0
}
 80313bc:	4618      	mov	r0, r3
 80313be:	3718      	adds	r7, #24
 80313c0:	46bd      	mov	sp, r7
 80313c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80313c6:	bf00      	nop
 80313c8:	080430a0 	.word	0x080430a0

080313cc <mg_print_ip4>:

size_t mg_print_ip4(void (*out)(char, void *), void *arg, va_list *ap) {
 80313cc:	b580      	push	{r7, lr}
 80313ce:	b086      	sub	sp, #24
 80313d0:	af00      	add	r7, sp, #0
 80313d2:	60f8      	str	r0, [r7, #12]
 80313d4:	60b9      	str	r1, [r7, #8]
 80313d6:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 80313d8:	687b      	ldr	r3, [r7, #4]
 80313da:	681b      	ldr	r3, [r3, #0]
 80313dc:	1d19      	adds	r1, r3, #4
 80313de:	687a      	ldr	r2, [r7, #4]
 80313e0:	6011      	str	r1, [r2, #0]
 80313e2:	681b      	ldr	r3, [r3, #0]
 80313e4:	617b      	str	r3, [r7, #20]
  return print_ip4(out, arg, p);
 80313e6:	697a      	ldr	r2, [r7, #20]
 80313e8:	68b9      	ldr	r1, [r7, #8]
 80313ea:	68f8      	ldr	r0, [r7, #12]
 80313ec:	f7ff ff6c 	bl	80312c8 <print_ip4>
 80313f0:	4603      	mov	r3, r0
}
 80313f2:	4618      	mov	r0, r3
 80313f4:	3718      	adds	r7, #24
 80313f6:	46bd      	mov	sp, r7
 80313f8:	bd80      	pop	{r7, pc}

080313fa <mg_print_ip>:
size_t mg_print_ip6(void (*out)(char, void *), void *arg, va_list *ap) {
  uint16_t *p = va_arg(*ap, uint16_t *);
  return print_ip6(out, arg, p);
}

size_t mg_print_ip(void (*out)(char, void *), void *arg, va_list *ap) {
 80313fa:	b580      	push	{r7, lr}
 80313fc:	b086      	sub	sp, #24
 80313fe:	af00      	add	r7, sp, #0
 8031400:	60f8      	str	r0, [r7, #12]
 8031402:	60b9      	str	r1, [r7, #8]
 8031404:	607a      	str	r2, [r7, #4]
  struct mg_addr *addr = va_arg(*ap, struct mg_addr *);
 8031406:	687b      	ldr	r3, [r7, #4]
 8031408:	681b      	ldr	r3, [r3, #0]
 803140a:	1d19      	adds	r1, r3, #4
 803140c:	687a      	ldr	r2, [r7, #4]
 803140e:	6011      	str	r1, [r2, #0]
 8031410:	681b      	ldr	r3, [r3, #0]
 8031412:	617b      	str	r3, [r7, #20]
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 8031414:	697b      	ldr	r3, [r7, #20]
 8031416:	7cdb      	ldrb	r3, [r3, #19]
 8031418:	2b00      	cmp	r3, #0
 803141a:	d007      	beq.n	803142c <mg_print_ip+0x32>
 803141c:	697b      	ldr	r3, [r7, #20]
 803141e:	461a      	mov	r2, r3
 8031420:	68b9      	ldr	r1, [r7, #8]
 8031422:	68f8      	ldr	r0, [r7, #12]
 8031424:	f7ff ff74 	bl	8031310 <print_ip6>
 8031428:	4603      	mov	r3, r0
 803142a:	e006      	b.n	803143a <mg_print_ip+0x40>
  return print_ip4(out, arg, (uint8_t *) &addr->ip);
 803142c:	697b      	ldr	r3, [r7, #20]
 803142e:	461a      	mov	r2, r3
 8031430:	68b9      	ldr	r1, [r7, #8]
 8031432:	68f8      	ldr	r0, [r7, #12]
 8031434:	f7ff ff48 	bl	80312c8 <print_ip4>
 8031438:	4603      	mov	r3, r0
}
 803143a:	4618      	mov	r0, r3
 803143c:	3718      	adds	r7, #24
 803143e:	46bd      	mov	sp, r7
 8031440:	bd80      	pop	{r7, pc}
	...

08031444 <mg_print_ip_port>:

size_t mg_print_ip_port(void (*out)(char, void *), void *arg, va_list *ap) {
 8031444:	b580      	push	{r7, lr}
 8031446:	b088      	sub	sp, #32
 8031448:	af02      	add	r7, sp, #8
 803144a:	60f8      	str	r0, [r7, #12]
 803144c:	60b9      	str	r1, [r7, #8]
 803144e:	607a      	str	r2, [r7, #4]
  struct mg_addr *a = va_arg(*ap, struct mg_addr *);
 8031450:	687b      	ldr	r3, [r7, #4]
 8031452:	681b      	ldr	r3, [r3, #0]
 8031454:	1d19      	adds	r1, r3, #4
 8031456:	687a      	ldr	r2, [r7, #4]
 8031458:	6011      	str	r1, [r2, #0]
 803145a:	681b      	ldr	r3, [r3, #0]
 803145c:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%M:%hu", mg_print_ip, a, mg_ntohs(a->port));
 803145e:	697b      	ldr	r3, [r7, #20]
 8031460:	8a1b      	ldrh	r3, [r3, #16]
 8031462:	4618      	mov	r0, r3
 8031464:	f001 fb61 	bl	8032b2a <mg_ntohs>
 8031468:	4603      	mov	r3, r0
 803146a:	9301      	str	r3, [sp, #4]
 803146c:	697b      	ldr	r3, [r7, #20]
 803146e:	9300      	str	r3, [sp, #0]
 8031470:	4b05      	ldr	r3, [pc, #20]	@ (8031488 <mg_print_ip_port+0x44>)
 8031472:	4a06      	ldr	r2, [pc, #24]	@ (803148c <mg_print_ip_port+0x48>)
 8031474:	68b9      	ldr	r1, [r7, #8]
 8031476:	68f8      	ldr	r0, [r7, #12]
 8031478:	f7f4 ffe1 	bl	802643e <mg_xprintf>
 803147c:	4603      	mov	r3, r0
}
 803147e:	4618      	mov	r0, r3
 8031480:	3718      	adds	r7, #24
 8031482:	46bd      	mov	sp, r7
 8031484:	bd80      	pop	{r7, pc}
 8031486:	bf00      	nop
 8031488:	080313fb 	.word	0x080313fb
 803148c:	080430bc 	.word	0x080430bc

08031490 <mg_print_mac>:

size_t mg_print_mac(void (*out)(char, void *), void *arg, va_list *ap) {
 8031490:	b5b0      	push	{r4, r5, r7, lr}
 8031492:	b08c      	sub	sp, #48	@ 0x30
 8031494:	af06      	add	r7, sp, #24
 8031496:	60f8      	str	r0, [r7, #12]
 8031498:	60b9      	str	r1, [r7, #8]
 803149a:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 803149c:	687b      	ldr	r3, [r7, #4]
 803149e:	681b      	ldr	r3, [r3, #0]
 80314a0:	1d19      	adds	r1, r3, #4
 80314a2:	687a      	ldr	r2, [r7, #4]
 80314a4:	6011      	str	r1, [r2, #0]
 80314a6:	681b      	ldr	r3, [r3, #0]
 80314a8:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 80314aa:	697b      	ldr	r3, [r7, #20]
 80314ac:	781b      	ldrb	r3, [r3, #0]
 80314ae:	461d      	mov	r5, r3
 80314b0:	697b      	ldr	r3, [r7, #20]
 80314b2:	3301      	adds	r3, #1
 80314b4:	781b      	ldrb	r3, [r3, #0]
 80314b6:	461a      	mov	r2, r3
 80314b8:	697b      	ldr	r3, [r7, #20]
 80314ba:	3302      	adds	r3, #2
 80314bc:	781b      	ldrb	r3, [r3, #0]
 80314be:	4619      	mov	r1, r3
                    p[3], p[4], p[5]);
 80314c0:	697b      	ldr	r3, [r7, #20]
 80314c2:	3303      	adds	r3, #3
 80314c4:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 80314c6:	4618      	mov	r0, r3
                    p[3], p[4], p[5]);
 80314c8:	697b      	ldr	r3, [r7, #20]
 80314ca:	3304      	adds	r3, #4
 80314cc:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 80314ce:	461c      	mov	r4, r3
                    p[3], p[4], p[5]);
 80314d0:	697b      	ldr	r3, [r7, #20]
 80314d2:	3305      	adds	r3, #5
 80314d4:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 80314d6:	9304      	str	r3, [sp, #16]
 80314d8:	9403      	str	r4, [sp, #12]
 80314da:	9002      	str	r0, [sp, #8]
 80314dc:	9101      	str	r1, [sp, #4]
 80314de:	9200      	str	r2, [sp, #0]
 80314e0:	462b      	mov	r3, r5
 80314e2:	4a05      	ldr	r2, [pc, #20]	@ (80314f8 <mg_print_mac+0x68>)
 80314e4:	68b9      	ldr	r1, [r7, #8]
 80314e6:	68f8      	ldr	r0, [r7, #12]
 80314e8:	f7f4 ffa9 	bl	802643e <mg_xprintf>
 80314ec:	4603      	mov	r3, r0
}
 80314ee:	4618      	mov	r0, r3
 80314f0:	3718      	adds	r7, #24
 80314f2:	46bd      	mov	sp, r7
 80314f4:	bdb0      	pop	{r4, r5, r7, pc}
 80314f6:	bf00      	nop
 80314f8:	080430c4 	.word	0x080430c4

080314fc <mg_print_hex>:
    n += j;
  }
  return n;
}

size_t mg_print_hex(void (*out)(char, void *), void *arg, va_list *ap) {
 80314fc:	b580      	push	{r7, lr}
 80314fe:	b088      	sub	sp, #32
 8031500:	af00      	add	r7, sp, #0
 8031502:	60f8      	str	r0, [r7, #12]
 8031504:	60b9      	str	r1, [r7, #8]
 8031506:	607a      	str	r2, [r7, #4]
  size_t bl = (size_t) va_arg(*ap, int);
 8031508:	687b      	ldr	r3, [r7, #4]
 803150a:	681b      	ldr	r3, [r3, #0]
 803150c:	1d19      	adds	r1, r3, #4
 803150e:	687a      	ldr	r2, [r7, #4]
 8031510:	6011      	str	r1, [r2, #0]
 8031512:	681b      	ldr	r3, [r3, #0]
 8031514:	61bb      	str	r3, [r7, #24]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8031516:	687b      	ldr	r3, [r7, #4]
 8031518:	681b      	ldr	r3, [r3, #0]
 803151a:	1d19      	adds	r1, r3, #4
 803151c:	687a      	ldr	r2, [r7, #4]
 803151e:	6011      	str	r1, [r2, #0]
 8031520:	681b      	ldr	r3, [r3, #0]
 8031522:	617b      	str	r3, [r7, #20]
  const char *hex = "0123456789abcdef";
 8031524:	4b16      	ldr	r3, [pc, #88]	@ (8031580 <mg_print_hex+0x84>)
 8031526:	613b      	str	r3, [r7, #16]
  size_t j;
  for (j = 0; j < bl; j++) {
 8031528:	2300      	movs	r3, #0
 803152a:	61fb      	str	r3, [r7, #28]
 803152c:	e01e      	b.n	803156c <mg_print_hex+0x70>
    out(hex[(p[j] >> 4) & 0x0F], arg);
 803152e:	697a      	ldr	r2, [r7, #20]
 8031530:	69fb      	ldr	r3, [r7, #28]
 8031532:	4413      	add	r3, r2
 8031534:	781b      	ldrb	r3, [r3, #0]
 8031536:	091b      	lsrs	r3, r3, #4
 8031538:	b2db      	uxtb	r3, r3
 803153a:	f003 030f 	and.w	r3, r3, #15
 803153e:	693a      	ldr	r2, [r7, #16]
 8031540:	4413      	add	r3, r2
 8031542:	781a      	ldrb	r2, [r3, #0]
 8031544:	68fb      	ldr	r3, [r7, #12]
 8031546:	68b9      	ldr	r1, [r7, #8]
 8031548:	4610      	mov	r0, r2
 803154a:	4798      	blx	r3
    out(hex[p[j] & 0x0F], arg);
 803154c:	697a      	ldr	r2, [r7, #20]
 803154e:	69fb      	ldr	r3, [r7, #28]
 8031550:	4413      	add	r3, r2
 8031552:	781b      	ldrb	r3, [r3, #0]
 8031554:	f003 030f 	and.w	r3, r3, #15
 8031558:	693a      	ldr	r2, [r7, #16]
 803155a:	4413      	add	r3, r2
 803155c:	781a      	ldrb	r2, [r3, #0]
 803155e:	68fb      	ldr	r3, [r7, #12]
 8031560:	68b9      	ldr	r1, [r7, #8]
 8031562:	4610      	mov	r0, r2
 8031564:	4798      	blx	r3
  for (j = 0; j < bl; j++) {
 8031566:	69fb      	ldr	r3, [r7, #28]
 8031568:	3301      	adds	r3, #1
 803156a:	61fb      	str	r3, [r7, #28]
 803156c:	69fa      	ldr	r2, [r7, #28]
 803156e:	69bb      	ldr	r3, [r7, #24]
 8031570:	429a      	cmp	r2, r3
 8031572:	d3dc      	bcc.n	803152e <mg_print_hex+0x32>
  }
  return 2 * bl;
 8031574:	69bb      	ldr	r3, [r7, #24]
 8031576:	005b      	lsls	r3, r3, #1
}
 8031578:	4618      	mov	r0, r3
 803157a:	3720      	adds	r7, #32
 803157c:	46bd      	mov	sp, r7
 803157e:	bd80      	pop	{r7, pc}
 8031580:	080416ec 	.word	0x080416ec

08031584 <mg_queue_read_len>:
  q->size = size;
  q->buf = buf;
  q->head = q->tail = 0;
}

static size_t mg_queue_read_len(struct mg_queue *q) {
 8031584:	b480      	push	{r7}
 8031586:	b085      	sub	sp, #20
 8031588:	af00      	add	r7, sp, #0
 803158a:	6078      	str	r0, [r7, #4]
  uint32_t n = 0;
 803158c:	2300      	movs	r3, #0
 803158e:	60fb      	str	r3, [r7, #12]
  MG_MEMORY_BARRIER();
 8031590:	f3bf 8f5b 	dmb	ish
  memcpy(&n, q->buf + q->tail, sizeof(n));
 8031594:	687b      	ldr	r3, [r7, #4]
 8031596:	681a      	ldr	r2, [r3, #0]
 8031598:	687b      	ldr	r3, [r7, #4]
 803159a:	689b      	ldr	r3, [r3, #8]
 803159c:	4413      	add	r3, r2
 803159e:	681b      	ldr	r3, [r3, #0]
 80315a0:	60fb      	str	r3, [r7, #12]
  assert(q->tail + n + sizeof(n) <= q->size);
  return n;
 80315a2:	68fb      	ldr	r3, [r7, #12]
}
 80315a4:	4618      	mov	r0, r3
 80315a6:	3714      	adds	r7, #20
 80315a8:	46bd      	mov	sp, r7
 80315aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80315ae:	4770      	bx	lr

080315b0 <mg_queue_next>:
  if (q->head + hs + len < q->tail) space = q->tail - q->head - hs;
  if (buf != NULL) *buf = q->buf + q->head + sizeof(uint32_t);
  return space;
}

size_t mg_queue_next(struct mg_queue *q, char **buf) {
 80315b0:	b580      	push	{r7, lr}
 80315b2:	b084      	sub	sp, #16
 80315b4:	af00      	add	r7, sp, #0
 80315b6:	6078      	str	r0, [r7, #4]
 80315b8:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 80315ba:	2300      	movs	r3, #0
 80315bc:	60fb      	str	r3, [r7, #12]
  if (q->tail != q->head) {
 80315be:	687b      	ldr	r3, [r7, #4]
 80315c0:	689a      	ldr	r2, [r3, #8]
 80315c2:	687b      	ldr	r3, [r7, #4]
 80315c4:	68db      	ldr	r3, [r3, #12]
 80315c6:	429a      	cmp	r2, r3
 80315c8:	d013      	beq.n	80315f2 <mg_queue_next+0x42>
    len = mg_queue_read_len(q);
 80315ca:	6878      	ldr	r0, [r7, #4]
 80315cc:	f7ff ffda 	bl	8031584 <mg_queue_read_len>
 80315d0:	60f8      	str	r0, [r7, #12]
    if (len == 0) {  // Zero (head wrapped) ?
 80315d2:	68fb      	ldr	r3, [r7, #12]
 80315d4:	2b00      	cmp	r3, #0
 80315d6:	d10c      	bne.n	80315f2 <mg_queue_next+0x42>
      q->tail = 0;   // Reset tail to the start
 80315d8:	687b      	ldr	r3, [r7, #4]
 80315da:	2200      	movs	r2, #0
 80315dc:	609a      	str	r2, [r3, #8]
      if (q->head > q->tail) len = mg_queue_read_len(q);  // Read again
 80315de:	687b      	ldr	r3, [r7, #4]
 80315e0:	68da      	ldr	r2, [r3, #12]
 80315e2:	687b      	ldr	r3, [r7, #4]
 80315e4:	689b      	ldr	r3, [r3, #8]
 80315e6:	429a      	cmp	r2, r3
 80315e8:	d903      	bls.n	80315f2 <mg_queue_next+0x42>
 80315ea:	6878      	ldr	r0, [r7, #4]
 80315ec:	f7ff ffca 	bl	8031584 <mg_queue_read_len>
 80315f0:	60f8      	str	r0, [r7, #12]
    }
  }
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
 80315f2:	683b      	ldr	r3, [r7, #0]
 80315f4:	2b00      	cmp	r3, #0
 80315f6:	d007      	beq.n	8031608 <mg_queue_next+0x58>
 80315f8:	687b      	ldr	r3, [r7, #4]
 80315fa:	681a      	ldr	r2, [r3, #0]
 80315fc:	687b      	ldr	r3, [r7, #4]
 80315fe:	689b      	ldr	r3, [r3, #8]
 8031600:	3304      	adds	r3, #4
 8031602:	441a      	add	r2, r3
 8031604:	683b      	ldr	r3, [r7, #0]
 8031606:	601a      	str	r2, [r3, #0]
  assert(q->tail + len <= q->size);
  return len;
 8031608:	68fb      	ldr	r3, [r7, #12]
}
 803160a:	4618      	mov	r0, r3
 803160c:	3710      	adds	r7, #16
 803160e:	46bd      	mov	sp, r7
 8031610:	bd80      	pop	{r7, pc}

08031612 <mg_queue_del>:
  mg_queue_write_len(q, len);
  assert(q->head + sizeof(uint32_t) * 2 + len <= q->size);
  q->head += len + sizeof(uint32_t);
}

void mg_queue_del(struct mg_queue *q, size_t len) {
 8031612:	b480      	push	{r7}
 8031614:	b083      	sub	sp, #12
 8031616:	af00      	add	r7, sp, #0
 8031618:	6078      	str	r0, [r7, #4]
 803161a:	6039      	str	r1, [r7, #0]
  q->tail += len + sizeof(uint32_t);
 803161c:	687b      	ldr	r3, [r7, #4]
 803161e:	689a      	ldr	r2, [r3, #8]
 8031620:	683b      	ldr	r3, [r7, #0]
 8031622:	4413      	add	r3, r2
 8031624:	1d1a      	adds	r2, r3, #4
 8031626:	687b      	ldr	r3, [r7, #4]
 8031628:	609a      	str	r2, [r3, #8]
  assert(q->tail + sizeof(uint32_t) <= q->size);
}
 803162a:	bf00      	nop
 803162c:	370c      	adds	r7, #12
 803162e:	46bd      	mov	sp, r7
 8031630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031634:	4770      	bx	lr
	...

08031638 <mg_now>:
#define SNTP_TIME_OFFSET 2208988800U  // (1970 - 1900) in seconds
#define SNTP_MAX_FRAC 4294967295.0    // 2 ** 32 - 1

static uint64_t s_boot_timestamp = 0;  // Updated by SNTP

uint64_t mg_now(void) {
 8031638:	b5b0      	push	{r4, r5, r7, lr}
 803163a:	af00      	add	r7, sp, #0
  return mg_millis() + s_boot_timestamp;
 803163c:	f001 fb06 	bl	8032c4c <mg_millis>
 8031640:	4b05      	ldr	r3, [pc, #20]	@ (8031658 <mg_now+0x20>)
 8031642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031646:	1884      	adds	r4, r0, r2
 8031648:	eb41 0503 	adc.w	r5, r1, r3
 803164c:	4622      	mov	r2, r4
 803164e:	462b      	mov	r3, r5
}
 8031650:	4610      	mov	r0, r2
 8031652:	4619      	mov	r1, r3
 8031654:	bdb0      	pop	{r4, r5, r7, pc}
 8031656:	bf00      	nop
 8031658:	20018170 	.word	0x20018170
 803165c:	00000000 	.word	0x00000000

08031660 <gettimestamp>:

static int64_t gettimestamp(const uint32_t *data) {
 8031660:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8031664:	b086      	sub	sp, #24
 8031666:	af00      	add	r7, sp, #0
 8031668:	60f8      	str	r0, [r7, #12]
  uint32_t sec = mg_ntohl(data[0]), frac = mg_ntohl(data[1]);
 803166a:	68fb      	ldr	r3, [r7, #12]
 803166c:	681b      	ldr	r3, [r3, #0]
 803166e:	4618      	mov	r0, r3
 8031670:	f001 fa42 	bl	8032af8 <mg_ntohl>
 8031674:	6178      	str	r0, [r7, #20]
 8031676:	68fb      	ldr	r3, [r7, #12]
 8031678:	3304      	adds	r3, #4
 803167a:	681b      	ldr	r3, [r3, #0]
 803167c:	4618      	mov	r0, r3
 803167e:	f001 fa3b 	bl	8032af8 <mg_ntohl>
 8031682:	6138      	str	r0, [r7, #16]
  if (sec) sec -= SNTP_TIME_OFFSET;
 8031684:	697b      	ldr	r3, [r7, #20]
 8031686:	2b00      	cmp	r3, #0
 8031688:	d003      	beq.n	8031692 <gettimestamp+0x32>
 803168a:	697a      	ldr	r2, [r7, #20]
 803168c:	4b2e      	ldr	r3, [pc, #184]	@ (8031748 <gettimestamp+0xe8>)
 803168e:	4413      	add	r3, r2
 8031690:	617b      	str	r3, [r7, #20]
  return ((int64_t) sec) * 1000 + (int64_t) (frac / SNTP_MAX_FRAC * 1000.0);
 8031692:	697b      	ldr	r3, [r7, #20]
 8031694:	2200      	movs	r2, #0
 8031696:	4698      	mov	r8, r3
 8031698:	4691      	mov	r9, r2
 803169a:	4642      	mov	r2, r8
 803169c:	464b      	mov	r3, r9
 803169e:	f04f 0000 	mov.w	r0, #0
 80316a2:	f04f 0100 	mov.w	r1, #0
 80316a6:	0159      	lsls	r1, r3, #5
 80316a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80316ac:	0150      	lsls	r0, r2, #5
 80316ae:	4602      	mov	r2, r0
 80316b0:	460b      	mov	r3, r1
 80316b2:	ebb2 0408 	subs.w	r4, r2, r8
 80316b6:	eb63 0509 	sbc.w	r5, r3, r9
 80316ba:	f04f 0200 	mov.w	r2, #0
 80316be:	f04f 0300 	mov.w	r3, #0
 80316c2:	00ab      	lsls	r3, r5, #2
 80316c4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80316c8:	00a2      	lsls	r2, r4, #2
 80316ca:	4614      	mov	r4, r2
 80316cc:	461d      	mov	r5, r3
 80316ce:	eb14 0a08 	adds.w	sl, r4, r8
 80316d2:	eb45 0b09 	adc.w	fp, r5, r9
 80316d6:	f04f 0200 	mov.w	r2, #0
 80316da:	f04f 0300 	mov.w	r3, #0
 80316de:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80316e2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80316e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80316ea:	4692      	mov	sl, r2
 80316ec:	469b      	mov	fp, r3
 80316ee:	4654      	mov	r4, sl
 80316f0:	465d      	mov	r5, fp
 80316f2:	6938      	ldr	r0, [r7, #16]
 80316f4:	f7de ff1e 	bl	8010534 <__aeabi_ui2d>
 80316f8:	a311      	add	r3, pc, #68	@ (adr r3, 8031740 <gettimestamp+0xe0>)
 80316fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80316fe:	f7df f8bd 	bl	801087c <__aeabi_ddiv>
 8031702:	4602      	mov	r2, r0
 8031704:	460b      	mov	r3, r1
 8031706:	4610      	mov	r0, r2
 8031708:	4619      	mov	r1, r3
 803170a:	f04f 0200 	mov.w	r2, #0
 803170e:	4b0f      	ldr	r3, [pc, #60]	@ (803174c <gettimestamp+0xec>)
 8031710:	f7de ff8a 	bl	8010628 <__aeabi_dmul>
 8031714:	4602      	mov	r2, r0
 8031716:	460b      	mov	r3, r1
 8031718:	4610      	mov	r0, r2
 803171a:	4619      	mov	r1, r3
 803171c:	f7df fb48 	bl	8010db0 <__aeabi_d2lz>
 8031720:	4602      	mov	r2, r0
 8031722:	460b      	mov	r3, r1
 8031724:	18a1      	adds	r1, r4, r2
 8031726:	6039      	str	r1, [r7, #0]
 8031728:	eb45 0303 	adc.w	r3, r5, r3
 803172c:	607b      	str	r3, [r7, #4]
 803172e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8031732:	4610      	mov	r0, r2
 8031734:	4619      	mov	r1, r3
 8031736:	3718      	adds	r7, #24
 8031738:	46bd      	mov	sp, r7
 803173a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 803173e:	bf00      	nop
 8031740:	ffe00000 	.word	0xffe00000
 8031744:	41efffff 	.word	0x41efffff
 8031748:	7c558180 	.word	0x7c558180
 803174c:	408f4000 	.word	0x408f4000

08031750 <mg_sntp_parse>:

int64_t mg_sntp_parse(const unsigned char *buf, size_t len) {
 8031750:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8031754:	b098      	sub	sp, #96	@ 0x60
 8031756:	af00      	add	r7, sp, #0
 8031758:	6278      	str	r0, [r7, #36]	@ 0x24
 803175a:	6239      	str	r1, [r7, #32]
  int64_t epoch_milliseconds = -1;
 803175c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8031760:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8031764:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
  int mode = len > 0 ? buf[0] & 7 : 0;
 8031768:	6a3b      	ldr	r3, [r7, #32]
 803176a:	2b00      	cmp	r3, #0
 803176c:	d004      	beq.n	8031778 <mg_sntp_parse+0x28>
 803176e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8031770:	781b      	ldrb	r3, [r3, #0]
 8031772:	f003 0307 	and.w	r3, r3, #7
 8031776:	e000      	b.n	803177a <mg_sntp_parse+0x2a>
 8031778:	2300      	movs	r3, #0
 803177a:	657b      	str	r3, [r7, #84]	@ 0x54
  int version = len > 0 ? (buf[0] >> 3) & 7 : 0;
 803177c:	6a3b      	ldr	r3, [r7, #32]
 803177e:	2b00      	cmp	r3, #0
 8031780:	d006      	beq.n	8031790 <mg_sntp_parse+0x40>
 8031782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8031784:	781b      	ldrb	r3, [r3, #0]
 8031786:	08db      	lsrs	r3, r3, #3
 8031788:	b2db      	uxtb	r3, r3
 803178a:	f003 0307 	and.w	r3, r3, #7
 803178e:	e000      	b.n	8031792 <mg_sntp_parse+0x42>
 8031790:	2300      	movs	r3, #0
 8031792:	653b      	str	r3, [r7, #80]	@ 0x50
  if (len < 48) {
 8031794:	6a3b      	ldr	r3, [r7, #32]
 8031796:	2b2f      	cmp	r3, #47	@ 0x2f
 8031798:	d810      	bhi.n	80317bc <mg_sntp_parse+0x6c>
    MG_ERROR(("%s", "corrupt packet"));
 803179a:	4b60      	ldr	r3, [pc, #384]	@ (803191c <mg_sntp_parse+0x1cc>)
 803179c:	681b      	ldr	r3, [r3, #0]
 803179e:	2b00      	cmp	r3, #0
 80317a0:	f340 80b4 	ble.w	803190c <mg_sntp_parse+0x1bc>
 80317a4:	4b5e      	ldr	r3, [pc, #376]	@ (8031920 <mg_sntp_parse+0x1d0>)
 80317a6:	f641 420e 	movw	r2, #7182	@ 0x1c0e
 80317aa:	495e      	ldr	r1, [pc, #376]	@ (8031924 <mg_sntp_parse+0x1d4>)
 80317ac:	2001      	movs	r0, #1
 80317ae:	f7f9 fd15 	bl	802b1dc <mg_log_prefix>
 80317b2:	495d      	ldr	r1, [pc, #372]	@ (8031928 <mg_sntp_parse+0x1d8>)
 80317b4:	485d      	ldr	r0, [pc, #372]	@ (803192c <mg_sntp_parse+0x1dc>)
 80317b6:	f7f9 fd61 	bl	802b27c <mg_log>
 80317ba:	e0a7      	b.n	803190c <mg_sntp_parse+0x1bc>
  } else if (mode != 4 && mode != 5) {
 80317bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80317be:	2b04      	cmp	r3, #4
 80317c0:	d013      	beq.n	80317ea <mg_sntp_parse+0x9a>
 80317c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80317c4:	2b05      	cmp	r3, #5
 80317c6:	d010      	beq.n	80317ea <mg_sntp_parse+0x9a>
    MG_ERROR(("%s", "not a server reply"));
 80317c8:	4b54      	ldr	r3, [pc, #336]	@ (803191c <mg_sntp_parse+0x1cc>)
 80317ca:	681b      	ldr	r3, [r3, #0]
 80317cc:	2b00      	cmp	r3, #0
 80317ce:	f340 809d 	ble.w	803190c <mg_sntp_parse+0x1bc>
 80317d2:	4b53      	ldr	r3, [pc, #332]	@ (8031920 <mg_sntp_parse+0x1d0>)
 80317d4:	f641 4210 	movw	r2, #7184	@ 0x1c10
 80317d8:	4952      	ldr	r1, [pc, #328]	@ (8031924 <mg_sntp_parse+0x1d4>)
 80317da:	2001      	movs	r0, #1
 80317dc:	f7f9 fcfe 	bl	802b1dc <mg_log_prefix>
 80317e0:	4953      	ldr	r1, [pc, #332]	@ (8031930 <mg_sntp_parse+0x1e0>)
 80317e2:	4852      	ldr	r0, [pc, #328]	@ (803192c <mg_sntp_parse+0x1dc>)
 80317e4:	f7f9 fd4a 	bl	802b27c <mg_log>
 80317e8:	e090      	b.n	803190c <mg_sntp_parse+0x1bc>
  } else if (buf[1] == 0) {
 80317ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80317ec:	3301      	adds	r3, #1
 80317ee:	781b      	ldrb	r3, [r3, #0]
 80317f0:	2b00      	cmp	r3, #0
 80317f2:	d110      	bne.n	8031816 <mg_sntp_parse+0xc6>
    MG_ERROR(("%s", "server sent a kiss of death"));
 80317f4:	4b49      	ldr	r3, [pc, #292]	@ (803191c <mg_sntp_parse+0x1cc>)
 80317f6:	681b      	ldr	r3, [r3, #0]
 80317f8:	2b00      	cmp	r3, #0
 80317fa:	f340 8087 	ble.w	803190c <mg_sntp_parse+0x1bc>
 80317fe:	4b48      	ldr	r3, [pc, #288]	@ (8031920 <mg_sntp_parse+0x1d0>)
 8031800:	f641 4212 	movw	r2, #7186	@ 0x1c12
 8031804:	4947      	ldr	r1, [pc, #284]	@ (8031924 <mg_sntp_parse+0x1d4>)
 8031806:	2001      	movs	r0, #1
 8031808:	f7f9 fce8 	bl	802b1dc <mg_log_prefix>
 803180c:	4949      	ldr	r1, [pc, #292]	@ (8031934 <mg_sntp_parse+0x1e4>)
 803180e:	4847      	ldr	r0, [pc, #284]	@ (803192c <mg_sntp_parse+0x1dc>)
 8031810:	f7f9 fd34 	bl	802b27c <mg_log>
 8031814:	e07a      	b.n	803190c <mg_sntp_parse+0x1bc>
  } else if (version == 4 || version == 3) {
 8031816:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8031818:	2b04      	cmp	r3, #4
 803181a:	d002      	beq.n	8031822 <mg_sntp_parse+0xd2>
 803181c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 803181e:	2b03      	cmp	r3, #3
 8031820:	d165      	bne.n	80318ee <mg_sntp_parse+0x19e>
    // int64_t ref = gettimestamp((uint32_t *) &buf[16]);
    int64_t origin_time = gettimestamp((uint32_t *) &buf[24]);
 8031822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8031824:	3318      	adds	r3, #24
 8031826:	4618      	mov	r0, r3
 8031828:	f7ff ff1a 	bl	8031660 <gettimestamp>
 803182c:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
    int64_t receive_time = gettimestamp((uint32_t *) &buf[32]);
 8031830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8031832:	3320      	adds	r3, #32
 8031834:	4618      	mov	r0, r3
 8031836:	f7ff ff13 	bl	8031660 <gettimestamp>
 803183a:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
    int64_t transmit_time = gettimestamp((uint32_t *) &buf[40]);
 803183e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8031840:	3328      	adds	r3, #40	@ 0x28
 8031842:	4618      	mov	r0, r3
 8031844:	f7ff ff0c 	bl	8031660 <gettimestamp>
 8031848:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
    int64_t now = (int64_t) mg_millis();
 803184c:	f001 f9fe 	bl	8032c4c <mg_millis>
 8031850:	4602      	mov	r2, r0
 8031852:	460b      	mov	r3, r1
 8031854:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    int64_t latency = (now - origin_time) - (transmit_time - receive_time);
 8031858:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 803185c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8031860:	ebb0 0a02 	subs.w	sl, r0, r2
 8031864:	eb61 0b03 	sbc.w	fp, r1, r3
 8031868:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 803186c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8031870:	ebb0 0802 	subs.w	r8, r0, r2
 8031874:	eb61 0903 	sbc.w	r9, r1, r3
 8031878:	ebba 0308 	subs.w	r3, sl, r8
 803187c:	613b      	str	r3, [r7, #16]
 803187e:	eb6b 0309 	sbc.w	r3, fp, r9
 8031882:	617b      	str	r3, [r7, #20]
 8031884:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8031888:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    epoch_milliseconds = transmit_time + latency / 2;
 803188c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8031890:	0fd9      	lsrs	r1, r3, #31
 8031892:	2000      	movs	r0, #0
 8031894:	60b9      	str	r1, [r7, #8]
 8031896:	60f8      	str	r0, [r7, #12]
 8031898:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 803189c:	4641      	mov	r1, r8
 803189e:	188c      	adds	r4, r1, r2
 80318a0:	4649      	mov	r1, r9
 80318a2:	eb43 0101 	adc.w	r1, r3, r1
 80318a6:	460d      	mov	r5, r1
 80318a8:	f04f 0200 	mov.w	r2, #0
 80318ac:	f04f 0300 	mov.w	r3, #0
 80318b0:	0862      	lsrs	r2, r4, #1
 80318b2:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 80318b6:	106b      	asrs	r3, r5, #1
 80318b8:	4610      	mov	r0, r2
 80318ba:	4619      	mov	r1, r3
 80318bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80318c0:	1814      	adds	r4, r2, r0
 80318c2:	603c      	str	r4, [r7, #0]
 80318c4:	414b      	adcs	r3, r1
 80318c6:	607b      	str	r3, [r7, #4]
 80318c8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80318cc:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
    s_boot_timestamp = (uint64_t) (epoch_milliseconds - now);
 80318d0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80318d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80318d8:	1a84      	subs	r4, r0, r2
 80318da:	61bc      	str	r4, [r7, #24]
 80318dc:	eb61 0303 	sbc.w	r3, r1, r3
 80318e0:	61fb      	str	r3, [r7, #28]
 80318e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80318e6:	4914      	ldr	r1, [pc, #80]	@ (8031938 <mg_sntp_parse+0x1e8>)
 80318e8:	e9c1 2300 	strd	r2, r3, [r1]
  } else if (version == 4 || version == 3) {
 80318ec:	e00e      	b.n	803190c <mg_sntp_parse+0x1bc>
  } else {
    MG_ERROR(("unexpected version: %d", version));
 80318ee:	4b0b      	ldr	r3, [pc, #44]	@ (803191c <mg_sntp_parse+0x1cc>)
 80318f0:	681b      	ldr	r3, [r3, #0]
 80318f2:	2b00      	cmp	r3, #0
 80318f4:	dd0a      	ble.n	803190c <mg_sntp_parse+0x1bc>
 80318f6:	4b0a      	ldr	r3, [pc, #40]	@ (8031920 <mg_sntp_parse+0x1d0>)
 80318f8:	f641 421d 	movw	r2, #7197	@ 0x1c1d
 80318fc:	4909      	ldr	r1, [pc, #36]	@ (8031924 <mg_sntp_parse+0x1d4>)
 80318fe:	2001      	movs	r0, #1
 8031900:	f7f9 fc6c 	bl	802b1dc <mg_log_prefix>
 8031904:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8031906:	480d      	ldr	r0, [pc, #52]	@ (803193c <mg_sntp_parse+0x1ec>)
 8031908:	f7f9 fcb8 	bl	802b27c <mg_log>
  }
  return epoch_milliseconds;
 803190c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
}
 8031910:	4610      	mov	r0, r2
 8031912:	4619      	mov	r1, r3
 8031914:	3760      	adds	r7, #96	@ 0x60
 8031916:	46bd      	mov	sp, r7
 8031918:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 803191c:	20000298 	.word	0x20000298
 8031920:	080446f8 	.word	0x080446f8
 8031924:	08041564 	.word	0x08041564
 8031928:	080431d8 	.word	0x080431d8
 803192c:	080416d0 	.word	0x080416d0
 8031930:	080431e8 	.word	0x080431e8
 8031934:	080431fc 	.word	0x080431fc
 8031938:	20018170 	.word	0x20018170
 803193c:	08043218 	.word	0x08043218

08031940 <sntp_cb>:

static void sntp_cb(struct mg_connection *c, int ev, void *ev_data) {
 8031940:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8031944:	b088      	sub	sp, #32
 8031946:	af00      	add	r7, sp, #0
 8031948:	60f8      	str	r0, [r7, #12]
 803194a:	60b9      	str	r1, [r7, #8]
 803194c:	607a      	str	r2, [r7, #4]
  uint64_t *expiration_time = (uint64_t *) c->data;
 803194e:	68fb      	ldr	r3, [r7, #12]
 8031950:	3388      	adds	r3, #136	@ 0x88
 8031952:	61fb      	str	r3, [r7, #28]
  if (ev == MG_EV_OPEN) {
 8031954:	68bb      	ldr	r3, [r7, #8]
 8031956:	2b01      	cmp	r3, #1
 8031958:	d10c      	bne.n	8031974 <sntp_cb+0x34>
    *expiration_time = mg_millis() + 3000;  // Store expiration time in 3s
 803195a:	f001 f977 	bl	8032c4c <mg_millis>
 803195e:	4602      	mov	r2, r0
 8031960:	460b      	mov	r3, r1
 8031962:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8031966:	1854      	adds	r4, r2, r1
 8031968:	f143 0500 	adc.w	r5, r3, #0
 803196c:	69fb      	ldr	r3, [r7, #28]
 803196e:	e9c3 4500 	strd	r4, r5, [r3]
  } else if (ev == MG_EV_POLL) {
    if (mg_millis() > *expiration_time) c->is_closing = 1;
  } else if (ev == MG_EV_CLOSE) {
  }
  (void) ev_data;
}
 8031972:	e05d      	b.n	8031a30 <sntp_cb+0xf0>
  } else if (ev == MG_EV_CONNECT) {
 8031974:	68bb      	ldr	r3, [r7, #8]
 8031976:	2b04      	cmp	r3, #4
 8031978:	d103      	bne.n	8031982 <sntp_cb+0x42>
    mg_sntp_request(c);
 803197a:	68f8      	ldr	r0, [r7, #12]
 803197c:	f000 f868 	bl	8031a50 <mg_sntp_request>
}
 8031980:	e056      	b.n	8031a30 <sntp_cb+0xf0>
  } else if (ev == MG_EV_READ) {
 8031982:	68bb      	ldr	r3, [r7, #8]
 8031984:	2b07      	cmp	r3, #7
 8031986:	d141      	bne.n	8031a0c <sntp_cb+0xcc>
    int64_t milliseconds = mg_sntp_parse(c->recv.buf, c->recv.len);
 8031988:	68fb      	ldr	r3, [r7, #12]
 803198a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 803198c:	68fb      	ldr	r3, [r7, #12]
 803198e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8031990:	4619      	mov	r1, r3
 8031992:	4610      	mov	r0, r2
 8031994:	f7ff fedc 	bl	8031750 <mg_sntp_parse>
 8031998:	4602      	mov	r2, r0
 803199a:	460b      	mov	r3, r1
 803199c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if (milliseconds > 0) {
 80319a0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80319a4:	2a01      	cmp	r2, #1
 80319a6:	f173 0300 	sbcs.w	r3, r3, #0
 80319aa:	db27      	blt.n	80319fc <sntp_cb+0xbc>
      s_boot_timestamp = (uint64_t) milliseconds - mg_millis();
 80319ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80319b0:	4614      	mov	r4, r2
 80319b2:	461d      	mov	r5, r3
 80319b4:	f001 f94a 	bl	8032c4c <mg_millis>
 80319b8:	4602      	mov	r2, r0
 80319ba:	460b      	mov	r3, r1
 80319bc:	ebb4 0802 	subs.w	r8, r4, r2
 80319c0:	eb65 0903 	sbc.w	r9, r5, r3
 80319c4:	4b1d      	ldr	r3, [pc, #116]	@ (8031a3c <sntp_cb+0xfc>)
 80319c6:	e9c3 8900 	strd	r8, r9, [r3]
      mg_call(c, MG_EV_SNTP_TIME, (uint64_t *) &milliseconds);
 80319ca:	f107 0310 	add.w	r3, r7, #16
 80319ce:	461a      	mov	r2, r3
 80319d0:	2112      	movs	r1, #18
 80319d2:	68f8      	ldr	r0, [r7, #12]
 80319d4:	f7f4 f81c 	bl	8025a10 <mg_call>
      MG_DEBUG(("%lu got time: %lld ms from epoch", c->id, milliseconds));
 80319d8:	4b19      	ldr	r3, [pc, #100]	@ (8031a40 <sntp_cb+0x100>)
 80319da:	681b      	ldr	r3, [r3, #0]
 80319dc:	2b02      	cmp	r3, #2
 80319de:	dd0d      	ble.n	80319fc <sntp_cb+0xbc>
 80319e0:	4b18      	ldr	r3, [pc, #96]	@ (8031a44 <sntp_cb+0x104>)
 80319e2:	f641 422d 	movw	r2, #7213	@ 0x1c2d
 80319e6:	4918      	ldr	r1, [pc, #96]	@ (8031a48 <sntp_cb+0x108>)
 80319e8:	2003      	movs	r0, #3
 80319ea:	f7f9 fbf7 	bl	802b1dc <mg_log_prefix>
 80319ee:	68fb      	ldr	r3, [r7, #12]
 80319f0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80319f2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80319f6:	4815      	ldr	r0, [pc, #84]	@ (8031a4c <sntp_cb+0x10c>)
 80319f8:	f7f9 fc40 	bl	802b27c <mg_log>
    c->is_closing = 1;
 80319fc:	68fa      	ldr	r2, [r7, #12]
 80319fe:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8031a02:	f043 0320 	orr.w	r3, r3, #32
 8031a06:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 8031a0a:	e011      	b.n	8031a30 <sntp_cb+0xf0>
  } else if (ev == MG_EV_POLL) {
 8031a0c:	68bb      	ldr	r3, [r7, #8]
 8031a0e:	2b02      	cmp	r3, #2
 8031a10:	d10e      	bne.n	8031a30 <sntp_cb+0xf0>
    if (mg_millis() > *expiration_time) c->is_closing = 1;
 8031a12:	f001 f91b 	bl	8032c4c <mg_millis>
 8031a16:	69fb      	ldr	r3, [r7, #28]
 8031a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031a1c:	4282      	cmp	r2, r0
 8031a1e:	418b      	sbcs	r3, r1
 8031a20:	d206      	bcs.n	8031a30 <sntp_cb+0xf0>
 8031a22:	68fa      	ldr	r2, [r7, #12]
 8031a24:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8031a28:	f043 0320 	orr.w	r3, r3, #32
 8031a2c:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 8031a30:	bf00      	nop
 8031a32:	3720      	adds	r7, #32
 8031a34:	46bd      	mov	sp, r7
 8031a36:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8031a3a:	bf00      	nop
 8031a3c:	20018170 	.word	0x20018170
 8031a40:	20000298 	.word	0x20000298
 8031a44:	08044708 	.word	0x08044708
 8031a48:	08041564 	.word	0x08041564
 8031a4c:	08043230 	.word	0x08043230

08031a50 <mg_sntp_request>:

void mg_sntp_request(struct mg_connection *c) {
 8031a50:	b590      	push	{r4, r7, lr}
 8031a52:	b095      	sub	sp, #84	@ 0x54
 8031a54:	af00      	add	r7, sp, #0
 8031a56:	6078      	str	r0, [r7, #4]
  if (c->is_resolving) {
 8031a58:	687b      	ldr	r3, [r7, #4]
 8031a5a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8031a5e:	f003 0308 	and.w	r3, r3, #8
 8031a62:	b2db      	uxtb	r3, r3
 8031a64:	2b00      	cmp	r3, #0
 8031a66:	d011      	beq.n	8031a8c <mg_sntp_request+0x3c>
    MG_ERROR(("%lu wait until resolved", c->id));
 8031a68:	4b39      	ldr	r3, [pc, #228]	@ (8031b50 <mg_sntp_request+0x100>)
 8031a6a:	681b      	ldr	r3, [r3, #0]
 8031a6c:	2b00      	cmp	r3, #0
 8031a6e:	dd65      	ble.n	8031b3c <mg_sntp_request+0xec>
 8031a70:	4b38      	ldr	r3, [pc, #224]	@ (8031b54 <mg_sntp_request+0x104>)
 8031a72:	f641 423a 	movw	r2, #7226	@ 0x1c3a
 8031a76:	4938      	ldr	r1, [pc, #224]	@ (8031b58 <mg_sntp_request+0x108>)
 8031a78:	2001      	movs	r0, #1
 8031a7a:	f7f9 fbaf 	bl	802b1dc <mg_log_prefix>
 8031a7e:	687b      	ldr	r3, [r7, #4]
 8031a80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8031a82:	4619      	mov	r1, r3
 8031a84:	4835      	ldr	r0, [pc, #212]	@ (8031b5c <mg_sntp_request+0x10c>)
 8031a86:	f7f9 fbf9 	bl	802b27c <mg_log>
    buf[0] = (0 << 6) | (4 << 3) | 3;
    t[0] = mg_htonl((uint32_t) (now / 1000) + SNTP_TIME_OFFSET);
    t[1] = mg_htonl((uint32_t) frac);
    mg_send(c, buf, sizeof(buf));
  }
}
 8031a8a:	e057      	b.n	8031b3c <mg_sntp_request+0xec>
    int64_t now = (int64_t) mg_millis();  // Use int64_t, for vc98
 8031a8c:	f001 f8de 	bl	8032c4c <mg_millis>
 8031a90:	4602      	mov	r2, r0
 8031a92:	460b      	mov	r3, r1
 8031a94:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    uint8_t buf[48] = {0};
 8031a98:	2300      	movs	r3, #0
 8031a9a:	60bb      	str	r3, [r7, #8]
 8031a9c:	f107 030c 	add.w	r3, r7, #12
 8031aa0:	222c      	movs	r2, #44	@ 0x2c
 8031aa2:	2100      	movs	r1, #0
 8031aa4:	4618      	mov	r0, r3
 8031aa6:	f004 f9a3 	bl	8035df0 <memset>
    uint32_t *t = (uint32_t *) &buf[40];
 8031aaa:	f107 0308 	add.w	r3, r7, #8
 8031aae:	3328      	adds	r3, #40	@ 0x28
 8031ab0:	647b      	str	r3, [r7, #68]	@ 0x44
    double frac = ((double) (now % 1000)) / 1000.0 * SNTP_MAX_FRAC;
 8031ab2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8031ab6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8031aba:	f04f 0300 	mov.w	r3, #0
 8031abe:	f7df f8fb 	bl	8010cb8 <__aeabi_ldivmod>
 8031ac2:	4610      	mov	r0, r2
 8031ac4:	4619      	mov	r1, r3
 8031ac6:	f7de fd81 	bl	80105cc <__aeabi_l2d>
 8031aca:	f04f 0200 	mov.w	r2, #0
 8031ace:	4b24      	ldr	r3, [pc, #144]	@ (8031b60 <mg_sntp_request+0x110>)
 8031ad0:	f7de fed4 	bl	801087c <__aeabi_ddiv>
 8031ad4:	4602      	mov	r2, r0
 8031ad6:	460b      	mov	r3, r1
 8031ad8:	4610      	mov	r0, r2
 8031ada:	4619      	mov	r1, r3
 8031adc:	a31a      	add	r3, pc, #104	@ (adr r3, 8031b48 <mg_sntp_request+0xf8>)
 8031ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031ae2:	f7de fda1 	bl	8010628 <__aeabi_dmul>
 8031ae6:	4602      	mov	r2, r0
 8031ae8:	460b      	mov	r3, r1
 8031aea:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    buf[0] = (0 << 6) | (4 << 3) | 3;
 8031aee:	2323      	movs	r3, #35	@ 0x23
 8031af0:	723b      	strb	r3, [r7, #8]
    t[0] = mg_htonl((uint32_t) (now / 1000) + SNTP_TIME_OFFSET);
 8031af2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8031af6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8031afa:	f04f 0300 	mov.w	r3, #0
 8031afe:	f7df f8db 	bl	8010cb8 <__aeabi_ldivmod>
 8031b02:	4602      	mov	r2, r0
 8031b04:	460b      	mov	r3, r1
 8031b06:	4b17      	ldr	r3, [pc, #92]	@ (8031b64 <mg_sntp_request+0x114>)
 8031b08:	4413      	add	r3, r2
 8031b0a:	4618      	mov	r0, r3
 8031b0c:	f000 fff4 	bl	8032af8 <mg_ntohl>
 8031b10:	4602      	mov	r2, r0
 8031b12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8031b14:	601a      	str	r2, [r3, #0]
    t[1] = mg_htonl((uint32_t) frac);
 8031b16:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8031b1a:	f7df f85d 	bl	8010bd8 <__aeabi_d2uiz>
 8031b1e:	4602      	mov	r2, r0
 8031b20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8031b22:	1d1c      	adds	r4, r3, #4
 8031b24:	4610      	mov	r0, r2
 8031b26:	f000 ffe7 	bl	8032af8 <mg_ntohl>
 8031b2a:	4603      	mov	r3, r0
 8031b2c:	6023      	str	r3, [r4, #0]
    mg_send(c, buf, sizeof(buf));
 8031b2e:	f107 0308 	add.w	r3, r7, #8
 8031b32:	2230      	movs	r2, #48	@ 0x30
 8031b34:	4619      	mov	r1, r3
 8031b36:	6878      	ldr	r0, [r7, #4]
 8031b38:	f7ff fa7e 	bl	8031038 <mg_send>
}
 8031b3c:	bf00      	nop
 8031b3e:	3754      	adds	r7, #84	@ 0x54
 8031b40:	46bd      	mov	sp, r7
 8031b42:	bd90      	pop	{r4, r7, pc}
 8031b44:	f3af 8000 	nop.w
 8031b48:	ffe00000 	.word	0xffe00000
 8031b4c:	41efffff 	.word	0x41efffff
 8031b50:	20000298 	.word	0x20000298
 8031b54:	08044710 	.word	0x08044710
 8031b58:	08041564 	.word	0x08041564
 8031b5c:	08043254 	.word	0x08043254
 8031b60:	408f4000 	.word	0x408f4000
 8031b64:	83aa7e80 	.word	0x83aa7e80

08031b68 <mg_sntp_connect>:

struct mg_connection *mg_sntp_connect(struct mg_mgr *mgr, const char *url,
                                      mg_event_handler_t fn, void *fnd) {
 8031b68:	b580      	push	{r7, lr}
 8031b6a:	b086      	sub	sp, #24
 8031b6c:	af00      	add	r7, sp, #0
 8031b6e:	60f8      	str	r0, [r7, #12]
 8031b70:	60b9      	str	r1, [r7, #8]
 8031b72:	607a      	str	r2, [r7, #4]
 8031b74:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 8031b76:	2300      	movs	r3, #0
 8031b78:	617b      	str	r3, [r7, #20]
  if (url == NULL) url = "udp://time.google.com:123";
 8031b7a:	68bb      	ldr	r3, [r7, #8]
 8031b7c:	2b00      	cmp	r3, #0
 8031b7e:	d101      	bne.n	8031b84 <mg_sntp_connect+0x1c>
 8031b80:	4b0c      	ldr	r3, [pc, #48]	@ (8031bb4 <mg_sntp_connect+0x4c>)
 8031b82:	60bb      	str	r3, [r7, #8]
  if ((c = mg_connect(mgr, url, fn, fnd)) != NULL) {
 8031b84:	683b      	ldr	r3, [r7, #0]
 8031b86:	687a      	ldr	r2, [r7, #4]
 8031b88:	68b9      	ldr	r1, [r7, #8]
 8031b8a:	68f8      	ldr	r0, [r7, #12]
 8031b8c:	f7fb ff90 	bl	802dab0 <mg_connect>
 8031b90:	6178      	str	r0, [r7, #20]
 8031b92:	697b      	ldr	r3, [r7, #20]
 8031b94:	2b00      	cmp	r3, #0
 8031b96:	d008      	beq.n	8031baa <mg_sntp_connect+0x42>
    c->pfn = sntp_cb;
 8031b98:	697b      	ldr	r3, [r7, #20]
 8031b9a:	4a07      	ldr	r2, [pc, #28]	@ (8031bb8 <mg_sntp_connect+0x50>)
 8031b9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    sntp_cb(c, MG_EV_OPEN, (void *) url);
 8031ba0:	68ba      	ldr	r2, [r7, #8]
 8031ba2:	2101      	movs	r1, #1
 8031ba4:	6978      	ldr	r0, [r7, #20]
 8031ba6:	f7ff fecb 	bl	8031940 <sntp_cb>
  }
  return c;
 8031baa:	697b      	ldr	r3, [r7, #20]
}
 8031bac:	4618      	mov	r0, r3
 8031bae:	3718      	adds	r7, #24
 8031bb0:	46bd      	mov	sp, r7
 8031bb2:	bd80      	pop	{r7, pc}
 8031bb4:	0804326c 	.word	0x0804326c
 8031bb8:	08031941 	.word	0x08031941

08031bbc <mg_http_serve_ssi>:
  mg_http_reply(c, 200, headers, "%s", data == NULL ? "" : data);
  free(data);
}
#else
void mg_http_serve_ssi(struct mg_connection *c, const char *root,
                       const char *fullpath) {
 8031bbc:	b580      	push	{r7, lr}
 8031bbe:	b084      	sub	sp, #16
 8031bc0:	af00      	add	r7, sp, #0
 8031bc2:	60f8      	str	r0, [r7, #12]
 8031bc4:	60b9      	str	r1, [r7, #8]
 8031bc6:	607a      	str	r2, [r7, #4]
  mg_http_reply(c, 501, NULL, "SSI not enabled");
 8031bc8:	4b05      	ldr	r3, [pc, #20]	@ (8031be0 <mg_http_serve_ssi+0x24>)
 8031bca:	2200      	movs	r2, #0
 8031bcc:	f240 11f5 	movw	r1, #501	@ 0x1f5
 8031bd0:	68f8      	ldr	r0, [r7, #12]
 8031bd2:	f7f6 fb5b 	bl	802828c <mg_http_reply>
  (void) root, (void) fullpath;
}
 8031bd6:	bf00      	nop
 8031bd8:	3710      	adds	r7, #16
 8031bda:	46bd      	mov	sp, r7
 8031bdc:	bd80      	pop	{r7, pc}
 8031bde:	bf00      	nop
 8031be0:	08043288 	.word	0x08043288

08031be4 <mg_str_s>:
#ifdef MG_ENABLE_LINES
#line 1 "src/str.c"
#endif


struct mg_str mg_str_s(const char *s) {
 8031be4:	b580      	push	{r7, lr}
 8031be6:	b084      	sub	sp, #16
 8031be8:	af00      	add	r7, sp, #0
 8031bea:	6078      	str	r0, [r7, #4]
 8031bec:	6039      	str	r1, [r7, #0]
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 8031bee:	683b      	ldr	r3, [r7, #0]
 8031bf0:	60bb      	str	r3, [r7, #8]
 8031bf2:	683b      	ldr	r3, [r7, #0]
 8031bf4:	2b00      	cmp	r3, #0
 8031bf6:	d004      	beq.n	8031c02 <mg_str_s+0x1e>
 8031bf8:	6838      	ldr	r0, [r7, #0]
 8031bfa:	f7de fb51 	bl	80102a0 <strlen>
 8031bfe:	4603      	mov	r3, r0
 8031c00:	e000      	b.n	8031c04 <mg_str_s+0x20>
 8031c02:	2300      	movs	r3, #0
 8031c04:	60fb      	str	r3, [r7, #12]
  return str;
 8031c06:	687b      	ldr	r3, [r7, #4]
 8031c08:	461a      	mov	r2, r3
 8031c0a:	f107 0308 	add.w	r3, r7, #8
 8031c0e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8031c12:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8031c16:	6878      	ldr	r0, [r7, #4]
 8031c18:	3710      	adds	r7, #16
 8031c1a:	46bd      	mov	sp, r7
 8031c1c:	bd80      	pop	{r7, pc}

08031c1e <mg_str_n>:

struct mg_str mg_str_n(const char *s, size_t n) {
 8031c1e:	b480      	push	{r7}
 8031c20:	b087      	sub	sp, #28
 8031c22:	af00      	add	r7, sp, #0
 8031c24:	60f8      	str	r0, [r7, #12]
 8031c26:	60b9      	str	r1, [r7, #8]
 8031c28:	607a      	str	r2, [r7, #4]
  struct mg_str str = {(char *) s, n};
 8031c2a:	68bb      	ldr	r3, [r7, #8]
 8031c2c:	613b      	str	r3, [r7, #16]
 8031c2e:	687b      	ldr	r3, [r7, #4]
 8031c30:	617b      	str	r3, [r7, #20]
  return str;
 8031c32:	68fb      	ldr	r3, [r7, #12]
 8031c34:	461a      	mov	r2, r3
 8031c36:	f107 0310 	add.w	r3, r7, #16
 8031c3a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8031c3e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8031c42:	68f8      	ldr	r0, [r7, #12]
 8031c44:	371c      	adds	r7, #28
 8031c46:	46bd      	mov	sp, r7
 8031c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031c4c:	4770      	bx	lr

08031c4e <mg_tolc>:

static int mg_tolc(char c) {
 8031c4e:	b480      	push	{r7}
 8031c50:	b083      	sub	sp, #12
 8031c52:	af00      	add	r7, sp, #0
 8031c54:	4603      	mov	r3, r0
 8031c56:	71fb      	strb	r3, [r7, #7]
  return (c >= 'A' && c <= 'Z') ? c + 'a' - 'A' : c;
 8031c58:	79fb      	ldrb	r3, [r7, #7]
 8031c5a:	2b40      	cmp	r3, #64	@ 0x40
 8031c5c:	d905      	bls.n	8031c6a <mg_tolc+0x1c>
 8031c5e:	79fb      	ldrb	r3, [r7, #7]
 8031c60:	2b5a      	cmp	r3, #90	@ 0x5a
 8031c62:	d802      	bhi.n	8031c6a <mg_tolc+0x1c>
 8031c64:	79fb      	ldrb	r3, [r7, #7]
 8031c66:	3320      	adds	r3, #32
 8031c68:	e000      	b.n	8031c6c <mg_tolc+0x1e>
 8031c6a:	79fb      	ldrb	r3, [r7, #7]
}
 8031c6c:	4618      	mov	r0, r3
 8031c6e:	370c      	adds	r7, #12
 8031c70:	46bd      	mov	sp, r7
 8031c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031c76:	4770      	bx	lr

08031c78 <mg_strcmp>:
    }
  }
  return r;
}

int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {
 8031c78:	b490      	push	{r4, r7}
 8031c7a:	b088      	sub	sp, #32
 8031c7c:	af00      	add	r7, sp, #0
 8031c7e:	f107 0408 	add.w	r4, r7, #8
 8031c82:	e884 0003 	stmia.w	r4, {r0, r1}
 8031c86:	4639      	mov	r1, r7
 8031c88:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 8031c8c:	2300      	movs	r3, #0
 8031c8e:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8031c90:	e019      	b.n	8031cc6 <mg_strcmp+0x4e>
    int c1 = str1.buf[i];
 8031c92:	68ba      	ldr	r2, [r7, #8]
 8031c94:	69fb      	ldr	r3, [r7, #28]
 8031c96:	4413      	add	r3, r2
 8031c98:	781b      	ldrb	r3, [r3, #0]
 8031c9a:	61bb      	str	r3, [r7, #24]
    int c2 = str2.buf[i];
 8031c9c:	683a      	ldr	r2, [r7, #0]
 8031c9e:	69fb      	ldr	r3, [r7, #28]
 8031ca0:	4413      	add	r3, r2
 8031ca2:	781b      	ldrb	r3, [r3, #0]
 8031ca4:	617b      	str	r3, [r7, #20]
    if (c1 < c2) return -1;
 8031ca6:	69ba      	ldr	r2, [r7, #24]
 8031ca8:	697b      	ldr	r3, [r7, #20]
 8031caa:	429a      	cmp	r2, r3
 8031cac:	da02      	bge.n	8031cb4 <mg_strcmp+0x3c>
 8031cae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8031cb2:	e01e      	b.n	8031cf2 <mg_strcmp+0x7a>
    if (c1 > c2) return 1;
 8031cb4:	69ba      	ldr	r2, [r7, #24]
 8031cb6:	697b      	ldr	r3, [r7, #20]
 8031cb8:	429a      	cmp	r2, r3
 8031cba:	dd01      	ble.n	8031cc0 <mg_strcmp+0x48>
 8031cbc:	2301      	movs	r3, #1
 8031cbe:	e018      	b.n	8031cf2 <mg_strcmp+0x7a>
    i++;
 8031cc0:	69fb      	ldr	r3, [r7, #28]
 8031cc2:	3301      	adds	r3, #1
 8031cc4:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8031cc6:	68fb      	ldr	r3, [r7, #12]
 8031cc8:	69fa      	ldr	r2, [r7, #28]
 8031cca:	429a      	cmp	r2, r3
 8031ccc:	d203      	bcs.n	8031cd6 <mg_strcmp+0x5e>
 8031cce:	687b      	ldr	r3, [r7, #4]
 8031cd0:	69fa      	ldr	r2, [r7, #28]
 8031cd2:	429a      	cmp	r2, r3
 8031cd4:	d3dd      	bcc.n	8031c92 <mg_strcmp+0x1a>
  }
  if (i < str1.len) return 1;
 8031cd6:	68fb      	ldr	r3, [r7, #12]
 8031cd8:	69fa      	ldr	r2, [r7, #28]
 8031cda:	429a      	cmp	r2, r3
 8031cdc:	d201      	bcs.n	8031ce2 <mg_strcmp+0x6a>
 8031cde:	2301      	movs	r3, #1
 8031ce0:	e007      	b.n	8031cf2 <mg_strcmp+0x7a>
  if (i < str2.len) return -1;
 8031ce2:	687b      	ldr	r3, [r7, #4]
 8031ce4:	69fa      	ldr	r2, [r7, #28]
 8031ce6:	429a      	cmp	r2, r3
 8031ce8:	d202      	bcs.n	8031cf0 <mg_strcmp+0x78>
 8031cea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8031cee:	e000      	b.n	8031cf2 <mg_strcmp+0x7a>
  return 0;
 8031cf0:	2300      	movs	r3, #0
}
 8031cf2:	4618      	mov	r0, r3
 8031cf4:	3720      	adds	r7, #32
 8031cf6:	46bd      	mov	sp, r7
 8031cf8:	bc90      	pop	{r4, r7}
 8031cfa:	4770      	bx	lr

08031cfc <mg_strcasecmp>:

int mg_strcasecmp(const struct mg_str str1, const struct mg_str str2) {
 8031cfc:	b590      	push	{r4, r7, lr}
 8031cfe:	b089      	sub	sp, #36	@ 0x24
 8031d00:	af00      	add	r7, sp, #0
 8031d02:	f107 0408 	add.w	r4, r7, #8
 8031d06:	e884 0003 	stmia.w	r4, {r0, r1}
 8031d0a:	4639      	mov	r1, r7
 8031d0c:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 8031d10:	2300      	movs	r3, #0
 8031d12:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8031d14:	e01f      	b.n	8031d56 <mg_strcasecmp+0x5a>
    int c1 = mg_tolc(str1.buf[i]);
 8031d16:	68ba      	ldr	r2, [r7, #8]
 8031d18:	69fb      	ldr	r3, [r7, #28]
 8031d1a:	4413      	add	r3, r2
 8031d1c:	781b      	ldrb	r3, [r3, #0]
 8031d1e:	4618      	mov	r0, r3
 8031d20:	f7ff ff95 	bl	8031c4e <mg_tolc>
 8031d24:	61b8      	str	r0, [r7, #24]
    int c2 = mg_tolc(str2.buf[i]);
 8031d26:	683a      	ldr	r2, [r7, #0]
 8031d28:	69fb      	ldr	r3, [r7, #28]
 8031d2a:	4413      	add	r3, r2
 8031d2c:	781b      	ldrb	r3, [r3, #0]
 8031d2e:	4618      	mov	r0, r3
 8031d30:	f7ff ff8d 	bl	8031c4e <mg_tolc>
 8031d34:	6178      	str	r0, [r7, #20]
    if (c1 < c2) return -1;
 8031d36:	69ba      	ldr	r2, [r7, #24]
 8031d38:	697b      	ldr	r3, [r7, #20]
 8031d3a:	429a      	cmp	r2, r3
 8031d3c:	da02      	bge.n	8031d44 <mg_strcasecmp+0x48>
 8031d3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8031d42:	e01e      	b.n	8031d82 <mg_strcasecmp+0x86>
    if (c1 > c2) return 1;
 8031d44:	69ba      	ldr	r2, [r7, #24]
 8031d46:	697b      	ldr	r3, [r7, #20]
 8031d48:	429a      	cmp	r2, r3
 8031d4a:	dd01      	ble.n	8031d50 <mg_strcasecmp+0x54>
 8031d4c:	2301      	movs	r3, #1
 8031d4e:	e018      	b.n	8031d82 <mg_strcasecmp+0x86>
    i++;
 8031d50:	69fb      	ldr	r3, [r7, #28]
 8031d52:	3301      	adds	r3, #1
 8031d54:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8031d56:	68fb      	ldr	r3, [r7, #12]
 8031d58:	69fa      	ldr	r2, [r7, #28]
 8031d5a:	429a      	cmp	r2, r3
 8031d5c:	d203      	bcs.n	8031d66 <mg_strcasecmp+0x6a>
 8031d5e:	687b      	ldr	r3, [r7, #4]
 8031d60:	69fa      	ldr	r2, [r7, #28]
 8031d62:	429a      	cmp	r2, r3
 8031d64:	d3d7      	bcc.n	8031d16 <mg_strcasecmp+0x1a>
  }
  if (i < str1.len) return 1;
 8031d66:	68fb      	ldr	r3, [r7, #12]
 8031d68:	69fa      	ldr	r2, [r7, #28]
 8031d6a:	429a      	cmp	r2, r3
 8031d6c:	d201      	bcs.n	8031d72 <mg_strcasecmp+0x76>
 8031d6e:	2301      	movs	r3, #1
 8031d70:	e007      	b.n	8031d82 <mg_strcasecmp+0x86>
  if (i < str2.len) return -1;
 8031d72:	687b      	ldr	r3, [r7, #4]
 8031d74:	69fa      	ldr	r2, [r7, #28]
 8031d76:	429a      	cmp	r2, r3
 8031d78:	d202      	bcs.n	8031d80 <mg_strcasecmp+0x84>
 8031d7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8031d7e:	e000      	b.n	8031d82 <mg_strcasecmp+0x86>
  return 0;
 8031d80:	2300      	movs	r3, #0
}
 8031d82:	4618      	mov	r0, r3
 8031d84:	3724      	adds	r7, #36	@ 0x24
 8031d86:	46bd      	mov	sp, r7
 8031d88:	bd90      	pop	{r4, r7, pc}

08031d8a <mg_match>:

bool mg_match(struct mg_str s, struct mg_str p, struct mg_str *caps) {
 8031d8a:	b490      	push	{r4, r7}
 8031d8c:	b088      	sub	sp, #32
 8031d8e:	af00      	add	r7, sp, #0
 8031d90:	f107 0408 	add.w	r4, r7, #8
 8031d94:	e884 0003 	stmia.w	r4, {r0, r1}
 8031d98:	4639      	mov	r1, r7
 8031d9a:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0, j = 0, ni = 0, nj = 0;
 8031d9e:	2300      	movs	r3, #0
 8031da0:	61fb      	str	r3, [r7, #28]
 8031da2:	2300      	movs	r3, #0
 8031da4:	61bb      	str	r3, [r7, #24]
 8031da6:	2300      	movs	r3, #0
 8031da8:	617b      	str	r3, [r7, #20]
 8031daa:	2300      	movs	r3, #0
 8031dac:	613b      	str	r3, [r7, #16]
  if (caps) caps->buf = NULL, caps->len = 0;
 8031dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8031db0:	2b00      	cmp	r3, #0
 8031db2:	f000 80ba 	beq.w	8031f2a <mg_match+0x1a0>
 8031db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8031db8:	2200      	movs	r2, #0
 8031dba:	601a      	str	r2, [r3, #0]
 8031dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8031dbe:	2200      	movs	r2, #0
 8031dc0:	605a      	str	r2, [r3, #4]
  while (i < p.len || j < s.len) {
 8031dc2:	e0b2      	b.n	8031f2a <mg_match+0x1a0>
    if (i < p.len && j < s.len &&
 8031dc4:	687b      	ldr	r3, [r7, #4]
 8031dc6:	69fa      	ldr	r2, [r7, #28]
 8031dc8:	429a      	cmp	r2, r3
 8031dca:	d25b      	bcs.n	8031e84 <mg_match+0xfa>
 8031dcc:	68fb      	ldr	r3, [r7, #12]
 8031dce:	69ba      	ldr	r2, [r7, #24]
 8031dd0:	429a      	cmp	r2, r3
 8031dd2:	d257      	bcs.n	8031e84 <mg_match+0xfa>
        (p.buf[i] == '?' ||
 8031dd4:	683a      	ldr	r2, [r7, #0]
 8031dd6:	69fb      	ldr	r3, [r7, #28]
 8031dd8:	4413      	add	r3, r2
 8031dda:	781b      	ldrb	r3, [r3, #0]
    if (i < p.len && j < s.len &&
 8031ddc:	2b3f      	cmp	r3, #63	@ 0x3f
 8031dde:	d015      	beq.n	8031e0c <mg_match+0x82>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 8031de0:	683a      	ldr	r2, [r7, #0]
 8031de2:	69fb      	ldr	r3, [r7, #28]
 8031de4:	4413      	add	r3, r2
 8031de6:	781b      	ldrb	r3, [r3, #0]
        (p.buf[i] == '?' ||
 8031de8:	2b2a      	cmp	r3, #42	@ 0x2a
 8031dea:	d04b      	beq.n	8031e84 <mg_match+0xfa>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 8031dec:	683a      	ldr	r2, [r7, #0]
 8031dee:	69fb      	ldr	r3, [r7, #28]
 8031df0:	4413      	add	r3, r2
 8031df2:	781b      	ldrb	r3, [r3, #0]
 8031df4:	2b23      	cmp	r3, #35	@ 0x23
 8031df6:	d045      	beq.n	8031e84 <mg_match+0xfa>
 8031df8:	68ba      	ldr	r2, [r7, #8]
 8031dfa:	69bb      	ldr	r3, [r7, #24]
 8031dfc:	4413      	add	r3, r2
 8031dfe:	781a      	ldrb	r2, [r3, #0]
 8031e00:	6839      	ldr	r1, [r7, #0]
 8031e02:	69fb      	ldr	r3, [r7, #28]
 8031e04:	440b      	add	r3, r1
 8031e06:	781b      	ldrb	r3, [r3, #0]
 8031e08:	429a      	cmp	r2, r3
 8031e0a:	d13b      	bne.n	8031e84 <mg_match+0xfa>
      if (caps == NULL) {
 8031e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8031e0e:	2b00      	cmp	r3, #0
 8031e10:	d031      	beq.n	8031e76 <mg_match+0xec>
      } else if (p.buf[i] == '?') {
 8031e12:	683a      	ldr	r2, [r7, #0]
 8031e14:	69fb      	ldr	r3, [r7, #28]
 8031e16:	4413      	add	r3, r2
 8031e18:	781b      	ldrb	r3, [r3, #0]
 8031e1a:	2b3f      	cmp	r3, #63	@ 0x3f
 8031e1c:	d111      	bne.n	8031e42 <mg_match+0xb8>
        caps->buf = &s.buf[j], caps->len = 1;     // Finalize `?` cap
 8031e1e:	68ba      	ldr	r2, [r7, #8]
 8031e20:	69bb      	ldr	r3, [r7, #24]
 8031e22:	441a      	add	r2, r3
 8031e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8031e26:	601a      	str	r2, [r3, #0]
 8031e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8031e2a:	2201      	movs	r2, #1
 8031e2c:	605a      	str	r2, [r3, #4]
        caps++, caps->buf = NULL, caps->len = 0;  // Init next cap
 8031e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8031e30:	3308      	adds	r3, #8
 8031e32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8031e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8031e36:	2200      	movs	r2, #0
 8031e38:	601a      	str	r2, [r3, #0]
 8031e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8031e3c:	2200      	movs	r2, #0
 8031e3e:	605a      	str	r2, [r3, #4]
 8031e40:	e019      	b.n	8031e76 <mg_match+0xec>
      } else if (caps->buf != NULL && caps->len == 0) {
 8031e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8031e44:	681b      	ldr	r3, [r3, #0]
 8031e46:	2b00      	cmp	r3, #0
 8031e48:	d015      	beq.n	8031e76 <mg_match+0xec>
 8031e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8031e4c:	685b      	ldr	r3, [r3, #4]
 8031e4e:	2b00      	cmp	r3, #0
 8031e50:	d111      	bne.n	8031e76 <mg_match+0xec>
        caps->len = (size_t) (&s.buf[j] - caps->buf);  // Finalize current cap
 8031e52:	68ba      	ldr	r2, [r7, #8]
 8031e54:	69bb      	ldr	r3, [r7, #24]
 8031e56:	441a      	add	r2, r3
 8031e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8031e5a:	681b      	ldr	r3, [r3, #0]
 8031e5c:	1ad3      	subs	r3, r2, r3
 8031e5e:	461a      	mov	r2, r3
 8031e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8031e62:	605a      	str	r2, [r3, #4]
        caps++, caps->len = 0, caps->buf = NULL;       // Init next cap
 8031e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8031e66:	3308      	adds	r3, #8
 8031e68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8031e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8031e6c:	2200      	movs	r2, #0
 8031e6e:	605a      	str	r2, [r3, #4]
 8031e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8031e72:	2200      	movs	r2, #0
 8031e74:	601a      	str	r2, [r3, #0]
      }
      i++, j++;
 8031e76:	69fb      	ldr	r3, [r7, #28]
 8031e78:	3301      	adds	r3, #1
 8031e7a:	61fb      	str	r3, [r7, #28]
 8031e7c:	69bb      	ldr	r3, [r7, #24]
 8031e7e:	3301      	adds	r3, #1
 8031e80:	61bb      	str	r3, [r7, #24]
 8031e82:	e052      	b.n	8031f2a <mg_match+0x1a0>
    } else if (i < p.len && (p.buf[i] == '*' || p.buf[i] == '#')) {
 8031e84:	687b      	ldr	r3, [r7, #4]
 8031e86:	69fa      	ldr	r2, [r7, #28]
 8031e88:	429a      	cmp	r2, r3
 8031e8a:	d222      	bcs.n	8031ed2 <mg_match+0x148>
 8031e8c:	683a      	ldr	r2, [r7, #0]
 8031e8e:	69fb      	ldr	r3, [r7, #28]
 8031e90:	4413      	add	r3, r2
 8031e92:	781b      	ldrb	r3, [r3, #0]
 8031e94:	2b2a      	cmp	r3, #42	@ 0x2a
 8031e96:	d005      	beq.n	8031ea4 <mg_match+0x11a>
 8031e98:	683a      	ldr	r2, [r7, #0]
 8031e9a:	69fb      	ldr	r3, [r7, #28]
 8031e9c:	4413      	add	r3, r2
 8031e9e:	781b      	ldrb	r3, [r3, #0]
 8031ea0:	2b23      	cmp	r3, #35	@ 0x23
 8031ea2:	d116      	bne.n	8031ed2 <mg_match+0x148>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 8031ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8031ea6:	2b00      	cmp	r3, #0
 8031ea8:	d00b      	beq.n	8031ec2 <mg_match+0x138>
 8031eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8031eac:	681b      	ldr	r3, [r3, #0]
 8031eae:	2b00      	cmp	r3, #0
 8031eb0:	d107      	bne.n	8031ec2 <mg_match+0x138>
 8031eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8031eb4:	2200      	movs	r2, #0
 8031eb6:	605a      	str	r2, [r3, #4]
 8031eb8:	68ba      	ldr	r2, [r7, #8]
 8031eba:	69bb      	ldr	r3, [r7, #24]
 8031ebc:	441a      	add	r2, r3
 8031ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8031ec0:	601a      	str	r2, [r3, #0]
      ni = i++, nj = j + 1;
 8031ec2:	69fb      	ldr	r3, [r7, #28]
 8031ec4:	1c5a      	adds	r2, r3, #1
 8031ec6:	61fa      	str	r2, [r7, #28]
 8031ec8:	617b      	str	r3, [r7, #20]
 8031eca:	69bb      	ldr	r3, [r7, #24]
 8031ecc:	3301      	adds	r3, #1
 8031ece:	613b      	str	r3, [r7, #16]
 8031ed0:	e02b      	b.n	8031f2a <mg_match+0x1a0>
    } else if (nj > 0 && nj <= s.len && (p.buf[ni] == '#' || s.buf[j] != '/')) {
 8031ed2:	693b      	ldr	r3, [r7, #16]
 8031ed4:	2b00      	cmp	r3, #0
 8031ed6:	d025      	beq.n	8031f24 <mg_match+0x19a>
 8031ed8:	68fb      	ldr	r3, [r7, #12]
 8031eda:	693a      	ldr	r2, [r7, #16]
 8031edc:	429a      	cmp	r2, r3
 8031ede:	d821      	bhi.n	8031f24 <mg_match+0x19a>
 8031ee0:	683a      	ldr	r2, [r7, #0]
 8031ee2:	697b      	ldr	r3, [r7, #20]
 8031ee4:	4413      	add	r3, r2
 8031ee6:	781b      	ldrb	r3, [r3, #0]
 8031ee8:	2b23      	cmp	r3, #35	@ 0x23
 8031eea:	d005      	beq.n	8031ef8 <mg_match+0x16e>
 8031eec:	68ba      	ldr	r2, [r7, #8]
 8031eee:	69bb      	ldr	r3, [r7, #24]
 8031ef0:	4413      	add	r3, r2
 8031ef2:	781b      	ldrb	r3, [r3, #0]
 8031ef4:	2b2f      	cmp	r3, #47	@ 0x2f
 8031ef6:	d015      	beq.n	8031f24 <mg_match+0x19a>
      i = ni, j = nj;
 8031ef8:	697b      	ldr	r3, [r7, #20]
 8031efa:	61fb      	str	r3, [r7, #28]
 8031efc:	693b      	ldr	r3, [r7, #16]
 8031efe:	61bb      	str	r3, [r7, #24]
      if (caps && caps->buf == NULL && caps->len == 0) {
 8031f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8031f02:	2b00      	cmp	r3, #0
 8031f04:	d010      	beq.n	8031f28 <mg_match+0x19e>
 8031f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8031f08:	681b      	ldr	r3, [r3, #0]
 8031f0a:	2b00      	cmp	r3, #0
 8031f0c:	d10c      	bne.n	8031f28 <mg_match+0x19e>
 8031f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8031f10:	685b      	ldr	r3, [r3, #4]
 8031f12:	2b00      	cmp	r3, #0
 8031f14:	d108      	bne.n	8031f28 <mg_match+0x19e>
        caps--, caps->len = 0;  // Restart previous cap
 8031f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8031f18:	3b08      	subs	r3, #8
 8031f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8031f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8031f1e:	2200      	movs	r2, #0
 8031f20:	605a      	str	r2, [r3, #4]
      if (caps && caps->buf == NULL && caps->len == 0) {
 8031f22:	e001      	b.n	8031f28 <mg_match+0x19e>
      }
    } else {
      return false;
 8031f24:	2300      	movs	r3, #0
 8031f26:	e01f      	b.n	8031f68 <mg_match+0x1de>
      if (caps && caps->buf == NULL && caps->len == 0) {
 8031f28:	bf00      	nop
  while (i < p.len || j < s.len) {
 8031f2a:	687b      	ldr	r3, [r7, #4]
 8031f2c:	69fa      	ldr	r2, [r7, #28]
 8031f2e:	429a      	cmp	r2, r3
 8031f30:	f4ff af48 	bcc.w	8031dc4 <mg_match+0x3a>
 8031f34:	68fb      	ldr	r3, [r7, #12]
 8031f36:	69ba      	ldr	r2, [r7, #24]
 8031f38:	429a      	cmp	r2, r3
 8031f3a:	f4ff af43 	bcc.w	8031dc4 <mg_match+0x3a>
    }
  }
  if (caps && caps->buf && caps->len == 0) {
 8031f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8031f40:	2b00      	cmp	r3, #0
 8031f42:	d010      	beq.n	8031f66 <mg_match+0x1dc>
 8031f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8031f46:	681b      	ldr	r3, [r3, #0]
 8031f48:	2b00      	cmp	r3, #0
 8031f4a:	d00c      	beq.n	8031f66 <mg_match+0x1dc>
 8031f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8031f4e:	685b      	ldr	r3, [r3, #4]
 8031f50:	2b00      	cmp	r3, #0
 8031f52:	d108      	bne.n	8031f66 <mg_match+0x1dc>
    caps->len = (size_t) (&s.buf[j] - caps->buf);
 8031f54:	68ba      	ldr	r2, [r7, #8]
 8031f56:	69bb      	ldr	r3, [r7, #24]
 8031f58:	441a      	add	r2, r3
 8031f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8031f5c:	681b      	ldr	r3, [r3, #0]
 8031f5e:	1ad3      	subs	r3, r2, r3
 8031f60:	461a      	mov	r2, r3
 8031f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8031f64:	605a      	str	r2, [r3, #4]
  }
  return true;
 8031f66:	2301      	movs	r3, #1
}
 8031f68:	4618      	mov	r0, r3
 8031f6a:	3720      	adds	r7, #32
 8031f6c:	46bd      	mov	sp, r7
 8031f6e:	bc90      	pop	{r4, r7}
 8031f70:	4770      	bx	lr

08031f72 <mg_span>:

bool mg_span(struct mg_str s, struct mg_str *a, struct mg_str *b, char sep) {
 8031f72:	b590      	push	{r4, r7, lr}
 8031f74:	b089      	sub	sp, #36	@ 0x24
 8031f76:	af00      	add	r7, sp, #0
 8031f78:	f107 0410 	add.w	r4, r7, #16
 8031f7c:	e884 0003 	stmia.w	r4, {r0, r1}
 8031f80:	60fa      	str	r2, [r7, #12]
 8031f82:	60bb      	str	r3, [r7, #8]
  if (s.len == 0 || s.buf == NULL) {
 8031f84:	697b      	ldr	r3, [r7, #20]
 8031f86:	2b00      	cmp	r3, #0
 8031f88:	d002      	beq.n	8031f90 <mg_span+0x1e>
 8031f8a:	693b      	ldr	r3, [r7, #16]
 8031f8c:	2b00      	cmp	r3, #0
 8031f8e:	d101      	bne.n	8031f94 <mg_span+0x22>
    return false;  // Empty string, nothing to span - fail
 8031f90:	2300      	movs	r3, #0
 8031f92:	e047      	b.n	8032024 <mg_span+0xb2>
  } else {
    size_t len = 0;
 8031f94:	2300      	movs	r3, #0
 8031f96:	61fb      	str	r3, [r7, #28]
    while (len < s.len && s.buf[len] != sep) len++;  // Find separator
 8031f98:	e002      	b.n	8031fa0 <mg_span+0x2e>
 8031f9a:	69fb      	ldr	r3, [r7, #28]
 8031f9c:	3301      	adds	r3, #1
 8031f9e:	61fb      	str	r3, [r7, #28]
 8031fa0:	697b      	ldr	r3, [r7, #20]
 8031fa2:	69fa      	ldr	r2, [r7, #28]
 8031fa4:	429a      	cmp	r2, r3
 8031fa6:	d207      	bcs.n	8031fb8 <mg_span+0x46>
 8031fa8:	693a      	ldr	r2, [r7, #16]
 8031faa:	69fb      	ldr	r3, [r7, #28]
 8031fac:	4413      	add	r3, r2
 8031fae:	781b      	ldrb	r3, [r3, #0]
 8031fb0:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8031fb4:	429a      	cmp	r2, r3
 8031fb6:	d1f0      	bne.n	8031f9a <mg_span+0x28>
    if (a) *a = mg_str_n(s.buf, len);                // Init a
 8031fb8:	68fb      	ldr	r3, [r7, #12]
 8031fba:	2b00      	cmp	r3, #0
 8031fbc:	d00c      	beq.n	8031fd8 <mg_span+0x66>
 8031fbe:	6939      	ldr	r1, [r7, #16]
 8031fc0:	68fc      	ldr	r4, [r7, #12]
 8031fc2:	463b      	mov	r3, r7
 8031fc4:	69fa      	ldr	r2, [r7, #28]
 8031fc6:	4618      	mov	r0, r3
 8031fc8:	f7ff fe29 	bl	8031c1e <mg_str_n>
 8031fcc:	4622      	mov	r2, r4
 8031fce:	463b      	mov	r3, r7
 8031fd0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8031fd4:	e882 0003 	stmia.w	r2, {r0, r1}
    if (b) *b = mg_str_n(s.buf + len, s.len - len);  // Init b
 8031fd8:	68bb      	ldr	r3, [r7, #8]
 8031fda:	2b00      	cmp	r3, #0
 8031fdc:	d010      	beq.n	8032000 <mg_span+0x8e>
 8031fde:	693a      	ldr	r2, [r7, #16]
 8031fe0:	69fb      	ldr	r3, [r7, #28]
 8031fe2:	18d1      	adds	r1, r2, r3
 8031fe4:	697a      	ldr	r2, [r7, #20]
 8031fe6:	69fb      	ldr	r3, [r7, #28]
 8031fe8:	1ad2      	subs	r2, r2, r3
 8031fea:	68bc      	ldr	r4, [r7, #8]
 8031fec:	463b      	mov	r3, r7
 8031fee:	4618      	mov	r0, r3
 8031ff0:	f7ff fe15 	bl	8031c1e <mg_str_n>
 8031ff4:	4622      	mov	r2, r4
 8031ff6:	463b      	mov	r3, r7
 8031ff8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8031ffc:	e882 0003 	stmia.w	r2, {r0, r1}
    if (b && len < s.len) b->buf++, b->len--;        // Skip separator
 8032000:	68bb      	ldr	r3, [r7, #8]
 8032002:	2b00      	cmp	r3, #0
 8032004:	d00d      	beq.n	8032022 <mg_span+0xb0>
 8032006:	697b      	ldr	r3, [r7, #20]
 8032008:	69fa      	ldr	r2, [r7, #28]
 803200a:	429a      	cmp	r2, r3
 803200c:	d209      	bcs.n	8032022 <mg_span+0xb0>
 803200e:	68bb      	ldr	r3, [r7, #8]
 8032010:	681b      	ldr	r3, [r3, #0]
 8032012:	1c5a      	adds	r2, r3, #1
 8032014:	68bb      	ldr	r3, [r7, #8]
 8032016:	601a      	str	r2, [r3, #0]
 8032018:	68bb      	ldr	r3, [r7, #8]
 803201a:	685b      	ldr	r3, [r3, #4]
 803201c:	1e5a      	subs	r2, r3, #1
 803201e:	68bb      	ldr	r3, [r7, #8]
 8032020:	605a      	str	r2, [r3, #4]
    return true;
 8032022:	2301      	movs	r3, #1
  }
}
 8032024:	4618      	mov	r0, r3
 8032026:	3724      	adds	r7, #36	@ 0x24
 8032028:	46bd      	mov	sp, r7
 803202a:	bd90      	pop	{r4, r7, pc}

0803202c <mg_str_to_num>:

bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 803202c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8032030:	b0a5      	sub	sp, #148	@ 0x94
 8032032:	af00      	add	r7, sp, #0
 8032034:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8032038:	e884 0003 	stmia.w	r4, {r0, r1}
 803203c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 803203e:	64bb      	str	r3, [r7, #72]	@ 0x48
  size_t i = 0, ndigits = 0;
 8032040:	2300      	movs	r3, #0
 8032042:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8032046:	2300      	movs	r3, #0
 8032048:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
                 : val_len == sizeof(uint16_t) ? 0xFFFF
 803204c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8032050:	2b01      	cmp	r3, #1
 8032052:	d016      	beq.n	8032082 <mg_str_to_num+0x56>
                 : val_len == sizeof(uint32_t) ? 0xFFFFFFFF
 8032054:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8032058:	2b02      	cmp	r3, #2
 803205a:	d00d      	beq.n	8032078 <mg_str_to_num+0x4c>
                                               : (uint64_t) ~0;
 803205c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8032060:	2b04      	cmp	r3, #4
 8032062:	d104      	bne.n	803206e <mg_str_to_num+0x42>
 8032064:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8032068:	f04f 0300 	mov.w	r3, #0
 803206c:	e00d      	b.n	803208a <mg_str_to_num+0x5e>
 803206e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8032072:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8032076:	e008      	b.n	803208a <mg_str_to_num+0x5e>
                 : val_len == sizeof(uint32_t) ? 0xFFFFFFFF
 8032078:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 803207c:	f04f 0300 	mov.w	r3, #0
 8032080:	e003      	b.n	803208a <mg_str_to_num+0x5e>
                 : val_len == sizeof(uint16_t) ? 0xFFFF
 8032082:	f04f 02ff 	mov.w	r2, #255	@ 0xff
 8032086:	f04f 0300 	mov.w	r3, #0
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
 803208a:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
  uint64_t result = 0;
 803208e:	f04f 0200 	mov.w	r2, #0
 8032092:	f04f 0300 	mov.w	r3, #0
 8032096:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
  if (max == (uint64_t) ~0 && val_len != sizeof(uint64_t)) return false;
 803209a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 803209e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80320a2:	bf08      	it	eq
 80320a4:	f1b2 3fff 	cmpeq.w	r2, #4294967295	@ 0xffffffff
 80320a8:	d105      	bne.n	80320b6 <mg_str_to_num+0x8a>
 80320aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80320ae:	2b08      	cmp	r3, #8
 80320b0:	d001      	beq.n	80320b6 <mg_str_to_num+0x8a>
 80320b2:	2300      	movs	r3, #0
 80320b4:	e1e8      	b.n	8032488 <mg_str_to_num+0x45c>
  if (base == 0 && str.len >= 2) {
 80320b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80320b8:	2b00      	cmp	r3, #0
 80320ba:	d12d      	bne.n	8032118 <mg_str_to_num+0xec>
 80320bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80320be:	2b01      	cmp	r3, #1
 80320c0:	d92a      	bls.n	8032118 <mg_str_to_num+0xec>
    if (str.buf[i] == '0') {
 80320c2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80320c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80320c8:	4413      	add	r3, r2
 80320ca:	781b      	ldrb	r3, [r3, #0]
 80320cc:	2b30      	cmp	r3, #48	@ 0x30
 80320ce:	d121      	bne.n	8032114 <mg_str_to_num+0xe8>
      i++;
 80320d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80320d4:	3301      	adds	r3, #1
 80320d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 80320da:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80320dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80320e0:	4413      	add	r3, r2
 80320e2:	781b      	ldrb	r3, [r3, #0]
 80320e4:	2b62      	cmp	r3, #98	@ 0x62
 80320e6:	d00a      	beq.n	80320fe <mg_str_to_num+0xd2>
 80320e8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80320ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80320ee:	4413      	add	r3, r2
 80320f0:	781b      	ldrb	r3, [r3, #0]
 80320f2:	2b78      	cmp	r3, #120	@ 0x78
 80320f4:	d101      	bne.n	80320fa <mg_str_to_num+0xce>
 80320f6:	2310      	movs	r3, #16
 80320f8:	e002      	b.n	8032100 <mg_str_to_num+0xd4>
 80320fa:	230a      	movs	r3, #10
 80320fc:	e000      	b.n	8032100 <mg_str_to_num+0xd4>
 80320fe:	2302      	movs	r3, #2
 8032100:	64fb      	str	r3, [r7, #76]	@ 0x4c
      if (base != 10) ++i;
 8032102:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8032104:	2b0a      	cmp	r3, #10
 8032106:	d007      	beq.n	8032118 <mg_str_to_num+0xec>
 8032108:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 803210c:	3301      	adds	r3, #1
 803210e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8032112:	e001      	b.n	8032118 <mg_str_to_num+0xec>
    } else {
      base = 10;
 8032114:	230a      	movs	r3, #10
 8032116:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  switch (base) {
 8032118:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 803211a:	2b10      	cmp	r3, #16
 803211c:	f000 8178 	beq.w	8032410 <mg_str_to_num+0x3e4>
 8032120:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8032122:	2b10      	cmp	r3, #16
 8032124:	f300 817d 	bgt.w	8032422 <mg_str_to_num+0x3f6>
 8032128:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 803212a:	2b02      	cmp	r3, #2
 803212c:	d052      	beq.n	80321d4 <mg_str_to_num+0x1a8>
 803212e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8032130:	2b0a      	cmp	r3, #10
 8032132:	f000 80cd 	beq.w	80322d0 <mg_str_to_num+0x2a4>
 8032136:	e174      	b.n	8032422 <mg_str_to_num+0x3f6>
    case 2:
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 8032138:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 803213a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 803213e:	4413      	add	r3, r2
 8032140:	781b      	ldrb	r3, [r3, #0]
 8032142:	3b30      	subs	r3, #48	@ 0x30
 8032144:	17da      	asrs	r2, r3, #31
 8032146:	633b      	str	r3, [r7, #48]	@ 0x30
 8032148:	637a      	str	r2, [r7, #52]	@ 0x34
 803214a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 803214e:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
        if (result > max / 2) return false;  // Overflow
 8032152:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8032156:	f04f 0200 	mov.w	r2, #0
 803215a:	f04f 0300 	mov.w	r3, #0
 803215e:	0842      	lsrs	r2, r0, #1
 8032160:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8032164:	084b      	lsrs	r3, r1, #1
 8032166:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 803216a:	4282      	cmp	r2, r0
 803216c:	418b      	sbcs	r3, r1
 803216e:	d201      	bcs.n	8032174 <mg_str_to_num+0x148>
 8032170:	2300      	movs	r3, #0
 8032172:	e189      	b.n	8032488 <mg_str_to_num+0x45c>
        result *= 2;
 8032174:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8032178:	1891      	adds	r1, r2, r2
 803217a:	62b9      	str	r1, [r7, #40]	@ 0x28
 803217c:	415b      	adcs	r3, r3
 803217e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8032180:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8032184:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 8032188:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 803218c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8032190:	1a85      	subs	r5, r0, r2
 8032192:	eb61 0603 	sbc.w	r6, r1, r3
 8032196:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 803219a:	4295      	cmp	r5, r2
 803219c:	eb76 0303 	sbcs.w	r3, r6, r3
 80321a0:	d201      	bcs.n	80321a6 <mg_str_to_num+0x17a>
 80321a2:	2300      	movs	r3, #0
 80321a4:	e170      	b.n	8032488 <mg_str_to_num+0x45c>
        result += digit;
 80321a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80321aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80321ae:	1884      	adds	r4, r0, r2
 80321b0:	623c      	str	r4, [r7, #32]
 80321b2:	eb41 0303 	adc.w	r3, r1, r3
 80321b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80321b8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80321bc:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 80321c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80321c4:	3301      	adds	r3, #1
 80321c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80321ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80321ce:	3301      	adds	r3, #1
 80321d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
 80321d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80321d6:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80321da:	429a      	cmp	r2, r3
 80321dc:	f080 8123 	bcs.w	8032426 <mg_str_to_num+0x3fa>
 80321e0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80321e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80321e6:	4413      	add	r3, r2
 80321e8:	781b      	ldrb	r3, [r3, #0]
 80321ea:	2b30      	cmp	r3, #48	@ 0x30
 80321ec:	d0a4      	beq.n	8032138 <mg_str_to_num+0x10c>
 80321ee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80321f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80321f4:	4413      	add	r3, r2
 80321f6:	781b      	ldrb	r3, [r3, #0]
 80321f8:	2b31      	cmp	r3, #49	@ 0x31
 80321fa:	d09d      	beq.n	8032138 <mg_str_to_num+0x10c>
      }
      break;
 80321fc:	e113      	b.n	8032426 <mg_str_to_num+0x3fa>
    case 10:
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 80321fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8032200:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8032204:	4413      	add	r3, r2
 8032206:	781b      	ldrb	r3, [r3, #0]
 8032208:	3b30      	subs	r3, #48	@ 0x30
 803220a:	17da      	asrs	r2, r3, #31
 803220c:	61bb      	str	r3, [r7, #24]
 803220e:	61fa      	str	r2, [r7, #28]
 8032210:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8032214:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60
        if (result > max / 10) return false;  // Overflow
 8032218:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 803221c:	f04f 020a 	mov.w	r2, #10
 8032220:	f04f 0300 	mov.w	r3, #0
 8032224:	f7de fd98 	bl	8010d58 <__aeabi_uldivmod>
 8032228:	4602      	mov	r2, r0
 803222a:	460b      	mov	r3, r1
 803222c:	4610      	mov	r0, r2
 803222e:	4619      	mov	r1, r3
 8032230:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8032234:	4290      	cmp	r0, r2
 8032236:	eb71 0303 	sbcs.w	r3, r1, r3
 803223a:	d201      	bcs.n	8032240 <mg_str_to_num+0x214>
 803223c:	2300      	movs	r3, #0
 803223e:	e123      	b.n	8032488 <mg_str_to_num+0x45c>
        result *= 10;
 8032240:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8032244:	4622      	mov	r2, r4
 8032246:	462b      	mov	r3, r5
 8032248:	f04f 0000 	mov.w	r0, #0
 803224c:	f04f 0100 	mov.w	r1, #0
 8032250:	0099      	lsls	r1, r3, #2
 8032252:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8032256:	0090      	lsls	r0, r2, #2
 8032258:	4602      	mov	r2, r0
 803225a:	460b      	mov	r3, r1
 803225c:	eb12 0804 	adds.w	r8, r2, r4
 8032260:	eb43 0905 	adc.w	r9, r3, r5
 8032264:	eb18 0308 	adds.w	r3, r8, r8
 8032268:	613b      	str	r3, [r7, #16]
 803226a:	eb49 0309 	adc.w	r3, r9, r9
 803226e:	617b      	str	r3, [r7, #20]
 8032270:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8032274:	e9c7 8920 	strd	r8, r9, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 8032278:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 803227c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8032280:	1a84      	subs	r4, r0, r2
 8032282:	63bc      	str	r4, [r7, #56]	@ 0x38
 8032284:	eb61 0303 	sbc.w	r3, r1, r3
 8032288:	63fb      	str	r3, [r7, #60]	@ 0x3c
 803228a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 803228e:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8032292:	4621      	mov	r1, r4
 8032294:	4291      	cmp	r1, r2
 8032296:	4629      	mov	r1, r5
 8032298:	eb71 0303 	sbcs.w	r3, r1, r3
 803229c:	d201      	bcs.n	80322a2 <mg_str_to_num+0x276>
 803229e:	2300      	movs	r3, #0
 80322a0:	e0f2      	b.n	8032488 <mg_str_to_num+0x45c>
        result += digit;
 80322a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80322a6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80322aa:	1884      	adds	r4, r0, r2
 80322ac:	60bc      	str	r4, [r7, #8]
 80322ae:	eb41 0303 	adc.w	r3, r1, r3
 80322b2:	60fb      	str	r3, [r7, #12]
 80322b4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80322b8:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 80322bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80322c0:	3301      	adds	r3, #1
 80322c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80322c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80322ca:	3301      	adds	r3, #1
 80322cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 80322d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80322d2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80322d6:	429a      	cmp	r2, r3
 80322d8:	f080 80a7 	bcs.w	803242a <mg_str_to_num+0x3fe>
 80322dc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80322de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80322e2:	4413      	add	r3, r2
 80322e4:	781b      	ldrb	r3, [r3, #0]
 80322e6:	2b2f      	cmp	r3, #47	@ 0x2f
 80322e8:	f240 809f 	bls.w	803242a <mg_str_to_num+0x3fe>
 80322ec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80322ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80322f2:	4413      	add	r3, r2
 80322f4:	781b      	ldrb	r3, [r3, #0]
 80322f6:	2b39      	cmp	r3, #57	@ 0x39
 80322f8:	d981      	bls.n	80321fe <mg_str_to_num+0x1d2>
      }
      break;
 80322fa:	e096      	b.n	803242a <mg_str_to_num+0x3fe>
    case 16:
      while (i < str.len) {
        char c = str.buf[i];
 80322fc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80322fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8032302:	4413      	add	r3, r2
 8032304:	781b      	ldrb	r3, [r3, #0]
 8032306:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 803230a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 803230e:	2b2f      	cmp	r3, #47	@ 0x2f
 8032310:	d90a      	bls.n	8032328 <mg_str_to_num+0x2fc>
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 8032312:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8032316:	2b39      	cmp	r3, #57	@ 0x39
 8032318:	d806      	bhi.n	8032328 <mg_str_to_num+0x2fc>
 803231a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 803231e:	3b30      	subs	r3, #48	@ 0x30
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8032320:	17da      	asrs	r2, r3, #31
 8032322:	643b      	str	r3, [r7, #64]	@ 0x40
 8032324:	647a      	str	r2, [r7, #68]	@ 0x44
 8032326:	e023      	b.n	8032370 <mg_str_to_num+0x344>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8032328:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 803232c:	2b40      	cmp	r3, #64	@ 0x40
 803232e:	d90a      	bls.n	8032346 <mg_str_to_num+0x31a>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8032330:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8032334:	2b46      	cmp	r3, #70	@ 0x46
 8032336:	d806      	bhi.n	8032346 <mg_str_to_num+0x31a>
 8032338:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 803233c:	3b37      	subs	r3, #55	@ 0x37
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 803233e:	17da      	asrs	r2, r3, #31
 8032340:	643b      	str	r3, [r7, #64]	@ 0x40
 8032342:	647a      	str	r2, [r7, #68]	@ 0x44
 8032344:	e014      	b.n	8032370 <mg_str_to_num+0x344>
                                                  : (uint64_t) ~0;
 8032346:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 803234a:	2b60      	cmp	r3, #96	@ 0x60
 803234c:	d90a      	bls.n	8032364 <mg_str_to_num+0x338>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 803234e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8032352:	2b66      	cmp	r3, #102	@ 0x66
 8032354:	d806      	bhi.n	8032364 <mg_str_to_num+0x338>
 8032356:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 803235a:	3b57      	subs	r3, #87	@ 0x57
                                                  : (uint64_t) ~0;
 803235c:	17da      	asrs	r2, r3, #31
 803235e:	643b      	str	r3, [r7, #64]	@ 0x40
 8032360:	647a      	str	r2, [r7, #68]	@ 0x44
 8032362:	e005      	b.n	8032370 <mg_str_to_num+0x344>
 8032364:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8032368:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 803236c:	e9c7 3410 	strd	r3, r4, [r7, #64]	@ 0x40
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 8032370:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8032374:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
        if (digit == (uint64_t) ~0) break;
 8032378:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 803237c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8032380:	bf08      	it	eq
 8032382:	f1b2 3fff 	cmpeq.w	r2, #4294967295	@ 0xffffffff
 8032386:	d04a      	beq.n	803241e <mg_str_to_num+0x3f2>
        if (result > max / 16) return false;  // Overflow
 8032388:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 803238c:	f04f 0200 	mov.w	r2, #0
 8032390:	f04f 0300 	mov.w	r3, #0
 8032394:	0902      	lsrs	r2, r0, #4
 8032396:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 803239a:	090b      	lsrs	r3, r1, #4
 803239c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80323a0:	4282      	cmp	r2, r0
 80323a2:	418b      	sbcs	r3, r1
 80323a4:	d201      	bcs.n	80323aa <mg_str_to_num+0x37e>
 80323a6:	2300      	movs	r3, #0
 80323a8:	e06e      	b.n	8032488 <mg_str_to_num+0x45c>
        result *= 16;
 80323aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80323ae:	f04f 0200 	mov.w	r2, #0
 80323b2:	f04f 0300 	mov.w	r3, #0
 80323b6:	010b      	lsls	r3, r1, #4
 80323b8:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80323bc:	0102      	lsls	r2, r0, #4
 80323be:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 80323c2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80323c6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80323ca:	ebb0 0a02 	subs.w	sl, r0, r2
 80323ce:	eb61 0b03 	sbc.w	fp, r1, r3
 80323d2:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80323d6:	4592      	cmp	sl, r2
 80323d8:	eb7b 0303 	sbcs.w	r3, fp, r3
 80323dc:	d201      	bcs.n	80323e2 <mg_str_to_num+0x3b6>
 80323de:	2300      	movs	r3, #0
 80323e0:	e052      	b.n	8032488 <mg_str_to_num+0x45c>
        result += digit;
 80323e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80323e6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80323ea:	1884      	adds	r4, r0, r2
 80323ec:	603c      	str	r4, [r7, #0]
 80323ee:	eb41 0303 	adc.w	r3, r1, r3
 80323f2:	607b      	str	r3, [r7, #4]
 80323f4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80323f8:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 80323fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8032400:	3301      	adds	r3, #1
 8032402:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8032406:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 803240a:	3301      	adds	r3, #1
 803240c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len) {
 8032410:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8032412:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8032416:	429a      	cmp	r2, r3
 8032418:	f4ff af70 	bcc.w	80322fc <mg_str_to_num+0x2d0>
      }
      break;
 803241c:	e006      	b.n	803242c <mg_str_to_num+0x400>
        if (digit == (uint64_t) ~0) break;
 803241e:	bf00      	nop
      break;
 8032420:	e004      	b.n	803242c <mg_str_to_num+0x400>
    default:
      return false;
 8032422:	2300      	movs	r3, #0
 8032424:	e030      	b.n	8032488 <mg_str_to_num+0x45c>
      break;
 8032426:	bf00      	nop
 8032428:	e000      	b.n	803242c <mg_str_to_num+0x400>
      break;
 803242a:	bf00      	nop
  }
  if (ndigits == 0) return false;
 803242c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8032430:	2b00      	cmp	r3, #0
 8032432:	d101      	bne.n	8032438 <mg_str_to_num+0x40c>
 8032434:	2300      	movs	r3, #0
 8032436:	e027      	b.n	8032488 <mg_str_to_num+0x45c>
  if (i != str.len) return false;
 8032438:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 803243a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 803243e:	429a      	cmp	r2, r3
 8032440:	d001      	beq.n	8032446 <mg_str_to_num+0x41a>
 8032442:	2300      	movs	r3, #0
 8032444:	e020      	b.n	8032488 <mg_str_to_num+0x45c>
  if (val_len == 1) {
 8032446:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 803244a:	2b01      	cmp	r3, #1
 803244c:	d104      	bne.n	8032458 <mg_str_to_num+0x42c>
    *((uint8_t *) val) = (uint8_t) result;
 803244e:	f897 2080 	ldrb.w	r2, [r7, #128]	@ 0x80
 8032452:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8032454:	701a      	strb	r2, [r3, #0]
 8032456:	e016      	b.n	8032486 <mg_str_to_num+0x45a>
  } else if (val_len == 2) {
 8032458:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 803245c:	2b02      	cmp	r3, #2
 803245e:	d104      	bne.n	803246a <mg_str_to_num+0x43e>
    *((uint16_t *) val) = (uint16_t) result;
 8032460:	f8b7 2080 	ldrh.w	r2, [r7, #128]	@ 0x80
 8032464:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8032466:	801a      	strh	r2, [r3, #0]
 8032468:	e00d      	b.n	8032486 <mg_str_to_num+0x45a>
  } else if (val_len == 4) {
 803246a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 803246e:	2b04      	cmp	r3, #4
 8032470:	d104      	bne.n	803247c <mg_str_to_num+0x450>
    *((uint32_t *) val) = (uint32_t) result;
 8032472:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8032476:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8032478:	601a      	str	r2, [r3, #0]
 803247a:	e004      	b.n	8032486 <mg_str_to_num+0x45a>
  } else {
    *((uint64_t *) val) = (uint64_t) result;
 803247c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 803247e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8032482:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return true;
 8032486:	2301      	movs	r3, #1
}
 8032488:	4618      	mov	r0, r3
 803248a:	3794      	adds	r7, #148	@ 0x94
 803248c:	46bd      	mov	sp, r7
 803248e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08032492 <mg_timer_init>:


#define MG_TIMER_CALLED 4

void mg_timer_init(struct mg_timer **head, struct mg_timer *t, uint64_t ms,
                   unsigned flags, void (*fn)(void *), void *arg) {
 8032492:	b480      	push	{r7}
 8032494:	b085      	sub	sp, #20
 8032496:	af00      	add	r7, sp, #0
 8032498:	60f8      	str	r0, [r7, #12]
 803249a:	60b9      	str	r1, [r7, #8]
 803249c:	e9c7 2300 	strd	r2, r3, [r7]
  t->id = 0, t->period_ms = ms, t->expire = 0;
 80324a0:	68bb      	ldr	r3, [r7, #8]
 80324a2:	2200      	movs	r2, #0
 80324a4:	601a      	str	r2, [r3, #0]
 80324a6:	68b9      	ldr	r1, [r7, #8]
 80324a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80324ac:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80324b0:	68b9      	ldr	r1, [r7, #8]
 80324b2:	f04f 0200 	mov.w	r2, #0
 80324b6:	f04f 0300 	mov.w	r3, #0
 80324ba:	e9c1 2304 	strd	r2, r3, [r1, #16]
  t->flags = flags, t->fn = fn, t->arg = arg, t->next = *head;
 80324be:	68bb      	ldr	r3, [r7, #8]
 80324c0:	69ba      	ldr	r2, [r7, #24]
 80324c2:	619a      	str	r2, [r3, #24]
 80324c4:	68bb      	ldr	r3, [r7, #8]
 80324c6:	69fa      	ldr	r2, [r7, #28]
 80324c8:	61da      	str	r2, [r3, #28]
 80324ca:	68bb      	ldr	r3, [r7, #8]
 80324cc:	6a3a      	ldr	r2, [r7, #32]
 80324ce:	621a      	str	r2, [r3, #32]
 80324d0:	68fb      	ldr	r3, [r7, #12]
 80324d2:	681a      	ldr	r2, [r3, #0]
 80324d4:	68bb      	ldr	r3, [r7, #8]
 80324d6:	625a      	str	r2, [r3, #36]	@ 0x24
  *head = t;
 80324d8:	68fb      	ldr	r3, [r7, #12]
 80324da:	68ba      	ldr	r2, [r7, #8]
 80324dc:	601a      	str	r2, [r3, #0]
}
 80324de:	bf00      	nop
 80324e0:	3714      	adds	r7, #20
 80324e2:	46bd      	mov	sp, r7
 80324e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80324e8:	4770      	bx	lr

080324ea <mg_timer_expired>:
  while (*head && *head != t) head = &(*head)->next;
  if (*head) *head = t->next;
}

// t: expiration time, prd: period, now: current time. Return true if expired
bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 80324ea:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80324ee:	b086      	sub	sp, #24
 80324f0:	af00      	add	r7, sp, #0
 80324f2:	6178      	str	r0, [r7, #20]
 80324f4:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 80324f8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80324fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8032500:	eb10 0a02 	adds.w	sl, r0, r2
 8032504:	eb41 0b03 	adc.w	fp, r1, r3
 8032508:	697b      	ldr	r3, [r7, #20]
 803250a:	e9d3 2300 	ldrd	r2, r3, [r3]
 803250e:	4592      	cmp	sl, r2
 8032510:	eb7b 0303 	sbcs.w	r3, fp, r3
 8032514:	d206      	bcs.n	8032524 <mg_timer_expired+0x3a>
 8032516:	6979      	ldr	r1, [r7, #20]
 8032518:	f04f 0200 	mov.w	r2, #0
 803251c:	f04f 0300 	mov.w	r3, #0
 8032520:	e9c1 2300 	strd	r2, r3, [r1]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 8032524:	697b      	ldr	r3, [r7, #20]
 8032526:	e9d3 2300 	ldrd	r2, r3, [r3]
 803252a:	4313      	orrs	r3, r2
 803252c:	d10d      	bne.n	803254a <mg_timer_expired+0x60>
 803252e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8032532:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8032536:	1886      	adds	r6, r0, r2
 8032538:	603e      	str	r6, [r7, #0]
 803253a:	eb41 0303 	adc.w	r3, r1, r3
 803253e:	607b      	str	r3, [r7, #4]
 8032540:	697b      	ldr	r3, [r7, #20]
 8032542:	e9d7 1200 	ldrd	r1, r2, [r7]
 8032546:	e9c3 1200 	strd	r1, r2, [r3]
  if (*t > now) return false;                    // Not expired yet, return
 803254a:	697b      	ldr	r3, [r7, #20]
 803254c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8032550:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8032554:	4290      	cmp	r0, r2
 8032556:	eb71 0303 	sbcs.w	r3, r1, r3
 803255a:	d201      	bcs.n	8032560 <mg_timer_expired+0x76>
 803255c:	2300      	movs	r3, #0
 803255e:	e022      	b.n	80325a6 <mg_timer_expired+0xbc>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 8032560:	697b      	ldr	r3, [r7, #20]
 8032562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8032566:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 803256a:	ebb0 0802 	subs.w	r8, r0, r2
 803256e:	eb61 0903 	sbc.w	r9, r1, r3
 8032572:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8032576:	4542      	cmp	r2, r8
 8032578:	eb73 0309 	sbcs.w	r3, r3, r9
 803257c:	d207      	bcs.n	803258e <mg_timer_expired+0xa4>
 803257e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8032582:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8032586:	1884      	adds	r4, r0, r2
 8032588:	eb41 0503 	adc.w	r5, r1, r3
 803258c:	e007      	b.n	803259e <mg_timer_expired+0xb4>
 803258e:	697b      	ldr	r3, [r7, #20]
 8032590:	e9d3 0100 	ldrd	r0, r1, [r3]
 8032594:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8032598:	1884      	adds	r4, r0, r2
 803259a:	eb41 0503 	adc.w	r5, r1, r3
 803259e:	697b      	ldr	r3, [r7, #20]
 80325a0:	e9c3 4500 	strd	r4, r5, [r3]
  return true;                                   // Expired, return true
 80325a4:	2301      	movs	r3, #1
}
 80325a6:	4618      	mov	r0, r3
 80325a8:	3718      	adds	r7, #24
 80325aa:	46bd      	mov	sp, r7
 80325ac:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80325b0:	4770      	bx	lr

080325b2 <mg_timer_poll>:

void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {
 80325b2:	b590      	push	{r4, r7, lr}
 80325b4:	b08b      	sub	sp, #44	@ 0x2c
 80325b6:	af02      	add	r7, sp, #8
 80325b8:	60f8      	str	r0, [r7, #12]
 80325ba:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t, *tmp;
  for (t = *head; t != NULL; t = tmp) {
 80325be:	68fb      	ldr	r3, [r7, #12]
 80325c0:	681b      	ldr	r3, [r3, #0]
 80325c2:	61fb      	str	r3, [r7, #28]
 80325c4:	e054      	b.n	8032670 <mg_timer_poll+0xbe>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 80325c6:	69fb      	ldr	r3, [r7, #28]
 80325c8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80325cc:	4313      	orrs	r3, r2
 80325ce:	d10d      	bne.n	80325ec <mg_timer_poll+0x3a>
 80325d0:	69fb      	ldr	r3, [r7, #28]
 80325d2:	699b      	ldr	r3, [r3, #24]
 80325d4:	f003 0302 	and.w	r3, r3, #2
 80325d8:	2b00      	cmp	r3, #0
 80325da:	d007      	beq.n	80325ec <mg_timer_poll+0x3a>
                !(t->flags & MG_TIMER_CALLED);  // Handle MG_TIMER_NOW only once
 80325dc:	69fb      	ldr	r3, [r7, #28]
 80325de:	699b      	ldr	r3, [r3, #24]
 80325e0:	f003 0304 	and.w	r3, r3, #4
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 80325e4:	2b00      	cmp	r3, #0
 80325e6:	d101      	bne.n	80325ec <mg_timer_poll+0x3a>
 80325e8:	2301      	movs	r3, #1
 80325ea:	e000      	b.n	80325ee <mg_timer_poll+0x3c>
 80325ec:	2300      	movs	r3, #0
 80325ee:	76fb      	strb	r3, [r7, #27]
 80325f0:	7efb      	ldrb	r3, [r7, #27]
 80325f2:	f003 0301 	and.w	r3, r3, #1
 80325f6:	76fb      	strb	r3, [r7, #27]
    bool expired = mg_timer_expired(&t->expire, t->period_ms, now_ms);
 80325f8:	69fb      	ldr	r3, [r7, #28]
 80325fa:	f103 0410 	add.w	r4, r3, #16
 80325fe:	69fb      	ldr	r3, [r7, #28]
 8032600:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8032604:	e9d7 2300 	ldrd	r2, r3, [r7]
 8032608:	e9cd 2300 	strd	r2, r3, [sp]
 803260c:	4602      	mov	r2, r0
 803260e:	460b      	mov	r3, r1
 8032610:	4620      	mov	r0, r4
 8032612:	f7ff ff6a 	bl	80324ea <mg_timer_expired>
 8032616:	4603      	mov	r3, r0
 8032618:	76bb      	strb	r3, [r7, #26]
    tmp = t->next;
 803261a:	69fb      	ldr	r3, [r7, #28]
 803261c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 803261e:	617b      	str	r3, [r7, #20]
    if (!once && !expired) continue;
 8032620:	7efb      	ldrb	r3, [r7, #27]
 8032622:	f083 0301 	eor.w	r3, r3, #1
 8032626:	b2db      	uxtb	r3, r3
 8032628:	2b00      	cmp	r3, #0
 803262a:	d005      	beq.n	8032638 <mg_timer_poll+0x86>
 803262c:	7ebb      	ldrb	r3, [r7, #26]
 803262e:	f083 0301 	eor.w	r3, r3, #1
 8032632:	b2db      	uxtb	r3, r3
 8032634:	2b00      	cmp	r3, #0
 8032636:	d118      	bne.n	803266a <mg_timer_poll+0xb8>
    if ((t->flags & MG_TIMER_REPEAT) || !(t->flags & MG_TIMER_CALLED)) {
 8032638:	69fb      	ldr	r3, [r7, #28]
 803263a:	699b      	ldr	r3, [r3, #24]
 803263c:	f003 0301 	and.w	r3, r3, #1
 8032640:	2b00      	cmp	r3, #0
 8032642:	d105      	bne.n	8032650 <mg_timer_poll+0x9e>
 8032644:	69fb      	ldr	r3, [r7, #28]
 8032646:	699b      	ldr	r3, [r3, #24]
 8032648:	f003 0304 	and.w	r3, r3, #4
 803264c:	2b00      	cmp	r3, #0
 803264e:	d105      	bne.n	803265c <mg_timer_poll+0xaa>
      t->fn(t->arg);
 8032650:	69fb      	ldr	r3, [r7, #28]
 8032652:	69db      	ldr	r3, [r3, #28]
 8032654:	69fa      	ldr	r2, [r7, #28]
 8032656:	6a12      	ldr	r2, [r2, #32]
 8032658:	4610      	mov	r0, r2
 803265a:	4798      	blx	r3
    }
    t->flags |= MG_TIMER_CALLED;
 803265c:	69fb      	ldr	r3, [r7, #28]
 803265e:	699b      	ldr	r3, [r3, #24]
 8032660:	f043 0204 	orr.w	r2, r3, #4
 8032664:	69fb      	ldr	r3, [r7, #28]
 8032666:	619a      	str	r2, [r3, #24]
 8032668:	e000      	b.n	803266c <mg_timer_poll+0xba>
    if (!once && !expired) continue;
 803266a:	bf00      	nop
  for (t = *head; t != NULL; t = tmp) {
 803266c:	697b      	ldr	r3, [r7, #20]
 803266e:	61fb      	str	r3, [r7, #28]
 8032670:	69fb      	ldr	r3, [r7, #28]
 8032672:	2b00      	cmp	r3, #0
 8032674:	d1a7      	bne.n	80325c6 <mg_timer_poll+0x14>
  }
}
 8032676:	bf00      	nop
 8032678:	bf00      	nop
 803267a:	3724      	adds	r7, #36	@ 0x24
 803267c:	46bd      	mov	sp, r7
 803267e:	bd90      	pop	{r4, r7, pc}

08032680 <mg_tls_handshake>:
#if MG_TLS == MG_TLS_NONE
void mg_tls_init(struct mg_connection *c, const struct mg_tls_opts *opts) {
  (void) opts;
  mg_error(c, "TLS is not enabled");
}
void mg_tls_handshake(struct mg_connection *c) {
 8032680:	b480      	push	{r7}
 8032682:	b083      	sub	sp, #12
 8032684:	af00      	add	r7, sp, #0
 8032686:	6078      	str	r0, [r7, #4]
  (void) c;
}
 8032688:	bf00      	nop
 803268a:	370c      	adds	r7, #12
 803268c:	46bd      	mov	sp, r7
 803268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032692:	4770      	bx	lr

08032694 <mg_tls_free>:
void mg_tls_free(struct mg_connection *c) {
 8032694:	b480      	push	{r7}
 8032696:	b083      	sub	sp, #12
 8032698:	af00      	add	r7, sp, #0
 803269a:	6078      	str	r0, [r7, #4]
  (void) c;
}
 803269c:	bf00      	nop
 803269e:	370c      	adds	r7, #12
 80326a0:	46bd      	mov	sp, r7
 80326a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80326a6:	4770      	bx	lr

080326a8 <mg_tls_recv>:
long mg_tls_recv(struct mg_connection *c, void *buf, size_t len) {
 80326a8:	b480      	push	{r7}
 80326aa:	b085      	sub	sp, #20
 80326ac:	af00      	add	r7, sp, #0
 80326ae:	60f8      	str	r0, [r7, #12]
 80326b0:	60b9      	str	r1, [r7, #8]
 80326b2:	607a      	str	r2, [r7, #4]
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 80326b4:	68fb      	ldr	r3, [r7, #12]
 80326b6:	2b00      	cmp	r3, #0
 80326b8:	d005      	beq.n	80326c6 <mg_tls_recv+0x1e>
 80326ba:	68bb      	ldr	r3, [r7, #8]
 80326bc:	2b00      	cmp	r3, #0
 80326be:	d002      	beq.n	80326c6 <mg_tls_recv+0x1e>
 80326c0:	687b      	ldr	r3, [r7, #4]
 80326c2:	2b00      	cmp	r3, #0
 80326c4:	d101      	bne.n	80326ca <mg_tls_recv+0x22>
 80326c6:	2300      	movs	r3, #0
 80326c8:	e001      	b.n	80326ce <mg_tls_recv+0x26>
 80326ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80326ce:	4618      	mov	r0, r3
 80326d0:	3714      	adds	r7, #20
 80326d2:	46bd      	mov	sp, r7
 80326d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80326d8:	4770      	bx	lr

080326da <mg_tls_send>:
long mg_tls_send(struct mg_connection *c, const void *buf, size_t len) {
 80326da:	b480      	push	{r7}
 80326dc:	b085      	sub	sp, #20
 80326de:	af00      	add	r7, sp, #0
 80326e0:	60f8      	str	r0, [r7, #12]
 80326e2:	60b9      	str	r1, [r7, #8]
 80326e4:	607a      	str	r2, [r7, #4]
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 80326e6:	68fb      	ldr	r3, [r7, #12]
 80326e8:	2b00      	cmp	r3, #0
 80326ea:	d005      	beq.n	80326f8 <mg_tls_send+0x1e>
 80326ec:	68bb      	ldr	r3, [r7, #8]
 80326ee:	2b00      	cmp	r3, #0
 80326f0:	d002      	beq.n	80326f8 <mg_tls_send+0x1e>
 80326f2:	687b      	ldr	r3, [r7, #4]
 80326f4:	2b00      	cmp	r3, #0
 80326f6:	d101      	bne.n	80326fc <mg_tls_send+0x22>
 80326f8:	2300      	movs	r3, #0
 80326fa:	e001      	b.n	8032700 <mg_tls_send+0x26>
 80326fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8032700:	4618      	mov	r0, r3
 8032702:	3714      	adds	r7, #20
 8032704:	46bd      	mov	sp, r7
 8032706:	f85d 7b04 	ldr.w	r7, [sp], #4
 803270a:	4770      	bx	lr

0803270c <mg_tls_pending>:
size_t mg_tls_pending(struct mg_connection *c) {
 803270c:	b480      	push	{r7}
 803270e:	b083      	sub	sp, #12
 8032710:	af00      	add	r7, sp, #0
 8032712:	6078      	str	r0, [r7, #4]
  (void) c;
  return 0;
 8032714:	2300      	movs	r3, #0
}
 8032716:	4618      	mov	r0, r3
 8032718:	370c      	adds	r7, #12
 803271a:	46bd      	mov	sp, r7
 803271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032720:	4770      	bx	lr

08032722 <mg_tls_ctx_init>:
void mg_tls_ctx_init(struct mg_mgr *mgr) {
 8032722:	b480      	push	{r7}
 8032724:	b083      	sub	sp, #12
 8032726:	af00      	add	r7, sp, #0
 8032728:	6078      	str	r0, [r7, #4]
  (void) mgr;
}
 803272a:	bf00      	nop
 803272c:	370c      	adds	r7, #12
 803272e:	46bd      	mov	sp, r7
 8032730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032734:	4770      	bx	lr
	...

08032738 <mg_url_is_ssl>:

struct url {
  size_t key, user, pass, host, port, uri, end;
};

int mg_url_is_ssl(const char *url) {
 8032738:	b580      	push	{r7, lr}
 803273a:	b082      	sub	sp, #8
 803273c:	af00      	add	r7, sp, #0
 803273e:	6078      	str	r0, [r7, #4]
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8032740:	2204      	movs	r2, #4
 8032742:	491b      	ldr	r1, [pc, #108]	@ (80327b0 <mg_url_is_ssl+0x78>)
 8032744:	6878      	ldr	r0, [r7, #4]
 8032746:	f003 fb88 	bl	8035e5a <strncmp>
 803274a:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 803274c:	2b00      	cmp	r3, #0
 803274e:	d027      	beq.n	80327a0 <mg_url_is_ssl+0x68>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8032750:	2206      	movs	r2, #6
 8032752:	4918      	ldr	r1, [pc, #96]	@ (80327b4 <mg_url_is_ssl+0x7c>)
 8032754:	6878      	ldr	r0, [r7, #4]
 8032756:	f003 fb80 	bl	8035e5a <strncmp>
 803275a:	4603      	mov	r3, r0
 803275c:	2b00      	cmp	r3, #0
 803275e:	d01f      	beq.n	80327a0 <mg_url_is_ssl+0x68>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8032760:	2206      	movs	r2, #6
 8032762:	4915      	ldr	r1, [pc, #84]	@ (80327b8 <mg_url_is_ssl+0x80>)
 8032764:	6878      	ldr	r0, [r7, #4]
 8032766:	f003 fb78 	bl	8035e5a <strncmp>
 803276a:	4603      	mov	r3, r0
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 803276c:	2b00      	cmp	r3, #0
 803276e:	d017      	beq.n	80327a0 <mg_url_is_ssl+0x68>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8032770:	2204      	movs	r2, #4
 8032772:	4912      	ldr	r1, [pc, #72]	@ (80327bc <mg_url_is_ssl+0x84>)
 8032774:	6878      	ldr	r0, [r7, #4]
 8032776:	f003 fb70 	bl	8035e5a <strncmp>
 803277a:	4603      	mov	r3, r0
 803277c:	2b00      	cmp	r3, #0
 803277e:	d00f      	beq.n	80327a0 <mg_url_is_ssl+0x68>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8032780:	2204      	movs	r2, #4
 8032782:	490f      	ldr	r1, [pc, #60]	@ (80327c0 <mg_url_is_ssl+0x88>)
 8032784:	6878      	ldr	r0, [r7, #4]
 8032786:	f003 fb68 	bl	8035e5a <strncmp>
 803278a:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 803278c:	2b00      	cmp	r3, #0
 803278e:	d007      	beq.n	80327a0 <mg_url_is_ssl+0x68>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8032790:	2205      	movs	r2, #5
 8032792:	490c      	ldr	r1, [pc, #48]	@ (80327c4 <mg_url_is_ssl+0x8c>)
 8032794:	6878      	ldr	r0, [r7, #4]
 8032796:	f003 fb60 	bl	8035e5a <strncmp>
 803279a:	4603      	mov	r3, r0
 803279c:	2b00      	cmp	r3, #0
 803279e:	d101      	bne.n	80327a4 <mg_url_is_ssl+0x6c>
 80327a0:	2301      	movs	r3, #1
 80327a2:	e000      	b.n	80327a6 <mg_url_is_ssl+0x6e>
 80327a4:	2300      	movs	r3, #0
}
 80327a6:	4618      	mov	r0, r3
 80327a8:	3708      	adds	r7, #8
 80327aa:	46bd      	mov	sp, r7
 80327ac:	bd80      	pop	{r7, pc}
 80327ae:	bf00      	nop
 80327b0:	080432ac 	.word	0x080432ac
 80327b4:	080432b4 	.word	0x080432b4
 80327b8:	080432bc 	.word	0x080432bc
 80327bc:	080432c4 	.word	0x080432c4
 80327c0:	080432cc 	.word	0x080432cc
 80327c4:	080432d4 	.word	0x080432d4

080327c8 <urlparse>:

static struct url urlparse(const char *url) {
 80327c8:	b5b0      	push	{r4, r5, r7, lr}
 80327ca:	b08a      	sub	sp, #40	@ 0x28
 80327cc:	af00      	add	r7, sp, #0
 80327ce:	6078      	str	r0, [r7, #4]
 80327d0:	6039      	str	r1, [r7, #0]
  size_t i;
  struct url u;
  memset(&u, 0, sizeof(u));
 80327d2:	f107 0308 	add.w	r3, r7, #8
 80327d6:	221c      	movs	r2, #28
 80327d8:	2100      	movs	r1, #0
 80327da:	4618      	mov	r0, r3
 80327dc:	f003 fb08 	bl	8035df0 <memset>
  for (i = 0; url[i] != '\0'; i++) {
 80327e0:	2300      	movs	r3, #0
 80327e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80327e4:	e05b      	b.n	803289e <urlparse+0xd6>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 80327e6:	683a      	ldr	r2, [r7, #0]
 80327e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80327ea:	4413      	add	r3, r2
 80327ec:	781b      	ldrb	r3, [r3, #0]
 80327ee:	2b2f      	cmp	r3, #47	@ 0x2f
 80327f0:	d112      	bne.n	8032818 <urlparse+0x50>
 80327f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80327f4:	2b00      	cmp	r3, #0
 80327f6:	d00f      	beq.n	8032818 <urlparse+0x50>
 80327f8:	697b      	ldr	r3, [r7, #20]
 80327fa:	2b00      	cmp	r3, #0
 80327fc:	d10c      	bne.n	8032818 <urlparse+0x50>
 80327fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032800:	3b01      	subs	r3, #1
 8032802:	683a      	ldr	r2, [r7, #0]
 8032804:	4413      	add	r3, r2
 8032806:	781b      	ldrb	r3, [r3, #0]
 8032808:	2b2f      	cmp	r3, #47	@ 0x2f
 803280a:	d105      	bne.n	8032818 <urlparse+0x50>
      u.host = i + 1;
 803280c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803280e:	3301      	adds	r3, #1
 8032810:	617b      	str	r3, [r7, #20]
      u.port = 0;
 8032812:	2300      	movs	r3, #0
 8032814:	61bb      	str	r3, [r7, #24]
 8032816:	e03f      	b.n	8032898 <urlparse+0xd0>
    } else if (url[i] == ']') {
 8032818:	683a      	ldr	r2, [r7, #0]
 803281a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803281c:	4413      	add	r3, r2
 803281e:	781b      	ldrb	r3, [r3, #0]
 8032820:	2b5d      	cmp	r3, #93	@ 0x5d
 8032822:	d102      	bne.n	803282a <urlparse+0x62>
      u.port = 0;  // IPv6 URLs, like http://[::1]/bar
 8032824:	2300      	movs	r3, #0
 8032826:	61bb      	str	r3, [r7, #24]
 8032828:	e036      	b.n	8032898 <urlparse+0xd0>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 803282a:	683a      	ldr	r2, [r7, #0]
 803282c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803282e:	4413      	add	r3, r2
 8032830:	781b      	ldrb	r3, [r3, #0]
 8032832:	2b3a      	cmp	r3, #58	@ 0x3a
 8032834:	d109      	bne.n	803284a <urlparse+0x82>
 8032836:	69bb      	ldr	r3, [r7, #24]
 8032838:	2b00      	cmp	r3, #0
 803283a:	d106      	bne.n	803284a <urlparse+0x82>
 803283c:	69fb      	ldr	r3, [r7, #28]
 803283e:	2b00      	cmp	r3, #0
 8032840:	d103      	bne.n	803284a <urlparse+0x82>
      u.port = i + 1;
 8032842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032844:	3301      	adds	r3, #1
 8032846:	61bb      	str	r3, [r7, #24]
 8032848:	e026      	b.n	8032898 <urlparse+0xd0>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 803284a:	683a      	ldr	r2, [r7, #0]
 803284c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803284e:	4413      	add	r3, r2
 8032850:	781b      	ldrb	r3, [r3, #0]
 8032852:	2b40      	cmp	r3, #64	@ 0x40
 8032854:	d112      	bne.n	803287c <urlparse+0xb4>
 8032856:	68fb      	ldr	r3, [r7, #12]
 8032858:	2b00      	cmp	r3, #0
 803285a:	d10f      	bne.n	803287c <urlparse+0xb4>
 803285c:	693b      	ldr	r3, [r7, #16]
 803285e:	2b00      	cmp	r3, #0
 8032860:	d10c      	bne.n	803287c <urlparse+0xb4>
 8032862:	69fb      	ldr	r3, [r7, #28]
 8032864:	2b00      	cmp	r3, #0
 8032866:	d109      	bne.n	803287c <urlparse+0xb4>
      u.user = u.host;
 8032868:	697b      	ldr	r3, [r7, #20]
 803286a:	60fb      	str	r3, [r7, #12]
      u.pass = u.port;
 803286c:	69bb      	ldr	r3, [r7, #24]
 803286e:	613b      	str	r3, [r7, #16]
      u.host = i + 1;
 8032870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032872:	3301      	adds	r3, #1
 8032874:	617b      	str	r3, [r7, #20]
      u.port = 0;
 8032876:	2300      	movs	r3, #0
 8032878:	61bb      	str	r3, [r7, #24]
 803287a:	e00d      	b.n	8032898 <urlparse+0xd0>
    } else if (url[i] == '/' && u.host && u.uri == 0) {
 803287c:	683a      	ldr	r2, [r7, #0]
 803287e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032880:	4413      	add	r3, r2
 8032882:	781b      	ldrb	r3, [r3, #0]
 8032884:	2b2f      	cmp	r3, #47	@ 0x2f
 8032886:	d107      	bne.n	8032898 <urlparse+0xd0>
 8032888:	697b      	ldr	r3, [r7, #20]
 803288a:	2b00      	cmp	r3, #0
 803288c:	d004      	beq.n	8032898 <urlparse+0xd0>
 803288e:	69fb      	ldr	r3, [r7, #28]
 8032890:	2b00      	cmp	r3, #0
 8032892:	d101      	bne.n	8032898 <urlparse+0xd0>
      u.uri = i;
 8032894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032896:	61fb      	str	r3, [r7, #28]
  for (i = 0; url[i] != '\0'; i++) {
 8032898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803289a:	3301      	adds	r3, #1
 803289c:	627b      	str	r3, [r7, #36]	@ 0x24
 803289e:	683a      	ldr	r2, [r7, #0]
 80328a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80328a2:	4413      	add	r3, r2
 80328a4:	781b      	ldrb	r3, [r3, #0]
 80328a6:	2b00      	cmp	r3, #0
 80328a8:	d19d      	bne.n	80327e6 <urlparse+0x1e>
    }
  }
  u.end = i;
 80328aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80328ac:	623b      	str	r3, [r7, #32]
#if 0
  printf("[%s] %d %d %d %d %d\n", url, u.user, u.pass, u.host, u.port, u.uri);
#endif
  return u;
 80328ae:	687b      	ldr	r3, [r7, #4]
 80328b0:	461d      	mov	r5, r3
 80328b2:	f107 0408 	add.w	r4, r7, #8
 80328b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80328b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80328ba:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80328be:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80328c2:	6878      	ldr	r0, [r7, #4]
 80328c4:	3728      	adds	r7, #40	@ 0x28
 80328c6:	46bd      	mov	sp, r7
 80328c8:	bdb0      	pop	{r4, r5, r7, pc}

080328ca <mg_url_host>:

struct mg_str mg_url_host(const char *url) {
 80328ca:	b580      	push	{r7, lr}
 80328cc:	b08c      	sub	sp, #48	@ 0x30
 80328ce:	af00      	add	r7, sp, #0
 80328d0:	6078      	str	r0, [r7, #4]
 80328d2:	6039      	str	r1, [r7, #0]
  struct url u = urlparse(url);
 80328d4:	f107 0310 	add.w	r3, r7, #16
 80328d8:	6839      	ldr	r1, [r7, #0]
 80328da:	4618      	mov	r0, r3
 80328dc:	f7ff ff74 	bl	80327c8 <urlparse>
  size_t n = u.port  ? u.port - u.host - 1
 80328e0:	6a3b      	ldr	r3, [r7, #32]
             : u.uri ? u.uri - u.host
 80328e2:	2b00      	cmp	r3, #0
 80328e4:	d004      	beq.n	80328f0 <mg_url_host+0x26>
  size_t n = u.port  ? u.port - u.host - 1
 80328e6:	6a3a      	ldr	r2, [r7, #32]
 80328e8:	69fb      	ldr	r3, [r7, #28]
 80328ea:	1ad3      	subs	r3, r2, r3
             : u.uri ? u.uri - u.host
 80328ec:	3b01      	subs	r3, #1
 80328ee:	e009      	b.n	8032904 <mg_url_host+0x3a>
 80328f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                     : u.end - u.host;
 80328f2:	2b00      	cmp	r3, #0
 80328f4:	d003      	beq.n	80328fe <mg_url_host+0x34>
             : u.uri ? u.uri - u.host
 80328f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80328f8:	69fb      	ldr	r3, [r7, #28]
                     : u.end - u.host;
 80328fa:	1ad3      	subs	r3, r2, r3
 80328fc:	e002      	b.n	8032904 <mg_url_host+0x3a>
 80328fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8032900:	69fb      	ldr	r3, [r7, #28]
 8032902:	1ad3      	subs	r3, r2, r3
  size_t n = u.port  ? u.port - u.host - 1
 8032904:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct mg_str s = mg_str_n(url + u.host, n);
 8032906:	69fb      	ldr	r3, [r7, #28]
 8032908:	683a      	ldr	r2, [r7, #0]
 803290a:	18d1      	adds	r1, r2, r3
 803290c:	f107 0308 	add.w	r3, r7, #8
 8032910:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8032912:	4618      	mov	r0, r3
 8032914:	f7ff f983 	bl	8031c1e <mg_str_n>
  return s;
 8032918:	687b      	ldr	r3, [r7, #4]
 803291a:	461a      	mov	r2, r3
 803291c:	f107 0308 	add.w	r3, r7, #8
 8032920:	e893 0003 	ldmia.w	r3, {r0, r1}
 8032924:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8032928:	6878      	ldr	r0, [r7, #4]
 803292a:	3730      	adds	r7, #48	@ 0x30
 803292c:	46bd      	mov	sp, r7
 803292e:	bd80      	pop	{r7, pc}

08032930 <mg_url_port>:
const char *mg_url_uri(const char *url) {
  struct url u = urlparse(url);
  return u.uri ? url + u.uri : "/";
}

unsigned short mg_url_port(const char *url) {
 8032930:	b580      	push	{r7, lr}
 8032932:	b08a      	sub	sp, #40	@ 0x28
 8032934:	af00      	add	r7, sp, #0
 8032936:	6078      	str	r0, [r7, #4]
  struct url u = urlparse(url);
 8032938:	f107 0308 	add.w	r3, r7, #8
 803293c:	6879      	ldr	r1, [r7, #4]
 803293e:	4618      	mov	r0, r3
 8032940:	f7ff ff42 	bl	80327c8 <urlparse>
  unsigned short port = 0;
 8032944:	2300      	movs	r3, #0
 8032946:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 8032948:	2205      	movs	r2, #5
 803294a:	4925      	ldr	r1, [pc, #148]	@ (80329e0 <mg_url_port+0xb0>)
 803294c:	6878      	ldr	r0, [r7, #4]
 803294e:	f003 fa84 	bl	8035e5a <strncmp>
 8032952:	4603      	mov	r3, r0
 8032954:	2b00      	cmp	r3, #0
 8032956:	d007      	beq.n	8032968 <mg_url_port+0x38>
 8032958:	2203      	movs	r2, #3
 803295a:	4922      	ldr	r1, [pc, #136]	@ (80329e4 <mg_url_port+0xb4>)
 803295c:	6878      	ldr	r0, [r7, #4]
 803295e:	f003 fa7c 	bl	8035e5a <strncmp>
 8032962:	4603      	mov	r3, r0
 8032964:	2b00      	cmp	r3, #0
 8032966:	d101      	bne.n	803296c <mg_url_port+0x3c>
 8032968:	2350      	movs	r3, #80	@ 0x50
 803296a:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0)
 803296c:	2204      	movs	r2, #4
 803296e:	491e      	ldr	r1, [pc, #120]	@ (80329e8 <mg_url_port+0xb8>)
 8032970:	6878      	ldr	r0, [r7, #4]
 8032972:	f003 fa72 	bl	8035e5a <strncmp>
 8032976:	4603      	mov	r3, r0
 8032978:	2b00      	cmp	r3, #0
 803297a:	d007      	beq.n	803298c <mg_url_port+0x5c>
 803297c:	2206      	movs	r2, #6
 803297e:	491b      	ldr	r1, [pc, #108]	@ (80329ec <mg_url_port+0xbc>)
 8032980:	6878      	ldr	r0, [r7, #4]
 8032982:	f003 fa6a 	bl	8035e5a <strncmp>
 8032986:	4603      	mov	r3, r0
 8032988:	2b00      	cmp	r3, #0
 803298a:	d102      	bne.n	8032992 <mg_url_port+0x62>
    port = 443;
 803298c:	f240 13bb 	movw	r3, #443	@ 0x1bb
 8032990:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "mqtt:", 5) == 0) port = 1883;
 8032992:	2205      	movs	r2, #5
 8032994:	4916      	ldr	r1, [pc, #88]	@ (80329f0 <mg_url_port+0xc0>)
 8032996:	6878      	ldr	r0, [r7, #4]
 8032998:	f003 fa5f 	bl	8035e5a <strncmp>
 803299c:	4603      	mov	r3, r0
 803299e:	2b00      	cmp	r3, #0
 80329a0:	d102      	bne.n	80329a8 <mg_url_port+0x78>
 80329a2:	f240 735b 	movw	r3, #1883	@ 0x75b
 80329a6:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "mqtts:", 6) == 0) port = 8883;
 80329a8:	2206      	movs	r2, #6
 80329aa:	4912      	ldr	r1, [pc, #72]	@ (80329f4 <mg_url_port+0xc4>)
 80329ac:	6878      	ldr	r0, [r7, #4]
 80329ae:	f003 fa54 	bl	8035e5a <strncmp>
 80329b2:	4603      	mov	r3, r0
 80329b4:	2b00      	cmp	r3, #0
 80329b6:	d102      	bne.n	80329be <mg_url_port+0x8e>
 80329b8:	f242 23b3 	movw	r3, #8883	@ 0x22b3
 80329bc:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (u.port) port = (unsigned short) atoi(url + u.port);
 80329be:	69bb      	ldr	r3, [r7, #24]
 80329c0:	2b00      	cmp	r3, #0
 80329c2:	d007      	beq.n	80329d4 <mg_url_port+0xa4>
 80329c4:	69bb      	ldr	r3, [r7, #24]
 80329c6:	687a      	ldr	r2, [r7, #4]
 80329c8:	4413      	add	r3, r2
 80329ca:	4618      	mov	r0, r3
 80329cc:	f000 fcda 	bl	8033384 <atoi>
 80329d0:	4603      	mov	r3, r0
 80329d2:	84fb      	strh	r3, [r7, #38]	@ 0x26
  return port;
 80329d4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 80329d6:	4618      	mov	r0, r3
 80329d8:	3728      	adds	r7, #40	@ 0x28
 80329da:	46bd      	mov	sp, r7
 80329dc:	bd80      	pop	{r7, pc}
 80329de:	bf00      	nop
 80329e0:	080432dc 	.word	0x080432dc
 80329e4:	080432e4 	.word	0x080432e4
 80329e8:	080432ac 	.word	0x080432ac
 80329ec:	080432b4 	.word	0x080432b4
 80329f0:	080432e8 	.word	0x080432e8
 80329f4:	080432bc 	.word	0x080432bc

080329f8 <mg_bzero>:
#endif


// Not using memset for zeroing memory, cause it can be dropped by compiler
// See https://github.com/cesanta/mongoose/pull/1265
void mg_bzero(volatile unsigned char *buf, size_t len) {
 80329f8:	b480      	push	{r7}
 80329fa:	b083      	sub	sp, #12
 80329fc:	af00      	add	r7, sp, #0
 80329fe:	6078      	str	r0, [r7, #4]
 8032a00:	6039      	str	r1, [r7, #0]
  if (buf != NULL) {
 8032a02:	687b      	ldr	r3, [r7, #4]
 8032a04:	2b00      	cmp	r3, #0
 8032a06:	d00a      	beq.n	8032a1e <mg_bzero+0x26>
    while (len--) *buf++ = 0;
 8032a08:	e004      	b.n	8032a14 <mg_bzero+0x1c>
 8032a0a:	687b      	ldr	r3, [r7, #4]
 8032a0c:	1c5a      	adds	r2, r3, #1
 8032a0e:	607a      	str	r2, [r7, #4]
 8032a10:	2200      	movs	r2, #0
 8032a12:	701a      	strb	r2, [r3, #0]
 8032a14:	683b      	ldr	r3, [r7, #0]
 8032a16:	1e5a      	subs	r2, r3, #1
 8032a18:	603a      	str	r2, [r7, #0]
 8032a1a:	2b00      	cmp	r3, #0
 8032a1c:	d1f5      	bne.n	8032a0a <mg_bzero+0x12>
  }
}
 8032a1e:	bf00      	nop
 8032a20:	370c      	adds	r7, #12
 8032a22:	46bd      	mov	sp, r7
 8032a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032a28:	4770      	bx	lr

08032a2a <mg_random>:

#if MG_ENABLE_CUSTOM_RANDOM
#else
void mg_random(void *buf, size_t len) {
 8032a2a:	b580      	push	{r7, lr}
 8032a2c:	b084      	sub	sp, #16
 8032a2e:	af00      	add	r7, sp, #0
 8032a30:	6078      	str	r0, [r7, #4]
 8032a32:	6039      	str	r1, [r7, #0]
  bool done = false;
 8032a34:	2300      	movs	r3, #0
 8032a36:	72fb      	strb	r3, [r7, #11]
  unsigned char *p = (unsigned char *) buf;
 8032a38:	687b      	ldr	r3, [r7, #4]
 8032a3a:	60fb      	str	r3, [r7, #12]
    if (fread(buf, 1, len, fp) == len) done = true;
    fclose(fp);
  }
#endif
  // If everything above did not work, fallback to a pseudo random generator
  while (!done && len--) *p++ = (unsigned char) (rand() & 255);
 8032a3c:	e007      	b.n	8032a4e <mg_random+0x24>
 8032a3e:	f002 fc91 	bl	8035364 <rand>
 8032a42:	4601      	mov	r1, r0
 8032a44:	68fb      	ldr	r3, [r7, #12]
 8032a46:	1c5a      	adds	r2, r3, #1
 8032a48:	60fa      	str	r2, [r7, #12]
 8032a4a:	b2ca      	uxtb	r2, r1
 8032a4c:	701a      	strb	r2, [r3, #0]
 8032a4e:	7afb      	ldrb	r3, [r7, #11]
 8032a50:	f083 0301 	eor.w	r3, r3, #1
 8032a54:	b2db      	uxtb	r3, r3
 8032a56:	2b00      	cmp	r3, #0
 8032a58:	d004      	beq.n	8032a64 <mg_random+0x3a>
 8032a5a:	683b      	ldr	r3, [r7, #0]
 8032a5c:	1e5a      	subs	r2, r3, #1
 8032a5e:	603a      	str	r2, [r7, #0]
 8032a60:	2b00      	cmp	r3, #0
 8032a62:	d1ec      	bne.n	8032a3e <mg_random+0x14>
}
 8032a64:	bf00      	nop
 8032a66:	3710      	adds	r7, #16
 8032a68:	46bd      	mov	sp, r7
 8032a6a:	bd80      	pop	{r7, pc}

08032a6c <mg_random_str>:
#endif

char *mg_random_str(char *buf, size_t len) {
 8032a6c:	b580      	push	{r7, lr}
 8032a6e:	b084      	sub	sp, #16
 8032a70:	af00      	add	r7, sp, #0
 8032a72:	6078      	str	r0, [r7, #4]
 8032a74:	6039      	str	r1, [r7, #0]
  size_t i;
  mg_random(buf, len);
 8032a76:	6839      	ldr	r1, [r7, #0]
 8032a78:	6878      	ldr	r0, [r7, #4]
 8032a7a:	f7ff ffd6 	bl	8032a2a <mg_random>
  for (i = 0; i < len; i++) {
 8032a7e:	2300      	movs	r3, #0
 8032a80:	60fb      	str	r3, [r7, #12]
 8032a82:	e02d      	b.n	8032ae0 <mg_random_str+0x74>
    uint8_t c = ((uint8_t *) buf)[i] % 62U;
 8032a84:	687a      	ldr	r2, [r7, #4]
 8032a86:	68fb      	ldr	r3, [r7, #12]
 8032a88:	4413      	add	r3, r2
 8032a8a:	781a      	ldrb	r2, [r3, #0]
 8032a8c:	0853      	lsrs	r3, r2, #1
 8032a8e:	4919      	ldr	r1, [pc, #100]	@ (8032af4 <mg_random_str+0x88>)
 8032a90:	fba1 1303 	umull	r1, r3, r1, r3
 8032a94:	0919      	lsrs	r1, r3, #4
 8032a96:	460b      	mov	r3, r1
 8032a98:	015b      	lsls	r3, r3, #5
 8032a9a:	1a5b      	subs	r3, r3, r1
 8032a9c:	005b      	lsls	r3, r3, #1
 8032a9e:	1ad3      	subs	r3, r2, r3
 8032aa0:	72fb      	strb	r3, [r7, #11]
    buf[i] = i == len - 1 ? (char) '\0'            // 0-terminate last byte
 8032aa2:	683b      	ldr	r3, [r7, #0]
 8032aa4:	3b01      	subs	r3, #1
 8032aa6:	68fa      	ldr	r2, [r7, #12]
 8032aa8:	429a      	cmp	r2, r3
 8032aaa:	d011      	beq.n	8032ad0 <mg_random_str+0x64>
 8032aac:	7afb      	ldrb	r3, [r7, #11]
 8032aae:	2b19      	cmp	r3, #25
 8032ab0:	d803      	bhi.n	8032aba <mg_random_str+0x4e>
 8032ab2:	7afb      	ldrb	r3, [r7, #11]
 8032ab4:	3361      	adds	r3, #97	@ 0x61
 8032ab6:	b2db      	uxtb	r3, r3
 8032ab8:	e00b      	b.n	8032ad2 <mg_random_str+0x66>
 8032aba:	7afb      	ldrb	r3, [r7, #11]
 8032abc:	2b33      	cmp	r3, #51	@ 0x33
 8032abe:	d803      	bhi.n	8032ac8 <mg_random_str+0x5c>
 8032ac0:	7afb      	ldrb	r3, [r7, #11]
 8032ac2:	3327      	adds	r3, #39	@ 0x27
 8032ac4:	b2db      	uxtb	r3, r3
 8032ac6:	e004      	b.n	8032ad2 <mg_random_str+0x66>
 8032ac8:	7afb      	ldrb	r3, [r7, #11]
 8032aca:	3b04      	subs	r3, #4
 8032acc:	b2db      	uxtb	r3, r3
 8032ace:	e000      	b.n	8032ad2 <mg_random_str+0x66>
 8032ad0:	2300      	movs	r3, #0
 8032ad2:	6879      	ldr	r1, [r7, #4]
 8032ad4:	68fa      	ldr	r2, [r7, #12]
 8032ad6:	440a      	add	r2, r1
 8032ad8:	7013      	strb	r3, [r2, #0]
  for (i = 0; i < len; i++) {
 8032ada:	68fb      	ldr	r3, [r7, #12]
 8032adc:	3301      	adds	r3, #1
 8032ade:	60fb      	str	r3, [r7, #12]
 8032ae0:	68fa      	ldr	r2, [r7, #12]
 8032ae2:	683b      	ldr	r3, [r7, #0]
 8032ae4:	429a      	cmp	r2, r3
 8032ae6:	d3cd      	bcc.n	8032a84 <mg_random_str+0x18>
             : c < 26     ? (char) ('a' + c)       // lowercase
             : c < 52     ? (char) ('A' + c - 26)  // uppercase
                          : (char) ('0' + c - 52);     // numeric
  }
  return buf;
 8032ae8:	687b      	ldr	r3, [r7, #4]
}
 8032aea:	4618      	mov	r0, r3
 8032aec:	3710      	adds	r7, #16
 8032aee:	46bd      	mov	sp, r7
 8032af0:	bd80      	pop	{r7, pc}
 8032af2:	bf00      	nop
 8032af4:	84210843 	.word	0x84210843

08032af8 <mg_ntohl>:

uint32_t mg_ntohl(uint32_t net) {
 8032af8:	b480      	push	{r7}
 8032afa:	b085      	sub	sp, #20
 8032afc:	af00      	add	r7, sp, #0
 8032afe:	6078      	str	r0, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 8032b00:	2300      	movs	r3, #0
 8032b02:	60fb      	str	r3, [r7, #12]
  memcpy(&data, &net, sizeof(data));
 8032b04:	687b      	ldr	r3, [r7, #4]
 8032b06:	60fb      	str	r3, [r7, #12]
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8032b08:	7bfb      	ldrb	r3, [r7, #15]
 8032b0a:	461a      	mov	r2, r3
 8032b0c:	7bbb      	ldrb	r3, [r7, #14]
 8032b0e:	021b      	lsls	r3, r3, #8
 8032b10:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 8032b12:	7b7b      	ldrb	r3, [r7, #13]
 8032b14:	041b      	lsls	r3, r3, #16
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8032b16:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 8032b18:	7b3b      	ldrb	r3, [r7, #12]
 8032b1a:	061b      	lsls	r3, r3, #24
 8032b1c:	4313      	orrs	r3, r2
}
 8032b1e:	4618      	mov	r0, r3
 8032b20:	3714      	adds	r7, #20
 8032b22:	46bd      	mov	sp, r7
 8032b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032b28:	4770      	bx	lr

08032b2a <mg_ntohs>:

uint16_t mg_ntohs(uint16_t net) {
 8032b2a:	b480      	push	{r7}
 8032b2c:	b085      	sub	sp, #20
 8032b2e:	af00      	add	r7, sp, #0
 8032b30:	4603      	mov	r3, r0
 8032b32:	80fb      	strh	r3, [r7, #6]
  uint8_t data[2] = {0, 0};
 8032b34:	2300      	movs	r3, #0
 8032b36:	81bb      	strh	r3, [r7, #12]
  memcpy(&data, &net, sizeof(data));
 8032b38:	88fb      	ldrh	r3, [r7, #6]
 8032b3a:	81bb      	strh	r3, [r7, #12]
  return (uint16_t) ((uint16_t) data[1] | (((uint16_t) data[0]) << 8));
 8032b3c:	7b7b      	ldrb	r3, [r7, #13]
 8032b3e:	b21a      	sxth	r2, r3
 8032b40:	7b3b      	ldrb	r3, [r7, #12]
 8032b42:	021b      	lsls	r3, r3, #8
 8032b44:	b21b      	sxth	r3, r3
 8032b46:	4313      	orrs	r3, r2
 8032b48:	b21b      	sxth	r3, r3
 8032b4a:	b29b      	uxth	r3, r3
}
 8032b4c:	4618      	mov	r0, r3
 8032b4e:	3714      	adds	r7, #20
 8032b50:	46bd      	mov	sp, r7
 8032b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032b56:	4770      	bx	lr

08032b58 <mg_crc32>:

uint32_t mg_crc32(uint32_t crc, const char *buf, size_t len) {
 8032b58:	b480      	push	{r7}
 8032b5a:	b087      	sub	sp, #28
 8032b5c:	af00      	add	r7, sp, #0
 8032b5e:	60f8      	str	r0, [r7, #12]
 8032b60:	60b9      	str	r1, [r7, #8]
 8032b62:	607a      	str	r2, [r7, #4]
  static const uint32_t crclut[16] = {
      // table for polynomial 0xEDB88320 (reflected)
      0x00000000, 0x1DB71064, 0x3B6E20C8, 0x26D930AC, 0x76DC4190, 0x6B6B51F4,
      0x4DB26158, 0x5005713C, 0xEDB88320, 0xF00F9344, 0xD6D6A3E8, 0xCB61B38C,
      0x9B64C2B0, 0x86D3D2D4, 0xA00AE278, 0xBDBDF21C};
  crc = ~crc;
 8032b64:	68fb      	ldr	r3, [r7, #12]
 8032b66:	43db      	mvns	r3, r3
 8032b68:	60fb      	str	r3, [r7, #12]
  while (len--) {
 8032b6a:	e01f      	b.n	8032bac <mg_crc32+0x54>
    uint8_t b = *(uint8_t *) buf++;
 8032b6c:	68bb      	ldr	r3, [r7, #8]
 8032b6e:	1c5a      	adds	r2, r3, #1
 8032b70:	60ba      	str	r2, [r7, #8]
 8032b72:	781b      	ldrb	r3, [r3, #0]
 8032b74:	75fb      	strb	r3, [r7, #23]
    crc = crclut[(crc ^ b) & 0x0F] ^ (crc >> 4);
 8032b76:	7dfa      	ldrb	r2, [r7, #23]
 8032b78:	68fb      	ldr	r3, [r7, #12]
 8032b7a:	4053      	eors	r3, r2
 8032b7c:	f003 030f 	and.w	r3, r3, #15
 8032b80:	4a11      	ldr	r2, [pc, #68]	@ (8032bc8 <mg_crc32+0x70>)
 8032b82:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8032b86:	68fb      	ldr	r3, [r7, #12]
 8032b88:	091b      	lsrs	r3, r3, #4
 8032b8a:	4053      	eors	r3, r2
 8032b8c:	60fb      	str	r3, [r7, #12]
    crc = crclut[(crc ^ (b >> 4)) & 0x0F] ^ (crc >> 4);
 8032b8e:	7dfb      	ldrb	r3, [r7, #23]
 8032b90:	091b      	lsrs	r3, r3, #4
 8032b92:	b2db      	uxtb	r3, r3
 8032b94:	461a      	mov	r2, r3
 8032b96:	68fb      	ldr	r3, [r7, #12]
 8032b98:	4053      	eors	r3, r2
 8032b9a:	f003 030f 	and.w	r3, r3, #15
 8032b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8032bc8 <mg_crc32+0x70>)
 8032ba0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8032ba4:	68fb      	ldr	r3, [r7, #12]
 8032ba6:	091b      	lsrs	r3, r3, #4
 8032ba8:	4053      	eors	r3, r2
 8032baa:	60fb      	str	r3, [r7, #12]
  while (len--) {
 8032bac:	687b      	ldr	r3, [r7, #4]
 8032bae:	1e5a      	subs	r2, r3, #1
 8032bb0:	607a      	str	r2, [r7, #4]
 8032bb2:	2b00      	cmp	r3, #0
 8032bb4:	d1da      	bne.n	8032b6c <mg_crc32+0x14>
  }
  return ~crc;
 8032bb6:	68fb      	ldr	r3, [r7, #12]
 8032bb8:	43db      	mvns	r3, r3
}
 8032bba:	4618      	mov	r0, r3
 8032bbc:	371c      	adds	r7, #28
 8032bbe:	46bd      	mov	sp, r7
 8032bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032bc4:	4770      	bx	lr
 8032bc6:	bf00      	nop
 8032bc8:	08044720 	.word	0x08044720

08032bcc <mg_path_is_sane>:
    }
  }
  return allowed == '+';
}

bool mg_path_is_sane(const struct mg_str path) {
 8032bcc:	b480      	push	{r7}
 8032bce:	b085      	sub	sp, #20
 8032bd0:	af00      	add	r7, sp, #0
 8032bd2:	463b      	mov	r3, r7
 8032bd4:	e883 0003 	stmia.w	r3, {r0, r1}
  const char *s = path.buf;
 8032bd8:	683b      	ldr	r3, [r7, #0]
 8032bda:	60fb      	str	r3, [r7, #12]
  size_t n = path.len;
 8032bdc:	687b      	ldr	r3, [r7, #4]
 8032bde:	60bb      	str	r3, [r7, #8]
  if (path.buf[0] == '.' && path.buf[1] == '.') return false;  // Starts with ..
 8032be0:	683b      	ldr	r3, [r7, #0]
 8032be2:	781b      	ldrb	r3, [r3, #0]
 8032be4:	2b2e      	cmp	r3, #46	@ 0x2e
 8032be6:	d123      	bne.n	8032c30 <mg_path_is_sane+0x64>
 8032be8:	683b      	ldr	r3, [r7, #0]
 8032bea:	3301      	adds	r3, #1
 8032bec:	781b      	ldrb	r3, [r3, #0]
 8032bee:	2b2e      	cmp	r3, #46	@ 0x2e
 8032bf0:	d11e      	bne.n	8032c30 <mg_path_is_sane+0x64>
 8032bf2:	2300      	movs	r3, #0
 8032bf4:	e024      	b.n	8032c40 <mg_path_is_sane+0x74>
  for (; s[0] != '\0' && n > 0; s++, n--) {
    if ((s[0] == '/' || s[0] == '\\') && n >= 2) {   // Subdir?
 8032bf6:	68fb      	ldr	r3, [r7, #12]
 8032bf8:	781b      	ldrb	r3, [r3, #0]
 8032bfa:	2b2f      	cmp	r3, #47	@ 0x2f
 8032bfc:	d003      	beq.n	8032c06 <mg_path_is_sane+0x3a>
 8032bfe:	68fb      	ldr	r3, [r7, #12]
 8032c00:	781b      	ldrb	r3, [r3, #0]
 8032c02:	2b5c      	cmp	r3, #92	@ 0x5c
 8032c04:	d10e      	bne.n	8032c24 <mg_path_is_sane+0x58>
 8032c06:	68bb      	ldr	r3, [r7, #8]
 8032c08:	2b01      	cmp	r3, #1
 8032c0a:	d90b      	bls.n	8032c24 <mg_path_is_sane+0x58>
      if (s[1] == '.' && s[2] == '.') return false;  // Starts with ..
 8032c0c:	68fb      	ldr	r3, [r7, #12]
 8032c0e:	3301      	adds	r3, #1
 8032c10:	781b      	ldrb	r3, [r3, #0]
 8032c12:	2b2e      	cmp	r3, #46	@ 0x2e
 8032c14:	d106      	bne.n	8032c24 <mg_path_is_sane+0x58>
 8032c16:	68fb      	ldr	r3, [r7, #12]
 8032c18:	3302      	adds	r3, #2
 8032c1a:	781b      	ldrb	r3, [r3, #0]
 8032c1c:	2b2e      	cmp	r3, #46	@ 0x2e
 8032c1e:	d101      	bne.n	8032c24 <mg_path_is_sane+0x58>
 8032c20:	2300      	movs	r3, #0
 8032c22:	e00d      	b.n	8032c40 <mg_path_is_sane+0x74>
  for (; s[0] != '\0' && n > 0; s++, n--) {
 8032c24:	68fb      	ldr	r3, [r7, #12]
 8032c26:	3301      	adds	r3, #1
 8032c28:	60fb      	str	r3, [r7, #12]
 8032c2a:	68bb      	ldr	r3, [r7, #8]
 8032c2c:	3b01      	subs	r3, #1
 8032c2e:	60bb      	str	r3, [r7, #8]
 8032c30:	68fb      	ldr	r3, [r7, #12]
 8032c32:	781b      	ldrb	r3, [r3, #0]
 8032c34:	2b00      	cmp	r3, #0
 8032c36:	d002      	beq.n	8032c3e <mg_path_is_sane+0x72>
 8032c38:	68bb      	ldr	r3, [r7, #8]
 8032c3a:	2b00      	cmp	r3, #0
 8032c3c:	d1db      	bne.n	8032bf6 <mg_path_is_sane+0x2a>
    }
  }
  return true;
 8032c3e:	2301      	movs	r3, #1
}
 8032c40:	4618      	mov	r0, r3
 8032c42:	3714      	adds	r7, #20
 8032c44:	46bd      	mov	sp, r7
 8032c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032c4a:	4770      	bx	lr

08032c4c <mg_millis>:

#if MG_ENABLE_CUSTOM_MILLIS
#else
uint64_t mg_millis(void) {
 8032c4c:	b5b0      	push	{r4, r5, r7, lr}
 8032c4e:	af00      	add	r7, sp, #0
  return GetTickCount();
#elif MG_ARCH == MG_ARCH_RP2040
  return time_us_64() / 1000;
#elif MG_ARCH == MG_ARCH_ESP8266 || MG_ARCH == MG_ARCH_ESP32 || \
    MG_ARCH == MG_ARCH_FREERTOS
  return xTaskGetTickCount() * portTICK_PERIOD_MS;
 8032c50:	f7e8 f9d4 	bl	801affc <xTaskGetTickCount>
 8032c54:	4603      	mov	r3, r0
 8032c56:	2200      	movs	r2, #0
 8032c58:	461c      	mov	r4, r3
 8032c5a:	4615      	mov	r5, r2
 8032c5c:	4622      	mov	r2, r4
 8032c5e:	462b      	mov	r3, r5
#elif defined(ARDUINO)
  return (uint64_t) millis();
#else
  return (uint64_t) (time(NULL) * 1000);
#endif
}
 8032c60:	4610      	mov	r0, r2
 8032c62:	4619      	mov	r1, r3
 8032c64:	bdb0      	pop	{r4, r5, r7, pc}

08032c66 <w5500_txn>:
#if MG_ENABLE_TCPIP && defined(MG_ENABLE_DRIVER_W5500) && MG_ENABLE_DRIVER_W5500

enum { W5500_CR = 0, W5500_S0 = 1, W5500_TX0 = 2, W5500_RX0 = 3 };

static void w5500_txn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr,
                      bool wr, void *buf, size_t len) {
 8032c66:	b580      	push	{r7, lr}
 8032c68:	b086      	sub	sp, #24
 8032c6a:	af00      	add	r7, sp, #0
 8032c6c:	6078      	str	r0, [r7, #4]
 8032c6e:	4608      	mov	r0, r1
 8032c70:	4611      	mov	r1, r2
 8032c72:	461a      	mov	r2, r3
 8032c74:	4603      	mov	r3, r0
 8032c76:	70fb      	strb	r3, [r7, #3]
 8032c78:	460b      	mov	r3, r1
 8032c7a:	803b      	strh	r3, [r7, #0]
 8032c7c:	4613      	mov	r3, r2
 8032c7e:	70bb      	strb	r3, [r7, #2]
  size_t i;
  uint8_t *p = (uint8_t *) buf;
 8032c80:	6a3b      	ldr	r3, [r7, #32]
 8032c82:	613b      	str	r3, [r7, #16]
  uint8_t cmd[] = {(uint8_t) (addr >> 8), (uint8_t) (addr & 255),
 8032c84:	883b      	ldrh	r3, [r7, #0]
 8032c86:	0a1b      	lsrs	r3, r3, #8
 8032c88:	b29b      	uxth	r3, r3
 8032c8a:	b2db      	uxtb	r3, r3
 8032c8c:	733b      	strb	r3, [r7, #12]
 8032c8e:	883b      	ldrh	r3, [r7, #0]
 8032c90:	b2db      	uxtb	r3, r3
 8032c92:	737b      	strb	r3, [r7, #13]
                   (uint8_t) ((block << 3) | (wr ? 4 : 0))};
 8032c94:	78fb      	ldrb	r3, [r7, #3]
 8032c96:	00db      	lsls	r3, r3, #3
 8032c98:	b25b      	sxtb	r3, r3
 8032c9a:	78ba      	ldrb	r2, [r7, #2]
 8032c9c:	2a00      	cmp	r2, #0
 8032c9e:	d001      	beq.n	8032ca4 <w5500_txn+0x3e>
 8032ca0:	2204      	movs	r2, #4
 8032ca2:	e000      	b.n	8032ca6 <w5500_txn+0x40>
 8032ca4:	2200      	movs	r2, #0
 8032ca6:	4313      	orrs	r3, r2
 8032ca8:	b25b      	sxtb	r3, r3
 8032caa:	b2db      	uxtb	r3, r3
  uint8_t cmd[] = {(uint8_t) (addr >> 8), (uint8_t) (addr & 255),
 8032cac:	73bb      	strb	r3, [r7, #14]
  s->begin(s->spi);
 8032cae:	687b      	ldr	r3, [r7, #4]
 8032cb0:	685b      	ldr	r3, [r3, #4]
 8032cb2:	687a      	ldr	r2, [r7, #4]
 8032cb4:	6812      	ldr	r2, [r2, #0]
 8032cb6:	4610      	mov	r0, r2
 8032cb8:	4798      	blx	r3
  for (i = 0; i < sizeof(cmd); i++) s->txn(s->spi, cmd[i]);
 8032cba:	2300      	movs	r3, #0
 8032cbc:	617b      	str	r3, [r7, #20]
 8032cbe:	e00d      	b.n	8032cdc <w5500_txn+0x76>
 8032cc0:	687b      	ldr	r3, [r7, #4]
 8032cc2:	68db      	ldr	r3, [r3, #12]
 8032cc4:	687a      	ldr	r2, [r7, #4]
 8032cc6:	6810      	ldr	r0, [r2, #0]
 8032cc8:	f107 010c 	add.w	r1, r7, #12
 8032ccc:	697a      	ldr	r2, [r7, #20]
 8032cce:	440a      	add	r2, r1
 8032cd0:	7812      	ldrb	r2, [r2, #0]
 8032cd2:	4611      	mov	r1, r2
 8032cd4:	4798      	blx	r3
 8032cd6:	697b      	ldr	r3, [r7, #20]
 8032cd8:	3301      	adds	r3, #1
 8032cda:	617b      	str	r3, [r7, #20]
 8032cdc:	697b      	ldr	r3, [r7, #20]
 8032cde:	2b02      	cmp	r3, #2
 8032ce0:	d9ee      	bls.n	8032cc0 <w5500_txn+0x5a>
  for (i = 0; i < len; i++) {
 8032ce2:	2300      	movs	r3, #0
 8032ce4:	617b      	str	r3, [r7, #20]
 8032ce6:	e019      	b.n	8032d1c <w5500_txn+0xb6>
    uint8_t r = s->txn(s->spi, p[i]);
 8032ce8:	687b      	ldr	r3, [r7, #4]
 8032cea:	68db      	ldr	r3, [r3, #12]
 8032cec:	687a      	ldr	r2, [r7, #4]
 8032cee:	6810      	ldr	r0, [r2, #0]
 8032cf0:	6939      	ldr	r1, [r7, #16]
 8032cf2:	697a      	ldr	r2, [r7, #20]
 8032cf4:	440a      	add	r2, r1
 8032cf6:	7812      	ldrb	r2, [r2, #0]
 8032cf8:	4611      	mov	r1, r2
 8032cfa:	4798      	blx	r3
 8032cfc:	4603      	mov	r3, r0
 8032cfe:	73fb      	strb	r3, [r7, #15]
    if (!wr) p[i] = r;
 8032d00:	78bb      	ldrb	r3, [r7, #2]
 8032d02:	f083 0301 	eor.w	r3, r3, #1
 8032d06:	b2db      	uxtb	r3, r3
 8032d08:	2b00      	cmp	r3, #0
 8032d0a:	d004      	beq.n	8032d16 <w5500_txn+0xb0>
 8032d0c:	693a      	ldr	r2, [r7, #16]
 8032d0e:	697b      	ldr	r3, [r7, #20]
 8032d10:	4413      	add	r3, r2
 8032d12:	7bfa      	ldrb	r2, [r7, #15]
 8032d14:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < len; i++) {
 8032d16:	697b      	ldr	r3, [r7, #20]
 8032d18:	3301      	adds	r3, #1
 8032d1a:	617b      	str	r3, [r7, #20]
 8032d1c:	697a      	ldr	r2, [r7, #20]
 8032d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032d20:	429a      	cmp	r2, r3
 8032d22:	d3e1      	bcc.n	8032ce8 <w5500_txn+0x82>
  }
  s->end(s->spi);
 8032d24:	687b      	ldr	r3, [r7, #4]
 8032d26:	689b      	ldr	r3, [r3, #8]
 8032d28:	687a      	ldr	r2, [r7, #4]
 8032d2a:	6812      	ldr	r2, [r2, #0]
 8032d2c:	4610      	mov	r0, r2
 8032d2e:	4798      	blx	r3
}
 8032d30:	bf00      	nop
 8032d32:	3718      	adds	r7, #24
 8032d34:	46bd      	mov	sp, r7
 8032d36:	bd80      	pop	{r7, pc}

08032d38 <w5500_wn>:

// clang-format off
static  void w5500_wn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, void *buf, size_t len) { w5500_txn(s, block, addr, true, buf, len); }
 8032d38:	b580      	push	{r7, lr}
 8032d3a:	b086      	sub	sp, #24
 8032d3c:	af02      	add	r7, sp, #8
 8032d3e:	60f8      	str	r0, [r7, #12]
 8032d40:	607b      	str	r3, [r7, #4]
 8032d42:	460b      	mov	r3, r1
 8032d44:	72fb      	strb	r3, [r7, #11]
 8032d46:	4613      	mov	r3, r2
 8032d48:	813b      	strh	r3, [r7, #8]
 8032d4a:	893a      	ldrh	r2, [r7, #8]
 8032d4c:	7af9      	ldrb	r1, [r7, #11]
 8032d4e:	69bb      	ldr	r3, [r7, #24]
 8032d50:	9301      	str	r3, [sp, #4]
 8032d52:	687b      	ldr	r3, [r7, #4]
 8032d54:	9300      	str	r3, [sp, #0]
 8032d56:	2301      	movs	r3, #1
 8032d58:	68f8      	ldr	r0, [r7, #12]
 8032d5a:	f7ff ff84 	bl	8032c66 <w5500_txn>
 8032d5e:	bf00      	nop
 8032d60:	3710      	adds	r7, #16
 8032d62:	46bd      	mov	sp, r7
 8032d64:	bd80      	pop	{r7, pc}

08032d66 <w5500_w1>:
static  void w5500_w1(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, uint8_t val) { w5500_wn(s, block, addr, &val, 1); }
 8032d66:	b580      	push	{r7, lr}
 8032d68:	b084      	sub	sp, #16
 8032d6a:	af02      	add	r7, sp, #8
 8032d6c:	6078      	str	r0, [r7, #4]
 8032d6e:	4608      	mov	r0, r1
 8032d70:	4611      	mov	r1, r2
 8032d72:	461a      	mov	r2, r3
 8032d74:	4603      	mov	r3, r0
 8032d76:	70fb      	strb	r3, [r7, #3]
 8032d78:	460b      	mov	r3, r1
 8032d7a:	803b      	strh	r3, [r7, #0]
 8032d7c:	4613      	mov	r3, r2
 8032d7e:	70bb      	strb	r3, [r7, #2]
 8032d80:	1cbb      	adds	r3, r7, #2
 8032d82:	883a      	ldrh	r2, [r7, #0]
 8032d84:	78f9      	ldrb	r1, [r7, #3]
 8032d86:	2001      	movs	r0, #1
 8032d88:	9000      	str	r0, [sp, #0]
 8032d8a:	6878      	ldr	r0, [r7, #4]
 8032d8c:	f7ff ffd4 	bl	8032d38 <w5500_wn>
 8032d90:	bf00      	nop
 8032d92:	3708      	adds	r7, #8
 8032d94:	46bd      	mov	sp, r7
 8032d96:	bd80      	pop	{r7, pc}

08032d98 <w5500_w2>:
static  void w5500_w2(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, uint16_t val) { uint8_t buf[2] = {(uint8_t) (val >> 8), (uint8_t) (val & 255)}; w5500_wn(s, block, addr, buf, sizeof(buf)); }
 8032d98:	b580      	push	{r7, lr}
 8032d9a:	b088      	sub	sp, #32
 8032d9c:	af02      	add	r7, sp, #8
 8032d9e:	60f8      	str	r0, [r7, #12]
 8032da0:	4608      	mov	r0, r1
 8032da2:	4611      	mov	r1, r2
 8032da4:	461a      	mov	r2, r3
 8032da6:	4603      	mov	r3, r0
 8032da8:	72fb      	strb	r3, [r7, #11]
 8032daa:	460b      	mov	r3, r1
 8032dac:	813b      	strh	r3, [r7, #8]
 8032dae:	4613      	mov	r3, r2
 8032db0:	80fb      	strh	r3, [r7, #6]
 8032db2:	88fb      	ldrh	r3, [r7, #6]
 8032db4:	0a1b      	lsrs	r3, r3, #8
 8032db6:	b29b      	uxth	r3, r3
 8032db8:	b2db      	uxtb	r3, r3
 8032dba:	753b      	strb	r3, [r7, #20]
 8032dbc:	88fb      	ldrh	r3, [r7, #6]
 8032dbe:	b2db      	uxtb	r3, r3
 8032dc0:	757b      	strb	r3, [r7, #21]
 8032dc2:	f107 0314 	add.w	r3, r7, #20
 8032dc6:	893a      	ldrh	r2, [r7, #8]
 8032dc8:	7af9      	ldrb	r1, [r7, #11]
 8032dca:	2002      	movs	r0, #2
 8032dcc:	9000      	str	r0, [sp, #0]
 8032dce:	68f8      	ldr	r0, [r7, #12]
 8032dd0:	f7ff ffb2 	bl	8032d38 <w5500_wn>
 8032dd4:	bf00      	nop
 8032dd6:	3718      	adds	r7, #24
 8032dd8:	46bd      	mov	sp, r7
 8032dda:	bd80      	pop	{r7, pc}

08032ddc <w5500_rn>:
static  void w5500_rn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, void *buf, size_t len) { w5500_txn(s, block, addr, false, buf, len); }
 8032ddc:	b580      	push	{r7, lr}
 8032dde:	b086      	sub	sp, #24
 8032de0:	af02      	add	r7, sp, #8
 8032de2:	60f8      	str	r0, [r7, #12]
 8032de4:	607b      	str	r3, [r7, #4]
 8032de6:	460b      	mov	r3, r1
 8032de8:	72fb      	strb	r3, [r7, #11]
 8032dea:	4613      	mov	r3, r2
 8032dec:	813b      	strh	r3, [r7, #8]
 8032dee:	893a      	ldrh	r2, [r7, #8]
 8032df0:	7af9      	ldrb	r1, [r7, #11]
 8032df2:	69bb      	ldr	r3, [r7, #24]
 8032df4:	9301      	str	r3, [sp, #4]
 8032df6:	687b      	ldr	r3, [r7, #4]
 8032df8:	9300      	str	r3, [sp, #0]
 8032dfa:	2300      	movs	r3, #0
 8032dfc:	68f8      	ldr	r0, [r7, #12]
 8032dfe:	f7ff ff32 	bl	8032c66 <w5500_txn>
 8032e02:	bf00      	nop
 8032e04:	3710      	adds	r7, #16
 8032e06:	46bd      	mov	sp, r7
 8032e08:	bd80      	pop	{r7, pc}

08032e0a <w5500_r1>:
static  uint8_t w5500_r1(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr) { uint8_t r = 0; w5500_rn(s, block, addr, &r, 1); return r; }
 8032e0a:	b580      	push	{r7, lr}
 8032e0c:	b086      	sub	sp, #24
 8032e0e:	af02      	add	r7, sp, #8
 8032e10:	6078      	str	r0, [r7, #4]
 8032e12:	460b      	mov	r3, r1
 8032e14:	70fb      	strb	r3, [r7, #3]
 8032e16:	4613      	mov	r3, r2
 8032e18:	803b      	strh	r3, [r7, #0]
 8032e1a:	2300      	movs	r3, #0
 8032e1c:	73fb      	strb	r3, [r7, #15]
 8032e1e:	f107 030f 	add.w	r3, r7, #15
 8032e22:	883a      	ldrh	r2, [r7, #0]
 8032e24:	78f9      	ldrb	r1, [r7, #3]
 8032e26:	2001      	movs	r0, #1
 8032e28:	9000      	str	r0, [sp, #0]
 8032e2a:	6878      	ldr	r0, [r7, #4]
 8032e2c:	f7ff ffd6 	bl	8032ddc <w5500_rn>
 8032e30:	7bfb      	ldrb	r3, [r7, #15]
 8032e32:	4618      	mov	r0, r3
 8032e34:	3710      	adds	r7, #16
 8032e36:	46bd      	mov	sp, r7
 8032e38:	bd80      	pop	{r7, pc}

08032e3a <w5500_r2>:
static  uint16_t w5500_r2(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr) { uint8_t buf[2] = {0, 0}; w5500_rn(s, block, addr, buf, sizeof(buf)); return (uint16_t) ((buf[0] << 8) | buf[1]); }
 8032e3a:	b580      	push	{r7, lr}
 8032e3c:	b086      	sub	sp, #24
 8032e3e:	af02      	add	r7, sp, #8
 8032e40:	6078      	str	r0, [r7, #4]
 8032e42:	460b      	mov	r3, r1
 8032e44:	70fb      	strb	r3, [r7, #3]
 8032e46:	4613      	mov	r3, r2
 8032e48:	803b      	strh	r3, [r7, #0]
 8032e4a:	2300      	movs	r3, #0
 8032e4c:	81bb      	strh	r3, [r7, #12]
 8032e4e:	f107 030c 	add.w	r3, r7, #12
 8032e52:	883a      	ldrh	r2, [r7, #0]
 8032e54:	78f9      	ldrb	r1, [r7, #3]
 8032e56:	2002      	movs	r0, #2
 8032e58:	9000      	str	r0, [sp, #0]
 8032e5a:	6878      	ldr	r0, [r7, #4]
 8032e5c:	f7ff ffbe 	bl	8032ddc <w5500_rn>
 8032e60:	7b3b      	ldrb	r3, [r7, #12]
 8032e62:	021b      	lsls	r3, r3, #8
 8032e64:	b21a      	sxth	r2, r3
 8032e66:	7b7b      	ldrb	r3, [r7, #13]
 8032e68:	b21b      	sxth	r3, r3
 8032e6a:	4313      	orrs	r3, r2
 8032e6c:	b21b      	sxth	r3, r3
 8032e6e:	b29b      	uxth	r3, r3
 8032e70:	4618      	mov	r0, r3
 8032e72:	3710      	adds	r7, #16
 8032e74:	46bd      	mov	sp, r7
 8032e76:	bd80      	pop	{r7, pc}

08032e78 <w5500_rx>:
// clang-format on

static size_t w5500_rx(void *buf, size_t buflen, struct mg_tcpip_if *ifp) {
 8032e78:	b580      	push	{r7, lr}
 8032e7a:	b08a      	sub	sp, #40	@ 0x28
 8032e7c:	af02      	add	r7, sp, #8
 8032e7e:	60f8      	str	r0, [r7, #12]
 8032e80:	60b9      	str	r1, [r7, #8]
 8032e82:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 8032e84:	687b      	ldr	r3, [r7, #4]
 8032e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8032e88:	61bb      	str	r3, [r7, #24]
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 8032e8a:	2300      	movs	r3, #0
 8032e8c:	83fb      	strh	r3, [r7, #30]
 8032e8e:	2300      	movs	r3, #0
 8032e90:	83bb      	strh	r3, [r7, #28]
 8032e92:	68bb      	ldr	r3, [r7, #8]
 8032e94:	82fb      	strh	r3, [r7, #22]
  while ((n2 = w5500_r2(s, W5500_S0, 0x26)) > n) n = n2;  // Until it is stable
 8032e96:	e001      	b.n	8032e9c <w5500_rx+0x24>
 8032e98:	8abb      	ldrh	r3, [r7, #20]
 8032e9a:	83bb      	strh	r3, [r7, #28]
 8032e9c:	2226      	movs	r2, #38	@ 0x26
 8032e9e:	2101      	movs	r1, #1
 8032ea0:	69b8      	ldr	r0, [r7, #24]
 8032ea2:	f7ff ffca 	bl	8032e3a <w5500_r2>
 8032ea6:	4603      	mov	r3, r0
 8032ea8:	82bb      	strh	r3, [r7, #20]
 8032eaa:	8aba      	ldrh	r2, [r7, #20]
 8032eac:	8bbb      	ldrh	r3, [r7, #28]
 8032eae:	429a      	cmp	r2, r3
 8032eb0:	d8f2      	bhi.n	8032e98 <w5500_rx+0x20>
  // printf("RSR: %d\n", (int) n);
  if (n > 0) {
 8032eb2:	8bbb      	ldrh	r3, [r7, #28]
 8032eb4:	2b00      	cmp	r3, #0
 8032eb6:	d032      	beq.n	8032f1e <w5500_rx+0xa6>
    uint16_t ptr = w5500_r2(s, W5500_S0, 0x28);  // Get read pointer
 8032eb8:	2228      	movs	r2, #40	@ 0x28
 8032eba:	2101      	movs	r1, #1
 8032ebc:	69b8      	ldr	r0, [r7, #24]
 8032ebe:	f7ff ffbc 	bl	8032e3a <w5500_r2>
 8032ec2:	4603      	mov	r3, r0
 8032ec4:	827b      	strh	r3, [r7, #18]
    n = w5500_r2(s, W5500_RX0, ptr);             // Read frame length
 8032ec6:	8a7b      	ldrh	r3, [r7, #18]
 8032ec8:	461a      	mov	r2, r3
 8032eca:	2103      	movs	r1, #3
 8032ecc:	69b8      	ldr	r0, [r7, #24]
 8032ece:	f7ff ffb4 	bl	8032e3a <w5500_r2>
 8032ed2:	4603      	mov	r3, r0
 8032ed4:	83bb      	strh	r3, [r7, #28]
    if (n <= len + 2 && n > 1) {
 8032ed6:	8bba      	ldrh	r2, [r7, #28]
 8032ed8:	8afb      	ldrh	r3, [r7, #22]
 8032eda:	3302      	adds	r3, #2
 8032edc:	429a      	cmp	r2, r3
 8032ede:	dc0f      	bgt.n	8032f00 <w5500_rx+0x88>
 8032ee0:	8bbb      	ldrh	r3, [r7, #28]
 8032ee2:	2b01      	cmp	r3, #1
 8032ee4:	d90c      	bls.n	8032f00 <w5500_rx+0x88>
      r = (uint16_t) (n - 2);
 8032ee6:	8bbb      	ldrh	r3, [r7, #28]
 8032ee8:	3b02      	subs	r3, #2
 8032eea:	83fb      	strh	r3, [r7, #30]
      w5500_rn(s, W5500_RX0, (uint16_t) (ptr + 2), buf, r);
 8032eec:	8a7b      	ldrh	r3, [r7, #18]
 8032eee:	3302      	adds	r3, #2
 8032ef0:	b29a      	uxth	r2, r3
 8032ef2:	8bfb      	ldrh	r3, [r7, #30]
 8032ef4:	9300      	str	r3, [sp, #0]
 8032ef6:	68fb      	ldr	r3, [r7, #12]
 8032ef8:	2103      	movs	r1, #3
 8032efa:	69b8      	ldr	r0, [r7, #24]
 8032efc:	f7ff ff6e 	bl	8032ddc <w5500_rn>
    }
    w5500_w2(s, W5500_S0, 0x28, (uint16_t) (ptr + n));  // Advance read pointer
 8032f00:	8a7a      	ldrh	r2, [r7, #18]
 8032f02:	8bbb      	ldrh	r3, [r7, #28]
 8032f04:	4413      	add	r3, r2
 8032f06:	b29b      	uxth	r3, r3
 8032f08:	2228      	movs	r2, #40	@ 0x28
 8032f0a:	2101      	movs	r1, #1
 8032f0c:	69b8      	ldr	r0, [r7, #24]
 8032f0e:	f7ff ff43 	bl	8032d98 <w5500_w2>
    w5500_w1(s, W5500_S0, 1, 0x40);                     // Sock0 CR -> RECV
 8032f12:	2340      	movs	r3, #64	@ 0x40
 8032f14:	2201      	movs	r2, #1
 8032f16:	2101      	movs	r1, #1
 8032f18:	69b8      	ldr	r0, [r7, #24]
 8032f1a:	f7ff ff24 	bl	8032d66 <w5500_w1>
    // printf("  RX_RD: tot=%u n=%u r=%u\n", n2, n, r);
  }
  return r;
 8032f1e:	8bfb      	ldrh	r3, [r7, #30]
}
 8032f20:	4618      	mov	r0, r3
 8032f22:	3720      	adds	r7, #32
 8032f24:	46bd      	mov	sp, r7
 8032f26:	bd80      	pop	{r7, pc}

08032f28 <w5500_tx>:

static size_t w5500_tx(const void *buf, size_t buflen,
                       struct mg_tcpip_if *ifp) {
 8032f28:	b580      	push	{r7, lr}
 8032f2a:	b08a      	sub	sp, #40	@ 0x28
 8032f2c:	af02      	add	r7, sp, #8
 8032f2e:	60f8      	str	r0, [r7, #12]
 8032f30:	60b9      	str	r1, [r7, #8]
 8032f32:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 8032f34:	687b      	ldr	r3, [r7, #4]
 8032f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8032f38:	617b      	str	r3, [r7, #20]
  uint16_t i, ptr, n = 0, len = (uint16_t) buflen;
 8032f3a:	2300      	movs	r3, #0
 8032f3c:	83bb      	strh	r3, [r7, #28]
 8032f3e:	68bb      	ldr	r3, [r7, #8]
 8032f40:	837b      	strh	r3, [r7, #26]
  while (n < len) n = w5500_r2(s, W5500_S0, 0x20);      // Wait for space
 8032f42:	e006      	b.n	8032f52 <w5500_tx+0x2a>
 8032f44:	2220      	movs	r2, #32
 8032f46:	2101      	movs	r1, #1
 8032f48:	6978      	ldr	r0, [r7, #20]
 8032f4a:	f7ff ff76 	bl	8032e3a <w5500_r2>
 8032f4e:	4603      	mov	r3, r0
 8032f50:	83bb      	strh	r3, [r7, #28]
 8032f52:	8bba      	ldrh	r2, [r7, #28]
 8032f54:	8b7b      	ldrh	r3, [r7, #26]
 8032f56:	429a      	cmp	r2, r3
 8032f58:	d3f4      	bcc.n	8032f44 <w5500_tx+0x1c>
  ptr = w5500_r2(s, W5500_S0, 0x24);                    // Get write pointer
 8032f5a:	2224      	movs	r2, #36	@ 0x24
 8032f5c:	2101      	movs	r1, #1
 8032f5e:	6978      	ldr	r0, [r7, #20]
 8032f60:	f7ff ff6b 	bl	8032e3a <w5500_r2>
 8032f64:	4603      	mov	r3, r0
 8032f66:	827b      	strh	r3, [r7, #18]
  w5500_wn(s, W5500_TX0, ptr, (void *) buf, len);       // Write data
 8032f68:	8b7b      	ldrh	r3, [r7, #26]
 8032f6a:	8a7a      	ldrh	r2, [r7, #18]
 8032f6c:	9300      	str	r3, [sp, #0]
 8032f6e:	68fb      	ldr	r3, [r7, #12]
 8032f70:	2102      	movs	r1, #2
 8032f72:	6978      	ldr	r0, [r7, #20]
 8032f74:	f7ff fee0 	bl	8032d38 <w5500_wn>
  w5500_w2(s, W5500_S0, 0x24, (uint16_t) (ptr + len));  // Advance write pointer
 8032f78:	8a7a      	ldrh	r2, [r7, #18]
 8032f7a:	8b7b      	ldrh	r3, [r7, #26]
 8032f7c:	4413      	add	r3, r2
 8032f7e:	b29b      	uxth	r3, r3
 8032f80:	2224      	movs	r2, #36	@ 0x24
 8032f82:	2101      	movs	r1, #1
 8032f84:	6978      	ldr	r0, [r7, #20]
 8032f86:	f7ff ff07 	bl	8032d98 <w5500_w2>
  w5500_w1(s, W5500_S0, 1, 0x20);                       // Sock0 CR -> SEND
 8032f8a:	2320      	movs	r3, #32
 8032f8c:	2201      	movs	r2, #1
 8032f8e:	2101      	movs	r1, #1
 8032f90:	6978      	ldr	r0, [r7, #20]
 8032f92:	f7ff fee8 	bl	8032d66 <w5500_w1>
  for (i = 0; i < 40; i++) {
 8032f96:	2300      	movs	r3, #0
 8032f98:	83fb      	strh	r3, [r7, #30]
 8032f9a:	e020      	b.n	8032fde <w5500_tx+0xb6>
    uint8_t ir = w5500_r1(s, W5500_S0, 2);  // Read S0 IR
 8032f9c:	2202      	movs	r2, #2
 8032f9e:	2101      	movs	r1, #1
 8032fa0:	6978      	ldr	r0, [r7, #20]
 8032fa2:	f7ff ff32 	bl	8032e0a <w5500_r1>
 8032fa6:	4603      	mov	r3, r0
 8032fa8:	747b      	strb	r3, [r7, #17]
    if (ir == 0) continue;
 8032faa:	7c7b      	ldrb	r3, [r7, #17]
 8032fac:	2b00      	cmp	r3, #0
 8032fae:	d012      	beq.n	8032fd6 <w5500_tx+0xae>
    // printf("IR %d, len=%d, free=%d, ptr %d\n", ir, (int) len, (int) n, ptr);
    w5500_w1(s, W5500_S0, 2, ir);  // Write S0 IR: clear it!
 8032fb0:	7c7b      	ldrb	r3, [r7, #17]
 8032fb2:	2202      	movs	r2, #2
 8032fb4:	2101      	movs	r1, #1
 8032fb6:	6978      	ldr	r0, [r7, #20]
 8032fb8:	f7ff fed5 	bl	8032d66 <w5500_w1>
    if (ir & 8) len = 0;           // Timeout. Report error
 8032fbc:	7c7b      	ldrb	r3, [r7, #17]
 8032fbe:	f003 0308 	and.w	r3, r3, #8
 8032fc2:	2b00      	cmp	r3, #0
 8032fc4:	d001      	beq.n	8032fca <w5500_tx+0xa2>
 8032fc6:	2300      	movs	r3, #0
 8032fc8:	837b      	strh	r3, [r7, #26]
    if (ir & (16 | 8)) break;      // Stop on SEND_OK or timeout
 8032fca:	7c7b      	ldrb	r3, [r7, #17]
 8032fcc:	f003 0318 	and.w	r3, r3, #24
 8032fd0:	2b00      	cmp	r3, #0
 8032fd2:	d108      	bne.n	8032fe6 <w5500_tx+0xbe>
 8032fd4:	e000      	b.n	8032fd8 <w5500_tx+0xb0>
    if (ir == 0) continue;
 8032fd6:	bf00      	nop
  for (i = 0; i < 40; i++) {
 8032fd8:	8bfb      	ldrh	r3, [r7, #30]
 8032fda:	3301      	adds	r3, #1
 8032fdc:	83fb      	strh	r3, [r7, #30]
 8032fde:	8bfb      	ldrh	r3, [r7, #30]
 8032fe0:	2b27      	cmp	r3, #39	@ 0x27
 8032fe2:	d9db      	bls.n	8032f9c <w5500_tx+0x74>
 8032fe4:	e000      	b.n	8032fe8 <w5500_tx+0xc0>
    if (ir & (16 | 8)) break;      // Stop on SEND_OK or timeout
 8032fe6:	bf00      	nop
  }
  return len;
 8032fe8:	8b7b      	ldrh	r3, [r7, #26]
}
 8032fea:	4618      	mov	r0, r3
 8032fec:	3720      	adds	r7, #32
 8032fee:	46bd      	mov	sp, r7
 8032ff0:	bd80      	pop	{r7, pc}

08032ff2 <w5500_init>:

static bool w5500_init(struct mg_tcpip_if *ifp) {
 8032ff2:	b580      	push	{r7, lr}
 8032ff4:	b084      	sub	sp, #16
 8032ff6:	af00      	add	r7, sp, #0
 8032ff8:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 8032ffa:	687b      	ldr	r3, [r7, #4]
 8032ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8032ffe:	60fb      	str	r3, [r7, #12]
  s->end(s->spi);
 8033000:	68fb      	ldr	r3, [r7, #12]
 8033002:	689b      	ldr	r3, [r3, #8]
 8033004:	68fa      	ldr	r2, [r7, #12]
 8033006:	6812      	ldr	r2, [r2, #0]
 8033008:	4610      	mov	r0, r2
 803300a:	4798      	blx	r3
  w5500_w1(s, W5500_CR, 0, 0x80);     // Reset chip: CR -> 0x80
 803300c:	2380      	movs	r3, #128	@ 0x80
 803300e:	2200      	movs	r2, #0
 8033010:	2100      	movs	r1, #0
 8033012:	68f8      	ldr	r0, [r7, #12]
 8033014:	f7ff fea7 	bl	8032d66 <w5500_w1>
  w5500_w1(s, W5500_CR, 0x2e, 0);     // CR PHYCFGR -> reset
 8033018:	2300      	movs	r3, #0
 803301a:	222e      	movs	r2, #46	@ 0x2e
 803301c:	2100      	movs	r1, #0
 803301e:	68f8      	ldr	r0, [r7, #12]
 8033020:	f7ff fea1 	bl	8032d66 <w5500_w1>
  w5500_w1(s, W5500_CR, 0x2e, 0xf8);  // CR PHYCFGR -> set
 8033024:	23f8      	movs	r3, #248	@ 0xf8
 8033026:	222e      	movs	r2, #46	@ 0x2e
 8033028:	2100      	movs	r1, #0
 803302a:	68f8      	ldr	r0, [r7, #12]
 803302c:	f7ff fe9b 	bl	8032d66 <w5500_w1>
  // w5500_wn(s, W5500_CR, 9, s->mac, 6);      // Set source MAC
  w5500_w1(s, W5500_S0, 0x1e, 16);          // Sock0 RX buf size
 8033030:	2310      	movs	r3, #16
 8033032:	221e      	movs	r2, #30
 8033034:	2101      	movs	r1, #1
 8033036:	68f8      	ldr	r0, [r7, #12]
 8033038:	f7ff fe95 	bl	8032d66 <w5500_w1>
  w5500_w1(s, W5500_S0, 0x1f, 16);          // Sock0 TX buf size
 803303c:	2310      	movs	r3, #16
 803303e:	221f      	movs	r2, #31
 8033040:	2101      	movs	r1, #1
 8033042:	68f8      	ldr	r0, [r7, #12]
 8033044:	f7ff fe8f 	bl	8032d66 <w5500_w1>
  w5500_w1(s, W5500_S0, 0, 4);              // Sock0 MR -> MACRAW
 8033048:	2304      	movs	r3, #4
 803304a:	2200      	movs	r2, #0
 803304c:	2101      	movs	r1, #1
 803304e:	68f8      	ldr	r0, [r7, #12]
 8033050:	f7ff fe89 	bl	8032d66 <w5500_w1>
  w5500_w1(s, W5500_S0, 1, 1);              // Sock0 CR -> OPEN
 8033054:	2301      	movs	r3, #1
 8033056:	2201      	movs	r2, #1
 8033058:	2101      	movs	r1, #1
 803305a:	68f8      	ldr	r0, [r7, #12]
 803305c:	f7ff fe83 	bl	8032d66 <w5500_w1>
  return w5500_r1(s, W5500_S0, 3) == 0x42;  // Sock0 SR == MACRAW
 8033060:	2203      	movs	r2, #3
 8033062:	2101      	movs	r1, #1
 8033064:	68f8      	ldr	r0, [r7, #12]
 8033066:	f7ff fed0 	bl	8032e0a <w5500_r1>
 803306a:	4603      	mov	r3, r0
 803306c:	2b42      	cmp	r3, #66	@ 0x42
 803306e:	bf0c      	ite	eq
 8033070:	2301      	moveq	r3, #1
 8033072:	2300      	movne	r3, #0
 8033074:	b2db      	uxtb	r3, r3
}
 8033076:	4618      	mov	r0, r3
 8033078:	3710      	adds	r7, #16
 803307a:	46bd      	mov	sp, r7
 803307c:	bd80      	pop	{r7, pc}

0803307e <w5500_up>:

static bool w5500_up(struct mg_tcpip_if *ifp) {
 803307e:	b580      	push	{r7, lr}
 8033080:	b084      	sub	sp, #16
 8033082:	af00      	add	r7, sp, #0
 8033084:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_spi *spi = (struct mg_tcpip_spi *) ifp->driver_data;
 8033086:	687b      	ldr	r3, [r7, #4]
 8033088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 803308a:	60fb      	str	r3, [r7, #12]
  uint8_t phycfgr = w5500_r1(spi, W5500_CR, 0x2e);
 803308c:	222e      	movs	r2, #46	@ 0x2e
 803308e:	2100      	movs	r1, #0
 8033090:	68f8      	ldr	r0, [r7, #12]
 8033092:	f7ff feba 	bl	8032e0a <w5500_r1>
 8033096:	4603      	mov	r3, r0
 8033098:	72fb      	strb	r3, [r7, #11]
  return phycfgr & 1;  // Bit 0 of PHYCFGR is LNK (0 - down, 1 - up)
 803309a:	7afb      	ldrb	r3, [r7, #11]
 803309c:	f003 0301 	and.w	r3, r3, #1
 80330a0:	2b00      	cmp	r3, #0
 80330a2:	bf14      	ite	ne
 80330a4:	2301      	movne	r3, #1
 80330a6:	2300      	moveq	r3, #0
 80330a8:	b2db      	uxtb	r3, r3
}
 80330aa:	4618      	mov	r0, r3
 80330ac:	3710      	adds	r7, #16
 80330ae:	46bd      	mov	sp, r7
 80330b0:	bd80      	pop	{r7, pc}
	...

080330b4 <has_mqtt_prefix>:
#include <ctype.h>

#define PREFIX "mqtt://"
#define MAX_PORT 65535

int has_mqtt_prefix(const char *url) {
 80330b4:	b580      	push	{r7, lr}
 80330b6:	b082      	sub	sp, #8
 80330b8:	af00      	add	r7, sp, #0
 80330ba:	6078      	str	r0, [r7, #4]
    return strncmp(url, PREFIX, strlen(PREFIX)) == 0;
 80330bc:	2207      	movs	r2, #7
 80330be:	4907      	ldr	r1, [pc, #28]	@ (80330dc <has_mqtt_prefix+0x28>)
 80330c0:	6878      	ldr	r0, [r7, #4]
 80330c2:	f002 feca 	bl	8035e5a <strncmp>
 80330c6:	4603      	mov	r3, r0
 80330c8:	2b00      	cmp	r3, #0
 80330ca:	bf0c      	ite	eq
 80330cc:	2301      	moveq	r3, #1
 80330ce:	2300      	movne	r3, #0
 80330d0:	b2db      	uxtb	r3, r3
}
 80330d2:	4618      	mov	r0, r3
 80330d4:	3708      	adds	r7, #8
 80330d6:	46bd      	mov	sp, r7
 80330d8:	bd80      	pop	{r7, pc}
 80330da:	bf00      	nop
 80330dc:	08043534 	.word	0x08043534

080330e0 <is_valid_ip_or_domain>:

int is_valid_ip_or_domain(const char *host) {
 80330e0:	b580      	push	{r7, lr}
 80330e2:	b08a      	sub	sp, #40	@ 0x28
 80330e4:	af00      	add	r7, sp, #0
 80330e6:	6078      	str	r0, [r7, #4]
    int dot_count = 0;
 80330e8:	2300      	movs	r3, #0
 80330ea:	627b      	str	r3, [r7, #36]	@ 0x24
    int is_ip_format = 1;
 80330ec:	2301      	movs	r3, #1
 80330ee:	623b      	str	r3, [r7, #32]

    // Проверка, является ли это IP-адресом
    for (int i = 0; host[i] != '\0'; i++) {
 80330f0:	2300      	movs	r3, #0
 80330f2:	61fb      	str	r3, [r7, #28]
 80330f4:	e01b      	b.n	803312e <is_valid_ip_or_domain+0x4e>
        if (host[i] == '.') {
 80330f6:	69fb      	ldr	r3, [r7, #28]
 80330f8:	687a      	ldr	r2, [r7, #4]
 80330fa:	4413      	add	r3, r2
 80330fc:	781b      	ldrb	r3, [r3, #0]
 80330fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8033100:	d103      	bne.n	803310a <is_valid_ip_or_domain+0x2a>
            dot_count++;
 8033102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8033104:	3301      	adds	r3, #1
 8033106:	627b      	str	r3, [r7, #36]	@ 0x24
 8033108:	e00e      	b.n	8033128 <is_valid_ip_or_domain+0x48>
        } else if (!isdigit(host[i])) {
 803310a:	69fb      	ldr	r3, [r7, #28]
 803310c:	687a      	ldr	r2, [r7, #4]
 803310e:	4413      	add	r3, r2
 8033110:	781b      	ldrb	r3, [r3, #0]
 8033112:	3301      	adds	r3, #1
 8033114:	4a39      	ldr	r2, [pc, #228]	@ (80331fc <is_valid_ip_or_domain+0x11c>)
 8033116:	4413      	add	r3, r2
 8033118:	781b      	ldrb	r3, [r3, #0]
 803311a:	f003 0304 	and.w	r3, r3, #4
 803311e:	2b00      	cmp	r3, #0
 8033120:	d102      	bne.n	8033128 <is_valid_ip_or_domain+0x48>
            is_ip_format = 0;
 8033122:	2300      	movs	r3, #0
 8033124:	623b      	str	r3, [r7, #32]
            break;
 8033126:	e008      	b.n	803313a <is_valid_ip_or_domain+0x5a>
    for (int i = 0; host[i] != '\0'; i++) {
 8033128:	69fb      	ldr	r3, [r7, #28]
 803312a:	3301      	adds	r3, #1
 803312c:	61fb      	str	r3, [r7, #28]
 803312e:	69fb      	ldr	r3, [r7, #28]
 8033130:	687a      	ldr	r2, [r7, #4]
 8033132:	4413      	add	r3, r2
 8033134:	781b      	ldrb	r3, [r3, #0]
 8033136:	2b00      	cmp	r3, #0
 8033138:	d1dd      	bne.n	80330f6 <is_valid_ip_or_domain+0x16>
        }
    }

    // Если это может быть IP-адрес
    if (is_ip_format && dot_count == 3) {
 803313a:	6a3b      	ldr	r3, [r7, #32]
 803313c:	2b00      	cmp	r3, #0
 803313e:	d026      	beq.n	803318e <is_valid_ip_or_domain+0xae>
 8033140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8033142:	2b03      	cmp	r3, #3
 8033144:	d123      	bne.n	803318e <is_valid_ip_or_domain+0xae>
        int octet;
        const char *ptr = host;
 8033146:	687b      	ldr	r3, [r7, #4]
 8033148:	61bb      	str	r3, [r7, #24]

        for (int i = 0; i < 4; i++) {
 803314a:	2300      	movs	r3, #0
 803314c:	617b      	str	r3, [r7, #20]
 803314e:	e019      	b.n	8033184 <is_valid_ip_or_domain+0xa4>
            octet = atoi(ptr);
 8033150:	69b8      	ldr	r0, [r7, #24]
 8033152:	f000 f917 	bl	8033384 <atoi>
 8033156:	60f8      	str	r0, [r7, #12]
            if (octet < 0 || octet > 255) return 0;  // Неверный диапазон октета
 8033158:	68fb      	ldr	r3, [r7, #12]
 803315a:	2b00      	cmp	r3, #0
 803315c:	db02      	blt.n	8033164 <is_valid_ip_or_domain+0x84>
 803315e:	68fb      	ldr	r3, [r7, #12]
 8033160:	2bff      	cmp	r3, #255	@ 0xff
 8033162:	dd01      	ble.n	8033168 <is_valid_ip_or_domain+0x88>
 8033164:	2300      	movs	r3, #0
 8033166:	e044      	b.n	80331f2 <is_valid_ip_or_domain+0x112>

            // Переход к следующему октету
            ptr = strchr(ptr, '.');
 8033168:	212e      	movs	r1, #46	@ 0x2e
 803316a:	69b8      	ldr	r0, [r7, #24]
 803316c:	f002 fe57 	bl	8035e1e <strchr>
 8033170:	61b8      	str	r0, [r7, #24]
            if (ptr != NULL) ptr++;
 8033172:	69bb      	ldr	r3, [r7, #24]
 8033174:	2b00      	cmp	r3, #0
 8033176:	d002      	beq.n	803317e <is_valid_ip_or_domain+0x9e>
 8033178:	69bb      	ldr	r3, [r7, #24]
 803317a:	3301      	adds	r3, #1
 803317c:	61bb      	str	r3, [r7, #24]
        for (int i = 0; i < 4; i++) {
 803317e:	697b      	ldr	r3, [r7, #20]
 8033180:	3301      	adds	r3, #1
 8033182:	617b      	str	r3, [r7, #20]
 8033184:	697b      	ldr	r3, [r7, #20]
 8033186:	2b03      	cmp	r3, #3
 8033188:	dde2      	ble.n	8033150 <is_valid_ip_or_domain+0x70>
        }
        return 1;  // Строка - корректный IP-адрес
 803318a:	2301      	movs	r3, #1
 803318c:	e031      	b.n	80331f2 <is_valid_ip_or_domain+0x112>
    }

    // Проверка на корректность доменного имени (буквы, цифры, точки и дефисы)
    dot_count = 0;
 803318e:	2300      	movs	r3, #0
 8033190:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 0; host[i] != '\0'; i++) {
 8033192:	2300      	movs	r3, #0
 8033194:	613b      	str	r3, [r7, #16]
 8033196:	e020      	b.n	80331da <is_valid_ip_or_domain+0xfa>
        if (host[i] == '.') {
 8033198:	693b      	ldr	r3, [r7, #16]
 803319a:	687a      	ldr	r2, [r7, #4]
 803319c:	4413      	add	r3, r2
 803319e:	781b      	ldrb	r3, [r3, #0]
 80331a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80331a2:	d103      	bne.n	80331ac <is_valid_ip_or_domain+0xcc>
            dot_count++;
 80331a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80331a6:	3301      	adds	r3, #1
 80331a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80331aa:	e013      	b.n	80331d4 <is_valid_ip_or_domain+0xf4>
        } else if (!isalnum(host[i]) && host[i] != '-') {
 80331ac:	693b      	ldr	r3, [r7, #16]
 80331ae:	687a      	ldr	r2, [r7, #4]
 80331b0:	4413      	add	r3, r2
 80331b2:	781b      	ldrb	r3, [r3, #0]
 80331b4:	3301      	adds	r3, #1
 80331b6:	4a11      	ldr	r2, [pc, #68]	@ (80331fc <is_valid_ip_or_domain+0x11c>)
 80331b8:	4413      	add	r3, r2
 80331ba:	781b      	ldrb	r3, [r3, #0]
 80331bc:	f003 0307 	and.w	r3, r3, #7
 80331c0:	2b00      	cmp	r3, #0
 80331c2:	d107      	bne.n	80331d4 <is_valid_ip_or_domain+0xf4>
 80331c4:	693b      	ldr	r3, [r7, #16]
 80331c6:	687a      	ldr	r2, [r7, #4]
 80331c8:	4413      	add	r3, r2
 80331ca:	781b      	ldrb	r3, [r3, #0]
 80331cc:	2b2d      	cmp	r3, #45	@ 0x2d
 80331ce:	d001      	beq.n	80331d4 <is_valid_ip_or_domain+0xf4>
            return 0;  // Некорректный символ для доменного имени
 80331d0:	2300      	movs	r3, #0
 80331d2:	e00e      	b.n	80331f2 <is_valid_ip_or_domain+0x112>
    for (int i = 0; host[i] != '\0'; i++) {
 80331d4:	693b      	ldr	r3, [r7, #16]
 80331d6:	3301      	adds	r3, #1
 80331d8:	613b      	str	r3, [r7, #16]
 80331da:	693b      	ldr	r3, [r7, #16]
 80331dc:	687a      	ldr	r2, [r7, #4]
 80331de:	4413      	add	r3, r2
 80331e0:	781b      	ldrb	r3, [r3, #0]
 80331e2:	2b00      	cmp	r3, #0
 80331e4:	d1d8      	bne.n	8033198 <is_valid_ip_or_domain+0xb8>
        }
    }
    return dot_count > 0; // Доменное имя должно содержать хотя бы одну точку
 80331e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80331e8:	2b00      	cmp	r3, #0
 80331ea:	bfcc      	ite	gt
 80331ec:	2301      	movgt	r3, #1
 80331ee:	2300      	movle	r3, #0
 80331f0:	b2db      	uxtb	r3, r3
}
 80331f2:	4618      	mov	r0, r3
 80331f4:	3728      	adds	r7, #40	@ 0x28
 80331f6:	46bd      	mov	sp, r7
 80331f8:	bd80      	pop	{r7, pc}
 80331fa:	bf00      	nop
 80331fc:	08044b58 	.word	0x08044b58

08033200 <is_valid_port>:

int is_valid_port(const char *port_str) {
 8033200:	b580      	push	{r7, lr}
 8033202:	b084      	sub	sp, #16
 8033204:	af00      	add	r7, sp, #0
 8033206:	6078      	str	r0, [r7, #4]
    int port = atoi(port_str);
 8033208:	6878      	ldr	r0, [r7, #4]
 803320a:	f000 f8bb 	bl	8033384 <atoi>
 803320e:	60f8      	str	r0, [r7, #12]
    if (port < 1 || port > MAX_PORT) {
 8033210:	68fb      	ldr	r3, [r7, #12]
 8033212:	2b00      	cmp	r3, #0
 8033214:	dd03      	ble.n	803321e <is_valid_port+0x1e>
 8033216:	68fb      	ldr	r3, [r7, #12]
 8033218:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 803321c:	db10      	blt.n	8033240 <is_valid_port+0x40>
        return 0; // Порт вне диапазона
 803321e:	2300      	movs	r3, #0
 8033220:	e013      	b.n	803324a <is_valid_port+0x4a>
    }
    // Проверить, что порт состоит только из цифр
    while (*port_str) {
        if (!isdigit(*port_str)) {
 8033222:	687b      	ldr	r3, [r7, #4]
 8033224:	781b      	ldrb	r3, [r3, #0]
 8033226:	3301      	adds	r3, #1
 8033228:	4a0a      	ldr	r2, [pc, #40]	@ (8033254 <is_valid_port+0x54>)
 803322a:	4413      	add	r3, r2
 803322c:	781b      	ldrb	r3, [r3, #0]
 803322e:	f003 0304 	and.w	r3, r3, #4
 8033232:	2b00      	cmp	r3, #0
 8033234:	d101      	bne.n	803323a <is_valid_port+0x3a>
            return 0;
 8033236:	2300      	movs	r3, #0
 8033238:	e007      	b.n	803324a <is_valid_port+0x4a>
        }
        port_str++;
 803323a:	687b      	ldr	r3, [r7, #4]
 803323c:	3301      	adds	r3, #1
 803323e:	607b      	str	r3, [r7, #4]
    while (*port_str) {
 8033240:	687b      	ldr	r3, [r7, #4]
 8033242:	781b      	ldrb	r3, [r3, #0]
 8033244:	2b00      	cmp	r3, #0
 8033246:	d1ec      	bne.n	8033222 <is_valid_port+0x22>
    }
    return 1;
 8033248:	2301      	movs	r3, #1
}
 803324a:	4618      	mov	r0, r3
 803324c:	3710      	adds	r7, #16
 803324e:	46bd      	mov	sp, r7
 8033250:	bd80      	pop	{r7, pc}
 8033252:	bf00      	nop
 8033254:	08044b58 	.word	0x08044b58

08033258 <is_valid_mqtt_url>:

int is_valid_mqtt_url(const char *url) {
 8033258:	b580      	push	{r7, lr}
 803325a:	b0c6      	sub	sp, #280	@ 0x118
 803325c:	af00      	add	r7, sp, #0
 803325e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8033262:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8033266:	6018      	str	r0, [r3, #0]
    if (!has_mqtt_prefix(url)) {
 8033268:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 803326c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8033270:	6818      	ldr	r0, [r3, #0]
 8033272:	f7ff ff1f 	bl	80330b4 <has_mqtt_prefix>
 8033276:	4603      	mov	r3, r0
 8033278:	2b00      	cmp	r3, #0
 803327a:	d105      	bne.n	8033288 <is_valid_mqtt_url+0x30>
        printf("Error: URL does not start with 'mqtt://'\n");
 803327c:	482e      	ldr	r0, [pc, #184]	@ (8033338 <is_valid_mqtt_url+0xe0>)
 803327e:	f002 f85f 	bl	8035340 <puts>
        return -1;
 8033282:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8033286:	e051      	b.n	803332c <is_valid_mqtt_url+0xd4>
    }

    // Найти первый символ после "mqtt://"
    const char *host_start = url + strlen(PREFIX);
 8033288:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 803328c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8033290:	681b      	ldr	r3, [r3, #0]
 8033292:	3307      	adds	r3, #7
 8033294:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    const char *colon = strchr(host_start, ':');
 8033298:	213a      	movs	r1, #58	@ 0x3a
 803329a:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 803329e:	f002 fdbe 	bl	8035e1e <strchr>
 80332a2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    if (!colon) {
 80332a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80332aa:	2b00      	cmp	r3, #0
 80332ac:	d105      	bne.n	80332ba <is_valid_mqtt_url+0x62>
        printf("Error: URL does not contain a port separator ':'\n");
 80332ae:	4823      	ldr	r0, [pc, #140]	@ (803333c <is_valid_mqtt_url+0xe4>)
 80332b0:	f002 f846 	bl	8035340 <puts>
        return -2;
 80332b4:	f06f 0301 	mvn.w	r3, #1
 80332b8:	e038      	b.n	803332c <is_valid_mqtt_url+0xd4>
    }

    // Извлечь доменное имя или IP-адрес
    char host[256];
    strncpy(host, host_start, colon - host_start);
 80332ba:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80332be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80332c2:	1ad3      	subs	r3, r2, r3
 80332c4:	461a      	mov	r2, r3
 80332c6:	f107 030c 	add.w	r3, r7, #12
 80332ca:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80332ce:	4618      	mov	r0, r3
 80332d0:	f002 fdd5 	bl	8035e7e <strncpy>
    host[colon - host_start] = '\0';
 80332d4:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80332d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80332dc:	1ad3      	subs	r3, r2, r3
 80332de:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80332e2:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80332e6:	2100      	movs	r1, #0
 80332e8:	54d1      	strb	r1, [r2, r3]

    if (!is_valid_ip_or_domain(host)) {
 80332ea:	f107 030c 	add.w	r3, r7, #12
 80332ee:	4618      	mov	r0, r3
 80332f0:	f7ff fef6 	bl	80330e0 <is_valid_ip_or_domain>
 80332f4:	4603      	mov	r3, r0
 80332f6:	2b00      	cmp	r3, #0
 80332f8:	d105      	bne.n	8033306 <is_valid_mqtt_url+0xae>
        printf("Error: Invalid domain or IP address\n");
 80332fa:	4811      	ldr	r0, [pc, #68]	@ (8033340 <is_valid_mqtt_url+0xe8>)
 80332fc:	f002 f820 	bl	8035340 <puts>
        return -3;
 8033300:	f06f 0302 	mvn.w	r3, #2
 8033304:	e012      	b.n	803332c <is_valid_mqtt_url+0xd4>
    }

    // Проверить порт
    const char *port_str = colon + 1;
 8033306:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 803330a:	3301      	adds	r3, #1
 803330c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    if (!is_valid_port(port_str)) {
 8033310:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8033314:	f7ff ff74 	bl	8033200 <is_valid_port>
 8033318:	4603      	mov	r3, r0
 803331a:	2b00      	cmp	r3, #0
 803331c:	d105      	bne.n	803332a <is_valid_mqtt_url+0xd2>
        printf("Error: Invalid port number\n");
 803331e:	4809      	ldr	r0, [pc, #36]	@ (8033344 <is_valid_mqtt_url+0xec>)
 8033320:	f002 f80e 	bl	8035340 <puts>
        return -4;
 8033324:	f06f 0303 	mvn.w	r3, #3
 8033328:	e000      	b.n	803332c <is_valid_mqtt_url+0xd4>
    }

    return 0; // URL прошел все проверки
 803332a:	2300      	movs	r3, #0
}
 803332c:	4618      	mov	r0, r3
 803332e:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8033332:	46bd      	mov	sp, r7
 8033334:	bd80      	pop	{r7, pc}
 8033336:	bf00      	nop
 8033338:	0804353c 	.word	0x0804353c
 803333c:	08043568 	.word	0x08043568
 8033340:	0804359c 	.word	0x0804359c
 8033344:	080435c0 	.word	0x080435c0

08033348 <__assert_func>:
 8033348:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 803334a:	4614      	mov	r4, r2
 803334c:	461a      	mov	r2, r3
 803334e:	4b09      	ldr	r3, [pc, #36]	@ (8033374 <__assert_func+0x2c>)
 8033350:	681b      	ldr	r3, [r3, #0]
 8033352:	4605      	mov	r5, r0
 8033354:	68d8      	ldr	r0, [r3, #12]
 8033356:	b954      	cbnz	r4, 803336e <__assert_func+0x26>
 8033358:	4b07      	ldr	r3, [pc, #28]	@ (8033378 <__assert_func+0x30>)
 803335a:	461c      	mov	r4, r3
 803335c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8033360:	9100      	str	r1, [sp, #0]
 8033362:	462b      	mov	r3, r5
 8033364:	4905      	ldr	r1, [pc, #20]	@ (803337c <__assert_func+0x34>)
 8033366:	f000 f811 	bl	803338c <fiprintf>
 803336a:	f003 ffe1 	bl	8037330 <abort>
 803336e:	4b04      	ldr	r3, [pc, #16]	@ (8033380 <__assert_func+0x38>)
 8033370:	e7f4      	b.n	803335c <__assert_func+0x14>
 8033372:	bf00      	nop
 8033374:	20000430 	.word	0x20000430
 8033378:	0804479b 	.word	0x0804479b
 803337c:	0804476d 	.word	0x0804476d
 8033380:	08044760 	.word	0x08044760

08033384 <atoi>:
 8033384:	220a      	movs	r2, #10
 8033386:	2100      	movs	r1, #0
 8033388:	f002 b8b8 	b.w	80354fc <strtol>

0803338c <fiprintf>:
 803338c:	b40e      	push	{r1, r2, r3}
 803338e:	b503      	push	{r0, r1, lr}
 8033390:	4601      	mov	r1, r0
 8033392:	ab03      	add	r3, sp, #12
 8033394:	4805      	ldr	r0, [pc, #20]	@ (80333ac <fiprintf+0x20>)
 8033396:	f853 2b04 	ldr.w	r2, [r3], #4
 803339a:	6800      	ldr	r0, [r0, #0]
 803339c:	9301      	str	r3, [sp, #4]
 803339e:	f001 fab9 	bl	8034914 <_vfiprintf_r>
 80333a2:	b002      	add	sp, #8
 80333a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80333a8:	b003      	add	sp, #12
 80333aa:	4770      	bx	lr
 80333ac:	20000430 	.word	0x20000430

080333b0 <printf>:
 80333b0:	b40f      	push	{r0, r1, r2, r3}
 80333b2:	b507      	push	{r0, r1, r2, lr}
 80333b4:	4906      	ldr	r1, [pc, #24]	@ (80333d0 <printf+0x20>)
 80333b6:	ab04      	add	r3, sp, #16
 80333b8:	6808      	ldr	r0, [r1, #0]
 80333ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80333be:	6881      	ldr	r1, [r0, #8]
 80333c0:	9301      	str	r3, [sp, #4]
 80333c2:	f000 f809 	bl	80333d8 <_vfprintf_r>
 80333c6:	b003      	add	sp, #12
 80333c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80333cc:	b004      	add	sp, #16
 80333ce:	4770      	bx	lr
 80333d0:	20000430 	.word	0x20000430
 80333d4:	00000000 	.word	0x00000000

080333d8 <_vfprintf_r>:
 80333d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80333dc:	b0d3      	sub	sp, #332	@ 0x14c
 80333de:	468b      	mov	fp, r1
 80333e0:	4690      	mov	r8, r2
 80333e2:	461c      	mov	r4, r3
 80333e4:	461e      	mov	r6, r3
 80333e6:	9003      	str	r0, [sp, #12]
 80333e8:	f003 fe90 	bl	803710c <_localeconv_r>
 80333ec:	6803      	ldr	r3, [r0, #0]
 80333ee:	9316      	str	r3, [sp, #88]	@ 0x58
 80333f0:	4618      	mov	r0, r3
 80333f2:	f7dc ff55 	bl	80102a0 <strlen>
 80333f6:	9b03      	ldr	r3, [sp, #12]
 80333f8:	900d      	str	r0, [sp, #52]	@ 0x34
 80333fa:	b123      	cbz	r3, 8033406 <_vfprintf_r+0x2e>
 80333fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80333fe:	b913      	cbnz	r3, 8033406 <_vfprintf_r+0x2e>
 8033400:	9803      	ldr	r0, [sp, #12]
 8033402:	f002 fa4f 	bl	80358a4 <__sinit>
 8033406:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 803340a:	07da      	lsls	r2, r3, #31
 803340c:	d407      	bmi.n	803341e <_vfprintf_r+0x46>
 803340e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8033412:	059b      	lsls	r3, r3, #22
 8033414:	d403      	bmi.n	803341e <_vfprintf_r+0x46>
 8033416:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 803341a:	f003 ff22 	bl	8037262 <__retarget_lock_acquire_recursive>
 803341e:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 8033422:	049f      	lsls	r7, r3, #18
 8033424:	d409      	bmi.n	803343a <_vfprintf_r+0x62>
 8033426:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 803342a:	f8ab 300c 	strh.w	r3, [fp, #12]
 803342e:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 8033432:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8033436:	f8cb 3064 	str.w	r3, [fp, #100]	@ 0x64
 803343a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 803343e:	071d      	lsls	r5, r3, #28
 8033440:	d502      	bpl.n	8033448 <_vfprintf_r+0x70>
 8033442:	f8db 3010 	ldr.w	r3, [fp, #16]
 8033446:	b9c3      	cbnz	r3, 803347a <_vfprintf_r+0xa2>
 8033448:	9803      	ldr	r0, [sp, #12]
 803344a:	4659      	mov	r1, fp
 803344c:	f002 fbe6 	bl	8035c1c <__swsetup_r>
 8033450:	b198      	cbz	r0, 803347a <_vfprintf_r+0xa2>
 8033452:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 8033456:	07d8      	lsls	r0, r3, #31
 8033458:	d506      	bpl.n	8033468 <_vfprintf_r+0x90>
 803345a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803345e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8033460:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8033462:	b053      	add	sp, #332	@ 0x14c
 8033464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8033468:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 803346c:	0599      	lsls	r1, r3, #22
 803346e:	d4f4      	bmi.n	803345a <_vfprintf_r+0x82>
 8033470:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 8033474:	f003 fef7 	bl	8037266 <__retarget_lock_release_recursive>
 8033478:	e7ef      	b.n	803345a <_vfprintf_r+0x82>
 803347a:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 803347e:	f003 021a 	and.w	r2, r3, #26
 8033482:	2a0a      	cmp	r2, #10
 8033484:	d116      	bne.n	80334b4 <_vfprintf_r+0xdc>
 8033486:	f9bb 200e 	ldrsh.w	r2, [fp, #14]
 803348a:	2a00      	cmp	r2, #0
 803348c:	db12      	blt.n	80334b4 <_vfprintf_r+0xdc>
 803348e:	f8db 2064 	ldr.w	r2, [fp, #100]	@ 0x64
 8033492:	07d2      	lsls	r2, r2, #31
 8033494:	d405      	bmi.n	80334a2 <_vfprintf_r+0xca>
 8033496:	059b      	lsls	r3, r3, #22
 8033498:	d403      	bmi.n	80334a2 <_vfprintf_r+0xca>
 803349a:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 803349e:	f003 fee2 	bl	8037266 <__retarget_lock_release_recursive>
 80334a2:	9803      	ldr	r0, [sp, #12]
 80334a4:	4623      	mov	r3, r4
 80334a6:	4642      	mov	r2, r8
 80334a8:	4659      	mov	r1, fp
 80334aa:	b053      	add	sp, #332	@ 0x14c
 80334ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80334b0:	f001 b9be 	b.w	8034830 <__sbprintf>
 80334b4:	ed9f 7b92 	vldr	d7, [pc, #584]	@ 8033700 <_vfprintf_r+0x328>
 80334b8:	2300      	movs	r3, #0
 80334ba:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 80334be:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80334c2:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 80334c6:	ac29      	add	r4, sp, #164	@ 0xa4
 80334c8:	9426      	str	r4, [sp, #152]	@ 0x98
 80334ca:	9304      	str	r3, [sp, #16]
 80334cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80334ce:	9312      	str	r3, [sp, #72]	@ 0x48
 80334d0:	9317      	str	r3, [sp, #92]	@ 0x5c
 80334d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80334d4:	4643      	mov	r3, r8
 80334d6:	461d      	mov	r5, r3
 80334d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80334dc:	b10a      	cbz	r2, 80334e2 <_vfprintf_r+0x10a>
 80334de:	2a25      	cmp	r2, #37	@ 0x25
 80334e0:	d1f9      	bne.n	80334d6 <_vfprintf_r+0xfe>
 80334e2:	ebb5 0708 	subs.w	r7, r5, r8
 80334e6:	d00d      	beq.n	8033504 <_vfprintf_r+0x12c>
 80334e8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80334ea:	443b      	add	r3, r7
 80334ec:	9328      	str	r3, [sp, #160]	@ 0xa0
 80334ee:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80334f0:	3301      	adds	r3, #1
 80334f2:	2b07      	cmp	r3, #7
 80334f4:	e9c4 8700 	strd	r8, r7, [r4]
 80334f8:	9327      	str	r3, [sp, #156]	@ 0x9c
 80334fa:	dc75      	bgt.n	80335e8 <_vfprintf_r+0x210>
 80334fc:	3408      	adds	r4, #8
 80334fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8033500:	443b      	add	r3, r7
 8033502:	930f      	str	r3, [sp, #60]	@ 0x3c
 8033504:	782b      	ldrb	r3, [r5, #0]
 8033506:	2b00      	cmp	r3, #0
 8033508:	f001 814f 	beq.w	80347aa <_vfprintf_r+0x13d2>
 803350c:	2200      	movs	r2, #0
 803350e:	1c6b      	adds	r3, r5, #1
 8033510:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8033514:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 8033518:	920e      	str	r2, [sp, #56]	@ 0x38
 803351a:	4615      	mov	r5, r2
 803351c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8033520:	9206      	str	r2, [sp, #24]
 8033522:	930c      	str	r3, [sp, #48]	@ 0x30
 8033524:	9b06      	ldr	r3, [sp, #24]
 8033526:	3b20      	subs	r3, #32
 8033528:	2b5a      	cmp	r3, #90	@ 0x5a
 803352a:	f200 85aa 	bhi.w	8034082 <_vfprintf_r+0xcaa>
 803352e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8033532:	009d      	.short	0x009d
 8033534:	05a805a8 	.word	0x05a805a8
 8033538:	05a800a5 	.word	0x05a800a5
 803353c:	05a805a8 	.word	0x05a805a8
 8033540:	05a80085 	.word	0x05a80085
 8033544:	00a805a8 	.word	0x00a805a8
 8033548:	05a800b2 	.word	0x05a800b2
 803354c:	00b400af 	.word	0x00b400af
 8033550:	00ce05a8 	.word	0x00ce05a8
 8033554:	00d100d1 	.word	0x00d100d1
 8033558:	00d100d1 	.word	0x00d100d1
 803355c:	00d100d1 	.word	0x00d100d1
 8033560:	00d100d1 	.word	0x00d100d1
 8033564:	05a800d1 	.word	0x05a800d1
 8033568:	05a805a8 	.word	0x05a805a8
 803356c:	05a805a8 	.word	0x05a805a8
 8033570:	05a805a8 	.word	0x05a805a8
 8033574:	05a80146 	.word	0x05a80146
 8033578:	011a0107 	.word	0x011a0107
 803357c:	01460146 	.word	0x01460146
 8033580:	05a80146 	.word	0x05a80146
 8033584:	05a805a8 	.word	0x05a805a8
 8033588:	00e205a8 	.word	0x00e205a8
 803358c:	05a805a8 	.word	0x05a805a8
 8033590:	05a804a3 	.word	0x05a804a3
 8033594:	05a805a8 	.word	0x05a805a8
 8033598:	05a804ed 	.word	0x05a804ed
 803359c:	05a8050e 	.word	0x05a8050e
 80335a0:	053005a8 	.word	0x053005a8
 80335a4:	05a805a8 	.word	0x05a805a8
 80335a8:	05a805a8 	.word	0x05a805a8
 80335ac:	05a805a8 	.word	0x05a805a8
 80335b0:	05a805a8 	.word	0x05a805a8
 80335b4:	05a80146 	.word	0x05a80146
 80335b8:	011c0107 	.word	0x011c0107
 80335bc:	01460146 	.word	0x01460146
 80335c0:	00ed0146 	.word	0x00ed0146
 80335c4:	0101011c 	.word	0x0101011c
 80335c8:	00fa05a8 	.word	0x00fa05a8
 80335cc:	048705a8 	.word	0x048705a8
 80335d0:	04dc04a5 	.word	0x04dc04a5
 80335d4:	05a80101 	.word	0x05a80101
 80335d8:	009b04ed 	.word	0x009b04ed
 80335dc:	05a80510 	.word	0x05a80510
 80335e0:	006505a8 	.word	0x006505a8
 80335e4:	009b05a8 	.word	0x009b05a8
 80335e8:	9803      	ldr	r0, [sp, #12]
 80335ea:	aa26      	add	r2, sp, #152	@ 0x98
 80335ec:	4659      	mov	r1, fp
 80335ee:	f001 f95f 	bl	80348b0 <__sprint_r>
 80335f2:	2800      	cmp	r0, #0
 80335f4:	f040 814d 	bne.w	8033892 <_vfprintf_r+0x4ba>
 80335f8:	ac29      	add	r4, sp, #164	@ 0xa4
 80335fa:	e780      	b.n	80334fe <_vfprintf_r+0x126>
 80335fc:	4b42      	ldr	r3, [pc, #264]	@ (8033708 <_vfprintf_r+0x330>)
 80335fe:	9319      	str	r3, [sp, #100]	@ 0x64
 8033600:	f015 0320 	ands.w	r3, r5, #32
 8033604:	f000 84c8 	beq.w	8033f98 <_vfprintf_r+0xbc0>
 8033608:	3607      	adds	r6, #7
 803360a:	f026 0307 	bic.w	r3, r6, #7
 803360e:	461a      	mov	r2, r3
 8033610:	685f      	ldr	r7, [r3, #4]
 8033612:	f852 6b08 	ldr.w	r6, [r2], #8
 8033616:	9207      	str	r2, [sp, #28]
 8033618:	07eb      	lsls	r3, r5, #31
 803361a:	d50a      	bpl.n	8033632 <_vfprintf_r+0x25a>
 803361c:	ea56 0307 	orrs.w	r3, r6, r7
 8033620:	d007      	beq.n	8033632 <_vfprintf_r+0x25a>
 8033622:	2330      	movs	r3, #48	@ 0x30
 8033624:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 8033628:	9b06      	ldr	r3, [sp, #24]
 803362a:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 803362e:	f045 0502 	orr.w	r5, r5, #2
 8033632:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8033636:	2302      	movs	r3, #2
 8033638:	f000 bc2e 	b.w	8033e98 <_vfprintf_r+0xac0>
 803363c:	9803      	ldr	r0, [sp, #12]
 803363e:	f003 fd65 	bl	803710c <_localeconv_r>
 8033642:	6843      	ldr	r3, [r0, #4]
 8033644:	9317      	str	r3, [sp, #92]	@ 0x5c
 8033646:	4618      	mov	r0, r3
 8033648:	f7dc fe2a 	bl	80102a0 <strlen>
 803364c:	9012      	str	r0, [sp, #72]	@ 0x48
 803364e:	9803      	ldr	r0, [sp, #12]
 8033650:	f003 fd5c 	bl	803710c <_localeconv_r>
 8033654:	6883      	ldr	r3, [r0, #8]
 8033656:	9309      	str	r3, [sp, #36]	@ 0x24
 8033658:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 803365a:	b12b      	cbz	r3, 8033668 <_vfprintf_r+0x290>
 803365c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803365e:	b11b      	cbz	r3, 8033668 <_vfprintf_r+0x290>
 8033660:	781b      	ldrb	r3, [r3, #0]
 8033662:	b10b      	cbz	r3, 8033668 <_vfprintf_r+0x290>
 8033664:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 8033668:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803366a:	e757      	b.n	803351c <_vfprintf_r+0x144>
 803366c:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 8033670:	2b00      	cmp	r3, #0
 8033672:	d1f9      	bne.n	8033668 <_vfprintf_r+0x290>
 8033674:	2320      	movs	r3, #32
 8033676:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 803367a:	e7f5      	b.n	8033668 <_vfprintf_r+0x290>
 803367c:	f045 0501 	orr.w	r5, r5, #1
 8033680:	e7f2      	b.n	8033668 <_vfprintf_r+0x290>
 8033682:	f856 3b04 	ldr.w	r3, [r6], #4
 8033686:	930e      	str	r3, [sp, #56]	@ 0x38
 8033688:	2b00      	cmp	r3, #0
 803368a:	daed      	bge.n	8033668 <_vfprintf_r+0x290>
 803368c:	425b      	negs	r3, r3
 803368e:	930e      	str	r3, [sp, #56]	@ 0x38
 8033690:	f045 0504 	orr.w	r5, r5, #4
 8033694:	e7e8      	b.n	8033668 <_vfprintf_r+0x290>
 8033696:	232b      	movs	r3, #43	@ 0x2b
 8033698:	e7ed      	b.n	8033676 <_vfprintf_r+0x29e>
 803369a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803369c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80336a0:	9206      	str	r2, [sp, #24]
 80336a2:	2a2a      	cmp	r2, #42	@ 0x2a
 80336a4:	d10f      	bne.n	80336c6 <_vfprintf_r+0x2ee>
 80336a6:	f856 2b04 	ldr.w	r2, [r6], #4
 80336aa:	930c      	str	r3, [sp, #48]	@ 0x30
 80336ac:	ea42 79e2 	orr.w	r9, r2, r2, asr #31
 80336b0:	e7da      	b.n	8033668 <_vfprintf_r+0x290>
 80336b2:	fb01 2909 	mla	r9, r1, r9, r2
 80336b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80336ba:	9206      	str	r2, [sp, #24]
 80336bc:	9a06      	ldr	r2, [sp, #24]
 80336be:	3a30      	subs	r2, #48	@ 0x30
 80336c0:	2a09      	cmp	r2, #9
 80336c2:	d9f6      	bls.n	80336b2 <_vfprintf_r+0x2da>
 80336c4:	e72d      	b.n	8033522 <_vfprintf_r+0x14a>
 80336c6:	f04f 0900 	mov.w	r9, #0
 80336ca:	210a      	movs	r1, #10
 80336cc:	e7f6      	b.n	80336bc <_vfprintf_r+0x2e4>
 80336ce:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 80336d2:	e7c9      	b.n	8033668 <_vfprintf_r+0x290>
 80336d4:	2200      	movs	r2, #0
 80336d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80336d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80336da:	210a      	movs	r1, #10
 80336dc:	9a06      	ldr	r2, [sp, #24]
 80336de:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80336e0:	3a30      	subs	r2, #48	@ 0x30
 80336e2:	fb01 2200 	mla	r2, r1, r0, r2
 80336e6:	920e      	str	r2, [sp, #56]	@ 0x38
 80336e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80336ec:	9206      	str	r2, [sp, #24]
 80336ee:	3a30      	subs	r2, #48	@ 0x30
 80336f0:	2a09      	cmp	r2, #9
 80336f2:	d9f3      	bls.n	80336dc <_vfprintf_r+0x304>
 80336f4:	e715      	b.n	8033522 <_vfprintf_r+0x14a>
 80336f6:	f045 0508 	orr.w	r5, r5, #8
 80336fa:	e7b5      	b.n	8033668 <_vfprintf_r+0x290>
 80336fc:	f3af 8000 	nop.w
	...
 8033708:	080447ac 	.word	0x080447ac
 803370c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803370e:	781b      	ldrb	r3, [r3, #0]
 8033710:	2b68      	cmp	r3, #104	@ 0x68
 8033712:	bf01      	itttt	eq
 8033714:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 8033716:	3301      	addeq	r3, #1
 8033718:	930c      	streq	r3, [sp, #48]	@ 0x30
 803371a:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 803371e:	bf18      	it	ne
 8033720:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 8033724:	e7a0      	b.n	8033668 <_vfprintf_r+0x290>
 8033726:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8033728:	781b      	ldrb	r3, [r3, #0]
 803372a:	2b6c      	cmp	r3, #108	@ 0x6c
 803372c:	d105      	bne.n	803373a <_vfprintf_r+0x362>
 803372e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8033730:	3301      	adds	r3, #1
 8033732:	930c      	str	r3, [sp, #48]	@ 0x30
 8033734:	f045 0520 	orr.w	r5, r5, #32
 8033738:	e796      	b.n	8033668 <_vfprintf_r+0x290>
 803373a:	f045 0510 	orr.w	r5, r5, #16
 803373e:	e793      	b.n	8033668 <_vfprintf_r+0x290>
 8033740:	4632      	mov	r2, r6
 8033742:	f852 3b04 	ldr.w	r3, [r2], #4
 8033746:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 803374a:	2300      	movs	r3, #0
 803374c:	9207      	str	r2, [sp, #28]
 803374e:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8033752:	469a      	mov	sl, r3
 8033754:	f04f 0901 	mov.w	r9, #1
 8033758:	9310      	str	r3, [sp, #64]	@ 0x40
 803375a:	461f      	mov	r7, r3
 803375c:	9308      	str	r3, [sp, #32]
 803375e:	461e      	mov	r6, r3
 8033760:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 8033764:	e1da      	b.n	8033b1c <_vfprintf_r+0x744>
 8033766:	f045 0510 	orr.w	r5, r5, #16
 803376a:	06af      	lsls	r7, r5, #26
 803376c:	d512      	bpl.n	8033794 <_vfprintf_r+0x3bc>
 803376e:	3607      	adds	r6, #7
 8033770:	f026 0307 	bic.w	r3, r6, #7
 8033774:	461a      	mov	r2, r3
 8033776:	685f      	ldr	r7, [r3, #4]
 8033778:	f852 6b08 	ldr.w	r6, [r2], #8
 803377c:	9207      	str	r2, [sp, #28]
 803377e:	2f00      	cmp	r7, #0
 8033780:	da06      	bge.n	8033790 <_vfprintf_r+0x3b8>
 8033782:	4276      	negs	r6, r6
 8033784:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8033788:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 803378c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8033790:	2301      	movs	r3, #1
 8033792:	e384      	b.n	8033e9e <_vfprintf_r+0xac6>
 8033794:	4633      	mov	r3, r6
 8033796:	06ee      	lsls	r6, r5, #27
 8033798:	f853 7b04 	ldr.w	r7, [r3], #4
 803379c:	9307      	str	r3, [sp, #28]
 803379e:	d502      	bpl.n	80337a6 <_vfprintf_r+0x3ce>
 80337a0:	463e      	mov	r6, r7
 80337a2:	17ff      	asrs	r7, r7, #31
 80337a4:	e7eb      	b.n	803377e <_vfprintf_r+0x3a6>
 80337a6:	0668      	lsls	r0, r5, #25
 80337a8:	d503      	bpl.n	80337b2 <_vfprintf_r+0x3da>
 80337aa:	b23e      	sxth	r6, r7
 80337ac:	f347 37c0 	sbfx	r7, r7, #15, #1
 80337b0:	e7e5      	b.n	803377e <_vfprintf_r+0x3a6>
 80337b2:	05a9      	lsls	r1, r5, #22
 80337b4:	d5f4      	bpl.n	80337a0 <_vfprintf_r+0x3c8>
 80337b6:	b27e      	sxtb	r6, r7
 80337b8:	f347 17c0 	sbfx	r7, r7, #7, #1
 80337bc:	e7df      	b.n	803377e <_vfprintf_r+0x3a6>
 80337be:	3607      	adds	r6, #7
 80337c0:	f026 0307 	bic.w	r3, r6, #7
 80337c4:	ecb3 7b02 	vldmia	r3!, {d7}
 80337c8:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80337cc:	9307      	str	r3, [sp, #28]
 80337ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80337d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80337d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80337d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80337d8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80337da:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 80337de:	4b85      	ldr	r3, [pc, #532]	@ (80339f4 <_vfprintf_r+0x61c>)
 80337e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80337e4:	f7dd f9ba 	bl	8010b5c <__aeabi_dcmpun>
 80337e8:	bb10      	cbnz	r0, 8033830 <_vfprintf_r+0x458>
 80337ea:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 80337ee:	4b81      	ldr	r3, [pc, #516]	@ (80339f4 <_vfprintf_r+0x61c>)
 80337f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80337f4:	f7dd f994 	bl	8010b20 <__aeabi_dcmple>
 80337f8:	b9d0      	cbnz	r0, 8033830 <_vfprintf_r+0x458>
 80337fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80337fe:	2200      	movs	r2, #0
 8033800:	2300      	movs	r3, #0
 8033802:	f7dd f983 	bl	8010b0c <__aeabi_dcmplt>
 8033806:	b110      	cbz	r0, 803380e <_vfprintf_r+0x436>
 8033808:	232d      	movs	r3, #45	@ 0x2d
 803380a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 803380e:	4a7a      	ldr	r2, [pc, #488]	@ (80339f8 <_vfprintf_r+0x620>)
 8033810:	4b7a      	ldr	r3, [pc, #488]	@ (80339fc <_vfprintf_r+0x624>)
 8033812:	9906      	ldr	r1, [sp, #24]
 8033814:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 8033818:	2947      	cmp	r1, #71	@ 0x47
 803381a:	bfd4      	ite	le
 803381c:	4690      	movle	r8, r2
 803381e:	4698      	movgt	r8, r3
 8033820:	f04f 0a00 	mov.w	sl, #0
 8033824:	f04f 0903 	mov.w	r9, #3
 8033828:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 803382c:	f000 bff8 	b.w	8034820 <_vfprintf_r+0x1448>
 8033830:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8033834:	4610      	mov	r0, r2
 8033836:	4619      	mov	r1, r3
 8033838:	f7dd f990 	bl	8010b5c <__aeabi_dcmpun>
 803383c:	4682      	mov	sl, r0
 803383e:	b140      	cbz	r0, 8033852 <_vfprintf_r+0x47a>
 8033840:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8033842:	4a6f      	ldr	r2, [pc, #444]	@ (8033a00 <_vfprintf_r+0x628>)
 8033844:	2b00      	cmp	r3, #0
 8033846:	bfbc      	itt	lt
 8033848:	232d      	movlt	r3, #45	@ 0x2d
 803384a:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 803384e:	4b6d      	ldr	r3, [pc, #436]	@ (8033a04 <_vfprintf_r+0x62c>)
 8033850:	e7df      	b.n	8033812 <_vfprintf_r+0x43a>
 8033852:	9b06      	ldr	r3, [sp, #24]
 8033854:	2b61      	cmp	r3, #97	@ 0x61
 8033856:	d02e      	beq.n	80338b6 <_vfprintf_r+0x4de>
 8033858:	2b41      	cmp	r3, #65	@ 0x41
 803385a:	d12e      	bne.n	80338ba <_vfprintf_r+0x4e2>
 803385c:	2358      	movs	r3, #88	@ 0x58
 803385e:	2230      	movs	r2, #48	@ 0x30
 8033860:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 8033864:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 8033868:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 803386c:	f045 0502 	orr.w	r5, r5, #2
 8033870:	f340 80ae 	ble.w	80339d0 <_vfprintf_r+0x5f8>
 8033874:	9803      	ldr	r0, [sp, #12]
 8033876:	f109 0101 	add.w	r1, r9, #1
 803387a:	f004 fd0f 	bl	803829c <_malloc_r>
 803387e:	4680      	mov	r8, r0
 8033880:	2800      	cmp	r0, #0
 8033882:	f040 80aa 	bne.w	80339da <_vfprintf_r+0x602>
 8033886:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 803388a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 803388e:	f8ab 300c 	strh.w	r3, [fp, #12]
 8033892:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 8033896:	07d9      	lsls	r1, r3, #31
 8033898:	d407      	bmi.n	80338aa <_vfprintf_r+0x4d2>
 803389a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 803389e:	059a      	lsls	r2, r3, #22
 80338a0:	d403      	bmi.n	80338aa <_vfprintf_r+0x4d2>
 80338a2:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 80338a6:	f003 fcde 	bl	8037266 <__retarget_lock_release_recursive>
 80338aa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80338ae:	065b      	lsls	r3, r3, #25
 80338b0:	f57f add6 	bpl.w	8033460 <_vfprintf_r+0x88>
 80338b4:	e5d1      	b.n	803345a <_vfprintf_r+0x82>
 80338b6:	2378      	movs	r3, #120	@ 0x78
 80338b8:	e7d1      	b.n	803385e <_vfprintf_r+0x486>
 80338ba:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 80338be:	f000 808e 	beq.w	80339de <_vfprintf_r+0x606>
 80338c2:	9b06      	ldr	r3, [sp, #24]
 80338c4:	f023 0320 	bic.w	r3, r3, #32
 80338c8:	2b47      	cmp	r3, #71	@ 0x47
 80338ca:	d105      	bne.n	80338d8 <_vfprintf_r+0x500>
 80338cc:	f1b9 0f00 	cmp.w	r9, #0
 80338d0:	d102      	bne.n	80338d8 <_vfprintf_r+0x500>
 80338d2:	46ca      	mov	sl, r9
 80338d4:	f04f 0901 	mov.w	r9, #1
 80338d8:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 80338dc:	9311      	str	r3, [sp, #68]	@ 0x44
 80338de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80338e0:	2b00      	cmp	r3, #0
 80338e2:	da7f      	bge.n	80339e4 <_vfprintf_r+0x60c>
 80338e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80338e6:	9314      	str	r3, [sp, #80]	@ 0x50
 80338e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80338ea:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80338ee:	9315      	str	r3, [sp, #84]	@ 0x54
 80338f0:	232d      	movs	r3, #45	@ 0x2d
 80338f2:	931c      	str	r3, [sp, #112]	@ 0x70
 80338f4:	9b06      	ldr	r3, [sp, #24]
 80338f6:	f023 0320 	bic.w	r3, r3, #32
 80338fa:	2b41      	cmp	r3, #65	@ 0x41
 80338fc:	9308      	str	r3, [sp, #32]
 80338fe:	f040 81e7 	bne.w	8033cd0 <_vfprintf_r+0x8f8>
 8033902:	a820      	add	r0, sp, #128	@ 0x80
 8033904:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8033908:	f003 fcd2 	bl	80372b0 <frexp>
 803390c:	2200      	movs	r2, #0
 803390e:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8033912:	ec51 0b10 	vmov	r0, r1, d0
 8033916:	f7dc fe87 	bl	8010628 <__aeabi_dmul>
 803391a:	4602      	mov	r2, r0
 803391c:	460b      	mov	r3, r1
 803391e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8033922:	2200      	movs	r2, #0
 8033924:	2300      	movs	r3, #0
 8033926:	f7dd f8e7 	bl	8010af8 <__aeabi_dcmpeq>
 803392a:	b108      	cbz	r0, 8033930 <_vfprintf_r+0x558>
 803392c:	2301      	movs	r3, #1
 803392e:	9320      	str	r3, [sp, #128]	@ 0x80
 8033930:	4a35      	ldr	r2, [pc, #212]	@ (8033a08 <_vfprintf_r+0x630>)
 8033932:	4b36      	ldr	r3, [pc, #216]	@ (8033a0c <_vfprintf_r+0x634>)
 8033934:	9906      	ldr	r1, [sp, #24]
 8033936:	2961      	cmp	r1, #97	@ 0x61
 8033938:	bf18      	it	ne
 803393a:	461a      	movne	r2, r3
 803393c:	9210      	str	r2, [sp, #64]	@ 0x40
 803393e:	f109 37ff 	add.w	r7, r9, #4294967295	@ 0xffffffff
 8033942:	4646      	mov	r6, r8
 8033944:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8033948:	4b31      	ldr	r3, [pc, #196]	@ (8033a10 <_vfprintf_r+0x638>)
 803394a:	2200      	movs	r2, #0
 803394c:	f7dc fe6c 	bl	8010628 <__aeabi_dmul>
 8033950:	4602      	mov	r2, r0
 8033952:	460b      	mov	r3, r1
 8033954:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8033958:	f7dd f916 	bl	8010b88 <__aeabi_d2iz>
 803395c:	9013      	str	r0, [sp, #76]	@ 0x4c
 803395e:	f7dc fdf9 	bl	8010554 <__aeabi_i2d>
 8033962:	4602      	mov	r2, r0
 8033964:	460b      	mov	r3, r1
 8033966:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 803396a:	f7dc fca5 	bl	80102b8 <__aeabi_dsub>
 803396e:	4602      	mov	r2, r0
 8033970:	460b      	mov	r3, r1
 8033972:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8033976:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8033978:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803397a:	5c9b      	ldrb	r3, [r3, r2]
 803397c:	f806 3b01 	strb.w	r3, [r6], #1
 8033980:	1c7a      	adds	r2, r7, #1
 8033982:	d006      	beq.n	8033992 <_vfprintf_r+0x5ba>
 8033984:	1e7b      	subs	r3, r7, #1
 8033986:	931d      	str	r3, [sp, #116]	@ 0x74
 8033988:	2200      	movs	r2, #0
 803398a:	2300      	movs	r3, #0
 803398c:	f7dd f8b4 	bl	8010af8 <__aeabi_dcmpeq>
 8033990:	b370      	cbz	r0, 80339f0 <_vfprintf_r+0x618>
 8033992:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8033996:	4b1f      	ldr	r3, [pc, #124]	@ (8033a14 <_vfprintf_r+0x63c>)
 8033998:	2200      	movs	r2, #0
 803399a:	f7dd f8d5 	bl	8010b48 <__aeabi_dcmpgt>
 803399e:	2800      	cmp	r0, #0
 80339a0:	d13a      	bne.n	8033a18 <_vfprintf_r+0x640>
 80339a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80339a6:	4b1b      	ldr	r3, [pc, #108]	@ (8033a14 <_vfprintf_r+0x63c>)
 80339a8:	2200      	movs	r2, #0
 80339aa:	f7dd f8a5 	bl	8010af8 <__aeabi_dcmpeq>
 80339ae:	b110      	cbz	r0, 80339b6 <_vfprintf_r+0x5de>
 80339b0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80339b2:	07db      	lsls	r3, r3, #31
 80339b4:	d430      	bmi.n	8033a18 <_vfprintf_r+0x640>
 80339b6:	4633      	mov	r3, r6
 80339b8:	19f1      	adds	r1, r6, r7
 80339ba:	2030      	movs	r0, #48	@ 0x30
 80339bc:	1aca      	subs	r2, r1, r3
 80339be:	2a00      	cmp	r2, #0
 80339c0:	f280 8183 	bge.w	8033cca <_vfprintf_r+0x8f2>
 80339c4:	1c7b      	adds	r3, r7, #1
 80339c6:	3701      	adds	r7, #1
 80339c8:	bfb8      	it	lt
 80339ca:	2300      	movlt	r3, #0
 80339cc:	441e      	add	r6, r3
 80339ce:	e037      	b.n	8033a40 <_vfprintf_r+0x668>
 80339d0:	f04f 0a00 	mov.w	sl, #0
 80339d4:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 80339d8:	e77e      	b.n	80338d8 <_vfprintf_r+0x500>
 80339da:	4682      	mov	sl, r0
 80339dc:	e77c      	b.n	80338d8 <_vfprintf_r+0x500>
 80339de:	f04f 0906 	mov.w	r9, #6
 80339e2:	e779      	b.n	80338d8 <_vfprintf_r+0x500>
 80339e4:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 80339e8:	2300      	movs	r3, #0
 80339ea:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 80339ee:	e780      	b.n	80338f2 <_vfprintf_r+0x51a>
 80339f0:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 80339f2:	e7a7      	b.n	8033944 <_vfprintf_r+0x56c>
 80339f4:	7fefffff 	.word	0x7fefffff
 80339f8:	0804479c 	.word	0x0804479c
 80339fc:	080447a0 	.word	0x080447a0
 8033a00:	080447a4 	.word	0x080447a4
 8033a04:	080447a8 	.word	0x080447a8
 8033a08:	080447ac 	.word	0x080447ac
 8033a0c:	080447bd 	.word	0x080447bd
 8033a10:	40300000 	.word	0x40300000
 8033a14:	3fe00000 	.word	0x3fe00000
 8033a18:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8033a1a:	9624      	str	r6, [sp, #144]	@ 0x90
 8033a1c:	7bd9      	ldrb	r1, [r3, #15]
 8033a1e:	2030      	movs	r0, #48	@ 0x30
 8033a20:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8033a22:	1e53      	subs	r3, r2, #1
 8033a24:	9324      	str	r3, [sp, #144]	@ 0x90
 8033a26:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8033a2a:	428b      	cmp	r3, r1
 8033a2c:	f000 814a 	beq.w	8033cc4 <_vfprintf_r+0x8ec>
 8033a30:	2b39      	cmp	r3, #57	@ 0x39
 8033a32:	bf0b      	itete	eq
 8033a34:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 8033a36:	3301      	addne	r3, #1
 8033a38:	7a9b      	ldrbeq	r3, [r3, #10]
 8033a3a:	b2db      	uxtbne	r3, r3
 8033a3c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8033a40:	eba6 0308 	sub.w	r3, r6, r8
 8033a44:	9304      	str	r3, [sp, #16]
 8033a46:	9b08      	ldr	r3, [sp, #32]
 8033a48:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8033a4a:	2b47      	cmp	r3, #71	@ 0x47
 8033a4c:	f040 8189 	bne.w	8033d62 <_vfprintf_r+0x98a>
 8033a50:	1cf1      	adds	r1, r6, #3
 8033a52:	db02      	blt.n	8033a5a <_vfprintf_r+0x682>
 8033a54:	45b1      	cmp	r9, r6
 8033a56:	f280 81a7 	bge.w	8033da8 <_vfprintf_r+0x9d0>
 8033a5a:	9b06      	ldr	r3, [sp, #24]
 8033a5c:	3b02      	subs	r3, #2
 8033a5e:	9306      	str	r3, [sp, #24]
 8033a60:	9906      	ldr	r1, [sp, #24]
 8033a62:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8033a66:	f021 0120 	bic.w	r1, r1, #32
 8033a6a:	2941      	cmp	r1, #65	@ 0x41
 8033a6c:	bf08      	it	eq
 8033a6e:	320f      	addeq	r2, #15
 8033a70:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 8033a74:	bf06      	itte	eq
 8033a76:	b2d2      	uxtbeq	r2, r2
 8033a78:	2101      	moveq	r1, #1
 8033a7a:	2100      	movne	r1, #0
 8033a7c:	2b00      	cmp	r3, #0
 8033a7e:	9320      	str	r3, [sp, #128]	@ 0x80
 8033a80:	bfb8      	it	lt
 8033a82:	f1c6 0301 	rsblt	r3, r6, #1
 8033a86:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 8033a8a:	bfb4      	ite	lt
 8033a8c:	222d      	movlt	r2, #45	@ 0x2d
 8033a8e:	222b      	movge	r2, #43	@ 0x2b
 8033a90:	2b09      	cmp	r3, #9
 8033a92:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 8033a96:	f340 817a 	ble.w	8033d8e <_vfprintf_r+0x9b6>
 8033a9a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 8033a9e:	270a      	movs	r7, #10
 8033aa0:	4602      	mov	r2, r0
 8033aa2:	fbb3 f6f7 	udiv	r6, r3, r7
 8033aa6:	fb07 3116 	mls	r1, r7, r6, r3
 8033aaa:	3130      	adds	r1, #48	@ 0x30
 8033aac:	f802 1c01 	strb.w	r1, [r2, #-1]
 8033ab0:	4619      	mov	r1, r3
 8033ab2:	2963      	cmp	r1, #99	@ 0x63
 8033ab4:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 8033ab8:	4633      	mov	r3, r6
 8033aba:	dcf1      	bgt.n	8033aa0 <_vfprintf_r+0x6c8>
 8033abc:	3330      	adds	r3, #48	@ 0x30
 8033abe:	1e91      	subs	r1, r2, #2
 8033ac0:	f800 3c01 	strb.w	r3, [r0, #-1]
 8033ac4:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 8033ac8:	460b      	mov	r3, r1
 8033aca:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 8033ace:	4283      	cmp	r3, r0
 8033ad0:	f0c0 8158 	bcc.w	8033d84 <_vfprintf_r+0x9ac>
 8033ad4:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 8033ad8:	1a9b      	subs	r3, r3, r2
 8033ada:	4281      	cmp	r1, r0
 8033adc:	bf88      	it	hi
 8033ade:	2300      	movhi	r3, #0
 8033ae0:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8033ae4:	441a      	add	r2, r3
 8033ae6:	ab22      	add	r3, sp, #136	@ 0x88
 8033ae8:	1ad3      	subs	r3, r2, r3
 8033aea:	9a04      	ldr	r2, [sp, #16]
 8033aec:	9318      	str	r3, [sp, #96]	@ 0x60
 8033aee:	2a01      	cmp	r2, #1
 8033af0:	eb03 0902 	add.w	r9, r3, r2
 8033af4:	dc01      	bgt.n	8033afa <_vfprintf_r+0x722>
 8033af6:	07ea      	lsls	r2, r5, #31
 8033af8:	d501      	bpl.n	8033afe <_vfprintf_r+0x726>
 8033afa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8033afc:	4499      	add	r9, r3
 8033afe:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8033b02:	2700      	movs	r7, #0
 8033b04:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8033b08:	9311      	str	r3, [sp, #68]	@ 0x44
 8033b0a:	9708      	str	r7, [sp, #32]
 8033b0c:	463e      	mov	r6, r7
 8033b0e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8033b10:	2b00      	cmp	r3, #0
 8033b12:	f040 8191 	bne.w	8033e38 <_vfprintf_r+0xa60>
 8033b16:	2300      	movs	r3, #0
 8033b18:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8033b1a:	9310      	str	r3, [sp, #64]	@ 0x40
 8033b1c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8033b1e:	454b      	cmp	r3, r9
 8033b20:	bfb8      	it	lt
 8033b22:	464b      	movlt	r3, r9
 8033b24:	9311      	str	r3, [sp, #68]	@ 0x44
 8033b26:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 8033b2a:	b113      	cbz	r3, 8033b32 <_vfprintf_r+0x75a>
 8033b2c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8033b2e:	3301      	adds	r3, #1
 8033b30:	9311      	str	r3, [sp, #68]	@ 0x44
 8033b32:	f015 0302 	ands.w	r3, r5, #2
 8033b36:	931c      	str	r3, [sp, #112]	@ 0x70
 8033b38:	bf1e      	ittt	ne
 8033b3a:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 8033b3c:	3302      	addne	r3, #2
 8033b3e:	9311      	strne	r3, [sp, #68]	@ 0x44
 8033b40:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 8033b44:	931d      	str	r3, [sp, #116]	@ 0x74
 8033b46:	d122      	bne.n	8033b8e <_vfprintf_r+0x7b6>
 8033b48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8033b4a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8033b4c:	1a9b      	subs	r3, r3, r2
 8033b4e:	2b00      	cmp	r3, #0
 8033b50:	9313      	str	r3, [sp, #76]	@ 0x4c
 8033b52:	dd1c      	ble.n	8033b8e <_vfprintf_r+0x7b6>
 8033b54:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8033b56:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8033b5a:	2810      	cmp	r0, #16
 8033b5c:	489f      	ldr	r0, [pc, #636]	@ (8033ddc <_vfprintf_r+0xa04>)
 8033b5e:	6020      	str	r0, [r4, #0]
 8033b60:	f102 0201 	add.w	r2, r2, #1
 8033b64:	f104 0108 	add.w	r1, r4, #8
 8033b68:	f300 8297 	bgt.w	803409a <_vfprintf_r+0xcc2>
 8033b6c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8033b6e:	6060      	str	r0, [r4, #4]
 8033b70:	4403      	add	r3, r0
 8033b72:	2a07      	cmp	r2, #7
 8033b74:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8033b78:	f340 82a4 	ble.w	80340c4 <_vfprintf_r+0xcec>
 8033b7c:	9803      	ldr	r0, [sp, #12]
 8033b7e:	aa26      	add	r2, sp, #152	@ 0x98
 8033b80:	4659      	mov	r1, fp
 8033b82:	f000 fe95 	bl	80348b0 <__sprint_r>
 8033b86:	2800      	cmp	r0, #0
 8033b88:	f040 85ed 	bne.w	8034766 <_vfprintf_r+0x138e>
 8033b8c:	ac29      	add	r4, sp, #164	@ 0xa4
 8033b8e:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 8033b92:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8033b94:	b16a      	cbz	r2, 8033bb2 <_vfprintf_r+0x7da>
 8033b96:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 8033b9a:	6022      	str	r2, [r4, #0]
 8033b9c:	2201      	movs	r2, #1
 8033b9e:	4413      	add	r3, r2
 8033ba0:	9328      	str	r3, [sp, #160]	@ 0xa0
 8033ba2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8033ba4:	6062      	str	r2, [r4, #4]
 8033ba6:	4413      	add	r3, r2
 8033ba8:	2b07      	cmp	r3, #7
 8033baa:	9327      	str	r3, [sp, #156]	@ 0x9c
 8033bac:	f300 828c 	bgt.w	80340c8 <_vfprintf_r+0xcf0>
 8033bb0:	3408      	adds	r4, #8
 8033bb2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8033bb4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8033bb6:	b162      	cbz	r2, 8033bd2 <_vfprintf_r+0x7fa>
 8033bb8:	aa1f      	add	r2, sp, #124	@ 0x7c
 8033bba:	6022      	str	r2, [r4, #0]
 8033bbc:	2202      	movs	r2, #2
 8033bbe:	4413      	add	r3, r2
 8033bc0:	9328      	str	r3, [sp, #160]	@ 0xa0
 8033bc2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8033bc4:	6062      	str	r2, [r4, #4]
 8033bc6:	3301      	adds	r3, #1
 8033bc8:	2b07      	cmp	r3, #7
 8033bca:	9327      	str	r3, [sp, #156]	@ 0x9c
 8033bcc:	f300 8286 	bgt.w	80340dc <_vfprintf_r+0xd04>
 8033bd0:	3408      	adds	r4, #8
 8033bd2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8033bd4:	2b80      	cmp	r3, #128	@ 0x80
 8033bd6:	d122      	bne.n	8033c1e <_vfprintf_r+0x846>
 8033bd8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8033bda:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8033bdc:	1a9b      	subs	r3, r3, r2
 8033bde:	2b00      	cmp	r3, #0
 8033be0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8033be2:	dd1c      	ble.n	8033c1e <_vfprintf_r+0x846>
 8033be4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8033be6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8033bea:	2810      	cmp	r0, #16
 8033bec:	487c      	ldr	r0, [pc, #496]	@ (8033de0 <_vfprintf_r+0xa08>)
 8033bee:	6020      	str	r0, [r4, #0]
 8033bf0:	f102 0201 	add.w	r2, r2, #1
 8033bf4:	f104 0108 	add.w	r1, r4, #8
 8033bf8:	f300 827a 	bgt.w	80340f0 <_vfprintf_r+0xd18>
 8033bfc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8033bfe:	6060      	str	r0, [r4, #4]
 8033c00:	4403      	add	r3, r0
 8033c02:	2a07      	cmp	r2, #7
 8033c04:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8033c08:	f340 8287 	ble.w	803411a <_vfprintf_r+0xd42>
 8033c0c:	9803      	ldr	r0, [sp, #12]
 8033c0e:	aa26      	add	r2, sp, #152	@ 0x98
 8033c10:	4659      	mov	r1, fp
 8033c12:	f000 fe4d 	bl	80348b0 <__sprint_r>
 8033c16:	2800      	cmp	r0, #0
 8033c18:	f040 85a5 	bne.w	8034766 <_vfprintf_r+0x138e>
 8033c1c:	ac29      	add	r4, sp, #164	@ 0xa4
 8033c1e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8033c20:	eba3 0309 	sub.w	r3, r3, r9
 8033c24:	2b00      	cmp	r3, #0
 8033c26:	9310      	str	r3, [sp, #64]	@ 0x40
 8033c28:	dd1c      	ble.n	8033c64 <_vfprintf_r+0x88c>
 8033c2a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8033c2c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8033c30:	2810      	cmp	r0, #16
 8033c32:	486b      	ldr	r0, [pc, #428]	@ (8033de0 <_vfprintf_r+0xa08>)
 8033c34:	6020      	str	r0, [r4, #0]
 8033c36:	f102 0201 	add.w	r2, r2, #1
 8033c3a:	f104 0108 	add.w	r1, r4, #8
 8033c3e:	f300 826e 	bgt.w	803411e <_vfprintf_r+0xd46>
 8033c42:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8033c44:	6060      	str	r0, [r4, #4]
 8033c46:	4403      	add	r3, r0
 8033c48:	2a07      	cmp	r2, #7
 8033c4a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8033c4e:	f340 827b 	ble.w	8034148 <_vfprintf_r+0xd70>
 8033c52:	9803      	ldr	r0, [sp, #12]
 8033c54:	aa26      	add	r2, sp, #152	@ 0x98
 8033c56:	4659      	mov	r1, fp
 8033c58:	f000 fe2a 	bl	80348b0 <__sprint_r>
 8033c5c:	2800      	cmp	r0, #0
 8033c5e:	f040 8582 	bne.w	8034766 <_vfprintf_r+0x138e>
 8033c62:	ac29      	add	r4, sp, #164	@ 0xa4
 8033c64:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8033c66:	9310      	str	r3, [sp, #64]	@ 0x40
 8033c68:	05e8      	lsls	r0, r5, #23
 8033c6a:	f100 8273 	bmi.w	8034154 <_vfprintf_r+0xd7c>
 8033c6e:	444b      	add	r3, r9
 8033c70:	9328      	str	r3, [sp, #160]	@ 0xa0
 8033c72:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8033c74:	3301      	adds	r3, #1
 8033c76:	2b07      	cmp	r3, #7
 8033c78:	e9c4 8900 	strd	r8, r9, [r4]
 8033c7c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8033c7e:	f300 82af 	bgt.w	80341e0 <_vfprintf_r+0xe08>
 8033c82:	3408      	adds	r4, #8
 8033c84:	0768      	lsls	r0, r5, #29
 8033c86:	f100 8550 	bmi.w	803472a <_vfprintf_r+0x1352>
 8033c8a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8033c8e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8033c90:	428a      	cmp	r2, r1
 8033c92:	bfac      	ite	ge
 8033c94:	189b      	addge	r3, r3, r2
 8033c96:	185b      	addlt	r3, r3, r1
 8033c98:	930f      	str	r3, [sp, #60]	@ 0x3c
 8033c9a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8033c9c:	b13b      	cbz	r3, 8033cae <_vfprintf_r+0x8d6>
 8033c9e:	9803      	ldr	r0, [sp, #12]
 8033ca0:	aa26      	add	r2, sp, #152	@ 0x98
 8033ca2:	4659      	mov	r1, fp
 8033ca4:	f000 fe04 	bl	80348b0 <__sprint_r>
 8033ca8:	2800      	cmp	r0, #0
 8033caa:	f040 855c 	bne.w	8034766 <_vfprintf_r+0x138e>
 8033cae:	2300      	movs	r3, #0
 8033cb0:	9327      	str	r3, [sp, #156]	@ 0x9c
 8033cb2:	f1ba 0f00 	cmp.w	sl, #0
 8033cb6:	f040 8572 	bne.w	803479e <_vfprintf_r+0x13c6>
 8033cba:	9e07      	ldr	r6, [sp, #28]
 8033cbc:	ac29      	add	r4, sp, #164	@ 0xa4
 8033cbe:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 8033cc2:	e407      	b.n	80334d4 <_vfprintf_r+0xfc>
 8033cc4:	f802 0c01 	strb.w	r0, [r2, #-1]
 8033cc8:	e6aa      	b.n	8033a20 <_vfprintf_r+0x648>
 8033cca:	f803 0b01 	strb.w	r0, [r3], #1
 8033cce:	e675      	b.n	80339bc <_vfprintf_r+0x5e4>
 8033cd0:	9b08      	ldr	r3, [sp, #32]
 8033cd2:	2b46      	cmp	r3, #70	@ 0x46
 8033cd4:	d005      	beq.n	8033ce2 <_vfprintf_r+0x90a>
 8033cd6:	2b45      	cmp	r3, #69	@ 0x45
 8033cd8:	d11a      	bne.n	8033d10 <_vfprintf_r+0x938>
 8033cda:	f109 0601 	add.w	r6, r9, #1
 8033cde:	2102      	movs	r1, #2
 8033ce0:	e001      	b.n	8033ce6 <_vfprintf_r+0x90e>
 8033ce2:	464e      	mov	r6, r9
 8033ce4:	2103      	movs	r1, #3
 8033ce6:	ab24      	add	r3, sp, #144	@ 0x90
 8033ce8:	9301      	str	r3, [sp, #4]
 8033cea:	ab21      	add	r3, sp, #132	@ 0x84
 8033cec:	9300      	str	r3, [sp, #0]
 8033cee:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8033cf2:	ab20      	add	r3, sp, #128	@ 0x80
 8033cf4:	9803      	ldr	r0, [sp, #12]
 8033cf6:	4632      	mov	r2, r6
 8033cf8:	f003 fbb6 	bl	8037468 <_dtoa_r>
 8033cfc:	9b08      	ldr	r3, [sp, #32]
 8033cfe:	2b47      	cmp	r3, #71	@ 0x47
 8033d00:	4680      	mov	r8, r0
 8033d02:	d119      	bne.n	8033d38 <_vfprintf_r+0x960>
 8033d04:	07e8      	lsls	r0, r5, #31
 8033d06:	d405      	bmi.n	8033d14 <_vfprintf_r+0x93c>
 8033d08:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8033d0a:	eba3 0308 	sub.w	r3, r3, r8
 8033d0e:	e699      	b.n	8033a44 <_vfprintf_r+0x66c>
 8033d10:	464e      	mov	r6, r9
 8033d12:	e7e4      	b.n	8033cde <_vfprintf_r+0x906>
 8033d14:	eb08 0706 	add.w	r7, r8, r6
 8033d18:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8033d1c:	2200      	movs	r2, #0
 8033d1e:	2300      	movs	r3, #0
 8033d20:	f7dc feea 	bl	8010af8 <__aeabi_dcmpeq>
 8033d24:	b100      	cbz	r0, 8033d28 <_vfprintf_r+0x950>
 8033d26:	9724      	str	r7, [sp, #144]	@ 0x90
 8033d28:	2230      	movs	r2, #48	@ 0x30
 8033d2a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8033d2c:	429f      	cmp	r7, r3
 8033d2e:	d9eb      	bls.n	8033d08 <_vfprintf_r+0x930>
 8033d30:	1c59      	adds	r1, r3, #1
 8033d32:	9124      	str	r1, [sp, #144]	@ 0x90
 8033d34:	701a      	strb	r2, [r3, #0]
 8033d36:	e7f8      	b.n	8033d2a <_vfprintf_r+0x952>
 8033d38:	9b08      	ldr	r3, [sp, #32]
 8033d3a:	2b46      	cmp	r3, #70	@ 0x46
 8033d3c:	eb00 0706 	add.w	r7, r0, r6
 8033d40:	d1ea      	bne.n	8033d18 <_vfprintf_r+0x940>
 8033d42:	7803      	ldrb	r3, [r0, #0]
 8033d44:	2b30      	cmp	r3, #48	@ 0x30
 8033d46:	d109      	bne.n	8033d5c <_vfprintf_r+0x984>
 8033d48:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8033d4c:	2200      	movs	r2, #0
 8033d4e:	2300      	movs	r3, #0
 8033d50:	f7dc fed2 	bl	8010af8 <__aeabi_dcmpeq>
 8033d54:	b910      	cbnz	r0, 8033d5c <_vfprintf_r+0x984>
 8033d56:	f1c6 0601 	rsb	r6, r6, #1
 8033d5a:	9620      	str	r6, [sp, #128]	@ 0x80
 8033d5c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8033d5e:	441f      	add	r7, r3
 8033d60:	e7da      	b.n	8033d18 <_vfprintf_r+0x940>
 8033d62:	9b08      	ldr	r3, [sp, #32]
 8033d64:	2b46      	cmp	r3, #70	@ 0x46
 8033d66:	f47f ae7b 	bne.w	8033a60 <_vfprintf_r+0x688>
 8033d6a:	f005 0301 	and.w	r3, r5, #1
 8033d6e:	2e00      	cmp	r6, #0
 8033d70:	ea43 0309 	orr.w	r3, r3, r9
 8033d74:	dd25      	ble.n	8033dc2 <_vfprintf_r+0x9ea>
 8033d76:	b37b      	cbz	r3, 8033dd8 <_vfprintf_r+0xa00>
 8033d78:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8033d7a:	18f3      	adds	r3, r6, r3
 8033d7c:	4499      	add	r9, r3
 8033d7e:	2366      	movs	r3, #102	@ 0x66
 8033d80:	9306      	str	r3, [sp, #24]
 8033d82:	e033      	b.n	8033dec <_vfprintf_r+0xa14>
 8033d84:	f813 7b01 	ldrb.w	r7, [r3], #1
 8033d88:	f806 7f01 	strb.w	r7, [r6, #1]!
 8033d8c:	e69f      	b.n	8033ace <_vfprintf_r+0x6f6>
 8033d8e:	b941      	cbnz	r1, 8033da2 <_vfprintf_r+0x9ca>
 8033d90:	2230      	movs	r2, #48	@ 0x30
 8033d92:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 8033d96:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 8033d9a:	3330      	adds	r3, #48	@ 0x30
 8033d9c:	f802 3b01 	strb.w	r3, [r2], #1
 8033da0:	e6a1      	b.n	8033ae6 <_vfprintf_r+0x70e>
 8033da2:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8033da6:	e7f8      	b.n	8033d9a <_vfprintf_r+0x9c2>
 8033da8:	9b04      	ldr	r3, [sp, #16]
 8033daa:	42b3      	cmp	r3, r6
 8033dac:	dd0d      	ble.n	8033dca <_vfprintf_r+0x9f2>
 8033dae:	9b04      	ldr	r3, [sp, #16]
 8033db0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8033db2:	2e00      	cmp	r6, #0
 8033db4:	eb03 0902 	add.w	r9, r3, r2
 8033db8:	dc0c      	bgt.n	8033dd4 <_vfprintf_r+0x9fc>
 8033dba:	f1c6 0301 	rsb	r3, r6, #1
 8033dbe:	4499      	add	r9, r3
 8033dc0:	e008      	b.n	8033dd4 <_vfprintf_r+0x9fc>
 8033dc2:	b17b      	cbz	r3, 8033de4 <_vfprintf_r+0xa0c>
 8033dc4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8033dc6:	3301      	adds	r3, #1
 8033dc8:	e7d8      	b.n	8033d7c <_vfprintf_r+0x9a4>
 8033dca:	07eb      	lsls	r3, r5, #31
 8033dcc:	d521      	bpl.n	8033e12 <_vfprintf_r+0xa3a>
 8033dce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8033dd0:	eb06 0903 	add.w	r9, r6, r3
 8033dd4:	2367      	movs	r3, #103	@ 0x67
 8033dd6:	e7d3      	b.n	8033d80 <_vfprintf_r+0x9a8>
 8033dd8:	46b1      	mov	r9, r6
 8033dda:	e7d0      	b.n	8033d7e <_vfprintf_r+0x9a6>
 8033ddc:	080447e0 	.word	0x080447e0
 8033de0:	080447d0 	.word	0x080447d0
 8033de4:	2366      	movs	r3, #102	@ 0x66
 8033de6:	9306      	str	r3, [sp, #24]
 8033de8:	f04f 0901 	mov.w	r9, #1
 8033dec:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 8033df0:	9308      	str	r3, [sp, #32]
 8033df2:	d01f      	beq.n	8033e34 <_vfprintf_r+0xa5c>
 8033df4:	2700      	movs	r7, #0
 8033df6:	2e00      	cmp	r6, #0
 8033df8:	9708      	str	r7, [sp, #32]
 8033dfa:	f77f ae88 	ble.w	8033b0e <_vfprintf_r+0x736>
 8033dfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8033e00:	781b      	ldrb	r3, [r3, #0]
 8033e02:	2bff      	cmp	r3, #255	@ 0xff
 8033e04:	d107      	bne.n	8033e16 <_vfprintf_r+0xa3e>
 8033e06:	9b08      	ldr	r3, [sp, #32]
 8033e08:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8033e0a:	443b      	add	r3, r7
 8033e0c:	fb02 9903 	mla	r9, r2, r3, r9
 8033e10:	e67d      	b.n	8033b0e <_vfprintf_r+0x736>
 8033e12:	46b1      	mov	r9, r6
 8033e14:	e7de      	b.n	8033dd4 <_vfprintf_r+0x9fc>
 8033e16:	42b3      	cmp	r3, r6
 8033e18:	daf5      	bge.n	8033e06 <_vfprintf_r+0xa2e>
 8033e1a:	1af6      	subs	r6, r6, r3
 8033e1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8033e1e:	785b      	ldrb	r3, [r3, #1]
 8033e20:	b133      	cbz	r3, 8033e30 <_vfprintf_r+0xa58>
 8033e22:	9b08      	ldr	r3, [sp, #32]
 8033e24:	3301      	adds	r3, #1
 8033e26:	9308      	str	r3, [sp, #32]
 8033e28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8033e2a:	3301      	adds	r3, #1
 8033e2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8033e2e:	e7e6      	b.n	8033dfe <_vfprintf_r+0xa26>
 8033e30:	3701      	adds	r7, #1
 8033e32:	e7e4      	b.n	8033dfe <_vfprintf_r+0xa26>
 8033e34:	9f08      	ldr	r7, [sp, #32]
 8033e36:	e66a      	b.n	8033b0e <_vfprintf_r+0x736>
 8033e38:	232d      	movs	r3, #45	@ 0x2d
 8033e3a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8033e3e:	e66a      	b.n	8033b16 <_vfprintf_r+0x73e>
 8033e40:	06af      	lsls	r7, r5, #26
 8033e42:	d507      	bpl.n	8033e54 <_vfprintf_r+0xa7c>
 8033e44:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8033e46:	6833      	ldr	r3, [r6, #0]
 8033e48:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8033e4a:	17d2      	asrs	r2, r2, #31
 8033e4c:	e9c3 1200 	strd	r1, r2, [r3]
 8033e50:	3604      	adds	r6, #4
 8033e52:	e734      	b.n	8033cbe <_vfprintf_r+0x8e6>
 8033e54:	06e8      	lsls	r0, r5, #27
 8033e56:	d503      	bpl.n	8033e60 <_vfprintf_r+0xa88>
 8033e58:	6833      	ldr	r3, [r6, #0]
 8033e5a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8033e5c:	601a      	str	r2, [r3, #0]
 8033e5e:	e7f7      	b.n	8033e50 <_vfprintf_r+0xa78>
 8033e60:	0669      	lsls	r1, r5, #25
 8033e62:	d503      	bpl.n	8033e6c <_vfprintf_r+0xa94>
 8033e64:	6833      	ldr	r3, [r6, #0]
 8033e66:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8033e68:	801a      	strh	r2, [r3, #0]
 8033e6a:	e7f1      	b.n	8033e50 <_vfprintf_r+0xa78>
 8033e6c:	05aa      	lsls	r2, r5, #22
 8033e6e:	d5f3      	bpl.n	8033e58 <_vfprintf_r+0xa80>
 8033e70:	6833      	ldr	r3, [r6, #0]
 8033e72:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8033e74:	701a      	strb	r2, [r3, #0]
 8033e76:	e7eb      	b.n	8033e50 <_vfprintf_r+0xa78>
 8033e78:	f045 0510 	orr.w	r5, r5, #16
 8033e7c:	f015 0320 	ands.w	r3, r5, #32
 8033e80:	d020      	beq.n	8033ec4 <_vfprintf_r+0xaec>
 8033e82:	3607      	adds	r6, #7
 8033e84:	f026 0307 	bic.w	r3, r6, #7
 8033e88:	461a      	mov	r2, r3
 8033e8a:	685f      	ldr	r7, [r3, #4]
 8033e8c:	f852 6b08 	ldr.w	r6, [r2], #8
 8033e90:	9207      	str	r2, [sp, #28]
 8033e92:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8033e96:	2300      	movs	r3, #0
 8033e98:	2200      	movs	r2, #0
 8033e9a:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8033e9e:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8033ea2:	f000 8491 	beq.w	80347c8 <_vfprintf_r+0x13f0>
 8033ea6:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 8033eaa:	9208      	str	r2, [sp, #32]
 8033eac:	ea56 0207 	orrs.w	r2, r6, r7
 8033eb0:	f040 848f 	bne.w	80347d2 <_vfprintf_r+0x13fa>
 8033eb4:	f1b9 0f00 	cmp.w	r9, #0
 8033eb8:	f000 80db 	beq.w	8034072 <_vfprintf_r+0xc9a>
 8033ebc:	2b01      	cmp	r3, #1
 8033ebe:	f040 848b 	bne.w	80347d8 <_vfprintf_r+0x1400>
 8033ec2:	e083      	b.n	8033fcc <_vfprintf_r+0xbf4>
 8033ec4:	4632      	mov	r2, r6
 8033ec6:	f015 0710 	ands.w	r7, r5, #16
 8033eca:	f852 6b04 	ldr.w	r6, [r2], #4
 8033ece:	9207      	str	r2, [sp, #28]
 8033ed0:	d001      	beq.n	8033ed6 <_vfprintf_r+0xafe>
 8033ed2:	461f      	mov	r7, r3
 8033ed4:	e7dd      	b.n	8033e92 <_vfprintf_r+0xaba>
 8033ed6:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8033eda:	d001      	beq.n	8033ee0 <_vfprintf_r+0xb08>
 8033edc:	b2b6      	uxth	r6, r6
 8033ede:	e7d8      	b.n	8033e92 <_vfprintf_r+0xaba>
 8033ee0:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8033ee4:	d0d5      	beq.n	8033e92 <_vfprintf_r+0xaba>
 8033ee6:	b2f6      	uxtb	r6, r6
 8033ee8:	e7f3      	b.n	8033ed2 <_vfprintf_r+0xafa>
 8033eea:	4633      	mov	r3, r6
 8033eec:	2278      	movs	r2, #120	@ 0x78
 8033eee:	f853 6b04 	ldr.w	r6, [r3], #4
 8033ef2:	9307      	str	r3, [sp, #28]
 8033ef4:	f647 0330 	movw	r3, #30768	@ 0x7830
 8033ef8:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 8033efc:	4b93      	ldr	r3, [pc, #588]	@ (803414c <_vfprintf_r+0xd74>)
 8033efe:	9319      	str	r3, [sp, #100]	@ 0x64
 8033f00:	2700      	movs	r7, #0
 8033f02:	f045 0502 	orr.w	r5, r5, #2
 8033f06:	2302      	movs	r3, #2
 8033f08:	9206      	str	r2, [sp, #24]
 8033f0a:	e7c5      	b.n	8033e98 <_vfprintf_r+0xac0>
 8033f0c:	4633      	mov	r3, r6
 8033f0e:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8033f12:	f853 8b04 	ldr.w	r8, [r3], #4
 8033f16:	9307      	str	r3, [sp, #28]
 8033f18:	f04f 0600 	mov.w	r6, #0
 8033f1c:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 8033f20:	d00f      	beq.n	8033f42 <_vfprintf_r+0xb6a>
 8033f22:	464a      	mov	r2, r9
 8033f24:	4631      	mov	r1, r6
 8033f26:	4640      	mov	r0, r8
 8033f28:	f7dc f96a 	bl	8010200 <memchr>
 8033f2c:	4682      	mov	sl, r0
 8033f2e:	2800      	cmp	r0, #0
 8033f30:	f43f ac7a 	beq.w	8033828 <_vfprintf_r+0x450>
 8033f34:	eba0 0908 	sub.w	r9, r0, r8
 8033f38:	46b2      	mov	sl, r6
 8033f3a:	9610      	str	r6, [sp, #64]	@ 0x40
 8033f3c:	4637      	mov	r7, r6
 8033f3e:	9608      	str	r6, [sp, #32]
 8033f40:	e5ec      	b.n	8033b1c <_vfprintf_r+0x744>
 8033f42:	4640      	mov	r0, r8
 8033f44:	f7dc f9ac 	bl	80102a0 <strlen>
 8033f48:	46b2      	mov	sl, r6
 8033f4a:	4681      	mov	r9, r0
 8033f4c:	e46c      	b.n	8033828 <_vfprintf_r+0x450>
 8033f4e:	f045 0510 	orr.w	r5, r5, #16
 8033f52:	f015 0320 	ands.w	r3, r5, #32
 8033f56:	d009      	beq.n	8033f6c <_vfprintf_r+0xb94>
 8033f58:	3607      	adds	r6, #7
 8033f5a:	f026 0307 	bic.w	r3, r6, #7
 8033f5e:	461a      	mov	r2, r3
 8033f60:	685f      	ldr	r7, [r3, #4]
 8033f62:	f852 6b08 	ldr.w	r6, [r2], #8
 8033f66:	9207      	str	r2, [sp, #28]
 8033f68:	2301      	movs	r3, #1
 8033f6a:	e795      	b.n	8033e98 <_vfprintf_r+0xac0>
 8033f6c:	4632      	mov	r2, r6
 8033f6e:	f015 0710 	ands.w	r7, r5, #16
 8033f72:	f852 6b04 	ldr.w	r6, [r2], #4
 8033f76:	9207      	str	r2, [sp, #28]
 8033f78:	d001      	beq.n	8033f7e <_vfprintf_r+0xba6>
 8033f7a:	461f      	mov	r7, r3
 8033f7c:	e7f4      	b.n	8033f68 <_vfprintf_r+0xb90>
 8033f7e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8033f82:	d001      	beq.n	8033f88 <_vfprintf_r+0xbb0>
 8033f84:	b2b6      	uxth	r6, r6
 8033f86:	e7ef      	b.n	8033f68 <_vfprintf_r+0xb90>
 8033f88:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8033f8c:	d0ec      	beq.n	8033f68 <_vfprintf_r+0xb90>
 8033f8e:	b2f6      	uxtb	r6, r6
 8033f90:	e7f3      	b.n	8033f7a <_vfprintf_r+0xba2>
 8033f92:	4b6f      	ldr	r3, [pc, #444]	@ (8034150 <_vfprintf_r+0xd78>)
 8033f94:	f7ff bb33 	b.w	80335fe <_vfprintf_r+0x226>
 8033f98:	4632      	mov	r2, r6
 8033f9a:	f015 0710 	ands.w	r7, r5, #16
 8033f9e:	f852 6b04 	ldr.w	r6, [r2], #4
 8033fa2:	9207      	str	r2, [sp, #28]
 8033fa4:	d002      	beq.n	8033fac <_vfprintf_r+0xbd4>
 8033fa6:	461f      	mov	r7, r3
 8033fa8:	f7ff bb36 	b.w	8033618 <_vfprintf_r+0x240>
 8033fac:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8033fb0:	d002      	beq.n	8033fb8 <_vfprintf_r+0xbe0>
 8033fb2:	b2b6      	uxth	r6, r6
 8033fb4:	f7ff bb30 	b.w	8033618 <_vfprintf_r+0x240>
 8033fb8:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8033fbc:	f43f ab2c 	beq.w	8033618 <_vfprintf_r+0x240>
 8033fc0:	b2f6      	uxtb	r6, r6
 8033fc2:	e7f0      	b.n	8033fa6 <_vfprintf_r+0xbce>
 8033fc4:	2e0a      	cmp	r6, #10
 8033fc6:	f177 0300 	sbcs.w	r3, r7, #0
 8033fca:	d207      	bcs.n	8033fdc <_vfprintf_r+0xc04>
 8033fcc:	3630      	adds	r6, #48	@ 0x30
 8033fce:	b2f6      	uxtb	r6, r6
 8033fd0:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 8033fd4:	f20d 1847 	addw	r8, sp, #327	@ 0x147
 8033fd8:	f000 bc1a 	b.w	8034810 <_vfprintf_r+0x1438>
 8033fdc:	2300      	movs	r3, #0
 8033fde:	9304      	str	r3, [sp, #16]
 8033fe0:	9b08      	ldr	r3, [sp, #32]
 8033fe2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8033fe6:	ad52      	add	r5, sp, #328	@ 0x148
 8033fe8:	9310      	str	r3, [sp, #64]	@ 0x40
 8033fea:	220a      	movs	r2, #10
 8033fec:	2300      	movs	r3, #0
 8033fee:	4630      	mov	r0, r6
 8033ff0:	4639      	mov	r1, r7
 8033ff2:	f7dc feb1 	bl	8010d58 <__aeabi_uldivmod>
 8033ff6:	9b04      	ldr	r3, [sp, #16]
 8033ff8:	9011      	str	r0, [sp, #68]	@ 0x44
 8033ffa:	3301      	adds	r3, #1
 8033ffc:	9304      	str	r3, [sp, #16]
 8033ffe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8034000:	3230      	adds	r2, #48	@ 0x30
 8034002:	468a      	mov	sl, r1
 8034004:	f105 38ff 	add.w	r8, r5, #4294967295	@ 0xffffffff
 8034008:	f805 2c01 	strb.w	r2, [r5, #-1]
 803400c:	b1d3      	cbz	r3, 8034044 <_vfprintf_r+0xc6c>
 803400e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8034010:	9a04      	ldr	r2, [sp, #16]
 8034012:	781b      	ldrb	r3, [r3, #0]
 8034014:	429a      	cmp	r2, r3
 8034016:	d115      	bne.n	8034044 <_vfprintf_r+0xc6c>
 8034018:	2aff      	cmp	r2, #255	@ 0xff
 803401a:	d013      	beq.n	8034044 <_vfprintf_r+0xc6c>
 803401c:	2e0a      	cmp	r6, #10
 803401e:	f177 0300 	sbcs.w	r3, r7, #0
 8034022:	d30f      	bcc.n	8034044 <_vfprintf_r+0xc6c>
 8034024:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8034026:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8034028:	eba8 0803 	sub.w	r8, r8, r3
 803402c:	461a      	mov	r2, r3
 803402e:	4640      	mov	r0, r8
 8034030:	f001 ff25 	bl	8035e7e <strncpy>
 8034034:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8034036:	785b      	ldrb	r3, [r3, #1]
 8034038:	b11b      	cbz	r3, 8034042 <_vfprintf_r+0xc6a>
 803403a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803403c:	3301      	adds	r3, #1
 803403e:	9309      	str	r3, [sp, #36]	@ 0x24
 8034040:	2300      	movs	r3, #0
 8034042:	9304      	str	r3, [sp, #16]
 8034044:	2e0a      	cmp	r6, #10
 8034046:	f177 0700 	sbcs.w	r7, r7, #0
 803404a:	f0c0 83e1 	bcc.w	8034810 <_vfprintf_r+0x1438>
 803404e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8034050:	4657      	mov	r7, sl
 8034052:	4645      	mov	r5, r8
 8034054:	e7c9      	b.n	8033fea <_vfprintf_r+0xc12>
 8034056:	f006 030f 	and.w	r3, r6, #15
 803405a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 803405c:	0936      	lsrs	r6, r6, #4
 803405e:	5cd3      	ldrb	r3, [r2, r3]
 8034060:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8034064:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 8034068:	093f      	lsrs	r7, r7, #4
 803406a:	ea56 0307 	orrs.w	r3, r6, r7
 803406e:	d1f2      	bne.n	8034056 <_vfprintf_r+0xc7e>
 8034070:	e3ce      	b.n	8034810 <_vfprintf_r+0x1438>
 8034072:	b91b      	cbnz	r3, 803407c <_vfprintf_r+0xca4>
 8034074:	07ed      	lsls	r5, r5, #31
 8034076:	d501      	bpl.n	803407c <_vfprintf_r+0xca4>
 8034078:	2630      	movs	r6, #48	@ 0x30
 803407a:	e7a9      	b.n	8033fd0 <_vfprintf_r+0xbf8>
 803407c:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 8034080:	e3c6      	b.n	8034810 <_vfprintf_r+0x1438>
 8034082:	9b06      	ldr	r3, [sp, #24]
 8034084:	2b00      	cmp	r3, #0
 8034086:	f000 8390 	beq.w	80347aa <_vfprintf_r+0x13d2>
 803408a:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 803408e:	2300      	movs	r3, #0
 8034090:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8034094:	9607      	str	r6, [sp, #28]
 8034096:	f7ff bb5c 	b.w	8033752 <_vfprintf_r+0x37a>
 803409a:	2010      	movs	r0, #16
 803409c:	4403      	add	r3, r0
 803409e:	2a07      	cmp	r2, #7
 80340a0:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80340a4:	6060      	str	r0, [r4, #4]
 80340a6:	dd08      	ble.n	80340ba <_vfprintf_r+0xce2>
 80340a8:	9803      	ldr	r0, [sp, #12]
 80340aa:	aa26      	add	r2, sp, #152	@ 0x98
 80340ac:	4659      	mov	r1, fp
 80340ae:	f000 fbff 	bl	80348b0 <__sprint_r>
 80340b2:	2800      	cmp	r0, #0
 80340b4:	f040 8357 	bne.w	8034766 <_vfprintf_r+0x138e>
 80340b8:	a929      	add	r1, sp, #164	@ 0xa4
 80340ba:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80340bc:	3b10      	subs	r3, #16
 80340be:	9313      	str	r3, [sp, #76]	@ 0x4c
 80340c0:	460c      	mov	r4, r1
 80340c2:	e547      	b.n	8033b54 <_vfprintf_r+0x77c>
 80340c4:	460c      	mov	r4, r1
 80340c6:	e562      	b.n	8033b8e <_vfprintf_r+0x7b6>
 80340c8:	9803      	ldr	r0, [sp, #12]
 80340ca:	aa26      	add	r2, sp, #152	@ 0x98
 80340cc:	4659      	mov	r1, fp
 80340ce:	f000 fbef 	bl	80348b0 <__sprint_r>
 80340d2:	2800      	cmp	r0, #0
 80340d4:	f040 8347 	bne.w	8034766 <_vfprintf_r+0x138e>
 80340d8:	ac29      	add	r4, sp, #164	@ 0xa4
 80340da:	e56a      	b.n	8033bb2 <_vfprintf_r+0x7da>
 80340dc:	9803      	ldr	r0, [sp, #12]
 80340de:	aa26      	add	r2, sp, #152	@ 0x98
 80340e0:	4659      	mov	r1, fp
 80340e2:	f000 fbe5 	bl	80348b0 <__sprint_r>
 80340e6:	2800      	cmp	r0, #0
 80340e8:	f040 833d 	bne.w	8034766 <_vfprintf_r+0x138e>
 80340ec:	ac29      	add	r4, sp, #164	@ 0xa4
 80340ee:	e570      	b.n	8033bd2 <_vfprintf_r+0x7fa>
 80340f0:	2010      	movs	r0, #16
 80340f2:	4403      	add	r3, r0
 80340f4:	2a07      	cmp	r2, #7
 80340f6:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80340fa:	6060      	str	r0, [r4, #4]
 80340fc:	dd08      	ble.n	8034110 <_vfprintf_r+0xd38>
 80340fe:	9803      	ldr	r0, [sp, #12]
 8034100:	aa26      	add	r2, sp, #152	@ 0x98
 8034102:	4659      	mov	r1, fp
 8034104:	f000 fbd4 	bl	80348b0 <__sprint_r>
 8034108:	2800      	cmp	r0, #0
 803410a:	f040 832c 	bne.w	8034766 <_vfprintf_r+0x138e>
 803410e:	a929      	add	r1, sp, #164	@ 0xa4
 8034110:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8034112:	3b10      	subs	r3, #16
 8034114:	9313      	str	r3, [sp, #76]	@ 0x4c
 8034116:	460c      	mov	r4, r1
 8034118:	e564      	b.n	8033be4 <_vfprintf_r+0x80c>
 803411a:	460c      	mov	r4, r1
 803411c:	e57f      	b.n	8033c1e <_vfprintf_r+0x846>
 803411e:	2010      	movs	r0, #16
 8034120:	4403      	add	r3, r0
 8034122:	2a07      	cmp	r2, #7
 8034124:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8034128:	6060      	str	r0, [r4, #4]
 803412a:	dd08      	ble.n	803413e <_vfprintf_r+0xd66>
 803412c:	9803      	ldr	r0, [sp, #12]
 803412e:	aa26      	add	r2, sp, #152	@ 0x98
 8034130:	4659      	mov	r1, fp
 8034132:	f000 fbbd 	bl	80348b0 <__sprint_r>
 8034136:	2800      	cmp	r0, #0
 8034138:	f040 8315 	bne.w	8034766 <_vfprintf_r+0x138e>
 803413c:	a929      	add	r1, sp, #164	@ 0xa4
 803413e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8034140:	3b10      	subs	r3, #16
 8034142:	9310      	str	r3, [sp, #64]	@ 0x40
 8034144:	460c      	mov	r4, r1
 8034146:	e570      	b.n	8033c2a <_vfprintf_r+0x852>
 8034148:	460c      	mov	r4, r1
 803414a:	e58b      	b.n	8033c64 <_vfprintf_r+0x88c>
 803414c:	080447ac 	.word	0x080447ac
 8034150:	080447bd 	.word	0x080447bd
 8034154:	9b06      	ldr	r3, [sp, #24]
 8034156:	2b65      	cmp	r3, #101	@ 0x65
 8034158:	f340 8245 	ble.w	80345e6 <_vfprintf_r+0x120e>
 803415c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8034160:	2200      	movs	r2, #0
 8034162:	2300      	movs	r3, #0
 8034164:	f7dc fcc8 	bl	8010af8 <__aeabi_dcmpeq>
 8034168:	2800      	cmp	r0, #0
 803416a:	d06a      	beq.n	8034242 <_vfprintf_r+0xe6a>
 803416c:	4b73      	ldr	r3, [pc, #460]	@ (803433c <_vfprintf_r+0xf64>)
 803416e:	6023      	str	r3, [r4, #0]
 8034170:	2301      	movs	r3, #1
 8034172:	6063      	str	r3, [r4, #4]
 8034174:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8034176:	3301      	adds	r3, #1
 8034178:	9328      	str	r3, [sp, #160]	@ 0xa0
 803417a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803417c:	3301      	adds	r3, #1
 803417e:	2b07      	cmp	r3, #7
 8034180:	9327      	str	r3, [sp, #156]	@ 0x9c
 8034182:	dc37      	bgt.n	80341f4 <_vfprintf_r+0xe1c>
 8034184:	3408      	adds	r4, #8
 8034186:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8034188:	9a04      	ldr	r2, [sp, #16]
 803418a:	4293      	cmp	r3, r2
 803418c:	db02      	blt.n	8034194 <_vfprintf_r+0xdbc>
 803418e:	07e9      	lsls	r1, r5, #31
 8034190:	f57f ad78 	bpl.w	8033c84 <_vfprintf_r+0x8ac>
 8034194:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8034196:	6023      	str	r3, [r4, #0]
 8034198:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803419a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 803419c:	6063      	str	r3, [r4, #4]
 803419e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80341a0:	4413      	add	r3, r2
 80341a2:	9328      	str	r3, [sp, #160]	@ 0xa0
 80341a4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80341a6:	3301      	adds	r3, #1
 80341a8:	2b07      	cmp	r3, #7
 80341aa:	9327      	str	r3, [sp, #156]	@ 0x9c
 80341ac:	dc2c      	bgt.n	8034208 <_vfprintf_r+0xe30>
 80341ae:	3408      	adds	r4, #8
 80341b0:	9b04      	ldr	r3, [sp, #16]
 80341b2:	1e5e      	subs	r6, r3, #1
 80341b4:	2e00      	cmp	r6, #0
 80341b6:	f77f ad65 	ble.w	8033c84 <_vfprintf_r+0x8ac>
 80341ba:	4f61      	ldr	r7, [pc, #388]	@ (8034340 <_vfprintf_r+0xf68>)
 80341bc:	f04f 0810 	mov.w	r8, #16
 80341c0:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80341c4:	2e10      	cmp	r6, #16
 80341c6:	f103 0301 	add.w	r3, r3, #1
 80341ca:	f104 0108 	add.w	r1, r4, #8
 80341ce:	6027      	str	r7, [r4, #0]
 80341d0:	dc24      	bgt.n	803421c <_vfprintf_r+0xe44>
 80341d2:	6066      	str	r6, [r4, #4]
 80341d4:	2b07      	cmp	r3, #7
 80341d6:	4416      	add	r6, r2
 80341d8:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 80341dc:	f340 82a2 	ble.w	8034724 <_vfprintf_r+0x134c>
 80341e0:	9803      	ldr	r0, [sp, #12]
 80341e2:	aa26      	add	r2, sp, #152	@ 0x98
 80341e4:	4659      	mov	r1, fp
 80341e6:	f000 fb63 	bl	80348b0 <__sprint_r>
 80341ea:	2800      	cmp	r0, #0
 80341ec:	f040 82bb 	bne.w	8034766 <_vfprintf_r+0x138e>
 80341f0:	ac29      	add	r4, sp, #164	@ 0xa4
 80341f2:	e547      	b.n	8033c84 <_vfprintf_r+0x8ac>
 80341f4:	9803      	ldr	r0, [sp, #12]
 80341f6:	aa26      	add	r2, sp, #152	@ 0x98
 80341f8:	4659      	mov	r1, fp
 80341fa:	f000 fb59 	bl	80348b0 <__sprint_r>
 80341fe:	2800      	cmp	r0, #0
 8034200:	f040 82b1 	bne.w	8034766 <_vfprintf_r+0x138e>
 8034204:	ac29      	add	r4, sp, #164	@ 0xa4
 8034206:	e7be      	b.n	8034186 <_vfprintf_r+0xdae>
 8034208:	9803      	ldr	r0, [sp, #12]
 803420a:	aa26      	add	r2, sp, #152	@ 0x98
 803420c:	4659      	mov	r1, fp
 803420e:	f000 fb4f 	bl	80348b0 <__sprint_r>
 8034212:	2800      	cmp	r0, #0
 8034214:	f040 82a7 	bne.w	8034766 <_vfprintf_r+0x138e>
 8034218:	ac29      	add	r4, sp, #164	@ 0xa4
 803421a:	e7c9      	b.n	80341b0 <_vfprintf_r+0xdd8>
 803421c:	3210      	adds	r2, #16
 803421e:	2b07      	cmp	r3, #7
 8034220:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8034224:	f8c4 8004 	str.w	r8, [r4, #4]
 8034228:	dd08      	ble.n	803423c <_vfprintf_r+0xe64>
 803422a:	9803      	ldr	r0, [sp, #12]
 803422c:	aa26      	add	r2, sp, #152	@ 0x98
 803422e:	4659      	mov	r1, fp
 8034230:	f000 fb3e 	bl	80348b0 <__sprint_r>
 8034234:	2800      	cmp	r0, #0
 8034236:	f040 8296 	bne.w	8034766 <_vfprintf_r+0x138e>
 803423a:	a929      	add	r1, sp, #164	@ 0xa4
 803423c:	3e10      	subs	r6, #16
 803423e:	460c      	mov	r4, r1
 8034240:	e7be      	b.n	80341c0 <_vfprintf_r+0xde8>
 8034242:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8034244:	2b00      	cmp	r3, #0
 8034246:	dc7d      	bgt.n	8034344 <_vfprintf_r+0xf6c>
 8034248:	4b3c      	ldr	r3, [pc, #240]	@ (803433c <_vfprintf_r+0xf64>)
 803424a:	6023      	str	r3, [r4, #0]
 803424c:	2301      	movs	r3, #1
 803424e:	6063      	str	r3, [r4, #4]
 8034250:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8034252:	3301      	adds	r3, #1
 8034254:	9328      	str	r3, [sp, #160]	@ 0xa0
 8034256:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8034258:	3301      	adds	r3, #1
 803425a:	2b07      	cmp	r3, #7
 803425c:	9327      	str	r3, [sp, #156]	@ 0x9c
 803425e:	dc46      	bgt.n	80342ee <_vfprintf_r+0xf16>
 8034260:	3408      	adds	r4, #8
 8034262:	9904      	ldr	r1, [sp, #16]
 8034264:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8034266:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8034268:	430b      	orrs	r3, r1
 803426a:	f005 0101 	and.w	r1, r5, #1
 803426e:	430b      	orrs	r3, r1
 8034270:	f43f ad08 	beq.w	8033c84 <_vfprintf_r+0x8ac>
 8034274:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8034276:	6023      	str	r3, [r4, #0]
 8034278:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803427a:	6063      	str	r3, [r4, #4]
 803427c:	441a      	add	r2, r3
 803427e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8034280:	9228      	str	r2, [sp, #160]	@ 0xa0
 8034282:	3301      	adds	r3, #1
 8034284:	2b07      	cmp	r3, #7
 8034286:	9327      	str	r3, [sp, #156]	@ 0x9c
 8034288:	dc3b      	bgt.n	8034302 <_vfprintf_r+0xf2a>
 803428a:	f104 0308 	add.w	r3, r4, #8
 803428e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8034290:	2e00      	cmp	r6, #0
 8034292:	da1b      	bge.n	80342cc <_vfprintf_r+0xef4>
 8034294:	4f2a      	ldr	r7, [pc, #168]	@ (8034340 <_vfprintf_r+0xf68>)
 8034296:	4276      	negs	r6, r6
 8034298:	461a      	mov	r2, r3
 803429a:	2410      	movs	r4, #16
 803429c:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 80342a0:	2e10      	cmp	r6, #16
 80342a2:	f101 0101 	add.w	r1, r1, #1
 80342a6:	f103 0308 	add.w	r3, r3, #8
 80342aa:	6017      	str	r7, [r2, #0]
 80342ac:	dc33      	bgt.n	8034316 <_vfprintf_r+0xf3e>
 80342ae:	6056      	str	r6, [r2, #4]
 80342b0:	2907      	cmp	r1, #7
 80342b2:	4406      	add	r6, r0
 80342b4:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 80342b8:	dd08      	ble.n	80342cc <_vfprintf_r+0xef4>
 80342ba:	9803      	ldr	r0, [sp, #12]
 80342bc:	aa26      	add	r2, sp, #152	@ 0x98
 80342be:	4659      	mov	r1, fp
 80342c0:	f000 faf6 	bl	80348b0 <__sprint_r>
 80342c4:	2800      	cmp	r0, #0
 80342c6:	f040 824e 	bne.w	8034766 <_vfprintf_r+0x138e>
 80342ca:	ab29      	add	r3, sp, #164	@ 0xa4
 80342cc:	9a04      	ldr	r2, [sp, #16]
 80342ce:	9904      	ldr	r1, [sp, #16]
 80342d0:	605a      	str	r2, [r3, #4]
 80342d2:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 80342d4:	f8c3 8000 	str.w	r8, [r3]
 80342d8:	440a      	add	r2, r1
 80342da:	9228      	str	r2, [sp, #160]	@ 0xa0
 80342dc:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80342de:	3201      	adds	r2, #1
 80342e0:	2a07      	cmp	r2, #7
 80342e2:	9227      	str	r2, [sp, #156]	@ 0x9c
 80342e4:	f73f af7c 	bgt.w	80341e0 <_vfprintf_r+0xe08>
 80342e8:	f103 0408 	add.w	r4, r3, #8
 80342ec:	e4ca      	b.n	8033c84 <_vfprintf_r+0x8ac>
 80342ee:	9803      	ldr	r0, [sp, #12]
 80342f0:	aa26      	add	r2, sp, #152	@ 0x98
 80342f2:	4659      	mov	r1, fp
 80342f4:	f000 fadc 	bl	80348b0 <__sprint_r>
 80342f8:	2800      	cmp	r0, #0
 80342fa:	f040 8234 	bne.w	8034766 <_vfprintf_r+0x138e>
 80342fe:	ac29      	add	r4, sp, #164	@ 0xa4
 8034300:	e7af      	b.n	8034262 <_vfprintf_r+0xe8a>
 8034302:	9803      	ldr	r0, [sp, #12]
 8034304:	aa26      	add	r2, sp, #152	@ 0x98
 8034306:	4659      	mov	r1, fp
 8034308:	f000 fad2 	bl	80348b0 <__sprint_r>
 803430c:	2800      	cmp	r0, #0
 803430e:	f040 822a 	bne.w	8034766 <_vfprintf_r+0x138e>
 8034312:	ab29      	add	r3, sp, #164	@ 0xa4
 8034314:	e7bb      	b.n	803428e <_vfprintf_r+0xeb6>
 8034316:	3010      	adds	r0, #16
 8034318:	2907      	cmp	r1, #7
 803431a:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 803431e:	6054      	str	r4, [r2, #4]
 8034320:	dd08      	ble.n	8034334 <_vfprintf_r+0xf5c>
 8034322:	9803      	ldr	r0, [sp, #12]
 8034324:	aa26      	add	r2, sp, #152	@ 0x98
 8034326:	4659      	mov	r1, fp
 8034328:	f000 fac2 	bl	80348b0 <__sprint_r>
 803432c:	2800      	cmp	r0, #0
 803432e:	f040 821a 	bne.w	8034766 <_vfprintf_r+0x138e>
 8034332:	ab29      	add	r3, sp, #164	@ 0xa4
 8034334:	3e10      	subs	r6, #16
 8034336:	461a      	mov	r2, r3
 8034338:	e7b0      	b.n	803429c <_vfprintf_r+0xec4>
 803433a:	bf00      	nop
 803433c:	080447ce 	.word	0x080447ce
 8034340:	080447d0 	.word	0x080447d0
 8034344:	9b04      	ldr	r3, [sp, #16]
 8034346:	4443      	add	r3, r8
 8034348:	9313      	str	r3, [sp, #76]	@ 0x4c
 803434a:	9b04      	ldr	r3, [sp, #16]
 803434c:	42b3      	cmp	r3, r6
 803434e:	bfa8      	it	ge
 8034350:	4633      	movge	r3, r6
 8034352:	2b00      	cmp	r3, #0
 8034354:	4699      	mov	r9, r3
 8034356:	dd0b      	ble.n	8034370 <_vfprintf_r+0xf98>
 8034358:	e9c4 8300 	strd	r8, r3, [r4]
 803435c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803435e:	444b      	add	r3, r9
 8034360:	9328      	str	r3, [sp, #160]	@ 0xa0
 8034362:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8034364:	3301      	adds	r3, #1
 8034366:	2b07      	cmp	r3, #7
 8034368:	9327      	str	r3, [sp, #156]	@ 0x9c
 803436a:	f300 8089 	bgt.w	8034480 <_vfprintf_r+0x10a8>
 803436e:	3408      	adds	r4, #8
 8034370:	f1b9 0f00 	cmp.w	r9, #0
 8034374:	bfac      	ite	ge
 8034376:	eba6 0309 	subge.w	r3, r6, r9
 803437a:	4633      	movlt	r3, r6
 803437c:	2b00      	cmp	r3, #0
 803437e:	9306      	str	r3, [sp, #24]
 8034380:	dd1c      	ble.n	80343bc <_vfprintf_r+0xfe4>
 8034382:	f8df 9364 	ldr.w	r9, [pc, #868]	@ 80346e8 <_vfprintf_r+0x1310>
 8034386:	9806      	ldr	r0, [sp, #24]
 8034388:	f8c4 9000 	str.w	r9, [r4]
 803438c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8034390:	2810      	cmp	r0, #16
 8034392:	f102 0201 	add.w	r2, r2, #1
 8034396:	f104 0108 	add.w	r1, r4, #8
 803439a:	dc7b      	bgt.n	8034494 <_vfprintf_r+0x10bc>
 803439c:	4403      	add	r3, r0
 803439e:	2a07      	cmp	r2, #7
 80343a0:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80343a4:	6060      	str	r0, [r4, #4]
 80343a6:	f340 808a 	ble.w	80344be <_vfprintf_r+0x10e6>
 80343aa:	9803      	ldr	r0, [sp, #12]
 80343ac:	aa26      	add	r2, sp, #152	@ 0x98
 80343ae:	4659      	mov	r1, fp
 80343b0:	f000 fa7e 	bl	80348b0 <__sprint_r>
 80343b4:	2800      	cmp	r0, #0
 80343b6:	f040 81d6 	bne.w	8034766 <_vfprintf_r+0x138e>
 80343ba:	ac29      	add	r4, sp, #164	@ 0xa4
 80343bc:	056a      	lsls	r2, r5, #21
 80343be:	44b0      	add	r8, r6
 80343c0:	d508      	bpl.n	80343d4 <_vfprintf_r+0xffc>
 80343c2:	9b08      	ldr	r3, [sp, #32]
 80343c4:	2b00      	cmp	r3, #0
 80343c6:	d17c      	bne.n	80344c2 <_vfprintf_r+0x10ea>
 80343c8:	2f00      	cmp	r7, #0
 80343ca:	d17c      	bne.n	80344c6 <_vfprintf_r+0x10ee>
 80343cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80343ce:	4598      	cmp	r8, r3
 80343d0:	bf28      	it	cs
 80343d2:	4698      	movcs	r8, r3
 80343d4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80343d6:	9a04      	ldr	r2, [sp, #16]
 80343d8:	4293      	cmp	r3, r2
 80343da:	db01      	blt.n	80343e0 <_vfprintf_r+0x1008>
 80343dc:	07eb      	lsls	r3, r5, #31
 80343de:	d50e      	bpl.n	80343fe <_vfprintf_r+0x1026>
 80343e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80343e2:	6023      	str	r3, [r4, #0]
 80343e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80343e6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80343e8:	6063      	str	r3, [r4, #4]
 80343ea:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80343ec:	4413      	add	r3, r2
 80343ee:	9328      	str	r3, [sp, #160]	@ 0xa0
 80343f0:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80343f2:	3301      	adds	r3, #1
 80343f4:	2b07      	cmp	r3, #7
 80343f6:	9327      	str	r3, [sp, #156]	@ 0x9c
 80343f8:	f300 80e1 	bgt.w	80345be <_vfprintf_r+0x11e6>
 80343fc:	3408      	adds	r4, #8
 80343fe:	9b04      	ldr	r3, [sp, #16]
 8034400:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 8034402:	1bdf      	subs	r7, r3, r7
 8034404:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8034406:	eba3 0308 	sub.w	r3, r3, r8
 803440a:	429f      	cmp	r7, r3
 803440c:	bfa8      	it	ge
 803440e:	461f      	movge	r7, r3
 8034410:	2f00      	cmp	r7, #0
 8034412:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8034414:	dd0a      	ble.n	803442c <_vfprintf_r+0x1054>
 8034416:	443b      	add	r3, r7
 8034418:	9328      	str	r3, [sp, #160]	@ 0xa0
 803441a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803441c:	3301      	adds	r3, #1
 803441e:	2b07      	cmp	r3, #7
 8034420:	e9c4 8700 	strd	r8, r7, [r4]
 8034424:	9327      	str	r3, [sp, #156]	@ 0x9c
 8034426:	f300 80d4 	bgt.w	80345d2 <_vfprintf_r+0x11fa>
 803442a:	3408      	adds	r4, #8
 803442c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 803442e:	9b04      	ldr	r3, [sp, #16]
 8034430:	2f00      	cmp	r7, #0
 8034432:	eba3 0606 	sub.w	r6, r3, r6
 8034436:	bfa8      	it	ge
 8034438:	1bf6      	subge	r6, r6, r7
 803443a:	2e00      	cmp	r6, #0
 803443c:	f77f ac22 	ble.w	8033c84 <_vfprintf_r+0x8ac>
 8034440:	4fa9      	ldr	r7, [pc, #676]	@ (80346e8 <_vfprintf_r+0x1310>)
 8034442:	f04f 0810 	mov.w	r8, #16
 8034446:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 803444a:	2e10      	cmp	r6, #16
 803444c:	f103 0301 	add.w	r3, r3, #1
 8034450:	f104 0108 	add.w	r1, r4, #8
 8034454:	6027      	str	r7, [r4, #0]
 8034456:	f77f aebc 	ble.w	80341d2 <_vfprintf_r+0xdfa>
 803445a:	3210      	adds	r2, #16
 803445c:	2b07      	cmp	r3, #7
 803445e:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8034462:	f8c4 8004 	str.w	r8, [r4, #4]
 8034466:	dd08      	ble.n	803447a <_vfprintf_r+0x10a2>
 8034468:	9803      	ldr	r0, [sp, #12]
 803446a:	aa26      	add	r2, sp, #152	@ 0x98
 803446c:	4659      	mov	r1, fp
 803446e:	f000 fa1f 	bl	80348b0 <__sprint_r>
 8034472:	2800      	cmp	r0, #0
 8034474:	f040 8177 	bne.w	8034766 <_vfprintf_r+0x138e>
 8034478:	a929      	add	r1, sp, #164	@ 0xa4
 803447a:	3e10      	subs	r6, #16
 803447c:	460c      	mov	r4, r1
 803447e:	e7e2      	b.n	8034446 <_vfprintf_r+0x106e>
 8034480:	9803      	ldr	r0, [sp, #12]
 8034482:	aa26      	add	r2, sp, #152	@ 0x98
 8034484:	4659      	mov	r1, fp
 8034486:	f000 fa13 	bl	80348b0 <__sprint_r>
 803448a:	2800      	cmp	r0, #0
 803448c:	f040 816b 	bne.w	8034766 <_vfprintf_r+0x138e>
 8034490:	ac29      	add	r4, sp, #164	@ 0xa4
 8034492:	e76d      	b.n	8034370 <_vfprintf_r+0xf98>
 8034494:	2010      	movs	r0, #16
 8034496:	4403      	add	r3, r0
 8034498:	2a07      	cmp	r2, #7
 803449a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 803449e:	6060      	str	r0, [r4, #4]
 80344a0:	dd08      	ble.n	80344b4 <_vfprintf_r+0x10dc>
 80344a2:	9803      	ldr	r0, [sp, #12]
 80344a4:	aa26      	add	r2, sp, #152	@ 0x98
 80344a6:	4659      	mov	r1, fp
 80344a8:	f000 fa02 	bl	80348b0 <__sprint_r>
 80344ac:	2800      	cmp	r0, #0
 80344ae:	f040 815a 	bne.w	8034766 <_vfprintf_r+0x138e>
 80344b2:	a929      	add	r1, sp, #164	@ 0xa4
 80344b4:	9b06      	ldr	r3, [sp, #24]
 80344b6:	3b10      	subs	r3, #16
 80344b8:	9306      	str	r3, [sp, #24]
 80344ba:	460c      	mov	r4, r1
 80344bc:	e763      	b.n	8034386 <_vfprintf_r+0xfae>
 80344be:	460c      	mov	r4, r1
 80344c0:	e77c      	b.n	80343bc <_vfprintf_r+0xfe4>
 80344c2:	2f00      	cmp	r7, #0
 80344c4:	d04b      	beq.n	803455e <_vfprintf_r+0x1186>
 80344c6:	3f01      	subs	r7, #1
 80344c8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80344ca:	6023      	str	r3, [r4, #0]
 80344cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80344ce:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80344d0:	6063      	str	r3, [r4, #4]
 80344d2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80344d4:	4413      	add	r3, r2
 80344d6:	9328      	str	r3, [sp, #160]	@ 0xa0
 80344d8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80344da:	3301      	adds	r3, #1
 80344dc:	2b07      	cmp	r3, #7
 80344de:	9327      	str	r3, [sp, #156]	@ 0x9c
 80344e0:	dc44      	bgt.n	803456c <_vfprintf_r+0x1194>
 80344e2:	3408      	adds	r4, #8
 80344e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80344e6:	f893 9000 	ldrb.w	r9, [r3]
 80344ea:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80344ec:	eba3 0308 	sub.w	r3, r3, r8
 80344f0:	4599      	cmp	r9, r3
 80344f2:	bfa8      	it	ge
 80344f4:	4699      	movge	r9, r3
 80344f6:	f1b9 0f00 	cmp.w	r9, #0
 80344fa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80344fc:	dd09      	ble.n	8034512 <_vfprintf_r+0x113a>
 80344fe:	444b      	add	r3, r9
 8034500:	9328      	str	r3, [sp, #160]	@ 0xa0
 8034502:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8034504:	3301      	adds	r3, #1
 8034506:	2b07      	cmp	r3, #7
 8034508:	e9c4 8900 	strd	r8, r9, [r4]
 803450c:	9327      	str	r3, [sp, #156]	@ 0x9c
 803450e:	dc37      	bgt.n	8034580 <_vfprintf_r+0x11a8>
 8034510:	3408      	adds	r4, #8
 8034512:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8034514:	781e      	ldrb	r6, [r3, #0]
 8034516:	f1b9 0f00 	cmp.w	r9, #0
 803451a:	bfa8      	it	ge
 803451c:	eba6 0609 	subge.w	r6, r6, r9
 8034520:	2e00      	cmp	r6, #0
 8034522:	dd18      	ble.n	8034556 <_vfprintf_r+0x117e>
 8034524:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8034528:	486f      	ldr	r0, [pc, #444]	@ (80346e8 <_vfprintf_r+0x1310>)
 803452a:	6020      	str	r0, [r4, #0]
 803452c:	2e10      	cmp	r6, #16
 803452e:	f103 0301 	add.w	r3, r3, #1
 8034532:	f104 0108 	add.w	r1, r4, #8
 8034536:	dc2d      	bgt.n	8034594 <_vfprintf_r+0x11bc>
 8034538:	6066      	str	r6, [r4, #4]
 803453a:	2b07      	cmp	r3, #7
 803453c:	4416      	add	r6, r2
 803453e:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8034542:	dd3a      	ble.n	80345ba <_vfprintf_r+0x11e2>
 8034544:	9803      	ldr	r0, [sp, #12]
 8034546:	aa26      	add	r2, sp, #152	@ 0x98
 8034548:	4659      	mov	r1, fp
 803454a:	f000 f9b1 	bl	80348b0 <__sprint_r>
 803454e:	2800      	cmp	r0, #0
 8034550:	f040 8109 	bne.w	8034766 <_vfprintf_r+0x138e>
 8034554:	ac29      	add	r4, sp, #164	@ 0xa4
 8034556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8034558:	781b      	ldrb	r3, [r3, #0]
 803455a:	4498      	add	r8, r3
 803455c:	e731      	b.n	80343c2 <_vfprintf_r+0xfea>
 803455e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8034560:	3b01      	subs	r3, #1
 8034562:	9309      	str	r3, [sp, #36]	@ 0x24
 8034564:	9b08      	ldr	r3, [sp, #32]
 8034566:	3b01      	subs	r3, #1
 8034568:	9308      	str	r3, [sp, #32]
 803456a:	e7ad      	b.n	80344c8 <_vfprintf_r+0x10f0>
 803456c:	9803      	ldr	r0, [sp, #12]
 803456e:	aa26      	add	r2, sp, #152	@ 0x98
 8034570:	4659      	mov	r1, fp
 8034572:	f000 f99d 	bl	80348b0 <__sprint_r>
 8034576:	2800      	cmp	r0, #0
 8034578:	f040 80f5 	bne.w	8034766 <_vfprintf_r+0x138e>
 803457c:	ac29      	add	r4, sp, #164	@ 0xa4
 803457e:	e7b1      	b.n	80344e4 <_vfprintf_r+0x110c>
 8034580:	9803      	ldr	r0, [sp, #12]
 8034582:	aa26      	add	r2, sp, #152	@ 0x98
 8034584:	4659      	mov	r1, fp
 8034586:	f000 f993 	bl	80348b0 <__sprint_r>
 803458a:	2800      	cmp	r0, #0
 803458c:	f040 80eb 	bne.w	8034766 <_vfprintf_r+0x138e>
 8034590:	ac29      	add	r4, sp, #164	@ 0xa4
 8034592:	e7be      	b.n	8034512 <_vfprintf_r+0x113a>
 8034594:	2010      	movs	r0, #16
 8034596:	4402      	add	r2, r0
 8034598:	2b07      	cmp	r3, #7
 803459a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 803459e:	6060      	str	r0, [r4, #4]
 80345a0:	dd08      	ble.n	80345b4 <_vfprintf_r+0x11dc>
 80345a2:	9803      	ldr	r0, [sp, #12]
 80345a4:	aa26      	add	r2, sp, #152	@ 0x98
 80345a6:	4659      	mov	r1, fp
 80345a8:	f000 f982 	bl	80348b0 <__sprint_r>
 80345ac:	2800      	cmp	r0, #0
 80345ae:	f040 80da 	bne.w	8034766 <_vfprintf_r+0x138e>
 80345b2:	a929      	add	r1, sp, #164	@ 0xa4
 80345b4:	3e10      	subs	r6, #16
 80345b6:	460c      	mov	r4, r1
 80345b8:	e7b4      	b.n	8034524 <_vfprintf_r+0x114c>
 80345ba:	460c      	mov	r4, r1
 80345bc:	e7cb      	b.n	8034556 <_vfprintf_r+0x117e>
 80345be:	9803      	ldr	r0, [sp, #12]
 80345c0:	aa26      	add	r2, sp, #152	@ 0x98
 80345c2:	4659      	mov	r1, fp
 80345c4:	f000 f974 	bl	80348b0 <__sprint_r>
 80345c8:	2800      	cmp	r0, #0
 80345ca:	f040 80cc 	bne.w	8034766 <_vfprintf_r+0x138e>
 80345ce:	ac29      	add	r4, sp, #164	@ 0xa4
 80345d0:	e715      	b.n	80343fe <_vfprintf_r+0x1026>
 80345d2:	9803      	ldr	r0, [sp, #12]
 80345d4:	aa26      	add	r2, sp, #152	@ 0x98
 80345d6:	4659      	mov	r1, fp
 80345d8:	f000 f96a 	bl	80348b0 <__sprint_r>
 80345dc:	2800      	cmp	r0, #0
 80345de:	f040 80c2 	bne.w	8034766 <_vfprintf_r+0x138e>
 80345e2:	ac29      	add	r4, sp, #164	@ 0xa4
 80345e4:	e722      	b.n	803442c <_vfprintf_r+0x1054>
 80345e6:	9904      	ldr	r1, [sp, #16]
 80345e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80345ea:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80345ec:	2901      	cmp	r1, #1
 80345ee:	f103 0301 	add.w	r3, r3, #1
 80345f2:	f102 0201 	add.w	r2, r2, #1
 80345f6:	f104 0608 	add.w	r6, r4, #8
 80345fa:	dc02      	bgt.n	8034602 <_vfprintf_r+0x122a>
 80345fc:	07ef      	lsls	r7, r5, #31
 80345fe:	f140 8086 	bpl.w	803470e <_vfprintf_r+0x1336>
 8034602:	2101      	movs	r1, #1
 8034604:	2a07      	cmp	r2, #7
 8034606:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 803460a:	f8c4 8000 	str.w	r8, [r4]
 803460e:	6061      	str	r1, [r4, #4]
 8034610:	dd08      	ble.n	8034624 <_vfprintf_r+0x124c>
 8034612:	9803      	ldr	r0, [sp, #12]
 8034614:	aa26      	add	r2, sp, #152	@ 0x98
 8034616:	4659      	mov	r1, fp
 8034618:	f000 f94a 	bl	80348b0 <__sprint_r>
 803461c:	2800      	cmp	r0, #0
 803461e:	f040 80a2 	bne.w	8034766 <_vfprintf_r+0x138e>
 8034622:	ae29      	add	r6, sp, #164	@ 0xa4
 8034624:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8034626:	6033      	str	r3, [r6, #0]
 8034628:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803462a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 803462c:	6073      	str	r3, [r6, #4]
 803462e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8034630:	4413      	add	r3, r2
 8034632:	9328      	str	r3, [sp, #160]	@ 0xa0
 8034634:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8034636:	3301      	adds	r3, #1
 8034638:	2b07      	cmp	r3, #7
 803463a:	9327      	str	r3, [sp, #156]	@ 0x9c
 803463c:	dc33      	bgt.n	80346a6 <_vfprintf_r+0x12ce>
 803463e:	3608      	adds	r6, #8
 8034640:	9b04      	ldr	r3, [sp, #16]
 8034642:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8034646:	1e5c      	subs	r4, r3, #1
 8034648:	2200      	movs	r2, #0
 803464a:	2300      	movs	r3, #0
 803464c:	e9dd 9727 	ldrd	r9, r7, [sp, #156]	@ 0x9c
 8034650:	f7dc fa52 	bl	8010af8 <__aeabi_dcmpeq>
 8034654:	2800      	cmp	r0, #0
 8034656:	d12f      	bne.n	80346b8 <_vfprintf_r+0x12e0>
 8034658:	f108 0201 	add.w	r2, r8, #1
 803465c:	e9c6 2400 	strd	r2, r4, [r6]
 8034660:	9a04      	ldr	r2, [sp, #16]
 8034662:	f109 0301 	add.w	r3, r9, #1
 8034666:	3f01      	subs	r7, #1
 8034668:	4417      	add	r7, r2
 803466a:	2b07      	cmp	r3, #7
 803466c:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 8034670:	dd56      	ble.n	8034720 <_vfprintf_r+0x1348>
 8034672:	9803      	ldr	r0, [sp, #12]
 8034674:	aa26      	add	r2, sp, #152	@ 0x98
 8034676:	4659      	mov	r1, fp
 8034678:	f000 f91a 	bl	80348b0 <__sprint_r>
 803467c:	2800      	cmp	r0, #0
 803467e:	d172      	bne.n	8034766 <_vfprintf_r+0x138e>
 8034680:	ae29      	add	r6, sp, #164	@ 0xa4
 8034682:	ab22      	add	r3, sp, #136	@ 0x88
 8034684:	6033      	str	r3, [r6, #0]
 8034686:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8034688:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 803468a:	6073      	str	r3, [r6, #4]
 803468c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803468e:	4413      	add	r3, r2
 8034690:	9328      	str	r3, [sp, #160]	@ 0xa0
 8034692:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8034694:	3301      	adds	r3, #1
 8034696:	2b07      	cmp	r3, #7
 8034698:	9327      	str	r3, [sp, #156]	@ 0x9c
 803469a:	f73f ada1 	bgt.w	80341e0 <_vfprintf_r+0xe08>
 803469e:	f106 0408 	add.w	r4, r6, #8
 80346a2:	f7ff baef 	b.w	8033c84 <_vfprintf_r+0x8ac>
 80346a6:	9803      	ldr	r0, [sp, #12]
 80346a8:	aa26      	add	r2, sp, #152	@ 0x98
 80346aa:	4659      	mov	r1, fp
 80346ac:	f000 f900 	bl	80348b0 <__sprint_r>
 80346b0:	2800      	cmp	r0, #0
 80346b2:	d158      	bne.n	8034766 <_vfprintf_r+0x138e>
 80346b4:	ae29      	add	r6, sp, #164	@ 0xa4
 80346b6:	e7c3      	b.n	8034640 <_vfprintf_r+0x1268>
 80346b8:	9b04      	ldr	r3, [sp, #16]
 80346ba:	2b01      	cmp	r3, #1
 80346bc:	dde1      	ble.n	8034682 <_vfprintf_r+0x12aa>
 80346be:	4f0a      	ldr	r7, [pc, #40]	@ (80346e8 <_vfprintf_r+0x1310>)
 80346c0:	f04f 0810 	mov.w	r8, #16
 80346c4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80346c8:	2c10      	cmp	r4, #16
 80346ca:	f103 0301 	add.w	r3, r3, #1
 80346ce:	f106 0108 	add.w	r1, r6, #8
 80346d2:	6037      	str	r7, [r6, #0]
 80346d4:	dc0a      	bgt.n	80346ec <_vfprintf_r+0x1314>
 80346d6:	6074      	str	r4, [r6, #4]
 80346d8:	2b07      	cmp	r3, #7
 80346da:	4414      	add	r4, r2
 80346dc:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 80346e0:	dcc7      	bgt.n	8034672 <_vfprintf_r+0x129a>
 80346e2:	460e      	mov	r6, r1
 80346e4:	e7cd      	b.n	8034682 <_vfprintf_r+0x12aa>
 80346e6:	bf00      	nop
 80346e8:	080447d0 	.word	0x080447d0
 80346ec:	3210      	adds	r2, #16
 80346ee:	2b07      	cmp	r3, #7
 80346f0:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 80346f4:	f8c6 8004 	str.w	r8, [r6, #4]
 80346f8:	dd06      	ble.n	8034708 <_vfprintf_r+0x1330>
 80346fa:	9803      	ldr	r0, [sp, #12]
 80346fc:	aa26      	add	r2, sp, #152	@ 0x98
 80346fe:	4659      	mov	r1, fp
 8034700:	f000 f8d6 	bl	80348b0 <__sprint_r>
 8034704:	bb78      	cbnz	r0, 8034766 <_vfprintf_r+0x138e>
 8034706:	a929      	add	r1, sp, #164	@ 0xa4
 8034708:	3c10      	subs	r4, #16
 803470a:	460e      	mov	r6, r1
 803470c:	e7da      	b.n	80346c4 <_vfprintf_r+0x12ec>
 803470e:	2101      	movs	r1, #1
 8034710:	2a07      	cmp	r2, #7
 8034712:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8034716:	f8c4 8000 	str.w	r8, [r4]
 803471a:	6061      	str	r1, [r4, #4]
 803471c:	ddb1      	ble.n	8034682 <_vfprintf_r+0x12aa>
 803471e:	e7a8      	b.n	8034672 <_vfprintf_r+0x129a>
 8034720:	3608      	adds	r6, #8
 8034722:	e7ae      	b.n	8034682 <_vfprintf_r+0x12aa>
 8034724:	460c      	mov	r4, r1
 8034726:	f7ff baad 	b.w	8033c84 <_vfprintf_r+0x8ac>
 803472a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803472c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 803472e:	1a9d      	subs	r5, r3, r2
 8034730:	2d00      	cmp	r5, #0
 8034732:	f77f aaaa 	ble.w	8033c8a <_vfprintf_r+0x8b2>
 8034736:	4e3d      	ldr	r6, [pc, #244]	@ (803482c <_vfprintf_r+0x1454>)
 8034738:	2710      	movs	r7, #16
 803473a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 803473e:	2d10      	cmp	r5, #16
 8034740:	f103 0301 	add.w	r3, r3, #1
 8034744:	6026      	str	r6, [r4, #0]
 8034746:	dc18      	bgt.n	803477a <_vfprintf_r+0x13a2>
 8034748:	6065      	str	r5, [r4, #4]
 803474a:	2b07      	cmp	r3, #7
 803474c:	4415      	add	r5, r2
 803474e:	e9cd 3527 	strd	r3, r5, [sp, #156]	@ 0x9c
 8034752:	f77f aa9a 	ble.w	8033c8a <_vfprintf_r+0x8b2>
 8034756:	9803      	ldr	r0, [sp, #12]
 8034758:	aa26      	add	r2, sp, #152	@ 0x98
 803475a:	4659      	mov	r1, fp
 803475c:	f000 f8a8 	bl	80348b0 <__sprint_r>
 8034760:	2800      	cmp	r0, #0
 8034762:	f43f aa92 	beq.w	8033c8a <_vfprintf_r+0x8b2>
 8034766:	f1ba 0f00 	cmp.w	sl, #0
 803476a:	f43f a892 	beq.w	8033892 <_vfprintf_r+0x4ba>
 803476e:	9803      	ldr	r0, [sp, #12]
 8034770:	4651      	mov	r1, sl
 8034772:	f003 fc7b 	bl	803806c <_free_r>
 8034776:	f7ff b88c 	b.w	8033892 <_vfprintf_r+0x4ba>
 803477a:	3210      	adds	r2, #16
 803477c:	2b07      	cmp	r3, #7
 803477e:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8034782:	6067      	str	r7, [r4, #4]
 8034784:	dc02      	bgt.n	803478c <_vfprintf_r+0x13b4>
 8034786:	3408      	adds	r4, #8
 8034788:	3d10      	subs	r5, #16
 803478a:	e7d6      	b.n	803473a <_vfprintf_r+0x1362>
 803478c:	9803      	ldr	r0, [sp, #12]
 803478e:	aa26      	add	r2, sp, #152	@ 0x98
 8034790:	4659      	mov	r1, fp
 8034792:	f000 f88d 	bl	80348b0 <__sprint_r>
 8034796:	2800      	cmp	r0, #0
 8034798:	d1e5      	bne.n	8034766 <_vfprintf_r+0x138e>
 803479a:	ac29      	add	r4, sp, #164	@ 0xa4
 803479c:	e7f4      	b.n	8034788 <_vfprintf_r+0x13b0>
 803479e:	9803      	ldr	r0, [sp, #12]
 80347a0:	4651      	mov	r1, sl
 80347a2:	f003 fc63 	bl	803806c <_free_r>
 80347a6:	f7ff ba88 	b.w	8033cba <_vfprintf_r+0x8e2>
 80347aa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80347ac:	b91b      	cbnz	r3, 80347b6 <_vfprintf_r+0x13de>
 80347ae:	2300      	movs	r3, #0
 80347b0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80347b2:	f7ff b86e 	b.w	8033892 <_vfprintf_r+0x4ba>
 80347b6:	9803      	ldr	r0, [sp, #12]
 80347b8:	aa26      	add	r2, sp, #152	@ 0x98
 80347ba:	4659      	mov	r1, fp
 80347bc:	f000 f878 	bl	80348b0 <__sprint_r>
 80347c0:	2800      	cmp	r0, #0
 80347c2:	d0f4      	beq.n	80347ae <_vfprintf_r+0x13d6>
 80347c4:	f7ff b865 	b.w	8033892 <_vfprintf_r+0x4ba>
 80347c8:	ea56 0207 	orrs.w	r2, r6, r7
 80347cc:	9508      	str	r5, [sp, #32]
 80347ce:	f43f ab75 	beq.w	8033ebc <_vfprintf_r+0xae4>
 80347d2:	2b01      	cmp	r3, #1
 80347d4:	f43f abf6 	beq.w	8033fc4 <_vfprintf_r+0xbec>
 80347d8:	2b02      	cmp	r3, #2
 80347da:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 80347de:	f43f ac3a 	beq.w	8034056 <_vfprintf_r+0xc7e>
 80347e2:	f006 0307 	and.w	r3, r6, #7
 80347e6:	08f6      	lsrs	r6, r6, #3
 80347e8:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 80347ec:	08ff      	lsrs	r7, r7, #3
 80347ee:	3330      	adds	r3, #48	@ 0x30
 80347f0:	ea56 0107 	orrs.w	r1, r6, r7
 80347f4:	4642      	mov	r2, r8
 80347f6:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80347fa:	d1f2      	bne.n	80347e2 <_vfprintf_r+0x140a>
 80347fc:	9908      	ldr	r1, [sp, #32]
 80347fe:	07ce      	lsls	r6, r1, #31
 8034800:	d506      	bpl.n	8034810 <_vfprintf_r+0x1438>
 8034802:	2b30      	cmp	r3, #48	@ 0x30
 8034804:	d004      	beq.n	8034810 <_vfprintf_r+0x1438>
 8034806:	2330      	movs	r3, #48	@ 0x30
 8034808:	f808 3c01 	strb.w	r3, [r8, #-1]
 803480c:	f1a2 0802 	sub.w	r8, r2, #2
 8034810:	ab52      	add	r3, sp, #328	@ 0x148
 8034812:	9d08      	ldr	r5, [sp, #32]
 8034814:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 8034818:	f04f 0a00 	mov.w	sl, #0
 803481c:	eba3 0908 	sub.w	r9, r3, r8
 8034820:	4657      	mov	r7, sl
 8034822:	f8cd a020 	str.w	sl, [sp, #32]
 8034826:	4656      	mov	r6, sl
 8034828:	f7ff b978 	b.w	8033b1c <_vfprintf_r+0x744>
 803482c:	080447e0 	.word	0x080447e0

08034830 <__sbprintf>:
 8034830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8034832:	461f      	mov	r7, r3
 8034834:	898b      	ldrh	r3, [r1, #12]
 8034836:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 803483a:	f023 0302 	bic.w	r3, r3, #2
 803483e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8034842:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8034844:	9319      	str	r3, [sp, #100]	@ 0x64
 8034846:	89cb      	ldrh	r3, [r1, #14]
 8034848:	f8ad 300e 	strh.w	r3, [sp, #14]
 803484c:	69cb      	ldr	r3, [r1, #28]
 803484e:	9307      	str	r3, [sp, #28]
 8034850:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8034852:	9309      	str	r3, [sp, #36]	@ 0x24
 8034854:	ab1a      	add	r3, sp, #104	@ 0x68
 8034856:	9300      	str	r3, [sp, #0]
 8034858:	9304      	str	r3, [sp, #16]
 803485a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 803485e:	4615      	mov	r5, r2
 8034860:	4606      	mov	r6, r0
 8034862:	9302      	str	r3, [sp, #8]
 8034864:	9305      	str	r3, [sp, #20]
 8034866:	a816      	add	r0, sp, #88	@ 0x58
 8034868:	2300      	movs	r3, #0
 803486a:	460c      	mov	r4, r1
 803486c:	9306      	str	r3, [sp, #24]
 803486e:	f002 fcf5 	bl	803725c <__retarget_lock_init_recursive>
 8034872:	462a      	mov	r2, r5
 8034874:	463b      	mov	r3, r7
 8034876:	4669      	mov	r1, sp
 8034878:	4630      	mov	r0, r6
 803487a:	f7fe fdad 	bl	80333d8 <_vfprintf_r>
 803487e:	1e05      	subs	r5, r0, #0
 8034880:	db07      	blt.n	8034892 <__sbprintf+0x62>
 8034882:	4669      	mov	r1, sp
 8034884:	4630      	mov	r0, r6
 8034886:	f000 fecb 	bl	8035620 <_fflush_r>
 803488a:	2800      	cmp	r0, #0
 803488c:	bf18      	it	ne
 803488e:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 8034892:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8034896:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8034898:	065b      	lsls	r3, r3, #25
 803489a:	bf42      	ittt	mi
 803489c:	89a3      	ldrhmi	r3, [r4, #12]
 803489e:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 80348a2:	81a3      	strhmi	r3, [r4, #12]
 80348a4:	f002 fcdb 	bl	803725e <__retarget_lock_close_recursive>
 80348a8:	4628      	mov	r0, r5
 80348aa:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 80348ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080348b0 <__sprint_r>:
 80348b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80348b4:	6893      	ldr	r3, [r2, #8]
 80348b6:	4680      	mov	r8, r0
 80348b8:	460e      	mov	r6, r1
 80348ba:	4614      	mov	r4, r2
 80348bc:	b343      	cbz	r3, 8034910 <__sprint_r+0x60>
 80348be:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 80348c0:	049d      	lsls	r5, r3, #18
 80348c2:	d522      	bpl.n	803490a <__sprint_r+0x5a>
 80348c4:	6815      	ldr	r5, [r2, #0]
 80348c6:	68a0      	ldr	r0, [r4, #8]
 80348c8:	3508      	adds	r5, #8
 80348ca:	b928      	cbnz	r0, 80348d8 <__sprint_r+0x28>
 80348cc:	2300      	movs	r3, #0
 80348ce:	60a3      	str	r3, [r4, #8]
 80348d0:	2300      	movs	r3, #0
 80348d2:	6063      	str	r3, [r4, #4]
 80348d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80348d8:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 80348dc:	f04f 0900 	mov.w	r9, #0
 80348e0:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 80348e4:	45ca      	cmp	sl, r9
 80348e6:	dc05      	bgt.n	80348f4 <__sprint_r+0x44>
 80348e8:	68a3      	ldr	r3, [r4, #8]
 80348ea:	f027 0703 	bic.w	r7, r7, #3
 80348ee:	1bdb      	subs	r3, r3, r7
 80348f0:	60a3      	str	r3, [r4, #8]
 80348f2:	e7e8      	b.n	80348c6 <__sprint_r+0x16>
 80348f4:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 80348f8:	4632      	mov	r2, r6
 80348fa:	4640      	mov	r0, r8
 80348fc:	f001 fa35 	bl	8035d6a <_fputwc_r>
 8034900:	1c43      	adds	r3, r0, #1
 8034902:	d0e3      	beq.n	80348cc <__sprint_r+0x1c>
 8034904:	f109 0901 	add.w	r9, r9, #1
 8034908:	e7ec      	b.n	80348e4 <__sprint_r+0x34>
 803490a:	f001 f81d 	bl	8035948 <__sfvwrite_r>
 803490e:	e7dd      	b.n	80348cc <__sprint_r+0x1c>
 8034910:	4618      	mov	r0, r3
 8034912:	e7dd      	b.n	80348d0 <__sprint_r+0x20>

08034914 <_vfiprintf_r>:
 8034914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8034918:	b0bb      	sub	sp, #236	@ 0xec
 803491a:	460f      	mov	r7, r1
 803491c:	4693      	mov	fp, r2
 803491e:	461c      	mov	r4, r3
 8034920:	461d      	mov	r5, r3
 8034922:	9000      	str	r0, [sp, #0]
 8034924:	b118      	cbz	r0, 803492e <_vfiprintf_r+0x1a>
 8034926:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8034928:	b90b      	cbnz	r3, 803492e <_vfiprintf_r+0x1a>
 803492a:	f000 ffbb 	bl	80358a4 <__sinit>
 803492e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8034930:	07db      	lsls	r3, r3, #31
 8034932:	d405      	bmi.n	8034940 <_vfiprintf_r+0x2c>
 8034934:	89bb      	ldrh	r3, [r7, #12]
 8034936:	059e      	lsls	r6, r3, #22
 8034938:	d402      	bmi.n	8034940 <_vfiprintf_r+0x2c>
 803493a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 803493c:	f002 fc91 	bl	8037262 <__retarget_lock_acquire_recursive>
 8034940:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8034944:	0498      	lsls	r0, r3, #18
 8034946:	d406      	bmi.n	8034956 <_vfiprintf_r+0x42>
 8034948:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 803494c:	81bb      	strh	r3, [r7, #12]
 803494e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8034950:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8034954:	667b      	str	r3, [r7, #100]	@ 0x64
 8034956:	89bb      	ldrh	r3, [r7, #12]
 8034958:	0719      	lsls	r1, r3, #28
 803495a:	d501      	bpl.n	8034960 <_vfiprintf_r+0x4c>
 803495c:	693b      	ldr	r3, [r7, #16]
 803495e:	b9ab      	cbnz	r3, 803498c <_vfiprintf_r+0x78>
 8034960:	9800      	ldr	r0, [sp, #0]
 8034962:	4639      	mov	r1, r7
 8034964:	f001 f95a 	bl	8035c1c <__swsetup_r>
 8034968:	b180      	cbz	r0, 803498c <_vfiprintf_r+0x78>
 803496a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 803496c:	07da      	lsls	r2, r3, #31
 803496e:	d506      	bpl.n	803497e <_vfiprintf_r+0x6a>
 8034970:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8034974:	9303      	str	r3, [sp, #12]
 8034976:	9803      	ldr	r0, [sp, #12]
 8034978:	b03b      	add	sp, #236	@ 0xec
 803497a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803497e:	89bb      	ldrh	r3, [r7, #12]
 8034980:	059b      	lsls	r3, r3, #22
 8034982:	d4f5      	bmi.n	8034970 <_vfiprintf_r+0x5c>
 8034984:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8034986:	f002 fc6e 	bl	8037266 <__retarget_lock_release_recursive>
 803498a:	e7f1      	b.n	8034970 <_vfiprintf_r+0x5c>
 803498c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8034990:	f003 021a 	and.w	r2, r3, #26
 8034994:	2a0a      	cmp	r2, #10
 8034996:	d114      	bne.n	80349c2 <_vfiprintf_r+0xae>
 8034998:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 803499c:	2a00      	cmp	r2, #0
 803499e:	db10      	blt.n	80349c2 <_vfiprintf_r+0xae>
 80349a0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80349a2:	07d6      	lsls	r6, r2, #31
 80349a4:	d404      	bmi.n	80349b0 <_vfiprintf_r+0x9c>
 80349a6:	059d      	lsls	r5, r3, #22
 80349a8:	d402      	bmi.n	80349b0 <_vfiprintf_r+0x9c>
 80349aa:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80349ac:	f002 fc5b 	bl	8037266 <__retarget_lock_release_recursive>
 80349b0:	9800      	ldr	r0, [sp, #0]
 80349b2:	4623      	mov	r3, r4
 80349b4:	465a      	mov	r2, fp
 80349b6:	4639      	mov	r1, r7
 80349b8:	b03b      	add	sp, #236	@ 0xec
 80349ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80349be:	f000 bc31 	b.w	8035224 <__sbprintf>
 80349c2:	2300      	movs	r3, #0
 80349c4:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 80349c8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80349cc:	ae11      	add	r6, sp, #68	@ 0x44
 80349ce:	960e      	str	r6, [sp, #56]	@ 0x38
 80349d0:	9307      	str	r3, [sp, #28]
 80349d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80349d4:	9303      	str	r3, [sp, #12]
 80349d6:	465b      	mov	r3, fp
 80349d8:	461c      	mov	r4, r3
 80349da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80349de:	b10a      	cbz	r2, 80349e4 <_vfiprintf_r+0xd0>
 80349e0:	2a25      	cmp	r2, #37	@ 0x25
 80349e2:	d1f9      	bne.n	80349d8 <_vfiprintf_r+0xc4>
 80349e4:	ebb4 080b 	subs.w	r8, r4, fp
 80349e8:	d00d      	beq.n	8034a06 <_vfiprintf_r+0xf2>
 80349ea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80349ec:	4443      	add	r3, r8
 80349ee:	9310      	str	r3, [sp, #64]	@ 0x40
 80349f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80349f2:	3301      	adds	r3, #1
 80349f4:	2b07      	cmp	r3, #7
 80349f6:	e9c6 b800 	strd	fp, r8, [r6]
 80349fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80349fc:	dc75      	bgt.n	8034aea <_vfiprintf_r+0x1d6>
 80349fe:	3608      	adds	r6, #8
 8034a00:	9b03      	ldr	r3, [sp, #12]
 8034a02:	4443      	add	r3, r8
 8034a04:	9303      	str	r3, [sp, #12]
 8034a06:	7823      	ldrb	r3, [r4, #0]
 8034a08:	2b00      	cmp	r3, #0
 8034a0a:	f000 83cd 	beq.w	80351a8 <_vfiprintf_r+0x894>
 8034a0e:	2300      	movs	r3, #0
 8034a10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8034a14:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8034a18:	3401      	adds	r4, #1
 8034a1a:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8034a1e:	469a      	mov	sl, r3
 8034a20:	46a3      	mov	fp, r4
 8034a22:	f81b 3b01 	ldrb.w	r3, [fp], #1
 8034a26:	f1a3 0220 	sub.w	r2, r3, #32
 8034a2a:	2a5a      	cmp	r2, #90	@ 0x5a
 8034a2c:	f200 8316 	bhi.w	803505c <_vfiprintf_r+0x748>
 8034a30:	e8df f012 	tbh	[pc, r2, lsl #1]
 8034a34:	0314009a 	.word	0x0314009a
 8034a38:	00a20314 	.word	0x00a20314
 8034a3c:	03140314 	.word	0x03140314
 8034a40:	00820314 	.word	0x00820314
 8034a44:	03140314 	.word	0x03140314
 8034a48:	00af00a5 	.word	0x00af00a5
 8034a4c:	00ac0314 	.word	0x00ac0314
 8034a50:	031400b1 	.word	0x031400b1
 8034a54:	00d000cd 	.word	0x00d000cd
 8034a58:	00d000d0 	.word	0x00d000d0
 8034a5c:	00d000d0 	.word	0x00d000d0
 8034a60:	00d000d0 	.word	0x00d000d0
 8034a64:	00d000d0 	.word	0x00d000d0
 8034a68:	03140314 	.word	0x03140314
 8034a6c:	03140314 	.word	0x03140314
 8034a70:	03140314 	.word	0x03140314
 8034a74:	03140314 	.word	0x03140314
 8034a78:	00f70314 	.word	0x00f70314
 8034a7c:	03140104 	.word	0x03140104
 8034a80:	03140314 	.word	0x03140314
 8034a84:	03140314 	.word	0x03140314
 8034a88:	03140314 	.word	0x03140314
 8034a8c:	03140314 	.word	0x03140314
 8034a90:	01520314 	.word	0x01520314
 8034a94:	03140314 	.word	0x03140314
 8034a98:	019a0314 	.word	0x019a0314
 8034a9c:	027a0314 	.word	0x027a0314
 8034aa0:	03140314 	.word	0x03140314
 8034aa4:	0314029a 	.word	0x0314029a
 8034aa8:	03140314 	.word	0x03140314
 8034aac:	03140314 	.word	0x03140314
 8034ab0:	03140314 	.word	0x03140314
 8034ab4:	03140314 	.word	0x03140314
 8034ab8:	00f70314 	.word	0x00f70314
 8034abc:	03140106 	.word	0x03140106
 8034ac0:	03140314 	.word	0x03140314
 8034ac4:	010600e0 	.word	0x010600e0
 8034ac8:	031400f1 	.word	0x031400f1
 8034acc:	031400eb 	.word	0x031400eb
 8034ad0:	01540132 	.word	0x01540132
 8034ad4:	00f10189 	.word	0x00f10189
 8034ad8:	019a0314 	.word	0x019a0314
 8034adc:	027c0098 	.word	0x027c0098
 8034ae0:	03140314 	.word	0x03140314
 8034ae4:	03140065 	.word	0x03140065
 8034ae8:	0098      	.short	0x0098
 8034aea:	9800      	ldr	r0, [sp, #0]
 8034aec:	aa0e      	add	r2, sp, #56	@ 0x38
 8034aee:	4639      	mov	r1, r7
 8034af0:	f7ff fede 	bl	80348b0 <__sprint_r>
 8034af4:	2800      	cmp	r0, #0
 8034af6:	f040 8336 	bne.w	8035166 <_vfiprintf_r+0x852>
 8034afa:	ae11      	add	r6, sp, #68	@ 0x44
 8034afc:	e780      	b.n	8034a00 <_vfiprintf_r+0xec>
 8034afe:	4a99      	ldr	r2, [pc, #612]	@ (8034d64 <_vfiprintf_r+0x450>)
 8034b00:	9205      	str	r2, [sp, #20]
 8034b02:	f01a 0220 	ands.w	r2, sl, #32
 8034b06:	f000 8231 	beq.w	8034f6c <_vfiprintf_r+0x658>
 8034b0a:	3507      	adds	r5, #7
 8034b0c:	f025 0507 	bic.w	r5, r5, #7
 8034b10:	46a8      	mov	r8, r5
 8034b12:	686d      	ldr	r5, [r5, #4]
 8034b14:	f858 4b08 	ldr.w	r4, [r8], #8
 8034b18:	f01a 0f01 	tst.w	sl, #1
 8034b1c:	d009      	beq.n	8034b32 <_vfiprintf_r+0x21e>
 8034b1e:	ea54 0205 	orrs.w	r2, r4, r5
 8034b22:	bf1f      	itttt	ne
 8034b24:	2230      	movne	r2, #48	@ 0x30
 8034b26:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 8034b2a:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 8034b2e:	f04a 0a02 	orrne.w	sl, sl, #2
 8034b32:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 8034b36:	e112      	b.n	8034d5e <_vfiprintf_r+0x44a>
 8034b38:	9800      	ldr	r0, [sp, #0]
 8034b3a:	f002 fae7 	bl	803710c <_localeconv_r>
 8034b3e:	6843      	ldr	r3, [r0, #4]
 8034b40:	9309      	str	r3, [sp, #36]	@ 0x24
 8034b42:	4618      	mov	r0, r3
 8034b44:	f7db fbac 	bl	80102a0 <strlen>
 8034b48:	9007      	str	r0, [sp, #28]
 8034b4a:	9800      	ldr	r0, [sp, #0]
 8034b4c:	f002 fade 	bl	803710c <_localeconv_r>
 8034b50:	6883      	ldr	r3, [r0, #8]
 8034b52:	9306      	str	r3, [sp, #24]
 8034b54:	9b07      	ldr	r3, [sp, #28]
 8034b56:	b12b      	cbz	r3, 8034b64 <_vfiprintf_r+0x250>
 8034b58:	9b06      	ldr	r3, [sp, #24]
 8034b5a:	b11b      	cbz	r3, 8034b64 <_vfiprintf_r+0x250>
 8034b5c:	781b      	ldrb	r3, [r3, #0]
 8034b5e:	b10b      	cbz	r3, 8034b64 <_vfiprintf_r+0x250>
 8034b60:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 8034b64:	465c      	mov	r4, fp
 8034b66:	e75b      	b.n	8034a20 <_vfiprintf_r+0x10c>
 8034b68:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8034b6c:	2b00      	cmp	r3, #0
 8034b6e:	d1f9      	bne.n	8034b64 <_vfiprintf_r+0x250>
 8034b70:	2320      	movs	r3, #32
 8034b72:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8034b76:	e7f5      	b.n	8034b64 <_vfiprintf_r+0x250>
 8034b78:	f04a 0a01 	orr.w	sl, sl, #1
 8034b7c:	e7f2      	b.n	8034b64 <_vfiprintf_r+0x250>
 8034b7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8034b82:	9302      	str	r3, [sp, #8]
 8034b84:	2b00      	cmp	r3, #0
 8034b86:	daed      	bge.n	8034b64 <_vfiprintf_r+0x250>
 8034b88:	425b      	negs	r3, r3
 8034b8a:	9302      	str	r3, [sp, #8]
 8034b8c:	f04a 0a04 	orr.w	sl, sl, #4
 8034b90:	e7e8      	b.n	8034b64 <_vfiprintf_r+0x250>
 8034b92:	232b      	movs	r3, #43	@ 0x2b
 8034b94:	e7ed      	b.n	8034b72 <_vfiprintf_r+0x25e>
 8034b96:	465a      	mov	r2, fp
 8034b98:	f812 3b01 	ldrb.w	r3, [r2], #1
 8034b9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8034b9e:	d112      	bne.n	8034bc6 <_vfiprintf_r+0x2b2>
 8034ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8034ba4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8034ba8:	9301      	str	r3, [sp, #4]
 8034baa:	4693      	mov	fp, r2
 8034bac:	e7da      	b.n	8034b64 <_vfiprintf_r+0x250>
 8034bae:	9b01      	ldr	r3, [sp, #4]
 8034bb0:	fb00 1303 	mla	r3, r0, r3, r1
 8034bb4:	9301      	str	r3, [sp, #4]
 8034bb6:	f812 3b01 	ldrb.w	r3, [r2], #1
 8034bba:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8034bbe:	2909      	cmp	r1, #9
 8034bc0:	d9f5      	bls.n	8034bae <_vfiprintf_r+0x29a>
 8034bc2:	4693      	mov	fp, r2
 8034bc4:	e72f      	b.n	8034a26 <_vfiprintf_r+0x112>
 8034bc6:	2100      	movs	r1, #0
 8034bc8:	9101      	str	r1, [sp, #4]
 8034bca:	200a      	movs	r0, #10
 8034bcc:	e7f5      	b.n	8034bba <_vfiprintf_r+0x2a6>
 8034bce:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 8034bd2:	e7c7      	b.n	8034b64 <_vfiprintf_r+0x250>
 8034bd4:	2100      	movs	r1, #0
 8034bd6:	465a      	mov	r2, fp
 8034bd8:	9102      	str	r1, [sp, #8]
 8034bda:	200a      	movs	r0, #10
 8034bdc:	9902      	ldr	r1, [sp, #8]
 8034bde:	3b30      	subs	r3, #48	@ 0x30
 8034be0:	fb00 3301 	mla	r3, r0, r1, r3
 8034be4:	9302      	str	r3, [sp, #8]
 8034be6:	f812 3b01 	ldrb.w	r3, [r2], #1
 8034bea:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8034bee:	2909      	cmp	r1, #9
 8034bf0:	d9f4      	bls.n	8034bdc <_vfiprintf_r+0x2c8>
 8034bf2:	e7e6      	b.n	8034bc2 <_vfiprintf_r+0x2ae>
 8034bf4:	f89b 3000 	ldrb.w	r3, [fp]
 8034bf8:	2b68      	cmp	r3, #104	@ 0x68
 8034bfa:	bf06      	itte	eq
 8034bfc:	f10b 0b01 	addeq.w	fp, fp, #1
 8034c00:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 8034c04:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 8034c08:	e7ac      	b.n	8034b64 <_vfiprintf_r+0x250>
 8034c0a:	f89b 3000 	ldrb.w	r3, [fp]
 8034c0e:	2b6c      	cmp	r3, #108	@ 0x6c
 8034c10:	d104      	bne.n	8034c1c <_vfiprintf_r+0x308>
 8034c12:	f10b 0b01 	add.w	fp, fp, #1
 8034c16:	f04a 0a20 	orr.w	sl, sl, #32
 8034c1a:	e7a3      	b.n	8034b64 <_vfiprintf_r+0x250>
 8034c1c:	f04a 0a10 	orr.w	sl, sl, #16
 8034c20:	e7a0      	b.n	8034b64 <_vfiprintf_r+0x250>
 8034c22:	46a8      	mov	r8, r5
 8034c24:	2400      	movs	r4, #0
 8034c26:	f858 3b04 	ldr.w	r3, [r8], #4
 8034c2a:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8034c2e:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8034c32:	2301      	movs	r3, #1
 8034c34:	9301      	str	r3, [sp, #4]
 8034c36:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 8034c3a:	e0ab      	b.n	8034d94 <_vfiprintf_r+0x480>
 8034c3c:	f04a 0a10 	orr.w	sl, sl, #16
 8034c40:	f01a 0f20 	tst.w	sl, #32
 8034c44:	d011      	beq.n	8034c6a <_vfiprintf_r+0x356>
 8034c46:	3507      	adds	r5, #7
 8034c48:	f025 0507 	bic.w	r5, r5, #7
 8034c4c:	46a8      	mov	r8, r5
 8034c4e:	686d      	ldr	r5, [r5, #4]
 8034c50:	f858 4b08 	ldr.w	r4, [r8], #8
 8034c54:	2d00      	cmp	r5, #0
 8034c56:	da06      	bge.n	8034c66 <_vfiprintf_r+0x352>
 8034c58:	4264      	negs	r4, r4
 8034c5a:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8034c5e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8034c62:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8034c66:	2301      	movs	r3, #1
 8034c68:	e048      	b.n	8034cfc <_vfiprintf_r+0x3e8>
 8034c6a:	46a8      	mov	r8, r5
 8034c6c:	f01a 0f10 	tst.w	sl, #16
 8034c70:	f858 5b04 	ldr.w	r5, [r8], #4
 8034c74:	d002      	beq.n	8034c7c <_vfiprintf_r+0x368>
 8034c76:	462c      	mov	r4, r5
 8034c78:	17ed      	asrs	r5, r5, #31
 8034c7a:	e7eb      	b.n	8034c54 <_vfiprintf_r+0x340>
 8034c7c:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8034c80:	d003      	beq.n	8034c8a <_vfiprintf_r+0x376>
 8034c82:	b22c      	sxth	r4, r5
 8034c84:	f345 35c0 	sbfx	r5, r5, #15, #1
 8034c88:	e7e4      	b.n	8034c54 <_vfiprintf_r+0x340>
 8034c8a:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 8034c8e:	d0f2      	beq.n	8034c76 <_vfiprintf_r+0x362>
 8034c90:	b26c      	sxtb	r4, r5
 8034c92:	f345 15c0 	sbfx	r5, r5, #7, #1
 8034c96:	e7dd      	b.n	8034c54 <_vfiprintf_r+0x340>
 8034c98:	f01a 0f20 	tst.w	sl, #32
 8034c9c:	d007      	beq.n	8034cae <_vfiprintf_r+0x39a>
 8034c9e:	9a03      	ldr	r2, [sp, #12]
 8034ca0:	682b      	ldr	r3, [r5, #0]
 8034ca2:	9903      	ldr	r1, [sp, #12]
 8034ca4:	17d2      	asrs	r2, r2, #31
 8034ca6:	e9c3 1200 	strd	r1, r2, [r3]
 8034caa:	3504      	adds	r5, #4
 8034cac:	e693      	b.n	80349d6 <_vfiprintf_r+0xc2>
 8034cae:	f01a 0f10 	tst.w	sl, #16
 8034cb2:	d003      	beq.n	8034cbc <_vfiprintf_r+0x3a8>
 8034cb4:	682b      	ldr	r3, [r5, #0]
 8034cb6:	9a03      	ldr	r2, [sp, #12]
 8034cb8:	601a      	str	r2, [r3, #0]
 8034cba:	e7f6      	b.n	8034caa <_vfiprintf_r+0x396>
 8034cbc:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8034cc0:	d003      	beq.n	8034cca <_vfiprintf_r+0x3b6>
 8034cc2:	682b      	ldr	r3, [r5, #0]
 8034cc4:	9a03      	ldr	r2, [sp, #12]
 8034cc6:	801a      	strh	r2, [r3, #0]
 8034cc8:	e7ef      	b.n	8034caa <_vfiprintf_r+0x396>
 8034cca:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 8034cce:	d0f1      	beq.n	8034cb4 <_vfiprintf_r+0x3a0>
 8034cd0:	682b      	ldr	r3, [r5, #0]
 8034cd2:	9a03      	ldr	r2, [sp, #12]
 8034cd4:	701a      	strb	r2, [r3, #0]
 8034cd6:	e7e8      	b.n	8034caa <_vfiprintf_r+0x396>
 8034cd8:	f04a 0a10 	orr.w	sl, sl, #16
 8034cdc:	f01a 0320 	ands.w	r3, sl, #32
 8034ce0:	d01f      	beq.n	8034d22 <_vfiprintf_r+0x40e>
 8034ce2:	3507      	adds	r5, #7
 8034ce4:	f025 0507 	bic.w	r5, r5, #7
 8034ce8:	46a8      	mov	r8, r5
 8034cea:	686d      	ldr	r5, [r5, #4]
 8034cec:	f858 4b08 	ldr.w	r4, [r8], #8
 8034cf0:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 8034cf4:	2300      	movs	r3, #0
 8034cf6:	2200      	movs	r2, #0
 8034cf8:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 8034cfc:	9a01      	ldr	r2, [sp, #4]
 8034cfe:	3201      	adds	r2, #1
 8034d00:	f000 825f 	beq.w	80351c2 <_vfiprintf_r+0x8ae>
 8034d04:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 8034d08:	9204      	str	r2, [sp, #16]
 8034d0a:	ea54 0205 	orrs.w	r2, r4, r5
 8034d0e:	f040 825e 	bne.w	80351ce <_vfiprintf_r+0x8ba>
 8034d12:	9a01      	ldr	r2, [sp, #4]
 8034d14:	2a00      	cmp	r2, #0
 8034d16:	f000 8198 	beq.w	803504a <_vfiprintf_r+0x736>
 8034d1a:	2b01      	cmp	r3, #1
 8034d1c:	f040 825a 	bne.w	80351d4 <_vfiprintf_r+0x8c0>
 8034d20:	e13b      	b.n	8034f9a <_vfiprintf_r+0x686>
 8034d22:	46a8      	mov	r8, r5
 8034d24:	f01a 0510 	ands.w	r5, sl, #16
 8034d28:	f858 4b04 	ldr.w	r4, [r8], #4
 8034d2c:	d001      	beq.n	8034d32 <_vfiprintf_r+0x41e>
 8034d2e:	461d      	mov	r5, r3
 8034d30:	e7de      	b.n	8034cf0 <_vfiprintf_r+0x3dc>
 8034d32:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 8034d36:	d001      	beq.n	8034d3c <_vfiprintf_r+0x428>
 8034d38:	b2a4      	uxth	r4, r4
 8034d3a:	e7d9      	b.n	8034cf0 <_vfiprintf_r+0x3dc>
 8034d3c:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8034d40:	d0d6      	beq.n	8034cf0 <_vfiprintf_r+0x3dc>
 8034d42:	b2e4      	uxtb	r4, r4
 8034d44:	e7f3      	b.n	8034d2e <_vfiprintf_r+0x41a>
 8034d46:	46a8      	mov	r8, r5
 8034d48:	f647 0330 	movw	r3, #30768	@ 0x7830
 8034d4c:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8034d50:	f858 4b04 	ldr.w	r4, [r8], #4
 8034d54:	4b03      	ldr	r3, [pc, #12]	@ (8034d64 <_vfiprintf_r+0x450>)
 8034d56:	9305      	str	r3, [sp, #20]
 8034d58:	2500      	movs	r5, #0
 8034d5a:	f04a 0a02 	orr.w	sl, sl, #2
 8034d5e:	2302      	movs	r3, #2
 8034d60:	e7c9      	b.n	8034cf6 <_vfiprintf_r+0x3e2>
 8034d62:	bf00      	nop
 8034d64:	080447ac 	.word	0x080447ac
 8034d68:	9b01      	ldr	r3, [sp, #4]
 8034d6a:	46a8      	mov	r8, r5
 8034d6c:	1c5c      	adds	r4, r3, #1
 8034d6e:	f04f 0500 	mov.w	r5, #0
 8034d72:	f858 9b04 	ldr.w	r9, [r8], #4
 8034d76:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 8034d7a:	f000 80d0 	beq.w	8034f1e <_vfiprintf_r+0x60a>
 8034d7e:	461a      	mov	r2, r3
 8034d80:	4629      	mov	r1, r5
 8034d82:	4648      	mov	r0, r9
 8034d84:	f7db fa3c 	bl	8010200 <memchr>
 8034d88:	4604      	mov	r4, r0
 8034d8a:	b118      	cbz	r0, 8034d94 <_vfiprintf_r+0x480>
 8034d8c:	eba0 0309 	sub.w	r3, r0, r9
 8034d90:	9301      	str	r3, [sp, #4]
 8034d92:	462c      	mov	r4, r5
 8034d94:	9b01      	ldr	r3, [sp, #4]
 8034d96:	42a3      	cmp	r3, r4
 8034d98:	bfb8      	it	lt
 8034d9a:	4623      	movlt	r3, r4
 8034d9c:	9304      	str	r3, [sp, #16]
 8034d9e:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8034da2:	b113      	cbz	r3, 8034daa <_vfiprintf_r+0x496>
 8034da4:	9b04      	ldr	r3, [sp, #16]
 8034da6:	3301      	adds	r3, #1
 8034da8:	9304      	str	r3, [sp, #16]
 8034daa:	f01a 0302 	ands.w	r3, sl, #2
 8034dae:	9308      	str	r3, [sp, #32]
 8034db0:	bf1e      	ittt	ne
 8034db2:	9b04      	ldrne	r3, [sp, #16]
 8034db4:	3302      	addne	r3, #2
 8034db6:	9304      	strne	r3, [sp, #16]
 8034db8:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 8034dbc:	930a      	str	r3, [sp, #40]	@ 0x28
 8034dbe:	d11f      	bne.n	8034e00 <_vfiprintf_r+0x4ec>
 8034dc0:	9b02      	ldr	r3, [sp, #8]
 8034dc2:	9a04      	ldr	r2, [sp, #16]
 8034dc4:	1a9d      	subs	r5, r3, r2
 8034dc6:	2d00      	cmp	r5, #0
 8034dc8:	dd1a      	ble.n	8034e00 <_vfiprintf_r+0x4ec>
 8034dca:	4ba9      	ldr	r3, [pc, #676]	@ (8035070 <_vfiprintf_r+0x75c>)
 8034dcc:	6033      	str	r3, [r6, #0]
 8034dce:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8034dd2:	2d10      	cmp	r5, #16
 8034dd4:	f102 0201 	add.w	r2, r2, #1
 8034dd8:	f106 0008 	add.w	r0, r6, #8
 8034ddc:	f300 814e 	bgt.w	803507c <_vfiprintf_r+0x768>
 8034de0:	6075      	str	r5, [r6, #4]
 8034de2:	2a07      	cmp	r2, #7
 8034de4:	4465      	add	r5, ip
 8034de6:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 8034dea:	f340 815a 	ble.w	80350a2 <_vfiprintf_r+0x78e>
 8034dee:	9800      	ldr	r0, [sp, #0]
 8034df0:	aa0e      	add	r2, sp, #56	@ 0x38
 8034df2:	4639      	mov	r1, r7
 8034df4:	f7ff fd5c 	bl	80348b0 <__sprint_r>
 8034df8:	2800      	cmp	r0, #0
 8034dfa:	f040 81b4 	bne.w	8035166 <_vfiprintf_r+0x852>
 8034dfe:	ae11      	add	r6, sp, #68	@ 0x44
 8034e00:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 8034e04:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8034e08:	b161      	cbz	r1, 8034e24 <_vfiprintf_r+0x510>
 8034e0a:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 8034e0e:	3301      	adds	r3, #1
 8034e10:	6031      	str	r1, [r6, #0]
 8034e12:	2101      	movs	r1, #1
 8034e14:	440a      	add	r2, r1
 8034e16:	2b07      	cmp	r3, #7
 8034e18:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8034e1c:	6071      	str	r1, [r6, #4]
 8034e1e:	f300 8142 	bgt.w	80350a6 <_vfiprintf_r+0x792>
 8034e22:	3608      	adds	r6, #8
 8034e24:	9908      	ldr	r1, [sp, #32]
 8034e26:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8034e2a:	b159      	cbz	r1, 8034e44 <_vfiprintf_r+0x530>
 8034e2c:	a90d      	add	r1, sp, #52	@ 0x34
 8034e2e:	3301      	adds	r3, #1
 8034e30:	6031      	str	r1, [r6, #0]
 8034e32:	2102      	movs	r1, #2
 8034e34:	440a      	add	r2, r1
 8034e36:	2b07      	cmp	r3, #7
 8034e38:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8034e3c:	6071      	str	r1, [r6, #4]
 8034e3e:	f300 813b 	bgt.w	80350b8 <_vfiprintf_r+0x7a4>
 8034e42:	3608      	adds	r6, #8
 8034e44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8034e46:	2b80      	cmp	r3, #128	@ 0x80
 8034e48:	d11f      	bne.n	8034e8a <_vfiprintf_r+0x576>
 8034e4a:	9b02      	ldr	r3, [sp, #8]
 8034e4c:	9a04      	ldr	r2, [sp, #16]
 8034e4e:	1a9d      	subs	r5, r3, r2
 8034e50:	2d00      	cmp	r5, #0
 8034e52:	dd1a      	ble.n	8034e8a <_vfiprintf_r+0x576>
 8034e54:	4b87      	ldr	r3, [pc, #540]	@ (8035074 <_vfiprintf_r+0x760>)
 8034e56:	6033      	str	r3, [r6, #0]
 8034e58:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8034e5c:	2d10      	cmp	r5, #16
 8034e5e:	f102 0201 	add.w	r2, r2, #1
 8034e62:	f106 0008 	add.w	r0, r6, #8
 8034e66:	f300 8130 	bgt.w	80350ca <_vfiprintf_r+0x7b6>
 8034e6a:	6075      	str	r5, [r6, #4]
 8034e6c:	2a07      	cmp	r2, #7
 8034e6e:	4465      	add	r5, ip
 8034e70:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 8034e74:	f340 813c 	ble.w	80350f0 <_vfiprintf_r+0x7dc>
 8034e78:	9800      	ldr	r0, [sp, #0]
 8034e7a:	aa0e      	add	r2, sp, #56	@ 0x38
 8034e7c:	4639      	mov	r1, r7
 8034e7e:	f7ff fd17 	bl	80348b0 <__sprint_r>
 8034e82:	2800      	cmp	r0, #0
 8034e84:	f040 816f 	bne.w	8035166 <_vfiprintf_r+0x852>
 8034e88:	ae11      	add	r6, sp, #68	@ 0x44
 8034e8a:	9b01      	ldr	r3, [sp, #4]
 8034e8c:	1ae4      	subs	r4, r4, r3
 8034e8e:	2c00      	cmp	r4, #0
 8034e90:	dd1a      	ble.n	8034ec8 <_vfiprintf_r+0x5b4>
 8034e92:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8034e96:	4877      	ldr	r0, [pc, #476]	@ (8035074 <_vfiprintf_r+0x760>)
 8034e98:	6030      	str	r0, [r6, #0]
 8034e9a:	2c10      	cmp	r4, #16
 8034e9c:	f103 0301 	add.w	r3, r3, #1
 8034ea0:	f106 0108 	add.w	r1, r6, #8
 8034ea4:	f300 8126 	bgt.w	80350f4 <_vfiprintf_r+0x7e0>
 8034ea8:	6074      	str	r4, [r6, #4]
 8034eaa:	2b07      	cmp	r3, #7
 8034eac:	4414      	add	r4, r2
 8034eae:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 8034eb2:	f340 8130 	ble.w	8035116 <_vfiprintf_r+0x802>
 8034eb6:	9800      	ldr	r0, [sp, #0]
 8034eb8:	aa0e      	add	r2, sp, #56	@ 0x38
 8034eba:	4639      	mov	r1, r7
 8034ebc:	f7ff fcf8 	bl	80348b0 <__sprint_r>
 8034ec0:	2800      	cmp	r0, #0
 8034ec2:	f040 8150 	bne.w	8035166 <_vfiprintf_r+0x852>
 8034ec6:	ae11      	add	r6, sp, #68	@ 0x44
 8034ec8:	9b01      	ldr	r3, [sp, #4]
 8034eca:	9a01      	ldr	r2, [sp, #4]
 8034ecc:	6073      	str	r3, [r6, #4]
 8034ece:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8034ed0:	f8c6 9000 	str.w	r9, [r6]
 8034ed4:	4413      	add	r3, r2
 8034ed6:	9310      	str	r3, [sp, #64]	@ 0x40
 8034ed8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8034eda:	3301      	adds	r3, #1
 8034edc:	2b07      	cmp	r3, #7
 8034ede:	930f      	str	r3, [sp, #60]	@ 0x3c
 8034ee0:	f300 811b 	bgt.w	803511a <_vfiprintf_r+0x806>
 8034ee4:	f106 0308 	add.w	r3, r6, #8
 8034ee8:	f01a 0f04 	tst.w	sl, #4
 8034eec:	f040 811d 	bne.w	803512a <_vfiprintf_r+0x816>
 8034ef0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8034ef4:	9904      	ldr	r1, [sp, #16]
 8034ef6:	428a      	cmp	r2, r1
 8034ef8:	bfac      	ite	ge
 8034efa:	189b      	addge	r3, r3, r2
 8034efc:	185b      	addlt	r3, r3, r1
 8034efe:	9303      	str	r3, [sp, #12]
 8034f00:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8034f02:	b13b      	cbz	r3, 8034f14 <_vfiprintf_r+0x600>
 8034f04:	9800      	ldr	r0, [sp, #0]
 8034f06:	aa0e      	add	r2, sp, #56	@ 0x38
 8034f08:	4639      	mov	r1, r7
 8034f0a:	f7ff fcd1 	bl	80348b0 <__sprint_r>
 8034f0e:	2800      	cmp	r0, #0
 8034f10:	f040 8129 	bne.w	8035166 <_vfiprintf_r+0x852>
 8034f14:	2300      	movs	r3, #0
 8034f16:	930f      	str	r3, [sp, #60]	@ 0x3c
 8034f18:	4645      	mov	r5, r8
 8034f1a:	ae11      	add	r6, sp, #68	@ 0x44
 8034f1c:	e55b      	b.n	80349d6 <_vfiprintf_r+0xc2>
 8034f1e:	4648      	mov	r0, r9
 8034f20:	f7db f9be 	bl	80102a0 <strlen>
 8034f24:	9001      	str	r0, [sp, #4]
 8034f26:	e734      	b.n	8034d92 <_vfiprintf_r+0x47e>
 8034f28:	f04a 0a10 	orr.w	sl, sl, #16
 8034f2c:	f01a 0320 	ands.w	r3, sl, #32
 8034f30:	d008      	beq.n	8034f44 <_vfiprintf_r+0x630>
 8034f32:	3507      	adds	r5, #7
 8034f34:	f025 0507 	bic.w	r5, r5, #7
 8034f38:	46a8      	mov	r8, r5
 8034f3a:	686d      	ldr	r5, [r5, #4]
 8034f3c:	f858 4b08 	ldr.w	r4, [r8], #8
 8034f40:	2301      	movs	r3, #1
 8034f42:	e6d8      	b.n	8034cf6 <_vfiprintf_r+0x3e2>
 8034f44:	46a8      	mov	r8, r5
 8034f46:	f01a 0510 	ands.w	r5, sl, #16
 8034f4a:	f858 4b04 	ldr.w	r4, [r8], #4
 8034f4e:	d001      	beq.n	8034f54 <_vfiprintf_r+0x640>
 8034f50:	461d      	mov	r5, r3
 8034f52:	e7f5      	b.n	8034f40 <_vfiprintf_r+0x62c>
 8034f54:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 8034f58:	d001      	beq.n	8034f5e <_vfiprintf_r+0x64a>
 8034f5a:	b2a4      	uxth	r4, r4
 8034f5c:	e7f0      	b.n	8034f40 <_vfiprintf_r+0x62c>
 8034f5e:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8034f62:	d0ed      	beq.n	8034f40 <_vfiprintf_r+0x62c>
 8034f64:	b2e4      	uxtb	r4, r4
 8034f66:	e7f3      	b.n	8034f50 <_vfiprintf_r+0x63c>
 8034f68:	4a43      	ldr	r2, [pc, #268]	@ (8035078 <_vfiprintf_r+0x764>)
 8034f6a:	e5c9      	b.n	8034b00 <_vfiprintf_r+0x1ec>
 8034f6c:	46a8      	mov	r8, r5
 8034f6e:	f01a 0510 	ands.w	r5, sl, #16
 8034f72:	f858 4b04 	ldr.w	r4, [r8], #4
 8034f76:	d001      	beq.n	8034f7c <_vfiprintf_r+0x668>
 8034f78:	4615      	mov	r5, r2
 8034f7a:	e5cd      	b.n	8034b18 <_vfiprintf_r+0x204>
 8034f7c:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 8034f80:	d001      	beq.n	8034f86 <_vfiprintf_r+0x672>
 8034f82:	b2a4      	uxth	r4, r4
 8034f84:	e5c8      	b.n	8034b18 <_vfiprintf_r+0x204>
 8034f86:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8034f8a:	f43f adc5 	beq.w	8034b18 <_vfiprintf_r+0x204>
 8034f8e:	b2e4      	uxtb	r4, r4
 8034f90:	e7f2      	b.n	8034f78 <_vfiprintf_r+0x664>
 8034f92:	2c0a      	cmp	r4, #10
 8034f94:	f175 0300 	sbcs.w	r3, r5, #0
 8034f98:	d206      	bcs.n	8034fa8 <_vfiprintf_r+0x694>
 8034f9a:	3430      	adds	r4, #48	@ 0x30
 8034f9c:	b2e4      	uxtb	r4, r4
 8034f9e:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 8034fa2:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 8034fa6:	e131      	b.n	803520c <_vfiprintf_r+0x8f8>
 8034fa8:	ab3a      	add	r3, sp, #232	@ 0xe8
 8034faa:	9308      	str	r3, [sp, #32]
 8034fac:	9b04      	ldr	r3, [sp, #16]
 8034fae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8034fb2:	f04f 0a00 	mov.w	sl, #0
 8034fb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8034fb8:	220a      	movs	r2, #10
 8034fba:	2300      	movs	r3, #0
 8034fbc:	4620      	mov	r0, r4
 8034fbe:	4629      	mov	r1, r5
 8034fc0:	f7db feca 	bl	8010d58 <__aeabi_uldivmod>
 8034fc4:	460b      	mov	r3, r1
 8034fc6:	9908      	ldr	r1, [sp, #32]
 8034fc8:	900b      	str	r0, [sp, #44]	@ 0x2c
 8034fca:	3230      	adds	r2, #48	@ 0x30
 8034fcc:	f801 2c01 	strb.w	r2, [r1, #-1]
 8034fd0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8034fd2:	f101 39ff 	add.w	r9, r1, #4294967295	@ 0xffffffff
 8034fd6:	f10a 0a01 	add.w	sl, sl, #1
 8034fda:	b1e2      	cbz	r2, 8035016 <_vfiprintf_r+0x702>
 8034fdc:	9a06      	ldr	r2, [sp, #24]
 8034fde:	7812      	ldrb	r2, [r2, #0]
 8034fe0:	4552      	cmp	r2, sl
 8034fe2:	d118      	bne.n	8035016 <_vfiprintf_r+0x702>
 8034fe4:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8034fe8:	d015      	beq.n	8035016 <_vfiprintf_r+0x702>
 8034fea:	2c0a      	cmp	r4, #10
 8034fec:	f175 0200 	sbcs.w	r2, r5, #0
 8034ff0:	d311      	bcc.n	8035016 <_vfiprintf_r+0x702>
 8034ff2:	9308      	str	r3, [sp, #32]
 8034ff4:	9b07      	ldr	r3, [sp, #28]
 8034ff6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8034ff8:	eba9 0903 	sub.w	r9, r9, r3
 8034ffc:	461a      	mov	r2, r3
 8034ffe:	4648      	mov	r0, r9
 8035000:	f000 ff3d 	bl	8035e7e <strncpy>
 8035004:	9b06      	ldr	r3, [sp, #24]
 8035006:	785a      	ldrb	r2, [r3, #1]
 8035008:	9b08      	ldr	r3, [sp, #32]
 803500a:	b172      	cbz	r2, 803502a <_vfiprintf_r+0x716>
 803500c:	9a06      	ldr	r2, [sp, #24]
 803500e:	3201      	adds	r2, #1
 8035010:	9206      	str	r2, [sp, #24]
 8035012:	f04f 0a00 	mov.w	sl, #0
 8035016:	2c0a      	cmp	r4, #10
 8035018:	f175 0500 	sbcs.w	r5, r5, #0
 803501c:	f0c0 80f6 	bcc.w	803520c <_vfiprintf_r+0x8f8>
 8035020:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8035022:	f8cd 9020 	str.w	r9, [sp, #32]
 8035026:	461d      	mov	r5, r3
 8035028:	e7c6      	b.n	8034fb8 <_vfiprintf_r+0x6a4>
 803502a:	4692      	mov	sl, r2
 803502c:	e7f3      	b.n	8035016 <_vfiprintf_r+0x702>
 803502e:	f004 030f 	and.w	r3, r4, #15
 8035032:	9a05      	ldr	r2, [sp, #20]
 8035034:	0924      	lsrs	r4, r4, #4
 8035036:	5cd3      	ldrb	r3, [r2, r3]
 8035038:	f809 3d01 	strb.w	r3, [r9, #-1]!
 803503c:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8035040:	092d      	lsrs	r5, r5, #4
 8035042:	ea54 0305 	orrs.w	r3, r4, r5
 8035046:	d1f2      	bne.n	803502e <_vfiprintf_r+0x71a>
 8035048:	e0e0      	b.n	803520c <_vfiprintf_r+0x8f8>
 803504a:	b923      	cbnz	r3, 8035056 <_vfiprintf_r+0x742>
 803504c:	f01a 0f01 	tst.w	sl, #1
 8035050:	d001      	beq.n	8035056 <_vfiprintf_r+0x742>
 8035052:	2430      	movs	r4, #48	@ 0x30
 8035054:	e7a3      	b.n	8034f9e <_vfiprintf_r+0x68a>
 8035056:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 803505a:	e0d7      	b.n	803520c <_vfiprintf_r+0x8f8>
 803505c:	2b00      	cmp	r3, #0
 803505e:	f000 80a3 	beq.w	80351a8 <_vfiprintf_r+0x894>
 8035062:	2400      	movs	r4, #0
 8035064:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8035068:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 803506c:	46a8      	mov	r8, r5
 803506e:	e5e0      	b.n	8034c32 <_vfiprintf_r+0x31e>
 8035070:	08044800 	.word	0x08044800
 8035074:	080447f0 	.word	0x080447f0
 8035078:	080447bd 	.word	0x080447bd
 803507c:	2110      	movs	r1, #16
 803507e:	6071      	str	r1, [r6, #4]
 8035080:	2a07      	cmp	r2, #7
 8035082:	4461      	add	r1, ip
 8035084:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8035088:	dd08      	ble.n	803509c <_vfiprintf_r+0x788>
 803508a:	9800      	ldr	r0, [sp, #0]
 803508c:	aa0e      	add	r2, sp, #56	@ 0x38
 803508e:	4639      	mov	r1, r7
 8035090:	f7ff fc0e 	bl	80348b0 <__sprint_r>
 8035094:	2800      	cmp	r0, #0
 8035096:	d166      	bne.n	8035166 <_vfiprintf_r+0x852>
 8035098:	4b60      	ldr	r3, [pc, #384]	@ (803521c <_vfiprintf_r+0x908>)
 803509a:	a811      	add	r0, sp, #68	@ 0x44
 803509c:	3d10      	subs	r5, #16
 803509e:	4606      	mov	r6, r0
 80350a0:	e694      	b.n	8034dcc <_vfiprintf_r+0x4b8>
 80350a2:	4606      	mov	r6, r0
 80350a4:	e6ac      	b.n	8034e00 <_vfiprintf_r+0x4ec>
 80350a6:	9800      	ldr	r0, [sp, #0]
 80350a8:	aa0e      	add	r2, sp, #56	@ 0x38
 80350aa:	4639      	mov	r1, r7
 80350ac:	f7ff fc00 	bl	80348b0 <__sprint_r>
 80350b0:	2800      	cmp	r0, #0
 80350b2:	d158      	bne.n	8035166 <_vfiprintf_r+0x852>
 80350b4:	ae11      	add	r6, sp, #68	@ 0x44
 80350b6:	e6b5      	b.n	8034e24 <_vfiprintf_r+0x510>
 80350b8:	9800      	ldr	r0, [sp, #0]
 80350ba:	aa0e      	add	r2, sp, #56	@ 0x38
 80350bc:	4639      	mov	r1, r7
 80350be:	f7ff fbf7 	bl	80348b0 <__sprint_r>
 80350c2:	2800      	cmp	r0, #0
 80350c4:	d14f      	bne.n	8035166 <_vfiprintf_r+0x852>
 80350c6:	ae11      	add	r6, sp, #68	@ 0x44
 80350c8:	e6bc      	b.n	8034e44 <_vfiprintf_r+0x530>
 80350ca:	2110      	movs	r1, #16
 80350cc:	6071      	str	r1, [r6, #4]
 80350ce:	2a07      	cmp	r2, #7
 80350d0:	4461      	add	r1, ip
 80350d2:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 80350d6:	dd08      	ble.n	80350ea <_vfiprintf_r+0x7d6>
 80350d8:	9800      	ldr	r0, [sp, #0]
 80350da:	aa0e      	add	r2, sp, #56	@ 0x38
 80350dc:	4639      	mov	r1, r7
 80350de:	f7ff fbe7 	bl	80348b0 <__sprint_r>
 80350e2:	2800      	cmp	r0, #0
 80350e4:	d13f      	bne.n	8035166 <_vfiprintf_r+0x852>
 80350e6:	4b4e      	ldr	r3, [pc, #312]	@ (8035220 <_vfiprintf_r+0x90c>)
 80350e8:	a811      	add	r0, sp, #68	@ 0x44
 80350ea:	3d10      	subs	r5, #16
 80350ec:	4606      	mov	r6, r0
 80350ee:	e6b2      	b.n	8034e56 <_vfiprintf_r+0x542>
 80350f0:	4606      	mov	r6, r0
 80350f2:	e6ca      	b.n	8034e8a <_vfiprintf_r+0x576>
 80350f4:	2010      	movs	r0, #16
 80350f6:	4402      	add	r2, r0
 80350f8:	2b07      	cmp	r3, #7
 80350fa:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 80350fe:	6070      	str	r0, [r6, #4]
 8035100:	dd06      	ble.n	8035110 <_vfiprintf_r+0x7fc>
 8035102:	9800      	ldr	r0, [sp, #0]
 8035104:	aa0e      	add	r2, sp, #56	@ 0x38
 8035106:	4639      	mov	r1, r7
 8035108:	f7ff fbd2 	bl	80348b0 <__sprint_r>
 803510c:	bb58      	cbnz	r0, 8035166 <_vfiprintf_r+0x852>
 803510e:	a911      	add	r1, sp, #68	@ 0x44
 8035110:	3c10      	subs	r4, #16
 8035112:	460e      	mov	r6, r1
 8035114:	e6bd      	b.n	8034e92 <_vfiprintf_r+0x57e>
 8035116:	460e      	mov	r6, r1
 8035118:	e6d6      	b.n	8034ec8 <_vfiprintf_r+0x5b4>
 803511a:	9800      	ldr	r0, [sp, #0]
 803511c:	aa0e      	add	r2, sp, #56	@ 0x38
 803511e:	4639      	mov	r1, r7
 8035120:	f7ff fbc6 	bl	80348b0 <__sprint_r>
 8035124:	b9f8      	cbnz	r0, 8035166 <_vfiprintf_r+0x852>
 8035126:	ab11      	add	r3, sp, #68	@ 0x44
 8035128:	e6de      	b.n	8034ee8 <_vfiprintf_r+0x5d4>
 803512a:	9a02      	ldr	r2, [sp, #8]
 803512c:	9904      	ldr	r1, [sp, #16]
 803512e:	1a54      	subs	r4, r2, r1
 8035130:	2c00      	cmp	r4, #0
 8035132:	f77f aedd 	ble.w	8034ef0 <_vfiprintf_r+0x5dc>
 8035136:	4d39      	ldr	r5, [pc, #228]	@ (803521c <_vfiprintf_r+0x908>)
 8035138:	2610      	movs	r6, #16
 803513a:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 803513e:	2c10      	cmp	r4, #16
 8035140:	f102 0201 	add.w	r2, r2, #1
 8035144:	601d      	str	r5, [r3, #0]
 8035146:	dc1d      	bgt.n	8035184 <_vfiprintf_r+0x870>
 8035148:	605c      	str	r4, [r3, #4]
 803514a:	2a07      	cmp	r2, #7
 803514c:	440c      	add	r4, r1
 803514e:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 8035152:	f77f aecd 	ble.w	8034ef0 <_vfiprintf_r+0x5dc>
 8035156:	9800      	ldr	r0, [sp, #0]
 8035158:	aa0e      	add	r2, sp, #56	@ 0x38
 803515a:	4639      	mov	r1, r7
 803515c:	f7ff fba8 	bl	80348b0 <__sprint_r>
 8035160:	2800      	cmp	r0, #0
 8035162:	f43f aec5 	beq.w	8034ef0 <_vfiprintf_r+0x5dc>
 8035166:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8035168:	07d9      	lsls	r1, r3, #31
 803516a:	d405      	bmi.n	8035178 <_vfiprintf_r+0x864>
 803516c:	89bb      	ldrh	r3, [r7, #12]
 803516e:	059a      	lsls	r2, r3, #22
 8035170:	d402      	bmi.n	8035178 <_vfiprintf_r+0x864>
 8035172:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8035174:	f002 f877 	bl	8037266 <__retarget_lock_release_recursive>
 8035178:	89bb      	ldrh	r3, [r7, #12]
 803517a:	065b      	lsls	r3, r3, #25
 803517c:	f57f abfb 	bpl.w	8034976 <_vfiprintf_r+0x62>
 8035180:	f7ff bbf6 	b.w	8034970 <_vfiprintf_r+0x5c>
 8035184:	3110      	adds	r1, #16
 8035186:	2a07      	cmp	r2, #7
 8035188:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 803518c:	605e      	str	r6, [r3, #4]
 803518e:	dc02      	bgt.n	8035196 <_vfiprintf_r+0x882>
 8035190:	3308      	adds	r3, #8
 8035192:	3c10      	subs	r4, #16
 8035194:	e7d1      	b.n	803513a <_vfiprintf_r+0x826>
 8035196:	9800      	ldr	r0, [sp, #0]
 8035198:	aa0e      	add	r2, sp, #56	@ 0x38
 803519a:	4639      	mov	r1, r7
 803519c:	f7ff fb88 	bl	80348b0 <__sprint_r>
 80351a0:	2800      	cmp	r0, #0
 80351a2:	d1e0      	bne.n	8035166 <_vfiprintf_r+0x852>
 80351a4:	ab11      	add	r3, sp, #68	@ 0x44
 80351a6:	e7f4      	b.n	8035192 <_vfiprintf_r+0x87e>
 80351a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80351aa:	b913      	cbnz	r3, 80351b2 <_vfiprintf_r+0x89e>
 80351ac:	2300      	movs	r3, #0
 80351ae:	930f      	str	r3, [sp, #60]	@ 0x3c
 80351b0:	e7d9      	b.n	8035166 <_vfiprintf_r+0x852>
 80351b2:	9800      	ldr	r0, [sp, #0]
 80351b4:	aa0e      	add	r2, sp, #56	@ 0x38
 80351b6:	4639      	mov	r1, r7
 80351b8:	f7ff fb7a 	bl	80348b0 <__sprint_r>
 80351bc:	2800      	cmp	r0, #0
 80351be:	d0f5      	beq.n	80351ac <_vfiprintf_r+0x898>
 80351c0:	e7d1      	b.n	8035166 <_vfiprintf_r+0x852>
 80351c2:	ea54 0205 	orrs.w	r2, r4, r5
 80351c6:	f8cd a010 	str.w	sl, [sp, #16]
 80351ca:	f43f ada6 	beq.w	8034d1a <_vfiprintf_r+0x406>
 80351ce:	2b01      	cmp	r3, #1
 80351d0:	f43f aedf 	beq.w	8034f92 <_vfiprintf_r+0x67e>
 80351d4:	2b02      	cmp	r3, #2
 80351d6:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 80351da:	f43f af28 	beq.w	803502e <_vfiprintf_r+0x71a>
 80351de:	f004 0307 	and.w	r3, r4, #7
 80351e2:	08e4      	lsrs	r4, r4, #3
 80351e4:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 80351e8:	08ed      	lsrs	r5, r5, #3
 80351ea:	3330      	adds	r3, #48	@ 0x30
 80351ec:	ea54 0105 	orrs.w	r1, r4, r5
 80351f0:	464a      	mov	r2, r9
 80351f2:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80351f6:	d1f2      	bne.n	80351de <_vfiprintf_r+0x8ca>
 80351f8:	9904      	ldr	r1, [sp, #16]
 80351fa:	07c8      	lsls	r0, r1, #31
 80351fc:	d506      	bpl.n	803520c <_vfiprintf_r+0x8f8>
 80351fe:	2b30      	cmp	r3, #48	@ 0x30
 8035200:	d004      	beq.n	803520c <_vfiprintf_r+0x8f8>
 8035202:	2330      	movs	r3, #48	@ 0x30
 8035204:	f809 3c01 	strb.w	r3, [r9, #-1]
 8035208:	f1a2 0902 	sub.w	r9, r2, #2
 803520c:	ab3a      	add	r3, sp, #232	@ 0xe8
 803520e:	eba3 0309 	sub.w	r3, r3, r9
 8035212:	9c01      	ldr	r4, [sp, #4]
 8035214:	f8dd a010 	ldr.w	sl, [sp, #16]
 8035218:	9301      	str	r3, [sp, #4]
 803521a:	e5bb      	b.n	8034d94 <_vfiprintf_r+0x480>
 803521c:	08044800 	.word	0x08044800
 8035220:	080447f0 	.word	0x080447f0

08035224 <__sbprintf>:
 8035224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8035226:	461f      	mov	r7, r3
 8035228:	898b      	ldrh	r3, [r1, #12]
 803522a:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 803522e:	f023 0302 	bic.w	r3, r3, #2
 8035232:	f8ad 300c 	strh.w	r3, [sp, #12]
 8035236:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8035238:	9319      	str	r3, [sp, #100]	@ 0x64
 803523a:	89cb      	ldrh	r3, [r1, #14]
 803523c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8035240:	69cb      	ldr	r3, [r1, #28]
 8035242:	9307      	str	r3, [sp, #28]
 8035244:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8035246:	9309      	str	r3, [sp, #36]	@ 0x24
 8035248:	ab1a      	add	r3, sp, #104	@ 0x68
 803524a:	9300      	str	r3, [sp, #0]
 803524c:	9304      	str	r3, [sp, #16]
 803524e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8035252:	4615      	mov	r5, r2
 8035254:	4606      	mov	r6, r0
 8035256:	9302      	str	r3, [sp, #8]
 8035258:	9305      	str	r3, [sp, #20]
 803525a:	a816      	add	r0, sp, #88	@ 0x58
 803525c:	2300      	movs	r3, #0
 803525e:	460c      	mov	r4, r1
 8035260:	9306      	str	r3, [sp, #24]
 8035262:	f001 fffb 	bl	803725c <__retarget_lock_init_recursive>
 8035266:	462a      	mov	r2, r5
 8035268:	463b      	mov	r3, r7
 803526a:	4669      	mov	r1, sp
 803526c:	4630      	mov	r0, r6
 803526e:	f7ff fb51 	bl	8034914 <_vfiprintf_r>
 8035272:	1e05      	subs	r5, r0, #0
 8035274:	db07      	blt.n	8035286 <__sbprintf+0x62>
 8035276:	4669      	mov	r1, sp
 8035278:	4630      	mov	r0, r6
 803527a:	f000 f9d1 	bl	8035620 <_fflush_r>
 803527e:	2800      	cmp	r0, #0
 8035280:	bf18      	it	ne
 8035282:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 8035286:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 803528a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 803528c:	065b      	lsls	r3, r3, #25
 803528e:	bf42      	ittt	mi
 8035290:	89a3      	ldrhmi	r3, [r4, #12]
 8035292:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 8035296:	81a3      	strhmi	r3, [r4, #12]
 8035298:	f001 ffe1 	bl	803725e <__retarget_lock_close_recursive>
 803529c:	4628      	mov	r0, r5
 803529e:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 80352a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080352a4 <putchar>:
 80352a4:	4b02      	ldr	r3, [pc, #8]	@ (80352b0 <putchar+0xc>)
 80352a6:	4601      	mov	r1, r0
 80352a8:	6818      	ldr	r0, [r3, #0]
 80352aa:	6882      	ldr	r2, [r0, #8]
 80352ac:	f007 bacc 	b.w	803c848 <_putc_r>
 80352b0:	20000430 	.word	0x20000430

080352b4 <_puts_r>:
 80352b4:	b530      	push	{r4, r5, lr}
 80352b6:	4605      	mov	r5, r0
 80352b8:	b089      	sub	sp, #36	@ 0x24
 80352ba:	4608      	mov	r0, r1
 80352bc:	460c      	mov	r4, r1
 80352be:	f7da ffef 	bl	80102a0 <strlen>
 80352c2:	4b1e      	ldr	r3, [pc, #120]	@ (803533c <_puts_r+0x88>)
 80352c4:	9306      	str	r3, [sp, #24]
 80352c6:	2301      	movs	r3, #1
 80352c8:	e9cd 4004 	strd	r4, r0, [sp, #16]
 80352cc:	9307      	str	r3, [sp, #28]
 80352ce:	4418      	add	r0, r3
 80352d0:	ab04      	add	r3, sp, #16
 80352d2:	9301      	str	r3, [sp, #4]
 80352d4:	2302      	movs	r3, #2
 80352d6:	9302      	str	r3, [sp, #8]
 80352d8:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80352da:	68ac      	ldr	r4, [r5, #8]
 80352dc:	9003      	str	r0, [sp, #12]
 80352de:	b913      	cbnz	r3, 80352e6 <_puts_r+0x32>
 80352e0:	4628      	mov	r0, r5
 80352e2:	f000 fadf 	bl	80358a4 <__sinit>
 80352e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80352e8:	07db      	lsls	r3, r3, #31
 80352ea:	d405      	bmi.n	80352f8 <_puts_r+0x44>
 80352ec:	89a3      	ldrh	r3, [r4, #12]
 80352ee:	0598      	lsls	r0, r3, #22
 80352f0:	d402      	bmi.n	80352f8 <_puts_r+0x44>
 80352f2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80352f4:	f001 ffb5 	bl	8037262 <__retarget_lock_acquire_recursive>
 80352f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80352fc:	0499      	lsls	r1, r3, #18
 80352fe:	d406      	bmi.n	803530e <_puts_r+0x5a>
 8035300:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8035304:	81a3      	strh	r3, [r4, #12]
 8035306:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8035308:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 803530c:	6663      	str	r3, [r4, #100]	@ 0x64
 803530e:	4628      	mov	r0, r5
 8035310:	aa01      	add	r2, sp, #4
 8035312:	4621      	mov	r1, r4
 8035314:	f000 fb18 	bl	8035948 <__sfvwrite_r>
 8035318:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 803531a:	2800      	cmp	r0, #0
 803531c:	bf0c      	ite	eq
 803531e:	250a      	moveq	r5, #10
 8035320:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 8035324:	07da      	lsls	r2, r3, #31
 8035326:	d405      	bmi.n	8035334 <_puts_r+0x80>
 8035328:	89a3      	ldrh	r3, [r4, #12]
 803532a:	059b      	lsls	r3, r3, #22
 803532c:	d402      	bmi.n	8035334 <_puts_r+0x80>
 803532e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8035330:	f001 ff99 	bl	8037266 <__retarget_lock_release_recursive>
 8035334:	4628      	mov	r0, r5
 8035336:	b009      	add	sp, #36	@ 0x24
 8035338:	bd30      	pop	{r4, r5, pc}
 803533a:	bf00      	nop
 803533c:	0804479a 	.word	0x0804479a

08035340 <puts>:
 8035340:	4b02      	ldr	r3, [pc, #8]	@ (803534c <puts+0xc>)
 8035342:	4601      	mov	r1, r0
 8035344:	6818      	ldr	r0, [r3, #0]
 8035346:	f7ff bfb5 	b.w	80352b4 <_puts_r>
 803534a:	bf00      	nop
 803534c:	20000430 	.word	0x20000430

08035350 <srand>:
 8035350:	4b03      	ldr	r3, [pc, #12]	@ (8035360 <srand+0x10>)
 8035352:	681b      	ldr	r3, [r3, #0]
 8035354:	2200      	movs	r2, #0
 8035356:	f8c3 0098 	str.w	r0, [r3, #152]	@ 0x98
 803535a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 803535e:	4770      	bx	lr
 8035360:	20000430 	.word	0x20000430

08035364 <rand>:
 8035364:	4b0a      	ldr	r3, [pc, #40]	@ (8035390 <rand+0x2c>)
 8035366:	480b      	ldr	r0, [pc, #44]	@ (8035394 <rand+0x30>)
 8035368:	6819      	ldr	r1, [r3, #0]
 803536a:	4a0b      	ldr	r2, [pc, #44]	@ (8035398 <rand+0x34>)
 803536c:	f8d1 3098 	ldr.w	r3, [r1, #152]	@ 0x98
 8035370:	b510      	push	{r4, lr}
 8035372:	f8d1 409c 	ldr.w	r4, [r1, #156]	@ 0x9c
 8035376:	4358      	muls	r0, r3
 8035378:	fb02 0004 	mla	r0, r2, r4, r0
 803537c:	fba3 3202 	umull	r3, r2, r3, r2
 8035380:	3301      	adds	r3, #1
 8035382:	eb40 0002 	adc.w	r0, r0, r2
 8035386:	e9c1 3026 	strd	r3, r0, [r1, #152]	@ 0x98
 803538a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 803538e:	bd10      	pop	{r4, pc}
 8035390:	20000430 	.word	0x20000430
 8035394:	5851f42d 	.word	0x5851f42d
 8035398:	4c957f2d 	.word	0x4c957f2d

0803539c <snprintf>:
 803539c:	b40c      	push	{r2, r3}
 803539e:	b530      	push	{r4, r5, lr}
 80353a0:	4b17      	ldr	r3, [pc, #92]	@ (8035400 <snprintf+0x64>)
 80353a2:	1e0c      	subs	r4, r1, #0
 80353a4:	681d      	ldr	r5, [r3, #0]
 80353a6:	b09d      	sub	sp, #116	@ 0x74
 80353a8:	da08      	bge.n	80353bc <snprintf+0x20>
 80353aa:	238b      	movs	r3, #139	@ 0x8b
 80353ac:	602b      	str	r3, [r5, #0]
 80353ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80353b2:	b01d      	add	sp, #116	@ 0x74
 80353b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80353b8:	b002      	add	sp, #8
 80353ba:	4770      	bx	lr
 80353bc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80353c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80353c4:	bf14      	ite	ne
 80353c6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80353ca:	4623      	moveq	r3, r4
 80353cc:	9304      	str	r3, [sp, #16]
 80353ce:	9307      	str	r3, [sp, #28]
 80353d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80353d4:	9002      	str	r0, [sp, #8]
 80353d6:	9006      	str	r0, [sp, #24]
 80353d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80353dc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80353de:	ab21      	add	r3, sp, #132	@ 0x84
 80353e0:	a902      	add	r1, sp, #8
 80353e2:	4628      	mov	r0, r5
 80353e4:	9301      	str	r3, [sp, #4]
 80353e6:	f004 fe7b 	bl	803a0e0 <_svfprintf_r>
 80353ea:	1c43      	adds	r3, r0, #1
 80353ec:	bfbc      	itt	lt
 80353ee:	238b      	movlt	r3, #139	@ 0x8b
 80353f0:	602b      	strlt	r3, [r5, #0]
 80353f2:	2c00      	cmp	r4, #0
 80353f4:	d0dd      	beq.n	80353b2 <snprintf+0x16>
 80353f6:	9b02      	ldr	r3, [sp, #8]
 80353f8:	2200      	movs	r2, #0
 80353fa:	701a      	strb	r2, [r3, #0]
 80353fc:	e7d9      	b.n	80353b2 <snprintf+0x16>
 80353fe:	bf00      	nop
 8035400:	20000430 	.word	0x20000430

08035404 <_strtol_l.constprop.0>:
 8035404:	2b24      	cmp	r3, #36	@ 0x24
 8035406:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803540a:	4686      	mov	lr, r0
 803540c:	4690      	mov	r8, r2
 803540e:	d801      	bhi.n	8035414 <_strtol_l.constprop.0+0x10>
 8035410:	2b01      	cmp	r3, #1
 8035412:	d106      	bne.n	8035422 <_strtol_l.constprop.0+0x1e>
 8035414:	f001 fef0 	bl	80371f8 <__errno>
 8035418:	2316      	movs	r3, #22
 803541a:	6003      	str	r3, [r0, #0]
 803541c:	2000      	movs	r0, #0
 803541e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8035422:	4834      	ldr	r0, [pc, #208]	@ (80354f4 <_strtol_l.constprop.0+0xf0>)
 8035424:	460d      	mov	r5, r1
 8035426:	462a      	mov	r2, r5
 8035428:	f815 4b01 	ldrb.w	r4, [r5], #1
 803542c:	5d06      	ldrb	r6, [r0, r4]
 803542e:	f016 0608 	ands.w	r6, r6, #8
 8035432:	d1f8      	bne.n	8035426 <_strtol_l.constprop.0+0x22>
 8035434:	2c2d      	cmp	r4, #45	@ 0x2d
 8035436:	d12d      	bne.n	8035494 <_strtol_l.constprop.0+0x90>
 8035438:	782c      	ldrb	r4, [r5, #0]
 803543a:	2601      	movs	r6, #1
 803543c:	1c95      	adds	r5, r2, #2
 803543e:	f033 0210 	bics.w	r2, r3, #16
 8035442:	d109      	bne.n	8035458 <_strtol_l.constprop.0+0x54>
 8035444:	2c30      	cmp	r4, #48	@ 0x30
 8035446:	d12a      	bne.n	803549e <_strtol_l.constprop.0+0x9a>
 8035448:	782a      	ldrb	r2, [r5, #0]
 803544a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 803544e:	2a58      	cmp	r2, #88	@ 0x58
 8035450:	d125      	bne.n	803549e <_strtol_l.constprop.0+0x9a>
 8035452:	786c      	ldrb	r4, [r5, #1]
 8035454:	2310      	movs	r3, #16
 8035456:	3502      	adds	r5, #2
 8035458:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 803545c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8035460:	2200      	movs	r2, #0
 8035462:	fbbc f9f3 	udiv	r9, ip, r3
 8035466:	4610      	mov	r0, r2
 8035468:	fb03 ca19 	mls	sl, r3, r9, ip
 803546c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8035470:	2f09      	cmp	r7, #9
 8035472:	d81b      	bhi.n	80354ac <_strtol_l.constprop.0+0xa8>
 8035474:	463c      	mov	r4, r7
 8035476:	42a3      	cmp	r3, r4
 8035478:	dd27      	ble.n	80354ca <_strtol_l.constprop.0+0xc6>
 803547a:	1c57      	adds	r7, r2, #1
 803547c:	d007      	beq.n	803548e <_strtol_l.constprop.0+0x8a>
 803547e:	4581      	cmp	r9, r0
 8035480:	d320      	bcc.n	80354c4 <_strtol_l.constprop.0+0xc0>
 8035482:	d101      	bne.n	8035488 <_strtol_l.constprop.0+0x84>
 8035484:	45a2      	cmp	sl, r4
 8035486:	db1d      	blt.n	80354c4 <_strtol_l.constprop.0+0xc0>
 8035488:	fb00 4003 	mla	r0, r0, r3, r4
 803548c:	2201      	movs	r2, #1
 803548e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8035492:	e7eb      	b.n	803546c <_strtol_l.constprop.0+0x68>
 8035494:	2c2b      	cmp	r4, #43	@ 0x2b
 8035496:	bf04      	itt	eq
 8035498:	782c      	ldrbeq	r4, [r5, #0]
 803549a:	1c95      	addeq	r5, r2, #2
 803549c:	e7cf      	b.n	803543e <_strtol_l.constprop.0+0x3a>
 803549e:	2b00      	cmp	r3, #0
 80354a0:	d1da      	bne.n	8035458 <_strtol_l.constprop.0+0x54>
 80354a2:	2c30      	cmp	r4, #48	@ 0x30
 80354a4:	bf0c      	ite	eq
 80354a6:	2308      	moveq	r3, #8
 80354a8:	230a      	movne	r3, #10
 80354aa:	e7d5      	b.n	8035458 <_strtol_l.constprop.0+0x54>
 80354ac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80354b0:	2f19      	cmp	r7, #25
 80354b2:	d801      	bhi.n	80354b8 <_strtol_l.constprop.0+0xb4>
 80354b4:	3c37      	subs	r4, #55	@ 0x37
 80354b6:	e7de      	b.n	8035476 <_strtol_l.constprop.0+0x72>
 80354b8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80354bc:	2f19      	cmp	r7, #25
 80354be:	d804      	bhi.n	80354ca <_strtol_l.constprop.0+0xc6>
 80354c0:	3c57      	subs	r4, #87	@ 0x57
 80354c2:	e7d8      	b.n	8035476 <_strtol_l.constprop.0+0x72>
 80354c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80354c8:	e7e1      	b.n	803548e <_strtol_l.constprop.0+0x8a>
 80354ca:	1c53      	adds	r3, r2, #1
 80354cc:	d108      	bne.n	80354e0 <_strtol_l.constprop.0+0xdc>
 80354ce:	2322      	movs	r3, #34	@ 0x22
 80354d0:	f8ce 3000 	str.w	r3, [lr]
 80354d4:	4660      	mov	r0, ip
 80354d6:	f1b8 0f00 	cmp.w	r8, #0
 80354da:	d0a0      	beq.n	803541e <_strtol_l.constprop.0+0x1a>
 80354dc:	1e69      	subs	r1, r5, #1
 80354de:	e006      	b.n	80354ee <_strtol_l.constprop.0+0xea>
 80354e0:	b106      	cbz	r6, 80354e4 <_strtol_l.constprop.0+0xe0>
 80354e2:	4240      	negs	r0, r0
 80354e4:	f1b8 0f00 	cmp.w	r8, #0
 80354e8:	d099      	beq.n	803541e <_strtol_l.constprop.0+0x1a>
 80354ea:	2a00      	cmp	r2, #0
 80354ec:	d1f6      	bne.n	80354dc <_strtol_l.constprop.0+0xd8>
 80354ee:	f8c8 1000 	str.w	r1, [r8]
 80354f2:	e794      	b.n	803541e <_strtol_l.constprop.0+0x1a>
 80354f4:	08044b59 	.word	0x08044b59

080354f8 <_strtol_r>:
 80354f8:	f7ff bf84 	b.w	8035404 <_strtol_l.constprop.0>

080354fc <strtol>:
 80354fc:	4613      	mov	r3, r2
 80354fe:	460a      	mov	r2, r1
 8035500:	4601      	mov	r1, r0
 8035502:	4802      	ldr	r0, [pc, #8]	@ (803550c <strtol+0x10>)
 8035504:	6800      	ldr	r0, [r0, #0]
 8035506:	f7ff bf7d 	b.w	8035404 <_strtol_l.constprop.0>
 803550a:	bf00      	nop
 803550c:	20000430 	.word	0x20000430

08035510 <__sflush_r>:
 8035510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8035514:	4605      	mov	r5, r0
 8035516:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 803551a:	0706      	lsls	r6, r0, #28
 803551c:	460c      	mov	r4, r1
 803551e:	d457      	bmi.n	80355d0 <__sflush_r+0xc0>
 8035520:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 8035524:	818b      	strh	r3, [r1, #12]
 8035526:	684b      	ldr	r3, [r1, #4]
 8035528:	2b00      	cmp	r3, #0
 803552a:	dc02      	bgt.n	8035532 <__sflush_r+0x22>
 803552c:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 803552e:	2b00      	cmp	r3, #0
 8035530:	dd4c      	ble.n	80355cc <__sflush_r+0xbc>
 8035532:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8035534:	2e00      	cmp	r6, #0
 8035536:	d049      	beq.n	80355cc <__sflush_r+0xbc>
 8035538:	2300      	movs	r3, #0
 803553a:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 803553e:	682f      	ldr	r7, [r5, #0]
 8035540:	69e1      	ldr	r1, [r4, #28]
 8035542:	602b      	str	r3, [r5, #0]
 8035544:	d034      	beq.n	80355b0 <__sflush_r+0xa0>
 8035546:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8035548:	89a3      	ldrh	r3, [r4, #12]
 803554a:	0759      	lsls	r1, r3, #29
 803554c:	d505      	bpl.n	803555a <__sflush_r+0x4a>
 803554e:	6863      	ldr	r3, [r4, #4]
 8035550:	1ad2      	subs	r2, r2, r3
 8035552:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8035554:	b10b      	cbz	r3, 803555a <__sflush_r+0x4a>
 8035556:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8035558:	1ad2      	subs	r2, r2, r3
 803555a:	2300      	movs	r3, #0
 803555c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 803555e:	69e1      	ldr	r1, [r4, #28]
 8035560:	4628      	mov	r0, r5
 8035562:	47b0      	blx	r6
 8035564:	1c43      	adds	r3, r0, #1
 8035566:	d106      	bne.n	8035576 <__sflush_r+0x66>
 8035568:	682a      	ldr	r2, [r5, #0]
 803556a:	2a1d      	cmp	r2, #29
 803556c:	d848      	bhi.n	8035600 <__sflush_r+0xf0>
 803556e:	4b2b      	ldr	r3, [pc, #172]	@ (803561c <__sflush_r+0x10c>)
 8035570:	4113      	asrs	r3, r2
 8035572:	07de      	lsls	r6, r3, #31
 8035574:	d444      	bmi.n	8035600 <__sflush_r+0xf0>
 8035576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803557a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 803557e:	81a2      	strh	r2, [r4, #12]
 8035580:	2200      	movs	r2, #0
 8035582:	6062      	str	r2, [r4, #4]
 8035584:	04d9      	lsls	r1, r3, #19
 8035586:	6922      	ldr	r2, [r4, #16]
 8035588:	6022      	str	r2, [r4, #0]
 803558a:	d504      	bpl.n	8035596 <__sflush_r+0x86>
 803558c:	1c42      	adds	r2, r0, #1
 803558e:	d101      	bne.n	8035594 <__sflush_r+0x84>
 8035590:	682b      	ldr	r3, [r5, #0]
 8035592:	b903      	cbnz	r3, 8035596 <__sflush_r+0x86>
 8035594:	6520      	str	r0, [r4, #80]	@ 0x50
 8035596:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8035598:	602f      	str	r7, [r5, #0]
 803559a:	b1b9      	cbz	r1, 80355cc <__sflush_r+0xbc>
 803559c:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 80355a0:	4299      	cmp	r1, r3
 80355a2:	d002      	beq.n	80355aa <__sflush_r+0x9a>
 80355a4:	4628      	mov	r0, r5
 80355a6:	f002 fd61 	bl	803806c <_free_r>
 80355aa:	2300      	movs	r3, #0
 80355ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80355ae:	e00d      	b.n	80355cc <__sflush_r+0xbc>
 80355b0:	2301      	movs	r3, #1
 80355b2:	4628      	mov	r0, r5
 80355b4:	47b0      	blx	r6
 80355b6:	4602      	mov	r2, r0
 80355b8:	1c50      	adds	r0, r2, #1
 80355ba:	d1c5      	bne.n	8035548 <__sflush_r+0x38>
 80355bc:	682b      	ldr	r3, [r5, #0]
 80355be:	2b00      	cmp	r3, #0
 80355c0:	d0c2      	beq.n	8035548 <__sflush_r+0x38>
 80355c2:	2b1d      	cmp	r3, #29
 80355c4:	d001      	beq.n	80355ca <__sflush_r+0xba>
 80355c6:	2b16      	cmp	r3, #22
 80355c8:	d11a      	bne.n	8035600 <__sflush_r+0xf0>
 80355ca:	602f      	str	r7, [r5, #0]
 80355cc:	2000      	movs	r0, #0
 80355ce:	e01e      	b.n	803560e <__sflush_r+0xfe>
 80355d0:	690f      	ldr	r7, [r1, #16]
 80355d2:	2f00      	cmp	r7, #0
 80355d4:	d0fa      	beq.n	80355cc <__sflush_r+0xbc>
 80355d6:	0783      	lsls	r3, r0, #30
 80355d8:	680e      	ldr	r6, [r1, #0]
 80355da:	bf08      	it	eq
 80355dc:	694b      	ldreq	r3, [r1, #20]
 80355de:	600f      	str	r7, [r1, #0]
 80355e0:	bf18      	it	ne
 80355e2:	2300      	movne	r3, #0
 80355e4:	eba6 0807 	sub.w	r8, r6, r7
 80355e8:	608b      	str	r3, [r1, #8]
 80355ea:	f1b8 0f00 	cmp.w	r8, #0
 80355ee:	dded      	ble.n	80355cc <__sflush_r+0xbc>
 80355f0:	69e1      	ldr	r1, [r4, #28]
 80355f2:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 80355f4:	4643      	mov	r3, r8
 80355f6:	463a      	mov	r2, r7
 80355f8:	4628      	mov	r0, r5
 80355fa:	47b0      	blx	r6
 80355fc:	2800      	cmp	r0, #0
 80355fe:	dc08      	bgt.n	8035612 <__sflush_r+0x102>
 8035600:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8035604:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8035608:	81a3      	strh	r3, [r4, #12]
 803560a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 803560e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8035612:	4407      	add	r7, r0
 8035614:	eba8 0800 	sub.w	r8, r8, r0
 8035618:	e7e7      	b.n	80355ea <__sflush_r+0xda>
 803561a:	bf00      	nop
 803561c:	dfbffffe 	.word	0xdfbffffe

08035620 <_fflush_r>:
 8035620:	b538      	push	{r3, r4, r5, lr}
 8035622:	460c      	mov	r4, r1
 8035624:	4605      	mov	r5, r0
 8035626:	b118      	cbz	r0, 8035630 <_fflush_r+0x10>
 8035628:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 803562a:	b90b      	cbnz	r3, 8035630 <_fflush_r+0x10>
 803562c:	f000 f93a 	bl	80358a4 <__sinit>
 8035630:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8035634:	b1b8      	cbz	r0, 8035666 <_fflush_r+0x46>
 8035636:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8035638:	07db      	lsls	r3, r3, #31
 803563a:	d404      	bmi.n	8035646 <_fflush_r+0x26>
 803563c:	0581      	lsls	r1, r0, #22
 803563e:	d402      	bmi.n	8035646 <_fflush_r+0x26>
 8035640:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8035642:	f001 fe0e 	bl	8037262 <__retarget_lock_acquire_recursive>
 8035646:	4628      	mov	r0, r5
 8035648:	4621      	mov	r1, r4
 803564a:	f7ff ff61 	bl	8035510 <__sflush_r>
 803564e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8035650:	07da      	lsls	r2, r3, #31
 8035652:	4605      	mov	r5, r0
 8035654:	d405      	bmi.n	8035662 <_fflush_r+0x42>
 8035656:	89a3      	ldrh	r3, [r4, #12]
 8035658:	059b      	lsls	r3, r3, #22
 803565a:	d402      	bmi.n	8035662 <_fflush_r+0x42>
 803565c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 803565e:	f001 fe02 	bl	8037266 <__retarget_lock_release_recursive>
 8035662:	4628      	mov	r0, r5
 8035664:	bd38      	pop	{r3, r4, r5, pc}
 8035666:	4605      	mov	r5, r0
 8035668:	e7fb      	b.n	8035662 <_fflush_r+0x42>
	...

0803566c <sprintf>:
 803566c:	b40e      	push	{r1, r2, r3}
 803566e:	b500      	push	{lr}
 8035670:	b09c      	sub	sp, #112	@ 0x70
 8035672:	ab1d      	add	r3, sp, #116	@ 0x74
 8035674:	9002      	str	r0, [sp, #8]
 8035676:	9006      	str	r0, [sp, #24]
 8035678:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 803567c:	4809      	ldr	r0, [pc, #36]	@ (80356a4 <sprintf+0x38>)
 803567e:	9107      	str	r1, [sp, #28]
 8035680:	9104      	str	r1, [sp, #16]
 8035682:	4909      	ldr	r1, [pc, #36]	@ (80356a8 <sprintf+0x3c>)
 8035684:	f853 2b04 	ldr.w	r2, [r3], #4
 8035688:	9105      	str	r1, [sp, #20]
 803568a:	6800      	ldr	r0, [r0, #0]
 803568c:	9301      	str	r3, [sp, #4]
 803568e:	a902      	add	r1, sp, #8
 8035690:	f004 fd26 	bl	803a0e0 <_svfprintf_r>
 8035694:	9b02      	ldr	r3, [sp, #8]
 8035696:	2200      	movs	r2, #0
 8035698:	701a      	strb	r2, [r3, #0]
 803569a:	b01c      	add	sp, #112	@ 0x70
 803569c:	f85d eb04 	ldr.w	lr, [sp], #4
 80356a0:	b003      	add	sp, #12
 80356a2:	4770      	bx	lr
 80356a4:	20000430 	.word	0x20000430
 80356a8:	ffff0208 	.word	0xffff0208

080356ac <sscanf>:
 80356ac:	b40e      	push	{r1, r2, r3}
 80356ae:	b530      	push	{r4, r5, lr}
 80356b0:	b09c      	sub	sp, #112	@ 0x70
 80356b2:	ac1f      	add	r4, sp, #124	@ 0x7c
 80356b4:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80356b8:	f854 5b04 	ldr.w	r5, [r4], #4
 80356bc:	f8ad 2014 	strh.w	r2, [sp, #20]
 80356c0:	9002      	str	r0, [sp, #8]
 80356c2:	9006      	str	r0, [sp, #24]
 80356c4:	f7da fdec 	bl	80102a0 <strlen>
 80356c8:	4b0b      	ldr	r3, [pc, #44]	@ (80356f8 <sscanf+0x4c>)
 80356ca:	9003      	str	r0, [sp, #12]
 80356cc:	9007      	str	r0, [sp, #28]
 80356ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80356d0:	480a      	ldr	r0, [pc, #40]	@ (80356fc <sscanf+0x50>)
 80356d2:	9401      	str	r4, [sp, #4]
 80356d4:	2300      	movs	r3, #0
 80356d6:	930e      	str	r3, [sp, #56]	@ 0x38
 80356d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80356da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80356de:	f8ad 3016 	strh.w	r3, [sp, #22]
 80356e2:	462a      	mov	r2, r5
 80356e4:	4623      	mov	r3, r4
 80356e6:	a902      	add	r1, sp, #8
 80356e8:	6800      	ldr	r0, [r0, #0]
 80356ea:	f005 ff3b 	bl	803b564 <__ssvfscanf_r>
 80356ee:	b01c      	add	sp, #112	@ 0x70
 80356f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80356f4:	b003      	add	sp, #12
 80356f6:	4770      	bx	lr
 80356f8:	08035723 	.word	0x08035723
 80356fc:	20000430 	.word	0x20000430

08035700 <__sread>:
 8035700:	b510      	push	{r4, lr}
 8035702:	460c      	mov	r4, r1
 8035704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8035708:	f001 fd52 	bl	80371b0 <_read_r>
 803570c:	2800      	cmp	r0, #0
 803570e:	bfab      	itete	ge
 8035710:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 8035712:	89a3      	ldrhlt	r3, [r4, #12]
 8035714:	181b      	addge	r3, r3, r0
 8035716:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 803571a:	bfac      	ite	ge
 803571c:	6523      	strge	r3, [r4, #80]	@ 0x50
 803571e:	81a3      	strhlt	r3, [r4, #12]
 8035720:	bd10      	pop	{r4, pc}

08035722 <__seofread>:
 8035722:	2000      	movs	r0, #0
 8035724:	4770      	bx	lr

08035726 <__swrite>:
 8035726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803572a:	461f      	mov	r7, r3
 803572c:	898b      	ldrh	r3, [r1, #12]
 803572e:	05db      	lsls	r3, r3, #23
 8035730:	4605      	mov	r5, r0
 8035732:	460c      	mov	r4, r1
 8035734:	4616      	mov	r6, r2
 8035736:	d505      	bpl.n	8035744 <__swrite+0x1e>
 8035738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803573c:	2302      	movs	r3, #2
 803573e:	2200      	movs	r2, #0
 8035740:	f001 fd24 	bl	803718c <_lseek_r>
 8035744:	89a3      	ldrh	r3, [r4, #12]
 8035746:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 803574a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 803574e:	81a3      	strh	r3, [r4, #12]
 8035750:	4632      	mov	r2, r6
 8035752:	463b      	mov	r3, r7
 8035754:	4628      	mov	r0, r5
 8035756:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 803575a:	f001 bd3b 	b.w	80371d4 <_write_r>

0803575e <__sseek>:
 803575e:	b510      	push	{r4, lr}
 8035760:	460c      	mov	r4, r1
 8035762:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8035766:	f001 fd11 	bl	803718c <_lseek_r>
 803576a:	1c43      	adds	r3, r0, #1
 803576c:	89a3      	ldrh	r3, [r4, #12]
 803576e:	bf15      	itete	ne
 8035770:	6520      	strne	r0, [r4, #80]	@ 0x50
 8035772:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8035776:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 803577a:	81a3      	strheq	r3, [r4, #12]
 803577c:	bf18      	it	ne
 803577e:	81a3      	strhne	r3, [r4, #12]
 8035780:	bd10      	pop	{r4, pc}

08035782 <__sclose>:
 8035782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8035786:	f001 bcc5 	b.w	8037114 <_close_r>
	...

0803578c <std>:
 803578c:	2300      	movs	r3, #0
 803578e:	b510      	push	{r4, lr}
 8035790:	4604      	mov	r4, r0
 8035792:	e9c0 3300 	strd	r3, r3, [r0]
 8035796:	e9c0 3304 	strd	r3, r3, [r0, #16]
 803579a:	6083      	str	r3, [r0, #8]
 803579c:	8181      	strh	r1, [r0, #12]
 803579e:	6643      	str	r3, [r0, #100]	@ 0x64
 80357a0:	81c2      	strh	r2, [r0, #14]
 80357a2:	6183      	str	r3, [r0, #24]
 80357a4:	4619      	mov	r1, r3
 80357a6:	2208      	movs	r2, #8
 80357a8:	305c      	adds	r0, #92	@ 0x5c
 80357aa:	f000 fb21 	bl	8035df0 <memset>
 80357ae:	4b0d      	ldr	r3, [pc, #52]	@ (80357e4 <std+0x58>)
 80357b0:	6223      	str	r3, [r4, #32]
 80357b2:	4b0d      	ldr	r3, [pc, #52]	@ (80357e8 <std+0x5c>)
 80357b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80357b6:	4b0d      	ldr	r3, [pc, #52]	@ (80357ec <std+0x60>)
 80357b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80357ba:	4b0d      	ldr	r3, [pc, #52]	@ (80357f0 <std+0x64>)
 80357bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80357be:	4b0d      	ldr	r3, [pc, #52]	@ (80357f4 <std+0x68>)
 80357c0:	61e4      	str	r4, [r4, #28]
 80357c2:	429c      	cmp	r4, r3
 80357c4:	d006      	beq.n	80357d4 <std+0x48>
 80357c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80357ca:	4294      	cmp	r4, r2
 80357cc:	d002      	beq.n	80357d4 <std+0x48>
 80357ce:	33d0      	adds	r3, #208	@ 0xd0
 80357d0:	429c      	cmp	r4, r3
 80357d2:	d105      	bne.n	80357e0 <std+0x54>
 80357d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80357d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80357dc:	f001 bd3e 	b.w	803725c <__retarget_lock_init_recursive>
 80357e0:	bd10      	pop	{r4, pc}
 80357e2:	bf00      	nop
 80357e4:	08035701 	.word	0x08035701
 80357e8:	08035727 	.word	0x08035727
 80357ec:	0803575f 	.word	0x0803575f
 80357f0:	08035783 	.word	0x08035783
 80357f4:	20018178 	.word	0x20018178

080357f8 <stdio_exit_handler>:
 80357f8:	4a02      	ldr	r2, [pc, #8]	@ (8035804 <stdio_exit_handler+0xc>)
 80357fa:	4903      	ldr	r1, [pc, #12]	@ (8035808 <stdio_exit_handler+0x10>)
 80357fc:	4803      	ldr	r0, [pc, #12]	@ (803580c <stdio_exit_handler+0x14>)
 80357fe:	f000 b9ef 	b.w	8035be0 <_fwalk_sglue>
 8035802:	bf00      	nop
 8035804:	200002b0 	.word	0x200002b0
 8035808:	0803d1a1 	.word	0x0803d1a1
 803580c:	20000438 	.word	0x20000438

08035810 <cleanup_stdio>:
 8035810:	6841      	ldr	r1, [r0, #4]
 8035812:	4b0c      	ldr	r3, [pc, #48]	@ (8035844 <cleanup_stdio+0x34>)
 8035814:	4299      	cmp	r1, r3
 8035816:	b510      	push	{r4, lr}
 8035818:	4604      	mov	r4, r0
 803581a:	d001      	beq.n	8035820 <cleanup_stdio+0x10>
 803581c:	f007 fcc0 	bl	803d1a0 <_fclose_r>
 8035820:	68a1      	ldr	r1, [r4, #8]
 8035822:	4b09      	ldr	r3, [pc, #36]	@ (8035848 <cleanup_stdio+0x38>)
 8035824:	4299      	cmp	r1, r3
 8035826:	d002      	beq.n	803582e <cleanup_stdio+0x1e>
 8035828:	4620      	mov	r0, r4
 803582a:	f007 fcb9 	bl	803d1a0 <_fclose_r>
 803582e:	68e1      	ldr	r1, [r4, #12]
 8035830:	4b06      	ldr	r3, [pc, #24]	@ (803584c <cleanup_stdio+0x3c>)
 8035832:	4299      	cmp	r1, r3
 8035834:	d004      	beq.n	8035840 <cleanup_stdio+0x30>
 8035836:	4620      	mov	r0, r4
 8035838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 803583c:	f007 bcb0 	b.w	803d1a0 <_fclose_r>
 8035840:	bd10      	pop	{r4, pc}
 8035842:	bf00      	nop
 8035844:	20018178 	.word	0x20018178
 8035848:	200181e0 	.word	0x200181e0
 803584c:	20018248 	.word	0x20018248

08035850 <global_stdio_init.part.0>:
 8035850:	b510      	push	{r4, lr}
 8035852:	4b0b      	ldr	r3, [pc, #44]	@ (8035880 <global_stdio_init.part.0+0x30>)
 8035854:	4c0b      	ldr	r4, [pc, #44]	@ (8035884 <global_stdio_init.part.0+0x34>)
 8035856:	4a0c      	ldr	r2, [pc, #48]	@ (8035888 <global_stdio_init.part.0+0x38>)
 8035858:	601a      	str	r2, [r3, #0]
 803585a:	4620      	mov	r0, r4
 803585c:	2200      	movs	r2, #0
 803585e:	2104      	movs	r1, #4
 8035860:	f7ff ff94 	bl	803578c <std>
 8035864:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8035868:	2201      	movs	r2, #1
 803586a:	2109      	movs	r1, #9
 803586c:	f7ff ff8e 	bl	803578c <std>
 8035870:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8035874:	2202      	movs	r2, #2
 8035876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 803587a:	2112      	movs	r1, #18
 803587c:	f7ff bf86 	b.w	803578c <std>
 8035880:	200182b0 	.word	0x200182b0
 8035884:	20018178 	.word	0x20018178
 8035888:	080357f9 	.word	0x080357f9

0803588c <__sfp_lock_acquire>:
 803588c:	4801      	ldr	r0, [pc, #4]	@ (8035894 <__sfp_lock_acquire+0x8>)
 803588e:	f001 bce8 	b.w	8037262 <__retarget_lock_acquire_recursive>
 8035892:	bf00      	nop
 8035894:	200182e0 	.word	0x200182e0

08035898 <__sfp_lock_release>:
 8035898:	4801      	ldr	r0, [pc, #4]	@ (80358a0 <__sfp_lock_release+0x8>)
 803589a:	f001 bce4 	b.w	8037266 <__retarget_lock_release_recursive>
 803589e:	bf00      	nop
 80358a0:	200182e0 	.word	0x200182e0

080358a4 <__sinit>:
 80358a4:	b510      	push	{r4, lr}
 80358a6:	4604      	mov	r4, r0
 80358a8:	f7ff fff0 	bl	803588c <__sfp_lock_acquire>
 80358ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80358ae:	b11b      	cbz	r3, 80358b8 <__sinit+0x14>
 80358b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80358b4:	f7ff bff0 	b.w	8035898 <__sfp_lock_release>
 80358b8:	4b04      	ldr	r3, [pc, #16]	@ (80358cc <__sinit+0x28>)
 80358ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80358bc:	4b04      	ldr	r3, [pc, #16]	@ (80358d0 <__sinit+0x2c>)
 80358be:	681b      	ldr	r3, [r3, #0]
 80358c0:	2b00      	cmp	r3, #0
 80358c2:	d1f5      	bne.n	80358b0 <__sinit+0xc>
 80358c4:	f7ff ffc4 	bl	8035850 <global_stdio_init.part.0>
 80358c8:	e7f2      	b.n	80358b0 <__sinit+0xc>
 80358ca:	bf00      	nop
 80358cc:	08035811 	.word	0x08035811
 80358d0:	200182b0 	.word	0x200182b0

080358d4 <_vsnprintf_r>:
 80358d4:	b530      	push	{r4, r5, lr}
 80358d6:	4614      	mov	r4, r2
 80358d8:	2c00      	cmp	r4, #0
 80358da:	b09b      	sub	sp, #108	@ 0x6c
 80358dc:	4605      	mov	r5, r0
 80358de:	461a      	mov	r2, r3
 80358e0:	da05      	bge.n	80358ee <_vsnprintf_r+0x1a>
 80358e2:	238b      	movs	r3, #139	@ 0x8b
 80358e4:	6003      	str	r3, [r0, #0]
 80358e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80358ea:	b01b      	add	sp, #108	@ 0x6c
 80358ec:	bd30      	pop	{r4, r5, pc}
 80358ee:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80358f2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80358f6:	bf14      	ite	ne
 80358f8:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80358fc:	4623      	moveq	r3, r4
 80358fe:	9302      	str	r3, [sp, #8]
 8035900:	9305      	str	r3, [sp, #20]
 8035902:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8035906:	9100      	str	r1, [sp, #0]
 8035908:	9104      	str	r1, [sp, #16]
 803590a:	f8ad 300e 	strh.w	r3, [sp, #14]
 803590e:	4669      	mov	r1, sp
 8035910:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8035912:	f004 fbe5 	bl	803a0e0 <_svfprintf_r>
 8035916:	1c43      	adds	r3, r0, #1
 8035918:	bfbc      	itt	lt
 803591a:	238b      	movlt	r3, #139	@ 0x8b
 803591c:	602b      	strlt	r3, [r5, #0]
 803591e:	2c00      	cmp	r4, #0
 8035920:	d0e3      	beq.n	80358ea <_vsnprintf_r+0x16>
 8035922:	9b00      	ldr	r3, [sp, #0]
 8035924:	2200      	movs	r2, #0
 8035926:	701a      	strb	r2, [r3, #0]
 8035928:	e7df      	b.n	80358ea <_vsnprintf_r+0x16>
	...

0803592c <vsnprintf>:
 803592c:	b507      	push	{r0, r1, r2, lr}
 803592e:	9300      	str	r3, [sp, #0]
 8035930:	4613      	mov	r3, r2
 8035932:	460a      	mov	r2, r1
 8035934:	4601      	mov	r1, r0
 8035936:	4803      	ldr	r0, [pc, #12]	@ (8035944 <vsnprintf+0x18>)
 8035938:	6800      	ldr	r0, [r0, #0]
 803593a:	f7ff ffcb 	bl	80358d4 <_vsnprintf_r>
 803593e:	b003      	add	sp, #12
 8035940:	f85d fb04 	ldr.w	pc, [sp], #4
 8035944:	20000430 	.word	0x20000430

08035948 <__sfvwrite_r>:
 8035948:	6893      	ldr	r3, [r2, #8]
 803594a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803594e:	4606      	mov	r6, r0
 8035950:	460c      	mov	r4, r1
 8035952:	4691      	mov	r9, r2
 8035954:	b91b      	cbnz	r3, 803595e <__sfvwrite_r+0x16>
 8035956:	2000      	movs	r0, #0
 8035958:	b003      	add	sp, #12
 803595a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803595e:	898b      	ldrh	r3, [r1, #12]
 8035960:	0718      	lsls	r0, r3, #28
 8035962:	d550      	bpl.n	8035a06 <__sfvwrite_r+0xbe>
 8035964:	690b      	ldr	r3, [r1, #16]
 8035966:	2b00      	cmp	r3, #0
 8035968:	d04d      	beq.n	8035a06 <__sfvwrite_r+0xbe>
 803596a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803596e:	f8d9 8000 	ldr.w	r8, [r9]
 8035972:	f013 0702 	ands.w	r7, r3, #2
 8035976:	d16b      	bne.n	8035a50 <__sfvwrite_r+0x108>
 8035978:	f013 0301 	ands.w	r3, r3, #1
 803597c:	f000 809c 	beq.w	8035ab8 <__sfvwrite_r+0x170>
 8035980:	4638      	mov	r0, r7
 8035982:	46ba      	mov	sl, r7
 8035984:	46bb      	mov	fp, r7
 8035986:	f1bb 0f00 	cmp.w	fp, #0
 803598a:	f000 8103 	beq.w	8035b94 <__sfvwrite_r+0x24c>
 803598e:	b950      	cbnz	r0, 80359a6 <__sfvwrite_r+0x5e>
 8035990:	465a      	mov	r2, fp
 8035992:	210a      	movs	r1, #10
 8035994:	4650      	mov	r0, sl
 8035996:	f7da fc33 	bl	8010200 <memchr>
 803599a:	2800      	cmp	r0, #0
 803599c:	f000 8100 	beq.w	8035ba0 <__sfvwrite_r+0x258>
 80359a0:	3001      	adds	r0, #1
 80359a2:	eba0 070a 	sub.w	r7, r0, sl
 80359a6:	6820      	ldr	r0, [r4, #0]
 80359a8:	6921      	ldr	r1, [r4, #16]
 80359aa:	68a5      	ldr	r5, [r4, #8]
 80359ac:	6963      	ldr	r3, [r4, #20]
 80359ae:	455f      	cmp	r7, fp
 80359b0:	463a      	mov	r2, r7
 80359b2:	bf28      	it	cs
 80359b4:	465a      	movcs	r2, fp
 80359b6:	4288      	cmp	r0, r1
 80359b8:	f240 80f5 	bls.w	8035ba6 <__sfvwrite_r+0x25e>
 80359bc:	441d      	add	r5, r3
 80359be:	42aa      	cmp	r2, r5
 80359c0:	f340 80f1 	ble.w	8035ba6 <__sfvwrite_r+0x25e>
 80359c4:	4651      	mov	r1, sl
 80359c6:	462a      	mov	r2, r5
 80359c8:	f000 f9f8 	bl	8035dbc <memmove>
 80359cc:	6823      	ldr	r3, [r4, #0]
 80359ce:	442b      	add	r3, r5
 80359d0:	6023      	str	r3, [r4, #0]
 80359d2:	4621      	mov	r1, r4
 80359d4:	4630      	mov	r0, r6
 80359d6:	f7ff fe23 	bl	8035620 <_fflush_r>
 80359da:	2800      	cmp	r0, #0
 80359dc:	d167      	bne.n	8035aae <__sfvwrite_r+0x166>
 80359de:	1b7f      	subs	r7, r7, r5
 80359e0:	f040 80f9 	bne.w	8035bd6 <__sfvwrite_r+0x28e>
 80359e4:	4621      	mov	r1, r4
 80359e6:	4630      	mov	r0, r6
 80359e8:	f7ff fe1a 	bl	8035620 <_fflush_r>
 80359ec:	2800      	cmp	r0, #0
 80359ee:	d15e      	bne.n	8035aae <__sfvwrite_r+0x166>
 80359f0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80359f4:	1b5b      	subs	r3, r3, r5
 80359f6:	44aa      	add	sl, r5
 80359f8:	ebab 0b05 	sub.w	fp, fp, r5
 80359fc:	f8c9 3008 	str.w	r3, [r9, #8]
 8035a00:	2b00      	cmp	r3, #0
 8035a02:	d1c0      	bne.n	8035986 <__sfvwrite_r+0x3e>
 8035a04:	e7a7      	b.n	8035956 <__sfvwrite_r+0xe>
 8035a06:	4621      	mov	r1, r4
 8035a08:	4630      	mov	r0, r6
 8035a0a:	f000 f907 	bl	8035c1c <__swsetup_r>
 8035a0e:	2800      	cmp	r0, #0
 8035a10:	d0ab      	beq.n	803596a <__sfvwrite_r+0x22>
 8035a12:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8035a16:	e79f      	b.n	8035958 <__sfvwrite_r+0x10>
 8035a18:	e9d8 a500 	ldrd	sl, r5, [r8]
 8035a1c:	f108 0808 	add.w	r8, r8, #8
 8035a20:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8035a24:	69e1      	ldr	r1, [r4, #28]
 8035a26:	2d00      	cmp	r5, #0
 8035a28:	d0f6      	beq.n	8035a18 <__sfvwrite_r+0xd0>
 8035a2a:	42bd      	cmp	r5, r7
 8035a2c:	462b      	mov	r3, r5
 8035a2e:	4652      	mov	r2, sl
 8035a30:	bf28      	it	cs
 8035a32:	463b      	movcs	r3, r7
 8035a34:	4630      	mov	r0, r6
 8035a36:	47d8      	blx	fp
 8035a38:	2800      	cmp	r0, #0
 8035a3a:	dd38      	ble.n	8035aae <__sfvwrite_r+0x166>
 8035a3c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8035a40:	1a1b      	subs	r3, r3, r0
 8035a42:	4482      	add	sl, r0
 8035a44:	1a2d      	subs	r5, r5, r0
 8035a46:	f8c9 3008 	str.w	r3, [r9, #8]
 8035a4a:	2b00      	cmp	r3, #0
 8035a4c:	d1e8      	bne.n	8035a20 <__sfvwrite_r+0xd8>
 8035a4e:	e782      	b.n	8035956 <__sfvwrite_r+0xe>
 8035a50:	f04f 0a00 	mov.w	sl, #0
 8035a54:	4f61      	ldr	r7, [pc, #388]	@ (8035bdc <__sfvwrite_r+0x294>)
 8035a56:	4655      	mov	r5, sl
 8035a58:	e7e2      	b.n	8035a20 <__sfvwrite_r+0xd8>
 8035a5a:	e9d8 7a00 	ldrd	r7, sl, [r8]
 8035a5e:	f108 0808 	add.w	r8, r8, #8
 8035a62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8035a66:	6820      	ldr	r0, [r4, #0]
 8035a68:	68a2      	ldr	r2, [r4, #8]
 8035a6a:	f1ba 0f00 	cmp.w	sl, #0
 8035a6e:	d0f4      	beq.n	8035a5a <__sfvwrite_r+0x112>
 8035a70:	0599      	lsls	r1, r3, #22
 8035a72:	d563      	bpl.n	8035b3c <__sfvwrite_r+0x1f4>
 8035a74:	4552      	cmp	r2, sl
 8035a76:	d836      	bhi.n	8035ae6 <__sfvwrite_r+0x19e>
 8035a78:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 8035a7c:	d033      	beq.n	8035ae6 <__sfvwrite_r+0x19e>
 8035a7e:	6921      	ldr	r1, [r4, #16]
 8035a80:	6965      	ldr	r5, [r4, #20]
 8035a82:	eba0 0b01 	sub.w	fp, r0, r1
 8035a86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8035a8a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8035a8e:	f10b 0201 	add.w	r2, fp, #1
 8035a92:	106d      	asrs	r5, r5, #1
 8035a94:	4452      	add	r2, sl
 8035a96:	4295      	cmp	r5, r2
 8035a98:	bf38      	it	cc
 8035a9a:	4615      	movcc	r5, r2
 8035a9c:	055b      	lsls	r3, r3, #21
 8035a9e:	d53d      	bpl.n	8035b1c <__sfvwrite_r+0x1d4>
 8035aa0:	4629      	mov	r1, r5
 8035aa2:	4630      	mov	r0, r6
 8035aa4:	f002 fbfa 	bl	803829c <_malloc_r>
 8035aa8:	b948      	cbnz	r0, 8035abe <__sfvwrite_r+0x176>
 8035aaa:	230c      	movs	r3, #12
 8035aac:	6033      	str	r3, [r6, #0]
 8035aae:	89a3      	ldrh	r3, [r4, #12]
 8035ab0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8035ab4:	81a3      	strh	r3, [r4, #12]
 8035ab6:	e7ac      	b.n	8035a12 <__sfvwrite_r+0xca>
 8035ab8:	461f      	mov	r7, r3
 8035aba:	469a      	mov	sl, r3
 8035abc:	e7d1      	b.n	8035a62 <__sfvwrite_r+0x11a>
 8035abe:	465a      	mov	r2, fp
 8035ac0:	6921      	ldr	r1, [r4, #16]
 8035ac2:	9001      	str	r0, [sp, #4]
 8035ac4:	f001 fbd0 	bl	8037268 <memcpy>
 8035ac8:	89a2      	ldrh	r2, [r4, #12]
 8035aca:	9b01      	ldr	r3, [sp, #4]
 8035acc:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 8035ad0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8035ad4:	81a2      	strh	r2, [r4, #12]
 8035ad6:	6123      	str	r3, [r4, #16]
 8035ad8:	6165      	str	r5, [r4, #20]
 8035ada:	445b      	add	r3, fp
 8035adc:	eba5 050b 	sub.w	r5, r5, fp
 8035ae0:	6023      	str	r3, [r4, #0]
 8035ae2:	4652      	mov	r2, sl
 8035ae4:	60a5      	str	r5, [r4, #8]
 8035ae6:	4552      	cmp	r2, sl
 8035ae8:	bf28      	it	cs
 8035aea:	4652      	movcs	r2, sl
 8035aec:	6820      	ldr	r0, [r4, #0]
 8035aee:	9201      	str	r2, [sp, #4]
 8035af0:	4639      	mov	r1, r7
 8035af2:	f000 f963 	bl	8035dbc <memmove>
 8035af6:	68a3      	ldr	r3, [r4, #8]
 8035af8:	9a01      	ldr	r2, [sp, #4]
 8035afa:	1a9b      	subs	r3, r3, r2
 8035afc:	60a3      	str	r3, [r4, #8]
 8035afe:	6823      	ldr	r3, [r4, #0]
 8035b00:	4413      	add	r3, r2
 8035b02:	4655      	mov	r5, sl
 8035b04:	6023      	str	r3, [r4, #0]
 8035b06:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8035b0a:	1b5b      	subs	r3, r3, r5
 8035b0c:	442f      	add	r7, r5
 8035b0e:	ebaa 0a05 	sub.w	sl, sl, r5
 8035b12:	f8c9 3008 	str.w	r3, [r9, #8]
 8035b16:	2b00      	cmp	r3, #0
 8035b18:	d1a3      	bne.n	8035a62 <__sfvwrite_r+0x11a>
 8035b1a:	e71c      	b.n	8035956 <__sfvwrite_r+0xe>
 8035b1c:	462a      	mov	r2, r5
 8035b1e:	4630      	mov	r0, r6
 8035b20:	f007 fbcc 	bl	803d2bc <_realloc_r>
 8035b24:	4603      	mov	r3, r0
 8035b26:	2800      	cmp	r0, #0
 8035b28:	d1d5      	bne.n	8035ad6 <__sfvwrite_r+0x18e>
 8035b2a:	6921      	ldr	r1, [r4, #16]
 8035b2c:	4630      	mov	r0, r6
 8035b2e:	f002 fa9d 	bl	803806c <_free_r>
 8035b32:	89a3      	ldrh	r3, [r4, #12]
 8035b34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8035b38:	81a3      	strh	r3, [r4, #12]
 8035b3a:	e7b6      	b.n	8035aaa <__sfvwrite_r+0x162>
 8035b3c:	6923      	ldr	r3, [r4, #16]
 8035b3e:	4283      	cmp	r3, r0
 8035b40:	d302      	bcc.n	8035b48 <__sfvwrite_r+0x200>
 8035b42:	6961      	ldr	r1, [r4, #20]
 8035b44:	4551      	cmp	r1, sl
 8035b46:	d915      	bls.n	8035b74 <__sfvwrite_r+0x22c>
 8035b48:	4552      	cmp	r2, sl
 8035b4a:	bf28      	it	cs
 8035b4c:	4652      	movcs	r2, sl
 8035b4e:	4639      	mov	r1, r7
 8035b50:	4615      	mov	r5, r2
 8035b52:	f000 f933 	bl	8035dbc <memmove>
 8035b56:	68a3      	ldr	r3, [r4, #8]
 8035b58:	6822      	ldr	r2, [r4, #0]
 8035b5a:	1b5b      	subs	r3, r3, r5
 8035b5c:	442a      	add	r2, r5
 8035b5e:	60a3      	str	r3, [r4, #8]
 8035b60:	6022      	str	r2, [r4, #0]
 8035b62:	2b00      	cmp	r3, #0
 8035b64:	d1cf      	bne.n	8035b06 <__sfvwrite_r+0x1be>
 8035b66:	4621      	mov	r1, r4
 8035b68:	4630      	mov	r0, r6
 8035b6a:	f7ff fd59 	bl	8035620 <_fflush_r>
 8035b6e:	2800      	cmp	r0, #0
 8035b70:	d0c9      	beq.n	8035b06 <__sfvwrite_r+0x1be>
 8035b72:	e79c      	b.n	8035aae <__sfvwrite_r+0x166>
 8035b74:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8035b78:	4553      	cmp	r3, sl
 8035b7a:	bf28      	it	cs
 8035b7c:	4653      	movcs	r3, sl
 8035b7e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8035b80:	fb93 f3f1 	sdiv	r3, r3, r1
 8035b84:	463a      	mov	r2, r7
 8035b86:	434b      	muls	r3, r1
 8035b88:	4630      	mov	r0, r6
 8035b8a:	69e1      	ldr	r1, [r4, #28]
 8035b8c:	47a8      	blx	r5
 8035b8e:	1e05      	subs	r5, r0, #0
 8035b90:	dcb9      	bgt.n	8035b06 <__sfvwrite_r+0x1be>
 8035b92:	e78c      	b.n	8035aae <__sfvwrite_r+0x166>
 8035b94:	e9d8 ab00 	ldrd	sl, fp, [r8]
 8035b98:	2000      	movs	r0, #0
 8035b9a:	f108 0808 	add.w	r8, r8, #8
 8035b9e:	e6f2      	b.n	8035986 <__sfvwrite_r+0x3e>
 8035ba0:	f10b 0701 	add.w	r7, fp, #1
 8035ba4:	e6ff      	b.n	80359a6 <__sfvwrite_r+0x5e>
 8035ba6:	4293      	cmp	r3, r2
 8035ba8:	dc08      	bgt.n	8035bbc <__sfvwrite_r+0x274>
 8035baa:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8035bac:	69e1      	ldr	r1, [r4, #28]
 8035bae:	4652      	mov	r2, sl
 8035bb0:	4630      	mov	r0, r6
 8035bb2:	47a8      	blx	r5
 8035bb4:	1e05      	subs	r5, r0, #0
 8035bb6:	f73f af12 	bgt.w	80359de <__sfvwrite_r+0x96>
 8035bba:	e778      	b.n	8035aae <__sfvwrite_r+0x166>
 8035bbc:	4651      	mov	r1, sl
 8035bbe:	9201      	str	r2, [sp, #4]
 8035bc0:	f000 f8fc 	bl	8035dbc <memmove>
 8035bc4:	9a01      	ldr	r2, [sp, #4]
 8035bc6:	68a3      	ldr	r3, [r4, #8]
 8035bc8:	1a9b      	subs	r3, r3, r2
 8035bca:	60a3      	str	r3, [r4, #8]
 8035bcc:	6823      	ldr	r3, [r4, #0]
 8035bce:	4413      	add	r3, r2
 8035bd0:	6023      	str	r3, [r4, #0]
 8035bd2:	4615      	mov	r5, r2
 8035bd4:	e703      	b.n	80359de <__sfvwrite_r+0x96>
 8035bd6:	2001      	movs	r0, #1
 8035bd8:	e70a      	b.n	80359f0 <__sfvwrite_r+0xa8>
 8035bda:	bf00      	nop
 8035bdc:	7ffffc00 	.word	0x7ffffc00

08035be0 <_fwalk_sglue>:
 8035be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8035be4:	4607      	mov	r7, r0
 8035be6:	4688      	mov	r8, r1
 8035be8:	4614      	mov	r4, r2
 8035bea:	2600      	movs	r6, #0
 8035bec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8035bf0:	f1b9 0901 	subs.w	r9, r9, #1
 8035bf4:	d505      	bpl.n	8035c02 <_fwalk_sglue+0x22>
 8035bf6:	6824      	ldr	r4, [r4, #0]
 8035bf8:	2c00      	cmp	r4, #0
 8035bfa:	d1f7      	bne.n	8035bec <_fwalk_sglue+0xc>
 8035bfc:	4630      	mov	r0, r6
 8035bfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8035c02:	89ab      	ldrh	r3, [r5, #12]
 8035c04:	2b01      	cmp	r3, #1
 8035c06:	d907      	bls.n	8035c18 <_fwalk_sglue+0x38>
 8035c08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8035c0c:	3301      	adds	r3, #1
 8035c0e:	d003      	beq.n	8035c18 <_fwalk_sglue+0x38>
 8035c10:	4629      	mov	r1, r5
 8035c12:	4638      	mov	r0, r7
 8035c14:	47c0      	blx	r8
 8035c16:	4306      	orrs	r6, r0
 8035c18:	3568      	adds	r5, #104	@ 0x68
 8035c1a:	e7e9      	b.n	8035bf0 <_fwalk_sglue+0x10>

08035c1c <__swsetup_r>:
 8035c1c:	b538      	push	{r3, r4, r5, lr}
 8035c1e:	4b29      	ldr	r3, [pc, #164]	@ (8035cc4 <__swsetup_r+0xa8>)
 8035c20:	4605      	mov	r5, r0
 8035c22:	6818      	ldr	r0, [r3, #0]
 8035c24:	460c      	mov	r4, r1
 8035c26:	b118      	cbz	r0, 8035c30 <__swsetup_r+0x14>
 8035c28:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8035c2a:	b90b      	cbnz	r3, 8035c30 <__swsetup_r+0x14>
 8035c2c:	f7ff fe3a 	bl	80358a4 <__sinit>
 8035c30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8035c34:	0719      	lsls	r1, r3, #28
 8035c36:	d422      	bmi.n	8035c7e <__swsetup_r+0x62>
 8035c38:	06da      	lsls	r2, r3, #27
 8035c3a:	d407      	bmi.n	8035c4c <__swsetup_r+0x30>
 8035c3c:	2209      	movs	r2, #9
 8035c3e:	602a      	str	r2, [r5, #0]
 8035c40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8035c44:	81a3      	strh	r3, [r4, #12]
 8035c46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8035c4a:	e033      	b.n	8035cb4 <__swsetup_r+0x98>
 8035c4c:	0758      	lsls	r0, r3, #29
 8035c4e:	d512      	bpl.n	8035c76 <__swsetup_r+0x5a>
 8035c50:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8035c52:	b141      	cbz	r1, 8035c66 <__swsetup_r+0x4a>
 8035c54:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8035c58:	4299      	cmp	r1, r3
 8035c5a:	d002      	beq.n	8035c62 <__swsetup_r+0x46>
 8035c5c:	4628      	mov	r0, r5
 8035c5e:	f002 fa05 	bl	803806c <_free_r>
 8035c62:	2300      	movs	r3, #0
 8035c64:	6323      	str	r3, [r4, #48]	@ 0x30
 8035c66:	89a3      	ldrh	r3, [r4, #12]
 8035c68:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8035c6c:	81a3      	strh	r3, [r4, #12]
 8035c6e:	2300      	movs	r3, #0
 8035c70:	6063      	str	r3, [r4, #4]
 8035c72:	6923      	ldr	r3, [r4, #16]
 8035c74:	6023      	str	r3, [r4, #0]
 8035c76:	89a3      	ldrh	r3, [r4, #12]
 8035c78:	f043 0308 	orr.w	r3, r3, #8
 8035c7c:	81a3      	strh	r3, [r4, #12]
 8035c7e:	6923      	ldr	r3, [r4, #16]
 8035c80:	b94b      	cbnz	r3, 8035c96 <__swsetup_r+0x7a>
 8035c82:	89a3      	ldrh	r3, [r4, #12]
 8035c84:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8035c88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8035c8c:	d003      	beq.n	8035c96 <__swsetup_r+0x7a>
 8035c8e:	4621      	mov	r1, r4
 8035c90:	4628      	mov	r0, r5
 8035c92:	f005 fc2b 	bl	803b4ec <__smakebuf_r>
 8035c96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8035c9a:	f013 0201 	ands.w	r2, r3, #1
 8035c9e:	d00a      	beq.n	8035cb6 <__swsetup_r+0x9a>
 8035ca0:	2200      	movs	r2, #0
 8035ca2:	60a2      	str	r2, [r4, #8]
 8035ca4:	6962      	ldr	r2, [r4, #20]
 8035ca6:	4252      	negs	r2, r2
 8035ca8:	61a2      	str	r2, [r4, #24]
 8035caa:	6922      	ldr	r2, [r4, #16]
 8035cac:	b942      	cbnz	r2, 8035cc0 <__swsetup_r+0xa4>
 8035cae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8035cb2:	d1c5      	bne.n	8035c40 <__swsetup_r+0x24>
 8035cb4:	bd38      	pop	{r3, r4, r5, pc}
 8035cb6:	0799      	lsls	r1, r3, #30
 8035cb8:	bf58      	it	pl
 8035cba:	6962      	ldrpl	r2, [r4, #20]
 8035cbc:	60a2      	str	r2, [r4, #8]
 8035cbe:	e7f4      	b.n	8035caa <__swsetup_r+0x8e>
 8035cc0:	2000      	movs	r0, #0
 8035cc2:	e7f7      	b.n	8035cb4 <__swsetup_r+0x98>
 8035cc4:	20000430 	.word	0x20000430

08035cc8 <memcmp>:
 8035cc8:	b510      	push	{r4, lr}
 8035cca:	3901      	subs	r1, #1
 8035ccc:	4402      	add	r2, r0
 8035cce:	4290      	cmp	r0, r2
 8035cd0:	d101      	bne.n	8035cd6 <memcmp+0xe>
 8035cd2:	2000      	movs	r0, #0
 8035cd4:	e005      	b.n	8035ce2 <memcmp+0x1a>
 8035cd6:	7803      	ldrb	r3, [r0, #0]
 8035cd8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8035cdc:	42a3      	cmp	r3, r4
 8035cde:	d001      	beq.n	8035ce4 <memcmp+0x1c>
 8035ce0:	1b18      	subs	r0, r3, r4
 8035ce2:	bd10      	pop	{r4, pc}
 8035ce4:	3001      	adds	r0, #1
 8035ce6:	e7f2      	b.n	8035cce <memcmp+0x6>

08035ce8 <__fputwc>:
 8035ce8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8035cec:	4680      	mov	r8, r0
 8035cee:	460f      	mov	r7, r1
 8035cf0:	4614      	mov	r4, r2
 8035cf2:	f001 fa05 	bl	8037100 <__locale_mb_cur_max>
 8035cf6:	2801      	cmp	r0, #1
 8035cf8:	4605      	mov	r5, r0
 8035cfa:	d11b      	bne.n	8035d34 <__fputwc+0x4c>
 8035cfc:	1e7b      	subs	r3, r7, #1
 8035cfe:	2bfe      	cmp	r3, #254	@ 0xfe
 8035d00:	d818      	bhi.n	8035d34 <__fputwc+0x4c>
 8035d02:	f88d 7004 	strb.w	r7, [sp, #4]
 8035d06:	2600      	movs	r6, #0
 8035d08:	f10d 0904 	add.w	r9, sp, #4
 8035d0c:	42ae      	cmp	r6, r5
 8035d0e:	d021      	beq.n	8035d54 <__fputwc+0x6c>
 8035d10:	68a3      	ldr	r3, [r4, #8]
 8035d12:	f816 1009 	ldrb.w	r1, [r6, r9]
 8035d16:	3b01      	subs	r3, #1
 8035d18:	2b00      	cmp	r3, #0
 8035d1a:	60a3      	str	r3, [r4, #8]
 8035d1c:	da04      	bge.n	8035d28 <__fputwc+0x40>
 8035d1e:	69a2      	ldr	r2, [r4, #24]
 8035d20:	4293      	cmp	r3, r2
 8035d22:	db1b      	blt.n	8035d5c <__fputwc+0x74>
 8035d24:	290a      	cmp	r1, #10
 8035d26:	d019      	beq.n	8035d5c <__fputwc+0x74>
 8035d28:	6823      	ldr	r3, [r4, #0]
 8035d2a:	1c5a      	adds	r2, r3, #1
 8035d2c:	6022      	str	r2, [r4, #0]
 8035d2e:	7019      	strb	r1, [r3, #0]
 8035d30:	3601      	adds	r6, #1
 8035d32:	e7eb      	b.n	8035d0c <__fputwc+0x24>
 8035d34:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 8035d38:	463a      	mov	r2, r7
 8035d3a:	a901      	add	r1, sp, #4
 8035d3c:	4640      	mov	r0, r8
 8035d3e:	f001 faa1 	bl	8037284 <_wcrtomb_r>
 8035d42:	1c43      	adds	r3, r0, #1
 8035d44:	4605      	mov	r5, r0
 8035d46:	d1de      	bne.n	8035d06 <__fputwc+0x1e>
 8035d48:	89a3      	ldrh	r3, [r4, #12]
 8035d4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8035d4e:	81a3      	strh	r3, [r4, #12]
 8035d50:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8035d54:	4638      	mov	r0, r7
 8035d56:	b003      	add	sp, #12
 8035d58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8035d5c:	4622      	mov	r2, r4
 8035d5e:	4640      	mov	r0, r8
 8035d60:	f008 fb1d 	bl	803e39e <__swbuf_r>
 8035d64:	3001      	adds	r0, #1
 8035d66:	d1e3      	bne.n	8035d30 <__fputwc+0x48>
 8035d68:	e7f2      	b.n	8035d50 <__fputwc+0x68>

08035d6a <_fputwc_r>:
 8035d6a:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 8035d6c:	07db      	lsls	r3, r3, #31
 8035d6e:	b570      	push	{r4, r5, r6, lr}
 8035d70:	4605      	mov	r5, r0
 8035d72:	460e      	mov	r6, r1
 8035d74:	4614      	mov	r4, r2
 8035d76:	d405      	bmi.n	8035d84 <_fputwc_r+0x1a>
 8035d78:	8993      	ldrh	r3, [r2, #12]
 8035d7a:	0598      	lsls	r0, r3, #22
 8035d7c:	d402      	bmi.n	8035d84 <_fputwc_r+0x1a>
 8035d7e:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 8035d80:	f001 fa6f 	bl	8037262 <__retarget_lock_acquire_recursive>
 8035d84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8035d88:	0499      	lsls	r1, r3, #18
 8035d8a:	d406      	bmi.n	8035d9a <_fputwc_r+0x30>
 8035d8c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8035d90:	81a3      	strh	r3, [r4, #12]
 8035d92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8035d94:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8035d98:	6663      	str	r3, [r4, #100]	@ 0x64
 8035d9a:	4622      	mov	r2, r4
 8035d9c:	4628      	mov	r0, r5
 8035d9e:	4631      	mov	r1, r6
 8035da0:	f7ff ffa2 	bl	8035ce8 <__fputwc>
 8035da4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8035da6:	07da      	lsls	r2, r3, #31
 8035da8:	4605      	mov	r5, r0
 8035daa:	d405      	bmi.n	8035db8 <_fputwc_r+0x4e>
 8035dac:	89a3      	ldrh	r3, [r4, #12]
 8035dae:	059b      	lsls	r3, r3, #22
 8035db0:	d402      	bmi.n	8035db8 <_fputwc_r+0x4e>
 8035db2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8035db4:	f001 fa57 	bl	8037266 <__retarget_lock_release_recursive>
 8035db8:	4628      	mov	r0, r5
 8035dba:	bd70      	pop	{r4, r5, r6, pc}

08035dbc <memmove>:
 8035dbc:	4288      	cmp	r0, r1
 8035dbe:	b510      	push	{r4, lr}
 8035dc0:	eb01 0402 	add.w	r4, r1, r2
 8035dc4:	d902      	bls.n	8035dcc <memmove+0x10>
 8035dc6:	4284      	cmp	r4, r0
 8035dc8:	4623      	mov	r3, r4
 8035dca:	d807      	bhi.n	8035ddc <memmove+0x20>
 8035dcc:	1e43      	subs	r3, r0, #1
 8035dce:	42a1      	cmp	r1, r4
 8035dd0:	d008      	beq.n	8035de4 <memmove+0x28>
 8035dd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8035dd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8035dda:	e7f8      	b.n	8035dce <memmove+0x12>
 8035ddc:	4402      	add	r2, r0
 8035dde:	4601      	mov	r1, r0
 8035de0:	428a      	cmp	r2, r1
 8035de2:	d100      	bne.n	8035de6 <memmove+0x2a>
 8035de4:	bd10      	pop	{r4, pc}
 8035de6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8035dea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8035dee:	e7f7      	b.n	8035de0 <memmove+0x24>

08035df0 <memset>:
 8035df0:	4402      	add	r2, r0
 8035df2:	4603      	mov	r3, r0
 8035df4:	4293      	cmp	r3, r2
 8035df6:	d100      	bne.n	8035dfa <memset+0xa>
 8035df8:	4770      	bx	lr
 8035dfa:	f803 1b01 	strb.w	r1, [r3], #1
 8035dfe:	e7f9      	b.n	8035df4 <memset+0x4>

08035e00 <strcat>:
 8035e00:	b510      	push	{r4, lr}
 8035e02:	4602      	mov	r2, r0
 8035e04:	7814      	ldrb	r4, [r2, #0]
 8035e06:	4613      	mov	r3, r2
 8035e08:	3201      	adds	r2, #1
 8035e0a:	2c00      	cmp	r4, #0
 8035e0c:	d1fa      	bne.n	8035e04 <strcat+0x4>
 8035e0e:	3b01      	subs	r3, #1
 8035e10:	f811 2b01 	ldrb.w	r2, [r1], #1
 8035e14:	f803 2f01 	strb.w	r2, [r3, #1]!
 8035e18:	2a00      	cmp	r2, #0
 8035e1a:	d1f9      	bne.n	8035e10 <strcat+0x10>
 8035e1c:	bd10      	pop	{r4, pc}

08035e1e <strchr>:
 8035e1e:	b2c9      	uxtb	r1, r1
 8035e20:	4603      	mov	r3, r0
 8035e22:	4618      	mov	r0, r3
 8035e24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8035e28:	b112      	cbz	r2, 8035e30 <strchr+0x12>
 8035e2a:	428a      	cmp	r2, r1
 8035e2c:	d1f9      	bne.n	8035e22 <strchr+0x4>
 8035e2e:	4770      	bx	lr
 8035e30:	2900      	cmp	r1, #0
 8035e32:	bf18      	it	ne
 8035e34:	2000      	movne	r0, #0
 8035e36:	4770      	bx	lr

08035e38 <strcspn>:
 8035e38:	b570      	push	{r4, r5, r6, lr}
 8035e3a:	4603      	mov	r3, r0
 8035e3c:	461e      	mov	r6, r3
 8035e3e:	f813 4b01 	ldrb.w	r4, [r3], #1
 8035e42:	b144      	cbz	r4, 8035e56 <strcspn+0x1e>
 8035e44:	1e4a      	subs	r2, r1, #1
 8035e46:	e001      	b.n	8035e4c <strcspn+0x14>
 8035e48:	42a5      	cmp	r5, r4
 8035e4a:	d004      	beq.n	8035e56 <strcspn+0x1e>
 8035e4c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8035e50:	2d00      	cmp	r5, #0
 8035e52:	d1f9      	bne.n	8035e48 <strcspn+0x10>
 8035e54:	e7f2      	b.n	8035e3c <strcspn+0x4>
 8035e56:	1a30      	subs	r0, r6, r0
 8035e58:	bd70      	pop	{r4, r5, r6, pc}

08035e5a <strncmp>:
 8035e5a:	b510      	push	{r4, lr}
 8035e5c:	b16a      	cbz	r2, 8035e7a <strncmp+0x20>
 8035e5e:	3901      	subs	r1, #1
 8035e60:	1884      	adds	r4, r0, r2
 8035e62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8035e66:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8035e6a:	429a      	cmp	r2, r3
 8035e6c:	d103      	bne.n	8035e76 <strncmp+0x1c>
 8035e6e:	42a0      	cmp	r0, r4
 8035e70:	d001      	beq.n	8035e76 <strncmp+0x1c>
 8035e72:	2a00      	cmp	r2, #0
 8035e74:	d1f5      	bne.n	8035e62 <strncmp+0x8>
 8035e76:	1ad0      	subs	r0, r2, r3
 8035e78:	bd10      	pop	{r4, pc}
 8035e7a:	4610      	mov	r0, r2
 8035e7c:	e7fc      	b.n	8035e78 <strncmp+0x1e>

08035e7e <strncpy>:
 8035e7e:	b510      	push	{r4, lr}
 8035e80:	3901      	subs	r1, #1
 8035e82:	4603      	mov	r3, r0
 8035e84:	b132      	cbz	r2, 8035e94 <strncpy+0x16>
 8035e86:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8035e8a:	f803 4b01 	strb.w	r4, [r3], #1
 8035e8e:	3a01      	subs	r2, #1
 8035e90:	2c00      	cmp	r4, #0
 8035e92:	d1f7      	bne.n	8035e84 <strncpy+0x6>
 8035e94:	441a      	add	r2, r3
 8035e96:	2100      	movs	r1, #0
 8035e98:	4293      	cmp	r3, r2
 8035e9a:	d100      	bne.n	8035e9e <strncpy+0x20>
 8035e9c:	bd10      	pop	{r4, pc}
 8035e9e:	f803 1b01 	strb.w	r1, [r3], #1
 8035ea2:	e7f9      	b.n	8035e98 <strncpy+0x1a>

08035ea4 <strrchr>:
 8035ea4:	b538      	push	{r3, r4, r5, lr}
 8035ea6:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8035eaa:	4603      	mov	r3, r0
 8035eac:	d10e      	bne.n	8035ecc <strrchr+0x28>
 8035eae:	4621      	mov	r1, r4
 8035eb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8035eb4:	f7ff bfb3 	b.w	8035e1e <strchr>
 8035eb8:	1c43      	adds	r3, r0, #1
 8035eba:	4605      	mov	r5, r0
 8035ebc:	4621      	mov	r1, r4
 8035ebe:	4618      	mov	r0, r3
 8035ec0:	f7ff ffad 	bl	8035e1e <strchr>
 8035ec4:	2800      	cmp	r0, #0
 8035ec6:	d1f7      	bne.n	8035eb8 <strrchr+0x14>
 8035ec8:	4628      	mov	r0, r5
 8035eca:	bd38      	pop	{r3, r4, r5, pc}
 8035ecc:	2500      	movs	r5, #0
 8035ece:	e7f5      	b.n	8035ebc <strrchr+0x18>

08035ed0 <strspn>:
 8035ed0:	b570      	push	{r4, r5, r6, lr}
 8035ed2:	4603      	mov	r3, r0
 8035ed4:	461e      	mov	r6, r3
 8035ed6:	f813 4b01 	ldrb.w	r4, [r3], #1
 8035eda:	b13c      	cbz	r4, 8035eec <strspn+0x1c>
 8035edc:	1e4a      	subs	r2, r1, #1
 8035ede:	e001      	b.n	8035ee4 <strspn+0x14>
 8035ee0:	42a5      	cmp	r5, r4
 8035ee2:	d0f7      	beq.n	8035ed4 <strspn+0x4>
 8035ee4:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8035ee8:	2d00      	cmp	r5, #0
 8035eea:	d1f9      	bne.n	8035ee0 <strspn+0x10>
 8035eec:	1a30      	subs	r0, r6, r0
 8035eee:	bd70      	pop	{r4, r5, r6, pc}

08035ef0 <strstr>:
 8035ef0:	780a      	ldrb	r2, [r1, #0]
 8035ef2:	b570      	push	{r4, r5, r6, lr}
 8035ef4:	b96a      	cbnz	r2, 8035f12 <strstr+0x22>
 8035ef6:	bd70      	pop	{r4, r5, r6, pc}
 8035ef8:	429a      	cmp	r2, r3
 8035efa:	d109      	bne.n	8035f10 <strstr+0x20>
 8035efc:	460c      	mov	r4, r1
 8035efe:	4605      	mov	r5, r0
 8035f00:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8035f04:	2b00      	cmp	r3, #0
 8035f06:	d0f6      	beq.n	8035ef6 <strstr+0x6>
 8035f08:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8035f0c:	429e      	cmp	r6, r3
 8035f0e:	d0f7      	beq.n	8035f00 <strstr+0x10>
 8035f10:	3001      	adds	r0, #1
 8035f12:	7803      	ldrb	r3, [r0, #0]
 8035f14:	2b00      	cmp	r3, #0
 8035f16:	d1ef      	bne.n	8035ef8 <strstr+0x8>
 8035f18:	4618      	mov	r0, r3
 8035f1a:	e7ec      	b.n	8035ef6 <strstr+0x6>

08035f1c <localtime_r>:
 8035f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8035f20:	460c      	mov	r4, r1
 8035f22:	4680      	mov	r8, r0
 8035f24:	f008 fab6 	bl	803e494 <__gettzinfo>
 8035f28:	4621      	mov	r1, r4
 8035f2a:	4605      	mov	r5, r0
 8035f2c:	4640      	mov	r0, r8
 8035f2e:	f008 fab5 	bl	803e49c <gmtime_r>
 8035f32:	6943      	ldr	r3, [r0, #20]
 8035f34:	0799      	lsls	r1, r3, #30
 8035f36:	4604      	mov	r4, r0
 8035f38:	f203 776c 	addw	r7, r3, #1900	@ 0x76c
 8035f3c:	d106      	bne.n	8035f4c <localtime_r+0x30>
 8035f3e:	2264      	movs	r2, #100	@ 0x64
 8035f40:	fb97 f3f2 	sdiv	r3, r7, r2
 8035f44:	fb02 7313 	mls	r3, r2, r3, r7
 8035f48:	2b00      	cmp	r3, #0
 8035f4a:	d170      	bne.n	803602e <localtime_r+0x112>
 8035f4c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8035f50:	fb97 f3f2 	sdiv	r3, r7, r2
 8035f54:	fb02 7313 	mls	r3, r2, r3, r7
 8035f58:	fab3 f383 	clz	r3, r3
 8035f5c:	095b      	lsrs	r3, r3, #5
 8035f5e:	4e64      	ldr	r6, [pc, #400]	@ (80360f0 <localtime_r+0x1d4>)
 8035f60:	2230      	movs	r2, #48	@ 0x30
 8035f62:	fb02 6603 	mla	r6, r2, r3, r6
 8035f66:	f000 fe97 	bl	8036c98 <__tz_lock>
 8035f6a:	f000 fea1 	bl	8036cb0 <_tzset_unlocked>
 8035f6e:	4b61      	ldr	r3, [pc, #388]	@ (80360f4 <localtime_r+0x1d8>)
 8035f70:	681b      	ldr	r3, [r3, #0]
 8035f72:	2b00      	cmp	r3, #0
 8035f74:	d06a      	beq.n	803604c <localtime_r+0x130>
 8035f76:	686b      	ldr	r3, [r5, #4]
 8035f78:	42bb      	cmp	r3, r7
 8035f7a:	d15a      	bne.n	8036032 <localtime_r+0x116>
 8035f7c:	682f      	ldr	r7, [r5, #0]
 8035f7e:	e9d8 2300 	ldrd	r2, r3, [r8]
 8035f82:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8035f86:	2f00      	cmp	r7, #0
 8035f88:	d15b      	bne.n	8036042 <localtime_r+0x126>
 8035f8a:	4282      	cmp	r2, r0
 8035f8c:	eb73 0101 	sbcs.w	r1, r3, r1
 8035f90:	db5e      	blt.n	8036050 <localtime_r+0x134>
 8035f92:	2301      	movs	r3, #1
 8035f94:	6223      	str	r3, [r4, #32]
 8035f96:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8035f98:	6861      	ldr	r1, [r4, #4]
 8035f9a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8035f9e:	fb93 f0f2 	sdiv	r0, r3, r2
 8035fa2:	fb02 3310 	mls	r3, r2, r0, r3
 8035fa6:	223c      	movs	r2, #60	@ 0x3c
 8035fa8:	fb93 f5f2 	sdiv	r5, r3, r2
 8035fac:	fb02 3215 	mls	r2, r2, r5, r3
 8035fb0:	6823      	ldr	r3, [r4, #0]
 8035fb2:	1a9b      	subs	r3, r3, r2
 8035fb4:	68a2      	ldr	r2, [r4, #8]
 8035fb6:	6023      	str	r3, [r4, #0]
 8035fb8:	1b49      	subs	r1, r1, r5
 8035fba:	1a12      	subs	r2, r2, r0
 8035fbc:	2b3b      	cmp	r3, #59	@ 0x3b
 8035fbe:	6061      	str	r1, [r4, #4]
 8035fc0:	60a2      	str	r2, [r4, #8]
 8035fc2:	dd51      	ble.n	8036068 <localtime_r+0x14c>
 8035fc4:	3101      	adds	r1, #1
 8035fc6:	6061      	str	r1, [r4, #4]
 8035fc8:	3b3c      	subs	r3, #60	@ 0x3c
 8035fca:	6023      	str	r3, [r4, #0]
 8035fcc:	6863      	ldr	r3, [r4, #4]
 8035fce:	2b3b      	cmp	r3, #59	@ 0x3b
 8035fd0:	dd50      	ble.n	8036074 <localtime_r+0x158>
 8035fd2:	3201      	adds	r2, #1
 8035fd4:	60a2      	str	r2, [r4, #8]
 8035fd6:	3b3c      	subs	r3, #60	@ 0x3c
 8035fd8:	6063      	str	r3, [r4, #4]
 8035fda:	68a3      	ldr	r3, [r4, #8]
 8035fdc:	2b17      	cmp	r3, #23
 8035fde:	dd4f      	ble.n	8036080 <localtime_r+0x164>
 8035fe0:	69e2      	ldr	r2, [r4, #28]
 8035fe2:	3201      	adds	r2, #1
 8035fe4:	61e2      	str	r2, [r4, #28]
 8035fe6:	69a2      	ldr	r2, [r4, #24]
 8035fe8:	3201      	adds	r2, #1
 8035fea:	2a07      	cmp	r2, #7
 8035fec:	bfa8      	it	ge
 8035fee:	2200      	movge	r2, #0
 8035ff0:	61a2      	str	r2, [r4, #24]
 8035ff2:	68e2      	ldr	r2, [r4, #12]
 8035ff4:	3b18      	subs	r3, #24
 8035ff6:	3201      	adds	r2, #1
 8035ff8:	60a3      	str	r3, [r4, #8]
 8035ffa:	6923      	ldr	r3, [r4, #16]
 8035ffc:	60e2      	str	r2, [r4, #12]
 8035ffe:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8036002:	428a      	cmp	r2, r1
 8036004:	dd0e      	ble.n	8036024 <localtime_r+0x108>
 8036006:	2b0b      	cmp	r3, #11
 8036008:	eba2 0201 	sub.w	r2, r2, r1
 803600c:	60e2      	str	r2, [r4, #12]
 803600e:	f103 0201 	add.w	r2, r3, #1
 8036012:	bf09      	itett	eq
 8036014:	6963      	ldreq	r3, [r4, #20]
 8036016:	6122      	strne	r2, [r4, #16]
 8036018:	2200      	moveq	r2, #0
 803601a:	3301      	addeq	r3, #1
 803601c:	bf02      	ittt	eq
 803601e:	6122      	streq	r2, [r4, #16]
 8036020:	6163      	streq	r3, [r4, #20]
 8036022:	61e2      	streq	r2, [r4, #28]
 8036024:	f000 fe3e 	bl	8036ca4 <__tz_unlock>
 8036028:	4620      	mov	r0, r4
 803602a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803602e:	2301      	movs	r3, #1
 8036030:	e795      	b.n	8035f5e <localtime_r+0x42>
 8036032:	4638      	mov	r0, r7
 8036034:	f000 fd86 	bl	8036b44 <__tzcalc_limits>
 8036038:	2800      	cmp	r0, #0
 803603a:	d19f      	bne.n	8035f7c <localtime_r+0x60>
 803603c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8036040:	e004      	b.n	803604c <localtime_r+0x130>
 8036042:	4282      	cmp	r2, r0
 8036044:	eb73 0101 	sbcs.w	r1, r3, r1
 8036048:	da02      	bge.n	8036050 <localtime_r+0x134>
 803604a:	2300      	movs	r3, #0
 803604c:	6223      	str	r3, [r4, #32]
 803604e:	e009      	b.n	8036064 <localtime_r+0x148>
 8036050:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 8036054:	4282      	cmp	r2, r0
 8036056:	418b      	sbcs	r3, r1
 8036058:	bfb4      	ite	lt
 803605a:	2301      	movlt	r3, #1
 803605c:	2300      	movge	r3, #0
 803605e:	6223      	str	r3, [r4, #32]
 8036060:	2b00      	cmp	r3, #0
 8036062:	d198      	bne.n	8035f96 <localtime_r+0x7a>
 8036064:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8036066:	e797      	b.n	8035f98 <localtime_r+0x7c>
 8036068:	2b00      	cmp	r3, #0
 803606a:	daaf      	bge.n	8035fcc <localtime_r+0xb0>
 803606c:	3901      	subs	r1, #1
 803606e:	6061      	str	r1, [r4, #4]
 8036070:	333c      	adds	r3, #60	@ 0x3c
 8036072:	e7aa      	b.n	8035fca <localtime_r+0xae>
 8036074:	2b00      	cmp	r3, #0
 8036076:	dab0      	bge.n	8035fda <localtime_r+0xbe>
 8036078:	3a01      	subs	r2, #1
 803607a:	60a2      	str	r2, [r4, #8]
 803607c:	333c      	adds	r3, #60	@ 0x3c
 803607e:	e7ab      	b.n	8035fd8 <localtime_r+0xbc>
 8036080:	2b00      	cmp	r3, #0
 8036082:	dacf      	bge.n	8036024 <localtime_r+0x108>
 8036084:	69e2      	ldr	r2, [r4, #28]
 8036086:	3a01      	subs	r2, #1
 8036088:	61e2      	str	r2, [r4, #28]
 803608a:	69a2      	ldr	r2, [r4, #24]
 803608c:	3a01      	subs	r2, #1
 803608e:	bf48      	it	mi
 8036090:	2206      	movmi	r2, #6
 8036092:	61a2      	str	r2, [r4, #24]
 8036094:	68e2      	ldr	r2, [r4, #12]
 8036096:	3318      	adds	r3, #24
 8036098:	3a01      	subs	r2, #1
 803609a:	60e2      	str	r2, [r4, #12]
 803609c:	60a3      	str	r3, [r4, #8]
 803609e:	2a00      	cmp	r2, #0
 80360a0:	d1c0      	bne.n	8036024 <localtime_r+0x108>
 80360a2:	6923      	ldr	r3, [r4, #16]
 80360a4:	3b01      	subs	r3, #1
 80360a6:	d405      	bmi.n	80360b4 <localtime_r+0x198>
 80360a8:	6123      	str	r3, [r4, #16]
 80360aa:	6923      	ldr	r3, [r4, #16]
 80360ac:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80360b0:	60e3      	str	r3, [r4, #12]
 80360b2:	e7b7      	b.n	8036024 <localtime_r+0x108>
 80360b4:	230b      	movs	r3, #11
 80360b6:	6123      	str	r3, [r4, #16]
 80360b8:	6963      	ldr	r3, [r4, #20]
 80360ba:	1e5a      	subs	r2, r3, #1
 80360bc:	6162      	str	r2, [r4, #20]
 80360be:	0792      	lsls	r2, r2, #30
 80360c0:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 80360c4:	d105      	bne.n	80360d2 <localtime_r+0x1b6>
 80360c6:	2164      	movs	r1, #100	@ 0x64
 80360c8:	fb93 f2f1 	sdiv	r2, r3, r1
 80360cc:	fb01 3212 	mls	r2, r1, r2, r3
 80360d0:	b962      	cbnz	r2, 80360ec <localtime_r+0x1d0>
 80360d2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80360d6:	fb93 f1f2 	sdiv	r1, r3, r2
 80360da:	fb02 3311 	mls	r3, r2, r1, r3
 80360de:	fab3 f383 	clz	r3, r3
 80360e2:	095b      	lsrs	r3, r3, #5
 80360e4:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80360e8:	61e3      	str	r3, [r4, #28]
 80360ea:	e7de      	b.n	80360aa <localtime_r+0x18e>
 80360ec:	2301      	movs	r3, #1
 80360ee:	e7f9      	b.n	80360e4 <localtime_r+0x1c8>
 80360f0:	08044810 	.word	0x08044810
 80360f4:	200182d4 	.word	0x200182d4

080360f8 <iso_year_adjust>:
 80360f8:	6942      	ldr	r2, [r0, #20]
 80360fa:	2a00      	cmp	r2, #0
 80360fc:	f240 736c 	movw	r3, #1900	@ 0x76c
 8036100:	bfa8      	it	ge
 8036102:	f06f 0363 	mvnge.w	r3, #99	@ 0x63
 8036106:	4413      	add	r3, r2
 8036108:	0792      	lsls	r2, r2, #30
 803610a:	d105      	bne.n	8036118 <iso_year_adjust+0x20>
 803610c:	2164      	movs	r1, #100	@ 0x64
 803610e:	fb93 f2f1 	sdiv	r2, r3, r1
 8036112:	fb01 3212 	mls	r2, r1, r2, r3
 8036116:	b9ca      	cbnz	r2, 803614c <iso_year_adjust+0x54>
 8036118:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 803611c:	fb93 f1f2 	sdiv	r1, r3, r2
 8036120:	fb02 3311 	mls	r3, r2, r1, r3
 8036124:	fab3 f383 	clz	r3, r3
 8036128:	095b      	lsrs	r3, r3, #5
 803612a:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 803612e:	0040      	lsls	r0, r0, #1
 8036130:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8036134:	4418      	add	r0, r3
 8036136:	f241 63a2 	movw	r3, #5794	@ 0x16a2
 803613a:	4298      	cmp	r0, r3
 803613c:	d027      	beq.n	803618e <iso_year_adjust+0x96>
 803613e:	dc11      	bgt.n	8036164 <iso_year_adjust+0x6c>
 8036140:	2801      	cmp	r0, #1
 8036142:	dc0a      	bgt.n	803615a <iso_year_adjust+0x62>
 8036144:	43c0      	mvns	r0, r0
 8036146:	0fc0      	lsrs	r0, r0, #31
 8036148:	4240      	negs	r0, r0
 803614a:	4770      	bx	lr
 803614c:	2301      	movs	r3, #1
 803614e:	e7ec      	b.n	803612a <iso_year_adjust+0x32>
 8036150:	4b10      	ldr	r3, [pc, #64]	@ (8036194 <iso_year_adjust+0x9c>)
 8036152:	40c3      	lsrs	r3, r0
 8036154:	f343 0000 	sbfx	r0, r3, #0, #1
 8036158:	4770      	bx	lr
 803615a:	380a      	subs	r0, #10
 803615c:	2817      	cmp	r0, #23
 803615e:	d9f7      	bls.n	8036150 <iso_year_adjust+0x58>
 8036160:	2000      	movs	r0, #0
 8036162:	4770      	bx	lr
 8036164:	f241 63b4 	movw	r3, #5812	@ 0x16b4
 8036168:	4298      	cmp	r0, r3
 803616a:	dc06      	bgt.n	803617a <iso_year_adjust+0x82>
 803616c:	f241 63b1 	movw	r3, #5809	@ 0x16b1
 8036170:	4298      	cmp	r0, r3
 8036172:	bfd4      	ite	le
 8036174:	2000      	movle	r0, #0
 8036176:	2001      	movgt	r0, #1
 8036178:	4770      	bx	lr
 803617a:	f5a0 50b6 	sub.w	r0, r0, #5824	@ 0x16c0
 803617e:	3802      	subs	r0, #2
 8036180:	2815      	cmp	r0, #21
 8036182:	d8ed      	bhi.n	8036160 <iso_year_adjust+0x68>
 8036184:	4b04      	ldr	r3, [pc, #16]	@ (8036198 <iso_year_adjust+0xa0>)
 8036186:	40c3      	lsrs	r3, r0
 8036188:	f003 0001 	and.w	r0, r3, #1
 803618c:	4770      	bx	lr
 803618e:	2001      	movs	r0, #1
 8036190:	4770      	bx	lr
 8036192:	bf00      	nop
 8036194:	00cc00cf 	.word	0x00cc00cf
 8036198:	002a001f 	.word	0x002a001f

0803619c <__strftime.isra.0>:
 803619c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80361a0:	b08f      	sub	sp, #60	@ 0x3c
 80361a2:	461e      	mov	r6, r3
 80361a4:	2300      	movs	r3, #0
 80361a6:	4607      	mov	r7, r0
 80361a8:	460d      	mov	r5, r1
 80361aa:	9302      	str	r3, [sp, #8]
 80361ac:	461c      	mov	r4, r3
 80361ae:	7813      	ldrb	r3, [r2, #0]
 80361b0:	2b00      	cmp	r3, #0
 80361b2:	f000 84ae 	beq.w	8036b12 <__strftime.isra.0+0x976>
 80361b6:	2b25      	cmp	r3, #37	@ 0x25
 80361b8:	d11f      	bne.n	80361fa <__strftime.isra.0+0x5e>
 80361ba:	f892 9001 	ldrb.w	r9, [r2, #1]
 80361be:	f1b9 0f30 	cmp.w	r9, #48	@ 0x30
 80361c2:	d024      	beq.n	803620e <__strftime.isra.0+0x72>
 80361c4:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 80361c8:	d021      	beq.n	803620e <__strftime.isra.0+0x72>
 80361ca:	f102 0801 	add.w	r8, r2, #1
 80361ce:	f04f 0900 	mov.w	r9, #0
 80361d2:	f898 2000 	ldrb.w	r2, [r8]
 80361d6:	3a31      	subs	r2, #49	@ 0x31
 80361d8:	2a08      	cmp	r2, #8
 80361da:	d81b      	bhi.n	8036214 <__strftime.isra.0+0x78>
 80361dc:	220a      	movs	r2, #10
 80361de:	4640      	mov	r0, r8
 80361e0:	a906      	add	r1, sp, #24
 80361e2:	f008 f88b 	bl	803e2fc <strtoul>
 80361e6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80361ea:	4602      	mov	r2, r0
 80361ec:	f898 1000 	ldrb.w	r1, [r8]
 80361f0:	2945      	cmp	r1, #69	@ 0x45
 80361f2:	d111      	bne.n	8036218 <__strftime.isra.0+0x7c>
 80361f4:	f108 0801 	add.w	r8, r8, #1
 80361f8:	e010      	b.n	803621c <__strftime.isra.0+0x80>
 80361fa:	1e69      	subs	r1, r5, #1
 80361fc:	42a1      	cmp	r1, r4
 80361fe:	f240 815d 	bls.w	80364bc <__strftime.isra.0+0x320>
 8036202:	553b      	strb	r3, [r7, r4]
 8036204:	3201      	adds	r2, #1
 8036206:	f104 0a01 	add.w	sl, r4, #1
 803620a:	4654      	mov	r4, sl
 803620c:	e7cf      	b.n	80361ae <__strftime.isra.0+0x12>
 803620e:	f102 0802 	add.w	r8, r2, #2
 8036212:	e7de      	b.n	80361d2 <__strftime.isra.0+0x36>
 8036214:	2200      	movs	r2, #0
 8036216:	e7e9      	b.n	80361ec <__strftime.isra.0+0x50>
 8036218:	294f      	cmp	r1, #79	@ 0x4f
 803621a:	d0eb      	beq.n	80361f4 <__strftime.isra.0+0x58>
 803621c:	f898 0000 	ldrb.w	r0, [r8]
 8036220:	f1a0 0125 	sub.w	r1, r0, #37	@ 0x25
 8036224:	2955      	cmp	r1, #85	@ 0x55
 8036226:	f200 8149 	bhi.w	80364bc <__strftime.isra.0+0x320>
 803622a:	e8df f011 	tbh	[pc, r1, lsl #1]
 803622e:	046a      	.short	0x046a
 8036230:	01470147 	.word	0x01470147
 8036234:	01470147 	.word	0x01470147
 8036238:	01470147 	.word	0x01470147
 803623c:	01470147 	.word	0x01470147
 8036240:	01470147 	.word	0x01470147
 8036244:	01470147 	.word	0x01470147
 8036248:	01470147 	.word	0x01470147
 803624c:	01470147 	.word	0x01470147
 8036250:	01470147 	.word	0x01470147
 8036254:	01470147 	.word	0x01470147
 8036258:	01470147 	.word	0x01470147
 803625c:	01470147 	.word	0x01470147
 8036260:	01470147 	.word	0x01470147
 8036264:	00750147 	.word	0x00750147
 8036268:	00dc00a3 	.word	0x00dc00a3
 803626c:	01470128 	.word	0x01470128
 8036270:	01cb0159 	.word	0x01cb0159
 8036274:	02590252 	.word	0x02590252
 8036278:	01470147 	.word	0x01470147
 803627c:	02710147 	.word	0x02710147
 8036280:	01470147 	.word	0x01470147
 8036284:	0147027c 	.word	0x0147027c
 8036288:	033402ac 	.word	0x033402ac
 803628c:	036a033e 	.word	0x036a033e
 8036290:	03d80372 	.word	0x03d80372
 8036294:	03ee00d8 	.word	0x03ee00d8
 8036298:	01470440 	.word	0x01470440
 803629c:	01470147 	.word	0x01470147
 80362a0:	01470147 	.word	0x01470147
 80362a4:	00560147 	.word	0x00560147
 80362a8:	00ba008d 	.word	0x00ba008d
 80362ac:	011d011d 	.word	0x011d011d
 80362b0:	017e0147 	.word	0x017e0147
 80362b4:	0147008d 	.word	0x0147008d
 80362b8:	0252026a 	.word	0x0252026a
 80362bc:	026e0259 	.word	0x026e0259
 80362c0:	01470273 	.word	0x01470273
 80362c4:	02a5027c 	.word	0x02a5027c
 80362c8:	02b500d0 	.word	0x02b500d0
 80362cc:	035d0336 	.word	0x035d0336
 80362d0:	03cf03a4 	.word	0x03cf03a4
 80362d4:	03e000d4 	.word	0x03e000d4
 80362d8:	0403      	.short	0x0403
 80362da:	69b3      	ldr	r3, [r6, #24]
 80362dc:	4aad      	ldr	r2, [pc, #692]	@ (8036594 <__strftime.isra.0+0x3f8>)
 80362de:	3318      	adds	r3, #24
 80362e0:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 80362e4:	4658      	mov	r0, fp
 80362e6:	f7d9 ffdb 	bl	80102a0 <strlen>
 80362ea:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80362ee:	eb04 0a00 	add.w	sl, r4, r0
 80362f2:	1e6b      	subs	r3, r5, #1
 80362f4:	45a2      	cmp	sl, r4
 80362f6:	d107      	bne.n	8036308 <__strftime.isra.0+0x16c>
 80362f8:	f898 3000 	ldrb.w	r3, [r8]
 80362fc:	2b00      	cmp	r3, #0
 80362fe:	f000 8409 	beq.w	8036b14 <__strftime.isra.0+0x978>
 8036302:	f108 0201 	add.w	r2, r8, #1
 8036306:	e780      	b.n	803620a <__strftime.isra.0+0x6e>
 8036308:	42a3      	cmp	r3, r4
 803630a:	f240 80d7 	bls.w	80364bc <__strftime.isra.0+0x320>
 803630e:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 8036312:	553a      	strb	r2, [r7, r4]
 8036314:	3401      	adds	r4, #1
 8036316:	e7ed      	b.n	80362f4 <__strftime.isra.0+0x158>
 8036318:	69b2      	ldr	r2, [r6, #24]
 803631a:	4b9e      	ldr	r3, [pc, #632]	@ (8036594 <__strftime.isra.0+0x3f8>)
 803631c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8036320:	f8d3 b07c 	ldr.w	fp, [r3, #124]	@ 0x7c
 8036324:	4658      	mov	r0, fp
 8036326:	f7d9 ffbb 	bl	80102a0 <strlen>
 803632a:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 803632e:	eb04 0a00 	add.w	sl, r4, r0
 8036332:	1e6b      	subs	r3, r5, #1
 8036334:	4554      	cmp	r4, sl
 8036336:	d0df      	beq.n	80362f8 <__strftime.isra.0+0x15c>
 8036338:	42a3      	cmp	r3, r4
 803633a:	f240 80bf 	bls.w	80364bc <__strftime.isra.0+0x320>
 803633e:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 8036342:	553a      	strb	r2, [r7, r4]
 8036344:	3401      	adds	r4, #1
 8036346:	e7f5      	b.n	8036334 <__strftime.isra.0+0x198>
 8036348:	4b92      	ldr	r3, [pc, #584]	@ (8036594 <__strftime.isra.0+0x3f8>)
 803634a:	6932      	ldr	r2, [r6, #16]
 803634c:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 8036350:	4658      	mov	r0, fp
 8036352:	f7d9 ffa5 	bl	80102a0 <strlen>
 8036356:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 803635a:	eb04 0a00 	add.w	sl, r4, r0
 803635e:	1e6b      	subs	r3, r5, #1
 8036360:	45a2      	cmp	sl, r4
 8036362:	d0c9      	beq.n	80362f8 <__strftime.isra.0+0x15c>
 8036364:	42a3      	cmp	r3, r4
 8036366:	f240 80a9 	bls.w	80364bc <__strftime.isra.0+0x320>
 803636a:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 803636e:	553a      	strb	r2, [r7, r4]
 8036370:	3401      	adds	r4, #1
 8036372:	e7f5      	b.n	8036360 <__strftime.isra.0+0x1c4>
 8036374:	6933      	ldr	r3, [r6, #16]
 8036376:	4a87      	ldr	r2, [pc, #540]	@ (8036594 <__strftime.isra.0+0x3f8>)
 8036378:	330c      	adds	r3, #12
 803637a:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 803637e:	4658      	mov	r0, fp
 8036380:	f7d9 ff8e 	bl	80102a0 <strlen>
 8036384:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8036388:	eb04 0a00 	add.w	sl, r4, r0
 803638c:	1e6b      	subs	r3, r5, #1
 803638e:	45a2      	cmp	sl, r4
 8036390:	d0b2      	beq.n	80362f8 <__strftime.isra.0+0x15c>
 8036392:	42a3      	cmp	r3, r4
 8036394:	f240 8092 	bls.w	80364bc <__strftime.isra.0+0x320>
 8036398:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 803639c:	553a      	strb	r2, [r7, r4]
 803639e:	3401      	adds	r4, #1
 80363a0:	e7f5      	b.n	803638e <__strftime.isra.0+0x1f2>
 80363a2:	4b7c      	ldr	r3, [pc, #496]	@ (8036594 <__strftime.isra.0+0x3f8>)
 80363a4:	f8d3 a0a0 	ldr.w	sl, [r3, #160]	@ 0xa0
 80363a8:	4650      	mov	r0, sl
 80363aa:	f7d9 ff79 	bl	80102a0 <strlen>
 80363ae:	f89a 3000 	ldrb.w	r3, [sl]
 80363b2:	2b00      	cmp	r3, #0
 80363b4:	f000 8341 	beq.w	8036a3a <__strftime.isra.0+0x89e>
 80363b8:	4633      	mov	r3, r6
 80363ba:	4652      	mov	r2, sl
 80363bc:	1b29      	subs	r1, r5, r4
 80363be:	1938      	adds	r0, r7, r4
 80363c0:	f7ff feec 	bl	803619c <__strftime.isra.0>
 80363c4:	2800      	cmp	r0, #0
 80363c6:	dd79      	ble.n	80364bc <__strftime.isra.0+0x320>
 80363c8:	eb04 0a00 	add.w	sl, r4, r0
 80363cc:	e794      	b.n	80362f8 <__strftime.isra.0+0x15c>
 80363ce:	4b71      	ldr	r3, [pc, #452]	@ (8036594 <__strftime.isra.0+0x3f8>)
 80363d0:	f8d3 a0e4 	ldr.w	sl, [r3, #228]	@ 0xe4
 80363d4:	e7e8      	b.n	80363a8 <__strftime.isra.0+0x20c>
 80363d6:	4b6f      	ldr	r3, [pc, #444]	@ (8036594 <__strftime.isra.0+0x3f8>)
 80363d8:	f8d3 a09c 	ldr.w	sl, [r3, #156]	@ 0x9c
 80363dc:	e7e4      	b.n	80363a8 <__strftime.isra.0+0x20c>
 80363de:	4b6d      	ldr	r3, [pc, #436]	@ (8036594 <__strftime.isra.0+0x3f8>)
 80363e0:	f8d3 a098 	ldr.w	sl, [r3, #152]	@ 0x98
 80363e4:	e7e0      	b.n	80363a8 <__strftime.isra.0+0x20c>
 80363e6:	f8d6 a014 	ldr.w	sl, [r6, #20]
 80363ea:	496b      	ldr	r1, [pc, #428]	@ (8036598 <__strftime.isra.0+0x3fc>)
 80363ec:	458a      	cmp	sl, r1
 80363ee:	bfac      	ite	ge
 80363f0:	f04f 0b00 	movge.w	fp, #0
 80363f4:	f04f 0b01 	movlt.w	fp, #1
 80363f8:	f1ba 0f00 	cmp.w	sl, #0
 80363fc:	db12      	blt.n	8036424 <__strftime.isra.0+0x288>
 80363fe:	2064      	movs	r0, #100	@ 0x64
 8036400:	fb9a f0f0 	sdiv	r0, sl, r0
 8036404:	3013      	adds	r0, #19
 8036406:	f1b9 0f00 	cmp.w	r9, #0
 803640a:	d015      	beq.n	8036438 <__strftime.isra.0+0x29c>
 803640c:	2863      	cmp	r0, #99	@ 0x63
 803640e:	dd28      	ble.n	8036462 <__strftime.isra.0+0x2c6>
 8036410:	4b62      	ldr	r3, [pc, #392]	@ (803659c <__strftime.isra.0+0x400>)
 8036412:	4963      	ldr	r1, [pc, #396]	@ (80365a0 <__strftime.isra.0+0x404>)
 8036414:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 8036418:	bf0c      	ite	eq
 803641a:	469c      	moveq	ip, r3
 803641c:	468c      	movne	ip, r1
 803641e:	f8df e19c 	ldr.w	lr, [pc, #412]	@ 80365bc <__strftime.isra.0+0x420>
 8036422:	e00d      	b.n	8036440 <__strftime.isra.0+0x2a4>
 8036424:	f20a 706c 	addw	r0, sl, #1900	@ 0x76c
 8036428:	9203      	str	r2, [sp, #12]
 803642a:	f000 ff88 	bl	803733e <abs>
 803642e:	2164      	movs	r1, #100	@ 0x64
 8036430:	9a03      	ldr	r2, [sp, #12]
 8036432:	fb90 f0f1 	sdiv	r0, r0, r1
 8036436:	e7e6      	b.n	8036406 <__strftime.isra.0+0x26a>
 8036438:	f8df c164 	ldr.w	ip, [pc, #356]	@ 80365a0 <__strftime.isra.0+0x404>
 803643c:	f8df e180 	ldr.w	lr, [pc, #384]	@ 80365c0 <__strftime.isra.0+0x424>
 8036440:	4b58      	ldr	r3, [pc, #352]	@ (80365a4 <__strftime.isra.0+0x408>)
 8036442:	9001      	str	r0, [sp, #4]
 8036444:	2a02      	cmp	r2, #2
 8036446:	bf2c      	ite	cs
 8036448:	ebcb 0102 	rsbcs	r1, fp, r2
 803644c:	f1cb 0102 	rsbcc	r1, fp, #2
 8036450:	4a51      	ldr	r2, [pc, #324]	@ (8036598 <__strftime.isra.0+0x3fc>)
 8036452:	9100      	str	r1, [sp, #0]
 8036454:	4592      	cmp	sl, r2
 8036456:	bfa8      	it	ge
 8036458:	4663      	movge	r3, ip
 803645a:	4672      	mov	r2, lr
 803645c:	1b29      	subs	r1, r5, r4
 803645e:	1938      	adds	r0, r7, r4
 8036460:	e023      	b.n	80364aa <__strftime.isra.0+0x30e>
 8036462:	f8df c13c 	ldr.w	ip, [pc, #316]	@ 80365a0 <__strftime.isra.0+0x404>
 8036466:	e7da      	b.n	803641e <__strftime.isra.0+0x282>
 8036468:	494f      	ldr	r1, [pc, #316]	@ (80365a8 <__strftime.isra.0+0x40c>)
 803646a:	4a50      	ldr	r2, [pc, #320]	@ (80365ac <__strftime.isra.0+0x410>)
 803646c:	68f3      	ldr	r3, [r6, #12]
 803646e:	2864      	cmp	r0, #100	@ 0x64
 8036470:	bf18      	it	ne
 8036472:	460a      	movne	r2, r1
 8036474:	1b29      	subs	r1, r5, r4
 8036476:	1938      	adds	r0, r7, r4
 8036478:	f002 f986 	bl	8038788 <sniprintf>
 803647c:	e017      	b.n	80364ae <__strftime.isra.0+0x312>
 803647e:	6970      	ldr	r0, [r6, #20]
 8036480:	6933      	ldr	r3, [r6, #16]
 8036482:	2800      	cmp	r0, #0
 8036484:	f103 0a01 	add.w	sl, r3, #1
 8036488:	eb07 0b04 	add.w	fp, r7, r4
 803648c:	68f3      	ldr	r3, [r6, #12]
 803648e:	eba5 0904 	sub.w	r9, r5, r4
 8036492:	db19      	blt.n	80364c8 <__strftime.isra.0+0x32c>
 8036494:	2264      	movs	r2, #100	@ 0x64
 8036496:	fb90 fcf2 	sdiv	ip, r0, r2
 803649a:	fb02 001c 	mls	r0, r2, ip, r0
 803649e:	4a44      	ldr	r2, [pc, #272]	@ (80365b0 <__strftime.isra.0+0x414>)
 80364a0:	e9cd 3000 	strd	r3, r0, [sp]
 80364a4:	4649      	mov	r1, r9
 80364a6:	4653      	mov	r3, sl
 80364a8:	4658      	mov	r0, fp
 80364aa:	f002 f96d 	bl	8038788 <sniprintf>
 80364ae:	2800      	cmp	r0, #0
 80364b0:	db04      	blt.n	80364bc <__strftime.isra.0+0x320>
 80364b2:	eb00 0a04 	add.w	sl, r0, r4
 80364b6:	4555      	cmp	r5, sl
 80364b8:	f63f af1e 	bhi.w	80362f8 <__strftime.isra.0+0x15c>
 80364bc:	f04f 0a00 	mov.w	sl, #0
 80364c0:	4650      	mov	r0, sl
 80364c2:	b00f      	add	sp, #60	@ 0x3c
 80364c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80364c8:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 80364cc:	9303      	str	r3, [sp, #12]
 80364ce:	f000 ff36 	bl	803733e <abs>
 80364d2:	2264      	movs	r2, #100	@ 0x64
 80364d4:	9b03      	ldr	r3, [sp, #12]
 80364d6:	fb90 fcf2 	sdiv	ip, r0, r2
 80364da:	fb0c 0012 	mls	r0, ip, r2, r0
 80364de:	e7de      	b.n	803649e <__strftime.isra.0+0x302>
 80364e0:	2125      	movs	r1, #37	@ 0x25
 80364e2:	f88d 1018 	strb.w	r1, [sp, #24]
 80364e6:	f1b9 0f00 	cmp.w	r9, #0
 80364ea:	d00b      	beq.n	8036504 <__strftime.isra.0+0x368>
 80364ec:	2a05      	cmp	r2, #5
 80364ee:	f88d 9019 	strb.w	r9, [sp, #25]
 80364f2:	d817      	bhi.n	8036524 <__strftime.isra.0+0x388>
 80364f4:	f10d 001a 	add.w	r0, sp, #26
 80364f8:	492e      	ldr	r1, [pc, #184]	@ (80365b4 <__strftime.isra.0+0x418>)
 80364fa:	f000 fe83 	bl	8037204 <strcpy>
 80364fe:	4633      	mov	r3, r6
 8036500:	aa06      	add	r2, sp, #24
 8036502:	e75b      	b.n	80363bc <__strftime.isra.0+0x220>
 8036504:	232b      	movs	r3, #43	@ 0x2b
 8036506:	f88d 3019 	strb.w	r3, [sp, #25]
 803650a:	2304      	movs	r3, #4
 803650c:	4a2a      	ldr	r2, [pc, #168]	@ (80365b8 <__strftime.isra.0+0x41c>)
 803650e:	211e      	movs	r1, #30
 8036510:	f10d 001a 	add.w	r0, sp, #26
 8036514:	f002 f938 	bl	8038788 <sniprintf>
 8036518:	2800      	cmp	r0, #0
 803651a:	ddeb      	ble.n	80364f4 <__strftime.isra.0+0x358>
 803651c:	f10d 031a 	add.w	r3, sp, #26
 8036520:	4418      	add	r0, r3
 8036522:	e7e9      	b.n	80364f8 <__strftime.isra.0+0x35c>
 8036524:	1f93      	subs	r3, r2, #6
 8036526:	d0e5      	beq.n	80364f4 <__strftime.isra.0+0x358>
 8036528:	e7f0      	b.n	803650c <__strftime.isra.0+0x370>
 803652a:	4630      	mov	r0, r6
 803652c:	f7ff fde4 	bl	80360f8 <iso_year_adjust>
 8036530:	4682      	mov	sl, r0
 8036532:	6970      	ldr	r0, [r6, #20]
 8036534:	2800      	cmp	r0, #0
 8036536:	db11      	blt.n	803655c <__strftime.isra.0+0x3c0>
 8036538:	2364      	movs	r3, #100	@ 0x64
 803653a:	fb90 f2f3 	sdiv	r2, r0, r3
 803653e:	fb03 0012 	mls	r0, r3, r2, r0
 8036542:	2364      	movs	r3, #100	@ 0x64
 8036544:	4482      	add	sl, r0
 8036546:	fb9a f2f3 	sdiv	r2, sl, r3
 803654a:	fb03 aa12 	mls	sl, r3, r2, sl
 803654e:	449a      	add	sl, r3
 8036550:	fbba f2f3 	udiv	r2, sl, r3
 8036554:	fb03 a312 	mls	r3, r3, r2, sl
 8036558:	4a14      	ldr	r2, [pc, #80]	@ (80365ac <__strftime.isra.0+0x410>)
 803655a:	e78b      	b.n	8036474 <__strftime.isra.0+0x2d8>
 803655c:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 8036560:	f000 feed 	bl	803733e <abs>
 8036564:	2364      	movs	r3, #100	@ 0x64
 8036566:	f1ba 0f00 	cmp.w	sl, #0
 803656a:	fb90 f2f3 	sdiv	r2, r0, r3
 803656e:	fb02 0013 	mls	r0, r2, r3, r0
 8036572:	da07      	bge.n	8036584 <__strftime.isra.0+0x3e8>
 8036574:	6972      	ldr	r2, [r6, #20]
 8036576:	f2a3 73cf 	subw	r3, r3, #1999	@ 0x7cf
 803657a:	429a      	cmp	r2, r3
 803657c:	bfb8      	it	lt
 803657e:	f04f 0a01 	movlt.w	sl, #1
 8036582:	e7de      	b.n	8036542 <__strftime.isra.0+0x3a6>
 8036584:	d0dd      	beq.n	8036542 <__strftime.isra.0+0x3a6>
 8036586:	6972      	ldr	r2, [r6, #20]
 8036588:	4b03      	ldr	r3, [pc, #12]	@ (8036598 <__strftime.isra.0+0x3fc>)
 803658a:	429a      	cmp	r2, r3
 803658c:	bfb8      	it	lt
 803658e:	f04f 3aff 	movlt.w	sl, #4294967295	@ 0xffffffff
 8036592:	e7d6      	b.n	8036542 <__strftime.isra.0+0x3a6>
 8036594:	08044a5c 	.word	0x08044a5c
 8036598:	fffff894 	.word	0xfffff894
 803659c:	0804487f 	.word	0x0804487f
 80365a0:	0804479b 	.word	0x0804479b
 80365a4:	08044881 	.word	0x08044881
 80365a8:	08044883 	.word	0x08044883
 80365ac:	08044891 	.word	0x08044891
 80365b0:	08044887 	.word	0x08044887
 80365b4:	0804489a 	.word	0x0804489a
 80365b8:	08044896 	.word	0x08044896
 80365bc:	08044877 	.word	0x08044877
 80365c0:	08044870 	.word	0x08044870
 80365c4:	6971      	ldr	r1, [r6, #20]
 80365c6:	48bc      	ldr	r0, [pc, #752]	@ (80368b8 <__strftime.isra.0+0x71c>)
 80365c8:	9205      	str	r2, [sp, #20]
 80365ca:	4281      	cmp	r1, r0
 80365cc:	bfac      	ite	ge
 80365ce:	2300      	movge	r3, #0
 80365d0:	2301      	movlt	r3, #1
 80365d2:	4630      	mov	r0, r6
 80365d4:	e9cd 3103 	strd	r3, r1, [sp, #12]
 80365d8:	f7ff fd8e 	bl	80360f8 <iso_year_adjust>
 80365dc:	9904      	ldr	r1, [sp, #16]
 80365de:	9a05      	ldr	r2, [sp, #20]
 80365e0:	2900      	cmp	r1, #0
 80365e2:	4682      	mov	sl, r0
 80365e4:	db3a      	blt.n	803665c <__strftime.isra.0+0x4c0>
 80365e6:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 80365ea:	fb91 fbfb 	sdiv	fp, r1, fp
 80365ee:	f10b 0b13 	add.w	fp, fp, #19
 80365f2:	6970      	ldr	r0, [r6, #20]
 80365f4:	2800      	cmp	r0, #0
 80365f6:	db3e      	blt.n	8036676 <__strftime.isra.0+0x4da>
 80365f8:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 80365fc:	f1ba 0f00 	cmp.w	sl, #0
 8036600:	fb90 fefc 	sdiv	lr, r0, ip
 8036604:	fb0c 001e 	mls	r0, ip, lr, r0
 8036608:	da4f      	bge.n	80366aa <__strftime.isra.0+0x50e>
 803660a:	4482      	add	sl, r0
 803660c:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 8036610:	d157      	bne.n	80366c2 <__strftime.isra.0+0x526>
 8036612:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8036616:	f04f 0a63 	mov.w	sl, #99	@ 0x63
 803661a:	9b03      	ldr	r3, [sp, #12]
 803661c:	2164      	movs	r1, #100	@ 0x64
 803661e:	fb01 aa0b 	mla	sl, r1, fp, sl
 8036622:	2b00      	cmp	r3, #0
 8036624:	f040 81f7 	bne.w	8036a16 <__strftime.isra.0+0x87a>
 8036628:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 803662c:	d104      	bne.n	8036638 <__strftime.isra.0+0x49c>
 803662e:	f242 710f 	movw	r1, #9999	@ 0x270f
 8036632:	458a      	cmp	sl, r1
 8036634:	f200 8275 	bhi.w	8036b22 <__strftime.isra.0+0x986>
 8036638:	a906      	add	r1, sp, #24
 803663a:	2025      	movs	r0, #37	@ 0x25
 803663c:	7008      	strb	r0, [r1, #0]
 803663e:	f1b9 0f00 	cmp.w	r9, #0
 8036642:	f040 81f3 	bne.w	8036a2c <__strftime.isra.0+0x890>
 8036646:	1c48      	adds	r0, r1, #1
 8036648:	499c      	ldr	r1, [pc, #624]	@ (80368bc <__strftime.isra.0+0x720>)
 803664a:	9203      	str	r2, [sp, #12]
 803664c:	f000 fdda 	bl	8037204 <strcpy>
 8036650:	9a03      	ldr	r2, [sp, #12]
 8036652:	f8cd a000 	str.w	sl, [sp]
 8036656:	4613      	mov	r3, r2
 8036658:	aa06      	add	r2, sp, #24
 803665a:	e098      	b.n	803678e <__strftime.isra.0+0x5f2>
 803665c:	f201 706c 	addw	r0, r1, #1900	@ 0x76c
 8036660:	9205      	str	r2, [sp, #20]
 8036662:	9104      	str	r1, [sp, #16]
 8036664:	f000 fe6b 	bl	803733e <abs>
 8036668:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 803666c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8036670:	fb90 fbfc 	sdiv	fp, r0, ip
 8036674:	e7bd      	b.n	80365f2 <__strftime.isra.0+0x456>
 8036676:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 803667a:	e9cd 2104 	strd	r2, r1, [sp, #16]
 803667e:	f000 fe5e 	bl	803733e <abs>
 8036682:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 8036686:	f1ba 0f00 	cmp.w	sl, #0
 803668a:	fb90 fefc 	sdiv	lr, r0, ip
 803668e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8036692:	fb0e 001c 	mls	r0, lr, ip, r0
 8036696:	da08      	bge.n	80366aa <__strftime.isra.0+0x50e>
 8036698:	6971      	ldr	r1, [r6, #20]
 803669a:	4b89      	ldr	r3, [pc, #548]	@ (80368c0 <__strftime.isra.0+0x724>)
 803669c:	4299      	cmp	r1, r3
 803669e:	dab4      	bge.n	803660a <__strftime.isra.0+0x46e>
 80366a0:	f04f 0a01 	mov.w	sl, #1
 80366a4:	f8cd a00c 	str.w	sl, [sp, #12]
 80366a8:	e7af      	b.n	803660a <__strftime.isra.0+0x46e>
 80366aa:	f1ba 0f00 	cmp.w	sl, #0
 80366ae:	d0ac      	beq.n	803660a <__strftime.isra.0+0x46e>
 80366b0:	4b81      	ldr	r3, [pc, #516]	@ (80368b8 <__strftime.isra.0+0x71c>)
 80366b2:	4299      	cmp	r1, r3
 80366b4:	9b03      	ldr	r3, [sp, #12]
 80366b6:	bfbc      	itt	lt
 80366b8:	2301      	movlt	r3, #1
 80366ba:	f04f 3aff 	movlt.w	sl, #4294967295	@ 0xffffffff
 80366be:	9303      	str	r3, [sp, #12]
 80366c0:	e7a3      	b.n	803660a <__strftime.isra.0+0x46e>
 80366c2:	f1ba 0f64 	cmp.w	sl, #100	@ 0x64
 80366c6:	bf04      	itt	eq
 80366c8:	f10b 0b01 	addeq.w	fp, fp, #1
 80366cc:	f04f 0a00 	moveq.w	sl, #0
 80366d0:	e7a3      	b.n	803661a <__strftime.isra.0+0x47e>
 80366d2:	497c      	ldr	r1, [pc, #496]	@ (80368c4 <__strftime.isra.0+0x728>)
 80366d4:	4a7c      	ldr	r2, [pc, #496]	@ (80368c8 <__strftime.isra.0+0x72c>)
 80366d6:	68b3      	ldr	r3, [r6, #8]
 80366d8:	286b      	cmp	r0, #107	@ 0x6b
 80366da:	bf18      	it	ne
 80366dc:	460a      	movne	r2, r1
 80366de:	e6c9      	b.n	8036474 <__strftime.isra.0+0x2d8>
 80366e0:	68b3      	ldr	r3, [r6, #8]
 80366e2:	b163      	cbz	r3, 80366fe <__strftime.isra.0+0x562>
 80366e4:	2b0c      	cmp	r3, #12
 80366e6:	d004      	beq.n	80366f2 <__strftime.isra.0+0x556>
 80366e8:	210c      	movs	r1, #12
 80366ea:	fb93 f2f1 	sdiv	r2, r3, r1
 80366ee:	fb01 3312 	mls	r3, r1, r2, r3
 80366f2:	4975      	ldr	r1, [pc, #468]	@ (80368c8 <__strftime.isra.0+0x72c>)
 80366f4:	4a73      	ldr	r2, [pc, #460]	@ (80368c4 <__strftime.isra.0+0x728>)
 80366f6:	2849      	cmp	r0, #73	@ 0x49
 80366f8:	bf18      	it	ne
 80366fa:	460a      	movne	r2, r1
 80366fc:	e6ba      	b.n	8036474 <__strftime.isra.0+0x2d8>
 80366fe:	230c      	movs	r3, #12
 8036700:	e7f7      	b.n	80366f2 <__strftime.isra.0+0x556>
 8036702:	69f3      	ldr	r3, [r6, #28]
 8036704:	4a71      	ldr	r2, [pc, #452]	@ (80368cc <__strftime.isra.0+0x730>)
 8036706:	3301      	adds	r3, #1
 8036708:	e6b4      	b.n	8036474 <__strftime.isra.0+0x2d8>
 803670a:	6933      	ldr	r3, [r6, #16]
 803670c:	3301      	adds	r3, #1
 803670e:	e723      	b.n	8036558 <__strftime.isra.0+0x3bc>
 8036710:	6873      	ldr	r3, [r6, #4]
 8036712:	e721      	b.n	8036558 <__strftime.isra.0+0x3bc>
 8036714:	1e6b      	subs	r3, r5, #1
 8036716:	429c      	cmp	r4, r3
 8036718:	f4bf aed0 	bcs.w	80364bc <__strftime.isra.0+0x320>
 803671c:	f104 0a01 	add.w	sl, r4, #1
 8036720:	230a      	movs	r3, #10
 8036722:	553b      	strb	r3, [r7, r4]
 8036724:	e5e8      	b.n	80362f8 <__strftime.isra.0+0x15c>
 8036726:	68b3      	ldr	r3, [r6, #8]
 8036728:	2b0b      	cmp	r3, #11
 803672a:	4b69      	ldr	r3, [pc, #420]	@ (80368d0 <__strftime.isra.0+0x734>)
 803672c:	bfd4      	ite	le
 803672e:	2200      	movle	r2, #0
 8036730:	2201      	movgt	r2, #1
 8036732:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8036736:	f8d3 b0a4 	ldr.w	fp, [r3, #164]	@ 0xa4
 803673a:	4658      	mov	r0, fp
 803673c:	f7d9 fdb0 	bl	80102a0 <strlen>
 8036740:	eb04 0a00 	add.w	sl, r4, r0
 8036744:	4863      	ldr	r0, [pc, #396]	@ (80368d4 <__strftime.isra.0+0x738>)
 8036746:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 803674a:	1e69      	subs	r1, r5, #1
 803674c:	45a2      	cmp	sl, r4
 803674e:	f43f add3 	beq.w	80362f8 <__strftime.isra.0+0x15c>
 8036752:	42a1      	cmp	r1, r4
 8036754:	f67f aeb2 	bls.w	80364bc <__strftime.isra.0+0x320>
 8036758:	f898 2000 	ldrb.w	r2, [r8]
 803675c:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
 8036760:	2a50      	cmp	r2, #80	@ 0x50
 8036762:	d106      	bne.n	8036772 <__strftime.isra.0+0x5d6>
 8036764:	5cc2      	ldrb	r2, [r0, r3]
 8036766:	f002 0203 	and.w	r2, r2, #3
 803676a:	2a01      	cmp	r2, #1
 803676c:	bf08      	it	eq
 803676e:	3320      	addeq	r3, #32
 8036770:	b2db      	uxtb	r3, r3
 8036772:	553b      	strb	r3, [r7, r4]
 8036774:	3401      	adds	r4, #1
 8036776:	e7e9      	b.n	803674c <__strftime.isra.0+0x5b0>
 8036778:	2203      	movs	r2, #3
 803677a:	6933      	ldr	r3, [r6, #16]
 803677c:	fb93 f3f2 	sdiv	r3, r3, r2
 8036780:	4a55      	ldr	r2, [pc, #340]	@ (80368d8 <__strftime.isra.0+0x73c>)
 8036782:	3301      	adds	r3, #1
 8036784:	e676      	b.n	8036474 <__strftime.isra.0+0x2d8>
 8036786:	6873      	ldr	r3, [r6, #4]
 8036788:	9300      	str	r3, [sp, #0]
 803678a:	68b3      	ldr	r3, [r6, #8]
 803678c:	4a53      	ldr	r2, [pc, #332]	@ (80368dc <__strftime.isra.0+0x740>)
 803678e:	1b29      	subs	r1, r5, r4
 8036790:	1938      	adds	r0, r7, r4
 8036792:	f001 fff9 	bl	8038788 <sniprintf>
 8036796:	e68a      	b.n	80364ae <__strftime.isra.0+0x312>
 8036798:	6a33      	ldr	r3, [r6, #32]
 803679a:	2b00      	cmp	r3, #0
 803679c:	db78      	blt.n	8036890 <__strftime.isra.0+0x6f4>
 803679e:	f000 fa7b 	bl	8036c98 <__tz_lock>
 80367a2:	9b02      	ldr	r3, [sp, #8]
 80367a4:	b90b      	cbnz	r3, 80367aa <__strftime.isra.0+0x60e>
 80367a6:	f000 fa83 	bl	8036cb0 <_tzset_unlocked>
 80367aa:	f007 fe73 	bl	803e494 <__gettzinfo>
 80367ae:	6a33      	ldr	r3, [r6, #32]
 80367b0:	2b00      	cmp	r3, #0
 80367b2:	bfd4      	ite	le
 80367b4:	2200      	movle	r2, #0
 80367b6:	2201      	movgt	r2, #1
 80367b8:	2328      	movs	r3, #40	@ 0x28
 80367ba:	fb02 3303 	mla	r3, r2, r3, r3
 80367be:	58c3      	ldr	r3, [r0, r3]
 80367c0:	f1c3 0a00 	rsb	sl, r3, #0
 80367c4:	f000 fa6e 	bl	8036ca4 <__tz_unlock>
 80367c8:	2301      	movs	r3, #1
 80367ca:	9302      	str	r3, [sp, #8]
 80367cc:	6972      	ldr	r2, [r6, #20]
 80367ce:	f1b2 0345 	subs.w	r3, r2, #69	@ 0x45
 80367d2:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 80367d6:	f16c 0c00 	sbc.w	ip, ip, #0
 80367da:	f1bc 0f00 	cmp.w	ip, #0
 80367de:	eba5 0104 	sub.w	r1, r5, r4
 80367e2:	eb07 0004 	add.w	r0, r7, r4
 80367e6:	da02      	bge.n	80367ee <__strftime.isra.0+0x652>
 80367e8:	3303      	adds	r3, #3
 80367ea:	f14c 0c00 	adc.w	ip, ip, #0
 80367ee:	089b      	lsrs	r3, r3, #2
 80367f0:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 80367f4:	f102 3eff 	add.w	lr, r2, #4294967295	@ 0xffffffff
 80367f8:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 80367fc:	ea4f 0cac 	mov.w	ip, ip, asr #2
 8036800:	fb9e fefb 	sdiv	lr, lr, fp
 8036804:	ebb3 030e 	subs.w	r3, r3, lr
 8036808:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 803680c:	f44f 7bc8 	mov.w	fp, #400	@ 0x190
 8036810:	f202 1e2b 	addw	lr, r2, #299	@ 0x12b
 8036814:	fb9e fefb 	sdiv	lr, lr, fp
 8036818:	eb13 030e 	adds.w	r3, r3, lr
 803681c:	eb4c 7cee 	adc.w	ip, ip, lr, asr #31
 8036820:	3a46      	subs	r2, #70	@ 0x46
 8036822:	f240 1e6d 	movw	lr, #365	@ 0x16d
 8036826:	fb0e f202 	mul.w	r2, lr, r2
 803682a:	189b      	adds	r3, r3, r2
 803682c:	eb4c 7ce2 	adc.w	ip, ip, r2, asr #31
 8036830:	69f2      	ldr	r2, [r6, #28]
 8036832:	f8d6 b004 	ldr.w	fp, [r6, #4]
 8036836:	189b      	adds	r3, r3, r2
 8036838:	f04f 0e18 	mov.w	lr, #24
 803683c:	eb4c 7ce2 	adc.w	ip, ip, r2, asr #31
 8036840:	fba3 230e 	umull	r2, r3, r3, lr
 8036844:	fb0e 330c 	mla	r3, lr, ip, r3
 8036848:	f8d6 c008 	ldr.w	ip, [r6, #8]
 803684c:	eb12 020c 	adds.w	r2, r2, ip
 8036850:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
 8036854:	f04f 0c3c 	mov.w	ip, #60	@ 0x3c
 8036858:	fba2 2e0c 	umull	r2, lr, r2, ip
 803685c:	fb0c ee03 	mla	lr, ip, r3, lr
 8036860:	eb12 030b 	adds.w	r3, r2, fp
 8036864:	eb4e 72eb 	adc.w	r2, lr, fp, asr #31
 8036868:	fba3 e30c 	umull	lr, r3, r3, ip
 803686c:	fb0c 3302 	mla	r3, ip, r2, r3
 8036870:	f8d6 c000 	ldr.w	ip, [r6]
 8036874:	eb1e 020c 	adds.w	r2, lr, ip
 8036878:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
 803687c:	ebb2 020a 	subs.w	r2, r2, sl
 8036880:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 8036884:	e9cd 2300 	strd	r2, r3, [sp]
 8036888:	4a15      	ldr	r2, [pc, #84]	@ (80368e0 <__strftime.isra.0+0x744>)
 803688a:	f001 ff7d 	bl	8038788 <sniprintf>
 803688e:	e60e      	b.n	80364ae <__strftime.isra.0+0x312>
 8036890:	f04f 0a00 	mov.w	sl, #0
 8036894:	e79a      	b.n	80367cc <__strftime.isra.0+0x630>
 8036896:	6833      	ldr	r3, [r6, #0]
 8036898:	e65e      	b.n	8036558 <__strftime.isra.0+0x3bc>
 803689a:	1e6b      	subs	r3, r5, #1
 803689c:	429c      	cmp	r4, r3
 803689e:	f4bf ae0d 	bcs.w	80364bc <__strftime.isra.0+0x320>
 80368a2:	f104 0a01 	add.w	sl, r4, #1
 80368a6:	2309      	movs	r3, #9
 80368a8:	e73b      	b.n	8036722 <__strftime.isra.0+0x586>
 80368aa:	6833      	ldr	r3, [r6, #0]
 80368ac:	9301      	str	r3, [sp, #4]
 80368ae:	6873      	ldr	r3, [r6, #4]
 80368b0:	9300      	str	r3, [sp, #0]
 80368b2:	68b3      	ldr	r3, [r6, #8]
 80368b4:	4a0b      	ldr	r2, [pc, #44]	@ (80368e4 <__strftime.isra.0+0x748>)
 80368b6:	e5d1      	b.n	803645c <__strftime.isra.0+0x2c0>
 80368b8:	fffff894 	.word	0xfffff894
 80368bc:	080448a2 	.word	0x080448a2
 80368c0:	fffff895 	.word	0xfffff895
 80368c4:	08044891 	.word	0x08044891
 80368c8:	08044883 	.word	0x08044883
 80368cc:	080448a6 	.word	0x080448a6
 80368d0:	08044a5c 	.word	0x08044a5c
 80368d4:	08044b59 	.word	0x08044b59
 80368d8:	080448ab 	.word	0x080448ab
 80368dc:	080448ba 	.word	0x080448ba
 80368e0:	080448b0 	.word	0x080448b0
 80368e4:	080448b5 	.word	0x080448b5
 80368e8:	1e6b      	subs	r3, r5, #1
 80368ea:	429c      	cmp	r4, r3
 80368ec:	f4bf ade6 	bcs.w	80364bc <__strftime.isra.0+0x320>
 80368f0:	69b3      	ldr	r3, [r6, #24]
 80368f2:	b91b      	cbnz	r3, 80368fc <__strftime.isra.0+0x760>
 80368f4:	2337      	movs	r3, #55	@ 0x37
 80368f6:	f104 0a01 	add.w	sl, r4, #1
 80368fa:	e712      	b.n	8036722 <__strftime.isra.0+0x586>
 80368fc:	3330      	adds	r3, #48	@ 0x30
 80368fe:	b2db      	uxtb	r3, r3
 8036900:	e7f9      	b.n	80368f6 <__strftime.isra.0+0x75a>
 8036902:	69f3      	ldr	r3, [r6, #28]
 8036904:	69b2      	ldr	r2, [r6, #24]
 8036906:	3307      	adds	r3, #7
 8036908:	1a9b      	subs	r3, r3, r2
 803690a:	2207      	movs	r2, #7
 803690c:	fb93 f3f2 	sdiv	r3, r3, r2
 8036910:	e622      	b.n	8036558 <__strftime.isra.0+0x3bc>
 8036912:	4630      	mov	r0, r6
 8036914:	f7ff fbf0 	bl	80360f8 <iso_year_adjust>
 8036918:	69b2      	ldr	r2, [r6, #24]
 803691a:	b132      	cbz	r2, 803692a <__strftime.isra.0+0x78e>
 803691c:	3a01      	subs	r2, #1
 803691e:	2800      	cmp	r0, #0
 8036920:	69f3      	ldr	r3, [r6, #28]
 8036922:	dc26      	bgt.n	8036972 <__strftime.isra.0+0x7d6>
 8036924:	d103      	bne.n	803692e <__strftime.isra.0+0x792>
 8036926:	330a      	adds	r3, #10
 8036928:	e7ee      	b.n	8036908 <__strftime.isra.0+0x76c>
 803692a:	2206      	movs	r2, #6
 803692c:	e7f7      	b.n	803691e <__strftime.isra.0+0x782>
 803692e:	1ad2      	subs	r2, r2, r3
 8036930:	6973      	ldr	r3, [r6, #20]
 8036932:	2b00      	cmp	r3, #0
 8036934:	f240 716b 	movw	r1, #1899	@ 0x76b
 8036938:	bfa8      	it	ge
 803693a:	f06f 0164 	mvnge.w	r1, #100	@ 0x64
 803693e:	440b      	add	r3, r1
 8036940:	0799      	lsls	r1, r3, #30
 8036942:	d105      	bne.n	8036950 <__strftime.isra.0+0x7b4>
 8036944:	2064      	movs	r0, #100	@ 0x64
 8036946:	fb93 f1f0 	sdiv	r1, r3, r0
 803694a:	fb00 3111 	mls	r1, r0, r1, r3
 803694e:	b971      	cbnz	r1, 803696e <__strftime.isra.0+0x7d2>
 8036950:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8036954:	fb93 f0f1 	sdiv	r0, r3, r1
 8036958:	fb01 3310 	mls	r3, r1, r0, r3
 803695c:	fab3 f383 	clz	r3, r3
 8036960:	095b      	lsrs	r3, r3, #5
 8036962:	1ad2      	subs	r2, r2, r3
 8036964:	2a04      	cmp	r2, #4
 8036966:	bfcc      	ite	gt
 8036968:	2334      	movgt	r3, #52	@ 0x34
 803696a:	2335      	movle	r3, #53	@ 0x35
 803696c:	e5f4      	b.n	8036558 <__strftime.isra.0+0x3bc>
 803696e:	2301      	movs	r3, #1
 8036970:	e7f7      	b.n	8036962 <__strftime.isra.0+0x7c6>
 8036972:	2301      	movs	r3, #1
 8036974:	e5f0      	b.n	8036558 <__strftime.isra.0+0x3bc>
 8036976:	496c      	ldr	r1, [pc, #432]	@ (8036b28 <__strftime.isra.0+0x98c>)
 8036978:	9203      	str	r2, [sp, #12]
 803697a:	a806      	add	r0, sp, #24
 803697c:	f000 fc42 	bl	8037204 <strcpy>
 8036980:	a806      	add	r0, sp, #24
 8036982:	f7d9 fc8d 	bl	80102a0 <strlen>
 8036986:	ab06      	add	r3, sp, #24
 8036988:	eb03 0a00 	add.w	sl, r3, r0
 803698c:	f10a 0a01 	add.w	sl, sl, #1
 8036990:	46d3      	mov	fp, sl
 8036992:	f1b9 0f00 	cmp.w	r9, #0
 8036996:	d009      	beq.n	80369ac <__strftime.isra.0+0x810>
 8036998:	9a03      	ldr	r2, [sp, #12]
 803699a:	f803 9000 	strb.w	r9, [r3, r0]
 803699e:	2a05      	cmp	r2, #5
 80369a0:	d901      	bls.n	80369a6 <__strftime.isra.0+0x80a>
 80369a2:	1f93      	subs	r3, r2, #6
 80369a4:	d106      	bne.n	80369b4 <__strftime.isra.0+0x818>
 80369a6:	4961      	ldr	r1, [pc, #388]	@ (8036b2c <__strftime.isra.0+0x990>)
 80369a8:	4658      	mov	r0, fp
 80369aa:	e5a6      	b.n	80364fa <__strftime.isra.0+0x35e>
 80369ac:	aa06      	add	r2, sp, #24
 80369ae:	232b      	movs	r3, #43	@ 0x2b
 80369b0:	5413      	strb	r3, [r2, r0]
 80369b2:	2304      	movs	r3, #4
 80369b4:	a90e      	add	r1, sp, #56	@ 0x38
 80369b6:	4a5e      	ldr	r2, [pc, #376]	@ (8036b30 <__strftime.isra.0+0x994>)
 80369b8:	eba1 010a 	sub.w	r1, r1, sl
 80369bc:	4650      	mov	r0, sl
 80369be:	f001 fee3 	bl	8038788 <sniprintf>
 80369c2:	2800      	cmp	r0, #0
 80369c4:	bfc8      	it	gt
 80369c6:	eb0a 0b00 	addgt.w	fp, sl, r0
 80369ca:	e7ec      	b.n	80369a6 <__strftime.isra.0+0x80a>
 80369cc:	1e6b      	subs	r3, r5, #1
 80369ce:	429c      	cmp	r4, r3
 80369d0:	f4bf ad74 	bcs.w	80364bc <__strftime.isra.0+0x320>
 80369d4:	69b3      	ldr	r3, [r6, #24]
 80369d6:	f104 0a01 	add.w	sl, r4, #1
 80369da:	3330      	adds	r3, #48	@ 0x30
 80369dc:	e6a1      	b.n	8036722 <__strftime.isra.0+0x586>
 80369de:	69b2      	ldr	r2, [r6, #24]
 80369e0:	b11a      	cbz	r2, 80369ea <__strftime.isra.0+0x84e>
 80369e2:	3a01      	subs	r2, #1
 80369e4:	69f3      	ldr	r3, [r6, #28]
 80369e6:	3307      	adds	r3, #7
 80369e8:	e78e      	b.n	8036908 <__strftime.isra.0+0x76c>
 80369ea:	2206      	movs	r2, #6
 80369ec:	e7fa      	b.n	80369e4 <__strftime.isra.0+0x848>
 80369ee:	6970      	ldr	r0, [r6, #20]
 80369f0:	2800      	cmp	r0, #0
 80369f2:	db05      	blt.n	8036a00 <__strftime.isra.0+0x864>
 80369f4:	2364      	movs	r3, #100	@ 0x64
 80369f6:	fb90 f2f3 	sdiv	r2, r0, r3
 80369fa:	fb02 0313 	mls	r3, r2, r3, r0
 80369fe:	e5ab      	b.n	8036558 <__strftime.isra.0+0x3bc>
 8036a00:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 8036a04:	f000 fc9b 	bl	803733e <abs>
 8036a08:	e7f4      	b.n	80369f4 <__strftime.isra.0+0x858>
 8036a0a:	6971      	ldr	r1, [r6, #20]
 8036a0c:	4849      	ldr	r0, [pc, #292]	@ (8036b34 <__strftime.isra.0+0x998>)
 8036a0e:	4281      	cmp	r1, r0
 8036a10:	da09      	bge.n	8036a26 <__strftime.isra.0+0x88a>
 8036a12:	eba0 0a01 	sub.w	sl, r0, r1
 8036a16:	212d      	movs	r1, #45	@ 0x2d
 8036a18:	f88d 1018 	strb.w	r1, [sp, #24]
 8036a1c:	b102      	cbz	r2, 8036a20 <__strftime.isra.0+0x884>
 8036a1e:	3a01      	subs	r2, #1
 8036a20:	f10d 0119 	add.w	r1, sp, #25
 8036a24:	e609      	b.n	803663a <__strftime.isra.0+0x49e>
 8036a26:	f201 7a6c 	addw	sl, r1, #1900	@ 0x76c
 8036a2a:	e5fd      	b.n	8036628 <__strftime.isra.0+0x48c>
 8036a2c:	2330      	movs	r3, #48	@ 0x30
 8036a2e:	1c88      	adds	r0, r1, #2
 8036a30:	704b      	strb	r3, [r1, #1]
 8036a32:	e609      	b.n	8036648 <__strftime.isra.0+0x4ac>
 8036a34:	6a33      	ldr	r3, [r6, #32]
 8036a36:	2b00      	cmp	r3, #0
 8036a38:	da01      	bge.n	8036a3e <__strftime.isra.0+0x8a2>
 8036a3a:	46a2      	mov	sl, r4
 8036a3c:	e45c      	b.n	80362f8 <__strftime.isra.0+0x15c>
 8036a3e:	f000 f92b 	bl	8036c98 <__tz_lock>
 8036a42:	9b02      	ldr	r3, [sp, #8]
 8036a44:	b90b      	cbnz	r3, 8036a4a <__strftime.isra.0+0x8ae>
 8036a46:	f000 f933 	bl	8036cb0 <_tzset_unlocked>
 8036a4a:	f007 fd23 	bl	803e494 <__gettzinfo>
 8036a4e:	6a33      	ldr	r3, [r6, #32]
 8036a50:	2b00      	cmp	r3, #0
 8036a52:	bfd4      	ite	le
 8036a54:	2200      	movle	r2, #0
 8036a56:	2201      	movgt	r2, #1
 8036a58:	2328      	movs	r3, #40	@ 0x28
 8036a5a:	fb02 3303 	mla	r3, r2, r3, r3
 8036a5e:	eb07 0a04 	add.w	sl, r7, r4
 8036a62:	58c3      	ldr	r3, [r0, r3]
 8036a64:	f1c3 0900 	rsb	r9, r3, #0
 8036a68:	f000 f91c 	bl	8036ca4 <__tz_unlock>
 8036a6c:	233c      	movs	r3, #60	@ 0x3c
 8036a6e:	fb99 f0f3 	sdiv	r0, r9, r3
 8036a72:	f001 fbfe 	bl	8038272 <labs>
 8036a76:	233c      	movs	r3, #60	@ 0x3c
 8036a78:	eba5 0b04 	sub.w	fp, r5, r4
 8036a7c:	fb90 f2f3 	sdiv	r2, r0, r3
 8036a80:	fb02 0013 	mls	r0, r2, r3, r0
 8036a84:	9000      	str	r0, [sp, #0]
 8036a86:	4a2c      	ldr	r2, [pc, #176]	@ (8036b38 <__strftime.isra.0+0x99c>)
 8036a88:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8036a8c:	4659      	mov	r1, fp
 8036a8e:	4650      	mov	r0, sl
 8036a90:	fb99 f3f3 	sdiv	r3, r9, r3
 8036a94:	f001 fe78 	bl	8038788 <sniprintf>
 8036a98:	2800      	cmp	r0, #0
 8036a9a:	f6ff ad0f 	blt.w	80364bc <__strftime.isra.0+0x320>
 8036a9e:	eb00 0a04 	add.w	sl, r0, r4
 8036aa2:	4555      	cmp	r5, sl
 8036aa4:	f67f ad0a 	bls.w	80364bc <__strftime.isra.0+0x320>
 8036aa8:	2301      	movs	r3, #1
 8036aaa:	9302      	str	r3, [sp, #8]
 8036aac:	e424      	b.n	80362f8 <__strftime.isra.0+0x15c>
 8036aae:	6a33      	ldr	r3, [r6, #32]
 8036ab0:	2b00      	cmp	r3, #0
 8036ab2:	dbc2      	blt.n	8036a3a <__strftime.isra.0+0x89e>
 8036ab4:	f000 f8f0 	bl	8036c98 <__tz_lock>
 8036ab8:	9b02      	ldr	r3, [sp, #8]
 8036aba:	b90b      	cbnz	r3, 8036ac0 <__strftime.isra.0+0x924>
 8036abc:	f000 f8f8 	bl	8036cb0 <_tzset_unlocked>
 8036ac0:	6a33      	ldr	r3, [r6, #32]
 8036ac2:	4a1e      	ldr	r2, [pc, #120]	@ (8036b3c <__strftime.isra.0+0x9a0>)
 8036ac4:	2b00      	cmp	r3, #0
 8036ac6:	bfd4      	ite	le
 8036ac8:	2300      	movle	r3, #0
 8036aca:	2301      	movgt	r3, #1
 8036acc:	46a2      	mov	sl, r4
 8036ace:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8036ad2:	4648      	mov	r0, r9
 8036ad4:	f7d9 fbe4 	bl	80102a0 <strlen>
 8036ad8:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8036adc:	4420      	add	r0, r4
 8036ade:	1e6b      	subs	r3, r5, #1
 8036ae0:	4550      	cmp	r0, sl
 8036ae2:	d102      	bne.n	8036aea <__strftime.isra.0+0x94e>
 8036ae4:	f000 f8de 	bl	8036ca4 <__tz_unlock>
 8036ae8:	e7de      	b.n	8036aa8 <__strftime.isra.0+0x90c>
 8036aea:	4553      	cmp	r3, sl
 8036aec:	d906      	bls.n	8036afc <__strftime.isra.0+0x960>
 8036aee:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8036af2:	f807 200a 	strb.w	r2, [r7, sl]
 8036af6:	f10a 0a01 	add.w	sl, sl, #1
 8036afa:	e7f1      	b.n	8036ae0 <__strftime.isra.0+0x944>
 8036afc:	f000 f8d2 	bl	8036ca4 <__tz_unlock>
 8036b00:	e4dc      	b.n	80364bc <__strftime.isra.0+0x320>
 8036b02:	1e6b      	subs	r3, r5, #1
 8036b04:	429c      	cmp	r4, r3
 8036b06:	f4bf acd9 	bcs.w	80364bc <__strftime.isra.0+0x320>
 8036b0a:	f104 0a01 	add.w	sl, r4, #1
 8036b0e:	2325      	movs	r3, #37	@ 0x25
 8036b10:	e607      	b.n	8036722 <__strftime.isra.0+0x586>
 8036b12:	46a2      	mov	sl, r4
 8036b14:	2d00      	cmp	r5, #0
 8036b16:	f43f acd3 	beq.w	80364c0 <__strftime.isra.0+0x324>
 8036b1a:	2300      	movs	r3, #0
 8036b1c:	f807 300a 	strb.w	r3, [r7, sl]
 8036b20:	e4ce      	b.n	80364c0 <__strftime.isra.0+0x324>
 8036b22:	4649      	mov	r1, r9
 8036b24:	e778      	b.n	8036a18 <__strftime.isra.0+0x87c>
 8036b26:	bf00      	nop
 8036b28:	080448c4 	.word	0x080448c4
 8036b2c:	08044a2c 	.word	0x08044a2c
 8036b30:	08044896 	.word	0x08044896
 8036b34:	fffff894 	.word	0xfffff894
 8036b38:	080448cc 	.word	0x080448cc
 8036b3c:	200002bc 	.word	0x200002bc

08036b40 <strftime>:
 8036b40:	f7ff bb2c 	b.w	803619c <__strftime.isra.0>

08036b44 <__tzcalc_limits>:
 8036b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8036b48:	4604      	mov	r4, r0
 8036b4a:	f007 fca3 	bl	803e494 <__gettzinfo>
 8036b4e:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 8036b52:	429c      	cmp	r4, r3
 8036b54:	f340 8099 	ble.w	8036c8a <__tzcalc_limits+0x146>
 8036b58:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 8036b5c:	19e5      	adds	r5, r4, r7
 8036b5e:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 8036b62:	f240 126d 	movw	r2, #365	@ 0x16d
 8036b66:	10ad      	asrs	r5, r5, #2
 8036b68:	fb02 5503 	mla	r5, r2, r3, r5
 8036b6c:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 8036b70:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 8036b74:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 8036b78:	4f45      	ldr	r7, [pc, #276]	@ (8036c90 <__tzcalc_limits+0x14c>)
 8036b7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8036b7e:	441d      	add	r5, r3
 8036b80:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8036b84:	eb04 030c 	add.w	r3, r4, ip
 8036b88:	6044      	str	r4, [r0, #4]
 8036b8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8036b8e:	4601      	mov	r1, r0
 8036b90:	441d      	add	r5, r3
 8036b92:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 8036b96:	7a0b      	ldrb	r3, [r1, #8]
 8036b98:	694a      	ldr	r2, [r1, #20]
 8036b9a:	2b4a      	cmp	r3, #74	@ 0x4a
 8036b9c:	d133      	bne.n	8036c06 <__tzcalc_limits+0xc2>
 8036b9e:	07a6      	lsls	r6, r4, #30
 8036ba0:	eb05 0302 	add.w	r3, r5, r2
 8036ba4:	d106      	bne.n	8036bb4 <__tzcalc_limits+0x70>
 8036ba6:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 8036baa:	fb94 f6fe 	sdiv	r6, r4, lr
 8036bae:	fb0e 4616 	mls	r6, lr, r6, r4
 8036bb2:	b936      	cbnz	r6, 8036bc2 <__tzcalc_limits+0x7e>
 8036bb4:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 8036bb8:	fb94 f6fe 	sdiv	r6, r4, lr
 8036bbc:	fb0e 4616 	mls	r6, lr, r6, r4
 8036bc0:	b9fe      	cbnz	r6, 8036c02 <__tzcalc_limits+0xbe>
 8036bc2:	2a3b      	cmp	r2, #59	@ 0x3b
 8036bc4:	bfd4      	ite	le
 8036bc6:	2200      	movle	r2, #0
 8036bc8:	2201      	movgt	r2, #1
 8036bca:	4413      	add	r3, r2
 8036bcc:	3b01      	subs	r3, #1
 8036bce:	698a      	ldr	r2, [r1, #24]
 8036bd0:	17d6      	asrs	r6, r2, #31
 8036bd2:	fbc3 2607 	smlal	r2, r6, r3, r7
 8036bd6:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8036bd8:	18d2      	adds	r2, r2, r3
 8036bda:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 8036bde:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8036be2:	3128      	adds	r1, #40	@ 0x28
 8036be4:	458c      	cmp	ip, r1
 8036be6:	d1d6      	bne.n	8036b96 <__tzcalc_limits+0x52>
 8036be8:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 8036bec:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 8036bf0:	428c      	cmp	r4, r1
 8036bf2:	4193      	sbcs	r3, r2
 8036bf4:	bfb4      	ite	lt
 8036bf6:	2301      	movlt	r3, #1
 8036bf8:	2300      	movge	r3, #0
 8036bfa:	6003      	str	r3, [r0, #0]
 8036bfc:	2001      	movs	r0, #1
 8036bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8036c02:	2200      	movs	r2, #0
 8036c04:	e7e1      	b.n	8036bca <__tzcalc_limits+0x86>
 8036c06:	2b44      	cmp	r3, #68	@ 0x44
 8036c08:	d101      	bne.n	8036c0e <__tzcalc_limits+0xca>
 8036c0a:	18ab      	adds	r3, r5, r2
 8036c0c:	e7df      	b.n	8036bce <__tzcalc_limits+0x8a>
 8036c0e:	07a3      	lsls	r3, r4, #30
 8036c10:	d105      	bne.n	8036c1e <__tzcalc_limits+0xda>
 8036c12:	2664      	movs	r6, #100	@ 0x64
 8036c14:	fb94 f3f6 	sdiv	r3, r4, r6
 8036c18:	fb06 4313 	mls	r3, r6, r3, r4
 8036c1c:	bb7b      	cbnz	r3, 8036c7e <__tzcalc_limits+0x13a>
 8036c1e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8036c22:	fb94 f6f3 	sdiv	r6, r4, r3
 8036c26:	fb03 4616 	mls	r6, r3, r6, r4
 8036c2a:	fab6 f686 	clz	r6, r6
 8036c2e:	0976      	lsrs	r6, r6, #5
 8036c30:	f8df e060 	ldr.w	lr, [pc, #96]	@ 8036c94 <__tzcalc_limits+0x150>
 8036c34:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8036c38:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 8036c3c:	462b      	mov	r3, r5
 8036c3e:	f04f 0800 	mov.w	r8, #0
 8036c42:	fb0a e606 	mla	r6, sl, r6, lr
 8036c46:	f108 0801 	add.w	r8, r8, #1
 8036c4a:	45c1      	cmp	r9, r8
 8036c4c:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 8036c50:	dc17      	bgt.n	8036c82 <__tzcalc_limits+0x13e>
 8036c52:	f103 0804 	add.w	r8, r3, #4
 8036c56:	2607      	movs	r6, #7
 8036c58:	fb98 f6f6 	sdiv	r6, r8, r6
 8036c5c:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8036c60:	eba8 0606 	sub.w	r6, r8, r6
 8036c64:	1b92      	subs	r2, r2, r6
 8036c66:	690e      	ldr	r6, [r1, #16]
 8036c68:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 8036c6c:	bf48      	it	mi
 8036c6e:	3207      	addmi	r2, #7
 8036c70:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8036c74:	4432      	add	r2, r6
 8036c76:	4572      	cmp	r2, lr
 8036c78:	da05      	bge.n	8036c86 <__tzcalc_limits+0x142>
 8036c7a:	4413      	add	r3, r2
 8036c7c:	e7a7      	b.n	8036bce <__tzcalc_limits+0x8a>
 8036c7e:	2601      	movs	r6, #1
 8036c80:	e7d6      	b.n	8036c30 <__tzcalc_limits+0xec>
 8036c82:	4473      	add	r3, lr
 8036c84:	e7df      	b.n	8036c46 <__tzcalc_limits+0x102>
 8036c86:	3a07      	subs	r2, #7
 8036c88:	e7f5      	b.n	8036c76 <__tzcalc_limits+0x132>
 8036c8a:	2000      	movs	r0, #0
 8036c8c:	e7b7      	b.n	8036bfe <__tzcalc_limits+0xba>
 8036c8e:	bf00      	nop
 8036c90:	00015180 	.word	0x00015180
 8036c94:	0804480c 	.word	0x0804480c

08036c98 <__tz_lock>:
 8036c98:	4801      	ldr	r0, [pc, #4]	@ (8036ca0 <__tz_lock+0x8>)
 8036c9a:	f000 bae1 	b.w	8037260 <__retarget_lock_acquire>
 8036c9e:	bf00      	nop
 8036ca0:	200182dc 	.word	0x200182dc

08036ca4 <__tz_unlock>:
 8036ca4:	4801      	ldr	r0, [pc, #4]	@ (8036cac <__tz_unlock+0x8>)
 8036ca6:	f000 badd 	b.w	8037264 <__retarget_lock_release>
 8036caa:	bf00      	nop
 8036cac:	200182dc 	.word	0x200182dc

08036cb0 <_tzset_unlocked>:
 8036cb0:	4b01      	ldr	r3, [pc, #4]	@ (8036cb8 <_tzset_unlocked+0x8>)
 8036cb2:	6818      	ldr	r0, [r3, #0]
 8036cb4:	f000 b802 	b.w	8036cbc <_tzset_unlocked_r>
 8036cb8:	20000430 	.word	0x20000430

08036cbc <_tzset_unlocked_r>:
 8036cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8036cc0:	b08d      	sub	sp, #52	@ 0x34
 8036cc2:	4607      	mov	r7, r0
 8036cc4:	f007 fbe6 	bl	803e494 <__gettzinfo>
 8036cc8:	49bc      	ldr	r1, [pc, #752]	@ (8036fbc <_tzset_unlocked_r+0x300>)
 8036cca:	4dbd      	ldr	r5, [pc, #756]	@ (8036fc0 <_tzset_unlocked_r+0x304>)
 8036ccc:	4604      	mov	r4, r0
 8036cce:	4638      	mov	r0, r7
 8036cd0:	f001 fac8 	bl	8038264 <_getenv_r>
 8036cd4:	4606      	mov	r6, r0
 8036cd6:	bb10      	cbnz	r0, 8036d1e <_tzset_unlocked_r+0x62>
 8036cd8:	4bba      	ldr	r3, [pc, #744]	@ (8036fc4 <_tzset_unlocked_r+0x308>)
 8036cda:	4abb      	ldr	r2, [pc, #748]	@ (8036fc8 <_tzset_unlocked_r+0x30c>)
 8036cdc:	6018      	str	r0, [r3, #0]
 8036cde:	4bbb      	ldr	r3, [pc, #748]	@ (8036fcc <_tzset_unlocked_r+0x310>)
 8036ce0:	62a0      	str	r0, [r4, #40]	@ 0x28
 8036ce2:	6018      	str	r0, [r3, #0]
 8036ce4:	4bba      	ldr	r3, [pc, #744]	@ (8036fd0 <_tzset_unlocked_r+0x314>)
 8036ce6:	6520      	str	r0, [r4, #80]	@ 0x50
 8036ce8:	e9c3 2200 	strd	r2, r2, [r3]
 8036cec:	214a      	movs	r1, #74	@ 0x4a
 8036cee:	2200      	movs	r2, #0
 8036cf0:	2300      	movs	r3, #0
 8036cf2:	e9c4 0003 	strd	r0, r0, [r4, #12]
 8036cf6:	e9c4 0005 	strd	r0, r0, [r4, #20]
 8036cfa:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 8036cfe:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8036d02:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8036d06:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 8036d0a:	6828      	ldr	r0, [r5, #0]
 8036d0c:	7221      	strb	r1, [r4, #8]
 8036d0e:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 8036d12:	f001 fabb 	bl	803828c <free>
 8036d16:	602e      	str	r6, [r5, #0]
 8036d18:	b00d      	add	sp, #52	@ 0x34
 8036d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8036d1e:	6829      	ldr	r1, [r5, #0]
 8036d20:	2900      	cmp	r1, #0
 8036d22:	f040 808e 	bne.w	8036e42 <_tzset_unlocked_r+0x186>
 8036d26:	6828      	ldr	r0, [r5, #0]
 8036d28:	f001 fab0 	bl	803828c <free>
 8036d2c:	4630      	mov	r0, r6
 8036d2e:	f7d9 fab7 	bl	80102a0 <strlen>
 8036d32:	1c41      	adds	r1, r0, #1
 8036d34:	4638      	mov	r0, r7
 8036d36:	f001 fab1 	bl	803829c <_malloc_r>
 8036d3a:	6028      	str	r0, [r5, #0]
 8036d3c:	2800      	cmp	r0, #0
 8036d3e:	f040 8086 	bne.w	8036e4e <_tzset_unlocked_r+0x192>
 8036d42:	4aa2      	ldr	r2, [pc, #648]	@ (8036fcc <_tzset_unlocked_r+0x310>)
 8036d44:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 8036fd0 <_tzset_unlocked_r+0x314>
 8036d48:	f8df a278 	ldr.w	sl, [pc, #632]	@ 8036fc4 <_tzset_unlocked_r+0x308>
 8036d4c:	2300      	movs	r3, #0
 8036d4e:	6013      	str	r3, [r2, #0]
 8036d50:	4aa0      	ldr	r2, [pc, #640]	@ (8036fd4 <_tzset_unlocked_r+0x318>)
 8036d52:	f8ca 3000 	str.w	r3, [sl]
 8036d56:	2000      	movs	r0, #0
 8036d58:	2100      	movs	r1, #0
 8036d5a:	e9c8 2200 	strd	r2, r2, [r8]
 8036d5e:	e9c4 3303 	strd	r3, r3, [r4, #12]
 8036d62:	e9c4 3305 	strd	r3, r3, [r4, #20]
 8036d66:	e9c4 0108 	strd	r0, r1, [r4, #32]
 8036d6a:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 8036d6e:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 8036d72:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 8036d76:	224a      	movs	r2, #74	@ 0x4a
 8036d78:	7222      	strb	r2, [r4, #8]
 8036d7a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8036d7c:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 8036d80:	6523      	str	r3, [r4, #80]	@ 0x50
 8036d82:	7833      	ldrb	r3, [r6, #0]
 8036d84:	2b3a      	cmp	r3, #58	@ 0x3a
 8036d86:	bf08      	it	eq
 8036d88:	3601      	addeq	r6, #1
 8036d8a:	7833      	ldrb	r3, [r6, #0]
 8036d8c:	2b3c      	cmp	r3, #60	@ 0x3c
 8036d8e:	d162      	bne.n	8036e56 <_tzset_unlocked_r+0x19a>
 8036d90:	1c75      	adds	r5, r6, #1
 8036d92:	4a91      	ldr	r2, [pc, #580]	@ (8036fd8 <_tzset_unlocked_r+0x31c>)
 8036d94:	4991      	ldr	r1, [pc, #580]	@ (8036fdc <_tzset_unlocked_r+0x320>)
 8036d96:	ab0a      	add	r3, sp, #40	@ 0x28
 8036d98:	4628      	mov	r0, r5
 8036d9a:	f001 fccb 	bl	8038734 <siscanf>
 8036d9e:	2800      	cmp	r0, #0
 8036da0:	ddba      	ble.n	8036d18 <_tzset_unlocked_r+0x5c>
 8036da2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8036da4:	1eda      	subs	r2, r3, #3
 8036da6:	2a07      	cmp	r2, #7
 8036da8:	d8b6      	bhi.n	8036d18 <_tzset_unlocked_r+0x5c>
 8036daa:	5ceb      	ldrb	r3, [r5, r3]
 8036dac:	2b3e      	cmp	r3, #62	@ 0x3e
 8036dae:	d1b3      	bne.n	8036d18 <_tzset_unlocked_r+0x5c>
 8036db0:	3602      	adds	r6, #2
 8036db2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8036db4:	18f5      	adds	r5, r6, r3
 8036db6:	5cf3      	ldrb	r3, [r6, r3]
 8036db8:	2b2d      	cmp	r3, #45	@ 0x2d
 8036dba:	d15a      	bne.n	8036e72 <_tzset_unlocked_r+0x1b6>
 8036dbc:	3501      	adds	r5, #1
 8036dbe:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 8036dc2:	2300      	movs	r3, #0
 8036dc4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8036dc8:	f8ad 3020 	strh.w	r3, [sp, #32]
 8036dcc:	af08      	add	r7, sp, #32
 8036dce:	ab0a      	add	r3, sp, #40	@ 0x28
 8036dd0:	e9cd 3701 	strd	r3, r7, [sp, #4]
 8036dd4:	9303      	str	r3, [sp, #12]
 8036dd6:	f10d 031e 	add.w	r3, sp, #30
 8036dda:	9300      	str	r3, [sp, #0]
 8036ddc:	4980      	ldr	r1, [pc, #512]	@ (8036fe0 <_tzset_unlocked_r+0x324>)
 8036dde:	ab0a      	add	r3, sp, #40	@ 0x28
 8036de0:	aa07      	add	r2, sp, #28
 8036de2:	4628      	mov	r0, r5
 8036de4:	f001 fca6 	bl	8038734 <siscanf>
 8036de8:	2800      	cmp	r0, #0
 8036dea:	dd95      	ble.n	8036d18 <_tzset_unlocked_r+0x5c>
 8036dec:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8036df0:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 8036df4:	223c      	movs	r2, #60	@ 0x3c
 8036df6:	fb02 6603 	mla	r6, r2, r3, r6
 8036dfa:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8036dfe:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8036e02:	fb02 6603 	mla	r6, r2, r3, r6
 8036e06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8036e08:	fb09 f606 	mul.w	r6, r9, r6
 8036e0c:	eb05 0903 	add.w	r9, r5, r3
 8036e10:	5ceb      	ldrb	r3, [r5, r3]
 8036e12:	2b3c      	cmp	r3, #60	@ 0x3c
 8036e14:	f040 80ee 	bne.w	8036ff4 <_tzset_unlocked_r+0x338>
 8036e18:	f109 0501 	add.w	r5, r9, #1
 8036e1c:	4a71      	ldr	r2, [pc, #452]	@ (8036fe4 <_tzset_unlocked_r+0x328>)
 8036e1e:	496f      	ldr	r1, [pc, #444]	@ (8036fdc <_tzset_unlocked_r+0x320>)
 8036e20:	ab0a      	add	r3, sp, #40	@ 0x28
 8036e22:	4628      	mov	r0, r5
 8036e24:	f001 fc86 	bl	8038734 <siscanf>
 8036e28:	2800      	cmp	r0, #0
 8036e2a:	dc28      	bgt.n	8036e7e <_tzset_unlocked_r+0x1c2>
 8036e2c:	f899 3001 	ldrb.w	r3, [r9, #1]
 8036e30:	2b3e      	cmp	r3, #62	@ 0x3e
 8036e32:	d124      	bne.n	8036e7e <_tzset_unlocked_r+0x1c2>
 8036e34:	4b68      	ldr	r3, [pc, #416]	@ (8036fd8 <_tzset_unlocked_r+0x31c>)
 8036e36:	62a6      	str	r6, [r4, #40]	@ 0x28
 8036e38:	e9c8 3300 	strd	r3, r3, [r8]
 8036e3c:	f8ca 6000 	str.w	r6, [sl]
 8036e40:	e76a      	b.n	8036d18 <_tzset_unlocked_r+0x5c>
 8036e42:	f7d9 f9cd 	bl	80101e0 <strcmp>
 8036e46:	2800      	cmp	r0, #0
 8036e48:	f47f af6d 	bne.w	8036d26 <_tzset_unlocked_r+0x6a>
 8036e4c:	e764      	b.n	8036d18 <_tzset_unlocked_r+0x5c>
 8036e4e:	4631      	mov	r1, r6
 8036e50:	f000 f9d8 	bl	8037204 <strcpy>
 8036e54:	e775      	b.n	8036d42 <_tzset_unlocked_r+0x86>
 8036e56:	4a60      	ldr	r2, [pc, #384]	@ (8036fd8 <_tzset_unlocked_r+0x31c>)
 8036e58:	4963      	ldr	r1, [pc, #396]	@ (8036fe8 <_tzset_unlocked_r+0x32c>)
 8036e5a:	ab0a      	add	r3, sp, #40	@ 0x28
 8036e5c:	4630      	mov	r0, r6
 8036e5e:	f001 fc69 	bl	8038734 <siscanf>
 8036e62:	2800      	cmp	r0, #0
 8036e64:	f77f af58 	ble.w	8036d18 <_tzset_unlocked_r+0x5c>
 8036e68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8036e6a:	3b03      	subs	r3, #3
 8036e6c:	2b07      	cmp	r3, #7
 8036e6e:	d9a0      	bls.n	8036db2 <_tzset_unlocked_r+0xf6>
 8036e70:	e752      	b.n	8036d18 <_tzset_unlocked_r+0x5c>
 8036e72:	2b2b      	cmp	r3, #43	@ 0x2b
 8036e74:	bf08      	it	eq
 8036e76:	3501      	addeq	r5, #1
 8036e78:	f04f 0901 	mov.w	r9, #1
 8036e7c:	e7a1      	b.n	8036dc2 <_tzset_unlocked_r+0x106>
 8036e7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8036e80:	1eda      	subs	r2, r3, #3
 8036e82:	2a07      	cmp	r2, #7
 8036e84:	f63f af48 	bhi.w	8036d18 <_tzset_unlocked_r+0x5c>
 8036e88:	5ceb      	ldrb	r3, [r5, r3]
 8036e8a:	2b3e      	cmp	r3, #62	@ 0x3e
 8036e8c:	f47f af44 	bne.w	8036d18 <_tzset_unlocked_r+0x5c>
 8036e90:	f109 0902 	add.w	r9, r9, #2
 8036e94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8036e96:	eb09 0503 	add.w	r5, r9, r3
 8036e9a:	f819 3003 	ldrb.w	r3, [r9, r3]
 8036e9e:	2b2d      	cmp	r3, #45	@ 0x2d
 8036ea0:	f040 80b7 	bne.w	8037012 <_tzset_unlocked_r+0x356>
 8036ea4:	3501      	adds	r5, #1
 8036ea6:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 8036eaa:	2300      	movs	r3, #0
 8036eac:	f8ad 301c 	strh.w	r3, [sp, #28]
 8036eb0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8036eb4:	f8ad 3020 	strh.w	r3, [sp, #32]
 8036eb8:	930a      	str	r3, [sp, #40]	@ 0x28
 8036eba:	ab0a      	add	r3, sp, #40	@ 0x28
 8036ebc:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8036ec0:	9301      	str	r3, [sp, #4]
 8036ec2:	f10d 031e 	add.w	r3, sp, #30
 8036ec6:	9300      	str	r3, [sp, #0]
 8036ec8:	4945      	ldr	r1, [pc, #276]	@ (8036fe0 <_tzset_unlocked_r+0x324>)
 8036eca:	ab0a      	add	r3, sp, #40	@ 0x28
 8036ecc:	aa07      	add	r2, sp, #28
 8036ece:	4628      	mov	r0, r5
 8036ed0:	f001 fc30 	bl	8038734 <siscanf>
 8036ed4:	2800      	cmp	r0, #0
 8036ed6:	f300 80a2 	bgt.w	803701e <_tzset_unlocked_r+0x362>
 8036eda:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 8036ede:	9304      	str	r3, [sp, #16]
 8036ee0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8036ee2:	4627      	mov	r7, r4
 8036ee4:	441d      	add	r5, r3
 8036ee6:	f04f 0b00 	mov.w	fp, #0
 8036eea:	782b      	ldrb	r3, [r5, #0]
 8036eec:	2b2c      	cmp	r3, #44	@ 0x2c
 8036eee:	bf08      	it	eq
 8036ef0:	3501      	addeq	r5, #1
 8036ef2:	f895 9000 	ldrb.w	r9, [r5]
 8036ef6:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 8036efa:	f040 80a3 	bne.w	8037044 <_tzset_unlocked_r+0x388>
 8036efe:	ab0a      	add	r3, sp, #40	@ 0x28
 8036f00:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 8036f04:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8036f08:	aa09      	add	r2, sp, #36	@ 0x24
 8036f0a:	9200      	str	r2, [sp, #0]
 8036f0c:	4937      	ldr	r1, [pc, #220]	@ (8036fec <_tzset_unlocked_r+0x330>)
 8036f0e:	9303      	str	r3, [sp, #12]
 8036f10:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 8036f14:	4628      	mov	r0, r5
 8036f16:	f001 fc0d 	bl	8038734 <siscanf>
 8036f1a:	2803      	cmp	r0, #3
 8036f1c:	f47f aefc 	bne.w	8036d18 <_tzset_unlocked_r+0x5c>
 8036f20:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 8036f24:	1e4b      	subs	r3, r1, #1
 8036f26:	2b0b      	cmp	r3, #11
 8036f28:	f63f aef6 	bhi.w	8036d18 <_tzset_unlocked_r+0x5c>
 8036f2c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 8036f30:	1e53      	subs	r3, r2, #1
 8036f32:	2b04      	cmp	r3, #4
 8036f34:	f63f aef0 	bhi.w	8036d18 <_tzset_unlocked_r+0x5c>
 8036f38:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 8036f3c:	2b06      	cmp	r3, #6
 8036f3e:	f63f aeeb 	bhi.w	8036d18 <_tzset_unlocked_r+0x5c>
 8036f42:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8036f46:	f887 9008 	strb.w	r9, [r7, #8]
 8036f4a:	617b      	str	r3, [r7, #20]
 8036f4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8036f4e:	eb05 0903 	add.w	r9, r5, r3
 8036f52:	2500      	movs	r5, #0
 8036f54:	f04f 0302 	mov.w	r3, #2
 8036f58:	f8ad 301c 	strh.w	r3, [sp, #28]
 8036f5c:	f8ad 501e 	strh.w	r5, [sp, #30]
 8036f60:	f8ad 5020 	strh.w	r5, [sp, #32]
 8036f64:	950a      	str	r5, [sp, #40]	@ 0x28
 8036f66:	f899 3000 	ldrb.w	r3, [r9]
 8036f6a:	2b2f      	cmp	r3, #47	@ 0x2f
 8036f6c:	f040 8096 	bne.w	803709c <_tzset_unlocked_r+0x3e0>
 8036f70:	ab0a      	add	r3, sp, #40	@ 0x28
 8036f72:	aa08      	add	r2, sp, #32
 8036f74:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8036f78:	f10d 021e 	add.w	r2, sp, #30
 8036f7c:	9200      	str	r2, [sp, #0]
 8036f7e:	491c      	ldr	r1, [pc, #112]	@ (8036ff0 <_tzset_unlocked_r+0x334>)
 8036f80:	9303      	str	r3, [sp, #12]
 8036f82:	aa07      	add	r2, sp, #28
 8036f84:	4648      	mov	r0, r9
 8036f86:	f001 fbd5 	bl	8038734 <siscanf>
 8036f8a:	42a8      	cmp	r0, r5
 8036f8c:	f300 8086 	bgt.w	803709c <_tzset_unlocked_r+0x3e0>
 8036f90:	214a      	movs	r1, #74	@ 0x4a
 8036f92:	2200      	movs	r2, #0
 8036f94:	2300      	movs	r3, #0
 8036f96:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8036f9a:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8036f9e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8036fa2:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 8036fa6:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 8036faa:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 8036fae:	7221      	strb	r1, [r4, #8]
 8036fb0:	62a5      	str	r5, [r4, #40]	@ 0x28
 8036fb2:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 8036fb6:	6525      	str	r5, [r4, #80]	@ 0x50
 8036fb8:	e6ae      	b.n	8036d18 <_tzset_unlocked_r+0x5c>
 8036fba:	bf00      	nop
 8036fbc:	080448d8 	.word	0x080448d8
 8036fc0:	200182b4 	.word	0x200182b4
 8036fc4:	200182d0 	.word	0x200182d0
 8036fc8:	080448db 	.word	0x080448db
 8036fcc:	200182d4 	.word	0x200182d4
 8036fd0:	200002bc 	.word	0x200002bc
 8036fd4:	0804479b 	.word	0x0804479b
 8036fd8:	200182c4 	.word	0x200182c4
 8036fdc:	080448df 	.word	0x080448df
 8036fe0:	08044914 	.word	0x08044914
 8036fe4:	200182b8 	.word	0x200182b8
 8036fe8:	080448f2 	.word	0x080448f2
 8036fec:	08044900 	.word	0x08044900
 8036ff0:	08044913 	.word	0x08044913
 8036ff4:	4a3e      	ldr	r2, [pc, #248]	@ (80370f0 <_tzset_unlocked_r+0x434>)
 8036ff6:	493f      	ldr	r1, [pc, #252]	@ (80370f4 <_tzset_unlocked_r+0x438>)
 8036ff8:	ab0a      	add	r3, sp, #40	@ 0x28
 8036ffa:	4648      	mov	r0, r9
 8036ffc:	f001 fb9a 	bl	8038734 <siscanf>
 8037000:	2800      	cmp	r0, #0
 8037002:	f77f af17 	ble.w	8036e34 <_tzset_unlocked_r+0x178>
 8037006:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8037008:	3b03      	subs	r3, #3
 803700a:	2b07      	cmp	r3, #7
 803700c:	f67f af42 	bls.w	8036e94 <_tzset_unlocked_r+0x1d8>
 8037010:	e682      	b.n	8036d18 <_tzset_unlocked_r+0x5c>
 8037012:	2b2b      	cmp	r3, #43	@ 0x2b
 8037014:	bf08      	it	eq
 8037016:	3501      	addeq	r5, #1
 8037018:	f04f 0901 	mov.w	r9, #1
 803701c:	e745      	b.n	8036eaa <_tzset_unlocked_r+0x1ee>
 803701e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8037022:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8037026:	213c      	movs	r1, #60	@ 0x3c
 8037028:	fb01 3302 	mla	r3, r1, r2, r3
 803702c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8037030:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8037034:	fb01 3302 	mla	r3, r1, r2, r3
 8037038:	fb09 f303 	mul.w	r3, r9, r3
 803703c:	e74f      	b.n	8036ede <_tzset_unlocked_r+0x222>
 803703e:	f04f 0b01 	mov.w	fp, #1
 8037042:	e752      	b.n	8036eea <_tzset_unlocked_r+0x22e>
 8037044:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 8037048:	bf06      	itte	eq
 803704a:	3501      	addeq	r5, #1
 803704c:	464b      	moveq	r3, r9
 803704e:	2344      	movne	r3, #68	@ 0x44
 8037050:	220a      	movs	r2, #10
 8037052:	a90b      	add	r1, sp, #44	@ 0x2c
 8037054:	4628      	mov	r0, r5
 8037056:	9305      	str	r3, [sp, #20]
 8037058:	f007 f950 	bl	803e2fc <strtoul>
 803705c:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 8037060:	9b05      	ldr	r3, [sp, #20]
 8037062:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 8037066:	45a9      	cmp	r9, r5
 8037068:	d114      	bne.n	8037094 <_tzset_unlocked_r+0x3d8>
 803706a:	234d      	movs	r3, #77	@ 0x4d
 803706c:	f1bb 0f00 	cmp.w	fp, #0
 8037070:	d107      	bne.n	8037082 <_tzset_unlocked_r+0x3c6>
 8037072:	7223      	strb	r3, [r4, #8]
 8037074:	2103      	movs	r1, #3
 8037076:	2302      	movs	r3, #2
 8037078:	e9c4 1303 	strd	r1, r3, [r4, #12]
 803707c:	f8c4 b014 	str.w	fp, [r4, #20]
 8037080:	e767      	b.n	8036f52 <_tzset_unlocked_r+0x296>
 8037082:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8037086:	220b      	movs	r2, #11
 8037088:	2301      	movs	r3, #1
 803708a:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 803708e:	2300      	movs	r3, #0
 8037090:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8037092:	e75e      	b.n	8036f52 <_tzset_unlocked_r+0x296>
 8037094:	b280      	uxth	r0, r0
 8037096:	723b      	strb	r3, [r7, #8]
 8037098:	6178      	str	r0, [r7, #20]
 803709a:	e75a      	b.n	8036f52 <_tzset_unlocked_r+0x296>
 803709c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80370a0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80370a4:	213c      	movs	r1, #60	@ 0x3c
 80370a6:	fb01 3302 	mla	r3, r1, r2, r3
 80370aa:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80370ae:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80370b2:	fb01 3302 	mla	r3, r1, r2, r3
 80370b6:	61bb      	str	r3, [r7, #24]
 80370b8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80370ba:	3728      	adds	r7, #40	@ 0x28
 80370bc:	444d      	add	r5, r9
 80370be:	f1bb 0f00 	cmp.w	fp, #0
 80370c2:	d0bc      	beq.n	803703e <_tzset_unlocked_r+0x382>
 80370c4:	9b04      	ldr	r3, [sp, #16]
 80370c6:	6523      	str	r3, [r4, #80]	@ 0x50
 80370c8:	4b0b      	ldr	r3, [pc, #44]	@ (80370f8 <_tzset_unlocked_r+0x43c>)
 80370ca:	f8c8 3000 	str.w	r3, [r8]
 80370ce:	6860      	ldr	r0, [r4, #4]
 80370d0:	4b07      	ldr	r3, [pc, #28]	@ (80370f0 <_tzset_unlocked_r+0x434>)
 80370d2:	62a6      	str	r6, [r4, #40]	@ 0x28
 80370d4:	f8c8 3004 	str.w	r3, [r8, #4]
 80370d8:	f7ff fd34 	bl	8036b44 <__tzcalc_limits>
 80370dc:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80370de:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80370e0:	f8ca 2000 	str.w	r2, [sl]
 80370e4:	1a9b      	subs	r3, r3, r2
 80370e6:	4a05      	ldr	r2, [pc, #20]	@ (80370fc <_tzset_unlocked_r+0x440>)
 80370e8:	bf18      	it	ne
 80370ea:	2301      	movne	r3, #1
 80370ec:	6013      	str	r3, [r2, #0]
 80370ee:	e613      	b.n	8036d18 <_tzset_unlocked_r+0x5c>
 80370f0:	200182b8 	.word	0x200182b8
 80370f4:	080448f2 	.word	0x080448f2
 80370f8:	200182c4 	.word	0x200182c4
 80370fc:	200182d4 	.word	0x200182d4

08037100 <__locale_mb_cur_max>:
 8037100:	4b01      	ldr	r3, [pc, #4]	@ (8037108 <__locale_mb_cur_max+0x8>)
 8037102:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 8037106:	4770      	bx	lr
 8037108:	200002c4 	.word	0x200002c4

0803710c <_localeconv_r>:
 803710c:	4800      	ldr	r0, [pc, #0]	@ (8037110 <_localeconv_r+0x4>)
 803710e:	4770      	bx	lr
 8037110:	200003b4 	.word	0x200003b4

08037114 <_close_r>:
 8037114:	b538      	push	{r3, r4, r5, lr}
 8037116:	4d06      	ldr	r5, [pc, #24]	@ (8037130 <_close_r+0x1c>)
 8037118:	2300      	movs	r3, #0
 803711a:	4604      	mov	r4, r0
 803711c:	4608      	mov	r0, r1
 803711e:	602b      	str	r3, [r5, #0]
 8037120:	f7db fb74 	bl	801280c <_close>
 8037124:	1c43      	adds	r3, r0, #1
 8037126:	d102      	bne.n	803712e <_close_r+0x1a>
 8037128:	682b      	ldr	r3, [r5, #0]
 803712a:	b103      	cbz	r3, 803712e <_close_r+0x1a>
 803712c:	6023      	str	r3, [r4, #0]
 803712e:	bd38      	pop	{r3, r4, r5, pc}
 8037130:	200182d8 	.word	0x200182d8

08037134 <_reclaim_reent>:
 8037134:	4b14      	ldr	r3, [pc, #80]	@ (8037188 <_reclaim_reent+0x54>)
 8037136:	681b      	ldr	r3, [r3, #0]
 8037138:	4283      	cmp	r3, r0
 803713a:	b570      	push	{r4, r5, r6, lr}
 803713c:	4604      	mov	r4, r0
 803713e:	d022      	beq.n	8037186 <_reclaim_reent+0x52>
 8037140:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8037142:	b153      	cbz	r3, 803715a <_reclaim_reent+0x26>
 8037144:	2500      	movs	r5, #0
 8037146:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8037148:	5959      	ldr	r1, [r3, r5]
 803714a:	b9b1      	cbnz	r1, 803717a <_reclaim_reent+0x46>
 803714c:	3504      	adds	r5, #4
 803714e:	2d80      	cmp	r5, #128	@ 0x80
 8037150:	d1f9      	bne.n	8037146 <_reclaim_reent+0x12>
 8037152:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8037154:	4620      	mov	r0, r4
 8037156:	f000 ff89 	bl	803806c <_free_r>
 803715a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 803715c:	b111      	cbz	r1, 8037164 <_reclaim_reent+0x30>
 803715e:	4620      	mov	r0, r4
 8037160:	f000 ff84 	bl	803806c <_free_r>
 8037164:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8037166:	b111      	cbz	r1, 803716e <_reclaim_reent+0x3a>
 8037168:	4620      	mov	r0, r4
 803716a:	f000 ff7f 	bl	803806c <_free_r>
 803716e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8037170:	b14b      	cbz	r3, 8037186 <_reclaim_reent+0x52>
 8037172:	4620      	mov	r0, r4
 8037174:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8037178:	4718      	bx	r3
 803717a:	680e      	ldr	r6, [r1, #0]
 803717c:	4620      	mov	r0, r4
 803717e:	f000 ff75 	bl	803806c <_free_r>
 8037182:	4631      	mov	r1, r6
 8037184:	e7e1      	b.n	803714a <_reclaim_reent+0x16>
 8037186:	bd70      	pop	{r4, r5, r6, pc}
 8037188:	20000430 	.word	0x20000430

0803718c <_lseek_r>:
 803718c:	b538      	push	{r3, r4, r5, lr}
 803718e:	4d07      	ldr	r5, [pc, #28]	@ (80371ac <_lseek_r+0x20>)
 8037190:	4604      	mov	r4, r0
 8037192:	4608      	mov	r0, r1
 8037194:	4611      	mov	r1, r2
 8037196:	2200      	movs	r2, #0
 8037198:	602a      	str	r2, [r5, #0]
 803719a:	461a      	mov	r2, r3
 803719c:	f7db fb5d 	bl	801285a <_lseek>
 80371a0:	1c43      	adds	r3, r0, #1
 80371a2:	d102      	bne.n	80371aa <_lseek_r+0x1e>
 80371a4:	682b      	ldr	r3, [r5, #0]
 80371a6:	b103      	cbz	r3, 80371aa <_lseek_r+0x1e>
 80371a8:	6023      	str	r3, [r4, #0]
 80371aa:	bd38      	pop	{r3, r4, r5, pc}
 80371ac:	200182d8 	.word	0x200182d8

080371b0 <_read_r>:
 80371b0:	b538      	push	{r3, r4, r5, lr}
 80371b2:	4d07      	ldr	r5, [pc, #28]	@ (80371d0 <_read_r+0x20>)
 80371b4:	4604      	mov	r4, r0
 80371b6:	4608      	mov	r0, r1
 80371b8:	4611      	mov	r1, r2
 80371ba:	2200      	movs	r2, #0
 80371bc:	602a      	str	r2, [r5, #0]
 80371be:	461a      	mov	r2, r3
 80371c0:	f7db faeb 	bl	801279a <_read>
 80371c4:	1c43      	adds	r3, r0, #1
 80371c6:	d102      	bne.n	80371ce <_read_r+0x1e>
 80371c8:	682b      	ldr	r3, [r5, #0]
 80371ca:	b103      	cbz	r3, 80371ce <_read_r+0x1e>
 80371cc:	6023      	str	r3, [r4, #0]
 80371ce:	bd38      	pop	{r3, r4, r5, pc}
 80371d0:	200182d8 	.word	0x200182d8

080371d4 <_write_r>:
 80371d4:	b538      	push	{r3, r4, r5, lr}
 80371d6:	4d07      	ldr	r5, [pc, #28]	@ (80371f4 <_write_r+0x20>)
 80371d8:	4604      	mov	r4, r0
 80371da:	4608      	mov	r0, r1
 80371dc:	4611      	mov	r1, r2
 80371de:	2200      	movs	r2, #0
 80371e0:	602a      	str	r2, [r5, #0]
 80371e2:	461a      	mov	r2, r3
 80371e4:	f7db faf6 	bl	80127d4 <_write>
 80371e8:	1c43      	adds	r3, r0, #1
 80371ea:	d102      	bne.n	80371f2 <_write_r+0x1e>
 80371ec:	682b      	ldr	r3, [r5, #0]
 80371ee:	b103      	cbz	r3, 80371f2 <_write_r+0x1e>
 80371f0:	6023      	str	r3, [r4, #0]
 80371f2:	bd38      	pop	{r3, r4, r5, pc}
 80371f4:	200182d8 	.word	0x200182d8

080371f8 <__errno>:
 80371f8:	4b01      	ldr	r3, [pc, #4]	@ (8037200 <__errno+0x8>)
 80371fa:	6818      	ldr	r0, [r3, #0]
 80371fc:	4770      	bx	lr
 80371fe:	bf00      	nop
 8037200:	20000430 	.word	0x20000430

08037204 <strcpy>:
 8037204:	4603      	mov	r3, r0
 8037206:	f811 2b01 	ldrb.w	r2, [r1], #1
 803720a:	f803 2b01 	strb.w	r2, [r3], #1
 803720e:	2a00      	cmp	r2, #0
 8037210:	d1f9      	bne.n	8037206 <strcpy+0x2>
 8037212:	4770      	bx	lr

08037214 <__libc_init_array>:
 8037214:	b570      	push	{r4, r5, r6, lr}
 8037216:	4d0d      	ldr	r5, [pc, #52]	@ (803724c <__libc_init_array+0x38>)
 8037218:	4c0d      	ldr	r4, [pc, #52]	@ (8037250 <__libc_init_array+0x3c>)
 803721a:	1b64      	subs	r4, r4, r5
 803721c:	10a4      	asrs	r4, r4, #2
 803721e:	2600      	movs	r6, #0
 8037220:	42a6      	cmp	r6, r4
 8037222:	d109      	bne.n	8037238 <__libc_init_array+0x24>
 8037224:	4d0b      	ldr	r5, [pc, #44]	@ (8037254 <__libc_init_array+0x40>)
 8037226:	4c0c      	ldr	r4, [pc, #48]	@ (8037258 <__libc_init_array+0x44>)
 8037228:	f007 ff60 	bl	803f0ec <_init>
 803722c:	1b64      	subs	r4, r4, r5
 803722e:	10a4      	asrs	r4, r4, #2
 8037230:	2600      	movs	r6, #0
 8037232:	42a6      	cmp	r6, r4
 8037234:	d105      	bne.n	8037242 <__libc_init_array+0x2e>
 8037236:	bd70      	pop	{r4, r5, r6, pc}
 8037238:	f855 3b04 	ldr.w	r3, [r5], #4
 803723c:	4798      	blx	r3
 803723e:	3601      	adds	r6, #1
 8037240:	e7ee      	b.n	8037220 <__libc_init_array+0xc>
 8037242:	f855 3b04 	ldr.w	r3, [r5], #4
 8037246:	4798      	blx	r3
 8037248:	3601      	adds	r6, #1
 803724a:	e7f2      	b.n	8037232 <__libc_init_array+0x1e>
 803724c:	08044f68 	.word	0x08044f68
 8037250:	08044f68 	.word	0x08044f68
 8037254:	08044f68 	.word	0x08044f68
 8037258:	08044f70 	.word	0x08044f70

0803725c <__retarget_lock_init_recursive>:
 803725c:	4770      	bx	lr

0803725e <__retarget_lock_close_recursive>:
 803725e:	4770      	bx	lr

08037260 <__retarget_lock_acquire>:
 8037260:	4770      	bx	lr

08037262 <__retarget_lock_acquire_recursive>:
 8037262:	4770      	bx	lr

08037264 <__retarget_lock_release>:
 8037264:	4770      	bx	lr

08037266 <__retarget_lock_release_recursive>:
 8037266:	4770      	bx	lr

08037268 <memcpy>:
 8037268:	440a      	add	r2, r1
 803726a:	4291      	cmp	r1, r2
 803726c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8037270:	d100      	bne.n	8037274 <memcpy+0xc>
 8037272:	4770      	bx	lr
 8037274:	b510      	push	{r4, lr}
 8037276:	f811 4b01 	ldrb.w	r4, [r1], #1
 803727a:	f803 4f01 	strb.w	r4, [r3, #1]!
 803727e:	4291      	cmp	r1, r2
 8037280:	d1f9      	bne.n	8037276 <memcpy+0xe>
 8037282:	bd10      	pop	{r4, pc}

08037284 <_wcrtomb_r>:
 8037284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8037286:	4c09      	ldr	r4, [pc, #36]	@ (80372ac <_wcrtomb_r+0x28>)
 8037288:	b085      	sub	sp, #20
 803728a:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 803728e:	4605      	mov	r5, r0
 8037290:	461e      	mov	r6, r3
 8037292:	b909      	cbnz	r1, 8037298 <_wcrtomb_r+0x14>
 8037294:	460a      	mov	r2, r1
 8037296:	a901      	add	r1, sp, #4
 8037298:	47b8      	blx	r7
 803729a:	1c43      	adds	r3, r0, #1
 803729c:	bf01      	itttt	eq
 803729e:	2300      	moveq	r3, #0
 80372a0:	6033      	streq	r3, [r6, #0]
 80372a2:	238a      	moveq	r3, #138	@ 0x8a
 80372a4:	602b      	streq	r3, [r5, #0]
 80372a6:	b005      	add	sp, #20
 80372a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80372aa:	bf00      	nop
 80372ac:	200002c4 	.word	0x200002c4

080372b0 <frexp>:
 80372b0:	b570      	push	{r4, r5, r6, lr}
 80372b2:	2100      	movs	r1, #0
 80372b4:	ec55 4b10 	vmov	r4, r5, d0
 80372b8:	6001      	str	r1, [r0, #0]
 80372ba:	4915      	ldr	r1, [pc, #84]	@ (8037310 <frexp+0x60>)
 80372bc:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80372c0:	428a      	cmp	r2, r1
 80372c2:	4606      	mov	r6, r0
 80372c4:	462b      	mov	r3, r5
 80372c6:	d820      	bhi.n	803730a <frexp+0x5a>
 80372c8:	4621      	mov	r1, r4
 80372ca:	4311      	orrs	r1, r2
 80372cc:	d01d      	beq.n	803730a <frexp+0x5a>
 80372ce:	4911      	ldr	r1, [pc, #68]	@ (8037314 <frexp+0x64>)
 80372d0:	4029      	ands	r1, r5
 80372d2:	b961      	cbnz	r1, 80372ee <frexp+0x3e>
 80372d4:	4b10      	ldr	r3, [pc, #64]	@ (8037318 <frexp+0x68>)
 80372d6:	2200      	movs	r2, #0
 80372d8:	4620      	mov	r0, r4
 80372da:	4629      	mov	r1, r5
 80372dc:	f7d9 f9a4 	bl	8010628 <__aeabi_dmul>
 80372e0:	460b      	mov	r3, r1
 80372e2:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 80372e6:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 80372ea:	4604      	mov	r4, r0
 80372ec:	6031      	str	r1, [r6, #0]
 80372ee:	6831      	ldr	r1, [r6, #0]
 80372f0:	1512      	asrs	r2, r2, #20
 80372f2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80372f6:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 80372fa:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80372fe:	4411      	add	r1, r2
 8037300:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8037304:	6031      	str	r1, [r6, #0]
 8037306:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 803730a:	ec45 4b10 	vmov	d0, r4, r5
 803730e:	bd70      	pop	{r4, r5, r6, pc}
 8037310:	7fefffff 	.word	0x7fefffff
 8037314:	7ff00000 	.word	0x7ff00000
 8037318:	43500000 	.word	0x43500000

0803731c <register_fini>:
 803731c:	4b02      	ldr	r3, [pc, #8]	@ (8037328 <register_fini+0xc>)
 803731e:	b113      	cbz	r3, 8037326 <register_fini+0xa>
 8037320:	4802      	ldr	r0, [pc, #8]	@ (803732c <register_fini+0x10>)
 8037322:	f000 b810 	b.w	8037346 <atexit>
 8037326:	4770      	bx	lr
 8037328:	00000000 	.word	0x00000000
 803732c:	0803e7ad 	.word	0x0803e7ad

08037330 <abort>:
 8037330:	b508      	push	{r3, lr}
 8037332:	2006      	movs	r0, #6
 8037334:	f007 f8a6 	bl	803e484 <raise>
 8037338:	2001      	movs	r0, #1
 803733a:	f7db fa23 	bl	8012784 <_exit>

0803733e <abs>:
 803733e:	2800      	cmp	r0, #0
 8037340:	bfb8      	it	lt
 8037342:	4240      	neglt	r0, r0
 8037344:	4770      	bx	lr

08037346 <atexit>:
 8037346:	2300      	movs	r3, #0
 8037348:	4601      	mov	r1, r0
 803734a:	461a      	mov	r2, r3
 803734c:	4618      	mov	r0, r3
 803734e:	f007 bb01 	b.w	803e954 <__register_exitproc>

08037352 <quorem>:
 8037352:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8037356:	6903      	ldr	r3, [r0, #16]
 8037358:	690c      	ldr	r4, [r1, #16]
 803735a:	42a3      	cmp	r3, r4
 803735c:	4607      	mov	r7, r0
 803735e:	db7e      	blt.n	803745e <quorem+0x10c>
 8037360:	3c01      	subs	r4, #1
 8037362:	f101 0814 	add.w	r8, r1, #20
 8037366:	00a3      	lsls	r3, r4, #2
 8037368:	f100 0514 	add.w	r5, r0, #20
 803736c:	9300      	str	r3, [sp, #0]
 803736e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8037372:	9301      	str	r3, [sp, #4]
 8037374:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8037378:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 803737c:	3301      	adds	r3, #1
 803737e:	429a      	cmp	r2, r3
 8037380:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8037384:	fbb2 f6f3 	udiv	r6, r2, r3
 8037388:	d32e      	bcc.n	80373e8 <quorem+0x96>
 803738a:	f04f 0a00 	mov.w	sl, #0
 803738e:	46c4      	mov	ip, r8
 8037390:	46ae      	mov	lr, r5
 8037392:	46d3      	mov	fp, sl
 8037394:	f85c 3b04 	ldr.w	r3, [ip], #4
 8037398:	b298      	uxth	r0, r3
 803739a:	fb06 a000 	mla	r0, r6, r0, sl
 803739e:	0c02      	lsrs	r2, r0, #16
 80373a0:	0c1b      	lsrs	r3, r3, #16
 80373a2:	fb06 2303 	mla	r3, r6, r3, r2
 80373a6:	f8de 2000 	ldr.w	r2, [lr]
 80373aa:	b280      	uxth	r0, r0
 80373ac:	b292      	uxth	r2, r2
 80373ae:	1a12      	subs	r2, r2, r0
 80373b0:	445a      	add	r2, fp
 80373b2:	f8de 0000 	ldr.w	r0, [lr]
 80373b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80373ba:	b29b      	uxth	r3, r3
 80373bc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80373c0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80373c4:	b292      	uxth	r2, r2
 80373c6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80373ca:	45e1      	cmp	r9, ip
 80373cc:	f84e 2b04 	str.w	r2, [lr], #4
 80373d0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80373d4:	d2de      	bcs.n	8037394 <quorem+0x42>
 80373d6:	9b00      	ldr	r3, [sp, #0]
 80373d8:	58eb      	ldr	r3, [r5, r3]
 80373da:	b92b      	cbnz	r3, 80373e8 <quorem+0x96>
 80373dc:	9b01      	ldr	r3, [sp, #4]
 80373de:	3b04      	subs	r3, #4
 80373e0:	429d      	cmp	r5, r3
 80373e2:	461a      	mov	r2, r3
 80373e4:	d32f      	bcc.n	8037446 <quorem+0xf4>
 80373e6:	613c      	str	r4, [r7, #16]
 80373e8:	4638      	mov	r0, r7
 80373ea:	f005 fce3 	bl	803cdb4 <__mcmp>
 80373ee:	2800      	cmp	r0, #0
 80373f0:	db25      	blt.n	803743e <quorem+0xec>
 80373f2:	4629      	mov	r1, r5
 80373f4:	2000      	movs	r0, #0
 80373f6:	f858 2b04 	ldr.w	r2, [r8], #4
 80373fa:	f8d1 c000 	ldr.w	ip, [r1]
 80373fe:	fa1f fe82 	uxth.w	lr, r2
 8037402:	fa1f f38c 	uxth.w	r3, ip
 8037406:	eba3 030e 	sub.w	r3, r3, lr
 803740a:	4403      	add	r3, r0
 803740c:	0c12      	lsrs	r2, r2, #16
 803740e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8037412:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8037416:	b29b      	uxth	r3, r3
 8037418:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 803741c:	45c1      	cmp	r9, r8
 803741e:	f841 3b04 	str.w	r3, [r1], #4
 8037422:	ea4f 4022 	mov.w	r0, r2, asr #16
 8037426:	d2e6      	bcs.n	80373f6 <quorem+0xa4>
 8037428:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 803742c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8037430:	b922      	cbnz	r2, 803743c <quorem+0xea>
 8037432:	3b04      	subs	r3, #4
 8037434:	429d      	cmp	r5, r3
 8037436:	461a      	mov	r2, r3
 8037438:	d30b      	bcc.n	8037452 <quorem+0x100>
 803743a:	613c      	str	r4, [r7, #16]
 803743c:	3601      	adds	r6, #1
 803743e:	4630      	mov	r0, r6
 8037440:	b003      	add	sp, #12
 8037442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8037446:	6812      	ldr	r2, [r2, #0]
 8037448:	3b04      	subs	r3, #4
 803744a:	2a00      	cmp	r2, #0
 803744c:	d1cb      	bne.n	80373e6 <quorem+0x94>
 803744e:	3c01      	subs	r4, #1
 8037450:	e7c6      	b.n	80373e0 <quorem+0x8e>
 8037452:	6812      	ldr	r2, [r2, #0]
 8037454:	3b04      	subs	r3, #4
 8037456:	2a00      	cmp	r2, #0
 8037458:	d1ef      	bne.n	803743a <quorem+0xe8>
 803745a:	3c01      	subs	r4, #1
 803745c:	e7ea      	b.n	8037434 <quorem+0xe2>
 803745e:	2000      	movs	r0, #0
 8037460:	e7ee      	b.n	8037440 <quorem+0xee>
 8037462:	0000      	movs	r0, r0
 8037464:	0000      	movs	r0, r0
	...

08037468 <_dtoa_r>:
 8037468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803746c:	b099      	sub	sp, #100	@ 0x64
 803746e:	ed8d 0b02 	vstr	d0, [sp, #8]
 8037472:	9109      	str	r1, [sp, #36]	@ 0x24
 8037474:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8037476:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8037478:	920e      	str	r2, [sp, #56]	@ 0x38
 803747a:	ec55 4b10 	vmov	r4, r5, d0
 803747e:	4683      	mov	fp, r0
 8037480:	9313      	str	r3, [sp, #76]	@ 0x4c
 8037482:	b149      	cbz	r1, 8037498 <_dtoa_r+0x30>
 8037484:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8037486:	604a      	str	r2, [r1, #4]
 8037488:	2301      	movs	r3, #1
 803748a:	4093      	lsls	r3, r2
 803748c:	608b      	str	r3, [r1, #8]
 803748e:	f005 fa40 	bl	803c912 <_Bfree>
 8037492:	2300      	movs	r3, #0
 8037494:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 8037498:	1e2b      	subs	r3, r5, #0
 803749a:	bfb9      	ittee	lt
 803749c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80374a0:	9303      	strlt	r3, [sp, #12]
 80374a2:	2300      	movge	r3, #0
 80374a4:	6033      	strge	r3, [r6, #0]
 80374a6:	9f03      	ldr	r7, [sp, #12]
 80374a8:	4b97      	ldr	r3, [pc, #604]	@ (8037708 <_dtoa_r+0x2a0>)
 80374aa:	bfbc      	itt	lt
 80374ac:	2201      	movlt	r2, #1
 80374ae:	6032      	strlt	r2, [r6, #0]
 80374b0:	43bb      	bics	r3, r7
 80374b2:	d114      	bne.n	80374de <_dtoa_r+0x76>
 80374b4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80374b6:	f242 730f 	movw	r3, #9999	@ 0x270f
 80374ba:	6013      	str	r3, [r2, #0]
 80374bc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80374c0:	4323      	orrs	r3, r4
 80374c2:	f000 854c 	beq.w	8037f5e <_dtoa_r+0xaf6>
 80374c6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80374c8:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8037720 <_dtoa_r+0x2b8>
 80374cc:	b11b      	cbz	r3, 80374d6 <_dtoa_r+0x6e>
 80374ce:	f10a 0303 	add.w	r3, sl, #3
 80374d2:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80374d4:	6013      	str	r3, [r2, #0]
 80374d6:	4650      	mov	r0, sl
 80374d8:	b019      	add	sp, #100	@ 0x64
 80374da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80374de:	ed9d 7b02 	vldr	d7, [sp, #8]
 80374e2:	2200      	movs	r2, #0
 80374e4:	ec51 0b17 	vmov	r0, r1, d7
 80374e8:	2300      	movs	r3, #0
 80374ea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80374ee:	f7d9 fb03 	bl	8010af8 <__aeabi_dcmpeq>
 80374f2:	4680      	mov	r8, r0
 80374f4:	b150      	cbz	r0, 803750c <_dtoa_r+0xa4>
 80374f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80374f8:	2301      	movs	r3, #1
 80374fa:	6013      	str	r3, [r2, #0]
 80374fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80374fe:	b113      	cbz	r3, 8037506 <_dtoa_r+0x9e>
 8037500:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8037502:	4b82      	ldr	r3, [pc, #520]	@ (803770c <_dtoa_r+0x2a4>)
 8037504:	6013      	str	r3, [r2, #0]
 8037506:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 8037724 <_dtoa_r+0x2bc>
 803750a:	e7e4      	b.n	80374d6 <_dtoa_r+0x6e>
 803750c:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8037510:	aa16      	add	r2, sp, #88	@ 0x58
 8037512:	a917      	add	r1, sp, #92	@ 0x5c
 8037514:	4658      	mov	r0, fp
 8037516:	f005 fd6d 	bl	803cff4 <__d2b>
 803751a:	f3c7 560a 	ubfx	r6, r7, #20, #11
 803751e:	4681      	mov	r9, r0
 8037520:	2e00      	cmp	r6, #0
 8037522:	d077      	beq.n	8037614 <_dtoa_r+0x1ac>
 8037524:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8037526:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 803752a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 803752e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8037532:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8037536:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 803753a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 803753e:	4619      	mov	r1, r3
 8037540:	2200      	movs	r2, #0
 8037542:	4b73      	ldr	r3, [pc, #460]	@ (8037710 <_dtoa_r+0x2a8>)
 8037544:	f7d8 feb8 	bl	80102b8 <__aeabi_dsub>
 8037548:	a369      	add	r3, pc, #420	@ (adr r3, 80376f0 <_dtoa_r+0x288>)
 803754a:	e9d3 2300 	ldrd	r2, r3, [r3]
 803754e:	f7d9 f86b 	bl	8010628 <__aeabi_dmul>
 8037552:	a369      	add	r3, pc, #420	@ (adr r3, 80376f8 <_dtoa_r+0x290>)
 8037554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8037558:	f7d8 feb0 	bl	80102bc <__adddf3>
 803755c:	4604      	mov	r4, r0
 803755e:	4630      	mov	r0, r6
 8037560:	460d      	mov	r5, r1
 8037562:	f7d8 fff7 	bl	8010554 <__aeabi_i2d>
 8037566:	a366      	add	r3, pc, #408	@ (adr r3, 8037700 <_dtoa_r+0x298>)
 8037568:	e9d3 2300 	ldrd	r2, r3, [r3]
 803756c:	f7d9 f85c 	bl	8010628 <__aeabi_dmul>
 8037570:	4602      	mov	r2, r0
 8037572:	460b      	mov	r3, r1
 8037574:	4620      	mov	r0, r4
 8037576:	4629      	mov	r1, r5
 8037578:	f7d8 fea0 	bl	80102bc <__adddf3>
 803757c:	4604      	mov	r4, r0
 803757e:	460d      	mov	r5, r1
 8037580:	f7d9 fb02 	bl	8010b88 <__aeabi_d2iz>
 8037584:	2200      	movs	r2, #0
 8037586:	4607      	mov	r7, r0
 8037588:	2300      	movs	r3, #0
 803758a:	4620      	mov	r0, r4
 803758c:	4629      	mov	r1, r5
 803758e:	f7d9 fabd 	bl	8010b0c <__aeabi_dcmplt>
 8037592:	b140      	cbz	r0, 80375a6 <_dtoa_r+0x13e>
 8037594:	4638      	mov	r0, r7
 8037596:	f7d8 ffdd 	bl	8010554 <__aeabi_i2d>
 803759a:	4622      	mov	r2, r4
 803759c:	462b      	mov	r3, r5
 803759e:	f7d9 faab 	bl	8010af8 <__aeabi_dcmpeq>
 80375a2:	b900      	cbnz	r0, 80375a6 <_dtoa_r+0x13e>
 80375a4:	3f01      	subs	r7, #1
 80375a6:	2f16      	cmp	r7, #22
 80375a8:	d851      	bhi.n	803764e <_dtoa_r+0x1e6>
 80375aa:	4b5a      	ldr	r3, [pc, #360]	@ (8037714 <_dtoa_r+0x2ac>)
 80375ac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80375b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80375b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80375b8:	f7d9 faa8 	bl	8010b0c <__aeabi_dcmplt>
 80375bc:	2800      	cmp	r0, #0
 80375be:	d048      	beq.n	8037652 <_dtoa_r+0x1ea>
 80375c0:	3f01      	subs	r7, #1
 80375c2:	2300      	movs	r3, #0
 80375c4:	9312      	str	r3, [sp, #72]	@ 0x48
 80375c6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80375c8:	1b9b      	subs	r3, r3, r6
 80375ca:	1e5a      	subs	r2, r3, #1
 80375cc:	bf44      	itt	mi
 80375ce:	f1c3 0801 	rsbmi	r8, r3, #1
 80375d2:	2300      	movmi	r3, #0
 80375d4:	9208      	str	r2, [sp, #32]
 80375d6:	bf54      	ite	pl
 80375d8:	f04f 0800 	movpl.w	r8, #0
 80375dc:	9308      	strmi	r3, [sp, #32]
 80375de:	2f00      	cmp	r7, #0
 80375e0:	db39      	blt.n	8037656 <_dtoa_r+0x1ee>
 80375e2:	9b08      	ldr	r3, [sp, #32]
 80375e4:	970f      	str	r7, [sp, #60]	@ 0x3c
 80375e6:	443b      	add	r3, r7
 80375e8:	9308      	str	r3, [sp, #32]
 80375ea:	2300      	movs	r3, #0
 80375ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80375ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80375f0:	2b09      	cmp	r3, #9
 80375f2:	d865      	bhi.n	80376c0 <_dtoa_r+0x258>
 80375f4:	2b05      	cmp	r3, #5
 80375f6:	bfc4      	itt	gt
 80375f8:	3b04      	subgt	r3, #4
 80375fa:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80375fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80375fe:	f1a3 0302 	sub.w	r3, r3, #2
 8037602:	bfcc      	ite	gt
 8037604:	2400      	movgt	r4, #0
 8037606:	2401      	movle	r4, #1
 8037608:	2b03      	cmp	r3, #3
 803760a:	d864      	bhi.n	80376d6 <_dtoa_r+0x26e>
 803760c:	e8df f003 	tbb	[pc, r3]
 8037610:	5635372a 	.word	0x5635372a
 8037614:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8037618:	441e      	add	r6, r3
 803761a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 803761e:	2b20      	cmp	r3, #32
 8037620:	bfc1      	itttt	gt
 8037622:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8037626:	409f      	lslgt	r7, r3
 8037628:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 803762c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8037630:	bfd6      	itet	le
 8037632:	f1c3 0320 	rsble	r3, r3, #32
 8037636:	ea47 0003 	orrgt.w	r0, r7, r3
 803763a:	fa04 f003 	lslle.w	r0, r4, r3
 803763e:	f7d8 ff79 	bl	8010534 <__aeabi_ui2d>
 8037642:	2201      	movs	r2, #1
 8037644:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8037648:	3e01      	subs	r6, #1
 803764a:	9214      	str	r2, [sp, #80]	@ 0x50
 803764c:	e777      	b.n	803753e <_dtoa_r+0xd6>
 803764e:	2301      	movs	r3, #1
 8037650:	e7b8      	b.n	80375c4 <_dtoa_r+0x15c>
 8037652:	9012      	str	r0, [sp, #72]	@ 0x48
 8037654:	e7b7      	b.n	80375c6 <_dtoa_r+0x15e>
 8037656:	427b      	negs	r3, r7
 8037658:	930a      	str	r3, [sp, #40]	@ 0x28
 803765a:	2300      	movs	r3, #0
 803765c:	eba8 0807 	sub.w	r8, r8, r7
 8037660:	930f      	str	r3, [sp, #60]	@ 0x3c
 8037662:	e7c4      	b.n	80375ee <_dtoa_r+0x186>
 8037664:	2300      	movs	r3, #0
 8037666:	930b      	str	r3, [sp, #44]	@ 0x2c
 8037668:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803766a:	2b00      	cmp	r3, #0
 803766c:	dc36      	bgt.n	80376dc <_dtoa_r+0x274>
 803766e:	2301      	movs	r3, #1
 8037670:	9300      	str	r3, [sp, #0]
 8037672:	9307      	str	r3, [sp, #28]
 8037674:	461a      	mov	r2, r3
 8037676:	920e      	str	r2, [sp, #56]	@ 0x38
 8037678:	e00b      	b.n	8037692 <_dtoa_r+0x22a>
 803767a:	2301      	movs	r3, #1
 803767c:	e7f3      	b.n	8037666 <_dtoa_r+0x1fe>
 803767e:	2300      	movs	r3, #0
 8037680:	930b      	str	r3, [sp, #44]	@ 0x2c
 8037682:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8037684:	18fb      	adds	r3, r7, r3
 8037686:	9300      	str	r3, [sp, #0]
 8037688:	3301      	adds	r3, #1
 803768a:	2b01      	cmp	r3, #1
 803768c:	9307      	str	r3, [sp, #28]
 803768e:	bfb8      	it	lt
 8037690:	2301      	movlt	r3, #1
 8037692:	2100      	movs	r1, #0
 8037694:	2204      	movs	r2, #4
 8037696:	f102 0014 	add.w	r0, r2, #20
 803769a:	4298      	cmp	r0, r3
 803769c:	d922      	bls.n	80376e4 <_dtoa_r+0x27c>
 803769e:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
 80376a2:	4658      	mov	r0, fp
 80376a4:	f005 f910 	bl	803c8c8 <_Balloc>
 80376a8:	4682      	mov	sl, r0
 80376aa:	2800      	cmp	r0, #0
 80376ac:	d13c      	bne.n	8037728 <_dtoa_r+0x2c0>
 80376ae:	4b1a      	ldr	r3, [pc, #104]	@ (8037718 <_dtoa_r+0x2b0>)
 80376b0:	4602      	mov	r2, r0
 80376b2:	f240 11af 	movw	r1, #431	@ 0x1af
 80376b6:	4819      	ldr	r0, [pc, #100]	@ (803771c <_dtoa_r+0x2b4>)
 80376b8:	f7fb fe46 	bl	8033348 <__assert_func>
 80376bc:	2301      	movs	r3, #1
 80376be:	e7df      	b.n	8037680 <_dtoa_r+0x218>
 80376c0:	2401      	movs	r4, #1
 80376c2:	2300      	movs	r3, #0
 80376c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80376c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80376c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80376cc:	9300      	str	r3, [sp, #0]
 80376ce:	9307      	str	r3, [sp, #28]
 80376d0:	2200      	movs	r2, #0
 80376d2:	2312      	movs	r3, #18
 80376d4:	e7cf      	b.n	8037676 <_dtoa_r+0x20e>
 80376d6:	2301      	movs	r3, #1
 80376d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80376da:	e7f5      	b.n	80376c8 <_dtoa_r+0x260>
 80376dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80376de:	9300      	str	r3, [sp, #0]
 80376e0:	9307      	str	r3, [sp, #28]
 80376e2:	e7d6      	b.n	8037692 <_dtoa_r+0x22a>
 80376e4:	3101      	adds	r1, #1
 80376e6:	0052      	lsls	r2, r2, #1
 80376e8:	e7d5      	b.n	8037696 <_dtoa_r+0x22e>
 80376ea:	bf00      	nop
 80376ec:	f3af 8000 	nop.w
 80376f0:	636f4361 	.word	0x636f4361
 80376f4:	3fd287a7 	.word	0x3fd287a7
 80376f8:	8b60c8b3 	.word	0x8b60c8b3
 80376fc:	3fc68a28 	.word	0x3fc68a28
 8037700:	509f79fb 	.word	0x509f79fb
 8037704:	3fd34413 	.word	0x3fd34413
 8037708:	7ff00000 	.word	0x7ff00000
 803770c:	080447cf 	.word	0x080447cf
 8037710:	3ff80000 	.word	0x3ff80000
 8037714:	08044de8 	.word	0x08044de8
 8037718:	08044c66 	.word	0x08044c66
 803771c:	08044c77 	.word	0x08044c77
 8037720:	08044c62 	.word	0x08044c62
 8037724:	080447ce 	.word	0x080447ce
 8037728:	9b07      	ldr	r3, [sp, #28]
 803772a:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 803772e:	2b0e      	cmp	r3, #14
 8037730:	f200 80a4 	bhi.w	803787c <_dtoa_r+0x414>
 8037734:	2c00      	cmp	r4, #0
 8037736:	f000 80a1 	beq.w	803787c <_dtoa_r+0x414>
 803773a:	2f00      	cmp	r7, #0
 803773c:	dd33      	ble.n	80377a6 <_dtoa_r+0x33e>
 803773e:	4bae      	ldr	r3, [pc, #696]	@ (80379f8 <_dtoa_r+0x590>)
 8037740:	f007 020f 	and.w	r2, r7, #15
 8037744:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8037748:	ed93 7b00 	vldr	d7, [r3]
 803774c:	05f8      	lsls	r0, r7, #23
 803774e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8037752:	ea4f 1427 	mov.w	r4, r7, asr #4
 8037756:	d516      	bpl.n	8037786 <_dtoa_r+0x31e>
 8037758:	4ba8      	ldr	r3, [pc, #672]	@ (80379fc <_dtoa_r+0x594>)
 803775a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 803775e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8037762:	f7d9 f88b 	bl	801087c <__aeabi_ddiv>
 8037766:	e9cd 0102 	strd	r0, r1, [sp, #8]
 803776a:	f004 040f 	and.w	r4, r4, #15
 803776e:	2603      	movs	r6, #3
 8037770:	4da2      	ldr	r5, [pc, #648]	@ (80379fc <_dtoa_r+0x594>)
 8037772:	b954      	cbnz	r4, 803778a <_dtoa_r+0x322>
 8037774:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8037778:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 803777c:	f7d9 f87e 	bl	801087c <__aeabi_ddiv>
 8037780:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8037784:	e028      	b.n	80377d8 <_dtoa_r+0x370>
 8037786:	2602      	movs	r6, #2
 8037788:	e7f2      	b.n	8037770 <_dtoa_r+0x308>
 803778a:	07e1      	lsls	r1, r4, #31
 803778c:	d508      	bpl.n	80377a0 <_dtoa_r+0x338>
 803778e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8037792:	e9d5 2300 	ldrd	r2, r3, [r5]
 8037796:	f7d8 ff47 	bl	8010628 <__aeabi_dmul>
 803779a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 803779e:	3601      	adds	r6, #1
 80377a0:	1064      	asrs	r4, r4, #1
 80377a2:	3508      	adds	r5, #8
 80377a4:	e7e5      	b.n	8037772 <_dtoa_r+0x30a>
 80377a6:	f000 80d2 	beq.w	803794e <_dtoa_r+0x4e6>
 80377aa:	427c      	negs	r4, r7
 80377ac:	4b92      	ldr	r3, [pc, #584]	@ (80379f8 <_dtoa_r+0x590>)
 80377ae:	4d93      	ldr	r5, [pc, #588]	@ (80379fc <_dtoa_r+0x594>)
 80377b0:	f004 020f 	and.w	r2, r4, #15
 80377b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80377b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80377bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80377c0:	f7d8 ff32 	bl	8010628 <__aeabi_dmul>
 80377c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80377c8:	1124      	asrs	r4, r4, #4
 80377ca:	2300      	movs	r3, #0
 80377cc:	2602      	movs	r6, #2
 80377ce:	2c00      	cmp	r4, #0
 80377d0:	f040 80b2 	bne.w	8037938 <_dtoa_r+0x4d0>
 80377d4:	2b00      	cmp	r3, #0
 80377d6:	d1d3      	bne.n	8037780 <_dtoa_r+0x318>
 80377d8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80377da:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80377de:	2b00      	cmp	r3, #0
 80377e0:	f000 80b7 	beq.w	8037952 <_dtoa_r+0x4ea>
 80377e4:	4b86      	ldr	r3, [pc, #536]	@ (8037a00 <_dtoa_r+0x598>)
 80377e6:	2200      	movs	r2, #0
 80377e8:	4620      	mov	r0, r4
 80377ea:	4629      	mov	r1, r5
 80377ec:	f7d9 f98e 	bl	8010b0c <__aeabi_dcmplt>
 80377f0:	2800      	cmp	r0, #0
 80377f2:	f000 80ae 	beq.w	8037952 <_dtoa_r+0x4ea>
 80377f6:	9b07      	ldr	r3, [sp, #28]
 80377f8:	2b00      	cmp	r3, #0
 80377fa:	f000 80aa 	beq.w	8037952 <_dtoa_r+0x4ea>
 80377fe:	9b00      	ldr	r3, [sp, #0]
 8037800:	2b00      	cmp	r3, #0
 8037802:	dd37      	ble.n	8037874 <_dtoa_r+0x40c>
 8037804:	1e7b      	subs	r3, r7, #1
 8037806:	9304      	str	r3, [sp, #16]
 8037808:	4620      	mov	r0, r4
 803780a:	4b7e      	ldr	r3, [pc, #504]	@ (8037a04 <_dtoa_r+0x59c>)
 803780c:	2200      	movs	r2, #0
 803780e:	4629      	mov	r1, r5
 8037810:	f7d8 ff0a 	bl	8010628 <__aeabi_dmul>
 8037814:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8037818:	9c00      	ldr	r4, [sp, #0]
 803781a:	3601      	adds	r6, #1
 803781c:	4630      	mov	r0, r6
 803781e:	f7d8 fe99 	bl	8010554 <__aeabi_i2d>
 8037822:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8037826:	f7d8 feff 	bl	8010628 <__aeabi_dmul>
 803782a:	4b77      	ldr	r3, [pc, #476]	@ (8037a08 <_dtoa_r+0x5a0>)
 803782c:	2200      	movs	r2, #0
 803782e:	f7d8 fd45 	bl	80102bc <__adddf3>
 8037832:	4605      	mov	r5, r0
 8037834:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8037838:	2c00      	cmp	r4, #0
 803783a:	f040 808d 	bne.w	8037958 <_dtoa_r+0x4f0>
 803783e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8037842:	4b72      	ldr	r3, [pc, #456]	@ (8037a0c <_dtoa_r+0x5a4>)
 8037844:	2200      	movs	r2, #0
 8037846:	f7d8 fd37 	bl	80102b8 <__aeabi_dsub>
 803784a:	4602      	mov	r2, r0
 803784c:	460b      	mov	r3, r1
 803784e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8037852:	462a      	mov	r2, r5
 8037854:	4633      	mov	r3, r6
 8037856:	f7d9 f977 	bl	8010b48 <__aeabi_dcmpgt>
 803785a:	2800      	cmp	r0, #0
 803785c:	f040 828c 	bne.w	8037d78 <_dtoa_r+0x910>
 8037860:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8037864:	462a      	mov	r2, r5
 8037866:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 803786a:	f7d9 f94f 	bl	8010b0c <__aeabi_dcmplt>
 803786e:	2800      	cmp	r0, #0
 8037870:	f040 8129 	bne.w	8037ac6 <_dtoa_r+0x65e>
 8037874:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8037878:	e9cd 3402 	strd	r3, r4, [sp, #8]
 803787c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 803787e:	2b00      	cmp	r3, #0
 8037880:	f2c0 815b 	blt.w	8037b3a <_dtoa_r+0x6d2>
 8037884:	2f0e      	cmp	r7, #14
 8037886:	f300 8158 	bgt.w	8037b3a <_dtoa_r+0x6d2>
 803788a:	4b5b      	ldr	r3, [pc, #364]	@ (80379f8 <_dtoa_r+0x590>)
 803788c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8037890:	ed93 7b00 	vldr	d7, [r3]
 8037894:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8037896:	2b00      	cmp	r3, #0
 8037898:	ed8d 7b00 	vstr	d7, [sp]
 803789c:	da03      	bge.n	80378a6 <_dtoa_r+0x43e>
 803789e:	9b07      	ldr	r3, [sp, #28]
 80378a0:	2b00      	cmp	r3, #0
 80378a2:	f340 8102 	ble.w	8037aaa <_dtoa_r+0x642>
 80378a6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80378aa:	4656      	mov	r6, sl
 80378ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80378b0:	4620      	mov	r0, r4
 80378b2:	4629      	mov	r1, r5
 80378b4:	f7d8 ffe2 	bl	801087c <__aeabi_ddiv>
 80378b8:	f7d9 f966 	bl	8010b88 <__aeabi_d2iz>
 80378bc:	4680      	mov	r8, r0
 80378be:	f7d8 fe49 	bl	8010554 <__aeabi_i2d>
 80378c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80378c6:	f7d8 feaf 	bl	8010628 <__aeabi_dmul>
 80378ca:	4602      	mov	r2, r0
 80378cc:	460b      	mov	r3, r1
 80378ce:	4620      	mov	r0, r4
 80378d0:	4629      	mov	r1, r5
 80378d2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80378d6:	f7d8 fcef 	bl	80102b8 <__aeabi_dsub>
 80378da:	f806 4b01 	strb.w	r4, [r6], #1
 80378de:	9d07      	ldr	r5, [sp, #28]
 80378e0:	eba6 040a 	sub.w	r4, r6, sl
 80378e4:	42a5      	cmp	r5, r4
 80378e6:	4602      	mov	r2, r0
 80378e8:	460b      	mov	r3, r1
 80378ea:	f040 8118 	bne.w	8037b1e <_dtoa_r+0x6b6>
 80378ee:	f7d8 fce5 	bl	80102bc <__adddf3>
 80378f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80378f6:	4604      	mov	r4, r0
 80378f8:	460d      	mov	r5, r1
 80378fa:	f7d9 f925 	bl	8010b48 <__aeabi_dcmpgt>
 80378fe:	2800      	cmp	r0, #0
 8037900:	f040 80fa 	bne.w	8037af8 <_dtoa_r+0x690>
 8037904:	e9dd 2300 	ldrd	r2, r3, [sp]
 8037908:	4620      	mov	r0, r4
 803790a:	4629      	mov	r1, r5
 803790c:	f7d9 f8f4 	bl	8010af8 <__aeabi_dcmpeq>
 8037910:	b118      	cbz	r0, 803791a <_dtoa_r+0x4b2>
 8037912:	f018 0f01 	tst.w	r8, #1
 8037916:	f040 80ef 	bne.w	8037af8 <_dtoa_r+0x690>
 803791a:	4649      	mov	r1, r9
 803791c:	4658      	mov	r0, fp
 803791e:	f004 fff8 	bl	803c912 <_Bfree>
 8037922:	2300      	movs	r3, #0
 8037924:	7033      	strb	r3, [r6, #0]
 8037926:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8037928:	3701      	adds	r7, #1
 803792a:	601f      	str	r7, [r3, #0]
 803792c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 803792e:	2b00      	cmp	r3, #0
 8037930:	f43f add1 	beq.w	80374d6 <_dtoa_r+0x6e>
 8037934:	601e      	str	r6, [r3, #0]
 8037936:	e5ce      	b.n	80374d6 <_dtoa_r+0x6e>
 8037938:	07e2      	lsls	r2, r4, #31
 803793a:	d505      	bpl.n	8037948 <_dtoa_r+0x4e0>
 803793c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8037940:	f7d8 fe72 	bl	8010628 <__aeabi_dmul>
 8037944:	3601      	adds	r6, #1
 8037946:	2301      	movs	r3, #1
 8037948:	1064      	asrs	r4, r4, #1
 803794a:	3508      	adds	r5, #8
 803794c:	e73f      	b.n	80377ce <_dtoa_r+0x366>
 803794e:	2602      	movs	r6, #2
 8037950:	e742      	b.n	80377d8 <_dtoa_r+0x370>
 8037952:	9c07      	ldr	r4, [sp, #28]
 8037954:	9704      	str	r7, [sp, #16]
 8037956:	e761      	b.n	803781c <_dtoa_r+0x3b4>
 8037958:	4b27      	ldr	r3, [pc, #156]	@ (80379f8 <_dtoa_r+0x590>)
 803795a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 803795c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8037960:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8037964:	4454      	add	r4, sl
 8037966:	2900      	cmp	r1, #0
 8037968:	d054      	beq.n	8037a14 <_dtoa_r+0x5ac>
 803796a:	4929      	ldr	r1, [pc, #164]	@ (8037a10 <_dtoa_r+0x5a8>)
 803796c:	2000      	movs	r0, #0
 803796e:	f7d8 ff85 	bl	801087c <__aeabi_ddiv>
 8037972:	4633      	mov	r3, r6
 8037974:	462a      	mov	r2, r5
 8037976:	f7d8 fc9f 	bl	80102b8 <__aeabi_dsub>
 803797a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 803797e:	4656      	mov	r6, sl
 8037980:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8037984:	f7d9 f900 	bl	8010b88 <__aeabi_d2iz>
 8037988:	4605      	mov	r5, r0
 803798a:	f7d8 fde3 	bl	8010554 <__aeabi_i2d>
 803798e:	4602      	mov	r2, r0
 8037990:	460b      	mov	r3, r1
 8037992:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8037996:	f7d8 fc8f 	bl	80102b8 <__aeabi_dsub>
 803799a:	3530      	adds	r5, #48	@ 0x30
 803799c:	4602      	mov	r2, r0
 803799e:	460b      	mov	r3, r1
 80379a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80379a4:	f806 5b01 	strb.w	r5, [r6], #1
 80379a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80379ac:	f7d9 f8ae 	bl	8010b0c <__aeabi_dcmplt>
 80379b0:	2800      	cmp	r0, #0
 80379b2:	d172      	bne.n	8037a9a <_dtoa_r+0x632>
 80379b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80379b8:	4911      	ldr	r1, [pc, #68]	@ (8037a00 <_dtoa_r+0x598>)
 80379ba:	2000      	movs	r0, #0
 80379bc:	f7d8 fc7c 	bl	80102b8 <__aeabi_dsub>
 80379c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80379c4:	f7d9 f8a2 	bl	8010b0c <__aeabi_dcmplt>
 80379c8:	2800      	cmp	r0, #0
 80379ca:	f040 8096 	bne.w	8037afa <_dtoa_r+0x692>
 80379ce:	42a6      	cmp	r6, r4
 80379d0:	f43f af50 	beq.w	8037874 <_dtoa_r+0x40c>
 80379d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80379d8:	4b0a      	ldr	r3, [pc, #40]	@ (8037a04 <_dtoa_r+0x59c>)
 80379da:	2200      	movs	r2, #0
 80379dc:	f7d8 fe24 	bl	8010628 <__aeabi_dmul>
 80379e0:	4b08      	ldr	r3, [pc, #32]	@ (8037a04 <_dtoa_r+0x59c>)
 80379e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80379e6:	2200      	movs	r2, #0
 80379e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80379ec:	f7d8 fe1c 	bl	8010628 <__aeabi_dmul>
 80379f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80379f4:	e7c4      	b.n	8037980 <_dtoa_r+0x518>
 80379f6:	bf00      	nop
 80379f8:	08044de8 	.word	0x08044de8
 80379fc:	08044dc0 	.word	0x08044dc0
 8037a00:	3ff00000 	.word	0x3ff00000
 8037a04:	40240000 	.word	0x40240000
 8037a08:	401c0000 	.word	0x401c0000
 8037a0c:	40140000 	.word	0x40140000
 8037a10:	3fe00000 	.word	0x3fe00000
 8037a14:	4631      	mov	r1, r6
 8037a16:	4628      	mov	r0, r5
 8037a18:	f7d8 fe06 	bl	8010628 <__aeabi_dmul>
 8037a1c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8037a20:	9415      	str	r4, [sp, #84]	@ 0x54
 8037a22:	4656      	mov	r6, sl
 8037a24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8037a28:	f7d9 f8ae 	bl	8010b88 <__aeabi_d2iz>
 8037a2c:	4605      	mov	r5, r0
 8037a2e:	f7d8 fd91 	bl	8010554 <__aeabi_i2d>
 8037a32:	4602      	mov	r2, r0
 8037a34:	460b      	mov	r3, r1
 8037a36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8037a3a:	f7d8 fc3d 	bl	80102b8 <__aeabi_dsub>
 8037a3e:	3530      	adds	r5, #48	@ 0x30
 8037a40:	f806 5b01 	strb.w	r5, [r6], #1
 8037a44:	4602      	mov	r2, r0
 8037a46:	460b      	mov	r3, r1
 8037a48:	42a6      	cmp	r6, r4
 8037a4a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8037a4e:	f04f 0200 	mov.w	r2, #0
 8037a52:	d124      	bne.n	8037a9e <_dtoa_r+0x636>
 8037a54:	4bac      	ldr	r3, [pc, #688]	@ (8037d08 <_dtoa_r+0x8a0>)
 8037a56:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8037a5a:	f7d8 fc2f 	bl	80102bc <__adddf3>
 8037a5e:	4602      	mov	r2, r0
 8037a60:	460b      	mov	r3, r1
 8037a62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8037a66:	f7d9 f86f 	bl	8010b48 <__aeabi_dcmpgt>
 8037a6a:	2800      	cmp	r0, #0
 8037a6c:	d145      	bne.n	8037afa <_dtoa_r+0x692>
 8037a6e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8037a72:	49a5      	ldr	r1, [pc, #660]	@ (8037d08 <_dtoa_r+0x8a0>)
 8037a74:	2000      	movs	r0, #0
 8037a76:	f7d8 fc1f 	bl	80102b8 <__aeabi_dsub>
 8037a7a:	4602      	mov	r2, r0
 8037a7c:	460b      	mov	r3, r1
 8037a7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8037a82:	f7d9 f843 	bl	8010b0c <__aeabi_dcmplt>
 8037a86:	2800      	cmp	r0, #0
 8037a88:	f43f aef4 	beq.w	8037874 <_dtoa_r+0x40c>
 8037a8c:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8037a8e:	1e73      	subs	r3, r6, #1
 8037a90:	9315      	str	r3, [sp, #84]	@ 0x54
 8037a92:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8037a96:	2b30      	cmp	r3, #48	@ 0x30
 8037a98:	d0f8      	beq.n	8037a8c <_dtoa_r+0x624>
 8037a9a:	9f04      	ldr	r7, [sp, #16]
 8037a9c:	e73d      	b.n	803791a <_dtoa_r+0x4b2>
 8037a9e:	4b9b      	ldr	r3, [pc, #620]	@ (8037d0c <_dtoa_r+0x8a4>)
 8037aa0:	f7d8 fdc2 	bl	8010628 <__aeabi_dmul>
 8037aa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8037aa8:	e7bc      	b.n	8037a24 <_dtoa_r+0x5bc>
 8037aaa:	d10c      	bne.n	8037ac6 <_dtoa_r+0x65e>
 8037aac:	4b98      	ldr	r3, [pc, #608]	@ (8037d10 <_dtoa_r+0x8a8>)
 8037aae:	2200      	movs	r2, #0
 8037ab0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8037ab4:	f7d8 fdb8 	bl	8010628 <__aeabi_dmul>
 8037ab8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8037abc:	f7d9 f83a 	bl	8010b34 <__aeabi_dcmpge>
 8037ac0:	2800      	cmp	r0, #0
 8037ac2:	f000 8157 	beq.w	8037d74 <_dtoa_r+0x90c>
 8037ac6:	2400      	movs	r4, #0
 8037ac8:	4625      	mov	r5, r4
 8037aca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8037acc:	43db      	mvns	r3, r3
 8037ace:	9304      	str	r3, [sp, #16]
 8037ad0:	4656      	mov	r6, sl
 8037ad2:	2700      	movs	r7, #0
 8037ad4:	4621      	mov	r1, r4
 8037ad6:	4658      	mov	r0, fp
 8037ad8:	f004 ff1b 	bl	803c912 <_Bfree>
 8037adc:	2d00      	cmp	r5, #0
 8037ade:	d0dc      	beq.n	8037a9a <_dtoa_r+0x632>
 8037ae0:	b12f      	cbz	r7, 8037aee <_dtoa_r+0x686>
 8037ae2:	42af      	cmp	r7, r5
 8037ae4:	d003      	beq.n	8037aee <_dtoa_r+0x686>
 8037ae6:	4639      	mov	r1, r7
 8037ae8:	4658      	mov	r0, fp
 8037aea:	f004 ff12 	bl	803c912 <_Bfree>
 8037aee:	4629      	mov	r1, r5
 8037af0:	4658      	mov	r0, fp
 8037af2:	f004 ff0e 	bl	803c912 <_Bfree>
 8037af6:	e7d0      	b.n	8037a9a <_dtoa_r+0x632>
 8037af8:	9704      	str	r7, [sp, #16]
 8037afa:	4633      	mov	r3, r6
 8037afc:	461e      	mov	r6, r3
 8037afe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8037b02:	2a39      	cmp	r2, #57	@ 0x39
 8037b04:	d107      	bne.n	8037b16 <_dtoa_r+0x6ae>
 8037b06:	459a      	cmp	sl, r3
 8037b08:	d1f8      	bne.n	8037afc <_dtoa_r+0x694>
 8037b0a:	9a04      	ldr	r2, [sp, #16]
 8037b0c:	3201      	adds	r2, #1
 8037b0e:	9204      	str	r2, [sp, #16]
 8037b10:	2230      	movs	r2, #48	@ 0x30
 8037b12:	f88a 2000 	strb.w	r2, [sl]
 8037b16:	781a      	ldrb	r2, [r3, #0]
 8037b18:	3201      	adds	r2, #1
 8037b1a:	701a      	strb	r2, [r3, #0]
 8037b1c:	e7bd      	b.n	8037a9a <_dtoa_r+0x632>
 8037b1e:	4b7b      	ldr	r3, [pc, #492]	@ (8037d0c <_dtoa_r+0x8a4>)
 8037b20:	2200      	movs	r2, #0
 8037b22:	f7d8 fd81 	bl	8010628 <__aeabi_dmul>
 8037b26:	2200      	movs	r2, #0
 8037b28:	2300      	movs	r3, #0
 8037b2a:	4604      	mov	r4, r0
 8037b2c:	460d      	mov	r5, r1
 8037b2e:	f7d8 ffe3 	bl	8010af8 <__aeabi_dcmpeq>
 8037b32:	2800      	cmp	r0, #0
 8037b34:	f43f aeba 	beq.w	80378ac <_dtoa_r+0x444>
 8037b38:	e6ef      	b.n	803791a <_dtoa_r+0x4b2>
 8037b3a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8037b3c:	2a00      	cmp	r2, #0
 8037b3e:	f000 80db 	beq.w	8037cf8 <_dtoa_r+0x890>
 8037b42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8037b44:	2a01      	cmp	r2, #1
 8037b46:	f300 80bf 	bgt.w	8037cc8 <_dtoa_r+0x860>
 8037b4a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8037b4c:	2a00      	cmp	r2, #0
 8037b4e:	f000 80b7 	beq.w	8037cc0 <_dtoa_r+0x858>
 8037b52:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8037b56:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8037b58:	4646      	mov	r6, r8
 8037b5a:	9a08      	ldr	r2, [sp, #32]
 8037b5c:	2101      	movs	r1, #1
 8037b5e:	441a      	add	r2, r3
 8037b60:	4658      	mov	r0, fp
 8037b62:	4498      	add	r8, r3
 8037b64:	9208      	str	r2, [sp, #32]
 8037b66:	f004 ffb9 	bl	803cadc <__i2b>
 8037b6a:	4605      	mov	r5, r0
 8037b6c:	b15e      	cbz	r6, 8037b86 <_dtoa_r+0x71e>
 8037b6e:	9b08      	ldr	r3, [sp, #32]
 8037b70:	2b00      	cmp	r3, #0
 8037b72:	dd08      	ble.n	8037b86 <_dtoa_r+0x71e>
 8037b74:	42b3      	cmp	r3, r6
 8037b76:	9a08      	ldr	r2, [sp, #32]
 8037b78:	bfa8      	it	ge
 8037b7a:	4633      	movge	r3, r6
 8037b7c:	eba8 0803 	sub.w	r8, r8, r3
 8037b80:	1af6      	subs	r6, r6, r3
 8037b82:	1ad3      	subs	r3, r2, r3
 8037b84:	9308      	str	r3, [sp, #32]
 8037b86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8037b88:	b1f3      	cbz	r3, 8037bc8 <_dtoa_r+0x760>
 8037b8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8037b8c:	2b00      	cmp	r3, #0
 8037b8e:	f000 80b7 	beq.w	8037d00 <_dtoa_r+0x898>
 8037b92:	b18c      	cbz	r4, 8037bb8 <_dtoa_r+0x750>
 8037b94:	4629      	mov	r1, r5
 8037b96:	4622      	mov	r2, r4
 8037b98:	4658      	mov	r0, fp
 8037b9a:	f005 f85f 	bl	803cc5c <__pow5mult>
 8037b9e:	464a      	mov	r2, r9
 8037ba0:	4601      	mov	r1, r0
 8037ba2:	4605      	mov	r5, r0
 8037ba4:	4658      	mov	r0, fp
 8037ba6:	f004 ffaf 	bl	803cb08 <__multiply>
 8037baa:	4649      	mov	r1, r9
 8037bac:	9004      	str	r0, [sp, #16]
 8037bae:	4658      	mov	r0, fp
 8037bb0:	f004 feaf 	bl	803c912 <_Bfree>
 8037bb4:	9b04      	ldr	r3, [sp, #16]
 8037bb6:	4699      	mov	r9, r3
 8037bb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8037bba:	1b1a      	subs	r2, r3, r4
 8037bbc:	d004      	beq.n	8037bc8 <_dtoa_r+0x760>
 8037bbe:	4649      	mov	r1, r9
 8037bc0:	4658      	mov	r0, fp
 8037bc2:	f005 f84b 	bl	803cc5c <__pow5mult>
 8037bc6:	4681      	mov	r9, r0
 8037bc8:	2101      	movs	r1, #1
 8037bca:	4658      	mov	r0, fp
 8037bcc:	f004 ff86 	bl	803cadc <__i2b>
 8037bd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8037bd2:	4604      	mov	r4, r0
 8037bd4:	2b00      	cmp	r3, #0
 8037bd6:	f000 81cc 	beq.w	8037f72 <_dtoa_r+0xb0a>
 8037bda:	461a      	mov	r2, r3
 8037bdc:	4601      	mov	r1, r0
 8037bde:	4658      	mov	r0, fp
 8037be0:	f005 f83c 	bl	803cc5c <__pow5mult>
 8037be4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8037be6:	2b01      	cmp	r3, #1
 8037be8:	4604      	mov	r4, r0
 8037bea:	f300 8095 	bgt.w	8037d18 <_dtoa_r+0x8b0>
 8037bee:	9b02      	ldr	r3, [sp, #8]
 8037bf0:	2b00      	cmp	r3, #0
 8037bf2:	f040 8087 	bne.w	8037d04 <_dtoa_r+0x89c>
 8037bf6:	9b03      	ldr	r3, [sp, #12]
 8037bf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8037bfc:	2b00      	cmp	r3, #0
 8037bfe:	f040 8089 	bne.w	8037d14 <_dtoa_r+0x8ac>
 8037c02:	9b03      	ldr	r3, [sp, #12]
 8037c04:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8037c08:	0d1b      	lsrs	r3, r3, #20
 8037c0a:	051b      	lsls	r3, r3, #20
 8037c0c:	b12b      	cbz	r3, 8037c1a <_dtoa_r+0x7b2>
 8037c0e:	9b08      	ldr	r3, [sp, #32]
 8037c10:	3301      	adds	r3, #1
 8037c12:	9308      	str	r3, [sp, #32]
 8037c14:	f108 0801 	add.w	r8, r8, #1
 8037c18:	2301      	movs	r3, #1
 8037c1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8037c1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8037c1e:	2b00      	cmp	r3, #0
 8037c20:	f000 81ad 	beq.w	8037f7e <_dtoa_r+0xb16>
 8037c24:	6923      	ldr	r3, [r4, #16]
 8037c26:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8037c2a:	6918      	ldr	r0, [r3, #16]
 8037c2c:	f004 ff0a 	bl	803ca44 <__hi0bits>
 8037c30:	f1c0 0020 	rsb	r0, r0, #32
 8037c34:	9b08      	ldr	r3, [sp, #32]
 8037c36:	4418      	add	r0, r3
 8037c38:	f010 001f 	ands.w	r0, r0, #31
 8037c3c:	d077      	beq.n	8037d2e <_dtoa_r+0x8c6>
 8037c3e:	f1c0 0320 	rsb	r3, r0, #32
 8037c42:	2b04      	cmp	r3, #4
 8037c44:	dd6b      	ble.n	8037d1e <_dtoa_r+0x8b6>
 8037c46:	9b08      	ldr	r3, [sp, #32]
 8037c48:	f1c0 001c 	rsb	r0, r0, #28
 8037c4c:	4403      	add	r3, r0
 8037c4e:	4480      	add	r8, r0
 8037c50:	4406      	add	r6, r0
 8037c52:	9308      	str	r3, [sp, #32]
 8037c54:	f1b8 0f00 	cmp.w	r8, #0
 8037c58:	dd05      	ble.n	8037c66 <_dtoa_r+0x7fe>
 8037c5a:	4649      	mov	r1, r9
 8037c5c:	4642      	mov	r2, r8
 8037c5e:	4658      	mov	r0, fp
 8037c60:	f005 f83c 	bl	803ccdc <__lshift>
 8037c64:	4681      	mov	r9, r0
 8037c66:	9b08      	ldr	r3, [sp, #32]
 8037c68:	2b00      	cmp	r3, #0
 8037c6a:	dd05      	ble.n	8037c78 <_dtoa_r+0x810>
 8037c6c:	4621      	mov	r1, r4
 8037c6e:	461a      	mov	r2, r3
 8037c70:	4658      	mov	r0, fp
 8037c72:	f005 f833 	bl	803ccdc <__lshift>
 8037c76:	4604      	mov	r4, r0
 8037c78:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8037c7a:	2b00      	cmp	r3, #0
 8037c7c:	d059      	beq.n	8037d32 <_dtoa_r+0x8ca>
 8037c7e:	4621      	mov	r1, r4
 8037c80:	4648      	mov	r0, r9
 8037c82:	f005 f897 	bl	803cdb4 <__mcmp>
 8037c86:	2800      	cmp	r0, #0
 8037c88:	da53      	bge.n	8037d32 <_dtoa_r+0x8ca>
 8037c8a:	1e7b      	subs	r3, r7, #1
 8037c8c:	9304      	str	r3, [sp, #16]
 8037c8e:	4649      	mov	r1, r9
 8037c90:	2300      	movs	r3, #0
 8037c92:	220a      	movs	r2, #10
 8037c94:	4658      	mov	r0, fp
 8037c96:	f004 fe45 	bl	803c924 <__multadd>
 8037c9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8037c9c:	4681      	mov	r9, r0
 8037c9e:	2b00      	cmp	r3, #0
 8037ca0:	f000 816f 	beq.w	8037f82 <_dtoa_r+0xb1a>
 8037ca4:	2300      	movs	r3, #0
 8037ca6:	4629      	mov	r1, r5
 8037ca8:	220a      	movs	r2, #10
 8037caa:	4658      	mov	r0, fp
 8037cac:	f004 fe3a 	bl	803c924 <__multadd>
 8037cb0:	9b00      	ldr	r3, [sp, #0]
 8037cb2:	2b00      	cmp	r3, #0
 8037cb4:	4605      	mov	r5, r0
 8037cb6:	dc67      	bgt.n	8037d88 <_dtoa_r+0x920>
 8037cb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8037cba:	2b02      	cmp	r3, #2
 8037cbc:	dc41      	bgt.n	8037d42 <_dtoa_r+0x8da>
 8037cbe:	e063      	b.n	8037d88 <_dtoa_r+0x920>
 8037cc0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8037cc2:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8037cc6:	e746      	b.n	8037b56 <_dtoa_r+0x6ee>
 8037cc8:	9b07      	ldr	r3, [sp, #28]
 8037cca:	1e5c      	subs	r4, r3, #1
 8037ccc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8037cce:	42a3      	cmp	r3, r4
 8037cd0:	bfbf      	itttt	lt
 8037cd2:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8037cd4:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8037cd6:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8037cd8:	1ae3      	sublt	r3, r4, r3
 8037cda:	bfb4      	ite	lt
 8037cdc:	18d2      	addlt	r2, r2, r3
 8037cde:	1b1c      	subge	r4, r3, r4
 8037ce0:	9b07      	ldr	r3, [sp, #28]
 8037ce2:	bfbc      	itt	lt
 8037ce4:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8037ce6:	2400      	movlt	r4, #0
 8037ce8:	2b00      	cmp	r3, #0
 8037cea:	bfb5      	itete	lt
 8037cec:	eba8 0603 	sublt.w	r6, r8, r3
 8037cf0:	9b07      	ldrge	r3, [sp, #28]
 8037cf2:	2300      	movlt	r3, #0
 8037cf4:	4646      	movge	r6, r8
 8037cf6:	e730      	b.n	8037b5a <_dtoa_r+0x6f2>
 8037cf8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8037cfa:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8037cfc:	4646      	mov	r6, r8
 8037cfe:	e735      	b.n	8037b6c <_dtoa_r+0x704>
 8037d00:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8037d02:	e75c      	b.n	8037bbe <_dtoa_r+0x756>
 8037d04:	2300      	movs	r3, #0
 8037d06:	e788      	b.n	8037c1a <_dtoa_r+0x7b2>
 8037d08:	3fe00000 	.word	0x3fe00000
 8037d0c:	40240000 	.word	0x40240000
 8037d10:	40140000 	.word	0x40140000
 8037d14:	9b02      	ldr	r3, [sp, #8]
 8037d16:	e780      	b.n	8037c1a <_dtoa_r+0x7b2>
 8037d18:	2300      	movs	r3, #0
 8037d1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8037d1c:	e782      	b.n	8037c24 <_dtoa_r+0x7bc>
 8037d1e:	d099      	beq.n	8037c54 <_dtoa_r+0x7ec>
 8037d20:	9a08      	ldr	r2, [sp, #32]
 8037d22:	331c      	adds	r3, #28
 8037d24:	441a      	add	r2, r3
 8037d26:	4498      	add	r8, r3
 8037d28:	441e      	add	r6, r3
 8037d2a:	9208      	str	r2, [sp, #32]
 8037d2c:	e792      	b.n	8037c54 <_dtoa_r+0x7ec>
 8037d2e:	4603      	mov	r3, r0
 8037d30:	e7f6      	b.n	8037d20 <_dtoa_r+0x8b8>
 8037d32:	9b07      	ldr	r3, [sp, #28]
 8037d34:	9704      	str	r7, [sp, #16]
 8037d36:	2b00      	cmp	r3, #0
 8037d38:	dc20      	bgt.n	8037d7c <_dtoa_r+0x914>
 8037d3a:	9300      	str	r3, [sp, #0]
 8037d3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8037d3e:	2b02      	cmp	r3, #2
 8037d40:	dd1e      	ble.n	8037d80 <_dtoa_r+0x918>
 8037d42:	9b00      	ldr	r3, [sp, #0]
 8037d44:	2b00      	cmp	r3, #0
 8037d46:	f47f aec0 	bne.w	8037aca <_dtoa_r+0x662>
 8037d4a:	4621      	mov	r1, r4
 8037d4c:	2205      	movs	r2, #5
 8037d4e:	4658      	mov	r0, fp
 8037d50:	f004 fde8 	bl	803c924 <__multadd>
 8037d54:	4601      	mov	r1, r0
 8037d56:	4604      	mov	r4, r0
 8037d58:	4648      	mov	r0, r9
 8037d5a:	f005 f82b 	bl	803cdb4 <__mcmp>
 8037d5e:	2800      	cmp	r0, #0
 8037d60:	f77f aeb3 	ble.w	8037aca <_dtoa_r+0x662>
 8037d64:	4656      	mov	r6, sl
 8037d66:	2331      	movs	r3, #49	@ 0x31
 8037d68:	f806 3b01 	strb.w	r3, [r6], #1
 8037d6c:	9b04      	ldr	r3, [sp, #16]
 8037d6e:	3301      	adds	r3, #1
 8037d70:	9304      	str	r3, [sp, #16]
 8037d72:	e6ae      	b.n	8037ad2 <_dtoa_r+0x66a>
 8037d74:	9c07      	ldr	r4, [sp, #28]
 8037d76:	9704      	str	r7, [sp, #16]
 8037d78:	4625      	mov	r5, r4
 8037d7a:	e7f3      	b.n	8037d64 <_dtoa_r+0x8fc>
 8037d7c:	9b07      	ldr	r3, [sp, #28]
 8037d7e:	9300      	str	r3, [sp, #0]
 8037d80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8037d82:	2b00      	cmp	r3, #0
 8037d84:	f000 8101 	beq.w	8037f8a <_dtoa_r+0xb22>
 8037d88:	2e00      	cmp	r6, #0
 8037d8a:	dd05      	ble.n	8037d98 <_dtoa_r+0x930>
 8037d8c:	4629      	mov	r1, r5
 8037d8e:	4632      	mov	r2, r6
 8037d90:	4658      	mov	r0, fp
 8037d92:	f004 ffa3 	bl	803ccdc <__lshift>
 8037d96:	4605      	mov	r5, r0
 8037d98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8037d9a:	2b00      	cmp	r3, #0
 8037d9c:	d059      	beq.n	8037e52 <_dtoa_r+0x9ea>
 8037d9e:	6869      	ldr	r1, [r5, #4]
 8037da0:	4658      	mov	r0, fp
 8037da2:	f004 fd91 	bl	803c8c8 <_Balloc>
 8037da6:	4606      	mov	r6, r0
 8037da8:	b920      	cbnz	r0, 8037db4 <_dtoa_r+0x94c>
 8037daa:	4b83      	ldr	r3, [pc, #524]	@ (8037fb8 <_dtoa_r+0xb50>)
 8037dac:	4602      	mov	r2, r0
 8037dae:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8037db2:	e480      	b.n	80376b6 <_dtoa_r+0x24e>
 8037db4:	692a      	ldr	r2, [r5, #16]
 8037db6:	3202      	adds	r2, #2
 8037db8:	0092      	lsls	r2, r2, #2
 8037dba:	f105 010c 	add.w	r1, r5, #12
 8037dbe:	300c      	adds	r0, #12
 8037dc0:	f7ff fa52 	bl	8037268 <memcpy>
 8037dc4:	2201      	movs	r2, #1
 8037dc6:	4631      	mov	r1, r6
 8037dc8:	4658      	mov	r0, fp
 8037dca:	f004 ff87 	bl	803ccdc <__lshift>
 8037dce:	f10a 0301 	add.w	r3, sl, #1
 8037dd2:	9307      	str	r3, [sp, #28]
 8037dd4:	9b00      	ldr	r3, [sp, #0]
 8037dd6:	4453      	add	r3, sl
 8037dd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8037dda:	9b02      	ldr	r3, [sp, #8]
 8037ddc:	f003 0301 	and.w	r3, r3, #1
 8037de0:	462f      	mov	r7, r5
 8037de2:	930a      	str	r3, [sp, #40]	@ 0x28
 8037de4:	4605      	mov	r5, r0
 8037de6:	9b07      	ldr	r3, [sp, #28]
 8037de8:	4621      	mov	r1, r4
 8037dea:	3b01      	subs	r3, #1
 8037dec:	4648      	mov	r0, r9
 8037dee:	9300      	str	r3, [sp, #0]
 8037df0:	f7ff faaf 	bl	8037352 <quorem>
 8037df4:	4639      	mov	r1, r7
 8037df6:	9002      	str	r0, [sp, #8]
 8037df8:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8037dfc:	4648      	mov	r0, r9
 8037dfe:	f004 ffd9 	bl	803cdb4 <__mcmp>
 8037e02:	462a      	mov	r2, r5
 8037e04:	9008      	str	r0, [sp, #32]
 8037e06:	4621      	mov	r1, r4
 8037e08:	4658      	mov	r0, fp
 8037e0a:	f004 ffef 	bl	803cdec <__mdiff>
 8037e0e:	68c2      	ldr	r2, [r0, #12]
 8037e10:	4606      	mov	r6, r0
 8037e12:	bb02      	cbnz	r2, 8037e56 <_dtoa_r+0x9ee>
 8037e14:	4601      	mov	r1, r0
 8037e16:	4648      	mov	r0, r9
 8037e18:	f004 ffcc 	bl	803cdb4 <__mcmp>
 8037e1c:	4602      	mov	r2, r0
 8037e1e:	4631      	mov	r1, r6
 8037e20:	4658      	mov	r0, fp
 8037e22:	920e      	str	r2, [sp, #56]	@ 0x38
 8037e24:	f004 fd75 	bl	803c912 <_Bfree>
 8037e28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8037e2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8037e2c:	9e07      	ldr	r6, [sp, #28]
 8037e2e:	ea43 0102 	orr.w	r1, r3, r2
 8037e32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8037e34:	4319      	orrs	r1, r3
 8037e36:	d110      	bne.n	8037e5a <_dtoa_r+0x9f2>
 8037e38:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8037e3c:	d029      	beq.n	8037e92 <_dtoa_r+0xa2a>
 8037e3e:	9b08      	ldr	r3, [sp, #32]
 8037e40:	2b00      	cmp	r3, #0
 8037e42:	dd02      	ble.n	8037e4a <_dtoa_r+0x9e2>
 8037e44:	9b02      	ldr	r3, [sp, #8]
 8037e46:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8037e4a:	9b00      	ldr	r3, [sp, #0]
 8037e4c:	f883 8000 	strb.w	r8, [r3]
 8037e50:	e640      	b.n	8037ad4 <_dtoa_r+0x66c>
 8037e52:	4628      	mov	r0, r5
 8037e54:	e7bb      	b.n	8037dce <_dtoa_r+0x966>
 8037e56:	2201      	movs	r2, #1
 8037e58:	e7e1      	b.n	8037e1e <_dtoa_r+0x9b6>
 8037e5a:	9b08      	ldr	r3, [sp, #32]
 8037e5c:	2b00      	cmp	r3, #0
 8037e5e:	db04      	blt.n	8037e6a <_dtoa_r+0xa02>
 8037e60:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8037e62:	430b      	orrs	r3, r1
 8037e64:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8037e66:	430b      	orrs	r3, r1
 8037e68:	d120      	bne.n	8037eac <_dtoa_r+0xa44>
 8037e6a:	2a00      	cmp	r2, #0
 8037e6c:	dded      	ble.n	8037e4a <_dtoa_r+0x9e2>
 8037e6e:	4649      	mov	r1, r9
 8037e70:	2201      	movs	r2, #1
 8037e72:	4658      	mov	r0, fp
 8037e74:	f004 ff32 	bl	803ccdc <__lshift>
 8037e78:	4621      	mov	r1, r4
 8037e7a:	4681      	mov	r9, r0
 8037e7c:	f004 ff9a 	bl	803cdb4 <__mcmp>
 8037e80:	2800      	cmp	r0, #0
 8037e82:	dc03      	bgt.n	8037e8c <_dtoa_r+0xa24>
 8037e84:	d1e1      	bne.n	8037e4a <_dtoa_r+0x9e2>
 8037e86:	f018 0f01 	tst.w	r8, #1
 8037e8a:	d0de      	beq.n	8037e4a <_dtoa_r+0x9e2>
 8037e8c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8037e90:	d1d8      	bne.n	8037e44 <_dtoa_r+0x9dc>
 8037e92:	9a00      	ldr	r2, [sp, #0]
 8037e94:	2339      	movs	r3, #57	@ 0x39
 8037e96:	7013      	strb	r3, [r2, #0]
 8037e98:	4633      	mov	r3, r6
 8037e9a:	461e      	mov	r6, r3
 8037e9c:	3b01      	subs	r3, #1
 8037e9e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8037ea2:	2a39      	cmp	r2, #57	@ 0x39
 8037ea4:	d052      	beq.n	8037f4c <_dtoa_r+0xae4>
 8037ea6:	3201      	adds	r2, #1
 8037ea8:	701a      	strb	r2, [r3, #0]
 8037eaa:	e613      	b.n	8037ad4 <_dtoa_r+0x66c>
 8037eac:	2a00      	cmp	r2, #0
 8037eae:	dd07      	ble.n	8037ec0 <_dtoa_r+0xa58>
 8037eb0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8037eb4:	d0ed      	beq.n	8037e92 <_dtoa_r+0xa2a>
 8037eb6:	9a00      	ldr	r2, [sp, #0]
 8037eb8:	f108 0301 	add.w	r3, r8, #1
 8037ebc:	7013      	strb	r3, [r2, #0]
 8037ebe:	e609      	b.n	8037ad4 <_dtoa_r+0x66c>
 8037ec0:	9b07      	ldr	r3, [sp, #28]
 8037ec2:	9a07      	ldr	r2, [sp, #28]
 8037ec4:	f803 8c01 	strb.w	r8, [r3, #-1]
 8037ec8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8037eca:	4293      	cmp	r3, r2
 8037ecc:	d028      	beq.n	8037f20 <_dtoa_r+0xab8>
 8037ece:	4649      	mov	r1, r9
 8037ed0:	2300      	movs	r3, #0
 8037ed2:	220a      	movs	r2, #10
 8037ed4:	4658      	mov	r0, fp
 8037ed6:	f004 fd25 	bl	803c924 <__multadd>
 8037eda:	42af      	cmp	r7, r5
 8037edc:	4681      	mov	r9, r0
 8037ede:	f04f 0300 	mov.w	r3, #0
 8037ee2:	f04f 020a 	mov.w	r2, #10
 8037ee6:	4639      	mov	r1, r7
 8037ee8:	4658      	mov	r0, fp
 8037eea:	d107      	bne.n	8037efc <_dtoa_r+0xa94>
 8037eec:	f004 fd1a 	bl	803c924 <__multadd>
 8037ef0:	4607      	mov	r7, r0
 8037ef2:	4605      	mov	r5, r0
 8037ef4:	9b07      	ldr	r3, [sp, #28]
 8037ef6:	3301      	adds	r3, #1
 8037ef8:	9307      	str	r3, [sp, #28]
 8037efa:	e774      	b.n	8037de6 <_dtoa_r+0x97e>
 8037efc:	f004 fd12 	bl	803c924 <__multadd>
 8037f00:	4629      	mov	r1, r5
 8037f02:	4607      	mov	r7, r0
 8037f04:	2300      	movs	r3, #0
 8037f06:	220a      	movs	r2, #10
 8037f08:	4658      	mov	r0, fp
 8037f0a:	f004 fd0b 	bl	803c924 <__multadd>
 8037f0e:	4605      	mov	r5, r0
 8037f10:	e7f0      	b.n	8037ef4 <_dtoa_r+0xa8c>
 8037f12:	9b00      	ldr	r3, [sp, #0]
 8037f14:	2b00      	cmp	r3, #0
 8037f16:	bfcc      	ite	gt
 8037f18:	461e      	movgt	r6, r3
 8037f1a:	2601      	movle	r6, #1
 8037f1c:	4456      	add	r6, sl
 8037f1e:	2700      	movs	r7, #0
 8037f20:	4649      	mov	r1, r9
 8037f22:	2201      	movs	r2, #1
 8037f24:	4658      	mov	r0, fp
 8037f26:	f004 fed9 	bl	803ccdc <__lshift>
 8037f2a:	4621      	mov	r1, r4
 8037f2c:	4681      	mov	r9, r0
 8037f2e:	f004 ff41 	bl	803cdb4 <__mcmp>
 8037f32:	2800      	cmp	r0, #0
 8037f34:	dcb0      	bgt.n	8037e98 <_dtoa_r+0xa30>
 8037f36:	d102      	bne.n	8037f3e <_dtoa_r+0xad6>
 8037f38:	f018 0f01 	tst.w	r8, #1
 8037f3c:	d1ac      	bne.n	8037e98 <_dtoa_r+0xa30>
 8037f3e:	4633      	mov	r3, r6
 8037f40:	461e      	mov	r6, r3
 8037f42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8037f46:	2a30      	cmp	r2, #48	@ 0x30
 8037f48:	d0fa      	beq.n	8037f40 <_dtoa_r+0xad8>
 8037f4a:	e5c3      	b.n	8037ad4 <_dtoa_r+0x66c>
 8037f4c:	459a      	cmp	sl, r3
 8037f4e:	d1a4      	bne.n	8037e9a <_dtoa_r+0xa32>
 8037f50:	9b04      	ldr	r3, [sp, #16]
 8037f52:	3301      	adds	r3, #1
 8037f54:	9304      	str	r3, [sp, #16]
 8037f56:	2331      	movs	r3, #49	@ 0x31
 8037f58:	f88a 3000 	strb.w	r3, [sl]
 8037f5c:	e5ba      	b.n	8037ad4 <_dtoa_r+0x66c>
 8037f5e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8037f60:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8037fbc <_dtoa_r+0xb54>
 8037f64:	2b00      	cmp	r3, #0
 8037f66:	f43f aab6 	beq.w	80374d6 <_dtoa_r+0x6e>
 8037f6a:	f10a 0308 	add.w	r3, sl, #8
 8037f6e:	f7ff bab0 	b.w	80374d2 <_dtoa_r+0x6a>
 8037f72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8037f74:	2b01      	cmp	r3, #1
 8037f76:	f77f ae3a 	ble.w	8037bee <_dtoa_r+0x786>
 8037f7a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8037f7c:	930a      	str	r3, [sp, #40]	@ 0x28
 8037f7e:	2001      	movs	r0, #1
 8037f80:	e658      	b.n	8037c34 <_dtoa_r+0x7cc>
 8037f82:	9b00      	ldr	r3, [sp, #0]
 8037f84:	2b00      	cmp	r3, #0
 8037f86:	f77f aed9 	ble.w	8037d3c <_dtoa_r+0x8d4>
 8037f8a:	4656      	mov	r6, sl
 8037f8c:	4621      	mov	r1, r4
 8037f8e:	4648      	mov	r0, r9
 8037f90:	f7ff f9df 	bl	8037352 <quorem>
 8037f94:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8037f98:	f806 8b01 	strb.w	r8, [r6], #1
 8037f9c:	9b00      	ldr	r3, [sp, #0]
 8037f9e:	eba6 020a 	sub.w	r2, r6, sl
 8037fa2:	4293      	cmp	r3, r2
 8037fa4:	ddb5      	ble.n	8037f12 <_dtoa_r+0xaaa>
 8037fa6:	4649      	mov	r1, r9
 8037fa8:	2300      	movs	r3, #0
 8037faa:	220a      	movs	r2, #10
 8037fac:	4658      	mov	r0, fp
 8037fae:	f004 fcb9 	bl	803c924 <__multadd>
 8037fb2:	4681      	mov	r9, r0
 8037fb4:	e7ea      	b.n	8037f8c <_dtoa_r+0xb24>
 8037fb6:	bf00      	nop
 8037fb8:	08044c66 	.word	0x08044c66
 8037fbc:	08044c59 	.word	0x08044c59

08037fc0 <_malloc_trim_r>:
 8037fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8037fc4:	4606      	mov	r6, r0
 8037fc6:	2008      	movs	r0, #8
 8037fc8:	4689      	mov	r9, r1
 8037fca:	f006 fb53 	bl	803e674 <sysconf>
 8037fce:	4f24      	ldr	r7, [pc, #144]	@ (8038060 <_malloc_trim_r+0xa0>)
 8037fd0:	4680      	mov	r8, r0
 8037fd2:	4630      	mov	r0, r6
 8037fd4:	f004 fc6c 	bl	803c8b0 <__malloc_lock>
 8037fd8:	68bb      	ldr	r3, [r7, #8]
 8037fda:	685d      	ldr	r5, [r3, #4]
 8037fdc:	f025 0503 	bic.w	r5, r5, #3
 8037fe0:	f1a5 0411 	sub.w	r4, r5, #17
 8037fe4:	eba4 0409 	sub.w	r4, r4, r9
 8037fe8:	4444      	add	r4, r8
 8037fea:	fbb4 f4f8 	udiv	r4, r4, r8
 8037fee:	3c01      	subs	r4, #1
 8037ff0:	fb08 f404 	mul.w	r4, r8, r4
 8037ff4:	45a0      	cmp	r8, r4
 8037ff6:	dd05      	ble.n	8038004 <_malloc_trim_r+0x44>
 8037ff8:	4630      	mov	r0, r6
 8037ffa:	f004 fc5f 	bl	803c8bc <__malloc_unlock>
 8037ffe:	2000      	movs	r0, #0
 8038000:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8038004:	2100      	movs	r1, #0
 8038006:	4630      	mov	r0, r6
 8038008:	f006 fb24 	bl	803e654 <_sbrk_r>
 803800c:	68bb      	ldr	r3, [r7, #8]
 803800e:	442b      	add	r3, r5
 8038010:	4298      	cmp	r0, r3
 8038012:	d1f1      	bne.n	8037ff8 <_malloc_trim_r+0x38>
 8038014:	4261      	negs	r1, r4
 8038016:	4630      	mov	r0, r6
 8038018:	f006 fb1c 	bl	803e654 <_sbrk_r>
 803801c:	3001      	adds	r0, #1
 803801e:	d110      	bne.n	8038042 <_malloc_trim_r+0x82>
 8038020:	2100      	movs	r1, #0
 8038022:	4630      	mov	r0, r6
 8038024:	f006 fb16 	bl	803e654 <_sbrk_r>
 8038028:	68ba      	ldr	r2, [r7, #8]
 803802a:	1a83      	subs	r3, r0, r2
 803802c:	2b0f      	cmp	r3, #15
 803802e:	dde3      	ble.n	8037ff8 <_malloc_trim_r+0x38>
 8038030:	490c      	ldr	r1, [pc, #48]	@ (8038064 <_malloc_trim_r+0xa4>)
 8038032:	6809      	ldr	r1, [r1, #0]
 8038034:	1a40      	subs	r0, r0, r1
 8038036:	490c      	ldr	r1, [pc, #48]	@ (8038068 <_malloc_trim_r+0xa8>)
 8038038:	f043 0301 	orr.w	r3, r3, #1
 803803c:	6008      	str	r0, [r1, #0]
 803803e:	6053      	str	r3, [r2, #4]
 8038040:	e7da      	b.n	8037ff8 <_malloc_trim_r+0x38>
 8038042:	68bb      	ldr	r3, [r7, #8]
 8038044:	4a08      	ldr	r2, [pc, #32]	@ (8038068 <_malloc_trim_r+0xa8>)
 8038046:	1b2d      	subs	r5, r5, r4
 8038048:	f045 0501 	orr.w	r5, r5, #1
 803804c:	605d      	str	r5, [r3, #4]
 803804e:	6813      	ldr	r3, [r2, #0]
 8038050:	4630      	mov	r0, r6
 8038052:	1b1b      	subs	r3, r3, r4
 8038054:	6013      	str	r3, [r2, #0]
 8038056:	f004 fc31 	bl	803c8bc <__malloc_unlock>
 803805a:	2001      	movs	r0, #1
 803805c:	e7d0      	b.n	8038000 <_malloc_trim_r+0x40>
 803805e:	bf00      	nop
 8038060:	20000564 	.word	0x20000564
 8038064:	2000055c 	.word	0x2000055c
 8038068:	200182e8 	.word	0x200182e8

0803806c <_free_r>:
 803806c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803806e:	4604      	mov	r4, r0
 8038070:	460f      	mov	r7, r1
 8038072:	2900      	cmp	r1, #0
 8038074:	f000 80b1 	beq.w	80381da <_free_r+0x16e>
 8038078:	f004 fc1a 	bl	803c8b0 <__malloc_lock>
 803807c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8038080:	4d56      	ldr	r5, [pc, #344]	@ (80381dc <_free_r+0x170>)
 8038082:	f022 0001 	bic.w	r0, r2, #1
 8038086:	f1a7 0308 	sub.w	r3, r7, #8
 803808a:	eb03 0c00 	add.w	ip, r3, r0
 803808e:	68a9      	ldr	r1, [r5, #8]
 8038090:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8038094:	4561      	cmp	r1, ip
 8038096:	f026 0603 	bic.w	r6, r6, #3
 803809a:	f002 0201 	and.w	r2, r2, #1
 803809e:	d11b      	bne.n	80380d8 <_free_r+0x6c>
 80380a0:	4406      	add	r6, r0
 80380a2:	b93a      	cbnz	r2, 80380b4 <_free_r+0x48>
 80380a4:	f857 2c08 	ldr.w	r2, [r7, #-8]
 80380a8:	1a9b      	subs	r3, r3, r2
 80380aa:	4416      	add	r6, r2
 80380ac:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 80380b0:	60ca      	str	r2, [r1, #12]
 80380b2:	6091      	str	r1, [r2, #8]
 80380b4:	f046 0201 	orr.w	r2, r6, #1
 80380b8:	605a      	str	r2, [r3, #4]
 80380ba:	60ab      	str	r3, [r5, #8]
 80380bc:	4b48      	ldr	r3, [pc, #288]	@ (80381e0 <_free_r+0x174>)
 80380be:	681b      	ldr	r3, [r3, #0]
 80380c0:	42b3      	cmp	r3, r6
 80380c2:	d804      	bhi.n	80380ce <_free_r+0x62>
 80380c4:	4b47      	ldr	r3, [pc, #284]	@ (80381e4 <_free_r+0x178>)
 80380c6:	4620      	mov	r0, r4
 80380c8:	6819      	ldr	r1, [r3, #0]
 80380ca:	f7ff ff79 	bl	8037fc0 <_malloc_trim_r>
 80380ce:	4620      	mov	r0, r4
 80380d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80380d4:	f004 bbf2 	b.w	803c8bc <__malloc_unlock>
 80380d8:	f8cc 6004 	str.w	r6, [ip, #4]
 80380dc:	2a00      	cmp	r2, #0
 80380de:	d138      	bne.n	8038152 <_free_r+0xe6>
 80380e0:	f857 1c08 	ldr.w	r1, [r7, #-8]
 80380e4:	1a5b      	subs	r3, r3, r1
 80380e6:	4408      	add	r0, r1
 80380e8:	6899      	ldr	r1, [r3, #8]
 80380ea:	f105 0708 	add.w	r7, r5, #8
 80380ee:	42b9      	cmp	r1, r7
 80380f0:	d031      	beq.n	8038156 <_free_r+0xea>
 80380f2:	68df      	ldr	r7, [r3, #12]
 80380f4:	60cf      	str	r7, [r1, #12]
 80380f6:	60b9      	str	r1, [r7, #8]
 80380f8:	eb0c 0106 	add.w	r1, ip, r6
 80380fc:	6849      	ldr	r1, [r1, #4]
 80380fe:	07c9      	lsls	r1, r1, #31
 8038100:	d40b      	bmi.n	803811a <_free_r+0xae>
 8038102:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8038106:	4430      	add	r0, r6
 8038108:	bb3a      	cbnz	r2, 803815a <_free_r+0xee>
 803810a:	4e37      	ldr	r6, [pc, #220]	@ (80381e8 <_free_r+0x17c>)
 803810c:	42b1      	cmp	r1, r6
 803810e:	d124      	bne.n	803815a <_free_r+0xee>
 8038110:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8038114:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8038118:	2201      	movs	r2, #1
 803811a:	f040 0101 	orr.w	r1, r0, #1
 803811e:	6059      	str	r1, [r3, #4]
 8038120:	5018      	str	r0, [r3, r0]
 8038122:	2a00      	cmp	r2, #0
 8038124:	d1d3      	bne.n	80380ce <_free_r+0x62>
 8038126:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 803812a:	d21b      	bcs.n	8038164 <_free_r+0xf8>
 803812c:	08c2      	lsrs	r2, r0, #3
 803812e:	2101      	movs	r1, #1
 8038130:	0940      	lsrs	r0, r0, #5
 8038132:	4081      	lsls	r1, r0
 8038134:	6868      	ldr	r0, [r5, #4]
 8038136:	3201      	adds	r2, #1
 8038138:	4301      	orrs	r1, r0
 803813a:	6069      	str	r1, [r5, #4]
 803813c:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 8038140:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 8038144:	3908      	subs	r1, #8
 8038146:	e9c3 0102 	strd	r0, r1, [r3, #8]
 803814a:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 803814e:	60c3      	str	r3, [r0, #12]
 8038150:	e7bd      	b.n	80380ce <_free_r+0x62>
 8038152:	2200      	movs	r2, #0
 8038154:	e7d0      	b.n	80380f8 <_free_r+0x8c>
 8038156:	2201      	movs	r2, #1
 8038158:	e7ce      	b.n	80380f8 <_free_r+0x8c>
 803815a:	f8dc 600c 	ldr.w	r6, [ip, #12]
 803815e:	60ce      	str	r6, [r1, #12]
 8038160:	60b1      	str	r1, [r6, #8]
 8038162:	e7da      	b.n	803811a <_free_r+0xae>
 8038164:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 8038168:	ea4f 2250 	mov.w	r2, r0, lsr #9
 803816c:	d214      	bcs.n	8038198 <_free_r+0x12c>
 803816e:	0982      	lsrs	r2, r0, #6
 8038170:	3238      	adds	r2, #56	@ 0x38
 8038172:	1c51      	adds	r1, r2, #1
 8038174:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8038178:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 803817c:	428e      	cmp	r6, r1
 803817e:	d125      	bne.n	80381cc <_free_r+0x160>
 8038180:	2001      	movs	r0, #1
 8038182:	1092      	asrs	r2, r2, #2
 8038184:	fa00 f202 	lsl.w	r2, r0, r2
 8038188:	6868      	ldr	r0, [r5, #4]
 803818a:	4302      	orrs	r2, r0
 803818c:	606a      	str	r2, [r5, #4]
 803818e:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8038192:	60b3      	str	r3, [r6, #8]
 8038194:	60cb      	str	r3, [r1, #12]
 8038196:	e79a      	b.n	80380ce <_free_r+0x62>
 8038198:	2a14      	cmp	r2, #20
 803819a:	d801      	bhi.n	80381a0 <_free_r+0x134>
 803819c:	325b      	adds	r2, #91	@ 0x5b
 803819e:	e7e8      	b.n	8038172 <_free_r+0x106>
 80381a0:	2a54      	cmp	r2, #84	@ 0x54
 80381a2:	d802      	bhi.n	80381aa <_free_r+0x13e>
 80381a4:	0b02      	lsrs	r2, r0, #12
 80381a6:	326e      	adds	r2, #110	@ 0x6e
 80381a8:	e7e3      	b.n	8038172 <_free_r+0x106>
 80381aa:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 80381ae:	d802      	bhi.n	80381b6 <_free_r+0x14a>
 80381b0:	0bc2      	lsrs	r2, r0, #15
 80381b2:	3277      	adds	r2, #119	@ 0x77
 80381b4:	e7dd      	b.n	8038172 <_free_r+0x106>
 80381b6:	f240 5154 	movw	r1, #1364	@ 0x554
 80381ba:	428a      	cmp	r2, r1
 80381bc:	bf9a      	itte	ls
 80381be:	0c82      	lsrls	r2, r0, #18
 80381c0:	327c      	addls	r2, #124	@ 0x7c
 80381c2:	227e      	movhi	r2, #126	@ 0x7e
 80381c4:	e7d5      	b.n	8038172 <_free_r+0x106>
 80381c6:	6889      	ldr	r1, [r1, #8]
 80381c8:	428e      	cmp	r6, r1
 80381ca:	d004      	beq.n	80381d6 <_free_r+0x16a>
 80381cc:	684a      	ldr	r2, [r1, #4]
 80381ce:	f022 0203 	bic.w	r2, r2, #3
 80381d2:	4282      	cmp	r2, r0
 80381d4:	d8f7      	bhi.n	80381c6 <_free_r+0x15a>
 80381d6:	68ce      	ldr	r6, [r1, #12]
 80381d8:	e7d9      	b.n	803818e <_free_r+0x122>
 80381da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80381dc:	20000564 	.word	0x20000564
 80381e0:	20000560 	.word	0x20000560
 80381e4:	20018318 	.word	0x20018318
 80381e8:	2000056c 	.word	0x2000056c

080381ec <_findenv_r>:
 80381ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80381f0:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8038260 <_findenv_r+0x74>
 80381f4:	4606      	mov	r6, r0
 80381f6:	4689      	mov	r9, r1
 80381f8:	4617      	mov	r7, r2
 80381fa:	f006 fc31 	bl	803ea60 <__env_lock>
 80381fe:	f8da 4000 	ldr.w	r4, [sl]
 8038202:	b134      	cbz	r4, 8038212 <_findenv_r+0x26>
 8038204:	464b      	mov	r3, r9
 8038206:	4698      	mov	r8, r3
 8038208:	f813 2b01 	ldrb.w	r2, [r3], #1
 803820c:	b13a      	cbz	r2, 803821e <_findenv_r+0x32>
 803820e:	2a3d      	cmp	r2, #61	@ 0x3d
 8038210:	d1f9      	bne.n	8038206 <_findenv_r+0x1a>
 8038212:	4630      	mov	r0, r6
 8038214:	f006 fc2a 	bl	803ea6c <__env_unlock>
 8038218:	2000      	movs	r0, #0
 803821a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803821e:	eba8 0809 	sub.w	r8, r8, r9
 8038222:	46a3      	mov	fp, r4
 8038224:	f854 0b04 	ldr.w	r0, [r4], #4
 8038228:	2800      	cmp	r0, #0
 803822a:	d0f2      	beq.n	8038212 <_findenv_r+0x26>
 803822c:	4642      	mov	r2, r8
 803822e:	4649      	mov	r1, r9
 8038230:	f7fd fe13 	bl	8035e5a <strncmp>
 8038234:	2800      	cmp	r0, #0
 8038236:	d1f4      	bne.n	8038222 <_findenv_r+0x36>
 8038238:	f854 3c04 	ldr.w	r3, [r4, #-4]
 803823c:	eb03 0508 	add.w	r5, r3, r8
 8038240:	f813 3008 	ldrb.w	r3, [r3, r8]
 8038244:	2b3d      	cmp	r3, #61	@ 0x3d
 8038246:	d1ec      	bne.n	8038222 <_findenv_r+0x36>
 8038248:	f8da 3000 	ldr.w	r3, [sl]
 803824c:	ebab 0303 	sub.w	r3, fp, r3
 8038250:	109b      	asrs	r3, r3, #2
 8038252:	4630      	mov	r0, r6
 8038254:	603b      	str	r3, [r7, #0]
 8038256:	f006 fc09 	bl	803ea6c <__env_unlock>
 803825a:	1c68      	adds	r0, r5, #1
 803825c:	e7dd      	b.n	803821a <_findenv_r+0x2e>
 803825e:	bf00      	nop
 8038260:	20000004 	.word	0x20000004

08038264 <_getenv_r>:
 8038264:	b507      	push	{r0, r1, r2, lr}
 8038266:	aa01      	add	r2, sp, #4
 8038268:	f7ff ffc0 	bl	80381ec <_findenv_r>
 803826c:	b003      	add	sp, #12
 803826e:	f85d fb04 	ldr.w	pc, [sp], #4

08038272 <labs>:
 8038272:	2800      	cmp	r0, #0
 8038274:	bfb8      	it	lt
 8038276:	4240      	neglt	r0, r0
 8038278:	4770      	bx	lr
	...

0803827c <malloc>:
 803827c:	4b02      	ldr	r3, [pc, #8]	@ (8038288 <malloc+0xc>)
 803827e:	4601      	mov	r1, r0
 8038280:	6818      	ldr	r0, [r3, #0]
 8038282:	f000 b80b 	b.w	803829c <_malloc_r>
 8038286:	bf00      	nop
 8038288:	20000430 	.word	0x20000430

0803828c <free>:
 803828c:	4b02      	ldr	r3, [pc, #8]	@ (8038298 <free+0xc>)
 803828e:	4601      	mov	r1, r0
 8038290:	6818      	ldr	r0, [r3, #0]
 8038292:	f7ff beeb 	b.w	803806c <_free_r>
 8038296:	bf00      	nop
 8038298:	20000430 	.word	0x20000430

0803829c <_malloc_r>:
 803829c:	f101 030b 	add.w	r3, r1, #11
 80382a0:	2b16      	cmp	r3, #22
 80382a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80382a6:	4605      	mov	r5, r0
 80382a8:	d906      	bls.n	80382b8 <_malloc_r+0x1c>
 80382aa:	f033 0707 	bics.w	r7, r3, #7
 80382ae:	d504      	bpl.n	80382ba <_malloc_r+0x1e>
 80382b0:	230c      	movs	r3, #12
 80382b2:	602b      	str	r3, [r5, #0]
 80382b4:	2400      	movs	r4, #0
 80382b6:	e1a3      	b.n	8038600 <_malloc_r+0x364>
 80382b8:	2710      	movs	r7, #16
 80382ba:	42b9      	cmp	r1, r7
 80382bc:	d8f8      	bhi.n	80382b0 <_malloc_r+0x14>
 80382be:	4628      	mov	r0, r5
 80382c0:	f004 faf6 	bl	803c8b0 <__malloc_lock>
 80382c4:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 80382c8:	4eaf      	ldr	r6, [pc, #700]	@ (8038588 <_malloc_r+0x2ec>)
 80382ca:	d237      	bcs.n	803833c <_malloc_r+0xa0>
 80382cc:	f107 0208 	add.w	r2, r7, #8
 80382d0:	4432      	add	r2, r6
 80382d2:	f1a2 0108 	sub.w	r1, r2, #8
 80382d6:	6854      	ldr	r4, [r2, #4]
 80382d8:	428c      	cmp	r4, r1
 80382da:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 80382de:	d102      	bne.n	80382e6 <_malloc_r+0x4a>
 80382e0:	68d4      	ldr	r4, [r2, #12]
 80382e2:	42a2      	cmp	r2, r4
 80382e4:	d010      	beq.n	8038308 <_malloc_r+0x6c>
 80382e6:	6863      	ldr	r3, [r4, #4]
 80382e8:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80382ec:	f023 0303 	bic.w	r3, r3, #3
 80382f0:	60ca      	str	r2, [r1, #12]
 80382f2:	4423      	add	r3, r4
 80382f4:	6091      	str	r1, [r2, #8]
 80382f6:	685a      	ldr	r2, [r3, #4]
 80382f8:	f042 0201 	orr.w	r2, r2, #1
 80382fc:	605a      	str	r2, [r3, #4]
 80382fe:	4628      	mov	r0, r5
 8038300:	f004 fadc 	bl	803c8bc <__malloc_unlock>
 8038304:	3408      	adds	r4, #8
 8038306:	e17b      	b.n	8038600 <_malloc_r+0x364>
 8038308:	3302      	adds	r3, #2
 803830a:	6934      	ldr	r4, [r6, #16]
 803830c:	499f      	ldr	r1, [pc, #636]	@ (803858c <_malloc_r+0x2f0>)
 803830e:	428c      	cmp	r4, r1
 8038310:	d077      	beq.n	8038402 <_malloc_r+0x166>
 8038312:	6862      	ldr	r2, [r4, #4]
 8038314:	f022 0c03 	bic.w	ip, r2, #3
 8038318:	ebac 0007 	sub.w	r0, ip, r7
 803831c:	280f      	cmp	r0, #15
 803831e:	dd48      	ble.n	80383b2 <_malloc_r+0x116>
 8038320:	19e2      	adds	r2, r4, r7
 8038322:	f040 0301 	orr.w	r3, r0, #1
 8038326:	f047 0701 	orr.w	r7, r7, #1
 803832a:	6067      	str	r7, [r4, #4]
 803832c:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8038330:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8038334:	6053      	str	r3, [r2, #4]
 8038336:	f844 000c 	str.w	r0, [r4, ip]
 803833a:	e7e0      	b.n	80382fe <_malloc_r+0x62>
 803833c:	0a7b      	lsrs	r3, r7, #9
 803833e:	d02a      	beq.n	8038396 <_malloc_r+0xfa>
 8038340:	2b04      	cmp	r3, #4
 8038342:	d812      	bhi.n	803836a <_malloc_r+0xce>
 8038344:	09bb      	lsrs	r3, r7, #6
 8038346:	3338      	adds	r3, #56	@ 0x38
 8038348:	1c5a      	adds	r2, r3, #1
 803834a:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 803834e:	f1a2 0c08 	sub.w	ip, r2, #8
 8038352:	6854      	ldr	r4, [r2, #4]
 8038354:	4564      	cmp	r4, ip
 8038356:	d006      	beq.n	8038366 <_malloc_r+0xca>
 8038358:	6862      	ldr	r2, [r4, #4]
 803835a:	f022 0203 	bic.w	r2, r2, #3
 803835e:	1bd0      	subs	r0, r2, r7
 8038360:	280f      	cmp	r0, #15
 8038362:	dd1c      	ble.n	803839e <_malloc_r+0x102>
 8038364:	3b01      	subs	r3, #1
 8038366:	3301      	adds	r3, #1
 8038368:	e7cf      	b.n	803830a <_malloc_r+0x6e>
 803836a:	2b14      	cmp	r3, #20
 803836c:	d801      	bhi.n	8038372 <_malloc_r+0xd6>
 803836e:	335b      	adds	r3, #91	@ 0x5b
 8038370:	e7ea      	b.n	8038348 <_malloc_r+0xac>
 8038372:	2b54      	cmp	r3, #84	@ 0x54
 8038374:	d802      	bhi.n	803837c <_malloc_r+0xe0>
 8038376:	0b3b      	lsrs	r3, r7, #12
 8038378:	336e      	adds	r3, #110	@ 0x6e
 803837a:	e7e5      	b.n	8038348 <_malloc_r+0xac>
 803837c:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 8038380:	d802      	bhi.n	8038388 <_malloc_r+0xec>
 8038382:	0bfb      	lsrs	r3, r7, #15
 8038384:	3377      	adds	r3, #119	@ 0x77
 8038386:	e7df      	b.n	8038348 <_malloc_r+0xac>
 8038388:	f240 5254 	movw	r2, #1364	@ 0x554
 803838c:	4293      	cmp	r3, r2
 803838e:	d804      	bhi.n	803839a <_malloc_r+0xfe>
 8038390:	0cbb      	lsrs	r3, r7, #18
 8038392:	337c      	adds	r3, #124	@ 0x7c
 8038394:	e7d8      	b.n	8038348 <_malloc_r+0xac>
 8038396:	233f      	movs	r3, #63	@ 0x3f
 8038398:	e7d6      	b.n	8038348 <_malloc_r+0xac>
 803839a:	237e      	movs	r3, #126	@ 0x7e
 803839c:	e7d4      	b.n	8038348 <_malloc_r+0xac>
 803839e:	2800      	cmp	r0, #0
 80383a0:	68e1      	ldr	r1, [r4, #12]
 80383a2:	db04      	blt.n	80383ae <_malloc_r+0x112>
 80383a4:	68a3      	ldr	r3, [r4, #8]
 80383a6:	60d9      	str	r1, [r3, #12]
 80383a8:	608b      	str	r3, [r1, #8]
 80383aa:	18a3      	adds	r3, r4, r2
 80383ac:	e7a3      	b.n	80382f6 <_malloc_r+0x5a>
 80383ae:	460c      	mov	r4, r1
 80383b0:	e7d0      	b.n	8038354 <_malloc_r+0xb8>
 80383b2:	2800      	cmp	r0, #0
 80383b4:	e9c6 1104 	strd	r1, r1, [r6, #16]
 80383b8:	db07      	blt.n	80383ca <_malloc_r+0x12e>
 80383ba:	44a4      	add	ip, r4
 80383bc:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80383c0:	f043 0301 	orr.w	r3, r3, #1
 80383c4:	f8cc 3004 	str.w	r3, [ip, #4]
 80383c8:	e799      	b.n	80382fe <_malloc_r+0x62>
 80383ca:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 80383ce:	6870      	ldr	r0, [r6, #4]
 80383d0:	f080 8095 	bcs.w	80384fe <_malloc_r+0x262>
 80383d4:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 80383d8:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 80383dc:	f04f 0c01 	mov.w	ip, #1
 80383e0:	3201      	adds	r2, #1
 80383e2:	fa0c fc0e 	lsl.w	ip, ip, lr
 80383e6:	ea4c 0000 	orr.w	r0, ip, r0
 80383ea:	6070      	str	r0, [r6, #4]
 80383ec:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 80383f0:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 80383f4:	3808      	subs	r0, #8
 80383f6:	e9c4 c002 	strd	ip, r0, [r4, #8]
 80383fa:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 80383fe:	f8cc 400c 	str.w	r4, [ip, #12]
 8038402:	1098      	asrs	r0, r3, #2
 8038404:	2201      	movs	r2, #1
 8038406:	4082      	lsls	r2, r0
 8038408:	6870      	ldr	r0, [r6, #4]
 803840a:	4290      	cmp	r0, r2
 803840c:	d326      	bcc.n	803845c <_malloc_r+0x1c0>
 803840e:	4210      	tst	r0, r2
 8038410:	d106      	bne.n	8038420 <_malloc_r+0x184>
 8038412:	f023 0303 	bic.w	r3, r3, #3
 8038416:	0052      	lsls	r2, r2, #1
 8038418:	4210      	tst	r0, r2
 803841a:	f103 0304 	add.w	r3, r3, #4
 803841e:	d0fa      	beq.n	8038416 <_malloc_r+0x17a>
 8038420:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8038424:	46c1      	mov	r9, r8
 8038426:	469e      	mov	lr, r3
 8038428:	f8d9 400c 	ldr.w	r4, [r9, #12]
 803842c:	454c      	cmp	r4, r9
 803842e:	f040 80b9 	bne.w	80385a4 <_malloc_r+0x308>
 8038432:	f10e 0e01 	add.w	lr, lr, #1
 8038436:	f01e 0f03 	tst.w	lr, #3
 803843a:	f109 0908 	add.w	r9, r9, #8
 803843e:	d1f3      	bne.n	8038428 <_malloc_r+0x18c>
 8038440:	0798      	lsls	r0, r3, #30
 8038442:	f040 80e3 	bne.w	803860c <_malloc_r+0x370>
 8038446:	6873      	ldr	r3, [r6, #4]
 8038448:	ea23 0302 	bic.w	r3, r3, r2
 803844c:	6073      	str	r3, [r6, #4]
 803844e:	6870      	ldr	r0, [r6, #4]
 8038450:	0052      	lsls	r2, r2, #1
 8038452:	4290      	cmp	r0, r2
 8038454:	d302      	bcc.n	803845c <_malloc_r+0x1c0>
 8038456:	2a00      	cmp	r2, #0
 8038458:	f040 80e5 	bne.w	8038626 <_malloc_r+0x38a>
 803845c:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8038460:	f8da 3004 	ldr.w	r3, [sl, #4]
 8038464:	f023 0903 	bic.w	r9, r3, #3
 8038468:	45b9      	cmp	r9, r7
 803846a:	d304      	bcc.n	8038476 <_malloc_r+0x1da>
 803846c:	eba9 0207 	sub.w	r2, r9, r7
 8038470:	2a0f      	cmp	r2, #15
 8038472:	f300 8141 	bgt.w	80386f8 <_malloc_r+0x45c>
 8038476:	4b46      	ldr	r3, [pc, #280]	@ (8038590 <_malloc_r+0x2f4>)
 8038478:	6819      	ldr	r1, [r3, #0]
 803847a:	3110      	adds	r1, #16
 803847c:	4439      	add	r1, r7
 803847e:	2008      	movs	r0, #8
 8038480:	9101      	str	r1, [sp, #4]
 8038482:	f006 f8f7 	bl	803e674 <sysconf>
 8038486:	4a43      	ldr	r2, [pc, #268]	@ (8038594 <_malloc_r+0x2f8>)
 8038488:	9901      	ldr	r1, [sp, #4]
 803848a:	6813      	ldr	r3, [r2, #0]
 803848c:	3301      	adds	r3, #1
 803848e:	bf1f      	itttt	ne
 8038490:	f101 31ff 	addne.w	r1, r1, #4294967295	@ 0xffffffff
 8038494:	1809      	addne	r1, r1, r0
 8038496:	4243      	negne	r3, r0
 8038498:	4019      	andne	r1, r3
 803849a:	4680      	mov	r8, r0
 803849c:	4628      	mov	r0, r5
 803849e:	9101      	str	r1, [sp, #4]
 80384a0:	f006 f8d8 	bl	803e654 <_sbrk_r>
 80384a4:	1c42      	adds	r2, r0, #1
 80384a6:	eb0a 0b09 	add.w	fp, sl, r9
 80384aa:	4604      	mov	r4, r0
 80384ac:	f000 80f7 	beq.w	803869e <_malloc_r+0x402>
 80384b0:	4583      	cmp	fp, r0
 80384b2:	9901      	ldr	r1, [sp, #4]
 80384b4:	4a37      	ldr	r2, [pc, #220]	@ (8038594 <_malloc_r+0x2f8>)
 80384b6:	d902      	bls.n	80384be <_malloc_r+0x222>
 80384b8:	45b2      	cmp	sl, r6
 80384ba:	f040 80f0 	bne.w	803869e <_malloc_r+0x402>
 80384be:	4b36      	ldr	r3, [pc, #216]	@ (8038598 <_malloc_r+0x2fc>)
 80384c0:	6818      	ldr	r0, [r3, #0]
 80384c2:	45a3      	cmp	fp, r4
 80384c4:	eb00 0e01 	add.w	lr, r0, r1
 80384c8:	f8c3 e000 	str.w	lr, [r3]
 80384cc:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80384d0:	f040 80ab 	bne.w	803862a <_malloc_r+0x38e>
 80384d4:	ea1b 0f0c 	tst.w	fp, ip
 80384d8:	f040 80a7 	bne.w	803862a <_malloc_r+0x38e>
 80384dc:	68b2      	ldr	r2, [r6, #8]
 80384de:	4449      	add	r1, r9
 80384e0:	f041 0101 	orr.w	r1, r1, #1
 80384e4:	6051      	str	r1, [r2, #4]
 80384e6:	4a2d      	ldr	r2, [pc, #180]	@ (803859c <_malloc_r+0x300>)
 80384e8:	681b      	ldr	r3, [r3, #0]
 80384ea:	6811      	ldr	r1, [r2, #0]
 80384ec:	428b      	cmp	r3, r1
 80384ee:	bf88      	it	hi
 80384f0:	6013      	strhi	r3, [r2, #0]
 80384f2:	4a2b      	ldr	r2, [pc, #172]	@ (80385a0 <_malloc_r+0x304>)
 80384f4:	6811      	ldr	r1, [r2, #0]
 80384f6:	428b      	cmp	r3, r1
 80384f8:	bf88      	it	hi
 80384fa:	6013      	strhi	r3, [r2, #0]
 80384fc:	e0cf      	b.n	803869e <_malloc_r+0x402>
 80384fe:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 8038502:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8038506:	d218      	bcs.n	803853a <_malloc_r+0x29e>
 8038508:	ea4f 129c 	mov.w	r2, ip, lsr #6
 803850c:	3238      	adds	r2, #56	@ 0x38
 803850e:	f102 0e01 	add.w	lr, r2, #1
 8038512:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8038516:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 803851a:	45f0      	cmp	r8, lr
 803851c:	d12b      	bne.n	8038576 <_malloc_r+0x2da>
 803851e:	1092      	asrs	r2, r2, #2
 8038520:	f04f 0c01 	mov.w	ip, #1
 8038524:	fa0c f202 	lsl.w	r2, ip, r2
 8038528:	4302      	orrs	r2, r0
 803852a:	6072      	str	r2, [r6, #4]
 803852c:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8038530:	f8c8 4008 	str.w	r4, [r8, #8]
 8038534:	f8ce 400c 	str.w	r4, [lr, #12]
 8038538:	e763      	b.n	8038402 <_malloc_r+0x166>
 803853a:	2a14      	cmp	r2, #20
 803853c:	d801      	bhi.n	8038542 <_malloc_r+0x2a6>
 803853e:	325b      	adds	r2, #91	@ 0x5b
 8038540:	e7e5      	b.n	803850e <_malloc_r+0x272>
 8038542:	2a54      	cmp	r2, #84	@ 0x54
 8038544:	d803      	bhi.n	803854e <_malloc_r+0x2b2>
 8038546:	ea4f 321c 	mov.w	r2, ip, lsr #12
 803854a:	326e      	adds	r2, #110	@ 0x6e
 803854c:	e7df      	b.n	803850e <_malloc_r+0x272>
 803854e:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 8038552:	d803      	bhi.n	803855c <_malloc_r+0x2c0>
 8038554:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8038558:	3277      	adds	r2, #119	@ 0x77
 803855a:	e7d8      	b.n	803850e <_malloc_r+0x272>
 803855c:	f240 5e54 	movw	lr, #1364	@ 0x554
 8038560:	4572      	cmp	r2, lr
 8038562:	bf9a      	itte	ls
 8038564:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8038568:	327c      	addls	r2, #124	@ 0x7c
 803856a:	227e      	movhi	r2, #126	@ 0x7e
 803856c:	e7cf      	b.n	803850e <_malloc_r+0x272>
 803856e:	f8de e008 	ldr.w	lr, [lr, #8]
 8038572:	45f0      	cmp	r8, lr
 8038574:	d005      	beq.n	8038582 <_malloc_r+0x2e6>
 8038576:	f8de 2004 	ldr.w	r2, [lr, #4]
 803857a:	f022 0203 	bic.w	r2, r2, #3
 803857e:	4562      	cmp	r2, ip
 8038580:	d8f5      	bhi.n	803856e <_malloc_r+0x2d2>
 8038582:	f8de 800c 	ldr.w	r8, [lr, #12]
 8038586:	e7d1      	b.n	803852c <_malloc_r+0x290>
 8038588:	20000564 	.word	0x20000564
 803858c:	2000056c 	.word	0x2000056c
 8038590:	20018318 	.word	0x20018318
 8038594:	2000055c 	.word	0x2000055c
 8038598:	200182e8 	.word	0x200182e8
 803859c:	20018314 	.word	0x20018314
 80385a0:	20018310 	.word	0x20018310
 80385a4:	6860      	ldr	r0, [r4, #4]
 80385a6:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80385aa:	f020 0003 	bic.w	r0, r0, #3
 80385ae:	eba0 0a07 	sub.w	sl, r0, r7
 80385b2:	f1ba 0f0f 	cmp.w	sl, #15
 80385b6:	dd12      	ble.n	80385de <_malloc_r+0x342>
 80385b8:	68a3      	ldr	r3, [r4, #8]
 80385ba:	19e2      	adds	r2, r4, r7
 80385bc:	f047 0701 	orr.w	r7, r7, #1
 80385c0:	6067      	str	r7, [r4, #4]
 80385c2:	f8c3 c00c 	str.w	ip, [r3, #12]
 80385c6:	f8cc 3008 	str.w	r3, [ip, #8]
 80385ca:	f04a 0301 	orr.w	r3, sl, #1
 80385ce:	e9c6 2204 	strd	r2, r2, [r6, #16]
 80385d2:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80385d6:	6053      	str	r3, [r2, #4]
 80385d8:	f844 a000 	str.w	sl, [r4, r0]
 80385dc:	e68f      	b.n	80382fe <_malloc_r+0x62>
 80385de:	f1ba 0f00 	cmp.w	sl, #0
 80385e2:	db11      	blt.n	8038608 <_malloc_r+0x36c>
 80385e4:	4420      	add	r0, r4
 80385e6:	6843      	ldr	r3, [r0, #4]
 80385e8:	f043 0301 	orr.w	r3, r3, #1
 80385ec:	6043      	str	r3, [r0, #4]
 80385ee:	f854 3f08 	ldr.w	r3, [r4, #8]!
 80385f2:	4628      	mov	r0, r5
 80385f4:	f8c3 c00c 	str.w	ip, [r3, #12]
 80385f8:	f8cc 3008 	str.w	r3, [ip, #8]
 80385fc:	f004 f95e 	bl	803c8bc <__malloc_unlock>
 8038600:	4620      	mov	r0, r4
 8038602:	b003      	add	sp, #12
 8038604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8038608:	4664      	mov	r4, ip
 803860a:	e70f      	b.n	803842c <_malloc_r+0x190>
 803860c:	f858 0908 	ldr.w	r0, [r8], #-8
 8038610:	4540      	cmp	r0, r8
 8038612:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8038616:	f43f af13 	beq.w	8038440 <_malloc_r+0x1a4>
 803861a:	e718      	b.n	803844e <_malloc_r+0x1b2>
 803861c:	3304      	adds	r3, #4
 803861e:	0052      	lsls	r2, r2, #1
 8038620:	4210      	tst	r0, r2
 8038622:	d0fb      	beq.n	803861c <_malloc_r+0x380>
 8038624:	e6fc      	b.n	8038420 <_malloc_r+0x184>
 8038626:	4673      	mov	r3, lr
 8038628:	e7fa      	b.n	8038620 <_malloc_r+0x384>
 803862a:	6810      	ldr	r0, [r2, #0]
 803862c:	3001      	adds	r0, #1
 803862e:	bf1b      	ittet	ne
 8038630:	eba4 0b0b 	subne.w	fp, r4, fp
 8038634:	eb0b 020e 	addne.w	r2, fp, lr
 8038638:	6014      	streq	r4, [r2, #0]
 803863a:	601a      	strne	r2, [r3, #0]
 803863c:	f014 0b07 	ands.w	fp, r4, #7
 8038640:	bf1a      	itte	ne
 8038642:	f1cb 0008 	rsbne	r0, fp, #8
 8038646:	1824      	addne	r4, r4, r0
 8038648:	4658      	moveq	r0, fp
 803864a:	1862      	adds	r2, r4, r1
 803864c:	ea02 010c 	and.w	r1, r2, ip
 8038650:	4480      	add	r8, r0
 8038652:	eba8 0801 	sub.w	r8, r8, r1
 8038656:	ea08 080c 	and.w	r8, r8, ip
 803865a:	4641      	mov	r1, r8
 803865c:	4628      	mov	r0, r5
 803865e:	9201      	str	r2, [sp, #4]
 8038660:	f005 fff8 	bl	803e654 <_sbrk_r>
 8038664:	1c43      	adds	r3, r0, #1
 8038666:	9a01      	ldr	r2, [sp, #4]
 8038668:	4b28      	ldr	r3, [pc, #160]	@ (803870c <_malloc_r+0x470>)
 803866a:	d107      	bne.n	803867c <_malloc_r+0x3e0>
 803866c:	f1bb 0f00 	cmp.w	fp, #0
 8038670:	d023      	beq.n	80386ba <_malloc_r+0x41e>
 8038672:	f1ab 0008 	sub.w	r0, fp, #8
 8038676:	4410      	add	r0, r2
 8038678:	f04f 0800 	mov.w	r8, #0
 803867c:	681a      	ldr	r2, [r3, #0]
 803867e:	60b4      	str	r4, [r6, #8]
 8038680:	1b00      	subs	r0, r0, r4
 8038682:	4440      	add	r0, r8
 8038684:	4442      	add	r2, r8
 8038686:	f040 0001 	orr.w	r0, r0, #1
 803868a:	45b2      	cmp	sl, r6
 803868c:	601a      	str	r2, [r3, #0]
 803868e:	6060      	str	r0, [r4, #4]
 8038690:	f43f af29 	beq.w	80384e6 <_malloc_r+0x24a>
 8038694:	f1b9 0f0f 	cmp.w	r9, #15
 8038698:	d812      	bhi.n	80386c0 <_malloc_r+0x424>
 803869a:	2301      	movs	r3, #1
 803869c:	6063      	str	r3, [r4, #4]
 803869e:	68b3      	ldr	r3, [r6, #8]
 80386a0:	685b      	ldr	r3, [r3, #4]
 80386a2:	f023 0303 	bic.w	r3, r3, #3
 80386a6:	42bb      	cmp	r3, r7
 80386a8:	eba3 0207 	sub.w	r2, r3, r7
 80386ac:	d301      	bcc.n	80386b2 <_malloc_r+0x416>
 80386ae:	2a0f      	cmp	r2, #15
 80386b0:	dc22      	bgt.n	80386f8 <_malloc_r+0x45c>
 80386b2:	4628      	mov	r0, r5
 80386b4:	f004 f902 	bl	803c8bc <__malloc_unlock>
 80386b8:	e5fc      	b.n	80382b4 <_malloc_r+0x18>
 80386ba:	4610      	mov	r0, r2
 80386bc:	46d8      	mov	r8, fp
 80386be:	e7dd      	b.n	803867c <_malloc_r+0x3e0>
 80386c0:	f8da 2004 	ldr.w	r2, [sl, #4]
 80386c4:	f1a9 090c 	sub.w	r9, r9, #12
 80386c8:	f029 0907 	bic.w	r9, r9, #7
 80386cc:	f002 0201 	and.w	r2, r2, #1
 80386d0:	ea42 0209 	orr.w	r2, r2, r9
 80386d4:	f8ca 2004 	str.w	r2, [sl, #4]
 80386d8:	2105      	movs	r1, #5
 80386da:	eb0a 0209 	add.w	r2, sl, r9
 80386de:	f1b9 0f0f 	cmp.w	r9, #15
 80386e2:	e9c2 1101 	strd	r1, r1, [r2, #4]
 80386e6:	f67f aefe 	bls.w	80384e6 <_malloc_r+0x24a>
 80386ea:	f10a 0108 	add.w	r1, sl, #8
 80386ee:	4628      	mov	r0, r5
 80386f0:	f7ff fcbc 	bl	803806c <_free_r>
 80386f4:	4b05      	ldr	r3, [pc, #20]	@ (803870c <_malloc_r+0x470>)
 80386f6:	e6f6      	b.n	80384e6 <_malloc_r+0x24a>
 80386f8:	68b4      	ldr	r4, [r6, #8]
 80386fa:	f047 0301 	orr.w	r3, r7, #1
 80386fe:	4427      	add	r7, r4
 8038700:	f042 0201 	orr.w	r2, r2, #1
 8038704:	6063      	str	r3, [r4, #4]
 8038706:	60b7      	str	r7, [r6, #8]
 8038708:	607a      	str	r2, [r7, #4]
 803870a:	e5f8      	b.n	80382fe <_malloc_r+0x62>
 803870c:	200182e8 	.word	0x200182e8

08038710 <__ascii_mbtowc>:
 8038710:	b082      	sub	sp, #8
 8038712:	b901      	cbnz	r1, 8038716 <__ascii_mbtowc+0x6>
 8038714:	a901      	add	r1, sp, #4
 8038716:	b142      	cbz	r2, 803872a <__ascii_mbtowc+0x1a>
 8038718:	b14b      	cbz	r3, 803872e <__ascii_mbtowc+0x1e>
 803871a:	7813      	ldrb	r3, [r2, #0]
 803871c:	600b      	str	r3, [r1, #0]
 803871e:	7812      	ldrb	r2, [r2, #0]
 8038720:	1e10      	subs	r0, r2, #0
 8038722:	bf18      	it	ne
 8038724:	2001      	movne	r0, #1
 8038726:	b002      	add	sp, #8
 8038728:	4770      	bx	lr
 803872a:	4610      	mov	r0, r2
 803872c:	e7fb      	b.n	8038726 <__ascii_mbtowc+0x16>
 803872e:	f06f 0001 	mvn.w	r0, #1
 8038732:	e7f8      	b.n	8038726 <__ascii_mbtowc+0x16>

08038734 <siscanf>:
 8038734:	b40e      	push	{r1, r2, r3}
 8038736:	b530      	push	{r4, r5, lr}
 8038738:	b09c      	sub	sp, #112	@ 0x70
 803873a:	ac1f      	add	r4, sp, #124	@ 0x7c
 803873c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8038740:	f854 5b04 	ldr.w	r5, [r4], #4
 8038744:	f8ad 2014 	strh.w	r2, [sp, #20]
 8038748:	9002      	str	r0, [sp, #8]
 803874a:	9006      	str	r0, [sp, #24]
 803874c:	f7d7 fda8 	bl	80102a0 <strlen>
 8038750:	4b0b      	ldr	r3, [pc, #44]	@ (8038780 <siscanf+0x4c>)
 8038752:	9003      	str	r0, [sp, #12]
 8038754:	9007      	str	r0, [sp, #28]
 8038756:	930a      	str	r3, [sp, #40]	@ 0x28
 8038758:	480a      	ldr	r0, [pc, #40]	@ (8038784 <siscanf+0x50>)
 803875a:	9401      	str	r4, [sp, #4]
 803875c:	2300      	movs	r3, #0
 803875e:	930e      	str	r3, [sp, #56]	@ 0x38
 8038760:	9313      	str	r3, [sp, #76]	@ 0x4c
 8038762:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8038766:	f8ad 3016 	strh.w	r3, [sp, #22]
 803876a:	462a      	mov	r2, r5
 803876c:	4623      	mov	r3, r4
 803876e:	a902      	add	r1, sp, #8
 8038770:	6800      	ldr	r0, [r0, #0]
 8038772:	f000 fd99 	bl	80392a8 <__ssvfiscanf_r>
 8038776:	b01c      	add	sp, #112	@ 0x70
 8038778:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 803877c:	b003      	add	sp, #12
 803877e:	4770      	bx	lr
 8038780:	08035723 	.word	0x08035723
 8038784:	20000430 	.word	0x20000430

08038788 <sniprintf>:
 8038788:	b40c      	push	{r2, r3}
 803878a:	b530      	push	{r4, r5, lr}
 803878c:	4b17      	ldr	r3, [pc, #92]	@ (80387ec <sniprintf+0x64>)
 803878e:	1e0c      	subs	r4, r1, #0
 8038790:	681d      	ldr	r5, [r3, #0]
 8038792:	b09d      	sub	sp, #116	@ 0x74
 8038794:	da08      	bge.n	80387a8 <sniprintf+0x20>
 8038796:	238b      	movs	r3, #139	@ 0x8b
 8038798:	602b      	str	r3, [r5, #0]
 803879a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 803879e:	b01d      	add	sp, #116	@ 0x74
 80387a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80387a4:	b002      	add	sp, #8
 80387a6:	4770      	bx	lr
 80387a8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80387ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 80387b0:	bf14      	ite	ne
 80387b2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80387b6:	4623      	moveq	r3, r4
 80387b8:	9304      	str	r3, [sp, #16]
 80387ba:	9307      	str	r3, [sp, #28]
 80387bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80387c0:	9002      	str	r0, [sp, #8]
 80387c2:	9006      	str	r0, [sp, #24]
 80387c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80387c8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80387ca:	ab21      	add	r3, sp, #132	@ 0x84
 80387cc:	a902      	add	r1, sp, #8
 80387ce:	4628      	mov	r0, r5
 80387d0:	9301      	str	r3, [sp, #4]
 80387d2:	f000 f88b 	bl	80388ec <_svfiprintf_r>
 80387d6:	1c43      	adds	r3, r0, #1
 80387d8:	bfbc      	itt	lt
 80387da:	238b      	movlt	r3, #139	@ 0x8b
 80387dc:	602b      	strlt	r3, [r5, #0]
 80387de:	2c00      	cmp	r4, #0
 80387e0:	d0dd      	beq.n	803879e <sniprintf+0x16>
 80387e2:	9b02      	ldr	r3, [sp, #8]
 80387e4:	2200      	movs	r2, #0
 80387e6:	701a      	strb	r2, [r3, #0]
 80387e8:	e7d9      	b.n	803879e <sniprintf+0x16>
 80387ea:	bf00      	nop
 80387ec:	20000430 	.word	0x20000430

080387f0 <__ssprint_r>:
 80387f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80387f4:	6893      	ldr	r3, [r2, #8]
 80387f6:	f8d2 b000 	ldr.w	fp, [r2]
 80387fa:	9001      	str	r0, [sp, #4]
 80387fc:	460c      	mov	r4, r1
 80387fe:	4617      	mov	r7, r2
 8038800:	2b00      	cmp	r3, #0
 8038802:	d157      	bne.n	80388b4 <__ssprint_r+0xc4>
 8038804:	2000      	movs	r0, #0
 8038806:	2300      	movs	r3, #0
 8038808:	607b      	str	r3, [r7, #4]
 803880a:	b003      	add	sp, #12
 803880c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8038810:	e9db a800 	ldrd	sl, r8, [fp]
 8038814:	f10b 0b08 	add.w	fp, fp, #8
 8038818:	68a6      	ldr	r6, [r4, #8]
 803881a:	6820      	ldr	r0, [r4, #0]
 803881c:	f1b8 0f00 	cmp.w	r8, #0
 8038820:	d0f6      	beq.n	8038810 <__ssprint_r+0x20>
 8038822:	45b0      	cmp	r8, r6
 8038824:	d32e      	bcc.n	8038884 <__ssprint_r+0x94>
 8038826:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 803882a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 803882e:	d029      	beq.n	8038884 <__ssprint_r+0x94>
 8038830:	6921      	ldr	r1, [r4, #16]
 8038832:	6965      	ldr	r5, [r4, #20]
 8038834:	eba0 0901 	sub.w	r9, r0, r1
 8038838:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 803883c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8038840:	f109 0001 	add.w	r0, r9, #1
 8038844:	106d      	asrs	r5, r5, #1
 8038846:	4440      	add	r0, r8
 8038848:	4285      	cmp	r5, r0
 803884a:	bf38      	it	cc
 803884c:	4605      	movcc	r5, r0
 803884e:	0553      	lsls	r3, r2, #21
 8038850:	d534      	bpl.n	80388bc <__ssprint_r+0xcc>
 8038852:	9801      	ldr	r0, [sp, #4]
 8038854:	4629      	mov	r1, r5
 8038856:	f7ff fd21 	bl	803829c <_malloc_r>
 803885a:	4606      	mov	r6, r0
 803885c:	2800      	cmp	r0, #0
 803885e:	d038      	beq.n	80388d2 <__ssprint_r+0xe2>
 8038860:	464a      	mov	r2, r9
 8038862:	6921      	ldr	r1, [r4, #16]
 8038864:	f7fe fd00 	bl	8037268 <memcpy>
 8038868:	89a2      	ldrh	r2, [r4, #12]
 803886a:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 803886e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8038872:	81a2      	strh	r2, [r4, #12]
 8038874:	6126      	str	r6, [r4, #16]
 8038876:	6165      	str	r5, [r4, #20]
 8038878:	444e      	add	r6, r9
 803887a:	eba5 0509 	sub.w	r5, r5, r9
 803887e:	6026      	str	r6, [r4, #0]
 8038880:	60a5      	str	r5, [r4, #8]
 8038882:	4646      	mov	r6, r8
 8038884:	4546      	cmp	r6, r8
 8038886:	bf28      	it	cs
 8038888:	4646      	movcs	r6, r8
 803888a:	4632      	mov	r2, r6
 803888c:	4651      	mov	r1, sl
 803888e:	6820      	ldr	r0, [r4, #0]
 8038890:	f7fd fa94 	bl	8035dbc <memmove>
 8038894:	68a2      	ldr	r2, [r4, #8]
 8038896:	1b92      	subs	r2, r2, r6
 8038898:	60a2      	str	r2, [r4, #8]
 803889a:	6822      	ldr	r2, [r4, #0]
 803889c:	4432      	add	r2, r6
 803889e:	6022      	str	r2, [r4, #0]
 80388a0:	68ba      	ldr	r2, [r7, #8]
 80388a2:	eba2 0308 	sub.w	r3, r2, r8
 80388a6:	44c2      	add	sl, r8
 80388a8:	60bb      	str	r3, [r7, #8]
 80388aa:	2b00      	cmp	r3, #0
 80388ac:	d0aa      	beq.n	8038804 <__ssprint_r+0x14>
 80388ae:	f04f 0800 	mov.w	r8, #0
 80388b2:	e7b1      	b.n	8038818 <__ssprint_r+0x28>
 80388b4:	f04f 0a00 	mov.w	sl, #0
 80388b8:	46d0      	mov	r8, sl
 80388ba:	e7ad      	b.n	8038818 <__ssprint_r+0x28>
 80388bc:	9801      	ldr	r0, [sp, #4]
 80388be:	462a      	mov	r2, r5
 80388c0:	f004 fcfc 	bl	803d2bc <_realloc_r>
 80388c4:	4606      	mov	r6, r0
 80388c6:	2800      	cmp	r0, #0
 80388c8:	d1d4      	bne.n	8038874 <__ssprint_r+0x84>
 80388ca:	6921      	ldr	r1, [r4, #16]
 80388cc:	9801      	ldr	r0, [sp, #4]
 80388ce:	f7ff fbcd 	bl	803806c <_free_r>
 80388d2:	9a01      	ldr	r2, [sp, #4]
 80388d4:	230c      	movs	r3, #12
 80388d6:	6013      	str	r3, [r2, #0]
 80388d8:	89a3      	ldrh	r3, [r4, #12]
 80388da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80388de:	81a3      	strh	r3, [r4, #12]
 80388e0:	2300      	movs	r3, #0
 80388e2:	60bb      	str	r3, [r7, #8]
 80388e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80388e8:	e78d      	b.n	8038806 <__ssprint_r+0x16>
	...

080388ec <_svfiprintf_r>:
 80388ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80388f0:	461d      	mov	r5, r3
 80388f2:	898b      	ldrh	r3, [r1, #12]
 80388f4:	b0bb      	sub	sp, #236	@ 0xec
 80388f6:	468b      	mov	fp, r1
 80388f8:	0619      	lsls	r1, r3, #24
 80388fa:	9001      	str	r0, [sp, #4]
 80388fc:	9202      	str	r2, [sp, #8]
 80388fe:	d514      	bpl.n	803892a <_svfiprintf_r+0x3e>
 8038900:	f8db 3010 	ldr.w	r3, [fp, #16]
 8038904:	b98b      	cbnz	r3, 803892a <_svfiprintf_r+0x3e>
 8038906:	2140      	movs	r1, #64	@ 0x40
 8038908:	f7ff fcc8 	bl	803829c <_malloc_r>
 803890c:	f8cb 0000 	str.w	r0, [fp]
 8038910:	f8cb 0010 	str.w	r0, [fp, #16]
 8038914:	b930      	cbnz	r0, 8038924 <_svfiprintf_r+0x38>
 8038916:	9a01      	ldr	r2, [sp, #4]
 8038918:	230c      	movs	r3, #12
 803891a:	6013      	str	r3, [r2, #0]
 803891c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8038920:	9304      	str	r3, [sp, #16]
 8038922:	e3df      	b.n	80390e4 <_svfiprintf_r+0x7f8>
 8038924:	2340      	movs	r3, #64	@ 0x40
 8038926:	f8cb 3014 	str.w	r3, [fp, #20]
 803892a:	2300      	movs	r3, #0
 803892c:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 8038930:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8038934:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8038938:	ae11      	add	r6, sp, #68	@ 0x44
 803893a:	960e      	str	r6, [sp, #56]	@ 0x38
 803893c:	9304      	str	r3, [sp, #16]
 803893e:	9b02      	ldr	r3, [sp, #8]
 8038940:	461c      	mov	r4, r3
 8038942:	f813 2b01 	ldrb.w	r2, [r3], #1
 8038946:	b10a      	cbz	r2, 803894c <_svfiprintf_r+0x60>
 8038948:	2a25      	cmp	r2, #37	@ 0x25
 803894a:	d1f9      	bne.n	8038940 <_svfiprintf_r+0x54>
 803894c:	9a02      	ldr	r2, [sp, #8]
 803894e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8038950:	1aa7      	subs	r7, r4, r2
 8038952:	d00c      	beq.n	803896e <_svfiprintf_r+0x82>
 8038954:	443b      	add	r3, r7
 8038956:	9310      	str	r3, [sp, #64]	@ 0x40
 8038958:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803895a:	3301      	adds	r3, #1
 803895c:	2b07      	cmp	r3, #7
 803895e:	e9c6 2700 	strd	r2, r7, [r6]
 8038962:	930f      	str	r3, [sp, #60]	@ 0x3c
 8038964:	dc76      	bgt.n	8038a54 <_svfiprintf_r+0x168>
 8038966:	3608      	adds	r6, #8
 8038968:	9b04      	ldr	r3, [sp, #16]
 803896a:	443b      	add	r3, r7
 803896c:	9304      	str	r3, [sp, #16]
 803896e:	7823      	ldrb	r3, [r4, #0]
 8038970:	2b00      	cmp	r3, #0
 8038972:	f000 83ce 	beq.w	8039112 <_svfiprintf_r+0x826>
 8038976:	2300      	movs	r3, #0
 8038978:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 803897c:	3401      	adds	r4, #1
 803897e:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8038982:	9200      	str	r2, [sp, #0]
 8038984:	9303      	str	r3, [sp, #12]
 8038986:	4699      	mov	r9, r3
 8038988:	4622      	mov	r2, r4
 803898a:	f812 3b01 	ldrb.w	r3, [r2], #1
 803898e:	9202      	str	r2, [sp, #8]
 8038990:	f1a3 0220 	sub.w	r2, r3, #32
 8038994:	2a5a      	cmp	r2, #90	@ 0x5a
 8038996:	f200 8318 	bhi.w	8038fca <_svfiprintf_r+0x6de>
 803899a:	e8df f012 	tbh	[pc, r2, lsl #1]
 803899e:	009a      	.short	0x009a
 80389a0:	03160316 	.word	0x03160316
 80389a4:	031600a2 	.word	0x031600a2
 80389a8:	03160316 	.word	0x03160316
 80389ac:	03160082 	.word	0x03160082
 80389b0:	00a50316 	.word	0x00a50316
 80389b4:	031600af 	.word	0x031600af
 80389b8:	00b100ac 	.word	0x00b100ac
 80389bc:	00cc0316 	.word	0x00cc0316
 80389c0:	00cf00cf 	.word	0x00cf00cf
 80389c4:	00cf00cf 	.word	0x00cf00cf
 80389c8:	00cf00cf 	.word	0x00cf00cf
 80389cc:	00cf00cf 	.word	0x00cf00cf
 80389d0:	031600cf 	.word	0x031600cf
 80389d4:	03160316 	.word	0x03160316
 80389d8:	03160316 	.word	0x03160316
 80389dc:	03160316 	.word	0x03160316
 80389e0:	03160316 	.word	0x03160316
 80389e4:	010600f9 	.word	0x010600f9
 80389e8:	03160316 	.word	0x03160316
 80389ec:	03160316 	.word	0x03160316
 80389f0:	03160316 	.word	0x03160316
 80389f4:	03160316 	.word	0x03160316
 80389f8:	03160316 	.word	0x03160316
 80389fc:	03160154 	.word	0x03160154
 8038a00:	03160316 	.word	0x03160316
 8038a04:	0316019b 	.word	0x0316019b
 8038a08:	0316027d 	.word	0x0316027d
 8038a0c:	029d0316 	.word	0x029d0316
 8038a10:	03160316 	.word	0x03160316
 8038a14:	03160316 	.word	0x03160316
 8038a18:	03160316 	.word	0x03160316
 8038a1c:	03160316 	.word	0x03160316
 8038a20:	03160316 	.word	0x03160316
 8038a24:	010800f9 	.word	0x010800f9
 8038a28:	03160316 	.word	0x03160316
 8038a2c:	00df0316 	.word	0x00df0316
 8038a30:	00f30108 	.word	0x00f30108
 8038a34:	00ec0316 	.word	0x00ec0316
 8038a38:	01340316 	.word	0x01340316
 8038a3c:	018a0156 	.word	0x018a0156
 8038a40:	031600f3 	.word	0x031600f3
 8038a44:	0098019b 	.word	0x0098019b
 8038a48:	0316027f 	.word	0x0316027f
 8038a4c:	00650316 	.word	0x00650316
 8038a50:	00980316 	.word	0x00980316
 8038a54:	9801      	ldr	r0, [sp, #4]
 8038a56:	aa0e      	add	r2, sp, #56	@ 0x38
 8038a58:	4659      	mov	r1, fp
 8038a5a:	f7ff fec9 	bl	80387f0 <__ssprint_r>
 8038a5e:	2800      	cmp	r0, #0
 8038a60:	f040 833b 	bne.w	80390da <_svfiprintf_r+0x7ee>
 8038a64:	ae11      	add	r6, sp, #68	@ 0x44
 8038a66:	e77f      	b.n	8038968 <_svfiprintf_r+0x7c>
 8038a68:	4a99      	ldr	r2, [pc, #612]	@ (8038cd0 <_svfiprintf_r+0x3e4>)
 8038a6a:	9205      	str	r2, [sp, #20]
 8038a6c:	f019 0220 	ands.w	r2, r9, #32
 8038a70:	f000 8234 	beq.w	8038edc <_svfiprintf_r+0x5f0>
 8038a74:	3507      	adds	r5, #7
 8038a76:	f025 0507 	bic.w	r5, r5, #7
 8038a7a:	462f      	mov	r7, r5
 8038a7c:	686d      	ldr	r5, [r5, #4]
 8038a7e:	f857 4b08 	ldr.w	r4, [r7], #8
 8038a82:	f019 0f01 	tst.w	r9, #1
 8038a86:	d009      	beq.n	8038a9c <_svfiprintf_r+0x1b0>
 8038a88:	ea54 0205 	orrs.w	r2, r4, r5
 8038a8c:	bf1f      	itttt	ne
 8038a8e:	2230      	movne	r2, #48	@ 0x30
 8038a90:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 8038a94:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 8038a98:	f049 0902 	orrne.w	r9, r9, #2
 8038a9c:	f429 6980 	bic.w	r9, r9, #1024	@ 0x400
 8038aa0:	e113      	b.n	8038cca <_svfiprintf_r+0x3de>
 8038aa2:	9801      	ldr	r0, [sp, #4]
 8038aa4:	f7fe fb32 	bl	803710c <_localeconv_r>
 8038aa8:	6843      	ldr	r3, [r0, #4]
 8038aaa:	9308      	str	r3, [sp, #32]
 8038aac:	4618      	mov	r0, r3
 8038aae:	f7d7 fbf7 	bl	80102a0 <strlen>
 8038ab2:	9007      	str	r0, [sp, #28]
 8038ab4:	9801      	ldr	r0, [sp, #4]
 8038ab6:	f7fe fb29 	bl	803710c <_localeconv_r>
 8038aba:	6883      	ldr	r3, [r0, #8]
 8038abc:	9306      	str	r3, [sp, #24]
 8038abe:	9b07      	ldr	r3, [sp, #28]
 8038ac0:	b12b      	cbz	r3, 8038ace <_svfiprintf_r+0x1e2>
 8038ac2:	9b06      	ldr	r3, [sp, #24]
 8038ac4:	b11b      	cbz	r3, 8038ace <_svfiprintf_r+0x1e2>
 8038ac6:	781b      	ldrb	r3, [r3, #0]
 8038ac8:	b10b      	cbz	r3, 8038ace <_svfiprintf_r+0x1e2>
 8038aca:	f449 6980 	orr.w	r9, r9, #1024	@ 0x400
 8038ace:	9c02      	ldr	r4, [sp, #8]
 8038ad0:	e75a      	b.n	8038988 <_svfiprintf_r+0x9c>
 8038ad2:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8038ad6:	2b00      	cmp	r3, #0
 8038ad8:	d1f9      	bne.n	8038ace <_svfiprintf_r+0x1e2>
 8038ada:	2320      	movs	r3, #32
 8038adc:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8038ae0:	e7f5      	b.n	8038ace <_svfiprintf_r+0x1e2>
 8038ae2:	f049 0901 	orr.w	r9, r9, #1
 8038ae6:	e7f2      	b.n	8038ace <_svfiprintf_r+0x1e2>
 8038ae8:	f855 3b04 	ldr.w	r3, [r5], #4
 8038aec:	9303      	str	r3, [sp, #12]
 8038aee:	2b00      	cmp	r3, #0
 8038af0:	daed      	bge.n	8038ace <_svfiprintf_r+0x1e2>
 8038af2:	425b      	negs	r3, r3
 8038af4:	9303      	str	r3, [sp, #12]
 8038af6:	f049 0904 	orr.w	r9, r9, #4
 8038afa:	e7e8      	b.n	8038ace <_svfiprintf_r+0x1e2>
 8038afc:	232b      	movs	r3, #43	@ 0x2b
 8038afe:	e7ed      	b.n	8038adc <_svfiprintf_r+0x1f0>
 8038b00:	9a02      	ldr	r2, [sp, #8]
 8038b02:	f812 3b01 	ldrb.w	r3, [r2], #1
 8038b06:	2b2a      	cmp	r3, #42	@ 0x2a
 8038b08:	d111      	bne.n	8038b2e <_svfiprintf_r+0x242>
 8038b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8038b0e:	9202      	str	r2, [sp, #8]
 8038b10:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8038b14:	9300      	str	r3, [sp, #0]
 8038b16:	e7da      	b.n	8038ace <_svfiprintf_r+0x1e2>
 8038b18:	9b00      	ldr	r3, [sp, #0]
 8038b1a:	fb00 1303 	mla	r3, r0, r3, r1
 8038b1e:	9300      	str	r3, [sp, #0]
 8038b20:	f812 3b01 	ldrb.w	r3, [r2], #1
 8038b24:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8038b28:	2909      	cmp	r1, #9
 8038b2a:	d9f5      	bls.n	8038b18 <_svfiprintf_r+0x22c>
 8038b2c:	e72f      	b.n	803898e <_svfiprintf_r+0xa2>
 8038b2e:	2100      	movs	r1, #0
 8038b30:	9100      	str	r1, [sp, #0]
 8038b32:	200a      	movs	r0, #10
 8038b34:	e7f6      	b.n	8038b24 <_svfiprintf_r+0x238>
 8038b36:	f049 0980 	orr.w	r9, r9, #128	@ 0x80
 8038b3a:	e7c8      	b.n	8038ace <_svfiprintf_r+0x1e2>
 8038b3c:	2100      	movs	r1, #0
 8038b3e:	9a02      	ldr	r2, [sp, #8]
 8038b40:	9103      	str	r1, [sp, #12]
 8038b42:	200a      	movs	r0, #10
 8038b44:	9903      	ldr	r1, [sp, #12]
 8038b46:	3b30      	subs	r3, #48	@ 0x30
 8038b48:	fb00 3301 	mla	r3, r0, r1, r3
 8038b4c:	9303      	str	r3, [sp, #12]
 8038b4e:	f812 3b01 	ldrb.w	r3, [r2], #1
 8038b52:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8038b56:	2909      	cmp	r1, #9
 8038b58:	d9f4      	bls.n	8038b44 <_svfiprintf_r+0x258>
 8038b5a:	e718      	b.n	803898e <_svfiprintf_r+0xa2>
 8038b5c:	9b02      	ldr	r3, [sp, #8]
 8038b5e:	781b      	ldrb	r3, [r3, #0]
 8038b60:	2b68      	cmp	r3, #104	@ 0x68
 8038b62:	bf01      	itttt	eq
 8038b64:	9b02      	ldreq	r3, [sp, #8]
 8038b66:	3301      	addeq	r3, #1
 8038b68:	9302      	streq	r3, [sp, #8]
 8038b6a:	f449 7900 	orreq.w	r9, r9, #512	@ 0x200
 8038b6e:	bf18      	it	ne
 8038b70:	f049 0940 	orrne.w	r9, r9, #64	@ 0x40
 8038b74:	e7ab      	b.n	8038ace <_svfiprintf_r+0x1e2>
 8038b76:	9b02      	ldr	r3, [sp, #8]
 8038b78:	781b      	ldrb	r3, [r3, #0]
 8038b7a:	2b6c      	cmp	r3, #108	@ 0x6c
 8038b7c:	d105      	bne.n	8038b8a <_svfiprintf_r+0x29e>
 8038b7e:	9b02      	ldr	r3, [sp, #8]
 8038b80:	3301      	adds	r3, #1
 8038b82:	9302      	str	r3, [sp, #8]
 8038b84:	f049 0920 	orr.w	r9, r9, #32
 8038b88:	e7a1      	b.n	8038ace <_svfiprintf_r+0x1e2>
 8038b8a:	f049 0910 	orr.w	r9, r9, #16
 8038b8e:	e79e      	b.n	8038ace <_svfiprintf_r+0x1e2>
 8038b90:	462f      	mov	r7, r5
 8038b92:	2400      	movs	r4, #0
 8038b94:	f857 3b04 	ldr.w	r3, [r7], #4
 8038b98:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8038b9c:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8038ba0:	2301      	movs	r3, #1
 8038ba2:	9300      	str	r3, [sp, #0]
 8038ba4:	f10d 0884 	add.w	r8, sp, #132	@ 0x84
 8038ba8:	e0aa      	b.n	8038d00 <_svfiprintf_r+0x414>
 8038baa:	f049 0910 	orr.w	r9, r9, #16
 8038bae:	f019 0f20 	tst.w	r9, #32
 8038bb2:	d011      	beq.n	8038bd8 <_svfiprintf_r+0x2ec>
 8038bb4:	3507      	adds	r5, #7
 8038bb6:	f025 0507 	bic.w	r5, r5, #7
 8038bba:	462f      	mov	r7, r5
 8038bbc:	686d      	ldr	r5, [r5, #4]
 8038bbe:	f857 4b08 	ldr.w	r4, [r7], #8
 8038bc2:	2d00      	cmp	r5, #0
 8038bc4:	da06      	bge.n	8038bd4 <_svfiprintf_r+0x2e8>
 8038bc6:	4264      	negs	r4, r4
 8038bc8:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8038bcc:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8038bd0:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8038bd4:	2301      	movs	r3, #1
 8038bd6:	e048      	b.n	8038c6a <_svfiprintf_r+0x37e>
 8038bd8:	462f      	mov	r7, r5
 8038bda:	f019 0f10 	tst.w	r9, #16
 8038bde:	f857 5b04 	ldr.w	r5, [r7], #4
 8038be2:	d002      	beq.n	8038bea <_svfiprintf_r+0x2fe>
 8038be4:	462c      	mov	r4, r5
 8038be6:	17ed      	asrs	r5, r5, #31
 8038be8:	e7eb      	b.n	8038bc2 <_svfiprintf_r+0x2d6>
 8038bea:	f019 0f40 	tst.w	r9, #64	@ 0x40
 8038bee:	d003      	beq.n	8038bf8 <_svfiprintf_r+0x30c>
 8038bf0:	b22c      	sxth	r4, r5
 8038bf2:	f345 35c0 	sbfx	r5, r5, #15, #1
 8038bf6:	e7e4      	b.n	8038bc2 <_svfiprintf_r+0x2d6>
 8038bf8:	f419 7f00 	tst.w	r9, #512	@ 0x200
 8038bfc:	d0f2      	beq.n	8038be4 <_svfiprintf_r+0x2f8>
 8038bfe:	b26c      	sxtb	r4, r5
 8038c00:	f345 15c0 	sbfx	r5, r5, #7, #1
 8038c04:	e7dd      	b.n	8038bc2 <_svfiprintf_r+0x2d6>
 8038c06:	f019 0f20 	tst.w	r9, #32
 8038c0a:	d007      	beq.n	8038c1c <_svfiprintf_r+0x330>
 8038c0c:	9a04      	ldr	r2, [sp, #16]
 8038c0e:	682b      	ldr	r3, [r5, #0]
 8038c10:	9904      	ldr	r1, [sp, #16]
 8038c12:	17d2      	asrs	r2, r2, #31
 8038c14:	e9c3 1200 	strd	r1, r2, [r3]
 8038c18:	3504      	adds	r5, #4
 8038c1a:	e690      	b.n	803893e <_svfiprintf_r+0x52>
 8038c1c:	f019 0f10 	tst.w	r9, #16
 8038c20:	d003      	beq.n	8038c2a <_svfiprintf_r+0x33e>
 8038c22:	682b      	ldr	r3, [r5, #0]
 8038c24:	9a04      	ldr	r2, [sp, #16]
 8038c26:	601a      	str	r2, [r3, #0]
 8038c28:	e7f6      	b.n	8038c18 <_svfiprintf_r+0x32c>
 8038c2a:	f019 0f40 	tst.w	r9, #64	@ 0x40
 8038c2e:	d003      	beq.n	8038c38 <_svfiprintf_r+0x34c>
 8038c30:	682b      	ldr	r3, [r5, #0]
 8038c32:	9a04      	ldr	r2, [sp, #16]
 8038c34:	801a      	strh	r2, [r3, #0]
 8038c36:	e7ef      	b.n	8038c18 <_svfiprintf_r+0x32c>
 8038c38:	f419 7f00 	tst.w	r9, #512	@ 0x200
 8038c3c:	d0f1      	beq.n	8038c22 <_svfiprintf_r+0x336>
 8038c3e:	682b      	ldr	r3, [r5, #0]
 8038c40:	9a04      	ldr	r2, [sp, #16]
 8038c42:	701a      	strb	r2, [r3, #0]
 8038c44:	e7e8      	b.n	8038c18 <_svfiprintf_r+0x32c>
 8038c46:	f049 0910 	orr.w	r9, r9, #16
 8038c4a:	f019 0320 	ands.w	r3, r9, #32
 8038c4e:	d01e      	beq.n	8038c8e <_svfiprintf_r+0x3a2>
 8038c50:	3507      	adds	r5, #7
 8038c52:	f025 0507 	bic.w	r5, r5, #7
 8038c56:	462f      	mov	r7, r5
 8038c58:	686d      	ldr	r5, [r5, #4]
 8038c5a:	f857 4b08 	ldr.w	r4, [r7], #8
 8038c5e:	f429 6980 	bic.w	r9, r9, #1024	@ 0x400
 8038c62:	2300      	movs	r3, #0
 8038c64:	2200      	movs	r2, #0
 8038c66:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 8038c6a:	9a00      	ldr	r2, [sp, #0]
 8038c6c:	3201      	adds	r2, #1
 8038c6e:	f000 8259 	beq.w	8039124 <_svfiprintf_r+0x838>
 8038c72:	ea54 0205 	orrs.w	r2, r4, r5
 8038c76:	f029 0a80 	bic.w	sl, r9, #128	@ 0x80
 8038c7a:	f040 8258 	bne.w	803912e <_svfiprintf_r+0x842>
 8038c7e:	9a00      	ldr	r2, [sp, #0]
 8038c80:	2a00      	cmp	r2, #0
 8038c82:	f000 8199 	beq.w	8038fb8 <_svfiprintf_r+0x6cc>
 8038c86:	2b01      	cmp	r3, #1
 8038c88:	f040 8254 	bne.w	8039134 <_svfiprintf_r+0x848>
 8038c8c:	e13d      	b.n	8038f0a <_svfiprintf_r+0x61e>
 8038c8e:	462f      	mov	r7, r5
 8038c90:	f019 0510 	ands.w	r5, r9, #16
 8038c94:	f857 4b04 	ldr.w	r4, [r7], #4
 8038c98:	d001      	beq.n	8038c9e <_svfiprintf_r+0x3b2>
 8038c9a:	461d      	mov	r5, r3
 8038c9c:	e7df      	b.n	8038c5e <_svfiprintf_r+0x372>
 8038c9e:	f019 0340 	ands.w	r3, r9, #64	@ 0x40
 8038ca2:	d001      	beq.n	8038ca8 <_svfiprintf_r+0x3bc>
 8038ca4:	b2a4      	uxth	r4, r4
 8038ca6:	e7da      	b.n	8038c5e <_svfiprintf_r+0x372>
 8038ca8:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 8038cac:	d0d7      	beq.n	8038c5e <_svfiprintf_r+0x372>
 8038cae:	b2e4      	uxtb	r4, r4
 8038cb0:	e7f3      	b.n	8038c9a <_svfiprintf_r+0x3ae>
 8038cb2:	462f      	mov	r7, r5
 8038cb4:	f647 0330 	movw	r3, #30768	@ 0x7830
 8038cb8:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8038cbc:	f857 4b04 	ldr.w	r4, [r7], #4
 8038cc0:	4b03      	ldr	r3, [pc, #12]	@ (8038cd0 <_svfiprintf_r+0x3e4>)
 8038cc2:	9305      	str	r3, [sp, #20]
 8038cc4:	2500      	movs	r5, #0
 8038cc6:	f049 0902 	orr.w	r9, r9, #2
 8038cca:	2302      	movs	r3, #2
 8038ccc:	e7ca      	b.n	8038c64 <_svfiprintf_r+0x378>
 8038cce:	bf00      	nop
 8038cd0:	080447ac 	.word	0x080447ac
 8038cd4:	9b00      	ldr	r3, [sp, #0]
 8038cd6:	462f      	mov	r7, r5
 8038cd8:	1c5a      	adds	r2, r3, #1
 8038cda:	f04f 0500 	mov.w	r5, #0
 8038cde:	f857 8b04 	ldr.w	r8, [r7], #4
 8038ce2:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 8038ce6:	f000 80d2 	beq.w	8038e8e <_svfiprintf_r+0x5a2>
 8038cea:	461a      	mov	r2, r3
 8038cec:	4629      	mov	r1, r5
 8038cee:	4640      	mov	r0, r8
 8038cf0:	f7d7 fa86 	bl	8010200 <memchr>
 8038cf4:	4604      	mov	r4, r0
 8038cf6:	b118      	cbz	r0, 8038d00 <_svfiprintf_r+0x414>
 8038cf8:	eba0 0308 	sub.w	r3, r0, r8
 8038cfc:	9300      	str	r3, [sp, #0]
 8038cfe:	462c      	mov	r4, r5
 8038d00:	9d00      	ldr	r5, [sp, #0]
 8038d02:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8038d06:	42a5      	cmp	r5, r4
 8038d08:	bfb8      	it	lt
 8038d0a:	4625      	movlt	r5, r4
 8038d0c:	b103      	cbz	r3, 8038d10 <_svfiprintf_r+0x424>
 8038d0e:	3501      	adds	r5, #1
 8038d10:	f019 0302 	ands.w	r3, r9, #2
 8038d14:	9309      	str	r3, [sp, #36]	@ 0x24
 8038d16:	bf18      	it	ne
 8038d18:	3502      	addne	r5, #2
 8038d1a:	f019 0384 	ands.w	r3, r9, #132	@ 0x84
 8038d1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8038d20:	d123      	bne.n	8038d6a <_svfiprintf_r+0x47e>
 8038d22:	9b03      	ldr	r3, [sp, #12]
 8038d24:	eba3 0a05 	sub.w	sl, r3, r5
 8038d28:	f1ba 0f00 	cmp.w	sl, #0
 8038d2c:	dd1d      	ble.n	8038d6a <_svfiprintf_r+0x47e>
 8038d2e:	4bac      	ldr	r3, [pc, #688]	@ (8038fe0 <_svfiprintf_r+0x6f4>)
 8038d30:	6033      	str	r3, [r6, #0]
 8038d32:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8038d36:	f1ba 0f10 	cmp.w	sl, #16
 8038d3a:	f102 0201 	add.w	r2, r2, #1
 8038d3e:	f106 0008 	add.w	r0, r6, #8
 8038d42:	f300 8153 	bgt.w	8038fec <_svfiprintf_r+0x700>
 8038d46:	eb0c 010a 	add.w	r1, ip, sl
 8038d4a:	2a07      	cmp	r2, #7
 8038d4c:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8038d50:	f8c6 a004 	str.w	sl, [r6, #4]
 8038d54:	f340 815e 	ble.w	8039014 <_svfiprintf_r+0x728>
 8038d58:	9801      	ldr	r0, [sp, #4]
 8038d5a:	aa0e      	add	r2, sp, #56	@ 0x38
 8038d5c:	4659      	mov	r1, fp
 8038d5e:	f7ff fd47 	bl	80387f0 <__ssprint_r>
 8038d62:	2800      	cmp	r0, #0
 8038d64:	f040 81b9 	bne.w	80390da <_svfiprintf_r+0x7ee>
 8038d68:	ae11      	add	r6, sp, #68	@ 0x44
 8038d6a:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 8038d6e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8038d72:	b161      	cbz	r1, 8038d8e <_svfiprintf_r+0x4a2>
 8038d74:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 8038d78:	3301      	adds	r3, #1
 8038d7a:	6031      	str	r1, [r6, #0]
 8038d7c:	2101      	movs	r1, #1
 8038d7e:	440a      	add	r2, r1
 8038d80:	2b07      	cmp	r3, #7
 8038d82:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8038d86:	6071      	str	r1, [r6, #4]
 8038d88:	f300 8146 	bgt.w	8039018 <_svfiprintf_r+0x72c>
 8038d8c:	3608      	adds	r6, #8
 8038d8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8038d90:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8038d94:	b159      	cbz	r1, 8038dae <_svfiprintf_r+0x4c2>
 8038d96:	a90d      	add	r1, sp, #52	@ 0x34
 8038d98:	3301      	adds	r3, #1
 8038d9a:	6031      	str	r1, [r6, #0]
 8038d9c:	2102      	movs	r1, #2
 8038d9e:	440a      	add	r2, r1
 8038da0:	2b07      	cmp	r3, #7
 8038da2:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8038da6:	6071      	str	r1, [r6, #4]
 8038da8:	f300 813f 	bgt.w	803902a <_svfiprintf_r+0x73e>
 8038dac:	3608      	adds	r6, #8
 8038dae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8038db0:	2b80      	cmp	r3, #128	@ 0x80
 8038db2:	d123      	bne.n	8038dfc <_svfiprintf_r+0x510>
 8038db4:	9b03      	ldr	r3, [sp, #12]
 8038db6:	eba3 0a05 	sub.w	sl, r3, r5
 8038dba:	f1ba 0f00 	cmp.w	sl, #0
 8038dbe:	dd1d      	ble.n	8038dfc <_svfiprintf_r+0x510>
 8038dc0:	4b88      	ldr	r3, [pc, #544]	@ (8038fe4 <_svfiprintf_r+0x6f8>)
 8038dc2:	6033      	str	r3, [r6, #0]
 8038dc4:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8038dc8:	f1ba 0f10 	cmp.w	sl, #16
 8038dcc:	f102 0201 	add.w	r2, r2, #1
 8038dd0:	f106 0008 	add.w	r0, r6, #8
 8038dd4:	f300 8132 	bgt.w	803903c <_svfiprintf_r+0x750>
 8038dd8:	eb0c 010a 	add.w	r1, ip, sl
 8038ddc:	2a07      	cmp	r2, #7
 8038dde:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8038de2:	f8c6 a004 	str.w	sl, [r6, #4]
 8038de6:	f340 813d 	ble.w	8039064 <_svfiprintf_r+0x778>
 8038dea:	9801      	ldr	r0, [sp, #4]
 8038dec:	aa0e      	add	r2, sp, #56	@ 0x38
 8038dee:	4659      	mov	r1, fp
 8038df0:	f7ff fcfe 	bl	80387f0 <__ssprint_r>
 8038df4:	2800      	cmp	r0, #0
 8038df6:	f040 8170 	bne.w	80390da <_svfiprintf_r+0x7ee>
 8038dfa:	ae11      	add	r6, sp, #68	@ 0x44
 8038dfc:	9b00      	ldr	r3, [sp, #0]
 8038dfe:	1ae4      	subs	r4, r4, r3
 8038e00:	2c00      	cmp	r4, #0
 8038e02:	dd1a      	ble.n	8038e3a <_svfiprintf_r+0x54e>
 8038e04:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8038e08:	4876      	ldr	r0, [pc, #472]	@ (8038fe4 <_svfiprintf_r+0x6f8>)
 8038e0a:	6030      	str	r0, [r6, #0]
 8038e0c:	2c10      	cmp	r4, #16
 8038e0e:	f103 0301 	add.w	r3, r3, #1
 8038e12:	f106 0108 	add.w	r1, r6, #8
 8038e16:	f300 8127 	bgt.w	8039068 <_svfiprintf_r+0x77c>
 8038e1a:	6074      	str	r4, [r6, #4]
 8038e1c:	2b07      	cmp	r3, #7
 8038e1e:	4414      	add	r4, r2
 8038e20:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 8038e24:	f340 8131 	ble.w	803908a <_svfiprintf_r+0x79e>
 8038e28:	9801      	ldr	r0, [sp, #4]
 8038e2a:	aa0e      	add	r2, sp, #56	@ 0x38
 8038e2c:	4659      	mov	r1, fp
 8038e2e:	f7ff fcdf 	bl	80387f0 <__ssprint_r>
 8038e32:	2800      	cmp	r0, #0
 8038e34:	f040 8151 	bne.w	80390da <_svfiprintf_r+0x7ee>
 8038e38:	ae11      	add	r6, sp, #68	@ 0x44
 8038e3a:	9b00      	ldr	r3, [sp, #0]
 8038e3c:	9a00      	ldr	r2, [sp, #0]
 8038e3e:	6073      	str	r3, [r6, #4]
 8038e40:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8038e42:	f8c6 8000 	str.w	r8, [r6]
 8038e46:	4413      	add	r3, r2
 8038e48:	9310      	str	r3, [sp, #64]	@ 0x40
 8038e4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8038e4c:	3301      	adds	r3, #1
 8038e4e:	2b07      	cmp	r3, #7
 8038e50:	930f      	str	r3, [sp, #60]	@ 0x3c
 8038e52:	f300 811c 	bgt.w	803908e <_svfiprintf_r+0x7a2>
 8038e56:	f106 0308 	add.w	r3, r6, #8
 8038e5a:	f019 0f04 	tst.w	r9, #4
 8038e5e:	f040 811e 	bne.w	803909e <_svfiprintf_r+0x7b2>
 8038e62:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8038e66:	42aa      	cmp	r2, r5
 8038e68:	bfac      	ite	ge
 8038e6a:	189b      	addge	r3, r3, r2
 8038e6c:	195b      	addlt	r3, r3, r5
 8038e6e:	9304      	str	r3, [sp, #16]
 8038e70:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8038e72:	b13b      	cbz	r3, 8038e84 <_svfiprintf_r+0x598>
 8038e74:	9801      	ldr	r0, [sp, #4]
 8038e76:	aa0e      	add	r2, sp, #56	@ 0x38
 8038e78:	4659      	mov	r1, fp
 8038e7a:	f7ff fcb9 	bl	80387f0 <__ssprint_r>
 8038e7e:	2800      	cmp	r0, #0
 8038e80:	f040 812b 	bne.w	80390da <_svfiprintf_r+0x7ee>
 8038e84:	2300      	movs	r3, #0
 8038e86:	930f      	str	r3, [sp, #60]	@ 0x3c
 8038e88:	463d      	mov	r5, r7
 8038e8a:	ae11      	add	r6, sp, #68	@ 0x44
 8038e8c:	e557      	b.n	803893e <_svfiprintf_r+0x52>
 8038e8e:	4640      	mov	r0, r8
 8038e90:	f7d7 fa06 	bl	80102a0 <strlen>
 8038e94:	9000      	str	r0, [sp, #0]
 8038e96:	e732      	b.n	8038cfe <_svfiprintf_r+0x412>
 8038e98:	f049 0910 	orr.w	r9, r9, #16
 8038e9c:	f019 0320 	ands.w	r3, r9, #32
 8038ea0:	d008      	beq.n	8038eb4 <_svfiprintf_r+0x5c8>
 8038ea2:	3507      	adds	r5, #7
 8038ea4:	f025 0507 	bic.w	r5, r5, #7
 8038ea8:	462f      	mov	r7, r5
 8038eaa:	686d      	ldr	r5, [r5, #4]
 8038eac:	f857 4b08 	ldr.w	r4, [r7], #8
 8038eb0:	2301      	movs	r3, #1
 8038eb2:	e6d7      	b.n	8038c64 <_svfiprintf_r+0x378>
 8038eb4:	462f      	mov	r7, r5
 8038eb6:	f019 0510 	ands.w	r5, r9, #16
 8038eba:	f857 4b04 	ldr.w	r4, [r7], #4
 8038ebe:	d001      	beq.n	8038ec4 <_svfiprintf_r+0x5d8>
 8038ec0:	461d      	mov	r5, r3
 8038ec2:	e7f5      	b.n	8038eb0 <_svfiprintf_r+0x5c4>
 8038ec4:	f019 0340 	ands.w	r3, r9, #64	@ 0x40
 8038ec8:	d001      	beq.n	8038ece <_svfiprintf_r+0x5e2>
 8038eca:	b2a4      	uxth	r4, r4
 8038ecc:	e7f0      	b.n	8038eb0 <_svfiprintf_r+0x5c4>
 8038ece:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 8038ed2:	d0ed      	beq.n	8038eb0 <_svfiprintf_r+0x5c4>
 8038ed4:	b2e4      	uxtb	r4, r4
 8038ed6:	e7f3      	b.n	8038ec0 <_svfiprintf_r+0x5d4>
 8038ed8:	4a43      	ldr	r2, [pc, #268]	@ (8038fe8 <_svfiprintf_r+0x6fc>)
 8038eda:	e5c6      	b.n	8038a6a <_svfiprintf_r+0x17e>
 8038edc:	462f      	mov	r7, r5
 8038ede:	f019 0510 	ands.w	r5, r9, #16
 8038ee2:	f857 4b04 	ldr.w	r4, [r7], #4
 8038ee6:	d001      	beq.n	8038eec <_svfiprintf_r+0x600>
 8038ee8:	4615      	mov	r5, r2
 8038eea:	e5ca      	b.n	8038a82 <_svfiprintf_r+0x196>
 8038eec:	f019 0240 	ands.w	r2, r9, #64	@ 0x40
 8038ef0:	d001      	beq.n	8038ef6 <_svfiprintf_r+0x60a>
 8038ef2:	b2a4      	uxth	r4, r4
 8038ef4:	e5c5      	b.n	8038a82 <_svfiprintf_r+0x196>
 8038ef6:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 8038efa:	f43f adc2 	beq.w	8038a82 <_svfiprintf_r+0x196>
 8038efe:	b2e4      	uxtb	r4, r4
 8038f00:	e7f2      	b.n	8038ee8 <_svfiprintf_r+0x5fc>
 8038f02:	2c0a      	cmp	r4, #10
 8038f04:	f175 0300 	sbcs.w	r3, r5, #0
 8038f08:	d206      	bcs.n	8038f18 <_svfiprintf_r+0x62c>
 8038f0a:	3430      	adds	r4, #48	@ 0x30
 8038f0c:	b2e4      	uxtb	r4, r4
 8038f0e:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 8038f12:	f10d 08e7 	add.w	r8, sp, #231	@ 0xe7
 8038f16:	e129      	b.n	803916c <_svfiprintf_r+0x880>
 8038f18:	ab3a      	add	r3, sp, #232	@ 0xe8
 8038f1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8038f1c:	f40a 6380 	and.w	r3, sl, #1024	@ 0x400
 8038f20:	f04f 0900 	mov.w	r9, #0
 8038f24:	930a      	str	r3, [sp, #40]	@ 0x28
 8038f26:	220a      	movs	r2, #10
 8038f28:	2300      	movs	r3, #0
 8038f2a:	4620      	mov	r0, r4
 8038f2c:	4629      	mov	r1, r5
 8038f2e:	f7d7 ff13 	bl	8010d58 <__aeabi_uldivmod>
 8038f32:	460b      	mov	r3, r1
 8038f34:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8038f36:	900b      	str	r0, [sp, #44]	@ 0x2c
 8038f38:	3230      	adds	r2, #48	@ 0x30
 8038f3a:	f801 2c01 	strb.w	r2, [r1, #-1]
 8038f3e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8038f40:	f101 38ff 	add.w	r8, r1, #4294967295	@ 0xffffffff
 8038f44:	f109 0901 	add.w	r9, r9, #1
 8038f48:	b1e2      	cbz	r2, 8038f84 <_svfiprintf_r+0x698>
 8038f4a:	9a06      	ldr	r2, [sp, #24]
 8038f4c:	7812      	ldrb	r2, [r2, #0]
 8038f4e:	454a      	cmp	r2, r9
 8038f50:	d118      	bne.n	8038f84 <_svfiprintf_r+0x698>
 8038f52:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8038f56:	d015      	beq.n	8038f84 <_svfiprintf_r+0x698>
 8038f58:	2c0a      	cmp	r4, #10
 8038f5a:	f175 0200 	sbcs.w	r2, r5, #0
 8038f5e:	d311      	bcc.n	8038f84 <_svfiprintf_r+0x698>
 8038f60:	9309      	str	r3, [sp, #36]	@ 0x24
 8038f62:	9b07      	ldr	r3, [sp, #28]
 8038f64:	9908      	ldr	r1, [sp, #32]
 8038f66:	eba8 0803 	sub.w	r8, r8, r3
 8038f6a:	461a      	mov	r2, r3
 8038f6c:	4640      	mov	r0, r8
 8038f6e:	f7fc ff86 	bl	8035e7e <strncpy>
 8038f72:	9b06      	ldr	r3, [sp, #24]
 8038f74:	785a      	ldrb	r2, [r3, #1]
 8038f76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8038f78:	b172      	cbz	r2, 8038f98 <_svfiprintf_r+0x6ac>
 8038f7a:	9a06      	ldr	r2, [sp, #24]
 8038f7c:	3201      	adds	r2, #1
 8038f7e:	9206      	str	r2, [sp, #24]
 8038f80:	f04f 0900 	mov.w	r9, #0
 8038f84:	2c0a      	cmp	r4, #10
 8038f86:	f175 0500 	sbcs.w	r5, r5, #0
 8038f8a:	f0c0 80ef 	bcc.w	803916c <_svfiprintf_r+0x880>
 8038f8e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8038f90:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8038f94:	461d      	mov	r5, r3
 8038f96:	e7c6      	b.n	8038f26 <_svfiprintf_r+0x63a>
 8038f98:	4691      	mov	r9, r2
 8038f9a:	e7f3      	b.n	8038f84 <_svfiprintf_r+0x698>
 8038f9c:	f004 030f 	and.w	r3, r4, #15
 8038fa0:	9a05      	ldr	r2, [sp, #20]
 8038fa2:	0924      	lsrs	r4, r4, #4
 8038fa4:	5cd3      	ldrb	r3, [r2, r3]
 8038fa6:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8038faa:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8038fae:	092d      	lsrs	r5, r5, #4
 8038fb0:	ea54 0305 	orrs.w	r3, r4, r5
 8038fb4:	d1f2      	bne.n	8038f9c <_svfiprintf_r+0x6b0>
 8038fb6:	e0d9      	b.n	803916c <_svfiprintf_r+0x880>
 8038fb8:	b923      	cbnz	r3, 8038fc4 <_svfiprintf_r+0x6d8>
 8038fba:	f019 0f01 	tst.w	r9, #1
 8038fbe:	d001      	beq.n	8038fc4 <_svfiprintf_r+0x6d8>
 8038fc0:	2430      	movs	r4, #48	@ 0x30
 8038fc2:	e7a4      	b.n	8038f0e <_svfiprintf_r+0x622>
 8038fc4:	f10d 08e8 	add.w	r8, sp, #232	@ 0xe8
 8038fc8:	e0d0      	b.n	803916c <_svfiprintf_r+0x880>
 8038fca:	2b00      	cmp	r3, #0
 8038fcc:	f000 80a1 	beq.w	8039112 <_svfiprintf_r+0x826>
 8038fd0:	2400      	movs	r4, #0
 8038fd2:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8038fd6:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8038fda:	462f      	mov	r7, r5
 8038fdc:	e5e0      	b.n	8038ba0 <_svfiprintf_r+0x2b4>
 8038fde:	bf00      	nop
 8038fe0:	08044cdf 	.word	0x08044cdf
 8038fe4:	08044ccf 	.word	0x08044ccf
 8038fe8:	080447bd 	.word	0x080447bd
 8038fec:	2110      	movs	r1, #16
 8038fee:	6071      	str	r1, [r6, #4]
 8038ff0:	2a07      	cmp	r2, #7
 8038ff2:	4461      	add	r1, ip
 8038ff4:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8038ff8:	dd08      	ble.n	803900c <_svfiprintf_r+0x720>
 8038ffa:	9801      	ldr	r0, [sp, #4]
 8038ffc:	aa0e      	add	r2, sp, #56	@ 0x38
 8038ffe:	4659      	mov	r1, fp
 8039000:	f7ff fbf6 	bl	80387f0 <__ssprint_r>
 8039004:	2800      	cmp	r0, #0
 8039006:	d168      	bne.n	80390da <_svfiprintf_r+0x7ee>
 8039008:	4b5c      	ldr	r3, [pc, #368]	@ (803917c <_svfiprintf_r+0x890>)
 803900a:	a811      	add	r0, sp, #68	@ 0x44
 803900c:	f1aa 0a10 	sub.w	sl, sl, #16
 8039010:	4606      	mov	r6, r0
 8039012:	e68d      	b.n	8038d30 <_svfiprintf_r+0x444>
 8039014:	4606      	mov	r6, r0
 8039016:	e6a8      	b.n	8038d6a <_svfiprintf_r+0x47e>
 8039018:	9801      	ldr	r0, [sp, #4]
 803901a:	aa0e      	add	r2, sp, #56	@ 0x38
 803901c:	4659      	mov	r1, fp
 803901e:	f7ff fbe7 	bl	80387f0 <__ssprint_r>
 8039022:	2800      	cmp	r0, #0
 8039024:	d159      	bne.n	80390da <_svfiprintf_r+0x7ee>
 8039026:	ae11      	add	r6, sp, #68	@ 0x44
 8039028:	e6b1      	b.n	8038d8e <_svfiprintf_r+0x4a2>
 803902a:	9801      	ldr	r0, [sp, #4]
 803902c:	aa0e      	add	r2, sp, #56	@ 0x38
 803902e:	4659      	mov	r1, fp
 8039030:	f7ff fbde 	bl	80387f0 <__ssprint_r>
 8039034:	2800      	cmp	r0, #0
 8039036:	d150      	bne.n	80390da <_svfiprintf_r+0x7ee>
 8039038:	ae11      	add	r6, sp, #68	@ 0x44
 803903a:	e6b8      	b.n	8038dae <_svfiprintf_r+0x4c2>
 803903c:	2110      	movs	r1, #16
 803903e:	6071      	str	r1, [r6, #4]
 8039040:	2a07      	cmp	r2, #7
 8039042:	4461      	add	r1, ip
 8039044:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8039048:	dd08      	ble.n	803905c <_svfiprintf_r+0x770>
 803904a:	9801      	ldr	r0, [sp, #4]
 803904c:	aa0e      	add	r2, sp, #56	@ 0x38
 803904e:	4659      	mov	r1, fp
 8039050:	f7ff fbce 	bl	80387f0 <__ssprint_r>
 8039054:	2800      	cmp	r0, #0
 8039056:	d140      	bne.n	80390da <_svfiprintf_r+0x7ee>
 8039058:	4b49      	ldr	r3, [pc, #292]	@ (8039180 <_svfiprintf_r+0x894>)
 803905a:	a811      	add	r0, sp, #68	@ 0x44
 803905c:	f1aa 0a10 	sub.w	sl, sl, #16
 8039060:	4606      	mov	r6, r0
 8039062:	e6ae      	b.n	8038dc2 <_svfiprintf_r+0x4d6>
 8039064:	4606      	mov	r6, r0
 8039066:	e6c9      	b.n	8038dfc <_svfiprintf_r+0x510>
 8039068:	2010      	movs	r0, #16
 803906a:	4402      	add	r2, r0
 803906c:	2b07      	cmp	r3, #7
 803906e:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8039072:	6070      	str	r0, [r6, #4]
 8039074:	dd06      	ble.n	8039084 <_svfiprintf_r+0x798>
 8039076:	9801      	ldr	r0, [sp, #4]
 8039078:	aa0e      	add	r2, sp, #56	@ 0x38
 803907a:	4659      	mov	r1, fp
 803907c:	f7ff fbb8 	bl	80387f0 <__ssprint_r>
 8039080:	bb58      	cbnz	r0, 80390da <_svfiprintf_r+0x7ee>
 8039082:	a911      	add	r1, sp, #68	@ 0x44
 8039084:	3c10      	subs	r4, #16
 8039086:	460e      	mov	r6, r1
 8039088:	e6bc      	b.n	8038e04 <_svfiprintf_r+0x518>
 803908a:	460e      	mov	r6, r1
 803908c:	e6d5      	b.n	8038e3a <_svfiprintf_r+0x54e>
 803908e:	9801      	ldr	r0, [sp, #4]
 8039090:	aa0e      	add	r2, sp, #56	@ 0x38
 8039092:	4659      	mov	r1, fp
 8039094:	f7ff fbac 	bl	80387f0 <__ssprint_r>
 8039098:	b9f8      	cbnz	r0, 80390da <_svfiprintf_r+0x7ee>
 803909a:	ab11      	add	r3, sp, #68	@ 0x44
 803909c:	e6dd      	b.n	8038e5a <_svfiprintf_r+0x56e>
 803909e:	9a03      	ldr	r2, [sp, #12]
 80390a0:	1b54      	subs	r4, r2, r5
 80390a2:	2c00      	cmp	r4, #0
 80390a4:	f77f aedd 	ble.w	8038e62 <_svfiprintf_r+0x576>
 80390a8:	4e34      	ldr	r6, [pc, #208]	@ (803917c <_svfiprintf_r+0x890>)
 80390aa:	f04f 0810 	mov.w	r8, #16
 80390ae:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 80390b2:	2c10      	cmp	r4, #16
 80390b4:	f102 0201 	add.w	r2, r2, #1
 80390b8:	601e      	str	r6, [r3, #0]
 80390ba:	dc17      	bgt.n	80390ec <_svfiprintf_r+0x800>
 80390bc:	605c      	str	r4, [r3, #4]
 80390be:	2a07      	cmp	r2, #7
 80390c0:	440c      	add	r4, r1
 80390c2:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 80390c6:	f77f aecc 	ble.w	8038e62 <_svfiprintf_r+0x576>
 80390ca:	9801      	ldr	r0, [sp, #4]
 80390cc:	aa0e      	add	r2, sp, #56	@ 0x38
 80390ce:	4659      	mov	r1, fp
 80390d0:	f7ff fb8e 	bl	80387f0 <__ssprint_r>
 80390d4:	2800      	cmp	r0, #0
 80390d6:	f43f aec4 	beq.w	8038e62 <_svfiprintf_r+0x576>
 80390da:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80390de:	065b      	lsls	r3, r3, #25
 80390e0:	f53f ac1c 	bmi.w	803891c <_svfiprintf_r+0x30>
 80390e4:	9804      	ldr	r0, [sp, #16]
 80390e6:	b03b      	add	sp, #236	@ 0xec
 80390e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80390ec:	3110      	adds	r1, #16
 80390ee:	2a07      	cmp	r2, #7
 80390f0:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 80390f4:	f8c3 8004 	str.w	r8, [r3, #4]
 80390f8:	dc02      	bgt.n	8039100 <_svfiprintf_r+0x814>
 80390fa:	3308      	adds	r3, #8
 80390fc:	3c10      	subs	r4, #16
 80390fe:	e7d6      	b.n	80390ae <_svfiprintf_r+0x7c2>
 8039100:	9801      	ldr	r0, [sp, #4]
 8039102:	aa0e      	add	r2, sp, #56	@ 0x38
 8039104:	4659      	mov	r1, fp
 8039106:	f7ff fb73 	bl	80387f0 <__ssprint_r>
 803910a:	2800      	cmp	r0, #0
 803910c:	d1e5      	bne.n	80390da <_svfiprintf_r+0x7ee>
 803910e:	ab11      	add	r3, sp, #68	@ 0x44
 8039110:	e7f4      	b.n	80390fc <_svfiprintf_r+0x810>
 8039112:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8039114:	2b00      	cmp	r3, #0
 8039116:	d0e0      	beq.n	80390da <_svfiprintf_r+0x7ee>
 8039118:	9801      	ldr	r0, [sp, #4]
 803911a:	aa0e      	add	r2, sp, #56	@ 0x38
 803911c:	4659      	mov	r1, fp
 803911e:	f7ff fb67 	bl	80387f0 <__ssprint_r>
 8039122:	e7da      	b.n	80390da <_svfiprintf_r+0x7ee>
 8039124:	ea54 0205 	orrs.w	r2, r4, r5
 8039128:	46ca      	mov	sl, r9
 803912a:	f43f adac 	beq.w	8038c86 <_svfiprintf_r+0x39a>
 803912e:	2b01      	cmp	r3, #1
 8039130:	f43f aee7 	beq.w	8038f02 <_svfiprintf_r+0x616>
 8039134:	2b02      	cmp	r3, #2
 8039136:	f10d 08e8 	add.w	r8, sp, #232	@ 0xe8
 803913a:	f43f af2f 	beq.w	8038f9c <_svfiprintf_r+0x6b0>
 803913e:	f004 0307 	and.w	r3, r4, #7
 8039142:	08e4      	lsrs	r4, r4, #3
 8039144:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 8039148:	08ed      	lsrs	r5, r5, #3
 803914a:	3330      	adds	r3, #48	@ 0x30
 803914c:	ea54 0105 	orrs.w	r1, r4, r5
 8039150:	4642      	mov	r2, r8
 8039152:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8039156:	d1f2      	bne.n	803913e <_svfiprintf_r+0x852>
 8039158:	f01a 0f01 	tst.w	sl, #1
 803915c:	d006      	beq.n	803916c <_svfiprintf_r+0x880>
 803915e:	2b30      	cmp	r3, #48	@ 0x30
 8039160:	d004      	beq.n	803916c <_svfiprintf_r+0x880>
 8039162:	2330      	movs	r3, #48	@ 0x30
 8039164:	f808 3c01 	strb.w	r3, [r8, #-1]
 8039168:	f1a2 0802 	sub.w	r8, r2, #2
 803916c:	ab3a      	add	r3, sp, #232	@ 0xe8
 803916e:	eba3 0308 	sub.w	r3, r3, r8
 8039172:	9c00      	ldr	r4, [sp, #0]
 8039174:	9300      	str	r3, [sp, #0]
 8039176:	46d1      	mov	r9, sl
 8039178:	e5c2      	b.n	8038d00 <_svfiprintf_r+0x414>
 803917a:	bf00      	nop
 803917c:	08044cdf 	.word	0x08044cdf
 8039180:	08044ccf 	.word	0x08044ccf

08039184 <_sungetc_r>:
 8039184:	b538      	push	{r3, r4, r5, lr}
 8039186:	1c4b      	adds	r3, r1, #1
 8039188:	4614      	mov	r4, r2
 803918a:	d103      	bne.n	8039194 <_sungetc_r+0x10>
 803918c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8039190:	4628      	mov	r0, r5
 8039192:	bd38      	pop	{r3, r4, r5, pc}
 8039194:	8993      	ldrh	r3, [r2, #12]
 8039196:	f023 0320 	bic.w	r3, r3, #32
 803919a:	8193      	strh	r3, [r2, #12]
 803919c:	6853      	ldr	r3, [r2, #4]
 803919e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80391a0:	b2cd      	uxtb	r5, r1
 80391a2:	b18a      	cbz	r2, 80391c8 <_sungetc_r+0x44>
 80391a4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80391a6:	429a      	cmp	r2, r3
 80391a8:	dd08      	ble.n	80391bc <_sungetc_r+0x38>
 80391aa:	6823      	ldr	r3, [r4, #0]
 80391ac:	1e5a      	subs	r2, r3, #1
 80391ae:	6022      	str	r2, [r4, #0]
 80391b0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80391b4:	6863      	ldr	r3, [r4, #4]
 80391b6:	3301      	adds	r3, #1
 80391b8:	6063      	str	r3, [r4, #4]
 80391ba:	e7e9      	b.n	8039190 <_sungetc_r+0xc>
 80391bc:	4621      	mov	r1, r4
 80391be:	f005 f8a7 	bl	803e310 <__submore>
 80391c2:	2800      	cmp	r0, #0
 80391c4:	d0f1      	beq.n	80391aa <_sungetc_r+0x26>
 80391c6:	e7e1      	b.n	803918c <_sungetc_r+0x8>
 80391c8:	6921      	ldr	r1, [r4, #16]
 80391ca:	6822      	ldr	r2, [r4, #0]
 80391cc:	b141      	cbz	r1, 80391e0 <_sungetc_r+0x5c>
 80391ce:	4291      	cmp	r1, r2
 80391d0:	d206      	bcs.n	80391e0 <_sungetc_r+0x5c>
 80391d2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80391d6:	42a9      	cmp	r1, r5
 80391d8:	d102      	bne.n	80391e0 <_sungetc_r+0x5c>
 80391da:	3a01      	subs	r2, #1
 80391dc:	6022      	str	r2, [r4, #0]
 80391de:	e7ea      	b.n	80391b6 <_sungetc_r+0x32>
 80391e0:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
 80391e4:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 80391e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80391ea:	2303      	movs	r3, #3
 80391ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80391ee:	4623      	mov	r3, r4
 80391f0:	f803 5f42 	strb.w	r5, [r3, #66]!
 80391f4:	6023      	str	r3, [r4, #0]
 80391f6:	2301      	movs	r3, #1
 80391f8:	e7de      	b.n	80391b8 <_sungetc_r+0x34>

080391fa <__ssrefill_r>:
 80391fa:	b510      	push	{r4, lr}
 80391fc:	460c      	mov	r4, r1
 80391fe:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 8039200:	b169      	cbz	r1, 803921e <__ssrefill_r+0x24>
 8039202:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8039206:	4299      	cmp	r1, r3
 8039208:	d001      	beq.n	803920e <__ssrefill_r+0x14>
 803920a:	f7fe ff2f 	bl	803806c <_free_r>
 803920e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8039210:	6063      	str	r3, [r4, #4]
 8039212:	2000      	movs	r0, #0
 8039214:	6320      	str	r0, [r4, #48]	@ 0x30
 8039216:	b113      	cbz	r3, 803921e <__ssrefill_r+0x24>
 8039218:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 803921a:	6023      	str	r3, [r4, #0]
 803921c:	bd10      	pop	{r4, pc}
 803921e:	6923      	ldr	r3, [r4, #16]
 8039220:	6023      	str	r3, [r4, #0]
 8039222:	2300      	movs	r3, #0
 8039224:	6063      	str	r3, [r4, #4]
 8039226:	89a3      	ldrh	r3, [r4, #12]
 8039228:	f043 0320 	orr.w	r3, r3, #32
 803922c:	81a3      	strh	r3, [r4, #12]
 803922e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8039232:	e7f3      	b.n	803921c <__ssrefill_r+0x22>

08039234 <_sfread_r>:
 8039234:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8039238:	461f      	mov	r7, r3
 803923a:	4613      	mov	r3, r2
 803923c:	437b      	muls	r3, r7
 803923e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8039240:	9000      	str	r0, [sp, #0]
 8039242:	4688      	mov	r8, r1
 8039244:	4691      	mov	r9, r2
 8039246:	d028      	beq.n	803929a <_sfread_r+0x66>
 8039248:	461e      	mov	r6, r3
 803924a:	f04f 0b00 	mov.w	fp, #0
 803924e:	e9d4 1500 	ldrd	r1, r5, [r4]
 8039252:	42b5      	cmp	r5, r6
 8039254:	d30b      	bcc.n	803926e <_sfread_r+0x3a>
 8039256:	4632      	mov	r2, r6
 8039258:	4640      	mov	r0, r8
 803925a:	f7fe f805 	bl	8037268 <memcpy>
 803925e:	6862      	ldr	r2, [r4, #4]
 8039260:	6821      	ldr	r1, [r4, #0]
 8039262:	1b92      	subs	r2, r2, r6
 8039264:	4431      	add	r1, r6
 8039266:	6062      	str	r2, [r4, #4]
 8039268:	6021      	str	r1, [r4, #0]
 803926a:	463b      	mov	r3, r7
 803926c:	e015      	b.n	803929a <_sfread_r+0x66>
 803926e:	462a      	mov	r2, r5
 8039270:	4640      	mov	r0, r8
 8039272:	9301      	str	r3, [sp, #4]
 8039274:	f7fd fff8 	bl	8037268 <memcpy>
 8039278:	6822      	ldr	r2, [r4, #0]
 803927a:	9800      	ldr	r0, [sp, #0]
 803927c:	442a      	add	r2, r5
 803927e:	e9c4 2b00 	strd	r2, fp, [r4]
 8039282:	4621      	mov	r1, r4
 8039284:	f7ff ffb9 	bl	80391fa <__ssrefill_r>
 8039288:	44a8      	add	r8, r5
 803928a:	9b01      	ldr	r3, [sp, #4]
 803928c:	eba6 0a05 	sub.w	sl, r6, r5
 8039290:	b138      	cbz	r0, 80392a2 <_sfread_r+0x6e>
 8039292:	441d      	add	r5, r3
 8039294:	1bad      	subs	r5, r5, r6
 8039296:	fbb5 f3f9 	udiv	r3, r5, r9
 803929a:	4618      	mov	r0, r3
 803929c:	b003      	add	sp, #12
 803929e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80392a2:	4656      	mov	r6, sl
 80392a4:	e7d3      	b.n	803924e <_sfread_r+0x1a>
	...

080392a8 <__ssvfiscanf_r>:
 80392a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80392ac:	b0df      	sub	sp, #380	@ 0x17c
 80392ae:	af02      	add	r7, sp, #8
 80392b0:	460c      	mov	r4, r1
 80392b2:	623b      	str	r3, [r7, #32]
 80392b4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 80392b8:	6278      	str	r0, [r7, #36]	@ 0x24
 80392ba:	049d      	lsls	r5, r3, #18
 80392bc:	60ba      	str	r2, [r7, #8]
 80392be:	d406      	bmi.n	80392ce <__ssvfiscanf_r+0x26>
 80392c0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80392c4:	818b      	strh	r3, [r1, #12]
 80392c6:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 80392c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80392cc:	664b      	str	r3, [r1, #100]	@ 0x64
 80392ce:	2300      	movs	r3, #0
 80392d0:	e9c7 3305 	strd	r3, r3, [r7, #20]
 80392d4:	60fb      	str	r3, [r7, #12]
 80392d6:	469b      	mov	fp, r3
 80392d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80392da:	61fb      	str	r3, [r7, #28]
 80392dc:	e005      	b.n	80392ea <__ssvfiscanf_r+0x42>
 80392de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80392e0:	4621      	mov	r1, r4
 80392e2:	f7ff ff8a 	bl	80391fa <__ssrefill_r>
 80392e6:	b168      	cbz	r0, 8039304 <__ssvfiscanf_r+0x5c>
 80392e8:	60bd      	str	r5, [r7, #8]
 80392ea:	68bd      	ldr	r5, [r7, #8]
 80392ec:	f815 3b01 	ldrb.w	r3, [r5], #1
 80392f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80392f2:	b333      	cbz	r3, 8039342 <__ssvfiscanf_r+0x9a>
 80392f4:	4a75      	ldr	r2, [pc, #468]	@ (80394cc <__ssvfiscanf_r+0x224>)
 80392f6:	5cd6      	ldrb	r6, [r2, r3]
 80392f8:	f016 0608 	ands.w	r6, r6, #8
 80392fc:	d011      	beq.n	8039322 <__ssvfiscanf_r+0x7a>
 80392fe:	6863      	ldr	r3, [r4, #4]
 8039300:	2b00      	cmp	r3, #0
 8039302:	ddec      	ble.n	80392de <__ssvfiscanf_r+0x36>
 8039304:	6823      	ldr	r3, [r4, #0]
 8039306:	4971      	ldr	r1, [pc, #452]	@ (80394cc <__ssvfiscanf_r+0x224>)
 8039308:	781a      	ldrb	r2, [r3, #0]
 803930a:	5c8a      	ldrb	r2, [r1, r2]
 803930c:	0710      	lsls	r0, r2, #28
 803930e:	d5eb      	bpl.n	80392e8 <__ssvfiscanf_r+0x40>
 8039310:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8039312:	3201      	adds	r2, #1
 8039314:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8039316:	6862      	ldr	r2, [r4, #4]
 8039318:	3301      	adds	r3, #1
 803931a:	3a01      	subs	r2, #1
 803931c:	6062      	str	r2, [r4, #4]
 803931e:	6023      	str	r3, [r4, #0]
 8039320:	e7ed      	b.n	80392fe <__ssvfiscanf_r+0x56>
 8039322:	2b25      	cmp	r3, #37	@ 0x25
 8039324:	d15f      	bne.n	80393e6 <__ssvfiscanf_r+0x13e>
 8039326:	62be      	str	r6, [r7, #40]	@ 0x28
 8039328:	462a      	mov	r2, r5
 803932a:	f812 3b01 	ldrb.w	r3, [r2], #1
 803932e:	60ba      	str	r2, [r7, #8]
 8039330:	2b7a      	cmp	r3, #122	@ 0x7a
 8039332:	d806      	bhi.n	8039342 <__ssvfiscanf_r+0x9a>
 8039334:	2b42      	cmp	r3, #66	@ 0x42
 8039336:	d809      	bhi.n	803934c <__ssvfiscanf_r+0xa4>
 8039338:	2b2a      	cmp	r3, #42	@ 0x2a
 803933a:	d079      	beq.n	8039430 <__ssvfiscanf_r+0x188>
 803933c:	d844      	bhi.n	80393c8 <__ssvfiscanf_r+0x120>
 803933e:	2b25      	cmp	r3, #37	@ 0x25
 8039340:	d050      	beq.n	80393e4 <__ssvfiscanf_r+0x13c>
 8039342:	f1bb 0f00 	cmp.w	fp, #0
 8039346:	f000 810e 	beq.w	8039566 <__ssvfiscanf_r+0x2be>
 803934a:	e107      	b.n	803955c <__ssvfiscanf_r+0x2b4>
 803934c:	3b43      	subs	r3, #67	@ 0x43
 803934e:	2b37      	cmp	r3, #55	@ 0x37
 8039350:	f200 80fd 	bhi.w	803954e <__ssvfiscanf_r+0x2a6>
 8039354:	e8df f013 	tbh	[pc, r3, lsl #1]
 8039358:	00a40117 	.word	0x00a40117
 803935c:	00fb00fb 	.word	0x00fb00fb
 8039360:	00fb00fb 	.word	0x00fb00fb
 8039364:	00fb00fb 	.word	0x00fb00fb
 8039368:	008e00fb 	.word	0x008e00fb
 803936c:	00fb00fb 	.word	0x00fb00fb
 8039370:	00fb00a8 	.word	0x00fb00a8
 8039374:	00fb00fb 	.word	0x00fb00fb
 8039378:	00fb00c0 	.word	0x00fb00c0
 803937c:	00fb00fb 	.word	0x00fb00fb
 8039380:	00b400fb 	.word	0x00b400fb
 8039384:	00fb00fb 	.word	0x00fb00fb
 8039388:	00fb010d 	.word	0x00fb010d
 803938c:	00fb00fb 	.word	0x00fb00fb
 8039390:	00fb00fb 	.word	0x00fb00fb
 8039394:	00fb00fb 	.word	0x00fb00fb
 8039398:	00a60119 	.word	0x00a60119
 803939c:	00fb00fb 	.word	0x00fb00fb
 80393a0:	008100fb 	.word	0x008100fb
 80393a4:	008e013e 	.word	0x008e013e
 80393a8:	007300fb 	.word	0x007300fb
 80393ac:	01200095 	.word	0x01200095
 80393b0:	011d00aa 	.word	0x011d00aa
 80393b4:	00fb00fb 	.word	0x00fb00fb
 80393b8:	009200c2 	.word	0x009200c2
 80393bc:	00fb00b0 	.word	0x00fb00b0
 80393c0:	00b400fb 	.word	0x00b400fb
 80393c4:	009200fb 	.word	0x009200fb
 80393c8:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80393cc:	2a09      	cmp	r2, #9
 80393ce:	d8b8      	bhi.n	8039342 <__ssvfiscanf_r+0x9a>
 80393d0:	f016 0f8f 	tst.w	r6, #143	@ 0x8f
 80393d4:	d1b5      	bne.n	8039342 <__ssvfiscanf_r+0x9a>
 80393d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80393d8:	220a      	movs	r2, #10
 80393da:	fb02 3301 	mla	r3, r2, r1, r3
 80393de:	3b30      	subs	r3, #48	@ 0x30
 80393e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80393e2:	e02a      	b.n	803943a <__ssvfiscanf_r+0x192>
 80393e4:	68bd      	ldr	r5, [r7, #8]
 80393e6:	6863      	ldr	r3, [r4, #4]
 80393e8:	2b00      	cmp	r3, #0
 80393ea:	dd0e      	ble.n	803940a <__ssvfiscanf_r+0x162>
 80393ec:	6823      	ldr	r3, [r4, #0]
 80393ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80393f2:	7819      	ldrb	r1, [r3, #0]
 80393f4:	4291      	cmp	r1, r2
 80393f6:	d1a4      	bne.n	8039342 <__ssvfiscanf_r+0x9a>
 80393f8:	3301      	adds	r3, #1
 80393fa:	6862      	ldr	r2, [r4, #4]
 80393fc:	6023      	str	r3, [r4, #0]
 80393fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8039400:	3a01      	subs	r2, #1
 8039402:	3301      	adds	r3, #1
 8039404:	6062      	str	r2, [r4, #4]
 8039406:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8039408:	e76e      	b.n	80392e8 <__ssvfiscanf_r+0x40>
 803940a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803940c:	4621      	mov	r1, r4
 803940e:	f7ff fef4 	bl	80391fa <__ssrefill_r>
 8039412:	2800      	cmp	r0, #0
 8039414:	d0ea      	beq.n	80393ec <__ssvfiscanf_r+0x144>
 8039416:	69fb      	ldr	r3, [r7, #28]
 8039418:	b113      	cbz	r3, 8039420 <__ssvfiscanf_r+0x178>
 803941a:	89a3      	ldrh	r3, [r4, #12]
 803941c:	065b      	lsls	r3, r3, #25
 803941e:	d590      	bpl.n	8039342 <__ssvfiscanf_r+0x9a>
 8039420:	f1bb 0f00 	cmp.w	fp, #0
 8039424:	f040 8654 	bne.w	803a0d0 <__ssvfiscanf_r+0xe28>
 8039428:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803942c:	61fb      	str	r3, [r7, #28]
 803942e:	e09a      	b.n	8039566 <__ssvfiscanf_r+0x2be>
 8039430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8039432:	4333      	orrs	r3, r6
 8039434:	62bb      	str	r3, [r7, #40]	@ 0x28
 8039436:	d184      	bne.n	8039342 <__ssvfiscanf_r+0x9a>
 8039438:	2610      	movs	r6, #16
 803943a:	68bd      	ldr	r5, [r7, #8]
 803943c:	e774      	b.n	8039328 <__ssvfiscanf_r+0x80>
 803943e:	0731      	lsls	r1, r6, #28
 8039440:	f47f af7f 	bne.w	8039342 <__ssvfiscanf_r+0x9a>
 8039444:	786b      	ldrb	r3, [r5, #1]
 8039446:	2b6c      	cmp	r3, #108	@ 0x6c
 8039448:	d104      	bne.n	8039454 <__ssvfiscanf_r+0x1ac>
 803944a:	1cab      	adds	r3, r5, #2
 803944c:	60bb      	str	r3, [r7, #8]
 803944e:	f046 0602 	orr.w	r6, r6, #2
 8039452:	e7f2      	b.n	803943a <__ssvfiscanf_r+0x192>
 8039454:	f046 0601 	orr.w	r6, r6, #1
 8039458:	e7ef      	b.n	803943a <__ssvfiscanf_r+0x192>
 803945a:	0732      	lsls	r2, r6, #28
 803945c:	f47f af71 	bne.w	8039342 <__ssvfiscanf_r+0x9a>
 8039460:	786b      	ldrb	r3, [r5, #1]
 8039462:	2b68      	cmp	r3, #104	@ 0x68
 8039464:	bf03      	ittte	eq
 8039466:	1cab      	addeq	r3, r5, #2
 8039468:	60bb      	streq	r3, [r7, #8]
 803946a:	f046 0608 	orreq.w	r6, r6, #8
 803946e:	f046 0604 	orrne.w	r6, r6, #4
 8039472:	e7e2      	b.n	803943a <__ssvfiscanf_r+0x192>
 8039474:	0733      	lsls	r3, r6, #28
 8039476:	f47f af64 	bne.w	8039342 <__ssvfiscanf_r+0x9a>
 803947a:	e7e8      	b.n	803944e <__ssvfiscanf_r+0x1a6>
 803947c:	0735      	lsls	r5, r6, #28
 803947e:	d0dc      	beq.n	803943a <__ssvfiscanf_r+0x192>
 8039480:	e75f      	b.n	8039342 <__ssvfiscanf_r+0x9a>
 8039482:	f016 038f 	ands.w	r3, r6, #143	@ 0x8f
 8039486:	f47f af5c 	bne.w	8039342 <__ssvfiscanf_r+0x9a>
 803948a:	f1bb 0f00 	cmp.w	fp, #0
 803948e:	d104      	bne.n	803949a <__ssvfiscanf_r+0x1f2>
 8039490:	b082      	sub	sp, #8
 8039492:	f10d 0b08 	add.w	fp, sp, #8
 8039496:	e9cb 3300 	strd	r3, r3, [fp]
 803949a:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
 803949e:	e7cc      	b.n	803943a <__ssvfiscanf_r+0x192>
 80394a0:	f046 0601 	orr.w	r6, r6, #1
 80394a4:	4b0a      	ldr	r3, [pc, #40]	@ (80394d0 <__ssvfiscanf_r+0x228>)
 80394a6:	e008      	b.n	80394ba <__ssvfiscanf_r+0x212>
 80394a8:	f046 0601 	orr.w	r6, r6, #1
 80394ac:	4b09      	ldr	r3, [pc, #36]	@ (80394d4 <__ssvfiscanf_r+0x22c>)
 80394ae:	60fb      	str	r3, [r7, #12]
 80394b0:	2308      	movs	r3, #8
 80394b2:	617b      	str	r3, [r7, #20]
 80394b4:	2503      	movs	r5, #3
 80394b6:	e012      	b.n	80394de <__ssvfiscanf_r+0x236>
 80394b8:	4b06      	ldr	r3, [pc, #24]	@ (80394d4 <__ssvfiscanf_r+0x22c>)
 80394ba:	60fb      	str	r3, [r7, #12]
 80394bc:	230a      	movs	r3, #10
 80394be:	e7f8      	b.n	80394b2 <__ssvfiscanf_r+0x20a>
 80394c0:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 80394c4:	4b03      	ldr	r3, [pc, #12]	@ (80394d4 <__ssvfiscanf_r+0x22c>)
 80394c6:	60fb      	str	r3, [r7, #12]
 80394c8:	2310      	movs	r3, #16
 80394ca:	e7f2      	b.n	80394b2 <__ssvfiscanf_r+0x20a>
 80394cc:	08044b59 	.word	0x08044b59
 80394d0:	080354f9 	.word	0x080354f9
 80394d4:	0803e2f9 	.word	0x0803e2f9
 80394d8:	f046 0601 	orr.w	r6, r6, #1
 80394dc:	2502      	movs	r5, #2
 80394de:	6863      	ldr	r3, [r4, #4]
 80394e0:	2b00      	cmp	r3, #0
 80394e2:	dd7b      	ble.n	80395dc <__ssvfiscanf_r+0x334>
 80394e4:	0671      	lsls	r1, r6, #25
 80394e6:	d407      	bmi.n	80394f8 <__ssvfiscanf_r+0x250>
 80394e8:	f8df 8388 	ldr.w	r8, [pc, #904]	@ 8039874 <__ssvfiscanf_r+0x5cc>
 80394ec:	6823      	ldr	r3, [r4, #0]
 80394ee:	781a      	ldrb	r2, [r3, #0]
 80394f0:	f818 2002 	ldrb.w	r2, [r8, r2]
 80394f4:	0712      	lsls	r2, r2, #28
 80394f6:	d479      	bmi.n	80395ec <__ssvfiscanf_r+0x344>
 80394f8:	2d02      	cmp	r5, #2
 80394fa:	f000 836f 	beq.w	8039bdc <__ssvfiscanf_r+0x934>
 80394fe:	2d03      	cmp	r5, #3
 8039500:	f000 84f6 	beq.w	8039ef0 <__ssvfiscanf_r+0xc48>
 8039504:	f006 0310 	and.w	r3, r6, #16
 8039508:	2d01      	cmp	r5, #1
 803950a:	613b      	str	r3, [r7, #16]
 803950c:	f006 0501 	and.w	r5, r6, #1
 8039510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8039512:	f000 81b1 	beq.w	8039878 <__ssvfiscanf_r+0x5d0>
 8039516:	2b01      	cmp	r3, #1
 8039518:	bf38      	it	cc
 803951a:	2301      	movcc	r3, #1
 803951c:	4698      	mov	r8, r3
 803951e:	693b      	ldr	r3, [r7, #16]
 8039520:	2d00      	cmp	r5, #0
 8039522:	f000 813b 	beq.w	803979c <__ssvfiscanf_r+0x4f4>
 8039526:	2b00      	cmp	r3, #0
 8039528:	f040 80d8 	bne.w	80396dc <__ssvfiscanf_r+0x434>
 803952c:	6a3b      	ldr	r3, [r7, #32]
 803952e:	0636      	lsls	r6, r6, #24
 8039530:	f853 5b04 	ldr.w	r5, [r3], #4
 8039534:	623b      	str	r3, [r7, #32]
 8039536:	f140 80d7 	bpl.w	80396e8 <__ssvfiscanf_r+0x440>
 803953a:	b145      	cbz	r5, 803954e <__ssvfiscanf_r+0x2a6>
 803953c:	2080      	movs	r0, #128	@ 0x80
 803953e:	f7fe fe9d 	bl	803827c <malloc>
 8039542:	4606      	mov	r6, r0
 8039544:	2800      	cmp	r0, #0
 8039546:	d164      	bne.n	8039612 <__ssvfiscanf_r+0x36a>
 8039548:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803954c:	61fb      	str	r3, [r7, #28]
 803954e:	f1bb 0f00 	cmp.w	fp, #0
 8039552:	d008      	beq.n	8039566 <__ssvfiscanf_r+0x2be>
 8039554:	69fb      	ldr	r3, [r7, #28]
 8039556:	3301      	adds	r3, #1
 8039558:	f000 85ba 	beq.w	803a0d0 <__ssvfiscanf_r+0xe28>
 803955c:	f8db 0000 	ldr.w	r0, [fp]
 8039560:	b108      	cbz	r0, 8039566 <__ssvfiscanf_r+0x2be>
 8039562:	f7fe fe93 	bl	803828c <free>
 8039566:	69f8      	ldr	r0, [r7, #28]
 8039568:	f507 77ba 	add.w	r7, r7, #372	@ 0x174
 803956c:	46bd      	mov	sp, r7
 803956e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8039572:	68b9      	ldr	r1, [r7, #8]
 8039574:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8039578:	f003 fe67 	bl	803d24a <__sccl>
 803957c:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 8039580:	60b8      	str	r0, [r7, #8]
 8039582:	2501      	movs	r5, #1
 8039584:	e7ab      	b.n	80394de <__ssvfiscanf_r+0x236>
 8039586:	f046 0601 	orr.w	r6, r6, #1
 803958a:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 803958e:	2500      	movs	r5, #0
 8039590:	e7a5      	b.n	80394de <__ssvfiscanf_r+0x236>
 8039592:	f446 7608 	orr.w	r6, r6, #544	@ 0x220
 8039596:	e795      	b.n	80394c4 <__ssvfiscanf_r+0x21c>
 8039598:	06f0      	lsls	r0, r6, #27
 803959a:	f53f aea6 	bmi.w	80392ea <__ssvfiscanf_r+0x42>
 803959e:	6a3a      	ldr	r2, [r7, #32]
 80395a0:	0731      	lsls	r1, r6, #28
 80395a2:	f852 3b04 	ldr.w	r3, [r2], #4
 80395a6:	623a      	str	r2, [r7, #32]
 80395a8:	d502      	bpl.n	80395b0 <__ssvfiscanf_r+0x308>
 80395aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80395ac:	701a      	strb	r2, [r3, #0]
 80395ae:	e69c      	b.n	80392ea <__ssvfiscanf_r+0x42>
 80395b0:	0772      	lsls	r2, r6, #29
 80395b2:	d502      	bpl.n	80395ba <__ssvfiscanf_r+0x312>
 80395b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80395b6:	801a      	strh	r2, [r3, #0]
 80395b8:	e697      	b.n	80392ea <__ssvfiscanf_r+0x42>
 80395ba:	07f5      	lsls	r5, r6, #31
 80395bc:	d502      	bpl.n	80395c4 <__ssvfiscanf_r+0x31c>
 80395be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80395c0:	601a      	str	r2, [r3, #0]
 80395c2:	e692      	b.n	80392ea <__ssvfiscanf_r+0x42>
 80395c4:	07b0      	lsls	r0, r6, #30
 80395c6:	d5fa      	bpl.n	80395be <__ssvfiscanf_r+0x316>
 80395c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80395ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80395cc:	17d2      	asrs	r2, r2, #31
 80395ce:	e9c3 1200 	strd	r1, r2, [r3]
 80395d2:	e68a      	b.n	80392ea <__ssvfiscanf_r+0x42>
 80395d4:	4ba6      	ldr	r3, [pc, #664]	@ (8039870 <__ssvfiscanf_r+0x5c8>)
 80395d6:	60fb      	str	r3, [r7, #12]
 80395d8:	2300      	movs	r3, #0
 80395da:	e76a      	b.n	80394b2 <__ssvfiscanf_r+0x20a>
 80395dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80395de:	4621      	mov	r1, r4
 80395e0:	f7ff fe0b 	bl	80391fa <__ssrefill_r>
 80395e4:	2800      	cmp	r0, #0
 80395e6:	f43f af7d 	beq.w	80394e4 <__ssvfiscanf_r+0x23c>
 80395ea:	e714      	b.n	8039416 <__ssvfiscanf_r+0x16e>
 80395ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80395ee:	3201      	adds	r2, #1
 80395f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80395f2:	6862      	ldr	r2, [r4, #4]
 80395f4:	3a01      	subs	r2, #1
 80395f6:	2a00      	cmp	r2, #0
 80395f8:	6062      	str	r2, [r4, #4]
 80395fa:	dd02      	ble.n	8039602 <__ssvfiscanf_r+0x35a>
 80395fc:	3301      	adds	r3, #1
 80395fe:	6023      	str	r3, [r4, #0]
 8039600:	e774      	b.n	80394ec <__ssvfiscanf_r+0x244>
 8039602:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8039604:	4621      	mov	r1, r4
 8039606:	f7ff fdf8 	bl	80391fa <__ssrefill_r>
 803960a:	2800      	cmp	r0, #0
 803960c:	f43f af6e 	beq.w	80394ec <__ssvfiscanf_r+0x244>
 8039610:	e701      	b.n	8039416 <__ssvfiscanf_r+0x16e>
 8039612:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8039616:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 803961a:	6028      	str	r0, [r5, #0]
 803961c:	4599      	cmp	r9, r3
 803961e:	d314      	bcc.n	803964a <__ssvfiscanf_r+0x3a2>
 8039620:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8039624:	4293      	cmp	r3, r2
 8039626:	f200 8553 	bhi.w	803a0d0 <__ssvfiscanf_r+0xe28>
 803962a:	3308      	adds	r3, #8
 803962c:	fa1f fa83 	uxth.w	sl, r3
 8039630:	f8db 0000 	ldr.w	r0, [fp]
 8039634:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8039638:	f003 fdaa 	bl	803d190 <realloc>
 803963c:	2800      	cmp	r0, #0
 803963e:	f000 8547 	beq.w	803a0d0 <__ssvfiscanf_r+0xe28>
 8039642:	f8cb 0000 	str.w	r0, [fp]
 8039646:	f8ab a004 	strh.w	sl, [fp, #4]
 803964a:	f8db 3000 	ldr.w	r3, [fp]
 803964e:	f109 0201 	add.w	r2, r9, #1
 8039652:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8039656:	46aa      	mov	sl, r5
 8039658:	f8ab 2006 	strh.w	r2, [fp, #6]
 803965c:	4635      	mov	r5, r6
 803965e:	f04f 0920 	mov.w	r9, #32
 8039662:	2200      	movs	r2, #0
 8039664:	62ba      	str	r2, [r7, #40]	@ 0x28
 8039666:	f7fd fd4b 	bl	8037100 <__locale_mb_cur_max>
 803966a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 803966c:	4290      	cmp	r0, r2
 803966e:	f43f aed2 	beq.w	8039416 <__ssvfiscanf_r+0x16e>
 8039672:	6821      	ldr	r1, [r4, #0]
 8039674:	f107 0c48 	add.w	ip, r7, #72	@ 0x48
 8039678:	f811 0b01 	ldrb.w	r0, [r1], #1
 803967c:	f80c 0002 	strb.w	r0, [ip, r2]
 8039680:	1c53      	adds	r3, r2, #1
 8039682:	6862      	ldr	r2, [r4, #4]
 8039684:	3a01      	subs	r2, #1
 8039686:	e9c4 1200 	strd	r1, r2, [r4]
 803968a:	69ba      	ldr	r2, [r7, #24]
 803968c:	2a03      	cmp	r2, #3
 803968e:	d102      	bne.n	8039696 <__ssvfiscanf_r+0x3ee>
 8039690:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8039692:	2a04      	cmp	r2, #4
 8039694:	d007      	beq.n	80396a6 <__ssvfiscanf_r+0x3fe>
 8039696:	2208      	movs	r2, #8
 8039698:	2100      	movs	r1, #0
 803969a:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 803969e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80396a0:	f7fc fba6 	bl	8035df0 <memset>
 80396a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80396a6:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80396aa:	9200      	str	r2, [sp, #0]
 80396ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80396ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80396b0:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80396b4:	4629      	mov	r1, r5
 80396b6:	f005 f925 	bl	803e904 <_mbrtowc_r>
 80396ba:	4603      	mov	r3, r0
 80396bc:	61b8      	str	r0, [r7, #24]
 80396be:	1c58      	adds	r0, r3, #1
 80396c0:	f43f aea9 	beq.w	8039416 <__ssvfiscanf_r+0x16e>
 80396c4:	461a      	mov	r2, r3
 80396c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80396c8:	b9b2      	cbnz	r2, 80396f8 <__ssvfiscanf_r+0x450>
 80396ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80396cc:	441a      	add	r2, r3
 80396ce:	4613      	mov	r3, r2
 80396d0:	693a      	ldr	r2, [r7, #16]
 80396d2:	b172      	cbz	r2, 80396f2 <__ssvfiscanf_r+0x44a>
 80396d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80396d6:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80396da:	e019      	b.n	8039710 <__ssvfiscanf_r+0x468>
 80396dc:	f04f 0900 	mov.w	r9, #0
 80396e0:	464e      	mov	r6, r9
 80396e2:	46ca      	mov	sl, r9
 80396e4:	464d      	mov	r5, r9
 80396e6:	e7bc      	b.n	8039662 <__ssvfiscanf_r+0x3ba>
 80396e8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80396ec:	464e      	mov	r6, r9
 80396ee:	46ca      	mov	sl, r9
 80396f0:	e7b7      	b.n	8039662 <__ssvfiscanf_r+0x3ba>
 80396f2:	693a      	ldr	r2, [r7, #16]
 80396f4:	602a      	str	r2, [r5, #0]
 80396f6:	e7ed      	b.n	80396d4 <__ssvfiscanf_r+0x42c>
 80396f8:	69ba      	ldr	r2, [r7, #24]
 80396fa:	3202      	adds	r2, #2
 80396fc:	d024      	beq.n	8039748 <__ssvfiscanf_r+0x4a0>
 80396fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8039700:	441a      	add	r2, r3
 8039702:	69bb      	ldr	r3, [r7, #24]
 8039704:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8039706:	2b03      	cmp	r3, #3
 8039708:	d1e5      	bne.n	80396d6 <__ssvfiscanf_r+0x42e>
 803970a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 803970c:	2b04      	cmp	r3, #4
 803970e:	d1e2      	bne.n	80396d6 <__ssvfiscanf_r+0x42e>
 8039710:	693b      	ldr	r3, [r7, #16]
 8039712:	b9bb      	cbnz	r3, 8039744 <__ssvfiscanf_r+0x49c>
 8039714:	f1ba 0f00 	cmp.w	sl, #0
 8039718:	d013      	beq.n	8039742 <__ssvfiscanf_r+0x49a>
 803971a:	1bab      	subs	r3, r5, r6
 803971c:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 8039720:	d80f      	bhi.n	8039742 <__ssvfiscanf_r+0x49a>
 8039722:	4630      	mov	r0, r6
 8039724:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8039728:	62bb      	str	r3, [r7, #40]	@ 0x28
 803972a:	f003 fd31 	bl	803d190 <realloc>
 803972e:	4606      	mov	r6, r0
 8039730:	2800      	cmp	r0, #0
 8039732:	f43f af09 	beq.w	8039548 <__ssvfiscanf_r+0x2a0>
 8039736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8039738:	f8ca 0000 	str.w	r0, [sl]
 803973c:	18c5      	adds	r5, r0, r3
 803973e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8039742:	3504      	adds	r5, #4
 8039744:	2200      	movs	r2, #0
 8039746:	e000      	b.n	803974a <__ssvfiscanf_r+0x4a2>
 8039748:	461a      	mov	r2, r3
 803974a:	6863      	ldr	r3, [r4, #4]
 803974c:	2b00      	cmp	r3, #0
 803974e:	dc13      	bgt.n	8039778 <__ssvfiscanf_r+0x4d0>
 8039750:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8039752:	62ba      	str	r2, [r7, #40]	@ 0x28
 8039754:	4621      	mov	r1, r4
 8039756:	f7ff fd50 	bl	80391fa <__ssrefill_r>
 803975a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 803975c:	b160      	cbz	r0, 8039778 <__ssvfiscanf_r+0x4d0>
 803975e:	2a00      	cmp	r2, #0
 8039760:	f47f ae59 	bne.w	8039416 <__ssvfiscanf_r+0x16e>
 8039764:	f1ba 0f00 	cmp.w	sl, #0
 8039768:	d10b      	bne.n	8039782 <__ssvfiscanf_r+0x4da>
 803976a:	693b      	ldr	r3, [r7, #16]
 803976c:	2b00      	cmp	r3, #0
 803976e:	f47f adbc 	bne.w	80392ea <__ssvfiscanf_r+0x42>
 8039772:	69fb      	ldr	r3, [r7, #28]
 8039774:	3301      	adds	r3, #1
 8039776:	e5b0      	b.n	80392da <__ssvfiscanf_r+0x32>
 8039778:	f1b8 0f00 	cmp.w	r8, #0
 803977c:	f47f af72 	bne.w	8039664 <__ssvfiscanf_r+0x3bc>
 8039780:	e7f0      	b.n	8039764 <__ssvfiscanf_r+0x4bc>
 8039782:	1ba9      	subs	r1, r5, r6
 8039784:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 8039788:	d9ef      	bls.n	803976a <__ssvfiscanf_r+0x4c2>
 803978a:	f8da 0000 	ldr.w	r0, [sl]
 803978e:	f003 fcff 	bl	803d190 <realloc>
 8039792:	2800      	cmp	r0, #0
 8039794:	d0e9      	beq.n	803976a <__ssvfiscanf_r+0x4c2>
 8039796:	f8ca 0000 	str.w	r0, [sl]
 803979a:	e7e6      	b.n	803976a <__ssvfiscanf_r+0x4c2>
 803979c:	b1db      	cbz	r3, 80397d6 <__ssvfiscanf_r+0x52e>
 803979e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80397a2:	4598      	cmp	r8, r3
 80397a4:	dd10      	ble.n	80397c8 <__ssvfiscanf_r+0x520>
 80397a6:	441a      	add	r2, r3
 80397a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80397aa:	6022      	str	r2, [r4, #0]
 80397ac:	4621      	mov	r1, r4
 80397ae:	441d      	add	r5, r3
 80397b0:	eba8 0803 	sub.w	r8, r8, r3
 80397b4:	f7ff fd21 	bl	80391fa <__ssrefill_r>
 80397b8:	2800      	cmp	r0, #0
 80397ba:	d0f0      	beq.n	803979e <__ssvfiscanf_r+0x4f6>
 80397bc:	2d00      	cmp	r5, #0
 80397be:	f43f ae2a 	beq.w	8039416 <__ssvfiscanf_r+0x16e>
 80397c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80397c4:	442b      	add	r3, r5
 80397c6:	e201      	b.n	8039bcc <__ssvfiscanf_r+0x924>
 80397c8:	eba3 0308 	sub.w	r3, r3, r8
 80397cc:	4442      	add	r2, r8
 80397ce:	4445      	add	r5, r8
 80397d0:	6063      	str	r3, [r4, #4]
 80397d2:	6022      	str	r2, [r4, #0]
 80397d4:	e7f5      	b.n	80397c2 <__ssvfiscanf_r+0x51a>
 80397d6:	6a3b      	ldr	r3, [r7, #32]
 80397d8:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 80397dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80397e0:	623b      	str	r3, [r7, #32]
 80397e2:	d02d      	beq.n	8039840 <__ssvfiscanf_r+0x598>
 80397e4:	2d00      	cmp	r5, #0
 80397e6:	f43f adac 	beq.w	8039342 <__ssvfiscanf_r+0x9a>
 80397ea:	4640      	mov	r0, r8
 80397ec:	f7fe fd46 	bl	803827c <malloc>
 80397f0:	4681      	mov	r9, r0
 80397f2:	2800      	cmp	r0, #0
 80397f4:	f43f ae14 	beq.w	8039420 <__ssvfiscanf_r+0x178>
 80397f8:	f8bb a006 	ldrh.w	sl, [fp, #6]
 80397fc:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 8039800:	6028      	str	r0, [r5, #0]
 8039802:	45b2      	cmp	sl, r6
 8039804:	d312      	bcc.n	803982c <__ssvfiscanf_r+0x584>
 8039806:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 803980a:	429e      	cmp	r6, r3
 803980c:	f200 8460 	bhi.w	803a0d0 <__ssvfiscanf_r+0xe28>
 8039810:	3608      	adds	r6, #8
 8039812:	b2b6      	uxth	r6, r6
 8039814:	f8db 0000 	ldr.w	r0, [fp]
 8039818:	00b1      	lsls	r1, r6, #2
 803981a:	f003 fcb9 	bl	803d190 <realloc>
 803981e:	2800      	cmp	r0, #0
 8039820:	f000 8456 	beq.w	803a0d0 <__ssvfiscanf_r+0xe28>
 8039824:	f8cb 0000 	str.w	r0, [fp]
 8039828:	f8ab 6004 	strh.w	r6, [fp, #4]
 803982c:	f8db 3000 	ldr.w	r3, [fp]
 8039830:	f10a 0201 	add.w	r2, sl, #1
 8039834:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 8039838:	462e      	mov	r6, r5
 803983a:	f8ab 2006 	strh.w	r2, [fp, #6]
 803983e:	464d      	mov	r5, r9
 8039840:	9400      	str	r4, [sp, #0]
 8039842:	4629      	mov	r1, r5
 8039844:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8039846:	4643      	mov	r3, r8
 8039848:	2201      	movs	r2, #1
 803984a:	f7ff fcf3 	bl	8039234 <_sfread_r>
 803984e:	4605      	mov	r5, r0
 8039850:	2800      	cmp	r0, #0
 8039852:	f43f ade0 	beq.w	8039416 <__ssvfiscanf_r+0x16e>
 8039856:	b13e      	cbz	r6, 8039868 <__ssvfiscanf_r+0x5c0>
 8039858:	4580      	cmp	r8, r0
 803985a:	d905      	bls.n	8039868 <__ssvfiscanf_r+0x5c0>
 803985c:	4601      	mov	r1, r0
 803985e:	6830      	ldr	r0, [r6, #0]
 8039860:	f003 fc96 	bl	803d190 <realloc>
 8039864:	b100      	cbz	r0, 8039868 <__ssvfiscanf_r+0x5c0>
 8039866:	6030      	str	r0, [r6, #0]
 8039868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803986a:	442b      	add	r3, r5
 803986c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803986e:	e780      	b.n	8039772 <__ssvfiscanf_r+0x4ca>
 8039870:	080354f9 	.word	0x080354f9
 8039874:	08044b59 	.word	0x08044b59
 8039878:	2b00      	cmp	r3, #0
 803987a:	bf08      	it	eq
 803987c:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 8039880:	62bb      	str	r3, [r7, #40]	@ 0x28
 8039882:	693b      	ldr	r3, [r7, #16]
 8039884:	2d00      	cmp	r5, #0
 8039886:	f000 8100 	beq.w	8039a8a <__ssvfiscanf_r+0x7e2>
 803988a:	2b00      	cmp	r3, #0
 803988c:	f040 80a5 	bne.w	80399da <__ssvfiscanf_r+0x732>
 8039890:	6a3b      	ldr	r3, [r7, #32]
 8039892:	0631      	lsls	r1, r6, #24
 8039894:	f853 5b04 	ldr.w	r5, [r3], #4
 8039898:	623b      	str	r3, [r7, #32]
 803989a:	f140 80a5 	bpl.w	80399e8 <__ssvfiscanf_r+0x740>
 803989e:	2d00      	cmp	r5, #0
 80398a0:	f43f ae55 	beq.w	803954e <__ssvfiscanf_r+0x2a6>
 80398a4:	2080      	movs	r0, #128	@ 0x80
 80398a6:	f7fe fce9 	bl	803827c <malloc>
 80398aa:	4680      	mov	r8, r0
 80398ac:	2800      	cmp	r0, #0
 80398ae:	f43f ae4b 	beq.w	8039548 <__ssvfiscanf_r+0x2a0>
 80398b2:	f8bb 6006 	ldrh.w	r6, [fp, #6]
 80398b6:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 80398ba:	6028      	str	r0, [r5, #0]
 80398bc:	429e      	cmp	r6, r3
 80398be:	d314      	bcc.n	80398ea <__ssvfiscanf_r+0x642>
 80398c0:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 80398c4:	4293      	cmp	r3, r2
 80398c6:	f200 8403 	bhi.w	803a0d0 <__ssvfiscanf_r+0xe28>
 80398ca:	3308      	adds	r3, #8
 80398cc:	fa1f f983 	uxth.w	r9, r3
 80398d0:	f8db 0000 	ldr.w	r0, [fp]
 80398d4:	ea4f 0189 	mov.w	r1, r9, lsl #2
 80398d8:	f003 fc5a 	bl	803d190 <realloc>
 80398dc:	2800      	cmp	r0, #0
 80398de:	f000 83f7 	beq.w	803a0d0 <__ssvfiscanf_r+0xe28>
 80398e2:	f8cb 0000 	str.w	r0, [fp]
 80398e6:	f8ab 9004 	strh.w	r9, [fp, #4]
 80398ea:	f8db 3000 	ldr.w	r3, [fp]
 80398ee:	1c72      	adds	r2, r6, #1
 80398f0:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 80398f4:	46aa      	mov	sl, r5
 80398f6:	f8ab 2006 	strh.w	r2, [fp, #6]
 80398fa:	4645      	mov	r5, r8
 80398fc:	f04f 0920 	mov.w	r9, #32
 8039900:	2600      	movs	r6, #0
 8039902:	f7fd fbfd 	bl	8037100 <__locale_mb_cur_max>
 8039906:	4286      	cmp	r6, r0
 8039908:	f43f ad85 	beq.w	8039416 <__ssvfiscanf_r+0x16e>
 803990c:	1c73      	adds	r3, r6, #1
 803990e:	607b      	str	r3, [r7, #4]
 8039910:	6823      	ldr	r3, [r4, #0]
 8039912:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8039916:	f813 2b01 	ldrb.w	r2, [r3], #1
 803991a:	558a      	strb	r2, [r1, r6]
 803991c:	6862      	ldr	r2, [r4, #4]
 803991e:	3a01      	subs	r2, #1
 8039920:	e9c4 3200 	strd	r3, r2, [r4]
 8039924:	69bb      	ldr	r3, [r7, #24]
 8039926:	2b03      	cmp	r3, #3
 8039928:	d102      	bne.n	8039930 <__ssvfiscanf_r+0x688>
 803992a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 803992c:	2b04      	cmp	r3, #4
 803992e:	d005      	beq.n	803993c <__ssvfiscanf_r+0x694>
 8039930:	2208      	movs	r2, #8
 8039932:	2100      	movs	r1, #0
 8039934:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8039938:	f7fc fa5a 	bl	8035df0 <memset>
 803993c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8039940:	9300      	str	r3, [sp, #0]
 8039942:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8039946:	687b      	ldr	r3, [r7, #4]
 8039948:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803994a:	4629      	mov	r1, r5
 803994c:	f004 ffda 	bl	803e904 <_mbrtowc_r>
 8039950:	1c42      	adds	r2, r0, #1
 8039952:	61b8      	str	r0, [r7, #24]
 8039954:	f43f ad5f 	beq.w	8039416 <__ssvfiscanf_r+0x16e>
 8039958:	2800      	cmp	r0, #0
 803995a:	d14a      	bne.n	80399f2 <__ssvfiscanf_r+0x74a>
 803995c:	6028      	str	r0, [r5, #0]
 803995e:	682e      	ldr	r6, [r5, #0]
 8039960:	1c73      	adds	r3, r6, #1
 8039962:	d056      	beq.n	8039a12 <__ssvfiscanf_r+0x76a>
 8039964:	2208      	movs	r2, #8
 8039966:	2100      	movs	r1, #0
 8039968:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 803996c:	f7fc fa40 	bl	8035df0 <memset>
 8039970:	4b99      	ldr	r3, [pc, #612]	@ (8039bd8 <__ssvfiscanf_r+0x930>)
 8039972:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8039974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8039978:	603b      	str	r3, [r7, #0]
 803997a:	4632      	mov	r2, r6
 803997c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8039980:	683e      	ldr	r6, [r7, #0]
 8039982:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8039986:	47b0      	blx	r6
 8039988:	2801      	cmp	r0, #1
 803998a:	d144      	bne.n	8039a16 <__ssvfiscanf_r+0x76e>
 803998c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8039990:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8039994:	5c9b      	ldrb	r3, [r3, r2]
 8039996:	2b00      	cmp	r3, #0
 8039998:	d148      	bne.n	8039a2c <__ssvfiscanf_r+0x784>
 803999a:	f107 0648 	add.w	r6, r7, #72	@ 0x48
 803999e:	687b      	ldr	r3, [r7, #4]
 80399a0:	2b00      	cmp	r3, #0
 80399a2:	d13a      	bne.n	8039a1a <__ssvfiscanf_r+0x772>
 80399a4:	693b      	ldr	r3, [r7, #16]
 80399a6:	2b00      	cmp	r3, #0
 80399a8:	f47f ac9f 	bne.w	80392ea <__ssvfiscanf_r+0x42>
 80399ac:	602b      	str	r3, [r5, #0]
 80399ae:	f1ba 0f00 	cmp.w	sl, #0
 80399b2:	f43f aede 	beq.w	8039772 <__ssvfiscanf_r+0x4ca>
 80399b6:	eba5 0108 	sub.w	r1, r5, r8
 80399ba:	108b      	asrs	r3, r1, #2
 80399bc:	3301      	adds	r3, #1
 80399be:	4599      	cmp	r9, r3
 80399c0:	f67f aed7 	bls.w	8039772 <__ssvfiscanf_r+0x4ca>
 80399c4:	f8da 0000 	ldr.w	r0, [sl]
 80399c8:	3104      	adds	r1, #4
 80399ca:	f003 fbe1 	bl	803d190 <realloc>
 80399ce:	2800      	cmp	r0, #0
 80399d0:	f43f aecf 	beq.w	8039772 <__ssvfiscanf_r+0x4ca>
 80399d4:	f8ca 0000 	str.w	r0, [sl]
 80399d8:	e6cb      	b.n	8039772 <__ssvfiscanf_r+0x4ca>
 80399da:	f04f 0900 	mov.w	r9, #0
 80399de:	46c8      	mov	r8, r9
 80399e0:	46ca      	mov	sl, r9
 80399e2:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 80399e6:	e78b      	b.n	8039900 <__ssvfiscanf_r+0x658>
 80399e8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80399ec:	46c8      	mov	r8, r9
 80399ee:	46ca      	mov	sl, r9
 80399f0:	e786      	b.n	8039900 <__ssvfiscanf_r+0x658>
 80399f2:	69bb      	ldr	r3, [r7, #24]
 80399f4:	3302      	adds	r3, #2
 80399f6:	d1b2      	bne.n	803995e <__ssvfiscanf_r+0x6b6>
 80399f8:	687e      	ldr	r6, [r7, #4]
 80399fa:	6863      	ldr	r3, [r4, #4]
 80399fc:	2b00      	cmp	r3, #0
 80399fe:	dc3f      	bgt.n	8039a80 <__ssvfiscanf_r+0x7d8>
 8039a00:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8039a02:	4621      	mov	r1, r4
 8039a04:	f7ff fbf9 	bl	80391fa <__ssrefill_r>
 8039a08:	2800      	cmp	r0, #0
 8039a0a:	d039      	beq.n	8039a80 <__ssvfiscanf_r+0x7d8>
 8039a0c:	2e00      	cmp	r6, #0
 8039a0e:	d0c9      	beq.n	80399a4 <__ssvfiscanf_r+0x6fc>
 8039a10:	e501      	b.n	8039416 <__ssvfiscanf_r+0x16e>
 8039a12:	4632      	mov	r2, r6
 8039a14:	e7bc      	b.n	8039990 <__ssvfiscanf_r+0x6e8>
 8039a16:	2200      	movs	r2, #0
 8039a18:	e7ba      	b.n	8039990 <__ssvfiscanf_r+0x6e8>
 8039a1a:	687b      	ldr	r3, [r7, #4]
 8039a1c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8039a1e:	3b01      	subs	r3, #1
 8039a20:	4622      	mov	r2, r4
 8039a22:	5cf1      	ldrb	r1, [r6, r3]
 8039a24:	607b      	str	r3, [r7, #4]
 8039a26:	f7ff fbad 	bl	8039184 <_sungetc_r>
 8039a2a:	e7b8      	b.n	803999e <__ssvfiscanf_r+0x6f6>
 8039a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8039a2e:	687a      	ldr	r2, [r7, #4]
 8039a30:	4413      	add	r3, r2
 8039a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8039a34:	69bb      	ldr	r3, [r7, #24]
 8039a36:	2b03      	cmp	r3, #3
 8039a38:	d102      	bne.n	8039a40 <__ssvfiscanf_r+0x798>
 8039a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8039a3c:	2b04      	cmp	r3, #4
 8039a3e:	d002      	beq.n	8039a46 <__ssvfiscanf_r+0x79e>
 8039a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8039a42:	3b01      	subs	r3, #1
 8039a44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8039a46:	693b      	ldr	r3, [r7, #16]
 8039a48:	b9c3      	cbnz	r3, 8039a7c <__ssvfiscanf_r+0x7d4>
 8039a4a:	3504      	adds	r5, #4
 8039a4c:	f1ba 0f00 	cmp.w	sl, #0
 8039a50:	d014      	beq.n	8039a7c <__ssvfiscanf_r+0x7d4>
 8039a52:	eba5 0608 	sub.w	r6, r5, r8
 8039a56:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 8039a5a:	d80d      	bhi.n	8039a78 <__ssvfiscanf_r+0x7d0>
 8039a5c:	4640      	mov	r0, r8
 8039a5e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8039a62:	f003 fb95 	bl	803d190 <realloc>
 8039a66:	4680      	mov	r8, r0
 8039a68:	2800      	cmp	r0, #0
 8039a6a:	f43f ad6d 	beq.w	8039548 <__ssvfiscanf_r+0x2a0>
 8039a6e:	1985      	adds	r5, r0, r6
 8039a70:	f8ca 0000 	str.w	r0, [sl]
 8039a74:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8039a78:	693e      	ldr	r6, [r7, #16]
 8039a7a:	e7be      	b.n	80399fa <__ssvfiscanf_r+0x752>
 8039a7c:	2600      	movs	r6, #0
 8039a7e:	e7bc      	b.n	80399fa <__ssvfiscanf_r+0x752>
 8039a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8039a82:	2b00      	cmp	r3, #0
 8039a84:	f47f af3d 	bne.w	8039902 <__ssvfiscanf_r+0x65a>
 8039a88:	e78c      	b.n	80399a4 <__ssvfiscanf_r+0x6fc>
 8039a8a:	b1e3      	cbz	r3, 8039ac6 <__ssvfiscanf_r+0x81e>
 8039a8c:	f107 0670 	add.w	r6, r7, #112	@ 0x70
 8039a90:	6823      	ldr	r3, [r4, #0]
 8039a92:	781a      	ldrb	r2, [r3, #0]
 8039a94:	5cb2      	ldrb	r2, [r6, r2]
 8039a96:	b91a      	cbnz	r2, 8039aa0 <__ssvfiscanf_r+0x7f8>
 8039a98:	2d00      	cmp	r5, #0
 8039a9a:	f47f ae92 	bne.w	80397c2 <__ssvfiscanf_r+0x51a>
 8039a9e:	e450      	b.n	8039342 <__ssvfiscanf_r+0x9a>
 8039aa0:	3301      	adds	r3, #1
 8039aa2:	6862      	ldr	r2, [r4, #4]
 8039aa4:	6023      	str	r3, [r4, #0]
 8039aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8039aa8:	3501      	adds	r5, #1
 8039aaa:	3a01      	subs	r2, #1
 8039aac:	42ab      	cmp	r3, r5
 8039aae:	6062      	str	r2, [r4, #4]
 8039ab0:	f43f ae87 	beq.w	80397c2 <__ssvfiscanf_r+0x51a>
 8039ab4:	2a00      	cmp	r2, #0
 8039ab6:	dceb      	bgt.n	8039a90 <__ssvfiscanf_r+0x7e8>
 8039ab8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8039aba:	4621      	mov	r1, r4
 8039abc:	f7ff fb9d 	bl	80391fa <__ssrefill_r>
 8039ac0:	2800      	cmp	r0, #0
 8039ac2:	d0e5      	beq.n	8039a90 <__ssvfiscanf_r+0x7e8>
 8039ac4:	e67d      	b.n	80397c2 <__ssvfiscanf_r+0x51a>
 8039ac6:	6a3b      	ldr	r3, [r7, #32]
 8039ac8:	f016 0980 	ands.w	r9, r6, #128	@ 0x80
 8039acc:	f853 5b04 	ldr.w	r5, [r3], #4
 8039ad0:	623b      	str	r3, [r7, #32]
 8039ad2:	d07e      	beq.n	8039bd2 <__ssvfiscanf_r+0x92a>
 8039ad4:	2d00      	cmp	r5, #0
 8039ad6:	f43f ac34 	beq.w	8039342 <__ssvfiscanf_r+0x9a>
 8039ada:	2020      	movs	r0, #32
 8039adc:	f7fe fbce 	bl	803827c <malloc>
 8039ae0:	4680      	mov	r8, r0
 8039ae2:	2800      	cmp	r0, #0
 8039ae4:	f43f ac9c 	beq.w	8039420 <__ssvfiscanf_r+0x178>
 8039ae8:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8039aec:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 8039af0:	6028      	str	r0, [r5, #0]
 8039af2:	45b1      	cmp	r9, r6
 8039af4:	d312      	bcc.n	8039b1c <__ssvfiscanf_r+0x874>
 8039af6:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8039afa:	429e      	cmp	r6, r3
 8039afc:	f200 82e8 	bhi.w	803a0d0 <__ssvfiscanf_r+0xe28>
 8039b00:	3608      	adds	r6, #8
 8039b02:	b2b6      	uxth	r6, r6
 8039b04:	f8db 0000 	ldr.w	r0, [fp]
 8039b08:	00b1      	lsls	r1, r6, #2
 8039b0a:	f003 fb41 	bl	803d190 <realloc>
 8039b0e:	2800      	cmp	r0, #0
 8039b10:	f000 82de 	beq.w	803a0d0 <__ssvfiscanf_r+0xe28>
 8039b14:	f8cb 0000 	str.w	r0, [fp]
 8039b18:	f8ab 6004 	strh.w	r6, [fp, #4]
 8039b1c:	f8db 3000 	ldr.w	r3, [fp]
 8039b20:	f109 0201 	add.w	r2, r9, #1
 8039b24:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8039b28:	46aa      	mov	sl, r5
 8039b2a:	f8ab 2006 	strh.w	r2, [fp, #6]
 8039b2e:	4645      	mov	r5, r8
 8039b30:	f04f 0920 	mov.w	r9, #32
 8039b34:	462e      	mov	r6, r5
 8039b36:	f107 0870 	add.w	r8, r7, #112	@ 0x70
 8039b3a:	6823      	ldr	r3, [r4, #0]
 8039b3c:	781a      	ldrb	r2, [r3, #0]
 8039b3e:	f818 2002 	ldrb.w	r2, [r8, r2]
 8039b42:	b362      	cbz	r2, 8039b9e <__ssvfiscanf_r+0x8f6>
 8039b44:	6862      	ldr	r2, [r4, #4]
 8039b46:	3a01      	subs	r2, #1
 8039b48:	6062      	str	r2, [r4, #4]
 8039b4a:	1c5a      	adds	r2, r3, #1
 8039b4c:	6022      	str	r2, [r4, #0]
 8039b4e:	781b      	ldrb	r3, [r3, #0]
 8039b50:	f805 3b01 	strb.w	r3, [r5], #1
 8039b54:	f1ba 0f00 	cmp.w	sl, #0
 8039b58:	d011      	beq.n	8039b7e <__ssvfiscanf_r+0x8d6>
 8039b5a:	1bab      	subs	r3, r5, r6
 8039b5c:	454b      	cmp	r3, r9
 8039b5e:	d30e      	bcc.n	8039b7e <__ssvfiscanf_r+0x8d6>
 8039b60:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8039b64:	4630      	mov	r0, r6
 8039b66:	4649      	mov	r1, r9
 8039b68:	613b      	str	r3, [r7, #16]
 8039b6a:	f003 fb11 	bl	803d190 <realloc>
 8039b6e:	4606      	mov	r6, r0
 8039b70:	2800      	cmp	r0, #0
 8039b72:	f43f ac55 	beq.w	8039420 <__ssvfiscanf_r+0x178>
 8039b76:	693b      	ldr	r3, [r7, #16]
 8039b78:	f8ca 0000 	str.w	r0, [sl]
 8039b7c:	18c5      	adds	r5, r0, r3
 8039b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8039b80:	3b01      	subs	r3, #1
 8039b82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8039b84:	d00b      	beq.n	8039b9e <__ssvfiscanf_r+0x8f6>
 8039b86:	6863      	ldr	r3, [r4, #4]
 8039b88:	2b00      	cmp	r3, #0
 8039b8a:	dcd6      	bgt.n	8039b3a <__ssvfiscanf_r+0x892>
 8039b8c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8039b8e:	4621      	mov	r1, r4
 8039b90:	f7ff fb33 	bl	80391fa <__ssrefill_r>
 8039b94:	2800      	cmp	r0, #0
 8039b96:	d0d0      	beq.n	8039b3a <__ssvfiscanf_r+0x892>
 8039b98:	42b5      	cmp	r5, r6
 8039b9a:	f43f ac3c 	beq.w	8039416 <__ssvfiscanf_r+0x16e>
 8039b9e:	1bae      	subs	r6, r5, r6
 8039ba0:	f43f abcf 	beq.w	8039342 <__ssvfiscanf_r+0x9a>
 8039ba4:	2300      	movs	r3, #0
 8039ba6:	702b      	strb	r3, [r5, #0]
 8039ba8:	f1ba 0f00 	cmp.w	sl, #0
 8039bac:	d009      	beq.n	8039bc2 <__ssvfiscanf_r+0x91a>
 8039bae:	1c71      	adds	r1, r6, #1
 8039bb0:	4589      	cmp	r9, r1
 8039bb2:	d906      	bls.n	8039bc2 <__ssvfiscanf_r+0x91a>
 8039bb4:	f8da 0000 	ldr.w	r0, [sl]
 8039bb8:	f003 faea 	bl	803d190 <realloc>
 8039bbc:	b108      	cbz	r0, 8039bc2 <__ssvfiscanf_r+0x91a>
 8039bbe:	f8ca 0000 	str.w	r0, [sl]
 8039bc2:	69fb      	ldr	r3, [r7, #28]
 8039bc4:	3301      	adds	r3, #1
 8039bc6:	61fb      	str	r3, [r7, #28]
 8039bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8039bca:	4433      	add	r3, r6
 8039bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8039bce:	f7ff bb8c 	b.w	80392ea <__ssvfiscanf_r+0x42>
 8039bd2:	46ca      	mov	sl, r9
 8039bd4:	e7ae      	b.n	8039b34 <__ssvfiscanf_r+0x88c>
 8039bd6:	bf00      	nop
 8039bd8:	200002c4 	.word	0x200002c4
 8039bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8039bde:	2b00      	cmp	r3, #0
 8039be0:	bf08      	it	eq
 8039be2:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 8039be6:	f016 0501 	ands.w	r5, r6, #1
 8039bea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8039bec:	f006 0810 	and.w	r8, r6, #16
 8039bf0:	f000 80e1 	beq.w	8039db6 <__ssvfiscanf_r+0xb0e>
 8039bf4:	f1b8 0f00 	cmp.w	r8, #0
 8039bf8:	f040 8089 	bne.w	8039d0e <__ssvfiscanf_r+0xa66>
 8039bfc:	6a3b      	ldr	r3, [r7, #32]
 8039bfe:	0636      	lsls	r6, r6, #24
 8039c00:	f853 5b04 	ldr.w	r5, [r3], #4
 8039c04:	623b      	str	r3, [r7, #32]
 8039c06:	f140 8089 	bpl.w	8039d1c <__ssvfiscanf_r+0xa74>
 8039c0a:	2d00      	cmp	r5, #0
 8039c0c:	f43f ac9f 	beq.w	803954e <__ssvfiscanf_r+0x2a6>
 8039c10:	2080      	movs	r0, #128	@ 0x80
 8039c12:	f7fe fb33 	bl	803827c <malloc>
 8039c16:	4606      	mov	r6, r0
 8039c18:	2800      	cmp	r0, #0
 8039c1a:	f43f ac95 	beq.w	8039548 <__ssvfiscanf_r+0x2a0>
 8039c1e:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8039c22:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 8039c26:	6028      	str	r0, [r5, #0]
 8039c28:	4599      	cmp	r9, r3
 8039c2a:	d314      	bcc.n	8039c56 <__ssvfiscanf_r+0x9ae>
 8039c2c:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8039c30:	4293      	cmp	r3, r2
 8039c32:	f200 824d 	bhi.w	803a0d0 <__ssvfiscanf_r+0xe28>
 8039c36:	3308      	adds	r3, #8
 8039c38:	fa1f fa83 	uxth.w	sl, r3
 8039c3c:	f8db 0000 	ldr.w	r0, [fp]
 8039c40:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8039c44:	f003 faa4 	bl	803d190 <realloc>
 8039c48:	2800      	cmp	r0, #0
 8039c4a:	f000 8241 	beq.w	803a0d0 <__ssvfiscanf_r+0xe28>
 8039c4e:	f8cb 0000 	str.w	r0, [fp]
 8039c52:	f8ab a004 	strh.w	sl, [fp, #4]
 8039c56:	f8db 3000 	ldr.w	r3, [fp]
 8039c5a:	f109 0201 	add.w	r2, r9, #1
 8039c5e:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8039c62:	46aa      	mov	sl, r5
 8039c64:	f8ab 2006 	strh.w	r2, [fp, #6]
 8039c68:	4635      	mov	r5, r6
 8039c6a:	f04f 0920 	mov.w	r9, #32
 8039c6e:	2300      	movs	r3, #0
 8039c70:	6822      	ldr	r2, [r4, #0]
 8039c72:	499e      	ldr	r1, [pc, #632]	@ (8039eec <__ssvfiscanf_r+0xc44>)
 8039c74:	7812      	ldrb	r2, [r2, #0]
 8039c76:	5c8a      	ldrb	r2, [r1, r2]
 8039c78:	0711      	lsls	r1, r2, #28
 8039c7a:	d43c      	bmi.n	8039cf6 <__ssvfiscanf_r+0xa4e>
 8039c7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8039c7e:	2a00      	cmp	r2, #0
 8039c80:	d039      	beq.n	8039cf6 <__ssvfiscanf_r+0xa4e>
 8039c82:	613b      	str	r3, [r7, #16]
 8039c84:	f7fd fa3c 	bl	8037100 <__locale_mb_cur_max>
 8039c88:	693b      	ldr	r3, [r7, #16]
 8039c8a:	4298      	cmp	r0, r3
 8039c8c:	f43f abc3 	beq.w	8039416 <__ssvfiscanf_r+0x16e>
 8039c90:	1c5a      	adds	r2, r3, #1
 8039c92:	613a      	str	r2, [r7, #16]
 8039c94:	6822      	ldr	r2, [r4, #0]
 8039c96:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8039c9a:	f812 0b01 	ldrb.w	r0, [r2], #1
 8039c9e:	54c8      	strb	r0, [r1, r3]
 8039ca0:	6863      	ldr	r3, [r4, #4]
 8039ca2:	3b01      	subs	r3, #1
 8039ca4:	e9c4 2300 	strd	r2, r3, [r4]
 8039ca8:	69bb      	ldr	r3, [r7, #24]
 8039caa:	2b03      	cmp	r3, #3
 8039cac:	d102      	bne.n	8039cb4 <__ssvfiscanf_r+0xa0c>
 8039cae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8039cb0:	2b04      	cmp	r3, #4
 8039cb2:	d005      	beq.n	8039cc0 <__ssvfiscanf_r+0xa18>
 8039cb4:	2208      	movs	r2, #8
 8039cb6:	2100      	movs	r1, #0
 8039cb8:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8039cbc:	f7fc f898 	bl	8035df0 <memset>
 8039cc0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8039cc4:	9300      	str	r3, [sp, #0]
 8039cc6:	693b      	ldr	r3, [r7, #16]
 8039cc8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8039cca:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8039cce:	4629      	mov	r1, r5
 8039cd0:	f004 fe18 	bl	803e904 <_mbrtowc_r>
 8039cd4:	4603      	mov	r3, r0
 8039cd6:	61b8      	str	r0, [r7, #24]
 8039cd8:	1c58      	adds	r0, r3, #1
 8039cda:	f43f ab9c 	beq.w	8039416 <__ssvfiscanf_r+0x16e>
 8039cde:	bb0b      	cbnz	r3, 8039d24 <__ssvfiscanf_r+0xa7c>
 8039ce0:	602b      	str	r3, [r5, #0]
 8039ce2:	6828      	ldr	r0, [r5, #0]
 8039ce4:	f004 fe28 	bl	803e938 <iswspace>
 8039ce8:	4603      	mov	r3, r0
 8039cea:	2800      	cmp	r0, #0
 8039cec:	d037      	beq.n	8039d5e <__ssvfiscanf_r+0xab6>
 8039cee:	693a      	ldr	r2, [r7, #16]
 8039cf0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8039cf4:	bb4a      	cbnz	r2, 8039d4a <__ssvfiscanf_r+0xaa2>
 8039cf6:	f1b8 0f00 	cmp.w	r8, #0
 8039cfa:	f47f aaf6 	bne.w	80392ea <__ssvfiscanf_r+0x42>
 8039cfe:	f8c5 8000 	str.w	r8, [r5]
 8039d02:	f1ba 0f00 	cmp.w	sl, #0
 8039d06:	f43f ad34 	beq.w	8039772 <__ssvfiscanf_r+0x4ca>
 8039d0a:	1ba9      	subs	r1, r5, r6
 8039d0c:	e655      	b.n	80399ba <__ssvfiscanf_r+0x712>
 8039d0e:	f04f 0900 	mov.w	r9, #0
 8039d12:	464e      	mov	r6, r9
 8039d14:	46ca      	mov	sl, r9
 8039d16:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 8039d1a:	e7a8      	b.n	8039c6e <__ssvfiscanf_r+0x9c6>
 8039d1c:	46c1      	mov	r9, r8
 8039d1e:	4646      	mov	r6, r8
 8039d20:	46c2      	mov	sl, r8
 8039d22:	e7a4      	b.n	8039c6e <__ssvfiscanf_r+0x9c6>
 8039d24:	69bb      	ldr	r3, [r7, #24]
 8039d26:	3302      	adds	r3, #2
 8039d28:	d1db      	bne.n	8039ce2 <__ssvfiscanf_r+0xa3a>
 8039d2a:	693b      	ldr	r3, [r7, #16]
 8039d2c:	6862      	ldr	r2, [r4, #4]
 8039d2e:	2a00      	cmp	r2, #0
 8039d30:	dc9e      	bgt.n	8039c70 <__ssvfiscanf_r+0x9c8>
 8039d32:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8039d34:	613b      	str	r3, [r7, #16]
 8039d36:	4621      	mov	r1, r4
 8039d38:	f7ff fa5f 	bl	80391fa <__ssrefill_r>
 8039d3c:	693b      	ldr	r3, [r7, #16]
 8039d3e:	2800      	cmp	r0, #0
 8039d40:	d096      	beq.n	8039c70 <__ssvfiscanf_r+0x9c8>
 8039d42:	2b00      	cmp	r3, #0
 8039d44:	f47f ab67 	bne.w	8039416 <__ssvfiscanf_r+0x16e>
 8039d48:	e7d5      	b.n	8039cf6 <__ssvfiscanf_r+0xa4e>
 8039d4a:	693a      	ldr	r2, [r7, #16]
 8039d4c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8039d4e:	3a01      	subs	r2, #1
 8039d50:	613a      	str	r2, [r7, #16]
 8039d52:	6939      	ldr	r1, [r7, #16]
 8039d54:	4622      	mov	r2, r4
 8039d56:	5c59      	ldrb	r1, [r3, r1]
 8039d58:	f7ff fa14 	bl	8039184 <_sungetc_r>
 8039d5c:	e7c7      	b.n	8039cee <__ssvfiscanf_r+0xa46>
 8039d5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8039d60:	6939      	ldr	r1, [r7, #16]
 8039d62:	440a      	add	r2, r1
 8039d64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8039d66:	69ba      	ldr	r2, [r7, #24]
 8039d68:	2a03      	cmp	r2, #3
 8039d6a:	d102      	bne.n	8039d72 <__ssvfiscanf_r+0xaca>
 8039d6c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8039d6e:	2a04      	cmp	r2, #4
 8039d70:	d002      	beq.n	8039d78 <__ssvfiscanf_r+0xad0>
 8039d72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8039d74:	3a01      	subs	r2, #1
 8039d76:	62ba      	str	r2, [r7, #40]	@ 0x28
 8039d78:	f1b8 0f00 	cmp.w	r8, #0
 8039d7c:	d1d6      	bne.n	8039d2c <__ssvfiscanf_r+0xa84>
 8039d7e:	3504      	adds	r5, #4
 8039d80:	f1ba 0f00 	cmp.w	sl, #0
 8039d84:	d015      	beq.n	8039db2 <__ssvfiscanf_r+0xb0a>
 8039d86:	1bab      	subs	r3, r5, r6
 8039d88:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 8039d8c:	d80f      	bhi.n	8039dae <__ssvfiscanf_r+0xb06>
 8039d8e:	4630      	mov	r0, r6
 8039d90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8039d94:	613b      	str	r3, [r7, #16]
 8039d96:	f003 f9fb 	bl	803d190 <realloc>
 8039d9a:	4606      	mov	r6, r0
 8039d9c:	2800      	cmp	r0, #0
 8039d9e:	f43f abd3 	beq.w	8039548 <__ssvfiscanf_r+0x2a0>
 8039da2:	693b      	ldr	r3, [r7, #16]
 8039da4:	f8ca 0000 	str.w	r0, [sl]
 8039da8:	18c5      	adds	r5, r0, r3
 8039daa:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8039dae:	4643      	mov	r3, r8
 8039db0:	e7bc      	b.n	8039d2c <__ssvfiscanf_r+0xa84>
 8039db2:	4653      	mov	r3, sl
 8039db4:	e7ba      	b.n	8039d2c <__ssvfiscanf_r+0xa84>
 8039db6:	f1b8 0f00 	cmp.w	r8, #0
 8039dba:	d019      	beq.n	8039df0 <__ssvfiscanf_r+0xb48>
 8039dbc:	4e4b      	ldr	r6, [pc, #300]	@ (8039eec <__ssvfiscanf_r+0xc44>)
 8039dbe:	6823      	ldr	r3, [r4, #0]
 8039dc0:	781a      	ldrb	r2, [r3, #0]
 8039dc2:	5cb2      	ldrb	r2, [r6, r2]
 8039dc4:	0712      	lsls	r2, r2, #28
 8039dc6:	f53f acfc 	bmi.w	80397c2 <__ssvfiscanf_r+0x51a>
 8039dca:	3301      	adds	r3, #1
 8039dcc:	6862      	ldr	r2, [r4, #4]
 8039dce:	6023      	str	r3, [r4, #0]
 8039dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8039dd2:	3501      	adds	r5, #1
 8039dd4:	3a01      	subs	r2, #1
 8039dd6:	429d      	cmp	r5, r3
 8039dd8:	6062      	str	r2, [r4, #4]
 8039dda:	f43f acf2 	beq.w	80397c2 <__ssvfiscanf_r+0x51a>
 8039dde:	2a00      	cmp	r2, #0
 8039de0:	dced      	bgt.n	8039dbe <__ssvfiscanf_r+0xb16>
 8039de2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8039de4:	4621      	mov	r1, r4
 8039de6:	f7ff fa08 	bl	80391fa <__ssrefill_r>
 8039dea:	2800      	cmp	r0, #0
 8039dec:	d0e7      	beq.n	8039dbe <__ssvfiscanf_r+0xb16>
 8039dee:	e4e8      	b.n	80397c2 <__ssvfiscanf_r+0x51a>
 8039df0:	6a3b      	ldr	r3, [r7, #32]
 8039df2:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 8039df6:	f853 5b04 	ldr.w	r5, [r3], #4
 8039dfa:	623b      	str	r3, [r7, #32]
 8039dfc:	d074      	beq.n	8039ee8 <__ssvfiscanf_r+0xc40>
 8039dfe:	2d00      	cmp	r5, #0
 8039e00:	f43f aa9f 	beq.w	8039342 <__ssvfiscanf_r+0x9a>
 8039e04:	2020      	movs	r0, #32
 8039e06:	f7fe fa39 	bl	803827c <malloc>
 8039e0a:	4680      	mov	r8, r0
 8039e0c:	2800      	cmp	r0, #0
 8039e0e:	f43f ab07 	beq.w	8039420 <__ssvfiscanf_r+0x178>
 8039e12:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8039e16:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 8039e1a:	6028      	str	r0, [r5, #0]
 8039e1c:	45b1      	cmp	r9, r6
 8039e1e:	d312      	bcc.n	8039e46 <__ssvfiscanf_r+0xb9e>
 8039e20:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8039e24:	429e      	cmp	r6, r3
 8039e26:	f200 8153 	bhi.w	803a0d0 <__ssvfiscanf_r+0xe28>
 8039e2a:	3608      	adds	r6, #8
 8039e2c:	b2b6      	uxth	r6, r6
 8039e2e:	f8db 0000 	ldr.w	r0, [fp]
 8039e32:	00b1      	lsls	r1, r6, #2
 8039e34:	f003 f9ac 	bl	803d190 <realloc>
 8039e38:	2800      	cmp	r0, #0
 8039e3a:	f000 8149 	beq.w	803a0d0 <__ssvfiscanf_r+0xe28>
 8039e3e:	f8cb 0000 	str.w	r0, [fp]
 8039e42:	f8ab 6004 	strh.w	r6, [fp, #4]
 8039e46:	f8db 3000 	ldr.w	r3, [fp]
 8039e4a:	f109 0201 	add.w	r2, r9, #1
 8039e4e:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8039e52:	46aa      	mov	sl, r5
 8039e54:	f8ab 2006 	strh.w	r2, [fp, #6]
 8039e58:	4645      	mov	r5, r8
 8039e5a:	2620      	movs	r6, #32
 8039e5c:	46a9      	mov	r9, r5
 8039e5e:	6823      	ldr	r3, [r4, #0]
 8039e60:	4922      	ldr	r1, [pc, #136]	@ (8039eec <__ssvfiscanf_r+0xc44>)
 8039e62:	781a      	ldrb	r2, [r3, #0]
 8039e64:	5c8a      	ldrb	r2, [r1, r2]
 8039e66:	0710      	lsls	r0, r2, #28
 8039e68:	d428      	bmi.n	8039ebc <__ssvfiscanf_r+0xc14>
 8039e6a:	6862      	ldr	r2, [r4, #4]
 8039e6c:	3a01      	subs	r2, #1
 8039e6e:	6062      	str	r2, [r4, #4]
 8039e70:	1c5a      	adds	r2, r3, #1
 8039e72:	6022      	str	r2, [r4, #0]
 8039e74:	781b      	ldrb	r3, [r3, #0]
 8039e76:	f805 3b01 	strb.w	r3, [r5], #1
 8039e7a:	f1ba 0f00 	cmp.w	sl, #0
 8039e7e:	d010      	beq.n	8039ea2 <__ssvfiscanf_r+0xbfa>
 8039e80:	eba5 0809 	sub.w	r8, r5, r9
 8039e84:	45b0      	cmp	r8, r6
 8039e86:	d30c      	bcc.n	8039ea2 <__ssvfiscanf_r+0xbfa>
 8039e88:	0076      	lsls	r6, r6, #1
 8039e8a:	4648      	mov	r0, r9
 8039e8c:	4631      	mov	r1, r6
 8039e8e:	f003 f97f 	bl	803d190 <realloc>
 8039e92:	4681      	mov	r9, r0
 8039e94:	2800      	cmp	r0, #0
 8039e96:	f43f aac3 	beq.w	8039420 <__ssvfiscanf_r+0x178>
 8039e9a:	eb00 0508 	add.w	r5, r0, r8
 8039e9e:	f8ca 0000 	str.w	r0, [sl]
 8039ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8039ea4:	3b01      	subs	r3, #1
 8039ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8039ea8:	d008      	beq.n	8039ebc <__ssvfiscanf_r+0xc14>
 8039eaa:	6863      	ldr	r3, [r4, #4]
 8039eac:	2b00      	cmp	r3, #0
 8039eae:	dcd6      	bgt.n	8039e5e <__ssvfiscanf_r+0xbb6>
 8039eb0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8039eb2:	4621      	mov	r1, r4
 8039eb4:	f7ff f9a1 	bl	80391fa <__ssrefill_r>
 8039eb8:	2800      	cmp	r0, #0
 8039eba:	d0d0      	beq.n	8039e5e <__ssvfiscanf_r+0xbb6>
 8039ebc:	2300      	movs	r3, #0
 8039ebe:	702b      	strb	r3, [r5, #0]
 8039ec0:	eba5 0509 	sub.w	r5, r5, r9
 8039ec4:	f1ba 0f00 	cmp.w	sl, #0
 8039ec8:	f43f acce 	beq.w	8039868 <__ssvfiscanf_r+0x5c0>
 8039ecc:	1c69      	adds	r1, r5, #1
 8039ece:	428e      	cmp	r6, r1
 8039ed0:	f67f acca 	bls.w	8039868 <__ssvfiscanf_r+0x5c0>
 8039ed4:	f8da 0000 	ldr.w	r0, [sl]
 8039ed8:	f003 f95a 	bl	803d190 <realloc>
 8039edc:	2800      	cmp	r0, #0
 8039ede:	f43f acc3 	beq.w	8039868 <__ssvfiscanf_r+0x5c0>
 8039ee2:	f8ca 0000 	str.w	r0, [sl]
 8039ee6:	e4bf      	b.n	8039868 <__ssvfiscanf_r+0x5c0>
 8039ee8:	46b2      	mov	sl, r6
 8039eea:	e7b7      	b.n	8039e5c <__ssvfiscanf_r+0xbb4>
 8039eec:	08044b59 	.word	0x08044b59
 8039ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8039ef2:	3b01      	subs	r3, #1
 8039ef4:	2b26      	cmp	r3, #38	@ 0x26
 8039ef6:	bf81      	itttt	hi
 8039ef8:	6abb      	ldrhi	r3, [r7, #40]	@ 0x28
 8039efa:	f1a3 0827 	subhi.w	r8, r3, #39	@ 0x27
 8039efe:	2327      	movhi	r3, #39	@ 0x27
 8039f00:	62bb      	strhi	r3, [r7, #40]	@ 0x28
 8039f02:	bf98      	it	ls
 8039f04:	f04f 0800 	movls.w	r8, #0
 8039f08:	f446 6658 	orr.w	r6, r6, #3456	@ 0xd80
 8039f0c:	f04f 0900 	mov.w	r9, #0
 8039f10:	f107 0a48 	add.w	sl, r7, #72	@ 0x48
 8039f14:	6822      	ldr	r2, [r4, #0]
 8039f16:	7813      	ldrb	r3, [r2, #0]
 8039f18:	2b39      	cmp	r3, #57	@ 0x39
 8039f1a:	d80f      	bhi.n	8039f3c <__ssvfiscanf_r+0xc94>
 8039f1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8039f1e:	d91a      	bls.n	8039f56 <__ssvfiscanf_r+0xcae>
 8039f20:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8039f24:	290e      	cmp	r1, #14
 8039f26:	d816      	bhi.n	8039f56 <__ssvfiscanf_r+0xcae>
 8039f28:	e8df f001 	tbb	[pc, r1]
 8039f2c:	15771577 	.word	0x15771577
 8039f30:	67673e15 	.word	0x67673e15
 8039f34:	67676767 	.word	0x67676767
 8039f38:	6f67      	.short	0x6f67
 8039f3a:	6f          	.byte	0x6f
 8039f3b:	00          	.byte	0x00
 8039f3c:	2b66      	cmp	r3, #102	@ 0x66
 8039f3e:	d831      	bhi.n	8039fa4 <__ssvfiscanf_r+0xcfc>
 8039f40:	2b60      	cmp	r3, #96	@ 0x60
 8039f42:	d803      	bhi.n	8039f4c <__ssvfiscanf_r+0xca4>
 8039f44:	2b46      	cmp	r3, #70	@ 0x46
 8039f46:	d804      	bhi.n	8039f52 <__ssvfiscanf_r+0xcaa>
 8039f48:	2b40      	cmp	r3, #64	@ 0x40
 8039f4a:	d904      	bls.n	8039f56 <__ssvfiscanf_r+0xcae>
 8039f4c:	6979      	ldr	r1, [r7, #20]
 8039f4e:	290a      	cmp	r1, #10
 8039f50:	e061      	b.n	803a016 <__ssvfiscanf_r+0xd6e>
 8039f52:	2b58      	cmp	r3, #88	@ 0x58
 8039f54:	d066      	beq.n	803a024 <__ssvfiscanf_r+0xd7c>
 8039f56:	05f1      	lsls	r1, r6, #23
 8039f58:	d511      	bpl.n	8039f7e <__ssvfiscanf_r+0xcd6>
 8039f5a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8039f5e:	459a      	cmp	sl, r3
 8039f60:	d908      	bls.n	8039f74 <__ssvfiscanf_r+0xccc>
 8039f62:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
 8039f66:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8039f68:	4622      	mov	r2, r4
 8039f6a:	f7ff f90b 	bl	8039184 <_sungetc_r>
 8039f6e:	f10a 38ff 	add.w	r8, sl, #4294967295	@ 0xffffffff
 8039f72:	46c2      	mov	sl, r8
 8039f74:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8039f78:	459a      	cmp	sl, r3
 8039f7a:	f43f a9e2 	beq.w	8039342 <__ssvfiscanf_r+0x9a>
 8039f7e:	f016 0210 	ands.w	r2, r6, #16
 8039f82:	d16b      	bne.n	803a05c <__ssvfiscanf_r+0xdb4>
 8039f84:	697b      	ldr	r3, [r7, #20]
 8039f86:	f88a 2000 	strb.w	r2, [sl]
 8039f8a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8039f8c:	68fd      	ldr	r5, [r7, #12]
 8039f8e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8039f92:	47a8      	blx	r5
 8039f94:	6a3b      	ldr	r3, [r7, #32]
 8039f96:	06b2      	lsls	r2, r6, #26
 8039f98:	f103 0804 	add.w	r8, r3, #4
 8039f9c:	d555      	bpl.n	803a04a <__ssvfiscanf_r+0xda2>
 8039f9e:	681b      	ldr	r3, [r3, #0]
 8039fa0:	6018      	str	r0, [r3, #0]
 8039fa2:	e057      	b.n	803a054 <__ssvfiscanf_r+0xdac>
 8039fa4:	2b78      	cmp	r3, #120	@ 0x78
 8039fa6:	e7d5      	b.n	8039f54 <__ssvfiscanf_r+0xcac>
 8039fa8:	0531      	lsls	r1, r6, #20
 8039faa:	d509      	bpl.n	8039fc0 <__ssvfiscanf_r+0xd18>
 8039fac:	6979      	ldr	r1, [r7, #20]
 8039fae:	b919      	cbnz	r1, 8039fb8 <__ssvfiscanf_r+0xd10>
 8039fb0:	2108      	movs	r1, #8
 8039fb2:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 8039fb6:	6179      	str	r1, [r7, #20]
 8039fb8:	0575      	lsls	r5, r6, #21
 8039fba:	d506      	bpl.n	8039fca <__ssvfiscanf_r+0xd22>
 8039fbc:	f426 66b0 	bic.w	r6, r6, #1408	@ 0x580
 8039fc0:	4655      	mov	r5, sl
 8039fc2:	f805 3b01 	strb.w	r3, [r5], #1
 8039fc6:	46aa      	mov	sl, r5
 8039fc8:	e00b      	b.n	8039fe2 <__ssvfiscanf_r+0xd3a>
 8039fca:	f426 7660 	bic.w	r6, r6, #896	@ 0x380
 8039fce:	f1b8 0f00 	cmp.w	r8, #0
 8039fd2:	d004      	beq.n	8039fde <__ssvfiscanf_r+0xd36>
 8039fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8039fd6:	3301      	adds	r3, #1
 8039fd8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8039fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8039fde:	f109 0901 	add.w	r9, r9, #1
 8039fe2:	6863      	ldr	r3, [r4, #4]
 8039fe4:	3b01      	subs	r3, #1
 8039fe6:	2b00      	cmp	r3, #0
 8039fe8:	6063      	str	r3, [r4, #4]
 8039fea:	dd27      	ble.n	803a03c <__ssvfiscanf_r+0xd94>
 8039fec:	3201      	adds	r2, #1
 8039fee:	6022      	str	r2, [r4, #0]
 8039ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8039ff2:	3b01      	subs	r3, #1
 8039ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8039ff6:	d18d      	bne.n	8039f14 <__ssvfiscanf_r+0xc6c>
 8039ff8:	e7ad      	b.n	8039f56 <__ssvfiscanf_r+0xcae>
 8039ffa:	6978      	ldr	r0, [r7, #20]
 8039ffc:	4936      	ldr	r1, [pc, #216]	@ (803a0d8 <__ssvfiscanf_r+0xe30>)
 8039ffe:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 803a002:	6179      	str	r1, [r7, #20]
 803a004:	f426 6638 	bic.w	r6, r6, #2944	@ 0xb80
 803a008:	e7da      	b.n	8039fc0 <__ssvfiscanf_r+0xd18>
 803a00a:	6978      	ldr	r0, [r7, #20]
 803a00c:	4932      	ldr	r1, [pc, #200]	@ (803a0d8 <__ssvfiscanf_r+0xe30>)
 803a00e:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 803a012:	6179      	str	r1, [r7, #20]
 803a014:	2908      	cmp	r1, #8
 803a016:	dcf5      	bgt.n	803a004 <__ssvfiscanf_r+0xd5c>
 803a018:	e79d      	b.n	8039f56 <__ssvfiscanf_r+0xcae>
 803a01a:	0630      	lsls	r0, r6, #24
 803a01c:	d59b      	bpl.n	8039f56 <__ssvfiscanf_r+0xcae>
 803a01e:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 803a022:	e7cd      	b.n	8039fc0 <__ssvfiscanf_r+0xd18>
 803a024:	f406 61c0 	and.w	r1, r6, #1536	@ 0x600
 803a028:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 803a02c:	d193      	bne.n	8039f56 <__ssvfiscanf_r+0xcae>
 803a02e:	f426 7600 	bic.w	r6, r6, #512	@ 0x200
 803a032:	2110      	movs	r1, #16
 803a034:	f446 66a0 	orr.w	r6, r6, #1280	@ 0x500
 803a038:	6179      	str	r1, [r7, #20]
 803a03a:	e7c1      	b.n	8039fc0 <__ssvfiscanf_r+0xd18>
 803a03c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803a03e:	4621      	mov	r1, r4
 803a040:	f7ff f8db 	bl	80391fa <__ssrefill_r>
 803a044:	2800      	cmp	r0, #0
 803a046:	d0d3      	beq.n	8039ff0 <__ssvfiscanf_r+0xd48>
 803a048:	e785      	b.n	8039f56 <__ssvfiscanf_r+0xcae>
 803a04a:	0733      	lsls	r3, r6, #28
 803a04c:	d50d      	bpl.n	803a06a <__ssvfiscanf_r+0xdc2>
 803a04e:	6a3b      	ldr	r3, [r7, #32]
 803a050:	681b      	ldr	r3, [r3, #0]
 803a052:	7018      	strb	r0, [r3, #0]
 803a054:	69fb      	ldr	r3, [r7, #28]
 803a056:	3301      	adds	r3, #1
 803a058:	e9c7 3807 	strd	r3, r8, [r7, #28]
 803a05c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 803a060:	ebaa 0503 	sub.w	r5, sl, r3
 803a064:	444d      	add	r5, r9
 803a066:	f7ff bbac 	b.w	80397c2 <__ssvfiscanf_r+0x51a>
 803a06a:	0775      	lsls	r5, r6, #29
 803a06c:	d503      	bpl.n	803a076 <__ssvfiscanf_r+0xdce>
 803a06e:	6a3b      	ldr	r3, [r7, #32]
 803a070:	681b      	ldr	r3, [r3, #0]
 803a072:	8018      	strh	r0, [r3, #0]
 803a074:	e7ee      	b.n	803a054 <__ssvfiscanf_r+0xdac>
 803a076:	f016 0201 	ands.w	r2, r6, #1
 803a07a:	d001      	beq.n	803a080 <__ssvfiscanf_r+0xdd8>
 803a07c:	6a3b      	ldr	r3, [r7, #32]
 803a07e:	e78e      	b.n	8039f9e <__ssvfiscanf_r+0xcf6>
 803a080:	07b1      	lsls	r1, r6, #30
 803a082:	d5fb      	bpl.n	803a07c <__ssvfiscanf_r+0xdd4>
 803a084:	4b15      	ldr	r3, [pc, #84]	@ (803a0dc <__ssvfiscanf_r+0xe34>)
 803a086:	68f9      	ldr	r1, [r7, #12]
 803a088:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803a08a:	4299      	cmp	r1, r3
 803a08c:	697b      	ldr	r3, [r7, #20]
 803a08e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 803a092:	d106      	bne.n	803a0a2 <__ssvfiscanf_r+0xdfa>
 803a094:	f004 fc34 	bl	803e900 <_strtoull_r>
 803a098:	6a3b      	ldr	r3, [r7, #32]
 803a09a:	681b      	ldr	r3, [r3, #0]
 803a09c:	e9c3 0100 	strd	r0, r1, [r3]
 803a0a0:	e7d8      	b.n	803a054 <__ssvfiscanf_r+0xdac>
 803a0a2:	f004 fb81 	bl	803e7a8 <_strtoll_r>
 803a0a6:	e7f7      	b.n	803a098 <__ssvfiscanf_r+0xdf0>
 803a0a8:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 803a0ac:	6818      	ldr	r0, [r3, #0]
 803a0ae:	f7fe f8ed 	bl	803828c <free>
 803a0b2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 803a0b6:	3401      	adds	r4, #1
 803a0b8:	601e      	str	r6, [r3, #0]
 803a0ba:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 803a0be:	f8db 5000 	ldr.w	r5, [fp]
 803a0c2:	42a3      	cmp	r3, r4
 803a0c4:	dcf0      	bgt.n	803a0a8 <__ssvfiscanf_r+0xe00>
 803a0c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803a0ca:	61fb      	str	r3, [r7, #28]
 803a0cc:	f7ff ba46 	b.w	803955c <__ssvfiscanf_r+0x2b4>
 803a0d0:	2400      	movs	r4, #0
 803a0d2:	4626      	mov	r6, r4
 803a0d4:	e7f1      	b.n	803a0ba <__ssvfiscanf_r+0xe12>
 803a0d6:	bf00      	nop
 803a0d8:	08044cf0 	.word	0x08044cf0
 803a0dc:	0803e2f9 	.word	0x0803e2f9

0803a0e0 <_svfprintf_r>:
 803a0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803a0e4:	b0d3      	sub	sp, #332	@ 0x14c
 803a0e6:	468b      	mov	fp, r1
 803a0e8:	4691      	mov	r9, r2
 803a0ea:	461e      	mov	r6, r3
 803a0ec:	9003      	str	r0, [sp, #12]
 803a0ee:	f7fd f80d 	bl	803710c <_localeconv_r>
 803a0f2:	6803      	ldr	r3, [r0, #0]
 803a0f4:	9316      	str	r3, [sp, #88]	@ 0x58
 803a0f6:	4618      	mov	r0, r3
 803a0f8:	f7d6 f8d2 	bl	80102a0 <strlen>
 803a0fc:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 803a100:	900d      	str	r0, [sp, #52]	@ 0x34
 803a102:	061b      	lsls	r3, r3, #24
 803a104:	d515      	bpl.n	803a132 <_svfprintf_r+0x52>
 803a106:	f8db 3010 	ldr.w	r3, [fp, #16]
 803a10a:	b993      	cbnz	r3, 803a132 <_svfprintf_r+0x52>
 803a10c:	9803      	ldr	r0, [sp, #12]
 803a10e:	2140      	movs	r1, #64	@ 0x40
 803a110:	f7fe f8c4 	bl	803829c <_malloc_r>
 803a114:	f8cb 0000 	str.w	r0, [fp]
 803a118:	f8cb 0010 	str.w	r0, [fp, #16]
 803a11c:	b930      	cbnz	r0, 803a12c <_svfprintf_r+0x4c>
 803a11e:	9a03      	ldr	r2, [sp, #12]
 803a120:	230c      	movs	r3, #12
 803a122:	6013      	str	r3, [r2, #0]
 803a124:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803a128:	930f      	str	r3, [sp, #60]	@ 0x3c
 803a12a:	e1f7      	b.n	803a51c <_svfprintf_r+0x43c>
 803a12c:	2340      	movs	r3, #64	@ 0x40
 803a12e:	f8cb 3014 	str.w	r3, [fp, #20]
 803a132:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 803a380 <_svfprintf_r+0x2a0>
 803a136:	2300      	movs	r3, #0
 803a138:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 803a13c:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 803a140:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 803a144:	ac29      	add	r4, sp, #164	@ 0xa4
 803a146:	9426      	str	r4, [sp, #152]	@ 0x98
 803a148:	9304      	str	r3, [sp, #16]
 803a14a:	9309      	str	r3, [sp, #36]	@ 0x24
 803a14c:	9312      	str	r3, [sp, #72]	@ 0x48
 803a14e:	9317      	str	r3, [sp, #92]	@ 0x5c
 803a150:	930f      	str	r3, [sp, #60]	@ 0x3c
 803a152:	464b      	mov	r3, r9
 803a154:	461d      	mov	r5, r3
 803a156:	f813 2b01 	ldrb.w	r2, [r3], #1
 803a15a:	b10a      	cbz	r2, 803a160 <_svfprintf_r+0x80>
 803a15c:	2a25      	cmp	r2, #37	@ 0x25
 803a15e:	d1f9      	bne.n	803a154 <_svfprintf_r+0x74>
 803a160:	ebb5 0709 	subs.w	r7, r5, r9
 803a164:	d00d      	beq.n	803a182 <_svfprintf_r+0xa2>
 803a166:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803a168:	443b      	add	r3, r7
 803a16a:	9328      	str	r3, [sp, #160]	@ 0xa0
 803a16c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803a16e:	3301      	adds	r3, #1
 803a170:	2b07      	cmp	r3, #7
 803a172:	e9c4 9700 	strd	r9, r7, [r4]
 803a176:	9327      	str	r3, [sp, #156]	@ 0x9c
 803a178:	dc75      	bgt.n	803a266 <_svfprintf_r+0x186>
 803a17a:	3408      	adds	r4, #8
 803a17c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803a17e:	443b      	add	r3, r7
 803a180:	930f      	str	r3, [sp, #60]	@ 0x3c
 803a182:	782b      	ldrb	r3, [r5, #0]
 803a184:	2b00      	cmp	r3, #0
 803a186:	f001 8148 	beq.w	803b41a <_svfprintf_r+0x133a>
 803a18a:	2200      	movs	r2, #0
 803a18c:	1c6b      	adds	r3, r5, #1
 803a18e:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 803a192:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 803a196:	920e      	str	r2, [sp, #56]	@ 0x38
 803a198:	4615      	mov	r5, r2
 803a19a:	f813 2b01 	ldrb.w	r2, [r3], #1
 803a19e:	9206      	str	r2, [sp, #24]
 803a1a0:	930c      	str	r3, [sp, #48]	@ 0x30
 803a1a2:	9b06      	ldr	r3, [sp, #24]
 803a1a4:	3b20      	subs	r3, #32
 803a1a6:	2b5a      	cmp	r3, #90	@ 0x5a
 803a1a8:	f200 85a4 	bhi.w	803acf4 <_svfprintf_r+0xc14>
 803a1ac:	e8df f013 	tbh	[pc, r3, lsl #1]
 803a1b0:	05a2009d 	.word	0x05a2009d
 803a1b4:	00a505a2 	.word	0x00a505a2
 803a1b8:	05a205a2 	.word	0x05a205a2
 803a1bc:	008505a2 	.word	0x008505a2
 803a1c0:	05a205a2 	.word	0x05a205a2
 803a1c4:	00b200a8 	.word	0x00b200a8
 803a1c8:	00af05a2 	.word	0x00af05a2
 803a1cc:	05a200b4 	.word	0x05a200b4
 803a1d0:	00d100ce 	.word	0x00d100ce
 803a1d4:	00d100d1 	.word	0x00d100d1
 803a1d8:	00d100d1 	.word	0x00d100d1
 803a1dc:	00d100d1 	.word	0x00d100d1
 803a1e0:	00d100d1 	.word	0x00d100d1
 803a1e4:	05a205a2 	.word	0x05a205a2
 803a1e8:	05a205a2 	.word	0x05a205a2
 803a1ec:	05a205a2 	.word	0x05a205a2
 803a1f0:	014705a2 	.word	0x014705a2
 803a1f4:	010805a2 	.word	0x010805a2
 803a1f8:	0147011b 	.word	0x0147011b
 803a1fc:	01470147 	.word	0x01470147
 803a200:	05a205a2 	.word	0x05a205a2
 803a204:	05a205a2 	.word	0x05a205a2
 803a208:	05a200e2 	.word	0x05a200e2
 803a20c:	049d05a2 	.word	0x049d05a2
 803a210:	05a205a2 	.word	0x05a205a2
 803a214:	04e705a2 	.word	0x04e705a2
 803a218:	050805a2 	.word	0x050805a2
 803a21c:	05a205a2 	.word	0x05a205a2
 803a220:	05a2052a 	.word	0x05a2052a
 803a224:	05a205a2 	.word	0x05a205a2
 803a228:	05a205a2 	.word	0x05a205a2
 803a22c:	05a205a2 	.word	0x05a205a2
 803a230:	014705a2 	.word	0x014705a2
 803a234:	010805a2 	.word	0x010805a2
 803a238:	0147011d 	.word	0x0147011d
 803a23c:	01470147 	.word	0x01470147
 803a240:	011d00ee 	.word	0x011d00ee
 803a244:	05a20102 	.word	0x05a20102
 803a248:	05a200fb 	.word	0x05a200fb
 803a24c:	049f047e 	.word	0x049f047e
 803a250:	010204d6 	.word	0x010204d6
 803a254:	04e705a2 	.word	0x04e705a2
 803a258:	050a009b 	.word	0x050a009b
 803a25c:	05a205a2 	.word	0x05a205a2
 803a260:	05a20065 	.word	0x05a20065
 803a264:	009b      	.short	0x009b
 803a266:	9803      	ldr	r0, [sp, #12]
 803a268:	aa26      	add	r2, sp, #152	@ 0x98
 803a26a:	4659      	mov	r1, fp
 803a26c:	f7fe fac0 	bl	80387f0 <__ssprint_r>
 803a270:	2800      	cmp	r0, #0
 803a272:	f040 814e 	bne.w	803a512 <_svfprintf_r+0x432>
 803a276:	ac29      	add	r4, sp, #164	@ 0xa4
 803a278:	e780      	b.n	803a17c <_svfprintf_r+0x9c>
 803a27a:	4b43      	ldr	r3, [pc, #268]	@ (803a388 <_svfprintf_r+0x2a8>)
 803a27c:	9319      	str	r3, [sp, #100]	@ 0x64
 803a27e:	f015 0320 	ands.w	r3, r5, #32
 803a282:	f000 84c2 	beq.w	803ac0a <_svfprintf_r+0xb2a>
 803a286:	3607      	adds	r6, #7
 803a288:	f026 0307 	bic.w	r3, r6, #7
 803a28c:	461a      	mov	r2, r3
 803a28e:	685f      	ldr	r7, [r3, #4]
 803a290:	f852 6b08 	ldr.w	r6, [r2], #8
 803a294:	9207      	str	r2, [sp, #28]
 803a296:	07eb      	lsls	r3, r5, #31
 803a298:	d50a      	bpl.n	803a2b0 <_svfprintf_r+0x1d0>
 803a29a:	ea56 0307 	orrs.w	r3, r6, r7
 803a29e:	d007      	beq.n	803a2b0 <_svfprintf_r+0x1d0>
 803a2a0:	2330      	movs	r3, #48	@ 0x30
 803a2a2:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 803a2a6:	9b06      	ldr	r3, [sp, #24]
 803a2a8:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 803a2ac:	f045 0502 	orr.w	r5, r5, #2
 803a2b0:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 803a2b4:	2302      	movs	r3, #2
 803a2b6:	f000 bc28 	b.w	803ab0a <_svfprintf_r+0xa2a>
 803a2ba:	9803      	ldr	r0, [sp, #12]
 803a2bc:	f7fc ff26 	bl	803710c <_localeconv_r>
 803a2c0:	6843      	ldr	r3, [r0, #4]
 803a2c2:	9317      	str	r3, [sp, #92]	@ 0x5c
 803a2c4:	4618      	mov	r0, r3
 803a2c6:	f7d5 ffeb 	bl	80102a0 <strlen>
 803a2ca:	9012      	str	r0, [sp, #72]	@ 0x48
 803a2cc:	9803      	ldr	r0, [sp, #12]
 803a2ce:	f7fc ff1d 	bl	803710c <_localeconv_r>
 803a2d2:	6883      	ldr	r3, [r0, #8]
 803a2d4:	9309      	str	r3, [sp, #36]	@ 0x24
 803a2d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 803a2d8:	b12b      	cbz	r3, 803a2e6 <_svfprintf_r+0x206>
 803a2da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803a2dc:	b11b      	cbz	r3, 803a2e6 <_svfprintf_r+0x206>
 803a2de:	781b      	ldrb	r3, [r3, #0]
 803a2e0:	b10b      	cbz	r3, 803a2e6 <_svfprintf_r+0x206>
 803a2e2:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 803a2e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803a2e8:	e757      	b.n	803a19a <_svfprintf_r+0xba>
 803a2ea:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 803a2ee:	2b00      	cmp	r3, #0
 803a2f0:	d1f9      	bne.n	803a2e6 <_svfprintf_r+0x206>
 803a2f2:	2320      	movs	r3, #32
 803a2f4:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 803a2f8:	e7f5      	b.n	803a2e6 <_svfprintf_r+0x206>
 803a2fa:	f045 0501 	orr.w	r5, r5, #1
 803a2fe:	e7f2      	b.n	803a2e6 <_svfprintf_r+0x206>
 803a300:	f856 3b04 	ldr.w	r3, [r6], #4
 803a304:	930e      	str	r3, [sp, #56]	@ 0x38
 803a306:	2b00      	cmp	r3, #0
 803a308:	daed      	bge.n	803a2e6 <_svfprintf_r+0x206>
 803a30a:	425b      	negs	r3, r3
 803a30c:	930e      	str	r3, [sp, #56]	@ 0x38
 803a30e:	f045 0504 	orr.w	r5, r5, #4
 803a312:	e7e8      	b.n	803a2e6 <_svfprintf_r+0x206>
 803a314:	232b      	movs	r3, #43	@ 0x2b
 803a316:	e7ed      	b.n	803a2f4 <_svfprintf_r+0x214>
 803a318:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803a31a:	f813 2b01 	ldrb.w	r2, [r3], #1
 803a31e:	9206      	str	r2, [sp, #24]
 803a320:	2a2a      	cmp	r2, #42	@ 0x2a
 803a322:	d10f      	bne.n	803a344 <_svfprintf_r+0x264>
 803a324:	f856 2b04 	ldr.w	r2, [r6], #4
 803a328:	930c      	str	r3, [sp, #48]	@ 0x30
 803a32a:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 803a32e:	e7da      	b.n	803a2e6 <_svfprintf_r+0x206>
 803a330:	fb01 2808 	mla	r8, r1, r8, r2
 803a334:	f813 2b01 	ldrb.w	r2, [r3], #1
 803a338:	9206      	str	r2, [sp, #24]
 803a33a:	9a06      	ldr	r2, [sp, #24]
 803a33c:	3a30      	subs	r2, #48	@ 0x30
 803a33e:	2a09      	cmp	r2, #9
 803a340:	d9f6      	bls.n	803a330 <_svfprintf_r+0x250>
 803a342:	e72d      	b.n	803a1a0 <_svfprintf_r+0xc0>
 803a344:	f04f 0800 	mov.w	r8, #0
 803a348:	210a      	movs	r1, #10
 803a34a:	e7f6      	b.n	803a33a <_svfprintf_r+0x25a>
 803a34c:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 803a350:	e7c9      	b.n	803a2e6 <_svfprintf_r+0x206>
 803a352:	2200      	movs	r2, #0
 803a354:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803a356:	920e      	str	r2, [sp, #56]	@ 0x38
 803a358:	210a      	movs	r1, #10
 803a35a:	9a06      	ldr	r2, [sp, #24]
 803a35c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 803a35e:	3a30      	subs	r2, #48	@ 0x30
 803a360:	fb01 2200 	mla	r2, r1, r0, r2
 803a364:	920e      	str	r2, [sp, #56]	@ 0x38
 803a366:	f813 2b01 	ldrb.w	r2, [r3], #1
 803a36a:	9206      	str	r2, [sp, #24]
 803a36c:	3a30      	subs	r2, #48	@ 0x30
 803a36e:	2a09      	cmp	r2, #9
 803a370:	d9f3      	bls.n	803a35a <_svfprintf_r+0x27a>
 803a372:	e715      	b.n	803a1a0 <_svfprintf_r+0xc0>
 803a374:	f045 0508 	orr.w	r5, r5, #8
 803a378:	e7b5      	b.n	803a2e6 <_svfprintf_r+0x206>
 803a37a:	bf00      	nop
 803a37c:	f3af 8000 	nop.w
	...
 803a388:	080447ac 	.word	0x080447ac
 803a38c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803a38e:	781b      	ldrb	r3, [r3, #0]
 803a390:	2b68      	cmp	r3, #104	@ 0x68
 803a392:	bf01      	itttt	eq
 803a394:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 803a396:	3301      	addeq	r3, #1
 803a398:	930c      	streq	r3, [sp, #48]	@ 0x30
 803a39a:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 803a39e:	bf18      	it	ne
 803a3a0:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 803a3a4:	e79f      	b.n	803a2e6 <_svfprintf_r+0x206>
 803a3a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803a3a8:	781b      	ldrb	r3, [r3, #0]
 803a3aa:	2b6c      	cmp	r3, #108	@ 0x6c
 803a3ac:	d105      	bne.n	803a3ba <_svfprintf_r+0x2da>
 803a3ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803a3b0:	3301      	adds	r3, #1
 803a3b2:	930c      	str	r3, [sp, #48]	@ 0x30
 803a3b4:	f045 0520 	orr.w	r5, r5, #32
 803a3b8:	e795      	b.n	803a2e6 <_svfprintf_r+0x206>
 803a3ba:	f045 0510 	orr.w	r5, r5, #16
 803a3be:	e792      	b.n	803a2e6 <_svfprintf_r+0x206>
 803a3c0:	4632      	mov	r2, r6
 803a3c2:	f852 3b04 	ldr.w	r3, [r2], #4
 803a3c6:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 803a3ca:	2300      	movs	r3, #0
 803a3cc:	9207      	str	r2, [sp, #28]
 803a3ce:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 803a3d2:	469a      	mov	sl, r3
 803a3d4:	f04f 0801 	mov.w	r8, #1
 803a3d8:	9310      	str	r3, [sp, #64]	@ 0x40
 803a3da:	461f      	mov	r7, r3
 803a3dc:	9308      	str	r3, [sp, #32]
 803a3de:	461e      	mov	r6, r3
 803a3e0:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 803a3e4:	e1d2      	b.n	803a78c <_svfprintf_r+0x6ac>
 803a3e6:	f045 0510 	orr.w	r5, r5, #16
 803a3ea:	06af      	lsls	r7, r5, #26
 803a3ec:	d512      	bpl.n	803a414 <_svfprintf_r+0x334>
 803a3ee:	3607      	adds	r6, #7
 803a3f0:	f026 0307 	bic.w	r3, r6, #7
 803a3f4:	461a      	mov	r2, r3
 803a3f6:	685f      	ldr	r7, [r3, #4]
 803a3f8:	f852 6b08 	ldr.w	r6, [r2], #8
 803a3fc:	9207      	str	r2, [sp, #28]
 803a3fe:	2f00      	cmp	r7, #0
 803a400:	da06      	bge.n	803a410 <_svfprintf_r+0x330>
 803a402:	4276      	negs	r6, r6
 803a404:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 803a408:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 803a40c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 803a410:	2301      	movs	r3, #1
 803a412:	e37d      	b.n	803ab10 <_svfprintf_r+0xa30>
 803a414:	4633      	mov	r3, r6
 803a416:	06ee      	lsls	r6, r5, #27
 803a418:	f853 7b04 	ldr.w	r7, [r3], #4
 803a41c:	9307      	str	r3, [sp, #28]
 803a41e:	d502      	bpl.n	803a426 <_svfprintf_r+0x346>
 803a420:	463e      	mov	r6, r7
 803a422:	17ff      	asrs	r7, r7, #31
 803a424:	e7eb      	b.n	803a3fe <_svfprintf_r+0x31e>
 803a426:	0668      	lsls	r0, r5, #25
 803a428:	d503      	bpl.n	803a432 <_svfprintf_r+0x352>
 803a42a:	b23e      	sxth	r6, r7
 803a42c:	f347 37c0 	sbfx	r7, r7, #15, #1
 803a430:	e7e5      	b.n	803a3fe <_svfprintf_r+0x31e>
 803a432:	05a9      	lsls	r1, r5, #22
 803a434:	d5f4      	bpl.n	803a420 <_svfprintf_r+0x340>
 803a436:	b27e      	sxtb	r6, r7
 803a438:	f347 17c0 	sbfx	r7, r7, #7, #1
 803a43c:	e7df      	b.n	803a3fe <_svfprintf_r+0x31e>
 803a43e:	3607      	adds	r6, #7
 803a440:	f026 0307 	bic.w	r3, r6, #7
 803a444:	ecb3 7b02 	vldmia	r3!, {d7}
 803a448:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 803a44c:	9307      	str	r3, [sp, #28]
 803a44e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 803a450:	931a      	str	r3, [sp, #104]	@ 0x68
 803a452:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 803a454:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 803a458:	931b      	str	r3, [sp, #108]	@ 0x6c
 803a45a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 803a45e:	4b81      	ldr	r3, [pc, #516]	@ (803a664 <_svfprintf_r+0x584>)
 803a460:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 803a464:	f7d6 fb7a 	bl	8010b5c <__aeabi_dcmpun>
 803a468:	bb10      	cbnz	r0, 803a4b0 <_svfprintf_r+0x3d0>
 803a46a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 803a46e:	4b7d      	ldr	r3, [pc, #500]	@ (803a664 <_svfprintf_r+0x584>)
 803a470:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 803a474:	f7d6 fb54 	bl	8010b20 <__aeabi_dcmple>
 803a478:	b9d0      	cbnz	r0, 803a4b0 <_svfprintf_r+0x3d0>
 803a47a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 803a47e:	2200      	movs	r2, #0
 803a480:	2300      	movs	r3, #0
 803a482:	f7d6 fb43 	bl	8010b0c <__aeabi_dcmplt>
 803a486:	b110      	cbz	r0, 803a48e <_svfprintf_r+0x3ae>
 803a488:	232d      	movs	r3, #45	@ 0x2d
 803a48a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 803a48e:	4a76      	ldr	r2, [pc, #472]	@ (803a668 <_svfprintf_r+0x588>)
 803a490:	4b76      	ldr	r3, [pc, #472]	@ (803a66c <_svfprintf_r+0x58c>)
 803a492:	9906      	ldr	r1, [sp, #24]
 803a494:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 803a498:	2947      	cmp	r1, #71	@ 0x47
 803a49a:	bfd4      	ite	le
 803a49c:	4691      	movle	r9, r2
 803a49e:	4699      	movgt	r9, r3
 803a4a0:	f04f 0a00 	mov.w	sl, #0
 803a4a4:	f04f 0803 	mov.w	r8, #3
 803a4a8:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 803a4ac:	f000 bfec 	b.w	803b488 <_svfprintf_r+0x13a8>
 803a4b0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 803a4b4:	4610      	mov	r0, r2
 803a4b6:	4619      	mov	r1, r3
 803a4b8:	f7d6 fb50 	bl	8010b5c <__aeabi_dcmpun>
 803a4bc:	4682      	mov	sl, r0
 803a4be:	b140      	cbz	r0, 803a4d2 <_svfprintf_r+0x3f2>
 803a4c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 803a4c2:	4a6b      	ldr	r2, [pc, #428]	@ (803a670 <_svfprintf_r+0x590>)
 803a4c4:	2b00      	cmp	r3, #0
 803a4c6:	bfbc      	itt	lt
 803a4c8:	232d      	movlt	r3, #45	@ 0x2d
 803a4ca:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 803a4ce:	4b69      	ldr	r3, [pc, #420]	@ (803a674 <_svfprintf_r+0x594>)
 803a4d0:	e7df      	b.n	803a492 <_svfprintf_r+0x3b2>
 803a4d2:	9b06      	ldr	r3, [sp, #24]
 803a4d4:	2b61      	cmp	r3, #97	@ 0x61
 803a4d6:	d025      	beq.n	803a524 <_svfprintf_r+0x444>
 803a4d8:	2b41      	cmp	r3, #65	@ 0x41
 803a4da:	d125      	bne.n	803a528 <_svfprintf_r+0x448>
 803a4dc:	2358      	movs	r3, #88	@ 0x58
 803a4de:	2230      	movs	r2, #48	@ 0x30
 803a4e0:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 803a4e4:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 803a4e8:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 803a4ec:	f045 0502 	orr.w	r5, r5, #2
 803a4f0:	f340 80a5 	ble.w	803a63e <_svfprintf_r+0x55e>
 803a4f4:	9803      	ldr	r0, [sp, #12]
 803a4f6:	f108 0101 	add.w	r1, r8, #1
 803a4fa:	f7fd fecf 	bl	803829c <_malloc_r>
 803a4fe:	4681      	mov	r9, r0
 803a500:	2800      	cmp	r0, #0
 803a502:	f040 80a1 	bne.w	803a648 <_svfprintf_r+0x568>
 803a506:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 803a50a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 803a50e:	f8ab 300c 	strh.w	r3, [fp, #12]
 803a512:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 803a516:	065b      	lsls	r3, r3, #25
 803a518:	f53f ae04 	bmi.w	803a124 <_svfprintf_r+0x44>
 803a51c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 803a51e:	b053      	add	sp, #332	@ 0x14c
 803a520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803a524:	2378      	movs	r3, #120	@ 0x78
 803a526:	e7da      	b.n	803a4de <_svfprintf_r+0x3fe>
 803a528:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 803a52c:	f000 808e 	beq.w	803a64c <_svfprintf_r+0x56c>
 803a530:	9b06      	ldr	r3, [sp, #24]
 803a532:	f023 0320 	bic.w	r3, r3, #32
 803a536:	2b47      	cmp	r3, #71	@ 0x47
 803a538:	d105      	bne.n	803a546 <_svfprintf_r+0x466>
 803a53a:	f1b8 0f00 	cmp.w	r8, #0
 803a53e:	d102      	bne.n	803a546 <_svfprintf_r+0x466>
 803a540:	46c2      	mov	sl, r8
 803a542:	f04f 0801 	mov.w	r8, #1
 803a546:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 803a54a:	9311      	str	r3, [sp, #68]	@ 0x44
 803a54c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 803a54e:	2b00      	cmp	r3, #0
 803a550:	da7f      	bge.n	803a652 <_svfprintf_r+0x572>
 803a552:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 803a554:	9314      	str	r3, [sp, #80]	@ 0x50
 803a556:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 803a558:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 803a55c:	9315      	str	r3, [sp, #84]	@ 0x54
 803a55e:	232d      	movs	r3, #45	@ 0x2d
 803a560:	931c      	str	r3, [sp, #112]	@ 0x70
 803a562:	9b06      	ldr	r3, [sp, #24]
 803a564:	f023 0320 	bic.w	r3, r3, #32
 803a568:	2b41      	cmp	r3, #65	@ 0x41
 803a56a:	9308      	str	r3, [sp, #32]
 803a56c:	f040 81e6 	bne.w	803a93c <_svfprintf_r+0x85c>
 803a570:	a820      	add	r0, sp, #128	@ 0x80
 803a572:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 803a576:	f7fc fe9b 	bl	80372b0 <frexp>
 803a57a:	2200      	movs	r2, #0
 803a57c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 803a580:	ec51 0b10 	vmov	r0, r1, d0
 803a584:	f7d6 f850 	bl	8010628 <__aeabi_dmul>
 803a588:	4602      	mov	r2, r0
 803a58a:	460b      	mov	r3, r1
 803a58c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 803a590:	2200      	movs	r2, #0
 803a592:	2300      	movs	r3, #0
 803a594:	f7d6 fab0 	bl	8010af8 <__aeabi_dcmpeq>
 803a598:	b108      	cbz	r0, 803a59e <_svfprintf_r+0x4be>
 803a59a:	2301      	movs	r3, #1
 803a59c:	9320      	str	r3, [sp, #128]	@ 0x80
 803a59e:	4a36      	ldr	r2, [pc, #216]	@ (803a678 <_svfprintf_r+0x598>)
 803a5a0:	4b36      	ldr	r3, [pc, #216]	@ (803a67c <_svfprintf_r+0x59c>)
 803a5a2:	9906      	ldr	r1, [sp, #24]
 803a5a4:	2961      	cmp	r1, #97	@ 0x61
 803a5a6:	bf18      	it	ne
 803a5a8:	461a      	movne	r2, r3
 803a5aa:	9210      	str	r2, [sp, #64]	@ 0x40
 803a5ac:	f108 37ff 	add.w	r7, r8, #4294967295	@ 0xffffffff
 803a5b0:	464e      	mov	r6, r9
 803a5b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 803a5b6:	4b32      	ldr	r3, [pc, #200]	@ (803a680 <_svfprintf_r+0x5a0>)
 803a5b8:	2200      	movs	r2, #0
 803a5ba:	f7d6 f835 	bl	8010628 <__aeabi_dmul>
 803a5be:	4602      	mov	r2, r0
 803a5c0:	460b      	mov	r3, r1
 803a5c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 803a5c6:	f7d6 fadf 	bl	8010b88 <__aeabi_d2iz>
 803a5ca:	9013      	str	r0, [sp, #76]	@ 0x4c
 803a5cc:	f7d5 ffc2 	bl	8010554 <__aeabi_i2d>
 803a5d0:	4602      	mov	r2, r0
 803a5d2:	460b      	mov	r3, r1
 803a5d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 803a5d8:	f7d5 fe6e 	bl	80102b8 <__aeabi_dsub>
 803a5dc:	4602      	mov	r2, r0
 803a5de:	460b      	mov	r3, r1
 803a5e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 803a5e4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 803a5e6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803a5e8:	5c9b      	ldrb	r3, [r3, r2]
 803a5ea:	f806 3b01 	strb.w	r3, [r6], #1
 803a5ee:	1c7a      	adds	r2, r7, #1
 803a5f0:	d006      	beq.n	803a600 <_svfprintf_r+0x520>
 803a5f2:	1e7b      	subs	r3, r7, #1
 803a5f4:	931d      	str	r3, [sp, #116]	@ 0x74
 803a5f6:	2200      	movs	r2, #0
 803a5f8:	2300      	movs	r3, #0
 803a5fa:	f7d6 fa7d 	bl	8010af8 <__aeabi_dcmpeq>
 803a5fe:	b370      	cbz	r0, 803a65e <_svfprintf_r+0x57e>
 803a600:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 803a604:	4b1f      	ldr	r3, [pc, #124]	@ (803a684 <_svfprintf_r+0x5a4>)
 803a606:	2200      	movs	r2, #0
 803a608:	f7d6 fa9e 	bl	8010b48 <__aeabi_dcmpgt>
 803a60c:	2800      	cmp	r0, #0
 803a60e:	d13b      	bne.n	803a688 <_svfprintf_r+0x5a8>
 803a610:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 803a614:	4b1b      	ldr	r3, [pc, #108]	@ (803a684 <_svfprintf_r+0x5a4>)
 803a616:	2200      	movs	r2, #0
 803a618:	f7d6 fa6e 	bl	8010af8 <__aeabi_dcmpeq>
 803a61c:	b110      	cbz	r0, 803a624 <_svfprintf_r+0x544>
 803a61e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 803a620:	07db      	lsls	r3, r3, #31
 803a622:	d431      	bmi.n	803a688 <_svfprintf_r+0x5a8>
 803a624:	4633      	mov	r3, r6
 803a626:	19f1      	adds	r1, r6, r7
 803a628:	2030      	movs	r0, #48	@ 0x30
 803a62a:	1aca      	subs	r2, r1, r3
 803a62c:	2a00      	cmp	r2, #0
 803a62e:	f280 8182 	bge.w	803a936 <_svfprintf_r+0x856>
 803a632:	1c7b      	adds	r3, r7, #1
 803a634:	3701      	adds	r7, #1
 803a636:	bfb8      	it	lt
 803a638:	2300      	movlt	r3, #0
 803a63a:	441e      	add	r6, r3
 803a63c:	e038      	b.n	803a6b0 <_svfprintf_r+0x5d0>
 803a63e:	f04f 0a00 	mov.w	sl, #0
 803a642:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 803a646:	e77e      	b.n	803a546 <_svfprintf_r+0x466>
 803a648:	4682      	mov	sl, r0
 803a64a:	e77c      	b.n	803a546 <_svfprintf_r+0x466>
 803a64c:	f04f 0806 	mov.w	r8, #6
 803a650:	e779      	b.n	803a546 <_svfprintf_r+0x466>
 803a652:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 803a656:	2300      	movs	r3, #0
 803a658:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 803a65c:	e780      	b.n	803a560 <_svfprintf_r+0x480>
 803a65e:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 803a660:	e7a7      	b.n	803a5b2 <_svfprintf_r+0x4d2>
 803a662:	bf00      	nop
 803a664:	7fefffff 	.word	0x7fefffff
 803a668:	0804479c 	.word	0x0804479c
 803a66c:	080447a0 	.word	0x080447a0
 803a670:	080447a4 	.word	0x080447a4
 803a674:	080447a8 	.word	0x080447a8
 803a678:	080447ac 	.word	0x080447ac
 803a67c:	080447bd 	.word	0x080447bd
 803a680:	40300000 	.word	0x40300000
 803a684:	3fe00000 	.word	0x3fe00000
 803a688:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803a68a:	9624      	str	r6, [sp, #144]	@ 0x90
 803a68c:	7bd9      	ldrb	r1, [r3, #15]
 803a68e:	2030      	movs	r0, #48	@ 0x30
 803a690:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 803a692:	1e53      	subs	r3, r2, #1
 803a694:	9324      	str	r3, [sp, #144]	@ 0x90
 803a696:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 803a69a:	428b      	cmp	r3, r1
 803a69c:	f000 8148 	beq.w	803a930 <_svfprintf_r+0x850>
 803a6a0:	2b39      	cmp	r3, #57	@ 0x39
 803a6a2:	bf0b      	itete	eq
 803a6a4:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 803a6a6:	3301      	addne	r3, #1
 803a6a8:	7a9b      	ldrbeq	r3, [r3, #10]
 803a6aa:	b2db      	uxtbne	r3, r3
 803a6ac:	f802 3c01 	strb.w	r3, [r2, #-1]
 803a6b0:	eba6 0309 	sub.w	r3, r6, r9
 803a6b4:	9304      	str	r3, [sp, #16]
 803a6b6:	9b08      	ldr	r3, [sp, #32]
 803a6b8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 803a6ba:	2b47      	cmp	r3, #71	@ 0x47
 803a6bc:	f040 8187 	bne.w	803a9ce <_svfprintf_r+0x8ee>
 803a6c0:	1cf1      	adds	r1, r6, #3
 803a6c2:	db02      	blt.n	803a6ca <_svfprintf_r+0x5ea>
 803a6c4:	4546      	cmp	r6, r8
 803a6c6:	f340 81a5 	ble.w	803aa14 <_svfprintf_r+0x934>
 803a6ca:	9b06      	ldr	r3, [sp, #24]
 803a6cc:	3b02      	subs	r3, #2
 803a6ce:	9306      	str	r3, [sp, #24]
 803a6d0:	9906      	ldr	r1, [sp, #24]
 803a6d2:	f89d 2018 	ldrb.w	r2, [sp, #24]
 803a6d6:	f021 0120 	bic.w	r1, r1, #32
 803a6da:	2941      	cmp	r1, #65	@ 0x41
 803a6dc:	bf08      	it	eq
 803a6de:	320f      	addeq	r2, #15
 803a6e0:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 803a6e4:	bf06      	itte	eq
 803a6e6:	b2d2      	uxtbeq	r2, r2
 803a6e8:	2101      	moveq	r1, #1
 803a6ea:	2100      	movne	r1, #0
 803a6ec:	2b00      	cmp	r3, #0
 803a6ee:	9320      	str	r3, [sp, #128]	@ 0x80
 803a6f0:	bfb8      	it	lt
 803a6f2:	f1c6 0301 	rsblt	r3, r6, #1
 803a6f6:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 803a6fa:	bfb4      	ite	lt
 803a6fc:	222d      	movlt	r2, #45	@ 0x2d
 803a6fe:	222b      	movge	r2, #43	@ 0x2b
 803a700:	2b09      	cmp	r3, #9
 803a702:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 803a706:	f340 8178 	ble.w	803a9fa <_svfprintf_r+0x91a>
 803a70a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 803a70e:	270a      	movs	r7, #10
 803a710:	4602      	mov	r2, r0
 803a712:	fbb3 f6f7 	udiv	r6, r3, r7
 803a716:	fb07 3116 	mls	r1, r7, r6, r3
 803a71a:	3130      	adds	r1, #48	@ 0x30
 803a71c:	f802 1c01 	strb.w	r1, [r2, #-1]
 803a720:	4619      	mov	r1, r3
 803a722:	2963      	cmp	r1, #99	@ 0x63
 803a724:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 803a728:	4633      	mov	r3, r6
 803a72a:	dcf1      	bgt.n	803a710 <_svfprintf_r+0x630>
 803a72c:	3330      	adds	r3, #48	@ 0x30
 803a72e:	1e91      	subs	r1, r2, #2
 803a730:	f800 3c01 	strb.w	r3, [r0, #-1]
 803a734:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 803a738:	460b      	mov	r3, r1
 803a73a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 803a73e:	4283      	cmp	r3, r0
 803a740:	f0c0 8156 	bcc.w	803a9f0 <_svfprintf_r+0x910>
 803a744:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 803a748:	1a9b      	subs	r3, r3, r2
 803a74a:	4281      	cmp	r1, r0
 803a74c:	bf88      	it	hi
 803a74e:	2300      	movhi	r3, #0
 803a750:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 803a754:	441a      	add	r2, r3
 803a756:	ab22      	add	r3, sp, #136	@ 0x88
 803a758:	1ad3      	subs	r3, r2, r3
 803a75a:	9a04      	ldr	r2, [sp, #16]
 803a75c:	9318      	str	r3, [sp, #96]	@ 0x60
 803a75e:	2a01      	cmp	r2, #1
 803a760:	eb03 0802 	add.w	r8, r3, r2
 803a764:	dc01      	bgt.n	803a76a <_svfprintf_r+0x68a>
 803a766:	07ea      	lsls	r2, r5, #31
 803a768:	d501      	bpl.n	803a76e <_svfprintf_r+0x68e>
 803a76a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803a76c:	4498      	add	r8, r3
 803a76e:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 803a772:	2700      	movs	r7, #0
 803a774:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 803a778:	9311      	str	r3, [sp, #68]	@ 0x44
 803a77a:	9708      	str	r7, [sp, #32]
 803a77c:	463e      	mov	r6, r7
 803a77e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 803a780:	2b00      	cmp	r3, #0
 803a782:	f040 818f 	bne.w	803aaa4 <_svfprintf_r+0x9c4>
 803a786:	2300      	movs	r3, #0
 803a788:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 803a78a:	9310      	str	r3, [sp, #64]	@ 0x40
 803a78c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803a78e:	4543      	cmp	r3, r8
 803a790:	bfb8      	it	lt
 803a792:	4643      	movlt	r3, r8
 803a794:	9311      	str	r3, [sp, #68]	@ 0x44
 803a796:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 803a79a:	b113      	cbz	r3, 803a7a2 <_svfprintf_r+0x6c2>
 803a79c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 803a79e:	3301      	adds	r3, #1
 803a7a0:	9311      	str	r3, [sp, #68]	@ 0x44
 803a7a2:	f015 0302 	ands.w	r3, r5, #2
 803a7a6:	931c      	str	r3, [sp, #112]	@ 0x70
 803a7a8:	bf1e      	ittt	ne
 803a7aa:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 803a7ac:	3302      	addne	r3, #2
 803a7ae:	9311      	strne	r3, [sp, #68]	@ 0x44
 803a7b0:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 803a7b4:	931d      	str	r3, [sp, #116]	@ 0x74
 803a7b6:	d122      	bne.n	803a7fe <_svfprintf_r+0x71e>
 803a7b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803a7ba:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 803a7bc:	1a9b      	subs	r3, r3, r2
 803a7be:	2b00      	cmp	r3, #0
 803a7c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 803a7c2:	dd1c      	ble.n	803a7fe <_svfprintf_r+0x71e>
 803a7c4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 803a7c6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 803a7ca:	2810      	cmp	r0, #16
 803a7cc:	489e      	ldr	r0, [pc, #632]	@ (803aa48 <_svfprintf_r+0x968>)
 803a7ce:	6020      	str	r0, [r4, #0]
 803a7d0:	f102 0201 	add.w	r2, r2, #1
 803a7d4:	f104 0108 	add.w	r1, r4, #8
 803a7d8:	f300 8298 	bgt.w	803ad0c <_svfprintf_r+0xc2c>
 803a7dc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 803a7de:	6060      	str	r0, [r4, #4]
 803a7e0:	4403      	add	r3, r0
 803a7e2:	2a07      	cmp	r2, #7
 803a7e4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 803a7e8:	f340 82a5 	ble.w	803ad36 <_svfprintf_r+0xc56>
 803a7ec:	9803      	ldr	r0, [sp, #12]
 803a7ee:	aa26      	add	r2, sp, #152	@ 0x98
 803a7f0:	4659      	mov	r1, fp
 803a7f2:	f7fd fffd 	bl	80387f0 <__ssprint_r>
 803a7f6:	2800      	cmp	r0, #0
 803a7f8:	f040 85ed 	bne.w	803b3d6 <_svfprintf_r+0x12f6>
 803a7fc:	ac29      	add	r4, sp, #164	@ 0xa4
 803a7fe:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 803a802:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803a804:	b16a      	cbz	r2, 803a822 <_svfprintf_r+0x742>
 803a806:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 803a80a:	6022      	str	r2, [r4, #0]
 803a80c:	2201      	movs	r2, #1
 803a80e:	4413      	add	r3, r2
 803a810:	9328      	str	r3, [sp, #160]	@ 0xa0
 803a812:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803a814:	6062      	str	r2, [r4, #4]
 803a816:	4413      	add	r3, r2
 803a818:	2b07      	cmp	r3, #7
 803a81a:	9327      	str	r3, [sp, #156]	@ 0x9c
 803a81c:	f300 828d 	bgt.w	803ad3a <_svfprintf_r+0xc5a>
 803a820:	3408      	adds	r4, #8
 803a822:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 803a824:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803a826:	b162      	cbz	r2, 803a842 <_svfprintf_r+0x762>
 803a828:	aa1f      	add	r2, sp, #124	@ 0x7c
 803a82a:	6022      	str	r2, [r4, #0]
 803a82c:	2202      	movs	r2, #2
 803a82e:	4413      	add	r3, r2
 803a830:	9328      	str	r3, [sp, #160]	@ 0xa0
 803a832:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803a834:	6062      	str	r2, [r4, #4]
 803a836:	3301      	adds	r3, #1
 803a838:	2b07      	cmp	r3, #7
 803a83a:	9327      	str	r3, [sp, #156]	@ 0x9c
 803a83c:	f300 8287 	bgt.w	803ad4e <_svfprintf_r+0xc6e>
 803a840:	3408      	adds	r4, #8
 803a842:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 803a844:	2b80      	cmp	r3, #128	@ 0x80
 803a846:	d122      	bne.n	803a88e <_svfprintf_r+0x7ae>
 803a848:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803a84a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 803a84c:	1a9b      	subs	r3, r3, r2
 803a84e:	2b00      	cmp	r3, #0
 803a850:	9313      	str	r3, [sp, #76]	@ 0x4c
 803a852:	dd1c      	ble.n	803a88e <_svfprintf_r+0x7ae>
 803a854:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 803a856:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 803a85a:	2810      	cmp	r0, #16
 803a85c:	487b      	ldr	r0, [pc, #492]	@ (803aa4c <_svfprintf_r+0x96c>)
 803a85e:	6020      	str	r0, [r4, #0]
 803a860:	f102 0201 	add.w	r2, r2, #1
 803a864:	f104 0108 	add.w	r1, r4, #8
 803a868:	f300 827b 	bgt.w	803ad62 <_svfprintf_r+0xc82>
 803a86c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 803a86e:	6060      	str	r0, [r4, #4]
 803a870:	4403      	add	r3, r0
 803a872:	2a07      	cmp	r2, #7
 803a874:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 803a878:	f340 8288 	ble.w	803ad8c <_svfprintf_r+0xcac>
 803a87c:	9803      	ldr	r0, [sp, #12]
 803a87e:	aa26      	add	r2, sp, #152	@ 0x98
 803a880:	4659      	mov	r1, fp
 803a882:	f7fd ffb5 	bl	80387f0 <__ssprint_r>
 803a886:	2800      	cmp	r0, #0
 803a888:	f040 85a5 	bne.w	803b3d6 <_svfprintf_r+0x12f6>
 803a88c:	ac29      	add	r4, sp, #164	@ 0xa4
 803a88e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803a890:	eba3 0308 	sub.w	r3, r3, r8
 803a894:	2b00      	cmp	r3, #0
 803a896:	9310      	str	r3, [sp, #64]	@ 0x40
 803a898:	dd1c      	ble.n	803a8d4 <_svfprintf_r+0x7f4>
 803a89a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 803a89c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 803a8a0:	2810      	cmp	r0, #16
 803a8a2:	486a      	ldr	r0, [pc, #424]	@ (803aa4c <_svfprintf_r+0x96c>)
 803a8a4:	6020      	str	r0, [r4, #0]
 803a8a6:	f102 0201 	add.w	r2, r2, #1
 803a8aa:	f104 0108 	add.w	r1, r4, #8
 803a8ae:	f300 826f 	bgt.w	803ad90 <_svfprintf_r+0xcb0>
 803a8b2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 803a8b4:	6060      	str	r0, [r4, #4]
 803a8b6:	4403      	add	r3, r0
 803a8b8:	2a07      	cmp	r2, #7
 803a8ba:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 803a8be:	f340 827c 	ble.w	803adba <_svfprintf_r+0xcda>
 803a8c2:	9803      	ldr	r0, [sp, #12]
 803a8c4:	aa26      	add	r2, sp, #152	@ 0x98
 803a8c6:	4659      	mov	r1, fp
 803a8c8:	f7fd ff92 	bl	80387f0 <__ssprint_r>
 803a8cc:	2800      	cmp	r0, #0
 803a8ce:	f040 8582 	bne.w	803b3d6 <_svfprintf_r+0x12f6>
 803a8d2:	ac29      	add	r4, sp, #164	@ 0xa4
 803a8d4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803a8d6:	9310      	str	r3, [sp, #64]	@ 0x40
 803a8d8:	05ea      	lsls	r2, r5, #23
 803a8da:	f100 8275 	bmi.w	803adc8 <_svfprintf_r+0xce8>
 803a8de:	4443      	add	r3, r8
 803a8e0:	9328      	str	r3, [sp, #160]	@ 0xa0
 803a8e2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803a8e4:	3301      	adds	r3, #1
 803a8e6:	2b07      	cmp	r3, #7
 803a8e8:	e9c4 9800 	strd	r9, r8, [r4]
 803a8ec:	9327      	str	r3, [sp, #156]	@ 0x9c
 803a8ee:	f300 82b1 	bgt.w	803ae54 <_svfprintf_r+0xd74>
 803a8f2:	3408      	adds	r4, #8
 803a8f4:	076a      	lsls	r2, r5, #29
 803a8f6:	f100 8550 	bmi.w	803b39a <_svfprintf_r+0x12ba>
 803a8fa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 803a8fe:	9911      	ldr	r1, [sp, #68]	@ 0x44
 803a900:	428a      	cmp	r2, r1
 803a902:	bfac      	ite	ge
 803a904:	189b      	addge	r3, r3, r2
 803a906:	185b      	addlt	r3, r3, r1
 803a908:	930f      	str	r3, [sp, #60]	@ 0x3c
 803a90a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803a90c:	b13b      	cbz	r3, 803a91e <_svfprintf_r+0x83e>
 803a90e:	9803      	ldr	r0, [sp, #12]
 803a910:	aa26      	add	r2, sp, #152	@ 0x98
 803a912:	4659      	mov	r1, fp
 803a914:	f7fd ff6c 	bl	80387f0 <__ssprint_r>
 803a918:	2800      	cmp	r0, #0
 803a91a:	f040 855c 	bne.w	803b3d6 <_svfprintf_r+0x12f6>
 803a91e:	2300      	movs	r3, #0
 803a920:	9327      	str	r3, [sp, #156]	@ 0x9c
 803a922:	f1ba 0f00 	cmp.w	sl, #0
 803a926:	f040 8572 	bne.w	803b40e <_svfprintf_r+0x132e>
 803a92a:	9e07      	ldr	r6, [sp, #28]
 803a92c:	ac29      	add	r4, sp, #164	@ 0xa4
 803a92e:	e0c6      	b.n	803aabe <_svfprintf_r+0x9de>
 803a930:	f802 0c01 	strb.w	r0, [r2, #-1]
 803a934:	e6ac      	b.n	803a690 <_svfprintf_r+0x5b0>
 803a936:	f803 0b01 	strb.w	r0, [r3], #1
 803a93a:	e676      	b.n	803a62a <_svfprintf_r+0x54a>
 803a93c:	9b08      	ldr	r3, [sp, #32]
 803a93e:	2b46      	cmp	r3, #70	@ 0x46
 803a940:	d005      	beq.n	803a94e <_svfprintf_r+0x86e>
 803a942:	2b45      	cmp	r3, #69	@ 0x45
 803a944:	d11a      	bne.n	803a97c <_svfprintf_r+0x89c>
 803a946:	f108 0601 	add.w	r6, r8, #1
 803a94a:	2102      	movs	r1, #2
 803a94c:	e001      	b.n	803a952 <_svfprintf_r+0x872>
 803a94e:	4646      	mov	r6, r8
 803a950:	2103      	movs	r1, #3
 803a952:	ab24      	add	r3, sp, #144	@ 0x90
 803a954:	9301      	str	r3, [sp, #4]
 803a956:	ab21      	add	r3, sp, #132	@ 0x84
 803a958:	9300      	str	r3, [sp, #0]
 803a95a:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 803a95e:	ab20      	add	r3, sp, #128	@ 0x80
 803a960:	9803      	ldr	r0, [sp, #12]
 803a962:	4632      	mov	r2, r6
 803a964:	f7fc fd80 	bl	8037468 <_dtoa_r>
 803a968:	9b08      	ldr	r3, [sp, #32]
 803a96a:	2b47      	cmp	r3, #71	@ 0x47
 803a96c:	4681      	mov	r9, r0
 803a96e:	d119      	bne.n	803a9a4 <_svfprintf_r+0x8c4>
 803a970:	07e8      	lsls	r0, r5, #31
 803a972:	d405      	bmi.n	803a980 <_svfprintf_r+0x8a0>
 803a974:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 803a976:	eba3 0309 	sub.w	r3, r3, r9
 803a97a:	e69b      	b.n	803a6b4 <_svfprintf_r+0x5d4>
 803a97c:	4646      	mov	r6, r8
 803a97e:	e7e4      	b.n	803a94a <_svfprintf_r+0x86a>
 803a980:	eb09 0706 	add.w	r7, r9, r6
 803a984:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 803a988:	2200      	movs	r2, #0
 803a98a:	2300      	movs	r3, #0
 803a98c:	f7d6 f8b4 	bl	8010af8 <__aeabi_dcmpeq>
 803a990:	b100      	cbz	r0, 803a994 <_svfprintf_r+0x8b4>
 803a992:	9724      	str	r7, [sp, #144]	@ 0x90
 803a994:	2230      	movs	r2, #48	@ 0x30
 803a996:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 803a998:	429f      	cmp	r7, r3
 803a99a:	d9eb      	bls.n	803a974 <_svfprintf_r+0x894>
 803a99c:	1c59      	adds	r1, r3, #1
 803a99e:	9124      	str	r1, [sp, #144]	@ 0x90
 803a9a0:	701a      	strb	r2, [r3, #0]
 803a9a2:	e7f8      	b.n	803a996 <_svfprintf_r+0x8b6>
 803a9a4:	9b08      	ldr	r3, [sp, #32]
 803a9a6:	2b46      	cmp	r3, #70	@ 0x46
 803a9a8:	eb00 0706 	add.w	r7, r0, r6
 803a9ac:	d1ea      	bne.n	803a984 <_svfprintf_r+0x8a4>
 803a9ae:	7803      	ldrb	r3, [r0, #0]
 803a9b0:	2b30      	cmp	r3, #48	@ 0x30
 803a9b2:	d109      	bne.n	803a9c8 <_svfprintf_r+0x8e8>
 803a9b4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 803a9b8:	2200      	movs	r2, #0
 803a9ba:	2300      	movs	r3, #0
 803a9bc:	f7d6 f89c 	bl	8010af8 <__aeabi_dcmpeq>
 803a9c0:	b910      	cbnz	r0, 803a9c8 <_svfprintf_r+0x8e8>
 803a9c2:	f1c6 0601 	rsb	r6, r6, #1
 803a9c6:	9620      	str	r6, [sp, #128]	@ 0x80
 803a9c8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 803a9ca:	441f      	add	r7, r3
 803a9cc:	e7da      	b.n	803a984 <_svfprintf_r+0x8a4>
 803a9ce:	9b08      	ldr	r3, [sp, #32]
 803a9d0:	2b46      	cmp	r3, #70	@ 0x46
 803a9d2:	f47f ae7d 	bne.w	803a6d0 <_svfprintf_r+0x5f0>
 803a9d6:	f005 0301 	and.w	r3, r5, #1
 803a9da:	2e00      	cmp	r6, #0
 803a9dc:	ea43 0308 	orr.w	r3, r3, r8
 803a9e0:	dd25      	ble.n	803aa2e <_svfprintf_r+0x94e>
 803a9e2:	b37b      	cbz	r3, 803aa44 <_svfprintf_r+0x964>
 803a9e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803a9e6:	18f3      	adds	r3, r6, r3
 803a9e8:	4498      	add	r8, r3
 803a9ea:	2366      	movs	r3, #102	@ 0x66
 803a9ec:	9306      	str	r3, [sp, #24]
 803a9ee:	e033      	b.n	803aa58 <_svfprintf_r+0x978>
 803a9f0:	f813 7b01 	ldrb.w	r7, [r3], #1
 803a9f4:	f806 7f01 	strb.w	r7, [r6, #1]!
 803a9f8:	e6a1      	b.n	803a73e <_svfprintf_r+0x65e>
 803a9fa:	b941      	cbnz	r1, 803aa0e <_svfprintf_r+0x92e>
 803a9fc:	2230      	movs	r2, #48	@ 0x30
 803a9fe:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 803aa02:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 803aa06:	3330      	adds	r3, #48	@ 0x30
 803aa08:	f802 3b01 	strb.w	r3, [r2], #1
 803aa0c:	e6a3      	b.n	803a756 <_svfprintf_r+0x676>
 803aa0e:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 803aa12:	e7f8      	b.n	803aa06 <_svfprintf_r+0x926>
 803aa14:	9b04      	ldr	r3, [sp, #16]
 803aa16:	429e      	cmp	r6, r3
 803aa18:	da0d      	bge.n	803aa36 <_svfprintf_r+0x956>
 803aa1a:	9b04      	ldr	r3, [sp, #16]
 803aa1c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 803aa1e:	2e00      	cmp	r6, #0
 803aa20:	eb03 0802 	add.w	r8, r3, r2
 803aa24:	dc0c      	bgt.n	803aa40 <_svfprintf_r+0x960>
 803aa26:	f1c6 0301 	rsb	r3, r6, #1
 803aa2a:	4498      	add	r8, r3
 803aa2c:	e008      	b.n	803aa40 <_svfprintf_r+0x960>
 803aa2e:	b17b      	cbz	r3, 803aa50 <_svfprintf_r+0x970>
 803aa30:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803aa32:	3301      	adds	r3, #1
 803aa34:	e7d8      	b.n	803a9e8 <_svfprintf_r+0x908>
 803aa36:	07eb      	lsls	r3, r5, #31
 803aa38:	d521      	bpl.n	803aa7e <_svfprintf_r+0x99e>
 803aa3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803aa3c:	eb06 0803 	add.w	r8, r6, r3
 803aa40:	2367      	movs	r3, #103	@ 0x67
 803aa42:	e7d3      	b.n	803a9ec <_svfprintf_r+0x90c>
 803aa44:	46b0      	mov	r8, r6
 803aa46:	e7d0      	b.n	803a9ea <_svfprintf_r+0x90a>
 803aa48:	08044d22 	.word	0x08044d22
 803aa4c:	08044d12 	.word	0x08044d12
 803aa50:	2366      	movs	r3, #102	@ 0x66
 803aa52:	9306      	str	r3, [sp, #24]
 803aa54:	f04f 0801 	mov.w	r8, #1
 803aa58:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 803aa5c:	9308      	str	r3, [sp, #32]
 803aa5e:	d01f      	beq.n	803aaa0 <_svfprintf_r+0x9c0>
 803aa60:	2700      	movs	r7, #0
 803aa62:	2e00      	cmp	r6, #0
 803aa64:	9708      	str	r7, [sp, #32]
 803aa66:	f77f ae8a 	ble.w	803a77e <_svfprintf_r+0x69e>
 803aa6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803aa6c:	781b      	ldrb	r3, [r3, #0]
 803aa6e:	2bff      	cmp	r3, #255	@ 0xff
 803aa70:	d107      	bne.n	803aa82 <_svfprintf_r+0x9a2>
 803aa72:	9b08      	ldr	r3, [sp, #32]
 803aa74:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 803aa76:	443b      	add	r3, r7
 803aa78:	fb02 8803 	mla	r8, r2, r3, r8
 803aa7c:	e67f      	b.n	803a77e <_svfprintf_r+0x69e>
 803aa7e:	46b0      	mov	r8, r6
 803aa80:	e7de      	b.n	803aa40 <_svfprintf_r+0x960>
 803aa82:	42b3      	cmp	r3, r6
 803aa84:	daf5      	bge.n	803aa72 <_svfprintf_r+0x992>
 803aa86:	1af6      	subs	r6, r6, r3
 803aa88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803aa8a:	785b      	ldrb	r3, [r3, #1]
 803aa8c:	b133      	cbz	r3, 803aa9c <_svfprintf_r+0x9bc>
 803aa8e:	9b08      	ldr	r3, [sp, #32]
 803aa90:	3301      	adds	r3, #1
 803aa92:	9308      	str	r3, [sp, #32]
 803aa94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803aa96:	3301      	adds	r3, #1
 803aa98:	9309      	str	r3, [sp, #36]	@ 0x24
 803aa9a:	e7e6      	b.n	803aa6a <_svfprintf_r+0x98a>
 803aa9c:	3701      	adds	r7, #1
 803aa9e:	e7e4      	b.n	803aa6a <_svfprintf_r+0x98a>
 803aaa0:	9f08      	ldr	r7, [sp, #32]
 803aaa2:	e66c      	b.n	803a77e <_svfprintf_r+0x69e>
 803aaa4:	232d      	movs	r3, #45	@ 0x2d
 803aaa6:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 803aaaa:	e66c      	b.n	803a786 <_svfprintf_r+0x6a6>
 803aaac:	06af      	lsls	r7, r5, #26
 803aaae:	d50a      	bpl.n	803aac6 <_svfprintf_r+0x9e6>
 803aab0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 803aab2:	6833      	ldr	r3, [r6, #0]
 803aab4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 803aab6:	17d2      	asrs	r2, r2, #31
 803aab8:	e9c3 1200 	strd	r1, r2, [r3]
 803aabc:	3604      	adds	r6, #4
 803aabe:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 803aac2:	f7ff bb46 	b.w	803a152 <_svfprintf_r+0x72>
 803aac6:	06e8      	lsls	r0, r5, #27
 803aac8:	d503      	bpl.n	803aad2 <_svfprintf_r+0x9f2>
 803aaca:	6833      	ldr	r3, [r6, #0]
 803aacc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 803aace:	601a      	str	r2, [r3, #0]
 803aad0:	e7f4      	b.n	803aabc <_svfprintf_r+0x9dc>
 803aad2:	0669      	lsls	r1, r5, #25
 803aad4:	d503      	bpl.n	803aade <_svfprintf_r+0x9fe>
 803aad6:	6833      	ldr	r3, [r6, #0]
 803aad8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 803aada:	801a      	strh	r2, [r3, #0]
 803aadc:	e7ee      	b.n	803aabc <_svfprintf_r+0x9dc>
 803aade:	05aa      	lsls	r2, r5, #22
 803aae0:	d5f3      	bpl.n	803aaca <_svfprintf_r+0x9ea>
 803aae2:	6833      	ldr	r3, [r6, #0]
 803aae4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 803aae6:	701a      	strb	r2, [r3, #0]
 803aae8:	e7e8      	b.n	803aabc <_svfprintf_r+0x9dc>
 803aaea:	f045 0510 	orr.w	r5, r5, #16
 803aaee:	f015 0320 	ands.w	r3, r5, #32
 803aaf2:	d020      	beq.n	803ab36 <_svfprintf_r+0xa56>
 803aaf4:	3607      	adds	r6, #7
 803aaf6:	f026 0307 	bic.w	r3, r6, #7
 803aafa:	461a      	mov	r2, r3
 803aafc:	685f      	ldr	r7, [r3, #4]
 803aafe:	f852 6b08 	ldr.w	r6, [r2], #8
 803ab02:	9207      	str	r2, [sp, #28]
 803ab04:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 803ab08:	2300      	movs	r3, #0
 803ab0a:	2200      	movs	r2, #0
 803ab0c:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 803ab10:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 803ab14:	f000 848c 	beq.w	803b430 <_svfprintf_r+0x1350>
 803ab18:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 803ab1c:	9208      	str	r2, [sp, #32]
 803ab1e:	ea56 0207 	orrs.w	r2, r6, r7
 803ab22:	f040 848a 	bne.w	803b43a <_svfprintf_r+0x135a>
 803ab26:	f1b8 0f00 	cmp.w	r8, #0
 803ab2a:	f000 80db 	beq.w	803ace4 <_svfprintf_r+0xc04>
 803ab2e:	2b01      	cmp	r3, #1
 803ab30:	f040 8486 	bne.w	803b440 <_svfprintf_r+0x1360>
 803ab34:	e083      	b.n	803ac3e <_svfprintf_r+0xb5e>
 803ab36:	4632      	mov	r2, r6
 803ab38:	f015 0710 	ands.w	r7, r5, #16
 803ab3c:	f852 6b04 	ldr.w	r6, [r2], #4
 803ab40:	9207      	str	r2, [sp, #28]
 803ab42:	d001      	beq.n	803ab48 <_svfprintf_r+0xa68>
 803ab44:	461f      	mov	r7, r3
 803ab46:	e7dd      	b.n	803ab04 <_svfprintf_r+0xa24>
 803ab48:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 803ab4c:	d001      	beq.n	803ab52 <_svfprintf_r+0xa72>
 803ab4e:	b2b6      	uxth	r6, r6
 803ab50:	e7d8      	b.n	803ab04 <_svfprintf_r+0xa24>
 803ab52:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 803ab56:	d0d5      	beq.n	803ab04 <_svfprintf_r+0xa24>
 803ab58:	b2f6      	uxtb	r6, r6
 803ab5a:	e7f3      	b.n	803ab44 <_svfprintf_r+0xa64>
 803ab5c:	4633      	mov	r3, r6
 803ab5e:	2278      	movs	r2, #120	@ 0x78
 803ab60:	f853 6b04 	ldr.w	r6, [r3], #4
 803ab64:	9307      	str	r3, [sp, #28]
 803ab66:	f647 0330 	movw	r3, #30768	@ 0x7830
 803ab6a:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 803ab6e:	4b94      	ldr	r3, [pc, #592]	@ (803adc0 <_svfprintf_r+0xce0>)
 803ab70:	9319      	str	r3, [sp, #100]	@ 0x64
 803ab72:	2700      	movs	r7, #0
 803ab74:	f045 0502 	orr.w	r5, r5, #2
 803ab78:	2302      	movs	r3, #2
 803ab7a:	9206      	str	r2, [sp, #24]
 803ab7c:	e7c5      	b.n	803ab0a <_svfprintf_r+0xa2a>
 803ab7e:	4633      	mov	r3, r6
 803ab80:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 803ab84:	f853 9b04 	ldr.w	r9, [r3], #4
 803ab88:	9307      	str	r3, [sp, #28]
 803ab8a:	f04f 0600 	mov.w	r6, #0
 803ab8e:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 803ab92:	d00f      	beq.n	803abb4 <_svfprintf_r+0xad4>
 803ab94:	4642      	mov	r2, r8
 803ab96:	4631      	mov	r1, r6
 803ab98:	4648      	mov	r0, r9
 803ab9a:	f7d5 fb31 	bl	8010200 <memchr>
 803ab9e:	4682      	mov	sl, r0
 803aba0:	2800      	cmp	r0, #0
 803aba2:	f43f ac81 	beq.w	803a4a8 <_svfprintf_r+0x3c8>
 803aba6:	eba0 0809 	sub.w	r8, r0, r9
 803abaa:	46b2      	mov	sl, r6
 803abac:	9610      	str	r6, [sp, #64]	@ 0x40
 803abae:	4637      	mov	r7, r6
 803abb0:	9608      	str	r6, [sp, #32]
 803abb2:	e5eb      	b.n	803a78c <_svfprintf_r+0x6ac>
 803abb4:	4648      	mov	r0, r9
 803abb6:	f7d5 fb73 	bl	80102a0 <strlen>
 803abba:	46b2      	mov	sl, r6
 803abbc:	4680      	mov	r8, r0
 803abbe:	e473      	b.n	803a4a8 <_svfprintf_r+0x3c8>
 803abc0:	f045 0510 	orr.w	r5, r5, #16
 803abc4:	f015 0320 	ands.w	r3, r5, #32
 803abc8:	d009      	beq.n	803abde <_svfprintf_r+0xafe>
 803abca:	3607      	adds	r6, #7
 803abcc:	f026 0307 	bic.w	r3, r6, #7
 803abd0:	461a      	mov	r2, r3
 803abd2:	685f      	ldr	r7, [r3, #4]
 803abd4:	f852 6b08 	ldr.w	r6, [r2], #8
 803abd8:	9207      	str	r2, [sp, #28]
 803abda:	2301      	movs	r3, #1
 803abdc:	e795      	b.n	803ab0a <_svfprintf_r+0xa2a>
 803abde:	4632      	mov	r2, r6
 803abe0:	f015 0710 	ands.w	r7, r5, #16
 803abe4:	f852 6b04 	ldr.w	r6, [r2], #4
 803abe8:	9207      	str	r2, [sp, #28]
 803abea:	d001      	beq.n	803abf0 <_svfprintf_r+0xb10>
 803abec:	461f      	mov	r7, r3
 803abee:	e7f4      	b.n	803abda <_svfprintf_r+0xafa>
 803abf0:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 803abf4:	d001      	beq.n	803abfa <_svfprintf_r+0xb1a>
 803abf6:	b2b6      	uxth	r6, r6
 803abf8:	e7ef      	b.n	803abda <_svfprintf_r+0xafa>
 803abfa:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 803abfe:	d0ec      	beq.n	803abda <_svfprintf_r+0xafa>
 803ac00:	b2f6      	uxtb	r6, r6
 803ac02:	e7f3      	b.n	803abec <_svfprintf_r+0xb0c>
 803ac04:	4b6f      	ldr	r3, [pc, #444]	@ (803adc4 <_svfprintf_r+0xce4>)
 803ac06:	f7ff bb39 	b.w	803a27c <_svfprintf_r+0x19c>
 803ac0a:	4632      	mov	r2, r6
 803ac0c:	f015 0710 	ands.w	r7, r5, #16
 803ac10:	f852 6b04 	ldr.w	r6, [r2], #4
 803ac14:	9207      	str	r2, [sp, #28]
 803ac16:	d002      	beq.n	803ac1e <_svfprintf_r+0xb3e>
 803ac18:	461f      	mov	r7, r3
 803ac1a:	f7ff bb3c 	b.w	803a296 <_svfprintf_r+0x1b6>
 803ac1e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 803ac22:	d002      	beq.n	803ac2a <_svfprintf_r+0xb4a>
 803ac24:	b2b6      	uxth	r6, r6
 803ac26:	f7ff bb36 	b.w	803a296 <_svfprintf_r+0x1b6>
 803ac2a:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 803ac2e:	f43f ab32 	beq.w	803a296 <_svfprintf_r+0x1b6>
 803ac32:	b2f6      	uxtb	r6, r6
 803ac34:	e7f0      	b.n	803ac18 <_svfprintf_r+0xb38>
 803ac36:	2e0a      	cmp	r6, #10
 803ac38:	f177 0300 	sbcs.w	r3, r7, #0
 803ac3c:	d207      	bcs.n	803ac4e <_svfprintf_r+0xb6e>
 803ac3e:	3630      	adds	r6, #48	@ 0x30
 803ac40:	b2f6      	uxtb	r6, r6
 803ac42:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 803ac46:	f20d 1947 	addw	r9, sp, #327	@ 0x147
 803ac4a:	f000 bc15 	b.w	803b478 <_svfprintf_r+0x1398>
 803ac4e:	2300      	movs	r3, #0
 803ac50:	9304      	str	r3, [sp, #16]
 803ac52:	9b08      	ldr	r3, [sp, #32]
 803ac54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 803ac58:	ad52      	add	r5, sp, #328	@ 0x148
 803ac5a:	9310      	str	r3, [sp, #64]	@ 0x40
 803ac5c:	220a      	movs	r2, #10
 803ac5e:	2300      	movs	r3, #0
 803ac60:	4630      	mov	r0, r6
 803ac62:	4639      	mov	r1, r7
 803ac64:	f7d6 f878 	bl	8010d58 <__aeabi_uldivmod>
 803ac68:	9b04      	ldr	r3, [sp, #16]
 803ac6a:	9011      	str	r0, [sp, #68]	@ 0x44
 803ac6c:	3301      	adds	r3, #1
 803ac6e:	9304      	str	r3, [sp, #16]
 803ac70:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803ac72:	3230      	adds	r2, #48	@ 0x30
 803ac74:	468a      	mov	sl, r1
 803ac76:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 803ac7a:	f805 2c01 	strb.w	r2, [r5, #-1]
 803ac7e:	b1d3      	cbz	r3, 803acb6 <_svfprintf_r+0xbd6>
 803ac80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803ac82:	9a04      	ldr	r2, [sp, #16]
 803ac84:	781b      	ldrb	r3, [r3, #0]
 803ac86:	429a      	cmp	r2, r3
 803ac88:	d115      	bne.n	803acb6 <_svfprintf_r+0xbd6>
 803ac8a:	2aff      	cmp	r2, #255	@ 0xff
 803ac8c:	d013      	beq.n	803acb6 <_svfprintf_r+0xbd6>
 803ac8e:	2e0a      	cmp	r6, #10
 803ac90:	f177 0300 	sbcs.w	r3, r7, #0
 803ac94:	d30f      	bcc.n	803acb6 <_svfprintf_r+0xbd6>
 803ac96:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 803ac98:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 803ac9a:	eba9 0903 	sub.w	r9, r9, r3
 803ac9e:	461a      	mov	r2, r3
 803aca0:	4648      	mov	r0, r9
 803aca2:	f7fb f8ec 	bl	8035e7e <strncpy>
 803aca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803aca8:	785b      	ldrb	r3, [r3, #1]
 803acaa:	b11b      	cbz	r3, 803acb4 <_svfprintf_r+0xbd4>
 803acac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803acae:	3301      	adds	r3, #1
 803acb0:	9309      	str	r3, [sp, #36]	@ 0x24
 803acb2:	2300      	movs	r3, #0
 803acb4:	9304      	str	r3, [sp, #16]
 803acb6:	2e0a      	cmp	r6, #10
 803acb8:	f177 0700 	sbcs.w	r7, r7, #0
 803acbc:	f0c0 83dc 	bcc.w	803b478 <_svfprintf_r+0x1398>
 803acc0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 803acc2:	4657      	mov	r7, sl
 803acc4:	464d      	mov	r5, r9
 803acc6:	e7c9      	b.n	803ac5c <_svfprintf_r+0xb7c>
 803acc8:	f006 030f 	and.w	r3, r6, #15
 803accc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 803acce:	0936      	lsrs	r6, r6, #4
 803acd0:	5cd3      	ldrb	r3, [r2, r3]
 803acd2:	f809 3d01 	strb.w	r3, [r9, #-1]!
 803acd6:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 803acda:	093f      	lsrs	r7, r7, #4
 803acdc:	ea56 0307 	orrs.w	r3, r6, r7
 803ace0:	d1f2      	bne.n	803acc8 <_svfprintf_r+0xbe8>
 803ace2:	e3c9      	b.n	803b478 <_svfprintf_r+0x1398>
 803ace4:	b91b      	cbnz	r3, 803acee <_svfprintf_r+0xc0e>
 803ace6:	07e9      	lsls	r1, r5, #31
 803ace8:	d501      	bpl.n	803acee <_svfprintf_r+0xc0e>
 803acea:	2630      	movs	r6, #48	@ 0x30
 803acec:	e7a9      	b.n	803ac42 <_svfprintf_r+0xb62>
 803acee:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 803acf2:	e3c1      	b.n	803b478 <_svfprintf_r+0x1398>
 803acf4:	9b06      	ldr	r3, [sp, #24]
 803acf6:	2b00      	cmp	r3, #0
 803acf8:	f000 838f 	beq.w	803b41a <_svfprintf_r+0x133a>
 803acfc:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 803ad00:	2300      	movs	r3, #0
 803ad02:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 803ad06:	9607      	str	r6, [sp, #28]
 803ad08:	f7ff bb63 	b.w	803a3d2 <_svfprintf_r+0x2f2>
 803ad0c:	2010      	movs	r0, #16
 803ad0e:	4403      	add	r3, r0
 803ad10:	2a07      	cmp	r2, #7
 803ad12:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 803ad16:	6060      	str	r0, [r4, #4]
 803ad18:	dd08      	ble.n	803ad2c <_svfprintf_r+0xc4c>
 803ad1a:	9803      	ldr	r0, [sp, #12]
 803ad1c:	aa26      	add	r2, sp, #152	@ 0x98
 803ad1e:	4659      	mov	r1, fp
 803ad20:	f7fd fd66 	bl	80387f0 <__ssprint_r>
 803ad24:	2800      	cmp	r0, #0
 803ad26:	f040 8356 	bne.w	803b3d6 <_svfprintf_r+0x12f6>
 803ad2a:	a929      	add	r1, sp, #164	@ 0xa4
 803ad2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 803ad2e:	3b10      	subs	r3, #16
 803ad30:	9313      	str	r3, [sp, #76]	@ 0x4c
 803ad32:	460c      	mov	r4, r1
 803ad34:	e546      	b.n	803a7c4 <_svfprintf_r+0x6e4>
 803ad36:	460c      	mov	r4, r1
 803ad38:	e561      	b.n	803a7fe <_svfprintf_r+0x71e>
 803ad3a:	9803      	ldr	r0, [sp, #12]
 803ad3c:	aa26      	add	r2, sp, #152	@ 0x98
 803ad3e:	4659      	mov	r1, fp
 803ad40:	f7fd fd56 	bl	80387f0 <__ssprint_r>
 803ad44:	2800      	cmp	r0, #0
 803ad46:	f040 8346 	bne.w	803b3d6 <_svfprintf_r+0x12f6>
 803ad4a:	ac29      	add	r4, sp, #164	@ 0xa4
 803ad4c:	e569      	b.n	803a822 <_svfprintf_r+0x742>
 803ad4e:	9803      	ldr	r0, [sp, #12]
 803ad50:	aa26      	add	r2, sp, #152	@ 0x98
 803ad52:	4659      	mov	r1, fp
 803ad54:	f7fd fd4c 	bl	80387f0 <__ssprint_r>
 803ad58:	2800      	cmp	r0, #0
 803ad5a:	f040 833c 	bne.w	803b3d6 <_svfprintf_r+0x12f6>
 803ad5e:	ac29      	add	r4, sp, #164	@ 0xa4
 803ad60:	e56f      	b.n	803a842 <_svfprintf_r+0x762>
 803ad62:	2010      	movs	r0, #16
 803ad64:	4403      	add	r3, r0
 803ad66:	2a07      	cmp	r2, #7
 803ad68:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 803ad6c:	6060      	str	r0, [r4, #4]
 803ad6e:	dd08      	ble.n	803ad82 <_svfprintf_r+0xca2>
 803ad70:	9803      	ldr	r0, [sp, #12]
 803ad72:	aa26      	add	r2, sp, #152	@ 0x98
 803ad74:	4659      	mov	r1, fp
 803ad76:	f7fd fd3b 	bl	80387f0 <__ssprint_r>
 803ad7a:	2800      	cmp	r0, #0
 803ad7c:	f040 832b 	bne.w	803b3d6 <_svfprintf_r+0x12f6>
 803ad80:	a929      	add	r1, sp, #164	@ 0xa4
 803ad82:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 803ad84:	3b10      	subs	r3, #16
 803ad86:	9313      	str	r3, [sp, #76]	@ 0x4c
 803ad88:	460c      	mov	r4, r1
 803ad8a:	e563      	b.n	803a854 <_svfprintf_r+0x774>
 803ad8c:	460c      	mov	r4, r1
 803ad8e:	e57e      	b.n	803a88e <_svfprintf_r+0x7ae>
 803ad90:	2010      	movs	r0, #16
 803ad92:	4403      	add	r3, r0
 803ad94:	2a07      	cmp	r2, #7
 803ad96:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 803ad9a:	6060      	str	r0, [r4, #4]
 803ad9c:	dd08      	ble.n	803adb0 <_svfprintf_r+0xcd0>
 803ad9e:	9803      	ldr	r0, [sp, #12]
 803ada0:	aa26      	add	r2, sp, #152	@ 0x98
 803ada2:	4659      	mov	r1, fp
 803ada4:	f7fd fd24 	bl	80387f0 <__ssprint_r>
 803ada8:	2800      	cmp	r0, #0
 803adaa:	f040 8314 	bne.w	803b3d6 <_svfprintf_r+0x12f6>
 803adae:	a929      	add	r1, sp, #164	@ 0xa4
 803adb0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803adb2:	3b10      	subs	r3, #16
 803adb4:	9310      	str	r3, [sp, #64]	@ 0x40
 803adb6:	460c      	mov	r4, r1
 803adb8:	e56f      	b.n	803a89a <_svfprintf_r+0x7ba>
 803adba:	460c      	mov	r4, r1
 803adbc:	e58a      	b.n	803a8d4 <_svfprintf_r+0x7f4>
 803adbe:	bf00      	nop
 803adc0:	080447ac 	.word	0x080447ac
 803adc4:	080447bd 	.word	0x080447bd
 803adc8:	9b06      	ldr	r3, [sp, #24]
 803adca:	2b65      	cmp	r3, #101	@ 0x65
 803adcc:	f340 8246 	ble.w	803b25c <_svfprintf_r+0x117c>
 803add0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 803add4:	2200      	movs	r2, #0
 803add6:	2300      	movs	r3, #0
 803add8:	f7d5 fe8e 	bl	8010af8 <__aeabi_dcmpeq>
 803addc:	2800      	cmp	r0, #0
 803adde:	d06a      	beq.n	803aeb6 <_svfprintf_r+0xdd6>
 803ade0:	4b73      	ldr	r3, [pc, #460]	@ (803afb0 <_svfprintf_r+0xed0>)
 803ade2:	6023      	str	r3, [r4, #0]
 803ade4:	2301      	movs	r3, #1
 803ade6:	6063      	str	r3, [r4, #4]
 803ade8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803adea:	3301      	adds	r3, #1
 803adec:	9328      	str	r3, [sp, #160]	@ 0xa0
 803adee:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803adf0:	3301      	adds	r3, #1
 803adf2:	2b07      	cmp	r3, #7
 803adf4:	9327      	str	r3, [sp, #156]	@ 0x9c
 803adf6:	dc37      	bgt.n	803ae68 <_svfprintf_r+0xd88>
 803adf8:	3408      	adds	r4, #8
 803adfa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 803adfc:	9a04      	ldr	r2, [sp, #16]
 803adfe:	4293      	cmp	r3, r2
 803ae00:	db02      	blt.n	803ae08 <_svfprintf_r+0xd28>
 803ae02:	07ef      	lsls	r7, r5, #31
 803ae04:	f57f ad76 	bpl.w	803a8f4 <_svfprintf_r+0x814>
 803ae08:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 803ae0a:	6023      	str	r3, [r4, #0]
 803ae0c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803ae0e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 803ae10:	6063      	str	r3, [r4, #4]
 803ae12:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803ae14:	4413      	add	r3, r2
 803ae16:	9328      	str	r3, [sp, #160]	@ 0xa0
 803ae18:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803ae1a:	3301      	adds	r3, #1
 803ae1c:	2b07      	cmp	r3, #7
 803ae1e:	9327      	str	r3, [sp, #156]	@ 0x9c
 803ae20:	dc2c      	bgt.n	803ae7c <_svfprintf_r+0xd9c>
 803ae22:	3408      	adds	r4, #8
 803ae24:	9b04      	ldr	r3, [sp, #16]
 803ae26:	1e5e      	subs	r6, r3, #1
 803ae28:	2e00      	cmp	r6, #0
 803ae2a:	f77f ad63 	ble.w	803a8f4 <_svfprintf_r+0x814>
 803ae2e:	4f61      	ldr	r7, [pc, #388]	@ (803afb4 <_svfprintf_r+0xed4>)
 803ae30:	f04f 0810 	mov.w	r8, #16
 803ae34:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 803ae38:	2e10      	cmp	r6, #16
 803ae3a:	f103 0301 	add.w	r3, r3, #1
 803ae3e:	f104 0108 	add.w	r1, r4, #8
 803ae42:	6027      	str	r7, [r4, #0]
 803ae44:	dc24      	bgt.n	803ae90 <_svfprintf_r+0xdb0>
 803ae46:	6066      	str	r6, [r4, #4]
 803ae48:	2b07      	cmp	r3, #7
 803ae4a:	4416      	add	r6, r2
 803ae4c:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 803ae50:	f340 82a0 	ble.w	803b394 <_svfprintf_r+0x12b4>
 803ae54:	9803      	ldr	r0, [sp, #12]
 803ae56:	aa26      	add	r2, sp, #152	@ 0x98
 803ae58:	4659      	mov	r1, fp
 803ae5a:	f7fd fcc9 	bl	80387f0 <__ssprint_r>
 803ae5e:	2800      	cmp	r0, #0
 803ae60:	f040 82b9 	bne.w	803b3d6 <_svfprintf_r+0x12f6>
 803ae64:	ac29      	add	r4, sp, #164	@ 0xa4
 803ae66:	e545      	b.n	803a8f4 <_svfprintf_r+0x814>
 803ae68:	9803      	ldr	r0, [sp, #12]
 803ae6a:	aa26      	add	r2, sp, #152	@ 0x98
 803ae6c:	4659      	mov	r1, fp
 803ae6e:	f7fd fcbf 	bl	80387f0 <__ssprint_r>
 803ae72:	2800      	cmp	r0, #0
 803ae74:	f040 82af 	bne.w	803b3d6 <_svfprintf_r+0x12f6>
 803ae78:	ac29      	add	r4, sp, #164	@ 0xa4
 803ae7a:	e7be      	b.n	803adfa <_svfprintf_r+0xd1a>
 803ae7c:	9803      	ldr	r0, [sp, #12]
 803ae7e:	aa26      	add	r2, sp, #152	@ 0x98
 803ae80:	4659      	mov	r1, fp
 803ae82:	f7fd fcb5 	bl	80387f0 <__ssprint_r>
 803ae86:	2800      	cmp	r0, #0
 803ae88:	f040 82a5 	bne.w	803b3d6 <_svfprintf_r+0x12f6>
 803ae8c:	ac29      	add	r4, sp, #164	@ 0xa4
 803ae8e:	e7c9      	b.n	803ae24 <_svfprintf_r+0xd44>
 803ae90:	3210      	adds	r2, #16
 803ae92:	2b07      	cmp	r3, #7
 803ae94:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 803ae98:	f8c4 8004 	str.w	r8, [r4, #4]
 803ae9c:	dd08      	ble.n	803aeb0 <_svfprintf_r+0xdd0>
 803ae9e:	9803      	ldr	r0, [sp, #12]
 803aea0:	aa26      	add	r2, sp, #152	@ 0x98
 803aea2:	4659      	mov	r1, fp
 803aea4:	f7fd fca4 	bl	80387f0 <__ssprint_r>
 803aea8:	2800      	cmp	r0, #0
 803aeaa:	f040 8294 	bne.w	803b3d6 <_svfprintf_r+0x12f6>
 803aeae:	a929      	add	r1, sp, #164	@ 0xa4
 803aeb0:	3e10      	subs	r6, #16
 803aeb2:	460c      	mov	r4, r1
 803aeb4:	e7be      	b.n	803ae34 <_svfprintf_r+0xd54>
 803aeb6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 803aeb8:	2b00      	cmp	r3, #0
 803aeba:	dc7d      	bgt.n	803afb8 <_svfprintf_r+0xed8>
 803aebc:	4b3c      	ldr	r3, [pc, #240]	@ (803afb0 <_svfprintf_r+0xed0>)
 803aebe:	6023      	str	r3, [r4, #0]
 803aec0:	2301      	movs	r3, #1
 803aec2:	6063      	str	r3, [r4, #4]
 803aec4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803aec6:	3301      	adds	r3, #1
 803aec8:	9328      	str	r3, [sp, #160]	@ 0xa0
 803aeca:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803aecc:	3301      	adds	r3, #1
 803aece:	2b07      	cmp	r3, #7
 803aed0:	9327      	str	r3, [sp, #156]	@ 0x9c
 803aed2:	dc46      	bgt.n	803af62 <_svfprintf_r+0xe82>
 803aed4:	3408      	adds	r4, #8
 803aed6:	9904      	ldr	r1, [sp, #16]
 803aed8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 803aeda:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 803aedc:	430b      	orrs	r3, r1
 803aede:	f005 0101 	and.w	r1, r5, #1
 803aee2:	430b      	orrs	r3, r1
 803aee4:	f43f ad06 	beq.w	803a8f4 <_svfprintf_r+0x814>
 803aee8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 803aeea:	6023      	str	r3, [r4, #0]
 803aeec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803aeee:	6063      	str	r3, [r4, #4]
 803aef0:	441a      	add	r2, r3
 803aef2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803aef4:	9228      	str	r2, [sp, #160]	@ 0xa0
 803aef6:	3301      	adds	r3, #1
 803aef8:	2b07      	cmp	r3, #7
 803aefa:	9327      	str	r3, [sp, #156]	@ 0x9c
 803aefc:	dc3b      	bgt.n	803af76 <_svfprintf_r+0xe96>
 803aefe:	f104 0308 	add.w	r3, r4, #8
 803af02:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 803af04:	2e00      	cmp	r6, #0
 803af06:	da1b      	bge.n	803af40 <_svfprintf_r+0xe60>
 803af08:	4f2a      	ldr	r7, [pc, #168]	@ (803afb4 <_svfprintf_r+0xed4>)
 803af0a:	4276      	negs	r6, r6
 803af0c:	461a      	mov	r2, r3
 803af0e:	2410      	movs	r4, #16
 803af10:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 803af14:	2e10      	cmp	r6, #16
 803af16:	f101 0101 	add.w	r1, r1, #1
 803af1a:	f103 0308 	add.w	r3, r3, #8
 803af1e:	6017      	str	r7, [r2, #0]
 803af20:	dc33      	bgt.n	803af8a <_svfprintf_r+0xeaa>
 803af22:	6056      	str	r6, [r2, #4]
 803af24:	2907      	cmp	r1, #7
 803af26:	4406      	add	r6, r0
 803af28:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 803af2c:	dd08      	ble.n	803af40 <_svfprintf_r+0xe60>
 803af2e:	9803      	ldr	r0, [sp, #12]
 803af30:	aa26      	add	r2, sp, #152	@ 0x98
 803af32:	4659      	mov	r1, fp
 803af34:	f7fd fc5c 	bl	80387f0 <__ssprint_r>
 803af38:	2800      	cmp	r0, #0
 803af3a:	f040 824c 	bne.w	803b3d6 <_svfprintf_r+0x12f6>
 803af3e:	ab29      	add	r3, sp, #164	@ 0xa4
 803af40:	9a04      	ldr	r2, [sp, #16]
 803af42:	9904      	ldr	r1, [sp, #16]
 803af44:	605a      	str	r2, [r3, #4]
 803af46:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 803af48:	f8c3 9000 	str.w	r9, [r3]
 803af4c:	440a      	add	r2, r1
 803af4e:	9228      	str	r2, [sp, #160]	@ 0xa0
 803af50:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 803af52:	3201      	adds	r2, #1
 803af54:	2a07      	cmp	r2, #7
 803af56:	9227      	str	r2, [sp, #156]	@ 0x9c
 803af58:	f73f af7c 	bgt.w	803ae54 <_svfprintf_r+0xd74>
 803af5c:	f103 0408 	add.w	r4, r3, #8
 803af60:	e4c8      	b.n	803a8f4 <_svfprintf_r+0x814>
 803af62:	9803      	ldr	r0, [sp, #12]
 803af64:	aa26      	add	r2, sp, #152	@ 0x98
 803af66:	4659      	mov	r1, fp
 803af68:	f7fd fc42 	bl	80387f0 <__ssprint_r>
 803af6c:	2800      	cmp	r0, #0
 803af6e:	f040 8232 	bne.w	803b3d6 <_svfprintf_r+0x12f6>
 803af72:	ac29      	add	r4, sp, #164	@ 0xa4
 803af74:	e7af      	b.n	803aed6 <_svfprintf_r+0xdf6>
 803af76:	9803      	ldr	r0, [sp, #12]
 803af78:	aa26      	add	r2, sp, #152	@ 0x98
 803af7a:	4659      	mov	r1, fp
 803af7c:	f7fd fc38 	bl	80387f0 <__ssprint_r>
 803af80:	2800      	cmp	r0, #0
 803af82:	f040 8228 	bne.w	803b3d6 <_svfprintf_r+0x12f6>
 803af86:	ab29      	add	r3, sp, #164	@ 0xa4
 803af88:	e7bb      	b.n	803af02 <_svfprintf_r+0xe22>
 803af8a:	3010      	adds	r0, #16
 803af8c:	2907      	cmp	r1, #7
 803af8e:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 803af92:	6054      	str	r4, [r2, #4]
 803af94:	dd08      	ble.n	803afa8 <_svfprintf_r+0xec8>
 803af96:	9803      	ldr	r0, [sp, #12]
 803af98:	aa26      	add	r2, sp, #152	@ 0x98
 803af9a:	4659      	mov	r1, fp
 803af9c:	f7fd fc28 	bl	80387f0 <__ssprint_r>
 803afa0:	2800      	cmp	r0, #0
 803afa2:	f040 8218 	bne.w	803b3d6 <_svfprintf_r+0x12f6>
 803afa6:	ab29      	add	r3, sp, #164	@ 0xa4
 803afa8:	3e10      	subs	r6, #16
 803afaa:	461a      	mov	r2, r3
 803afac:	e7b0      	b.n	803af10 <_svfprintf_r+0xe30>
 803afae:	bf00      	nop
 803afb0:	080447ce 	.word	0x080447ce
 803afb4:	08044d12 	.word	0x08044d12
 803afb8:	9b04      	ldr	r3, [sp, #16]
 803afba:	444b      	add	r3, r9
 803afbc:	9306      	str	r3, [sp, #24]
 803afbe:	9b04      	ldr	r3, [sp, #16]
 803afc0:	42b3      	cmp	r3, r6
 803afc2:	bfa8      	it	ge
 803afc4:	4633      	movge	r3, r6
 803afc6:	2b00      	cmp	r3, #0
 803afc8:	4698      	mov	r8, r3
 803afca:	dd0b      	ble.n	803afe4 <_svfprintf_r+0xf04>
 803afcc:	e9c4 9300 	strd	r9, r3, [r4]
 803afd0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803afd2:	4443      	add	r3, r8
 803afd4:	9328      	str	r3, [sp, #160]	@ 0xa0
 803afd6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803afd8:	3301      	adds	r3, #1
 803afda:	2b07      	cmp	r3, #7
 803afdc:	9327      	str	r3, [sp, #156]	@ 0x9c
 803afde:	f300 8089 	bgt.w	803b0f4 <_svfprintf_r+0x1014>
 803afe2:	3408      	adds	r4, #8
 803afe4:	4643      	mov	r3, r8
 803afe6:	2b00      	cmp	r3, #0
 803afe8:	bfac      	ite	ge
 803afea:	eba6 0808 	subge.w	r8, r6, r8
 803afee:	46b0      	movlt	r8, r6
 803aff0:	f1b8 0f00 	cmp.w	r8, #0
 803aff4:	dd1b      	ble.n	803b02e <_svfprintf_r+0xf4e>
 803aff6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 803affa:	4897      	ldr	r0, [pc, #604]	@ (803b258 <_svfprintf_r+0x1178>)
 803affc:	6020      	str	r0, [r4, #0]
 803affe:	f1b8 0f10 	cmp.w	r8, #16
 803b002:	f102 0201 	add.w	r2, r2, #1
 803b006:	f104 0108 	add.w	r1, r4, #8
 803b00a:	dc7d      	bgt.n	803b108 <_svfprintf_r+0x1028>
 803b00c:	4443      	add	r3, r8
 803b00e:	2a07      	cmp	r2, #7
 803b010:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 803b014:	f8c4 8004 	str.w	r8, [r4, #4]
 803b018:	f340 808a 	ble.w	803b130 <_svfprintf_r+0x1050>
 803b01c:	9803      	ldr	r0, [sp, #12]
 803b01e:	aa26      	add	r2, sp, #152	@ 0x98
 803b020:	4659      	mov	r1, fp
 803b022:	f7fd fbe5 	bl	80387f0 <__ssprint_r>
 803b026:	2800      	cmp	r0, #0
 803b028:	f040 81d5 	bne.w	803b3d6 <_svfprintf_r+0x12f6>
 803b02c:	ac29      	add	r4, sp, #164	@ 0xa4
 803b02e:	eb09 0806 	add.w	r8, r9, r6
 803b032:	056e      	lsls	r6, r5, #21
 803b034:	d508      	bpl.n	803b048 <_svfprintf_r+0xf68>
 803b036:	9b08      	ldr	r3, [sp, #32]
 803b038:	2b00      	cmp	r3, #0
 803b03a:	d17b      	bne.n	803b134 <_svfprintf_r+0x1054>
 803b03c:	2f00      	cmp	r7, #0
 803b03e:	d17b      	bne.n	803b138 <_svfprintf_r+0x1058>
 803b040:	9b06      	ldr	r3, [sp, #24]
 803b042:	4598      	cmp	r8, r3
 803b044:	bf28      	it	cs
 803b046:	4698      	movcs	r8, r3
 803b048:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 803b04a:	9a04      	ldr	r2, [sp, #16]
 803b04c:	4293      	cmp	r3, r2
 803b04e:	db01      	blt.n	803b054 <_svfprintf_r+0xf74>
 803b050:	07e8      	lsls	r0, r5, #31
 803b052:	d50e      	bpl.n	803b072 <_svfprintf_r+0xf92>
 803b054:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 803b056:	6023      	str	r3, [r4, #0]
 803b058:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803b05a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 803b05c:	6063      	str	r3, [r4, #4]
 803b05e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803b060:	4413      	add	r3, r2
 803b062:	9328      	str	r3, [sp, #160]	@ 0xa0
 803b064:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803b066:	3301      	adds	r3, #1
 803b068:	2b07      	cmp	r3, #7
 803b06a:	9327      	str	r3, [sp, #156]	@ 0x9c
 803b06c:	f300 80df 	bgt.w	803b22e <_svfprintf_r+0x114e>
 803b070:	3408      	adds	r4, #8
 803b072:	9b04      	ldr	r3, [sp, #16]
 803b074:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 803b076:	1bdf      	subs	r7, r3, r7
 803b078:	9b06      	ldr	r3, [sp, #24]
 803b07a:	eba3 0308 	sub.w	r3, r3, r8
 803b07e:	429f      	cmp	r7, r3
 803b080:	bfa8      	it	ge
 803b082:	461f      	movge	r7, r3
 803b084:	2f00      	cmp	r7, #0
 803b086:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803b088:	dd0a      	ble.n	803b0a0 <_svfprintf_r+0xfc0>
 803b08a:	443b      	add	r3, r7
 803b08c:	9328      	str	r3, [sp, #160]	@ 0xa0
 803b08e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803b090:	3301      	adds	r3, #1
 803b092:	2b07      	cmp	r3, #7
 803b094:	e9c4 8700 	strd	r8, r7, [r4]
 803b098:	9327      	str	r3, [sp, #156]	@ 0x9c
 803b09a:	f300 80d2 	bgt.w	803b242 <_svfprintf_r+0x1162>
 803b09e:	3408      	adds	r4, #8
 803b0a0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 803b0a2:	9b04      	ldr	r3, [sp, #16]
 803b0a4:	2f00      	cmp	r7, #0
 803b0a6:	eba3 0606 	sub.w	r6, r3, r6
 803b0aa:	bfa8      	it	ge
 803b0ac:	1bf6      	subge	r6, r6, r7
 803b0ae:	2e00      	cmp	r6, #0
 803b0b0:	f77f ac20 	ble.w	803a8f4 <_svfprintf_r+0x814>
 803b0b4:	4f68      	ldr	r7, [pc, #416]	@ (803b258 <_svfprintf_r+0x1178>)
 803b0b6:	f04f 0810 	mov.w	r8, #16
 803b0ba:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 803b0be:	2e10      	cmp	r6, #16
 803b0c0:	f103 0301 	add.w	r3, r3, #1
 803b0c4:	f104 0108 	add.w	r1, r4, #8
 803b0c8:	6027      	str	r7, [r4, #0]
 803b0ca:	f77f aebc 	ble.w	803ae46 <_svfprintf_r+0xd66>
 803b0ce:	3210      	adds	r2, #16
 803b0d0:	2b07      	cmp	r3, #7
 803b0d2:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 803b0d6:	f8c4 8004 	str.w	r8, [r4, #4]
 803b0da:	dd08      	ble.n	803b0ee <_svfprintf_r+0x100e>
 803b0dc:	9803      	ldr	r0, [sp, #12]
 803b0de:	aa26      	add	r2, sp, #152	@ 0x98
 803b0e0:	4659      	mov	r1, fp
 803b0e2:	f7fd fb85 	bl	80387f0 <__ssprint_r>
 803b0e6:	2800      	cmp	r0, #0
 803b0e8:	f040 8175 	bne.w	803b3d6 <_svfprintf_r+0x12f6>
 803b0ec:	a929      	add	r1, sp, #164	@ 0xa4
 803b0ee:	3e10      	subs	r6, #16
 803b0f0:	460c      	mov	r4, r1
 803b0f2:	e7e2      	b.n	803b0ba <_svfprintf_r+0xfda>
 803b0f4:	9803      	ldr	r0, [sp, #12]
 803b0f6:	aa26      	add	r2, sp, #152	@ 0x98
 803b0f8:	4659      	mov	r1, fp
 803b0fa:	f7fd fb79 	bl	80387f0 <__ssprint_r>
 803b0fe:	2800      	cmp	r0, #0
 803b100:	f040 8169 	bne.w	803b3d6 <_svfprintf_r+0x12f6>
 803b104:	ac29      	add	r4, sp, #164	@ 0xa4
 803b106:	e76d      	b.n	803afe4 <_svfprintf_r+0xf04>
 803b108:	2010      	movs	r0, #16
 803b10a:	4403      	add	r3, r0
 803b10c:	2a07      	cmp	r2, #7
 803b10e:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 803b112:	6060      	str	r0, [r4, #4]
 803b114:	dd08      	ble.n	803b128 <_svfprintf_r+0x1048>
 803b116:	9803      	ldr	r0, [sp, #12]
 803b118:	aa26      	add	r2, sp, #152	@ 0x98
 803b11a:	4659      	mov	r1, fp
 803b11c:	f7fd fb68 	bl	80387f0 <__ssprint_r>
 803b120:	2800      	cmp	r0, #0
 803b122:	f040 8158 	bne.w	803b3d6 <_svfprintf_r+0x12f6>
 803b126:	a929      	add	r1, sp, #164	@ 0xa4
 803b128:	f1a8 0810 	sub.w	r8, r8, #16
 803b12c:	460c      	mov	r4, r1
 803b12e:	e762      	b.n	803aff6 <_svfprintf_r+0xf16>
 803b130:	460c      	mov	r4, r1
 803b132:	e77c      	b.n	803b02e <_svfprintf_r+0xf4e>
 803b134:	2f00      	cmp	r7, #0
 803b136:	d04a      	beq.n	803b1ce <_svfprintf_r+0x10ee>
 803b138:	3f01      	subs	r7, #1
 803b13a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 803b13c:	6023      	str	r3, [r4, #0]
 803b13e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 803b140:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 803b142:	6063      	str	r3, [r4, #4]
 803b144:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803b146:	4413      	add	r3, r2
 803b148:	9328      	str	r3, [sp, #160]	@ 0xa0
 803b14a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803b14c:	3301      	adds	r3, #1
 803b14e:	2b07      	cmp	r3, #7
 803b150:	9327      	str	r3, [sp, #156]	@ 0x9c
 803b152:	dc43      	bgt.n	803b1dc <_svfprintf_r+0x10fc>
 803b154:	3408      	adds	r4, #8
 803b156:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803b158:	781a      	ldrb	r2, [r3, #0]
 803b15a:	9b06      	ldr	r3, [sp, #24]
 803b15c:	eba3 0308 	sub.w	r3, r3, r8
 803b160:	429a      	cmp	r2, r3
 803b162:	bfa8      	it	ge
 803b164:	461a      	movge	r2, r3
 803b166:	2a00      	cmp	r2, #0
 803b168:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803b16a:	4691      	mov	r9, r2
 803b16c:	dd09      	ble.n	803b182 <_svfprintf_r+0x10a2>
 803b16e:	4413      	add	r3, r2
 803b170:	9328      	str	r3, [sp, #160]	@ 0xa0
 803b172:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803b174:	3301      	adds	r3, #1
 803b176:	2b07      	cmp	r3, #7
 803b178:	e9c4 8200 	strd	r8, r2, [r4]
 803b17c:	9327      	str	r3, [sp, #156]	@ 0x9c
 803b17e:	dc37      	bgt.n	803b1f0 <_svfprintf_r+0x1110>
 803b180:	3408      	adds	r4, #8
 803b182:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803b184:	781e      	ldrb	r6, [r3, #0]
 803b186:	f1b9 0f00 	cmp.w	r9, #0
 803b18a:	bfa8      	it	ge
 803b18c:	eba6 0609 	subge.w	r6, r6, r9
 803b190:	2e00      	cmp	r6, #0
 803b192:	dd18      	ble.n	803b1c6 <_svfprintf_r+0x10e6>
 803b194:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 803b198:	482f      	ldr	r0, [pc, #188]	@ (803b258 <_svfprintf_r+0x1178>)
 803b19a:	6020      	str	r0, [r4, #0]
 803b19c:	2e10      	cmp	r6, #16
 803b19e:	f103 0301 	add.w	r3, r3, #1
 803b1a2:	f104 0108 	add.w	r1, r4, #8
 803b1a6:	dc2d      	bgt.n	803b204 <_svfprintf_r+0x1124>
 803b1a8:	6066      	str	r6, [r4, #4]
 803b1aa:	2b07      	cmp	r3, #7
 803b1ac:	4416      	add	r6, r2
 803b1ae:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 803b1b2:	dd3a      	ble.n	803b22a <_svfprintf_r+0x114a>
 803b1b4:	9803      	ldr	r0, [sp, #12]
 803b1b6:	aa26      	add	r2, sp, #152	@ 0x98
 803b1b8:	4659      	mov	r1, fp
 803b1ba:	f7fd fb19 	bl	80387f0 <__ssprint_r>
 803b1be:	2800      	cmp	r0, #0
 803b1c0:	f040 8109 	bne.w	803b3d6 <_svfprintf_r+0x12f6>
 803b1c4:	ac29      	add	r4, sp, #164	@ 0xa4
 803b1c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803b1c8:	781b      	ldrb	r3, [r3, #0]
 803b1ca:	4498      	add	r8, r3
 803b1cc:	e733      	b.n	803b036 <_svfprintf_r+0xf56>
 803b1ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803b1d0:	3b01      	subs	r3, #1
 803b1d2:	9309      	str	r3, [sp, #36]	@ 0x24
 803b1d4:	9b08      	ldr	r3, [sp, #32]
 803b1d6:	3b01      	subs	r3, #1
 803b1d8:	9308      	str	r3, [sp, #32]
 803b1da:	e7ae      	b.n	803b13a <_svfprintf_r+0x105a>
 803b1dc:	9803      	ldr	r0, [sp, #12]
 803b1de:	aa26      	add	r2, sp, #152	@ 0x98
 803b1e0:	4659      	mov	r1, fp
 803b1e2:	f7fd fb05 	bl	80387f0 <__ssprint_r>
 803b1e6:	2800      	cmp	r0, #0
 803b1e8:	f040 80f5 	bne.w	803b3d6 <_svfprintf_r+0x12f6>
 803b1ec:	ac29      	add	r4, sp, #164	@ 0xa4
 803b1ee:	e7b2      	b.n	803b156 <_svfprintf_r+0x1076>
 803b1f0:	9803      	ldr	r0, [sp, #12]
 803b1f2:	aa26      	add	r2, sp, #152	@ 0x98
 803b1f4:	4659      	mov	r1, fp
 803b1f6:	f7fd fafb 	bl	80387f0 <__ssprint_r>
 803b1fa:	2800      	cmp	r0, #0
 803b1fc:	f040 80eb 	bne.w	803b3d6 <_svfprintf_r+0x12f6>
 803b200:	ac29      	add	r4, sp, #164	@ 0xa4
 803b202:	e7be      	b.n	803b182 <_svfprintf_r+0x10a2>
 803b204:	2010      	movs	r0, #16
 803b206:	4402      	add	r2, r0
 803b208:	2b07      	cmp	r3, #7
 803b20a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 803b20e:	6060      	str	r0, [r4, #4]
 803b210:	dd08      	ble.n	803b224 <_svfprintf_r+0x1144>
 803b212:	9803      	ldr	r0, [sp, #12]
 803b214:	aa26      	add	r2, sp, #152	@ 0x98
 803b216:	4659      	mov	r1, fp
 803b218:	f7fd faea 	bl	80387f0 <__ssprint_r>
 803b21c:	2800      	cmp	r0, #0
 803b21e:	f040 80da 	bne.w	803b3d6 <_svfprintf_r+0x12f6>
 803b222:	a929      	add	r1, sp, #164	@ 0xa4
 803b224:	3e10      	subs	r6, #16
 803b226:	460c      	mov	r4, r1
 803b228:	e7b4      	b.n	803b194 <_svfprintf_r+0x10b4>
 803b22a:	460c      	mov	r4, r1
 803b22c:	e7cb      	b.n	803b1c6 <_svfprintf_r+0x10e6>
 803b22e:	9803      	ldr	r0, [sp, #12]
 803b230:	aa26      	add	r2, sp, #152	@ 0x98
 803b232:	4659      	mov	r1, fp
 803b234:	f7fd fadc 	bl	80387f0 <__ssprint_r>
 803b238:	2800      	cmp	r0, #0
 803b23a:	f040 80cc 	bne.w	803b3d6 <_svfprintf_r+0x12f6>
 803b23e:	ac29      	add	r4, sp, #164	@ 0xa4
 803b240:	e717      	b.n	803b072 <_svfprintf_r+0xf92>
 803b242:	9803      	ldr	r0, [sp, #12]
 803b244:	aa26      	add	r2, sp, #152	@ 0x98
 803b246:	4659      	mov	r1, fp
 803b248:	f7fd fad2 	bl	80387f0 <__ssprint_r>
 803b24c:	2800      	cmp	r0, #0
 803b24e:	f040 80c2 	bne.w	803b3d6 <_svfprintf_r+0x12f6>
 803b252:	ac29      	add	r4, sp, #164	@ 0xa4
 803b254:	e724      	b.n	803b0a0 <_svfprintf_r+0xfc0>
 803b256:	bf00      	nop
 803b258:	08044d12 	.word	0x08044d12
 803b25c:	9904      	ldr	r1, [sp, #16]
 803b25e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803b260:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 803b262:	2901      	cmp	r1, #1
 803b264:	f103 0301 	add.w	r3, r3, #1
 803b268:	f102 0201 	add.w	r2, r2, #1
 803b26c:	f104 0608 	add.w	r6, r4, #8
 803b270:	dc02      	bgt.n	803b278 <_svfprintf_r+0x1198>
 803b272:	07e9      	lsls	r1, r5, #31
 803b274:	f140 8083 	bpl.w	803b37e <_svfprintf_r+0x129e>
 803b278:	2101      	movs	r1, #1
 803b27a:	2a07      	cmp	r2, #7
 803b27c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 803b280:	f8c4 9000 	str.w	r9, [r4]
 803b284:	6061      	str	r1, [r4, #4]
 803b286:	dd08      	ble.n	803b29a <_svfprintf_r+0x11ba>
 803b288:	9803      	ldr	r0, [sp, #12]
 803b28a:	aa26      	add	r2, sp, #152	@ 0x98
 803b28c:	4659      	mov	r1, fp
 803b28e:	f7fd faaf 	bl	80387f0 <__ssprint_r>
 803b292:	2800      	cmp	r0, #0
 803b294:	f040 809f 	bne.w	803b3d6 <_svfprintf_r+0x12f6>
 803b298:	ae29      	add	r6, sp, #164	@ 0xa4
 803b29a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 803b29c:	6033      	str	r3, [r6, #0]
 803b29e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803b2a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 803b2a2:	6073      	str	r3, [r6, #4]
 803b2a4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803b2a6:	4413      	add	r3, r2
 803b2a8:	9328      	str	r3, [sp, #160]	@ 0xa0
 803b2aa:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803b2ac:	3301      	adds	r3, #1
 803b2ae:	2b07      	cmp	r3, #7
 803b2b0:	9327      	str	r3, [sp, #156]	@ 0x9c
 803b2b2:	dc33      	bgt.n	803b31c <_svfprintf_r+0x123c>
 803b2b4:	3608      	adds	r6, #8
 803b2b6:	9b04      	ldr	r3, [sp, #16]
 803b2b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 803b2bc:	1e5c      	subs	r4, r3, #1
 803b2be:	2200      	movs	r2, #0
 803b2c0:	2300      	movs	r3, #0
 803b2c2:	e9dd 8727 	ldrd	r8, r7, [sp, #156]	@ 0x9c
 803b2c6:	f7d5 fc17 	bl	8010af8 <__aeabi_dcmpeq>
 803b2ca:	2800      	cmp	r0, #0
 803b2cc:	d12f      	bne.n	803b32e <_svfprintf_r+0x124e>
 803b2ce:	f109 0201 	add.w	r2, r9, #1
 803b2d2:	e9c6 2400 	strd	r2, r4, [r6]
 803b2d6:	9a04      	ldr	r2, [sp, #16]
 803b2d8:	f108 0301 	add.w	r3, r8, #1
 803b2dc:	3f01      	subs	r7, #1
 803b2de:	4417      	add	r7, r2
 803b2e0:	2b07      	cmp	r3, #7
 803b2e2:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 803b2e6:	dd53      	ble.n	803b390 <_svfprintf_r+0x12b0>
 803b2e8:	9803      	ldr	r0, [sp, #12]
 803b2ea:	aa26      	add	r2, sp, #152	@ 0x98
 803b2ec:	4659      	mov	r1, fp
 803b2ee:	f7fd fa7f 	bl	80387f0 <__ssprint_r>
 803b2f2:	2800      	cmp	r0, #0
 803b2f4:	d16f      	bne.n	803b3d6 <_svfprintf_r+0x12f6>
 803b2f6:	ae29      	add	r6, sp, #164	@ 0xa4
 803b2f8:	ab22      	add	r3, sp, #136	@ 0x88
 803b2fa:	6033      	str	r3, [r6, #0]
 803b2fc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 803b2fe:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 803b300:	6073      	str	r3, [r6, #4]
 803b302:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803b304:	4413      	add	r3, r2
 803b306:	9328      	str	r3, [sp, #160]	@ 0xa0
 803b308:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803b30a:	3301      	adds	r3, #1
 803b30c:	2b07      	cmp	r3, #7
 803b30e:	9327      	str	r3, [sp, #156]	@ 0x9c
 803b310:	f73f ada0 	bgt.w	803ae54 <_svfprintf_r+0xd74>
 803b314:	f106 0408 	add.w	r4, r6, #8
 803b318:	f7ff baec 	b.w	803a8f4 <_svfprintf_r+0x814>
 803b31c:	9803      	ldr	r0, [sp, #12]
 803b31e:	aa26      	add	r2, sp, #152	@ 0x98
 803b320:	4659      	mov	r1, fp
 803b322:	f7fd fa65 	bl	80387f0 <__ssprint_r>
 803b326:	2800      	cmp	r0, #0
 803b328:	d155      	bne.n	803b3d6 <_svfprintf_r+0x12f6>
 803b32a:	ae29      	add	r6, sp, #164	@ 0xa4
 803b32c:	e7c3      	b.n	803b2b6 <_svfprintf_r+0x11d6>
 803b32e:	9b04      	ldr	r3, [sp, #16]
 803b330:	2b01      	cmp	r3, #1
 803b332:	dde1      	ble.n	803b2f8 <_svfprintf_r+0x1218>
 803b334:	4f57      	ldr	r7, [pc, #348]	@ (803b494 <_svfprintf_r+0x13b4>)
 803b336:	f04f 0810 	mov.w	r8, #16
 803b33a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 803b33e:	2c10      	cmp	r4, #16
 803b340:	f103 0301 	add.w	r3, r3, #1
 803b344:	f106 0108 	add.w	r1, r6, #8
 803b348:	6037      	str	r7, [r6, #0]
 803b34a:	dc07      	bgt.n	803b35c <_svfprintf_r+0x127c>
 803b34c:	6074      	str	r4, [r6, #4]
 803b34e:	2b07      	cmp	r3, #7
 803b350:	4414      	add	r4, r2
 803b352:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 803b356:	dcc7      	bgt.n	803b2e8 <_svfprintf_r+0x1208>
 803b358:	460e      	mov	r6, r1
 803b35a:	e7cd      	b.n	803b2f8 <_svfprintf_r+0x1218>
 803b35c:	3210      	adds	r2, #16
 803b35e:	2b07      	cmp	r3, #7
 803b360:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 803b364:	f8c6 8004 	str.w	r8, [r6, #4]
 803b368:	dd06      	ble.n	803b378 <_svfprintf_r+0x1298>
 803b36a:	9803      	ldr	r0, [sp, #12]
 803b36c:	aa26      	add	r2, sp, #152	@ 0x98
 803b36e:	4659      	mov	r1, fp
 803b370:	f7fd fa3e 	bl	80387f0 <__ssprint_r>
 803b374:	bb78      	cbnz	r0, 803b3d6 <_svfprintf_r+0x12f6>
 803b376:	a929      	add	r1, sp, #164	@ 0xa4
 803b378:	3c10      	subs	r4, #16
 803b37a:	460e      	mov	r6, r1
 803b37c:	e7dd      	b.n	803b33a <_svfprintf_r+0x125a>
 803b37e:	2101      	movs	r1, #1
 803b380:	2a07      	cmp	r2, #7
 803b382:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 803b386:	f8c4 9000 	str.w	r9, [r4]
 803b38a:	6061      	str	r1, [r4, #4]
 803b38c:	ddb4      	ble.n	803b2f8 <_svfprintf_r+0x1218>
 803b38e:	e7ab      	b.n	803b2e8 <_svfprintf_r+0x1208>
 803b390:	3608      	adds	r6, #8
 803b392:	e7b1      	b.n	803b2f8 <_svfprintf_r+0x1218>
 803b394:	460c      	mov	r4, r1
 803b396:	f7ff baad 	b.w	803a8f4 <_svfprintf_r+0x814>
 803b39a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803b39c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 803b39e:	1a9d      	subs	r5, r3, r2
 803b3a0:	2d00      	cmp	r5, #0
 803b3a2:	f77f aaaa 	ble.w	803a8fa <_svfprintf_r+0x81a>
 803b3a6:	4e3c      	ldr	r6, [pc, #240]	@ (803b498 <_svfprintf_r+0x13b8>)
 803b3a8:	2710      	movs	r7, #16
 803b3aa:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 803b3ae:	2d10      	cmp	r5, #16
 803b3b0:	f103 0301 	add.w	r3, r3, #1
 803b3b4:	6026      	str	r6, [r4, #0]
 803b3b6:	dc18      	bgt.n	803b3ea <_svfprintf_r+0x130a>
 803b3b8:	442a      	add	r2, r5
 803b3ba:	2b07      	cmp	r3, #7
 803b3bc:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 803b3c0:	6065      	str	r5, [r4, #4]
 803b3c2:	f77f aa9a 	ble.w	803a8fa <_svfprintf_r+0x81a>
 803b3c6:	9803      	ldr	r0, [sp, #12]
 803b3c8:	aa26      	add	r2, sp, #152	@ 0x98
 803b3ca:	4659      	mov	r1, fp
 803b3cc:	f7fd fa10 	bl	80387f0 <__ssprint_r>
 803b3d0:	2800      	cmp	r0, #0
 803b3d2:	f43f aa92 	beq.w	803a8fa <_svfprintf_r+0x81a>
 803b3d6:	f1ba 0f00 	cmp.w	sl, #0
 803b3da:	f43f a89a 	beq.w	803a512 <_svfprintf_r+0x432>
 803b3de:	9803      	ldr	r0, [sp, #12]
 803b3e0:	4651      	mov	r1, sl
 803b3e2:	f7fc fe43 	bl	803806c <_free_r>
 803b3e6:	f7ff b894 	b.w	803a512 <_svfprintf_r+0x432>
 803b3ea:	3210      	adds	r2, #16
 803b3ec:	2b07      	cmp	r3, #7
 803b3ee:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 803b3f2:	6067      	str	r7, [r4, #4]
 803b3f4:	dc02      	bgt.n	803b3fc <_svfprintf_r+0x131c>
 803b3f6:	3408      	adds	r4, #8
 803b3f8:	3d10      	subs	r5, #16
 803b3fa:	e7d6      	b.n	803b3aa <_svfprintf_r+0x12ca>
 803b3fc:	9803      	ldr	r0, [sp, #12]
 803b3fe:	aa26      	add	r2, sp, #152	@ 0x98
 803b400:	4659      	mov	r1, fp
 803b402:	f7fd f9f5 	bl	80387f0 <__ssprint_r>
 803b406:	2800      	cmp	r0, #0
 803b408:	d1e5      	bne.n	803b3d6 <_svfprintf_r+0x12f6>
 803b40a:	ac29      	add	r4, sp, #164	@ 0xa4
 803b40c:	e7f4      	b.n	803b3f8 <_svfprintf_r+0x1318>
 803b40e:	9803      	ldr	r0, [sp, #12]
 803b410:	4651      	mov	r1, sl
 803b412:	f7fc fe2b 	bl	803806c <_free_r>
 803b416:	f7ff ba88 	b.w	803a92a <_svfprintf_r+0x84a>
 803b41a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803b41c:	2b00      	cmp	r3, #0
 803b41e:	f43f a878 	beq.w	803a512 <_svfprintf_r+0x432>
 803b422:	9803      	ldr	r0, [sp, #12]
 803b424:	aa26      	add	r2, sp, #152	@ 0x98
 803b426:	4659      	mov	r1, fp
 803b428:	f7fd f9e2 	bl	80387f0 <__ssprint_r>
 803b42c:	f7ff b871 	b.w	803a512 <_svfprintf_r+0x432>
 803b430:	ea56 0207 	orrs.w	r2, r6, r7
 803b434:	9508      	str	r5, [sp, #32]
 803b436:	f43f ab7a 	beq.w	803ab2e <_svfprintf_r+0xa4e>
 803b43a:	2b01      	cmp	r3, #1
 803b43c:	f43f abfb 	beq.w	803ac36 <_svfprintf_r+0xb56>
 803b440:	2b02      	cmp	r3, #2
 803b442:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 803b446:	f43f ac3f 	beq.w	803acc8 <_svfprintf_r+0xbe8>
 803b44a:	f006 0307 	and.w	r3, r6, #7
 803b44e:	08f6      	lsrs	r6, r6, #3
 803b450:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 803b454:	08ff      	lsrs	r7, r7, #3
 803b456:	3330      	adds	r3, #48	@ 0x30
 803b458:	ea56 0107 	orrs.w	r1, r6, r7
 803b45c:	464a      	mov	r2, r9
 803b45e:	f809 3d01 	strb.w	r3, [r9, #-1]!
 803b462:	d1f2      	bne.n	803b44a <_svfprintf_r+0x136a>
 803b464:	9908      	ldr	r1, [sp, #32]
 803b466:	07c8      	lsls	r0, r1, #31
 803b468:	d506      	bpl.n	803b478 <_svfprintf_r+0x1398>
 803b46a:	2b30      	cmp	r3, #48	@ 0x30
 803b46c:	d004      	beq.n	803b478 <_svfprintf_r+0x1398>
 803b46e:	2330      	movs	r3, #48	@ 0x30
 803b470:	f809 3c01 	strb.w	r3, [r9, #-1]
 803b474:	f1a2 0902 	sub.w	r9, r2, #2
 803b478:	ab52      	add	r3, sp, #328	@ 0x148
 803b47a:	9d08      	ldr	r5, [sp, #32]
 803b47c:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 803b480:	f04f 0a00 	mov.w	sl, #0
 803b484:	eba3 0809 	sub.w	r8, r3, r9
 803b488:	4657      	mov	r7, sl
 803b48a:	f8cd a020 	str.w	sl, [sp, #32]
 803b48e:	4656      	mov	r6, sl
 803b490:	f7ff b97c 	b.w	803a78c <_svfprintf_r+0x6ac>
 803b494:	08044d12 	.word	0x08044d12
 803b498:	08044d22 	.word	0x08044d22

0803b49c <__swhatbuf_r>:
 803b49c:	b570      	push	{r4, r5, r6, lr}
 803b49e:	460c      	mov	r4, r1
 803b4a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803b4a4:	2900      	cmp	r1, #0
 803b4a6:	b096      	sub	sp, #88	@ 0x58
 803b4a8:	4615      	mov	r5, r2
 803b4aa:	461e      	mov	r6, r3
 803b4ac:	da07      	bge.n	803b4be <__swhatbuf_r+0x22>
 803b4ae:	89a1      	ldrh	r1, [r4, #12]
 803b4b0:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 803b4b4:	d117      	bne.n	803b4e6 <__swhatbuf_r+0x4a>
 803b4b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 803b4ba:	4608      	mov	r0, r1
 803b4bc:	e00f      	b.n	803b4de <__swhatbuf_r+0x42>
 803b4be:	466a      	mov	r2, sp
 803b4c0:	f003 f892 	bl	803e5e8 <_fstat_r>
 803b4c4:	2800      	cmp	r0, #0
 803b4c6:	dbf2      	blt.n	803b4ae <__swhatbuf_r+0x12>
 803b4c8:	9901      	ldr	r1, [sp, #4]
 803b4ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 803b4ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 803b4d2:	4259      	negs	r1, r3
 803b4d4:	4159      	adcs	r1, r3
 803b4d6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 803b4da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 803b4de:	6031      	str	r1, [r6, #0]
 803b4e0:	602b      	str	r3, [r5, #0]
 803b4e2:	b016      	add	sp, #88	@ 0x58
 803b4e4:	bd70      	pop	{r4, r5, r6, pc}
 803b4e6:	2100      	movs	r1, #0
 803b4e8:	2340      	movs	r3, #64	@ 0x40
 803b4ea:	e7e6      	b.n	803b4ba <__swhatbuf_r+0x1e>

0803b4ec <__smakebuf_r>:
 803b4ec:	898b      	ldrh	r3, [r1, #12]
 803b4ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 803b4f0:	079d      	lsls	r5, r3, #30
 803b4f2:	4606      	mov	r6, r0
 803b4f4:	460c      	mov	r4, r1
 803b4f6:	d507      	bpl.n	803b508 <__smakebuf_r+0x1c>
 803b4f8:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 803b4fc:	6023      	str	r3, [r4, #0]
 803b4fe:	6123      	str	r3, [r4, #16]
 803b500:	2301      	movs	r3, #1
 803b502:	6163      	str	r3, [r4, #20]
 803b504:	b003      	add	sp, #12
 803b506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 803b508:	ab01      	add	r3, sp, #4
 803b50a:	466a      	mov	r2, sp
 803b50c:	f7ff ffc6 	bl	803b49c <__swhatbuf_r>
 803b510:	9f00      	ldr	r7, [sp, #0]
 803b512:	4605      	mov	r5, r0
 803b514:	4639      	mov	r1, r7
 803b516:	4630      	mov	r0, r6
 803b518:	f7fc fec0 	bl	803829c <_malloc_r>
 803b51c:	b948      	cbnz	r0, 803b532 <__smakebuf_r+0x46>
 803b51e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803b522:	059a      	lsls	r2, r3, #22
 803b524:	d4ee      	bmi.n	803b504 <__smakebuf_r+0x18>
 803b526:	f023 0303 	bic.w	r3, r3, #3
 803b52a:	f043 0302 	orr.w	r3, r3, #2
 803b52e:	81a3      	strh	r3, [r4, #12]
 803b530:	e7e2      	b.n	803b4f8 <__smakebuf_r+0xc>
 803b532:	89a3      	ldrh	r3, [r4, #12]
 803b534:	6020      	str	r0, [r4, #0]
 803b536:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 803b53a:	81a3      	strh	r3, [r4, #12]
 803b53c:	9b01      	ldr	r3, [sp, #4]
 803b53e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 803b542:	b15b      	cbz	r3, 803b55c <__smakebuf_r+0x70>
 803b544:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 803b548:	4630      	mov	r0, r6
 803b54a:	f003 f85f 	bl	803e60c <_isatty_r>
 803b54e:	b128      	cbz	r0, 803b55c <__smakebuf_r+0x70>
 803b550:	89a3      	ldrh	r3, [r4, #12]
 803b552:	f023 0303 	bic.w	r3, r3, #3
 803b556:	f043 0301 	orr.w	r3, r3, #1
 803b55a:	81a3      	strh	r3, [r4, #12]
 803b55c:	89a3      	ldrh	r3, [r4, #12]
 803b55e:	431d      	orrs	r5, r3
 803b560:	81a5      	strh	r5, [r4, #12]
 803b562:	e7cf      	b.n	803b504 <__smakebuf_r+0x18>

0803b564 <__ssvfscanf_r>:
 803b564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803b568:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 803b56c:	461d      	mov	r5, r3
 803b56e:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 803b572:	af02      	add	r7, sp, #8
 803b574:	049e      	lsls	r6, r3, #18
 803b576:	62b8      	str	r0, [r7, #40]	@ 0x28
 803b578:	460c      	mov	r4, r1
 803b57a:	617a      	str	r2, [r7, #20]
 803b57c:	d406      	bmi.n	803b58c <__ssvfscanf_r+0x28>
 803b57e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 803b582:	818b      	strh	r3, [r1, #12]
 803b584:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 803b586:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 803b58a:	664b      	str	r3, [r1, #100]	@ 0x64
 803b58c:	2300      	movs	r3, #0
 803b58e:	e9c7 3307 	strd	r3, r3, [r7, #28]
 803b592:	61bb      	str	r3, [r7, #24]
 803b594:	637b      	str	r3, [r7, #52]	@ 0x34
 803b596:	633b      	str	r3, [r7, #48]	@ 0x30
 803b598:	627b      	str	r3, [r7, #36]	@ 0x24
 803b59a:	f8d7 8014 	ldr.w	r8, [r7, #20]
 803b59e:	f818 3b01 	ldrb.w	r3, [r8], #1
 803b5a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 803b5a4:	2b00      	cmp	r3, #0
 803b5a6:	f000 80d3 	beq.w	803b750 <__ssvfscanf_r+0x1ec>
 803b5aa:	4a84      	ldr	r2, [pc, #528]	@ (803b7bc <__ssvfscanf_r+0x258>)
 803b5ac:	5cd6      	ldrb	r6, [r2, r3]
 803b5ae:	f016 0608 	ands.w	r6, r6, #8
 803b5b2:	d01b      	beq.n	803b5ec <__ssvfscanf_r+0x88>
 803b5b4:	6863      	ldr	r3, [r4, #4]
 803b5b6:	2b00      	cmp	r3, #0
 803b5b8:	dd08      	ble.n	803b5cc <__ssvfscanf_r+0x68>
 803b5ba:	6823      	ldr	r3, [r4, #0]
 803b5bc:	497f      	ldr	r1, [pc, #508]	@ (803b7bc <__ssvfscanf_r+0x258>)
 803b5be:	781a      	ldrb	r2, [r3, #0]
 803b5c0:	5c8a      	ldrb	r2, [r1, r2]
 803b5c2:	0710      	lsls	r0, r2, #28
 803b5c4:	d409      	bmi.n	803b5da <__ssvfscanf_r+0x76>
 803b5c6:	f8c7 8014 	str.w	r8, [r7, #20]
 803b5ca:	e7e6      	b.n	803b59a <__ssvfscanf_r+0x36>
 803b5cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803b5ce:	4621      	mov	r1, r4
 803b5d0:	f7fd fe13 	bl	80391fa <__ssrefill_r>
 803b5d4:	2800      	cmp	r0, #0
 803b5d6:	d0f0      	beq.n	803b5ba <__ssvfscanf_r+0x56>
 803b5d8:	e7f5      	b.n	803b5c6 <__ssvfscanf_r+0x62>
 803b5da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 803b5dc:	3201      	adds	r2, #1
 803b5de:	633a      	str	r2, [r7, #48]	@ 0x30
 803b5e0:	6862      	ldr	r2, [r4, #4]
 803b5e2:	3301      	adds	r3, #1
 803b5e4:	3a01      	subs	r2, #1
 803b5e6:	6062      	str	r2, [r4, #4]
 803b5e8:	6023      	str	r3, [r4, #0]
 803b5ea:	e7e3      	b.n	803b5b4 <__ssvfscanf_r+0x50>
 803b5ec:	2b25      	cmp	r3, #37	@ 0x25
 803b5ee:	d163      	bne.n	803b6b8 <__ssvfscanf_r+0x154>
 803b5f0:	62fe      	str	r6, [r7, #44]	@ 0x2c
 803b5f2:	4642      	mov	r2, r8
 803b5f4:	f812 3b01 	ldrb.w	r3, [r2], #1
 803b5f8:	617a      	str	r2, [r7, #20]
 803b5fa:	f1a3 0225 	sub.w	r2, r3, #37	@ 0x25
 803b5fe:	2a55      	cmp	r2, #85	@ 0x55
 803b600:	f200 816e 	bhi.w	803b8e0 <__ssvfscanf_r+0x37c>
 803b604:	e8df f012 	tbh	[pc, r2, lsl #1]
 803b608:	016c0056 	.word	0x016c0056
 803b60c:	016c016c 	.word	0x016c016c
 803b610:	007d016c 	.word	0x007d016c
 803b614:	016c016c 	.word	0x016c016c
 803b618:	016c016c 	.word	0x016c016c
 803b61c:	00b9016c 	.word	0x00b9016c
 803b620:	00b900b9 	.word	0x00b900b9
 803b624:	00b900b9 	.word	0x00b900b9
 803b628:	00b900b9 	.word	0x00b900b9
 803b62c:	00b900b9 	.word	0x00b900b9
 803b630:	016c00b9 	.word	0x016c00b9
 803b634:	016c016c 	.word	0x016c016c
 803b638:	016c016c 	.word	0x016c016c
 803b63c:	016c016c 	.word	0x016c016c
 803b640:	016c00e0 	.word	0x016c00e0
 803b644:	00c3010a 	.word	0x00c3010a
 803b648:	00e000e0 	.word	0x00e000e0
 803b64c:	016c00e0 	.word	0x016c00e0
 803b650:	016c016c 	.word	0x016c016c
 803b654:	00a2016c 	.word	0x00a2016c
 803b658:	016c016c 	.word	0x016c016c
 803b65c:	016c00c7 	.word	0x016c00c7
 803b660:	016c016c 	.word	0x016c016c
 803b664:	016c00fa 	.word	0x016c00fa
 803b668:	016c016c 	.word	0x016c016c
 803b66c:	00d4016c 	.word	0x00d4016c
 803b670:	016c016c 	.word	0x016c016c
 803b674:	016c00ff 	.word	0x016c00ff
 803b678:	016c016c 	.word	0x016c016c
 803b67c:	016c016c 	.word	0x016c016c
 803b680:	016c00e0 	.word	0x016c00e0
 803b684:	00c5010c 	.word	0x00c5010c
 803b688:	00e000e0 	.word	0x00e000e0
 803b68c:	009400e0 	.word	0x009400e0
 803b690:	00a20130 	.word	0x00a20130
 803b694:	0085016c 	.word	0x0085016c
 803b698:	011400ac 	.word	0x011400ac
 803b69c:	011100c9 	.word	0x011100c9
 803b6a0:	016c016c 	.word	0x016c016c
 803b6a4:	00a900fc 	.word	0x00a900fc
 803b6a8:	016c00d0 	.word	0x016c00d0
 803b6ac:	00d4016c 	.word	0x00d4016c
 803b6b0:	00a9016c 	.word	0x00a9016c
 803b6b4:	f8d7 8014 	ldr.w	r8, [r7, #20]
 803b6b8:	6863      	ldr	r3, [r4, #4]
 803b6ba:	2b00      	cmp	r3, #0
 803b6bc:	dd0e      	ble.n	803b6dc <__ssvfscanf_r+0x178>
 803b6be:	6823      	ldr	r3, [r4, #0]
 803b6c0:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 803b6c4:	7819      	ldrb	r1, [r3, #0]
 803b6c6:	4291      	cmp	r1, r2
 803b6c8:	d142      	bne.n	803b750 <__ssvfscanf_r+0x1ec>
 803b6ca:	3301      	adds	r3, #1
 803b6cc:	6862      	ldr	r2, [r4, #4]
 803b6ce:	6023      	str	r3, [r4, #0]
 803b6d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 803b6d2:	3a01      	subs	r2, #1
 803b6d4:	3301      	adds	r3, #1
 803b6d6:	6062      	str	r2, [r4, #4]
 803b6d8:	633b      	str	r3, [r7, #48]	@ 0x30
 803b6da:	e774      	b.n	803b5c6 <__ssvfscanf_r+0x62>
 803b6dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803b6de:	4621      	mov	r1, r4
 803b6e0:	f7fd fd8b 	bl	80391fa <__ssrefill_r>
 803b6e4:	2800      	cmp	r0, #0
 803b6e6:	d0ea      	beq.n	803b6be <__ssvfscanf_r+0x15a>
 803b6e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803b6ea:	b113      	cbz	r3, 803b6f2 <__ssvfscanf_r+0x18e>
 803b6ec:	89a3      	ldrh	r3, [r4, #12]
 803b6ee:	065b      	lsls	r3, r3, #25
 803b6f0:	d52e      	bpl.n	803b750 <__ssvfscanf_r+0x1ec>
 803b6f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803b6f4:	2b00      	cmp	r3, #0
 803b6f6:	f041 809d 	bne.w	803c834 <__ssvfscanf_r+0x12d0>
 803b6fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803b6fe:	627b      	str	r3, [r7, #36]	@ 0x24
 803b700:	e0f9      	b.n	803b8f6 <__ssvfscanf_r+0x392>
 803b702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803b704:	4333      	orrs	r3, r6
 803b706:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803b708:	d122      	bne.n	803b750 <__ssvfscanf_r+0x1ec>
 803b70a:	2610      	movs	r6, #16
 803b70c:	f8d7 8014 	ldr.w	r8, [r7, #20]
 803b710:	e76f      	b.n	803b5f2 <__ssvfscanf_r+0x8e>
 803b712:	0731      	lsls	r1, r6, #28
 803b714:	d11c      	bne.n	803b750 <__ssvfscanf_r+0x1ec>
 803b716:	f898 3001 	ldrb.w	r3, [r8, #1]
 803b71a:	2b6c      	cmp	r3, #108	@ 0x6c
 803b71c:	d105      	bne.n	803b72a <__ssvfscanf_r+0x1c6>
 803b71e:	f108 0302 	add.w	r3, r8, #2
 803b722:	617b      	str	r3, [r7, #20]
 803b724:	f046 0602 	orr.w	r6, r6, #2
 803b728:	e7f0      	b.n	803b70c <__ssvfscanf_r+0x1a8>
 803b72a:	f046 0601 	orr.w	r6, r6, #1
 803b72e:	e7ed      	b.n	803b70c <__ssvfscanf_r+0x1a8>
 803b730:	0732      	lsls	r2, r6, #28
 803b732:	d10d      	bne.n	803b750 <__ssvfscanf_r+0x1ec>
 803b734:	f898 3001 	ldrb.w	r3, [r8, #1]
 803b738:	2b68      	cmp	r3, #104	@ 0x68
 803b73a:	bf03      	ittte	eq
 803b73c:	f108 0302 	addeq.w	r3, r8, #2
 803b740:	617b      	streq	r3, [r7, #20]
 803b742:	f046 0608 	orreq.w	r6, r6, #8
 803b746:	f046 0604 	orrne.w	r6, r6, #4
 803b74a:	e7df      	b.n	803b70c <__ssvfscanf_r+0x1a8>
 803b74c:	0733      	lsls	r3, r6, #28
 803b74e:	d0e9      	beq.n	803b724 <__ssvfscanf_r+0x1c0>
 803b750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803b752:	2b00      	cmp	r3, #0
 803b754:	f000 80cf 	beq.w	803b8f6 <__ssvfscanf_r+0x392>
 803b758:	e0c8      	b.n	803b8ec <__ssvfscanf_r+0x388>
 803b75a:	0730      	lsls	r0, r6, #28
 803b75c:	d0d6      	beq.n	803b70c <__ssvfscanf_r+0x1a8>
 803b75e:	e7f7      	b.n	803b750 <__ssvfscanf_r+0x1ec>
 803b760:	f016 038f 	ands.w	r3, r6, #143	@ 0x8f
 803b764:	d1f4      	bne.n	803b750 <__ssvfscanf_r+0x1ec>
 803b766:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 803b768:	b922      	cbnz	r2, 803b774 <__ssvfscanf_r+0x210>
 803b76a:	b082      	sub	sp, #8
 803b76c:	aa02      	add	r2, sp, #8
 803b76e:	e9c2 3300 	strd	r3, r3, [r2]
 803b772:	637a      	str	r2, [r7, #52]	@ 0x34
 803b774:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
 803b778:	e7c8      	b.n	803b70c <__ssvfscanf_r+0x1a8>
 803b77a:	f016 0f8f 	tst.w	r6, #143	@ 0x8f
 803b77e:	d1e7      	bne.n	803b750 <__ssvfscanf_r+0x1ec>
 803b780:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 803b782:	220a      	movs	r2, #10
 803b784:	fb02 3301 	mla	r3, r2, r1, r3
 803b788:	3b30      	subs	r3, #48	@ 0x30
 803b78a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803b78c:	e7be      	b.n	803b70c <__ssvfscanf_r+0x1a8>
 803b78e:	f046 0601 	orr.w	r6, r6, #1
 803b792:	4b0b      	ldr	r3, [pc, #44]	@ (803b7c0 <__ssvfscanf_r+0x25c>)
 803b794:	e009      	b.n	803b7aa <__ssvfscanf_r+0x246>
 803b796:	f046 0601 	orr.w	r6, r6, #1
 803b79a:	4b0a      	ldr	r3, [pc, #40]	@ (803b7c4 <__ssvfscanf_r+0x260>)
 803b79c:	61bb      	str	r3, [r7, #24]
 803b79e:	2308      	movs	r3, #8
 803b7a0:	61fb      	str	r3, [r7, #28]
 803b7a2:	f04f 0803 	mov.w	r8, #3
 803b7a6:	e011      	b.n	803b7cc <__ssvfscanf_r+0x268>
 803b7a8:	4b06      	ldr	r3, [pc, #24]	@ (803b7c4 <__ssvfscanf_r+0x260>)
 803b7aa:	61bb      	str	r3, [r7, #24]
 803b7ac:	230a      	movs	r3, #10
 803b7ae:	e7f7      	b.n	803b7a0 <__ssvfscanf_r+0x23c>
 803b7b0:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 803b7b4:	4b03      	ldr	r3, [pc, #12]	@ (803b7c4 <__ssvfscanf_r+0x260>)
 803b7b6:	61bb      	str	r3, [r7, #24]
 803b7b8:	2310      	movs	r3, #16
 803b7ba:	e7f1      	b.n	803b7a0 <__ssvfscanf_r+0x23c>
 803b7bc:	08044b59 	.word	0x08044b59
 803b7c0:	080354f9 	.word	0x080354f9
 803b7c4:	0803e2f9 	.word	0x0803e2f9
 803b7c8:	f04f 0804 	mov.w	r8, #4
 803b7cc:	6863      	ldr	r3, [r4, #4]
 803b7ce:	2b00      	cmp	r3, #0
 803b7d0:	dd4e      	ble.n	803b870 <__ssvfscanf_r+0x30c>
 803b7d2:	0673      	lsls	r3, r6, #25
 803b7d4:	d407      	bmi.n	803b7e6 <__ssvfscanf_r+0x282>
 803b7d6:	f8df 92fc 	ldr.w	r9, [pc, #764]	@ 803bad4 <__ssvfscanf_r+0x570>
 803b7da:	6823      	ldr	r3, [r4, #0]
 803b7dc:	781a      	ldrb	r2, [r3, #0]
 803b7de:	f819 2002 	ldrb.w	r2, [r9, r2]
 803b7e2:	0710      	lsls	r0, r2, #28
 803b7e4:	d44b      	bmi.n	803b87e <__ssvfscanf_r+0x31a>
 803b7e6:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 803b7ea:	f1b8 0f03 	cmp.w	r8, #3
 803b7ee:	d858      	bhi.n	803b8a2 <__ssvfscanf_r+0x33e>
 803b7f0:	e8df f018 	tbh	[pc, r8, lsl #1]
 803b7f4:	037801c1 	.word	0x037801c1
 803b7f8:	05f30514 	.word	0x05f30514
 803b7fc:	f046 0601 	orr.w	r6, r6, #1
 803b800:	f04f 0802 	mov.w	r8, #2
 803b804:	e7e2      	b.n	803b7cc <__ssvfscanf_r+0x268>
 803b806:	6979      	ldr	r1, [r7, #20]
 803b808:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 803b80c:	f001 fd1d 	bl	803d24a <__sccl>
 803b810:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 803b814:	6178      	str	r0, [r7, #20]
 803b816:	f04f 0801 	mov.w	r8, #1
 803b81a:	e7d7      	b.n	803b7cc <__ssvfscanf_r+0x268>
 803b81c:	f046 0601 	orr.w	r6, r6, #1
 803b820:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 803b824:	f04f 0800 	mov.w	r8, #0
 803b828:	e7d0      	b.n	803b7cc <__ssvfscanf_r+0x268>
 803b82a:	f446 7608 	orr.w	r6, r6, #544	@ 0x220
 803b82e:	e7c1      	b.n	803b7b4 <__ssvfscanf_r+0x250>
 803b830:	06f1      	lsls	r1, r6, #27
 803b832:	f53f aeb2 	bmi.w	803b59a <__ssvfscanf_r+0x36>
 803b836:	0732      	lsls	r2, r6, #28
 803b838:	f855 3b04 	ldr.w	r3, [r5], #4
 803b83c:	d502      	bpl.n	803b844 <__ssvfscanf_r+0x2e0>
 803b83e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 803b840:	701a      	strb	r2, [r3, #0]
 803b842:	e6aa      	b.n	803b59a <__ssvfscanf_r+0x36>
 803b844:	0770      	lsls	r0, r6, #29
 803b846:	d502      	bpl.n	803b84e <__ssvfscanf_r+0x2ea>
 803b848:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 803b84a:	801a      	strh	r2, [r3, #0]
 803b84c:	e6a5      	b.n	803b59a <__ssvfscanf_r+0x36>
 803b84e:	07f1      	lsls	r1, r6, #31
 803b850:	d502      	bpl.n	803b858 <__ssvfscanf_r+0x2f4>
 803b852:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 803b854:	601a      	str	r2, [r3, #0]
 803b856:	e6a0      	b.n	803b59a <__ssvfscanf_r+0x36>
 803b858:	07b2      	lsls	r2, r6, #30
 803b85a:	d5fa      	bpl.n	803b852 <__ssvfscanf_r+0x2ee>
 803b85c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 803b85e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 803b860:	17d2      	asrs	r2, r2, #31
 803b862:	e9c3 1200 	strd	r1, r2, [r3]
 803b866:	e698      	b.n	803b59a <__ssvfscanf_r+0x36>
 803b868:	4b99      	ldr	r3, [pc, #612]	@ (803bad0 <__ssvfscanf_r+0x56c>)
 803b86a:	61bb      	str	r3, [r7, #24]
 803b86c:	2300      	movs	r3, #0
 803b86e:	e797      	b.n	803b7a0 <__ssvfscanf_r+0x23c>
 803b870:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803b872:	4621      	mov	r1, r4
 803b874:	f7fd fcc1 	bl	80391fa <__ssrefill_r>
 803b878:	2800      	cmp	r0, #0
 803b87a:	d0aa      	beq.n	803b7d2 <__ssvfscanf_r+0x26e>
 803b87c:	e734      	b.n	803b6e8 <__ssvfscanf_r+0x184>
 803b87e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 803b880:	3201      	adds	r2, #1
 803b882:	633a      	str	r2, [r7, #48]	@ 0x30
 803b884:	6862      	ldr	r2, [r4, #4]
 803b886:	3a01      	subs	r2, #1
 803b888:	2a00      	cmp	r2, #0
 803b88a:	6062      	str	r2, [r4, #4]
 803b88c:	dd02      	ble.n	803b894 <__ssvfscanf_r+0x330>
 803b88e:	3301      	adds	r3, #1
 803b890:	6023      	str	r3, [r4, #0]
 803b892:	e7a2      	b.n	803b7da <__ssvfscanf_r+0x276>
 803b894:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803b896:	4621      	mov	r1, r4
 803b898:	f7fd fcaf 	bl	80391fa <__ssrefill_r>
 803b89c:	2800      	cmp	r0, #0
 803b89e:	d09c      	beq.n	803b7da <__ssvfscanf_r+0x276>
 803b8a0:	e722      	b.n	803b6e8 <__ssvfscanf_r+0x184>
 803b8a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803b8a4:	2b01      	cmp	r3, #1
 803b8a6:	bf38      	it	cc
 803b8a8:	2301      	movcc	r3, #1
 803b8aa:	4698      	mov	r8, r3
 803b8ac:	f016 0301 	ands.w	r3, r6, #1
 803b8b0:	f006 0b10 	and.w	fp, r6, #16
 803b8b4:	f000 80eb 	beq.w	803ba8e <__ssvfscanf_r+0x52a>
 803b8b8:	f1bb 0f00 	cmp.w	fp, #0
 803b8bc:	f040 8085 	bne.w	803b9ca <__ssvfscanf_r+0x466>
 803b8c0:	462b      	mov	r3, r5
 803b8c2:	0631      	lsls	r1, r6, #24
 803b8c4:	f853 5b04 	ldr.w	r5, [r3], #4
 803b8c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803b8ca:	f140 8085 	bpl.w	803b9d8 <__ssvfscanf_r+0x474>
 803b8ce:	b13d      	cbz	r5, 803b8e0 <__ssvfscanf_r+0x37c>
 803b8d0:	2080      	movs	r0, #128	@ 0x80
 803b8d2:	f7fc fcd3 	bl	803827c <malloc>
 803b8d6:	4606      	mov	r6, r0
 803b8d8:	b998      	cbnz	r0, 803b902 <__ssvfscanf_r+0x39e>
 803b8da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803b8de:	627b      	str	r3, [r7, #36]	@ 0x24
 803b8e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803b8e2:	b143      	cbz	r3, 803b8f6 <__ssvfscanf_r+0x392>
 803b8e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803b8e6:	3301      	adds	r3, #1
 803b8e8:	f000 87a4 	beq.w	803c834 <__ssvfscanf_r+0x12d0>
 803b8ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803b8ee:	6818      	ldr	r0, [r3, #0]
 803b8f0:	b108      	cbz	r0, 803b8f6 <__ssvfscanf_r+0x392>
 803b8f2:	f7fc fccb 	bl	803828c <free>
 803b8f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803b8f8:	f507 772d 	add.w	r7, r7, #692	@ 0x2b4
 803b8fc:	46bd      	mov	sp, r7
 803b8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803b902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803b904:	6028      	str	r0, [r5, #0]
 803b906:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 803b90a:	889b      	ldrh	r3, [r3, #4]
 803b90c:	4599      	cmp	r9, r3
 803b90e:	d314      	bcc.n	803b93a <__ssvfscanf_r+0x3d6>
 803b910:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 803b914:	4293      	cmp	r3, r2
 803b916:	f200 878d 	bhi.w	803c834 <__ssvfscanf_r+0x12d0>
 803b91a:	3308      	adds	r3, #8
 803b91c:	fa1f fa83 	uxth.w	sl, r3
 803b920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803b922:	ea4f 018a 	mov.w	r1, sl, lsl #2
 803b926:	6818      	ldr	r0, [r3, #0]
 803b928:	f001 fc32 	bl	803d190 <realloc>
 803b92c:	2800      	cmp	r0, #0
 803b92e:	f000 8781 	beq.w	803c834 <__ssvfscanf_r+0x12d0>
 803b932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803b934:	6018      	str	r0, [r3, #0]
 803b936:	f8a3 a004 	strh.w	sl, [r3, #4]
 803b93a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803b93c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 803b93e:	681b      	ldr	r3, [r3, #0]
 803b940:	f109 0201 	add.w	r2, r9, #1
 803b944:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 803b948:	46aa      	mov	sl, r5
 803b94a:	80ca      	strh	r2, [r1, #6]
 803b94c:	4635      	mov	r5, r6
 803b94e:	f04f 0920 	mov.w	r9, #32
 803b952:	2200      	movs	r2, #0
 803b954:	613a      	str	r2, [r7, #16]
 803b956:	f7fb fbd3 	bl	8037100 <__locale_mb_cur_max>
 803b95a:	693a      	ldr	r2, [r7, #16]
 803b95c:	4290      	cmp	r0, r2
 803b95e:	f43f aec3 	beq.w	803b6e8 <__ssvfscanf_r+0x184>
 803b962:	6821      	ldr	r1, [r4, #0]
 803b964:	f507 7ca8 	add.w	ip, r7, #336	@ 0x150
 803b968:	f811 0b01 	ldrb.w	r0, [r1], #1
 803b96c:	f80c 0002 	strb.w	r0, [ip, r2]
 803b970:	1c53      	adds	r3, r2, #1
 803b972:	6862      	ldr	r2, [r4, #4]
 803b974:	3a01      	subs	r2, #1
 803b976:	e9c4 1200 	strd	r1, r2, [r4]
 803b97a:	6a3a      	ldr	r2, [r7, #32]
 803b97c:	2a03      	cmp	r2, #3
 803b97e:	d102      	bne.n	803b986 <__ssvfscanf_r+0x422>
 803b980:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 803b982:	2a04      	cmp	r2, #4
 803b984:	d007      	beq.n	803b996 <__ssvfscanf_r+0x432>
 803b986:	2208      	movs	r2, #8
 803b988:	2100      	movs	r1, #0
 803b98a:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 803b98e:	623b      	str	r3, [r7, #32]
 803b990:	f7fa fa2e 	bl	8035df0 <memset>
 803b994:	6a3b      	ldr	r3, [r7, #32]
 803b996:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 803b99a:	9200      	str	r2, [sp, #0]
 803b99c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803b99e:	613b      	str	r3, [r7, #16]
 803b9a0:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 803b9a4:	4629      	mov	r1, r5
 803b9a6:	f002 ffad 	bl	803e904 <_mbrtowc_r>
 803b9aa:	1c42      	adds	r2, r0, #1
 803b9ac:	6238      	str	r0, [r7, #32]
 803b9ae:	f43f ae9b 	beq.w	803b6e8 <__ssvfscanf_r+0x184>
 803b9b2:	693b      	ldr	r3, [r7, #16]
 803b9b4:	b9b8      	cbnz	r0, 803b9e6 <__ssvfscanf_r+0x482>
 803b9b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 803b9b8:	441a      	add	r2, r3
 803b9ba:	4613      	mov	r3, r2
 803b9bc:	f1bb 0f00 	cmp.w	fp, #0
 803b9c0:	d00e      	beq.n	803b9e0 <__ssvfscanf_r+0x47c>
 803b9c2:	633b      	str	r3, [r7, #48]	@ 0x30
 803b9c4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 803b9c8:	e019      	b.n	803b9fe <__ssvfscanf_r+0x49a>
 803b9ca:	f04f 0900 	mov.w	r9, #0
 803b9ce:	62fd      	str	r5, [r7, #44]	@ 0x2c
 803b9d0:	464e      	mov	r6, r9
 803b9d2:	46ca      	mov	sl, r9
 803b9d4:	464d      	mov	r5, r9
 803b9d6:	e7bc      	b.n	803b952 <__ssvfscanf_r+0x3ee>
 803b9d8:	46d9      	mov	r9, fp
 803b9da:	465e      	mov	r6, fp
 803b9dc:	46da      	mov	sl, fp
 803b9de:	e7b8      	b.n	803b952 <__ssvfscanf_r+0x3ee>
 803b9e0:	f8c5 b000 	str.w	fp, [r5]
 803b9e4:	e7ed      	b.n	803b9c2 <__ssvfscanf_r+0x45e>
 803b9e6:	6a3a      	ldr	r2, [r7, #32]
 803b9e8:	3202      	adds	r2, #2
 803b9ea:	d025      	beq.n	803ba38 <__ssvfscanf_r+0x4d4>
 803b9ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 803b9ee:	441a      	add	r2, r3
 803b9f0:	6a3b      	ldr	r3, [r7, #32]
 803b9f2:	633a      	str	r2, [r7, #48]	@ 0x30
 803b9f4:	2b03      	cmp	r3, #3
 803b9f6:	d1e5      	bne.n	803b9c4 <__ssvfscanf_r+0x460>
 803b9f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 803b9fa:	2b04      	cmp	r3, #4
 803b9fc:	d1e2      	bne.n	803b9c4 <__ssvfscanf_r+0x460>
 803b9fe:	f1bb 0f00 	cmp.w	fp, #0
 803ba02:	d117      	bne.n	803ba34 <__ssvfscanf_r+0x4d0>
 803ba04:	f1ba 0f00 	cmp.w	sl, #0
 803ba08:	d013      	beq.n	803ba32 <__ssvfscanf_r+0x4ce>
 803ba0a:	1bab      	subs	r3, r5, r6
 803ba0c:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 803ba10:	d80f      	bhi.n	803ba32 <__ssvfscanf_r+0x4ce>
 803ba12:	4630      	mov	r0, r6
 803ba14:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 803ba18:	613b      	str	r3, [r7, #16]
 803ba1a:	f001 fbb9 	bl	803d190 <realloc>
 803ba1e:	4606      	mov	r6, r0
 803ba20:	2800      	cmp	r0, #0
 803ba22:	f43f af5a 	beq.w	803b8da <__ssvfscanf_r+0x376>
 803ba26:	693b      	ldr	r3, [r7, #16]
 803ba28:	f8ca 0000 	str.w	r0, [sl]
 803ba2c:	18c5      	adds	r5, r0, r3
 803ba2e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 803ba32:	3504      	adds	r5, #4
 803ba34:	2200      	movs	r2, #0
 803ba36:	e000      	b.n	803ba3a <__ssvfscanf_r+0x4d6>
 803ba38:	461a      	mov	r2, r3
 803ba3a:	6863      	ldr	r3, [r4, #4]
 803ba3c:	2b00      	cmp	r3, #0
 803ba3e:	dc14      	bgt.n	803ba6a <__ssvfscanf_r+0x506>
 803ba40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803ba42:	613a      	str	r2, [r7, #16]
 803ba44:	4621      	mov	r1, r4
 803ba46:	f7fd fbd8 	bl	80391fa <__ssrefill_r>
 803ba4a:	693a      	ldr	r2, [r7, #16]
 803ba4c:	b168      	cbz	r0, 803ba6a <__ssvfscanf_r+0x506>
 803ba4e:	2a00      	cmp	r2, #0
 803ba50:	f47f ae4a 	bne.w	803b6e8 <__ssvfscanf_r+0x184>
 803ba54:	f1ba 0f00 	cmp.w	sl, #0
 803ba58:	d10c      	bne.n	803ba74 <__ssvfscanf_r+0x510>
 803ba5a:	f1bb 0f00 	cmp.w	fp, #0
 803ba5e:	d102      	bne.n	803ba66 <__ssvfscanf_r+0x502>
 803ba60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803ba62:	3301      	adds	r3, #1
 803ba64:	627b      	str	r3, [r7, #36]	@ 0x24
 803ba66:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 803ba68:	e597      	b.n	803b59a <__ssvfscanf_r+0x36>
 803ba6a:	f1b8 0f00 	cmp.w	r8, #0
 803ba6e:	f47f af71 	bne.w	803b954 <__ssvfscanf_r+0x3f0>
 803ba72:	e7ef      	b.n	803ba54 <__ssvfscanf_r+0x4f0>
 803ba74:	1ba9      	subs	r1, r5, r6
 803ba76:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 803ba7a:	d9ee      	bls.n	803ba5a <__ssvfscanf_r+0x4f6>
 803ba7c:	f8da 0000 	ldr.w	r0, [sl]
 803ba80:	f001 fb86 	bl	803d190 <realloc>
 803ba84:	2800      	cmp	r0, #0
 803ba86:	d0e8      	beq.n	803ba5a <__ssvfscanf_r+0x4f6>
 803ba88:	f8ca 0000 	str.w	r0, [sl]
 803ba8c:	e7e5      	b.n	803ba5a <__ssvfscanf_r+0x4f6>
 803ba8e:	f1bb 0f00 	cmp.w	fp, #0
 803ba92:	d021      	beq.n	803bad8 <__ssvfscanf_r+0x574>
 803ba94:	461e      	mov	r6, r3
 803ba96:	e9d4 2300 	ldrd	r2, r3, [r4]
 803ba9a:	4598      	cmp	r8, r3
 803ba9c:	dd11      	ble.n	803bac2 <__ssvfscanf_r+0x55e>
 803ba9e:	441a      	add	r2, r3
 803baa0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803baa2:	6022      	str	r2, [r4, #0]
 803baa4:	4621      	mov	r1, r4
 803baa6:	441e      	add	r6, r3
 803baa8:	eba8 0803 	sub.w	r8, r8, r3
 803baac:	f7fd fba5 	bl	80391fa <__ssrefill_r>
 803bab0:	2800      	cmp	r0, #0
 803bab2:	d0f0      	beq.n	803ba96 <__ssvfscanf_r+0x532>
 803bab4:	2e00      	cmp	r6, #0
 803bab6:	f43f ae17 	beq.w	803b6e8 <__ssvfscanf_r+0x184>
 803baba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 803babc:	4433      	add	r3, r6
 803babe:	633b      	str	r3, [r7, #48]	@ 0x30
 803bac0:	e56b      	b.n	803b59a <__ssvfscanf_r+0x36>
 803bac2:	eba3 0308 	sub.w	r3, r3, r8
 803bac6:	4442      	add	r2, r8
 803bac8:	4446      	add	r6, r8
 803baca:	6063      	str	r3, [r4, #4]
 803bacc:	6022      	str	r2, [r4, #0]
 803bace:	e7f4      	b.n	803baba <__ssvfscanf_r+0x556>
 803bad0:	080354f9 	.word	0x080354f9
 803bad4:	08044b59 	.word	0x08044b59
 803bad8:	46a9      	mov	r9, r5
 803bada:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 803bade:	f859 5b04 	ldr.w	r5, [r9], #4
 803bae2:	d02c      	beq.n	803bb3e <__ssvfscanf_r+0x5da>
 803bae4:	2d00      	cmp	r5, #0
 803bae6:	f43f ae33 	beq.w	803b750 <__ssvfscanf_r+0x1ec>
 803baea:	4640      	mov	r0, r8
 803baec:	f7fc fbc6 	bl	803827c <malloc>
 803baf0:	4682      	mov	sl, r0
 803baf2:	2800      	cmp	r0, #0
 803baf4:	f43f adfd 	beq.w	803b6f2 <__ssvfscanf_r+0x18e>
 803baf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803bafa:	6028      	str	r0, [r5, #0]
 803bafc:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 803bb00:	889e      	ldrh	r6, [r3, #4]
 803bb02:	45b3      	cmp	fp, r6
 803bb04:	d311      	bcc.n	803bb2a <__ssvfscanf_r+0x5c6>
 803bb06:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 803bb0a:	429e      	cmp	r6, r3
 803bb0c:	f200 8692 	bhi.w	803c834 <__ssvfscanf_r+0x12d0>
 803bb10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803bb12:	3608      	adds	r6, #8
 803bb14:	b2b6      	uxth	r6, r6
 803bb16:	6818      	ldr	r0, [r3, #0]
 803bb18:	00b1      	lsls	r1, r6, #2
 803bb1a:	f001 fb39 	bl	803d190 <realloc>
 803bb1e:	2800      	cmp	r0, #0
 803bb20:	f000 8688 	beq.w	803c834 <__ssvfscanf_r+0x12d0>
 803bb24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803bb26:	6018      	str	r0, [r3, #0]
 803bb28:	809e      	strh	r6, [r3, #4]
 803bb2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803bb2c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 803bb2e:	681b      	ldr	r3, [r3, #0]
 803bb30:	f10b 0201 	add.w	r2, fp, #1
 803bb34:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 803bb38:	462e      	mov	r6, r5
 803bb3a:	80ca      	strh	r2, [r1, #6]
 803bb3c:	4655      	mov	r5, sl
 803bb3e:	9400      	str	r4, [sp, #0]
 803bb40:	4629      	mov	r1, r5
 803bb42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803bb44:	4643      	mov	r3, r8
 803bb46:	2201      	movs	r2, #1
 803bb48:	f7fd fb74 	bl	8039234 <_sfread_r>
 803bb4c:	4605      	mov	r5, r0
 803bb4e:	2800      	cmp	r0, #0
 803bb50:	f43f adca 	beq.w	803b6e8 <__ssvfscanf_r+0x184>
 803bb54:	b13e      	cbz	r6, 803bb66 <__ssvfscanf_r+0x602>
 803bb56:	4580      	cmp	r8, r0
 803bb58:	d905      	bls.n	803bb66 <__ssvfscanf_r+0x602>
 803bb5a:	4601      	mov	r1, r0
 803bb5c:	6830      	ldr	r0, [r6, #0]
 803bb5e:	f001 fb17 	bl	803d190 <realloc>
 803bb62:	b100      	cbz	r0, 803bb66 <__ssvfscanf_r+0x602>
 803bb64:	6030      	str	r0, [r6, #0]
 803bb66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 803bb68:	442b      	add	r3, r5
 803bb6a:	633b      	str	r3, [r7, #48]	@ 0x30
 803bb6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803bb6e:	3301      	adds	r3, #1
 803bb70:	627b      	str	r3, [r7, #36]	@ 0x24
 803bb72:	464d      	mov	r5, r9
 803bb74:	e511      	b.n	803b59a <__ssvfscanf_r+0x36>
 803bb76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803bb78:	2b00      	cmp	r3, #0
 803bb7a:	bf08      	it	eq
 803bb7c:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 803bb80:	f016 0801 	ands.w	r8, r6, #1
 803bb84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803bb86:	f006 0a10 	and.w	sl, r6, #16
 803bb8a:	f000 8101 	beq.w	803bd90 <__ssvfscanf_r+0x82c>
 803bb8e:	f1ba 0f00 	cmp.w	sl, #0
 803bb92:	f040 80a4 	bne.w	803bcde <__ssvfscanf_r+0x77a>
 803bb96:	462b      	mov	r3, r5
 803bb98:	f853 5b04 	ldr.w	r5, [r3], #4
 803bb9c:	60fb      	str	r3, [r7, #12]
 803bb9e:	0633      	lsls	r3, r6, #24
 803bba0:	f140 80a5 	bpl.w	803bcee <__ssvfscanf_r+0x78a>
 803bba4:	2d00      	cmp	r5, #0
 803bba6:	f43f ae9b 	beq.w	803b8e0 <__ssvfscanf_r+0x37c>
 803bbaa:	2080      	movs	r0, #128	@ 0x80
 803bbac:	f7fc fb66 	bl	803827c <malloc>
 803bbb0:	4680      	mov	r8, r0
 803bbb2:	2800      	cmp	r0, #0
 803bbb4:	f43f ae91 	beq.w	803b8da <__ssvfscanf_r+0x376>
 803bbb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803bbba:	6028      	str	r0, [r5, #0]
 803bbbc:	88de      	ldrh	r6, [r3, #6]
 803bbbe:	889b      	ldrh	r3, [r3, #4]
 803bbc0:	429e      	cmp	r6, r3
 803bbc2:	d314      	bcc.n	803bbee <__ssvfscanf_r+0x68a>
 803bbc4:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 803bbc8:	4293      	cmp	r3, r2
 803bbca:	f200 8633 	bhi.w	803c834 <__ssvfscanf_r+0x12d0>
 803bbce:	3308      	adds	r3, #8
 803bbd0:	fa1f f983 	uxth.w	r9, r3
 803bbd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803bbd6:	ea4f 0189 	mov.w	r1, r9, lsl #2
 803bbda:	6818      	ldr	r0, [r3, #0]
 803bbdc:	f001 fad8 	bl	803d190 <realloc>
 803bbe0:	2800      	cmp	r0, #0
 803bbe2:	f000 8627 	beq.w	803c834 <__ssvfscanf_r+0x12d0>
 803bbe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803bbe8:	6018      	str	r0, [r3, #0]
 803bbea:	f8a3 9004 	strh.w	r9, [r3, #4]
 803bbee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803bbf0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 803bbf2:	681b      	ldr	r3, [r3, #0]
 803bbf4:	1c72      	adds	r2, r6, #1
 803bbf6:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 803bbfa:	46ab      	mov	fp, r5
 803bbfc:	80ca      	strh	r2, [r1, #6]
 803bbfe:	4645      	mov	r5, r8
 803bc00:	f04f 0920 	mov.w	r9, #32
 803bc04:	2600      	movs	r6, #0
 803bc06:	f7fb fa7b 	bl	8037100 <__locale_mb_cur_max>
 803bc0a:	42b0      	cmp	r0, r6
 803bc0c:	f43f ad6c 	beq.w	803b6e8 <__ssvfscanf_r+0x184>
 803bc10:	1c73      	adds	r3, r6, #1
 803bc12:	613b      	str	r3, [r7, #16]
 803bc14:	6823      	ldr	r3, [r4, #0]
 803bc16:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 803bc1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 803bc1e:	558a      	strb	r2, [r1, r6]
 803bc20:	6862      	ldr	r2, [r4, #4]
 803bc22:	3a01      	subs	r2, #1
 803bc24:	e9c4 3200 	strd	r3, r2, [r4]
 803bc28:	6a3b      	ldr	r3, [r7, #32]
 803bc2a:	2b03      	cmp	r3, #3
 803bc2c:	d102      	bne.n	803bc34 <__ssvfscanf_r+0x6d0>
 803bc2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 803bc30:	2b04      	cmp	r3, #4
 803bc32:	d005      	beq.n	803bc40 <__ssvfscanf_r+0x6dc>
 803bc34:	2208      	movs	r2, #8
 803bc36:	2100      	movs	r1, #0
 803bc38:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 803bc3c:	f7fa f8d8 	bl	8035df0 <memset>
 803bc40:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 803bc44:	9300      	str	r3, [sp, #0]
 803bc46:	693b      	ldr	r3, [r7, #16]
 803bc48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803bc4a:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 803bc4e:	4629      	mov	r1, r5
 803bc50:	f002 fe58 	bl	803e904 <_mbrtowc_r>
 803bc54:	1c46      	adds	r6, r0, #1
 803bc56:	6238      	str	r0, [r7, #32]
 803bc58:	f43f ad46 	beq.w	803b6e8 <__ssvfscanf_r+0x184>
 803bc5c:	2800      	cmp	r0, #0
 803bc5e:	d14a      	bne.n	803bcf6 <__ssvfscanf_r+0x792>
 803bc60:	6028      	str	r0, [r5, #0]
 803bc62:	682e      	ldr	r6, [r5, #0]
 803bc64:	1c70      	adds	r0, r6, #1
 803bc66:	d056      	beq.n	803bd16 <__ssvfscanf_r+0x7b2>
 803bc68:	2208      	movs	r2, #8
 803bc6a:	2100      	movs	r1, #0
 803bc6c:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 803bc70:	f7fa f8be 	bl	8035df0 <memset>
 803bc74:	4b9a      	ldr	r3, [pc, #616]	@ (803bee0 <__ssvfscanf_r+0x97c>)
 803bc76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803bc78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 803bc7c:	60bb      	str	r3, [r7, #8]
 803bc7e:	4632      	mov	r2, r6
 803bc80:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 803bc84:	68be      	ldr	r6, [r7, #8]
 803bc86:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 803bc8a:	47b0      	blx	r6
 803bc8c:	2801      	cmp	r0, #1
 803bc8e:	d144      	bne.n	803bd1a <__ssvfscanf_r+0x7b6>
 803bc90:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 803bc94:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 803bc98:	5c9b      	ldrb	r3, [r3, r2]
 803bc9a:	2b00      	cmp	r3, #0
 803bc9c:	d148      	bne.n	803bd30 <__ssvfscanf_r+0x7cc>
 803bc9e:	f507 76a8 	add.w	r6, r7, #336	@ 0x150
 803bca2:	693b      	ldr	r3, [r7, #16]
 803bca4:	2b00      	cmp	r3, #0
 803bca6:	d13a      	bne.n	803bd1e <__ssvfscanf_r+0x7ba>
 803bca8:	f1ba 0f00 	cmp.w	sl, #0
 803bcac:	d115      	bne.n	803bcda <__ssvfscanf_r+0x776>
 803bcae:	f8c5 a000 	str.w	sl, [r5]
 803bcb2:	f1bb 0f00 	cmp.w	fp, #0
 803bcb6:	d00d      	beq.n	803bcd4 <__ssvfscanf_r+0x770>
 803bcb8:	eba5 0108 	sub.w	r1, r5, r8
 803bcbc:	108b      	asrs	r3, r1, #2
 803bcbe:	3301      	adds	r3, #1
 803bcc0:	4599      	cmp	r9, r3
 803bcc2:	d907      	bls.n	803bcd4 <__ssvfscanf_r+0x770>
 803bcc4:	f8db 0000 	ldr.w	r0, [fp]
 803bcc8:	3104      	adds	r1, #4
 803bcca:	f001 fa61 	bl	803d190 <realloc>
 803bcce:	b108      	cbz	r0, 803bcd4 <__ssvfscanf_r+0x770>
 803bcd0:	f8cb 0000 	str.w	r0, [fp]
 803bcd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803bcd6:	3301      	adds	r3, #1
 803bcd8:	627b      	str	r3, [r7, #36]	@ 0x24
 803bcda:	68fd      	ldr	r5, [r7, #12]
 803bcdc:	e45d      	b.n	803b59a <__ssvfscanf_r+0x36>
 803bcde:	f04f 0900 	mov.w	r9, #0
 803bce2:	60fd      	str	r5, [r7, #12]
 803bce4:	46c8      	mov	r8, r9
 803bce6:	46cb      	mov	fp, r9
 803bce8:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 803bcec:	e78a      	b.n	803bc04 <__ssvfscanf_r+0x6a0>
 803bcee:	46d1      	mov	r9, sl
 803bcf0:	46d0      	mov	r8, sl
 803bcf2:	46d3      	mov	fp, sl
 803bcf4:	e786      	b.n	803bc04 <__ssvfscanf_r+0x6a0>
 803bcf6:	6a3b      	ldr	r3, [r7, #32]
 803bcf8:	3302      	adds	r3, #2
 803bcfa:	d1b2      	bne.n	803bc62 <__ssvfscanf_r+0x6fe>
 803bcfc:	693e      	ldr	r6, [r7, #16]
 803bcfe:	6863      	ldr	r3, [r4, #4]
 803bd00:	2b00      	cmp	r3, #0
 803bd02:	dc40      	bgt.n	803bd86 <__ssvfscanf_r+0x822>
 803bd04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803bd06:	4621      	mov	r1, r4
 803bd08:	f7fd fa77 	bl	80391fa <__ssrefill_r>
 803bd0c:	2800      	cmp	r0, #0
 803bd0e:	d03a      	beq.n	803bd86 <__ssvfscanf_r+0x822>
 803bd10:	2e00      	cmp	r6, #0
 803bd12:	d0c9      	beq.n	803bca8 <__ssvfscanf_r+0x744>
 803bd14:	e4e8      	b.n	803b6e8 <__ssvfscanf_r+0x184>
 803bd16:	4632      	mov	r2, r6
 803bd18:	e7bc      	b.n	803bc94 <__ssvfscanf_r+0x730>
 803bd1a:	2200      	movs	r2, #0
 803bd1c:	e7ba      	b.n	803bc94 <__ssvfscanf_r+0x730>
 803bd1e:	693b      	ldr	r3, [r7, #16]
 803bd20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803bd22:	3b01      	subs	r3, #1
 803bd24:	4622      	mov	r2, r4
 803bd26:	5cf1      	ldrb	r1, [r6, r3]
 803bd28:	613b      	str	r3, [r7, #16]
 803bd2a:	f7fd fa2b 	bl	8039184 <_sungetc_r>
 803bd2e:	e7b8      	b.n	803bca2 <__ssvfscanf_r+0x73e>
 803bd30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 803bd32:	693a      	ldr	r2, [r7, #16]
 803bd34:	4413      	add	r3, r2
 803bd36:	633b      	str	r3, [r7, #48]	@ 0x30
 803bd38:	6a3b      	ldr	r3, [r7, #32]
 803bd3a:	2b03      	cmp	r3, #3
 803bd3c:	d102      	bne.n	803bd44 <__ssvfscanf_r+0x7e0>
 803bd3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 803bd40:	2b04      	cmp	r3, #4
 803bd42:	d002      	beq.n	803bd4a <__ssvfscanf_r+0x7e6>
 803bd44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803bd46:	3b01      	subs	r3, #1
 803bd48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803bd4a:	f1ba 0f00 	cmp.w	sl, #0
 803bd4e:	d118      	bne.n	803bd82 <__ssvfscanf_r+0x81e>
 803bd50:	3504      	adds	r5, #4
 803bd52:	f1bb 0f00 	cmp.w	fp, #0
 803bd56:	d014      	beq.n	803bd82 <__ssvfscanf_r+0x81e>
 803bd58:	eba5 0608 	sub.w	r6, r5, r8
 803bd5c:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 803bd60:	d80d      	bhi.n	803bd7e <__ssvfscanf_r+0x81a>
 803bd62:	4640      	mov	r0, r8
 803bd64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 803bd68:	f001 fa12 	bl	803d190 <realloc>
 803bd6c:	4680      	mov	r8, r0
 803bd6e:	2800      	cmp	r0, #0
 803bd70:	f43f adb3 	beq.w	803b8da <__ssvfscanf_r+0x376>
 803bd74:	1985      	adds	r5, r0, r6
 803bd76:	f8cb 0000 	str.w	r0, [fp]
 803bd7a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 803bd7e:	4656      	mov	r6, sl
 803bd80:	e7bd      	b.n	803bcfe <__ssvfscanf_r+0x79a>
 803bd82:	2600      	movs	r6, #0
 803bd84:	e7bb      	b.n	803bcfe <__ssvfscanf_r+0x79a>
 803bd86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803bd88:	2b00      	cmp	r3, #0
 803bd8a:	f47f af3c 	bne.w	803bc06 <__ssvfscanf_r+0x6a2>
 803bd8e:	e78b      	b.n	803bca8 <__ssvfscanf_r+0x744>
 803bd90:	f1ba 0f00 	cmp.w	sl, #0
 803bd94:	d01e      	beq.n	803bdd4 <__ssvfscanf_r+0x870>
 803bd96:	f107 0650 	add.w	r6, r7, #80	@ 0x50
 803bd9a:	6823      	ldr	r3, [r4, #0]
 803bd9c:	781a      	ldrb	r2, [r3, #0]
 803bd9e:	5cb2      	ldrb	r2, [r6, r2]
 803bda0:	b91a      	cbnz	r2, 803bdaa <__ssvfscanf_r+0x846>
 803bda2:	f1b8 0f00 	cmp.w	r8, #0
 803bda6:	d112      	bne.n	803bdce <__ssvfscanf_r+0x86a>
 803bda8:	e4d2      	b.n	803b750 <__ssvfscanf_r+0x1ec>
 803bdaa:	3301      	adds	r3, #1
 803bdac:	6862      	ldr	r2, [r4, #4]
 803bdae:	6023      	str	r3, [r4, #0]
 803bdb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803bdb2:	f108 0801 	add.w	r8, r8, #1
 803bdb6:	3a01      	subs	r2, #1
 803bdb8:	4543      	cmp	r3, r8
 803bdba:	6062      	str	r2, [r4, #4]
 803bdbc:	d007      	beq.n	803bdce <__ssvfscanf_r+0x86a>
 803bdbe:	2a00      	cmp	r2, #0
 803bdc0:	dceb      	bgt.n	803bd9a <__ssvfscanf_r+0x836>
 803bdc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803bdc4:	4621      	mov	r1, r4
 803bdc6:	f7fd fa18 	bl	80391fa <__ssrefill_r>
 803bdca:	2800      	cmp	r0, #0
 803bdcc:	d0e5      	beq.n	803bd9a <__ssvfscanf_r+0x836>
 803bdce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 803bdd0:	4443      	add	r3, r8
 803bdd2:	e674      	b.n	803babe <__ssvfscanf_r+0x55a>
 803bdd4:	46a9      	mov	r9, r5
 803bdd6:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 803bdda:	f859 8b04 	ldr.w	r8, [r9], #4
 803bdde:	d07d      	beq.n	803bedc <__ssvfscanf_r+0x978>
 803bde0:	f1b8 0f00 	cmp.w	r8, #0
 803bde4:	f43f acb4 	beq.w	803b750 <__ssvfscanf_r+0x1ec>
 803bde8:	2020      	movs	r0, #32
 803bdea:	f7fc fa47 	bl	803827c <malloc>
 803bdee:	4606      	mov	r6, r0
 803bdf0:	2800      	cmp	r0, #0
 803bdf2:	f43f ac7e 	beq.w	803b6f2 <__ssvfscanf_r+0x18e>
 803bdf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803bdf8:	f8c8 0000 	str.w	r0, [r8]
 803bdfc:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 803be00:	889d      	ldrh	r5, [r3, #4]
 803be02:	45aa      	cmp	sl, r5
 803be04:	d311      	bcc.n	803be2a <__ssvfscanf_r+0x8c6>
 803be06:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 803be0a:	429d      	cmp	r5, r3
 803be0c:	f200 8512 	bhi.w	803c834 <__ssvfscanf_r+0x12d0>
 803be10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803be12:	3508      	adds	r5, #8
 803be14:	b2ad      	uxth	r5, r5
 803be16:	6818      	ldr	r0, [r3, #0]
 803be18:	00a9      	lsls	r1, r5, #2
 803be1a:	f001 f9b9 	bl	803d190 <realloc>
 803be1e:	2800      	cmp	r0, #0
 803be20:	f000 8508 	beq.w	803c834 <__ssvfscanf_r+0x12d0>
 803be24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803be26:	6018      	str	r0, [r3, #0]
 803be28:	809d      	strh	r5, [r3, #4]
 803be2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803be2c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 803be2e:	681b      	ldr	r3, [r3, #0]
 803be30:	f10a 0201 	add.w	r2, sl, #1
 803be34:	f843 802a 	str.w	r8, [r3, sl, lsl #2]
 803be38:	80ca      	strh	r2, [r1, #6]
 803be3a:	46c2      	mov	sl, r8
 803be3c:	46b0      	mov	r8, r6
 803be3e:	2620      	movs	r6, #32
 803be40:	4645      	mov	r5, r8
 803be42:	6823      	ldr	r3, [r4, #0]
 803be44:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 803be48:	781a      	ldrb	r2, [r3, #0]
 803be4a:	5c8a      	ldrb	r2, [r1, r2]
 803be4c:	b35a      	cbz	r2, 803bea6 <__ssvfscanf_r+0x942>
 803be4e:	6862      	ldr	r2, [r4, #4]
 803be50:	3a01      	subs	r2, #1
 803be52:	6062      	str	r2, [r4, #4]
 803be54:	1c5a      	adds	r2, r3, #1
 803be56:	6022      	str	r2, [r4, #0]
 803be58:	781b      	ldrb	r3, [r3, #0]
 803be5a:	f808 3b01 	strb.w	r3, [r8], #1
 803be5e:	f1ba 0f00 	cmp.w	sl, #0
 803be62:	d010      	beq.n	803be86 <__ssvfscanf_r+0x922>
 803be64:	eba8 0b05 	sub.w	fp, r8, r5
 803be68:	45b3      	cmp	fp, r6
 803be6a:	d30c      	bcc.n	803be86 <__ssvfscanf_r+0x922>
 803be6c:	0076      	lsls	r6, r6, #1
 803be6e:	4628      	mov	r0, r5
 803be70:	4631      	mov	r1, r6
 803be72:	f001 f98d 	bl	803d190 <realloc>
 803be76:	4605      	mov	r5, r0
 803be78:	2800      	cmp	r0, #0
 803be7a:	f43f ac3a 	beq.w	803b6f2 <__ssvfscanf_r+0x18e>
 803be7e:	eb00 080b 	add.w	r8, r0, fp
 803be82:	f8ca 0000 	str.w	r0, [sl]
 803be86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803be88:	3b01      	subs	r3, #1
 803be8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803be8c:	d00b      	beq.n	803bea6 <__ssvfscanf_r+0x942>
 803be8e:	6863      	ldr	r3, [r4, #4]
 803be90:	2b00      	cmp	r3, #0
 803be92:	dcd6      	bgt.n	803be42 <__ssvfscanf_r+0x8de>
 803be94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803be96:	4621      	mov	r1, r4
 803be98:	f7fd f9af 	bl	80391fa <__ssrefill_r>
 803be9c:	2800      	cmp	r0, #0
 803be9e:	d0d0      	beq.n	803be42 <__ssvfscanf_r+0x8de>
 803bea0:	45a8      	cmp	r8, r5
 803bea2:	f43f ac21 	beq.w	803b6e8 <__ssvfscanf_r+0x184>
 803bea6:	ebb8 0505 	subs.w	r5, r8, r5
 803beaa:	f43f ac51 	beq.w	803b750 <__ssvfscanf_r+0x1ec>
 803beae:	2300      	movs	r3, #0
 803beb0:	f888 3000 	strb.w	r3, [r8]
 803beb4:	f1ba 0f00 	cmp.w	sl, #0
 803beb8:	d009      	beq.n	803bece <__ssvfscanf_r+0x96a>
 803beba:	1c69      	adds	r1, r5, #1
 803bebc:	428e      	cmp	r6, r1
 803bebe:	d906      	bls.n	803bece <__ssvfscanf_r+0x96a>
 803bec0:	f8da 0000 	ldr.w	r0, [sl]
 803bec4:	f001 f964 	bl	803d190 <realloc>
 803bec8:	b108      	cbz	r0, 803bece <__ssvfscanf_r+0x96a>
 803beca:	f8ca 0000 	str.w	r0, [sl]
 803bece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803bed0:	3301      	adds	r3, #1
 803bed2:	627b      	str	r3, [r7, #36]	@ 0x24
 803bed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 803bed6:	442b      	add	r3, r5
 803bed8:	633b      	str	r3, [r7, #48]	@ 0x30
 803beda:	e64a      	b.n	803bb72 <__ssvfscanf_r+0x60e>
 803bedc:	46b2      	mov	sl, r6
 803bede:	e7af      	b.n	803be40 <__ssvfscanf_r+0x8dc>
 803bee0:	200002c4 	.word	0x200002c4
 803bee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803bee6:	2b00      	cmp	r3, #0
 803bee8:	bf08      	it	eq
 803beea:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 803beee:	f016 0901 	ands.w	r9, r6, #1
 803bef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803bef4:	f006 0810 	and.w	r8, r6, #16
 803bef8:	f000 80ef 	beq.w	803c0da <__ssvfscanf_r+0xb76>
 803befc:	f1b8 0f00 	cmp.w	r8, #0
 803bf00:	f040 8098 	bne.w	803c034 <__ssvfscanf_r+0xad0>
 803bf04:	462b      	mov	r3, r5
 803bf06:	0631      	lsls	r1, r6, #24
 803bf08:	f853 5b04 	ldr.w	r5, [r3], #4
 803bf0c:	613b      	str	r3, [r7, #16]
 803bf0e:	f140 8099 	bpl.w	803c044 <__ssvfscanf_r+0xae0>
 803bf12:	2d00      	cmp	r5, #0
 803bf14:	f43f ace4 	beq.w	803b8e0 <__ssvfscanf_r+0x37c>
 803bf18:	2080      	movs	r0, #128	@ 0x80
 803bf1a:	f7fc f9af 	bl	803827c <malloc>
 803bf1e:	4606      	mov	r6, r0
 803bf20:	2800      	cmp	r0, #0
 803bf22:	f43f acda 	beq.w	803b8da <__ssvfscanf_r+0x376>
 803bf26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803bf28:	6028      	str	r0, [r5, #0]
 803bf2a:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 803bf2e:	889b      	ldrh	r3, [r3, #4]
 803bf30:	4599      	cmp	r9, r3
 803bf32:	d314      	bcc.n	803bf5e <__ssvfscanf_r+0x9fa>
 803bf34:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 803bf38:	4293      	cmp	r3, r2
 803bf3a:	f200 847b 	bhi.w	803c834 <__ssvfscanf_r+0x12d0>
 803bf3e:	3308      	adds	r3, #8
 803bf40:	fa1f fa83 	uxth.w	sl, r3
 803bf44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803bf46:	ea4f 018a 	mov.w	r1, sl, lsl #2
 803bf4a:	6818      	ldr	r0, [r3, #0]
 803bf4c:	f001 f920 	bl	803d190 <realloc>
 803bf50:	2800      	cmp	r0, #0
 803bf52:	f000 846f 	beq.w	803c834 <__ssvfscanf_r+0x12d0>
 803bf56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803bf58:	6018      	str	r0, [r3, #0]
 803bf5a:	f8a3 a004 	strh.w	sl, [r3, #4]
 803bf5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803bf60:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 803bf62:	681b      	ldr	r3, [r3, #0]
 803bf64:	f109 0201 	add.w	r2, r9, #1
 803bf68:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 803bf6c:	46aa      	mov	sl, r5
 803bf6e:	80ca      	strh	r2, [r1, #6]
 803bf70:	4635      	mov	r5, r6
 803bf72:	f04f 0920 	mov.w	r9, #32
 803bf76:	2300      	movs	r3, #0
 803bf78:	6822      	ldr	r2, [r4, #0]
 803bf7a:	49a7      	ldr	r1, [pc, #668]	@ (803c218 <__ssvfscanf_r+0xcb4>)
 803bf7c:	7812      	ldrb	r2, [r2, #0]
 803bf7e:	5c8a      	ldrb	r2, [r1, r2]
 803bf80:	0710      	lsls	r0, r2, #28
 803bf82:	d43c      	bmi.n	803bffe <__ssvfscanf_r+0xa9a>
 803bf84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 803bf86:	2a00      	cmp	r2, #0
 803bf88:	d039      	beq.n	803bffe <__ssvfscanf_r+0xa9a>
 803bf8a:	60fb      	str	r3, [r7, #12]
 803bf8c:	f7fb f8b8 	bl	8037100 <__locale_mb_cur_max>
 803bf90:	68fb      	ldr	r3, [r7, #12]
 803bf92:	4298      	cmp	r0, r3
 803bf94:	f43f aba8 	beq.w	803b6e8 <__ssvfscanf_r+0x184>
 803bf98:	6822      	ldr	r2, [r4, #0]
 803bf9a:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 803bf9e:	f812 0b01 	ldrb.w	r0, [r2], #1
 803bfa2:	54c8      	strb	r0, [r1, r3]
 803bfa4:	f103 0b01 	add.w	fp, r3, #1
 803bfa8:	6863      	ldr	r3, [r4, #4]
 803bfaa:	3b01      	subs	r3, #1
 803bfac:	e9c4 2300 	strd	r2, r3, [r4]
 803bfb0:	6a3b      	ldr	r3, [r7, #32]
 803bfb2:	2b03      	cmp	r3, #3
 803bfb4:	d102      	bne.n	803bfbc <__ssvfscanf_r+0xa58>
 803bfb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 803bfb8:	2b04      	cmp	r3, #4
 803bfba:	d005      	beq.n	803bfc8 <__ssvfscanf_r+0xa64>
 803bfbc:	2208      	movs	r2, #8
 803bfbe:	2100      	movs	r1, #0
 803bfc0:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 803bfc4:	f7f9 ff14 	bl	8035df0 <memset>
 803bfc8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 803bfcc:	9300      	str	r3, [sp, #0]
 803bfce:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 803bfd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803bfd4:	465b      	mov	r3, fp
 803bfd6:	4629      	mov	r1, r5
 803bfd8:	f002 fc94 	bl	803e904 <_mbrtowc_r>
 803bfdc:	1c42      	adds	r2, r0, #1
 803bfde:	6238      	str	r0, [r7, #32]
 803bfe0:	f43f ab82 	beq.w	803b6e8 <__ssvfscanf_r+0x184>
 803bfe4:	bb90      	cbnz	r0, 803c04c <__ssvfscanf_r+0xae8>
 803bfe6:	6028      	str	r0, [r5, #0]
 803bfe8:	6828      	ldr	r0, [r5, #0]
 803bfea:	f002 fca5 	bl	803e938 <iswspace>
 803bfee:	4603      	mov	r3, r0
 803bff0:	2800      	cmp	r0, #0
 803bff2:	d047      	beq.n	803c084 <__ssvfscanf_r+0xb20>
 803bff4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 803bff8:	f1bb 0f00 	cmp.w	fp, #0
 803bffc:	d139      	bne.n	803c072 <__ssvfscanf_r+0xb0e>
 803bffe:	f1b8 0f00 	cmp.w	r8, #0
 803c002:	d114      	bne.n	803c02e <__ssvfscanf_r+0xaca>
 803c004:	f8c5 8000 	str.w	r8, [r5]
 803c008:	f1ba 0f00 	cmp.w	sl, #0
 803c00c:	d00c      	beq.n	803c028 <__ssvfscanf_r+0xac4>
 803c00e:	1ba9      	subs	r1, r5, r6
 803c010:	108b      	asrs	r3, r1, #2
 803c012:	3301      	adds	r3, #1
 803c014:	4599      	cmp	r9, r3
 803c016:	d907      	bls.n	803c028 <__ssvfscanf_r+0xac4>
 803c018:	f8da 0000 	ldr.w	r0, [sl]
 803c01c:	3104      	adds	r1, #4
 803c01e:	f001 f8b7 	bl	803d190 <realloc>
 803c022:	b108      	cbz	r0, 803c028 <__ssvfscanf_r+0xac4>
 803c024:	f8ca 0000 	str.w	r0, [sl]
 803c028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803c02a:	3301      	adds	r3, #1
 803c02c:	627b      	str	r3, [r7, #36]	@ 0x24
 803c02e:	693d      	ldr	r5, [r7, #16]
 803c030:	f7ff bab3 	b.w	803b59a <__ssvfscanf_r+0x36>
 803c034:	f04f 0900 	mov.w	r9, #0
 803c038:	613d      	str	r5, [r7, #16]
 803c03a:	464e      	mov	r6, r9
 803c03c:	46ca      	mov	sl, r9
 803c03e:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 803c042:	e798      	b.n	803bf76 <__ssvfscanf_r+0xa12>
 803c044:	46c1      	mov	r9, r8
 803c046:	4646      	mov	r6, r8
 803c048:	46c2      	mov	sl, r8
 803c04a:	e794      	b.n	803bf76 <__ssvfscanf_r+0xa12>
 803c04c:	6a3b      	ldr	r3, [r7, #32]
 803c04e:	3302      	adds	r3, #2
 803c050:	d1ca      	bne.n	803bfe8 <__ssvfscanf_r+0xa84>
 803c052:	465b      	mov	r3, fp
 803c054:	6862      	ldr	r2, [r4, #4]
 803c056:	2a00      	cmp	r2, #0
 803c058:	dc8e      	bgt.n	803bf78 <__ssvfscanf_r+0xa14>
 803c05a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803c05c:	60fb      	str	r3, [r7, #12]
 803c05e:	4621      	mov	r1, r4
 803c060:	f7fd f8cb 	bl	80391fa <__ssrefill_r>
 803c064:	68fb      	ldr	r3, [r7, #12]
 803c066:	2800      	cmp	r0, #0
 803c068:	d086      	beq.n	803bf78 <__ssvfscanf_r+0xa14>
 803c06a:	2b00      	cmp	r3, #0
 803c06c:	f47f ab3c 	bne.w	803b6e8 <__ssvfscanf_r+0x184>
 803c070:	e7c5      	b.n	803bffe <__ssvfscanf_r+0xa9a>
 803c072:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 803c076:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803c078:	f813 100b 	ldrb.w	r1, [r3, fp]
 803c07c:	4622      	mov	r2, r4
 803c07e:	f7fd f881 	bl	8039184 <_sungetc_r>
 803c082:	e7b7      	b.n	803bff4 <__ssvfscanf_r+0xa90>
 803c084:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 803c086:	445a      	add	r2, fp
 803c088:	633a      	str	r2, [r7, #48]	@ 0x30
 803c08a:	6a3a      	ldr	r2, [r7, #32]
 803c08c:	2a03      	cmp	r2, #3
 803c08e:	d102      	bne.n	803c096 <__ssvfscanf_r+0xb32>
 803c090:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 803c092:	2a04      	cmp	r2, #4
 803c094:	d002      	beq.n	803c09c <__ssvfscanf_r+0xb38>
 803c096:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 803c098:	3a01      	subs	r2, #1
 803c09a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 803c09c:	f1b8 0f00 	cmp.w	r8, #0
 803c0a0:	d1d8      	bne.n	803c054 <__ssvfscanf_r+0xaf0>
 803c0a2:	3504      	adds	r5, #4
 803c0a4:	f1ba 0f00 	cmp.w	sl, #0
 803c0a8:	d015      	beq.n	803c0d6 <__ssvfscanf_r+0xb72>
 803c0aa:	eba5 0b06 	sub.w	fp, r5, r6
 803c0ae:	ebb9 0fab 	cmp.w	r9, fp, asr #2
 803c0b2:	d80e      	bhi.n	803c0d2 <__ssvfscanf_r+0xb6e>
 803c0b4:	4630      	mov	r0, r6
 803c0b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 803c0ba:	f001 f869 	bl	803d190 <realloc>
 803c0be:	4606      	mov	r6, r0
 803c0c0:	2800      	cmp	r0, #0
 803c0c2:	f43f ac0a 	beq.w	803b8da <__ssvfscanf_r+0x376>
 803c0c6:	eb00 050b 	add.w	r5, r0, fp
 803c0ca:	f8ca 0000 	str.w	r0, [sl]
 803c0ce:	ea4f 0949 	mov.w	r9, r9, lsl #1
 803c0d2:	4643      	mov	r3, r8
 803c0d4:	e7be      	b.n	803c054 <__ssvfscanf_r+0xaf0>
 803c0d6:	4653      	mov	r3, sl
 803c0d8:	e7bc      	b.n	803c054 <__ssvfscanf_r+0xaf0>
 803c0da:	f1b8 0f00 	cmp.w	r8, #0
 803c0de:	d01a      	beq.n	803c116 <__ssvfscanf_r+0xbb2>
 803c0e0:	4e4d      	ldr	r6, [pc, #308]	@ (803c218 <__ssvfscanf_r+0xcb4>)
 803c0e2:	6823      	ldr	r3, [r4, #0]
 803c0e4:	781a      	ldrb	r2, [r3, #0]
 803c0e6:	5cb2      	ldrb	r2, [r6, r2]
 803c0e8:	0711      	lsls	r1, r2, #28
 803c0ea:	d411      	bmi.n	803c110 <__ssvfscanf_r+0xbac>
 803c0ec:	3301      	adds	r3, #1
 803c0ee:	6862      	ldr	r2, [r4, #4]
 803c0f0:	6023      	str	r3, [r4, #0]
 803c0f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803c0f4:	f109 0901 	add.w	r9, r9, #1
 803c0f8:	3a01      	subs	r2, #1
 803c0fa:	454b      	cmp	r3, r9
 803c0fc:	6062      	str	r2, [r4, #4]
 803c0fe:	d007      	beq.n	803c110 <__ssvfscanf_r+0xbac>
 803c100:	2a00      	cmp	r2, #0
 803c102:	dcee      	bgt.n	803c0e2 <__ssvfscanf_r+0xb7e>
 803c104:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803c106:	4621      	mov	r1, r4
 803c108:	f7fd f877 	bl	80391fa <__ssrefill_r>
 803c10c:	2800      	cmp	r0, #0
 803c10e:	d0e8      	beq.n	803c0e2 <__ssvfscanf_r+0xb7e>
 803c110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 803c112:	444b      	add	r3, r9
 803c114:	e4d3      	b.n	803babe <__ssvfscanf_r+0x55a>
 803c116:	46a8      	mov	r8, r5
 803c118:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 803c11c:	f858 5b04 	ldr.w	r5, [r8], #4
 803c120:	d077      	beq.n	803c212 <__ssvfscanf_r+0xcae>
 803c122:	2d00      	cmp	r5, #0
 803c124:	f43f ab14 	beq.w	803b750 <__ssvfscanf_r+0x1ec>
 803c128:	2020      	movs	r0, #32
 803c12a:	f7fc f8a7 	bl	803827c <malloc>
 803c12e:	4681      	mov	r9, r0
 803c130:	2800      	cmp	r0, #0
 803c132:	f43f aade 	beq.w	803b6f2 <__ssvfscanf_r+0x18e>
 803c136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803c138:	6028      	str	r0, [r5, #0]
 803c13a:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 803c13e:	889e      	ldrh	r6, [r3, #4]
 803c140:	45b2      	cmp	sl, r6
 803c142:	d311      	bcc.n	803c168 <__ssvfscanf_r+0xc04>
 803c144:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 803c148:	429e      	cmp	r6, r3
 803c14a:	f200 8373 	bhi.w	803c834 <__ssvfscanf_r+0x12d0>
 803c14e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803c150:	3608      	adds	r6, #8
 803c152:	b2b6      	uxth	r6, r6
 803c154:	6818      	ldr	r0, [r3, #0]
 803c156:	00b1      	lsls	r1, r6, #2
 803c158:	f001 f81a 	bl	803d190 <realloc>
 803c15c:	2800      	cmp	r0, #0
 803c15e:	f000 8369 	beq.w	803c834 <__ssvfscanf_r+0x12d0>
 803c162:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803c164:	6018      	str	r0, [r3, #0]
 803c166:	809e      	strh	r6, [r3, #4]
 803c168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803c16a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 803c16c:	681b      	ldr	r3, [r3, #0]
 803c16e:	f10a 0201 	add.w	r2, sl, #1
 803c172:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 803c176:	80ca      	strh	r2, [r1, #6]
 803c178:	46aa      	mov	sl, r5
 803c17a:	2620      	movs	r6, #32
 803c17c:	464d      	mov	r5, r9
 803c17e:	46a9      	mov	r9, r5
 803c180:	6823      	ldr	r3, [r4, #0]
 803c182:	4925      	ldr	r1, [pc, #148]	@ (803c218 <__ssvfscanf_r+0xcb4>)
 803c184:	781a      	ldrb	r2, [r3, #0]
 803c186:	5c8a      	ldrb	r2, [r1, r2]
 803c188:	0712      	lsls	r2, r2, #28
 803c18a:	d428      	bmi.n	803c1de <__ssvfscanf_r+0xc7a>
 803c18c:	6862      	ldr	r2, [r4, #4]
 803c18e:	3a01      	subs	r2, #1
 803c190:	6062      	str	r2, [r4, #4]
 803c192:	1c5a      	adds	r2, r3, #1
 803c194:	6022      	str	r2, [r4, #0]
 803c196:	781b      	ldrb	r3, [r3, #0]
 803c198:	f805 3b01 	strb.w	r3, [r5], #1
 803c19c:	f1ba 0f00 	cmp.w	sl, #0
 803c1a0:	d010      	beq.n	803c1c4 <__ssvfscanf_r+0xc60>
 803c1a2:	eba5 0b09 	sub.w	fp, r5, r9
 803c1a6:	45b3      	cmp	fp, r6
 803c1a8:	d30c      	bcc.n	803c1c4 <__ssvfscanf_r+0xc60>
 803c1aa:	0076      	lsls	r6, r6, #1
 803c1ac:	4648      	mov	r0, r9
 803c1ae:	4631      	mov	r1, r6
 803c1b0:	f000 ffee 	bl	803d190 <realloc>
 803c1b4:	4681      	mov	r9, r0
 803c1b6:	2800      	cmp	r0, #0
 803c1b8:	f43f aa9b 	beq.w	803b6f2 <__ssvfscanf_r+0x18e>
 803c1bc:	eb00 050b 	add.w	r5, r0, fp
 803c1c0:	f8ca 0000 	str.w	r0, [sl]
 803c1c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803c1c6:	3b01      	subs	r3, #1
 803c1c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803c1ca:	d008      	beq.n	803c1de <__ssvfscanf_r+0xc7a>
 803c1cc:	6863      	ldr	r3, [r4, #4]
 803c1ce:	2b00      	cmp	r3, #0
 803c1d0:	dcd6      	bgt.n	803c180 <__ssvfscanf_r+0xc1c>
 803c1d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803c1d4:	4621      	mov	r1, r4
 803c1d6:	f7fd f810 	bl	80391fa <__ssrefill_r>
 803c1da:	2800      	cmp	r0, #0
 803c1dc:	d0d0      	beq.n	803c180 <__ssvfscanf_r+0xc1c>
 803c1de:	2300      	movs	r3, #0
 803c1e0:	702b      	strb	r3, [r5, #0]
 803c1e2:	eba5 0509 	sub.w	r5, r5, r9
 803c1e6:	f1ba 0f00 	cmp.w	sl, #0
 803c1ea:	d009      	beq.n	803c200 <__ssvfscanf_r+0xc9c>
 803c1ec:	1c69      	adds	r1, r5, #1
 803c1ee:	428e      	cmp	r6, r1
 803c1f0:	d906      	bls.n	803c200 <__ssvfscanf_r+0xc9c>
 803c1f2:	f8da 0000 	ldr.w	r0, [sl]
 803c1f6:	f000 ffcb 	bl	803d190 <realloc>
 803c1fa:	b108      	cbz	r0, 803c200 <__ssvfscanf_r+0xc9c>
 803c1fc:	f8ca 0000 	str.w	r0, [sl]
 803c200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 803c202:	442b      	add	r3, r5
 803c204:	633b      	str	r3, [r7, #48]	@ 0x30
 803c206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803c208:	3301      	adds	r3, #1
 803c20a:	627b      	str	r3, [r7, #36]	@ 0x24
 803c20c:	4645      	mov	r5, r8
 803c20e:	f7ff b9c4 	b.w	803b59a <__ssvfscanf_r+0x36>
 803c212:	46b2      	mov	sl, r6
 803c214:	e7b3      	b.n	803c17e <__ssvfscanf_r+0xc1a>
 803c216:	bf00      	nop
 803c218:	08044b59 	.word	0x08044b59
 803c21c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803c21e:	3b01      	subs	r3, #1
 803c220:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 803c224:	bf81      	itttt	hi
 803c226:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 803c228:	f46f 7cae 	mvnhi.w	ip, #348	@ 0x15c
 803c22c:	eb03 090c 	addhi.w	r9, r3, ip
 803c230:	f240 135d 	movwhi	r3, #349	@ 0x15d
 803c234:	bf8c      	ite	hi
 803c236:	62fb      	strhi	r3, [r7, #44]	@ 0x2c
 803c238:	f04f 0900 	movls.w	r9, #0
 803c23c:	f446 6b58 	orr.w	fp, r6, #3456	@ 0xd80
 803c240:	f04f 0a00 	mov.w	sl, #0
 803c244:	f507 78a8 	add.w	r8, r7, #336	@ 0x150
 803c248:	6822      	ldr	r2, [r4, #0]
 803c24a:	7813      	ldrb	r3, [r2, #0]
 803c24c:	2b39      	cmp	r3, #57	@ 0x39
 803c24e:	d80f      	bhi.n	803c270 <__ssvfscanf_r+0xd0c>
 803c250:	2b2a      	cmp	r3, #42	@ 0x2a
 803c252:	d91a      	bls.n	803c28a <__ssvfscanf_r+0xd26>
 803c254:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 803c258:	290e      	cmp	r1, #14
 803c25a:	d816      	bhi.n	803c28a <__ssvfscanf_r+0xd26>
 803c25c:	e8df f001 	tbb	[pc, r1]
 803c260:	15781578 	.word	0x15781578
 803c264:	68683f15 	.word	0x68683f15
 803c268:	68686868 	.word	0x68686868
 803c26c:	7068      	.short	0x7068
 803c26e:	70          	.byte	0x70
 803c26f:	00          	.byte	0x00
 803c270:	2b66      	cmp	r3, #102	@ 0x66
 803c272:	d832      	bhi.n	803c2da <__ssvfscanf_r+0xd76>
 803c274:	2b60      	cmp	r3, #96	@ 0x60
 803c276:	d803      	bhi.n	803c280 <__ssvfscanf_r+0xd1c>
 803c278:	2b46      	cmp	r3, #70	@ 0x46
 803c27a:	d804      	bhi.n	803c286 <__ssvfscanf_r+0xd22>
 803c27c:	2b40      	cmp	r3, #64	@ 0x40
 803c27e:	d904      	bls.n	803c28a <__ssvfscanf_r+0xd26>
 803c280:	69f9      	ldr	r1, [r7, #28]
 803c282:	290a      	cmp	r1, #10
 803c284:	e062      	b.n	803c34c <__ssvfscanf_r+0xde8>
 803c286:	2b58      	cmp	r3, #88	@ 0x58
 803c288:	d068      	beq.n	803c35c <__ssvfscanf_r+0xdf8>
 803c28a:	f41b 7f80 	tst.w	fp, #256	@ 0x100
 803c28e:	d011      	beq.n	803c2b4 <__ssvfscanf_r+0xd50>
 803c290:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 803c294:	4598      	cmp	r8, r3
 803c296:	d908      	bls.n	803c2aa <__ssvfscanf_r+0xd46>
 803c298:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 803c29c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803c29e:	4622      	mov	r2, r4
 803c2a0:	f7fc ff70 	bl	8039184 <_sungetc_r>
 803c2a4:	f108 39ff 	add.w	r9, r8, #4294967295	@ 0xffffffff
 803c2a8:	46c8      	mov	r8, r9
 803c2aa:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 803c2ae:	4598      	cmp	r8, r3
 803c2b0:	f43f aa4e 	beq.w	803b750 <__ssvfscanf_r+0x1ec>
 803c2b4:	f01b 0210 	ands.w	r2, fp, #16
 803c2b8:	d16c      	bne.n	803c394 <__ssvfscanf_r+0xe30>
 803c2ba:	69fb      	ldr	r3, [r7, #28]
 803c2bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803c2be:	69be      	ldr	r6, [r7, #24]
 803c2c0:	f888 2000 	strb.w	r2, [r8]
 803c2c4:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 803c2c8:	47b0      	blx	r6
 803c2ca:	f01b 0f20 	tst.w	fp, #32
 803c2ce:	f105 0904 	add.w	r9, r5, #4
 803c2d2:	d056      	beq.n	803c382 <__ssvfscanf_r+0xe1e>
 803c2d4:	682b      	ldr	r3, [r5, #0]
 803c2d6:	6018      	str	r0, [r3, #0]
 803c2d8:	e058      	b.n	803c38c <__ssvfscanf_r+0xe28>
 803c2da:	2b78      	cmp	r3, #120	@ 0x78
 803c2dc:	e7d4      	b.n	803c288 <__ssvfscanf_r+0xd24>
 803c2de:	f41b 6f00 	tst.w	fp, #2048	@ 0x800
 803c2e2:	d00a      	beq.n	803c2fa <__ssvfscanf_r+0xd96>
 803c2e4:	69f9      	ldr	r1, [r7, #28]
 803c2e6:	b919      	cbnz	r1, 803c2f0 <__ssvfscanf_r+0xd8c>
 803c2e8:	2108      	movs	r1, #8
 803c2ea:	f44b 7b00 	orr.w	fp, fp, #512	@ 0x200
 803c2ee:	61f9      	str	r1, [r7, #28]
 803c2f0:	f41b 6f80 	tst.w	fp, #1024	@ 0x400
 803c2f4:	d004      	beq.n	803c300 <__ssvfscanf_r+0xd9c>
 803c2f6:	f42b 6bb0 	bic.w	fp, fp, #1408	@ 0x580
 803c2fa:	f808 3b01 	strb.w	r3, [r8], #1
 803c2fe:	e00b      	b.n	803c318 <__ssvfscanf_r+0xdb4>
 803c300:	f42b 7b60 	bic.w	fp, fp, #896	@ 0x380
 803c304:	f1b9 0f00 	cmp.w	r9, #0
 803c308:	d004      	beq.n	803c314 <__ssvfscanf_r+0xdb0>
 803c30a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803c30c:	3301      	adds	r3, #1
 803c30e:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 803c312:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803c314:	f10a 0a01 	add.w	sl, sl, #1
 803c318:	6863      	ldr	r3, [r4, #4]
 803c31a:	3b01      	subs	r3, #1
 803c31c:	2b00      	cmp	r3, #0
 803c31e:	6063      	str	r3, [r4, #4]
 803c320:	dd28      	ble.n	803c374 <__ssvfscanf_r+0xe10>
 803c322:	3201      	adds	r2, #1
 803c324:	6022      	str	r2, [r4, #0]
 803c326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803c328:	3b01      	subs	r3, #1
 803c32a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803c32c:	d18c      	bne.n	803c248 <__ssvfscanf_r+0xce4>
 803c32e:	e7ac      	b.n	803c28a <__ssvfscanf_r+0xd26>
 803c330:	69f8      	ldr	r0, [r7, #28]
 803c332:	499b      	ldr	r1, [pc, #620]	@ (803c5a0 <__ssvfscanf_r+0x103c>)
 803c334:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 803c338:	61f9      	str	r1, [r7, #28]
 803c33a:	f42b 6b38 	bic.w	fp, fp, #2944	@ 0xb80
 803c33e:	e7dc      	b.n	803c2fa <__ssvfscanf_r+0xd96>
 803c340:	69f8      	ldr	r0, [r7, #28]
 803c342:	4997      	ldr	r1, [pc, #604]	@ (803c5a0 <__ssvfscanf_r+0x103c>)
 803c344:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 803c348:	61f9      	str	r1, [r7, #28]
 803c34a:	2908      	cmp	r1, #8
 803c34c:	dcf5      	bgt.n	803c33a <__ssvfscanf_r+0xdd6>
 803c34e:	e79c      	b.n	803c28a <__ssvfscanf_r+0xd26>
 803c350:	f01b 0f80 	tst.w	fp, #128	@ 0x80
 803c354:	d099      	beq.n	803c28a <__ssvfscanf_r+0xd26>
 803c356:	f02b 0b80 	bic.w	fp, fp, #128	@ 0x80
 803c35a:	e7ce      	b.n	803c2fa <__ssvfscanf_r+0xd96>
 803c35c:	f40b 61c0 	and.w	r1, fp, #1536	@ 0x600
 803c360:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 803c364:	d191      	bne.n	803c28a <__ssvfscanf_r+0xd26>
 803c366:	f42b 7600 	bic.w	r6, fp, #512	@ 0x200
 803c36a:	2110      	movs	r1, #16
 803c36c:	f446 6ba0 	orr.w	fp, r6, #1280	@ 0x500
 803c370:	61f9      	str	r1, [r7, #28]
 803c372:	e7c2      	b.n	803c2fa <__ssvfscanf_r+0xd96>
 803c374:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803c376:	4621      	mov	r1, r4
 803c378:	f7fc ff3f 	bl	80391fa <__ssrefill_r>
 803c37c:	2800      	cmp	r0, #0
 803c37e:	d0d2      	beq.n	803c326 <__ssvfscanf_r+0xdc2>
 803c380:	e783      	b.n	803c28a <__ssvfscanf_r+0xd26>
 803c382:	f01b 0f08 	tst.w	fp, #8
 803c386:	d00b      	beq.n	803c3a0 <__ssvfscanf_r+0xe3c>
 803c388:	682b      	ldr	r3, [r5, #0]
 803c38a:	7018      	strb	r0, [r3, #0]
 803c38c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803c38e:	3301      	adds	r3, #1
 803c390:	627b      	str	r3, [r7, #36]	@ 0x24
 803c392:	464d      	mov	r5, r9
 803c394:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 803c398:	eba8 0803 	sub.w	r8, r8, r3
 803c39c:	44d0      	add	r8, sl
 803c39e:	e516      	b.n	803bdce <__ssvfscanf_r+0x86a>
 803c3a0:	f01b 0f04 	tst.w	fp, #4
 803c3a4:	d002      	beq.n	803c3ac <__ssvfscanf_r+0xe48>
 803c3a6:	682b      	ldr	r3, [r5, #0]
 803c3a8:	8018      	strh	r0, [r3, #0]
 803c3aa:	e7ef      	b.n	803c38c <__ssvfscanf_r+0xe28>
 803c3ac:	f01b 0201 	ands.w	r2, fp, #1
 803c3b0:	d190      	bne.n	803c2d4 <__ssvfscanf_r+0xd70>
 803c3b2:	f01b 0f02 	tst.w	fp, #2
 803c3b6:	d08d      	beq.n	803c2d4 <__ssvfscanf_r+0xd70>
 803c3b8:	4b7a      	ldr	r3, [pc, #488]	@ (803c5a4 <__ssvfscanf_r+0x1040>)
 803c3ba:	69b9      	ldr	r1, [r7, #24]
 803c3bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803c3be:	4299      	cmp	r1, r3
 803c3c0:	69fb      	ldr	r3, [r7, #28]
 803c3c2:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 803c3c6:	d105      	bne.n	803c3d4 <__ssvfscanf_r+0xe70>
 803c3c8:	f002 fa9a 	bl	803e900 <_strtoull_r>
 803c3cc:	682b      	ldr	r3, [r5, #0]
 803c3ce:	e9c3 0100 	strd	r0, r1, [r3]
 803c3d2:	e7db      	b.n	803c38c <__ssvfscanf_r+0xe28>
 803c3d4:	f002 f9e8 	bl	803e7a8 <_strtoll_r>
 803c3d8:	e7f8      	b.n	803c3cc <__ssvfscanf_r+0xe68>
 803c3da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803c3dc:	f7fa fe96 	bl	803710c <_localeconv_r>
 803c3e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803c3e2:	6802      	ldr	r2, [r0, #0]
 803c3e4:	3b01      	subs	r3, #1
 803c3e6:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 803c3ea:	f04f 0800 	mov.w	r8, #0
 803c3ee:	bf88      	it	hi
 803c3f0:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 803c3f2:	f8c7 8010 	str.w	r8, [r7, #16]
 803c3f6:	e9c7 8802 	strd	r8, r8, [r7, #8]
 803c3fa:	bf81      	itttt	hi
 803c3fc:	f46f 70ae 	mvnhi.w	r0, #348	@ 0x15c
 803c400:	f240 115d 	movwhi	r1, #349	@ 0x15d
 803c404:	181b      	addhi	r3, r3, r0
 803c406:	62f9      	strhi	r1, [r7, #44]	@ 0x2c
 803c408:	bf98      	it	ls
 803c40a:	2300      	movls	r3, #0
 803c40c:	f446 66f0 	orr.w	r6, r6, #1920	@ 0x780
 803c410:	46c3      	mov	fp, r8
 803c412:	46c2      	mov	sl, r8
 803c414:	f507 79a8 	add.w	r9, r7, #336	@ 0x150
 803c418:	6821      	ldr	r1, [r4, #0]
 803c41a:	6079      	str	r1, [r7, #4]
 803c41c:	7808      	ldrb	r0, [r1, #0]
 803c41e:	f1a0 0c2b 	sub.w	ip, r0, #43	@ 0x2b
 803c422:	f1bc 0f4e 	cmp.w	ip, #78	@ 0x4e
 803c426:	f200 8123 	bhi.w	803c670 <__ssvfscanf_r+0x110c>
 803c42a:	e8df f01c 	tbh	[pc, ip, lsl #1]
 803c42e:	0089      	.short	0x0089
 803c430:	00890121 	.word	0x00890121
 803c434:	01210121 	.word	0x01210121
 803c438:	006f004f 	.word	0x006f004f
 803c43c:	006f006f 	.word	0x006f006f
 803c440:	006f006f 	.word	0x006f006f
 803c444:	006f006f 	.word	0x006f006f
 803c448:	006f006f 	.word	0x006f006f
 803c44c:	01210121 	.word	0x01210121
 803c450:	01210121 	.word	0x01210121
 803c454:	01210121 	.word	0x01210121
 803c458:	00af0121 	.word	0x00af0121
 803c45c:	006d006d 	.word	0x006d006d
 803c460:	011e006d 	.word	0x011e006d
 803c464:	012100ed 	.word	0x012100ed
 803c468:	00d60121 	.word	0x00d60121
 803c46c:	01210121 	.word	0x01210121
 803c470:	01210121 	.word	0x01210121
 803c474:	01210090 	.word	0x01210090
 803c478:	01210104 	.word	0x01210104
 803c47c:	01210121 	.word	0x01210121
 803c480:	012100f8 	.word	0x012100f8
 803c484:	01210121 	.word	0x01210121
 803c488:	00fe0073 	.word	0x00fe0073
 803c48c:	01210121 	.word	0x01210121
 803c490:	01210121 	.word	0x01210121
 803c494:	01210121 	.word	0x01210121
 803c498:	00af0121 	.word	0x00af0121
 803c49c:	006d006d 	.word	0x006d006d
 803c4a0:	011e006d 	.word	0x011e006d
 803c4a4:	012100ed 	.word	0x012100ed
 803c4a8:	00d60121 	.word	0x00d60121
 803c4ac:	01210121 	.word	0x01210121
 803c4b0:	01210121 	.word	0x01210121
 803c4b4:	01210090 	.word	0x01210090
 803c4b8:	01210104 	.word	0x01210104
 803c4bc:	01210121 	.word	0x01210121
 803c4c0:	012100f8 	.word	0x012100f8
 803c4c4:	01210121 	.word	0x01210121
 803c4c8:	00fe0073 	.word	0x00fe0073
 803c4cc:	05f1      	lsls	r1, r6, #23
 803c4ce:	d51d      	bpl.n	803c50c <__ssvfscanf_r+0xfa8>
 803c4d0:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 803c4d4:	f10a 0a01 	add.w	sl, sl, #1
 803c4d8:	b11b      	cbz	r3, 803c4e2 <__ssvfscanf_r+0xf7e>
 803c4da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 803c4dc:	3001      	adds	r0, #1
 803c4de:	3b01      	subs	r3, #1
 803c4e0:	62f8      	str	r0, [r7, #44]	@ 0x2c
 803c4e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 803c4e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 803c4e6:	3001      	adds	r0, #1
 803c4e8:	6338      	str	r0, [r7, #48]	@ 0x30
 803c4ea:	6860      	ldr	r0, [r4, #4]
 803c4ec:	3801      	subs	r0, #1
 803c4ee:	3901      	subs	r1, #1
 803c4f0:	2800      	cmp	r0, #0
 803c4f2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 803c4f4:	6060      	str	r0, [r4, #4]
 803c4f6:	f340 80cc 	ble.w	803c692 <__ssvfscanf_r+0x112e>
 803c4fa:	6879      	ldr	r1, [r7, #4]
 803c4fc:	3101      	adds	r1, #1
 803c4fe:	6021      	str	r1, [r4, #0]
 803c500:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 803c502:	2900      	cmp	r1, #0
 803c504:	d188      	bne.n	803c418 <__ssvfscanf_r+0xeb4>
 803c506:	e052      	b.n	803c5ae <__ssvfscanf_r+0x104a>
 803c508:	0531      	lsls	r1, r6, #20
 803c50a:	d550      	bpl.n	803c5ae <__ssvfscanf_r+0x104a>
 803c50c:	eb1b 0c08 	adds.w	ip, fp, r8
 803c510:	d041      	beq.n	803c596 <__ssvfscanf_r+0x1032>
 803c512:	e04c      	b.n	803c5ae <__ssvfscanf_r+0x104a>
 803c514:	f406 6c18 	and.w	ip, r6, #2432	@ 0x980
 803c518:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 803c51c:	d147      	bne.n	803c5ae <__ssvfscanf_r+0x104a>
 803c51e:	f1ba 0f01 	cmp.w	sl, #1
 803c522:	d144      	bne.n	803c5ae <__ssvfscanf_r+0x104a>
 803c524:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 803c526:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 803c52a:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 803c52e:	3901      	subs	r1, #1
 803c530:	f809 cb01 	strb.w	ip, [r9], #1
 803c534:	f446 6600 	orr.w	r6, r6, #2048	@ 0x800
 803c538:	62f9      	str	r1, [r7, #44]	@ 0x2c
 803c53a:	f04f 0a00 	mov.w	sl, #0
 803c53e:	e003      	b.n	803c548 <__ssvfscanf_r+0xfe4>
 803c540:	0631      	lsls	r1, r6, #24
 803c542:	d534      	bpl.n	803c5ae <__ssvfscanf_r+0x104a>
 803c544:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 803c548:	f809 0b01 	strb.w	r0, [r9], #1
 803c54c:	e7c9      	b.n	803c4e2 <__ssvfscanf_r+0xf7e>
 803c54e:	f1bb 0f00 	cmp.w	fp, #0
 803c552:	d10c      	bne.n	803c56e <__ssvfscanf_r+0x100a>
 803c554:	f1ba 0f00 	cmp.w	sl, #0
 803c558:	d10d      	bne.n	803c576 <__ssvfscanf_r+0x1012>
 803c55a:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 803c55e:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 803c562:	d108      	bne.n	803c576 <__ssvfscanf_r+0x1012>
 803c564:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 803c568:	f04f 0b01 	mov.w	fp, #1
 803c56c:	e7ec      	b.n	803c548 <__ssvfscanf_r+0xfe4>
 803c56e:	f1bb 0f02 	cmp.w	fp, #2
 803c572:	f000 8088 	beq.w	803c686 <__ssvfscanf_r+0x1122>
 803c576:	f1b8 0f01 	cmp.w	r8, #1
 803c57a:	d002      	beq.n	803c582 <__ssvfscanf_r+0x101e>
 803c57c:	f1b8 0f04 	cmp.w	r8, #4
 803c580:	d115      	bne.n	803c5ae <__ssvfscanf_r+0x104a>
 803c582:	f108 0801 	add.w	r8, r8, #1
 803c586:	fa5f f888 	uxtb.w	r8, r8
 803c58a:	e7dd      	b.n	803c548 <__ssvfscanf_r+0xfe4>
 803c58c:	0531      	lsls	r1, r6, #20
 803c58e:	d50b      	bpl.n	803c5a8 <__ssvfscanf_r+0x1044>
 803c590:	eb1b 0c08 	adds.w	ip, fp, r8
 803c594:	d108      	bne.n	803c5a8 <__ssvfscanf_r+0x1044>
 803c596:	f426 76c0 	bic.w	r6, r6, #384	@ 0x180
 803c59a:	46e0      	mov	r8, ip
 803c59c:	46e3      	mov	fp, ip
 803c59e:	e7d3      	b.n	803c548 <__ssvfscanf_r+0xfe4>
 803c5a0:	08044d38 	.word	0x08044d38
 803c5a4:	0803e2f9 	.word	0x0803e2f9
 803c5a8:	f1bb 0f01 	cmp.w	fp, #1
 803c5ac:	d06e      	beq.n	803c68c <__ssvfscanf_r+0x1128>
 803c5ae:	f1ba 0f00 	cmp.w	sl, #0
 803c5b2:	d001      	beq.n	803c5b8 <__ssvfscanf_r+0x1054>
 803c5b4:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 803c5b8:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 803c5bc:	f1bb 0f01 	cmp.w	fp, #1
 803c5c0:	d873      	bhi.n	803c6aa <__ssvfscanf_r+0x1146>
 803c5c2:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 803c5c6:	45a9      	cmp	r9, r5
 803c5c8:	f67f a8c2 	bls.w	803b750 <__ssvfscanf_r+0x1ec>
 803c5cc:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 803c5d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803c5d2:	4622      	mov	r2, r4
 803c5d4:	f7fc fdd6 	bl	8039184 <_sungetc_r>
 803c5d8:	e7f5      	b.n	803c5c6 <__ssvfscanf_r+0x1062>
 803c5da:	f1b8 0f00 	cmp.w	r8, #0
 803c5de:	d10d      	bne.n	803c5fc <__ssvfscanf_r+0x1098>
 803c5e0:	f1ba 0f00 	cmp.w	sl, #0
 803c5e4:	d1e6      	bne.n	803c5b4 <__ssvfscanf_r+0x1050>
 803c5e6:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 803c5ea:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 803c5ee:	f040 8124 	bne.w	803c83a <__ssvfscanf_r+0x12d6>
 803c5f2:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 803c5f6:	f04f 0801 	mov.w	r8, #1
 803c5fa:	e7a5      	b.n	803c548 <__ssvfscanf_r+0xfe4>
 803c5fc:	f1b8 0f03 	cmp.w	r8, #3
 803c600:	d0bf      	beq.n	803c582 <__ssvfscanf_r+0x101e>
 803c602:	f1b8 0f05 	cmp.w	r8, #5
 803c606:	e7bb      	b.n	803c580 <__ssvfscanf_r+0x101c>
 803c608:	0531      	lsls	r1, r6, #20
 803c60a:	d502      	bpl.n	803c612 <__ssvfscanf_r+0x10ae>
 803c60c:	eb1b 0c08 	adds.w	ip, fp, r8
 803c610:	d0c1      	beq.n	803c596 <__ssvfscanf_r+0x1032>
 803c612:	f1b8 0f02 	cmp.w	r8, #2
 803c616:	d1ca      	bne.n	803c5ae <__ssvfscanf_r+0x104a>
 803c618:	f04f 0803 	mov.w	r8, #3
 803c61c:	e794      	b.n	803c548 <__ssvfscanf_r+0xfe4>
 803c61e:	f1b8 0f06 	cmp.w	r8, #6
 803c622:	d1c4      	bne.n	803c5ae <__ssvfscanf_r+0x104a>
 803c624:	f04f 0807 	mov.w	r8, #7
 803c628:	e78e      	b.n	803c548 <__ssvfscanf_r+0xfe4>
 803c62a:	f1b8 0f07 	cmp.w	r8, #7
 803c62e:	d1be      	bne.n	803c5ae <__ssvfscanf_r+0x104a>
 803c630:	f04f 0808 	mov.w	r8, #8
 803c634:	e788      	b.n	803c548 <__ssvfscanf_r+0xfe4>
 803c636:	0531      	lsls	r1, r6, #20
 803c638:	d5b9      	bpl.n	803c5ae <__ssvfscanf_r+0x104a>
 803c63a:	f406 6ca0 	and.w	ip, r6, #1280	@ 0x500
 803c63e:	f5bc 6f80 	cmp.w	ip, #1024	@ 0x400
 803c642:	d005      	beq.n	803c650 <__ssvfscanf_r+0x10ec>
 803c644:	0571      	lsls	r1, r6, #21
 803c646:	d5b2      	bpl.n	803c5ae <__ssvfscanf_r+0x104a>
 803c648:	f1ba 0f00 	cmp.w	sl, #0
 803c64c:	f000 80f5 	beq.w	803c83a <__ssvfscanf_r+0x12d6>
 803c650:	05b1      	lsls	r1, r6, #22
 803c652:	bf58      	it	pl
 803c654:	6939      	ldrpl	r1, [r7, #16]
 803c656:	f426 6678 	bic.w	r6, r6, #3968	@ 0xf80
 803c65a:	bf5c      	itt	pl
 803c65c:	ebaa 0101 	subpl.w	r1, sl, r1
 803c660:	e9c7 9102 	strdpl	r9, r1, [r7, #8]
 803c664:	f446 76c0 	orr.w	r6, r6, #384	@ 0x180
 803c668:	e767      	b.n	803c53a <__ssvfscanf_r+0xfd6>
 803c66a:	0531      	lsls	r1, r6, #20
 803c66c:	d5e5      	bpl.n	803c63a <__ssvfscanf_r+0x10d6>
 803c66e:	e74d      	b.n	803c50c <__ssvfscanf_r+0xfa8>
 803c670:	f892 c000 	ldrb.w	ip, [r2]
 803c674:	4584      	cmp	ip, r0
 803c676:	d19a      	bne.n	803c5ae <__ssvfscanf_r+0x104a>
 803c678:	05b1      	lsls	r1, r6, #22
 803c67a:	d598      	bpl.n	803c5ae <__ssvfscanf_r+0x104a>
 803c67c:	f426 7620 	bic.w	r6, r6, #640	@ 0x280
 803c680:	f8c7 a010 	str.w	sl, [r7, #16]
 803c684:	e760      	b.n	803c548 <__ssvfscanf_r+0xfe4>
 803c686:	f04f 0b03 	mov.w	fp, #3
 803c68a:	e75d      	b.n	803c548 <__ssvfscanf_r+0xfe4>
 803c68c:	f04f 0b02 	mov.w	fp, #2
 803c690:	e75a      	b.n	803c548 <__ssvfscanf_r+0xfe4>
 803c692:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803c694:	4621      	mov	r1, r4
 803c696:	e9c7 2300 	strd	r2, r3, [r7]
 803c69a:	f7fc fdae 	bl	80391fa <__ssrefill_r>
 803c69e:	e9d7 2300 	ldrd	r2, r3, [r7]
 803c6a2:	2800      	cmp	r0, #0
 803c6a4:	f43f af2c 	beq.w	803c500 <__ssvfscanf_r+0xf9c>
 803c6a8:	e781      	b.n	803c5ae <__ssvfscanf_r+0x104a>
 803c6aa:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 803c6ae:	2b06      	cmp	r3, #6
 803c6b0:	d827      	bhi.n	803c702 <__ssvfscanf_r+0x119e>
 803c6b2:	f1b8 0f02 	cmp.w	r8, #2
 803c6b6:	d834      	bhi.n	803c722 <__ssvfscanf_r+0x11be>
 803c6b8:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 803c6bc:	45a9      	cmp	r9, r5
 803c6be:	f67f a847 	bls.w	803b750 <__ssvfscanf_r+0x1ec>
 803c6c2:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 803c6c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803c6c8:	4622      	mov	r2, r4
 803c6ca:	f7fc fd5b 	bl	8039184 <_sungetc_r>
 803c6ce:	e7f5      	b.n	803c6bc <__ssvfscanf_r+0x1158>
 803c6d0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 803c6d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803c6d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803c6d8:	4622      	mov	r2, r4
 803c6da:	f7fc fd53 	bl	8039184 <_sungetc_r>
 803c6de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803c6e0:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 803c6e4:	fa5f fb8b 	uxtb.w	fp, fp
 803c6e8:	f1bb 0f02 	cmp.w	fp, #2
 803c6ec:	d1f0      	bne.n	803c6d0 <__ssvfscanf_r+0x116c>
 803c6ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 803c6f0:	f1a8 0803 	sub.w	r8, r8, #3
 803c6f4:	fa5f f888 	uxtb.w	r8, r8
 803c6f8:	eba3 0308 	sub.w	r3, r3, r8
 803c6fc:	eba9 0908 	sub.w	r9, r9, r8
 803c700:	633b      	str	r3, [r7, #48]	@ 0x30
 803c702:	05f3      	lsls	r3, r6, #23
 803c704:	d52d      	bpl.n	803c762 <__ssvfscanf_r+0x11fe>
 803c706:	0570      	lsls	r0, r6, #21
 803c708:	d50e      	bpl.n	803c728 <__ssvfscanf_r+0x11c4>
 803c70a:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 803c70e:	45a9      	cmp	r9, r5
 803c710:	f67f a81e 	bls.w	803b750 <__ssvfscanf_r+0x1ec>
 803c714:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 803c718:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803c71a:	4622      	mov	r2, r4
 803c71c:	f7fc fd32 	bl	8039184 <_sungetc_r>
 803c720:	e7f5      	b.n	803c70e <__ssvfscanf_r+0x11aa>
 803c722:	46c3      	mov	fp, r8
 803c724:	464b      	mov	r3, r9
 803c726:	e7db      	b.n	803c6e0 <__ssvfscanf_r+0x117c>
 803c728:	f819 1c01 	ldrb.w	r1, [r9, #-1]
 803c72c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 803c72e:	2965      	cmp	r1, #101	@ 0x65
 803c730:	f109 38ff 	add.w	r8, r9, #4294967295	@ 0xffffffff
 803c734:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 803c738:	d00c      	beq.n	803c754 <__ssvfscanf_r+0x11f0>
 803c73a:	2945      	cmp	r1, #69	@ 0x45
 803c73c:	d00a      	beq.n	803c754 <__ssvfscanf_r+0x11f0>
 803c73e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803c740:	4622      	mov	r2, r4
 803c742:	f7fc fd1f 	bl	8039184 <_sungetc_r>
 803c746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 803c748:	f819 1c02 	ldrb.w	r1, [r9, #-2]
 803c74c:	f1a9 0802 	sub.w	r8, r9, #2
 803c750:	f1a3 0b02 	sub.w	fp, r3, #2
 803c754:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803c756:	4622      	mov	r2, r4
 803c758:	f7fc fd14 	bl	8039184 <_sungetc_r>
 803c75c:	46c1      	mov	r9, r8
 803c75e:	f8c7 b030 	str.w	fp, [r7, #48]	@ 0x30
 803c762:	f016 0210 	ands.w	r2, r6, #16
 803c766:	f47e af18 	bne.w	803b59a <__ssvfscanf_r+0x36>
 803c76a:	f406 63c0 	and.w	r3, r6, #1536	@ 0x600
 803c76e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 803c772:	f889 2000 	strb.w	r2, [r9]
 803c776:	d119      	bne.n	803c7ac <__ssvfscanf_r+0x1248>
 803c778:	693b      	ldr	r3, [r7, #16]
 803c77a:	4553      	cmp	r3, sl
 803c77c:	eba3 020a 	sub.w	r2, r3, sl
 803c780:	d121      	bne.n	803c7c6 <__ssvfscanf_r+0x1262>
 803c782:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 803c786:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803c788:	2200      	movs	r2, #0
 803c78a:	f001 fd41 	bl	803e210 <_strtod_r>
 803c78e:	07f1      	lsls	r1, r6, #31
 803c790:	ec59 8b10 	vmov	r8, r9, d0
 803c794:	f105 0a04 	add.w	sl, r5, #4
 803c798:	d520      	bpl.n	803c7dc <__ssvfscanf_r+0x1278>
 803c79a:	682b      	ldr	r3, [r5, #0]
 803c79c:	ed83 0b00 	vstr	d0, [r3]
 803c7a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803c7a2:	3301      	adds	r3, #1
 803c7a4:	627b      	str	r3, [r7, #36]	@ 0x24
 803c7a6:	4655      	mov	r5, sl
 803c7a8:	f7fe bef7 	b.w	803b59a <__ssvfscanf_r+0x36>
 803c7ac:	68fb      	ldr	r3, [r7, #12]
 803c7ae:	2b00      	cmp	r3, #0
 803c7b0:	d0e7      	beq.n	803c782 <__ssvfscanf_r+0x121e>
 803c7b2:	68b9      	ldr	r1, [r7, #8]
 803c7b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803c7b6:	230a      	movs	r3, #10
 803c7b8:	3101      	adds	r1, #1
 803c7ba:	f7f8 fe9d 	bl	80354f8 <_strtol_r>
 803c7be:	68fb      	ldr	r3, [r7, #12]
 803c7c0:	f8d7 9008 	ldr.w	r9, [r7, #8]
 803c7c4:	1ac2      	subs	r2, r0, r3
 803c7c6:	f207 23a3 	addw	r3, r7, #675	@ 0x2a3
 803c7ca:	4599      	cmp	r9, r3
 803c7cc:	bf28      	it	cs
 803c7ce:	f207 29a2 	addwcs	r9, r7, #674	@ 0x2a2
 803c7d2:	491b      	ldr	r1, [pc, #108]	@ (803c840 <__ssvfscanf_r+0x12dc>)
 803c7d4:	4648      	mov	r0, r9
 803c7d6:	f7f8 ff49 	bl	803566c <sprintf>
 803c7da:	e7d2      	b.n	803c782 <__ssvfscanf_r+0x121e>
 803c7dc:	07b2      	lsls	r2, r6, #30
 803c7de:	682d      	ldr	r5, [r5, #0]
 803c7e0:	d502      	bpl.n	803c7e8 <__ssvfscanf_r+0x1284>
 803c7e2:	ed85 0b00 	vstr	d0, [r5]
 803c7e6:	e7db      	b.n	803c7a0 <__ssvfscanf_r+0x123c>
 803c7e8:	4642      	mov	r2, r8
 803c7ea:	464b      	mov	r3, r9
 803c7ec:	4640      	mov	r0, r8
 803c7ee:	4649      	mov	r1, r9
 803c7f0:	f7d4 f9b4 	bl	8010b5c <__aeabi_dcmpun>
 803c7f4:	b128      	cbz	r0, 803c802 <__ssvfscanf_r+0x129e>
 803c7f6:	4813      	ldr	r0, [pc, #76]	@ (803c844 <__ssvfscanf_r+0x12e0>)
 803c7f8:	f002 f8f6 	bl	803e9e8 <nanf>
 803c7fc:	ed85 0a00 	vstr	s0, [r5]
 803c800:	e7ce      	b.n	803c7a0 <__ssvfscanf_r+0x123c>
 803c802:	4640      	mov	r0, r8
 803c804:	4649      	mov	r1, r9
 803c806:	f7d4 fa07 	bl	8010c18 <__aeabi_d2f>
 803c80a:	6028      	str	r0, [r5, #0]
 803c80c:	e7c8      	b.n	803c7a0 <__ssvfscanf_r+0x123c>
 803c80e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 803c812:	6818      	ldr	r0, [r3, #0]
 803c814:	f7fb fd3a 	bl	803828c <free>
 803c818:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 803c81c:	3401      	adds	r4, #1
 803c81e:	601e      	str	r6, [r3, #0]
 803c820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803c822:	681d      	ldr	r5, [r3, #0]
 803c824:	88db      	ldrh	r3, [r3, #6]
 803c826:	42a3      	cmp	r3, r4
 803c828:	dcf1      	bgt.n	803c80e <__ssvfscanf_r+0x12aa>
 803c82a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803c82e:	627b      	str	r3, [r7, #36]	@ 0x24
 803c830:	f7ff b85c 	b.w	803b8ec <__ssvfscanf_r+0x388>
 803c834:	2400      	movs	r4, #0
 803c836:	4626      	mov	r6, r4
 803c838:	e7f2      	b.n	803c820 <__ssvfscanf_r+0x12bc>
 803c83a:	f04f 0a00 	mov.w	sl, #0
 803c83e:	e6bb      	b.n	803c5b8 <__ssvfscanf_r+0x1054>
 803c840:	08044d32 	.word	0x08044d32
 803c844:	0804479b 	.word	0x0804479b

0803c848 <_putc_r>:
 803c848:	b570      	push	{r4, r5, r6, lr}
 803c84a:	460d      	mov	r5, r1
 803c84c:	4614      	mov	r4, r2
 803c84e:	4606      	mov	r6, r0
 803c850:	b118      	cbz	r0, 803c85a <_putc_r+0x12>
 803c852:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 803c854:	b90b      	cbnz	r3, 803c85a <_putc_r+0x12>
 803c856:	f7f9 f825 	bl	80358a4 <__sinit>
 803c85a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 803c85c:	07d8      	lsls	r0, r3, #31
 803c85e:	d405      	bmi.n	803c86c <_putc_r+0x24>
 803c860:	89a3      	ldrh	r3, [r4, #12]
 803c862:	0599      	lsls	r1, r3, #22
 803c864:	d402      	bmi.n	803c86c <_putc_r+0x24>
 803c866:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 803c868:	f7fa fcfb 	bl	8037262 <__retarget_lock_acquire_recursive>
 803c86c:	68a3      	ldr	r3, [r4, #8]
 803c86e:	3b01      	subs	r3, #1
 803c870:	2b00      	cmp	r3, #0
 803c872:	60a3      	str	r3, [r4, #8]
 803c874:	da05      	bge.n	803c882 <_putc_r+0x3a>
 803c876:	69a2      	ldr	r2, [r4, #24]
 803c878:	4293      	cmp	r3, r2
 803c87a:	db12      	blt.n	803c8a2 <_putc_r+0x5a>
 803c87c:	b2eb      	uxtb	r3, r5
 803c87e:	2b0a      	cmp	r3, #10
 803c880:	d00f      	beq.n	803c8a2 <_putc_r+0x5a>
 803c882:	6823      	ldr	r3, [r4, #0]
 803c884:	1c5a      	adds	r2, r3, #1
 803c886:	6022      	str	r2, [r4, #0]
 803c888:	701d      	strb	r5, [r3, #0]
 803c88a:	b2ed      	uxtb	r5, r5
 803c88c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 803c88e:	07da      	lsls	r2, r3, #31
 803c890:	d405      	bmi.n	803c89e <_putc_r+0x56>
 803c892:	89a3      	ldrh	r3, [r4, #12]
 803c894:	059b      	lsls	r3, r3, #22
 803c896:	d402      	bmi.n	803c89e <_putc_r+0x56>
 803c898:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 803c89a:	f7fa fce4 	bl	8037266 <__retarget_lock_release_recursive>
 803c89e:	4628      	mov	r0, r5
 803c8a0:	bd70      	pop	{r4, r5, r6, pc}
 803c8a2:	4629      	mov	r1, r5
 803c8a4:	4622      	mov	r2, r4
 803c8a6:	4630      	mov	r0, r6
 803c8a8:	f001 fd79 	bl	803e39e <__swbuf_r>
 803c8ac:	4605      	mov	r5, r0
 803c8ae:	e7ed      	b.n	803c88c <_putc_r+0x44>

0803c8b0 <__malloc_lock>:
 803c8b0:	4801      	ldr	r0, [pc, #4]	@ (803c8b8 <__malloc_lock+0x8>)
 803c8b2:	f7fa bcd6 	b.w	8037262 <__retarget_lock_acquire_recursive>
 803c8b6:	bf00      	nop
 803c8b8:	200182de 	.word	0x200182de

0803c8bc <__malloc_unlock>:
 803c8bc:	4801      	ldr	r0, [pc, #4]	@ (803c8c4 <__malloc_unlock+0x8>)
 803c8be:	f7fa bcd2 	b.w	8037266 <__retarget_lock_release_recursive>
 803c8c2:	bf00      	nop
 803c8c4:	200182de 	.word	0x200182de

0803c8c8 <_Balloc>:
 803c8c8:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 803c8ca:	b570      	push	{r4, r5, r6, lr}
 803c8cc:	4605      	mov	r5, r0
 803c8ce:	460c      	mov	r4, r1
 803c8d0:	b17b      	cbz	r3, 803c8f2 <_Balloc+0x2a>
 803c8d2:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 803c8d4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 803c8d8:	b9a0      	cbnz	r0, 803c904 <_Balloc+0x3c>
 803c8da:	2101      	movs	r1, #1
 803c8dc:	fa01 f604 	lsl.w	r6, r1, r4
 803c8e0:	1d72      	adds	r2, r6, #5
 803c8e2:	0092      	lsls	r2, r2, #2
 803c8e4:	4628      	mov	r0, r5
 803c8e6:	f002 f885 	bl	803e9f4 <_calloc_r>
 803c8ea:	b148      	cbz	r0, 803c900 <_Balloc+0x38>
 803c8ec:	e9c0 4601 	strd	r4, r6, [r0, #4]
 803c8f0:	e00b      	b.n	803c90a <_Balloc+0x42>
 803c8f2:	2221      	movs	r2, #33	@ 0x21
 803c8f4:	2104      	movs	r1, #4
 803c8f6:	f002 f87d 	bl	803e9f4 <_calloc_r>
 803c8fa:	6468      	str	r0, [r5, #68]	@ 0x44
 803c8fc:	2800      	cmp	r0, #0
 803c8fe:	d1e8      	bne.n	803c8d2 <_Balloc+0xa>
 803c900:	2000      	movs	r0, #0
 803c902:	bd70      	pop	{r4, r5, r6, pc}
 803c904:	6802      	ldr	r2, [r0, #0]
 803c906:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 803c90a:	2300      	movs	r3, #0
 803c90c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 803c910:	e7f7      	b.n	803c902 <_Balloc+0x3a>

0803c912 <_Bfree>:
 803c912:	b131      	cbz	r1, 803c922 <_Bfree+0x10>
 803c914:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 803c916:	684a      	ldr	r2, [r1, #4]
 803c918:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 803c91c:	6008      	str	r0, [r1, #0]
 803c91e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 803c922:	4770      	bx	lr

0803c924 <__multadd>:
 803c924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803c928:	690d      	ldr	r5, [r1, #16]
 803c92a:	4607      	mov	r7, r0
 803c92c:	460c      	mov	r4, r1
 803c92e:	461e      	mov	r6, r3
 803c930:	f101 0c14 	add.w	ip, r1, #20
 803c934:	2000      	movs	r0, #0
 803c936:	f8dc 3000 	ldr.w	r3, [ip]
 803c93a:	b299      	uxth	r1, r3
 803c93c:	fb02 6101 	mla	r1, r2, r1, r6
 803c940:	0c1e      	lsrs	r6, r3, #16
 803c942:	0c0b      	lsrs	r3, r1, #16
 803c944:	fb02 3306 	mla	r3, r2, r6, r3
 803c948:	b289      	uxth	r1, r1
 803c94a:	3001      	adds	r0, #1
 803c94c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 803c950:	4285      	cmp	r5, r0
 803c952:	f84c 1b04 	str.w	r1, [ip], #4
 803c956:	ea4f 4613 	mov.w	r6, r3, lsr #16
 803c95a:	dcec      	bgt.n	803c936 <__multadd+0x12>
 803c95c:	b30e      	cbz	r6, 803c9a2 <__multadd+0x7e>
 803c95e:	68a3      	ldr	r3, [r4, #8]
 803c960:	42ab      	cmp	r3, r5
 803c962:	dc19      	bgt.n	803c998 <__multadd+0x74>
 803c964:	6861      	ldr	r1, [r4, #4]
 803c966:	4638      	mov	r0, r7
 803c968:	3101      	adds	r1, #1
 803c96a:	f7ff ffad 	bl	803c8c8 <_Balloc>
 803c96e:	4680      	mov	r8, r0
 803c970:	b928      	cbnz	r0, 803c97e <__multadd+0x5a>
 803c972:	4602      	mov	r2, r0
 803c974:	4b0c      	ldr	r3, [pc, #48]	@ (803c9a8 <__multadd+0x84>)
 803c976:	480d      	ldr	r0, [pc, #52]	@ (803c9ac <__multadd+0x88>)
 803c978:	21ba      	movs	r1, #186	@ 0xba
 803c97a:	f7f6 fce5 	bl	8033348 <__assert_func>
 803c97e:	6922      	ldr	r2, [r4, #16]
 803c980:	3202      	adds	r2, #2
 803c982:	f104 010c 	add.w	r1, r4, #12
 803c986:	0092      	lsls	r2, r2, #2
 803c988:	300c      	adds	r0, #12
 803c98a:	f7fa fc6d 	bl	8037268 <memcpy>
 803c98e:	4621      	mov	r1, r4
 803c990:	4638      	mov	r0, r7
 803c992:	f7ff ffbe 	bl	803c912 <_Bfree>
 803c996:	4644      	mov	r4, r8
 803c998:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 803c99c:	3501      	adds	r5, #1
 803c99e:	615e      	str	r6, [r3, #20]
 803c9a0:	6125      	str	r5, [r4, #16]
 803c9a2:	4620      	mov	r0, r4
 803c9a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803c9a8:	08044c66 	.word	0x08044c66
 803c9ac:	08044d5a 	.word	0x08044d5a

0803c9b0 <__s2b>:
 803c9b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 803c9b4:	460c      	mov	r4, r1
 803c9b6:	4615      	mov	r5, r2
 803c9b8:	461f      	mov	r7, r3
 803c9ba:	2209      	movs	r2, #9
 803c9bc:	3308      	adds	r3, #8
 803c9be:	4606      	mov	r6, r0
 803c9c0:	fb93 f3f2 	sdiv	r3, r3, r2
 803c9c4:	2100      	movs	r1, #0
 803c9c6:	2201      	movs	r2, #1
 803c9c8:	429a      	cmp	r2, r3
 803c9ca:	db09      	blt.n	803c9e0 <__s2b+0x30>
 803c9cc:	4630      	mov	r0, r6
 803c9ce:	f7ff ff7b 	bl	803c8c8 <_Balloc>
 803c9d2:	b940      	cbnz	r0, 803c9e6 <__s2b+0x36>
 803c9d4:	4602      	mov	r2, r0
 803c9d6:	4b19      	ldr	r3, [pc, #100]	@ (803ca3c <__s2b+0x8c>)
 803c9d8:	4819      	ldr	r0, [pc, #100]	@ (803ca40 <__s2b+0x90>)
 803c9da:	21d3      	movs	r1, #211	@ 0xd3
 803c9dc:	f7f6 fcb4 	bl	8033348 <__assert_func>
 803c9e0:	0052      	lsls	r2, r2, #1
 803c9e2:	3101      	adds	r1, #1
 803c9e4:	e7f0      	b.n	803c9c8 <__s2b+0x18>
 803c9e6:	9b08      	ldr	r3, [sp, #32]
 803c9e8:	6143      	str	r3, [r0, #20]
 803c9ea:	2d09      	cmp	r5, #9
 803c9ec:	f04f 0301 	mov.w	r3, #1
 803c9f0:	6103      	str	r3, [r0, #16]
 803c9f2:	dd16      	ble.n	803ca22 <__s2b+0x72>
 803c9f4:	f104 0909 	add.w	r9, r4, #9
 803c9f8:	46c8      	mov	r8, r9
 803c9fa:	442c      	add	r4, r5
 803c9fc:	f818 3b01 	ldrb.w	r3, [r8], #1
 803ca00:	4601      	mov	r1, r0
 803ca02:	3b30      	subs	r3, #48	@ 0x30
 803ca04:	220a      	movs	r2, #10
 803ca06:	4630      	mov	r0, r6
 803ca08:	f7ff ff8c 	bl	803c924 <__multadd>
 803ca0c:	45a0      	cmp	r8, r4
 803ca0e:	d1f5      	bne.n	803c9fc <__s2b+0x4c>
 803ca10:	f1a5 0408 	sub.w	r4, r5, #8
 803ca14:	444c      	add	r4, r9
 803ca16:	1b2d      	subs	r5, r5, r4
 803ca18:	1963      	adds	r3, r4, r5
 803ca1a:	42bb      	cmp	r3, r7
 803ca1c:	db04      	blt.n	803ca28 <__s2b+0x78>
 803ca1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 803ca22:	340a      	adds	r4, #10
 803ca24:	2509      	movs	r5, #9
 803ca26:	e7f6      	b.n	803ca16 <__s2b+0x66>
 803ca28:	f814 3b01 	ldrb.w	r3, [r4], #1
 803ca2c:	4601      	mov	r1, r0
 803ca2e:	3b30      	subs	r3, #48	@ 0x30
 803ca30:	220a      	movs	r2, #10
 803ca32:	4630      	mov	r0, r6
 803ca34:	f7ff ff76 	bl	803c924 <__multadd>
 803ca38:	e7ee      	b.n	803ca18 <__s2b+0x68>
 803ca3a:	bf00      	nop
 803ca3c:	08044c66 	.word	0x08044c66
 803ca40:	08044d5a 	.word	0x08044d5a

0803ca44 <__hi0bits>:
 803ca44:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 803ca48:	4603      	mov	r3, r0
 803ca4a:	bf36      	itet	cc
 803ca4c:	0403      	lslcc	r3, r0, #16
 803ca4e:	2000      	movcs	r0, #0
 803ca50:	2010      	movcc	r0, #16
 803ca52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 803ca56:	bf3c      	itt	cc
 803ca58:	021b      	lslcc	r3, r3, #8
 803ca5a:	3008      	addcc	r0, #8
 803ca5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 803ca60:	bf3c      	itt	cc
 803ca62:	011b      	lslcc	r3, r3, #4
 803ca64:	3004      	addcc	r0, #4
 803ca66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 803ca6a:	bf3c      	itt	cc
 803ca6c:	009b      	lslcc	r3, r3, #2
 803ca6e:	3002      	addcc	r0, #2
 803ca70:	2b00      	cmp	r3, #0
 803ca72:	db05      	blt.n	803ca80 <__hi0bits+0x3c>
 803ca74:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 803ca78:	f100 0001 	add.w	r0, r0, #1
 803ca7c:	bf08      	it	eq
 803ca7e:	2020      	moveq	r0, #32
 803ca80:	4770      	bx	lr

0803ca82 <__lo0bits>:
 803ca82:	6803      	ldr	r3, [r0, #0]
 803ca84:	4602      	mov	r2, r0
 803ca86:	f013 0007 	ands.w	r0, r3, #7
 803ca8a:	d00b      	beq.n	803caa4 <__lo0bits+0x22>
 803ca8c:	07d9      	lsls	r1, r3, #31
 803ca8e:	d421      	bmi.n	803cad4 <__lo0bits+0x52>
 803ca90:	0798      	lsls	r0, r3, #30
 803ca92:	bf49      	itett	mi
 803ca94:	085b      	lsrmi	r3, r3, #1
 803ca96:	089b      	lsrpl	r3, r3, #2
 803ca98:	2001      	movmi	r0, #1
 803ca9a:	6013      	strmi	r3, [r2, #0]
 803ca9c:	bf5c      	itt	pl
 803ca9e:	6013      	strpl	r3, [r2, #0]
 803caa0:	2002      	movpl	r0, #2
 803caa2:	4770      	bx	lr
 803caa4:	b299      	uxth	r1, r3
 803caa6:	b909      	cbnz	r1, 803caac <__lo0bits+0x2a>
 803caa8:	0c1b      	lsrs	r3, r3, #16
 803caaa:	2010      	movs	r0, #16
 803caac:	b2d9      	uxtb	r1, r3
 803caae:	b909      	cbnz	r1, 803cab4 <__lo0bits+0x32>
 803cab0:	3008      	adds	r0, #8
 803cab2:	0a1b      	lsrs	r3, r3, #8
 803cab4:	0719      	lsls	r1, r3, #28
 803cab6:	bf04      	itt	eq
 803cab8:	091b      	lsreq	r3, r3, #4
 803caba:	3004      	addeq	r0, #4
 803cabc:	0799      	lsls	r1, r3, #30
 803cabe:	bf04      	itt	eq
 803cac0:	089b      	lsreq	r3, r3, #2
 803cac2:	3002      	addeq	r0, #2
 803cac4:	07d9      	lsls	r1, r3, #31
 803cac6:	d403      	bmi.n	803cad0 <__lo0bits+0x4e>
 803cac8:	085b      	lsrs	r3, r3, #1
 803caca:	f100 0001 	add.w	r0, r0, #1
 803cace:	d003      	beq.n	803cad8 <__lo0bits+0x56>
 803cad0:	6013      	str	r3, [r2, #0]
 803cad2:	4770      	bx	lr
 803cad4:	2000      	movs	r0, #0
 803cad6:	4770      	bx	lr
 803cad8:	2020      	movs	r0, #32
 803cada:	4770      	bx	lr

0803cadc <__i2b>:
 803cadc:	b510      	push	{r4, lr}
 803cade:	460c      	mov	r4, r1
 803cae0:	2101      	movs	r1, #1
 803cae2:	f7ff fef1 	bl	803c8c8 <_Balloc>
 803cae6:	4602      	mov	r2, r0
 803cae8:	b928      	cbnz	r0, 803caf6 <__i2b+0x1a>
 803caea:	4b05      	ldr	r3, [pc, #20]	@ (803cb00 <__i2b+0x24>)
 803caec:	4805      	ldr	r0, [pc, #20]	@ (803cb04 <__i2b+0x28>)
 803caee:	f240 1145 	movw	r1, #325	@ 0x145
 803caf2:	f7f6 fc29 	bl	8033348 <__assert_func>
 803caf6:	2301      	movs	r3, #1
 803caf8:	6144      	str	r4, [r0, #20]
 803cafa:	6103      	str	r3, [r0, #16]
 803cafc:	bd10      	pop	{r4, pc}
 803cafe:	bf00      	nop
 803cb00:	08044c66 	.word	0x08044c66
 803cb04:	08044d5a 	.word	0x08044d5a

0803cb08 <__multiply>:
 803cb08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803cb0c:	4614      	mov	r4, r2
 803cb0e:	690a      	ldr	r2, [r1, #16]
 803cb10:	6923      	ldr	r3, [r4, #16]
 803cb12:	429a      	cmp	r2, r3
 803cb14:	bfa8      	it	ge
 803cb16:	4623      	movge	r3, r4
 803cb18:	460f      	mov	r7, r1
 803cb1a:	bfa4      	itt	ge
 803cb1c:	460c      	movge	r4, r1
 803cb1e:	461f      	movge	r7, r3
 803cb20:	f8d4 a010 	ldr.w	sl, [r4, #16]
 803cb24:	f8d7 9010 	ldr.w	r9, [r7, #16]
 803cb28:	68a3      	ldr	r3, [r4, #8]
 803cb2a:	6861      	ldr	r1, [r4, #4]
 803cb2c:	eb0a 0609 	add.w	r6, sl, r9
 803cb30:	42b3      	cmp	r3, r6
 803cb32:	b085      	sub	sp, #20
 803cb34:	bfb8      	it	lt
 803cb36:	3101      	addlt	r1, #1
 803cb38:	f7ff fec6 	bl	803c8c8 <_Balloc>
 803cb3c:	b930      	cbnz	r0, 803cb4c <__multiply+0x44>
 803cb3e:	4602      	mov	r2, r0
 803cb40:	4b44      	ldr	r3, [pc, #272]	@ (803cc54 <__multiply+0x14c>)
 803cb42:	4845      	ldr	r0, [pc, #276]	@ (803cc58 <__multiply+0x150>)
 803cb44:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 803cb48:	f7f6 fbfe 	bl	8033348 <__assert_func>
 803cb4c:	f100 0514 	add.w	r5, r0, #20
 803cb50:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 803cb54:	462b      	mov	r3, r5
 803cb56:	2200      	movs	r2, #0
 803cb58:	4543      	cmp	r3, r8
 803cb5a:	d321      	bcc.n	803cba0 <__multiply+0x98>
 803cb5c:	f107 0114 	add.w	r1, r7, #20
 803cb60:	f104 0214 	add.w	r2, r4, #20
 803cb64:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 803cb68:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 803cb6c:	9302      	str	r3, [sp, #8]
 803cb6e:	1b13      	subs	r3, r2, r4
 803cb70:	3b15      	subs	r3, #21
 803cb72:	f023 0303 	bic.w	r3, r3, #3
 803cb76:	3304      	adds	r3, #4
 803cb78:	f104 0715 	add.w	r7, r4, #21
 803cb7c:	42ba      	cmp	r2, r7
 803cb7e:	bf38      	it	cc
 803cb80:	2304      	movcc	r3, #4
 803cb82:	9301      	str	r3, [sp, #4]
 803cb84:	9b02      	ldr	r3, [sp, #8]
 803cb86:	9103      	str	r1, [sp, #12]
 803cb88:	428b      	cmp	r3, r1
 803cb8a:	d80c      	bhi.n	803cba6 <__multiply+0x9e>
 803cb8c:	2e00      	cmp	r6, #0
 803cb8e:	dd03      	ble.n	803cb98 <__multiply+0x90>
 803cb90:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 803cb94:	2b00      	cmp	r3, #0
 803cb96:	d05b      	beq.n	803cc50 <__multiply+0x148>
 803cb98:	6106      	str	r6, [r0, #16]
 803cb9a:	b005      	add	sp, #20
 803cb9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803cba0:	f843 2b04 	str.w	r2, [r3], #4
 803cba4:	e7d8      	b.n	803cb58 <__multiply+0x50>
 803cba6:	f8b1 a000 	ldrh.w	sl, [r1]
 803cbaa:	f1ba 0f00 	cmp.w	sl, #0
 803cbae:	d024      	beq.n	803cbfa <__multiply+0xf2>
 803cbb0:	f104 0e14 	add.w	lr, r4, #20
 803cbb4:	46a9      	mov	r9, r5
 803cbb6:	f04f 0c00 	mov.w	ip, #0
 803cbba:	f85e 7b04 	ldr.w	r7, [lr], #4
 803cbbe:	f8d9 3000 	ldr.w	r3, [r9]
 803cbc2:	fa1f fb87 	uxth.w	fp, r7
 803cbc6:	b29b      	uxth	r3, r3
 803cbc8:	fb0a 330b 	mla	r3, sl, fp, r3
 803cbcc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 803cbd0:	f8d9 7000 	ldr.w	r7, [r9]
 803cbd4:	4463      	add	r3, ip
 803cbd6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 803cbda:	fb0a c70b 	mla	r7, sl, fp, ip
 803cbde:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 803cbe2:	b29b      	uxth	r3, r3
 803cbe4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 803cbe8:	4572      	cmp	r2, lr
 803cbea:	f849 3b04 	str.w	r3, [r9], #4
 803cbee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 803cbf2:	d8e2      	bhi.n	803cbba <__multiply+0xb2>
 803cbf4:	9b01      	ldr	r3, [sp, #4]
 803cbf6:	f845 c003 	str.w	ip, [r5, r3]
 803cbfa:	9b03      	ldr	r3, [sp, #12]
 803cbfc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 803cc00:	3104      	adds	r1, #4
 803cc02:	f1b9 0f00 	cmp.w	r9, #0
 803cc06:	d021      	beq.n	803cc4c <__multiply+0x144>
 803cc08:	682b      	ldr	r3, [r5, #0]
 803cc0a:	f104 0c14 	add.w	ip, r4, #20
 803cc0e:	46ae      	mov	lr, r5
 803cc10:	f04f 0a00 	mov.w	sl, #0
 803cc14:	f8bc b000 	ldrh.w	fp, [ip]
 803cc18:	f8be 7002 	ldrh.w	r7, [lr, #2]
 803cc1c:	fb09 770b 	mla	r7, r9, fp, r7
 803cc20:	4457      	add	r7, sl
 803cc22:	b29b      	uxth	r3, r3
 803cc24:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 803cc28:	f84e 3b04 	str.w	r3, [lr], #4
 803cc2c:	f85c 3b04 	ldr.w	r3, [ip], #4
 803cc30:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 803cc34:	f8be 3000 	ldrh.w	r3, [lr]
 803cc38:	fb09 330a 	mla	r3, r9, sl, r3
 803cc3c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 803cc40:	4562      	cmp	r2, ip
 803cc42:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 803cc46:	d8e5      	bhi.n	803cc14 <__multiply+0x10c>
 803cc48:	9f01      	ldr	r7, [sp, #4]
 803cc4a:	51eb      	str	r3, [r5, r7]
 803cc4c:	3504      	adds	r5, #4
 803cc4e:	e799      	b.n	803cb84 <__multiply+0x7c>
 803cc50:	3e01      	subs	r6, #1
 803cc52:	e79b      	b.n	803cb8c <__multiply+0x84>
 803cc54:	08044c66 	.word	0x08044c66
 803cc58:	08044d5a 	.word	0x08044d5a

0803cc5c <__pow5mult>:
 803cc5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 803cc60:	4615      	mov	r5, r2
 803cc62:	f012 0203 	ands.w	r2, r2, #3
 803cc66:	4607      	mov	r7, r0
 803cc68:	460e      	mov	r6, r1
 803cc6a:	d007      	beq.n	803cc7c <__pow5mult+0x20>
 803cc6c:	4c1a      	ldr	r4, [pc, #104]	@ (803ccd8 <__pow5mult+0x7c>)
 803cc6e:	3a01      	subs	r2, #1
 803cc70:	2300      	movs	r3, #0
 803cc72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 803cc76:	f7ff fe55 	bl	803c924 <__multadd>
 803cc7a:	4606      	mov	r6, r0
 803cc7c:	10ad      	asrs	r5, r5, #2
 803cc7e:	d027      	beq.n	803ccd0 <__pow5mult+0x74>
 803cc80:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 803cc82:	b944      	cbnz	r4, 803cc96 <__pow5mult+0x3a>
 803cc84:	f240 2171 	movw	r1, #625	@ 0x271
 803cc88:	4638      	mov	r0, r7
 803cc8a:	f7ff ff27 	bl	803cadc <__i2b>
 803cc8e:	2300      	movs	r3, #0
 803cc90:	6438      	str	r0, [r7, #64]	@ 0x40
 803cc92:	4604      	mov	r4, r0
 803cc94:	6003      	str	r3, [r0, #0]
 803cc96:	f04f 0900 	mov.w	r9, #0
 803cc9a:	07eb      	lsls	r3, r5, #31
 803cc9c:	d50a      	bpl.n	803ccb4 <__pow5mult+0x58>
 803cc9e:	4631      	mov	r1, r6
 803cca0:	4622      	mov	r2, r4
 803cca2:	4638      	mov	r0, r7
 803cca4:	f7ff ff30 	bl	803cb08 <__multiply>
 803cca8:	4631      	mov	r1, r6
 803ccaa:	4680      	mov	r8, r0
 803ccac:	4638      	mov	r0, r7
 803ccae:	f7ff fe30 	bl	803c912 <_Bfree>
 803ccb2:	4646      	mov	r6, r8
 803ccb4:	106d      	asrs	r5, r5, #1
 803ccb6:	d00b      	beq.n	803ccd0 <__pow5mult+0x74>
 803ccb8:	6820      	ldr	r0, [r4, #0]
 803ccba:	b938      	cbnz	r0, 803cccc <__pow5mult+0x70>
 803ccbc:	4622      	mov	r2, r4
 803ccbe:	4621      	mov	r1, r4
 803ccc0:	4638      	mov	r0, r7
 803ccc2:	f7ff ff21 	bl	803cb08 <__multiply>
 803ccc6:	6020      	str	r0, [r4, #0]
 803ccc8:	f8c0 9000 	str.w	r9, [r0]
 803cccc:	4604      	mov	r4, r0
 803ccce:	e7e4      	b.n	803cc9a <__pow5mult+0x3e>
 803ccd0:	4630      	mov	r0, r6
 803ccd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 803ccd6:	bf00      	nop
 803ccd8:	08044db4 	.word	0x08044db4

0803ccdc <__lshift>:
 803ccdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803cce0:	460c      	mov	r4, r1
 803cce2:	6849      	ldr	r1, [r1, #4]
 803cce4:	6923      	ldr	r3, [r4, #16]
 803cce6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 803ccea:	68a3      	ldr	r3, [r4, #8]
 803ccec:	4607      	mov	r7, r0
 803ccee:	4691      	mov	r9, r2
 803ccf0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 803ccf4:	f108 0601 	add.w	r6, r8, #1
 803ccf8:	42b3      	cmp	r3, r6
 803ccfa:	db0b      	blt.n	803cd14 <__lshift+0x38>
 803ccfc:	4638      	mov	r0, r7
 803ccfe:	f7ff fde3 	bl	803c8c8 <_Balloc>
 803cd02:	4605      	mov	r5, r0
 803cd04:	b948      	cbnz	r0, 803cd1a <__lshift+0x3e>
 803cd06:	4602      	mov	r2, r0
 803cd08:	4b28      	ldr	r3, [pc, #160]	@ (803cdac <__lshift+0xd0>)
 803cd0a:	4829      	ldr	r0, [pc, #164]	@ (803cdb0 <__lshift+0xd4>)
 803cd0c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 803cd10:	f7f6 fb1a 	bl	8033348 <__assert_func>
 803cd14:	3101      	adds	r1, #1
 803cd16:	005b      	lsls	r3, r3, #1
 803cd18:	e7ee      	b.n	803ccf8 <__lshift+0x1c>
 803cd1a:	2300      	movs	r3, #0
 803cd1c:	f100 0114 	add.w	r1, r0, #20
 803cd20:	f100 0210 	add.w	r2, r0, #16
 803cd24:	4618      	mov	r0, r3
 803cd26:	4553      	cmp	r3, sl
 803cd28:	db33      	blt.n	803cd92 <__lshift+0xb6>
 803cd2a:	6920      	ldr	r0, [r4, #16]
 803cd2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 803cd30:	f104 0314 	add.w	r3, r4, #20
 803cd34:	f019 091f 	ands.w	r9, r9, #31
 803cd38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 803cd3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 803cd40:	d02b      	beq.n	803cd9a <__lshift+0xbe>
 803cd42:	f1c9 0e20 	rsb	lr, r9, #32
 803cd46:	468a      	mov	sl, r1
 803cd48:	2200      	movs	r2, #0
 803cd4a:	6818      	ldr	r0, [r3, #0]
 803cd4c:	fa00 f009 	lsl.w	r0, r0, r9
 803cd50:	4310      	orrs	r0, r2
 803cd52:	f84a 0b04 	str.w	r0, [sl], #4
 803cd56:	f853 2b04 	ldr.w	r2, [r3], #4
 803cd5a:	459c      	cmp	ip, r3
 803cd5c:	fa22 f20e 	lsr.w	r2, r2, lr
 803cd60:	d8f3      	bhi.n	803cd4a <__lshift+0x6e>
 803cd62:	ebac 0304 	sub.w	r3, ip, r4
 803cd66:	3b15      	subs	r3, #21
 803cd68:	f023 0303 	bic.w	r3, r3, #3
 803cd6c:	3304      	adds	r3, #4
 803cd6e:	f104 0015 	add.w	r0, r4, #21
 803cd72:	4584      	cmp	ip, r0
 803cd74:	bf38      	it	cc
 803cd76:	2304      	movcc	r3, #4
 803cd78:	50ca      	str	r2, [r1, r3]
 803cd7a:	b10a      	cbz	r2, 803cd80 <__lshift+0xa4>
 803cd7c:	f108 0602 	add.w	r6, r8, #2
 803cd80:	3e01      	subs	r6, #1
 803cd82:	4638      	mov	r0, r7
 803cd84:	612e      	str	r6, [r5, #16]
 803cd86:	4621      	mov	r1, r4
 803cd88:	f7ff fdc3 	bl	803c912 <_Bfree>
 803cd8c:	4628      	mov	r0, r5
 803cd8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803cd92:	f842 0f04 	str.w	r0, [r2, #4]!
 803cd96:	3301      	adds	r3, #1
 803cd98:	e7c5      	b.n	803cd26 <__lshift+0x4a>
 803cd9a:	3904      	subs	r1, #4
 803cd9c:	f853 2b04 	ldr.w	r2, [r3], #4
 803cda0:	f841 2f04 	str.w	r2, [r1, #4]!
 803cda4:	459c      	cmp	ip, r3
 803cda6:	d8f9      	bhi.n	803cd9c <__lshift+0xc0>
 803cda8:	e7ea      	b.n	803cd80 <__lshift+0xa4>
 803cdaa:	bf00      	nop
 803cdac:	08044c66 	.word	0x08044c66
 803cdb0:	08044d5a 	.word	0x08044d5a

0803cdb4 <__mcmp>:
 803cdb4:	690a      	ldr	r2, [r1, #16]
 803cdb6:	4603      	mov	r3, r0
 803cdb8:	6900      	ldr	r0, [r0, #16]
 803cdba:	1a80      	subs	r0, r0, r2
 803cdbc:	b530      	push	{r4, r5, lr}
 803cdbe:	d10e      	bne.n	803cdde <__mcmp+0x2a>
 803cdc0:	3314      	adds	r3, #20
 803cdc2:	3114      	adds	r1, #20
 803cdc4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 803cdc8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 803cdcc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 803cdd0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 803cdd4:	4295      	cmp	r5, r2
 803cdd6:	d003      	beq.n	803cde0 <__mcmp+0x2c>
 803cdd8:	d205      	bcs.n	803cde6 <__mcmp+0x32>
 803cdda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 803cdde:	bd30      	pop	{r4, r5, pc}
 803cde0:	42a3      	cmp	r3, r4
 803cde2:	d3f3      	bcc.n	803cdcc <__mcmp+0x18>
 803cde4:	e7fb      	b.n	803cdde <__mcmp+0x2a>
 803cde6:	2001      	movs	r0, #1
 803cde8:	e7f9      	b.n	803cdde <__mcmp+0x2a>
	...

0803cdec <__mdiff>:
 803cdec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803cdf0:	4689      	mov	r9, r1
 803cdf2:	4606      	mov	r6, r0
 803cdf4:	4611      	mov	r1, r2
 803cdf6:	4648      	mov	r0, r9
 803cdf8:	4614      	mov	r4, r2
 803cdfa:	f7ff ffdb 	bl	803cdb4 <__mcmp>
 803cdfe:	1e05      	subs	r5, r0, #0
 803ce00:	d112      	bne.n	803ce28 <__mdiff+0x3c>
 803ce02:	4629      	mov	r1, r5
 803ce04:	4630      	mov	r0, r6
 803ce06:	f7ff fd5f 	bl	803c8c8 <_Balloc>
 803ce0a:	4602      	mov	r2, r0
 803ce0c:	b928      	cbnz	r0, 803ce1a <__mdiff+0x2e>
 803ce0e:	4b3f      	ldr	r3, [pc, #252]	@ (803cf0c <__mdiff+0x120>)
 803ce10:	f240 2137 	movw	r1, #567	@ 0x237
 803ce14:	483e      	ldr	r0, [pc, #248]	@ (803cf10 <__mdiff+0x124>)
 803ce16:	f7f6 fa97 	bl	8033348 <__assert_func>
 803ce1a:	2301      	movs	r3, #1
 803ce1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 803ce20:	4610      	mov	r0, r2
 803ce22:	b003      	add	sp, #12
 803ce24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803ce28:	bfbc      	itt	lt
 803ce2a:	464b      	movlt	r3, r9
 803ce2c:	46a1      	movlt	r9, r4
 803ce2e:	4630      	mov	r0, r6
 803ce30:	f8d9 1004 	ldr.w	r1, [r9, #4]
 803ce34:	bfba      	itte	lt
 803ce36:	461c      	movlt	r4, r3
 803ce38:	2501      	movlt	r5, #1
 803ce3a:	2500      	movge	r5, #0
 803ce3c:	f7ff fd44 	bl	803c8c8 <_Balloc>
 803ce40:	4602      	mov	r2, r0
 803ce42:	b918      	cbnz	r0, 803ce4c <__mdiff+0x60>
 803ce44:	4b31      	ldr	r3, [pc, #196]	@ (803cf0c <__mdiff+0x120>)
 803ce46:	f240 2145 	movw	r1, #581	@ 0x245
 803ce4a:	e7e3      	b.n	803ce14 <__mdiff+0x28>
 803ce4c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 803ce50:	6926      	ldr	r6, [r4, #16]
 803ce52:	60c5      	str	r5, [r0, #12]
 803ce54:	f109 0310 	add.w	r3, r9, #16
 803ce58:	f109 0514 	add.w	r5, r9, #20
 803ce5c:	f104 0e14 	add.w	lr, r4, #20
 803ce60:	f100 0b14 	add.w	fp, r0, #20
 803ce64:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 803ce68:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 803ce6c:	9301      	str	r3, [sp, #4]
 803ce6e:	46d9      	mov	r9, fp
 803ce70:	f04f 0c00 	mov.w	ip, #0
 803ce74:	9b01      	ldr	r3, [sp, #4]
 803ce76:	f85e 0b04 	ldr.w	r0, [lr], #4
 803ce7a:	f853 af04 	ldr.w	sl, [r3, #4]!
 803ce7e:	9301      	str	r3, [sp, #4]
 803ce80:	fa1f f38a 	uxth.w	r3, sl
 803ce84:	4619      	mov	r1, r3
 803ce86:	b283      	uxth	r3, r0
 803ce88:	1acb      	subs	r3, r1, r3
 803ce8a:	0c00      	lsrs	r0, r0, #16
 803ce8c:	4463      	add	r3, ip
 803ce8e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 803ce92:	eb00 4023 	add.w	r0, r0, r3, asr #16
 803ce96:	b29b      	uxth	r3, r3
 803ce98:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 803ce9c:	4576      	cmp	r6, lr
 803ce9e:	f849 3b04 	str.w	r3, [r9], #4
 803cea2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 803cea6:	d8e5      	bhi.n	803ce74 <__mdiff+0x88>
 803cea8:	1b33      	subs	r3, r6, r4
 803ceaa:	3b15      	subs	r3, #21
 803ceac:	f023 0303 	bic.w	r3, r3, #3
 803ceb0:	3415      	adds	r4, #21
 803ceb2:	3304      	adds	r3, #4
 803ceb4:	42a6      	cmp	r6, r4
 803ceb6:	bf38      	it	cc
 803ceb8:	2304      	movcc	r3, #4
 803ceba:	441d      	add	r5, r3
 803cebc:	445b      	add	r3, fp
 803cebe:	461e      	mov	r6, r3
 803cec0:	462c      	mov	r4, r5
 803cec2:	4544      	cmp	r4, r8
 803cec4:	d30e      	bcc.n	803cee4 <__mdiff+0xf8>
 803cec6:	f108 0103 	add.w	r1, r8, #3
 803ceca:	1b49      	subs	r1, r1, r5
 803cecc:	f021 0103 	bic.w	r1, r1, #3
 803ced0:	3d03      	subs	r5, #3
 803ced2:	45a8      	cmp	r8, r5
 803ced4:	bf38      	it	cc
 803ced6:	2100      	movcc	r1, #0
 803ced8:	440b      	add	r3, r1
 803ceda:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 803cede:	b191      	cbz	r1, 803cf06 <__mdiff+0x11a>
 803cee0:	6117      	str	r7, [r2, #16]
 803cee2:	e79d      	b.n	803ce20 <__mdiff+0x34>
 803cee4:	f854 1b04 	ldr.w	r1, [r4], #4
 803cee8:	46e6      	mov	lr, ip
 803ceea:	0c08      	lsrs	r0, r1, #16
 803ceec:	fa1c fc81 	uxtah	ip, ip, r1
 803cef0:	4471      	add	r1, lr
 803cef2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 803cef6:	b289      	uxth	r1, r1
 803cef8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 803cefc:	f846 1b04 	str.w	r1, [r6], #4
 803cf00:	ea4f 4c20 	mov.w	ip, r0, asr #16
 803cf04:	e7dd      	b.n	803cec2 <__mdiff+0xd6>
 803cf06:	3f01      	subs	r7, #1
 803cf08:	e7e7      	b.n	803ceda <__mdiff+0xee>
 803cf0a:	bf00      	nop
 803cf0c:	08044c66 	.word	0x08044c66
 803cf10:	08044d5a 	.word	0x08044d5a

0803cf14 <__ulp>:
 803cf14:	b082      	sub	sp, #8
 803cf16:	ed8d 0b00 	vstr	d0, [sp]
 803cf1a:	9a01      	ldr	r2, [sp, #4]
 803cf1c:	4b0f      	ldr	r3, [pc, #60]	@ (803cf5c <__ulp+0x48>)
 803cf1e:	4013      	ands	r3, r2
 803cf20:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 803cf24:	2b00      	cmp	r3, #0
 803cf26:	dc08      	bgt.n	803cf3a <__ulp+0x26>
 803cf28:	425b      	negs	r3, r3
 803cf2a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 803cf2e:	ea4f 5223 	mov.w	r2, r3, asr #20
 803cf32:	da04      	bge.n	803cf3e <__ulp+0x2a>
 803cf34:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 803cf38:	4113      	asrs	r3, r2
 803cf3a:	2200      	movs	r2, #0
 803cf3c:	e008      	b.n	803cf50 <__ulp+0x3c>
 803cf3e:	f1a2 0314 	sub.w	r3, r2, #20
 803cf42:	2b1e      	cmp	r3, #30
 803cf44:	bfda      	itte	le
 803cf46:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 803cf4a:	40da      	lsrle	r2, r3
 803cf4c:	2201      	movgt	r2, #1
 803cf4e:	2300      	movs	r3, #0
 803cf50:	4619      	mov	r1, r3
 803cf52:	4610      	mov	r0, r2
 803cf54:	ec41 0b10 	vmov	d0, r0, r1
 803cf58:	b002      	add	sp, #8
 803cf5a:	4770      	bx	lr
 803cf5c:	7ff00000 	.word	0x7ff00000

0803cf60 <__b2d>:
 803cf60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803cf64:	6906      	ldr	r6, [r0, #16]
 803cf66:	f100 0814 	add.w	r8, r0, #20
 803cf6a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 803cf6e:	1f37      	subs	r7, r6, #4
 803cf70:	f856 2c04 	ldr.w	r2, [r6, #-4]
 803cf74:	4610      	mov	r0, r2
 803cf76:	f7ff fd65 	bl	803ca44 <__hi0bits>
 803cf7a:	f1c0 0320 	rsb	r3, r0, #32
 803cf7e:	280a      	cmp	r0, #10
 803cf80:	600b      	str	r3, [r1, #0]
 803cf82:	491b      	ldr	r1, [pc, #108]	@ (803cff0 <__b2d+0x90>)
 803cf84:	dc15      	bgt.n	803cfb2 <__b2d+0x52>
 803cf86:	f1c0 0c0b 	rsb	ip, r0, #11
 803cf8a:	fa22 f30c 	lsr.w	r3, r2, ip
 803cf8e:	45b8      	cmp	r8, r7
 803cf90:	ea43 0501 	orr.w	r5, r3, r1
 803cf94:	bf34      	ite	cc
 803cf96:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 803cf9a:	2300      	movcs	r3, #0
 803cf9c:	3015      	adds	r0, #21
 803cf9e:	fa02 f000 	lsl.w	r0, r2, r0
 803cfa2:	fa23 f30c 	lsr.w	r3, r3, ip
 803cfa6:	4303      	orrs	r3, r0
 803cfa8:	461c      	mov	r4, r3
 803cfaa:	ec45 4b10 	vmov	d0, r4, r5
 803cfae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803cfb2:	45b8      	cmp	r8, r7
 803cfb4:	bf3a      	itte	cc
 803cfb6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 803cfba:	f1a6 0708 	subcc.w	r7, r6, #8
 803cfbe:	2300      	movcs	r3, #0
 803cfc0:	380b      	subs	r0, #11
 803cfc2:	d012      	beq.n	803cfea <__b2d+0x8a>
 803cfc4:	f1c0 0120 	rsb	r1, r0, #32
 803cfc8:	fa23 f401 	lsr.w	r4, r3, r1
 803cfcc:	4082      	lsls	r2, r0
 803cfce:	4322      	orrs	r2, r4
 803cfd0:	4547      	cmp	r7, r8
 803cfd2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 803cfd6:	bf8c      	ite	hi
 803cfd8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 803cfdc:	2200      	movls	r2, #0
 803cfde:	4083      	lsls	r3, r0
 803cfe0:	40ca      	lsrs	r2, r1
 803cfe2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 803cfe6:	4313      	orrs	r3, r2
 803cfe8:	e7de      	b.n	803cfa8 <__b2d+0x48>
 803cfea:	ea42 0501 	orr.w	r5, r2, r1
 803cfee:	e7db      	b.n	803cfa8 <__b2d+0x48>
 803cff0:	3ff00000 	.word	0x3ff00000

0803cff4 <__d2b>:
 803cff4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 803cff8:	460f      	mov	r7, r1
 803cffa:	2101      	movs	r1, #1
 803cffc:	ec59 8b10 	vmov	r8, r9, d0
 803d000:	4616      	mov	r6, r2
 803d002:	f7ff fc61 	bl	803c8c8 <_Balloc>
 803d006:	4604      	mov	r4, r0
 803d008:	b930      	cbnz	r0, 803d018 <__d2b+0x24>
 803d00a:	4602      	mov	r2, r0
 803d00c:	4b23      	ldr	r3, [pc, #140]	@ (803d09c <__d2b+0xa8>)
 803d00e:	4824      	ldr	r0, [pc, #144]	@ (803d0a0 <__d2b+0xac>)
 803d010:	f240 310f 	movw	r1, #783	@ 0x30f
 803d014:	f7f6 f998 	bl	8033348 <__assert_func>
 803d018:	f3c9 550a 	ubfx	r5, r9, #20, #11
 803d01c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 803d020:	b10d      	cbz	r5, 803d026 <__d2b+0x32>
 803d022:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 803d026:	9301      	str	r3, [sp, #4]
 803d028:	f1b8 0300 	subs.w	r3, r8, #0
 803d02c:	d023      	beq.n	803d076 <__d2b+0x82>
 803d02e:	4668      	mov	r0, sp
 803d030:	9300      	str	r3, [sp, #0]
 803d032:	f7ff fd26 	bl	803ca82 <__lo0bits>
 803d036:	e9dd 1200 	ldrd	r1, r2, [sp]
 803d03a:	b1d0      	cbz	r0, 803d072 <__d2b+0x7e>
 803d03c:	f1c0 0320 	rsb	r3, r0, #32
 803d040:	fa02 f303 	lsl.w	r3, r2, r3
 803d044:	430b      	orrs	r3, r1
 803d046:	40c2      	lsrs	r2, r0
 803d048:	6163      	str	r3, [r4, #20]
 803d04a:	9201      	str	r2, [sp, #4]
 803d04c:	9b01      	ldr	r3, [sp, #4]
 803d04e:	61a3      	str	r3, [r4, #24]
 803d050:	2b00      	cmp	r3, #0
 803d052:	bf0c      	ite	eq
 803d054:	2201      	moveq	r2, #1
 803d056:	2202      	movne	r2, #2
 803d058:	6122      	str	r2, [r4, #16]
 803d05a:	b1a5      	cbz	r5, 803d086 <__d2b+0x92>
 803d05c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 803d060:	4405      	add	r5, r0
 803d062:	603d      	str	r5, [r7, #0]
 803d064:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 803d068:	6030      	str	r0, [r6, #0]
 803d06a:	4620      	mov	r0, r4
 803d06c:	b003      	add	sp, #12
 803d06e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 803d072:	6161      	str	r1, [r4, #20]
 803d074:	e7ea      	b.n	803d04c <__d2b+0x58>
 803d076:	a801      	add	r0, sp, #4
 803d078:	f7ff fd03 	bl	803ca82 <__lo0bits>
 803d07c:	9b01      	ldr	r3, [sp, #4]
 803d07e:	6163      	str	r3, [r4, #20]
 803d080:	3020      	adds	r0, #32
 803d082:	2201      	movs	r2, #1
 803d084:	e7e8      	b.n	803d058 <__d2b+0x64>
 803d086:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 803d08a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 803d08e:	6038      	str	r0, [r7, #0]
 803d090:	6918      	ldr	r0, [r3, #16]
 803d092:	f7ff fcd7 	bl	803ca44 <__hi0bits>
 803d096:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 803d09a:	e7e5      	b.n	803d068 <__d2b+0x74>
 803d09c:	08044c66 	.word	0x08044c66
 803d0a0:	08044d5a 	.word	0x08044d5a

0803d0a4 <__ratio>:
 803d0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803d0a8:	b085      	sub	sp, #20
 803d0aa:	e9cd 1000 	strd	r1, r0, [sp]
 803d0ae:	a902      	add	r1, sp, #8
 803d0b0:	f7ff ff56 	bl	803cf60 <__b2d>
 803d0b4:	9800      	ldr	r0, [sp, #0]
 803d0b6:	a903      	add	r1, sp, #12
 803d0b8:	ec55 4b10 	vmov	r4, r5, d0
 803d0bc:	f7ff ff50 	bl	803cf60 <__b2d>
 803d0c0:	9b01      	ldr	r3, [sp, #4]
 803d0c2:	6919      	ldr	r1, [r3, #16]
 803d0c4:	9b00      	ldr	r3, [sp, #0]
 803d0c6:	691b      	ldr	r3, [r3, #16]
 803d0c8:	1ac9      	subs	r1, r1, r3
 803d0ca:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 803d0ce:	1a9b      	subs	r3, r3, r2
 803d0d0:	ec5b ab10 	vmov	sl, fp, d0
 803d0d4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 803d0d8:	2b00      	cmp	r3, #0
 803d0da:	bfce      	itee	gt
 803d0dc:	462a      	movgt	r2, r5
 803d0de:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 803d0e2:	465a      	movle	r2, fp
 803d0e4:	462f      	mov	r7, r5
 803d0e6:	46d9      	mov	r9, fp
 803d0e8:	bfcc      	ite	gt
 803d0ea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 803d0ee:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 803d0f2:	464b      	mov	r3, r9
 803d0f4:	4652      	mov	r2, sl
 803d0f6:	4620      	mov	r0, r4
 803d0f8:	4639      	mov	r1, r7
 803d0fa:	f7d3 fbbf 	bl	801087c <__aeabi_ddiv>
 803d0fe:	ec41 0b10 	vmov	d0, r0, r1
 803d102:	b005      	add	sp, #20
 803d104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0803d108 <__copybits>:
 803d108:	3901      	subs	r1, #1
 803d10a:	b570      	push	{r4, r5, r6, lr}
 803d10c:	1149      	asrs	r1, r1, #5
 803d10e:	6914      	ldr	r4, [r2, #16]
 803d110:	3101      	adds	r1, #1
 803d112:	f102 0314 	add.w	r3, r2, #20
 803d116:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 803d11a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 803d11e:	1f05      	subs	r5, r0, #4
 803d120:	42a3      	cmp	r3, r4
 803d122:	d30c      	bcc.n	803d13e <__copybits+0x36>
 803d124:	1aa3      	subs	r3, r4, r2
 803d126:	3b11      	subs	r3, #17
 803d128:	f023 0303 	bic.w	r3, r3, #3
 803d12c:	3211      	adds	r2, #17
 803d12e:	42a2      	cmp	r2, r4
 803d130:	bf88      	it	hi
 803d132:	2300      	movhi	r3, #0
 803d134:	4418      	add	r0, r3
 803d136:	2300      	movs	r3, #0
 803d138:	4288      	cmp	r0, r1
 803d13a:	d305      	bcc.n	803d148 <__copybits+0x40>
 803d13c:	bd70      	pop	{r4, r5, r6, pc}
 803d13e:	f853 6b04 	ldr.w	r6, [r3], #4
 803d142:	f845 6f04 	str.w	r6, [r5, #4]!
 803d146:	e7eb      	b.n	803d120 <__copybits+0x18>
 803d148:	f840 3b04 	str.w	r3, [r0], #4
 803d14c:	e7f4      	b.n	803d138 <__copybits+0x30>

0803d14e <__any_on>:
 803d14e:	f100 0214 	add.w	r2, r0, #20
 803d152:	6900      	ldr	r0, [r0, #16]
 803d154:	114b      	asrs	r3, r1, #5
 803d156:	4298      	cmp	r0, r3
 803d158:	b510      	push	{r4, lr}
 803d15a:	db11      	blt.n	803d180 <__any_on+0x32>
 803d15c:	dd0a      	ble.n	803d174 <__any_on+0x26>
 803d15e:	f011 011f 	ands.w	r1, r1, #31
 803d162:	d007      	beq.n	803d174 <__any_on+0x26>
 803d164:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 803d168:	fa24 f001 	lsr.w	r0, r4, r1
 803d16c:	fa00 f101 	lsl.w	r1, r0, r1
 803d170:	428c      	cmp	r4, r1
 803d172:	d10b      	bne.n	803d18c <__any_on+0x3e>
 803d174:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 803d178:	4293      	cmp	r3, r2
 803d17a:	d803      	bhi.n	803d184 <__any_on+0x36>
 803d17c:	2000      	movs	r0, #0
 803d17e:	bd10      	pop	{r4, pc}
 803d180:	4603      	mov	r3, r0
 803d182:	e7f7      	b.n	803d174 <__any_on+0x26>
 803d184:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 803d188:	2900      	cmp	r1, #0
 803d18a:	d0f5      	beq.n	803d178 <__any_on+0x2a>
 803d18c:	2001      	movs	r0, #1
 803d18e:	e7f6      	b.n	803d17e <__any_on+0x30>

0803d190 <realloc>:
 803d190:	4b02      	ldr	r3, [pc, #8]	@ (803d19c <realloc+0xc>)
 803d192:	460a      	mov	r2, r1
 803d194:	4601      	mov	r1, r0
 803d196:	6818      	ldr	r0, [r3, #0]
 803d198:	f000 b890 	b.w	803d2bc <_realloc_r>
 803d19c:	20000430 	.word	0x20000430

0803d1a0 <_fclose_r>:
 803d1a0:	b570      	push	{r4, r5, r6, lr}
 803d1a2:	4605      	mov	r5, r0
 803d1a4:	460c      	mov	r4, r1
 803d1a6:	b1b1      	cbz	r1, 803d1d6 <_fclose_r+0x36>
 803d1a8:	b118      	cbz	r0, 803d1b2 <_fclose_r+0x12>
 803d1aa:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 803d1ac:	b90b      	cbnz	r3, 803d1b2 <_fclose_r+0x12>
 803d1ae:	f7f8 fb79 	bl	80358a4 <__sinit>
 803d1b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 803d1b4:	07de      	lsls	r6, r3, #31
 803d1b6:	d405      	bmi.n	803d1c4 <_fclose_r+0x24>
 803d1b8:	89a3      	ldrh	r3, [r4, #12]
 803d1ba:	0598      	lsls	r0, r3, #22
 803d1bc:	d402      	bmi.n	803d1c4 <_fclose_r+0x24>
 803d1be:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 803d1c0:	f7fa f84f 	bl	8037262 <__retarget_lock_acquire_recursive>
 803d1c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803d1c8:	b943      	cbnz	r3, 803d1dc <_fclose_r+0x3c>
 803d1ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 803d1cc:	07d9      	lsls	r1, r3, #31
 803d1ce:	d402      	bmi.n	803d1d6 <_fclose_r+0x36>
 803d1d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 803d1d2:	f7fa f848 	bl	8037266 <__retarget_lock_release_recursive>
 803d1d6:	2600      	movs	r6, #0
 803d1d8:	4630      	mov	r0, r6
 803d1da:	bd70      	pop	{r4, r5, r6, pc}
 803d1dc:	4621      	mov	r1, r4
 803d1de:	4628      	mov	r0, r5
 803d1e0:	f7f8 f996 	bl	8035510 <__sflush_r>
 803d1e4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 803d1e6:	4606      	mov	r6, r0
 803d1e8:	b133      	cbz	r3, 803d1f8 <_fclose_r+0x58>
 803d1ea:	69e1      	ldr	r1, [r4, #28]
 803d1ec:	4628      	mov	r0, r5
 803d1ee:	4798      	blx	r3
 803d1f0:	2800      	cmp	r0, #0
 803d1f2:	bfb8      	it	lt
 803d1f4:	f04f 36ff 	movlt.w	r6, #4294967295	@ 0xffffffff
 803d1f8:	89a3      	ldrh	r3, [r4, #12]
 803d1fa:	061a      	lsls	r2, r3, #24
 803d1fc:	d503      	bpl.n	803d206 <_fclose_r+0x66>
 803d1fe:	6921      	ldr	r1, [r4, #16]
 803d200:	4628      	mov	r0, r5
 803d202:	f7fa ff33 	bl	803806c <_free_r>
 803d206:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 803d208:	b141      	cbz	r1, 803d21c <_fclose_r+0x7c>
 803d20a:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 803d20e:	4299      	cmp	r1, r3
 803d210:	d002      	beq.n	803d218 <_fclose_r+0x78>
 803d212:	4628      	mov	r0, r5
 803d214:	f7fa ff2a 	bl	803806c <_free_r>
 803d218:	2300      	movs	r3, #0
 803d21a:	6323      	str	r3, [r4, #48]	@ 0x30
 803d21c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 803d21e:	b121      	cbz	r1, 803d22a <_fclose_r+0x8a>
 803d220:	4628      	mov	r0, r5
 803d222:	f7fa ff23 	bl	803806c <_free_r>
 803d226:	2300      	movs	r3, #0
 803d228:	6463      	str	r3, [r4, #68]	@ 0x44
 803d22a:	f7f8 fb2f 	bl	803588c <__sfp_lock_acquire>
 803d22e:	2300      	movs	r3, #0
 803d230:	81a3      	strh	r3, [r4, #12]
 803d232:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 803d234:	07db      	lsls	r3, r3, #31
 803d236:	d402      	bmi.n	803d23e <_fclose_r+0x9e>
 803d238:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 803d23a:	f7fa f814 	bl	8037266 <__retarget_lock_release_recursive>
 803d23e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 803d240:	f7fa f80d 	bl	803725e <__retarget_lock_close_recursive>
 803d244:	f7f8 fb28 	bl	8035898 <__sfp_lock_release>
 803d248:	e7c6      	b.n	803d1d8 <_fclose_r+0x38>

0803d24a <__sccl>:
 803d24a:	b570      	push	{r4, r5, r6, lr}
 803d24c:	780b      	ldrb	r3, [r1, #0]
 803d24e:	4604      	mov	r4, r0
 803d250:	2b5e      	cmp	r3, #94	@ 0x5e
 803d252:	bf0b      	itete	eq
 803d254:	784b      	ldrbeq	r3, [r1, #1]
 803d256:	1c4a      	addne	r2, r1, #1
 803d258:	1c8a      	addeq	r2, r1, #2
 803d25a:	2100      	movne	r1, #0
 803d25c:	bf08      	it	eq
 803d25e:	2101      	moveq	r1, #1
 803d260:	3801      	subs	r0, #1
 803d262:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 803d266:	f800 1f01 	strb.w	r1, [r0, #1]!
 803d26a:	42a8      	cmp	r0, r5
 803d26c:	d1fb      	bne.n	803d266 <__sccl+0x1c>
 803d26e:	b90b      	cbnz	r3, 803d274 <__sccl+0x2a>
 803d270:	1e50      	subs	r0, r2, #1
 803d272:	bd70      	pop	{r4, r5, r6, pc}
 803d274:	f081 0101 	eor.w	r1, r1, #1
 803d278:	54e1      	strb	r1, [r4, r3]
 803d27a:	4610      	mov	r0, r2
 803d27c:	4602      	mov	r2, r0
 803d27e:	f812 5b01 	ldrb.w	r5, [r2], #1
 803d282:	2d2d      	cmp	r5, #45	@ 0x2d
 803d284:	d005      	beq.n	803d292 <__sccl+0x48>
 803d286:	2d5d      	cmp	r5, #93	@ 0x5d
 803d288:	d016      	beq.n	803d2b8 <__sccl+0x6e>
 803d28a:	2d00      	cmp	r5, #0
 803d28c:	d0f1      	beq.n	803d272 <__sccl+0x28>
 803d28e:	462b      	mov	r3, r5
 803d290:	e7f2      	b.n	803d278 <__sccl+0x2e>
 803d292:	7846      	ldrb	r6, [r0, #1]
 803d294:	2e5d      	cmp	r6, #93	@ 0x5d
 803d296:	d0fa      	beq.n	803d28e <__sccl+0x44>
 803d298:	42b3      	cmp	r3, r6
 803d29a:	dcf8      	bgt.n	803d28e <__sccl+0x44>
 803d29c:	3002      	adds	r0, #2
 803d29e:	461a      	mov	r2, r3
 803d2a0:	3201      	adds	r2, #1
 803d2a2:	4296      	cmp	r6, r2
 803d2a4:	54a1      	strb	r1, [r4, r2]
 803d2a6:	dcfb      	bgt.n	803d2a0 <__sccl+0x56>
 803d2a8:	1af2      	subs	r2, r6, r3
 803d2aa:	3a01      	subs	r2, #1
 803d2ac:	1c5d      	adds	r5, r3, #1
 803d2ae:	42b3      	cmp	r3, r6
 803d2b0:	bfa8      	it	ge
 803d2b2:	2200      	movge	r2, #0
 803d2b4:	18ab      	adds	r3, r5, r2
 803d2b6:	e7e1      	b.n	803d27c <__sccl+0x32>
 803d2b8:	4610      	mov	r0, r2
 803d2ba:	e7da      	b.n	803d272 <__sccl+0x28>

0803d2bc <_realloc_r>:
 803d2bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803d2c0:	4682      	mov	sl, r0
 803d2c2:	4693      	mov	fp, r2
 803d2c4:	460c      	mov	r4, r1
 803d2c6:	b929      	cbnz	r1, 803d2d4 <_realloc_r+0x18>
 803d2c8:	4611      	mov	r1, r2
 803d2ca:	b003      	add	sp, #12
 803d2cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803d2d0:	f7fa bfe4 	b.w	803829c <_malloc_r>
 803d2d4:	f7ff faec 	bl	803c8b0 <__malloc_lock>
 803d2d8:	f10b 080b 	add.w	r8, fp, #11
 803d2dc:	f854 5c04 	ldr.w	r5, [r4, #-4]
 803d2e0:	f1b8 0f16 	cmp.w	r8, #22
 803d2e4:	f1a4 0908 	sub.w	r9, r4, #8
 803d2e8:	f025 0603 	bic.w	r6, r5, #3
 803d2ec:	d908      	bls.n	803d300 <_realloc_r+0x44>
 803d2ee:	f038 0807 	bics.w	r8, r8, #7
 803d2f2:	d507      	bpl.n	803d304 <_realloc_r+0x48>
 803d2f4:	230c      	movs	r3, #12
 803d2f6:	f8ca 3000 	str.w	r3, [sl]
 803d2fa:	f04f 0b00 	mov.w	fp, #0
 803d2fe:	e032      	b.n	803d366 <_realloc_r+0xaa>
 803d300:	f04f 0810 	mov.w	r8, #16
 803d304:	45c3      	cmp	fp, r8
 803d306:	d8f5      	bhi.n	803d2f4 <_realloc_r+0x38>
 803d308:	4546      	cmp	r6, r8
 803d30a:	f280 8174 	bge.w	803d5f6 <_realloc_r+0x33a>
 803d30e:	4b9e      	ldr	r3, [pc, #632]	@ (803d588 <_realloc_r+0x2cc>)
 803d310:	f8d3 c008 	ldr.w	ip, [r3, #8]
 803d314:	eb09 0106 	add.w	r1, r9, r6
 803d318:	458c      	cmp	ip, r1
 803d31a:	6848      	ldr	r0, [r1, #4]
 803d31c:	d005      	beq.n	803d32a <_realloc_r+0x6e>
 803d31e:	f020 0201 	bic.w	r2, r0, #1
 803d322:	440a      	add	r2, r1
 803d324:	6852      	ldr	r2, [r2, #4]
 803d326:	07d7      	lsls	r7, r2, #31
 803d328:	d449      	bmi.n	803d3be <_realloc_r+0x102>
 803d32a:	f020 0003 	bic.w	r0, r0, #3
 803d32e:	458c      	cmp	ip, r1
 803d330:	eb06 0700 	add.w	r7, r6, r0
 803d334:	d11b      	bne.n	803d36e <_realloc_r+0xb2>
 803d336:	f108 0210 	add.w	r2, r8, #16
 803d33a:	42ba      	cmp	r2, r7
 803d33c:	dc41      	bgt.n	803d3c2 <_realloc_r+0x106>
 803d33e:	eb09 0208 	add.w	r2, r9, r8
 803d342:	eba7 0708 	sub.w	r7, r7, r8
 803d346:	f047 0701 	orr.w	r7, r7, #1
 803d34a:	609a      	str	r2, [r3, #8]
 803d34c:	6057      	str	r7, [r2, #4]
 803d34e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 803d352:	f003 0301 	and.w	r3, r3, #1
 803d356:	ea43 0308 	orr.w	r3, r3, r8
 803d35a:	f844 3c04 	str.w	r3, [r4, #-4]
 803d35e:	4650      	mov	r0, sl
 803d360:	f7ff faac 	bl	803c8bc <__malloc_unlock>
 803d364:	46a3      	mov	fp, r4
 803d366:	4658      	mov	r0, fp
 803d368:	b003      	add	sp, #12
 803d36a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803d36e:	45b8      	cmp	r8, r7
 803d370:	dc27      	bgt.n	803d3c2 <_realloc_r+0x106>
 803d372:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 803d376:	60d3      	str	r3, [r2, #12]
 803d378:	609a      	str	r2, [r3, #8]
 803d37a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 803d37e:	eba7 0008 	sub.w	r0, r7, r8
 803d382:	280f      	cmp	r0, #15
 803d384:	f003 0301 	and.w	r3, r3, #1
 803d388:	eb09 0207 	add.w	r2, r9, r7
 803d38c:	f240 8135 	bls.w	803d5fa <_realloc_r+0x33e>
 803d390:	eb09 0108 	add.w	r1, r9, r8
 803d394:	ea48 0303 	orr.w	r3, r8, r3
 803d398:	f040 0001 	orr.w	r0, r0, #1
 803d39c:	f8c9 3004 	str.w	r3, [r9, #4]
 803d3a0:	6048      	str	r0, [r1, #4]
 803d3a2:	6853      	ldr	r3, [r2, #4]
 803d3a4:	f043 0301 	orr.w	r3, r3, #1
 803d3a8:	6053      	str	r3, [r2, #4]
 803d3aa:	3108      	adds	r1, #8
 803d3ac:	4650      	mov	r0, sl
 803d3ae:	f7fa fe5d 	bl	803806c <_free_r>
 803d3b2:	4650      	mov	r0, sl
 803d3b4:	f7ff fa82 	bl	803c8bc <__malloc_unlock>
 803d3b8:	f109 0b08 	add.w	fp, r9, #8
 803d3bc:	e7d3      	b.n	803d366 <_realloc_r+0xaa>
 803d3be:	2000      	movs	r0, #0
 803d3c0:	4601      	mov	r1, r0
 803d3c2:	07ea      	lsls	r2, r5, #31
 803d3c4:	f100 80c7 	bmi.w	803d556 <_realloc_r+0x29a>
 803d3c8:	f854 5c08 	ldr.w	r5, [r4, #-8]
 803d3cc:	eba9 0505 	sub.w	r5, r9, r5
 803d3d0:	686a      	ldr	r2, [r5, #4]
 803d3d2:	f022 0203 	bic.w	r2, r2, #3
 803d3d6:	4432      	add	r2, r6
 803d3d8:	9201      	str	r2, [sp, #4]
 803d3da:	2900      	cmp	r1, #0
 803d3dc:	f000 8086 	beq.w	803d4ec <_realloc_r+0x230>
 803d3e0:	458c      	cmp	ip, r1
 803d3e2:	eb00 0702 	add.w	r7, r0, r2
 803d3e6:	d149      	bne.n	803d47c <_realloc_r+0x1c0>
 803d3e8:	f108 0210 	add.w	r2, r8, #16
 803d3ec:	42ba      	cmp	r2, r7
 803d3ee:	dc7d      	bgt.n	803d4ec <_realloc_r+0x230>
 803d3f0:	46ab      	mov	fp, r5
 803d3f2:	68ea      	ldr	r2, [r5, #12]
 803d3f4:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 803d3f8:	60ca      	str	r2, [r1, #12]
 803d3fa:	6091      	str	r1, [r2, #8]
 803d3fc:	1f32      	subs	r2, r6, #4
 803d3fe:	2a24      	cmp	r2, #36	@ 0x24
 803d400:	d836      	bhi.n	803d470 <_realloc_r+0x1b4>
 803d402:	2a13      	cmp	r2, #19
 803d404:	d932      	bls.n	803d46c <_realloc_r+0x1b0>
 803d406:	6821      	ldr	r1, [r4, #0]
 803d408:	60a9      	str	r1, [r5, #8]
 803d40a:	6861      	ldr	r1, [r4, #4]
 803d40c:	60e9      	str	r1, [r5, #12]
 803d40e:	2a1b      	cmp	r2, #27
 803d410:	d81a      	bhi.n	803d448 <_realloc_r+0x18c>
 803d412:	3408      	adds	r4, #8
 803d414:	f105 0210 	add.w	r2, r5, #16
 803d418:	6821      	ldr	r1, [r4, #0]
 803d41a:	6011      	str	r1, [r2, #0]
 803d41c:	6861      	ldr	r1, [r4, #4]
 803d41e:	6051      	str	r1, [r2, #4]
 803d420:	68a1      	ldr	r1, [r4, #8]
 803d422:	6091      	str	r1, [r2, #8]
 803d424:	eb05 0208 	add.w	r2, r5, r8
 803d428:	eba7 0708 	sub.w	r7, r7, r8
 803d42c:	f047 0701 	orr.w	r7, r7, #1
 803d430:	609a      	str	r2, [r3, #8]
 803d432:	6057      	str	r7, [r2, #4]
 803d434:	686b      	ldr	r3, [r5, #4]
 803d436:	f003 0301 	and.w	r3, r3, #1
 803d43a:	ea43 0308 	orr.w	r3, r3, r8
 803d43e:	606b      	str	r3, [r5, #4]
 803d440:	4650      	mov	r0, sl
 803d442:	f7ff fa3b 	bl	803c8bc <__malloc_unlock>
 803d446:	e78e      	b.n	803d366 <_realloc_r+0xaa>
 803d448:	68a1      	ldr	r1, [r4, #8]
 803d44a:	6129      	str	r1, [r5, #16]
 803d44c:	68e1      	ldr	r1, [r4, #12]
 803d44e:	6169      	str	r1, [r5, #20]
 803d450:	2a24      	cmp	r2, #36	@ 0x24
 803d452:	bf01      	itttt	eq
 803d454:	6922      	ldreq	r2, [r4, #16]
 803d456:	61aa      	streq	r2, [r5, #24]
 803d458:	6961      	ldreq	r1, [r4, #20]
 803d45a:	61e9      	streq	r1, [r5, #28]
 803d45c:	bf19      	ittee	ne
 803d45e:	3410      	addne	r4, #16
 803d460:	f105 0218 	addne.w	r2, r5, #24
 803d464:	f105 0220 	addeq.w	r2, r5, #32
 803d468:	3418      	addeq	r4, #24
 803d46a:	e7d5      	b.n	803d418 <_realloc_r+0x15c>
 803d46c:	465a      	mov	r2, fp
 803d46e:	e7d3      	b.n	803d418 <_realloc_r+0x15c>
 803d470:	4621      	mov	r1, r4
 803d472:	4658      	mov	r0, fp
 803d474:	f7f8 fca2 	bl	8035dbc <memmove>
 803d478:	4b43      	ldr	r3, [pc, #268]	@ (803d588 <_realloc_r+0x2cc>)
 803d47a:	e7d3      	b.n	803d424 <_realloc_r+0x168>
 803d47c:	45b8      	cmp	r8, r7
 803d47e:	dc35      	bgt.n	803d4ec <_realloc_r+0x230>
 803d480:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 803d484:	4628      	mov	r0, r5
 803d486:	60d3      	str	r3, [r2, #12]
 803d488:	609a      	str	r2, [r3, #8]
 803d48a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 803d48e:	68eb      	ldr	r3, [r5, #12]
 803d490:	60d3      	str	r3, [r2, #12]
 803d492:	609a      	str	r2, [r3, #8]
 803d494:	1f32      	subs	r2, r6, #4
 803d496:	2a24      	cmp	r2, #36	@ 0x24
 803d498:	d824      	bhi.n	803d4e4 <_realloc_r+0x228>
 803d49a:	2a13      	cmp	r2, #19
 803d49c:	d908      	bls.n	803d4b0 <_realloc_r+0x1f4>
 803d49e:	6823      	ldr	r3, [r4, #0]
 803d4a0:	60ab      	str	r3, [r5, #8]
 803d4a2:	6863      	ldr	r3, [r4, #4]
 803d4a4:	60eb      	str	r3, [r5, #12]
 803d4a6:	2a1b      	cmp	r2, #27
 803d4a8:	d80a      	bhi.n	803d4c0 <_realloc_r+0x204>
 803d4aa:	3408      	adds	r4, #8
 803d4ac:	f105 0010 	add.w	r0, r5, #16
 803d4b0:	6823      	ldr	r3, [r4, #0]
 803d4b2:	6003      	str	r3, [r0, #0]
 803d4b4:	6863      	ldr	r3, [r4, #4]
 803d4b6:	6043      	str	r3, [r0, #4]
 803d4b8:	68a3      	ldr	r3, [r4, #8]
 803d4ba:	6083      	str	r3, [r0, #8]
 803d4bc:	46a9      	mov	r9, r5
 803d4be:	e75c      	b.n	803d37a <_realloc_r+0xbe>
 803d4c0:	68a3      	ldr	r3, [r4, #8]
 803d4c2:	612b      	str	r3, [r5, #16]
 803d4c4:	68e3      	ldr	r3, [r4, #12]
 803d4c6:	616b      	str	r3, [r5, #20]
 803d4c8:	2a24      	cmp	r2, #36	@ 0x24
 803d4ca:	bf01      	itttt	eq
 803d4cc:	6923      	ldreq	r3, [r4, #16]
 803d4ce:	61ab      	streq	r3, [r5, #24]
 803d4d0:	6963      	ldreq	r3, [r4, #20]
 803d4d2:	61eb      	streq	r3, [r5, #28]
 803d4d4:	bf19      	ittee	ne
 803d4d6:	3410      	addne	r4, #16
 803d4d8:	f105 0018 	addne.w	r0, r5, #24
 803d4dc:	f105 0020 	addeq.w	r0, r5, #32
 803d4e0:	3418      	addeq	r4, #24
 803d4e2:	e7e5      	b.n	803d4b0 <_realloc_r+0x1f4>
 803d4e4:	4621      	mov	r1, r4
 803d4e6:	f7f8 fc69 	bl	8035dbc <memmove>
 803d4ea:	e7e7      	b.n	803d4bc <_realloc_r+0x200>
 803d4ec:	9b01      	ldr	r3, [sp, #4]
 803d4ee:	4598      	cmp	r8, r3
 803d4f0:	dc31      	bgt.n	803d556 <_realloc_r+0x29a>
 803d4f2:	4628      	mov	r0, r5
 803d4f4:	68eb      	ldr	r3, [r5, #12]
 803d4f6:	f850 2f08 	ldr.w	r2, [r0, #8]!
 803d4fa:	60d3      	str	r3, [r2, #12]
 803d4fc:	609a      	str	r2, [r3, #8]
 803d4fe:	1f32      	subs	r2, r6, #4
 803d500:	2a24      	cmp	r2, #36	@ 0x24
 803d502:	d824      	bhi.n	803d54e <_realloc_r+0x292>
 803d504:	2a13      	cmp	r2, #19
 803d506:	d908      	bls.n	803d51a <_realloc_r+0x25e>
 803d508:	6823      	ldr	r3, [r4, #0]
 803d50a:	60ab      	str	r3, [r5, #8]
 803d50c:	6863      	ldr	r3, [r4, #4]
 803d50e:	60eb      	str	r3, [r5, #12]
 803d510:	2a1b      	cmp	r2, #27
 803d512:	d80a      	bhi.n	803d52a <_realloc_r+0x26e>
 803d514:	3408      	adds	r4, #8
 803d516:	f105 0010 	add.w	r0, r5, #16
 803d51a:	6823      	ldr	r3, [r4, #0]
 803d51c:	6003      	str	r3, [r0, #0]
 803d51e:	6863      	ldr	r3, [r4, #4]
 803d520:	6043      	str	r3, [r0, #4]
 803d522:	68a3      	ldr	r3, [r4, #8]
 803d524:	6083      	str	r3, [r0, #8]
 803d526:	9f01      	ldr	r7, [sp, #4]
 803d528:	e7c8      	b.n	803d4bc <_realloc_r+0x200>
 803d52a:	68a3      	ldr	r3, [r4, #8]
 803d52c:	612b      	str	r3, [r5, #16]
 803d52e:	68e3      	ldr	r3, [r4, #12]
 803d530:	616b      	str	r3, [r5, #20]
 803d532:	2a24      	cmp	r2, #36	@ 0x24
 803d534:	bf01      	itttt	eq
 803d536:	6923      	ldreq	r3, [r4, #16]
 803d538:	61ab      	streq	r3, [r5, #24]
 803d53a:	6963      	ldreq	r3, [r4, #20]
 803d53c:	61eb      	streq	r3, [r5, #28]
 803d53e:	bf19      	ittee	ne
 803d540:	3410      	addne	r4, #16
 803d542:	f105 0018 	addne.w	r0, r5, #24
 803d546:	f105 0020 	addeq.w	r0, r5, #32
 803d54a:	3418      	addeq	r4, #24
 803d54c:	e7e5      	b.n	803d51a <_realloc_r+0x25e>
 803d54e:	4621      	mov	r1, r4
 803d550:	f7f8 fc34 	bl	8035dbc <memmove>
 803d554:	e7e7      	b.n	803d526 <_realloc_r+0x26a>
 803d556:	4659      	mov	r1, fp
 803d558:	4650      	mov	r0, sl
 803d55a:	f7fa fe9f 	bl	803829c <_malloc_r>
 803d55e:	4683      	mov	fp, r0
 803d560:	b918      	cbnz	r0, 803d56a <_realloc_r+0x2ae>
 803d562:	4650      	mov	r0, sl
 803d564:	f7ff f9aa 	bl	803c8bc <__malloc_unlock>
 803d568:	e6c7      	b.n	803d2fa <_realloc_r+0x3e>
 803d56a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 803d56e:	f023 0301 	bic.w	r3, r3, #1
 803d572:	444b      	add	r3, r9
 803d574:	f1a0 0208 	sub.w	r2, r0, #8
 803d578:	4293      	cmp	r3, r2
 803d57a:	d107      	bne.n	803d58c <_realloc_r+0x2d0>
 803d57c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 803d580:	f027 0703 	bic.w	r7, r7, #3
 803d584:	4437      	add	r7, r6
 803d586:	e6f8      	b.n	803d37a <_realloc_r+0xbe>
 803d588:	20000564 	.word	0x20000564
 803d58c:	1f32      	subs	r2, r6, #4
 803d58e:	2a24      	cmp	r2, #36	@ 0x24
 803d590:	d82d      	bhi.n	803d5ee <_realloc_r+0x332>
 803d592:	2a13      	cmp	r2, #19
 803d594:	d928      	bls.n	803d5e8 <_realloc_r+0x32c>
 803d596:	6823      	ldr	r3, [r4, #0]
 803d598:	6003      	str	r3, [r0, #0]
 803d59a:	6863      	ldr	r3, [r4, #4]
 803d59c:	6043      	str	r3, [r0, #4]
 803d59e:	2a1b      	cmp	r2, #27
 803d5a0:	d80e      	bhi.n	803d5c0 <_realloc_r+0x304>
 803d5a2:	f104 0208 	add.w	r2, r4, #8
 803d5a6:	f100 0308 	add.w	r3, r0, #8
 803d5aa:	6811      	ldr	r1, [r2, #0]
 803d5ac:	6019      	str	r1, [r3, #0]
 803d5ae:	6851      	ldr	r1, [r2, #4]
 803d5b0:	6059      	str	r1, [r3, #4]
 803d5b2:	6892      	ldr	r2, [r2, #8]
 803d5b4:	609a      	str	r2, [r3, #8]
 803d5b6:	4621      	mov	r1, r4
 803d5b8:	4650      	mov	r0, sl
 803d5ba:	f7fa fd57 	bl	803806c <_free_r>
 803d5be:	e73f      	b.n	803d440 <_realloc_r+0x184>
 803d5c0:	68a3      	ldr	r3, [r4, #8]
 803d5c2:	6083      	str	r3, [r0, #8]
 803d5c4:	68e3      	ldr	r3, [r4, #12]
 803d5c6:	60c3      	str	r3, [r0, #12]
 803d5c8:	2a24      	cmp	r2, #36	@ 0x24
 803d5ca:	bf01      	itttt	eq
 803d5cc:	6923      	ldreq	r3, [r4, #16]
 803d5ce:	6103      	streq	r3, [r0, #16]
 803d5d0:	6961      	ldreq	r1, [r4, #20]
 803d5d2:	6141      	streq	r1, [r0, #20]
 803d5d4:	bf19      	ittee	ne
 803d5d6:	f104 0210 	addne.w	r2, r4, #16
 803d5da:	f100 0310 	addne.w	r3, r0, #16
 803d5de:	f104 0218 	addeq.w	r2, r4, #24
 803d5e2:	f100 0318 	addeq.w	r3, r0, #24
 803d5e6:	e7e0      	b.n	803d5aa <_realloc_r+0x2ee>
 803d5e8:	4603      	mov	r3, r0
 803d5ea:	4622      	mov	r2, r4
 803d5ec:	e7dd      	b.n	803d5aa <_realloc_r+0x2ee>
 803d5ee:	4621      	mov	r1, r4
 803d5f0:	f7f8 fbe4 	bl	8035dbc <memmove>
 803d5f4:	e7df      	b.n	803d5b6 <_realloc_r+0x2fa>
 803d5f6:	4637      	mov	r7, r6
 803d5f8:	e6bf      	b.n	803d37a <_realloc_r+0xbe>
 803d5fa:	431f      	orrs	r7, r3
 803d5fc:	f8c9 7004 	str.w	r7, [r9, #4]
 803d600:	6853      	ldr	r3, [r2, #4]
 803d602:	f043 0301 	orr.w	r3, r3, #1
 803d606:	6053      	str	r3, [r2, #4]
 803d608:	e6d3      	b.n	803d3b2 <_realloc_r+0xf6>
 803d60a:	bf00      	nop

0803d60c <sulp>:
 803d60c:	b570      	push	{r4, r5, r6, lr}
 803d60e:	4604      	mov	r4, r0
 803d610:	460d      	mov	r5, r1
 803d612:	ec45 4b10 	vmov	d0, r4, r5
 803d616:	4616      	mov	r6, r2
 803d618:	f7ff fc7c 	bl	803cf14 <__ulp>
 803d61c:	ec51 0b10 	vmov	r0, r1, d0
 803d620:	b17e      	cbz	r6, 803d642 <sulp+0x36>
 803d622:	f3c5 530a 	ubfx	r3, r5, #20, #11
 803d626:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 803d62a:	2b00      	cmp	r3, #0
 803d62c:	dd09      	ble.n	803d642 <sulp+0x36>
 803d62e:	051b      	lsls	r3, r3, #20
 803d630:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 803d634:	2400      	movs	r4, #0
 803d636:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 803d63a:	4622      	mov	r2, r4
 803d63c:	462b      	mov	r3, r5
 803d63e:	f7d2 fff3 	bl	8010628 <__aeabi_dmul>
 803d642:	ec41 0b10 	vmov	d0, r0, r1
 803d646:	bd70      	pop	{r4, r5, r6, pc}

0803d648 <_strtod_l>:
 803d648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803d64c:	b09f      	sub	sp, #124	@ 0x7c
 803d64e:	460c      	mov	r4, r1
 803d650:	9217      	str	r2, [sp, #92]	@ 0x5c
 803d652:	2200      	movs	r2, #0
 803d654:	921a      	str	r2, [sp, #104]	@ 0x68
 803d656:	9005      	str	r0, [sp, #20]
 803d658:	f04f 0a00 	mov.w	sl, #0
 803d65c:	f04f 0b00 	mov.w	fp, #0
 803d660:	460a      	mov	r2, r1
 803d662:	9219      	str	r2, [sp, #100]	@ 0x64
 803d664:	7811      	ldrb	r1, [r2, #0]
 803d666:	292b      	cmp	r1, #43	@ 0x2b
 803d668:	d04a      	beq.n	803d700 <_strtod_l+0xb8>
 803d66a:	d838      	bhi.n	803d6de <_strtod_l+0x96>
 803d66c:	290d      	cmp	r1, #13
 803d66e:	d832      	bhi.n	803d6d6 <_strtod_l+0x8e>
 803d670:	2908      	cmp	r1, #8
 803d672:	d832      	bhi.n	803d6da <_strtod_l+0x92>
 803d674:	2900      	cmp	r1, #0
 803d676:	d03b      	beq.n	803d6f0 <_strtod_l+0xa8>
 803d678:	2200      	movs	r2, #0
 803d67a:	920b      	str	r2, [sp, #44]	@ 0x2c
 803d67c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 803d67e:	782a      	ldrb	r2, [r5, #0]
 803d680:	2a30      	cmp	r2, #48	@ 0x30
 803d682:	f040 80b3 	bne.w	803d7ec <_strtod_l+0x1a4>
 803d686:	786a      	ldrb	r2, [r5, #1]
 803d688:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 803d68c:	2a58      	cmp	r2, #88	@ 0x58
 803d68e:	d16e      	bne.n	803d76e <_strtod_l+0x126>
 803d690:	9302      	str	r3, [sp, #8]
 803d692:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 803d694:	9301      	str	r3, [sp, #4]
 803d696:	ab1a      	add	r3, sp, #104	@ 0x68
 803d698:	9300      	str	r3, [sp, #0]
 803d69a:	4a8e      	ldr	r2, [pc, #568]	@ (803d8d4 <_strtod_l+0x28c>)
 803d69c:	9805      	ldr	r0, [sp, #20]
 803d69e:	ab1b      	add	r3, sp, #108	@ 0x6c
 803d6a0:	a919      	add	r1, sp, #100	@ 0x64
 803d6a2:	f001 fa51 	bl	803eb48 <__gethex>
 803d6a6:	f010 060f 	ands.w	r6, r0, #15
 803d6aa:	4604      	mov	r4, r0
 803d6ac:	d005      	beq.n	803d6ba <_strtod_l+0x72>
 803d6ae:	2e06      	cmp	r6, #6
 803d6b0:	d128      	bne.n	803d704 <_strtod_l+0xbc>
 803d6b2:	3501      	adds	r5, #1
 803d6b4:	2300      	movs	r3, #0
 803d6b6:	9519      	str	r5, [sp, #100]	@ 0x64
 803d6b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 803d6ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 803d6bc:	2b00      	cmp	r3, #0
 803d6be:	f040 858e 	bne.w	803e1de <_strtod_l+0xb96>
 803d6c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 803d6c4:	b1cb      	cbz	r3, 803d6fa <_strtod_l+0xb2>
 803d6c6:	4652      	mov	r2, sl
 803d6c8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 803d6cc:	ec43 2b10 	vmov	d0, r2, r3
 803d6d0:	b01f      	add	sp, #124	@ 0x7c
 803d6d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803d6d6:	2920      	cmp	r1, #32
 803d6d8:	d1ce      	bne.n	803d678 <_strtod_l+0x30>
 803d6da:	3201      	adds	r2, #1
 803d6dc:	e7c1      	b.n	803d662 <_strtod_l+0x1a>
 803d6de:	292d      	cmp	r1, #45	@ 0x2d
 803d6e0:	d1ca      	bne.n	803d678 <_strtod_l+0x30>
 803d6e2:	2101      	movs	r1, #1
 803d6e4:	910b      	str	r1, [sp, #44]	@ 0x2c
 803d6e6:	1c51      	adds	r1, r2, #1
 803d6e8:	9119      	str	r1, [sp, #100]	@ 0x64
 803d6ea:	7852      	ldrb	r2, [r2, #1]
 803d6ec:	2a00      	cmp	r2, #0
 803d6ee:	d1c5      	bne.n	803d67c <_strtod_l+0x34>
 803d6f0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 803d6f2:	9419      	str	r4, [sp, #100]	@ 0x64
 803d6f4:	2b00      	cmp	r3, #0
 803d6f6:	f040 8570 	bne.w	803e1da <_strtod_l+0xb92>
 803d6fa:	4652      	mov	r2, sl
 803d6fc:	465b      	mov	r3, fp
 803d6fe:	e7e5      	b.n	803d6cc <_strtod_l+0x84>
 803d700:	2100      	movs	r1, #0
 803d702:	e7ef      	b.n	803d6e4 <_strtod_l+0x9c>
 803d704:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 803d706:	b13a      	cbz	r2, 803d718 <_strtod_l+0xd0>
 803d708:	2135      	movs	r1, #53	@ 0x35
 803d70a:	a81c      	add	r0, sp, #112	@ 0x70
 803d70c:	f7ff fcfc 	bl	803d108 <__copybits>
 803d710:	991a      	ldr	r1, [sp, #104]	@ 0x68
 803d712:	9805      	ldr	r0, [sp, #20]
 803d714:	f7ff f8fd 	bl	803c912 <_Bfree>
 803d718:	3e01      	subs	r6, #1
 803d71a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 803d71c:	2e04      	cmp	r6, #4
 803d71e:	d806      	bhi.n	803d72e <_strtod_l+0xe6>
 803d720:	e8df f006 	tbb	[pc, r6]
 803d724:	201d0314 	.word	0x201d0314
 803d728:	14          	.byte	0x14
 803d729:	00          	.byte	0x00
 803d72a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 803d72e:	05e1      	lsls	r1, r4, #23
 803d730:	bf48      	it	mi
 803d732:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 803d736:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 803d73a:	0d1b      	lsrs	r3, r3, #20
 803d73c:	051b      	lsls	r3, r3, #20
 803d73e:	2b00      	cmp	r3, #0
 803d740:	d1bb      	bne.n	803d6ba <_strtod_l+0x72>
 803d742:	f7f9 fd59 	bl	80371f8 <__errno>
 803d746:	2322      	movs	r3, #34	@ 0x22
 803d748:	6003      	str	r3, [r0, #0]
 803d74a:	e7b6      	b.n	803d6ba <_strtod_l+0x72>
 803d74c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 803d750:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 803d754:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 803d758:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 803d75c:	e7e7      	b.n	803d72e <_strtod_l+0xe6>
 803d75e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 803d8dc <_strtod_l+0x294>
 803d762:	e7e4      	b.n	803d72e <_strtod_l+0xe6>
 803d764:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 803d768:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 803d76c:	e7df      	b.n	803d72e <_strtod_l+0xe6>
 803d76e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 803d770:	1c5a      	adds	r2, r3, #1
 803d772:	9219      	str	r2, [sp, #100]	@ 0x64
 803d774:	785b      	ldrb	r3, [r3, #1]
 803d776:	2b30      	cmp	r3, #48	@ 0x30
 803d778:	d0f9      	beq.n	803d76e <_strtod_l+0x126>
 803d77a:	2b00      	cmp	r3, #0
 803d77c:	d09d      	beq.n	803d6ba <_strtod_l+0x72>
 803d77e:	2301      	movs	r3, #1
 803d780:	9309      	str	r3, [sp, #36]	@ 0x24
 803d782:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 803d784:	930c      	str	r3, [sp, #48]	@ 0x30
 803d786:	2300      	movs	r3, #0
 803d788:	9308      	str	r3, [sp, #32]
 803d78a:	930a      	str	r3, [sp, #40]	@ 0x28
 803d78c:	461f      	mov	r7, r3
 803d78e:	220a      	movs	r2, #10
 803d790:	9819      	ldr	r0, [sp, #100]	@ 0x64
 803d792:	7805      	ldrb	r5, [r0, #0]
 803d794:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 803d798:	b2d9      	uxtb	r1, r3
 803d79a:	2909      	cmp	r1, #9
 803d79c:	d928      	bls.n	803d7f0 <_strtod_l+0x1a8>
 803d79e:	494e      	ldr	r1, [pc, #312]	@ (803d8d8 <_strtod_l+0x290>)
 803d7a0:	2201      	movs	r2, #1
 803d7a2:	f7f8 fb5a 	bl	8035e5a <strncmp>
 803d7a6:	2800      	cmp	r0, #0
 803d7a8:	d032      	beq.n	803d810 <_strtod_l+0x1c8>
 803d7aa:	2000      	movs	r0, #0
 803d7ac:	462a      	mov	r2, r5
 803d7ae:	4681      	mov	r9, r0
 803d7b0:	463d      	mov	r5, r7
 803d7b2:	4603      	mov	r3, r0
 803d7b4:	2a65      	cmp	r2, #101	@ 0x65
 803d7b6:	d001      	beq.n	803d7bc <_strtod_l+0x174>
 803d7b8:	2a45      	cmp	r2, #69	@ 0x45
 803d7ba:	d114      	bne.n	803d7e6 <_strtod_l+0x19e>
 803d7bc:	b91d      	cbnz	r5, 803d7c6 <_strtod_l+0x17e>
 803d7be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 803d7c0:	4302      	orrs	r2, r0
 803d7c2:	d095      	beq.n	803d6f0 <_strtod_l+0xa8>
 803d7c4:	2500      	movs	r5, #0
 803d7c6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 803d7c8:	1c62      	adds	r2, r4, #1
 803d7ca:	9219      	str	r2, [sp, #100]	@ 0x64
 803d7cc:	7862      	ldrb	r2, [r4, #1]
 803d7ce:	2a2b      	cmp	r2, #43	@ 0x2b
 803d7d0:	d077      	beq.n	803d8c2 <_strtod_l+0x27a>
 803d7d2:	2a2d      	cmp	r2, #45	@ 0x2d
 803d7d4:	d07b      	beq.n	803d8ce <_strtod_l+0x286>
 803d7d6:	f04f 0c00 	mov.w	ip, #0
 803d7da:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 803d7de:	2909      	cmp	r1, #9
 803d7e0:	f240 8082 	bls.w	803d8e8 <_strtod_l+0x2a0>
 803d7e4:	9419      	str	r4, [sp, #100]	@ 0x64
 803d7e6:	f04f 0800 	mov.w	r8, #0
 803d7ea:	e0a2      	b.n	803d932 <_strtod_l+0x2ea>
 803d7ec:	2300      	movs	r3, #0
 803d7ee:	e7c7      	b.n	803d780 <_strtod_l+0x138>
 803d7f0:	2f08      	cmp	r7, #8
 803d7f2:	bfd5      	itete	le
 803d7f4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 803d7f6:	9908      	ldrgt	r1, [sp, #32]
 803d7f8:	fb02 3301 	mlale	r3, r2, r1, r3
 803d7fc:	fb02 3301 	mlagt	r3, r2, r1, r3
 803d800:	f100 0001 	add.w	r0, r0, #1
 803d804:	bfd4      	ite	le
 803d806:	930a      	strle	r3, [sp, #40]	@ 0x28
 803d808:	9308      	strgt	r3, [sp, #32]
 803d80a:	3701      	adds	r7, #1
 803d80c:	9019      	str	r0, [sp, #100]	@ 0x64
 803d80e:	e7bf      	b.n	803d790 <_strtod_l+0x148>
 803d810:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 803d812:	1c5a      	adds	r2, r3, #1
 803d814:	9219      	str	r2, [sp, #100]	@ 0x64
 803d816:	785a      	ldrb	r2, [r3, #1]
 803d818:	b37f      	cbz	r7, 803d87a <_strtod_l+0x232>
 803d81a:	4681      	mov	r9, r0
 803d81c:	463d      	mov	r5, r7
 803d81e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 803d822:	2b09      	cmp	r3, #9
 803d824:	d912      	bls.n	803d84c <_strtod_l+0x204>
 803d826:	2301      	movs	r3, #1
 803d828:	e7c4      	b.n	803d7b4 <_strtod_l+0x16c>
 803d82a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 803d82c:	1c5a      	adds	r2, r3, #1
 803d82e:	9219      	str	r2, [sp, #100]	@ 0x64
 803d830:	785a      	ldrb	r2, [r3, #1]
 803d832:	3001      	adds	r0, #1
 803d834:	2a30      	cmp	r2, #48	@ 0x30
 803d836:	d0f8      	beq.n	803d82a <_strtod_l+0x1e2>
 803d838:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 803d83c:	2b08      	cmp	r3, #8
 803d83e:	f200 84d3 	bhi.w	803e1e8 <_strtod_l+0xba0>
 803d842:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 803d844:	930c      	str	r3, [sp, #48]	@ 0x30
 803d846:	4681      	mov	r9, r0
 803d848:	2000      	movs	r0, #0
 803d84a:	4605      	mov	r5, r0
 803d84c:	3a30      	subs	r2, #48	@ 0x30
 803d84e:	f100 0301 	add.w	r3, r0, #1
 803d852:	d02a      	beq.n	803d8aa <_strtod_l+0x262>
 803d854:	4499      	add	r9, r3
 803d856:	eb00 0c05 	add.w	ip, r0, r5
 803d85a:	462b      	mov	r3, r5
 803d85c:	210a      	movs	r1, #10
 803d85e:	4563      	cmp	r3, ip
 803d860:	d10d      	bne.n	803d87e <_strtod_l+0x236>
 803d862:	1c69      	adds	r1, r5, #1
 803d864:	4401      	add	r1, r0
 803d866:	4428      	add	r0, r5
 803d868:	2808      	cmp	r0, #8
 803d86a:	dc16      	bgt.n	803d89a <_strtod_l+0x252>
 803d86c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 803d86e:	230a      	movs	r3, #10
 803d870:	fb03 2300 	mla	r3, r3, r0, r2
 803d874:	930a      	str	r3, [sp, #40]	@ 0x28
 803d876:	2300      	movs	r3, #0
 803d878:	e018      	b.n	803d8ac <_strtod_l+0x264>
 803d87a:	4638      	mov	r0, r7
 803d87c:	e7da      	b.n	803d834 <_strtod_l+0x1ec>
 803d87e:	2b08      	cmp	r3, #8
 803d880:	f103 0301 	add.w	r3, r3, #1
 803d884:	dc03      	bgt.n	803d88e <_strtod_l+0x246>
 803d886:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 803d888:	434e      	muls	r6, r1
 803d88a:	960a      	str	r6, [sp, #40]	@ 0x28
 803d88c:	e7e7      	b.n	803d85e <_strtod_l+0x216>
 803d88e:	2b10      	cmp	r3, #16
 803d890:	bfde      	ittt	le
 803d892:	9e08      	ldrle	r6, [sp, #32]
 803d894:	434e      	mulle	r6, r1
 803d896:	9608      	strle	r6, [sp, #32]
 803d898:	e7e1      	b.n	803d85e <_strtod_l+0x216>
 803d89a:	280f      	cmp	r0, #15
 803d89c:	dceb      	bgt.n	803d876 <_strtod_l+0x22e>
 803d89e:	9808      	ldr	r0, [sp, #32]
 803d8a0:	230a      	movs	r3, #10
 803d8a2:	fb03 2300 	mla	r3, r3, r0, r2
 803d8a6:	9308      	str	r3, [sp, #32]
 803d8a8:	e7e5      	b.n	803d876 <_strtod_l+0x22e>
 803d8aa:	4629      	mov	r1, r5
 803d8ac:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 803d8ae:	1c50      	adds	r0, r2, #1
 803d8b0:	9019      	str	r0, [sp, #100]	@ 0x64
 803d8b2:	7852      	ldrb	r2, [r2, #1]
 803d8b4:	4618      	mov	r0, r3
 803d8b6:	460d      	mov	r5, r1
 803d8b8:	e7b1      	b.n	803d81e <_strtod_l+0x1d6>
 803d8ba:	f04f 0900 	mov.w	r9, #0
 803d8be:	2301      	movs	r3, #1
 803d8c0:	e77d      	b.n	803d7be <_strtod_l+0x176>
 803d8c2:	f04f 0c00 	mov.w	ip, #0
 803d8c6:	1ca2      	adds	r2, r4, #2
 803d8c8:	9219      	str	r2, [sp, #100]	@ 0x64
 803d8ca:	78a2      	ldrb	r2, [r4, #2]
 803d8cc:	e785      	b.n	803d7da <_strtod_l+0x192>
 803d8ce:	f04f 0c01 	mov.w	ip, #1
 803d8d2:	e7f8      	b.n	803d8c6 <_strtod_l+0x27e>
 803d8d4:	08044ec4 	.word	0x08044ec4
 803d8d8:	0804492e 	.word	0x0804492e
 803d8dc:	7ff00000 	.word	0x7ff00000
 803d8e0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 803d8e2:	1c51      	adds	r1, r2, #1
 803d8e4:	9119      	str	r1, [sp, #100]	@ 0x64
 803d8e6:	7852      	ldrb	r2, [r2, #1]
 803d8e8:	2a30      	cmp	r2, #48	@ 0x30
 803d8ea:	d0f9      	beq.n	803d8e0 <_strtod_l+0x298>
 803d8ec:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 803d8f0:	2908      	cmp	r1, #8
 803d8f2:	f63f af78 	bhi.w	803d7e6 <_strtod_l+0x19e>
 803d8f6:	3a30      	subs	r2, #48	@ 0x30
 803d8f8:	920e      	str	r2, [sp, #56]	@ 0x38
 803d8fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 803d8fc:	920f      	str	r2, [sp, #60]	@ 0x3c
 803d8fe:	f04f 080a 	mov.w	r8, #10
 803d902:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 803d904:	1c56      	adds	r6, r2, #1
 803d906:	9619      	str	r6, [sp, #100]	@ 0x64
 803d908:	7852      	ldrb	r2, [r2, #1]
 803d90a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 803d90e:	f1be 0f09 	cmp.w	lr, #9
 803d912:	d939      	bls.n	803d988 <_strtod_l+0x340>
 803d914:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 803d916:	1a76      	subs	r6, r6, r1
 803d918:	2e08      	cmp	r6, #8
 803d91a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 803d91e:	dc03      	bgt.n	803d928 <_strtod_l+0x2e0>
 803d920:	990e      	ldr	r1, [sp, #56]	@ 0x38
 803d922:	4588      	cmp	r8, r1
 803d924:	bfa8      	it	ge
 803d926:	4688      	movge	r8, r1
 803d928:	f1bc 0f00 	cmp.w	ip, #0
 803d92c:	d001      	beq.n	803d932 <_strtod_l+0x2ea>
 803d92e:	f1c8 0800 	rsb	r8, r8, #0
 803d932:	2d00      	cmp	r5, #0
 803d934:	d14e      	bne.n	803d9d4 <_strtod_l+0x38c>
 803d936:	9909      	ldr	r1, [sp, #36]	@ 0x24
 803d938:	4308      	orrs	r0, r1
 803d93a:	f47f aebe 	bne.w	803d6ba <_strtod_l+0x72>
 803d93e:	2b00      	cmp	r3, #0
 803d940:	f47f aed6 	bne.w	803d6f0 <_strtod_l+0xa8>
 803d944:	2a69      	cmp	r2, #105	@ 0x69
 803d946:	d028      	beq.n	803d99a <_strtod_l+0x352>
 803d948:	dc25      	bgt.n	803d996 <_strtod_l+0x34e>
 803d94a:	2a49      	cmp	r2, #73	@ 0x49
 803d94c:	d025      	beq.n	803d99a <_strtod_l+0x352>
 803d94e:	2a4e      	cmp	r2, #78	@ 0x4e
 803d950:	f47f aece 	bne.w	803d6f0 <_strtod_l+0xa8>
 803d954:	499b      	ldr	r1, [pc, #620]	@ (803dbc4 <_strtod_l+0x57c>)
 803d956:	a819      	add	r0, sp, #100	@ 0x64
 803d958:	f001 fb18 	bl	803ef8c <__match>
 803d95c:	2800      	cmp	r0, #0
 803d95e:	f43f aec7 	beq.w	803d6f0 <_strtod_l+0xa8>
 803d962:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 803d964:	781b      	ldrb	r3, [r3, #0]
 803d966:	2b28      	cmp	r3, #40	@ 0x28
 803d968:	d12e      	bne.n	803d9c8 <_strtod_l+0x380>
 803d96a:	4997      	ldr	r1, [pc, #604]	@ (803dbc8 <_strtod_l+0x580>)
 803d96c:	aa1c      	add	r2, sp, #112	@ 0x70
 803d96e:	a819      	add	r0, sp, #100	@ 0x64
 803d970:	f001 fb20 	bl	803efb4 <__hexnan>
 803d974:	2805      	cmp	r0, #5
 803d976:	d127      	bne.n	803d9c8 <_strtod_l+0x380>
 803d978:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 803d97a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 803d97e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 803d982:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 803d986:	e698      	b.n	803d6ba <_strtod_l+0x72>
 803d988:	990e      	ldr	r1, [sp, #56]	@ 0x38
 803d98a:	fb08 2101 	mla	r1, r8, r1, r2
 803d98e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 803d992:	920e      	str	r2, [sp, #56]	@ 0x38
 803d994:	e7b5      	b.n	803d902 <_strtod_l+0x2ba>
 803d996:	2a6e      	cmp	r2, #110	@ 0x6e
 803d998:	e7da      	b.n	803d950 <_strtod_l+0x308>
 803d99a:	498c      	ldr	r1, [pc, #560]	@ (803dbcc <_strtod_l+0x584>)
 803d99c:	a819      	add	r0, sp, #100	@ 0x64
 803d99e:	f001 faf5 	bl	803ef8c <__match>
 803d9a2:	2800      	cmp	r0, #0
 803d9a4:	f43f aea4 	beq.w	803d6f0 <_strtod_l+0xa8>
 803d9a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 803d9aa:	4989      	ldr	r1, [pc, #548]	@ (803dbd0 <_strtod_l+0x588>)
 803d9ac:	3b01      	subs	r3, #1
 803d9ae:	a819      	add	r0, sp, #100	@ 0x64
 803d9b0:	9319      	str	r3, [sp, #100]	@ 0x64
 803d9b2:	f001 faeb 	bl	803ef8c <__match>
 803d9b6:	b910      	cbnz	r0, 803d9be <_strtod_l+0x376>
 803d9b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 803d9ba:	3301      	adds	r3, #1
 803d9bc:	9319      	str	r3, [sp, #100]	@ 0x64
 803d9be:	f8df b220 	ldr.w	fp, [pc, #544]	@ 803dbe0 <_strtod_l+0x598>
 803d9c2:	f04f 0a00 	mov.w	sl, #0
 803d9c6:	e678      	b.n	803d6ba <_strtod_l+0x72>
 803d9c8:	4882      	ldr	r0, [pc, #520]	@ (803dbd4 <_strtod_l+0x58c>)
 803d9ca:	f001 f805 	bl	803e9d8 <nan>
 803d9ce:	ec5b ab10 	vmov	sl, fp, d0
 803d9d2:	e672      	b.n	803d6ba <_strtod_l+0x72>
 803d9d4:	eba8 0309 	sub.w	r3, r8, r9
 803d9d8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 803d9da:	9309      	str	r3, [sp, #36]	@ 0x24
 803d9dc:	2f00      	cmp	r7, #0
 803d9de:	bf08      	it	eq
 803d9e0:	462f      	moveq	r7, r5
 803d9e2:	2d10      	cmp	r5, #16
 803d9e4:	462c      	mov	r4, r5
 803d9e6:	bfa8      	it	ge
 803d9e8:	2410      	movge	r4, #16
 803d9ea:	f7d2 fda3 	bl	8010534 <__aeabi_ui2d>
 803d9ee:	2d09      	cmp	r5, #9
 803d9f0:	4682      	mov	sl, r0
 803d9f2:	468b      	mov	fp, r1
 803d9f4:	dc13      	bgt.n	803da1e <_strtod_l+0x3d6>
 803d9f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803d9f8:	2b00      	cmp	r3, #0
 803d9fa:	f43f ae5e 	beq.w	803d6ba <_strtod_l+0x72>
 803d9fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803da00:	dd78      	ble.n	803daf4 <_strtod_l+0x4ac>
 803da02:	2b16      	cmp	r3, #22
 803da04:	dc5f      	bgt.n	803dac6 <_strtod_l+0x47e>
 803da06:	4974      	ldr	r1, [pc, #464]	@ (803dbd8 <_strtod_l+0x590>)
 803da08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 803da0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 803da10:	4652      	mov	r2, sl
 803da12:	465b      	mov	r3, fp
 803da14:	f7d2 fe08 	bl	8010628 <__aeabi_dmul>
 803da18:	4682      	mov	sl, r0
 803da1a:	468b      	mov	fp, r1
 803da1c:	e64d      	b.n	803d6ba <_strtod_l+0x72>
 803da1e:	4b6e      	ldr	r3, [pc, #440]	@ (803dbd8 <_strtod_l+0x590>)
 803da20:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 803da24:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 803da28:	f7d2 fdfe 	bl	8010628 <__aeabi_dmul>
 803da2c:	4682      	mov	sl, r0
 803da2e:	9808      	ldr	r0, [sp, #32]
 803da30:	468b      	mov	fp, r1
 803da32:	f7d2 fd7f 	bl	8010534 <__aeabi_ui2d>
 803da36:	4602      	mov	r2, r0
 803da38:	460b      	mov	r3, r1
 803da3a:	4650      	mov	r0, sl
 803da3c:	4659      	mov	r1, fp
 803da3e:	f7d2 fc3d 	bl	80102bc <__adddf3>
 803da42:	2d0f      	cmp	r5, #15
 803da44:	4682      	mov	sl, r0
 803da46:	468b      	mov	fp, r1
 803da48:	ddd5      	ble.n	803d9f6 <_strtod_l+0x3ae>
 803da4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803da4c:	1b2c      	subs	r4, r5, r4
 803da4e:	441c      	add	r4, r3
 803da50:	2c00      	cmp	r4, #0
 803da52:	f340 8096 	ble.w	803db82 <_strtod_l+0x53a>
 803da56:	f014 030f 	ands.w	r3, r4, #15
 803da5a:	d00a      	beq.n	803da72 <_strtod_l+0x42a>
 803da5c:	495e      	ldr	r1, [pc, #376]	@ (803dbd8 <_strtod_l+0x590>)
 803da5e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 803da62:	4652      	mov	r2, sl
 803da64:	465b      	mov	r3, fp
 803da66:	e9d1 0100 	ldrd	r0, r1, [r1]
 803da6a:	f7d2 fddd 	bl	8010628 <__aeabi_dmul>
 803da6e:	4682      	mov	sl, r0
 803da70:	468b      	mov	fp, r1
 803da72:	f034 040f 	bics.w	r4, r4, #15
 803da76:	d073      	beq.n	803db60 <_strtod_l+0x518>
 803da78:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 803da7c:	dd48      	ble.n	803db10 <_strtod_l+0x4c8>
 803da7e:	2400      	movs	r4, #0
 803da80:	46a0      	mov	r8, r4
 803da82:	940a      	str	r4, [sp, #40]	@ 0x28
 803da84:	46a1      	mov	r9, r4
 803da86:	9a05      	ldr	r2, [sp, #20]
 803da88:	f8df b154 	ldr.w	fp, [pc, #340]	@ 803dbe0 <_strtod_l+0x598>
 803da8c:	2322      	movs	r3, #34	@ 0x22
 803da8e:	6013      	str	r3, [r2, #0]
 803da90:	f04f 0a00 	mov.w	sl, #0
 803da94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 803da96:	2b00      	cmp	r3, #0
 803da98:	f43f ae0f 	beq.w	803d6ba <_strtod_l+0x72>
 803da9c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 803da9e:	9805      	ldr	r0, [sp, #20]
 803daa0:	f7fe ff37 	bl	803c912 <_Bfree>
 803daa4:	9805      	ldr	r0, [sp, #20]
 803daa6:	4649      	mov	r1, r9
 803daa8:	f7fe ff33 	bl	803c912 <_Bfree>
 803daac:	9805      	ldr	r0, [sp, #20]
 803daae:	4641      	mov	r1, r8
 803dab0:	f7fe ff2f 	bl	803c912 <_Bfree>
 803dab4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 803dab6:	9805      	ldr	r0, [sp, #20]
 803dab8:	f7fe ff2b 	bl	803c912 <_Bfree>
 803dabc:	9805      	ldr	r0, [sp, #20]
 803dabe:	4621      	mov	r1, r4
 803dac0:	f7fe ff27 	bl	803c912 <_Bfree>
 803dac4:	e5f9      	b.n	803d6ba <_strtod_l+0x72>
 803dac6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 803dac8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 803dacc:	4293      	cmp	r3, r2
 803dace:	dbbc      	blt.n	803da4a <_strtod_l+0x402>
 803dad0:	4c41      	ldr	r4, [pc, #260]	@ (803dbd8 <_strtod_l+0x590>)
 803dad2:	f1c5 050f 	rsb	r5, r5, #15
 803dad6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 803dada:	4652      	mov	r2, sl
 803dadc:	465b      	mov	r3, fp
 803dade:	e9d1 0100 	ldrd	r0, r1, [r1]
 803dae2:	f7d2 fda1 	bl	8010628 <__aeabi_dmul>
 803dae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803dae8:	1b5d      	subs	r5, r3, r5
 803daea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 803daee:	e9d4 2300 	ldrd	r2, r3, [r4]
 803daf2:	e78f      	b.n	803da14 <_strtod_l+0x3cc>
 803daf4:	3316      	adds	r3, #22
 803daf6:	dba8      	blt.n	803da4a <_strtod_l+0x402>
 803daf8:	4b37      	ldr	r3, [pc, #220]	@ (803dbd8 <_strtod_l+0x590>)
 803dafa:	eba9 0808 	sub.w	r8, r9, r8
 803dafe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 803db02:	e9d8 2300 	ldrd	r2, r3, [r8]
 803db06:	4650      	mov	r0, sl
 803db08:	4659      	mov	r1, fp
 803db0a:	f7d2 feb7 	bl	801087c <__aeabi_ddiv>
 803db0e:	e783      	b.n	803da18 <_strtod_l+0x3d0>
 803db10:	4b32      	ldr	r3, [pc, #200]	@ (803dbdc <_strtod_l+0x594>)
 803db12:	9308      	str	r3, [sp, #32]
 803db14:	2300      	movs	r3, #0
 803db16:	1124      	asrs	r4, r4, #4
 803db18:	4650      	mov	r0, sl
 803db1a:	4659      	mov	r1, fp
 803db1c:	461e      	mov	r6, r3
 803db1e:	2c01      	cmp	r4, #1
 803db20:	dc21      	bgt.n	803db66 <_strtod_l+0x51e>
 803db22:	b10b      	cbz	r3, 803db28 <_strtod_l+0x4e0>
 803db24:	4682      	mov	sl, r0
 803db26:	468b      	mov	fp, r1
 803db28:	492c      	ldr	r1, [pc, #176]	@ (803dbdc <_strtod_l+0x594>)
 803db2a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 803db2e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 803db32:	4652      	mov	r2, sl
 803db34:	465b      	mov	r3, fp
 803db36:	e9d1 0100 	ldrd	r0, r1, [r1]
 803db3a:	f7d2 fd75 	bl	8010628 <__aeabi_dmul>
 803db3e:	4b28      	ldr	r3, [pc, #160]	@ (803dbe0 <_strtod_l+0x598>)
 803db40:	460a      	mov	r2, r1
 803db42:	400b      	ands	r3, r1
 803db44:	4927      	ldr	r1, [pc, #156]	@ (803dbe4 <_strtod_l+0x59c>)
 803db46:	428b      	cmp	r3, r1
 803db48:	4682      	mov	sl, r0
 803db4a:	d898      	bhi.n	803da7e <_strtod_l+0x436>
 803db4c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 803db50:	428b      	cmp	r3, r1
 803db52:	bf86      	itte	hi
 803db54:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 803dbe8 <_strtod_l+0x5a0>
 803db58:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 803db5c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 803db60:	2300      	movs	r3, #0
 803db62:	9308      	str	r3, [sp, #32]
 803db64:	e07a      	b.n	803dc5c <_strtod_l+0x614>
 803db66:	07e2      	lsls	r2, r4, #31
 803db68:	d505      	bpl.n	803db76 <_strtod_l+0x52e>
 803db6a:	9b08      	ldr	r3, [sp, #32]
 803db6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 803db70:	f7d2 fd5a 	bl	8010628 <__aeabi_dmul>
 803db74:	2301      	movs	r3, #1
 803db76:	9a08      	ldr	r2, [sp, #32]
 803db78:	3208      	adds	r2, #8
 803db7a:	3601      	adds	r6, #1
 803db7c:	1064      	asrs	r4, r4, #1
 803db7e:	9208      	str	r2, [sp, #32]
 803db80:	e7cd      	b.n	803db1e <_strtod_l+0x4d6>
 803db82:	d0ed      	beq.n	803db60 <_strtod_l+0x518>
 803db84:	4264      	negs	r4, r4
 803db86:	f014 020f 	ands.w	r2, r4, #15
 803db8a:	d00a      	beq.n	803dba2 <_strtod_l+0x55a>
 803db8c:	4b12      	ldr	r3, [pc, #72]	@ (803dbd8 <_strtod_l+0x590>)
 803db8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 803db92:	4650      	mov	r0, sl
 803db94:	4659      	mov	r1, fp
 803db96:	e9d3 2300 	ldrd	r2, r3, [r3]
 803db9a:	f7d2 fe6f 	bl	801087c <__aeabi_ddiv>
 803db9e:	4682      	mov	sl, r0
 803dba0:	468b      	mov	fp, r1
 803dba2:	1124      	asrs	r4, r4, #4
 803dba4:	d0dc      	beq.n	803db60 <_strtod_l+0x518>
 803dba6:	2c1f      	cmp	r4, #31
 803dba8:	dd20      	ble.n	803dbec <_strtod_l+0x5a4>
 803dbaa:	2400      	movs	r4, #0
 803dbac:	46a0      	mov	r8, r4
 803dbae:	940a      	str	r4, [sp, #40]	@ 0x28
 803dbb0:	46a1      	mov	r9, r4
 803dbb2:	9a05      	ldr	r2, [sp, #20]
 803dbb4:	2322      	movs	r3, #34	@ 0x22
 803dbb6:	f04f 0a00 	mov.w	sl, #0
 803dbba:	f04f 0b00 	mov.w	fp, #0
 803dbbe:	6013      	str	r3, [r2, #0]
 803dbc0:	e768      	b.n	803da94 <_strtod_l+0x44c>
 803dbc2:	bf00      	nop
 803dbc4:	08044931 	.word	0x08044931
 803dbc8:	08044eb0 	.word	0x08044eb0
 803dbcc:	080447a1 	.word	0x080447a1
 803dbd0:	08044c5c 	.word	0x08044c5c
 803dbd4:	0804479b 	.word	0x0804479b
 803dbd8:	08044de8 	.word	0x08044de8
 803dbdc:	08044dc0 	.word	0x08044dc0
 803dbe0:	7ff00000 	.word	0x7ff00000
 803dbe4:	7ca00000 	.word	0x7ca00000
 803dbe8:	7fefffff 	.word	0x7fefffff
 803dbec:	f014 0310 	ands.w	r3, r4, #16
 803dbf0:	bf18      	it	ne
 803dbf2:	236a      	movne	r3, #106	@ 0x6a
 803dbf4:	4ea9      	ldr	r6, [pc, #676]	@ (803de9c <_strtod_l+0x854>)
 803dbf6:	9308      	str	r3, [sp, #32]
 803dbf8:	4650      	mov	r0, sl
 803dbfa:	4659      	mov	r1, fp
 803dbfc:	2300      	movs	r3, #0
 803dbfe:	07e2      	lsls	r2, r4, #31
 803dc00:	d504      	bpl.n	803dc0c <_strtod_l+0x5c4>
 803dc02:	e9d6 2300 	ldrd	r2, r3, [r6]
 803dc06:	f7d2 fd0f 	bl	8010628 <__aeabi_dmul>
 803dc0a:	2301      	movs	r3, #1
 803dc0c:	1064      	asrs	r4, r4, #1
 803dc0e:	f106 0608 	add.w	r6, r6, #8
 803dc12:	d1f4      	bne.n	803dbfe <_strtod_l+0x5b6>
 803dc14:	b10b      	cbz	r3, 803dc1a <_strtod_l+0x5d2>
 803dc16:	4682      	mov	sl, r0
 803dc18:	468b      	mov	fp, r1
 803dc1a:	9b08      	ldr	r3, [sp, #32]
 803dc1c:	b1b3      	cbz	r3, 803dc4c <_strtod_l+0x604>
 803dc1e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 803dc22:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 803dc26:	2b00      	cmp	r3, #0
 803dc28:	4659      	mov	r1, fp
 803dc2a:	dd0f      	ble.n	803dc4c <_strtod_l+0x604>
 803dc2c:	2b1f      	cmp	r3, #31
 803dc2e:	dd55      	ble.n	803dcdc <_strtod_l+0x694>
 803dc30:	2b34      	cmp	r3, #52	@ 0x34
 803dc32:	bfde      	ittt	le
 803dc34:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 803dc38:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 803dc3c:	4093      	lslle	r3, r2
 803dc3e:	f04f 0a00 	mov.w	sl, #0
 803dc42:	bfcc      	ite	gt
 803dc44:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 803dc48:	ea03 0b01 	andle.w	fp, r3, r1
 803dc4c:	2200      	movs	r2, #0
 803dc4e:	2300      	movs	r3, #0
 803dc50:	4650      	mov	r0, sl
 803dc52:	4659      	mov	r1, fp
 803dc54:	f7d2 ff50 	bl	8010af8 <__aeabi_dcmpeq>
 803dc58:	2800      	cmp	r0, #0
 803dc5a:	d1a6      	bne.n	803dbaa <_strtod_l+0x562>
 803dc5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 803dc5e:	9300      	str	r3, [sp, #0]
 803dc60:	990c      	ldr	r1, [sp, #48]	@ 0x30
 803dc62:	9805      	ldr	r0, [sp, #20]
 803dc64:	462b      	mov	r3, r5
 803dc66:	463a      	mov	r2, r7
 803dc68:	f7fe fea2 	bl	803c9b0 <__s2b>
 803dc6c:	900a      	str	r0, [sp, #40]	@ 0x28
 803dc6e:	2800      	cmp	r0, #0
 803dc70:	f43f af05 	beq.w	803da7e <_strtod_l+0x436>
 803dc74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 803dc76:	2a00      	cmp	r2, #0
 803dc78:	eba9 0308 	sub.w	r3, r9, r8
 803dc7c:	bfa8      	it	ge
 803dc7e:	2300      	movge	r3, #0
 803dc80:	9312      	str	r3, [sp, #72]	@ 0x48
 803dc82:	2400      	movs	r4, #0
 803dc84:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 803dc88:	9316      	str	r3, [sp, #88]	@ 0x58
 803dc8a:	46a0      	mov	r8, r4
 803dc8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 803dc8e:	9805      	ldr	r0, [sp, #20]
 803dc90:	6859      	ldr	r1, [r3, #4]
 803dc92:	f7fe fe19 	bl	803c8c8 <_Balloc>
 803dc96:	4681      	mov	r9, r0
 803dc98:	2800      	cmp	r0, #0
 803dc9a:	f43f aef4 	beq.w	803da86 <_strtod_l+0x43e>
 803dc9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 803dca0:	691a      	ldr	r2, [r3, #16]
 803dca2:	3202      	adds	r2, #2
 803dca4:	f103 010c 	add.w	r1, r3, #12
 803dca8:	0092      	lsls	r2, r2, #2
 803dcaa:	300c      	adds	r0, #12
 803dcac:	f7f9 fadc 	bl	8037268 <memcpy>
 803dcb0:	ec4b ab10 	vmov	d0, sl, fp
 803dcb4:	9805      	ldr	r0, [sp, #20]
 803dcb6:	aa1c      	add	r2, sp, #112	@ 0x70
 803dcb8:	a91b      	add	r1, sp, #108	@ 0x6c
 803dcba:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 803dcbe:	f7ff f999 	bl	803cff4 <__d2b>
 803dcc2:	901a      	str	r0, [sp, #104]	@ 0x68
 803dcc4:	2800      	cmp	r0, #0
 803dcc6:	f43f aede 	beq.w	803da86 <_strtod_l+0x43e>
 803dcca:	9805      	ldr	r0, [sp, #20]
 803dccc:	2101      	movs	r1, #1
 803dcce:	f7fe ff05 	bl	803cadc <__i2b>
 803dcd2:	4680      	mov	r8, r0
 803dcd4:	b948      	cbnz	r0, 803dcea <_strtod_l+0x6a2>
 803dcd6:	f04f 0800 	mov.w	r8, #0
 803dcda:	e6d4      	b.n	803da86 <_strtod_l+0x43e>
 803dcdc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 803dce0:	fa02 f303 	lsl.w	r3, r2, r3
 803dce4:	ea03 0a0a 	and.w	sl, r3, sl
 803dce8:	e7b0      	b.n	803dc4c <_strtod_l+0x604>
 803dcea:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 803dcec:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 803dcee:	2d00      	cmp	r5, #0
 803dcf0:	bfab      	itete	ge
 803dcf2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 803dcf4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 803dcf6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 803dcf8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 803dcfa:	bfac      	ite	ge
 803dcfc:	18ef      	addge	r7, r5, r3
 803dcfe:	1b5e      	sublt	r6, r3, r5
 803dd00:	9b08      	ldr	r3, [sp, #32]
 803dd02:	1aed      	subs	r5, r5, r3
 803dd04:	4415      	add	r5, r2
 803dd06:	4b66      	ldr	r3, [pc, #408]	@ (803dea0 <_strtod_l+0x858>)
 803dd08:	3d01      	subs	r5, #1
 803dd0a:	429d      	cmp	r5, r3
 803dd0c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 803dd10:	da50      	bge.n	803ddb4 <_strtod_l+0x76c>
 803dd12:	1b5b      	subs	r3, r3, r5
 803dd14:	2b1f      	cmp	r3, #31
 803dd16:	eba2 0203 	sub.w	r2, r2, r3
 803dd1a:	f04f 0101 	mov.w	r1, #1
 803dd1e:	dc3d      	bgt.n	803dd9c <_strtod_l+0x754>
 803dd20:	fa01 f303 	lsl.w	r3, r1, r3
 803dd24:	9313      	str	r3, [sp, #76]	@ 0x4c
 803dd26:	2300      	movs	r3, #0
 803dd28:	9310      	str	r3, [sp, #64]	@ 0x40
 803dd2a:	18bd      	adds	r5, r7, r2
 803dd2c:	9b08      	ldr	r3, [sp, #32]
 803dd2e:	42af      	cmp	r7, r5
 803dd30:	4416      	add	r6, r2
 803dd32:	441e      	add	r6, r3
 803dd34:	463b      	mov	r3, r7
 803dd36:	bfa8      	it	ge
 803dd38:	462b      	movge	r3, r5
 803dd3a:	42b3      	cmp	r3, r6
 803dd3c:	bfa8      	it	ge
 803dd3e:	4633      	movge	r3, r6
 803dd40:	2b00      	cmp	r3, #0
 803dd42:	bfc2      	ittt	gt
 803dd44:	1aed      	subgt	r5, r5, r3
 803dd46:	1af6      	subgt	r6, r6, r3
 803dd48:	1aff      	subgt	r7, r7, r3
 803dd4a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 803dd4c:	2b00      	cmp	r3, #0
 803dd4e:	dd16      	ble.n	803dd7e <_strtod_l+0x736>
 803dd50:	4641      	mov	r1, r8
 803dd52:	9805      	ldr	r0, [sp, #20]
 803dd54:	461a      	mov	r2, r3
 803dd56:	f7fe ff81 	bl	803cc5c <__pow5mult>
 803dd5a:	4680      	mov	r8, r0
 803dd5c:	2800      	cmp	r0, #0
 803dd5e:	d0ba      	beq.n	803dcd6 <_strtod_l+0x68e>
 803dd60:	4601      	mov	r1, r0
 803dd62:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 803dd64:	9805      	ldr	r0, [sp, #20]
 803dd66:	f7fe fecf 	bl	803cb08 <__multiply>
 803dd6a:	900e      	str	r0, [sp, #56]	@ 0x38
 803dd6c:	2800      	cmp	r0, #0
 803dd6e:	f43f ae8a 	beq.w	803da86 <_strtod_l+0x43e>
 803dd72:	991a      	ldr	r1, [sp, #104]	@ 0x68
 803dd74:	9805      	ldr	r0, [sp, #20]
 803dd76:	f7fe fdcc 	bl	803c912 <_Bfree>
 803dd7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803dd7c:	931a      	str	r3, [sp, #104]	@ 0x68
 803dd7e:	2d00      	cmp	r5, #0
 803dd80:	dc1d      	bgt.n	803ddbe <_strtod_l+0x776>
 803dd82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803dd84:	2b00      	cmp	r3, #0
 803dd86:	dd23      	ble.n	803ddd0 <_strtod_l+0x788>
 803dd88:	4649      	mov	r1, r9
 803dd8a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 803dd8c:	9805      	ldr	r0, [sp, #20]
 803dd8e:	f7fe ff65 	bl	803cc5c <__pow5mult>
 803dd92:	4681      	mov	r9, r0
 803dd94:	b9e0      	cbnz	r0, 803ddd0 <_strtod_l+0x788>
 803dd96:	f04f 0900 	mov.w	r9, #0
 803dd9a:	e674      	b.n	803da86 <_strtod_l+0x43e>
 803dd9c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 803dda0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 803dda4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 803dda8:	35e2      	adds	r5, #226	@ 0xe2
 803ddaa:	fa01 f305 	lsl.w	r3, r1, r5
 803ddae:	9310      	str	r3, [sp, #64]	@ 0x40
 803ddb0:	9113      	str	r1, [sp, #76]	@ 0x4c
 803ddb2:	e7ba      	b.n	803dd2a <_strtod_l+0x6e2>
 803ddb4:	2300      	movs	r3, #0
 803ddb6:	9310      	str	r3, [sp, #64]	@ 0x40
 803ddb8:	2301      	movs	r3, #1
 803ddba:	9313      	str	r3, [sp, #76]	@ 0x4c
 803ddbc:	e7b5      	b.n	803dd2a <_strtod_l+0x6e2>
 803ddbe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 803ddc0:	9805      	ldr	r0, [sp, #20]
 803ddc2:	462a      	mov	r2, r5
 803ddc4:	f7fe ff8a 	bl	803ccdc <__lshift>
 803ddc8:	901a      	str	r0, [sp, #104]	@ 0x68
 803ddca:	2800      	cmp	r0, #0
 803ddcc:	d1d9      	bne.n	803dd82 <_strtod_l+0x73a>
 803ddce:	e65a      	b.n	803da86 <_strtod_l+0x43e>
 803ddd0:	2e00      	cmp	r6, #0
 803ddd2:	dd07      	ble.n	803dde4 <_strtod_l+0x79c>
 803ddd4:	4649      	mov	r1, r9
 803ddd6:	9805      	ldr	r0, [sp, #20]
 803ddd8:	4632      	mov	r2, r6
 803ddda:	f7fe ff7f 	bl	803ccdc <__lshift>
 803ddde:	4681      	mov	r9, r0
 803dde0:	2800      	cmp	r0, #0
 803dde2:	d0d8      	beq.n	803dd96 <_strtod_l+0x74e>
 803dde4:	2f00      	cmp	r7, #0
 803dde6:	dd08      	ble.n	803ddfa <_strtod_l+0x7b2>
 803dde8:	4641      	mov	r1, r8
 803ddea:	9805      	ldr	r0, [sp, #20]
 803ddec:	463a      	mov	r2, r7
 803ddee:	f7fe ff75 	bl	803ccdc <__lshift>
 803ddf2:	4680      	mov	r8, r0
 803ddf4:	2800      	cmp	r0, #0
 803ddf6:	f43f ae46 	beq.w	803da86 <_strtod_l+0x43e>
 803ddfa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 803ddfc:	9805      	ldr	r0, [sp, #20]
 803ddfe:	464a      	mov	r2, r9
 803de00:	f7fe fff4 	bl	803cdec <__mdiff>
 803de04:	4604      	mov	r4, r0
 803de06:	2800      	cmp	r0, #0
 803de08:	f43f ae3d 	beq.w	803da86 <_strtod_l+0x43e>
 803de0c:	68c3      	ldr	r3, [r0, #12]
 803de0e:	930f      	str	r3, [sp, #60]	@ 0x3c
 803de10:	2300      	movs	r3, #0
 803de12:	60c3      	str	r3, [r0, #12]
 803de14:	4641      	mov	r1, r8
 803de16:	f7fe ffcd 	bl	803cdb4 <__mcmp>
 803de1a:	2800      	cmp	r0, #0
 803de1c:	da46      	bge.n	803deac <_strtod_l+0x864>
 803de1e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803de20:	ea53 030a 	orrs.w	r3, r3, sl
 803de24:	d16c      	bne.n	803df00 <_strtod_l+0x8b8>
 803de26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 803de2a:	2b00      	cmp	r3, #0
 803de2c:	d168      	bne.n	803df00 <_strtod_l+0x8b8>
 803de2e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 803de32:	0d1b      	lsrs	r3, r3, #20
 803de34:	051b      	lsls	r3, r3, #20
 803de36:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 803de3a:	d961      	bls.n	803df00 <_strtod_l+0x8b8>
 803de3c:	6963      	ldr	r3, [r4, #20]
 803de3e:	b913      	cbnz	r3, 803de46 <_strtod_l+0x7fe>
 803de40:	6923      	ldr	r3, [r4, #16]
 803de42:	2b01      	cmp	r3, #1
 803de44:	dd5c      	ble.n	803df00 <_strtod_l+0x8b8>
 803de46:	4621      	mov	r1, r4
 803de48:	2201      	movs	r2, #1
 803de4a:	9805      	ldr	r0, [sp, #20]
 803de4c:	f7fe ff46 	bl	803ccdc <__lshift>
 803de50:	4641      	mov	r1, r8
 803de52:	4604      	mov	r4, r0
 803de54:	f7fe ffae 	bl	803cdb4 <__mcmp>
 803de58:	2800      	cmp	r0, #0
 803de5a:	dd51      	ble.n	803df00 <_strtod_l+0x8b8>
 803de5c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 803de60:	9a08      	ldr	r2, [sp, #32]
 803de62:	0d1b      	lsrs	r3, r3, #20
 803de64:	051b      	lsls	r3, r3, #20
 803de66:	2a00      	cmp	r2, #0
 803de68:	d06b      	beq.n	803df42 <_strtod_l+0x8fa>
 803de6a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 803de6e:	d868      	bhi.n	803df42 <_strtod_l+0x8fa>
 803de70:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 803de74:	f67f ae9d 	bls.w	803dbb2 <_strtod_l+0x56a>
 803de78:	4b0a      	ldr	r3, [pc, #40]	@ (803dea4 <_strtod_l+0x85c>)
 803de7a:	4650      	mov	r0, sl
 803de7c:	4659      	mov	r1, fp
 803de7e:	2200      	movs	r2, #0
 803de80:	f7d2 fbd2 	bl	8010628 <__aeabi_dmul>
 803de84:	4b08      	ldr	r3, [pc, #32]	@ (803dea8 <_strtod_l+0x860>)
 803de86:	400b      	ands	r3, r1
 803de88:	4682      	mov	sl, r0
 803de8a:	468b      	mov	fp, r1
 803de8c:	2b00      	cmp	r3, #0
 803de8e:	f47f ae05 	bne.w	803da9c <_strtod_l+0x454>
 803de92:	9a05      	ldr	r2, [sp, #20]
 803de94:	2322      	movs	r3, #34	@ 0x22
 803de96:	6013      	str	r3, [r2, #0]
 803de98:	e600      	b.n	803da9c <_strtod_l+0x454>
 803de9a:	bf00      	nop
 803de9c:	08044ed8 	.word	0x08044ed8
 803dea0:	fffffc02 	.word	0xfffffc02
 803dea4:	39500000 	.word	0x39500000
 803dea8:	7ff00000 	.word	0x7ff00000
 803deac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 803deb0:	d165      	bne.n	803df7e <_strtod_l+0x936>
 803deb2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 803deb4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 803deb8:	b35a      	cbz	r2, 803df12 <_strtod_l+0x8ca>
 803deba:	4a9f      	ldr	r2, [pc, #636]	@ (803e138 <_strtod_l+0xaf0>)
 803debc:	4293      	cmp	r3, r2
 803debe:	d12b      	bne.n	803df18 <_strtod_l+0x8d0>
 803dec0:	9b08      	ldr	r3, [sp, #32]
 803dec2:	4651      	mov	r1, sl
 803dec4:	b303      	cbz	r3, 803df08 <_strtod_l+0x8c0>
 803dec6:	4b9d      	ldr	r3, [pc, #628]	@ (803e13c <_strtod_l+0xaf4>)
 803dec8:	465a      	mov	r2, fp
 803deca:	4013      	ands	r3, r2
 803decc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 803ded0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 803ded4:	d81b      	bhi.n	803df0e <_strtod_l+0x8c6>
 803ded6:	0d1b      	lsrs	r3, r3, #20
 803ded8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 803dedc:	fa02 f303 	lsl.w	r3, r2, r3
 803dee0:	4299      	cmp	r1, r3
 803dee2:	d119      	bne.n	803df18 <_strtod_l+0x8d0>
 803dee4:	4b96      	ldr	r3, [pc, #600]	@ (803e140 <_strtod_l+0xaf8>)
 803dee6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 803dee8:	429a      	cmp	r2, r3
 803deea:	d102      	bne.n	803def2 <_strtod_l+0x8aa>
 803deec:	3101      	adds	r1, #1
 803deee:	f43f adca 	beq.w	803da86 <_strtod_l+0x43e>
 803def2:	4b92      	ldr	r3, [pc, #584]	@ (803e13c <_strtod_l+0xaf4>)
 803def4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 803def6:	401a      	ands	r2, r3
 803def8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 803defc:	f04f 0a00 	mov.w	sl, #0
 803df00:	9b08      	ldr	r3, [sp, #32]
 803df02:	2b00      	cmp	r3, #0
 803df04:	d1b8      	bne.n	803de78 <_strtod_l+0x830>
 803df06:	e5c9      	b.n	803da9c <_strtod_l+0x454>
 803df08:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803df0c:	e7e8      	b.n	803dee0 <_strtod_l+0x898>
 803df0e:	4613      	mov	r3, r2
 803df10:	e7e6      	b.n	803dee0 <_strtod_l+0x898>
 803df12:	ea53 030a 	orrs.w	r3, r3, sl
 803df16:	d0a1      	beq.n	803de5c <_strtod_l+0x814>
 803df18:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803df1a:	b1db      	cbz	r3, 803df54 <_strtod_l+0x90c>
 803df1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 803df1e:	4213      	tst	r3, r2
 803df20:	d0ee      	beq.n	803df00 <_strtod_l+0x8b8>
 803df22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803df24:	9a08      	ldr	r2, [sp, #32]
 803df26:	4650      	mov	r0, sl
 803df28:	4659      	mov	r1, fp
 803df2a:	b1bb      	cbz	r3, 803df5c <_strtod_l+0x914>
 803df2c:	f7ff fb6e 	bl	803d60c <sulp>
 803df30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 803df34:	ec53 2b10 	vmov	r2, r3, d0
 803df38:	f7d2 f9c0 	bl	80102bc <__adddf3>
 803df3c:	4682      	mov	sl, r0
 803df3e:	468b      	mov	fp, r1
 803df40:	e7de      	b.n	803df00 <_strtod_l+0x8b8>
 803df42:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 803df46:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 803df4a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 803df4e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 803df52:	e7d5      	b.n	803df00 <_strtod_l+0x8b8>
 803df54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 803df56:	ea13 0f0a 	tst.w	r3, sl
 803df5a:	e7e1      	b.n	803df20 <_strtod_l+0x8d8>
 803df5c:	f7ff fb56 	bl	803d60c <sulp>
 803df60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 803df64:	ec53 2b10 	vmov	r2, r3, d0
 803df68:	f7d2 f9a6 	bl	80102b8 <__aeabi_dsub>
 803df6c:	2200      	movs	r2, #0
 803df6e:	2300      	movs	r3, #0
 803df70:	4682      	mov	sl, r0
 803df72:	468b      	mov	fp, r1
 803df74:	f7d2 fdc0 	bl	8010af8 <__aeabi_dcmpeq>
 803df78:	2800      	cmp	r0, #0
 803df7a:	d0c1      	beq.n	803df00 <_strtod_l+0x8b8>
 803df7c:	e619      	b.n	803dbb2 <_strtod_l+0x56a>
 803df7e:	4641      	mov	r1, r8
 803df80:	4620      	mov	r0, r4
 803df82:	f7ff f88f 	bl	803d0a4 <__ratio>
 803df86:	ec57 6b10 	vmov	r6, r7, d0
 803df8a:	2200      	movs	r2, #0
 803df8c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 803df90:	4630      	mov	r0, r6
 803df92:	4639      	mov	r1, r7
 803df94:	f7d2 fdc4 	bl	8010b20 <__aeabi_dcmple>
 803df98:	2800      	cmp	r0, #0
 803df9a:	d06f      	beq.n	803e07c <_strtod_l+0xa34>
 803df9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803df9e:	2b00      	cmp	r3, #0
 803dfa0:	d17a      	bne.n	803e098 <_strtod_l+0xa50>
 803dfa2:	f1ba 0f00 	cmp.w	sl, #0
 803dfa6:	d158      	bne.n	803e05a <_strtod_l+0xa12>
 803dfa8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803dfaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 803dfae:	2b00      	cmp	r3, #0
 803dfb0:	d15a      	bne.n	803e068 <_strtod_l+0xa20>
 803dfb2:	4b64      	ldr	r3, [pc, #400]	@ (803e144 <_strtod_l+0xafc>)
 803dfb4:	2200      	movs	r2, #0
 803dfb6:	4630      	mov	r0, r6
 803dfb8:	4639      	mov	r1, r7
 803dfba:	f7d2 fda7 	bl	8010b0c <__aeabi_dcmplt>
 803dfbe:	2800      	cmp	r0, #0
 803dfc0:	d159      	bne.n	803e076 <_strtod_l+0xa2e>
 803dfc2:	4630      	mov	r0, r6
 803dfc4:	4639      	mov	r1, r7
 803dfc6:	4b60      	ldr	r3, [pc, #384]	@ (803e148 <_strtod_l+0xb00>)
 803dfc8:	2200      	movs	r2, #0
 803dfca:	f7d2 fb2d 	bl	8010628 <__aeabi_dmul>
 803dfce:	4606      	mov	r6, r0
 803dfd0:	460f      	mov	r7, r1
 803dfd2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 803dfd6:	9606      	str	r6, [sp, #24]
 803dfd8:	9307      	str	r3, [sp, #28]
 803dfda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 803dfde:	4d57      	ldr	r5, [pc, #348]	@ (803e13c <_strtod_l+0xaf4>)
 803dfe0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 803dfe4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803dfe6:	401d      	ands	r5, r3
 803dfe8:	4b58      	ldr	r3, [pc, #352]	@ (803e14c <_strtod_l+0xb04>)
 803dfea:	429d      	cmp	r5, r3
 803dfec:	f040 80b2 	bne.w	803e154 <_strtod_l+0xb0c>
 803dff0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803dff2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 803dff6:	ec4b ab10 	vmov	d0, sl, fp
 803dffa:	f7fe ff8b 	bl	803cf14 <__ulp>
 803dffe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 803e002:	ec51 0b10 	vmov	r0, r1, d0
 803e006:	f7d2 fb0f 	bl	8010628 <__aeabi_dmul>
 803e00a:	4652      	mov	r2, sl
 803e00c:	465b      	mov	r3, fp
 803e00e:	f7d2 f955 	bl	80102bc <__adddf3>
 803e012:	460b      	mov	r3, r1
 803e014:	4949      	ldr	r1, [pc, #292]	@ (803e13c <_strtod_l+0xaf4>)
 803e016:	4a4e      	ldr	r2, [pc, #312]	@ (803e150 <_strtod_l+0xb08>)
 803e018:	4019      	ands	r1, r3
 803e01a:	4291      	cmp	r1, r2
 803e01c:	4682      	mov	sl, r0
 803e01e:	d942      	bls.n	803e0a6 <_strtod_l+0xa5e>
 803e020:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 803e022:	4b47      	ldr	r3, [pc, #284]	@ (803e140 <_strtod_l+0xaf8>)
 803e024:	429a      	cmp	r2, r3
 803e026:	d103      	bne.n	803e030 <_strtod_l+0x9e8>
 803e028:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803e02a:	3301      	adds	r3, #1
 803e02c:	f43f ad2b 	beq.w	803da86 <_strtod_l+0x43e>
 803e030:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 803e140 <_strtod_l+0xaf8>
 803e034:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 803e038:	991a      	ldr	r1, [sp, #104]	@ 0x68
 803e03a:	9805      	ldr	r0, [sp, #20]
 803e03c:	f7fe fc69 	bl	803c912 <_Bfree>
 803e040:	9805      	ldr	r0, [sp, #20]
 803e042:	4649      	mov	r1, r9
 803e044:	f7fe fc65 	bl	803c912 <_Bfree>
 803e048:	9805      	ldr	r0, [sp, #20]
 803e04a:	4641      	mov	r1, r8
 803e04c:	f7fe fc61 	bl	803c912 <_Bfree>
 803e050:	9805      	ldr	r0, [sp, #20]
 803e052:	4621      	mov	r1, r4
 803e054:	f7fe fc5d 	bl	803c912 <_Bfree>
 803e058:	e618      	b.n	803dc8c <_strtod_l+0x644>
 803e05a:	f1ba 0f01 	cmp.w	sl, #1
 803e05e:	d103      	bne.n	803e068 <_strtod_l+0xa20>
 803e060:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803e062:	2b00      	cmp	r3, #0
 803e064:	f43f ada5 	beq.w	803dbb2 <_strtod_l+0x56a>
 803e068:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 803e118 <_strtod_l+0xad0>
 803e06c:	4f35      	ldr	r7, [pc, #212]	@ (803e144 <_strtod_l+0xafc>)
 803e06e:	ed8d 7b06 	vstr	d7, [sp, #24]
 803e072:	2600      	movs	r6, #0
 803e074:	e7b1      	b.n	803dfda <_strtod_l+0x992>
 803e076:	4f34      	ldr	r7, [pc, #208]	@ (803e148 <_strtod_l+0xb00>)
 803e078:	2600      	movs	r6, #0
 803e07a:	e7aa      	b.n	803dfd2 <_strtod_l+0x98a>
 803e07c:	4b32      	ldr	r3, [pc, #200]	@ (803e148 <_strtod_l+0xb00>)
 803e07e:	4630      	mov	r0, r6
 803e080:	4639      	mov	r1, r7
 803e082:	2200      	movs	r2, #0
 803e084:	f7d2 fad0 	bl	8010628 <__aeabi_dmul>
 803e088:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803e08a:	4606      	mov	r6, r0
 803e08c:	460f      	mov	r7, r1
 803e08e:	2b00      	cmp	r3, #0
 803e090:	d09f      	beq.n	803dfd2 <_strtod_l+0x98a>
 803e092:	e9cd 6706 	strd	r6, r7, [sp, #24]
 803e096:	e7a0      	b.n	803dfda <_strtod_l+0x992>
 803e098:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 803e120 <_strtod_l+0xad8>
 803e09c:	ed8d 7b06 	vstr	d7, [sp, #24]
 803e0a0:	ec57 6b17 	vmov	r6, r7, d7
 803e0a4:	e799      	b.n	803dfda <_strtod_l+0x992>
 803e0a6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 803e0aa:	9b08      	ldr	r3, [sp, #32]
 803e0ac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 803e0b0:	2b00      	cmp	r3, #0
 803e0b2:	d1c1      	bne.n	803e038 <_strtod_l+0x9f0>
 803e0b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 803e0b8:	0d1b      	lsrs	r3, r3, #20
 803e0ba:	051b      	lsls	r3, r3, #20
 803e0bc:	429d      	cmp	r5, r3
 803e0be:	d1bb      	bne.n	803e038 <_strtod_l+0x9f0>
 803e0c0:	4630      	mov	r0, r6
 803e0c2:	4639      	mov	r1, r7
 803e0c4:	f7d2 fe74 	bl	8010db0 <__aeabi_d2lz>
 803e0c8:	f7d2 fa80 	bl	80105cc <__aeabi_l2d>
 803e0cc:	4602      	mov	r2, r0
 803e0ce:	460b      	mov	r3, r1
 803e0d0:	4630      	mov	r0, r6
 803e0d2:	4639      	mov	r1, r7
 803e0d4:	f7d2 f8f0 	bl	80102b8 <__aeabi_dsub>
 803e0d8:	460b      	mov	r3, r1
 803e0da:	4602      	mov	r2, r0
 803e0dc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 803e0e0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 803e0e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803e0e6:	ea46 060a 	orr.w	r6, r6, sl
 803e0ea:	431e      	orrs	r6, r3
 803e0ec:	d06f      	beq.n	803e1ce <_strtod_l+0xb86>
 803e0ee:	a30e      	add	r3, pc, #56	@ (adr r3, 803e128 <_strtod_l+0xae0>)
 803e0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 803e0f4:	f7d2 fd0a 	bl	8010b0c <__aeabi_dcmplt>
 803e0f8:	2800      	cmp	r0, #0
 803e0fa:	f47f accf 	bne.w	803da9c <_strtod_l+0x454>
 803e0fe:	a30c      	add	r3, pc, #48	@ (adr r3, 803e130 <_strtod_l+0xae8>)
 803e100:	e9d3 2300 	ldrd	r2, r3, [r3]
 803e104:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 803e108:	f7d2 fd1e 	bl	8010b48 <__aeabi_dcmpgt>
 803e10c:	2800      	cmp	r0, #0
 803e10e:	d093      	beq.n	803e038 <_strtod_l+0x9f0>
 803e110:	e4c4      	b.n	803da9c <_strtod_l+0x454>
 803e112:	bf00      	nop
 803e114:	f3af 8000 	nop.w
 803e118:	00000000 	.word	0x00000000
 803e11c:	bff00000 	.word	0xbff00000
 803e120:	00000000 	.word	0x00000000
 803e124:	3ff00000 	.word	0x3ff00000
 803e128:	94a03595 	.word	0x94a03595
 803e12c:	3fdfffff 	.word	0x3fdfffff
 803e130:	35afe535 	.word	0x35afe535
 803e134:	3fe00000 	.word	0x3fe00000
 803e138:	000fffff 	.word	0x000fffff
 803e13c:	7ff00000 	.word	0x7ff00000
 803e140:	7fefffff 	.word	0x7fefffff
 803e144:	3ff00000 	.word	0x3ff00000
 803e148:	3fe00000 	.word	0x3fe00000
 803e14c:	7fe00000 	.word	0x7fe00000
 803e150:	7c9fffff 	.word	0x7c9fffff
 803e154:	9b08      	ldr	r3, [sp, #32]
 803e156:	b323      	cbz	r3, 803e1a2 <_strtod_l+0xb5a>
 803e158:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 803e15c:	d821      	bhi.n	803e1a2 <_strtod_l+0xb5a>
 803e15e:	a328      	add	r3, pc, #160	@ (adr r3, 803e200 <_strtod_l+0xbb8>)
 803e160:	e9d3 2300 	ldrd	r2, r3, [r3]
 803e164:	4630      	mov	r0, r6
 803e166:	4639      	mov	r1, r7
 803e168:	f7d2 fcda 	bl	8010b20 <__aeabi_dcmple>
 803e16c:	b1a0      	cbz	r0, 803e198 <_strtod_l+0xb50>
 803e16e:	4639      	mov	r1, r7
 803e170:	4630      	mov	r0, r6
 803e172:	f7d2 fd31 	bl	8010bd8 <__aeabi_d2uiz>
 803e176:	2801      	cmp	r0, #1
 803e178:	bf38      	it	cc
 803e17a:	2001      	movcc	r0, #1
 803e17c:	f7d2 f9da 	bl	8010534 <__aeabi_ui2d>
 803e180:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803e182:	4606      	mov	r6, r0
 803e184:	460f      	mov	r7, r1
 803e186:	b9fb      	cbnz	r3, 803e1c8 <_strtod_l+0xb80>
 803e188:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 803e18c:	9014      	str	r0, [sp, #80]	@ 0x50
 803e18e:	9315      	str	r3, [sp, #84]	@ 0x54
 803e190:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 803e194:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 803e198:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 803e19a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 803e19e:	1b5b      	subs	r3, r3, r5
 803e1a0:	9311      	str	r3, [sp, #68]	@ 0x44
 803e1a2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 803e1a6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 803e1aa:	f7fe feb3 	bl	803cf14 <__ulp>
 803e1ae:	4650      	mov	r0, sl
 803e1b0:	ec53 2b10 	vmov	r2, r3, d0
 803e1b4:	4659      	mov	r1, fp
 803e1b6:	f7d2 fa37 	bl	8010628 <__aeabi_dmul>
 803e1ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 803e1be:	f7d2 f87d 	bl	80102bc <__adddf3>
 803e1c2:	4682      	mov	sl, r0
 803e1c4:	468b      	mov	fp, r1
 803e1c6:	e770      	b.n	803e0aa <_strtod_l+0xa62>
 803e1c8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 803e1cc:	e7e0      	b.n	803e190 <_strtod_l+0xb48>
 803e1ce:	a30e      	add	r3, pc, #56	@ (adr r3, 803e208 <_strtod_l+0xbc0>)
 803e1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 803e1d4:	f7d2 fc9a 	bl	8010b0c <__aeabi_dcmplt>
 803e1d8:	e798      	b.n	803e10c <_strtod_l+0xac4>
 803e1da:	2300      	movs	r3, #0
 803e1dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 803e1de:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 803e1e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 803e1e2:	6013      	str	r3, [r2, #0]
 803e1e4:	f7ff ba6d 	b.w	803d6c2 <_strtod_l+0x7a>
 803e1e8:	2a65      	cmp	r2, #101	@ 0x65
 803e1ea:	f43f ab66 	beq.w	803d8ba <_strtod_l+0x272>
 803e1ee:	2a45      	cmp	r2, #69	@ 0x45
 803e1f0:	f43f ab63 	beq.w	803d8ba <_strtod_l+0x272>
 803e1f4:	2301      	movs	r3, #1
 803e1f6:	f7ff bb9e 	b.w	803d936 <_strtod_l+0x2ee>
 803e1fa:	bf00      	nop
 803e1fc:	f3af 8000 	nop.w
 803e200:	ffc00000 	.word	0xffc00000
 803e204:	41dfffff 	.word	0x41dfffff
 803e208:	94a03595 	.word	0x94a03595
 803e20c:	3fcfffff 	.word	0x3fcfffff

0803e210 <_strtod_r>:
 803e210:	4b01      	ldr	r3, [pc, #4]	@ (803e218 <_strtod_r+0x8>)
 803e212:	f7ff ba19 	b.w	803d648 <_strtod_l>
 803e216:	bf00      	nop
 803e218:	200002c4 	.word	0x200002c4

0803e21c <_strtoul_l.constprop.0>:
 803e21c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 803e220:	4e34      	ldr	r6, [pc, #208]	@ (803e2f4 <_strtoul_l.constprop.0+0xd8>)
 803e222:	4686      	mov	lr, r0
 803e224:	460d      	mov	r5, r1
 803e226:	4628      	mov	r0, r5
 803e228:	f815 4b01 	ldrb.w	r4, [r5], #1
 803e22c:	5d37      	ldrb	r7, [r6, r4]
 803e22e:	f017 0708 	ands.w	r7, r7, #8
 803e232:	d1f8      	bne.n	803e226 <_strtoul_l.constprop.0+0xa>
 803e234:	2c2d      	cmp	r4, #45	@ 0x2d
 803e236:	d12f      	bne.n	803e298 <_strtoul_l.constprop.0+0x7c>
 803e238:	782c      	ldrb	r4, [r5, #0]
 803e23a:	2701      	movs	r7, #1
 803e23c:	1c85      	adds	r5, r0, #2
 803e23e:	f033 0010 	bics.w	r0, r3, #16
 803e242:	d109      	bne.n	803e258 <_strtoul_l.constprop.0+0x3c>
 803e244:	2c30      	cmp	r4, #48	@ 0x30
 803e246:	d12c      	bne.n	803e2a2 <_strtoul_l.constprop.0+0x86>
 803e248:	7828      	ldrb	r0, [r5, #0]
 803e24a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 803e24e:	2858      	cmp	r0, #88	@ 0x58
 803e250:	d127      	bne.n	803e2a2 <_strtoul_l.constprop.0+0x86>
 803e252:	786c      	ldrb	r4, [r5, #1]
 803e254:	2310      	movs	r3, #16
 803e256:	3502      	adds	r5, #2
 803e258:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 803e25c:	2600      	movs	r6, #0
 803e25e:	fbb8 f8f3 	udiv	r8, r8, r3
 803e262:	fb03 f908 	mul.w	r9, r3, r8
 803e266:	ea6f 0909 	mvn.w	r9, r9
 803e26a:	4630      	mov	r0, r6
 803e26c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 803e270:	f1bc 0f09 	cmp.w	ip, #9
 803e274:	d81c      	bhi.n	803e2b0 <_strtoul_l.constprop.0+0x94>
 803e276:	4664      	mov	r4, ip
 803e278:	42a3      	cmp	r3, r4
 803e27a:	dd2a      	ble.n	803e2d2 <_strtoul_l.constprop.0+0xb6>
 803e27c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 803e280:	d007      	beq.n	803e292 <_strtoul_l.constprop.0+0x76>
 803e282:	4580      	cmp	r8, r0
 803e284:	d322      	bcc.n	803e2cc <_strtoul_l.constprop.0+0xb0>
 803e286:	d101      	bne.n	803e28c <_strtoul_l.constprop.0+0x70>
 803e288:	45a1      	cmp	r9, r4
 803e28a:	db1f      	blt.n	803e2cc <_strtoul_l.constprop.0+0xb0>
 803e28c:	fb00 4003 	mla	r0, r0, r3, r4
 803e290:	2601      	movs	r6, #1
 803e292:	f815 4b01 	ldrb.w	r4, [r5], #1
 803e296:	e7e9      	b.n	803e26c <_strtoul_l.constprop.0+0x50>
 803e298:	2c2b      	cmp	r4, #43	@ 0x2b
 803e29a:	bf04      	itt	eq
 803e29c:	782c      	ldrbeq	r4, [r5, #0]
 803e29e:	1c85      	addeq	r5, r0, #2
 803e2a0:	e7cd      	b.n	803e23e <_strtoul_l.constprop.0+0x22>
 803e2a2:	2b00      	cmp	r3, #0
 803e2a4:	d1d8      	bne.n	803e258 <_strtoul_l.constprop.0+0x3c>
 803e2a6:	2c30      	cmp	r4, #48	@ 0x30
 803e2a8:	bf0c      	ite	eq
 803e2aa:	2308      	moveq	r3, #8
 803e2ac:	230a      	movne	r3, #10
 803e2ae:	e7d3      	b.n	803e258 <_strtoul_l.constprop.0+0x3c>
 803e2b0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 803e2b4:	f1bc 0f19 	cmp.w	ip, #25
 803e2b8:	d801      	bhi.n	803e2be <_strtoul_l.constprop.0+0xa2>
 803e2ba:	3c37      	subs	r4, #55	@ 0x37
 803e2bc:	e7dc      	b.n	803e278 <_strtoul_l.constprop.0+0x5c>
 803e2be:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 803e2c2:	f1bc 0f19 	cmp.w	ip, #25
 803e2c6:	d804      	bhi.n	803e2d2 <_strtoul_l.constprop.0+0xb6>
 803e2c8:	3c57      	subs	r4, #87	@ 0x57
 803e2ca:	e7d5      	b.n	803e278 <_strtoul_l.constprop.0+0x5c>
 803e2cc:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 803e2d0:	e7df      	b.n	803e292 <_strtoul_l.constprop.0+0x76>
 803e2d2:	1c73      	adds	r3, r6, #1
 803e2d4:	d106      	bne.n	803e2e4 <_strtoul_l.constprop.0+0xc8>
 803e2d6:	2322      	movs	r3, #34	@ 0x22
 803e2d8:	f8ce 3000 	str.w	r3, [lr]
 803e2dc:	4630      	mov	r0, r6
 803e2de:	b932      	cbnz	r2, 803e2ee <_strtoul_l.constprop.0+0xd2>
 803e2e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 803e2e4:	b107      	cbz	r7, 803e2e8 <_strtoul_l.constprop.0+0xcc>
 803e2e6:	4240      	negs	r0, r0
 803e2e8:	2a00      	cmp	r2, #0
 803e2ea:	d0f9      	beq.n	803e2e0 <_strtoul_l.constprop.0+0xc4>
 803e2ec:	b106      	cbz	r6, 803e2f0 <_strtoul_l.constprop.0+0xd4>
 803e2ee:	1e69      	subs	r1, r5, #1
 803e2f0:	6011      	str	r1, [r2, #0]
 803e2f2:	e7f5      	b.n	803e2e0 <_strtoul_l.constprop.0+0xc4>
 803e2f4:	08044b59 	.word	0x08044b59

0803e2f8 <_strtoul_r>:
 803e2f8:	f7ff bf90 	b.w	803e21c <_strtoul_l.constprop.0>

0803e2fc <strtoul>:
 803e2fc:	4613      	mov	r3, r2
 803e2fe:	460a      	mov	r2, r1
 803e300:	4601      	mov	r1, r0
 803e302:	4802      	ldr	r0, [pc, #8]	@ (803e30c <strtoul+0x10>)
 803e304:	6800      	ldr	r0, [r0, #0]
 803e306:	f7ff bf89 	b.w	803e21c <_strtoul_l.constprop.0>
 803e30a:	bf00      	nop
 803e30c:	20000430 	.word	0x20000430

0803e310 <__submore>:
 803e310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803e314:	460c      	mov	r4, r1
 803e316:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 803e318:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 803e31c:	4299      	cmp	r1, r3
 803e31e:	d11d      	bne.n	803e35c <__submore+0x4c>
 803e320:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 803e324:	f7f9 ffba 	bl	803829c <_malloc_r>
 803e328:	b918      	cbnz	r0, 803e332 <__submore+0x22>
 803e32a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 803e32e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803e332:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 803e336:	6363      	str	r3, [r4, #52]	@ 0x34
 803e338:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 803e33c:	6320      	str	r0, [r4, #48]	@ 0x30
 803e33e:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 803e342:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 803e346:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 803e34a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 803e34e:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 803e352:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 803e356:	6020      	str	r0, [r4, #0]
 803e358:	2000      	movs	r0, #0
 803e35a:	e7e8      	b.n	803e32e <__submore+0x1e>
 803e35c:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 803e35e:	0077      	lsls	r7, r6, #1
 803e360:	463a      	mov	r2, r7
 803e362:	f7fe ffab 	bl	803d2bc <_realloc_r>
 803e366:	4605      	mov	r5, r0
 803e368:	2800      	cmp	r0, #0
 803e36a:	d0de      	beq.n	803e32a <__submore+0x1a>
 803e36c:	eb00 0806 	add.w	r8, r0, r6
 803e370:	4601      	mov	r1, r0
 803e372:	4632      	mov	r2, r6
 803e374:	4640      	mov	r0, r8
 803e376:	f7f8 ff77 	bl	8037268 <memcpy>
 803e37a:	e9c4 570c 	strd	r5, r7, [r4, #48]	@ 0x30
 803e37e:	f8c4 8000 	str.w	r8, [r4]
 803e382:	e7e9      	b.n	803e358 <__submore+0x48>

0803e384 <__ascii_wctomb>:
 803e384:	4603      	mov	r3, r0
 803e386:	4608      	mov	r0, r1
 803e388:	b141      	cbz	r1, 803e39c <__ascii_wctomb+0x18>
 803e38a:	2aff      	cmp	r2, #255	@ 0xff
 803e38c:	d904      	bls.n	803e398 <__ascii_wctomb+0x14>
 803e38e:	228a      	movs	r2, #138	@ 0x8a
 803e390:	601a      	str	r2, [r3, #0]
 803e392:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 803e396:	4770      	bx	lr
 803e398:	700a      	strb	r2, [r1, #0]
 803e39a:	2001      	movs	r0, #1
 803e39c:	4770      	bx	lr

0803e39e <__swbuf_r>:
 803e39e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803e3a0:	460e      	mov	r6, r1
 803e3a2:	4614      	mov	r4, r2
 803e3a4:	4605      	mov	r5, r0
 803e3a6:	b118      	cbz	r0, 803e3b0 <__swbuf_r+0x12>
 803e3a8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 803e3aa:	b90b      	cbnz	r3, 803e3b0 <__swbuf_r+0x12>
 803e3ac:	f7f7 fa7a 	bl	80358a4 <__sinit>
 803e3b0:	69a3      	ldr	r3, [r4, #24]
 803e3b2:	60a3      	str	r3, [r4, #8]
 803e3b4:	89a3      	ldrh	r3, [r4, #12]
 803e3b6:	0719      	lsls	r1, r3, #28
 803e3b8:	d501      	bpl.n	803e3be <__swbuf_r+0x20>
 803e3ba:	6923      	ldr	r3, [r4, #16]
 803e3bc:	b943      	cbnz	r3, 803e3d0 <__swbuf_r+0x32>
 803e3be:	4621      	mov	r1, r4
 803e3c0:	4628      	mov	r0, r5
 803e3c2:	f7f7 fc2b 	bl	8035c1c <__swsetup_r>
 803e3c6:	b118      	cbz	r0, 803e3d0 <__swbuf_r+0x32>
 803e3c8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 803e3cc:	4638      	mov	r0, r7
 803e3ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 803e3d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803e3d4:	b2f6      	uxtb	r6, r6
 803e3d6:	049a      	lsls	r2, r3, #18
 803e3d8:	4637      	mov	r7, r6
 803e3da:	d406      	bmi.n	803e3ea <__swbuf_r+0x4c>
 803e3dc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 803e3e0:	81a3      	strh	r3, [r4, #12]
 803e3e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 803e3e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 803e3e8:	6663      	str	r3, [r4, #100]	@ 0x64
 803e3ea:	6823      	ldr	r3, [r4, #0]
 803e3ec:	6922      	ldr	r2, [r4, #16]
 803e3ee:	1a98      	subs	r0, r3, r2
 803e3f0:	6963      	ldr	r3, [r4, #20]
 803e3f2:	4283      	cmp	r3, r0
 803e3f4:	dc05      	bgt.n	803e402 <__swbuf_r+0x64>
 803e3f6:	4621      	mov	r1, r4
 803e3f8:	4628      	mov	r0, r5
 803e3fa:	f7f7 f911 	bl	8035620 <_fflush_r>
 803e3fe:	2800      	cmp	r0, #0
 803e400:	d1e2      	bne.n	803e3c8 <__swbuf_r+0x2a>
 803e402:	68a3      	ldr	r3, [r4, #8]
 803e404:	3b01      	subs	r3, #1
 803e406:	60a3      	str	r3, [r4, #8]
 803e408:	6823      	ldr	r3, [r4, #0]
 803e40a:	1c5a      	adds	r2, r3, #1
 803e40c:	6022      	str	r2, [r4, #0]
 803e40e:	701e      	strb	r6, [r3, #0]
 803e410:	6962      	ldr	r2, [r4, #20]
 803e412:	1c43      	adds	r3, r0, #1
 803e414:	429a      	cmp	r2, r3
 803e416:	d004      	beq.n	803e422 <__swbuf_r+0x84>
 803e418:	89a3      	ldrh	r3, [r4, #12]
 803e41a:	07db      	lsls	r3, r3, #31
 803e41c:	d5d6      	bpl.n	803e3cc <__swbuf_r+0x2e>
 803e41e:	2e0a      	cmp	r6, #10
 803e420:	d1d4      	bne.n	803e3cc <__swbuf_r+0x2e>
 803e422:	4621      	mov	r1, r4
 803e424:	4628      	mov	r0, r5
 803e426:	f7f7 f8fb 	bl	8035620 <_fflush_r>
 803e42a:	2800      	cmp	r0, #0
 803e42c:	d0ce      	beq.n	803e3cc <__swbuf_r+0x2e>
 803e42e:	e7cb      	b.n	803e3c8 <__swbuf_r+0x2a>

0803e430 <_raise_r>:
 803e430:	291f      	cmp	r1, #31
 803e432:	b538      	push	{r3, r4, r5, lr}
 803e434:	4605      	mov	r5, r0
 803e436:	460c      	mov	r4, r1
 803e438:	d904      	bls.n	803e444 <_raise_r+0x14>
 803e43a:	2316      	movs	r3, #22
 803e43c:	6003      	str	r3, [r0, #0]
 803e43e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 803e442:	bd38      	pop	{r3, r4, r5, pc}
 803e444:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 803e448:	b112      	cbz	r2, 803e450 <_raise_r+0x20>
 803e44a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 803e44e:	b94b      	cbnz	r3, 803e464 <_raise_r+0x34>
 803e450:	4628      	mov	r0, r5
 803e452:	f000 f8fd 	bl	803e650 <_getpid_r>
 803e456:	4622      	mov	r2, r4
 803e458:	4601      	mov	r1, r0
 803e45a:	4628      	mov	r0, r5
 803e45c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 803e460:	f000 b8e4 	b.w	803e62c <_kill_r>
 803e464:	2b01      	cmp	r3, #1
 803e466:	d00a      	beq.n	803e47e <_raise_r+0x4e>
 803e468:	1c59      	adds	r1, r3, #1
 803e46a:	d103      	bne.n	803e474 <_raise_r+0x44>
 803e46c:	2316      	movs	r3, #22
 803e46e:	6003      	str	r3, [r0, #0]
 803e470:	2001      	movs	r0, #1
 803e472:	e7e6      	b.n	803e442 <_raise_r+0x12>
 803e474:	2100      	movs	r1, #0
 803e476:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 803e47a:	4620      	mov	r0, r4
 803e47c:	4798      	blx	r3
 803e47e:	2000      	movs	r0, #0
 803e480:	e7df      	b.n	803e442 <_raise_r+0x12>
	...

0803e484 <raise>:
 803e484:	4b02      	ldr	r3, [pc, #8]	@ (803e490 <raise+0xc>)
 803e486:	4601      	mov	r1, r0
 803e488:	6818      	ldr	r0, [r3, #0]
 803e48a:	f7ff bfd1 	b.w	803e430 <_raise_r>
 803e48e:	bf00      	nop
 803e490:	20000430 	.word	0x20000430

0803e494 <__gettzinfo>:
 803e494:	4800      	ldr	r0, [pc, #0]	@ (803e498 <__gettzinfo+0x4>)
 803e496:	4770      	bx	lr
 803e498:	20000970 	.word	0x20000970

0803e49c <gmtime_r>:
 803e49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803e4a0:	4a4d      	ldr	r2, [pc, #308]	@ (803e5d8 <gmtime_r+0x13c>)
 803e4a2:	460c      	mov	r4, r1
 803e4a4:	2300      	movs	r3, #0
 803e4a6:	e9d0 0100 	ldrd	r0, r1, [r0]
 803e4aa:	f7d2 fc05 	bl	8010cb8 <__aeabi_ldivmod>
 803e4ae:	2a00      	cmp	r2, #0
 803e4b0:	bfbc      	itt	lt
 803e4b2:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 803e4b6:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 803e4ba:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 803e4be:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 803e4c2:	fbb2 f3f1 	udiv	r3, r2, r1
 803e4c6:	fb01 2213 	mls	r2, r1, r3, r2
 803e4ca:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 803e4ce:	bfac      	ite	ge
 803e4d0:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 803e4d4:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 803e4d8:	60a3      	str	r3, [r4, #8]
 803e4da:	fbb2 f3f1 	udiv	r3, r2, r1
 803e4de:	fb01 2213 	mls	r2, r1, r3, r2
 803e4e2:	6063      	str	r3, [r4, #4]
 803e4e4:	6022      	str	r2, [r4, #0]
 803e4e6:	1cc3      	adds	r3, r0, #3
 803e4e8:	2207      	movs	r2, #7
 803e4ea:	fb93 f2f2 	sdiv	r2, r3, r2
 803e4ee:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 803e4f2:	1a9b      	subs	r3, r3, r2
 803e4f4:	bf48      	it	mi
 803e4f6:	3307      	addmi	r3, #7
 803e4f8:	2800      	cmp	r0, #0
 803e4fa:	61a3      	str	r3, [r4, #24]
 803e4fc:	bfb8      	it	lt
 803e4fe:	f5a0 330e 	sublt.w	r3, r0, #145408	@ 0x23800
 803e502:	4936      	ldr	r1, [pc, #216]	@ (803e5dc <gmtime_r+0x140>)
 803e504:	bfae      	itee	ge
 803e506:	fb90 f1f1 	sdivge	r1, r0, r1
 803e50a:	f5a3 732c 	sublt.w	r3, r3, #688	@ 0x2b0
 803e50e:	fb93 f1f1 	sdivlt	r1, r3, r1
 803e512:	4b33      	ldr	r3, [pc, #204]	@ (803e5e0 <gmtime_r+0x144>)
 803e514:	fb03 0001 	mla	r0, r3, r1, r0
 803e518:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 803e51c:	fbb0 f3f3 	udiv	r3, r0, r3
 803e520:	4403      	add	r3, r0
 803e522:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 803e526:	fbb0 f2fc 	udiv	r2, r0, ip
 803e52a:	1a9b      	subs	r3, r3, r2
 803e52c:	f240 176d 	movw	r7, #365	@ 0x16d
 803e530:	4a2c      	ldr	r2, [pc, #176]	@ (803e5e4 <gmtime_r+0x148>)
 803e532:	fbb0 f2f2 	udiv	r2, r0, r2
 803e536:	2664      	movs	r6, #100	@ 0x64
 803e538:	1a9b      	subs	r3, r3, r2
 803e53a:	fbb3 f2f7 	udiv	r2, r3, r7
 803e53e:	fbb3 f3fc 	udiv	r3, r3, ip
 803e542:	fbb2 f5f6 	udiv	r5, r2, r6
 803e546:	1aeb      	subs	r3, r5, r3
 803e548:	4403      	add	r3, r0
 803e54a:	fb07 3312 	mls	r3, r7, r2, r3
 803e54e:	2099      	movs	r0, #153	@ 0x99
 803e550:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 803e554:	3702      	adds	r7, #2
 803e556:	f103 0e01 	add.w	lr, r3, #1
 803e55a:	fbb7 fcf0 	udiv	ip, r7, r0
 803e55e:	fb00 f00c 	mul.w	r0, r0, ip
 803e562:	3002      	adds	r0, #2
 803e564:	f04f 0805 	mov.w	r8, #5
 803e568:	fbb0 f0f8 	udiv	r0, r0, r8
 803e56c:	ebae 0000 	sub.w	r0, lr, r0
 803e570:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 803e574:	4577      	cmp	r7, lr
 803e576:	bf8c      	ite	hi
 803e578:	f06f 0709 	mvnhi.w	r7, #9
 803e57c:	2702      	movls	r7, #2
 803e57e:	4467      	add	r7, ip
 803e580:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 803e584:	fb0c 2101 	mla	r1, ip, r1, r2
 803e588:	2f01      	cmp	r7, #1
 803e58a:	bf98      	it	ls
 803e58c:	3101      	addls	r1, #1
 803e58e:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 803e592:	d30c      	bcc.n	803e5ae <gmtime_r+0x112>
 803e594:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 803e598:	61e3      	str	r3, [r4, #28]
 803e59a:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 803e59e:	2300      	movs	r3, #0
 803e5a0:	60e0      	str	r0, [r4, #12]
 803e5a2:	e9c4 7104 	strd	r7, r1, [r4, #16]
 803e5a6:	6223      	str	r3, [r4, #32]
 803e5a8:	4620      	mov	r0, r4
 803e5aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803e5ae:	f012 0f03 	tst.w	r2, #3
 803e5b2:	d102      	bne.n	803e5ba <gmtime_r+0x11e>
 803e5b4:	fb06 2515 	mls	r5, r6, r5, r2
 803e5b8:	b95d      	cbnz	r5, 803e5d2 <gmtime_r+0x136>
 803e5ba:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 803e5be:	fbb2 f6f5 	udiv	r6, r2, r5
 803e5c2:	fb05 2216 	mls	r2, r5, r6, r2
 803e5c6:	fab2 f282 	clz	r2, r2
 803e5ca:	0952      	lsrs	r2, r2, #5
 803e5cc:	333b      	adds	r3, #59	@ 0x3b
 803e5ce:	4413      	add	r3, r2
 803e5d0:	e7e2      	b.n	803e598 <gmtime_r+0xfc>
 803e5d2:	2201      	movs	r2, #1
 803e5d4:	e7fa      	b.n	803e5cc <gmtime_r+0x130>
 803e5d6:	bf00      	nop
 803e5d8:	00015180 	.word	0x00015180
 803e5dc:	00023ab1 	.word	0x00023ab1
 803e5e0:	fffdc54f 	.word	0xfffdc54f
 803e5e4:	00023ab0 	.word	0x00023ab0

0803e5e8 <_fstat_r>:
 803e5e8:	b538      	push	{r3, r4, r5, lr}
 803e5ea:	4d07      	ldr	r5, [pc, #28]	@ (803e608 <_fstat_r+0x20>)
 803e5ec:	2300      	movs	r3, #0
 803e5ee:	4604      	mov	r4, r0
 803e5f0:	4608      	mov	r0, r1
 803e5f2:	4611      	mov	r1, r2
 803e5f4:	602b      	str	r3, [r5, #0]
 803e5f6:	f7d4 f915 	bl	8012824 <_fstat>
 803e5fa:	1c43      	adds	r3, r0, #1
 803e5fc:	d102      	bne.n	803e604 <_fstat_r+0x1c>
 803e5fe:	682b      	ldr	r3, [r5, #0]
 803e600:	b103      	cbz	r3, 803e604 <_fstat_r+0x1c>
 803e602:	6023      	str	r3, [r4, #0]
 803e604:	bd38      	pop	{r3, r4, r5, pc}
 803e606:	bf00      	nop
 803e608:	200182d8 	.word	0x200182d8

0803e60c <_isatty_r>:
 803e60c:	b538      	push	{r3, r4, r5, lr}
 803e60e:	4d06      	ldr	r5, [pc, #24]	@ (803e628 <_isatty_r+0x1c>)
 803e610:	2300      	movs	r3, #0
 803e612:	4604      	mov	r4, r0
 803e614:	4608      	mov	r0, r1
 803e616:	602b      	str	r3, [r5, #0]
 803e618:	f7d4 f914 	bl	8012844 <_isatty>
 803e61c:	1c43      	adds	r3, r0, #1
 803e61e:	d102      	bne.n	803e626 <_isatty_r+0x1a>
 803e620:	682b      	ldr	r3, [r5, #0]
 803e622:	b103      	cbz	r3, 803e626 <_isatty_r+0x1a>
 803e624:	6023      	str	r3, [r4, #0]
 803e626:	bd38      	pop	{r3, r4, r5, pc}
 803e628:	200182d8 	.word	0x200182d8

0803e62c <_kill_r>:
 803e62c:	b538      	push	{r3, r4, r5, lr}
 803e62e:	4d07      	ldr	r5, [pc, #28]	@ (803e64c <_kill_r+0x20>)
 803e630:	2300      	movs	r3, #0
 803e632:	4604      	mov	r4, r0
 803e634:	4608      	mov	r0, r1
 803e636:	4611      	mov	r1, r2
 803e638:	602b      	str	r3, [r5, #0]
 803e63a:	f7d4 f893 	bl	8012764 <_kill>
 803e63e:	1c43      	adds	r3, r0, #1
 803e640:	d102      	bne.n	803e648 <_kill_r+0x1c>
 803e642:	682b      	ldr	r3, [r5, #0]
 803e644:	b103      	cbz	r3, 803e648 <_kill_r+0x1c>
 803e646:	6023      	str	r3, [r4, #0]
 803e648:	bd38      	pop	{r3, r4, r5, pc}
 803e64a:	bf00      	nop
 803e64c:	200182d8 	.word	0x200182d8

0803e650 <_getpid_r>:
 803e650:	f7d4 b880 	b.w	8012754 <_getpid>

0803e654 <_sbrk_r>:
 803e654:	b538      	push	{r3, r4, r5, lr}
 803e656:	4d06      	ldr	r5, [pc, #24]	@ (803e670 <_sbrk_r+0x1c>)
 803e658:	2300      	movs	r3, #0
 803e65a:	4604      	mov	r4, r0
 803e65c:	4608      	mov	r0, r1
 803e65e:	602b      	str	r3, [r5, #0]
 803e660:	f7d4 f908 	bl	8012874 <_sbrk>
 803e664:	1c43      	adds	r3, r0, #1
 803e666:	d102      	bne.n	803e66e <_sbrk_r+0x1a>
 803e668:	682b      	ldr	r3, [r5, #0]
 803e66a:	b103      	cbz	r3, 803e66e <_sbrk_r+0x1a>
 803e66c:	6023      	str	r3, [r4, #0]
 803e66e:	bd38      	pop	{r3, r4, r5, pc}
 803e670:	200182d8 	.word	0x200182d8

0803e674 <sysconf>:
 803e674:	2808      	cmp	r0, #8
 803e676:	b508      	push	{r3, lr}
 803e678:	d006      	beq.n	803e688 <sysconf+0x14>
 803e67a:	f7f8 fdbd 	bl	80371f8 <__errno>
 803e67e:	2316      	movs	r3, #22
 803e680:	6003      	str	r3, [r0, #0]
 803e682:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 803e686:	bd08      	pop	{r3, pc}
 803e688:	2080      	movs	r0, #128	@ 0x80
 803e68a:	e7fc      	b.n	803e686 <sysconf+0x12>

0803e68c <_strtoll_l.constprop.0>:
 803e68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803e690:	b085      	sub	sp, #20
 803e692:	4690      	mov	r8, r2
 803e694:	4a43      	ldr	r2, [pc, #268]	@ (803e7a4 <_strtoll_l.constprop.0+0x118>)
 803e696:	9002      	str	r0, [sp, #8]
 803e698:	4689      	mov	r9, r1
 803e69a:	461e      	mov	r6, r3
 803e69c:	460d      	mov	r5, r1
 803e69e:	462b      	mov	r3, r5
 803e6a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 803e6a4:	5d17      	ldrb	r7, [r2, r4]
 803e6a6:	f017 0708 	ands.w	r7, r7, #8
 803e6aa:	d1f8      	bne.n	803e69e <_strtoll_l.constprop.0+0x12>
 803e6ac:	2c2d      	cmp	r4, #45	@ 0x2d
 803e6ae:	d149      	bne.n	803e744 <_strtoll_l.constprop.0+0xb8>
 803e6b0:	782c      	ldrb	r4, [r5, #0]
 803e6b2:	2701      	movs	r7, #1
 803e6b4:	1c9d      	adds	r5, r3, #2
 803e6b6:	f036 0310 	bics.w	r3, r6, #16
 803e6ba:	d109      	bne.n	803e6d0 <_strtoll_l.constprop.0+0x44>
 803e6bc:	2c30      	cmp	r4, #48	@ 0x30
 803e6be:	d146      	bne.n	803e74e <_strtoll_l.constprop.0+0xc2>
 803e6c0:	782b      	ldrb	r3, [r5, #0]
 803e6c2:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 803e6c6:	2b58      	cmp	r3, #88	@ 0x58
 803e6c8:	d141      	bne.n	803e74e <_strtoll_l.constprop.0+0xc2>
 803e6ca:	786c      	ldrb	r4, [r5, #1]
 803e6cc:	2610      	movs	r6, #16
 803e6ce:	3502      	adds	r5, #2
 803e6d0:	f107 4a00 	add.w	sl, r7, #2147483648	@ 0x80000000
 803e6d4:	f107 3bff 	add.w	fp, r7, #4294967295	@ 0xffffffff
 803e6d8:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 803e6dc:	17f3      	asrs	r3, r6, #31
 803e6de:	4632      	mov	r2, r6
 803e6e0:	4658      	mov	r0, fp
 803e6e2:	4651      	mov	r1, sl
 803e6e4:	9303      	str	r3, [sp, #12]
 803e6e6:	f7d2 fb37 	bl	8010d58 <__aeabi_uldivmod>
 803e6ea:	9201      	str	r2, [sp, #4]
 803e6ec:	2200      	movs	r2, #0
 803e6ee:	468e      	mov	lr, r1
 803e6f0:	4684      	mov	ip, r0
 803e6f2:	4611      	mov	r1, r2
 803e6f4:	4610      	mov	r0, r2
 803e6f6:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 803e6fa:	2b09      	cmp	r3, #9
 803e6fc:	d905      	bls.n	803e70a <_strtoll_l.constprop.0+0x7e>
 803e6fe:	f1a4 0341 	sub.w	r3, r4, #65	@ 0x41
 803e702:	2b19      	cmp	r3, #25
 803e704:	d82a      	bhi.n	803e75c <_strtoll_l.constprop.0+0xd0>
 803e706:	f1a4 0337 	sub.w	r3, r4, #55	@ 0x37
 803e70a:	429e      	cmp	r6, r3
 803e70c:	dd30      	ble.n	803e770 <_strtoll_l.constprop.0+0xe4>
 803e70e:	1c54      	adds	r4, r2, #1
 803e710:	d015      	beq.n	803e73e <_strtoll_l.constprop.0+0xb2>
 803e712:	4584      	cmp	ip, r0
 803e714:	eb7e 0201 	sbcs.w	r2, lr, r1
 803e718:	d327      	bcc.n	803e76a <_strtoll_l.constprop.0+0xde>
 803e71a:	458e      	cmp	lr, r1
 803e71c:	bf08      	it	eq
 803e71e:	4584      	cmpeq	ip, r0
 803e720:	d102      	bne.n	803e728 <_strtoll_l.constprop.0+0x9c>
 803e722:	9a01      	ldr	r2, [sp, #4]
 803e724:	429a      	cmp	r2, r3
 803e726:	db20      	blt.n	803e76a <_strtoll_l.constprop.0+0xde>
 803e728:	9a03      	ldr	r2, [sp, #12]
 803e72a:	4371      	muls	r1, r6
 803e72c:	fb00 1102 	mla	r1, r0, r2, r1
 803e730:	fba6 0200 	umull	r0, r2, r6, r0
 803e734:	440a      	add	r2, r1
 803e736:	1818      	adds	r0, r3, r0
 803e738:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
 803e73c:	2201      	movs	r2, #1
 803e73e:	f815 4b01 	ldrb.w	r4, [r5], #1
 803e742:	e7d8      	b.n	803e6f6 <_strtoll_l.constprop.0+0x6a>
 803e744:	2c2b      	cmp	r4, #43	@ 0x2b
 803e746:	bf04      	itt	eq
 803e748:	782c      	ldrbeq	r4, [r5, #0]
 803e74a:	1c9d      	addeq	r5, r3, #2
 803e74c:	e7b3      	b.n	803e6b6 <_strtoll_l.constprop.0+0x2a>
 803e74e:	2e00      	cmp	r6, #0
 803e750:	d1be      	bne.n	803e6d0 <_strtoll_l.constprop.0+0x44>
 803e752:	2c30      	cmp	r4, #48	@ 0x30
 803e754:	bf0c      	ite	eq
 803e756:	2608      	moveq	r6, #8
 803e758:	260a      	movne	r6, #10
 803e75a:	e7b9      	b.n	803e6d0 <_strtoll_l.constprop.0+0x44>
 803e75c:	f1a4 0361 	sub.w	r3, r4, #97	@ 0x61
 803e760:	2b19      	cmp	r3, #25
 803e762:	d805      	bhi.n	803e770 <_strtoll_l.constprop.0+0xe4>
 803e764:	f1a4 0357 	sub.w	r3, r4, #87	@ 0x57
 803e768:	e7cf      	b.n	803e70a <_strtoll_l.constprop.0+0x7e>
 803e76a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 803e76e:	e7e6      	b.n	803e73e <_strtoll_l.constprop.0+0xb2>
 803e770:	1c53      	adds	r3, r2, #1
 803e772:	d10a      	bne.n	803e78a <_strtoll_l.constprop.0+0xfe>
 803e774:	9a02      	ldr	r2, [sp, #8]
 803e776:	2322      	movs	r3, #34	@ 0x22
 803e778:	6013      	str	r3, [r2, #0]
 803e77a:	4658      	mov	r0, fp
 803e77c:	4651      	mov	r1, sl
 803e77e:	f1b8 0f00 	cmp.w	r8, #0
 803e782:	d10a      	bne.n	803e79a <_strtoll_l.constprop.0+0x10e>
 803e784:	b005      	add	sp, #20
 803e786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803e78a:	b117      	cbz	r7, 803e792 <_strtoll_l.constprop.0+0x106>
 803e78c:	4240      	negs	r0, r0
 803e78e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 803e792:	f1b8 0f00 	cmp.w	r8, #0
 803e796:	d0f5      	beq.n	803e784 <_strtoll_l.constprop.0+0xf8>
 803e798:	b10a      	cbz	r2, 803e79e <_strtoll_l.constprop.0+0x112>
 803e79a:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 803e79e:	f8c8 9000 	str.w	r9, [r8]
 803e7a2:	e7ef      	b.n	803e784 <_strtoll_l.constprop.0+0xf8>
 803e7a4:	08044b59 	.word	0x08044b59

0803e7a8 <_strtoll_r>:
 803e7a8:	f7ff bf70 	b.w	803e68c <_strtoll_l.constprop.0>

0803e7ac <__libc_fini_array>:
 803e7ac:	b538      	push	{r3, r4, r5, lr}
 803e7ae:	4d07      	ldr	r5, [pc, #28]	@ (803e7cc <__libc_fini_array+0x20>)
 803e7b0:	4c07      	ldr	r4, [pc, #28]	@ (803e7d0 <__libc_fini_array+0x24>)
 803e7b2:	1b64      	subs	r4, r4, r5
 803e7b4:	10a4      	asrs	r4, r4, #2
 803e7b6:	b91c      	cbnz	r4, 803e7c0 <__libc_fini_array+0x14>
 803e7b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 803e7bc:	f000 bc9c 	b.w	803f0f8 <_fini>
 803e7c0:	3c01      	subs	r4, #1
 803e7c2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 803e7c6:	4798      	blx	r3
 803e7c8:	e7f5      	b.n	803e7b6 <__libc_fini_array+0xa>
 803e7ca:	bf00      	nop
 803e7cc:	08044f70 	.word	0x08044f70
 803e7d0:	08044f74 	.word	0x08044f74

0803e7d4 <_strtoull_l.constprop.0>:
 803e7d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803e7d8:	4691      	mov	r9, r2
 803e7da:	4a48      	ldr	r2, [pc, #288]	@ (803e8fc <_strtoull_l.constprop.0+0x128>)
 803e7dc:	9001      	str	r0, [sp, #4]
 803e7de:	468a      	mov	sl, r1
 803e7e0:	461e      	mov	r6, r3
 803e7e2:	460d      	mov	r5, r1
 803e7e4:	462b      	mov	r3, r5
 803e7e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 803e7ea:	5d17      	ldrb	r7, [r2, r4]
 803e7ec:	f017 0708 	ands.w	r7, r7, #8
 803e7f0:	d1f8      	bne.n	803e7e4 <_strtoull_l.constprop.0+0x10>
 803e7f2:	2c2d      	cmp	r4, #45	@ 0x2d
 803e7f4:	d14a      	bne.n	803e88c <_strtoull_l.constprop.0+0xb8>
 803e7f6:	782c      	ldrb	r4, [r5, #0]
 803e7f8:	2701      	movs	r7, #1
 803e7fa:	1c9d      	adds	r5, r3, #2
 803e7fc:	f036 0310 	bics.w	r3, r6, #16
 803e800:	d109      	bne.n	803e816 <_strtoull_l.constprop.0+0x42>
 803e802:	2c30      	cmp	r4, #48	@ 0x30
 803e804:	d147      	bne.n	803e896 <_strtoull_l.constprop.0+0xc2>
 803e806:	782b      	ldrb	r3, [r5, #0]
 803e808:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 803e80c:	2b58      	cmp	r3, #88	@ 0x58
 803e80e:	d142      	bne.n	803e896 <_strtoull_l.constprop.0+0xc2>
 803e810:	786c      	ldrb	r4, [r5, #1]
 803e812:	2610      	movs	r6, #16
 803e814:	3502      	adds	r5, #2
 803e816:	ea4f 7be6 	mov.w	fp, r6, asr #31
 803e81a:	4632      	mov	r2, r6
 803e81c:	465b      	mov	r3, fp
 803e81e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 803e822:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 803e826:	f7d2 fa97 	bl	8010d58 <__aeabi_uldivmod>
 803e82a:	4632      	mov	r2, r6
 803e82c:	9000      	str	r0, [sp, #0]
 803e82e:	4688      	mov	r8, r1
 803e830:	465b      	mov	r3, fp
 803e832:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 803e836:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 803e83a:	f7d2 fa8d 	bl	8010d58 <__aeabi_uldivmod>
 803e83e:	2300      	movs	r3, #0
 803e840:	4618      	mov	r0, r3
 803e842:	4619      	mov	r1, r3
 803e844:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 803e848:	f1bc 0f09 	cmp.w	ip, #9
 803e84c:	d82a      	bhi.n	803e8a4 <_strtoull_l.constprop.0+0xd0>
 803e84e:	4664      	mov	r4, ip
 803e850:	42a6      	cmp	r6, r4
 803e852:	dd38      	ble.n	803e8c6 <_strtoull_l.constprop.0+0xf2>
 803e854:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 803e858:	d015      	beq.n	803e886 <_strtoull_l.constprop.0+0xb2>
 803e85a:	9b00      	ldr	r3, [sp, #0]
 803e85c:	4283      	cmp	r3, r0
 803e85e:	eb78 0301 	sbcs.w	r3, r8, r1
 803e862:	d32d      	bcc.n	803e8c0 <_strtoull_l.constprop.0+0xec>
 803e864:	9b00      	ldr	r3, [sp, #0]
 803e866:	4588      	cmp	r8, r1
 803e868:	bf08      	it	eq
 803e86a:	4283      	cmpeq	r3, r0
 803e86c:	d101      	bne.n	803e872 <_strtoull_l.constprop.0+0x9e>
 803e86e:	42a2      	cmp	r2, r4
 803e870:	db26      	blt.n	803e8c0 <_strtoull_l.constprop.0+0xec>
 803e872:	4371      	muls	r1, r6
 803e874:	fb00 110b 	mla	r1, r0, fp, r1
 803e878:	fba6 0300 	umull	r0, r3, r6, r0
 803e87c:	4419      	add	r1, r3
 803e87e:	1820      	adds	r0, r4, r0
 803e880:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 803e884:	2301      	movs	r3, #1
 803e886:	f815 4b01 	ldrb.w	r4, [r5], #1
 803e88a:	e7db      	b.n	803e844 <_strtoull_l.constprop.0+0x70>
 803e88c:	2c2b      	cmp	r4, #43	@ 0x2b
 803e88e:	bf04      	itt	eq
 803e890:	782c      	ldrbeq	r4, [r5, #0]
 803e892:	1c9d      	addeq	r5, r3, #2
 803e894:	e7b2      	b.n	803e7fc <_strtoull_l.constprop.0+0x28>
 803e896:	2e00      	cmp	r6, #0
 803e898:	d1bd      	bne.n	803e816 <_strtoull_l.constprop.0+0x42>
 803e89a:	2c30      	cmp	r4, #48	@ 0x30
 803e89c:	bf0c      	ite	eq
 803e89e:	2608      	moveq	r6, #8
 803e8a0:	260a      	movne	r6, #10
 803e8a2:	e7b8      	b.n	803e816 <_strtoull_l.constprop.0+0x42>
 803e8a4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 803e8a8:	f1bc 0f19 	cmp.w	ip, #25
 803e8ac:	d801      	bhi.n	803e8b2 <_strtoull_l.constprop.0+0xde>
 803e8ae:	3c37      	subs	r4, #55	@ 0x37
 803e8b0:	e7ce      	b.n	803e850 <_strtoull_l.constprop.0+0x7c>
 803e8b2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 803e8b6:	f1bc 0f19 	cmp.w	ip, #25
 803e8ba:	d804      	bhi.n	803e8c6 <_strtoull_l.constprop.0+0xf2>
 803e8bc:	3c57      	subs	r4, #87	@ 0x57
 803e8be:	e7c7      	b.n	803e850 <_strtoull_l.constprop.0+0x7c>
 803e8c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803e8c4:	e7df      	b.n	803e886 <_strtoull_l.constprop.0+0xb2>
 803e8c6:	1c5a      	adds	r2, r3, #1
 803e8c8:	d10a      	bne.n	803e8e0 <_strtoull_l.constprop.0+0x10c>
 803e8ca:	9901      	ldr	r1, [sp, #4]
 803e8cc:	2222      	movs	r2, #34	@ 0x22
 803e8ce:	600a      	str	r2, [r1, #0]
 803e8d0:	4618      	mov	r0, r3
 803e8d2:	4619      	mov	r1, r3
 803e8d4:	f1b9 0f00 	cmp.w	r9, #0
 803e8d8:	d10a      	bne.n	803e8f0 <_strtoull_l.constprop.0+0x11c>
 803e8da:	b003      	add	sp, #12
 803e8dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803e8e0:	b117      	cbz	r7, 803e8e8 <_strtoull_l.constprop.0+0x114>
 803e8e2:	4240      	negs	r0, r0
 803e8e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 803e8e8:	f1b9 0f00 	cmp.w	r9, #0
 803e8ec:	d0f5      	beq.n	803e8da <_strtoull_l.constprop.0+0x106>
 803e8ee:	b10b      	cbz	r3, 803e8f4 <_strtoull_l.constprop.0+0x120>
 803e8f0:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 803e8f4:	f8c9 a000 	str.w	sl, [r9]
 803e8f8:	e7ef      	b.n	803e8da <_strtoull_l.constprop.0+0x106>
 803e8fa:	bf00      	nop
 803e8fc:	08044b59 	.word	0x08044b59

0803e900 <_strtoull_r>:
 803e900:	f7ff bf68 	b.w	803e7d4 <_strtoull_l.constprop.0>

0803e904 <_mbrtowc_r>:
 803e904:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 803e906:	4c0a      	ldr	r4, [pc, #40]	@ (803e930 <_mbrtowc_r+0x2c>)
 803e908:	9e08      	ldr	r6, [sp, #32]
 803e90a:	f8d4 70e4 	ldr.w	r7, [r4, #228]	@ 0xe4
 803e90e:	9600      	str	r6, [sp, #0]
 803e910:	4605      	mov	r5, r0
 803e912:	4614      	mov	r4, r2
 803e914:	b912      	cbnz	r2, 803e91c <_mbrtowc_r+0x18>
 803e916:	4a07      	ldr	r2, [pc, #28]	@ (803e934 <_mbrtowc_r+0x30>)
 803e918:	2301      	movs	r3, #1
 803e91a:	4621      	mov	r1, r4
 803e91c:	47b8      	blx	r7
 803e91e:	1c43      	adds	r3, r0, #1
 803e920:	bf01      	itttt	eq
 803e922:	2300      	moveq	r3, #0
 803e924:	6033      	streq	r3, [r6, #0]
 803e926:	238a      	moveq	r3, #138	@ 0x8a
 803e928:	602b      	streq	r3, [r5, #0]
 803e92a:	b003      	add	sp, #12
 803e92c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 803e92e:	bf00      	nop
 803e930:	200002c4 	.word	0x200002c4
 803e934:	0804479b 	.word	0x0804479b

0803e938 <iswspace>:
 803e938:	2100      	movs	r1, #0
 803e93a:	f000 b801 	b.w	803e940 <iswspace_l>
	...

0803e940 <iswspace_l>:
 803e940:	28ff      	cmp	r0, #255	@ 0xff
 803e942:	bf9d      	ittte	ls
 803e944:	4b02      	ldrls	r3, [pc, #8]	@ (803e950 <iswspace_l+0x10>)
 803e946:	5c18      	ldrbls	r0, [r3, r0]
 803e948:	f000 0008 	andls.w	r0, r0, #8
 803e94c:	2000      	movhi	r0, #0
 803e94e:	4770      	bx	lr
 803e950:	08044b59 	.word	0x08044b59

0803e954 <__register_exitproc>:
 803e954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803e958:	f8df a074 	ldr.w	sl, [pc, #116]	@ 803e9d0 <__register_exitproc+0x7c>
 803e95c:	4606      	mov	r6, r0
 803e95e:	f8da 0000 	ldr.w	r0, [sl]
 803e962:	4698      	mov	r8, r3
 803e964:	460f      	mov	r7, r1
 803e966:	4691      	mov	r9, r2
 803e968:	f7f8 fc7b 	bl	8037262 <__retarget_lock_acquire_recursive>
 803e96c:	4b16      	ldr	r3, [pc, #88]	@ (803e9c8 <__register_exitproc+0x74>)
 803e96e:	681c      	ldr	r4, [r3, #0]
 803e970:	b90c      	cbnz	r4, 803e976 <__register_exitproc+0x22>
 803e972:	4c16      	ldr	r4, [pc, #88]	@ (803e9cc <__register_exitproc+0x78>)
 803e974:	601c      	str	r4, [r3, #0]
 803e976:	6865      	ldr	r5, [r4, #4]
 803e978:	f8da 0000 	ldr.w	r0, [sl]
 803e97c:	2d1f      	cmp	r5, #31
 803e97e:	dd05      	ble.n	803e98c <__register_exitproc+0x38>
 803e980:	f7f8 fc71 	bl	8037266 <__retarget_lock_release_recursive>
 803e984:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 803e988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803e98c:	b19e      	cbz	r6, 803e9b6 <__register_exitproc+0x62>
 803e98e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 803e992:	2201      	movs	r2, #1
 803e994:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 803e998:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 803e99c:	40aa      	lsls	r2, r5
 803e99e:	4313      	orrs	r3, r2
 803e9a0:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 803e9a4:	2e02      	cmp	r6, #2
 803e9a6:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 803e9aa:	bf02      	ittt	eq
 803e9ac:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 803e9b0:	4313      	orreq	r3, r2
 803e9b2:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 803e9b6:	1c6b      	adds	r3, r5, #1
 803e9b8:	3502      	adds	r5, #2
 803e9ba:	6063      	str	r3, [r4, #4]
 803e9bc:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 803e9c0:	f7f8 fc51 	bl	8037266 <__retarget_lock_release_recursive>
 803e9c4:	2000      	movs	r0, #0
 803e9c6:	e7df      	b.n	803e988 <__register_exitproc+0x34>
 803e9c8:	200182e4 	.word	0x200182e4
 803e9cc:	2001831c 	.word	0x2001831c
 803e9d0:	20000558 	.word	0x20000558
 803e9d4:	00000000 	.word	0x00000000

0803e9d8 <nan>:
 803e9d8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 803e9e0 <nan+0x8>
 803e9dc:	4770      	bx	lr
 803e9de:	bf00      	nop
 803e9e0:	00000000 	.word	0x00000000
 803e9e4:	7ff80000 	.word	0x7ff80000

0803e9e8 <nanf>:
 803e9e8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 803e9f0 <nanf+0x8>
 803e9ec:	4770      	bx	lr
 803e9ee:	bf00      	nop
 803e9f0:	7fc00000 	.word	0x7fc00000

0803e9f4 <_calloc_r>:
 803e9f4:	b538      	push	{r3, r4, r5, lr}
 803e9f6:	fba1 1502 	umull	r1, r5, r1, r2
 803e9fa:	b935      	cbnz	r5, 803ea0a <_calloc_r+0x16>
 803e9fc:	f7f9 fc4e 	bl	803829c <_malloc_r>
 803ea00:	4604      	mov	r4, r0
 803ea02:	b938      	cbnz	r0, 803ea14 <_calloc_r+0x20>
 803ea04:	2400      	movs	r4, #0
 803ea06:	4620      	mov	r0, r4
 803ea08:	bd38      	pop	{r3, r4, r5, pc}
 803ea0a:	f7f8 fbf5 	bl	80371f8 <__errno>
 803ea0e:	230c      	movs	r3, #12
 803ea10:	6003      	str	r3, [r0, #0]
 803ea12:	e7f7      	b.n	803ea04 <_calloc_r+0x10>
 803ea14:	f850 2c04 	ldr.w	r2, [r0, #-4]
 803ea18:	f022 0203 	bic.w	r2, r2, #3
 803ea1c:	3a04      	subs	r2, #4
 803ea1e:	2a24      	cmp	r2, #36	@ 0x24
 803ea20:	d819      	bhi.n	803ea56 <_calloc_r+0x62>
 803ea22:	2a13      	cmp	r2, #19
 803ea24:	d915      	bls.n	803ea52 <_calloc_r+0x5e>
 803ea26:	2a1b      	cmp	r2, #27
 803ea28:	e9c0 5500 	strd	r5, r5, [r0]
 803ea2c:	d806      	bhi.n	803ea3c <_calloc_r+0x48>
 803ea2e:	f100 0308 	add.w	r3, r0, #8
 803ea32:	2200      	movs	r2, #0
 803ea34:	e9c3 2200 	strd	r2, r2, [r3]
 803ea38:	609a      	str	r2, [r3, #8]
 803ea3a:	e7e4      	b.n	803ea06 <_calloc_r+0x12>
 803ea3c:	2a24      	cmp	r2, #36	@ 0x24
 803ea3e:	e9c0 5502 	strd	r5, r5, [r0, #8]
 803ea42:	bf11      	iteee	ne
 803ea44:	f100 0310 	addne.w	r3, r0, #16
 803ea48:	6105      	streq	r5, [r0, #16]
 803ea4a:	f100 0318 	addeq.w	r3, r0, #24
 803ea4e:	6145      	streq	r5, [r0, #20]
 803ea50:	e7ef      	b.n	803ea32 <_calloc_r+0x3e>
 803ea52:	4603      	mov	r3, r0
 803ea54:	e7ed      	b.n	803ea32 <_calloc_r+0x3e>
 803ea56:	4629      	mov	r1, r5
 803ea58:	f7f7 f9ca 	bl	8035df0 <memset>
 803ea5c:	e7d3      	b.n	803ea06 <_calloc_r+0x12>
	...

0803ea60 <__env_lock>:
 803ea60:	4801      	ldr	r0, [pc, #4]	@ (803ea68 <__env_lock+0x8>)
 803ea62:	f7f8 bbfe 	b.w	8037262 <__retarget_lock_acquire_recursive>
 803ea66:	bf00      	nop
 803ea68:	200182dd 	.word	0x200182dd

0803ea6c <__env_unlock>:
 803ea6c:	4801      	ldr	r0, [pc, #4]	@ (803ea74 <__env_unlock+0x8>)
 803ea6e:	f7f8 bbfa 	b.w	8037266 <__retarget_lock_release_recursive>
 803ea72:	bf00      	nop
 803ea74:	200182dd 	.word	0x200182dd

0803ea78 <rshift>:
 803ea78:	6903      	ldr	r3, [r0, #16]
 803ea7a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 803ea7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 803ea82:	ea4f 1261 	mov.w	r2, r1, asr #5
 803ea86:	f100 0414 	add.w	r4, r0, #20
 803ea8a:	dd45      	ble.n	803eb18 <rshift+0xa0>
 803ea8c:	f011 011f 	ands.w	r1, r1, #31
 803ea90:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 803ea94:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 803ea98:	d10c      	bne.n	803eab4 <rshift+0x3c>
 803ea9a:	f100 0710 	add.w	r7, r0, #16
 803ea9e:	4629      	mov	r1, r5
 803eaa0:	42b1      	cmp	r1, r6
 803eaa2:	d334      	bcc.n	803eb0e <rshift+0x96>
 803eaa4:	1a9b      	subs	r3, r3, r2
 803eaa6:	009b      	lsls	r3, r3, #2
 803eaa8:	1eea      	subs	r2, r5, #3
 803eaaa:	4296      	cmp	r6, r2
 803eaac:	bf38      	it	cc
 803eaae:	2300      	movcc	r3, #0
 803eab0:	4423      	add	r3, r4
 803eab2:	e015      	b.n	803eae0 <rshift+0x68>
 803eab4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 803eab8:	f1c1 0820 	rsb	r8, r1, #32
 803eabc:	40cf      	lsrs	r7, r1
 803eabe:	f105 0e04 	add.w	lr, r5, #4
 803eac2:	46a1      	mov	r9, r4
 803eac4:	4576      	cmp	r6, lr
 803eac6:	46f4      	mov	ip, lr
 803eac8:	d815      	bhi.n	803eaf6 <rshift+0x7e>
 803eaca:	1a9a      	subs	r2, r3, r2
 803eacc:	0092      	lsls	r2, r2, #2
 803eace:	3a04      	subs	r2, #4
 803ead0:	3501      	adds	r5, #1
 803ead2:	42ae      	cmp	r6, r5
 803ead4:	bf38      	it	cc
 803ead6:	2200      	movcc	r2, #0
 803ead8:	18a3      	adds	r3, r4, r2
 803eada:	50a7      	str	r7, [r4, r2]
 803eadc:	b107      	cbz	r7, 803eae0 <rshift+0x68>
 803eade:	3304      	adds	r3, #4
 803eae0:	1b1a      	subs	r2, r3, r4
 803eae2:	42a3      	cmp	r3, r4
 803eae4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 803eae8:	bf08      	it	eq
 803eaea:	2300      	moveq	r3, #0
 803eaec:	6102      	str	r2, [r0, #16]
 803eaee:	bf08      	it	eq
 803eaf0:	6143      	streq	r3, [r0, #20]
 803eaf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 803eaf6:	f8dc c000 	ldr.w	ip, [ip]
 803eafa:	fa0c fc08 	lsl.w	ip, ip, r8
 803eafe:	ea4c 0707 	orr.w	r7, ip, r7
 803eb02:	f849 7b04 	str.w	r7, [r9], #4
 803eb06:	f85e 7b04 	ldr.w	r7, [lr], #4
 803eb0a:	40cf      	lsrs	r7, r1
 803eb0c:	e7da      	b.n	803eac4 <rshift+0x4c>
 803eb0e:	f851 cb04 	ldr.w	ip, [r1], #4
 803eb12:	f847 cf04 	str.w	ip, [r7, #4]!
 803eb16:	e7c3      	b.n	803eaa0 <rshift+0x28>
 803eb18:	4623      	mov	r3, r4
 803eb1a:	e7e1      	b.n	803eae0 <rshift+0x68>

0803eb1c <__hexdig_fun>:
 803eb1c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 803eb20:	2b09      	cmp	r3, #9
 803eb22:	d802      	bhi.n	803eb2a <__hexdig_fun+0xe>
 803eb24:	3820      	subs	r0, #32
 803eb26:	b2c0      	uxtb	r0, r0
 803eb28:	4770      	bx	lr
 803eb2a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 803eb2e:	2b05      	cmp	r3, #5
 803eb30:	d801      	bhi.n	803eb36 <__hexdig_fun+0x1a>
 803eb32:	3847      	subs	r0, #71	@ 0x47
 803eb34:	e7f7      	b.n	803eb26 <__hexdig_fun+0xa>
 803eb36:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 803eb3a:	2b05      	cmp	r3, #5
 803eb3c:	d801      	bhi.n	803eb42 <__hexdig_fun+0x26>
 803eb3e:	3827      	subs	r0, #39	@ 0x27
 803eb40:	e7f1      	b.n	803eb26 <__hexdig_fun+0xa>
 803eb42:	2000      	movs	r0, #0
 803eb44:	4770      	bx	lr
	...

0803eb48 <__gethex>:
 803eb48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803eb4c:	b085      	sub	sp, #20
 803eb4e:	468a      	mov	sl, r1
 803eb50:	9302      	str	r3, [sp, #8]
 803eb52:	680b      	ldr	r3, [r1, #0]
 803eb54:	9001      	str	r0, [sp, #4]
 803eb56:	4690      	mov	r8, r2
 803eb58:	1c9c      	adds	r4, r3, #2
 803eb5a:	46a1      	mov	r9, r4
 803eb5c:	f814 0b01 	ldrb.w	r0, [r4], #1
 803eb60:	2830      	cmp	r0, #48	@ 0x30
 803eb62:	d0fa      	beq.n	803eb5a <__gethex+0x12>
 803eb64:	eba9 0303 	sub.w	r3, r9, r3
 803eb68:	f1a3 0b02 	sub.w	fp, r3, #2
 803eb6c:	f7ff ffd6 	bl	803eb1c <__hexdig_fun>
 803eb70:	4605      	mov	r5, r0
 803eb72:	2800      	cmp	r0, #0
 803eb74:	d168      	bne.n	803ec48 <__gethex+0x100>
 803eb76:	49a0      	ldr	r1, [pc, #640]	@ (803edf8 <__gethex+0x2b0>)
 803eb78:	2201      	movs	r2, #1
 803eb7a:	4648      	mov	r0, r9
 803eb7c:	f7f7 f96d 	bl	8035e5a <strncmp>
 803eb80:	4607      	mov	r7, r0
 803eb82:	2800      	cmp	r0, #0
 803eb84:	d167      	bne.n	803ec56 <__gethex+0x10e>
 803eb86:	f899 0001 	ldrb.w	r0, [r9, #1]
 803eb8a:	4626      	mov	r6, r4
 803eb8c:	f7ff ffc6 	bl	803eb1c <__hexdig_fun>
 803eb90:	2800      	cmp	r0, #0
 803eb92:	d062      	beq.n	803ec5a <__gethex+0x112>
 803eb94:	4623      	mov	r3, r4
 803eb96:	7818      	ldrb	r0, [r3, #0]
 803eb98:	2830      	cmp	r0, #48	@ 0x30
 803eb9a:	4699      	mov	r9, r3
 803eb9c:	f103 0301 	add.w	r3, r3, #1
 803eba0:	d0f9      	beq.n	803eb96 <__gethex+0x4e>
 803eba2:	f7ff ffbb 	bl	803eb1c <__hexdig_fun>
 803eba6:	fab0 f580 	clz	r5, r0
 803ebaa:	096d      	lsrs	r5, r5, #5
 803ebac:	f04f 0b01 	mov.w	fp, #1
 803ebb0:	464a      	mov	r2, r9
 803ebb2:	4616      	mov	r6, r2
 803ebb4:	3201      	adds	r2, #1
 803ebb6:	7830      	ldrb	r0, [r6, #0]
 803ebb8:	f7ff ffb0 	bl	803eb1c <__hexdig_fun>
 803ebbc:	2800      	cmp	r0, #0
 803ebbe:	d1f8      	bne.n	803ebb2 <__gethex+0x6a>
 803ebc0:	498d      	ldr	r1, [pc, #564]	@ (803edf8 <__gethex+0x2b0>)
 803ebc2:	2201      	movs	r2, #1
 803ebc4:	4630      	mov	r0, r6
 803ebc6:	f7f7 f948 	bl	8035e5a <strncmp>
 803ebca:	2800      	cmp	r0, #0
 803ebcc:	d13f      	bne.n	803ec4e <__gethex+0x106>
 803ebce:	b944      	cbnz	r4, 803ebe2 <__gethex+0x9a>
 803ebd0:	1c74      	adds	r4, r6, #1
 803ebd2:	4622      	mov	r2, r4
 803ebd4:	4616      	mov	r6, r2
 803ebd6:	3201      	adds	r2, #1
 803ebd8:	7830      	ldrb	r0, [r6, #0]
 803ebda:	f7ff ff9f 	bl	803eb1c <__hexdig_fun>
 803ebde:	2800      	cmp	r0, #0
 803ebe0:	d1f8      	bne.n	803ebd4 <__gethex+0x8c>
 803ebe2:	1ba4      	subs	r4, r4, r6
 803ebe4:	00a7      	lsls	r7, r4, #2
 803ebe6:	7833      	ldrb	r3, [r6, #0]
 803ebe8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 803ebec:	2b50      	cmp	r3, #80	@ 0x50
 803ebee:	d13e      	bne.n	803ec6e <__gethex+0x126>
 803ebf0:	7873      	ldrb	r3, [r6, #1]
 803ebf2:	2b2b      	cmp	r3, #43	@ 0x2b
 803ebf4:	d033      	beq.n	803ec5e <__gethex+0x116>
 803ebf6:	2b2d      	cmp	r3, #45	@ 0x2d
 803ebf8:	d034      	beq.n	803ec64 <__gethex+0x11c>
 803ebfa:	1c71      	adds	r1, r6, #1
 803ebfc:	2400      	movs	r4, #0
 803ebfe:	7808      	ldrb	r0, [r1, #0]
 803ec00:	f7ff ff8c 	bl	803eb1c <__hexdig_fun>
 803ec04:	1e43      	subs	r3, r0, #1
 803ec06:	b2db      	uxtb	r3, r3
 803ec08:	2b18      	cmp	r3, #24
 803ec0a:	d830      	bhi.n	803ec6e <__gethex+0x126>
 803ec0c:	f1a0 0210 	sub.w	r2, r0, #16
 803ec10:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 803ec14:	f7ff ff82 	bl	803eb1c <__hexdig_fun>
 803ec18:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 803ec1c:	fa5f fc8c 	uxtb.w	ip, ip
 803ec20:	f1bc 0f18 	cmp.w	ip, #24
 803ec24:	f04f 030a 	mov.w	r3, #10
 803ec28:	d91e      	bls.n	803ec68 <__gethex+0x120>
 803ec2a:	b104      	cbz	r4, 803ec2e <__gethex+0xe6>
 803ec2c:	4252      	negs	r2, r2
 803ec2e:	4417      	add	r7, r2
 803ec30:	f8ca 1000 	str.w	r1, [sl]
 803ec34:	b1ed      	cbz	r5, 803ec72 <__gethex+0x12a>
 803ec36:	f1bb 0f00 	cmp.w	fp, #0
 803ec3a:	bf0c      	ite	eq
 803ec3c:	2506      	moveq	r5, #6
 803ec3e:	2500      	movne	r5, #0
 803ec40:	4628      	mov	r0, r5
 803ec42:	b005      	add	sp, #20
 803ec44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803ec48:	2500      	movs	r5, #0
 803ec4a:	462c      	mov	r4, r5
 803ec4c:	e7b0      	b.n	803ebb0 <__gethex+0x68>
 803ec4e:	2c00      	cmp	r4, #0
 803ec50:	d1c7      	bne.n	803ebe2 <__gethex+0x9a>
 803ec52:	4627      	mov	r7, r4
 803ec54:	e7c7      	b.n	803ebe6 <__gethex+0x9e>
 803ec56:	464e      	mov	r6, r9
 803ec58:	462f      	mov	r7, r5
 803ec5a:	2501      	movs	r5, #1
 803ec5c:	e7c3      	b.n	803ebe6 <__gethex+0x9e>
 803ec5e:	2400      	movs	r4, #0
 803ec60:	1cb1      	adds	r1, r6, #2
 803ec62:	e7cc      	b.n	803ebfe <__gethex+0xb6>
 803ec64:	2401      	movs	r4, #1
 803ec66:	e7fb      	b.n	803ec60 <__gethex+0x118>
 803ec68:	fb03 0002 	mla	r0, r3, r2, r0
 803ec6c:	e7ce      	b.n	803ec0c <__gethex+0xc4>
 803ec6e:	4631      	mov	r1, r6
 803ec70:	e7de      	b.n	803ec30 <__gethex+0xe8>
 803ec72:	eba6 0309 	sub.w	r3, r6, r9
 803ec76:	3b01      	subs	r3, #1
 803ec78:	4629      	mov	r1, r5
 803ec7a:	2b07      	cmp	r3, #7
 803ec7c:	dc0a      	bgt.n	803ec94 <__gethex+0x14c>
 803ec7e:	9801      	ldr	r0, [sp, #4]
 803ec80:	f7fd fe22 	bl	803c8c8 <_Balloc>
 803ec84:	4604      	mov	r4, r0
 803ec86:	b940      	cbnz	r0, 803ec9a <__gethex+0x152>
 803ec88:	4b5c      	ldr	r3, [pc, #368]	@ (803edfc <__gethex+0x2b4>)
 803ec8a:	4602      	mov	r2, r0
 803ec8c:	21e4      	movs	r1, #228	@ 0xe4
 803ec8e:	485c      	ldr	r0, [pc, #368]	@ (803ee00 <__gethex+0x2b8>)
 803ec90:	f7f4 fb5a 	bl	8033348 <__assert_func>
 803ec94:	3101      	adds	r1, #1
 803ec96:	105b      	asrs	r3, r3, #1
 803ec98:	e7ef      	b.n	803ec7a <__gethex+0x132>
 803ec9a:	f100 0a14 	add.w	sl, r0, #20
 803ec9e:	2300      	movs	r3, #0
 803eca0:	4655      	mov	r5, sl
 803eca2:	469b      	mov	fp, r3
 803eca4:	45b1      	cmp	r9, r6
 803eca6:	d337      	bcc.n	803ed18 <__gethex+0x1d0>
 803eca8:	f845 bb04 	str.w	fp, [r5], #4
 803ecac:	eba5 050a 	sub.w	r5, r5, sl
 803ecb0:	10ad      	asrs	r5, r5, #2
 803ecb2:	6125      	str	r5, [r4, #16]
 803ecb4:	4658      	mov	r0, fp
 803ecb6:	f7fd fec5 	bl	803ca44 <__hi0bits>
 803ecba:	016d      	lsls	r5, r5, #5
 803ecbc:	f8d8 6000 	ldr.w	r6, [r8]
 803ecc0:	1a2d      	subs	r5, r5, r0
 803ecc2:	42b5      	cmp	r5, r6
 803ecc4:	dd54      	ble.n	803ed70 <__gethex+0x228>
 803ecc6:	1bad      	subs	r5, r5, r6
 803ecc8:	4629      	mov	r1, r5
 803ecca:	4620      	mov	r0, r4
 803eccc:	f7fe fa3f 	bl	803d14e <__any_on>
 803ecd0:	4681      	mov	r9, r0
 803ecd2:	b178      	cbz	r0, 803ecf4 <__gethex+0x1ac>
 803ecd4:	1e6b      	subs	r3, r5, #1
 803ecd6:	1159      	asrs	r1, r3, #5
 803ecd8:	f003 021f 	and.w	r2, r3, #31
 803ecdc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 803ece0:	f04f 0901 	mov.w	r9, #1
 803ece4:	fa09 f202 	lsl.w	r2, r9, r2
 803ece8:	420a      	tst	r2, r1
 803ecea:	d003      	beq.n	803ecf4 <__gethex+0x1ac>
 803ecec:	454b      	cmp	r3, r9
 803ecee:	dc36      	bgt.n	803ed5e <__gethex+0x216>
 803ecf0:	f04f 0902 	mov.w	r9, #2
 803ecf4:	4629      	mov	r1, r5
 803ecf6:	4620      	mov	r0, r4
 803ecf8:	f7ff febe 	bl	803ea78 <rshift>
 803ecfc:	442f      	add	r7, r5
 803ecfe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 803ed02:	42bb      	cmp	r3, r7
 803ed04:	da42      	bge.n	803ed8c <__gethex+0x244>
 803ed06:	9801      	ldr	r0, [sp, #4]
 803ed08:	4621      	mov	r1, r4
 803ed0a:	f7fd fe02 	bl	803c912 <_Bfree>
 803ed0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 803ed10:	2300      	movs	r3, #0
 803ed12:	6013      	str	r3, [r2, #0]
 803ed14:	25a3      	movs	r5, #163	@ 0xa3
 803ed16:	e793      	b.n	803ec40 <__gethex+0xf8>
 803ed18:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 803ed1c:	2a2e      	cmp	r2, #46	@ 0x2e
 803ed1e:	d012      	beq.n	803ed46 <__gethex+0x1fe>
 803ed20:	2b20      	cmp	r3, #32
 803ed22:	d104      	bne.n	803ed2e <__gethex+0x1e6>
 803ed24:	f845 bb04 	str.w	fp, [r5], #4
 803ed28:	f04f 0b00 	mov.w	fp, #0
 803ed2c:	465b      	mov	r3, fp
 803ed2e:	7830      	ldrb	r0, [r6, #0]
 803ed30:	9303      	str	r3, [sp, #12]
 803ed32:	f7ff fef3 	bl	803eb1c <__hexdig_fun>
 803ed36:	9b03      	ldr	r3, [sp, #12]
 803ed38:	f000 000f 	and.w	r0, r0, #15
 803ed3c:	4098      	lsls	r0, r3
 803ed3e:	ea4b 0b00 	orr.w	fp, fp, r0
 803ed42:	3304      	adds	r3, #4
 803ed44:	e7ae      	b.n	803eca4 <__gethex+0x15c>
 803ed46:	45b1      	cmp	r9, r6
 803ed48:	d8ea      	bhi.n	803ed20 <__gethex+0x1d8>
 803ed4a:	492b      	ldr	r1, [pc, #172]	@ (803edf8 <__gethex+0x2b0>)
 803ed4c:	9303      	str	r3, [sp, #12]
 803ed4e:	2201      	movs	r2, #1
 803ed50:	4630      	mov	r0, r6
 803ed52:	f7f7 f882 	bl	8035e5a <strncmp>
 803ed56:	9b03      	ldr	r3, [sp, #12]
 803ed58:	2800      	cmp	r0, #0
 803ed5a:	d1e1      	bne.n	803ed20 <__gethex+0x1d8>
 803ed5c:	e7a2      	b.n	803eca4 <__gethex+0x15c>
 803ed5e:	1ea9      	subs	r1, r5, #2
 803ed60:	4620      	mov	r0, r4
 803ed62:	f7fe f9f4 	bl	803d14e <__any_on>
 803ed66:	2800      	cmp	r0, #0
 803ed68:	d0c2      	beq.n	803ecf0 <__gethex+0x1a8>
 803ed6a:	f04f 0903 	mov.w	r9, #3
 803ed6e:	e7c1      	b.n	803ecf4 <__gethex+0x1ac>
 803ed70:	da09      	bge.n	803ed86 <__gethex+0x23e>
 803ed72:	1b75      	subs	r5, r6, r5
 803ed74:	4621      	mov	r1, r4
 803ed76:	9801      	ldr	r0, [sp, #4]
 803ed78:	462a      	mov	r2, r5
 803ed7a:	f7fd ffaf 	bl	803ccdc <__lshift>
 803ed7e:	1b7f      	subs	r7, r7, r5
 803ed80:	4604      	mov	r4, r0
 803ed82:	f100 0a14 	add.w	sl, r0, #20
 803ed86:	f04f 0900 	mov.w	r9, #0
 803ed8a:	e7b8      	b.n	803ecfe <__gethex+0x1b6>
 803ed8c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 803ed90:	42bd      	cmp	r5, r7
 803ed92:	dd6f      	ble.n	803ee74 <__gethex+0x32c>
 803ed94:	1bed      	subs	r5, r5, r7
 803ed96:	42ae      	cmp	r6, r5
 803ed98:	dc34      	bgt.n	803ee04 <__gethex+0x2bc>
 803ed9a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 803ed9e:	2b02      	cmp	r3, #2
 803eda0:	d022      	beq.n	803ede8 <__gethex+0x2a0>
 803eda2:	2b03      	cmp	r3, #3
 803eda4:	d024      	beq.n	803edf0 <__gethex+0x2a8>
 803eda6:	2b01      	cmp	r3, #1
 803eda8:	d115      	bne.n	803edd6 <__gethex+0x28e>
 803edaa:	42ae      	cmp	r6, r5
 803edac:	d113      	bne.n	803edd6 <__gethex+0x28e>
 803edae:	2e01      	cmp	r6, #1
 803edb0:	d10b      	bne.n	803edca <__gethex+0x282>
 803edb2:	9a02      	ldr	r2, [sp, #8]
 803edb4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 803edb8:	6013      	str	r3, [r2, #0]
 803edba:	2301      	movs	r3, #1
 803edbc:	6123      	str	r3, [r4, #16]
 803edbe:	f8ca 3000 	str.w	r3, [sl]
 803edc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803edc4:	2562      	movs	r5, #98	@ 0x62
 803edc6:	601c      	str	r4, [r3, #0]
 803edc8:	e73a      	b.n	803ec40 <__gethex+0xf8>
 803edca:	1e71      	subs	r1, r6, #1
 803edcc:	4620      	mov	r0, r4
 803edce:	f7fe f9be 	bl	803d14e <__any_on>
 803edd2:	2800      	cmp	r0, #0
 803edd4:	d1ed      	bne.n	803edb2 <__gethex+0x26a>
 803edd6:	9801      	ldr	r0, [sp, #4]
 803edd8:	4621      	mov	r1, r4
 803edda:	f7fd fd9a 	bl	803c912 <_Bfree>
 803edde:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 803ede0:	2300      	movs	r3, #0
 803ede2:	6013      	str	r3, [r2, #0]
 803ede4:	2550      	movs	r5, #80	@ 0x50
 803ede6:	e72b      	b.n	803ec40 <__gethex+0xf8>
 803ede8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803edea:	2b00      	cmp	r3, #0
 803edec:	d1f3      	bne.n	803edd6 <__gethex+0x28e>
 803edee:	e7e0      	b.n	803edb2 <__gethex+0x26a>
 803edf0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803edf2:	2b00      	cmp	r3, #0
 803edf4:	d1dd      	bne.n	803edb2 <__gethex+0x26a>
 803edf6:	e7ee      	b.n	803edd6 <__gethex+0x28e>
 803edf8:	0804492e 	.word	0x0804492e
 803edfc:	08044c66 	.word	0x08044c66
 803ee00:	08044f00 	.word	0x08044f00
 803ee04:	1e6f      	subs	r7, r5, #1
 803ee06:	f1b9 0f00 	cmp.w	r9, #0
 803ee0a:	d130      	bne.n	803ee6e <__gethex+0x326>
 803ee0c:	b127      	cbz	r7, 803ee18 <__gethex+0x2d0>
 803ee0e:	4639      	mov	r1, r7
 803ee10:	4620      	mov	r0, r4
 803ee12:	f7fe f99c 	bl	803d14e <__any_on>
 803ee16:	4681      	mov	r9, r0
 803ee18:	117a      	asrs	r2, r7, #5
 803ee1a:	2301      	movs	r3, #1
 803ee1c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 803ee20:	f007 071f 	and.w	r7, r7, #31
 803ee24:	40bb      	lsls	r3, r7
 803ee26:	4213      	tst	r3, r2
 803ee28:	4629      	mov	r1, r5
 803ee2a:	4620      	mov	r0, r4
 803ee2c:	bf18      	it	ne
 803ee2e:	f049 0902 	orrne.w	r9, r9, #2
 803ee32:	f7ff fe21 	bl	803ea78 <rshift>
 803ee36:	f8d8 7004 	ldr.w	r7, [r8, #4]
 803ee3a:	1b76      	subs	r6, r6, r5
 803ee3c:	2502      	movs	r5, #2
 803ee3e:	f1b9 0f00 	cmp.w	r9, #0
 803ee42:	d047      	beq.n	803eed4 <__gethex+0x38c>
 803ee44:	f8d8 300c 	ldr.w	r3, [r8, #12]
 803ee48:	2b02      	cmp	r3, #2
 803ee4a:	d015      	beq.n	803ee78 <__gethex+0x330>
 803ee4c:	2b03      	cmp	r3, #3
 803ee4e:	d017      	beq.n	803ee80 <__gethex+0x338>
 803ee50:	2b01      	cmp	r3, #1
 803ee52:	d109      	bne.n	803ee68 <__gethex+0x320>
 803ee54:	f019 0f02 	tst.w	r9, #2
 803ee58:	d006      	beq.n	803ee68 <__gethex+0x320>
 803ee5a:	f8da 3000 	ldr.w	r3, [sl]
 803ee5e:	ea49 0903 	orr.w	r9, r9, r3
 803ee62:	f019 0f01 	tst.w	r9, #1
 803ee66:	d10e      	bne.n	803ee86 <__gethex+0x33e>
 803ee68:	f045 0510 	orr.w	r5, r5, #16
 803ee6c:	e032      	b.n	803eed4 <__gethex+0x38c>
 803ee6e:	f04f 0901 	mov.w	r9, #1
 803ee72:	e7d1      	b.n	803ee18 <__gethex+0x2d0>
 803ee74:	2501      	movs	r5, #1
 803ee76:	e7e2      	b.n	803ee3e <__gethex+0x2f6>
 803ee78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803ee7a:	f1c3 0301 	rsb	r3, r3, #1
 803ee7e:	930f      	str	r3, [sp, #60]	@ 0x3c
 803ee80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803ee82:	2b00      	cmp	r3, #0
 803ee84:	d0f0      	beq.n	803ee68 <__gethex+0x320>
 803ee86:	f8d4 b010 	ldr.w	fp, [r4, #16]
 803ee8a:	f104 0314 	add.w	r3, r4, #20
 803ee8e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 803ee92:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 803ee96:	f04f 0c00 	mov.w	ip, #0
 803ee9a:	4618      	mov	r0, r3
 803ee9c:	f853 2b04 	ldr.w	r2, [r3], #4
 803eea0:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 803eea4:	d01b      	beq.n	803eede <__gethex+0x396>
 803eea6:	3201      	adds	r2, #1
 803eea8:	6002      	str	r2, [r0, #0]
 803eeaa:	2d02      	cmp	r5, #2
 803eeac:	f104 0314 	add.w	r3, r4, #20
 803eeb0:	d13c      	bne.n	803ef2c <__gethex+0x3e4>
 803eeb2:	f8d8 2000 	ldr.w	r2, [r8]
 803eeb6:	3a01      	subs	r2, #1
 803eeb8:	42b2      	cmp	r2, r6
 803eeba:	d109      	bne.n	803eed0 <__gethex+0x388>
 803eebc:	1171      	asrs	r1, r6, #5
 803eebe:	2201      	movs	r2, #1
 803eec0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 803eec4:	f006 061f 	and.w	r6, r6, #31
 803eec8:	fa02 f606 	lsl.w	r6, r2, r6
 803eecc:	421e      	tst	r6, r3
 803eece:	d13a      	bne.n	803ef46 <__gethex+0x3fe>
 803eed0:	f045 0520 	orr.w	r5, r5, #32
 803eed4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803eed6:	601c      	str	r4, [r3, #0]
 803eed8:	9b02      	ldr	r3, [sp, #8]
 803eeda:	601f      	str	r7, [r3, #0]
 803eedc:	e6b0      	b.n	803ec40 <__gethex+0xf8>
 803eede:	4299      	cmp	r1, r3
 803eee0:	f843 cc04 	str.w	ip, [r3, #-4]
 803eee4:	d8d9      	bhi.n	803ee9a <__gethex+0x352>
 803eee6:	68a3      	ldr	r3, [r4, #8]
 803eee8:	459b      	cmp	fp, r3
 803eeea:	db17      	blt.n	803ef1c <__gethex+0x3d4>
 803eeec:	6861      	ldr	r1, [r4, #4]
 803eeee:	9801      	ldr	r0, [sp, #4]
 803eef0:	3101      	adds	r1, #1
 803eef2:	f7fd fce9 	bl	803c8c8 <_Balloc>
 803eef6:	4681      	mov	r9, r0
 803eef8:	b918      	cbnz	r0, 803ef02 <__gethex+0x3ba>
 803eefa:	4b1a      	ldr	r3, [pc, #104]	@ (803ef64 <__gethex+0x41c>)
 803eefc:	4602      	mov	r2, r0
 803eefe:	2184      	movs	r1, #132	@ 0x84
 803ef00:	e6c5      	b.n	803ec8e <__gethex+0x146>
 803ef02:	6922      	ldr	r2, [r4, #16]
 803ef04:	3202      	adds	r2, #2
 803ef06:	f104 010c 	add.w	r1, r4, #12
 803ef0a:	0092      	lsls	r2, r2, #2
 803ef0c:	300c      	adds	r0, #12
 803ef0e:	f7f8 f9ab 	bl	8037268 <memcpy>
 803ef12:	4621      	mov	r1, r4
 803ef14:	9801      	ldr	r0, [sp, #4]
 803ef16:	f7fd fcfc 	bl	803c912 <_Bfree>
 803ef1a:	464c      	mov	r4, r9
 803ef1c:	6923      	ldr	r3, [r4, #16]
 803ef1e:	1c5a      	adds	r2, r3, #1
 803ef20:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 803ef24:	6122      	str	r2, [r4, #16]
 803ef26:	2201      	movs	r2, #1
 803ef28:	615a      	str	r2, [r3, #20]
 803ef2a:	e7be      	b.n	803eeaa <__gethex+0x362>
 803ef2c:	6922      	ldr	r2, [r4, #16]
 803ef2e:	455a      	cmp	r2, fp
 803ef30:	dd0b      	ble.n	803ef4a <__gethex+0x402>
 803ef32:	2101      	movs	r1, #1
 803ef34:	4620      	mov	r0, r4
 803ef36:	f7ff fd9f 	bl	803ea78 <rshift>
 803ef3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 803ef3e:	3701      	adds	r7, #1
 803ef40:	42bb      	cmp	r3, r7
 803ef42:	f6ff aee0 	blt.w	803ed06 <__gethex+0x1be>
 803ef46:	2501      	movs	r5, #1
 803ef48:	e7c2      	b.n	803eed0 <__gethex+0x388>
 803ef4a:	f016 061f 	ands.w	r6, r6, #31
 803ef4e:	d0fa      	beq.n	803ef46 <__gethex+0x3fe>
 803ef50:	4453      	add	r3, sl
 803ef52:	f1c6 0620 	rsb	r6, r6, #32
 803ef56:	f853 0c04 	ldr.w	r0, [r3, #-4]
 803ef5a:	f7fd fd73 	bl	803ca44 <__hi0bits>
 803ef5e:	42b0      	cmp	r0, r6
 803ef60:	dbe7      	blt.n	803ef32 <__gethex+0x3ea>
 803ef62:	e7f0      	b.n	803ef46 <__gethex+0x3fe>
 803ef64:	08044c66 	.word	0x08044c66

0803ef68 <L_shift>:
 803ef68:	f1c2 0208 	rsb	r2, r2, #8
 803ef6c:	0092      	lsls	r2, r2, #2
 803ef6e:	b570      	push	{r4, r5, r6, lr}
 803ef70:	f1c2 0620 	rsb	r6, r2, #32
 803ef74:	6843      	ldr	r3, [r0, #4]
 803ef76:	6804      	ldr	r4, [r0, #0]
 803ef78:	fa03 f506 	lsl.w	r5, r3, r6
 803ef7c:	432c      	orrs	r4, r5
 803ef7e:	40d3      	lsrs	r3, r2
 803ef80:	6004      	str	r4, [r0, #0]
 803ef82:	f840 3f04 	str.w	r3, [r0, #4]!
 803ef86:	4288      	cmp	r0, r1
 803ef88:	d3f4      	bcc.n	803ef74 <L_shift+0xc>
 803ef8a:	bd70      	pop	{r4, r5, r6, pc}

0803ef8c <__match>:
 803ef8c:	b530      	push	{r4, r5, lr}
 803ef8e:	6803      	ldr	r3, [r0, #0]
 803ef90:	3301      	adds	r3, #1
 803ef92:	f811 4b01 	ldrb.w	r4, [r1], #1
 803ef96:	b914      	cbnz	r4, 803ef9e <__match+0x12>
 803ef98:	6003      	str	r3, [r0, #0]
 803ef9a:	2001      	movs	r0, #1
 803ef9c:	bd30      	pop	{r4, r5, pc}
 803ef9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 803efa2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 803efa6:	2d19      	cmp	r5, #25
 803efa8:	bf98      	it	ls
 803efaa:	3220      	addls	r2, #32
 803efac:	42a2      	cmp	r2, r4
 803efae:	d0f0      	beq.n	803ef92 <__match+0x6>
 803efb0:	2000      	movs	r0, #0
 803efb2:	e7f3      	b.n	803ef9c <__match+0x10>

0803efb4 <__hexnan>:
 803efb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803efb8:	680b      	ldr	r3, [r1, #0]
 803efba:	6801      	ldr	r1, [r0, #0]
 803efbc:	115e      	asrs	r6, r3, #5
 803efbe:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 803efc2:	f013 031f 	ands.w	r3, r3, #31
 803efc6:	b087      	sub	sp, #28
 803efc8:	bf18      	it	ne
 803efca:	3604      	addne	r6, #4
 803efcc:	2500      	movs	r5, #0
 803efce:	1f37      	subs	r7, r6, #4
 803efd0:	4682      	mov	sl, r0
 803efd2:	4690      	mov	r8, r2
 803efd4:	9301      	str	r3, [sp, #4]
 803efd6:	f846 5c04 	str.w	r5, [r6, #-4]
 803efda:	46b9      	mov	r9, r7
 803efdc:	463c      	mov	r4, r7
 803efde:	9502      	str	r5, [sp, #8]
 803efe0:	46ab      	mov	fp, r5
 803efe2:	784a      	ldrb	r2, [r1, #1]
 803efe4:	1c4b      	adds	r3, r1, #1
 803efe6:	9303      	str	r3, [sp, #12]
 803efe8:	b342      	cbz	r2, 803f03c <__hexnan+0x88>
 803efea:	4610      	mov	r0, r2
 803efec:	9105      	str	r1, [sp, #20]
 803efee:	9204      	str	r2, [sp, #16]
 803eff0:	f7ff fd94 	bl	803eb1c <__hexdig_fun>
 803eff4:	2800      	cmp	r0, #0
 803eff6:	d151      	bne.n	803f09c <__hexnan+0xe8>
 803eff8:	9a04      	ldr	r2, [sp, #16]
 803effa:	9905      	ldr	r1, [sp, #20]
 803effc:	2a20      	cmp	r2, #32
 803effe:	d818      	bhi.n	803f032 <__hexnan+0x7e>
 803f000:	9b02      	ldr	r3, [sp, #8]
 803f002:	459b      	cmp	fp, r3
 803f004:	dd13      	ble.n	803f02e <__hexnan+0x7a>
 803f006:	454c      	cmp	r4, r9
 803f008:	d206      	bcs.n	803f018 <__hexnan+0x64>
 803f00a:	2d07      	cmp	r5, #7
 803f00c:	dc04      	bgt.n	803f018 <__hexnan+0x64>
 803f00e:	462a      	mov	r2, r5
 803f010:	4649      	mov	r1, r9
 803f012:	4620      	mov	r0, r4
 803f014:	f7ff ffa8 	bl	803ef68 <L_shift>
 803f018:	4544      	cmp	r4, r8
 803f01a:	d952      	bls.n	803f0c2 <__hexnan+0x10e>
 803f01c:	2300      	movs	r3, #0
 803f01e:	f1a4 0904 	sub.w	r9, r4, #4
 803f022:	f844 3c04 	str.w	r3, [r4, #-4]
 803f026:	f8cd b008 	str.w	fp, [sp, #8]
 803f02a:	464c      	mov	r4, r9
 803f02c:	461d      	mov	r5, r3
 803f02e:	9903      	ldr	r1, [sp, #12]
 803f030:	e7d7      	b.n	803efe2 <__hexnan+0x2e>
 803f032:	2a29      	cmp	r2, #41	@ 0x29
 803f034:	d157      	bne.n	803f0e6 <__hexnan+0x132>
 803f036:	3102      	adds	r1, #2
 803f038:	f8ca 1000 	str.w	r1, [sl]
 803f03c:	f1bb 0f00 	cmp.w	fp, #0
 803f040:	d051      	beq.n	803f0e6 <__hexnan+0x132>
 803f042:	454c      	cmp	r4, r9
 803f044:	d206      	bcs.n	803f054 <__hexnan+0xa0>
 803f046:	2d07      	cmp	r5, #7
 803f048:	dc04      	bgt.n	803f054 <__hexnan+0xa0>
 803f04a:	462a      	mov	r2, r5
 803f04c:	4649      	mov	r1, r9
 803f04e:	4620      	mov	r0, r4
 803f050:	f7ff ff8a 	bl	803ef68 <L_shift>
 803f054:	4544      	cmp	r4, r8
 803f056:	d936      	bls.n	803f0c6 <__hexnan+0x112>
 803f058:	f1a8 0204 	sub.w	r2, r8, #4
 803f05c:	4623      	mov	r3, r4
 803f05e:	f853 1b04 	ldr.w	r1, [r3], #4
 803f062:	f842 1f04 	str.w	r1, [r2, #4]!
 803f066:	429f      	cmp	r7, r3
 803f068:	d2f9      	bcs.n	803f05e <__hexnan+0xaa>
 803f06a:	1b3b      	subs	r3, r7, r4
 803f06c:	f023 0303 	bic.w	r3, r3, #3
 803f070:	3304      	adds	r3, #4
 803f072:	3401      	adds	r4, #1
 803f074:	3e03      	subs	r6, #3
 803f076:	42b4      	cmp	r4, r6
 803f078:	bf88      	it	hi
 803f07a:	2304      	movhi	r3, #4
 803f07c:	4443      	add	r3, r8
 803f07e:	2200      	movs	r2, #0
 803f080:	f843 2b04 	str.w	r2, [r3], #4
 803f084:	429f      	cmp	r7, r3
 803f086:	d2fb      	bcs.n	803f080 <__hexnan+0xcc>
 803f088:	683b      	ldr	r3, [r7, #0]
 803f08a:	b91b      	cbnz	r3, 803f094 <__hexnan+0xe0>
 803f08c:	4547      	cmp	r7, r8
 803f08e:	d128      	bne.n	803f0e2 <__hexnan+0x12e>
 803f090:	2301      	movs	r3, #1
 803f092:	603b      	str	r3, [r7, #0]
 803f094:	2005      	movs	r0, #5
 803f096:	b007      	add	sp, #28
 803f098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803f09c:	3501      	adds	r5, #1
 803f09e:	2d08      	cmp	r5, #8
 803f0a0:	f10b 0b01 	add.w	fp, fp, #1
 803f0a4:	dd06      	ble.n	803f0b4 <__hexnan+0x100>
 803f0a6:	4544      	cmp	r4, r8
 803f0a8:	d9c1      	bls.n	803f02e <__hexnan+0x7a>
 803f0aa:	2300      	movs	r3, #0
 803f0ac:	f844 3c04 	str.w	r3, [r4, #-4]
 803f0b0:	2501      	movs	r5, #1
 803f0b2:	3c04      	subs	r4, #4
 803f0b4:	6822      	ldr	r2, [r4, #0]
 803f0b6:	f000 000f 	and.w	r0, r0, #15
 803f0ba:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 803f0be:	6020      	str	r0, [r4, #0]
 803f0c0:	e7b5      	b.n	803f02e <__hexnan+0x7a>
 803f0c2:	2508      	movs	r5, #8
 803f0c4:	e7b3      	b.n	803f02e <__hexnan+0x7a>
 803f0c6:	9b01      	ldr	r3, [sp, #4]
 803f0c8:	2b00      	cmp	r3, #0
 803f0ca:	d0dd      	beq.n	803f088 <__hexnan+0xd4>
 803f0cc:	f1c3 0320 	rsb	r3, r3, #32
 803f0d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 803f0d4:	40da      	lsrs	r2, r3
 803f0d6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 803f0da:	4013      	ands	r3, r2
 803f0dc:	f846 3c04 	str.w	r3, [r6, #-4]
 803f0e0:	e7d2      	b.n	803f088 <__hexnan+0xd4>
 803f0e2:	3f04      	subs	r7, #4
 803f0e4:	e7d0      	b.n	803f088 <__hexnan+0xd4>
 803f0e6:	2004      	movs	r0, #4
 803f0e8:	e7d5      	b.n	803f096 <__hexnan+0xe2>
	...

0803f0ec <_init>:
 803f0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803f0ee:	bf00      	nop
 803f0f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803f0f2:	bc08      	pop	{r3}
 803f0f4:	469e      	mov	lr, r3
 803f0f6:	4770      	bx	lr

0803f0f8 <_fini>:
 803f0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803f0fa:	bf00      	nop
 803f0fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803f0fe:	bc08      	pop	{r3}
 803f100:	469e      	mov	lr, r3
 803f102:	4770      	bx	lr
